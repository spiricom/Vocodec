
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029e70  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000229d8  0802a108  0802a108  0003a108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804cae0  0804cae0  0006049c  2**0
                  CONTENTS
  4 .ARM          00000008  0804cae0  0804cae0  0005cae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804cae8  0804cae8  0006049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804cae8  0804cae8  0005cae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804caec  0804caec  0005caec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  0804caf0  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019030  200004a0  0804cf8c  000604a0  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  200194d0  0804cf8c  000694d0  2**0
                  ALLOC
 11 .RAM_D1       0007eb58  24000000  24000000  00070000  2**5
                  ALLOC
 12 .RAM_D2       000015e8  30000000  30000000  00070000  2**5
                  ALLOC
 13 .RAM_D3       00000201  38000000  38000000  00070000  2**5
                  ALLOC
 14 .SDRAM        02000000  60000000  60000000  00070000  2**5
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  0006049c  2**0
                  CONTENTS, READONLY
 16 .debug_info   000c8205  00000000  00000000  000604ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00010f6a  00000000  00000000  001286cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00067758  00000000  00000000  00139639  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00004478  00000000  00000000  001a0d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00010318  00000000  00000000  001a5210  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0004a3b0  00000000  00000000  001b5528  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   000535de  00000000  00000000  001ff8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0018c64b  00000000  00000000  00252eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  003df501  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00010484  00000000  00000000  003df57c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200004a0 	.word	0x200004a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0802a0f0 	.word	0x0802a0f0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200004a4 	.word	0x200004a4
 80002d4:	0802a0f0 	.word	0x0802a0f0

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	; 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000426:	f1a4 0401 	sub.w	r4, r4, #1
 800042a:	d1e9      	bne.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800071c:	f1a2 0201 	sub.w	r2, r2, #1
 8000720:	d1ed      	bne.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800088c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000890:	f000 b972 	b.w	8000b78 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9e08      	ldr	r6, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	4688      	mov	r8, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d14b      	bne.n	8000952 <__udivmoddi4+0xa6>
 80008ba:	428a      	cmp	r2, r1
 80008bc:	4615      	mov	r5, r2
 80008be:	d967      	bls.n	8000990 <__udivmoddi4+0xe4>
 80008c0:	fab2 f282 	clz	r2, r2
 80008c4:	b14a      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c6:	f1c2 0720 	rsb	r7, r2, #32
 80008ca:	fa01 f302 	lsl.w	r3, r1, r2
 80008ce:	fa20 f707 	lsr.w	r7, r0, r7
 80008d2:	4095      	lsls	r5, r2
 80008d4:	ea47 0803 	orr.w	r8, r7, r3
 80008d8:	4094      	lsls	r4, r2
 80008da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008de:	0c23      	lsrs	r3, r4, #16
 80008e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80008e4:	fa1f fc85 	uxth.w	ip, r5
 80008e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80008ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008f0:	fb07 f10c 	mul.w	r1, r7, ip
 80008f4:	4299      	cmp	r1, r3
 80008f6:	d909      	bls.n	800090c <__udivmoddi4+0x60>
 80008f8:	18eb      	adds	r3, r5, r3
 80008fa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80008fe:	f080 811b 	bcs.w	8000b38 <__udivmoddi4+0x28c>
 8000902:	4299      	cmp	r1, r3
 8000904:	f240 8118 	bls.w	8000b38 <__udivmoddi4+0x28c>
 8000908:	3f02      	subs	r7, #2
 800090a:	442b      	add	r3, r5
 800090c:	1a5b      	subs	r3, r3, r1
 800090e:	b2a4      	uxth	r4, r4
 8000910:	fbb3 f0fe 	udiv	r0, r3, lr
 8000914:	fb0e 3310 	mls	r3, lr, r0, r3
 8000918:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800091c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000920:	45a4      	cmp	ip, r4
 8000922:	d909      	bls.n	8000938 <__udivmoddi4+0x8c>
 8000924:	192c      	adds	r4, r5, r4
 8000926:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800092a:	f080 8107 	bcs.w	8000b3c <__udivmoddi4+0x290>
 800092e:	45a4      	cmp	ip, r4
 8000930:	f240 8104 	bls.w	8000b3c <__udivmoddi4+0x290>
 8000934:	3802      	subs	r0, #2
 8000936:	442c      	add	r4, r5
 8000938:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800093c:	eba4 040c 	sub.w	r4, r4, ip
 8000940:	2700      	movs	r7, #0
 8000942:	b11e      	cbz	r6, 800094c <__udivmoddi4+0xa0>
 8000944:	40d4      	lsrs	r4, r2
 8000946:	2300      	movs	r3, #0
 8000948:	e9c6 4300 	strd	r4, r3, [r6]
 800094c:	4639      	mov	r1, r7
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	428b      	cmp	r3, r1
 8000954:	d909      	bls.n	800096a <__udivmoddi4+0xbe>
 8000956:	2e00      	cmp	r6, #0
 8000958:	f000 80eb 	beq.w	8000b32 <__udivmoddi4+0x286>
 800095c:	2700      	movs	r7, #0
 800095e:	e9c6 0100 	strd	r0, r1, [r6]
 8000962:	4638      	mov	r0, r7
 8000964:	4639      	mov	r1, r7
 8000966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096a:	fab3 f783 	clz	r7, r3
 800096e:	2f00      	cmp	r7, #0
 8000970:	d147      	bne.n	8000a02 <__udivmoddi4+0x156>
 8000972:	428b      	cmp	r3, r1
 8000974:	d302      	bcc.n	800097c <__udivmoddi4+0xd0>
 8000976:	4282      	cmp	r2, r0
 8000978:	f200 80fa 	bhi.w	8000b70 <__udivmoddi4+0x2c4>
 800097c:	1a84      	subs	r4, r0, r2
 800097e:	eb61 0303 	sbc.w	r3, r1, r3
 8000982:	2001      	movs	r0, #1
 8000984:	4698      	mov	r8, r3
 8000986:	2e00      	cmp	r6, #0
 8000988:	d0e0      	beq.n	800094c <__udivmoddi4+0xa0>
 800098a:	e9c6 4800 	strd	r4, r8, [r6]
 800098e:	e7dd      	b.n	800094c <__udivmoddi4+0xa0>
 8000990:	b902      	cbnz	r2, 8000994 <__udivmoddi4+0xe8>
 8000992:	deff      	udf	#255	; 0xff
 8000994:	fab2 f282 	clz	r2, r2
 8000998:	2a00      	cmp	r2, #0
 800099a:	f040 808f 	bne.w	8000abc <__udivmoddi4+0x210>
 800099e:	1b49      	subs	r1, r1, r5
 80009a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80009a4:	fa1f f885 	uxth.w	r8, r5
 80009a8:	2701      	movs	r7, #1
 80009aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80009ae:	0c23      	lsrs	r3, r4, #16
 80009b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80009b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009b8:	fb08 f10c 	mul.w	r1, r8, ip
 80009bc:	4299      	cmp	r1, r3
 80009be:	d907      	bls.n	80009d0 <__udivmoddi4+0x124>
 80009c0:	18eb      	adds	r3, r5, r3
 80009c2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x122>
 80009c8:	4299      	cmp	r1, r3
 80009ca:	f200 80cd 	bhi.w	8000b68 <__udivmoddi4+0x2bc>
 80009ce:	4684      	mov	ip, r0
 80009d0:	1a59      	subs	r1, r3, r1
 80009d2:	b2a3      	uxth	r3, r4
 80009d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80009dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80009e0:	fb08 f800 	mul.w	r8, r8, r0
 80009e4:	45a0      	cmp	r8, r4
 80009e6:	d907      	bls.n	80009f8 <__udivmoddi4+0x14c>
 80009e8:	192c      	adds	r4, r5, r4
 80009ea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x14a>
 80009f0:	45a0      	cmp	r8, r4
 80009f2:	f200 80b6 	bhi.w	8000b62 <__udivmoddi4+0x2b6>
 80009f6:	4618      	mov	r0, r3
 80009f8:	eba4 0408 	sub.w	r4, r4, r8
 80009fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a00:	e79f      	b.n	8000942 <__udivmoddi4+0x96>
 8000a02:	f1c7 0c20 	rsb	ip, r7, #32
 8000a06:	40bb      	lsls	r3, r7
 8000a08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000a0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000a10:	fa01 f407 	lsl.w	r4, r1, r7
 8000a14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000a18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000a1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000a20:	4325      	orrs	r5, r4
 8000a22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000a26:	0c2c      	lsrs	r4, r5, #16
 8000a28:	fb08 3319 	mls	r3, r8, r9, r3
 8000a2c:	fa1f fa8e 	uxth.w	sl, lr
 8000a30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000a34:	fb09 f40a 	mul.w	r4, r9, sl
 8000a38:	429c      	cmp	r4, r3
 8000a3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000a3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000a42:	d90b      	bls.n	8000a5c <__udivmoddi4+0x1b0>
 8000a44:	eb1e 0303 	adds.w	r3, lr, r3
 8000a48:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a4c:	f080 8087 	bcs.w	8000b5e <__udivmoddi4+0x2b2>
 8000a50:	429c      	cmp	r4, r3
 8000a52:	f240 8084 	bls.w	8000b5e <__udivmoddi4+0x2b2>
 8000a56:	f1a9 0902 	sub.w	r9, r9, #2
 8000a5a:	4473      	add	r3, lr
 8000a5c:	1b1b      	subs	r3, r3, r4
 8000a5e:	b2ad      	uxth	r5, r5
 8000a60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a64:	fb08 3310 	mls	r3, r8, r0, r3
 8000a68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000a6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000a70:	45a2      	cmp	sl, r4
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x1da>
 8000a74:	eb1e 0404 	adds.w	r4, lr, r4
 8000a78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a7c:	d26b      	bcs.n	8000b56 <__udivmoddi4+0x2aa>
 8000a7e:	45a2      	cmp	sl, r4
 8000a80:	d969      	bls.n	8000b56 <__udivmoddi4+0x2aa>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4474      	add	r4, lr
 8000a86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a8e:	eba4 040a 	sub.w	r4, r4, sl
 8000a92:	454c      	cmp	r4, r9
 8000a94:	46c2      	mov	sl, r8
 8000a96:	464b      	mov	r3, r9
 8000a98:	d354      	bcc.n	8000b44 <__udivmoddi4+0x298>
 8000a9a:	d051      	beq.n	8000b40 <__udivmoddi4+0x294>
 8000a9c:	2e00      	cmp	r6, #0
 8000a9e:	d069      	beq.n	8000b74 <__udivmoddi4+0x2c8>
 8000aa0:	ebb1 050a 	subs.w	r5, r1, sl
 8000aa4:	eb64 0403 	sbc.w	r4, r4, r3
 8000aa8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000aac:	40fd      	lsrs	r5, r7
 8000aae:	40fc      	lsrs	r4, r7
 8000ab0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ab4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ab8:	2700      	movs	r7, #0
 8000aba:	e747      	b.n	800094c <__udivmoddi4+0xa0>
 8000abc:	f1c2 0320 	rsb	r3, r2, #32
 8000ac0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ac4:	4095      	lsls	r5, r2
 8000ac6:	fa01 f002 	lsl.w	r0, r1, r2
 8000aca:	fa21 f303 	lsr.w	r3, r1, r3
 8000ace:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ad2:	4338      	orrs	r0, r7
 8000ad4:	0c01      	lsrs	r1, r0, #16
 8000ad6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ada:	fa1f f885 	uxth.w	r8, r5
 8000ade:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ae2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae6:	fb07 f308 	mul.w	r3, r7, r8
 8000aea:	428b      	cmp	r3, r1
 8000aec:	fa04 f402 	lsl.w	r4, r4, r2
 8000af0:	d907      	bls.n	8000b02 <__udivmoddi4+0x256>
 8000af2:	1869      	adds	r1, r5, r1
 8000af4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000af8:	d22f      	bcs.n	8000b5a <__udivmoddi4+0x2ae>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d92d      	bls.n	8000b5a <__udivmoddi4+0x2ae>
 8000afe:	3f02      	subs	r7, #2
 8000b00:	4429      	add	r1, r5
 8000b02:	1acb      	subs	r3, r1, r3
 8000b04:	b281      	uxth	r1, r0
 8000b06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b12:	fb00 f308 	mul.w	r3, r0, r8
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d907      	bls.n	8000b2a <__udivmoddi4+0x27e>
 8000b1a:	1869      	adds	r1, r5, r1
 8000b1c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000b20:	d217      	bcs.n	8000b52 <__udivmoddi4+0x2a6>
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d915      	bls.n	8000b52 <__udivmoddi4+0x2a6>
 8000b26:	3802      	subs	r0, #2
 8000b28:	4429      	add	r1, r5
 8000b2a:	1ac9      	subs	r1, r1, r3
 8000b2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000b30:	e73b      	b.n	80009aa <__udivmoddi4+0xfe>
 8000b32:	4637      	mov	r7, r6
 8000b34:	4630      	mov	r0, r6
 8000b36:	e709      	b.n	800094c <__udivmoddi4+0xa0>
 8000b38:	4607      	mov	r7, r0
 8000b3a:	e6e7      	b.n	800090c <__udivmoddi4+0x60>
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	e6fb      	b.n	8000938 <__udivmoddi4+0x8c>
 8000b40:	4541      	cmp	r1, r8
 8000b42:	d2ab      	bcs.n	8000a9c <__udivmoddi4+0x1f0>
 8000b44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000b48:	eb69 020e 	sbc.w	r2, r9, lr
 8000b4c:	3801      	subs	r0, #1
 8000b4e:	4613      	mov	r3, r2
 8000b50:	e7a4      	b.n	8000a9c <__udivmoddi4+0x1f0>
 8000b52:	4660      	mov	r0, ip
 8000b54:	e7e9      	b.n	8000b2a <__udivmoddi4+0x27e>
 8000b56:	4618      	mov	r0, r3
 8000b58:	e795      	b.n	8000a86 <__udivmoddi4+0x1da>
 8000b5a:	4667      	mov	r7, ip
 8000b5c:	e7d1      	b.n	8000b02 <__udivmoddi4+0x256>
 8000b5e:	4681      	mov	r9, r0
 8000b60:	e77c      	b.n	8000a5c <__udivmoddi4+0x1b0>
 8000b62:	3802      	subs	r0, #2
 8000b64:	442c      	add	r4, r5
 8000b66:	e747      	b.n	80009f8 <__udivmoddi4+0x14c>
 8000b68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b6c:	442b      	add	r3, r5
 8000b6e:	e72f      	b.n	80009d0 <__udivmoddi4+0x124>
 8000b70:	4638      	mov	r0, r7
 8000b72:	e708      	b.n	8000986 <__udivmoddi4+0xda>
 8000b74:	4637      	mov	r7, r6
 8000b76:	e6e9      	b.n	800094c <__udivmoddi4+0xa0>

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_InitTick+0x40>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b90b      	cbnz	r3, 8000b86 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8000b82:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b84:	4770      	bx	lr
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b8a:	490d      	ldr	r1, [pc, #52]	; (8000bc0 <HAL_InitTick+0x44>)
 8000b8c:	fbb2 f3f3 	udiv	r3, r2, r3
{
 8000b90:	b510      	push	{r4, lr}
 8000b92:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b94:	6808      	ldr	r0, [r1, #0]
 8000b96:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b9a:	f001 fd2f 	bl	80025fc <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	2c0f      	cmp	r4, #15
 8000ba0:	d800      	bhi.n	8000ba4 <HAL_InitTick+0x28>
 8000ba2:	b108      	cbz	r0, 8000ba8 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000ba4:	2001      	movs	r0, #1
}
 8000ba6:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4621      	mov	r1, r4
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb0:	f001 fcb0 	bl	8002514 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_InitTick+0x48>)
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	601c      	str	r4, [r3, #0]
}
 8000bba:	bd10      	pop	{r4, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	200002b0 	.word	0x200002b0
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_Init>:
{
 8000bc8:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bca:	2003      	movs	r0, #3
{
 8000bcc:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bce:	f001 fc85 	bl	80024dc <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bd2:	4c12      	ldr	r4, [pc, #72]	; (8000c1c <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bd4:	f007 fe9a 	bl	800890c <HAL_RCC_GetSysClockFreq>
 8000bd8:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <HAL_Init+0x58>)
 8000bda:	4912      	ldr	r1, [pc, #72]	; (8000c24 <HAL_Init+0x5c>)
 8000bdc:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bde:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000be0:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8000be4:	4d10      	ldr	r5, [pc, #64]	; (8000c28 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000be6:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bea:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bec:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bee:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bf2:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bf6:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bfa:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bfc:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8000c00:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c02:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c04:	f7ff ffba 	bl	8000b7c <HAL_InitTick>
 8000c08:	b110      	cbz	r0, 8000c10 <HAL_Init+0x48>
    return HAL_ERROR;
 8000c0a:	2001      	movs	r0, #1
}
 8000c0c:	b003      	add	sp, #12
 8000c0e:	bd30      	pop	{r4, r5, pc}
 8000c10:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 8000c12:	f01b fb29 	bl	801c268 <HAL_MspInit>
  return HAL_OK;
 8000c16:	9801      	ldr	r0, [sp, #4]
}
 8000c18:	b003      	add	sp, #12
 8000c1a:	bd30      	pop	{r4, r5, pc}
 8000c1c:	200002b4 	.word	0x200002b4
 8000c20:	58024400 	.word	0x58024400
 8000c24:	0802b300 	.word	0x0802b300
 8000c28:	200002b0 	.word	0x200002b0

08000c2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000c2c:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <HAL_IncTick+0x10>)
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <HAL_IncTick+0x14>)
 8000c30:	6811      	ldr	r1, [r2, #0]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	440b      	add	r3, r1
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000660 	.word	0x20000660
 8000c40:	20000000 	.word	0x20000000

08000c44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c44:	4b01      	ldr	r3, [pc, #4]	; (8000c4c <HAL_GetTick+0x8>)
 8000c46:	6818      	ldr	r0, [r3, #0]
}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000660 	.word	0x20000660

08000c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c50:	b538      	push	{r3, r4, r5, lr}
 8000c52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff fff6 	bl	8000c44 <HAL_GetTick>
 8000c58:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5a:	1c63      	adds	r3, r4, #1
 8000c5c:	d002      	beq.n	8000c64 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <HAL_Delay+0x20>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c64:	f7ff ffee 	bl	8000c44 <HAL_GetTick>
 8000c68:	1b40      	subs	r0, r0, r5
 8000c6a:	42a0      	cmp	r0, r4
 8000c6c:	d3fa      	bcc.n	8000c64 <HAL_Delay+0x14>
  {
  }
}
 8000c6e:	bd38      	pop	{r3, r4, r5, pc}
 8000c70:	20000000 	.word	0x20000000

08000c74 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000c74:	4b01      	ldr	r3, [pc, #4]	; (8000c7c <HAL_GetREVID+0x8>)
 8000c76:	6818      	ldr	r0, [r3, #0]
}
 8000c78:	0c00      	lsrs	r0, r0, #16
 8000c7a:	4770      	bx	lr
 8000c7c:	5c001000 	.word	0x5c001000

08000c80 <HAL_SetFMCMemorySwappingConfig>:
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
 8000c80:	f030 7380 	bics.w	r3, r0, #16777216	; 0x1000000
{
 8000c84:	b510      	push	{r4, lr}
 8000c86:	4604      	mov	r4, r0
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
 8000c88:	d002      	beq.n	8000c90 <HAL_SetFMCMemorySwappingConfig+0x10>
 8000c8a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8000c8e:	d106      	bne.n	8000c9e <HAL_SetFMCMemorySwappingConfig+0x1e>
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_SetFMCMemorySwappingConfig+0x2c>)
 8000c92:	6818      	ldr	r0, [r3, #0]
 8000c94:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8000c98:	4320      	orrs	r0, r4
 8000c9a:	6018      	str	r0, [r3, #0]
}
 8000c9c:	bd10      	pop	{r4, pc}
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
 8000c9e:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8000ca2:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <HAL_SetFMCMemorySwappingConfig+0x30>)
 8000ca4:	f012 ffca 	bl	8013c3c <assert_failed>
 8000ca8:	e7f2      	b.n	8000c90 <HAL_SetFMCMemorySwappingConfig+0x10>
 8000caa:	bf00      	nop
 8000cac:	52004000 	.word	0x52004000
 8000cb0:	0802a154 	.word	0x0802a154

08000cb4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000cb8:	4b6a      	ldr	r3, [pc, #424]	; (8000e64 <HAL_ADC_Start_DMA+0x1b0>)
{
 8000cba:	460e      	mov	r6, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000cbc:	6801      	ldr	r1, [r0, #0]
{
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d037      	beq.n	8000d36 <HAL_ADC_Start_DMA+0x82>
 8000cc6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cca:	4299      	cmp	r1, r3
 8000ccc:	d033      	beq.n	8000d36 <HAL_ADC_Start_DMA+0x82>
 8000cce:	4866      	ldr	r0, [pc, #408]	; (8000e68 <HAL_ADC_Start_DMA+0x1b4>)

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000cd0:	4a64      	ldr	r2, [pc, #400]	; (8000e64 <HAL_ADC_Start_DMA+0x1b0>)
 8000cd2:	4b66      	ldr	r3, [pc, #408]	; (8000e6c <HAL_ADC_Start_DMA+0x1b8>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000cd4:	6885      	ldr	r5, [r0, #8]
 8000cd6:	4291      	cmp	r1, r2
 8000cd8:	bf18      	it	ne
 8000cda:	4299      	cmpne	r1, r3
 8000cdc:	d002      	beq.n	8000ce4 <HAL_ADC_Start_DMA+0x30>
 8000cde:	4b64      	ldr	r3, [pc, #400]	; (8000e70 <HAL_ADC_Start_DMA+0x1bc>)
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d12a      	bne.n	8000d3a <HAL_ADC_Start_DMA+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ce4:	688b      	ldr	r3, [r1, #8]
 8000ce6:	075a      	lsls	r2, r3, #29
 8000ce8:	d430      	bmi.n	8000d4c <HAL_ADC_Start_DMA+0x98>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cea:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d02c      	beq.n	8000d4c <HAL_ADC_Start_DMA+0x98>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000cf2:	f005 051f 	and.w	r5, r5, #31
 8000cf6:	2301      	movs	r3, #1

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000cf8:	2d09      	cmp	r5, #9
    __HAL_LOCK(hadc);
 8000cfa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000cfe:	d905      	bls.n	8000d0c <HAL_ADC_Start_DMA+0x58>
        LL_ADC_REG_StartConversion(hadc->Instance);
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000d00:	2300      	movs	r3, #0
 8000d02:	2001      	movs	r0, #1
 8000d04:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = HAL_BUSY;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d0c:	f240 2021 	movw	r0, #545	; 0x221
 8000d10:	40e8      	lsrs	r0, r5
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000d12:	07c3      	lsls	r3, r0, #31
 8000d14:	d5f4      	bpl.n	8000d00 <HAL_ADC_Start_DMA+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d16:	688b      	ldr	r3, [r1, #8]
 8000d18:	07d8      	lsls	r0, r3, #31
 8000d1a:	d41a      	bmi.n	8000d52 <HAL_ADC_Start_DMA+0x9e>
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000d1c:	688a      	ldr	r2, [r1, #8]
 8000d1e:	4b55      	ldr	r3, [pc, #340]	; (8000e74 <HAL_ADC_Start_DMA+0x1c0>)
 8000d20:	421a      	tst	r2, r3
 8000d22:	d05b      	beq.n	8000ddc <HAL_ADC_Start_DMA+0x128>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	6563      	str	r3, [r4, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d34:	e7e4      	b.n	8000d00 <HAL_ADC_Start_DMA+0x4c>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000d36:	4850      	ldr	r0, [pc, #320]	; (8000e78 <HAL_ADC_Start_DMA+0x1c4>)
 8000d38:	e7ca      	b.n	8000cd0 <HAL_ADC_Start_DMA+0x1c>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000d3a:	f240 71a7 	movw	r1, #1959	; 0x7a7
 8000d3e:	484f      	ldr	r0, [pc, #316]	; (8000e7c <HAL_ADC_Start_DMA+0x1c8>)
 8000d40:	f012 ff7c 	bl	8013c3c <assert_failed>
 8000d44:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d46:	688b      	ldr	r3, [r1, #8]
 8000d48:	075a      	lsls	r2, r3, #29
 8000d4a:	d5ce      	bpl.n	8000cea <HAL_ADC_Start_DMA+0x36>
    tmp_hal_status = HAL_BUSY;
 8000d4c:	2002      	movs	r0, #2
}
 8000d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d52:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <HAL_ADC_Start_DMA+0x1b8>)
 8000d54:	1ac9      	subs	r1, r1, r3
 8000d56:	bf18      	it	ne
 8000d58:	2101      	movne	r1, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000d5a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d5c:	4b48      	ldr	r3, [pc, #288]	; (8000e80 <HAL_ADC_Start_DMA+0x1cc>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d64:	6563      	str	r3, [r4, #84]	; 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d66:	b105      	cbz	r5, 8000d6a <HAL_ADC_Start_DMA+0xb6>
 8000d68:	b119      	cbz	r1, 8000d72 <HAL_ADC_Start_DMA+0xbe>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000d70:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000d72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d74:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8000d78:	d02e      	beq.n	8000dd8 <HAL_ADC_Start_DMA+0x124>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000d7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d7c:	f023 0306 	bic.w	r3, r3, #6
 8000d80:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d82:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d84:	463b      	mov	r3, r7
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d86:	483f      	ldr	r0, [pc, #252]	; (8000e84 <HAL_ADC_Start_DMA+0x1d0>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d88:	4632      	mov	r2, r6
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d8a:	4f3f      	ldr	r7, [pc, #252]	; (8000e88 <HAL_ADC_Start_DMA+0x1d4>)
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d8c:	251c      	movs	r5, #28
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d8e:	63c8      	str	r0, [r1, #60]	; 0x3c
        __HAL_UNLOCK(hadc);
 8000d90:	2100      	movs	r1, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d92:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d94:	4e3d      	ldr	r6, [pc, #244]	; (8000e8c <HAL_ADC_Start_DMA+0x1d8>)
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d96:	6407      	str	r7, [r0, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d98:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000d9a:	64c6      	str	r6, [r0, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d9c:	6820      	ldr	r0, [r4, #0]
 8000d9e:	6005      	str	r5, [r0, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000da0:	6820      	ldr	r0, [r4, #0]
        __HAL_UNLOCK(hadc);
 8000da2:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000da6:	6841      	ldr	r1, [r0, #4]
 8000da8:	f041 0110 	orr.w	r1, r1, #16
 8000dac:	6041      	str	r1, [r0, #4]
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8000dae:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000db0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000db2:	68c1      	ldr	r1, [r0, #12]
 8000db4:	f021 0103 	bic.w	r1, r1, #3
 8000db8:	4329      	orrs	r1, r5
 8000dba:	60c1      	str	r1, [r0, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000dbc:	6821      	ldr	r1, [r4, #0]
 8000dbe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000dc0:	3140      	adds	r1, #64	; 0x40
 8000dc2:	f002 fc2b 	bl	800361c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000dc6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8000dc8:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <HAL_ADC_Start_DMA+0x1dc>)
 8000dca:	6891      	ldr	r1, [r2, #8]
 8000dcc:	400b      	ands	r3, r1
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6093      	str	r3, [r2, #8]
}
 8000dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          ADC_CLEAR_ERRORCODE(hadc);
 8000dd8:	65a3      	str	r3, [r4, #88]	; 0x58
 8000dda:	e7d2      	b.n	8000d82 <HAL_ADC_Start_DMA+0xce>
  MODIFY_REG(ADCx->CR,
 8000ddc:	688a      	ldr	r2, [r1, #8]
 8000dde:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <HAL_ADC_Start_DMA+0x1dc>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000de8:	f7ff ff2c 	bl	8000c44 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <HAL_ADC_Start_DMA+0x1b0>)
    tickstart = HAL_GetTick();
 8000df0:	4680      	mov	r8, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d022      	beq.n	8000e3c <HAL_ADC_Start_DMA+0x188>
 8000df6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d01e      	beq.n	8000e3c <HAL_ADC_Start_DMA+0x188>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000dfe:	4a1a      	ldr	r2, [pc, #104]	; (8000e68 <HAL_ADC_Start_DMA+0x1b4>)
 8000e00:	6892      	ldr	r2, [r2, #8]
  MODIFY_REG(ADCx->CR,
 8000e02:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8000e90 <HAL_ADC_Start_DMA+0x1dc>
 8000e06:	e00c      	b.n	8000e22 <HAL_ADC_Start_DMA+0x16e>
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	ea02 0209 	and.w	r2, r2, r9
 8000e0e:	f042 0201 	orr.w	r2, r2, #1
 8000e12:	609a      	str	r2, [r3, #8]
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e14:	f7ff ff16 	bl	8000c44 <HAL_GetTick>
 8000e18:	eba0 0008 	sub.w	r0, r0, r8
 8000e1c:	2802      	cmp	r0, #2
 8000e1e:	d881      	bhi.n	8000d24 <HAL_ADC_Start_DMA+0x70>
 8000e20:	6823      	ldr	r3, [r4, #0]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	07d2      	lsls	r2, r2, #31
 8000e26:	d418      	bmi.n	8000e5a <HAL_ADC_Start_DMA+0x1a6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	07d1      	lsls	r1, r2, #31
 8000e2c:	d5ec      	bpl.n	8000e08 <HAL_ADC_Start_DMA+0x154>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e2e:	f7ff ff09 	bl	8000c44 <HAL_GetTick>
 8000e32:	eba0 0008 	sub.w	r0, r0, r8
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d9f2      	bls.n	8000e20 <HAL_ADC_Start_DMA+0x16c>
 8000e3a:	e773      	b.n	8000d24 <HAL_ADC_Start_DMA+0x70>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e3c:	490e      	ldr	r1, [pc, #56]	; (8000e78 <HAL_ADC_Start_DMA+0x1c4>)
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_ADC_Start_DMA+0x1b8>)
 8000e40:	6889      	ldr	r1, [r1, #8]
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000e42:	f011 0f1f 	tst.w	r1, #31
 8000e46:	bf0c      	ite	eq
 8000e48:	2101      	moveq	r1, #1
 8000e4a:	2100      	movne	r1, #0
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	bf18      	it	ne
 8000e50:	f041 0101 	orrne.w	r1, r1, #1
 8000e54:	2900      	cmp	r1, #0
 8000e56:	d1d4      	bne.n	8000e02 <HAL_ADC_Start_DMA+0x14e>
 8000e58:	e77f      	b.n	8000d5a <HAL_ADC_Start_DMA+0xa6>
 8000e5a:	4904      	ldr	r1, [pc, #16]	; (8000e6c <HAL_ADC_Start_DMA+0x1b8>)
 8000e5c:	1a59      	subs	r1, r3, r1
 8000e5e:	bf18      	it	ne
 8000e60:	2101      	movne	r1, #1
 8000e62:	e77a      	b.n	8000d5a <HAL_ADC_Start_DMA+0xa6>
 8000e64:	40022000 	.word	0x40022000
 8000e68:	58026300 	.word	0x58026300
 8000e6c:	40022100 	.word	0x40022100
 8000e70:	58026000 	.word	0x58026000
 8000e74:	8000003f 	.word	0x8000003f
 8000e78:	40022300 	.word	0x40022300
 8000e7c:	0802a188 	.word	0x0802a188
 8000e80:	fffff0fe 	.word	0xfffff0fe
 8000e84:	08001181 	.word	0x08001181
 8000e88:	08000e95 	.word	0x08000e95
 8000e8c:	080011e9 	.word	0x080011e9
 8000e90:	7fffffc0 	.word	0x7fffffc0

08000e94 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000e94:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000e96:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000e98:	f012 fcb0 	bl	80137fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e9c:	bd08      	pop	{r3, pc}
 8000e9e:	bf00      	nop

08000ea0 <HAL_ADC_LevelOutOfWindowCallback>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HAL_ADC_ErrorCallback>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_ADC_IRQHandler>:
{
 8000ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000eaa:	4aa1      	ldr	r2, [pc, #644]	; (8001130 <HAL_ADC_IRQHandler+0x288>)
{
 8000eac:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000eae:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000eb0:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000eb2:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000eb4:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000eb6:	f000 8096 	beq.w	8000fe6 <HAL_ADC_IRQHandler+0x13e>
 8000eba:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	f000 8091 	beq.w	8000fe6 <HAL_ADC_IRQHandler+0x13e>
 8000ec4:	4a9b      	ldr	r2, [pc, #620]	; (8001134 <HAL_ADC_IRQHandler+0x28c>)
 8000ec6:	6897      	ldr	r7, [r2, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000ec8:	4999      	ldr	r1, [pc, #612]	; (8001130 <HAL_ADC_IRQHandler+0x288>)
 8000eca:	4a9b      	ldr	r2, [pc, #620]	; (8001138 <HAL_ADC_IRQHandler+0x290>)
 8000ecc:	f007 071f 	and.w	r7, r7, #31
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf18      	it	ne
 8000ed4:	4293      	cmpne	r3, r2
 8000ed6:	d003      	beq.n	8000ee0 <HAL_ADC_IRQHandler+0x38>
 8000ed8:	4a98      	ldr	r2, [pc, #608]	; (800113c <HAL_ADC_IRQHandler+0x294>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	f040 808b 	bne.w	8000ff6 <HAL_ADC_IRQHandler+0x14e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8000ee0:	6923      	ldr	r3, [r4, #16]
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	d001      	beq.n	8000eea <HAL_ADC_IRQHandler+0x42>
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	d17f      	bne.n	8000fea <HAL_ADC_IRQHandler+0x142>
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000eea:	07a8      	lsls	r0, r5, #30
 8000eec:	d502      	bpl.n	8000ef4 <HAL_ADC_IRQHandler+0x4c>
 8000eee:	07b1      	lsls	r1, r6, #30
 8000ef0:	f100 80aa 	bmi.w	8001048 <HAL_ADC_IRQHandler+0x1a0>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000ef4:	076b      	lsls	r3, r5, #29
 8000ef6:	d56b      	bpl.n	8000fd0 <HAL_ADC_IRQHandler+0x128>
 8000ef8:	0770      	lsls	r0, r6, #29
 8000efa:	d569      	bpl.n	8000fd0 <HAL_ADC_IRQHandler+0x128>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000efc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000efe:	06db      	lsls	r3, r3, #27
 8000f00:	d403      	bmi.n	8000f0a <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f08:	6563      	str	r3, [r4, #84]	; 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000f0a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000f12:	d11c      	bne.n	8000f4e <HAL_ADC_IRQHandler+0xa6>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f14:	4a88      	ldr	r2, [pc, #544]	; (8001138 <HAL_ADC_IRQHandler+0x290>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	f000 80fa 	beq.w	8001110 <HAL_ADC_IRQHandler+0x268>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000f1c:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000f1e:	0490      	lsls	r0, r2, #18
 8000f20:	d415      	bmi.n	8000f4e <HAL_ADC_IRQHandler+0xa6>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	0711      	lsls	r1, r2, #28
 8000f26:	d512      	bpl.n	8000f4e <HAL_ADC_IRQHandler+0xa6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	0752      	lsls	r2, r2, #29
 8000f2c:	f100 811a 	bmi.w	8001164 <HAL_ADC_IRQHandler+0x2bc>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	f022 020c 	bic.w	r2, r2, #12
 8000f36:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f3e:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000f40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f42:	04db      	lsls	r3, r3, #19
 8000f44:	d403      	bmi.n	8000f4e <HAL_ADC_IRQHandler+0xa6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f012 fc52 	bl	80137f8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	220c      	movs	r2, #12
 8000f58:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000f5a:	06a8      	lsls	r0, r5, #26
 8000f5c:	d53e      	bpl.n	8000fdc <HAL_ADC_IRQHandler+0x134>
 8000f5e:	06b1      	lsls	r1, r6, #26
 8000f60:	d53c      	bpl.n	8000fdc <HAL_ADC_IRQHandler+0x134>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f64:	06d8      	lsls	r0, r3, #27
 8000f66:	d403      	bmi.n	8000f70 <HAL_ADC_IRQHandler+0xc8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f6e:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8000f70:	6823      	ldr	r3, [r4, #0]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f72:	4871      	ldr	r0, [pc, #452]	; (8001138 <HAL_ADC_IRQHandler+0x290>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000f74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f76:	4283      	cmp	r3, r0
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f78:	68d9      	ldr	r1, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000f7a:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f7e:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 8000f82:	d06f      	beq.n	8001064 <HAL_ADC_IRQHandler+0x1bc>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000f84:	68d8      	ldr	r0, [r3, #12]
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8000f86:	2a00      	cmp	r2, #0
 8000f88:	d075      	beq.n	8001076 <HAL_ADC_IRQHandler+0x1ce>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8000f8a:	f000 7200 	and.w	r2, r0, #33554432	; 0x2000000
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	f000 80c3 	beq.w	800111a <HAL_ADC_IRQHandler+0x272>
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f94:	4620      	mov	r0, r4
 8000f96:	f001 f9d9 	bl	800234c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000f9a:	6823      	ldr	r3, [r4, #0]
 8000f9c:	2260      	movs	r2, #96	; 0x60
 8000f9e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8000fa0:	0628      	lsls	r0, r5, #24
 8000fa2:	d502      	bpl.n	8000faa <HAL_ADC_IRQHandler+0x102>
 8000fa4:	0631      	lsls	r1, r6, #24
 8000fa6:	f100 809c 	bmi.w	80010e2 <HAL_ADC_IRQHandler+0x23a>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8000faa:	05ea      	lsls	r2, r5, #23
 8000fac:	d502      	bpl.n	8000fb4 <HAL_ADC_IRQHandler+0x10c>
 8000fae:	05f3      	lsls	r3, r6, #23
 8000fb0:	f100 80a2 	bmi.w	80010f8 <HAL_ADC_IRQHandler+0x250>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8000fb4:	05a8      	lsls	r0, r5, #22
 8000fb6:	d502      	bpl.n	8000fbe <HAL_ADC_IRQHandler+0x116>
 8000fb8:	05b1      	lsls	r1, r6, #22
 8000fba:	f100 8086 	bmi.w	80010ca <HAL_ADC_IRQHandler+0x222>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000fbe:	06ea      	lsls	r2, r5, #27
 8000fc0:	d501      	bpl.n	8000fc6 <HAL_ADC_IRQHandler+0x11e>
 8000fc2:	06f3      	lsls	r3, r6, #27
 8000fc4:	d41d      	bmi.n	8001002 <HAL_ADC_IRQHandler+0x15a>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8000fc6:	0568      	lsls	r0, r5, #21
 8000fc8:	d501      	bpl.n	8000fce <HAL_ADC_IRQHandler+0x126>
 8000fca:	0571      	lsls	r1, r6, #21
 8000fcc:	d46c      	bmi.n	80010a8 <HAL_ADC_IRQHandler+0x200>
}
 8000fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000fd0:	0729      	lsls	r1, r5, #28
 8000fd2:	d5c2      	bpl.n	8000f5a <HAL_ADC_IRQHandler+0xb2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000fd4:	0732      	lsls	r2, r6, #28
 8000fd6:	d491      	bmi.n	8000efc <HAL_ADC_IRQHandler+0x54>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000fd8:	06a8      	lsls	r0, r5, #26
 8000fda:	d4c0      	bmi.n	8000f5e <HAL_ADC_IRQHandler+0xb6>
 8000fdc:	066a      	lsls	r2, r5, #25
 8000fde:	d5df      	bpl.n	8000fa0 <HAL_ADC_IRQHandler+0xf8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000fe0:	0673      	lsls	r3, r6, #25
 8000fe2:	d5dd      	bpl.n	8000fa0 <HAL_ADC_IRQHandler+0xf8>
 8000fe4:	e7bd      	b.n	8000f62 <HAL_ADC_IRQHandler+0xba>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000fe6:	4a56      	ldr	r2, [pc, #344]	; (8001140 <HAL_ADC_IRQHandler+0x298>)
 8000fe8:	e76d      	b.n	8000ec6 <HAL_ADC_IRQHandler+0x1e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8000fea:	f640 0199 	movw	r1, #2201	; 0x899
 8000fee:	4855      	ldr	r0, [pc, #340]	; (8001144 <HAL_ADC_IRQHandler+0x29c>)
 8000ff0:	f012 fe24 	bl	8013c3c <assert_failed>
 8000ff4:	e779      	b.n	8000eea <HAL_ADC_IRQHandler+0x42>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000ff6:	f640 0198 	movw	r1, #2200	; 0x898
 8000ffa:	4852      	ldr	r0, [pc, #328]	; (8001144 <HAL_ADC_IRQHandler+0x29c>)
 8000ffc:	f012 fe1e 	bl	8013c3c <assert_failed>
 8001000:	e76e      	b.n	8000ee0 <HAL_ADC_IRQHandler+0x38>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001002:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001004:	b18b      	cbz	r3, 800102a <HAL_ADC_IRQHandler+0x182>
 8001006:	6823      	ldr	r3, [r4, #0]
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001008:	2f00      	cmp	r7, #0
 800100a:	f000 809d 	beq.w	8001148 <HAL_ADC_IRQHandler+0x2a0>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800100e:	4a48      	ldr	r2, [pc, #288]	; (8001130 <HAL_ADC_IRQHandler+0x288>)
 8001010:	4293      	cmp	r3, r2
 8001012:	f000 80b0 	beq.w	8001176 <HAL_ADC_IRQHandler+0x2ce>
 8001016:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800101a:	4293      	cmp	r3, r2
 800101c:	f000 80ab 	beq.w	8001176 <HAL_ADC_IRQHandler+0x2ce>
 8001020:	4a44      	ldr	r2, [pc, #272]	; (8001134 <HAL_ADC_IRQHandler+0x28c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001022:	6892      	ldr	r2, [r2, #8]
 8001024:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8001028:	d00b      	beq.n	8001042 <HAL_ADC_IRQHandler+0x19a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800102a:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 800102c:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800102e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001032:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001034:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 800103c:	f7ff ff32 	bl	8000ea4 <HAL_ADC_ErrorCallback>
 8001040:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001042:	2210      	movs	r2, #16
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e7be      	b.n	8000fc6 <HAL_ADC_IRQHandler+0x11e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001048:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800104a:	06da      	lsls	r2, r3, #27
 800104c:	d403      	bmi.n	8001056 <HAL_ADC_IRQHandler+0x1ae>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800104e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001050:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001054:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001056:	4620      	mov	r0, r4
 8001058:	f001 f980 	bl	800235c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800105c:	6823      	ldr	r3, [r4, #0]
 800105e:	2202      	movs	r2, #2
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	e747      	b.n	8000ef4 <HAL_ADC_IRQHandler+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001064:	1fb8      	subs	r0, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001066:	2801      	cmp	r0, #1
 8001068:	d98c      	bls.n	8000f84 <HAL_ADC_IRQHandler+0xdc>
 800106a:	2f00      	cmp	r7, #0
 800106c:	d08a      	beq.n	8000f84 <HAL_ADC_IRQHandler+0xdc>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800106e:	4830      	ldr	r0, [pc, #192]	; (8001130 <HAL_ADC_IRQHandler+0x288>)
 8001070:	68c0      	ldr	r0, [r0, #12]
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001072:	2a00      	cmp	r2, #0
 8001074:	d189      	bne.n	8000f8a <HAL_ADC_IRQHandler+0xe2>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	0652      	lsls	r2, r2, #25
 800107a:	d58b      	bpl.n	8000f94 <HAL_ADC_IRQHandler+0xec>
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800107c:	0281      	lsls	r1, r0, #10
 800107e:	d489      	bmi.n	8000f94 <HAL_ADC_IRQHandler+0xec>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	0712      	lsls	r2, r2, #28
 8001084:	d465      	bmi.n	8001152 <HAL_ADC_IRQHandler+0x2aa>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800108c:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800108e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001094:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001096:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001098:	05db      	lsls	r3, r3, #23
 800109a:	f53f af7b 	bmi.w	8000f94 <HAL_ADC_IRQHandler+0xec>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800109e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6563      	str	r3, [r4, #84]	; 0x54
 80010a6:	e775      	b.n	8000f94 <HAL_ADC_IRQHandler+0xec>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80010a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80010aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ae:	6822      	ldr	r2, [r4, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80010b0:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b6:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80010b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80010c0:	6011      	str	r1, [r2, #0]
}
 80010c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80010c6:	f001 b943 	b.w	8002350 <HAL_ADCEx_InjectedQueueOverflowCallback>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80010ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80010cc:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80010ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d2:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80010d4:	f001 f940 	bl	8002358 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80010d8:	6823      	ldr	r3, [r4, #0]
 80010da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	e76d      	b.n	8000fbe <HAL_ADC_IRQHandler+0x116>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010e4:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ea:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010ec:	f7ff fed8 	bl	8000ea0 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e758      	b.n	8000faa <HAL_ADC_IRQHandler+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80010f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80010fa:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001102:	f001 f927 	bl	8002354 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	e751      	b.n	8000fb4 <HAL_ADC_IRQHandler+0x10c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001110:	2f09      	cmp	r7, #9
 8001112:	d906      	bls.n	8001122 <HAL_ADC_IRQHandler+0x27a>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_ADC_IRQHandler+0x288>)
 8001116:	68d2      	ldr	r2, [r2, #12]
 8001118:	e701      	b.n	8000f1e <HAL_ADC_IRQHandler+0x76>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 800111a:	0481      	lsls	r1, r0, #18
 800111c:	f53f af3a 	bmi.w	8000f94 <HAL_ADC_IRQHandler+0xec>
 8001120:	e7a9      	b.n	8001076 <HAL_ADC_IRQHandler+0x1ce>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001122:	f240 2221 	movw	r2, #545	; 0x221
 8001126:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001128:	07d2      	lsls	r2, r2, #31
 800112a:	f53f aef7 	bmi.w	8000f1c <HAL_ADC_IRQHandler+0x74>
 800112e:	e7f1      	b.n	8001114 <HAL_ADC_IRQHandler+0x26c>
 8001130:	40022000 	.word	0x40022000
 8001134:	58026300 	.word	0x58026300
 8001138:	40022100 	.word	0x40022100
 800113c:	58026000 	.word	0x58026000
 8001140:	40022300 	.word	0x40022300
 8001144:	0802a188 	.word	0x0802a188
      if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	0797      	lsls	r7, r2, #30
 800114c:	f43f af79 	beq.w	8001042 <HAL_ADC_IRQHandler+0x19a>
 8001150:	e76b      	b.n	800102a <HAL_ADC_IRQHandler+0x182>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001152:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800115a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	65a3      	str	r3, [r4, #88]	; 0x58
 8001162:	e717      	b.n	8000f94 <HAL_ADC_IRQHandler+0xec>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001164:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	65a3      	str	r3, [r4, #88]	; 0x58
 8001174:	e6eb      	b.n	8000f4e <HAL_ADC_IRQHandler+0xa6>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001176:	4a01      	ldr	r2, [pc, #4]	; (800117c <HAL_ADC_IRQHandler+0x2d4>)
 8001178:	e753      	b.n	8001022 <HAL_ADC_IRQHandler+0x17a>
 800117a:	bf00      	nop
 800117c:	40022300 	.word	0x40022300

08001180 <ADC_DMAConvCplt>:
{
 8001180:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001182:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001186:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800118a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800118c:	d11d      	bne.n	80011ca <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800118e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001194:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001196:	680a      	ldr	r2, [r1, #0]
 8001198:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800119c:	68ca      	ldr	r2, [r1, #12]
 800119e:	d01b      	beq.n	80011d8 <ADC_DMAConvCplt+0x58>
 80011a0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80011a4:	d10d      	bne.n	80011c2 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80011a6:	68ca      	ldr	r2, [r1, #12]
 80011a8:	0494      	lsls	r4, r2, #18
 80011aa:	d40a      	bmi.n	80011c2 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011b2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80011b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011b6:	04d1      	lsls	r1, r2, #19
 80011b8:	d403      	bmi.n	80011c2 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011bc:	f042 0201 	orr.w	r2, r2, #1
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80011c2:	4618      	mov	r0, r3
 80011c4:	f012 fb18 	bl	80137f8 <HAL_ADC_ConvCpltCallback>
}
 80011c8:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80011ca:	06d2      	lsls	r2, r2, #27
 80011cc:	d407      	bmi.n	80011de <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80011ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80011d8:	0790      	lsls	r0, r2, #30
 80011da:	d1f2      	bne.n	80011c2 <ADC_DMAConvCplt+0x42>
 80011dc:	e7e6      	b.n	80011ac <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ErrorCallback(hadc);
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fe60 	bl	8000ea4 <HAL_ADC_ErrorCallback>
}
 80011e4:	bd10      	pop	{r4, pc}
 80011e6:	bf00      	nop

080011e8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80011e8:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011ea:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80011ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80011ee:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80011f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011f4:	655a      	str	r2, [r3, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80011f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011f8:	f042 0204 	orr.w	r2, r2, #4
 80011fc:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc);
 80011fe:	f7ff fe51 	bl	8000ea4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001202:	bd08      	pop	{r3, pc}

08001204 <HAL_ADC_ConfigChannel>:
{
 8001204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001206:	4605      	mov	r5, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001208:	4ab3      	ldr	r2, [pc, #716]	; (80014d8 <HAL_ADC_ConfigChannel+0x2d4>)
 800120a:	48b4      	ldr	r0, [pc, #720]	; (80014dc <HAL_ADC_ConfigChannel+0x2d8>)
{
 800120c:	b083      	sub	sp, #12
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800120e:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t wait_loop_index = 0;
 8001210:	2600      	movs	r6, #0
{
 8001212:	460c      	mov	r4, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001214:	4283      	cmp	r3, r0
 8001216:	bf18      	it	ne
 8001218:	4293      	cmpne	r3, r2
  __IO uint32_t wait_loop_index = 0;
 800121a:	9601      	str	r6, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800121c:	d003      	beq.n	8001226 <HAL_ADC_ConfigChannel+0x22>
 800121e:	4ab0      	ldr	r2, [pc, #704]	; (80014e0 <HAL_ADC_ConfigChannel+0x2dc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	f040 8153 	bne.w	80014cc <HAL_ADC_ConfigChannel+0x2c8>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001226:	6862      	ldr	r2, [r4, #4]
 8001228:	f422 7340 	bic.w	r3, r2, #768	; 0x300
 800122c:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8001230:	1f98      	subs	r0, r3, #6
 8001232:	bf18      	it	ne
 8001234:	2001      	movne	r0, #1
 8001236:	2918      	cmp	r1, #24
 8001238:	f240 8119 	bls.w	800146e <HAL_ADC_ConfigChannel+0x26a>
 800123c:	2301      	movs	r3, #1
 800123e:	f422 7600 	bic.w	r6, r2, #512	; 0x200
 8001242:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8001246:	f5b6 7680 	subs.w	r6, r6, #256	; 0x100
 800124a:	bf18      	it	ne
 800124c:	2601      	movne	r6, #1
 800124e:	2918      	cmp	r1, #24
 8001250:	f240 8107 	bls.w	8001462 <HAL_ADC_ConfigChannel+0x25e>
 8001254:	2201      	movs	r2, #1
 8001256:	4003      	ands	r3, r0
 8001258:	421e      	tst	r6, r3
 800125a:	d002      	beq.n	8001262 <HAL_ADC_ConfigChannel+0x5e>
 800125c:	2a00      	cmp	r2, #0
 800125e:	f040 8404 	bne.w	8001a6a <HAL_ADC_ConfigChannel+0x866>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001262:	68a3      	ldr	r3, [r4, #8]
 8001264:	2b07      	cmp	r3, #7
 8001266:	f200 8256 	bhi.w	8001716 <HAL_ADC_ConfigChannel+0x512>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 800126a:	68e3      	ldr	r3, [r4, #12]
 800126c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001270:	4293      	cmp	r3, r2
 8001272:	d003      	beq.n	800127c <HAL_ADC_ConfigChannel+0x78>
 8001274:	4a9b      	ldr	r2, [pc, #620]	; (80014e4 <HAL_ADC_ConfigChannel+0x2e0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	f040 8111 	bne.w	800149e <HAL_ADC_ConfigChannel+0x29a>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 800127c:	6923      	ldr	r3, [r4, #16]
 800127e:	2b04      	cmp	r3, #4
 8001280:	f200 8116 	bhi.w	80014b0 <HAL_ADC_ConfigChannel+0x2ac>
  if (hadc->Init.OversamplingMode == ENABLE)
 8001284:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8001288:	6961      	ldr	r1, [r4, #20]
 800128a:	2b01      	cmp	r3, #1
 800128c:	682a      	ldr	r2, [r5, #0]
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
 800128e:	4b96      	ldr	r3, [pc, #600]	; (80014e8 <HAL_ADC_ConfigChannel+0x2e4>)
 8001290:	f000 8223 	beq.w	80016da <HAL_ADC_ConfigChannel+0x4d6>
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800129a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800129e:	f040 810d 	bne.w	80014bc <HAL_ADC_ConfigChannel+0x2b8>
      return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 80012a2:	68d2      	ldr	r2, [r2, #12]
 80012a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a8:	0852      	lsrs	r2, r2, #1
 80012aa:	f002 020e 	and.w	r2, r2, #14
 80012ae:	40d3      	lsrs	r3, r2
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 80012b0:	4299      	cmp	r1, r3
 80012b2:	f200 813f 	bhi.w	8001534 <HAL_ADC_ConfigChannel+0x330>
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80012b6:	4b8b      	ldr	r3, [pc, #556]	; (80014e4 <HAL_ADC_ConfigChannel+0x2e0>)
 80012b8:	68e2      	ldr	r2, [r4, #12]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	f000 8152 	beq.w	8001564 <HAL_ADC_ConfigChannel+0x360>
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80012c0:	6821      	ldr	r1, [r4, #0]
 80012c2:	4b8a      	ldr	r3, [pc, #552]	; (80014ec <HAL_ADC_ConfigChannel+0x2e8>)
 80012c4:	4e8a      	ldr	r6, [pc, #552]	; (80014f0 <HAL_ADC_ConfigChannel+0x2ec>)
 80012c6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80012ca:	2901      	cmp	r1, #1
 80012cc:	bf18      	it	ne
 80012ce:	4299      	cmpne	r1, r3
 80012d0:	4888      	ldr	r0, [pc, #544]	; (80014f4 <HAL_ADC_ConfigChannel+0x2f0>)
 80012d2:	bf14      	ite	ne
 80012d4:	2301      	movne	r3, #1
 80012d6:	2300      	moveq	r3, #0
 80012d8:	42b1      	cmp	r1, r6
 80012da:	bf0c      	ite	eq
 80012dc:	2300      	moveq	r3, #0
 80012de:	f003 0301 	andne.w	r3, r3, #1
 80012e2:	4e85      	ldr	r6, [pc, #532]	; (80014f8 <HAL_ADC_ConfigChannel+0x2f4>)
 80012e4:	4281      	cmp	r1, r0
 80012e6:	bf0c      	ite	eq
 80012e8:	2300      	moveq	r3, #0
 80012ea:	f003 0301 	andne.w	r3, r3, #1
 80012ee:	f100 6006 	add.w	r0, r0, #140509184	; 0x8600000
 80012f2:	42b1      	cmp	r1, r6
 80012f4:	bf0c      	ite	eq
 80012f6:	2300      	moveq	r3, #0
 80012f8:	f003 0301 	andne.w	r3, r3, #1
 80012fc:	3018      	adds	r0, #24
 80012fe:	4e7f      	ldr	r6, [pc, #508]	; (80014fc <HAL_ADC_ConfigChannel+0x2f8>)
 8001300:	4281      	cmp	r1, r0
 8001302:	bf0c      	ite	eq
 8001304:	2300      	moveq	r3, #0
 8001306:	f003 0301 	andne.w	r3, r3, #1
 800130a:	f100 6006 	add.w	r0, r0, #140509184	; 0x8600000
 800130e:	42b1      	cmp	r1, r6
 8001310:	bf0c      	ite	eq
 8001312:	2300      	moveq	r3, #0
 8001314:	f003 0301 	andne.w	r3, r3, #1
 8001318:	3060      	adds	r0, #96	; 0x60
 800131a:	4e79      	ldr	r6, [pc, #484]	; (8001500 <HAL_ADC_ConfigChannel+0x2fc>)
 800131c:	4281      	cmp	r1, r0
 800131e:	bf0c      	ite	eq
 8001320:	2300      	moveq	r3, #0
 8001322:	f003 0301 	andne.w	r3, r3, #1
 8001326:	f100 6006 	add.w	r0, r0, #140509184	; 0x8600000
 800132a:	42b1      	cmp	r1, r6
 800132c:	bf0c      	ite	eq
 800132e:	2300      	moveq	r3, #0
 8001330:	f003 0301 	andne.w	r3, r3, #1
 8001334:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8001338:	4e72      	ldr	r6, [pc, #456]	; (8001504 <HAL_ADC_ConfigChannel+0x300>)
 800133a:	4281      	cmp	r1, r0
 800133c:	bf0c      	ite	eq
 800133e:	2300      	moveq	r3, #0
 8001340:	f003 0301 	andne.w	r3, r3, #1
 8001344:	f100 6008 	add.w	r0, r0, #142606336	; 0x8800000
 8001348:	42b1      	cmp	r1, r6
 800134a:	bf0c      	ite	eq
 800134c:	2300      	moveq	r3, #0
 800134e:	f003 0301 	andne.w	r3, r3, #1
 8001352:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
 8001356:	f106 6606 	add.w	r6, r6, #140509184	; 0x8600000
 800135a:	4281      	cmp	r1, r0
 800135c:	bf0c      	ite	eq
 800135e:	2300      	moveq	r3, #0
 8001360:	f003 0301 	andne.w	r3, r3, #1
 8001364:	4868      	ldr	r0, [pc, #416]	; (8001508 <HAL_ADC_ConfigChannel+0x304>)
 8001366:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800136a:	42b1      	cmp	r1, r6
 800136c:	bf0c      	ite	eq
 800136e:	2300      	moveq	r3, #0
 8001370:	f003 0301 	andne.w	r3, r3, #1
 8001374:	4e65      	ldr	r6, [pc, #404]	; (800150c <HAL_ADC_ConfigChannel+0x308>)
 8001376:	4281      	cmp	r1, r0
 8001378:	bf0c      	ite	eq
 800137a:	2300      	moveq	r3, #0
 800137c:	f003 0301 	andne.w	r3, r3, #1
 8001380:	4863      	ldr	r0, [pc, #396]	; (8001510 <HAL_ADC_ConfigChannel+0x30c>)
 8001382:	42b1      	cmp	r1, r6
 8001384:	bf0c      	ite	eq
 8001386:	2300      	moveq	r3, #0
 8001388:	f003 0301 	andne.w	r3, r3, #1
 800138c:	4e61      	ldr	r6, [pc, #388]	; (8001514 <HAL_ADC_ConfigChannel+0x310>)
 800138e:	4281      	cmp	r1, r0
 8001390:	bf0c      	ite	eq
 8001392:	2300      	moveq	r3, #0
 8001394:	f003 0301 	andne.w	r3, r3, #1
 8001398:	485f      	ldr	r0, [pc, #380]	; (8001518 <HAL_ADC_ConfigChannel+0x314>)
 800139a:	4960      	ldr	r1, [pc, #384]	; (800151c <HAL_ADC_ConfigChannel+0x318>)
 800139c:	42b2      	cmp	r2, r6
 800139e:	bf0c      	ite	eq
 80013a0:	2300      	moveq	r3, #0
 80013a2:	f003 0301 	andne.w	r3, r3, #1
 80013a6:	4282      	cmp	r2, r0
 80013a8:	bf0c      	ite	eq
 80013aa:	2300      	moveq	r3, #0
 80013ac:	f003 0301 	andne.w	r3, r3, #1
 80013b0:	428a      	cmp	r2, r1
 80013b2:	bf0c      	ite	eq
 80013b4:	2300      	moveq	r3, #0
 80013b6:	f003 0301 	andne.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d166      	bne.n	800148c <HAL_ADC_ConfigChannel+0x288>
  __HAL_LOCK(hadc);
 80013be:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	f000 82a2 	beq.w	800190c <HAL_ADC_ConfigChannel+0x708>
 80013c8:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013ca:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(hadc);
 80013cc:	f885 0050 	strb.w	r0, [r5, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013d0:	6893      	ldr	r3, [r2, #8]
 80013d2:	075b      	lsls	r3, r3, #29
 80013d4:	d451      	bmi.n	800147a <HAL_ADC_ConfigChannel+0x276>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80013dc:	2900      	cmp	r1, #0
 80013de:	f040 81a2 	bne.w	8001726 <HAL_ADC_ConfigChannel+0x522>
 80013e2:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80013e6:	4098      	lsls	r0, r3
 80013e8:	69d3      	ldr	r3, [r2, #28]
  MODIFY_REG(*preg,
 80013ea:	271f      	movs	r7, #31
 80013ec:	4318      	orrs	r0, r3
 80013ee:	61d0      	str	r0, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80013f0:	6862      	ldr	r2, [r4, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013f2:	6829      	ldr	r1, [r5, #0]
 80013f4:	0990      	lsrs	r0, r2, #6
  MODIFY_REG(*preg,
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	403a      	ands	r2, r7
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013fa:	3130      	adds	r1, #48	; 0x30
 80013fc:	f000 000c 	and.w	r0, r0, #12
  MODIFY_REG(*preg,
 8001400:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001404:	4097      	lsls	r7, r2
 8001406:	5846      	ldr	r6, [r0, r1]
 8001408:	4093      	lsls	r3, r2
 800140a:	ea26 0207 	bic.w	r2, r6, r7
 800140e:	4313      	orrs	r3, r2
 8001410:	5043      	str	r3, [r0, r1]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001412:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	0757      	lsls	r7, r2, #29
 8001418:	f100 8183 	bmi.w	8001722 <HAL_ADC_ConfigChannel+0x51e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800141c:	689e      	ldr	r6, [r3, #8]
 800141e:	f016 0608 	ands.w	r6, r6, #8
 8001422:	f000 80f1 	beq.w	8001608 <HAL_ADC_ConfigChannel+0x404>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	07d6      	lsls	r6, r2, #31
 800142a:	d418      	bmi.n	800145e <HAL_ADC_ConfigChannel+0x25a>
  MODIFY_REG(ADCx->DIFSEL,
 800142c:	68e1      	ldr	r1, [r4, #12]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800142e:	6826      	ldr	r6, [r4, #0]
 8001430:	f001 0018 	and.w	r0, r1, #24
 8001434:	4a3a      	ldr	r2, [pc, #232]	; (8001520 <HAL_ADC_ConfigChannel+0x31c>)
 8001436:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800143a:	40c2      	lsrs	r2, r0
 800143c:	f3c6 0013 	ubfx	r0, r6, #0, #20
 8001440:	4032      	ands	r2, r6
 8001442:	ea21 0100 	bic.w	r1, r1, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001446:	4827      	ldr	r0, [pc, #156]	; (80014e4 <HAL_ADC_ConfigChannel+0x2e0>)
 8001448:	430a      	orrs	r2, r1
 800144a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800144e:	68e3      	ldr	r3, [r4, #12]
 8001450:	4283      	cmp	r3, r0
 8001452:	f000 821c 	beq.w	800188e <HAL_ADC_ConfigChannel+0x68a>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001456:	6822      	ldr	r2, [r4, #0]
 8001458:	2a00      	cmp	r2, #0
 800145a:	f2c0 81b6 	blt.w	80017ca <HAL_ADC_ConfigChannel+0x5c6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800145e:	2000      	movs	r0, #0
 8001460:	e00f      	b.n	8001482 <HAL_ADC_ConfigChannel+0x27e>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001462:	4a30      	ldr	r2, [pc, #192]	; (8001524 <HAL_ADC_ConfigChannel+0x320>)
 8001464:	40ca      	lsrs	r2, r1
 8001466:	43d2      	mvns	r2, r2
 8001468:	f002 0201 	and.w	r2, r2, #1
 800146c:	e6f3      	b.n	8001256 <HAL_ADC_ConfigChannel+0x52>
 800146e:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <HAL_ADC_ConfigChannel+0x324>)
 8001470:	40cb      	lsrs	r3, r1
 8001472:	43db      	mvns	r3, r3
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	e6e1      	b.n	800123e <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800147a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800147c:	f043 0320 	orr.w	r3, r3, #32
 8001480:	656b      	str	r3, [r5, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8001482:	2300      	movs	r3, #0
 8001484:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8001488:	b003      	add	sp, #12
 800148a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_ADC_ConfigChannel+0x328>)
 800148e:	429a      	cmp	r2, r3
 8001490:	d095      	beq.n	80013be <HAL_ADC_ConfigChannel+0x1ba>
 8001492:	f640 2174 	movw	r1, #2676	; 0xa74
 8001496:	4826      	ldr	r0, [pc, #152]	; (8001530 <HAL_ADC_ConfigChannel+0x32c>)
 8001498:	f012 fbd0 	bl	8013c3c <assert_failed>
 800149c:	e78f      	b.n	80013be <HAL_ADC_ConfigChannel+0x1ba>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 800149e:	f640 2161 	movw	r1, #2657	; 0xa61
 80014a2:	4823      	ldr	r0, [pc, #140]	; (8001530 <HAL_ADC_ConfigChannel+0x32c>)
 80014a4:	f012 fbca 	bl	8013c3c <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 80014a8:	6923      	ldr	r3, [r4, #16]
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	f67f aeea 	bls.w	8001284 <HAL_ADC_ConfigChannel+0x80>
 80014b0:	f640 2162 	movw	r1, #2658	; 0xa62
 80014b4:	481e      	ldr	r0, [pc, #120]	; (8001530 <HAL_ADC_ConfigChannel+0x32c>)
 80014b6:	f012 fbc1 	bl	8013c3c <assert_failed>
 80014ba:	e6e3      	b.n	8001284 <HAL_ADC_ConfigChannel+0x80>
    if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
 80014bc:	68d3      	ldr	r3, [r2, #12]
 80014be:	f003 031c 	and.w	r3, r3, #28
 80014c2:	2b1c      	cmp	r3, #28
 80014c4:	f47f aeed 	bne.w	80012a2 <HAL_ADC_ConfigChannel+0x9e>
 80014c8:	23ff      	movs	r3, #255	; 0xff
 80014ca:	e6f1      	b.n	80012b0 <HAL_ADC_ConfigChannel+0xac>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80014cc:	f640 215e 	movw	r1, #2654	; 0xa5e
 80014d0:	4817      	ldr	r0, [pc, #92]	; (8001530 <HAL_ADC_ConfigChannel+0x32c>)
 80014d2:	f012 fbb3 	bl	8013c3c <assert_failed>
 80014d6:	e6a6      	b.n	8001226 <HAL_ADC_ConfigChannel+0x22>
 80014d8:	40022100 	.word	0x40022100
 80014dc:	40022000 	.word	0x40022000
 80014e0:	58026000 	.word	0x58026000
 80014e4:	47ff0000 	.word	0x47ff0000
 80014e8:	5c001000 	.word	0x5c001000
 80014ec:	04300002 	.word	0x04300002
 80014f0:	08600004 	.word	0x08600004
 80014f4:	0c900008 	.word	0x0c900008
 80014f8:	10c00010 	.word	0x10c00010
 80014fc:	19200040 	.word	0x19200040
 8001500:	21800100 	.word	0x21800100
 8001504:	2a000400 	.word	0x2a000400
 8001508:	36902000 	.word	0x36902000
 800150c:	3ac04000 	.word	0x3ac04000
 8001510:	3ef08000 	.word	0x3ef08000
 8001514:	43210000 	.word	0x43210000
 8001518:	47520000 	.word	0x47520000
 800151c:	4b840000 	.word	0x4b840000
 8001520:	000fffff 	.word	0x000fffff
 8001524:	01041001 	.word	0x01041001
 8001528:	01041000 	.word	0x01041000
 800152c:	4fb80000 	.word	0x4fb80000
 8001530:	0802a188 	.word	0x0802a188
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8001534:	f640 216a 	movw	r1, #2666	; 0xa6a
 8001538:	48bd      	ldr	r0, [pc, #756]	; (8001830 <HAL_ADC_ConfigChannel+0x62c>)
 800153a:	f012 fb7f 	bl	8013c3c <assert_failed>
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 800153e:	6923      	ldr	r3, [r4, #16]
 8001540:	2b04      	cmp	r3, #4
 8001542:	f43f aeb8 	beq.w	80012b6 <HAL_ADC_ConfigChannel+0xb2>
 8001546:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 800154a:	2b01      	cmp	r3, #1
 800154c:	f47f aeb3 	bne.w	80012b6 <HAL_ADC_ConfigChannel+0xb2>
 8001550:	f640 216f 	movw	r1, #2671	; 0xa6f
 8001554:	48b6      	ldr	r0, [pc, #728]	; (8001830 <HAL_ADC_ConfigChannel+0x62c>)
 8001556:	f012 fb71 	bl	8013c3c <assert_failed>
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800155a:	4bb6      	ldr	r3, [pc, #728]	; (8001834 <HAL_ADC_ConfigChannel+0x630>)
 800155c:	68e2      	ldr	r2, [r4, #12]
 800155e:	429a      	cmp	r2, r3
 8001560:	f47f aeae 	bne.w	80012c0 <HAL_ADC_ConfigChannel+0xbc>
    if (hadc->Instance == ADC1)
 8001564:	682b      	ldr	r3, [r5, #0]
 8001566:	4ab4      	ldr	r2, [pc, #720]	; (8001838 <HAL_ADC_ConfigChannel+0x634>)
 8001568:	4293      	cmp	r3, r2
 800156a:	f000 81d8 	beq.w	800191e <HAL_ADC_ConfigChannel+0x71a>
    if (hadc->Instance == ADC2)
 800156e:	4ab3      	ldr	r2, [pc, #716]	; (800183c <HAL_ADC_ConfigChannel+0x638>)
 8001570:	4293      	cmp	r3, r2
 8001572:	f000 80e7 	beq.w	8001744 <HAL_ADC_ConfigChannel+0x540>
    if (hadc->Instance == ADC3)
 8001576:	4ab2      	ldr	r2, [pc, #712]	; (8001840 <HAL_ADC_ConfigChannel+0x63c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	f47f af20 	bne.w	80013be <HAL_ADC_ConfigChannel+0x1ba>
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
 800157e:	6822      	ldr	r2, [r4, #0]
 8001580:	4bb0      	ldr	r3, [pc, #704]	; (8001844 <HAL_ADC_ConfigChannel+0x640>)
 8001582:	48b1      	ldr	r0, [pc, #708]	; (8001848 <HAL_ADC_ConfigChannel+0x644>)
 8001584:	49b1      	ldr	r1, [pc, #708]	; (800184c <HAL_ADC_ConfigChannel+0x648>)
 8001586:	429a      	cmp	r2, r3
 8001588:	bf18      	it	ne
 800158a:	4282      	cmpne	r2, r0
 800158c:	48b0      	ldr	r0, [pc, #704]	; (8001850 <HAL_ADC_ConfigChannel+0x64c>)
 800158e:	bf14      	ite	ne
 8001590:	2301      	movne	r3, #1
 8001592:	2300      	moveq	r3, #0
 8001594:	428a      	cmp	r2, r1
 8001596:	bf0c      	ite	eq
 8001598:	2300      	moveq	r3, #0
 800159a:	f003 0301 	andne.w	r3, r3, #1
 800159e:	f101 6106 	add.w	r1, r1, #140509184	; 0x8600000
 80015a2:	4282      	cmp	r2, r0
 80015a4:	bf0c      	ite	eq
 80015a6:	2300      	moveq	r3, #0
 80015a8:	f003 0301 	andne.w	r3, r3, #1
 80015ac:	3118      	adds	r1, #24
 80015ae:	48a9      	ldr	r0, [pc, #676]	; (8001854 <HAL_ADC_ConfigChannel+0x650>)
 80015b0:	428a      	cmp	r2, r1
 80015b2:	bf0c      	ite	eq
 80015b4:	2300      	moveq	r3, #0
 80015b6:	f003 0301 	andne.w	r3, r3, #1
 80015ba:	f101 51ca 	add.w	r1, r1, #423624704	; 0x19400000
 80015be:	4282      	cmp	r2, r0
 80015c0:	bf0c      	ite	eq
 80015c2:	2300      	moveq	r3, #0
 80015c4:	f003 0301 	andne.w	r3, r3, #1
 80015c8:	f501 61fc 	add.w	r1, r1, #2016	; 0x7e0
 80015cc:	48a2      	ldr	r0, [pc, #648]	; (8001858 <HAL_ADC_ConfigChannel+0x654>)
 80015ce:	428a      	cmp	r2, r1
 80015d0:	bf0c      	ite	eq
 80015d2:	2300      	moveq	r3, #0
 80015d4:	f003 0301 	andne.w	r3, r3, #1
 80015d8:	49a0      	ldr	r1, [pc, #640]	; (800185c <HAL_ADC_ConfigChannel+0x658>)
 80015da:	4282      	cmp	r2, r0
 80015dc:	bf0c      	ite	eq
 80015de:	2300      	moveq	r3, #0
 80015e0:	f003 0301 	andne.w	r3, r3, #1
 80015e4:	428a      	cmp	r2, r1
 80015e6:	bf0c      	ite	eq
 80015e8:	2300      	moveq	r3, #0
 80015ea:	f003 0301 	andne.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f43f aee5 	beq.w	80013be <HAL_ADC_ConfigChannel+0x1ba>
 80015f4:	4b9a      	ldr	r3, [pc, #616]	; (8001860 <HAL_ADC_ConfigChannel+0x65c>)
 80015f6:	429a      	cmp	r2, r3
 80015f8:	f43f aee1 	beq.w	80013be <HAL_ADC_ConfigChannel+0x1ba>
 80015fc:	f640 2184 	movw	r1, #2692	; 0xa84
 8001600:	488b      	ldr	r0, [pc, #556]	; (8001830 <HAL_ADC_ConfigChannel+0x62c>)
 8001602:	f012 fb1b 	bl	8013c3c <assert_failed>
 8001606:	e6da      	b.n	80013be <HAL_ADC_ConfigChannel+0x1ba>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001608:	6821      	ldr	r1, [r4, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800160a:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 800160c:	2207      	movs	r2, #7
 800160e:	68a7      	ldr	r7, [r4, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001610:	0dc8      	lsrs	r0, r1, #23
  MODIFY_REG(*preg,
 8001612:	f3c1 5104 	ubfx	r1, r1, #20, #5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001616:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 800161a:	fa02 fc01 	lsl.w	ip, r2, r1
 800161e:	fa07 f101 	lsl.w	r1, r7, r1
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001622:	4f90      	ldr	r7, [pc, #576]	; (8001864 <HAL_ADC_ConfigChannel+0x660>)
 8001624:	58c2      	ldr	r2, [r0, r3]
 8001626:	ea22 020c 	bic.w	r2, r2, ip
 800162a:	430a      	orrs	r2, r1
 800162c:	50c2      	str	r2, [r0, r3]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001638:	f000 8120 	beq.w	800187c <HAL_ADC_ConfigChannel+0x678>
 800163c:	682b      	ldr	r3, [r5, #0]
 800163e:	6962      	ldr	r2, [r4, #20]
 8001640:	68d9      	ldr	r1, [r3, #12]
 8001642:	f011 0f10 	tst.w	r1, #16
 8001646:	68d9      	ldr	r1, [r3, #12]
 8001648:	f040 81ce 	bne.w	80019e8 <HAL_ADC_ConfigChannel+0x7e4>
 800164c:	f3c1 0182 	ubfx	r1, r1, #2, #3
 8001650:	0049      	lsls	r1, r1, #1
 8001652:	fa02 f101 	lsl.w	r1, r2, r1
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001656:	6920      	ldr	r0, [r4, #16]
 8001658:	6822      	ldr	r2, [r4, #0]
 800165a:	2804      	cmp	r0, #4
 800165c:	f000 81a8 	beq.w	80019b0 <HAL_ADC_ConfigChannel+0x7ac>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001660:	3360      	adds	r3, #96	; 0x60
  MODIFY_REG(*preg,
 8001662:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001666:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800166a:	430a      	orrs	r2, r1
 800166c:	f007 4100 	and.w	r1, r7, #2147483648	; 0x80000000
 8001670:	430a      	orrs	r2, r1
 8001672:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
 8001676:	7e63      	ldrb	r3, [r4, #25]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d905      	bls.n	8001688 <HAL_ADC_ConfigChannel+0x484>
 800167c:	f640 21b2 	movw	r1, #2738	; 0xab2
 8001680:	486b      	ldr	r0, [pc, #428]	; (8001830 <HAL_ADC_ConfigChannel+0x62c>)
 8001682:	f012 fadb 	bl	8013c3c <assert_failed>
 8001686:	7e63      	ldrb	r3, [r4, #25]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001688:	682a      	ldr	r2, [r5, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	6921      	ldr	r1, [r4, #16]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800168e:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8001692:	bf14      	ite	ne
 8001694:	2000      	movne	r0, #0
 8001696:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800169a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800169e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016a2:	4303      	orrs	r3, r0
 80016a4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
 80016a8:	7e23      	ldrb	r3, [r4, #24]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d905      	bls.n	80016ba <HAL_ADC_ConfigChannel+0x4b6>
 80016ae:	f640 21b6 	movw	r1, #2742	; 0xab6
 80016b2:	485f      	ldr	r0, [pc, #380]	; (8001830 <HAL_ADC_ConfigChannel+0x62c>)
 80016b4:	f012 fac2 	bl	8013c3c <assert_failed>
 80016b8:	7e23      	ldrb	r3, [r4, #24]
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	682a      	ldr	r2, [r5, #0]
 80016be:	6921      	ldr	r1, [r4, #16]
 80016c0:	d104      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x4c8>
 80016c2:	f001 011f 	and.w	r1, r1, #31
 80016c6:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80016ca:	408e      	lsls	r6, r1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80016cc:	6913      	ldr	r3, [r2, #16]
 80016ce:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80016d2:	431e      	orrs	r6, r3
 80016d4:	6116      	str	r6, [r2, #16]
 80016d6:	682b      	ldr	r3, [r5, #0]
 80016d8:	e6a5      	b.n	8001426 <HAL_ADC_ConfigChannel+0x222>
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
 80016da:	681b      	ldr	r3, [r3, #0]
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset/(hadc->Init.Oversampling.Ratio+1U)));
 80016dc:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80016de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e2:	3001      	adds	r0, #1
 80016e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016e8:	fbb1 f1f0 	udiv	r1, r1, r0
 80016ec:	d123      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x532>
      return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 80016ee:	68d2      	ldr	r2, [r2, #12]
 80016f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f4:	0852      	lsrs	r2, r2, #1
 80016f6:	f002 020e 	and.w	r2, r2, #14
 80016fa:	40d3      	lsrs	r3, r2
 80016fc:	4299      	cmp	r1, r3
 80016fe:	f200 8108 	bhi.w	8001912 <HAL_ADC_ConfigChannel+0x70e>
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 8001702:	6923      	ldr	r3, [r4, #16]
 8001704:	2b04      	cmp	r3, #4
 8001706:	f43f add6 	beq.w	80012b6 <HAL_ADC_ConfigChannel+0xb2>
 800170a:	f640 216f 	movw	r1, #2671	; 0xa6f
 800170e:	4848      	ldr	r0, [pc, #288]	; (8001830 <HAL_ADC_ConfigChannel+0x62c>)
 8001710:	f012 fa94 	bl	8013c3c <assert_failed>
 8001714:	e721      	b.n	800155a <HAL_ADC_ConfigChannel+0x356>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001716:	f44f 6126 	mov.w	r1, #2656	; 0xa60
 800171a:	4845      	ldr	r0, [pc, #276]	; (8001830 <HAL_ADC_ConfigChannel+0x62c>)
 800171c:	f012 fa8e 	bl	8013c3c <assert_failed>
 8001720:	e5a3      	b.n	800126a <HAL_ADC_ConfigChannel+0x66>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	e67f      	b.n	8001426 <HAL_ADC_ConfigChannel+0x222>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001726:	fa93 f3a3 	rbit	r3, r3
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	4098      	lsls	r0, r3
 8001734:	e658      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x1e4>
    if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
 8001736:	68d3      	ldr	r3, [r2, #12]
 8001738:	f003 031c 	and.w	r3, r3, #28
 800173c:	2b1c      	cmp	r3, #28
 800173e:	d1d6      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x4ea>
 8001740:	23ff      	movs	r3, #255	; 0xff
 8001742:	e7db      	b.n	80016fc <HAL_ADC_ConfigChannel+0x4f8>
      assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
 8001744:	6822      	ldr	r2, [r4, #0]
 8001746:	4b3f      	ldr	r3, [pc, #252]	; (8001844 <HAL_ADC_ConfigChannel+0x640>)
 8001748:	493f      	ldr	r1, [pc, #252]	; (8001848 <HAL_ADC_ConfigChannel+0x644>)
 800174a:	4840      	ldr	r0, [pc, #256]	; (800184c <HAL_ADC_ConfigChannel+0x648>)
 800174c:	429a      	cmp	r2, r3
 800174e:	bf18      	it	ne
 8001750:	428a      	cmpne	r2, r1
 8001752:	493f      	ldr	r1, [pc, #252]	; (8001850 <HAL_ADC_ConfigChannel+0x64c>)
 8001754:	bf14      	ite	ne
 8001756:	2301      	movne	r3, #1
 8001758:	2300      	moveq	r3, #0
 800175a:	4282      	cmp	r2, r0
 800175c:	bf0c      	ite	eq
 800175e:	2300      	moveq	r3, #0
 8001760:	f003 0301 	andne.w	r3, r3, #1
 8001764:	f100 6006 	add.w	r0, r0, #140509184	; 0x8600000
 8001768:	428a      	cmp	r2, r1
 800176a:	bf0c      	ite	eq
 800176c:	2300      	moveq	r3, #0
 800176e:	f003 0301 	andne.w	r3, r3, #1
 8001772:	3018      	adds	r0, #24
 8001774:	4937      	ldr	r1, [pc, #220]	; (8001854 <HAL_ADC_ConfigChannel+0x650>)
 8001776:	4282      	cmp	r2, r0
 8001778:	bf0c      	ite	eq
 800177a:	2300      	moveq	r3, #0
 800177c:	f003 0301 	andne.w	r3, r3, #1
 8001780:	f100 50ca 	add.w	r0, r0, #423624704	; 0x19400000
 8001784:	428a      	cmp	r2, r1
 8001786:	bf0c      	ite	eq
 8001788:	2300      	moveq	r3, #0
 800178a:	f003 0301 	andne.w	r3, r3, #1
 800178e:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 8001792:	f101 6106 	add.w	r1, r1, #140509184	; 0x8600000
 8001796:	4282      	cmp	r2, r0
 8001798:	bf0c      	ite	eq
 800179a:	2300      	moveq	r3, #0
 800179c:	f003 0301 	andne.w	r3, r3, #1
 80017a0:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80017a4:	428a      	cmp	r2, r1
 80017a6:	bf0c      	ite	eq
 80017a8:	2300      	moveq	r3, #0
 80017aa:	f003 0301 	andne.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f43f ae05 	beq.w	80013be <HAL_ADC_ConfigChannel+0x1ba>
 80017b4:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <HAL_ADC_ConfigChannel+0x664>)
 80017b6:	429a      	cmp	r2, r3
 80017b8:	f43f ae01 	beq.w	80013be <HAL_ADC_ConfigChannel+0x1ba>
 80017bc:	f640 217e 	movw	r1, #2686	; 0xa7e
 80017c0:	481b      	ldr	r0, [pc, #108]	; (8001830 <HAL_ADC_ConfigChannel+0x62c>)
 80017c2:	f012 fa3b 	bl	8013c3c <assert_failed>
 80017c6:	682b      	ldr	r3, [r5, #0]
 80017c8:	e6d5      	b.n	8001576 <HAL_ADC_ConfigChannel+0x372>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017ca:	6829      	ldr	r1, [r5, #0]
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_ADC_ConfigChannel+0x634>)
 80017ce:	4299      	cmp	r1, r3
 80017d0:	f000 813d 	beq.w	8001a4e <HAL_ADC_ConfigChannel+0x84a>
 80017d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80017d8:	4299      	cmp	r1, r3
 80017da:	f000 8138 	beq.w	8001a4e <HAL_ADC_ConfigChannel+0x84a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017de:	4e18      	ldr	r6, [pc, #96]	; (8001840 <HAL_ADC_ConfigChannel+0x63c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017e0:	4c22      	ldr	r4, [pc, #136]	; (800186c <HAL_ADC_ConfigChannel+0x668>)
 80017e2:	68a0      	ldr	r0, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017e4:	68b3      	ldr	r3, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017e6:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80017ea:	43db      	mvns	r3, r3
 80017ec:	f003 0301 	and.w	r3, r3, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 8141 	beq.w	8001a78 <HAL_ADC_ConfigChannel+0x874>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <HAL_ADC_ConfigChannel+0x66c>)
 80017f8:	429a      	cmp	r2, r3
 80017fa:	f000 8160 	beq.w	8001abe <HAL_ADC_ConfigChannel+0x8ba>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017fe:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_ADC_ConfigChannel+0x670>)
 8001800:	429a      	cmp	r2, r3
 8001802:	f000 817e 	beq.w	8001b02 <HAL_ADC_ConfigChannel+0x8fe>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_ADC_ConfigChannel+0x674>)
 8001808:	429a      	cmp	r2, r3
 800180a:	f47f ae28 	bne.w	800145e <HAL_ADC_ConfigChannel+0x25a>
            if (ADC_VREFINT_INSTANCE(hadc))
 800180e:	0243      	lsls	r3, r0, #9
 8001810:	f53f ae25 	bmi.w	800145e <HAL_ADC_ConfigChannel+0x25a>
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_ADC_ConfigChannel+0x63c>)
 8001816:	4299      	cmp	r1, r3
 8001818:	f47f ae21 	bne.w	800145e <HAL_ADC_ConfigChannel+0x25a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800181c:	68a2      	ldr	r2, [r4, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800181e:	f446 0380 	orr.w	r3, r6, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001822:	2000      	movs	r0, #0
 8001824:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001828:	4313      	orrs	r3, r2
 800182a:	60a3      	str	r3, [r4, #8]
 800182c:	e629      	b.n	8001482 <HAL_ADC_ConfigChannel+0x27e>
 800182e:	bf00      	nop
 8001830:	0802a188 	.word	0x0802a188
 8001834:	47ff0000 	.word	0x47ff0000
 8001838:	40022000 	.word	0x40022000
 800183c:	40022100 	.word	0x40022100
 8001840:	58026000 	.word	0x58026000
 8001844:	04300002 	.word	0x04300002
 8001848:	08600004 	.word	0x08600004
 800184c:	0c900008 	.word	0x0c900008
 8001850:	10c00010 	.word	0x10c00010
 8001854:	2a000400 	.word	0x2a000400
 8001858:	36902000 	.word	0x36902000
 800185c:	3ac04000 	.word	0x3ac04000
 8001860:	3ef08000 	.word	0x3ef08000
 8001864:	5c001000 	.word	0x5c001000
 8001868:	4b840000 	.word	0x4b840000
 800186c:	58026300 	.word	0x58026300
 8001870:	cb840000 	.word	0xcb840000
 8001874:	c7520000 	.word	0xc7520000
 8001878:	cfb80000 	.word	0xcfb80000
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800187c:	682b      	ldr	r3, [r5, #0]
 800187e:	6962      	ldr	r2, [r4, #20]
 8001880:	68d9      	ldr	r1, [r3, #12]
 8001882:	f3c1 0182 	ubfx	r1, r1, #2, #3
 8001886:	0049      	lsls	r1, r1, #1
 8001888:	fa02 f101 	lsl.w	r1, r2, r1
 800188c:	e6e3      	b.n	8001656 <HAL_ADC_ConfigChannel+0x452>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800188e:	6822      	ldr	r2, [r4, #0]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001890:	6829      	ldr	r1, [r5, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001892:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 80ac 	beq.w	80019f4 <HAL_ADC_ConfigChannel+0x7f0>
 800189c:	fa92 f3a2 	rbit	r3, r2
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	3301      	adds	r3, #1
 80018a6:	f003 031f 	and.w	r3, r3, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018aa:	2b09      	cmp	r3, #9
 80018ac:	f200 80ea 	bhi.w	8001a84 <HAL_ADC_ConfigChannel+0x880>
 80018b0:	fa92 f3a2 	rbit	r3, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	fa92 f0a2 	rbit	r0, r2
 80018bc:	2601      	movs	r6, #1
 80018be:	fab0 f080 	clz	r0, r0
 80018c2:	3301      	adds	r3, #1
 80018c4:	4430      	add	r0, r6
 80018c6:	069b      	lsls	r3, r3, #26
 80018c8:	f000 001f 	and.w	r0, r0, #31
 80018cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 80018d0:	fa06 f000 	lsl.w	r0, r6, r0
 80018d4:	4303      	orrs	r3, r0
 80018d6:	fa92 f2a2 	rbit	r2, r2
 80018da:	fab2 f282 	clz	r2, r2
 80018de:	4432      	add	r2, r6
 80018e0:	f002 021f 	and.w	r2, r2, #31
 80018e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80018e8:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018ea:	431a      	orrs	r2, r3
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018ec:	3114      	adds	r1, #20
  MODIFY_REG(*preg,
 80018ee:	2707      	movs	r7, #7
 80018f0:	68a3      	ldr	r3, [r4, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018f2:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 80018f4:	f3c2 5204 	ubfx	r2, r2, #20, #5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018f8:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 80018fc:	4097      	lsls	r7, r2
 80018fe:	4093      	lsls	r3, r2
 8001900:	5870      	ldr	r0, [r6, r1]
 8001902:	ea20 0207 	bic.w	r2, r0, r7
 8001906:	431a      	orrs	r2, r3
 8001908:	5072      	str	r2, [r6, r1]
 800190a:	e5a4      	b.n	8001456 <HAL_ADC_ConfigChannel+0x252>
  __HAL_LOCK(hadc);
 800190c:	2002      	movs	r0, #2
}
 800190e:	b003      	add	sp, #12
 8001910:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset/(hadc->Init.Oversampling.Ratio+1U)));
 8001912:	f640 2166 	movw	r1, #2662	; 0xa66
 8001916:	4883      	ldr	r0, [pc, #524]	; (8001b24 <HAL_ADC_ConfigChannel+0x920>)
 8001918:	f012 f990 	bl	8013c3c <assert_failed>
 800191c:	e60f      	b.n	800153e <HAL_ADC_ConfigChannel+0x33a>
      assert_param(IS_ADC1_DIFF_CHANNEL(sConfig->Channel));
 800191e:	6822      	ldr	r2, [r4, #0]
 8001920:	4b81      	ldr	r3, [pc, #516]	; (8001b28 <HAL_ADC_ConfigChannel+0x924>)
 8001922:	4882      	ldr	r0, [pc, #520]	; (8001b2c <HAL_ADC_ConfigChannel+0x928>)
 8001924:	4982      	ldr	r1, [pc, #520]	; (8001b30 <HAL_ADC_ConfigChannel+0x92c>)
 8001926:	429a      	cmp	r2, r3
 8001928:	bf18      	it	ne
 800192a:	4282      	cmpne	r2, r0
 800192c:	4881      	ldr	r0, [pc, #516]	; (8001b34 <HAL_ADC_ConfigChannel+0x930>)
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	428a      	cmp	r2, r1
 8001936:	bf0c      	ite	eq
 8001938:	2300      	moveq	r3, #0
 800193a:	f003 0301 	andne.w	r3, r3, #1
 800193e:	f101 6106 	add.w	r1, r1, #140509184	; 0x8600000
 8001942:	4282      	cmp	r2, r0
 8001944:	bf0c      	ite	eq
 8001946:	2300      	moveq	r3, #0
 8001948:	f003 0301 	andne.w	r3, r3, #1
 800194c:	3118      	adds	r1, #24
 800194e:	487a      	ldr	r0, [pc, #488]	; (8001b38 <HAL_ADC_ConfigChannel+0x934>)
 8001950:	428a      	cmp	r2, r1
 8001952:	bf0c      	ite	eq
 8001954:	2300      	moveq	r3, #0
 8001956:	f003 0301 	andne.w	r3, r3, #1
 800195a:	f101 51ca 	add.w	r1, r1, #423624704	; 0x19400000
 800195e:	4282      	cmp	r2, r0
 8001960:	bf0c      	ite	eq
 8001962:	2300      	moveq	r3, #0
 8001964:	f003 0301 	andne.w	r3, r3, #1
 8001968:	f501 61fc 	add.w	r1, r1, #2016	; 0x7e0
 800196c:	f100 6006 	add.w	r0, r0, #140509184	; 0x8600000
 8001970:	428a      	cmp	r2, r1
 8001972:	bf0c      	ite	eq
 8001974:	2300      	moveq	r3, #0
 8001976:	f003 0301 	andne.w	r3, r3, #1
 800197a:	4970      	ldr	r1, [pc, #448]	; (8001b3c <HAL_ADC_ConfigChannel+0x938>)
 800197c:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8001980:	4282      	cmp	r2, r0
 8001982:	bf0c      	ite	eq
 8001984:	2300      	moveq	r3, #0
 8001986:	f003 0301 	andne.w	r3, r3, #1
 800198a:	428a      	cmp	r2, r1
 800198c:	bf0c      	ite	eq
 800198e:	2300      	moveq	r3, #0
 8001990:	f003 0301 	andne.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	f43f ad12 	beq.w	80013be <HAL_ADC_ConfigChannel+0x1ba>
 800199a:	4b69      	ldr	r3, [pc, #420]	; (8001b40 <HAL_ADC_ConfigChannel+0x93c>)
 800199c:	429a      	cmp	r2, r3
 800199e:	f43f ad0e 	beq.w	80013be <HAL_ADC_ConfigChannel+0x1ba>
 80019a2:	f640 217a 	movw	r1, #2682	; 0xa7a
 80019a6:	485f      	ldr	r0, [pc, #380]	; (8001b24 <HAL_ADC_ConfigChannel+0x920>)
 80019a8:	f012 f948 	bl	8013c3c <assert_failed>
 80019ac:	682b      	ldr	r3, [r5, #0]
 80019ae:	e5de      	b.n	800156e <HAL_ADC_ConfigChannel+0x36a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019b0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80019b2:	0692      	lsls	r2, r2, #26
 80019b4:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 80019b8:	4291      	cmp	r1, r2
 80019ba:	d040      	beq.n	8001a3e <HAL_ADC_ConfigChannel+0x83a>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019bc:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80019be:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 80019c2:	4291      	cmp	r1, r2
 80019c4:	d033      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x82a>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019c6:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80019c8:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 80019cc:	4291      	cmp	r1, r2
 80019ce:	d026      	beq.n	8001a1e <HAL_ADC_ConfigChannel+0x81a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019d0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80019d2:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 80019d6:	4291      	cmp	r1, r2
 80019d8:	f47f ad25 	bne.w	8001426 <HAL_ADC_ConfigChannel+0x222>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80019dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80019e4:	682b      	ldr	r3, [r5, #0]
 80019e6:	e51e      	b.n	8001426 <HAL_ADC_ConfigChannel+0x222>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019e8:	0849      	lsrs	r1, r1, #1
 80019ea:	f001 0108 	and.w	r1, r1, #8
 80019ee:	fa02 f101 	lsl.w	r1, r2, r1
 80019f2:	e630      	b.n	8001656 <HAL_ADC_ConfigChannel+0x452>
 80019f4:	2601      	movs	r6, #1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019f6:	0e92      	lsrs	r2, r2, #26
 80019f8:	4432      	add	r2, r6
 80019fa:	f002 001f 	and.w	r0, r2, #31
 80019fe:	0693      	lsls	r3, r2, #26
 8001a00:	4086      	lsls	r6, r0
 8001a02:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a06:	2809      	cmp	r0, #9
 8001a08:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001a0c:	ea43 0306 	orr.w	r3, r3, r6
 8001a10:	f67f af6a 	bls.w	80018e8 <HAL_ADC_ConfigChannel+0x6e4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a14:	3a1e      	subs	r2, #30
 8001a16:	0512      	lsls	r2, r2, #20
 8001a18:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001a1c:	e765      	b.n	80018ea <HAL_ADC_ConfigChannel+0x6e6>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001a1e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a24:	669a      	str	r2, [r3, #104]	; 0x68
 8001a26:	6822      	ldr	r2, [r4, #0]
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	0692      	lsls	r2, r2, #26
 8001a2c:	e7d0      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x7cc>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001a2e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a34:	665a      	str	r2, [r3, #100]	; 0x64
 8001a36:	6822      	ldr	r2, [r4, #0]
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	0692      	lsls	r2, r2, #26
 8001a3c:	e7c3      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x7c2>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001a3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a44:	661a      	str	r2, [r3, #96]	; 0x60
 8001a46:	6822      	ldr	r2, [r4, #0]
 8001a48:	682b      	ldr	r3, [r5, #0]
 8001a4a:	0692      	lsls	r2, r2, #26
 8001a4c:	e7b6      	b.n	80019bc <HAL_ADC_ConfigChannel+0x7b8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_ADC_ConfigChannel+0x940>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a50:	4e3d      	ldr	r6, [pc, #244]	; (8001b48 <HAL_ADC_ConfigChannel+0x944>)
 8001a52:	4f3e      	ldr	r7, [pc, #248]	; (8001b4c <HAL_ADC_ConfigChannel+0x948>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a54:	461c      	mov	r4, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a56:	6898      	ldr	r0, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a58:	68bf      	ldr	r7, [r7, #8]
 8001a5a:	68b3      	ldr	r3, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a5c:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8001a60:	433b      	orrs	r3, r7
 8001a62:	43db      	mvns	r3, r3
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	e6c2      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x5ec>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001a6a:	f640 215f 	movw	r1, #2655	; 0xa5f
 8001a6e:	482d      	ldr	r0, [pc, #180]	; (8001b24 <HAL_ADC_ConfigChannel+0x920>)
 8001a70:	f012 f8e4 	bl	8013c3c <assert_failed>
 8001a74:	f7ff bbf5 	b.w	8001262 <HAL_ADC_ConfigChannel+0x5e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a78:	6d6b      	ldr	r3, [r5, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8001a7a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a7c:	f043 0320 	orr.w	r3, r3, #32
 8001a80:	656b      	str	r3, [r5, #84]	; 0x54
 8001a82:	e4fe      	b.n	8001482 <HAL_ADC_ConfigChannel+0x27e>
 8001a84:	fa92 f3a2 	rbit	r3, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	fa92 f0a2 	rbit	r0, r2
 8001a90:	2601      	movs	r6, #1
 8001a92:	fab0 f080 	clz	r0, r0
 8001a96:	3301      	adds	r3, #1
 8001a98:	4430      	add	r0, r6
 8001a9a:	069b      	lsls	r3, r3, #26
 8001a9c:	f000 001f 	and.w	r0, r0, #31
 8001aa0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8001aa4:	fa06 f000 	lsl.w	r0, r6, r0
 8001aa8:	4303      	orrs	r3, r0
 8001aaa:	fa92 f2a2 	rbit	r2, r2
 8001aae:	fab2 f282 	clz	r2, r2
 8001ab2:	4432      	add	r2, r6
 8001ab4:	f002 021f 	and.w	r2, r2, #31
 8001ab8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001abc:	e7aa      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x810>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001abe:	0200      	lsls	r0, r0, #8
 8001ac0:	f53f accd 	bmi.w	800145e <HAL_ADC_ConfigChannel+0x25a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_ADC_ConfigChannel+0x94c>)
 8001ac6:	4299      	cmp	r1, r3
 8001ac8:	f47f acc9 	bne.w	800145e <HAL_ADC_ConfigChannel+0x25a>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_ADC_ConfigChannel+0x950>)
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001ace:	f446 0200 	orr.w	r2, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ad2:	68a1      	ldr	r1, [r4, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001ada:	481f      	ldr	r0, [pc, #124]	; (8001b58 <HAL_ADC_ConfigChannel+0x954>)
 8001adc:	099b      	lsrs	r3, r3, #6
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	fba0 1303 	umull	r1, r3, r0, r3
 8001ae4:	60a2      	str	r2, [r4, #8]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0UL)
 8001aec:	9b01      	ldr	r3, [sp, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f43f acb5 	beq.w	800145e <HAL_ADC_ConfigChannel+0x25a>
                wait_loop_index--;
 8001af4:	9b01      	ldr	r3, [sp, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0UL)
 8001afa:	9b01      	ldr	r3, [sp, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f9      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x8f0>
 8001b00:	e4ad      	b.n	800145e <HAL_ADC_ConfigChannel+0x25a>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b02:	01c2      	lsls	r2, r0, #7
 8001b04:	f53f acab 	bmi.w	800145e <HAL_ADC_ConfigChannel+0x25a>
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_ADC_ConfigChannel+0x94c>)
 8001b0a:	4299      	cmp	r1, r3
 8001b0c:	f47f aca7 	bne.w	800145e <HAL_ADC_ConfigChannel+0x25a>
 8001b10:	68a2      	ldr	r2, [r4, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001b12:	f046 7380 	orr.w	r3, r6, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b16:	2000      	movs	r0, #0
 8001b18:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	60a3      	str	r3, [r4, #8]
 8001b20:	e4af      	b.n	8001482 <HAL_ADC_ConfigChannel+0x27e>
 8001b22:	bf00      	nop
 8001b24:	0802a188 	.word	0x0802a188
 8001b28:	04300002 	.word	0x04300002
 8001b2c:	08600004 	.word	0x08600004
 8001b30:	0c900008 	.word	0x0c900008
 8001b34:	10c00010 	.word	0x10c00010
 8001b38:	2a000400 	.word	0x2a000400
 8001b3c:	43210000 	.word	0x43210000
 8001b40:	4b840000 	.word	0x4b840000
 8001b44:	40022300 	.word	0x40022300
 8001b48:	40022100 	.word	0x40022100
 8001b4c:	40022000 	.word	0x40022000
 8001b50:	58026000 	.word	0x58026000
 8001b54:	200002b0 	.word	0x200002b0
 8001b58:	053e2d63 	.word	0x053e2d63

08001b5c <ADC_Disable>:
{
 8001b5c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001b5e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b60:	6899      	ldr	r1, [r3, #8]
 8001b62:	0789      	lsls	r1, r1, #30
 8001b64:	d502      	bpl.n	8001b6c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b66:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8001b68:	2000      	movs	r0, #0
}
 8001b6a:	bd38      	pop	{r3, r4, r5, pc}
 8001b6c:	6899      	ldr	r1, [r3, #8]
 8001b6e:	07ca      	lsls	r2, r1, #31
 8001b70:	d524      	bpl.n	8001bbc <ADC_Disable+0x60>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001b72:	6899      	ldr	r1, [r3, #8]
 8001b74:	4604      	mov	r4, r0
 8001b76:	f001 010d 	and.w	r1, r1, #13
 8001b7a:	2901      	cmp	r1, #1
 8001b7c:	d008      	beq.n	8001b90 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8001b80:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b8a:	4303      	orrs	r3, r0
 8001b8c:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8001b8e:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8001b90:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001b92:	2103      	movs	r1, #3
 8001b94:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <ADC_Disable+0x64>)
 8001b96:	4002      	ands	r2, r0
 8001b98:	f042 0202 	orr.w	r2, r2, #2
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	6823      	ldr	r3, [r4, #0]
 8001ba0:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8001ba2:	f7ff f84f 	bl	8000c44 <HAL_GetTick>
 8001ba6:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ba8:	e004      	b.n	8001bb4 <ADC_Disable+0x58>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001baa:	f7ff f84b 	bl	8000c44 <HAL_GetTick>
 8001bae:	1b40      	subs	r0, r0, r5
 8001bb0:	2802      	cmp	r0, #2
 8001bb2:	d8e4      	bhi.n	8001b7e <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	07db      	lsls	r3, r3, #31
 8001bba:	d4f6      	bmi.n	8001baa <ADC_Disable+0x4e>
  return HAL_OK;
 8001bbc:	2000      	movs	r0, #0
}
 8001bbe:	bd38      	pop	{r3, r4, r5, pc}
 8001bc0:	7fffffc0 	.word	0x7fffffc0

08001bc4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001bc6:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <ADC_ConfigureBoostMode+0x14c>)
{
 8001bc8:	4605      	mov	r5, r0
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001bca:	6803      	ldr	r3, [r0, #0]
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d027      	beq.n	8001c20 <ADC_ConfigureBoostMode+0x5c>
 8001bd0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d023      	beq.n	8001c20 <ADC_ConfigureBoostMode+0x5c>
 8001bd8:	4b4e      	ldr	r3, [pc, #312]	; (8001d14 <ADC_ConfigureBoostMode+0x150>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8001be0:	bf14      	ite	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	2300      	moveq	r3, #0
 8001be6:	b323      	cbz	r3, 8001c32 <ADC_ConfigureBoostMode+0x6e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001be8:	f007 f92c 	bl	8008e44 <HAL_RCC_GetHCLKFreq>
    switch(hadc->Init.ClockPrescaler)
 8001bec:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8001bee:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8001bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bf4:	d062      	beq.n	8001cbc <ADC_ConfigureBoostMode+0xf8>
 8001bf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001bfa:	d072      	beq.n	8001ce2 <ADC_ConfigureBoostMode+0x11e>
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c00:	d05c      	beq.n	8001cbc <ADC_ConfigureBoostMode+0xf8>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001c02:	f7ff f837 	bl	8000c74 <HAL_GetREVID>
 8001c06:	f241 0303 	movw	r3, #4099	; 0x1003
 8001c0a:	4298      	cmp	r0, r3
 8001c0c:	d832      	bhi.n	8001c74 <ADC_ConfigureBoostMode+0xb0>
  {
    if(freq > 20000000UL)
 8001c0e:	4a42      	ldr	r2, [pc, #264]	; (8001d18 <ADC_ConfigureBoostMode+0x154>)
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	4294      	cmp	r4, r2
 8001c14:	d928      	bls.n	8001c68 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c1c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001c1e:	bd38      	pop	{r3, r4, r5, pc}
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001c20:	4b3e      	ldr	r3, [pc, #248]	; (8001d1c <ADC_ConfigureBoostMode+0x158>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8001c28:	bf14      	ite	ne
 8001c2a:	2301      	movne	r3, #1
 8001c2c:	2300      	moveq	r3, #0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1da      	bne.n	8001be8 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001c32:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c36:	f008 fbbd 	bl	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq>
    switch(hadc->Init.ClockPrescaler)
 8001c3a:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001c3c:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8001c3e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001c42:	d049      	beq.n	8001cd8 <ADC_ConfigureBoostMode+0x114>
 8001c44:	d93e      	bls.n	8001cc4 <ADC_ConfigureBoostMode+0x100>
 8001c46:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001c4a:	d04e      	beq.n	8001cea <ADC_ConfigureBoostMode+0x126>
 8001c4c:	d927      	bls.n	8001c9e <ADC_ConfigureBoostMode+0xda>
 8001c4e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001c52:	d048      	beq.n	8001ce6 <ADC_ConfigureBoostMode+0x122>
 8001c54:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001c58:	d1d3      	bne.n	8001c02 <ADC_ConfigureBoostMode+0x3e>
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001c5a:	f7ff f80b 	bl	8000c74 <HAL_GetREVID>
 8001c5e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001c62:	4298      	cmp	r0, r3
 8001c64:	d805      	bhi.n	8001c72 <ADC_ConfigureBoostMode+0xae>
 8001c66:	682b      	ldr	r3, [r5, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c6e:	609a      	str	r2, [r3, #8]
}
 8001c70:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 256UL;
 8001c72:	0a24      	lsrs	r4, r4, #8
    freq /= 2U; /* divider by 2 for Rev.V */
 8001c74:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8001c76:	4a2a      	ldr	r2, [pc, #168]	; (8001d20 <ADC_ConfigureBoostMode+0x15c>)
 8001c78:	682b      	ldr	r3, [r5, #0]
 8001c7a:	4294      	cmp	r4, r2
 8001c7c:	d90a      	bls.n	8001c94 <ADC_ConfigureBoostMode+0xd0>
    else if(freq <= 12500000UL)
 8001c7e:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <ADC_ConfigureBoostMode+0x160>)
 8001c80:	4294      	cmp	r4, r2
 8001c82:	d914      	bls.n	8001cae <ADC_ConfigureBoostMode+0xea>
    else if(freq <= 25000000UL)
 8001c84:	4a28      	ldr	r2, [pc, #160]	; (8001d28 <ADC_ConfigureBoostMode+0x164>)
 8001c86:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001c88:	689a      	ldr	r2, [r3, #8]
    else if(freq <= 25000000UL)
 8001c8a:	d932      	bls.n	8001cf2 <ADC_ConfigureBoostMode+0x12e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001c8c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001c90:	609a      	str	r2, [r3, #8]
}
 8001c92:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c9a:	609a      	str	r2, [r3, #8]
}
 8001c9c:	bd38      	pop	{r3, r4, r5, pc}
    switch(hadc->Init.ClockPrescaler)
 8001c9e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001ca2:	d024      	beq.n	8001cee <ADC_ConfigureBoostMode+0x12a>
 8001ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ca8:	d1ab      	bne.n	8001c02 <ADC_ConfigureBoostMode+0x3e>
        freq /= 32UL;
 8001caa:	0944      	lsrs	r4, r0, #5
        break;
 8001cac:	e7a9      	b.n	8001c02 <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb8:	609a      	str	r2, [r3, #8]
}
 8001cba:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8001cc2:	e79e      	b.n	8001c02 <ADC_ConfigureBoostMode+0x3e>
    switch(hadc->Init.ClockPrescaler)
 8001cc4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001cc8:	d006      	beq.n	8001cd8 <ADC_ConfigureBoostMode+0x114>
 8001cca:	d818      	bhi.n	8001cfe <ADC_ConfigureBoostMode+0x13a>
 8001ccc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001cd0:	d002      	beq.n	8001cd8 <ADC_ConfigureBoostMode+0x114>
 8001cd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001cd6:	d194      	bne.n	8001c02 <ADC_ConfigureBoostMode+0x3e>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001cd8:	0c9b      	lsrs	r3, r3, #18
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8001ce0:	e78f      	b.n	8001c02 <ADC_ConfigureBoostMode+0x3e>
        freq /= 4UL;
 8001ce2:	0884      	lsrs	r4, r0, #2
        break;
 8001ce4:	e78d      	b.n	8001c02 <ADC_ConfigureBoostMode+0x3e>
        freq /= 128UL;
 8001ce6:	09c4      	lsrs	r4, r0, #7
        break;
 8001ce8:	e78b      	b.n	8001c02 <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 8001cea:	0984      	lsrs	r4, r0, #6
        break;
 8001cec:	e789      	b.n	8001c02 <ADC_ConfigureBoostMode+0x3e>
        freq /= 16UL;
 8001cee:	0904      	lsrs	r4, r0, #4
      break;
 8001cf0:	e787      	b.n	8001c02 <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001cf2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfa:	609a      	str	r2, [r3, #8]
}
 8001cfc:	bd38      	pop	{r3, r4, r5, pc}
    switch(hadc->Init.ClockPrescaler)
 8001cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d02:	d0e9      	beq.n	8001cd8 <ADC_ConfigureBoostMode+0x114>
 8001d04:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001d08:	f47f af7b 	bne.w	8001c02 <ADC_ConfigureBoostMode+0x3e>
 8001d0c:	e7e4      	b.n	8001cd8 <ADC_ConfigureBoostMode+0x114>
 8001d0e:	bf00      	nop
 8001d10:	40022000 	.word	0x40022000
 8001d14:	58026300 	.word	0x58026300
 8001d18:	01312d00 	.word	0x01312d00
 8001d1c:	40022300 	.word	0x40022300
 8001d20:	005f5e10 	.word	0x005f5e10
 8001d24:	00bebc20 	.word	0x00bebc20
 8001d28:	017d7840 	.word	0x017d7840

08001d2c <HAL_ADC_Init>:
{
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8001d2e:	2300      	movs	r3, #0
{
 8001d30:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001d32:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8001d34:	2800      	cmp	r0, #0
 8001d36:	f000 81ab 	beq.w	8002090 <HAL_ADC_Init+0x364>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001d3a:	6803      	ldr	r3, [r0, #0]
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	499a      	ldr	r1, [pc, #616]	; (8001fa8 <HAL_ADC_Init+0x27c>)
 8001d40:	4a9a      	ldr	r2, [pc, #616]	; (8001fac <HAL_ADC_Init+0x280>)
 8001d42:	428b      	cmp	r3, r1
 8001d44:	bf18      	it	ne
 8001d46:	4293      	cmpne	r3, r2
 8001d48:	d003      	beq.n	8001d52 <HAL_ADC_Init+0x26>
 8001d4a:	4a99      	ldr	r2, [pc, #612]	; (8001fb0 <HAL_ADC_Init+0x284>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	f040 81b0 	bne.w	80020b2 <HAL_ADC_Init+0x386>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001d52:	6862      	ldr	r2, [r4, #4]
 8001d54:	f422 2300 	bic.w	r3, r2, #524288	; 0x80000
 8001d58:	f422 3540 	bic.w	r5, r2, #196608	; 0x30000
 8001d5c:	f422 1080 	bic.w	r0, r2, #1048576	; 0x100000
 8001d60:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8001d64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d68:	bf18      	it	ne
 8001d6a:	2d00      	cmpne	r5, #0
 8001d6c:	bf14      	ite	ne
 8001d6e:	2301      	movne	r3, #1
 8001d70:	2300      	moveq	r3, #0
 8001d72:	f5b2 1fe0 	cmp.w	r2, #1835008	; 0x1c0000
 8001d76:	bf0c      	ite	eq
 8001d78:	2300      	moveq	r3, #0
 8001d7a:	f003 0301 	andne.w	r3, r3, #1
 8001d7e:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8001d82:	bf0c      	ite	eq
 8001d84:	2300      	moveq	r3, #0
 8001d86:	f003 0301 	andne.w	r3, r3, #1
 8001d8a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8001d8e:	bf0c      	ite	eq
 8001d90:	2300      	moveq	r3, #0
 8001d92:	f003 0301 	andne.w	r3, r3, #1
 8001d96:	b12b      	cbz	r3, 8001da4 <HAL_ADC_Init+0x78>
 8001d98:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001d9c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001da0:	f040 81e0 	bne.w	8002164 <HAL_ADC_Init+0x438>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001da4:	68a2      	ldr	r2, [r4, #8]
 8001da6:	2a10      	cmp	r2, #16
 8001da8:	f200 817d 	bhi.w	80020a6 <HAL_ADC_Init+0x37a>
 8001dac:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <HAL_ADC_Init+0x288>)
 8001dae:	40d3      	lsrs	r3, r2
 8001db0:	07de      	lsls	r6, r3, #31
 8001db2:	f140 8178 	bpl.w	80020a6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001db6:	68e3      	ldr	r3, [r4, #12]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	f200 80e0 	bhi.w	8001f7e <HAL_ADC_Init+0x252>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001dbe:	7d63      	ldrb	r3, [r4, #21]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	f200 80cc 	bhi.w	8001f5e <HAL_ADC_Init+0x232>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001dc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dc8:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8001dcc:	f040 80d1 	bne.w	8001f72 <HAL_ADC_Init+0x246>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001dd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dd2:	f5b2 6fd0 	cmp.w	r2, #1664	; 0x680
 8001dd6:	bf18      	it	ne
 8001dd8:	f5b2 6fb8 	cmpne.w	r2, #1472	; 0x5c0
 8001ddc:	f022 0040 	bic.w	r0, r2, #64	; 0x40
 8001de0:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 8001de4:	f422 7590 	bic.w	r5, r2, #288	; 0x120
 8001de8:	bf14      	ite	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	2300      	moveq	r3, #0
 8001dee:	f5b0 6f84 	cmp.w	r0, #1056	; 0x420
 8001df2:	bf0c      	ite	eq
 8001df4:	2300      	moveq	r3, #0
 8001df6:	f003 0301 	andne.w	r3, r3, #1
 8001dfa:	f422 7080 	bic.w	r0, r2, #256	; 0x100
 8001dfe:	f5b1 6f88 	cmp.w	r1, #1088	; 0x440
 8001e02:	bf0c      	ite	eq
 8001e04:	2300      	moveq	r3, #0
 8001e06:	f003 0301 	andne.w	r3, r3, #1
 8001e0a:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 8001e0e:	f5b5 6f90 	cmp.w	r5, #1152	; 0x480
 8001e12:	bf0c      	ite	eq
 8001e14:	2300      	moveq	r3, #0
 8001e16:	f003 0301 	andne.w	r3, r3, #1
 8001e1a:	f5b0 6f9c 	cmp.w	r0, #1248	; 0x4e0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2300      	moveq	r3, #0
 8001e22:	f003 0301 	andne.w	r3, r3, #1
 8001e26:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2300      	moveq	r3, #0
 8001e2e:	f003 0301 	andne.w	r3, r3, #1
 8001e32:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8001e36:	bf0c      	ite	eq
 8001e38:	2300      	moveq	r3, #0
 8001e3a:	f003 0301 	andne.w	r3, r3, #1
 8001e3e:	b11b      	cbz	r3, 8001e48 <HAL_ADC_Init+0x11c>
 8001e40:	f432 6380 	bics.w	r3, r2, #1024	; 0x400
 8001e44:	f040 8194 	bne.w	8002170 <HAL_ADC_Init+0x444>
  assert_param(IS_ADC_CONVERSIONDATAMGT(hadc->Init.ConversionDataManagement));
 8001e48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	f200 8165 	bhi.w	800211a <HAL_ADC_Init+0x3ee>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001e50:	6923      	ldr	r3, [r4, #16]
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d006      	beq.n	8001e64 <HAL_ADC_Init+0x138>
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d004      	beq.n	8001e64 <HAL_ADC_Init+0x138>
 8001e5a:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8001e5e:	4856      	ldr	r0, [pc, #344]	; (8001fb8 <HAL_ADC_Init+0x28c>)
 8001e60:	f011 feec 	bl	8013c3c <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8001e64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e66:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8001e6a:	f040 8092 	bne.w	8001f92 <HAL_ADC_Init+0x266>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001e6e:	7d23      	ldrb	r3, [r4, #20]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d86a      	bhi.n	8001f4a <HAL_ADC_Init+0x21e>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8001e74:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d85d      	bhi.n	8001f38 <HAL_ADC_Init+0x20c>
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e7c:	68e3      	ldr	r3, [r4, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d141      	bne.n	8001f06 <HAL_ADC_Init+0x1da>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8001e82:	7f23      	ldrb	r3, [r4, #28]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d04e      	beq.n	8001f26 <HAL_ADC_Init+0x1fa>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e88:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8001e8a:	2d00      	cmp	r5, #0
 8001e8c:	f000 8104 	beq.w	8002098 <HAL_ADC_Init+0x36c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e90:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	0095      	lsls	r5, r2, #2
 8001e96:	d504      	bpl.n	8001ea2 <HAL_ADC_Init+0x176>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	4a48      	ldr	r2, [pc, #288]	; (8001fbc <HAL_ADC_Init+0x290>)
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	00d0      	lsls	r0, r2, #3
 8001ea6:	d416      	bmi.n	8001ed6 <HAL_ADC_Init+0x1aa>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001ea8:	4a45      	ldr	r2, [pc, #276]	; (8001fc0 <HAL_ADC_Init+0x294>)
  MODIFY_REG(ADCx->CR,
 8001eaa:	6898      	ldr	r0, [r3, #8]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	4d45      	ldr	r5, [pc, #276]	; (8001fc4 <HAL_ADC_Init+0x298>)
 8001eb0:	0992      	lsrs	r2, r2, #6
 8001eb2:	4945      	ldr	r1, [pc, #276]	; (8001fc8 <HAL_ADC_Init+0x29c>)
 8001eb4:	fba5 5202 	umull	r5, r2, r5, r2
 8001eb8:	4001      	ands	r1, r0
 8001eba:	0992      	lsrs	r2, r2, #6
 8001ebc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001ec0:	6099      	str	r1, [r3, #8]
 8001ec2:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8001ec4:	9b01      	ldr	r3, [sp, #4]
 8001ec6:	b12b      	cbz	r3, 8001ed4 <HAL_ADC_Init+0x1a8>
      wait_loop_index--;
 8001ec8:	9b01      	ldr	r3, [sp, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001ece:	9b01      	ldr	r3, [sp, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f9      	bne.n	8001ec8 <HAL_ADC_Init+0x19c>
 8001ed4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	00d1      	lsls	r1, r2, #3
 8001eda:	f100 80d7 	bmi.w	800208c <HAL_ADC_Init+0x360>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ede:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001ee0:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee2:	f042 0210 	orr.w	r2, r2, #16
 8001ee6:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001eea:	432a      	orrs	r2, r5
 8001eec:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	0752      	lsls	r2, r2, #29
 8001ef2:	d56b      	bpl.n	8001fcc <HAL_ADC_Init+0x2a0>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001ef8:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efa:	f043 0310 	orr.w	r3, r3, #16
}
 8001efe:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f00:	6563      	str	r3, [r4, #84]	; 0x54
}
 8001f02:	b003      	add	sp, #12
 8001f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001f06:	69a3      	ldr	r3, [r4, #24]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	2b0f      	cmp	r3, #15
 8001f0c:	f200 80ff 	bhi.w	800210e <HAL_ADC_Init+0x3e2>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001f10:	7f23      	ldrb	r3, [r4, #28]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	f200 80d3 	bhi.w	80020be <HAL_ADC_Init+0x392>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d1b5      	bne.n	8001e88 <HAL_ADC_Init+0x15c>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001f1c:	6a23      	ldr	r3, [r4, #32]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	2b07      	cmp	r3, #7
 8001f22:	f200 810f 	bhi.w	8002144 <HAL_ADC_Init+0x418>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8001f26:	7d63      	ldrb	r3, [r4, #21]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d1ad      	bne.n	8001e88 <HAL_ADC_Init+0x15c>
 8001f2c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001f30:	4821      	ldr	r0, [pc, #132]	; (8001fb8 <HAL_ADC_Init+0x28c>)
 8001f32:	f011 fe83 	bl	8013c3c <assert_failed>
 8001f36:	e7a7      	b.n	8001e88 <HAL_ADC_Init+0x15c>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8001f38:	f240 11b1 	movw	r1, #433	; 0x1b1
 8001f3c:	481e      	ldr	r0, [pc, #120]	; (8001fb8 <HAL_ADC_Init+0x28c>)
 8001f3e:	f011 fe7d 	bl	8013c3c <assert_failed>
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f42:	68e3      	ldr	r3, [r4, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d09c      	beq.n	8001e82 <HAL_ADC_Init+0x156>
 8001f48:	e7dd      	b.n	8001f06 <HAL_ADC_Init+0x1da>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001f4a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001f4e:	481a      	ldr	r0, [pc, #104]	; (8001fb8 <HAL_ADC_Init+0x28c>)
 8001f50:	f011 fe74 	bl	8013c3c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8001f54:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d98f      	bls.n	8001e7c <HAL_ADC_Init+0x150>
 8001f5c:	e7ec      	b.n	8001f38 <HAL_ADC_Init+0x20c>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001f5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001f62:	4815      	ldr	r0, [pc, #84]	; (8001fb8 <HAL_ADC_Init+0x28c>)
 8001f64:	f011 fe6a 	bl	8013c3c <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001f68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f6a:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8001f6e:	f43f af2f 	beq.w	8001dd0 <HAL_ADC_Init+0xa4>
 8001f72:	f240 11ab 	movw	r1, #427	; 0x1ab
 8001f76:	4810      	ldr	r0, [pc, #64]	; (8001fb8 <HAL_ADC_Init+0x28c>)
 8001f78:	f011 fe60 	bl	8013c3c <assert_failed>
 8001f7c:	e728      	b.n	8001dd0 <HAL_ADC_Init+0xa4>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001f7e:	f240 11a9 	movw	r1, #425	; 0x1a9
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <HAL_ADC_Init+0x28c>)
 8001f84:	f011 fe5a 	bl	8013c3c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001f88:	7d63      	ldrb	r3, [r4, #21]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	f67f af1b 	bls.w	8001dc6 <HAL_ADC_Init+0x9a>
 8001f90:	e7e5      	b.n	8001f5e <HAL_ADC_Init+0x232>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8001f92:	f240 11af 	movw	r1, #431	; 0x1af
 8001f96:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <HAL_ADC_Init+0x28c>)
 8001f98:	f011 fe50 	bl	8013c3c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001f9c:	7d23      	ldrb	r3, [r4, #20]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	f67f af68 	bls.w	8001e74 <HAL_ADC_Init+0x148>
 8001fa4:	e7d1      	b.n	8001f4a <HAL_ADC_Init+0x21e>
 8001fa6:	bf00      	nop
 8001fa8:	40022000 	.word	0x40022000
 8001fac:	40022100 	.word	0x40022100
 8001fb0:	58026000 	.word	0x58026000
 8001fb4:	00011111 	.word	0x00011111
 8001fb8:	0802a188 	.word	0x0802a188
 8001fbc:	5fffffc0 	.word	0x5fffffc0
 8001fc0:	200002b0 	.word	0x200002b0
 8001fc4:	053e2d63 	.word	0x053e2d63
 8001fc8:	6fffffc0 	.word	0x6fffffc0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fcc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001fce:	06d7      	lsls	r7, r2, #27
 8001fd0:	d491      	bmi.n	8001ef6 <HAL_ADC_Init+0x1ca>
    ADC_STATE_CLR_SET(hadc->State,
 8001fd2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001fd4:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8001fd8:	f042 0202 	orr.w	r2, r2, #2
 8001fdc:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	07d6      	lsls	r6, r2, #31
 8001fe2:	d413      	bmi.n	800200c <HAL_ADC_Init+0x2e0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fe4:	4a91      	ldr	r2, [pc, #580]	; (800222c <HAL_ADC_Init+0x500>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	f000 80b2 	beq.w	8002150 <HAL_ADC_Init+0x424>
 8001fec:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	f000 80ad 	beq.w	8002150 <HAL_ADC_Init+0x424>
 8001ff6:	4b8e      	ldr	r3, [pc, #568]	; (8002230 <HAL_ADC_Init+0x504>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	07d9      	lsls	r1, r3, #31
 8001ffc:	d406      	bmi.n	800200c <HAL_ADC_Init+0x2e0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ffe:	4a8d      	ldr	r2, [pc, #564]	; (8002234 <HAL_ADC_Init+0x508>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002000:	6893      	ldr	r3, [r2, #8]
 8002002:	6861      	ldr	r1, [r4, #4]
 8002004:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002008:	430b      	orrs	r3, r1
 800200a:	6093      	str	r3, [r2, #8]
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800200c:	f7fe fe32 	bl	8000c74 <HAL_GetREVID>
 8002010:	f241 0303 	movw	r3, #4099	; 0x1003
 8002014:	4298      	cmp	r0, r3
 8002016:	f240 8086 	bls.w	8002126 <HAL_ADC_Init+0x3fa>
 800201a:	68a2      	ldr	r2, [r4, #8]
 800201c:	7d61      	ldrb	r1, [r4, #21]
 800201e:	7f20      	ldrb	r0, [r4, #28]
 8002020:	2a10      	cmp	r2, #16
 8002022:	ea4f 3141 	mov.w	r1, r1, lsl #13
 8002026:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002028:	ea4f 4300 	mov.w	r3, r0, lsl #16
 800202c:	f000 80e0 	beq.w	80021f0 <HAL_ADC_Init+0x4c4>
                  hadc->Init.Overrun                                                    |
 8002030:	430a      	orrs	r2, r1
 8002032:	4332      	orrs	r2, r6
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002034:	431a      	orrs	r2, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002036:	2801      	cmp	r0, #1
 8002038:	d103      	bne.n	8002042 <HAL_ADC_Init+0x316>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800203a:	6a23      	ldr	r3, [r4, #32]
 800203c:	3b01      	subs	r3, #1
 800203e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002044:	b123      	cbz	r3, 8002050 <HAL_ADC_Init+0x324>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002046:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800204a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800204c:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800204e:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002050:	6821      	ldr	r1, [r4, #0]
 8002052:	4b79      	ldr	r3, [pc, #484]	; (8002238 <HAL_ADC_Init+0x50c>)
 8002054:	68c8      	ldr	r0, [r1, #12]
 8002056:	4003      	ands	r3, r0
 8002058:	4313      	orrs	r3, r2
 800205a:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800205c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002064:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002066:	d101      	bne.n	800206c <HAL_ADC_Init+0x340>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002068:	0712      	lsls	r2, r2, #28
 800206a:	d532      	bpl.n	80020d2 <HAL_ADC_Init+0x3a6>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800206c:	68e2      	ldr	r2, [r4, #12]
 800206e:	2a01      	cmp	r2, #1
 8002070:	d060      	beq.n	8002134 <HAL_ADC_Init+0x408>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002074:	f022 020f 	bic.w	r2, r2, #15
 8002078:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800207a:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 800207c:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800207e:	f023 0303 	bic.w	r3, r3, #3
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6563      	str	r3, [r4, #84]	; 0x54
}
 8002088:	b003      	add	sp, #12
 800208a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800208c:	2500      	movs	r5, #0
 800208e:	e72e      	b.n	8001eee <HAL_ADC_Init+0x1c2>
    return HAL_ERROR;
 8002090:	2501      	movs	r5, #1
}
 8002092:	4628      	mov	r0, r5
 8002094:	b003      	add	sp, #12
 8002096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8002098:	4620      	mov	r0, r4
 800209a:	f00e feb3 	bl	8010e04 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800209e:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80020a0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80020a4:	e6f4      	b.n	8001e90 <HAL_ADC_Init+0x164>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80020a6:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 80020aa:	4864      	ldr	r0, [pc, #400]	; (800223c <HAL_ADC_Init+0x510>)
 80020ac:	f011 fdc6 	bl	8013c3c <assert_failed>
 80020b0:	e681      	b.n	8001db6 <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80020b2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80020b6:	4861      	ldr	r0, [pc, #388]	; (800223c <HAL_ADC_Init+0x510>)
 80020b8:	f011 fdc0 	bl	8013c3c <assert_failed>
 80020bc:	e649      	b.n	8001d52 <HAL_ADC_Init+0x26>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80020be:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80020c2:	485e      	ldr	r0, [pc, #376]	; (800223c <HAL_ADC_Init+0x510>)
 80020c4:	f011 fdba 	bl	8013c3c <assert_failed>
 80020c8:	7f23      	ldrb	r3, [r4, #28]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	f47f aedc 	bne.w	8001e88 <HAL_ADC_Init+0x15c>
 80020d0:	e724      	b.n	8001f1c <HAL_ADC_Init+0x1f0>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020d2:	68d9      	ldr	r1, [r3, #12]
 80020d4:	4a5a      	ldr	r2, [pc, #360]	; (8002240 <HAL_ADC_Init+0x514>)
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020d6:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020d8:	400a      	ands	r2, r1
 80020da:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80020dc:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 80020e0:	430a      	orrs	r2, r1
 80020e2:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80020e4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d047      	beq.n	800217c <HAL_ADC_Init+0x450>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020ec:	6822      	ldr	r2, [r4, #0]
 80020ee:	6913      	ldr	r3, [r2, #16]
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020f6:	6822      	ldr	r2, [r4, #0]
      ADC_ConfigureBoostMode(hadc);
 80020f8:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020fc:	6913      	ldr	r3, [r2, #16]
 80020fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002102:	430b      	orrs	r3, r1
 8002104:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8002106:	f7ff fd5d 	bl	8001bc4 <ADC_ConfigureBoostMode>
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	e7ae      	b.n	800206c <HAL_ADC_Init+0x340>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800210e:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002112:	484a      	ldr	r0, [pc, #296]	; (800223c <HAL_ADC_Init+0x510>)
 8002114:	f011 fd92 	bl	8013c3c <assert_failed>
 8002118:	e6fa      	b.n	8001f10 <HAL_ADC_Init+0x1e4>
  assert_param(IS_ADC_CONVERSIONDATAMGT(hadc->Init.ConversionDataManagement));
 800211a:	f240 11ad 	movw	r1, #429	; 0x1ad
 800211e:	4847      	ldr	r0, [pc, #284]	; (800223c <HAL_ADC_Init+0x510>)
 8002120:	f011 fd8c 	bl	8013c3c <assert_failed>
 8002124:	e694      	b.n	8001e50 <HAL_ADC_Init+0x124>
 8002126:	7d62      	ldrb	r2, [r4, #21]
 8002128:	7f20      	ldrb	r0, [r4, #28]
 800212a:	0351      	lsls	r1, r2, #13
 800212c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800212e:	68a2      	ldr	r2, [r4, #8]
 8002130:	0403      	lsls	r3, r0, #16
 8002132:	e77d      	b.n	8002030 <HAL_ADC_Init+0x304>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002134:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002136:	69a2      	ldr	r2, [r4, #24]
 8002138:	f021 010f 	bic.w	r1, r1, #15
 800213c:	3a01      	subs	r2, #1
 800213e:	430a      	orrs	r2, r1
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
 8002142:	e79a      	b.n	800207a <HAL_ADC_Init+0x34e>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002144:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8002148:	483c      	ldr	r0, [pc, #240]	; (800223c <HAL_ADC_Init+0x510>)
 800214a:	f011 fd77 	bl	8013c3c <assert_failed>
 800214e:	e698      	b.n	8001e82 <HAL_ADC_Init+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002150:	4a36      	ldr	r2, [pc, #216]	; (800222c <HAL_ADC_Init+0x500>)
 8002152:	4b3c      	ldr	r3, [pc, #240]	; (8002244 <HAL_ADC_Init+0x518>)
 8002154:	6892      	ldr	r2, [r2, #8]
 8002156:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002158:	4313      	orrs	r3, r2
 800215a:	07d8      	lsls	r0, r3, #31
 800215c:	f53f af56 	bmi.w	800200c <HAL_ADC_Init+0x2e0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002160:	4a39      	ldr	r2, [pc, #228]	; (8002248 <HAL_ADC_Init+0x51c>)
 8002162:	e74d      	b.n	8002000 <HAL_ADC_Init+0x2d4>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002164:	f240 11a7 	movw	r1, #423	; 0x1a7
 8002168:	4834      	ldr	r0, [pc, #208]	; (800223c <HAL_ADC_Init+0x510>)
 800216a:	f011 fd67 	bl	8013c3c <assert_failed>
 800216e:	e619      	b.n	8001da4 <HAL_ADC_Init+0x78>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002170:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002174:	4831      	ldr	r0, [pc, #196]	; (800223c <HAL_ADC_Init+0x510>)
 8002176:	f011 fd61 	bl	8013c3c <assert_failed>
 800217a:	e665      	b.n	8001e48 <HAL_ADC_Init+0x11c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 800217c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800217e:	3b01      	subs	r3, #1
 8002180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002184:	d245      	bcs.n	8002212 <HAL_ADC_Init+0x4e6>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8002186:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002188:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 800218c:	bf14      	ite	ne
 800218e:	2301      	movne	r3, #1
 8002190:	2300      	moveq	r3, #0
 8002192:	2980      	cmp	r1, #128	; 0x80
 8002194:	bf0c      	ite	eq
 8002196:	2300      	moveq	r3, #0
 8002198:	f003 0301 	andne.w	r3, r3, #1
 800219c:	b113      	cbz	r3, 80021a4 <HAL_ADC_Init+0x478>
 800219e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80021a2:	d13c      	bne.n	800221e <HAL_ADC_Init+0x4f2>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 80021a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80021a6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80021aa:	d12c      	bne.n	8002206 <HAL_ADC_Init+0x4da>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 80021ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80021ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d121      	bne.n	80021fa <HAL_ADC_Init+0x4ce>
      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80021b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021b8:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80021ba:	b10b      	cbz	r3, 80021c0 <HAL_ADC_Init+0x494>
            || (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 80021bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021be:	b933      	cbnz	r3, 80021ce <HAL_ADC_Init+0x4a2>
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
 80021c0:	b12e      	cbz	r6, 80021ce <HAL_ADC_Init+0x4a2>
 80021c2:	f240 218b 	movw	r1, #651	; 0x28b
 80021c6:	481d      	ldr	r0, [pc, #116]	; (800223c <HAL_ADC_Init+0x510>)
 80021c8:	f011 fd38 	bl	8013c3c <assert_failed>
 80021cc:	6c66      	ldr	r6, [r4, #68]	; 0x44
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80021ce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80021d0:	6820      	ldr	r0, [r4, #0]
 80021d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021d4:	6907      	ldr	r7, [r0, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	491c      	ldr	r1, [pc, #112]	; (800224c <HAL_ADC_Init+0x520>)
 80021da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80021dc:	4039      	ands	r1, r7
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	3a01      	subs	r2, #1
 80021e4:	430b      	orrs	r3, r1
 80021e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80021ea:	4333      	orrs	r3, r6
 80021ec:	6103      	str	r3, [r0, #16]
 80021ee:	e782      	b.n	80020f6 <HAL_ADC_Init+0x3ca>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021f0:	f046 021c 	orr.w	r2, r6, #28
 80021f4:	430a      	orrs	r2, r1
 80021f6:	431a      	orrs	r2, r3
 80021f8:	e71d      	b.n	8002036 <HAL_ADC_Init+0x30a>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 80021fa:	f240 2185 	movw	r1, #645	; 0x285
 80021fe:	480f      	ldr	r0, [pc, #60]	; (800223c <HAL_ADC_Init+0x510>)
 8002200:	f011 fd1c 	bl	8013c3c <assert_failed>
 8002204:	e7d7      	b.n	80021b6 <HAL_ADC_Init+0x48a>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8002206:	f44f 7121 	mov.w	r1, #644	; 0x284
 800220a:	480c      	ldr	r0, [pc, #48]	; (800223c <HAL_ADC_Init+0x510>)
 800220c:	f011 fd16 	bl	8013c3c <assert_failed>
 8002210:	e7cc      	b.n	80021ac <HAL_ADC_Init+0x480>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8002212:	f240 2182 	movw	r1, #642	; 0x282
 8002216:	4809      	ldr	r0, [pc, #36]	; (800223c <HAL_ADC_Init+0x510>)
 8002218:	f011 fd10 	bl	8013c3c <assert_failed>
 800221c:	e7b3      	b.n	8002186 <HAL_ADC_Init+0x45a>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 800221e:	f240 2183 	movw	r1, #643	; 0x283
 8002222:	4806      	ldr	r0, [pc, #24]	; (800223c <HAL_ADC_Init+0x510>)
 8002224:	f011 fd0a 	bl	8013c3c <assert_failed>
 8002228:	e7bc      	b.n	80021a4 <HAL_ADC_Init+0x478>
 800222a:	bf00      	nop
 800222c:	40022000 	.word	0x40022000
 8002230:	58026000 	.word	0x58026000
 8002234:	58026300 	.word	0x58026300
 8002238:	fff0c003 	.word	0xfff0c003
 800223c:	0802a188 	.word	0x0802a188
 8002240:	ffffbffc 	.word	0xffffbffc
 8002244:	40022100 	.word	0x40022100
 8002248:	40022300 	.word	0x40022300
 800224c:	fc00f81e 	.word	0xfc00f81e

08002250 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002252:	4604      	mov	r4, r0
 8002254:	4616      	mov	r6, r2
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002256:	4835      	ldr	r0, [pc, #212]	; (800232c <HAL_ADCEx_Calibration_Start+0xdc>)
{
 8002258:	b083      	sub	sp, #12
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800225a:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t wait_loop_index = 0UL;
 800225c:	2700      	movs	r7, #0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800225e:	4a34      	ldr	r2, [pc, #208]	; (8002330 <HAL_ADCEx_Calibration_Start+0xe0>)
{
 8002260:	460d      	mov	r5, r1
  __IO uint32_t wait_loop_index = 0UL;
 8002262:	9701      	str	r7, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002264:	4283      	cmp	r3, r0
 8002266:	bf18      	it	ne
 8002268:	4293      	cmpne	r3, r2
 800226a:	d002      	beq.n	8002272 <HAL_ADCEx_Calibration_Start+0x22>
 800226c:	4a31      	ldr	r2, [pc, #196]	; (8002334 <HAL_ADCEx_Calibration_Start+0xe4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d14b      	bne.n	800230a <HAL_ADCEx_Calibration_Start+0xba>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 8002272:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002276:	429e      	cmp	r6, r3
 8002278:	d002      	beq.n	8002280 <HAL_ADCEx_Calibration_Start+0x30>
 800227a:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <HAL_ADCEx_Calibration_Start+0xe8>)
 800227c:	429e      	cmp	r6, r3
 800227e:	d139      	bne.n	80022f4 <HAL_ADCEx_Calibration_Start+0xa4>

  /* Process locked */
  __HAL_LOCK(hadc);
 8002280:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002284:	2b01      	cmp	r3, #1
 8002286:	d03d      	beq.n	8002304 <HAL_ADCEx_Calibration_Start+0xb4>
 8002288:	2301      	movs	r3, #1

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800228a:	4620      	mov	r0, r4
  __HAL_LOCK(hadc);
 800228c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tmp_hal_status = ADC_Disable(hadc);
 8002290:	f7ff fc64 	bl	8001b5c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002294:	bb28      	cbnz	r0, 80022e2 <HAL_ADCEx_Calibration_Start+0x92>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002296:	6d61      	ldr	r1, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8002298:	f405 3380 	and.w	r3, r5, #65536	; 0x10000
 800229c:	4a27      	ldr	r2, [pc, #156]	; (800233c <HAL_ADCEx_Calibration_Start+0xec>)
 800229e:	f006 4680 	and.w	r6, r6, #1073741824	; 0x40000000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
 80022a2:	6827      	ldr	r7, [r4, #0]
 80022a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ADC_STATE_CLR_SET(hadc->State,
 80022a8:	400a      	ands	r2, r1
 80022aa:	4d25      	ldr	r5, [pc, #148]	; (8002340 <HAL_ADCEx_Calibration_Start+0xf0>)
 80022ac:	4333      	orrs	r3, r6

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80022ae:	4925      	ldr	r1, [pc, #148]	; (8002344 <HAL_ADCEx_Calibration_Start+0xf4>)
    ADC_STATE_CLR_SET(hadc->State,
 80022b0:	f042 0202 	orr.w	r2, r2, #2
 80022b4:	6562      	str	r2, [r4, #84]	; 0x54
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	4015      	ands	r5, r2
 80022ba:	432b      	orrs	r3, r5
 80022bc:	60bb      	str	r3, [r7, #8]
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022be:	6822      	ldr	r2, [r4, #0]
 80022c0:	e005      	b.n	80022ce <HAL_ADCEx_Calibration_Start+0x7e>
      wait_loop_index++;
 80022c2:	9b01      	ldr	r3, [sp, #4]
 80022c4:	3301      	adds	r3, #1
 80022c6:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80022c8:	9b01      	ldr	r3, [sp, #4]
 80022ca:	428b      	cmp	r3, r1
 80022cc:	d822      	bhi.n	8002314 <HAL_ADCEx_Calibration_Start+0xc4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80022ce:	6893      	ldr	r3, [r2, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	dbf6      	blt.n	80022c2 <HAL_ADCEx_Calibration_Start+0x72>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6563      	str	r3, [r4, #84]	; 0x54
 80022e0:	e003      	b.n	80022ea <HAL_ADCEx_Calibration_Start+0x9a>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022e4:	f043 0310 	orr.w	r3, r3, #16
 80022e8:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ea:	2300      	movs	r3, #0
 80022ec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80022f0:	b003      	add	sp, #12
 80022f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 80022f4:	218f      	movs	r1, #143	; 0x8f
 80022f6:	4814      	ldr	r0, [pc, #80]	; (8002348 <HAL_ADCEx_Calibration_Start+0xf8>)
 80022f8:	f011 fca0 	bl	8013c3c <assert_failed>
  __HAL_LOCK(hadc);
 80022fc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002300:	2b01      	cmp	r3, #1
 8002302:	d1c1      	bne.n	8002288 <HAL_ADCEx_Calibration_Start+0x38>
 8002304:	2002      	movs	r0, #2
}
 8002306:	b003      	add	sp, #12
 8002308:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800230a:	218e      	movs	r1, #142	; 0x8e
 800230c:	480e      	ldr	r0, [pc, #56]	; (8002348 <HAL_ADCEx_Calibration_Start+0xf8>)
 800230e:	f011 fc95 	bl	8013c3c <assert_failed>
 8002312:	e7ae      	b.n	8002272 <HAL_ADCEx_Calibration_Start+0x22>
        ADC_STATE_CLR_SET(hadc->State,
 8002314:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8002316:	2200      	movs	r2, #0
        return HAL_ERROR;
 8002318:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800231a:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 800231e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8002322:	f043 0310 	orr.w	r3, r3, #16
 8002326:	6563      	str	r3, [r4, #84]	; 0x54
}
 8002328:	b003      	add	sp, #12
 800232a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800232c:	40022000 	.word	0x40022000
 8002330:	40022100 	.word	0x40022100
 8002334:	58026000 	.word	0x58026000
 8002338:	47ff0000 	.word	0x47ff0000
 800233c:	ffffeefd 	.word	0xffffeefd
 8002340:	3ffeffc0 	.word	0x3ffeffc0
 8002344:	25c3f7ff 	.word	0x25c3f7ff
 8002348:	0802a1c0 	.word	0x0802a1c0

0800234c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop

08002350 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop

08002354 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop

08002358 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop

0800235c <HAL_ADCEx_EndOfSamplingCallback>:
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop

08002360 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002360:	b570      	push	{r4, r5, r6, lr}
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef  tmphadcSlave;
  uint32_t tmphadcSlave_conversion_on_going;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8002362:	4b58      	ldr	r3, [pc, #352]	; (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
{
 8002364:	4604      	mov	r4, r0
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8002366:	6802      	ldr	r2, [r0, #0]
{
 8002368:	460d      	mov	r5, r1
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 800236a:	429a      	cmp	r2, r3
 800236c:	d004      	beq.n	8002378 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 800236e:	f640 01bd 	movw	r1, #2237	; 0x8bd
 8002372:	4855      	ldr	r0, [pc, #340]	; (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8002374:	f011 fc62 	bl	8013c3c <assert_failed>
  assert_param(IS_ADC_MULTIMODE(multimode->Mode));
 8002378:	682b      	ldr	r3, [r5, #0]
 800237a:	2b09      	cmp	r3, #9
 800237c:	d933      	bls.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 800237e:	f640 01be 	movw	r1, #2238	; 0x8be
 8002382:	4851      	ldr	r0, [pc, #324]	; (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8002384:	f011 fc5a 	bl	8013c3c <assert_failed>
 8002388:	682b      	ldr	r3, [r5, #0]
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800238a:	b1cb      	cbz	r3, 80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
 800238c:	686b      	ldr	r3, [r5, #4]
 800238e:	f433 4200 	bics.w	r2, r3, #32768	; 0x8000
 8002392:	d002      	beq.n	800239a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002394:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002398:	d15c      	bne.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 800239a:	68ab      	ldr	r3, [r5, #8]
 800239c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023a0:	bf18      	it	ne
 80023a2:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 80023a6:	bf14      	ite	ne
 80023a8:	2201      	movne	r2, #1
 80023aa:	2200      	moveq	r2, #0
 80023ac:	f433 7140 	bics.w	r1, r3, #768	; 0x300
 80023b0:	bf08      	it	eq
 80023b2:	2200      	moveq	r2, #0
 80023b4:	b122      	cbz	r2, 80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
 80023b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023be:	d179      	bne.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023c0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d04b      	beq.n	8002460 <HAL_ADCEx_MultiModeConfigChannel+0x100>

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023c8:	4a3e      	ldr	r2, [pc, #248]	; (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
  __HAL_LOCK(hadc);
 80023ca:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023cc:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hadc);
 80023ce:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0x92>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d6:	6d63      	ldr	r3, [r4, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023d8:	2200      	movs	r2, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023da:	f043 0320 	orr.w	r3, r3, #32
    __HAL_UNLOCK(hadc);
 80023de:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e2:	6563      	str	r3, [r4, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_MULTIMODE(multimode->Mode));
 80023e6:	f240 22ef 	movw	r2, #751	; 0x2ef
 80023ea:	40da      	lsrs	r2, r3
 80023ec:	07d6      	lsls	r6, r2, #31
 80023ee:	d4cc      	bmi.n	800238a <HAL_ADCEx_MultiModeConfigChannel+0x2a>
 80023f0:	e7c5      	b.n	800237e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023f2:	4a36      	ldr	r2, [pc, #216]	; (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 80023f4:	6891      	ldr	r1, [r2, #8]
 80023f6:	0749      	lsls	r1, r1, #29
 80023f8:	d509      	bpl.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80023fa:	689b      	ldr	r3, [r3, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80023fe:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002400:	f043 0320 	orr.w	r3, r3, #32
 8002404:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002406:	2300      	movs	r3, #0
 8002408:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800240c:	bd70      	pop	{r4, r5, r6, pc}
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	0748      	lsls	r0, r1, #29
 8002412:	d4f3      	bmi.n	80023fc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002414:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002416:	482e      	ldr	r0, [pc, #184]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x170>)
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002418:	b321      	cbz	r1, 8002464 <HAL_ADCEx_MultiModeConfigChannel+0x104>
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800241a:	6881      	ldr	r1, [r0, #8]
 800241c:	686e      	ldr	r6, [r5, #4]
 800241e:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8002422:	4331      	orrs	r1, r6
 8002424:	6081      	str	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002426:	6821      	ldr	r1, [r4, #0]
 8002428:	4299      	cmp	r1, r3
 800242a:	d03a      	beq.n	80024a2 <HAL_ADCEx_MultiModeConfigChannel+0x142>
 800242c:	4291      	cmp	r1, r2
 800242e:	d038      	beq.n	80024a2 <HAL_ADCEx_MultiModeConfigChannel+0x142>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002430:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	43db      	mvns	r3, r3
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d040      	beq.n	80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x160>
        MODIFY_REG(tmpADC_Common->CCR,
 800243e:	4924      	ldr	r1, [pc, #144]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x170>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002440:	2000      	movs	r0, #0
        MODIFY_REG(tmpADC_Common->CCR,
 8002442:	682b      	ldr	r3, [r5, #0]
 8002444:	688e      	ldr	r6, [r1, #8]
 8002446:	68ad      	ldr	r5, [r5, #8]
 8002448:	4a23      	ldr	r2, [pc, #140]	; (80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 800244a:	432b      	orrs	r3, r5
 800244c:	4032      	ands	r2, r6
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
 8002452:	e7d8      	b.n	8002406 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
 8002454:	f640 01c1 	movw	r1, #2241	; 0x8c1
 8002458:	481b      	ldr	r0, [pc, #108]	; (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 800245a:	f011 fbef 	bl	8013c3c <assert_failed>
 800245e:	e79c      	b.n	800239a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  __HAL_LOCK(hadc);
 8002460:	2002      	movs	r0, #2
}
 8002462:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002464:	6881      	ldr	r1, [r0, #8]
 8002466:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 800246a:	6081      	str	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800246c:	6821      	ldr	r1, [r4, #0]
 800246e:	4299      	cmp	r1, r3
 8002470:	d00e      	beq.n	8002490 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002472:	4291      	cmp	r1, r2
 8002474:	d00c      	beq.n	8002490 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002476:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	43db      	mvns	r3, r3
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	b1f3      	cbz	r3, 80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x160>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002482:	4a13      	ldr	r2, [pc, #76]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x170>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002484:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 8002488:	6891      	ldr	r1, [r2, #8]
 800248a:	400b      	ands	r3, r1
 800248c:	6093      	str	r3, [r2, #8]
 800248e:	e7ba      	b.n	8002406 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8002490:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 8002494:	6892      	ldr	r2, [r2, #8]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4313      	orrs	r3, r2
 800249a:	43db      	mvns	r3, r3
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	e7ee      	b.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80024a2:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 80024a6:	6892      	ldr	r2, [r2, #8]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	43db      	mvns	r3, r3
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	e7c2      	b.n	800243a <HAL_ADCEx_MultiModeConfigChannel+0xda>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 80024b4:	f640 01c2 	movw	r1, #2242	; 0x8c2
 80024b8:	4803      	ldr	r0, [pc, #12]	; (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 80024ba:	f011 fbbf 	bl	8013c3c <assert_failed>
 80024be:	e77f      	b.n	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c0:	2000      	movs	r0, #0
 80024c2:	e7a0      	b.n	8002406 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80024c4:	40022000 	.word	0x40022000
 80024c8:	0802a1c0 	.word	0x0802a1c0
 80024cc:	40022100 	.word	0x40022100
 80024d0:	40022300 	.word	0x40022300
 80024d4:	58026000 	.word	0x58026000
 80024d8:	fffff0e0 	.word	0xfffff0e0

080024dc <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80024dc:	1ec3      	subs	r3, r0, #3
 80024de:	2b04      	cmp	r3, #4
{
 80024e0:	b510      	push	{r4, lr}
 80024e2:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80024e4:	d903      	bls.n	80024ee <HAL_NVIC_SetPriorityGrouping+0x12>
 80024e6:	2192      	movs	r1, #146	; 0x92
 80024e8:	4807      	ldr	r0, [pc, #28]	; (8002508 <HAL_NVIC_SetPriorityGrouping+0x2c>)
 80024ea:	f011 fba7 	bl	8013c3c <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ee:	4907      	ldr	r1, [pc, #28]	; (800250c <HAL_NVIC_SetPriorityGrouping+0x30>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f0:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f4:	0224      	lsls	r4, r4, #8
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024fa:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fe:	4002      	ands	r2, r0
 8002500:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002502:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8002504:	60cc      	str	r4, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002506:	bd10      	pop	{r4, pc}
 8002508:	0802a1fc 	.word	0x0802a1fc
 800250c:	e000ed00 	.word	0xe000ed00
 8002510:	05fa0000 	.word	0x05fa0000

08002514 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002514:	2a0f      	cmp	r2, #15
{
 8002516:	b570      	push	{r4, r5, r6, lr}
 8002518:	4616      	mov	r6, r2
 800251a:	4605      	mov	r5, r0
 800251c:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800251e:	d832      	bhi.n	8002586 <HAL_NVIC_SetPriority+0x72>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002520:	2c0f      	cmp	r4, #15
 8002522:	d82b      	bhi.n	800257c <HAL_NVIC_SetPriority+0x68>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <HAL_NVIC_SetPriority+0x7c>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800252c:	f1c3 0107 	rsb	r1, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002530:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002532:	2904      	cmp	r1, #4
 8002534:	bf28      	it	cs
 8002536:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002538:	2a06      	cmp	r2, #6
 800253a:	d917      	bls.n	800256c <HAL_NVIC_SetPriority+0x58>
 800253c:	3b03      	subs	r3, #3
 800253e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002542:	409a      	lsls	r2, r3
 8002544:	ea26 0602 	bic.w	r6, r6, r2

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 800254c:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254e:	fa02 f201 	lsl.w	r2, r2, r1
 8002552:	ea24 0202 	bic.w	r2, r4, r2
 8002556:	fa02 f203 	lsl.w	r2, r2, r3
 800255a:	ea42 0206 	orr.w	r2, r2, r6
 800255e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8002562:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8002564:	db05      	blt.n	8002572 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_NVIC_SetPriority+0x80>)
 8002568:	555a      	strb	r2, [r3, r5]

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800256a:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256c:	2600      	movs	r6, #0
 800256e:	4633      	mov	r3, r6
 8002570:	e7ea      	b.n	8002548 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002572:	f005 050f 	and.w	r5, r5, #15
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <HAL_NVIC_SetPriority+0x84>)
 8002578:	555a      	strb	r2, [r3, r5]
 800257a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800257c:	21ab      	movs	r1, #171	; 0xab
 800257e:	4807      	ldr	r0, [pc, #28]	; (800259c <HAL_NVIC_SetPriority+0x88>)
 8002580:	f011 fb5c 	bl	8013c3c <assert_failed>
 8002584:	e7ce      	b.n	8002524 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002586:	21aa      	movs	r1, #170	; 0xaa
 8002588:	4804      	ldr	r0, [pc, #16]	; (800259c <HAL_NVIC_SetPriority+0x88>)
 800258a:	f011 fb57 	bl	8013c3c <assert_failed>
 800258e:	e7c7      	b.n	8002520 <HAL_NVIC_SetPriority+0xc>
 8002590:	e000ed00 	.word	0xe000ed00
 8002594:	e000e400 	.word	0xe000e400
 8002598:	e000ed14 	.word	0xe000ed14
 800259c:	0802a1fc 	.word	0x0802a1fc

080025a0 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80025a0:	2800      	cmp	r0, #0
 80025a2:	db08      	blt.n	80025b6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a4:	f000 011f 	and.w	r1, r0, #31
 80025a8:	2301      	movs	r3, #1
 80025aa:	0940      	lsrs	r0, r0, #5
 80025ac:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <HAL_NVIC_EnableIRQ+0x20>)
 80025ae:	408b      	lsls	r3, r1
 80025b0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80025b4:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80025b6:	21be      	movs	r1, #190	; 0xbe
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <HAL_NVIC_EnableIRQ+0x24>)
 80025ba:	f011 bb3f 	b.w	8013c3c <assert_failed>
 80025be:	bf00      	nop
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	0802a1fc 	.word	0x0802a1fc

080025c8 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80025c8:	2800      	cmp	r0, #0
 80025ca:	db0e      	blt.n	80025ea <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025cc:	0943      	lsrs	r3, r0, #5
 80025ce:	2201      	movs	r2, #1
 80025d0:	f000 001f 	and.w	r0, r0, #31
 80025d4:	4907      	ldr	r1, [pc, #28]	; (80025f4 <HAL_NVIC_DisableIRQ+0x2c>)
 80025d6:	3320      	adds	r3, #32
 80025d8:	fa02 f000 	lsl.w	r0, r2, r0
 80025dc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80025e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025e4:	f3bf 8f6f 	isb	sy

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80025e8:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80025ea:	21ce      	movs	r1, #206	; 0xce
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <HAL_NVIC_DisableIRQ+0x30>)
 80025ee:	f011 bb25 	b.w	8013c3c <assert_failed>
 80025f2:	bf00      	nop
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	0802a1fc 	.word	0x0802a1fc

080025fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025fc:	3801      	subs	r0, #1
 80025fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002602:	d20d      	bcs.n	8002620 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002606:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002608:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800260a:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260c:	25f0      	movs	r5, #240	; 0xf0
 800260e:	4c06      	ldr	r4, [pc, #24]	; (8002628 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002610:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002612:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800261c:	bc30      	pop	{r4, r5}
 800261e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002620:	2001      	movs	r0, #1
 8002622:	4770      	bx	lr
 8002624:	e000e010 	.word	0xe000e010
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800262c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002632:	2000      	movs	r0, #0
 8002634:	4904      	ldr	r1, [pc, #16]	; (8002648 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002636:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263c:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 800263e:	6048      	str	r0, [r1, #4]
}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000ed00 	.word	0xe000ed00
 8002648:	e000ed90 	.word	0xe000ed90

0800264c <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800264e:	f040 0001 	orr.w	r0, r0, #1
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_MPU_Enable+0x20>)
 8002654:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002656:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800265e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002662:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00
 800266c:	e000ed90 	.word	0xe000ed90

08002670 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002670:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8002672:	7843      	ldrb	r3, [r0, #1]
{
 8002674:	4604      	mov	r4, r0
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8002676:	2b0f      	cmp	r3, #15
 8002678:	d86f      	bhi.n	800275a <HAL_MPU_ConfigRegion+0xea>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 800267a:	7823      	ldrb	r3, [r4, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d904      	bls.n	800268a <HAL_MPU_ConfigRegion+0x1a>
 8002680:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8002684:	4849      	ldr	r0, [pc, #292]	; (80027ac <HAL_MPU_ConfigRegion+0x13c>)
 8002686:	f011 fad9 	bl	8013c3c <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800268a:	7862      	ldrb	r2, [r4, #1]
 800268c:	4b48      	ldr	r3, [pc, #288]	; (80027b0 <HAL_MPU_ConfigRegion+0x140>)
 800268e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002690:	7822      	ldrb	r2, [r4, #0]
 8002692:	2a00      	cmp	r2, #0
 8002694:	d039      	beq.n	800270a <HAL_MPU_ConfigRegion+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 8002696:	7b23      	ldrb	r3, [r4, #12]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d839      	bhi.n	8002710 <HAL_MPU_ConfigRegion+0xa0>
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 800269c:	7ae3      	ldrb	r3, [r4, #11]
 800269e:	1f5a      	subs	r2, r3, #5
 80026a0:	2a01      	cmp	r2, #1
 80026a2:	d901      	bls.n	80026a8 <HAL_MPU_ConfigRegion+0x38>
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d86d      	bhi.n	8002784 <HAL_MPU_ConfigRegion+0x114>
    assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 80026a8:	7aa3      	ldrb	r3, [r4, #10]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d861      	bhi.n	8002772 <HAL_MPU_ConfigRegion+0x102>
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 80026ae:	7b63      	ldrb	r3, [r4, #13]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d849      	bhi.n	8002748 <HAL_MPU_ConfigRegion+0xd8>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 80026b4:	7ba3      	ldrb	r3, [r4, #14]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d83d      	bhi.n	8002736 <HAL_MPU_ConfigRegion+0xc6>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 80026ba:	7be3      	ldrb	r3, [r4, #15]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d831      	bhi.n	8002724 <HAL_MPU_ConfigRegion+0xb4>
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 80026c0:	7a63      	ldrb	r3, [r4, #9]
 80026c2:	2bff      	cmp	r3, #255	; 0xff
 80026c4:	d067      	beq.n	8002796 <HAL_MPU_ConfigRegion+0x126>
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 80026c6:	7a23      	ldrb	r3, [r4, #8]
 80026c8:	3b04      	subs	r3, #4
 80026ca:	2b1b      	cmp	r3, #27
 80026cc:	d84b      	bhi.n	8002766 <HAL_MPU_ConfigRegion+0xf6>

    MPU->RBAR = MPU_Init->BaseAddress;
 80026ce:	6863      	ldr	r3, [r4, #4]
 80026d0:	4a37      	ldr	r2, [pc, #220]	; (80027b0 <HAL_MPU_ConfigRegion+0x140>)
 80026d2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026d4:	7ae3      	ldrb	r3, [r4, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026d6:	7b21      	ldrb	r1, [r4, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026d8:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80026da:	7825      	ldrb	r5, [r4, #0]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80026dc:	7aa0      	ldrb	r0, [r4, #10]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026de:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80026e2:	7b61      	ldrb	r1, [r4, #13]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80026e4:	7ba6      	ldrb	r6, [r4, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026e6:	432b      	orrs	r3, r5
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80026e8:	7be5      	ldrb	r5, [r4, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026ea:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80026ee:	7a60      	ldrb	r0, [r4, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026f0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80026f4:	7a21      	ldrb	r1, [r4, #8]
 80026f6:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80026fa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80026fe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002702:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002706:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002708:	bd70      	pop	{r4, r5, r6, pc}
    MPU->RBAR = 0x00;
 800270a:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800270c:	611a      	str	r2, [r3, #16]
}
 800270e:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 8002710:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002714:	4825      	ldr	r0, [pc, #148]	; (80027ac <HAL_MPU_ConfigRegion+0x13c>)
 8002716:	f011 fa91 	bl	8013c3c <assert_failed>
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 800271a:	7ae3      	ldrb	r3, [r4, #11]
 800271c:	1f5a      	subs	r2, r3, #5
 800271e:	2a01      	cmp	r2, #1
 8002720:	d8c0      	bhi.n	80026a4 <HAL_MPU_ConfigRegion+0x34>
 8002722:	e7c1      	b.n	80026a8 <HAL_MPU_ConfigRegion+0x38>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 8002724:	f240 113b 	movw	r1, #315	; 0x13b
 8002728:	4820      	ldr	r0, [pc, #128]	; (80027ac <HAL_MPU_ConfigRegion+0x13c>)
 800272a:	f011 fa87 	bl	8013c3c <assert_failed>
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 800272e:	7a63      	ldrb	r3, [r4, #9]
 8002730:	2bff      	cmp	r3, #255	; 0xff
 8002732:	d1c8      	bne.n	80026c6 <HAL_MPU_ConfigRegion+0x56>
 8002734:	e02f      	b.n	8002796 <HAL_MPU_ConfigRegion+0x126>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8002736:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800273a:	481c      	ldr	r0, [pc, #112]	; (80027ac <HAL_MPU_ConfigRegion+0x13c>)
 800273c:	f011 fa7e 	bl	8013c3c <assert_failed>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 8002740:	7be3      	ldrb	r3, [r4, #15]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d9bc      	bls.n	80026c0 <HAL_MPU_ConfigRegion+0x50>
 8002746:	e7ed      	b.n	8002724 <HAL_MPU_ConfigRegion+0xb4>
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 8002748:	f240 1139 	movw	r1, #313	; 0x139
 800274c:	4817      	ldr	r0, [pc, #92]	; (80027ac <HAL_MPU_ConfigRegion+0x13c>)
 800274e:	f011 fa75 	bl	8013c3c <assert_failed>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8002752:	7ba3      	ldrb	r3, [r4, #14]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d9b0      	bls.n	80026ba <HAL_MPU_ConfigRegion+0x4a>
 8002758:	e7ed      	b.n	8002736 <HAL_MPU_ConfigRegion+0xc6>
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 800275a:	f240 112d 	movw	r1, #301	; 0x12d
 800275e:	4813      	ldr	r0, [pc, #76]	; (80027ac <HAL_MPU_ConfigRegion+0x13c>)
 8002760:	f011 fa6c 	bl	8013c3c <assert_failed>
 8002764:	e789      	b.n	800267a <HAL_MPU_ConfigRegion+0xa>
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 8002766:	f240 113d 	movw	r1, #317	; 0x13d
 800276a:	4810      	ldr	r0, [pc, #64]	; (80027ac <HAL_MPU_ConfigRegion+0x13c>)
 800276c:	f011 fa66 	bl	8013c3c <assert_failed>
 8002770:	e7ad      	b.n	80026ce <HAL_MPU_ConfigRegion+0x5e>
    assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 8002772:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002776:	480d      	ldr	r0, [pc, #52]	; (80027ac <HAL_MPU_ConfigRegion+0x13c>)
 8002778:	f011 fa60 	bl	8013c3c <assert_failed>
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 800277c:	7b63      	ldrb	r3, [r4, #13]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d998      	bls.n	80026b4 <HAL_MPU_ConfigRegion+0x44>
 8002782:	e7e1      	b.n	8002748 <HAL_MPU_ConfigRegion+0xd8>
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 8002784:	f240 1137 	movw	r1, #311	; 0x137
 8002788:	4808      	ldr	r0, [pc, #32]	; (80027ac <HAL_MPU_ConfigRegion+0x13c>)
 800278a:	f011 fa57 	bl	8013c3c <assert_failed>
    assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 800278e:	7aa3      	ldrb	r3, [r4, #10]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d98c      	bls.n	80026ae <HAL_MPU_ConfigRegion+0x3e>
 8002794:	e7ed      	b.n	8002772 <HAL_MPU_ConfigRegion+0x102>
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 8002796:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800279a:	4804      	ldr	r0, [pc, #16]	; (80027ac <HAL_MPU_ConfigRegion+0x13c>)
 800279c:	f011 fa4e 	bl	8013c3c <assert_failed>
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 80027a0:	7a23      	ldrb	r3, [r4, #8]
 80027a2:	3b04      	subs	r3, #4
 80027a4:	2b1b      	cmp	r3, #27
 80027a6:	d992      	bls.n	80026ce <HAL_MPU_ConfigRegion+0x5e>
 80027a8:	e7dd      	b.n	8002766 <HAL_MPU_ConfigRegion+0xf6>
 80027aa:	bf00      	nop
 80027ac:	0802a1fc 	.word	0x0802a1fc
 80027b0:	e000ed90 	.word	0xe000ed90

080027b4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027b4:	4b35      	ldr	r3, [pc, #212]	; (800288c <DMA_CalcBaseAndBitshift+0xd8>)
{
 80027b6:	4601      	mov	r1, r0
 80027b8:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027ba:	4c35      	ldr	r4, [pc, #212]	; (8002890 <DMA_CalcBaseAndBitshift+0xdc>)
 80027bc:	6802      	ldr	r2, [r0, #0]
 80027be:	4835      	ldr	r0, [pc, #212]	; (8002894 <DMA_CalcBaseAndBitshift+0xe0>)
 80027c0:	42a2      	cmp	r2, r4
 80027c2:	bf18      	it	ne
 80027c4:	429a      	cmpne	r2, r3
 80027c6:	4d34      	ldr	r5, [pc, #208]	; (8002898 <DMA_CalcBaseAndBitshift+0xe4>)
 80027c8:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	4282      	cmp	r2, r0
 80027d4:	bf08      	it	eq
 80027d6:	f043 0301 	orreq.w	r3, r3, #1
 80027da:	3048      	adds	r0, #72	; 0x48
 80027dc:	42aa      	cmp	r2, r5
 80027de:	bf08      	it	eq
 80027e0:	f043 0301 	orreq.w	r3, r3, #1
 80027e4:	3548      	adds	r5, #72	; 0x48
 80027e6:	42a2      	cmp	r2, r4
 80027e8:	bf08      	it	eq
 80027ea:	f043 0301 	orreq.w	r3, r3, #1
 80027ee:	3448      	adds	r4, #72	; 0x48
 80027f0:	4282      	cmp	r2, r0
 80027f2:	bf08      	it	eq
 80027f4:	f043 0301 	orreq.w	r3, r3, #1
 80027f8:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80027fc:	42aa      	cmp	r2, r5
 80027fe:	bf08      	it	eq
 8002800:	f043 0301 	orreq.w	r3, r3, #1
 8002804:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8002808:	42a2      	cmp	r2, r4
 800280a:	bf08      	it	eq
 800280c:	f043 0301 	orreq.w	r3, r3, #1
 8002810:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8002814:	4282      	cmp	r2, r0
 8002816:	bf08      	it	eq
 8002818:	f043 0301 	orreq.w	r3, r3, #1
 800281c:	3048      	adds	r0, #72	; 0x48
 800281e:	42aa      	cmp	r2, r5
 8002820:	bf08      	it	eq
 8002822:	f043 0301 	orreq.w	r3, r3, #1
 8002826:	3548      	adds	r5, #72	; 0x48
 8002828:	42a2      	cmp	r2, r4
 800282a:	bf08      	it	eq
 800282c:	f043 0301 	orreq.w	r3, r3, #1
 8002830:	3448      	adds	r4, #72	; 0x48
 8002832:	4282      	cmp	r2, r0
 8002834:	bf08      	it	eq
 8002836:	f043 0301 	orreq.w	r3, r3, #1
 800283a:	3048      	adds	r0, #72	; 0x48
 800283c:	42aa      	cmp	r2, r5
 800283e:	bf08      	it	eq
 8002840:	f043 0301 	orreq.w	r3, r3, #1
 8002844:	42a2      	cmp	r2, r4
 8002846:	bf08      	it	eq
 8002848:	f043 0301 	orreq.w	r3, r3, #1
 800284c:	4282      	cmp	r2, r0
 800284e:	bf08      	it	eq
 8002850:	f043 0301 	orreq.w	r3, r3, #1
 8002854:	b913      	cbnz	r3, 800285c <DMA_CalcBaseAndBitshift+0xa8>
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <DMA_CalcBaseAndBitshift+0xe8>)
 8002858:	429a      	cmp	r2, r3
 800285a:	d112      	bne.n	8002882 <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800285c:	b2d3      	uxtb	r3, r2
 800285e:	4d10      	ldr	r5, [pc, #64]	; (80028a0 <DMA_CalcBaseAndBitshift+0xec>)
 8002860:	4810      	ldr	r0, [pc, #64]	; (80028a4 <DMA_CalcBaseAndBitshift+0xf0>)
 8002862:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002864:	4c10      	ldr	r4, [pc, #64]	; (80028a8 <DMA_CalcBaseAndBitshift+0xf4>)
 8002866:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002868:	fba5 5303 	umull	r5, r3, r5, r3
 800286c:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800286e:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 8002872:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002874:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002876:	bf88      	it	hi
 8002878:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800287a:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800287c:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800287e:	bc30      	pop	{r4, r5}
 8002880:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002882:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8002886:	6588      	str	r0, [r1, #88]	; 0x58
 8002888:	e7f9      	b.n	800287e <DMA_CalcBaseAndBitshift+0xca>
 800288a:	bf00      	nop
 800288c:	40020010 	.word	0x40020010
 8002890:	40020028 	.word	0x40020028
 8002894:	40020040 	.word	0x40020040
 8002898:	40020058 	.word	0x40020058
 800289c:	400204b8 	.word	0x400204b8
 80028a0:	aaaaaaab 	.word	0xaaaaaaab
 80028a4:	fffffc00 	.word	0xfffffc00
 80028a8:	0802a270 	.word	0x0802a270

080028ac <HAL_DMA_Init>:
{
 80028ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b0:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80028b2:	f7fe f9c7 	bl	8000c44 <HAL_GetTick>
  if(hdma == NULL)
 80028b6:	2d00      	cmp	r5, #0
 80028b8:	f000 82ba 	beq.w	8002e30 <HAL_DMA_Init+0x584>
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80028bc:	682a      	ldr	r2, [r5, #0]
 80028be:	4604      	mov	r4, r0
 80028c0:	4b9e      	ldr	r3, [pc, #632]	; (8002b3c <HAL_DMA_Init+0x290>)
 80028c2:	489f      	ldr	r0, [pc, #636]	; (8002b40 <HAL_DMA_Init+0x294>)
 80028c4:	499f      	ldr	r1, [pc, #636]	; (8002b44 <HAL_DMA_Init+0x298>)
 80028c6:	429a      	cmp	r2, r3
 80028c8:	bf18      	it	ne
 80028ca:	4282      	cmpne	r2, r0
 80028cc:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80028d0:	bf14      	ite	ne
 80028d2:	2301      	movne	r3, #1
 80028d4:	2300      	moveq	r3, #0
 80028d6:	428a      	cmp	r2, r1
 80028d8:	bf0c      	ite	eq
 80028da:	2300      	moveq	r3, #0
 80028dc:	f003 0301 	andne.w	r3, r3, #1
 80028e0:	3130      	adds	r1, #48	; 0x30
 80028e2:	4282      	cmp	r2, r0
 80028e4:	bf0c      	ite	eq
 80028e6:	2300      	moveq	r3, #0
 80028e8:	f003 0301 	andne.w	r3, r3, #1
 80028ec:	3030      	adds	r0, #48	; 0x30
 80028ee:	428a      	cmp	r2, r1
 80028f0:	bf0c      	ite	eq
 80028f2:	2300      	moveq	r3, #0
 80028f4:	f003 0301 	andne.w	r3, r3, #1
 80028f8:	3130      	adds	r1, #48	; 0x30
 80028fa:	4282      	cmp	r2, r0
 80028fc:	bf0c      	ite	eq
 80028fe:	2300      	moveq	r3, #0
 8002900:	f003 0301 	andne.w	r3, r3, #1
 8002904:	3030      	adds	r0, #48	; 0x30
 8002906:	428a      	cmp	r2, r1
 8002908:	bf0c      	ite	eq
 800290a:	2300      	moveq	r3, #0
 800290c:	f003 0301 	andne.w	r3, r3, #1
 8002910:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8002914:	4282      	cmp	r2, r0
 8002916:	bf0c      	ite	eq
 8002918:	2300      	moveq	r3, #0
 800291a:	f003 0301 	andne.w	r3, r3, #1
 800291e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8002922:	428a      	cmp	r2, r1
 8002924:	bf0c      	ite	eq
 8002926:	2300      	moveq	r3, #0
 8002928:	f003 0301 	andne.w	r3, r3, #1
 800292c:	3130      	adds	r1, #48	; 0x30
 800292e:	4282      	cmp	r2, r0
 8002930:	bf0c      	ite	eq
 8002932:	2300      	moveq	r3, #0
 8002934:	f003 0301 	andne.w	r3, r3, #1
 8002938:	3030      	adds	r0, #48	; 0x30
 800293a:	428a      	cmp	r2, r1
 800293c:	bf0c      	ite	eq
 800293e:	2300      	moveq	r3, #0
 8002940:	f003 0301 	andne.w	r3, r3, #1
 8002944:	3130      	adds	r1, #48	; 0x30
 8002946:	4282      	cmp	r2, r0
 8002948:	bf0c      	ite	eq
 800294a:	2300      	moveq	r3, #0
 800294c:	f003 0301 	andne.w	r3, r3, #1
 8002950:	3030      	adds	r0, #48	; 0x30
 8002952:	428a      	cmp	r2, r1
 8002954:	bf0c      	ite	eq
 8002956:	2300      	moveq	r3, #0
 8002958:	f003 0301 	andne.w	r3, r3, #1
 800295c:	3130      	adds	r1, #48	; 0x30
 800295e:	4282      	cmp	r2, r0
 8002960:	bf0c      	ite	eq
 8002962:	2300      	moveq	r3, #0
 8002964:	f003 0301 	andne.w	r3, r3, #1
 8002968:	3030      	adds	r0, #48	; 0x30
 800296a:	428a      	cmp	r2, r1
 800296c:	bf0c      	ite	eq
 800296e:	2300      	moveq	r3, #0
 8002970:	f003 0301 	andne.w	r3, r3, #1
 8002974:	4974      	ldr	r1, [pc, #464]	; (8002b48 <HAL_DMA_Init+0x29c>)
 8002976:	4282      	cmp	r2, r0
 8002978:	bf0c      	ite	eq
 800297a:	2300      	moveq	r3, #0
 800297c:	f003 0301 	andne.w	r3, r3, #1
 8002980:	4872      	ldr	r0, [pc, #456]	; (8002b4c <HAL_DMA_Init+0x2a0>)
 8002982:	428a      	cmp	r2, r1
 8002984:	bf0c      	ite	eq
 8002986:	2300      	moveq	r3, #0
 8002988:	f003 0301 	andne.w	r3, r3, #1
 800298c:	3128      	adds	r1, #40	; 0x28
 800298e:	4282      	cmp	r2, r0
 8002990:	bf0c      	ite	eq
 8002992:	2300      	moveq	r3, #0
 8002994:	f003 0301 	andne.w	r3, r3, #1
 8002998:	3028      	adds	r0, #40	; 0x28
 800299a:	428a      	cmp	r2, r1
 800299c:	bf0c      	ite	eq
 800299e:	2300      	moveq	r3, #0
 80029a0:	f003 0301 	andne.w	r3, r3, #1
 80029a4:	3128      	adds	r1, #40	; 0x28
 80029a6:	4282      	cmp	r2, r0
 80029a8:	bf0c      	ite	eq
 80029aa:	2300      	moveq	r3, #0
 80029ac:	f003 0301 	andne.w	r3, r3, #1
 80029b0:	3028      	adds	r0, #40	; 0x28
 80029b2:	428a      	cmp	r2, r1
 80029b4:	bf0c      	ite	eq
 80029b6:	2300      	moveq	r3, #0
 80029b8:	f003 0301 	andne.w	r3, r3, #1
 80029bc:	3128      	adds	r1, #40	; 0x28
 80029be:	4282      	cmp	r2, r0
 80029c0:	bf0c      	ite	eq
 80029c2:	2300      	moveq	r3, #0
 80029c4:	f003 0301 	andne.w	r3, r3, #1
 80029c8:	428a      	cmp	r2, r1
 80029ca:	bf0c      	ite	eq
 80029cc:	2300      	moveq	r3, #0
 80029ce:	f003 0301 	andne.w	r3, r3, #1
 80029d2:	b11b      	cbz	r3, 80029dc <HAL_DMA_Init+0x130>
 80029d4:	4b5e      	ldr	r3, [pc, #376]	; (8002b50 <HAL_DMA_Init+0x2a4>)
 80029d6:	429a      	cmp	r2, r3
 80029d8:	f040 836b 	bne.w	80030b2 <HAL_DMA_Init+0x806>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80029dc:	68ab      	ldr	r3, [r5, #8]
 80029de:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 80029e2:	d002      	beq.n	80029ea <HAL_DMA_Init+0x13e>
 80029e4:	2b80      	cmp	r3, #128	; 0x80
 80029e6:	f040 8226 	bne.w	8002e36 <HAL_DMA_Init+0x58a>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80029ea:	68eb      	ldr	r3, [r5, #12]
 80029ec:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80029f0:	f040 8114 	bne.w	8002c1c <HAL_DMA_Init+0x370>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80029f4:	692b      	ldr	r3, [r5, #16]
 80029f6:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80029fa:	f040 8105 	bne.w	8002c08 <HAL_DMA_Init+0x35c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80029fe:	696b      	ldr	r3, [r5, #20]
 8002a00:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8002a04:	d003      	beq.n	8002a0e <HAL_DMA_Init+0x162>
 8002a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0a:	f040 821e 	bne.w	8002e4a <HAL_DMA_Init+0x59e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002a0e:	69ab      	ldr	r3, [r5, #24]
 8002a10:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8002a14:	d003      	beq.n	8002a1e <HAL_DMA_Init+0x172>
 8002a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a1a:	f040 8220 	bne.w	8002e5e <HAL_DMA_Init+0x5b2>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002a1e:	69ea      	ldr	r2, [r5, #28]
 8002a20:	f032 0320 	bics.w	r3, r2, #32
 8002a24:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8002a28:	bf14      	ite	ne
 8002a2a:	2301      	movne	r3, #1
 8002a2c:	2300      	moveq	r3, #0
 8002a2e:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8002a32:	bf0c      	ite	eq
 8002a34:	2300      	moveq	r3, #0
 8002a36:	f003 0301 	andne.w	r3, r3, #1
 8002a3a:	b11b      	cbz	r3, 8002a44 <HAL_DMA_Init+0x198>
 8002a3c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002a40:	f040 8212 	bne.w	8002e68 <HAL_DMA_Init+0x5bc>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002a44:	6a2b      	ldr	r3, [r5, #32]
 8002a46:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8002a4a:	f040 824e 	bne.w	8002eea <HAL_DMA_Init+0x63e>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a4e:	682a      	ldr	r2, [r5, #0]
 8002a50:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <HAL_DMA_Init+0x290>)
 8002a52:	483b      	ldr	r0, [pc, #236]	; (8002b40 <HAL_DMA_Init+0x294>)
 8002a54:	493b      	ldr	r1, [pc, #236]	; (8002b44 <HAL_DMA_Init+0x298>)
 8002a56:	4282      	cmp	r2, r0
 8002a58:	bf18      	it	ne
 8002a5a:	429a      	cmpne	r2, r3
 8002a5c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8002a60:	bf0c      	ite	eq
 8002a62:	2301      	moveq	r3, #1
 8002a64:	2300      	movne	r3, #0
 8002a66:	428a      	cmp	r2, r1
 8002a68:	bf08      	it	eq
 8002a6a:	f043 0301 	orreq.w	r3, r3, #1
 8002a6e:	3130      	adds	r1, #48	; 0x30
 8002a70:	4282      	cmp	r2, r0
 8002a72:	bf08      	it	eq
 8002a74:	f043 0301 	orreq.w	r3, r3, #1
 8002a78:	3030      	adds	r0, #48	; 0x30
 8002a7a:	428a      	cmp	r2, r1
 8002a7c:	bf08      	it	eq
 8002a7e:	f043 0301 	orreq.w	r3, r3, #1
 8002a82:	3130      	adds	r1, #48	; 0x30
 8002a84:	4282      	cmp	r2, r0
 8002a86:	bf08      	it	eq
 8002a88:	f043 0301 	orreq.w	r3, r3, #1
 8002a8c:	3030      	adds	r0, #48	; 0x30
 8002a8e:	428a      	cmp	r2, r1
 8002a90:	bf08      	it	eq
 8002a92:	f043 0301 	orreq.w	r3, r3, #1
 8002a96:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8002a9a:	4282      	cmp	r2, r0
 8002a9c:	bf08      	it	eq
 8002a9e:	f043 0301 	orreq.w	r3, r3, #1
 8002aa2:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8002aa6:	428a      	cmp	r2, r1
 8002aa8:	bf08      	it	eq
 8002aaa:	f043 0301 	orreq.w	r3, r3, #1
 8002aae:	3130      	adds	r1, #48	; 0x30
 8002ab0:	4282      	cmp	r2, r0
 8002ab2:	bf08      	it	eq
 8002ab4:	f043 0301 	orreq.w	r3, r3, #1
 8002ab8:	3030      	adds	r0, #48	; 0x30
 8002aba:	428a      	cmp	r2, r1
 8002abc:	bf08      	it	eq
 8002abe:	f043 0301 	orreq.w	r3, r3, #1
 8002ac2:	3130      	adds	r1, #48	; 0x30
 8002ac4:	4282      	cmp	r2, r0
 8002ac6:	bf08      	it	eq
 8002ac8:	f043 0301 	orreq.w	r3, r3, #1
 8002acc:	3030      	adds	r0, #48	; 0x30
 8002ace:	428a      	cmp	r2, r1
 8002ad0:	bf08      	it	eq
 8002ad2:	f043 0301 	orreq.w	r3, r3, #1
 8002ad6:	3130      	adds	r1, #48	; 0x30
 8002ad8:	4282      	cmp	r2, r0
 8002ada:	bf08      	it	eq
 8002adc:	f043 0301 	orreq.w	r3, r3, #1
 8002ae0:	428a      	cmp	r2, r1
 8002ae2:	bf08      	it	eq
 8002ae4:	f043 0301 	orreq.w	r3, r3, #1
 8002ae8:	b91b      	cbnz	r3, 8002af2 <HAL_DMA_Init+0x246>
 8002aea:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_DMA_Init+0x2a8>)
 8002aec:	429a      	cmp	r2, r3
 8002aee:	f040 8259 	bne.w	8002fa4 <HAL_DMA_Init+0x6f8>
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 8002af2:	686b      	ldr	r3, [r5, #4]
 8002af4:	2b73      	cmp	r3, #115	; 0x73
 8002af6:	f200 809b 	bhi.w	8002c30 <HAL_DMA_Init+0x384>
    assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002afa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002afc:	f033 0204 	bics.w	r2, r3, #4
 8002b00:	f040 809f 	bne.w	8002c42 <HAL_DMA_Init+0x396>
    if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002b04:	b16b      	cbz	r3, 8002b22 <HAL_DMA_Init+0x276>
      assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002b06:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	f200 81e9 	bhi.w	8002ee0 <HAL_DMA_Init+0x634>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002b0e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002b10:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8002b14:	f040 822a 	bne.w	8002f6c <HAL_DMA_Init+0x6c0>
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8002b18:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002b1a:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8002b1e:	f040 81a8 	bne.w	8002e72 <HAL_DMA_Init+0x5c6>
    __HAL_UNLOCK(hdma);
 8002b22:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002b24:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 8002b26:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b2a:	2002      	movs	r0, #2
 8002b2c:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002b30:	6813      	ldr	r3, [r2, #0]
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e014      	b.n	8002b64 <HAL_DMA_Init+0x2b8>
 8002b3a:	bf00      	nop
 8002b3c:	40020010 	.word	0x40020010
 8002b40:	40020028 	.word	0x40020028
 8002b44:	40020040 	.word	0x40020040
 8002b48:	58025408 	.word	0x58025408
 8002b4c:	5802541c 	.word	0x5802541c
 8002b50:	58025494 	.word	0x58025494
 8002b54:	400204b8 	.word	0x400204b8
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b58:	f7fe f874 	bl	8000c44 <HAL_GetTick>
 8002b5c:	1b00      	subs	r0, r0, r4
 8002b5e:	2805      	cmp	r0, #5
 8002b60:	f200 815e 	bhi.w	8002e20 <HAL_DMA_Init+0x574>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b64:	682b      	ldr	r3, [r5, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	07d0      	lsls	r0, r2, #31
 8002b6a:	d4f5      	bmi.n	8002b58 <HAL_DMA_Init+0x2ac>
    registerValue |=  hdma->Init.Direction           |
 8002b6c:	e9d5 2002 	ldrd	r2, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b70:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8002b72:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b74:	e9d5 4005 	ldrd	r4, r0, [r5, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b78:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7a:	69e9      	ldr	r1, [r5, #28]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7c:	4322      	orrs	r2, r4
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b7e:	6a2c      	ldr	r4, [r5, #32]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b80:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002b82:	6818      	ldr	r0, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b84:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b86:	49bd      	ldr	r1, [pc, #756]	; (8002e7c <HAL_DMA_Init+0x5d0>)
 8002b88:	4001      	ands	r1, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b8a:	6a68      	ldr	r0, [r5, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b8c:	4322      	orrs	r2, r4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b8e:	2804      	cmp	r0, #4
    registerValue |=  hdma->Init.Direction           |
 8002b90:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b94:	d103      	bne.n	8002b9e <HAL_DMA_Init+0x2f2>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b96:	e9d5 100b 	ldrd	r1, r0, [r5, #44]	; 0x2c
 8002b9a:	4301      	orrs	r1, r0
 8002b9c:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002b9e:	48b8      	ldr	r0, [pc, #736]	; (8002e80 <HAL_DMA_Init+0x5d4>)
 8002ba0:	49b8      	ldr	r1, [pc, #736]	; (8002e84 <HAL_DMA_Init+0x5d8>)
 8002ba2:	6800      	ldr	r0, [r0, #0]
 8002ba4:	4001      	ands	r1, r0
 8002ba6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002baa:	d30a      	bcc.n	8002bc2 <HAL_DMA_Init+0x316>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002bac:	6868      	ldr	r0, [r5, #4]
 8002bae:	f1a0 0429 	sub.w	r4, r0, #41	; 0x29
 8002bb2:	2c1f      	cmp	r4, #31
 8002bb4:	f240 818c 	bls.w	8002ed0 <HAL_DMA_Init+0x624>
 8002bb8:	384f      	subs	r0, #79	; 0x4f
 8002bba:	2803      	cmp	r0, #3
 8002bbc:	d801      	bhi.n	8002bc2 <HAL_DMA_Init+0x316>
        registerValue |= DMA_SxCR_TRBUFF;
 8002bbe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002bc2:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002bc4:	6829      	ldr	r1, [r5, #0]
    registerValue |= hdma->Init.FIFOMode;
 8002bc6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002bc8:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bca:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bcc:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002bd0:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bd4:	d144      	bne.n	8002c60 <HAL_DMA_Init+0x3b4>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bd6:	e9d5 200a 	ldrd	r2, r0, [r5, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 8002bda:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d03f      	beq.n	8002c60 <HAL_DMA_Init+0x3b4>
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002be0:	69ac      	ldr	r4, [r5, #24]
 8002be2:	2c00      	cmp	r4, #0
 8002be4:	d036      	beq.n	8002c54 <HAL_DMA_Init+0x3a8>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002be6:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8002bea:	f000 823e 	beq.w	800306a <HAL_DMA_Init+0x7be>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002bee:	2a02      	cmp	r2, #2
 8002bf0:	d903      	bls.n	8002bfa <HAL_DMA_Init+0x34e>
 8002bf2:	2a03      	cmp	r2, #3
 8002bf4:	d134      	bne.n	8002c60 <HAL_DMA_Init+0x3b4>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf6:	01c2      	lsls	r2, r0, #7
 8002bf8:	d532      	bpl.n	8002c60 <HAL_DMA_Init+0x3b4>
          hdma->State = HAL_DMA_STATE_READY;
 8002bfa:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bfc:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8002bfe:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c00:	656a      	str	r2, [r5, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002c02:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
          return HAL_ERROR;
 8002c06:	e109      	b.n	8002e1c <HAL_DMA_Init+0x570>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002c08:	21e4      	movs	r1, #228	; 0xe4
 8002c0a:	489f      	ldr	r0, [pc, #636]	; (8002e88 <HAL_DMA_Init+0x5dc>)
 8002c0c:	f011 f816 	bl	8013c3c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002c10:	696b      	ldr	r3, [r5, #20]
 8002c12:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8002c16:	f47f aef6 	bne.w	8002a06 <HAL_DMA_Init+0x15a>
 8002c1a:	e6f8      	b.n	8002a0e <HAL_DMA_Init+0x162>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002c1c:	21e3      	movs	r1, #227	; 0xe3
 8002c1e:	489a      	ldr	r0, [pc, #616]	; (8002e88 <HAL_DMA_Init+0x5dc>)
 8002c20:	f011 f80c 	bl	8013c3c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002c24:	692b      	ldr	r3, [r5, #16]
 8002c26:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8002c2a:	f43f aee8 	beq.w	80029fe <HAL_DMA_Init+0x152>
 8002c2e:	e7eb      	b.n	8002c08 <HAL_DMA_Init+0x35c>
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 8002c30:	21ec      	movs	r1, #236	; 0xec
 8002c32:	4895      	ldr	r0, [pc, #596]	; (8002e88 <HAL_DMA_Init+0x5dc>)
 8002c34:	f011 f802 	bl	8013c3c <assert_failed>
    assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002c38:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002c3a:	f033 0204 	bics.w	r2, r3, #4
 8002c3e:	f43f af61 	beq.w	8002b04 <HAL_DMA_Init+0x258>
 8002c42:	21ed      	movs	r1, #237	; 0xed
 8002c44:	4890      	ldr	r0, [pc, #576]	; (8002e88 <HAL_DMA_Init+0x5dc>)
 8002c46:	f010 fff9 	bl	8013c3c <assert_failed>
 8002c4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f43f af68 	beq.w	8002b22 <HAL_DMA_Init+0x276>
 8002c52:	e758      	b.n	8002b06 <HAL_DMA_Init+0x25a>
    switch (hdma->Init.FIFOThreshold)
 8002c54:	2a01      	cmp	r2, #1
 8002c56:	f000 8203 	beq.w	8003060 <HAL_DMA_Init+0x7b4>
 8002c5a:	d3cc      	bcc.n	8002bf6 <HAL_DMA_Init+0x34a>
 8002c5c:	2a02      	cmp	r2, #2
 8002c5e:	d0ca      	beq.n	8002bf6 <HAL_DMA_Init+0x34a>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002c60:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c62:	4628      	mov	r0, r5
 8002c64:	f7ff fda6 	bl	80027b4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c68:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002c6a:	233f      	movs	r3, #63	; 0x3f
 8002c6c:	f002 021f 	and.w	r2, r2, #31
 8002c70:	4093      	lsls	r3, r2
 8002c72:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c74:	682a      	ldr	r2, [r5, #0]
 8002c76:	4b85      	ldr	r3, [pc, #532]	; (8002e8c <HAL_DMA_Init+0x5e0>)
 8002c78:	4885      	ldr	r0, [pc, #532]	; (8002e90 <HAL_DMA_Init+0x5e4>)
 8002c7a:	4986      	ldr	r1, [pc, #536]	; (8002e94 <HAL_DMA_Init+0x5e8>)
 8002c7c:	4282      	cmp	r2, r0
 8002c7e:	bf18      	it	ne
 8002c80:	429a      	cmpne	r2, r3
 8002c82:	4e85      	ldr	r6, [pc, #532]	; (8002e98 <HAL_DMA_Init+0x5ec>)
 8002c84:	4c85      	ldr	r4, [pc, #532]	; (8002e9c <HAL_DMA_Init+0x5f0>)
 8002c86:	f100 0060 	add.w	r0, r0, #96	; 0x60
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	f8df e21c 	ldr.w	lr, [pc, #540]	; 8002eb0 <HAL_DMA_Init+0x604>
 8002c94:	428a      	cmp	r2, r1
 8002c96:	bf08      	it	eq
 8002c98:	f043 0301 	orreq.w	r3, r3, #1
 8002c9c:	3160      	adds	r1, #96	; 0x60
 8002c9e:	f8df c214 	ldr.w	ip, [pc, #532]	; 8002eb4 <HAL_DMA_Init+0x608>
 8002ca2:	42b2      	cmp	r2, r6
 8002ca4:	bf08      	it	eq
 8002ca6:	f043 0301 	orreq.w	r3, r3, #1
 8002caa:	4f7d      	ldr	r7, [pc, #500]	; (8002ea0 <HAL_DMA_Init+0x5f4>)
 8002cac:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8002cb0:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8002eb8 <HAL_DMA_Init+0x60c>
 8002cb4:	42a2      	cmp	r2, r4
 8002cb6:	bf08      	it	eq
 8002cb8:	f043 0301 	orreq.w	r3, r3, #1
 8002cbc:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
 8002cc0:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8002ebc <HAL_DMA_Init+0x610>
 8002cc4:	4282      	cmp	r2, r0
 8002cc6:	bf08      	it	eq
 8002cc8:	f043 0301 	orreq.w	r3, r3, #1
 8002ccc:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8002cd0:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8002ec0 <HAL_DMA_Init+0x614>
 8002cd4:	428a      	cmp	r2, r1
 8002cd6:	bf08      	it	eq
 8002cd8:	f043 0301 	orreq.w	r3, r3, #1
 8002cdc:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8002ce0:	4572      	cmp	r2, lr
 8002ce2:	bf08      	it	eq
 8002ce4:	f043 0301 	orreq.w	r3, r3, #1
 8002ce8:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 8002ec4 <HAL_DMA_Init+0x618>
 8002cec:	4562      	cmp	r2, ip
 8002cee:	bf08      	it	eq
 8002cf0:	f043 0301 	orreq.w	r3, r3, #1
 8002cf4:	eba2 0e0e 	sub.w	lr, r2, lr
 8002cf8:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 8002ec8 <HAL_DMA_Init+0x61c>
 8002cfc:	42ba      	cmp	r2, r7
 8002cfe:	bf08      	it	eq
 8002d00:	f043 0301 	orreq.w	r3, r3, #1
 8002d04:	fabe fe8e 	clz	lr, lr
 8002d08:	eba2 070c 	sub.w	r7, r2, ip
 8002d0c:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8002d10:	42b2      	cmp	r2, r6
 8002d12:	bf08      	it	eq
 8002d14:	f043 0301 	orreq.w	r3, r3, #1
 8002d18:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8002d1c:	eba2 060a 	sub.w	r6, r2, sl
 8002d20:	fab7 f787 	clz	r7, r7
 8002d24:	42a2      	cmp	r2, r4
 8002d26:	bf08      	it	eq
 8002d28:	f043 0301 	orreq.w	r3, r3, #1
 8002d2c:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8002d30:	eba2 040c 	sub.w	r4, r2, ip
 8002d34:	097f      	lsrs	r7, r7, #5
 8002d36:	4282      	cmp	r2, r0
 8002d38:	bf08      	it	eq
 8002d3a:	f043 0301 	orreq.w	r3, r3, #1
 8002d3e:	fab6 f686 	clz	r6, r6
 8002d42:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8002d46:	fab4 f484 	clz	r4, r4
 8002d4a:	428a      	cmp	r2, r1
 8002d4c:	bf08      	it	eq
 8002d4e:	f043 0301 	orreq.w	r3, r3, #1
 8002d52:	0976      	lsrs	r6, r6, #5
 8002d54:	eba2 000a 	sub.w	r0, r2, sl
 8002d58:	eba2 010c 	sub.w	r1, r2, ip
 8002d5c:	4542      	cmp	r2, r8
 8002d5e:	bf08      	it	eq
 8002d60:	f043 0301 	orreq.w	r3, r3, #1
 8002d64:	0964      	lsrs	r4, r4, #5
 8002d66:	fab0 f080 	clz	r0, r0
 8002d6a:	f10c 0c14 	add.w	ip, ip, #20
 8002d6e:	454a      	cmp	r2, r9
 8002d70:	bf08      	it	eq
 8002d72:	f043 0301 	orreq.w	r3, r3, #1
 8002d76:	fab1 f181 	clz	r1, r1
 8002d7a:	0940      	lsrs	r0, r0, #5
 8002d7c:	eba2 0c0c 	sub.w	ip, r2, ip
 8002d80:	ea4e 0303 	orr.w	r3, lr, r3
 8002d84:	0949      	lsrs	r1, r1, #5
 8002d86:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8002ecc <HAL_DMA_Init+0x620>
 8002d8a:	fabc fc8c 	clz	ip, ip
 8002d8e:	433b      	orrs	r3, r7
 8002d90:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002d94:	eba2 0808 	sub.w	r8, r2, r8
 8002d98:	4333      	orrs	r3, r6
 8002d9a:	fab8 f888 	clz	r8, r8
 8002d9e:	4323      	orrs	r3, r4
 8002da0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002da4:	4303      	orrs	r3, r0
 8002da6:	430b      	orrs	r3, r1
 8002da8:	ea5c 0303 	orrs.w	r3, ip, r3
 8002dac:	d102      	bne.n	8002db4 <HAL_DMA_Init+0x508>
 8002dae:	f1b8 0f00 	cmp.w	r8, #0
 8002db2:	d02e      	beq.n	8002e12 <HAL_DMA_Init+0x566>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002db4:	ea47 070e 	orr.w	r7, r7, lr
 8002db8:	b2d3      	uxtb	r3, r2
 8002dba:	433e      	orrs	r6, r7
 8002dbc:	4334      	orrs	r4, r6
 8002dbe:	4320      	orrs	r0, r4
 8002dc0:	4301      	orrs	r1, r0
 8002dc2:	ea5c 0101 	orrs.w	r1, ip, r1
 8002dc6:	d103      	bne.n	8002dd0 <HAL_DMA_Init+0x524>
 8002dc8:	f1b8 0f00 	cmp.w	r8, #0
 8002dcc:	f000 80d3 	beq.w	8002f76 <HAL_DMA_Init+0x6ca>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002dd0:	4834      	ldr	r0, [pc, #208]	; (8002ea4 <HAL_DMA_Init+0x5f8>)
 8002dd2:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002dd4:	4a34      	ldr	r2, [pc, #208]	; (8002ea8 <HAL_DMA_Init+0x5fc>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002dd6:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002dd8:	fba0 0303 	umull	r0, r3, r0, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002ddc:	4833      	ldr	r0, [pc, #204]	; (8002eac <HAL_DMA_Init+0x600>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002dde:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002de0:	6668      	str	r0, [r5, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002de2:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002de4:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002de8:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002dee:	662a      	str	r2, [r5, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002df0:	66ab      	str	r3, [r5, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002df2:	68ab      	ldr	r3, [r5, #8]
 8002df4:	2b80      	cmp	r3, #128	; 0x80
 8002df6:	d07d      	beq.n	8002ef4 <HAL_DMA_Init+0x648>
 8002df8:	792b      	ldrb	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002dfa:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dfc:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 8002e00:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002e02:	6868      	ldr	r0, [r5, #4]
 8002e04:	1e41      	subs	r1, r0, #1
 8002e06:	2907      	cmp	r1, #7
 8002e08:	d978      	bls.n	8002efc <HAL_DMA_Init+0x650>
      hdma->DMAmuxRequestGen = 0U;
 8002e0a:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8002e0c:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e10:	676b      	str	r3, [r5, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e12:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002e14:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e16:	6568      	str	r0, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002e18:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8002e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e20:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e22:	2303      	movs	r3, #3
        return HAL_ERROR;
 8002e24:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e26:	656a      	str	r2, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e28:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8002e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8002e30:	2001      	movs	r0, #1
}
 8002e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002e36:	21e2      	movs	r1, #226	; 0xe2
 8002e38:	4813      	ldr	r0, [pc, #76]	; (8002e88 <HAL_DMA_Init+0x5dc>)
 8002e3a:	f010 feff 	bl	8013c3c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002e3e:	68eb      	ldr	r3, [r5, #12]
 8002e40:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8002e44:	f43f add6 	beq.w	80029f4 <HAL_DMA_Init+0x148>
 8002e48:	e6e8      	b.n	8002c1c <HAL_DMA_Init+0x370>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002e4a:	21e5      	movs	r1, #229	; 0xe5
 8002e4c:	480e      	ldr	r0, [pc, #56]	; (8002e88 <HAL_DMA_Init+0x5dc>)
 8002e4e:	f010 fef5 	bl	8013c3c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002e52:	69ab      	ldr	r3, [r5, #24]
 8002e54:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8002e58:	f47f addd 	bne.w	8002a16 <HAL_DMA_Init+0x16a>
 8002e5c:	e5df      	b.n	8002a1e <HAL_DMA_Init+0x172>
 8002e5e:	21e6      	movs	r1, #230	; 0xe6
 8002e60:	4809      	ldr	r0, [pc, #36]	; (8002e88 <HAL_DMA_Init+0x5dc>)
 8002e62:	f010 feeb 	bl	8013c3c <assert_failed>
 8002e66:	e5da      	b.n	8002a1e <HAL_DMA_Init+0x172>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002e68:	21e7      	movs	r1, #231	; 0xe7
 8002e6a:	4807      	ldr	r0, [pc, #28]	; (8002e88 <HAL_DMA_Init+0x5dc>)
 8002e6c:	f010 fee6 	bl	8013c3c <assert_failed>
 8002e70:	e5e8      	b.n	8002a44 <HAL_DMA_Init+0x198>
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8002e72:	21f4      	movs	r1, #244	; 0xf4
 8002e74:	4804      	ldr	r0, [pc, #16]	; (8002e88 <HAL_DMA_Init+0x5dc>)
 8002e76:	f010 fee1 	bl	8013c3c <assert_failed>
 8002e7a:	e652      	b.n	8002b22 <HAL_DMA_Init+0x276>
 8002e7c:	fe10803f 	.word	0xfe10803f
 8002e80:	5c001000 	.word	0x5c001000
 8002e84:	ffff0000 	.word	0xffff0000
 8002e88:	0802a238 	.word	0x0802a238
 8002e8c:	40020010 	.word	0x40020010
 8002e90:	40020028 	.word	0x40020028
 8002e94:	40020040 	.word	0x40020040
 8002e98:	40020058 	.word	0x40020058
 8002e9c:	40020070 	.word	0x40020070
 8002ea0:	40020428 	.word	0x40020428
 8002ea4:	cccccccd 	.word	0xcccccccd
 8002ea8:	16009600 	.word	0x16009600
 8002eac:	58025880 	.word	0x58025880
 8002eb0:	400200b8 	.word	0x400200b8
 8002eb4:	40020410 	.word	0x40020410
 8002eb8:	400204a0 	.word	0x400204a0
 8002ebc:	58025430 	.word	0x58025430
 8002ec0:	400204b8 	.word	0x400204b8
 8002ec4:	58025408 	.word	0x58025408
 8002ec8:	5802541c 	.word	0x5802541c
 8002ecc:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ed0:	497a      	ldr	r1, [pc, #488]	; (80030bc <HAL_DMA_Init+0x810>)
 8002ed2:	40e1      	lsrs	r1, r4
 8002ed4:	07c9      	lsls	r1, r1, #31
 8002ed6:	f57f ae6f 	bpl.w	8002bb8 <HAL_DMA_Init+0x30c>
        registerValue |= DMA_SxCR_TRBUFF;
 8002eda:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ede:	e670      	b.n	8002bc2 <HAL_DMA_Init+0x316>
      assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002ee0:	21f2      	movs	r1, #242	; 0xf2
 8002ee2:	4877      	ldr	r0, [pc, #476]	; (80030c0 <HAL_DMA_Init+0x814>)
 8002ee4:	f010 feaa 	bl	8013c3c <assert_failed>
 8002ee8:	e611      	b.n	8002b0e <HAL_DMA_Init+0x262>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002eea:	21e8      	movs	r1, #232	; 0xe8
 8002eec:	4874      	ldr	r0, [pc, #464]	; (80030c0 <HAL_DMA_Init+0x814>)
 8002eee:	f010 fea5 	bl	8013c3c <assert_failed>
 8002ef2:	e5ac      	b.n	8002a4e <HAL_DMA_Init+0x1a2>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	6069      	str	r1, [r5, #4]
 8002efa:	e77e      	b.n	8002dfa <HAL_DMA_Init+0x54e>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002efc:	682a      	ldr	r2, [r5, #0]
 8002efe:	4b71      	ldr	r3, [pc, #452]	; (80030c4 <HAL_DMA_Init+0x818>)
 8002f00:	4e71      	ldr	r6, [pc, #452]	; (80030c8 <HAL_DMA_Init+0x81c>)
 8002f02:	4c72      	ldr	r4, [pc, #456]	; (80030cc <HAL_DMA_Init+0x820>)
 8002f04:	42b2      	cmp	r2, r6
 8002f06:	bf18      	it	ne
 8002f08:	429a      	cmpne	r2, r3
 8002f0a:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	42a2      	cmp	r2, r4
 8002f16:	bf08      	it	eq
 8002f18:	f043 0301 	orreq.w	r3, r3, #1
 8002f1c:	3428      	adds	r4, #40	; 0x28
 8002f1e:	42b2      	cmp	r2, r6
 8002f20:	bf08      	it	eq
 8002f22:	f043 0301 	orreq.w	r3, r3, #1
 8002f26:	3628      	adds	r6, #40	; 0x28
 8002f28:	42a2      	cmp	r2, r4
 8002f2a:	bf08      	it	eq
 8002f2c:	f043 0301 	orreq.w	r3, r3, #1
 8002f30:	3428      	adds	r4, #40	; 0x28
 8002f32:	42b2      	cmp	r2, r6
 8002f34:	bf08      	it	eq
 8002f36:	f043 0301 	orreq.w	r3, r3, #1
 8002f3a:	42a2      	cmp	r2, r4
 8002f3c:	bf08      	it	eq
 8002f3e:	f043 0301 	orreq.w	r3, r3, #1
 8002f42:	b91b      	cbnz	r3, 8002f4c <HAL_DMA_Init+0x6a0>
 8002f44:	4b62      	ldr	r3, [pc, #392]	; (80030d0 <HAL_DMA_Init+0x824>)
 8002f46:	429a      	cmp	r2, r3
 8002f48:	f040 809e 	bne.w	8003088 <HAL_DMA_Init+0x7dc>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f4c:	4b61      	ldr	r3, [pc, #388]	; (80030d4 <HAL_DMA_Init+0x828>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002f4e:	4c62      	ldr	r4, [pc, #392]	; (80030d8 <HAL_DMA_Init+0x82c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f50:	4403      	add	r3, r0
 8002f52:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002f54:	2201      	movs	r2, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f56:	2000      	movs	r0, #0
 8002f58:	672c      	str	r4, [r5, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002f5a:	fa02 f101 	lsl.w	r1, r2, r1
 8002f5e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8002f60:	6769      	str	r1, [r5, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f62:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f64:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	e752      	b.n	8002e12 <HAL_DMA_Init+0x566>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002f6c:	21f3      	movs	r1, #243	; 0xf3
 8002f6e:	4854      	ldr	r0, [pc, #336]	; (80030c0 <HAL_DMA_Init+0x814>)
 8002f70:	f010 fe64 	bl	8013c3c <assert_failed>
 8002f74:	e5d0      	b.n	8002b18 <HAL_DMA_Init+0x26c>
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002f76:	4959      	ldr	r1, [pc, #356]	; (80030dc <HAL_DMA_Init+0x830>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002f78:	3b10      	subs	r3, #16
 8002f7a:	4859      	ldr	r0, [pc, #356]	; (80030e0 <HAL_DMA_Init+0x834>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002f7c:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002f7e:	fba0 0303 	umull	r0, r3, r0, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002f82:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002f84:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002f88:	d800      	bhi.n	8002f8c <HAL_DMA_Init+0x6e0>
      stream_number += 8U;
 8002f8a:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002f8c:	4a55      	ldr	r2, [pc, #340]	; (80030e4 <HAL_DMA_Init+0x838>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002f8e:	f003 041f 	and.w	r4, r3, #31
 8002f92:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f94:	4854      	ldr	r0, [pc, #336]	; (80030e8 <HAL_DMA_Init+0x83c>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002f96:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002f98:	40a1      	lsls	r1, r4
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f9a:	6668      	str	r0, [r5, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002f9c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002f9e:	66a9      	str	r1, [r5, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002fa0:	662a      	str	r2, [r5, #96]	; 0x60
 8002fa2:	e726      	b.n	8002df2 <HAL_DMA_Init+0x546>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002fa4:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_DMA_Init+0x818>)
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d01e      	beq.n	8002fe8 <HAL_DMA_Init+0x73c>
 8002faa:	3314      	adds	r3, #20
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d01b      	beq.n	8002fe8 <HAL_DMA_Init+0x73c>
 8002fb0:	4b46      	ldr	r3, [pc, #280]	; (80030cc <HAL_DMA_Init+0x820>)
 8002fb2:	494e      	ldr	r1, [pc, #312]	; (80030ec <HAL_DMA_Init+0x840>)
 8002fb4:	4c4e      	ldr	r4, [pc, #312]	; (80030f0 <HAL_DMA_Init+0x844>)
 8002fb6:	428a      	cmp	r2, r1
 8002fb8:	bf18      	it	ne
 8002fba:	429a      	cmpne	r2, r3
 8002fbc:	484d      	ldr	r0, [pc, #308]	; (80030f4 <HAL_DMA_Init+0x848>)
 8002fbe:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	42a2      	cmp	r2, r4
 8002fca:	bf08      	it	eq
 8002fcc:	f043 0301 	orreq.w	r3, r3, #1
 8002fd0:	4282      	cmp	r2, r0
 8002fd2:	bf08      	it	eq
 8002fd4:	f043 0301 	orreq.w	r3, r3, #1
 8002fd8:	428a      	cmp	r2, r1
 8002fda:	bf08      	it	eq
 8002fdc:	f043 0301 	orreq.w	r3, r3, #1
 8002fe0:	b913      	cbnz	r3, 8002fe8 <HAL_DMA_Init+0x73c>
 8002fe2:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <HAL_DMA_Init+0x824>)
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d15d      	bne.n	80030a4 <HAL_DMA_Init+0x7f8>
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
 8002fe8:	686b      	ldr	r3, [r5, #4]
 8002fea:	2b11      	cmp	r3, #17
 8002fec:	d853      	bhi.n	8003096 <HAL_DMA_Init+0x7ea>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fee:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8002ff0:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ff2:	4f41      	ldr	r7, [pc, #260]	; (80030f8 <HAL_DMA_Init+0x84c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ff4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ff8:	68ab      	ldr	r3, [r5, #8]
    __HAL_UNLOCK(hdma);
 8002ffa:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ffe:	2b40      	cmp	r3, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003000:	6811      	ldr	r1, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003002:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003006:	d044      	beq.n	8003092 <HAL_DMA_Init+0x7e6>
 8003008:	2b80      	cmp	r3, #128	; 0x80
 800300a:	bf14      	ite	ne
 800300c:	2100      	movne	r1, #0
 800300e:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003012:	692b      	ldr	r3, [r5, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003014:	4628      	mov	r0, r5
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003016:	68ec      	ldr	r4, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003018:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800301a:	696e      	ldr	r6, [r5, #20]
 800301c:	ea43 03d4 	orr.w	r3, r3, r4, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003020:	69ac      	ldr	r4, [r5, #24]
 8003022:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003026:	69ee      	ldr	r6, [r5, #28]
 8003028:	ea43 03d4 	orr.w	r3, r3, r4, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800302c:	6a2c      	ldr	r4, [r5, #32]
 800302e:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003032:	4e32      	ldr	r6, [pc, #200]	; (80030fc <HAL_DMA_Init+0x850>)
 8003034:	ea43 1314 	orr.w	r3, r3, r4, lsr #4
 8003038:	4c31      	ldr	r4, [pc, #196]	; (8003100 <HAL_DMA_Init+0x854>)
 800303a:	433b      	orrs	r3, r7
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800303c:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800303e:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	441e      	add	r6, r3
 8003044:	fba4 2306 	umull	r2, r3, r4, r6
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	65eb      	str	r3, [r5, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800304e:	f7ff fbb1 	bl	80027b4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003052:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003054:	2301      	movs	r3, #1
 8003056:	f002 021f 	and.w	r2, r2, #31
 800305a:	4093      	lsls	r3, r2
 800305c:	6043      	str	r3, [r0, #4]
 800305e:	e609      	b.n	8002c74 <HAL_DMA_Init+0x3c8>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003060:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8003064:	f47f adfc 	bne.w	8002c60 <HAL_DMA_Init+0x3b4>
 8003068:	e5c7      	b.n	8002bfa <HAL_DMA_Init+0x34e>
    switch (hdma->Init.FIFOThreshold)
 800306a:	2a03      	cmp	r2, #3
 800306c:	f63f adf8 	bhi.w	8002c60 <HAL_DMA_Init+0x3b4>
 8003070:	a401      	add	r4, pc, #4	; (adr r4, 8003078 <HAL_DMA_Init+0x7cc>)
 8003072:	f854 f022 	ldr.w	pc, [r4, r2, lsl #2]
 8003076:	bf00      	nop
 8003078:	08002bfb 	.word	0x08002bfb
 800307c:	08002bf7 	.word	0x08002bf7
 8003080:	08002bfb 	.word	0x08002bfb
 8003084:	08003061 	.word	0x08003061
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <HAL_DMA_Init+0x858>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800308a:	4c1f      	ldr	r4, [pc, #124]	; (8003108 <HAL_DMA_Init+0x85c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800308c:	4403      	add	r3, r0
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	e760      	b.n	8002f54 <HAL_DMA_Init+0x6a8>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003092:	2110      	movs	r1, #16
 8003094:	e7bd      	b.n	8003012 <HAL_DMA_Init+0x766>
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
 8003096:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800309a:	4809      	ldr	r0, [pc, #36]	; (80030c0 <HAL_DMA_Init+0x814>)
 800309c:	f010 fdce 	bl	8013c3c <assert_failed>
 80030a0:	682a      	ldr	r2, [r5, #0]
 80030a2:	e7a4      	b.n	8002fee <HAL_DMA_Init+0x742>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030a4:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80030a6:	2303      	movs	r3, #3
    return HAL_ERROR;
 80030a8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030aa:	656a      	str	r2, [r5, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80030ac:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    return HAL_ERROR;
 80030b0:	e6b4      	b.n	8002e1c <HAL_DMA_Init+0x570>
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80030b2:	21e1      	movs	r1, #225	; 0xe1
 80030b4:	4802      	ldr	r0, [pc, #8]	; (80030c0 <HAL_DMA_Init+0x814>)
 80030b6:	f010 fdc1 	bl	8013c3c <assert_failed>
 80030ba:	e48f      	b.n	80029dc <HAL_DMA_Init+0x130>
 80030bc:	c3c0003f 	.word	0xc3c0003f
 80030c0:	0802a238 	.word	0x0802a238
 80030c4:	58025408 	.word	0x58025408
 80030c8:	5802541c 	.word	0x5802541c
 80030cc:	58025430 	.word	0x58025430
 80030d0:	58025494 	.word	0x58025494
 80030d4:	1600963f 	.word	0x1600963f
 80030d8:	58025940 	.word	0x58025940
 80030dc:	bffdfbf0 	.word	0xbffdfbf0
 80030e0:	aaaaaaab 	.word	0xaaaaaaab
 80030e4:	10008200 	.word	0x10008200
 80030e8:	40020880 	.word	0x40020880
 80030ec:	58025444 	.word	0x58025444
 80030f0:	58025458 	.word	0x58025458
 80030f4:	5802546c 	.word	0x5802546c
 80030f8:	fffe000f 	.word	0xfffe000f
 80030fc:	a7fdabf8 	.word	0xa7fdabf8
 8003100:	cccccccd 	.word	0xcccccccd
 8003104:	1000823f 	.word	0x1000823f
 8003108:	40020940 	.word	0x40020940

0800310c <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800310c:	2800      	cmp	r0, #0
 800310e:	f000 821c 	beq.w	800354a <HAL_DMA_DeInit+0x43e>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003112:	49a7      	ldr	r1, [pc, #668]	; (80033b0 <HAL_DMA_DeInit+0x2a4>)
{
 8003114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_DMA_DISABLE(hdma);
 8003118:	6802      	ldr	r2, [r0, #0]
 800311a:	4604      	mov	r4, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800311c:	4da5      	ldr	r5, [pc, #660]	; (80033b4 <HAL_DMA_DeInit+0x2a8>)
  __HAL_DMA_DISABLE(hdma);
 800311e:	6813      	ldr	r3, [r2, #0]
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6013      	str	r3, [r2, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003126:	4ba4      	ldr	r3, [pc, #656]	; (80033b8 <HAL_DMA_DeInit+0x2ac>)
 8003128:	6802      	ldr	r2, [r0, #0]
 800312a:	48a4      	ldr	r0, [pc, #656]	; (80033bc <HAL_DMA_DeInit+0x2b0>)
 800312c:	4282      	cmp	r2, r0
 800312e:	bf18      	it	ne
 8003130:	429a      	cmpne	r2, r3
 8003132:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	428a      	cmp	r2, r1
 800313e:	bf08      	it	eq
 8003140:	f043 0301 	orreq.w	r3, r3, #1
 8003144:	3148      	adds	r1, #72	; 0x48
 8003146:	42aa      	cmp	r2, r5
 8003148:	bf08      	it	eq
 800314a:	f043 0301 	orreq.w	r3, r3, #1
 800314e:	3548      	adds	r5, #72	; 0x48
 8003150:	4282      	cmp	r2, r0
 8003152:	bf08      	it	eq
 8003154:	f043 0301 	orreq.w	r3, r3, #1
 8003158:	3048      	adds	r0, #72	; 0x48
 800315a:	428a      	cmp	r2, r1
 800315c:	bf08      	it	eq
 800315e:	f043 0301 	orreq.w	r3, r3, #1
 8003162:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8003166:	42aa      	cmp	r2, r5
 8003168:	bf08      	it	eq
 800316a:	f043 0301 	orreq.w	r3, r3, #1
 800316e:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8003172:	4282      	cmp	r2, r0
 8003174:	bf08      	it	eq
 8003176:	f043 0301 	orreq.w	r3, r3, #1
 800317a:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800317e:	428a      	cmp	r2, r1
 8003180:	bf08      	it	eq
 8003182:	f043 0301 	orreq.w	r3, r3, #1
 8003186:	3148      	adds	r1, #72	; 0x48
 8003188:	42aa      	cmp	r2, r5
 800318a:	bf08      	it	eq
 800318c:	f043 0301 	orreq.w	r3, r3, #1
 8003190:	3548      	adds	r5, #72	; 0x48
 8003192:	4282      	cmp	r2, r0
 8003194:	bf08      	it	eq
 8003196:	f043 0301 	orreq.w	r3, r3, #1
 800319a:	3048      	adds	r0, #72	; 0x48
 800319c:	428a      	cmp	r2, r1
 800319e:	bf08      	it	eq
 80031a0:	f043 0301 	orreq.w	r3, r3, #1
 80031a4:	3148      	adds	r1, #72	; 0x48
 80031a6:	42aa      	cmp	r2, r5
 80031a8:	bf08      	it	eq
 80031aa:	f043 0301 	orreq.w	r3, r3, #1
 80031ae:	4282      	cmp	r2, r0
 80031b0:	bf08      	it	eq
 80031b2:	f043 0301 	orreq.w	r3, r3, #1
 80031b6:	428a      	cmp	r2, r1
 80031b8:	bf08      	it	eq
 80031ba:	f043 0301 	orreq.w	r3, r3, #1
 80031be:	b91b      	cbnz	r3, 80031c8 <HAL_DMA_DeInit+0xbc>
 80031c0:	4b7f      	ldr	r3, [pc, #508]	; (80033c0 <HAL_DMA_DeInit+0x2b4>)
 80031c2:	429a      	cmp	r2, r3
 80031c4:	f040 81c3 	bne.w	800354e <HAL_DMA_DeInit+0x442>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80031c8:	2100      	movs	r1, #0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80031ca:	2521      	movs	r5, #33	; 0x21
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031cc:	4b7a      	ldr	r3, [pc, #488]	; (80033b8 <HAL_DMA_DeInit+0x2ac>)
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80031ce:	6011      	str	r1, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80031d0:	6822      	ldr	r2, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031d2:	487a      	ldr	r0, [pc, #488]	; (80033bc <HAL_DMA_DeInit+0x2b0>)
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80031d4:	6051      	str	r1, [r2, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80031d6:	6822      	ldr	r2, [r4, #0]
 80031d8:	6091      	str	r1, [r2, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 80031da:	6822      	ldr	r2, [r4, #0]
 80031dc:	60d1      	str	r1, [r2, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	6111      	str	r1, [r2, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80031e2:	6822      	ldr	r2, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031e4:	4972      	ldr	r1, [pc, #456]	; (80033b0 <HAL_DMA_DeInit+0x2a4>)
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80031e6:	6155      	str	r5, [r2, #20]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031e8:	6822      	ldr	r2, [r4, #0]
 80031ea:	4d72      	ldr	r5, [pc, #456]	; (80033b4 <HAL_DMA_DeInit+0x2a8>)
 80031ec:	4282      	cmp	r2, r0
 80031ee:	bf18      	it	ne
 80031f0:	429a      	cmpne	r2, r3
 80031f2:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	428a      	cmp	r2, r1
 80031fe:	bf08      	it	eq
 8003200:	f043 0301 	orreq.w	r3, r3, #1
 8003204:	3148      	adds	r1, #72	; 0x48
 8003206:	42aa      	cmp	r2, r5
 8003208:	bf08      	it	eq
 800320a:	f043 0301 	orreq.w	r3, r3, #1
 800320e:	3548      	adds	r5, #72	; 0x48
 8003210:	4282      	cmp	r2, r0
 8003212:	bf08      	it	eq
 8003214:	f043 0301 	orreq.w	r3, r3, #1
 8003218:	3048      	adds	r0, #72	; 0x48
 800321a:	428a      	cmp	r2, r1
 800321c:	bf08      	it	eq
 800321e:	f043 0301 	orreq.w	r3, r3, #1
 8003222:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8003226:	42aa      	cmp	r2, r5
 8003228:	bf08      	it	eq
 800322a:	f043 0301 	orreq.w	r3, r3, #1
 800322e:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8003232:	4282      	cmp	r2, r0
 8003234:	bf08      	it	eq
 8003236:	f043 0301 	orreq.w	r3, r3, #1
 800323a:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800323e:	428a      	cmp	r2, r1
 8003240:	bf08      	it	eq
 8003242:	f043 0301 	orreq.w	r3, r3, #1
 8003246:	3148      	adds	r1, #72	; 0x48
 8003248:	42aa      	cmp	r2, r5
 800324a:	bf08      	it	eq
 800324c:	f043 0301 	orreq.w	r3, r3, #1
 8003250:	3548      	adds	r5, #72	; 0x48
 8003252:	4282      	cmp	r2, r0
 8003254:	bf08      	it	eq
 8003256:	f043 0301 	orreq.w	r3, r3, #1
 800325a:	3048      	adds	r0, #72	; 0x48
 800325c:	428a      	cmp	r2, r1
 800325e:	bf08      	it	eq
 8003260:	f043 0301 	orreq.w	r3, r3, #1
 8003264:	3148      	adds	r1, #72	; 0x48
 8003266:	42aa      	cmp	r2, r5
 8003268:	bf08      	it	eq
 800326a:	f043 0301 	orreq.w	r3, r3, #1
 800326e:	4282      	cmp	r2, r0
 8003270:	bf08      	it	eq
 8003272:	f043 0301 	orreq.w	r3, r3, #1
 8003276:	428a      	cmp	r2, r1
 8003278:	bf08      	it	eq
 800327a:	f043 0301 	orreq.w	r3, r3, #1
 800327e:	b91b      	cbnz	r3, 8003288 <HAL_DMA_DeInit+0x17c>
 8003280:	4b4f      	ldr	r3, [pc, #316]	; (80033c0 <HAL_DMA_DeInit+0x2b4>)
 8003282:	429a      	cmp	r2, r3
 8003284:	f040 819d 	bne.w	80035c2 <HAL_DMA_DeInit+0x4b6>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003288:	b2d3      	uxtb	r3, r2
 800328a:	4d4e      	ldr	r5, [pc, #312]	; (80033c4 <HAL_DMA_DeInit+0x2b8>)
 800328c:	494e      	ldr	r1, [pc, #312]	; (80033c8 <HAL_DMA_DeInit+0x2bc>)
 800328e:	3b10      	subs	r3, #16
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003290:	484e      	ldr	r0, [pc, #312]	; (80033cc <HAL_DMA_DeInit+0x2c0>)
 8003292:	4011      	ands	r1, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003294:	fba5 5303 	umull	r5, r3, r5, r3
 8003298:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800329a:	f003 0207 	and.w	r2, r3, #7
    if (stream_number > 3U)
 800329e:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80032a0:	5c82      	ldrb	r2, [r0, r2]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80032a2:	bf88      	it	hi
 80032a4:	3104      	addhi	r1, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80032a6:	65e2      	str	r2, [r4, #92]	; 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80032a8:	65a1      	str	r1, [r4, #88]	; 0x58
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032aa:	f002 021f 	and.w	r2, r2, #31
 80032ae:	233f      	movs	r3, #63	; 0x3f
 80032b0:	fa03 f202 	lsl.w	r2, r3, r2
 80032b4:	608a      	str	r2, [r1, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032b6:	6822      	ldr	r2, [r4, #0]
 80032b8:	4b3f      	ldr	r3, [pc, #252]	; (80033b8 <HAL_DMA_DeInit+0x2ac>)
 80032ba:	4840      	ldr	r0, [pc, #256]	; (80033bc <HAL_DMA_DeInit+0x2b0>)
 80032bc:	493c      	ldr	r1, [pc, #240]	; (80033b0 <HAL_DMA_DeInit+0x2a4>)
 80032be:	4282      	cmp	r2, r0
 80032c0:	bf18      	it	ne
 80032c2:	429a      	cmpne	r2, r3
 80032c4:	4e3b      	ldr	r6, [pc, #236]	; (80033b4 <HAL_DMA_DeInit+0x2a8>)
 80032c6:	4d42      	ldr	r5, [pc, #264]	; (80033d0 <HAL_DMA_DeInit+0x2c4>)
 80032c8:	f100 0060 	add.w	r0, r0, #96	; 0x60
 80032cc:	bf0c      	ite	eq
 80032ce:	2301      	moveq	r3, #1
 80032d0:	2300      	movne	r3, #0
 80032d2:	f8df e104 	ldr.w	lr, [pc, #260]	; 80033d8 <HAL_DMA_DeInit+0x2cc>
 80032d6:	428a      	cmp	r2, r1
 80032d8:	bf08      	it	eq
 80032da:	f043 0301 	orreq.w	r3, r3, #1
 80032de:	3160      	adds	r1, #96	; 0x60
 80032e0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80033dc <HAL_DMA_DeInit+0x2d0>
 80032e4:	42b2      	cmp	r2, r6
 80032e6:	bf08      	it	eq
 80032e8:	f043 0301 	orreq.w	r3, r3, #1
 80032ec:	4f39      	ldr	r7, [pc, #228]	; (80033d4 <HAL_DMA_DeInit+0x2c8>)
 80032ee:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 80032f2:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80033e0 <HAL_DMA_DeInit+0x2d4>
 80032f6:	42aa      	cmp	r2, r5
 80032f8:	bf08      	it	eq
 80032fa:	f043 0301 	orreq.w	r3, r3, #1
 80032fe:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
 8003302:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80033e4 <HAL_DMA_DeInit+0x2d8>
 8003306:	4282      	cmp	r2, r0
 8003308:	bf08      	it	eq
 800330a:	f043 0301 	orreq.w	r3, r3, #1
 800330e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8003312:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80033c0 <HAL_DMA_DeInit+0x2b4>
 8003316:	428a      	cmp	r2, r1
 8003318:	bf08      	it	eq
 800331a:	f043 0301 	orreq.w	r3, r3, #1
 800331e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8003322:	4572      	cmp	r2, lr
 8003324:	bf08      	it	eq
 8003326:	f043 0301 	orreq.w	r3, r3, #1
 800332a:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 80033e8 <HAL_DMA_DeInit+0x2dc>
 800332e:	4562      	cmp	r2, ip
 8003330:	bf08      	it	eq
 8003332:	f043 0301 	orreq.w	r3, r3, #1
 8003336:	eba2 0e0e 	sub.w	lr, r2, lr
 800333a:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80033ec <HAL_DMA_DeInit+0x2e0>
 800333e:	42ba      	cmp	r2, r7
 8003340:	bf08      	it	eq
 8003342:	f043 0301 	orreq.w	r3, r3, #1
 8003346:	fabe fe8e 	clz	lr, lr
 800334a:	eba2 070c 	sub.w	r7, r2, ip
 800334e:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8003352:	42b2      	cmp	r2, r6
 8003354:	bf08      	it	eq
 8003356:	f043 0301 	orreq.w	r3, r3, #1
 800335a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800335e:	eba2 060a 	sub.w	r6, r2, sl
 8003362:	fab7 f787 	clz	r7, r7
 8003366:	42aa      	cmp	r2, r5
 8003368:	bf08      	it	eq
 800336a:	f043 0301 	orreq.w	r3, r3, #1
 800336e:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8003372:	eba2 050c 	sub.w	r5, r2, ip
 8003376:	097f      	lsrs	r7, r7, #5
 8003378:	4282      	cmp	r2, r0
 800337a:	bf08      	it	eq
 800337c:	f043 0301 	orreq.w	r3, r3, #1
 8003380:	fab6 f686 	clz	r6, r6
 8003384:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8003388:	fab5 f585 	clz	r5, r5
 800338c:	428a      	cmp	r2, r1
 800338e:	bf08      	it	eq
 8003390:	f043 0301 	orreq.w	r3, r3, #1
 8003394:	0976      	lsrs	r6, r6, #5
 8003396:	eba2 000a 	sub.w	r0, r2, sl
 800339a:	eba2 010c 	sub.w	r1, r2, ip
 800339e:	4542      	cmp	r2, r8
 80033a0:	bf08      	it	eq
 80033a2:	f043 0301 	orreq.w	r3, r3, #1
 80033a6:	096d      	lsrs	r5, r5, #5
 80033a8:	fab0 f080 	clz	r0, r0
 80033ac:	e020      	b.n	80033f0 <HAL_DMA_DeInit+0x2e4>
 80033ae:	bf00      	nop
 80033b0:	40020040 	.word	0x40020040
 80033b4:	40020058 	.word	0x40020058
 80033b8:	40020010 	.word	0x40020010
 80033bc:	40020028 	.word	0x40020028
 80033c0:	400204b8 	.word	0x400204b8
 80033c4:	aaaaaaab 	.word	0xaaaaaaab
 80033c8:	fffffc00 	.word	0xfffffc00
 80033cc:	0802a270 	.word	0x0802a270
 80033d0:	40020070 	.word	0x40020070
 80033d4:	40020428 	.word	0x40020428
 80033d8:	400200b8 	.word	0x400200b8
 80033dc:	40020410 	.word	0x40020410
 80033e0:	400204a0 	.word	0x400204a0
 80033e4:	58025430 	.word	0x58025430
 80033e8:	58025408 	.word	0x58025408
 80033ec:	5802541c 	.word	0x5802541c
 80033f0:	f10c 0c14 	add.w	ip, ip, #20
 80033f4:	454a      	cmp	r2, r9
 80033f6:	bf08      	it	eq
 80033f8:	f043 0301 	orreq.w	r3, r3, #1
 80033fc:	fab1 f181 	clz	r1, r1
 8003400:	0940      	lsrs	r0, r0, #5
 8003402:	eba2 0c0c 	sub.w	ip, r2, ip
 8003406:	ea4e 0303 	orr.w	r3, lr, r3
 800340a:	0949      	lsrs	r1, r1, #5
 800340c:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 80035f4 <HAL_DMA_DeInit+0x4e8>
 8003410:	fabc fc8c 	clz	ip, ip
 8003414:	433b      	orrs	r3, r7
 8003416:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800341a:	eba2 0808 	sub.w	r8, r2, r8
 800341e:	4333      	orrs	r3, r6
 8003420:	fab8 f888 	clz	r8, r8
 8003424:	432b      	orrs	r3, r5
 8003426:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800342a:	4303      	orrs	r3, r0
 800342c:	430b      	orrs	r3, r1
 800342e:	ea5c 0303 	orrs.w	r3, ip, r3
 8003432:	d102      	bne.n	800343a <HAL_DMA_DeInit+0x32e>
 8003434:	f1b8 0f00 	cmp.w	r8, #0
 8003438:	d02b      	beq.n	8003492 <HAL_DMA_DeInit+0x386>
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800343a:	ea47 070e 	orr.w	r7, r7, lr
 800343e:	b2d3      	uxtb	r3, r2
 8003440:	433e      	orrs	r6, r7
 8003442:	4335      	orrs	r5, r6
 8003444:	4328      	orrs	r0, r5
 8003446:	4301      	orrs	r1, r0
 8003448:	ea5c 0101 	orrs.w	r1, ip, r1
 800344c:	d102      	bne.n	8003454 <HAL_DMA_DeInit+0x348>
 800344e:	f1b8 0f00 	cmp.w	r8, #0
 8003452:	d063      	beq.n	800351c <HAL_DMA_DeInit+0x410>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003454:	4861      	ldr	r0, [pc, #388]	; (80035dc <HAL_DMA_DeInit+0x4d0>)
 8003456:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003458:	4a61      	ldr	r2, [pc, #388]	; (80035e0 <HAL_DMA_DeInit+0x4d4>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800345a:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800345c:	fba0 0303 	umull	r0, r3, r0, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003460:	4860      	ldr	r0, [pc, #384]	; (80035e4 <HAL_DMA_DeInit+0x4d8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003462:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003464:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003466:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003468:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800346c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003472:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003474:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->DMAmuxChannel != 0U)
 8003476:	b122      	cbz	r2, 8003482 <HAL_DMA_DeInit+0x376>
      hdma->DMAmuxChannel->CCR = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800347c:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 8003480:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003482:	6860      	ldr	r0, [r4, #4]
 8003484:	1e41      	subs	r1, r0, #1
 8003486:	2907      	cmp	r1, #7
 8003488:	d912      	bls.n	80034b0 <HAL_DMA_DeInit+0x3a4>
    hdma->DMAmuxRequestGen = 0U;
 800348a:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 800348c:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003490:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->XferCpltCallback       = NULL;
 8003492:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003494:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8003496:	4618      	mov	r0, r3
  hdma->State = HAL_DMA_STATE_RESET;
 8003498:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800349c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->XferHalfCpltCallback   = NULL;
 80034a0:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80034a4:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback      = NULL;
 80034a8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 80034ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	4b4d      	ldr	r3, [pc, #308]	; (80035e8 <HAL_DMA_DeInit+0x4dc>)
 80034b4:	4e4d      	ldr	r6, [pc, #308]	; (80035ec <HAL_DMA_DeInit+0x4e0>)
 80034b6:	4d4e      	ldr	r5, [pc, #312]	; (80035f0 <HAL_DMA_DeInit+0x4e4>)
 80034b8:	42b2      	cmp	r2, r6
 80034ba:	bf18      	it	ne
 80034bc:	429a      	cmpne	r2, r3
 80034be:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	42aa      	cmp	r2, r5
 80034ca:	bf08      	it	eq
 80034cc:	f043 0301 	orreq.w	r3, r3, #1
 80034d0:	3528      	adds	r5, #40	; 0x28
 80034d2:	42b2      	cmp	r2, r6
 80034d4:	bf08      	it	eq
 80034d6:	f043 0301 	orreq.w	r3, r3, #1
 80034da:	3628      	adds	r6, #40	; 0x28
 80034dc:	42aa      	cmp	r2, r5
 80034de:	bf08      	it	eq
 80034e0:	f043 0301 	orreq.w	r3, r3, #1
 80034e4:	3528      	adds	r5, #40	; 0x28
 80034e6:	42b2      	cmp	r2, r6
 80034e8:	bf08      	it	eq
 80034ea:	f043 0301 	orreq.w	r3, r3, #1
 80034ee:	42aa      	cmp	r2, r5
 80034f0:	bf08      	it	eq
 80034f2:	f043 0301 	orreq.w	r3, r3, #1
 80034f6:	b913      	cbnz	r3, 80034fe <HAL_DMA_DeInit+0x3f2>
 80034f8:	4b3e      	ldr	r3, [pc, #248]	; (80035f4 <HAL_DMA_DeInit+0x4e8>)
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d169      	bne.n	80035d2 <HAL_DMA_DeInit+0x4c6>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80034fe:	4a3e      	ldr	r2, [pc, #248]	; (80035f8 <HAL_DMA_DeInit+0x4ec>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003500:	4d3e      	ldr	r5, [pc, #248]	; (80035fc <HAL_DMA_DeInit+0x4f0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003502:	4402      	add	r2, r0
 8003504:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003506:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003508:	2000      	movs	r0, #0
 800350a:	6725      	str	r5, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800350c:	fa03 f101 	lsl.w	r1, r3, r1
 8003510:	6761      	str	r1, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003512:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003514:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	e7b6      	b.n	800348a <HAL_DMA_DeInit+0x37e>
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800351c:	4938      	ldr	r1, [pc, #224]	; (8003600 <HAL_DMA_DeInit+0x4f4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800351e:	3b10      	subs	r3, #16
 8003520:	4838      	ldr	r0, [pc, #224]	; (8003604 <HAL_DMA_DeInit+0x4f8>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003522:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003524:	fba0 0303 	umull	r0, r3, r0, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003528:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800352a:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800352e:	d800      	bhi.n	8003532 <HAL_DMA_DeInit+0x426>
      stream_number += 8U;
 8003530:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003532:	4a35      	ldr	r2, [pc, #212]	; (8003608 <HAL_DMA_DeInit+0x4fc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003534:	f003 051f 	and.w	r5, r3, #31
 8003538:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800353a:	4834      	ldr	r0, [pc, #208]	; (800360c <HAL_DMA_DeInit+0x500>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800353c:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800353e:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003540:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003542:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003544:	66a1      	str	r1, [r4, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003546:	6622      	str	r2, [r4, #96]	; 0x60
 8003548:	e795      	b.n	8003476 <HAL_DMA_DeInit+0x36a>
    return HAL_ERROR;
 800354a:	2001      	movs	r0, #1
}
 800354c:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800354e:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <HAL_DMA_DeInit+0x4dc>)
 8003550:	4926      	ldr	r1, [pc, #152]	; (80035ec <HAL_DMA_DeInit+0x4e0>)
 8003552:	4827      	ldr	r0, [pc, #156]	; (80035f0 <HAL_DMA_DeInit+0x4e4>)
 8003554:	428a      	cmp	r2, r1
 8003556:	bf18      	it	ne
 8003558:	429a      	cmpne	r2, r3
 800355a:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800355e:	4d2c      	ldr	r5, [pc, #176]	; (8003610 <HAL_DMA_DeInit+0x504>)
 8003560:	bf0c      	ite	eq
 8003562:	2301      	moveq	r3, #1
 8003564:	2300      	movne	r3, #0
 8003566:	4282      	cmp	r2, r0
 8003568:	bf08      	it	eq
 800356a:	f043 0301 	orreq.w	r3, r3, #1
 800356e:	303c      	adds	r0, #60	; 0x3c
 8003570:	428a      	cmp	r2, r1
 8003572:	bf08      	it	eq
 8003574:	f043 0301 	orreq.w	r3, r3, #1
 8003578:	313c      	adds	r1, #60	; 0x3c
 800357a:	42aa      	cmp	r2, r5
 800357c:	bf08      	it	eq
 800357e:	f043 0301 	orreq.w	r3, r3, #1
 8003582:	4282      	cmp	r2, r0
 8003584:	bf08      	it	eq
 8003586:	f043 0301 	orreq.w	r3, r3, #1
 800358a:	428a      	cmp	r2, r1
 800358c:	bf08      	it	eq
 800358e:	f043 0301 	orreq.w	r3, r3, #1
 8003592:	b913      	cbnz	r3, 800359a <HAL_DMA_DeInit+0x48e>
 8003594:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <HAL_DMA_DeInit+0x4e8>)
 8003596:	429a      	cmp	r2, r3
 8003598:	d118      	bne.n	80035cc <HAL_DMA_DeInit+0x4c0>
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800359a:	2300      	movs	r3, #0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800359c:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800359e:	6013      	str	r3, [r2, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80035a0:	6822      	ldr	r2, [r4, #0]
 80035a2:	6053      	str	r3, [r2, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80035a4:	6822      	ldr	r2, [r4, #0]
 80035a6:	6093      	str	r3, [r2, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80035a8:	6822      	ldr	r2, [r4, #0]
 80035aa:	60d3      	str	r3, [r2, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80035ac:	6822      	ldr	r2, [r4, #0]
 80035ae:	6113      	str	r3, [r2, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035b0:	f7ff f900 	bl	80027b4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035b4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80035b6:	2301      	movs	r3, #1
 80035b8:	f002 021f 	and.w	r2, r2, #31
 80035bc:	4093      	lsls	r3, r2
 80035be:	6043      	str	r3, [r0, #4]
 80035c0:	e679      	b.n	80032b6 <HAL_DMA_DeInit+0x1aa>
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80035c2:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 80035c6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80035c8:	65a1      	str	r1, [r4, #88]	; 0x58
 80035ca:	e66e      	b.n	80032aa <HAL_DMA_DeInit+0x19e>
    return HAL_ERROR;
 80035cc:	2001      	movs	r0, #1
}
 80035ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035d2:	4a10      	ldr	r2, [pc, #64]	; (8003614 <HAL_DMA_DeInit+0x508>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035d4:	4d10      	ldr	r5, [pc, #64]	; (8003618 <HAL_DMA_DeInit+0x50c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035d6:	4402      	add	r2, r0
 80035d8:	0092      	lsls	r2, r2, #2
 80035da:	e794      	b.n	8003506 <HAL_DMA_DeInit+0x3fa>
 80035dc:	cccccccd 	.word	0xcccccccd
 80035e0:	16009600 	.word	0x16009600
 80035e4:	58025880 	.word	0x58025880
 80035e8:	58025408 	.word	0x58025408
 80035ec:	5802541c 	.word	0x5802541c
 80035f0:	58025430 	.word	0x58025430
 80035f4:	58025494 	.word	0x58025494
 80035f8:	1600963f 	.word	0x1600963f
 80035fc:	58025940 	.word	0x58025940
 8003600:	bffdfbf0 	.word	0xbffdfbf0
 8003604:	aaaaaaab 	.word	0xaaaaaaab
 8003608:	10008200 	.word	0x10008200
 800360c:	40020880 	.word	0x40020880
 8003610:	58025458 	.word	0x58025458
 8003614:	1000823f 	.word	0x1000823f
 8003618:	40020940 	.word	0x40020940

0800361c <HAL_DMA_Start_IT>:
{
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	461d      	mov	r5, r3
 8003620:	460e      	mov	r6, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003622:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8003626:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003628:	1e69      	subs	r1, r5, #1
{
 800362a:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800362c:	4299      	cmp	r1, r3
 800362e:	d813      	bhi.n	8003658 <HAL_DMA_Start_IT+0x3c>
  if(hdma == NULL)
 8003630:	b1cc      	cbz	r4, 8003666 <HAL_DMA_Start_IT+0x4a>
  __HAL_LOCK(hdma);
 8003632:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003636:	2b01      	cmp	r3, #1
 8003638:	f000 826f 	beq.w	8003b1a <HAL_DMA_Start_IT+0x4fe>
 800363c:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800363e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003642:	4283      	cmp	r3, r0
  __HAL_LOCK(hdma);
 8003644:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003648:	d012      	beq.n	8003670 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma);
 800364a:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800364c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8003650:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003654:	6563      	str	r3, [r4, #84]	; 0x54
}
 8003656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003658:	f240 21a7 	movw	r1, #679	; 0x2a7
 800365c:	4803      	ldr	r0, [pc, #12]	; (800366c <HAL_DMA_Start_IT+0x50>)
 800365e:	f010 faed 	bl	8013c3c <assert_failed>
  if(hdma == NULL)
 8003662:	2c00      	cmp	r4, #0
 8003664:	d1e5      	bne.n	8003632 <HAL_DMA_Start_IT+0x16>
    return HAL_ERROR;
 8003666:	2001      	movs	r0, #1
}
 8003668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800366a:	bf00      	nop
 800366c:	0802a238 	.word	0x0802a238
    hdma->State = HAL_DMA_STATE_BUSY;
 8003670:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8003672:	6822      	ldr	r2, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8003674:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003678:	2000      	movs	r0, #0
 800367a:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800367c:	6813      	ldr	r3, [r2, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800367e:	489e      	ldr	r0, [pc, #632]	; (80038f8 <HAL_DMA_Start_IT+0x2dc>)
    __HAL_DMA_DISABLE(hdma);
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	6013      	str	r3, [r2, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003686:	4a9d      	ldr	r2, [pc, #628]	; (80038fc <HAL_DMA_Start_IT+0x2e0>)
 8003688:	6821      	ldr	r1, [r4, #0]
 800368a:	4b9d      	ldr	r3, [pc, #628]	; (8003900 <HAL_DMA_Start_IT+0x2e4>)
 800368c:	4291      	cmp	r1, r2
 800368e:	bf18      	it	ne
 8003690:	4281      	cmpne	r1, r0
 8003692:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8003696:	bf0c      	ite	eq
 8003698:	2001      	moveq	r0, #1
 800369a:	2000      	movne	r0, #0
 800369c:	4299      	cmp	r1, r3
 800369e:	bf08      	it	eq
 80036a0:	f040 0001 	orreq.w	r0, r0, #1
 80036a4:	3330      	adds	r3, #48	; 0x30
 80036a6:	4291      	cmp	r1, r2
 80036a8:	bf08      	it	eq
 80036aa:	f040 0001 	orreq.w	r0, r0, #1
 80036ae:	3230      	adds	r2, #48	; 0x30
 80036b0:	4299      	cmp	r1, r3
 80036b2:	bf08      	it	eq
 80036b4:	f040 0001 	orreq.w	r0, r0, #1
 80036b8:	3330      	adds	r3, #48	; 0x30
 80036ba:	4291      	cmp	r1, r2
 80036bc:	bf08      	it	eq
 80036be:	f040 0001 	orreq.w	r0, r0, #1
 80036c2:	3230      	adds	r2, #48	; 0x30
 80036c4:	4299      	cmp	r1, r3
 80036c6:	bf08      	it	eq
 80036c8:	f040 0001 	orreq.w	r0, r0, #1
 80036cc:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80036d0:	4291      	cmp	r1, r2
 80036d2:	bf08      	it	eq
 80036d4:	f040 0001 	orreq.w	r0, r0, #1
 80036d8:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80036dc:	4299      	cmp	r1, r3
 80036de:	bf08      	it	eq
 80036e0:	f040 0001 	orreq.w	r0, r0, #1
 80036e4:	3330      	adds	r3, #48	; 0x30
 80036e6:	4291      	cmp	r1, r2
 80036e8:	bf08      	it	eq
 80036ea:	f040 0001 	orreq.w	r0, r0, #1
 80036ee:	3230      	adds	r2, #48	; 0x30
 80036f0:	4299      	cmp	r1, r3
 80036f2:	bf08      	it	eq
 80036f4:	f040 0001 	orreq.w	r0, r0, #1
 80036f8:	3330      	adds	r3, #48	; 0x30
 80036fa:	4291      	cmp	r1, r2
 80036fc:	bf08      	it	eq
 80036fe:	f040 0001 	orreq.w	r0, r0, #1
 8003702:	3230      	adds	r2, #48	; 0x30
 8003704:	4299      	cmp	r1, r3
 8003706:	bf08      	it	eq
 8003708:	f040 0001 	orreq.w	r0, r0, #1
 800370c:	3330      	adds	r3, #48	; 0x30
 800370e:	4291      	cmp	r1, r2
 8003710:	bf08      	it	eq
 8003712:	f040 0001 	orreq.w	r0, r0, #1
 8003716:	3230      	adds	r2, #48	; 0x30
 8003718:	4299      	cmp	r1, r3
 800371a:	bf08      	it	eq
 800371c:	f040 0001 	orreq.w	r0, r0, #1
 8003720:	4b78      	ldr	r3, [pc, #480]	; (8003904 <HAL_DMA_Start_IT+0x2e8>)
 8003722:	4291      	cmp	r1, r2
 8003724:	bf08      	it	eq
 8003726:	f040 0001 	orreq.w	r0, r0, #1
 800372a:	4a77      	ldr	r2, [pc, #476]	; (8003908 <HAL_DMA_Start_IT+0x2ec>)
 800372c:	4299      	cmp	r1, r3
 800372e:	bf08      	it	eq
 8003730:	f040 0001 	orreq.w	r0, r0, #1
 8003734:	3328      	adds	r3, #40	; 0x28
 8003736:	4291      	cmp	r1, r2
 8003738:	bf08      	it	eq
 800373a:	f040 0001 	orreq.w	r0, r0, #1
 800373e:	3228      	adds	r2, #40	; 0x28
 8003740:	4299      	cmp	r1, r3
 8003742:	bf08      	it	eq
 8003744:	f040 0001 	orreq.w	r0, r0, #1
 8003748:	3328      	adds	r3, #40	; 0x28
 800374a:	4291      	cmp	r1, r2
 800374c:	bf08      	it	eq
 800374e:	f040 0001 	orreq.w	r0, r0, #1
 8003752:	3228      	adds	r2, #40	; 0x28
 8003754:	4299      	cmp	r1, r3
 8003756:	bf08      	it	eq
 8003758:	f040 0001 	orreq.w	r0, r0, #1
 800375c:	3328      	adds	r3, #40	; 0x28
 800375e:	4291      	cmp	r1, r2
 8003760:	bf08      	it	eq
 8003762:	f040 0001 	orreq.w	r0, r0, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003766:	6da2      	ldr	r2, [r4, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003768:	4299      	cmp	r1, r3
 800376a:	bf08      	it	eq
 800376c:	f040 0001 	orreq.w	r0, r0, #1
 8003770:	b910      	cbnz	r0, 8003778 <HAL_DMA_Start_IT+0x15c>
 8003772:	3314      	adds	r3, #20
 8003774:	4299      	cmp	r1, r3
 8003776:	d108      	bne.n	800378a <HAL_DMA_Start_IT+0x16e>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003778:	e9d4 3119 	ldrd	r3, r1, [r4, #100]	; 0x64
 800377c:	6059      	str	r1, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800377e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003780:	b113      	cbz	r3, 8003788 <HAL_DMA_Start_IT+0x16c>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003782:	e9d4 311c 	ldrd	r3, r1, [r4, #112]	; 0x70
 8003786:	6059      	str	r1, [r3, #4]
 8003788:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800378a:	4b5b      	ldr	r3, [pc, #364]	; (80038f8 <HAL_DMA_Start_IT+0x2dc>)
 800378c:	f8df c16c 	ldr.w	ip, [pc, #364]	; 80038fc <HAL_DMA_Start_IT+0x2e0>
 8003790:	485b      	ldr	r0, [pc, #364]	; (8003900 <HAL_DMA_Start_IT+0x2e4>)
 8003792:	4561      	cmp	r1, ip
 8003794:	bf18      	it	ne
 8003796:	4299      	cmpne	r1, r3
 8003798:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800379c:	bf0c      	ite	eq
 800379e:	2301      	moveq	r3, #1
 80037a0:	2300      	movne	r3, #0
 80037a2:	4281      	cmp	r1, r0
 80037a4:	bf08      	it	eq
 80037a6:	f043 0301 	orreq.w	r3, r3, #1
 80037aa:	3030      	adds	r0, #48	; 0x30
 80037ac:	4561      	cmp	r1, ip
 80037ae:	bf08      	it	eq
 80037b0:	f043 0301 	orreq.w	r3, r3, #1
 80037b4:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80037b8:	4281      	cmp	r1, r0
 80037ba:	bf08      	it	eq
 80037bc:	f043 0301 	orreq.w	r3, r3, #1
 80037c0:	3030      	adds	r0, #48	; 0x30
 80037c2:	4561      	cmp	r1, ip
 80037c4:	bf08      	it	eq
 80037c6:	f043 0301 	orreq.w	r3, r3, #1
 80037ca:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80037ce:	4281      	cmp	r1, r0
 80037d0:	bf08      	it	eq
 80037d2:	f043 0301 	orreq.w	r3, r3, #1
 80037d6:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80037da:	4561      	cmp	r1, ip
 80037dc:	bf08      	it	eq
 80037de:	f043 0301 	orreq.w	r3, r3, #1
 80037e2:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 80037e6:	4281      	cmp	r1, r0
 80037e8:	bf08      	it	eq
 80037ea:	f043 0301 	orreq.w	r3, r3, #1
 80037ee:	3030      	adds	r0, #48	; 0x30
 80037f0:	4561      	cmp	r1, ip
 80037f2:	bf08      	it	eq
 80037f4:	f043 0301 	orreq.w	r3, r3, #1
 80037f8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80037fc:	4281      	cmp	r1, r0
 80037fe:	bf08      	it	eq
 8003800:	f043 0301 	orreq.w	r3, r3, #1
 8003804:	3030      	adds	r0, #48	; 0x30
 8003806:	4561      	cmp	r1, ip
 8003808:	bf08      	it	eq
 800380a:	f043 0301 	orreq.w	r3, r3, #1
 800380e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8003812:	4281      	cmp	r1, r0
 8003814:	bf08      	it	eq
 8003816:	f043 0301 	orreq.w	r3, r3, #1
 800381a:	3030      	adds	r0, #48	; 0x30
 800381c:	4561      	cmp	r1, ip
 800381e:	bf08      	it	eq
 8003820:	f043 0301 	orreq.w	r3, r3, #1
 8003824:	4281      	cmp	r1, r0
 8003826:	bf08      	it	eq
 8003828:	f043 0301 	orreq.w	r3, r3, #1
 800382c:	b91b      	cbnz	r3, 8003836 <HAL_DMA_Start_IT+0x21a>
 800382e:	4b37      	ldr	r3, [pc, #220]	; (800390c <HAL_DMA_Start_IT+0x2f0>)
 8003830:	4299      	cmp	r1, r3
 8003832:	f040 8174 	bne.w	8003b1e <HAL_DMA_Start_IT+0x502>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003836:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003838:	233f      	movs	r3, #63	; 0x3f
 800383a:	f001 011f 	and.w	r1, r1, #31
 800383e:	408b      	lsls	r3, r1
 8003840:	6093      	str	r3, [r2, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	6813      	ldr	r3, [r2, #0]
 8003846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384a:	6013      	str	r3, [r2, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	605d      	str	r5, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003850:	68a3      	ldr	r3, [r4, #8]
 8003852:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003854:	6823      	ldr	r3, [r4, #0]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003856:	f000 815b 	beq.w	8003b10 <HAL_DMA_Start_IT+0x4f4>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800385a:	609e      	str	r6, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	60df      	str	r7, [r3, #12]
 8003860:	6821      	ldr	r1, [r4, #0]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003862:	4b25      	ldr	r3, [pc, #148]	; (80038f8 <HAL_DMA_Start_IT+0x2dc>)
 8003864:	4825      	ldr	r0, [pc, #148]	; (80038fc <HAL_DMA_Start_IT+0x2e0>)
 8003866:	4a26      	ldr	r2, [pc, #152]	; (8003900 <HAL_DMA_Start_IT+0x2e4>)
 8003868:	4281      	cmp	r1, r0
 800386a:	bf18      	it	ne
 800386c:	4299      	cmpne	r1, r3
 800386e:	4d28      	ldr	r5, [pc, #160]	; (8003910 <HAL_DMA_Start_IT+0x2f4>)
 8003870:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8003874:	bf0c      	ite	eq
 8003876:	2301      	moveq	r3, #1
 8003878:	2300      	movne	r3, #0
 800387a:	4291      	cmp	r1, r2
 800387c:	bf08      	it	eq
 800387e:	f043 0301 	orreq.w	r3, r3, #1
 8003882:	3248      	adds	r2, #72	; 0x48
 8003884:	42a9      	cmp	r1, r5
 8003886:	bf08      	it	eq
 8003888:	f043 0301 	orreq.w	r3, r3, #1
 800388c:	3548      	adds	r5, #72	; 0x48
 800388e:	4281      	cmp	r1, r0
 8003890:	bf08      	it	eq
 8003892:	f043 0301 	orreq.w	r3, r3, #1
 8003896:	3048      	adds	r0, #72	; 0x48
 8003898:	4291      	cmp	r1, r2
 800389a:	bf08      	it	eq
 800389c:	f043 0301 	orreq.w	r3, r3, #1
 80038a0:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80038a4:	42a9      	cmp	r1, r5
 80038a6:	bf08      	it	eq
 80038a8:	f043 0301 	orreq.w	r3, r3, #1
 80038ac:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80038b0:	4281      	cmp	r1, r0
 80038b2:	bf08      	it	eq
 80038b4:	f043 0301 	orreq.w	r3, r3, #1
 80038b8:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80038bc:	4291      	cmp	r1, r2
 80038be:	bf08      	it	eq
 80038c0:	f043 0301 	orreq.w	r3, r3, #1
 80038c4:	3248      	adds	r2, #72	; 0x48
 80038c6:	42a9      	cmp	r1, r5
 80038c8:	bf08      	it	eq
 80038ca:	f043 0301 	orreq.w	r3, r3, #1
 80038ce:	3548      	adds	r5, #72	; 0x48
 80038d0:	4281      	cmp	r1, r0
 80038d2:	bf08      	it	eq
 80038d4:	f043 0301 	orreq.w	r3, r3, #1
 80038d8:	3048      	adds	r0, #72	; 0x48
 80038da:	4291      	cmp	r1, r2
 80038dc:	bf08      	it	eq
 80038de:	f043 0301 	orreq.w	r3, r3, #1
 80038e2:	3248      	adds	r2, #72	; 0x48
 80038e4:	42a9      	cmp	r1, r5
 80038e6:	bf08      	it	eq
 80038e8:	f043 0301 	orreq.w	r3, r3, #1
 80038ec:	4281      	cmp	r1, r0
 80038ee:	bf08      	it	eq
 80038f0:	f043 0301 	orreq.w	r3, r3, #1
 80038f4:	e00e      	b.n	8003914 <HAL_DMA_Start_IT+0x2f8>
 80038f6:	bf00      	nop
 80038f8:	40020010 	.word	0x40020010
 80038fc:	40020028 	.word	0x40020028
 8003900:	40020040 	.word	0x40020040
 8003904:	58025408 	.word	0x58025408
 8003908:	5802541c 	.word	0x5802541c
 800390c:	400204b8 	.word	0x400204b8
 8003910:	40020058 	.word	0x40020058
 8003914:	4291      	cmp	r1, r2
 8003916:	bf08      	it	eq
 8003918:	f043 0301 	orreq.w	r3, r3, #1
 800391c:	b91b      	cbnz	r3, 8003926 <HAL_DMA_Start_IT+0x30a>
 800391e:	4b9a      	ldr	r3, [pc, #616]	; (8003b88 <HAL_DMA_Start_IT+0x56c>)
 8003920:	4299      	cmp	r1, r3
 8003922:	f040 8145 	bne.w	8003bb0 <HAL_DMA_Start_IT+0x594>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003926:	680b      	ldr	r3, [r1, #0]
 8003928:	f023 031e 	bic.w	r3, r3, #30
 800392c:	f043 0316 	orr.w	r3, r3, #22
 8003930:	600b      	str	r3, [r1, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003934:	b123      	cbz	r3, 8003940 <HAL_DMA_Start_IT+0x324>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003936:	6822      	ldr	r2, [r4, #0]
 8003938:	6813      	ldr	r3, [r2, #0]
 800393a:	f043 0308 	orr.w	r3, r3, #8
 800393e:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003940:	6821      	ldr	r1, [r4, #0]
 8003942:	4b92      	ldr	r3, [pc, #584]	; (8003b8c <HAL_DMA_Start_IT+0x570>)
 8003944:	4a92      	ldr	r2, [pc, #584]	; (8003b90 <HAL_DMA_Start_IT+0x574>)
 8003946:	4d93      	ldr	r5, [pc, #588]	; (8003b94 <HAL_DMA_Start_IT+0x578>)
 8003948:	4291      	cmp	r1, r2
 800394a:	bf18      	it	ne
 800394c:	4299      	cmpne	r1, r3
 800394e:	4892      	ldr	r0, [pc, #584]	; (8003b98 <HAL_DMA_Start_IT+0x57c>)
 8003950:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	42a9      	cmp	r1, r5
 800395c:	bf08      	it	eq
 800395e:	f043 0301 	orreq.w	r3, r3, #1
 8003962:	3548      	adds	r5, #72	; 0x48
 8003964:	4281      	cmp	r1, r0
 8003966:	bf08      	it	eq
 8003968:	f043 0301 	orreq.w	r3, r3, #1
 800396c:	3048      	adds	r0, #72	; 0x48
 800396e:	4291      	cmp	r1, r2
 8003970:	bf08      	it	eq
 8003972:	f043 0301 	orreq.w	r3, r3, #1
 8003976:	3248      	adds	r2, #72	; 0x48
 8003978:	42a9      	cmp	r1, r5
 800397a:	bf08      	it	eq
 800397c:	f043 0301 	orreq.w	r3, r3, #1
 8003980:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8003984:	4281      	cmp	r1, r0
 8003986:	bf08      	it	eq
 8003988:	f043 0301 	orreq.w	r3, r3, #1
 800398c:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8003990:	4291      	cmp	r1, r2
 8003992:	bf08      	it	eq
 8003994:	f043 0301 	orreq.w	r3, r3, #1
 8003998:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800399c:	42a9      	cmp	r1, r5
 800399e:	bf08      	it	eq
 80039a0:	f043 0301 	orreq.w	r3, r3, #1
 80039a4:	3548      	adds	r5, #72	; 0x48
 80039a6:	4281      	cmp	r1, r0
 80039a8:	bf08      	it	eq
 80039aa:	f043 0301 	orreq.w	r3, r3, #1
 80039ae:	3048      	adds	r0, #72	; 0x48
 80039b0:	4291      	cmp	r1, r2
 80039b2:	bf08      	it	eq
 80039b4:	f043 0301 	orreq.w	r3, r3, #1
 80039b8:	3248      	adds	r2, #72	; 0x48
 80039ba:	42a9      	cmp	r1, r5
 80039bc:	bf08      	it	eq
 80039be:	f043 0301 	orreq.w	r3, r3, #1
 80039c2:	3548      	adds	r5, #72	; 0x48
 80039c4:	4281      	cmp	r1, r0
 80039c6:	bf08      	it	eq
 80039c8:	f043 0301 	orreq.w	r3, r3, #1
 80039cc:	3048      	adds	r0, #72	; 0x48
 80039ce:	4291      	cmp	r1, r2
 80039d0:	bf08      	it	eq
 80039d2:	f043 0301 	orreq.w	r3, r3, #1
 80039d6:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80039da:	42a9      	cmp	r1, r5
 80039dc:	bf08      	it	eq
 80039de:	f043 0301 	orreq.w	r3, r3, #1
 80039e2:	f502 429f 	add.w	r2, r2, #20352	; 0x4f80
 80039e6:	4d6d      	ldr	r5, [pc, #436]	; (8003b9c <HAL_DMA_Start_IT+0x580>)
 80039e8:	4281      	cmp	r1, r0
 80039ea:	bf08      	it	eq
 80039ec:	f043 0301 	orreq.w	r3, r3, #1
 80039f0:	486b      	ldr	r0, [pc, #428]	; (8003ba0 <HAL_DMA_Start_IT+0x584>)
 80039f2:	4291      	cmp	r1, r2
 80039f4:	bf08      	it	eq
 80039f6:	f043 0301 	orreq.w	r3, r3, #1
 80039fa:	323c      	adds	r2, #60	; 0x3c
 80039fc:	42a9      	cmp	r1, r5
 80039fe:	bf08      	it	eq
 8003a00:	f043 0301 	orreq.w	r3, r3, #1
 8003a04:	353c      	adds	r5, #60	; 0x3c
 8003a06:	4281      	cmp	r1, r0
 8003a08:	bf08      	it	eq
 8003a0a:	f043 0301 	orreq.w	r3, r3, #1
 8003a0e:	303c      	adds	r0, #60	; 0x3c
 8003a10:	4291      	cmp	r1, r2
 8003a12:	bf08      	it	eq
 8003a14:	f043 0301 	orreq.w	r3, r3, #1
 8003a18:	323c      	adds	r2, #60	; 0x3c
 8003a1a:	42a9      	cmp	r1, r5
 8003a1c:	bf08      	it	eq
 8003a1e:	f043 0301 	orreq.w	r3, r3, #1
 8003a22:	4281      	cmp	r1, r0
 8003a24:	bf08      	it	eq
 8003a26:	f043 0301 	orreq.w	r3, r3, #1
 8003a2a:	4291      	cmp	r1, r2
 8003a2c:	bf08      	it	eq
 8003a2e:	f043 0301 	orreq.w	r3, r3, #1
 8003a32:	b913      	cbnz	r3, 8003a3a <HAL_DMA_Start_IT+0x41e>
 8003a34:	4b5b      	ldr	r3, [pc, #364]	; (8003ba4 <HAL_DMA_Start_IT+0x588>)
 8003a36:	4299      	cmp	r1, r3
 8003a38:	d10e      	bne.n	8003a58 <HAL_DMA_Start_IT+0x43c>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a3a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	03d2      	lsls	r2, r2, #15
 8003a40:	d503      	bpl.n	8003a4a <HAL_DMA_Start_IT+0x42e>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a48:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8003a4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003a4c:	b11b      	cbz	r3, 8003a56 <HAL_DMA_Start_IT+0x43a>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	6821      	ldr	r1, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003a58:	4b4c      	ldr	r3, [pc, #304]	; (8003b8c <HAL_DMA_Start_IT+0x570>)
 8003a5a:	484d      	ldr	r0, [pc, #308]	; (8003b90 <HAL_DMA_Start_IT+0x574>)
 8003a5c:	4a4d      	ldr	r2, [pc, #308]	; (8003b94 <HAL_DMA_Start_IT+0x578>)
 8003a5e:	4281      	cmp	r1, r0
 8003a60:	bf18      	it	ne
 8003a62:	4299      	cmpne	r1, r3
 8003a64:	4d4c      	ldr	r5, [pc, #304]	; (8003b98 <HAL_DMA_Start_IT+0x57c>)
 8003a66:	4c50      	ldr	r4, [pc, #320]	; (8003ba8 <HAL_DMA_Start_IT+0x58c>)
 8003a68:	f100 0060 	add.w	r0, r0, #96	; 0x60
 8003a6c:	bf0c      	ite	eq
 8003a6e:	2301      	moveq	r3, #1
 8003a70:	2300      	movne	r3, #0
 8003a72:	4291      	cmp	r1, r2
 8003a74:	bf08      	it	eq
 8003a76:	f043 0301 	orreq.w	r3, r3, #1
 8003a7a:	3260      	adds	r2, #96	; 0x60
 8003a7c:	42a9      	cmp	r1, r5
 8003a7e:	bf08      	it	eq
 8003a80:	f043 0301 	orreq.w	r3, r3, #1
 8003a84:	3560      	adds	r5, #96	; 0x60
 8003a86:	42a1      	cmp	r1, r4
 8003a88:	bf08      	it	eq
 8003a8a:	f043 0301 	orreq.w	r3, r3, #1
 8003a8e:	f504 7468 	add.w	r4, r4, #928	; 0x3a0
 8003a92:	4281      	cmp	r1, r0
 8003a94:	bf08      	it	eq
 8003a96:	f043 0301 	orreq.w	r3, r3, #1
 8003a9a:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8003a9e:	4291      	cmp	r1, r2
 8003aa0:	bf08      	it	eq
 8003aa2:	f043 0301 	orreq.w	r3, r3, #1
 8003aa6:	f502 7268 	add.w	r2, r2, #928	; 0x3a0
 8003aaa:	42a9      	cmp	r1, r5
 8003aac:	bf08      	it	eq
 8003aae:	f043 0301 	orreq.w	r3, r3, #1
 8003ab2:	f505 7568 	add.w	r5, r5, #928	; 0x3a0
 8003ab6:	42a1      	cmp	r1, r4
 8003ab8:	bf08      	it	eq
 8003aba:	f043 0301 	orreq.w	r3, r3, #1
 8003abe:	3460      	adds	r4, #96	; 0x60
 8003ac0:	4281      	cmp	r1, r0
 8003ac2:	bf08      	it	eq
 8003ac4:	f043 0301 	orreq.w	r3, r3, #1
 8003ac8:	3060      	adds	r0, #96	; 0x60
 8003aca:	4291      	cmp	r1, r2
 8003acc:	bf08      	it	eq
 8003ace:	f043 0301 	orreq.w	r3, r3, #1
 8003ad2:	3260      	adds	r2, #96	; 0x60
 8003ad4:	42a9      	cmp	r1, r5
 8003ad6:	bf08      	it	eq
 8003ad8:	f043 0301 	orreq.w	r3, r3, #1
 8003adc:	42a1      	cmp	r1, r4
 8003ade:	bf08      	it	eq
 8003ae0:	f043 0301 	orreq.w	r3, r3, #1
 8003ae4:	4281      	cmp	r1, r0
 8003ae6:	bf08      	it	eq
 8003ae8:	f043 0301 	orreq.w	r3, r3, #1
 8003aec:	4291      	cmp	r1, r2
 8003aee:	bf08      	it	eq
 8003af0:	f043 0301 	orreq.w	r3, r3, #1
 8003af4:	b933      	cbnz	r3, 8003b04 <HAL_DMA_Start_IT+0x4e8>
 8003af6:	3030      	adds	r0, #48	; 0x30
 8003af8:	1a08      	subs	r0, r1, r0
 8003afa:	fab0 f080 	clz	r0, r0
 8003afe:	0940      	lsrs	r0, r0, #5
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d03c      	beq.n	8003b7e <HAL_DMA_Start_IT+0x562>
 8003b04:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b06:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	600b      	str	r3, [r1, #0]
}
 8003b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003b10:	609f      	str	r7, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	60de      	str	r6, [r3, #12]
 8003b16:	6821      	ldr	r1, [r4, #0]
 8003b18:	e6a3      	b.n	8003862 <HAL_DMA_Start_IT+0x246>
  __HAL_LOCK(hdma);
 8003b1a:	2002      	movs	r0, #2
}
 8003b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b1e:	4b23      	ldr	r3, [pc, #140]	; (8003bac <HAL_DMA_Start_IT+0x590>)
 8003b20:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003b9c <HAL_DMA_Start_IT+0x580>
 8003b24:	481e      	ldr	r0, [pc, #120]	; (8003ba0 <HAL_DMA_Start_IT+0x584>)
 8003b26:	4561      	cmp	r1, ip
 8003b28:	bf18      	it	ne
 8003b2a:	4299      	cmpne	r1, r3
 8003b2c:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8003b30:	bf0c      	ite	eq
 8003b32:	2301      	moveq	r3, #1
 8003b34:	2300      	movne	r3, #0
 8003b36:	4281      	cmp	r1, r0
 8003b38:	bf08      	it	eq
 8003b3a:	f043 0301 	orreq.w	r3, r3, #1
 8003b3e:	3028      	adds	r0, #40	; 0x28
 8003b40:	4561      	cmp	r1, ip
 8003b42:	bf08      	it	eq
 8003b44:	f043 0301 	orreq.w	r3, r3, #1
 8003b48:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8003b4c:	4281      	cmp	r1, r0
 8003b4e:	bf08      	it	eq
 8003b50:	f043 0301 	orreq.w	r3, r3, #1
 8003b54:	3028      	adds	r0, #40	; 0x28
 8003b56:	4561      	cmp	r1, ip
 8003b58:	bf08      	it	eq
 8003b5a:	f043 0301 	orreq.w	r3, r3, #1
 8003b5e:	4281      	cmp	r1, r0
 8003b60:	bf08      	it	eq
 8003b62:	f043 0301 	orreq.w	r3, r3, #1
 8003b66:	b91b      	cbnz	r3, 8003b70 <HAL_DMA_Start_IT+0x554>
 8003b68:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <HAL_DMA_Start_IT+0x588>)
 8003b6a:	4299      	cmp	r1, r3
 8003b6c:	f47f ae79 	bne.w	8003862 <HAL_DMA_Start_IT+0x246>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003b72:	2301      	movs	r3, #1
 8003b74:	f001 011f 	and.w	r1, r1, #31
 8003b78:	408b      	lsls	r3, r1
 8003b7a:	6053      	str	r3, [r2, #4]
 8003b7c:	e666      	b.n	800384c <HAL_DMA_Start_IT+0x230>
    __HAL_DMA_ENABLE(hdma);
 8003b7e:	680b      	ldr	r3, [r1, #0]
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	600b      	str	r3, [r1, #0]
}
 8003b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b88:	400204b8 	.word	0x400204b8
 8003b8c:	40020010 	.word	0x40020010
 8003b90:	40020028 	.word	0x40020028
 8003b94:	40020040 	.word	0x40020040
 8003b98:	40020058 	.word	0x40020058
 8003b9c:	5802541c 	.word	0x5802541c
 8003ba0:	58025430 	.word	0x58025430
 8003ba4:	58025494 	.word	0x58025494
 8003ba8:	40020070 	.word	0x40020070
 8003bac:	58025408 	.word	0x58025408
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003bb0:	680b      	ldr	r3, [r1, #0]
 8003bb2:	f023 030e 	bic.w	r3, r3, #14
 8003bb6:	f043 030a 	orr.w	r3, r3, #10
 8003bba:	600b      	str	r3, [r1, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003bbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f43f aebe 	beq.w	8003940 <HAL_DMA_Start_IT+0x324>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003bc4:	6822      	ldr	r2, [r4, #0]
 8003bc6:	6813      	ldr	r3, [r2, #0]
 8003bc8:	f043 0304 	orr.w	r3, r3, #4
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e6b7      	b.n	8003940 <HAL_DMA_Start_IT+0x324>

08003bd0 <HAL_DMA_Abort>:
{
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8003bd4:	f7fd f836 	bl	8000c44 <HAL_GetTick>
  if(hdma == NULL)
 8003bd8:	2e00      	cmp	r6, #0
 8003bda:	f000 81ef 	beq.w	8003fbc <HAL_DMA_Abort+0x3ec>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bde:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d006      	beq.n	8003bf4 <HAL_DMA_Abort+0x24>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003be6:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8003be8:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003bea:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bec:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003bee:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bf4:	6832      	ldr	r2, [r6, #0]
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	4b6f      	ldr	r3, [pc, #444]	; (8003db8 <HAL_DMA_Abort+0x1e8>)
 8003bfa:	4870      	ldr	r0, [pc, #448]	; (8003dbc <HAL_DMA_Abort+0x1ec>)
 8003bfc:	4970      	ldr	r1, [pc, #448]	; (8003dc0 <HAL_DMA_Abort+0x1f0>)
 8003bfe:	4282      	cmp	r2, r0
 8003c00:	bf18      	it	ne
 8003c02:	429a      	cmpne	r2, r3
 8003c04:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8003c08:	bf0c      	ite	eq
 8003c0a:	2301      	moveq	r3, #1
 8003c0c:	2300      	movne	r3, #0
 8003c0e:	428a      	cmp	r2, r1
 8003c10:	bf08      	it	eq
 8003c12:	f043 0301 	orreq.w	r3, r3, #1
 8003c16:	3130      	adds	r1, #48	; 0x30
 8003c18:	4282      	cmp	r2, r0
 8003c1a:	bf08      	it	eq
 8003c1c:	f043 0301 	orreq.w	r3, r3, #1
 8003c20:	3030      	adds	r0, #48	; 0x30
 8003c22:	428a      	cmp	r2, r1
 8003c24:	bf08      	it	eq
 8003c26:	f043 0301 	orreq.w	r3, r3, #1
 8003c2a:	3130      	adds	r1, #48	; 0x30
 8003c2c:	4282      	cmp	r2, r0
 8003c2e:	bf08      	it	eq
 8003c30:	f043 0301 	orreq.w	r3, r3, #1
 8003c34:	3030      	adds	r0, #48	; 0x30
 8003c36:	428a      	cmp	r2, r1
 8003c38:	bf08      	it	eq
 8003c3a:	f043 0301 	orreq.w	r3, r3, #1
 8003c3e:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003c42:	4282      	cmp	r2, r0
 8003c44:	bf08      	it	eq
 8003c46:	f043 0301 	orreq.w	r3, r3, #1
 8003c4a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003c4e:	428a      	cmp	r2, r1
 8003c50:	bf08      	it	eq
 8003c52:	f043 0301 	orreq.w	r3, r3, #1
 8003c56:	3130      	adds	r1, #48	; 0x30
 8003c58:	4282      	cmp	r2, r0
 8003c5a:	bf08      	it	eq
 8003c5c:	f043 0301 	orreq.w	r3, r3, #1
 8003c60:	3030      	adds	r0, #48	; 0x30
 8003c62:	428a      	cmp	r2, r1
 8003c64:	bf08      	it	eq
 8003c66:	f043 0301 	orreq.w	r3, r3, #1
 8003c6a:	3130      	adds	r1, #48	; 0x30
 8003c6c:	4282      	cmp	r2, r0
 8003c6e:	bf08      	it	eq
 8003c70:	f043 0301 	orreq.w	r3, r3, #1
 8003c74:	3030      	adds	r0, #48	; 0x30
 8003c76:	428a      	cmp	r2, r1
 8003c78:	bf08      	it	eq
 8003c7a:	f043 0301 	orreq.w	r3, r3, #1
 8003c7e:	3130      	adds	r1, #48	; 0x30
 8003c80:	4282      	cmp	r2, r0
 8003c82:	bf08      	it	eq
 8003c84:	f043 0301 	orreq.w	r3, r3, #1
 8003c88:	428a      	cmp	r2, r1
 8003c8a:	bf08      	it	eq
 8003c8c:	f043 0301 	orreq.w	r3, r3, #1
 8003c90:	b91b      	cbnz	r3, 8003c9a <HAL_DMA_Abort+0xca>
 8003c92:	4b4c      	ldr	r3, [pc, #304]	; (8003dc4 <HAL_DMA_Abort+0x1f4>)
 8003c94:	429a      	cmp	r2, r3
 8003c96:	f040 819d 	bne.w	8003fd4 <HAL_DMA_Abort+0x404>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003c9a:	6813      	ldr	r3, [r2, #0]
 8003c9c:	f023 031e 	bic.w	r3, r3, #30
 8003ca0:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ca2:	6832      	ldr	r2, [r6, #0]
 8003ca4:	6953      	ldr	r3, [r2, #20]
 8003ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003caa:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003cac:	6832      	ldr	r2, [r6, #0]
 8003cae:	4615      	mov	r5, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cb0:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <HAL_DMA_Abort+0x1e8>)
 8003cb2:	4842      	ldr	r0, [pc, #264]	; (8003dbc <HAL_DMA_Abort+0x1ec>)
 8003cb4:	4942      	ldr	r1, [pc, #264]	; (8003dc0 <HAL_DMA_Abort+0x1f0>)
 8003cb6:	4282      	cmp	r2, r0
 8003cb8:	bf18      	it	ne
 8003cba:	429a      	cmpne	r2, r3
 8003cbc:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8003cc0:	bf0c      	ite	eq
 8003cc2:	2301      	moveq	r3, #1
 8003cc4:	2300      	movne	r3, #0
 8003cc6:	428a      	cmp	r2, r1
 8003cc8:	bf08      	it	eq
 8003cca:	f043 0301 	orreq.w	r3, r3, #1
 8003cce:	3130      	adds	r1, #48	; 0x30
 8003cd0:	4282      	cmp	r2, r0
 8003cd2:	bf08      	it	eq
 8003cd4:	f043 0301 	orreq.w	r3, r3, #1
 8003cd8:	3030      	adds	r0, #48	; 0x30
 8003cda:	428a      	cmp	r2, r1
 8003cdc:	bf08      	it	eq
 8003cde:	f043 0301 	orreq.w	r3, r3, #1
 8003ce2:	3130      	adds	r1, #48	; 0x30
 8003ce4:	4282      	cmp	r2, r0
 8003ce6:	bf08      	it	eq
 8003ce8:	f043 0301 	orreq.w	r3, r3, #1
 8003cec:	3030      	adds	r0, #48	; 0x30
 8003cee:	428a      	cmp	r2, r1
 8003cf0:	bf08      	it	eq
 8003cf2:	f043 0301 	orreq.w	r3, r3, #1
 8003cf6:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003cfa:	4282      	cmp	r2, r0
 8003cfc:	bf08      	it	eq
 8003cfe:	f043 0301 	orreq.w	r3, r3, #1
 8003d02:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003d06:	428a      	cmp	r2, r1
 8003d08:	bf08      	it	eq
 8003d0a:	f043 0301 	orreq.w	r3, r3, #1
 8003d0e:	3130      	adds	r1, #48	; 0x30
 8003d10:	4282      	cmp	r2, r0
 8003d12:	bf08      	it	eq
 8003d14:	f043 0301 	orreq.w	r3, r3, #1
 8003d18:	3030      	adds	r0, #48	; 0x30
 8003d1a:	428a      	cmp	r2, r1
 8003d1c:	bf08      	it	eq
 8003d1e:	f043 0301 	orreq.w	r3, r3, #1
 8003d22:	3130      	adds	r1, #48	; 0x30
 8003d24:	4282      	cmp	r2, r0
 8003d26:	bf08      	it	eq
 8003d28:	f043 0301 	orreq.w	r3, r3, #1
 8003d2c:	3030      	adds	r0, #48	; 0x30
 8003d2e:	428a      	cmp	r2, r1
 8003d30:	bf08      	it	eq
 8003d32:	f043 0301 	orreq.w	r3, r3, #1
 8003d36:	3130      	adds	r1, #48	; 0x30
 8003d38:	4282      	cmp	r2, r0
 8003d3a:	bf08      	it	eq
 8003d3c:	f043 0301 	orreq.w	r3, r3, #1
 8003d40:	3030      	adds	r0, #48	; 0x30
 8003d42:	428a      	cmp	r2, r1
 8003d44:	bf08      	it	eq
 8003d46:	f043 0301 	orreq.w	r3, r3, #1
 8003d4a:	491f      	ldr	r1, [pc, #124]	; (8003dc8 <HAL_DMA_Abort+0x1f8>)
 8003d4c:	4282      	cmp	r2, r0
 8003d4e:	bf08      	it	eq
 8003d50:	f043 0301 	orreq.w	r3, r3, #1
 8003d54:	481d      	ldr	r0, [pc, #116]	; (8003dcc <HAL_DMA_Abort+0x1fc>)
 8003d56:	428a      	cmp	r2, r1
 8003d58:	bf08      	it	eq
 8003d5a:	f043 0301 	orreq.w	r3, r3, #1
 8003d5e:	3128      	adds	r1, #40	; 0x28
 8003d60:	4282      	cmp	r2, r0
 8003d62:	bf08      	it	eq
 8003d64:	f043 0301 	orreq.w	r3, r3, #1
 8003d68:	3028      	adds	r0, #40	; 0x28
 8003d6a:	428a      	cmp	r2, r1
 8003d6c:	bf08      	it	eq
 8003d6e:	f043 0301 	orreq.w	r3, r3, #1
 8003d72:	3128      	adds	r1, #40	; 0x28
 8003d74:	4282      	cmp	r2, r0
 8003d76:	bf08      	it	eq
 8003d78:	f043 0301 	orreq.w	r3, r3, #1
 8003d7c:	3028      	adds	r0, #40	; 0x28
 8003d7e:	428a      	cmp	r2, r1
 8003d80:	bf08      	it	eq
 8003d82:	f043 0301 	orreq.w	r3, r3, #1
 8003d86:	3128      	adds	r1, #40	; 0x28
 8003d88:	4282      	cmp	r2, r0
 8003d8a:	bf08      	it	eq
 8003d8c:	f043 0301 	orreq.w	r3, r3, #1
 8003d90:	428a      	cmp	r2, r1
 8003d92:	bf08      	it	eq
 8003d94:	f043 0301 	orreq.w	r3, r3, #1
 8003d98:	b913      	cbnz	r3, 8003da0 <HAL_DMA_Abort+0x1d0>
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <HAL_DMA_Abort+0x200>)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d105      	bne.n	8003dac <HAL_DMA_Abort+0x1dc>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003da0:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8003da2:	6813      	ldr	r3, [r2, #0]
 8003da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	6832      	ldr	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8003dac:	6813      	ldr	r3, [r2, #0]
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	e014      	b.n	8003de0 <HAL_DMA_Abort+0x210>
 8003db6:	bf00      	nop
 8003db8:	40020010 	.word	0x40020010
 8003dbc:	40020028 	.word	0x40020028
 8003dc0:	40020040 	.word	0x40020040
 8003dc4:	400204b8 	.word	0x400204b8
 8003dc8:	58025408 	.word	0x58025408
 8003dcc:	5802541c 	.word	0x5802541c
 8003dd0:	58025494 	.word	0x58025494
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dd4:	f7fc ff36 	bl	8000c44 <HAL_GetTick>
 8003dd8:	1b00      	subs	r0, r0, r4
 8003dda:	2805      	cmp	r0, #5
 8003ddc:	f200 80f0 	bhi.w	8003fc0 <HAL_DMA_Abort+0x3f0>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003de0:	682b      	ldr	r3, [r5, #0]
 8003de2:	07db      	lsls	r3, r3, #31
 8003de4:	d4f6      	bmi.n	8003dd4 <HAL_DMA_Abort+0x204>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003de6:	6832      	ldr	r2, [r6, #0]
 8003de8:	4b80      	ldr	r3, [pc, #512]	; (8003fec <HAL_DMA_Abort+0x41c>)
 8003dea:	4981      	ldr	r1, [pc, #516]	; (8003ff0 <HAL_DMA_Abort+0x420>)
 8003dec:	4c81      	ldr	r4, [pc, #516]	; (8003ff4 <HAL_DMA_Abort+0x424>)
 8003dee:	428a      	cmp	r2, r1
 8003df0:	bf18      	it	ne
 8003df2:	429a      	cmpne	r2, r3
 8003df4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003df8:	487f      	ldr	r0, [pc, #508]	; (8003ff8 <HAL_DMA_Abort+0x428>)
 8003dfa:	bf0c      	ite	eq
 8003dfc:	2301      	moveq	r3, #1
 8003dfe:	2300      	movne	r3, #0
 8003e00:	42a2      	cmp	r2, r4
 8003e02:	bf08      	it	eq
 8003e04:	f043 0301 	orreq.w	r3, r3, #1
 8003e08:	3448      	adds	r4, #72	; 0x48
 8003e0a:	428a      	cmp	r2, r1
 8003e0c:	bf08      	it	eq
 8003e0e:	f043 0301 	orreq.w	r3, r3, #1
 8003e12:	3148      	adds	r1, #72	; 0x48
 8003e14:	4282      	cmp	r2, r0
 8003e16:	bf08      	it	eq
 8003e18:	f043 0301 	orreq.w	r3, r3, #1
 8003e1c:	3048      	adds	r0, #72	; 0x48
 8003e1e:	42a2      	cmp	r2, r4
 8003e20:	bf08      	it	eq
 8003e22:	f043 0301 	orreq.w	r3, r3, #1
 8003e26:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8003e2a:	428a      	cmp	r2, r1
 8003e2c:	bf08      	it	eq
 8003e2e:	f043 0301 	orreq.w	r3, r3, #1
 8003e32:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8003e36:	4282      	cmp	r2, r0
 8003e38:	bf08      	it	eq
 8003e3a:	f043 0301 	orreq.w	r3, r3, #1
 8003e3e:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8003e42:	42a2      	cmp	r2, r4
 8003e44:	bf08      	it	eq
 8003e46:	f043 0301 	orreq.w	r3, r3, #1
 8003e4a:	3448      	adds	r4, #72	; 0x48
 8003e4c:	428a      	cmp	r2, r1
 8003e4e:	bf08      	it	eq
 8003e50:	f043 0301 	orreq.w	r3, r3, #1
 8003e54:	3148      	adds	r1, #72	; 0x48
 8003e56:	4282      	cmp	r2, r0
 8003e58:	bf08      	it	eq
 8003e5a:	f043 0301 	orreq.w	r3, r3, #1
 8003e5e:	3048      	adds	r0, #72	; 0x48
 8003e60:	42a2      	cmp	r2, r4
 8003e62:	bf08      	it	eq
 8003e64:	f043 0301 	orreq.w	r3, r3, #1
 8003e68:	3448      	adds	r4, #72	; 0x48
 8003e6a:	428a      	cmp	r2, r1
 8003e6c:	bf08      	it	eq
 8003e6e:	f043 0301 	orreq.w	r3, r3, #1
 8003e72:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8003e74:	4282      	cmp	r2, r0
 8003e76:	bf08      	it	eq
 8003e78:	f043 0301 	orreq.w	r3, r3, #1
 8003e7c:	f001 011f 	and.w	r1, r1, #31
 8003e80:	6db0      	ldr	r0, [r6, #88]	; 0x58
 8003e82:	42a2      	cmp	r2, r4
 8003e84:	bf08      	it	eq
 8003e86:	f043 0301 	orreq.w	r3, r3, #1
 8003e8a:	b91b      	cbnz	r3, 8003e94 <HAL_DMA_Abort+0x2c4>
 8003e8c:	4b5b      	ldr	r3, [pc, #364]	; (8003ffc <HAL_DMA_Abort+0x42c>)
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	f040 80a7 	bne.w	8003fe2 <HAL_DMA_Abort+0x412>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e94:	233f      	movs	r3, #63	; 0x3f
 8003e96:	fa03 f101 	lsl.w	r1, r3, r1
 8003e9a:	6081      	str	r1, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e9c:	6832      	ldr	r2, [r6, #0]
 8003e9e:	4b53      	ldr	r3, [pc, #332]	; (8003fec <HAL_DMA_Abort+0x41c>)
 8003ea0:	4953      	ldr	r1, [pc, #332]	; (8003ff0 <HAL_DMA_Abort+0x420>)
 8003ea2:	4c54      	ldr	r4, [pc, #336]	; (8003ff4 <HAL_DMA_Abort+0x424>)
 8003ea4:	428a      	cmp	r2, r1
 8003ea6:	bf18      	it	ne
 8003ea8:	429a      	cmpne	r2, r3
 8003eaa:	4855      	ldr	r0, [pc, #340]	; (8004000 <HAL_DMA_Abort+0x430>)
 8003eac:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8003eb0:	bf0c      	ite	eq
 8003eb2:	2301      	moveq	r3, #1
 8003eb4:	2300      	movne	r3, #0
 8003eb6:	42a2      	cmp	r2, r4
 8003eb8:	bf08      	it	eq
 8003eba:	f043 0301 	orreq.w	r3, r3, #1
 8003ebe:	3448      	adds	r4, #72	; 0x48
 8003ec0:	4282      	cmp	r2, r0
 8003ec2:	bf08      	it	eq
 8003ec4:	f043 0301 	orreq.w	r3, r3, #1
 8003ec8:	3048      	adds	r0, #72	; 0x48
 8003eca:	428a      	cmp	r2, r1
 8003ecc:	bf08      	it	eq
 8003ece:	f043 0301 	orreq.w	r3, r3, #1
 8003ed2:	3148      	adds	r1, #72	; 0x48
 8003ed4:	42a2      	cmp	r2, r4
 8003ed6:	bf08      	it	eq
 8003ed8:	f043 0301 	orreq.w	r3, r3, #1
 8003edc:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8003ee0:	4282      	cmp	r2, r0
 8003ee2:	bf08      	it	eq
 8003ee4:	f043 0301 	orreq.w	r3, r3, #1
 8003ee8:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8003eec:	428a      	cmp	r2, r1
 8003eee:	bf08      	it	eq
 8003ef0:	f043 0301 	orreq.w	r3, r3, #1
 8003ef4:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8003ef8:	42a2      	cmp	r2, r4
 8003efa:	bf08      	it	eq
 8003efc:	f043 0301 	orreq.w	r3, r3, #1
 8003f00:	3448      	adds	r4, #72	; 0x48
 8003f02:	4282      	cmp	r2, r0
 8003f04:	bf08      	it	eq
 8003f06:	f043 0301 	orreq.w	r3, r3, #1
 8003f0a:	3048      	adds	r0, #72	; 0x48
 8003f0c:	428a      	cmp	r2, r1
 8003f0e:	bf08      	it	eq
 8003f10:	f043 0301 	orreq.w	r3, r3, #1
 8003f14:	3148      	adds	r1, #72	; 0x48
 8003f16:	42a2      	cmp	r2, r4
 8003f18:	bf08      	it	eq
 8003f1a:	f043 0301 	orreq.w	r3, r3, #1
 8003f1e:	3448      	adds	r4, #72	; 0x48
 8003f20:	4282      	cmp	r2, r0
 8003f22:	bf08      	it	eq
 8003f24:	f043 0301 	orreq.w	r3, r3, #1
 8003f28:	3048      	adds	r0, #72	; 0x48
 8003f2a:	428a      	cmp	r2, r1
 8003f2c:	bf08      	it	eq
 8003f2e:	f043 0301 	orreq.w	r3, r3, #1
 8003f32:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8003f36:	42a2      	cmp	r2, r4
 8003f38:	bf08      	it	eq
 8003f3a:	f043 0301 	orreq.w	r3, r3, #1
 8003f3e:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 8003f42:	4c30      	ldr	r4, [pc, #192]	; (8004004 <HAL_DMA_Abort+0x434>)
 8003f44:	4282      	cmp	r2, r0
 8003f46:	bf08      	it	eq
 8003f48:	f043 0301 	orreq.w	r3, r3, #1
 8003f4c:	482e      	ldr	r0, [pc, #184]	; (8004008 <HAL_DMA_Abort+0x438>)
 8003f4e:	428a      	cmp	r2, r1
 8003f50:	bf08      	it	eq
 8003f52:	f043 0301 	orreq.w	r3, r3, #1
 8003f56:	313c      	adds	r1, #60	; 0x3c
 8003f58:	42a2      	cmp	r2, r4
 8003f5a:	bf08      	it	eq
 8003f5c:	f043 0301 	orreq.w	r3, r3, #1
 8003f60:	343c      	adds	r4, #60	; 0x3c
 8003f62:	4282      	cmp	r2, r0
 8003f64:	bf08      	it	eq
 8003f66:	f043 0301 	orreq.w	r3, r3, #1
 8003f6a:	303c      	adds	r0, #60	; 0x3c
 8003f6c:	428a      	cmp	r2, r1
 8003f6e:	bf08      	it	eq
 8003f70:	f043 0301 	orreq.w	r3, r3, #1
 8003f74:	313c      	adds	r1, #60	; 0x3c
 8003f76:	42a2      	cmp	r2, r4
 8003f78:	bf08      	it	eq
 8003f7a:	f043 0301 	orreq.w	r3, r3, #1
 8003f7e:	4282      	cmp	r2, r0
 8003f80:	bf08      	it	eq
 8003f82:	f043 0301 	orreq.w	r3, r3, #1
 8003f86:	428a      	cmp	r2, r1
 8003f88:	bf08      	it	eq
 8003f8a:	f043 0301 	orreq.w	r3, r3, #1
 8003f8e:	b913      	cbnz	r3, 8003f96 <HAL_DMA_Abort+0x3c6>
 8003f90:	4b1e      	ldr	r3, [pc, #120]	; (800400c <HAL_DMA_Abort+0x43c>)
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d10b      	bne.n	8003fae <HAL_DMA_Abort+0x3de>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f96:	e9d6 3219 	ldrd	r3, r2, [r6, #100]	; 0x64
 8003f9a:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8003f9c:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8003f9e:	b133      	cbz	r3, 8003fae <HAL_DMA_Abort+0x3de>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fa6:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fa8:	e9d6 321c 	ldrd	r3, r2, [r6, #112]	; 0x70
 8003fac:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8003fae:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003fb0:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8003fb2:	f886 0034 	strb.w	r0, [r6, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8003fb6:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
}
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003fbc:	2001      	movs	r0, #1
}
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fc0:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8003fc2:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 8003fc4:	2303      	movs	r3, #3
        return HAL_ERROR;
 8003fc6:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fc8:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8003fca:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8003fce:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
}
 8003fd2:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003fd4:	6813      	ldr	r3, [r2, #0]
 8003fd6:	f023 030e 	bic.w	r3, r3, #14
 8003fda:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003fdc:	6832      	ldr	r2, [r6, #0]
 8003fde:	4615      	mov	r5, r2
 8003fe0:	e666      	b.n	8003cb0 <HAL_DMA_Abort+0xe0>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	fa03 f101 	lsl.w	r1, r3, r1
 8003fe8:	6041      	str	r1, [r0, #4]
 8003fea:	e757      	b.n	8003e9c <HAL_DMA_Abort+0x2cc>
 8003fec:	40020010 	.word	0x40020010
 8003ff0:	40020028 	.word	0x40020028
 8003ff4:	40020040 	.word	0x40020040
 8003ff8:	40020070 	.word	0x40020070
 8003ffc:	400204b8 	.word	0x400204b8
 8004000:	40020058 	.word	0x40020058
 8004004:	5802541c 	.word	0x5802541c
 8004008:	58025430 	.word	0x58025430
 800400c:	58025494 	.word	0x58025494

08004010 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004010:	2800      	cmp	r0, #0
 8004012:	d06a      	beq.n	80040ea <HAL_DMA_Abort_IT+0xda>
{
 8004014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004018:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800401c:	4603      	mov	r3, r0
 800401e:	2a02      	cmp	r2, #2
 8004020:	d004      	beq.n	800402c <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004022:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8004024:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
}
 8004028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800402c:	6802      	ldr	r2, [r0, #0]
 800402e:	4986      	ldr	r1, [pc, #536]	; (8004248 <HAL_DMA_Abort_IT+0x238>)
 8004030:	428a      	cmp	r2, r1
 8004032:	d050      	beq.n	80040d6 <HAL_DMA_Abort_IT+0xc6>
 8004034:	4885      	ldr	r0, [pc, #532]	; (800424c <HAL_DMA_Abort_IT+0x23c>)
 8004036:	4282      	cmp	r2, r0
 8004038:	d04d      	beq.n	80040d6 <HAL_DMA_Abort_IT+0xc6>
 800403a:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8004264 <HAL_DMA_Abort_IT+0x254>
 800403e:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8004260 <HAL_DMA_Abort_IT+0x250>
 8004042:	f8df e230 	ldr.w	lr, [pc, #560]	; 8004274 <HAL_DMA_Abort_IT+0x264>
 8004046:	454a      	cmp	r2, r9
 8004048:	bf18      	it	ne
 800404a:	4542      	cmpne	r2, r8
 800404c:	f8df c228 	ldr.w	ip, [pc, #552]	; 8004278 <HAL_DMA_Abort_IT+0x268>
 8004050:	4f7f      	ldr	r7, [pc, #508]	; (8004250 <HAL_DMA_Abort_IT+0x240>)
 8004052:	bf0c      	ite	eq
 8004054:	f04f 0a01 	moveq.w	sl, #1
 8004058:	f04f 0a00 	movne.w	sl, #0
 800405c:	4c7d      	ldr	r4, [pc, #500]	; (8004254 <HAL_DMA_Abort_IT+0x244>)
 800405e:	4572      	cmp	r2, lr
 8004060:	bf08      	it	eq
 8004062:	f04a 0a01 	orreq.w	sl, sl, #1
 8004066:	f8df b214 	ldr.w	fp, [pc, #532]	; 800427c <HAL_DMA_Abort_IT+0x26c>
 800406a:	4e7b      	ldr	r6, [pc, #492]	; (8004258 <HAL_DMA_Abort_IT+0x248>)
 800406c:	4562      	cmp	r2, ip
 800406e:	bf08      	it	eq
 8004070:	f04a 0a01 	orreq.w	sl, sl, #1
 8004074:	4d79      	ldr	r5, [pc, #484]	; (800425c <HAL_DMA_Abort_IT+0x24c>)
 8004076:	42ba      	cmp	r2, r7
 8004078:	bf08      	it	eq
 800407a:	f04a 0a01 	orreq.w	sl, sl, #1
 800407e:	42a2      	cmp	r2, r4
 8004080:	bf08      	it	eq
 8004082:	f04a 0a01 	orreq.w	sl, sl, #1
 8004086:	f504 7456 	add.w	r4, r4, #856	; 0x358
 800408a:	42a2      	cmp	r2, r4
 800408c:	bf08      	it	eq
 800408e:	f04a 0a01 	orreq.w	sl, sl, #1
 8004092:	3418      	adds	r4, #24
 8004094:	42a2      	cmp	r2, r4
 8004096:	bf08      	it	eq
 8004098:	f04a 0a01 	orreq.w	sl, sl, #1
 800409c:	3418      	adds	r4, #24
 800409e:	42a2      	cmp	r2, r4
 80040a0:	bf08      	it	eq
 80040a2:	f04a 0a01 	orreq.w	sl, sl, #1
 80040a6:	3460      	adds	r4, #96	; 0x60
 80040a8:	455a      	cmp	r2, fp
 80040aa:	bf08      	it	eq
 80040ac:	f04a 0a01 	orreq.w	sl, sl, #1
 80040b0:	42b2      	cmp	r2, r6
 80040b2:	bf08      	it	eq
 80040b4:	f04a 0a01 	orreq.w	sl, sl, #1
 80040b8:	42aa      	cmp	r2, r5
 80040ba:	bf08      	it	eq
 80040bc:	f04a 0a01 	orreq.w	sl, sl, #1
 80040c0:	42a2      	cmp	r2, r4
 80040c2:	bf08      	it	eq
 80040c4:	f04a 0a01 	orreq.w	sl, sl, #1
 80040c8:	f1ba 0f00 	cmp.w	sl, #0
 80040cc:	d103      	bne.n	80040d6 <HAL_DMA_Abort_IT+0xc6>
 80040ce:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8004280 <HAL_DMA_Abort_IT+0x270>
 80040d2:	4552      	cmp	r2, sl
 80040d4:	d10b      	bne.n	80040ee <HAL_DMA_Abort_IT+0xde>
      hdma->State = HAL_DMA_STATE_ABORT;
 80040d6:	2104      	movs	r1, #4
  return HAL_OK;
 80040d8:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80040da:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80040de:	6813      	ldr	r3, [r2, #0]
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	6013      	str	r3, [r2, #0]
}
 80040e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 80040ea:	2001      	movs	r0, #1
}
 80040ec:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80040ee:	6814      	ldr	r4, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040f0:	4856      	ldr	r0, [pc, #344]	; (800424c <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80040f2:	f024 040e 	bic.w	r4, r4, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040f6:	4d5a      	ldr	r5, [pc, #360]	; (8004260 <HAL_DMA_Abort_IT+0x250>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80040f8:	6014      	str	r4, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 80040fa:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040fc:	4c59      	ldr	r4, [pc, #356]	; (8004264 <HAL_DMA_Abort_IT+0x254>)
      __HAL_DMA_DISABLE(hdma);
 80040fe:	6811      	ldr	r1, [r2, #0]
 8004100:	f021 0101 	bic.w	r1, r1, #1
 8004104:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004106:	4a50      	ldr	r2, [pc, #320]	; (8004248 <HAL_DMA_Abort_IT+0x238>)
 8004108:	6819      	ldr	r1, [r3, #0]
 800410a:	4281      	cmp	r1, r0
 800410c:	bf18      	it	ne
 800410e:	4291      	cmpne	r1, r2
 8004110:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8004114:	bf0c      	ite	eq
 8004116:	2201      	moveq	r2, #1
 8004118:	2200      	movne	r2, #0
 800411a:	42a9      	cmp	r1, r5
 800411c:	bf08      	it	eq
 800411e:	f042 0201 	orreq.w	r2, r2, #1
 8004122:	3548      	adds	r5, #72	; 0x48
 8004124:	42a1      	cmp	r1, r4
 8004126:	bf08      	it	eq
 8004128:	f042 0201 	orreq.w	r2, r2, #1
 800412c:	3448      	adds	r4, #72	; 0x48
 800412e:	4281      	cmp	r1, r0
 8004130:	bf08      	it	eq
 8004132:	f042 0201 	orreq.w	r2, r2, #1
 8004136:	3048      	adds	r0, #72	; 0x48
 8004138:	42a9      	cmp	r1, r5
 800413a:	bf08      	it	eq
 800413c:	f042 0201 	orreq.w	r2, r2, #1
 8004140:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8004144:	42a1      	cmp	r1, r4
 8004146:	bf08      	it	eq
 8004148:	f042 0201 	orreq.w	r2, r2, #1
 800414c:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8004150:	4281      	cmp	r1, r0
 8004152:	bf08      	it	eq
 8004154:	f042 0201 	orreq.w	r2, r2, #1
 8004158:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800415c:	42a9      	cmp	r1, r5
 800415e:	bf08      	it	eq
 8004160:	f042 0201 	orreq.w	r2, r2, #1
 8004164:	3548      	adds	r5, #72	; 0x48
 8004166:	42a1      	cmp	r1, r4
 8004168:	bf08      	it	eq
 800416a:	f042 0201 	orreq.w	r2, r2, #1
 800416e:	3448      	adds	r4, #72	; 0x48
 8004170:	4281      	cmp	r1, r0
 8004172:	bf08      	it	eq
 8004174:	f042 0201 	orreq.w	r2, r2, #1
 8004178:	3048      	adds	r0, #72	; 0x48
 800417a:	42a9      	cmp	r1, r5
 800417c:	bf08      	it	eq
 800417e:	f042 0201 	orreq.w	r2, r2, #1
 8004182:	3548      	adds	r5, #72	; 0x48
 8004184:	42a1      	cmp	r1, r4
 8004186:	bf08      	it	eq
 8004188:	f042 0201 	orreq.w	r2, r2, #1
 800418c:	3448      	adds	r4, #72	; 0x48
 800418e:	4281      	cmp	r1, r0
 8004190:	bf08      	it	eq
 8004192:	f042 0201 	orreq.w	r2, r2, #1
 8004196:	f100 50c0 	add.w	r0, r0, #402653184	; 0x18000000
 800419a:	42a9      	cmp	r1, r5
 800419c:	bf08      	it	eq
 800419e:	f042 0201 	orreq.w	r2, r2, #1
 80041a2:	f500 409f 	add.w	r0, r0, #20352	; 0x4f80
 80041a6:	4d30      	ldr	r5, [pc, #192]	; (8004268 <HAL_DMA_Abort_IT+0x258>)
 80041a8:	42a1      	cmp	r1, r4
 80041aa:	bf08      	it	eq
 80041ac:	f042 0201 	orreq.w	r2, r2, #1
 80041b0:	4c2e      	ldr	r4, [pc, #184]	; (800426c <HAL_DMA_Abort_IT+0x25c>)
 80041b2:	4281      	cmp	r1, r0
 80041b4:	bf08      	it	eq
 80041b6:	f042 0201 	orreq.w	r2, r2, #1
 80041ba:	303c      	adds	r0, #60	; 0x3c
 80041bc:	42a9      	cmp	r1, r5
 80041be:	bf08      	it	eq
 80041c0:	f042 0201 	orreq.w	r2, r2, #1
 80041c4:	353c      	adds	r5, #60	; 0x3c
 80041c6:	42a1      	cmp	r1, r4
 80041c8:	bf08      	it	eq
 80041ca:	f042 0201 	orreq.w	r2, r2, #1
 80041ce:	343c      	adds	r4, #60	; 0x3c
 80041d0:	4281      	cmp	r1, r0
 80041d2:	bf08      	it	eq
 80041d4:	f042 0201 	orreq.w	r2, r2, #1
 80041d8:	303c      	adds	r0, #60	; 0x3c
 80041da:	42a9      	cmp	r1, r5
 80041dc:	bf08      	it	eq
 80041de:	f042 0201 	orreq.w	r2, r2, #1
 80041e2:	42a1      	cmp	r1, r4
 80041e4:	bf08      	it	eq
 80041e6:	f042 0201 	orreq.w	r2, r2, #1
 80041ea:	4281      	cmp	r1, r0
 80041ec:	bf08      	it	eq
 80041ee:	f042 0201 	orreq.w	r2, r2, #1
 80041f2:	b912      	cbnz	r2, 80041fa <HAL_DMA_Abort_IT+0x1ea>
 80041f4:	4a1e      	ldr	r2, [pc, #120]	; (8004270 <HAL_DMA_Abort_IT+0x260>)
 80041f6:	4291      	cmp	r1, r2
 80041f8:	d117      	bne.n	800422a <HAL_DMA_Abort_IT+0x21a>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041fa:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80041fc:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041fe:	6801      	ldr	r1, [r0, #0]
 8004200:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004204:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004206:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800420a:	f001 011f 	and.w	r1, r1, #31
 800420e:	408a      	lsls	r2, r1
 8004210:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004212:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8004216:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8004218:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800421a:	b132      	cbz	r2, 800422a <HAL_DMA_Abort_IT+0x21a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800421c:	6811      	ldr	r1, [r2, #0]
 800421e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004222:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004224:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 8004228:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 800422a:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 800422c:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 800422e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8004230:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004234:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8004238:	b11a      	cbz	r2, 8004242 <HAL_DMA_Abort_IT+0x232>
 800423a:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 800423c:	4790      	blx	r2
  return HAL_OK;
 800423e:	4620      	mov	r0, r4
 8004240:	e6f2      	b.n	8004028 <HAL_DMA_Abort_IT+0x18>
 8004242:	4610      	mov	r0, r2
 8004244:	e6f0      	b.n	8004028 <HAL_DMA_Abort_IT+0x18>
 8004246:	bf00      	nop
 8004248:	40020010 	.word	0x40020010
 800424c:	40020028 	.word	0x40020028
 8004250:	400200a0 	.word	0x400200a0
 8004254:	400200b8 	.word	0x400200b8
 8004258:	40020470 	.word	0x40020470
 800425c:	40020488 	.word	0x40020488
 8004260:	40020040 	.word	0x40020040
 8004264:	40020058 	.word	0x40020058
 8004268:	5802541c 	.word	0x5802541c
 800426c:	58025430 	.word	0x58025430
 8004270:	58025494 	.word	0x58025494
 8004274:	40020070 	.word	0x40020070
 8004278:	40020088 	.word	0x40020088
 800427c:	40020458 	.word	0x40020458
 8004280:	400204b8 	.word	0x400204b8

08004284 <HAL_DMA_IRQHandler>:
{
 8004284:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004286:	4ba5      	ldr	r3, [pc, #660]	; (800451c <HAL_DMA_IRQHandler+0x298>)
{
 8004288:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800428a:	6804      	ldr	r4, [r0, #0]
  __IO uint32_t count = 0U;
 800428c:	2100      	movs	r1, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800428e:	4aa4      	ldr	r2, [pc, #656]	; (8004520 <HAL_DMA_IRQHandler+0x29c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004290:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004292:	429c      	cmp	r4, r3
  __IO uint32_t count = 0U;
 8004294:	9101      	str	r1, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004296:	6816      	ldr	r6, [r2, #0]
  tmpisr_dma  = regs_dma->ISR;
 8004298:	682f      	ldr	r7, [r5, #0]
  tmpisr_bdma = regs_bdma->ISR;
 800429a:	682a      	ldr	r2, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800429c:	d04d      	beq.n	800433a <HAL_DMA_IRQHandler+0xb6>
 800429e:	3318      	adds	r3, #24
 80042a0:	429c      	cmp	r4, r3
 80042a2:	d04a      	beq.n	800433a <HAL_DMA_IRQHandler+0xb6>
 80042a4:	3330      	adds	r3, #48	; 0x30
 80042a6:	f8df c284 	ldr.w	ip, [pc, #644]	; 800452c <HAL_DMA_IRQHandler+0x2a8>
 80042aa:	499e      	ldr	r1, [pc, #632]	; (8004524 <HAL_DMA_IRQHandler+0x2a0>)
 80042ac:	4564      	cmp	r4, ip
 80042ae:	bf18      	it	ne
 80042b0:	429c      	cmpne	r4, r3
 80042b2:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 80042b6:	bf0c      	ite	eq
 80042b8:	2301      	moveq	r3, #1
 80042ba:	2300      	movne	r3, #0
 80042bc:	428c      	cmp	r4, r1
 80042be:	bf08      	it	eq
 80042c0:	f043 0301 	orreq.w	r3, r3, #1
 80042c4:	3130      	adds	r1, #48	; 0x30
 80042c6:	4564      	cmp	r4, ip
 80042c8:	bf08      	it	eq
 80042ca:	f043 0301 	orreq.w	r3, r3, #1
 80042ce:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80042d2:	428c      	cmp	r4, r1
 80042d4:	bf08      	it	eq
 80042d6:	f043 0301 	orreq.w	r3, r3, #1
 80042da:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80042de:	4564      	cmp	r4, ip
 80042e0:	bf08      	it	eq
 80042e2:	f043 0301 	orreq.w	r3, r3, #1
 80042e6:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 80042ea:	428c      	cmp	r4, r1
 80042ec:	bf08      	it	eq
 80042ee:	f043 0301 	orreq.w	r3, r3, #1
 80042f2:	3130      	adds	r1, #48	; 0x30
 80042f4:	4564      	cmp	r4, ip
 80042f6:	bf08      	it	eq
 80042f8:	f043 0301 	orreq.w	r3, r3, #1
 80042fc:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004300:	428c      	cmp	r4, r1
 8004302:	bf08      	it	eq
 8004304:	f043 0301 	orreq.w	r3, r3, #1
 8004308:	3130      	adds	r1, #48	; 0x30
 800430a:	4564      	cmp	r4, ip
 800430c:	bf08      	it	eq
 800430e:	f043 0301 	orreq.w	r3, r3, #1
 8004312:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004316:	428c      	cmp	r4, r1
 8004318:	bf08      	it	eq
 800431a:	f043 0301 	orreq.w	r3, r3, #1
 800431e:	3130      	adds	r1, #48	; 0x30
 8004320:	4564      	cmp	r4, ip
 8004322:	bf08      	it	eq
 8004324:	f043 0301 	orreq.w	r3, r3, #1
 8004328:	428c      	cmp	r4, r1
 800432a:	bf08      	it	eq
 800432c:	f043 0301 	orreq.w	r3, r3, #1
 8004330:	b91b      	cbnz	r3, 800433a <HAL_DMA_IRQHandler+0xb6>
 8004332:	4b7d      	ldr	r3, [pc, #500]	; (8004528 <HAL_DMA_IRQHandler+0x2a4>)
 8004334:	429c      	cmp	r4, r3
 8004336:	f040 821e 	bne.w	8004776 <HAL_DMA_IRQHandler+0x4f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800433a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800433c:	2308      	movs	r3, #8
 800433e:	f001 021f 	and.w	r2, r1, #31
 8004342:	4093      	lsls	r3, r2
 8004344:	423b      	tst	r3, r7
 8004346:	f040 81fb 	bne.w	8004740 <HAL_DMA_IRQHandler+0x4bc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800434a:	fa27 f302 	lsr.w	r3, r7, r2
 800434e:	07dc      	lsls	r4, r3, #31
 8004350:	d563      	bpl.n	800441a <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004352:	6801      	ldr	r1, [r0, #0]
 8004354:	4b71      	ldr	r3, [pc, #452]	; (800451c <HAL_DMA_IRQHandler+0x298>)
 8004356:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8004530 <HAL_DMA_IRQHandler+0x2ac>
 800435a:	4c74      	ldr	r4, [pc, #464]	; (800452c <HAL_DMA_IRQHandler+0x2a8>)
 800435c:	4561      	cmp	r1, ip
 800435e:	bf18      	it	ne
 8004360:	4299      	cmpne	r1, r3
 8004362:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	42a1      	cmp	r1, r4
 800436e:	bf08      	it	eq
 8004370:	f043 0301 	orreq.w	r3, r3, #1
 8004374:	3430      	adds	r4, #48	; 0x30
 8004376:	4561      	cmp	r1, ip
 8004378:	bf08      	it	eq
 800437a:	f043 0301 	orreq.w	r3, r3, #1
 800437e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004382:	42a1      	cmp	r1, r4
 8004384:	bf08      	it	eq
 8004386:	f043 0301 	orreq.w	r3, r3, #1
 800438a:	3430      	adds	r4, #48	; 0x30
 800438c:	4561      	cmp	r1, ip
 800438e:	bf08      	it	eq
 8004390:	f043 0301 	orreq.w	r3, r3, #1
 8004394:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004398:	42a1      	cmp	r1, r4
 800439a:	bf08      	it	eq
 800439c:	f043 0301 	orreq.w	r3, r3, #1
 80043a0:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80043a4:	4561      	cmp	r1, ip
 80043a6:	bf08      	it	eq
 80043a8:	f043 0301 	orreq.w	r3, r3, #1
 80043ac:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 80043b0:	42a1      	cmp	r1, r4
 80043b2:	bf08      	it	eq
 80043b4:	f043 0301 	orreq.w	r3, r3, #1
 80043b8:	3430      	adds	r4, #48	; 0x30
 80043ba:	4561      	cmp	r1, ip
 80043bc:	bf08      	it	eq
 80043be:	f043 0301 	orreq.w	r3, r3, #1
 80043c2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80043c6:	42a1      	cmp	r1, r4
 80043c8:	bf08      	it	eq
 80043ca:	f043 0301 	orreq.w	r3, r3, #1
 80043ce:	3430      	adds	r4, #48	; 0x30
 80043d0:	4561      	cmp	r1, ip
 80043d2:	bf08      	it	eq
 80043d4:	f043 0301 	orreq.w	r3, r3, #1
 80043d8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80043dc:	42a1      	cmp	r1, r4
 80043de:	bf08      	it	eq
 80043e0:	f043 0301 	orreq.w	r3, r3, #1
 80043e4:	3430      	adds	r4, #48	; 0x30
 80043e6:	4561      	cmp	r1, ip
 80043e8:	bf08      	it	eq
 80043ea:	f043 0301 	orreq.w	r3, r3, #1
 80043ee:	42a1      	cmp	r1, r4
 80043f0:	bf08      	it	eq
 80043f2:	f043 0301 	orreq.w	r3, r3, #1
 80043f6:	b91b      	cbnz	r3, 8004400 <HAL_DMA_IRQHandler+0x17c>
 80043f8:	4b4b      	ldr	r3, [pc, #300]	; (8004528 <HAL_DMA_IRQHandler+0x2a4>)
 80043fa:	4299      	cmp	r1, r3
 80043fc:	f040 8285 	bne.w	800490a <HAL_DMA_IRQHandler+0x686>
 8004400:	694b      	ldr	r3, [r1, #20]
 8004402:	0619      	lsls	r1, r3, #24
 8004404:	d509      	bpl.n	800441a <HAL_DMA_IRQHandler+0x196>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004406:	2101      	movs	r1, #1
 8004408:	4091      	lsls	r1, r2
 800440a:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800440c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800440e:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8004410:	f043 0302 	orr.w	r3, r3, #2
 8004414:	f001 021f 	and.w	r2, r1, #31
 8004418:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800441a:	2404      	movs	r4, #4
 800441c:	4094      	lsls	r4, r2
 800441e:	423c      	tst	r4, r7
 8004420:	d067      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004422:	6801      	ldr	r1, [r0, #0]
 8004424:	4b3d      	ldr	r3, [pc, #244]	; (800451c <HAL_DMA_IRQHandler+0x298>)
 8004426:	f8df e108 	ldr.w	lr, [pc, #264]	; 8004530 <HAL_DMA_IRQHandler+0x2ac>
 800442a:	f8df c100 	ldr.w	ip, [pc, #256]	; 800452c <HAL_DMA_IRQHandler+0x2a8>
 800442e:	4571      	cmp	r1, lr
 8004430:	bf18      	it	ne
 8004432:	4299      	cmpne	r1, r3
 8004434:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8004438:	bf0c      	ite	eq
 800443a:	2301      	moveq	r3, #1
 800443c:	2300      	movne	r3, #0
 800443e:	4561      	cmp	r1, ip
 8004440:	bf08      	it	eq
 8004442:	f043 0301 	orreq.w	r3, r3, #1
 8004446:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800444a:	4571      	cmp	r1, lr
 800444c:	bf08      	it	eq
 800444e:	f043 0301 	orreq.w	r3, r3, #1
 8004452:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8004456:	4561      	cmp	r1, ip
 8004458:	bf08      	it	eq
 800445a:	f043 0301 	orreq.w	r3, r3, #1
 800445e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004462:	4571      	cmp	r1, lr
 8004464:	bf08      	it	eq
 8004466:	f043 0301 	orreq.w	r3, r3, #1
 800446a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800446e:	4561      	cmp	r1, ip
 8004470:	bf08      	it	eq
 8004472:	f043 0301 	orreq.w	r3, r3, #1
 8004476:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 800447a:	4571      	cmp	r1, lr
 800447c:	bf08      	it	eq
 800447e:	f043 0301 	orreq.w	r3, r3, #1
 8004482:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8004486:	4561      	cmp	r1, ip
 8004488:	bf08      	it	eq
 800448a:	f043 0301 	orreq.w	r3, r3, #1
 800448e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004492:	4571      	cmp	r1, lr
 8004494:	bf08      	it	eq
 8004496:	f043 0301 	orreq.w	r3, r3, #1
 800449a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800449e:	4561      	cmp	r1, ip
 80044a0:	bf08      	it	eq
 80044a2:	f043 0301 	orreq.w	r3, r3, #1
 80044a6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80044aa:	4571      	cmp	r1, lr
 80044ac:	bf08      	it	eq
 80044ae:	f043 0301 	orreq.w	r3, r3, #1
 80044b2:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80044b6:	4561      	cmp	r1, ip
 80044b8:	bf08      	it	eq
 80044ba:	f043 0301 	orreq.w	r3, r3, #1
 80044be:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80044c2:	4571      	cmp	r1, lr
 80044c4:	bf08      	it	eq
 80044c6:	f043 0301 	orreq.w	r3, r3, #1
 80044ca:	4561      	cmp	r1, ip
 80044cc:	bf08      	it	eq
 80044ce:	f043 0301 	orreq.w	r3, r3, #1
 80044d2:	b91b      	cbnz	r3, 80044dc <HAL_DMA_IRQHandler+0x258>
 80044d4:	4b14      	ldr	r3, [pc, #80]	; (8004528 <HAL_DMA_IRQHandler+0x2a4>)
 80044d6:	4299      	cmp	r1, r3
 80044d8:	f040 8215 	bne.w	8004906 <HAL_DMA_IRQHandler+0x682>
 80044dc:	680b      	ldr	r3, [r1, #0]
 80044de:	079b      	lsls	r3, r3, #30
 80044e0:	d507      	bpl.n	80044f2 <HAL_DMA_IRQHandler+0x26e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044e2:	60ac      	str	r4, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044e4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80044e6:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80044e8:	f043 0304 	orr.w	r3, r3, #4
 80044ec:	f001 021f 	and.w	r2, r1, #31
 80044f0:	6543      	str	r3, [r0, #84]	; 0x54
 80044f2:	4604      	mov	r4, r0
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044f4:	2010      	movs	r0, #16
 80044f6:	4090      	lsls	r0, r2
 80044f8:	4238      	tst	r0, r7
 80044fa:	f000 8086 	beq.w	800460a <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80044fe:	6821      	ldr	r1, [r4, #0]
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_DMA_IRQHandler+0x298>)
 8004502:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8004530 <HAL_DMA_IRQHandler+0x2ac>
 8004506:	f8df c024 	ldr.w	ip, [pc, #36]	; 800452c <HAL_DMA_IRQHandler+0x2a8>
 800450a:	4571      	cmp	r1, lr
 800450c:	bf18      	it	ne
 800450e:	4299      	cmpne	r1, r3
 8004510:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8004514:	bf08      	it	eq
 8004516:	2301      	moveq	r3, #1
 8004518:	e00c      	b.n	8004534 <HAL_DMA_IRQHandler+0x2b0>
 800451a:	bf00      	nop
 800451c:	40020010 	.word	0x40020010
 8004520:	200002b0 	.word	0x200002b0
 8004524:	40020070 	.word	0x40020070
 8004528:	400204b8 	.word	0x400204b8
 800452c:	40020040 	.word	0x40020040
 8004530:	40020028 	.word	0x40020028
 8004534:	bf18      	it	ne
 8004536:	2300      	movne	r3, #0
 8004538:	4561      	cmp	r1, ip
 800453a:	bf08      	it	eq
 800453c:	f043 0301 	orreq.w	r3, r3, #1
 8004540:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004544:	4571      	cmp	r1, lr
 8004546:	bf08      	it	eq
 8004548:	f043 0301 	orreq.w	r3, r3, #1
 800454c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8004550:	4561      	cmp	r1, ip
 8004552:	bf08      	it	eq
 8004554:	f043 0301 	orreq.w	r3, r3, #1
 8004558:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800455c:	4571      	cmp	r1, lr
 800455e:	bf08      	it	eq
 8004560:	f043 0301 	orreq.w	r3, r3, #1
 8004564:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8004568:	4561      	cmp	r1, ip
 800456a:	bf08      	it	eq
 800456c:	f043 0301 	orreq.w	r3, r3, #1
 8004570:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8004574:	4571      	cmp	r1, lr
 8004576:	bf08      	it	eq
 8004578:	f043 0301 	orreq.w	r3, r3, #1
 800457c:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8004580:	4561      	cmp	r1, ip
 8004582:	bf08      	it	eq
 8004584:	f043 0301 	orreq.w	r3, r3, #1
 8004588:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800458c:	4571      	cmp	r1, lr
 800458e:	bf08      	it	eq
 8004590:	f043 0301 	orreq.w	r3, r3, #1
 8004594:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8004598:	4561      	cmp	r1, ip
 800459a:	bf08      	it	eq
 800459c:	f043 0301 	orreq.w	r3, r3, #1
 80045a0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80045a4:	4571      	cmp	r1, lr
 80045a6:	bf08      	it	eq
 80045a8:	f043 0301 	orreq.w	r3, r3, #1
 80045ac:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80045b0:	4561      	cmp	r1, ip
 80045b2:	bf08      	it	eq
 80045b4:	f043 0301 	orreq.w	r3, r3, #1
 80045b8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80045bc:	4571      	cmp	r1, lr
 80045be:	bf08      	it	eq
 80045c0:	f043 0301 	orreq.w	r3, r3, #1
 80045c4:	4561      	cmp	r1, ip
 80045c6:	bf08      	it	eq
 80045c8:	f043 0301 	orreq.w	r3, r3, #1
 80045cc:	b91b      	cbnz	r3, 80045d6 <HAL_DMA_IRQHandler+0x352>
 80045ce:	4b9f      	ldr	r3, [pc, #636]	; (800484c <HAL_DMA_IRQHandler+0x5c8>)
 80045d0:	4299      	cmp	r1, r3
 80045d2:	f040 8194 	bne.w	80048fe <HAL_DMA_IRQHandler+0x67a>
 80045d6:	680b      	ldr	r3, [r1, #0]
 80045d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80045dc:	b1ab      	cbz	r3, 800460a <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045de:	60a8      	str	r0, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	0350      	lsls	r0, r2, #13
 80045e6:	f100 8102 	bmi.w	80047ee <HAL_DMA_IRQHandler+0x56a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	05d2      	lsls	r2, r2, #23
 80045ee:	d403      	bmi.n	80045f8 <HAL_DMA_IRQHandler+0x374>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	f022 0208 	bic.w	r2, r2, #8
 80045f6:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80045f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80ff 	beq.w	80047fe <HAL_DMA_IRQHandler+0x57a>
            hdma->XferHalfCpltCallback(hdma);
 8004600:	4620      	mov	r0, r4
 8004602:	4798      	blx	r3
 8004604:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004606:	f001 021f 	and.w	r2, r1, #31
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800460a:	2120      	movs	r1, #32
 800460c:	4091      	lsls	r1, r2
 800460e:	4239      	tst	r1, r7
 8004610:	d068      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x460>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004612:	6822      	ldr	r2, [r4, #0]
 8004614:	4b8e      	ldr	r3, [pc, #568]	; (8004850 <HAL_DMA_IRQHandler+0x5cc>)
 8004616:	4f8f      	ldr	r7, [pc, #572]	; (8004854 <HAL_DMA_IRQHandler+0x5d0>)
 8004618:	488f      	ldr	r0, [pc, #572]	; (8004858 <HAL_DMA_IRQHandler+0x5d4>)
 800461a:	42ba      	cmp	r2, r7
 800461c:	bf18      	it	ne
 800461e:	429a      	cmpne	r2, r3
 8004620:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	4282      	cmp	r2, r0
 800462c:	bf08      	it	eq
 800462e:	f043 0301 	orreq.w	r3, r3, #1
 8004632:	3030      	adds	r0, #48	; 0x30
 8004634:	42ba      	cmp	r2, r7
 8004636:	bf08      	it	eq
 8004638:	f043 0301 	orreq.w	r3, r3, #1
 800463c:	3730      	adds	r7, #48	; 0x30
 800463e:	4282      	cmp	r2, r0
 8004640:	bf08      	it	eq
 8004642:	f043 0301 	orreq.w	r3, r3, #1
 8004646:	3030      	adds	r0, #48	; 0x30
 8004648:	42ba      	cmp	r2, r7
 800464a:	bf08      	it	eq
 800464c:	f043 0301 	orreq.w	r3, r3, #1
 8004650:	3730      	adds	r7, #48	; 0x30
 8004652:	4282      	cmp	r2, r0
 8004654:	bf08      	it	eq
 8004656:	f043 0301 	orreq.w	r3, r3, #1
 800465a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800465e:	42ba      	cmp	r2, r7
 8004660:	bf08      	it	eq
 8004662:	f043 0301 	orreq.w	r3, r3, #1
 8004666:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800466a:	4282      	cmp	r2, r0
 800466c:	bf08      	it	eq
 800466e:	f043 0301 	orreq.w	r3, r3, #1
 8004672:	3030      	adds	r0, #48	; 0x30
 8004674:	42ba      	cmp	r2, r7
 8004676:	bf08      	it	eq
 8004678:	f043 0301 	orreq.w	r3, r3, #1
 800467c:	3730      	adds	r7, #48	; 0x30
 800467e:	4282      	cmp	r2, r0
 8004680:	bf08      	it	eq
 8004682:	f043 0301 	orreq.w	r3, r3, #1
 8004686:	3030      	adds	r0, #48	; 0x30
 8004688:	42ba      	cmp	r2, r7
 800468a:	bf08      	it	eq
 800468c:	f043 0301 	orreq.w	r3, r3, #1
 8004690:	3730      	adds	r7, #48	; 0x30
 8004692:	4282      	cmp	r2, r0
 8004694:	bf08      	it	eq
 8004696:	f043 0301 	orreq.w	r3, r3, #1
 800469a:	3030      	adds	r0, #48	; 0x30
 800469c:	42ba      	cmp	r2, r7
 800469e:	bf08      	it	eq
 80046a0:	f043 0301 	orreq.w	r3, r3, #1
 80046a4:	4282      	cmp	r2, r0
 80046a6:	bf08      	it	eq
 80046a8:	f043 0301 	orreq.w	r3, r3, #1
 80046ac:	b91b      	cbnz	r3, 80046b6 <HAL_DMA_IRQHandler+0x432>
 80046ae:	4b67      	ldr	r3, [pc, #412]	; (800484c <HAL_DMA_IRQHandler+0x5c8>)
 80046b0:	429a      	cmp	r2, r3
 80046b2:	f040 812c 	bne.w	800490e <HAL_DMA_IRQHandler+0x68a>
 80046b6:	6813      	ldr	r3, [r2, #0]
 80046b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80046bc:	b193      	cbz	r3, 80046e4 <HAL_DMA_IRQHandler+0x460>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046be:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80046c0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	f000 809e 	beq.w	8004806 <HAL_DMA_IRQHandler+0x582>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	0357      	lsls	r7, r2, #13
 80046d0:	f140 80ce 	bpl.w	8004870 <HAL_DMA_IRQHandler+0x5ec>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	031d      	lsls	r5, r3, #12
 80046d8:	f140 80d9 	bpl.w	800488e <HAL_DMA_IRQHandler+0x60a>
          if(hdma->XferCpltCallback != NULL)
 80046dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046de:	b10b      	cbz	r3, 80046e4 <HAL_DMA_IRQHandler+0x460>
            hdma->XferCpltCallback(hdma);
 80046e0:	4620      	mov	r0, r4
 80046e2:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d07f      	beq.n	80047ea <HAL_DMA_IRQHandler+0x566>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80046ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046ec:	07d8      	lsls	r0, r3, #31
 80046ee:	d51f      	bpl.n	8004730 <HAL_DMA_IRQHandler+0x4ac>
        __HAL_DMA_DISABLE(hdma);
 80046f0:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80046f2:	2004      	movs	r0, #4
 80046f4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80046f8:	6813      	ldr	r3, [r2, #0]
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004700:	4b56      	ldr	r3, [pc, #344]	; (800485c <HAL_DMA_IRQHandler+0x5d8>)
 8004702:	6822      	ldr	r2, [r4, #0]
 8004704:	fba3 3606 	umull	r3, r6, r3, r6
 8004708:	0ab6      	lsrs	r6, r6, #10
 800470a:	e002      	b.n	8004712 <HAL_DMA_IRQHandler+0x48e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800470c:	6813      	ldr	r3, [r2, #0]
 800470e:	07d9      	lsls	r1, r3, #31
 8004710:	d504      	bpl.n	800471c <HAL_DMA_IRQHandler+0x498>
          if (++count > timeout)
 8004712:	9b01      	ldr	r3, [sp, #4]
 8004714:	3301      	adds	r3, #1
 8004716:	42b3      	cmp	r3, r6
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	d9f7      	bls.n	800470c <HAL_DMA_IRQHandler+0x488>
        __HAL_UNLOCK(hdma);
 800471c:	2300      	movs	r3, #0
 800471e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8004726:	bf4c      	ite	mi
 8004728:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800472a:	2301      	movpl	r3, #1
 800472c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8004730:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004732:	2b00      	cmp	r3, #0
 8004734:	d059      	beq.n	80047ea <HAL_DMA_IRQHandler+0x566>
        hdma->XferErrorCallback(hdma);
 8004736:	4620      	mov	r0, r4
}
 8004738:	b003      	add	sp, #12
 800473a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 800473e:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	075b      	lsls	r3, r3, #29
 8004744:	f57f ae01 	bpl.w	800434a <HAL_DMA_IRQHandler+0xc6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004748:	6822      	ldr	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800474a:	2308      	movs	r3, #8
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800474c:	f022 0204 	bic.w	r2, r2, #4
 8004750:	6022      	str	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004752:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004754:	f002 021f 	and.w	r2, r2, #31
 8004758:	4093      	lsls	r3, r2
 800475a:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800475c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800475e:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	f001 021f 	and.w	r2, r1, #31
 8004768:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800476a:	fa27 f302 	lsr.w	r3, r7, r2
 800476e:	07dc      	lsls	r4, r3, #31
 8004770:	f57f ae53 	bpl.w	800441a <HAL_DMA_IRQHandler+0x196>
 8004774:	e5ed      	b.n	8004352 <HAL_DMA_IRQHandler+0xce>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004776:	4b3a      	ldr	r3, [pc, #232]	; (8004860 <HAL_DMA_IRQHandler+0x5dc>)
 8004778:	4e3a      	ldr	r6, [pc, #232]	; (8004864 <HAL_DMA_IRQHandler+0x5e0>)
 800477a:	493b      	ldr	r1, [pc, #236]	; (8004868 <HAL_DMA_IRQHandler+0x5e4>)
 800477c:	42b4      	cmp	r4, r6
 800477e:	bf18      	it	ne
 8004780:	429c      	cmpne	r4, r3
 8004782:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	428c      	cmp	r4, r1
 800478e:	bf08      	it	eq
 8004790:	f043 0301 	orreq.w	r3, r3, #1
 8004794:	3128      	adds	r1, #40	; 0x28
 8004796:	42b4      	cmp	r4, r6
 8004798:	bf08      	it	eq
 800479a:	f043 0301 	orreq.w	r3, r3, #1
 800479e:	3628      	adds	r6, #40	; 0x28
 80047a0:	428c      	cmp	r4, r1
 80047a2:	bf08      	it	eq
 80047a4:	f043 0301 	orreq.w	r3, r3, #1
 80047a8:	3128      	adds	r1, #40	; 0x28
 80047aa:	42b4      	cmp	r4, r6
 80047ac:	bf08      	it	eq
 80047ae:	f043 0301 	orreq.w	r3, r3, #1
 80047b2:	428c      	cmp	r4, r1
 80047b4:	bf08      	it	eq
 80047b6:	f043 0301 	orreq.w	r3, r3, #1
 80047ba:	b913      	cbnz	r3, 80047c2 <HAL_DMA_IRQHandler+0x53e>
 80047bc:	4b2b      	ldr	r3, [pc, #172]	; (800486c <HAL_DMA_IRQHandler+0x5e8>)
 80047be:	429c      	cmp	r4, r3
 80047c0:	d113      	bne.n	80047ea <HAL_DMA_IRQHandler+0x566>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80047c2:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80047c4:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80047c6:	6823      	ldr	r3, [r4, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80047c8:	f001 011f 	and.w	r1, r1, #31
 80047cc:	408e      	lsls	r6, r1
 80047ce:	4216      	tst	r6, r2
 80047d0:	d066      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x61c>
 80047d2:	075f      	lsls	r7, r3, #29
 80047d4:	d564      	bpl.n	80048a0 <HAL_DMA_IRQHandler+0x61c>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047d6:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80047d8:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047da:	f140 809c 	bpl.w	8004916 <HAL_DMA_IRQHandler+0x692>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047de:	03da      	lsls	r2, r3, #15
 80047e0:	f100 80f1 	bmi.w	80049c6 <HAL_DMA_IRQHandler+0x742>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047e4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1a6      	bne.n	8004738 <HAL_DMA_IRQHandler+0x4b4>
}
 80047ea:	b003      	add	sp, #12
 80047ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	0319      	lsls	r1, r3, #12
 80047f2:	f57f af01 	bpl.w	80045f8 <HAL_DMA_IRQHandler+0x374>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80047f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f47f af01 	bne.w	8004600 <HAL_DMA_IRQHandler+0x37c>
 80047fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004800:	f002 021f 	and.w	r2, r2, #31
 8004804:	e701      	b.n	800460a <HAL_DMA_IRQHandler+0x386>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	6813      	ldr	r3, [r2, #0]
 800480a:	f023 0316 	bic.w	r3, r3, #22
 800480e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004810:	6822      	ldr	r2, [r4, #0]
 8004812:	6953      	ldr	r3, [r2, #20]
 8004814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004818:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800481a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d03b      	beq.n	8004898 <HAL_DMA_IRQHandler+0x614>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	f023 0308 	bic.w	r3, r3, #8
 8004828:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800482a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800482c:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 800482e:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 8004830:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004832:	f002 021f 	and.w	r2, r2, #31
 8004836:	4093      	lsls	r3, r2
 8004838:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 800483a:	6d23      	ldr	r3, [r4, #80]	; 0x50
          __HAL_UNLOCK(hdma);
 800483c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004840:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8004844:	2b00      	cmp	r3, #0
 8004846:	f47f af76 	bne.w	8004736 <HAL_DMA_IRQHandler+0x4b2>
 800484a:	e7ce      	b.n	80047ea <HAL_DMA_IRQHandler+0x566>
 800484c:	400204b8 	.word	0x400204b8
 8004850:	40020010 	.word	0x40020010
 8004854:	40020028 	.word	0x40020028
 8004858:	40020040 	.word	0x40020040
 800485c:	1b4e81b5 	.word	0x1b4e81b5
 8004860:	58025408 	.word	0x58025408
 8004864:	5802541c 	.word	0x5802541c
 8004868:	58025430 	.word	0x58025430
 800486c:	58025494 	.word	0x58025494
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8004876:	f47f af31 	bne.w	80046dc <HAL_DMA_IRQHandler+0x458>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800487a:	6819      	ldr	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800487c:	2001      	movs	r0, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800487e:	f021 0110 	bic.w	r1, r1, #16
 8004882:	6019      	str	r1, [r3, #0]
            __HAL_UNLOCK(hdma);
 8004884:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8004888:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800488c:	e726      	b.n	80046dc <HAL_DMA_IRQHandler+0x458>
            if(hdma->XferM1CpltCallback != NULL)
 800488e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004890:	2b00      	cmp	r3, #0
 8004892:	f47f af25 	bne.w	80046e0 <HAL_DMA_IRQHandler+0x45c>
 8004896:	e725      	b.n	80046e4 <HAL_DMA_IRQHandler+0x460>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004898:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1c0      	bne.n	8004820 <HAL_DMA_IRQHandler+0x59c>
 800489e:	e7c4      	b.n	800482a <HAL_DMA_IRQHandler+0x5a6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80048a0:	2602      	movs	r6, #2
 80048a2:	408e      	lsls	r6, r1
 80048a4:	4216      	tst	r6, r2
 80048a6:	d00d      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x640>
 80048a8:	079f      	lsls	r7, r3, #30
 80048aa:	d50b      	bpl.n	80048c4 <HAL_DMA_IRQHandler+0x640>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ac:	041c      	lsls	r4, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80048ae:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048b0:	f140 808e 	bpl.w	80049d0 <HAL_DMA_IRQHandler+0x74c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048b4:	03d9      	lsls	r1, r3, #15
 80048b6:	f100 80e9 	bmi.w	8004a8c <HAL_DMA_IRQHandler+0x808>
          if(hdma->XferM1CpltCallback != NULL)
 80048ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f47f af3b 	bne.w	8004738 <HAL_DMA_IRQHandler+0x4b4>
 80048c2:	e792      	b.n	80047ea <HAL_DMA_IRQHandler+0x566>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80048c4:	2608      	movs	r6, #8
 80048c6:	fa06 f101 	lsl.w	r1, r6, r1
 80048ca:	4211      	tst	r1, r2
 80048cc:	d08d      	beq.n	80047ea <HAL_DMA_IRQHandler+0x566>
 80048ce:	071b      	lsls	r3, r3, #28
 80048d0:	d58b      	bpl.n	80047ea <HAL_DMA_IRQHandler+0x566>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048d2:	6823      	ldr	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048d4:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80048d6:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048d8:	f023 030e 	bic.w	r3, r3, #14
 80048dc:	6023      	str	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048de:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 80048ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048ec:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 80048ee:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80048f2:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f47f af1e 	bne.w	8004738 <HAL_DMA_IRQHandler+0x4b4>
 80048fc:	e775      	b.n	80047ea <HAL_DMA_IRQHandler+0x566>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80048fe:	680b      	ldr	r3, [r1, #0]
 8004900:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004904:	e66a      	b.n	80045dc <HAL_DMA_IRQHandler+0x358>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004906:	680b      	ldr	r3, [r1, #0]
 8004908:	e5f3      	b.n	80044f2 <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800490a:	680b      	ldr	r3, [r1, #0]
 800490c:	e585      	b.n	800441a <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800490e:	6813      	ldr	r3, [r2, #0]
 8004910:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004914:	e6d2      	b.n	80046bc <HAL_DMA_IRQHandler+0x438>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004916:	069b      	lsls	r3, r3, #26
 8004918:	d455      	bmi.n	80049c6 <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800491a:	6802      	ldr	r2, [r0, #0]
 800491c:	4b63      	ldr	r3, [pc, #396]	; (8004aac <HAL_DMA_IRQHandler+0x828>)
 800491e:	4c64      	ldr	r4, [pc, #400]	; (8004ab0 <HAL_DMA_IRQHandler+0x82c>)
 8004920:	4964      	ldr	r1, [pc, #400]	; (8004ab4 <HAL_DMA_IRQHandler+0x830>)
 8004922:	42a2      	cmp	r2, r4
 8004924:	bf18      	it	ne
 8004926:	429a      	cmpne	r2, r3
 8004928:	4d63      	ldr	r5, [pc, #396]	; (8004ab8 <HAL_DMA_IRQHandler+0x834>)
 800492a:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	428a      	cmp	r2, r1
 8004936:	bf08      	it	eq
 8004938:	f043 0301 	orreq.w	r3, r3, #1
 800493c:	3148      	adds	r1, #72	; 0x48
 800493e:	42aa      	cmp	r2, r5
 8004940:	bf08      	it	eq
 8004942:	f043 0301 	orreq.w	r3, r3, #1
 8004946:	3548      	adds	r5, #72	; 0x48
 8004948:	42a2      	cmp	r2, r4
 800494a:	bf08      	it	eq
 800494c:	f043 0301 	orreq.w	r3, r3, #1
 8004950:	3448      	adds	r4, #72	; 0x48
 8004952:	428a      	cmp	r2, r1
 8004954:	bf08      	it	eq
 8004956:	f043 0301 	orreq.w	r3, r3, #1
 800495a:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800495e:	42aa      	cmp	r2, r5
 8004960:	bf08      	it	eq
 8004962:	f043 0301 	orreq.w	r3, r3, #1
 8004966:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800496a:	42a2      	cmp	r2, r4
 800496c:	bf08      	it	eq
 800496e:	f043 0301 	orreq.w	r3, r3, #1
 8004972:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8004976:	428a      	cmp	r2, r1
 8004978:	bf08      	it	eq
 800497a:	f043 0301 	orreq.w	r3, r3, #1
 800497e:	3148      	adds	r1, #72	; 0x48
 8004980:	42aa      	cmp	r2, r5
 8004982:	bf08      	it	eq
 8004984:	f043 0301 	orreq.w	r3, r3, #1
 8004988:	3548      	adds	r5, #72	; 0x48
 800498a:	42a2      	cmp	r2, r4
 800498c:	bf08      	it	eq
 800498e:	f043 0301 	orreq.w	r3, r3, #1
 8004992:	3448      	adds	r4, #72	; 0x48
 8004994:	428a      	cmp	r2, r1
 8004996:	bf08      	it	eq
 8004998:	f043 0301 	orreq.w	r3, r3, #1
 800499c:	3148      	adds	r1, #72	; 0x48
 800499e:	42aa      	cmp	r2, r5
 80049a0:	bf08      	it	eq
 80049a2:	f043 0301 	orreq.w	r3, r3, #1
 80049a6:	42a2      	cmp	r2, r4
 80049a8:	bf08      	it	eq
 80049aa:	f043 0301 	orreq.w	r3, r3, #1
 80049ae:	428a      	cmp	r2, r1
 80049b0:	bf08      	it	eq
 80049b2:	f043 0301 	orreq.w	r3, r3, #1
 80049b6:	b913      	cbnz	r3, 80049be <HAL_DMA_IRQHandler+0x73a>
 80049b8:	4b40      	ldr	r3, [pc, #256]	; (8004abc <HAL_DMA_IRQHandler+0x838>)
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d16b      	bne.n	8004a96 <HAL_DMA_IRQHandler+0x812>
 80049be:	6813      	ldr	r3, [r2, #0]
 80049c0:	f023 0308 	bic.w	r3, r3, #8
 80049c4:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80049c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f47f aeb5 	bne.w	8004738 <HAL_DMA_IRQHandler+0x4b4>
 80049ce:	e70c      	b.n	80047ea <HAL_DMA_IRQHandler+0x566>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049d0:	069a      	lsls	r2, r3, #26
 80049d2:	d45b      	bmi.n	8004a8c <HAL_DMA_IRQHandler+0x808>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049d4:	6802      	ldr	r2, [r0, #0]
 80049d6:	4b35      	ldr	r3, [pc, #212]	; (8004aac <HAL_DMA_IRQHandler+0x828>)
 80049d8:	4c35      	ldr	r4, [pc, #212]	; (8004ab0 <HAL_DMA_IRQHandler+0x82c>)
 80049da:	4936      	ldr	r1, [pc, #216]	; (8004ab4 <HAL_DMA_IRQHandler+0x830>)
 80049dc:	42a2      	cmp	r2, r4
 80049de:	bf18      	it	ne
 80049e0:	429a      	cmpne	r2, r3
 80049e2:	4d35      	ldr	r5, [pc, #212]	; (8004ab8 <HAL_DMA_IRQHandler+0x834>)
 80049e4:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	428a      	cmp	r2, r1
 80049f0:	bf08      	it	eq
 80049f2:	f043 0301 	orreq.w	r3, r3, #1
 80049f6:	3148      	adds	r1, #72	; 0x48
 80049f8:	42aa      	cmp	r2, r5
 80049fa:	bf08      	it	eq
 80049fc:	f043 0301 	orreq.w	r3, r3, #1
 8004a00:	3548      	adds	r5, #72	; 0x48
 8004a02:	42a2      	cmp	r2, r4
 8004a04:	bf08      	it	eq
 8004a06:	f043 0301 	orreq.w	r3, r3, #1
 8004a0a:	3448      	adds	r4, #72	; 0x48
 8004a0c:	428a      	cmp	r2, r1
 8004a0e:	bf08      	it	eq
 8004a10:	f043 0301 	orreq.w	r3, r3, #1
 8004a14:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8004a18:	42aa      	cmp	r2, r5
 8004a1a:	bf08      	it	eq
 8004a1c:	f043 0301 	orreq.w	r3, r3, #1
 8004a20:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8004a24:	42a2      	cmp	r2, r4
 8004a26:	bf08      	it	eq
 8004a28:	f043 0301 	orreq.w	r3, r3, #1
 8004a2c:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8004a30:	428a      	cmp	r2, r1
 8004a32:	bf08      	it	eq
 8004a34:	f043 0301 	orreq.w	r3, r3, #1
 8004a38:	3148      	adds	r1, #72	; 0x48
 8004a3a:	42aa      	cmp	r2, r5
 8004a3c:	bf08      	it	eq
 8004a3e:	f043 0301 	orreq.w	r3, r3, #1
 8004a42:	3548      	adds	r5, #72	; 0x48
 8004a44:	42a2      	cmp	r2, r4
 8004a46:	bf08      	it	eq
 8004a48:	f043 0301 	orreq.w	r3, r3, #1
 8004a4c:	3448      	adds	r4, #72	; 0x48
 8004a4e:	428a      	cmp	r2, r1
 8004a50:	bf08      	it	eq
 8004a52:	f043 0301 	orreq.w	r3, r3, #1
 8004a56:	3148      	adds	r1, #72	; 0x48
 8004a58:	42aa      	cmp	r2, r5
 8004a5a:	bf08      	it	eq
 8004a5c:	f043 0301 	orreq.w	r3, r3, #1
 8004a60:	42a2      	cmp	r2, r4
 8004a62:	bf08      	it	eq
 8004a64:	f043 0301 	orreq.w	r3, r3, #1
 8004a68:	428a      	cmp	r2, r1
 8004a6a:	bf08      	it	eq
 8004a6c:	f043 0301 	orreq.w	r3, r3, #1
 8004a70:	b913      	cbnz	r3, 8004a78 <HAL_DMA_IRQHandler+0x7f4>
 8004a72:	4b12      	ldr	r3, [pc, #72]	; (8004abc <HAL_DMA_IRQHandler+0x838>)
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d113      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0x81c>
 8004a78:	6813      	ldr	r3, [r2, #0]
 8004a7a:	f023 0314 	bic.w	r3, r3, #20
 8004a7e:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(hdma);
 8004a80:	2200      	movs	r2, #0
          hdma->State = HAL_DMA_STATE_READY;
 8004a82:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8004a84:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004a88:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8004a8c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f47f ae52 	bne.w	8004738 <HAL_DMA_IRQHandler+0x4b4>
 8004a94:	e6a9      	b.n	80047ea <HAL_DMA_IRQHandler+0x566>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a96:	6813      	ldr	r3, [r2, #0]
 8004a98:	f023 0304 	bic.w	r3, r3, #4
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e792      	b.n	80049c6 <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004aa0:	6813      	ldr	r3, [r2, #0]
 8004aa2:	f023 030a 	bic.w	r3, r3, #10
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	e7ea      	b.n	8004a80 <HAL_DMA_IRQHandler+0x7fc>
 8004aaa:	bf00      	nop
 8004aac:	40020010 	.word	0x40020010
 8004ab0:	40020028 	.word	0x40020028
 8004ab4:	40020040 	.word	0x40020040
 8004ab8:	40020058 	.word	0x40020058
 8004abc:	400204b8 	.word	0x400204b8

08004ac0 <HAL_DMA_GetState>:
  return hdma->State;
 8004ac0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop

08004ac8 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8004ac8:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8004aca:	4770      	bx	lr

08004acc <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ace:	4605      	mov	r5, r0
  uint32_t syncSignalID = 0;
  uint32_t syncPolarity = 0;

  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
 8004ad0:	4baa      	ldr	r3, [pc, #680]	; (8004d7c <HAL_DMAEx_ConfigMuxSync+0x2b0>)
 8004ad2:	48ab      	ldr	r0, [pc, #684]	; (8004d80 <HAL_DMAEx_ConfigMuxSync+0x2b4>)
{
 8004ad4:	460c      	mov	r4, r1
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
 8004ad6:	682a      	ldr	r2, [r5, #0]
 8004ad8:	49aa      	ldr	r1, [pc, #680]	; (8004d84 <HAL_DMAEx_ConfigMuxSync+0x2b8>)
 8004ada:	429a      	cmp	r2, r3
 8004adc:	bf18      	it	ne
 8004ade:	4282      	cmpne	r2, r0
 8004ae0:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8004ae4:	bf14      	ite	ne
 8004ae6:	2301      	movne	r3, #1
 8004ae8:	2300      	moveq	r3, #0
 8004aea:	428a      	cmp	r2, r1
 8004aec:	bf0c      	ite	eq
 8004aee:	2300      	moveq	r3, #0
 8004af0:	f003 0301 	andne.w	r3, r3, #1
 8004af4:	3130      	adds	r1, #48	; 0x30
 8004af6:	4282      	cmp	r2, r0
 8004af8:	bf0c      	ite	eq
 8004afa:	2300      	moveq	r3, #0
 8004afc:	f003 0301 	andne.w	r3, r3, #1
 8004b00:	3030      	adds	r0, #48	; 0x30
 8004b02:	428a      	cmp	r2, r1
 8004b04:	bf0c      	ite	eq
 8004b06:	2300      	moveq	r3, #0
 8004b08:	f003 0301 	andne.w	r3, r3, #1
 8004b0c:	3130      	adds	r1, #48	; 0x30
 8004b0e:	4282      	cmp	r2, r0
 8004b10:	bf0c      	ite	eq
 8004b12:	2300      	moveq	r3, #0
 8004b14:	f003 0301 	andne.w	r3, r3, #1
 8004b18:	3030      	adds	r0, #48	; 0x30
 8004b1a:	428a      	cmp	r2, r1
 8004b1c:	bf0c      	ite	eq
 8004b1e:	2300      	moveq	r3, #0
 8004b20:	f003 0301 	andne.w	r3, r3, #1
 8004b24:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004b28:	4282      	cmp	r2, r0
 8004b2a:	bf0c      	ite	eq
 8004b2c:	2300      	moveq	r3, #0
 8004b2e:	f003 0301 	andne.w	r3, r3, #1
 8004b32:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004b36:	428a      	cmp	r2, r1
 8004b38:	bf0c      	ite	eq
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	f003 0301 	andne.w	r3, r3, #1
 8004b40:	3130      	adds	r1, #48	; 0x30
 8004b42:	4282      	cmp	r2, r0
 8004b44:	bf0c      	ite	eq
 8004b46:	2300      	moveq	r3, #0
 8004b48:	f003 0301 	andne.w	r3, r3, #1
 8004b4c:	3030      	adds	r0, #48	; 0x30
 8004b4e:	428a      	cmp	r2, r1
 8004b50:	bf0c      	ite	eq
 8004b52:	2300      	moveq	r3, #0
 8004b54:	f003 0301 	andne.w	r3, r3, #1
 8004b58:	3130      	adds	r1, #48	; 0x30
 8004b5a:	4282      	cmp	r2, r0
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	f003 0301 	andne.w	r3, r3, #1
 8004b64:	3030      	adds	r0, #48	; 0x30
 8004b66:	428a      	cmp	r2, r1
 8004b68:	bf0c      	ite	eq
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	f003 0301 	andne.w	r3, r3, #1
 8004b70:	3130      	adds	r1, #48	; 0x30
 8004b72:	4282      	cmp	r2, r0
 8004b74:	bf0c      	ite	eq
 8004b76:	2300      	moveq	r3, #0
 8004b78:	f003 0301 	andne.w	r3, r3, #1
 8004b7c:	3030      	adds	r0, #48	; 0x30
 8004b7e:	428a      	cmp	r2, r1
 8004b80:	bf0c      	ite	eq
 8004b82:	2300      	moveq	r3, #0
 8004b84:	f003 0301 	andne.w	r3, r3, #1
 8004b88:	497f      	ldr	r1, [pc, #508]	; (8004d88 <HAL_DMAEx_ConfigMuxSync+0x2bc>)
 8004b8a:	4282      	cmp	r2, r0
 8004b8c:	bf0c      	ite	eq
 8004b8e:	2300      	moveq	r3, #0
 8004b90:	f003 0301 	andne.w	r3, r3, #1
 8004b94:	487d      	ldr	r0, [pc, #500]	; (8004d8c <HAL_DMAEx_ConfigMuxSync+0x2c0>)
 8004b96:	428a      	cmp	r2, r1
 8004b98:	bf0c      	ite	eq
 8004b9a:	2300      	moveq	r3, #0
 8004b9c:	f003 0301 	andne.w	r3, r3, #1
 8004ba0:	3128      	adds	r1, #40	; 0x28
 8004ba2:	4282      	cmp	r2, r0
 8004ba4:	bf0c      	ite	eq
 8004ba6:	2300      	moveq	r3, #0
 8004ba8:	f003 0301 	andne.w	r3, r3, #1
 8004bac:	3028      	adds	r0, #40	; 0x28
 8004bae:	428a      	cmp	r2, r1
 8004bb0:	bf0c      	ite	eq
 8004bb2:	2300      	moveq	r3, #0
 8004bb4:	f003 0301 	andne.w	r3, r3, #1
 8004bb8:	3128      	adds	r1, #40	; 0x28
 8004bba:	4282      	cmp	r2, r0
 8004bbc:	bf0c      	ite	eq
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	f003 0301 	andne.w	r3, r3, #1
 8004bc4:	3028      	adds	r0, #40	; 0x28
 8004bc6:	428a      	cmp	r2, r1
 8004bc8:	bf0c      	ite	eq
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	f003 0301 	andne.w	r3, r3, #1
 8004bd0:	3128      	adds	r1, #40	; 0x28
 8004bd2:	4282      	cmp	r2, r0
 8004bd4:	bf0c      	ite	eq
 8004bd6:	2300      	moveq	r3, #0
 8004bd8:	f003 0301 	andne.w	r3, r3, #1
 8004bdc:	428a      	cmp	r2, r1
 8004bde:	bf0c      	ite	eq
 8004be0:	2300      	moveq	r3, #0
 8004be2:	f003 0301 	andne.w	r3, r3, #1
 8004be6:	b11b      	cbz	r3, 8004bf0 <HAL_DMAEx_ConfigMuxSync+0x124>
 8004be8:	4b69      	ldr	r3, [pc, #420]	; (8004d90 <HAL_DMAEx_ConfigMuxSync+0x2c4>)
 8004bea:	429a      	cmp	r2, r3
 8004bec:	f040 80c0 	bne.w	8004d70 <HAL_DMAEx_ConfigMuxSync+0x2a4>
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
 8004bf0:	7a23      	ldrb	r3, [r4, #8]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d904      	bls.n	8004c00 <HAL_DMAEx_ConfigMuxSync+0x134>
 8004bf6:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8004bfa:	4866      	ldr	r0, [pc, #408]	; (8004d94 <HAL_DMAEx_ConfigMuxSync+0x2c8>)
 8004bfc:	f00f f81e 	bl	8013c3c <assert_failed>
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
 8004c00:	7a63      	ldrb	r3, [r4, #9]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d904      	bls.n	8004c10 <HAL_DMAEx_ConfigMuxSync+0x144>
 8004c06:	f240 1195 	movw	r1, #405	; 0x195
 8004c0a:	4862      	ldr	r0, [pc, #392]	; (8004d94 <HAL_DMAEx_ConfigMuxSync+0x2c8>)
 8004c0c:	f00f f816 	bl	8013c3c <assert_failed>
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));
 8004c10:	68e3      	ldr	r3, [r4, #12]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	2b1f      	cmp	r3, #31
 8004c16:	f200 808d 	bhi.w	8004d34 <HAL_DMAEx_ConfigMuxSync+0x268>

  if(pSyncConfig->SyncEnable == ENABLE)
 8004c1a:	7a23      	ldrb	r3, [r4, #8]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d02f      	beq.n	8004c80 <HAL_DMAEx_ConfigMuxSync+0x1b4>
  uint32_t syncPolarity = 0;
 8004c20:	2200      	movs	r2, #0
  uint32_t syncSignalID = 0;
 8004c22:	4611      	mov	r1, r2
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8004c24:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d004      	beq.n	8004c38 <HAL_DMAEx_ConfigMuxSync+0x16c>
    return HAL_OK;
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004c2e:	f44f 6300 	mov.w	r3, #2048	; 0x800

    /* Return error status */
    return HAL_ERROR;
 8004c32:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004c34:	656b      	str	r3, [r5, #84]	; 0x54
  }
}
 8004c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hdma);
 8004c38:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8004c3c:	2801      	cmp	r0, #1
 8004c3e:	f000 8086 	beq.w	8004d4e <HAL_DMAEx_ConfigMuxSync+0x282>
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8004c42:	6e2f      	ldr	r7, [r5, #96]	; 0x60
    __HAL_UNLOCK(hdma);
 8004c44:	2600      	movs	r6, #0
    __HAL_LOCK(hdma);
 8004c46:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8004c4a:	683b      	ldr	r3, [r7, #0]
    return HAL_OK;
 8004c4c:	4630      	mov	r0, r6
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8004c4e:	f423 3381 	bic.w	r3, r3, #66048	; 0x10200
 8004c52:	603b      	str	r3, [r7, #0]
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8004c54:	68e7      	ldr	r7, [r4, #12]
 8004c56:	7a23      	ldrb	r3, [r4, #8]
 8004c58:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8004c5c:	6e2f      	ldr	r7, [r5, #96]	; 0x60
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	f894 e009 	ldrb.w	lr, [r4, #9]
 8004c64:	683c      	ldr	r4, [r7, #0]
 8004c66:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
 8004c6a:	b2e4      	uxtb	r4, r4
 8004c6c:	ea43 234e 	orr.w	r3, r3, lr, lsl #9
 8004c70:	4323      	orrs	r3, r4
 8004c72:	4313      	orrs	r3, r2
 8004c74:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004c78:	603b      	str	r3, [r7, #0]
    __HAL_UNLOCK(hdma);
 8004c7a:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
}
 8004c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));
 8004c80:	6863      	ldr	r3, [r4, #4]
 8004c82:	f433 23c0 	bics.w	r3, r3, #393216	; 0x60000
 8004c86:	d164      	bne.n	8004d52 <HAL_DMAEx_ConfigMuxSync+0x286>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c88:	682a      	ldr	r2, [r5, #0]
 8004c8a:	4b3c      	ldr	r3, [pc, #240]	; (8004d7c <HAL_DMAEx_ConfigMuxSync+0x2b0>)
 8004c8c:	493c      	ldr	r1, [pc, #240]	; (8004d80 <HAL_DMAEx_ConfigMuxSync+0x2b4>)
 8004c8e:	483d      	ldr	r0, [pc, #244]	; (8004d84 <HAL_DMAEx_ConfigMuxSync+0x2b8>)
 8004c90:	428a      	cmp	r2, r1
 8004c92:	bf18      	it	ne
 8004c94:	429a      	cmpne	r2, r3
 8004c96:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004c9a:	bf0c      	ite	eq
 8004c9c:	2301      	moveq	r3, #1
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	4282      	cmp	r2, r0
 8004ca2:	bf08      	it	eq
 8004ca4:	f043 0301 	orreq.w	r3, r3, #1
 8004ca8:	3030      	adds	r0, #48	; 0x30
 8004caa:	428a      	cmp	r2, r1
 8004cac:	bf08      	it	eq
 8004cae:	f043 0301 	orreq.w	r3, r3, #1
 8004cb2:	3130      	adds	r1, #48	; 0x30
 8004cb4:	4282      	cmp	r2, r0
 8004cb6:	bf08      	it	eq
 8004cb8:	f043 0301 	orreq.w	r3, r3, #1
 8004cbc:	3030      	adds	r0, #48	; 0x30
 8004cbe:	428a      	cmp	r2, r1
 8004cc0:	bf08      	it	eq
 8004cc2:	f043 0301 	orreq.w	r3, r3, #1
 8004cc6:	3130      	adds	r1, #48	; 0x30
 8004cc8:	4282      	cmp	r2, r0
 8004cca:	bf08      	it	eq
 8004ccc:	f043 0301 	orreq.w	r3, r3, #1
 8004cd0:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004cd4:	428a      	cmp	r2, r1
 8004cd6:	bf08      	it	eq
 8004cd8:	f043 0301 	orreq.w	r3, r3, #1
 8004cdc:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004ce0:	4282      	cmp	r2, r0
 8004ce2:	bf08      	it	eq
 8004ce4:	f043 0301 	orreq.w	r3, r3, #1
 8004ce8:	3030      	adds	r0, #48	; 0x30
 8004cea:	428a      	cmp	r2, r1
 8004cec:	bf08      	it	eq
 8004cee:	f043 0301 	orreq.w	r3, r3, #1
 8004cf2:	3130      	adds	r1, #48	; 0x30
 8004cf4:	4282      	cmp	r2, r0
 8004cf6:	bf08      	it	eq
 8004cf8:	f043 0301 	orreq.w	r3, r3, #1
 8004cfc:	3030      	adds	r0, #48	; 0x30
 8004cfe:	428a      	cmp	r2, r1
 8004d00:	bf08      	it	eq
 8004d02:	f043 0301 	orreq.w	r3, r3, #1
 8004d06:	3130      	adds	r1, #48	; 0x30
 8004d08:	4282      	cmp	r2, r0
 8004d0a:	bf08      	it	eq
 8004d0c:	f043 0301 	orreq.w	r3, r3, #1
 8004d10:	3030      	adds	r0, #48	; 0x30
 8004d12:	428a      	cmp	r2, r1
 8004d14:	bf08      	it	eq
 8004d16:	f043 0301 	orreq.w	r3, r3, #1
 8004d1a:	6821      	ldr	r1, [r4, #0]
 8004d1c:	4282      	cmp	r2, r0
 8004d1e:	bf08      	it	eq
 8004d20:	f043 0301 	orreq.w	r3, r3, #1
 8004d24:	b913      	cbnz	r3, 8004d2c <HAL_DMAEx_ConfigMuxSync+0x260>
 8004d26:	4b1c      	ldr	r3, [pc, #112]	; (8004d98 <HAL_DMAEx_ConfigMuxSync+0x2cc>)
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d118      	bne.n	8004d5e <HAL_DMAEx_ConfigMuxSync+0x292>
      assert_param(IS_DMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
 8004d2c:	2907      	cmp	r1, #7
 8004d2e:	d807      	bhi.n	8004d40 <HAL_DMAEx_ConfigMuxSync+0x274>
    syncPolarity = pSyncConfig->SyncPolarity;
 8004d30:	6862      	ldr	r2, [r4, #4]
 8004d32:	e777      	b.n	8004c24 <HAL_DMAEx_ConfigMuxSync+0x158>
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));
 8004d34:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004d38:	4816      	ldr	r0, [pc, #88]	; (8004d94 <HAL_DMAEx_ConfigMuxSync+0x2c8>)
 8004d3a:	f00e ff7f 	bl	8013c3c <assert_failed>
 8004d3e:	e76c      	b.n	8004c1a <HAL_DMAEx_ConfigMuxSync+0x14e>
      assert_param(IS_DMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
 8004d40:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8004d44:	4813      	ldr	r0, [pc, #76]	; (8004d94 <HAL_DMAEx_ConfigMuxSync+0x2c8>)
 8004d46:	f00e ff79 	bl	8013c3c <assert_failed>
 8004d4a:	6821      	ldr	r1, [r4, #0]
 8004d4c:	e7f0      	b.n	8004d30 <HAL_DMAEx_ConfigMuxSync+0x264>
    __HAL_LOCK(hdma);
 8004d4e:	2002      	movs	r0, #2
}
 8004d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));
 8004d52:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8004d56:	480f      	ldr	r0, [pc, #60]	; (8004d94 <HAL_DMAEx_ConfigMuxSync+0x2c8>)
 8004d58:	f00e ff70 	bl	8013c3c <assert_failed>
 8004d5c:	e794      	b.n	8004c88 <HAL_DMAEx_ConfigMuxSync+0x1bc>
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
 8004d5e:	290f      	cmp	r1, #15
 8004d60:	d9e6      	bls.n	8004d30 <HAL_DMAEx_ConfigMuxSync+0x264>
 8004d62:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004d66:	480b      	ldr	r0, [pc, #44]	; (8004d94 <HAL_DMAEx_ConfigMuxSync+0x2c8>)
 8004d68:	f00e ff68 	bl	8013c3c <assert_failed>
 8004d6c:	6821      	ldr	r1, [r4, #0]
 8004d6e:	e7df      	b.n	8004d30 <HAL_DMAEx_ConfigMuxSync+0x264>
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
 8004d70:	f240 1193 	movw	r1, #403	; 0x193
 8004d74:	4807      	ldr	r0, [pc, #28]	; (8004d94 <HAL_DMAEx_ConfigMuxSync+0x2c8>)
 8004d76:	f00e ff61 	bl	8013c3c <assert_failed>
 8004d7a:	e739      	b.n	8004bf0 <HAL_DMAEx_ConfigMuxSync+0x124>
 8004d7c:	40020010 	.word	0x40020010
 8004d80:	40020028 	.word	0x40020028
 8004d84:	40020040 	.word	0x40020040
 8004d88:	58025408 	.word	0x58025408
 8004d8c:	5802541c 	.word	0x5802541c
 8004d90:	58025494 	.word	0x58025494
 8004d94:	0802a278 	.word	0x0802a278
 8004d98:	400204b8 	.word	0x400204b8

08004d9c <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b510      	push	{r4, lr}
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004d9e:	e9d0 2319 	ldrd	r2, r3, [r0, #100]	; 0x64
{
 8004da2:	4604      	mov	r4, r0
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	421a      	tst	r2, r3
 8004da8:	d00e      	beq.n	8004dc8 <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004daa:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004dac:	6813      	ldr	r3, [r2, #0]
 8004dae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db2:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004db4:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 8004db8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004dba:	6d43      	ldr	r3, [r0, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8004dbc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dc2:	6543      	str	r3, [r0, #84]	; 0x54
    if(hdma->XferErrorCallback != NULL)
 8004dc4:	b102      	cbz	r2, 8004dc8 <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dc6:	4790      	blx	r2
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8004dc8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004dca:	b1ab      	cbz	r3, 8004df8 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004dcc:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
 8004dd0:	6809      	ldr	r1, [r1, #0]
 8004dd2:	4211      	tst	r1, r2
 8004dd4:	d010      	beq.n	8004df8 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ddc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dde:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8004de2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004de4:	6d63      	ldr	r3, [r4, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8004de6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004de8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dec:	6563      	str	r3, [r4, #84]	; 0x54
      if(hdma->XferErrorCallback != NULL)
 8004dee:	b11a      	cbz	r2, 8004df8 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004df0:	4620      	mov	r0, r4
      }
    }
  }
}
 8004df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hdma->XferErrorCallback(hdma);
 8004df6:	4710      	bx	r2
}
 8004df8:	bd10      	pop	{r4, pc}
 8004dfa:	bf00      	nop

08004dfc <FLASH_WaitForLastOperation.constprop.3>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	4605      	mov	r5, r0
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag, errorflag;
  uint32_t tickstart = HAL_GetTick();
 8004e00:	f7fb ff20 	bl	8000c44 <HAL_GetTick>
 8004e04:	4606      	mov	r6, r0

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));
 8004e06:	1e6b      	subs	r3, r5, #1
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d80e      	bhi.n	8004e2a <FLASH_WaitForLastOperation.constprop.3+0x2e>

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
 8004e0c:	2d01      	cmp	r5, #1
 8004e0e:	d111      	bne.n	8004e34 <FLASH_WaitForLastOperation.constprop.3+0x38>
  else
  {
    bsyflag = FLASH_FLAG_QW_BANK2;
  }

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004e10:	4c2b      	ldr	r4, [pc, #172]	; (8004ec0 <FLASH_WaitForLastOperation.constprop.3+0xc4>)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e12:	f24c 3550 	movw	r5, #50000	; 0xc350
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004e16:	6923      	ldr	r3, [r4, #16]
 8004e18:	075b      	lsls	r3, r3, #29
 8004e1a:	d53a      	bpl.n	8004e92 <FLASH_WaitForLastOperation.constprop.3+0x96>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e1c:	f7fb ff12 	bl	8000c44 <HAL_GetTick>
 8004e20:	1b80      	subs	r0, r0, r6
 8004e22:	42a8      	cmp	r0, r5
 8004e24:	d9f7      	bls.n	8004e16 <FLASH_WaitForLastOperation.constprop.3+0x1a>
      {
        return HAL_TIMEOUT;
 8004e26:	2003      	movs	r0, #3
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }

  return HAL_OK;
}
 8004e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));
 8004e2a:	f240 3192 	movw	r1, #914	; 0x392
 8004e2e:	4825      	ldr	r0, [pc, #148]	; (8004ec4 <FLASH_WaitForLastOperation.constprop.3+0xc8>)
 8004e30:	f00e ff04 	bl	8013c3c <assert_failed>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004e34:	4c22      	ldr	r4, [pc, #136]	; (8004ec0 <FLASH_WaitForLastOperation.constprop.3+0xc4>)
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e36:	f24c 3750 	movw	r7, #50000	; 0xc350
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004e3a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8004e3e:	075a      	lsls	r2, r3, #29
 8004e40:	d508      	bpl.n	8004e54 <FLASH_WaitForLastOperation.constprop.3+0x58>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e42:	f7fb feff 	bl	8000c44 <HAL_GetTick>
 8004e46:	1b80      	subs	r0, r0, r6
 8004e48:	42b8      	cmp	r0, r7
 8004e4a:	d8ec      	bhi.n	8004e26 <FLASH_WaitForLastOperation.constprop.3+0x2a>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004e4c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8004e50:	075a      	lsls	r2, r3, #29
 8004e52:	d4f6      	bmi.n	8004e42 <FLASH_WaitForLastOperation.constprop.3+0x46>
  if (Bank == FLASH_BANK_1)
 8004e54:	2d01      	cmp	r5, #1
 8004e56:	d01c      	beq.n	8004e92 <FLASH_WaitForLastOperation.constprop.3+0x96>
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8004e58:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
  if((errorflag & 0x7DFFFFFFU) != 0U)
 8004e5c:	481a      	ldr	r0, [pc, #104]	; (8004ec8 <FLASH_WaitForLastOperation.constprop.3+0xcc>)
 8004e5e:	4018      	ands	r0, r3
 8004e60:	d00b      	beq.n	8004e7a <FLASH_WaitForLastOperation.constprop.3+0x7e>
    pFlash.ErrorCode |= errorflag;
 8004e62:	491a      	ldr	r1, [pc, #104]	; (8004ecc <FLASH_WaitForLastOperation.constprop.3+0xd0>)
    return HAL_ERROR;
 8004e64:	2001      	movs	r0, #1
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8004e66:	4d1a      	ldr	r5, [pc, #104]	; (8004ed0 <FLASH_WaitForLastOperation.constprop.3+0xd4>)
    pFlash.ErrorCode |= errorflag;
 8004e68:	698a      	ldr	r2, [r1, #24]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8004e6a:	402b      	ands	r3, r5
    pFlash.ErrorCode |= errorflag;
 8004e6c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e70:	431a      	orrs	r2, r3
 8004e72:	618a      	str	r2, [r1, #24]
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8004e74:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
}
 8004e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8004e7a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8004e7e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004e82:	d004      	beq.n	8004e8e <FLASH_WaitForLastOperation.constprop.3+0x92>
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8004e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e88:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
}
 8004e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8004e8e:	4618      	mov	r0, r3
}
 8004e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8004e92:	4a0b      	ldr	r2, [pc, #44]	; (8004ec0 <FLASH_WaitForLastOperation.constprop.3+0xc4>)
  if((errorflag & 0x7DFFFFFFU) != 0U)
 8004e94:	480c      	ldr	r0, [pc, #48]	; (8004ec8 <FLASH_WaitForLastOperation.constprop.3+0xcc>)
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8004e96:	6913      	ldr	r3, [r2, #16]
  if((errorflag & 0x7DFFFFFFU) != 0U)
 8004e98:	4018      	ands	r0, r3
 8004e9a:	d107      	bne.n	8004eac <FLASH_WaitForLastOperation.constprop.3+0xb0>
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8004e9c:	6913      	ldr	r3, [r2, #16]
 8004e9e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004ea2:	d0f4      	beq.n	8004e8e <FLASH_WaitForLastOperation.constprop.3+0x92>
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8004ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ea8:	6153      	str	r3, [r2, #20]
}
 8004eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.ErrorCode |= errorflag;
 8004eac:	4c07      	ldr	r4, [pc, #28]	; (8004ecc <FLASH_WaitForLastOperation.constprop.3+0xd0>)
    return HAL_ERROR;
 8004eae:	2001      	movs	r0, #1
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8004eb0:	4907      	ldr	r1, [pc, #28]	; (8004ed0 <FLASH_WaitForLastOperation.constprop.3+0xd4>)
 8004eb2:	400b      	ands	r3, r1
    pFlash.ErrorCode |= errorflag;
 8004eb4:	69a1      	ldr	r1, [r4, #24]
 8004eb6:	4319      	orrs	r1, r3
 8004eb8:	61a1      	str	r1, [r4, #24]
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8004eba:	6153      	str	r3, [r2, #20]
}
 8004ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	52002000 	.word	0x52002000
 8004ec4:	0802a2b4 	.word	0x0802a2b4
 8004ec8:	15ee0000 	.word	0x15ee0000
 8004ecc:	20000664 	.word	0x20000664
 8004ed0:	17ee0000 	.word	0x17ee0000

08004ed4 <HAL_FLASH_Program>:
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8004ed4:	2801      	cmp	r0, #1
{
 8004ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eda:	460c      	mov	r4, r1
 8004edc:	4616      	mov	r6, r2
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8004ede:	d003      	beq.n	8004ee8 <HAL_FLASH_Program+0x14>
 8004ee0:	219b      	movs	r1, #155	; 0x9b
 8004ee2:	4834      	ldr	r0, [pc, #208]	; (8004fb4 <HAL_FLASH_Program+0xe0>)
 8004ee4:	f00e feaa 	bl	8013c3c <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));
 8004ee8:	f104 4778 	add.w	r7, r4, #4160749568	; 0xf8000000
 8004eec:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 8004ef0:	d24f      	bcs.n	8004f92 <HAL_FLASH_Program+0xbe>
  __HAL_LOCK(&pFlash);
 8004ef2:	4d31      	ldr	r5, [pc, #196]	; (8004fb8 <HAL_FLASH_Program+0xe4>)
 8004ef4:	7d2b      	ldrb	r3, [r5, #20]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d053      	beq.n	8004fa2 <HAL_FLASH_Program+0xce>
 8004efa:	f04f 0801 	mov.w	r8, #1
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8004efe:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f02:	f04f 0300 	mov.w	r3, #0
  __HAL_LOCK(&pFlash);
 8004f06:	f885 8014 	strb.w	r8, [r5, #20]
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8004f0a:	d336      	bcc.n	8004f7a <HAL_FLASH_Program+0xa6>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8004f0c:	2002      	movs	r0, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f0e:	61ab      	str	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8004f10:	f7ff ff74 	bl	8004dfc <FLASH_WaitForLastOperation.constprop.3>
  if(status == HAL_OK)
 8004f14:	bb68      	cbnz	r0, 8004f72 <HAL_FLASH_Program+0x9e>
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8004f16:	4a29      	ldr	r2, [pc, #164]	; (8004fbc <HAL_FLASH_Program+0xe8>)
    bank = FLASH_BANK_2;
 8004f18:	f04f 0802 	mov.w	r8, #2
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8004f1c:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8004f20:	ea43 0308 	orr.w	r3, r3, r8
 8004f24:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8004f28:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8004f2c:	f3bf 8f4f 	dsb	sy
        *dest_addr = *src_addr;
 8004f30:	6833      	ldr	r3, [r6, #0]
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	6873      	ldr	r3, [r6, #4]
 8004f36:	6063      	str	r3, [r4, #4]
 8004f38:	68b3      	ldr	r3, [r6, #8]
 8004f3a:	60a3      	str	r3, [r4, #8]
 8004f3c:	68f3      	ldr	r3, [r6, #12]
 8004f3e:	60e3      	str	r3, [r4, #12]
 8004f40:	6933      	ldr	r3, [r6, #16]
 8004f42:	6123      	str	r3, [r4, #16]
 8004f44:	6973      	ldr	r3, [r6, #20]
 8004f46:	6163      	str	r3, [r4, #20]
 8004f48:	69b3      	ldr	r3, [r6, #24]
 8004f4a:	61a3      	str	r3, [r4, #24]
 8004f4c:	69f3      	ldr	r3, [r6, #28]
 8004f4e:	61e3      	str	r3, [r4, #28]
  __ASM volatile ("isb 0xF":::"memory");
 8004f50:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8004f54:	f3bf 8f4f 	dsb	sy
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8004f58:	4640      	mov	r0, r8
 8004f5a:	f7ff ff4f 	bl	8004dfc <FLASH_WaitForLastOperation.constprop.3>
      if(bank == FLASH_BANK_1)
 8004f5e:	f1b8 0f01 	cmp.w	r8, #1
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8004f62:	4a16      	ldr	r2, [pc, #88]	; (8004fbc <HAL_FLASH_Program+0xe8>)
      if(bank == FLASH_BANK_1)
 8004f64:	d020      	beq.n	8004fa8 <HAL_FLASH_Program+0xd4>
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8004f66:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8004f6a:	f023 0302 	bic.w	r3, r3, #2
 8004f6e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __HAL_UNLOCK(&pFlash);
 8004f72:	2300      	movs	r3, #0
 8004f74:	752b      	strb	r3, [r5, #20]
}
 8004f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8004f7a:	4640      	mov	r0, r8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f7c:	61ab      	str	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8004f7e:	f7ff ff3d 	bl	8004dfc <FLASH_WaitForLastOperation.constprop.3>
  if(status == HAL_OK)
 8004f82:	2800      	cmp	r0, #0
 8004f84:	d1f5      	bne.n	8004f72 <HAL_FLASH_Program+0x9e>
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8004f86:	4a0d      	ldr	r2, [pc, #52]	; (8004fbc <HAL_FLASH_Program+0xe8>)
 8004f88:	68d3      	ldr	r3, [r2, #12]
 8004f8a:	f043 0302 	orr.w	r3, r3, #2
 8004f8e:	60d3      	str	r3, [r2, #12]
 8004f90:	e7ca      	b.n	8004f28 <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 8004f92:	4d09      	ldr	r5, [pc, #36]	; (8004fb8 <HAL_FLASH_Program+0xe4>)
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));
 8004f94:	219c      	movs	r1, #156	; 0x9c
 8004f96:	4807      	ldr	r0, [pc, #28]	; (8004fb4 <HAL_FLASH_Program+0xe0>)
 8004f98:	f00e fe50 	bl	8013c3c <assert_failed>
  __HAL_LOCK(&pFlash);
 8004f9c:	7d2b      	ldrb	r3, [r5, #20]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d1ab      	bne.n	8004efa <HAL_FLASH_Program+0x26>
 8004fa2:	2002      	movs	r0, #2
}
 8004fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8004fa8:	68d3      	ldr	r3, [r2, #12]
 8004faa:	f023 0302 	bic.w	r3, r3, #2
 8004fae:	60d3      	str	r3, [r2, #12]
 8004fb0:	e7df      	b.n	8004f72 <HAL_FLASH_Program+0x9e>
 8004fb2:	bf00      	nop
 8004fb4:	0802a2b4 	.word	0x0802a2b4
 8004fb8:	20000664 	.word	0x20000664
 8004fbc:	52002000 	.word	0x52002000

08004fc0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <HAL_FLASH_Unlock+0x40>)
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	07d2      	lsls	r2, r2, #31
 8004fc6:	d506      	bpl.n	8004fd6 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8004fc8:	490e      	ldr	r1, [pc, #56]	; (8005004 <HAL_FLASH_Unlock+0x44>)
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8004fca:	4a0f      	ldr	r2, [pc, #60]	; (8005008 <HAL_FLASH_Unlock+0x48>)
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8004fcc:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8004fce:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	07db      	lsls	r3, r3, #31
 8004fd4:	d411      	bmi.n	8004ffa <HAL_FLASH_Unlock+0x3a>
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8004fd6:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <HAL_FLASH_Unlock+0x40>)
 8004fd8:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8004fdc:	f010 0001 	ands.w	r0, r0, #1
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_FLASH_Unlock+0x38>
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8004fe2:	4908      	ldr	r1, [pc, #32]	; (8005004 <HAL_FLASH_Unlock+0x44>)
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8004fe4:	4a08      	ldr	r2, [pc, #32]	; (8005008 <HAL_FLASH_Unlock+0x48>)
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8004fe6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8004fea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8004fee:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
      return HAL_ERROR;
 8004ff2:	f000 0001 	and.w	r0, r0, #1
 8004ff6:	4770      	bx	lr
 8004ff8:	4770      	bx	lr
 8004ffa:	2001      	movs	r0, #1
}
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	52002000 	.word	0x52002000
 8005004:	45670123 	.word	0x45670123
 8005008:	cdef89ab 	.word	0xcdef89ab

0800500c <FLASH_WaitForLastOperation>:
{
 800500c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005010:	460d      	mov	r5, r1
 8005012:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8005014:	f7fb fe16 	bl	8000c44 <HAL_GetTick>
 8005018:	4680      	mov	r8, r0
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));
 800501a:	1e6b      	subs	r3, r5, #1
 800501c:	2b01      	cmp	r3, #1
 800501e:	d857      	bhi.n	80050d0 <FLASH_WaitForLastOperation+0xc4>
    bsyflag = FLASH_FLAG_QW_BANK2;
 8005020:	2d01      	cmp	r5, #1
 8005022:	4c36      	ldr	r4, [pc, #216]	; (80050fc <FLASH_WaitForLastOperation+0xf0>)
 8005024:	bf08      	it	eq
 8005026:	2404      	moveq	r4, #4
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8005028:	4f35      	ldr	r7, [pc, #212]	; (8005100 <FLASH_WaitForLastOperation+0xf4>)
 800502a:	2c04      	cmp	r4, #4
 800502c:	d02d      	beq.n	800508a <FLASH_WaitForLastOperation+0x7e>
 800502e:	1c70      	adds	r0, r6, #1
 8005030:	d11b      	bne.n	800506a <FLASH_WaitForLastOperation+0x5e>
 8005032:	4a33      	ldr	r2, [pc, #204]	; (8005100 <FLASH_WaitForLastOperation+0xf4>)
 8005034:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
 8005038:	ea24 0303 	bic.w	r3, r4, r3
 800503c:	0759      	lsls	r1, r3, #29
 800503e:	d5f9      	bpl.n	8005034 <FLASH_WaitForLastOperation+0x28>
  if (Bank == FLASH_BANK_1)
 8005040:	2d01      	cmp	r5, #1
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8005042:	4a2f      	ldr	r2, [pc, #188]	; (8005100 <FLASH_WaitForLastOperation+0xf4>)
  if((errorflag & 0x7DFFFFFFU) != 0U)
 8005044:	482f      	ldr	r0, [pc, #188]	; (8005104 <FLASH_WaitForLastOperation+0xf8>)
  if (Bank == FLASH_BANK_1)
 8005046:	d02a      	beq.n	800509e <FLASH_WaitForLastOperation+0x92>
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8005048:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  if((errorflag & 0x7DFFFFFFU) != 0U)
 800504c:	4018      	ands	r0, r3
 800504e:	d031      	beq.n	80050b4 <FLASH_WaitForLastOperation+0xa8>
    pFlash.ErrorCode |= errorflag;
 8005050:	4c2d      	ldr	r4, [pc, #180]	; (8005108 <FLASH_WaitForLastOperation+0xfc>)
    return HAL_ERROR;
 8005052:	2001      	movs	r0, #1
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8005054:	4d2d      	ldr	r5, [pc, #180]	; (800510c <FLASH_WaitForLastOperation+0x100>)
    pFlash.ErrorCode |= errorflag;
 8005056:	69a1      	ldr	r1, [r4, #24]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8005058:	402b      	ands	r3, r5
    pFlash.ErrorCode |= errorflag;
 800505a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800505e:	4319      	orrs	r1, r3
 8005060:	61a1      	str	r1, [r4, #24]
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8005062:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
}
 8005066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800506a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800506e:	ea24 0303 	bic.w	r3, r4, r3
 8005072:	075b      	lsls	r3, r3, #29
 8005074:	d4e4      	bmi.n	8005040 <FLASH_WaitForLastOperation+0x34>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005076:	f7fb fde5 	bl	8000c44 <HAL_GetTick>
 800507a:	eba0 0008 	sub.w	r0, r0, r8
 800507e:	42b0      	cmp	r0, r6
 8005080:	d801      	bhi.n	8005086 <FLASH_WaitForLastOperation+0x7a>
 8005082:	2e00      	cmp	r6, #0
 8005084:	d1d1      	bne.n	800502a <FLASH_WaitForLastOperation+0x1e>
        return HAL_TIMEOUT;
 8005086:	2003      	movs	r0, #3
 8005088:	e7ed      	b.n	8005066 <FLASH_WaitForLastOperation+0x5a>
 800508a:	1c70      	adds	r0, r6, #1
 800508c:	d127      	bne.n	80050de <FLASH_WaitForLastOperation+0xd2>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800508e:	4a1c      	ldr	r2, [pc, #112]	; (8005100 <FLASH_WaitForLastOperation+0xf4>)
 8005090:	6913      	ldr	r3, [r2, #16]
 8005092:	0759      	lsls	r1, r3, #29
 8005094:	d4fc      	bmi.n	8005090 <FLASH_WaitForLastOperation+0x84>
  if (Bank == FLASH_BANK_1)
 8005096:	2d01      	cmp	r5, #1
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8005098:	4a19      	ldr	r2, [pc, #100]	; (8005100 <FLASH_WaitForLastOperation+0xf4>)
  if((errorflag & 0x7DFFFFFFU) != 0U)
 800509a:	481a      	ldr	r0, [pc, #104]	; (8005104 <FLASH_WaitForLastOperation+0xf8>)
  if (Bank == FLASH_BANK_1)
 800509c:	d1d4      	bne.n	8005048 <FLASH_WaitForLastOperation+0x3c>
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800509e:	6913      	ldr	r3, [r2, #16]
  if((errorflag & 0x7DFFFFFFU) != 0U)
 80050a0:	4018      	ands	r0, r3
 80050a2:	d120      	bne.n	80050e6 <FLASH_WaitForLastOperation+0xda>
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80050a4:	6915      	ldr	r5, [r2, #16]
 80050a6:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
 80050aa:	d00e      	beq.n	80050ca <FLASH_WaitForLastOperation+0xbe>
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80050ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050b0:	6153      	str	r3, [r2, #20]
 80050b2:	e7d8      	b.n	8005066 <FLASH_WaitForLastOperation+0x5a>
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 80050b4:	f8d2 5110 	ldr.w	r5, [r2, #272]	; 0x110
 80050b8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
 80050bc:	d005      	beq.n	80050ca <FLASH_WaitForLastOperation+0xbe>
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 80050be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050c2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
}
 80050c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80050ca:	4628      	mov	r0, r5
}
 80050cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));
 80050d0:	f240 3192 	movw	r1, #914	; 0x392
 80050d4:	480e      	ldr	r0, [pc, #56]	; (8005110 <FLASH_WaitForLastOperation+0x104>)
 80050d6:	f00e fdb1 	bl	8013c3c <assert_failed>
    bsyflag = FLASH_FLAG_QW_BANK2;
 80050da:	4c08      	ldr	r4, [pc, #32]	; (80050fc <FLASH_WaitForLastOperation+0xf0>)
 80050dc:	e7a4      	b.n	8005028 <FLASH_WaitForLastOperation+0x1c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	075b      	lsls	r3, r3, #29
 80050e2:	d4c8      	bmi.n	8005076 <FLASH_WaitForLastOperation+0x6a>
 80050e4:	e7ac      	b.n	8005040 <FLASH_WaitForLastOperation+0x34>
    pFlash.ErrorCode |= errorflag;
 80050e6:	4c08      	ldr	r4, [pc, #32]	; (8005108 <FLASH_WaitForLastOperation+0xfc>)
    return HAL_ERROR;
 80050e8:	4628      	mov	r0, r5
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80050ea:	4908      	ldr	r1, [pc, #32]	; (800510c <FLASH_WaitForLastOperation+0x100>)
 80050ec:	400b      	ands	r3, r1
    pFlash.ErrorCode |= errorflag;
 80050ee:	69a1      	ldr	r1, [r4, #24]
 80050f0:	4319      	orrs	r1, r3
 80050f2:	61a1      	str	r1, [r4, #24]
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80050f4:	6153      	str	r3, [r2, #20]
}
 80050f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050fa:	bf00      	nop
 80050fc:	80000004 	.word	0x80000004
 8005100:	52002000 	.word	0x52002000
 8005104:	15ee0000 	.word	0x15ee0000
 8005108:	20000664 	.word	0x20000664
 800510c:	17ee0000 	.word	0x17ee0000
 8005110:	0802a2b4 	.word	0x0802a2b4

08005114 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8005114:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
#if defined (FLASH_CR_PSIZE)
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8005116:	f030 0330 	bics.w	r3, r0, #48	; 0x30
{
 800511a:	4605      	mov	r5, r0
 800511c:	460c      	mov	r4, r1
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800511e:	d004      	beq.n	800512a <FLASH_MassErase+0x16>
 8005120:	f44f 7144 	mov.w	r1, #784	; 0x310
 8005124:	4826      	ldr	r0, [pc, #152]	; (80051c0 <FLASH_MassErase+0xac>)
 8005126:	f00e fd89 	bl	8013c3c <assert_failed>
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));
 800512a:	1e63      	subs	r3, r4, #1
 800512c:	2b02      	cmp	r3, #2
 800512e:	d826      	bhi.n	800517e <FLASH_MassErase+0x6a>

  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8005130:	f004 0303 	and.w	r3, r4, #3
 8005134:	2b03      	cmp	r3, #3
 8005136:	d02b      	beq.n	8005190 <FLASH_MassErase+0x7c>
    FLASH->OPTCR |= FLASH_OPTCR_MER;
  }
  else
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8005138:	07e2      	lsls	r2, r4, #31
 800513a:	d50b      	bpl.n	8005154 <FLASH_MassErase+0x40>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800513c:	4b21      	ldr	r3, [pc, #132]	; (80051c4 <FLASH_MassErase+0xb0>)
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005144:	60da      	str	r2, [r3, #12]
      FLASH->CR1 |=  VoltageRange;
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	432a      	orrs	r2, r5
 800514a:	60da      	str	r2, [r3, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	f042 0288 	orr.w	r2, r2, #136	; 0x88
 8005152:	60da      	str	r2, [r3, #12]
    }
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8005154:	07a3      	lsls	r3, r4, #30
 8005156:	d511      	bpl.n	800517c <FLASH_MassErase+0x68>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank2 */
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8005158:	4b1a      	ldr	r3, [pc, #104]	; (80051c4 <FLASH_MassErase+0xb0>)
 800515a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800515e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005162:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 8005166:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800516a:	4315      	orrs	r5, r2
 800516c:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8005170:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8005174:	f042 0288 	orr.w	r2, r2, #136	; 0x88
 8005178:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    }
  }
}
 800517c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_BANK(Banks));
 800517e:	f44f 7145 	mov.w	r1, #788	; 0x314
 8005182:	480f      	ldr	r0, [pc, #60]	; (80051c0 <FLASH_MassErase+0xac>)
 8005184:	f00e fd5a 	bl	8013c3c <assert_failed>
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8005188:	f004 0303 	and.w	r3, r4, #3
 800518c:	2b03      	cmp	r3, #3
 800518e:	d1d3      	bne.n	8005138 <FLASH_MassErase+0x24>
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8005190:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <FLASH_MassErase+0xb0>)
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005198:	60da      	str	r2, [r3, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800519a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800519e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80051a2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    FLASH->CR1 |= VoltageRange;
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	432a      	orrs	r2, r5
 80051aa:	60da      	str	r2, [r3, #12]
    FLASH->CR2 |= VoltageRange;
 80051ac:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80051b0:	4315      	orrs	r5, r2
 80051b2:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	f042 0210 	orr.w	r2, r2, #16
 80051bc:	619a      	str	r2, [r3, #24]
}
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	0802a2f0 	.word	0x0802a2f0
 80051c4:	52002000 	.word	0x52002000

080051c8 <HAL_FLASHEx_Erase>:
{
 80051c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 80051cc:	6803      	ldr	r3, [r0, #0]
{
 80051ce:	b083      	sub	sp, #12
 80051d0:	4604      	mov	r4, r0
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 80051d2:	2b01      	cmp	r3, #1
{
 80051d4:	9101      	str	r1, [sp, #4]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 80051d6:	d903      	bls.n	80051e0 <HAL_FLASHEx_Erase+0x18>
 80051d8:	21ac      	movs	r1, #172	; 0xac
 80051da:	487d      	ldr	r0, [pc, #500]	; (80053d0 <HAL_FLASHEx_Erase+0x208>)
 80051dc:	f00e fd2e 	bl	8013c3c <assert_failed>
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));
 80051e0:	6863      	ldr	r3, [r4, #4]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	f200 80a1 	bhi.w	800532c <HAL_FLASHEx_Erase+0x164>
  __HAL_LOCK(&pFlash);
 80051ea:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80053d8 <HAL_FLASHEx_Erase+0x210>
 80051ee:	f898 3014 	ldrb.w	r3, [r8, #20]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	f000 80a5 	beq.w	8005342 <HAL_FLASHEx_Erase+0x17a>
 80051f8:	2501      	movs	r5, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80051fa:	2300      	movs	r3, #0
  __HAL_LOCK(&pFlash);
 80051fc:	f888 5014 	strb.w	r5, [r8, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005200:	f8c8 3018 	str.w	r3, [r8, #24]
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8005204:	6862      	ldr	r2, [r4, #4]
 8005206:	07d0      	lsls	r0, r2, #31
 8005208:	f100 80a0 	bmi.w	800534c <HAL_FLASHEx_Erase+0x184>
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800520c:	0793      	lsls	r3, r2, #30
 800520e:	d50d      	bpl.n	800522c <HAL_FLASHEx_Erase+0x64>
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8005210:	2102      	movs	r1, #2
 8005212:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005216:	f7ff fef9 	bl	800500c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800521a:	b138      	cbz	r0, 800522c <HAL_FLASHEx_Erase+0x64>
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800521c:	2301      	movs	r3, #1
  __HAL_UNLOCK(&pFlash);
 800521e:	2200      	movs	r2, #0
}
 8005220:	4618      	mov	r0, r3
  __HAL_UNLOCK(&pFlash);
 8005222:	f888 2014 	strb.w	r2, [r8, #20]
}
 8005226:	b003      	add	sp, #12
 8005228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800522c:	6825      	ldr	r5, [r4, #0]
 800522e:	2d01      	cmp	r5, #1
 8005230:	f000 80a2 	beq.w	8005378 <HAL_FLASHEx_Erase+0x1b0>
      *SectorError = 0xFFFFFFFFU;
 8005234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005238:	9a01      	ldr	r2, [sp, #4]
 800523a:	6013      	str	r3, [r2, #0]
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800523c:	e9d4 6302 	ldrd	r6, r3, [r4, #8]
 8005240:	4433      	add	r3, r6
 8005242:	42b3      	cmp	r3, r6
 8005244:	f240 8096 	bls.w	8005374 <HAL_FLASHEx_Erase+0x1ac>
 8005248:	0237      	lsls	r7, r6, #8
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
  assert_param(IS_FLASH_SECTOR(Sector));
 800524a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80053d0 <HAL_FLASHEx_Erase+0x208>

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800524e:	4d61      	ldr	r5, [pc, #388]	; (80053d4 <HAL_FLASHEx_Erase+0x20c>)
 8005250:	e03d      	b.n	80052ce <HAL_FLASHEx_Erase+0x106>
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));
 8005252:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 8005256:	2901      	cmp	r1, #1
 8005258:	d904      	bls.n	8005264 <HAL_FLASHEx_Erase+0x9c>
 800525a:	f240 3157 	movw	r1, #855	; 0x357
 800525e:	4648      	mov	r0, r9
 8005260:	f00e fcec 	bl	8013c3c <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8005264:	f03b 0330 	bics.w	r3, fp, #48	; 0x30
 8005268:	d004      	beq.n	8005274 <HAL_FLASHEx_Erase+0xac>
 800526a:	f240 3159 	movw	r1, #857	; 0x359
 800526e:	4648      	mov	r0, r9
 8005270:	f00e fce4 	bl	8013c3c <assert_failed>
  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8005274:	f01a 0f01 	tst.w	sl, #1
 8005278:	d00a      	beq.n	8005290 <HAL_FLASHEx_Erase+0xc8>
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800527a:	68e9      	ldr	r1, [r5, #12]
 800527c:	f421 61e6 	bic.w	r1, r1, #1840	; 0x730
 8005280:	60e9      	str	r1, [r5, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8005282:	68e9      	ldr	r1, [r5, #12]
 8005284:	f041 0184 	orr.w	r1, r1, #132	; 0x84
 8005288:	ea41 010b 	orr.w	r1, r1, fp
 800528c:	4339      	orrs	r1, r7
 800528e:	60e9      	str	r1, [r5, #12]

    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8005290:	f01a 0f02 	tst.w	sl, #2
 8005294:	d00e      	beq.n	80052b4 <HAL_FLASHEx_Erase+0xec>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8005296:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800529a:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800529e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80052a2:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 80052a6:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80052aa:	ea43 030b 	orr.w	r3, r3, fp
 80052ae:	433b      	orrs	r3, r7
 80052b0:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80052b4:	6863      	ldr	r3, [r4, #4]
 80052b6:	07da      	lsls	r2, r3, #31
 80052b8:	d415      	bmi.n	80052e6 <HAL_FLASHEx_Erase+0x11e>
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80052ba:	0798      	lsls	r0, r3, #30
 80052bc:	d427      	bmi.n	800530e <HAL_FLASHEx_Erase+0x146>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80052be:	68e3      	ldr	r3, [r4, #12]
 80052c0:	3601      	adds	r6, #1
 80052c2:	68a2      	ldr	r2, [r4, #8]
 80052c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052c8:	4413      	add	r3, r2
 80052ca:	42b3      	cmp	r3, r6
 80052cc:	d952      	bls.n	8005374 <HAL_FLASHEx_Erase+0x1ac>
  assert_param(IS_FLASH_SECTOR(Sector));
 80052ce:	2e07      	cmp	r6, #7
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 80052d0:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80052d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
  assert_param(IS_FLASH_SECTOR(Sector));
 80052d8:	d9bb      	bls.n	8005252 <HAL_FLASHEx_Erase+0x8a>
 80052da:	f240 3156 	movw	r1, #854	; 0x356
 80052de:	4648      	mov	r0, r9
 80052e0:	f00e fcac 	bl	8013c3c <assert_failed>
 80052e4:	e7b5      	b.n	8005252 <HAL_FLASHEx_Erase+0x8a>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80052e6:	2101      	movs	r1, #1
 80052e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80052ec:	f7ff fe8e 	bl	800500c <FLASH_WaitForLastOperation>
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80052f0:	68ea      	ldr	r2, [r5, #12]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80052f2:	4603      	mov	r3, r0
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80052f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052f8:	f022 0204 	bic.w	r2, r2, #4
 80052fc:	60ea      	str	r2, [r5, #12]
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80052fe:	6862      	ldr	r2, [r4, #4]
 8005300:	0791      	lsls	r1, r2, #30
 8005302:	d404      	bmi.n	800530e <HAL_FLASHEx_Erase+0x146>
        if(status != HAL_OK)
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0da      	beq.n	80052be <HAL_FLASHEx_Erase+0xf6>
          *SectorError = sector_index;
 8005308:	9a01      	ldr	r2, [sp, #4]
 800530a:	6016      	str	r6, [r2, #0]
          break;
 800530c:	e787      	b.n	800521e <HAL_FLASHEx_Erase+0x56>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800530e:	2102      	movs	r1, #2
 8005310:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005314:	f7ff fe7a 	bl	800500c <FLASH_WaitForLastOperation>
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8005318:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800531c:	4603      	mov	r3, r0
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800531e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005322:	f022 0204 	bic.w	r2, r2, #4
 8005326:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
 800532a:	e7eb      	b.n	8005304 <HAL_FLASHEx_Erase+0x13c>
  __HAL_LOCK(&pFlash);
 800532c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80053d8 <HAL_FLASHEx_Erase+0x210>
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));
 8005330:	21ad      	movs	r1, #173	; 0xad
 8005332:	4827      	ldr	r0, [pc, #156]	; (80053d0 <HAL_FLASHEx_Erase+0x208>)
 8005334:	f00e fc82 	bl	8013c3c <assert_failed>
  __HAL_LOCK(&pFlash);
 8005338:	f898 3014 	ldrb.w	r3, [r8, #20]
 800533c:	2b01      	cmp	r3, #1
 800533e:	f47f af5b 	bne.w	80051f8 <HAL_FLASHEx_Erase+0x30>
 8005342:	2302      	movs	r3, #2
}
 8005344:	4618      	mov	r0, r3
 8005346:	b003      	add	sp, #12
 8005348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800534c:	4629      	mov	r1, r5
 800534e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005352:	f7ff fe5b 	bl	800500c <FLASH_WaitForLastOperation>
 8005356:	b158      	cbz	r0, 8005370 <HAL_FLASHEx_Erase+0x1a8>
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8005358:	6863      	ldr	r3, [r4, #4]
 800535a:	079a      	lsls	r2, r3, #30
 800535c:	f57f af5e 	bpl.w	800521c <HAL_FLASHEx_Erase+0x54>
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8005360:	2102      	movs	r1, #2
 8005362:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005366:	9501      	str	r5, [sp, #4]
 8005368:	f7ff fe50 	bl	800500c <FLASH_WaitForLastOperation>
 800536c:	9b01      	ldr	r3, [sp, #4]
 800536e:	e756      	b.n	800521e <HAL_FLASHEx_Erase+0x56>
 8005370:	6862      	ldr	r2, [r4, #4]
 8005372:	e74b      	b.n	800520c <HAL_FLASHEx_Erase+0x44>
 8005374:	2300      	movs	r3, #0
 8005376:	e752      	b.n	800521e <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8005378:	6861      	ldr	r1, [r4, #4]
 800537a:	6920      	ldr	r0, [r4, #16]
 800537c:	f7ff feca 	bl	8005114 <FLASH_MassErase>
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8005380:	6862      	ldr	r2, [r4, #4]
 8005382:	f012 0301 	ands.w	r3, r2, #1
 8005386:	d114      	bne.n	80053b2 <HAL_FLASHEx_Erase+0x1ea>
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8005388:	0791      	lsls	r1, r2, #30
 800538a:	f57f af48 	bpl.w	800521e <HAL_FLASHEx_Erase+0x56>
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800538e:	2102      	movs	r1, #2
 8005390:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	f7ff fe39 	bl	800500c <FLASH_WaitForLastOperation>
        FLASH->CR2 &= (~FLASH_CR_BER);
 800539a:	490e      	ldr	r1, [pc, #56]	; (80053d4 <HAL_FLASHEx_Erase+0x20c>)
          status = HAL_ERROR;
 800539c:	2800      	cmp	r0, #0
 800539e:	9b01      	ldr	r3, [sp, #4]
        FLASH->CR2 &= (~FLASH_CR_BER);
 80053a0:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
          status = HAL_ERROR;
 80053a4:	bf18      	it	ne
 80053a6:	2301      	movne	r3, #1
        FLASH->CR2 &= (~FLASH_CR_BER);
 80053a8:	f022 0208 	bic.w	r2, r2, #8
 80053ac:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
 80053b0:	e735      	b.n	800521e <HAL_FLASHEx_Erase+0x56>
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80053b2:	4629      	mov	r1, r5
 80053b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80053b8:	f7ff fe28 	bl	800500c <FLASH_WaitForLastOperation>
        FLASH->CR1 &= (~FLASH_CR_BER);
 80053bc:	4905      	ldr	r1, [pc, #20]	; (80053d4 <HAL_FLASHEx_Erase+0x20c>)
          status = HAL_ERROR;
 80053be:	1c03      	adds	r3, r0, #0
        FLASH->CR1 &= (~FLASH_CR_BER);
 80053c0:	68ca      	ldr	r2, [r1, #12]
          status = HAL_ERROR;
 80053c2:	bf18      	it	ne
 80053c4:	2301      	movne	r3, #1
        FLASH->CR1 &= (~FLASH_CR_BER);
 80053c6:	f022 0208 	bic.w	r2, r2, #8
 80053ca:	60ca      	str	r2, [r1, #12]
 80053cc:	6862      	ldr	r2, [r4, #4]
 80053ce:	e7db      	b.n	8005388 <HAL_FLASHEx_Erase+0x1c0>
 80053d0:	0802a2f0 	.word	0x0802a2f0
 80053d4:	52002000 	.word	0x52002000
 80053d8:	20000664 	.word	0x20000664

080053dc <HAL_GPIO_Init>:
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80053dc:	4abf      	ldr	r2, [pc, #764]	; (80056dc <HAL_GPIO_Init+0x300>)
 80053de:	4bc0      	ldr	r3, [pc, #768]	; (80056e0 <HAL_GPIO_Init+0x304>)
 80053e0:	4290      	cmp	r0, r2
 80053e2:	bf18      	it	ne
 80053e4:	4298      	cmpne	r0, r3
{
 80053e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ea:	4607      	mov	r7, r0
 80053ec:	b089      	sub	sp, #36	; 0x24
 80053ee:	4689      	mov	r9, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80053f0:	bf14      	ite	ne
 80053f2:	f04f 0b01 	movne.w	fp, #1
 80053f6:	f04f 0b00 	moveq.w	fp, #0
 80053fa:	d027      	beq.n	800544c <HAL_GPIO_Init+0x70>
 80053fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005400:	4298      	cmp	r0, r3
 8005402:	d023      	beq.n	800544c <HAL_GPIO_Init+0x70>
 8005404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005408:	4298      	cmp	r0, r3
 800540a:	d01f      	beq.n	800544c <HAL_GPIO_Init+0x70>
 800540c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005410:	4298      	cmp	r0, r3
 8005412:	d01b      	beq.n	800544c <HAL_GPIO_Init+0x70>
 8005414:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005418:	4298      	cmp	r0, r3
 800541a:	d017      	beq.n	800544c <HAL_GPIO_Init+0x70>
 800541c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005420:	4298      	cmp	r0, r3
 8005422:	d013      	beq.n	800544c <HAL_GPIO_Init+0x70>
 8005424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005428:	4298      	cmp	r0, r3
 800542a:	d00f      	beq.n	800544c <HAL_GPIO_Init+0x70>
 800542c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005434:	4290      	cmp	r0, r2
 8005436:	bf18      	it	ne
 8005438:	4298      	cmpne	r0, r3
 800543a:	d007      	beq.n	800544c <HAL_GPIO_Init+0x70>
 800543c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005440:	4298      	cmp	r0, r3
 8005442:	d003      	beq.n	800544c <HAL_GPIO_Init+0x70>
 8005444:	21bb      	movs	r1, #187	; 0xbb
 8005446:	48a7      	ldr	r0, [pc, #668]	; (80056e4 <HAL_GPIO_Init+0x308>)
 8005448:	f00e fbf8 	bl	8013c3c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800544c:	f8d9 2000 	ldr.w	r2, [r9]
 8005450:	b293      	uxth	r3, r2
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8168 	beq.w	8005728 <HAL_GPIO_Init+0x34c>
 8005458:	4ba3      	ldr	r3, [pc, #652]	; (80056e8 <HAL_GPIO_Init+0x30c>)
 800545a:	4013      	ands	r3, r2
 800545c:	2b00      	cmp	r3, #0
 800545e:	f040 8163 	bne.w	8005728 <HAL_GPIO_Init+0x34c>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005462:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8005466:	4ba1      	ldr	r3, [pc, #644]	; (80056ec <HAL_GPIO_Init+0x310>)
 8005468:	4ca1      	ldr	r4, [pc, #644]	; (80056f0 <HAL_GPIO_Init+0x314>)
 800546a:	f1a2 0011 	sub.w	r0, r2, #17
 800546e:	429a      	cmp	r2, r3
 8005470:	bf18      	it	ne
 8005472:	2a03      	cmpne	r2, #3
 8005474:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 8005478:	bf8c      	ite	hi
 800547a:	2301      	movhi	r3, #1
 800547c:	2300      	movls	r3, #0
 800547e:	42a2      	cmp	r2, r4
 8005480:	bf0c      	ite	eq
 8005482:	2300      	moveq	r3, #0
 8005484:	f003 0301 	andne.w	r3, r3, #1
 8005488:	4a9a      	ldr	r2, [pc, #616]	; (80056f4 <HAL_GPIO_Init+0x318>)
 800548a:	2801      	cmp	r0, #1
 800548c:	bf94      	ite	ls
 800548e:	2300      	movls	r3, #0
 8005490:	f003 0301 	andhi.w	r3, r3, #1
 8005494:	4291      	cmp	r1, r2
 8005496:	bf0c      	ite	eq
 8005498:	2300      	moveq	r3, #0
 800549a:	f003 0301 	andne.w	r3, r3, #1
 800549e:	b11b      	cbz	r3, 80054a8 <HAL_GPIO_Init+0xcc>
 80054a0:	4b95      	ldr	r3, [pc, #596]	; (80056f8 <HAL_GPIO_Init+0x31c>)
 80054a2:	4299      	cmp	r1, r3
 80054a4:	f040 8193 	bne.w	80057ce <HAL_GPIO_Init+0x3f2>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80054a8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	f200 8170 	bhi.w	8005792 <HAL_GPIO_Init+0x3b6>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054b2:	f8d9 1000 	ldr.w	r1, [r9]
 80054b6:	2900      	cmp	r1, #0
 80054b8:	f000 810d 	beq.w	80056d6 <HAL_GPIO_Init+0x2fa>

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80054bc:	4b8f      	ldr	r3, [pc, #572]	; (80056fc <HAL_GPIO_Init+0x320>)
 80054be:	f04f 0800 	mov.w	r8, #0
 80054c2:	4a8f      	ldr	r2, [pc, #572]	; (8005700 <HAL_GPIO_Init+0x324>)
 80054c4:	488f      	ldr	r0, [pc, #572]	; (8005704 <HAL_GPIO_Init+0x328>)
 80054c6:	429f      	cmp	r7, r3
 80054c8:	bf18      	it	ne
 80054ca:	4297      	cmpne	r7, r2
 80054cc:	4d8e      	ldr	r5, [pc, #568]	; (8005708 <HAL_GPIO_Init+0x32c>)
 80054ce:	f5a2 52c0 	sub.w	r2, r2, #6144	; 0x1800
 80054d2:	4c8e      	ldr	r4, [pc, #568]	; (800570c <HAL_GPIO_Init+0x330>)
 80054d4:	bf14      	ite	ne
 80054d6:	2301      	movne	r3, #1
 80054d8:	2300      	moveq	r3, #0
 80054da:	42af      	cmp	r7, r5
 80054dc:	bf0c      	ite	eq
 80054de:	2300      	moveq	r3, #0
 80054e0:	f003 0301 	andne.w	r3, r3, #1
 80054e4:	4287      	cmp	r7, r0
 80054e6:	bf18      	it	ne
 80054e8:	4297      	cmpne	r7, r2
 80054ea:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80054ee:	bf14      	ite	ne
 80054f0:	2201      	movne	r2, #1
 80054f2:	2200      	moveq	r2, #0
 80054f4:	9305      	str	r3, [sp, #20]
 80054f6:	4b86      	ldr	r3, [pc, #536]	; (8005710 <HAL_GPIO_Init+0x334>)
 80054f8:	9200      	str	r2, [sp, #0]
 80054fa:	42a7      	cmp	r7, r4
 80054fc:	bf18      	it	ne
 80054fe:	429f      	cmpne	r7, r3
 8005500:	4a84      	ldr	r2, [pc, #528]	; (8005714 <HAL_GPIO_Init+0x338>)
 8005502:	bf14      	ite	ne
 8005504:	2301      	movne	r3, #1
 8005506:	2300      	moveq	r3, #0
 8005508:	4287      	cmp	r7, r0
 800550a:	bf18      	it	ne
 800550c:	4297      	cmpne	r7, r2
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	bf14      	ite	ne
 8005512:	2201      	movne	r2, #1
 8005514:	2200      	moveq	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005516:	4b80      	ldr	r3, [pc, #512]	; (8005718 <HAL_GPIO_Init+0x33c>)
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8005518:	9204      	str	r2, [sp, #16]
 800551a:	4a80      	ldr	r2, [pc, #512]	; (800571c <HAL_GPIO_Init+0x340>)
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800551c:	2401      	movs	r4, #1
 800551e:	fa04 f408 	lsl.w	r4, r4, r8
    if (iocurrent != 0x00U)
 8005522:	ea14 0a01 	ands.w	sl, r4, r1
 8005526:	f000 80d0 	beq.w	80056ca <HAL_GPIO_Init+0x2ee>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800552a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800552e:	ea4f 0648 	mov.w	r6, r8, lsl #1
 8005532:	2503      	movs	r5, #3
 8005534:	f021 0110 	bic.w	r1, r1, #16
 8005538:	40b5      	lsls	r5, r6
 800553a:	3901      	subs	r1, #1
 800553c:	43ed      	mvns	r5, r5
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800553e:	2901      	cmp	r1, #1
 8005540:	d814      	bhi.n	800556c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005542:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8005546:	2903      	cmp	r1, #3
 8005548:	f200 80f3 	bhi.w	8005732 <HAL_GPIO_Init+0x356>
        temp = GPIOx->OSPEEDR;
 800554c:	68b8      	ldr	r0, [r7, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800554e:	40b1      	lsls	r1, r6
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005550:	4028      	ands	r0, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005552:	4301      	orrs	r1, r0
        GPIOx->OSPEEDR = temp;
 8005554:	60b9      	str	r1, [r7, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005556:	f8d9 1004 	ldr.w	r1, [r9, #4]
        temp = GPIOx->OTYPER;
 800555a:	6878      	ldr	r0, [r7, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800555c:	f3c1 1100 	ubfx	r1, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005560:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005564:	fa01 f408 	lsl.w	r4, r1, r8
 8005568:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 800556a:	607c      	str	r4, [r7, #4]
      temp = GPIOx->PUPDR;
 800556c:	68f8      	ldr	r0, [r7, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800556e:	f8d9 1008 	ldr.w	r1, [r9, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005572:	4028      	ands	r0, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005574:	40b1      	lsls	r1, r6
 8005576:	4301      	orrs	r1, r0
      GPIOx->PUPDR = temp;
 8005578:	60f9      	str	r1, [r7, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800557a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800557e:	f021 0010 	bic.w	r0, r1, #16
 8005582:	2802      	cmp	r0, #2
 8005584:	d120      	bne.n	80055c8 <HAL_GPIO_Init+0x1ec>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8005586:	f1bb 0f00 	cmp.w	fp, #0
 800558a:	d003      	beq.n	8005594 <HAL_GPIO_Init+0x1b8>
 800558c:	9900      	ldr	r1, [sp, #0]
 800558e:	2900      	cmp	r1, #0
 8005590:	f040 80da 	bne.w	8005748 <HAL_GPIO_Init+0x36c>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005594:	f8d9 e010 	ldr.w	lr, [r9, #16]
 8005598:	f1be 0f0f 	cmp.w	lr, #15
 800559c:	f200 80ee 	bhi.w	800577c <HAL_GPIO_Init+0x3a0>
        temp = GPIOx->AFR[position >> 3U];
 80055a0:	ea4f 00d8 	mov.w	r0, r8, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055a4:	f008 0107 	and.w	r1, r8, #7
 80055a8:	f04f 0c0f 	mov.w	ip, #15
 80055ac:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80055b0:	0089      	lsls	r1, r1, #2
        temp = GPIOx->AFR[position >> 3U];
 80055b2:	6a04      	ldr	r4, [r0, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055b4:	fa0c fc01 	lsl.w	ip, ip, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055b8:	fa0e f101 	lsl.w	r1, lr, r1
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055bc:	ea24 040c 	bic.w	r4, r4, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055c0:	4321      	orrs	r1, r4
        GPIOx->AFR[position >> 3U] = temp;
 80055c2:	6201      	str	r1, [r0, #32]
 80055c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055c8:	f001 0103 	and.w	r1, r1, #3
      temp = GPIOx->MODER;
 80055cc:	6838      	ldr	r0, [r7, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055ce:	fa01 f606 	lsl.w	r6, r1, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055d2:	4005      	ands	r5, r0
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055d4:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 80055d6:	603d      	str	r5, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80055dc:	00cc      	lsls	r4, r1, #3
 80055de:	d572      	bpl.n	80056c6 <HAL_GPIO_Init+0x2ea>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055e0:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
 80055e4:	f028 0503 	bic.w	r5, r8, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055e8:	f008 0103 	and.w	r1, r8, #3
 80055ec:	200f      	movs	r0, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ee:	f044 0402 	orr.w	r4, r4, #2
 80055f2:	4415      	add	r5, r2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055f4:	0089      	lsls	r1, r1, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055f6:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 80055fa:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055fe:	fa00 f601 	lsl.w	r6, r0, r1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005602:	f004 0402 	and.w	r4, r4, #2
 8005606:	9407      	str	r4, [sp, #28]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005608:	4c34      	ldr	r4, [pc, #208]	; (80056dc <HAL_GPIO_Init+0x300>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800560a:	9807      	ldr	r0, [sp, #28]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800560c:	42a7      	cmp	r7, r4
        temp = SYSCFG->EXTICR[position >> 2U];
 800560e:	68a8      	ldr	r0, [r5, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005610:	ea20 0006 	bic.w	r0, r0, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005614:	d027      	beq.n	8005666 <HAL_GPIO_Init+0x28a>
 8005616:	f1bb 0f00 	cmp.w	fp, #0
 800561a:	f000 80bf 	beq.w	800579c <HAL_GPIO_Init+0x3c0>
 800561e:	4c39      	ldr	r4, [pc, #228]	; (8005704 <HAL_GPIO_Init+0x328>)
 8005620:	42a7      	cmp	r7, r4
 8005622:	f000 80a6 	beq.w	8005772 <HAL_GPIO_Init+0x396>
 8005626:	9c00      	ldr	r4, [sp, #0]
 8005628:	2c00      	cmp	r4, #0
 800562a:	f000 80c1 	beq.w	80057b0 <HAL_GPIO_Init+0x3d4>
 800562e:	4c37      	ldr	r4, [pc, #220]	; (800570c <HAL_GPIO_Init+0x330>)
 8005630:	42a7      	cmp	r7, r4
 8005632:	f000 80c2 	beq.w	80057ba <HAL_GPIO_Init+0x3de>
 8005636:	9c01      	ldr	r4, [sp, #4]
 8005638:	2c00      	cmp	r4, #0
 800563a:	f000 80b4 	beq.w	80057a6 <HAL_GPIO_Init+0x3ca>
 800563e:	4c38      	ldr	r4, [pc, #224]	; (8005720 <HAL_GPIO_Init+0x344>)
 8005640:	42a7      	cmp	r7, r4
 8005642:	f000 80bf 	beq.w	80057c4 <HAL_GPIO_Init+0x3e8>
 8005646:	9c04      	ldr	r4, [sp, #16]
 8005648:	2c00      	cmp	r4, #0
 800564a:	f000 80c5 	beq.w	80057d8 <HAL_GPIO_Init+0x3fc>
 800564e:	4c2b      	ldr	r4, [pc, #172]	; (80056fc <HAL_GPIO_Init+0x320>)
 8005650:	42a7      	cmp	r7, r4
 8005652:	f000 80c6 	beq.w	80057e2 <HAL_GPIO_Init+0x406>
 8005656:	4c2a      	ldr	r4, [pc, #168]	; (8005700 <HAL_GPIO_Init+0x324>)
 8005658:	42a7      	cmp	r7, r4
 800565a:	bf0c      	ite	eq
 800565c:	2409      	moveq	r4, #9
 800565e:	240a      	movne	r4, #10
 8005660:	fa04 f101 	lsl.w	r1, r4, r1
 8005664:	4308      	orrs	r0, r1
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005666:	60a8      	str	r0, [r5, #8]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
 8005668:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800566c:	f8d9 0004 	ldr.w	r0, [r9, #4]
        temp = EXTI_CurrentCPU->IMR1;
 8005670:	492c      	ldr	r1, [pc, #176]	; (8005724 <HAL_GPIO_Init+0x348>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005672:	03c0      	lsls	r0, r0, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005674:	4c2b      	ldr	r4, [pc, #172]	; (8005724 <HAL_GPIO_Init+0x348>)
        temp = EXTI_CurrentCPU->IMR1;
 8005676:	6809      	ldr	r1, [r1, #0]
        temp &= ~(iocurrent);
 8005678:	bf54      	ite	pl
 800567a:	4029      	andpl	r1, r5
          temp |= iocurrent;
 800567c:	ea4a 0101 	orrmi.w	r1, sl, r1
        EXTI_CurrentCPU->IMR1 = temp;
 8005680:	6021      	str	r1, [r4, #0]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005682:	f8d9 0004 	ldr.w	r0, [r9, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8005686:	6861      	ldr	r1, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005688:	0386      	lsls	r6, r0, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800568a:	4c26      	ldr	r4, [pc, #152]	; (8005724 <HAL_GPIO_Init+0x348>)

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800568c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8005690:	bf54      	ite	pl
 8005692:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8005694:	ea4a 0101 	orrmi.w	r1, sl, r1
        EXTI_CurrentCPU->EMR1 = temp;
 8005698:	6061      	str	r1, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800569a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800569e:	f8d9 4004 	ldr.w	r4, [r9, #4]
        temp = EXTI->RTSR1;
 80056a2:	6800      	ldr	r0, [r0, #0]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056a4:	02e4      	lsls	r4, r4, #11
        temp &= ~(iocurrent);
 80056a6:	bf54      	ite	pl
 80056a8:	4028      	andpl	r0, r5
          temp |= iocurrent;
 80056aa:	ea4a 0000 	orrmi.w	r0, sl, r0
        EXTI->RTSR1 = temp;
 80056ae:	6008      	str	r0, [r1, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056b0:	f8d9 0004 	ldr.w	r0, [r9, #4]
        temp = EXTI->FTSR1;
 80056b4:	6849      	ldr	r1, [r1, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056b6:	0280      	lsls	r0, r0, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80056b8:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80056bc:	bf54      	ite	pl
 80056be:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80056c0:	ea4a 0101 	orrmi.w	r1, sl, r1
        EXTI->FTSR1 = temp;
 80056c4:	6041      	str	r1, [r0, #4]
 80056c6:	f8d9 1000 	ldr.w	r1, [r9]
      }
    }

    position++;
 80056ca:	f108 0801 	add.w	r8, r8, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056ce:	fa31 f008 	lsrs.w	r0, r1, r8
 80056d2:	f47f af23 	bne.w	800551c <HAL_GPIO_Init+0x140>
  }
}
 80056d6:	b009      	add	sp, #36	; 0x24
 80056d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056dc:	58020000 	.word	0x58020000
 80056e0:	58020400 	.word	0x58020400
 80056e4:	0802a330 	.word	0x0802a330
 80056e8:	ffff0000 	.word	0xffff0000
 80056ec:	11210000 	.word	0x11210000
 80056f0:	11220000 	.word	0x11220000
 80056f4:	11110000 	.word	0x11110000
 80056f8:	11120000 	.word	0x11120000
 80056fc:	58022000 	.word	0x58022000
 8005700:	58022400 	.word	0x58022400
 8005704:	58020800 	.word	0x58020800
 8005708:	58022800 	.word	0x58022800
 800570c:	58021000 	.word	0x58021000
 8005710:	58021400 	.word	0x58021400
 8005714:	58021c00 	.word	0x58021c00
 8005718:	58024400 	.word	0x58024400
 800571c:	58000400 	.word	0x58000400
 8005720:	58021800 	.word	0x58021800
 8005724:	58000080 	.word	0x58000080
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005728:	21bc      	movs	r1, #188	; 0xbc
 800572a:	4830      	ldr	r0, [pc, #192]	; (80057ec <HAL_GPIO_Init+0x410>)
 800572c:	f00e fa86 	bl	8013c3c <assert_failed>
 8005730:	e697      	b.n	8005462 <HAL_GPIO_Init+0x86>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005732:	21ce      	movs	r1, #206	; 0xce
 8005734:	482d      	ldr	r0, [pc, #180]	; (80057ec <HAL_GPIO_Init+0x410>)
 8005736:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800573a:	f00e fa7f 	bl	8013c3c <assert_failed>
 800573e:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8005742:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005746:	e701      	b.n	800554c <HAL_GPIO_Init+0x170>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8005748:	9901      	ldr	r1, [sp, #4]
 800574a:	2900      	cmp	r1, #0
 800574c:	f43f af22 	beq.w	8005594 <HAL_GPIO_Init+0x1b8>
 8005750:	9904      	ldr	r1, [sp, #16]
 8005752:	2900      	cmp	r1, #0
 8005754:	f43f af1e 	beq.w	8005594 <HAL_GPIO_Init+0x1b8>
 8005758:	9905      	ldr	r1, [sp, #20]
 800575a:	2900      	cmp	r1, #0
 800575c:	f43f af1a 	beq.w	8005594 <HAL_GPIO_Init+0x1b8>
 8005760:	21e6      	movs	r1, #230	; 0xe6
 8005762:	4822      	ldr	r0, [pc, #136]	; (80057ec <HAL_GPIO_Init+0x410>)
 8005764:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8005768:	f00e fa68 	bl	8013c3c <assert_failed>
 800576c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005770:	e710      	b.n	8005594 <HAL_GPIO_Init+0x1b8>
 8005772:	2402      	movs	r4, #2
 8005774:	fa04 f101 	lsl.w	r1, r4, r1
 8005778:	4308      	orrs	r0, r1
 800577a:	e774      	b.n	8005666 <HAL_GPIO_Init+0x28a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800577c:	21e7      	movs	r1, #231	; 0xe7
 800577e:	481b      	ldr	r0, [pc, #108]	; (80057ec <HAL_GPIO_Init+0x410>)
 8005780:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8005784:	f00e fa5a 	bl	8013c3c <assert_failed>
 8005788:	f8d9 e010 	ldr.w	lr, [r9, #16]
 800578c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005790:	e706      	b.n	80055a0 <HAL_GPIO_Init+0x1c4>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005792:	21be      	movs	r1, #190	; 0xbe
 8005794:	4815      	ldr	r0, [pc, #84]	; (80057ec <HAL_GPIO_Init+0x410>)
 8005796:	f00e fa51 	bl	8013c3c <assert_failed>
 800579a:	e68a      	b.n	80054b2 <HAL_GPIO_Init+0xd6>
 800579c:	2401      	movs	r4, #1
 800579e:	fa04 f101 	lsl.w	r1, r4, r1
 80057a2:	4308      	orrs	r0, r1
 80057a4:	e75f      	b.n	8005666 <HAL_GPIO_Init+0x28a>
 80057a6:	2405      	movs	r4, #5
 80057a8:	fa04 f101 	lsl.w	r1, r4, r1
 80057ac:	4308      	orrs	r0, r1
 80057ae:	e75a      	b.n	8005666 <HAL_GPIO_Init+0x28a>
 80057b0:	2403      	movs	r4, #3
 80057b2:	fa04 f101 	lsl.w	r1, r4, r1
 80057b6:	4308      	orrs	r0, r1
 80057b8:	e755      	b.n	8005666 <HAL_GPIO_Init+0x28a>
 80057ba:	2404      	movs	r4, #4
 80057bc:	fa04 f101 	lsl.w	r1, r4, r1
 80057c0:	4308      	orrs	r0, r1
 80057c2:	e750      	b.n	8005666 <HAL_GPIO_Init+0x28a>
 80057c4:	2406      	movs	r4, #6
 80057c6:	fa04 f101 	lsl.w	r1, r4, r1
 80057ca:	4308      	orrs	r0, r1
 80057cc:	e74b      	b.n	8005666 <HAL_GPIO_Init+0x28a>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80057ce:	21bd      	movs	r1, #189	; 0xbd
 80057d0:	4806      	ldr	r0, [pc, #24]	; (80057ec <HAL_GPIO_Init+0x410>)
 80057d2:	f00e fa33 	bl	8013c3c <assert_failed>
 80057d6:	e667      	b.n	80054a8 <HAL_GPIO_Init+0xcc>
 80057d8:	2407      	movs	r4, #7
 80057da:	fa04 f101 	lsl.w	r1, r4, r1
 80057de:	4308      	orrs	r0, r1
 80057e0:	e741      	b.n	8005666 <HAL_GPIO_Init+0x28a>
 80057e2:	2408      	movs	r4, #8
 80057e4:	fa04 f101 	lsl.w	r1, r4, r1
 80057e8:	4308      	orrs	r0, r1
 80057ea:	e73c      	b.n	8005666 <HAL_GPIO_Init+0x28a>
 80057ec:	0802a330 	.word	0x0802a330

080057f0 <HAL_GPIO_DeInit>:
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80057f0:	4a80      	ldr	r2, [pc, #512]	; (80059f4 <HAL_GPIO_DeInit+0x204>)
 80057f2:	4b81      	ldr	r3, [pc, #516]	; (80059f8 <HAL_GPIO_DeInit+0x208>)
 80057f4:	4290      	cmp	r0, r2
 80057f6:	bf18      	it	ne
 80057f8:	4298      	cmpne	r0, r3
{
 80057fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fe:	4604      	mov	r4, r0
 8005800:	b083      	sub	sp, #12
 8005802:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005804:	bf14      	ite	ne
 8005806:	f04f 0801 	movne.w	r8, #1
 800580a:	f04f 0800 	moveq.w	r8, #0
 800580e:	d028      	beq.n	8005862 <HAL_GPIO_DeInit+0x72>
 8005810:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005814:	4298      	cmp	r0, r3
 8005816:	d024      	beq.n	8005862 <HAL_GPIO_DeInit+0x72>
 8005818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800581c:	4298      	cmp	r0, r3
 800581e:	d020      	beq.n	8005862 <HAL_GPIO_DeInit+0x72>
 8005820:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005824:	4298      	cmp	r0, r3
 8005826:	d01c      	beq.n	8005862 <HAL_GPIO_DeInit+0x72>
 8005828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800582c:	4298      	cmp	r0, r3
 800582e:	d018      	beq.n	8005862 <HAL_GPIO_DeInit+0x72>
 8005830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005834:	4298      	cmp	r0, r3
 8005836:	d014      	beq.n	8005862 <HAL_GPIO_DeInit+0x72>
 8005838:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800583c:	4298      	cmp	r0, r3
 800583e:	d010      	beq.n	8005862 <HAL_GPIO_DeInit+0x72>
 8005840:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005848:	4290      	cmp	r0, r2
 800584a:	bf18      	it	ne
 800584c:	4298      	cmpne	r0, r3
 800584e:	d008      	beq.n	8005862 <HAL_GPIO_DeInit+0x72>
 8005850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005854:	4298      	cmp	r0, r3
 8005856:	d004      	beq.n	8005862 <HAL_GPIO_DeInit+0x72>
 8005858:	f240 113f 	movw	r1, #319	; 0x13f
 800585c:	4867      	ldr	r0, [pc, #412]	; (80059fc <HAL_GPIO_DeInit+0x20c>)
 800585e:	f00e f9ed 	bl	8013c3c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005862:	b2ab      	uxth	r3, r5
 8005864:	2b00      	cmp	r3, #0
 8005866:	d046      	beq.n	80058f6 <HAL_GPIO_DeInit+0x106>
 8005868:	4b65      	ldr	r3, [pc, #404]	; (8005a00 <HAL_GPIO_DeInit+0x210>)
 800586a:	402b      	ands	r3, r5
 800586c:	2b00      	cmp	r3, #0
 800586e:	d142      	bne.n	80058f6 <HAL_GPIO_DeInit+0x106>
{
 8005870:	2300      	movs	r3, #0
 8005872:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8005a1c <HAL_GPIO_DeInit+0x22c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005876:	f8df a17c 	ldr.w	sl, [pc, #380]	; 80059f4 <HAL_GPIO_DeInit+0x204>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800587a:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8005a20 <HAL_GPIO_DeInit+0x230>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800587e:	f8cd 8004 	str.w	r8, [sp, #4]
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005882:	f04f 0801 	mov.w	r8, #1
 8005886:	fa08 f003 	lsl.w	r0, r8, r3
    if (iocurrent != 0x00U)
 800588a:	ea10 0105 	ands.w	r1, r0, r5
 800588e:	f000 8081 	beq.w	8005994 <HAL_GPIO_DeInit+0x1a4>
 8005892:	f023 0703 	bic.w	r7, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005896:	f003 0203 	and.w	r2, r3, #3
 800589a:	f04f 0c0f 	mov.w	ip, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800589e:	4554      	cmp	r4, sl
 80058a0:	445f      	add	r7, fp
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80058a2:	ea4f 0282 	mov.w	r2, r2, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 80058a6:	f8d7 e008 	ldr.w	lr, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80058aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80058ae:	ea0c 0e0e 	and.w	lr, ip, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80058b2:	d02a      	beq.n	800590a <HAL_GPIO_DeInit+0x11a>
 80058b4:	9e01      	ldr	r6, [sp, #4]
 80058b6:	b1de      	cbz	r6, 80058f0 <HAL_GPIO_DeInit+0x100>
 80058b8:	4e52      	ldr	r6, [pc, #328]	; (8005a04 <HAL_GPIO_DeInit+0x214>)
 80058ba:	42b4      	cmp	r4, r6
 80058bc:	d077      	beq.n	80059ae <HAL_GPIO_DeInit+0x1be>
 80058be:	4e52      	ldr	r6, [pc, #328]	; (8005a08 <HAL_GPIO_DeInit+0x218>)
 80058c0:	42b4      	cmp	r4, r6
 80058c2:	d079      	beq.n	80059b8 <HAL_GPIO_DeInit+0x1c8>
 80058c4:	4e51      	ldr	r6, [pc, #324]	; (8005a0c <HAL_GPIO_DeInit+0x21c>)
 80058c6:	42b4      	cmp	r4, r6
 80058c8:	d06c      	beq.n	80059a4 <HAL_GPIO_DeInit+0x1b4>
 80058ca:	4e51      	ldr	r6, [pc, #324]	; (8005a10 <HAL_GPIO_DeInit+0x220>)
 80058cc:	42b4      	cmp	r4, r6
 80058ce:	d07d      	beq.n	80059cc <HAL_GPIO_DeInit+0x1dc>
 80058d0:	4e50      	ldr	r6, [pc, #320]	; (8005a14 <HAL_GPIO_DeInit+0x224>)
 80058d2:	42b4      	cmp	r4, r6
 80058d4:	d07f      	beq.n	80059d6 <HAL_GPIO_DeInit+0x1e6>
 80058d6:	4e50      	ldr	r6, [pc, #320]	; (8005a18 <HAL_GPIO_DeInit+0x228>)
 80058d8:	42b4      	cmp	r4, r6
 80058da:	d072      	beq.n	80059c2 <HAL_GPIO_DeInit+0x1d2>
 80058dc:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8005a24 <HAL_GPIO_DeInit+0x234>
 80058e0:	4544      	cmp	r4, r8
 80058e2:	d07d      	beq.n	80059e0 <HAL_GPIO_DeInit+0x1f0>
 80058e4:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8005a28 <HAL_GPIO_DeInit+0x238>
 80058e8:	4544      	cmp	r4, r8
 80058ea:	d07e      	beq.n	80059ea <HAL_GPIO_DeInit+0x1fa>
 80058ec:	f04f 080a 	mov.w	r8, #10
 80058f0:	fa08 f202 	lsl.w	r2, r8, r2
 80058f4:	e00a      	b.n	800590c <HAL_GPIO_DeInit+0x11c>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80058f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80058fa:	4840      	ldr	r0, [pc, #256]	; (80059fc <HAL_GPIO_DeInit+0x20c>)
 80058fc:	f00e f99e 	bl	8013c3c <assert_failed>
  while ((GPIO_Pin >> position) != 0x00U)
 8005900:	2d00      	cmp	r5, #0
 8005902:	d1b5      	bne.n	8005870 <HAL_GPIO_DeInit+0x80>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8005904:	b003      	add	sp, #12
 8005906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590a:	2200      	movs	r2, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800590c:	4596      	cmp	lr, r2
 800590e:	d11d      	bne.n	800594c <HAL_GPIO_DeInit+0x15c>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8005910:	f8d9 e000 	ldr.w	lr, [r9]
 8005914:	43c9      	mvns	r1, r1
        EXTI->RTSR1 &= ~(iocurrent);
 8005916:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800591a:	ea0e 0e01 	and.w	lr, lr, r1
 800591e:	f8c9 e000 	str.w	lr, [r9]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005922:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8005926:	ea01 0e0e 	and.w	lr, r1, lr
 800592a:	f8c9 e004 	str.w	lr, [r9, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800592e:	f8d2 e000 	ldr.w	lr, [r2]
 8005932:	ea01 0e0e 	and.w	lr, r1, lr
 8005936:	f8c2 e000 	str.w	lr, [r2]
        EXTI->FTSR1 &= ~(iocurrent);
 800593a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800593e:	ea01 010e 	and.w	r1, r1, lr
 8005942:	6051      	str	r1, [r2, #4]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	ea22 020c 	bic.w	r2, r2, ip
 800594a:	60ba      	str	r2, [r7, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800594c:	2103      	movs	r1, #3
 800594e:	005a      	lsls	r2, r3, #1
 8005950:	f8d4 e000 	ldr.w	lr, [r4]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005954:	f04f 0c0f 	mov.w	ip, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005958:	fa01 f202 	lsl.w	r2, r1, r2
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800595c:	fa23 f701 	lsr.w	r7, r3, r1
 8005960:	f003 0107 	and.w	r1, r3, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005964:	ea4e 0e02 	orr.w	lr, lr, r2
 8005968:	eb04 0787 	add.w	r7, r4, r7, lsl #2
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800596c:	0089      	lsls	r1, r1, #2
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800596e:	43d2      	mvns	r2, r2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005970:	f8c4 e000 	str.w	lr, [r4]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005974:	fa0c fc01 	lsl.w	ip, ip, r1
 8005978:	6a39      	ldr	r1, [r7, #32]
 800597a:	ea21 010c 	bic.w	r1, r1, ip
 800597e:	6239      	str	r1, [r7, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005980:	68e1      	ldr	r1, [r4, #12]
 8005982:	4011      	ands	r1, r2
 8005984:	60e1      	str	r1, [r4, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005986:	6861      	ldr	r1, [r4, #4]
 8005988:	ea21 0000 	bic.w	r0, r1, r0
 800598c:	6060      	str	r0, [r4, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800598e:	68a1      	ldr	r1, [r4, #8]
 8005990:	400a      	ands	r2, r1
 8005992:	60a2      	str	r2, [r4, #8]
    position++;
 8005994:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 8005996:	fa35 f203 	lsrs.w	r2, r5, r3
 800599a:	f47f af72 	bne.w	8005882 <HAL_GPIO_DeInit+0x92>
}
 800599e:	b003      	add	sp, #12
 80059a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a4:	f04f 0804 	mov.w	r8, #4
 80059a8:	fa08 f202 	lsl.w	r2, r8, r2
 80059ac:	e7ae      	b.n	800590c <HAL_GPIO_DeInit+0x11c>
 80059ae:	f04f 0802 	mov.w	r8, #2
 80059b2:	fa08 f202 	lsl.w	r2, r8, r2
 80059b6:	e7a9      	b.n	800590c <HAL_GPIO_DeInit+0x11c>
 80059b8:	f04f 0803 	mov.w	r8, #3
 80059bc:	fa08 f202 	lsl.w	r2, r8, r2
 80059c0:	e7a4      	b.n	800590c <HAL_GPIO_DeInit+0x11c>
 80059c2:	f04f 0807 	mov.w	r8, #7
 80059c6:	fa08 f202 	lsl.w	r2, r8, r2
 80059ca:	e79f      	b.n	800590c <HAL_GPIO_DeInit+0x11c>
 80059cc:	f04f 0805 	mov.w	r8, #5
 80059d0:	fa08 f202 	lsl.w	r2, r8, r2
 80059d4:	e79a      	b.n	800590c <HAL_GPIO_DeInit+0x11c>
 80059d6:	f04f 0806 	mov.w	r8, #6
 80059da:	fa08 f202 	lsl.w	r2, r8, r2
 80059de:	e795      	b.n	800590c <HAL_GPIO_DeInit+0x11c>
 80059e0:	f04f 0808 	mov.w	r8, #8
 80059e4:	fa08 f202 	lsl.w	r2, r8, r2
 80059e8:	e790      	b.n	800590c <HAL_GPIO_DeInit+0x11c>
 80059ea:	f04f 0809 	mov.w	r8, #9
 80059ee:	fa08 f202 	lsl.w	r2, r8, r2
 80059f2:	e78b      	b.n	800590c <HAL_GPIO_DeInit+0x11c>
 80059f4:	58020000 	.word	0x58020000
 80059f8:	58020400 	.word	0x58020400
 80059fc:	0802a330 	.word	0x0802a330
 8005a00:	ffff0000 	.word	0xffff0000
 8005a04:	58020800 	.word	0x58020800
 8005a08:	58020c00 	.word	0x58020c00
 8005a0c:	58021000 	.word	0x58021000
 8005a10:	58021400 	.word	0x58021400
 8005a14:	58021800 	.word	0x58021800
 8005a18:	58021c00 	.word	0x58021c00
 8005a1c:	58000400 	.word	0x58000400
 8005a20:	58000080 	.word	0x58000080
 8005a24:	58022000 	.word	0x58022000
 8005a28:	58022400 	.word	0x58022400

08005a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005a30:	460c      	mov	r4, r1
 8005a32:	b129      	cbz	r1, 8005a40 <HAL_GPIO_ReadPin+0x14>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005a34:	692b      	ldr	r3, [r5, #16]
 8005a36:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005a38:	bf14      	ite	ne
 8005a3a:	2001      	movne	r0, #1
 8005a3c:	2000      	moveq	r0, #0
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005a40:	f240 118d 	movw	r1, #397	; 0x18d
 8005a44:	4801      	ldr	r0, [pc, #4]	; (8005a4c <HAL_GPIO_ReadPin+0x20>)
 8005a46:	f00e f8f9 	bl	8013c3c <assert_failed>
 8005a4a:	e7f3      	b.n	8005a34 <HAL_GPIO_ReadPin+0x8>
 8005a4c:	0802a330 	.word	0x0802a330

08005a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	4606      	mov	r6, r0
 8005a54:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005a56:	460c      	mov	r4, r1
 8005a58:	b161      	cbz	r1, 8005a74 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005a5a:	2d01      	cmp	r5, #1
 8005a5c:	d803      	bhi.n	8005a66 <HAL_GPIO_WritePin+0x16>

  if (PinState != GPIO_PIN_RESET)
 8005a5e:	b905      	cbnz	r5, 8005a62 <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a60:	0424      	lsls	r4, r4, #16
 8005a62:	61b4      	str	r4, [r6, #24]
  }
}
 8005a64:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005a66:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a6a:	4805      	ldr	r0, [pc, #20]	; (8005a80 <HAL_GPIO_WritePin+0x30>)
 8005a6c:	f00e f8e6 	bl	8013c3c <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a70:	61b4      	str	r4, [r6, #24]
}
 8005a72:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005a74:	f240 11ad 	movw	r1, #429	; 0x1ad
 8005a78:	4801      	ldr	r0, [pc, #4]	; (8005a80 <HAL_GPIO_WritePin+0x30>)
 8005a7a:	f00e f8df 	bl	8013c3c <assert_failed>
 8005a7e:	e7ec      	b.n	8005a5a <HAL_GPIO_WritePin+0xa>
 8005a80:	0802a330 	.word	0x0802a330

08005a84 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005a88:	f890 42b8 	ldrb.w	r4, [r0, #696]	; 0x2b8
{
 8005a8c:	b085      	sub	sp, #20
  __HAL_LOCK(hhcd);
 8005a8e:	2c01      	cmp	r4, #1
{
 8005a90:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8005a94:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
 8005a98:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
  __HAL_LOCK(hhcd);
 8005a9c:	d029      	beq.n	8005af2 <HAL_HCD_HC_Init+0x6e>
 8005a9e:	4605      	mov	r5, r0
  hhcd->hc[ch_num].do_ping = 0U;
 8005aa0:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  __HAL_LOCK(hhcd);
 8005aa4:	f04f 0801 	mov.w	r8, #1
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
 8005aa8:	09d0      	lsrs	r0, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
 8005aaa:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005aae:	f002 0a7f 	and.w	sl, r2, #127	; 0x7f
  __HAL_LOCK(hhcd);
 8005ab2:	f885 82b8 	strb.w	r8, [r5, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8005ab6:	f04f 0800 	mov.w	r8, #0
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005aba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8005abe:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8005ac2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8005ac6:	f884 e03f 	strb.w	lr, [r4, #63]	; 0x3f
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8005aca:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005ace:	f884 a03a 	strb.w	sl, [r4, #58]	; 0x3a
 8005ad2:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].do_ping = 0U;
 8005ad6:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d

  status =  USB_HC_Init(hhcd->Instance,
 8005ada:	6828      	ldr	r0, [r5, #0]
 8005adc:	f8cd c000 	str.w	ip, [sp]
 8005ae0:	e9cd e901 	strd	lr, r9, [sp, #4]
 8005ae4:	f009 f9b8 	bl	800ee58 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005ae8:	f885 82b8 	strb.w	r8, [r5, #696]	; 0x2b8

  return status;
}
 8005aec:	b005      	add	sp, #20
 8005aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hhcd);
 8005af2:	2002      	movs	r0, #2
}
 8005af4:	b005      	add	sp, #20
 8005af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afa:	bf00      	nop

08005afc <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8005afc:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d00b      	beq.n	8005b1c <HAL_HCD_HC_Halt+0x20>
 8005b04:	2301      	movs	r3, #1
{
 8005b06:	b510      	push	{r4, lr}
 8005b08:	4604      	mov	r4, r0
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b0a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hhcd);
 8005b0c:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b10:	f009 fafe 	bl	800f110 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005b14:	2000      	movs	r0, #0
 8005b16:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
 8005b1a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8005b1c:	2002      	movs	r0, #2
}
 8005b1e:	4770      	bx	lr

08005b20 <HAL_HCD_Init>:
  if (hhcd == NULL)
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d057      	beq.n	8005bd4 <HAL_HCD_Init+0xb4>
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8005b24:	4b2c      	ldr	r3, [pc, #176]	; (8005bd8 <HAL_HCD_Init+0xb8>)
{
 8005b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8005b2a:	6804      	ldr	r4, [r0, #0]
{
 8005b2c:	b08a      	sub	sp, #40	; 0x28
 8005b2e:	4607      	mov	r7, r0
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8005b30:	429c      	cmp	r4, r3
 8005b32:	d008      	beq.n	8005b46 <HAL_HCD_Init+0x26>
 8005b34:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8005b38:	429c      	cmp	r4, r3
 8005b3a:	d004      	beq.n	8005b46 <HAL_HCD_Init+0x26>
 8005b3c:	217a      	movs	r1, #122	; 0x7a
 8005b3e:	4827      	ldr	r0, [pc, #156]	; (8005bdc <HAL_HCD_Init+0xbc>)
 8005b40:	f00e f87c 	bl	8013c3c <assert_failed>
 8005b44:	683c      	ldr	r4, [r7, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005b46:	f897 32b9 	ldrb.w	r3, [r7, #697]	; 0x2b9
 8005b4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d039      	beq.n	8005bc6 <HAL_HCD_Init+0xa6>
 8005b52:	4620      	mov	r0, r4
  hhcd->State = HAL_HCD_STATE_BUSY;
 8005b54:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005b56:	466d      	mov	r5, sp
 8005b58:	f107 0804 	add.w	r8, r7, #4
  hhcd->State = HAL_HCD_STATE_BUSY;
 8005b5c:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005b62:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b64:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hhcd->Init.dma_enable = 0U;
 8005b68:	bf08      	it	eq
 8005b6a:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8005b6c:	f009 f82a 	bl	800ebc4 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005b70:	f854 6b10 	ldr.w	r6, [r4], #16
 8005b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b80:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b84:	4630      	mov	r0, r6
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005b86:	463e      	mov	r6, r7
 8005b88:	466d      	mov	r5, sp
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005b8a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8005b8e:	f008 ffa7 	bl	800eae0 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005b92:	2101      	movs	r1, #1
 8005b94:	6838      	ldr	r0, [r7, #0]
 8005b96:	f009 f81d 	bl	800ebd4 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005b9a:	f856 cb10 	ldr.w	ip, [r6], #16
 8005b9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ba2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ba6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005baa:	e885 0003 	stmia.w	r5, {r0, r1}
 8005bae:	4660      	mov	r0, ip
 8005bb0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8005bb4:	f009 f842 	bl	800ec3c <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8005bb8:	2301      	movs	r3, #1
  return HAL_OK;
 8005bba:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8005bbc:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 8005bc0:	b00a      	add	sp, #40	; 0x28
 8005bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_HCD_MspInit(hhcd);
 8005bc6:	4638      	mov	r0, r7
    hhcd->Lock = HAL_UNLOCKED;
 8005bc8:	f887 22b8 	strb.w	r2, [r7, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8005bcc:	f018 fcb2 	bl	801e534 <HAL_HCD_MspInit>
 8005bd0:	6838      	ldr	r0, [r7, #0]
 8005bd2:	e7bf      	b.n	8005b54 <HAL_HCD_Init+0x34>
    return HAL_ERROR;
 8005bd4:	2001      	movs	r0, #1
}
 8005bd6:	4770      	bx	lr
 8005bd8:	40080000 	.word	0x40080000
 8005bdc:	0802a36c 	.word	0x0802a36c

08005be0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be2:	460c      	mov	r4, r1
  hhcd->hc[ch_num].ep_is_in = direction;
 8005be4:	0089      	lsls	r1, r1, #2
{
 8005be6:	f89d c014 	ldrb.w	ip, [sp, #20]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005bea:	190d      	adds	r5, r1, r4
{
 8005bec:	9f06      	ldr	r7, [sp, #24]
 8005bee:	f8bd 601c 	ldrh.w	r6, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005bf2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
{
 8005bf6:	f89d e020 	ldrb.w	lr, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005bfa:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005bfe:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f

  if (token == 0U)
 8005c02:	f1bc 0f00 	cmp.w	ip, #0
 8005c06:	d137      	bne.n	8005c78 <HAL_HCD_HC_SubmitRequest+0x98>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
    hhcd->hc[ch_num].do_ping = do_ping;
 8005c08:	f885 e03d 	strb.w	lr, [r5, #61]	; 0x3d
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005c0c:	f04f 0e03 	mov.w	lr, #3
 8005c10:	190d      	adds	r5, r1, r4
 8005c12:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8005c16:	f885 e042 	strb.w	lr, [r5, #66]	; 0x42
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d815      	bhi.n	8005c4a <HAL_HCD_HC_SubmitRequest+0x6a>
 8005c1e:	e8df f003 	tbb	[pc, r3]
 8005c22:	3902      	.short	0x3902
 8005c24:	2e2e      	.short	0x2e2e
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005c26:	f1bc 0f01 	cmp.w	ip, #1
 8005c2a:	d10e      	bne.n	8005c4a <HAL_HCD_HC_SubmitRequest+0x6a>
 8005c2c:	b96a      	cbnz	r2, 8005c4a <HAL_HCD_HC_SubmitRequest+0x6a>
      {
        if (length == 0U)
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005c2e:	190b      	adds	r3, r1, r4
        if (length == 0U)
 8005c30:	2e00      	cmp	r6, #0
 8005c32:	d13e      	bne.n	8005cb2 <HAL_HCD_HC_SubmitRequest+0xd2>
          hhcd->hc[ch_num].toggle_out = 1U;
 8005c34:	2201      	movs	r2, #1
 8005c36:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
        }
        else
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c3e:	190b      	adds	r3, r1, r4
 8005c40:	2202      	movs	r2, #2
 8005c42:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005c4a:	190b      	adds	r3, r1, r4
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005c4c:	2128      	movs	r1, #40	; 0x28
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005c4e:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005c50:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005c54:	fb01 0104 	mla	r1, r1, r4, r0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005c58:	645f      	str	r7, [r3, #68]	; 0x44
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005c5a:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].xfer_len  = length;
 8005c5c:	649e      	str	r6, [r3, #72]	; 0x48
  hhcd->hc[ch_num].ch_num = ch_num;
 8005c5e:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005c62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8005c66:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8005c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005c6c:	7c02      	ldrb	r2, [r0, #16]
 8005c6e:	6800      	ldr	r0, [r0, #0]
}
 8005c70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005c74:	f009 b98c 	b.w	800ef90 <USB_HC_StartXfer>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c78:	f04f 0e02 	mov.w	lr, #2
 8005c7c:	e7c8      	b.n	8005c10 <HAL_HCD_HC_SubmitRequest+0x30>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005c7e:	190b      	adds	r3, r1, r4
 8005c80:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
      if (direction == 0U)
 8005c84:	b96a      	cbnz	r2, 8005ca2 <HAL_HCD_HC_SubmitRequest+0xc2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005c86:	f893 5051 	ldrb.w	r5, [r3, #81]	; 0x51
 8005c8a:	b13d      	cbz	r5, 8005c9c <HAL_HCD_HC_SubmitRequest+0xbc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c92:	e7da      	b.n	8005c4a <HAL_HCD_HC_SubmitRequest+0x6a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c94:	190b      	adds	r3, r1, r4
 8005c96:	2200      	movs	r2, #0
 8005c98:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 8005ca0:	e7d3      	b.n	8005c4a <HAL_HCD_HC_SubmitRequest+0x6a>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005ca2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8005ca6:	2a00      	cmp	r2, #0
 8005ca8:	d0f8      	beq.n	8005c9c <HAL_HCD_HC_SubmitRequest+0xbc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cb0:	e7cb      	b.n	8005c4a <HAL_HCD_HC_SubmitRequest+0x6a>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005cb2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005cb6:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8005cba:	2a00      	cmp	r2, #0
 8005cbc:	d0ee      	beq.n	8005c9c <HAL_HCD_HC_SubmitRequest+0xbc>
 8005cbe:	e7be      	b.n	8005c3e <HAL_HCD_HC_SubmitRequest+0x5e>

08005cc0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005cc4:	6805      	ldr	r5, [r0, #0]
{
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f008 ffb2 	bl	800ec34 <USB_GetMode>
 8005cd0:	2801      	cmp	r0, #1
 8005cd2:	d002      	beq.n	8005cda <HAL_HCD_IRQHandler+0x1a>
      HCD_RXQLVL_IRQHandler(hhcd);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
    }
  }
}
 8005cd4:	b005      	add	sp, #20
 8005cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005cda:	6820      	ldr	r0, [r4, #0]
 8005cdc:	f008 ffa6 	bl	800ec2c <USB_ReadInterrupts>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d0f7      	beq.n	8005cd4 <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	f008 ffa1 	bl	800ec2c <USB_ReadInterrupts>
 8005cea:	0286      	lsls	r6, r0, #10
 8005cec:	d503      	bpl.n	8005cf6 <HAL_HCD_IRQHandler+0x36>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005cf4:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005cf6:	6820      	ldr	r0, [r4, #0]
 8005cf8:	f008 ff98 	bl	800ec2c <USB_ReadInterrupts>
 8005cfc:	02c0      	lsls	r0, r0, #11
 8005cfe:	d503      	bpl.n	8005d08 <HAL_HCD_IRQHandler+0x48>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d06:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005d08:	6820      	ldr	r0, [r4, #0]
 8005d0a:	f008 ff8f 	bl	800ec2c <USB_ReadInterrupts>
 8005d0e:	0141      	lsls	r1, r0, #5
 8005d10:	d503      	bpl.n	8005d1a <HAL_HCD_IRQHandler+0x5a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005d18:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005d1a:	6820      	ldr	r0, [r4, #0]
 8005d1c:	f008 ff86 	bl	800ec2c <USB_ReadInterrupts>
 8005d20:	0782      	lsls	r2, r0, #30
 8005d22:	d502      	bpl.n	8005d2a <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	2202      	movs	r2, #2
 8005d28:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005d2a:	6820      	ldr	r0, [r4, #0]
 8005d2c:	f008 ff7e 	bl	800ec2c <USB_ReadInterrupts>
 8005d30:	0083      	lsls	r3, r0, #2
 8005d32:	d452      	bmi.n	8005dda <HAL_HCD_IRQHandler+0x11a>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005d34:	6820      	ldr	r0, [r4, #0]
 8005d36:	f008 ff79 	bl	800ec2c <USB_ReadInterrupts>
 8005d3a:	01c6      	lsls	r6, r0, #7
 8005d3c:	f100 80d9 	bmi.w	8005ef2 <HAL_HCD_IRQHandler+0x232>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005d40:	6820      	ldr	r0, [r4, #0]
 8005d42:	f008 ff73 	bl	800ec2c <USB_ReadInterrupts>
 8005d46:	0700      	lsls	r0, r0, #28
 8005d48:	f100 80cc 	bmi.w	8005ee4 <HAL_HCD_IRQHandler+0x224>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005d4c:	6820      	ldr	r0, [r4, #0]
 8005d4e:	f008 ff6d 	bl	800ec2c <USB_ReadInterrupts>
 8005d52:	0181      	lsls	r1, r0, #6
 8005d54:	d451      	bmi.n	8005dfa <HAL_HCD_IRQHandler+0x13a>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005d56:	6820      	ldr	r0, [r4, #0]
 8005d58:	f008 ff68 	bl	800ec2c <USB_ReadInterrupts>
 8005d5c:	06c3      	lsls	r3, r0, #27
 8005d5e:	d5b9      	bpl.n	8005cd4 <HAL_HCD_IRQHandler+0x14>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d60:	6822      	ldr	r2, [r4, #0]
 8005d62:	6993      	ldr	r3, [r2, #24]
 8005d64:	f023 0310 	bic.w	r3, r3, #16
 8005d68:	6193      	str	r3, [r2, #24]
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d6a:	6825      	ldr	r5, [r4, #0]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005d6c:	6a2e      	ldr	r6, [r5, #32]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005d6e:	f3c6 4243 	ubfx	r2, r6, #17, #4
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;

  switch (pktsts)
 8005d72:	2a02      	cmp	r2, #2
 8005d74:	d12c      	bne.n	8005dd0 <HAL_HCD_IRQHandler+0x110>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d76:	f3c6 180a 	ubfx	r8, r6, #4, #11
  {
    case GRXSTS_PKTSTS_IN:
      /* Read the data into the host buffer. */
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005d7a:	f1b8 0f00 	cmp.w	r8, #0
 8005d7e:	d027      	beq.n	8005dd0 <HAL_HCD_IRQHandler+0x110>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005d80:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005d84:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8005d88:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8005d8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d8e:	b1f9      	cbz	r1, 8005dd0 <HAL_HCD_IRQHandler+0x110>
      {
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005d90:	4642      	mov	r2, r8
 8005d92:	4628      	mov	r0, r5
 8005d94:	f008 ff36 	bl	800ec04 <USB_ReadPacket>

        /*manage multiple Xfer */
        hhcd->hc[ch_num].xfer_buff += pktcnt;
        hhcd->hc[ch_num].xfer_count  += pktcnt;

        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005d98:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005d9e:	0173      	lsls	r3, r6, #5
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005da0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005da2:	eb02 0008 	add.w	r0, r2, r8
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005da6:	18ee      	adds	r6, r5, r3
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005da8:	4441      	add	r1, r8
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005daa:	4ab1      	ldr	r2, [pc, #708]	; (8006070 <HAL_HCD_IRQHandler+0x3b0>)
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005dac:	6478      	str	r0, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005dae:	64f9      	str	r1, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005db0:	6931      	ldr	r1, [r6, #16]
 8005db2:	400a      	ands	r2, r1
 8005db4:	b15a      	cbz	r2, 8005dce <HAL_HCD_IRQHandler+0x10e>
        {
          /* re-activate the channel when more packets are expected */
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005db6:	58ea      	ldr	r2, [r5, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005db8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005dbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005dc0:	50ea      	str	r2, [r5, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005dc2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005dc6:	f083 0301 	eor.w	r3, r3, #1
 8005dca:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8005dce:	6825      	ldr	r5, [r4, #0]
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005dd0:	69ab      	ldr	r3, [r5, #24]
 8005dd2:	f043 0310 	orr.w	r3, r3, #16
 8005dd6:	61ab      	str	r3, [r5, #24]
 8005dd8:	e77c      	b.n	8005cd4 <HAL_HCD_IRQHandler+0x14>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005de0:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005de2:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8005de6:	07df      	lsls	r7, r3, #31
 8005de8:	d4a4      	bmi.n	8005d34 <HAL_HCD_IRQHandler+0x74>
        HAL_HCD_Disconnect_Callback(hhcd);
 8005dea:	4620      	mov	r0, r4
 8005dec:	f018 fbee 	bl	801e5cc <HAL_HCD_Disconnect_Callback>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005df0:	2101      	movs	r1, #1
 8005df2:	6820      	ldr	r0, [r4, #0]
 8005df4:	f008 ffb2 	bl	800ed5c <USB_InitFSLSPClkSel>
 8005df8:	e79c      	b.n	8005d34 <HAL_HCD_IRQHandler+0x74>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005dfa:	6820      	ldr	r0, [r4, #0]
 8005dfc:	f009 f982 	bl	800f104 <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005e00:	68a1      	ldr	r1, [r4, #8]
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005e02:	4681      	mov	r9, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005e04:	2900      	cmp	r1, #0
 8005e06:	f000 80ae 	beq.w	8005f66 <HAL_HCD_IRQHandler+0x2a6>
 8005e0a:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 8005e0e:	6820      	ldr	r0, [r4, #0]
 8005e10:	2600      	movs	r6, #0
 8005e12:	e03d      	b.n	8005e90 <HAL_HCD_IRQHandler+0x1d0>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005e14:	075b      	lsls	r3, r3, #29
 8005e16:	f140 80ab 	bpl.w	8005f70 <HAL_HCD_IRQHandler+0x2b0>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005e1a:	2304      	movs	r3, #4
 8005e1c:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f043 0302 	orr.w	r3, r3, #2
 8005e24:	60fb      	str	r3, [r7, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	059b      	lsls	r3, r3, #22
 8005e2a:	f100 80dd 	bmi.w	8005fe8 <HAL_HCD_IRQHandler+0x328>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	07d8      	lsls	r0, r3, #31
 8005e32:	f140 80ac 	bpl.w	8005f8e <HAL_HCD_IRQHandler+0x2ce>
    if (hhcd->Init.dma_enable != 0U)
 8005e36:	6923      	ldr	r3, [r4, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f040 8137 	bne.w	80060ac <HAL_HCD_IRQHandler+0x3ec>
 8005e3e:	ea4f 0388 	mov.w	r3, r8, lsl #2
    hhcd->hc[ch_num].state = HC_XFRC;
 8005e42:	eb03 0c08 	add.w	ip, r3, r8
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e46:	2200      	movs	r2, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 8005e48:	f04f 0e01 	mov.w	lr, #1
 8005e4c:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e50:	f8cc 2058 	str.w	r2, [ip, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 8005e54:	f88c e05d 	strb.w	lr, [ip, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005e58:	f8c7 e008 	str.w	lr, [r7, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005e5c:	f89c 203f 	ldrb.w	r2, [ip, #63]	; 0x3f
 8005e60:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8005e64:	f000 8158 	beq.w	8006118 <HAL_HCD_IRQHandler+0x458>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005e68:	2a03      	cmp	r2, #3
 8005e6a:	f000 81c7 	beq.w	80061fc <HAL_HCD_IRQHandler+0x53c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005e6e:	2a01      	cmp	r2, #1
 8005e70:	f000 81d4 	beq.w	800621c <HAL_HCD_IRQHandler+0x55c>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005e74:	4443      	add	r3, r8
 8005e76:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005e7a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8005e7e:	f082 0201 	eor.w	r2, r2, #1
 8005e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005e86:	68a1      	ldr	r1, [r4, #8]
 8005e88:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005e8a:	3601      	adds	r6, #1
 8005e8c:	428e      	cmp	r6, r1
 8005e8e:	d26b      	bcs.n	8005f68 <HAL_HCD_IRQHandler+0x2a8>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005e90:	f006 030f 	and.w	r3, r6, #15
 8005e94:	fa29 f303 	lsr.w	r3, r9, r3
 8005e98:	07da      	lsls	r2, r3, #31
 8005e9a:	d5f6      	bpl.n	8005e8a <HAL_HCD_IRQHandler+0x1ca>
 8005e9c:	fa5f f886 	uxtb.w	r8, r6
 8005ea0:	f500 6aa0 	add.w	sl, r0, #1280	; 0x500
 8005ea4:	0173      	lsls	r3, r6, #5
 8005ea6:	ea4f 1b48 	mov.w	fp, r8, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005eaa:	58eb      	ldr	r3, [r5, r3]
 8005eac:	eb0b 070a 	add.w	r7, fp, sl
 8005eb0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005eb6:	d1ad      	bne.n	8005e14 <HAL_HCD_IRQHandler+0x154>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005eb8:	f013 0304 	ands.w	r3, r3, #4
 8005ebc:	d15e      	bne.n	8005f7c <HAL_HCD_IRQHandler+0x2bc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	f012 0220 	ands.w	r2, r2, #32
 8005ec4:	f000 809e 	beq.w	8006004 <HAL_HCD_IRQHandler+0x344>
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005ec8:	eb08 0288 	add.w	r2, r8, r8, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005ecc:	2120      	movs	r1, #32
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005ece:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005ed2:	60b9      	str	r1, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005ed4:	f892 103d 	ldrb.w	r1, [r2, #61]	; 0x3d
 8005ed8:	2901      	cmp	r1, #1
 8005eda:	f000 8167 	beq.w	80061ac <HAL_HCD_IRQHandler+0x4ec>
 8005ede:	68a1      	ldr	r1, [r4, #8]
 8005ee0:	6820      	ldr	r0, [r4, #0]
 8005ee2:	e7d2      	b.n	8005e8a <HAL_HCD_IRQHandler+0x1ca>
      HAL_HCD_SOF_Callback(hhcd);
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f018 fb69 	bl	801e5bc <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	2208      	movs	r2, #8
 8005eee:	615a      	str	r2, [r3, #20]
 8005ef0:	e72c      	b.n	8005d4c <HAL_HCD_IRQHandler+0x8c>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef2:	6826      	ldr	r6, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005ef4:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8005ef8:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 8005efa:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8005efe:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005f00:	9b03      	ldr	r3, [sp, #12]
 8005f02:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f06:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005f08:	9b02      	ldr	r3, [sp, #8]
 8005f0a:	0798      	lsls	r0, r3, #30
 8005f0c:	d507      	bpl.n	8005f1e <HAL_HCD_IRQHandler+0x25e>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005f0e:	9b02      	ldr	r3, [sp, #8]
 8005f10:	07d9      	lsls	r1, r3, #31
 8005f12:	f100 80f9 	bmi.w	8006108 <HAL_HCD_IRQHandler+0x448>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005f16:	9b03      	ldr	r3, [sp, #12]
 8005f18:	f043 0302 	orr.w	r3, r3, #2
 8005f1c:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005f1e:	9b02      	ldr	r3, [sp, #8]
 8005f20:	071a      	lsls	r2, r3, #28
 8005f22:	d515      	bpl.n	8005f50 <HAL_HCD_IRQHandler+0x290>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005f24:	9b03      	ldr	r3, [sp, #12]
 8005f26:	f043 0308 	orr.w	r3, r3, #8
 8005f2a:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005f2c:	9b02      	ldr	r3, [sp, #8]
 8005f2e:	075b      	lsls	r3, r3, #29
 8005f30:	f140 80ee 	bpl.w	8006110 <HAL_HCD_IRQHandler+0x450>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005f34:	69a1      	ldr	r1, [r4, #24]
 8005f36:	2902      	cmp	r1, #2
 8005f38:	f000 80fe 	beq.w	8006138 <HAL_HCD_IRQHandler+0x478>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005f3c:	68e3      	ldr	r3, [r4, #12]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d103      	bne.n	8005f4a <HAL_HCD_IRQHandler+0x28a>
        {
          USBx_HOST->HFIR = 60000U;
 8005f42:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005f46:	f8c6 2404 	str.w	r2, [r6, #1028]	; 0x404
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f018 fb44 	bl	801e5d8 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005f50:	9b02      	ldr	r3, [sp, #8]
 8005f52:	069f      	lsls	r7, r3, #26
 8005f54:	d503      	bpl.n	8005f5e <HAL_HCD_IRQHandler+0x29e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005f56:	9b03      	ldr	r3, [sp, #12]
 8005f58:	f043 0320 	orr.w	r3, r3, #32
 8005f5c:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005f5e:	9b03      	ldr	r3, [sp, #12]
 8005f60:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
 8005f64:	e6ec      	b.n	8005d40 <HAL_HCD_IRQHandler+0x80>
 8005f66:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005f68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f6c:	6143      	str	r3, [r0, #20]
 8005f6e:	e6f2      	b.n	8005d56 <HAL_HCD_IRQHandler+0x96>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	0698      	lsls	r0, r3, #26
 8005f74:	d57e      	bpl.n	8006074 <HAL_HCD_IRQHandler+0x3b4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005f76:	2320      	movs	r3, #32
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	e754      	b.n	8005e26 <HAL_HCD_IRQHandler+0x166>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f043 0302 	orr.w	r3, r3, #2
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	68a1      	ldr	r1, [r4, #8]
 8005f8a:	6820      	ldr	r0, [r4, #0]
 8005f8c:	e77d      	b.n	8005e8a <HAL_HCD_IRQHandler+0x1ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	0799      	lsls	r1, r3, #30
 8005f92:	f140 8098 	bpl.w	80060c6 <HAL_HCD_IRQHandler+0x406>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005f96:	ea4f 0388 	mov.w	r3, r8, lsl #2
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005f9a:	68f9      	ldr	r1, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005f9c:	eb03 0208 	add.w	r2, r3, r8
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005fa0:	f021 0102 	bic.w	r1, r1, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005fa4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005fa8:	60f9      	str	r1, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005faa:	f892 105d 	ldrb.w	r1, [r2, #93]	; 0x5d
 8005fae:	2901      	cmp	r1, #1
 8005fb0:	f000 80bf 	beq.w	8006132 <HAL_HCD_IRQHandler+0x472>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005fb4:	2905      	cmp	r1, #5
 8005fb6:	f000 80bc 	beq.w	8006132 <HAL_HCD_IRQHandler+0x472>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005fba:	2906      	cmp	r1, #6
 8005fbc:	f000 814c 	beq.w	8006258 <HAL_HCD_IRQHandler+0x598>
 8005fc0:	2908      	cmp	r1, #8
 8005fc2:	f000 8149 	beq.w	8006258 <HAL_HCD_IRQHandler+0x598>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005fc6:	2903      	cmp	r1, #3
 8005fc8:	f000 81a9 	beq.w	800631e <HAL_HCD_IRQHandler+0x65e>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005fcc:	4443      	add	r3, r8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005fce:	2202      	movs	r2, #2
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005fd8:	60ba      	str	r2, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005fda:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8005fde:	f018 faf9 	bl	801e5d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005fe2:	68a1      	ldr	r1, [r4, #8]
 8005fe4:	6820      	ldr	r0, [r4, #0]
 8005fe6:	e750      	b.n	8005e8a <HAL_HCD_IRQHandler+0x1ca>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fea:	4641      	mov	r1, r8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fec:	f043 0302 	orr.w	r3, r3, #2
 8005ff0:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ff2:	6820      	ldr	r0, [r4, #0]
 8005ff4:	f009 f88c 	bl	800f110 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ffc:	60bb      	str	r3, [r7, #8]
 8005ffe:	68a1      	ldr	r1, [r4, #8]
 8006000:	6820      	ldr	r0, [r4, #0]
 8006002:	e742      	b.n	8005e8a <HAL_HCD_IRQHandler+0x1ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	065b      	lsls	r3, r3, #25
 8006008:	f100 80b7 	bmi.w	800617a <HAL_HCD_IRQHandler+0x4ba>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 8006012:	d1e9      	bne.n	8005fe8 <HAL_HCD_IRQHandler+0x328>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	07d2      	lsls	r2, r2, #31
 8006018:	f100 8109 	bmi.w	800622e <HAL_HCD_IRQHandler+0x56e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f013 0308 	ands.w	r3, r3, #8
 8006022:	f040 8161 	bne.w	80062e8 <HAL_HCD_IRQHandler+0x628>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	06d2      	lsls	r2, r2, #27
 800602a:	f140 8131 	bpl.w	8006290 <HAL_HCD_IRQHandler+0x5d0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800602e:	eb08 0288 	add.w	r2, r8, r8, lsl #2
    hhcd->hc[ch_num].state = HC_NAK;
 8006032:	2103      	movs	r1, #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006034:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8006038:	6593      	str	r3, [r2, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 800603a:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].state = HC_NAK;
 800603e:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006042:	b943      	cbnz	r3, 8006056 <HAL_HCD_IRQHandler+0x396>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8006044:	2328      	movs	r3, #40	; 0x28
 8006046:	fb03 4308 	mla	r3, r3, r8, r4
 800604a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800604e:	b912      	cbnz	r2, 8006056 <HAL_HCD_IRQHandler+0x396>
        hhcd->hc[ch_num].do_ping = 1U;
 8006050:	2201      	movs	r2, #1
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006056:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006058:	4641      	mov	r1, r8
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800605a:	f043 0302 	orr.w	r3, r3, #2
 800605e:	60fb      	str	r3, [r7, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	f009 f855 	bl	800f110 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006066:	2310      	movs	r3, #16
 8006068:	60bb      	str	r3, [r7, #8]
 800606a:	68a1      	ldr	r1, [r4, #8]
 800606c:	6820      	ldr	r0, [r4, #0]
 800606e:	e70c      	b.n	8005e8a <HAL_HCD_IRQHandler+0x1ca>
 8006070:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	0719      	lsls	r1, r3, #28
 8006078:	d469      	bmi.n	800614e <HAL_HCD_IRQHandler+0x48e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	055a      	lsls	r2, r3, #21
 800607e:	f57f aed2 	bpl.w	8005e26 <HAL_HCD_IRQHandler+0x166>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006082:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006084:	4641      	mov	r1, r8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006086:	f043 0302 	orr.w	r3, r3, #2
 800608a:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800608c:	6820      	ldr	r0, [r4, #0]
 800608e:	f009 f83f 	bl	800f110 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006092:	2210      	movs	r2, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006094:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8006098:	2108      	movs	r1, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800609a:	60ba      	str	r2, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800609c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80060a0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80060a4:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80060a8:	60ba      	str	r2, [r7, #8]
 80060aa:	e6bc      	b.n	8005e26 <HAL_HCD_IRQHandler+0x166>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80060ac:	ea4f 0388 	mov.w	r3, r8, lsl #2
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80060b0:	6938      	ldr	r0, [r7, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80060b2:	eb03 0208 	add.w	r2, r3, r8
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80060b6:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80060ba:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80060be:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80060c0:	1a09      	subs	r1, r1, r0
 80060c2:	64d1      	str	r1, [r2, #76]	; 0x4c
 80060c4:	e6bd      	b.n	8005e42 <HAL_HCD_IRQHandler+0x182>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80060cc:	d17f      	bne.n	80061ce <HAL_HCD_IRQHandler+0x50e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	06d2      	lsls	r2, r2, #27
 80060d2:	f57f af04 	bpl.w	8005ede <HAL_HCD_IRQHandler+0x21e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80060d6:	eb08 0188 	add.w	r1, r8, r8, lsl #2
 80060da:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80060de:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 80060e2:	2a03      	cmp	r2, #3
 80060e4:	f000 8121 	beq.w	800632a <HAL_HCD_IRQHandler+0x66a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80060e8:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 80060ec:	d1bb      	bne.n	8006066 <HAL_HCD_IRQHandler+0x3a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80060ee:	658a      	str	r2, [r1, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 80060f0:	6923      	ldr	r3, [r4, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1b7      	bne.n	8006066 <HAL_HCD_IRQHandler+0x3a6>
        hhcd->hc[ch_num].state = HC_NAK;
 80060f6:	2328      	movs	r3, #40	; 0x28
 80060f8:	2203      	movs	r2, #3
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060fa:	4641      	mov	r1, r8
        hhcd->hc[ch_num].state = HC_NAK;
 80060fc:	fb03 4308 	mla	r3, r3, r8, r4
 8006100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	e7a8      	b.n	800605a <HAL_HCD_IRQHandler+0x39a>
      HAL_HCD_Connect_Callback(hhcd);
 8006108:	4620      	mov	r0, r4
 800610a:	f018 fa5b 	bl	801e5c4 <HAL_HCD_Connect_Callback>
 800610e:	e702      	b.n	8005f16 <HAL_HCD_IRQHandler+0x256>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006110:	4620      	mov	r0, r4
 8006112:	f018 fa65 	bl	801e5e0 <HAL_HCD_PortDisabled_Callback>
 8006116:	e71b      	b.n	8005f50 <HAL_HCD_IRQHandler+0x290>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006118:	68fa      	ldr	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800611a:	4641      	mov	r1, r8
 800611c:	9301      	str	r3, [sp, #4]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800611e:	f042 0202 	orr.w	r2, r2, #2
 8006122:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006124:	6820      	ldr	r0, [r4, #0]
 8006126:	f008 fff3 	bl	800f110 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800612a:	2210      	movs	r2, #16
 800612c:	9b01      	ldr	r3, [sp, #4]
 800612e:	60ba      	str	r2, [r7, #8]
 8006130:	e6a0      	b.n	8005e74 <HAL_HCD_IRQHandler+0x1b4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006132:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
 8006136:	e749      	b.n	8005fcc <HAL_HCD_IRQHandler+0x30c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006138:	9b02      	ldr	r3, [sp, #8]
 800613a:	6820      	ldr	r0, [r4, #0]
 800613c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006140:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006144:	bf18      	it	ne
 8006146:	2101      	movne	r1, #1
 8006148:	f008 fe08 	bl	800ed5c <USB_InitFSLSPClkSel>
 800614c:	e6fd      	b.n	8005f4a <HAL_HCD_IRQHandler+0x28a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800614e:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006150:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8006154:	2105      	movs	r1, #5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006156:	2010      	movs	r0, #16
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006158:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].state = HC_STALL;
 800615c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006160:	f04f 0c08 	mov.w	ip, #8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006164:	60fa      	str	r2, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006166:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800616a:	4641      	mov	r1, r8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800616c:	60b8      	str	r0, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800616e:	f8c7 c008 	str.w	ip, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006172:	6820      	ldr	r0, [r4, #0]
 8006174:	f008 ffcc 	bl	800f110 <USB_HC_Halt>
 8006178:	e655      	b.n	8005e26 <HAL_HCD_IRQHandler+0x166>
    hhcd->hc[ch_num].state = HC_NYET;
 800617a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 800617e:	f04f 0c04 	mov.w	ip, #4
    hhcd->hc[ch_num].do_ping = 1U;
 8006182:	2001      	movs	r0, #1
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006184:	4641      	mov	r1, r8
    hhcd->hc[ch_num].state = HC_NYET;
 8006186:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 800618a:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NYET;
 800618c:	f883 c05d 	strb.w	ip, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8006190:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f043 0302 	orr.w	r3, r3, #2
 800619a:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800619c:	6820      	ldr	r0, [r4, #0]
 800619e:	f008 ffb7 	bl	800f110 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80061a2:	2340      	movs	r3, #64	; 0x40
 80061a4:	60bb      	str	r3, [r7, #8]
 80061a6:	68a1      	ldr	r1, [r4, #8]
 80061a8:	6820      	ldr	r0, [r4, #0]
 80061aa:	e66e      	b.n	8005e8a <HAL_HCD_IRQHandler+0x1ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80061ac:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80061b0:	f04f 0302 	mov.w	r3, #2
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061b4:	4641      	mov	r1, r8
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80061b6:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f043 0302 	orr.w	r3, r3, #2
 80061c0:	60fb      	str	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061c2:	6820      	ldr	r0, [r4, #0]
 80061c4:	f008 ffa4 	bl	800f110 <USB_HC_Halt>
 80061c8:	68a1      	ldr	r1, [r4, #8]
 80061ca:	6820      	ldr	r0, [r4, #0]
 80061cc:	e65d      	b.n	8005e8a <HAL_HCD_IRQHandler+0x1ca>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061ce:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80061d0:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    hhcd->hc[ch_num].state = HC_XACTERR;
 80061d4:	2006      	movs	r0, #6
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061d6:	4641      	mov	r1, r8
    hhcd->hc[ch_num].ErrCnt++;
 80061d8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061dc:	f042 0202 	orr.w	r2, r2, #2
 80061e0:	60fa      	str	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80061e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 80061e4:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt++;
 80061e8:	3201      	adds	r2, #1
 80061ea:	659a      	str	r2, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061ec:	6820      	ldr	r0, [r4, #0]
 80061ee:	f008 ff8f 	bl	800f110 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80061f2:	2380      	movs	r3, #128	; 0x80
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	68a1      	ldr	r1, [r4, #8]
 80061f8:	6820      	ldr	r0, [r4, #0]
 80061fa:	e646      	b.n	8005e8a <HAL_HCD_IRQHandler+0x1ca>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80061fc:	f85b 000a 	ldr.w	r0, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006200:	4672      	mov	r2, lr
 8006202:	4641      	mov	r1, r8
 8006204:	9301      	str	r3, [sp, #4]
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006206:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800620a:	f84b 000a 	str.w	r0, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800620e:	4620      	mov	r0, r4
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006210:	f88c e05c 	strb.w	lr, [ip, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006214:	f018 f9de 	bl	801e5d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006218:	9b01      	ldr	r3, [sp, #4]
 800621a:	e62b      	b.n	8005e74 <HAL_HCD_IRQHandler+0x1b4>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800621c:	f88c 205c 	strb.w	r2, [ip, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006220:	4641      	mov	r1, r8
 8006222:	4620      	mov	r0, r4
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	f018 f9d5 	bl	801e5d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800622a:	9b01      	ldr	r3, [sp, #4]
 800622c:	e622      	b.n	8005e74 <HAL_HCD_IRQHandler+0x1b4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800622e:	eb08 0288 	add.w	r2, r8, r8, lsl #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006232:	4641      	mov	r1, r8
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006234:	eb04 08c2 	add.w	r8, r4, r2, lsl #3
 8006238:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f043 0302 	orr.w	r3, r3, #2
 8006242:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006244:	6820      	ldr	r0, [r4, #0]
 8006246:	f008 ff63 	bl	800f110 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800624a:	2301      	movs	r3, #1
 800624c:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800624e:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
 8006252:	68a1      	ldr	r1, [r4, #8]
 8006254:	6820      	ldr	r0, [r4, #0]
 8006256:	e618      	b.n	8005e8a <HAL_HCD_IRQHandler+0x1ca>
      hhcd->hc[ch_num].ErrCnt++;
 8006258:	eb03 0208 	add.w	r2, r3, r8
 800625c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8006260:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006262:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006264:	2a03      	cmp	r2, #3
 8006266:	d853      	bhi.n	8006310 <HAL_HCD_IRQHandler+0x650>
      hhcd->hc[ch_num].ErrCnt++;
 8006268:	2128      	movs	r1, #40	; 0x28
 800626a:	fb01 4008 	mla	r0, r1, r8, r4
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800626e:	2102      	movs	r1, #2
      hhcd->hc[ch_num].ErrCnt++;
 8006270:	6582      	str	r2, [r0, #88]	; 0x58
 8006272:	eb03 0208 	add.w	r2, r3, r8
 8006276:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800627a:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800627e:	f85b 200a 	ldr.w	r2, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006282:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006286:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800628a:	f84b 200a 	str.w	r2, [fp, sl]
 800628e:	e69d      	b.n	8005fcc <HAL_HCD_IRQHandler+0x30c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	061a      	lsls	r2, r3, #24
 8006294:	d44f      	bmi.n	8006336 <HAL_HCD_IRQHandler+0x676>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	055b      	lsls	r3, r3, #21
 800629a:	d45f      	bmi.n	800635c <HAL_HCD_IRQHandler+0x69c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	079a      	lsls	r2, r3, #30
 80062a0:	f57f adf3 	bpl.w	8005e8a <HAL_HCD_IRQHandler+0x1ca>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80062a4:	68fb      	ldr	r3, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80062a6:	2228      	movs	r2, #40	; 0x28
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80062a8:	f023 0302 	bic.w	r3, r3, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80062ac:	fb02 4208 	mla	r2, r2, r8, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80062b0:	60fb      	str	r3, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80062b2:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d06b      	beq.n	8006392 <HAL_HCD_IRQHandler+0x6d2>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d064      	beq.n	8006388 <HAL_HCD_IRQHandler+0x6c8>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d062      	beq.n	8006388 <HAL_HCD_IRQHandler+0x6c8>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80062c2:	2b05      	cmp	r3, #5
 80062c4:	f000 808c 	beq.w	80063e0 <HAL_HCD_IRQHandler+0x720>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80062c8:	2b06      	cmp	r3, #6
 80062ca:	d070      	beq.n	80063ae <HAL_HCD_IRQHandler+0x6ee>
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d06e      	beq.n	80063ae <HAL_HCD_IRQHandler+0x6ee>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80062d0:	2328      	movs	r3, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80062d2:	2202      	movs	r2, #2
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80062d4:	4641      	mov	r1, r8
 80062d6:	4620      	mov	r0, r4
 80062d8:	fb03 4308 	mla	r3, r3, r8, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80062dc:	60ba      	str	r2, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80062de:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80062e2:	f018 f977 	bl	801e5d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80062e6:	e5fa      	b.n	8005ede <HAL_HCD_IRQHandler+0x21e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80062e8:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062ea:	4641      	mov	r1, r8
    hhcd->hc[ch_num].state = HC_STALL;
 80062ec:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80062f0:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f043 0302 	orr.w	r3, r3, #2
 80062f8:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062fa:	6820      	ldr	r0, [r4, #0]
 80062fc:	f008 ff08 	bl	800f110 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006300:	2205      	movs	r2, #5
 8006302:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
 8006306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800630a:	68a1      	ldr	r1, [r4, #8]
 800630c:	6820      	ldr	r0, [r4, #0]
 800630e:	e5bc      	b.n	8005e8a <HAL_HCD_IRQHandler+0x1ca>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006310:	2228      	movs	r2, #40	; 0x28
 8006312:	2000      	movs	r0, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006314:	2104      	movs	r1, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006316:	fb02 4208 	mla	r2, r2, r8, r4
 800631a:	6590      	str	r0, [r2, #88]	; 0x58
 800631c:	e7a9      	b.n	8006272 <HAL_HCD_IRQHandler+0x5b2>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800631e:	2228      	movs	r2, #40	; 0x28
 8006320:	f04f 0102 	mov.w	r1, #2
 8006324:	fb02 4208 	mla	r2, r2, r8, r4
 8006328:	e7a7      	b.n	800627a <HAL_HCD_IRQHandler+0x5ba>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800632a:	2228      	movs	r2, #40	; 0x28
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800632c:	4641      	mov	r1, r8
      hhcd->hc[ch_num].ErrCnt = 0U;
 800632e:	fb02 4208 	mla	r2, r2, r8, r4
 8006332:	6593      	str	r3, [r2, #88]	; 0x58
 8006334:	e6e6      	b.n	8006104 <HAL_HCD_IRQHandler+0x444>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006336:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006338:	4641      	mov	r1, r8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800633a:	f043 0302 	orr.w	r3, r3, #2
 800633e:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006340:	6820      	ldr	r0, [r4, #0]
 8006342:	f008 fee5 	bl	800f110 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006346:	2328      	movs	r3, #40	; 0x28
 8006348:	2206      	movs	r2, #6
 800634a:	fb03 4808 	mla	r8, r3, r8, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800634e:	2380      	movs	r3, #128	; 0x80
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006350:	f888 205d 	strb.w	r2, [r8, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	68a1      	ldr	r1, [r4, #8]
 8006358:	6820      	ldr	r0, [r4, #0]
 800635a:	e596      	b.n	8005e8a <HAL_HCD_IRQHandler+0x1ca>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800635c:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800635e:	4641      	mov	r1, r8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006360:	f043 0302 	orr.w	r3, r3, #2
 8006364:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006366:	6820      	ldr	r0, [r4, #0]
 8006368:	f008 fed2 	bl	800f110 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800636c:	2328      	movs	r3, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800636e:	2110      	movs	r1, #16
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006370:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006374:	fb03 4808 	mla	r8, r3, r8, r4
 8006378:	2308      	movs	r3, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800637a:	60b9      	str	r1, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800637c:	60ba      	str	r2, [r7, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800637e:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
 8006382:	68a1      	ldr	r1, [r4, #8]
 8006384:	6820      	ldr	r0, [r4, #0]
 8006386:	e580      	b.n	8005e8a <HAL_HCD_IRQHandler+0x1ca>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006388:	f04f 0302 	mov.w	r3, #2
 800638c:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
 8006390:	e79e      	b.n	80062d0 <HAL_HCD_IRQHandler+0x610>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006392:	f892 103f 	ldrb.w	r1, [r2, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006396:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800639a:	1e8b      	subs	r3, r1, #2
 800639c:	2b01      	cmp	r3, #1
 800639e:	d897      	bhi.n	80062d0 <HAL_HCD_IRQHandler+0x610>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80063a0:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 80063a4:	f083 0301 	eor.w	r3, r3, #1
 80063a8:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
 80063ac:	e790      	b.n	80062d0 <HAL_HCD_IRQHandler+0x610>
      hhcd->hc[ch_num].ErrCnt++;
 80063ae:	2328      	movs	r3, #40	; 0x28
 80063b0:	fb03 4208 	mla	r2, r3, r8, r4
 80063b4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80063b6:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80063b8:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 80063ba:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80063bc:	d913      	bls.n	80063e6 <HAL_HCD_IRQHandler+0x726>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80063be:	2100      	movs	r1, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80063c0:	2304      	movs	r3, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 80063c2:	6591      	str	r1, [r2, #88]	; 0x58
 80063c4:	2228      	movs	r2, #40	; 0x28
 80063c6:	fb02 4208 	mla	r2, r2, r8, r4
 80063ca:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063ce:	f85b 300a 	ldr.w	r3, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063da:	f84b 300a 	str.w	r3, [fp, sl]
 80063de:	e777      	b.n	80062d0 <HAL_HCD_IRQHandler+0x610>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80063e0:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
 80063e4:	e774      	b.n	80062d0 <HAL_HCD_IRQHandler+0x610>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80063e6:	2302      	movs	r3, #2
 80063e8:	e7ec      	b.n	80063c4 <HAL_HCD_IRQHandler+0x704>
 80063ea:	bf00      	nop

080063ec <HAL_HCD_Start>:
{
 80063ec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 80063ee:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d00e      	beq.n	8006414 <HAL_HCD_Start+0x28>
 80063f6:	4604      	mov	r4, r0
 80063f8:	2501      	movs	r5, #1
  __HAL_HCD_ENABLE(hhcd);
 80063fa:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hhcd);
 80063fc:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8006400:	f008 fbd8 	bl	800ebb4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006404:	4629      	mov	r1, r5
 8006406:	6820      	ldr	r0, [r4, #0]
 8006408:	f008 fcf0 	bl	800edec <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800640c:	2000      	movs	r0, #0
 800640e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8006412:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8006414:	2002      	movs	r0, #2
}
 8006416:	bd38      	pop	{r3, r4, r5, pc}

08006418 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8006418:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800641c:	2b01      	cmp	r3, #1
 800641e:	d00b      	beq.n	8006438 <HAL_HCD_Stop+0x20>
 8006420:	2301      	movs	r3, #1
{
 8006422:	b510      	push	{r4, lr}
 8006424:	4604      	mov	r4, r0
  (void)USB_StopHost(hhcd->Instance);
 8006426:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hhcd);
 8006428:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800642c:	f008 fec8 	bl	800f1c0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006430:	2000      	movs	r0, #0
 8006432:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8006436:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8006438:	2002      	movs	r0, #2
}
 800643a:	4770      	bx	lr

0800643c <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 800643c:	6800      	ldr	r0, [r0, #0]
 800643e:	f008 bcb5 	b.w	800edac <USB_ResetPort>
 8006442:	bf00      	nop

08006444 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8006444:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006448:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800644c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop

08006454 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8006454:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006458:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800645c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800645e:	4770      	bx	lr

08006460 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006460:	6800      	ldr	r0, [r0, #0]
 8006462:	f008 bcf3 	b.w	800ee4c <USB_GetCurrentFrame>
 8006466:	bf00      	nop

08006468 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8006468:	6800      	ldr	r0, [r0, #0]
 800646a:	f008 bce3 	b.w	800ee34 <USB_GetHostSpeed>
 800646e:	bf00      	nop

08006470 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	4604      	mov	r4, r0
 8006474:	460d      	mov	r5, r1
 8006476:	4616      	mov	r6, r2
 8006478:	1c6b      	adds	r3, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800647a:	6822      	ldr	r2, [r4, #0]
 800647c:	d12e      	bne.n	80064dc <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
 800647e:	6993      	ldr	r3, [r2, #24]
 8006480:	0798      	lsls	r0, r3, #30
 8006482:	d42e      	bmi.n	80064e2 <I2C_WaitOnTXISFlagUntilTimeout+0x72>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006484:	6993      	ldr	r3, [r2, #24]
 8006486:	06d9      	lsls	r1, r3, #27
 8006488:	d5f9      	bpl.n	800647e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800648a:	6993      	ldr	r3, [r2, #24]
 800648c:	069d      	lsls	r5, r3, #26
 800648e:	d5fc      	bpl.n	800648a <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006490:	2310      	movs	r3, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006492:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006494:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	0791      	lsls	r1, r2, #30
 80064a0:	d502      	bpl.n	80064a8 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
    hi2c->Instance->TXDR = 0x00U;
 80064a2:	2200      	movs	r2, #0
 80064a4:	629a      	str	r2, [r3, #40]	; 0x28
 80064a6:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	07d2      	lsls	r2, r2, #31
 80064ac:	d404      	bmi.n	80064b8 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80064ae:	699a      	ldr	r2, [r3, #24]
 80064b0:	f042 0201 	orr.w	r2, r2, #1
 80064b4:	619a      	str	r2, [r3, #24]
 80064b6:	6823      	ldr	r3, [r4, #0]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064b8:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ba:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 80064bc:	4e1b      	ldr	r6, [pc, #108]	; (800652c <I2C_WaitOnTXISFlagUntilTimeout+0xbc>)
    hi2c->State = HAL_I2C_STATE_READY;
 80064be:	2520      	movs	r5, #32
      return HAL_ERROR;
 80064c0:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80064c2:	4032      	ands	r2, r6
 80064c4:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064c6:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064cc:	f043 0304 	orr.w	r3, r3, #4
 80064d0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064d2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 80064da:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064dc:	6993      	ldr	r3, [r2, #24]
 80064de:	079b      	lsls	r3, r3, #30
 80064e0:	d501      	bpl.n	80064e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  return HAL_OK;
 80064e2:	2000      	movs	r0, #0
}
 80064e4:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064e6:	6993      	ldr	r3, [r2, #24]
 80064e8:	06db      	lsls	r3, r3, #27
 80064ea:	d407      	bmi.n	80064fc <I2C_WaitOnTXISFlagUntilTimeout+0x8c>
 80064ec:	e00a      	b.n	8006504 <I2C_WaitOnTXISFlagUntilTimeout+0x94>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ee:	f7fa fba9 	bl	8000c44 <HAL_GetTick>
 80064f2:	1b80      	subs	r0, r0, r6
 80064f4:	4285      	cmp	r5, r0
 80064f6:	d30c      	bcc.n	8006512 <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 80064f8:	b15d      	cbz	r5, 8006512 <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 80064fa:	6822      	ldr	r2, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064fc:	6993      	ldr	r3, [r2, #24]
 80064fe:	0698      	lsls	r0, r3, #26
 8006500:	d5f5      	bpl.n	80064ee <I2C_WaitOnTXISFlagUntilTimeout+0x7e>
 8006502:	e7c5      	b.n	8006490 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006504:	f7fa fb9e 	bl	8000c44 <HAL_GetTick>
 8006508:	1b80      	subs	r0, r0, r6
 800650a:	42a8      	cmp	r0, r5
 800650c:	d801      	bhi.n	8006512 <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 800650e:	2d00      	cmp	r5, #0
 8006510:	d1b2      	bne.n	8006478 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006512:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006514:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006516:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8006518:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800651a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800651c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006520:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006522:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006526:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800652a:	bd70      	pop	{r4, r5, r6, pc}
 800652c:	fe00e800 	.word	0xfe00e800

08006530 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	4604      	mov	r4, r0
 8006534:	460d      	mov	r5, r1
 8006536:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006538:	6822      	ldr	r2, [r4, #0]
 800653a:	6993      	ldr	r3, [r2, #24]
 800653c:	069b      	lsls	r3, r3, #26
 800653e:	d44d      	bmi.n	80065dc <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006540:	6993      	ldr	r3, [r2, #24]
 8006542:	06d9      	lsls	r1, r3, #27
 8006544:	d52a      	bpl.n	800659c <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
 8006546:	1c6b      	adds	r3, r5, #1
 8006548:	d13c      	bne.n	80065c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x94>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800654a:	6993      	ldr	r3, [r2, #24]
 800654c:	069d      	lsls	r5, r3, #26
 800654e:	d5fc      	bpl.n	800654a <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006550:	2310      	movs	r3, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006552:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006554:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	0791      	lsls	r1, r2, #30
 8006560:	d502      	bpl.n	8006568 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
    hi2c->Instance->TXDR = 0x00U;
 8006562:	2200      	movs	r2, #0
 8006564:	629a      	str	r2, [r3, #40]	; 0x28
 8006566:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	07d2      	lsls	r2, r2, #31
 800656c:	d404      	bmi.n	8006578 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800656e:	699a      	ldr	r2, [r3, #24]
 8006570:	f042 0201 	orr.w	r2, r2, #1
 8006574:	619a      	str	r2, [r3, #24]
 8006576:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8006578:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800657a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800657c:	4e18      	ldr	r6, [pc, #96]	; (80065e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>)
    hi2c->State = HAL_I2C_STATE_READY;
 800657e:	2520      	movs	r5, #32
      return HAL_ERROR;
 8006580:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8006582:	4032      	ands	r2, r6
 8006584:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006586:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8006588:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800658c:	f043 0304 	orr.w	r3, r3, #4
 8006590:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006592:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006596:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800659a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800659c:	f7fa fb52 	bl	8000c44 <HAL_GetTick>
 80065a0:	1b80      	subs	r0, r0, r6
 80065a2:	42a8      	cmp	r0, r5
 80065a4:	d801      	bhi.n	80065aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 80065a6:	2d00      	cmp	r5, #0
 80065a8:	d1c6      	bne.n	8006538 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065ac:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ae:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 80065b0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065b2:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80065b4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065b8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065ba:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065be:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065c4:	6993      	ldr	r3, [r2, #24]
 80065c6:	0698      	lsls	r0, r3, #26
 80065c8:	d4c2      	bmi.n	8006550 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ca:	f7fa fb3b 	bl	8000c44 <HAL_GetTick>
 80065ce:	1b80      	subs	r0, r0, r6
 80065d0:	4285      	cmp	r5, r0
 80065d2:	d3ea      	bcc.n	80065aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 80065d4:	2d00      	cmp	r5, #0
 80065d6:	d0e8      	beq.n	80065aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 80065d8:	6822      	ldr	r2, [r4, #0]
 80065da:	e7b4      	b.n	8006546 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80065dc:	2000      	movs	r0, #0
}
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	fe00e800 	.word	0xfe00e800

080065e4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80065e4:	2800      	cmp	r0, #0
 80065e6:	f000 80d2 	beq.w	800678e <HAL_I2C_Init+0x1aa>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80065ea:	496f      	ldr	r1, [pc, #444]	; (80067a8 <HAL_I2C_Init+0x1c4>)
{
 80065ec:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80065ee:	4b6f      	ldr	r3, [pc, #444]	; (80067ac <HAL_I2C_Init+0x1c8>)
 80065f0:	4604      	mov	r4, r0
 80065f2:	6802      	ldr	r2, [r0, #0]
 80065f4:	486e      	ldr	r0, [pc, #440]	; (80067b0 <HAL_I2C_Init+0x1cc>)
 80065f6:	429a      	cmp	r2, r3
 80065f8:	bf18      	it	ne
 80065fa:	4282      	cmpne	r2, r0
 80065fc:	bf14      	ite	ne
 80065fe:	2301      	movne	r3, #1
 8006600:	2300      	moveq	r3, #0
 8006602:	428a      	cmp	r2, r1
 8006604:	bf0c      	ite	eq
 8006606:	2300      	moveq	r3, #0
 8006608:	f003 0301 	andne.w	r3, r3, #1
 800660c:	b11b      	cbz	r3, 8006616 <HAL_I2C_Init+0x32>
 800660e:	4b69      	ldr	r3, [pc, #420]	; (80067b4 <HAL_I2C_Init+0x1d0>)
 8006610:	429a      	cmp	r2, r3
 8006612:	f040 80be 	bne.w	8006792 <HAL_I2C_Init+0x1ae>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006616:	68a3      	ldr	r3, [r4, #8]
 8006618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661c:	d271      	bcs.n	8006702 <HAL_I2C_Init+0x11e>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800661e:	68e3      	ldr	r3, [r4, #12]
 8006620:	3b01      	subs	r3, #1
 8006622:	2b01      	cmp	r3, #1
 8006624:	d85e      	bhi.n	80066e4 <HAL_I2C_Init+0x100>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006626:	6923      	ldr	r3, [r4, #16]
 8006628:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800662c:	d17c      	bne.n	8006728 <HAL_I2C_Init+0x144>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800662e:	6963      	ldr	r3, [r4, #20]
 8006630:	2bff      	cmp	r3, #255	; 0xff
 8006632:	d870      	bhi.n	8006716 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8006634:	69a3      	ldr	r3, [r4, #24]
 8006636:	2b07      	cmp	r3, #7
 8006638:	f200 809e 	bhi.w	8006778 <HAL_I2C_Init+0x194>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800663c:	69e3      	ldr	r3, [r4, #28]
 800663e:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8006642:	f040 808e 	bne.w	8006762 <HAL_I2C_Init+0x17e>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006646:	6a23      	ldr	r3, [r4, #32]
 8006648:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800664c:	d17c      	bne.n	8006748 <HAL_I2C_Init+0x164>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800664e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006652:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006656:	2b00      	cmp	r3, #0
 8006658:	d070      	beq.n	800673c <HAL_I2C_Init+0x158>
  __HAL_I2C_DISABLE(hi2c);
 800665a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800665c:	2324      	movs	r3, #36	; 0x24
 800665e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006662:	6813      	ldr	r3, [r2, #0]
 8006664:	f023 0301 	bic.w	r3, r3, #1
 8006668:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800666a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800666e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8006672:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006674:	6822      	ldr	r2, [r4, #0]
 8006676:	6893      	ldr	r3, [r2, #8]
 8006678:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800667c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800667e:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006680:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006682:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006684:	68a3      	ldr	r3, [r4, #8]
 8006686:	bf0c      	ite	eq
 8006688:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800668c:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8006690:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006692:	68e3      	ldr	r3, [r4, #12]
 8006694:	6825      	ldr	r5, [r4, #0]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d02e      	beq.n	80066f8 <HAL_I2C_Init+0x114>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800669a:	6868      	ldr	r0, [r5, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800669c:	2200      	movs	r2, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800669e:	4b46      	ldr	r3, [pc, #280]	; (80067b8 <HAL_I2C_Init+0x1d4>)
  hi2c->State = HAL_I2C_STATE_READY;
 80066a0:	2120      	movs	r1, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80066a2:	4303      	orrs	r3, r0
  return HAL_OK;
 80066a4:	4610      	mov	r0, r2
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80066a6:	606b      	str	r3, [r5, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80066a8:	6825      	ldr	r5, [r4, #0]
 80066aa:	68eb      	ldr	r3, [r5, #12]
 80066ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066b0:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80066b2:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
 80066b6:	432b      	orrs	r3, r5
 80066b8:	69a5      	ldr	r5, [r4, #24]
 80066ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80066be:	6825      	ldr	r5, [r4, #0]
 80066c0:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80066c2:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 80066c6:	432b      	orrs	r3, r5
 80066c8:	6825      	ldr	r5, [r4, #0]
 80066ca:	602b      	str	r3, [r5, #0]
  __HAL_I2C_ENABLE(hi2c);
 80066cc:	6825      	ldr	r5, [r4, #0]
 80066ce:	682b      	ldr	r3, [r5, #0]
 80066d0:	f043 0301 	orr.w	r3, r3, #1
 80066d4:	602b      	str	r3, [r5, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066d6:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80066d8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80066dc:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066de:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80066e4:	f240 11e3 	movw	r1, #483	; 0x1e3
 80066e8:	4834      	ldr	r0, [pc, #208]	; (80067bc <HAL_I2C_Init+0x1d8>)
 80066ea:	f00d faa7 	bl	8013c3c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80066ee:	6923      	ldr	r3, [r4, #16]
 80066f0:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80066f4:	d09b      	beq.n	800662e <HAL_I2C_Init+0x4a>
 80066f6:	e017      	b.n	8006728 <HAL_I2C_Init+0x144>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80066f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066fc:	606b      	str	r3, [r5, #4]
 80066fe:	6825      	ldr	r5, [r4, #0]
 8006700:	e7cb      	b.n	800669a <HAL_I2C_Init+0xb6>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006702:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8006706:	482d      	ldr	r0, [pc, #180]	; (80067bc <HAL_I2C_Init+0x1d8>)
 8006708:	f00d fa98 	bl	8013c3c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800670c:	68e3      	ldr	r3, [r4, #12]
 800670e:	3b01      	subs	r3, #1
 8006710:	2b01      	cmp	r3, #1
 8006712:	d988      	bls.n	8006626 <HAL_I2C_Init+0x42>
 8006714:	e7e6      	b.n	80066e4 <HAL_I2C_Init+0x100>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006716:	f240 11e5 	movw	r1, #485	; 0x1e5
 800671a:	4828      	ldr	r0, [pc, #160]	; (80067bc <HAL_I2C_Init+0x1d8>)
 800671c:	f00d fa8e 	bl	8013c3c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8006720:	69a3      	ldr	r3, [r4, #24]
 8006722:	2b07      	cmp	r3, #7
 8006724:	d98a      	bls.n	800663c <HAL_I2C_Init+0x58>
 8006726:	e027      	b.n	8006778 <HAL_I2C_Init+0x194>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006728:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 800672c:	4823      	ldr	r0, [pc, #140]	; (80067bc <HAL_I2C_Init+0x1d8>)
 800672e:	f00d fa85 	bl	8013c3c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006732:	6963      	ldr	r3, [r4, #20]
 8006734:	2bff      	cmp	r3, #255	; 0xff
 8006736:	f67f af7d 	bls.w	8006634 <HAL_I2C_Init+0x50>
 800673a:	e7ec      	b.n	8006716 <HAL_I2C_Init+0x132>
    hi2c->Lock = HAL_UNLOCKED;
 800673c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006740:	4620      	mov	r0, r4
 8006742:	f00c fe9d 	bl	8013480 <HAL_I2C_MspInit>
 8006746:	e788      	b.n	800665a <HAL_I2C_Init+0x76>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006748:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800674c:	481b      	ldr	r0, [pc, #108]	; (80067bc <HAL_I2C_Init+0x1d8>)
 800674e:	f00d fa75 	bl	8013c3c <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006752:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006756:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800675a:	2b00      	cmp	r3, #0
 800675c:	f47f af7d 	bne.w	800665a <HAL_I2C_Init+0x76>
 8006760:	e7ec      	b.n	800673c <HAL_I2C_Init+0x158>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006762:	f240 11e7 	movw	r1, #487	; 0x1e7
 8006766:	4815      	ldr	r0, [pc, #84]	; (80067bc <HAL_I2C_Init+0x1d8>)
 8006768:	f00d fa68 	bl	8013c3c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800676c:	6a23      	ldr	r3, [r4, #32]
 800676e:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8006772:	f43f af6c 	beq.w	800664e <HAL_I2C_Init+0x6a>
 8006776:	e7e7      	b.n	8006748 <HAL_I2C_Init+0x164>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8006778:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 800677c:	480f      	ldr	r0, [pc, #60]	; (80067bc <HAL_I2C_Init+0x1d8>)
 800677e:	f00d fa5d 	bl	8013c3c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006782:	69e3      	ldr	r3, [r4, #28]
 8006784:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8006788:	f43f af5d 	beq.w	8006646 <HAL_I2C_Init+0x62>
 800678c:	e7e9      	b.n	8006762 <HAL_I2C_Init+0x17e>
    return HAL_ERROR;
 800678e:	2001      	movs	r0, #1
}
 8006790:	4770      	bx	lr
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006792:	f240 11e1 	movw	r1, #481	; 0x1e1
 8006796:	4809      	ldr	r0, [pc, #36]	; (80067bc <HAL_I2C_Init+0x1d8>)
 8006798:	f00d fa50 	bl	8013c3c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800679c:	68a3      	ldr	r3, [r4, #8]
 800679e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a2:	f4ff af3c 	bcc.w	800661e <HAL_I2C_Init+0x3a>
 80067a6:	e7ac      	b.n	8006702 <HAL_I2C_Init+0x11e>
 80067a8:	40005c00 	.word	0x40005c00
 80067ac:	40005400 	.word	0x40005400
 80067b0:	40005800 	.word	0x40005800
 80067b4:	58001c00 	.word	0x58001c00
 80067b8:	02008000 	.word	0x02008000
 80067bc:	0802a3a4 	.word	0x0802a3a4

080067c0 <HAL_I2C_Master_Transmit>:
{
 80067c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c4:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 80067c8:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80067ca:	2c20      	cmp	r4, #32
 80067cc:	f040 80a1 	bne.w	8006912 <HAL_I2C_Master_Transmit+0x152>
    __HAL_LOCK(hi2c);
 80067d0:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80067d4:	2c01      	cmp	r4, #1
 80067d6:	f000 809c 	beq.w	8006912 <HAL_I2C_Master_Transmit+0x152>
 80067da:	4698      	mov	r8, r3
 80067dc:	2301      	movs	r3, #1
 80067de:	4691      	mov	r9, r2
 80067e0:	460f      	mov	r7, r1
 80067e2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80067e6:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80067e8:	f7fa fa2c 	bl	8000c44 <HAL_GetTick>
 80067ec:	4605      	mov	r5, r0
 80067ee:	e005      	b.n	80067fc <HAL_I2C_Master_Transmit+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f0:	f7fa fa28 	bl	8000c44 <HAL_GetTick>
 80067f4:	1b40      	subs	r0, r0, r5
 80067f6:	2819      	cmp	r0, #25
 80067f8:	f200 80a6 	bhi.w	8006948 <HAL_I2C_Master_Transmit+0x188>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	6998      	ldr	r0, [r3, #24]
 8006800:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8006804:	d1f4      	bne.n	80067f0 <HAL_I2C_Master_Transmit+0x30>
 8006806:	4a78      	ldr	r2, [pc, #480]	; (80069e8 <HAL_I2C_Master_Transmit+0x228>)
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006808:	f04f 0c21 	mov.w	ip, #33	; 0x21
 800680c:	4977      	ldr	r1, [pc, #476]	; (80069ec <HAL_I2C_Master_Transmit+0x22c>)
 800680e:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
 8006812:	4293      	cmp	r3, r2
 8006814:	bf18      	it	ne
 8006816:	428b      	cmpne	r3, r1
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006818:	f04f 0110 	mov.w	r1, #16
 800681c:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 80069fc <HAL_I2C_Master_Transmit+0x23c>
 8006820:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006824:	bf14      	ite	ne
 8006826:	2201      	movne	r2, #1
 8006828:	2200      	moveq	r2, #0
 800682a:	4971      	ldr	r1, [pc, #452]	; (80069f0 <HAL_I2C_Master_Transmit+0x230>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800682c:	6460      	str	r0, [r4, #68]	; 0x44
 800682e:	428b      	cmp	r3, r1
 8006830:	bf0c      	ite	eq
 8006832:	2200      	moveq	r2, #0
 8006834:	f002 0201 	andne.w	r2, r2, #1
    hi2c->XferCount = Size;
 8006838:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800683c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800683e:	4563      	cmp	r3, ip
 8006840:	bf0c      	ite	eq
 8006842:	2200      	moveq	r2, #0
 8006844:	f002 0201 	andne.w	r2, r2, #1
    hi2c->pBuffPtr  = pData;
 8006848:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800684c:	29ff      	cmp	r1, #255	; 0xff
    hi2c->XferISR   = NULL;
 800684e:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006850:	d862      	bhi.n	8006918 <HAL_I2C_Master_Transmit+0x158>
      hi2c->XferSize = hi2c->XferCount;
 8006852:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8006854:	b289      	uxth	r1, r1
 8006856:	8521      	strh	r1, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006858:	fa5f f881 	uxtb.w	r8, r1
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800685c:	2a00      	cmp	r2, #0
 800685e:	f040 80b5 	bne.w	80069cc <HAL_I2C_Master_Transmit+0x20c>
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006862:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006866:	4a63      	ldr	r2, [pc, #396]	; (80069f4 <HAL_I2C_Master_Transmit+0x234>)
 8006868:	6859      	ldr	r1, [r3, #4]
 800686a:	433a      	orrs	r2, r7
 800686c:	4862      	ldr	r0, [pc, #392]	; (80069f8 <HAL_I2C_Master_Transmit+0x238>)
 800686e:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 8006872:	4001      	ands	r1, r0
 8006874:	430a      	orrs	r2, r1
 8006876:	605a      	str	r2, [r3, #4]
 8006878:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8006a10 <HAL_I2C_Master_Transmit+0x250>
 800687c:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80069ec <HAL_I2C_Master_Transmit+0x22c>
 8006880:	ea47 0808 	orr.w	r8, r7, r8
    while (hi2c->XferCount > 0U)
 8006884:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006886:	462a      	mov	r2, r5
 8006888:	4631      	mov	r1, r6
 800688a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d07b      	beq.n	800698a <HAL_I2C_Master_Transmit+0x1ca>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006892:	f7ff fded 	bl	8006470 <I2C_WaitOnTXISFlagUntilTimeout>
 8006896:	2800      	cmp	r0, #0
 8006898:	d174      	bne.n	8006984 <HAL_I2C_Master_Transmit+0x1c4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800689a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	7812      	ldrb	r2, [r2, #0]
 80068a0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068a2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80068a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80068a6:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 80068a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80068aa:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 80068ac:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 80068ae:	3201      	adds	r2, #1
      hi2c->XferSize--;
 80068b0:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 80068b2:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068b4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80068b6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068b8:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 80068ba:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e1      	bne.n	8006884 <HAL_I2C_Master_Transmit+0xc4>
 80068c0:	2900      	cmp	r1, #0
 80068c2:	d0df      	beq.n	8006884 <HAL_I2C_Master_Transmit+0xc4>
 80068c4:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	d134      	bne.n	8006934 <HAL_I2C_Master_Transmit+0x174>
 80068ca:	6993      	ldr	r3, [r2, #24]
 80068cc:	0619      	lsls	r1, r3, #24
 80068ce:	d5fc      	bpl.n	80068ca <HAL_I2C_Master_Transmit+0x10a>
 80068d0:	4b4a      	ldr	r3, [pc, #296]	; (80069fc <HAL_I2C_Master_Transmit+0x23c>)
 80068d2:	4947      	ldr	r1, [pc, #284]	; (80069f0 <HAL_I2C_Master_Transmit+0x230>)
 80068d4:	454a      	cmp	r2, r9
 80068d6:	bf18      	it	ne
 80068d8:	429a      	cmpne	r2, r3
 80068da:	4843      	ldr	r0, [pc, #268]	; (80069e8 <HAL_I2C_Master_Transmit+0x228>)
 80068dc:	bf14      	ite	ne
 80068de:	2301      	movne	r3, #1
 80068e0:	2300      	moveq	r3, #0
 80068e2:	428a      	cmp	r2, r1
 80068e4:	bf0c      	ite	eq
 80068e6:	2300      	moveq	r3, #0
 80068e8:	f003 0301 	andne.w	r3, r3, #1
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068ec:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80068ee:	4282      	cmp	r2, r0
 80068f0:	bf0c      	ite	eq
 80068f2:	2300      	moveq	r3, #0
 80068f4:	f003 0301 	andne.w	r3, r3, #1
 80068f8:	29ff      	cmp	r1, #255	; 0xff
 80068fa:	d933      	bls.n	8006964 <HAL_I2C_Master_Transmit+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068fc:	21ff      	movs	r1, #255	; 0xff
 80068fe:	8521      	strh	r1, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006900:	2b00      	cmp	r3, #0
 8006902:	d155      	bne.n	80069b0 <HAL_I2C_Master_Transmit+0x1f0>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006904:	6853      	ldr	r3, [r2, #4]
 8006906:	493e      	ldr	r1, [pc, #248]	; (8006a00 <HAL_I2C_Master_Transmit+0x240>)
 8006908:	400b      	ands	r3, r1
 800690a:	ea43 0308 	orr.w	r3, r3, r8
 800690e:	6053      	str	r3, [r2, #4]
 8006910:	e7b8      	b.n	8006884 <HAL_I2C_Master_Transmit+0xc4>
    return HAL_BUSY;
 8006912:	2002      	movs	r0, #2
}
 8006914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006918:	21ff      	movs	r1, #255	; 0xff
 800691a:	8521      	strh	r1, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800691c:	2a00      	cmp	r2, #0
 800691e:	d15c      	bne.n	80069da <HAL_I2C_Master_Transmit+0x21a>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006926:	4937      	ldr	r1, [pc, #220]	; (8006a04 <HAL_I2C_Master_Transmit+0x244>)
 8006928:	4833      	ldr	r0, [pc, #204]	; (80069f8 <HAL_I2C_Master_Transmit+0x238>)
 800692a:	4339      	orrs	r1, r7
 800692c:	4002      	ands	r2, r0
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]
 8006932:	e7a1      	b.n	8006878 <HAL_I2C_Master_Transmit+0xb8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006934:	6993      	ldr	r3, [r2, #24]
 8006936:	061b      	lsls	r3, r3, #24
 8006938:	d4ca      	bmi.n	80068d0 <HAL_I2C_Master_Transmit+0x110>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693a:	f7fa f983 	bl	8000c44 <HAL_GetTick>
 800693e:	1b40      	subs	r0, r0, r5
 8006940:	4286      	cmp	r6, r0
 8006942:	d301      	bcc.n	8006948 <HAL_I2C_Master_Transmit+0x188>
 8006944:	2e00      	cmp	r6, #0
 8006946:	d1bd      	bne.n	80068c4 <HAL_I2C_Master_Transmit+0x104>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006948:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800694a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800694c:	2200      	movs	r2, #0
          return HAL_ERROR;
 800694e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006950:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8006952:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006956:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006958:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800695c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8006960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          hi2c->XferSize = hi2c->XferCount;
 8006964:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8006966:	b289      	uxth	r1, r1
 8006968:	8521      	strh	r1, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800696a:	fa5f fa81 	uxtb.w	sl, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800696e:	bb33      	cbnz	r3, 80069be <HAL_I2C_Master_Transmit+0x1fe>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006970:	6851      	ldr	r1, [r2, #4]
 8006972:	ea47 430a 	orr.w	r3, r7, sl, lsl #16
 8006976:	4822      	ldr	r0, [pc, #136]	; (8006a00 <HAL_I2C_Master_Transmit+0x240>)
 8006978:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800697c:	4001      	ands	r1, r0
 800697e:	430b      	orrs	r3, r1
 8006980:	6053      	str	r3, [r2, #4]
 8006982:	e77f      	b.n	8006884 <HAL_I2C_Master_Transmit+0xc4>
        return HAL_ERROR;
 8006984:	2001      	movs	r0, #1
}
 8006986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800698a:	f7ff fdd1 	bl	8006530 <I2C_WaitOnSTOPFlagUntilTimeout>
 800698e:	2800      	cmp	r0, #0
 8006990:	d1f8      	bne.n	8006984 <HAL_I2C_Master_Transmit+0x1c4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 8006996:	4d1c      	ldr	r5, [pc, #112]	; (8006a08 <HAL_I2C_Master_Transmit+0x248>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006998:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800699a:	6821      	ldr	r1, [r4, #0]
 800699c:	684b      	ldr	r3, [r1, #4]
 800699e:	402b      	ands	r3, r5
 80069a0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80069a2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80069a6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069aa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80069ae:	e7b1      	b.n	8006914 <HAL_I2C_Master_Transmit+0x154>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80069b0:	f641 1131 	movw	r1, #6449	; 0x1931
 80069b4:	4815      	ldr	r0, [pc, #84]	; (8006a0c <HAL_I2C_Master_Transmit+0x24c>)
 80069b6:	f00d f941 	bl	8013c3c <assert_failed>
 80069ba:	6822      	ldr	r2, [r4, #0]
 80069bc:	e7a2      	b.n	8006904 <HAL_I2C_Master_Transmit+0x144>
 80069be:	f641 1131 	movw	r1, #6449	; 0x1931
 80069c2:	4812      	ldr	r0, [pc, #72]	; (8006a0c <HAL_I2C_Master_Transmit+0x24c>)
 80069c4:	f00d f93a 	bl	8013c3c <assert_failed>
 80069c8:	6822      	ldr	r2, [r4, #0]
 80069ca:	e7d1      	b.n	8006970 <HAL_I2C_Master_Transmit+0x1b0>
 80069cc:	f641 1131 	movw	r1, #6449	; 0x1931
 80069d0:	480e      	ldr	r0, [pc, #56]	; (8006a0c <HAL_I2C_Master_Transmit+0x24c>)
 80069d2:	f00d f933 	bl	8013c3c <assert_failed>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	e743      	b.n	8006862 <HAL_I2C_Master_Transmit+0xa2>
 80069da:	f641 1131 	movw	r1, #6449	; 0x1931
 80069de:	480b      	ldr	r0, [pc, #44]	; (8006a0c <HAL_I2C_Master_Transmit+0x24c>)
 80069e0:	f00d f92c 	bl	8013c3c <assert_failed>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	e79b      	b.n	8006920 <HAL_I2C_Master_Transmit+0x160>
 80069e8:	40005c00 	.word	0x40005c00
 80069ec:	40005400 	.word	0x40005400
 80069f0:	40005800 	.word	0x40005800
 80069f4:	82002000 	.word	0x82002000
 80069f8:	fc009800 	.word	0xfc009800
 80069fc:	58001c00 	.word	0x58001c00
 8006a00:	fc009c00 	.word	0xfc009c00
 8006a04:	81ff2000 	.word	0x81ff2000
 8006a08:	fe00e800 	.word	0xfe00e800
 8006a0c:	0802a3a4 	.word	0x0802a3a4
 8006a10:	01ff0000 	.word	0x01ff0000

08006a14 <HAL_I2C_Master_Transmit_DMA>:
{
 8006a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a18:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8006a1c:	2c20      	cmp	r4, #32
 8006a1e:	d148      	bne.n	8006ab2 <HAL_I2C_Master_Transmit_DMA+0x9e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006a20:	6807      	ldr	r7, [r0, #0]
 8006a22:	69bd      	ldr	r5, [r7, #24]
 8006a24:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
 8006a28:	d143      	bne.n	8006ab2 <HAL_I2C_Master_Transmit_DMA+0x9e>
    __HAL_LOCK(hi2c);
 8006a2a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8006a2e:	2c01      	cmp	r4, #1
 8006a30:	d03f      	beq.n	8006ab2 <HAL_I2C_Master_Transmit_DMA+0x9e>
 8006a32:	4604      	mov	r4, r0
 8006a34:	460e      	mov	r6, r1
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006a36:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a3a:	2110      	movs	r1, #16
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a3c:	4868      	ldr	r0, [pc, #416]	; (8006be0 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006a3e:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a42:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    __HAL_LOCK(hi2c);
 8006a46:	2101      	movs	r1, #1
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006a48:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8006a4a:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a4c:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006a50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c14 <HAL_I2C_Master_Transmit_DMA+0x200>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a54:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr    = pData;
 8006a56:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_LOCK(hi2c);
 8006a58:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006a5c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a60:	d92b      	bls.n	8006aba <HAL_I2C_Master_Transmit_DMA+0xa6>
 8006a62:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 8006a64:	f04f 7980 	mov.w	r9, #16777216	; 0x1000000
 8006a68:	8523      	strh	r3, [r4, #40]	; 0x28
      if (hi2c->hdmatx != NULL)
 8006a6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d058      	beq.n	8006b22 <HAL_I2C_Master_Transmit_DMA+0x10e>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8006a70:	4d5c      	ldr	r5, [pc, #368]	; (8006be4 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006a72:	2700      	movs	r7, #0
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006a74:	485c      	ldr	r0, [pc, #368]	; (8006be8 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006a76:	4611      	mov	r1, r2
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8006a78:	63dd      	str	r5, [r3, #60]	; 0x3c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006a7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a7c:	64d8      	str	r0, [r3, #76]	; 0x4c
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006a7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a80:	641f      	str	r7, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006a82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a84:	651f      	str	r7, [r3, #80]	; 0x50
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006a86:	6822      	ldr	r2, [r4, #0]
 8006a88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006a8a:	3228      	adds	r2, #40	; 0x28
 8006a8c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006a8e:	f7fc fdc5 	bl	800361c <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8006a92:	4605      	mov	r5, r0
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d05b      	beq.n	8006b50 <HAL_I2C_Master_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006a98:	2320      	movs	r3, #32
        __HAL_UNLOCK(hi2c);
 8006a9a:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
        return HAL_ERROR;
 8006a9e:	2501      	movs	r5, #1
        hi2c->State     = HAL_I2C_STATE_READY;
 8006aa0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006aa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006aa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006aaa:	f043 0310 	orr.w	r3, r3, #16
 8006aae:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8006ab0:	e000      	b.n	8006ab4 <HAL_I2C_Master_Transmit_DMA+0xa0>
    return HAL_BUSY;
 8006ab2:	2502      	movs	r5, #2
}
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = hi2c->XferCount;
 8006aba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	8523      	strh	r3, [r4, #40]	; 0x28
    if (hi2c->XferSize > 0U)
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d13b      	bne.n	8006b3c <HAL_I2C_Master_Transmit_DMA+0x128>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006ac4:	4b49      	ldr	r3, [pc, #292]	; (8006bec <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8006ac6:	4a4a      	ldr	r2, [pc, #296]	; (8006bf0 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8006ac8:	494a      	ldr	r1, [pc, #296]	; (8006bf4 <HAL_I2C_Master_Transmit_DMA+0x1e0>)
 8006aca:	429f      	cmp	r7, r3
 8006acc:	bf18      	it	ne
 8006ace:	4297      	cmpne	r7, r2
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006ad0:	4a49      	ldr	r2, [pc, #292]	; (8006bf8 <HAL_I2C_Master_Transmit_DMA+0x1e4>)
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006ad2:	bf14      	ite	ne
 8006ad4:	2301      	movne	r3, #1
 8006ad6:	2300      	moveq	r3, #0
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006ad8:	6362      	str	r2, [r4, #52]	; 0x34
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006ada:	428f      	cmp	r7, r1
 8006adc:	bf0c      	ite	eq
 8006ade:	2300      	moveq	r3, #0
 8006ae0:	f003 0301 	andne.w	r3, r3, #1
 8006ae4:	b113      	cbz	r3, 8006aec <HAL_I2C_Master_Transmit_DMA+0xd8>
 8006ae6:	4b45      	ldr	r3, [pc, #276]	; (8006bfc <HAL_I2C_Master_Transmit_DMA+0x1e8>)
 8006ae8:	429f      	cmp	r7, r3
 8006aea:	d12a      	bne.n	8006b42 <HAL_I2C_Master_Transmit_DMA+0x12e>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006aec:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8006af0:	4b43      	ldr	r3, [pc, #268]	; (8006c00 <HAL_I2C_Master_Transmit_DMA+0x1ec>)
 8006af2:	687a      	ldr	r2, [r7, #4]
      __HAL_UNLOCK(hi2c);
 8006af4:	2000      	movs	r0, #0
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006af6:	430b      	orrs	r3, r1
 8006af8:	4942      	ldr	r1, [pc, #264]	; (8006c04 <HAL_I2C_Master_Transmit_DMA+0x1f0>)
 8006afa:	400a      	ands	r2, r1
 8006afc:	4313      	orrs	r3, r2
 8006afe:	607b      	str	r3, [r7, #4]
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006b00:	6b63      	ldr	r3, [r4, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8006b02:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006b06:	4543      	cmp	r3, r8
 8006b08:	d004      	beq.n	8006b14 <HAL_I2C_Master_Transmit_DMA+0x100>
 8006b0a:	4a3f      	ldr	r2, [pc, #252]	; (8006c08 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d001      	beq.n	8006b14 <HAL_I2C_Master_Transmit_DMA+0x100>
 8006b10:	21f2      	movs	r1, #242	; 0xf2
 8006b12:	e000      	b.n	8006b16 <HAL_I2C_Master_Transmit_DMA+0x102>
 8006b14:	2100      	movs	r1, #0
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006b16:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8006b18:	2500      	movs	r5, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006b1a:	6813      	ldr	r3, [r2, #0]
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	e7c8      	b.n	8006ab4 <HAL_I2C_Master_Transmit_DMA+0xa0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006b22:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8006b24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8006b28:	2501      	movs	r5, #1
        hi2c->State     = HAL_I2C_STATE_READY;
 8006b2a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006b2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006b32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b38:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8006b3a:	e7bb      	b.n	8006ab4 <HAL_I2C_Master_Transmit_DMA+0xa0>
      xfermode = I2C_AUTOEND_MODE;
 8006b3c:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
 8006b40:	e793      	b.n	8006a6a <HAL_I2C_Master_Transmit_DMA+0x56>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006b42:	f641 1131 	movw	r1, #6449	; 0x1931
 8006b46:	4831      	ldr	r0, [pc, #196]	; (8006c0c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8006b48:	f00d f878 	bl	8013c3c <assert_failed>
 8006b4c:	6827      	ldr	r7, [r4, #0]
 8006b4e:	e7cd      	b.n	8006aec <HAL_I2C_Master_Transmit_DMA+0xd8>
 8006b50:	4b26      	ldr	r3, [pc, #152]	; (8006bec <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8006b52:	6822      	ldr	r2, [r4, #0]
 8006b54:	4826      	ldr	r0, [pc, #152]	; (8006bf0 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8006b56:	4927      	ldr	r1, [pc, #156]	; (8006bf4 <HAL_I2C_Master_Transmit_DMA+0x1e0>)
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	bf18      	it	ne
 8006b5c:	4282      	cmpne	r2, r0
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8006b5e:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006b62:	bf14      	ite	ne
 8006b64:	2301      	movne	r3, #1
 8006b66:	2300      	moveq	r3, #0
 8006b68:	428a      	cmp	r2, r1
 8006b6a:	bf0c      	ite	eq
 8006b6c:	2300      	moveq	r3, #0
 8006b6e:	f003 0301 	andne.w	r3, r3, #1
 8006b72:	b113      	cbz	r3, 8006b7a <HAL_I2C_Master_Transmit_DMA+0x166>
 8006b74:	4b21      	ldr	r3, [pc, #132]	; (8006bfc <HAL_I2C_Master_Transmit_DMA+0x1e8>)
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d12a      	bne.n	8006bd0 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006b7a:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8006b7e:	4b24      	ldr	r3, [pc, #144]	; (8006c10 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8006b80:	6856      	ldr	r6, [r2, #4]
        __HAL_UNLOCK(hi2c);
 8006b82:	2000      	movs	r0, #0
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006b84:	430b      	orrs	r3, r1
 8006b86:	491f      	ldr	r1, [pc, #124]	; (8006c04 <HAL_I2C_Master_Transmit_DMA+0x1f0>)
 8006b88:	400e      	ands	r6, r1
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006b8a:	491f      	ldr	r1, [pc, #124]	; (8006c08 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006b8c:	4333      	orrs	r3, r6
 8006b8e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b92:	ea43 0309 	orr.w	r3, r3, r9
 8006b96:	6053      	str	r3, [r2, #4]
        hi2c->XferCount -= hi2c->XferSize;
 8006b98:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006b9a:	8d26      	ldrh	r6, [r4, #40]	; 0x28
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006b9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
        hi2c->XferCount -= hi2c->XferSize;
 8006b9e:	1b92      	subs	r2, r2, r6
        __HAL_UNLOCK(hi2c);
 8006ba0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006ba4:	428b      	cmp	r3, r1
        hi2c->XferCount -= hi2c->XferSize;
 8006ba6:	b292      	uxth	r2, r2
 8006ba8:	8562      	strh	r2, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006baa:	d00f      	beq.n	8006bcc <HAL_I2C_Master_Transmit_DMA+0x1b8>
 8006bac:	eba3 0308 	sub.w	r3, r3, r8
 8006bb0:	fab3 f383 	clz	r3, r3
 8006bb4:	095b      	lsrs	r3, r3, #5
 8006bb6:	b94b      	cbnz	r3, 8006bcc <HAL_I2C_Master_Transmit_DMA+0x1b8>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006bb8:	6821      	ldr	r1, [r4, #0]
 8006bba:	680a      	ldr	r2, [r1, #0]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	600b      	str	r3, [r1, #0]
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006bc0:	6822      	ldr	r2, [r4, #0]
 8006bc2:	6813      	ldr	r3, [r2, #0]
 8006bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	e773      	b.n	8006ab4 <HAL_I2C_Master_Transmit_DMA+0xa0>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006bcc:	2390      	movs	r3, #144	; 0x90
 8006bce:	e7f3      	b.n	8006bb8 <HAL_I2C_Master_Transmit_DMA+0x1a4>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006bd0:	f641 1131 	movw	r1, #6449	; 0x1931
 8006bd4:	480d      	ldr	r0, [pc, #52]	; (8006c0c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8006bd6:	f00d f831 	bl	8013c3c <assert_failed>
 8006bda:	6822      	ldr	r2, [r4, #0]
 8006bdc:	e7cd      	b.n	8006b7a <HAL_I2C_Master_Transmit_DMA+0x166>
 8006bde:	bf00      	nop
 8006be0:	ffff0000 	.word	0xffff0000
 8006be4:	08007425 	.word	0x08007425
 8006be8:	08007e75 	.word	0x08007e75
 8006bec:	40005400 	.word	0x40005400
 8006bf0:	40005800 	.word	0x40005800
 8006bf4:	40005c00 	.word	0x40005c00
 8006bf8:	08007731 	.word	0x08007731
 8006bfc:	58001c00 	.word	0x58001c00
 8006c00:	82002000 	.word	0x82002000
 8006c04:	fc009800 	.word	0xfc009800
 8006c08:	08007259 	.word	0x08007259
 8006c0c:	0802a3a4 	.word	0x0802a3a4
 8006c10:	80002000 	.word	0x80002000
 8006c14:	08007a05 	.word	0x08007a05

08006c18 <HAL_I2C_EV_IRQHandler>:
{
 8006c18:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c1a:	6803      	ldr	r3, [r0, #0]
  if (hi2c->XferISR != NULL)
 8006c1c:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c1e:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006c20:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8006c22:	b11c      	cbz	r4, 8006c2c <HAL_I2C_EV_IRQHandler+0x14>
    hi2c->XferISR(hi2c, itflags, itsources);
 8006c24:	4623      	mov	r3, r4
}
 8006c26:	f85d 4b04 	ldr.w	r4, [sp], #4
    hi2c->XferISR(hi2c, itflags, itsources);
 8006c2a:	4718      	bx	r3
}
 8006c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop

08006c34 <HAL_I2C_MasterTxCpltCallback>:
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop

08006c38 <HAL_I2C_MasterRxCpltCallback>:
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop

08006c3c <HAL_I2C_SlaveTxCpltCallback>:
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop

08006c40 <HAL_I2C_SlaveRxCpltCallback>:
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop

08006c44 <I2C_ITSlaveSeqCplt>:
{
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	4603      	mov	r3, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c48:	2000      	movs	r0, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	6811      	ldr	r1, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c4e:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006c52:	0448      	lsls	r0, r1, #17
 8006c54:	d50c      	bpl.n	8006c70 <I2C_ITSlaveSeqCplt+0x2c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c56:	6811      	ldr	r1, [r2, #0]
 8006c58:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8006c5c:	6011      	str	r1, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006c5e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8006c62:	2a29      	cmp	r2, #41	; 0x29
 8006c64:	d00e      	beq.n	8006c84 <I2C_ITSlaveSeqCplt+0x40>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c66:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8006c6a:	2a2a      	cmp	r2, #42	; 0x2a
 8006c6c:	d024      	beq.n	8006cb8 <I2C_ITSlaveSeqCplt+0x74>
}
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006c70:	0409      	lsls	r1, r1, #16
 8006c72:	d5f4      	bpl.n	8006c5e <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c74:	6811      	ldr	r1, [r2, #0]
 8006c76:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8006c7a:	6011      	str	r1, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006c7c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8006c80:	2a29      	cmp	r2, #41	; 0x29
 8006c82:	d1f0      	bne.n	8006c66 <I2C_ITSlaveSeqCplt+0x22>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c84:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c86:	2221      	movs	r2, #33	; 0x21
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c88:	681c      	ldr	r4, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8006c8a:	2500      	movs	r5, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c8c:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c90:	4618      	mov	r0, r3
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c92:	631a      	str	r2, [r3, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c94:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c98:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c9a:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8006c9e:	2928      	cmp	r1, #40	; 0x28
 8006ca0:	bf14      	ite	ne
 8006ca2:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 8006ca6:	f06f 0142 	mvneq.w	r1, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006caa:	400a      	ands	r2, r1
 8006cac:	6022      	str	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8006cae:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006cb2:	f7ff ffc3 	bl	8006c3c <HAL_I2C_SlaveTxCpltCallback>
}
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006cb8:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cba:	2222      	movs	r2, #34	; 0x22
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006cbc:	681c      	ldr	r4, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8006cbe:	2500      	movs	r5, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006cc0:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006cc4:	4618      	mov	r0, r3
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cc8:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006ccc:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cce:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8006cd2:	2928      	cmp	r1, #40	; 0x28
 8006cd4:	bf14      	ite	ne
 8006cd6:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8006cda:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006cde:	400a      	ands	r2, r1
 8006ce0:	6022      	str	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8006ce2:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ce6:	f7ff ffab 	bl	8006c40 <HAL_I2C_SlaveRxCpltCallback>
}
 8006cea:	bd38      	pop	{r3, r4, r5, pc}

08006cec <HAL_I2C_AddrCallback>:
}
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop

08006cf0 <I2C_ITAddrCplt.isra.9.part.10>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8006cf2:	6804      	ldr	r4, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cf4:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8006cf6:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006cf8:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cfa:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006cfc:	68a6      	ldr	r6, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 8006cfe:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006d02:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006d06:	68e7      	ldr	r7, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006d08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d0c:	d10d      	bne.n	8006d2a <I2C_ITAddrCplt.isra.9.part.10+0x3a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006d0e:	f3c6 0609 	ubfx	r6, r6, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8006d12:	ea82 13d6 	eor.w	r3, r2, r6, lsr #7
 8006d16:	f013 0306 	ands.w	r3, r3, #6
 8006d1a:	d110      	bne.n	8006d3e <I2C_ITAddrCplt.isra.9.part.10+0x4e>
        hi2c->AddrEventCount++;
 8006d1c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006d1e:	3201      	adds	r2, #1
 8006d20:	6482      	str	r2, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006d22:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006d24:	2a02      	cmp	r2, #2
 8006d26:	d016      	beq.n	8006d56 <I2C_ITAddrCplt.isra.9.part.10+0x66>
}
 8006d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006d2a:	6823      	ldr	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8006d2c:	2600      	movs	r6, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006d2e:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8006d32:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8006d34:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d38:	f7ff ffd8 	bl	8006cec <HAL_I2C_AddrCallback>
}
 8006d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006d3e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);
 8006d40:	2600      	movs	r6, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d42:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006d46:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8006d4a:	6023      	str	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);
 8006d4c:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d50:	f7ff ffcc 	bl	8006cec <HAL_I2C_AddrCallback>
}
 8006d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d56:	2708      	movs	r7, #8
          hi2c->AddrEventCount = 0U;
 8006d58:	6483      	str	r3, [r0, #72]	; 0x48
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d5a:	4632      	mov	r2, r6
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d5c:	61e7      	str	r7, [r4, #28]
          __HAL_UNLOCK(hi2c);
 8006d5e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d62:	f7ff ffc3 	bl	8006cec <HAL_I2C_AddrCallback>
}
 8006d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d68 <HAL_I2C_ListenCpltCallback>:
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop

08006d6c <HAL_I2C_MemTxCpltCallback>:
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop

08006d70 <HAL_I2C_MemRxCpltCallback>:
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop

08006d74 <HAL_I2C_ErrorCallback>:
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop

08006d78 <HAL_I2C_AbortCpltCallback>:
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop

08006d7c <I2C_DMAAbort>:
{
 8006d7c:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d7e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8006d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d82:	b10a      	cbz	r2, 8006d88 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006d84:	2100      	movs	r1, #0
 8006d86:	6511      	str	r1, [r2, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8006d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d8a:	b10a      	cbz	r2, 8006d90 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	6511      	str	r1, [r2, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d90:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8006d94:	2a60      	cmp	r2, #96	; 0x60
 8006d96:	d007      	beq.n	8006da8 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d98:	2200      	movs	r2, #0
    HAL_I2C_ErrorCallback(hi2c);
 8006d9a:	4618      	mov	r0, r3
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d9c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006da2:	f7ff ffe7 	bl	8006d74 <HAL_I2C_ErrorCallback>
}
 8006da6:	bd08      	pop	{r3, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 8006da8:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006daa:	2120      	movs	r1, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8006dac:	4618      	mov	r0, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8006dae:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8006db6:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8006db8:	f7ff ffde 	bl	8006d78 <HAL_I2C_AbortCpltCallback>
}
 8006dbc:	bd08      	pop	{r3, pc}
 8006dbe:	bf00      	nop

08006dc0 <I2C_ITError>:
{
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006dc4:	2200      	movs	r2, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006dc6:	484c      	ldr	r0, [pc, #304]	; (8006ef8 <I2C_ITError+0x138>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006dc8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006dcc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006dd0:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006dd2:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006dd4:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8006dd6:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	6820      	ldr	r0, [r4, #0]
  hi2c->ErrorCode |= ErrorCode;
 8006ddc:	ea41 0102 	orr.w	r1, r1, r2
 8006de0:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006de2:	d830      	bhi.n	8006e46 <I2C_ITError+0x86>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006de4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006de8:	2628      	movs	r6, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dea:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dee:	4032      	ands	r2, r6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006df0:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006df2:	4031      	ands	r1, r6
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006df4:	4d41      	ldr	r5, [pc, #260]	; (8006efc <I2C_ITError+0x13c>)
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006df6:	42b2      	cmp	r2, r6
 8006df8:	bf14      	ite	ne
 8006dfa:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 8006dfe:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e02:	42b1      	cmp	r1, r6
 8006e04:	bf18      	it	ne
 8006e06:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	6003      	str	r3, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e0e:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006e12:	6365      	str	r5, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8006e14:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 8006e16:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8006e18:	b118      	cbz	r0, 8006e22 <I2C_ITError+0x62>
 8006e1a:	2b11      	cmp	r3, #17
 8006e1c:	d025      	beq.n	8006e6a <I2C_ITError+0xaa>
 8006e1e:	2b21      	cmp	r3, #33	; 0x21
 8006e20:	d023      	beq.n	8006e6a <I2C_ITError+0xaa>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8006e22:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006e24:	b118      	cbz	r0, 8006e2e <I2C_ITError+0x6e>
 8006e26:	2b12      	cmp	r3, #18
 8006e28:	d037      	beq.n	8006e9a <I2C_ITError+0xda>
 8006e2a:	2b22      	cmp	r3, #34	; 0x22
 8006e2c:	d035      	beq.n	8006e9a <I2C_ITError+0xda>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e2e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006e32:	2b60      	cmp	r3, #96	; 0x60
 8006e34:	d054      	beq.n	8006ee0 <I2C_ITError+0x120>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e36:	2300      	movs	r3, #0
    HAL_I2C_ErrorCallback(hi2c);
 8006e38:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e3a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e3c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006e40:	f7ff ff98 	bl	8006d74 <HAL_I2C_ErrorCallback>
}
 8006e44:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e46:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e4a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e4e:	6803      	ldr	r3, [r0, #0]
 8006e50:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006e54:	6003      	str	r3, [r0, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006e56:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006e5a:	2b60      	cmp	r3, #96	; 0x60
 8006e5c:	d002      	beq.n	8006e64 <I2C_ITError+0xa4>
      hi2c->State         = HAL_I2C_STATE_READY;
 8006e5e:	2320      	movs	r3, #32
 8006e60:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	6363      	str	r3, [r4, #52]	; 0x34
 8006e68:	e7d4      	b.n	8006e14 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	0451      	lsls	r1, r2, #17
 8006e70:	d430      	bmi.n	8006ed4 <I2C_ITError+0x114>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e72:	f7fd fe25 	bl	8004ac0 <HAL_DMA_GetState>
 8006e76:	2801      	cmp	r0, #1
 8006e78:	d0d9      	beq.n	8006e2e <I2C_ITError+0x6e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8006e7c:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e7e:	4920      	ldr	r1, [pc, #128]	; (8006f00 <I2C_ITError+0x140>)
 8006e80:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8006e82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e86:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006e88:	f7fd f8c2 	bl	8004010 <HAL_DMA_Abort_IT>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d0d9      	beq.n	8006e44 <I2C_ITError+0x84>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e90:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8006e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e96:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006e98:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	0412      	lsls	r2, r2, #16
 8006ea0:	d504      	bpl.n	8006eac <I2C_ITError+0xec>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006eac:	f7fd fe08 	bl	8004ac0 <HAL_DMA_GetState>
 8006eb0:	2801      	cmp	r0, #1
 8006eb2:	d0bc      	beq.n	8006e2e <I2C_ITError+0x6e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006eb4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 8006eb6:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006eb8:	4911      	ldr	r1, [pc, #68]	; (8006f00 <I2C_ITError+0x140>)
 8006eba:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8006ebc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ec0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006ec2:	f7fd f8a5 	bl	8004010 <HAL_DMA_Abort_IT>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d0bc      	beq.n	8006e44 <I2C_ITError+0x84>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006eca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8006ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ed0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006ed2:	4718      	bx	r3
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006ede:	e7c8      	b.n	8006e72 <I2C_ITError+0xb2>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ee0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006ee2:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ee4:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8006ee6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006eea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8006eee:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ef0:	f7ff ff42 	bl	8006d78 <HAL_I2C_AbortCpltCallback>
}
 8006ef4:	bd70      	pop	{r4, r5, r6, pc}
 8006ef6:	bf00      	nop
 8006ef8:	ffff0000 	.word	0xffff0000
 8006efc:	080070b1 	.word	0x080070b1
 8006f00:	08006d7d 	.word	0x08006d7d

08006f04 <I2C_ITSlaveCplt>:
{
 8006f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f06:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006f08:	6802      	ldr	r2, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f0a:	2620      	movs	r6, #32
{
 8006f0c:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006f0e:	6810      	ldr	r0, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006f10:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f14:	61d6      	str	r6, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f16:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006f1a:	6821      	ldr	r1, [r4, #0]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f1c:	2b21      	cmp	r3, #33	; 0x21
 8006f1e:	d165      	bne.n	8006fec <I2C_ITSlaveCplt+0xe8>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f20:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006f24:	680a      	ldr	r2, [r1, #0]
 8006f26:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
 8006f2a:	600a      	str	r2, [r1, #0]
 8006f2c:	6821      	ldr	r1, [r4, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f2e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f30:	684a      	ldr	r2, [r1, #4]
  I2C_RESET_CR2(hi2c);
 8006f32:	4e5d      	ldr	r6, [pc, #372]	; (80070a8 <I2C_ITSlaveCplt+0x1a4>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f38:	604a      	str	r2, [r1, #4]
  I2C_RESET_CR2(hi2c);
 8006f3a:	6822      	ldr	r2, [r4, #0]
 8006f3c:	6853      	ldr	r3, [r2, #4]
 8006f3e:	4033      	ands	r3, r6
 8006f40:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	699a      	ldr	r2, [r3, #24]
 8006f46:	0792      	lsls	r2, r2, #30
 8006f48:	d502      	bpl.n	8006f50 <I2C_ITSlaveCplt+0x4c>
    hi2c->Instance->TXDR = 0x00U;
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	629a      	str	r2, [r3, #40]	; 0x28
 8006f4e:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f50:	699a      	ldr	r2, [r3, #24]
 8006f52:	07d7      	lsls	r7, r2, #31
 8006f54:	d403      	bmi.n	8006f5e <I2C_ITSlaveCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f56:	699a      	ldr	r2, [r3, #24]
 8006f58:	f042 0201 	orr.w	r2, r2, #1
 8006f5c:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f5e:	0446      	lsls	r6, r0, #17
 8006f60:	d539      	bpl.n	8006fd6 <I2C_ITSlaveCplt+0xd2>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f62:	6822      	ldr	r2, [r4, #0]
 8006f64:	6813      	ldr	r3, [r2, #0]
 8006f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f6a:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8006f6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f6e:	b11b      	cbz	r3, 8006f78 <I2C_ITSlaveCplt+0x74>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	6853      	ldr	r3, [r2, #4]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006f78:	0769      	lsls	r1, r5, #29
 8006f7a:	d50b      	bpl.n	8006f94 <I2C_ITSlaveCplt+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f7c:	6822      	ldr	r2, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006f7e:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006f8a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006f90:	2a00      	cmp	r2, #0
 8006f92:	d144      	bne.n	800701e <I2C_ITSlaveCplt+0x11a>
  if (hi2c->XferCount != 0U)
 8006f94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	b11b      	cbz	r3, 8006fa2 <I2C_ITSlaveCplt+0x9e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f9c:	f043 0304 	orr.w	r3, r3, #4
 8006fa0:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa2:	2700      	movs	r7, #0
 8006fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fa8:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8006faa:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fac:	2e00      	cmp	r6, #0
 8006fae:	d13d      	bne.n	800702c <I2C_ITSlaveCplt+0x128>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006fb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006fb2:	4d3e      	ldr	r5, [pc, #248]	; (80070ac <I2C_ITSlaveCplt+0x1a8>)
 8006fb4:	42ab      	cmp	r3, r5
 8006fb6:	d124      	bne.n	8007002 <I2C_ITSlaveCplt+0xfe>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fb8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006fbc:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8006fbe:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fc2:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 8006fc4:	f04f 0320 	mov.w	r3, #32
 8006fc8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fcc:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fce:	d066      	beq.n	800709e <I2C_ITSlaveCplt+0x19a>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006fd0:	f7ff fe34 	bl	8006c3c <HAL_I2C_SlaveTxCpltCallback>
}
 8006fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006fd6:	0400      	lsls	r0, r0, #16
 8006fd8:	d5ce      	bpl.n	8006f78 <I2C_ITSlaveCplt+0x74>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006fda:	6822      	ldr	r2, [r4, #0]
 8006fdc:	6813      	ldr	r3, [r2, #0]
 8006fde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fe2:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8006fe4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1c2      	bne.n	8006f70 <I2C_ITSlaveCplt+0x6c>
 8006fea:	e7c5      	b.n	8006f78 <I2C_ITSlaveCplt+0x74>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006fec:	2b22      	cmp	r3, #34	; 0x22
 8006fee:	d19f      	bne.n	8006f30 <I2C_ITSlaveCplt+0x2c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ff0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006ff4:	680a      	ldr	r2, [r1, #0]
 8006ff6:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
 8006ffa:	600a      	str	r2, [r1, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ffc:	6323      	str	r3, [r4, #48]	; 0x30
 8006ffe:	6821      	ldr	r1, [r4, #0]
 8007000:	e796      	b.n	8006f30 <I2C_ITSlaveCplt+0x2c>
    I2C_ITSlaveSeqCplt(hi2c);
 8007002:	4620      	mov	r0, r4
 8007004:	f7ff fe1e 	bl	8006c44 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8007008:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800700a:	62e5      	str	r5, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 800700c:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800700e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007012:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8007016:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8007018:	f7ff fea6 	bl	8006d68 <HAL_I2C_ListenCpltCallback>
}
 800701c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferCount--;
 800701e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007020:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007022:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007024:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007026:	b29b      	uxth	r3, r3
 8007028:	8563      	strh	r3, [r4, #42]	; 0x2a
 800702a:	e7b3      	b.n	8006f94 <I2C_ITSlaveCplt+0x90>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800702c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800702e:	4620      	mov	r0, r4
 8007030:	f7ff fec6 	bl	8006dc0 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007034:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007038:	2b28      	cmp	r3, #40	; 0x28
 800703a:	d1cb      	bne.n	8006fd4 <I2C_ITSlaveCplt+0xd0>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800703c:	4b1b      	ldr	r3, [pc, #108]	; (80070ac <I2C_ITSlaveCplt+0x1a8>)
  hi2c->State = HAL_I2C_STATE_READY;
 800703e:	2220      	movs	r2, #32
  hi2c->XferISR = NULL;
 8007040:	6367      	str	r7, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007042:	62e3      	str	r3, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007044:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007046:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800704a:	076a      	lsls	r2, r5, #29
 800704c:	6823      	ldr	r3, [r4, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800704e:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007052:	d512      	bpl.n	800707a <I2C_ITSlaveCplt+0x176>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007058:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800705a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800705c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800705e:	3301      	adds	r3, #1
 8007060:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8007062:	b1fa      	cbz	r2, 80070a4 <I2C_ITSlaveCplt+0x1a0>
      hi2c->XferCount--;
 8007064:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007066:	3a01      	subs	r2, #1
 8007068:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount--;
 800706a:	3901      	subs	r1, #1
      hi2c->XferSize--;
 800706c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800706e:	b28a      	uxth	r2, r1
 8007070:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007072:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007074:	f042 0204 	orr.w	r2, r2, #4
 8007078:	6462      	str	r2, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800707a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800707e:	2510      	movs	r5, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007080:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8007084:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007086:	681a      	ldr	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8007088:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800708a:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 800708e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8007094:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8007098:	f7ff fe66 	bl	8006d68 <HAL_I2C_ListenCpltCallback>
}
 800709c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800709e:	f7ff fdcf 	bl	8006c40 <HAL_I2C_SlaveRxCpltCallback>
}
 80070a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	e7e8      	b.n	800707a <I2C_ITSlaveCplt+0x176>
 80070a8:	fe00e800 	.word	0xfe00e800
 80070ac:	ffff0000 	.word	0xffff0000

080070b0 <I2C_Slave_ISR_IT>:
{
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80070b2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 80070b6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d07f      	beq.n	80071bc <I2C_Slave_ISR_IT+0x10c>
 80070bc:	4616      	mov	r6, r2
 80070be:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80070c0:	068a      	lsls	r2, r1, #26
 80070c2:	4604      	mov	r4, r0
 80070c4:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 80070c6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80070ca:	d501      	bpl.n	80070d0 <I2C_Slave_ISR_IT+0x20>
 80070cc:	06b3      	lsls	r3, r6, #26
 80070ce:	d462      	bmi.n	8007196 <I2C_Slave_ISR_IT+0xe6>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80070d0:	06ea      	lsls	r2, r5, #27
 80070d2:	d51b      	bpl.n	800710c <I2C_Slave_ISR_IT+0x5c>
 80070d4:	06f3      	lsls	r3, r6, #27
 80070d6:	d519      	bpl.n	800710c <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount == 0U)
 80070d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80070da:	6822      	ldr	r2, [r4, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d15e      	bne.n	80071a0 <I2C_Slave_ISR_IT+0xf0>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80070e2:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80070e6:	2928      	cmp	r1, #40	; 0x28
 80070e8:	d102      	bne.n	80070f0 <I2C_Slave_ISR_IT+0x40>
 80070ea:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80070ee:	d07a      	beq.n	80071e6 <I2C_Slave_ISR_IT+0x136>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80070f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80070f4:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070f6:	f04f 0310 	mov.w	r3, #16
 80070fa:	61d3      	str	r3, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80070fc:	d102      	bne.n	8007104 <I2C_Slave_ISR_IT+0x54>
 80070fe:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8007102:	d161      	bne.n	80071c8 <I2C_Slave_ISR_IT+0x118>
  __HAL_UNLOCK(hi2c);
 8007104:	2000      	movs	r0, #0
 8007106:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800710a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800710c:	076a      	lsls	r2, r5, #29
 800710e:	d40e      	bmi.n	800712e <I2C_Slave_ISR_IT+0x7e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007110:	0728      	lsls	r0, r5, #28
 8007112:	d52a      	bpl.n	800716a <I2C_Slave_ISR_IT+0xba>
 8007114:	0731      	lsls	r1, r6, #28
 8007116:	d528      	bpl.n	800716a <I2C_Slave_ISR_IT+0xba>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007118:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800711c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007120:	2b28      	cmp	r3, #40	; 0x28
 8007122:	f000 8090 	beq.w	8007246 <I2C_Slave_ISR_IT+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	2208      	movs	r2, #8
 800712a:	61da      	str	r2, [r3, #28]
 800712c:	e7ea      	b.n	8007104 <I2C_Slave_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800712e:	0773      	lsls	r3, r6, #29
 8007130:	d5ee      	bpl.n	8007110 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount > 0U)
 8007132:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007134:	b29b      	uxth	r3, r3
 8007136:	b16b      	cbz	r3, 8007154 <I2C_Slave_ISR_IT+0xa4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007138:	6822      	ldr	r2, [r4, #0]
 800713a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800713c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800713e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8007140:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8007142:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007144:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007146:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8007148:	3101      	adds	r1, #1
      hi2c->XferCount--;
 800714a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800714c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800714e:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007150:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007152:	8522      	strh	r2, [r4, #40]	; 0x28
    if ((hi2c->XferCount == 0U) && \
 8007154:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007156:	b29b      	uxth	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1d3      	bne.n	8007104 <I2C_Slave_ISR_IT+0x54>
 800715c:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8007160:	d0d0      	beq.n	8007104 <I2C_Slave_ISR_IT+0x54>
        I2C_ITSlaveSeqCplt(hi2c);
 8007162:	4620      	mov	r0, r4
 8007164:	f7ff fd6e 	bl	8006c44 <I2C_ITSlaveSeqCplt>
 8007168:	e7cc      	b.n	8007104 <I2C_Slave_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800716a:	07aa      	lsls	r2, r5, #30
 800716c:	d5ca      	bpl.n	8007104 <I2C_Slave_ISR_IT+0x54>
 800716e:	07b3      	lsls	r3, r6, #30
 8007170:	d5c8      	bpl.n	8007104 <I2C_Slave_ISR_IT+0x54>
    if (hi2c->XferCount > 0U)
 8007172:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007174:	b29b      	uxth	r3, r3
 8007176:	b31b      	cbz	r3, 80071c0 <I2C_Slave_ISR_IT+0x110>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007178:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	7812      	ldrb	r2, [r2, #0]
 800717e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007180:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8007182:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007184:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007186:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8007188:	3101      	adds	r1, #1
      hi2c->XferCount--;
 800718a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800718c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800718e:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007190:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007192:	8522      	strh	r2, [r4, #40]	; 0x28
 8007194:	e7b6      	b.n	8007104 <I2C_Slave_ISR_IT+0x54>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007196:	f7ff feb5 	bl	8006f04 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800719a:	06ea      	lsls	r2, r5, #27
 800719c:	d5b6      	bpl.n	800710c <I2C_Slave_ISR_IT+0x5c>
 800719e:	e799      	b.n	80070d4 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071a0:	2310      	movs	r3, #16
 80071a2:	61d3      	str	r3, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80071a6:	f043 0304 	orr.w	r3, r3, #4
 80071aa:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80071ac:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 80071b0:	d1a8      	bne.n	8007104 <I2C_Slave_ISR_IT+0x54>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80071b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80071b4:	4620      	mov	r0, r4
 80071b6:	f7ff fe03 	bl	8006dc0 <I2C_ITError>
 80071ba:	e7a3      	b.n	8007104 <I2C_Slave_ISR_IT+0x54>
  __HAL_LOCK(hi2c);
 80071bc:	2002      	movs	r0, #2
}
 80071be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80071c0:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 80071c4:	d19e      	bne.n	8007104 <I2C_Slave_ISR_IT+0x54>
 80071c6:	e7cc      	b.n	8007162 <I2C_Slave_ISR_IT+0xb2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	699a      	ldr	r2, [r3, #24]
 80071cc:	0790      	lsls	r0, r2, #30
 80071ce:	d502      	bpl.n	80071d6 <I2C_Slave_ISR_IT+0x126>
    hi2c->Instance->TXDR = 0x00U;
 80071d0:	2200      	movs	r2, #0
 80071d2:	629a      	str	r2, [r3, #40]	; 0x28
 80071d4:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071d6:	699a      	ldr	r2, [r3, #24]
 80071d8:	07d1      	lsls	r1, r2, #31
 80071da:	d4c2      	bmi.n	8007162 <I2C_Slave_ISR_IT+0xb2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071dc:	699a      	ldr	r2, [r3, #24]
 80071de:	f042 0201 	orr.w	r2, r2, #1
 80071e2:	619a      	str	r2, [r3, #24]
 80071e4:	e7bd      	b.n	8007162 <I2C_Slave_ISR_IT+0xb2>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071e6:	481b      	ldr	r0, [pc, #108]	; (8007254 <I2C_Slave_ISR_IT+0x1a4>)
  hi2c->State = HAL_I2C_STATE_READY;
 80071e8:	2120      	movs	r1, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80071ea:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
 80071ec:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071ee:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80071f0:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80071f2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80071fa:	d512      	bpl.n	8007222 <I2C_Slave_ISR_IT+0x172>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80071fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007200:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007202:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8007204:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8007206:	3301      	adds	r3, #1
 8007208:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800720a:	b301      	cbz	r1, 800724e <I2C_Slave_ISR_IT+0x19e>
      hi2c->XferCount--;
 800720c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800720e:	3901      	subs	r1, #1
 8007210:	6822      	ldr	r2, [r4, #0]
      hi2c->XferCount--;
 8007212:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007214:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007216:	b29b      	uxth	r3, r3
 8007218:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800721a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800721c:	f043 0304 	orr.w	r3, r3, #4
 8007220:	6463      	str	r3, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007222:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007226:	2510      	movs	r5, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007228:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 800722c:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800722e:	6813      	ldr	r3, [r2, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8007230:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007232:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007236:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800723c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8007240:	f7ff fd92 	bl	8006d68 <HAL_I2C_ListenCpltCallback>
 8007244:	e75e      	b.n	8007104 <I2C_Slave_ISR_IT+0x54>
 8007246:	4620      	mov	r0, r4
 8007248:	f7ff fd52 	bl	8006cf0 <I2C_ITAddrCplt.isra.9.part.10>
 800724c:	e75a      	b.n	8007104 <I2C_Slave_ISR_IT+0x54>
 800724e:	6822      	ldr	r2, [r4, #0]
 8007250:	e7e7      	b.n	8007222 <I2C_Slave_ISR_IT+0x172>
 8007252:	bf00      	nop
 8007254:	ffff0000 	.word	0xffff0000

08007258 <I2C_Slave_ISR_DMA>:
{
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800725a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 800725e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8007260:	2b01      	cmp	r3, #1
 8007262:	f000 80b0 	beq.w	80073c6 <I2C_Slave_ISR_DMA+0x16e>
 8007266:	4615      	mov	r5, r2
 8007268:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800726a:	068a      	lsls	r2, r1, #26
 800726c:	4604      	mov	r4, r0
 800726e:	460e      	mov	r6, r1
  __HAL_LOCK(hi2c);
 8007270:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007274:	d502      	bpl.n	800727c <I2C_Slave_ISR_DMA+0x24>
 8007276:	06ab      	lsls	r3, r5, #26
 8007278:	f100 8081 	bmi.w	800737e <I2C_Slave_ISR_DMA+0x126>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800727c:	06f1      	lsls	r1, r6, #27
 800727e:	d56d      	bpl.n	800735c <I2C_Slave_ISR_DMA+0x104>
 8007280:	06ea      	lsls	r2, r5, #27
 8007282:	d56b      	bpl.n	800735c <I2C_Slave_ISR_DMA+0x104>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007284:	0bab      	lsrs	r3, r5, #14
 8007286:	6822      	ldr	r2, [r4, #0]
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007288:	0bed      	lsrs	r5, r5, #15
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800728a:	f003 0001 	and.w	r0, r3, #1
 800728e:	432b      	orrs	r3, r5
 8007290:	07db      	lsls	r3, r3, #31
 8007292:	d579      	bpl.n	8007388 <I2C_Slave_ISR_DMA+0x130>
 8007294:	e9d4 130e 	ldrd	r1, r3, [r4, #56]	; 0x38
      if (hi2c->hdmarx != NULL)
 8007298:	b1bb      	cbz	r3, 80072ca <I2C_Slave_ISR_DMA+0x72>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800729a:	07ed      	lsls	r5, r5, #31
 800729c:	d515      	bpl.n	80072ca <I2C_Slave_ISR_DMA+0x72>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800729e:	f8df e180 	ldr.w	lr, [pc, #384]	; 8007420 <I2C_Slave_ISR_DMA+0x1c8>
 80072a2:	681d      	ldr	r5, [r3, #0]
 80072a4:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80072a8:	686b      	ldr	r3, [r5, #4]
 80072aa:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80072ae:	fab3 f383 	clz	r3, r3
 80072b2:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80072b6:	095b      	lsrs	r3, r3, #5
 80072b8:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 80072bc:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80072c0:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 809a 	bne.w	80073fe <I2C_Slave_ISR_DMA+0x1a6>
      if (hi2c->hdmatx != NULL)
 80072ca:	2900      	cmp	r1, #0
 80072cc:	d07f      	beq.n	80073ce <I2C_Slave_ISR_DMA+0x176>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d07d      	beq.n	80073ce <I2C_Slave_ISR_DMA+0x176>
 80072d2:	2000      	movs	r0, #0
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80072d4:	6809      	ldr	r1, [r1, #0]
 80072d6:	684b      	ldr	r3, [r1, #4]
 80072d8:	fab3 f383 	clz	r3, r3
 80072dc:	095b      	lsrs	r3, r3, #5
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d073      	beq.n	80073ca <I2C_Slave_ISR_DMA+0x172>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80072e2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80072e6:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	d14f      	bne.n	800738e <I2C_Slave_ISR_DMA+0x136>
 80072ee:	2b28      	cmp	r3, #40	; 0x28
 80072f0:	d14d      	bne.n	800738e <I2C_Slave_ISR_DMA+0x136>
  hi2c->PreviousState = I2C_STATE_NONE;
 80072f2:	2300      	movs	r3, #0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072f4:	4849      	ldr	r0, [pc, #292]	; (800741c <I2C_Slave_ISR_DMA+0x1c4>)
  hi2c->State = HAL_I2C_STATE_READY;
 80072f6:	2120      	movs	r1, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80072f8:	0775      	lsls	r5, r6, #29
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072fa:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferISR = NULL;
 80072fc:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->PreviousState = I2C_STATE_NONE;
 80072fe:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007300:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007308:	d513      	bpl.n	8007332 <I2C_Slave_ISR_DMA+0xda>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800730a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800730c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800730e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007310:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8007312:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8007314:	3301      	adds	r3, #1
 8007316:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8007318:	2a00      	cmp	r2, #0
 800731a:	d07c      	beq.n	8007416 <I2C_Slave_ISR_DMA+0x1be>
      hi2c->XferCount--;
 800731c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800731e:	1e53      	subs	r3, r2, #1
 8007320:	6822      	ldr	r2, [r4, #0]
      hi2c->XferCount--;
 8007322:	3901      	subs	r1, #1
      hi2c->XferSize--;
 8007324:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007326:	b28b      	uxth	r3, r1
 8007328:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800732a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800732c:	f043 0304 	orr.w	r3, r3, #4
 8007330:	6463      	str	r3, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007332:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007336:	2510      	movs	r5, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007338:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 800733c:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800733e:	6813      	ldr	r3, [r2, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8007340:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007342:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007346:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800734c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8007350:	f7ff fd0a 	bl	8006d68 <HAL_I2C_ListenCpltCallback>
  __HAL_UNLOCK(hi2c);
 8007354:	2000      	movs	r0, #0
 8007356:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800735a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800735c:	0732      	lsls	r2, r6, #28
 800735e:	d5f9      	bpl.n	8007354 <I2C_Slave_ISR_DMA+0xfc>
 8007360:	072b      	lsls	r3, r5, #28
 8007362:	d5f7      	bpl.n	8007354 <I2C_Slave_ISR_DMA+0xfc>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007364:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007368:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800736c:	2b28      	cmp	r3, #40	; 0x28
 800736e:	d04e      	beq.n	800740e <I2C_Slave_ISR_DMA+0x1b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	2208      	movs	r2, #8
  __HAL_UNLOCK(hi2c);
 8007374:	2000      	movs	r0, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007376:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8007378:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 800737c:	e7ed      	b.n	800735a <I2C_Slave_ISR_DMA+0x102>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800737e:	f7ff fdc1 	bl	8006f04 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007382:	06f1      	lsls	r1, r6, #27
 8007384:	d5ea      	bpl.n	800735c <I2C_Slave_ISR_DMA+0x104>
 8007386:	e77b      	b.n	8007280 <I2C_Slave_ISR_DMA+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007388:	2310      	movs	r3, #16
 800738a:	61d3      	str	r3, [r2, #28]
 800738c:	e7e2      	b.n	8007354 <I2C_Slave_ISR_DMA+0xfc>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800738e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007392:	2b29      	cmp	r3, #41	; 0x29
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007394:	f04f 0310 	mov.w	r3, #16
 8007398:	61d3      	str	r3, [r2, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800739a:	d1db      	bne.n	8007354 <I2C_Slave_ISR_DMA+0xfc>
 800739c:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80073a0:	d0d8      	beq.n	8007354 <I2C_Slave_ISR_DMA+0xfc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	0790      	lsls	r0, r2, #30
 80073a8:	d502      	bpl.n	80073b0 <I2C_Slave_ISR_DMA+0x158>
    hi2c->Instance->TXDR = 0x00U;
 80073aa:	2200      	movs	r2, #0
 80073ac:	629a      	str	r2, [r3, #40]	; 0x28
 80073ae:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	07d1      	lsls	r1, r2, #31
 80073b4:	d403      	bmi.n	80073be <I2C_Slave_ISR_DMA+0x166>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80073b6:	699a      	ldr	r2, [r3, #24]
 80073b8:	f042 0201 	orr.w	r2, r2, #1
 80073bc:	619a      	str	r2, [r3, #24]
          I2C_ITSlaveSeqCplt(hi2c);
 80073be:	4620      	mov	r0, r4
 80073c0:	f7ff fc40 	bl	8006c44 <I2C_ITSlaveSeqCplt>
 80073c4:	e7c6      	b.n	8007354 <I2C_Slave_ISR_DMA+0xfc>
  __HAL_LOCK(hi2c);
 80073c6:	2002      	movs	r0, #2
}
 80073c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (treatdmanack == 1U)
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d189      	bne.n	80072e2 <I2C_Slave_ISR_DMA+0x8a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ce:	2310      	movs	r3, #16
 80073d0:	61d3      	str	r3, [r2, #28]
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80073d2:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80073d8:	f043 0304 	orr.w	r3, r3, #4
 80073dc:	6463      	str	r3, [r4, #68]	; 0x44
        tmpstate = hi2c->State;
 80073de:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80073e2:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80073e4:	d1b6      	bne.n	8007354 <I2C_Slave_ISR_DMA+0xfc>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80073e6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 80073ea:	2b21      	cmp	r3, #33	; 0x21
 80073ec:	d001      	beq.n	80073f2 <I2C_Slave_ISR_DMA+0x19a>
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80073ee:	2b22      	cmp	r3, #34	; 0x22
 80073f0:	d100      	bne.n	80073f4 <I2C_Slave_ISR_DMA+0x19c>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80073f2:	6323      	str	r3, [r4, #48]	; 0x30
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80073f4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80073f6:	4620      	mov	r0, r4
 80073f8:	f7ff fce2 	bl	8006dc0 <I2C_ITError>
 80073fc:	e7aa      	b.n	8007354 <I2C_Slave_ISR_DMA+0xfc>
      if (hi2c->hdmatx != NULL)
 80073fe:	2900      	cmp	r1, #0
 8007400:	f43f af6f 	beq.w	80072e2 <I2C_Slave_ISR_DMA+0x8a>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007404:	2800      	cmp	r0, #0
 8007406:	f43f af6c 	beq.w	80072e2 <I2C_Slave_ISR_DMA+0x8a>
            treatdmanack = 1U;
 800740a:	2001      	movs	r0, #1
 800740c:	e762      	b.n	80072d4 <I2C_Slave_ISR_DMA+0x7c>
 800740e:	4620      	mov	r0, r4
 8007410:	f7ff fc6e 	bl	8006cf0 <I2C_ITAddrCplt.isra.9.part.10>
 8007414:	e79e      	b.n	8007354 <I2C_Slave_ISR_DMA+0xfc>
 8007416:	6822      	ldr	r2, [r4, #0]
 8007418:	e78b      	b.n	8007332 <I2C_Slave_ISR_DMA+0xda>
 800741a:	bf00      	nop
 800741c:	ffff0000 	.word	0xffff0000
 8007420:	40020028 	.word	0x40020028

08007424 <I2C_DMAMasterTransmitCplt>:
{
 8007424:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007426:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007428:	6822      	ldr	r2, [r4, #0]
 800742a:	6813      	ldr	r3, [r2, #0]
 800742c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007430:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8007432:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007434:	b29b      	uxth	r3, r3
 8007436:	b963      	cbnz	r3, 8007452 <I2C_DMAMasterTransmitCplt+0x2e>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007438:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800743a:	4a1e      	ldr	r2, [pc, #120]	; (80074b4 <I2C_DMAMasterTransmitCplt+0x90>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d02b      	beq.n	8007498 <I2C_DMAMasterTransmitCplt+0x74>
 8007440:	4a1d      	ldr	r2, [pc, #116]	; (80074b8 <I2C_DMAMasterTransmitCplt+0x94>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d028      	beq.n	8007498 <I2C_DMAMasterTransmitCplt+0x74>
      tmpisr |= I2C_IT_STOPI;
 8007446:	2120      	movs	r1, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007448:	6822      	ldr	r2, [r4, #0]
 800744a:	6813      	ldr	r3, [r2, #0]
 800744c:	430b      	orrs	r3, r1
 800744e:	6013      	str	r3, [r2, #0]
}
 8007450:	bd10      	pop	{r4, pc}
    hi2c->pBuffPtr += hi2c->XferSize;
 8007452:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007454:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007456:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8007458:	4411      	add	r1, r2
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800745a:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr += hi2c->XferSize;
 800745c:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800745e:	d818      	bhi.n	8007492 <I2C_DMAMasterTransmitCplt+0x6e>
      hi2c->XferSize = hi2c->XferCount;
 8007460:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8007462:	b280      	uxth	r0, r0
 8007464:	4603      	mov	r3, r0
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8007466:	6822      	ldr	r2, [r4, #0]
 8007468:	8520      	strh	r0, [r4, #40]	; 0x28
 800746a:	3228      	adds	r2, #40	; 0x28
 800746c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800746e:	f7fc f8d5 	bl	800361c <HAL_DMA_Start_IT>
 8007472:	b9c8      	cbnz	r0, 80074a8 <I2C_DMAMasterTransmitCplt+0x84>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007474:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007476:	4a10      	ldr	r2, [pc, #64]	; (80074b8 <I2C_DMAMasterTransmitCplt+0x94>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00f      	beq.n	800749c <I2C_DMAMasterTransmitCplt+0x78>
 800747c:	4a0d      	ldr	r2, [pc, #52]	; (80074b4 <I2C_DMAMasterTransmitCplt+0x90>)
 800747e:	1a9b      	subs	r3, r3, r2
 8007480:	fab3 f383 	clz	r3, r3
 8007484:	095b      	lsrs	r3, r3, #5
 8007486:	b94b      	cbnz	r3, 800749c <I2C_DMAMasterTransmitCplt+0x78>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007488:	6821      	ldr	r1, [r4, #0]
 800748a:	680a      	ldr	r2, [r1, #0]
 800748c:	4313      	orrs	r3, r2
 800748e:	600b      	str	r3, [r1, #0]
}
 8007490:	bd10      	pop	{r4, pc}
 8007492:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007494:	4618      	mov	r0, r3
 8007496:	e7e6      	b.n	8007466 <I2C_DMAMasterTransmitCplt+0x42>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007498:	2160      	movs	r1, #96	; 0x60
 800749a:	e7d5      	b.n	8007448 <I2C_DMAMasterTransmitCplt+0x24>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800749c:	6821      	ldr	r1, [r4, #0]
      tmpisr |= I2C_IT_TCI;
 800749e:	2340      	movs	r3, #64	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80074a0:	680a      	ldr	r2, [r1, #0]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	600b      	str	r3, [r1, #0]
 80074a6:	e7f3      	b.n	8007490 <I2C_DMAMasterTransmitCplt+0x6c>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80074a8:	4620      	mov	r0, r4
 80074aa:	2110      	movs	r1, #16
}
 80074ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80074b0:	f7ff bc86 	b.w	8006dc0 <I2C_ITError>
 80074b4:	08007259 	.word	0x08007259
 80074b8:	08007a05 	.word	0x08007a05

080074bc <I2C_ITMasterCplt>:
{
 80074bc:	b570      	push	{r4, r5, r6, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074be:	2220      	movs	r2, #32
 80074c0:	6803      	ldr	r3, [r0, #0]
{
 80074c2:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074c4:	61da      	str	r2, [r3, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80074c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80074ca:	2b21      	cmp	r3, #33	; 0x21
 80074cc:	f000 80a8 	beq.w	8007620 <I2C_ITMasterCplt+0x164>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80074d0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80074d4:	2b22      	cmp	r3, #34	; 0x22
 80074d6:	f000 808d 	beq.w	80075f4 <I2C_ITMasterCplt+0x138>
  I2C_RESET_CR2(hi2c);
 80074da:	6822      	ldr	r2, [r4, #0]
  hi2c->XferISR       = NULL;
 80074dc:	2500      	movs	r5, #0
  I2C_RESET_CR2(hi2c);
 80074de:	4890      	ldr	r0, [pc, #576]	; (8007720 <I2C_ITMasterCplt+0x264>)
 80074e0:	6853      	ldr	r3, [r2, #4]
 80074e2:	4003      	ands	r3, r0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80074e4:	488f      	ldr	r0, [pc, #572]	; (8007724 <I2C_ITMasterCplt+0x268>)
  I2C_RESET_CR2(hi2c);
 80074e6:	6053      	str	r3, [r2, #4]
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80074e8:	06cb      	lsls	r3, r1, #27
  hi2c->XferISR       = NULL;
 80074ea:	6365      	str	r5, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80074ec:	62e0      	str	r0, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80074ee:	d506      	bpl.n	80074fe <I2C_ITMasterCplt+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	2210      	movs	r2, #16
 80074f4:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80074f8:	f043 0304 	orr.w	r3, r3, #4
 80074fc:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80074fe:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	2a60      	cmp	r2, #96	; 0x60
 8007506:	f000 8086 	beq.w	8007616 <I2C_ITMasterCplt+0x15a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800750a:	699a      	ldr	r2, [r3, #24]
 800750c:	0795      	lsls	r5, r2, #30
 800750e:	d502      	bpl.n	8007516 <I2C_ITMasterCplt+0x5a>
    hi2c->Instance->TXDR = 0x00U;
 8007510:	2200      	movs	r2, #0
 8007512:	629a      	str	r2, [r3, #40]	; 0x28
 8007514:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	07d0      	lsls	r0, r2, #31
 800751a:	d403      	bmi.n	8007524 <I2C_ITMasterCplt+0x68>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800751c:	699a      	ldr	r2, [r3, #24]
 800751e:	f042 0201 	orr.w	r2, r2, #1
 8007522:	619a      	str	r2, [r3, #24]
  tmperror = hi2c->ErrorCode;
 8007524:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007526:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800752a:	2a60      	cmp	r2, #96	; 0x60
 800752c:	d00d      	beq.n	800754a <I2C_ITMasterCplt+0x8e>
 800752e:	3300      	adds	r3, #0
 8007530:	bf18      	it	ne
 8007532:	2301      	movne	r3, #1
 8007534:	b94b      	cbnz	r3, 800754a <I2C_ITMasterCplt+0x8e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007536:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800753a:	2a21      	cmp	r2, #33	; 0x21
 800753c:	f000 80ce 	beq.w	80076dc <I2C_ITMasterCplt+0x220>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007540:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007544:	2a22      	cmp	r2, #34	; 0x22
 8007546:	d07c      	beq.n	8007642 <I2C_ITMasterCplt+0x186>
}
 8007548:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800754a:	6c62      	ldr	r2, [r4, #68]	; 0x44
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800754c:	2100      	movs	r1, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800754e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007552:	4874      	ldr	r0, [pc, #464]	; (8007724 <I2C_ITMasterCplt+0x268>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007554:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007558:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800755a:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800755c:	8561      	strh	r1, [r4, #42]	; 0x2a
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800755e:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8007560:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007562:	6821      	ldr	r1, [r4, #0]
 8007564:	ea42 0200 	orr.w	r2, r2, r0
 8007568:	6462      	str	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800756a:	d831      	bhi.n	80075d0 <I2C_ITMasterCplt+0x114>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800756c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007570:	2628      	movs	r6, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007572:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007576:	4032      	ands	r2, r6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007578:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800757a:	4030      	ands	r0, r6
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800757c:	4d6a      	ldr	r5, [pc, #424]	; (8007728 <I2C_ITMasterCplt+0x26c>)
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800757e:	42b2      	cmp	r2, r6
 8007580:	bf14      	ite	ne
 8007582:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 8007586:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800758a:	42b0      	cmp	r0, r6
 800758c:	bf18      	it	ne
 800758e:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007592:	4013      	ands	r3, r2
 8007594:	600b      	str	r3, [r1, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007596:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800759a:	6365      	str	r5, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 800759c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 800759e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 80075a0:	b118      	cbz	r0, 80075aa <I2C_ITMasterCplt+0xee>
 80075a2:	2b11      	cmp	r3, #17
 80075a4:	d05d      	beq.n	8007662 <I2C_ITMasterCplt+0x1a6>
 80075a6:	2b21      	cmp	r3, #33	; 0x21
 80075a8:	d05b      	beq.n	8007662 <I2C_ITMasterCplt+0x1a6>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 80075aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80075ac:	b118      	cbz	r0, 80075b6 <I2C_ITMasterCplt+0xfa>
 80075ae:	2b12      	cmp	r3, #18
 80075b0:	d075      	beq.n	800769e <I2C_ITMasterCplt+0x1e2>
 80075b2:	2b22      	cmp	r3, #34	; 0x22
 80075b4:	d073      	beq.n	800769e <I2C_ITMasterCplt+0x1e2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80075b6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80075ba:	2b60      	cmp	r3, #96	; 0x60
 80075bc:	f000 809e 	beq.w	80076fc <I2C_ITMasterCplt+0x240>
    hi2c->PreviousState = I2C_STATE_NONE;
 80075c0:	2300      	movs	r3, #0
    HAL_I2C_ErrorCallback(hi2c);
 80075c2:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 80075c4:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80075c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80075ca:	f7ff fbd3 	bl	8006d74 <HAL_I2C_ErrorCallback>
}
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80075d0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80075d4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80075d8:	680b      	ldr	r3, [r1, #0]
 80075da:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80075de:	600b      	str	r3, [r1, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80075e0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80075e4:	2b60      	cmp	r3, #96	; 0x60
 80075e6:	d002      	beq.n	80075ee <I2C_ITMasterCplt+0x132>
      hi2c->State         = HAL_I2C_STATE_READY;
 80075e8:	2320      	movs	r3, #32
 80075ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	6363      	str	r3, [r4, #52]	; 0x34
 80075f2:	e7d3      	b.n	800759c <I2C_ITMasterCplt+0xe0>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80075f4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80075f8:	2512      	movs	r5, #18
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80075fa:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80075fc:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007600:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007602:	2a28      	cmp	r2, #40	; 0x28
 8007604:	bf14      	ite	ne
 8007606:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
 800760a:	f06f 0244 	mvneq.w	r2, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800760e:	4013      	ands	r3, r2
 8007610:	6003      	str	r3, [r0, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007612:	6325      	str	r5, [r4, #48]	; 0x30
 8007614:	e761      	b.n	80074da <I2C_ITMasterCplt+0x1e>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007616:	074e      	lsls	r6, r1, #29
 8007618:	f57f af77 	bpl.w	800750a <I2C_ITMasterCplt+0x4e>
    tmp = (uint8_t)hi2c->Instance->RXDR;
 800761c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800761e:	e774      	b.n	800750a <I2C_ITMasterCplt+0x4e>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007620:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007624:	2511      	movs	r5, #17
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007626:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007628:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800762c:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800762e:	2a28      	cmp	r2, #40	; 0x28
 8007630:	bf14      	ite	ne
 8007632:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
 8007636:	f06f 0242 	mvneq.w	r2, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800763a:	4013      	ands	r3, r2
 800763c:	6003      	str	r3, [r0, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800763e:	6325      	str	r5, [r4, #48]	; 0x30
 8007640:	e74b      	b.n	80074da <I2C_ITMasterCplt+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007642:	2220      	movs	r2, #32
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007644:	4620      	mov	r0, r4
      __HAL_UNLOCK(hi2c);
 8007646:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800764a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800764e:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007650:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007658:	2a40      	cmp	r2, #64	; 0x40
 800765a:	d05d      	beq.n	8007718 <I2C_ITMasterCplt+0x25c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800765c:	f7ff faec 	bl	8006c38 <HAL_I2C_MasterRxCpltCallback>
}
 8007660:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	0451      	lsls	r1, r2, #17
 8007668:	d504      	bpl.n	8007674 <I2C_ITMasterCplt+0x1b8>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007674:	f7fd fa24 	bl	8004ac0 <HAL_DMA_GetState>
 8007678:	2801      	cmp	r0, #1
 800767a:	d09c      	beq.n	80075b6 <I2C_ITMasterCplt+0xfa>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800767c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800767e:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007680:	492a      	ldr	r1, [pc, #168]	; (800772c <I2C_ITMasterCplt+0x270>)
 8007682:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8007684:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007688:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800768a:	f7fc fcc1 	bl	8004010 <HAL_DMA_Abort_IT>
 800768e:	2800      	cmp	r0, #0
 8007690:	f43f af5a 	beq.w	8007548 <I2C_ITMasterCplt+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007694:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8007696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800769a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800769c:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	0412      	lsls	r2, r2, #16
 80076a4:	d504      	bpl.n	80076b0 <I2C_ITMasterCplt+0x1f4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076b0:	f7fd fa06 	bl	8004ac0 <HAL_DMA_GetState>
 80076b4:	2801      	cmp	r0, #1
 80076b6:	f43f af7e 	beq.w	80075b6 <I2C_ITMasterCplt+0xfa>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80076ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 80076bc:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80076be:	491b      	ldr	r1, [pc, #108]	; (800772c <I2C_ITMasterCplt+0x270>)
 80076c0:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80076c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80076c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80076c8:	f7fc fca2 	bl	8004010 <HAL_DMA_Abort_IT>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f43f af3b 	beq.w	8007548 <I2C_ITMasterCplt+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80076d2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 80076d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80076d8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80076da:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 80076dc:	2220      	movs	r2, #32
      HAL_I2C_MemTxCpltCallback(hi2c);
 80076de:	4620      	mov	r0, r4
      __HAL_UNLOCK(hi2c);
 80076e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80076e4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076e8:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076ea:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076f2:	2a40      	cmp	r2, #64	; 0x40
 80076f4:	d00d      	beq.n	8007712 <I2C_ITMasterCplt+0x256>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80076f6:	f7ff fa9d 	bl	8006c34 <HAL_I2C_MasterTxCpltCallback>
}
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 80076fc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80076fe:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8007700:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8007702:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007706:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800770a:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 800770c:	f7ff fb34 	bl	8006d78 <HAL_I2C_AbortCpltCallback>
}
 8007710:	bd70      	pop	{r4, r5, r6, pc}
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007712:	f7ff fb2b 	bl	8006d6c <HAL_I2C_MemTxCpltCallback>
}
 8007716:	bd70      	pop	{r4, r5, r6, pc}
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007718:	f7ff fb2a 	bl	8006d70 <HAL_I2C_MemRxCpltCallback>
}
 800771c:	bd70      	pop	{r4, r5, r6, pc}
 800771e:	bf00      	nop
 8007720:	fe00e800 	.word	0xfe00e800
 8007724:	ffff0000 	.word	0xffff0000
 8007728:	080070b1 	.word	0x080070b1
 800772c:	08006d7d 	.word	0x08006d7d

08007730 <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
 8007730:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007734:	2b01      	cmp	r3, #1
 8007736:	f000 80d8 	beq.w	80078ea <I2C_Master_ISR_IT+0x1ba>
 800773a:	2301      	movs	r3, #1
{
 800773c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007740:	06cf      	lsls	r7, r1, #27
{
 8007742:	b082      	sub	sp, #8
 8007744:	4604      	mov	r4, r0
 8007746:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8007748:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800774c:	d51e      	bpl.n	800778c <I2C_Master_ISR_IT+0x5c>
 800774e:	06d6      	lsls	r6, r2, #27
 8007750:	d51c      	bpl.n	800778c <I2C_Master_ISR_IT+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007752:	6803      	ldr	r3, [r0, #0]
 8007754:	2110      	movs	r1, #16
 8007756:	61d9      	str	r1, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007758:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800775a:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800775c:	f041 0104 	orr.w	r1, r1, #4
 8007760:	6441      	str	r1, [r0, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007762:	6999      	ldr	r1, [r3, #24]
 8007764:	0788      	lsls	r0, r1, #30
 8007766:	d502      	bpl.n	800776e <I2C_Master_ISR_IT+0x3e>
    hi2c->Instance->TXDR = 0x00U;
 8007768:	2100      	movs	r1, #0
 800776a:	6299      	str	r1, [r3, #40]	; 0x28
 800776c:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800776e:	6999      	ldr	r1, [r3, #24]
 8007770:	07c9      	lsls	r1, r1, #31
 8007772:	f140 8087 	bpl.w	8007884 <I2C_Master_ISR_IT+0x154>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007776:	06a9      	lsls	r1, r5, #26
 8007778:	d502      	bpl.n	8007780 <I2C_Master_ISR_IT+0x50>
 800777a:	0693      	lsls	r3, r2, #26
 800777c:	f100 80b7 	bmi.w	80078ee <I2C_Master_ISR_IT+0x1be>
  __HAL_UNLOCK(hi2c);
 8007780:	2000      	movs	r0, #0
 8007782:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8007786:	b002      	add	sp, #8
 8007788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800778c:	076f      	lsls	r7, r5, #29
 800778e:	d408      	bmi.n	80077a2 <I2C_Master_ISR_IT+0x72>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007790:	07a8      	lsls	r0, r5, #30
 8007792:	d519      	bpl.n	80077c8 <I2C_Master_ISR_IT+0x98>
 8007794:	0791      	lsls	r1, r2, #30
 8007796:	d517      	bpl.n	80077c8 <I2C_Master_ISR_IT+0x98>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007798:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	7809      	ldrb	r1, [r1, #0]
 800779e:	6299      	str	r1, [r3, #40]	; 0x28
 80077a0:	e007      	b.n	80077b2 <I2C_Master_ISR_IT+0x82>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80077a2:	0756      	lsls	r6, r2, #29
 80077a4:	d5f4      	bpl.n	8007790 <I2C_Master_ISR_IT+0x60>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077a6:	6821      	ldr	r1, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80077a8:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077ae:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80077b0:	7019      	strb	r1, [r3, #0]
    hi2c->XferCount--;
 80077b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80077b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    hi2c->XferSize--;
 80077b6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    hi2c->XferCount--;
 80077b8:	3b01      	subs	r3, #1
    hi2c->pBuffPtr++;
 80077ba:	3001      	adds	r0, #1
    hi2c->XferCount--;
 80077bc:	b29b      	uxth	r3, r3
    hi2c->XferSize--;
 80077be:	3901      	subs	r1, #1
    hi2c->pBuffPtr++;
 80077c0:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80077c2:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
 80077c4:	8521      	strh	r1, [r4, #40]	; 0x28
    hi2c->XferCount--;
 80077c6:	e7d6      	b.n	8007776 <I2C_Master_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80077c8:	062b      	lsls	r3, r5, #24
 80077ca:	d416      	bmi.n	80077fa <I2C_Master_ISR_IT+0xca>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80077cc:	066e      	lsls	r6, r5, #25
 80077ce:	d5d2      	bpl.n	8007776 <I2C_Master_ISR_IT+0x46>
 80077d0:	0650      	lsls	r0, r2, #25
 80077d2:	d5d0      	bpl.n	8007776 <I2C_Master_ISR_IT+0x46>
    if (hi2c->XferCount == 0U)
 80077d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d17f      	bne.n	80078dc <I2C_Master_ISR_IT+0x1ac>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80077dc:	6821      	ldr	r1, [r4, #0]
 80077de:	684b      	ldr	r3, [r1, #4]
 80077e0:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80077e4:	d1c7      	bne.n	8007776 <I2C_Master_ISR_IT+0x46>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80077e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80077e8:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80077ec:	f040 80a2 	bne.w	8007934 <I2C_Master_ISR_IT+0x204>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80077f0:	684b      	ldr	r3, [r1, #4]
 80077f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077f6:	604b      	str	r3, [r1, #4]
 80077f8:	e7bd      	b.n	8007776 <I2C_Master_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80077fa:	0657      	lsls	r7, r2, #25
 80077fc:	d5bb      	bpl.n	8007776 <I2C_Master_ISR_IT+0x46>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007800:	6821      	ldr	r1, [r4, #0]
 8007802:	b29b      	uxth	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d042      	beq.n	800788e <I2C_Master_ISR_IT+0x15e>
 8007808:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800780a:	2b00      	cmp	r3, #0
 800780c:	d13f      	bne.n	800788e <I2C_Master_ISR_IT+0x15e>
 800780e:	4b76      	ldr	r3, [pc, #472]	; (80079e8 <I2C_Master_ISR_IT+0x2b8>)
 8007810:	4e76      	ldr	r6, [pc, #472]	; (80079ec <I2C_Master_ISR_IT+0x2bc>)
 8007812:	4877      	ldr	r0, [pc, #476]	; (80079f0 <I2C_Master_ISR_IT+0x2c0>)
 8007814:	4299      	cmp	r1, r3
 8007816:	bf18      	it	ne
 8007818:	42b1      	cmpne	r1, r6
 800781a:	4f76      	ldr	r7, [pc, #472]	; (80079f4 <I2C_Master_ISR_IT+0x2c4>)
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800781c:	684e      	ldr	r6, [r1, #4]
 800781e:	bf14      	ite	ne
 8007820:	2301      	movne	r3, #1
 8007822:	2300      	moveq	r3, #0
 8007824:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007828:	4281      	cmp	r1, r0
 800782a:	bf0c      	ite	eq
 800782c:	2300      	moveq	r3, #0
 800782e:	f003 0301 	andne.w	r3, r3, #1
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007832:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8007834:	42b9      	cmp	r1, r7
 8007836:	bf0c      	ite	eq
 8007838:	2300      	moveq	r3, #0
 800783a:	f003 0301 	andne.w	r3, r3, #1
 800783e:	28ff      	cmp	r0, #255	; 0xff
 8007840:	f200 8099 	bhi.w	8007976 <I2C_Master_ISR_IT+0x246>
        hi2c->XferSize = hi2c->XferCount;
 8007844:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007846:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8007848:	b280      	uxth	r0, r0
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800784a:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
 800784e:	8520      	strh	r0, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8007850:	b2c7      	uxtb	r7, r0
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007852:	f000 809b 	beq.w	800798c <I2C_Master_ISR_IT+0x25c>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8007856:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800785a:	2b00      	cmp	r3, #0
 800785c:	f040 80a1 	bne.w	80079a2 <I2C_Master_ISR_IT+0x272>
  assert_param(IS_TRANSFER_MODE(Mode));
 8007860:	f038 7380 	bics.w	r3, r8, #16777216	; 0x1000000
 8007864:	d003      	beq.n	800786e <I2C_Master_ISR_IT+0x13e>
 8007866:	f1b8 7f00 	cmp.w	r8, #33554432	; 0x2000000
 800786a:	f040 80a2 	bne.w	80079b2 <I2C_Master_ISR_IT+0x282>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	4961      	ldr	r1, [pc, #388]	; (80079f8 <I2C_Master_ISR_IT+0x2c8>)
 8007872:	6858      	ldr	r0, [r3, #4]
 8007874:	4008      	ands	r0, r1
 8007876:	ea40 0008 	orr.w	r0, r0, r8
 800787a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800787e:	4306      	orrs	r6, r0
 8007880:	605e      	str	r6, [r3, #4]
 8007882:	e778      	b.n	8007776 <I2C_Master_ISR_IT+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007884:	6999      	ldr	r1, [r3, #24]
 8007886:	f041 0101 	orr.w	r1, r1, #1
 800788a:	6199      	str	r1, [r3, #24]
 800788c:	e773      	b.n	8007776 <I2C_Master_ISR_IT+0x46>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800788e:	684b      	ldr	r3, [r1, #4]
 8007890:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8007894:	d122      	bne.n	80078dc <I2C_Master_ISR_IT+0x1ac>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007896:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->State         = HAL_I2C_STATE_READY;
 800789a:	2720      	movs	r7, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800789c:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 80078a0:	9201      	str	r2, [sp, #4]
 80078a2:	2821      	cmp	r0, #33	; 0x21
 80078a4:	d02d      	beq.n	8007902 <I2C_Master_ISR_IT+0x1d2>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80078a6:	2612      	movs	r6, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 80078a8:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 80078ac:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80078ae:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80078b0:	6326      	str	r6, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80078b2:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80078b6:	f8d1 c000 	ldr.w	ip, [r1]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80078ba:	f007 0728 	and.w	r7, r7, #40	; 0x28
 80078be:	2f28      	cmp	r7, #40	; 0x28
 80078c0:	bf14      	ite	ne
 80078c2:	f06f 06f4 	mvnne.w	r6, #244	; 0xf4
 80078c6:	f06f 0644 	mvneq.w	r6, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80078ca:	ea06 060c 	and.w	r6, r6, ip
 80078ce:	600e      	str	r6, [r1, #0]
    __HAL_UNLOCK(hi2c);
 80078d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80078d4:	f7ff f9b0 	bl	8006c38 <HAL_I2C_MasterRxCpltCallback>
 80078d8:	9a01      	ldr	r2, [sp, #4]
 80078da:	e74c      	b.n	8007776 <I2C_Master_ISR_IT+0x46>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80078dc:	2140      	movs	r1, #64	; 0x40
 80078de:	4620      	mov	r0, r4
 80078e0:	9201      	str	r2, [sp, #4]
 80078e2:	f7ff fa6d 	bl	8006dc0 <I2C_ITError>
 80078e6:	9a01      	ldr	r2, [sp, #4]
 80078e8:	e745      	b.n	8007776 <I2C_Master_ISR_IT+0x46>
  __HAL_LOCK(hi2c);
 80078ea:	2002      	movs	r0, #2
}
 80078ec:	4770      	bx	lr
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80078ee:	4620      	mov	r0, r4
 80078f0:	4629      	mov	r1, r5
 80078f2:	f7ff fde3 	bl	80074bc <I2C_ITMasterCplt>
  __HAL_UNLOCK(hi2c);
 80078f6:	2000      	movs	r0, #0
 80078f8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80078fc:	b002      	add	sp, #8
 80078fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007902:	2611      	movs	r6, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8007904:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8007908:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800790a:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800790c:	6326      	str	r6, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800790e:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007912:	680f      	ldr	r7, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007914:	f006 0628 	and.w	r6, r6, #40	; 0x28
 8007918:	2e28      	cmp	r6, #40	; 0x28
 800791a:	bf14      	ite	ne
 800791c:	f06f 06f2 	mvnne.w	r6, #242	; 0xf2
 8007920:	f06f 0642 	mvneq.w	r6, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007924:	403e      	ands	r6, r7
 8007926:	600e      	str	r6, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8007928:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800792c:	f7ff f982 	bl	8006c34 <HAL_I2C_MasterTxCpltCallback>
 8007930:	9a01      	ldr	r2, [sp, #4]
 8007932:	e720      	b.n	8007776 <I2C_Master_ISR_IT+0x46>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->State         = HAL_I2C_STATE_READY;
 8007938:	2720      	movs	r7, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800793a:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 800793e:	9201      	str	r2, [sp, #4]
 8007940:	2821      	cmp	r0, #33	; 0x21
 8007942:	d0de      	beq.n	8007902 <I2C_Master_ISR_IT+0x1d2>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007944:	2612      	movs	r6, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8007946:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 800794a:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800794c:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800794e:	6326      	str	r6, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007950:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007954:	680e      	ldr	r6, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007956:	f007 0728 	and.w	r7, r7, #40	; 0x28
 800795a:	2f28      	cmp	r7, #40	; 0x28
 800795c:	bf14      	ite	ne
 800795e:	f06f 07f4 	mvnne.w	r7, #244	; 0xf4
 8007962:	f06f 0744 	mvneq.w	r7, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007966:	403e      	ands	r6, r7
 8007968:	600e      	str	r6, [r1, #0]
    __HAL_UNLOCK(hi2c);
 800796a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800796e:	f7ff f963 	bl	8006c38 <HAL_I2C_MasterRxCpltCallback>
 8007972:	9a01      	ldr	r2, [sp, #4]
 8007974:	e6ff      	b.n	8007776 <I2C_Master_ISR_IT+0x46>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007976:	20ff      	movs	r0, #255	; 0xff
 8007978:	8520      	strh	r0, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800797a:	bb13      	cbnz	r3, 80079c2 <I2C_Master_ISR_IT+0x292>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800797c:	684b      	ldr	r3, [r1, #4]
 800797e:	4f1e      	ldr	r7, [pc, #120]	; (80079f8 <I2C_Master_ISR_IT+0x2c8>)
 8007980:	481e      	ldr	r0, [pc, #120]	; (80079fc <I2C_Master_ISR_IT+0x2cc>)
 8007982:	403b      	ands	r3, r7
 8007984:	4330      	orrs	r0, r6
 8007986:	4303      	orrs	r3, r0
 8007988:	604b      	str	r3, [r1, #4]
 800798a:	e6f4      	b.n	8007776 <I2C_Master_ISR_IT+0x46>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800798c:	bb13      	cbnz	r3, 80079d4 <I2C_Master_ISR_IT+0x2a4>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800798e:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
 8007992:	6848      	ldr	r0, [r1, #4]
 8007994:	4e18      	ldr	r6, [pc, #96]	; (80079f8 <I2C_Master_ISR_IT+0x2c8>)
 8007996:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800799a:	4030      	ands	r0, r6
 800799c:	4303      	orrs	r3, r0
 800799e:	604b      	str	r3, [r1, #4]
 80079a0:	e6e9      	b.n	8007776 <I2C_Master_ISR_IT+0x46>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80079a2:	f641 1131 	movw	r1, #6449	; 0x1931
 80079a6:	4816      	ldr	r0, [pc, #88]	; (8007a00 <I2C_Master_ISR_IT+0x2d0>)
 80079a8:	9201      	str	r2, [sp, #4]
 80079aa:	f00c f947 	bl	8013c3c <assert_failed>
 80079ae:	9a01      	ldr	r2, [sp, #4]
 80079b0:	e756      	b.n	8007860 <I2C_Master_ISR_IT+0x130>
  assert_param(IS_TRANSFER_MODE(Mode));
 80079b2:	f641 1132 	movw	r1, #6450	; 0x1932
 80079b6:	4812      	ldr	r0, [pc, #72]	; (8007a00 <I2C_Master_ISR_IT+0x2d0>)
 80079b8:	9201      	str	r2, [sp, #4]
 80079ba:	f00c f93f 	bl	8013c3c <assert_failed>
 80079be:	9a01      	ldr	r2, [sp, #4]
 80079c0:	e755      	b.n	800786e <I2C_Master_ISR_IT+0x13e>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80079c2:	f641 1131 	movw	r1, #6449	; 0x1931
 80079c6:	480e      	ldr	r0, [pc, #56]	; (8007a00 <I2C_Master_ISR_IT+0x2d0>)
 80079c8:	9201      	str	r2, [sp, #4]
 80079ca:	f00c f937 	bl	8013c3c <assert_failed>
 80079ce:	6821      	ldr	r1, [r4, #0]
 80079d0:	9a01      	ldr	r2, [sp, #4]
 80079d2:	e7d3      	b.n	800797c <I2C_Master_ISR_IT+0x24c>
 80079d4:	f641 1131 	movw	r1, #6449	; 0x1931
 80079d8:	4809      	ldr	r0, [pc, #36]	; (8007a00 <I2C_Master_ISR_IT+0x2d0>)
 80079da:	9201      	str	r2, [sp, #4]
 80079dc:	f00c f92e 	bl	8013c3c <assert_failed>
 80079e0:	6821      	ldr	r1, [r4, #0]
 80079e2:	9a01      	ldr	r2, [sp, #4]
 80079e4:	e7d3      	b.n	800798e <I2C_Master_ISR_IT+0x25e>
 80079e6:	bf00      	nop
 80079e8:	40005400 	.word	0x40005400
 80079ec:	40005800 	.word	0x40005800
 80079f0:	40005c00 	.word	0x40005c00
 80079f4:	58001c00 	.word	0x58001c00
 80079f8:	fc009c00 	.word	0xfc009c00
 80079fc:	01ff0000 	.word	0x01ff0000
 8007a00:	0802a3a4 	.word	0x0802a3a4

08007a04 <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 8007a04:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	f000 80a8 	beq.w	8007b5e <I2C_Master_ISR_DMA+0x15a>
 8007a0e:	2301      	movs	r3, #1
{
 8007a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007a14:	06cd      	lsls	r5, r1, #27
 8007a16:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8007a18:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007a1c:	d529      	bpl.n	8007a72 <I2C_Master_ISR_DMA+0x6e>
 8007a1e:	06d0      	lsls	r0, r2, #27
 8007a20:	d527      	bpl.n	8007a72 <I2C_Master_ISR_DMA+0x6e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	2210      	movs	r2, #16
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007a26:	4998      	ldr	r1, [pc, #608]	; (8007c88 <I2C_Master_ISR_DMA+0x284>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a28:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007a2c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a2e:	f043 0304 	orr.w	r3, r3, #4
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007a32:	428a      	cmp	r2, r1
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a34:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007a36:	f000 8090 	beq.w	8007b5a <I2C_Master_ISR_DMA+0x156>
 8007a3a:	4b94      	ldr	r3, [pc, #592]	; (8007c8c <I2C_Master_ISR_DMA+0x288>)
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	f000 808c 	beq.w	8007b5a <I2C_Master_ISR_DMA+0x156>
      tmpisr |= I2C_IT_STOPI;
 8007a42:	2120      	movs	r1, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007a44:	6822      	ldr	r2, [r4, #0]
 8007a46:	6813      	ldr	r3, [r2, #0]
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	699a      	ldr	r2, [r3, #24]
 8007a50:	0791      	lsls	r1, r2, #30
 8007a52:	d502      	bpl.n	8007a5a <I2C_Master_ISR_DMA+0x56>
    hi2c->Instance->TXDR = 0x00U;
 8007a54:	2200      	movs	r2, #0
 8007a56:	629a      	str	r2, [r3, #40]	; 0x28
 8007a58:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a5a:	699a      	ldr	r2, [r3, #24]
 8007a5c:	07d2      	lsls	r2, r2, #31
 8007a5e:	d403      	bmi.n	8007a68 <I2C_Master_ISR_DMA+0x64>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007a60:	699a      	ldr	r2, [r3, #24]
 8007a62:	f042 0201 	orr.w	r2, r2, #1
 8007a66:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(hi2c);
 8007a68:	2000      	movs	r0, #0
 8007a6a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8007a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a72:	060f      	lsls	r7, r1, #24
 8007a74:	d553      	bpl.n	8007b1e <I2C_Master_ISR_DMA+0x11a>
 8007a76:	0656      	lsls	r6, r2, #25
 8007a78:	d567      	bpl.n	8007b4a <I2C_Master_ISR_DMA+0x146>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007a7a:	6822      	ldr	r2, [r4, #0]
 8007a7c:	6813      	ldr	r3, [r2, #0]
 8007a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a82:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 8007a84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007a86:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount != 0U)
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d069      	beq.n	8007b62 <I2C_Master_ISR_DMA+0x15e>
 8007a8e:	4980      	ldr	r1, [pc, #512]	; (8007c90 <I2C_Master_ISR_DMA+0x28c>)
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007a90:	4610      	mov	r0, r2
 8007a92:	4e80      	ldr	r6, [pc, #512]	; (8007c94 <I2C_Master_ISR_DMA+0x290>)
 8007a94:	6855      	ldr	r5, [r2, #4]
 8007a96:	42b2      	cmp	r2, r6
 8007a98:	bf18      	it	ne
 8007a9a:	428a      	cmpne	r2, r1
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007a9e:	f3c5 0609 	ubfx	r6, r5, #0, #10
 8007aa2:	bf14      	ite	ne
 8007aa4:	2101      	movne	r1, #1
 8007aa6:	2100      	moveq	r1, #0
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007aa8:	2bff      	cmp	r3, #255	; 0xff
 8007aaa:	f200 8082 	bhi.w	8007bb2 <I2C_Master_ISR_DMA+0x1ae>
        hi2c->XferSize = hi2c->XferCount;
 8007aae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007ab0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8007ab2:	b29b      	uxth	r3, r3
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007ab4:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
 8007ab8:	8523      	strh	r3, [r4, #40]	; 0x28
 8007aba:	b2db      	uxtb	r3, r3
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007abc:	f000 80c6 	beq.w	8007c4c <I2C_Master_ISR_DMA+0x248>
          xfermode = hi2c->XferOptions;
 8007ac0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007ac2:	041d      	lsls	r5, r3, #16
 8007ac4:	f027 7880 	bic.w	r8, r7, #16777216	; 0x1000000
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007ac8:	2900      	cmp	r1, #0
 8007aca:	f040 80ca 	bne.w	8007c62 <I2C_Master_ISR_DMA+0x25e>
 8007ace:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8007ad2:	bf18      	it	ne
 8007ad4:	f1b8 0f00 	cmpne.w	r8, #0
 8007ad8:	bf14      	ite	ne
 8007ada:	f04f 0801 	movne.w	r8, #1
 8007ade:	f04f 0800 	moveq.w	r8, #0
  assert_param(IS_TRANSFER_MODE(Mode));
 8007ae2:	f1b8 0f00 	cmp.w	r8, #0
 8007ae6:	f040 80b5 	bne.w	8007c54 <I2C_Master_ISR_DMA+0x250>
 8007aea:	6822      	ldr	r2, [r4, #0]
 8007aec:	4610      	mov	r0, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007aee:	6843      	ldr	r3, [r0, #4]
 8007af0:	433d      	orrs	r5, r7
 8007af2:	4a69      	ldr	r2, [pc, #420]	; (8007c98 <I2C_Master_ISR_DMA+0x294>)
 8007af4:	4335      	orrs	r5, r6
 8007af6:	4013      	ands	r3, r2
 8007af8:	431d      	orrs	r5, r3
 8007afa:	6045      	str	r5, [r0, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8007afc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007afe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007b00:	1a9b      	subs	r3, r3, r2
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007b02:	6822      	ldr	r2, [r4, #0]
      hi2c->XferCount -= hi2c->XferSize;
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b08:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007b0c:	2b22      	cmp	r3, #34	; 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007b0e:	6813      	ldr	r3, [r2, #0]
 8007b10:	bf0c      	ite	eq
 8007b12:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007b16:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	e7a4      	b.n	8007a68 <I2C_Master_ISR_DMA+0x64>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007b1e:	064d      	lsls	r5, r1, #25
 8007b20:	d513      	bpl.n	8007b4a <I2C_Master_ISR_DMA+0x146>
 8007b22:	0650      	lsls	r0, r2, #25
 8007b24:	d511      	bpl.n	8007b4a <I2C_Master_ISR_DMA+0x146>
    if (hi2c->XferCount == 0U)
 8007b26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d13c      	bne.n	8007ba8 <I2C_Master_ISR_DMA+0x1a4>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007b2e:	6822      	ldr	r2, [r4, #0]
 8007b30:	6853      	ldr	r3, [r2, #4]
 8007b32:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8007b36:	d197      	bne.n	8007a68 <I2C_Master_ISR_DMA+0x64>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007b38:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007b3a:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8007b3e:	d166      	bne.n	8007c0e <I2C_Master_ISR_DMA+0x20a>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b40:	6853      	ldr	r3, [r2, #4]
 8007b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b46:	6053      	str	r3, [r2, #4]
 8007b48:	e78e      	b.n	8007a68 <I2C_Master_ISR_DMA+0x64>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007b4a:	068b      	lsls	r3, r1, #26
 8007b4c:	d58c      	bpl.n	8007a68 <I2C_Master_ISR_DMA+0x64>
 8007b4e:	0692      	lsls	r2, r2, #26
 8007b50:	d58a      	bpl.n	8007a68 <I2C_Master_ISR_DMA+0x64>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007b52:	4620      	mov	r0, r4
 8007b54:	f7ff fcb2 	bl	80074bc <I2C_ITMasterCplt>
 8007b58:	e786      	b.n	8007a68 <I2C_Master_ISR_DMA+0x64>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007b5a:	2160      	movs	r1, #96	; 0x60
 8007b5c:	e772      	b.n	8007a44 <I2C_Master_ISR_DMA+0x40>
  __HAL_LOCK(hi2c);
 8007b5e:	2002      	movs	r0, #2
}
 8007b60:	4770      	bx	lr
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007b62:	6853      	ldr	r3, [r2, #4]
 8007b64:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8007b68:	d11e      	bne.n	8007ba8 <I2C_Master_ISR_DMA+0x1a4>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b6e:	2520      	movs	r5, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007b70:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8007b74:	2921      	cmp	r1, #33	; 0x21
 8007b76:	d032      	beq.n	8007bde <I2C_Master_ISR_DMA+0x1da>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007b78:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b7a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8007b7e:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007b80:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007b82:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b84:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007b88:	6816      	ldr	r6, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b8a:	f005 0528 	and.w	r5, r5, #40	; 0x28
 8007b8e:	2d28      	cmp	r5, #40	; 0x28
 8007b90:	bf14      	ite	ne
 8007b92:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8007b96:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007b9a:	4031      	ands	r1, r6
 8007b9c:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8007b9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007ba2:	f7ff f849 	bl	8006c38 <HAL_I2C_MasterRxCpltCallback>
 8007ba6:	e75f      	b.n	8007a68 <I2C_Master_ISR_DMA+0x64>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007ba8:	2140      	movs	r1, #64	; 0x40
 8007baa:	4620      	mov	r0, r4
 8007bac:	f7ff f908 	bl	8006dc0 <I2C_ITError>
 8007bb0:	e75a      	b.n	8007a68 <I2C_Master_ISR_DMA+0x64>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bb2:	23ff      	movs	r3, #255	; 0xff
 8007bb4:	f44f 057f 	mov.w	r5, #16711680	; 0xff0000
        xfermode = I2C_RELOAD_MODE;
 8007bb8:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bbc:	8523      	strh	r3, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007bbe:	2900      	cmp	r1, #0
 8007bc0:	d095      	beq.n	8007aee <I2C_Master_ISR_DMA+0xea>
 8007bc2:	4b36      	ldr	r3, [pc, #216]	; (8007c9c <I2C_Master_ISR_DMA+0x298>)
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d091      	beq.n	8007aec <I2C_Master_ISR_DMA+0xe8>
 8007bc8:	4b35      	ldr	r3, [pc, #212]	; (8007ca0 <I2C_Master_ISR_DMA+0x29c>)
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d08e      	beq.n	8007aec <I2C_Master_ISR_DMA+0xe8>
 8007bce:	f04f 0800 	mov.w	r8, #0
 8007bd2:	f641 1131 	movw	r1, #6449	; 0x1931
 8007bd6:	4833      	ldr	r0, [pc, #204]	; (8007ca4 <I2C_Master_ISR_DMA+0x2a0>)
 8007bd8:	f00c f830 	bl	8013c3c <assert_failed>
 8007bdc:	e781      	b.n	8007ae2 <I2C_Master_ISR_DMA+0xde>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007bde:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8007be0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8007be4:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007be6:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007be8:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bea:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007bee:	6815      	ldr	r5, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bf0:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8007bf4:	2928      	cmp	r1, #40	; 0x28
 8007bf6:	bf14      	ite	ne
 8007bf8:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 8007bfc:	f06f 0142 	mvneq.w	r1, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007c00:	4029      	ands	r1, r5
 8007c02:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8007c04:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007c08:	f7ff f814 	bl	8006c34 <HAL_I2C_MasterTxCpltCallback>
 8007c0c:	e72c      	b.n	8007a68 <I2C_Master_ISR_DMA+0x64>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c12:	2520      	movs	r5, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007c14:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8007c18:	2921      	cmp	r1, #33	; 0x21
 8007c1a:	d0e0      	beq.n	8007bde <I2C_Master_ISR_DMA+0x1da>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007c1c:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c1e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8007c22:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007c24:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007c26:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c28:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007c2c:	6815      	ldr	r5, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c2e:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8007c32:	2928      	cmp	r1, #40	; 0x28
 8007c34:	bf14      	ite	ne
 8007c36:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8007c3a:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007c3e:	4029      	ands	r1, r5
 8007c40:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8007c42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007c46:	f7fe fff7 	bl	8006c38 <HAL_I2C_MasterRxCpltCallback>
 8007c4a:	e70d      	b.n	8007a68 <I2C_Master_ISR_DMA+0x64>
          xfermode = I2C_AUTOEND_MODE;
 8007c4c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8007c50:	041d      	lsls	r5, r3, #16
 8007c52:	e7b4      	b.n	8007bbe <I2C_Master_ISR_DMA+0x1ba>
  assert_param(IS_TRANSFER_MODE(Mode));
 8007c54:	4813      	ldr	r0, [pc, #76]	; (8007ca4 <I2C_Master_ISR_DMA+0x2a0>)
 8007c56:	f641 1132 	movw	r1, #6450	; 0x1932
 8007c5a:	f00b ffef 	bl	8013c3c <assert_failed>
 8007c5e:	6820      	ldr	r0, [r4, #0]
 8007c60:	e745      	b.n	8007aee <I2C_Master_ISR_DMA+0xea>
 8007c62:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8007c66:	bf18      	it	ne
 8007c68:	f1b8 0f00 	cmpne.w	r8, #0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007c6c:	4b0b      	ldr	r3, [pc, #44]	; (8007c9c <I2C_Master_ISR_DMA+0x298>)
 8007c6e:	bf14      	ite	ne
 8007c70:	f04f 0801 	movne.w	r8, #1
 8007c74:	f04f 0800 	moveq.w	r8, #0
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	f43f af32 	beq.w	8007ae2 <I2C_Master_ISR_DMA+0xde>
 8007c7e:	4b08      	ldr	r3, [pc, #32]	; (8007ca0 <I2C_Master_ISR_DMA+0x29c>)
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d1a6      	bne.n	8007bd2 <I2C_Master_ISR_DMA+0x1ce>
 8007c84:	e72d      	b.n	8007ae2 <I2C_Master_ISR_DMA+0xde>
 8007c86:	bf00      	nop
 8007c88:	08007259 	.word	0x08007259
 8007c8c:	08007a05 	.word	0x08007a05
 8007c90:	40005800 	.word	0x40005800
 8007c94:	40005400 	.word	0x40005400
 8007c98:	fc009c00 	.word	0xfc009c00
 8007c9c:	58001c00 	.word	0x58001c00
 8007ca0:	40005c00 	.word	0x40005c00
 8007ca4:	0802a3a4 	.word	0x0802a3a4

08007ca8 <HAL_I2C_ER_IRQHandler>:
{
 8007ca8:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007caa:	6803      	ldr	r3, [r0, #0]
 8007cac:	699a      	ldr	r2, [r3, #24]
 8007cae:	461e      	mov	r6, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007cb0:	681c      	ldr	r4, [r3, #0]
 8007cb2:	f3c2 2180 	ubfx	r1, r2, #10, #1
 8007cb6:	f3c2 2540 	ubfx	r5, r2, #9, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007cba:	05d2      	lsls	r2, r2, #23
 8007cbc:	d518      	bpl.n	8007cf0 <HAL_I2C_ER_IRQHandler+0x48>
 8007cbe:	0622      	lsls	r2, r4, #24
 8007cc0:	d51e      	bpl.n	8007d00 <HAL_I2C_ER_IRQHandler+0x58>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007cc2:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007cc4:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007cc8:	f042 0201 	orr.w	r2, r2, #1
 8007ccc:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007cce:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007cd0:	b139      	cbz	r1, 8007ce2 <HAL_I2C_ER_IRQHandler+0x3a>
 8007cd2:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007cd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007cd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007cda:	f042 0208 	orr.w	r2, r2, #8
 8007cde:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ce0:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ce2:	2d00      	cmp	r5, #0
 8007ce4:	d151      	bne.n	8007d8a <HAL_I2C_ER_IRQHandler+0xe2>
  tmperror = hi2c->ErrorCode;
 8007ce6:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007ce8:	f013 0f0b 	tst.w	r3, #11
 8007cec:	d112      	bne.n	8007d14 <HAL_I2C_ER_IRQHandler+0x6c>
}
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007cf0:	b141      	cbz	r1, 8007d04 <HAL_I2C_ER_IRQHandler+0x5c>
 8007cf2:	0626      	lsls	r6, r4, #24
 8007cf4:	d4ee      	bmi.n	8007cd4 <HAL_I2C_ER_IRQHandler+0x2c>
  tmperror = hi2c->ErrorCode;
 8007cf6:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007cf8:	f013 0f0b 	tst.w	r3, #11
 8007cfc:	d0f7      	beq.n	8007cee <HAL_I2C_ER_IRQHandler+0x46>
 8007cfe:	e009      	b.n	8007d14 <HAL_I2C_ER_IRQHandler+0x6c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d00:	2900      	cmp	r1, #0
 8007d02:	d1f0      	bne.n	8007ce6 <HAL_I2C_ER_IRQHandler+0x3e>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d04:	2d00      	cmp	r5, #0
 8007d06:	d0ee      	beq.n	8007ce6 <HAL_I2C_ER_IRQHandler+0x3e>
 8007d08:	0624      	lsls	r4, r4, #24
 8007d0a:	d43f      	bmi.n	8007d8c <HAL_I2C_ER_IRQHandler+0xe4>
  tmperror = hi2c->ErrorCode;
 8007d0c:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007d0e:	f013 0f0b 	tst.w	r3, #11
 8007d12:	d0ec      	beq.n	8007cee <HAL_I2C_ER_IRQHandler+0x46>
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007d14:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d18:	2100      	movs	r1, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007d1a:	4c53      	ldr	r4, [pc, #332]	; (8007e68 <HAL_I2C_ER_IRQHandler+0x1c0>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d1c:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007d20:	3a28      	subs	r2, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007d22:	62c4      	str	r4, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007d24:	8541      	strh	r1, [r0, #42]	; 0x2a
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007d26:	2a02      	cmp	r2, #2
  hi2c->ErrorCode |= ErrorCode;
 8007d28:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007d2a:	6801      	ldr	r1, [r0, #0]
 8007d2c:	ea43 0304 	orr.w	r3, r3, r4
 8007d30:	6443      	str	r3, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007d32:	d937      	bls.n	8007da4 <HAL_I2C_ER_IRQHandler+0xfc>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d34:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d38:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007d3c:	680b      	ldr	r3, [r1, #0]
 8007d3e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007d42:	600b      	str	r3, [r1, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007d44:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007d48:	2b60      	cmp	r3, #96	; 0x60
 8007d4a:	d002      	beq.n	8007d52 <HAL_I2C_ER_IRQHandler+0xaa>
      hi2c->State         = HAL_I2C_STATE_READY;
 8007d4c:	2320      	movs	r3, #32
 8007d4e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	6343      	str	r3, [r0, #52]	; 0x34
 8007d56:	4604      	mov	r4, r0
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8007d58:	6b80      	ldr	r0, [r0, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 8007d5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8007d5c:	b118      	cbz	r0, 8007d66 <HAL_I2C_ER_IRQHandler+0xbe>
 8007d5e:	2b11      	cmp	r3, #17
 8007d60:	d039      	beq.n	8007dd6 <HAL_I2C_ER_IRQHandler+0x12e>
 8007d62:	2b21      	cmp	r3, #33	; 0x21
 8007d64:	d037      	beq.n	8007dd6 <HAL_I2C_ER_IRQHandler+0x12e>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8007d66:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007d68:	b118      	cbz	r0, 8007d72 <HAL_I2C_ER_IRQHandler+0xca>
 8007d6a:	2b12      	cmp	r3, #18
 8007d6c:	d051      	beq.n	8007e12 <HAL_I2C_ER_IRQHandler+0x16a>
 8007d6e:	2b22      	cmp	r3, #34	; 0x22
 8007d70:	d04f      	beq.n	8007e12 <HAL_I2C_ER_IRQHandler+0x16a>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d72:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007d76:	2b60      	cmp	r3, #96	; 0x60
 8007d78:	d064      	beq.n	8007e44 <HAL_I2C_ER_IRQHandler+0x19c>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d7a:	2300      	movs	r3, #0
    HAL_I2C_ErrorCallback(hi2c);
 8007d7c:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d7e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007d80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007d84:	f7fe fff6 	bl	8006d74 <HAL_I2C_ErrorCallback>
}
 8007d88:	bd70      	pop	{r4, r5, r6, pc}
 8007d8a:	6806      	ldr	r6, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007d8c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007d92:	f043 0302 	orr.w	r3, r3, #2
 8007d96:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d98:	61f2      	str	r2, [r6, #28]
  tmperror = hi2c->ErrorCode;
 8007d9a:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007d9c:	f013 0f0b 	tst.w	r3, #11
 8007da0:	d0a5      	beq.n	8007cee <HAL_I2C_ER_IRQHandler+0x46>
 8007da2:	e7b7      	b.n	8007d14 <HAL_I2C_ER_IRQHandler+0x6c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007da4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007da8:	2628      	movs	r6, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007daa:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007dae:	4032      	ands	r2, r6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007db0:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007db2:	4034      	ands	r4, r6
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007db4:	4d2d      	ldr	r5, [pc, #180]	; (8007e6c <HAL_I2C_ER_IRQHandler+0x1c4>)
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007db6:	42b2      	cmp	r2, r6
 8007db8:	bf14      	ite	ne
 8007dba:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 8007dbe:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007dc2:	42b4      	cmp	r4, r6
 8007dc4:	bf18      	it	ne
 8007dc6:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007dca:	4013      	ands	r3, r2
 8007dcc:	600b      	str	r3, [r1, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007dce:	f880 6041 	strb.w	r6, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007dd2:	6345      	str	r5, [r0, #52]	; 0x34
 8007dd4:	e7bf      	b.n	8007d56 <HAL_I2C_ER_IRQHandler+0xae>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	0451      	lsls	r1, r2, #17
 8007ddc:	d504      	bpl.n	8007de8 <HAL_I2C_ER_IRQHandler+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007de8:	f7fc fe6a 	bl	8004ac0 <HAL_DMA_GetState>
 8007dec:	2801      	cmp	r0, #1
 8007dee:	d0c0      	beq.n	8007d72 <HAL_I2C_ER_IRQHandler+0xca>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007df0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8007df2:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007df4:	491e      	ldr	r1, [pc, #120]	; (8007e70 <HAL_I2C_ER_IRQHandler+0x1c8>)
 8007df6:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8007df8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007dfc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007dfe:	f7fc f907 	bl	8004010 <HAL_DMA_Abort_IT>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	f43f af73 	beq.w	8007cee <HAL_I2C_ER_IRQHandler+0x46>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e08:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8007e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e0e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007e10:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	0412      	lsls	r2, r2, #16
 8007e18:	d41f      	bmi.n	8007e5a <HAL_I2C_ER_IRQHandler+0x1b2>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e1a:	f7fc fe51 	bl	8004ac0 <HAL_DMA_GetState>
 8007e1e:	2801      	cmp	r0, #1
 8007e20:	d0a7      	beq.n	8007d72 <HAL_I2C_ER_IRQHandler+0xca>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 8007e24:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e26:	4912      	ldr	r1, [pc, #72]	; (8007e70 <HAL_I2C_ER_IRQHandler+0x1c8>)
 8007e28:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8007e2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e2e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007e30:	f7fc f8ee 	bl	8004010 <HAL_DMA_Abort_IT>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	f43f af5a 	beq.w	8007cee <HAL_I2C_ER_IRQHandler+0x46>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e3a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8007e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e40:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007e42:	4718      	bx	r3
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e44:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007e46:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8007e48:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8007e4a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007e4e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e52:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8007e54:	f7fe ff90 	bl	8006d78 <HAL_I2C_AbortCpltCallback>
}
 8007e58:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007e64:	e7d9      	b.n	8007e1a <HAL_I2C_ER_IRQHandler+0x172>
 8007e66:	bf00      	nop
 8007e68:	ffff0000 	.word	0xffff0000
 8007e6c:	080070b1 	.word	0x080070b1
 8007e70:	08006d7d 	.word	0x08006d7d

08007e74 <I2C_DMAError>:
{
 8007e74:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e76:	6b85      	ldr	r5, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8007e78:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8007e7a:	b124      	cbz	r4, 8007e86 <I2C_DMAError+0x12>
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8007e7c:	6822      	ldr	r2, [r4, #0]
 8007e7e:	6854      	ldr	r4, [r2, #4]
 8007e80:	fab4 f484 	clz	r4, r4
 8007e84:	0964      	lsrs	r4, r4, #5
  if (hi2c->hdmarx != NULL)
 8007e86:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d049      	beq.n	8007f20 <I2C_DMAError+0xac>
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	6853      	ldr	r3, [r2, #4]
 8007e90:	fab3 f383 	clz	r3, r3
 8007e94:	095b      	lsrs	r3, r3, #5
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d042      	beq.n	8007f20 <I2C_DMAError+0xac>
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007e9a:	f7fc fe15 	bl	8004ac8 <HAL_DMA_GetError>
 8007e9e:	2802      	cmp	r0, #2
 8007ea0:	d03d      	beq.n	8007f1e <I2C_DMAError+0xaa>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007ea2:	6829      	ldr	r1, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ea4:	2200      	movs	r2, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007ea6:	4852      	ldr	r0, [pc, #328]	; (8007ff0 <I2C_DMAError+0x17c>)
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007ea8:	684b      	ldr	r3, [r1, #4]
 8007eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eae:	604b      	str	r3, [r1, #4]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007eb0:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007eb4:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007eb8:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007eba:	62e8      	str	r0, [r5, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007ebc:	856a      	strh	r2, [r5, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8007ebe:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007ec0:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8007ec2:	f042 0210 	orr.w	r2, r2, #16
 8007ec6:	646a      	str	r2, [r5, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007ec8:	d931      	bls.n	8007f2e <I2C_DMAError+0xba>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007eca:	682a      	ldr	r2, [r5, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ecc:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ed0:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007ed4:	6813      	ldr	r3, [r2, #0]
 8007ed6:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007eda:	6013      	str	r3, [r2, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007edc:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 8007ee0:	2b60      	cmp	r3, #96	; 0x60
 8007ee2:	d002      	beq.n	8007eea <I2C_DMAError+0x76>
      hi2c->State         = HAL_I2C_STATE_READY;
 8007ee4:	2320      	movs	r3, #32
 8007ee6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8007eee:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 8007ef0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8007ef2:	b118      	cbz	r0, 8007efc <I2C_DMAError+0x88>
 8007ef4:	2b11      	cmp	r3, #17
 8007ef6:	d034      	beq.n	8007f62 <I2C_DMAError+0xee>
 8007ef8:	2b21      	cmp	r3, #33	; 0x21
 8007efa:	d032      	beq.n	8007f62 <I2C_DMAError+0xee>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8007efc:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8007efe:	b118      	cbz	r0, 8007f08 <I2C_DMAError+0x94>
 8007f00:	2b12      	cmp	r3, #18
 8007f02:	d046      	beq.n	8007f92 <I2C_DMAError+0x11e>
 8007f04:	2b22      	cmp	r3, #34	; 0x22
 8007f06:	d044      	beq.n	8007f92 <I2C_DMAError+0x11e>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f08:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 8007f0c:	2b60      	cmp	r3, #96	; 0x60
 8007f0e:	d063      	beq.n	8007fd8 <I2C_DMAError+0x164>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f10:	2300      	movs	r3, #0
    HAL_I2C_ErrorCallback(hi2c);
 8007f12:	4628      	mov	r0, r5
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f14:	632b      	str	r3, [r5, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007f16:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007f1a:	f7fe ff2b 	bl	8006d74 <HAL_I2C_ErrorCallback>
}
 8007f1e:	bd70      	pop	{r4, r5, r6, pc}
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007f20:	f7fc fdd2 	bl	8004ac8 <HAL_DMA_GetError>
 8007f24:	2802      	cmp	r0, #2
 8007f26:	d0fa      	beq.n	8007f1e <I2C_DMAError+0xaa>
 8007f28:	07e0      	lsls	r0, r4, #31
 8007f2a:	d4ba      	bmi.n	8007ea2 <I2C_DMAError+0x2e>
}
 8007f2c:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f2e:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007f32:	2628      	movs	r6, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f34:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f38:	4033      	ands	r3, r6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007f3a:	6828      	ldr	r0, [r5, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f3c:	4031      	ands	r1, r6
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007f3e:	4c2d      	ldr	r4, [pc, #180]	; (8007ff4 <I2C_DMAError+0x180>)
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f40:	42b3      	cmp	r3, r6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007f42:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f44:	bf14      	ite	ne
 8007f46:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 8007f4a:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f4e:	42b1      	cmp	r1, r6
 8007f50:	bf18      	it	ne
 8007f52:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007f56:	4013      	ands	r3, r2
 8007f58:	6003      	str	r3, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007f5a:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007f5e:	636c      	str	r4, [r5, #52]	; 0x34
 8007f60:	e7c5      	b.n	8007eee <I2C_DMAError+0x7a>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007f62:	682b      	ldr	r3, [r5, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	0451      	lsls	r1, r2, #17
 8007f68:	d430      	bmi.n	8007fcc <I2C_DMAError+0x158>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007f6a:	f7fc fda9 	bl	8004ac0 <HAL_DMA_GetState>
 8007f6e:	2801      	cmp	r0, #1
 8007f70:	d0ca      	beq.n	8007f08 <I2C_DMAError+0x94>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f72:	6baa      	ldr	r2, [r5, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8007f74:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f76:	4920      	ldr	r1, [pc, #128]	; (8007ff8 <I2C_DMAError+0x184>)
 8007f78:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8007f7a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f7e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007f80:	f7fc f846 	bl	8004010 <HAL_DMA_Abort_IT>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d0ca      	beq.n	8007f1e <I2C_DMAError+0xaa>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f88:	6ba8      	ldr	r0, [r5, #56]	; 0x38
}
 8007f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f8e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007f90:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007f92:	682b      	ldr	r3, [r5, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	0412      	lsls	r2, r2, #16
 8007f98:	d504      	bpl.n	8007fa4 <I2C_DMAError+0x130>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007fa4:	f7fc fd8c 	bl	8004ac0 <HAL_DMA_GetState>
 8007fa8:	2801      	cmp	r0, #1
 8007faa:	d0ad      	beq.n	8007f08 <I2C_DMAError+0x94>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007fac:	6bea      	ldr	r2, [r5, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 8007fae:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007fb0:	4911      	ldr	r1, [pc, #68]	; (8007ff8 <I2C_DMAError+0x184>)
 8007fb2:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8007fb4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007fb8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8007fba:	f7fc f829 	bl	8004010 <HAL_DMA_Abort_IT>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d0ad      	beq.n	8007f1e <I2C_DMAError+0xaa>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007fc2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
}
 8007fc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007fc8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007fca:	4718      	bx	r3
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007fd6:	e7c8      	b.n	8007f6a <I2C_DMAError+0xf6>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fd8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007fda:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8007fdc:	4628      	mov	r0, r5
    hi2c->State = HAL_I2C_STATE_READY;
 8007fde:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007fe2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fe6:	632b      	str	r3, [r5, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8007fe8:	f7fe fec6 	bl	8006d78 <HAL_I2C_AbortCpltCallback>
}
 8007fec:	bd70      	pop	{r4, r5, r6, pc}
 8007fee:	bf00      	nop
 8007ff0:	ffff0000 	.word	0xffff0000
 8007ff4:	080070b1 	.word	0x080070b1
 8007ff8:	08006d7d 	.word	0x08006d7d

08007ffc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008000:	4b25      	ldr	r3, [pc, #148]	; (8008098 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 8008002:	4826      	ldr	r0, [pc, #152]	; (800809c <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
{
 8008004:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	4925      	ldr	r1, [pc, #148]	; (80080a0 <HAL_I2CEx_ConfigAnalogFilter+0xa4>)
 800800a:	429a      	cmp	r2, r3
 800800c:	bf18      	it	ne
 800800e:	4282      	cmpne	r2, r0
 8008010:	bf14      	ite	ne
 8008012:	2301      	movne	r3, #1
 8008014:	2300      	moveq	r3, #0
 8008016:	428a      	cmp	r2, r1
 8008018:	bf0c      	ite	eq
 800801a:	2300      	moveq	r3, #0
 800801c:	f003 0301 	andne.w	r3, r3, #1
 8008020:	b113      	cbz	r3, 8008028 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8008022:	4b20      	ldr	r3, [pc, #128]	; (80080a4 <HAL_I2CEx_ConfigAnalogFilter+0xa8>)
 8008024:	429a      	cmp	r2, r3
 8008026:	d132      	bne.n	800808e <HAL_I2CEx_ConfigAnalogFilter+0x92>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8008028:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800802c:	d12a      	bne.n	8008084 <HAL_I2CEx_ConfigAnalogFilter+0x88>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800802e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b20      	cmp	r3, #32
 8008036:	d123      	bne.n	8008080 <HAL_I2CEx_ConfigAnalogFilter+0x84>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008038:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800803c:	2a01      	cmp	r2, #1
 800803e:	d01f      	beq.n	8008080 <HAL_I2CEx_ConfigAnalogFilter+0x84>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008040:	6826      	ldr	r6, [r4, #0]
    __HAL_LOCK(hi2c);
 8008042:	2101      	movs	r1, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008044:	2224      	movs	r2, #36	; 0x24
    __HAL_LOCK(hi2c);
 8008046:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800804a:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800804c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8008050:	6832      	ldr	r2, [r6, #0]

    return HAL_OK;
 8008052:	4608      	mov	r0, r1
    __HAL_I2C_DISABLE(hi2c);
 8008054:	f022 0201 	bic.w	r2, r2, #1
 8008058:	6032      	str	r2, [r6, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800805a:	6826      	ldr	r6, [r4, #0]
 800805c:	6832      	ldr	r2, [r6, #0]
 800805e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008062:	6032      	str	r2, [r6, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8008064:	6826      	ldr	r6, [r4, #0]
 8008066:	6832      	ldr	r2, [r6, #0]
 8008068:	4315      	orrs	r5, r2
 800806a:	6035      	str	r5, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 800806c:	6825      	ldr	r5, [r4, #0]
 800806e:	682a      	ldr	r2, [r5, #0]
 8008070:	f042 0201 	orr.w	r2, r2, #1
 8008074:	602a      	str	r2, [r5, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008076:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800807a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800807e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8008080:	2002      	movs	r0, #2
}
 8008082:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8008084:	2165      	movs	r1, #101	; 0x65
 8008086:	4808      	ldr	r0, [pc, #32]	; (80080a8 <HAL_I2CEx_ConfigAnalogFilter+0xac>)
 8008088:	f00b fdd8 	bl	8013c3c <assert_failed>
 800808c:	e7cf      	b.n	800802e <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800808e:	2164      	movs	r1, #100	; 0x64
 8008090:	4805      	ldr	r0, [pc, #20]	; (80080a8 <HAL_I2CEx_ConfigAnalogFilter+0xac>)
 8008092:	f00b fdd3 	bl	8013c3c <assert_failed>
 8008096:	e7c7      	b.n	8008028 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8008098:	40005400 	.word	0x40005400
 800809c:	40005800 	.word	0x40005800
 80080a0:	40005c00 	.word	0x40005c00
 80080a4:	58001c00 	.word	0x58001c00
 80080a8:	0802a3dc 	.word	0x0802a3dc

080080ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	4604      	mov	r4, r0
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80080b0:	4b24      	ldr	r3, [pc, #144]	; (8008144 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 80080b2:	4825      	ldr	r0, [pc, #148]	; (8008148 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
{
 80080b4:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80080b6:	6822      	ldr	r2, [r4, #0]
 80080b8:	4924      	ldr	r1, [pc, #144]	; (800814c <HAL_I2CEx_ConfigDigitalFilter+0xa0>)
 80080ba:	429a      	cmp	r2, r3
 80080bc:	bf18      	it	ne
 80080be:	4282      	cmpne	r2, r0
 80080c0:	bf14      	ite	ne
 80080c2:	2301      	movne	r3, #1
 80080c4:	2300      	moveq	r3, #0
 80080c6:	428a      	cmp	r2, r1
 80080c8:	bf0c      	ite	eq
 80080ca:	2300      	moveq	r3, #0
 80080cc:	f003 0301 	andne.w	r3, r3, #1
 80080d0:	b113      	cbz	r3, 80080d8 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 80080d2:	4b1f      	ldr	r3, [pc, #124]	; (8008150 <HAL_I2CEx_ConfigDigitalFilter+0xa4>)
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d12f      	bne.n	8008138 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80080d8:	2d0f      	cmp	r5, #15
 80080da:	d828      	bhi.n	800812e <HAL_I2CEx_ConfigDigitalFilter+0x82>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080dc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b20      	cmp	r3, #32
 80080e4:	d121      	bne.n	800812a <HAL_I2CEx_ConfigDigitalFilter+0x7e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080e6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80080ea:	2a01      	cmp	r2, #1
 80080ec:	d01d      	beq.n	800812a <HAL_I2CEx_ConfigDigitalFilter+0x7e>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080ee:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 80080f0:	2001      	movs	r0, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80080f2:	2224      	movs	r2, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080f4:	2600      	movs	r6, #0
    __HAL_LOCK(hi2c);
 80080f6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80080fa:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

    return HAL_OK;
 80080fe:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8008100:	680a      	ldr	r2, [r1, #0]
 8008102:	f022 0201 	bic.w	r2, r2, #1
 8008106:	600a      	str	r2, [r1, #0]
    tmpreg = hi2c->Instance->CR1;
 8008108:	6822      	ldr	r2, [r4, #0]
 800810a:	6811      	ldr	r1, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800810c:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8008110:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8008114:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8008116:	6821      	ldr	r1, [r4, #0]
 8008118:	680a      	ldr	r2, [r1, #0]
 800811a:	f042 0201 	orr.w	r2, r2, #1
 800811e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008120:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008124:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008128:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800812a:	2002      	movs	r0, #2
}
 800812c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800812e:	2193      	movs	r1, #147	; 0x93
 8008130:	4808      	ldr	r0, [pc, #32]	; (8008154 <HAL_I2CEx_ConfigDigitalFilter+0xa8>)
 8008132:	f00b fd83 	bl	8013c3c <assert_failed>
 8008136:	e7d1      	b.n	80080dc <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008138:	2192      	movs	r1, #146	; 0x92
 800813a:	4806      	ldr	r0, [pc, #24]	; (8008154 <HAL_I2CEx_ConfigDigitalFilter+0xa8>)
 800813c:	f00b fd7e 	bl	8013c3c <assert_failed>
 8008140:	e7ca      	b.n	80080d8 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8008142:	bf00      	nop
 8008144:	40005400 	.word	0x40005400
 8008148:	40005800 	.word	0x40005800
 800814c:	40005c00 	.word	0x40005c00
 8008150:	58001c00 	.word	0x58001c00
 8008154:	0802a3dc 	.word	0x0802a3dc

08008158 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008158:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 800815a:	1e43      	subs	r3, r0, #1
{
 800815c:	4604      	mov	r4, r0
  assert_param (IS_PWR_SUPPLY (SupplySource));
 800815e:	2b01      	cmp	r3, #1
 8008160:	d904      	bls.n	800816c <HAL_PWREx_ConfigSupply+0x14>
 8008162:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8008166:	4812      	ldr	r0, [pc, #72]	; (80081b0 <HAL_PWREx_ConfigSupply+0x58>)
 8008168:	f00b fd68 	bl	8013c3c <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800816c:	4b11      	ldr	r3, [pc, #68]	; (80081b4 <HAL_PWREx_ConfigSupply+0x5c>)
 800816e:	68da      	ldr	r2, [r3, #12]
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008170:	68d8      	ldr	r0, [r3, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008172:	0752      	lsls	r2, r2, #29
 8008174:	d405      	bmi.n	8008182 <HAL_PWREx_ConfigSupply+0x2a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008176:	f000 0007 	and.w	r0, r0, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800817a:	1b00      	subs	r0, r0, r4
 800817c:	bf18      	it	ne
 800817e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008180:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008182:	f020 0007 	bic.w	r0, r0, #7
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008186:	461d      	mov	r5, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008188:	4320      	orrs	r0, r4
 800818a:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 800818c:	f7f8 fd5a 	bl	8000c44 <HAL_GetTick>
 8008190:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008192:	e005      	b.n	80081a0 <HAL_PWREx_ConfigSupply+0x48>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008194:	f7f8 fd56 	bl	8000c44 <HAL_GetTick>
 8008198:	1b00      	subs	r0, r0, r4
 800819a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800819e:	d804      	bhi.n	80081aa <HAL_PWREx_ConfigSupply+0x52>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081a0:	686b      	ldr	r3, [r5, #4]
 80081a2:	049b      	lsls	r3, r3, #18
 80081a4:	d5f6      	bpl.n	8008194 <HAL_PWREx_ConfigSupply+0x3c>
  return HAL_OK;
 80081a6:	2000      	movs	r0, #0
}
 80081a8:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80081aa:	2001      	movs	r0, #1
}
 80081ac:	bd38      	pop	{r3, r4, r5, pc}
 80081ae:	bf00      	nop
 80081b0:	0802a418 	.word	0x0802a418
 80081b4:	58024800 	.word	0x58024800

080081b8 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80081b8:	4a02      	ldr	r2, [pc, #8]	; (80081c4 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 80081ba:	68d3      	ldr	r3, [r2, #12]
 80081bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081c0:	60d3      	str	r3, [r2, #12]
}
 80081c2:	4770      	bx	lr
 80081c4:	58024800 	.word	0x58024800

080081c8 <HAL_PWREx_DisableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_DisableUSBVoltageDetector (void)
{
  /* Disable the USB voltage detector */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80081c8:	4a02      	ldr	r2, [pc, #8]	; (80081d4 <HAL_PWREx_DisableUSBVoltageDetector+0xc>)
 80081ca:	68d3      	ldr	r3, [r2, #12]
 80081cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081d0:	60d3      	str	r3, [r2, #12]
}
 80081d2:	4770      	bx	lr
 80081d4:	58024800 	.word	0x58024800

080081d8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081d8:	2800      	cmp	r0, #0
 80081da:	f000 823c 	beq.w	8008656 <HAL_RCC_OscConfig+0x47e>
{
 80081de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80081e0:	6803      	ldr	r3, [r0, #0]
 80081e2:	4604      	mov	r4, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 80a6 	beq.w	8008336 <HAL_RCC_OscConfig+0x15e>
 80081ea:	0698      	lsls	r0, r3, #26
 80081ec:	f000 821e 	beq.w	800862c <HAL_RCC_OscConfig+0x454>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081f0:	07d9      	lsls	r1, r3, #31
 80081f2:	d536      	bpl.n	8008262 <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80081f4:	6863      	ldr	r3, [r4, #4]
 80081f6:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 80081fa:	d003      	beq.n	8008204 <HAL_RCC_OscConfig+0x2c>
 80081fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008200:	f040 81e8 	bne.w	80085d4 <HAL_RCC_OscConfig+0x3fc>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008204:	4aa7      	ldr	r2, [pc, #668]	; (80084a4 <HAL_RCC_OscConfig+0x2cc>)
 8008206:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008208:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800820a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800820e:	2b10      	cmp	r3, #16
 8008210:	f000 81f2 	beq.w	80085f8 <HAL_RCC_OscConfig+0x420>
 8008214:	2b18      	cmp	r3, #24
 8008216:	f000 81ea 	beq.w	80085ee <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800821a:	6863      	ldr	r3, [r4, #4]
 800821c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008220:	f000 81f5 	beq.w	800860e <HAL_RCC_OscConfig+0x436>
 8008224:	2b00      	cmp	r3, #0
 8008226:	f040 8267 	bne.w	80086f8 <HAL_RCC_OscConfig+0x520>
 800822a:	4b9e      	ldr	r3, [pc, #632]	; (80084a4 <HAL_RCC_OscConfig+0x2cc>)
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800823a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800823c:	6863      	ldr	r3, [r4, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 81fb 	beq.w	800863a <HAL_RCC_OscConfig+0x462>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008244:	f7f8 fcfe 	bl	8000c44 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008248:	4d96      	ldr	r5, [pc, #600]	; (80084a4 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800824a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800824c:	e005      	b.n	800825a <HAL_RCC_OscConfig+0x82>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800824e:	f7f8 fcf9 	bl	8000c44 <HAL_GetTick>
 8008252:	1b80      	subs	r0, r0, r6
 8008254:	2864      	cmp	r0, #100	; 0x64
 8008256:	f200 81e7 	bhi.w	8008628 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800825a:	682b      	ldr	r3, [r5, #0]
 800825c:	039b      	lsls	r3, r3, #14
 800825e:	d5f6      	bpl.n	800824e <HAL_RCC_OscConfig+0x76>
 8008260:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008262:	0798      	lsls	r0, r3, #30
 8008264:	d52b      	bpl.n	80082be <HAL_RCC_OscConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8008266:	68e2      	ldr	r2, [r4, #12]
 8008268:	2a19      	cmp	r2, #25
 800826a:	f200 8288 	bhi.w	800877e <HAL_RCC_OscConfig+0x5a6>
 800826e:	4b8e      	ldr	r3, [pc, #568]	; (80084a8 <HAL_RCC_OscConfig+0x2d0>)
 8008270:	40d3      	lsrs	r3, r2
 8008272:	07d9      	lsls	r1, r3, #31
 8008274:	f140 8283 	bpl.w	800877e <HAL_RCC_OscConfig+0x5a6>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	2b7f      	cmp	r3, #127	; 0x7f
 800827c:	f200 81a4 	bhi.w	80085c8 <HAL_RCC_OscConfig+0x3f0>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008280:	4a88      	ldr	r2, [pc, #544]	; (80084a4 <HAL_RCC_OscConfig+0x2cc>)
 8008282:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008284:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008286:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800828a:	f040 8173 	bne.w	8008574 <HAL_RCC_OscConfig+0x39c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800828e:	4b85      	ldr	r3, [pc, #532]	; (80084a4 <HAL_RCC_OscConfig+0x2cc>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	075b      	lsls	r3, r3, #29
 8008294:	d503      	bpl.n	800829e <HAL_RCC_OscConfig+0xc6>
 8008296:	68e3      	ldr	r3, [r4, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 81b6 	beq.w	800860a <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800829e:	f7f8 fce9 	bl	8000c74 <HAL_GetREVID>
 80082a2:	f241 0303 	movw	r3, #4099	; 0x1003
 80082a6:	4a7f      	ldr	r2, [pc, #508]	; (80084a4 <HAL_RCC_OscConfig+0x2cc>)
 80082a8:	4298      	cmp	r0, r3
 80082aa:	6921      	ldr	r1, [r4, #16]
 80082ac:	6853      	ldr	r3, [r2, #4]
 80082ae:	f200 825b 	bhi.w	8008768 <HAL_RCC_OscConfig+0x590>
 80082b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80082b6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80082ba:	6053      	str	r3, [r2, #4]
 80082bc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80082be:	06d9      	lsls	r1, r3, #27
 80082c0:	d539      	bpl.n	8008336 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 80082c2:	69e3      	ldr	r3, [r4, #28]
 80082c4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80082c8:	f040 81fd 	bne.w	80086c6 <HAL_RCC_OscConfig+0x4ee>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 80082cc:	6a23      	ldr	r3, [r4, #32]
 80082ce:	2b3f      	cmp	r3, #63	; 0x3f
 80082d0:	f200 81f3 	bhi.w	80086ba <HAL_RCC_OscConfig+0x4e2>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082d4:	4a73      	ldr	r2, [pc, #460]	; (80084a4 <HAL_RCC_OscConfig+0x2cc>)
 80082d6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082da:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80082de:	2b08      	cmp	r3, #8
 80082e0:	f000 81c0 	beq.w	8008664 <HAL_RCC_OscConfig+0x48c>
 80082e4:	2b18      	cmp	r3, #24
 80082e6:	f000 81b8 	beq.w	800865a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80082ea:	69e3      	ldr	r3, [r4, #28]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8211 	beq.w	8008714 <HAL_RCC_OscConfig+0x53c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80082f2:	4b6c      	ldr	r3, [pc, #432]	; (80084a4 <HAL_RCC_OscConfig+0x2cc>)
 80082f4:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082f6:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 80082f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80082fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80082fe:	f7f8 fca1 	bl	8000c44 <HAL_GetTick>
 8008302:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008304:	e005      	b.n	8008312 <HAL_RCC_OscConfig+0x13a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008306:	f7f8 fc9d 	bl	8000c44 <HAL_GetTick>
 800830a:	1b80      	subs	r0, r0, r6
 800830c:	2802      	cmp	r0, #2
 800830e:	f200 818b 	bhi.w	8008628 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008312:	682b      	ldr	r3, [r5, #0]
 8008314:	05db      	lsls	r3, r3, #23
 8008316:	d5f6      	bpl.n	8008306 <HAL_RCC_OscConfig+0x12e>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008318:	f7f8 fcac 	bl	8000c74 <HAL_GetREVID>
 800831c:	f241 0303 	movw	r3, #4099	; 0x1003
 8008320:	4298      	cmp	r0, r3
 8008322:	f200 82b5 	bhi.w	8008890 <HAL_RCC_OscConfig+0x6b8>
 8008326:	686b      	ldr	r3, [r5, #4]
 8008328:	6a22      	ldr	r2, [r4, #32]
 800832a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800832e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8008332:	606b      	str	r3, [r5, #4]
 8008334:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008336:	071d      	lsls	r5, r3, #28
 8008338:	d51a      	bpl.n	8008370 <HAL_RCC_OscConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800833a:	6963      	ldr	r3, [r4, #20]
 800833c:	2b01      	cmp	r3, #1
 800833e:	f200 814f 	bhi.w	80085e0 <HAL_RCC_OscConfig+0x408>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 81a6 	beq.w	8008694 <HAL_RCC_OscConfig+0x4bc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008348:	4b56      	ldr	r3, [pc, #344]	; (80084a4 <HAL_RCC_OscConfig+0x2cc>)
 800834a:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800834c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800834e:	f042 0201 	orr.w	r2, r2, #1
 8008352:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008354:	f7f8 fc76 	bl	8000c44 <HAL_GetTick>
 8008358:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800835a:	e005      	b.n	8008368 <HAL_RCC_OscConfig+0x190>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800835c:	f7f8 fc72 	bl	8000c44 <HAL_GetTick>
 8008360:	1b80      	subs	r0, r0, r6
 8008362:	2802      	cmp	r0, #2
 8008364:	f200 8160 	bhi.w	8008628 <HAL_RCC_OscConfig+0x450>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008368:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800836a:	0798      	lsls	r0, r3, #30
 800836c:	d5f6      	bpl.n	800835c <HAL_RCC_OscConfig+0x184>
 800836e:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008370:	069a      	lsls	r2, r3, #26
 8008372:	d51a      	bpl.n	80083aa <HAL_RCC_OscConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8008374:	69a3      	ldr	r3, [r4, #24]
 8008376:	2b01      	cmp	r3, #1
 8008378:	f200 814f 	bhi.w	800861a <HAL_RCC_OscConfig+0x442>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 81a8 	beq.w	80086d2 <HAL_RCC_OscConfig+0x4fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008382:	4b48      	ldr	r3, [pc, #288]	; (80084a4 <HAL_RCC_OscConfig+0x2cc>)
 8008384:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008386:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8008388:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800838c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800838e:	f7f8 fc59 	bl	8000c44 <HAL_GetTick>
 8008392:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008394:	e005      	b.n	80083a2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008396:	f7f8 fc55 	bl	8000c44 <HAL_GetTick>
 800839a:	1b80      	subs	r0, r0, r6
 800839c:	2802      	cmp	r0, #2
 800839e:	f200 8143 	bhi.w	8008628 <HAL_RCC_OscConfig+0x450>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083a2:	682b      	ldr	r3, [r5, #0]
 80083a4:	049f      	lsls	r7, r3, #18
 80083a6:	d5f6      	bpl.n	8008396 <HAL_RCC_OscConfig+0x1be>
 80083a8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083aa:	0759      	lsls	r1, r3, #29
 80083ac:	d53c      	bpl.n	8008428 <HAL_RCC_OscConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80083ae:	68a3      	ldr	r3, [r4, #8]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d902      	bls.n	80083ba <HAL_RCC_OscConfig+0x1e2>
 80083b4:	2b05      	cmp	r3, #5
 80083b6:	f040 81f8 	bne.w	80087aa <HAL_RCC_OscConfig+0x5d2>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80083ba:	4b3c      	ldr	r3, [pc, #240]	; (80084ac <HAL_RCC_OscConfig+0x2d4>)
 80083bc:	681a      	ldr	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083be:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 80083c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083c4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80083c6:	f7f8 fc3d 	bl	8000c44 <HAL_GetTick>
 80083ca:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083cc:	e005      	b.n	80083da <HAL_RCC_OscConfig+0x202>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80083ce:	f7f8 fc39 	bl	8000c44 <HAL_GetTick>
 80083d2:	1b80      	subs	r0, r0, r6
 80083d4:	2864      	cmp	r0, #100	; 0x64
 80083d6:	f200 8127 	bhi.w	8008628 <HAL_RCC_OscConfig+0x450>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083da:	682b      	ldr	r3, [r5, #0]
 80083dc:	05da      	lsls	r2, r3, #23
 80083de:	d5f6      	bpl.n	80083ce <HAL_RCC_OscConfig+0x1f6>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083e0:	68a3      	ldr	r3, [r4, #8]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	f000 821d 	beq.w	8008822 <HAL_RCC_OscConfig+0x64a>
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f040 8244 	bne.w	8008876 <HAL_RCC_OscConfig+0x69e>
 80083ee:	4b2d      	ldr	r3, [pc, #180]	; (80084a4 <HAL_RCC_OscConfig+0x2cc>)
 80083f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083f2:	f022 0201 	bic.w	r2, r2, #1
 80083f6:	671a      	str	r2, [r3, #112]	; 0x70
 80083f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083fa:	f022 0204 	bic.w	r2, r2, #4
 80083fe:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008400:	68a3      	ldr	r3, [r4, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 8213 	beq.w	800882e <HAL_RCC_OscConfig+0x656>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008408:	f7f8 fc1c 	bl	8000c44 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800840c:	4d25      	ldr	r5, [pc, #148]	; (80084a4 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 800840e:	4607      	mov	r7, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008410:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008414:	e005      	b.n	8008422 <HAL_RCC_OscConfig+0x24a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008416:	f7f8 fc15 	bl	8000c44 <HAL_GetTick>
 800841a:	1bc0      	subs	r0, r0, r7
 800841c:	42b0      	cmp	r0, r6
 800841e:	f200 8103 	bhi.w	8008628 <HAL_RCC_OscConfig+0x450>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008422:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008424:	079b      	lsls	r3, r3, #30
 8008426:	d5f6      	bpl.n	8008416 <HAL_RCC_OscConfig+0x23e>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008428:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800842a:	2802      	cmp	r0, #2
 800842c:	f200 81b6 	bhi.w	800879c <HAL_RCC_OscConfig+0x5c4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008430:	2800      	cmp	r0, #0
 8008432:	f000 809d 	beq.w	8008570 <HAL_RCC_OscConfig+0x398>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008436:	4a1b      	ldr	r2, [pc, #108]	; (80084a4 <HAL_RCC_OscConfig+0x2cc>)
 8008438:	6913      	ldr	r3, [r2, #16]
 800843a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800843e:	2b18      	cmp	r3, #24
 8008440:	f000 81c1 	beq.w	80087c6 <HAL_RCC_OscConfig+0x5ee>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008444:	2802      	cmp	r0, #2
 8008446:	f040 8203 	bne.w	8008850 <HAL_RCC_OscConfig+0x678>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800844a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800844c:	2b03      	cmp	r3, #3
 800844e:	f200 8253 	bhi.w	80088f8 <HAL_RCC_OscConfig+0x720>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008452:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008454:	3b01      	subs	r3, #1
 8008456:	2b3e      	cmp	r3, #62	; 0x3e
 8008458:	f200 8230 	bhi.w	80088bc <HAL_RCC_OscConfig+0x6e4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800845c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800845e:	3b04      	subs	r3, #4
 8008460:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8008464:	f200 8224 	bhi.w	80088b0 <HAL_RCC_OscConfig+0x6d8>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008468:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800846a:	3b01      	subs	r3, #1
 800846c:	2b7f      	cmp	r3, #127	; 0x7f
 800846e:	f200 823d 	bhi.w	80088ec <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8008472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008474:	3b01      	subs	r3, #1
 8008476:	2b7f      	cmp	r3, #127	; 0x7f
 8008478:	f200 8232 	bhi.w	80088e0 <HAL_RCC_OscConfig+0x708>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800847c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800847e:	3b01      	subs	r3, #1
 8008480:	2b7f      	cmp	r3, #127	; 0x7f
 8008482:	f200 8227 	bhi.w	80088d4 <HAL_RCC_OscConfig+0x6fc>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8008486:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800848c:	f080 821c 	bcs.w	80088c8 <HAL_RCC_OscConfig+0x6f0>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008490:	4b04      	ldr	r3, [pc, #16]	; (80084a4 <HAL_RCC_OscConfig+0x2cc>)
 8008492:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008494:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8008496:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800849a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800849c:	f7f8 fbd2 	bl	8000c44 <HAL_GetTick>
 80084a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084a2:	e00b      	b.n	80084bc <HAL_RCC_OscConfig+0x2e4>
 80084a4:	58024400 	.word	0x58024400
 80084a8:	02020203 	.word	0x02020203
 80084ac:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084b0:	f7f8 fbc8 	bl	8000c44 <HAL_GetTick>
 80084b4:	1b80      	subs	r0, r0, r6
 80084b6:	2802      	cmp	r0, #2
 80084b8:	f200 80b6 	bhi.w	8008628 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	0199      	lsls	r1, r3, #6
 80084c0:	d4f6      	bmi.n	80084b0 <HAL_RCC_OscConfig+0x2d8>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084c2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80084c4:	4bb1      	ldr	r3, [pc, #708]	; (800878c <HAL_RCC_OscConfig+0x5b4>)
 80084c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80084c8:	4013      	ands	r3, r2
 80084ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084cc:	49b0      	ldr	r1, [pc, #704]	; (8008790 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084ce:	4303      	orrs	r3, r0

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084d0:	4eb0      	ldr	r6, [pc, #704]	; (8008794 <HAL_RCC_OscConfig+0x5bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084d2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80084d6:	62ab      	str	r3, [r5, #40]	; 0x28
 80084d8:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80084da:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80084de:	3f01      	subs	r7, #1
 80084e0:	1e50      	subs	r0, r2, #1
 80084e2:	3b01      	subs	r3, #1
 80084e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80084e6:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80084ea:	025b      	lsls	r3, r3, #9
 80084ec:	0400      	lsls	r0, r0, #16
 80084ee:	3a01      	subs	r2, #1
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80084f6:	0612      	lsls	r2, r2, #24
 80084f8:	4303      	orrs	r3, r0
 80084fa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80084fe:	433b      	orrs	r3, r7
 8008500:	4313      	orrs	r3, r2
 8008502:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008504:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008506:	f023 0301 	bic.w	r3, r3, #1
 800850a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800850c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800850e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008510:	4011      	ands	r1, r2
 8008512:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008516:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008518:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800851a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800851c:	f023 030c 	bic.w	r3, r3, #12
 8008520:	4313      	orrs	r3, r2
 8008522:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008524:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008526:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008528:	f023 0302 	bic.w	r3, r3, #2
 800852c:	4313      	orrs	r3, r2
 800852e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008530:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008536:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008538:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800853a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800853e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008540:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008546:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8008548:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800854a:	f043 0301 	orr.w	r3, r3, #1
 800854e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008556:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008558:	f7f8 fb74 	bl	8000c44 <HAL_GetTick>
 800855c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800855e:	e004      	b.n	800856a <HAL_RCC_OscConfig+0x392>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008560:	f7f8 fb70 	bl	8000c44 <HAL_GetTick>
 8008564:	1b00      	subs	r0, r0, r4
 8008566:	2802      	cmp	r0, #2
 8008568:	d85e      	bhi.n	8008628 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800856a:	6833      	ldr	r3, [r6, #0]
 800856c:	019a      	lsls	r2, r3, #6
 800856e:	d5f7      	bpl.n	8008560 <HAL_RCC_OscConfig+0x388>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8008570:	2000      	movs	r0, #0
}
 8008572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008574:	2b18      	cmp	r3, #24
 8008576:	f000 80fe 	beq.w	8008776 <HAL_RCC_OscConfig+0x59e>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800857a:	68e2      	ldr	r2, [r4, #12]
 800857c:	2a00      	cmp	r2, #0
 800857e:	f000 80de 	beq.w	800873e <HAL_RCC_OscConfig+0x566>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008582:	4984      	ldr	r1, [pc, #528]	; (8008794 <HAL_RCC_OscConfig+0x5bc>)
 8008584:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008586:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008588:	f023 0319 	bic.w	r3, r3, #25
 800858c:	4313      	orrs	r3, r2
 800858e:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8008590:	f7f8 fb58 	bl	8000c44 <HAL_GetTick>
 8008594:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008596:	e004      	b.n	80085a2 <HAL_RCC_OscConfig+0x3ca>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008598:	f7f8 fb54 	bl	8000c44 <HAL_GetTick>
 800859c:	1b80      	subs	r0, r0, r6
 800859e:	2802      	cmp	r0, #2
 80085a0:	d842      	bhi.n	8008628 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085a2:	682b      	ldr	r3, [r5, #0]
 80085a4:	075f      	lsls	r7, r3, #29
 80085a6:	d5f7      	bpl.n	8008598 <HAL_RCC_OscConfig+0x3c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085a8:	f7f8 fb64 	bl	8000c74 <HAL_GetREVID>
 80085ac:	f241 0303 	movw	r3, #4099	; 0x1003
 80085b0:	6922      	ldr	r2, [r4, #16]
 80085b2:	4298      	cmp	r0, r3
 80085b4:	686b      	ldr	r3, [r5, #4]
 80085b6:	f200 8174 	bhi.w	80088a2 <HAL_RCC_OscConfig+0x6ca>
 80085ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80085be:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80085c2:	606b      	str	r3, [r5, #4]
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	e67a      	b.n	80082be <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80085c8:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80085cc:	4872      	ldr	r0, [pc, #456]	; (8008798 <HAL_RCC_OscConfig+0x5c0>)
 80085ce:	f00b fb35 	bl	8013c3c <assert_failed>
 80085d2:	e655      	b.n	8008280 <HAL_RCC_OscConfig+0xa8>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80085d4:	f240 11a3 	movw	r1, #419	; 0x1a3
 80085d8:	486f      	ldr	r0, [pc, #444]	; (8008798 <HAL_RCC_OscConfig+0x5c0>)
 80085da:	f00b fb2f 	bl	8013c3c <assert_failed>
 80085de:	e611      	b.n	8008204 <HAL_RCC_OscConfig+0x2c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80085e0:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80085e4:	486c      	ldr	r0, [pc, #432]	; (8008798 <HAL_RCC_OscConfig+0x5c0>)
 80085e6:	f00b fb29 	bl	8013c3c <assert_failed>
 80085ea:	6963      	ldr	r3, [r4, #20]
 80085ec:	e6a9      	b.n	8008342 <HAL_RCC_OscConfig+0x16a>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80085ee:	f002 0203 	and.w	r2, r2, #3
 80085f2:	2a02      	cmp	r2, #2
 80085f4:	f47f ae11 	bne.w	800821a <HAL_RCC_OscConfig+0x42>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085f8:	4b66      	ldr	r3, [pc, #408]	; (8008794 <HAL_RCC_OscConfig+0x5bc>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	039a      	lsls	r2, r3, #14
 80085fe:	f57f ae2f 	bpl.w	8008260 <HAL_RCC_OscConfig+0x88>
 8008602:	6863      	ldr	r3, [r4, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	f47f ae2b 	bne.w	8008260 <HAL_RCC_OscConfig+0x88>
        return HAL_ERROR;
 800860a:	2001      	movs	r0, #1
}
 800860c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800860e:	4a61      	ldr	r2, [pc, #388]	; (8008794 <HAL_RCC_OscConfig+0x5bc>)
 8008610:	6813      	ldr	r3, [r2, #0]
 8008612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	e610      	b.n	800823c <HAL_RCC_OscConfig+0x64>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800861a:	f240 2187 	movw	r1, #647	; 0x287
 800861e:	485e      	ldr	r0, [pc, #376]	; (8008798 <HAL_RCC_OscConfig+0x5c0>)
 8008620:	f00b fb0c 	bl	8013c3c <assert_failed>
 8008624:	69a3      	ldr	r3, [r4, #24]
 8008626:	e6a9      	b.n	800837c <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8008628:	2003      	movs	r0, #3
}
 800862a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800862c:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8008630:	4859      	ldr	r0, [pc, #356]	; (8008798 <HAL_RCC_OscConfig+0x5c0>)
 8008632:	f00b fb03 	bl	8013c3c <assert_failed>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	e5da      	b.n	80081f0 <HAL_RCC_OscConfig+0x18>
        tickstart = HAL_GetTick();
 800863a:	f7f8 fb03 	bl	8000c44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800863e:	4d55      	ldr	r5, [pc, #340]	; (8008794 <HAL_RCC_OscConfig+0x5bc>)
        tickstart = HAL_GetTick();
 8008640:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008642:	e004      	b.n	800864e <HAL_RCC_OscConfig+0x476>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008644:	f7f8 fafe 	bl	8000c44 <HAL_GetTick>
 8008648:	1b80      	subs	r0, r0, r6
 800864a:	2864      	cmp	r0, #100	; 0x64
 800864c:	d8ec      	bhi.n	8008628 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800864e:	682b      	ldr	r3, [r5, #0]
 8008650:	039f      	lsls	r7, r3, #14
 8008652:	d4f7      	bmi.n	8008644 <HAL_RCC_OscConfig+0x46c>
 8008654:	e604      	b.n	8008260 <HAL_RCC_OscConfig+0x88>
    return HAL_ERROR;
 8008656:	2001      	movs	r0, #1
}
 8008658:	4770      	bx	lr
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800865a:	f002 0203 	and.w	r2, r2, #3
 800865e:	2a01      	cmp	r2, #1
 8008660:	f47f ae43 	bne.w	80082ea <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008664:	4b4b      	ldr	r3, [pc, #300]	; (8008794 <HAL_RCC_OscConfig+0x5bc>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	05da      	lsls	r2, r3, #23
 800866a:	d502      	bpl.n	8008672 <HAL_RCC_OscConfig+0x49a>
 800866c:	69e3      	ldr	r3, [r4, #28]
 800866e:	2b80      	cmp	r3, #128	; 0x80
 8008670:	d1cb      	bne.n	800860a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008672:	f7f8 faff 	bl	8000c74 <HAL_GetREVID>
 8008676:	f241 0303 	movw	r3, #4099	; 0x1003
 800867a:	4a46      	ldr	r2, [pc, #280]	; (8008794 <HAL_RCC_OscConfig+0x5bc>)
 800867c:	4298      	cmp	r0, r3
 800867e:	6a21      	ldr	r1, [r4, #32]
 8008680:	f200 8099 	bhi.w	80087b6 <HAL_RCC_OscConfig+0x5de>
 8008684:	6853      	ldr	r3, [r2, #4]
 8008686:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800868a:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 800868e:	6053      	str	r3, [r2, #4]
 8008690:	6823      	ldr	r3, [r4, #0]
 8008692:	e650      	b.n	8008336 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_LSI_DISABLE();
 8008694:	4b3f      	ldr	r3, [pc, #252]	; (8008794 <HAL_RCC_OscConfig+0x5bc>)
 8008696:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008698:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800869a:	f022 0201 	bic.w	r2, r2, #1
 800869e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80086a0:	f7f8 fad0 	bl	8000c44 <HAL_GetTick>
 80086a4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086a6:	e004      	b.n	80086b2 <HAL_RCC_OscConfig+0x4da>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086a8:	f7f8 facc 	bl	8000c44 <HAL_GetTick>
 80086ac:	1b80      	subs	r0, r0, r6
 80086ae:	2802      	cmp	r0, #2
 80086b0:	d8ba      	bhi.n	8008628 <HAL_RCC_OscConfig+0x450>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086b2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80086b4:	0799      	lsls	r1, r3, #30
 80086b6:	d4f7      	bmi.n	80086a8 <HAL_RCC_OscConfig+0x4d0>
 80086b8:	e659      	b.n	800836e <HAL_RCC_OscConfig+0x196>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 80086ba:	f240 211b 	movw	r1, #539	; 0x21b
 80086be:	4836      	ldr	r0, [pc, #216]	; (8008798 <HAL_RCC_OscConfig+0x5c0>)
 80086c0:	f00b fabc 	bl	8013c3c <assert_failed>
 80086c4:	e606      	b.n	80082d4 <HAL_RCC_OscConfig+0xfc>
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 80086c6:	f240 211a 	movw	r1, #538	; 0x21a
 80086ca:	4833      	ldr	r0, [pc, #204]	; (8008798 <HAL_RCC_OscConfig+0x5c0>)
 80086cc:	f00b fab6 	bl	8013c3c <assert_failed>
 80086d0:	e5fc      	b.n	80082cc <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_HSI48_DISABLE();
 80086d2:	4b30      	ldr	r3, [pc, #192]	; (8008794 <HAL_RCC_OscConfig+0x5bc>)
 80086d4:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086d6:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 80086d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80086dc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80086de:	f7f8 fab1 	bl	8000c44 <HAL_GetTick>
 80086e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086e4:	e004      	b.n	80086f0 <HAL_RCC_OscConfig+0x518>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80086e6:	f7f8 faad 	bl	8000c44 <HAL_GetTick>
 80086ea:	1b80      	subs	r0, r0, r6
 80086ec:	2802      	cmp	r0, #2
 80086ee:	d89b      	bhi.n	8008628 <HAL_RCC_OscConfig+0x450>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	0498      	lsls	r0, r3, #18
 80086f4:	d4f7      	bmi.n	80086e6 <HAL_RCC_OscConfig+0x50e>
 80086f6:	e657      	b.n	80083a8 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086fc:	4b25      	ldr	r3, [pc, #148]	; (8008794 <HAL_RCC_OscConfig+0x5bc>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	f47f ad95 	bne.w	800822e <HAL_RCC_OscConfig+0x56>
 8008704:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	e593      	b.n	800823c <HAL_RCC_OscConfig+0x64>
        __HAL_RCC_CSI_DISABLE();
 8008714:	4b1f      	ldr	r3, [pc, #124]	; (8008794 <HAL_RCC_OscConfig+0x5bc>)
 8008716:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008718:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 800871a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800871e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008720:	f7f8 fa90 	bl	8000c44 <HAL_GetTick>
 8008724:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008726:	e005      	b.n	8008734 <HAL_RCC_OscConfig+0x55c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008728:	f7f8 fa8c 	bl	8000c44 <HAL_GetTick>
 800872c:	1b80      	subs	r0, r0, r6
 800872e:	2802      	cmp	r0, #2
 8008730:	f63f af7a 	bhi.w	8008628 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	05df      	lsls	r7, r3, #23
 8008738:	d4f6      	bmi.n	8008728 <HAL_RCC_OscConfig+0x550>
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	e5fb      	b.n	8008336 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 800873e:	4b15      	ldr	r3, [pc, #84]	; (8008794 <HAL_RCC_OscConfig+0x5bc>)
 8008740:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008742:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8008744:	f022 0201 	bic.w	r2, r2, #1
 8008748:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800874a:	f7f8 fa7b 	bl	8000c44 <HAL_GetTick>
 800874e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008750:	e005      	b.n	800875e <HAL_RCC_OscConfig+0x586>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008752:	f7f8 fa77 	bl	8000c44 <HAL_GetTick>
 8008756:	1b80      	subs	r0, r0, r6
 8008758:	2802      	cmp	r0, #2
 800875a:	f63f af65 	bhi.w	8008628 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800875e:	682b      	ldr	r3, [r5, #0]
 8008760:	0758      	lsls	r0, r3, #29
 8008762:	d4f6      	bmi.n	8008752 <HAL_RCC_OscConfig+0x57a>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	e5aa      	b.n	80082be <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008768:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800876c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008770:	6053      	str	r3, [r2, #4]
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	e5a3      	b.n	80082be <HAL_RCC_OscConfig+0xe6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008776:	0792      	lsls	r2, r2, #30
 8008778:	f47f aeff 	bne.w	800857a <HAL_RCC_OscConfig+0x3a2>
 800877c:	e587      	b.n	800828e <HAL_RCC_OscConfig+0xb6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800877e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8008782:	4805      	ldr	r0, [pc, #20]	; (8008798 <HAL_RCC_OscConfig+0x5c0>)
 8008784:	f00b fa5a 	bl	8013c3c <assert_failed>
 8008788:	e576      	b.n	8008278 <HAL_RCC_OscConfig+0xa0>
 800878a:	bf00      	nop
 800878c:	fffffc0c 	.word	0xfffffc0c
 8008790:	ffff0007 	.word	0xffff0007
 8008794:	58024400 	.word	0x58024400
 8008798:	0802a454 	.word	0x0802a454
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800879c:	4859      	ldr	r0, [pc, #356]	; (8008904 <HAL_RCC_OscConfig+0x72c>)
 800879e:	f240 21e3 	movw	r1, #739	; 0x2e3
 80087a2:	f00b fa4b 	bl	8013c3c <assert_failed>
 80087a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80087a8:	e642      	b.n	8008430 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80087aa:	f240 21b1 	movw	r1, #689	; 0x2b1
 80087ae:	4855      	ldr	r0, [pc, #340]	; (8008904 <HAL_RCC_OscConfig+0x72c>)
 80087b0:	f00b fa44 	bl	8013c3c <assert_failed>
 80087b4:	e601      	b.n	80083ba <HAL_RCC_OscConfig+0x1e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087b6:	68d3      	ldr	r3, [r2, #12]
 80087b8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80087bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80087c0:	60d3      	str	r3, [r2, #12]
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	e5b7      	b.n	8008336 <HAL_RCC_OscConfig+0x15e>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087c6:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80087c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80087ca:	6b15      	ldr	r5, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087cc:	f43f aed1 	beq.w	8008572 <HAL_RCC_OscConfig+0x39a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087d0:	f001 0303 	and.w	r3, r1, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80087d6:	4293      	cmp	r3, r2
 80087d8:	f47f af17 	bne.w	800860a <HAL_RCC_OscConfig+0x432>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087dc:	f3c1 1105 	ubfx	r1, r1, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80087e2:	4299      	cmp	r1, r3
 80087e4:	f47f af11 	bne.w	800860a <HAL_RCC_OscConfig+0x432>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80087ea:	f3c5 0208 	ubfx	r2, r5, #0, #9
 80087ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087f0:	429a      	cmp	r2, r3
 80087f2:	f47f af0a 	bne.w	800860a <HAL_RCC_OscConfig+0x432>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087f8:	f3c5 2246 	ubfx	r2, r5, #9, #7
 80087fc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087fe:	429a      	cmp	r2, r3
 8008800:	f47f af03 	bne.w	800860a <HAL_RCC_OscConfig+0x432>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008804:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008806:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800880a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800880c:	429a      	cmp	r2, r3
 800880e:	f47f aefc 	bne.w	800860a <HAL_RCC_OscConfig+0x432>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008812:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008814:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8008818:	3801      	subs	r0, #1
    return HAL_ERROR;
 800881a:	1a28      	subs	r0, r5, r0
 800881c:	bf18      	it	ne
 800881e:	2001      	movne	r0, #1
 8008820:	e6a7      	b.n	8008572 <HAL_RCC_OscConfig+0x39a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008822:	4a39      	ldr	r2, [pc, #228]	; (8008908 <HAL_RCC_OscConfig+0x730>)
 8008824:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8008826:	f043 0301 	orr.w	r3, r3, #1
 800882a:	6713      	str	r3, [r2, #112]	; 0x70
 800882c:	e5e8      	b.n	8008400 <HAL_RCC_OscConfig+0x228>
      tickstart = HAL_GetTick();
 800882e:	f7f8 fa09 	bl	8000c44 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008832:	4d35      	ldr	r5, [pc, #212]	; (8008908 <HAL_RCC_OscConfig+0x730>)
      tickstart = HAL_GetTick();
 8008834:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008836:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800883a:	e005      	b.n	8008848 <HAL_RCC_OscConfig+0x670>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800883c:	f7f8 fa02 	bl	8000c44 <HAL_GetTick>
 8008840:	1bc0      	subs	r0, r0, r7
 8008842:	42b0      	cmp	r0, r6
 8008844:	f63f aef0 	bhi.w	8008628 <HAL_RCC_OscConfig+0x450>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008848:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800884a:	0798      	lsls	r0, r3, #30
 800884c:	d4f6      	bmi.n	800883c <HAL_RCC_OscConfig+0x664>
 800884e:	e5eb      	b.n	8008428 <HAL_RCC_OscConfig+0x250>
        __HAL_RCC_PLL_DISABLE();
 8008850:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008852:	4614      	mov	r4, r2
        __HAL_RCC_PLL_DISABLE();
 8008854:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008858:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800885a:	f7f8 f9f3 	bl	8000c44 <HAL_GetTick>
 800885e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008860:	e005      	b.n	800886e <HAL_RCC_OscConfig+0x696>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008862:	f7f8 f9ef 	bl	8000c44 <HAL_GetTick>
 8008866:	1b40      	subs	r0, r0, r5
 8008868:	2802      	cmp	r0, #2
 800886a:	f63f aedd 	bhi.w	8008628 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	019b      	lsls	r3, r3, #6
 8008872:	d4f6      	bmi.n	8008862 <HAL_RCC_OscConfig+0x68a>
 8008874:	e67c      	b.n	8008570 <HAL_RCC_OscConfig+0x398>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008876:	2b05      	cmp	r3, #5
 8008878:	4b23      	ldr	r3, [pc, #140]	; (8008908 <HAL_RCC_OscConfig+0x730>)
 800887a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800887c:	f47f adb9 	bne.w	80083f2 <HAL_RCC_OscConfig+0x21a>
 8008880:	f042 0204 	orr.w	r2, r2, #4
 8008884:	671a      	str	r2, [r3, #112]	; 0x70
 8008886:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008888:	f042 0201 	orr.w	r2, r2, #1
 800888c:	671a      	str	r2, [r3, #112]	; 0x70
 800888e:	e5b7      	b.n	8008400 <HAL_RCC_OscConfig+0x228>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008890:	68eb      	ldr	r3, [r5, #12]
 8008892:	6a22      	ldr	r2, [r4, #32]
 8008894:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008898:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800889c:	60eb      	str	r3, [r5, #12]
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	e549      	b.n	8008336 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088a2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80088a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80088aa:	606b      	str	r3, [r5, #4]
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	e506      	b.n	80082be <HAL_RCC_OscConfig+0xe6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80088b0:	f240 21ee 	movw	r1, #750	; 0x2ee
 80088b4:	4813      	ldr	r0, [pc, #76]	; (8008904 <HAL_RCC_OscConfig+0x72c>)
 80088b6:	f00b f9c1 	bl	8013c3c <assert_failed>
 80088ba:	e5d5      	b.n	8008468 <HAL_RCC_OscConfig+0x290>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80088bc:	f240 21ed 	movw	r1, #749	; 0x2ed
 80088c0:	4810      	ldr	r0, [pc, #64]	; (8008904 <HAL_RCC_OscConfig+0x72c>)
 80088c2:	f00b f9bb 	bl	8013c3c <assert_failed>
 80088c6:	e5c9      	b.n	800845c <HAL_RCC_OscConfig+0x284>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 80088c8:	f240 21f2 	movw	r1, #754	; 0x2f2
 80088cc:	480d      	ldr	r0, [pc, #52]	; (8008904 <HAL_RCC_OscConfig+0x72c>)
 80088ce:	f00b f9b5 	bl	8013c3c <assert_failed>
 80088d2:	e5dd      	b.n	8008490 <HAL_RCC_OscConfig+0x2b8>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80088d4:	f240 21f1 	movw	r1, #753	; 0x2f1
 80088d8:	480a      	ldr	r0, [pc, #40]	; (8008904 <HAL_RCC_OscConfig+0x72c>)
 80088da:	f00b f9af 	bl	8013c3c <assert_failed>
 80088de:	e5d2      	b.n	8008486 <HAL_RCC_OscConfig+0x2ae>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80088e0:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80088e4:	4807      	ldr	r0, [pc, #28]	; (8008904 <HAL_RCC_OscConfig+0x72c>)
 80088e6:	f00b f9a9 	bl	8013c3c <assert_failed>
 80088ea:	e5c7      	b.n	800847c <HAL_RCC_OscConfig+0x2a4>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80088ec:	f240 21ef 	movw	r1, #751	; 0x2ef
 80088f0:	4804      	ldr	r0, [pc, #16]	; (8008904 <HAL_RCC_OscConfig+0x72c>)
 80088f2:	f00b f9a3 	bl	8013c3c <assert_failed>
 80088f6:	e5bc      	b.n	8008472 <HAL_RCC_OscConfig+0x29a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80088f8:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 80088fc:	4801      	ldr	r0, [pc, #4]	; (8008904 <HAL_RCC_OscConfig+0x72c>)
 80088fe:	f00b f99d 	bl	8013c3c <assert_failed>
 8008902:	e5a6      	b.n	8008452 <HAL_RCC_OscConfig+0x27a>
 8008904:	0802a454 	.word	0x0802a454
 8008908:	58024400 	.word	0x58024400

0800890c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800890c:	4a3e      	ldr	r2, [pc, #248]	; (8008a08 <HAL_RCC_GetSysClockFreq+0xfc>)
 800890e:	6913      	ldr	r3, [r2, #16]
 8008910:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008914:	2b10      	cmp	r3, #16
 8008916:	d04f      	beq.n	80089b8 <HAL_RCC_GetSysClockFreq+0xac>
 8008918:	2b18      	cmp	r3, #24
 800891a:	d00b      	beq.n	8008934 <HAL_RCC_GetSysClockFreq+0x28>
 800891c:	b10b      	cbz	r3, 8008922 <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800891e:	483b      	ldr	r0, [pc, #236]	; (8008a0c <HAL_RCC_GetSysClockFreq+0x100>)
 8008920:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008922:	6813      	ldr	r3, [r2, #0]
 8008924:	0699      	lsls	r1, r3, #26
 8008926:	d549      	bpl.n	80089bc <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008928:	6813      	ldr	r3, [r2, #0]
 800892a:	4839      	ldr	r0, [pc, #228]	; (8008a10 <HAL_RCC_GetSysClockFreq+0x104>)
 800892c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008930:	40d8      	lsrs	r0, r3
 8008932:	4770      	bx	lr
{
 8008934:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008936:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008938:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800893a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800893c:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008940:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 8008942:	b3b0      	cbz	r0, 80089b2 <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008944:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008948:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800894c:	f001 0103 	and.w	r1, r1, #3
 8008950:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008954:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 8008958:	2901      	cmp	r1, #1
 800895a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800895e:	ee07 3a10 	vmov	s14, r3
 8008962:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 8008966:	d002      	beq.n	800896e <HAL_RCC_GetSysClockFreq+0x62>
 8008968:	d32d      	bcc.n	80089c6 <HAL_RCC_GetSysClockFreq+0xba>
 800896a:	2902      	cmp	r1, #2
 800896c:	d028      	beq.n	80089c0 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800896e:	eddf 5a29 	vldr	s11, [pc, #164]	; 8008a14 <HAL_RCC_GetSysClockFreq+0x108>
 8008972:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8008976:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897c:	ee07 3a90 	vmov	s15, r3
 8008980:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008988:	ee77 7a86 	vadd.f32	s15, s15, s12
 800898c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008990:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008994:	4b1c      	ldr	r3, [pc, #112]	; (8008a08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008998:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800899c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800899e:	ee07 3a90 	vmov	s15, r3
 80089a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80089a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80089aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ae:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80089b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089b6:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80089b8:	4817      	ldr	r0, [pc, #92]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x10c>)
 80089ba:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089bc:	4814      	ldr	r0, [pc, #80]	; (8008a10 <HAL_RCC_GetSysClockFreq+0x104>)
}
 80089be:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089c0:	eddf 5a16 	vldr	s11, [pc, #88]	; 8008a1c <HAL_RCC_GetSysClockFreq+0x110>
 80089c4:	e7d5      	b.n	8008972 <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089c6:	6813      	ldr	r3, [r2, #0]
 80089c8:	069b      	lsls	r3, r3, #26
 80089ca:	d51a      	bpl.n	8008a02 <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089cc:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089ce:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089d2:	490f      	ldr	r1, [pc, #60]	; (8008a10 <HAL_RCC_GetSysClockFreq+0x104>)
 80089d4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089da:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e0:	ee06 1a90 	vmov	s13, r1
 80089e4:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 80089e8:	ee06 3a90 	vmov	s13, r3
 80089ec:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 80089f0:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80089f4:	ee76 7a05 	vadd.f32	s15, s12, s10
 80089f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089fc:	ee26 7a87 	vmul.f32	s14, s13, s14
 8008a00:	e7c8      	b.n	8008994 <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a02:	eddf 5a07 	vldr	s11, [pc, #28]	; 8008a20 <HAL_RCC_GetSysClockFreq+0x114>
 8008a06:	e7b4      	b.n	8008972 <HAL_RCC_GetSysClockFreq+0x66>
 8008a08:	58024400 	.word	0x58024400
 8008a0c:	003d0900 	.word	0x003d0900
 8008a10:	03d09000 	.word	0x03d09000
 8008a14:	4a742400 	.word	0x4a742400
 8008a18:	017d7840 	.word	0x017d7840
 8008a1c:	4bbebc20 	.word	0x4bbebc20
 8008a20:	4c742400 	.word	0x4c742400

08008a24 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f000 81bd 	beq.w	8008da4 <HAL_RCC_ClockConfig+0x380>
{
 8008a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008a2e:	6803      	ldr	r3, [r0, #0]
 8008a30:	4604      	mov	r4, r0
 8008a32:	460d      	mov	r5, r1
 8008a34:	3b01      	subs	r3, #1
 8008a36:	2b3e      	cmp	r3, #62	; 0x3e
 8008a38:	f200 81a1 	bhi.w	8008d7e <HAL_RCC_ClockConfig+0x35a>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008a3c:	2d0f      	cmp	r5, #15
 8008a3e:	f200 818e 	bhi.w	8008d5e <HAL_RCC_ClockConfig+0x33a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a42:	4a5e      	ldr	r2, [pc, #376]	; (8008bbc <HAL_RCC_ClockConfig+0x198>)
 8008a44:	6813      	ldr	r3, [r2, #0]
 8008a46:	f003 030f 	and.w	r3, r3, #15
 8008a4a:	42ab      	cmp	r3, r5
 8008a4c:	f0c0 81ac 	bcc.w	8008da8 <HAL_RCC_ClockConfig+0x384>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	075e      	lsls	r6, r3, #29
 8008a54:	d512      	bpl.n	8008a7c <HAL_RCC_ClockConfig+0x58>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a56:	4a5a      	ldr	r2, [pc, #360]	; (8008bc0 <HAL_RCC_ClockConfig+0x19c>)
 8008a58:	6921      	ldr	r1, [r4, #16]
 8008a5a:	6992      	ldr	r2, [r2, #24]
 8008a5c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008a60:	4291      	cmp	r1, r2
 8008a62:	d90b      	bls.n	8008a7c <HAL_RCC_ClockConfig+0x58>
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8008a64:	f021 0330 	bic.w	r3, r1, #48	; 0x30
 8008a68:	2b40      	cmp	r3, #64	; 0x40
 8008a6a:	f040 81c0 	bne.w	8008dee <HAL_RCC_ClockConfig+0x3ca>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a6e:	4a54      	ldr	r2, [pc, #336]	; (8008bc0 <HAL_RCC_ClockConfig+0x19c>)
 8008a70:	6993      	ldr	r3, [r2, #24]
 8008a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a76:	4319      	orrs	r1, r3
 8008a78:	6191      	str	r1, [r2, #24]
 8008a7a:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a7c:	0718      	lsls	r0, r3, #28
 8008a7e:	d512      	bpl.n	8008aa6 <HAL_RCC_ClockConfig+0x82>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a80:	4a4f      	ldr	r2, [pc, #316]	; (8008bc0 <HAL_RCC_ClockConfig+0x19c>)
 8008a82:	6961      	ldr	r1, [r4, #20]
 8008a84:	69d2      	ldr	r2, [r2, #28]
 8008a86:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008a8a:	4291      	cmp	r1, r2
 8008a8c:	d90b      	bls.n	8008aa6 <HAL_RCC_ClockConfig+0x82>
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8008a8e:	f021 0330 	bic.w	r3, r1, #48	; 0x30
 8008a92:	2b40      	cmp	r3, #64	; 0x40
 8008a94:	f040 81b2 	bne.w	8008dfc <HAL_RCC_ClockConfig+0x3d8>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a98:	4a49      	ldr	r2, [pc, #292]	; (8008bc0 <HAL_RCC_ClockConfig+0x19c>)
 8008a9a:	69d3      	ldr	r3, [r2, #28]
 8008a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa0:	4319      	orrs	r1, r3
 8008aa2:	61d1      	str	r1, [r2, #28]
 8008aa4:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008aa6:	06d9      	lsls	r1, r3, #27
 8008aa8:	d513      	bpl.n	8008ad2 <HAL_RCC_ClockConfig+0xae>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008aaa:	4a45      	ldr	r2, [pc, #276]	; (8008bc0 <HAL_RCC_ClockConfig+0x19c>)
 8008aac:	69a1      	ldr	r1, [r4, #24]
 8008aae:	69d2      	ldr	r2, [r2, #28]
 8008ab0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008ab4:	4291      	cmp	r1, r2
 8008ab6:	d90c      	bls.n	8008ad2 <HAL_RCC_ClockConfig+0xae>
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8008ab8:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8008abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ac0:	f040 81a3 	bne.w	8008e0a <HAL_RCC_ClockConfig+0x3e6>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ac4:	4a3e      	ldr	r2, [pc, #248]	; (8008bc0 <HAL_RCC_ClockConfig+0x19c>)
 8008ac6:	69d3      	ldr	r3, [r2, #28]
 8008ac8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008acc:	4319      	orrs	r1, r3
 8008ace:	61d1      	str	r1, [r2, #28]
 8008ad0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ad2:	069a      	lsls	r2, r3, #26
 8008ad4:	d512      	bpl.n	8008afc <HAL_RCC_ClockConfig+0xd8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ad6:	4a3a      	ldr	r2, [pc, #232]	; (8008bc0 <HAL_RCC_ClockConfig+0x19c>)
 8008ad8:	69e1      	ldr	r1, [r4, #28]
 8008ada:	6a12      	ldr	r2, [r2, #32]
 8008adc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008ae0:	4291      	cmp	r1, r2
 8008ae2:	d90b      	bls.n	8008afc <HAL_RCC_ClockConfig+0xd8>
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8008ae4:	f021 0330 	bic.w	r3, r1, #48	; 0x30
 8008ae8:	2b40      	cmp	r3, #64	; 0x40
 8008aea:	f040 8179 	bne.w	8008de0 <HAL_RCC_ClockConfig+0x3bc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008aee:	4a34      	ldr	r2, [pc, #208]	; (8008bc0 <HAL_RCC_ClockConfig+0x19c>)
 8008af0:	6a13      	ldr	r3, [r2, #32]
 8008af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af6:	4319      	orrs	r1, r3
 8008af8:	6211      	str	r1, [r2, #32]
 8008afa:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008afc:	079f      	lsls	r7, r3, #30
 8008afe:	d512      	bpl.n	8008b26 <HAL_RCC_ClockConfig+0x102>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b00:	4a2f      	ldr	r2, [pc, #188]	; (8008bc0 <HAL_RCC_ClockConfig+0x19c>)
 8008b02:	68e1      	ldr	r1, [r4, #12]
 8008b04:	6992      	ldr	r2, [r2, #24]
 8008b06:	f002 020f 	and.w	r2, r2, #15
 8008b0a:	4291      	cmp	r1, r2
 8008b0c:	d90b      	bls.n	8008b26 <HAL_RCC_ClockConfig+0x102>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008b0e:	f1a1 0308 	sub.w	r3, r1, #8
 8008b12:	2b07      	cmp	r3, #7
 8008b14:	f200 8180 	bhi.w	8008e18 <HAL_RCC_ClockConfig+0x3f4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b18:	4a29      	ldr	r2, [pc, #164]	; (8008bc0 <HAL_RCC_ClockConfig+0x19c>)
 8008b1a:	6993      	ldr	r3, [r2, #24]
 8008b1c:	f023 030f 	bic.w	r3, r3, #15
 8008b20:	4319      	orrs	r1, r3
 8008b22:	6191      	str	r1, [r2, #24]
 8008b24:	6823      	ldr	r3, [r4, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b26:	07de      	lsls	r6, r3, #31
 8008b28:	d55a      	bpl.n	8008be0 <HAL_RCC_ClockConfig+0x1bc>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8008b2a:	68a2      	ldr	r2, [r4, #8]
 8008b2c:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 8008b30:	f422 7000 	bic.w	r0, r2, #512	; 0x200
 8008b34:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8008b38:	bf14      	ite	ne
 8008b3a:	2301      	movne	r3, #1
 8008b3c:	2300      	moveq	r3, #0
 8008b3e:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8008b42:	bf0c      	ite	eq
 8008b44:	2300      	moveq	r3, #0
 8008b46:	f003 0301 	andne.w	r3, r3, #1
 8008b4a:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8008b4e:	bf0c      	ite	eq
 8008b50:	2300      	moveq	r3, #0
 8008b52:	f003 0301 	andne.w	r3, r3, #1
 8008b56:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 8008b5a:	bf0c      	ite	eq
 8008b5c:	2300      	moveq	r3, #0
 8008b5e:	f003 0301 	andne.w	r3, r3, #1
 8008b62:	b12b      	cbz	r3, 8008b70 <HAL_RCC_ClockConfig+0x14c>
 8008b64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b68:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8008b6c:	f040 812e 	bne.w	8008dcc <HAL_RCC_ClockConfig+0x3a8>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008b70:	6863      	ldr	r3, [r4, #4]
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	f200 8110 	bhi.w	8008d98 <HAL_RCC_ClockConfig+0x374>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008b78:	4a11      	ldr	r2, [pc, #68]	; (8008bc0 <HAL_RCC_ClockConfig+0x19c>)
 8008b7a:	68a1      	ldr	r1, [r4, #8]
 8008b7c:	6993      	ldr	r3, [r2, #24]
 8008b7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008b82:	430b      	orrs	r3, r1
 8008b84:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b86:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b88:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	f000 8100 	beq.w	8008d90 <HAL_RCC_ClockConfig+0x36c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	f000 8117 	beq.w	8008dc4 <HAL_RCC_ClockConfig+0x3a0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	f000 811e 	beq.w	8008dd8 <HAL_RCC_ClockConfig+0x3b4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b9c:	0757      	lsls	r7, r2, #29
 8008b9e:	f140 80eb 	bpl.w	8008d78 <HAL_RCC_ClockConfig+0x354>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ba2:	4907      	ldr	r1, [pc, #28]	; (8008bc0 <HAL_RCC_ClockConfig+0x19c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ba4:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ba8:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008baa:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008bac:	f022 0207 	bic.w	r2, r2, #7
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8008bb4:	f7f8 f846 	bl	8000c44 <HAL_GetTick>
 8008bb8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bba:	e009      	b.n	8008bd0 <HAL_RCC_ClockConfig+0x1ac>
 8008bbc:	52002000 	.word	0x52002000
 8008bc0:	58024400 	.word	0x58024400
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bc4:	f7f8 f83e 	bl	8000c44 <HAL_GetTick>
 8008bc8:	1bc0      	subs	r0, r0, r7
 8008bca:	4540      	cmp	r0, r8
 8008bcc:	f200 80f8 	bhi.w	8008dc0 <HAL_RCC_ClockConfig+0x39c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bd0:	6933      	ldr	r3, [r6, #16]
 8008bd2:	6862      	ldr	r2, [r4, #4]
 8008bd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bd8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008bdc:	d1f2      	bne.n	8008bc4 <HAL_RCC_ClockConfig+0x1a0>
 8008bde:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008be0:	079e      	lsls	r6, r3, #30
 8008be2:	d517      	bpl.n	8008c14 <HAL_RCC_ClockConfig+0x1f0>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008be4:	4b90      	ldr	r3, [pc, #576]	; (8008e28 <HAL_RCC_ClockConfig+0x404>)
 8008be6:	68e2      	ldr	r2, [r4, #12]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	f003 030f 	and.w	r3, r3, #15
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d210      	bcs.n	8008c14 <HAL_RCC_ClockConfig+0x1f0>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008bf2:	f1a2 0308 	sub.w	r3, r2, #8
 8008bf6:	2b06      	cmp	r3, #6
 8008bf8:	d906      	bls.n	8008c08 <HAL_RCC_ClockConfig+0x1e4>
 8008bfa:	b12a      	cbz	r2, 8008c08 <HAL_RCC_ClockConfig+0x1e4>
 8008bfc:	f240 4136 	movw	r1, #1078	; 0x436
 8008c00:	488a      	ldr	r0, [pc, #552]	; (8008e2c <HAL_RCC_ClockConfig+0x408>)
 8008c02:	f00b f81b 	bl	8013c3c <assert_failed>
 8008c06:	68e2      	ldr	r2, [r4, #12]
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c08:	4987      	ldr	r1, [pc, #540]	; (8008e28 <HAL_RCC_ClockConfig+0x404>)
 8008c0a:	698b      	ldr	r3, [r1, #24]
 8008c0c:	f023 030f 	bic.w	r3, r3, #15
 8008c10:	431a      	orrs	r2, r3
 8008c12:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c14:	4a86      	ldr	r2, [pc, #536]	; (8008e30 <HAL_RCC_ClockConfig+0x40c>)
 8008c16:	6813      	ldr	r3, [r2, #0]
 8008c18:	f003 030f 	and.w	r3, r3, #15
 8008c1c:	42ab      	cmp	r3, r5
 8008c1e:	d90a      	bls.n	8008c36 <HAL_RCC_ClockConfig+0x212>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c20:	6813      	ldr	r3, [r2, #0]
 8008c22:	f023 030f 	bic.w	r3, r3, #15
 8008c26:	432b      	orrs	r3, r5
 8008c28:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c2a:	6813      	ldr	r3, [r2, #0]
 8008c2c:	f003 030f 	and.w	r3, r3, #15
 8008c30:	42ab      	cmp	r3, r5
 8008c32:	f040 80a1 	bne.w	8008d78 <HAL_RCC_ClockConfig+0x354>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	0758      	lsls	r0, r3, #29
 8008c3a:	d51a      	bpl.n	8008c72 <HAL_RCC_ClockConfig+0x24e>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c3c:	4a7a      	ldr	r2, [pc, #488]	; (8008e28 <HAL_RCC_ClockConfig+0x404>)
 8008c3e:	6921      	ldr	r1, [r4, #16]
 8008c40:	6992      	ldr	r2, [r2, #24]
 8008c42:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008c46:	4291      	cmp	r1, r2
 8008c48:	d213      	bcs.n	8008c72 <HAL_RCC_ClockConfig+0x24e>
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8008c4a:	2950      	cmp	r1, #80	; 0x50
 8008c4c:	bf18      	it	ne
 8008c4e:	2960      	cmpne	r1, #96	; 0x60
 8008c50:	d008      	beq.n	8008c64 <HAL_RCC_ClockConfig+0x240>
 8008c52:	f031 0340 	bics.w	r3, r1, #64	; 0x40
 8008c56:	d005      	beq.n	8008c64 <HAL_RCC_ClockConfig+0x240>
 8008c58:	f240 4157 	movw	r1, #1111	; 0x457
 8008c5c:	4873      	ldr	r0, [pc, #460]	; (8008e2c <HAL_RCC_ClockConfig+0x408>)
 8008c5e:	f00a ffed 	bl	8013c3c <assert_failed>
 8008c62:	6921      	ldr	r1, [r4, #16]
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c64:	4a70      	ldr	r2, [pc, #448]	; (8008e28 <HAL_RCC_ClockConfig+0x404>)
 8008c66:	6993      	ldr	r3, [r2, #24]
 8008c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6c:	4319      	orrs	r1, r3
 8008c6e:	6191      	str	r1, [r2, #24]
 8008c70:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c72:	0719      	lsls	r1, r3, #28
 8008c74:	d51a      	bpl.n	8008cac <HAL_RCC_ClockConfig+0x288>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c76:	4a6c      	ldr	r2, [pc, #432]	; (8008e28 <HAL_RCC_ClockConfig+0x404>)
 8008c78:	6961      	ldr	r1, [r4, #20]
 8008c7a:	69d2      	ldr	r2, [r2, #28]
 8008c7c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008c80:	4291      	cmp	r1, r2
 8008c82:	d213      	bcs.n	8008cac <HAL_RCC_ClockConfig+0x288>
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8008c84:	2950      	cmp	r1, #80	; 0x50
 8008c86:	bf18      	it	ne
 8008c88:	2960      	cmpne	r1, #96	; 0x60
 8008c8a:	d008      	beq.n	8008c9e <HAL_RCC_ClockConfig+0x27a>
 8008c8c:	f031 0340 	bics.w	r3, r1, #64	; 0x40
 8008c90:	d005      	beq.n	8008c9e <HAL_RCC_ClockConfig+0x27a>
 8008c92:	f240 4169 	movw	r1, #1129	; 0x469
 8008c96:	4865      	ldr	r0, [pc, #404]	; (8008e2c <HAL_RCC_ClockConfig+0x408>)
 8008c98:	f00a ffd0 	bl	8013c3c <assert_failed>
 8008c9c:	6961      	ldr	r1, [r4, #20]
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c9e:	4a62      	ldr	r2, [pc, #392]	; (8008e28 <HAL_RCC_ClockConfig+0x404>)
 8008ca0:	69d3      	ldr	r3, [r2, #28]
 8008ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca6:	4319      	orrs	r1, r3
 8008ca8:	61d1      	str	r1, [r2, #28]
 8008caa:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cac:	06da      	lsls	r2, r3, #27
 8008cae:	d51c      	bpl.n	8008cea <HAL_RCC_ClockConfig+0x2c6>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008cb0:	4a5d      	ldr	r2, [pc, #372]	; (8008e28 <HAL_RCC_ClockConfig+0x404>)
 8008cb2:	69a1      	ldr	r1, [r4, #24]
 8008cb4:	69d2      	ldr	r2, [r2, #28]
 8008cb6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008cba:	4291      	cmp	r1, r2
 8008cbc:	d215      	bcs.n	8008cea <HAL_RCC_ClockConfig+0x2c6>
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8008cbe:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8008cc2:	bf18      	it	ne
 8008cc4:	f5b1 6fa0 	cmpne.w	r1, #1280	; 0x500
 8008cc8:	d008      	beq.n	8008cdc <HAL_RCC_ClockConfig+0x2b8>
 8008cca:	f431 6380 	bics.w	r3, r1, #1024	; 0x400
 8008cce:	d005      	beq.n	8008cdc <HAL_RCC_ClockConfig+0x2b8>
 8008cd0:	f240 417b 	movw	r1, #1147	; 0x47b
 8008cd4:	4855      	ldr	r0, [pc, #340]	; (8008e2c <HAL_RCC_ClockConfig+0x408>)
 8008cd6:	f00a ffb1 	bl	8013c3c <assert_failed>
 8008cda:	69a1      	ldr	r1, [r4, #24]
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008cdc:	4a52      	ldr	r2, [pc, #328]	; (8008e28 <HAL_RCC_ClockConfig+0x404>)
 8008cde:	69d3      	ldr	r3, [r2, #28]
 8008ce0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008ce4:	4319      	orrs	r1, r3
 8008ce6:	61d1      	str	r1, [r2, #28]
 8008ce8:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cea:	069b      	lsls	r3, r3, #26
 8008cec:	d519      	bpl.n	8008d22 <HAL_RCC_ClockConfig+0x2fe>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cee:	4b4e      	ldr	r3, [pc, #312]	; (8008e28 <HAL_RCC_ClockConfig+0x404>)
 8008cf0:	69e2      	ldr	r2, [r4, #28]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d212      	bcs.n	8008d22 <HAL_RCC_ClockConfig+0x2fe>
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8008cfc:	2a50      	cmp	r2, #80	; 0x50
 8008cfe:	bf18      	it	ne
 8008d00:	2a60      	cmpne	r2, #96	; 0x60
 8008d02:	d008      	beq.n	8008d16 <HAL_RCC_ClockConfig+0x2f2>
 8008d04:	f032 0340 	bics.w	r3, r2, #64	; 0x40
 8008d08:	d005      	beq.n	8008d16 <HAL_RCC_ClockConfig+0x2f2>
 8008d0a:	f240 418d 	movw	r1, #1165	; 0x48d
 8008d0e:	4847      	ldr	r0, [pc, #284]	; (8008e2c <HAL_RCC_ClockConfig+0x408>)
 8008d10:	f00a ff94 	bl	8013c3c <assert_failed>
 8008d14:	69e2      	ldr	r2, [r4, #28]
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d16:	4944      	ldr	r1, [pc, #272]	; (8008e28 <HAL_RCC_ClockConfig+0x404>)
 8008d18:	6a0b      	ldr	r3, [r1, #32]
 8008d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d22:	f7ff fdf3 	bl	800890c <HAL_RCC_GetSysClockFreq>
 8008d26:	4a40      	ldr	r2, [pc, #256]	; (8008e28 <HAL_RCC_ClockConfig+0x404>)
 8008d28:	4942      	ldr	r1, [pc, #264]	; (8008e34 <HAL_RCC_ClockConfig+0x410>)
 8008d2a:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d2c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d2e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8008d32:	4d41      	ldr	r5, [pc, #260]	; (8008e38 <HAL_RCC_ClockConfig+0x414>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d34:	f002 020f 	and.w	r2, r2, #15
 8008d38:	4c40      	ldr	r4, [pc, #256]	; (8008e3c <HAL_RCC_ClockConfig+0x418>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d3a:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d3c:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d3e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8008d42:	493f      	ldr	r1, [pc, #252]	; (8008e40 <HAL_RCC_ClockConfig+0x41c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d44:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d48:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 8008d4c:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d4e:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8008d52:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d54:	6022      	str	r2, [r4, #0]
}
 8008d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8008d5a:	f7f7 bf0f 	b.w	8000b7c <HAL_InitTick>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008d5e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8008d62:	4832      	ldr	r0, [pc, #200]	; (8008e2c <HAL_RCC_ClockConfig+0x408>)
 8008d64:	f00a ff6a 	bl	8013c3c <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d68:	4b31      	ldr	r3, [pc, #196]	; (8008e30 <HAL_RCC_ClockConfig+0x40c>)
 8008d6a:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d6c:	6819      	ldr	r1, [r3, #0]
 8008d6e:	f021 010f 	bic.w	r1, r1, #15
 8008d72:	430d      	orrs	r5, r1
 8008d74:	601d      	str	r5, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d76:	681b      	ldr	r3, [r3, #0]
    return HAL_ERROR;
 8008d78:	2001      	movs	r0, #1
}
 8008d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008d7e:	f240 317f 	movw	r1, #895	; 0x37f
 8008d82:	482a      	ldr	r0, [pc, #168]	; (8008e2c <HAL_RCC_ClockConfig+0x408>)
 8008d84:	f00a ff5a 	bl	8013c3c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008d88:	2d0f      	cmp	r5, #15
 8008d8a:	f67f ae5a 	bls.w	8008a42 <HAL_RCC_ClockConfig+0x1e>
 8008d8e:	e7e6      	b.n	8008d5e <HAL_RCC_ClockConfig+0x33a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d90:	0390      	lsls	r0, r2, #14
 8008d92:	f53f af06 	bmi.w	8008ba2 <HAL_RCC_ClockConfig+0x17e>
 8008d96:	e7ef      	b.n	8008d78 <HAL_RCC_ClockConfig+0x354>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008d98:	f240 31f5 	movw	r1, #1013	; 0x3f5
 8008d9c:	4823      	ldr	r0, [pc, #140]	; (8008e2c <HAL_RCC_ClockConfig+0x408>)
 8008d9e:	f00a ff4d 	bl	8013c3c <assert_failed>
 8008da2:	e6e9      	b.n	8008b78 <HAL_RCC_ClockConfig+0x154>
    return HAL_ERROR;
 8008da4:	2001      	movs	r0, #1
}
 8008da6:	4770      	bx	lr
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008da8:	6813      	ldr	r3, [r2, #0]
 8008daa:	f023 030f 	bic.w	r3, r3, #15
 8008dae:	432b      	orrs	r3, r5
 8008db0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008db2:	6813      	ldr	r3, [r2, #0]
 8008db4:	f003 030f 	and.w	r3, r3, #15
 8008db8:	42ab      	cmp	r3, r5
 8008dba:	f43f ae49 	beq.w	8008a50 <HAL_RCC_ClockConfig+0x2c>
 8008dbe:	e7db      	b.n	8008d78 <HAL_RCC_ClockConfig+0x354>
            return HAL_TIMEOUT;
 8008dc0:	2003      	movs	r0, #3
 8008dc2:	e7da      	b.n	8008d7a <HAL_RCC_ClockConfig+0x356>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dc4:	0191      	lsls	r1, r2, #6
 8008dc6:	f53f aeec 	bmi.w	8008ba2 <HAL_RCC_ClockConfig+0x17e>
 8008dca:	e7d5      	b.n	8008d78 <HAL_RCC_ClockConfig+0x354>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8008dcc:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8008dd0:	4816      	ldr	r0, [pc, #88]	; (8008e2c <HAL_RCC_ClockConfig+0x408>)
 8008dd2:	f00a ff33 	bl	8013c3c <assert_failed>
 8008dd6:	e6cb      	b.n	8008b70 <HAL_RCC_ClockConfig+0x14c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dd8:	05d2      	lsls	r2, r2, #23
 8008dda:	f53f aee2 	bmi.w	8008ba2 <HAL_RCC_ClockConfig+0x17e>
 8008dde:	e7cb      	b.n	8008d78 <HAL_RCC_ClockConfig+0x354>
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8008de0:	f240 31d1 	movw	r1, #977	; 0x3d1
 8008de4:	4811      	ldr	r0, [pc, #68]	; (8008e2c <HAL_RCC_ClockConfig+0x408>)
 8008de6:	f00a ff29 	bl	8013c3c <assert_failed>
 8008dea:	69e1      	ldr	r1, [r4, #28]
 8008dec:	e67f      	b.n	8008aee <HAL_RCC_ClockConfig+0xca>
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8008dee:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8008df2:	480e      	ldr	r0, [pc, #56]	; (8008e2c <HAL_RCC_ClockConfig+0x408>)
 8008df4:	f00a ff22 	bl	8013c3c <assert_failed>
 8008df8:	6921      	ldr	r1, [r4, #16]
 8008dfa:	e638      	b.n	8008a6e <HAL_RCC_ClockConfig+0x4a>
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8008dfc:	f240 31ae 	movw	r1, #942	; 0x3ae
 8008e00:	480a      	ldr	r0, [pc, #40]	; (8008e2c <HAL_RCC_ClockConfig+0x408>)
 8008e02:	f00a ff1b 	bl	8013c3c <assert_failed>
 8008e06:	6961      	ldr	r1, [r4, #20]
 8008e08:	e646      	b.n	8008a98 <HAL_RCC_ClockConfig+0x74>
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8008e0a:	f240 31bf 	movw	r1, #959	; 0x3bf
 8008e0e:	4807      	ldr	r0, [pc, #28]	; (8008e2c <HAL_RCC_ClockConfig+0x408>)
 8008e10:	f00a ff14 	bl	8013c3c <assert_failed>
 8008e14:	69a1      	ldr	r1, [r4, #24]
 8008e16:	e655      	b.n	8008ac4 <HAL_RCC_ClockConfig+0xa0>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008e18:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 8008e1c:	4803      	ldr	r0, [pc, #12]	; (8008e2c <HAL_RCC_ClockConfig+0x408>)
 8008e1e:	f00a ff0d 	bl	8013c3c <assert_failed>
 8008e22:	68e1      	ldr	r1, [r4, #12]
 8008e24:	e678      	b.n	8008b18 <HAL_RCC_ClockConfig+0xf4>
 8008e26:	bf00      	nop
 8008e28:	58024400 	.word	0x58024400
 8008e2c:	0802a454 	.word	0x0802a454
 8008e30:	52002000 	.word	0x52002000
 8008e34:	0802b300 	.word	0x0802b300
 8008e38:	20000004 	.word	0x20000004
 8008e3c:	200002b4 	.word	0x200002b4
 8008e40:	200002b0 	.word	0x200002b0

08008e44 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e44:	4a49      	ldr	r2, [pc, #292]	; (8008f6c <HAL_RCC_GetHCLKFreq+0x128>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e46:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e48:	6913      	ldr	r3, [r2, #16]
 8008e4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e4e:	2b10      	cmp	r3, #16
 8008e50:	d064      	beq.n	8008f1c <HAL_RCC_GetHCLKFreq+0xd8>
 8008e52:	2b18      	cmp	r3, #24
 8008e54:	d022      	beq.n	8008e9c <HAL_RCC_GetHCLKFreq+0x58>
 8008e56:	b1bb      	cbz	r3, 8008e88 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 8008e58:	4b45      	ldr	r3, [pc, #276]	; (8008f70 <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e5a:	4944      	ldr	r1, [pc, #272]	; (8008f6c <HAL_RCC_GetHCLKFreq+0x128>)
 8008e5c:	4845      	ldr	r0, [pc, #276]	; (8008f74 <HAL_RCC_GetHCLKFreq+0x130>)
 8008e5e:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e60:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e62:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e66:	4c44      	ldr	r4, [pc, #272]	; (8008f78 <HAL_RCC_GetHCLKFreq+0x134>)
 8008e68:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e6c:	4d43      	ldr	r5, [pc, #268]	; (8008f7c <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e6e:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e70:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e72:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e76:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e7a:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e7c:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8008e80:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e82:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008e84:	bc30      	pop	{r4, r5}
 8008e86:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e88:	6813      	ldr	r3, [r2, #0]
 8008e8a:	0699      	lsls	r1, r3, #26
 8008e8c:	d548      	bpl.n	8008f20 <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e8e:	6813      	ldr	r3, [r2, #0]
 8008e90:	4a3b      	ldr	r2, [pc, #236]	; (8008f80 <HAL_RCC_GetHCLKFreq+0x13c>)
 8008e92:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008e96:	fa22 f303 	lsr.w	r3, r2, r3
 8008e9a:	e7de      	b.n	8008e5a <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e9c:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008e9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ea0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008ea2:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008ea6:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d0d6      	beq.n	8008e5a <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008eac:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008eb0:	f001 0101 	and.w	r1, r1, #1
 8008eb4:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008eb8:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008ebc:	fb01 f304 	mul.w	r3, r1, r4
 8008ec0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 8008ec4:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8008ece:	d002      	beq.n	8008ed6 <HAL_RCC_GetHCLKFreq+0x92>
 8008ed0:	d32b      	bcc.n	8008f2a <HAL_RCC_GetHCLKFreq+0xe6>
 8008ed2:	2802      	cmp	r0, #2
 8008ed4:	d026      	beq.n	8008f24 <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ed6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8008f84 <HAL_RCC_GetHCLKFreq+0x140>
 8008eda:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8008ede:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee4:	ee07 3a10 	vmov	s14, r3
 8008ee8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008eec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008ef0:	ee37 7a25 	vadd.f32	s14, s14, s11
 8008ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ef8:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008efc:	4b1b      	ldr	r3, [pc, #108]	; (8008f6c <HAL_RCC_GetHCLKFreq+0x128>)
 8008efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f00:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008f04:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008f06:	ee07 3a10 	vmov	s14, r3
 8008f0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008f0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f12:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8008f16:	ee17 3a90 	vmov	r3, s15
 8008f1a:	e79e      	b.n	8008e5a <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8008f1c:	4b1a      	ldr	r3, [pc, #104]	; (8008f88 <HAL_RCC_GetHCLKFreq+0x144>)
 8008f1e:	e79c      	b.n	8008e5a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008f20:	4b17      	ldr	r3, [pc, #92]	; (8008f80 <HAL_RCC_GetHCLKFreq+0x13c>)
 8008f22:	e79a      	b.n	8008e5a <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f24:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008f8c <HAL_RCC_GetHCLKFreq+0x148>
 8008f28:	e7d7      	b.n	8008eda <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f2a:	6813      	ldr	r3, [r2, #0]
 8008f2c:	069b      	lsls	r3, r3, #26
 8008f2e:	d51a      	bpl.n	8008f66 <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f30:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f32:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f36:	4912      	ldr	r1, [pc, #72]	; (8008f80 <HAL_RCC_GetHCLKFreq+0x13c>)
 8008f38:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f3c:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f3e:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f44:	ee07 1a10 	vmov	s14, r1
 8008f48:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8008f4c:	ee07 3a10 	vmov	s14, r3
 8008f50:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8008f54:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8008f58:	ee76 6a05 	vadd.f32	s13, s12, s10
 8008f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f64:	e7ca      	b.n	8008efc <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f66:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8008f90 <HAL_RCC_GetHCLKFreq+0x14c>
 8008f6a:	e7b6      	b.n	8008eda <HAL_RCC_GetHCLKFreq+0x96>
 8008f6c:	58024400 	.word	0x58024400
 8008f70:	003d0900 	.word	0x003d0900
 8008f74:	0802b300 	.word	0x0802b300
 8008f78:	200002b4 	.word	0x200002b4
 8008f7c:	200002b0 	.word	0x200002b0
 8008f80:	03d09000 	.word	0x03d09000
 8008f84:	4a742400 	.word	0x4a742400
 8008f88:	017d7840 	.word	0x017d7840
 8008f8c:	4bbebc20 	.word	0x4bbebc20
 8008f90:	4c742400 	.word	0x4c742400

08008f94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8008f96:	6803      	ldr	r3, [r0, #0]
{
 8008f98:	4604      	mov	r4, r0
 8008f9a:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	2b3e      	cmp	r3, #62	; 0x3e
 8008fa0:	f200 809a 	bhi.w	80090d8 <RCCEx_PLL2_Config+0x144>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8008fa4:	6863      	ldr	r3, [r4, #4]
 8008fa6:	3b04      	subs	r3, #4
 8008fa8:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8008fac:	f200 809f 	bhi.w	80090ee <RCCEx_PLL2_Config+0x15a>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8008fb0:	68a3      	ldr	r3, [r4, #8]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8008fb6:	f200 80a4 	bhi.w	8009102 <RCCEx_PLL2_Config+0x16e>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8008fba:	6923      	ldr	r3, [r4, #16]
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8008fc0:	f200 80a9 	bhi.w	8009116 <RCCEx_PLL2_Config+0x182>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8008fc4:	68e3      	ldr	r3, [r4, #12]
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	2b7f      	cmp	r3, #127	; 0x7f
 8008fca:	f200 80ae 	bhi.w	800912a <RCCEx_PLL2_Config+0x196>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8008fce:	6963      	ldr	r3, [r4, #20]
 8008fd0:	f033 03c0 	bics.w	r3, r3, #192	; 0xc0
 8008fd4:	f040 80b3 	bne.w	800913e <RCCEx_PLL2_Config+0x1aa>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8008fd8:	69a3      	ldr	r3, [r4, #24]
 8008fda:	f033 0320 	bics.w	r3, r3, #32
 8008fde:	f040 80b8 	bne.w	8009152 <RCCEx_PLL2_Config+0x1be>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8008fe2:	69e3      	ldr	r3, [r4, #28]
 8008fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fe8:	d270      	bcs.n	80090cc <RCCEx_PLL2_Config+0x138>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fea:	4a5f      	ldr	r2, [pc, #380]	; (8009168 <RCCEx_PLL2_Config+0x1d4>)
 8008fec:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008fee:	f003 0303 	and.w	r3, r3, #3
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d066      	beq.n	80090c4 <RCCEx_PLL2_Config+0x130>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ff6:	6813      	ldr	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ff8:	4615      	mov	r5, r2
    __HAL_RCC_PLL2_DISABLE();
 8008ffa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ffe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009000:	f7f7 fe20 	bl	8000c44 <HAL_GetTick>
 8009004:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009006:	e004      	b.n	8009012 <RCCEx_PLL2_Config+0x7e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009008:	f7f7 fe1c 	bl	8000c44 <HAL_GetTick>
 800900c:	1bc0      	subs	r0, r0, r7
 800900e:	2802      	cmp	r0, #2
 8009010:	d85a      	bhi.n	80090c8 <RCCEx_PLL2_Config+0x134>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009012:	682b      	ldr	r3, [r5, #0]
 8009014:	011a      	lsls	r2, r3, #4
 8009016:	d4f7      	bmi.n	8009008 <RCCEx_PLL2_Config+0x74>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009018:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800901a:	6822      	ldr	r2, [r4, #0]
 800901c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009020:	4952      	ldr	r1, [pc, #328]	; (800916c <RCCEx_PLL2_Config+0x1d8>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009022:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8009026:	62ab      	str	r3, [r5, #40]	; 0x28
 8009028:	6867      	ldr	r7, [r4, #4]
 800902a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800902e:	3f01      	subs	r7, #1
 8009030:	1e50      	subs	r0, r2, #1
 8009032:	3b01      	subs	r3, #1
 8009034:	6922      	ldr	r2, [r4, #16]
 8009036:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800903a:	025b      	lsls	r3, r3, #9
 800903c:	0400      	lsls	r0, r0, #16
 800903e:	3a01      	subs	r2, #1
 8009040:	b29b      	uxth	r3, r3
 8009042:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8009046:	0612      	lsls	r2, r2, #24
 8009048:	4303      	orrs	r3, r0
 800904a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800904e:	433b      	orrs	r3, r7
 8009050:	4313      	orrs	r3, r2
 8009052:	63ab      	str	r3, [r5, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009054:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009056:	6962      	ldr	r2, [r4, #20]
 8009058:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800905c:	4313      	orrs	r3, r2
 800905e:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009060:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009062:	69a2      	ldr	r2, [r4, #24]
 8009064:	f023 0320 	bic.w	r3, r3, #32
 8009068:	4313      	orrs	r3, r2
 800906a:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800906c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800906e:	f023 0310 	bic.w	r3, r3, #16
 8009072:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009074:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8009076:	69e3      	ldr	r3, [r4, #28]
 8009078:	4011      	ands	r1, r2
 800907a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800907e:	63e9      	str	r1, [r5, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009080:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009082:	f043 0310 	orr.w	r3, r3, #16
 8009086:	62eb      	str	r3, [r5, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009088:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800908a:	2e00      	cmp	r6, #0
 800908c:	d067      	beq.n	800915e <RCCEx_PLL2_Config+0x1ca>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800908e:	2e01      	cmp	r6, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009090:	bf0c      	ite	eq
 8009092:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009096:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800909a:	62eb      	str	r3, [r5, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800909c:	4b32      	ldr	r3, [pc, #200]	; (8009168 <RCCEx_PLL2_Config+0x1d4>)
 800909e:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090a0:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 80090a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80090a6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80090a8:	f7f7 fdcc 	bl	8000c44 <HAL_GetTick>
 80090ac:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090ae:	e004      	b.n	80090ba <RCCEx_PLL2_Config+0x126>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80090b0:	f7f7 fdc8 	bl	8000c44 <HAL_GetTick>
 80090b4:	1b40      	subs	r0, r0, r5
 80090b6:	2802      	cmp	r0, #2
 80090b8:	d806      	bhi.n	80090c8 <RCCEx_PLL2_Config+0x134>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	011b      	lsls	r3, r3, #4
 80090be:	d5f7      	bpl.n	80090b0 <RCCEx_PLL2_Config+0x11c>
    }

  }


  return status;
 80090c0:	2000      	movs	r0, #0
}
 80090c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80090c4:	2001      	movs	r0, #1
}
 80090c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80090c8:	2003      	movs	r0, #3
}
 80090ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 80090cc:	f640 4186 	movw	r1, #3206	; 0xc86
 80090d0:	4827      	ldr	r0, [pc, #156]	; (8009170 <RCCEx_PLL2_Config+0x1dc>)
 80090d2:	f00a fdb3 	bl	8013c3c <assert_failed>
 80090d6:	e788      	b.n	8008fea <RCCEx_PLL2_Config+0x56>
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 80090d8:	f640 417f 	movw	r1, #3199	; 0xc7f
 80090dc:	4824      	ldr	r0, [pc, #144]	; (8009170 <RCCEx_PLL2_Config+0x1dc>)
 80090de:	f00a fdad 	bl	8013c3c <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 80090e2:	6863      	ldr	r3, [r4, #4]
 80090e4:	3b04      	subs	r3, #4
 80090e6:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 80090ea:	f67f af61 	bls.w	8008fb0 <RCCEx_PLL2_Config+0x1c>
 80090ee:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80090f2:	481f      	ldr	r0, [pc, #124]	; (8009170 <RCCEx_PLL2_Config+0x1dc>)
 80090f4:	f00a fda2 	bl	8013c3c <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 80090f8:	68a3      	ldr	r3, [r4, #8]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	2b7f      	cmp	r3, #127	; 0x7f
 80090fe:	f67f af5c 	bls.w	8008fba <RCCEx_PLL2_Config+0x26>
 8009102:	f640 4181 	movw	r1, #3201	; 0xc81
 8009106:	481a      	ldr	r0, [pc, #104]	; (8009170 <RCCEx_PLL2_Config+0x1dc>)
 8009108:	f00a fd98 	bl	8013c3c <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 800910c:	6923      	ldr	r3, [r4, #16]
 800910e:	3b01      	subs	r3, #1
 8009110:	2b7f      	cmp	r3, #127	; 0x7f
 8009112:	f67f af57 	bls.w	8008fc4 <RCCEx_PLL2_Config+0x30>
 8009116:	f640 4182 	movw	r1, #3202	; 0xc82
 800911a:	4815      	ldr	r0, [pc, #84]	; (8009170 <RCCEx_PLL2_Config+0x1dc>)
 800911c:	f00a fd8e 	bl	8013c3c <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8009120:	68e3      	ldr	r3, [r4, #12]
 8009122:	3b01      	subs	r3, #1
 8009124:	2b7f      	cmp	r3, #127	; 0x7f
 8009126:	f67f af52 	bls.w	8008fce <RCCEx_PLL2_Config+0x3a>
 800912a:	f640 4183 	movw	r1, #3203	; 0xc83
 800912e:	4810      	ldr	r0, [pc, #64]	; (8009170 <RCCEx_PLL2_Config+0x1dc>)
 8009130:	f00a fd84 	bl	8013c3c <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8009134:	6963      	ldr	r3, [r4, #20]
 8009136:	f033 03c0 	bics.w	r3, r3, #192	; 0xc0
 800913a:	f43f af4d 	beq.w	8008fd8 <RCCEx_PLL2_Config+0x44>
 800913e:	f640 4184 	movw	r1, #3204	; 0xc84
 8009142:	480b      	ldr	r0, [pc, #44]	; (8009170 <RCCEx_PLL2_Config+0x1dc>)
 8009144:	f00a fd7a 	bl	8013c3c <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8009148:	69a3      	ldr	r3, [r4, #24]
 800914a:	f033 0320 	bics.w	r3, r3, #32
 800914e:	f43f af48 	beq.w	8008fe2 <RCCEx_PLL2_Config+0x4e>
 8009152:	f640 4185 	movw	r1, #3205	; 0xc85
 8009156:	4806      	ldr	r0, [pc, #24]	; (8009170 <RCCEx_PLL2_Config+0x1dc>)
 8009158:	f00a fd70 	bl	8013c3c <assert_failed>
 800915c:	e741      	b.n	8008fe2 <RCCEx_PLL2_Config+0x4e>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800915e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009162:	62eb      	str	r3, [r5, #44]	; 0x2c
 8009164:	e79a      	b.n	800909c <RCCEx_PLL2_Config+0x108>
 8009166:	bf00      	nop
 8009168:	58024400 	.word	0x58024400
 800916c:	ffff0007 	.word	0xffff0007
 8009170:	0802a48c 	.word	0x0802a48c

08009174 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8009176:	6803      	ldr	r3, [r0, #0]
{
 8009178:	4604      	mov	r4, r0
 800917a:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 800917c:	3b01      	subs	r3, #1
 800917e:	2b3e      	cmp	r3, #62	; 0x3e
 8009180:	f200 809a 	bhi.w	80092b8 <RCCEx_PLL3_Config+0x144>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8009184:	6863      	ldr	r3, [r4, #4]
 8009186:	3b04      	subs	r3, #4
 8009188:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 800918c:	f200 809f 	bhi.w	80092ce <RCCEx_PLL3_Config+0x15a>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8009190:	68a3      	ldr	r3, [r4, #8]
 8009192:	3b01      	subs	r3, #1
 8009194:	2b7f      	cmp	r3, #127	; 0x7f
 8009196:	f200 80a4 	bhi.w	80092e2 <RCCEx_PLL3_Config+0x16e>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 800919a:	6923      	ldr	r3, [r4, #16]
 800919c:	3b01      	subs	r3, #1
 800919e:	2b7f      	cmp	r3, #127	; 0x7f
 80091a0:	f200 80a9 	bhi.w	80092f6 <RCCEx_PLL3_Config+0x182>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 80091a4:	68e3      	ldr	r3, [r4, #12]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	2b7f      	cmp	r3, #127	; 0x7f
 80091aa:	f200 80ae 	bhi.w	800930a <RCCEx_PLL3_Config+0x196>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 80091ae:	6963      	ldr	r3, [r4, #20]
 80091b0:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 80091b4:	f040 80b3 	bne.w	800931e <RCCEx_PLL3_Config+0x1aa>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 80091b8:	69a3      	ldr	r3, [r4, #24]
 80091ba:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80091be:	f040 80b8 	bne.w	8009332 <RCCEx_PLL3_Config+0x1be>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 80091c2:	69e3      	ldr	r3, [r4, #28]
 80091c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091c8:	d270      	bcs.n	80092ac <RCCEx_PLL3_Config+0x138>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091ca:	4a5f      	ldr	r2, [pc, #380]	; (8009348 <RCCEx_PLL3_Config+0x1d4>)
 80091cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80091ce:	f003 0303 	and.w	r3, r3, #3
 80091d2:	2b03      	cmp	r3, #3
 80091d4:	d066      	beq.n	80092a4 <RCCEx_PLL3_Config+0x130>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80091d6:	6813      	ldr	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091d8:	4615      	mov	r5, r2
    __HAL_RCC_PLL3_DISABLE();
 80091da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091de:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80091e0:	f7f7 fd30 	bl	8000c44 <HAL_GetTick>
 80091e4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091e6:	e004      	b.n	80091f2 <RCCEx_PLL3_Config+0x7e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80091e8:	f7f7 fd2c 	bl	8000c44 <HAL_GetTick>
 80091ec:	1bc0      	subs	r0, r0, r7
 80091ee:	2802      	cmp	r0, #2
 80091f0:	d85a      	bhi.n	80092a8 <RCCEx_PLL3_Config+0x134>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091f2:	682b      	ldr	r3, [r5, #0]
 80091f4:	009a      	lsls	r2, r3, #2
 80091f6:	d4f7      	bmi.n	80091e8 <RCCEx_PLL3_Config+0x74>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80091f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80091fa:	6822      	ldr	r2, [r4, #0]
 80091fc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009200:	4952      	ldr	r1, [pc, #328]	; (800934c <RCCEx_PLL3_Config+0x1d8>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009202:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8009206:	62ab      	str	r3, [r5, #40]	; 0x28
 8009208:	6867      	ldr	r7, [r4, #4]
 800920a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800920e:	3f01      	subs	r7, #1
 8009210:	1e50      	subs	r0, r2, #1
 8009212:	3b01      	subs	r3, #1
 8009214:	6922      	ldr	r2, [r4, #16]
 8009216:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800921a:	025b      	lsls	r3, r3, #9
 800921c:	0400      	lsls	r0, r0, #16
 800921e:	3a01      	subs	r2, #1
 8009220:	b29b      	uxth	r3, r3
 8009222:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8009226:	0612      	lsls	r2, r2, #24
 8009228:	4303      	orrs	r3, r0
 800922a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800922e:	433b      	orrs	r3, r7
 8009230:	4313      	orrs	r3, r2
 8009232:	642b      	str	r3, [r5, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009234:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009236:	6962      	ldr	r2, [r4, #20]
 8009238:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800923c:	4313      	orrs	r3, r2
 800923e:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009240:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009242:	69a2      	ldr	r2, [r4, #24]
 8009244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009248:	4313      	orrs	r3, r2
 800924a:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800924c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800924e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009252:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009254:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8009256:	69e3      	ldr	r3, [r4, #28]
 8009258:	4011      	ands	r1, r2
 800925a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800925e:	6469      	str	r1, [r5, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009260:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009266:	62eb      	str	r3, [r5, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009268:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800926a:	2e00      	cmp	r6, #0
 800926c:	d067      	beq.n	800933e <RCCEx_PLL3_Config+0x1ca>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800926e:	2e01      	cmp	r6, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009270:	bf0c      	ite	eq
 8009272:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009276:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800927a:	62eb      	str	r3, [r5, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800927c:	4b32      	ldr	r3, [pc, #200]	; (8009348 <RCCEx_PLL3_Config+0x1d4>)
 800927e:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009280:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8009282:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009286:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009288:	f7f7 fcdc 	bl	8000c44 <HAL_GetTick>
 800928c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800928e:	e004      	b.n	800929a <RCCEx_PLL3_Config+0x126>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009290:	f7f7 fcd8 	bl	8000c44 <HAL_GetTick>
 8009294:	1b40      	subs	r0, r0, r5
 8009296:	2802      	cmp	r0, #2
 8009298:	d806      	bhi.n	80092a8 <RCCEx_PLL3_Config+0x134>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	d5f7      	bpl.n	8009290 <RCCEx_PLL3_Config+0x11c>
    }

  }


  return status;
 80092a0:	2000      	movs	r0, #0
}
 80092a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80092a4:	2001      	movs	r0, #1
}
 80092a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80092a8:	2003      	movs	r0, #3
}
 80092aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 80092ac:	f640 41ee 	movw	r1, #3310	; 0xcee
 80092b0:	4827      	ldr	r0, [pc, #156]	; (8009350 <RCCEx_PLL3_Config+0x1dc>)
 80092b2:	f00a fcc3 	bl	8013c3c <assert_failed>
 80092b6:	e788      	b.n	80091ca <RCCEx_PLL3_Config+0x56>
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 80092b8:	f640 41e7 	movw	r1, #3303	; 0xce7
 80092bc:	4824      	ldr	r0, [pc, #144]	; (8009350 <RCCEx_PLL3_Config+0x1dc>)
 80092be:	f00a fcbd 	bl	8013c3c <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 80092c2:	6863      	ldr	r3, [r4, #4]
 80092c4:	3b04      	subs	r3, #4
 80092c6:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 80092ca:	f67f af61 	bls.w	8009190 <RCCEx_PLL3_Config+0x1c>
 80092ce:	f640 41e8 	movw	r1, #3304	; 0xce8
 80092d2:	481f      	ldr	r0, [pc, #124]	; (8009350 <RCCEx_PLL3_Config+0x1dc>)
 80092d4:	f00a fcb2 	bl	8013c3c <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 80092d8:	68a3      	ldr	r3, [r4, #8]
 80092da:	3b01      	subs	r3, #1
 80092dc:	2b7f      	cmp	r3, #127	; 0x7f
 80092de:	f67f af5c 	bls.w	800919a <RCCEx_PLL3_Config+0x26>
 80092e2:	f640 41e9 	movw	r1, #3305	; 0xce9
 80092e6:	481a      	ldr	r0, [pc, #104]	; (8009350 <RCCEx_PLL3_Config+0x1dc>)
 80092e8:	f00a fca8 	bl	8013c3c <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 80092ec:	6923      	ldr	r3, [r4, #16]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	2b7f      	cmp	r3, #127	; 0x7f
 80092f2:	f67f af57 	bls.w	80091a4 <RCCEx_PLL3_Config+0x30>
 80092f6:	f640 41ea 	movw	r1, #3306	; 0xcea
 80092fa:	4815      	ldr	r0, [pc, #84]	; (8009350 <RCCEx_PLL3_Config+0x1dc>)
 80092fc:	f00a fc9e 	bl	8013c3c <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8009300:	68e3      	ldr	r3, [r4, #12]
 8009302:	3b01      	subs	r3, #1
 8009304:	2b7f      	cmp	r3, #127	; 0x7f
 8009306:	f67f af52 	bls.w	80091ae <RCCEx_PLL3_Config+0x3a>
 800930a:	f640 41eb 	movw	r1, #3307	; 0xceb
 800930e:	4810      	ldr	r0, [pc, #64]	; (8009350 <RCCEx_PLL3_Config+0x1dc>)
 8009310:	f00a fc94 	bl	8013c3c <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8009314:	6963      	ldr	r3, [r4, #20]
 8009316:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 800931a:	f43f af4d 	beq.w	80091b8 <RCCEx_PLL3_Config+0x44>
 800931e:	f640 41ec 	movw	r1, #3308	; 0xcec
 8009322:	480b      	ldr	r0, [pc, #44]	; (8009350 <RCCEx_PLL3_Config+0x1dc>)
 8009324:	f00a fc8a 	bl	8013c3c <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8009328:	69a3      	ldr	r3, [r4, #24]
 800932a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800932e:	f43f af48 	beq.w	80091c2 <RCCEx_PLL3_Config+0x4e>
 8009332:	f640 41ed 	movw	r1, #3309	; 0xced
 8009336:	4806      	ldr	r0, [pc, #24]	; (8009350 <RCCEx_PLL3_Config+0x1dc>)
 8009338:	f00a fc80 	bl	8013c3c <assert_failed>
 800933c:	e741      	b.n	80091c2 <RCCEx_PLL3_Config+0x4e>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800933e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009342:	62eb      	str	r3, [r5, #44]	; 0x2c
 8009344:	e79a      	b.n	800927c <RCCEx_PLL3_Config+0x108>
 8009346:	bf00      	nop
 8009348:	58024400 	.word	0x58024400
 800934c:	ffff0007 	.word	0xffff0007
 8009350:	0802a48c 	.word	0x0802a48c

08009354 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009358:	6803      	ldr	r3, [r0, #0]
{
 800935a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800935c:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8009360:	d016      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009362:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8009364:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8009368:	f000 8527 	beq.w	8009dba <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800936c:	f240 861b 	bls.w	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8009370:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8009374:	f000 855b 	beq.w	8009e2e <HAL_RCCEx_PeriphCLKConfig+0xada>
 8009378:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800937c:	f040 8639 	bne.w	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009380:	49b7      	ldr	r1, [pc, #732]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8009382:	2600      	movs	r6, #0
 8009384:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8009386:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800938a:	431a      	orrs	r2, r3
 800938c:	650a      	str	r2, [r1, #80]	; 0x50
 800938e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009390:	05dd      	lsls	r5, r3, #23
 8009392:	d50a      	bpl.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009394:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009396:	2a04      	cmp	r2, #4
 8009398:	d806      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800939a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800939e:	04ac      	.short	0x04ac
 80093a0:	04c404be 	.word	0x04c404be
 80093a4:	04880488 	.word	0x04880488
      ret = HAL_ERROR;
 80093a8:	2601      	movs	r6, #1
 80093aa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80093ac:	0598      	lsls	r0, r3, #22
 80093ae:	d515      	bpl.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Sai23ClockSelection)
 80093b0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80093b2:	2a80      	cmp	r2, #128	; 0x80
 80093b4:	f000 850c 	beq.w	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
 80093b8:	f200 85ea 	bhi.w	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80093bc:	2a00      	cmp	r2, #0
 80093be:	f000 853c 	beq.w	8009e3a <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80093c2:	2a40      	cmp	r2, #64	; 0x40
 80093c4:	f040 85eb 	bne.w	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093c8:	2100      	movs	r1, #0
 80093ca:	1d20      	adds	r0, r4, #4
 80093cc:	f7ff fde2 	bl	8008f94 <RCCEx_PLL2_Config>
 80093d0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80093d2:	2d00      	cmp	r5, #0
 80093d4:	f000 8505 	beq.w	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80093dc:	0559      	lsls	r1, r3, #21
 80093de:	d518      	bpl.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai4AClockSelection)
 80093e0:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80093e4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80093e8:	f000 8505 	beq.w	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80093ec:	f200 85c4 	bhi.w	8009f78 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80093f0:	2a00      	cmp	r2, #0
 80093f2:	f000 8530 	beq.w	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80093f6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80093fa:	f040 85c5 	bne.w	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093fe:	2100      	movs	r1, #0
 8009400:	1d20      	adds	r0, r4, #4
 8009402:	f7ff fdc7 	bl	8008f94 <RCCEx_PLL2_Config>
 8009406:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009408:	2d00      	cmp	r5, #0
 800940a:	f000 84fd 	beq.w	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009412:	051a      	lsls	r2, r3, #20
 8009414:	d518      	bpl.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009416:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800941a:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800941e:	f000 84fe 	beq.w	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8009422:	f200 85d5 	bhi.w	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8009426:	2a00      	cmp	r2, #0
 8009428:	f000 84b4 	beq.w	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800942c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8009430:	f040 85d6 	bne.w	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009434:	2100      	movs	r1, #0
 8009436:	1d20      	adds	r0, r4, #4
 8009438:	f7ff fdac 	bl	8008f94 <RCCEx_PLL2_Config>
 800943c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800943e:	2d00      	cmp	r5, #0
 8009440:	f000 84b0 	beq.w	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009448:	019f      	lsls	r7, r3, #6
 800944a:	d50d      	bpl.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x114>
    switch(PeriphClkInit->QspiClockSelection)
 800944c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800944e:	2a10      	cmp	r2, #16
 8009450:	f000 83f6 	beq.w	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009454:	f240 85c8 	bls.w	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
 8009458:	2a20      	cmp	r2, #32
 800945a:	f000 83fa 	beq.w	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800945e:	2a30      	cmp	r2, #48	; 0x30
 8009460:	f000 83f3 	beq.w	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      ret = HAL_ERROR;
 8009464:	2601      	movs	r6, #1
 8009466:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009468:	04d8      	lsls	r0, r3, #19
 800946a:	d517      	bpl.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->Spi123ClockSelection)
 800946c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800946e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009472:	f000 8477 	beq.w	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xa10>
 8009476:	f200 859f 	bhi.w	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800947a:	2a00      	cmp	r2, #0
 800947c:	f000 84e4 	beq.w	8009e48 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 8009480:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009484:	f040 85a0 	bne.w	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009488:	2100      	movs	r1, #0
 800948a:	1d20      	adds	r0, r4, #4
 800948c:	f7ff fd82 	bl	8008f94 <RCCEx_PLL2_Config>
 8009490:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009492:	2d00      	cmp	r5, #0
 8009494:	f000 846f 	beq.w	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800949c:	0499      	lsls	r1, r3, #18
 800949e:	d51b      	bpl.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Spi45ClockSelection)
 80094a0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80094a2:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80094a6:	f000 83e5 	beq.w	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x920>
 80094aa:	f200 8527 	bhi.w	8009efc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80094ae:	b142      	cbz	r2, 80094c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80094b0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80094b4:	f040 852e 	bne.w	8009f14 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094b8:	2101      	movs	r1, #1
 80094ba:	1d20      	adds	r0, r4, #4
 80094bc:	f7ff fd6a 	bl	8008f94 <RCCEx_PLL2_Config>
 80094c0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80094c2:	2d00      	cmp	r5, #0
 80094c4:	f040 833b 	bne.w	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80094c8:	4a65      	ldr	r2, [pc, #404]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80094ca:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80094cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80094ce:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80094d2:	430b      	orrs	r3, r1
 80094d4:	6513      	str	r3, [r2, #80]	; 0x50
 80094d6:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80094d8:	045a      	lsls	r2, r3, #17
 80094da:	d51d      	bpl.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Spi6ClockSelection)
 80094dc:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80094e0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80094e4:	f000 83d0 	beq.w	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80094e8:	f200 8527 	bhi.w	8009f3a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 80094ec:	b142      	cbz	r2, 8009500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80094ee:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80094f2:	f040 852e 	bne.w	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094f6:	2101      	movs	r1, #1
 80094f8:	1d20      	adds	r0, r4, #4
 80094fa:	f7ff fd4b 	bl	8008f94 <RCCEx_PLL2_Config>
 80094fe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009500:	2d00      	cmp	r5, #0
 8009502:	f040 8319 	bne.w	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009506:	4a56      	ldr	r2, [pc, #344]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8009508:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800950c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800950e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009512:	430b      	orrs	r3, r1
 8009514:	6593      	str	r3, [r2, #88]	; 0x58
 8009516:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009518:	041f      	lsls	r7, r3, #16
 800951a:	d50d      	bpl.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->FdcanClockSelection)
 800951c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800951e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8009522:	f000 83bb 	beq.w	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x948>
 8009526:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800952a:	f000 8298 	beq.w	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
 800952e:	2a00      	cmp	r2, #0
 8009530:	f000 829a 	beq.w	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x714>
      ret = HAL_ERROR;
 8009534:	2601      	movs	r6, #1
 8009536:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009538:	01d8      	lsls	r0, r3, #7
 800953a:	d50a      	bpl.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->FmcClockSelection)
 800953c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800953e:	2a03      	cmp	r2, #3
 8009540:	d805      	bhi.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009542:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009546:	0270      	.short	0x0270
 8009548:	026b033c 	.word	0x026b033c
 800954c:	0270      	.short	0x0270
      ret = HAL_ERROR;
 800954e:	2601      	movs	r6, #1
 8009550:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009552:	0259      	lsls	r1, r3, #9
 8009554:	f140 80c9 	bpl.w	80096ea <HAL_RCCEx_PeriphCLKConfig+0x396>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8009558:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800955c:	4f41      	ldr	r7, [pc, #260]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800955e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009562:	bf18      	it	ne
 8009564:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 8009568:	f422 4ca0 	bic.w	ip, r2, #20480	; 0x5000
 800956c:	f422 4010 	bic.w	r0, r2, #36864	; 0x9000
 8009570:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8009574:	bf14      	ite	ne
 8009576:	2301      	movne	r3, #1
 8009578:	2300      	moveq	r3, #0
 800957a:	f422 3e88 	bic.w	lr, r2, #69632	; 0x11000
 800957e:	f5bc 5f0c 	cmp.w	ip, #8960	; 0x2300
 8009582:	bf0c      	ite	eq
 8009584:	2300      	moveq	r3, #0
 8009586:	f003 0301 	andne.w	r3, r3, #1
 800958a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009670 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800958e:	f5b0 4f86 	cmp.w	r0, #17152	; 0x4300
 8009592:	bf0c      	ite	eq
 8009594:	2300      	moveq	r3, #0
 8009596:	f003 0301 	andne.w	r3, r3, #1
 800959a:	4833      	ldr	r0, [pc, #204]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800959c:	f5b1 4f03 	cmp.w	r1, #33536	; 0x8300
 80095a0:	bf0c      	ite	eq
 80095a2:	2300      	moveq	r3, #0
 80095a4:	f003 0301 	andne.w	r3, r3, #1
 80095a8:	f5be 4f63 	cmp.w	lr, #58112	; 0xe300
 80095ac:	bf0c      	ite	eq
 80095ae:	2300      	moveq	r3, #0
 80095b0:	f003 0301 	andne.w	r3, r3, #1
 80095b4:	f422 3e04 	bic.w	lr, r2, #135168	; 0x21000
 80095b8:	42b9      	cmp	r1, r7
 80095ba:	bf0c      	ite	eq
 80095bc:	2300      	moveq	r3, #0
 80095be:	f003 0301 	andne.w	r3, r3, #1
 80095c2:	f507 4740 	add.w	r7, r7, #49152	; 0xc000
 80095c6:	4281      	cmp	r1, r0
 80095c8:	bf0c      	ite	eq
 80095ca:	2300      	moveq	r3, #0
 80095cc:	f003 0301 	andne.w	r3, r3, #1
 80095d0:	f500 4040 	add.w	r0, r0, #49152	; 0xc000
 80095d4:	4561      	cmp	r1, ip
 80095d6:	bf0c      	ite	eq
 80095d8:	2300      	moveq	r3, #0
 80095da:	f003 0301 	andne.w	r3, r3, #1
 80095de:	f50c 4c40 	add.w	ip, ip, #49152	; 0xc000
 80095e2:	45be      	cmp	lr, r7
 80095e4:	bf0c      	ite	eq
 80095e6:	2300      	moveq	r3, #0
 80095e8:	f003 0301 	andne.w	r3, r3, #1
 80095ec:	f507 4740 	add.w	r7, r7, #49152	; 0xc000
 80095f0:	4281      	cmp	r1, r0
 80095f2:	bf0c      	ite	eq
 80095f4:	2300      	moveq	r3, #0
 80095f6:	f003 0301 	andne.w	r3, r3, #1
 80095fa:	f500 4040 	add.w	r0, r0, #49152	; 0xc000
 80095fe:	4561      	cmp	r1, ip
 8009600:	bf0c      	ite	eq
 8009602:	2300      	moveq	r3, #0
 8009604:	f003 0301 	andne.w	r3, r3, #1
 8009608:	f50c 4c40 	add.w	ip, ip, #49152	; 0xc000
 800960c:	42b9      	cmp	r1, r7
 800960e:	bf0c      	ite	eq
 8009610:	2300      	moveq	r3, #0
 8009612:	f003 0301 	andne.w	r3, r3, #1
 8009616:	f507 4740 	add.w	r7, r7, #49152	; 0xc000
 800961a:	4281      	cmp	r1, r0
 800961c:	bf0c      	ite	eq
 800961e:	2300      	moveq	r3, #0
 8009620:	f003 0301 	andne.w	r3, r3, #1
 8009624:	f500 4040 	add.w	r0, r0, #49152	; 0xc000
 8009628:	4561      	cmp	r1, ip
 800962a:	bf0c      	ite	eq
 800962c:	2300      	moveq	r3, #0
 800962e:	f003 0301 	andne.w	r3, r3, #1
 8009632:	42b9      	cmp	r1, r7
 8009634:	bf0c      	ite	eq
 8009636:	2300      	moveq	r3, #0
 8009638:	f003 0301 	andne.w	r3, r3, #1
 800963c:	4281      	cmp	r1, r0
 800963e:	bf0c      	ite	eq
 8009640:	2300      	moveq	r3, #0
 8009642:	f003 0301 	andne.w	r3, r3, #1
 8009646:	2b00      	cmp	r3, #0
 8009648:	f040 81b7 	bne.w	80099ba <HAL_RCCEx_PeriphCLKConfig+0x666>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800964c:	4b07      	ldr	r3, [pc, #28]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800964e:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009650:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009656:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009658:	f7f7 faf4 	bl	8000c44 <HAL_GetTick>
 800965c:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800965e:	e010      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8009660:	58024400 	.word	0x58024400
 8009664:	00010300 	.word	0x00010300
 8009668:	00014300 	.word	0x00014300
 800966c:	58024800 	.word	0x58024800
 8009670:	00018300 	.word	0x00018300
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009674:	f7f7 fae6 	bl	8000c44 <HAL_GetTick>
 8009678:	eba0 0008 	sub.w	r0, r0, r8
 800967c:	2864      	cmp	r0, #100	; 0x64
 800967e:	f200 8245 	bhi.w	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	05da      	lsls	r2, r3, #23
 8009686:	d5f5      	bpl.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x320>
    if(ret == HAL_OK)
 8009688:	2d00      	cmp	r5, #0
 800968a:	f040 84c0 	bne.w	800a00e <HAL_RCCEx_PeriphCLKConfig+0xcba>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800968e:	4b3e      	ldr	r3, [pc, #248]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8009690:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8009694:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009696:	4051      	eors	r1, r2
 8009698:	f411 7f40 	tst.w	r1, #768	; 0x300
 800969c:	d00d      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x366>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800969e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80096a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80096a6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80096aa:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80096ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80096ae:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80096b2:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80096b4:	671a      	str	r2, [r3, #112]	; 0x70
 80096b6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80096ba:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80096be:	f000 83f9 	beq.w	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xb60>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096c2:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80096c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096ca:	f000 8495 	beq.w	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 80096ce:	4a2e      	ldr	r2, [pc, #184]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80096d0:	6913      	ldr	r3, [r2, #16]
 80096d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80096d6:	6113      	str	r3, [r2, #16]
 80096d8:	4a2b      	ldr	r2, [pc, #172]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80096da:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80096de:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80096e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096e4:	430b      	orrs	r3, r1
 80096e6:	6713      	str	r3, [r2, #112]	; 0x70
 80096e8:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80096ea:	07df      	lsls	r7, r3, #31
 80096ec:	d52f      	bpl.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    switch(PeriphClkInit->Usart16ClockSelection)
 80096ee:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80096f0:	2a28      	cmp	r2, #40	; 0x28
 80096f2:	d82a      	bhi.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80096f4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80096f8:	002901a8 	.word	0x002901a8
 80096fc:	00290029 	.word	0x00290029
 8009700:	00290029 	.word	0x00290029
 8009704:	00290029 	.word	0x00290029
 8009708:	0029028a 	.word	0x0029028a
 800970c:	00290029 	.word	0x00290029
 8009710:	00290029 	.word	0x00290029
 8009714:	00290029 	.word	0x00290029
 8009718:	002901a2 	.word	0x002901a2
 800971c:	00290029 	.word	0x00290029
 8009720:	00290029 	.word	0x00290029
 8009724:	00290029 	.word	0x00290029
 8009728:	002901a8 	.word	0x002901a8
 800972c:	00290029 	.word	0x00290029
 8009730:	00290029 	.word	0x00290029
 8009734:	00290029 	.word	0x00290029
 8009738:	002901a8 	.word	0x002901a8
 800973c:	00290029 	.word	0x00290029
 8009740:	00290029 	.word	0x00290029
 8009744:	00290029 	.word	0x00290029
 8009748:	01a8      	.short	0x01a8
      ret = HAL_ERROR;
 800974a:	2601      	movs	r6, #1
 800974c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800974e:	0798      	lsls	r0, r3, #30
 8009750:	d50c      	bpl.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x418>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009752:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009754:	2a05      	cmp	r2, #5
 8009756:	d807      	bhi.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009758:	e8df f012 	tbh	[pc, r2, lsl #1]
 800975c:	021f0154 	.word	0x021f0154
 8009760:	0154014e 	.word	0x0154014e
 8009764:	01540154 	.word	0x01540154
      ret = HAL_ERROR;
 8009768:	2601      	movs	r6, #1
 800976a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800976c:	0759      	lsls	r1, r3, #29
 800976e:	d50f      	bpl.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009770:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8009774:	2a05      	cmp	r2, #5
 8009776:	d809      	bhi.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x438>
 8009778:	e8df f012 	tbh	[pc, r2, lsl #1]
 800977c:	02180131 	.word	0x02180131
 8009780:	0131012b 	.word	0x0131012b
 8009784:	01310131 	.word	0x01310131
 8009788:	58024400 	.word	0x58024400
      ret = HAL_ERROR;
 800978c:	2601      	movs	r6, #1
 800978e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009790:	069a      	lsls	r2, r3, #26
 8009792:	d51d      	bpl.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009794:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009798:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800979c:	f000 82a1 	beq.w	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x98e>
 80097a0:	f200 83bc 	bhi.w	8009f1c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
 80097a4:	b142      	cbz	r2, 80097b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80097a6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80097aa:	f040 83c3 	bne.w	8009f34 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097ae:	2100      	movs	r1, #0
 80097b0:	1d20      	adds	r0, r4, #4
 80097b2:	f7ff fbef 	bl	8008f94 <RCCEx_PLL2_Config>
 80097b6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80097b8:	2d00      	cmp	r5, #0
 80097ba:	f040 81c9 	bne.w	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80097be:	4ab9      	ldr	r2, [pc, #740]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 80097c0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80097c4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80097c6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80097ca:	430b      	orrs	r3, r1
 80097cc:	6553      	str	r3, [r2, #84]	; 0x54
 80097ce:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80097d0:	065f      	lsls	r7, r3, #25
 80097d2:	d51d      	bpl.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80097d4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80097d8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80097dc:	f000 8277 	beq.w	8009cce <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80097e0:	f200 83bb 	bhi.w	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xc06>
 80097e4:	b142      	cbz	r2, 80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80097e6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80097ea:	f040 83c2 	bne.w	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097ee:	2100      	movs	r1, #0
 80097f0:	1d20      	adds	r0, r4, #4
 80097f2:	f7ff fbcf 	bl	8008f94 <RCCEx_PLL2_Config>
 80097f6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80097f8:	2d00      	cmp	r5, #0
 80097fa:	f040 81a6 	bne.w	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80097fe:	4aa9      	ldr	r2, [pc, #676]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 8009800:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8009804:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009806:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800980a:	430b      	orrs	r3, r1
 800980c:	6593      	str	r3, [r2, #88]	; 0x58
 800980e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009810:	0618      	lsls	r0, r3, #24
 8009812:	d51d      	bpl.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009814:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8009818:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800981c:	f000 824d 	beq.w	8009cba <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009820:	f200 835d 	bhi.w	8009ede <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8009824:	b142      	cbz	r2, 8009838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8009826:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800982a:	f040 8364 	bne.w	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xba2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800982e:	2100      	movs	r1, #0
 8009830:	1d20      	adds	r0, r4, #4
 8009832:	f7ff fbaf 	bl	8008f94 <RCCEx_PLL2_Config>
 8009836:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009838:	2d00      	cmp	r5, #0
 800983a:	f040 8183 	bne.w	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800983e:	4a99      	ldr	r2, [pc, #612]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 8009840:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8009844:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009846:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800984a:	430b      	orrs	r3, r1
 800984c:	6593      	str	r3, [r2, #88]	; 0x58
 800984e:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009850:	0719      	lsls	r1, r3, #28
 8009852:	d510      	bpl.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x522>
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 8009854:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009858:	f432 5340 	bics.w	r3, r2, #12288	; 0x3000
 800985c:	f040 831a 	bne.w	8009e94 <HAL_RCCEx_PeriphCLKConfig+0xb40>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009860:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009864:	f000 8266 	beq.w	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009868:	498e      	ldr	r1, [pc, #568]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 800986a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800986c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009870:	4313      	orrs	r3, r2
 8009872:	654b      	str	r3, [r1, #84]	; 0x54
 8009874:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009876:	06da      	lsls	r2, r3, #27
 8009878:	d516      	bpl.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800987a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800987e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009882:	bf18      	it	ne
 8009884:	f5b2 5f40 	cmpne.w	r2, #12288	; 0x3000
 8009888:	d003      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800988a:	f432 7380 	bics.w	r3, r2, #256	; 0x100
 800988e:	f040 8309 	bne.w	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009892:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009896:	f000 8259 	beq.w	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x9f8>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800989a:	4982      	ldr	r1, [pc, #520]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 800989c:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800989e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098a2:	4313      	orrs	r3, r2
 80098a4:	658b      	str	r3, [r1, #88]	; 0x58
 80098a6:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098a8:	031f      	lsls	r7, r3, #12
 80098aa:	d50e      	bpl.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x576>
    switch(PeriphClkInit->AdcClockSelection)
 80098ac:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80098b0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80098b4:	f000 80e3 	beq.w	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x72a>
 80098b8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80098bc:	f000 80e5 	beq.w	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x736>
 80098c0:	2900      	cmp	r1, #0
 80098c2:	f000 82d6 	beq.w	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
      ret = HAL_ERROR;
 80098c6:	2601      	movs	r6, #1
 80098c8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80098ca:	0358      	lsls	r0, r3, #13
 80098cc:	d50f      	bpl.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch(PeriphClkInit->UsbClockSelection)
 80098ce:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80098d2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80098d6:	f000 80eb 	beq.w	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80098da:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80098de:	f000 80ed 	beq.w	8009abc <HAL_RCCEx_PeriphCLKConfig+0x768>
 80098e2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80098e6:	f000 82cc 	beq.w	8009e82 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
      ret = HAL_ERROR;
 80098ea:	2601      	movs	r6, #1
 80098ec:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80098ee:	03d9      	lsls	r1, r3, #15
 80098f0:	d515      	bpl.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 80098f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80098f4:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 80098f8:	f040 8171 	bne.w	8009bde <HAL_RCCEx_PeriphCLKConfig+0x88a>
    switch(PeriphClkInit->SdmmcClockSelection)
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 813b 	beq.w	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8009902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009906:	f040 8129 	bne.w	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x808>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800990a:	2102      	movs	r1, #2
 800990c:	1d20      	adds	r0, r4, #4
 800990e:	f7ff fb41 	bl	8008f94 <RCCEx_PLL2_Config>
 8009912:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009914:	2d00      	cmp	r5, #0
 8009916:	f000 8137 	beq.w	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x834>
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800991e:	009a      	lsls	r2, r3, #2
 8009920:	f100 80e9 	bmi.w	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009924:	039f      	lsls	r7, r3, #14
 8009926:	d437      	bmi.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x644>
 8009928:	3600      	adds	r6, #0
 800992a:	bf18      	it	ne
 800992c:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800992e:	02d8      	lsls	r0, r3, #11
 8009930:	d50b      	bpl.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8009932:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8009934:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009938:	f040 814a 	bne.w	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800993c:	4959      	ldr	r1, [pc, #356]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 800993e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8009940:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009944:	4313      	orrs	r3, r2
 8009946:	650b      	str	r3, [r1, #80]	; 0x50
 8009948:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800994a:	0299      	lsls	r1, r3, #10
 800994c:	d50b      	bpl.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x612>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800994e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8009950:	f032 7380 	bics.w	r3, r2, #16777216	; 0x1000000
 8009954:	f040 814d 	bne.w	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009958:	4952      	ldr	r1, [pc, #328]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 800995a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800995c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009960:	4313      	orrs	r3, r2
 8009962:	650b      	str	r3, [r1, #80]	; 0x50
 8009964:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009966:	005a      	lsls	r2, r3, #1
 8009968:	d510      	bpl.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x638>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800996a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800996e:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8009972:	f040 8145 	bne.w	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009976:	4b4b      	ldr	r3, [pc, #300]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 8009978:	691a      	ldr	r2, [r3, #16]
 800997a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800997e:	611a      	str	r2, [r3, #16]
 8009980:	691a      	ldr	r2, [r3, #16]
 8009982:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8009986:	430a      	orrs	r2, r1
 8009988:	611a      	str	r2, [r3, #16]
 800998a:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800998c:	2b00      	cmp	r3, #0
 800998e:	f2c0 80a1 	blt.w	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x780>
}
 8009992:	4630      	mov	r0, r6
 8009994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8009998:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800999a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800999e:	f000 80e1 	beq.w	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x810>
 80099a2:	f240 813c 	bls.w	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80099a6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80099aa:	f000 80e0 	beq.w	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80099ae:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80099b2:	f000 80dc 	beq.w	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80099b6:	2601      	movs	r6, #1
 80099b8:	e7b9      	b.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x5da>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80099ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80099be:	4b3a      	ldr	r3, [pc, #232]	; (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80099c0:	429a      	cmp	r2, r3
 80099c2:	f43f ae43 	beq.w	800964c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80099c6:	f44f 715a 	mov.w	r1, #872	; 0x368
 80099ca:	4838      	ldr	r0, [pc, #224]	; (8009aac <HAL_RCCEx_PeriphCLKConfig+0x758>)
 80099cc:	f00a f936 	bl	8013c3c <assert_failed>
 80099d0:	e63c      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099d2:	2101      	movs	r1, #1
 80099d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80099d8:	f7ff fbcc 	bl	8009174 <RCCEx_PLL3_Config>
 80099dc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80099de:	2d00      	cmp	r5, #0
 80099e0:	f040 809e 	bne.w	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80099e4:	4a2f      	ldr	r2, [pc, #188]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 80099e6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80099ea:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80099ec:	f023 0307 	bic.w	r3, r3, #7
 80099f0:	430b      	orrs	r3, r1
 80099f2:	6593      	str	r3, [r2, #88]	; 0x58
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	e6cb      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x43c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099f8:	2101      	movs	r1, #1
 80099fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80099fe:	f7ff fbb9 	bl	8009174 <RCCEx_PLL3_Config>
 8009a02:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009a04:	2d00      	cmp	r5, #0
 8009a06:	f040 808e 	bne.w	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a0a:	4a26      	ldr	r2, [pc, #152]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 8009a0c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8009a0e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009a10:	f023 0307 	bic.w	r3, r3, #7
 8009a14:	430b      	orrs	r3, r1
 8009a16:	6553      	str	r3, [r2, #84]	; 0x54
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	e6a7      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x418>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a1c:	2102      	movs	r1, #2
 8009a1e:	1d20      	adds	r0, r4, #4
 8009a20:	f7ff fab8 	bl	8008f94 <RCCEx_PLL2_Config>
 8009a24:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	d177      	bne.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009a2a:	4a1e      	ldr	r2, [pc, #120]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 8009a2c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009a2e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009a30:	f023 0303 	bic.w	r3, r3, #3
 8009a34:	430b      	orrs	r3, r1
 8009a36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	e58a      	b.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009a42:	f7ff fb97 	bl	8009174 <RCCEx_PLL3_Config>
 8009a46:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009a48:	2d00      	cmp	r5, #0
 8009a4a:	d163      	bne.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009a4c:	4a15      	ldr	r2, [pc, #84]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 8009a4e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8009a50:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009a52:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8009a56:	430b      	orrs	r3, r1
 8009a58:	6553      	str	r3, [r2, #84]	; 0x54
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	e677      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a5e:	2101      	movs	r1, #1
 8009a60:	1d20      	adds	r0, r4, #4
 8009a62:	f7ff fa97 	bl	8008f94 <RCCEx_PLL2_Config>
 8009a66:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009a68:	2d00      	cmp	r5, #0
 8009a6a:	d174      	bne.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009a6c:	4a0d      	ldr	r2, [pc, #52]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 8009a6e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8009a70:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009a72:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009a76:	430b      	orrs	r3, r1
 8009a78:	6513      	str	r3, [r2, #80]	; 0x50
 8009a7a:	6823      	ldr	r3, [r4, #0]
 8009a7c:	e55c      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a7e:	2102      	movs	r1, #2
 8009a80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009a84:	f7ff fb76 	bl	8009174 <RCCEx_PLL3_Config>
 8009a88:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009a8a:	2d00      	cmp	r5, #0
 8009a8c:	d151      	bne.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a8e:	4a05      	ldr	r2, [pc, #20]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 8009a90:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8009a94:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009a96:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009a9a:	430b      	orrs	r3, r1
 8009a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8009a9e:	6823      	ldr	r3, [r4, #0]
 8009aa0:	e713      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x576>
 8009aa2:	bf00      	nop
 8009aa4:	58024400 	.word	0x58024400
 8009aa8:	0003e300 	.word	0x0003e300
 8009aac:	0802a48c 	.word	0x0802a48c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ab6:	f7ff fb5d 	bl	8009174 <RCCEx_PLL3_Config>
 8009aba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009abc:	2d00      	cmp	r5, #0
 8009abe:	d135      	bne.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ac0:	4ab2      	ldr	r2, [pc, #712]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009ac2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8009ac6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009ac8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009acc:	430b      	orrs	r3, r1
 8009ace:	6553      	str	r3, [r2, #84]	; 0x54
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	e70c      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8009ad4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009ad6:	f032 5380 	bics.w	r3, r2, #268435456	; 0x10000000
 8009ada:	d003      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8009adc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009ae0:	f040 81c0 	bne.w	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xb10>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ae4:	49a9      	ldr	r1, [pc, #676]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>)
}
 8009ae6:	4630      	mov	r0, r6
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ae8:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009aea:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009aee:	4313      	orrs	r3, r2
 8009af0:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8009af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009af6:	2102      	movs	r1, #2
 8009af8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009afc:	f7ff fb3a 	bl	8009174 <RCCEx_PLL3_Config>
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	2800      	cmp	r0, #0
 8009b04:	f43f af0e 	beq.w	8009924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      status=HAL_ERROR;
 8009b08:	2601      	movs	r6, #1
 8009b0a:	e70b      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
            ret = HAL_TIMEOUT;
 8009b0c:	2603      	movs	r6, #3
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	4635      	mov	r5, r6
 8009b12:	e5ea      	b.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x396>
 8009b14:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009b16:	462e      	mov	r6, r5
 8009b18:	e619      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8009b1a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009b1c:	462e      	mov	r6, r5
 8009b1e:	e518      	b.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8009b20:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009b22:	462e      	mov	r6, r5
 8009b24:	e634      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8009b26:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009b28:	462e      	mov	r6, r5
 8009b2a:	e61f      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009b2c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009b2e:	462e      	mov	r6, r5
 8009b30:	e6dd      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009b32:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009b34:	462e      	mov	r6, r5
 8009b36:	e6c8      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x576>
 8009b38:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009b3a:	462e      	mov	r6, r5
 8009b3c:	e4ec      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8009b3e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009b40:	462e      	mov	r6, r5
 8009b42:	e4c9      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8009b44:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009b46:	462e      	mov	r6, r5
 8009b48:	e682      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8009b4a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009b4c:	462e      	mov	r6, r5
 8009b4e:	e65f      	b.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009b50:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009b52:	462e      	mov	r6, r5
 8009b54:	e63c      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009b56:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009b58:	462e      	mov	r6, r5
 8009b5a:	e4ed      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      ret = HAL_ERROR;
 8009b5c:	2601      	movs	r6, #1
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	4635      	mov	r5, r6
 8009b62:	e6dc      	b.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b64:	4a89      	ldr	r2, [pc, #548]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009b66:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009b6e:	2d00      	cmp	r5, #0
 8009b70:	d05a      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	2601      	movs	r6, #1
 8009b76:	e6da      	b.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b78:	4a84      	ldr	r2, [pc, #528]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009b7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b80:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009b82:	2d00      	cmp	r5, #0
 8009b84:	f47f aec9 	bne.w	800991a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b88:	4a80      	ldr	r2, [pc, #512]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009b8a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009b8c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b92:	430b      	orrs	r3, r1
 8009b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	e6c1      	b.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	1d20      	adds	r0, r4, #4
 8009b9e:	f7ff f9f9 	bl	8008f94 <RCCEx_PLL2_Config>
 8009ba2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009ba4:	2d00      	cmp	r5, #0
 8009ba6:	f43f af30 	beq.w	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8009baa:	e7bc      	b.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bac:	2101      	movs	r1, #1
 8009bae:	1d20      	adds	r0, r4, #4
 8009bb0:	f7ff f9f0 	bl	8008f94 <RCCEx_PLL2_Config>
 8009bb4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009bb6:	2d00      	cmp	r5, #0
 8009bb8:	f43f af14 	beq.w	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8009bbc:	e7b0      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bbe:	4a73      	ldr	r2, [pc, #460]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009bc0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009bc8:	2d00      	cmp	r5, #0
 8009bca:	f43f af2e 	beq.w	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8009bce:	e7a4      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8009bd0:	f240 51bd 	movw	r1, #1469	; 0x5bd
 8009bd4:	486e      	ldr	r0, [pc, #440]	; (8009d90 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8009bd6:	f00a f831 	bl	8013c3c <assert_failed>
 8009bda:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8009bdc:	e6ae      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8009bde:	f240 515e 	movw	r1, #1374	; 0x55e
 8009be2:	486b      	ldr	r0, [pc, #428]	; (8009d90 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8009be4:	f00a f82a 	bl	8013c3c <assert_failed>
 8009be8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    switch(PeriphClkInit->SdmmcClockSelection)
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f47f ae89 	bne.w	8009902 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
 8009bf0:	e7c2      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x824>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8009bf2:	f240 51d1 	movw	r1, #1489	; 0x5d1
 8009bf6:	4866      	ldr	r0, [pc, #408]	; (8009d90 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8009bf8:	f00a f820 	bl	8013c3c <assert_failed>
 8009bfc:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8009bfe:	e6ab      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x604>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8009c00:	f240 51e7 	movw	r1, #1511	; 0x5e7
 8009c04:	4862      	ldr	r0, [pc, #392]	; (8009d90 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8009c06:	f00a f819 	bl	8013c3c <assert_failed>
 8009c0a:	e6b4      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x622>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	1d20      	adds	r0, r4, #4
 8009c10:	f7ff f9c0 	bl	8008f94 <RCCEx_PLL2_Config>
 8009c14:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c16:	2d00      	cmp	r5, #0
 8009c18:	f43f af18 	beq.w	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009c1c:	e77a      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    switch(PeriphClkInit->RngClockSelection)
 8009c1e:	2a00      	cmp	r2, #0
 8009c20:	f47f aec9 	bne.w	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
    if(ret == HAL_OK)
 8009c24:	2d00      	cmp	r5, #0
 8009c26:	d1a4      	bne.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c28:	4a58      	ldr	r2, [pc, #352]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009c2a:	3600      	adds	r6, #0
 8009c2c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8009c2e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009c30:	bf18      	it	ne
 8009c32:	2601      	movne	r6, #1
 8009c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c38:	430b      	orrs	r3, r1
 8009c3a:	6553      	str	r3, [r2, #84]	; 0x54
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	e676      	b.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c40:	4a52      	ldr	r2, [pc, #328]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009c42:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c48:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009c4a:	b14d      	cbz	r5, 8009c60 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	462e      	mov	r6, r5
 8009c50:	e40a      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c52:	2102      	movs	r1, #2
 8009c54:	1d20      	adds	r0, r4, #4
 8009c56:	f7ff f99d 	bl	8008f94 <RCCEx_PLL2_Config>
 8009c5a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c5c:	2d00      	cmp	r5, #0
 8009c5e:	d1f5      	bne.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009c60:	4a4a      	ldr	r2, [pc, #296]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009c62:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009c64:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009c66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009c6a:	430b      	orrs	r3, r1
 8009c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	f7ff bbfa 	b.w	8009468 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c74:	2101      	movs	r1, #1
 8009c76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009c7a:	f7ff fa7b 	bl	8009174 <RCCEx_PLL3_Config>
 8009c7e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c80:	2d00      	cmp	r5, #0
 8009c82:	f43f ac21 	beq.w	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8009c86:	e75a      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c88:	2101      	movs	r1, #1
 8009c8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009c8e:	f7ff fa71 	bl	8009174 <RCCEx_PLL3_Config>
 8009c92:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c94:	2d00      	cmp	r5, #0
 8009c96:	f43f ac36 	beq.w	8009506 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009c9a:	e74d      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c9c:	4a3b      	ldr	r2, [pc, #236]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009c9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009ca6:	2d00      	cmp	r5, #0
 8009ca8:	f43f aee0 	beq.w	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x718>
 8009cac:	e753      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x802>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009cae:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8009cb0:	b34d      	cbz	r5, 8009d06 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	462e      	mov	r6, r5
 8009cb6:	f7ff bb79 	b.w	80093ac <HAL_RCCEx_PeriphCLKConfig+0x58>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cba:	2102      	movs	r1, #2
 8009cbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009cc0:	f7ff fa58 	bl	8009174 <RCCEx_PLL3_Config>
 8009cc4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009cc6:	2d00      	cmp	r5, #0
 8009cc8:	f43f adb9 	beq.w	800983e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8009ccc:	e73a      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cce:	2102      	movs	r1, #2
 8009cd0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009cd4:	f7ff fa4e 	bl	8009174 <RCCEx_PLL3_Config>
 8009cd8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009cda:	2d00      	cmp	r5, #0
 8009cdc:	f43f ad8f 	beq.w	80097fe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8009ce0:	e733      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ce2:	2102      	movs	r1, #2
 8009ce4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ce8:	f7ff fa44 	bl	8009174 <RCCEx_PLL3_Config>
 8009cec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009cee:	2d00      	cmp	r5, #0
 8009cf0:	f43f ad65 	beq.w	80097be <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8009cf4:	e72c      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cf6:	4a25      	ldr	r2, [pc, #148]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>)
      break;
 8009cf8:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cfa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d00:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009d02:	2d00      	cmp	r5, #0
 8009d04:	d1d5      	bne.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x95e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d06:	4a21      	ldr	r2, [pc, #132]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009d08:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009d0a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009d0c:	f023 0307 	bic.w	r3, r3, #7
 8009d10:	430b      	orrs	r3, r1
 8009d12:	6513      	str	r3, [r2, #80]	; 0x50
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	f7ff bb49 	b.w	80093ac <HAL_RCCEx_PeriphCLKConfig+0x58>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	1d20      	adds	r0, r4, #4
 8009d1e:	f7ff f939 	bl	8008f94 <RCCEx_PLL2_Config>
 8009d22:	4605      	mov	r5, r0
      break;
 8009d24:	e7c4      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d26:	2100      	movs	r1, #0
 8009d28:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009d2c:	f7ff fa22 	bl	8009174 <RCCEx_PLL3_Config>
 8009d30:	4605      	mov	r5, r0
      break;
 8009d32:	e7bd      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d34:	2102      	movs	r1, #2
 8009d36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009d3a:	f7ff fa1b 	bl	8009174 <RCCEx_PLL3_Config>
 8009d3e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009d42:	2800      	cmp	r0, #0
 8009d44:	f43f ad90 	beq.w	8009868 <HAL_RCCEx_PeriphCLKConfig+0x514>
          status = HAL_ERROR;
 8009d48:	2601      	movs	r6, #1
 8009d4a:	e58d      	b.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x514>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d4c:	2102      	movs	r1, #2
 8009d4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009d52:	f7ff fa0f 	bl	8009174 <RCCEx_PLL3_Config>
 8009d56:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	f43f ad9d 	beq.w	800989a <HAL_RCCEx_PeriphCLKConfig+0x546>
        status = HAL_ERROR;
 8009d60:	2601      	movs	r6, #1
 8009d62:	e59a      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x546>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d64:	2100      	movs	r1, #0
 8009d66:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009d6a:	f7ff fa03 	bl	8009174 <RCCEx_PLL3_Config>
 8009d6e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009d70:	2d00      	cmp	r5, #0
 8009d72:	f47f ab91 	bne.w	8009498 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009d76:	4a05      	ldr	r2, [pc, #20]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009d78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009d7a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d80:	430b      	orrs	r3, r1
 8009d82:	6513      	str	r3, [r2, #80]	; 0x50
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	f7ff bb89 	b.w	800949c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8009d8a:	bf00      	nop
 8009d8c:	58024400 	.word	0x58024400
 8009d90:	0802a48c 	.word	0x0802a48c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d94:	4aa0      	ldr	r2, [pc, #640]	; (800a018 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009d96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009d9e:	2d00      	cmp	r5, #0
 8009da0:	f47f ab50 	bne.w	8009444 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009da4:	4a9c      	ldr	r2, [pc, #624]	; (800a018 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009da6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8009daa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009dac:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009db0:	430b      	orrs	r3, r1
 8009db2:	6593      	str	r3, [r2, #88]	; 0x58
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	f7ff bb47 	b.w	8009448 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009dba:	2102      	movs	r1, #2
 8009dbc:	3004      	adds	r0, #4
 8009dbe:	f7ff f8e9 	bl	8008f94 <RCCEx_PLL2_Config>
 8009dc2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009dc4:	2e00      	cmp	r6, #0
 8009dc6:	f47f aae2 	bne.w	800938e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8009dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dcc:	f7ff bad8 	b.w	8009380 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009dd6:	f7ff f9cd 	bl	8009174 <RCCEx_PLL3_Config>
 8009dda:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009ddc:	2d00      	cmp	r5, #0
 8009dde:	f47f aafb 	bne.w	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009de2:	4a8d      	ldr	r2, [pc, #564]	; (800a018 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009de4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009de6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009de8:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8009dec:	430b      	orrs	r3, r1
 8009dee:	6513      	str	r3, [r2, #80]	; 0x50
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	f7ff baf3 	b.w	80093dc <HAL_RCCEx_PeriphCLKConfig+0x88>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009df6:	2100      	movs	r1, #0
 8009df8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009dfc:	f7ff f9ba 	bl	8009174 <RCCEx_PLL3_Config>
 8009e00:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009e02:	2d00      	cmp	r5, #0
 8009e04:	f47f ab03 	bne.w	800940e <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009e08:	4a83      	ldr	r2, [pc, #524]	; (800a018 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009e0a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8009e0e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009e10:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8009e14:	430b      	orrs	r3, r1
 8009e16:	6593      	str	r3, [r2, #88]	; 0x58
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	f7ff bafa 	b.w	8009412 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e1e:	2100      	movs	r1, #0
 8009e20:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e24:	f7ff f9a6 	bl	8009174 <RCCEx_PLL3_Config>
 8009e28:	4605      	mov	r5, r0
      break;
 8009e2a:	f7ff bb08 	b.w	800943e <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e2e:	2102      	movs	r1, #2
 8009e30:	3024      	adds	r0, #36	; 0x24
 8009e32:	f7ff f99f 	bl	8009174 <RCCEx_PLL3_Config>
 8009e36:	4606      	mov	r6, r0
      break;
 8009e38:	e7c4      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e3a:	4a77      	ldr	r2, [pc, #476]	; (800a018 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009e3c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e42:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009e44:	f7ff bac5 	b.w	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e48:	4a73      	ldr	r2, [pc, #460]	; (800a018 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009e4a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e50:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009e52:	f7ff bb1e 	b.w	8009492 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e56:	4a70      	ldr	r2, [pc, #448]	; (800a018 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009e58:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009e60:	f7ff bad2 	b.w	8009408 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8009e64:	f240 51f1 	movw	r1, #1521	; 0x5f1
 8009e68:	486c      	ldr	r0, [pc, #432]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0xcc8>)
 8009e6a:	f009 fee7 	bl	8013c3c <assert_failed>
 8009e6e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009e70:	e638      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x790>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e72:	1d20      	adds	r0, r4, #4
 8009e74:	f7ff f88e 	bl	8008f94 <RCCEx_PLL2_Config>
 8009e78:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009e7a:	2d00      	cmp	r5, #0
 8009e7c:	f43f ae07 	beq.w	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8009e80:	e657      	b.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e82:	4a65      	ldr	r2, [pc, #404]	; (800a018 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009e84:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e8a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009e8c:	2d00      	cmp	r5, #0
 8009e8e:	f43f ae17 	beq.w	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 8009e92:	e64b      	b.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 8009e94:	f240 41e6 	movw	r1, #1254	; 0x4e6
 8009e98:	4860      	ldr	r0, [pc, #384]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0xcc8>)
 8009e9a:	f009 fecf 	bl	8013c3c <assert_failed>
 8009e9e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009ea2:	e4dd      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8009ea4:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 8009ea8:	485c      	ldr	r0, [pc, #368]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0xcc8>)
 8009eaa:	f009 fec7 	bl	8013c3c <assert_failed>
 8009eae:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8009eb2:	e4ee      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x53e>
        tickstart = HAL_GetTick();
 8009eb4:	f7f6 fec6 	bl	8000c44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009eb8:	4f57      	ldr	r7, [pc, #348]	; (800a018 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
        tickstart = HAL_GetTick();
 8009eba:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ebc:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ec0:	e006      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ec2:	f7f6 febf 	bl	8000c44 <HAL_GetTick>
 8009ec6:	eba0 0009 	sub.w	r0, r0, r9
 8009eca:	4540      	cmp	r0, r8
 8009ecc:	f63f ae1e 	bhi.w	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ed0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ed2:	079b      	lsls	r3, r3, #30
 8009ed4:	d5f5      	bpl.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8009ed6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8009eda:	f7ff bbf2 	b.w	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009ede:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009ee2:	f43f aca9 	beq.w	8009838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8009ee6:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 8009eea:	f43f aca5 	beq.w	8009838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8009eee:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8009ef2:	f43f aca1 	beq.w	8009838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = HAL_ERROR;
 8009ef6:	2601      	movs	r6, #1
 8009ef8:	4635      	mov	r5, r6
 8009efa:	e4a9      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009efc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8009f00:	f43f aadf 	beq.w	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009f04:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8009f08:	f43f aadb 	beq.w	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009f0c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8009f10:	f43f aad7 	beq.w	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = HAL_ERROR;
 8009f14:	2601      	movs	r6, #1
 8009f16:	4635      	mov	r5, r6
 8009f18:	f7ff bade 	b.w	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009f1c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009f20:	f43f ac4a 	beq.w	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009f24:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8009f28:	f43f ac46 	beq.w	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009f2c:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009f30:	f43f ac42 	beq.w	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
      ret = HAL_ERROR;
 8009f34:	2601      	movs	r6, #1
 8009f36:	4635      	mov	r5, r6
 8009f38:	e44a      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009f3a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009f3e:	f43f aadf 	beq.w	8009500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8009f42:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8009f46:	f43f aadb 	beq.w	8009500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8009f4a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009f4e:	f43f aad7 	beq.w	8009500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      ret = HAL_ERROR;
 8009f52:	2601      	movs	r6, #1
 8009f54:	4635      	mov	r5, r6
 8009f56:	f7ff badf 	b.w	8009518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009f5a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009f5e:	f43f ac4b 	beq.w	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009f62:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8009f66:	f43f ac47 	beq.w	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009f6a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8009f6e:	f43f ac43 	beq.w	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      ret = HAL_ERROR;
 8009f72:	2601      	movs	r6, #1
 8009f74:	4635      	mov	r5, r6
 8009f76:	e44b      	b.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009f78:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8009f7c:	f43f aa44 	beq.w	8009408 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8009f80:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8009f84:	f43f aa40 	beq.w	8009408 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = HAL_ERROR;
 8009f88:	2601      	movs	r6, #1
 8009f8a:	4635      	mov	r5, r6
 8009f8c:	f7ff ba41 	b.w	8009412 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai23ClockSelection)
 8009f90:	2ac0      	cmp	r2, #192	; 0xc0
 8009f92:	f43f aa1e 	beq.w	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8009f96:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009f9a:	f43f aa1a 	beq.w	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 8009f9e:	2601      	movs	r6, #1
 8009fa0:	4635      	mov	r5, r6
 8009fa2:	f7ff ba1b 	b.w	80093dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009fa6:	bb22      	cbnz	r2, 8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fa8:	4a1b      	ldr	r2, [pc, #108]	; (800a018 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009faa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fb2:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8009fb4:	f7ff b9e4 	b.w	8009380 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009fb8:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8009fbc:	f43f aa69 	beq.w	8009492 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8009fc0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009fc4:	f43f aa65 	beq.w	8009492 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = HAL_ERROR;
 8009fc8:	2601      	movs	r6, #1
 8009fca:	4635      	mov	r5, r6
 8009fcc:	f7ff ba66 	b.w	800949c <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009fd0:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8009fd4:	f43f aa33 	beq.w	800943e <HAL_RCCEx_PeriphCLKConfig+0xea>
 8009fd8:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8009fdc:	f43f aa2f 	beq.w	800943e <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = HAL_ERROR;
 8009fe0:	2601      	movs	r6, #1
 8009fe2:	4635      	mov	r5, r6
 8009fe4:	f7ff ba30 	b.w	8009448 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->QspiClockSelection)
 8009fe8:	2a00      	cmp	r2, #0
 8009fea:	f43f ae2e 	beq.w	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8009fee:	f7ff ba39 	b.w	8009464 <HAL_RCCEx_PeriphCLKConfig+0x110>
      ret = HAL_ERROR;
 8009ff2:	2601      	movs	r6, #1
 8009ff4:	f7ff b9cc 	b.w	8009390 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ff8:	4807      	ldr	r0, [pc, #28]	; (800a018 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009ffa:	4b09      	ldr	r3, [pc, #36]	; (800a020 <HAL_RCCEx_PeriphCLKConfig+0xccc>)
 8009ffc:	6901      	ldr	r1, [r0, #16]
 8009ffe:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 800a002:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 800a006:	4313      	orrs	r3, r2
 800a008:	6103      	str	r3, [r0, #16]
 800a00a:	f7ff bb65 	b.w	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800a00e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800a010:	462e      	mov	r6, r5
 800a012:	f7ff bb6a 	b.w	80096ea <HAL_RCCEx_PeriphCLKConfig+0x396>
 800a016:	bf00      	nop
 800a018:	58024400 	.word	0x58024400
 800a01c:	0802a48c 	.word	0x0802a48c
 800a020:	00ffffcf 	.word	0x00ffffcf

0800a024 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a024:	4a46      	ldr	r2, [pc, #280]	; (800a140 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 800a026:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a028:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a02a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a02c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a02e:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a032:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 800a034:	2b00      	cmp	r3, #0
 800a036:	d059      	beq.n	800a0ec <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a038:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a03c:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a040:	f004 0403 	and.w	r4, r4, #3
 800a044:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a048:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 800a04c:	2c01      	cmp	r4, #1
 800a04e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a052:	ee06 1a90 	vmov	s13, r1
 800a056:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800a05a:	d002      	beq.n	800a062 <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 800a05c:	d34e      	bcc.n	800a0fc <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800a05e:	2c02      	cmp	r4, #2
 800a060:	d049      	beq.n	800a0f6 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a062:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a144 <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 800a066:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a06a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a06c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a070:	ee07 3a10 	vmov	s14, r3
 800a074:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a078:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a07c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800a080:	ee77 7a26 	vadd.f32	s15, s14, s13
 800a084:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a088:	4a2d      	ldr	r2, [pc, #180]	; (800a140 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 800a08a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a08e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a090:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a094:	ee06 3a90 	vmov	s13, r3
 800a098:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 800a09c:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a09e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a0a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a0a6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a0aa:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a0ae:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a0b0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a0b4:	ee06 3a90 	vmov	s13, r3
 800a0b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a0bc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a0c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a0c4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a0c8:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a0cc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a0ce:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a0d2:	ee07 3a10 	vmov	s14, r3
 800a0d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a0da:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a0de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a0e2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a0e6:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800a0ea:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a0ec:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a0f0:	6083      	str	r3, [r0, #8]
}
 800a0f2:	bc30      	pop	{r4, r5}
 800a0f4:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0f6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a148 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800a0fa:	e7b4      	b.n	800a066 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0fc:	6813      	ldr	r3, [r2, #0]
 800a0fe:	069b      	lsls	r3, r3, #26
 800a100:	d51a      	bpl.n	800a138 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a102:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a104:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a108:	4910      	ldr	r1, [pc, #64]	; (800a14c <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800a10a:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a10e:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a110:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a116:	ee07 1a10 	vmov	s14, r1
 800a11a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800a11e:	ee07 3a10 	vmov	s14, r3
 800a122:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800a126:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800a12a:	ee76 7a05 	vadd.f32	s15, s12, s10
 800a12e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a132:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a136:	e7a7      	b.n	800a088 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a138:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a150 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 800a13c:	e793      	b.n	800a066 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 800a13e:	bf00      	nop
 800a140:	58024400 	.word	0x58024400
 800a144:	4a742400 	.word	0x4a742400
 800a148:	4bbebc20 	.word	0x4bbebc20
 800a14c:	03d09000 	.word	0x03d09000
 800a150:	4c742400 	.word	0x4c742400

0800a154 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a154:	4a46      	ldr	r2, [pc, #280]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 800a156:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a158:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a15a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a15c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a15e:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a162:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800a164:	2b00      	cmp	r3, #0
 800a166:	d059      	beq.n	800a21c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a168:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a16c:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a170:	f004 0403 	and.w	r4, r4, #3
 800a174:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a178:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 800a17c:	2c01      	cmp	r4, #1
 800a17e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a182:	ee06 1a90 	vmov	s13, r1
 800a186:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800a18a:	d002      	beq.n	800a192 <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 800a18c:	d34e      	bcc.n	800a22c <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800a18e:	2c02      	cmp	r4, #2
 800a190:	d049      	beq.n	800a226 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a192:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a274 <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 800a196:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a19a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a19c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a0:	ee07 3a10 	vmov	s14, r3
 800a1a4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a1a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a1ac:	ee37 7a25 	vadd.f32	s14, s14, s11
 800a1b0:	ee77 7a26 	vadd.f32	s15, s14, s13
 800a1b4:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a1b8:	4a2d      	ldr	r2, [pc, #180]	; (800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 800a1ba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a1be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a1c0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a1c4:	ee06 3a90 	vmov	s13, r3
 800a1c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 800a1cc:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a1ce:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a1d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a1d6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a1da:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a1de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a1e0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a1e4:	ee06 3a90 	vmov	s13, r3
 800a1e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a1ec:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a1f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a1f4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a1f8:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a1fc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a1fe:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a202:	ee07 3a10 	vmov	s14, r3
 800a206:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a20a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a20e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a212:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a216:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800a21a:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a21c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a220:	6083      	str	r3, [r0, #8]
}
 800a222:	bc30      	pop	{r4, r5}
 800a224:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a226:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a278 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800a22a:	e7b4      	b.n	800a196 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a22c:	6813      	ldr	r3, [r2, #0]
 800a22e:	069b      	lsls	r3, r3, #26
 800a230:	d51a      	bpl.n	800a268 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a232:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a234:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a238:	4910      	ldr	r1, [pc, #64]	; (800a27c <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 800a23a:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a23e:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a240:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a246:	ee07 1a10 	vmov	s14, r1
 800a24a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800a24e:	ee07 3a10 	vmov	s14, r3
 800a252:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800a256:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800a25a:	ee76 7a05 	vadd.f32	s15, s12, s10
 800a25e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a262:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a266:	e7a7      	b.n	800a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a268:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a280 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 800a26c:	e793      	b.n	800a196 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 800a26e:	bf00      	nop
 800a270:	58024400 	.word	0x58024400
 800a274:	4a742400 	.word	0x4a742400
 800a278:	4bbebc20 	.word	0x4bbebc20
 800a27c:	03d09000 	.word	0x03d09000
 800a280:	4c742400 	.word	0x4c742400

0800a284 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a284:	4a46      	ldr	r2, [pc, #280]	; (800a3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 800a286:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a288:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a28a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a28c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a28e:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a292:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 800a294:	2b00      	cmp	r3, #0
 800a296:	d059      	beq.n	800a34c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a298:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a29c:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2a0:	f004 0403 	and.w	r4, r4, #3
 800a2a4:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a2a8:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 800a2ac:	2c01      	cmp	r4, #1
 800a2ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2b2:	ee06 1a90 	vmov	s13, r1
 800a2b6:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800a2ba:	d002      	beq.n	800a2c2 <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 800a2bc:	d34e      	bcc.n	800a35c <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 800a2be:	2c02      	cmp	r4, #2
 800a2c0:	d049      	beq.n	800a356 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a2c2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 800a2c6:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a2ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a2cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d0:	ee07 3a10 	vmov	s14, r3
 800a2d4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a2d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a2dc:	ee37 7a25 	vadd.f32	s14, s14, s11
 800a2e0:	ee77 7a26 	vadd.f32	s15, s14, s13
 800a2e4:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a2e8:	4a2d      	ldr	r2, [pc, #180]	; (800a3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 800a2ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a2ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a2f0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a2f4:	ee06 3a90 	vmov	s13, r3
 800a2f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 800a2fc:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a2fe:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a302:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a306:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a30a:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a30e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a310:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a314:	ee06 3a90 	vmov	s13, r3
 800a318:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a31c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a320:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a324:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a328:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a32c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a32e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a332:	ee07 3a10 	vmov	s14, r3
 800a336:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a33a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a33e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a342:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a346:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800a34a:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a34c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a350:	6083      	str	r3, [r0, #8]
}
 800a352:	bc30      	pop	{r4, r5}
 800a354:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a356:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a3a8 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800a35a:	e7b4      	b.n	800a2c6 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a35c:	6813      	ldr	r3, [r2, #0]
 800a35e:	069b      	lsls	r3, r3, #26
 800a360:	d51a      	bpl.n	800a398 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a362:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a364:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a368:	4910      	ldr	r1, [pc, #64]	; (800a3ac <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 800a36a:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a36e:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a370:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a376:	ee07 1a10 	vmov	s14, r1
 800a37a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800a37e:	ee07 3a10 	vmov	s14, r3
 800a382:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800a386:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800a38a:	ee76 7a05 	vadd.f32	s15, s12, s10
 800a38e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a392:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a396:	e7a7      	b.n	800a2e8 <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a398:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 800a39c:	e793      	b.n	800a2c6 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 800a39e:	bf00      	nop
 800a3a0:	58024400 	.word	0x58024400
 800a3a4:	4a742400 	.word	0x4a742400
 800a3a8:	4bbebc20 	.word	0x4bbebc20
 800a3ac:	03d09000 	.word	0x03d09000
 800a3b0:	4c742400 	.word	0x4c742400

0800a3b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a3b4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800a3b8:	b500      	push	{lr}
 800a3ba:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a3bc:	d02d      	beq.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a3be:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a3c2:	d018      	beq.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a3c4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a3c8:	d04e      	beq.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a3ca:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800a3ce:	d037      	beq.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a3d0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800a3d4:	f000 808b 	beq.w	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a3d8:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800a3dc:	f000 80ac 	beq.w	800a538 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a3e0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800a3e4:	f000 80b6 	beq.w	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a3e8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800a3ec:	d062      	beq.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 800a3ee:	2000      	movs	r0, #0
}
 800a3f0:	b005      	add	sp, #20
 800a3f2:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a3f6:	4a70      	ldr	r2, [pc, #448]	; (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a3f8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a3fa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800a3fe:	2b80      	cmp	r3, #128	; 0x80
 800a400:	d043      	beq.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800a402:	d86a      	bhi.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 800a404:	2b00      	cmp	r3, #0
 800a406:	d039      	beq.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800a408:	2b40      	cmp	r3, #64	; 0x40
 800a40a:	d1f0      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a40c:	a801      	add	r0, sp, #4
 800a40e:	f7ff fe09 	bl	800a024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a412:	9801      	ldr	r0, [sp, #4]
}
 800a414:	b005      	add	sp, #20
 800a416:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a41a:	4b67      	ldr	r3, [pc, #412]	; (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a41c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a41e:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 800a422:	2b04      	cmp	r3, #4
 800a424:	d8e3      	bhi.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800a426:	a201      	add	r2, pc, #4	; (adr r2, 800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 800a428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42c:	0800a47d 	.word	0x0800a47d
 800a430:	0800a40d 	.word	0x0800a40d
 800a434:	0800a48b 	.word	0x0800a48b
 800a438:	0800a461 	.word	0x0800a461
 800a43c:	0800a499 	.word	0x0800a499
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a440:	4a5d      	ldr	r2, [pc, #372]	; (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a442:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a444:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800a448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a44c:	d01d      	beq.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800a44e:	d85c      	bhi.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 800a450:	b1a3      	cbz	r3, 800a47c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800a452:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a456:	d0d9      	beq.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800a458:	e7c9      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 800a45a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a45e:	d15b      	bne.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 800a460:	4856      	ldr	r0, [pc, #344]	; (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 800a462:	b005      	add	sp, #20
 800a464:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a468:	4a53      	ldr	r2, [pc, #332]	; (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a46a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a46c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 800a470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a474:	d009      	beq.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800a476:	d8f0      	bhi.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d151      	bne.n	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a47c:	a801      	add	r0, sp, #4
 800a47e:	f7ff ff01 	bl	800a284 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a482:	9802      	ldr	r0, [sp, #8]
}
 800a484:	b005      	add	sp, #20
 800a486:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a48a:	a801      	add	r0, sp, #4
 800a48c:	f7ff fe62 	bl	800a154 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a490:	9801      	ldr	r0, [sp, #4]
}
 800a492:	b005      	add	sp, #20
 800a494:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a498:	4b47      	ldr	r3, [pc, #284]	; (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a49a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a49c:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800a4a0:	d019      	beq.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a4a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4a6:	d062      	beq.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 800a4a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4ac:	4844      	ldr	r0, [pc, #272]	; (800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 800a4ae:	bf18      	it	ne
 800a4b0:	2000      	movne	r0, #0
 800a4b2:	e79d      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a4b4:	4b40      	ldr	r3, [pc, #256]	; (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4b8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800a4bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4c0:	d068      	beq.n	800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800a4c2:	d95b      	bls.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 800a4c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4c8:	d051      	beq.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800a4ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4ce:	d05f      	beq.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800a4d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a4d4:	d18b      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 800a4d6:	483b      	ldr	r0, [pc, #236]	; (800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 800a4d8:	e78a      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 800a4da:	2bc0      	cmp	r3, #192	; 0xc0
 800a4dc:	d0c0      	beq.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800a4de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4e2:	d184      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a4e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a4e6:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800a4ea:	d1da      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800a4ec:	e7f3      	b.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a4ee:	4a32      	ldr	r2, [pc, #200]	; (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a4f0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a4f2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800a4f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4fa:	d0c6      	beq.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800a4fc:	d815      	bhi.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d0bc      	beq.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800a502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a506:	d081      	beq.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800a508:	e771      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 800a50a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a50e:	d0a7      	beq.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800a510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a514:	d0e6      	beq.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800a516:	e76a      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 800a518:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a51c:	d0e2      	beq.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800a51e:	e766      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800a520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a524:	f43f af72 	beq.w	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800a528:	e761      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 800a52a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a52e:	d097      	beq.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800a530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a534:	d0d6      	beq.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800a536:	e75a      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a538:	4a1f      	ldr	r2, [pc, #124]	; (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a53a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a53c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800a540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a544:	d015      	beq.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a54a:	d0cb      	beq.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f47f af4e 	bne.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800a552:	e75b      	b.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a554:	4b18      	ldr	r3, [pc, #96]	; (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 800a558:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800a55c:	d08e      	beq.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f43f af45 	beq.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a564:	a801      	add	r0, sp, #4
 800a566:	f7ff fd5d 	bl	800a024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a56a:	9803      	ldr	r0, [sp, #12]
          break;
 800a56c:	e740      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 800a56e:	4816      	ldr	r0, [pc, #88]	; (800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 800a570:	e73e      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a572:	a801      	add	r0, sp, #4
 800a574:	f7ff fdee 	bl	800a154 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a578:	9803      	ldr	r0, [sp, #12]
          break;
 800a57a:	e739      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 800a57c:	b17b      	cbz	r3, 800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a57e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a582:	f47f af34 	bne.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a586:	a801      	add	r0, sp, #4
 800a588:	f7ff fd4c 	bl	800a024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a58c:	9802      	ldr	r0, [sp, #8]
          break;
 800a58e:	e72f      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 800a590:	480b      	ldr	r0, [pc, #44]	; (800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 800a592:	e72d      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a594:	a801      	add	r0, sp, #4
 800a596:	f7ff fddd 	bl	800a154 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a59a:	9802      	ldr	r0, [sp, #8]
          break;
 800a59c:	e728      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a59e:	f7fe fc51 	bl	8008e44 <HAL_RCC_GetHCLKFreq>
 800a5a2:	4b05      	ldr	r3, [pc, #20]	; (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a5a4:	4a09      	ldr	r2, [pc, #36]	; (800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 800a5a6:	6a1b      	ldr	r3, [r3, #32]
 800a5a8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a5ac:	5cd3      	ldrb	r3, [r2, r3]
 800a5ae:	f003 031f 	and.w	r3, r3, #31
 800a5b2:	40d8      	lsrs	r0, r3
          break;
 800a5b4:	e71c      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800a5b6:	bf00      	nop
 800a5b8:	58024400 	.word	0x58024400
 800a5bc:	00bb8000 	.word	0x00bb8000
 800a5c0:	017d7840 	.word	0x017d7840
 800a5c4:	03d09000 	.word	0x03d09000
 800a5c8:	003d0900 	.word	0x003d0900
 800a5cc:	0802b300 	.word	0x0802b300

0800a5d0 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d049      	beq.n	800a668 <HAL_RNG_Init+0x98>
{
 800a5d4:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800a5d6:	4b28      	ldr	r3, [pc, #160]	; (800a678 <HAL_RNG_Init+0xa8>)
 800a5d8:	4604      	mov	r4, r0
 800a5da:	6802      	ldr	r2, [r0, #0]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d003      	beq.n	800a5e8 <HAL_RNG_Init+0x18>
 800a5e0:	21b1      	movs	r1, #177	; 0xb1
 800a5e2:	4826      	ldr	r0, [pc, #152]	; (800a67c <HAL_RNG_Init+0xac>)
 800a5e4:	f009 fb2a 	bl	8013c3c <assert_failed>
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
 800a5e8:	6863      	ldr	r3, [r4, #4]
 800a5ea:	f033 0320 	bics.w	r3, r3, #32
 800a5ee:	d131      	bne.n	800a654 <HAL_RNG_Init+0x84>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a5f0:	7a63      	ldrb	r3, [r4, #9]
 800a5f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a5f6:	b343      	cbz	r3, 800a64a <HAL_RNG_Init+0x7a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a5f8:	2302      	movs	r3, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800a5fa:	e9d4 2100 	ldrd	r2, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800a5fe:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800a600:	6813      	ldr	r3, [r2, #0]
 800a602:	f023 0320 	bic.w	r3, r3, #32
 800a606:	430b      	orrs	r3, r1
 800a608:	6013      	str	r3, [r2, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a60a:	6822      	ldr	r2, [r4, #0]
 800a60c:	6813      	ldr	r3, [r2, #0]
 800a60e:	f043 0304 	orr.w	r3, r3, #4
 800a612:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a614:	6823      	ldr	r3, [r4, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	065b      	lsls	r3, r3, #25
 800a61a:	d503      	bpl.n	800a624 <HAL_RNG_Init+0x54>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a61c:	2304      	movs	r3, #4
    return HAL_ERROR;
 800a61e:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 800a620:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800a622:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 800a624:	f7f6 fb0e 	bl	8000c44 <HAL_GetTick>
 800a628:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800a62a:	e004      	b.n	800a636 <HAL_RNG_Init+0x66>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a62c:	f7f6 fb0a 	bl	8000c44 <HAL_GetTick>
 800a630:	1b40      	subs	r0, r0, r5
 800a632:	2802      	cmp	r0, #2
 800a634:	d81a      	bhi.n	800a66c <HAL_RNG_Init+0x9c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800a636:	6823      	ldr	r3, [r4, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f013 0304 	ands.w	r3, r3, #4
 800a63e:	d1f5      	bne.n	800a62c <HAL_RNG_Init+0x5c>
  hrng->State = HAL_RNG_STATE_READY;
 800a640:	2201      	movs	r2, #1
  return HAL_OK;
 800a642:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800a644:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a646:	60e3      	str	r3, [r4, #12]
}
 800a648:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800a64a:	7222      	strb	r2, [r4, #8]
    HAL_RNG_MspInit(hrng);
 800a64c:	4620      	mov	r0, r4
 800a64e:	f00a f805 	bl	801465c <HAL_RNG_MspInit>
 800a652:	e7d1      	b.n	800a5f8 <HAL_RNG_Init+0x28>
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
 800a654:	21b2      	movs	r1, #178	; 0xb2
 800a656:	4809      	ldr	r0, [pc, #36]	; (800a67c <HAL_RNG_Init+0xac>)
 800a658:	f009 faf0 	bl	8013c3c <assert_failed>
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a65c:	7a63      	ldrb	r3, [r4, #9]
 800a65e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1c8      	bne.n	800a5f8 <HAL_RNG_Init+0x28>
 800a666:	e7f0      	b.n	800a64a <HAL_RNG_Init+0x7a>
    return HAL_ERROR;
 800a668:	2001      	movs	r0, #1
}
 800a66a:	4770      	bx	lr
      hrng->State = HAL_RNG_STATE_ERROR;
 800a66c:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a66e:	2302      	movs	r3, #2
      return HAL_ERROR;
 800a670:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 800a672:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a674:	60e3      	str	r3, [r4, #12]
}
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	48021800 	.word	0x48021800
 800a67c:	0802a4c8 	.word	0x0802a4c8

0800a680 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800a680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800a682:	7a03      	ldrb	r3, [r0, #8]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d00b      	beq.n	800a6a0 <HAL_RNG_GenerateRandomNumber+0x20>
 800a688:	4604      	mov	r4, r0
 800a68a:	2001      	movs	r0, #1
 800a68c:	460e      	mov	r6, r1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800a68e:	7a63      	ldrb	r3, [r4, #9]
  __HAL_LOCK(hrng);
 800a690:	7220      	strb	r0, [r4, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 800a692:	4283      	cmp	r3, r0
 800a694:	d006      	beq.n	800a6a4 <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800a696:	2304      	movs	r3, #4
 800a698:	60e3      	str	r3, [r4, #12]
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800a69a:	2300      	movs	r3, #0
 800a69c:	7223      	strb	r3, [r4, #8]

  return status;
}
 800a69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng);
 800a6a0:	2002      	movs	r0, #2
}
 800a6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	7263      	strb	r3, [r4, #9]
    tickstart = HAL_GetTick();
 800a6a8:	f7f6 facc 	bl	8000c44 <HAL_GetTick>
 800a6ac:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a6ae:	e004      	b.n	800a6ba <HAL_RNG_GenerateRandomNumber+0x3a>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a6b0:	f7f6 fac8 	bl	8000c44 <HAL_GetTick>
 800a6b4:	1bc0      	subs	r0, r0, r7
 800a6b6:	2802      	cmp	r0, #2
 800a6b8:	d80b      	bhi.n	800a6d2 <HAL_RNG_GenerateRandomNumber+0x52>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a6ba:	6822      	ldr	r2, [r4, #0]
 800a6bc:	6855      	ldr	r5, [r2, #4]
 800a6be:	f015 0501 	ands.w	r5, r5, #1
 800a6c2:	d0f5      	beq.n	800a6b0 <HAL_RNG_GenerateRandomNumber+0x30>
    hrng->RandomNumber = hrng->Instance->DR;
 800a6c4:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 800a6c6:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 800a6c8:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 800a6ca:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800a6cc:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800a6ce:	7262      	strb	r2, [r4, #9]
 800a6d0:	e7e3      	b.n	800a69a <HAL_RNG_GenerateRandomNumber+0x1a>
        hrng->State = HAL_RNG_STATE_READY;
 800a6d2:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a6d4:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 800a6d6:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 800a6d8:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a6da:	60e3      	str	r3, [r4, #12]
}
 800a6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6de:	bf00      	nop

0800a6e0 <HAL_SAI_InitProtocol>:
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
 800a6e0:	2904      	cmp	r1, #4
{
 800a6e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e4:	460d      	mov	r5, r1
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	4617      	mov	r7, r2
 800a6ea:	461e      	mov	r6, r3
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
 800a6ec:	d87c      	bhi.n	800a7e8 <HAL_SAI_InitProtocol+0x108>
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));
 800a6ee:	2f03      	cmp	r7, #3
 800a6f0:	d874      	bhi.n	800a7dc <HAL_SAI_InitProtocol+0xfc>

  switch (protocol)
 800a6f2:	2d04      	cmp	r5, #4
 800a6f4:	d828      	bhi.n	800a748 <HAL_SAI_InitProtocol+0x68>
 800a6f6:	e8df f005 	tbb	[pc, r5]
 800a6fa:	4c4c      	.short	0x4c4c
 800a6fc:	294c      	.short	0x294c
 800a6fe:	29          	.byte	0x29
 800a6ff:	00          	.byte	0x00

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
 800a700:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a702:	3b01      	subs	r3, #1
 800a704:	2b02      	cmp	r3, #2
 800a706:	d904      	bls.n	800a712 <HAL_SAI_InitProtocol+0x32>
 800a708:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a70c:	4839      	ldr	r0, [pc, #228]	; (800a7f4 <HAL_SAI_InitProtocol+0x114>)
 800a70e:	f009 fa95 	bl	8013c3c <assert_failed>
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
 800a712:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a714:	b113      	cbz	r3, 800a71c <HAL_SAI_InitProtocol+0x3c>
 800a716:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800a71a:	d004      	beq.n	800a726 <HAL_SAI_InitProtocol+0x46>
 800a71c:	f240 11af 	movw	r1, #431	; 0x1af
 800a720:	4834      	ldr	r0, [pc, #208]	; (800a7f4 <HAL_SAI_InitProtocol+0x114>)
 800a722:	f009 fa8b 	bl	8013c3c <assert_failed>
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	4a33      	ldr	r2, [pc, #204]	; (800a7f8 <HAL_SAI_InitProtocol+0x118>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d005      	beq.n	800a73a <HAL_SAI_InitProtocol+0x5a>
 800a72e:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800a732:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800a736:	4293      	cmp	r3, r2
 800a738:	d106      	bne.n	800a748 <HAL_SAI_InitProtocol+0x68>
 800a73a:	6862      	ldr	r2, [r4, #4]
 800a73c:	2a01      	cmp	r2, #1
 800a73e:	d103      	bne.n	800a748 <HAL_SAI_InitProtocol+0x68>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a740:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a742:	2a00      	cmp	r2, #0
 800a744:	f000 816d 	beq.w	800aa22 <HAL_SAI_InitProtocol+0x342>
  hsai->SlotInit.SlotNumber      = nbslot;

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
  {
    return HAL_ERROR;
 800a748:	2001      	movs	r0, #1
}
 800a74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a74c:	6862      	ldr	r2, [r4, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a74e:	2300      	movs	r3, #0
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a750:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a754:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a758:	f032 0202 	bics.w	r2, r2, #2
  hsai->SlotInit.FirstBitOffset  = 0;
  hsai->SlotInit.SlotNumber      = nbslot;
 800a75c:	6726      	str	r6, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a75e:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a760:	bf0c      	ite	eq
 800a762:	2201      	moveq	r2, #1
 800a764:	461a      	movne	r2, r3
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;

  if (protocol == SAI_PCM_SHORT)
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800a766:	2d04      	cmp	r5, #4
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a768:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a76a:	6522      	str	r2, [r4, #80]	; 0x50
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a76c:	f64f 72ff 	movw	r2, #65535	; 0xffff
      hsai->FrameInit.ActiveFrameLength = 1;
 800a770:	bf14      	ite	ne
 800a772:	250d      	movne	r5, #13
 800a774:	2501      	moveq	r5, #1
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a776:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a778:	65a5      	str	r5, [r4, #88]	; 0x58
  hsai->SlotInit.FirstBitOffset  = 0;
 800a77a:	66a3      	str	r3, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a77c:	6762      	str	r2, [r4, #116]	; 0x74
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a77e:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
  }

  switch (datasize)
 800a782:	2f03      	cmp	r7, #3
 800a784:	d8e0      	bhi.n	800a748 <HAL_SAI_InitProtocol+0x68>
 800a786:	e8df f017 	tbh	[pc, r7, lsl #1]
 800a78a:	0173      	.short	0x0173
 800a78c:	017a016d 	.word	0x017a016d
 800a790:	0039      	.short	0x0039
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a792:	6862      	ldr	r2, [r4, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a794:	2300      	movs	r3, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800a796:	6726      	str	r6, [r4, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a798:	f032 0202 	bics.w	r2, r2, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a79c:	6463      	str	r3, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a79e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a7a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a7a4:	bf08      	it	eq
 800a7a6:	4619      	moveq	r1, r3
  hsai->SlotInit.FirstBitOffset  = 0;
 800a7a8:	66a3      	str	r3, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a7aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a7ae:	bf18      	it	ne
 800a7b0:	2101      	movne	r1, #1
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a7b2:	65e2      	str	r2, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a7b4:	6763      	str	r3, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 800a7b6:	f016 0301 	ands.w	r3, r6, #1
 800a7ba:	6521      	str	r1, [r4, #80]	; 0x50
 800a7bc:	d1c4      	bne.n	800a748 <HAL_SAI_InitProtocol+0x68>
  if (protocol == SAI_I2S_STANDARD)
 800a7be:	2d00      	cmp	r5, #0
 800a7c0:	f000 8164 	beq.w	800aa8c <HAL_SAI_InitProtocol+0x3ac>
 800a7c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a7c8:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
  switch (datasize)
 800a7cc:	2f03      	cmp	r7, #3
 800a7ce:	d8bb      	bhi.n	800a748 <HAL_SAI_InitProtocol+0x68>
 800a7d0:	e8df f017 	tbh	[pc, r7, lsl #1]
 800a7d4:	02490259 	.word	0x02490259
 800a7d8:	022e0238 	.word	0x022e0238
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));
 800a7dc:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800a7e0:	4804      	ldr	r0, [pc, #16]	; (800a7f4 <HAL_SAI_InitProtocol+0x114>)
 800a7e2:	f009 fa2b 	bl	8013c3c <assert_failed>
 800a7e6:	e784      	b.n	800a6f2 <HAL_SAI_InitProtocol+0x12>
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
 800a7e8:	f240 1151 	movw	r1, #337	; 0x151
 800a7ec:	4801      	ldr	r0, [pc, #4]	; (800a7f4 <HAL_SAI_InitProtocol+0x114>)
 800a7ee:	f009 fa25 	bl	8013c3c <assert_failed>
 800a7f2:	e77c      	b.n	800a6ee <HAL_SAI_InitProtocol+0xe>
 800a7f4:	0802a500 	.word	0x0802a500
 800a7f8:	40015804 	.word	0x40015804
      hsai->FrameInit.FrameLength = 32U * nbslot;
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
      break;
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a7fc:	0176      	lsls	r6, r6, #5
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a7fe:	21e0      	movs	r1, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a800:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a802:	6566      	str	r6, [r4, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a804:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a806:	66e2      	str	r2, [r4, #108]	; 0x6c
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 800a808:	6822      	ldr	r2, [r4, #0]
 800a80a:	4ba7      	ldr	r3, [pc, #668]	; (800aaa8 <HAL_SAI_InitProtocol+0x3c8>)
 800a80c:	49a7      	ldr	r1, [pc, #668]	; (800aaac <HAL_SAI_InitProtocol+0x3cc>)
 800a80e:	48a8      	ldr	r0, [pc, #672]	; (800aab0 <HAL_SAI_InitProtocol+0x3d0>)
 800a810:	429a      	cmp	r2, r3
 800a812:	bf18      	it	ne
 800a814:	428a      	cmpne	r2, r1
 800a816:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a81a:	4da6      	ldr	r5, [pc, #664]	; (800aab4 <HAL_SAI_InitProtocol+0x3d4>)
 800a81c:	bf14      	ite	ne
 800a81e:	2301      	movne	r3, #1
 800a820:	2300      	moveq	r3, #0
 800a822:	4282      	cmp	r2, r0
 800a824:	bf0c      	ite	eq
 800a826:	2300      	moveq	r3, #0
 800a828:	f003 0301 	andne.w	r3, r3, #1
 800a82c:	f500 6084 	add.w	r0, r0, #1056	; 0x420
 800a830:	428a      	cmp	r2, r1
 800a832:	bf0c      	ite	eq
 800a834:	2300      	moveq	r3, #0
 800a836:	f003 0301 	andne.w	r3, r3, #1
 800a83a:	499f      	ldr	r1, [pc, #636]	; (800aab8 <HAL_SAI_InitProtocol+0x3d8>)
 800a83c:	42aa      	cmp	r2, r5
 800a83e:	bf0c      	ite	eq
 800a840:	2300      	moveq	r3, #0
 800a842:	f003 0301 	andne.w	r3, r3, #1
 800a846:	4282      	cmp	r2, r0
 800a848:	bf0c      	ite	eq
 800a84a:	2300      	moveq	r3, #0
 800a84c:	f003 0301 	andne.w	r3, r3, #1
 800a850:	428a      	cmp	r2, r1
 800a852:	bf0c      	ite	eq
 800a854:	2300      	moveq	r3, #0
 800a856:	f003 0301 	andne.w	r3, r3, #1
 800a85a:	b11b      	cbz	r3, 800a864 <HAL_SAI_InitProtocol+0x184>
 800a85c:	4b97      	ldr	r3, [pc, #604]	; (800aabc <HAL_SAI_InitProtocol+0x3dc>)
 800a85e:	429a      	cmp	r2, r3
 800a860:	f040 835d 	bne.w	800af1e <HAL_SAI_InitProtocol+0x83e>
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 800a864:	6a22      	ldr	r2, [r4, #32]
 800a866:	f64b 3680 	movw	r6, #48000	; 0xbb80
 800a86a:	4b95      	ldr	r3, [pc, #596]	; (800aac0 <HAL_SAI_InitProtocol+0x3e0>)
 800a86c:	f64a 4544 	movw	r5, #44100	; 0xac44
 800a870:	4994      	ldr	r1, [pc, #592]	; (800aac4 <HAL_SAI_InitProtocol+0x3e4>)
 800a872:	f245 6022 	movw	r0, #22050	; 0x5622
 800a876:	429a      	cmp	r2, r3
 800a878:	bf18      	it	ne
 800a87a:	428a      	cmpne	r2, r1
 800a87c:	f642 3111 	movw	r1, #11025	; 0x2b11
 800a880:	bf14      	ite	ne
 800a882:	2301      	movne	r3, #1
 800a884:	2300      	moveq	r3, #0
 800a886:	42b2      	cmp	r2, r6
 800a888:	bf0c      	ite	eq
 800a88a:	2300      	moveq	r3, #0
 800a88c:	f003 0301 	andne.w	r3, r3, #1
 800a890:	42aa      	cmp	r2, r5
 800a892:	bf0c      	ite	eq
 800a894:	2300      	moveq	r3, #0
 800a896:	f003 0301 	andne.w	r3, r3, #1
 800a89a:	f5b2 4ffa 	cmp.w	r2, #32000	; 0x7d00
 800a89e:	bf0c      	ite	eq
 800a8a0:	2300      	moveq	r3, #0
 800a8a2:	f003 0301 	andne.w	r3, r3, #1
 800a8a6:	4282      	cmp	r2, r0
 800a8a8:	bf0c      	ite	eq
 800a8aa:	2300      	moveq	r3, #0
 800a8ac:	f003 0301 	andne.w	r3, r3, #1
 800a8b0:	f5b2 5f7a 	cmp.w	r2, #16000	; 0x3e80
 800a8b4:	bf0c      	ite	eq
 800a8b6:	2300      	moveq	r3, #0
 800a8b8:	f003 0301 	andne.w	r3, r3, #1
 800a8bc:	428a      	cmp	r2, r1
 800a8be:	bf0c      	ite	eq
 800a8c0:	2300      	moveq	r3, #0
 800a8c2:	f003 0301 	andne.w	r3, r3, #1
 800a8c6:	f5b2 5ffa 	cmp.w	r2, #8000	; 0x1f40
 800a8ca:	bf0c      	ite	eq
 800a8cc:	2300      	moveq	r3, #0
 800a8ce:	f003 0301 	andne.w	r3, r3, #1
 800a8d2:	b113      	cbz	r3, 800a8da <HAL_SAI_InitProtocol+0x1fa>
 800a8d4:	2a00      	cmp	r2, #0
 800a8d6:	f040 8333 	bne.w	800af40 <HAL_SAI_InitProtocol+0x860>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 800a8da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a8dc:	f033 0204 	bics.w	r2, r3, #4
 800a8e0:	d006      	beq.n	800a8f0 <HAL_SAI_InitProtocol+0x210>
 800a8e2:	2b08      	cmp	r3, #8
 800a8e4:	d004      	beq.n	800a8f0 <HAL_SAI_InitProtocol+0x210>
 800a8e6:	f240 1185 	movw	r1, #389	; 0x185
 800a8ea:	4877      	ldr	r0, [pc, #476]	; (800aac8 <HAL_SAI_InitProtocol+0x3e8>)
 800a8ec:	f009 f9a6 	bl	8013c3c <assert_failed>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 800a8f0:	6863      	ldr	r3, [r4, #4]
 800a8f2:	2b03      	cmp	r3, #3
 800a8f4:	f200 8166 	bhi.w	800abc4 <HAL_SAI_InitProtocol+0x4e4>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 800a8f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a8fa:	f023 0220 	bic.w	r2, r3, #32
 800a8fe:	2a80      	cmp	r2, #128	; 0x80
 800a900:	d004      	beq.n	800a90c <HAL_SAI_InitProtocol+0x22c>
 800a902:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a906:	2b40      	cmp	r3, #64	; 0x40
 800a908:	f040 82e7 	bne.w	800aeda <HAL_SAI_InitProtocol+0x7fa>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 800a90c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a90e:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800a912:	f040 8151 	bne.w	800abb8 <HAL_SAI_InitProtocol+0x4d8>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 800a916:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d904      	bls.n	800a926 <HAL_SAI_InitProtocol+0x246>
 800a91c:	f240 1189 	movw	r1, #393	; 0x189
 800a920:	4869      	ldr	r0, [pc, #420]	; (800aac8 <HAL_SAI_InitProtocol+0x3e8>)
 800a922:	f009 f98b 	bl	8013c3c <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 800a926:	68a3      	ldr	r3, [r4, #8]
 800a928:	2b05      	cmp	r3, #5
 800a92a:	f200 813f 	bhi.w	800abac <HAL_SAI_InitProtocol+0x4cc>
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a92e:	f7f6 f9a1 	bl	8000c74 <HAL_GetREVID>
 800a932:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800a936:	d304      	bcc.n	800a942 <HAL_SAI_InitProtocol+0x262>
    assert_param(IS_SAI_BLOCK_MCK_OUTPUT(hsai->Init.MckOutput));
 800a938:	6923      	ldr	r3, [r4, #16]
 800a93a:	f033 6300 	bics.w	r3, r3, #134217728	; 0x8000000
 800a93e:	f040 8294 	bne.w	800ae6a <HAL_SAI_InitProtocol+0x78a>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 800a942:	6963      	ldr	r3, [r4, #20]
 800a944:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800a948:	f040 812a 	bne.w	800aba0 <HAL_SAI_InitProtocol+0x4c0>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 800a94c:	69a3      	ldr	r3, [r4, #24]
 800a94e:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800a952:	f040 8167 	bne.w	800ac24 <HAL_SAI_InitProtocol+0x544>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 800a956:	69e3      	ldr	r3, [r4, #28]
 800a958:	2b04      	cmp	r3, #4
 800a95a:	f200 815d 	bhi.w	800ac18 <HAL_SAI_InitProtocol+0x538>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 800a95e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a960:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800a964:	f040 8152 	bne.w	800ac0c <HAL_SAI_InitProtocol+0x52c>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 800a968:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a96a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a96e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a972:	f5b1 4f20 	cmp.w	r1, #40960	; 0xa000
 800a976:	bf18      	it	ne
 800a978:	2a00      	cmpne	r2, #0
 800a97a:	d003      	beq.n	800a984 <HAL_SAI_InitProtocol+0x2a4>
 800a97c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a980:	f040 82a3 	bne.w	800aeca <HAL_SAI_InitProtocol+0x7ea>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 800a984:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a986:	f033 0310 	bics.w	r3, r3, #16
 800a98a:	f040 8139 	bne.w	800ac00 <HAL_SAI_InitProtocol+0x520>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 800a98e:	68e3      	ldr	r3, [r4, #12]
 800a990:	2b02      	cmp	r3, #2
 800a992:	f200 812f 	bhi.w	800abf4 <HAL_SAI_InitProtocol+0x514>
  assert_param(IS_SAI_BLOCK_MCK_OVERSAMPLING(hsai->Init.MckOverSampling));
 800a996:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a998:	f033 6380 	bics.w	r3, r3, #67108864	; 0x4000000
 800a99c:	f040 8124 	bne.w	800abe8 <HAL_SAI_InitProtocol+0x508>
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 800a9a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a9a2:	3b08      	subs	r3, #8
 800a9a4:	2bf8      	cmp	r3, #248	; 0xf8
 800a9a6:	f200 8119 	bhi.w	800abdc <HAL_SAI_InitProtocol+0x4fc>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 800a9aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	2b7f      	cmp	r3, #127	; 0x7f
 800a9b0:	f200 810e 	bhi.w	800abd0 <HAL_SAI_InitProtocol+0x4f0>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 800a9b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a9b6:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a9ba:	f040 80eb 	bne.w	800ab94 <HAL_SAI_InitProtocol+0x4b4>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 800a9be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a9c0:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800a9c4:	f040 80e0 	bne.w	800ab88 <HAL_SAI_InitProtocol+0x4a8>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 800a9c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9ca:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 800a9ce:	f040 80d5 	bne.w	800ab7c <HAL_SAI_InitProtocol+0x49c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 800a9d2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a9d4:	2b18      	cmp	r3, #24
 800a9d6:	f200 80cb 	bhi.w	800ab70 <HAL_SAI_InitProtocol+0x490>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 800a9da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a9dc:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800a9e0:	d006      	beq.n	800a9f0 <HAL_SAI_InitProtocol+0x310>
 800a9e2:	2b80      	cmp	r3, #128	; 0x80
 800a9e4:	d004      	beq.n	800a9f0 <HAL_SAI_InitProtocol+0x310>
 800a9e6:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800a9ea:	4837      	ldr	r0, [pc, #220]	; (800aac8 <HAL_SAI_InitProtocol+0x3e8>)
 800a9ec:	f009 f926 	bl	8013c3c <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 800a9f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	2b0f      	cmp	r3, #15
 800a9f6:	f200 80b5 	bhi.w	800ab64 <HAL_SAI_InitProtocol+0x484>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 800a9fa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a9fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa00:	f080 80aa 	bcs.w	800ab58 <HAL_SAI_InitProtocol+0x478>
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
 800aa04:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d906      	bls.n	800aa1a <HAL_SAI_InitProtocol+0x33a>
 800aa0c:	f240 11ab 	movw	r1, #427	; 0x1ab
 800aa10:	482d      	ldr	r0, [pc, #180]	; (800aac8 <HAL_SAI_InitProtocol+0x3e8>)
 800aa12:	f009 f913 	bl	8013c3c <assert_failed>
 800aa16:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	f43f ae70 	beq.w	800a700 <HAL_SAI_InitProtocol+0x20>
 800aa20:	6823      	ldr	r3, [r4, #0]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800aa22:	4a21      	ldr	r2, [pc, #132]	; (800aaa8 <HAL_SAI_InitProtocol+0x3c8>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d053      	beq.n	800aad0 <HAL_SAI_InitProtocol+0x3f0>
 800aa28:	3220      	adds	r2, #32
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d050      	beq.n	800aad0 <HAL_SAI_InitProtocol+0x3f0>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800aa2e:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800aa32:	4293      	cmp	r3, r2
 800aa34:	f000 8136 	beq.w	800aca4 <HAL_SAI_InitProtocol+0x5c4>
 800aa38:	3220      	adds	r2, #32
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	f000 8132 	beq.w	800aca4 <HAL_SAI_InitProtocol+0x5c4>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800aa40:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800aa44:	4293      	cmp	r3, r2
 800aa46:	f000 8246 	beq.w	800aed6 <HAL_SAI_InitProtocol+0x7f6>
 800aa4a:	3220      	adds	r2, #32
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	f000 8242 	beq.w	800aed6 <HAL_SAI_InitProtocol+0x7f6>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800aa52:	4a19      	ldr	r2, [pc, #100]	; (800aab8 <HAL_SAI_InitProtocol+0x3d8>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d003      	beq.n	800aa60 <HAL_SAI_InitProtocol+0x380>
 800aa58:	3220      	adds	r2, #32
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	f47f ae74 	bne.w	800a748 <HAL_SAI_InitProtocol+0x68>
    SaiBaseAddress = SAI4;
 800aa60:	4d1a      	ldr	r5, [pc, #104]	; (800aacc <HAL_SAI_InitProtocol+0x3ec>)
 800aa62:	e036      	b.n	800aad2 <HAL_SAI_InitProtocol+0x3f2>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa64:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800aa66:	0176      	lsls	r6, r6, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa68:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800aa6a:	6566      	str	r6, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa6c:	66e2      	str	r2, [r4, #108]	; 0x6c
 800aa6e:	e6cb      	b.n	800a808 <HAL_SAI_InitProtocol+0x128>
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800aa70:	0136      	lsls	r6, r6, #4
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa72:	2180      	movs	r1, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800aa74:	2240      	movs	r2, #64	; 0x40
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800aa76:	6566      	str	r6, [r4, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa78:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800aa7a:	66e2      	str	r2, [r4, #108]	; 0x6c
 800aa7c:	e6c4      	b.n	800a808 <HAL_SAI_InitProtocol+0x128>
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800aa7e:	0176      	lsls	r6, r6, #5
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800aa80:	21c0      	movs	r1, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa82:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800aa84:	6566      	str	r6, [r4, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800aa86:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa88:	66e2      	str	r2, [r4, #108]	; 0x6c
 800aa8a:	e6bd      	b.n	800a808 <HAL_SAI_InitProtocol+0x128>
 800aa8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aa90:	e9c4 5318 	strd	r5, r3, [r4, #96]	; 0x60
  switch (datasize)
 800aa94:	2f03      	cmp	r7, #3
 800aa96:	f63f ae57 	bhi.w	800a748 <HAL_SAI_InitProtocol+0x68>
 800aa9a:	e8df f017 	tbh	[pc, r7, lsl #1]
 800aa9e:	00f4      	.short	0x00f4
 800aaa0:	00d300e4 	.word	0x00d300e4
 800aaa4:	00c9      	.short	0x00c9
 800aaa6:	bf00      	nop
 800aaa8:	40015804 	.word	0x40015804
 800aaac:	40015824 	.word	0x40015824
 800aab0:	40015c04 	.word	0x40015c04
 800aab4:	40016004 	.word	0x40016004
 800aab8:	58005404 	.word	0x58005404
 800aabc:	58005424 	.word	0x58005424
 800aac0:	0002ee00 	.word	0x0002ee00
 800aac4:	00017700 	.word	0x00017700
 800aac8:	0802a500 	.word	0x0802a500
 800aacc:	58005400 	.word	0x58005400
    SaiBaseAddress = SAI1;
 800aad0:	4d75      	ldr	r5, [pc, #468]	; (800aca8 <HAL_SAI_InitProtocol+0x5c8>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800aad2:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
 800aad6:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800aada:	2a00      	cmp	r2, #0
 800aadc:	f000 81be 	beq.w	800ae5c <HAL_SAI_InitProtocol+0x77c>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800aae0:	4a72      	ldr	r2, [pc, #456]	; (800acac <HAL_SAI_InitProtocol+0x5cc>)
 800aae2:	4873      	ldr	r0, [pc, #460]	; (800acb0 <HAL_SAI_InitProtocol+0x5d0>)
 800aae4:	6812      	ldr	r2, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800aae6:	6819      	ldr	r1, [r3, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800aae8:	fba0 0202 	umull	r0, r2, r0, r2
  __HAL_SAI_DISABLE(hsai);
 800aaec:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800aaf0:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 800aaf2:	6019      	str	r1, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800aaf4:	0093      	lsls	r3, r2, #2
 800aaf6:	b33a      	cbz	r2, 800ab48 <HAL_SAI_InitProtocol+0x468>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800aaf8:	6821      	ldr	r1, [r4, #0]
    count--;
 800aafa:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800aafc:	680a      	ldr	r2, [r1, #0]
 800aafe:	03d7      	lsls	r7, r2, #15
 800ab00:	d504      	bpl.n	800ab0c <HAL_SAI_InitProtocol+0x42c>
    if (count == 0U)
 800ab02:	b30b      	cbz	r3, 800ab48 <HAL_SAI_InitProtocol+0x468>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ab04:	680a      	ldr	r2, [r1, #0]
    count--;
 800ab06:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ab08:	03d2      	lsls	r2, r2, #15
 800ab0a:	d4fa      	bmi.n	800ab02 <HAL_SAI_InitProtocol+0x422>
  switch (hsai->Init.SynchroExt)
 800ab0c:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 800ab0e:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 800ab10:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 800ab12:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800ab16:	f000 80c0 	beq.w	800ac9a <HAL_SAI_InitProtocol+0x5ba>
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	bf15      	itete	ne
 800ab1e:	4610      	movne	r0, r2
 800ab20:	2123      	moveq	r1, #35	; 0x23
 800ab22:	2103      	movne	r1, #3
 800ab24:	2022      	moveq	r0, #34	; 0x22
 800ab26:	bf0b      	itete	eq
 800ab28:	2621      	moveq	r6, #33	; 0x21
 800ab2a:	2601      	movne	r6, #1
 800ab2c:	2220      	moveq	r2, #32
 800ab2e:	2200      	movne	r2, #0
  switch (hsai->Init.Synchro)
 800ab30:	68a3      	ldr	r3, [r4, #8]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	2b04      	cmp	r3, #4
 800ab36:	f200 818b 	bhi.w	800ae50 <HAL_SAI_InitProtocol+0x770>
 800ab3a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ab3e:	0186      	.short	0x0186
 800ab40:	018b00c0 	.word	0x018b00c0
 800ab44:	01da00bf 	.word	0x01da00bf
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ab48:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 800ab4c:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ab4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab52:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800ab56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 800ab58:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800ab5c:	4855      	ldr	r0, [pc, #340]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800ab5e:	f009 f86d 	bl	8013c3c <assert_failed>
 800ab62:	e74f      	b.n	800aa04 <HAL_SAI_InitProtocol+0x324>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 800ab64:	f240 11a7 	movw	r1, #423	; 0x1a7
 800ab68:	4852      	ldr	r0, [pc, #328]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800ab6a:	f009 f867 	bl	8013c3c <assert_failed>
 800ab6e:	e744      	b.n	800a9fa <HAL_SAI_InitProtocol+0x31a>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 800ab70:	f240 11a5 	movw	r1, #421	; 0x1a5
 800ab74:	484f      	ldr	r0, [pc, #316]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800ab76:	f009 f861 	bl	8013c3c <assert_failed>
 800ab7a:	e72e      	b.n	800a9da <HAL_SAI_InitProtocol+0x2fa>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 800ab7c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800ab80:	484c      	ldr	r0, [pc, #304]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800ab82:	f009 f85b 	bl	8013c3c <assert_failed>
 800ab86:	e724      	b.n	800a9d2 <HAL_SAI_InitProtocol+0x2f2>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 800ab88:	f240 11a1 	movw	r1, #417	; 0x1a1
 800ab8c:	4849      	ldr	r0, [pc, #292]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800ab8e:	f009 f855 	bl	8013c3c <assert_failed>
 800ab92:	e719      	b.n	800a9c8 <HAL_SAI_InitProtocol+0x2e8>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 800ab94:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800ab98:	4846      	ldr	r0, [pc, #280]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800ab9a:	f009 f84f 	bl	8013c3c <assert_failed>
 800ab9e:	e70e      	b.n	800a9be <HAL_SAI_InitProtocol+0x2de>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 800aba0:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800aba4:	4843      	ldr	r0, [pc, #268]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800aba6:	f009 f849 	bl	8013c3c <assert_failed>
 800abaa:	e6cf      	b.n	800a94c <HAL_SAI_InitProtocol+0x26c>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 800abac:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800abb0:	4840      	ldr	r0, [pc, #256]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800abb2:	f009 f843 	bl	8013c3c <assert_failed>
 800abb6:	e6ba      	b.n	800a92e <HAL_SAI_InitProtocol+0x24e>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 800abb8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800abbc:	483d      	ldr	r0, [pc, #244]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800abbe:	f009 f83d 	bl	8013c3c <assert_failed>
 800abc2:	e6a8      	b.n	800a916 <HAL_SAI_InitProtocol+0x236>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 800abc4:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800abc8:	483a      	ldr	r0, [pc, #232]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800abca:	f009 f837 	bl	8013c3c <assert_failed>
 800abce:	e693      	b.n	800a8f8 <HAL_SAI_InitProtocol+0x218>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 800abd0:	f240 119f 	movw	r1, #415	; 0x19f
 800abd4:	4837      	ldr	r0, [pc, #220]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800abd6:	f009 f831 	bl	8013c3c <assert_failed>
 800abda:	e6eb      	b.n	800a9b4 <HAL_SAI_InitProtocol+0x2d4>
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 800abdc:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800abe0:	4834      	ldr	r0, [pc, #208]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800abe2:	f009 f82b 	bl	8013c3c <assert_failed>
 800abe6:	e6e0      	b.n	800a9aa <HAL_SAI_InitProtocol+0x2ca>
  assert_param(IS_SAI_BLOCK_MCK_OVERSAMPLING(hsai->Init.MckOverSampling));
 800abe8:	f240 119b 	movw	r1, #411	; 0x19b
 800abec:	4831      	ldr	r0, [pc, #196]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800abee:	f009 f825 	bl	8013c3c <assert_failed>
 800abf2:	e6d5      	b.n	800a9a0 <HAL_SAI_InitProtocol+0x2c0>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 800abf4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800abf8:	482e      	ldr	r0, [pc, #184]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800abfa:	f009 f81f 	bl	8013c3c <assert_failed>
 800abfe:	e6ca      	b.n	800a996 <HAL_SAI_InitProtocol+0x2b6>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 800ac00:	f240 1199 	movw	r1, #409	; 0x199
 800ac04:	482b      	ldr	r0, [pc, #172]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800ac06:	f009 f819 	bl	8013c3c <assert_failed>
 800ac0a:	e6c0      	b.n	800a98e <HAL_SAI_InitProtocol+0x2ae>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 800ac0c:	f240 1197 	movw	r1, #407	; 0x197
 800ac10:	4828      	ldr	r0, [pc, #160]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800ac12:	f009 f813 	bl	8013c3c <assert_failed>
 800ac16:	e6a7      	b.n	800a968 <HAL_SAI_InitProtocol+0x288>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 800ac18:	f44f 71cb 	mov.w	r1, #406	; 0x196
 800ac1c:	4825      	ldr	r0, [pc, #148]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800ac1e:	f009 f80d 	bl	8013c3c <assert_failed>
 800ac22:	e69c      	b.n	800a95e <HAL_SAI_InitProtocol+0x27e>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 800ac24:	f240 1195 	movw	r1, #405	; 0x195
 800ac28:	4822      	ldr	r0, [pc, #136]	; (800acb4 <HAL_SAI_InitProtocol+0x5d4>)
 800ac2a:	f009 f807 	bl	8013c3c <assert_failed>
 800ac2e:	e692      	b.n	800a956 <HAL_SAI_InitProtocol+0x276>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ac30:	0876      	lsrs	r6, r6, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ac32:	21e0      	movs	r1, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ac34:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ac36:	01b3      	lsls	r3, r6, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ac38:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ac3a:	0176      	lsls	r6, r6, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ac3c:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ac3e:	e9c4 3615 	strd	r3, r6, [r4, #84]	; 0x54
 800ac42:	e5e1      	b.n	800a808 <HAL_SAI_InitProtocol+0x128>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ac44:	0876      	lsrs	r6, r6, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ac46:	21c0      	movs	r1, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ac48:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ac4a:	2d02      	cmp	r5, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ac4c:	ea4f 1386 	mov.w	r3, r6, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ac50:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ac52:	ea4f 1646 	mov.w	r6, r6, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ac56:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ac58:	e9c4 3615 	strd	r3, r6, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ac5c:	f47f add4 	bne.w	800a808 <HAL_SAI_InitProtocol+0x128>
      hsai->SlotInit.FirstBitOffset = 8;
 800ac60:	2308      	movs	r3, #8
 800ac62:	66a3      	str	r3, [r4, #104]	; 0x68
 800ac64:	e5d0      	b.n	800a808 <HAL_SAI_InitProtocol+0x128>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ac66:	0876      	lsrs	r6, r6, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ac68:	2380      	movs	r3, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ac6a:	2d02      	cmp	r5, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ac6c:	ea4f 1286 	mov.w	r2, r6, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ac70:	64a3      	str	r3, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ac72:	ea4f 1646 	mov.w	r6, r6, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ac76:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ac78:	e9c4 2615 	strd	r2, r6, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ac7c:	f47f adc4 	bne.w	800a808 <HAL_SAI_InitProtocol+0x128>
      hsai->SlotInit.FirstBitOffset = 16;
 800ac80:	2310      	movs	r3, #16
 800ac82:	66a3      	str	r3, [r4, #104]	; 0x68
 800ac84:	e5c0      	b.n	800a808 <HAL_SAI_InitProtocol+0x128>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800ac86:	0876      	lsrs	r6, r6, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ac88:	2180      	movs	r1, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ac8a:	2240      	movs	r2, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800ac8c:	0173      	lsls	r3, r6, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ac8e:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800ac90:	0136      	lsls	r6, r6, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ac92:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800ac94:	e9c4 3615 	strd	r3, r6, [r4, #84]	; 0x54
 800ac98:	e5b6      	b.n	800a808 <HAL_SAI_InitProtocol+0x128>
  switch (hsai->Init.SynchroExt)
 800ac9a:	2113      	movs	r1, #19
 800ac9c:	2012      	movs	r0, #18
 800ac9e:	2611      	movs	r6, #17
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800aca0:	2210      	movs	r2, #16
 800aca2:	e745      	b.n	800ab30 <HAL_SAI_InitProtocol+0x450>
    SaiBaseAddress = SAI2;
 800aca4:	4d04      	ldr	r5, [pc, #16]	; (800acb8 <HAL_SAI_InitProtocol+0x5d8>)
 800aca6:	e714      	b.n	800aad2 <HAL_SAI_InitProtocol+0x3f2>
 800aca8:	40015800 	.word	0x40015800
 800acac:	200002b0 	.word	0x200002b0
 800acb0:	95cbec1b 	.word	0x95cbec1b
 800acb4:	0802a500 	.word	0x0802a500
 800acb8:	40015c00 	.word	0x40015c00
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800acbc:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800acbe:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 800acc2:	602a      	str	r2, [r5, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800acc4:	6a23      	ldr	r3, [r4, #32]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d045      	beq.n	800ad56 <HAL_SAI_InitProtocol+0x676>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	4a9f      	ldr	r2, [pc, #636]	; (800af4c <HAL_SAI_InitProtocol+0x86c>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	f000 811f 	beq.w	800af12 <HAL_SAI_InitProtocol+0x832>
 800acd4:	489e      	ldr	r0, [pc, #632]	; (800af50 <HAL_SAI_InitProtocol+0x870>)
 800acd6:	1a18      	subs	r0, r3, r0
 800acd8:	fab0 f080 	clz	r0, r0
 800acdc:	0940      	lsrs	r0, r0, #5
 800acde:	2800      	cmp	r0, #0
 800ace0:	f040 8117 	bne.w	800af12 <HAL_SAI_InitProtocol+0x832>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ace4:	4a9b      	ldr	r2, [pc, #620]	; (800af54 <HAL_SAI_InitProtocol+0x874>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	f000 810d 	beq.w	800af06 <HAL_SAI_InitProtocol+0x826>
 800acec:	3220      	adds	r2, #32
 800acee:	4293      	cmp	r3, r2
 800acf0:	f000 8109 	beq.w	800af06 <HAL_SAI_InitProtocol+0x826>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800acf4:	4a98      	ldr	r2, [pc, #608]	; (800af58 <HAL_SAI_InitProtocol+0x878>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	f000 80ff 	beq.w	800aefa <HAL_SAI_InitProtocol+0x81a>
 800acfc:	3220      	adds	r2, #32
 800acfe:	4293      	cmp	r3, r2
 800ad00:	f000 80fb 	beq.w	800aefa <HAL_SAI_InitProtocol+0x81a>
    if (hsai->Instance == SAI4_Block_A)
 800ad04:	4a95      	ldr	r2, [pc, #596]	; (800af5c <HAL_SAI_InitProtocol+0x87c>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	f000 8114 	beq.w	800af34 <HAL_SAI_InitProtocol+0x854>
    if (hsai->Instance == SAI4_Block_B)
 800ad0c:	4a94      	ldr	r2, [pc, #592]	; (800af60 <HAL_SAI_InitProtocol+0x880>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	f000 810b 	beq.w	800af2a <HAL_SAI_InitProtocol+0x84a>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800ad14:	69a2      	ldr	r2, [r4, #24]
 800ad16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ad1a:	6a23      	ldr	r3, [r4, #32]
 800ad1c:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800ad20:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800ad24:	f000 80df 	beq.w	800aee6 <HAL_SAI_InitProtocol+0x806>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ad28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ad2a:	021b      	lsls	r3, r3, #8
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ad2c:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800ad30:	bf14      	ite	ne
 800ad32:	2201      	movne	r2, #1
 800ad34:	2202      	moveq	r2, #2
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ad36:	fb02 f303 	mul.w	r3, r2, r3
 800ad3a:	fbb0 f3f3 	udiv	r3, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 800ad3e:	4a89      	ldr	r2, [pc, #548]	; (800af64 <HAL_SAI_InitProtocol+0x884>)
 800ad40:	fba2 1203 	umull	r1, r2, r2, r3
 800ad44:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 800ad46:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800ad4a:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800ad4e:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 800ad50:	bf08      	it	eq
 800ad52:	3201      	addeq	r2, #1
 800ad54:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ad56:	6863      	ldr	r3, [r4, #4]
 800ad58:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ad5a:	f033 0702 	bics.w	r7, r3, #2
 800ad5e:	f040 80ae 	bne.w	800aebe <HAL_SAI_InitProtocol+0x7de>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ad62:	2a01      	cmp	r2, #1
 800ad64:	bf18      	it	ne
 800ad66:	f44f 7700 	movne.w	r7, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800ad6a:	f7f5 ff83 	bl	8000c74 <HAL_GetREVID>
 800ad6e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ad72:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800ad74:	f0c0 8092 	bcc.w	800ae9c <HAL_SAI_InitProtocol+0x7bc>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ad78:	6811      	ldr	r1, [r2, #0]
 800ad7a:	4b7b      	ldr	r3, [pc, #492]	; (800af68 <HAL_SAI_InitProtocol+0x888>)
 800ad7c:	400b      	ands	r3, r1
 800ad7e:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad80:	6863      	ldr	r3, [r4, #4]
 800ad82:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800ad84:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
 800ad88:	430b      	orrs	r3, r1
 800ad8a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	6962      	ldr	r2, [r4, #20]
 800ad90:	4303      	orrs	r3, r0
 800ad92:	69a0      	ldr	r0, [r4, #24]
 800ad94:	430b      	orrs	r3, r1
 800ad96:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	6922      	ldr	r2, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad9c:	4303      	orrs	r3, r0
 800ad9e:	6820      	ldr	r0, [r4, #0]
 800ada0:	430b      	orrs	r3, r1
 800ada2:	6801      	ldr	r1, [r0, #0]
 800ada4:	4313      	orrs	r3, r2
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ada6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ada8:	430b      	orrs	r3, r1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800adaa:	f24f 0120 	movw	r1, #61472	; 0xf020
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800adae:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800adb2:	4333      	orrs	r3, r6
 800adb4:	433b      	orrs	r3, r7
 800adb6:	6003      	str	r3, [r0, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800adb8:	6826      	ldr	r6, [r4, #0]
 800adba:	4b6c      	ldr	r3, [pc, #432]	; (800af6c <HAL_SAI_InitProtocol+0x88c>)
 800adbc:	6872      	ldr	r2, [r6, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800adbe:	486c      	ldr	r0, [pc, #432]	; (800af70 <HAL_SAI_InitProtocol+0x890>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800adc0:	4013      	ands	r3, r2
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800adc2:	4a62      	ldr	r2, [pc, #392]	; (800af4c <HAL_SAI_InitProtocol+0x86c>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800adc4:	6073      	str	r3, [r6, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800adc6:	69e3      	ldr	r3, [r4, #28]
 800adc8:	e9d4 760c 	ldrd	r7, r6, [r4, #48]	; 0x30
 800adcc:	433b      	orrs	r3, r7
 800adce:	6827      	ldr	r7, [r4, #0]
 800add0:	4333      	orrs	r3, r6
 800add2:	687e      	ldr	r6, [r7, #4]
 800add4:	4333      	orrs	r3, r6
 800add6:	607b      	str	r3, [r7, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800add8:	6823      	ldr	r3, [r4, #0]
 800adda:	689e      	ldr	r6, [r3, #8]
 800addc:	4030      	ands	r0, r6
 800adde:	6098      	str	r0, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ade0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ade2:	6827      	ldr	r7, [r4, #0]
 800ade4:	e9d4 6017 	ldrd	r6, r0, [r4, #92]	; 0x5c
 800ade8:	4333      	orrs	r3, r6
 800adea:	6d66      	ldr	r6, [r4, #84]	; 0x54
 800adec:	4303      	orrs	r3, r0
 800adee:	68b8      	ldr	r0, [r7, #8]
 800adf0:	3e01      	subs	r6, #1
 800adf2:	4303      	orrs	r3, r0
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800adf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800adf6:	4333      	orrs	r3, r6
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800adf8:	3801      	subs	r0, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800adfa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800adfe:	60bb      	str	r3, [r7, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ae00:	6820      	ldr	r0, [r4, #0]
 800ae02:	68c3      	ldr	r3, [r0, #12]
 800ae04:	400b      	ands	r3, r1
 800ae06:	60c3      	str	r3, [r0, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ae08:	6820      	ldr	r0, [r4, #0]
 800ae0a:	e9d4 361a 	ldrd	r3, r6, [r4, #104]	; 0x68
 800ae0e:	68c1      	ldr	r1, [r0, #12]
 800ae10:	4333      	orrs	r3, r6
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ae12:	6f66      	ldr	r6, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ae14:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ae16:	6f21      	ldr	r1, [r4, #112]	; 0x70
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ae18:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ae1c:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ae1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ae22:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d025      	beq.n	800ae76 <HAL_SAI_InitProtocol+0x796>
 800ae2a:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800ae2e:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d01f      	beq.n	800ae76 <HAL_SAI_InitProtocol+0x796>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ae36:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 800ae38:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ae3a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 800ae3e:	4618      	mov	r0, r3
  __HAL_UNLOCK(hsai);
 800ae40:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 800ae44:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
}
 800ae48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ae4a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800ae4e:	e738      	b.n	800acc2 <HAL_SAI_InitProtocol+0x5e2>
      syncen_bits = 0;
 800ae50:	2600      	movs	r6, #0
 800ae52:	e736      	b.n	800acc2 <HAL_SAI_InitProtocol+0x5e2>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ae54:	4632      	mov	r2, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ae56:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800ae5a:	e732      	b.n	800acc2 <HAL_SAI_InitProtocol+0x5e2>
    hsai->Lock = HAL_UNLOCKED;
 800ae5c:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800ae60:	4620      	mov	r0, r4
 800ae62:	f009 fc53 	bl	801470c <HAL_SAI_MspInit>
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	e63a      	b.n	800aae0 <HAL_SAI_InitProtocol+0x400>
    assert_param(IS_SAI_BLOCK_MCK_OUTPUT(hsai->Init.MckOutput));
 800ae6a:	f240 118f 	movw	r1, #399	; 0x18f
 800ae6e:	4841      	ldr	r0, [pc, #260]	; (800af74 <HAL_SAI_InitProtocol+0x894>)
 800ae70:	f008 fee4 	bl	8013c3c <assert_failed>
 800ae74:	e565      	b.n	800a942 <HAL_SAI_InitProtocol+0x262>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ae76:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ae78:	f023 0301 	bic.w	r3, r3, #1
 800ae7c:	646b      	str	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ae7e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d1d7      	bne.n	800ae36 <HAL_SAI_InitProtocol+0x756>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ae86:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ae8a:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ae8c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800ae90:	646b      	str	r3, [r5, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800ae92:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ae94:	f043 0301 	orr.w	r3, r3, #1
 800ae98:	646b      	str	r3, [r5, #68]	; 0x44
 800ae9a:	e7cc      	b.n	800ae36 <HAL_SAI_InitProtocol+0x756>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ae9c:	6811      	ldr	r1, [r2, #0]
 800ae9e:	4b36      	ldr	r3, [pc, #216]	; (800af78 <HAL_SAI_InitProtocol+0x898>)
 800aea0:	400b      	ands	r3, r1
 800aea2:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800aea4:	6863      	ldr	r3, [r4, #4]
 800aea6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800aea8:	e9d4 2011 	ldrd	r2, r0, [r4, #68]	; 0x44
 800aeac:	4313      	orrs	r3, r2
 800aeae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800aeb0:	4303      	orrs	r3, r0
 800aeb2:	6960      	ldr	r0, [r4, #20]
 800aeb4:	430b      	orrs	r3, r1
 800aeb6:	69a1      	ldr	r1, [r4, #24]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800aebc:	e76e      	b.n	800ad9c <HAL_SAI_InitProtocol+0x6bc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800aebe:	2a01      	cmp	r2, #1
 800aec0:	bf14      	ite	ne
 800aec2:	2700      	movne	r7, #0
 800aec4:	f44f 7700 	moveq.w	r7, #512	; 0x200
 800aec8:	e74f      	b.n	800ad6a <HAL_SAI_InitProtocol+0x68a>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 800aeca:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800aece:	4829      	ldr	r0, [pc, #164]	; (800af74 <HAL_SAI_InitProtocol+0x894>)
 800aed0:	f008 feb4 	bl	8013c3c <assert_failed>
 800aed4:	e556      	b.n	800a984 <HAL_SAI_InitProtocol+0x2a4>
    SaiBaseAddress = SAI3;
 800aed6:	4d29      	ldr	r5, [pc, #164]	; (800af7c <HAL_SAI_InitProtocol+0x89c>)
 800aed8:	e5fb      	b.n	800aad2 <HAL_SAI_InitProtocol+0x3f2>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 800aeda:	f240 1187 	movw	r1, #391	; 0x187
 800aede:	4825      	ldr	r0, [pc, #148]	; (800af74 <HAL_SAI_InitProtocol+0x894>)
 800aee0:	f008 feac 	bl	8013c3c <assert_failed>
 800aee4:	e512      	b.n	800a90c <HAL_SAI_InitProtocol+0x22c>
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 800aee6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800aee8:	fb02 f303 	mul.w	r3, r2, r3
 800aeec:	fbb0 f3f3 	udiv	r3, r0, r3
 800aef0:	e725      	b.n	800ad3e <HAL_SAI_InitProtocol+0x65e>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800aef2:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aef4:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800aef8:	e6e3      	b.n	800acc2 <HAL_SAI_InitProtocol+0x5e2>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800aefa:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aefe:	f7ff fa59 	bl	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	e6fe      	b.n	800ad04 <HAL_SAI_InitProtocol+0x624>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800af06:	f44f 7000 	mov.w	r0, #512	; 0x200
 800af0a:	f7ff fa53 	bl	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	e6f0      	b.n	800acf4 <HAL_SAI_InitProtocol+0x614>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800af12:	f44f 7080 	mov.w	r0, #256	; 0x100
 800af16:	f7ff fa4d 	bl	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	e6e2      	b.n	800ace4 <HAL_SAI_InitProtocol+0x604>
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 800af1e:	f240 1181 	movw	r1, #385	; 0x181
 800af22:	4814      	ldr	r0, [pc, #80]	; (800af74 <HAL_SAI_InitProtocol+0x894>)
 800af24:	f008 fe8a 	bl	8013c3c <assert_failed>
 800af28:	e49c      	b.n	800a864 <HAL_SAI_InitProtocol+0x184>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800af2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800af2e:	f7ff fa41 	bl	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800af32:	e6ef      	b.n	800ad14 <HAL_SAI_InitProtocol+0x634>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800af34:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800af38:	f7ff fa3c 	bl	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	e6e5      	b.n	800ad0c <HAL_SAI_InitProtocol+0x62c>
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 800af40:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800af44:	480b      	ldr	r0, [pc, #44]	; (800af74 <HAL_SAI_InitProtocol+0x894>)
 800af46:	f008 fe79 	bl	8013c3c <assert_failed>
 800af4a:	e4c6      	b.n	800a8da <HAL_SAI_InitProtocol+0x1fa>
 800af4c:	40015804 	.word	0x40015804
 800af50:	40015824 	.word	0x40015824
 800af54:	40015c04 	.word	0x40015c04
 800af58:	40016004 	.word	0x40016004
 800af5c:	58005404 	.word	0x58005404
 800af60:	58005424 	.word	0x58005424
 800af64:	cccccccd 	.word	0xcccccccd
 800af68:	f005c010 	.word	0xf005c010
 800af6c:	ffff1ff0 	.word	0xffff1ff0
 800af70:	fff88000 	.word	0xfff88000
 800af74:	0802a500 	.word	0x0802a500
 800af78:	f805c010 	.word	0xf805c010
 800af7c:	40016000 	.word	0x40016000

0800af80 <HAL_SAI_Abort>:
{
 800af80:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hsai);
 800af82:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 800af86:	2b01      	cmp	r3, #1
 800af88:	d047      	beq.n	800b01a <HAL_SAI_Abort+0x9a>
 800af8a:	2601      	movs	r6, #1
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800af8c:	6803      	ldr	r3, [r0, #0]
 800af8e:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 800af90:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800af94:	681d      	ldr	r5, [r3, #0]
 800af96:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
 800af9a:	d00d      	beq.n	800afb8 <HAL_SAI_Abort+0x38>
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800afa2:	601a      	str	r2, [r3, #0]
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800afa4:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 800afa8:	2b12      	cmp	r3, #18
 800afaa:	d04f      	beq.n	800b04c <HAL_SAI_Abort+0xcc>
  HAL_StatusTypeDef status = HAL_OK;
 800afac:	2500      	movs	r5, #0
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800afae:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800afb2:	2b22      	cmp	r3, #34	; 0x22
 800afb4:	d034      	beq.n	800b020 <HAL_SAI_Abort+0xa0>
 800afb6:	6823      	ldr	r3, [r4, #0]
  hsai->Instance->IMR = 0;
 800afb8:	2000      	movs	r0, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800afba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800afbe:	4a2e      	ldr	r2, [pc, #184]	; (800b078 <HAL_SAI_Abort+0xf8>)
  hsai->Instance->IMR = 0;
 800afc0:	6118      	str	r0, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800afc2:	6823      	ldr	r3, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800afc4:	6812      	ldr	r2, [r2, #0]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800afc6:	6199      	str	r1, [r3, #24]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800afc8:	482c      	ldr	r0, [pc, #176]	; (800b07c <HAL_SAI_Abort+0xfc>)
  __HAL_SAI_DISABLE(hsai);
 800afca:	6821      	ldr	r1, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800afcc:	fba0 0202 	umull	r0, r2, r0, r2
  __HAL_SAI_DISABLE(hsai);
 800afd0:	680b      	ldr	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800afd2:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 800afd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afd8:	600b      	str	r3, [r1, #0]
    if (count == 0U)
 800afda:	0093      	lsls	r3, r2, #2
 800afdc:	6821      	ldr	r1, [r4, #0]
 800afde:	b1a2      	cbz	r2, 800b00a <HAL_SAI_Abort+0x8a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800afe0:	680a      	ldr	r2, [r1, #0]
    count--;
 800afe2:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800afe4:	03d0      	lsls	r0, r2, #15
 800afe6:	d504      	bpl.n	800aff2 <HAL_SAI_Abort+0x72>
    if (count == 0U)
 800afe8:	b17b      	cbz	r3, 800b00a <HAL_SAI_Abort+0x8a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800afea:	680a      	ldr	r2, [r1, #0]
    count--;
 800afec:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800afee:	03d2      	lsls	r2, r2, #15
 800aff0:	d4fa      	bmi.n	800afe8 <HAL_SAI_Abort+0x68>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800aff2:	684b      	ldr	r3, [r1, #4]
  hsai->State = HAL_SAI_STATE_READY;
 800aff4:	2001      	movs	r0, #1
  __HAL_UNLOCK(hsai);
 800aff6:	2200      	movs	r2, #0
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800aff8:	f043 0308 	orr.w	r3, r3, #8
 800affc:	604b      	str	r3, [r1, #4]
  hsai->State = HAL_SAI_STATE_READY;
 800affe:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
}
 800b002:	4628      	mov	r0, r5
  __HAL_UNLOCK(hsai);
 800b004:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
}
 800b008:	bd70      	pop	{r4, r5, r6, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b00a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    status = HAL_ERROR;
 800b00e:	2501      	movs	r5, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b014:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800b018:	e7eb      	b.n	800aff2 <HAL_SAI_Abort+0x72>
  __HAL_LOCK(hsai);
 800b01a:	2502      	movs	r5, #2
}
 800b01c:	4628      	mov	r0, r5
 800b01e:	bd70      	pop	{r4, r5, r6, pc}
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800b020:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800b024:	2800      	cmp	r0, #0
 800b026:	d0c6      	beq.n	800afb6 <HAL_SAI_Abort+0x36>
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800b028:	f7f8 fdd2 	bl	8003bd0 <HAL_DMA_Abort>
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d0c2      	beq.n	800afb6 <HAL_SAI_Abort+0x36>
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800b030:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b036:	2b80      	cmp	r3, #128	; 0x80
 800b038:	d0bd      	beq.n	800afb6 <HAL_SAI_Abort+0x36>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b03a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
          status = HAL_ERROR;
 800b03e:	2501      	movs	r5, #1
 800b040:	6823      	ldr	r3, [r4, #0]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b042:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b046:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 800b04a:	e7b5      	b.n	800afb8 <HAL_SAI_Abort+0x38>
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800b04c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800b050:	2800      	cmp	r0, #0
 800b052:	d0ab      	beq.n	800afac <HAL_SAI_Abort+0x2c>
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800b054:	f7f8 fdbc 	bl	8003bd0 <HAL_DMA_Abort>
 800b058:	2800      	cmp	r0, #0
 800b05a:	d0a7      	beq.n	800afac <HAL_SAI_Abort+0x2c>
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800b05c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b062:	2b80      	cmp	r3, #128	; 0x80
 800b064:	d0a2      	beq.n	800afac <HAL_SAI_Abort+0x2c>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b066:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
 800b06a:	4635      	mov	r5, r6
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b06c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b070:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800b074:	e79b      	b.n	800afae <HAL_SAI_Abort+0x2e>
 800b076:	bf00      	nop
 800b078:	200002b0 	.word	0x200002b0
 800b07c:	95cbec1b 	.word	0x95cbec1b

0800b080 <HAL_SAI_Transmit_DMA>:
{
 800b080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b084:	460f      	mov	r7, r1
 800b086:	4604      	mov	r4, r0
 800b088:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800b08a:	f7f5 fddb 	bl	8000c44 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 800b08e:	2f00      	cmp	r7, #0
 800b090:	d064      	beq.n	800b15c <HAL_SAI_Transmit_DMA+0xdc>
 800b092:	fab8 f588 	clz	r5, r8
 800b096:	096d      	lsrs	r5, r5, #5
 800b098:	2d00      	cmp	r5, #0
 800b09a:	d15f      	bne.n	800b15c <HAL_SAI_Transmit_DMA+0xdc>
  if (hsai->State == HAL_SAI_STATE_READY)
 800b09c:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 800b0a0:	b2f6      	uxtb	r6, r6
 800b0a2:	2e01      	cmp	r6, #1
 800b0a4:	d156      	bne.n	800b154 <HAL_SAI_Transmit_DMA+0xd4>
    __HAL_LOCK(hsai);
 800b0a6:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d052      	beq.n	800b154 <HAL_SAI_Transmit_DMA+0xd4>
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800b0ae:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800b0b2:	2112      	movs	r1, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800b0b4:	4a37      	ldr	r2, [pc, #220]	; (800b194 <HAL_SAI_Transmit_DMA+0x114>)
 800b0b6:	4681      	mov	r9, r0
    hsai->pBuffPtr = pData;
 800b0b8:	67a7      	str	r7, [r4, #120]	; 0x78
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b0ba:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferSize = Size;
 800b0be:	f8a4 807c 	strh.w	r8, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800b0c2:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    __HAL_LOCK(hsai);
 800b0c6:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->XferCount = Size;
 800b0ca:	f8a4 807e 	strh.w	r8, [r4, #126]	; 0x7e
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800b0ce:	4932      	ldr	r1, [pc, #200]	; (800b198 <HAL_SAI_Transmit_DMA+0x118>)
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800b0d0:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800b0d2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800b0d6:	4a31      	ldr	r2, [pc, #196]	; (800b19c <HAL_SAI_Transmit_DMA+0x11c>)
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800b0d8:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800b0da:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b0de:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800b0e0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b0e4:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800b0e6:	6822      	ldr	r2, [r4, #0]
 800b0e8:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800b0ec:	321c      	adds	r2, #28
 800b0ee:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800b0f0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800b0f4:	f7f8 fa92 	bl	800361c <HAL_DMA_Start_IT>
 800b0f8:	4607      	mov	r7, r0
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	d132      	bne.n	800b164 <HAL_SAI_Transmit_DMA+0xe4>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b0fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b100:	6863      	ldr	r3, [r4, #4]
 800b102:	2a08      	cmp	r2, #8
 800b104:	d03c      	beq.n	800b180 <HAL_SAI_Transmit_DMA+0x100>
 800b106:	2005      	movs	r0, #5
 800b108:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b10a:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b10c:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 800b10e:	2b01      	cmp	r3, #1
 800b110:	bf88      	it	hi
 800b112:	4602      	movhi	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b114:	690b      	ldr	r3, [r1, #16]
 800b116:	4313      	orrs	r3, r2
 800b118:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b11a:	6822      	ldr	r2, [r4, #0]
 800b11c:	6813      	ldr	r3, [r2, #0]
 800b11e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b122:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b124:	e006      	b.n	800b134 <HAL_SAI_Transmit_DMA+0xb4>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800b126:	f7f5 fd8d 	bl	8000c44 <HAL_GetTick>
 800b12a:	eba0 0009 	sub.w	r0, r0, r9
 800b12e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b132:	d81b      	bhi.n	800b16c <HAL_SAI_Transmit_DMA+0xec>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b134:	6822      	ldr	r2, [r4, #0]
 800b136:	6955      	ldr	r5, [r2, #20]
 800b138:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 800b13c:	d0f3      	beq.n	800b126 <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b13e:	6813      	ldr	r3, [r2, #0]
 800b140:	03db      	lsls	r3, r3, #15
 800b142:	d403      	bmi.n	800b14c <HAL_SAI_Transmit_DMA+0xcc>
      __HAL_SAI_ENABLE(hsai);
 800b144:	6813      	ldr	r3, [r2, #0]
 800b146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b14a:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 800b14c:	2300      	movs	r3, #0
 800b14e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 800b152:	e000      	b.n	800b156 <HAL_SAI_Transmit_DMA+0xd6>
    return HAL_BUSY;
 800b154:	2702      	movs	r7, #2
}
 800b156:	4638      	mov	r0, r7
 800b158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 800b15c:	2701      	movs	r7, #1
}
 800b15e:	4638      	mov	r0, r7
 800b160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_UNLOCK(hsai);
 800b164:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 800b168:	4637      	mov	r7, r6
 800b16a:	e7f4      	b.n	800b156 <HAL_SAI_Transmit_DMA+0xd6>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b16c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 800b170:	2703      	movs	r7, #3
        __HAL_UNLOCK(hsai);
 800b172:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b17a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 800b17e:	e7ea      	b.n	800b156 <HAL_SAI_Transmit_DMA+0xd6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b180:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b184:	2a01      	cmp	r2, #1
 800b186:	bf0b      	itete	eq
 800b188:	2015      	moveq	r0, #21
 800b18a:	2005      	movne	r0, #5
 800b18c:	2271      	moveq	r2, #113	; 0x71
 800b18e:	2261      	movne	r2, #97	; 0x61
 800b190:	e7bb      	b.n	800b10a <HAL_SAI_Transmit_DMA+0x8a>
 800b192:	bf00      	nop
 800b194:	0800b2e5 	.word	0x0800b2e5
 800b198:	0800b281 	.word	0x0800b281
 800b19c:	0800b361 	.word	0x0800b361

0800b1a0 <HAL_SAI_Receive_DMA>:
  if ((pData == NULL) || (Size == 0U))
 800b1a0:	2900      	cmp	r1, #0
 800b1a2:	d057      	beq.n	800b254 <HAL_SAI_Receive_DMA+0xb4>
{
 800b1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0U))
 800b1a6:	fab2 f582 	clz	r5, r2
 800b1aa:	096d      	lsrs	r5, r5, #5
 800b1ac:	2d00      	cmp	r5, #0
 800b1ae:	d14f      	bne.n	800b250 <HAL_SAI_Receive_DMA+0xb0>
  if (hsai->State == HAL_SAI_STATE_READY)
 800b1b0:	f890 6091 	ldrb.w	r6, [r0, #145]	; 0x91
 800b1b4:	b2f6      	uxtb	r6, r6
 800b1b6:	2e01      	cmp	r6, #1
 800b1b8:	d148      	bne.n	800b24c <HAL_SAI_Receive_DMA+0xac>
    __HAL_LOCK(hsai);
 800b1ba:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d044      	beq.n	800b24c <HAL_SAI_Receive_DMA+0xac>
 800b1c2:	4604      	mov	r4, r0
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800b1c4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800b1c8:	2722      	movs	r7, #34	; 0x22
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800b1ca:	482a      	ldr	r0, [pc, #168]	; (800b274 <HAL_SAI_Receive_DMA+0xd4>)
    hsai->pBuffPtr = pData;
 800b1cc:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 800b1ce:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b1d2:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferCount = Size;
 800b1d6:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
    __HAL_LOCK(hsai);
 800b1da:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800b1de:	f884 7091 	strb.w	r7, [r4, #145]	; 0x91
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800b1e2:	4925      	ldr	r1, [pc, #148]	; (800b278 <HAL_SAI_Receive_DMA+0xd8>)
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800b1e4:	6418      	str	r0, [r3, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800b1e6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800b1ea:	4a24      	ldr	r2, [pc, #144]	; (800b27c <HAL_SAI_Receive_DMA+0xdc>)
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800b1ec:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800b1ee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b1f2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 800b1f4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b1f8:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800b1fa:	6821      	ldr	r1, [r4, #0]
 800b1fc:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800b200:	311c      	adds	r1, #28
 800b202:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b204:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800b208:	f7f8 fa08 	bl	800361c <HAL_DMA_Start_IT>
 800b20c:	bb20      	cbnz	r0, 800b258 <HAL_SAI_Receive_DMA+0xb8>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b20e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b210:	6863      	ldr	r3, [r4, #4]
 800b212:	2a08      	cmp	r2, #8
 800b214:	d024      	beq.n	800b260 <HAL_SAI_Receive_DMA+0xc0>
 800b216:	2505      	movs	r5, #5
 800b218:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b21a:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b21c:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 800b21e:	2b01      	cmp	r3, #1
 800b220:	bf88      	it	hi
 800b222:	462a      	movhi	r2, r5
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b224:	690b      	ldr	r3, [r1, #16]
 800b226:	4313      	orrs	r3, r2
 800b228:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b22a:	6822      	ldr	r2, [r4, #0]
 800b22c:	6813      	ldr	r3, [r2, #0]
 800b22e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b232:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	03d2      	lsls	r2, r2, #15
 800b23a:	d403      	bmi.n	800b244 <HAL_SAI_Receive_DMA+0xa4>
      __HAL_SAI_ENABLE(hsai);
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b242:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800b244:	2300      	movs	r3, #0
 800b246:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800b24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800b24c:	2002      	movs	r0, #2
}
 800b24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 800b250:	2001      	movs	r0, #1
}
 800b252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 800b254:	2001      	movs	r0, #1
}
 800b256:	4770      	bx	lr
      __HAL_UNLOCK(hsai);
 800b258:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 800b25c:	4630      	mov	r0, r6
}
 800b25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b260:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b264:	2a01      	cmp	r2, #1
 800b266:	bf0b      	itete	eq
 800b268:	2515      	moveq	r5, #21
 800b26a:	2505      	movne	r5, #5
 800b26c:	2271      	moveq	r2, #113	; 0x71
 800b26e:	2261      	movne	r2, #97	; 0x61
 800b270:	e7d3      	b.n	800b21a <HAL_SAI_Receive_DMA+0x7a>
 800b272:	bf00      	nop
 800b274:	0800b355 	.word	0x0800b355
 800b278:	0800b2f1 	.word	0x0800b2f1
 800b27c:	0800b361 	.word	0x0800b361

0800b280 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800b280:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b282:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b284:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b28a:	d01a      	beq.n	800b2c2 <SAI_DMATxCplt+0x42>
  {
    hsai->XferCount = 0;
 800b28c:	2300      	movs	r3, #0

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b28e:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 800b290:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b294:	6813      	ldr	r3, [r2, #0]
 800b296:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b29a:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b29c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b29e:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b2a0:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b2a2:	d011      	beq.n	800b2c8 <SAI_DMATxCplt+0x48>
 800b2a4:	f06f 0261 	mvn.w	r2, #97	; 0x61
 800b2a8:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b2ac:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b2ae:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 800b2b0:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b2b2:	42a3      	cmp	r3, r4
 800b2b4:	bf88      	it	hi
 800b2b6:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b2b8:	690b      	ldr	r3, [r1, #16]
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800b2be:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800b2c2:	f006 faa1 	bl	8011808 <HAL_SAI_TxCpltCallback>
#endif
}
 800b2c6:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b2c8:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b2cc:	2a01      	cmp	r2, #1
 800b2ce:	bf0b      	itete	eq
 800b2d0:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 800b2d4:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 800b2d8:	f06f 0515 	mvneq.w	r5, #21
 800b2dc:	f06f 0505 	mvnne.w	r5, #5
 800b2e0:	e7e4      	b.n	800b2ac <SAI_DMATxCplt+0x2c>
 800b2e2:	bf00      	nop

0800b2e4 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b2e4:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800b2e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b2e8:	f006 fa90 	bl	801180c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800b2ec:	bd08      	pop	{r3, pc}
 800b2ee:	bf00      	nop

0800b2f0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800b2f0:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b2f2:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2f4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b2f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2fa:	d01a      	beq.n	800b332 <SAI_DMARxCplt+0x42>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b2fc:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 800b2fe:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b300:	6813      	ldr	r3, [r2, #0]
 800b302:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b306:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b308:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
 800b30a:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b30e:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b310:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b312:	d011      	beq.n	800b338 <SAI_DMARxCplt+0x48>
 800b314:	f06f 0261 	mvn.w	r2, #97	; 0x61
 800b318:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b31c:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b31e:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 800b320:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b322:	42a3      	cmp	r3, r4
 800b324:	bf88      	it	hi
 800b326:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b328:	690b      	ldr	r3, [r1, #16]
 800b32a:	4013      	ands	r3, r2
 800b32c:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800b32e:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800b332:	f006 fa6d 	bl	8011810 <HAL_SAI_RxCpltCallback>
#endif
}
 800b336:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b338:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b33c:	2a01      	cmp	r2, #1
 800b33e:	bf0b      	itete	eq
 800b340:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 800b344:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 800b348:	f06f 0515 	mvneq.w	r5, #21
 800b34c:	f06f 0505 	mvnne.w	r5, #5
 800b350:	e7e4      	b.n	800b31c <SAI_DMARxCplt+0x2c>
 800b352:	bf00      	nop

0800b354 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b354:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800b356:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b358:	f006 fa5e 	bl	8011818 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800b35c:	bd08      	pop	{r3, pc}
 800b35e:	bf00      	nop

0800b360 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b360:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b362:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b364:	f7f9 fbb0 	bl	8004ac8 <HAL_DMA_GetError>
 800b368:	2802      	cmp	r0, #2
 800b36a:	d02a      	beq.n	800b3c2 <SAI_DMAError+0x62>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b36c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b370:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b376:	4a17      	ldr	r2, [pc, #92]	; (800b3d4 <SAI_DMAError+0x74>)
 800b378:	4d17      	ldr	r5, [pc, #92]	; (800b3d8 <SAI_DMAError+0x78>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b37a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b37e:	680b      	ldr	r3, [r1, #0]
 800b380:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b384:	600b      	str	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b386:	6812      	ldr	r2, [r2, #0]
  __HAL_SAI_DISABLE(hsai);
 800b388:	6820      	ldr	r0, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b38a:	fba5 3202 	umull	r3, r2, r5, r2
  __HAL_SAI_DISABLE(hsai);
 800b38e:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b390:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 800b392:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    if (count == 0U)
 800b396:	0093      	lsls	r3, r2, #2
  __HAL_SAI_DISABLE(hsai);
 800b398:	6001      	str	r1, [r0, #0]
    if (count == 0U)
 800b39a:	b19a      	cbz	r2, 800b3c4 <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b39c:	6821      	ldr	r1, [r4, #0]
    count--;
 800b39e:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b3a0:	680a      	ldr	r2, [r1, #0]
 800b3a2:	03d0      	lsls	r0, r2, #15
 800b3a4:	d504      	bpl.n	800b3b0 <SAI_DMAError+0x50>
    if (count == 0U)
 800b3a6:	b16b      	cbz	r3, 800b3c4 <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b3a8:	680a      	ldr	r2, [r1, #0]
    count--;
 800b3aa:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b3ac:	03d2      	lsls	r2, r2, #15
 800b3ae:	d4fa      	bmi.n	800b3a6 <SAI_DMAError+0x46>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800b3b0:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800b3b2:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800b3b4:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 800b3b6:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 800b3ba:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 800b3be:	f006 fa1f 	bl	8011800 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800b3c2:	bd38      	pop	{r3, r4, r5, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b3c4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b3c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3cc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800b3d0:	e7ee      	b.n	800b3b0 <SAI_DMAError+0x50>
 800b3d2:	bf00      	nop
 800b3d4:	200002b0 	.word	0x200002b0
 800b3d8:	95cbec1b 	.word	0x95cbec1b

0800b3dc <HAL_SAI_IRQHandler>:
  if (hsai->State != HAL_SAI_STATE_RESET)
 800b3dc:	f890 2091 	ldrb.w	r2, [r0, #145]	; 0x91
 800b3e0:	2a00      	cmp	r2, #0
 800b3e2:	d030      	beq.n	800b446 <HAL_SAI_IRQHandler+0x6a>
{
 800b3e4:	b570      	push	{r4, r5, r6, lr}
    uint32_t itflags = hsai->Instance->SR;
 800b3e6:	6802      	ldr	r2, [r0, #0]
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	6951      	ldr	r1, [r2, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800b3ec:	6915      	ldr	r5, [r2, #16]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800b3ee:	070b      	lsls	r3, r1, #28
    uint32_t cr1config = hsai->Instance->CR1;
 800b3f0:	6816      	ldr	r6, [r2, #0]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800b3f2:	d506      	bpl.n	800b402 <HAL_SAI_IRQHandler+0x26>
 800b3f4:	072b      	lsls	r3, r5, #28
 800b3f6:	d504      	bpl.n	800b402 <HAL_SAI_IRQHandler+0x26>
      hsai->InterruptServiceRoutine(hsai);
 800b3f8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
}
 800b3fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hsai->InterruptServiceRoutine(hsai);
 800b400:	4718      	bx	r3
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800b402:	07cb      	lsls	r3, r1, #31
 800b404:	d512      	bpl.n	800b42c <HAL_SAI_IRQHandler+0x50>
 800b406:	07e8      	lsls	r0, r5, #31
 800b408:	d510      	bpl.n	800b42c <HAL_SAI_IRQHandler+0x50>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800b40a:	2301      	movs	r3, #1
      HAL_SAI_ErrorCallback(hsai);
 800b40c:	4620      	mov	r0, r4
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800b40e:	6193      	str	r3, [r2, #24]
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800b410:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
      hsai->ErrorCode |= tmperror;
 800b414:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800b418:	2a22      	cmp	r2, #34	; 0x22
 800b41a:	bf0c      	ite	eq
 800b41c:	2201      	moveq	r2, #1
 800b41e:	2202      	movne	r2, #2
      hsai->ErrorCode |= tmperror;
 800b420:	4313      	orrs	r3, r2
 800b422:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
 800b426:	f006 f9eb 	bl	8011800 <HAL_SAI_ErrorCallback>
}
 800b42a:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800b42c:	078b      	lsls	r3, r1, #30
 800b42e:	d50b      	bpl.n	800b448 <HAL_SAI_IRQHandler+0x6c>
 800b430:	07a8      	lsls	r0, r5, #30
 800b432:	d509      	bpl.n	800b448 <HAL_SAI_IRQHandler+0x6c>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800b434:	2302      	movs	r3, #2
 800b436:	6193      	str	r3, [r2, #24]
      if (hsai->mutecallback != NULL)
 800b438:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d0f4      	beq.n	800b42a <HAL_SAI_IRQHandler+0x4e>
}
 800b440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hsai->mutecallback();
 800b444:	4718      	bx	r3
 800b446:	4770      	bx	lr
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800b448:	068b      	lsls	r3, r1, #26
 800b44a:	d512      	bpl.n	800b472 <HAL_SAI_IRQHandler+0x96>
 800b44c:	06a8      	lsls	r0, r5, #26
 800b44e:	d510      	bpl.n	800b472 <HAL_SAI_IRQHandler+0x96>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800b450:	2320      	movs	r3, #32
 800b452:	6193      	str	r3, [r2, #24]
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b454:	03b2      	lsls	r2, r6, #14
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800b456:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b45a:	f043 0304 	orr.w	r3, r3, #4
 800b45e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b462:	d424      	bmi.n	800b4ae <HAL_SAI_IRQHandler+0xd2>
        (void) HAL_SAI_Abort(hsai);
 800b464:	4620      	mov	r0, r4
 800b466:	f7ff fd8b 	bl	800af80 <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 800b46a:	4620      	mov	r0, r4
 800b46c:	f006 f9c8 	bl	8011800 <HAL_SAI_ErrorCallback>
}
 800b470:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800b472:	064b      	lsls	r3, r1, #25
 800b474:	d50c      	bpl.n	800b490 <HAL_SAI_IRQHandler+0xb4>
 800b476:	0668      	lsls	r0, r5, #25
 800b478:	d50a      	bpl.n	800b490 <HAL_SAI_IRQHandler+0xb4>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800b47a:	2340      	movs	r3, #64	; 0x40
 800b47c:	6193      	str	r3, [r2, #24]
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b47e:	03b2      	lsls	r2, r6, #14
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800b480:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b484:	f043 0308 	orr.w	r3, r3, #8
 800b488:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b48c:	d5ea      	bpl.n	800b464 <HAL_SAI_IRQHandler+0x88>
 800b48e:	e00e      	b.n	800b4ae <HAL_SAI_IRQHandler+0xd2>
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800b490:	074b      	lsls	r3, r1, #29
 800b492:	d52c      	bpl.n	800b4ee <HAL_SAI_IRQHandler+0x112>
 800b494:	0768      	lsls	r0, r5, #29
 800b496:	d52a      	bpl.n	800b4ee <HAL_SAI_IRQHandler+0x112>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800b498:	2304      	movs	r3, #4
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b49a:	f416 3600 	ands.w	r6, r6, #131072	; 0x20000
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800b49e:	6193      	str	r3, [r2, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800b4a0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b4a4:	f043 0320 	orr.w	r3, r3, #32
 800b4a8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b4ac:	d039      	beq.n	800b522 <HAL_SAI_IRQHandler+0x146>
        if (hsai->hdmatx != NULL)
 800b4ae:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b4b2:	b133      	cbz	r3, 800b4c2 <HAL_SAI_IRQHandler+0xe6>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800b4b4:	4a22      	ldr	r2, [pc, #136]	; (800b540 <HAL_SAI_IRQHandler+0x164>)
 800b4b6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800b4b8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800b4bc:	f7f8 fda8 	bl	8004010 <HAL_DMA_Abort_IT>
 800b4c0:	bb28      	cbnz	r0, 800b50e <HAL_SAI_IRQHandler+0x132>
        if (hsai->hdmarx != NULL)
 800b4c2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d0af      	beq.n	800b42a <HAL_SAI_IRQHandler+0x4e>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800b4ca:	4a1d      	ldr	r2, [pc, #116]	; (800b540 <HAL_SAI_IRQHandler+0x164>)
 800b4cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800b4ce:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800b4d2:	f7f8 fd9d 	bl	8004010 <HAL_DMA_Abort_IT>
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d0a7      	beq.n	800b42a <HAL_SAI_IRQHandler+0x4e>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b4da:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 800b4de:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b4e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4e4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 800b4e8:	f006 f98a 	bl	8011800 <HAL_SAI_ErrorCallback>
}
 800b4ec:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800b4ee:	06c9      	lsls	r1, r1, #27
 800b4f0:	d59b      	bpl.n	800b42a <HAL_SAI_IRQHandler+0x4e>
 800b4f2:	06eb      	lsls	r3, r5, #27
 800b4f4:	d599      	bpl.n	800b42a <HAL_SAI_IRQHandler+0x4e>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800b4f6:	2310      	movs	r3, #16
      HAL_SAI_ErrorCallback(hsai);
 800b4f8:	4620      	mov	r0, r4
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800b4fa:	6193      	str	r3, [r2, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800b4fc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b500:	f043 0310 	orr.w	r3, r3, #16
 800b504:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
 800b508:	f006 f97a 	bl	8011800 <HAL_SAI_ErrorCallback>
}
 800b50c:	bd70      	pop	{r4, r5, r6, pc}
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b50e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 800b512:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b518:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 800b51c:	f006 f970 	bl	8011800 <HAL_SAI_ErrorCallback>
 800b520:	e7cf      	b.n	800b4c2 <HAL_SAI_IRQHandler+0xe6>
        hsai->Instance->IMR = 0U;
 800b522:	6822      	ldr	r2, [r4, #0]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b524:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        hsai->State = HAL_SAI_STATE_READY;
 800b528:	2301      	movs	r3, #1
        HAL_SAI_ErrorCallback(hsai);
 800b52a:	4620      	mov	r0, r4
        hsai->Instance->IMR = 0U;
 800b52c:	6116      	str	r6, [r2, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b52e:	6822      	ldr	r2, [r4, #0]
 800b530:	6191      	str	r1, [r2, #24]
        hsai->XferCount = 0U;
 800b532:	f8a4 607e 	strh.w	r6, [r4, #126]	; 0x7e
        hsai->State = HAL_SAI_STATE_READY;
 800b536:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
        HAL_SAI_ErrorCallback(hsai);
 800b53a:	f006 f961 	bl	8011800 <HAL_SAI_ErrorCallback>
}
 800b53e:	bd70      	pop	{r4, r5, r6, pc}
 800b540:	0800b545 	.word	0x0800b545

0800b544 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b544:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b546:	6b82      	ldr	r2, [r0, #56]	; 0x38

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800b548:	2400      	movs	r4, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b54a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b54e:	6811      	ldr	r1, [r2, #0]
 800b550:	680b      	ldr	r3, [r1, #0]
 800b552:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b556:	600b      	str	r3, [r1, #0]
  hsai->Instance->IMR = 0U;
 800b558:	6813      	ldr	r3, [r2, #0]
 800b55a:	611c      	str	r4, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b55c:	6813      	ldr	r3, [r2, #0]
 800b55e:	6198      	str	r0, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800b560:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800b564:	2b20      	cmp	r3, #32
 800b566:	d01a      	beq.n	800b59e <SAI_DMAAbort+0x5a>
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b568:	4915      	ldr	r1, [pc, #84]	; (800b5c0 <SAI_DMAAbort+0x7c>)
 800b56a:	4b16      	ldr	r3, [pc, #88]	; (800b5c4 <SAI_DMAAbort+0x80>)
 800b56c:	6809      	ldr	r1, [r1, #0]
  __HAL_SAI_DISABLE(hsai);
 800b56e:	6814      	ldr	r4, [r2, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b570:	fba3 3101 	umull	r3, r1, r3, r1
  __HAL_SAI_DISABLE(hsai);
 800b574:	6820      	ldr	r0, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b576:	0b09      	lsrs	r1, r1, #12
  __HAL_SAI_DISABLE(hsai);
 800b578:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    if (count == 0U)
 800b57c:	008b      	lsls	r3, r1, #2
  __HAL_SAI_DISABLE(hsai);
 800b57e:	6020      	str	r0, [r4, #0]
 800b580:	6810      	ldr	r0, [r2, #0]
    if (count == 0U)
 800b582:	b1b1      	cbz	r1, 800b5b2 <SAI_DMAAbort+0x6e>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b584:	6801      	ldr	r1, [r0, #0]
    count--;
 800b586:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b588:	03cc      	lsls	r4, r1, #15
 800b58a:	d504      	bpl.n	800b596 <SAI_DMAAbort+0x52>
    if (count == 0U)
 800b58c:	b18b      	cbz	r3, 800b5b2 <SAI_DMAAbort+0x6e>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b58e:	6801      	ldr	r1, [r0, #0]
    count--;
 800b590:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b592:	03c9      	lsls	r1, r1, #15
 800b594:	d4fa      	bmi.n	800b58c <SAI_DMAAbort+0x48>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800b596:	6843      	ldr	r3, [r0, #4]
 800b598:	f043 0308 	orr.w	r3, r3, #8
 800b59c:	6043      	str	r3, [r0, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800b59e:	2101      	movs	r1, #1

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800b5a0:	2300      	movs	r3, #0

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800b5a2:	4610      	mov	r0, r2
  hsai->State = HAL_SAI_STATE_READY;
 800b5a4:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
  hsai->XferCount = 0U;
 800b5a8:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
  HAL_SAI_ErrorCallback(hsai);
 800b5ac:	f006 f928 	bl	8011800 <HAL_SAI_ErrorCallback>
#endif
}
 800b5b0:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b5b2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800b5b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800b5be:	e7ea      	b.n	800b596 <SAI_DMAAbort+0x52>
 800b5c0:	200002b0 	.word	0x200002b0
 800b5c4:	95cbec1b 	.word	0x95cbec1b

0800b5c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	4605      	mov	r5, r0
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b5d2:	f7f5 fb37 	bl	8000c44 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b5d6:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800b5d8:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b5da:	6828      	ldr	r0, [r5, #0]
 800b5dc:	f002 fd82 	bl	800e0e4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	b118      	cbz	r0, 800b5ec <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	b007      	add	sp, #28
 800b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b5ec:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800b5ee:	6828      	ldr	r0, [r5, #0]
 800b5f0:	0409      	lsls	r1, r1, #16
 800b5f2:	f002 ffe1 	bl	800e5b8 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d1f3      	bne.n	800b5e4 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b5fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 8U;
 800b600:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b602:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b604:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b606:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b608:	2202      	movs	r2, #2
  config.DataLength    = 8U;
 800b60a:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b60c:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b60e:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b610:	4669      	mov	r1, sp
 800b612:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b614:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b616:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b618:	f002 fd06 	bl	800e028 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b61c:	6828      	ldr	r0, [r5, #0]
 800b61e:	f003 f887 	bl	800e730 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b622:	4604      	mov	r4, r0
 800b624:	2800      	cmp	r0, #0
 800b626:	d1dd      	bne.n	800b5e4 <SD_FindSCR+0x1c>
  uint32_t index = 0U;
 800b628:	4681      	mov	r9, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b62a:	4683      	mov	fp, r0
 800b62c:	4682      	mov	sl, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b62e:	f240 582a 	movw	r8, #1322	; 0x52a
 800b632:	e004      	b.n	800b63e <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b634:	f7f5 fb06 	bl	8000c44 <HAL_GetTick>
 800b638:	1b80      	subs	r0, r0, r6
 800b63a:	3001      	adds	r0, #1
 800b63c:	d025      	beq.n	800b68a <SD_FindSCR+0xc2>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b63e:	6828      	ldr	r0, [r5, #0]
 800b640:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b642:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b646:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b648:	d10e      	bne.n	800b668 <SD_FindSCR+0xa0>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b64a:	031b      	lsls	r3, r3, #12
 800b64c:	d4f2      	bmi.n	800b634 <SD_FindSCR+0x6c>
 800b64e:	f1b9 0f00 	cmp.w	r9, #0
 800b652:	d1ef      	bne.n	800b634 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b654:	f002 fcc2 	bl	800dfdc <SDMMC_ReadFIFO>
 800b658:	4682      	mov	sl, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b65a:	6828      	ldr	r0, [r5, #0]
      index++;
 800b65c:	f04f 0901 	mov.w	r9, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b660:	f002 fcbc 	bl	800dfdc <SDMMC_ReadFIFO>
 800b664:	4683      	mov	fp, r0
 800b666:	e7e5      	b.n	800b634 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b668:	0719      	lsls	r1, r3, #28
 800b66a:	d411      	bmi.n	800b690 <SD_FindSCR+0xc8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b66c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b66e:	079a      	lsls	r2, r3, #30
 800b670:	d411      	bmi.n	800b696 <SD_FindSCR+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b672:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b674:	069b      	lsls	r3, r3, #26
 800b676:	d411      	bmi.n	800b69c <SD_FindSCR+0xd4>
 800b678:	fa9b f28b 	rev.w	r2, fp
 800b67c:	fa9a f38a 	rev.w	r3, sl
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b680:	4908      	ldr	r1, [pc, #32]	; (800b6a4 <SD_FindSCR+0xdc>)
 800b682:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b684:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800b688:	e7ac      	b.n	800b5e4 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800b68a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b68e:	e7a9      	b.n	800b5e4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b690:	2408      	movs	r4, #8
 800b692:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b694:	e7a6      	b.n	800b5e4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b696:	2402      	movs	r4, #2
 800b698:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b69a:	e7a3      	b.n	800b5e4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b69c:	2420      	movs	r4, #32
 800b69e:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800b6a0:	e7a0      	b.n	800b5e4 <SD_FindSCR+0x1c>
 800b6a2:	bf00      	nop
 800b6a4:	18000f3a 	.word	0x18000f3a

0800b6a8 <HAL_SD_ReadBlocks>:
{
 800b6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ac:	460d      	mov	r5, r1
 800b6ae:	b086      	sub	sp, #24
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	4690      	mov	r8, r2
 800b6b4:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 800b6b6:	f7f5 fac5 	bl	8000c44 <HAL_GetTick>
  if(NULL == pData)
 800b6ba:	2d00      	cmp	r5, #0
 800b6bc:	d070      	beq.n	800b7a0 <HAL_SD_ReadBlocks+0xf8>
 800b6be:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800b6c0:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800b6c4:	b2c0      	uxtb	r0, r0
 800b6c6:	2801      	cmp	r0, #1
 800b6c8:	d007      	beq.n	800b6da <HAL_SD_ReadBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b6ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800b6cc:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b6ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b6d2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b6d4:	b006      	add	sp, #24
 800b6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b6da:	eb08 0306 	add.w	r3, r8, r6
 800b6de:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6e0:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b6e2:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6e4:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b6e6:	d863      	bhi.n	800b7b0 <HAL_SD_ReadBlocks+0x108>
    hsd->Instance->DCTRL = 0U;
 800b6e8:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800b6ea:	2203      	movs	r2, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b6ec:	f04f 0902 	mov.w	r9, #2
    hsd->State = HAL_SD_STATE_BUSY;
 800b6f0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b6f4:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 800b6f6:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b6f8:	0271      	lsls	r1, r6, #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b6fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b6fc:	9101      	str	r1, [sp, #4]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b6fe:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b700:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b706:	6820      	ldr	r0, [r4, #0]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b708:	9300      	str	r3, [sp, #0]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b70a:	f04f 0300 	mov.w	r3, #0
      add *= 512U;
 800b70e:	bf18      	it	ne
 800b710:	ea4f 2848 	movne.w	r8, r8, lsl #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b714:	9202      	str	r2, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b716:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b718:	e9cd 9303 	strd	r9, r3, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b71c:	f002 fc84 	bl	800e028 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b720:	6822      	ldr	r2, [r4, #0]
    if(NumberOfBlocks > 1U)
 800b722:	2e01      	cmp	r6, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b724:	68d3      	ldr	r3, [r2, #12]
 800b726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b72a:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 800b72c:	d953      	bls.n	800b7d6 <HAL_SD_ReadBlocks+0x12e>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b72e:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b732:	4641      	mov	r1, r8
 800b734:	6820      	ldr	r0, [r4, #0]
 800b736:	f002 fd5d 	bl	800e1f4 <SDMMC_CmdReadMultiBlock>
 800b73a:	4603      	mov	r3, r0
 800b73c:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d13d      	bne.n	800b7be <HAL_SD_ReadBlocks+0x116>
    dataremaining = config.DataLength;
 800b742:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b746:	e006      	b.n	800b756 <HAL_SD_ReadBlocks+0xae>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b748:	f7f5 fa7c 	bl	8000c44 <HAL_GetTick>
 800b74c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b74e:	1bc0      	subs	r0, r0, r7
 800b750:	4298      	cmp	r0, r3
 800b752:	d274      	bcs.n	800b83e <HAL_SD_ReadBlocks+0x196>
 800b754:	6820      	ldr	r0, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b756:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b758:	f413 7f95 	tst.w	r3, #298	; 0x12a
 800b75c:	d143      	bne.n	800b7e6 <HAL_SD_ReadBlocks+0x13e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800b75e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b760:	0419      	lsls	r1, r3, #16
 800b762:	d5f1      	bpl.n	800b748 <HAL_SD_ReadBlocks+0xa0>
 800b764:	f1b9 0f1f 	cmp.w	r9, #31
 800b768:	d9ee      	bls.n	800b748 <HAL_SD_ReadBlocks+0xa0>
 800b76a:	f105 0a04 	add.w	sl, r5, #4
 800b76e:	f105 0824 	add.w	r8, r5, #36	; 0x24
 800b772:	e000      	b.n	800b776 <HAL_SD_ReadBlocks+0xce>
 800b774:	6820      	ldr	r0, [r4, #0]
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b776:	f002 fc31 	bl	800dfdc <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b77a:	f80a 0c04 	strb.w	r0, [sl, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b77e:	0a02      	lsrs	r2, r0, #8
 800b780:	f10a 0a04 	add.w	sl, sl, #4
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b784:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b786:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b788:	f80a 2c07 	strb.w	r2, [sl, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b78c:	f80a 3c06 	strb.w	r3, [sl, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b790:	f80a 0c05 	strb.w	r0, [sl, #-5]
        for(count = 0U; count < 8U; count++)
 800b794:	45c2      	cmp	sl, r8
 800b796:	d1ed      	bne.n	800b774 <HAL_SD_ReadBlocks+0xcc>
 800b798:	3520      	adds	r5, #32
        dataremaining -= 32U;
 800b79a:	f1a9 0920 	sub.w	r9, r9, #32
 800b79e:	e7d3      	b.n	800b748 <HAL_SD_ReadBlocks+0xa0>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b7a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800b7a2:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b7a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b7a8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b7aa:	b006      	add	sp, #24
 800b7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b7b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b7b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b7b6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b7b8:	b006      	add	sp, #24
 800b7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7be:	4a39      	ldr	r2, [pc, #228]	; (800b8a4 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 800b7c0:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b7c2:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7c4:	6382      	str	r2, [r0, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b7c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 800b7c8:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b7ce:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b7d2:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 800b7d4:	e77e      	b.n	800b6d4 <HAL_SD_ReadBlocks+0x2c>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b7d6:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b7d8:	4641      	mov	r1, r8
 800b7da:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b7dc:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b7de:	f002 fcc5 	bl	800e16c <SDMMC_CmdReadSingleBlock>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	e7aa      	b.n	800b73c <HAL_SD_ReadBlocks+0x94>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b7e6:	68c3      	ldr	r3, [r0, #12]
 800b7e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7ec:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7f2:	05d2      	lsls	r2, r2, #23
 800b7f4:	d50b      	bpl.n	800b80e <HAL_SD_ReadBlocks+0x166>
 800b7f6:	2e01      	cmp	r6, #1
 800b7f8:	d909      	bls.n	800b80e <HAL_SD_ReadBlocks+0x166>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b7fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b7fc:	2a03      	cmp	r2, #3
 800b7fe:	d006      	beq.n	800b80e <HAL_SD_ReadBlocks+0x166>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b800:	4618      	mov	r0, r3
 800b802:	f002 fdc3 	bl	800e38c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800b806:	4603      	mov	r3, r0
 800b808:	2800      	cmp	r0, #0
 800b80a:	d145      	bne.n	800b898 <HAL_SD_ReadBlocks+0x1f0>
 800b80c:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b80e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b810:	f012 0208 	ands.w	r2, r2, #8
 800b814:	d121      	bne.n	800b85a <HAL_SD_ReadBlocks+0x1b2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b816:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b818:	f011 0102 	ands.w	r1, r1, #2
 800b81c:	d12a      	bne.n	800b874 <HAL_SD_ReadBlocks+0x1cc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b81e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b820:	f010 0020 	ands.w	r0, r0, #32
 800b824:	d032      	beq.n	800b88c <HAL_SD_ReadBlocks+0x1e4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b826:	481f      	ldr	r0, [pc, #124]	; (800b8a4 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 800b828:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b82a:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b82c:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b82e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b830:	f043 0320 	orr.w	r3, r3, #32
 800b834:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b836:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b83a:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800b83c:	e74a      	b.n	800b6d4 <HAL_SD_ReadBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b83e:	6823      	ldr	r3, [r4, #0]
        hsd->State= HAL_SD_STATE_READY;
 800b840:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b842:	4d18      	ldr	r5, [pc, #96]	; (800b8a4 <HAL_SD_ReadBlocks+0x1fc>)
        hsd->Context = SD_CONTEXT_NONE;
 800b844:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800b846:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b848:	639d      	str	r5, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b84a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b84c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b850:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b852:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b856:	6322      	str	r2, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800b858:	e73c      	b.n	800b6d4 <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b85a:	4812      	ldr	r0, [pc, #72]	; (800b8a4 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 800b85c:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b85e:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b860:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b862:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b866:	f043 0308 	orr.w	r3, r3, #8
 800b86a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b86c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b870:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800b872:	e72f      	b.n	800b6d4 <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b874:	480b      	ldr	r0, [pc, #44]	; (800b8a4 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 800b876:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b878:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b87a:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b87c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b87e:	f043 0302 	orr.w	r3, r3, #2
 800b882:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b884:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b888:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 800b88a:	e723      	b.n	800b6d4 <HAL_SD_ReadBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b88c:	4906      	ldr	r1, [pc, #24]	; (800b8a8 <HAL_SD_ReadBlocks+0x200>)
    hsd->State = HAL_SD_STATE_READY;
 800b88e:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b890:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b892:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 800b896:	e71d      	b.n	800b6d4 <HAL_SD_ReadBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b898:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800b89a:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b89c:	4801      	ldr	r0, [pc, #4]	; (800b8a4 <HAL_SD_ReadBlocks+0x1fc>)
          hsd->Context = SD_CONTEXT_NONE;
 800b89e:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8a0:	6390      	str	r0, [r2, #56]	; 0x38
 800b8a2:	e790      	b.n	800b7c6 <HAL_SD_ReadBlocks+0x11e>
 800b8a4:	1fe00fff 	.word	0x1fe00fff
 800b8a8:	18000f3a 	.word	0x18000f3a

0800b8ac <HAL_SD_WriteBlocks>:
{
 800b8ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8b0:	460d      	mov	r5, r1
 800b8b2:	b089      	sub	sp, #36	; 0x24
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	4616      	mov	r6, r2
 800b8b8:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800b8ba:	f7f5 f9c3 	bl	8000c44 <HAL_GetTick>
  if(NULL == pData)
 800b8be:	2d00      	cmp	r5, #0
 800b8c0:	d05d      	beq.n	800b97e <HAL_SD_WriteBlocks+0xd2>
 800b8c2:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800b8c4:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800b8c8:	b2c0      	uxtb	r0, r0
 800b8ca:	2801      	cmp	r0, #1
 800b8cc:	d007      	beq.n	800b8de <HAL_SD_WriteBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b8ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800b8d0:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b8d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8d6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b8d8:	b009      	add	sp, #36	; 0x24
 800b8da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b8de:	19f3      	adds	r3, r6, r7
 800b8e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b8e2:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b8e4:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b8e6:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b8e8:	d851      	bhi.n	800b98e <HAL_SD_WriteBlocks+0xe2>
    hsd->Instance->DCTRL = 0U;
 800b8ea:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800b8ec:	2203      	movs	r2, #3
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b8ee:	0278      	lsls	r0, r7, #9
    hsd->State = HAL_SD_STATE_BUSY;
 800b8f0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b8f4:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 800b8f6:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b8f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b8fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b8fe:	9102      	str	r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b900:	a902      	add	r1, sp, #8
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b902:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b904:	f04f 0300 	mov.w	r3, #0
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b908:	e9cd 0203 	strd	r0, r2, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b90c:	6820      	ldr	r0, [r4, #0]
      add *= 512U;
 800b90e:	bf18      	it	ne
 800b910:	0276      	lslne	r6, r6, #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b912:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b914:	e9cd 3305 	strd	r3, r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b918:	f002 fb86 	bl	800e028 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b91c:	6822      	ldr	r2, [r4, #0]
    if(NumberOfBlocks > 1U)
 800b91e:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b920:	68d3      	ldr	r3, [r2, #12]
 800b922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b926:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 800b928:	d944      	bls.n	800b9b4 <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b92a:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b92c:	4631      	mov	r1, r6
 800b92e:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b930:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b932:	f002 fce7 	bl	800e304 <SDMMC_CmdWriteMultiBlock>
 800b936:	4603      	mov	r3, r0
 800b938:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b93a:	bb7b      	cbnz	r3, 800b99c <HAL_SD_WriteBlocks+0xf0>
    dataremaining = config.DataLength;
 800b93c:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b93e:	e007      	b.n	800b950 <HAL_SD_WriteBlocks+0xa4>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b940:	f7f5 f980 	bl	8000c44 <HAL_GetTick>
 800b944:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b946:	eba0 0008 	sub.w	r0, r0, r8
 800b94a:	4298      	cmp	r0, r3
 800b94c:	d266      	bcs.n	800ba1c <HAL_SD_WriteBlocks+0x170>
 800b94e:	6820      	ldr	r0, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b950:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b952:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800b956:	d135      	bne.n	800b9c4 <HAL_SD_WriteBlocks+0x118>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800b958:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b95a:	0459      	lsls	r1, r3, #17
 800b95c:	d5f0      	bpl.n	800b940 <HAL_SD_WriteBlocks+0x94>
 800b95e:	2e1f      	cmp	r6, #31
 800b960:	d9ee      	bls.n	800b940 <HAL_SD_WriteBlocks+0x94>
 800b962:	f105 0920 	add.w	r9, r5, #32
 800b966:	e000      	b.n	800b96a <HAL_SD_WriteBlocks+0xbe>
 800b968:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b96a:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b96e:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b970:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b972:	f002 fb37 	bl	800dfe4 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800b976:	454d      	cmp	r5, r9
 800b978:	d1f6      	bne.n	800b968 <HAL_SD_WriteBlocks+0xbc>
        dataremaining -= 32U;
 800b97a:	3e20      	subs	r6, #32
 800b97c:	e7e0      	b.n	800b940 <HAL_SD_WriteBlocks+0x94>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b97e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800b980:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b982:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b986:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b988:	b009      	add	sp, #36	; 0x24
 800b98a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b98e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b990:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b994:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b996:	b009      	add	sp, #36	; 0x24
 800b998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b99c:	4a38      	ldr	r2, [pc, #224]	; (800ba80 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800b99e:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b9a0:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9a2:	6382      	str	r2, [r0, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b9a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 800b9a6:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b9ac:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b9b0:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 800b9b2:	e791      	b.n	800b8d8 <HAL_SD_WriteBlocks+0x2c>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b9b4:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b9b6:	4631      	mov	r1, r6
 800b9b8:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b9ba:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b9bc:	f002 fc5e 	bl	800e27c <SDMMC_CmdWriteSingleBlock>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	e7b9      	b.n	800b938 <HAL_SD_WriteBlocks+0x8c>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b9c4:	68c3      	ldr	r3, [r0, #12]
 800b9c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9ca:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9d0:	05d2      	lsls	r2, r2, #23
 800b9d2:	d50b      	bpl.n	800b9ec <HAL_SD_WriteBlocks+0x140>
 800b9d4:	2f01      	cmp	r7, #1
 800b9d6:	d909      	bls.n	800b9ec <HAL_SD_WriteBlocks+0x140>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b9d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b9da:	2a03      	cmp	r2, #3
 800b9dc:	d006      	beq.n	800b9ec <HAL_SD_WriteBlocks+0x140>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f002 fcd4 	bl	800e38c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d143      	bne.n	800ba72 <HAL_SD_WriteBlocks+0x1c6>
 800b9ea:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b9ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9ee:	f012 0208 	ands.w	r2, r2, #8
 800b9f2:	d11f      	bne.n	800ba34 <HAL_SD_WriteBlocks+0x188>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b9f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b9f6:	f011 0102 	ands.w	r1, r1, #2
 800b9fa:	d128      	bne.n	800ba4e <HAL_SD_WriteBlocks+0x1a2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800b9fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b9fe:	f010 0010 	ands.w	r0, r0, #16
 800ba02:	d030      	beq.n	800ba66 <HAL_SD_WriteBlocks+0x1ba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba04:	481e      	ldr	r0, [pc, #120]	; (800ba80 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800ba06:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba08:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ba0a:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ba0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba0e:	f043 0310 	orr.w	r3, r3, #16
 800ba12:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba14:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba18:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800ba1a:	e75d      	b.n	800b8d8 <HAL_SD_WriteBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba1c:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800ba1e:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba20:	4d17      	ldr	r5, [pc, #92]	; (800ba80 <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
 800ba22:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800ba24:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba26:	638d      	str	r5, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ba28:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ba2a:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ba2c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ba30:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800ba32:	e751      	b.n	800b8d8 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba34:	4812      	ldr	r0, [pc, #72]	; (800ba80 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800ba36:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800ba38:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba3a:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ba3c:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ba3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba40:	f043 0308 	orr.w	r3, r3, #8
 800ba44:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba46:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba4a:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800ba4c:	e744      	b.n	800b8d8 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba4e:	480c      	ldr	r0, [pc, #48]	; (800ba80 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800ba50:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba52:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ba54:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ba56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba58:	f043 0302 	orr.w	r3, r3, #2
 800ba5c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba5e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba62:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 800ba64:	e738      	b.n	800b8d8 <HAL_SD_WriteBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ba66:	4907      	ldr	r1, [pc, #28]	; (800ba84 <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
 800ba68:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ba6a:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ba6c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 800ba70:	e732      	b.n	800b8d8 <HAL_SD_WriteBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba72:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800ba74:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba76:	4802      	ldr	r0, [pc, #8]	; (800ba80 <HAL_SD_WriteBlocks+0x1d4>)
          hsd->Context = SD_CONTEXT_NONE;
 800ba78:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba7a:	6390      	str	r0, [r2, #56]	; 0x38
 800ba7c:	e792      	b.n	800b9a4 <HAL_SD_WriteBlocks+0xf8>
 800ba7e:	bf00      	nop
 800ba80:	1fe00fff 	.word	0x1fe00fff
 800ba84:	18000f3a 	.word	0x18000f3a

0800ba88 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop

0800ba8c <HAL_SD_GetCardCSD>:
{
 800ba8c:	4603      	mov	r3, r0
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ba8e:	2000      	movs	r0, #0
{
 800ba90:	b430      	push	{r4, r5}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ba92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ba94:	0f92      	lsrs	r2, r2, #30
 800ba96:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ba98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ba9a:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800ba9e:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800baa0:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
 800baa4:	f002 0203 	and.w	r2, r2, #3
 800baa8:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800baaa:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 800baae:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bab0:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 800bab4:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bab6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800baba:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800babc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800babe:	0d12      	lsrs	r2, r2, #20
 800bac0:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bac2:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800bac6:	f002 020f 	and.w	r2, r2, #15
 800baca:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bacc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bace:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800bad2:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bad4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bad6:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800bada:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800badc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bade:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800bae2:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bae4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bae6:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800baea:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800baec:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800baee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800baf0:	2a00      	cmp	r2, #0
 800baf2:	f040 8086 	bne.w	800bc02 <HAL_SD_GetCardCSD+0x176>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800baf6:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800baf8:	f640 72fc 	movw	r2, #4092	; 0xffc
 800bafc:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bafe:	2401      	movs	r4, #1
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bb00:	ea02 0285 	and.w	r2, r2, r5, lsl #2
    hsd->SdCard.LogBlockSize = 512U;
 800bb04:	f44f 7500 	mov.w	r5, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bb08:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800bb0c:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bb0e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800bb10:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 800bb14:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bb16:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 800bb1a:	f002 0207 	and.w	r2, r2, #7
 800bb1e:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bb20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800bb22:	f3c2 5242 	ubfx	r2, r2, #21, #3
 800bb26:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bb28:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800bb2a:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800bb2e:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bb30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800bb32:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 800bb36:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bb38:	690a      	ldr	r2, [r1, #16]
 800bb3a:	4422      	add	r2, r4
 800bb3c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bb3e:	7e08      	ldrb	r0, [r1, #24]
 800bb40:	f000 0007 	and.w	r0, r0, #7
 800bb44:	3002      	adds	r0, #2
 800bb46:	4082      	lsls	r2, r0
 800bb48:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bb4a:	7a08      	ldrb	r0, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 800bb4c:	659d      	str	r5, [r3, #88]	; 0x58
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bb4e:	f000 000f 	and.w	r0, r0, #15
 800bb52:	fa04 f000 	lsl.w	r0, r4, r0
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bb56:	0a44      	lsrs	r4, r0, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bb58:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bb5a:	fb02 f204 	mul.w	r2, r2, r4
 800bb5e:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bb60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  pCSD->Reserved3 = 0;
 800bb62:	2500      	movs	r5, #0
  pCSD->Reserved4 = 1;
 800bb64:	2401      	movs	r4, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bb66:	f3c2 3280 	ubfx	r2, r2, #14, #1
  return HAL_OK;
 800bb6a:	4628      	mov	r0, r5
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bb6c:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bb6e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800bb70:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 800bb74:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bb76:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800bb78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bb7c:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bb7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bb80:	0fd2      	lsrs	r2, r2, #31
 800bb82:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bb84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bb86:	f3c2 7241 	ubfx	r2, r2, #29, #2
 800bb8a:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bb8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bb8e:	f3c2 6282 	ubfx	r2, r2, #26, #3
 800bb92:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bb94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bb96:	f3c2 5283 	ubfx	r2, r2, #22, #4
 800bb9a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bb9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bb9e:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800bba2:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 800bba6:	f881 5021 	strb.w	r5, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bbaa:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 800bbae:	4022      	ands	r2, r4
 800bbb0:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bbb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bbb6:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800bbba:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bbbe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bbc0:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800bbc4:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bbc8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bbca:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800bbce:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bbd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bbd4:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800bbd8:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bbdc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bbde:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800bbe2:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bbe6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bbe8:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800bbec:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bbf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbf2:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800bbf6:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800bbfa:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
}
 800bbfe:	bc30      	pop	{r4, r5}
 800bc00:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bc02:	2a01      	cmp	r2, #1
 800bc04:	d00c      	beq.n	800bc20 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc06:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 800bc08:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc0a:	4c0e      	ldr	r4, [pc, #56]	; (800bc44 <HAL_SD_GetCardCSD+0x1b8>)
    return HAL_ERROR;
 800bc0c:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc0e:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bc10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bc16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bc18:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 800bc1c:	bc30      	pop	{r4, r5}
 800bc1e:	4770      	bx	lr
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bc20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.BlockSize = 512U;
 800bc22:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bc26:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 800bc2a:	0412      	lsls	r2, r2, #16
 800bc2c:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800bc30:	4322      	orrs	r2, r4
 800bc32:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bc34:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 800bc36:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bc38:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bc3a:	6598      	str	r0, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bc3c:	0292      	lsls	r2, r2, #10
 800bc3e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bc40:	655a      	str	r2, [r3, #84]	; 0x54
 800bc42:	e78d      	b.n	800bb60 <HAL_SD_GetCardCSD+0xd4>
 800bc44:	1fe00fff 	.word	0x1fe00fff

0800bc48 <HAL_SD_InitCard>:
{
 800bc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bc4c:	6982      	ldr	r2, [r0, #24]
{
 800bc4e:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bc50:	2300      	movs	r3, #0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800bc52:	21fa      	movs	r1, #250	; 0xfa
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bc54:	2a02      	cmp	r2, #2
{
 800bc56:	4604      	mov	r4, r0
 800bc58:	6805      	ldr	r5, [r0, #0]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800bc5a:	910b      	str	r1, [sp, #44]	; 0x2c
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bc5c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bc60:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bc64:	d104      	bne.n	800bc70 <HAL_SD_InitCard+0x28>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800bc66:	682b      	ldr	r3, [r5, #0]
 800bc68:	f043 0310 	orr.w	r3, r3, #16
 800bc6c:	602b      	str	r3, [r5, #0]
 800bc6e:	6805      	ldr	r5, [r0, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 800bc70:	aa0a      	add	r2, sp, #40	; 0x28
 800bc72:	ab07      	add	r3, sp, #28
 800bc74:	ca07      	ldmia	r2, {r0, r1, r2}
 800bc76:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc7e:	f002 f94d 	bl	800df1c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bc82:	6820      	ldr	r0, [r4, #0]
 800bc84:	f002 f9b4 	bl	800dff0 <SDMMC_PowerState_ON>
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 800bc88:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bc8c:	f7fe fb92 	bl	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800bc90:	4ba3      	ldr	r3, [pc, #652]	; (800bf20 <HAL_SD_InitCard+0x2d8>)
 800bc92:	fba3 3000 	umull	r3, r0, r3, r0
  if(sdmmc_clk != 0U)
 800bc96:	0940      	lsrs	r0, r0, #5
 800bc98:	d019      	beq.n	800bcce <HAL_SD_InitCard+0x86>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800bc9a:	4ba2      	ldr	r3, [pc, #648]	; (800bf24 <HAL_SD_InitCard+0x2dc>)
 800bc9c:	fbb3 f0f0 	udiv	r0, r3, r0
 800bca0:	3001      	adds	r0, #1
 800bca2:	f7f4 ffd5 	bl	8000c50 <HAL_Delay>
  __IO uint32_t count = 0U;
 800bca6:	2300      	movs	r3, #0
 800bca8:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 800bcaa:	f7f4 ffcb 	bl	8000c44 <HAL_GetTick>
 800bcae:	4680      	mov	r8, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bcb0:	6820      	ldr	r0, [r4, #0]
 800bcb2:	f002 fc13 	bl	800e4dc <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	b168      	cbz	r0, 800bcd6 <HAL_SD_InitCard+0x8e>
    hsd->State = HAL_SD_STATE_READY;
 800bcba:	2601      	movs	r6, #1
 800bcbc:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bcc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bcc2:	431d      	orrs	r5, r3
 800bcc4:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	b018      	add	sp, #96	; 0x60
 800bcca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 800bcce:	2002      	movs	r0, #2
 800bcd0:	f7f4 ffbe 	bl	8000c50 <HAL_Delay>
 800bcd4:	e7e7      	b.n	800bca6 <HAL_SD_InitCard+0x5e>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bcd6:	6820      	ldr	r0, [r4, #0]
 800bcd8:	f002 fc2e 	bl	800e538 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d179      	bne.n	800bdd4 <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bce0:	2301      	movs	r3, #1
 800bce2:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bce4:	2100      	movs	r1, #0
 800bce6:	6820      	ldr	r0, [r4, #0]
 800bce8:	f002 fc66 	bl	800e5b8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcec:	bb08      	cbnz	r0, 800bd32 <HAL_SD_InitCard+0xea>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bcee:	9b06      	ldr	r3, [sp, #24]
 800bcf0:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800bcf4:	42b3      	cmp	r3, r6
 800bcf6:	f200 8109 	bhi.w	800bf0c <HAL_SD_InitCard+0x2c4>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bcfa:	4f8b      	ldr	r7, [pc, #556]	; (800bf28 <HAL_SD_InitCard+0x2e0>)
 800bcfc:	e00c      	b.n	800bd18 <HAL_SD_InitCard+0xd0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bcfe:	4601      	mov	r1, r0
 800bd00:	6820      	ldr	r0, [r4, #0]
 800bd02:	f002 f981 	bl	800e008 <SDMMC_GetResponse>
    count++;
 800bd06:	9b06      	ldr	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bd08:	1e02      	subs	r2, r0, #0
    count++;
 800bd0a:	f103 0301 	add.w	r3, r3, #1
 800bd0e:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bd10:	9b06      	ldr	r3, [sp, #24]
 800bd12:	db11      	blt.n	800bd38 <HAL_SD_InitCard+0xf0>
 800bd14:	42b3      	cmp	r3, r6
 800bd16:	d80f      	bhi.n	800bd38 <HAL_SD_InitCard+0xf0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bd18:	2100      	movs	r1, #0
 800bd1a:	6820      	ldr	r0, [r4, #0]
 800bd1c:	f002 fc4c 	bl	800e5b8 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bd20:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd22:	4605      	mov	r5, r0
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d1c8      	bne.n	800bcba <HAL_SD_InitCard+0x72>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bd28:	6820      	ldr	r0, [r4, #0]
 800bd2a:	f002 fc89 	bl	800e640 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d0e5      	beq.n	800bcfe <HAL_SD_InitCard+0xb6>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd32:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800bd36:	e7c0      	b.n	800bcba <HAL_SD_InitCard+0x72>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bd38:	9906      	ldr	r1, [sp, #24]
 800bd3a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800bd3e:	4299      	cmp	r1, r3
 800bd40:	f200 809d 	bhi.w	800be7e <HAL_SD_InitCard+0x236>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bd44:	0057      	lsls	r7, r2, #1
 800bd46:	6820      	ldr	r0, [r4, #0]
 800bd48:	d504      	bpl.n	800bd54 <HAL_SD_InitCard+0x10c>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bd4a:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bd4c:	2101      	movs	r1, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bd4e:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bd50:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bd52:	d051      	beq.n	800bdf8 <HAL_SD_InitCard+0x1b0>
  uint16_t sd_rca = 1U;
 800bd54:	2301      	movs	r3, #1
 800bd56:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800bd5a:	f002 f951 	bl	800e000 <SDMMC_GetPowerState>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d044      	beq.n	800bdec <HAL_SD_InitCard+0x1a4>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bd62:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bd64:	6823      	ldr	r3, [r4, #0]
 800bd66:	2a03      	cmp	r2, #3
 800bd68:	d125      	bne.n	800bdb6 <HAL_SD_InitCard+0x16e>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	2104      	movs	r1, #4
 800bd6e:	f002 f94b 	bl	800e008 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bd72:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bd74:	0d03      	lsrs	r3, r0, #20
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bd76:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bd78:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bd7a:	f7ff fe87 	bl	800ba8c <HAL_SD_GetCardCSD>
 800bd7e:	4606      	mov	r6, r0
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d136      	bne.n	800bdf2 <HAL_SD_InitCard+0x1aa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bd84:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800bd86:	4603      	mov	r3, r0
 800bd88:	6820      	ldr	r0, [r4, #0]
 800bd8a:	0412      	lsls	r2, r2, #16
 800bd8c:	f002 fb62 	bl	800e454 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd90:	b9b0      	cbnz	r0, 800bdc0 <HAL_SD_InitCard+0x178>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bd92:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bd96:	6820      	ldr	r0, [r4, #0]
 800bd98:	f002 f9a4 	bl	800e0e4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d092      	beq.n	800bcc6 <HAL_SD_InitCard+0x7e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bda0:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800bda2:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bda4:	4961      	ldr	r1, [pc, #388]	; (800bf2c <HAL_SD_InitCard+0x2e4>)
    return HAL_ERROR;
 800bda6:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bda8:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bdaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bdac:	4318      	orrs	r0, r3
 800bdae:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bdb0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 800bdb4:	e787      	b.n	800bcc6 <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f002 fcfe 	bl	800e7b8 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d061      	beq.n	800be84 <HAL_SD_InitCard+0x23c>
    hsd->State = HAL_SD_STATE_READY;
 800bdc0:	2601      	movs	r6, #1
 800bdc2:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bdc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bdc8:	4308      	orrs	r0, r1
 800bdca:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800bdcc:	4630      	mov	r0, r6
 800bdce:	b018      	add	sp, #96	; 0x60
 800bdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bdd4:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bdd6:	6820      	ldr	r0, [r4, #0]
 800bdd8:	f002 fb80 	bl	800e4dc <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bddc:	4605      	mov	r5, r0
 800bdde:	2800      	cmp	r0, #0
 800bde0:	f47f af6b 	bne.w	800bcba <HAL_SD_InitCard+0x72>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bde4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d181      	bne.n	800bcee <HAL_SD_InitCard+0xa6>
 800bdea:	e77b      	b.n	800bce4 <HAL_SD_InitCard+0x9c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bdec:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800bdf0:	e7e6      	b.n	800bdc0 <HAL_SD_InitCard+0x178>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bdf2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800bdf6:	e7e3      	b.n	800bdc0 <HAL_SD_InitCard+0x178>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800bdf8:	01d6      	lsls	r6, r2, #7
 800bdfa:	d5ab      	bpl.n	800bd54 <HAL_SD_InitCard+0x10c>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bdfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be00:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800be02:	6803      	ldr	r3, [r0, #0]
 800be04:	f043 0308 	orr.w	r3, r3, #8
 800be08:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800be0a:	6820      	ldr	r0, [r4, #0]
 800be0c:	f002 fe24 	bl	800ea58 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800be10:	4605      	mov	r5, r0
 800be12:	b130      	cbz	r0, 800be22 <HAL_SD_InitCard+0x1da>
 800be14:	e751      	b.n	800bcba <HAL_SD_InitCard+0x72>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800be16:	f7f4 ff15 	bl	8000c44 <HAL_GetTick>
 800be1a:	eba0 0008 	sub.w	r0, r0, r8
 800be1e:	3001      	adds	r0, #1
 800be20:	d079      	beq.n	800bf16 <HAL_SD_InitCard+0x2ce>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800be22:	6823      	ldr	r3, [r4, #0]
 800be24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be26:	0155      	lsls	r5, r2, #5
 800be28:	d5f5      	bpl.n	800be16 <HAL_SD_InitCard+0x1ce>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800be2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800be2e:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800be30:	6823      	ldr	r3, [r4, #0]
 800be32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be34:	02d8      	lsls	r0, r3, #11
 800be36:	f57f af7c 	bpl.w	800bd32 <HAL_SD_InitCard+0xea>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800be3a:	2001      	movs	r0, #1
 800be3c:	f7ff fe24 	bl	800ba88 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800be40:	6822      	ldr	r2, [r4, #0]
 800be42:	6813      	ldr	r3, [r2, #0]
 800be44:	f043 0304 	orr.w	r3, r3, #4
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	e005      	b.n	800be58 <HAL_SD_InitCard+0x210>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800be4c:	f7f4 fefa 	bl	8000c44 <HAL_GetTick>
 800be50:	eba0 0008 	sub.w	r0, r0, r8
 800be54:	3001      	adds	r0, #1
 800be56:	d05e      	beq.n	800bf16 <HAL_SD_InitCard+0x2ce>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800be58:	6823      	ldr	r3, [r4, #0]
 800be5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be5c:	0191      	lsls	r1, r2, #6
 800be5e:	d5f5      	bpl.n	800be4c <HAL_SD_InitCard+0x204>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800be60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800be64:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800be66:	6823      	ldr	r3, [r4, #0]
 800be68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be6a:	02d2      	lsls	r2, r2, #11
 800be6c:	d407      	bmi.n	800be7e <HAL_SD_InitCard+0x236>
          hsd->Instance->POWER = 0x13U;
 800be6e:	2113      	movs	r1, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800be70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
          hsd->Instance->POWER = 0x13U;
 800be74:	6019      	str	r1, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	639a      	str	r2, [r3, #56]	; 0x38
 800be7a:	6820      	ldr	r0, [r4, #0]
 800be7c:	e76a      	b.n	800bd54 <HAL_SD_InitCard+0x10c>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800be7e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800be82:	e71a      	b.n	800bcba <HAL_SD_InitCard+0x72>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800be84:	4601      	mov	r1, r0
 800be86:	6820      	ldr	r0, [r4, #0]
 800be88:	f002 f8be 	bl	800e008 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800be8c:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800be8e:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800be90:	6820      	ldr	r0, [r4, #0]
 800be92:	f002 f8b9 	bl	800e008 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800be96:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800be98:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800be9a:	6820      	ldr	r0, [r4, #0]
 800be9c:	f002 f8b4 	bl	800e008 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bea0:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bea2:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bea4:	6820      	ldr	r0, [r4, #0]
 800bea6:	f002 f8af 	bl	800e008 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800beaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800beac:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d034      	beq.n	800bf1c <HAL_SD_InitCard+0x2d4>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800beb2:	f10d 0116 	add.w	r1, sp, #22
 800beb6:	6820      	ldr	r0, [r4, #0]
 800beb8:	f002 fcf2 	bl	800e8a0 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bebc:	2800      	cmp	r0, #0
 800bebe:	f47f af7f 	bne.w	800bdc0 <HAL_SD_InitCard+0x178>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bec2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	2a03      	cmp	r2, #3
 800bec8:	f43f af4f 	beq.w	800bd6a <HAL_SD_InitCard+0x122>
    hsd->SdCard.RelCardAdd = sd_rca;
 800becc:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bed0:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 800bed2:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bed4:	0409      	lsls	r1, r1, #16
 800bed6:	f002 fca9 	bl	800e82c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800beda:	2800      	cmp	r0, #0
 800bedc:	f47f af70 	bne.w	800bdc0 <HAL_SD_InitCard+0x178>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bee0:	4601      	mov	r1, r0
 800bee2:	6820      	ldr	r0, [r4, #0]
 800bee4:	f002 f890 	bl	800e008 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bee8:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800beea:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800beec:	6820      	ldr	r0, [r4, #0]
 800beee:	f002 f88b 	bl	800e008 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bef2:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bef4:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bef6:	6820      	ldr	r0, [r4, #0]
 800bef8:	f002 f886 	bl	800e008 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800befc:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800befe:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bf00:	6820      	ldr	r0, [r4, #0]
 800bf02:	f002 f881 	bl	800e008 <SDMMC_GetResponse>
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	66e0      	str	r0, [r4, #108]	; 0x6c
 800bf0a:	e72e      	b.n	800bd6a <HAL_SD_InitCard+0x122>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bf0c:	9b06      	ldr	r3, [sp, #24]
 800bf0e:	42b3      	cmp	r3, r6
 800bf10:	d8b5      	bhi.n	800be7e <HAL_SD_InitCard+0x236>
 800bf12:	6820      	ldr	r0, [r4, #0]
 800bf14:	e71e      	b.n	800bd54 <HAL_SD_InitCard+0x10c>
            return HAL_SD_ERROR_TIMEOUT;
 800bf16:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800bf1a:	e6ce      	b.n	800bcba <HAL_SD_InitCard+0x72>
 800bf1c:	6823      	ldr	r3, [r4, #0]
 800bf1e:	e724      	b.n	800bd6a <HAL_SD_InitCard+0x122>
 800bf20:	10624dd3 	.word	0x10624dd3
 800bf24:	00012110 	.word	0x00012110
 800bf28:	c1100000 	.word	0xc1100000
 800bf2c:	1fe00fff 	.word	0x1fe00fff

0800bf30 <HAL_SD_GetCardStatus>:
{
 800bf30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf34:	4604      	mov	r4, r0
 800bf36:	b097      	sub	sp, #92	; 0x5c
 800bf38:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800bf3a:	f7f4 fe83 	bl	8000c44 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bf3e:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800bf40:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bf42:	6820      	ldr	r0, [r4, #0]
 800bf44:	f002 f860 	bl	800e008 <SDMMC_GetResponse>
 800bf48:	0187      	lsls	r7, r0, #6
 800bf4a:	d422      	bmi.n	800bf92 <HAL_SD_GetCardStatus+0x62>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800bf4c:	2140      	movs	r1, #64	; 0x40
 800bf4e:	6820      	ldr	r0, [r4, #0]
 800bf50:	f002 f8c8 	bl	800e0e4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf54:	b308      	cbz	r0, 800bf9a <HAL_SD_GetCardStatus+0x6a>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bf56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bf58:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf5a:	6823      	ldr	r3, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf5c:	495b      	ldr	r1, [pc, #364]	; (800c0cc <HAL_SD_GetCardStatus+0x19c>)
    hsd->State = HAL_SD_STATE_READY;
 800bf5e:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf60:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800bf62:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 800bf64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bf66:	4318      	orrs	r0, r3
 800bf68:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bf6a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bf6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bf72:	6820      	ldr	r0, [r4, #0]
 800bf74:	f002 f8b6 	bl	800e0e4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf78:	b138      	cbz	r0, 800bf8a <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 800bf7a:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf7c:	6822      	ldr	r2, [r4, #0]
 800bf7e:	4953      	ldr	r1, [pc, #332]	; (800c0cc <HAL_SD_GetCardStatus+0x19c>)
    status = HAL_ERROR;
 800bf80:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf82:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800bf84:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bf86:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	b017      	add	sp, #92	; 0x5c
 800bf8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf92:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bf94:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bf98:	e7e0      	b.n	800bf5c <HAL_SD_GetCardStatus+0x2c>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bf9a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bf9c:	6820      	ldr	r0, [r4, #0]
 800bf9e:	0409      	lsls	r1, r1, #16
 800bfa0:	f002 fb0a 	bl	800e5b8 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d1d6      	bne.n	800bf56 <HAL_SD_GetCardStatus+0x26>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bfa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 64U;
 800bfac:	2340      	movs	r3, #64	; 0x40
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800bfae:	2160      	movs	r1, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bfb0:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bfb2:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bfb4:	2202      	movs	r2, #2
  config.DataLength    = 64U;
 800bfb6:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bfb8:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800bfba:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bfbc:	4669      	mov	r1, sp
 800bfbe:	6820      	ldr	r0, [r4, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bfc0:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bfc2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bfc4:	f002 f830 	bl	800e028 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800bfc8:	6820      	ldr	r0, [r4, #0]
 800bfca:	f002 fd01 	bl	800e9d0 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d1c1      	bne.n	800bf56 <HAL_SD_GetCardStatus+0x26>
  uint32_t *pData = pSDstatus;
 800bfd2:	af06      	add	r7, sp, #24
 800bfd4:	e005      	b.n	800bfe2 <HAL_SD_GetCardStatus+0xb2>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bfd6:	f7f4 fe35 	bl	8000c44 <HAL_GetTick>
 800bfda:	eba0 0008 	sub.w	r0, r0, r8
 800bfde:	3001      	adds	r0, #1
 800bfe0:	d013      	beq.n	800c00a <HAL_SD_GetCardStatus+0xda>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bfe2:	6823      	ldr	r3, [r4, #0]
 800bfe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfe6:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bfea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bfec:	d110      	bne.n	800c010 <HAL_SD_GetCardStatus+0xe0>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bfee:	0416      	lsls	r6, r2, #16
 800bff0:	d5f1      	bpl.n	800bfd6 <HAL_SD_GetCardStatus+0xa6>
 800bff2:	f107 0620 	add.w	r6, r7, #32
 800bff6:	e000      	b.n	800bffa <HAL_SD_GetCardStatus+0xca>
 800bff8:	6823      	ldr	r3, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bffa:	4618      	mov	r0, r3
 800bffc:	f001 ffee 	bl	800dfdc <SDMMC_ReadFIFO>
 800c000:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 800c004:	42b7      	cmp	r7, r6
 800c006:	d1f7      	bne.n	800bff8 <HAL_SD_GetCardStatus+0xc8>
 800c008:	e7e5      	b.n	800bfd6 <HAL_SD_GetCardStatus+0xa6>
      return HAL_SD_ERROR_TIMEOUT;
 800c00a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c00e:	e7a4      	b.n	800bf5a <HAL_SD_GetCardStatus+0x2a>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c010:	0710      	lsls	r0, r2, #28
 800c012:	d455      	bmi.n	800c0c0 <HAL_SD_GetCardStatus+0x190>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c016:	0791      	lsls	r1, r2, #30
 800c018:	d454      	bmi.n	800c0c4 <HAL_SD_GetCardStatus+0x194>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c01a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c01c:	0692      	lsls	r2, r2, #26
 800c01e:	d50b      	bpl.n	800c038 <HAL_SD_GetCardStatus+0x108>
 800c020:	e052      	b.n	800c0c8 <HAL_SD_GetCardStatus+0x198>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c022:	f001 ffdb 	bl	800dfdc <SDMMC_ReadFIFO>
 800c026:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c02a:	f7f4 fe0b 	bl	8000c44 <HAL_GetTick>
 800c02e:	eba0 0008 	sub.w	r0, r0, r8
 800c032:	3001      	adds	r0, #1
 800c034:	d0e9      	beq.n	800c00a <HAL_SD_GetCardStatus+0xda>
 800c036:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800c038:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c03a:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800c03c:	f416 5680 	ands.w	r6, r6, #4096	; 0x1000
 800c040:	d1ef      	bne.n	800c022 <HAL_SD_GetCardStatus+0xf2>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c042:	9f06      	ldr	r7, [sp, #24]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c044:	9808      	ldr	r0, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c046:	0a39      	lsrs	r1, r7, #8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c048:	f3c7 1e81 	ubfx	lr, r7, #6, #2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c04c:	ea4f 4810 	mov.w	r8, r0, lsr #16
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c050:	f3c7 1c40 	ubfx	ip, r7, #5, #1
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c054:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c058:	9a09      	ldr	r2, [sp, #36]	; 0x24
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c05a:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c05e:	f028 07ff 	bic.w	r7, r8, #255	; 0xff
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c062:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800c0d0 <HAL_SD_GetCardStatus+0x1a0>
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c066:	fa5f f982 	uxtb.w	r9, r2
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c06a:	b289      	uxth	r1, r1
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c06c:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c070:	fa5f f880 	uxtb.w	r8, r0
 800c074:	9b07      	ldr	r3, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c076:	ea47 0709 	orr.w	r7, r7, r9
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c07a:	f885 e000 	strb.w	lr, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c07e:	f885 c001 	strb.w	ip, [r5, #1]
 800c082:	fa93 fe83 	rev.w	lr, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c086:	8069      	strh	r1, [r5, #2]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c088:	f3c0 5303 	ubfx	r3, r0, #20, #4
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c08c:	f3c0 2107 	ubfx	r1, r0, #8, #8
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c090:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c094:	f3c2 2c85 	ubfx	ip, r2, #10, #6
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c098:	f885 8008 	strb.w	r8, [r5, #8]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c09c:	f3c2 2001 	ubfx	r0, r2, #8, #2
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c0a0:	7269      	strb	r1, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c0a2:	72ab      	strb	r3, [r5, #10]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c0a4:	f3c2 1103 	ubfx	r1, r2, #4, #4
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c0a8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c0ac:	f002 020f 	and.w	r2, r2, #15
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c0b0:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c0b2:	f885 c00e 	strb.w	ip, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c0b6:	73e8      	strb	r0, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c0b8:	7429      	strb	r1, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c0ba:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c0bc:	74ab      	strb	r3, [r5, #18]
 800c0be:	e756      	b.n	800bf6e <HAL_SD_GetCardStatus+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c0c0:	2008      	movs	r0, #8
 800c0c2:	e74b      	b.n	800bf5c <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c0c4:	2002      	movs	r0, #2
 800c0c6:	e749      	b.n	800bf5c <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 800c0c8:	2020      	movs	r0, #32
 800c0ca:	e747      	b.n	800bf5c <HAL_SD_GetCardStatus+0x2c>
 800c0cc:	1fe00fff 	.word	0x1fe00fff
 800c0d0:	18000f3a 	.word	0x18000f3a

0800c0d4 <HAL_SD_GetCardInfo>:
{
 800c0d4:	4603      	mov	r3, r0
}
 800c0d6:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c0d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0da:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c0dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0de:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c0e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0e2:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c0e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0e6:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c0e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0ea:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c0ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0ee:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c0f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0f2:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c0f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0f6:	61cb      	str	r3, [r1, #28]
}
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop

0800c0fc <HAL_SD_ConfigWideBusOperation>:
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800c0fc:	f431 4380 	bics.w	r3, r1, #16384	; 0x4000
{
 800c100:	b570      	push	{r4, r5, r6, lr}
 800c102:	460d      	mov	r5, r1
 800c104:	b08a      	sub	sp, #40	; 0x28
 800c106:	4604      	mov	r4, r0
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800c108:	d002      	beq.n	800c110 <HAL_SD_ConfigWideBusOperation+0x14>
 800c10a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c10e:	d152      	bne.n	800c1b6 <HAL_SD_ConfigWideBusOperation+0xba>
  hsd->State = HAL_SD_STATE_BUSY;
 800c110:	2103      	movs	r1, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c112:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c114:	6823      	ldr	r3, [r4, #0]
 800c116:	428a      	cmp	r2, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800c118:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c11c:	d025      	beq.n	800c16a <HAL_SD_ConfigWideBusOperation+0x6e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c11e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800c122:	d022      	beq.n	800c16a <HAL_SD_ConfigWideBusOperation+0x6e>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c124:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 800c128:	d06b      	beq.n	800c202 <HAL_SD_ConfigWideBusOperation+0x106>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c12a:	2d00      	cmp	r5, #0
 800c12c:	d049      	beq.n	800c1c2 <HAL_SD_ConfigWideBusOperation+0xc6>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c12e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c130:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800c134:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c136:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c138:	b9f2      	cbnz	r2, 800c178 <HAL_SD_ConfigWideBusOperation+0x7c>
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800c13a:	6962      	ldr	r2, [r4, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c13c:	6921      	ldr	r1, [r4, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800c13e:	2a03      	cmp	r2, #3
    Init.BusWide             = WideMode;
 800c140:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c142:	9107      	str	r1, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c144:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 800c148:	e9cd 6004 	strd	r6, r0, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800c14c:	d92a      	bls.n	800c1a4 <HAL_SD_ConfigWideBusOperation+0xa8>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800c14e:	9208      	str	r2, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800c150:	aa0a      	add	r2, sp, #40	; 0x28
 800c152:	ae04      	add	r6, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 800c154:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 800c156:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 800c15a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c15e:	4618      	mov	r0, r3
 800c160:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c164:	f001 feda 	bl	800df1c <SDMMC_Init>
 800c168:	e009      	b.n	800c17e <HAL_SD_ConfigWideBusOperation+0x82>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c16a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c16c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c170:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c172:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c174:	2a00      	cmp	r2, #0
 800c176:	d0e0      	beq.n	800c13a <HAL_SD_ConfigWideBusOperation+0x3e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c178:	4a36      	ldr	r2, [pc, #216]	; (800c254 <HAL_SD_ConfigWideBusOperation+0x158>)
    status = HAL_ERROR;
 800c17a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c17c:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c17e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c182:	6820      	ldr	r0, [r4, #0]
 800c184:	f001 ffae 	bl	800e0e4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c188:	b130      	cbz	r0, 800c198 <HAL_SD_ConfigWideBusOperation+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c18a:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800c18c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c18e:	4a31      	ldr	r2, [pc, #196]	; (800c254 <HAL_SD_ConfigWideBusOperation+0x158>)
 800c190:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c192:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c194:	4318      	orrs	r0, r3
 800c196:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800c198:	2301      	movs	r3, #1
}
 800c19a:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800c19c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800c1a0:	b00a      	add	sp, #40	; 0x28
 800c1a2:	bd70      	pop	{r4, r5, r6, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c1a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c1a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c1aa:	d0d0      	beq.n	800c14e <HAL_SD_ConfigWideBusOperation+0x52>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c1ac:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c1b0:	d034      	beq.n	800c21c <HAL_SD_ConfigWideBusOperation+0x120>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800c1b2:	2204      	movs	r2, #4
 800c1b4:	e7cb      	b.n	800c14e <HAL_SD_ConfigWideBusOperation+0x52>
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800c1b6:	f640 1149 	movw	r1, #2377	; 0x949
 800c1ba:	4827      	ldr	r0, [pc, #156]	; (800c258 <HAL_SD_ConfigWideBusOperation+0x15c>)
 800c1bc:	f007 fd3e 	bl	8013c3c <assert_failed>
 800c1c0:	e7a6      	b.n	800c110 <HAL_SD_ConfigWideBusOperation+0x14>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	4618      	mov	r0, r3
  uint32_t scr[2U] = {0UL, 0UL};
 800c1c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c1ca:	f001 ff1d 	bl	800e008 <SDMMC_GetResponse>
 800c1ce:	0181      	lsls	r1, r0, #6
 800c1d0:	d420      	bmi.n	800c214 <HAL_SD_ConfigWideBusOperation+0x118>
  errorstate = SD_FindSCR(hsd, scr);
 800c1d2:	a904      	add	r1, sp, #16
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f7ff f9f7 	bl	800b5c8 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1da:	b968      	cbnz	r0, 800c1f8 <HAL_SD_ConfigWideBusOperation+0xfc>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c1dc:	9a05      	ldr	r2, [sp, #20]
 800c1de:	6823      	ldr	r3, [r4, #0]
 800c1e0:	03d2      	lsls	r2, r2, #15
 800c1e2:	d534      	bpl.n	800c24e <HAL_SD_ConfigWideBusOperation+0x152>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c1e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	0409      	lsls	r1, r1, #16
 800c1ea:	f002 f9e5 	bl	800e5b8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1ee:	b918      	cbnz	r0, 800c1f8 <HAL_SD_ConfigWideBusOperation+0xfc>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	6820      	ldr	r0, [r4, #0]
 800c1f4:	f002 fa58 	bl	800e6a8 <SDMMC_CmdBusWidth>
 800c1f8:	6823      	ldr	r3, [r4, #0]
      hsd->ErrorCode |= errorstate;
 800c1fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c1fc:	4310      	orrs	r0, r2
 800c1fe:	63a0      	str	r0, [r4, #56]	; 0x38
 800c200:	e7b7      	b.n	800c172 <HAL_SD_ConfigWideBusOperation+0x76>
  uint32_t scr[2U] = {0UL, 0UL};
 800c202:	2200      	movs	r2, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c204:	4618      	mov	r0, r3
 800c206:	4611      	mov	r1, r2
  uint32_t scr[2U] = {0UL, 0UL};
 800c208:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c20c:	f001 fefc 	bl	800e008 <SDMMC_GetResponse>
 800c210:	0186      	lsls	r6, r0, #6
 800c212:	d506      	bpl.n	800c222 <HAL_SD_ConfigWideBusOperation+0x126>
 800c214:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c216:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c21a:	e7ee      	b.n	800c1fa <HAL_SD_ConfigWideBusOperation+0xfe>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800c21c:	2202      	movs	r2, #2
 800c21e:	9208      	str	r2, [sp, #32]
 800c220:	e796      	b.n	800c150 <HAL_SD_ConfigWideBusOperation+0x54>
  errorstate = SD_FindSCR(hsd, scr);
 800c222:	a904      	add	r1, sp, #16
 800c224:	4620      	mov	r0, r4
 800c226:	f7ff f9cf 	bl	800b5c8 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d1e4      	bne.n	800c1f8 <HAL_SD_ConfigWideBusOperation+0xfc>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c22e:	9a05      	ldr	r2, [sp, #20]
 800c230:	6823      	ldr	r3, [r4, #0]
 800c232:	0350      	lsls	r0, r2, #13
 800c234:	d50b      	bpl.n	800c24e <HAL_SD_ConfigWideBusOperation+0x152>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c236:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c238:	4618      	mov	r0, r3
 800c23a:	0409      	lsls	r1, r1, #16
 800c23c:	f002 f9bc 	bl	800e5b8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c240:	2800      	cmp	r0, #0
 800c242:	d1d9      	bne.n	800c1f8 <HAL_SD_ConfigWideBusOperation+0xfc>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c244:	2102      	movs	r1, #2
 800c246:	6820      	ldr	r0, [r4, #0]
 800c248:	f002 fa2e 	bl	800e6a8 <SDMMC_CmdBusWidth>
 800c24c:	e7d4      	b.n	800c1f8 <HAL_SD_ConfigWideBusOperation+0xfc>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c24e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800c252:	e7d2      	b.n	800c1fa <HAL_SD_ConfigWideBusOperation+0xfe>
 800c254:	1fe00fff 	.word	0x1fe00fff
 800c258:	0802a538 	.word	0x0802a538

0800c25c <HAL_SD_Init>:
{
 800c25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c25e:	b087      	sub	sp, #28
  if(hsd == NULL)
 800c260:	2800      	cmp	r0, #0
 800c262:	d038      	beq.n	800c2d6 <HAL_SD_Init+0x7a>
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 800c264:	6803      	ldr	r3, [r0, #0]
 800c266:	4604      	mov	r4, r0
 800c268:	4a5c      	ldr	r2, [pc, #368]	; (800c3dc <HAL_SD_Init+0x180>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d007      	beq.n	800c27e <HAL_SD_Init+0x22>
 800c26e:	4a5c      	ldr	r2, [pc, #368]	; (800c3e0 <HAL_SD_Init+0x184>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d004      	beq.n	800c27e <HAL_SD_Init+0x22>
 800c274:	f240 115b 	movw	r1, #347	; 0x15b
 800c278:	485a      	ldr	r0, [pc, #360]	; (800c3e4 <HAL_SD_Init+0x188>)
 800c27a:	f007 fcdf 	bl	8013c3c <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 800c27e:	6863      	ldr	r3, [r4, #4]
 800c280:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800c284:	d17a      	bne.n	800c37c <HAL_SD_Init+0x120>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 800c286:	68a3      	ldr	r3, [r4, #8]
 800c288:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800c28c:	d16c      	bne.n	800c368 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800c28e:	68e3      	ldr	r3, [r4, #12]
 800c290:	f433 4280 	bics.w	r2, r3, #16384	; 0x4000
 800c294:	d003      	beq.n	800c29e <HAL_SD_Init+0x42>
 800c296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c29a:	f040 8084 	bne.w	800c3a6 <HAL_SD_Init+0x14a>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 800c29e:	6923      	ldr	r3, [r4, #16]
 800c2a0:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800c2a4:	d175      	bne.n	800c392 <HAL_SD_Init+0x136>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 800c2a6:	6963      	ldr	r3, [r4, #20]
 800c2a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2ac:	d250      	bcs.n	800c350 <HAL_SD_Init+0xf4>
  if(hsd->State == HAL_SD_STATE_RESET)
 800c2ae:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800c2b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c2b6:	b93b      	cbnz	r3, 800c2c8 <HAL_SD_Init+0x6c>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800c2b8:	69a3      	ldr	r3, [r4, #24]
    hsd->Lock = HAL_UNLOCKED;
 800c2ba:	7722      	strb	r2, [r4, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800c2bc:	b90b      	cbnz	r3, 800c2c2 <HAL_SD_Init+0x66>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800c2be:	2302      	movs	r3, #2
 800c2c0:	61a3      	str	r3, [r4, #24]
    HAL_SD_MspInit(hsd);
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f008 fb82 	bl	80149cc <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800c2c8:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c2ca:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800c2cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c2d0:	f7ff fcba 	bl	800bc48 <HAL_SD_InitCard>
 800c2d4:	b118      	cbz	r0, 800c2de <HAL_SD_Init+0x82>
    return HAL_ERROR;
 800c2d6:	2501      	movs	r5, #1
}
 800c2d8:	4628      	mov	r0, r5
 800c2da:	b007      	add	sp, #28
 800c2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c2de:	a901      	add	r1, sp, #4
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f7ff fe25 	bl	800bf30 <HAL_SD_GetCardStatus>
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	d1f5      	bne.n	800c2d6 <HAL_SD_Init+0x7a>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c2ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 800c2ec:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c2f0:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c2f2:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800c2f6:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c2f8:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c2fa:	d05f      	beq.n	800c3bc <HAL_SD_Init+0x160>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c2fc:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c2fe:	68e1      	ldr	r1, [r4, #12]
 800c300:	4620      	mov	r0, r4
 800c302:	f7ff fefb 	bl	800c0fc <HAL_SD_ConfigWideBusOperation>
 800c306:	4605      	mov	r5, r0
 800c308:	2800      	cmp	r0, #0
 800c30a:	d1e4      	bne.n	800c2d6 <HAL_SD_Init+0x7a>
  tickstart = HAL_GetTick();
 800c30c:	f7f4 fc9a 	bl	8000c44 <HAL_GetTick>
 800c310:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c312:	e007      	b.n	800c324 <HAL_SD_Init+0xc8>
    hsd->ErrorCode |= errorstate;
 800c314:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c316:	431e      	orrs	r6, r3
 800c318:	63a6      	str	r6, [r4, #56]	; 0x38
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800c31a:	f7f4 fc93 	bl	8000c44 <HAL_GetTick>
 800c31e:	1bc0      	subs	r0, r0, r7
 800c320:	3001      	adds	r0, #1
 800c322:	d053      	beq.n	800c3cc <HAL_SD_Init+0x170>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c324:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c326:	6820      	ldr	r0, [r4, #0]
 800c328:	0409      	lsls	r1, r1, #16
 800c32a:	f002 fb0d 	bl	800e948 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c32e:	4606      	mov	r6, r0
 800c330:	2800      	cmp	r0, #0
 800c332:	d1ef      	bne.n	800c314 <HAL_SD_Init+0xb8>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c334:	4601      	mov	r1, r0
 800c336:	6820      	ldr	r0, [r4, #0]
 800c338:	f001 fe66 	bl	800e008 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c33c:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c340:	2804      	cmp	r0, #4
 800c342:	d1ea      	bne.n	800c31a <HAL_SD_Init+0xbe>
  hsd->State = HAL_SD_STATE_READY;
 800c344:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c346:	63a6      	str	r6, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800c348:	6326      	str	r6, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800c34a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800c34e:	e7c3      	b.n	800c2d8 <HAL_SD_Init+0x7c>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 800c350:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c354:	4823      	ldr	r0, [pc, #140]	; (800c3e4 <HAL_SD_Init+0x188>)
 800c356:	f007 fc71 	bl	8013c3c <assert_failed>
  if(hsd->State == HAL_SD_STATE_RESET)
 800c35a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800c35e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1b0      	bne.n	800c2c8 <HAL_SD_Init+0x6c>
 800c366:	e7a7      	b.n	800c2b8 <HAL_SD_Init+0x5c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 800c368:	f240 115d 	movw	r1, #349	; 0x15d
 800c36c:	481d      	ldr	r0, [pc, #116]	; (800c3e4 <HAL_SD_Init+0x188>)
 800c36e:	f007 fc65 	bl	8013c3c <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800c372:	68e3      	ldr	r3, [r4, #12]
 800c374:	f433 4280 	bics.w	r2, r3, #16384	; 0x4000
 800c378:	d18d      	bne.n	800c296 <HAL_SD_Init+0x3a>
 800c37a:	e790      	b.n	800c29e <HAL_SD_Init+0x42>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 800c37c:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800c380:	4818      	ldr	r0, [pc, #96]	; (800c3e4 <HAL_SD_Init+0x188>)
 800c382:	f007 fc5b 	bl	8013c3c <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 800c386:	68a3      	ldr	r3, [r4, #8]
 800c388:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800c38c:	f43f af7f 	beq.w	800c28e <HAL_SD_Init+0x32>
 800c390:	e7ea      	b.n	800c368 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 800c392:	f240 115f 	movw	r1, #351	; 0x15f
 800c396:	4813      	ldr	r0, [pc, #76]	; (800c3e4 <HAL_SD_Init+0x188>)
 800c398:	f007 fc50 	bl	8013c3c <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 800c39c:	6963      	ldr	r3, [r4, #20]
 800c39e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3a2:	d384      	bcc.n	800c2ae <HAL_SD_Init+0x52>
 800c3a4:	e7d4      	b.n	800c350 <HAL_SD_Init+0xf4>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800c3a6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800c3aa:	480e      	ldr	r0, [pc, #56]	; (800c3e4 <HAL_SD_Init+0x188>)
 800c3ac:	f007 fc46 	bl	8013c3c <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 800c3b0:	6923      	ldr	r3, [r4, #16]
 800c3b2:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800c3b6:	f43f af76 	beq.w	800c2a6 <HAL_SD_Init+0x4a>
 800c3ba:	e7ea      	b.n	800c392 <HAL_SD_Init+0x136>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c3bc:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c3be:	bf14      	ite	ne
 800c3c0:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c3c4:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800c3c8:	65e3      	str	r3, [r4, #92]	; 0x5c
 800c3ca:	e798      	b.n	800c2fe <HAL_SD_Init+0xa2>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c3cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 800c3d0:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800c3d2:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c3d4:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800c3d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 800c3da:	e77d      	b.n	800c2d8 <HAL_SD_Init+0x7c>
 800c3dc:	52007000 	.word	0x52007000
 800c3e0:	48022400 	.word	0x48022400
 800c3e4:	0802a538 	.word	0x0802a538

0800c3e8 <HAL_SD_GetCardState>:
{
 800c3e8:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c3ea:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 800c3ec:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c3ee:	6800      	ldr	r0, [r0, #0]
 800c3f0:	0409      	lsls	r1, r1, #16
 800c3f2:	f002 faa9 	bl	800e948 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c3f6:	4601      	mov	r1, r0
 800c3f8:	b120      	cbz	r0, 800c404 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800c3fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	4319      	orrs	r1, r3
 800c400:	63a1      	str	r1, [r4, #56]	; 0x38
}
 800c402:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c404:	6820      	ldr	r0, [r4, #0]
 800c406:	f001 fdff 	bl	800e008 <SDMMC_GetResponse>
 800c40a:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800c40e:	bd10      	pop	{r4, pc}

0800c410 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c410:	b310      	cbz	r0, 800c458 <HAL_SDRAM_Init+0x48>
{
 800c412:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c414:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800c418:	4604      	mov	r4, r0
 800c41a:	460d      	mov	r5, r1
 800c41c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c420:	b1ab      	cbz	r3, 800c44e <HAL_SDRAM_Init+0x3e>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c422:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c424:	1d21      	adds	r1, r4, #4
 800c426:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c428:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c42c:	f001 fb3a 	bl	800daa4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c430:	4629      	mov	r1, r5
 800c432:	e9d4 0200 	ldrd	r0, r2, [r4]
 800c436:	f001 fbf9 	bl	800dc2c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800c43a:	4a08      	ldr	r2, [pc, #32]	; (800c45c <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c43c:	2101      	movs	r1, #1

  return HAL_OK;
 800c43e:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800c440:	6813      	ldr	r3, [r2, #0]
 800c442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c446:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c448:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800c44c:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800c44e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800c452:	f005 feef 	bl	8012234 <HAL_SDRAM_MspInit>
 800c456:	e7e4      	b.n	800c422 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800c458:	2001      	movs	r0, #1
}
 800c45a:	4770      	bx	lr
 800c45c:	52004000 	.word	0x52004000

0800c460 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c460:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800c464:	b2db      	uxtb	r3, r3
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c466:	2b02      	cmp	r3, #2
 800c468:	d015      	beq.n	800c496 <HAL_SDRAM_SendCommand+0x36>
{
 800c46a:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c46c:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
 800c470:	2c01      	cmp	r4, #1
 800c472:	d001      	beq.n	800c478 <HAL_SDRAM_SendCommand+0x18>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800c474:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800c476:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c478:	2302      	movs	r3, #2
 800c47a:	4605      	mov	r5, r0
 800c47c:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c47e:	6800      	ldr	r0, [r0, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c480:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c484:	f001 fc7a 	bl	800dd7c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c488:	6833      	ldr	r3, [r6, #0]
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	d005      	beq.n	800c49a <HAL_SDRAM_SendCommand+0x3a>
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c48e:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  return HAL_OK;
 800c492:	2000      	movs	r0, #0
}
 800c494:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800c496:	4618      	mov	r0, r3
}
 800c498:	4770      	bx	lr
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c49a:	2305      	movs	r3, #5
  return HAL_OK;
 800c49c:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c49e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 800c4a2:	bd70      	pop	{r4, r5, r6, pc}

0800c4a4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c4a4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c4a6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d006      	beq.n	800c4be <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c4b0:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800c4b4:	b2ed      	uxtb	r5, r5
 800c4b6:	2d01      	cmp	r5, #1
 800c4b8:	d003      	beq.n	800c4c2 <HAL_SDRAM_ProgramRefreshRate+0x1e>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800c4ba:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800c4bc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800c4be:	4618      	mov	r0, r3
}
 800c4c0:	bd38      	pop	{r3, r4, r5, pc}
 800c4c2:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c4c4:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c4c6:	6800      	ldr	r0, [r0, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c4c8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c4cc:	f001 fca0 	bl	800de10 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c4d0:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  return HAL_OK;
 800c4d4:	2000      	movs	r0, #0
}
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}

0800c4d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4dc:	6a02      	ldr	r2, [r0, #32]
{
 800c4de:	460f      	mov	r7, r1
 800c4e0:	4604      	mov	r4, r0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c4e2:	4b3b      	ldr	r3, [pc, #236]	; (800c5d0 <TIM_OC1_SetConfig+0xf8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4e4:	f022 0201 	bic.w	r2, r2, #1
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c4e8:	493a      	ldr	r1, [pc, #232]	; (800c5d4 <TIM_OC1_SetConfig+0xfc>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4ea:	6202      	str	r2, [r0, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c4ec:	428c      	cmp	r4, r1
  tmpccer = TIMx->CCER;
 800c4ee:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c4f0:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c4f4:	6980      	ldr	r0, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800c4f6:	f025 0502 	bic.w	r5, r5, #2
  tmpccer |= OC_Config->OCPolarity;
 800c4fa:	68ba      	ldr	r2, [r7, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c4fc:	ea03 0300 	and.w	r3, r3, r0
  tmpccmrx |= OC_Config->OCMode;
 800c500:	683e      	ldr	r6, [r7, #0]
  tmpccer |= OC_Config->OCPolarity;
 800c502:	ea45 0502 	orr.w	r5, r5, r2
  tmpccmrx |= OC_Config->OCMode;
 800c506:	ea46 0603 	orr.w	r6, r6, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c50a:	d03a      	beq.n	800c582 <TIM_OC1_SetConfig+0xaa>
 800c50c:	4b32      	ldr	r3, [pc, #200]	; (800c5d8 <TIM_OC1_SetConfig+0x100>)
 800c50e:	429c      	cmp	r4, r3
 800c510:	d037      	beq.n	800c582 <TIM_OC1_SetConfig+0xaa>
 800c512:	4a32      	ldr	r2, [pc, #200]	; (800c5dc <TIM_OC1_SetConfig+0x104>)
 800c514:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c518:	429c      	cmp	r4, r3
 800c51a:	bf18      	it	ne
 800c51c:	4294      	cmpne	r4, r2
 800c51e:	d003      	beq.n	800c528 <TIM_OC1_SetConfig+0x50>
 800c520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c524:	429c      	cmp	r4, r3
 800c526:	d144      	bne.n	800c5b2 <TIM_OC1_SetConfig+0xda>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f025 0508 	bic.w	r5, r5, #8
 800c52e:	f033 0208 	bics.w	r2, r3, #8
 800c532:	d02c      	beq.n	800c58e <TIM_OC1_SetConfig+0xb6>
 800c534:	f641 0106 	movw	r1, #6150	; 0x1806
 800c538:	4829      	ldr	r0, [pc, #164]	; (800c5e0 <TIM_OC1_SetConfig+0x108>)
 800c53a:	f007 fb7f 	bl	8013c3c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c53e:	68fb      	ldr	r3, [r7, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c540:	4a26      	ldr	r2, [pc, #152]	; (800c5dc <TIM_OC1_SetConfig+0x104>)
    tmpccer |= OC_Config->OCNPolarity;
 800c542:	431d      	orrs	r5, r3
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c544:	4b27      	ldr	r3, [pc, #156]	; (800c5e4 <TIM_OC1_SetConfig+0x10c>)
 800c546:	429c      	cmp	r4, r3
 800c548:	bf18      	it	ne
 800c54a:	4294      	cmpne	r4, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 800c54c:	f025 0504 	bic.w	r5, r5, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c550:	d020      	beq.n	800c594 <TIM_OC1_SetConfig+0xbc>
 800c552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c556:	429c      	cmp	r4, r3
 800c558:	d12b      	bne.n	800c5b2 <TIM_OC1_SetConfig+0xda>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800c560:	d01c      	beq.n	800c59c <TIM_OC1_SetConfig+0xc4>
 800c562:	f641 0113 	movw	r1, #6163	; 0x1813
 800c566:	481e      	ldr	r0, [pc, #120]	; (800c5e0 <TIM_OC1_SetConfig+0x108>)
 800c568:	f007 fb68 	bl	8013c3c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c572:	d017      	beq.n	800c5a4 <TIM_OC1_SetConfig+0xcc>
 800c574:	f641 0114 	movw	r1, #6164	; 0x1814
 800c578:	4819      	ldr	r0, [pc, #100]	; (800c5e0 <TIM_OC1_SetConfig+0x108>)
 800c57a:	f007 fb5f 	bl	8013c3c <assert_failed>
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	e010      	b.n	800c5a4 <TIM_OC1_SetConfig+0xcc>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f025 0508 	bic.w	r5, r5, #8
 800c588:	f033 0208 	bics.w	r2, r3, #8
 800c58c:	d119      	bne.n	800c5c2 <TIM_OC1_SetConfig+0xea>
    tmpccer |= OC_Config->OCNPolarity;
 800c58e:	431d      	orrs	r5, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 800c590:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800c59a:	d1e2      	bne.n	800c562 <TIM_OC1_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c5a2:	d1e7      	bne.n	800c574 <TIM_OC1_SetConfig+0x9c>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c5a4:	f428 7840 	bic.w	r8, r8, #768	; 0x300
 800c5a8:	69ba      	ldr	r2, [r7, #24]
 800c5aa:	ea48 0802 	orr.w	r8, r8, r2
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c5ae:	ea48 0803 	orr.w	r8, r8, r3
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5b2:	f8c4 8004 	str.w	r8, [r4, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5b6:	61a6      	str	r6, [r4, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6363      	str	r3, [r4, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5bc:	6225      	str	r5, [r4, #32]
}
 800c5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c5c2:	f641 0106 	movw	r1, #6150	; 0x1806
 800c5c6:	4806      	ldr	r0, [pc, #24]	; (800c5e0 <TIM_OC1_SetConfig+0x108>)
 800c5c8:	f007 fb38 	bl	8013c3c <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	e7de      	b.n	800c58e <TIM_OC1_SetConfig+0xb6>
 800c5d0:	fffeff8c 	.word	0xfffeff8c
 800c5d4:	40010000 	.word	0x40010000
 800c5d8:	40010400 	.word	0x40010400
 800c5dc:	40014000 	.word	0x40014000
 800c5e0:	0802a570 	.word	0x0802a570
 800c5e4:	40014400 	.word	0x40014400

0800c5e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c5ec:	6a03      	ldr	r3, [r0, #32]
{
 800c5ee:	460f      	mov	r7, r1
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c5f0:	4931      	ldr	r1, [pc, #196]	; (800c6b8 <TIM_OC3_SetConfig+0xd0>)
{
 800c5f2:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c5f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c5f8:	4288      	cmp	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c5fa:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800c5fc:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c5fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800c602:	69c6      	ldr	r6, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800c604:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c608:	68ba      	ldr	r2, [r7, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c60a:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c60e:	683b      	ldr	r3, [r7, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c610:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800c614:	ea46 0603 	orr.w	r6, r6, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c618:	d023      	beq.n	800c662 <TIM_OC3_SetConfig+0x7a>
 800c61a:	4b28      	ldr	r3, [pc, #160]	; (800c6bc <TIM_OC3_SetConfig+0xd4>)
 800c61c:	4298      	cmp	r0, r3
 800c61e:	d020      	beq.n	800c662 <TIM_OC3_SetConfig+0x7a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c620:	4a27      	ldr	r2, [pc, #156]	; (800c6c0 <TIM_OC3_SetConfig+0xd8>)
 800c622:	4b28      	ldr	r3, [pc, #160]	; (800c6c4 <TIM_OC3_SetConfig+0xdc>)
 800c624:	4298      	cmp	r0, r3
 800c626:	bf18      	it	ne
 800c628:	4290      	cmpne	r0, r2
 800c62a:	d003      	beq.n	800c634 <TIM_OC3_SetConfig+0x4c>
 800c62c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c630:	4298      	cmp	r0, r3
 800c632:	d10e      	bne.n	800c652 <TIM_OC3_SetConfig+0x6a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800c63a:	d120      	bne.n	800c67e <TIM_OC3_SetConfig+0x96>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c642:	d125      	bne.n	800c690 <TIM_OC3_SetConfig+0xa8>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c644:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c648:	69ba      	ldr	r2, [r7, #24]
 800c64a:	ea48 1802 	orr.w	r8, r8, r2, lsl #4
 800c64e:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c652:	f8c4 8004 	str.w	r8, [r4, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c656:	61e6      	str	r6, [r4, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	63e3      	str	r3, [r4, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c65c:	6225      	str	r5, [r4, #32]
}
 800c65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f033 0208 	bics.w	r2, r3, #8
 800c668:	d119      	bne.n	800c69e <TIM_OC3_SetConfig+0xb6>
    tmpccer &= ~TIM_CCER_CC3NP;
 800c66a:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c66e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800c672:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800c67c:	d0de      	beq.n	800c63c <TIM_OC3_SetConfig+0x54>
 800c67e:	f641 01a9 	movw	r1, #6313	; 0x18a9
 800c682:	4811      	ldr	r0, [pc, #68]	; (800c6c8 <TIM_OC3_SetConfig+0xe0>)
 800c684:	f007 fada 	bl	8013c3c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c68e:	d0d9      	beq.n	800c644 <TIM_OC3_SetConfig+0x5c>
 800c690:	f641 01aa 	movw	r1, #6314	; 0x18aa
 800c694:	480c      	ldr	r0, [pc, #48]	; (800c6c8 <TIM_OC3_SetConfig+0xe0>)
 800c696:	f007 fad1 	bl	8013c3c <assert_failed>
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	e7d2      	b.n	800c644 <TIM_OC3_SetConfig+0x5c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c69e:	f641 019c 	movw	r1, #6300	; 0x189c
 800c6a2:	4809      	ldr	r0, [pc, #36]	; (800c6c8 <TIM_OC3_SetConfig+0xe0>)
 800c6a4:	f007 faca 	bl	8013c3c <assert_failed>
    tmpccer &= ~TIM_CCER_CC3NP;
 800c6a8:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 800c6ac:	68fb      	ldr	r3, [r7, #12]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c6ae:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800c6b2:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800c6b6:	e7de      	b.n	800c676 <TIM_OC3_SetConfig+0x8e>
 800c6b8:	40010000 	.word	0x40010000
 800c6bc:	40010400 	.word	0x40010400
 800c6c0:	40014000 	.word	0x40014000
 800c6c4:	40014400 	.word	0x40014400
 800c6c8:	0802a570 	.word	0x0802a570

0800c6cc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	f000 80dd 	beq.w	800c88c <HAL_TIM_Base_Init+0x1c0>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c6d2:	4b80      	ldr	r3, [pc, #512]	; (800c8d4 <HAL_TIM_Base_Init+0x208>)
 800c6d4:	4980      	ldr	r1, [pc, #512]	; (800c8d8 <HAL_TIM_Base_Init+0x20c>)
{
 800c6d6:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c6d8:	6802      	ldr	r2, [r0, #0]
 800c6da:	4604      	mov	r4, r0
 800c6dc:	487f      	ldr	r0, [pc, #508]	; (800c8dc <HAL_TIM_Base_Init+0x210>)
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	bf18      	it	ne
 800c6e2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800c6e6:	4d7e      	ldr	r5, [pc, #504]	; (800c8e0 <HAL_TIM_Base_Init+0x214>)
 800c6e8:	bf14      	ite	ne
 800c6ea:	2301      	movne	r3, #1
 800c6ec:	2300      	moveq	r3, #0
 800c6ee:	4282      	cmp	r2, r0
 800c6f0:	bf0c      	ite	eq
 800c6f2:	2300      	moveq	r3, #0
 800c6f4:	f003 0301 	andne.w	r3, r3, #1
 800c6f8:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800c6fc:	428a      	cmp	r2, r1
 800c6fe:	bf0c      	ite	eq
 800c700:	2300      	moveq	r3, #0
 800c702:	f003 0301 	andne.w	r3, r3, #1
 800c706:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800c70a:	42aa      	cmp	r2, r5
 800c70c:	bf0c      	ite	eq
 800c70e:	2300      	moveq	r3, #0
 800c710:	f003 0301 	andne.w	r3, r3, #1
 800c714:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800c718:	4282      	cmp	r2, r0
 800c71a:	bf0c      	ite	eq
 800c71c:	2300      	moveq	r3, #0
 800c71e:	f003 0301 	andne.w	r3, r3, #1
 800c722:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800c726:	428a      	cmp	r2, r1
 800c728:	bf0c      	ite	eq
 800c72a:	2300      	moveq	r3, #0
 800c72c:	f003 0301 	andne.w	r3, r3, #1
 800c730:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c734:	42aa      	cmp	r2, r5
 800c736:	bf0c      	ite	eq
 800c738:	2300      	moveq	r3, #0
 800c73a:	f003 0301 	andne.w	r3, r3, #1
 800c73e:	f5a5 4564 	sub.w	r5, r5, #58368	; 0xe400
 800c742:	4282      	cmp	r2, r0
 800c744:	bf0c      	ite	eq
 800c746:	2300      	moveq	r3, #0
 800c748:	f003 0301 	andne.w	r3, r3, #1
 800c74c:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 800c750:	428a      	cmp	r2, r1
 800c752:	bf0c      	ite	eq
 800c754:	2300      	moveq	r3, #0
 800c756:	f003 0301 	andne.w	r3, r3, #1
 800c75a:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 800c75e:	42aa      	cmp	r2, r5
 800c760:	bf0c      	ite	eq
 800c762:	2300      	moveq	r3, #0
 800c764:	f003 0301 	andne.w	r3, r3, #1
 800c768:	4282      	cmp	r2, r0
 800c76a:	bf0c      	ite	eq
 800c76c:	2300      	moveq	r3, #0
 800c76e:	f003 0301 	andne.w	r3, r3, #1
 800c772:	428a      	cmp	r2, r1
 800c774:	bf0c      	ite	eq
 800c776:	2300      	moveq	r3, #0
 800c778:	f003 0301 	andne.w	r3, r3, #1
 800c77c:	b11b      	cbz	r3, 800c786 <HAL_TIM_Base_Init+0xba>
 800c77e:	4b59      	ldr	r3, [pc, #356]	; (800c8e4 <HAL_TIM_Base_Init+0x218>)
 800c780:	429a      	cmp	r2, r3
 800c782:	f040 80a0 	bne.w	800c8c6 <HAL_TIM_Base_Init+0x1fa>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c786:	68a3      	ldr	r3, [r4, #8]
 800c788:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800c78c:	f023 0210 	bic.w	r2, r3, #16
 800c790:	2920      	cmp	r1, #32
 800c792:	bf18      	it	ne
 800c794:	2a00      	cmpne	r2, #0
 800c796:	d002      	beq.n	800c79e <HAL_TIM_Base_Init+0xd2>
 800c798:	2b40      	cmp	r3, #64	; 0x40
 800c79a:	f040 8083 	bne.w	800c8a4 <HAL_TIM_Base_Init+0x1d8>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c79e:	6923      	ldr	r3, [r4, #16]
 800c7a0:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c7a4:	d002      	beq.n	800c7ac <HAL_TIM_Base_Init+0xe0>
 800c7a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7aa:	d171      	bne.n	800c890 <HAL_TIM_Base_Init+0x1c4>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c7ac:	69a3      	ldr	r3, [r4, #24]
 800c7ae:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c7b2:	d15f      	bne.n	800c874 <HAL_TIM_Base_Init+0x1a8>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c7b4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c7b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d053      	beq.n	800c868 <HAL_TIM_Base_Init+0x19c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7c0:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c7c2:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7c4:	4943      	ldr	r1, [pc, #268]	; (800c8d4 <HAL_TIM_Base_Init+0x208>)
 800c7c6:	4d48      	ldr	r5, [pc, #288]	; (800c8e8 <HAL_TIM_Base_Init+0x21c>)
 800c7c8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800c7cc:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 800c7d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800c7d4:	eba2 0505 	sub.w	r5, r2, r5
  tmpcr1 = TIMx->CR1;
 800c7d8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7da:	fab1 f181 	clz	r1, r1
 800c7de:	fab5 f585 	clz	r5, r5
 800c7e2:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800c7e6:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800c7ea:	d018      	beq.n	800c81e <HAL_TIM_Base_Init+0x152>
 800c7ec:	b9b9      	cbnz	r1, 800c81e <HAL_TIM_Base_Init+0x152>
 800c7ee:	483b      	ldr	r0, [pc, #236]	; (800c8dc <HAL_TIM_Base_Init+0x210>)
 800c7f0:	4282      	cmp	r2, r0
 800c7f2:	d014      	beq.n	800c81e <HAL_TIM_Base_Init+0x152>
 800c7f4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c7f8:	4282      	cmp	r2, r0
 800c7fa:	d010      	beq.n	800c81e <HAL_TIM_Base_Init+0x152>
 800c7fc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c800:	4282      	cmp	r2, r0
 800c802:	d055      	beq.n	800c8b0 <HAL_TIM_Base_Init+0x1e4>
 800c804:	2d00      	cmp	r5, #0
 800c806:	d153      	bne.n	800c8b0 <HAL_TIM_Base_Init+0x1e4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c808:	4e38      	ldr	r6, [pc, #224]	; (800c8ec <HAL_TIM_Base_Init+0x220>)
 800c80a:	4839      	ldr	r0, [pc, #228]	; (800c8f0 <HAL_TIM_Base_Init+0x224>)
 800c80c:	4282      	cmp	r2, r0
 800c80e:	bf18      	it	ne
 800c810:	42b2      	cmpne	r2, r6
 800c812:	d008      	beq.n	800c826 <HAL_TIM_Base_Init+0x15a>
 800c814:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c818:	4282      	cmp	r2, r0
 800c81a:	d108      	bne.n	800c82e <HAL_TIM_Base_Init+0x162>
 800c81c:	e003      	b.n	800c826 <HAL_TIM_Base_Init+0x15a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c81e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c822:	68a0      	ldr	r0, [r4, #8]
 800c824:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800c826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c82a:	6920      	ldr	r0, [r4, #16]
 800c82c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c82e:	69a0      	ldr	r0, [r4, #24]
 800c830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c834:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800c836:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c838:	68e3      	ldr	r3, [r4, #12]
 800c83a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c83c:	6863      	ldr	r3, [r4, #4]
 800c83e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c840:	b951      	cbnz	r1, 800c858 <HAL_TIM_Base_Init+0x18c>
 800c842:	b94d      	cbnz	r5, 800c858 <HAL_TIM_Base_Init+0x18c>
 800c844:	4929      	ldr	r1, [pc, #164]	; (800c8ec <HAL_TIM_Base_Init+0x220>)
 800c846:	4b2a      	ldr	r3, [pc, #168]	; (800c8f0 <HAL_TIM_Base_Init+0x224>)
 800c848:	429a      	cmp	r2, r3
 800c84a:	bf18      	it	ne
 800c84c:	428a      	cmpne	r2, r1
 800c84e:	d003      	beq.n	800c858 <HAL_TIM_Base_Init+0x18c>
 800c850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c854:	429a      	cmp	r2, r3
 800c856:	d101      	bne.n	800c85c <HAL_TIM_Base_Init+0x190>
    TIMx->RCR = Structure->RepetitionCounter;
 800c858:	6963      	ldr	r3, [r4, #20]
 800c85a:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c85c:	2301      	movs	r3, #1
  return HAL_OK;
 800c85e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800c860:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 800c862:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c866:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800c868:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c86c:	4620      	mov	r0, r4
 800c86e:	f00f ffd3 	bl	801c818 <HAL_TIM_Base_MspInit>
 800c872:	e7a5      	b.n	800c7c0 <HAL_TIM_Base_Init+0xf4>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c874:	f44f 718c 	mov.w	r1, #280	; 0x118
 800c878:	481e      	ldr	r0, [pc, #120]	; (800c8f4 <HAL_TIM_Base_Init+0x228>)
 800c87a:	f007 f9df 	bl	8013c3c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c87e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c882:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c886:	2b00      	cmp	r3, #0
 800c888:	d19a      	bne.n	800c7c0 <HAL_TIM_Base_Init+0xf4>
 800c88a:	e7ed      	b.n	800c868 <HAL_TIM_Base_Init+0x19c>
    return HAL_ERROR;
 800c88c:	2001      	movs	r0, #1
}
 800c88e:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c890:	f240 1117 	movw	r1, #279	; 0x117
 800c894:	4817      	ldr	r0, [pc, #92]	; (800c8f4 <HAL_TIM_Base_Init+0x228>)
 800c896:	f007 f9d1 	bl	8013c3c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c89a:	69a3      	ldr	r3, [r4, #24]
 800c89c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c8a0:	d088      	beq.n	800c7b4 <HAL_TIM_Base_Init+0xe8>
 800c8a2:	e7e7      	b.n	800c874 <HAL_TIM_Base_Init+0x1a8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c8a4:	f44f 718b 	mov.w	r1, #278	; 0x116
 800c8a8:	4812      	ldr	r0, [pc, #72]	; (800c8f4 <HAL_TIM_Base_Init+0x228>)
 800c8aa:	f007 f9c7 	bl	8013c3c <assert_failed>
 800c8ae:	e776      	b.n	800c79e <HAL_TIM_Base_Init+0xd2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8b0:	480b      	ldr	r0, [pc, #44]	; (800c8e0 <HAL_TIM_Base_Init+0x214>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c8b6:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8b8:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 800c8ba:	ea43 0306 	orr.w	r3, r3, r6
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8be:	d0b2      	beq.n	800c826 <HAL_TIM_Base_Init+0x15a>
 800c8c0:	2d00      	cmp	r5, #0
 800c8c2:	d1b0      	bne.n	800c826 <HAL_TIM_Base_Init+0x15a>
 800c8c4:	e7a0      	b.n	800c808 <HAL_TIM_Base_Init+0x13c>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c8c6:	f240 1115 	movw	r1, #277	; 0x115
 800c8ca:	480a      	ldr	r0, [pc, #40]	; (800c8f4 <HAL_TIM_Base_Init+0x228>)
 800c8cc:	f007 f9b6 	bl	8013c3c <assert_failed>
 800c8d0:	e759      	b.n	800c786 <HAL_TIM_Base_Init+0xba>
 800c8d2:	bf00      	nop
 800c8d4:	40010000 	.word	0x40010000
 800c8d8:	40000800 	.word	0x40000800
 800c8dc:	40000400 	.word	0x40000400
 800c8e0:	40000c00 	.word	0x40000c00
 800c8e4:	40014800 	.word	0x40014800
 800c8e8:	40010400 	.word	0x40010400
 800c8ec:	40014000 	.word	0x40014000
 800c8f0:	40014400 	.word	0x40014400
 800c8f4:	0802a570 	.word	0x0802a570

0800c8f8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	f000 80dd 	beq.w	800cab8 <HAL_TIM_PWM_Init+0x1c0>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c8fe:	4b80      	ldr	r3, [pc, #512]	; (800cb00 <HAL_TIM_PWM_Init+0x208>)
 800c900:	4980      	ldr	r1, [pc, #512]	; (800cb04 <HAL_TIM_PWM_Init+0x20c>)
{
 800c902:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c904:	6802      	ldr	r2, [r0, #0]
 800c906:	4604      	mov	r4, r0
 800c908:	487f      	ldr	r0, [pc, #508]	; (800cb08 <HAL_TIM_PWM_Init+0x210>)
 800c90a:	429a      	cmp	r2, r3
 800c90c:	bf18      	it	ne
 800c90e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800c912:	4d7e      	ldr	r5, [pc, #504]	; (800cb0c <HAL_TIM_PWM_Init+0x214>)
 800c914:	bf14      	ite	ne
 800c916:	2301      	movne	r3, #1
 800c918:	2300      	moveq	r3, #0
 800c91a:	4282      	cmp	r2, r0
 800c91c:	bf0c      	ite	eq
 800c91e:	2300      	moveq	r3, #0
 800c920:	f003 0301 	andne.w	r3, r3, #1
 800c924:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800c928:	428a      	cmp	r2, r1
 800c92a:	bf0c      	ite	eq
 800c92c:	2300      	moveq	r3, #0
 800c92e:	f003 0301 	andne.w	r3, r3, #1
 800c932:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800c936:	42aa      	cmp	r2, r5
 800c938:	bf0c      	ite	eq
 800c93a:	2300      	moveq	r3, #0
 800c93c:	f003 0301 	andne.w	r3, r3, #1
 800c940:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800c944:	4282      	cmp	r2, r0
 800c946:	bf0c      	ite	eq
 800c948:	2300      	moveq	r3, #0
 800c94a:	f003 0301 	andne.w	r3, r3, #1
 800c94e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800c952:	428a      	cmp	r2, r1
 800c954:	bf0c      	ite	eq
 800c956:	2300      	moveq	r3, #0
 800c958:	f003 0301 	andne.w	r3, r3, #1
 800c95c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c960:	42aa      	cmp	r2, r5
 800c962:	bf0c      	ite	eq
 800c964:	2300      	moveq	r3, #0
 800c966:	f003 0301 	andne.w	r3, r3, #1
 800c96a:	f5a5 4564 	sub.w	r5, r5, #58368	; 0xe400
 800c96e:	4282      	cmp	r2, r0
 800c970:	bf0c      	ite	eq
 800c972:	2300      	moveq	r3, #0
 800c974:	f003 0301 	andne.w	r3, r3, #1
 800c978:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 800c97c:	428a      	cmp	r2, r1
 800c97e:	bf0c      	ite	eq
 800c980:	2300      	moveq	r3, #0
 800c982:	f003 0301 	andne.w	r3, r3, #1
 800c986:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 800c98a:	42aa      	cmp	r2, r5
 800c98c:	bf0c      	ite	eq
 800c98e:	2300      	moveq	r3, #0
 800c990:	f003 0301 	andne.w	r3, r3, #1
 800c994:	4282      	cmp	r2, r0
 800c996:	bf0c      	ite	eq
 800c998:	2300      	moveq	r3, #0
 800c99a:	f003 0301 	andne.w	r3, r3, #1
 800c99e:	428a      	cmp	r2, r1
 800c9a0:	bf0c      	ite	eq
 800c9a2:	2300      	moveq	r3, #0
 800c9a4:	f003 0301 	andne.w	r3, r3, #1
 800c9a8:	b11b      	cbz	r3, 800c9b2 <HAL_TIM_PWM_Init+0xba>
 800c9aa:	4b59      	ldr	r3, [pc, #356]	; (800cb10 <HAL_TIM_PWM_Init+0x218>)
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	f040 80a0 	bne.w	800caf2 <HAL_TIM_PWM_Init+0x1fa>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c9b2:	68a3      	ldr	r3, [r4, #8]
 800c9b4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800c9b8:	f023 0210 	bic.w	r2, r3, #16
 800c9bc:	2920      	cmp	r1, #32
 800c9be:	bf18      	it	ne
 800c9c0:	2a00      	cmpne	r2, #0
 800c9c2:	d002      	beq.n	800c9ca <HAL_TIM_PWM_Init+0xd2>
 800c9c4:	2b40      	cmp	r3, #64	; 0x40
 800c9c6:	f040 8083 	bne.w	800cad0 <HAL_TIM_PWM_Init+0x1d8>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c9ca:	6923      	ldr	r3, [r4, #16]
 800c9cc:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c9d0:	d002      	beq.n	800c9d8 <HAL_TIM_PWM_Init+0xe0>
 800c9d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9d6:	d171      	bne.n	800cabc <HAL_TIM_PWM_Init+0x1c4>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c9d8:	69a3      	ldr	r3, [r4, #24]
 800c9da:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c9de:	d15f      	bne.n	800caa0 <HAL_TIM_PWM_Init+0x1a8>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c9e0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c9e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d053      	beq.n	800ca94 <HAL_TIM_PWM_Init+0x19c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9ec:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ee:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c9f0:	4943      	ldr	r1, [pc, #268]	; (800cb00 <HAL_TIM_PWM_Init+0x208>)
 800c9f2:	4d48      	ldr	r5, [pc, #288]	; (800cb14 <HAL_TIM_PWM_Init+0x21c>)
 800c9f4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800c9f8:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 800c9fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800ca00:	eba2 0505 	sub.w	r5, r2, r5
  tmpcr1 = TIMx->CR1;
 800ca04:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca06:	fab1 f181 	clz	r1, r1
 800ca0a:	fab5 f585 	clz	r5, r5
 800ca0e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800ca12:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800ca16:	d018      	beq.n	800ca4a <HAL_TIM_PWM_Init+0x152>
 800ca18:	b9b9      	cbnz	r1, 800ca4a <HAL_TIM_PWM_Init+0x152>
 800ca1a:	483b      	ldr	r0, [pc, #236]	; (800cb08 <HAL_TIM_PWM_Init+0x210>)
 800ca1c:	4282      	cmp	r2, r0
 800ca1e:	d014      	beq.n	800ca4a <HAL_TIM_PWM_Init+0x152>
 800ca20:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800ca24:	4282      	cmp	r2, r0
 800ca26:	d010      	beq.n	800ca4a <HAL_TIM_PWM_Init+0x152>
 800ca28:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800ca2c:	4282      	cmp	r2, r0
 800ca2e:	d055      	beq.n	800cadc <HAL_TIM_PWM_Init+0x1e4>
 800ca30:	2d00      	cmp	r5, #0
 800ca32:	d153      	bne.n	800cadc <HAL_TIM_PWM_Init+0x1e4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca34:	4e38      	ldr	r6, [pc, #224]	; (800cb18 <HAL_TIM_PWM_Init+0x220>)
 800ca36:	4839      	ldr	r0, [pc, #228]	; (800cb1c <HAL_TIM_PWM_Init+0x224>)
 800ca38:	4282      	cmp	r2, r0
 800ca3a:	bf18      	it	ne
 800ca3c:	42b2      	cmpne	r2, r6
 800ca3e:	d008      	beq.n	800ca52 <HAL_TIM_PWM_Init+0x15a>
 800ca40:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800ca44:	4282      	cmp	r2, r0
 800ca46:	d108      	bne.n	800ca5a <HAL_TIM_PWM_Init+0x162>
 800ca48:	e003      	b.n	800ca52 <HAL_TIM_PWM_Init+0x15a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ca4e:	68a0      	ldr	r0, [r4, #8]
 800ca50:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca56:	6920      	ldr	r0, [r4, #16]
 800ca58:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca5a:	69a0      	ldr	r0, [r4, #24]
 800ca5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca60:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800ca62:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca64:	68e3      	ldr	r3, [r4, #12]
 800ca66:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ca68:	6863      	ldr	r3, [r4, #4]
 800ca6a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca6c:	b951      	cbnz	r1, 800ca84 <HAL_TIM_PWM_Init+0x18c>
 800ca6e:	b94d      	cbnz	r5, 800ca84 <HAL_TIM_PWM_Init+0x18c>
 800ca70:	4929      	ldr	r1, [pc, #164]	; (800cb18 <HAL_TIM_PWM_Init+0x220>)
 800ca72:	4b2a      	ldr	r3, [pc, #168]	; (800cb1c <HAL_TIM_PWM_Init+0x224>)
 800ca74:	429a      	cmp	r2, r3
 800ca76:	bf18      	it	ne
 800ca78:	428a      	cmpne	r2, r1
 800ca7a:	d003      	beq.n	800ca84 <HAL_TIM_PWM_Init+0x18c>
 800ca7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d101      	bne.n	800ca88 <HAL_TIM_PWM_Init+0x190>
    TIMx->RCR = Structure->RepetitionCounter;
 800ca84:	6963      	ldr	r3, [r4, #20]
 800ca86:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800ca88:	2301      	movs	r3, #1
  return HAL_OK;
 800ca8a:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800ca8c:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 800ca8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ca92:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800ca94:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f00f fea3 	bl	801c7e4 <HAL_TIM_PWM_MspInit>
 800ca9e:	e7a5      	b.n	800c9ec <HAL_TIM_PWM_Init+0xf4>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800caa0:	f240 41a5 	movw	r1, #1189	; 0x4a5
 800caa4:	481e      	ldr	r0, [pc, #120]	; (800cb20 <HAL_TIM_PWM_Init+0x228>)
 800caa6:	f007 f8c9 	bl	8013c3c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800caaa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800caae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d19a      	bne.n	800c9ec <HAL_TIM_PWM_Init+0xf4>
 800cab6:	e7ed      	b.n	800ca94 <HAL_TIM_PWM_Init+0x19c>
    return HAL_ERROR;
 800cab8:	2001      	movs	r0, #1
}
 800caba:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800cabc:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800cac0:	4817      	ldr	r0, [pc, #92]	; (800cb20 <HAL_TIM_PWM_Init+0x228>)
 800cac2:	f007 f8bb 	bl	8013c3c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cac6:	69a3      	ldr	r3, [r4, #24]
 800cac8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800cacc:	d088      	beq.n	800c9e0 <HAL_TIM_PWM_Init+0xe8>
 800cace:	e7e7      	b.n	800caa0 <HAL_TIM_PWM_Init+0x1a8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800cad0:	f240 41a3 	movw	r1, #1187	; 0x4a3
 800cad4:	4812      	ldr	r0, [pc, #72]	; (800cb20 <HAL_TIM_PWM_Init+0x228>)
 800cad6:	f007 f8b1 	bl	8013c3c <assert_failed>
 800cada:	e776      	b.n	800c9ca <HAL_TIM_PWM_Init+0xd2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cadc:	480b      	ldr	r0, [pc, #44]	; (800cb0c <HAL_TIM_PWM_Init+0x214>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800cae2:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cae4:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 800cae6:	ea43 0306 	orr.w	r3, r3, r6
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800caea:	d0b2      	beq.n	800ca52 <HAL_TIM_PWM_Init+0x15a>
 800caec:	2d00      	cmp	r5, #0
 800caee:	d1b0      	bne.n	800ca52 <HAL_TIM_PWM_Init+0x15a>
 800caf0:	e7a0      	b.n	800ca34 <HAL_TIM_PWM_Init+0x13c>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800caf2:	f240 41a2 	movw	r1, #1186	; 0x4a2
 800caf6:	480a      	ldr	r0, [pc, #40]	; (800cb20 <HAL_TIM_PWM_Init+0x228>)
 800caf8:	f007 f8a0 	bl	8013c3c <assert_failed>
 800cafc:	e759      	b.n	800c9b2 <HAL_TIM_PWM_Init+0xba>
 800cafe:	bf00      	nop
 800cb00:	40010000 	.word	0x40010000
 800cb04:	40000800 	.word	0x40000800
 800cb08:	40000400 	.word	0x40000400
 800cb0c:	40000c00 	.word	0x40000c00
 800cb10:	40014800 	.word	0x40014800
 800cb14:	40010400 	.word	0x40010400
 800cb18:	40014000 	.word	0x40014000
 800cb1c:	40014400 	.word	0x40014400
 800cb20:	0802a570 	.word	0x0802a570

0800cb24 <HAL_TIM_PWM_Start>:
{
 800cb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cb26:	4b66      	ldr	r3, [pc, #408]	; (800ccc0 <HAL_TIM_PWM_Start+0x19c>)
{
 800cb28:	4606      	mov	r6, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cb2a:	6804      	ldr	r4, [r0, #0]
{
 800cb2c:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cb2e:	429c      	cmp	r4, r3
 800cb30:	f000 8093 	beq.w	800cc5a <HAL_TIM_PWM_Start+0x136>
 800cb34:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800cb38:	f000 8089 	beq.w	800cc4e <HAL_TIM_PWM_Start+0x12a>
 800cb3c:	4b61      	ldr	r3, [pc, #388]	; (800ccc4 <HAL_TIM_PWM_Start+0x1a0>)
 800cb3e:	429c      	cmp	r4, r3
 800cb40:	f000 8085 	beq.w	800cc4e <HAL_TIM_PWM_Start+0x12a>
 800cb44:	4b60      	ldr	r3, [pc, #384]	; (800ccc8 <HAL_TIM_PWM_Start+0x1a4>)
 800cb46:	429c      	cmp	r4, r3
 800cb48:	f000 8081 	beq.w	800cc4e <HAL_TIM_PWM_Start+0x12a>
 800cb4c:	4b5f      	ldr	r3, [pc, #380]	; (800cccc <HAL_TIM_PWM_Start+0x1a8>)
 800cb4e:	429c      	cmp	r4, r3
 800cb50:	d07d      	beq.n	800cc4e <HAL_TIM_PWM_Start+0x12a>
 800cb52:	4b5f      	ldr	r3, [pc, #380]	; (800ccd0 <HAL_TIM_PWM_Start+0x1ac>)
 800cb54:	429c      	cmp	r4, r3
 800cb56:	f000 8092 	beq.w	800cc7e <HAL_TIM_PWM_Start+0x15a>
 800cb5a:	4b5e      	ldr	r3, [pc, #376]	; (800ccd4 <HAL_TIM_PWM_Start+0x1b0>)
 800cb5c:	429c      	cmp	r4, r3
 800cb5e:	f000 8096 	beq.w	800cc8e <HAL_TIM_PWM_Start+0x16a>
 800cb62:	4b5d      	ldr	r3, [pc, #372]	; (800ccd8 <HAL_TIM_PWM_Start+0x1b4>)
 800cb64:	429c      	cmp	r4, r3
 800cb66:	f040 8097 	bne.w	800cc98 <HAL_TIM_PWM_Start+0x174>
 800cb6a:	b1d5      	cbz	r5, 800cba2 <HAL_TIM_PWM_Start+0x7e>
 800cb6c:	f240 511c 	movw	r1, #1308	; 0x51c
 800cb70:	485a      	ldr	r0, [pc, #360]	; (800ccdc <HAL_TIM_PWM_Start+0x1b8>)
 800cb72:	f007 f863 	bl	8013c3c <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cb76:	6834      	ldr	r4, [r6, #0]
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800cb78:	4b51      	ldr	r3, [pc, #324]	; (800ccc0 <HAL_TIM_PWM_Start+0x19c>)
 800cb7a:	429c      	cmp	r4, r3
 800cb7c:	d02d      	beq.n	800cbda <HAL_TIM_PWM_Start+0xb6>
 800cb7e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800cb82:	d02a      	beq.n	800cbda <HAL_TIM_PWM_Start+0xb6>
 800cb84:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800cb88:	429c      	cmp	r4, r3
 800cb8a:	d026      	beq.n	800cbda <HAL_TIM_PWM_Start+0xb6>
 800cb8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb90:	429c      	cmp	r4, r3
 800cb92:	d022      	beq.n	800cbda <HAL_TIM_PWM_Start+0xb6>
 800cb94:	4b4d      	ldr	r3, [pc, #308]	; (800cccc <HAL_TIM_PWM_Start+0x1a8>)
 800cb96:	429c      	cmp	r4, r3
 800cb98:	d01f      	beq.n	800cbda <HAL_TIM_PWM_Start+0xb6>
 800cb9a:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800cb9e:	429c      	cmp	r4, r3
 800cba0:	d01b      	beq.n	800cbda <HAL_TIM_PWM_Start+0xb6>
 800cba2:	4b4c      	ldr	r3, [pc, #304]	; (800ccd4 <HAL_TIM_PWM_Start+0x1b0>)
 800cba4:	429c      	cmp	r4, r3
 800cba6:	d018      	beq.n	800cbda <HAL_TIM_PWM_Start+0xb6>
 800cba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbac:	429c      	cmp	r4, r3
 800cbae:	d014      	beq.n	800cbda <HAL_TIM_PWM_Start+0xb6>
 800cbb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbb4:	429c      	cmp	r4, r3
 800cbb6:	d010      	beq.n	800cbda <HAL_TIM_PWM_Start+0xb6>
 800cbb8:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800cbbc:	429c      	cmp	r4, r3
 800cbbe:	d00c      	beq.n	800cbda <HAL_TIM_PWM_Start+0xb6>
 800cbc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbc4:	429c      	cmp	r4, r3
 800cbc6:	d008      	beq.n	800cbda <HAL_TIM_PWM_Start+0xb6>
 800cbc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbcc:	429c      	cmp	r4, r3
 800cbce:	d004      	beq.n	800cbda <HAL_TIM_PWM_Start+0xb6>
 800cbd0:	f641 3154 	movw	r1, #6996	; 0x1b54
 800cbd4:	4841      	ldr	r0, [pc, #260]	; (800ccdc <HAL_TIM_PWM_Start+0x1b8>)
 800cbd6:	f007 f831 	bl	8013c3c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800cbda:	2d14      	cmp	r5, #20
 800cbdc:	d943      	bls.n	800cc66 <HAL_TIM_PWM_Start+0x142>
 800cbde:	2d3c      	cmp	r5, #60	; 0x3c
 800cbe0:	d147      	bne.n	800cc72 <HAL_TIM_PWM_Start+0x14e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	f005 051f 	and.w	r5, r5, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cbe8:	6a21      	ldr	r1, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cbea:	fa03 f505 	lsl.w	r5, r3, r5
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cbee:	4a34      	ldr	r2, [pc, #208]	; (800ccc0 <HAL_TIM_PWM_Start+0x19c>)
 800cbf0:	4f37      	ldr	r7, [pc, #220]	; (800ccd0 <HAL_TIM_PWM_Start+0x1ac>)
  TIMx->CCER &= ~tmp;
 800cbf2:	ea21 0105 	bic.w	r1, r1, r5
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cbf6:	483a      	ldr	r0, [pc, #232]	; (800cce0 <HAL_TIM_PWM_Start+0x1bc>)
  TIMx->CCER &= ~tmp;
 800cbf8:	6221      	str	r1, [r4, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cbfa:	6a23      	ldr	r3, [r4, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cbfc:	4939      	ldr	r1, [pc, #228]	; (800cce4 <HAL_TIM_PWM_Start+0x1c0>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cbfe:	431d      	orrs	r5, r3
 800cc00:	6225      	str	r5, [r4, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cc02:	6833      	ldr	r3, [r6, #0]
 800cc04:	42bb      	cmp	r3, r7
 800cc06:	bf18      	it	ne
 800cc08:	4293      	cmpne	r3, r2
 800cc0a:	bf0c      	ite	eq
 800cc0c:	2201      	moveq	r2, #1
 800cc0e:	2200      	movne	r2, #0
 800cc10:	4283      	cmp	r3, r0
 800cc12:	bf08      	it	eq
 800cc14:	f042 0201 	orreq.w	r2, r2, #1
 800cc18:	428b      	cmp	r3, r1
 800cc1a:	bf08      	it	eq
 800cc1c:	f042 0201 	orreq.w	r2, r2, #1
 800cc20:	b912      	cbnz	r2, 800cc28 <HAL_TIM_PWM_Start+0x104>
 800cc22:	4a31      	ldr	r2, [pc, #196]	; (800cce8 <HAL_TIM_PWM_Start+0x1c4>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d104      	bne.n	800cc32 <HAL_TIM_PWM_Start+0x10e>
    __HAL_TIM_MOE_ENABLE(htim);
 800cc28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc2e:	645a      	str	r2, [r3, #68]	; 0x44
 800cc30:	6833      	ldr	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc32:	6899      	ldr	r1, [r3, #8]
 800cc34:	4a2d      	ldr	r2, [pc, #180]	; (800ccec <HAL_TIM_PWM_Start+0x1c8>)
 800cc36:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc38:	2a06      	cmp	r2, #6
 800cc3a:	d006      	beq.n	800cc4a <HAL_TIM_PWM_Start+0x126>
 800cc3c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800cc40:	d003      	beq.n	800cc4a <HAL_TIM_PWM_Start+0x126>
    __HAL_TIM_ENABLE(htim);
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	f042 0201 	orr.w	r2, r2, #1
 800cc48:	601a      	str	r2, [r3, #0]
}
 800cc4a:	2000      	movs	r0, #0
 800cc4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cc4e:	f035 030c 	bics.w	r3, r5, #12
 800cc52:	d18b      	bne.n	800cb6c <HAL_TIM_PWM_Start+0x48>
  assert_param(IS_TIM_CHANNELS(Channel));
 800cc54:	2d14      	cmp	r5, #20
 800cc56:	d8c2      	bhi.n	800cbde <HAL_TIM_PWM_Start+0xba>
 800cc58:	e005      	b.n	800cc66 <HAL_TIM_PWM_Start+0x142>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cc5a:	2914      	cmp	r1, #20
 800cc5c:	d886      	bhi.n	800cb6c <HAL_TIM_PWM_Start+0x48>
 800cc5e:	4b24      	ldr	r3, [pc, #144]	; (800ccf0 <HAL_TIM_PWM_Start+0x1cc>)
 800cc60:	40cb      	lsrs	r3, r1
 800cc62:	07d9      	lsls	r1, r3, #31
 800cc64:	d582      	bpl.n	800cb6c <HAL_TIM_PWM_Start+0x48>
  assert_param(IS_TIM_CHANNELS(Channel));
 800cc66:	4b22      	ldr	r3, [pc, #136]	; (800ccf0 <HAL_TIM_PWM_Start+0x1cc>)
 800cc68:	40eb      	lsrs	r3, r5
 800cc6a:	07db      	lsls	r3, r3, #31
 800cc6c:	d4b9      	bmi.n	800cbe2 <HAL_TIM_PWM_Start+0xbe>
 800cc6e:	2d3c      	cmp	r5, #60	; 0x3c
 800cc70:	d0b7      	beq.n	800cbe2 <HAL_TIM_PWM_Start+0xbe>
 800cc72:	f641 3155 	movw	r1, #6997	; 0x1b55
 800cc76:	4819      	ldr	r0, [pc, #100]	; (800ccdc <HAL_TIM_PWM_Start+0x1b8>)
 800cc78:	f006 ffe0 	bl	8013c3c <assert_failed>
 800cc7c:	e7b1      	b.n	800cbe2 <HAL_TIM_PWM_Start+0xbe>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800cc7e:	2914      	cmp	r1, #20
 800cc80:	f63f af74 	bhi.w	800cb6c <HAL_TIM_PWM_Start+0x48>
 800cc84:	4b1a      	ldr	r3, [pc, #104]	; (800ccf0 <HAL_TIM_PWM_Start+0x1cc>)
 800cc86:	40cb      	lsrs	r3, r1
 800cc88:	07da      	lsls	r2, r3, #31
 800cc8a:	d4a6      	bmi.n	800cbda <HAL_TIM_PWM_Start+0xb6>
 800cc8c:	e76e      	b.n	800cb6c <HAL_TIM_PWM_Start+0x48>
 800cc8e:	f035 0304 	bics.w	r3, r5, #4
 800cc92:	f47f af6b 	bne.w	800cb6c <HAL_TIM_PWM_Start+0x48>
 800cc96:	e784      	b.n	800cba2 <HAL_TIM_PWM_Start+0x7e>
 800cc98:	4b16      	ldr	r3, [pc, #88]	; (800ccf4 <HAL_TIM_PWM_Start+0x1d0>)
 800cc9a:	429c      	cmp	r4, r3
 800cc9c:	f43f af65 	beq.w	800cb6a <HAL_TIM_PWM_Start+0x46>
 800cca0:	4b0f      	ldr	r3, [pc, #60]	; (800cce0 <HAL_TIM_PWM_Start+0x1bc>)
 800cca2:	429c      	cmp	r4, r3
 800cca4:	d0f3      	beq.n	800cc8e <HAL_TIM_PWM_Start+0x16a>
 800cca6:	4b0f      	ldr	r3, [pc, #60]	; (800cce4 <HAL_TIM_PWM_Start+0x1c0>)
 800cca8:	429c      	cmp	r4, r3
 800ccaa:	f43f af5e 	beq.w	800cb6a <HAL_TIM_PWM_Start+0x46>
 800ccae:	4b0e      	ldr	r3, [pc, #56]	; (800cce8 <HAL_TIM_PWM_Start+0x1c4>)
 800ccb0:	429c      	cmp	r4, r3
 800ccb2:	f47f af5b 	bne.w	800cb6c <HAL_TIM_PWM_Start+0x48>
 800ccb6:	2900      	cmp	r1, #0
 800ccb8:	f47f af58 	bne.w	800cb6c <HAL_TIM_PWM_Start+0x48>
 800ccbc:	461c      	mov	r4, r3
 800ccbe:	e769      	b.n	800cb94 <HAL_TIM_PWM_Start+0x70>
 800ccc0:	40010000 	.word	0x40010000
 800ccc4:	40000400 	.word	0x40000400
 800ccc8:	40000800 	.word	0x40000800
 800cccc:	40000c00 	.word	0x40000c00
 800ccd0:	40010400 	.word	0x40010400
 800ccd4:	40001800 	.word	0x40001800
 800ccd8:	40001c00 	.word	0x40001c00
 800ccdc:	0802a570 	.word	0x0802a570
 800cce0:	40014000 	.word	0x40014000
 800cce4:	40014400 	.word	0x40014400
 800cce8:	40014800 	.word	0x40014800
 800ccec:	00010007 	.word	0x00010007
 800ccf0:	00111111 	.word	0x00111111
 800ccf4:	40002000 	.word	0x40002000

0800ccf8 <HAL_TIM_ConfigClockSource>:
{
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800ccfa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	f000 8186 	beq.w	800d010 <HAL_TIM_ConfigClockSource+0x318>
 800cd04:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800cd06:	2302      	movs	r3, #2
 800cd08:	460d      	mov	r5, r1
 800cd0a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800cd0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800cd10:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800cd14:	680b      	ldr	r3, [r1, #0]
 800cd16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd1a:	bf18      	it	ne
 800cd1c:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800cd20:	bf14      	ite	ne
 800cd22:	2201      	movne	r2, #1
 800cd24:	2200      	moveq	r2, #0
 800cd26:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800cd2a:	bf08      	it	eq
 800cd2c:	2200      	moveq	r2, #0
 800cd2e:	b112      	cbz	r2, 800cd36 <HAL_TIM_ConfigClockSource+0x3e>
 800cd30:	2b40      	cmp	r3, #64	; 0x40
 800cd32:	f040 8262 	bne.w	800d1fa <HAL_TIM_ConfigClockSource+0x502>
  tmpsmcr = htim->Instance->SMCR;
 800cd36:	6822      	ldr	r2, [r4, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd38:	4bb6      	ldr	r3, [pc, #728]	; (800d014 <HAL_TIM_ConfigClockSource+0x31c>)
  tmpsmcr = htim->Instance->SMCR;
 800cd3a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd3c:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 800cd3e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800cd40:	682b      	ldr	r3, [r5, #0]
 800cd42:	2b70      	cmp	r3, #112	; 0x70
 800cd44:	f000 8178 	beq.w	800d038 <HAL_TIM_ConfigClockSource+0x340>
 800cd48:	d85c      	bhi.n	800ce04 <HAL_TIM_ConfigClockSource+0x10c>
 800cd4a:	2b30      	cmp	r3, #48	; 0x30
 800cd4c:	f000 820f 	beq.w	800d16e <HAL_TIM_ConfigClockSource+0x476>
 800cd50:	f240 8206 	bls.w	800d160 <HAL_TIM_ConfigClockSource+0x468>
 800cd54:	2b50      	cmp	r3, #80	; 0x50
 800cd56:	f000 81b4 	beq.w	800d0c2 <HAL_TIM_ConfigClockSource+0x3ca>
 800cd5a:	2b60      	cmp	r3, #96	; 0x60
 800cd5c:	f000 80c3 	beq.w	800cee6 <HAL_TIM_ConfigClockSource+0x1ee>
 800cd60:	2b40      	cmp	r3, #64	; 0x40
 800cd62:	f040 80b8 	bne.w	800ced6 <HAL_TIM_ConfigClockSource+0x1de>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800cd66:	6822      	ldr	r2, [r4, #0]
 800cd68:	4bab      	ldr	r3, [pc, #684]	; (800d018 <HAL_TIM_ConfigClockSource+0x320>)
 800cd6a:	48ac      	ldr	r0, [pc, #688]	; (800d01c <HAL_TIM_ConfigClockSource+0x324>)
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	bf18      	it	ne
 800cd70:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cd74:	49aa      	ldr	r1, [pc, #680]	; (800d020 <HAL_TIM_ConfigClockSource+0x328>)
 800cd76:	bf14      	ite	ne
 800cd78:	2301      	movne	r3, #1
 800cd7a:	2300      	moveq	r3, #0
 800cd7c:	4282      	cmp	r2, r0
 800cd7e:	bf0c      	ite	eq
 800cd80:	2300      	moveq	r3, #0
 800cd82:	f003 0301 	andne.w	r3, r3, #1
 800cd86:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800cd8a:	428a      	cmp	r2, r1
 800cd8c:	bf0c      	ite	eq
 800cd8e:	2300      	moveq	r3, #0
 800cd90:	f003 0301 	andne.w	r3, r3, #1
 800cd94:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800cd98:	4282      	cmp	r2, r0
 800cd9a:	bf0c      	ite	eq
 800cd9c:	2300      	moveq	r3, #0
 800cd9e:	f003 0301 	andne.w	r3, r3, #1
 800cda2:	428a      	cmp	r2, r1
 800cda4:	bf0c      	ite	eq
 800cda6:	2300      	moveq	r3, #0
 800cda8:	f003 0301 	andne.w	r3, r3, #1
 800cdac:	b11b      	cbz	r3, 800cdb6 <HAL_TIM_ConfigClockSource+0xbe>
 800cdae:	4b9d      	ldr	r3, [pc, #628]	; (800d024 <HAL_TIM_ConfigClockSource+0x32c>)
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	f040 825a 	bne.w	800d26a <HAL_TIM_ConfigClockSource+0x572>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cdb6:	686b      	ldr	r3, [r5, #4]
 800cdb8:	2b0a      	cmp	r3, #10
 800cdba:	bf18      	it	ne
 800cdbc:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800cdc0:	d003      	beq.n	800cdca <HAL_TIM_ConfigClockSource+0xd2>
 800cdc2:	f033 0302 	bics.w	r3, r3, #2
 800cdc6:	f040 821e 	bne.w	800d206 <HAL_TIM_ConfigClockSource+0x50e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cdca:	68ee      	ldr	r6, [r5, #12]
 800cdcc:	2e0f      	cmp	r6, #15
 800cdce:	f200 826e 	bhi.w	800d2ae <HAL_TIM_ConfigClockSource+0x5b6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cdd2:	6823      	ldr	r3, [r4, #0]
 800cdd4:	6868      	ldr	r0, [r5, #4]
  tmpccer = TIMx->CCER;
 800cdd6:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdd8:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cdda:	f022 020a 	bic.w	r2, r2, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdde:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800cde2:	4310      	orrs	r0, r2
  tmpsmcr &= ~TIM_SMCR_TS;
 800cde4:	4a90      	ldr	r2, [pc, #576]	; (800d028 <HAL_TIM_ConfigClockSource+0x330>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cde6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cde8:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cdea:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cdee:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800cdf2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdf4:	6218      	str	r0, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cdf6:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800cdf8:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cdfa:	400a      	ands	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cdfc:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800ce00:	609a      	str	r2, [r3, #8]
 800ce02:	e068      	b.n	800ced6 <HAL_TIM_ConfigClockSource+0x1de>
  switch (sClockSourceConfig->ClockSource)
 800ce04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ce08:	f000 81b1 	beq.w	800d16e <HAL_TIM_ConfigClockSource+0x476>
 800ce0c:	f200 81de 	bhi.w	800d1cc <HAL_TIM_ConfigClockSource+0x4d4>
 800ce10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce14:	f000 80b7 	beq.w	800cf86 <HAL_TIM_ConfigClockSource+0x28e>
 800ce18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce1c:	f000 81a7 	beq.w	800d16e <HAL_TIM_ConfigClockSource+0x476>
 800ce20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce24:	d157      	bne.n	800ced6 <HAL_TIM_ConfigClockSource+0x1de>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ce26:	6822      	ldr	r2, [r4, #0]
 800ce28:	4b7b      	ldr	r3, [pc, #492]	; (800d018 <HAL_TIM_ConfigClockSource+0x320>)
 800ce2a:	487c      	ldr	r0, [pc, #496]	; (800d01c <HAL_TIM_ConfigClockSource+0x324>)
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	bf18      	it	ne
 800ce30:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ce34:	497a      	ldr	r1, [pc, #488]	; (800d020 <HAL_TIM_ConfigClockSource+0x328>)
 800ce36:	4d7d      	ldr	r5, [pc, #500]	; (800d02c <HAL_TIM_ConfigClockSource+0x334>)
 800ce38:	bf14      	ite	ne
 800ce3a:	2301      	movne	r3, #1
 800ce3c:	2300      	moveq	r3, #0
 800ce3e:	4282      	cmp	r2, r0
 800ce40:	bf0c      	ite	eq
 800ce42:	2300      	moveq	r3, #0
 800ce44:	f003 0301 	andne.w	r3, r3, #1
 800ce48:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800ce4c:	428a      	cmp	r2, r1
 800ce4e:	bf0c      	ite	eq
 800ce50:	2300      	moveq	r3, #0
 800ce52:	f003 0301 	andne.w	r3, r3, #1
 800ce56:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800ce5a:	42aa      	cmp	r2, r5
 800ce5c:	bf0c      	ite	eq
 800ce5e:	2300      	moveq	r3, #0
 800ce60:	f003 0301 	andne.w	r3, r3, #1
 800ce64:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800ce68:	4282      	cmp	r2, r0
 800ce6a:	bf0c      	ite	eq
 800ce6c:	2300      	moveq	r3, #0
 800ce6e:	f003 0301 	andne.w	r3, r3, #1
 800ce72:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800ce76:	428a      	cmp	r2, r1
 800ce78:	bf0c      	ite	eq
 800ce7a:	2300      	moveq	r3, #0
 800ce7c:	f003 0301 	andne.w	r3, r3, #1
 800ce80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce84:	42aa      	cmp	r2, r5
 800ce86:	bf0c      	ite	eq
 800ce88:	2300      	moveq	r3, #0
 800ce8a:	f003 0301 	andne.w	r3, r3, #1
 800ce8e:	f5a5 4564 	sub.w	r5, r5, #58368	; 0xe400
 800ce92:	4282      	cmp	r2, r0
 800ce94:	bf0c      	ite	eq
 800ce96:	2300      	moveq	r3, #0
 800ce98:	f003 0301 	andne.w	r3, r3, #1
 800ce9c:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 800cea0:	428a      	cmp	r2, r1
 800cea2:	bf0c      	ite	eq
 800cea4:	2300      	moveq	r3, #0
 800cea6:	f003 0301 	andne.w	r3, r3, #1
 800ceaa:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 800ceae:	42aa      	cmp	r2, r5
 800ceb0:	bf0c      	ite	eq
 800ceb2:	2300      	moveq	r3, #0
 800ceb4:	f003 0301 	andne.w	r3, r3, #1
 800ceb8:	4282      	cmp	r2, r0
 800ceba:	bf0c      	ite	eq
 800cebc:	2300      	moveq	r3, #0
 800cebe:	f003 0301 	andne.w	r3, r3, #1
 800cec2:	428a      	cmp	r2, r1
 800cec4:	bf0c      	ite	eq
 800cec6:	2300      	moveq	r3, #0
 800cec8:	f003 0301 	andne.w	r3, r3, #1
 800cecc:	b11b      	cbz	r3, 800ced6 <HAL_TIM_ConfigClockSource+0x1de>
 800cece:	4b58      	ldr	r3, [pc, #352]	; (800d030 <HAL_TIM_ConfigClockSource+0x338>)
 800ced0:	429a      	cmp	r2, r3
 800ced2:	f040 81ff 	bne.w	800d2d4 <HAL_TIM_ConfigClockSource+0x5dc>
  __HAL_UNLOCK(htim);
 800ced6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800ced8:	2201      	movs	r2, #1
  return HAL_OK;
 800ceda:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800cedc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800cee0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800cee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800cee6:	6822      	ldr	r2, [r4, #0]
 800cee8:	4b4b      	ldr	r3, [pc, #300]	; (800d018 <HAL_TIM_ConfigClockSource+0x320>)
 800ceea:	484c      	ldr	r0, [pc, #304]	; (800d01c <HAL_TIM_ConfigClockSource+0x324>)
 800ceec:	429a      	cmp	r2, r3
 800ceee:	bf18      	it	ne
 800cef0:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cef4:	494a      	ldr	r1, [pc, #296]	; (800d020 <HAL_TIM_ConfigClockSource+0x328>)
 800cef6:	bf14      	ite	ne
 800cef8:	2301      	movne	r3, #1
 800cefa:	2300      	moveq	r3, #0
 800cefc:	4282      	cmp	r2, r0
 800cefe:	bf0c      	ite	eq
 800cf00:	2300      	moveq	r3, #0
 800cf02:	f003 0301 	andne.w	r3, r3, #1
 800cf06:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800cf0a:	428a      	cmp	r2, r1
 800cf0c:	bf0c      	ite	eq
 800cf0e:	2300      	moveq	r3, #0
 800cf10:	f003 0301 	andne.w	r3, r3, #1
 800cf14:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800cf18:	4282      	cmp	r2, r0
 800cf1a:	bf0c      	ite	eq
 800cf1c:	2300      	moveq	r3, #0
 800cf1e:	f003 0301 	andne.w	r3, r3, #1
 800cf22:	428a      	cmp	r2, r1
 800cf24:	bf0c      	ite	eq
 800cf26:	2300      	moveq	r3, #0
 800cf28:	f003 0301 	andne.w	r3, r3, #1
 800cf2c:	b11b      	cbz	r3, 800cf36 <HAL_TIM_ConfigClockSource+0x23e>
 800cf2e:	4b3d      	ldr	r3, [pc, #244]	; (800d024 <HAL_TIM_ConfigClockSource+0x32c>)
 800cf30:	429a      	cmp	r2, r3
 800cf32:	f040 8194 	bne.w	800d25e <HAL_TIM_ConfigClockSource+0x566>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cf36:	686b      	ldr	r3, [r5, #4]
 800cf38:	2b0a      	cmp	r3, #10
 800cf3a:	bf18      	it	ne
 800cf3c:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800cf40:	d003      	beq.n	800cf4a <HAL_TIM_ConfigClockSource+0x252>
 800cf42:	f033 0302 	bics.w	r3, r3, #2
 800cf46:	f040 8164 	bne.w	800d212 <HAL_TIM_ConfigClockSource+0x51a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cf4a:	68ee      	ldr	r6, [r5, #12]
 800cf4c:	2e0f      	cmp	r6, #15
 800cf4e:	f200 81a7 	bhi.w	800d2a0 <HAL_TIM_ConfigClockSource+0x5a8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf52:	6823      	ldr	r3, [r4, #0]
 800cf54:	686f      	ldr	r7, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf56:	6a1d      	ldr	r5, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf58:	4a33      	ldr	r2, [pc, #204]	; (800d028 <HAL_TIM_ConfigClockSource+0x330>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf5a:	f025 0510 	bic.w	r5, r5, #16
 800cf5e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf60:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 800cf62:	6a19      	ldr	r1, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cf64:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf68:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf6c:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800cf70:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800cf74:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf76:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cf78:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800cf7a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf7c:	400a      	ands	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf7e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800cf82:	609a      	str	r2, [r3, #8]
 800cf84:	e7a7      	b.n	800ced6 <HAL_TIM_ConfigClockSource+0x1de>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800cf86:	6822      	ldr	r2, [r4, #0]
 800cf88:	4b23      	ldr	r3, [pc, #140]	; (800d018 <HAL_TIM_ConfigClockSource+0x320>)
 800cf8a:	4924      	ldr	r1, [pc, #144]	; (800d01c <HAL_TIM_ConfigClockSource+0x324>)
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	bf18      	it	ne
 800cf90:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cf94:	4822      	ldr	r0, [pc, #136]	; (800d020 <HAL_TIM_ConfigClockSource+0x328>)
 800cf96:	bf14      	ite	ne
 800cf98:	2301      	movne	r3, #1
 800cf9a:	2300      	moveq	r3, #0
 800cf9c:	428a      	cmp	r2, r1
 800cf9e:	bf0c      	ite	eq
 800cfa0:	2300      	moveq	r3, #0
 800cfa2:	f003 0301 	andne.w	r3, r3, #1
 800cfa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfaa:	4282      	cmp	r2, r0
 800cfac:	bf0c      	ite	eq
 800cfae:	2300      	moveq	r3, #0
 800cfb0:	f003 0301 	andne.w	r3, r3, #1
 800cfb4:	428a      	cmp	r2, r1
 800cfb6:	bf0c      	ite	eq
 800cfb8:	2300      	moveq	r3, #0
 800cfba:	f003 0301 	andne.w	r3, r3, #1
 800cfbe:	b11b      	cbz	r3, 800cfc8 <HAL_TIM_ConfigClockSource+0x2d0>
 800cfc0:	4b1c      	ldr	r3, [pc, #112]	; (800d034 <HAL_TIM_ConfigClockSource+0x33c>)
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	f040 810d 	bne.w	800d1e2 <HAL_TIM_ConfigClockSource+0x4ea>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800cfc8:	68ab      	ldr	r3, [r5, #8]
 800cfca:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800cfce:	f040 8175 	bne.w	800d2bc <HAL_TIM_ConfigClockSource+0x5c4>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cfd2:	686b      	ldr	r3, [r5, #4]
 800cfd4:	2b0a      	cmp	r3, #10
 800cfd6:	bf18      	it	ne
 800cfd8:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800cfdc:	d003      	beq.n	800cfe6 <HAL_TIM_ConfigClockSource+0x2ee>
 800cfde:	f033 0302 	bics.w	r3, r3, #2
 800cfe2:	f040 8122 	bne.w	800d22a <HAL_TIM_ConfigClockSource+0x532>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cfe6:	68e9      	ldr	r1, [r5, #12]
 800cfe8:	290f      	cmp	r1, #15
 800cfea:	f200 8144 	bhi.w	800d276 <HAL_TIM_ConfigClockSource+0x57e>
      TIM_ETR_SetConfig(htim->Instance,
 800cfee:	6820      	ldr	r0, [r4, #0]
 800cff0:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800cff2:	6882      	ldr	r2, [r0, #8]
 800cff4:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cff6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800cffa:	432b      	orrs	r3, r5
 800cffc:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cffe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  TIMx->SMCR = tmpsmcr;
 800d002:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d004:	6822      	ldr	r2, [r4, #0]
 800d006:	6893      	ldr	r3, [r2, #8]
 800d008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d00c:	6093      	str	r3, [r2, #8]
      break;
 800d00e:	e762      	b.n	800ced6 <HAL_TIM_ConfigClockSource+0x1de>
  __HAL_LOCK(htim);
 800d010:	2002      	movs	r0, #2
}
 800d012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d014:	ffce0088 	.word	0xffce0088
 800d018:	40010000 	.word	0x40010000
 800d01c:	40000400 	.word	0x40000400
 800d020:	40000800 	.word	0x40000800
 800d024:	40014000 	.word	0x40014000
 800d028:	ffcfff8f 	.word	0xffcfff8f
 800d02c:	40000c00 	.word	0x40000c00
 800d030:	40014800 	.word	0x40014800
 800d034:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800d038:	6822      	ldr	r2, [r4, #0]
 800d03a:	4ba9      	ldr	r3, [pc, #676]	; (800d2e0 <HAL_TIM_ConfigClockSource+0x5e8>)
 800d03c:	49a9      	ldr	r1, [pc, #676]	; (800d2e4 <HAL_TIM_ConfigClockSource+0x5ec>)
 800d03e:	429a      	cmp	r2, r3
 800d040:	bf18      	it	ne
 800d042:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d046:	48a8      	ldr	r0, [pc, #672]	; (800d2e8 <HAL_TIM_ConfigClockSource+0x5f0>)
 800d048:	bf14      	ite	ne
 800d04a:	2301      	movne	r3, #1
 800d04c:	2300      	moveq	r3, #0
 800d04e:	428a      	cmp	r2, r1
 800d050:	bf0c      	ite	eq
 800d052:	2300      	moveq	r3, #0
 800d054:	f003 0301 	andne.w	r3, r3, #1
 800d058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d05c:	4282      	cmp	r2, r0
 800d05e:	bf0c      	ite	eq
 800d060:	2300      	moveq	r3, #0
 800d062:	f003 0301 	andne.w	r3, r3, #1
 800d066:	428a      	cmp	r2, r1
 800d068:	bf0c      	ite	eq
 800d06a:	2300      	moveq	r3, #0
 800d06c:	f003 0301 	andne.w	r3, r3, #1
 800d070:	b11b      	cbz	r3, 800d07a <HAL_TIM_ConfigClockSource+0x382>
 800d072:	4b9e      	ldr	r3, [pc, #632]	; (800d2ec <HAL_TIM_ConfigClockSource+0x5f4>)
 800d074:	429a      	cmp	r2, r3
 800d076:	f040 80ba 	bne.w	800d1ee <HAL_TIM_ConfigClockSource+0x4f6>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d07a:	68ab      	ldr	r3, [r5, #8]
 800d07c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800d080:	f040 8122 	bne.w	800d2c8 <HAL_TIM_ConfigClockSource+0x5d0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d084:	686b      	ldr	r3, [r5, #4]
 800d086:	2b0a      	cmp	r3, #10
 800d088:	bf18      	it	ne
 800d08a:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800d08e:	d003      	beq.n	800d098 <HAL_TIM_ConfigClockSource+0x3a0>
 800d090:	f033 0302 	bics.w	r3, r3, #2
 800d094:	f040 80c3 	bne.w	800d21e <HAL_TIM_ConfigClockSource+0x526>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d098:	68e9      	ldr	r1, [r5, #12]
 800d09a:	290f      	cmp	r1, #15
 800d09c:	f200 80f9 	bhi.w	800d292 <HAL_TIM_ConfigClockSource+0x59a>
      TIM_ETR_SetConfig(htim->Instance,
 800d0a0:	6820      	ldr	r0, [r4, #0]
 800d0a2:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800d0a4:	6882      	ldr	r2, [r0, #8]
 800d0a6:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0a8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800d0ac:	432b      	orrs	r3, r5
 800d0ae:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d0b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  TIMx->SMCR = tmpsmcr;
 800d0b4:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 800d0b6:	6822      	ldr	r2, [r4, #0]
 800d0b8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d0ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800d0be:	6093      	str	r3, [r2, #8]
      break;
 800d0c0:	e709      	b.n	800ced6 <HAL_TIM_ConfigClockSource+0x1de>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d0c2:	6822      	ldr	r2, [r4, #0]
 800d0c4:	4b86      	ldr	r3, [pc, #536]	; (800d2e0 <HAL_TIM_ConfigClockSource+0x5e8>)
 800d0c6:	4887      	ldr	r0, [pc, #540]	; (800d2e4 <HAL_TIM_ConfigClockSource+0x5ec>)
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	bf18      	it	ne
 800d0cc:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d0d0:	4985      	ldr	r1, [pc, #532]	; (800d2e8 <HAL_TIM_ConfigClockSource+0x5f0>)
 800d0d2:	bf14      	ite	ne
 800d0d4:	2301      	movne	r3, #1
 800d0d6:	2300      	moveq	r3, #0
 800d0d8:	4282      	cmp	r2, r0
 800d0da:	bf0c      	ite	eq
 800d0dc:	2300      	moveq	r3, #0
 800d0de:	f003 0301 	andne.w	r3, r3, #1
 800d0e2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800d0e6:	428a      	cmp	r2, r1
 800d0e8:	bf0c      	ite	eq
 800d0ea:	2300      	moveq	r3, #0
 800d0ec:	f003 0301 	andne.w	r3, r3, #1
 800d0f0:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800d0f4:	4282      	cmp	r2, r0
 800d0f6:	bf0c      	ite	eq
 800d0f8:	2300      	moveq	r3, #0
 800d0fa:	f003 0301 	andne.w	r3, r3, #1
 800d0fe:	428a      	cmp	r2, r1
 800d100:	bf0c      	ite	eq
 800d102:	2300      	moveq	r3, #0
 800d104:	f003 0301 	andne.w	r3, r3, #1
 800d108:	b11b      	cbz	r3, 800d112 <HAL_TIM_ConfigClockSource+0x41a>
 800d10a:	4b79      	ldr	r3, [pc, #484]	; (800d2f0 <HAL_TIM_ConfigClockSource+0x5f8>)
 800d10c:	429a      	cmp	r2, r3
 800d10e:	f040 8098 	bne.w	800d242 <HAL_TIM_ConfigClockSource+0x54a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d112:	686b      	ldr	r3, [r5, #4]
 800d114:	2b0a      	cmp	r3, #10
 800d116:	bf18      	it	ne
 800d118:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800d11c:	d003      	beq.n	800d126 <HAL_TIM_ConfigClockSource+0x42e>
 800d11e:	f033 0302 	bics.w	r3, r3, #2
 800d122:	f040 8088 	bne.w	800d236 <HAL_TIM_ConfigClockSource+0x53e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d126:	68ee      	ldr	r6, [r5, #12]
 800d128:	2e0f      	cmp	r6, #15
 800d12a:	f200 80ab 	bhi.w	800d284 <HAL_TIM_ConfigClockSource+0x58c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d12e:	6823      	ldr	r3, [r4, #0]
 800d130:	6868      	ldr	r0, [r5, #4]
  tmpccer = TIMx->CCER;
 800d132:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d134:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d136:	f022 020a 	bic.w	r2, r2, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d13a:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800d13e:	4310      	orrs	r0, r2
  tmpsmcr &= ~TIM_SMCR_TS;
 800d140:	4a6c      	ldr	r2, [pc, #432]	; (800d2f4 <HAL_TIM_ConfigClockSource+0x5fc>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d142:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d144:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d146:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d14a:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d14e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800d150:	6218      	str	r0, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d152:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800d154:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d156:	400a      	ands	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d158:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800d15c:	609a      	str	r2, [r3, #8]
 800d15e:	e6ba      	b.n	800ced6 <HAL_TIM_ConfigClockSource+0x1de>
  switch (sClockSourceConfig->ClockSource)
 800d160:	2b10      	cmp	r3, #16
 800d162:	d004      	beq.n	800d16e <HAL_TIM_ConfigClockSource+0x476>
 800d164:	2b20      	cmp	r3, #32
 800d166:	d002      	beq.n	800d16e <HAL_TIM_ConfigClockSource+0x476>
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f47f aeb4 	bne.w	800ced6 <HAL_TIM_ConfigClockSource+0x1de>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800d16e:	6821      	ldr	r1, [r4, #0]
 800d170:	4a5b      	ldr	r2, [pc, #364]	; (800d2e0 <HAL_TIM_ConfigClockSource+0x5e8>)
 800d172:	4e5c      	ldr	r6, [pc, #368]	; (800d2e4 <HAL_TIM_ConfigClockSource+0x5ec>)
 800d174:	4291      	cmp	r1, r2
 800d176:	bf18      	it	ne
 800d178:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 800d17c:	485a      	ldr	r0, [pc, #360]	; (800d2e8 <HAL_TIM_ConfigClockSource+0x5f0>)
 800d17e:	bf14      	ite	ne
 800d180:	2201      	movne	r2, #1
 800d182:	2200      	moveq	r2, #0
 800d184:	42b1      	cmp	r1, r6
 800d186:	bf0c      	ite	eq
 800d188:	2200      	moveq	r2, #0
 800d18a:	f002 0201 	andne.w	r2, r2, #1
 800d18e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800d192:	4281      	cmp	r1, r0
 800d194:	bf0c      	ite	eq
 800d196:	2200      	moveq	r2, #0
 800d198:	f002 0201 	andne.w	r2, r2, #1
 800d19c:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800d1a0:	42b1      	cmp	r1, r6
 800d1a2:	bf0c      	ite	eq
 800d1a4:	2200      	moveq	r2, #0
 800d1a6:	f002 0201 	andne.w	r2, r2, #1
 800d1aa:	4281      	cmp	r1, r0
 800d1ac:	bf0c      	ite	eq
 800d1ae:	2200      	moveq	r2, #0
 800d1b0:	f002 0201 	andne.w	r2, r2, #1
 800d1b4:	b112      	cbz	r2, 800d1bc <HAL_TIM_ConfigClockSource+0x4c4>
 800d1b6:	4a4e      	ldr	r2, [pc, #312]	; (800d2f0 <HAL_TIM_ConfigClockSource+0x5f8>)
 800d1b8:	4291      	cmp	r1, r2
 800d1ba:	d148      	bne.n	800d24e <HAL_TIM_ConfigClockSource+0x556>
  tmpsmcr = TIMx->SMCR;
 800d1bc:	6888      	ldr	r0, [r1, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d1be:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800d1c2:	4a4c      	ldr	r2, [pc, #304]	; (800d2f4 <HAL_TIM_ConfigClockSource+0x5fc>)
 800d1c4:	4002      	ands	r2, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d1c6:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800d1c8:	608b      	str	r3, [r1, #8]
 800d1ca:	e684      	b.n	800ced6 <HAL_TIM_ConfigClockSource+0x1de>
  switch (sClockSourceConfig->ClockSource)
 800d1cc:	4a4a      	ldr	r2, [pc, #296]	; (800d2f8 <HAL_TIM_ConfigClockSource+0x600>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d0cd      	beq.n	800d16e <HAL_TIM_ConfigClockSource+0x476>
 800d1d2:	3210      	adds	r2, #16
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d0ca      	beq.n	800d16e <HAL_TIM_ConfigClockSource+0x476>
 800d1d8:	3a20      	subs	r2, #32
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	f47f ae7b 	bne.w	800ced6 <HAL_TIM_ConfigClockSource+0x1de>
 800d1e0:	e7c5      	b.n	800d16e <HAL_TIM_ConfigClockSource+0x476>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800d1e2:	f241 21ab 	movw	r1, #4779	; 0x12ab
 800d1e6:	4845      	ldr	r0, [pc, #276]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d1e8:	f006 fd28 	bl	8013c3c <assert_failed>
 800d1ec:	e6ec      	b.n	800cfc8 <HAL_TIM_ConfigClockSource+0x2d0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800d1ee:	f241 2193 	movw	r1, #4755	; 0x1293
 800d1f2:	4842      	ldr	r0, [pc, #264]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d1f4:	f006 fd22 	bl	8013c3c <assert_failed>
 800d1f8:	e73f      	b.n	800d07a <HAL_TIM_ConfigClockSource+0x382>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800d1fa:	f44f 5194 	mov.w	r1, #4736	; 0x1280
 800d1fe:	483f      	ldr	r0, [pc, #252]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d200:	f006 fd1c 	bl	8013c3c <assert_failed>
 800d204:	e597      	b.n	800cd36 <HAL_TIM_ConfigClockSource+0x3e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d206:	f241 21e2 	movw	r1, #4834	; 0x12e2
 800d20a:	483c      	ldr	r0, [pc, #240]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d20c:	f006 fd16 	bl	8013c3c <assert_failed>
 800d210:	e5db      	b.n	800cdca <HAL_TIM_ConfigClockSource+0xd2>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d212:	f241 21d2 	movw	r1, #4818	; 0x12d2
 800d216:	4839      	ldr	r0, [pc, #228]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d218:	f006 fd10 	bl	8013c3c <assert_failed>
 800d21c:	e695      	b.n	800cf4a <HAL_TIM_ConfigClockSource+0x252>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d21e:	f241 2197 	movw	r1, #4759	; 0x1297
 800d222:	4836      	ldr	r0, [pc, #216]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d224:	f006 fd0a 	bl	8013c3c <assert_failed>
 800d228:	e736      	b.n	800d098 <HAL_TIM_ConfigClockSource+0x3a0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d22a:	f241 21af 	movw	r1, #4783	; 0x12af
 800d22e:	4833      	ldr	r0, [pc, #204]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d230:	f006 fd04 	bl	8013c3c <assert_failed>
 800d234:	e6d7      	b.n	800cfe6 <HAL_TIM_ConfigClockSource+0x2ee>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d236:	f241 21c2 	movw	r1, #4802	; 0x12c2
 800d23a:	4830      	ldr	r0, [pc, #192]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d23c:	f006 fcfe 	bl	8013c3c <assert_failed>
 800d240:	e771      	b.n	800d126 <HAL_TIM_ConfigClockSource+0x42e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d242:	f241 21bf 	movw	r1, #4799	; 0x12bf
 800d246:	482d      	ldr	r0, [pc, #180]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d248:	f006 fcf8 	bl	8013c3c <assert_failed>
 800d24c:	e761      	b.n	800d112 <HAL_TIM_ConfigClockSource+0x41a>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800d24e:	f241 21f7 	movw	r1, #4855	; 0x12f7
 800d252:	482a      	ldr	r0, [pc, #168]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d254:	f006 fcf2 	bl	8013c3c <assert_failed>
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	6821      	ldr	r1, [r4, #0]
 800d25c:	e7ae      	b.n	800d1bc <HAL_TIM_ConfigClockSource+0x4c4>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d25e:	f241 21cf 	movw	r1, #4815	; 0x12cf
 800d262:	4826      	ldr	r0, [pc, #152]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d264:	f006 fcea 	bl	8013c3c <assert_failed>
 800d268:	e665      	b.n	800cf36 <HAL_TIM_ConfigClockSource+0x23e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d26a:	f241 21df 	movw	r1, #4831	; 0x12df
 800d26e:	4823      	ldr	r0, [pc, #140]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d270:	f006 fce4 	bl	8013c3c <assert_failed>
 800d274:	e59f      	b.n	800cdb6 <HAL_TIM_ConfigClockSource+0xbe>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d276:	f241 21b0 	movw	r1, #4784	; 0x12b0
 800d27a:	4820      	ldr	r0, [pc, #128]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d27c:	f006 fcde 	bl	8013c3c <assert_failed>
 800d280:	68e9      	ldr	r1, [r5, #12]
 800d282:	e6b4      	b.n	800cfee <HAL_TIM_ConfigClockSource+0x2f6>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d284:	f241 21c3 	movw	r1, #4803	; 0x12c3
 800d288:	481c      	ldr	r0, [pc, #112]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d28a:	f006 fcd7 	bl	8013c3c <assert_failed>
 800d28e:	68ee      	ldr	r6, [r5, #12]
 800d290:	e74d      	b.n	800d12e <HAL_TIM_ConfigClockSource+0x436>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d292:	f241 2198 	movw	r1, #4760	; 0x1298
 800d296:	4819      	ldr	r0, [pc, #100]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d298:	f006 fcd0 	bl	8013c3c <assert_failed>
 800d29c:	68e9      	ldr	r1, [r5, #12]
 800d29e:	e6ff      	b.n	800d0a0 <HAL_TIM_ConfigClockSource+0x3a8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d2a0:	f241 21d3 	movw	r1, #4819	; 0x12d3
 800d2a4:	4815      	ldr	r0, [pc, #84]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d2a6:	f006 fcc9 	bl	8013c3c <assert_failed>
 800d2aa:	68ee      	ldr	r6, [r5, #12]
 800d2ac:	e651      	b.n	800cf52 <HAL_TIM_ConfigClockSource+0x25a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d2ae:	f241 21e3 	movw	r1, #4835	; 0x12e3
 800d2b2:	4812      	ldr	r0, [pc, #72]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d2b4:	f006 fcc2 	bl	8013c3c <assert_failed>
 800d2b8:	68ee      	ldr	r6, [r5, #12]
 800d2ba:	e58a      	b.n	800cdd2 <HAL_TIM_ConfigClockSource+0xda>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d2bc:	f241 21ae 	movw	r1, #4782	; 0x12ae
 800d2c0:	480e      	ldr	r0, [pc, #56]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d2c2:	f006 fcbb 	bl	8013c3c <assert_failed>
 800d2c6:	e684      	b.n	800cfd2 <HAL_TIM_ConfigClockSource+0x2da>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d2c8:	f241 2196 	movw	r1, #4758	; 0x1296
 800d2cc:	480b      	ldr	r0, [pc, #44]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d2ce:	f006 fcb5 	bl	8013c3c <assert_failed>
 800d2d2:	e6d7      	b.n	800d084 <HAL_TIM_ConfigClockSource+0x38c>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d2d4:	f241 218c 	movw	r1, #4748	; 0x128c
 800d2d8:	4808      	ldr	r0, [pc, #32]	; (800d2fc <HAL_TIM_ConfigClockSource+0x604>)
 800d2da:	f006 fcaf 	bl	8013c3c <assert_failed>
 800d2de:	e5fa      	b.n	800ced6 <HAL_TIM_ConfigClockSource+0x1de>
 800d2e0:	40010000 	.word	0x40010000
 800d2e4:	40000400 	.word	0x40000400
 800d2e8:	40000800 	.word	0x40000800
 800d2ec:	40010400 	.word	0x40010400
 800d2f0:	40014000 	.word	0x40014000
 800d2f4:	ffcfff8f 	.word	0xffcfff8f
 800d2f8:	00100030 	.word	0x00100030
 800d2fc:	0802a570 	.word	0x0802a570

0800d300 <TIM_OC2_SetConfig>:
{
 800d300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d304:	6a02      	ldr	r2, [r0, #32]
{
 800d306:	460e      	mov	r6, r1
 800d308:	4604      	mov	r4, r0
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d30a:	4b31      	ldr	r3, [pc, #196]	; (800d3d0 <TIM_OC2_SetConfig+0xd0>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d30c:	f022 0210 	bic.w	r2, r2, #16
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d310:	4930      	ldr	r1, [pc, #192]	; (800d3d4 <TIM_OC2_SetConfig+0xd4>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d312:	6202      	str	r2, [r0, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d314:	428c      	cmp	r4, r1
  tmpccer = TIMx->CCER;
 800d316:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800d318:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800d31a:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800d31c:	f025 0520 	bic.w	r5, r5, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d320:	68b0      	ldr	r0, [r6, #8]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d322:	ea03 0302 	and.w	r3, r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d326:	6832      	ldr	r2, [r6, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d328:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d32c:	ea43 2802 	orr.w	r8, r3, r2, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d330:	d023      	beq.n	800d37a <TIM_OC2_SetConfig+0x7a>
 800d332:	4b29      	ldr	r3, [pc, #164]	; (800d3d8 <TIM_OC2_SetConfig+0xd8>)
 800d334:	429c      	cmp	r4, r3
 800d336:	d020      	beq.n	800d37a <TIM_OC2_SetConfig+0x7a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d338:	4a28      	ldr	r2, [pc, #160]	; (800d3dc <TIM_OC2_SetConfig+0xdc>)
 800d33a:	4b29      	ldr	r3, [pc, #164]	; (800d3e0 <TIM_OC2_SetConfig+0xe0>)
 800d33c:	429c      	cmp	r4, r3
 800d33e:	bf18      	it	ne
 800d340:	4294      	cmpne	r4, r2
 800d342:	d003      	beq.n	800d34c <TIM_OC2_SetConfig+0x4c>
 800d344:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d348:	429c      	cmp	r4, r3
 800d34a:	d10e      	bne.n	800d36a <TIM_OC2_SetConfig+0x6a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d34c:	69b3      	ldr	r3, [r6, #24]
 800d34e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800d352:	d120      	bne.n	800d396 <TIM_OC2_SetConfig+0x96>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d354:	6971      	ldr	r1, [r6, #20]
 800d356:	f431 7380 	bics.w	r3, r1, #256	; 0x100
 800d35a:	d125      	bne.n	800d3a8 <TIM_OC2_SetConfig+0xa8>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d35c:	f427 6240 	bic.w	r2, r7, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d360:	69b3      	ldr	r3, [r6, #24]
 800d362:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800d366:	ea42 0781 	orr.w	r7, r2, r1, lsl #2
  TIMx->CR2 = tmpcr2;
 800d36a:	6067      	str	r7, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800d36c:	f8c4 8018 	str.w	r8, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800d370:	6873      	ldr	r3, [r6, #4]
 800d372:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800d374:	6225      	str	r5, [r4, #32]
}
 800d376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d37a:	68f3      	ldr	r3, [r6, #12]
 800d37c:	f033 0208 	bics.w	r2, r3, #8
 800d380:	d119      	bne.n	800d3b6 <TIM_OC2_SetConfig+0xb6>
    tmpccer &= ~TIM_CCER_CC2NP;
 800d382:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d386:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800d38a:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d38e:	69b3      	ldr	r3, [r6, #24]
 800d390:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800d394:	d0de      	beq.n	800d354 <TIM_OC2_SetConfig+0x54>
 800d396:	f641 015f 	movw	r1, #6239	; 0x185f
 800d39a:	4812      	ldr	r0, [pc, #72]	; (800d3e4 <TIM_OC2_SetConfig+0xe4>)
 800d39c:	f006 fc4e 	bl	8013c3c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d3a0:	6971      	ldr	r1, [r6, #20]
 800d3a2:	f431 7380 	bics.w	r3, r1, #256	; 0x100
 800d3a6:	d0d9      	beq.n	800d35c <TIM_OC2_SetConfig+0x5c>
 800d3a8:	f44f 51c3 	mov.w	r1, #6240	; 0x1860
 800d3ac:	480d      	ldr	r0, [pc, #52]	; (800d3e4 <TIM_OC2_SetConfig+0xe4>)
 800d3ae:	f006 fc45 	bl	8013c3c <assert_failed>
 800d3b2:	6971      	ldr	r1, [r6, #20]
 800d3b4:	e7d2      	b.n	800d35c <TIM_OC2_SetConfig+0x5c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d3b6:	f641 0151 	movw	r1, #6225	; 0x1851
 800d3ba:	480a      	ldr	r0, [pc, #40]	; (800d3e4 <TIM_OC2_SetConfig+0xe4>)
 800d3bc:	f006 fc3e 	bl	8013c3c <assert_failed>
    tmpccer &= ~TIM_CCER_CC2NP;
 800d3c0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800d3c4:	68f3      	ldr	r3, [r6, #12]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d3c6:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800d3ca:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 800d3ce:	e7de      	b.n	800d38e <TIM_OC2_SetConfig+0x8e>
 800d3d0:	feff8cff 	.word	0xfeff8cff
 800d3d4:	40010000 	.word	0x40010000
 800d3d8:	40010400 	.word	0x40010400
 800d3dc:	40014000 	.word	0x40014000
 800d3e0:	40014400 	.word	0x40014400
 800d3e4:	0802a570 	.word	0x0802a570

0800d3e8 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800d3e8:	2a14      	cmp	r2, #20
{
 800d3ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3ee:	4616      	mov	r6, r2
 800d3f0:	4604      	mov	r4, r0
 800d3f2:	460d      	mov	r5, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800d3f4:	f240 80a2 	bls.w	800d53c <HAL_TIM_PWM_ConfigChannel+0x154>
 800d3f8:	2a3c      	cmp	r2, #60	; 0x3c
 800d3fa:	f040 80a4 	bne.w	800d546 <HAL_TIM_PWM_ConfigChannel+0x15e>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800d3fe:	682b      	ldr	r3, [r5, #0]
 800d400:	4a9b      	ldr	r2, [pc, #620]	; (800d670 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800d402:	f023 0110 	bic.w	r1, r3, #16
 800d406:	4291      	cmp	r1, r2
 800d408:	d004      	beq.n	800d414 <HAL_TIM_PWM_ConfigChannel+0x2c>
 800d40a:	4a9a      	ldr	r2, [pc, #616]	; (800d674 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800d40c:	401a      	ands	r2, r3
 800d40e:	2a60      	cmp	r2, #96	; 0x60
 800d410:	f040 8235 	bne.w	800d87e <HAL_TIM_PWM_ConfigChannel+0x496>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800d414:	68ab      	ldr	r3, [r5, #8]
 800d416:	f033 0302 	bics.w	r3, r3, #2
 800d41a:	f040 809a 	bne.w	800d552 <HAL_TIM_PWM_ConfigChannel+0x16a>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800d41e:	692b      	ldr	r3, [r5, #16]
 800d420:	f033 0304 	bics.w	r3, r3, #4
 800d424:	f040 809f 	bne.w	800d566 <HAL_TIM_PWM_ConfigChannel+0x17e>
  __HAL_LOCK(htim);
 800d428:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	f000 80a4 	beq.w	800d57a <HAL_TIM_PWM_ConfigChannel+0x192>
 800d432:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d434:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800d436:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d43a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800d43e:	2e14      	cmp	r6, #20
 800d440:	d873      	bhi.n	800d52a <HAL_TIM_PWM_ConfigChannel+0x142>
 800d442:	e8df f016 	tbh	[pc, r6, lsl #1]
 800d446:	0015      	.short	0x0015
 800d448:	00720072 	.word	0x00720072
 800d44c:	009d0072 	.word	0x009d0072
 800d450:	00720072 	.word	0x00720072
 800d454:	00e00072 	.word	0x00e00072
 800d458:	00720072 	.word	0x00720072
 800d45c:	01290072 	.word	0x01290072
 800d460:	00720072 	.word	0x00720072
 800d464:	018e0072 	.word	0x018e0072
 800d468:	00720072 	.word	0x00720072
 800d46c:	01d50072 	.word	0x01d50072
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d470:	6820      	ldr	r0, [r4, #0]
 800d472:	4b81      	ldr	r3, [pc, #516]	; (800d678 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800d474:	4a81      	ldr	r2, [pc, #516]	; (800d67c <HAL_TIM_PWM_ConfigChannel+0x294>)
 800d476:	4298      	cmp	r0, r3
 800d478:	bf18      	it	ne
 800d47a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d47e:	4980      	ldr	r1, [pc, #512]	; (800d680 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800d480:	bf14      	ite	ne
 800d482:	2301      	movne	r3, #1
 800d484:	2300      	moveq	r3, #0
 800d486:	4290      	cmp	r0, r2
 800d488:	bf0c      	ite	eq
 800d48a:	2300      	moveq	r3, #0
 800d48c:	f003 0301 	andne.w	r3, r3, #1
 800d490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d494:	4288      	cmp	r0, r1
 800d496:	bf0c      	ite	eq
 800d498:	2300      	moveq	r3, #0
 800d49a:	f003 0301 	andne.w	r3, r3, #1
 800d49e:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800d4a2:	4290      	cmp	r0, r2
 800d4a4:	bf0c      	ite	eq
 800d4a6:	2300      	moveq	r3, #0
 800d4a8:	f003 0301 	andne.w	r3, r3, #1
 800d4ac:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d4b0:	4288      	cmp	r0, r1
 800d4b2:	bf0c      	ite	eq
 800d4b4:	2300      	moveq	r3, #0
 800d4b6:	f003 0301 	andne.w	r3, r3, #1
 800d4ba:	f5a1 4168 	sub.w	r1, r1, #59392	; 0xe800
 800d4be:	4290      	cmp	r0, r2
 800d4c0:	bf0c      	ite	eq
 800d4c2:	2300      	moveq	r3, #0
 800d4c4:	f003 0301 	andne.w	r3, r3, #1
 800d4c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d4cc:	4288      	cmp	r0, r1
 800d4ce:	bf0c      	ite	eq
 800d4d0:	2300      	moveq	r3, #0
 800d4d2:	f003 0301 	andne.w	r3, r3, #1
 800d4d6:	f501 3192 	add.w	r1, r1, #74752	; 0x12400
 800d4da:	4290      	cmp	r0, r2
 800d4dc:	bf0c      	ite	eq
 800d4de:	2300      	moveq	r3, #0
 800d4e0:	f003 0301 	andne.w	r3, r3, #1
 800d4e4:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 800d4e8:	4288      	cmp	r0, r1
 800d4ea:	bf0c      	ite	eq
 800d4ec:	2300      	moveq	r3, #0
 800d4ee:	f003 0301 	andne.w	r3, r3, #1
 800d4f2:	4290      	cmp	r0, r2
 800d4f4:	bf0c      	ite	eq
 800d4f6:	2300      	moveq	r3, #0
 800d4f8:	f003 0301 	andne.w	r3, r3, #1
 800d4fc:	b11b      	cbz	r3, 800d506 <HAL_TIM_PWM_ConfigChannel+0x11e>
 800d4fe:	4b61      	ldr	r3, [pc, #388]	; (800d684 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800d500:	4298      	cmp	r0, r3
 800d502:	f040 81ec 	bne.w	800d8de <HAL_TIM_PWM_ConfigChannel+0x4f6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d506:	4629      	mov	r1, r5
 800d508:	f7fe ffe6 	bl	800c4d8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d50c:	6822      	ldr	r2, [r4, #0]
 800d50e:	6993      	ldr	r3, [r2, #24]
 800d510:	f043 0308 	orr.w	r3, r3, #8
 800d514:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d516:	6822      	ldr	r2, [r4, #0]
 800d518:	6993      	ldr	r3, [r2, #24]
 800d51a:	f023 0304 	bic.w	r3, r3, #4
 800d51e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d520:	6822      	ldr	r2, [r4, #0]
 800d522:	6929      	ldr	r1, [r5, #16]
 800d524:	6993      	ldr	r3, [r2, #24]
 800d526:	430b      	orrs	r3, r1
 800d528:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 800d52a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d52c:	2201      	movs	r2, #1
  return HAL_OK;
 800d52e:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800d530:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d534:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800d53c:	4b52      	ldr	r3, [pc, #328]	; (800d688 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800d53e:	40d3      	lsrs	r3, r2
 800d540:	07db      	lsls	r3, r3, #31
 800d542:	f53f af5c 	bmi.w	800d3fe <HAL_TIM_PWM_ConfigChannel+0x16>
 800d546:	f640 611c 	movw	r1, #3612	; 0xe1c
 800d54a:	4850      	ldr	r0, [pc, #320]	; (800d68c <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800d54c:	f006 fb76 	bl	8013c3c <assert_failed>
 800d550:	e755      	b.n	800d3fe <HAL_TIM_PWM_ConfigChannel+0x16>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800d552:	f640 611e 	movw	r1, #3614	; 0xe1e
 800d556:	484d      	ldr	r0, [pc, #308]	; (800d68c <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800d558:	f006 fb70 	bl	8013c3c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800d55c:	692b      	ldr	r3, [r5, #16]
 800d55e:	f033 0304 	bics.w	r3, r3, #4
 800d562:	f43f af61 	beq.w	800d428 <HAL_TIM_PWM_ConfigChannel+0x40>
 800d566:	f640 611f 	movw	r1, #3615	; 0xe1f
 800d56a:	4848      	ldr	r0, [pc, #288]	; (800d68c <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800d56c:	f006 fb66 	bl	8013c3c <assert_failed>
  __HAL_LOCK(htim);
 800d570:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d574:	2b01      	cmp	r3, #1
 800d576:	f47f af5c 	bne.w	800d432 <HAL_TIM_PWM_ConfigChannel+0x4a>
 800d57a:	2002      	movs	r0, #2
}
 800d57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d580:	6820      	ldr	r0, [r4, #0]
 800d582:	4b3d      	ldr	r3, [pc, #244]	; (800d678 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800d584:	4a3d      	ldr	r2, [pc, #244]	; (800d67c <HAL_TIM_PWM_ConfigChannel+0x294>)
 800d586:	4298      	cmp	r0, r3
 800d588:	bf18      	it	ne
 800d58a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d58e:	493c      	ldr	r1, [pc, #240]	; (800d680 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800d590:	bf14      	ite	ne
 800d592:	2301      	movne	r3, #1
 800d594:	2300      	moveq	r3, #0
 800d596:	4290      	cmp	r0, r2
 800d598:	bf0c      	ite	eq
 800d59a:	2300      	moveq	r3, #0
 800d59c:	f003 0301 	andne.w	r3, r3, #1
 800d5a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d5a4:	4288      	cmp	r0, r1
 800d5a6:	bf0c      	ite	eq
 800d5a8:	2300      	moveq	r3, #0
 800d5aa:	f003 0301 	andne.w	r3, r3, #1
 800d5ae:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800d5b2:	4290      	cmp	r0, r2
 800d5b4:	bf0c      	ite	eq
 800d5b6:	2300      	moveq	r3, #0
 800d5b8:	f003 0301 	andne.w	r3, r3, #1
 800d5bc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d5c0:	4288      	cmp	r0, r1
 800d5c2:	bf0c      	ite	eq
 800d5c4:	2300      	moveq	r3, #0
 800d5c6:	f003 0301 	andne.w	r3, r3, #1
 800d5ca:	4290      	cmp	r0, r2
 800d5cc:	bf0c      	ite	eq
 800d5ce:	2300      	moveq	r3, #0
 800d5d0:	f003 0301 	andne.w	r3, r3, #1
 800d5d4:	b11b      	cbz	r3, 800d5de <HAL_TIM_PWM_ConfigChannel+0x1f6>
 800d5d6:	4b2e      	ldr	r3, [pc, #184]	; (800d690 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800d5d8:	4298      	cmp	r0, r3
 800d5da:	f040 8179 	bne.w	800d8d0 <HAL_TIM_PWM_ConfigChannel+0x4e8>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d5de:	4629      	mov	r1, r5
 800d5e0:	f7ff fe8e 	bl	800d300 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d5e4:	6822      	ldr	r2, [r4, #0]
 800d5e6:	6993      	ldr	r3, [r2, #24]
 800d5e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d5ec:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d5ee:	6822      	ldr	r2, [r4, #0]
 800d5f0:	6993      	ldr	r3, [r2, #24]
 800d5f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d5f6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d5f8:	6822      	ldr	r2, [r4, #0]
 800d5fa:	6929      	ldr	r1, [r5, #16]
 800d5fc:	6993      	ldr	r3, [r2, #24]
 800d5fe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d602:	6193      	str	r3, [r2, #24]
      break;
 800d604:	e791      	b.n	800d52a <HAL_TIM_PWM_ConfigChannel+0x142>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d606:	6820      	ldr	r0, [r4, #0]
 800d608:	4b1b      	ldr	r3, [pc, #108]	; (800d678 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800d60a:	4a1c      	ldr	r2, [pc, #112]	; (800d67c <HAL_TIM_PWM_ConfigChannel+0x294>)
 800d60c:	4298      	cmp	r0, r3
 800d60e:	bf18      	it	ne
 800d610:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d614:	491a      	ldr	r1, [pc, #104]	; (800d680 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800d616:	bf14      	ite	ne
 800d618:	2301      	movne	r3, #1
 800d61a:	2300      	moveq	r3, #0
 800d61c:	4290      	cmp	r0, r2
 800d61e:	bf0c      	ite	eq
 800d620:	2300      	moveq	r3, #0
 800d622:	f003 0301 	andne.w	r3, r3, #1
 800d626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d62a:	4288      	cmp	r0, r1
 800d62c:	bf0c      	ite	eq
 800d62e:	2300      	moveq	r3, #0
 800d630:	f003 0301 	andne.w	r3, r3, #1
 800d634:	4290      	cmp	r0, r2
 800d636:	bf0c      	ite	eq
 800d638:	2300      	moveq	r3, #0
 800d63a:	f003 0301 	andne.w	r3, r3, #1
 800d63e:	b11b      	cbz	r3, 800d648 <HAL_TIM_PWM_ConfigChannel+0x260>
 800d640:	4b14      	ldr	r3, [pc, #80]	; (800d694 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800d642:	4298      	cmp	r0, r3
 800d644:	f040 813d 	bne.w	800d8c2 <HAL_TIM_PWM_ConfigChannel+0x4da>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d648:	4629      	mov	r1, r5
 800d64a:	f7fe ffcd 	bl	800c5e8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d64e:	6822      	ldr	r2, [r4, #0]
 800d650:	69d3      	ldr	r3, [r2, #28]
 800d652:	f043 0308 	orr.w	r3, r3, #8
 800d656:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d658:	6822      	ldr	r2, [r4, #0]
 800d65a:	69d3      	ldr	r3, [r2, #28]
 800d65c:	f023 0304 	bic.w	r3, r3, #4
 800d660:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d662:	6822      	ldr	r2, [r4, #0]
 800d664:	6929      	ldr	r1, [r5, #16]
 800d666:	69d3      	ldr	r3, [r2, #28]
 800d668:	430b      	orrs	r3, r1
 800d66a:	61d3      	str	r3, [r2, #28]
      break;
 800d66c:	e75d      	b.n	800d52a <HAL_TIM_PWM_ConfigChannel+0x142>
 800d66e:	bf00      	nop
 800d670:	00010040 	.word	0x00010040
 800d674:	fffeffef 	.word	0xfffeffef
 800d678:	40010000 	.word	0x40010000
 800d67c:	40000400 	.word	0x40000400
 800d680:	40000800 	.word	0x40000800
 800d684:	40014800 	.word	0x40014800
 800d688:	00111111 	.word	0x00111111
 800d68c:	0802a570 	.word	0x0802a570
 800d690:	40014000 	.word	0x40014000
 800d694:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d698:	6826      	ldr	r6, [r4, #0]
 800d69a:	4b94      	ldr	r3, [pc, #592]	; (800d8ec <HAL_TIM_PWM_ConfigChannel+0x504>)
 800d69c:	4a94      	ldr	r2, [pc, #592]	; (800d8f0 <HAL_TIM_PWM_ConfigChannel+0x508>)
 800d69e:	429e      	cmp	r6, r3
 800d6a0:	bf18      	it	ne
 800d6a2:	f1b6 4f80 	cmpne.w	r6, #1073741824	; 0x40000000
 800d6a6:	4993      	ldr	r1, [pc, #588]	; (800d8f4 <HAL_TIM_PWM_ConfigChannel+0x50c>)
 800d6a8:	bf14      	ite	ne
 800d6aa:	2301      	movne	r3, #1
 800d6ac:	2300      	moveq	r3, #0
 800d6ae:	4296      	cmp	r6, r2
 800d6b0:	bf0c      	ite	eq
 800d6b2:	2300      	moveq	r3, #0
 800d6b4:	f003 0301 	andne.w	r3, r3, #1
 800d6b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d6bc:	428e      	cmp	r6, r1
 800d6be:	bf0c      	ite	eq
 800d6c0:	2300      	moveq	r3, #0
 800d6c2:	f003 0301 	andne.w	r3, r3, #1
 800d6c6:	4296      	cmp	r6, r2
 800d6c8:	bf0c      	ite	eq
 800d6ca:	2300      	moveq	r3, #0
 800d6cc:	f003 0301 	andne.w	r3, r3, #1
 800d6d0:	b11b      	cbz	r3, 800d6da <HAL_TIM_PWM_ConfigChannel+0x2f2>
 800d6d2:	4b89      	ldr	r3, [pc, #548]	; (800d8f8 <HAL_TIM_PWM_ConfigChannel+0x510>)
 800d6d4:	429e      	cmp	r6, r3
 800d6d6:	f040 80ed 	bne.w	800d8b4 <HAL_TIM_PWM_ConfigChannel+0x4cc>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d6da:	6a33      	ldr	r3, [r6, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6dc:	4983      	ldr	r1, [pc, #524]	; (800d8ec <HAL_TIM_PWM_ConfigChannel+0x504>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d6de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6e2:	428e      	cmp	r6, r1
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d6e4:	6233      	str	r3, [r6, #32]
  tmpccer = TIMx->CCER;
 800d6e6:	6a33      	ldr	r3, [r6, #32]
  tmpcr2 =  TIMx->CR2;
 800d6e8:	f8d6 9004 	ldr.w	r9, [r6, #4]
  tmpccmrx = TIMx->CCMR2;
 800d6ec:	69f7      	ldr	r7, [r6, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800d6ee:	f423 5800 	bic.w	r8, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d6f2:	68aa      	ldr	r2, [r5, #8]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d6f4:	f427 47e6 	bic.w	r7, r7, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6f8:	682b      	ldr	r3, [r5, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d6fa:	ea48 3802 	orr.w	r8, r8, r2, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6fe:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d702:	d00d      	beq.n	800d720 <HAL_TIM_PWM_ConfigChannel+0x338>
 800d704:	4b7c      	ldr	r3, [pc, #496]	; (800d8f8 <HAL_TIM_PWM_ConfigChannel+0x510>)
 800d706:	429e      	cmp	r6, r3
 800d708:	d00a      	beq.n	800d720 <HAL_TIM_PWM_ConfigChannel+0x338>
 800d70a:	4a7c      	ldr	r2, [pc, #496]	; (800d8fc <HAL_TIM_PWM_ConfigChannel+0x514>)
 800d70c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d710:	429e      	cmp	r6, r3
 800d712:	bf18      	it	ne
 800d714:	4296      	cmpne	r6, r2
 800d716:	d003      	beq.n	800d720 <HAL_TIM_PWM_ConfigChannel+0x338>
 800d718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d71c:	429e      	cmp	r6, r3
 800d71e:	d108      	bne.n	800d732 <HAL_TIM_PWM_ConfigChannel+0x34a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d720:	696b      	ldr	r3, [r5, #20]
 800d722:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800d726:	f040 80be 	bne.w	800d8a6 <HAL_TIM_PWM_ConfigChannel+0x4be>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d72a:	f429 4980 	bic.w	r9, r9, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d72e:	ea49 1983 	orr.w	r9, r9, r3, lsl #6
  TIMx->CR2 = tmpcr2;
 800d732:	f8c6 9004 	str.w	r9, [r6, #4]
  TIMx->CCMR2 = tmpccmrx;
 800d736:	61f7      	str	r7, [r6, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800d738:	686b      	ldr	r3, [r5, #4]
 800d73a:	6433      	str	r3, [r6, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800d73c:	f8c6 8020 	str.w	r8, [r6, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d740:	6822      	ldr	r2, [r4, #0]
 800d742:	69d3      	ldr	r3, [r2, #28]
 800d744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d748:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d74a:	6822      	ldr	r2, [r4, #0]
 800d74c:	69d3      	ldr	r3, [r2, #28]
 800d74e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d752:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d754:	6822      	ldr	r2, [r4, #0]
 800d756:	6929      	ldr	r1, [r5, #16]
 800d758:	69d3      	ldr	r3, [r2, #28]
 800d75a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d75e:	61d3      	str	r3, [r2, #28]
      break;
 800d760:	e6e3      	b.n	800d52a <HAL_TIM_PWM_ConfigChannel+0x142>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	4a61      	ldr	r2, [pc, #388]	; (800d8ec <HAL_TIM_PWM_ConfigChannel+0x504>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d004      	beq.n	800d774 <HAL_TIM_PWM_ConfigChannel+0x38c>
 800d76a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d76e:	4293      	cmp	r3, r2
 800d770:	f040 8092 	bne.w	800d898 <HAL_TIM_PWM_ConfigChannel+0x4b0>
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d774:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d776:	4f5d      	ldr	r7, [pc, #372]	; (800d8ec <HAL_TIM_PWM_ConfigChannel+0x504>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d778:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d77c:	42bb      	cmp	r3, r7
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d77e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800d780:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800d782:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800d786:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 800d788:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d78c:	68ae      	ldr	r6, [r5, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d78e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800d792:	6828      	ldr	r0, [r5, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d794:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800d798:	ea41 0100 	orr.w	r1, r1, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d79c:	d00d      	beq.n	800d7ba <HAL_TIM_PWM_ConfigChannel+0x3d2>
 800d79e:	4856      	ldr	r0, [pc, #344]	; (800d8f8 <HAL_TIM_PWM_ConfigChannel+0x510>)
 800d7a0:	4283      	cmp	r3, r0
 800d7a2:	d00a      	beq.n	800d7ba <HAL_TIM_PWM_ConfigChannel+0x3d2>
 800d7a4:	4e55      	ldr	r6, [pc, #340]	; (800d8fc <HAL_TIM_PWM_ConfigChannel+0x514>)
 800d7a6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800d7aa:	4283      	cmp	r3, r0
 800d7ac:	bf18      	it	ne
 800d7ae:	42b3      	cmpne	r3, r6
 800d7b0:	d003      	beq.n	800d7ba <HAL_TIM_PWM_ConfigChannel+0x3d2>
 800d7b2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d7b6:	4283      	cmp	r3, r0
 800d7b8:	d104      	bne.n	800d7c4 <HAL_TIM_PWM_ConfigChannel+0x3dc>
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d7ba:	f42c 3c80 	bic.w	ip, ip, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d7be:	6968      	ldr	r0, [r5, #20]
 800d7c0:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
  TIMx->CR2 = tmpcr2;
 800d7c4:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800d7c8:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800d7ca:	6869      	ldr	r1, [r5, #4]
 800d7cc:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 800d7ce:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d7d0:	6822      	ldr	r2, [r4, #0]
 800d7d2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d7d4:	f043 0308 	orr.w	r3, r3, #8
 800d7d8:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d7da:	6822      	ldr	r2, [r4, #0]
 800d7dc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d7de:	f023 0304 	bic.w	r3, r3, #4
 800d7e2:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d7e4:	6822      	ldr	r2, [r4, #0]
 800d7e6:	6929      	ldr	r1, [r5, #16]
 800d7e8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d7ea:	430b      	orrs	r3, r1
 800d7ec:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800d7ee:	e69c      	b.n	800d52a <HAL_TIM_PWM_ConfigChannel+0x142>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d7f0:	6823      	ldr	r3, [r4, #0]
 800d7f2:	4a3e      	ldr	r2, [pc, #248]	; (800d8ec <HAL_TIM_PWM_ConfigChannel+0x504>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d003      	beq.n	800d800 <HAL_TIM_PWM_ConfigChannel+0x418>
 800d7f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d144      	bne.n	800d88a <HAL_TIM_PWM_ConfigChannel+0x4a2>
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d800:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d802:	4f3a      	ldr	r7, [pc, #232]	; (800d8ec <HAL_TIM_PWM_ConfigChannel+0x504>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d804:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d808:	42bb      	cmp	r3, r7
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d80a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800d80c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800d80e:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800d812:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d814:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d818:	68ae      	ldr	r6, [r5, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d81a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d81e:	6828      	ldr	r0, [r5, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d820:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d824:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d828:	d00d      	beq.n	800d846 <HAL_TIM_PWM_ConfigChannel+0x45e>
 800d82a:	4833      	ldr	r0, [pc, #204]	; (800d8f8 <HAL_TIM_PWM_ConfigChannel+0x510>)
 800d82c:	4283      	cmp	r3, r0
 800d82e:	d00a      	beq.n	800d846 <HAL_TIM_PWM_ConfigChannel+0x45e>
 800d830:	4e32      	ldr	r6, [pc, #200]	; (800d8fc <HAL_TIM_PWM_ConfigChannel+0x514>)
 800d832:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800d836:	4283      	cmp	r3, r0
 800d838:	bf18      	it	ne
 800d83a:	42b3      	cmpne	r3, r6
 800d83c:	d003      	beq.n	800d846 <HAL_TIM_PWM_ConfigChannel+0x45e>
 800d83e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d842:	4283      	cmp	r3, r0
 800d844:	d104      	bne.n	800d850 <HAL_TIM_PWM_ConfigChannel+0x468>
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d846:	f42c 3c00 	bic.w	ip, ip, #131072	; 0x20000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d84a:	6968      	ldr	r0, [r5, #20]
 800d84c:	ea4c 2c80 	orr.w	ip, ip, r0, lsl #10
  TIMx->CR2 = tmpcr2;
 800d850:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800d854:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800d856:	6869      	ldr	r1, [r5, #4]
 800d858:	65d9      	str	r1, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 800d85a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d85c:	6822      	ldr	r2, [r4, #0]
 800d85e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d860:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d864:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d866:	6822      	ldr	r2, [r4, #0]
 800d868:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d86a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d86e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d870:	6822      	ldr	r2, [r4, #0]
 800d872:	6929      	ldr	r1, [r5, #16]
 800d874:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d876:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d87a:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800d87c:	e655      	b.n	800d52a <HAL_TIM_PWM_ConfigChannel+0x142>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800d87e:	f640 611d 	movw	r1, #3613	; 0xe1d
 800d882:	481f      	ldr	r0, [pc, #124]	; (800d900 <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d884:	f006 f9da 	bl	8013c3c <assert_failed>
 800d888:	e5c4      	b.n	800d414 <HAL_TIM_PWM_ConfigChannel+0x2c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d88a:	f44f 6168 	mov.w	r1, #3712	; 0xe80
 800d88e:	481c      	ldr	r0, [pc, #112]	; (800d900 <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d890:	f006 f9d4 	bl	8013c3c <assert_failed>
 800d894:	6823      	ldr	r3, [r4, #0]
 800d896:	e7b3      	b.n	800d800 <HAL_TIM_PWM_ConfigChannel+0x418>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d898:	f640 616f 	movw	r1, #3695	; 0xe6f
 800d89c:	4818      	ldr	r0, [pc, #96]	; (800d900 <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d89e:	f006 f9cd 	bl	8013c3c <assert_failed>
 800d8a2:	6823      	ldr	r3, [r4, #0]
 800d8a4:	e766      	b.n	800d774 <HAL_TIM_PWM_ConfigChannel+0x38c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d8a6:	f641 01e8 	movw	r1, #6376	; 0x18e8
 800d8aa:	4815      	ldr	r0, [pc, #84]	; (800d900 <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d8ac:	f006 f9c6 	bl	8013c3c <assert_failed>
 800d8b0:	696b      	ldr	r3, [r5, #20]
 800d8b2:	e73a      	b.n	800d72a <HAL_TIM_PWM_ConfigChannel+0x342>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d8b4:	f640 615e 	movw	r1, #3678	; 0xe5e
 800d8b8:	4811      	ldr	r0, [pc, #68]	; (800d900 <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d8ba:	f006 f9bf 	bl	8013c3c <assert_failed>
 800d8be:	6826      	ldr	r6, [r4, #0]
 800d8c0:	e70b      	b.n	800d6da <HAL_TIM_PWM_ConfigChannel+0x2f2>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d8c2:	480f      	ldr	r0, [pc, #60]	; (800d900 <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d8c4:	f640 614d 	movw	r1, #3661	; 0xe4d
 800d8c8:	f006 f9b8 	bl	8013c3c <assert_failed>
 800d8cc:	6820      	ldr	r0, [r4, #0]
 800d8ce:	e6bb      	b.n	800d648 <HAL_TIM_PWM_ConfigChannel+0x260>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d8d0:	480b      	ldr	r0, [pc, #44]	; (800d900 <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d8d2:	f640 613c 	movw	r1, #3644	; 0xe3c
 800d8d6:	f006 f9b1 	bl	8013c3c <assert_failed>
 800d8da:	6820      	ldr	r0, [r4, #0]
 800d8dc:	e67f      	b.n	800d5de <HAL_TIM_PWM_ConfigChannel+0x1f6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d8de:	4808      	ldr	r0, [pc, #32]	; (800d900 <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d8e0:	f640 612b 	movw	r1, #3627	; 0xe2b
 800d8e4:	f006 f9aa 	bl	8013c3c <assert_failed>
 800d8e8:	6820      	ldr	r0, [r4, #0]
 800d8ea:	e60c      	b.n	800d506 <HAL_TIM_PWM_ConfigChannel+0x11e>
 800d8ec:	40010000 	.word	0x40010000
 800d8f0:	40000400 	.word	0x40000400
 800d8f4:	40000800 	.word	0x40000800
 800d8f8:	40010400 	.word	0x40010400
 800d8fc:	40014000 	.word	0x40014000
 800d900:	0802a570 	.word	0x0802a570

0800d904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800d906:	4b60      	ldr	r3, [pc, #384]	; (800da88 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
{
 800d908:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800d90a:	6802      	ldr	r2, [r0, #0]
{
 800d90c:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800d90e:	4e5f      	ldr	r6, [pc, #380]	; (800da8c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800d910:	429a      	cmp	r2, r3
 800d912:	bf18      	it	ne
 800d914:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d918:	485d      	ldr	r0, [pc, #372]	; (800da90 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800d91a:	495e      	ldr	r1, [pc, #376]	; (800da94 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800d91c:	bf14      	ite	ne
 800d91e:	2301      	movne	r3, #1
 800d920:	2300      	moveq	r3, #0
 800d922:	42b2      	cmp	r2, r6
 800d924:	bf0c      	ite	eq
 800d926:	2300      	moveq	r3, #0
 800d928:	f003 0301 	andne.w	r3, r3, #1
 800d92c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800d930:	4282      	cmp	r2, r0
 800d932:	bf0c      	ite	eq
 800d934:	2300      	moveq	r3, #0
 800d936:	f003 0301 	andne.w	r3, r3, #1
 800d93a:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800d93e:	428a      	cmp	r2, r1
 800d940:	bf0c      	ite	eq
 800d942:	2300      	moveq	r3, #0
 800d944:	f003 0301 	andne.w	r3, r3, #1
 800d948:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800d94c:	42b2      	cmp	r2, r6
 800d94e:	bf0c      	ite	eq
 800d950:	2300      	moveq	r3, #0
 800d952:	f003 0301 	andne.w	r3, r3, #1
 800d956:	4282      	cmp	r2, r0
 800d958:	bf0c      	ite	eq
 800d95a:	2300      	moveq	r3, #0
 800d95c:	f003 0301 	andne.w	r3, r3, #1
 800d960:	428a      	cmp	r2, r1
 800d962:	bf0c      	ite	eq
 800d964:	2300      	moveq	r3, #0
 800d966:	f003 0301 	andne.w	r3, r3, #1
 800d96a:	b113      	cbz	r3, 800d972 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800d96c:	4b4a      	ldr	r3, [pc, #296]	; (800da98 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800d96e:	429a      	cmp	r2, r3
 800d970:	d175      	bne.n	800da5e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800d972:	682b      	ldr	r3, [r5, #0]
 800d974:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800d978:	2b40      	cmp	r3, #64	; 0x40
 800d97a:	d001      	beq.n	800d980 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d174      	bne.n	800da6a <HAL_TIMEx_MasterConfigSynchronization+0x166>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800d980:	68ab      	ldr	r3, [r5, #8]
 800d982:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800d986:	d15f      	bne.n	800da48 <HAL_TIMEx_MasterConfigSynchronization+0x144>

  /* Check input state */
  __HAL_LOCK(htim);
 800d988:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d064      	beq.n	800da5a <HAL_TIMEx_MasterConfigSynchronization+0x156>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d990:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 800d992:	2001      	movs	r0, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d994:	4b3c      	ldr	r3, [pc, #240]	; (800da88 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d996:	2102      	movs	r1, #2
  __HAL_LOCK(htim);
 800d998:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d99c:	429a      	cmp	r2, r3
  htim->State = HAL_TIM_STATE_BUSY;
 800d99e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800d9a2:	6857      	ldr	r7, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800d9a4:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d9a6:	d037      	beq.n	800da18 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800d9a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d033      	beq.n	800da18 <HAL_TIMEx_MasterConfigSynchronization+0x114>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d9b0:	6829      	ldr	r1, [r5, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800d9b2:	f027 0770 	bic.w	r7, r7, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9b6:	4b34      	ldr	r3, [pc, #208]	; (800da88 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d9b8:	430f      	orrs	r7, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9ba:	4934      	ldr	r1, [pc, #208]	; (800da8c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800d9bc:	4835      	ldr	r0, [pc, #212]	; (800da94 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
  htim->Instance->CR2 = tmpcr2;
 800d9be:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9c0:	6822      	ldr	r2, [r4, #0]
 800d9c2:	4f33      	ldr	r7, [pc, #204]	; (800da90 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800d9c4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d9c8:	bf18      	it	ne
 800d9ca:	429a      	cmpne	r2, r3
 800d9cc:	bf0c      	ite	eq
 800d9ce:	2301      	moveq	r3, #1
 800d9d0:	2300      	movne	r3, #0
 800d9d2:	428a      	cmp	r2, r1
 800d9d4:	bf08      	it	eq
 800d9d6:	f043 0301 	orreq.w	r3, r3, #1
 800d9da:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 800d9de:	42ba      	cmp	r2, r7
 800d9e0:	bf08      	it	eq
 800d9e2:	f043 0301 	orreq.w	r3, r3, #1
 800d9e6:	4282      	cmp	r2, r0
 800d9e8:	bf08      	it	eq
 800d9ea:	f043 0301 	orreq.w	r3, r3, #1
 800d9ee:	428a      	cmp	r2, r1
 800d9f0:	bf08      	it	eq
 800d9f2:	f043 0301 	orreq.w	r3, r3, #1
 800d9f6:	b913      	cbnz	r3, 800d9fe <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 800d9f8:	4b28      	ldr	r3, [pc, #160]	; (800da9c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d104      	bne.n	800da08 <HAL_TIMEx_MasterConfigSynchronization+0x104>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d9fe:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da00:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da04:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da06:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800da08:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800da0a:	2201      	movs	r2, #1

  return HAL_OK;
 800da0c:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800da0e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800da12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800da16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800da18:	6868      	ldr	r0, [r5, #4]
 800da1a:	f420 1340 	bic.w	r3, r0, #3145728	; 0x300000
 800da1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da22:	bf18      	it	ne
 800da24:	2b00      	cmpne	r3, #0
 800da26:	bf14      	ite	ne
 800da28:	2101      	movne	r1, #1
 800da2a:	2100      	moveq	r1, #0
 800da2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800da30:	bf0c      	ite	eq
 800da32:	2100      	moveq	r1, #0
 800da34:	f001 0101 	andne.w	r1, r1, #1
 800da38:	b111      	cbz	r1, 800da40 <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 800da3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800da3e:	d11a      	bne.n	800da76 <HAL_TIMEx_MasterConfigSynchronization+0x172>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800da40:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800da44:	4307      	orrs	r7, r0
 800da46:	e7b3      	b.n	800d9b0 <HAL_TIMEx_MasterConfigSynchronization+0xac>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800da48:	f240 6175 	movw	r1, #1653	; 0x675
 800da4c:	4814      	ldr	r0, [pc, #80]	; (800daa0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800da4e:	f006 f8f5 	bl	8013c3c <assert_failed>
  __HAL_LOCK(htim);
 800da52:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800da56:	2b01      	cmp	r3, #1
 800da58:	d19a      	bne.n	800d990 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800da5a:	2002      	movs	r0, #2
}
 800da5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800da5e:	f240 6173 	movw	r1, #1651	; 0x673
 800da62:	480f      	ldr	r0, [pc, #60]	; (800daa0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800da64:	f006 f8ea 	bl	8013c3c <assert_failed>
 800da68:	e783      	b.n	800d972 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800da6a:	f240 6174 	movw	r1, #1652	; 0x674
 800da6e:	480c      	ldr	r0, [pc, #48]	; (800daa0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800da70:	f006 f8e4 	bl	8013c3c <assert_failed>
 800da74:	e784      	b.n	800d980 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800da76:	480a      	ldr	r0, [pc, #40]	; (800daa0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800da78:	f240 6187 	movw	r1, #1671	; 0x687
 800da7c:	f006 f8de 	bl	8013c3c <assert_failed>
 800da80:	6868      	ldr	r0, [r5, #4]
 800da82:	6822      	ldr	r2, [r4, #0]
 800da84:	e7dc      	b.n	800da40 <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 800da86:	bf00      	nop
 800da88:	40010000 	.word	0x40010000
 800da8c:	40000400 	.word	0x40000400
 800da90:	40000800 	.word	0x40000800
 800da94:	40000c00 	.word	0x40000c00
 800da98:	40014000 	.word	0x40014000
 800da9c:	40001800 	.word	0x40001800
 800daa0:	0802a5a8 	.word	0x0802a5a8

0800daa4 <FMC_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800daa4:	4b5e      	ldr	r3, [pc, #376]	; (800dc20 <FMC_SDRAM_Init+0x17c>)
 800daa6:	4298      	cmp	r0, r3
{
 800daa8:	b570      	push	{r4, r5, r6, lr}
 800daaa:	4605      	mov	r5, r0
 800daac:	460c      	mov	r4, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800daae:	d004      	beq.n	800daba <FMC_SDRAM_Init+0x16>
 800dab0:	f240 311a 	movw	r1, #794	; 0x31a
 800dab4:	485b      	ldr	r0, [pc, #364]	; (800dc24 <FMC_SDRAM_Init+0x180>)
 800dab6:	f006 f8c1 	bl	8013c3c <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 800daba:	6823      	ldr	r3, [r4, #0]
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d904      	bls.n	800daca <FMC_SDRAM_Init+0x26>
 800dac0:	f240 311b 	movw	r1, #795	; 0x31b
 800dac4:	4857      	ldr	r0, [pc, #348]	; (800dc24 <FMC_SDRAM_Init+0x180>)
 800dac6:	f006 f8b9 	bl	8013c3c <assert_failed>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 800daca:	6863      	ldr	r3, [r4, #4]
 800dacc:	2b03      	cmp	r3, #3
 800dace:	f200 80a1 	bhi.w	800dc14 <FMC_SDRAM_Init+0x170>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 800dad2:	68a3      	ldr	r3, [r4, #8]
 800dad4:	f033 0204 	bics.w	r2, r3, #4
 800dad8:	d002      	beq.n	800dae0 <FMC_SDRAM_Init+0x3c>
 800dada:	2b08      	cmp	r3, #8
 800dadc:	f040 8094 	bne.w	800dc08 <FMC_SDRAM_Init+0x164>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 800dae0:	68e3      	ldr	r3, [r4, #12]
 800dae2:	f033 0210 	bics.w	r2, r3, #16
 800dae6:	d001      	beq.n	800daec <FMC_SDRAM_Init+0x48>
 800dae8:	2b20      	cmp	r3, #32
 800daea:	d17d      	bne.n	800dbe8 <FMC_SDRAM_Init+0x144>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 800daec:	6923      	ldr	r3, [r4, #16]
 800daee:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800daf2:	f040 8083 	bne.w	800dbfc <FMC_SDRAM_Init+0x158>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 800daf6:	6963      	ldr	r3, [r4, #20]
 800daf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dafc:	2a80      	cmp	r2, #128	; 0x80
 800dafe:	d002      	beq.n	800db06 <FMC_SDRAM_Init+0x62>
 800db00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db04:	d161      	bne.n	800dbca <FMC_SDRAM_Init+0x126>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 800db06:	69a3      	ldr	r3, [r4, #24]
 800db08:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800db0c:	d166      	bne.n	800dbdc <FMC_SDRAM_Init+0x138>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 800db0e:	69e3      	ldr	r3, [r4, #28]
 800db10:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800db14:	d002      	beq.n	800db1c <FMC_SDRAM_Init+0x78>
 800db16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800db1a:	d147      	bne.n	800dbac <FMC_SDRAM_Init+0x108>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 800db1c:	6a23      	ldr	r3, [r4, #32]
 800db1e:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800db22:	d14c      	bne.n	800dbbe <FMC_SDRAM_Init+0x11a>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));
 800db24:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800db26:	f432 5300 	bics.w	r3, r2, #8192	; 0x2000
 800db2a:	d002      	beq.n	800db32 <FMC_SDRAM_Init+0x8e>
 800db2c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800db30:	d11c      	bne.n	800db6c <FMC_SDRAM_Init+0xc8>

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800db32:	6821      	ldr	r1, [r4, #0]
 800db34:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800db38:	b319      	cbz	r1, 800db82 <FMC_SDRAM_Init+0xde>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800db3a:	6829      	ldr	r1, [r5, #0]
 800db3c:	4303      	orrs	r3, r0
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800db3e:	483a      	ldr	r0, [pc, #232]	; (800dc28 <FMC_SDRAM_Init+0x184>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800db40:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800db44:	430b      	orrs	r3, r1
 800db46:	4313      	orrs	r3, r2
 800db48:	602b      	str	r3, [r5, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800db4a:	68e2      	ldr	r2, [r4, #12]
 800db4c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800db50:	430b      	orrs	r3, r1
 800db52:	6921      	ldr	r1, [r4, #16]
 800db54:	4313      	orrs	r3, r2
 800db56:	e9d4 6205 	ldrd	r6, r2, [r4, #20]
 800db5a:	430b      	orrs	r3, r1
 800db5c:	6869      	ldr	r1, [r5, #4]
 800db5e:	4333      	orrs	r3, r6
 800db60:	4008      	ands	r0, r1
 800db62:	4313      	orrs	r3, r2
 800db64:	4303      	orrs	r3, r0
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800db66:	2000      	movs	r0, #0
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800db68:	606b      	str	r3, [r5, #4]
}
 800db6a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));
 800db6c:	f44f 7149 	mov.w	r1, #804	; 0x324
 800db70:	482c      	ldr	r0, [pc, #176]	; (800dc24 <FMC_SDRAM_Init+0x180>)
 800db72:	f006 f863 	bl	8013c3c <assert_failed>
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800db76:	6821      	ldr	r1, [r4, #0]
 800db78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800db7a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800db7e:	2900      	cmp	r1, #0
 800db80:	d1db      	bne.n	800db3a <FMC_SDRAM_Init+0x96>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800db82:	4303      	orrs	r3, r0
 800db84:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 800db88:	430b      	orrs	r3, r1
 800db8a:	68e1      	ldr	r1, [r4, #12]
 800db8c:	4303      	orrs	r3, r0
 800db8e:	6920      	ldr	r0, [r4, #16]
 800db90:	430b      	orrs	r3, r1
 800db92:	e9d4 1405 	ldrd	r1, r4, [r4, #20]
 800db96:	4303      	orrs	r3, r0
 800db98:	6828      	ldr	r0, [r5, #0]
 800db9a:	430b      	orrs	r3, r1
 800db9c:	4922      	ldr	r1, [pc, #136]	; (800dc28 <FMC_SDRAM_Init+0x184>)
 800db9e:	4323      	orrs	r3, r4
 800dba0:	4001      	ands	r1, r0
}
 800dba2:	2000      	movs	r0, #0
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800dba4:	430b      	orrs	r3, r1
 800dba6:	4313      	orrs	r3, r2
 800dba8:	602b      	str	r3, [r5, #0]
}
 800dbaa:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 800dbac:	f240 3122 	movw	r1, #802	; 0x322
 800dbb0:	481c      	ldr	r0, [pc, #112]	; (800dc24 <FMC_SDRAM_Init+0x180>)
 800dbb2:	f006 f843 	bl	8013c3c <assert_failed>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 800dbb6:	6a23      	ldr	r3, [r4, #32]
 800dbb8:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800dbbc:	d0b2      	beq.n	800db24 <FMC_SDRAM_Init+0x80>
 800dbbe:	f240 3123 	movw	r1, #803	; 0x323
 800dbc2:	4818      	ldr	r0, [pc, #96]	; (800dc24 <FMC_SDRAM_Init+0x180>)
 800dbc4:	f006 f83a 	bl	8013c3c <assert_failed>
 800dbc8:	e7ac      	b.n	800db24 <FMC_SDRAM_Init+0x80>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 800dbca:	f44f 7148 	mov.w	r1, #800	; 0x320
 800dbce:	4815      	ldr	r0, [pc, #84]	; (800dc24 <FMC_SDRAM_Init+0x180>)
 800dbd0:	f006 f834 	bl	8013c3c <assert_failed>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 800dbd4:	69a3      	ldr	r3, [r4, #24]
 800dbd6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800dbda:	d098      	beq.n	800db0e <FMC_SDRAM_Init+0x6a>
 800dbdc:	f240 3121 	movw	r1, #801	; 0x321
 800dbe0:	4810      	ldr	r0, [pc, #64]	; (800dc24 <FMC_SDRAM_Init+0x180>)
 800dbe2:	f006 f82b 	bl	8013c3c <assert_failed>
 800dbe6:	e792      	b.n	800db0e <FMC_SDRAM_Init+0x6a>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 800dbe8:	f240 311e 	movw	r1, #798	; 0x31e
 800dbec:	480d      	ldr	r0, [pc, #52]	; (800dc24 <FMC_SDRAM_Init+0x180>)
 800dbee:	f006 f825 	bl	8013c3c <assert_failed>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 800dbf2:	6923      	ldr	r3, [r4, #16]
 800dbf4:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800dbf8:	f43f af7d 	beq.w	800daf6 <FMC_SDRAM_Init+0x52>
 800dbfc:	f240 311f 	movw	r1, #799	; 0x31f
 800dc00:	4808      	ldr	r0, [pc, #32]	; (800dc24 <FMC_SDRAM_Init+0x180>)
 800dc02:	f006 f81b 	bl	8013c3c <assert_failed>
 800dc06:	e776      	b.n	800daf6 <FMC_SDRAM_Init+0x52>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 800dc08:	f240 311d 	movw	r1, #797	; 0x31d
 800dc0c:	4805      	ldr	r0, [pc, #20]	; (800dc24 <FMC_SDRAM_Init+0x180>)
 800dc0e:	f006 f815 	bl	8013c3c <assert_failed>
 800dc12:	e765      	b.n	800dae0 <FMC_SDRAM_Init+0x3c>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 800dc14:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800dc18:	4802      	ldr	r0, [pc, #8]	; (800dc24 <FMC_SDRAM_Init+0x180>)
 800dc1a:	f006 f80f 	bl	8013c3c <assert_failed>
 800dc1e:	e758      	b.n	800dad2 <FMC_SDRAM_Init+0x2e>
 800dc20:	52004140 	.word	0x52004140
 800dc24:	0802a5e4 	.word	0x0802a5e4
 800dc28:	ffff8000 	.word	0xffff8000

0800dc2c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800dc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800dc2e:	4b50      	ldr	r3, [pc, #320]	; (800dd70 <FMC_SDRAM_Timing_Init+0x144>)
{
 800dc30:	4605      	mov	r5, r0
 800dc32:	460c      	mov	r4, r1
 800dc34:	4616      	mov	r6, r2
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800dc36:	4298      	cmp	r0, r3
 800dc38:	d004      	beq.n	800dc44 <FMC_SDRAM_Timing_Init+0x18>
 800dc3a:	f44f 7156 	mov.w	r1, #856	; 0x358
 800dc3e:	484d      	ldr	r0, [pc, #308]	; (800dd74 <FMC_SDRAM_Timing_Init+0x148>)
 800dc40:	f005 fffc 	bl	8013c3c <assert_failed>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 800dc44:	6823      	ldr	r3, [r4, #0]
 800dc46:	3b01      	subs	r3, #1
 800dc48:	2b0f      	cmp	r3, #15
 800dc4a:	f200 808a 	bhi.w	800dd62 <FMC_SDRAM_Timing_Init+0x136>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 800dc4e:	6863      	ldr	r3, [r4, #4]
 800dc50:	3b01      	subs	r3, #1
 800dc52:	2b0f      	cmp	r3, #15
 800dc54:	d87f      	bhi.n	800dd56 <FMC_SDRAM_Timing_Init+0x12a>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 800dc56:	68a3      	ldr	r3, [r4, #8]
 800dc58:	3b01      	subs	r3, #1
 800dc5a:	2b0f      	cmp	r3, #15
 800dc5c:	d875      	bhi.n	800dd4a <FMC_SDRAM_Timing_Init+0x11e>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 800dc5e:	68e3      	ldr	r3, [r4, #12]
 800dc60:	3b01      	subs	r3, #1
 800dc62:	2b0f      	cmp	r3, #15
 800dc64:	d86b      	bhi.n	800dd3e <FMC_SDRAM_Timing_Init+0x112>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 800dc66:	6923      	ldr	r3, [r4, #16]
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	2b0f      	cmp	r3, #15
 800dc6c:	d861      	bhi.n	800dd32 <FMC_SDRAM_Timing_Init+0x106>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 800dc6e:	6963      	ldr	r3, [r4, #20]
 800dc70:	3b01      	subs	r3, #1
 800dc72:	2b0f      	cmp	r3, #15
 800dc74:	d857      	bhi.n	800dd26 <FMC_SDRAM_Timing_Init+0xfa>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 800dc76:	69a3      	ldr	r3, [r4, #24]
 800dc78:	3b01      	subs	r3, #1
 800dc7a:	2b0f      	cmp	r3, #15
 800dc7c:	d84d      	bhi.n	800dd1a <FMC_SDRAM_Timing_Init+0xee>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 800dc7e:	2e01      	cmp	r6, #1
 800dc80:	d821      	bhi.n	800dcc6 <FMC_SDRAM_Timing_Init+0x9a>
 800dc82:	68e3      	ldr	r3, [r4, #12]
 800dc84:	6961      	ldr	r1, [r4, #20]
 800dc86:	3b01      	subs	r3, #1
 800dc88:	3901      	subs	r1, #1
 800dc8a:	031b      	lsls	r3, r3, #12
 800dc8c:	0509      	lsls	r1, r1, #20

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800dc8e:	bb2e      	cbnz	r6, 800dcdc <FMC_SDRAM_Timing_Init+0xb0>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800dc90:	6822      	ldr	r2, [r4, #0]
 800dc92:	430b      	orrs	r3, r1
 800dc94:	6860      	ldr	r0, [r4, #4]
 800dc96:	3a01      	subs	r2, #1
 800dc98:	68a1      	ldr	r1, [r4, #8]
 800dc9a:	1e47      	subs	r7, r0, #1
 800dc9c:	6920      	ldr	r0, [r4, #16]
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	1e4e      	subs	r6, r1, #1
 800dca2:	3801      	subs	r0, #1
 800dca4:	69a1      	ldr	r1, [r4, #24]
 800dca6:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 800dcaa:	68aa      	ldr	r2, [r5, #8]
 800dcac:	3901      	subs	r1, #1
 800dcae:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800dcb2:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800dcb6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800dcba:	2000      	movs	r0, #0
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800dcbc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	60ab      	str	r3, [r5, #8]
}
 800dcc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 800dcc6:	f44f 7158 	mov.w	r1, #864	; 0x360
 800dcca:	482a      	ldr	r0, [pc, #168]	; (800dd74 <FMC_SDRAM_Timing_Init+0x148>)
 800dccc:	f005 ffb6 	bl	8013c3c <assert_failed>
 800dcd0:	68e3      	ldr	r3, [r4, #12]
 800dcd2:	6961      	ldr	r1, [r4, #20]
 800dcd4:	3b01      	subs	r3, #1
 800dcd6:	3901      	subs	r1, #1
 800dcd8:	031b      	lsls	r3, r3, #12
 800dcda:	0509      	lsls	r1, r1, #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800dcdc:	68a8      	ldr	r0, [r5, #8]
 800dcde:	430b      	orrs	r3, r1
 800dce0:	4a25      	ldr	r2, [pc, #148]	; (800dd78 <FMC_SDRAM_Timing_Init+0x14c>)
 800dce2:	4002      	ands	r2, r0
 800dce4:	4313      	orrs	r3, r2
 800dce6:	60ab      	str	r3, [r5, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800dce8:	6820      	ldr	r0, [r4, #0]
 800dcea:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 800dcee:	1e46      	subs	r6, r0, #1
 800dcf0:	1e5a      	subs	r2, r3, #1
 800dcf2:	1e4b      	subs	r3, r1, #1
 800dcf4:	6921      	ldr	r1, [r4, #16]
 800dcf6:	0212      	lsls	r2, r2, #8
 800dcf8:	1e48      	subs	r0, r1, #1
 800dcfa:	69a1      	ldr	r1, [r4, #24]
 800dcfc:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800dd00:	68ea      	ldr	r2, [r5, #12]
 800dd02:	3901      	subs	r1, #1
 800dd04:	4333      	orrs	r3, r6
 800dd06:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800dd0a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
}
 800dd0e:	2000      	movs	r0, #0
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800dd10:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800dd14:	4313      	orrs	r3, r2
 800dd16:	60eb      	str	r3, [r5, #12]
}
 800dd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 800dd1a:	f240 315f 	movw	r1, #863	; 0x35f
 800dd1e:	4815      	ldr	r0, [pc, #84]	; (800dd74 <FMC_SDRAM_Timing_Init+0x148>)
 800dd20:	f005 ff8c 	bl	8013c3c <assert_failed>
 800dd24:	e7ab      	b.n	800dc7e <FMC_SDRAM_Timing_Init+0x52>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 800dd26:	f240 315e 	movw	r1, #862	; 0x35e
 800dd2a:	4812      	ldr	r0, [pc, #72]	; (800dd74 <FMC_SDRAM_Timing_Init+0x148>)
 800dd2c:	f005 ff86 	bl	8013c3c <assert_failed>
 800dd30:	e7a1      	b.n	800dc76 <FMC_SDRAM_Timing_Init+0x4a>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 800dd32:	f240 315d 	movw	r1, #861	; 0x35d
 800dd36:	480f      	ldr	r0, [pc, #60]	; (800dd74 <FMC_SDRAM_Timing_Init+0x148>)
 800dd38:	f005 ff80 	bl	8013c3c <assert_failed>
 800dd3c:	e797      	b.n	800dc6e <FMC_SDRAM_Timing_Init+0x42>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 800dd3e:	f44f 7157 	mov.w	r1, #860	; 0x35c
 800dd42:	480c      	ldr	r0, [pc, #48]	; (800dd74 <FMC_SDRAM_Timing_Init+0x148>)
 800dd44:	f005 ff7a 	bl	8013c3c <assert_failed>
 800dd48:	e78d      	b.n	800dc66 <FMC_SDRAM_Timing_Init+0x3a>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 800dd4a:	f240 315b 	movw	r1, #859	; 0x35b
 800dd4e:	4809      	ldr	r0, [pc, #36]	; (800dd74 <FMC_SDRAM_Timing_Init+0x148>)
 800dd50:	f005 ff74 	bl	8013c3c <assert_failed>
 800dd54:	e783      	b.n	800dc5e <FMC_SDRAM_Timing_Init+0x32>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 800dd56:	f240 315a 	movw	r1, #858	; 0x35a
 800dd5a:	4806      	ldr	r0, [pc, #24]	; (800dd74 <FMC_SDRAM_Timing_Init+0x148>)
 800dd5c:	f005 ff6e 	bl	8013c3c <assert_failed>
 800dd60:	e779      	b.n	800dc56 <FMC_SDRAM_Timing_Init+0x2a>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 800dd62:	f240 3159 	movw	r1, #857	; 0x359
 800dd66:	4803      	ldr	r0, [pc, #12]	; (800dd74 <FMC_SDRAM_Timing_Init+0x148>)
 800dd68:	f005 ff68 	bl	8013c3c <assert_failed>
 800dd6c:	e76f      	b.n	800dc4e <FMC_SDRAM_Timing_Init+0x22>
 800dd6e:	bf00      	nop
 800dd70:	52004140 	.word	0x52004140
 800dd74:	0802a5e4 	.word	0x0802a5e4
 800dd78:	ff0f0fff 	.word	0xff0f0fff

0800dd7c <FMC_SDRAM_SendCommand>:
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800dd7c:	4b22      	ldr	r3, [pc, #136]	; (800de08 <FMC_SDRAM_SendCommand+0x8c>)
 800dd7e:	4298      	cmp	r0, r3
{
 800dd80:	b570      	push	{r4, r5, r6, lr}
 800dd82:	4605      	mov	r5, r0
 800dd84:	460c      	mov	r4, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800dd86:	d004      	beq.n	800dd92 <FMC_SDRAM_SendCommand+0x16>
 800dd88:	f240 31d9 	movw	r1, #985	; 0x3d9
 800dd8c:	481f      	ldr	r0, [pc, #124]	; (800de0c <FMC_SDRAM_SendCommand+0x90>)
 800dd8e:	f005 ff55 	bl	8013c3c <assert_failed>
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 800dd92:	6823      	ldr	r3, [r4, #0]
 800dd94:	2b06      	cmp	r3, #6
 800dd96:	d831      	bhi.n	800ddfc <FMC_SDRAM_SendCommand+0x80>
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 800dd98:	6863      	ldr	r3, [r4, #4]
 800dd9a:	f023 0210 	bic.w	r2, r3, #16
 800dd9e:	2a08      	cmp	r2, #8
 800dda0:	d001      	beq.n	800dda6 <FMC_SDRAM_SendCommand+0x2a>
 800dda2:	2b10      	cmp	r3, #16
 800dda4:	d11b      	bne.n	800ddde <FMC_SDRAM_SendCommand+0x62>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 800dda6:	68a3      	ldr	r3, [r4, #8]
 800dda8:	3b01      	subs	r3, #1
 800ddaa:	2b0e      	cmp	r3, #14
 800ddac:	d820      	bhi.n	800ddf0 <FMC_SDRAM_SendCommand+0x74>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));
 800ddae:	68e1      	ldr	r1, [r4, #12]
 800ddb0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800ddb4:	d305      	bcc.n	800ddc2 <FMC_SDRAM_SendCommand+0x46>
 800ddb6:	f240 31dd 	movw	r1, #989	; 0x3dd
 800ddba:	4814      	ldr	r0, [pc, #80]	; (800de0c <FMC_SDRAM_SendCommand+0x90>)
 800ddbc:	f005 ff3e 	bl	8013c3c <assert_failed>
 800ddc0:	68e1      	ldr	r1, [r4, #12]

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 800ddc2:	6823      	ldr	r3, [r4, #0]
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800ddc4:	2000      	movs	r0, #0
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 800ddc6:	e9d4 6201 	ldrd	r6, r2, [r4, #4]
 800ddca:	692c      	ldr	r4, [r5, #16]
 800ddcc:	4333      	orrs	r3, r6
 800ddce:	3a01      	subs	r2, #1
 800ddd0:	4323      	orrs	r3, r4
 800ddd2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800ddd6:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800ddda:	612b      	str	r3, [r5, #16]
}
 800dddc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 800ddde:	f240 31db 	movw	r1, #987	; 0x3db
 800dde2:	480a      	ldr	r0, [pc, #40]	; (800de0c <FMC_SDRAM_SendCommand+0x90>)
 800dde4:	f005 ff2a 	bl	8013c3c <assert_failed>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 800dde8:	68a3      	ldr	r3, [r4, #8]
 800ddea:	3b01      	subs	r3, #1
 800ddec:	2b0e      	cmp	r3, #14
 800ddee:	d9de      	bls.n	800ddae <FMC_SDRAM_SendCommand+0x32>
 800ddf0:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 800ddf4:	4805      	ldr	r0, [pc, #20]	; (800de0c <FMC_SDRAM_SendCommand+0x90>)
 800ddf6:	f005 ff21 	bl	8013c3c <assert_failed>
 800ddfa:	e7d8      	b.n	800ddae <FMC_SDRAM_SendCommand+0x32>
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 800ddfc:	f240 31da 	movw	r1, #986	; 0x3da
 800de00:	4802      	ldr	r0, [pc, #8]	; (800de0c <FMC_SDRAM_SendCommand+0x90>)
 800de02:	f005 ff1b 	bl	8013c3c <assert_failed>
 800de06:	e7c7      	b.n	800dd98 <FMC_SDRAM_SendCommand+0x1c>
 800de08:	52004140 	.word	0x52004140
 800de0c:	0802a5e4 	.word	0x0802a5e4

0800de10 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800de10:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800de12:	4b0d      	ldr	r3, [pc, #52]	; (800de48 <FMC_SDRAM_ProgramRefreshRate+0x38>)
{
 800de14:	4604      	mov	r4, r0
 800de16:	460d      	mov	r5, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800de18:	4298      	cmp	r0, r3
 800de1a:	d004      	beq.n	800de26 <FMC_SDRAM_ProgramRefreshRate+0x16>
 800de1c:	f240 31f2 	movw	r1, #1010	; 0x3f2
 800de20:	480a      	ldr	r0, [pc, #40]	; (800de4c <FMC_SDRAM_ProgramRefreshRate+0x3c>)
 800de22:	f005 ff0b 	bl	8013c3c <assert_failed>
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 800de26:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800de2a:	d304      	bcc.n	800de36 <FMC_SDRAM_ProgramRefreshRate+0x26>
 800de2c:	f240 31f3 	movw	r1, #1011	; 0x3f3
 800de30:	4806      	ldr	r0, [pc, #24]	; (800de4c <FMC_SDRAM_ProgramRefreshRate+0x3c>)
 800de32:	f005 ff03 	bl	8013c3c <assert_failed>

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800de36:	6963      	ldr	r3, [r4, #20]

  return HAL_OK;
}
 800de38:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800de3a:	4905      	ldr	r1, [pc, #20]	; (800de50 <FMC_SDRAM_ProgramRefreshRate+0x40>)
 800de3c:	4019      	ands	r1, r3
 800de3e:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 800de42:	6161      	str	r1, [r4, #20]
}
 800de44:	bd38      	pop	{r3, r4, r5, pc}
 800de46:	bf00      	nop
 800de48:	52004140 	.word	0x52004140
 800de4c:	0802a5e4 	.word	0x0802a5e4
 800de50:	ffffc001 	.word	0xffffc001

0800de54 <SDMMC_GetCmdResp1.part.2>:
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800de54:	4b30      	ldr	r3, [pc, #192]	; (800df18 <SDMMC_GetCmdResp1.part.2+0xc4>)
  return (*(__IO uint32_t *) tmp);
 800de56:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800de58:	4013      	ands	r3, r2
 800de5a:	b34b      	cbz	r3, 800deb0 <SDMMC_GetCmdResp1.part.2+0x5c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800de5c:	2a00      	cmp	r2, #0
 800de5e:	db29      	blt.n	800deb4 <SDMMC_GetCmdResp1.part.2+0x60>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800de60:	0051      	lsls	r1, r2, #1
 800de62:	d42d      	bmi.n	800dec0 <SDMMC_GetCmdResp1.part.2+0x6c>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800de64:	0093      	lsls	r3, r2, #2
 800de66:	d42d      	bmi.n	800dec4 <SDMMC_GetCmdResp1.part.2+0x70>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800de68:	00d1      	lsls	r1, r2, #3
 800de6a:	d426      	bmi.n	800deba <SDMMC_GetCmdResp1.part.2+0x66>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800de6c:	0113      	lsls	r3, r2, #4
 800de6e:	d42e      	bmi.n	800dece <SDMMC_GetCmdResp1.part.2+0x7a>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800de70:	0151      	lsls	r1, r2, #5
 800de72:	d42f      	bmi.n	800ded4 <SDMMC_GetCmdResp1.part.2+0x80>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800de74:	01d3      	lsls	r3, r2, #7
 800de76:	d427      	bmi.n	800dec8 <SDMMC_GetCmdResp1.part.2+0x74>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800de78:	0211      	lsls	r1, r2, #8
 800de7a:	d42e      	bmi.n	800deda <SDMMC_GetCmdResp1.part.2+0x86>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800de7c:	0253      	lsls	r3, r2, #9
 800de7e:	d42f      	bmi.n	800dee0 <SDMMC_GetCmdResp1.part.2+0x8c>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800de80:	0291      	lsls	r1, r2, #10
 800de82:	d430      	bmi.n	800dee6 <SDMMC_GetCmdResp1.part.2+0x92>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800de84:	02d3      	lsls	r3, r2, #11
 800de86:	d431      	bmi.n	800deec <SDMMC_GetCmdResp1.part.2+0x98>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800de88:	0351      	lsls	r1, r2, #13
 800de8a:	d432      	bmi.n	800def2 <SDMMC_GetCmdResp1.part.2+0x9e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800de8c:	0393      	lsls	r3, r2, #14
 800de8e:	d433      	bmi.n	800def8 <SDMMC_GetCmdResp1.part.2+0xa4>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800de90:	03d1      	lsls	r1, r2, #15
 800de92:	d434      	bmi.n	800defe <SDMMC_GetCmdResp1.part.2+0xaa>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800de94:	0413      	lsls	r3, r2, #16
 800de96:	d435      	bmi.n	800df04 <SDMMC_GetCmdResp1.part.2+0xb0>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800de98:	0451      	lsls	r1, r2, #17
 800de9a:	d436      	bmi.n	800df0a <SDMMC_GetCmdResp1.part.2+0xb6>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800de9c:	0493      	lsls	r3, r2, #18
 800de9e:	d437      	bmi.n	800df10 <SDMMC_GetCmdResp1.part.2+0xbc>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dea0:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dea4:	bf14      	ite	ne
 800dea6:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800deaa:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800deae:	4770      	bx	lr
    return SDMMC_ERROR_NONE;
 800deb0:	4618      	mov	r0, r3
 800deb2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800deb4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800deb8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800deba:	f44f 7080 	mov.w	r0, #256	; 0x100
 800debe:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dec0:	2040      	movs	r0, #64	; 0x40
 800dec2:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dec4:	2080      	movs	r0, #128	; 0x80
 800dec6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dec8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800decc:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dece:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ded2:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ded4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ded8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800deda:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800dede:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dee0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800dee4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dee6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800deea:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800deec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800def0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800def2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800def6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800def8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800defc:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800defe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800df02:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800df04:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800df08:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800df0a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800df0e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800df10:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 800df14:	4770      	bx	lr
 800df16:	bf00      	nop
 800df18:	fdffe008 	.word	0xfdffe008

0800df1c <SDMMC_Init>:
{
 800df1c:	b084      	sub	sp, #16
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800df1e:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800dfd8 <SDMMC_Init+0xbc>
{
 800df22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df26:	4605      	mov	r5, r0
 800df28:	a809      	add	r0, sp, #36	; 0x24
 800df2a:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800df2c:	4565      	cmp	r5, ip
 800df2e:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	; 0x30
{
 800df32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800df36:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800df3a:	d002      	beq.n	800df42 <SDMMC_Init+0x26>
 800df3c:	4b23      	ldr	r3, [pc, #140]	; (800dfcc <SDMMC_Init+0xb0>)
 800df3e:	429d      	cmp	r5, r3
 800df40:	d125      	bne.n	800df8e <SDMMC_Init+0x72>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge));
 800df42:	f434 3380 	bics.w	r3, r4, #65536	; 0x10000
 800df46:	d129      	bne.n	800df9c <SDMMC_Init+0x80>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 800df48:	f439 5380 	bics.w	r3, r9, #4096	; 0x1000
 800df4c:	d12d      	bne.n	800dfaa <SDMMC_Init+0x8e>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 800df4e:	f438 4380 	bics.w	r3, r8, #16384	; 0x4000
 800df52:	d002      	beq.n	800df5a <SDMMC_Init+0x3e>
 800df54:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 800df58:	d12c      	bne.n	800dfb4 <SDMMC_Init+0x98>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 800df5a:	f437 3300 	bics.w	r3, r7, #131072	; 0x20000
 800df5e:	d130      	bne.n	800dfc2 <SDMMC_Init+0xa6>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 800df60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800df64:	d303      	bcc.n	800df6e <SDMMC_Init+0x52>
 800df66:	21d7      	movs	r1, #215	; 0xd7
 800df68:	4819      	ldr	r0, [pc, #100]	; (800dfd0 <SDMMC_Init+0xb4>)
 800df6a:	f005 fe67 	bl	8013c3c <assert_failed>
  tmpreg |= (Init.ClockEdge           |\
 800df6e:	ea44 0309 	orr.w	r3, r4, r9
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800df72:	6869      	ldr	r1, [r5, #4]
 800df74:	4a17      	ldr	r2, [pc, #92]	; (800dfd4 <SDMMC_Init+0xb8>)
}
 800df76:	2000      	movs	r0, #0
             Init.ClockPowerSave      |\
 800df78:	ea43 0308 	orr.w	r3, r3, r8
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800df7c:	400a      	ands	r2, r1
             Init.BusWide             |\
 800df7e:	433b      	orrs	r3, r7
             Init.HardwareFlowControl |\
 800df80:	4333      	orrs	r3, r6
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800df82:	4313      	orrs	r3, r2
 800df84:	606b      	str	r3, [r5, #4]
}
 800df86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df8a:	b004      	add	sp, #16
 800df8c:	4770      	bx	lr
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800df8e:	21d2      	movs	r1, #210	; 0xd2
 800df90:	480f      	ldr	r0, [pc, #60]	; (800dfd0 <SDMMC_Init+0xb4>)
 800df92:	f005 fe53 	bl	8013c3c <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge));
 800df96:	f434 3380 	bics.w	r3, r4, #65536	; 0x10000
 800df9a:	d0d5      	beq.n	800df48 <SDMMC_Init+0x2c>
 800df9c:	21d3      	movs	r1, #211	; 0xd3
 800df9e:	480c      	ldr	r0, [pc, #48]	; (800dfd0 <SDMMC_Init+0xb4>)
 800dfa0:	f005 fe4c 	bl	8013c3c <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 800dfa4:	f439 5380 	bics.w	r3, r9, #4096	; 0x1000
 800dfa8:	d0d1      	beq.n	800df4e <SDMMC_Init+0x32>
 800dfaa:	21d4      	movs	r1, #212	; 0xd4
 800dfac:	4808      	ldr	r0, [pc, #32]	; (800dfd0 <SDMMC_Init+0xb4>)
 800dfae:	f005 fe45 	bl	8013c3c <assert_failed>
 800dfb2:	e7cc      	b.n	800df4e <SDMMC_Init+0x32>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 800dfb4:	21d5      	movs	r1, #213	; 0xd5
 800dfb6:	4806      	ldr	r0, [pc, #24]	; (800dfd0 <SDMMC_Init+0xb4>)
 800dfb8:	f005 fe40 	bl	8013c3c <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 800dfbc:	f437 3300 	bics.w	r3, r7, #131072	; 0x20000
 800dfc0:	d0ce      	beq.n	800df60 <SDMMC_Init+0x44>
 800dfc2:	21d6      	movs	r1, #214	; 0xd6
 800dfc4:	4802      	ldr	r0, [pc, #8]	; (800dfd0 <SDMMC_Init+0xb4>)
 800dfc6:	f005 fe39 	bl	8013c3c <assert_failed>
 800dfca:	e7c9      	b.n	800df60 <SDMMC_Init+0x44>
 800dfcc:	48022400 	.word	0x48022400
 800dfd0:	0802a61c 	.word	0x0802a61c
 800dfd4:	ffc02c00 	.word	0xffc02c00
 800dfd8:	52007000 	.word	0x52007000

0800dfdc <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800dfdc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop

0800dfe4 <SDMMC_WriteFIFO>:
{
 800dfe4:	4603      	mov	r3, r0
  SDMMCx->FIFO = *pWriteData;
 800dfe6:	680a      	ldr	r2, [r1, #0]
}
 800dfe8:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800dfea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800dfee:	4770      	bx	lr

0800dff0 <SDMMC_PowerState_ON>:
{
 800dff0:	4602      	mov	r2, r0
}
 800dff2:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800dff4:	6813      	ldr	r3, [r2, #0]
 800dff6:	f043 0303 	orr.w	r3, r3, #3
 800dffa:	6013      	str	r3, [r2, #0]
}
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop

0800e000 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e000:	6800      	ldr	r0, [r0, #0]
}
 800e002:	f000 0003 	and.w	r0, r0, #3
 800e006:	4770      	bx	lr

0800e008 <SDMMC_GetResponse>:
{
 800e008:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_SDMMC_RESP(Response));
 800e00a:	f031 030c 	bics.w	r3, r1, #12
{
 800e00e:	460d      	mov	r5, r1
 800e010:	4604      	mov	r4, r0
  assert_param(IS_SDMMC_RESP(Response));
 800e012:	d004      	beq.n	800e01e <SDMMC_GetResponse+0x16>
 800e014:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800e018:	4802      	ldr	r0, [pc, #8]	; (800e024 <SDMMC_GetResponse+0x1c>)
 800e01a:	f005 fe0f 	bl	8013c3c <assert_failed>
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e01e:	3414      	adds	r4, #20
  return (*(__IO uint32_t *) tmp);
 800e020:	5960      	ldr	r0, [r4, r5]
}
 800e022:	bd38      	pop	{r3, r4, r5, pc}
 800e024:	0802a61c 	.word	0x0802a61c

0800e028 <SDMMC_ConfigData>:
{
 800e028:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800e02a:	684b      	ldr	r3, [r1, #4]
{
 800e02c:	460c      	mov	r4, r1
 800e02e:	4605      	mov	r5, r0
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800e030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e034:	d23b      	bcs.n	800e0ae <SDMMC_ConfigData+0x86>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 800e036:	68a2      	ldr	r2, [r4, #8]
 800e038:	f032 0130 	bics.w	r1, r2, #48	; 0x30
 800e03c:	bf14      	ite	ne
 800e03e:	2301      	movne	r3, #1
 800e040:	2300      	moveq	r3, #0
 800e042:	2940      	cmp	r1, #64	; 0x40
 800e044:	bf0c      	ite	eq
 800e046:	2300      	moveq	r3, #0
 800e048:	f003 0301 	andne.w	r3, r3, #1
 800e04c:	2ae0      	cmp	r2, #224	; 0xe0
 800e04e:	bf0c      	ite	eq
 800e050:	2300      	moveq	r3, #0
 800e052:	f003 0301 	andne.w	r3, r3, #1
 800e056:	2980      	cmp	r1, #128	; 0x80
 800e058:	bf0c      	ite	eq
 800e05a:	2300      	moveq	r3, #0
 800e05c:	f003 0301 	andne.w	r3, r3, #1
 800e060:	b11b      	cbz	r3, 800e06a <SDMMC_ConfigData+0x42>
 800e062:	f022 0210 	bic.w	r2, r2, #16
 800e066:	2ac0      	cmp	r2, #192	; 0xc0
 800e068:	d133      	bne.n	800e0d2 <SDMMC_ConfigData+0xaa>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 800e06a:	68e3      	ldr	r3, [r4, #12]
 800e06c:	f033 0302 	bics.w	r3, r3, #2
 800e070:	d129      	bne.n	800e0c6 <SDMMC_ConfigData+0x9e>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 800e072:	6923      	ldr	r3, [r4, #16]
 800e074:	f033 0308 	bics.w	r3, r3, #8
 800e078:	d11f      	bne.n	800e0ba <SDMMC_ConfigData+0x92>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 800e07a:	6963      	ldr	r3, [r4, #20]
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d904      	bls.n	800e08a <SDMMC_ConfigData+0x62>
 800e080:	f240 11b1 	movw	r1, #433	; 0x1b1
 800e084:	4816      	ldr	r0, [pc, #88]	; (800e0e0 <SDMMC_ConfigData+0xb8>)
 800e086:	f005 fdd9 	bl	8013c3c <assert_failed>
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e08a:	6823      	ldr	r3, [r4, #0]
}
 800e08c:	2000      	movs	r0, #0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e08e:	626b      	str	r3, [r5, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800e090:	6863      	ldr	r3, [r4, #4]
 800e092:	62ab      	str	r3, [r5, #40]	; 0x28
                       Data->TransferDir   |\
 800e094:	6926      	ldr	r6, [r4, #16]
                       Data->TransferMode  |\
 800e096:	6961      	ldr	r1, [r4, #20]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e098:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800e09c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e09e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
                       Data->TransferDir   |\
 800e0a0:	4333      	orrs	r3, r6
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e0a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
                       Data->TransferMode  |\
 800e0a6:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e0a8:	4313      	orrs	r3, r2
 800e0aa:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800e0ac:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800e0ae:	f240 11ad 	movw	r1, #429	; 0x1ad
 800e0b2:	480b      	ldr	r0, [pc, #44]	; (800e0e0 <SDMMC_ConfigData+0xb8>)
 800e0b4:	f005 fdc2 	bl	8013c3c <assert_failed>
 800e0b8:	e7bd      	b.n	800e036 <SDMMC_ConfigData+0xe>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 800e0ba:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800e0be:	4808      	ldr	r0, [pc, #32]	; (800e0e0 <SDMMC_ConfigData+0xb8>)
 800e0c0:	f005 fdbc 	bl	8013c3c <assert_failed>
 800e0c4:	e7d9      	b.n	800e07a <SDMMC_ConfigData+0x52>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 800e0c6:	f240 11af 	movw	r1, #431	; 0x1af
 800e0ca:	4805      	ldr	r0, [pc, #20]	; (800e0e0 <SDMMC_ConfigData+0xb8>)
 800e0cc:	f005 fdb6 	bl	8013c3c <assert_failed>
 800e0d0:	e7cf      	b.n	800e072 <SDMMC_ConfigData+0x4a>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 800e0d2:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e0d6:	4802      	ldr	r0, [pc, #8]	; (800e0e0 <SDMMC_ConfigData+0xb8>)
 800e0d8:	f005 fdb0 	bl	8013c3c <assert_failed>
 800e0dc:	e7c5      	b.n	800e06a <SDMMC_ConfigData+0x42>
 800e0de:	bf00      	nop
 800e0e0:	0802a61c 	.word	0x0802a61c

0800e0e4 <SDMMC_CmdBlockLength>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e0e4:	4a1c      	ldr	r2, [pc, #112]	; (800e158 <SDMMC_CmdBlockLength+0x74>)
 800e0e6:	4b1d      	ldr	r3, [pc, #116]	; (800e15c <SDMMC_CmdBlockLength+0x78>)
{
 800e0e8:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e0ea:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e0ec:	f241 1410 	movw	r4, #4368	; 0x1110
  SDMMCx->ARG = Command->Argument;
 800e0f0:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e0f2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e0f6:	68c1      	ldr	r1, [r0, #12]
 800e0f8:	4d19      	ldr	r5, [pc, #100]	; (800e160 <SDMMC_CmdBlockLength+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e0fa:	f241 3388 	movw	r3, #5000	; 0x1388
 800e0fe:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e100:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e102:	4918      	ldr	r1, [pc, #96]	; (800e164 <SDMMC_CmdBlockLength+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e104:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e108:	432c      	orrs	r4, r5
 800e10a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e10c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e110:	d312      	bcc.n	800e138 <SDMMC_CmdBlockLength+0x54>
    sta_reg = SDMMCx->STA;
 800e112:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e114:	420a      	tst	r2, r1
 800e116:	d0f9      	beq.n	800e10c <SDMMC_CmdBlockLength+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e118:	0494      	lsls	r4, r2, #18
 800e11a:	d4f7      	bmi.n	800e10c <SDMMC_CmdBlockLength+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e11c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e11e:	075a      	lsls	r2, r3, #29
 800e120:	d40e      	bmi.n	800e140 <SDMMC_CmdBlockLength+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e122:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e124:	07db      	lsls	r3, r3, #31
 800e126:	d40f      	bmi.n	800e148 <SDMMC_CmdBlockLength+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e128:	4b0f      	ldr	r3, [pc, #60]	; (800e168 <SDMMC_CmdBlockLength+0x84>)
 800e12a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e12c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	2b10      	cmp	r3, #16
 800e132:	d00d      	beq.n	800e150 <SDMMC_CmdBlockLength+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e134:	2001      	movs	r0, #1
  return errorstate;
 800e136:	e001      	b.n	800e13c <SDMMC_CmdBlockLength+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e138:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e13c:	bc30      	pop	{r4, r5}
 800e13e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e140:	2304      	movs	r3, #4
 800e142:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e144:	4618      	mov	r0, r3
 800e146:	e7f9      	b.n	800e13c <SDMMC_CmdBlockLength+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e148:	2301      	movs	r3, #1
 800e14a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e14c:	4618      	mov	r0, r3
 800e14e:	e7f5      	b.n	800e13c <SDMMC_CmdBlockLength+0x58>
}
 800e150:	bc30      	pop	{r4, r5}
 800e152:	f7ff be7f 	b.w	800de54 <SDMMC_GetCmdResp1.part.2>
 800e156:	bf00      	nop
 800e158:	200002b0 	.word	0x200002b0
 800e15c:	10624dd3 	.word	0x10624dd3
 800e160:	fffee0c0 	.word	0xfffee0c0
 800e164:	00200045 	.word	0x00200045
 800e168:	002000c5 	.word	0x002000c5

0800e16c <SDMMC_CmdReadSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e16c:	4a1c      	ldr	r2, [pc, #112]	; (800e1e0 <SDMMC_CmdReadSingleBlock+0x74>)
 800e16e:	4b1d      	ldr	r3, [pc, #116]	; (800e1e4 <SDMMC_CmdReadSingleBlock+0x78>)
{
 800e170:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e172:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e174:	f241 1411 	movw	r4, #4369	; 0x1111
  SDMMCx->ARG = Command->Argument;
 800e178:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e17a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e17e:	68c1      	ldr	r1, [r0, #12]
 800e180:	4d19      	ldr	r5, [pc, #100]	; (800e1e8 <SDMMC_CmdReadSingleBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e182:	f241 3388 	movw	r3, #5000	; 0x1388
 800e186:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e188:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e18a:	4918      	ldr	r1, [pc, #96]	; (800e1ec <SDMMC_CmdReadSingleBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e18c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e190:	432c      	orrs	r4, r5
 800e192:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e194:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e198:	d312      	bcc.n	800e1c0 <SDMMC_CmdReadSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 800e19a:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e19c:	420a      	tst	r2, r1
 800e19e:	d0f9      	beq.n	800e194 <SDMMC_CmdReadSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e1a0:	0494      	lsls	r4, r2, #18
 800e1a2:	d4f7      	bmi.n	800e194 <SDMMC_CmdReadSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e1a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e1a6:	075a      	lsls	r2, r3, #29
 800e1a8:	d40e      	bmi.n	800e1c8 <SDMMC_CmdReadSingleBlock+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e1aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e1ac:	07db      	lsls	r3, r3, #31
 800e1ae:	d40f      	bmi.n	800e1d0 <SDMMC_CmdReadSingleBlock+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e1b0:	4b0f      	ldr	r3, [pc, #60]	; (800e1f0 <SDMMC_CmdReadSingleBlock+0x84>)
 800e1b2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e1b4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b11      	cmp	r3, #17
 800e1ba:	d00d      	beq.n	800e1d8 <SDMMC_CmdReadSingleBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1bc:	2001      	movs	r0, #1
  return errorstate;
 800e1be:	e001      	b.n	800e1c4 <SDMMC_CmdReadSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e1c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e1c4:	bc30      	pop	{r4, r5}
 800e1c6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1c8:	2304      	movs	r3, #4
 800e1ca:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	e7f9      	b.n	800e1c4 <SDMMC_CmdReadSingleBlock+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	e7f5      	b.n	800e1c4 <SDMMC_CmdReadSingleBlock+0x58>
}
 800e1d8:	bc30      	pop	{r4, r5}
 800e1da:	f7ff be3b 	b.w	800de54 <SDMMC_GetCmdResp1.part.2>
 800e1de:	bf00      	nop
 800e1e0:	200002b0 	.word	0x200002b0
 800e1e4:	10624dd3 	.word	0x10624dd3
 800e1e8:	fffee0c0 	.word	0xfffee0c0
 800e1ec:	00200045 	.word	0x00200045
 800e1f0:	002000c5 	.word	0x002000c5

0800e1f4 <SDMMC_CmdReadMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e1f4:	4a1c      	ldr	r2, [pc, #112]	; (800e268 <SDMMC_CmdReadMultiBlock+0x74>)
 800e1f6:	4b1d      	ldr	r3, [pc, #116]	; (800e26c <SDMMC_CmdReadMultiBlock+0x78>)
{
 800e1f8:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e1fa:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e1fc:	f241 1412 	movw	r4, #4370	; 0x1112
  SDMMCx->ARG = Command->Argument;
 800e200:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e202:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e206:	68c1      	ldr	r1, [r0, #12]
 800e208:	4d19      	ldr	r5, [pc, #100]	; (800e270 <SDMMC_CmdReadMultiBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e20a:	f241 3388 	movw	r3, #5000	; 0x1388
 800e20e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e210:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e212:	4918      	ldr	r1, [pc, #96]	; (800e274 <SDMMC_CmdReadMultiBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e214:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e218:	432c      	orrs	r4, r5
 800e21a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e21c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e220:	d312      	bcc.n	800e248 <SDMMC_CmdReadMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 800e222:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e224:	420a      	tst	r2, r1
 800e226:	d0f9      	beq.n	800e21c <SDMMC_CmdReadMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e228:	0494      	lsls	r4, r2, #18
 800e22a:	d4f7      	bmi.n	800e21c <SDMMC_CmdReadMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e22c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e22e:	075a      	lsls	r2, r3, #29
 800e230:	d40e      	bmi.n	800e250 <SDMMC_CmdReadMultiBlock+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e232:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e234:	07db      	lsls	r3, r3, #31
 800e236:	d40f      	bmi.n	800e258 <SDMMC_CmdReadMultiBlock+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e238:	4b0f      	ldr	r3, [pc, #60]	; (800e278 <SDMMC_CmdReadMultiBlock+0x84>)
 800e23a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e23c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b12      	cmp	r3, #18
 800e242:	d00d      	beq.n	800e260 <SDMMC_CmdReadMultiBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e244:	2001      	movs	r0, #1
  return errorstate;
 800e246:	e001      	b.n	800e24c <SDMMC_CmdReadMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e248:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e24c:	bc30      	pop	{r4, r5}
 800e24e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e250:	2304      	movs	r3, #4
 800e252:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e254:	4618      	mov	r0, r3
 800e256:	e7f9      	b.n	800e24c <SDMMC_CmdReadMultiBlock+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e258:	2301      	movs	r3, #1
 800e25a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e25c:	4618      	mov	r0, r3
 800e25e:	e7f5      	b.n	800e24c <SDMMC_CmdReadMultiBlock+0x58>
}
 800e260:	bc30      	pop	{r4, r5}
 800e262:	f7ff bdf7 	b.w	800de54 <SDMMC_GetCmdResp1.part.2>
 800e266:	bf00      	nop
 800e268:	200002b0 	.word	0x200002b0
 800e26c:	10624dd3 	.word	0x10624dd3
 800e270:	fffee0c0 	.word	0xfffee0c0
 800e274:	00200045 	.word	0x00200045
 800e278:	002000c5 	.word	0x002000c5

0800e27c <SDMMC_CmdWriteSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e27c:	4a1c      	ldr	r2, [pc, #112]	; (800e2f0 <SDMMC_CmdWriteSingleBlock+0x74>)
 800e27e:	4b1d      	ldr	r3, [pc, #116]	; (800e2f4 <SDMMC_CmdWriteSingleBlock+0x78>)
{
 800e280:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e282:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e284:	f241 1418 	movw	r4, #4376	; 0x1118
  SDMMCx->ARG = Command->Argument;
 800e288:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e28a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e28e:	68c1      	ldr	r1, [r0, #12]
 800e290:	4d19      	ldr	r5, [pc, #100]	; (800e2f8 <SDMMC_CmdWriteSingleBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e292:	f241 3388 	movw	r3, #5000	; 0x1388
 800e296:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e298:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e29a:	4918      	ldr	r1, [pc, #96]	; (800e2fc <SDMMC_CmdWriteSingleBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e29c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2a0:	432c      	orrs	r4, r5
 800e2a2:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e2a4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e2a8:	d312      	bcc.n	800e2d0 <SDMMC_CmdWriteSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 800e2aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e2ac:	420a      	tst	r2, r1
 800e2ae:	d0f9      	beq.n	800e2a4 <SDMMC_CmdWriteSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e2b0:	0494      	lsls	r4, r2, #18
 800e2b2:	d4f7      	bmi.n	800e2a4 <SDMMC_CmdWriteSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e2b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e2b6:	075a      	lsls	r2, r3, #29
 800e2b8:	d40e      	bmi.n	800e2d8 <SDMMC_CmdWriteSingleBlock+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e2ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e2bc:	07db      	lsls	r3, r3, #31
 800e2be:	d40f      	bmi.n	800e2e0 <SDMMC_CmdWriteSingleBlock+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2c0:	4b0f      	ldr	r3, [pc, #60]	; (800e300 <SDMMC_CmdWriteSingleBlock+0x84>)
 800e2c2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e2c4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	2b18      	cmp	r3, #24
 800e2ca:	d00d      	beq.n	800e2e8 <SDMMC_CmdWriteSingleBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2cc:	2001      	movs	r0, #1
  return errorstate;
 800e2ce:	e001      	b.n	800e2d4 <SDMMC_CmdWriteSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e2d0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e2d4:	bc30      	pop	{r4, r5}
 800e2d6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e2d8:	2304      	movs	r3, #4
 800e2da:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2dc:	4618      	mov	r0, r3
 800e2de:	e7f9      	b.n	800e2d4 <SDMMC_CmdWriteSingleBlock+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	e7f5      	b.n	800e2d4 <SDMMC_CmdWriteSingleBlock+0x58>
}
 800e2e8:	bc30      	pop	{r4, r5}
 800e2ea:	f7ff bdb3 	b.w	800de54 <SDMMC_GetCmdResp1.part.2>
 800e2ee:	bf00      	nop
 800e2f0:	200002b0 	.word	0x200002b0
 800e2f4:	10624dd3 	.word	0x10624dd3
 800e2f8:	fffee0c0 	.word	0xfffee0c0
 800e2fc:	00200045 	.word	0x00200045
 800e300:	002000c5 	.word	0x002000c5

0800e304 <SDMMC_CmdWriteMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e304:	4a1c      	ldr	r2, [pc, #112]	; (800e378 <SDMMC_CmdWriteMultiBlock+0x74>)
 800e306:	4b1d      	ldr	r3, [pc, #116]	; (800e37c <SDMMC_CmdWriteMultiBlock+0x78>)
{
 800e308:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e30a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e30c:	f241 1419 	movw	r4, #4377	; 0x1119
  SDMMCx->ARG = Command->Argument;
 800e310:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e312:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e316:	68c1      	ldr	r1, [r0, #12]
 800e318:	4d19      	ldr	r5, [pc, #100]	; (800e380 <SDMMC_CmdWriteMultiBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e31a:	f241 3388 	movw	r3, #5000	; 0x1388
 800e31e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e320:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e322:	4918      	ldr	r1, [pc, #96]	; (800e384 <SDMMC_CmdWriteMultiBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e324:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e328:	432c      	orrs	r4, r5
 800e32a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e32c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e330:	d312      	bcc.n	800e358 <SDMMC_CmdWriteMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 800e332:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e334:	420a      	tst	r2, r1
 800e336:	d0f9      	beq.n	800e32c <SDMMC_CmdWriteMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e338:	0494      	lsls	r4, r2, #18
 800e33a:	d4f7      	bmi.n	800e32c <SDMMC_CmdWriteMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e33c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e33e:	075a      	lsls	r2, r3, #29
 800e340:	d40e      	bmi.n	800e360 <SDMMC_CmdWriteMultiBlock+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e342:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e344:	07db      	lsls	r3, r3, #31
 800e346:	d40f      	bmi.n	800e368 <SDMMC_CmdWriteMultiBlock+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e348:	4b0f      	ldr	r3, [pc, #60]	; (800e388 <SDMMC_CmdWriteMultiBlock+0x84>)
 800e34a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e34c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	2b19      	cmp	r3, #25
 800e352:	d00d      	beq.n	800e370 <SDMMC_CmdWriteMultiBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e354:	2001      	movs	r0, #1
  return errorstate;
 800e356:	e001      	b.n	800e35c <SDMMC_CmdWriteMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e358:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e35c:	bc30      	pop	{r4, r5}
 800e35e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e360:	2304      	movs	r3, #4
 800e362:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e364:	4618      	mov	r0, r3
 800e366:	e7f9      	b.n	800e35c <SDMMC_CmdWriteMultiBlock+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e368:	2301      	movs	r3, #1
 800e36a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e36c:	4618      	mov	r0, r3
 800e36e:	e7f5      	b.n	800e35c <SDMMC_CmdWriteMultiBlock+0x58>
}
 800e370:	bc30      	pop	{r4, r5}
 800e372:	f7ff bd6f 	b.w	800de54 <SDMMC_GetCmdResp1.part.2>
 800e376:	bf00      	nop
 800e378:	200002b0 	.word	0x200002b0
 800e37c:	10624dd3 	.word	0x10624dd3
 800e380:	fffee0c0 	.word	0xfffee0c0
 800e384:	00200045 	.word	0x00200045
 800e388:	002000c5 	.word	0x002000c5

0800e38c <SDMMC_CmdStopTransfer>:
{
 800e38c:	b570      	push	{r4, r5, r6, lr}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e38e:	68c3      	ldr	r3, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800e390:	2600      	movs	r6, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e392:	4a2a      	ldr	r2, [pc, #168]	; (800e43c <SDMMC_CmdStopTransfer+0xb0>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e394:	f241 140c 	movw	r4, #4364	; 0x110c
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e39c:	4d28      	ldr	r5, [pc, #160]	; (800e440 <SDMMC_CmdStopTransfer+0xb4>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e39e:	6812      	ldr	r2, [r2, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e3a0:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e3a2:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e3a4:	4b27      	ldr	r3, [pc, #156]	; (800e444 <SDMMC_CmdStopTransfer+0xb8>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e3a6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e3aa:	fba3 3202 	umull	r3, r2, r3, r2
 800e3ae:	4b26      	ldr	r3, [pc, #152]	; (800e448 <SDMMC_CmdStopTransfer+0xbc>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e3b0:	60c1      	str	r1, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800e3b2:	6086      	str	r6, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e3b4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e3b6:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e3b8:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e3bc:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e3be:	4923      	ldr	r1, [pc, #140]	; (800e44c <SDMMC_CmdStopTransfer+0xc0>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e3c0:	432c      	orrs	r4, r5
 800e3c2:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e3c4:	b1c3      	cbz	r3, 800e3f8 <SDMMC_CmdStopTransfer+0x6c>
    sta_reg = SDMMCx->STA;
 800e3c6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e3c8:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e3ca:	420a      	tst	r2, r1
 800e3cc:	d0fa      	beq.n	800e3c4 <SDMMC_CmdStopTransfer+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e3ce:	0492      	lsls	r2, r2, #18
 800e3d0:	d4f8      	bmi.n	800e3c4 <SDMMC_CmdStopTransfer+0x38>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e3d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e3d4:	075b      	lsls	r3, r3, #29
 800e3d6:	d417      	bmi.n	800e408 <SDMMC_CmdStopTransfer+0x7c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e3d8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e3da:	f014 0401 	ands.w	r4, r4, #1
 800e3de:	d11a      	bne.n	800e416 <SDMMC_CmdStopTransfer+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e3e0:	4b1b      	ldr	r3, [pc, #108]	; (800e450 <SDMMC_CmdStopTransfer+0xc4>)
 800e3e2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e3e4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	2b0c      	cmp	r3, #12
 800e3ea:	d01b      	beq.n	800e424 <SDMMC_CmdStopTransfer+0x98>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e3ec:	68c3      	ldr	r3, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3ee:	2401      	movs	r4, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e3f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3f4:	60c3      	str	r3, [r0, #12]
 800e3f6:	e005      	b.n	800e404 <SDMMC_CmdStopTransfer+0x78>
 800e3f8:	68c3      	ldr	r3, [r0, #12]
      return SDMMC_ERROR_TIMEOUT;
 800e3fa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e3fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e402:	60c3      	str	r3, [r0, #12]
}
 800e404:	4620      	mov	r0, r4
 800e406:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e408:	2404      	movs	r4, #4
 800e40a:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e40c:	68c3      	ldr	r3, [r0, #12]
 800e40e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e412:	60c3      	str	r3, [r0, #12]
 800e414:	e7f6      	b.n	800e404 <SDMMC_CmdStopTransfer+0x78>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e416:	2401      	movs	r4, #1
 800e418:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e41a:	68c3      	ldr	r3, [r0, #12]
 800e41c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e420:	60c3      	str	r3, [r0, #12]
 800e422:	e7ef      	b.n	800e404 <SDMMC_CmdStopTransfer+0x78>
 800e424:	4605      	mov	r5, r0
 800e426:	f7ff fd15 	bl	800de54 <SDMMC_GetCmdResp1.part.2>
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e42a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800e42e:	bf18      	it	ne
 800e430:	4604      	movne	r4, r0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e432:	68eb      	ldr	r3, [r5, #12]
 800e434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e438:	60eb      	str	r3, [r5, #12]
 800e43a:	e7e3      	b.n	800e404 <SDMMC_CmdStopTransfer+0x78>
 800e43c:	200002b0 	.word	0x200002b0
 800e440:	fffee0c0 	.word	0xfffee0c0
 800e444:	10624dd3 	.word	0x10624dd3
 800e448:	05f5e100 	.word	0x05f5e100
 800e44c:	00200045 	.word	0x00200045
 800e450:	002000c5 	.word	0x002000c5

0800e454 <SDMMC_CmdSelDesel>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e454:	4b1c      	ldr	r3, [pc, #112]	; (800e4c8 <SDMMC_CmdSelDesel+0x74>)
 800e456:	491d      	ldr	r1, [pc, #116]	; (800e4cc <SDMMC_CmdSelDesel+0x78>)
{
 800e458:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e45a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e45c:	f241 1407 	movw	r4, #4359	; 0x1107
  SDMMCx->ARG = Command->Argument;
 800e460:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e462:	4d1b      	ldr	r5, [pc, #108]	; (800e4d0 <SDMMC_CmdSelDesel+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e464:	fba1 3203 	umull	r3, r2, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e468:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e46a:	f241 3388 	movw	r3, #5000	; 0x1388
 800e46e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e470:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e472:	4918      	ldr	r1, [pc, #96]	; (800e4d4 <SDMMC_CmdSelDesel+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e474:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e478:	432c      	orrs	r4, r5
 800e47a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e47c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e480:	d312      	bcc.n	800e4a8 <SDMMC_CmdSelDesel+0x54>
    sta_reg = SDMMCx->STA;
 800e482:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e484:	420a      	tst	r2, r1
 800e486:	d0f9      	beq.n	800e47c <SDMMC_CmdSelDesel+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e488:	0494      	lsls	r4, r2, #18
 800e48a:	d4f7      	bmi.n	800e47c <SDMMC_CmdSelDesel+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e48c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e48e:	075a      	lsls	r2, r3, #29
 800e490:	d40e      	bmi.n	800e4b0 <SDMMC_CmdSelDesel+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e492:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e494:	07db      	lsls	r3, r3, #31
 800e496:	d40f      	bmi.n	800e4b8 <SDMMC_CmdSelDesel+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e498:	4b0f      	ldr	r3, [pc, #60]	; (800e4d8 <SDMMC_CmdSelDesel+0x84>)
 800e49a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e49c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	2b07      	cmp	r3, #7
 800e4a2:	d00d      	beq.n	800e4c0 <SDMMC_CmdSelDesel+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4a4:	2001      	movs	r0, #1
  return errorstate;
 800e4a6:	e001      	b.n	800e4ac <SDMMC_CmdSelDesel+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e4a8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e4ac:	bc30      	pop	{r4, r5}
 800e4ae:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e4b0:	2304      	movs	r3, #4
 800e4b2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	e7f9      	b.n	800e4ac <SDMMC_CmdSelDesel+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4bc:	4618      	mov	r0, r3
 800e4be:	e7f5      	b.n	800e4ac <SDMMC_CmdSelDesel+0x58>
}
 800e4c0:	bc30      	pop	{r4, r5}
 800e4c2:	f7ff bcc7 	b.w	800de54 <SDMMC_GetCmdResp1.part.2>
 800e4c6:	bf00      	nop
 800e4c8:	200002b0 	.word	0x200002b0
 800e4cc:	10624dd3 	.word	0x10624dd3
 800e4d0:	fffee0c0 	.word	0xfffee0c0
 800e4d4:	00200045 	.word	0x00200045
 800e4d8:	002000c5 	.word	0x002000c5

0800e4dc <SDMMC_CmdGoIdleState>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e4dc:	4b12      	ldr	r3, [pc, #72]	; (800e528 <SDMMC_CmdGoIdleState+0x4c>)
{
 800e4de:	4602      	mov	r2, r0
  SDMMCx->ARG = Command->Argument;
 800e4e0:	2100      	movs	r1, #0
{
 800e4e2:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e4e4:	4c11      	ldr	r4, [pc, #68]	; (800e52c <SDMMC_CmdGoIdleState+0x50>)
 800e4e6:	6818      	ldr	r0, [r3, #0]
 800e4e8:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 800e4ec:	6091      	str	r1, [r2, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e4ee:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e4f2:	490f      	ldr	r1, [pc, #60]	; (800e530 <SDMMC_CmdGoIdleState+0x54>)
 800e4f4:	68d4      	ldr	r4, [r2, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e4f6:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e4f8:	4021      	ands	r1, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e4fa:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e4fe:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800e502:	60d1      	str	r1, [r2, #12]
 800e504:	e002      	b.n	800e50c <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e506:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800e508:	0609      	lsls	r1, r1, #24
 800e50a:	d407      	bmi.n	800e51c <SDMMC_CmdGoIdleState+0x40>
    if (count-- == 0U)
 800e50c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e510:	d2f9      	bcs.n	800e506 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800e512:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e51a:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e51c:	4b05      	ldr	r3, [pc, #20]	; (800e534 <SDMMC_CmdGoIdleState+0x58>)
  return SDMMC_ERROR_NONE;
 800e51e:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e520:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e522:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	200002b0 	.word	0x200002b0
 800e52c:	10624dd3 	.word	0x10624dd3
 800e530:	fffee0c0 	.word	0xfffee0c0
 800e534:	002000c5 	.word	0x002000c5

0800e538 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e538:	4a1c      	ldr	r2, [pc, #112]	; (800e5ac <SDMMC_CmdOperCond+0x74>)
{
 800e53a:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e53c:	4b1c      	ldr	r3, [pc, #112]	; (800e5b0 <SDMMC_CmdOperCond+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e53e:	f241 1008 	movw	r0, #4360	; 0x1108
{
 800e542:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800e544:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e548:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e54a:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e54c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e550:	68cd      	ldr	r5, [r1, #12]
 800e552:	4c18      	ldr	r4, [pc, #96]	; (800e5b4 <SDMMC_CmdOperCond+0x7c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e554:	f241 3388 	movw	r3, #5000	; 0x1388
 800e558:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e55a:	402c      	ands	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e55c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e560:	4320      	orrs	r0, r4
 800e562:	60c8      	str	r0, [r1, #12]

  do
  {
    if (count-- == 0U)
 800e564:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e568:	d313      	bcc.n	800e592 <SDMMC_CmdOperCond+0x5a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800e56a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e56c:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e570:	d0f8      	beq.n	800e564 <SDMMC_CmdOperCond+0x2c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e572:	0492      	lsls	r2, r2, #18
 800e574:	d4f6      	bmi.n	800e564 <SDMMC_CmdOperCond+0x2c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e576:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e578:	075b      	lsls	r3, r3, #29
 800e57a:	d40e      	bmi.n	800e59a <SDMMC_CmdOperCond+0x62>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e57c:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800e57e:	f010 0001 	ands.w	r0, r0, #1
 800e582:	d10d      	bne.n	800e5a0 <SDMMC_CmdOperCond+0x68>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e584:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e586:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800e58a:	d00c      	beq.n	800e5a6 <SDMMC_CmdOperCond+0x6e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e58c:	2340      	movs	r3, #64	; 0x40
 800e58e:	638b      	str	r3, [r1, #56]	; 0x38
 800e590:	e001      	b.n	800e596 <SDMMC_CmdOperCond+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 800e592:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e596:	bc30      	pop	{r4, r5}
 800e598:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e59a:	2004      	movs	r0, #4
 800e59c:	6388      	str	r0, [r1, #56]	; 0x38
 800e59e:	e7fa      	b.n	800e596 <SDMMC_CmdOperCond+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e5a0:	2001      	movs	r0, #1
 800e5a2:	6388      	str	r0, [r1, #56]	; 0x38
 800e5a4:	e7f7      	b.n	800e596 <SDMMC_CmdOperCond+0x5e>
  }

  return SDMMC_ERROR_NONE;
 800e5a6:	4618      	mov	r0, r3
  return errorstate;
 800e5a8:	e7f5      	b.n	800e596 <SDMMC_CmdOperCond+0x5e>
 800e5aa:	bf00      	nop
 800e5ac:	200002b0 	.word	0x200002b0
 800e5b0:	10624dd3 	.word	0x10624dd3
 800e5b4:	fffee0c0 	.word	0xfffee0c0

0800e5b8 <SDMMC_CmdAppCommand>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e5b8:	4a1c      	ldr	r2, [pc, #112]	; (800e62c <SDMMC_CmdAppCommand+0x74>)
 800e5ba:	4b1d      	ldr	r3, [pc, #116]	; (800e630 <SDMMC_CmdAppCommand+0x78>)
{
 800e5bc:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e5be:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5c0:	f241 1437 	movw	r4, #4407	; 0x1137
  SDMMCx->ARG = Command->Argument;
 800e5c4:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e5c6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5ca:	68c1      	ldr	r1, [r0, #12]
 800e5cc:	4d19      	ldr	r5, [pc, #100]	; (800e634 <SDMMC_CmdAppCommand+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e5ce:	f241 3388 	movw	r3, #5000	; 0x1388
 800e5d2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5d4:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e5d6:	4918      	ldr	r1, [pc, #96]	; (800e638 <SDMMC_CmdAppCommand+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e5d8:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5dc:	432c      	orrs	r4, r5
 800e5de:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e5e0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e5e4:	d312      	bcc.n	800e60c <SDMMC_CmdAppCommand+0x54>
    sta_reg = SDMMCx->STA;
 800e5e6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e5e8:	420a      	tst	r2, r1
 800e5ea:	d0f9      	beq.n	800e5e0 <SDMMC_CmdAppCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e5ec:	0494      	lsls	r4, r2, #18
 800e5ee:	d4f7      	bmi.n	800e5e0 <SDMMC_CmdAppCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e5f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e5f2:	075a      	lsls	r2, r3, #29
 800e5f4:	d40e      	bmi.n	800e614 <SDMMC_CmdAppCommand+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e5f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e5f8:	07db      	lsls	r3, r3, #31
 800e5fa:	d40f      	bmi.n	800e61c <SDMMC_CmdAppCommand+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e5fc:	4b0f      	ldr	r3, [pc, #60]	; (800e63c <SDMMC_CmdAppCommand+0x84>)
 800e5fe:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e600:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e602:	b2db      	uxtb	r3, r3
 800e604:	2b37      	cmp	r3, #55	; 0x37
 800e606:	d00d      	beq.n	800e624 <SDMMC_CmdAppCommand+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e608:	2001      	movs	r0, #1
  return errorstate;
 800e60a:	e001      	b.n	800e610 <SDMMC_CmdAppCommand+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e60c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e610:	bc30      	pop	{r4, r5}
 800e612:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e614:	2304      	movs	r3, #4
 800e616:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e618:	4618      	mov	r0, r3
 800e61a:	e7f9      	b.n	800e610 <SDMMC_CmdAppCommand+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e61c:	2301      	movs	r3, #1
 800e61e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e620:	4618      	mov	r0, r3
 800e622:	e7f5      	b.n	800e610 <SDMMC_CmdAppCommand+0x58>
}
 800e624:	bc30      	pop	{r4, r5}
 800e626:	f7ff bc15 	b.w	800de54 <SDMMC_GetCmdResp1.part.2>
 800e62a:	bf00      	nop
 800e62c:	200002b0 	.word	0x200002b0
 800e630:	10624dd3 	.word	0x10624dd3
 800e634:	fffee0c0 	.word	0xfffee0c0
 800e638:	00200045 	.word	0x00200045
 800e63c:	002000c5 	.word	0x002000c5

0800e640 <SDMMC_CmdAppOperCommand>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e640:	4a15      	ldr	r2, [pc, #84]	; (800e698 <SDMMC_CmdAppOperCommand+0x58>)
 800e642:	4b16      	ldr	r3, [pc, #88]	; (800e69c <SDMMC_CmdAppOperCommand+0x5c>)
{
 800e644:	b430      	push	{r4, r5}
 800e646:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e648:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e64a:	f241 1029 	movw	r0, #4393	; 0x1129
  SDMMCx->ARG = Command->Argument;
 800e64e:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e650:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e654:	68e5      	ldr	r5, [r4, #12]
 800e656:	4912      	ldr	r1, [pc, #72]	; (800e6a0 <SDMMC_CmdAppOperCommand+0x60>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e658:	f241 3388 	movw	r3, #5000	; 0x1388
 800e65c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e65e:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e660:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e664:	4308      	orrs	r0, r1
 800e666:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 800e668:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e66c:	d30d      	bcc.n	800e68a <SDMMC_CmdAppOperCommand+0x4a>
    sta_reg = SDMMCx->STA;
 800e66e:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e670:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e674:	d0f8      	beq.n	800e668 <SDMMC_CmdAppOperCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e676:	0492      	lsls	r2, r2, #18
 800e678:	d4f6      	bmi.n	800e668 <SDMMC_CmdAppOperCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e67a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e67c:	f010 0004 	ands.w	r0, r0, #4
 800e680:	d107      	bne.n	800e692 <SDMMC_CmdAppOperCommand+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e682:	4b08      	ldr	r3, [pc, #32]	; (800e6a4 <SDMMC_CmdAppOperCommand+0x64>)
 800e684:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800e686:	bc30      	pop	{r4, r5}
 800e688:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800e68a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e68e:	bc30      	pop	{r4, r5}
 800e690:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e692:	2004      	movs	r0, #4
 800e694:	63a0      	str	r0, [r4, #56]	; 0x38
 800e696:	e7fa      	b.n	800e68e <SDMMC_CmdAppOperCommand+0x4e>
 800e698:	200002b0 	.word	0x200002b0
 800e69c:	10624dd3 	.word	0x10624dd3
 800e6a0:	fffee0c0 	.word	0xfffee0c0
 800e6a4:	002000c5 	.word	0x002000c5

0800e6a8 <SDMMC_CmdBusWidth>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e6a8:	4a1c      	ldr	r2, [pc, #112]	; (800e71c <SDMMC_CmdBusWidth+0x74>)
 800e6aa:	4b1d      	ldr	r3, [pc, #116]	; (800e720 <SDMMC_CmdBusWidth+0x78>)
{
 800e6ac:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e6ae:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e6b0:	f241 1406 	movw	r4, #4358	; 0x1106
  SDMMCx->ARG = Command->Argument;
 800e6b4:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e6b6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e6ba:	68c1      	ldr	r1, [r0, #12]
 800e6bc:	4d19      	ldr	r5, [pc, #100]	; (800e724 <SDMMC_CmdBusWidth+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e6be:	f241 3388 	movw	r3, #5000	; 0x1388
 800e6c2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e6c4:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e6c6:	4918      	ldr	r1, [pc, #96]	; (800e728 <SDMMC_CmdBusWidth+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e6c8:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e6cc:	432c      	orrs	r4, r5
 800e6ce:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e6d0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e6d4:	d312      	bcc.n	800e6fc <SDMMC_CmdBusWidth+0x54>
    sta_reg = SDMMCx->STA;
 800e6d6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e6d8:	420a      	tst	r2, r1
 800e6da:	d0f9      	beq.n	800e6d0 <SDMMC_CmdBusWidth+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e6dc:	0494      	lsls	r4, r2, #18
 800e6de:	d4f7      	bmi.n	800e6d0 <SDMMC_CmdBusWidth+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e6e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e6e2:	075a      	lsls	r2, r3, #29
 800e6e4:	d40e      	bmi.n	800e704 <SDMMC_CmdBusWidth+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e6e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e6e8:	07db      	lsls	r3, r3, #31
 800e6ea:	d40f      	bmi.n	800e70c <SDMMC_CmdBusWidth+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e6ec:	4b0f      	ldr	r3, [pc, #60]	; (800e72c <SDMMC_CmdBusWidth+0x84>)
 800e6ee:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e6f0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e6f2:	b2db      	uxtb	r3, r3
 800e6f4:	2b06      	cmp	r3, #6
 800e6f6:	d00d      	beq.n	800e714 <SDMMC_CmdBusWidth+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6f8:	2001      	movs	r0, #1
  return errorstate;
 800e6fa:	e001      	b.n	800e700 <SDMMC_CmdBusWidth+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e6fc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e700:	bc30      	pop	{r4, r5}
 800e702:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e704:	2304      	movs	r3, #4
 800e706:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e708:	4618      	mov	r0, r3
 800e70a:	e7f9      	b.n	800e700 <SDMMC_CmdBusWidth+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e70c:	2301      	movs	r3, #1
 800e70e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e710:	4618      	mov	r0, r3
 800e712:	e7f5      	b.n	800e700 <SDMMC_CmdBusWidth+0x58>
}
 800e714:	bc30      	pop	{r4, r5}
 800e716:	f7ff bb9d 	b.w	800de54 <SDMMC_GetCmdResp1.part.2>
 800e71a:	bf00      	nop
 800e71c:	200002b0 	.word	0x200002b0
 800e720:	10624dd3 	.word	0x10624dd3
 800e724:	fffee0c0 	.word	0xfffee0c0
 800e728:	00200045 	.word	0x00200045
 800e72c:	002000c5 	.word	0x002000c5

0800e730 <SDMMC_CmdSendSCR>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e730:	4a1c      	ldr	r2, [pc, #112]	; (800e7a4 <SDMMC_CmdSendSCR+0x74>)
  SDMMCx->ARG = Command->Argument;
 800e732:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e734:	4b1c      	ldr	r3, [pc, #112]	; (800e7a8 <SDMMC_CmdSendSCR+0x78>)
{
 800e736:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e738:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e73a:	f241 1433 	movw	r4, #4403	; 0x1133
  SDMMCx->ARG = Command->Argument;
 800e73e:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e740:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e744:	68c1      	ldr	r1, [r0, #12]
 800e746:	4d19      	ldr	r5, [pc, #100]	; (800e7ac <SDMMC_CmdSendSCR+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e748:	f241 3388 	movw	r3, #5000	; 0x1388
 800e74c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e74e:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e750:	4917      	ldr	r1, [pc, #92]	; (800e7b0 <SDMMC_CmdSendSCR+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e752:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e756:	432c      	orrs	r4, r5
 800e758:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e75a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e75e:	d312      	bcc.n	800e786 <SDMMC_CmdSendSCR+0x56>
    sta_reg = SDMMCx->STA;
 800e760:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e762:	420a      	tst	r2, r1
 800e764:	d0f9      	beq.n	800e75a <SDMMC_CmdSendSCR+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e766:	0494      	lsls	r4, r2, #18
 800e768:	d4f7      	bmi.n	800e75a <SDMMC_CmdSendSCR+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e76a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e76c:	075a      	lsls	r2, r3, #29
 800e76e:	d40e      	bmi.n	800e78e <SDMMC_CmdSendSCR+0x5e>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e770:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e772:	07db      	lsls	r3, r3, #31
 800e774:	d40f      	bmi.n	800e796 <SDMMC_CmdSendSCR+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e776:	4b0f      	ldr	r3, [pc, #60]	; (800e7b4 <SDMMC_CmdSendSCR+0x84>)
 800e778:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e77a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	2b33      	cmp	r3, #51	; 0x33
 800e780:	d00d      	beq.n	800e79e <SDMMC_CmdSendSCR+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e782:	2001      	movs	r0, #1
  return errorstate;
 800e784:	e001      	b.n	800e78a <SDMMC_CmdSendSCR+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 800e786:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e78a:	bc30      	pop	{r4, r5}
 800e78c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e78e:	2304      	movs	r3, #4
 800e790:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e792:	4618      	mov	r0, r3
 800e794:	e7f9      	b.n	800e78a <SDMMC_CmdSendSCR+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e796:	2301      	movs	r3, #1
 800e798:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e79a:	4618      	mov	r0, r3
 800e79c:	e7f5      	b.n	800e78a <SDMMC_CmdSendSCR+0x5a>
}
 800e79e:	bc30      	pop	{r4, r5}
 800e7a0:	f7ff bb58 	b.w	800de54 <SDMMC_GetCmdResp1.part.2>
 800e7a4:	200002b0 	.word	0x200002b0
 800e7a8:	10624dd3 	.word	0x10624dd3
 800e7ac:	fffee0c0 	.word	0xfffee0c0
 800e7b0:	00200045 	.word	0x00200045
 800e7b4:	002000c5 	.word	0x002000c5

0800e7b8 <SDMMC_CmdSendCID>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e7b8:	4a18      	ldr	r2, [pc, #96]	; (800e81c <SDMMC_CmdSendCID+0x64>)
{
 800e7ba:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e7bc:	4b18      	ldr	r3, [pc, #96]	; (800e820 <SDMMC_CmdSendCID+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e7be:	f241 3002 	movw	r0, #4866	; 0x1302
{
 800e7c2:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800e7c4:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e7c6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e7c8:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e7ca:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e7ce:	68cd      	ldr	r5, [r1, #12]
 800e7d0:	4c14      	ldr	r4, [pc, #80]	; (800e824 <SDMMC_CmdSendCID+0x6c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e7d2:	f241 3388 	movw	r3, #5000	; 0x1388
 800e7d6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e7d8:	402c      	ands	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e7da:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e7de:	4320      	orrs	r0, r4
 800e7e0:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 800e7e2:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e7e6:	d30f      	bcc.n	800e808 <SDMMC_CmdSendCID+0x50>
    sta_reg = SDMMCx->STA;
 800e7e8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e7ea:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e7ee:	d0f8      	beq.n	800e7e2 <SDMMC_CmdSendCID+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e7f0:	0492      	lsls	r2, r2, #18
 800e7f2:	d4f6      	bmi.n	800e7e2 <SDMMC_CmdSendCID+0x2a>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e7f4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e7f6:	075b      	lsls	r3, r3, #29
 800e7f8:	d40a      	bmi.n	800e810 <SDMMC_CmdSendCID+0x58>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e7fa:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800e7fc:	f010 0001 	ands.w	r0, r0, #1
 800e800:	d109      	bne.n	800e816 <SDMMC_CmdSendCID+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e802:	4b09      	ldr	r3, [pc, #36]	; (800e828 <SDMMC_CmdSendCID+0x70>)
 800e804:	638b      	str	r3, [r1, #56]	; 0x38
 800e806:	e001      	b.n	800e80c <SDMMC_CmdSendCID+0x54>
      return SDMMC_ERROR_TIMEOUT;
 800e808:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e80c:	bc30      	pop	{r4, r5}
 800e80e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e810:	2004      	movs	r0, #4
 800e812:	6388      	str	r0, [r1, #56]	; 0x38
 800e814:	e7fa      	b.n	800e80c <SDMMC_CmdSendCID+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e816:	2001      	movs	r0, #1
 800e818:	6388      	str	r0, [r1, #56]	; 0x38
 800e81a:	e7f7      	b.n	800e80c <SDMMC_CmdSendCID+0x54>
 800e81c:	200002b0 	.word	0x200002b0
 800e820:	10624dd3 	.word	0x10624dd3
 800e824:	fffee0c0 	.word	0xfffee0c0
 800e828:	002000c5 	.word	0x002000c5

0800e82c <SDMMC_CmdSendCSD>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e82c:	4a18      	ldr	r2, [pc, #96]	; (800e890 <SDMMC_CmdSendCSD+0x64>)
 800e82e:	4b19      	ldr	r3, [pc, #100]	; (800e894 <SDMMC_CmdSendCSD+0x68>)
{
 800e830:	b430      	push	{r4, r5}
 800e832:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e834:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e836:	f241 3009 	movw	r0, #4873	; 0x1309
  SDMMCx->ARG = Command->Argument;
 800e83a:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e83c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e840:	68e5      	ldr	r5, [r4, #12]
 800e842:	4915      	ldr	r1, [pc, #84]	; (800e898 <SDMMC_CmdSendCSD+0x6c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e844:	f241 3388 	movw	r3, #5000	; 0x1388
 800e848:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e84a:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e84c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e850:	4308      	orrs	r0, r1
 800e852:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 800e854:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e858:	d30f      	bcc.n	800e87a <SDMMC_CmdSendCSD+0x4e>
    sta_reg = SDMMCx->STA;
 800e85a:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e85c:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e860:	d0f8      	beq.n	800e854 <SDMMC_CmdSendCSD+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e862:	0492      	lsls	r2, r2, #18
 800e864:	d4f6      	bmi.n	800e854 <SDMMC_CmdSendCSD+0x28>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e868:	075b      	lsls	r3, r3, #29
 800e86a:	d40a      	bmi.n	800e882 <SDMMC_CmdSendCSD+0x56>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e86c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e86e:	f010 0001 	ands.w	r0, r0, #1
 800e872:	d109      	bne.n	800e888 <SDMMC_CmdSendCSD+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e874:	4b09      	ldr	r3, [pc, #36]	; (800e89c <SDMMC_CmdSendCSD+0x70>)
 800e876:	63a3      	str	r3, [r4, #56]	; 0x38
 800e878:	e001      	b.n	800e87e <SDMMC_CmdSendCSD+0x52>
      return SDMMC_ERROR_TIMEOUT;
 800e87a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e87e:	bc30      	pop	{r4, r5}
 800e880:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e882:	2004      	movs	r0, #4
 800e884:	63a0      	str	r0, [r4, #56]	; 0x38
 800e886:	e7fa      	b.n	800e87e <SDMMC_CmdSendCSD+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e888:	2001      	movs	r0, #1
 800e88a:	63a0      	str	r0, [r4, #56]	; 0x38
 800e88c:	e7f7      	b.n	800e87e <SDMMC_CmdSendCSD+0x52>
 800e88e:	bf00      	nop
 800e890:	200002b0 	.word	0x200002b0
 800e894:	10624dd3 	.word	0x10624dd3
 800e898:	fffee0c0 	.word	0xfffee0c0
 800e89c:	002000c5 	.word	0x002000c5

0800e8a0 <SDMMC_CmdSetRelAdd>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e8a0:	4b25      	ldr	r3, [pc, #148]	; (800e938 <SDMMC_CmdSetRelAdd+0x98>)
 800e8a2:	4a26      	ldr	r2, [pc, #152]	; (800e93c <SDMMC_CmdSetRelAdd+0x9c>)
{
 800e8a4:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 800e8a6:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e8a8:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e8aa:	4d25      	ldr	r5, [pc, #148]	; (800e940 <SDMMC_CmdSetRelAdd+0xa0>)
  SDMMCx->ARG = Command->Argument;
 800e8ac:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e8ae:	f241 1403 	movw	r4, #4355	; 0x1103
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e8b2:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e8b6:	68c6      	ldr	r6, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e8b8:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e8ba:	4035      	ands	r5, r6
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e8bc:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e8c0:	432c      	orrs	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e8c2:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e8c6:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e8c8:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e8cc:	d311      	bcc.n	800e8f2 <SDMMC_CmdSetRelAdd+0x52>
    sta_reg = SDMMCx->STA;
 800e8ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e8d0:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e8d4:	d0f8      	beq.n	800e8c8 <SDMMC_CmdSetRelAdd+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e8d6:	0496      	lsls	r6, r2, #18
 800e8d8:	d4f6      	bmi.n	800e8c8 <SDMMC_CmdSetRelAdd+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e8da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e8dc:	075d      	lsls	r5, r3, #29
 800e8de:	d40c      	bmi.n	800e8fa <SDMMC_CmdSetRelAdd+0x5a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e8e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e8e2:	07dc      	lsls	r4, r3, #31
 800e8e4:	d40d      	bmi.n	800e902 <SDMMC_CmdSetRelAdd+0x62>
  return (uint8_t)(SDMMCx->RESPCMD);
 800e8e6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	2b03      	cmp	r3, #3
 800e8ec:	d00d      	beq.n	800e90a <SDMMC_CmdSetRelAdd+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8ee:	2001      	movs	r0, #1
 800e8f0:	e001      	b.n	800e8f6 <SDMMC_CmdSetRelAdd+0x56>
      return SDMMC_ERROR_TIMEOUT;
 800e8f2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e8f6:	bc70      	pop	{r4, r5, r6}
 800e8f8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e8fa:	2304      	movs	r3, #4
 800e8fc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8fe:	4618      	mov	r0, r3
 800e900:	e7f9      	b.n	800e8f6 <SDMMC_CmdSetRelAdd+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e902:	2301      	movs	r3, #1
 800e904:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e906:	4618      	mov	r0, r3
 800e908:	e7f5      	b.n	800e8f6 <SDMMC_CmdSetRelAdd+0x56>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e90a:	4b0e      	ldr	r3, [pc, #56]	; (800e944 <SDMMC_CmdSetRelAdd+0xa4>)
 800e90c:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800e90e:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e910:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800e914:	d009      	beq.n	800e92a <SDMMC_CmdSetRelAdd+0x8a>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e916:	045a      	lsls	r2, r3, #17
 800e918:	d40a      	bmi.n	800e930 <SDMMC_CmdSetRelAdd+0x90>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e91a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800e91e:	bf0c      	ite	eq
 800e920:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800e924:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800e928:	e7e5      	b.n	800e8f6 <SDMMC_CmdSetRelAdd+0x56>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e92a:	0c1b      	lsrs	r3, r3, #16
 800e92c:	800b      	strh	r3, [r1, #0]
 800e92e:	e7e2      	b.n	800e8f6 <SDMMC_CmdSetRelAdd+0x56>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e930:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e934:	e7df      	b.n	800e8f6 <SDMMC_CmdSetRelAdd+0x56>
 800e936:	bf00      	nop
 800e938:	200002b0 	.word	0x200002b0
 800e93c:	10624dd3 	.word	0x10624dd3
 800e940:	fffee0c0 	.word	0xfffee0c0
 800e944:	002000c5 	.word	0x002000c5

0800e948 <SDMMC_CmdSendStatus>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e948:	4a1c      	ldr	r2, [pc, #112]	; (800e9bc <SDMMC_CmdSendStatus+0x74>)
 800e94a:	4b1d      	ldr	r3, [pc, #116]	; (800e9c0 <SDMMC_CmdSendStatus+0x78>)
{
 800e94c:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e94e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e950:	f241 140d 	movw	r4, #4365	; 0x110d
  SDMMCx->ARG = Command->Argument;
 800e954:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e956:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e95a:	68c1      	ldr	r1, [r0, #12]
 800e95c:	4d19      	ldr	r5, [pc, #100]	; (800e9c4 <SDMMC_CmdSendStatus+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e95e:	f241 3388 	movw	r3, #5000	; 0x1388
 800e962:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e964:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e966:	4918      	ldr	r1, [pc, #96]	; (800e9c8 <SDMMC_CmdSendStatus+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e968:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e96c:	432c      	orrs	r4, r5
 800e96e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e970:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e974:	d312      	bcc.n	800e99c <SDMMC_CmdSendStatus+0x54>
    sta_reg = SDMMCx->STA;
 800e976:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e978:	420a      	tst	r2, r1
 800e97a:	d0f9      	beq.n	800e970 <SDMMC_CmdSendStatus+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e97c:	0494      	lsls	r4, r2, #18
 800e97e:	d4f7      	bmi.n	800e970 <SDMMC_CmdSendStatus+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e980:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e982:	075a      	lsls	r2, r3, #29
 800e984:	d40e      	bmi.n	800e9a4 <SDMMC_CmdSendStatus+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e986:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e988:	07db      	lsls	r3, r3, #31
 800e98a:	d40f      	bmi.n	800e9ac <SDMMC_CmdSendStatus+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e98c:	4b0f      	ldr	r3, [pc, #60]	; (800e9cc <SDMMC_CmdSendStatus+0x84>)
 800e98e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e990:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e992:	b2db      	uxtb	r3, r3
 800e994:	2b0d      	cmp	r3, #13
 800e996:	d00d      	beq.n	800e9b4 <SDMMC_CmdSendStatus+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e998:	2001      	movs	r0, #1
  return errorstate;
 800e99a:	e001      	b.n	800e9a0 <SDMMC_CmdSendStatus+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e99c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e9a0:	bc30      	pop	{r4, r5}
 800e9a2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e9a4:	2304      	movs	r3, #4
 800e9a6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	e7f9      	b.n	800e9a0 <SDMMC_CmdSendStatus+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	e7f5      	b.n	800e9a0 <SDMMC_CmdSendStatus+0x58>
}
 800e9b4:	bc30      	pop	{r4, r5}
 800e9b6:	f7ff ba4d 	b.w	800de54 <SDMMC_GetCmdResp1.part.2>
 800e9ba:	bf00      	nop
 800e9bc:	200002b0 	.word	0x200002b0
 800e9c0:	10624dd3 	.word	0x10624dd3
 800e9c4:	fffee0c0 	.word	0xfffee0c0
 800e9c8:	00200045 	.word	0x00200045
 800e9cc:	002000c5 	.word	0x002000c5

0800e9d0 <SDMMC_CmdStatusRegister>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e9d0:	4a1c      	ldr	r2, [pc, #112]	; (800ea44 <SDMMC_CmdStatusRegister+0x74>)
  SDMMCx->ARG = Command->Argument;
 800e9d2:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e9d4:	4b1c      	ldr	r3, [pc, #112]	; (800ea48 <SDMMC_CmdStatusRegister+0x78>)
{
 800e9d6:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e9d8:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e9da:	f241 140d 	movw	r4, #4365	; 0x110d
  SDMMCx->ARG = Command->Argument;
 800e9de:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e9e0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e9e4:	68c1      	ldr	r1, [r0, #12]
 800e9e6:	4d19      	ldr	r5, [pc, #100]	; (800ea4c <SDMMC_CmdStatusRegister+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e9e8:	f241 3388 	movw	r3, #5000	; 0x1388
 800e9ec:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e9ee:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e9f0:	4917      	ldr	r1, [pc, #92]	; (800ea50 <SDMMC_CmdStatusRegister+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e9f2:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e9f6:	432c      	orrs	r4, r5
 800e9f8:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e9fa:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e9fe:	d312      	bcc.n	800ea26 <SDMMC_CmdStatusRegister+0x56>
    sta_reg = SDMMCx->STA;
 800ea00:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ea02:	420a      	tst	r2, r1
 800ea04:	d0f9      	beq.n	800e9fa <SDMMC_CmdStatusRegister+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ea06:	0494      	lsls	r4, r2, #18
 800ea08:	d4f7      	bmi.n	800e9fa <SDMMC_CmdStatusRegister+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ea0c:	075a      	lsls	r2, r3, #29
 800ea0e:	d40e      	bmi.n	800ea2e <SDMMC_CmdStatusRegister+0x5e>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ea10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ea12:	07db      	lsls	r3, r3, #31
 800ea14:	d40f      	bmi.n	800ea36 <SDMMC_CmdStatusRegister+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea16:	4b0f      	ldr	r3, [pc, #60]	; (800ea54 <SDMMC_CmdStatusRegister+0x84>)
 800ea18:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ea1a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	2b0d      	cmp	r3, #13
 800ea20:	d00d      	beq.n	800ea3e <SDMMC_CmdStatusRegister+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea22:	2001      	movs	r0, #1
  return errorstate;
 800ea24:	e001      	b.n	800ea2a <SDMMC_CmdStatusRegister+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 800ea26:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800ea2a:	bc30      	pop	{r4, r5}
 800ea2c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea2e:	2304      	movs	r3, #4
 800ea30:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea32:	4618      	mov	r0, r3
 800ea34:	e7f9      	b.n	800ea2a <SDMMC_CmdStatusRegister+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ea36:	2301      	movs	r3, #1
 800ea38:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	e7f5      	b.n	800ea2a <SDMMC_CmdStatusRegister+0x5a>
}
 800ea3e:	bc30      	pop	{r4, r5}
 800ea40:	f7ff ba08 	b.w	800de54 <SDMMC_GetCmdResp1.part.2>
 800ea44:	200002b0 	.word	0x200002b0
 800ea48:	10624dd3 	.word	0x10624dd3
 800ea4c:	fffee0c0 	.word	0xfffee0c0
 800ea50:	00200045 	.word	0x00200045
 800ea54:	002000c5 	.word	0x002000c5

0800ea58 <SDMMC_CmdVoltageSwitch>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ea58:	4a1c      	ldr	r2, [pc, #112]	; (800eacc <SDMMC_CmdVoltageSwitch+0x74>)
  SDMMCx->ARG = Command->Argument;
 800ea5a:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ea5c:	4b1c      	ldr	r3, [pc, #112]	; (800ead0 <SDMMC_CmdVoltageSwitch+0x78>)
{
 800ea5e:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ea60:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ea62:	f241 140b 	movw	r4, #4363	; 0x110b
  SDMMCx->ARG = Command->Argument;
 800ea66:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ea68:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ea6c:	68c1      	ldr	r1, [r0, #12]
 800ea6e:	4d19      	ldr	r5, [pc, #100]	; (800ead4 <SDMMC_CmdVoltageSwitch+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ea70:	f241 3388 	movw	r3, #5000	; 0x1388
 800ea74:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ea76:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ea78:	4917      	ldr	r1, [pc, #92]	; (800ead8 <SDMMC_CmdVoltageSwitch+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ea7a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ea7e:	432c      	orrs	r4, r5
 800ea80:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800ea82:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800ea86:	d312      	bcc.n	800eaae <SDMMC_CmdVoltageSwitch+0x56>
    sta_reg = SDMMCx->STA;
 800ea88:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ea8a:	420a      	tst	r2, r1
 800ea8c:	d0f9      	beq.n	800ea82 <SDMMC_CmdVoltageSwitch+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ea8e:	0494      	lsls	r4, r2, #18
 800ea90:	d4f7      	bmi.n	800ea82 <SDMMC_CmdVoltageSwitch+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ea94:	075a      	lsls	r2, r3, #29
 800ea96:	d40e      	bmi.n	800eab6 <SDMMC_CmdVoltageSwitch+0x5e>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ea98:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ea9a:	07db      	lsls	r3, r3, #31
 800ea9c:	d40f      	bmi.n	800eabe <SDMMC_CmdVoltageSwitch+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea9e:	4b0f      	ldr	r3, [pc, #60]	; (800eadc <SDMMC_CmdVoltageSwitch+0x84>)
 800eaa0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800eaa2:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800eaa4:	b2db      	uxtb	r3, r3
 800eaa6:	2b0b      	cmp	r3, #11
 800eaa8:	d00d      	beq.n	800eac6 <SDMMC_CmdVoltageSwitch+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eaaa:	2001      	movs	r0, #1
  return errorstate;
 800eaac:	e001      	b.n	800eab2 <SDMMC_CmdVoltageSwitch+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 800eaae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800eab2:	bc30      	pop	{r4, r5}
 800eab4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eab6:	2304      	movs	r3, #4
 800eab8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eaba:	4618      	mov	r0, r3
 800eabc:	e7f9      	b.n	800eab2 <SDMMC_CmdVoltageSwitch+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eabe:	2301      	movs	r3, #1
 800eac0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eac2:	4618      	mov	r0, r3
 800eac4:	e7f5      	b.n	800eab2 <SDMMC_CmdVoltageSwitch+0x5a>
}
 800eac6:	bc30      	pop	{r4, r5}
 800eac8:	f7ff b9c4 	b.w	800de54 <SDMMC_GetCmdResp1.part.2>
 800eacc:	200002b0 	.word	0x200002b0
 800ead0:	10624dd3 	.word	0x10624dd3
 800ead4:	fffee0c0 	.word	0xfffee0c0
 800ead8:	00200045 	.word	0x00200045
 800eadc:	002000c5 	.word	0x002000c5

0800eae0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eae0:	b084      	sub	sp, #16
 800eae2:	b430      	push	{r4, r5}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eae4:	9d08      	ldr	r5, [sp, #32]
{
 800eae6:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eae8:	2d01      	cmp	r5, #1
{
 800eaea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eaee:	d131      	bne.n	800eb54 <USB_CoreInit+0x74>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eaf0:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800eaf2:	4b2e      	ldr	r3, [pc, #184]	; (800ebac <USB_CoreInit+0xcc>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eaf4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800eaf8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eafa:	6382      	str	r2, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800eafc:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800eafe:	68c2      	ldr	r2, [r0, #12]
 800eb00:	ea03 0302 	and.w	r3, r3, r2
 800eb04:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800eb06:	68c3      	ldr	r3, [r0, #12]
 800eb08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800eb0c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800eb0e:	d044      	beq.n	800eb9a <USB_CoreInit+0xba>
{
 800eb10:	4b27      	ldr	r3, [pc, #156]	; (800ebb0 <USB_CoreInit+0xd0>)
 800eb12:	e001      	b.n	800eb18 <USB_CoreInit+0x38>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800eb14:	3b01      	subs	r3, #1
 800eb16:	d045      	beq.n	800eba4 <USB_CoreInit+0xc4>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eb18:	6902      	ldr	r2, [r0, #16]
 800eb1a:	2a00      	cmp	r2, #0
 800eb1c:	dafa      	bge.n	800eb14 <USB_CoreInit+0x34>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800eb1e:	6903      	ldr	r3, [r0, #16]
 800eb20:	4a23      	ldr	r2, [pc, #140]	; (800ebb0 <USB_CoreInit+0xd0>)
 800eb22:	f043 0301 	orr.w	r3, r3, #1
 800eb26:	6103      	str	r3, [r0, #16]
 800eb28:	e001      	b.n	800eb2e <USB_CoreInit+0x4e>

  do
  {
    if (++count > 200000U)
 800eb2a:	3a01      	subs	r2, #1
 800eb2c:	d03a      	beq.n	800eba4 <USB_CoreInit+0xc4>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800eb2e:	6903      	ldr	r3, [r0, #16]
 800eb30:	f013 0301 	ands.w	r3, r3, #1
 800eb34:	d1f9      	bne.n	800eb2a <USB_CoreInit+0x4a>
  if (cfg.dma_enable == 1U)
 800eb36:	9a06      	ldr	r2, [sp, #24]
 800eb38:	2a01      	cmp	r2, #1
 800eb3a:	d107      	bne.n	800eb4c <USB_CoreInit+0x6c>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800eb3c:	6882      	ldr	r2, [r0, #8]
 800eb3e:	f042 0206 	orr.w	r2, r2, #6
 800eb42:	6082      	str	r2, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800eb44:	6882      	ldr	r2, [r0, #8]
 800eb46:	f042 0220 	orr.w	r2, r2, #32
 800eb4a:	6082      	str	r2, [r0, #8]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	bc30      	pop	{r4, r5}
 800eb50:	b004      	add	sp, #16
 800eb52:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800eb54:	68c2      	ldr	r2, [r0, #12]
 800eb56:	4b16      	ldr	r3, [pc, #88]	; (800ebb0 <USB_CoreInit+0xd0>)
 800eb58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb5c:	60c2      	str	r2, [r0, #12]
 800eb5e:	e001      	b.n	800eb64 <USB_CoreInit+0x84>
    if (++count > 200000U)
 800eb60:	3b01      	subs	r3, #1
 800eb62:	d021      	beq.n	800eba8 <USB_CoreInit+0xc8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eb64:	6902      	ldr	r2, [r0, #16]
 800eb66:	2a00      	cmp	r2, #0
 800eb68:	dafa      	bge.n	800eb60 <USB_CoreInit+0x80>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800eb6a:	6903      	ldr	r3, [r0, #16]
 800eb6c:	4a10      	ldr	r2, [pc, #64]	; (800ebb0 <USB_CoreInit+0xd0>)
 800eb6e:	f043 0301 	orr.w	r3, r3, #1
 800eb72:	6103      	str	r3, [r0, #16]
 800eb74:	e001      	b.n	800eb7a <USB_CoreInit+0x9a>
    if (++count > 200000U)
 800eb76:	3a01      	subs	r2, #1
 800eb78:	d016      	beq.n	800eba8 <USB_CoreInit+0xc8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800eb7a:	6903      	ldr	r3, [r0, #16]
 800eb7c:	f013 0301 	ands.w	r3, r3, #1
 800eb80:	d1f9      	bne.n	800eb76 <USB_CoreInit+0x96>
    if (cfg.battery_charging_enable == 0U)
 800eb82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb84:	b922      	cbnz	r2, 800eb90 <USB_CoreInit+0xb0>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800eb86:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800eb88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800eb8c:	6382      	str	r2, [r0, #56]	; 0x38
 800eb8e:	e7d2      	b.n	800eb36 <USB_CoreInit+0x56>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eb90:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800eb92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800eb96:	6382      	str	r2, [r0, #56]	; 0x38
 800eb98:	e7cd      	b.n	800eb36 <USB_CoreInit+0x56>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800eb9a:	68c3      	ldr	r3, [r0, #12]
 800eb9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eba0:	60c3      	str	r3, [r0, #12]
 800eba2:	e7b5      	b.n	800eb10 <USB_CoreInit+0x30>
      return HAL_TIMEOUT;
 800eba4:	2303      	movs	r3, #3
 800eba6:	e7c6      	b.n	800eb36 <USB_CoreInit+0x56>
 800eba8:	2303      	movs	r3, #3
 800ebaa:	e7ea      	b.n	800eb82 <USB_CoreInit+0xa2>
 800ebac:	ffbdffbf 	.word	0xffbdffbf
 800ebb0:	00030d40 	.word	0x00030d40

0800ebb4 <USB_EnableGlobalInt>:
{
 800ebb4:	4602      	mov	r2, r0
}
 800ebb6:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ebb8:	6893      	ldr	r3, [r2, #8]
 800ebba:	f043 0301 	orr.w	r3, r3, #1
 800ebbe:	6093      	str	r3, [r2, #8]
}
 800ebc0:	4770      	bx	lr
 800ebc2:	bf00      	nop

0800ebc4 <USB_DisableGlobalInt>:
{
 800ebc4:	4602      	mov	r2, r0
}
 800ebc6:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ebc8:	6893      	ldr	r3, [r2, #8]
 800ebca:	f023 0301 	bic.w	r3, r3, #1
 800ebce:	6093      	str	r3, [r2, #8]
}
 800ebd0:	4770      	bx	lr
 800ebd2:	bf00      	nop

0800ebd4 <USB_SetCurrentMode>:
{
 800ebd4:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ebd6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800ebd8:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ebda:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ebde:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800ebe0:	d00b      	beq.n	800ebfa <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800ebe2:	b941      	cbnz	r1, 800ebf6 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ebe4:	68c3      	ldr	r3, [r0, #12]
 800ebe6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ebea:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800ebec:	2032      	movs	r0, #50	; 0x32
 800ebee:	f7f2 f82f 	bl	8000c50 <HAL_Delay>
  return HAL_OK;
 800ebf2:	2000      	movs	r0, #0
}
 800ebf4:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800ebf6:	2001      	movs	r0, #1
}
 800ebf8:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ebfa:	68c3      	ldr	r3, [r0, #12]
 800ebfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ec00:	60c3      	str	r3, [r0, #12]
 800ec02:	e7f3      	b.n	800ebec <USB_SetCurrentMode+0x18>

0800ec04 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ec04:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 800ec06:	0892      	lsrs	r2, r2, #2
 800ec08:	d00d      	beq.n	800ec26 <USB_ReadPacket+0x22>
 800ec0a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
{
 800ec0e:	b410      	push	{r4}
 800ec10:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint32_t *pDest = (uint32_t *)dest;
 800ec14:	4608      	mov	r0, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ec16:	6823      	ldr	r3, [r4, #0]
 800ec18:	f840 3b04 	str.w	r3, [r0], #4
  for (i = 0U; i < count32b; i++)
 800ec1c:	4282      	cmp	r2, r0
 800ec1e:	d1fa      	bne.n	800ec16 <USB_ReadPacket+0x12>
}
 800ec20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec24:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800ec26:	4608      	mov	r0, r1
}
 800ec28:	4770      	bx	lr
 800ec2a:	bf00      	nop

0800ec2c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800ec2c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800ec2e:	6980      	ldr	r0, [r0, #24]
}
 800ec30:	4010      	ands	r0, r2
 800ec32:	4770      	bx	lr

0800ec34 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800ec34:	6940      	ldr	r0, [r0, #20]
}
 800ec36:	f000 0001 	and.w	r0, r0, #1
 800ec3a:	4770      	bx	lr

0800ec3c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ec3c:	b084      	sub	sp, #16
 800ec3e:	b530      	push	{r4, r5, lr}
 800ec40:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ec42:	2500      	movs	r5, #0
{
 800ec44:	b083      	sub	sp, #12
  USBx_PCGCCTL = 0U;
 800ec46:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ec4a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
{
 800ec4c:	a807      	add	r0, sp, #28
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ec4e:	f425 1500 	bic.w	r5, r5, #2097152	; 0x200000
 800ec52:	63a5      	str	r5, [r4, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800ec54:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800ec56:	f425 3500 	bic.w	r5, r5, #131072	; 0x20000
 800ec5a:	63a5      	str	r5, [r4, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ec5c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
{
 800ec5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ec62:	05eb      	lsls	r3, r5, #23
 800ec64:	9908      	ldr	r1, [sp, #32]
 800ec66:	d565      	bpl.n	800ed34 <USB_HostInit+0xf8>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800ec68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec6a:	2b03      	cmp	r3, #3
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ec6c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800ec70:	d063      	beq.n	800ed3a <USB_HostInit+0xfe>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ec72:	f023 0304 	bic.w	r3, r3, #4
 800ec76:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ec7a:	f44f 6284 	mov.w	r2, #1056	; 0x420
 800ec7e:	4b31      	ldr	r3, [pc, #196]	; (800ed44 <USB_HostInit+0x108>)
 800ec80:	6122      	str	r2, [r4, #16]
 800ec82:	e001      	b.n	800ec88 <USB_HostInit+0x4c>
    if (++count > 200000U)
 800ec84:	3b01      	subs	r3, #1
 800ec86:	d002      	beq.n	800ec8e <USB_HostInit+0x52>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ec88:	6922      	ldr	r2, [r4, #16]
 800ec8a:	0695      	lsls	r5, r2, #26
 800ec8c:	d4fa      	bmi.n	800ec84 <USB_HostInit+0x48>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ec8e:	2210      	movs	r2, #16
 800ec90:	4b2c      	ldr	r3, [pc, #176]	; (800ed44 <USB_HostInit+0x108>)
 800ec92:	6122      	str	r2, [r4, #16]
 800ec94:	e001      	b.n	800ec9a <USB_HostInit+0x5e>
    if (++count > 200000U)
 800ec96:	3b01      	subs	r3, #1
 800ec98:	d002      	beq.n	800eca0 <USB_HostInit+0x64>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ec9a:	6922      	ldr	r2, [r4, #16]
 800ec9c:	06d0      	lsls	r0, r2, #27
 800ec9e:	d4fa      	bmi.n	800ec96 <USB_HostInit+0x5a>
  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
  (void)USB_FlushRxFifo(USBx);

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800eca0:	b159      	cbz	r1, 800ecba <USB_HostInit+0x7e>
 800eca2:	2200      	movs	r2, #0
 800eca4:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800eca8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 800ecac:	4610      	mov	r0, r2
  for (i = 0U; i < cfg.Host_channels; i++)
 800ecae:	3201      	adds	r2, #1
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ecb0:	609d      	str	r5, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ecb2:	60d8      	str	r0, [r3, #12]
 800ecb4:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.Host_channels; i++)
 800ecb6:	428a      	cmp	r2, r1
 800ecb8:	d1f9      	bne.n	800ecae <USB_HostInit+0x72>
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800ecbe:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 800ecc2:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ecc4:	9b01      	ldr	r3, [sp, #4]
 800ecc6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ecca:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800eccc:	9b01      	ldr	r3, [sp, #4]
 800ecce:	04da      	lsls	r2, r3, #19
 800ecd0:	d404      	bmi.n	800ecdc <USB_HostInit+0xa0>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ecd2:	9b01      	ldr	r3, [sp, #4]
 800ecd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ecd8:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(200U);
 800ecdc:	20c8      	movs	r0, #200	; 0xc8
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ecde:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(200U);
 800ece0:	f7f1 ffb6 	bl	8000c50 <HAL_Delay>
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ece4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  USBx->GINTMSK = 0U;
 800ece8:	2200      	movs	r2, #0
 800ecea:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ecec:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ecee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ecf0:	05db      	lsls	r3, r3, #23
 800ecf2:	d517      	bpl.n	800ed24 <USB_HostInit+0xe8>
    USBx->GRXFSIZ  = 0x200U;
 800ecf4:	f44f 7100 	mov.w	r1, #512	; 0x200
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ecf8:	4a13      	ldr	r2, [pc, #76]	; (800ed48 <USB_HostInit+0x10c>)
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ecfa:	4b14      	ldr	r3, [pc, #80]	; (800ed4c <USB_HostInit+0x110>)
    USBx->GRXFSIZ  = 0x200U;
 800ecfc:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ecfe:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ed00:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 800ed04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed06:	b91b      	cbnz	r3, 800ed10 <USB_HostInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ed08:	69a3      	ldr	r3, [r4, #24]
 800ed0a:	f043 0310 	orr.w	r3, r3, #16
 800ed0e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ed10:	69a2      	ldr	r2, [r4, #24]
}
 800ed12:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ed14:	4b0e      	ldr	r3, [pc, #56]	; (800ed50 <USB_HostInit+0x114>)
 800ed16:	4313      	orrs	r3, r2
 800ed18:	61a3      	str	r3, [r4, #24]
}
 800ed1a:	b003      	add	sp, #12
 800ed1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed20:	b004      	add	sp, #16
 800ed22:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 800ed24:	2180      	movs	r1, #128	; 0x80
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ed26:	4a0b      	ldr	r2, [pc, #44]	; (800ed54 <USB_HostInit+0x118>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ed28:	4b0b      	ldr	r3, [pc, #44]	; (800ed58 <USB_HostInit+0x11c>)
    USBx->GRXFSIZ  = 0x80U;
 800ed2a:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ed2c:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ed2e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800ed32:	e7e7      	b.n	800ed04 <USB_HostInit+0xc8>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ed34:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800ed38:	e79b      	b.n	800ec72 <USB_HostInit+0x36>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ed3a:	f043 0304 	orr.w	r3, r3, #4
 800ed3e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800ed42:	e79a      	b.n	800ec7a <USB_HostInit+0x3e>
 800ed44:	00030d40 	.word	0x00030d40
 800ed48:	01000200 	.word	0x01000200
 800ed4c:	00e00300 	.word	0x00e00300
 800ed50:	a3200008 	.word	0xa3200008
 800ed54:	00600080 	.word	0x00600080
 800ed58:	004000e0 	.word	0x004000e0

0800ed5c <USB_InitFSLSPClkSel>:
{
 800ed5c:	b410      	push	{r4}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ed5e:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ed62:	f001 0303 	and.w	r3, r1, #3
  if (freq == HCFG_48_MHZ)
 800ed66:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ed68:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 800ed6c:	f022 0203 	bic.w	r2, r2, #3
 800ed70:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ed74:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 800ed78:	ea43 0302 	orr.w	r3, r3, r2
 800ed7c:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 800ed80:	d00c      	beq.n	800ed9c <USB_InitFSLSPClkSel+0x40>
  else if (freq == HCFG_6_MHZ)
 800ed82:	2902      	cmp	r1, #2
 800ed84:	d003      	beq.n	800ed8e <USB_InitFSLSPClkSel+0x32>
}
 800ed86:	2000      	movs	r0, #0
 800ed88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed8c:	4770      	bx	lr
    USBx_HOST->HFIR = 6000U;
 800ed8e:	f241 7370 	movw	r3, #6000	; 0x1770
}
 800ed92:	2000      	movs	r0, #0
    USBx_HOST->HFIR = 6000U;
 800ed94:	6063      	str	r3, [r4, #4]
}
 800ed96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed9a:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 800ed9c:	f64b 3380 	movw	r3, #48000	; 0xbb80
}
 800eda0:	2000      	movs	r0, #0
    USBx_HOST->HFIR = 48000U;
 800eda2:	6063      	str	r3, [r4, #4]
}
 800eda4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eda8:	4770      	bx	lr
 800edaa:	bf00      	nop

0800edac <USB_ResetPort>:
{
 800edac:	b530      	push	{r4, r5, lr}
 800edae:	4604      	mov	r4, r0
 800edb0:	b083      	sub	sp, #12
  __IO uint32_t hprt0 = 0U;
 800edb2:	2500      	movs	r5, #0
  HAL_Delay(100U);                                 /* See Note #1 */
 800edb4:	2064      	movs	r0, #100	; 0x64
  __IO uint32_t hprt0 = 0U;
 800edb6:	9501      	str	r5, [sp, #4]
  hprt0 = USBx_HPRT0;
 800edb8:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 800edbc:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800edbe:	9b01      	ldr	r3, [sp, #4]
 800edc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800edc4:	9301      	str	r3, [sp, #4]
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800edc6:	9b01      	ldr	r3, [sp, #4]
 800edc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800edcc:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 800edd0:	f7f1 ff3e 	bl	8000c50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800edd4:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 800edd6:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800edd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eddc:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 800ede0:	f7f1 ff36 	bl	8000c50 <HAL_Delay>
}
 800ede4:	4628      	mov	r0, r5
 800ede6:	b003      	add	sp, #12
 800ede8:	bd30      	pop	{r4, r5, pc}
 800edea:	bf00      	nop

0800edec <USB_DriveVbus>:
{
 800edec:	b082      	sub	sp, #8
  __IO uint32_t hprt0 = 0U;
 800edee:	2300      	movs	r3, #0
 800edf0:	9301      	str	r3, [sp, #4]
  hprt0 = USBx_HPRT0;
 800edf2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800edf6:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800edf8:	9b01      	ldr	r3, [sp, #4]
 800edfa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800edfe:	9301      	str	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ee00:	9b01      	ldr	r3, [sp, #4]
 800ee02:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ee06:	9b01      	ldr	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ee08:	d101      	bne.n	800ee0e <USB_DriveVbus+0x22>
 800ee0a:	2901      	cmp	r1, #1
 800ee0c:	d00a      	beq.n	800ee24 <USB_DriveVbus+0x38>
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ee0e:	04db      	lsls	r3, r3, #19
 800ee10:	d505      	bpl.n	800ee1e <USB_DriveVbus+0x32>
 800ee12:	b921      	cbnz	r1, 800ee1e <USB_DriveVbus+0x32>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ee14:	9b01      	ldr	r3, [sp, #4]
 800ee16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee1a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 800ee1e:	2000      	movs	r0, #0
 800ee20:	b002      	add	sp, #8
 800ee22:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ee24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ee28:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
}
 800ee2c:	2000      	movs	r0, #0
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ee2e:	9b01      	ldr	r3, [sp, #4]
}
 800ee30:	b002      	add	sp, #8
 800ee32:	4770      	bx	lr

0800ee34 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ee34:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800ee36:	2300      	movs	r3, #0
 800ee38:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800ee3a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800ee3e:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ee40:	9801      	ldr	r0, [sp, #4]
}
 800ee42:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800ee46:	b002      	add	sp, #8
 800ee48:	4770      	bx	lr
 800ee4a:	bf00      	nop

0800ee4c <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ee4c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800ee50:	6880      	ldr	r0, [r0, #8]
}
 800ee52:	b280      	uxth	r0, r0
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop

0800ee58 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800ee58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee5c:	4606      	mov	r6, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ee5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ee62:	2001      	movs	r0, #1
{
 800ee64:	f89d 4020 	ldrb.w	r4, [sp, #32]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ee68:	eb06 1541 	add.w	r5, r6, r1, lsl #5
 800ee6c:	f001 010f 	and.w	r1, r1, #15
 800ee70:	f506 6980 	add.w	r9, r6, #1024	; 0x400
{
 800ee74:	f89d e01c 	ldrb.w	lr, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ee78:	f505 68a0 	add.w	r8, r5, #1280	; 0x500
 800ee7c:	fa00 f101 	lsl.w	r1, r0, r1
 800ee80:	f8c8 7008 	str.w	r7, [r8, #8]
 800ee84:	b250      	sxtb	r0, r2
{
 800ee86:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ee8a:	2c03      	cmp	r4, #3
 800ee8c:	d85b      	bhi.n	800ef46 <USB_HC_Init+0xee>
 800ee8e:	e8df f004 	tbb	[pc, r4]
 800ee92:	3d4a      	.short	0x3d4a
 800ee94:	024a      	.short	0x024a
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ee96:	f240 679d 	movw	r7, #1693	; 0x69d
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ee9a:	2800      	cmp	r0, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ee9c:	f8c8 700c 	str.w	r7, [r8, #12]
      if ((epnum & 0x80U) == 0x80U)
 800eea0:	db63      	blt.n	800ef6a <USB_HC_Init+0x112>
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800eea2:	f8d9 7018 	ldr.w	r7, [r9, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800eea6:	2000      	movs	r0, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800eea8:	4339      	orrs	r1, r7
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 800eeaa:	4607      	mov	r7, r0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800eeac:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800eeb0:	69b1      	ldr	r1, [r6, #24]
 800eeb2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800eeb6:	61b1      	str	r1, [r6, #24]
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800eeb8:	0599      	lsls	r1, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800eeba:	f3cc 030a 	ubfx	r3, ip, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800eebe:	02d2      	lsls	r2, r2, #11
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800eec0:	f1be 0f02 	cmp.w	lr, #2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800eec4:	f001 51fe 	and.w	r1, r1, #532676608	; 0x1fc00000
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800eec8:	ea4f 4684 	mov.w	r6, r4, lsl #18
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800eecc:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800eed0:	bf18      	it	ne
 800eed2:	f04f 0c00 	movne.w	ip, #0
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800eed6:	ea43 0301 	orr.w	r3, r3, r1
 800eeda:	f406 2140 	and.w	r1, r6, #786432	; 0xc0000
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800eede:	bf08      	it	eq
 800eee0:	f44f 3c00 	moveq.w	ip, #131072	; 0x20000

  if (ep_type == EP_TYPE_INTR)
 800eee4:	2c03      	cmp	r4, #3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800eee6:	ea43 0302 	orr.w	r3, r3, r2
 800eeea:	ea43 0301 	orr.w	r3, r3, r1
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800eeee:	ea43 0307 	orr.w	r3, r3, r7
 800eef2:	ea43 030c 	orr.w	r3, r3, ip
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800eef6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 800eefa:	d105      	bne.n	800ef08 <USB_HC_Init+0xb0>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800eefc:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 800ef00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ef04:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  }

  return ret;
}
 800ef08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ef0c:	f240 2725 	movw	r7, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 800ef10:	2800      	cmp	r0, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ef12:	f8c8 700c 	str.w	r7, [r8, #12]
      if ((epnum & 0x80U) == 0x80U)
 800ef16:	dac4      	bge.n	800eea2 <USB_HC_Init+0x4a>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ef18:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800ef1c:	f440 70c0 	orr.w	r0, r0, #384	; 0x180
 800ef20:	f8c8 000c 	str.w	r0, [r8, #12]
 800ef24:	e027      	b.n	800ef76 <USB_HC_Init+0x11e>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ef26:	f240 479d 	movw	r7, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
 800ef2a:	2800      	cmp	r0, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ef2c:	f8c8 700c 	str.w	r7, [r8, #12]
      if ((epnum & 0x80U) == 0x80U)
 800ef30:	db1b      	blt.n	800ef6a <USB_HC_Init+0x112>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ef32:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800ef34:	05c0      	lsls	r0, r0, #23
 800ef36:	d5b4      	bpl.n	800eea2 <USB_HC_Init+0x4a>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ef38:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800ef3c:	f040 0060 	orr.w	r0, r0, #96	; 0x60
 800ef40:	f8c8 000c 	str.w	r0, [r8, #12]
 800ef44:	e7ad      	b.n	800eea2 <USB_HC_Init+0x4a>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ef46:	f8d9 7018 	ldr.w	r7, [r9, #24]
      ret = HAL_ERROR;
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	f04f 0001 	mov.w	r0, #1
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ef50:	ea41 0107 	orr.w	r1, r1, r7
      ret = HAL_ERROR;
 800ef54:	bfac      	ite	ge
 800ef56:	2700      	movge	r7, #0
 800ef58:	f44f 4700 	movlt.w	r7, #32768	; 0x8000
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ef5c:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ef60:	69b1      	ldr	r1, [r6, #24]
 800ef62:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800ef66:	61b1      	str	r1, [r6, #24]
 800ef68:	e7a6      	b.n	800eeb8 <USB_HC_Init+0x60>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ef6a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800ef6e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800ef72:	f8c8 000c 	str.w	r0, [r8, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ef76:	f8d9 7018 	ldr.w	r7, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ef7a:	2000      	movs	r0, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ef7c:	4339      	orrs	r1, r7
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ef7e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ef82:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ef86:	69b1      	ldr	r1, [r6, #24]
 800ef88:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800ef8c:	61b1      	str	r1, [r6, #24]
 800ef8e:	e793      	b.n	800eeb8 <USB_HC_Init+0x60>

0800ef90 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ef90:	b4f0      	push	{r4, r5, r6, r7}
 800ef92:	784b      	ldrb	r3, [r1, #1]
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800ef94:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800ef96:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800ef9a:	05e4      	lsls	r4, r4, #23
 800ef9c:	f503 67a0 	add.w	r7, r3, #1280	; 0x500
 800efa0:	d50a      	bpl.n	800efb8 <USB_HC_StartXfer+0x28>
 800efa2:	790c      	ldrb	r4, [r1, #4]
 800efa4:	b944      	cbnz	r4, 800efb8 <USB_HC_StartXfer+0x28>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800efa6:	2a00      	cmp	r2, #0
 800efa8:	d05f      	beq.n	800f06a <USB_HC_StartXfer+0xda>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
      return HAL_OK;
    }
    else if (dma == 1U)
 800efaa:	2a01      	cmp	r2, #1
 800efac:	d104      	bne.n	800efb8 <USB_HC_StartXfer+0x28>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800efae:	68fd      	ldr	r5, [r7, #12]
 800efb0:	f025 0560 	bic.w	r5, r5, #96	; 0x60
 800efb4:	60fd      	str	r5, [r7, #12]
      hc->do_ping = 0U;
 800efb6:	714c      	strb	r4, [r1, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800efb8:	690d      	ldr	r5, [r1, #16]
 800efba:	2d00      	cmp	r5, #0
 800efbc:	d149      	bne.n	800f052 <USB_HC_StartXfer+0xc2>
 800efbe:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 800efc2:	f04f 0c01 	mov.w	ip, #1
  }
  else
  {
    num_packets = 1U;
  }
  if (hc->ep_is_in != 0U)
 800efc6:	78cc      	ldrb	r4, [r1, #3]
 800efc8:	b11c      	cbz	r4, 800efd2 <USB_HC_StartXfer+0x42>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800efca:	890d      	ldrh	r5, [r1, #8]
 800efcc:	fb0c f505 	mul.w	r5, ip, r5
 800efd0:	610d      	str	r5, [r1, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800efd2:	7a8c      	ldrb	r4, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800efd4:	f3c5 0512 	ubfx	r5, r5, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800efd8:	0764      	lsls	r4, r4, #29
 800efda:	f004 44c0 	and.w	r4, r4, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800efde:	4334      	orrs	r4, r6
 800efe0:	432c      	orrs	r4, r5
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800efe2:	613c      	str	r4, [r7, #16]

  if (dma != 0U)
 800efe4:	b10a      	cbz	r2, 800efea <USB_HC_StartXfer+0x5a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800efe6:	68cc      	ldr	r4, [r1, #12]
 800efe8:	617c      	str	r4, [r7, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800efea:	f500 6680 	add.w	r6, r0, #1024	; 0x400
 800efee:	68b4      	ldr	r4, [r6, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800eff0:	f8d3 7500 	ldr.w	r7, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800eff4:	43e4      	mvns	r4, r4

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800eff6:	4d41      	ldr	r5, [pc, #260]	; (800f0fc <USB_HC_StartXfer+0x16c>)
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800eff8:	f027 5700 	bic.w	r7, r7, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800effc:	0764      	lsls	r4, r4, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800effe:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800f002:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 800f006:	f8d3 7500 	ldr.w	r7, [r3, #1280]	; 0x500
 800f00a:	433c      	orrs	r4, r7
 800f00c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800f010:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800f014:	78cf      	ldrb	r7, [r1, #3]
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800f016:	602c      	str	r4, [r5, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f018:	682c      	ldr	r4, [r5, #0]
 800f01a:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 800f01e:	602c      	str	r4, [r5, #0]
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800f020:	682c      	ldr	r4, [r5, #0]
  if (hc->ep_is_in != 0U)
 800f022:	2f00      	cmp	r7, #0
 800f024:	d031      	beq.n	800f08a <USB_HC_StartXfer+0xfa>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800f026:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800f02a:	602c      	str	r4, [r5, #0]
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f02c:	682c      	ldr	r4, [r5, #0]
 800f02e:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800f032:	602c      	str	r4, [r5, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800f034:	682c      	ldr	r4, [r5, #0]
 800f036:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

  if (dma == 0U) /* Slave mode */
 800f03a:	bb1a      	cbnz	r2, 800f084 <USB_HC_StartXfer+0xf4>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800f03c:	78cb      	ldrb	r3, [r1, #3]
 800f03e:	bb0b      	cbnz	r3, 800f084 <USB_HC_StartXfer+0xf4>
 800f040:	690b      	ldr	r3, [r1, #16]
 800f042:	b1fb      	cbz	r3, 800f084 <USB_HC_StartXfer+0xf4>
    {
      switch (hc->ep_type)
 800f044:	79ca      	ldrb	r2, [r1, #7]
 800f046:	2a03      	cmp	r2, #3
 800f048:	d831      	bhi.n	800f0ae <USB_HC_StartXfer+0x11e>
 800f04a:	e8df f002 	tbb	[pc, r2]
 800f04e:	2944      	.short	0x2944
 800f050:	2944      	.short	0x2944
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800f052:	890e      	ldrh	r6, [r1, #8]
 800f054:	1e6c      	subs	r4, r5, #1
 800f056:	4434      	add	r4, r6
 800f058:	fbb4 f4f6 	udiv	r4, r4, r6
    if (num_packets > max_hc_pkt_count)
 800f05c:	fa1f fc84 	uxth.w	ip, r4
 800f060:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 800f064:	d815      	bhi.n	800f092 <USB_HC_StartXfer+0x102>
 800f066:	04e6      	lsls	r6, r4, #19
 800f068:	e7ad      	b.n	800efc6 <USB_HC_StartXfer+0x36>
    if ((dma == 0U) && (hc->do_ping == 1U))
 800f06a:	794c      	ldrb	r4, [r1, #5]
 800f06c:	2c01      	cmp	r4, #1
 800f06e:	d1a3      	bne.n	800efb8 <USB_HC_StartXfer+0x28>
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f070:	4a23      	ldr	r2, [pc, #140]	; (800f100 <USB_HC_StartXfer+0x170>)
 800f072:	613a      	str	r2, [r7, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800f074:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f078:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f07c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800f080:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
 800f084:	2000      	movs	r0, #0
 800f086:	bcf0      	pop	{r4, r5, r6, r7}
 800f088:	4770      	bx	lr
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800f08a:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 800f08e:	602c      	str	r4, [r5, #0]
 800f090:	e7cc      	b.n	800f02c <USB_HC_StartXfer+0x9c>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800f092:	0235      	lsls	r5, r6, #8
 800f094:	f44f 7c80 	mov.w	ip, #256	; 0x100
 800f098:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 800f09c:	610d      	str	r5, [r1, #16]
 800f09e:	e792      	b.n	800efc6 <USB_HC_StartXfer+0x36>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800f0a0:	6934      	ldr	r4, [r6, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f0a2:	1cda      	adds	r2, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800f0a4:	b2a4      	uxth	r4, r4
 800f0a6:	f3c2 028f 	ubfx	r2, r2, #2, #16
 800f0aa:	4294      	cmp	r4, r2
 800f0ac:	d320      	bcc.n	800f0f0 <USB_HC_StartXfer+0x160>
    count32b = ((uint32_t)len + 3U) / 4U;
 800f0ae:	b29b      	uxth	r3, r3
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800f0b0:	68ca      	ldr	r2, [r1, #12]
 800f0b2:	7849      	ldrb	r1, [r1, #1]
    count32b = ((uint32_t)len + 3U) / 4U;
 800f0b4:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800f0b6:	089b      	lsrs	r3, r3, #2
 800f0b8:	d0e4      	beq.n	800f084 <USB_HC_StartXfer+0xf4>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f0ba:	eb00 3001 	add.w	r0, r0, r1, lsl #12
 800f0be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f0c2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800f0c6:	f852 1b04 	ldr.w	r1, [r2], #4
    for (i = 0U; i < count32b; i++)
 800f0ca:	4293      	cmp	r3, r2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f0cc:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800f0ce:	d1fa      	bne.n	800f0c6 <USB_HC_StartXfer+0x136>
}
 800f0d0:	2000      	movs	r0, #0
 800f0d2:	bcf0      	pop	{r4, r5, r6, r7}
 800f0d4:	4770      	bx	lr
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800f0d6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f0d8:	1cda      	adds	r2, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800f0da:	b2a4      	uxth	r4, r4
 800f0dc:	f3c2 028f 	ubfx	r2, r2, #2, #16
 800f0e0:	4294      	cmp	r4, r2
 800f0e2:	d2e4      	bcs.n	800f0ae <USB_HC_StartXfer+0x11e>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800f0e4:	6983      	ldr	r3, [r0, #24]
 800f0e6:	f043 0320 	orr.w	r3, r3, #32
 800f0ea:	6183      	str	r3, [r0, #24]
 800f0ec:	690b      	ldr	r3, [r1, #16]
 800f0ee:	e7de      	b.n	800f0ae <USB_HC_StartXfer+0x11e>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800f0f0:	6983      	ldr	r3, [r0, #24]
 800f0f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f0f6:	6183      	str	r3, [r0, #24]
 800f0f8:	690b      	ldr	r3, [r1, #16]
 800f0fa:	e7d8      	b.n	800f0ae <USB_HC_StartXfer+0x11e>
 800f0fc:	200004bc 	.word	0x200004bc
 800f100:	80080000 	.word	0x80080000

0800f104 <USB_HC_ReadInterrupt>:
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800f104:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800f108:	6940      	ldr	r0, [r0, #20]
}
 800f10a:	b280      	uxth	r0, r0
 800f10c:	4770      	bx	lr
 800f10e:	bf00      	nop

0800f110 <USB_HC_Halt>:
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800f110:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800f114:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800f118:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800f11c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f120:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800f124:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f128:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800f12c:	d11f      	bne.n	800f16e <USB_HC_Halt+0x5e>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f12e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f130:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800f134:	d13c      	bne.n	800f1b0 <USB_HC_Halt+0xa0>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f136:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f13a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f13e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f142:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f146:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800f14a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f14e:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f152:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800f156:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800f15a:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
 800f15e:	e001      	b.n	800f164 <USB_HC_Halt+0x54>
        if (++count > 1000U)
 800f160:	3b01      	subs	r3, #1
 800f162:	d02b      	beq.n	800f1bc <USB_HC_Halt+0xac>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f164:	6811      	ldr	r1, [r2, #0]
 800f166:	2900      	cmp	r1, #0
 800f168:	dbfa      	blt.n	800f160 <USB_HC_Halt+0x50>
}
 800f16a:	2000      	movs	r0, #0
 800f16c:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800f16e:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800f172:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800f176:	d11b      	bne.n	800f1b0 <USB_HC_Halt+0xa0>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f178:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f17c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f180:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f184:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f188:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800f18c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f190:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f194:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800f198:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800f19c:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
 800f1a0:	e001      	b.n	800f1a6 <USB_HC_Halt+0x96>
        if (++count > 1000U)
 800f1a2:	3b01      	subs	r3, #1
 800f1a4:	d00a      	beq.n	800f1bc <USB_HC_Halt+0xac>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f1a6:	6811      	ldr	r1, [r2, #0]
 800f1a8:	2900      	cmp	r1, #0
 800f1aa:	dbfa      	blt.n	800f1a2 <USB_HC_Halt+0x92>
}
 800f1ac:	2000      	movs	r0, #0
 800f1ae:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f1b0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800f1b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f1b8:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 800f1bc:	2000      	movs	r0, #0
 800f1be:	4770      	bx	lr

0800f1c0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800f1c0:	b410      	push	{r4}
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f1c2:	6882      	ldr	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f1c4:	f44f 6184 	mov.w	r1, #1056	; 0x420
{
 800f1c8:	4604      	mov	r4, r0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f1ca:	4b5b      	ldr	r3, [pc, #364]	; (800f338 <USB_StopHost+0x178>)
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f1cc:	f022 0201 	bic.w	r2, r2, #1
 800f1d0:	6082      	str	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f1d2:	6101      	str	r1, [r0, #16]
 800f1d4:	e001      	b.n	800f1da <USB_StopHost+0x1a>
    if (++count > 200000U)
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	d002      	beq.n	800f1e0 <USB_StopHost+0x20>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f1da:	6922      	ldr	r2, [r4, #16]
 800f1dc:	0691      	lsls	r1, r2, #26
 800f1de:	d4fa      	bmi.n	800f1d6 <USB_StopHost+0x16>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f1e0:	2210      	movs	r2, #16
 800f1e2:	4b55      	ldr	r3, [pc, #340]	; (800f338 <USB_StopHost+0x178>)
 800f1e4:	6122      	str	r2, [r4, #16]
 800f1e6:	e001      	b.n	800f1ec <USB_StopHost+0x2c>
    if (++count > 200000U)
 800f1e8:	3b01      	subs	r3, #1
 800f1ea:	d002      	beq.n	800f1f2 <USB_StopHost+0x32>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f1ec:	6922      	ldr	r2, [r4, #16]
 800f1ee:	06d2      	lsls	r2, r2, #27
 800f1f0:	d4fa      	bmi.n	800f1e8 <USB_StopHost+0x28>
  (void)USB_FlushRxFifo(USBx);

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800f1f2:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
 800f1f6:	f504 61a0 	add.w	r1, r4, #1280	; 0x500
 800f1fa:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
  uint32_t count = 0U;
 800f1fe:	2300      	movs	r3, #0
 800f200:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f204:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f208:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    value = USBx_HC(i)->HCCHAR;
 800f20c:	f8d4 2520 	ldr.w	r2, [r4, #1312]	; 0x520
 800f210:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f214:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f218:	f8c4 2520 	str.w	r2, [r4, #1312]	; 0x520
    value = USBx_HC(i)->HCCHAR;
 800f21c:	f8d4 2540 	ldr.w	r2, [r4, #1344]	; 0x540
 800f220:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f224:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f228:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
    value = USBx_HC(i)->HCCHAR;
 800f22c:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
 800f230:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f234:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f238:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
    value = USBx_HC(i)->HCCHAR;
 800f23c:	f8d4 2580 	ldr.w	r2, [r4, #1408]	; 0x580
 800f240:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f244:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f248:	f8c4 2580 	str.w	r2, [r4, #1408]	; 0x580
    value = USBx_HC(i)->HCCHAR;
 800f24c:	f8d4 25a0 	ldr.w	r2, [r4, #1440]	; 0x5a0
 800f250:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f254:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f258:	f8c4 25a0 	str.w	r2, [r4, #1440]	; 0x5a0
    value = USBx_HC(i)->HCCHAR;
 800f25c:	f8d4 25c0 	ldr.w	r2, [r4, #1472]	; 0x5c0
 800f260:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f264:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f268:	f8c4 25c0 	str.w	r2, [r4, #1472]	; 0x5c0
    value = USBx_HC(i)->HCCHAR;
 800f26c:	f8d4 25e0 	ldr.w	r2, [r4, #1504]	; 0x5e0
 800f270:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f274:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f278:	f8c4 25e0 	str.w	r2, [r4, #1504]	; 0x5e0
    value = USBx_HC(i)->HCCHAR;
 800f27c:	f8d4 2600 	ldr.w	r2, [r4, #1536]	; 0x600
 800f280:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f284:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f288:	f8c4 2600 	str.w	r2, [r4, #1536]	; 0x600
    value = USBx_HC(i)->HCCHAR;
 800f28c:	f8d4 2620 	ldr.w	r2, [r4, #1568]	; 0x620
 800f290:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f294:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f298:	f8c4 2620 	str.w	r2, [r4, #1568]	; 0x620
    value = USBx_HC(i)->HCCHAR;
 800f29c:	f8d4 2640 	ldr.w	r2, [r4, #1600]	; 0x640
 800f2a0:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f2a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f2a8:	f8c4 2640 	str.w	r2, [r4, #1600]	; 0x640
    value = USBx_HC(i)->HCCHAR;
 800f2ac:	f8d4 2660 	ldr.w	r2, [r4, #1632]	; 0x660
 800f2b0:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f2b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f2b8:	f8c4 2660 	str.w	r2, [r4, #1632]	; 0x660
    value = USBx_HC(i)->HCCHAR;
 800f2bc:	f8d4 2680 	ldr.w	r2, [r4, #1664]	; 0x680
 800f2c0:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f2c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f2c8:	f8c4 2680 	str.w	r2, [r4, #1664]	; 0x680
    value = USBx_HC(i)->HCCHAR;
 800f2cc:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 800f2d0:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f2d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f2d8:	f8c4 26a0 	str.w	r2, [r4, #1696]	; 0x6a0
    value = USBx_HC(i)->HCCHAR;
 800f2dc:	f8d4 26c0 	ldr.w	r2, [r4, #1728]	; 0x6c0
 800f2e0:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f2e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f2e8:	f8c4 26c0 	str.w	r2, [r4, #1728]	; 0x6c0
    value = USBx_HC(i)->HCCHAR;
 800f2ec:	f8d4 26e0 	ldr.w	r2, [r4, #1760]	; 0x6e0
 800f2f0:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f2f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f2f8:	f8c4 26e0 	str.w	r2, [r4, #1760]	; 0x6e0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800f2fc:	680a      	ldr	r2, [r1, #0]
 800f2fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f302:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 800f306:	600a      	str	r2, [r1, #0]
 800f308:	e002      	b.n	800f310 <USB_StopHost+0x150>
      if (++count > 1000U)
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f30a:	680a      	ldr	r2, [r1, #0]
 800f30c:	2a00      	cmp	r2, #0
 800f30e:	da03      	bge.n	800f318 <USB_StopHost+0x158>
      if (++count > 1000U)
 800f310:	3301      	adds	r3, #1
 800f312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f316:	d9f8      	bls.n	800f30a <USB_StopHost+0x14a>
 800f318:	3120      	adds	r1, #32
  for (i = 0U; i <= 15U; i++)
 800f31a:	4281      	cmp	r1, r0
 800f31c:	d1ee      	bne.n	800f2fc <USB_StopHost+0x13c>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800f31e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  USBx->GINTSTS = 0xFFFFFFFFU;

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800f322:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800f324:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 800f328:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f32a:	68a3      	ldr	r3, [r4, #8]
 800f32c:	f043 0301 	orr.w	r3, r3, #1
 800f330:	60a3      	str	r3, [r4, #8]
}
 800f332:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f336:	4770      	bx	lr
 800f338:	00030d40 	.word	0x00030d40

0800f33c <USBH_Init>:
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f33c:	b3a0      	cbz	r0, 800f3a8 <USBH_Init+0x6c>
{
 800f33e:	b570      	push	{r4, r5, r6, lr}
 800f340:	4604      	mov	r4, r0

  /* Set DRiver ID */
  phost->id = id;

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f342:	2500      	movs	r5, #0
  phost->id = id;
 800f344:	f880 253c 	strb.w	r2, [r0, #1340]	; 0x53c
 800f348:	460e      	mov	r6, r1
 800f34a:	223c      	movs	r2, #60	; 0x3c
 800f34c:	4629      	mov	r1, r5
 800f34e:	f200 40f4 	addw	r0, r0, #1268	; 0x4f4
  phost->pActiveClass = NULL;
 800f352:	f8c4 54ec 	str.w	r5, [r4, #1260]	; 0x4ec
  phost->ClassNumber = 0U;
 800f356:	f8c4 54f0 	str.w	r5, [r4, #1264]	; 0x4f0
 800f35a:	f018 f8ee 	bl	802753a <memset>
 800f35e:	4629      	mov	r1, r5
 800f360:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f364:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 800f368:	f018 f8e7 	bl	802753a <memset>
    phost->device.Data[i] = 0U;
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 800f36c:	2301      	movs	r3, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f36e:	2140      	movs	r1, #64	; 0x40
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f370:	f44f 7280 	mov.w	r2, #256	; 0x100
  phost->gState = HOST_IDLE;
 800f374:	7025      	strb	r5, [r4, #0]
  phost->EnumState = ENUM_IDLE;
 800f376:	7065      	strb	r5, [r4, #1]
  phost->Timer = 0U;
 800f378:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
  phost->Control.errorcount = 0U;
 800f37c:	7665      	strb	r5, [r4, #25]
  phost->device.is_connected = 0U;
 800f37e:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f382:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_disconnected = 0U;
 800f386:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->RequestState = CMD_SEND;
 800f38a:	70a3      	strb	r3, [r4, #2]
  phost->device.is_ReEnumerated = 0U;
 800f38c:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  phost->Control.state = CTRL_SETUP;
 800f390:	7623      	strb	r3, [r4, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f392:	71a1      	strb	r1, [r4, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f394:	f8c4 231c 	str.w	r2, [r4, #796]	; 0x31c
  if (pUsrFunc != NULL)
 800f398:	b10e      	cbz	r6, 800f39e <USBH_Init+0x62>
    phost->pUser = pUsrFunc;
 800f39a:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
  USBH_LL_Init(phost);
 800f39e:	4620      	mov	r0, r4
 800f3a0:	f00f f922 	bl	801e5e8 <USBH_LL_Init>
  return USBH_OK;
 800f3a4:	2000      	movs	r0, #0
}
 800f3a6:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 800f3a8:	2002      	movs	r0, #2
}
 800f3aa:	4770      	bx	lr

0800f3ac <USBH_DeInit>:
{
 800f3ac:	b538      	push	{r3, r4, r5, lr}
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	223c      	movs	r2, #60	; 0x3c
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	f200 40f4 	addw	r0, r0, #1268	; 0x4f4
 800f3b8:	f018 f8bf 	bl	802753a <memset>
 800f3bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f3c0:	2100      	movs	r1, #0
 800f3c2:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 800f3c6:	f018 f8b8 	bl	802753a <memset>
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f3ca:	2540      	movs	r5, #64	; 0x40
  phost->gState = HOST_IDLE;
 800f3cc:	2300      	movs	r3, #0
  phost->RequestState = CMD_SEND;
 800f3ce:	2201      	movs	r2, #1
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f3d0:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (phost->pData != NULL)
 800f3d4:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
  phost->gState = HOST_IDLE;
 800f3d8:	7023      	strb	r3, [r4, #0]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f3da:	71a5      	strb	r5, [r4, #6]
  phost->Timer = 0U;
 800f3dc:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f3e0:	f8c4 031c 	str.w	r0, [r4, #796]	; 0x31c
  phost->device.is_connected = 0U;
 800f3e4:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
  phost->EnumState = ENUM_IDLE;
 800f3e8:	7063      	strb	r3, [r4, #1]
  phost->device.is_disconnected = 0U;
 800f3ea:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
  phost->Control.errorcount = 0U;
 800f3ee:	7663      	strb	r3, [r4, #25]
  phost->device.PortEnabled = 0U;
 800f3f0:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  phost->RequestState = CMD_SEND;
 800f3f4:	70a2      	strb	r2, [r4, #2]
  phost->device.is_ReEnumerated = 0U;
 800f3f6:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  phost->Control.state = CTRL_SETUP;
 800f3fa:	7622      	strb	r2, [r4, #24]
  if (phost->pData != NULL)
 800f3fc:	b111      	cbz	r1, 800f404 <USBH_DeInit+0x58>
    USBH_LL_Stop(phost);
 800f3fe:	4620      	mov	r0, r4
 800f400:	f00f f92c 	bl	801e65c <USBH_LL_Stop>
}
 800f404:	2000      	movs	r0, #0
 800f406:	bd38      	pop	{r3, r4, r5, pc}

0800f408 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 800f408:	b149      	cbz	r1, 800f41e <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f40a:	f8d0 34f0 	ldr.w	r3, [r0, #1264]	; 0x4f0
 800f40e:	b933      	cbnz	r3, 800f41e <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f410:	2201      	movs	r2, #1
 800f412:	f8c0 14e8 	str.w	r1, [r0, #1256]	; 0x4e8
 800f416:	f8c0 24f0 	str.w	r2, [r0, #1264]	; 0x4f0
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	4770      	bx	lr
    status = USBH_FAIL;
 800f41e:	2302      	movs	r3, #2
}
 800f420:	4618      	mov	r0, r3
 800f422:	4770      	bx	lr

0800f424 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f424:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 800f428:	428b      	cmp	r3, r1
 800f42a:	d903      	bls.n	800f434 <USBH_SelectInterface+0x10>
  {
    phost->device.current_interface = interface;
 800f42c:	f880 1324 	strb.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 800f430:	2000      	movs	r0, #0
 800f432:	4770      	bx	lr
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f434:	2002      	movs	r0, #2
  }

  return status;
}
 800f436:	4770      	bx	lr

0800f438 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f438:	b430      	push	{r4, r5}
 800f43a:	f1a1 04ff 	sub.w	r4, r1, #255	; 0xff
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f43e:	f890 5347 	ldrb.w	r5, [r0, #839]	; 0x347
 800f442:	fab4 f484 	clz	r4, r4
 800f446:	428d      	cmp	r5, r1
 800f448:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800f44c:	d03c      	beq.n	800f4c8 <USBH_FindInterface+0x90>
 800f44e:	2c00      	cmp	r4, #0
 800f450:	d13a      	bne.n	800f4c8 <USBH_FindInterface+0x90>
 800f452:	f890 5371 	ldrb.w	r5, [r0, #881]	; 0x371
 800f456:	428d      	cmp	r5, r1
 800f458:	d044      	beq.n	800f4e4 <USBH_FindInterface+0xac>
 800f45a:	2c00      	cmp	r4, #0
 800f45c:	d142      	bne.n	800f4e4 <USBH_FindInterface+0xac>
 800f45e:	f890 539b 	ldrb.w	r5, [r0, #923]	; 0x39b
 800f462:	428d      	cmp	r5, r1
 800f464:	d04c      	beq.n	800f500 <USBH_FindInterface+0xc8>
 800f466:	2c00      	cmp	r4, #0
 800f468:	d14a      	bne.n	800f500 <USBH_FindInterface+0xc8>
 800f46a:	f890 53c5 	ldrb.w	r5, [r0, #965]	; 0x3c5
 800f46e:	428d      	cmp	r5, r1
 800f470:	d054      	beq.n	800f51c <USBH_FindInterface+0xe4>
 800f472:	2c00      	cmp	r4, #0
 800f474:	d152      	bne.n	800f51c <USBH_FindInterface+0xe4>
 800f476:	f890 53ef 	ldrb.w	r5, [r0, #1007]	; 0x3ef
 800f47a:	428d      	cmp	r5, r1
 800f47c:	d05c      	beq.n	800f538 <USBH_FindInterface+0x100>
 800f47e:	2c00      	cmp	r4, #0
 800f480:	d15a      	bne.n	800f538 <USBH_FindInterface+0x100>
 800f482:	f890 5419 	ldrb.w	r5, [r0, #1049]	; 0x419
 800f486:	428d      	cmp	r5, r1
 800f488:	d064      	beq.n	800f554 <USBH_FindInterface+0x11c>
 800f48a:	2c00      	cmp	r4, #0
 800f48c:	d162      	bne.n	800f554 <USBH_FindInterface+0x11c>
 800f48e:	f890 5443 	ldrb.w	r5, [r0, #1091]	; 0x443
 800f492:	428d      	cmp	r5, r1
 800f494:	d06c      	beq.n	800f570 <USBH_FindInterface+0x138>
 800f496:	2c00      	cmp	r4, #0
 800f498:	d16a      	bne.n	800f570 <USBH_FindInterface+0x138>
 800f49a:	f890 546d 	ldrb.w	r5, [r0, #1133]	; 0x46d
 800f49e:	428d      	cmp	r5, r1
 800f4a0:	d074      	beq.n	800f58c <USBH_FindInterface+0x154>
 800f4a2:	2c00      	cmp	r4, #0
 800f4a4:	d172      	bne.n	800f58c <USBH_FindInterface+0x154>
 800f4a6:	f890 5497 	ldrb.w	r5, [r0, #1175]	; 0x497
 800f4aa:	428d      	cmp	r5, r1
 800f4ac:	d07c      	beq.n	800f5a8 <USBH_FindInterface+0x170>
 800f4ae:	2c00      	cmp	r4, #0
 800f4b0:	d17a      	bne.n	800f5a8 <USBH_FindInterface+0x170>
 800f4b2:	f890 54c1 	ldrb.w	r5, [r0, #1217]	; 0x4c1
 800f4b6:	428d      	cmp	r5, r1
 800f4b8:	f000 8086 	beq.w	800f5c8 <USBH_FindInterface+0x190>
 800f4bc:	2c00      	cmp	r4, #0
 800f4be:	f040 8083 	bne.w	800f5c8 <USBH_FindInterface+0x190>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800f4c2:	20ff      	movs	r0, #255	; 0xff
}
 800f4c4:	bc30      	pop	{r4, r5}
 800f4c6:	4770      	bx	lr
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f4c8:	f890 5348 	ldrb.w	r5, [r0, #840]	; 0x348
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f4cc:	4295      	cmp	r5, r2
 800f4ce:	d001      	beq.n	800f4d4 <USBH_FindInterface+0x9c>
 800f4d0:	2aff      	cmp	r2, #255	; 0xff
 800f4d2:	d1be      	bne.n	800f452 <USBH_FindInterface+0x1a>
 800f4d4:	f890 5349 	ldrb.w	r5, [r0, #841]	; 0x349
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f4d8:	429d      	cmp	r5, r3
 800f4da:	d001      	beq.n	800f4e0 <USBH_FindInterface+0xa8>
 800f4dc:	2bff      	cmp	r3, #255	; 0xff
 800f4de:	d1b8      	bne.n	800f452 <USBH_FindInterface+0x1a>
  uint8_t if_ix = 0U;
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	e7ef      	b.n	800f4c4 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f4e4:	f890 5372 	ldrb.w	r5, [r0, #882]	; 0x372
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f4e8:	4295      	cmp	r5, r2
 800f4ea:	d001      	beq.n	800f4f0 <USBH_FindInterface+0xb8>
 800f4ec:	2aff      	cmp	r2, #255	; 0xff
 800f4ee:	d1b6      	bne.n	800f45e <USBH_FindInterface+0x26>
 800f4f0:	f890 5373 	ldrb.w	r5, [r0, #883]	; 0x373
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f4f4:	429d      	cmp	r5, r3
 800f4f6:	d001      	beq.n	800f4fc <USBH_FindInterface+0xc4>
 800f4f8:	2bff      	cmp	r3, #255	; 0xff
 800f4fa:	d1b0      	bne.n	800f45e <USBH_FindInterface+0x26>
    if_ix++;
 800f4fc:	2001      	movs	r0, #1
 800f4fe:	e7e1      	b.n	800f4c4 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f500:	f890 539c 	ldrb.w	r5, [r0, #924]	; 0x39c
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f504:	4295      	cmp	r5, r2
 800f506:	d001      	beq.n	800f50c <USBH_FindInterface+0xd4>
 800f508:	2aff      	cmp	r2, #255	; 0xff
 800f50a:	d1ae      	bne.n	800f46a <USBH_FindInterface+0x32>
 800f50c:	f890 539d 	ldrb.w	r5, [r0, #925]	; 0x39d
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f510:	429d      	cmp	r5, r3
 800f512:	d001      	beq.n	800f518 <USBH_FindInterface+0xe0>
 800f514:	2bff      	cmp	r3, #255	; 0xff
 800f516:	d1a8      	bne.n	800f46a <USBH_FindInterface+0x32>
    if_ix++;
 800f518:	2002      	movs	r0, #2
 800f51a:	e7d3      	b.n	800f4c4 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f51c:	f890 53c6 	ldrb.w	r5, [r0, #966]	; 0x3c6
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f520:	4295      	cmp	r5, r2
 800f522:	d001      	beq.n	800f528 <USBH_FindInterface+0xf0>
 800f524:	2aff      	cmp	r2, #255	; 0xff
 800f526:	d1a6      	bne.n	800f476 <USBH_FindInterface+0x3e>
 800f528:	f890 53c7 	ldrb.w	r5, [r0, #967]	; 0x3c7
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f52c:	429d      	cmp	r5, r3
 800f52e:	d001      	beq.n	800f534 <USBH_FindInterface+0xfc>
 800f530:	2bff      	cmp	r3, #255	; 0xff
 800f532:	d1a0      	bne.n	800f476 <USBH_FindInterface+0x3e>
    if_ix++;
 800f534:	2003      	movs	r0, #3
 800f536:	e7c5      	b.n	800f4c4 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f538:	f890 53f0 	ldrb.w	r5, [r0, #1008]	; 0x3f0
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f53c:	4295      	cmp	r5, r2
 800f53e:	d001      	beq.n	800f544 <USBH_FindInterface+0x10c>
 800f540:	2aff      	cmp	r2, #255	; 0xff
 800f542:	d19e      	bne.n	800f482 <USBH_FindInterface+0x4a>
 800f544:	f890 53f1 	ldrb.w	r5, [r0, #1009]	; 0x3f1
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f548:	429d      	cmp	r5, r3
 800f54a:	d001      	beq.n	800f550 <USBH_FindInterface+0x118>
 800f54c:	2bff      	cmp	r3, #255	; 0xff
 800f54e:	d198      	bne.n	800f482 <USBH_FindInterface+0x4a>
    if_ix++;
 800f550:	2004      	movs	r0, #4
 800f552:	e7b7      	b.n	800f4c4 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f554:	f890 541a 	ldrb.w	r5, [r0, #1050]	; 0x41a
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f558:	4295      	cmp	r5, r2
 800f55a:	d001      	beq.n	800f560 <USBH_FindInterface+0x128>
 800f55c:	2aff      	cmp	r2, #255	; 0xff
 800f55e:	d196      	bne.n	800f48e <USBH_FindInterface+0x56>
 800f560:	f890 541b 	ldrb.w	r5, [r0, #1051]	; 0x41b
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f564:	429d      	cmp	r5, r3
 800f566:	d001      	beq.n	800f56c <USBH_FindInterface+0x134>
 800f568:	2bff      	cmp	r3, #255	; 0xff
 800f56a:	d190      	bne.n	800f48e <USBH_FindInterface+0x56>
    if_ix++;
 800f56c:	2005      	movs	r0, #5
 800f56e:	e7a9      	b.n	800f4c4 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f570:	f890 5444 	ldrb.w	r5, [r0, #1092]	; 0x444
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f574:	4295      	cmp	r5, r2
 800f576:	d001      	beq.n	800f57c <USBH_FindInterface+0x144>
 800f578:	2aff      	cmp	r2, #255	; 0xff
 800f57a:	d18e      	bne.n	800f49a <USBH_FindInterface+0x62>
 800f57c:	f890 5445 	ldrb.w	r5, [r0, #1093]	; 0x445
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f580:	429d      	cmp	r5, r3
 800f582:	d001      	beq.n	800f588 <USBH_FindInterface+0x150>
 800f584:	2bff      	cmp	r3, #255	; 0xff
 800f586:	d188      	bne.n	800f49a <USBH_FindInterface+0x62>
    if_ix++;
 800f588:	2006      	movs	r0, #6
 800f58a:	e79b      	b.n	800f4c4 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f58c:	f890 546e 	ldrb.w	r5, [r0, #1134]	; 0x46e
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f590:	4295      	cmp	r5, r2
 800f592:	d001      	beq.n	800f598 <USBH_FindInterface+0x160>
 800f594:	2aff      	cmp	r2, #255	; 0xff
 800f596:	d186      	bne.n	800f4a6 <USBH_FindInterface+0x6e>
 800f598:	f890 546f 	ldrb.w	r5, [r0, #1135]	; 0x46f
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f59c:	429d      	cmp	r5, r3
 800f59e:	d001      	beq.n	800f5a4 <USBH_FindInterface+0x16c>
 800f5a0:	2bff      	cmp	r3, #255	; 0xff
 800f5a2:	d180      	bne.n	800f4a6 <USBH_FindInterface+0x6e>
    if_ix++;
 800f5a4:	2007      	movs	r0, #7
 800f5a6:	e78d      	b.n	800f4c4 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f5a8:	f890 5498 	ldrb.w	r5, [r0, #1176]	; 0x498
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f5ac:	4295      	cmp	r5, r2
 800f5ae:	d002      	beq.n	800f5b6 <USBH_FindInterface+0x17e>
 800f5b0:	2aff      	cmp	r2, #255	; 0xff
 800f5b2:	f47f af7e 	bne.w	800f4b2 <USBH_FindInterface+0x7a>
 800f5b6:	f890 5499 	ldrb.w	r5, [r0, #1177]	; 0x499
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f5ba:	429d      	cmp	r5, r3
 800f5bc:	d002      	beq.n	800f5c4 <USBH_FindInterface+0x18c>
 800f5be:	2bff      	cmp	r3, #255	; 0xff
 800f5c0:	f47f af77 	bne.w	800f4b2 <USBH_FindInterface+0x7a>
    if_ix++;
 800f5c4:	2008      	movs	r0, #8
 800f5c6:	e77d      	b.n	800f4c4 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f5c8:	f890 14c2 	ldrb.w	r1, [r0, #1218]	; 0x4c2
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f5cc:	4291      	cmp	r1, r2
 800f5ce:	d002      	beq.n	800f5d6 <USBH_FindInterface+0x19e>
 800f5d0:	2aff      	cmp	r2, #255	; 0xff
 800f5d2:	f47f af76 	bne.w	800f4c2 <USBH_FindInterface+0x8a>
 800f5d6:	f890 24c3 	ldrb.w	r2, [r0, #1219]	; 0x4c3
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d002      	beq.n	800f5e4 <USBH_FindInterface+0x1ac>
 800f5de:	2bff      	cmp	r3, #255	; 0xff
 800f5e0:	f47f af6f 	bne.w	800f4c2 <USBH_FindInterface+0x8a>
    if_ix++;
 800f5e4:	2009      	movs	r0, #9
 800f5e6:	e76d      	b.n	800f4c4 <USBH_FindInterface+0x8c>

0800f5e8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800f5e8:	b510      	push	{r4, lr}
 800f5ea:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800f5ec:	f00f f828 	bl	801e640 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, 1);
 800f5f0:	2101      	movs	r1, #1
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f00f f8a8 	bl	801e748 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	bd10      	pop	{r4, pc}

0800f5fc <USBH_Stop>:
  *         Stop the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Stop(USBH_HandleTypeDef *phost)
{
 800f5fc:	b510      	push	{r4, lr}
 800f5fe:	4604      	mov	r4, r0
  /* DeActivate VBUS on the port */
  USBH_LL_DriverVBUS(phost, 0);
 800f600:	2100      	movs	r1, #0
 800f602:	f00f f8a1 	bl	801e748 <USBH_LL_DriverVBUS>

  /* Stop and cleanup the low level driver  */
  USBH_LL_Stop(phost);
 800f606:	4620      	mov	r0, r4
 800f608:	f00f f828 	bl	801e65c <USBH_LL_Stop>

  /* Free Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f60c:	7921      	ldrb	r1, [r4, #4]
 800f60e:	4620      	mov	r0, r4
 800f610:	f001 fa5e 	bl	8010ad0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f614:	7961      	ldrb	r1, [r4, #5]
 800f616:	4620      	mov	r0, r4
 800f618:	f001 fa5a 	bl	8010ad0 <USBH_FreePipe>

  return USBH_OK;
}
 800f61c:	2000      	movs	r0, #0
 800f61e:	bd10      	pop	{r4, pc}

0800f620 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800f620:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f622:	2302      	movs	r3, #2
{
 800f624:	b087      	sub	sp, #28
 800f626:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f628:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f62c:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 800f630:	2b01      	cmp	r3, #1
 800f632:	d101      	bne.n	800f638 <USBH_Process+0x18>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f634:	2303      	movs	r3, #3
 800f636:	7003      	strb	r3, [r0, #0]
  }

  switch (phost->gState)
 800f638:	7823      	ldrb	r3, [r4, #0]
 800f63a:	2b0b      	cmp	r3, #11
 800f63c:	d84f      	bhi.n	800f6de <USBH_Process+0xbe>
 800f63e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f642:	0059      	.short	0x0059
 800f644:	0082006b 	.word	0x0082006b
 800f648:	004e00b8 	.word	0x004e00b8
 800f64c:	00f700ee 	.word	0x00f700ee
 800f650:	011f010c 	.word	0x011f010c
 800f654:	000c0117 	.word	0x000c0117
 800f658:	0051      	.short	0x0051
#endif
      break;

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f65a:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d03d      	beq.n	800f6de <USBH_Process+0xbe>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f662:	2300      	movs	r3, #0

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
        {
          for (int j = 0; j < 10; j++)
          {
			  if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[j].bInterfaceClass)
 800f664:	f8d4 14e8 	ldr.w	r1, [r4, #1256]	; 0x4e8
 800f668:	f894 2347 	ldrb.w	r2, [r4, #839]	; 0x347
        phost->pActiveClass = NULL;
 800f66c:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
			  if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[j].bInterfaceClass)
 800f670:	790b      	ldrb	r3, [r1, #4]
 800f672:	429a      	cmp	r2, r3
 800f674:	d024      	beq.n	800f6c0 <USBH_Process+0xa0>
 800f676:	f894 2371 	ldrb.w	r2, [r4, #881]	; 0x371
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d020      	beq.n	800f6c0 <USBH_Process+0xa0>
 800f67e:	f894 239b 	ldrb.w	r2, [r4, #923]	; 0x39b
 800f682:	429a      	cmp	r2, r3
 800f684:	d01c      	beq.n	800f6c0 <USBH_Process+0xa0>
 800f686:	f894 23c5 	ldrb.w	r2, [r4, #965]	; 0x3c5
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d018      	beq.n	800f6c0 <USBH_Process+0xa0>
 800f68e:	f894 23ef 	ldrb.w	r2, [r4, #1007]	; 0x3ef
 800f692:	429a      	cmp	r2, r3
 800f694:	d014      	beq.n	800f6c0 <USBH_Process+0xa0>
 800f696:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d010      	beq.n	800f6c0 <USBH_Process+0xa0>
 800f69e:	f894 2443 	ldrb.w	r2, [r4, #1091]	; 0x443
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d00c      	beq.n	800f6c0 <USBH_Process+0xa0>
 800f6a6:	f894 246d 	ldrb.w	r2, [r4, #1133]	; 0x46d
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d008      	beq.n	800f6c0 <USBH_Process+0xa0>
 800f6ae:	f894 2497 	ldrb.w	r2, [r4, #1175]	; 0x497
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d004      	beq.n	800f6c0 <USBH_Process+0xa0>
 800f6b6:	f894 24c1 	ldrb.w	r2, [r4, #1217]	; 0x4c1
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	f040 80c8 	bne.w	800f850 <USBH_Process+0x230>
			  {
				phost->pActiveClass = phost->pClass[idx];
 800f6c0:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
          }
        }

        if (phost->pActiveClass != NULL)
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	688b      	ldr	r3, [r1, #8]
 800f6c8:	4798      	blx	r3
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	f040 80c0 	bne.w	800f850 <USBH_Process+0x230>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f6d0:	2206      	movs	r2, #6
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f6d2:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	2103      	movs	r1, #3
            phost->gState = HOST_CLASS_REQUEST;
 800f6da:	7022      	strb	r2, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f6dc:	4798      	blx	r3
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 800f6de:	2000      	movs	r0, #0
 800f6e0:	b007      	add	sp, #28
 800f6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (phost->pActiveClass != NULL)
 800f6e4:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d0f8      	beq.n	800f6de <USBH_Process+0xbe>
        phost->pActiveClass->BgndProcess(phost);
 800f6ec:	695b      	ldr	r3, [r3, #20]
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	4798      	blx	r3
 800f6f2:	e7f4      	b.n	800f6de <USBH_Process+0xbe>
      if (phost->device.is_connected)
 800f6f4:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d0f0      	beq.n	800f6de <USBH_Process+0xbe>
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f6fc:	2301      	movs	r3, #1
        USBH_Delay(200U);
 800f6fe:	20c8      	movs	r0, #200	; 0xc8
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f700:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
 800f702:	f00f f845 	bl	801e790 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800f706:	4620      	mov	r0, r4
 800f708:	f00e ffc4 	bl	801e694 <USBH_LL_ResetPort>
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f70c:	2300      	movs	r3, #0
 800f70e:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 800f712:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
 800f716:	e7e2      	b.n	800f6de <USBH_Process+0xbe>
      if (phost->device.PortEnabled == 1U)
 800f718:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	f000 8145 	beq.w	800f9ac <USBH_Process+0x38c>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f722:	f8d4 3538 	ldr.w	r3, [r4, #1336]	; 0x538
 800f726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f72a:	f240 80b7 	bls.w	800f89c <USBH_Process+0x27c>
          phost->device.RstCnt++;
 800f72e:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 800f732:	3301      	adds	r3, #1
 800f734:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 800f736:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 800f738:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800f73c:	f200 8088 	bhi.w	800f850 <USBH_Process+0x230>
            phost->gState = HOST_IDLE;
 800f740:	2300      	movs	r3, #0
 800f742:	7023      	strb	r3, [r4, #0]
 800f744:	e7cb      	b.n	800f6de <USBH_Process+0xbe>
      if (phost->pUser != NULL)
 800f746:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 800f74a:	b113      	cbz	r3, 800f752 <USBH_Process+0x132>
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f74c:	2104      	movs	r1, #4
 800f74e:	4620      	mov	r0, r4
 800f750:	4798      	blx	r3
      USBH_Delay(100U);
 800f752:	2064      	movs	r0, #100	; 0x64
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f754:	2500      	movs	r5, #0
      USBH_Delay(100U);
 800f756:	f00f f81b 	bl	801e790 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 800f75a:	4620      	mov	r0, r4
 800f75c:	f00e ff8c 	bl	801e678 <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 800f760:	2305      	movs	r3, #5
      phost->device.speed = USBH_LL_GetSpeed(phost);
 800f762:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f766:	4629      	mov	r1, r5
      phost->gState = HOST_ENUMERATION;
 800f768:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f76a:	4620      	mov	r0, r4
 800f76c:	f001 f966 	bl	8010a3c <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f770:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f772:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f774:	4620      	mov	r0, r4
 800f776:	f001 f961 	bl	8010a3c <USBH_AllocPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f77a:	79a7      	ldrb	r7, [r4, #6]
 800f77c:	f894 631d 	ldrb.w	r6, [r4, #797]	; 0x31d
 800f780:	4601      	mov	r1, r0
 800f782:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800f786:	2280      	movs	r2, #128	; 0x80
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f788:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f78a:	4620      	mov	r0, r4
 800f78c:	9702      	str	r7, [sp, #8]
 800f78e:	e9cd 6500 	strd	r6, r5, [sp]
 800f792:	f001 f93d 	bl	8010a10 <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f796:	79a7      	ldrb	r7, [r4, #6]
 800f798:	f894 631d 	ldrb.w	r6, [r4, #797]	; 0x31d
 800f79c:	462a      	mov	r2, r5
 800f79e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	7961      	ldrb	r1, [r4, #5]
 800f7a6:	9501      	str	r5, [sp, #4]
 800f7a8:	9702      	str	r7, [sp, #8]
 800f7aa:	9600      	str	r6, [sp, #0]
 800f7ac:	f001 f930 	bl	8010a10 <USBH_OpenPipe>
      break;
 800f7b0:	e795      	b.n	800f6de <USBH_Process+0xbe>
      phost->device.is_disconnected = 0U;
 800f7b2:	2500      	movs	r5, #0
 800f7b4:	223c      	movs	r2, #60	; 0x3c
 800f7b6:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800f7ba:	4629      	mov	r1, r5
 800f7bc:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
 800f7c0:	f017 febb 	bl	802753a <memset>
 800f7c4:	4629      	mov	r1, r5
 800f7c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f7ca:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 800f7ce:	f017 feb4 	bl	802753a <memset>
  phost->RequestState = CMD_SEND;
 800f7d2:	2301      	movs	r3, #1
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f7d4:	2040      	movs	r0, #64	; 0x40
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f7d6:	f44f 7180 	mov.w	r1, #256	; 0x100
      if (phost->pActiveClass != NULL)
 800f7da:	f8d4 24ec 	ldr.w	r2, [r4, #1260]	; 0x4ec
  phost->gState = HOST_IDLE;
 800f7de:	7025      	strb	r5, [r4, #0]
  phost->EnumState = ENUM_IDLE;
 800f7e0:	7065      	strb	r5, [r4, #1]
  phost->Timer = 0U;
 800f7e2:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
  phost->Control.errorcount = 0U;
 800f7e6:	7665      	strb	r5, [r4, #25]
  phost->RequestState = CMD_SEND;
 800f7e8:	70a3      	strb	r3, [r4, #2]
  phost->Control.state = CTRL_SETUP;
 800f7ea:	7623      	strb	r3, [r4, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f7ec:	71a0      	strb	r0, [r4, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f7ee:	f8c4 131c 	str.w	r1, [r4, #796]	; 0x31c
      if (phost->pActiveClass != NULL)
 800f7f2:	b122      	cbz	r2, 800f7fe <USBH_Process+0x1de>
        phost->pActiveClass->DeInit(phost);
 800f7f4:	68d3      	ldr	r3, [r2, #12]
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f7fa:	f8c4 54ec 	str.w	r5, [r4, #1260]	; 0x4ec
      if (phost->pUser != NULL)
 800f7fe:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 800f802:	b113      	cbz	r3, 800f80a <USBH_Process+0x1ea>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f804:	2105      	movs	r1, #5
 800f806:	4620      	mov	r0, r4
 800f808:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 800f80a:	f894 5322 	ldrb.w	r5, [r4, #802]	; 0x322
 800f80e:	b2ed      	uxtb	r5, r5
 800f810:	2d01      	cmp	r5, #1
 800f812:	f000 80c0 	beq.w	800f996 <USBH_Process+0x376>
        USBH_LL_Start(phost);
 800f816:	4620      	mov	r0, r4
 800f818:	f00e ff12 	bl	801e640 <USBH_LL_Start>
  return USBH_OK;
 800f81c:	e75f      	b.n	800f6de <USBH_Process+0xbe>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 800f81e:	7863      	ldrb	r3, [r4, #1]
 800f820:	2b07      	cmp	r3, #7
 800f822:	d84d      	bhi.n	800f8c0 <USBH_Process+0x2a0>
 800f824:	e8df f003 	tbb	[pc, r3]
 800f828:	a58b9b41 	.word	0xa58b9b41
 800f82c:	5f656d75 	.word	0x5f656d75
      if (phost->pActiveClass != NULL)
 800f830:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
 800f834:	b163      	cbz	r3, 800f850 <USBH_Process+0x230>
        status = phost->pActiveClass->Requests(phost);
 800f836:	691b      	ldr	r3, [r3, #16]
 800f838:	4620      	mov	r0, r4
 800f83a:	4798      	blx	r3
 800f83c:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800f840:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800f844:	b33b      	cbz	r3, 800f896 <USBH_Process+0x276>
        else if (status == USBH_FAIL)
 800f846:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800f84a:	2b02      	cmp	r3, #2
 800f84c:	f47f af47 	bne.w	800f6de <USBH_Process+0xbe>
        phost->gState = HOST_ABORT_STATE;
 800f850:	230d      	movs	r3, #13
}
 800f852:	2000      	movs	r0, #0
        phost->gState = HOST_ABORT_STATE;
 800f854:	7023      	strb	r3, [r4, #0]
}
 800f856:	b007      	add	sp, #28
 800f858:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (phost->pUser != NULL)
 800f85a:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 800f85e:	2b00      	cmp	r3, #0
 800f860:	f43f af3d 	beq.w	800f6de <USBH_Process+0xbe>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f864:	2101      	movs	r1, #1
 800f866:	4620      	mov	r0, r4
 800f868:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f86a:	2308      	movs	r3, #8
 800f86c:	7023      	strb	r3, [r4, #0]
 800f86e:	e736      	b.n	800f6de <USBH_Process+0xbe>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800f870:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
 800f874:	069b      	lsls	r3, r3, #26
 800f876:	f100 8086 	bmi.w	800f986 <USBH_Process+0x366>
        phost->gState = HOST_CHECK_CLASS;
 800f87a:	230a      	movs	r3, #10
 800f87c:	7023      	strb	r3, [r4, #0]
 800f87e:	e72e      	b.n	800f6de <USBH_Process+0xbe>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f880:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
 800f884:	4620      	mov	r0, r4
 800f886:	f000 fdc5 	bl	8010414 <USBH_SetCfg>
 800f88a:	2800      	cmp	r0, #0
 800f88c:	f47f af27 	bne.w	800f6de <USBH_Process+0xbe>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f890:	2309      	movs	r3, #9
 800f892:	7023      	strb	r3, [r4, #0]
 800f894:	e723      	b.n	800f6de <USBH_Process+0xbe>
          phost->gState = HOST_CLASS;
 800f896:	230b      	movs	r3, #11
 800f898:	7023      	strb	r3, [r4, #0]
 800f89a:	e720      	b.n	800f6de <USBH_Process+0xbe>
          phost->Timeout += 10U;
 800f89c:	330a      	adds	r3, #10
          USBH_Delay(10U);
 800f89e:	200a      	movs	r0, #10
          phost->Timeout += 10U;
 800f8a0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
          USBH_Delay(10U);
 800f8a4:	f00e ff74 	bl	801e790 <USBH_Delay>
 800f8a8:	e719      	b.n	800f6de <USBH_Process+0xbe>
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f8aa:	2108      	movs	r1, #8
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	f000 f959 	bl	800fb64 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800f8b2:	4605      	mov	r5, r0
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	f000 80c1 	beq.w	800fa3c <USBH_Process+0x41c>
        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f8ba:	2803      	cmp	r0, #3
 800f8bc:	f000 80aa 	beq.w	800fa14 <USBH_Process+0x3f4>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f8c0:	2301      	movs	r3, #1
      status = USBH_HandleEnum(phost);
 800f8c2:	f88d 3017 	strb.w	r3, [sp, #23]
      if (status == USBH_OK)
 800f8c6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800f8ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	f47f af05 	bne.w	800f6de <USBH_Process+0xbe>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f8d4:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
        phost->device.current_interface = 0U;
 800f8d8:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	d0c4      	beq.n	800f86a <USBH_Process+0x24a>
          phost->gState = HOST_INPUT;
 800f8e0:	2307      	movs	r3, #7
 800f8e2:	7023      	strb	r3, [r4, #0]
 800f8e4:	e6fb      	b.n	800f6de <USBH_Process+0xbe>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f8e6:	f894 1336 	ldrb.w	r1, [r4, #822]	; 0x336
 800f8ea:	2900      	cmp	r1, #0
 800f8ec:	d174      	bne.n	800f9d8 <USBH_Process+0x3b8>
        }
      }
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	e7e7      	b.n	800f8c2 <USBH_Process+0x2a2>
      if (phost->device.DevDesc.iProduct != 0U)
 800f8f2:	f894 1335 	ldrb.w	r1, [r4, #821]	; 0x335
 800f8f6:	2900      	cmp	r1, #0
 800f8f8:	d17f      	bne.n	800f9fa <USBH_Process+0x3da>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f8fa:	2207      	movs	r2, #7
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f8fc:	2301      	movs	r3, #1
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f8fe:	7062      	strb	r2, [r4, #1]
 800f900:	e7df      	b.n	800f8c2 <USBH_Process+0x2a2>
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f902:	f894 1334 	ldrb.w	r1, [r4, #820]	; 0x334
 800f906:	2900      	cmp	r1, #0
 800f908:	d15a      	bne.n	800f9c0 <USBH_Process+0x3a0>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f90a:	2206      	movs	r2, #6
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f90c:	2301      	movs	r3, #1
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f90e:	7062      	strb	r2, [r4, #1]
 800f910:	e7d7      	b.n	800f8c2 <USBH_Process+0x2a2>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f912:	f8b4 133a 	ldrh.w	r1, [r4, #826]	; 0x33a
 800f916:	4620      	mov	r0, r4
 800f918:	f000 fa32 	bl	800fd80 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800f91c:	2800      	cmp	r0, #0
 800f91e:	d04b      	beq.n	800f9b8 <USBH_Process+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f920:	2803      	cmp	r0, #3
 800f922:	d1cd      	bne.n	800f8c0 <USBH_Process+0x2a0>
        phost->device.EnumCnt++;
 800f924:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800f928:	3301      	adds	r3, #1
 800f92a:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 800f92c:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800f92e:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f932:	f240 80a6 	bls.w	800fa82 <USBH_Process+0x462>
          phost->gState = HOST_ABORT_STATE;
 800f936:	220d      	movs	r2, #13
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f938:	2301      	movs	r3, #1
          phost->gState = HOST_ABORT_STATE;
 800f93a:	7022      	strb	r2, [r4, #0]
 800f93c:	e7c1      	b.n	800f8c2 <USBH_Process+0x2a2>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f93e:	2101      	movs	r1, #1
 800f940:	4620      	mov	r0, r4
 800f942:	f000 fc81 	bl	8010248 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 800f946:	4606      	mov	r6, r0
 800f948:	2800      	cmp	r0, #0
 800f94a:	f000 80a7 	beq.w	800fa9c <USBH_Process+0x47c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f94e:	2803      	cmp	r0, #3
 800f950:	d1b6      	bne.n	800f8c0 <USBH_Process+0x2a0>
        phost->gState = HOST_ABORT_STATE;
 800f952:	210d      	movs	r1, #13
        phost->EnumState = ENUM_IDLE;
 800f954:	2200      	movs	r2, #0
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f956:	2301      	movs	r3, #1
        phost->gState = HOST_ABORT_STATE;
 800f958:	7021      	strb	r1, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 800f95a:	7062      	strb	r2, [r4, #1]
 800f95c:	e7b1      	b.n	800f8c2 <USBH_Process+0x2a2>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f95e:	2112      	movs	r1, #18
 800f960:	4620      	mov	r0, r4
 800f962:	f000 f8ff 	bl	800fb64 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800f966:	2800      	cmp	r0, #0
 800f968:	d1da      	bne.n	800f920 <USBH_Process+0x300>
        phost->EnumState = ENUM_SET_ADDR;
 800f96a:	2202      	movs	r2, #2
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f96c:	2301      	movs	r3, #1
        phost->EnumState = ENUM_SET_ADDR;
 800f96e:	7062      	strb	r2, [r4, #1]
 800f970:	e7a7      	b.n	800f8c2 <USBH_Process+0x2a2>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f972:	2109      	movs	r1, #9
 800f974:	4620      	mov	r0, r4
 800f976:	f000 fa03 	bl	800fd80 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800f97a:	2800      	cmp	r0, #0
 800f97c:	d1d0      	bne.n	800f920 <USBH_Process+0x300>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f97e:	2204      	movs	r2, #4
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f980:	2301      	movs	r3, #1
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f982:	7062      	strb	r2, [r4, #1]
 800f984:	e79d      	b.n	800f8c2 <USBH_Process+0x2a2>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800f986:	2101      	movs	r1, #1
 800f988:	4620      	mov	r0, r4
 800f98a:	f000 fe29 	bl	80105e0 <USBH_SetFeature>
 800f98e:	2800      	cmp	r0, #0
 800f990:	f47f aea5 	bne.w	800f6de <USBH_Process+0xbe>
 800f994:	e771      	b.n	800f87a <USBH_Process+0x25a>
        phost->device.is_ReEnumerated = 0U;
 800f996:	2300      	movs	r3, #0
  USBH_LL_Start(phost);
 800f998:	4620      	mov	r0, r4
        phost->device.is_ReEnumerated = 0U;
 800f99a:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  USBH_LL_Start(phost);
 800f99e:	f00e fe4f 	bl	801e640 <USBH_LL_Start>
  USBH_LL_DriverVBUS(phost, 1);
 800f9a2:	4629      	mov	r1, r5
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	f00e fecf 	bl	801e748 <USBH_LL_DriverVBUS>
 800f9aa:	e698      	b.n	800f6de <USBH_Process+0xbe>
        phost->device.RstCnt = 0U;
 800f9ac:	2200      	movs	r2, #0
        phost->gState = HOST_DEV_ATTACHED;
 800f9ae:	2302      	movs	r3, #2
        phost->device.RstCnt = 0U;
 800f9b0:	f884 231f 	strb.w	r2, [r4, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f9b4:	7023      	strb	r3, [r4, #0]
 800f9b6:	e692      	b.n	800f6de <USBH_Process+0xbe>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f9b8:	2205      	movs	r2, #5
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f9ba:	2301      	movs	r3, #1
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f9bc:	7062      	strb	r2, [r4, #1]
 800f9be:	e780      	b.n	800f8c2 <USBH_Process+0x2a2>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f9c0:	23ff      	movs	r3, #255	; 0xff
 800f9c2:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	f000 fb30 	bl	801002c <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	d09c      	beq.n	800f90a <USBH_Process+0x2ea>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f9d0:	2803      	cmp	r0, #3
 800f9d2:	f47f af75 	bne.w	800f8c0 <USBH_Process+0x2a0>
 800f9d6:	e798      	b.n	800f90a <USBH_Process+0x2ea>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f9d8:	23ff      	movs	r3, #255	; 0xff
 800f9da:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f000 fb24 	bl	801002c <USBH_Get_StringDesc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f9e4:	f1a0 0303 	sub.w	r3, r0, #3
 800f9e8:	fab3 f383 	clz	r3, r3
 800f9ec:	095b      	lsrs	r3, r3, #5
 800f9ee:	2800      	cmp	r0, #0
 800f9f0:	bf08      	it	eq
 800f9f2:	2301      	moveq	r3, #1
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f9f4:	f083 0301 	eor.w	r3, r3, #1
 800f9f8:	e763      	b.n	800f8c2 <USBH_Process+0x2a2>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f9fa:	23ff      	movs	r3, #255	; 0xff
 800f9fc:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800fa00:	4620      	mov	r0, r4
 800fa02:	f000 fb13 	bl	801002c <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800fa06:	2800      	cmp	r0, #0
 800fa08:	f43f af77 	beq.w	800f8fa <USBH_Process+0x2da>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fa0c:	2803      	cmp	r0, #3
 800fa0e:	f47f af57 	bne.w	800f8c0 <USBH_Process+0x2a0>
 800fa12:	e772      	b.n	800f8fa <USBH_Process+0x2da>
        phost->device.EnumCnt++;
 800fa14:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800fa18:	3301      	adds	r3, #1
 800fa1a:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 800fa1c:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800fa1e:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fa22:	d888      	bhi.n	800f936 <USBH_Process+0x316>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800fa24:	7961      	ldrb	r1, [r4, #5]
 800fa26:	4620      	mov	r0, r4
 800fa28:	f001 f852 	bl	8010ad0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800fa2c:	7921      	ldrb	r1, [r4, #4]
 800fa2e:	4620      	mov	r0, r4
 800fa30:	f001 f84e 	bl	8010ad0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800fa34:	2200      	movs	r2, #0
  USBH_StatusTypeDef Status = USBH_BUSY;
 800fa36:	2301      	movs	r3, #1
          phost->gState = HOST_IDLE;
 800fa38:	7022      	strb	r2, [r4, #0]
 800fa3a:	e742      	b.n	800f8c2 <USBH_Process+0x2a2>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800fa3c:	f894 732d 	ldrb.w	r7, [r4, #813]	; 0x32d
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800fa40:	2601      	movs	r6, #1
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fa42:	f894 c31d 	ldrb.w	ip, [r4, #797]	; 0x31d
 800fa46:	2280      	movs	r2, #128	; 0x80
 800fa48:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	7921      	ldrb	r1, [r4, #4]
 800fa50:	9501      	str	r5, [sp, #4]
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800fa52:	71a7      	strb	r7, [r4, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fa54:	9702      	str	r7, [sp, #8]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800fa56:	7066      	strb	r6, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fa58:	f8cd c000 	str.w	ip, [sp]
 800fa5c:	f000 ffd8 	bl	8010a10 <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fa60:	f894 c006 	ldrb.w	ip, [r4, #6]
 800fa64:	f894 731d 	ldrb.w	r7, [r4, #797]	; 0x31d
 800fa68:	462a      	mov	r2, r5
 800fa6a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800fa6e:	4620      	mov	r0, r4
 800fa70:	7961      	ldrb	r1, [r4, #5]
 800fa72:	9501      	str	r5, [sp, #4]
 800fa74:	f8cd c008 	str.w	ip, [sp, #8]
 800fa78:	9700      	str	r7, [sp, #0]
 800fa7a:	f000 ffc9 	bl	8010a10 <USBH_OpenPipe>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800fa7e:	4633      	mov	r3, r6
 800fa80:	e71f      	b.n	800f8c2 <USBH_Process+0x2a2>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800fa82:	7961      	ldrb	r1, [r4, #5]
 800fa84:	4620      	mov	r0, r4
 800fa86:	f001 f823 	bl	8010ad0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800fa8a:	7921      	ldrb	r1, [r4, #4]
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	f001 f81f 	bl	8010ad0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fa92:	2200      	movs	r2, #0
  USBH_StatusTypeDef Status = USBH_BUSY;
 800fa94:	2301      	movs	r3, #1
          phost->EnumState = ENUM_IDLE;
 800fa96:	7062      	strb	r2, [r4, #1]
          phost->gState = HOST_IDLE;
 800fa98:	7022      	strb	r2, [r4, #0]
 800fa9a:	e712      	b.n	800f8c2 <USBH_Process+0x2a2>
        USBH_Delay(2U);
 800fa9c:	2002      	movs	r0, #2
        phost->device.address = USBH_DEVICE_ADDRESS;
 800fa9e:	2501      	movs	r5, #1
        USBH_Delay(2U);
 800faa0:	f00e fe76 	bl	801e790 <USBH_Delay>
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800faa4:	79a7      	ldrb	r7, [r4, #6]
        phost->EnumState = ENUM_GET_CFG_DESC;
 800faa6:	2003      	movs	r0, #3
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800faa8:	7921      	ldrb	r1, [r4, #4]
 800faaa:	9601      	str	r6, [sp, #4]
 800faac:	462b      	mov	r3, r5
        phost->EnumState = ENUM_GET_CFG_DESC;
 800faae:	7060      	strb	r0, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fab0:	2280      	movs	r2, #128	; 0x80
        phost->device.address = USBH_DEVICE_ADDRESS;
 800fab2:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fab6:	4620      	mov	r0, r4
 800fab8:	9702      	str	r7, [sp, #8]
 800faba:	f894 731d 	ldrb.w	r7, [r4, #797]	; 0x31d
 800fabe:	9700      	str	r7, [sp, #0]
 800fac0:	f000 ffa6 	bl	8010a10 <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fac4:	f894 c006 	ldrb.w	ip, [r4, #6]
 800fac8:	f894 731d 	ldrb.w	r7, [r4, #797]	; 0x31d
 800facc:	4632      	mov	r2, r6
 800face:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800fad2:	4620      	mov	r0, r4
 800fad4:	7961      	ldrb	r1, [r4, #5]
 800fad6:	9601      	str	r6, [sp, #4]
 800fad8:	f8cd c008 	str.w	ip, [sp, #8]
 800fadc:	9700      	str	r7, [sp, #0]
 800fade:	f000 ff97 	bl	8010a10 <USBH_OpenPipe>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800fae2:	462b      	mov	r3, r5
 800fae4:	e6ed      	b.n	800f8c2 <USBH_Process+0x2a2>
 800fae6:	bf00      	nop

0800fae8 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 800fae8:	f8c0 1534 	str.w	r1, [r0, #1332]	; 0x534
}
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop

0800faf0 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 800faf0:	f8d0 2534 	ldr.w	r2, [r0, #1332]	; 0x534
 800faf4:	3201      	adds	r2, #1
 800faf6:	f8c0 2534 	str.w	r2, [r0, #1332]	; 0x534
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800fafa:	7802      	ldrb	r2, [r0, #0]
 800fafc:	2a0b      	cmp	r2, #11
 800fafe:	d000      	beq.n	800fb02 <USBH_LL_IncTimer+0x12>
}
 800fb00:	4770      	bx	lr
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800fb02:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d0fa      	beq.n	800fb00 <USBH_LL_IncTimer+0x10>
  {
    phost->pActiveClass->SOFProcess(phost);
 800fb0a:	699b      	ldr	r3, [r3, #24]
 800fb0c:	4718      	bx	r3
 800fb0e:	bf00      	nop

0800fb10 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 800fb10:	2301      	movs	r3, #1
 800fb12:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 800fb16:	4770      	bx	lr

0800fb18 <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 800fb1e:	4770      	bx	lr

0800fb20 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800fb20:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
  phost->device.is_disconnected = 0U;
 800fb22:	2200      	movs	r2, #0
  phost->device.is_connected = 1U;
 800fb24:	2101      	movs	r1, #1
 800fb26:	f880 1320 	strb.w	r1, [r0, #800]	; 0x320
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800fb2a:	4610      	mov	r0, r2
  phost->device.is_disconnected = 0U;
 800fb2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800fb30:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
}
 800fb34:	4770      	bx	lr
 800fb36:	bf00      	nop

0800fb38 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800fb38:	b538      	push	{r3, r4, r5, lr}
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800fb3a:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 800fb3c:	2500      	movs	r5, #0
{
 800fb3e:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 800fb40:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.PortEnabled = 0U;
 800fb44:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323
  phost->device.is_connected = 0U;
 800fb48:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320

  /* Stop Host */
  USBH_LL_Stop(phost);
 800fb4c:	f00e fd86 	bl	801e65c <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800fb50:	7921      	ldrb	r1, [r4, #4]
 800fb52:	4620      	mov	r0, r4
 800fb54:	f000 ffbc 	bl	8010ad0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800fb58:	7961      	ldrb	r1, [r4, #5]
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f000 ffb8 	bl	8010ad0 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800fb60:	4628      	mov	r0, r5
 800fb62:	bd38      	pop	{r3, r4, r5, pc}

0800fb64 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800fb64:	b570      	push	{r4, r5, r6, lr}
 800fb66:	4604      	mov	r4, r0
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
  if (phost->RequestState == CMD_SEND)
 800fb68:	7880      	ldrb	r0, [r0, #2]
{
 800fb6a:	b082      	sub	sp, #8
  if (phost->RequestState == CMD_SEND)
 800fb6c:	2801      	cmp	r0, #1
 800fb6e:	d011      	beq.n	800fb94 <USBH_Get_DevDesc+0x30>
                               uint16_t length)
{
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 800fb70:	2802      	cmp	r0, #2
 800fb72:	d002      	beq.n	800fb7a <USBH_Get_DevDesc+0x16>
  status = USBH_BUSY;
 800fb74:	2001      	movs	r0, #1
}
 800fb76:	b002      	add	sp, #8
 800fb78:	bd70      	pop	{r4, r5, r6, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 800fb7a:	7e23      	ldrb	r3, [r4, #24]
 800fb7c:	460d      	mov	r5, r1
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	2b0a      	cmp	r3, #10
 800fb82:	d8f7      	bhi.n	800fb74 <USBH_Get_DevDesc+0x10>
 800fb84:	e8df f003 	tbb	[pc, r3]
 800fb88:	5548392f 	.word	0x5548392f
 800fb8c:	8c7f6f60 	.word	0x8c7f6f60
 800fb90:	ac9d      	.short	0xac9d
 800fb92:	14          	.byte	0x14
 800fb93:	00          	.byte	0x00
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fb94:	4e79      	ldr	r6, [pc, #484]	; (800fd7c <USBH_Get_DevDesc+0x218>)
    phost->Control.setup.b.wValue.w = value_idx;
 800fb96:	2500      	movs	r5, #0
                                   USB_DESC_DEVICE, phost->device.Data,
 800fb98:	f504 728e 	add.w	r2, r4, #284	; 0x11c
      phost->RequestState = CMD_WAIT;
 800fb9c:	2302      	movs	r3, #2
    phost->Control.setup.b.wLength.w = length;
 800fb9e:	82e1      	strh	r1, [r4, #22]
      phost->Control.length = length;
 800fba0:	81a1      	strh	r1, [r4, #12]
      phost->Control.state = CTRL_SETUP;
 800fba2:	7620      	strb	r0, [r4, #24]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fba4:	6126      	str	r6, [r4, #16]
    phost->Control.setup.b.wValue.w = value_idx;
 800fba6:	82a5      	strh	r5, [r4, #20]
      phost->Control.buff = buff;
 800fba8:	60a2      	str	r2, [r4, #8]
      phost->RequestState = CMD_WAIT;
 800fbaa:	70a3      	strb	r3, [r4, #2]
}
 800fbac:	b002      	add	sp, #8
 800fbae:	bd70      	pop	{r4, r5, r6, pc}
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fbb0:	7e63      	ldrb	r3, [r4, #25]
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	2b02      	cmp	r3, #2
 800fbb8:	7663      	strb	r3, [r4, #25]
 800fbba:	f240 80d7 	bls.w	800fd6c <USBH_Get_DevDesc+0x208>
        phost->RequestState = CMD_SEND;
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
        phost->Control.errorcount = 0U;
 800fbbe:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fbc0:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 800fbc4:	2106      	movs	r1, #6
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fbca:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 800fbcc:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f000 ff7e 	bl	8010ad0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800fbd4:	7921      	ldrb	r1, [r4, #4]
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	f000 ff7a 	bl	8010ad0 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 800fbdc:	7025      	strb	r5, [r4, #0]
        phost->RequestState = CMD_SEND;
 800fbde:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 800fbe0:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 800fbe2:	70a3      	strb	r3, [r4, #2]
 800fbe4:	e7c7      	b.n	800fb76 <USBH_Get_DevDesc+0x12>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fbe6:	7962      	ldrb	r2, [r4, #5]
 800fbe8:	f104 0110 	add.w	r1, r4, #16
 800fbec:	4620      	mov	r0, r4
 800fbee:	f000 fec3 	bl	8010978 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 800fbf2:	2302      	movs	r3, #2
 800fbf4:	2001      	movs	r0, #1
 800fbf6:	7623      	strb	r3, [r4, #24]
 800fbf8:	e7bd      	b.n	800fb76 <USBH_Get_DevDesc+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fbfa:	7961      	ldrb	r1, [r4, #5]
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f00e fd9f 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fc02:	2801      	cmp	r0, #1
 800fc04:	f000 80a7 	beq.w	800fd56 <USBH_Get_DevDesc+0x1f2>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fc08:	2804      	cmp	r0, #4
 800fc0a:	d001      	beq.n	800fc10 <USBH_Get_DevDesc+0xac>
 800fc0c:	2802      	cmp	r0, #2
 800fc0e:	d1b1      	bne.n	800fb74 <USBH_Get_DevDesc+0x10>
          phost->Control.state = CTRL_ERROR;
 800fc10:	230b      	movs	r3, #11
 800fc12:	2001      	movs	r0, #1
 800fc14:	7623      	strb	r3, [r4, #24]
 800fc16:	e7ae      	b.n	800fb76 <USBH_Get_DevDesc+0x12>
      phost->Control.timer = (uint16_t)phost->Timer;
 800fc18:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fc1c:	4620      	mov	r0, r4
 800fc1e:	7923      	ldrb	r3, [r4, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 800fc20:	81e2      	strh	r2, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fc22:	68a1      	ldr	r1, [r4, #8]
 800fc24:	89a2      	ldrh	r2, [r4, #12]
 800fc26:	f000 fecf 	bl	80109c8 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fc2a:	2304      	movs	r3, #4
 800fc2c:	2001      	movs	r0, #1
 800fc2e:	7623      	strb	r3, [r4, #24]
 800fc30:	e7a1      	b.n	800fb76 <USBH_Get_DevDesc+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fc32:	7921      	ldrb	r1, [r4, #4]
 800fc34:	4620      	mov	r0, r4
 800fc36:	f00e fd83 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fc3a:	2801      	cmp	r0, #1
 800fc3c:	d058      	beq.n	800fcf0 <USBH_Get_DevDesc+0x18c>
      if (URB_Status == USBH_URB_STALL)
 800fc3e:	2805      	cmp	r0, #5
 800fc40:	d039      	beq.n	800fcb6 <USBH_Get_DevDesc+0x152>
        if (URB_Status == USBH_URB_ERROR)
 800fc42:	2804      	cmp	r0, #4
 800fc44:	d196      	bne.n	800fb74 <USBH_Get_DevDesc+0x10>
 800fc46:	e7e3      	b.n	800fc10 <USBH_Get_DevDesc+0xac>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fc48:	2501      	movs	r5, #1
 800fc4a:	7963      	ldrb	r3, [r4, #5]
 800fc4c:	89a2      	ldrh	r2, [r4, #12]
 800fc4e:	4620      	mov	r0, r4
 800fc50:	68a1      	ldr	r1, [r4, #8]
 800fc52:	9500      	str	r5, [sp, #0]
 800fc54:	f000 fea0 	bl	8010998 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800fc58:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fc5c:	2306      	movs	r3, #6
 800fc5e:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 800fc60:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fc62:	7623      	strb	r3, [r4, #24]
 800fc64:	e787      	b.n	800fb76 <USBH_Get_DevDesc+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fc66:	7961      	ldrb	r1, [r4, #5]
 800fc68:	4620      	mov	r0, r4
 800fc6a:	f00e fd69 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fc6e:	2801      	cmp	r0, #1
 800fc70:	d06d      	beq.n	800fd4e <USBH_Get_DevDesc+0x1ea>
      else if (URB_Status == USBH_URB_STALL)
 800fc72:	2805      	cmp	r0, #5
 800fc74:	d01f      	beq.n	800fcb6 <USBH_Get_DevDesc+0x152>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fc76:	2802      	cmp	r0, #2
 800fc78:	d074      	beq.n	800fd64 <USBH_Get_DevDesc+0x200>
        if (URB_Status == USBH_URB_ERROR)
 800fc7a:	2804      	cmp	r0, #4
 800fc7c:	f47f af7a 	bne.w	800fb74 <USBH_Get_DevDesc+0x10>
          phost->Control.state = CTRL_ERROR;
 800fc80:	230b      	movs	r3, #11
 800fc82:	7623      	strb	r3, [r4, #24]
 800fc84:	e7ab      	b.n	800fbde <USBH_Get_DevDesc+0x7a>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800fc86:	2200      	movs	r2, #0
 800fc88:	7923      	ldrb	r3, [r4, #4]
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	4611      	mov	r1, r2
 800fc8e:	f000 fe9b 	bl	80109c8 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800fc92:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fc96:	2308      	movs	r3, #8
 800fc98:	2001      	movs	r0, #1
      phost->Control.timer = (uint16_t)phost->Timer;
 800fc9a:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fc9c:	7623      	strb	r3, [r4, #24]
 800fc9e:	e76a      	b.n	800fb76 <USBH_Get_DevDesc+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fca0:	7921      	ldrb	r1, [r4, #4]
 800fca2:	4620      	mov	r0, r4
 800fca4:	f00e fd4c 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fca8:	2801      	cmp	r0, #1
 800fcaa:	d025      	beq.n	800fcf8 <USBH_Get_DevDesc+0x194>
      else if (URB_Status == USBH_URB_ERROR)
 800fcac:	2804      	cmp	r0, #4
 800fcae:	d0af      	beq.n	800fc10 <USBH_Get_DevDesc+0xac>
        if (URB_Status == USBH_URB_STALL)
 800fcb0:	2805      	cmp	r0, #5
 800fcb2:	f47f af5f 	bne.w	800fb74 <USBH_Get_DevDesc+0x10>
        phost->RequestState = CMD_SEND;
 800fcb6:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 800fcb8:	2300      	movs	r3, #0
        status = USBH_NOT_SUPPORTED;
 800fcba:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 800fcbc:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 800fcbe:	7623      	strb	r3, [r4, #24]
 800fcc0:	e759      	b.n	800fb76 <USBH_Get_DevDesc+0x12>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	2501      	movs	r5, #1
 800fcc6:	7963      	ldrb	r3, [r4, #5]
 800fcc8:	4620      	mov	r0, r4
 800fcca:	4611      	mov	r1, r2
 800fccc:	9500      	str	r5, [sp, #0]
 800fcce:	f000 fe63 	bl	8010998 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800fcd2:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fcd6:	230a      	movs	r3, #10
 800fcd8:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 800fcda:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fcdc:	7623      	strb	r3, [r4, #24]
 800fcde:	e74a      	b.n	800fb76 <USBH_Get_DevDesc+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fce0:	7961      	ldrb	r1, [r4, #5]
 800fce2:	4620      	mov	r0, r4
 800fce4:	f00e fd2c 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fce8:	2801      	cmp	r0, #1
 800fcea:	d005      	beq.n	800fcf8 <USBH_Get_DevDesc+0x194>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fcec:	2802      	cmp	r0, #2
 800fcee:	d1a8      	bne.n	800fc42 <USBH_Get_DevDesc+0xde>
            phost->Control.state = CTRL_STATUS_OUT;
 800fcf0:	2309      	movs	r3, #9
 800fcf2:	2001      	movs	r0, #1
 800fcf4:	7623      	strb	r3, [r4, #24]
 800fcf6:	e73e      	b.n	800fb76 <USBH_Get_DevDesc+0x12>
        phost->RequestState = CMD_SEND;
 800fcf8:	2201      	movs	r2, #1
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800fcfa:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
        phost->Control.state = CTRL_IDLE;
 800fcfe:	2000      	movs	r0, #0
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800fd00:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
        phost->RequestState = CMD_SEND;
 800fd04:	70a2      	strb	r2, [r4, #2]
  if (length > 8U)
 800fd06:	2d08      	cmp	r5, #8
  dev_desc->bcdUSB             = LE16(buf +  2);
 800fd08:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800fd0c:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800fd10:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
        phost->Control.state = CTRL_IDLE;
 800fd14:	7620      	strb	r0, [r4, #24]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800fd16:	f884 1327 	strb.w	r1, [r4, #807]	; 0x327
  dev_desc->bcdUSB             = LE16(buf +  2);
 800fd1a:	f8a4 2328 	strh.w	r2, [r4, #808]	; 0x328
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800fd1e:	f8c4 332a 	str.w	r3, [r4, #810]	; 0x32a
  if (length > 8U)
 800fd22:	f67f af28 	bls.w	800fb76 <USBH_Get_DevDesc+0x12>
    dev_desc->idVendor           = LE16(buf +  8);
 800fd26:	f8b4 5124 	ldrh.w	r5, [r4, #292]	; 0x124
    dev_desc->idProduct          = LE16(buf + 10);
 800fd2a:	f8b4 1126 	ldrh.w	r1, [r4, #294]	; 0x126
    dev_desc->bcdDevice          = LE16(buf + 12);
 800fd2e:	f8b4 2128 	ldrh.w	r2, [r4, #296]	; 0x128
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800fd32:	f8d4 312a 	ldr.w	r3, [r4, #298]	; 0x12a
    dev_desc->idVendor           = LE16(buf +  8);
 800fd36:	f8a4 532e 	strh.w	r5, [r4, #814]	; 0x32e
    dev_desc->idProduct          = LE16(buf + 10);
 800fd3a:	f8a4 1330 	strh.w	r1, [r4, #816]	; 0x330
    dev_desc->bcdDevice          = LE16(buf + 12);
 800fd3e:	f8a4 2332 	strh.w	r2, [r4, #818]	; 0x332
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800fd42:	f8c4 3334 	str.w	r3, [r4, #820]	; 0x334
}
 800fd46:	b002      	add	sp, #8
 800fd48:	bd70      	pop	{r4, r5, r6, pc}
          if (direction == USB_D2H)
 800fd4a:	2a00      	cmp	r2, #0
 800fd4c:	dbd0      	blt.n	800fcf0 <USBH_Get_DevDesc+0x18c>
            phost->Control.state = CTRL_STATUS_IN;
 800fd4e:	2307      	movs	r3, #7
 800fd50:	2001      	movs	r0, #1
 800fd52:	7623      	strb	r3, [r4, #24]
 800fd54:	e70f      	b.n	800fb76 <USBH_Get_DevDesc+0x12>
        if (phost->Control.setup.b.wLength.w != 0U)
 800fd56:	8ae3      	ldrh	r3, [r4, #22]
 800fd58:	f994 2010 	ldrsb.w	r2, [r4, #16]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d0f4      	beq.n	800fd4a <USBH_Get_DevDesc+0x1e6>
          if (direction == USB_D2H)
 800fd60:	2a00      	cmp	r2, #0
 800fd62:	db08      	blt.n	800fd76 <USBH_Get_DevDesc+0x212>
            phost->Control.state = CTRL_DATA_OUT;
 800fd64:	2305      	movs	r3, #5
 800fd66:	2001      	movs	r0, #1
 800fd68:	7623      	strb	r3, [r4, #24]
 800fd6a:	e704      	b.n	800fb76 <USBH_Get_DevDesc+0x12>
        phost->Control.state = CTRL_SETUP;
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 800fd70:	4618      	mov	r0, r3
 800fd72:	70a3      	strb	r3, [r4, #2]
 800fd74:	e6ff      	b.n	800fb76 <USBH_Get_DevDesc+0x12>
            phost->Control.state = CTRL_DATA_IN;
 800fd76:	2303      	movs	r3, #3
 800fd78:	7623      	strb	r3, [r4, #24]
 800fd7a:	e6fc      	b.n	800fb76 <USBH_Get_DevDesc+0x12>
 800fd7c:	01000680 	.word	0x01000680

0800fd80 <USBH_Get_CfgDesc>:
{
 800fd80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (phost->RequestState == CMD_SEND)
 800fd84:	7883      	ldrb	r3, [r0, #2]
{
 800fd86:	b083      	sub	sp, #12
 800fd88:	4605      	mov	r5, r0
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800fd8a:	f100 041c 	add.w	r4, r0, #28
  if (phost->RequestState == CMD_SEND)
 800fd8e:	2b01      	cmp	r3, #1
 800fd90:	d012      	beq.n	800fdb8 <USBH_Get_CfgDesc+0x38>
  switch (phost->RequestState)
 800fd92:	2b02      	cmp	r3, #2
 800fd94:	d003      	beq.n	800fd9e <USBH_Get_CfgDesc+0x1e>
  status = USBH_BUSY;
 800fd96:	2001      	movs	r0, #1
}
 800fd98:	b003      	add	sp, #12
 800fd9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (phost->Control.state)
 800fd9e:	7e03      	ldrb	r3, [r0, #24]
 800fda0:	460e      	mov	r6, r1
 800fda2:	3b01      	subs	r3, #1
 800fda4:	2b0a      	cmp	r3, #10
 800fda6:	d8f6      	bhi.n	800fd96 <USBH_Get_CfgDesc+0x16>
 800fda8:	e8df f003 	tbb	[pc, r3]
 800fdac:	5145372e 	.word	0x5145372e
 800fdb0:	867a695b 	.word	0x867a695b
 800fdb4:	a496      	.short	0xa496
 800fdb6:	14          	.byte	0x14
 800fdb7:	00          	.byte	0x00
    phost->Control.setup.b.wLength.w = length;
 800fdb8:	82c1      	strh	r1, [r0, #22]
    phost->Control.setup.b.wValue.w = value_idx;
 800fdba:	2600      	movs	r6, #0
      phost->Control.buff = buff;
 800fdbc:	6084      	str	r4, [r0, #8]
      phost->RequestState = CMD_WAIT;
 800fdbe:	2202      	movs	r2, #2
      phost->Control.length = length;
 800fdc0:	8181      	strh	r1, [r0, #12]
      status = USBH_BUSY;
 800fdc2:	4618      	mov	r0, r3
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fdc4:	4f98      	ldr	r7, [pc, #608]	; (8010028 <USBH_Get_CfgDesc+0x2a8>)
      phost->Control.state = CTRL_SETUP;
 800fdc6:	762b      	strb	r3, [r5, #24]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fdc8:	612f      	str	r7, [r5, #16]
    phost->Control.setup.b.wValue.w = value_idx;
 800fdca:	82ae      	strh	r6, [r5, #20]
      phost->RequestState = CMD_WAIT;
 800fdcc:	70aa      	strb	r2, [r5, #2]
}
 800fdce:	b003      	add	sp, #12
 800fdd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fdd4:	7e43      	ldrb	r3, [r0, #25]
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	2b02      	cmp	r3, #2
 800fddc:	7643      	strb	r3, [r0, #25]
 800fdde:	f240 811b 	bls.w	8010018 <USBH_Get_CfgDesc+0x298>
        phost->Control.errorcount = 0U;
 800fde2:	2400      	movs	r4, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fde4:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 800fde8:	2106      	movs	r1, #6
 800fdea:	4798      	blx	r3
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fdec:	7969      	ldrb	r1, [r5, #5]
        phost->Control.errorcount = 0U;
 800fdee:	766c      	strb	r4, [r5, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	f000 fe6d 	bl	8010ad0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800fdf6:	7929      	ldrb	r1, [r5, #4]
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	f000 fe69 	bl	8010ad0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fdfe:	702c      	strb	r4, [r5, #0]
        phost->RequestState = CMD_SEND;
 800fe00:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 800fe02:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 800fe04:	70ab      	strb	r3, [r5, #2]
 800fe06:	e7c7      	b.n	800fd98 <USBH_Get_CfgDesc+0x18>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fe08:	7942      	ldrb	r2, [r0, #5]
 800fe0a:	f100 0110 	add.w	r1, r0, #16
 800fe0e:	f000 fdb3 	bl	8010978 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 800fe12:	2302      	movs	r3, #2
 800fe14:	2001      	movs	r0, #1
 800fe16:	762b      	strb	r3, [r5, #24]
 800fe18:	e7be      	b.n	800fd98 <USBH_Get_CfgDesc+0x18>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fe1a:	7941      	ldrb	r1, [r0, #5]
 800fe1c:	f00e fc90 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fe20:	2801      	cmp	r0, #1
 800fe22:	f000 80ee 	beq.w	8010002 <USBH_Get_CfgDesc+0x282>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fe26:	2804      	cmp	r0, #4
 800fe28:	d001      	beq.n	800fe2e <USBH_Get_CfgDesc+0xae>
 800fe2a:	2802      	cmp	r0, #2
 800fe2c:	d1b3      	bne.n	800fd96 <USBH_Get_CfgDesc+0x16>
          phost->Control.state = CTRL_ERROR;
 800fe2e:	230b      	movs	r3, #11
 800fe30:	2001      	movs	r0, #1
 800fe32:	762b      	strb	r3, [r5, #24]
 800fe34:	e7b0      	b.n	800fd98 <USBH_Get_CfgDesc+0x18>
      phost->Control.timer = (uint16_t)phost->Timer;
 800fe36:	f8d0 2534 	ldr.w	r2, [r0, #1332]	; 0x534
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fe3a:	7903      	ldrb	r3, [r0, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 800fe3c:	81c2      	strh	r2, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fe3e:	6881      	ldr	r1, [r0, #8]
 800fe40:	8982      	ldrh	r2, [r0, #12]
 800fe42:	f000 fdc1 	bl	80109c8 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fe46:	2304      	movs	r3, #4
 800fe48:	2001      	movs	r0, #1
 800fe4a:	762b      	strb	r3, [r5, #24]
 800fe4c:	e7a4      	b.n	800fd98 <USBH_Get_CfgDesc+0x18>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fe4e:	7901      	ldrb	r1, [r0, #4]
 800fe50:	f00e fc76 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fe54:	2801      	cmp	r0, #1
 800fe56:	d054      	beq.n	800ff02 <USBH_Get_CfgDesc+0x182>
      if (URB_Status == USBH_URB_STALL)
 800fe58:	2805      	cmp	r0, #5
 800fe5a:	d037      	beq.n	800fecc <USBH_Get_CfgDesc+0x14c>
        if (URB_Status == USBH_URB_ERROR)
 800fe5c:	2804      	cmp	r0, #4
 800fe5e:	d19a      	bne.n	800fd96 <USBH_Get_CfgDesc+0x16>
 800fe60:	e7e5      	b.n	800fe2e <USBH_Get_CfgDesc+0xae>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fe62:	2401      	movs	r4, #1
 800fe64:	7943      	ldrb	r3, [r0, #5]
 800fe66:	8982      	ldrh	r2, [r0, #12]
 800fe68:	6881      	ldr	r1, [r0, #8]
 800fe6a:	9400      	str	r4, [sp, #0]
 800fe6c:	f000 fd94 	bl	8010998 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800fe70:	f8d5 2534 	ldr.w	r2, [r5, #1332]	; 0x534
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fe74:	2306      	movs	r3, #6
 800fe76:	4620      	mov	r0, r4
      phost->Control.timer = (uint16_t)phost->Timer;
 800fe78:	81ea      	strh	r2, [r5, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fe7a:	762b      	strb	r3, [r5, #24]
 800fe7c:	e78c      	b.n	800fd98 <USBH_Get_CfgDesc+0x18>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fe7e:	7941      	ldrb	r1, [r0, #5]
 800fe80:	f00e fc5e 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fe84:	2801      	cmp	r0, #1
 800fe86:	f000 80b8 	beq.w	800fffa <USBH_Get_CfgDesc+0x27a>
      else if (URB_Status == USBH_URB_STALL)
 800fe8a:	2805      	cmp	r0, #5
 800fe8c:	d01e      	beq.n	800fecc <USBH_Get_CfgDesc+0x14c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fe8e:	2802      	cmp	r0, #2
 800fe90:	f000 80be 	beq.w	8010010 <USBH_Get_CfgDesc+0x290>
        if (URB_Status == USBH_URB_ERROR)
 800fe94:	2804      	cmp	r0, #4
 800fe96:	f47f af7e 	bne.w	800fd96 <USBH_Get_CfgDesc+0x16>
          phost->Control.state = CTRL_ERROR;
 800fe9a:	230b      	movs	r3, #11
 800fe9c:	762b      	strb	r3, [r5, #24]
 800fe9e:	e7af      	b.n	800fe00 <USBH_Get_CfgDesc+0x80>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800fea0:	2200      	movs	r2, #0
 800fea2:	7903      	ldrb	r3, [r0, #4]
 800fea4:	4611      	mov	r1, r2
 800fea6:	f000 fd8f 	bl	80109c8 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800feaa:	f8d5 2534 	ldr.w	r2, [r5, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800feae:	2308      	movs	r3, #8
 800feb0:	2001      	movs	r0, #1
      phost->Control.timer = (uint16_t)phost->Timer;
 800feb2:	81ea      	strh	r2, [r5, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800feb4:	762b      	strb	r3, [r5, #24]
 800feb6:	e76f      	b.n	800fd98 <USBH_Get_CfgDesc+0x18>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800feb8:	7901      	ldrb	r1, [r0, #4]
 800feba:	f00e fc41 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800febe:	2801      	cmp	r0, #1
 800fec0:	d023      	beq.n	800ff0a <USBH_Get_CfgDesc+0x18a>
      else if (URB_Status == USBH_URB_ERROR)
 800fec2:	2804      	cmp	r0, #4
 800fec4:	d0b3      	beq.n	800fe2e <USBH_Get_CfgDesc+0xae>
        if (URB_Status == USBH_URB_STALL)
 800fec6:	2805      	cmp	r0, #5
 800fec8:	f47f af65 	bne.w	800fd96 <USBH_Get_CfgDesc+0x16>
        phost->RequestState = CMD_SEND;
 800fecc:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 800fece:	2300      	movs	r3, #0
        status = USBH_NOT_SUPPORTED;
 800fed0:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 800fed2:	70aa      	strb	r2, [r5, #2]
        phost->Control.state = CTRL_IDLE;
 800fed4:	762b      	strb	r3, [r5, #24]
 800fed6:	e75f      	b.n	800fd98 <USBH_Get_CfgDesc+0x18>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800fed8:	2200      	movs	r2, #0
 800feda:	2401      	movs	r4, #1
 800fedc:	7943      	ldrb	r3, [r0, #5]
 800fede:	4611      	mov	r1, r2
 800fee0:	9400      	str	r4, [sp, #0]
 800fee2:	f000 fd59 	bl	8010998 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800fee6:	f8d5 2534 	ldr.w	r2, [r5, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800feea:	230a      	movs	r3, #10
 800feec:	4620      	mov	r0, r4
      phost->Control.timer = (uint16_t)phost->Timer;
 800feee:	81ea      	strh	r2, [r5, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fef0:	762b      	strb	r3, [r5, #24]
 800fef2:	e751      	b.n	800fd98 <USBH_Get_CfgDesc+0x18>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fef4:	7941      	ldrb	r1, [r0, #5]
 800fef6:	f00e fc23 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fefa:	2801      	cmp	r0, #1
 800fefc:	d005      	beq.n	800ff0a <USBH_Get_CfgDesc+0x18a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fefe:	2802      	cmp	r0, #2
 800ff00:	d1ac      	bne.n	800fe5c <USBH_Get_CfgDesc+0xdc>
            phost->Control.state = CTRL_STATUS_OUT;
 800ff02:	2309      	movs	r3, #9
 800ff04:	2001      	movs	r0, #1
 800ff06:	762b      	strb	r3, [r5, #24]
 800ff08:	e746      	b.n	800fd98 <USBH_Get_CfgDesc+0x18>
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ff0a:	7f2a      	ldrb	r2, [r5, #28]
        phost->RequestState = CMD_SEND;
 800ff0c:	2101      	movs	r1, #1
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ff0e:	7f6b      	ldrb	r3, [r5, #29]
        phost->Control.state = CTRL_IDLE;
 800ff10:	2700      	movs	r7, #0
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ff12:	8be8      	ldrh	r0, [r5, #30]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ff14:	2e09      	cmp	r6, #9
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ff16:	f885 2338 	strb.w	r2, [r5, #824]	; 0x338
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ff1a:	f885 3339 	strb.w	r3, [r5, #825]	; 0x339
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ff1e:	6a2a      	ldr	r2, [r5, #32]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ff20:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
        phost->RequestState = CMD_SEND;
 800ff24:	70a9      	strb	r1, [r5, #2]
        phost->Control.state = CTRL_IDLE;
 800ff26:	762f      	strb	r7, [r5, #24]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ff28:	f8a5 033a 	strh.w	r0, [r5, #826]	; 0x33a
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ff2c:	f8c5 233c 	str.w	r2, [r5, #828]	; 0x33c
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ff30:	f885 3340 	strb.w	r3, [r5, #832]	; 0x340
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ff34:	d913      	bls.n	800ff5e <USBH_Get_CfgDesc+0x1de>
 800ff36:	46ac      	mov	ip, r5
    ptr = USB_LEN_CFG_DESC;
 800ff38:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ff3a:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 800ff3e:	b2fe      	uxtb	r6, r7
 800ff40:	2e09      	cmp	r6, #9
 800ff42:	bf8c      	ite	hi
 800ff44:	2600      	movhi	r6, #0
 800ff46:	2601      	movls	r6, #1
 800ff48:	e007      	b.n	800ff5a <USBH_Get_CfgDesc+0x1da>
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ff4a:	b146      	cbz	r6, 800ff5e <USBH_Get_CfgDesc+0x1de>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ff4c:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ff4e:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ff50:	4413      	add	r3, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ff52:	7861      	ldrb	r1, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ff54:	b29a      	uxth	r2, r3
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ff56:	2904      	cmp	r1, #4
 800ff58:	d005      	beq.n	800ff66 <USBH_Get_CfgDesc+0x1e6>
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ff5a:	4290      	cmp	r0, r2
 800ff5c:	d8f5      	bhi.n	800ff4a <USBH_Get_CfgDesc+0x1ca>
        status = USBH_NOT_SUPPORTED;
 800ff5e:	2000      	movs	r0, #0
}
 800ff60:	b003      	add	sp, #12
 800ff62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ff66:	7823      	ldrb	r3, [r4, #0]
        ep_ix = 0U;
 800ff68:	2100      	movs	r1, #0
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ff6a:	fb0e f907 	mul.w	r9, lr, r7
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ff6e:	f88c 3342 	strb.w	r3, [ip, #834]	; 0x342
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ff72:	7863      	ldrb	r3, [r4, #1]
 800ff74:	f88c 3343 	strb.w	r3, [ip, #835]	; 0x343
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ff78:	78a3      	ldrb	r3, [r4, #2]
 800ff7a:	f88c 3344 	strb.w	r3, [ip, #836]	; 0x344
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ff7e:	78e3      	ldrb	r3, [r4, #3]
 800ff80:	f88c 3345 	strb.w	r3, [ip, #837]	; 0x345
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ff84:	f894 8004 	ldrb.w	r8, [r4, #4]
 800ff88:	f88c 8346 	strb.w	r8, [ip, #838]	; 0x346
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ff8c:	7963      	ldrb	r3, [r4, #5]
 800ff8e:	f88c 3347 	strb.w	r3, [ip, #839]	; 0x347
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ff92:	79a3      	ldrb	r3, [r4, #6]
 800ff94:	f88c 3348 	strb.w	r3, [ip, #840]	; 0x348
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ff98:	79e3      	ldrb	r3, [r4, #7]
 800ff9a:	f88c 3349 	strb.w	r3, [ip, #841]	; 0x349
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ff9e:	7a23      	ldrb	r3, [r4, #8]
 800ffa0:	f88c 334a 	strb.w	r3, [ip, #842]	; 0x34a
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ffa4:	4290      	cmp	r0, r2
 800ffa6:	d922      	bls.n	800ffee <USBH_Get_CfgDesc+0x26e>
 800ffa8:	4541      	cmp	r1, r8
 800ffaa:	d220      	bcs.n	800ffee <USBH_Get_CfgDesc+0x26e>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ffac:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ffae:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ffb0:	4413      	add	r3, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ffb2:	7866      	ldrb	r6, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ffb4:	b29a      	uxth	r2, r3
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ffb6:	2e05      	cmp	r6, #5
 800ffb8:	d1f4      	bne.n	800ffa4 <USBH_Get_CfgDesc+0x224>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ffba:	3101      	adds	r1, #1
 800ffbc:	7826      	ldrb	r6, [r4, #0]
 800ffbe:	eb09 03c1 	add.w	r3, r9, r1, lsl #3
            ep_ix++;
 800ffc2:	b2c9      	uxtb	r1, r1
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ffc4:	442b      	add	r3, r5
 800ffc6:	f883 6344 	strb.w	r6, [r3, #836]	; 0x344
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ffca:	7866      	ldrb	r6, [r4, #1]
 800ffcc:	f883 6345 	strb.w	r6, [r3, #837]	; 0x345
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ffd0:	78a6      	ldrb	r6, [r4, #2]
 800ffd2:	f883 6346 	strb.w	r6, [r3, #838]	; 0x346
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ffd6:	78e6      	ldrb	r6, [r4, #3]
 800ffd8:	f883 6347 	strb.w	r6, [r3, #839]	; 0x347
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ffdc:	88a6      	ldrh	r6, [r4, #4]
 800ffde:	f8a3 6348 	strh.w	r6, [r3, #840]	; 0x348
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ffe2:	79a6      	ldrb	r6, [r4, #6]
 800ffe4:	f883 634a 	strb.w	r6, [r3, #842]	; 0x34a
 800ffe8:	f89c 8346 	ldrb.w	r8, [ip, #838]	; 0x346
 800ffec:	e7da      	b.n	800ffa4 <USBH_Get_CfgDesc+0x224>
 800ffee:	3701      	adds	r7, #1
 800fff0:	f10c 0c2a 	add.w	ip, ip, #42	; 0x2a
 800fff4:	e7a3      	b.n	800ff3e <USBH_Get_CfgDesc+0x1be>
          if (direction == USB_D2H)
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	db83      	blt.n	800ff02 <USBH_Get_CfgDesc+0x182>
            phost->Control.state = CTRL_STATUS_IN;
 800fffa:	2307      	movs	r3, #7
 800fffc:	2001      	movs	r0, #1
 800fffe:	762b      	strb	r3, [r5, #24]
 8010000:	e6ca      	b.n	800fd98 <USBH_Get_CfgDesc+0x18>
        if (phost->Control.setup.b.wLength.w != 0U)
 8010002:	8aea      	ldrh	r2, [r5, #22]
 8010004:	f995 3010 	ldrsb.w	r3, [r5, #16]
 8010008:	2a00      	cmp	r2, #0
 801000a:	d0f4      	beq.n	800fff6 <USBH_Get_CfgDesc+0x276>
          if (direction == USB_D2H)
 801000c:	2b00      	cmp	r3, #0
 801000e:	db08      	blt.n	8010022 <USBH_Get_CfgDesc+0x2a2>
            phost->Control.state = CTRL_DATA_OUT;
 8010010:	2305      	movs	r3, #5
 8010012:	2001      	movs	r0, #1
 8010014:	762b      	strb	r3, [r5, #24]
 8010016:	e6bf      	b.n	800fd98 <USBH_Get_CfgDesc+0x18>
        phost->Control.state = CTRL_SETUP;
 8010018:	2301      	movs	r3, #1
 801001a:	7603      	strb	r3, [r0, #24]
        phost->RequestState = CMD_SEND;
 801001c:	4618      	mov	r0, r3
 801001e:	70ab      	strb	r3, [r5, #2]
 8010020:	e6ba      	b.n	800fd98 <USBH_Get_CfgDesc+0x18>
            phost->Control.state = CTRL_DATA_IN;
 8010022:	2303      	movs	r3, #3
 8010024:	762b      	strb	r3, [r5, #24]
 8010026:	e6b7      	b.n	800fd98 <USBH_Get_CfgDesc+0x18>
 8010028:	02000680 	.word	0x02000680

0801002c <USBH_Get_StringDesc>:
{
 801002c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (phost->RequestState == CMD_SEND)
 801002e:	7885      	ldrb	r5, [r0, #2]
{
 8010030:	b085      	sub	sp, #20
 8010032:	4604      	mov	r4, r0
                                   phost->device.Data, length)) == USBH_OK)
 8010034:	f500 768e 	add.w	r6, r0, #284	; 0x11c
  if (phost->RequestState == CMD_SEND)
 8010038:	2d01      	cmp	r5, #1
 801003a:	d010      	beq.n	801005e <USBH_Get_StringDesc+0x32>
  switch (phost->RequestState)
 801003c:	2d02      	cmp	r5, #2
 801003e:	d002      	beq.n	8010046 <USBH_Get_StringDesc+0x1a>
  status = USBH_BUSY;
 8010040:	2001      	movs	r0, #1
}
 8010042:	b005      	add	sp, #20
 8010044:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (phost->Control.state)
 8010046:	7e01      	ldrb	r1, [r0, #24]
 8010048:	3901      	subs	r1, #1
 801004a:	290a      	cmp	r1, #10
 801004c:	d8f8      	bhi.n	8010040 <USBH_Get_StringDesc+0x14>
 801004e:	e8df f001 	tbb	[pc, r1]
 8010052:	3e34      	.short	0x3e34
 8010054:	74655a4d 	.word	0x74655a4d
 8010058:	b5a69184 	.word	0xb5a69184
 801005c:	19          	.byte	0x19
 801005d:	00          	.byte	0x00
  if ((status = USBH_GetDescriptor(phost,
 801005e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    phost->Control.setup.b.wLength.w = length;
 8010062:	82c3      	strh	r3, [r0, #22]
      phost->Control.buff = buff;
 8010064:	6086      	str	r6, [r0, #8]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8010066:	f44f 6cd0 	mov.w	ip, #1664	; 0x680
    phost->Control.setup.b.wValue.w = value_idx;
 801006a:	8241      	strh	r1, [r0, #18]
      phost->Control.setup.b.wIndex.w = 0x0409U;
 801006c:	f240 4709 	movw	r7, #1033	; 0x409
      phost->Control.length = length;
 8010070:	8183      	strh	r3, [r0, #12]
      phost->RequestState = CMD_WAIT;
 8010072:	2202      	movs	r2, #2
      status = USBH_BUSY;
 8010074:	4628      	mov	r0, r5
      phost->Control.state = CTRL_SETUP;
 8010076:	7625      	strb	r5, [r4, #24]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8010078:	f8a4 c010 	strh.w	ip, [r4, #16]
      phost->Control.setup.b.wIndex.w = 0x0409U;
 801007c:	82a7      	strh	r7, [r4, #20]
      phost->RequestState = CMD_WAIT;
 801007e:	70a2      	strb	r2, [r4, #2]
}
 8010080:	b005      	add	sp, #20
 8010082:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010084:	7e63      	ldrb	r3, [r4, #25]
 8010086:	3301      	adds	r3, #1
 8010088:	b2db      	uxtb	r3, r3
 801008a:	2b02      	cmp	r3, #2
 801008c:	7663      	strb	r3, [r4, #25]
 801008e:	f240 80d3 	bls.w	8010238 <USBH_Get_StringDesc+0x20c>
        phost->Control.errorcount = 0U;
 8010092:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010094:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 8010098:	2106      	movs	r1, #6
 801009a:	4620      	mov	r0, r4
 801009c:	4798      	blx	r3
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801009e:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 80100a0:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80100a2:	4620      	mov	r0, r4
 80100a4:	f000 fd14 	bl	8010ad0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80100a8:	7921      	ldrb	r1, [r4, #4]
 80100aa:	4620      	mov	r0, r4
 80100ac:	f000 fd10 	bl	8010ad0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80100b0:	7025      	strb	r5, [r4, #0]
        phost->RequestState = CMD_SEND;
 80100b2:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 80100b4:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 80100b6:	70a3      	strb	r3, [r4, #2]
 80100b8:	e7c3      	b.n	8010042 <USBH_Get_StringDesc+0x16>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80100ba:	7962      	ldrb	r2, [r4, #5]
 80100bc:	f104 0110 	add.w	r1, r4, #16
 80100c0:	4620      	mov	r0, r4
 80100c2:	f000 fc59 	bl	8010978 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 80100c6:	2302      	movs	r3, #2
 80100c8:	2001      	movs	r0, #1
 80100ca:	7623      	strb	r3, [r4, #24]
 80100cc:	e7b9      	b.n	8010042 <USBH_Get_StringDesc+0x16>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80100ce:	7961      	ldrb	r1, [r4, #5]
 80100d0:	4620      	mov	r0, r4
 80100d2:	f00e fb35 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80100d6:	2801      	cmp	r0, #1
 80100d8:	f000 80a3 	beq.w	8010222 <USBH_Get_StringDesc+0x1f6>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80100dc:	2804      	cmp	r0, #4
 80100de:	d001      	beq.n	80100e4 <USBH_Get_StringDesc+0xb8>
 80100e0:	2802      	cmp	r0, #2
 80100e2:	d1ad      	bne.n	8010040 <USBH_Get_StringDesc+0x14>
          phost->Control.state = CTRL_ERROR;
 80100e4:	230b      	movs	r3, #11
 80100e6:	2001      	movs	r0, #1
 80100e8:	7623      	strb	r3, [r4, #24]
 80100ea:	e7aa      	b.n	8010042 <USBH_Get_StringDesc+0x16>
      phost->Control.timer = (uint16_t)phost->Timer;
 80100ec:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80100f0:	4620      	mov	r0, r4
 80100f2:	7923      	ldrb	r3, [r4, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 80100f4:	81e2      	strh	r2, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80100f6:	68a1      	ldr	r1, [r4, #8]
 80100f8:	89a2      	ldrh	r2, [r4, #12]
 80100fa:	f000 fc65 	bl	80109c8 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 80100fe:	2304      	movs	r3, #4
 8010100:	2001      	movs	r0, #1
 8010102:	7623      	strb	r3, [r4, #24]
 8010104:	e79d      	b.n	8010042 <USBH_Get_StringDesc+0x16>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010106:	7921      	ldrb	r1, [r4, #4]
 8010108:	4620      	mov	r0, r4
 801010a:	f00e fb19 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 801010e:	2801      	cmp	r0, #1
 8010110:	d060      	beq.n	80101d4 <USBH_Get_StringDesc+0x1a8>
      if (URB_Status == USBH_URB_STALL)
 8010112:	2805      	cmp	r0, #5
 8010114:	d03d      	beq.n	8010192 <USBH_Get_StringDesc+0x166>
        if (URB_Status == USBH_URB_ERROR)
 8010116:	2804      	cmp	r0, #4
 8010118:	d192      	bne.n	8010040 <USBH_Get_StringDesc+0x14>
 801011a:	e7e3      	b.n	80100e4 <USBH_Get_StringDesc+0xb8>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801011c:	2501      	movs	r5, #1
 801011e:	7963      	ldrb	r3, [r4, #5]
 8010120:	89a2      	ldrh	r2, [r4, #12]
 8010122:	4620      	mov	r0, r4
 8010124:	68a1      	ldr	r1, [r4, #8]
 8010126:	9500      	str	r5, [sp, #0]
 8010128:	f000 fc36 	bl	8010998 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 801012c:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010130:	2306      	movs	r3, #6
 8010132:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 8010134:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010136:	7623      	strb	r3, [r4, #24]
 8010138:	e783      	b.n	8010042 <USBH_Get_StringDesc+0x16>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801013a:	7961      	ldrb	r1, [r4, #5]
 801013c:	4620      	mov	r0, r4
 801013e:	f00e faff 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010142:	2801      	cmp	r0, #1
 8010144:	d069      	beq.n	801021a <USBH_Get_StringDesc+0x1ee>
      else if (URB_Status == USBH_URB_STALL)
 8010146:	2805      	cmp	r0, #5
 8010148:	d023      	beq.n	8010192 <USBH_Get_StringDesc+0x166>
      else if (URB_Status == USBH_URB_NOTREADY)
 801014a:	2802      	cmp	r0, #2
 801014c:	d070      	beq.n	8010230 <USBH_Get_StringDesc+0x204>
        if (URB_Status == USBH_URB_ERROR)
 801014e:	2804      	cmp	r0, #4
 8010150:	f47f af76 	bne.w	8010040 <USBH_Get_StringDesc+0x14>
          phost->Control.state = CTRL_ERROR;
 8010154:	230b      	movs	r3, #11
 8010156:	7623      	strb	r3, [r4, #24]
 8010158:	e7ab      	b.n	80100b2 <USBH_Get_StringDesc+0x86>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 801015a:	2200      	movs	r2, #0
 801015c:	7923      	ldrb	r3, [r4, #4]
 801015e:	4620      	mov	r0, r4
 8010160:	4611      	mov	r1, r2
 8010162:	f000 fc31 	bl	80109c8 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8010166:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801016a:	2308      	movs	r3, #8
 801016c:	2001      	movs	r0, #1
      phost->Control.timer = (uint16_t)phost->Timer;
 801016e:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010170:	7623      	strb	r3, [r4, #24]
 8010172:	e766      	b.n	8010042 <USBH_Get_StringDesc+0x16>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010174:	7921      	ldrb	r1, [r4, #4]
 8010176:	4620      	mov	r0, r4
 8010178:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801017c:	f00e fae0 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010180:	2801      	cmp	r0, #1
 8010182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010186:	d029      	beq.n	80101dc <USBH_Get_StringDesc+0x1b0>
      else if (URB_Status == USBH_URB_ERROR)
 8010188:	2804      	cmp	r0, #4
 801018a:	d0ab      	beq.n	80100e4 <USBH_Get_StringDesc+0xb8>
        if (URB_Status == USBH_URB_STALL)
 801018c:	2805      	cmp	r0, #5
 801018e:	f47f af57 	bne.w	8010040 <USBH_Get_StringDesc+0x14>
        phost->RequestState = CMD_SEND;
 8010192:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 8010194:	2300      	movs	r3, #0
        status = USBH_NOT_SUPPORTED;
 8010196:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 8010198:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 801019a:	7623      	strb	r3, [r4, #24]
 801019c:	e751      	b.n	8010042 <USBH_Get_StringDesc+0x16>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801019e:	2200      	movs	r2, #0
 80101a0:	2501      	movs	r5, #1
 80101a2:	7963      	ldrb	r3, [r4, #5]
 80101a4:	4620      	mov	r0, r4
 80101a6:	4611      	mov	r1, r2
 80101a8:	9500      	str	r5, [sp, #0]
 80101aa:	f000 fbf5 	bl	8010998 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80101ae:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80101b2:	230a      	movs	r3, #10
 80101b4:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 80101b6:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80101b8:	7623      	strb	r3, [r4, #24]
 80101ba:	e742      	b.n	8010042 <USBH_Get_StringDesc+0x16>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80101bc:	7961      	ldrb	r1, [r4, #5]
 80101be:	4620      	mov	r0, r4
 80101c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80101c4:	f00e fabc 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80101c8:	2801      	cmp	r0, #1
 80101ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101ce:	d005      	beq.n	80101dc <USBH_Get_StringDesc+0x1b0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80101d0:	2802      	cmp	r0, #2
 80101d2:	d1a0      	bne.n	8010116 <USBH_Get_StringDesc+0xea>
            phost->Control.state = CTRL_STATUS_OUT;
 80101d4:	2309      	movs	r3, #9
 80101d6:	2001      	movs	r0, #1
 80101d8:	7623      	strb	r3, [r4, #24]
 80101da:	e732      	b.n	8010042 <USBH_Get_StringDesc+0x16>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 80101dc:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
        phost->RequestState = CMD_SEND;
 80101e0:	2501      	movs	r5, #1
        phost->Control.state = CTRL_IDLE;
 80101e2:	2000      	movs	r0, #0
  if (psrc[1] == USB_DESC_TYPE_STRING)
 80101e4:	2903      	cmp	r1, #3
        phost->RequestState = CMD_SEND;
 80101e6:	70a5      	strb	r5, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 80101e8:	7620      	strb	r0, [r4, #24]
  if (psrc[1] == USB_DESC_TYPE_STRING)
 80101ea:	f47f af2a 	bne.w	8010042 <USBH_Get_StringDesc+0x16>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80101ee:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
 80101f2:	3902      	subs	r1, #2
 80101f4:	428b      	cmp	r3, r1
 80101f6:	bf28      	it	cs
 80101f8:	460b      	movcs	r3, r1
 80101fa:	b299      	uxth	r1, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 80101fc:	b13b      	cbz	r3, 801020e <USBH_Get_StringDesc+0x1e2>
      *pdest =  psrc[idx];
 80101fe:	1833      	adds	r3, r6, r0
    for (idx = 0U; idx < strlength; idx += 2U)
 8010200:	3002      	adds	r0, #2
 8010202:	b280      	uxth	r0, r0
      *pdest =  psrc[idx];
 8010204:	789b      	ldrb	r3, [r3, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 8010206:	4281      	cmp	r1, r0
      *pdest =  psrc[idx];
 8010208:	f802 3b01 	strb.w	r3, [r2], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 801020c:	d8f7      	bhi.n	80101fe <USBH_Get_StringDesc+0x1d2>
    *pdest = 0U; /* mark end of string */
 801020e:	2000      	movs	r0, #0
 8010210:	7010      	strb	r0, [r2, #0]
}
 8010212:	b005      	add	sp, #20
 8010214:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (direction == USB_D2H)
 8010216:	2a00      	cmp	r2, #0
 8010218:	dbdc      	blt.n	80101d4 <USBH_Get_StringDesc+0x1a8>
            phost->Control.state = CTRL_STATUS_IN;
 801021a:	2307      	movs	r3, #7
 801021c:	2001      	movs	r0, #1
 801021e:	7623      	strb	r3, [r4, #24]
 8010220:	e70f      	b.n	8010042 <USBH_Get_StringDesc+0x16>
        if (phost->Control.setup.b.wLength.w != 0U)
 8010222:	8ae3      	ldrh	r3, [r4, #22]
 8010224:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d0f4      	beq.n	8010216 <USBH_Get_StringDesc+0x1ea>
          if (direction == USB_D2H)
 801022c:	2a00      	cmp	r2, #0
 801022e:	db08      	blt.n	8010242 <USBH_Get_StringDesc+0x216>
            phost->Control.state = CTRL_DATA_OUT;
 8010230:	2305      	movs	r3, #5
 8010232:	2001      	movs	r0, #1
 8010234:	7623      	strb	r3, [r4, #24]
 8010236:	e704      	b.n	8010042 <USBH_Get_StringDesc+0x16>
        phost->Control.state = CTRL_SETUP;
 8010238:	2301      	movs	r3, #1
 801023a:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 801023c:	4618      	mov	r0, r3
 801023e:	70a3      	strb	r3, [r4, #2]
 8010240:	e6ff      	b.n	8010042 <USBH_Get_StringDesc+0x16>
            phost->Control.state = CTRL_DATA_IN;
 8010242:	2303      	movs	r3, #3
 8010244:	7623      	strb	r3, [r4, #24]
 8010246:	e6fc      	b.n	8010042 <USBH_Get_StringDesc+0x16>

08010248 <USBH_SetAddress>:
{
 8010248:	b530      	push	{r4, r5, lr}
 801024a:	4603      	mov	r3, r0
  if (phost->RequestState == CMD_SEND)
 801024c:	7880      	ldrb	r0, [r0, #2]
{
 801024e:	b083      	sub	sp, #12
  if (phost->RequestState == CMD_SEND)
 8010250:	2801      	cmp	r0, #1
 8010252:	d011      	beq.n	8010278 <USBH_SetAddress+0x30>
  switch (phost->RequestState)
 8010254:	2802      	cmp	r0, #2
 8010256:	d002      	beq.n	801025e <USBH_SetAddress+0x16>
  status = USBH_BUSY;
 8010258:	2001      	movs	r0, #1
}
 801025a:	b003      	add	sp, #12
 801025c:	bd30      	pop	{r4, r5, pc}
 801025e:	461c      	mov	r4, r3
  switch (phost->Control.state)
 8010260:	7e1b      	ldrb	r3, [r3, #24]
 8010262:	3b01      	subs	r3, #1
 8010264:	2b0a      	cmp	r3, #10
 8010266:	d8f7      	bhi.n	8010258 <USBH_SetAddress+0x10>
 8010268:	e8df f003 	tbb	[pc, r3]
 801026c:	5447382e 	.word	0x5447382e
 8010270:	8b7e6e5f 	.word	0x8b7e6e5f
 8010274:	ac9d      	.short	0xac9d
 8010276:	13          	.byte	0x13
 8010277:	00          	.byte	0x00
    phost->Control.setup.b.wIndex.w = 0U;
 8010278:	2200      	movs	r2, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 801027a:	f44f 65a0 	mov.w	r5, #1280	; 0x500
      phost->RequestState = CMD_WAIT;
 801027e:	2402      	movs	r4, #2
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8010280:	8259      	strh	r1, [r3, #18]
      phost->Control.state = CTRL_SETUP;
 8010282:	7618      	strb	r0, [r3, #24]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010284:	821d      	strh	r5, [r3, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8010286:	615a      	str	r2, [r3, #20]
      phost->Control.buff = buff;
 8010288:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801028a:	819a      	strh	r2, [r3, #12]
      phost->RequestState = CMD_WAIT;
 801028c:	709c      	strb	r4, [r3, #2]
}
 801028e:	b003      	add	sp, #12
 8010290:	bd30      	pop	{r4, r5, pc}
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010292:	7e63      	ldrb	r3, [r4, #25]
 8010294:	3301      	adds	r3, #1
 8010296:	b2db      	uxtb	r3, r3
 8010298:	2b02      	cmp	r3, #2
 801029a:	7663      	strb	r3, [r4, #25]
 801029c:	f240 80b1 	bls.w	8010402 <USBH_SetAddress+0x1ba>
        phost->Control.errorcount = 0U;
 80102a0:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80102a2:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 80102a6:	2106      	movs	r1, #6
 80102a8:	4620      	mov	r0, r4
 80102aa:	4798      	blx	r3
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80102ac:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 80102ae:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80102b0:	4620      	mov	r0, r4
 80102b2:	f000 fc0d 	bl	8010ad0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80102b6:	7921      	ldrb	r1, [r4, #4]
 80102b8:	4620      	mov	r0, r4
 80102ba:	f000 fc09 	bl	8010ad0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80102be:	7025      	strb	r5, [r4, #0]
        phost->RequestState = CMD_SEND;
 80102c0:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 80102c2:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 80102c4:	70a3      	strb	r3, [r4, #2]
 80102c6:	e7c8      	b.n	801025a <USBH_SetAddress+0x12>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80102c8:	7962      	ldrb	r2, [r4, #5]
 80102ca:	f104 0110 	add.w	r1, r4, #16
 80102ce:	4620      	mov	r0, r4
 80102d0:	f000 fb52 	bl	8010978 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 80102d4:	2302      	movs	r3, #2
 80102d6:	2001      	movs	r0, #1
 80102d8:	7623      	strb	r3, [r4, #24]
 80102da:	e7be      	b.n	801025a <USBH_SetAddress+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80102dc:	7961      	ldrb	r1, [r4, #5]
 80102de:	4620      	mov	r0, r4
 80102e0:	f00e fa2e 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80102e4:	2801      	cmp	r0, #1
 80102e6:	f000 8081 	beq.w	80103ec <USBH_SetAddress+0x1a4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80102ea:	2804      	cmp	r0, #4
 80102ec:	d001      	beq.n	80102f2 <USBH_SetAddress+0xaa>
 80102ee:	2802      	cmp	r0, #2
 80102f0:	d1b2      	bne.n	8010258 <USBH_SetAddress+0x10>
          phost->Control.state = CTRL_ERROR;
 80102f2:	230b      	movs	r3, #11
 80102f4:	2001      	movs	r0, #1
 80102f6:	7623      	strb	r3, [r4, #24]
 80102f8:	e7af      	b.n	801025a <USBH_SetAddress+0x12>
      phost->Control.timer = (uint16_t)phost->Timer;
 80102fa:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80102fe:	4620      	mov	r0, r4
 8010300:	7923      	ldrb	r3, [r4, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 8010302:	81e2      	strh	r2, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8010304:	68a1      	ldr	r1, [r4, #8]
 8010306:	89a2      	ldrh	r2, [r4, #12]
 8010308:	f000 fb5e 	bl	80109c8 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 801030c:	2304      	movs	r3, #4
 801030e:	2001      	movs	r0, #1
 8010310:	7623      	strb	r3, [r4, #24]
 8010312:	e7a2      	b.n	801025a <USBH_SetAddress+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010314:	7921      	ldrb	r1, [r4, #4]
 8010316:	4620      	mov	r0, r4
 8010318:	f00e fa12 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 801031c:	2801      	cmp	r0, #1
 801031e:	d059      	beq.n	80103d4 <USBH_SetAddress+0x18c>
      if (URB_Status == USBH_URB_STALL)
 8010320:	2805      	cmp	r0, #5
 8010322:	d039      	beq.n	8010398 <USBH_SetAddress+0x150>
        if (URB_Status == USBH_URB_ERROR)
 8010324:	2804      	cmp	r0, #4
 8010326:	d197      	bne.n	8010258 <USBH_SetAddress+0x10>
 8010328:	e7e3      	b.n	80102f2 <USBH_SetAddress+0xaa>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801032a:	2501      	movs	r5, #1
 801032c:	7963      	ldrb	r3, [r4, #5]
 801032e:	89a2      	ldrh	r2, [r4, #12]
 8010330:	4620      	mov	r0, r4
 8010332:	68a1      	ldr	r1, [r4, #8]
 8010334:	9500      	str	r5, [sp, #0]
 8010336:	f000 fb2f 	bl	8010998 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 801033a:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801033e:	2306      	movs	r3, #6
 8010340:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 8010342:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010344:	7623      	strb	r3, [r4, #24]
 8010346:	e788      	b.n	801025a <USBH_SetAddress+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010348:	7961      	ldrb	r1, [r4, #5]
 801034a:	4620      	mov	r0, r4
 801034c:	f00e f9f8 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010350:	2801      	cmp	r0, #1
 8010352:	d047      	beq.n	80103e4 <USBH_SetAddress+0x19c>
      else if (URB_Status == USBH_URB_STALL)
 8010354:	2805      	cmp	r0, #5
 8010356:	d01f      	beq.n	8010398 <USBH_SetAddress+0x150>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010358:	2802      	cmp	r0, #2
 801035a:	d04e      	beq.n	80103fa <USBH_SetAddress+0x1b2>
        if (URB_Status == USBH_URB_ERROR)
 801035c:	2804      	cmp	r0, #4
 801035e:	f47f af7b 	bne.w	8010258 <USBH_SetAddress+0x10>
          phost->Control.state = CTRL_ERROR;
 8010362:	230b      	movs	r3, #11
 8010364:	7623      	strb	r3, [r4, #24]
 8010366:	e7ab      	b.n	80102c0 <USBH_SetAddress+0x78>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8010368:	2200      	movs	r2, #0
 801036a:	7923      	ldrb	r3, [r4, #4]
 801036c:	4620      	mov	r0, r4
 801036e:	4611      	mov	r1, r2
 8010370:	f000 fb2a 	bl	80109c8 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8010374:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010378:	2308      	movs	r3, #8
 801037a:	2001      	movs	r0, #1
      phost->Control.timer = (uint16_t)phost->Timer;
 801037c:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801037e:	7623      	strb	r3, [r4, #24]
 8010380:	e76b      	b.n	801025a <USBH_SetAddress+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010382:	7921      	ldrb	r1, [r4, #4]
 8010384:	4620      	mov	r0, r4
 8010386:	f00e f9db 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 801038a:	2801      	cmp	r0, #1
 801038c:	d026      	beq.n	80103dc <USBH_SetAddress+0x194>
      else if (URB_Status == USBH_URB_ERROR)
 801038e:	2804      	cmp	r0, #4
 8010390:	d0af      	beq.n	80102f2 <USBH_SetAddress+0xaa>
        if (URB_Status == USBH_URB_STALL)
 8010392:	2805      	cmp	r0, #5
 8010394:	f47f af60 	bne.w	8010258 <USBH_SetAddress+0x10>
        status = USBH_NOT_SUPPORTED;
 8010398:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 801039a:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 801039c:	2300      	movs	r3, #0
        phost->RequestState = CMD_SEND;
 801039e:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 80103a0:	7623      	strb	r3, [r4, #24]
}
 80103a2:	b003      	add	sp, #12
 80103a4:	bd30      	pop	{r4, r5, pc}
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80103a6:	2200      	movs	r2, #0
 80103a8:	2501      	movs	r5, #1
 80103aa:	7963      	ldrb	r3, [r4, #5]
 80103ac:	4620      	mov	r0, r4
 80103ae:	4611      	mov	r1, r2
 80103b0:	9500      	str	r5, [sp, #0]
 80103b2:	f000 faf1 	bl	8010998 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80103b6:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80103ba:	230a      	movs	r3, #10
 80103bc:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 80103be:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80103c0:	7623      	strb	r3, [r4, #24]
 80103c2:	e74a      	b.n	801025a <USBH_SetAddress+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80103c4:	7961      	ldrb	r1, [r4, #5]
 80103c6:	4620      	mov	r0, r4
 80103c8:	f00e f9ba 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80103cc:	2801      	cmp	r0, #1
 80103ce:	d005      	beq.n	80103dc <USBH_SetAddress+0x194>
      else if (URB_Status == USBH_URB_NOTREADY)
 80103d0:	2802      	cmp	r0, #2
 80103d2:	d1a7      	bne.n	8010324 <USBH_SetAddress+0xdc>
            phost->Control.state = CTRL_STATUS_OUT;
 80103d4:	2309      	movs	r3, #9
 80103d6:	2001      	movs	r0, #1
 80103d8:	7623      	strb	r3, [r4, #24]
 80103da:	e73e      	b.n	801025a <USBH_SetAddress+0x12>
        status = USBH_OK;
 80103dc:	2000      	movs	r0, #0
 80103de:	e7dc      	b.n	801039a <USBH_SetAddress+0x152>
          if (direction == USB_D2H)
 80103e0:	2a00      	cmp	r2, #0
 80103e2:	dbf7      	blt.n	80103d4 <USBH_SetAddress+0x18c>
            phost->Control.state = CTRL_STATUS_IN;
 80103e4:	2307      	movs	r3, #7
 80103e6:	2001      	movs	r0, #1
 80103e8:	7623      	strb	r3, [r4, #24]
 80103ea:	e736      	b.n	801025a <USBH_SetAddress+0x12>
        if (phost->Control.setup.b.wLength.w != 0U)
 80103ec:	8ae3      	ldrh	r3, [r4, #22]
 80103ee:	f994 2010 	ldrsb.w	r2, [r4, #16]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d0f4      	beq.n	80103e0 <USBH_SetAddress+0x198>
          if (direction == USB_D2H)
 80103f6:	2a00      	cmp	r2, #0
 80103f8:	db08      	blt.n	801040c <USBH_SetAddress+0x1c4>
            phost->Control.state = CTRL_DATA_OUT;
 80103fa:	2305      	movs	r3, #5
 80103fc:	2001      	movs	r0, #1
 80103fe:	7623      	strb	r3, [r4, #24]
 8010400:	e72b      	b.n	801025a <USBH_SetAddress+0x12>
        phost->Control.state = CTRL_SETUP;
 8010402:	2301      	movs	r3, #1
 8010404:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8010406:	4618      	mov	r0, r3
 8010408:	70a3      	strb	r3, [r4, #2]
 801040a:	e726      	b.n	801025a <USBH_SetAddress+0x12>
            phost->Control.state = CTRL_DATA_IN;
 801040c:	2303      	movs	r3, #3
 801040e:	7623      	strb	r3, [r4, #24]
 8010410:	e723      	b.n	801025a <USBH_SetAddress+0x12>
 8010412:	bf00      	nop

08010414 <USBH_SetCfg>:
{
 8010414:	b530      	push	{r4, r5, lr}
 8010416:	4603      	mov	r3, r0
  if (phost->RequestState == CMD_SEND)
 8010418:	7880      	ldrb	r0, [r0, #2]
{
 801041a:	b083      	sub	sp, #12
  if (phost->RequestState == CMD_SEND)
 801041c:	2801      	cmp	r0, #1
 801041e:	d011      	beq.n	8010444 <USBH_SetCfg+0x30>
  switch (phost->RequestState)
 8010420:	2802      	cmp	r0, #2
 8010422:	d002      	beq.n	801042a <USBH_SetCfg+0x16>
  status = USBH_BUSY;
 8010424:	2001      	movs	r0, #1
}
 8010426:	b003      	add	sp, #12
 8010428:	bd30      	pop	{r4, r5, pc}
 801042a:	461c      	mov	r4, r3
  switch (phost->Control.state)
 801042c:	7e1b      	ldrb	r3, [r3, #24]
 801042e:	3b01      	subs	r3, #1
 8010430:	2b0a      	cmp	r3, #10
 8010432:	d8f7      	bhi.n	8010424 <USBH_SetCfg+0x10>
 8010434:	e8df f003 	tbb	[pc, r3]
 8010438:	5447382e 	.word	0x5447382e
 801043c:	8b7e6e5f 	.word	0x8b7e6e5f
 8010440:	ac9d      	.short	0xac9d
 8010442:	13          	.byte	0x13
 8010443:	00          	.byte	0x00
    phost->Control.setup.b.wIndex.w = 0U;
 8010444:	2200      	movs	r2, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010446:	f44f 6510 	mov.w	r5, #2304	; 0x900
      phost->RequestState = CMD_WAIT;
 801044a:	2402      	movs	r4, #2
    phost->Control.setup.b.wValue.w = cfg_idx;
 801044c:	8259      	strh	r1, [r3, #18]
      phost->Control.state = CTRL_SETUP;
 801044e:	7618      	strb	r0, [r3, #24]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010450:	821d      	strh	r5, [r3, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8010452:	615a      	str	r2, [r3, #20]
      phost->Control.buff = buff;
 8010454:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010456:	819a      	strh	r2, [r3, #12]
      phost->RequestState = CMD_WAIT;
 8010458:	709c      	strb	r4, [r3, #2]
}
 801045a:	b003      	add	sp, #12
 801045c:	bd30      	pop	{r4, r5, pc}
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801045e:	7e63      	ldrb	r3, [r4, #25]
 8010460:	3301      	adds	r3, #1
 8010462:	b2db      	uxtb	r3, r3
 8010464:	2b02      	cmp	r3, #2
 8010466:	7663      	strb	r3, [r4, #25]
 8010468:	f240 80b1 	bls.w	80105ce <USBH_SetCfg+0x1ba>
        phost->Control.errorcount = 0U;
 801046c:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801046e:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 8010472:	2106      	movs	r1, #6
 8010474:	4620      	mov	r0, r4
 8010476:	4798      	blx	r3
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010478:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 801047a:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801047c:	4620      	mov	r0, r4
 801047e:	f000 fb27 	bl	8010ad0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8010482:	7921      	ldrb	r1, [r4, #4]
 8010484:	4620      	mov	r0, r4
 8010486:	f000 fb23 	bl	8010ad0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801048a:	7025      	strb	r5, [r4, #0]
        phost->RequestState = CMD_SEND;
 801048c:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 801048e:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 8010490:	70a3      	strb	r3, [r4, #2]
 8010492:	e7c8      	b.n	8010426 <USBH_SetCfg+0x12>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010494:	7962      	ldrb	r2, [r4, #5]
 8010496:	f104 0110 	add.w	r1, r4, #16
 801049a:	4620      	mov	r0, r4
 801049c:	f000 fa6c 	bl	8010978 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 80104a0:	2302      	movs	r3, #2
 80104a2:	2001      	movs	r0, #1
 80104a4:	7623      	strb	r3, [r4, #24]
 80104a6:	e7be      	b.n	8010426 <USBH_SetCfg+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80104a8:	7961      	ldrb	r1, [r4, #5]
 80104aa:	4620      	mov	r0, r4
 80104ac:	f00e f948 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80104b0:	2801      	cmp	r0, #1
 80104b2:	f000 8081 	beq.w	80105b8 <USBH_SetCfg+0x1a4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80104b6:	2804      	cmp	r0, #4
 80104b8:	d001      	beq.n	80104be <USBH_SetCfg+0xaa>
 80104ba:	2802      	cmp	r0, #2
 80104bc:	d1b2      	bne.n	8010424 <USBH_SetCfg+0x10>
          phost->Control.state = CTRL_ERROR;
 80104be:	230b      	movs	r3, #11
 80104c0:	2001      	movs	r0, #1
 80104c2:	7623      	strb	r3, [r4, #24]
 80104c4:	e7af      	b.n	8010426 <USBH_SetCfg+0x12>
      phost->Control.timer = (uint16_t)phost->Timer;
 80104c6:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80104ca:	4620      	mov	r0, r4
 80104cc:	7923      	ldrb	r3, [r4, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 80104ce:	81e2      	strh	r2, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80104d0:	68a1      	ldr	r1, [r4, #8]
 80104d2:	89a2      	ldrh	r2, [r4, #12]
 80104d4:	f000 fa78 	bl	80109c8 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 80104d8:	2304      	movs	r3, #4
 80104da:	2001      	movs	r0, #1
 80104dc:	7623      	strb	r3, [r4, #24]
 80104de:	e7a2      	b.n	8010426 <USBH_SetCfg+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80104e0:	7921      	ldrb	r1, [r4, #4]
 80104e2:	4620      	mov	r0, r4
 80104e4:	f00e f92c 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80104e8:	2801      	cmp	r0, #1
 80104ea:	d059      	beq.n	80105a0 <USBH_SetCfg+0x18c>
      if (URB_Status == USBH_URB_STALL)
 80104ec:	2805      	cmp	r0, #5
 80104ee:	d039      	beq.n	8010564 <USBH_SetCfg+0x150>
        if (URB_Status == USBH_URB_ERROR)
 80104f0:	2804      	cmp	r0, #4
 80104f2:	d197      	bne.n	8010424 <USBH_SetCfg+0x10>
 80104f4:	e7e3      	b.n	80104be <USBH_SetCfg+0xaa>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80104f6:	2501      	movs	r5, #1
 80104f8:	7963      	ldrb	r3, [r4, #5]
 80104fa:	89a2      	ldrh	r2, [r4, #12]
 80104fc:	4620      	mov	r0, r4
 80104fe:	68a1      	ldr	r1, [r4, #8]
 8010500:	9500      	str	r5, [sp, #0]
 8010502:	f000 fa49 	bl	8010998 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8010506:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801050a:	2306      	movs	r3, #6
 801050c:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 801050e:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010510:	7623      	strb	r3, [r4, #24]
 8010512:	e788      	b.n	8010426 <USBH_SetCfg+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010514:	7961      	ldrb	r1, [r4, #5]
 8010516:	4620      	mov	r0, r4
 8010518:	f00e f912 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 801051c:	2801      	cmp	r0, #1
 801051e:	d047      	beq.n	80105b0 <USBH_SetCfg+0x19c>
      else if (URB_Status == USBH_URB_STALL)
 8010520:	2805      	cmp	r0, #5
 8010522:	d01f      	beq.n	8010564 <USBH_SetCfg+0x150>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010524:	2802      	cmp	r0, #2
 8010526:	d04e      	beq.n	80105c6 <USBH_SetCfg+0x1b2>
        if (URB_Status == USBH_URB_ERROR)
 8010528:	2804      	cmp	r0, #4
 801052a:	f47f af7b 	bne.w	8010424 <USBH_SetCfg+0x10>
          phost->Control.state = CTRL_ERROR;
 801052e:	230b      	movs	r3, #11
 8010530:	7623      	strb	r3, [r4, #24]
 8010532:	e7ab      	b.n	801048c <USBH_SetCfg+0x78>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8010534:	2200      	movs	r2, #0
 8010536:	7923      	ldrb	r3, [r4, #4]
 8010538:	4620      	mov	r0, r4
 801053a:	4611      	mov	r1, r2
 801053c:	f000 fa44 	bl	80109c8 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8010540:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010544:	2308      	movs	r3, #8
 8010546:	2001      	movs	r0, #1
      phost->Control.timer = (uint16_t)phost->Timer;
 8010548:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801054a:	7623      	strb	r3, [r4, #24]
 801054c:	e76b      	b.n	8010426 <USBH_SetCfg+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801054e:	7921      	ldrb	r1, [r4, #4]
 8010550:	4620      	mov	r0, r4
 8010552:	f00e f8f5 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010556:	2801      	cmp	r0, #1
 8010558:	d026      	beq.n	80105a8 <USBH_SetCfg+0x194>
      else if (URB_Status == USBH_URB_ERROR)
 801055a:	2804      	cmp	r0, #4
 801055c:	d0af      	beq.n	80104be <USBH_SetCfg+0xaa>
        if (URB_Status == USBH_URB_STALL)
 801055e:	2805      	cmp	r0, #5
 8010560:	f47f af60 	bne.w	8010424 <USBH_SetCfg+0x10>
        status = USBH_NOT_SUPPORTED;
 8010564:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 8010566:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 8010568:	2300      	movs	r3, #0
        phost->RequestState = CMD_SEND;
 801056a:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 801056c:	7623      	strb	r3, [r4, #24]
}
 801056e:	b003      	add	sp, #12
 8010570:	bd30      	pop	{r4, r5, pc}
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8010572:	2200      	movs	r2, #0
 8010574:	2501      	movs	r5, #1
 8010576:	7963      	ldrb	r3, [r4, #5]
 8010578:	4620      	mov	r0, r4
 801057a:	4611      	mov	r1, r2
 801057c:	9500      	str	r5, [sp, #0]
 801057e:	f000 fa0b 	bl	8010998 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8010582:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010586:	230a      	movs	r3, #10
 8010588:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 801058a:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801058c:	7623      	strb	r3, [r4, #24]
 801058e:	e74a      	b.n	8010426 <USBH_SetCfg+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010590:	7961      	ldrb	r1, [r4, #5]
 8010592:	4620      	mov	r0, r4
 8010594:	f00e f8d4 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010598:	2801      	cmp	r0, #1
 801059a:	d005      	beq.n	80105a8 <USBH_SetCfg+0x194>
      else if (URB_Status == USBH_URB_NOTREADY)
 801059c:	2802      	cmp	r0, #2
 801059e:	d1a7      	bne.n	80104f0 <USBH_SetCfg+0xdc>
            phost->Control.state = CTRL_STATUS_OUT;
 80105a0:	2309      	movs	r3, #9
 80105a2:	2001      	movs	r0, #1
 80105a4:	7623      	strb	r3, [r4, #24]
 80105a6:	e73e      	b.n	8010426 <USBH_SetCfg+0x12>
        status = USBH_OK;
 80105a8:	2000      	movs	r0, #0
 80105aa:	e7dc      	b.n	8010566 <USBH_SetCfg+0x152>
          if (direction == USB_D2H)
 80105ac:	2a00      	cmp	r2, #0
 80105ae:	dbf7      	blt.n	80105a0 <USBH_SetCfg+0x18c>
            phost->Control.state = CTRL_STATUS_IN;
 80105b0:	2307      	movs	r3, #7
 80105b2:	2001      	movs	r0, #1
 80105b4:	7623      	strb	r3, [r4, #24]
 80105b6:	e736      	b.n	8010426 <USBH_SetCfg+0x12>
        if (phost->Control.setup.b.wLength.w != 0U)
 80105b8:	8ae3      	ldrh	r3, [r4, #22]
 80105ba:	f994 2010 	ldrsb.w	r2, [r4, #16]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d0f4      	beq.n	80105ac <USBH_SetCfg+0x198>
          if (direction == USB_D2H)
 80105c2:	2a00      	cmp	r2, #0
 80105c4:	db08      	blt.n	80105d8 <USBH_SetCfg+0x1c4>
            phost->Control.state = CTRL_DATA_OUT;
 80105c6:	2305      	movs	r3, #5
 80105c8:	2001      	movs	r0, #1
 80105ca:	7623      	strb	r3, [r4, #24]
 80105cc:	e72b      	b.n	8010426 <USBH_SetCfg+0x12>
        phost->Control.state = CTRL_SETUP;
 80105ce:	2301      	movs	r3, #1
 80105d0:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 80105d2:	4618      	mov	r0, r3
 80105d4:	70a3      	strb	r3, [r4, #2]
 80105d6:	e726      	b.n	8010426 <USBH_SetCfg+0x12>
            phost->Control.state = CTRL_DATA_IN;
 80105d8:	2303      	movs	r3, #3
 80105da:	7623      	strb	r3, [r4, #24]
 80105dc:	e723      	b.n	8010426 <USBH_SetCfg+0x12>
 80105de:	bf00      	nop

080105e0 <USBH_SetFeature>:
{
 80105e0:	b530      	push	{r4, r5, lr}
 80105e2:	4603      	mov	r3, r0
  if (phost->RequestState == CMD_SEND)
 80105e4:	7880      	ldrb	r0, [r0, #2]
{
 80105e6:	b083      	sub	sp, #12
  if (phost->RequestState == CMD_SEND)
 80105e8:	2801      	cmp	r0, #1
 80105ea:	d011      	beq.n	8010610 <USBH_SetFeature+0x30>
  switch (phost->RequestState)
 80105ec:	2802      	cmp	r0, #2
 80105ee:	d002      	beq.n	80105f6 <USBH_SetFeature+0x16>
  status = USBH_BUSY;
 80105f0:	2001      	movs	r0, #1
}
 80105f2:	b003      	add	sp, #12
 80105f4:	bd30      	pop	{r4, r5, pc}
 80105f6:	461c      	mov	r4, r3
  switch (phost->Control.state)
 80105f8:	7e1b      	ldrb	r3, [r3, #24]
 80105fa:	3b01      	subs	r3, #1
 80105fc:	2b0a      	cmp	r3, #10
 80105fe:	d8f7      	bhi.n	80105f0 <USBH_SetFeature+0x10>
 8010600:	e8df f003 	tbb	[pc, r3]
 8010604:	5447382e 	.word	0x5447382e
 8010608:	8b7e6e5f 	.word	0x8b7e6e5f
 801060c:	ac9d      	.short	0xac9d
 801060e:	13          	.byte	0x13
 801060f:	00          	.byte	0x00
    phost->Control.setup.b.wIndex.w = 0U;
 8010610:	2200      	movs	r2, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010612:	f44f 7540 	mov.w	r5, #768	; 0x300
      phost->RequestState = CMD_WAIT;
 8010616:	2402      	movs	r4, #2
    phost->Control.setup.b.wValue.w = wValue;
 8010618:	8259      	strh	r1, [r3, #18]
      phost->Control.state = CTRL_SETUP;
 801061a:	7618      	strb	r0, [r3, #24]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801061c:	821d      	strh	r5, [r3, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 801061e:	615a      	str	r2, [r3, #20]
      phost->Control.buff = buff;
 8010620:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010622:	819a      	strh	r2, [r3, #12]
      phost->RequestState = CMD_WAIT;
 8010624:	709c      	strb	r4, [r3, #2]
}
 8010626:	b003      	add	sp, #12
 8010628:	bd30      	pop	{r4, r5, pc}
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801062a:	7e63      	ldrb	r3, [r4, #25]
 801062c:	3301      	adds	r3, #1
 801062e:	b2db      	uxtb	r3, r3
 8010630:	2b02      	cmp	r3, #2
 8010632:	7663      	strb	r3, [r4, #25]
 8010634:	f240 80b1 	bls.w	801079a <USBH_SetFeature+0x1ba>
        phost->Control.errorcount = 0U;
 8010638:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801063a:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 801063e:	2106      	movs	r1, #6
 8010640:	4620      	mov	r0, r4
 8010642:	4798      	blx	r3
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010644:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 8010646:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010648:	4620      	mov	r0, r4
 801064a:	f000 fa41 	bl	8010ad0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 801064e:	7921      	ldrb	r1, [r4, #4]
 8010650:	4620      	mov	r0, r4
 8010652:	f000 fa3d 	bl	8010ad0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010656:	7025      	strb	r5, [r4, #0]
        phost->RequestState = CMD_SEND;
 8010658:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 801065a:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 801065c:	70a3      	strb	r3, [r4, #2]
 801065e:	e7c8      	b.n	80105f2 <USBH_SetFeature+0x12>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010660:	7962      	ldrb	r2, [r4, #5]
 8010662:	f104 0110 	add.w	r1, r4, #16
 8010666:	4620      	mov	r0, r4
 8010668:	f000 f986 	bl	8010978 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 801066c:	2302      	movs	r3, #2
 801066e:	2001      	movs	r0, #1
 8010670:	7623      	strb	r3, [r4, #24]
 8010672:	e7be      	b.n	80105f2 <USBH_SetFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010674:	7961      	ldrb	r1, [r4, #5]
 8010676:	4620      	mov	r0, r4
 8010678:	f00e f862 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 801067c:	2801      	cmp	r0, #1
 801067e:	f000 8081 	beq.w	8010784 <USBH_SetFeature+0x1a4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010682:	2804      	cmp	r0, #4
 8010684:	d001      	beq.n	801068a <USBH_SetFeature+0xaa>
 8010686:	2802      	cmp	r0, #2
 8010688:	d1b2      	bne.n	80105f0 <USBH_SetFeature+0x10>
          phost->Control.state = CTRL_ERROR;
 801068a:	230b      	movs	r3, #11
 801068c:	2001      	movs	r0, #1
 801068e:	7623      	strb	r3, [r4, #24]
 8010690:	e7af      	b.n	80105f2 <USBH_SetFeature+0x12>
      phost->Control.timer = (uint16_t)phost->Timer;
 8010692:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8010696:	4620      	mov	r0, r4
 8010698:	7923      	ldrb	r3, [r4, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 801069a:	81e2      	strh	r2, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 801069c:	68a1      	ldr	r1, [r4, #8]
 801069e:	89a2      	ldrh	r2, [r4, #12]
 80106a0:	f000 f992 	bl	80109c8 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 80106a4:	2304      	movs	r3, #4
 80106a6:	2001      	movs	r0, #1
 80106a8:	7623      	strb	r3, [r4, #24]
 80106aa:	e7a2      	b.n	80105f2 <USBH_SetFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80106ac:	7921      	ldrb	r1, [r4, #4]
 80106ae:	4620      	mov	r0, r4
 80106b0:	f00e f846 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80106b4:	2801      	cmp	r0, #1
 80106b6:	d059      	beq.n	801076c <USBH_SetFeature+0x18c>
      if (URB_Status == USBH_URB_STALL)
 80106b8:	2805      	cmp	r0, #5
 80106ba:	d039      	beq.n	8010730 <USBH_SetFeature+0x150>
        if (URB_Status == USBH_URB_ERROR)
 80106bc:	2804      	cmp	r0, #4
 80106be:	d197      	bne.n	80105f0 <USBH_SetFeature+0x10>
 80106c0:	e7e3      	b.n	801068a <USBH_SetFeature+0xaa>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80106c2:	2501      	movs	r5, #1
 80106c4:	7963      	ldrb	r3, [r4, #5]
 80106c6:	89a2      	ldrh	r2, [r4, #12]
 80106c8:	4620      	mov	r0, r4
 80106ca:	68a1      	ldr	r1, [r4, #8]
 80106cc:	9500      	str	r5, [sp, #0]
 80106ce:	f000 f963 	bl	8010998 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80106d2:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80106d6:	2306      	movs	r3, #6
 80106d8:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 80106da:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80106dc:	7623      	strb	r3, [r4, #24]
 80106de:	e788      	b.n	80105f2 <USBH_SetFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80106e0:	7961      	ldrb	r1, [r4, #5]
 80106e2:	4620      	mov	r0, r4
 80106e4:	f00e f82c 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80106e8:	2801      	cmp	r0, #1
 80106ea:	d047      	beq.n	801077c <USBH_SetFeature+0x19c>
      else if (URB_Status == USBH_URB_STALL)
 80106ec:	2805      	cmp	r0, #5
 80106ee:	d01f      	beq.n	8010730 <USBH_SetFeature+0x150>
      else if (URB_Status == USBH_URB_NOTREADY)
 80106f0:	2802      	cmp	r0, #2
 80106f2:	d04e      	beq.n	8010792 <USBH_SetFeature+0x1b2>
        if (URB_Status == USBH_URB_ERROR)
 80106f4:	2804      	cmp	r0, #4
 80106f6:	f47f af7b 	bne.w	80105f0 <USBH_SetFeature+0x10>
          phost->Control.state = CTRL_ERROR;
 80106fa:	230b      	movs	r3, #11
 80106fc:	7623      	strb	r3, [r4, #24]
 80106fe:	e7ab      	b.n	8010658 <USBH_SetFeature+0x78>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8010700:	2200      	movs	r2, #0
 8010702:	7923      	ldrb	r3, [r4, #4]
 8010704:	4620      	mov	r0, r4
 8010706:	4611      	mov	r1, r2
 8010708:	f000 f95e 	bl	80109c8 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 801070c:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010710:	2308      	movs	r3, #8
 8010712:	2001      	movs	r0, #1
      phost->Control.timer = (uint16_t)phost->Timer;
 8010714:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010716:	7623      	strb	r3, [r4, #24]
 8010718:	e76b      	b.n	80105f2 <USBH_SetFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801071a:	7921      	ldrb	r1, [r4, #4]
 801071c:	4620      	mov	r0, r4
 801071e:	f00e f80f 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010722:	2801      	cmp	r0, #1
 8010724:	d026      	beq.n	8010774 <USBH_SetFeature+0x194>
      else if (URB_Status == USBH_URB_ERROR)
 8010726:	2804      	cmp	r0, #4
 8010728:	d0af      	beq.n	801068a <USBH_SetFeature+0xaa>
        if (URB_Status == USBH_URB_STALL)
 801072a:	2805      	cmp	r0, #5
 801072c:	f47f af60 	bne.w	80105f0 <USBH_SetFeature+0x10>
        status = USBH_NOT_SUPPORTED;
 8010730:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 8010732:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 8010734:	2300      	movs	r3, #0
        phost->RequestState = CMD_SEND;
 8010736:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8010738:	7623      	strb	r3, [r4, #24]
}
 801073a:	b003      	add	sp, #12
 801073c:	bd30      	pop	{r4, r5, pc}
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801073e:	2200      	movs	r2, #0
 8010740:	2501      	movs	r5, #1
 8010742:	7963      	ldrb	r3, [r4, #5]
 8010744:	4620      	mov	r0, r4
 8010746:	4611      	mov	r1, r2
 8010748:	9500      	str	r5, [sp, #0]
 801074a:	f000 f925 	bl	8010998 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 801074e:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010752:	230a      	movs	r3, #10
 8010754:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 8010756:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010758:	7623      	strb	r3, [r4, #24]
 801075a:	e74a      	b.n	80105f2 <USBH_SetFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801075c:	7961      	ldrb	r1, [r4, #5]
 801075e:	4620      	mov	r0, r4
 8010760:	f00d ffee 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010764:	2801      	cmp	r0, #1
 8010766:	d005      	beq.n	8010774 <USBH_SetFeature+0x194>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010768:	2802      	cmp	r0, #2
 801076a:	d1a7      	bne.n	80106bc <USBH_SetFeature+0xdc>
            phost->Control.state = CTRL_STATUS_OUT;
 801076c:	2309      	movs	r3, #9
 801076e:	2001      	movs	r0, #1
 8010770:	7623      	strb	r3, [r4, #24]
 8010772:	e73e      	b.n	80105f2 <USBH_SetFeature+0x12>
        status = USBH_OK;
 8010774:	2000      	movs	r0, #0
 8010776:	e7dc      	b.n	8010732 <USBH_SetFeature+0x152>
          if (direction == USB_D2H)
 8010778:	2a00      	cmp	r2, #0
 801077a:	dbf7      	blt.n	801076c <USBH_SetFeature+0x18c>
            phost->Control.state = CTRL_STATUS_IN;
 801077c:	2307      	movs	r3, #7
 801077e:	2001      	movs	r0, #1
 8010780:	7623      	strb	r3, [r4, #24]
 8010782:	e736      	b.n	80105f2 <USBH_SetFeature+0x12>
        if (phost->Control.setup.b.wLength.w != 0U)
 8010784:	8ae3      	ldrh	r3, [r4, #22]
 8010786:	f994 2010 	ldrsb.w	r2, [r4, #16]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d0f4      	beq.n	8010778 <USBH_SetFeature+0x198>
          if (direction == USB_D2H)
 801078e:	2a00      	cmp	r2, #0
 8010790:	db08      	blt.n	80107a4 <USBH_SetFeature+0x1c4>
            phost->Control.state = CTRL_DATA_OUT;
 8010792:	2305      	movs	r3, #5
 8010794:	2001      	movs	r0, #1
 8010796:	7623      	strb	r3, [r4, #24]
 8010798:	e72b      	b.n	80105f2 <USBH_SetFeature+0x12>
        phost->Control.state = CTRL_SETUP;
 801079a:	2301      	movs	r3, #1
 801079c:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 801079e:	4618      	mov	r0, r3
 80107a0:	70a3      	strb	r3, [r4, #2]
 80107a2:	e726      	b.n	80105f2 <USBH_SetFeature+0x12>
            phost->Control.state = CTRL_DATA_IN;
 80107a4:	2303      	movs	r3, #3
 80107a6:	7623      	strb	r3, [r4, #24]
 80107a8:	e723      	b.n	80105f2 <USBH_SetFeature+0x12>
 80107aa:	bf00      	nop

080107ac <USBH_ClrFeature>:
{
 80107ac:	b530      	push	{r4, r5, lr}
 80107ae:	4603      	mov	r3, r0
  if (phost->RequestState == CMD_SEND)
 80107b0:	7880      	ldrb	r0, [r0, #2]
{
 80107b2:	b083      	sub	sp, #12
  if (phost->RequestState == CMD_SEND)
 80107b4:	2801      	cmp	r0, #1
 80107b6:	d011      	beq.n	80107dc <USBH_ClrFeature+0x30>
  switch (phost->RequestState)
 80107b8:	2802      	cmp	r0, #2
 80107ba:	d002      	beq.n	80107c2 <USBH_ClrFeature+0x16>
  status = USBH_BUSY;
 80107bc:	2001      	movs	r0, #1
}
 80107be:	b003      	add	sp, #12
 80107c0:	bd30      	pop	{r4, r5, pc}
 80107c2:	461c      	mov	r4, r3
  switch (phost->Control.state)
 80107c4:	7e1b      	ldrb	r3, [r3, #24]
 80107c6:	3b01      	subs	r3, #1
 80107c8:	2b0a      	cmp	r3, #10
 80107ca:	d8f7      	bhi.n	80107bc <USBH_ClrFeature+0x10>
 80107cc:	e8df f003 	tbb	[pc, r3]
 80107d0:	5447382e 	.word	0x5447382e
 80107d4:	8b7e6e5f 	.word	0x8b7e6e5f
 80107d8:	ac9d      	.short	0xac9d
 80107da:	13          	.byte	0x13
 80107db:	00          	.byte	0x00
    phost->Control.setup.b.wLength.w = 0U;
 80107dc:	2200      	movs	r2, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80107de:	f44f 7581 	mov.w	r5, #258	; 0x102
      phost->RequestState = CMD_WAIT;
 80107e2:	2402      	movs	r4, #2
    phost->Control.setup.b.wIndex.w = ep_num;
 80107e4:	8299      	strh	r1, [r3, #20]
      phost->Control.state = CTRL_SETUP;
 80107e6:	7618      	strb	r0, [r3, #24]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80107e8:	611d      	str	r5, [r3, #16]
    phost->Control.setup.b.wLength.w = 0U;
 80107ea:	82da      	strh	r2, [r3, #22]
      phost->Control.buff = buff;
 80107ec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80107ee:	819a      	strh	r2, [r3, #12]
      phost->RequestState = CMD_WAIT;
 80107f0:	709c      	strb	r4, [r3, #2]
}
 80107f2:	b003      	add	sp, #12
 80107f4:	bd30      	pop	{r4, r5, pc}
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80107f6:	7e63      	ldrb	r3, [r4, #25]
 80107f8:	3301      	adds	r3, #1
 80107fa:	b2db      	uxtb	r3, r3
 80107fc:	2b02      	cmp	r3, #2
 80107fe:	7663      	strb	r3, [r4, #25]
 8010800:	f240 80b1 	bls.w	8010966 <USBH_ClrFeature+0x1ba>
        phost->Control.errorcount = 0U;
 8010804:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010806:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 801080a:	2106      	movs	r1, #6
 801080c:	4620      	mov	r0, r4
 801080e:	4798      	blx	r3
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010810:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 8010812:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010814:	4620      	mov	r0, r4
 8010816:	f000 f95b 	bl	8010ad0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 801081a:	7921      	ldrb	r1, [r4, #4]
 801081c:	4620      	mov	r0, r4
 801081e:	f000 f957 	bl	8010ad0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010822:	7025      	strb	r5, [r4, #0]
        phost->RequestState = CMD_SEND;
 8010824:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 8010826:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 8010828:	70a3      	strb	r3, [r4, #2]
 801082a:	e7c8      	b.n	80107be <USBH_ClrFeature+0x12>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801082c:	7962      	ldrb	r2, [r4, #5]
 801082e:	f104 0110 	add.w	r1, r4, #16
 8010832:	4620      	mov	r0, r4
 8010834:	f000 f8a0 	bl	8010978 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 8010838:	2302      	movs	r3, #2
 801083a:	2001      	movs	r0, #1
 801083c:	7623      	strb	r3, [r4, #24]
 801083e:	e7be      	b.n	80107be <USBH_ClrFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010840:	7961      	ldrb	r1, [r4, #5]
 8010842:	4620      	mov	r0, r4
 8010844:	f00d ff7c 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010848:	2801      	cmp	r0, #1
 801084a:	f000 8081 	beq.w	8010950 <USBH_ClrFeature+0x1a4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801084e:	2804      	cmp	r0, #4
 8010850:	d001      	beq.n	8010856 <USBH_ClrFeature+0xaa>
 8010852:	2802      	cmp	r0, #2
 8010854:	d1b2      	bne.n	80107bc <USBH_ClrFeature+0x10>
          phost->Control.state = CTRL_ERROR;
 8010856:	230b      	movs	r3, #11
 8010858:	2001      	movs	r0, #1
 801085a:	7623      	strb	r3, [r4, #24]
 801085c:	e7af      	b.n	80107be <USBH_ClrFeature+0x12>
      phost->Control.timer = (uint16_t)phost->Timer;
 801085e:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8010862:	4620      	mov	r0, r4
 8010864:	7923      	ldrb	r3, [r4, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 8010866:	81e2      	strh	r2, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8010868:	68a1      	ldr	r1, [r4, #8]
 801086a:	89a2      	ldrh	r2, [r4, #12]
 801086c:	f000 f8ac 	bl	80109c8 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010870:	2304      	movs	r3, #4
 8010872:	2001      	movs	r0, #1
 8010874:	7623      	strb	r3, [r4, #24]
 8010876:	e7a2      	b.n	80107be <USBH_ClrFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010878:	7921      	ldrb	r1, [r4, #4]
 801087a:	4620      	mov	r0, r4
 801087c:	f00d ff60 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010880:	2801      	cmp	r0, #1
 8010882:	d059      	beq.n	8010938 <USBH_ClrFeature+0x18c>
      if (URB_Status == USBH_URB_STALL)
 8010884:	2805      	cmp	r0, #5
 8010886:	d039      	beq.n	80108fc <USBH_ClrFeature+0x150>
        if (URB_Status == USBH_URB_ERROR)
 8010888:	2804      	cmp	r0, #4
 801088a:	d197      	bne.n	80107bc <USBH_ClrFeature+0x10>
 801088c:	e7e3      	b.n	8010856 <USBH_ClrFeature+0xaa>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801088e:	2501      	movs	r5, #1
 8010890:	7963      	ldrb	r3, [r4, #5]
 8010892:	89a2      	ldrh	r2, [r4, #12]
 8010894:	4620      	mov	r0, r4
 8010896:	68a1      	ldr	r1, [r4, #8]
 8010898:	9500      	str	r5, [sp, #0]
 801089a:	f000 f87d 	bl	8010998 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 801089e:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80108a2:	2306      	movs	r3, #6
 80108a4:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 80108a6:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80108a8:	7623      	strb	r3, [r4, #24]
 80108aa:	e788      	b.n	80107be <USBH_ClrFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80108ac:	7961      	ldrb	r1, [r4, #5]
 80108ae:	4620      	mov	r0, r4
 80108b0:	f00d ff46 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80108b4:	2801      	cmp	r0, #1
 80108b6:	d047      	beq.n	8010948 <USBH_ClrFeature+0x19c>
      else if (URB_Status == USBH_URB_STALL)
 80108b8:	2805      	cmp	r0, #5
 80108ba:	d01f      	beq.n	80108fc <USBH_ClrFeature+0x150>
      else if (URB_Status == USBH_URB_NOTREADY)
 80108bc:	2802      	cmp	r0, #2
 80108be:	d04e      	beq.n	801095e <USBH_ClrFeature+0x1b2>
        if (URB_Status == USBH_URB_ERROR)
 80108c0:	2804      	cmp	r0, #4
 80108c2:	f47f af7b 	bne.w	80107bc <USBH_ClrFeature+0x10>
          phost->Control.state = CTRL_ERROR;
 80108c6:	230b      	movs	r3, #11
 80108c8:	7623      	strb	r3, [r4, #24]
 80108ca:	e7ab      	b.n	8010824 <USBH_ClrFeature+0x78>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80108cc:	2200      	movs	r2, #0
 80108ce:	7923      	ldrb	r3, [r4, #4]
 80108d0:	4620      	mov	r0, r4
 80108d2:	4611      	mov	r1, r2
 80108d4:	f000 f878 	bl	80109c8 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80108d8:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80108dc:	2308      	movs	r3, #8
 80108de:	2001      	movs	r0, #1
      phost->Control.timer = (uint16_t)phost->Timer;
 80108e0:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80108e2:	7623      	strb	r3, [r4, #24]
 80108e4:	e76b      	b.n	80107be <USBH_ClrFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80108e6:	7921      	ldrb	r1, [r4, #4]
 80108e8:	4620      	mov	r0, r4
 80108ea:	f00d ff29 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80108ee:	2801      	cmp	r0, #1
 80108f0:	d026      	beq.n	8010940 <USBH_ClrFeature+0x194>
      else if (URB_Status == USBH_URB_ERROR)
 80108f2:	2804      	cmp	r0, #4
 80108f4:	d0af      	beq.n	8010856 <USBH_ClrFeature+0xaa>
        if (URB_Status == USBH_URB_STALL)
 80108f6:	2805      	cmp	r0, #5
 80108f8:	f47f af60 	bne.w	80107bc <USBH_ClrFeature+0x10>
        status = USBH_NOT_SUPPORTED;
 80108fc:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 80108fe:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 8010900:	2300      	movs	r3, #0
        phost->RequestState = CMD_SEND;
 8010902:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8010904:	7623      	strb	r3, [r4, #24]
}
 8010906:	b003      	add	sp, #12
 8010908:	bd30      	pop	{r4, r5, pc}
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801090a:	2200      	movs	r2, #0
 801090c:	2501      	movs	r5, #1
 801090e:	7963      	ldrb	r3, [r4, #5]
 8010910:	4620      	mov	r0, r4
 8010912:	4611      	mov	r1, r2
 8010914:	9500      	str	r5, [sp, #0]
 8010916:	f000 f83f 	bl	8010998 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 801091a:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801091e:	230a      	movs	r3, #10
 8010920:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 8010922:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010924:	7623      	strb	r3, [r4, #24]
 8010926:	e74a      	b.n	80107be <USBH_ClrFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010928:	7961      	ldrb	r1, [r4, #5]
 801092a:	4620      	mov	r0, r4
 801092c:	f00d ff08 	bl	801e740 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010930:	2801      	cmp	r0, #1
 8010932:	d005      	beq.n	8010940 <USBH_ClrFeature+0x194>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010934:	2802      	cmp	r0, #2
 8010936:	d1a7      	bne.n	8010888 <USBH_ClrFeature+0xdc>
            phost->Control.state = CTRL_STATUS_OUT;
 8010938:	2309      	movs	r3, #9
 801093a:	2001      	movs	r0, #1
 801093c:	7623      	strb	r3, [r4, #24]
 801093e:	e73e      	b.n	80107be <USBH_ClrFeature+0x12>
        status = USBH_OK;
 8010940:	2000      	movs	r0, #0
 8010942:	e7dc      	b.n	80108fe <USBH_ClrFeature+0x152>
          if (direction == USB_D2H)
 8010944:	2a00      	cmp	r2, #0
 8010946:	dbf7      	blt.n	8010938 <USBH_ClrFeature+0x18c>
            phost->Control.state = CTRL_STATUS_IN;
 8010948:	2307      	movs	r3, #7
 801094a:	2001      	movs	r0, #1
 801094c:	7623      	strb	r3, [r4, #24]
 801094e:	e736      	b.n	80107be <USBH_ClrFeature+0x12>
        if (phost->Control.setup.b.wLength.w != 0U)
 8010950:	8ae3      	ldrh	r3, [r4, #22]
 8010952:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d0f4      	beq.n	8010944 <USBH_ClrFeature+0x198>
          if (direction == USB_D2H)
 801095a:	2a00      	cmp	r2, #0
 801095c:	db08      	blt.n	8010970 <USBH_ClrFeature+0x1c4>
            phost->Control.state = CTRL_DATA_OUT;
 801095e:	2305      	movs	r3, #5
 8010960:	2001      	movs	r0, #1
 8010962:	7623      	strb	r3, [r4, #24]
 8010964:	e72b      	b.n	80107be <USBH_ClrFeature+0x12>
        phost->Control.state = CTRL_SETUP;
 8010966:	2301      	movs	r3, #1
 8010968:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 801096a:	4618      	mov	r0, r3
 801096c:	70a3      	strb	r3, [r4, #2]
 801096e:	e726      	b.n	80107be <USBH_ClrFeature+0x12>
            phost->Control.state = CTRL_DATA_IN;
 8010970:	2303      	movs	r3, #3
 8010972:	7623      	strb	r3, [r4, #24]
 8010974:	e723      	b.n	80107be <USBH_ClrFeature+0x12>
 8010976:	bf00      	nop

08010978 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010978:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801097a:	2400      	movs	r4, #0
{
 801097c:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801097e:	2508      	movs	r5, #8
 8010980:	9101      	str	r1, [sp, #4]
 8010982:	4623      	mov	r3, r4
 8010984:	4611      	mov	r1, r2
 8010986:	9403      	str	r4, [sp, #12]
 8010988:	9400      	str	r4, [sp, #0]
 801098a:	4622      	mov	r2, r4
 801098c:	9502      	str	r5, [sp, #8]
 801098e:	f00d febb 	bl	801e708 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 8010992:	4620      	mov	r0, r4
 8010994:	b005      	add	sp, #20
 8010996:	bd30      	pop	{r4, r5, pc}

08010998 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010998:	b570      	push	{r4, r5, r6, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 801099a:	f890 631d 	ldrb.w	r6, [r0, #797]	; 0x31d
{
 801099e:	b084      	sub	sp, #16
 80109a0:	461d      	mov	r5, r3
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80109a2:	2300      	movs	r3, #0
  if (phost->device.speed != USBH_SPEED_HIGH)
 80109a4:	2e00      	cmp	r6, #0
{
 80109a6:	f89d 4020 	ldrb.w	r4, [sp, #32]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80109aa:	f04f 0601 	mov.w	r6, #1
 80109ae:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 80109b0:	bf18      	it	ne
 80109b2:	461c      	movne	r4, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80109b4:	461a      	mov	r2, r3
 80109b6:	e9cd 6100 	strd	r6, r1, [sp]
 80109ba:	9403      	str	r4, [sp, #12]
 80109bc:	4629      	mov	r1, r5
 80109be:	f00d fea3 	bl	801e708 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 80109c2:	2000      	movs	r0, #0
 80109c4:	b004      	add	sp, #16
 80109c6:	bd70      	pop	{r4, r5, r6, pc}

080109c8 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80109c8:	b570      	push	{r4, r5, r6, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80109ca:	2400      	movs	r4, #0
{
 80109cc:	b084      	sub	sp, #16
 80109ce:	461e      	mov	r6, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80109d0:	2501      	movs	r5, #1
 80109d2:	4623      	mov	r3, r4
 80109d4:	9403      	str	r4, [sp, #12]
 80109d6:	9500      	str	r5, [sp, #0]
 80109d8:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80109dc:	4631      	mov	r1, r6
 80109de:	462a      	mov	r2, r5
 80109e0:	f00d fe92 	bl	801e708 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 80109e4:	4620      	mov	r0, r4
 80109e6:	b004      	add	sp, #16
 80109e8:	bd70      	pop	{r4, r5, r6, pc}
 80109ea:	bf00      	nop

080109ec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80109ec:	b570      	push	{r4, r5, r6, lr}
 80109ee:	461e      	mov	r6, r3
 80109f0:	b084      	sub	sp, #16
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80109f2:	2400      	movs	r4, #0
 80109f4:	2501      	movs	r5, #1
 80109f6:	2302      	movs	r3, #2
 80109f8:	9403      	str	r4, [sp, #12]
 80109fa:	9500      	str	r5, [sp, #0]
 80109fc:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010a00:	4631      	mov	r1, r6
 8010a02:	462a      	mov	r2, r5
 8010a04:	f00d fe80 	bl	801e708 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 8010a08:	4620      	mov	r0, r4
 8010a0a:	b004      	add	sp, #16
 8010a0c:	bd70      	pop	{r4, r5, r6, pc}
 8010a0e:	bf00      	nop

08010a10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010a10:	b530      	push	{r4, r5, lr}
 8010a12:	b085      	sub	sp, #20
 8010a14:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8010a18:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010a1c:	9400      	str	r4, [sp, #0]
{
 8010a1e:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010a22:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8010a26:	f00d fe47 	bl	801e6b8 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 8010a2a:	2000      	movs	r0, #0
 8010a2c:	b005      	add	sp, #20
 8010a2e:	bd30      	pop	{r4, r5, pc}

08010a30 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010a30:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 8010a32:	f00d fe5b 	bl	801e6ec <USBH_LL_ClosePipe>

  return USBH_OK;
}
 8010a36:	2000      	movs	r0, #0
 8010a38:	bd08      	pop	{r3, pc}
 8010a3a:	bf00      	nop

08010a3c <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010a3c:	4603      	mov	r3, r0
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010a3e:	f8d0 04f4 	ldr.w	r0, [r0, #1268]	; 0x4f4
 8010a42:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8010a46:	d02a      	beq.n	8010a9e <USBH_AllocPipe+0x62>
 8010a48:	f8d3 24f8 	ldr.w	r2, [r3, #1272]	; 0x4f8
 8010a4c:	0410      	lsls	r0, r2, #16
 8010a4e:	d52d      	bpl.n	8010aac <USBH_AllocPipe+0x70>
 8010a50:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8010a54:	0412      	lsls	r2, r2, #16
 8010a56:	d52b      	bpl.n	8010ab0 <USBH_AllocPipe+0x74>
 8010a58:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8010a5c:	0410      	lsls	r0, r2, #16
 8010a5e:	d529      	bpl.n	8010ab4 <USBH_AllocPipe+0x78>
 8010a60:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8010a64:	0412      	lsls	r2, r2, #16
 8010a66:	d527      	bpl.n	8010ab8 <USBH_AllocPipe+0x7c>
 8010a68:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010a6c:	0410      	lsls	r0, r2, #16
 8010a6e:	d525      	bpl.n	8010abc <USBH_AllocPipe+0x80>
 8010a70:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
 8010a74:	0412      	lsls	r2, r2, #16
 8010a76:	d525      	bpl.n	8010ac4 <USBH_AllocPipe+0x88>
 8010a78:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
 8010a7c:	0410      	lsls	r0, r2, #16
 8010a7e:	d523      	bpl.n	8010ac8 <USBH_AllocPipe+0x8c>
 8010a80:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
 8010a84:	0412      	lsls	r2, r2, #16
 8010a86:	d51b      	bpl.n	8010ac0 <USBH_AllocPipe+0x84>
 8010a88:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
 8010a8c:	0410      	lsls	r0, r2, #16
 8010a8e:	d505      	bpl.n	8010a9c <USBH_AllocPipe+0x60>
 8010a90:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
 8010a94:	0412      	lsls	r2, r2, #16
 8010a96:	d519      	bpl.n	8010acc <USBH_AllocPipe+0x90>
 8010a98:	20ff      	movs	r0, #255	; 0xff
}
 8010a9a:	4770      	bx	lr
  for (idx = 0U ; idx < 11U ; idx++)
 8010a9c:	2009      	movs	r0, #9
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8010a9e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8010aa2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8010aa6:	f8c3 14f4 	str.w	r1, [r3, #1268]	; 0x4f4
 8010aaa:	4770      	bx	lr
  for (idx = 0U ; idx < 11U ; idx++)
 8010aac:	2001      	movs	r0, #1
 8010aae:	e7f6      	b.n	8010a9e <USBH_AllocPipe+0x62>
 8010ab0:	2002      	movs	r0, #2
 8010ab2:	e7f4      	b.n	8010a9e <USBH_AllocPipe+0x62>
 8010ab4:	2003      	movs	r0, #3
 8010ab6:	e7f2      	b.n	8010a9e <USBH_AllocPipe+0x62>
 8010ab8:	2004      	movs	r0, #4
 8010aba:	e7f0      	b.n	8010a9e <USBH_AllocPipe+0x62>
 8010abc:	2005      	movs	r0, #5
 8010abe:	e7ee      	b.n	8010a9e <USBH_AllocPipe+0x62>
 8010ac0:	2008      	movs	r0, #8
 8010ac2:	e7ec      	b.n	8010a9e <USBH_AllocPipe+0x62>
 8010ac4:	2006      	movs	r0, #6
 8010ac6:	e7ea      	b.n	8010a9e <USBH_AllocPipe+0x62>
 8010ac8:	2007      	movs	r0, #7
 8010aca:	e7e8      	b.n	8010a9e <USBH_AllocPipe+0x62>
 8010acc:	200a      	movs	r0, #10
 8010ace:	e7e6      	b.n	8010a9e <USBH_AllocPipe+0x62>

08010ad0 <USBH_FreePipe>:
  if (idx < 11U)
 8010ad0:	290a      	cmp	r1, #10
 8010ad2:	d807      	bhi.n	8010ae4 <USBH_FreePipe+0x14>
 8010ad4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    phost->Pipes[idx] &= 0x7FFFU;
 8010ad8:	f8d0 34f4 	ldr.w	r3, [r0, #1268]	; 0x4f4
 8010adc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010ae0:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
}
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	4770      	bx	lr

08010ae8 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8010ae8:	4b11      	ldr	r3, [pc, #68]	; (8010b30 <FATFS_LinkDriver+0x48>)
 8010aea:	7a5a      	ldrb	r2, [r3, #9]
 8010aec:	b10a      	cbz	r2, 8010af2 <FATFS_LinkDriver+0xa>
  uint8_t ret = 1;
 8010aee:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8010af0:	4770      	bx	lr
{
 8010af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010af4:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    disk.is_initialized[disk.nbr] = 0;
 8010af8:	f893 e009 	ldrb.w	lr, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8010afc:	7a5e      	ldrb	r6, [r3, #9]
    path[1] = ':';
 8010afe:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 8010b02:	7a5d      	ldrb	r5, [r3, #9]
    path[2] = '/';
 8010b04:	272f      	movs	r7, #47	; 0x2f
    DiskNum = disk.nbr++;
 8010b06:	7a5a      	ldrb	r2, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8010b08:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 8010b0c:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 8010b0e:	f803 400e 	strb.w	r4, [r3, lr]
    DiskNum = disk.nbr++;
 8010b12:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 8010b14:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 8010b16:	722c      	strb	r4, [r5, #8]
    DiskNum = disk.nbr++;
 8010b18:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8010b1a:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8010b1c:	b2c0      	uxtb	r0, r0
 8010b1e:	7258      	strb	r0, [r3, #9]
    path[3] = 0;
 8010b20:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 8010b22:	700a      	strb	r2, [r1, #0]
    path[3] = 0;
 8010b24:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 8010b26:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 8010b2a:	708f      	strb	r7, [r1, #2]
}
 8010b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	200004c0 	.word	0x200004c0

08010b34 <MIDI_Application>:
 * @brief  Main routine for MIDI application, looped in main.c
 * @param  None
 * @retval none
 */
void MIDI_Application(void)
{
 8010b34:	b510      	push	{r4, lr}
	if(Appli_state == APPLICATION_READY)
 8010b36:	4c15      	ldr	r4, [pc, #84]	; (8010b8c <MIDI_Application+0x58>)
 8010b38:	7823      	ldrb	r3, [r4, #0]
 8010b3a:	2b02      	cmp	r3, #2
 8010b3c:	d016      	beq.n	8010b6c <MIDI_Application+0x38>
	if(Appli_state == APPLICATION_RUNNING)
	{
			//....pffff......grrrrr......
	}

	if(Appli_state == APPLICATION_DISCONNECT)
 8010b3e:	2b04      	cmp	r3, #4
 8010b40:	d000      	beq.n	8010b44 <MIDI_Application+0x10>
		HAL_Delay(10);
		MX_USB_HOST_Init();

	}

}
 8010b42:	bd10      	pop	{r4, pc}
		Appli_state = APPLICATION_IDLE;
 8010b44:	2300      	movs	r3, #0
		setLED_USB(0);
 8010b46:	4618      	mov	r0, r3
		Appli_state = APPLICATION_IDLE;
 8010b48:	7023      	strb	r3, [r4, #0]
		setLED_USB(0);
 8010b4a:	f003 f887 	bl	8013c5c <setLED_USB>
		USBH_MIDI_Stop(&hUsbHostFS);
 8010b4e:	4810      	ldr	r0, [pc, #64]	; (8010b90 <MIDI_Application+0x5c>)
 8010b50:	f00d fcc8 	bl	801e4e4 <USBH_MIDI_Stop>
		HAL_Delay(10);
 8010b54:	200a      	movs	r0, #10
 8010b56:	f7f0 f87b 	bl	8000c50 <HAL_Delay>
		MX_USB_HOST_DeInit();
 8010b5a:	f00d fb51 	bl	801e200 <MX_USB_HOST_DeInit>
		HAL_Delay(10);
 8010b5e:	200a      	movs	r0, #10
 8010b60:	f7f0 f876 	bl	8000c50 <HAL_Delay>
}
 8010b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		MX_USB_HOST_Init();
 8010b68:	f00d bb28 	b.w	801e1bc <MX_USB_HOST_Init>
		USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer[MIDI_write_buffer], RX_BUFF_SIZE); // just once at the beginning, start the first reception
 8010b6c:	4909      	ldr	r1, [pc, #36]	; (8010b94 <MIDI_Application+0x60>)
 8010b6e:	2240      	movs	r2, #64	; 0x40
 8010b70:	4b09      	ldr	r3, [pc, #36]	; (8010b98 <MIDI_Application+0x64>)
 8010b72:	7809      	ldrb	r1, [r1, #0]
 8010b74:	4806      	ldr	r0, [pc, #24]	; (8010b90 <MIDI_Application+0x5c>)
 8010b76:	eb03 1181 	add.w	r1, r3, r1, lsl #6
 8010b7a:	f00d fcc9 	bl	801e510 <USBH_MIDI_Receive>
		Appli_state = APPLICATION_RUNNING;
 8010b7e:	2303      	movs	r3, #3
		setLED_USB(1);
 8010b80:	2001      	movs	r0, #1
		Appli_state = APPLICATION_RUNNING;
 8010b82:	7023      	strb	r3, [r4, #0]
		setLED_USB(1);
 8010b84:	f003 f86a 	bl	8013c5c <setLED_USB>
 8010b88:	7823      	ldrb	r3, [r4, #0]
 8010b8a:	e7d8      	b.n	8010b3e <MIDI_Application+0xa>
 8010b8c:	20000658 	.word	0x20000658
 8010b90:	300010a0 	.word	0x300010a0
 8010b94:	20000008 	.word	0x20000008
 8010b98:	30000000 	.word	0x30000000

08010b9c <ProcessReceivedMidiDatas>:

}
volatile testInt = 0;
/*-----------------------------------------------------------------------------*/
void ProcessReceivedMidiDatas(void)
{
 8010b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t miniBufferPosition = 0;
	uint8_t processed = 0;
 8010ba0:	2500      	movs	r5, #0
 8010ba2:	4c3a      	ldr	r4, [pc, #232]	; (8010c8c <ProcessReceivedMidiDatas+0xf0>)
 8010ba4:	4f3a      	ldr	r7, [pc, #232]	; (8010c90 <ProcessReceivedMidiDatas+0xf4>)
	while (((myUSB_FIFO_writePointer > myUSB_FIFO_readPointer) || (myUSB_FIFO_overflowBit)) &&
 8010ba6:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8010cb0 <ProcessReceivedMidiDatas+0x114>
			(processed < 32)) // maximum notes to process in a frame * 4
	{

		miniBufferPosition = (myUSB_FIFO_readPointer % 4);
		USB_message[miniBufferPosition] = myUSB_FIFO[myUSB_FIFO_readPointer];
 8010baa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010cb4 <ProcessReceivedMidiDatas+0x118>
 8010bae:	4e39      	ldr	r6, [pc, #228]	; (8010c94 <ProcessReceivedMidiDatas+0xf8>)
	while (((myUSB_FIFO_writePointer > myUSB_FIFO_readPointer) || (myUSB_FIFO_overflowBit)) &&
 8010bb0:	e008      	b.n	8010bc4 <ProcessReceivedMidiDatas+0x28>
		myUSB_FIFO_readPointer++;
		if (miniBufferPosition == 3) //we must have reached the end of a 4-byte message
		{
			parse_MIDI_Message();
		}
		if (myUSB_FIFO_readPointer >= USB_FIFO_SIZE)
 8010bb2:	8823      	ldrh	r3, [r4, #0]
 8010bb4:	2bff      	cmp	r3, #255	; 0xff
 8010bb6:	d903      	bls.n	8010bc0 <ProcessReceivedMidiDatas+0x24>
		{
			myUSB_FIFO_overflowBit = 0;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	f888 3000 	strb.w	r3, [r8]
			myUSB_FIFO_readPointer = 0;
 8010bbe:	8023      	strh	r3, [r4, #0]
		}
		processed++;
 8010bc0:	3501      	adds	r5, #1
 8010bc2:	b2ed      	uxtb	r5, r5
	while (((myUSB_FIFO_writePointer > myUSB_FIFO_readPointer) || (myUSB_FIFO_overflowBit)) &&
 8010bc4:	883b      	ldrh	r3, [r7, #0]
 8010bc6:	8822      	ldrh	r2, [r4, #0]
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d303      	bcc.n	8010bd4 <ProcessReceivedMidiDatas+0x38>
 8010bcc:	f898 3000 	ldrb.w	r3, [r8]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d04c      	beq.n	8010c6e <ProcessReceivedMidiDatas+0xd2>
 8010bd4:	2d20      	cmp	r5, #32
 8010bd6:	d04e      	beq.n	8010c76 <ProcessReceivedMidiDatas+0xda>
		miniBufferPosition = (myUSB_FIFO_readPointer % 4);
 8010bd8:	8822      	ldrh	r2, [r4, #0]
		USB_message[miniBufferPosition] = myUSB_FIFO[myUSB_FIFO_readPointer];
 8010bda:	8823      	ldrh	r3, [r4, #0]
		miniBufferPosition = (myUSB_FIFO_readPointer % 4);
 8010bdc:	f002 0203 	and.w	r2, r2, #3
		USB_message[miniBufferPosition] = myUSB_FIFO[myUSB_FIFO_readPointer];
 8010be0:	b29b      	uxth	r3, r3
		if (miniBufferPosition == 3) //we must have reached the end of a 4-byte message
 8010be2:	2a03      	cmp	r2, #3
		USB_message[miniBufferPosition] = myUSB_FIFO[myUSB_FIFO_readPointer];
 8010be4:	f819 1003 	ldrb.w	r1, [r9, r3]
		myUSB_FIFO_readPointer++;
 8010be8:	8823      	ldrh	r3, [r4, #0]
		USB_message[miniBufferPosition] = myUSB_FIFO[myUSB_FIFO_readPointer];
 8010bea:	54b1      	strb	r1, [r6, r2]
		myUSB_FIFO_readPointer++;
 8010bec:	f103 0301 	add.w	r3, r3, #1
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	8023      	strh	r3, [r4, #0]
		if (miniBufferPosition == 3) //we must have reached the end of a 4-byte message
 8010bf4:	d1dd      	bne.n	8010bb2 <ProcessReceivedMidiDatas+0x16>
	switch(USB_message[1])
 8010bf6:	7873      	ldrb	r3, [r6, #1]
 8010bf8:	2b90      	cmp	r3, #144	; 0x90
 8010bfa:	d01a      	beq.n	8010c32 <ProcessReceivedMidiDatas+0x96>
 8010bfc:	d90a      	bls.n	8010c14 <ProcessReceivedMidiDatas+0x78>
 8010bfe:	2bb0      	cmp	r3, #176	; 0xb0
 8010c00:	d024      	beq.n	8010c4c <ProcessReceivedMidiDatas+0xb0>
 8010c02:	2be0      	cmp	r3, #224	; 0xe0
 8010c04:	d1d5      	bne.n	8010bb2 <ProcessReceivedMidiDatas+0x16>
			pitchBend((USB_message[2]) + (USB_message[3] << 7));
 8010c06:	78f0      	ldrb	r0, [r6, #3]
 8010c08:	78b3      	ldrb	r3, [r6, #2]
 8010c0a:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
 8010c0e:	f00b f957 	bl	801bec0 <pitchBend>
 8010c12:	e7ce      	b.n	8010bb2 <ProcessReceivedMidiDatas+0x16>
	switch(USB_message[1])
 8010c14:	2b80      	cmp	r3, #128	; 0x80
 8010c16:	d1cc      	bne.n	8010bb2 <ProcessReceivedMidiDatas+0x16>
			key = USB_message[2];
 8010c18:	78b2      	ldrb	r2, [r6, #2]
			velocity = USB_message[3];
 8010c1a:	78f3      	ldrb	r3, [r6, #3]
			key = USB_message[2];
 8010c1c:	491e      	ldr	r1, [pc, #120]	; (8010c98 <ProcessReceivedMidiDatas+0xfc>)
			noteOff(key, velocity);
 8010c1e:	4610      	mov	r0, r2
			velocity = USB_message[3];
 8010c20:	f8df c094 	ldr.w	ip, [pc, #148]	; 8010cb8 <ProcessReceivedMidiDatas+0x11c>
			key = USB_message[2];
 8010c24:	700a      	strb	r2, [r1, #0]
			noteOff(key, velocity);
 8010c26:	4619      	mov	r1, r3
			velocity = USB_message[3];
 8010c28:	f88c 3000 	strb.w	r3, [ip]
			noteOff(key, velocity);
 8010c2c:	f00a ff40 	bl	801bab0 <noteOff>
 8010c30:	e7bf      	b.n	8010bb2 <ProcessReceivedMidiDatas+0x16>
			key = USB_message[2];
 8010c32:	78b2      	ldrb	r2, [r6, #2]
			velocity = USB_message[3];
 8010c34:	78f3      	ldrb	r3, [r6, #3]
			key = USB_message[2];
 8010c36:	4918      	ldr	r1, [pc, #96]	; (8010c98 <ProcessReceivedMidiDatas+0xfc>)
			noteOn(key, velocity);
 8010c38:	4610      	mov	r0, r2
			velocity = USB_message[3];
 8010c3a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010cb8 <ProcessReceivedMidiDatas+0x11c>
			key = USB_message[2];
 8010c3e:	700a      	strb	r2, [r1, #0]
			noteOn(key, velocity);
 8010c40:	4619      	mov	r1, r3
			velocity = USB_message[3];
 8010c42:	f88c 3000 	strb.w	r3, [ip]
			noteOn(key, velocity);
 8010c46:	f00a ffdf 	bl	801bc08 <noteOn>
 8010c4a:	e7b2      	b.n	8010bb2 <ProcessReceivedMidiDatas+0x16>
			ctrl = USB_message[2];
 8010c4c:	78b3      	ldrb	r3, [r6, #2]
 8010c4e:	4913      	ldr	r1, [pc, #76]	; (8010c9c <ProcessReceivedMidiDatas+0x100>)
			data = USB_message[3];
 8010c50:	78f2      	ldrb	r2, [r6, #3]
			switch(ctrl)
 8010c52:	2b40      	cmp	r3, #64	; 0x40
			ctrl = USB_message[2];
 8010c54:	700b      	strb	r3, [r1, #0]
			CCs[ctrl] = data;
 8010c56:	4812      	ldr	r0, [pc, #72]	; (8010ca0 <ProcessReceivedMidiDatas+0x104>)
			data = USB_message[3];
 8010c58:	4912      	ldr	r1, [pc, #72]	; (8010ca4 <ProcessReceivedMidiDatas+0x108>)
			CCs[ctrl] = data;
 8010c5a:	54c2      	strb	r2, [r0, r3]
			data = USB_message[3];
 8010c5c:	700a      	strb	r2, [r1, #0]
			switch(ctrl)
 8010c5e:	d1a8      	bne.n	8010bb2 <ProcessReceivedMidiDatas+0x16>
 8010c60:	4b11      	ldr	r3, [pc, #68]	; (8010ca8 <ProcessReceivedMidiDatas+0x10c>)
 8010c62:	781b      	ldrb	r3, [r3, #0]
					if (data)
 8010c64:	b162      	cbz	r2, 8010c80 <ProcessReceivedMidiDatas+0xe4>
						if (sustainInverted) 	sustainOff();
 8010c66:	b16b      	cbz	r3, 8010c84 <ProcessReceivedMidiDatas+0xe8>
 8010c68:	f00b f936 	bl	801bed8 <sustainOff>
 8010c6c:	e7a1      	b.n	8010bb2 <ProcessReceivedMidiDatas+0x16>
	}
	if (processed >= 32)
 8010c6e:	2d20      	cmp	r5, #32
 8010c70:	d001      	beq.n	8010c76 <ProcessReceivedMidiDatas+0xda>
	{
		testInt = 1;
	}
}
 8010c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		testInt = 1;
 8010c76:	4b0d      	ldr	r3, [pc, #52]	; (8010cac <ProcessReceivedMidiDatas+0x110>)
 8010c78:	2201      	movs	r2, #1
 8010c7a:	601a      	str	r2, [r3, #0]
}
 8010c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						if (sustainInverted) 	sustainOn();
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d0f1      	beq.n	8010c68 <ProcessReceivedMidiDatas+0xcc>
						else					sustainOn();
 8010c84:	f00b f92a 	bl	801bedc <sustainOn>
 8010c88:	e793      	b.n	8010bb2 <ProcessReceivedMidiDatas+0x16>
 8010c8a:	bf00      	nop
 8010c8c:	2000065a 	.word	0x2000065a
 8010c90:	2000065c 	.word	0x2000065c
 8010c94:	20000708 	.word	0x20000708
 8010c98:	2000070c 	.word	0x2000070c
 8010c9c:	20000681 	.word	0x20000681
 8010ca0:	20000684 	.word	0x20000684
 8010ca4:	20000705 	.word	0x20000705
 8010ca8:	20000680 	.word	0x20000680
 8010cac:	200004d0 	.word	0x200004d0
 8010cb0:	20000659 	.word	0x20000659
 8010cb4:	200190dc 	.word	0x200190dc
 8010cb8:	20000704 	.word	0x20000704

08010cbc <MX_ADC1_Init>:
  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8010cbc:	4b49      	ldr	r3, [pc, #292]	; (8010de4 <MX_ADC1_Init+0x128>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8010cbe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  hadc1.Instance = ADC1;
 8010cc2:	4949      	ldr	r1, [pc, #292]	; (8010de8 <MX_ADC1_Init+0x12c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8010cc4:	2208      	movs	r2, #8
{
 8010cc6:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8010cc8:	6019      	str	r1, [r3, #0]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = 64;
 8010cca:	2140      	movs	r1, #64	; 0x40
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8010ccc:	6058      	str	r0, [r3, #4]
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8010cce:	20c0      	movs	r0, #192	; 0xc0
{
 8010cd0:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Init.NbrOfConversion = 6;
 8010cd2:	2506      	movs	r5, #6
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8010cd4:	2403      	movs	r4, #3
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8010cd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.Oversampling.Ratio = 64;
 8010cd8:	63d9      	str	r1, [r3, #60]	; 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 8010cda:	2200      	movs	r2, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8010cdc:	2101      	movs	r1, #1
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8010cde:	6418      	str	r0, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8010ce0:	4618      	mov	r0, r3
  hadc1.Init.NbrOfConversion = 6;
 8010ce2:	619d      	str	r5, [r3, #24]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8010ce4:	62dc      	str	r4, [r3, #44]	; 0x2c
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8010ce6:	609a      	str	r2, [r3, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8010ce8:	9200      	str	r2, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8010cea:	9203      	str	r2, [sp, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8010cec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8010cee:	771a      	strb	r2, [r3, #28]
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8010cf0:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8010cf2:	60d9      	str	r1, [r3, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8010cf4:	7559      	strb	r1, [r3, #21]
  hadc1.Init.OversamplingMode = ENABLE;
 8010cf6:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8010cfa:	6499      	str	r1, [r3, #72]	; 0x48
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8010cfc:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8010d00:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  ADC_MultiModeTypeDef multimode = {0};
 8010d04:	e9cd 2201 	strd	r2, r2, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8010d08:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8010d0c:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8010d10:	e9cd 2208 	strd	r2, r2, [sp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8010d14:	f7f1 f80a 	bl	8001d2c <HAL_ADC_Init>
 8010d18:	2800      	cmp	r0, #0
 8010d1a:	d160      	bne.n	8010dde <MX_ADC1_Init+0x122>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8010d1c:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8010d1e:	4669      	mov	r1, sp
 8010d20:	4830      	ldr	r0, [pc, #192]	; (8010de4 <MX_ADC1_Init+0x128>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8010d22:	9300      	str	r3, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8010d24:	f7f1 fb1c 	bl	8002360 <HAL_ADCEx_MultiModeConfigChannel>
 8010d28:	2800      	cmp	r0, #0
 8010d2a:	d155      	bne.n	8010dd8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8010d2c:	4b2f      	ldr	r3, [pc, #188]	; (8010dec <MX_ADC1_Init+0x130>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8010d2e:	2106      	movs	r1, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8010d30:	2005      	movs	r0, #5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8010d32:	f240 74ff 	movw	r4, #2047	; 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8010d36:	2204      	movs	r2, #4
  sConfig.Channel = ADC_CHANNEL_7;
 8010d38:	9303      	str	r3, [sp, #12]
  sConfig.Offset = 0;
 8010d3a:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8010d3c:	9104      	str	r1, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8010d3e:	9005      	str	r0, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010d40:	a903      	add	r1, sp, #12
 8010d42:	4828      	ldr	r0, [pc, #160]	; (8010de4 <MX_ADC1_Init+0x128>)
  sConfig.Offset = 0;
 8010d44:	9308      	str	r3, [sp, #32]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8010d46:	e9cd 4206 	strd	r4, r2, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010d4a:	f7f0 fa5b 	bl	8001204 <HAL_ADC_ConfigChannel>
 8010d4e:	2800      	cmp	r0, #0
 8010d50:	d13f      	bne.n	8010dd2 <MX_ADC1_Init+0x116>
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_19;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8010d52:	230c      	movs	r3, #12
  sConfig.Channel = ADC_CHANNEL_19;
 8010d54:	4a26      	ldr	r2, [pc, #152]	; (8010df0 <MX_ADC1_Init+0x134>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010d56:	4823      	ldr	r0, [pc, #140]	; (8010de4 <MX_ADC1_Init+0x128>)
 8010d58:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8010d5c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010d60:	f7f0 fa50 	bl	8001204 <HAL_ADC_ConfigChannel>
 8010d64:	bb90      	cbnz	r0, 8010dcc <MX_ADC1_Init+0x110>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8010d66:	4a23      	ldr	r2, [pc, #140]	; (8010df4 <MX_ADC1_Init+0x138>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8010d68:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010d6a:	a903      	add	r1, sp, #12
 8010d6c:	481d      	ldr	r0, [pc, #116]	; (8010de4 <MX_ADC1_Init+0x128>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8010d6e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010d72:	f7f0 fa47 	bl	8001204 <HAL_ADC_ConfigChannel>
 8010d76:	bb30      	cbnz	r0, 8010dc6 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8010d78:	4a1f      	ldr	r2, [pc, #124]	; (8010df8 <MX_ADC1_Init+0x13c>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8010d7a:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010d7c:	a903      	add	r1, sp, #12
 8010d7e:	4819      	ldr	r0, [pc, #100]	; (8010de4 <MX_ADC1_Init+0x128>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8010d80:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010d84:	f7f0 fa3e 	bl	8001204 <HAL_ADC_ConfigChannel>
 8010d88:	b9d0      	cbnz	r0, 8010dc0 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8010d8a:	4a1c      	ldr	r2, [pc, #112]	; (8010dfc <MX_ADC1_Init+0x140>)
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8010d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010d90:	a903      	add	r1, sp, #12
 8010d92:	4814      	ldr	r0, [pc, #80]	; (8010de4 <MX_ADC1_Init+0x128>)
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8010d94:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010d98:	f7f0 fa34 	bl	8001204 <HAL_ADC_ConfigChannel>
 8010d9c:	b968      	cbnz	r0, 8010dba <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8010d9e:	4a18      	ldr	r2, [pc, #96]	; (8010e00 <MX_ADC1_Init+0x144>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8010da0:	f44f 7383 	mov.w	r3, #262	; 0x106
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010da4:	a903      	add	r1, sp, #12
 8010da6:	480f      	ldr	r0, [pc, #60]	; (8010de4 <MX_ADC1_Init+0x128>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8010da8:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010dac:	f7f0 fa2a 	bl	8001204 <HAL_ADC_ConfigChannel>
 8010db0:	b108      	cbz	r0, 8010db6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8010db2:	f002 ff41 	bl	8013c38 <Error_Handler>
  }

}
 8010db6:	b00b      	add	sp, #44	; 0x2c
 8010db8:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8010dba:	f002 ff3d 	bl	8013c38 <Error_Handler>
 8010dbe:	e7ee      	b.n	8010d9e <MX_ADC1_Init+0xe2>
    Error_Handler();
 8010dc0:	f002 ff3a 	bl	8013c38 <Error_Handler>
 8010dc4:	e7e1      	b.n	8010d8a <MX_ADC1_Init+0xce>
    Error_Handler();
 8010dc6:	f002 ff37 	bl	8013c38 <Error_Handler>
 8010dca:	e7d5      	b.n	8010d78 <MX_ADC1_Init+0xbc>
    Error_Handler();
 8010dcc:	f002 ff34 	bl	8013c38 <Error_Handler>
 8010dd0:	e7c9      	b.n	8010d66 <MX_ADC1_Init+0xaa>
    Error_Handler();
 8010dd2:	f002 ff31 	bl	8013c38 <Error_Handler>
 8010dd6:	e7bc      	b.n	8010d52 <MX_ADC1_Init+0x96>
    Error_Handler();
 8010dd8:	f002 ff2e 	bl	8013c38 <Error_Handler>
 8010ddc:	e7a6      	b.n	8010d2c <MX_ADC1_Init+0x70>
    Error_Handler();
 8010dde:	f002 ff2b 	bl	8013c38 <Error_Handler>
 8010de2:	e79b      	b.n	8010d1c <MX_ADC1_Init+0x60>
 8010de4:	20000710 	.word	0x20000710
 8010de8:	40022000 	.word	0x40022000
 8010dec:	1d500080 	.word	0x1d500080
 8010df0:	4fb80000 	.word	0x4fb80000
 8010df4:	3ac04000 	.word	0x3ac04000
 8010df8:	43210000 	.word	0x43210000
 8010dfc:	3ef08000 	.word	0x3ef08000
 8010e00:	21800100 	.word	0x21800100

08010e04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8010e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
  if(adcHandle->Instance==ADC1)
 8010e08:	4b46      	ldr	r3, [pc, #280]	; (8010f24 <HAL_ADC_MspInit+0x120>)
{
 8010e0a:	b08f      	sub	sp, #60	; 0x3c
  if(adcHandle->Instance==ADC1)
 8010e0c:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e0e:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8010e10:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e12:	940d      	str	r4, [sp, #52]	; 0x34
 8010e14:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8010e18:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8010e1c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8010e20:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(adcHandle->Instance==ADC1)
 8010e24:	d002      	beq.n	8010e2c <HAL_ADC_MspInit+0x28>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8010e26:	b00f      	add	sp, #60	; 0x3c
 8010e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8010e2c:	4b3e      	ldr	r3, [pc, #248]	; (8010f28 <HAL_ADC_MspInit+0x124>)
 8010e2e:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8010e30:	2022      	movs	r0, #34	; 0x22
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010e32:	2703      	movs	r7, #3
    __HAL_RCC_ADC12_CLK_ENABLE();
 8010e34:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010e38:	a909      	add	r1, sp, #36	; 0x24
    hdma_adc1.Instance = DMA2_Stream0;
 8010e3a:	4d3c      	ldr	r5, [pc, #240]	; (8010f2c <HAL_ADC_MspInit+0x128>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8010e3c:	f042 0220 	orr.w	r2, r2, #32
 8010e40:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8010e44:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8010e48:	f002 0220 	and.w	r2, r2, #32
 8010e4c:	9201      	str	r2, [sp, #4]
 8010e4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010e50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010e54:	f042 0204 	orr.w	r2, r2, #4
 8010e58:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8010e5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010e60:	f002 0204 	and.w	r2, r2, #4
 8010e64:	9202      	str	r2, [sp, #8]
 8010e66:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010e6c:	f042 0201 	orr.w	r2, r2, #1
 8010e70:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8010e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8010e78:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e7a:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010e7e:	482c      	ldr	r0, [pc, #176]	; (8010f30 <HAL_ADC_MspInit+0x12c>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010e80:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e82:	9303      	str	r3, [sp, #12]
 8010e84:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010e86:	f7f4 faa9 	bl	80053dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5 
 8010e8a:	23ad      	movs	r3, #173	; 0xad
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e8c:	a909      	add	r1, sp, #36	; 0x24
 8010e8e:	4829      	ldr	r0, [pc, #164]	; (8010f34 <HAL_ADC_MspInit+0x130>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5 
 8010e90:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e92:	e9cd 740a 	strd	r7, r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e96:	f7f4 faa1 	bl	80053dc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8010e9a:	4b27      	ldr	r3, [pc, #156]	; (8010f38 <HAL_ADC_MspInit+0x134>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8010e9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8010ea0:	f04f 0e09 	mov.w	lr, #9
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010ea4:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010ea8:	f44f 5700 	mov.w	r7, #8192	; 0x2000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8010eac:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8010eb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_adc1.Instance = DMA2_Stream0;
 8010eb4:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8010eb6:	2304      	movs	r3, #4
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8010eb8:	6128      	str	r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8010eba:	4628      	mov	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010ebc:	60ac      	str	r4, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8010ebe:	60ec      	str	r4, [r5, #12]
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8010ec0:	632c      	str	r4, [r5, #48]	; 0x30
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8010ec2:	f8c5 e004 	str.w	lr, [r5, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8010ec6:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8010ec8:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010ecc:	e9c5 c705 	strd	ip, r7, [r5, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8010ed0:	e9c5 1207 	strd	r1, r2, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8010ed4:	f7f1 fcea 	bl	80028ac <HAL_DMA_Init>
 8010ed8:	b9f0      	cbnz	r0, 8010f18 <HAL_ADC_MspInit+0x114>
    pSyncConfig.EventEnable = ENABLE;
 8010eda:	2301      	movs	r3, #1
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8010edc:	f04f 0806 	mov.w	r8, #6
 8010ee0:	f44f 3900 	mov.w	r9, #131072	; 0x20000
    pSyncConfig.SyncEnable = DISABLE;
 8010ee4:	2200      	movs	r2, #0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc1, &pSyncConfig) != HAL_OK)
 8010ee6:	a904      	add	r1, sp, #16
 8010ee8:	4810      	ldr	r0, [pc, #64]	; (8010f2c <HAL_ADC_MspInit+0x128>)
    pSyncConfig.SyncEnable = DISABLE;
 8010eea:	f88d 2018 	strb.w	r2, [sp, #24]
    pSyncConfig.EventEnable = ENABLE;
 8010eee:	f88d 3019 	strb.w	r3, [sp, #25]
    pSyncConfig.RequestNumber = 1;
 8010ef2:	9307      	str	r3, [sp, #28]
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8010ef4:	e9cd 8904 	strd	r8, r9, [sp, #16]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc1, &pSyncConfig) != HAL_OK)
 8010ef8:	f7f3 fde8 	bl	8004acc <HAL_DMAEx_ConfigMuxSync>
 8010efc:	b978      	cbnz	r0, 8010f1e <HAL_ADC_MspInit+0x11a>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8010efe:	2200      	movs	r2, #0
 8010f00:	2105      	movs	r1, #5
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8010f02:	64f5      	str	r5, [r6, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8010f04:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8010f06:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8010f08:	f7f1 fb04 	bl	8002514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8010f0c:	2012      	movs	r0, #18
 8010f0e:	f7f1 fb47 	bl	80025a0 <HAL_NVIC_EnableIRQ>
}
 8010f12:	b00f      	add	sp, #60	; 0x3c
 8010f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8010f18:	f002 fe8e 	bl	8013c38 <Error_Handler>
 8010f1c:	e7dd      	b.n	8010eda <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 8010f1e:	f002 fe8b 	bl	8013c38 <Error_Handler>
 8010f22:	e7ec      	b.n	8010efe <HAL_ADC_MspInit+0xfa>
 8010f24:	40022000 	.word	0x40022000
 8010f28:	58024400 	.word	0x58024400
 8010f2c:	20000774 	.word	0x20000774
 8010f30:	58020800 	.word	0x58020800
 8010f34:	58020000 	.word	0x58020000
 8010f38:	40020410 	.word	0x40020410

08010f3c <audioFrame>:
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

void audioFrame(uint16_t buffer_offset)
{
 8010f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f40:	ed2d 8b04 	vpush	{d8-d9}
 8010f44:	b087      	sub	sp, #28
 8010f46:	4681      	mov	r9, r0
	//int32_t current_sample;
	uint32_t clipCatcher = 0;

	//tempCount5 = DWT->CYCCNT;

	buttonCheck();
 8010f48:	f00c f8b0 	bl	801d0ac <buttonCheck>

	adcCheck();
 8010f4c:	f00c fc46 	bl	801d7dc <adcCheck>

	// if the USB write pointer has advanced (indicating unread data is in the buffer),
	// or the overflow bit is set, meaning that the write pointer wrapped around and the read pointer hasn't caught up to it yet
	// then process that new data this frame
	if ((myUSB_FIFO_overflowBit) || (myUSB_FIFO_writePointer > myUSB_FIFO_readPointer))
 8010f50:	4bbb      	ldr	r3, [pc, #748]	; (8011240 <audioFrame+0x304>)
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	f040 816f 	bne.w	8011238 <audioFrame+0x2fc>
 8010f5a:	4bba      	ldr	r3, [pc, #744]	; (8011244 <audioFrame+0x308>)
 8010f5c:	4aba      	ldr	r2, [pc, #744]	; (8011248 <audioFrame+0x30c>)
 8010f5e:	881b      	ldrh	r3, [r3, #0]
 8010f60:	8812      	ldrh	r2, [r2, #0]
 8010f62:	429a      	cmp	r2, r3
 8010f64:	f0c0 8168 	bcc.w	8011238 <audioFrame+0x2fc>
	{
		ProcessReceivedMidiDatas();
	}


	if (!loadingPreset)
 8010f68:	4bb8      	ldr	r3, [pc, #736]	; (801124c <audioFrame+0x310>)
 8010f6a:	781b      	ldrb	r3, [r3, #0]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d154      	bne.n	801101a <audioFrame+0xde>
 8010f70:	4cb7      	ldr	r4, [pc, #732]	; (8011250 <audioFrame+0x314>)
 8010f72:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8011298 <audioFrame+0x35c>
 8010f76:	4627      	mov	r7, r4
 8010f78:	f104 0518 	add.w	r5, r4, #24
 8010f7c:	f8df b31c 	ldr.w	fp, [pc, #796]	; 801129c <audioFrame+0x360>
 8010f80:	4eb4      	ldr	r6, [pc, #720]	; (8011254 <audioFrame+0x318>)
	{

		for (int i = 0; i < NUM_ADC_CHANNELS; i++)
		{
			smoothedADC[i] = tExpSmooth_tick(&adc[i]);
 8010f82:	4640      	mov	r0, r8
 8010f84:	f108 0804 	add.w	r8, r8, #4
 8010f88:	f011 fd70 	bl	8022a6c <tExpSmooth_tick>
			for (int i = 0; i < KNOB_PAGE_SIZE; i++)
			{
				presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)] = smoothedADC[i];
 8010f8c:	4bb2      	ldr	r3, [pc, #712]	; (8011258 <audioFrame+0x31c>)
			smoothedADC[i] = tExpSmooth_tick(&adc[i]);
 8010f8e:	eca7 0a01 	vstmia	r7!, {s0}
		for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 8010f92:	42bd      	cmp	r5, r7
				presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)] = smoothedADC[i];
 8010f94:	f893 a000 	ldrb.w	sl, [r3]
 8010f98:	f89b 3000 	ldrb.w	r3, [fp]
 8010f9c:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
 8010fa0:	ed94 7a00 	vldr	s14, [r4]
 8010fa4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010fa8:	edd4 7a01 	vldr	s15, [r4, #4]
 8010fac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8010fb0:	f103 0c01 	add.w	ip, r3, #1
 8010fb4:	f103 0002 	add.w	r0, r3, #2
 8010fb8:	eb02 0e03 	add.w	lr, r2, r3
 8010fbc:	f103 0103 	add.w	r1, r3, #3
 8010fc0:	4494      	add	ip, r2
 8010fc2:	f103 0304 	add.w	r3, r3, #4
 8010fc6:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
 8010fca:	4410      	add	r0, r2
 8010fcc:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
 8010fd0:	4411      	add	r1, r2
 8010fd2:	ed8e 7a00 	vstr	s14, [lr]
 8010fd6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8010fda:	4413      	add	r3, r2
 8010fdc:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8010fe0:	edcc 7a00 	vstr	s15, [ip]
 8010fe4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8010fe8:	f8c0 e000 	str.w	lr, [r0]
 8010fec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010ff0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8010ff4:	6920      	ldr	r0, [r4, #16]
 8010ff6:	f8c1 c000 	str.w	ip, [r1]
 8010ffa:	6018      	str	r0, [r3, #0]
		for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 8010ffc:	d1c1      	bne.n	8010f82 <audioFrame+0x46>
			}
		}


		if (cvAddParam[currentPreset] >= 0)
 8010ffe:	4b97      	ldr	r3, [pc, #604]	; (801125c <audioFrame+0x320>)
 8011000:	f913 300a 	ldrsb.w	r3, [r3, sl]
 8011004:	2b00      	cmp	r3, #0
 8011006:	db04      	blt.n	8011012 <audioFrame+0xd6>
		{
			presetKnobValues[currentPreset][cvAddParam[currentPreset]] = smoothedADC[5];
 8011008:	441a      	add	r2, r3
 801100a:	6963      	ldr	r3, [r4, #20]
 801100c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8011010:	6013      	str	r3, [r2, #0]
		}

		frameFunctions[currentPreset]();
 8011012:	4b93      	ldr	r3, [pc, #588]	; (8011260 <audioFrame+0x324>)
 8011014:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 8011018:	4798      	blx	r3
	//if the codec isn't ready, keep the buffer as all zeros
	//otherwise, start computing audio!

	bufferCleared = TRUE;

	if (codecReady)
 801101a:	4b92      	ldr	r3, [pc, #584]	; (8011264 <audioFrame+0x328>)
	bufferCleared = TRUE;
 801101c:	2201      	movs	r2, #1
 801101e:	4992      	ldr	r1, [pc, #584]	; (8011268 <audioFrame+0x32c>)
	if (codecReady)
 8011020:	781b      	ldrb	r3, [r3, #0]
	bufferCleared = TRUE;
 8011022:	700a      	strb	r2, [r1, #0]
	if (codecReady)
 8011024:	2b00      	cmp	r3, #0
 8011026:	f000 813f 	beq.w	80112a8 <audioFrame+0x36c>
 801102a:	eb09 0402 	add.w	r4, r9, r2
	uint32_t clipCatcher = 0;
 801102e:	2500      	movs	r5, #0
 8011030:	f8df 826c 	ldr.w	r8, [pc, #620]	; 80112a0 <audioFrame+0x364>
 8011034:	4b85      	ldr	r3, [pc, #532]	; (801124c <audioFrame+0x310>)
 8011036:	00a4      	lsls	r4, r4, #2
 8011038:	9501      	str	r5, [sp, #4]
 801103a:	f508 6b00 	add.w	fp, r8, #2048	; 0x800
 801103e:	7819      	ldrb	r1, [r3, #0]
	{

		for (i = 0; i < (HALF_BUFFER_SIZE); i += 2)
		{
			float theSamples[2];
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8011040:	ed9f 8a8a 	vldr	s16, [pc, #552]	; 801126c <audioFrame+0x330>
	//uint32_t tempCount5 = DWT->CYCCNT;

	//cycleCountVals[1][2] = 0;


	if ((samples[1] >= 0.999999f) || (samples[1] <= -0.999999f))
 8011044:	eddf 9a8a 	vldr	s19, [pc, #552]	; 8011270 <audioFrame+0x334>
 8011048:	ed9f 9a8a 	vldr	s18, [pc, #552]	; 8011274 <audioFrame+0x338>
	{
		clips |= 2;
	}


	uint16_t current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[0], LEAF_clip(-1.0f, samples[1], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 801104c:	eddf 8a8a 	vldr	s17, [pc, #552]	; 8011278 <audioFrame+0x33c>
 8011050:	e00b      	b.n	801106a <audioFrame+0x12e>
	if (loadingPreset)
 8011052:	2300      	movs	r3, #0
 8011054:	461a      	mov	r2, r3
		for (i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 8011056:	3502      	adds	r5, #2
			audioOutBuffer[buffer_offset + i] = (int32_t)(theSamples[1] * TWO_TO_23);
 8011058:	f84b 2026 	str.w	r2, [fp, r6, lsl #2]
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(theSamples[0] * TWO_TO_23);
 801105c:	f84b 3004 	str.w	r3, [fp, r4]
 8011060:	3408      	adds	r4, #8
		for (i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 8011062:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8011066:	f000 8166 	beq.w	8011336 <audioFrame+0x3fa>
 801106a:	eb05 0609 	add.w	r6, r5, r9
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 801106e:	f858 2004 	ldr.w	r2, [r8, r4]
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8011072:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8011076:	0212      	lsls	r2, r2, #8
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8011078:	021b      	lsls	r3, r3, #8
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 801107a:	ee00 2a90 	vmov	s1, r2
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 801107e:	ee07 3a90 	vmov	s15, r3
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8011082:	eef8 0ae0 	vcvt.f32.s32	s1, s1
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8011086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 801108a:	ee60 0a88 	vmul.f32	s1, s1, s16
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 801108e:	ee67 7a88 	vmul.f32	s15, s15, s16
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8011092:	edcd 0a05 	vstr	s1, [sp, #20]
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8011096:	edcd 7a04 	vstr	s15, [sp, #16]
	if (loadingPreset)
 801109a:	2900      	cmp	r1, #0
 801109c:	d1d9      	bne.n	8011052 <audioFrame+0x116>
	if ((samples[1] >= 0.999999f) || (samples[1] <= -0.999999f))
 801109e:	eef4 0ae9 	vcmpe.f32	s1, s19
 80110a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a6:	eef4 0ac9 	vcmpe.f32	s1, s18
 80110aa:	bf94      	ite	ls
 80110ac:	2201      	movls	r2, #1
 80110ae:	2200      	movhi	r2, #0
 80110b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if ((samples[0] >= 0.999999f) || (samples[0] <= -0.999999f))
 80110b4:	eef4 7ac9 	vcmpe.f32	s15, s18
	uint32_t clips = 0;
 80110b8:	bfa8      	it	ge
 80110ba:	f042 0201 	orrge.w	r2, r2, #1
	if ((samples[0] >= 0.999999f) || (samples[0] <= -0.999999f))
 80110be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c2:	da04      	bge.n	80110ce <audioFrame+0x192>
 80110c4:	eef4 7a69 	vcmp.f32	s15, s19
 80110c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110cc:	d801      	bhi.n	80110d2 <audioFrame+0x196>
		clips |= 2;
 80110ce:	f042 0202 	orr.w	r2, r2, #2
	uint16_t current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[0], LEAF_clip(-1.0f, samples[1], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 80110d2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80110d6:	9203      	str	r2, [sp, #12]
 80110d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80110dc:	4f67      	ldr	r7, [pc, #412]	; (801127c <audioFrame+0x340>)
 80110de:	f013 f94f 	bl	8024380 <LEAF_clip>
 80110e2:	4867      	ldr	r0, [pc, #412]	; (8011280 <audioFrame+0x344>)
 80110e4:	f00d fe7a 	bl	801eddc <tEnvelopeFollower_tick>
 80110e8:	ee20 0a28 	vmul.f32	s0, s0, s17
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, current_env);
 80110ec:	4865      	ldr	r0, [pc, #404]	; (8011284 <audioFrame+0x348>)
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[2], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 80110ee:	a904      	add	r1, sp, #16
 80110f0:	eddd 0a04 	vldr	s1, [sp, #16]
 80110f4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	uint16_t current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[0], LEAF_clip(-1.0f, samples[1], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 80110f8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, current_env);
 80110fc:	6800      	ldr	r0, [r0, #0]
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[2], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 80110fe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011102:	9102      	str	r1, [sp, #8]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, current_env);
 8011104:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80112a4 <audioFrame+0x368>
	uint16_t current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[0], LEAF_clip(-1.0f, samples[1], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8011108:	ee17 3a90 	vmov	r3, s15
 801110c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8011110:	edd3 7a00 	vldr	s15, [r3]
 8011114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, current_env);
 8011118:	ee17 3a90 	vmov	r3, s15
 801111c:	b29b      	uxth	r3, r3
 801111e:	6383      	str	r3, [r0, #56]	; 0x38
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[2], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8011120:	f013 f92e 	bl	8024380 <LEAF_clip>
 8011124:	4858      	ldr	r0, [pc, #352]	; (8011288 <audioFrame+0x34c>)
 8011126:	f00d fe59 	bl	801eddc <tEnvelopeFollower_tick>
 801112a:	ee20 0a28 	vmul.f32	s0, s0, s17


	tickFunctions[currentPreset](samples);
 801112e:	9902      	ldr	r1, [sp, #8]
 8011130:	4b49      	ldr	r3, [pc, #292]	; (8011258 <audioFrame+0x31c>)
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[2], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8011132:	eefc 7ac0 	vcvt.u32.f32	s15, s0
	tickFunctions[currentPreset](samples);
 8011136:	4608      	mov	r0, r1
 8011138:	f893 e000 	ldrb.w	lr, [r3]
 801113c:	4b53      	ldr	r3, [pc, #332]	; (801128c <audioFrame+0x350>)
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[2], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 801113e:	ee17 1a90 	vmov	r1, s15
 8011142:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8011146:	edd1 7a00 	vldr	s15, [r1]
 801114a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, current_env);
 801114e:	ee17 2a90 	vmov	r2, s15
 8011152:	b291      	uxth	r1, r2
 8011154:	f8da 2000 	ldr.w	r2, [sl]
 8011158:	6391      	str	r1, [r2, #56]	; 0x38
	tickFunctions[currentPreset](samples);
 801115a:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 801115e:	4798      	blx	r3

	//now the samples array is output
	if ((samples[1] >= 0.999999f) || (samples[1] <= -0.999999f))
 8011160:	eddd 0a05 	vldr	s1, [sp, #20]
 8011164:	9a03      	ldr	r2, [sp, #12]
 8011166:	eef4 0ac9 	vcmpe.f32	s1, s18
 801116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116e:	da04      	bge.n	801117a <audioFrame+0x23e>
 8011170:	eef4 0a69 	vcmp.f32	s1, s19
 8011174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011178:	d801      	bhi.n	801117e <audioFrame+0x242>
	{
		clips |= 4;
 801117a:	f042 0204 	orr.w	r2, r2, #4
	}

	if ((samples[0] >= 0.999999f) || (samples[0] <= -0.999999f))
 801117e:	eddd 7a04 	vldr	s15, [sp, #16]
 8011182:	eef4 7ae9 	vcmpe.f32	s15, s19
 8011186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801118a:	d904      	bls.n	8011196 <audioFrame+0x25a>
 801118c:	eef4 7a49 	vcmp.f32	s15, s18
 8011190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011194:	db01      	blt.n	801119a <audioFrame+0x25e>
	{
		clips |= 8;
 8011196:	f042 0208 	orr.w	r2, r2, #8
 801119a:	9b01      	ldr	r3, [sp, #4]
	}
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[1], LEAF_clip(-1.0f, samples[1], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 801119c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80111a0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80111a4:	4313      	orrs	r3, r2
 80111a6:	9301      	str	r3, [sp, #4]
 80111a8:	f013 f8ea 	bl	8024380 <LEAF_clip>
 80111ac:	4838      	ldr	r0, [pc, #224]	; (8011290 <audioFrame+0x354>)
 80111ae:	f00d fe15 	bl	801eddc <tEnvelopeFollower_tick>
 80111b2:	ee60 7a28 	vmul.f32	s15, s0, s17
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, current_env);
 80111b6:	f8da 3000 	ldr.w	r3, [sl]
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[3], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 80111ba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80111be:	eddd 0a04 	vldr	s1, [sp, #16]
 80111c2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[1], LEAF_clip(-1.0f, samples[1], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 80111c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111ca:	ee17 2a90 	vmov	r2, s15
 80111ce:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80111d2:	edd2 7a00 	vldr	s15, [r2]
 80111d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, current_env);
 80111da:	ee17 2a90 	vmov	r2, s15
 80111de:	b292      	uxth	r2, r2
 80111e0:	63da      	str	r2, [r3, #60]	; 0x3c
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[3], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 80111e2:	f013 f8cd 	bl	8024380 <LEAF_clip>
 80111e6:	482b      	ldr	r0, [pc, #172]	; (8011294 <audioFrame+0x358>)
 80111e8:	f00d fdf8 	bl	801eddc <tEnvelopeFollower_tick>
 80111ec:	ee20 0a28 	vmul.f32	s0, s0, s17
 80111f0:	4b16      	ldr	r3, [pc, #88]	; (801124c <audioFrame+0x310>)
 80111f2:	ed9d 7a05 	vldr	s14, [sp, #20]
 80111f6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80111fa:	7819      	ldrb	r1, [r3, #0]
 80111fc:	eddd 7a04 	vldr	s15, [sp, #16]
 8011200:	eef0 6a47 	vmov.f32	s13, s14
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, current_env);
 8011204:	f8da c000 	ldr.w	ip, [sl]
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[3], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8011208:	ee10 3a10 	vmov	r3, s0
 801120c:	eeb0 7a67 	vmov.f32	s14, s15
 8011210:	eefe 6ae4 	vcvt.s32.f32	s13, s13, #23
 8011214:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8011218:	eebe 7ae4 	vcvt.s32.f32	s14, s14, #23
 801121c:	edd7 7a00 	vldr	s15, [r7]
 8011220:	ee16 2a90 	vmov	r2, s13
 8011224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011228:	ee17 3a10 	vmov	r3, s14
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, current_env);
 801122c:	ee17 0a90 	vmov	r0, s15
 8011230:	b280      	uxth	r0, r0
 8011232:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
 8011236:	e70e      	b.n	8011056 <audioFrame+0x11a>
		ProcessReceivedMidiDatas();
 8011238:	f7ff fcb0 	bl	8010b9c <ProcessReceivedMidiDatas>
 801123c:	e694      	b.n	8010f68 <audioFrame+0x2c>
 801123e:	bf00      	nop
 8011240:	20000659 	.word	0x20000659
 8011244:	2000065c 	.word	0x2000065c
 8011248:	2000065a 	.word	0x2000065a
 801124c:	20000657 	.word	0x20000657
 8011250:	20014304 	.word	0x20014304
 8011254:	20016710 	.word	0x20016710
 8011258:	20000655 	.word	0x20000655
 801125c:	20018938 	.word	0x20018938
 8011260:	200142bc 	.word	0x200142bc
 8011264:	200004f8 	.word	0x200004f8
 8011268:	20000009 	.word	0x20000009
 801126c:	2ffffff6 	.word	0x2ffffff6
 8011270:	bf7fffef 	.word	0xbf7fffef
 8011274:	3f7fffef 	.word	0x3f7fffef
 8011278:	43ff8000 	.word	0x43ff8000
 801127c:	2001432c 	.word	0x2001432c
 8011280:	2001431c 	.word	0x2001431c
 8011284:	200186b0 	.word	0x200186b0
 8011288:	20014324 	.word	0x20014324
 801128c:	200141bc 	.word	0x200141bc
 8011290:	20014320 	.word	0x20014320
 8011294:	20014328 	.word	0x20014328
 8011298:	200142a4 	.word	0x200142a4
 801129c:	20000656 	.word	0x20000656
 80112a0:	30000080 	.word	0x30000080
 80112a4:	20018670 	.word	0x20018670
	uint32_t clipCatcher = 0;
 80112a8:	9301      	str	r3, [sp, #4]
		numBuffersCleared++;
 80112aa:	4a4b      	ldr	r2, [pc, #300]	; (80113d8 <audioFrame+0x49c>)
		if (numBuffersCleared >= numBuffersToClearOnLoad)
 80112ac:	494b      	ldr	r1, [pc, #300]	; (80113dc <audioFrame+0x4a0>)
		numBuffersCleared++;
 80112ae:	6813      	ldr	r3, [r2, #0]
		if (numBuffersCleared >= numBuffersToClearOnLoad)
 80112b0:	6809      	ldr	r1, [r1, #0]
		numBuffersCleared++;
 80112b2:	3301      	adds	r3, #1
		if (numBuffersCleared >= numBuffersToClearOnLoad)
 80112b4:	428b      	cmp	r3, r1
		numBuffersCleared++;
 80112b6:	6013      	str	r3, [r2, #0]
		if (numBuffersCleared >= numBuffersToClearOnLoad)
 80112b8:	da47      	bge.n	801134a <audioFrame+0x40e>
	uint32_t clipCatcher = 0;
 80112ba:	2400      	movs	r4, #0
 80112bc:	4d48      	ldr	r5, [pc, #288]	; (80113e0 <audioFrame+0x4a4>)
 80112be:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8011408 <audioFrame+0x4cc>
			clipCounter[i] = 80;
 80112c2:	2750      	movs	r7, #80	; 0x50
			clipHappened[i] = 0;
 80112c4:	4e47      	ldr	r6, [pc, #284]	; (80113e4 <audioFrame+0x4a8>)
 80112c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
		if ((clipCatcher >> i) & 1)
 80112ca:	fa29 f304 	lsr.w	r3, r9, r4
 80112ce:	07db      	lsls	r3, r3, #31
 80112d0:	d51c      	bpl.n	801130c <audioFrame+0x3d0>
			switch (i)
 80112d2:	2c02      	cmp	r4, #2
 80112d4:	d06f      	beq.n	80113b6 <audioFrame+0x47a>
 80112d6:	2c03      	cmp	r4, #3
 80112d8:	d069      	beq.n	80113ae <audioFrame+0x472>
 80112da:	2c01      	cmp	r4, #1
 80112dc:	d063      	beq.n	80113a6 <audioFrame+0x46a>
					setLED_leftin_clip(1);
 80112de:	2001      	movs	r0, #1
 80112e0:	f002 fd32 	bl	8013d48 <setLED_leftin_clip>
			clipped[i] = 1;
 80112e4:	2101      	movs	r1, #1
			clipHappened[i] = 0;
 80112e6:	2200      	movs	r2, #0
 80112e8:	00a3      	lsls	r3, r4, #2
		if ((clipCounter[i] > 0) && (clipped[i] == 1))
 80112ea:	2050      	movs	r0, #80	; 0x50
			clipCounter[i] = 80;
 80112ec:	f845 7024 	str.w	r7, [r5, r4, lsl #2]
			clipped[i] = 1;
 80112f0:	f808 1004 	strb.w	r1, [r8, r4]
			clipHappened[i] = 0;
 80112f4:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
			clipCounter[i]--;
 80112f8:	3801      	subs	r0, #1
 80112fa:	50e8      	str	r0, [r5, r3]
	for (int i = 0; i < 4; i++)
 80112fc:	3401      	adds	r4, #1
 80112fe:	2c04      	cmp	r4, #4
 8011300:	d1e3      	bne.n	80112ca <audioFrame+0x38e>
}
 8011302:	b007      	add	sp, #28
 8011304:	ecbd 8b04 	vpop	{d8-d9}
 8011308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((clipCounter[i] > 0) && (clipped[i] == 1))
 801130c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8011310:	00a3      	lsls	r3, r4, #2
 8011312:	f818 2004 	ldrb.w	r2, [r8, r4]
 8011316:	2800      	cmp	r0, #0
 8011318:	d15a      	bne.n	80113d0 <audioFrame+0x494>
		else if ((clipCounter[i] == 0) && (clipped[i] == 1))
 801131a:	2a01      	cmp	r2, #1
 801131c:	d1ee      	bne.n	80112fc <audioFrame+0x3c0>
			switch (i)
 801131e:	2c02      	cmp	r4, #2
 8011320:	d04d      	beq.n	80113be <audioFrame+0x482>
 8011322:	2c03      	cmp	r4, #3
 8011324:	d051      	beq.n	80113ca <audioFrame+0x48e>
 8011326:	2c01      	cmp	r4, #1
 8011328:	d04c      	beq.n	80113c4 <audioFrame+0x488>
					setLED_leftin_clip(0);
 801132a:	f002 fd0d 	bl	8013d48 <setLED_leftin_clip>
			clipped[i] = 0;
 801132e:	2300      	movs	r3, #0
 8011330:	f808 3004 	strb.w	r3, [r8, r4]
 8011334:	e7e2      	b.n	80112fc <audioFrame+0x3c0>
			bufferCleared = 0;
 8011336:	4b2c      	ldr	r3, [pc, #176]	; (80113e8 <audioFrame+0x4ac>)
		if (!loadingPreset)
 8011338:	2900      	cmp	r1, #0
 801133a:	d032      	beq.n	80113a2 <audioFrame+0x466>
	if (bufferCleared)
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d1b3      	bne.n	80112aa <audioFrame+0x36e>
	else numBuffersCleared = 0;
 8011342:	4b25      	ldr	r3, [pc, #148]	; (80113d8 <audioFrame+0x49c>)
 8011344:	2200      	movs	r2, #0
 8011346:	601a      	str	r2, [r3, #0]
 8011348:	e7b7      	b.n	80112ba <audioFrame+0x37e>
			if (loadingPreset)
 801134a:	4b28      	ldr	r3, [pc, #160]	; (80113ec <audioFrame+0x4b0>)
			numBuffersCleared = numBuffersToClearOnLoad;
 801134c:	6011      	str	r1, [r2, #0]
			if (loadingPreset)
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d0b2      	beq.n	80112ba <audioFrame+0x37e>
				if (previousPreset != PresetNil)
 8011354:	4b26      	ldr	r3, [pc, #152]	; (80113f0 <audioFrame+0x4b4>)
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	2b12      	cmp	r3, #18
 801135a:	d003      	beq.n	8011364 <audioFrame+0x428>
					freeFunctions[previousPreset]();
 801135c:	4a25      	ldr	r2, [pc, #148]	; (80113f4 <audioFrame+0x4b8>)
 801135e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011362:	4798      	blx	r3
				setLED_A(0);
 8011364:	2000      	movs	r0, #0
				knobPage = 0;
 8011366:	4604      	mov	r4, r0
				setLED_A(0);
 8011368:	f002 fca6 	bl	8013cb8 <setLED_A>
				setLED_B(0);
 801136c:	4620      	mov	r0, r4
 801136e:	f002 fcb1 	bl	8013cd4 <setLED_B>
				setLED_C(0);
 8011372:	4620      	mov	r0, r4
 8011374:	f002 fcbc 	bl	8013cf0 <setLED_C>
				setLED_Edit(0);
 8011378:	4620      	mov	r0, r4
 801137a:	f002 fc61 	bl	8013c40 <setLED_Edit>
				setLED_1(0);
 801137e:	4620      	mov	r0, r4
 8011380:	f002 fc7a 	bl	8013c78 <setLED_1>
				knobPage = 0;
 8011384:	4b1c      	ldr	r3, [pc, #112]	; (80113f8 <audioFrame+0x4bc>)
 8011386:	701c      	strb	r4, [r3, #0]
				resetKnobValues();
 8011388:	f00c fb26 	bl	801d9d8 <resetKnobValues>
				allocFunctions[currentPreset]();
 801138c:	4b1b      	ldr	r3, [pc, #108]	; (80113fc <audioFrame+0x4c0>)
				leaf.clearOnAllocation = 0;
 801138e:	491c      	ldr	r1, [pc, #112]	; (8011400 <audioFrame+0x4c4>)
				allocFunctions[currentPreset]();
 8011390:	781a      	ldrb	r2, [r3, #0]
 8011392:	4b1c      	ldr	r3, [pc, #112]	; (8011404 <audioFrame+0x4c8>)
				leaf.clearOnAllocation = 0;
 8011394:	614c      	str	r4, [r1, #20]
				allocFunctions[currentPreset]();
 8011396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801139a:	4798      	blx	r3
				loadingPreset = 0;
 801139c:	4b13      	ldr	r3, [pc, #76]	; (80113ec <audioFrame+0x4b0>)
 801139e:	701c      	strb	r4, [r3, #0]
 80113a0:	e78b      	b.n	80112ba <audioFrame+0x37e>
			bufferCleared = 0;
 80113a2:	7019      	strb	r1, [r3, #0]
 80113a4:	e7cd      	b.n	8011342 <audioFrame+0x406>
					setLED_rightin_clip(1);
 80113a6:	4620      	mov	r0, r4
 80113a8:	f002 fcdc 	bl	8013d64 <setLED_rightin_clip>
					break;
 80113ac:	e79a      	b.n	80112e4 <audioFrame+0x3a8>
					setLED_rightout_clip(1);
 80113ae:	2001      	movs	r0, #1
 80113b0:	f002 fcbc 	bl	8013d2c <setLED_rightout_clip>
					break;
 80113b4:	e796      	b.n	80112e4 <audioFrame+0x3a8>
					setLED_leftout_clip(1);
 80113b6:	2001      	movs	r0, #1
 80113b8:	f002 fcaa 	bl	8013d10 <setLED_leftout_clip>
					break;
 80113bc:	e792      	b.n	80112e4 <audioFrame+0x3a8>
					setLED_leftout_clip(0);
 80113be:	f002 fca7 	bl	8013d10 <setLED_leftout_clip>
					break;
 80113c2:	e7b4      	b.n	801132e <audioFrame+0x3f2>
					setLED_rightin_clip(0);
 80113c4:	f002 fcce 	bl	8013d64 <setLED_rightin_clip>
					break;
 80113c8:	e7b1      	b.n	801132e <audioFrame+0x3f2>
					setLED_rightout_clip(0);
 80113ca:	f002 fcaf 	bl	8013d2c <setLED_rightout_clip>
					break;
 80113ce:	e7ae      	b.n	801132e <audioFrame+0x3f2>
		if ((clipCounter[i] > 0) && (clipped[i] == 1))
 80113d0:	2a01      	cmp	r2, #1
 80113d2:	d193      	bne.n	80112fc <audioFrame+0x3c0>
 80113d4:	e790      	b.n	80112f8 <audioFrame+0x3bc>
 80113d6:	bf00      	nop
 80113d8:	200004fc 	.word	0x200004fc
 80113dc:	2000000c 	.word	0x2000000c
 80113e0:	200004d4 	.word	0x200004d4
 80113e4:	200004e4 	.word	0x200004e4
 80113e8:	20000009 	.word	0x20000009
 80113ec:	20000657 	.word	0x20000657
 80113f0:	200002cc 	.word	0x200002cc
 80113f4:	20014208 	.word	0x20014208
 80113f8:	20000656 	.word	0x20000656
 80113fc:	20000655 	.word	0x20000655
 8011400:	200194a0 	.word	0x200194a0
 8011404:	20014258 	.word	0x20014258
 8011408:	200004f4 	.word	0x200004f4

0801140c <initFunctionPointers>:
}

*/

void initFunctionPointers(void)
{
 801140c:	b430      	push	{r4, r5}
	allocFunctions[Vocoder] = SFXVocoderAlloc;
 801140e:	484b      	ldr	r0, [pc, #300]	; (801153c <initFunctionPointers+0x130>)
 8011410:	4c4b      	ldr	r4, [pc, #300]	; (8011540 <initFunctionPointers+0x134>)
	frameFunctions[Vocoder] = SFXVocoderFrame;
	tickFunctions[Vocoder] = SFXVocoderTick;
	freeFunctions[Vocoder] = SFXVocoderFree;

	allocFunctions[VocoderCh] = SFXVocoderChAlloc;
 8011412:	4d4c      	ldr	r5, [pc, #304]	; (8011544 <initFunctionPointers+0x138>)
	allocFunctions[Vocoder] = SFXVocoderAlloc;
 8011414:	6004      	str	r4, [r0, #0]
	frameFunctions[VocoderCh] = SFXVocoderChFrame;
	tickFunctions[VocoderCh] = SFXVocoderChTick;
	freeFunctions[VocoderCh] = SFXVocoderChFree;

	allocFunctions[Pitchshift] = SFXPitchShiftAlloc;
 8011416:	4b4c      	ldr	r3, [pc, #304]	; (8011548 <initFunctionPointers+0x13c>)
	frameFunctions[Pitchshift] = SFXPitchShiftFrame;
	tickFunctions[Pitchshift] = SFXPitchShiftTick;
	freeFunctions[Pitchshift] = SFXPitchShiftFree;

	allocFunctions[AutotuneMono] = SFXNeartuneAlloc;
 8011418:	494c      	ldr	r1, [pc, #304]	; (801154c <initFunctionPointers+0x140>)
	frameFunctions[AutotuneMono] = SFXNeartuneFrame;
	tickFunctions[AutotuneMono] = SFXNeartuneTick;
	freeFunctions[AutotuneMono] = SFXNeartuneFree;

	allocFunctions[AutotunePoly] = SFXAutotuneAlloc;
 801141a:	4a4d      	ldr	r2, [pc, #308]	; (8011550 <initFunctionPointers+0x144>)
	frameFunctions[AutotunePoly] = SFXAutotuneFrame;
	tickFunctions[AutotunePoly] = SFXAutotuneTick;
	freeFunctions[AutotunePoly] = SFXAutotuneFree;

	allocFunctions[SamplerButtonPress] = SFXSamplerBPAlloc;
 801141c:	4c4d      	ldr	r4, [pc, #308]	; (8011554 <initFunctionPointers+0x148>)
	allocFunctions[VocoderCh] = SFXVocoderChAlloc;
 801141e:	6045      	str	r5, [r0, #4]
	allocFunctions[Pitchshift] = SFXPitchShiftAlloc;
 8011420:	6083      	str	r3, [r0, #8]
	allocFunctions[AutotuneMono] = SFXNeartuneAlloc;
 8011422:	60c1      	str	r1, [r0, #12]
	allocFunctions[AutotunePoly] = SFXAutotuneAlloc;
 8011424:	6102      	str	r2, [r0, #16]
	frameFunctions[Vocoder] = SFXVocoderFrame;
 8011426:	494c      	ldr	r1, [pc, #304]	; (8011558 <initFunctionPointers+0x14c>)
	allocFunctions[SamplerButtonPress] = SFXSamplerBPAlloc;
 8011428:	6144      	str	r4, [r0, #20]
	frameFunctions[SamplerButtonPress] = SFXSamplerBPFrame;
	tickFunctions[SamplerButtonPress] = SFXSamplerBPTick;
	freeFunctions[SamplerButtonPress] = SFXSamplerBPFree;

	allocFunctions[SamplerKeyboard] = SFXSamplerKAlloc;
 801142a:	4d4c      	ldr	r5, [pc, #304]	; (801155c <initFunctionPointers+0x150>)
	frameFunctions[SamplerKeyboard] = SFXSamplerKFrame;
	tickFunctions[SamplerKeyboard] = SFXSamplerKTick;
	freeFunctions[SamplerKeyboard] = SFXSamplerKFree;

	allocFunctions[SamplerAutoGrab] = SFXSamplerAutoAlloc;
 801142c:	4b4c      	ldr	r3, [pc, #304]	; (8011560 <initFunctionPointers+0x154>)
	frameFunctions[Vocoder] = SFXVocoderFrame;
 801142e:	4a4d      	ldr	r2, [pc, #308]	; (8011564 <initFunctionPointers+0x158>)
	frameFunctions[VocoderCh] = SFXVocoderChFrame;
 8011430:	4c4d      	ldr	r4, [pc, #308]	; (8011568 <initFunctionPointers+0x15c>)
	allocFunctions[SamplerKeyboard] = SFXSamplerKAlloc;
 8011432:	6185      	str	r5, [r0, #24]
	allocFunctions[SamplerAutoGrab] = SFXSamplerAutoAlloc;
 8011434:	61c3      	str	r3, [r0, #28]
	frameFunctions[Pitchshift] = SFXPitchShiftFrame;
 8011436:	4d4d      	ldr	r5, [pc, #308]	; (801156c <initFunctionPointers+0x160>)
	frameFunctions[AutotuneMono] = SFXNeartuneFrame;
 8011438:	4b4d      	ldr	r3, [pc, #308]	; (8011570 <initFunctionPointers+0x164>)
	frameFunctions[Vocoder] = SFXVocoderFrame;
 801143a:	600a      	str	r2, [r1, #0]
	frameFunctions[VocoderCh] = SFXVocoderChFrame;
 801143c:	604c      	str	r4, [r1, #4]
	frameFunctions[AutotunePoly] = SFXAutotuneFrame;
 801143e:	4a4d      	ldr	r2, [pc, #308]	; (8011574 <initFunctionPointers+0x168>)
	frameFunctions[SamplerButtonPress] = SFXSamplerBPFrame;
 8011440:	4c4d      	ldr	r4, [pc, #308]	; (8011578 <initFunctionPointers+0x16c>)
	frameFunctions[Pitchshift] = SFXPitchShiftFrame;
 8011442:	608d      	str	r5, [r1, #8]
	frameFunctions[AutotuneMono] = SFXNeartuneFrame;
 8011444:	60cb      	str	r3, [r1, #12]
	frameFunctions[SamplerKeyboard] = SFXSamplerKFrame;
 8011446:	4d4d      	ldr	r5, [pc, #308]	; (801157c <initFunctionPointers+0x170>)
	frameFunctions[SamplerAutoGrab] = SFXSamplerAutoFrame;
 8011448:	4b4d      	ldr	r3, [pc, #308]	; (8011580 <initFunctionPointers+0x174>)
	frameFunctions[AutotunePoly] = SFXAutotuneFrame;
 801144a:	610a      	str	r2, [r1, #16]
	frameFunctions[SamplerButtonPress] = SFXSamplerBPFrame;
 801144c:	614c      	str	r4, [r1, #20]
	tickFunctions[Vocoder] = SFXVocoderTick;
 801144e:	4a4d      	ldr	r2, [pc, #308]	; (8011584 <initFunctionPointers+0x178>)
 8011450:	4c4d      	ldr	r4, [pc, #308]	; (8011588 <initFunctionPointers+0x17c>)
	frameFunctions[SamplerKeyboard] = SFXSamplerKFrame;
 8011452:	618d      	str	r5, [r1, #24]
	frameFunctions[SamplerAutoGrab] = SFXSamplerAutoFrame;
 8011454:	61cb      	str	r3, [r1, #28]
	tickFunctions[VocoderCh] = SFXVocoderChTick;
 8011456:	4d4d      	ldr	r5, [pc, #308]	; (801158c <initFunctionPointers+0x180>)
	tickFunctions[Pitchshift] = SFXPitchShiftTick;
 8011458:	4b4d      	ldr	r3, [pc, #308]	; (8011590 <initFunctionPointers+0x184>)
	tickFunctions[Vocoder] = SFXVocoderTick;
 801145a:	6014      	str	r4, [r2, #0]
	tickFunctions[AutotuneMono] = SFXNeartuneTick;
 801145c:	4c4d      	ldr	r4, [pc, #308]	; (8011594 <initFunctionPointers+0x188>)
	tickFunctions[VocoderCh] = SFXVocoderChTick;
 801145e:	6055      	str	r5, [r2, #4]
	tickFunctions[Pitchshift] = SFXPitchShiftTick;
 8011460:	6093      	str	r3, [r2, #8]
	tickFunctions[AutotunePoly] = SFXAutotuneTick;
 8011462:	4d4d      	ldr	r5, [pc, #308]	; (8011598 <initFunctionPointers+0x18c>)
	tickFunctions[SamplerButtonPress] = SFXSamplerBPTick;
 8011464:	4b4d      	ldr	r3, [pc, #308]	; (801159c <initFunctionPointers+0x190>)
	tickFunctions[AutotuneMono] = SFXNeartuneTick;
 8011466:	60d4      	str	r4, [r2, #12]
	tickFunctions[SamplerKeyboard] = SFXSamplerKTick;
 8011468:	4c4d      	ldr	r4, [pc, #308]	; (80115a0 <initFunctionPointers+0x194>)
	tickFunctions[AutotunePoly] = SFXAutotuneTick;
 801146a:	6115      	str	r5, [r2, #16]
	tickFunctions[SamplerButtonPress] = SFXSamplerBPTick;
 801146c:	6153      	str	r3, [r2, #20]
	tickFunctions[SamplerAutoGrab] = SFXSamplerAutoTick;
 801146e:	4d4d      	ldr	r5, [pc, #308]	; (80115a4 <initFunctionPointers+0x198>)
	freeFunctions[Vocoder] = SFXVocoderFree;
 8011470:	4b4d      	ldr	r3, [pc, #308]	; (80115a8 <initFunctionPointers+0x19c>)
	tickFunctions[SamplerKeyboard] = SFXSamplerKTick;
 8011472:	6194      	str	r4, [r2, #24]
	freeFunctions[Vocoder] = SFXVocoderFree;
 8011474:	4c4d      	ldr	r4, [pc, #308]	; (80115ac <initFunctionPointers+0x1a0>)
	tickFunctions[SamplerAutoGrab] = SFXSamplerAutoTick;
 8011476:	61d5      	str	r5, [r2, #28]
	freeFunctions[Vocoder] = SFXVocoderFree;
 8011478:	601c      	str	r4, [r3, #0]
	freeFunctions[VocoderCh] = SFXVocoderChFree;
 801147a:	4d4d      	ldr	r5, [pc, #308]	; (80115b0 <initFunctionPointers+0x1a4>)
	freeFunctions[Pitchshift] = SFXPitchShiftFree;
 801147c:	4c4d      	ldr	r4, [pc, #308]	; (80115b4 <initFunctionPointers+0x1a8>)
	freeFunctions[VocoderCh] = SFXVocoderChFree;
 801147e:	605d      	str	r5, [r3, #4]
	freeFunctions[Pitchshift] = SFXPitchShiftFree;
 8011480:	609c      	str	r4, [r3, #8]
	freeFunctions[AutotuneMono] = SFXNeartuneFree;
 8011482:	4d4d      	ldr	r5, [pc, #308]	; (80115b8 <initFunctionPointers+0x1ac>)
	freeFunctions[AutotunePoly] = SFXAutotuneFree;
 8011484:	4c4d      	ldr	r4, [pc, #308]	; (80115bc <initFunctionPointers+0x1b0>)
	freeFunctions[AutotuneMono] = SFXNeartuneFree;
 8011486:	60dd      	str	r5, [r3, #12]
	freeFunctions[AutotunePoly] = SFXAutotuneFree;
 8011488:	611c      	str	r4, [r3, #16]
	freeFunctions[SamplerButtonPress] = SFXSamplerBPFree;
 801148a:	4d4d      	ldr	r5, [pc, #308]	; (80115c0 <initFunctionPointers+0x1b4>)
	freeFunctions[SamplerKeyboard] = SFXSamplerKFree;
 801148c:	4c4d      	ldr	r4, [pc, #308]	; (80115c4 <initFunctionPointers+0x1b8>)
	freeFunctions[SamplerButtonPress] = SFXSamplerBPFree;
 801148e:	615d      	str	r5, [r3, #20]
	freeFunctions[SamplerKeyboard] = SFXSamplerKFree;
 8011490:	619c      	str	r4, [r3, #24]
	freeFunctions[SamplerAutoGrab] = SFXSamplerAutoFree;
 8011492:	4d4d      	ldr	r5, [pc, #308]	; (80115c8 <initFunctionPointers+0x1bc>)

	allocFunctions[Distortion] = SFXDistortionAlloc;
 8011494:	4c4d      	ldr	r4, [pc, #308]	; (80115cc <initFunctionPointers+0x1c0>)
	freeFunctions[SamplerAutoGrab] = SFXSamplerAutoFree;
 8011496:	61dd      	str	r5, [r3, #28]
	allocFunctions[Distortion] = SFXDistortionAlloc;
 8011498:	6204      	str	r4, [r0, #32]
	frameFunctions[Distortion] = SFXDistortionFrame;
 801149a:	4d4d      	ldr	r5, [pc, #308]	; (80115d0 <initFunctionPointers+0x1c4>)
	tickFunctions[Distortion] = SFXDistortionTick;
 801149c:	4c4d      	ldr	r4, [pc, #308]	; (80115d4 <initFunctionPointers+0x1c8>)
	frameFunctions[Distortion] = SFXDistortionFrame;
 801149e:	620d      	str	r5, [r1, #32]
	tickFunctions[Distortion] = SFXDistortionTick;
 80114a0:	6214      	str	r4, [r2, #32]
	freeFunctions[Distortion] = SFXDistortionFree;
 80114a2:	4d4d      	ldr	r5, [pc, #308]	; (80115d8 <initFunctionPointers+0x1cc>)

	allocFunctions[Wavefolder] = SFXWaveFolderAlloc;
 80114a4:	4c4d      	ldr	r4, [pc, #308]	; (80115dc <initFunctionPointers+0x1d0>)
	freeFunctions[Distortion] = SFXDistortionFree;
 80114a6:	621d      	str	r5, [r3, #32]
	allocFunctions[Wavefolder] = SFXWaveFolderAlloc;
 80114a8:	6244      	str	r4, [r0, #36]	; 0x24
	frameFunctions[Wavefolder] = SFXWaveFolderFrame;
 80114aa:	4d4d      	ldr	r5, [pc, #308]	; (80115e0 <initFunctionPointers+0x1d4>)
	tickFunctions[Wavefolder] = SFXWaveFolderTick;
 80114ac:	4c4d      	ldr	r4, [pc, #308]	; (80115e4 <initFunctionPointers+0x1d8>)
	frameFunctions[Wavefolder] = SFXWaveFolderFrame;
 80114ae:	624d      	str	r5, [r1, #36]	; 0x24
	tickFunctions[Wavefolder] = SFXWaveFolderTick;
 80114b0:	6254      	str	r4, [r2, #36]	; 0x24
	freeFunctions[Wavefolder] = SFXWaveFolderFree;
 80114b2:	4d4d      	ldr	r5, [pc, #308]	; (80115e8 <initFunctionPointers+0x1dc>)

	allocFunctions[BitCrusher] = SFXBitcrusherAlloc;
 80114b4:	4c4d      	ldr	r4, [pc, #308]	; (80115ec <initFunctionPointers+0x1e0>)
	freeFunctions[Wavefolder] = SFXWaveFolderFree;
 80114b6:	625d      	str	r5, [r3, #36]	; 0x24
	allocFunctions[BitCrusher] = SFXBitcrusherAlloc;
 80114b8:	6284      	str	r4, [r0, #40]	; 0x28
	frameFunctions[BitCrusher] = SFXBitcrusherFrame;
 80114ba:	4d4d      	ldr	r5, [pc, #308]	; (80115f0 <initFunctionPointers+0x1e4>)
	tickFunctions[BitCrusher] = SFXBitcrusherTick;
 80114bc:	4c4d      	ldr	r4, [pc, #308]	; (80115f4 <initFunctionPointers+0x1e8>)
	frameFunctions[BitCrusher] = SFXBitcrusherFrame;
 80114be:	628d      	str	r5, [r1, #40]	; 0x28
	tickFunctions[BitCrusher] = SFXBitcrusherTick;
 80114c0:	6294      	str	r4, [r2, #40]	; 0x28
	freeFunctions[BitCrusher] = SFXBitcrusherFree;
 80114c2:	4d4d      	ldr	r5, [pc, #308]	; (80115f8 <initFunctionPointers+0x1ec>)

	allocFunctions[Delay] = SFXDelayAlloc;
 80114c4:	4c4d      	ldr	r4, [pc, #308]	; (80115fc <initFunctionPointers+0x1f0>)
	freeFunctions[BitCrusher] = SFXBitcrusherFree;
 80114c6:	629d      	str	r5, [r3, #40]	; 0x28
	allocFunctions[Delay] = SFXDelayAlloc;
 80114c8:	62c4      	str	r4, [r0, #44]	; 0x2c
	frameFunctions[Delay] = SFXDelayFrame;
 80114ca:	4d4d      	ldr	r5, [pc, #308]	; (8011600 <initFunctionPointers+0x1f4>)
	tickFunctions[Delay] = SFXDelayTick;
 80114cc:	4c4d      	ldr	r4, [pc, #308]	; (8011604 <initFunctionPointers+0x1f8>)
	frameFunctions[Delay] = SFXDelayFrame;
 80114ce:	62cd      	str	r5, [r1, #44]	; 0x2c
	tickFunctions[Delay] = SFXDelayTick;
 80114d0:	62d4      	str	r4, [r2, #44]	; 0x2c
	freeFunctions[Delay] = SFXDelayFree;
 80114d2:	4d4d      	ldr	r5, [pc, #308]	; (8011608 <initFunctionPointers+0x1fc>)

	allocFunctions[Reverb] = SFXReverbAlloc;
 80114d4:	4c4d      	ldr	r4, [pc, #308]	; (801160c <initFunctionPointers+0x200>)
	freeFunctions[Delay] = SFXDelayFree;
 80114d6:	62dd      	str	r5, [r3, #44]	; 0x2c
	allocFunctions[Reverb] = SFXReverbAlloc;
 80114d8:	6304      	str	r4, [r0, #48]	; 0x30
	frameFunctions[Reverb] = SFXReverbFrame;
 80114da:	4d4d      	ldr	r5, [pc, #308]	; (8011610 <initFunctionPointers+0x204>)
	tickFunctions[Reverb] = SFXReverbTick;
 80114dc:	4c4d      	ldr	r4, [pc, #308]	; (8011614 <initFunctionPointers+0x208>)
	frameFunctions[Reverb] = SFXReverbFrame;
 80114de:	630d      	str	r5, [r1, #48]	; 0x30
	tickFunctions[Reverb] = SFXReverbTick;
 80114e0:	6314      	str	r4, [r2, #48]	; 0x30
	freeFunctions[Reverb] = SFXReverbFree;
 80114e2:	4d4d      	ldr	r5, [pc, #308]	; (8011618 <initFunctionPointers+0x20c>)

	allocFunctions[Reverb2] = SFXReverb2Alloc;
 80114e4:	4c4d      	ldr	r4, [pc, #308]	; (801161c <initFunctionPointers+0x210>)
	freeFunctions[Reverb] = SFXReverbFree;
 80114e6:	631d      	str	r5, [r3, #48]	; 0x30
	allocFunctions[Reverb2] = SFXReverb2Alloc;
 80114e8:	6344      	str	r4, [r0, #52]	; 0x34
	frameFunctions[Reverb2] = SFXReverb2Frame;
 80114ea:	4d4d      	ldr	r5, [pc, #308]	; (8011620 <initFunctionPointers+0x214>)
	tickFunctions[Reverb2] = SFXReverb2Tick;
 80114ec:	4c4d      	ldr	r4, [pc, #308]	; (8011624 <initFunctionPointers+0x218>)
	frameFunctions[Reverb2] = SFXReverb2Frame;
 80114ee:	634d      	str	r5, [r1, #52]	; 0x34
	tickFunctions[Reverb2] = SFXReverb2Tick;
 80114f0:	6354      	str	r4, [r2, #52]	; 0x34
	freeFunctions[Reverb2] = SFXReverb2Free;
 80114f2:	4d4d      	ldr	r5, [pc, #308]	; (8011628 <initFunctionPointers+0x21c>)

	allocFunctions[LivingString] = SFXLivingStringAlloc;
 80114f4:	4c4d      	ldr	r4, [pc, #308]	; (801162c <initFunctionPointers+0x220>)
	freeFunctions[Reverb2] = SFXReverb2Free;
 80114f6:	635d      	str	r5, [r3, #52]	; 0x34
	allocFunctions[LivingString] = SFXLivingStringAlloc;
 80114f8:	6384      	str	r4, [r0, #56]	; 0x38
	frameFunctions[LivingString] = SFXLivingStringFrame;
 80114fa:	4d4d      	ldr	r5, [pc, #308]	; (8011630 <initFunctionPointers+0x224>)
	tickFunctions[LivingString] = SFXLivingStringTick;
 80114fc:	4c4d      	ldr	r4, [pc, #308]	; (8011634 <initFunctionPointers+0x228>)
	frameFunctions[LivingString] = SFXLivingStringFrame;
 80114fe:	638d      	str	r5, [r1, #56]	; 0x38
	tickFunctions[LivingString] = SFXLivingStringTick;
 8011500:	6394      	str	r4, [r2, #56]	; 0x38
	freeFunctions[LivingString] = SFXLivingStringFree;
 8011502:	4d4d      	ldr	r5, [pc, #308]	; (8011638 <initFunctionPointers+0x22c>)

	allocFunctions[LivingStringSynth] = SFXLivingStringSynthAlloc;
 8011504:	4c4d      	ldr	r4, [pc, #308]	; (801163c <initFunctionPointers+0x230>)
	freeFunctions[LivingString] = SFXLivingStringFree;
 8011506:	639d      	str	r5, [r3, #56]	; 0x38
	allocFunctions[LivingStringSynth] = SFXLivingStringSynthAlloc;
 8011508:	63c4      	str	r4, [r0, #60]	; 0x3c
	frameFunctions[LivingStringSynth] = SFXLivingStringSynthFrame;
 801150a:	4d4d      	ldr	r5, [pc, #308]	; (8011640 <initFunctionPointers+0x234>)
	tickFunctions[LivingStringSynth] = SFXLivingStringSynthTick;
 801150c:	4c4d      	ldr	r4, [pc, #308]	; (8011644 <initFunctionPointers+0x238>)
	frameFunctions[LivingStringSynth] = SFXLivingStringSynthFrame;
 801150e:	63cd      	str	r5, [r1, #60]	; 0x3c
	tickFunctions[LivingStringSynth] = SFXLivingStringSynthTick;
 8011510:	63d4      	str	r4, [r2, #60]	; 0x3c
	freeFunctions[LivingStringSynth] = SFXLivingStringSynthFree;
 8011512:	4d4d      	ldr	r5, [pc, #308]	; (8011648 <initFunctionPointers+0x23c>)

	allocFunctions[ClassicSynth] = SFXClassicSynthAlloc;
 8011514:	4c4d      	ldr	r4, [pc, #308]	; (801164c <initFunctionPointers+0x240>)
	freeFunctions[LivingStringSynth] = SFXLivingStringSynthFree;
 8011516:	63dd      	str	r5, [r3, #60]	; 0x3c
	allocFunctions[ClassicSynth] = SFXClassicSynthAlloc;
 8011518:	6404      	str	r4, [r0, #64]	; 0x40
	frameFunctions[ClassicSynth] = SFXClassicSynthFrame;
 801151a:	4d4d      	ldr	r5, [pc, #308]	; (8011650 <initFunctionPointers+0x244>)
	tickFunctions[ClassicSynth] = SFXClassicSynthTick;
 801151c:	4c4d      	ldr	r4, [pc, #308]	; (8011654 <initFunctionPointers+0x248>)
	frameFunctions[ClassicSynth] = SFXClassicSynthFrame;
 801151e:	640d      	str	r5, [r1, #64]	; 0x40
	tickFunctions[ClassicSynth] = SFXClassicSynthTick;
 8011520:	6414      	str	r4, [r2, #64]	; 0x40
	freeFunctions[ClassicSynth] = SFXClassicSynthFree;
 8011522:	4d4d      	ldr	r5, [pc, #308]	; (8011658 <initFunctionPointers+0x24c>)

	allocFunctions[Rhodes] = SFXRhodesAlloc;
 8011524:	4c4d      	ldr	r4, [pc, #308]	; (801165c <initFunctionPointers+0x250>)
	freeFunctions[ClassicSynth] = SFXClassicSynthFree;
 8011526:	641d      	str	r5, [r3, #64]	; 0x40
	allocFunctions[Rhodes] = SFXRhodesAlloc;
 8011528:	6444      	str	r4, [r0, #68]	; 0x44
	frameFunctions[Rhodes] = SFXRhodesFrame;
 801152a:	4d4d      	ldr	r5, [pc, #308]	; (8011660 <initFunctionPointers+0x254>)
	tickFunctions[Rhodes] = SFXRhodesTick;
 801152c:	4c4d      	ldr	r4, [pc, #308]	; (8011664 <initFunctionPointers+0x258>)
	freeFunctions[Rhodes] = SFXRhodesFree;
 801152e:	484e      	ldr	r0, [pc, #312]	; (8011668 <initFunctionPointers+0x25c>)
	frameFunctions[Rhodes] = SFXRhodesFrame;
 8011530:	644d      	str	r5, [r1, #68]	; 0x44
	tickFunctions[Rhodes] = SFXRhodesTick;
 8011532:	6454      	str	r4, [r2, #68]	; 0x44
	freeFunctions[Rhodes] = SFXRhodesFree;
 8011534:	6458      	str	r0, [r3, #68]	; 0x44
}
 8011536:	bc30      	pop	{r4, r5}
 8011538:	4770      	bx	lr
 801153a:	bf00      	nop
 801153c:	20014258 	.word	0x20014258
 8011540:	08015011 	.word	0x08015011
 8011544:	08015625 	.word	0x08015625
 8011548:	080164b9 	.word	0x080164b9
 801154c:	0801678d 	.word	0x0801678d
 8011550:	08016941 	.word	0x08016941
 8011554:	08016b39 	.word	0x08016b39
 8011558:	200142bc 	.word	0x200142bc
 801155c:	08016ea1 	.word	0x08016ea1
 8011560:	080178e1 	.word	0x080178e1
 8011564:	08015165 	.word	0x08015165
 8011568:	08015a41 	.word	0x08015a41
 801156c:	08016575 	.word	0x08016575
 8011570:	08016865 	.word	0x08016865
 8011574:	08016969 	.word	0x08016969
 8011578:	08016bdd 	.word	0x08016bdd
 801157c:	08017009 	.word	0x08017009
 8011580:	08017a0d 	.word	0x08017a0d
 8011584:	200141bc 	.word	0x200141bc
 8011588:	080153d9 	.word	0x080153d9
 801158c:	08016115 	.word	0x08016115
 8011590:	08016579 	.word	0x08016579
 8011594:	0801b889 	.word	0x0801b889
 8011598:	08016a69 	.word	0x08016a69
 801159c:	08016be1 	.word	0x08016be1
 80115a0:	080172e9 	.word	0x080172e9
 80115a4:	08017a39 	.word	0x08017a39
 80115a8:	20014208 	.word	0x20014208
 80115ac:	080155b1 	.word	0x080155b1
 80115b0:	08016405 	.word	0x08016405
 80115b4:	08016741 	.word	0x08016741
 80115b8:	0801691d 	.word	0x0801691d
 80115bc:	08016b2d 	.word	0x08016b2d
 80115c0:	08016e71 	.word	0x08016e71
 80115c4:	080178b1 	.word	0x080178b1
 80115c8:	08017fc9 	.word	0x08017fc9
 80115cc:	08018009 	.word	0x08018009
 80115d0:	080180e5 	.word	0x080180e5
 80115d4:	080181ad 	.word	0x080181ad
 80115d8:	08018299 	.word	0x08018299
 80115dc:	080182c9 	.word	0x080182c9
 80115e0:	08018325 	.word	0x08018325
 80115e4:	0801834d 	.word	0x0801834d
 80115e8:	08018461 	.word	0x08018461
 80115ec:	08018491 	.word	0x08018491
 80115f0:	080184c1 	.word	0x080184c1
 80115f4:	080184e9 	.word	0x080184e9
 80115f8:	08018651 	.word	0x08018651
 80115fc:	0801866d 	.word	0x0801866d
 8011600:	08018761 	.word	0x08018761
 8011604:	080187c5 	.word	0x080187c5
 8011608:	08018a3d 	.word	0x08018a3d
 801160c:	08018a95 	.word	0x08018a95
 8011610:	08018ae5 	.word	0x08018ae5
 8011614:	08018b75 	.word	0x08018b75
 8011618:	08018c75 	.word	0x08018c75
 801161c:	08018c91 	.word	0x08018c91
 8011620:	08018d5d 	.word	0x08018d5d
 8011624:	08018d61 	.word	0x08018d61
 8011628:	08018f1d 	.word	0x08018f1d
 801162c:	08018f69 	.word	0x08018f69
 8011630:	08019059 	.word	0x08019059
 8011634:	080194b5 	.word	0x080194b5
 8011638:	0801950d 	.word	0x0801950d
 801163c:	08019531 	.word	0x08019531
 8011640:	080196a9 	.word	0x080196a9
 8011644:	08019a15 	.word	0x08019a15
 8011648:	08019add 	.word	0x08019add
 801164c:	08019b35 	.word	0x08019b35
 8011650:	08019e41 	.word	0x08019e41
 8011654:	0801a4e9 	.word	0x0801a4e9
 8011658:	0801a61d 	.word	0x0801a61d
 801165c:	0801a69d 	.word	0x0801a69d
 8011660:	0801a801 	.word	0x0801a801
 8011664:	0801b221 	.word	0x0801b221
 8011668:	0801b59d 	.word	0x0801b59d

0801166c <audioInit>:
{
 801166c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, medium_memory, MED_MEM_SIZE, &randomNumber);
 8011670:	4b47      	ldr	r3, [pc, #284]	; (8011790 <audioInit+0x124>)
{
 8011672:	4606      	mov	r6, r0
	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, medium_memory, MED_MEM_SIZE, &randomNumber);
 8011674:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8011794 <audioInit+0x128>
 8011678:	2080      	movs	r0, #128	; 0x80
{
 801167a:	4688      	mov	r8, r1
 801167c:	4617      	mov	r7, r2
	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, medium_memory, MED_MEM_SIZE, &randomNumber);
 801167e:	4946      	ldr	r1, [pc, #280]	; (8011798 <audioInit+0x12c>)
 8011680:	4a46      	ldr	r2, [pc, #280]	; (801179c <audioInit+0x130>)
 8011682:	4c47      	ldr	r4, [pc, #284]	; (80117a0 <audioInit+0x134>)
{
 8011684:	ed2d 8b02 	vpush	{d8}
 8011688:	b086      	sub	sp, #24
		tExpSmooth_init(&adc[i], 0.0f, 0.2f);
 801168a:	eddf 8a46 	vldr	s17, [pc, #280]	; 80117a4 <audioInit+0x138>
	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, medium_memory, MED_MEM_SIZE, &randomNumber);
 801168e:	f015 fedd 	bl	802744c <LEAF_init>
	tMempool_init (&smallPool, small_memory, SMALL_MEM_SIZE);
 8011692:	4a45      	ldr	r2, [pc, #276]	; (80117a8 <audioInit+0x13c>)
 8011694:	4945      	ldr	r1, [pc, #276]	; (80117ac <audioInit+0x140>)
 8011696:	f104 0518 	add.w	r5, r4, #24
 801169a:	4845      	ldr	r0, [pc, #276]	; (80117b0 <audioInit+0x144>)
 801169c:	f013 f984 	bl	80249a8 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE);
 80116a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80116a4:	4943      	ldr	r1, [pc, #268]	; (80117b4 <audioInit+0x148>)
 80116a6:	4844      	ldr	r0, [pc, #272]	; (80117b8 <audioInit+0x14c>)
		tExpSmooth_init(&adc[i], 0.0f, 0.2f);
 80116a8:	ed9f 8a44 	vldr	s16, [pc, #272]	; 80117bc <audioInit+0x150>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE);
 80116ac:	f013 f97c 	bl	80249a8 <tMempool_init>
	initFunctionPointers();
 80116b0:	f7ff feac 	bl	801140c <initFunctionPointers>
		tExpSmooth_init(&adc[i], 0.0f, 0.2f);
 80116b4:	4620      	mov	r0, r4
 80116b6:	3404      	adds	r4, #4
 80116b8:	eef0 0a68 	vmov.f32	s1, s17
 80116bc:	eeb0 0a48 	vmov.f32	s0, s16
 80116c0:	f011 f964 	bl	802298c <tExpSmooth_init>
	for (int i = 0; i < 6; i++)
 80116c4:	42ac      	cmp	r4, r5
 80116c6:	d1f5      	bne.n	80116b4 <audioInit+0x48>
		tEnvelopeFollower_init(&LED_envelope[i], 0.0001f, .9995f);
 80116c8:	eddf 0a3d 	vldr	s1, [pc, #244]	; 80117c0 <audioInit+0x154>
	loadingPreset = 1;
 80116cc:	2401      	movs	r4, #1
		tEnvelopeFollower_init(&LED_envelope[i], 0.0001f, .9995f);
 80116ce:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80117c4 <audioInit+0x158>
 80116d2:	483d      	ldr	r0, [pc, #244]	; (80117c8 <audioInit+0x15c>)
 80116d4:	f00d fb4a 	bl	801ed6c <tEnvelopeFollower_init>
 80116d8:	eddf 0a39 	vldr	s1, [pc, #228]	; 80117c0 <audioInit+0x154>
 80116dc:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80117c4 <audioInit+0x158>
 80116e0:	483a      	ldr	r0, [pc, #232]	; (80117cc <audioInit+0x160>)
 80116e2:	f00d fb43 	bl	801ed6c <tEnvelopeFollower_init>
 80116e6:	eddf 0a36 	vldr	s1, [pc, #216]	; 80117c0 <audioInit+0x154>
 80116ea:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80117c4 <audioInit+0x158>
 80116ee:	4838      	ldr	r0, [pc, #224]	; (80117d0 <audioInit+0x164>)
 80116f0:	f00d fb3c 	bl	801ed6c <tEnvelopeFollower_init>
 80116f4:	eddf 0a32 	vldr	s1, [pc, #200]	; 80117c0 <audioInit+0x154>
 80116f8:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80117c4 <audioInit+0x158>
 80116fc:	4835      	ldr	r0, [pc, #212]	; (80117d4 <audioInit+0x168>)
 80116fe:	f00d fb35 	bl	801ed6c <tEnvelopeFollower_init>
	LEAF_generate_atodbPositiveClipped(atodbTable, -120.0f, 380.0f, ATODB_TABLE_SIZE);
 8011702:	eddf 0a35 	vldr	s1, [pc, #212]	; 80117d8 <audioInit+0x16c>
 8011706:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80117dc <audioInit+0x170>
 801170a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801170e:	4834      	ldr	r0, [pc, #208]	; (80117e0 <audioInit+0x174>)
 8011710:	f012 fed2 	bl	80244b8 <LEAF_generate_atodbPositiveClipped>
	initGlobalSFXObjects();
 8011714:	f003 f9c2 	bl	8014a9c <initGlobalSFXObjects>
	previousPreset = PresetNil;
 8011718:	4b32      	ldr	r3, [pc, #200]	; (80117e4 <audioInit+0x178>)
	loadingPreset = 1;
 801171a:	4933      	ldr	r1, [pc, #204]	; (80117e8 <audioInit+0x17c>)
	previousPreset = PresetNil;
 801171c:	2212      	movs	r2, #18
	HAL_Delay(10);
 801171e:	200a      	movs	r0, #10
	previousPreset = PresetNil;
 8011720:	701a      	strb	r2, [r3, #0]
	loadingPreset = 1;
 8011722:	700c      	strb	r4, [r1, #0]
	HAL_Delay(10);
 8011724:	f7ef fa94 	bl	8000c50 <HAL_Delay>
 8011728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801172c:	2100      	movs	r1, #0
 801172e:	482f      	ldr	r0, [pc, #188]	; (80117ec <audioInit+0x180>)
 8011730:	f015 ff03 	bl	802753a <memset>
	HAL_Delay(1);
 8011734:	4620      	mov	r0, r4
 8011736:	f7ef fa8b 	bl	8000c50 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 801173a:	4640      	mov	r0, r8
 801173c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011740:	492a      	ldr	r1, [pc, #168]	; (80117ec <audioInit+0x180>)
 8011742:	f7f9 fc9d 	bl	800b080 <HAL_SAI_Transmit_DMA>
 8011746:	4b2a      	ldr	r3, [pc, #168]	; (80117f0 <audioInit+0x184>)
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8011748:	f44f 7200 	mov.w	r2, #512	; 0x200
 801174c:	4929      	ldr	r1, [pc, #164]	; (80117f4 <audioInit+0x188>)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 801174e:	7018      	strb	r0, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8011750:	4638      	mov	r0, r7
 8011752:	f7f9 fd25 	bl	800b1a0 <HAL_SAI_Receive_DMA>
 8011756:	4b28      	ldr	r3, [pc, #160]	; (80117f8 <audioInit+0x18c>)
 8011758:	7018      	strb	r0, [r3, #0]
	AudioCodec_init(hi2c);
 801175a:	4630      	mov	r0, r6
 801175c:	f000 f8e0 	bl	8011920 <AudioCodec_init>
	HAL_Delay(1);
 8011760:	4620      	mov	r0, r4
 8011762:	f7ef fa75 	bl	8000c50 <HAL_Delay>
	HAL_I2C_MspDeInit(hi2c);
 8011766:	4630      	mov	r0, r6
 8011768:	f001 ff3e 	bl	80135e8 <HAL_I2C_MspDeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801176c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801176e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011772:	a901      	add	r1, sp, #4
 8011774:	4821      	ldr	r0, [pc, #132]	; (80117fc <audioInit+0x190>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011776:	9302      	str	r3, [sp, #8]
 8011778:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801177a:	9201      	str	r2, [sp, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801177c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011780:	f7f3 fe2c 	bl	80053dc <HAL_GPIO_Init>
}
 8011784:	b006      	add	sp, #24
 8011786:	ecbd 8b02 	vpop	{d8}
 801178a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801178e:	bf00      	nop
 8011790:	080138b9 	.word	0x080138b9
 8011794:	473b8000 	.word	0x473b8000
 8011798:	24000000 	.word	0x24000000
 801179c:	0007eb58 	.word	0x0007eb58
 80117a0:	200142a4 	.word	0x200142a4
 80117a4:	3e4ccccd 	.word	0x3e4ccccd
 80117a8:	000139c8 	.word	0x000139c8
 80117ac:	200007f4 	.word	0x200007f4
 80117b0:	20014b2c 	.word	0x20014b2c
 80117b4:	60000000 	.word	0x60000000
 80117b8:	20014254 	.word	0x20014254
 80117bc:	00000000 	.word	0x00000000
 80117c0:	3f7fdf3b 	.word	0x3f7fdf3b
 80117c4:	38d1b717 	.word	0x38d1b717
 80117c8:	2001431c 	.word	0x2001431c
 80117cc:	20014320 	.word	0x20014320
 80117d0:	20014324 	.word	0x20014324
 80117d4:	20014328 	.word	0x20014328
 80117d8:	43be0000 	.word	0x43be0000
 80117dc:	c2f00000 	.word	0xc2f00000
 80117e0:	2001432c 	.word	0x2001432c
 80117e4:	200002cc 	.word	0x200002cc
 80117e8:	20000657 	.word	0x20000657
 80117ec:	30000880 	.word	0x30000880
 80117f0:	20014204 	.word	0x20014204
 80117f4:	30000080 	.word	0x30000080
 80117f8:	200142a0 	.word	0x200142a0
 80117fc:	58020400 	.word	0x58020400

08011800 <HAL_SAI_ErrorCallback>:



void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
	setLED_Edit(1);
 8011800:	2001      	movs	r0, #1
 8011802:	f002 ba1d 	b.w	8013c40 <setLED_Edit>
 8011806:	bf00      	nop

08011808 <HAL_SAI_TxCpltCallback>:
 8011808:	4770      	bx	lr
 801180a:	bf00      	nop

0801180c <HAL_SAI_TxHalfCpltCallback>:
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{

}
 801180c:	4770      	bx	lr
 801180e:	bf00      	nop

08011810 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
	audioFrame(HALF_BUFFER_SIZE);
 8011810:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011814:	f7ff bb92 	b.w	8010f3c <audioFrame>

08011818 <HAL_SAI_RxHalfCpltCallback>:
}

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
	audioFrame(0);
 8011818:	2000      	movs	r0, #0
 801181a:	f7ff bb8f 	b.w	8010f3c <audioFrame>
 801181e:	bf00      	nop

08011820 <MX_BDMA_Init>:
  */
void MX_BDMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8011820:	4b10      	ldr	r3, [pc, #64]	; (8011864 <MX_BDMA_Init+0x44>)

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8011822:	2200      	movs	r2, #0
 8011824:	2081      	movs	r0, #129	; 0x81
 8011826:	4611      	mov	r1, r2
{
 8011828:	b510      	push	{r4, lr}
  __HAL_RCC_BDMA_CLK_ENABLE();
 801182a:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
{
 801182e:	b082      	sub	sp, #8
  __HAL_RCC_BDMA_CLK_ENABLE();
 8011830:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 8011834:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8011838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801183c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011840:	9301      	str	r3, [sp, #4]
 8011842:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8011844:	f7f0 fe66 	bl	8002514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8011848:	2081      	movs	r0, #129	; 0x81
 801184a:	f7f0 fea9 	bl	80025a0 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 801184e:	2200      	movs	r2, #0
 8011850:	2082      	movs	r0, #130	; 0x82
 8011852:	4611      	mov	r1, r2
 8011854:	f7f0 fe5e 	bl	8002514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8011858:	2082      	movs	r0, #130	; 0x82

}
 801185a:	b002      	add	sp, #8
 801185c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8011860:	f7f0 be9e 	b.w	80025a0 <HAL_NVIC_EnableIRQ>
 8011864:	58024400 	.word	0x58024400

08011868 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011868:	b500      	push	{lr}
 801186a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801186c:	9300      	str	r3, [sp, #0]
 801186e:	4613      	mov	r3, r2
 8011870:	460a      	mov	r2, r1
 8011872:	4601      	mov	r1, r0
 8011874:	4804      	ldr	r0, [pc, #16]	; (8011888 <BSP_SD_ReadBlocks+0x20>)
 8011876:	f7f9 ff17 	bl	800b6a8 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 801187a:	3000      	adds	r0, #0
 801187c:	bf18      	it	ne
 801187e:	2001      	movne	r0, #1
 8011880:	b003      	add	sp, #12
 8011882:	f85d fb04 	ldr.w	pc, [sp], #4
 8011886:	bf00      	nop
 8011888:	200158c8 	.word	0x200158c8

0801188c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 801188c:	b500      	push	{lr}
 801188e:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8011890:	9300      	str	r3, [sp, #0]
 8011892:	4613      	mov	r3, r2
 8011894:	460a      	mov	r2, r1
 8011896:	4601      	mov	r1, r0
 8011898:	4804      	ldr	r0, [pc, #16]	; (80118ac <BSP_SD_WriteBlocks+0x20>)
 801189a:	f7fa f807 	bl	800b8ac <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 801189e:	3000      	adds	r0, #0
 80118a0:	bf18      	it	ne
 80118a2:	2001      	movne	r0, #1
 80118a4:	b003      	add	sp, #12
 80118a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80118aa:	bf00      	nop
 80118ac:	200158c8 	.word	0x200158c8

080118b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80118b0:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80118b2:	4803      	ldr	r0, [pc, #12]	; (80118c0 <BSP_SD_GetCardState+0x10>)
 80118b4:	f7fa fd98 	bl	800c3e8 <HAL_SD_GetCardState>
}
 80118b8:	3804      	subs	r0, #4
 80118ba:	bf18      	it	ne
 80118bc:	2001      	movne	r0, #1
 80118be:	bd08      	pop	{r3, pc}
 80118c0:	200158c8 	.word	0x200158c8

080118c4 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80118c4:	4601      	mov	r1, r0
 80118c6:	4801      	ldr	r0, [pc, #4]	; (80118cc <BSP_SD_GetCardInfo+0x8>)
 80118c8:	f7fa bc04 	b.w	800c0d4 <HAL_SD_GetCardInfo>
 80118cc:	200158c8 	.word	0x200158c8

080118d0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80118d0:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 80118d2:	2301      	movs	r3, #1
{
 80118d4:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 80118d6:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80118da:	f000 fc69 	bl	80121b0 <BSP_PlatformIsDetected>
 80118de:	b908      	cbnz	r0, 80118e4 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 80118e0:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 80118e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80118e8:	b003      	add	sp, #12
 80118ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80118ee:	bf00      	nop

080118f0 <BSP_SD_Init>:
{
 80118f0:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80118f2:	f7ff ffed 	bl	80118d0 <BSP_SD_IsDetected>
 80118f6:	2801      	cmp	r0, #1
 80118f8:	d001      	beq.n	80118fe <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 80118fa:	2002      	movs	r0, #2
}
 80118fc:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 80118fe:	4807      	ldr	r0, [pc, #28]	; (801191c <BSP_SD_Init+0x2c>)
 8011900:	f7fa fcac 	bl	800c25c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8011904:	2800      	cmp	r0, #0
 8011906:	d1f9      	bne.n	80118fc <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011908:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801190c:	4803      	ldr	r0, [pc, #12]	; (801191c <BSP_SD_Init+0x2c>)
 801190e:	f7fa fbf5 	bl	800c0fc <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8011912:	3000      	adds	r0, #0
 8011914:	bf18      	it	ne
 8011916:	2001      	movne	r0, #1
}
 8011918:	bd08      	pop	{r3, pc}
 801191a:	bf00      	nop
 801191c:	200158c8 	.word	0x200158c8

08011920 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8011920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8011924:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8011926:	b082      	sub	sp, #8
 8011928:	4605      	mov	r5, r0

	HAL_Delay(2);
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801192a:	4e40      	ldr	r6, [pc, #256]	; (8011a2c <AudioCodec_init+0x10c>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 801192c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8011930:	483f      	ldr	r0, [pc, #252]	; (8011a30 <AudioCodec_init+0x110>)
 8011932:	f7f4 f88d 	bl	8005a50 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8011936:	2002      	movs	r0, #2
	myI2cData[0] = 0x07;
 8011938:	4c3e      	ldr	r4, [pc, #248]	; (8011a34 <AudioCodec_init+0x114>)
	HAL_Delay(2);
 801193a:	f7ef f989 	bl	8000c50 <HAL_Delay>
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801193e:	4f3e      	ldr	r7, [pc, #248]	; (8011a38 <AudioCodec_init+0x118>)
	myI2cData[0] = 0x07;
 8011940:	f240 3c07 	movw	ip, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011944:	6831      	ldr	r1, [r6, #0]
 8011946:	4622      	mov	r2, r4
 8011948:	883b      	ldrh	r3, [r7, #0]
 801194a:	4628      	mov	r0, r5
 801194c:	9100      	str	r1, [sp, #0]
 801194e:	2120      	movs	r1, #32
 8011950:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8011a40 <AudioCodec_init+0x120>
	myI2cData[0] = 0x07;
 8011954:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011958:	f7f4 ff32 	bl	80067c0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801195c:	6831      	ldr	r1, [r6, #0]
	myI2cData[0] = 0x01;
 801195e:	f244 1c01 	movw	ip, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011962:	883b      	ldrh	r3, [r7, #0]
 8011964:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011966:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801196a:	4628      	mov	r0, r5
 801196c:	9100      	str	r1, [sp, #0]
 801196e:	2120      	movs	r1, #32
	myI2cData[0] = 0x01;
 8011970:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011974:	f7f4 ff24 	bl	80067c0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011978:	6832      	ldr	r2, [r6, #0]
	myI2cData[0] = 0x02;
 801197a:	f04f 0c02 	mov.w	ip, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801197e:	883b      	ldrh	r3, [r7, #0]
 8011980:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011982:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011986:	4628      	mov	r0, r5
 8011988:	9200      	str	r2, [sp, #0]
 801198a:	4622      	mov	r2, r4
	myI2cData[0] = 0x02;
 801198c:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011990:	f7f4 ff16 	bl	80067c0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011994:	6831      	ldr	r1, [r6, #0]
	myI2cData[0] = 0x03;
 8011996:	f647 1c03 	movw	ip, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801199a:	883b      	ldrh	r3, [r7, #0]
 801199c:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801199e:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119a2:	4628      	mov	r0, r5
 80119a4:	9100      	str	r1, [sp, #0]
 80119a6:	2120      	movs	r1, #32
	myI2cData[0] = 0x03;
 80119a8:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119ac:	f7f4 ff08 	bl	80067c0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119b0:	6832      	ldr	r2, [r6, #0]
	myI2cData[0] = 0x04;
 80119b2:	f44f 7c82 	mov.w	ip, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119b6:	883b      	ldrh	r3, [r7, #0]
 80119b8:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119ba:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119be:	4628      	mov	r0, r5
 80119c0:	9200      	str	r2, [sp, #0]
 80119c2:	4622      	mov	r2, r4
	myI2cData[0] = 0x04;
 80119c4:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119c8:	f7f4 fefa 	bl	80067c0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119cc:	6831      	ldr	r1, [r6, #0]
	myI2cData[0] = 0x05;
 80119ce:	f240 1c05 	movw	ip, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119d2:	883b      	ldrh	r3, [r7, #0]
 80119d4:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119d6:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119da:	4628      	mov	r0, r5
 80119dc:	9100      	str	r1, [sp, #0]
 80119de:	2120      	movs	r1, #32
	myI2cData[0] = 0x05;
 80119e0:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119e4:	f7f4 feec 	bl	80067c0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119e8:	6832      	ldr	r2, [r6, #0]
	myI2cData[0] = 0x06;
 80119ea:	f241 0c06 	movw	ip, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119ee:	883b      	ldrh	r3, [r7, #0]
 80119f0:	2120      	movs	r1, #32
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119f2:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80119f6:	4628      	mov	r0, r5
 80119f8:	9200      	str	r2, [sp, #0]
 80119fa:	4622      	mov	r2, r4
	myI2cData[0] = 0x06;
 80119fc:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011a00:	f7f4 fede 	bl	80067c0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011a04:	6831      	ldr	r1, [r6, #0]
 8011a06:	4622      	mov	r2, r4
 8011a08:	883b      	ldrh	r3, [r7, #0]
	myI2cData[0] = 0x07;
 8011a0a:	f240 2707 	movw	r7, #519	; 0x207
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011a0e:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011a12:	4628      	mov	r0, r5
 8011a14:	9100      	str	r1, [sp, #0]
 8011a16:	2120      	movs	r1, #32
	myI2cData[0] = 0x07;
 8011a18:	8027      	strh	r7, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011a1a:	f7f4 fed1 	bl	80067c0 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8011a1e:	4b07      	ldr	r3, [pc, #28]	; (8011a3c <AudioCodec_init+0x11c>)
 8011a20:	2201      	movs	r2, #1
 8011a22:	701a      	strb	r2, [r3, #0]

}
 8011a24:	b002      	add	sp, #8
 8011a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a2a:	bf00      	nop
 8011a2c:	20000010 	.word	0x20000010
 8011a30:	58020800 	.word	0x58020800
 8011a34:	20000500 	.word	0x20000500
 8011a38:	20000014 	.word	0x20000014
 8011a3c:	200004f8 	.word	0x200004f8
 8011a40:	20014b30 	.word	0x20014b30

08011a44 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8011a44:	4b1e      	ldr	r3, [pc, #120]	; (8011ac0 <MX_DMA_Init+0x7c>)
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 3, 0);
 8011a46:	2200      	movs	r2, #0
 8011a48:	2103      	movs	r1, #3
 8011a4a:	200c      	movs	r0, #12
{
 8011a4c:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 8011a4e:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8011a52:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8011a54:	f044 0402 	orr.w	r4, r4, #2
 8011a58:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8011a5c:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 8011a60:	f004 0402 	and.w	r4, r4, #2
 8011a64:	9400      	str	r4, [sp, #0]
 8011a66:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8011a68:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 8011a6c:	f044 0401 	orr.w	r4, r4, #1
 8011a70:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8011a74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011a78:	f003 0301 	and.w	r3, r3, #1
 8011a7c:	9301      	str	r3, [sp, #4]
 8011a7e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 3, 0);
 8011a80:	f7f0 fd48 	bl	8002514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8011a84:	200c      	movs	r0, #12
 8011a86:	f7f0 fd8b 	bl	80025a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	2103      	movs	r1, #3
 8011a8e:	200d      	movs	r0, #13
 8011a90:	f7f0 fd40 	bl	8002514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8011a94:	200d      	movs	r0, #13
 8011a96:	f7f0 fd83 	bl	80025a0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 4, 0);
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	2104      	movs	r1, #4
 8011a9e:	2038      	movs	r0, #56	; 0x38
 8011aa0:	f7f0 fd38 	bl	8002514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8011aa4:	2038      	movs	r0, #56	; 0x38
 8011aa6:	f7f0 fd7b 	bl	80025a0 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8011aaa:	2200      	movs	r2, #0
 8011aac:	2066      	movs	r0, #102	; 0x66
 8011aae:	4611      	mov	r1, r2
 8011ab0:	f7f0 fd30 	bl	8002514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8011ab4:	2066      	movs	r0, #102	; 0x66

}
 8011ab6:	b002      	add	sp, #8
 8011ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8011abc:	f7f0 bd70 	b.w	80025a0 <HAL_NVIC_EnableIRQ>
 8011ac0:	58024400 	.word	0x58024400

08011ac4 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8011ac4:	b510      	push	{r4, lr}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGE0;
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;

  uint32_t data32[8] = {Data};
 8011ac6:	2300      	movs	r3, #0
{
 8011ac8:	b090      	sub	sp, #64	; 0x40
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011aca:	4c25      	ldr	r4, [pc, #148]	; (8011b60 <EE_VerifyPageFullWriteVariable+0x9c>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011acc:	4a25      	ldr	r2, [pc, #148]	; (8011b64 <EE_VerifyPageFullWriteVariable+0xa0>)
  uint32_t data32[8] = {Data};
 8011ace:	9100      	str	r1, [sp, #0]
  uint32_t VirtAddress1[8] = {VirtAddress};
 8011ad0:	9008      	str	r0, [sp, #32]
  uint32_t data32[8] = {Data};
 8011ad2:	9307      	str	r3, [sp, #28]
  uint32_t VirtAddress1[8] = {VirtAddress};
 8011ad4:	930f      	str	r3, [sp, #60]	; 0x3c
  uint32_t data32[8] = {Data};
 8011ad6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8011ada:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8011ade:	e9cd 3305 	strd	r3, r3, [sp, #20]
  uint32_t VirtAddress1[8] = {VirtAddress};
 8011ae2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8011ae6:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8011aea:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011aee:	8823      	ldrh	r3, [r4, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011af0:	8812      	ldrh	r2, [r2, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011af2:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011af4:	b292      	uxth	r2, r2
      if (PageStatus1 == VALID_PAGE)
 8011af6:	b9ea      	cbnz	r2, 8011b34 <EE_VerifyPageFullWriteVariable+0x70>
        if (PageStatus0 == RECEIVE_DATA)
 8011af8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
          return PAGE0;         /* Page0 valid */
 8011afc:	1a9b      	subs	r3, r3, r2
 8011afe:	bf18      	it	ne
 8011b00:	2301      	movne	r3, #1
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8011b02:	f203 440e 	addw	r4, r3, #1038	; 0x40e

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8011b06:	4a18      	ldr	r2, [pc, #96]	; (8011b68 <EE_VerifyPageFullWriteVariable+0xa4>)
 8011b08:	3301      	adds	r3, #1
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8011b0a:	0464      	lsls	r4, r4, #17
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8011b0c:	eb02 4243 	add.w	r2, r2, r3, lsl #17

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8011b10:	4294      	cmp	r4, r2
 8011b12:	d303      	bcc.n	8011b1c <EE_VerifyPageFullWriteVariable+0x58>
 8011b14:	e016      	b.n	8011b44 <EE_VerifyPageFullWriteVariable+0x80>
     return FlashStatus;
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8011b16:	3440      	adds	r4, #64	; 0x40
  while (Address < PageEndAddress)
 8011b18:	42a2      	cmp	r2, r4
 8011b1a:	d913      	bls.n	8011b44 <EE_VerifyPageFullWriteVariable+0x80>
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8011b1c:	6823      	ldr	r3, [r4, #0]
 8011b1e:	3301      	adds	r3, #1
 8011b20:	d1f9      	bne.n	8011b16 <EE_VerifyPageFullWriteVariable+0x52>
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8011b22:	466a      	mov	r2, sp
 8011b24:	4621      	mov	r1, r4
 8011b26:	2001      	movs	r0, #1
 8011b28:	f7f3 f9d4 	bl	8004ed4 <HAL_FLASH_Program>
      if (FlashStatus != HAL_OK)
 8011b2c:	b180      	cbz	r0, 8011b50 <EE_VerifyPageFullWriteVariable+0x8c>
     return FlashStatus;
 8011b2e:	b280      	uxth	r0, r0
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
}
 8011b30:	b010      	add	sp, #64	; 0x40
 8011b32:	bd10      	pop	{r4, pc}
      else if (PageStatus0 == VALID_PAGE)
 8011b34:	b94b      	cbnz	r3, 8011b4a <EE_VerifyPageFullWriteVariable+0x86>
        if (PageStatus1 == RECEIVE_DATA)
 8011b36:	f64e 63ee 	movw	r3, #61166	; 0xeeee
          return PAGE0;         /* Page0 valid */
 8011b3a:	1ad3      	subs	r3, r2, r3
 8011b3c:	fab3 f383 	clz	r3, r3
 8011b40:	095b      	lsrs	r3, r3, #5
 8011b42:	e7de      	b.n	8011b02 <EE_VerifyPageFullWriteVariable+0x3e>
  return PAGE_FULL;
 8011b44:	2080      	movs	r0, #128	; 0x80
}
 8011b46:	b010      	add	sp, #64	; 0x40
 8011b48:	bd10      	pop	{r4, pc}
    return  NO_VALID_PAGE;
 8011b4a:	20ab      	movs	r0, #171	; 0xab
}
 8011b4c:	b010      	add	sp, #64	; 0x40
 8011b4e:	bd10      	pop	{r4, pc}
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8011b50:	f104 0120 	add.w	r1, r4, #32
 8011b54:	aa08      	add	r2, sp, #32
 8011b56:	2001      	movs	r0, #1
 8011b58:	f7f3 f9bc 	bl	8004ed4 <HAL_FLASH_Program>
 8011b5c:	e7e7      	b.n	8011b2e <EE_VerifyPageFullWriteVariable+0x6a>
 8011b5e:	bf00      	nop
 8011b60:	081c0000 	.word	0x081c0000
 8011b64:	081e0000 	.word	0x081e0000
 8011b68:	081bffff 	.word	0x081bffff

08011b6c <EE_Init>:
{
 8011b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t SectorError = 0;
 8011b70:	f04f 0800 	mov.w	r8, #0
{
 8011b74:	b09f      	sub	sp, #124	; 0x7c
  uint32_t valid[8] = {0x0000};
 8011b76:	f04f 0920 	mov.w	r9, #32
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011b7a:	4cb3      	ldr	r4, [pc, #716]	; (8011e48 <EE_Init+0x2dc>)
  uint32_t valid[8] = {0x0000};
 8011b7c:	4641      	mov	r1, r8
 8011b7e:	a80e      	add	r0, sp, #56	; 0x38
 8011b80:	464a      	mov	r2, r9
  uint32_t SectorError = 0;
 8011b82:	f8cd 8008 	str.w	r8, [sp, #8]
  uint32_t valid[8] = {0x0000};
 8011b86:	f015 fcd8 	bl	802753a <memset>
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011b8a:	8825      	ldrh	r5, [r4, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011b8c:	4eaf      	ldr	r6, [pc, #700]	; (8011e4c <EE_Init+0x2e0>)
  switch (PageStatus0)
 8011b8e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011b92:	b2ad      	uxth	r5, r5
  pEraseInit.Banks = FLASH_BANK_2 ;
 8011b94:	2302      	movs	r3, #2
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011b96:	8830      	ldrh	r0, [r6, #0]
  pEraseInit.Sector = PAGE0_ID;
 8011b98:	f04f 0b06 	mov.w	fp, #6
  pEraseInit.NbSectors = 1;
 8011b9c:	f04f 0a01 	mov.w	sl, #1
  switch (PageStatus0)
 8011ba0:	4295      	cmp	r5, r2
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011ba2:	b287      	uxth	r7, r0
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8011ba4:	f8cd 8010 	str.w	r8, [sp, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011ba8:	f8cd 9020 	str.w	r9, [sp, #32]
  pEraseInit.NbSectors = 1;
 8011bac:	f8cd a01c 	str.w	sl, [sp, #28]
  pEraseInit.Sector = PAGE0_ID;
 8011bb0:	e9cd 3b05 	strd	r3, fp, [sp, #20]
  switch (PageStatus0)
 8011bb4:	f000 80bf 	beq.w	8011d36 <EE_Init+0x1ca>
 8011bb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011bbc:	428d      	cmp	r5, r1
 8011bbe:	f000 808e 	beq.w	8011cde <EE_Init+0x172>
 8011bc2:	b35d      	cbz	r5, 8011c1c <EE_Init+0xb0>
 8011bc4:	9301      	str	r3, [sp, #4]
  uint32_t valid[8] = {0x0000};
 8011bc6:	ab16      	add	r3, sp, #88	; 0x58
 8011bc8:	464a      	mov	r2, r9
 8011bca:	4641      	mov	r1, r8
 8011bcc:	4618      	mov	r0, r3
 8011bce:	9300      	str	r3, [sp, #0]
  uint32_t SectorError = 0;
 8011bd0:	f8cd 800c 	str.w	r8, [sp, #12]
  uint32_t valid[8] = {0x0000};
 8011bd4:	f015 fcb1 	bl	802753a <memset>
  pEraseInit.Banks = FLASH_BANK_2 ;
 8011bd8:	9b01      	ldr	r3, [sp, #4]
    if (AddressValue != ERASED)
 8011bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8011bde:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8011be2:	e9cd 3b0a 	strd	r3, fp, [sp, #40]	; 0x28
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011be6:	e9cd a90c 	strd	sl, r9, [sp, #48]	; 0x30
 8011bea:	e001      	b.n	8011bf0 <EE_Init+0x84>
  while (Address <= PAGE0_END_ADDRESS)
 8011bec:	42b4      	cmp	r4, r6
 8011bee:	d009      	beq.n	8011c04 <EE_Init+0x98>
    AddressValue = (*(__IO uint16_t*)Address);
 8011bf0:	8823      	ldrh	r3, [r4, #0]
    Address = Address + 4;
 8011bf2:	3404      	adds	r4, #4
    if (AddressValue != ERASED)
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d0f9      	beq.n	8011bec <EE_Init+0x80>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011bf8:	a903      	add	r1, sp, #12
 8011bfa:	a809      	add	r0, sp, #36	; 0x24
 8011bfc:	f7f3 fae4 	bl	80051c8 <HAL_FLASHEx_Erase>
    if (FlashStatus != HAL_OK)
 8011c00:	2800      	cmp	r0, #0
 8011c02:	d167      	bne.n	8011cd4 <EE_Init+0x168>
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 8011c04:	9a00      	ldr	r2, [sp, #0]
 8011c06:	2001      	movs	r0, #1
 8011c08:	498f      	ldr	r1, [pc, #572]	; (8011e48 <EE_Init+0x2dc>)
 8011c0a:	f7f3 f963 	bl	8004ed4 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	d160      	bne.n	8011cd4 <EE_Init+0x168>
  return HAL_OK;
 8011c12:	2700      	movs	r7, #0
}
 8011c14:	4638      	mov	r0, r7
 8011c16:	b01f      	add	sp, #124	; 0x7c
 8011c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8011c1c:	2f00      	cmp	r7, #0
 8011c1e:	f000 8101 	beq.w	8011e24 <EE_Init+0x2b8>
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8011c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c26:	429f      	cmp	r7, r3
 8011c28:	d0f3      	beq.n	8011c12 <EE_Init+0xa6>
  int16_t x = -1;
 8011c2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011c2e:	4e88      	ldr	r6, [pc, #544]	; (8011e50 <EE_Init+0x2e4>)
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011c30:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8011e60 <EE_Init+0x2f4>
      if (PageStatus0 == VALID_PAGE)
 8011c34:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011e64 <EE_Init+0x2f8>
 8011c38:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8011e68 <EE_Init+0x2fc>
 8011c3c:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8011e6c <EE_Init+0x300>
      else if (PageStatus1 == VALID_PAGE)
 8011c40:	4a84      	ldr	r2, [pc, #528]	; (8011e54 <EE_Init+0x2e8>)
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011c42:	f8b8 3000 	ldrh.w	r3, [r8]
 8011c46:	f836 0015 	ldrh.w	r0, [r6, r5, lsl #1]
 8011c4a:	4298      	cmp	r0, r3
            x = VarIdx;
 8011c4c:	bf08      	it	eq
 8011c4e:	b22c      	sxtheq	r4, r5
          if (VarIdx != x)
 8011c50:	42a5      	cmp	r5, r4
 8011c52:	d01d      	beq.n	8011c90 <EE_Init+0x124>
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011c54:	4b7c      	ldr	r3, [pc, #496]	; (8011e48 <EE_Init+0x2dc>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011c56:	497d      	ldr	r1, [pc, #500]	; (8011e4c <EE_Init+0x2e0>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011c58:	881b      	ldrh	r3, [r3, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011c5a:	8809      	ldrh	r1, [r1, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011c5c:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011c5e:	b289      	uxth	r1, r1
      if (PageStatus0 == VALID_PAGE)
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	f000 8122 	beq.w	8011eaa <EE_Init+0x33e>
      else if (PageStatus1 == VALID_PAGE)
 8011c66:	2900      	cmp	r1, #0
 8011c68:	f040 8151 	bne.w	8011f0e <EE_Init+0x3a2>
 8011c6c:	497a      	ldr	r1, [pc, #488]	; (8011e58 <EE_Init+0x2ec>)
 8011c6e:	4694      	mov	ip, r2
 8011c70:	4f7a      	ldr	r7, [pc, #488]	; (8011e5c <EE_Init+0x2f0>)
 8011c72:	460b      	mov	r3, r1
    AddressValue = (*(__IO uint16_t*)Address);
 8011c74:	8809      	ldrh	r1, [r1, #0]
    if (AddressValue == VirtAddress)
 8011c76:	4288      	cmp	r0, r1
 8011c78:	d106      	bne.n	8011c88 <EE_Init+0x11c>
 8011c7a:	e12c      	b.n	8011ed6 <EE_Init+0x36a>
    AddressValue = (*(__IO uint16_t*)Address);
 8011c7c:	f833 7c20 	ldrh.w	r7, [r3, #-32]
    if (AddressValue == VirtAddress)
 8011c80:	42b8      	cmp	r0, r7
 8011c82:	f000 8126 	beq.w	8011ed2 <EE_Init+0x366>
 8011c86:	460b      	mov	r3, r1
      Address = Address - 32;
 8011c88:	f1a3 0120 	sub.w	r1, r3, #32
  while (Address > (PageStartAddress + 32))
 8011c8c:	458c      	cmp	ip, r1
 8011c8e:	d3f5      	bcc.n	8011c7c <EE_Init+0x110>
 8011c90:	3501      	adds	r5, #1
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8011c92:	2d03      	cmp	r5, #3
 8011c94:	d1d5      	bne.n	8011c42 <EE_Init+0xd6>
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8011c96:	aa0e      	add	r2, sp, #56	; 0x38
 8011c98:	496c      	ldr	r1, [pc, #432]	; (8011e4c <EE_Init+0x2e0>)
 8011c9a:	2001      	movs	r0, #1
 8011c9c:	f7f3 f91a 	bl	8004ed4 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 8011ca0:	b9c0      	cbnz	r0, 8011cd4 <EE_Init+0x168>
        pEraseInit.Sector = PAGE0_ID;
 8011ca2:	2006      	movs	r0, #6
        pEraseInit.Banks = FLASH_BANK_2 ;
 8011ca4:	2502      	movs	r5, #2
        pEraseInit.NbSectors = 1;
 8011ca6:	2401      	movs	r4, #1
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011ca8:	2220      	movs	r2, #32
        pEraseInit.Sector = PAGE0_ID;
 8011caa:	9006      	str	r0, [sp, #24]
    if (AddressValue != ERASED)
 8011cac:	f64f 71ff 	movw	r1, #65535	; 0xffff
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011cb0:	4b65      	ldr	r3, [pc, #404]	; (8011e48 <EE_Init+0x2dc>)
  while (Address <= PAGE0_END_ADDRESS)
 8011cb2:	4866      	ldr	r0, [pc, #408]	; (8011e4c <EE_Init+0x2e0>)
        pEraseInit.Banks = FLASH_BANK_2 ;
 8011cb4:	9505      	str	r5, [sp, #20]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011cb6:	e9cd 4207 	strd	r4, r2, [sp, #28]
 8011cba:	e001      	b.n	8011cc0 <EE_Init+0x154>
  while (Address <= PAGE0_END_ADDRESS)
 8011cbc:	4283      	cmp	r3, r0
 8011cbe:	d0a8      	beq.n	8011c12 <EE_Init+0xa6>
    AddressValue = (*(__IO uint16_t*)Address);
 8011cc0:	881a      	ldrh	r2, [r3, #0]
    Address = Address + 4;
 8011cc2:	3304      	adds	r3, #4
    if (AddressValue != ERASED)
 8011cc4:	4291      	cmp	r1, r2
 8011cc6:	d0f9      	beq.n	8011cbc <EE_Init+0x150>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011cc8:	a902      	add	r1, sp, #8
 8011cca:	a804      	add	r0, sp, #16
 8011ccc:	f7f3 fa7c 	bl	80051c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	d09e      	beq.n	8011c12 <EE_Init+0xa6>
        return FlashStatus;
 8011cd4:	b287      	uxth	r7, r0
}
 8011cd6:	4638      	mov	r0, r7
 8011cd8:	b01f      	add	sp, #124	; 0x7c
 8011cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8011cde:	b1ff      	cbz	r7, 8011d20 <EE_Init+0x1b4>
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8011ce0:	4297      	cmp	r7, r2
 8011ce2:	f000 808b 	beq.w	8011dfc <EE_Init+0x290>
 8011ce6:	9301      	str	r3, [sp, #4]
  uint32_t valid[8] = {0x0000};
 8011ce8:	ab16      	add	r3, sp, #88	; 0x58
 8011cea:	464a      	mov	r2, r9
 8011cec:	4641      	mov	r1, r8
 8011cee:	4618      	mov	r0, r3
 8011cf0:	9300      	str	r3, [sp, #0]
  uint32_t SectorError = 0;
 8011cf2:	f8cd 800c 	str.w	r8, [sp, #12]
  uint32_t valid[8] = {0x0000};
 8011cf6:	f015 fc20 	bl	802753a <memset>
  pEraseInit.Banks = FLASH_BANK_2 ;
 8011cfa:	9b01      	ldr	r3, [sp, #4]
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8011cfc:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8011d00:	e9cd 3b0a 	strd	r3, fp, [sp, #40]	; 0x28
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011d04:	e9cd a90c 	strd	sl, r9, [sp, #48]	; 0x30
 8011d08:	e002      	b.n	8011d10 <EE_Init+0x1a4>
  while (Address <= PAGE0_END_ADDRESS)
 8011d0a:	42b4      	cmp	r4, r6
 8011d0c:	f43f af7a 	beq.w	8011c04 <EE_Init+0x98>
    AddressValue = (*(__IO uint16_t*)Address);
 8011d10:	8823      	ldrh	r3, [r4, #0]
    Address = Address + 4;
 8011d12:	3404      	adds	r4, #4
    if (AddressValue != ERASED)
 8011d14:	429d      	cmp	r5, r3
 8011d16:	d0f8      	beq.n	8011d0a <EE_Init+0x19e>
 8011d18:	e76e      	b.n	8011bf8 <EE_Init+0x8c>
  while (Address <= PAGE0_END_ADDRESS)
 8011d1a:	42b4      	cmp	r4, r6
 8011d1c:	f43f af79 	beq.w	8011c12 <EE_Init+0xa6>
    AddressValue = (*(__IO uint16_t*)Address);
 8011d20:	8823      	ldrh	r3, [r4, #0]
    Address = Address + 4;
 8011d22:	3404      	adds	r4, #4
    if (AddressValue != ERASED)
 8011d24:	429d      	cmp	r5, r3
 8011d26:	d0f8      	beq.n	8011d1a <EE_Init+0x1ae>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011d28:	a902      	add	r1, sp, #8
 8011d2a:	a804      	add	r0, sp, #16
 8011d2c:	f7f3 fa4c 	bl	80051c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 8011d30:	2800      	cmp	r0, #0
 8011d32:	d1cf      	bne.n	8011cd4 <EE_Init+0x168>
 8011d34:	e76d      	b.n	8011c12 <EE_Init+0xa6>
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8011d36:	2f00      	cmp	r7, #0
 8011d38:	d13f      	bne.n	8011dba <EE_Init+0x24e>
 8011d3a:	463c      	mov	r4, r7
  int16_t x = -1;
 8011d3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011d40:	4e43      	ldr	r6, [pc, #268]	; (8011e50 <EE_Init+0x2e4>)
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011d42:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8011e70 <EE_Init+0x304>
      if (PageStatus0 == VALID_PAGE)
 8011d46:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8011e64 <EE_Init+0x2f8>
 8011d4a:	f8df a120 	ldr.w	sl, [pc, #288]	; 8011e6c <EE_Init+0x300>
 8011d4e:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8011e68 <EE_Init+0x2fc>
      else if (PageStatus1 == VALID_PAGE)
 8011d52:	4a40      	ldr	r2, [pc, #256]	; (8011e54 <EE_Init+0x2e8>)
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011d54:	f8b8 3000 	ldrh.w	r3, [r8]
 8011d58:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 8011d5c:	4298      	cmp	r0, r3
            x = VarIdx;
 8011d5e:	bf08      	it	eq
 8011d60:	b225      	sxtheq	r5, r4
          if (VarIdx != x)
 8011d62:	42ac      	cmp	r4, r5
 8011d64:	d01d      	beq.n	8011da2 <EE_Init+0x236>
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011d66:	4b38      	ldr	r3, [pc, #224]	; (8011e48 <EE_Init+0x2dc>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011d68:	4938      	ldr	r1, [pc, #224]	; (8011e4c <EE_Init+0x2e0>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011d6a:	881b      	ldrh	r3, [r3, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011d6c:	8809      	ldrh	r1, [r1, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011d6e:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011d70:	b289      	uxth	r1, r1
      if (PageStatus0 == VALID_PAGE)
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	f000 8094 	beq.w	8011ea0 <EE_Init+0x334>
      else if (PageStatus1 == VALID_PAGE)
 8011d78:	2900      	cmp	r1, #0
 8011d7a:	f040 80c5 	bne.w	8011f08 <EE_Init+0x39c>
 8011d7e:	4936      	ldr	r1, [pc, #216]	; (8011e58 <EE_Init+0x2ec>)
 8011d80:	4694      	mov	ip, r2
 8011d82:	4f36      	ldr	r7, [pc, #216]	; (8011e5c <EE_Init+0x2f0>)
 8011d84:	460b      	mov	r3, r1
    AddressValue = (*(__IO uint16_t*)Address);
 8011d86:	8809      	ldrh	r1, [r1, #0]
    if (AddressValue == VirtAddress)
 8011d88:	4288      	cmp	r0, r1
 8011d8a:	d106      	bne.n	8011d9a <EE_Init+0x22e>
 8011d8c:	e094      	b.n	8011eb8 <EE_Init+0x34c>
    AddressValue = (*(__IO uint16_t*)Address);
 8011d8e:	f833 7c20 	ldrh.w	r7, [r3, #-32]
    if (AddressValue == VirtAddress)
 8011d92:	42b8      	cmp	r0, r7
 8011d94:	f000 808e 	beq.w	8011eb4 <EE_Init+0x348>
 8011d98:	460b      	mov	r3, r1
      Address = Address - 32;
 8011d9a:	f1a3 0120 	sub.w	r1, r3, #32
  while (Address > (PageStartAddress + 32))
 8011d9e:	4561      	cmp	r1, ip
 8011da0:	d8f5      	bhi.n	8011d8e <EE_Init+0x222>
 8011da2:	3401      	adds	r4, #1
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8011da4:	2c03      	cmp	r4, #3
 8011da6:	d1d5      	bne.n	8011d54 <EE_Init+0x1e8>
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8011da8:	aa0e      	add	r2, sp, #56	; 0x38
 8011daa:	4927      	ldr	r1, [pc, #156]	; (8011e48 <EE_Init+0x2dc>)
 8011dac:	2001      	movs	r0, #1
 8011dae:	f7f3 f891 	bl	8004ed4 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 8011db2:	2800      	cmp	r0, #0
 8011db4:	f43f af2d 	beq.w	8011c12 <EE_Init+0xa6>
 8011db8:	e78c      	b.n	8011cd4 <EE_Init+0x168>
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8011dba:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8011dbe:	42af      	cmp	r7, r5
 8011dc0:	f000 8096 	beq.w	8011ef0 <EE_Init+0x384>
 8011dc4:	9301      	str	r3, [sp, #4]
  uint32_t valid[8] = {0x0000};
 8011dc6:	ab16      	add	r3, sp, #88	; 0x58
 8011dc8:	464a      	mov	r2, r9
 8011dca:	4641      	mov	r1, r8
 8011dcc:	4618      	mov	r0, r3
 8011dce:	9300      	str	r3, [sp, #0]
  uint32_t SectorError = 0;
 8011dd0:	f8cd 800c 	str.w	r8, [sp, #12]
  uint32_t valid[8] = {0x0000};
 8011dd4:	f015 fbb1 	bl	802753a <memset>
  pEraseInit.Banks = FLASH_BANK_2 ;
 8011dd8:	9b01      	ldr	r3, [sp, #4]
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8011dda:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8011dde:	e9cd 3b0a 	strd	r3, fp, [sp, #40]	; 0x28
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011de2:	e9cd a90c 	strd	sl, r9, [sp, #48]	; 0x30
 8011de6:	e002      	b.n	8011dee <EE_Init+0x282>
  while (Address <= PAGE0_END_ADDRESS)
 8011de8:	42b4      	cmp	r4, r6
 8011dea:	f43f af0b 	beq.w	8011c04 <EE_Init+0x98>
    AddressValue = (*(__IO uint16_t*)Address);
 8011dee:	8823      	ldrh	r3, [r4, #0]
    Address = Address + 4;
 8011df0:	3404      	adds	r4, #4
    if (AddressValue != ERASED)
 8011df2:	429d      	cmp	r5, r3
 8011df4:	d0f8      	beq.n	8011de8 <EE_Init+0x27c>
 8011df6:	e6ff      	b.n	8011bf8 <EE_Init+0x8c>
  while (Address <= PAGE0_END_ADDRESS)
 8011df8:	42b4      	cmp	r4, r6
 8011dfa:	d00a      	beq.n	8011e12 <EE_Init+0x2a6>
    AddressValue = (*(__IO uint16_t*)Address);
 8011dfc:	8823      	ldrh	r3, [r4, #0]
    Address = Address + 4;
 8011dfe:	3404      	adds	r4, #4
    if (AddressValue != ERASED)
 8011e00:	429d      	cmp	r5, r3
 8011e02:	d0f9      	beq.n	8011df8 <EE_Init+0x28c>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011e04:	a902      	add	r1, sp, #8
 8011e06:	a804      	add	r0, sp, #16
 8011e08:	f7f3 f9de 	bl	80051c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 8011e0c:	2800      	cmp	r0, #0
 8011e0e:	f47f af61 	bne.w	8011cd4 <EE_Init+0x168>
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8011e12:	aa0e      	add	r2, sp, #56	; 0x38
 8011e14:	490d      	ldr	r1, [pc, #52]	; (8011e4c <EE_Init+0x2e0>)
 8011e16:	2001      	movs	r0, #1
 8011e18:	f7f3 f85c 	bl	8004ed4 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 8011e1c:	2800      	cmp	r0, #0
 8011e1e:	f43f aef8 	beq.w	8011c12 <EE_Init+0xa6>
 8011e22:	e757      	b.n	8011cd4 <EE_Init+0x168>
 8011e24:	9301      	str	r3, [sp, #4]
  uint32_t valid[8] = {0x0000};
 8011e26:	ab16      	add	r3, sp, #88	; 0x58
 8011e28:	464a      	mov	r2, r9
 8011e2a:	4639      	mov	r1, r7
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	9300      	str	r3, [sp, #0]
  uint32_t SectorError = 0;
 8011e30:	9703      	str	r7, [sp, #12]
  uint32_t valid[8] = {0x0000};
 8011e32:	f015 fb82 	bl	802753a <memset>
  pEraseInit.Banks = FLASH_BANK_2 ;
 8011e36:	9b01      	ldr	r3, [sp, #4]
    if (AddressValue != ERASED)
 8011e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8011e3c:	9709      	str	r7, [sp, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8011e3e:	e9cd 3b0a 	strd	r3, fp, [sp, #40]	; 0x28
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011e42:	e9cd a90c 	strd	sl, r9, [sp, #48]	; 0x30
 8011e46:	e017      	b.n	8011e78 <EE_Init+0x30c>
 8011e48:	081c0000 	.word	0x081c0000
 8011e4c:	081e0000 	.word	0x081e0000
 8011e50:	20000018 	.word	0x20000018
 8011e54:	081e0020 	.word	0x081e0020
 8011e58:	081fffe0 	.word	0x081fffe0
 8011e5c:	081fffc0 	.word	0x081fffc0
 8011e60:	081e0006 	.word	0x081e0006
 8011e64:	081dffc0 	.word	0x081dffc0
 8011e68:	081dffe0 	.word	0x081dffe0
 8011e6c:	081c0020 	.word	0x081c0020
 8011e70:	081c0006 	.word	0x081c0006
  while (Address <= PAGE0_END_ADDRESS)
 8011e74:	42b4      	cmp	r4, r6
 8011e76:	d00a      	beq.n	8011e8e <EE_Init+0x322>
    AddressValue = (*(__IO uint16_t*)Address);
 8011e78:	8823      	ldrh	r3, [r4, #0]
    Address = Address + 4;
 8011e7a:	3404      	adds	r4, #4
    if (AddressValue != ERASED)
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d0f9      	beq.n	8011e74 <EE_Init+0x308>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011e80:	a903      	add	r1, sp, #12
 8011e82:	a809      	add	r0, sp, #36	; 0x24
 8011e84:	f7f3 f9a0 	bl	80051c8 <HAL_FLASHEx_Erase>
    if (FlashStatus != HAL_OK)
 8011e88:	2800      	cmp	r0, #0
 8011e8a:	f47f af23 	bne.w	8011cd4 <EE_Init+0x168>
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 8011e8e:	9a00      	ldr	r2, [sp, #0]
 8011e90:	2001      	movs	r0, #1
 8011e92:	4920      	ldr	r1, [pc, #128]	; (8011f14 <EE_Init+0x3a8>)
 8011e94:	f7f3 f81e 	bl	8004ed4 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	f43f aebb 	beq.w	8011c14 <EE_Init+0xa8>
 8011e9e:	e719      	b.n	8011cd4 <EE_Init+0x168>
      if (PageStatus0 == VALID_PAGE)
 8011ea0:	465f      	mov	r7, fp
 8011ea2:	46d4      	mov	ip, sl
 8011ea4:	4649      	mov	r1, r9
 8011ea6:	464b      	mov	r3, r9
 8011ea8:	e76d      	b.n	8011d86 <EE_Init+0x21a>
 8011eaa:	465f      	mov	r7, fp
 8011eac:	4649      	mov	r1, r9
 8011eae:	464b      	mov	r3, r9
 8011eb0:	46d4      	mov	ip, sl
 8011eb2:	e6df      	b.n	8011c74 <EE_Init+0x108>
 8011eb4:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
      *Data = (*(__IO uint16_t*)(Address - 32));
 8011eb8:	8839      	ldrh	r1, [r7, #0]
 8011eba:	4b17      	ldr	r3, [pc, #92]	; (8011f18 <EE_Init+0x3ac>)
 8011ebc:	b289      	uxth	r1, r1
 8011ebe:	8019      	strh	r1, [r3, #0]
 8011ec0:	9200      	str	r2, [sp, #0]
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8011ec2:	f7ff fdff 	bl	8011ac4 <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 8011ec6:	9a00      	ldr	r2, [sp, #0]
 8011ec8:	4607      	mov	r7, r0
 8011eca:	2800      	cmp	r0, #0
 8011ecc:	f43f af69 	beq.w	8011da2 <EE_Init+0x236>
 8011ed0:	e6a0      	b.n	8011c14 <EE_Init+0xa8>
 8011ed2:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
      *Data = (*(__IO uint16_t*)(Address - 32));
 8011ed6:	8839      	ldrh	r1, [r7, #0]
 8011ed8:	4b0f      	ldr	r3, [pc, #60]	; (8011f18 <EE_Init+0x3ac>)
 8011eda:	b289      	uxth	r1, r1
 8011edc:	8019      	strh	r1, [r3, #0]
 8011ede:	9200      	str	r2, [sp, #0]
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8011ee0:	f7ff fdf0 	bl	8011ac4 <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 8011ee4:	9a00      	ldr	r2, [sp, #0]
 8011ee6:	4607      	mov	r7, r0
 8011ee8:	2800      	cmp	r0, #0
 8011eea:	f43f aed1 	beq.w	8011c90 <EE_Init+0x124>
 8011eee:	e691      	b.n	8011c14 <EE_Init+0xa8>
        pEraseInit.Sector = PAGE1_ID;
 8011ef0:	2307      	movs	r3, #7
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8011ef2:	aa0e      	add	r2, sp, #56	; 0x38
 8011ef4:	4621      	mov	r1, r4
 8011ef6:	4650      	mov	r0, sl
        pEraseInit.Sector = PAGE1_ID;
 8011ef8:	e9cd a305 	strd	sl, r3, [sp, #20]
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8011efc:	f7f2 ffea 	bl	8004ed4 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 8011f00:	2800      	cmp	r0, #0
 8011f02:	f43f ae86 	beq.w	8011c12 <EE_Init+0xa6>
 8011f06:	e6e5      	b.n	8011cd4 <EE_Init+0x168>
 8011f08:	4b03      	ldr	r3, [pc, #12]	; (8011f18 <EE_Init+0x3ac>)
 8011f0a:	8819      	ldrh	r1, [r3, #0]
 8011f0c:	e7d8      	b.n	8011ec0 <EE_Init+0x354>
 8011f0e:	4b02      	ldr	r3, [pc, #8]	; (8011f18 <EE_Init+0x3ac>)
 8011f10:	8819      	ldrh	r1, [r3, #0]
 8011f12:	e7e4      	b.n	8011ede <EE_Init+0x372>
 8011f14:	081c0000 	.word	0x081c0000
 8011f18:	20000502 	.word	0x20000502

08011f1c <EE_ReadVariable>:
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011f1c:	4b15      	ldr	r3, [pc, #84]	; (8011f74 <EE_ReadVariable+0x58>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011f1e:	4a16      	ldr	r2, [pc, #88]	; (8011f78 <EE_ReadVariable+0x5c>)
{
 8011f20:	b430      	push	{r4, r5}
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011f22:	881b      	ldrh	r3, [r3, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011f24:	8812      	ldrh	r2, [r2, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011f26:	b29b      	uxth	r3, r3
      if (PageStatus0 == VALID_PAGE)
 8011f28:	b133      	cbz	r3, 8011f38 <EE_ReadVariable+0x1c>
 8011f2a:	b292      	uxth	r2, r2
      else if (PageStatus1 == VALID_PAGE)
 8011f2c:	b9fa      	cbnz	r2, 8011f6e <EE_ReadVariable+0x52>
 8011f2e:	4b13      	ldr	r3, [pc, #76]	; (8011f7c <EE_ReadVariable+0x60>)
 8011f30:	4c13      	ldr	r4, [pc, #76]	; (8011f80 <EE_ReadVariable+0x64>)
 8011f32:	461a      	mov	r2, r3
 8011f34:	4d13      	ldr	r5, [pc, #76]	; (8011f84 <EE_ReadVariable+0x68>)
 8011f36:	e003      	b.n	8011f40 <EE_ReadVariable+0x24>
      if (PageStatus0 == VALID_PAGE)
 8011f38:	4b13      	ldr	r3, [pc, #76]	; (8011f88 <EE_ReadVariable+0x6c>)
 8011f3a:	4c14      	ldr	r4, [pc, #80]	; (8011f8c <EE_ReadVariable+0x70>)
 8011f3c:	461a      	mov	r2, r3
 8011f3e:	4d14      	ldr	r5, [pc, #80]	; (8011f90 <EE_ReadVariable+0x74>)
    AddressValue = (*(__IO uint16_t*)Address);
 8011f40:	8812      	ldrh	r2, [r2, #0]
    if (AddressValue == VirtAddress)
 8011f42:	4290      	cmp	r0, r2
 8011f44:	d105      	bne.n	8011f52 <EE_ReadVariable+0x36>
 8011f46:	e00d      	b.n	8011f64 <EE_ReadVariable+0x48>
    AddressValue = (*(__IO uint16_t*)Address);
 8011f48:	f833 4c20 	ldrh.w	r4, [r3, #-32]
    if (AddressValue == VirtAddress)
 8011f4c:	42a0      	cmp	r0, r4
 8011f4e:	d007      	beq.n	8011f60 <EE_ReadVariable+0x44>
 8011f50:	4613      	mov	r3, r2
      Address = Address - 32;
 8011f52:	f1a3 0220 	sub.w	r2, r3, #32
  while (Address > (PageStartAddress + 32))
 8011f56:	42aa      	cmp	r2, r5
 8011f58:	d8f6      	bhi.n	8011f48 <EE_ReadVariable+0x2c>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8011f5a:	2001      	movs	r0, #1
}
 8011f5c:	bc30      	pop	{r4, r5}
 8011f5e:	4770      	bx	lr
 8011f60:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
      *Data = (*(__IO uint16_t*)(Address - 32));
 8011f64:	8823      	ldrh	r3, [r4, #0]
      ReadStatus = 0;
 8011f66:	2000      	movs	r0, #0
      *Data = (*(__IO uint16_t*)(Address - 32));
 8011f68:	800b      	strh	r3, [r1, #0]
}
 8011f6a:	bc30      	pop	{r4, r5}
 8011f6c:	4770      	bx	lr
    return  NO_VALID_PAGE;
 8011f6e:	20ab      	movs	r0, #171	; 0xab
}
 8011f70:	bc30      	pop	{r4, r5}
 8011f72:	4770      	bx	lr
 8011f74:	081c0000 	.word	0x081c0000
 8011f78:	081e0000 	.word	0x081e0000
 8011f7c:	081fffe0 	.word	0x081fffe0
 8011f80:	081fffc0 	.word	0x081fffc0
 8011f84:	081e0020 	.word	0x081e0020
 8011f88:	081dffe0 	.word	0x081dffe0
 8011f8c:	081dffc0 	.word	0x081dffc0
 8011f90:	081c0020 	.word	0x081c0020

08011f94 <EE_WriteVariable>:
{
 8011f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t data32[8] = {Data};
 8011f98:	2300      	movs	r3, #0
{
 8011f9a:	b099      	sub	sp, #100	; 0x64
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011f9c:	4c71      	ldr	r4, [pc, #452]	; (8012164 <EE_WriteVariable+0x1d0>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011f9e:	4a72      	ldr	r2, [pc, #456]	; (8012168 <EE_WriteVariable+0x1d4>)
  uint32_t VirtAddress1[8] = {VirtAddress};
 8011fa0:	9010      	str	r0, [sp, #64]	; 0x40
  uint32_t data32[8] = {Data};
 8011fa2:	9108      	str	r1, [sp, #32]
 8011fa4:	930f      	str	r3, [sp, #60]	; 0x3c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8011fa6:	9317      	str	r3, [sp, #92]	; 0x5c
  uint32_t data32[8] = {Data};
 8011fa8:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8011fac:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8011fb0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  uint32_t VirtAddress1[8] = {VirtAddress};
 8011fb4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8011fb8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 8011fbc:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011fc0:	8823      	ldrh	r3, [r4, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011fc2:	8812      	ldrh	r2, [r2, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011fc4:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011fc6:	b292      	uxth	r2, r2
      if (PageStatus1 == VALID_PAGE)
 8011fc8:	bb2a      	cbnz	r2, 8012016 <EE_WriteVariable+0x82>
        if (PageStatus0 == RECEIVE_DATA)
 8011fca:	f64e 62ee 	movw	r2, #61166	; 0xeeee
          return PAGE1;         /* Page1 valid */
 8011fce:	1a9b      	subs	r3, r3, r2
 8011fd0:	bf18      	it	ne
 8011fd2:	2301      	movne	r3, #1
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8011fd4:	f203 470e 	addw	r7, r3, #1038	; 0x40e
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8011fd8:	4a64      	ldr	r2, [pc, #400]	; (801216c <EE_WriteVariable+0x1d8>)
 8011fda:	3301      	adds	r3, #1
 8011fdc:	4688      	mov	r8, r1
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8011fde:	047f      	lsls	r7, r7, #17
 8011fe0:	4604      	mov	r4, r0
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8011fe2:	eb02 4243 	add.w	r2, r2, r3, lsl #17
  while (Address < PageEndAddress)
 8011fe6:	4297      	cmp	r7, r2
 8011fe8:	d303      	bcc.n	8011ff2 <EE_WriteVariable+0x5e>
 8011fea:	e021      	b.n	8012030 <EE_WriteVariable+0x9c>
      Address = Address + 64;
 8011fec:	3740      	adds	r7, #64	; 0x40
  while (Address < PageEndAddress)
 8011fee:	42ba      	cmp	r2, r7
 8011ff0:	d91e      	bls.n	8012030 <EE_WriteVariable+0x9c>
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	3301      	adds	r3, #1
 8011ff6:	d1f9      	bne.n	8011fec <EE_WriteVariable+0x58>
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8011ff8:	ae08      	add	r6, sp, #32
 8011ffa:	4639      	mov	r1, r7
 8011ffc:	2001      	movs	r0, #1
 8011ffe:	4632      	mov	r2, r6
 8012000:	f7f2 ff68 	bl	8004ed4 <HAL_FLASH_Program>
      if (FlashStatus != HAL_OK)
 8012004:	2800      	cmp	r0, #0
 8012006:	d03f      	beq.n	8012088 <EE_WriteVariable+0xf4>
     return FlashStatus;
 8012008:	b285      	uxth	r5, r0
  if (Status == PAGE_FULL)
 801200a:	2d80      	cmp	r5, #128	; 0x80
 801200c:	d011      	beq.n	8012032 <EE_WriteVariable+0x9e>
}
 801200e:	4628      	mov	r0, r5
 8012010:	b019      	add	sp, #100	; 0x64
 8012012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (PageStatus0 == VALID_PAGE)
 8012016:	b933      	cbnz	r3, 8012026 <EE_WriteVariable+0x92>
        if (PageStatus1 == RECEIVE_DATA)
 8012018:	f64e 63ee 	movw	r3, #61166	; 0xeeee
          return PAGE1;         /* Page1 valid */
 801201c:	1ad3      	subs	r3, r2, r3
 801201e:	fab3 f383 	clz	r3, r3
 8012022:	095b      	lsrs	r3, r3, #5
 8012024:	e7d6      	b.n	8011fd4 <EE_WriteVariable+0x40>
    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8012026:	25ab      	movs	r5, #171	; 0xab
}
 8012028:	4628      	mov	r0, r5
 801202a:	b019      	add	sp, #100	; 0x64
 801202c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012030:	ae08      	add	r6, sp, #32
  uint32_t SectorError = 0;
 8012032:	2500      	movs	r5, #0
  uint32_t valid[8] = {0x0000};
 8012034:	2220      	movs	r2, #32
 8012036:	4630      	mov	r0, r6
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8012038:	4f4b      	ldr	r7, [pc, #300]	; (8012168 <EE_WriteVariable+0x1d4>)
  uint32_t valid[8] = {0x0000};
 801203a:	4629      	mov	r1, r5
  uint32_t SectorError = 0;
 801203c:	9502      	str	r5, [sp, #8]
  uint32_t valid[8] = {0x0000};
 801203e:	f015 fa7c 	bl	802753a <memset>
  uint32_t receive[8] = {0xEEEE};
 8012042:	f64e 63ee 	movw	r3, #61166	; 0xeeee
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8012046:	4947      	ldr	r1, [pc, #284]	; (8012164 <EE_WriteVariable+0x1d0>)
  uint32_t receive[8] = {0xEEEE};
 8012048:	9517      	str	r5, [sp, #92]	; 0x5c
 801204a:	9310      	str	r3, [sp, #64]	; 0x40
 801204c:	e9cd 5511 	strd	r5, r5, [sp, #68]	; 0x44
 8012050:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
 8012054:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8012058:	880b      	ldrh	r3, [r1, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801205a:	883a      	ldrh	r2, [r7, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801205c:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801205e:	b292      	uxth	r2, r2
      if (PageStatus0 == VALID_PAGE)
 8012060:	b17b      	cbz	r3, 8012082 <EE_WriteVariable+0xee>
      else if (PageStatus1 == VALID_PAGE)
 8012062:	2a00      	cmp	r2, #0
 8012064:	d1df      	bne.n	8012026 <EE_WriteVariable+0x92>
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8012066:	460f      	mov	r7, r1
      else if (PageStatus1 == VALID_PAGE)
 8012068:	f04f 0907 	mov.w	r9, #7
  }

  /* Set the new Page status to RECEIVE_DATA status */

  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 801206c:	aa10      	add	r2, sp, #64	; 0x40
 801206e:	4639      	mov	r1, r7
 8012070:	2001      	movs	r0, #1
 8012072:	f7f2 ff2f 	bl	8004ed4 <HAL_FLASH_Program>

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8012076:	b170      	cbz	r0, 8012096 <EE_WriteVariable+0x102>
  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
  {
    return FlashStatus;
 8012078:	b285      	uxth	r5, r0
}
 801207a:	4628      	mov	r0, r5
 801207c:	b019      	add	sp, #100	; 0x64
 801207e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (PageStatus0 == VALID_PAGE)
 8012082:	f04f 0906 	mov.w	r9, #6
 8012086:	e7f1      	b.n	801206c <EE_WriteVariable+0xd8>
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8012088:	f107 0120 	add.w	r1, r7, #32
 801208c:	aa10      	add	r2, sp, #64	; 0x40
 801208e:	2001      	movs	r0, #1
 8012090:	f7f2 ff20 	bl	8004ed4 <HAL_FLASH_Program>
 8012094:	e7b8      	b.n	8012008 <EE_WriteVariable+0x74>
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8012096:	4641      	mov	r1, r8
 8012098:	4620      	mov	r0, r4
 801209a:	f7ff fd13 	bl	8011ac4 <EE_VerifyPageFullWriteVariable>
  if (EepromStatus != HAL_OK)
 801209e:	4605      	mov	r5, r0
 80120a0:	2800      	cmp	r0, #0
 80120a2:	d1b4      	bne.n	801200e <EE_WriteVariable+0x7a>
 80120a4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 801217c <EE_WriteVariable+0x1e8>
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80120a8:	4a2e      	ldr	r2, [pc, #184]	; (8012164 <EE_WriteVariable+0x1d0>)
 80120aa:	f108 0a06 	add.w	sl, r8, #6
      if (PageStatus0 == VALID_PAGE)
 80120ae:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8012180 <EE_WriteVariable+0x1ec>
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80120b2:	f838 0b02 	ldrh.w	r0, [r8], #2
 80120b6:	4284      	cmp	r4, r0
 80120b8:	d01b      	beq.n	80120f2 <EE_WriteVariable+0x15e>
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80120ba:	8813      	ldrh	r3, [r2, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80120bc:	492a      	ldr	r1, [pc, #168]	; (8012168 <EE_WriteVariable+0x1d4>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80120be:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80120c0:	8809      	ldrh	r1, [r1, #0]
 80120c2:	b289      	uxth	r1, r1
      if (PageStatus0 == VALID_PAGE)
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d034      	beq.n	8012132 <EE_WriteVariable+0x19e>
      else if (PageStatus1 == VALID_PAGE)
 80120c8:	2900      	cmp	r1, #0
 80120ca:	d148      	bne.n	801215e <EE_WriteVariable+0x1ca>
 80120cc:	4928      	ldr	r1, [pc, #160]	; (8012170 <EE_WriteVariable+0x1dc>)
 80120ce:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8012184 <EE_WriteVariable+0x1f0>
 80120d2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8012188 <EE_WriteVariable+0x1f4>
 80120d6:	460b      	mov	r3, r1
    AddressValue = (*(__IO uint16_t*)Address);
 80120d8:	8809      	ldrh	r1, [r1, #0]
    if (AddressValue == VirtAddress)
 80120da:	4288      	cmp	r0, r1
 80120dc:	d105      	bne.n	80120ea <EE_WriteVariable+0x156>
 80120de:	e031      	b.n	8012144 <EE_WriteVariable+0x1b0>
    AddressValue = (*(__IO uint16_t*)Address);
 80120e0:	f833 cc20 	ldrh.w	ip, [r3, #-32]
    if (AddressValue == VirtAddress)
 80120e4:	4560      	cmp	r0, ip
 80120e6:	d02b      	beq.n	8012140 <EE_WriteVariable+0x1ac>
 80120e8:	460b      	mov	r3, r1
      Address = Address - 32;
 80120ea:	f1a3 0120 	sub.w	r1, r3, #32
  while (Address > (PageStartAddress + 32))
 80120ee:	458e      	cmp	lr, r1
 80120f0:	d3f6      	bcc.n	80120e0 <EE_WriteVariable+0x14c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80120f2:	45d0      	cmp	r8, sl
 80120f4:	d1dd      	bne.n	80120b2 <EE_WriteVariable+0x11e>
  HAL_FLASH_Unlock();
 80120f6:	f7f2 ff63 	bl	8004fc0 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 80120fa:	4b1e      	ldr	r3, [pc, #120]	; (8012174 <EE_WriteVariable+0x1e0>)
 80120fc:	f44f 008e 	mov.w	r0, #4653056	; 0x470000
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8012100:	2100      	movs	r1, #0
  pEraseInit.Banks = FLASH_BANK_2 ;
 8012102:	2202      	movs	r2, #2
  pEraseInit.NbSectors = 1;
 8012104:	2401      	movs	r4, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8012106:	6158      	str	r0, [r3, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8012108:	2320      	movs	r3, #32
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 801210a:	9103      	str	r1, [sp, #12]
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801210c:	a803      	add	r0, sp, #12
 801210e:	a902      	add	r1, sp, #8
  pEraseInit.Sector = OldPageId;
 8012110:	f8cd 9014 	str.w	r9, [sp, #20]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8012114:	9204      	str	r2, [sp, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8012116:	e9cd 4306 	strd	r4, r3, [sp, #24]
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801211a:	f7f3 f855 	bl	80051c8 <HAL_FLASHEx_Erase>
  if (FlashStatus != HAL_OK)
 801211e:	2800      	cmp	r0, #0
 8012120:	d1aa      	bne.n	8012078 <EE_WriteVariable+0xe4>
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8012122:	4632      	mov	r2, r6
 8012124:	4639      	mov	r1, r7
 8012126:	4620      	mov	r0, r4
 8012128:	f7f2 fed4 	bl	8004ed4 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801212c:	2800      	cmp	r0, #0
 801212e:	d1a3      	bne.n	8012078 <EE_WriteVariable+0xe4>
 8012130:	e76d      	b.n	801200e <EE_WriteVariable+0x7a>
      if (PageStatus0 == VALID_PAGE)
 8012132:	f8df c058 	ldr.w	ip, [pc, #88]	; 801218c <EE_WriteVariable+0x1f8>
 8012136:	4659      	mov	r1, fp
 8012138:	465b      	mov	r3, fp
 801213a:	f8df e054 	ldr.w	lr, [pc, #84]	; 8012190 <EE_WriteVariable+0x1fc>
 801213e:	e7cb      	b.n	80120d8 <EE_WriteVariable+0x144>
 8012140:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
      *Data = (*(__IO uint16_t*)(Address - 32));
 8012144:	f8bc 1000 	ldrh.w	r1, [ip]
 8012148:	4b0b      	ldr	r3, [pc, #44]	; (8012178 <EE_WriteVariable+0x1e4>)
 801214a:	b289      	uxth	r1, r1
 801214c:	8019      	strh	r1, [r3, #0]
 801214e:	9201      	str	r2, [sp, #4]
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8012150:	f7ff fcb8 	bl	8011ac4 <EE_VerifyPageFullWriteVariable>
        if (EepromStatus != HAL_OK)
 8012154:	9a01      	ldr	r2, [sp, #4]
 8012156:	2800      	cmp	r0, #0
 8012158:	d0cb      	beq.n	80120f2 <EE_WriteVariable+0x15e>
 801215a:	4605      	mov	r5, r0
  return Status;
 801215c:	e757      	b.n	801200e <EE_WriteVariable+0x7a>
 801215e:	4b06      	ldr	r3, [pc, #24]	; (8012178 <EE_WriteVariable+0x1e4>)
 8012160:	8819      	ldrh	r1, [r3, #0]
 8012162:	e7f4      	b.n	801214e <EE_WriteVariable+0x1ba>
 8012164:	081c0000 	.word	0x081c0000
 8012168:	081e0000 	.word	0x081e0000
 801216c:	081bffff 	.word	0x081bffff
 8012170:	081fffe0 	.word	0x081fffe0
 8012174:	52002000 	.word	0x52002000
 8012178:	20000502 	.word	0x20000502
 801217c:	20000018 	.word	0x20000018
 8012180:	081dffe0 	.word	0x081dffe0
 8012184:	081e0020 	.word	0x081e0020
 8012188:	081fffc0 	.word	0x081fffc0
 801218c:	081dffc0 	.word	0x081dffc0
 8012190:	081c0020 	.word	0x081c0020

08012194 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8012194:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012196:	4903      	ldr	r1, [pc, #12]	; (80121a4 <MX_FATFS_Init+0x10>)
 8012198:	4803      	ldr	r0, [pc, #12]	; (80121a8 <MX_FATFS_Init+0x14>)
 801219a:	f7fe fca5 	bl	8010ae8 <FATFS_LinkDriver>
 801219e:	4b03      	ldr	r3, [pc, #12]	; (80121ac <MX_FATFS_Init+0x18>)
 80121a0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80121a2:	bd08      	pop	{r3, pc}
 80121a4:	20014b38 	.word	0x20014b38
 80121a8:	0802b2a8 	.word	0x0802b2a8
 80121ac:	20014b34 	.word	0x20014b34

080121b0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80121b0:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80121b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80121b6:	4803      	ldr	r0, [pc, #12]	; (80121c4 <BSP_PlatformIsDetected+0x14>)
 80121b8:	f7f3 fc38 	bl	8005a2c <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 80121bc:	fab0 f080 	clz	r0, r0
 80121c0:	0940      	lsrs	r0, r0, #5
 80121c2:	bd08      	pop	{r3, pc}
 80121c4:	58020800 	.word	0x58020800

080121c8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80121c8:	b570      	push	{r4, r5, r6, lr}
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80121ca:	4b18      	ldr	r3, [pc, #96]	; (801222c <MX_FMC_Init+0x64>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80121cc:	2001      	movs	r0, #1
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80121ce:	4d18      	ldr	r5, [pc, #96]	; (8012230 <MX_FMC_Init+0x68>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80121d0:	2108      	movs	r1, #8
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80121d2:	2410      	movs	r4, #16
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80121d4:	2240      	movs	r2, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80121d6:	601d      	str	r5, [r3, #0]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80121d8:	f44f 7580 	mov.w	r5, #256	; 0x100
{
 80121dc:	b088      	sub	sp, #32
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
 80121de:	2604      	movs	r6, #4
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80121e0:	6098      	str	r0, [r3, #8]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 80121e2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80121e6:	60d9      	str	r1, [r3, #12]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80121e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80121ec:	611c      	str	r4, [r3, #16]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80121ee:	2400      	movs	r4, #0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80121f0:	615a      	str	r2, [r3, #20]
  SdramTiming.LoadToActiveDelay = 2;
 80121f2:	2202      	movs	r2, #2
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80121f4:	619d      	str	r5, [r3, #24]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80121f6:	2506      	movs	r5, #6
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 80121f8:	6218      	str	r0, [r3, #32]
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80121fa:	4618      	mov	r0, r3
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80121fc:	6259      	str	r1, [r3, #36]	; 0x24
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80121fe:	eb0d 0106 	add.w	r1, sp, r6
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8012202:	605c      	str	r4, [r3, #4]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8012204:	61dc      	str	r4, [r3, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8012206:	629c      	str	r4, [r3, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8012208:	9201      	str	r2, [sp, #4]
  SdramTiming.RCDDelay = 2;
 801220a:	9207      	str	r2, [sp, #28]
  SdramTiming.ExitSelfRefreshDelay = 6;
 801220c:	9502      	str	r5, [sp, #8]
  SdramTiming.RPDelay = 2;
 801220e:	e9cd 2205 	strd	r2, r2, [sp, #20]
  SdramTiming.SelfRefreshTime = 4;
 8012212:	e9cd 6503 	strd	r6, r5, [sp, #12]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8012216:	f7fa f8fb 	bl	800c410 <HAL_SDRAM_Init>
 801221a:	b108      	cbz	r0, 8012220 <MX_FMC_Init+0x58>
  {
    Error_Handler( );
 801221c:	f001 fd0c 	bl	8013c38 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8012220:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8012224:	f7ee fd2c 	bl	8000c80 <HAL_SetFMCMemorySwappingConfig>

}
 8012228:	b008      	add	sp, #32
 801222a:	bd70      	pop	{r4, r5, r6, pc}
 801222c:	20014f9c 	.word	0x20014f9c
 8012230:	52004140 	.word	0x52004140

08012234 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8012234:	4a2a      	ldr	r2, [pc, #168]	; (80122e0 <HAL_SDRAM_MspInit+0xac>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012236:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8012238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801223a:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 801223c:	6814      	ldr	r4, [r2, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801223e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8012242:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8012246:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8012248:	b10c      	cbz	r4, 801224e <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 801224a:	b007      	add	sp, #28
 801224c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_RCC_FMC_CLK_ENABLE();
 801224e:	4b25      	ldr	r3, [pc, #148]	; (80122e4 <HAL_SDRAM_MspInit+0xb0>)
  FMC_Initialized = 1;
 8012250:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8012252:	f64f 003f 	movw	r0, #63551	; 0xf83f
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012256:	2702      	movs	r7, #2
  FMC_Initialized = 1;
 8012258:	6011      	str	r1, [r2, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801225a:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 801225c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8012260:	250c      	movs	r5, #12
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012262:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8012264:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012268:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 801226c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8012270:	9001      	str	r0, [sp, #4]
  __HAL_RCC_FMC_CLK_ENABLE();
 8012272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012276:	481c      	ldr	r0, [pc, #112]	; (80122e8 <HAL_SDRAM_MspInit+0xb4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012278:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 801227a:	9300      	str	r3, [sp, #0]
 801227c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801227e:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012282:	f7f3 f8ab 	bl	80053dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8012286:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012288:	a901      	add	r1, sp, #4
 801228a:	4818      	ldr	r0, [pc, #96]	; (80122ec <HAL_SDRAM_MspInit+0xb8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 801228c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801228e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012290:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8012292:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012296:	f7f3 f8a1 	bl	80053dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 801229a:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801229e:	a901      	add	r1, sp, #4
 80122a0:	4813      	ldr	r0, [pc, #76]	; (80122f0 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 80122a2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122a4:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122a6:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80122a8:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80122ac:	f7f3 f896 	bl	80053dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80122b0:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80122b4:	a901      	add	r1, sp, #4
 80122b6:	480f      	ldr	r0, [pc, #60]	; (80122f4 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80122b8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122ba:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122bc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80122be:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80122c2:	f7f3 f88b 	bl	80053dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 80122c6:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80122ca:	a901      	add	r1, sp, #4
 80122cc:	480a      	ldr	r0, [pc, #40]	; (80122f8 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122ce:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122d0:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 80122d2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80122d4:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80122d8:	f7f3 f880 	bl	80053dc <HAL_GPIO_Init>
}
 80122dc:	b007      	add	sp, #28
 80122de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122e0:	20000504 	.word	0x20000504
 80122e4:	58024400 	.word	0x58024400
 80122e8:	58021400 	.word	0x58021400
 80122ec:	58020800 	.word	0x58020800
 80122f0:	58021800 	.word	0x58021800
 80122f4:	58021000 	.word	0x58021000
 80122f8:	58020c00 	.word	0x58020c00

080122fc <GFXdrawPixel.part.0>:
void GFXstartWrite(GFX* myGFX){
    // Overwrite in subclasses if desired!
}

// the most basic function, set a single pixel
void GFXdrawPixel(GFX* myGFX, int16_t x, int16_t y, uint16_t color) {
 80122fc:	b430      	push	{r4, r5}
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
    return;

  // check rotation, move pixel around if necessary
  switch (GFXgetRotation(myGFX)) {
 80122fe:	7a04      	ldrb	r4, [r0, #8]
 8012300:	2c02      	cmp	r4, #2
 8012302:	d050      	beq.n	80123a6 <GFXdrawPixel.part.0+0xaa>
 8012304:	2c03      	cmp	r4, #3
 8012306:	d048      	beq.n	801239a <GFXdrawPixel.part.0+0x9e>
 8012308:	2c01      	cmp	r4, #1
 801230a:	d018      	beq.n	801233e <GFXdrawPixel.part.0+0x42>
    y = myGFX->HEIGHT - y - 1;
    break;
  }

  // x is which column
    switch (color)
 801230c:	2b01      	cmp	r3, #1
 801230e:	d01e      	beq.n	801234e <GFXdrawPixel.part.0+0x52>
 8012310:	d32f      	bcc.n	8012372 <GFXdrawPixel.part.0+0x76>
 8012312:	2b02      	cmp	r3, #2
 8012314:	d111      	bne.n	801233a <GFXdrawPixel.part.0+0x3e>
    {
      case WHITE:   buffer[x+ (y/8)*myGFX->WIDTH] |=  (1 << (y&7)); break;
      case BLACK:   buffer[x+ (y/8)*myGFX->WIDTH] &= ~(1 << (y&7)); break;
      case INVERSE: buffer[x+ (y/8)*myGFX->WIDTH] ^=  (1 << (y&7)); break;
 8012316:	2a00      	cmp	r2, #0
 8012318:	4613      	mov	r3, r2
 801231a:	8804      	ldrh	r4, [r0, #0]
 801231c:	f04f 0001 	mov.w	r0, #1
 8012320:	bfb8      	it	lt
 8012322:	1dd3      	addlt	r3, r2, #7
 8012324:	f002 0207 	and.w	r2, r2, #7
 8012328:	10db      	asrs	r3, r3, #3
 801232a:	fa00 f202 	lsl.w	r2, r0, r2
 801232e:	fb13 1104 	smlabb	r1, r3, r4, r1
 8012332:	4b21      	ldr	r3, [pc, #132]	; (80123b8 <GFXdrawPixel.part.0+0xbc>)
 8012334:	5c58      	ldrb	r0, [r3, r1]
 8012336:	4042      	eors	r2, r0
 8012338:	545a      	strb	r2, [r3, r1]
    }

}
 801233a:	bc30      	pop	{r4, r5}
 801233c:	4770      	bx	lr
    x = myGFX->WIDTH - x - 1;
 801233e:	43d4      	mvns	r4, r2
 8012340:	8805      	ldrh	r5, [r0, #0]
    _swap_int16_t(x, y);
 8012342:	460a      	mov	r2, r1
    switch (color)
 8012344:	2b01      	cmp	r3, #1
    x = myGFX->WIDTH - x - 1;
 8012346:	eb04 0105 	add.w	r1, r4, r5
 801234a:	b209      	sxth	r1, r1
    switch (color)
 801234c:	d1e0      	bne.n	8012310 <GFXdrawPixel.part.0+0x14>
      case WHITE:   buffer[x+ (y/8)*myGFX->WIDTH] |=  (1 << (y&7)); break;
 801234e:	2a00      	cmp	r2, #0
 8012350:	4613      	mov	r3, r2
 8012352:	8804      	ldrh	r4, [r0, #0]
 8012354:	f002 0007 	and.w	r0, r2, #7
 8012358:	bfb8      	it	lt
 801235a:	1dd3      	addlt	r3, r2, #7
 801235c:	2201      	movs	r2, #1
 801235e:	10db      	asrs	r3, r3, #3
 8012360:	4082      	lsls	r2, r0
 8012362:	fb13 1104 	smlabb	r1, r3, r4, r1
 8012366:	4b14      	ldr	r3, [pc, #80]	; (80123b8 <GFXdrawPixel.part.0+0xbc>)
 8012368:	5c58      	ldrb	r0, [r3, r1]
 801236a:	4302      	orrs	r2, r0
 801236c:	545a      	strb	r2, [r3, r1]
}
 801236e:	bc30      	pop	{r4, r5}
 8012370:	4770      	bx	lr
      case BLACK:   buffer[x+ (y/8)*myGFX->WIDTH] &= ~(1 << (y&7)); break;
 8012372:	2a00      	cmp	r2, #0
 8012374:	4613      	mov	r3, r2
 8012376:	8800      	ldrh	r0, [r0, #0]
 8012378:	f002 0407 	and.w	r4, r2, #7
 801237c:	bfb8      	it	lt
 801237e:	1dd3      	addlt	r3, r2, #7
 8012380:	2201      	movs	r2, #1
 8012382:	10db      	asrs	r3, r3, #3
 8012384:	fb13 1100 	smlabb	r1, r3, r0, r1
 8012388:	480b      	ldr	r0, [pc, #44]	; (80123b8 <GFXdrawPixel.part.0+0xbc>)
 801238a:	fa02 f304 	lsl.w	r3, r2, r4
 801238e:	5c42      	ldrb	r2, [r0, r1]
 8012390:	ea22 0203 	bic.w	r2, r2, r3
 8012394:	5442      	strb	r2, [r0, r1]
}
 8012396:	bc30      	pop	{r4, r5}
 8012398:	4770      	bx	lr
    y = myGFX->HEIGHT - y - 1;
 801239a:	43cc      	mvns	r4, r1
 801239c:	8845      	ldrh	r5, [r0, #2]
	_swap_int16_t(x, y);
 801239e:	4611      	mov	r1, r2
    y = myGFX->HEIGHT - y - 1;
 80123a0:	1962      	adds	r2, r4, r5
 80123a2:	b212      	sxth	r2, r2
 80123a4:	e7b2      	b.n	801230c <GFXdrawPixel.part.0+0x10>
    x = myGFX->WIDTH - x - 1;
 80123a6:	43c9      	mvns	r1, r1
    y = myGFX->HEIGHT - y - 1;
 80123a8:	43d2      	mvns	r2, r2
    x = myGFX->WIDTH - x - 1;
 80123aa:	8805      	ldrh	r5, [r0, #0]
    y = myGFX->HEIGHT - y - 1;
 80123ac:	8844      	ldrh	r4, [r0, #2]
    x = myGFX->WIDTH - x - 1;
 80123ae:	4429      	add	r1, r5
    y = myGFX->HEIGHT - y - 1;
 80123b0:	4422      	add	r2, r4
    x = myGFX->WIDTH - x - 1;
 80123b2:	b209      	sxth	r1, r1
    y = myGFX->HEIGHT - y - 1;
 80123b4:	b212      	sxth	r2, r2
 80123b6:	e7a9      	b.n	801230c <GFXdrawPixel.part.0+0x10>
 80123b8:	20018464 	.word	0x20018464

080123bc <GFXinit>:
	myGfx->WIDTH = w;
 80123bc:	2300      	movs	r3, #0
	myGfx->_width    = w;
 80123be:	8081      	strh	r1, [r0, #4]
	myGfx->_height   = h;
 80123c0:	80c2      	strh	r2, [r0, #6]
	myGfx->WIDTH = w;
 80123c2:	f361 030f 	bfi	r3, r1, #0, #16
	myGfx->rotation  = 0;
 80123c6:	2101      	movs	r1, #1
	myGfx->WIDTH = w;
 80123c8:	f362 431f 	bfi	r3, r2, #16, #16
	myGfx->fontHeight = 8;
 80123cc:	2208      	movs	r2, #8
	myGfx->rotation  = 0;
 80123ce:	6141      	str	r1, [r0, #20]
	myGfx->WIDTH = w;
 80123d0:	6003      	str	r3, [r0, #0]
	myGfx->rotation  = 0;
 80123d2:	2300      	movs	r3, #0
	myGfx->fontHeight = 8;
 80123d4:	61c2      	str	r2, [r0, #28]
	myGfx->rotation  = 0;
 80123d6:	6083      	str	r3, [r0, #8]
	myGfx->gfxFont   = NULL;
 80123d8:	6183      	str	r3, [r0, #24]
{
 80123da:	b430      	push	{r4, r5}
	myGfx->rotation  = 0;
 80123dc:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80123e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80123e4:	e9c0 5403 	strd	r5, r4, [r0, #12]
}
 80123e8:	bc30      	pop	{r4, r5}
 80123ea:	4770      	bx	lr

080123ec <GFXwriteLine>:
        uint16_t color) {
 80123ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123f0:	b083      	sub	sp, #12
 80123f2:	461e      	mov	r6, r3
 80123f4:	4617      	mov	r7, r2
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80123f6:	4694      	mov	ip, r2
        uint16_t color) {
 80123f8:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
 80123fc:	4682      	mov	sl, r0
 80123fe:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8012402:	1aab      	subs	r3, r5, r2
 8012404:	1a72      	subs	r2, r6, r1
        uint16_t color) {
 8012406:	9001      	str	r0, [sp, #4]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8012408:	2b00      	cmp	r3, #0
 801240a:	bfb8      	it	lt
 801240c:	425b      	neglt	r3, r3
 801240e:	2a00      	cmp	r2, #0
 8012410:	bfb8      	it	lt
 8012412:	4252      	neglt	r2, r2
    if (steep) {
 8012414:	4293      	cmp	r3, r2
 8012416:	dc7d      	bgt.n	8012514 <GFXwriteLine+0x128>
 8012418:	46ae      	mov	lr, r5
 801241a:	462c      	mov	r4, r5
 801241c:	46bb      	mov	fp, r7
 801241e:	4635      	mov	r5, r6
 8012420:	460f      	mov	r7, r1
 8012422:	4676      	mov	r6, lr
 8012424:	4661      	mov	r1, ip
 8012426:	4698      	mov	r8, r3
    if (x0 > x1) {
 8012428:	42af      	cmp	r7, r5
 801242a:	dd5f      	ble.n	80124ec <GFXwriteLine+0x100>
    dx = x1 - x0;
 801242c:	eba7 0905 	sub.w	r9, r7, r5
 8012430:	ebab 0004 	sub.w	r0, fp, r4
    if (y0 < y1) {
 8012434:	f64f 7bff 	movw	fp, #65535	; 0xffff
    dx = x1 - x0;
 8012438:	fa1f f989 	uxth.w	r9, r9
 801243c:	ea80 78e0 	eor.w	r8, r0, r0, asr #31
    int16_t err = dx / 2;
 8012440:	fa0f f489 	sxth.w	r4, r9
 8012444:	eba8 78e0 	sub.w	r8, r8, r0, asr #31
 8012448:	2c00      	cmp	r4, #0
 801244a:	bfb8      	it	lt
 801244c:	3401      	addlt	r4, #1
    if (y0 < y1) {
 801244e:	42b1      	cmp	r1, r6
 8012450:	bfc8      	it	gt
 8012452:	f04f 0b01 	movgt.w	fp, #1
    int16_t err = dx / 2;
 8012456:	1064      	asrs	r4, r4, #1
 8012458:	4293      	cmp	r3, r2
 801245a:	fa1f f888 	uxth.w	r8, r8
 801245e:	dc3c      	bgt.n	80124da <GFXwriteLine+0xee>
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 8012460:	2d00      	cmp	r5, #0
 8012462:	db0f      	blt.n	8012484 <GFXwriteLine+0x98>
 8012464:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8012468:	42ab      	cmp	r3, r5
 801246a:	dd0b      	ble.n	8012484 <GFXwriteLine+0x98>
 801246c:	0432      	lsls	r2, r6, #16
 801246e:	d409      	bmi.n	8012484 <GFXwriteLine+0x98>
 8012470:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8012474:	4632      	mov	r2, r6
 8012476:	4629      	mov	r1, r5
 8012478:	9b01      	ldr	r3, [sp, #4]
 801247a:	42b0      	cmp	r0, r6
 801247c:	4650      	mov	r0, sl
 801247e:	dd01      	ble.n	8012484 <GFXwriteLine+0x98>
 8012480:	f7ff ff3c 	bl	80122fc <GFXdrawPixel.part.0>
        err -= dy;
 8012484:	eba4 0408 	sub.w	r4, r4, r8
 8012488:	3501      	adds	r5, #1
 801248a:	b2a3      	uxth	r3, r4
 801248c:	b22d      	sxth	r5, r5
 801248e:	b21c      	sxth	r4, r3
        if (err < 0) {
 8012490:	2c00      	cmp	r4, #0
 8012492:	da04      	bge.n	801249e <GFXwriteLine+0xb2>
            y0 += ystep;
 8012494:	445e      	add	r6, fp
            err += dx;
 8012496:	eb09 0403 	add.w	r4, r9, r3
            y0 += ystep;
 801249a:	b236      	sxth	r6, r6
            err += dx;
 801249c:	b224      	sxth	r4, r4
    for (; x0<=x1; x0++) {
 801249e:	42af      	cmp	r7, r5
 80124a0:	dade      	bge.n	8012460 <GFXwriteLine+0x74>
}
 80124a2:	b003      	add	sp, #12
 80124a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 80124a8:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80124ac:	462a      	mov	r2, r5
 80124ae:	4631      	mov	r1, r6
 80124b0:	9b01      	ldr	r3, [sp, #4]
 80124b2:	4285      	cmp	r5, r0
 80124b4:	4650      	mov	r0, sl
 80124b6:	da01      	bge.n	80124bc <GFXwriteLine+0xd0>
 80124b8:	f7ff ff20 	bl	80122fc <GFXdrawPixel.part.0>
        err -= dy;
 80124bc:	eba4 0408 	sub.w	r4, r4, r8
 80124c0:	3501      	adds	r5, #1
 80124c2:	b2a3      	uxth	r3, r4
 80124c4:	b22d      	sxth	r5, r5
 80124c6:	b21c      	sxth	r4, r3
        if (err < 0) {
 80124c8:	2c00      	cmp	r4, #0
 80124ca:	da04      	bge.n	80124d6 <GFXwriteLine+0xea>
            y0 += ystep;
 80124cc:	445e      	add	r6, fp
            err += dx;
 80124ce:	eb03 0409 	add.w	r4, r3, r9
            y0 += ystep;
 80124d2:	b236      	sxth	r6, r6
            err += dx;
 80124d4:	b224      	sxth	r4, r4
    for (; x0<=x1; x0++) {
 80124d6:	42af      	cmp	r7, r5
 80124d8:	dbe3      	blt.n	80124a2 <GFXwriteLine+0xb6>
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 80124da:	2e00      	cmp	r6, #0
 80124dc:	dbee      	blt.n	80124bc <GFXwriteLine+0xd0>
 80124de:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80124e2:	429e      	cmp	r6, r3
 80124e4:	daea      	bge.n	80124bc <GFXwriteLine+0xd0>
 80124e6:	042b      	lsls	r3, r5, #16
 80124e8:	d4e8      	bmi.n	80124bc <GFXwriteLine+0xd0>
 80124ea:	e7dd      	b.n	80124a8 <GFXwriteLine+0xbc>
    dx = x1 - x0;
 80124ec:	eba5 0907 	sub.w	r9, r5, r7
    if (y0 < y1) {
 80124f0:	4628      	mov	r0, r5
 80124f2:	463d      	mov	r5, r7
    dx = x1 - x0;
 80124f4:	fa1f f989 	uxth.w	r9, r9
    int16_t err = dx / 2;
 80124f8:	fa0f f489 	sxth.w	r4, r9
 80124fc:	2c00      	cmp	r4, #0
 80124fe:	bfb8      	it	lt
 8012500:	3401      	addlt	r4, #1
    if (y0 < y1) {
 8012502:	42b1      	cmp	r1, r6
 8012504:	460e      	mov	r6, r1
    int16_t err = dx / 2;
 8012506:	ea4f 0464 	mov.w	r4, r4, asr #1
    if (y0 < y1) {
 801250a:	da07      	bge.n	801251c <GFXwriteLine+0x130>
 801250c:	f04f 0b01 	mov.w	fp, #1
 8012510:	4607      	mov	r7, r0
 8012512:	e7a1      	b.n	8012458 <GFXwriteLine+0x6c>
 8012514:	4634      	mov	r4, r6
 8012516:	468b      	mov	fp, r1
 8012518:	4690      	mov	r8, r2
 801251a:	e785      	b.n	8012428 <GFXwriteLine+0x3c>
 801251c:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8012520:	4607      	mov	r7, r0
 8012522:	e799      	b.n	8012458 <GFXwriteLine+0x6c>

08012524 <GFXdrawPixel>:
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 8012524:	2900      	cmp	r1, #0
 8012526:	db28      	blt.n	801257a <GFXdrawPixel+0x56>
void GFXdrawPixel(GFX* myGFX, int16_t x, int16_t y, uint16_t color) {
 8012528:	b430      	push	{r4, r5}
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 801252a:	8884      	ldrh	r4, [r0, #4]
 801252c:	42a1      	cmp	r1, r4
 801252e:	da22      	bge.n	8012576 <GFXdrawPixel+0x52>
 8012530:	2a00      	cmp	r2, #0
 8012532:	db20      	blt.n	8012576 <GFXdrawPixel+0x52>
 8012534:	88c4      	ldrh	r4, [r0, #6]
 8012536:	42a2      	cmp	r2, r4
 8012538:	da1d      	bge.n	8012576 <GFXdrawPixel+0x52>
  switch (GFXgetRotation(myGFX)) {
 801253a:	7a04      	ldrb	r4, [r0, #8]
 801253c:	2c02      	cmp	r4, #2
 801253e:	d04e      	beq.n	80125de <GFXdrawPixel+0xba>
 8012540:	2c03      	cmp	r4, #3
 8012542:	d046      	beq.n	80125d2 <GFXdrawPixel+0xae>
 8012544:	2c01      	cmp	r4, #1
 8012546:	d019      	beq.n	801257c <GFXdrawPixel+0x58>
    switch (color)
 8012548:	2b01      	cmp	r3, #1
 801254a:	d02f      	beq.n	80125ac <GFXdrawPixel+0x88>
 801254c:	d31c      	bcc.n	8012588 <GFXdrawPixel+0x64>
 801254e:	2b02      	cmp	r3, #2
 8012550:	d111      	bne.n	8012576 <GFXdrawPixel+0x52>
      case INVERSE: buffer[x+ (y/8)*myGFX->WIDTH] ^=  (1 << (y&7)); break;
 8012552:	2a00      	cmp	r2, #0
 8012554:	4613      	mov	r3, r2
 8012556:	8804      	ldrh	r4, [r0, #0]
 8012558:	f04f 0001 	mov.w	r0, #1
 801255c:	bfb8      	it	lt
 801255e:	1dd3      	addlt	r3, r2, #7
 8012560:	f002 0207 	and.w	r2, r2, #7
 8012564:	10db      	asrs	r3, r3, #3
 8012566:	fa00 f202 	lsl.w	r2, r0, r2
 801256a:	fb13 1104 	smlabb	r1, r3, r4, r1
 801256e:	4b20      	ldr	r3, [pc, #128]	; (80125f0 <GFXdrawPixel+0xcc>)
 8012570:	5c58      	ldrb	r0, [r3, r1]
 8012572:	4042      	eors	r2, r0
 8012574:	545a      	strb	r2, [r3, r1]
}
 8012576:	bc30      	pop	{r4, r5}
 8012578:	4770      	bx	lr
 801257a:	4770      	bx	lr
    x = myGFX->WIDTH - x - 1;
 801257c:	43d4      	mvns	r4, r2
 801257e:	8805      	ldrh	r5, [r0, #0]
 8012580:	460a      	mov	r2, r1
 8012582:	1961      	adds	r1, r4, r5
 8012584:	b209      	sxth	r1, r1
 8012586:	e7df      	b.n	8012548 <GFXdrawPixel+0x24>
      case BLACK:   buffer[x+ (y/8)*myGFX->WIDTH] &= ~(1 << (y&7)); break;
 8012588:	2a00      	cmp	r2, #0
 801258a:	4613      	mov	r3, r2
 801258c:	8800      	ldrh	r0, [r0, #0]
 801258e:	f002 0407 	and.w	r4, r2, #7
 8012592:	bfb8      	it	lt
 8012594:	1dd3      	addlt	r3, r2, #7
 8012596:	2201      	movs	r2, #1
 8012598:	10db      	asrs	r3, r3, #3
 801259a:	40a2      	lsls	r2, r4
 801259c:	fb13 1100 	smlabb	r1, r3, r0, r1
 80125a0:	4813      	ldr	r0, [pc, #76]	; (80125f0 <GFXdrawPixel+0xcc>)
 80125a2:	5c43      	ldrb	r3, [r0, r1]
 80125a4:	ea23 0302 	bic.w	r3, r3, r2
 80125a8:	5443      	strb	r3, [r0, r1]
 80125aa:	e7e4      	b.n	8012576 <GFXdrawPixel+0x52>
      case WHITE:   buffer[x+ (y/8)*myGFX->WIDTH] |=  (1 << (y&7)); break;
 80125ac:	2a00      	cmp	r2, #0
 80125ae:	4613      	mov	r3, r2
 80125b0:	8804      	ldrh	r4, [r0, #0]
 80125b2:	f04f 0001 	mov.w	r0, #1
 80125b6:	bfb8      	it	lt
 80125b8:	1dd3      	addlt	r3, r2, #7
 80125ba:	f002 0207 	and.w	r2, r2, #7
 80125be:	10db      	asrs	r3, r3, #3
 80125c0:	fb13 1104 	smlabb	r1, r3, r4, r1
 80125c4:	4c0a      	ldr	r4, [pc, #40]	; (80125f0 <GFXdrawPixel+0xcc>)
 80125c6:	fa00 f302 	lsl.w	r3, r0, r2
 80125ca:	5c62      	ldrb	r2, [r4, r1]
 80125cc:	4313      	orrs	r3, r2
 80125ce:	5463      	strb	r3, [r4, r1]
 80125d0:	e7d1      	b.n	8012576 <GFXdrawPixel+0x52>
    y = myGFX->HEIGHT - y - 1;
 80125d2:	8844      	ldrh	r4, [r0, #2]
 80125d4:	3c01      	subs	r4, #1
 80125d6:	1a64      	subs	r4, r4, r1
 80125d8:	4611      	mov	r1, r2
 80125da:	b222      	sxth	r2, r4
 80125dc:	e7b4      	b.n	8012548 <GFXdrawPixel+0x24>
    x = myGFX->WIDTH - x - 1;
 80125de:	8804      	ldrh	r4, [r0, #0]
    y = myGFX->HEIGHT - y - 1;
 80125e0:	43d2      	mvns	r2, r2
 80125e2:	8845      	ldrh	r5, [r0, #2]
    x = myGFX->WIDTH - x - 1;
 80125e4:	3c01      	subs	r4, #1
    y = myGFX->HEIGHT - y - 1;
 80125e6:	442a      	add	r2, r5
    x = myGFX->WIDTH - x - 1;
 80125e8:	1a61      	subs	r1, r4, r1
    y = myGFX->HEIGHT - y - 1;
 80125ea:	b212      	sxth	r2, r2
    x = myGFX->WIDTH - x - 1;
 80125ec:	b209      	sxth	r1, r1
 80125ee:	e7ab      	b.n	8012548 <GFXdrawPixel+0x24>
 80125f0:	20018464 	.word	0x20018464

080125f4 <GFXfillRect>:
 80125f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125f8:	440b      	add	r3, r1
 80125fa:	b089      	sub	sp, #36	; 0x24
 80125fc:	428b      	cmp	r3, r1
 80125fe:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8012602:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8012606:	9502      	str	r5, [sp, #8]
 8012608:	f340 80b5 	ble.w	8012776 <GFXfillRect+0x182>
 801260c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8012610:	4494      	add	ip, r2
 8012612:	fa0f fc8c 	sxth.w	ip, ip
 8012616:	4562      	cmp	r2, ip
 8012618:	bfcb      	itete	gt
 801261a:	4615      	movgt	r5, r2
 801261c:	4665      	movle	r5, ip
 801261e:	4664      	movgt	r4, ip
 8012620:	4614      	movle	r4, r2
 8012622:	9504      	str	r5, [sp, #16]
 8012624:	9403      	str	r4, [sp, #12]
 8012626:	1b2c      	subs	r4, r5, r4
 8012628:	b2a4      	uxth	r4, r4
 801262a:	b225      	sxth	r5, r4
 801262c:	9407      	str	r4, [sp, #28]
 801262e:	ebac 0402 	sub.w	r4, ip, r2
 8012632:	2d00      	cmp	r5, #0
 8012634:	bfb8      	it	lt
 8012636:	3501      	addlt	r5, #1
 8012638:	2c00      	cmp	r4, #0
 801263a:	ea4f 0565 	mov.w	r5, r5, asr #1
 801263e:	bfb8      	it	lt
 8012640:	4264      	neglt	r4, r4
 8012642:	9506      	str	r5, [sp, #24]
 8012644:	9405      	str	r4, [sp, #20]
 8012646:	4562      	cmp	r2, ip
 8012648:	f040 8098 	bne.w	801277c <GFXfillRect+0x188>
 801264c:	2600      	movs	r6, #0
 801264e:	460c      	mov	r4, r1
 8012650:	4688      	mov	r8, r1
 8012652:	f8dd e014 	ldr.w	lr, [sp, #20]
 8012656:	46b2      	mov	sl, r6
 8012658:	4617      	mov	r7, r2
 801265a:	fa1f fe8e 	uxth.w	lr, lr
 801265e:	9301      	str	r3, [sp, #4]
 8012660:	e046      	b.n	80126f0 <GFXfillRect+0xfc>
 8012662:	2f00      	cmp	r7, #0
 8012664:	db35      	blt.n	80126d2 <GFXfillRect+0xde>
 8012666:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 801266a:	454f      	cmp	r7, r9
 801266c:	da31      	bge.n	80126d2 <GFXfillRect+0xde>
 801266e:	0beb      	lsrs	r3, r5, #15
 8012670:	d12f      	bne.n	80126d2 <GFXfillRect+0xde>
 8012672:	f8b0 9006 	ldrh.w	r9, [r0, #6]
 8012676:	454c      	cmp	r4, r9
 8012678:	da2b      	bge.n	80126d2 <GFXfillRect+0xde>
 801267a:	f890 9008 	ldrb.w	r9, [r0, #8]
 801267e:	f1b9 0f02 	cmp.w	r9, #2
 8012682:	f000 80df 	beq.w	8012844 <GFXfillRect+0x250>
 8012686:	f1b9 0f03 	cmp.w	r9, #3
 801268a:	f000 80d3 	beq.w	8012834 <GFXfillRect+0x240>
 801268e:	f1b9 0f01 	cmp.w	r9, #1
 8012692:	f000 80c5 	beq.w	8012820 <GFXfillRect+0x22c>
 8012696:	46b9      	mov	r9, r7
 8012698:	9b02      	ldr	r3, [sp, #8]
 801269a:	2b01      	cmp	r3, #1
 801269c:	f000 80a9 	beq.w	80127f2 <GFXfillRect+0x1fe>
 80126a0:	d378      	bcc.n	8012794 <GFXfillRect+0x1a0>
 80126a2:	2b02      	cmp	r3, #2
 80126a4:	d115      	bne.n	80126d2 <GFXfillRect+0xde>
 80126a6:	2c00      	cmp	r4, #0
 80126a8:	46a3      	mov	fp, r4
 80126aa:	8803      	ldrh	r3, [r0, #0]
 80126ac:	bfb8      	it	lt
 80126ae:	f104 0b07 	addlt.w	fp, r4, #7
 80126b2:	f004 0407 	and.w	r4, r4, #7
 80126b6:	ea4f 0beb 	mov.w	fp, fp, asr #3
 80126ba:	fb1b 9903 	smlabb	r9, fp, r3, r9
 80126be:	2301      	movs	r3, #1
 80126c0:	fa03 f404 	lsl.w	r4, r3, r4
 80126c4:	4b81      	ldr	r3, [pc, #516]	; (80128cc <GFXfillRect+0x2d8>)
 80126c6:	f813 b009 	ldrb.w	fp, [r3, r9]
 80126ca:	ea84 040b 	eor.w	r4, r4, fp
 80126ce:	f803 4009 	strb.w	r4, [r3, r9]
 80126d2:	eba6 060e 	sub.w	r6, r6, lr
 80126d6:	b2b4      	uxth	r4, r6
 80126d8:	b226      	sxth	r6, r4
 80126da:	2e00      	cmp	r6, #0
 80126dc:	da04      	bge.n	80126e8 <GFXfillRect+0xf4>
 80126de:	3f01      	subs	r7, #1
 80126e0:	eb04 060a 	add.w	r6, r4, sl
 80126e4:	b23f      	sxth	r7, r7
 80126e6:	b236      	sxth	r6, r6
 80126e8:	1c6c      	adds	r4, r5, #1
 80126ea:	b224      	sxth	r4, r4
 80126ec:	4544      	cmp	r4, r8
 80126ee:	dc3c      	bgt.n	801276a <GFXfillRect+0x176>
 80126f0:	4562      	cmp	r2, ip
 80126f2:	b2a5      	uxth	r5, r4
 80126f4:	d1b5      	bne.n	8012662 <GFXfillRect+0x6e>
 80126f6:	2c00      	cmp	r4, #0
 80126f8:	dbeb      	blt.n	80126d2 <GFXfillRect+0xde>
 80126fa:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 80126fe:	454c      	cmp	r4, r9
 8012700:	dae7      	bge.n	80126d2 <GFXfillRect+0xde>
 8012702:	043b      	lsls	r3, r7, #16
 8012704:	d4e5      	bmi.n	80126d2 <GFXfillRect+0xde>
 8012706:	f8b0 9006 	ldrh.w	r9, [r0, #6]
 801270a:	454f      	cmp	r7, r9
 801270c:	dae1      	bge.n	80126d2 <GFXfillRect+0xde>
 801270e:	f890 9008 	ldrb.w	r9, [r0, #8]
 8012712:	f1b9 0f02 	cmp.w	r9, #2
 8012716:	f000 80cc 	beq.w	80128b2 <GFXfillRect+0x2be>
 801271a:	f1b9 0f03 	cmp.w	r9, #3
 801271e:	f000 80be 	beq.w	801289e <GFXfillRect+0x2aa>
 8012722:	f1b9 0f01 	cmp.w	r9, #1
 8012726:	f000 80b2 	beq.w	801288e <GFXfillRect+0x29a>
 801272a:	46b9      	mov	r9, r7
 801272c:	9b02      	ldr	r3, [sp, #8]
 801272e:	2b01      	cmp	r3, #1
 8012730:	f000 8095 	beq.w	801285e <GFXfillRect+0x26a>
 8012734:	d345      	bcc.n	80127c2 <GFXfillRect+0x1ce>
 8012736:	2b02      	cmp	r3, #2
 8012738:	d1cb      	bne.n	80126d2 <GFXfillRect+0xde>
 801273a:	f1b9 0f00 	cmp.w	r9, #0
 801273e:	46cb      	mov	fp, r9
 8012740:	8803      	ldrh	r3, [r0, #0]
 8012742:	bfb8      	it	lt
 8012744:	f109 0b07 	addlt.w	fp, r9, #7
 8012748:	f009 0907 	and.w	r9, r9, #7
 801274c:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8012750:	fb1b 4b03 	smlabb	fp, fp, r3, r4
 8012754:	2301      	movs	r3, #1
 8012756:	fa03 f909 	lsl.w	r9, r3, r9
 801275a:	4b5c      	ldr	r3, [pc, #368]	; (80128cc <GFXfillRect+0x2d8>)
 801275c:	f813 400b 	ldrb.w	r4, [r3, fp]
 8012760:	ea89 0404 	eor.w	r4, r9, r4
 8012764:	f803 400b 	strb.w	r4, [r3, fp]
 8012768:	e7b3      	b.n	80126d2 <GFXfillRect+0xde>
 801276a:	9b01      	ldr	r3, [sp, #4]
 801276c:	3101      	adds	r1, #1
 801276e:	b209      	sxth	r1, r1
 8012770:	4299      	cmp	r1, r3
 8012772:	f6ff af68 	blt.w	8012646 <GFXfillRect+0x52>
 8012776:	b009      	add	sp, #36	; 0x24
 8012778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801277c:	9c03      	ldr	r4, [sp, #12]
 801277e:	9e04      	ldr	r6, [sp, #16]
 8012780:	42b4      	cmp	r4, r6
 8012782:	dcf3      	bgt.n	801276c <GFXfillRect+0x178>
 8012784:	46b0      	mov	r8, r6
 8012786:	460f      	mov	r7, r1
 8012788:	9e06      	ldr	r6, [sp, #24]
 801278a:	f04f 0e00 	mov.w	lr, #0
 801278e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012792:	e762      	b.n	801265a <GFXfillRect+0x66>
 8012794:	2c00      	cmp	r4, #0
 8012796:	46a3      	mov	fp, r4
 8012798:	8803      	ldrh	r3, [r0, #0]
 801279a:	bfb8      	it	lt
 801279c:	f104 0b07 	addlt.w	fp, r4, #7
 80127a0:	f004 0407 	and.w	r4, r4, #7
 80127a4:	ea4f 0beb 	mov.w	fp, fp, asr #3
 80127a8:	fb1b 9903 	smlabb	r9, fp, r3, r9
 80127ac:	2301      	movs	r3, #1
 80127ae:	fa03 f404 	lsl.w	r4, r3, r4
 80127b2:	4b46      	ldr	r3, [pc, #280]	; (80128cc <GFXfillRect+0x2d8>)
 80127b4:	f813 b009 	ldrb.w	fp, [r3, r9]
 80127b8:	ea2b 0404 	bic.w	r4, fp, r4
 80127bc:	f803 4009 	strb.w	r4, [r3, r9]
 80127c0:	e787      	b.n	80126d2 <GFXfillRect+0xde>
 80127c2:	f1b9 0f00 	cmp.w	r9, #0
 80127c6:	46cb      	mov	fp, r9
 80127c8:	8803      	ldrh	r3, [r0, #0]
 80127ca:	bfb8      	it	lt
 80127cc:	f109 0b07 	addlt.w	fp, r9, #7
 80127d0:	f009 0907 	and.w	r9, r9, #7
 80127d4:	ea4f 0beb 	mov.w	fp, fp, asr #3
 80127d8:	fb1b 4b03 	smlabb	fp, fp, r3, r4
 80127dc:	2301      	movs	r3, #1
 80127de:	fa03 f909 	lsl.w	r9, r3, r9
 80127e2:	4b3a      	ldr	r3, [pc, #232]	; (80128cc <GFXfillRect+0x2d8>)
 80127e4:	f813 400b 	ldrb.w	r4, [r3, fp]
 80127e8:	ea24 0409 	bic.w	r4, r4, r9
 80127ec:	f803 400b 	strb.w	r4, [r3, fp]
 80127f0:	e76f      	b.n	80126d2 <GFXfillRect+0xde>
 80127f2:	2c00      	cmp	r4, #0
 80127f4:	46a3      	mov	fp, r4
 80127f6:	8803      	ldrh	r3, [r0, #0]
 80127f8:	bfb8      	it	lt
 80127fa:	f104 0b07 	addlt.w	fp, r4, #7
 80127fe:	f004 0407 	and.w	r4, r4, #7
 8012802:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8012806:	fb1b 9903 	smlabb	r9, fp, r3, r9
 801280a:	2301      	movs	r3, #1
 801280c:	fa03 f404 	lsl.w	r4, r3, r4
 8012810:	4b2e      	ldr	r3, [pc, #184]	; (80128cc <GFXfillRect+0x2d8>)
 8012812:	f813 b009 	ldrb.w	fp, [r3, r9]
 8012816:	ea44 040b 	orr.w	r4, r4, fp
 801281a:	f803 4009 	strb.w	r4, [r3, r9]
 801281e:	e758      	b.n	80126d2 <GFXfillRect+0xde>
 8012820:	f8b0 9000 	ldrh.w	r9, [r0]
 8012824:	463c      	mov	r4, r7
 8012826:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801282a:	eba9 0905 	sub.w	r9, r9, r5
 801282e:	fa0f f989 	sxth.w	r9, r9
 8012832:	e731      	b.n	8012698 <GFXfillRect+0xa4>
 8012834:	f8b0 b002 	ldrh.w	fp, [r0, #2]
 8012838:	46a1      	mov	r9, r4
 801283a:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
 801283e:	1be4      	subs	r4, r4, r7
 8012840:	b224      	sxth	r4, r4
 8012842:	e729      	b.n	8012698 <GFXfillRect+0xa4>
 8012844:	f8b0 9000 	ldrh.w	r9, [r0]
 8012848:	8844      	ldrh	r4, [r0, #2]
 801284a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801284e:	3c01      	subs	r4, #1
 8012850:	eba9 0907 	sub.w	r9, r9, r7
 8012854:	1b64      	subs	r4, r4, r5
 8012856:	fa0f f989 	sxth.w	r9, r9
 801285a:	b224      	sxth	r4, r4
 801285c:	e71c      	b.n	8012698 <GFXfillRect+0xa4>
 801285e:	f1b9 0f00 	cmp.w	r9, #0
 8012862:	46cb      	mov	fp, r9
 8012864:	8803      	ldrh	r3, [r0, #0]
 8012866:	bfb8      	it	lt
 8012868:	f109 0b07 	addlt.w	fp, r9, #7
 801286c:	f009 0907 	and.w	r9, r9, #7
 8012870:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8012874:	fb1b 4b03 	smlabb	fp, fp, r3, r4
 8012878:	2301      	movs	r3, #1
 801287a:	fa03 f909 	lsl.w	r9, r3, r9
 801287e:	4b13      	ldr	r3, [pc, #76]	; (80128cc <GFXfillRect+0x2d8>)
 8012880:	f813 400b 	ldrb.w	r4, [r3, fp]
 8012884:	ea49 0404 	orr.w	r4, r9, r4
 8012888:	f803 400b 	strb.w	r4, [r3, fp]
 801288c:	e721      	b.n	80126d2 <GFXfillRect+0xde>
 801288e:	f8b0 b000 	ldrh.w	fp, [r0]
 8012892:	46a1      	mov	r9, r4
 8012894:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
 8012898:	1be4      	subs	r4, r4, r7
 801289a:	b224      	sxth	r4, r4
 801289c:	e746      	b.n	801272c <GFXfillRect+0x138>
 801289e:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 80128a2:	463c      	mov	r4, r7
 80128a4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80128a8:	eba9 0905 	sub.w	r9, r9, r5
 80128ac:	fa0f f989 	sxth.w	r9, r9
 80128b0:	e73c      	b.n	801272c <GFXfillRect+0x138>
 80128b2:	8804      	ldrh	r4, [r0, #0]
 80128b4:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 80128b8:	3c01      	subs	r4, #1
 80128ba:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80128be:	1b64      	subs	r4, r4, r5
 80128c0:	eba9 0907 	sub.w	r9, r9, r7
 80128c4:	b224      	sxth	r4, r4
 80128c6:	fa0f f989 	sxth.w	r9, r9
 80128ca:	e72f      	b.n	801272c <GFXfillRect+0x138>
 80128cc:	20018464 	.word	0x20018464

080128d0 <GFXdrawChar>:

// TEXT- AND CHARACTER-HANDLING FUNCTIONS ----------------------------------

// Draw a character
void GFXdrawChar(GFX* myGFX, int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
 80128d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128d4:	b09b      	sub	sp, #108	; 0x6c
 80128d6:	4682      	mov	sl, r0

    if(!myGFX->gfxFont) { // 'Classic' built-in font
 80128d8:	6980      	ldr	r0, [r0, #24]
  uint16_t color, uint16_t bg, uint8_t size) {
 80128da:	9204      	str	r2, [sp, #16]
 80128dc:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 80128e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80128e2:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 80128e6:	9202      	str	r2, [sp, #8]
 80128e8:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
 80128ec:	920d      	str	r2, [sp, #52]	; 0x34
    if(!myGFX->gfxFont) { // 'Classic' built-in font
 80128ee:	2800      	cmp	r0, #0
 80128f0:	f000 811e 	beq.w	8012b30 <GFXdrawChar+0x260>

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&myGFX->gfxFont->first);
 80128f4:	7a04      	ldrb	r4, [r0, #8]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&myGFX->gfxFont->glyph))[c]);
 80128f6:	6842      	ldr	r2, [r0, #4]
        c -= (uint8_t)pgm_read_byte(&myGFX->gfxFont->first);
 80128f8:	1b1b      	subs	r3, r3, r4
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&myGFX->gfxFont->bitmap);
 80128fa:	6800      	ldr	r0, [r0, #0]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&myGFX->gfxFont->glyph))[c]);
 80128fc:	b2db      	uxtb	r3, r3
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&myGFX->gfxFont->bitmap);
 80128fe:	9010      	str	r0, [sp, #64]	; 0x40
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&myGFX->gfxFont->glyph))[c]);
 8012900:	eb02 03c3 	add.w	r3, r2, r3, lsl #3

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8012904:	881a      	ldrh	r2, [r3, #0]
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
 8012906:	f993 0006 	ldrsb.w	r0, [r3, #6]
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 801290a:	920c      	str	r2, [sp, #48]	; 0x30
        uint8_t  w  = pgm_read_byte(&glyph->width),
 801290c:	789a      	ldrb	r2, [r3, #2]
                 yo = pgm_read_byte(&glyph->yOffset);
 801290e:	9019      	str	r0, [sp, #100]	; 0x64
        uint8_t  w  = pgm_read_byte(&glyph->width),
 8012910:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
 8012912:	78da      	ldrb	r2, [r3, #3]
 8012914:	9214      	str	r2, [sp, #80]	; 0x50
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 8012916:	f993 2005 	ldrsb.w	r2, [r3, #5]
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size > 1) {
 801291a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801291c:	2b01      	cmp	r3, #1
 801291e:	f240 80a7 	bls.w	8012a70 <GFXdrawChar+0x1a0>
            xo16 = xo;
            yo16 = yo;
 8012922:	b200      	sxth	r0, r0
            xo16 = xo;
 8012924:	b213      	sxth	r3, r2
            yo16 = yo;
 8012926:	9015      	str	r0, [sp, #84]	; 0x54
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        //startWrite();
        for(yy=0; yy<h; yy++) {
 8012928:	9814      	ldr	r0, [sp, #80]	; 0x50
 801292a:	2800      	cmp	r0, #0
 801292c:	f000 80a6 	beq.w	8012a7c <GFXdrawChar+0x1ac>
 8012930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012932:	2800      	cmp	r0, #0
 8012934:	f000 80a2 	beq.w	8012a7c <GFXdrawChar+0x1ac>
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        GFXwritePixel(myGFX,x+xo+xx, y+yo+yy, color);
                    } else {
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 8012938:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 801293c:	b289      	uxth	r1, r1
        uint8_t  xx, yy, bits = 0, bit = 0;
 801293e:	2000      	movs	r0, #0
                        GFXwritePixel(myGFX,x+xo+xx, y+yo+yy, color);
 8012940:	188a      	adds	r2, r1, r2
 8012942:	fb03 1104 	mla	r1, r3, r4, r1
 8012946:	1e63      	subs	r3, r4, #1
        uint8_t  xx, yy, bits = 0, bit = 0;
 8012948:	9007      	str	r0, [sp, #28]
                        GFXwritePixel(myGFX,x+xo+xx, y+yo+yy, color);
 801294a:	9218      	str	r2, [sp, #96]	; 0x60
 801294c:	9317      	str	r3, [sp, #92]	; 0x5c
 801294e:	b28b      	uxth	r3, r1
 8012950:	f8bd 2010 	ldrh.w	r2, [sp, #16]
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 8012954:	940a      	str	r4, [sp, #40]	; 0x28
 8012956:	9213      	str	r2, [sp, #76]	; 0x4c
        uint8_t  xx, yy, bits = 0, bit = 0;
 8012958:	9002      	str	r0, [sp, #8]
        for(yy=0; yy<h; yy++) {
 801295a:	900f      	str	r0, [sp, #60]	; 0x3c
 801295c:	9316      	str	r3, [sp, #88]	; 0x58
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 801295e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    int16_t err = dx / 2;
 8012960:	2700      	movs	r7, #0
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 8012962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012964:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012966:	4413      	add	r3, r2
 8012968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801296a:	fb03 1302 	mla	r3, r3, r2, r1
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 801296e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 8012970:	b29b      	uxth	r3, r3
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012972:	189a      	adds	r2, r3, r2
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 8012974:	b21b      	sxth	r3, r3
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012976:	b211      	sxth	r1, r2
 8012978:	461a      	mov	r2, r3
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 801297a:	9311      	str	r3, [sp, #68]	; 0x44
 801297c:	428b      	cmp	r3, r1
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 801297e:	9104      	str	r1, [sp, #16]
 8012980:	bfa8      	it	ge
 8012982:	460a      	movge	r2, r1
 8012984:	428b      	cmp	r3, r1
 8012986:	bfb8      	it	lt
 8012988:	460b      	movlt	r3, r1
 801298a:	9208      	str	r2, [sp, #32]
 801298c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801298e:	4699      	mov	r9, r3
    dx = x1 - x0;
 8012990:	1a9b      	subs	r3, r3, r2
 8012992:	9a04      	ldr	r2, [sp, #16]
 8012994:	b29b      	uxth	r3, r3
 8012996:	eba2 0801 	sub.w	r8, r2, r1
 801299a:	9306      	str	r3, [sp, #24]
    int16_t err = dx / 2;
 801299c:	b21b      	sxth	r3, r3
 801299e:	2b00      	cmp	r3, #0
 80129a0:	bfb8      	it	lt
 80129a2:	3301      	addlt	r3, #1
 80129a4:	f1b8 0f00 	cmp.w	r8, #0
 80129a8:	ea4f 0363 	mov.w	r3, r3, asr #1
 80129ac:	bfb8      	it	lt
 80129ae:	f1c8 0800 	rsblt	r8, r8, #0
 80129b2:	930e      	str	r3, [sp, #56]	; 0x38
 80129b4:	fa1f f888 	uxth.w	r8, r8
 80129b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80129ba:	9303      	str	r3, [sp, #12]
 80129bc:	e00e      	b.n	80129dc <GFXdrawChar+0x10c>
                          size, size, color);
                    }
                }
                bits <<= 1;
 80129be:	9b02      	ldr	r3, [sp, #8]
 80129c0:	3701      	adds	r7, #1
 80129c2:	9a03      	ldr	r2, [sp, #12]
 80129c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80129c6:	005b      	lsls	r3, r3, #1
 80129c8:	b2bf      	uxth	r7, r7
 80129ca:	440a      	add	r2, r1
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	b292      	uxth	r2, r2
 80129d0:	9302      	str	r3, [sp, #8]
            for(xx=0; xx<w; xx++) {
 80129d2:	b2fb      	uxtb	r3, r7
 80129d4:	9203      	str	r2, [sp, #12]
 80129d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129d8:	429a      	cmp	r2, r3
 80129da:	d97b      	bls.n	8012ad4 <GFXdrawChar+0x204>
                if(!(bit++ & 7)) {
 80129dc:	9b07      	ldr	r3, [sp, #28]
 80129de:	443b      	add	r3, r7
 80129e0:	0759      	lsls	r1, r3, #29
 80129e2:	d106      	bne.n	80129f2 <GFXdrawChar+0x122>
                    bits = pgm_read_byte(&bitmap[bo++]);
 80129e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80129e6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80129e8:	1c53      	adds	r3, r2, #1
 80129ea:	5c8a      	ldrb	r2, [r1, r2]
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	9202      	str	r2, [sp, #8]
 80129f0:	930c      	str	r3, [sp, #48]	; 0x30
                if(bits & 0x80) {
 80129f2:	9b02      	ldr	r3, [sp, #8]
 80129f4:	061a      	lsls	r2, r3, #24
 80129f6:	d5e2      	bpl.n	80129be <GFXdrawChar+0xee>
                    if(size == 1) {
 80129f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129fa:	2b01      	cmp	r3, #1
 80129fc:	d07a      	beq.n	8012af4 <GFXdrawChar+0x224>
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 80129fe:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
    for (int16_t i=x; i<x+w; i++) {
 8012a02:	4433      	add	r3, r6
 8012a04:	42b3      	cmp	r3, r6
 8012a06:	9305      	str	r3, [sp, #20]
 8012a08:	ddd9      	ble.n	80129be <GFXdrawChar+0xee>
 8012a0a:	9712      	str	r7, [sp, #72]	; 0x48
 8012a0c:	9f11      	ldr	r7, [sp, #68]	; 0x44
    if (steep) {
 8012a0e:	9b04      	ldr	r3, [sp, #16]
 8012a10:	429f      	cmp	r7, r3
 8012a12:	d036      	beq.n	8012a82 <GFXdrawChar+0x1b2>
    for (; x0<=x1; x0++) {
 8012a14:	9b08      	ldr	r3, [sp, #32]
 8012a16:	454b      	cmp	r3, r9
 8012a18:	dc23      	bgt.n	8012a62 <GFXdrawChar+0x192>
 8012a1a:	461c      	mov	r4, r3
 8012a1c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8012a1e:	46b3      	mov	fp, r6
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 8012a20:	f1bb 0f00 	cmp.w	fp, #0
 8012a24:	db0f      	blt.n	8012a46 <GFXdrawChar+0x176>
 8012a26:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8012a2a:	459b      	cmp	fp, r3
 8012a2c:	da0b      	bge.n	8012a46 <GFXdrawChar+0x176>
 8012a2e:	0423      	lsls	r3, r4, #16
 8012a30:	d409      	bmi.n	8012a46 <GFXdrawChar+0x176>
 8012a32:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8012a36:	4622      	mov	r2, r4
 8012a38:	4659      	mov	r1, fp
 8012a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a3c:	4284      	cmp	r4, r0
 8012a3e:	4650      	mov	r0, sl
 8012a40:	da01      	bge.n	8012a46 <GFXdrawChar+0x176>
 8012a42:	f7ff fc5b 	bl	80122fc <GFXdrawPixel.part.0>
 8012a46:	3401      	adds	r4, #1
        if (err < 0) {
 8012a48:	2d00      	cmp	r5, #0
        err -= dy;
 8012a4a:	b2ab      	uxth	r3, r5
 8012a4c:	b224      	sxth	r4, r4
        if (err < 0) {
 8012a4e:	da06      	bge.n	8012a5e <GFXdrawChar+0x18e>
            err += dx;
 8012a50:	9a06      	ldr	r2, [sp, #24]
            y0 += ystep;
 8012a52:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
            err += dx;
 8012a56:	18d5      	adds	r5, r2, r3
            y0 += ystep;
 8012a58:	fa0f fb8b 	sxth.w	fp, fp
            err += dx;
 8012a5c:	b22d      	sxth	r5, r5
    for (; x0<=x1; x0++) {
 8012a5e:	45a1      	cmp	r9, r4
 8012a60:	dade      	bge.n	8012a20 <GFXdrawChar+0x150>
 8012a62:	3601      	adds	r6, #1
    for (int16_t i=x; i<x+w; i++) {
 8012a64:	9b05      	ldr	r3, [sp, #20]
 8012a66:	b236      	sxth	r6, r6
 8012a68:	429e      	cmp	r6, r3
 8012a6a:	dbd0      	blt.n	8012a0e <GFXdrawChar+0x13e>
 8012a6c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8012a6e:	e7a6      	b.n	80129be <GFXdrawChar+0xee>
        int16_t  xo16 = 0, yo16 = 0;
 8012a70:	2300      	movs	r3, #0
        for(yy=0; yy<h; yy++) {
 8012a72:	9814      	ldr	r0, [sp, #80]	; 0x50
        int16_t  xo16 = 0, yo16 = 0;
 8012a74:	9315      	str	r3, [sp, #84]	; 0x54
        for(yy=0; yy<h; yy++) {
 8012a76:	2800      	cmp	r0, #0
 8012a78:	f47f af5a 	bne.w	8012930 <GFXdrawChar+0x60>
            }
        }
        //endWrite();

    } // End classic vs custom font
}
 8012a7c:	b01b      	add	sp, #108	; 0x6c
 8012a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (steep) {
 8012a82:	4634      	mov	r4, r6
 8012a84:	46bb      	mov	fp, r7
    int16_t err = dx / 2;
 8012a86:	2500      	movs	r5, #0
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 8012a88:	2c00      	cmp	r4, #0
 8012a8a:	db10      	blt.n	8012aae <GFXdrawChar+0x1de>
 8012a8c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8012a90:	42a3      	cmp	r3, r4
 8012a92:	dd0c      	ble.n	8012aae <GFXdrawChar+0x1de>
 8012a94:	f1bb 0f00 	cmp.w	fp, #0
 8012a98:	db09      	blt.n	8012aae <GFXdrawChar+0x1de>
 8012a9a:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8012a9e:	465a      	mov	r2, fp
 8012aa0:	4621      	mov	r1, r4
 8012aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012aa4:	4558      	cmp	r0, fp
 8012aa6:	4650      	mov	r0, sl
 8012aa8:	dd01      	ble.n	8012aae <GFXdrawChar+0x1de>
 8012aaa:	f7ff fc27 	bl	80122fc <GFXdrawPixel.part.0>
        err -= dy;
 8012aae:	eba5 0508 	sub.w	r5, r5, r8
 8012ab2:	3401      	adds	r4, #1
 8012ab4:	b22d      	sxth	r5, r5
 8012ab6:	b224      	sxth	r4, r4
        if (err < 0) {
 8012ab8:	2d00      	cmp	r5, #0
 8012aba:	da03      	bge.n	8012ac4 <GFXdrawChar+0x1f4>
            y0 += ystep;
 8012abc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012ac0:	fa0f fb8b 	sxth.w	fp, fp
    for (; x0<=x1; x0++) {
 8012ac4:	42a6      	cmp	r6, r4
 8012ac6:	dadf      	bge.n	8012a88 <GFXdrawChar+0x1b8>
 8012ac8:	3601      	adds	r6, #1
    for (int16_t i=x; i<x+w; i++) {
 8012aca:	9b05      	ldr	r3, [sp, #20]
 8012acc:	b236      	sxth	r6, r6
 8012ace:	429e      	cmp	r6, r3
 8012ad0:	db9d      	blt.n	8012a0e <GFXdrawChar+0x13e>
 8012ad2:	e7cb      	b.n	8012a6c <GFXdrawChar+0x19c>
 8012ad4:	4611      	mov	r1, r2
 8012ad6:	9b07      	ldr	r3, [sp, #28]
        for(yy=0; yy<h; yy++) {
 8012ad8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ada:	440b      	add	r3, r1
 8012adc:	3201      	adds	r2, #1
 8012ade:	b2db      	uxtb	r3, r3
 8012ae0:	b2d2      	uxtb	r2, r2
 8012ae2:	9307      	str	r3, [sp, #28]
 8012ae4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012ae6:	920f      	str	r2, [sp, #60]	; 0x3c
 8012ae8:	4293      	cmp	r3, r2
 8012aea:	f63f af38 	bhi.w	801295e <GFXdrawChar+0x8e>
}
 8012aee:	b01b      	add	sp, #108	; 0x6c
 8012af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012af4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012af6:	18f9      	adds	r1, r7, r3
 8012af8:	b209      	sxth	r1, r1
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 8012afa:	2900      	cmp	r1, #0
 8012afc:	f6ff af5f 	blt.w	80129be <GFXdrawChar+0xee>
                        GFXwritePixel(myGFX,x+xo+xx, y+yo+yy, color);
 8012b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012b02:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012b04:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012b06:	189a      	adds	r2, r3, r2
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 8012b08:	f8ba 3004 	ldrh.w	r3, [sl, #4]
                        GFXwritePixel(myGFX,x+xo+xx, y+yo+yy, color);
 8012b0c:	4402      	add	r2, r0
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 8012b0e:	4299      	cmp	r1, r3
                        GFXwritePixel(myGFX,x+xo+xx, y+yo+yy, color);
 8012b10:	b212      	sxth	r2, r2
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 8012b12:	f6bf af54 	bge.w	80129be <GFXdrawChar+0xee>
 8012b16:	2a00      	cmp	r2, #0
 8012b18:	f6ff af51 	blt.w	80129be <GFXdrawChar+0xee>
 8012b1c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8012b20:	429a      	cmp	r2, r3
 8012b22:	f6bf af4c 	bge.w	80129be <GFXdrawChar+0xee>
 8012b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b28:	4650      	mov	r0, sl
 8012b2a:	f7ff fbe7 	bl	80122fc <GFXdrawPixel.part.0>
 8012b2e:	e746      	b.n	80129be <GFXdrawChar+0xee>
        if((x >= myGFX->_width)            || // Clip right
 8012b30:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8012b34:	4291      	cmp	r1, r2
 8012b36:	daa1      	bge.n	8012a7c <GFXdrawChar+0x1ac>
           (y >= myGFX->_height)           || // Clip bottom
 8012b38:	f8ba 2006 	ldrh.w	r2, [sl, #6]
        if((x >= myGFX->_width)            || // Clip right
 8012b3c:	9c04      	ldr	r4, [sp, #16]
 8012b3e:	4294      	cmp	r4, r2
 8012b40:	da9c      	bge.n	8012a7c <GFXdrawChar+0x1ac>
           ((x + 6 * size - 1) < 0) || // Clip left
 8012b42:	2206      	movs	r2, #6
 8012b44:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012b46:	fb12 1205 	smlabb	r2, r2, r5, r1
           (y >= myGFX->_height)           || // Clip bottom
 8012b4a:	2a00      	cmp	r2, #0
 8012b4c:	dd96      	ble.n	8012a7c <GFXdrawChar+0x1ac>
           ((y + 8 * size - 1) < 0))   // Clip top
 8012b4e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
           ((x + 6 * size - 1) < 0) || // Clip left
 8012b52:	2a00      	cmp	r2, #0
 8012b54:	dd92      	ble.n	8012a7c <GFXdrawChar+0x1ac>
        if(!myGFX->_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8012b56:	f8ba 2016 	ldrh.w	r2, [sl, #22]
 8012b5a:	b91a      	cbnz	r2, 8012b64 <GFXdrawChar+0x294>
 8012b5c:	2baf      	cmp	r3, #175	; 0xaf
 8012b5e:	d901      	bls.n	8012b64 <GFXdrawChar+0x294>
 8012b60:	3301      	adds	r3, #1
 8012b62:	b2db      	uxtb	r3, r3
            uint8_t line = pgm_read_byte(&myGFX->gfxFont[c * 5 + i]);
 8012b64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012b68:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8012b6c:	b289      	uxth	r1, r1
 8012b6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012b72:	9403      	str	r4, [sp, #12]
 8012b74:	1d4a      	adds	r2, r1, #5
 8012b76:	910f      	str	r1, [sp, #60]	; 0x3c
 8012b78:	009b      	lsls	r3, r3, #2
 8012b7a:	9106      	str	r1, [sp, #24]
 8012b7c:	b292      	uxth	r2, r2
 8012b7e:	9107      	str	r1, [sp, #28]
 8012b80:	9308      	str	r3, [sp, #32]
 8012b82:	1e63      	subs	r3, r4, #1
 8012b84:	920c      	str	r2, [sp, #48]	; 0x30
 8012b86:	9309      	str	r3, [sp, #36]	; 0x24
 8012b88:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8012b8c:	9a08      	ldr	r2, [sp, #32]
 8012b8e:	461d      	mov	r5, r3
 8012b90:	9313      	str	r3, [sp, #76]	; 0x4c
                    	GFXwriteFillRect(myGFX,x+i*size, y+j*size, size, size, bg);
 8012b92:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
    for (int16_t i=x; i<x+w; i++) {
 8012b96:	2700      	movs	r7, #0
            uint8_t line = pgm_read_byte(&myGFX->gfxFont[c * 5 + i]);
 8012b98:	f810 9002 	ldrb.w	r9, [r0, r2]
    for (int16_t i=x; i<x+w; i++) {
 8012b9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    GFXdrawPixel(myGFX, x, y, color);
 8012b9e:	46b8      	mov	r8, r7
                    	GFXwriteFillRect(myGFX,x+i*size, y+j*size, size, size, bg);
 8012ba0:	9305      	str	r3, [sp, #20]
    for (int16_t i=x; i<x+w; i++) {
 8012ba2:	189e      	adds	r6, r3, r2
    GFXdrawPixel(myGFX, x, y, color);
 8012ba4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8012ba8:	930e      	str	r3, [sp, #56]	; 0x38
                if(line & 1) {
 8012baa:	f019 0f01 	tst.w	r9, #1
 8012bae:	d037      	beq.n	8012c20 <GFXdrawChar+0x350>
                    if(size == 1)
 8012bb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012bb2:	2b01      	cmp	r3, #1
 8012bb4:	d057      	beq.n	8012c66 <GFXdrawChar+0x396>
    for (int16_t i=x; i<x+w; i++) {
 8012bb6:	9c05      	ldr	r4, [sp, #20]
                    	GFXwriteFillRect(myGFX,x+i*size, y+j*size, size, size, color);
 8012bb8:	fa0f fb85 	sxth.w	fp, r5
    for (int16_t i=x; i<x+w; i++) {
 8012bbc:	42b4      	cmp	r4, r6
 8012bbe:	da11      	bge.n	8012be4 <GFXdrawChar+0x314>
 8012bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bc2:	950a      	str	r5, [sp, #40]	; 0x28
 8012bc4:	18ef      	adds	r7, r5, r3
 8012bc6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8012bc8:	b23f      	sxth	r7, r7
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012bca:	4623      	mov	r3, r4
 8012bcc:	4621      	mov	r1, r4
 8012bce:	3401      	adds	r4, #1
 8012bd0:	9501      	str	r5, [sp, #4]
 8012bd2:	9700      	str	r7, [sp, #0]
 8012bd4:	465a      	mov	r2, fp
 8012bd6:	b224      	sxth	r4, r4
 8012bd8:	4650      	mov	r0, sl
 8012bda:	f7ff fc07 	bl	80123ec <GFXwriteLine>
    for (int16_t i=x; i<x+w; i++) {
 8012bde:	42b4      	cmp	r4, r6
 8012be0:	dbf3      	blt.n	8012bca <GFXdrawChar+0x2fa>
 8012be2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012be4:	9b03      	ldr	r3, [sp, #12]
 8012be6:	f108 0801 	add.w	r8, r8, #1
            for(int8_t j=0; j<8; j++, line >>= 1) {
 8012bea:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8012bee:	441d      	add	r5, r3
 8012bf0:	f1b8 0f08 	cmp.w	r8, #8
 8012bf4:	b2ad      	uxth	r5, r5
 8012bf6:	d1d8      	bne.n	8012baa <GFXdrawChar+0x2da>
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	9b07      	ldr	r3, [sp, #28]
 8012bfc:	9a06      	ldr	r2, [sp, #24]
 8012bfe:	440b      	add	r3, r1
 8012c00:	9908      	ldr	r1, [sp, #32]
 8012c02:	3201      	adds	r2, #1
 8012c04:	b29b      	uxth	r3, r3
 8012c06:	310c      	adds	r1, #12
 8012c08:	b292      	uxth	r2, r2
 8012c0a:	9307      	str	r3, [sp, #28]
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8012c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c0e:	9108      	str	r1, [sp, #32]
 8012c10:	4293      	cmp	r3, r2
 8012c12:	9206      	str	r2, [sp, #24]
 8012c14:	d03b      	beq.n	8012c8e <GFXdrawChar+0x3be>
 8012c16:	f8da 0018 	ldr.w	r0, [sl, #24]
 8012c1a:	460a      	mov	r2, r1
 8012c1c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8012c1e:	e7b8      	b.n	8012b92 <GFXdrawChar+0x2c2>
                } else if(bg != color) {
 8012c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c22:	9a02      	ldr	r2, [sp, #8]
 8012c24:	4293      	cmp	r3, r2
 8012c26:	d0dd      	beq.n	8012be4 <GFXdrawChar+0x314>
                    if(size == 1)
 8012c28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c2a:	2b01      	cmp	r3, #1
 8012c2c:	d025      	beq.n	8012c7a <GFXdrawChar+0x3aa>
    for (int16_t i=x; i<x+w; i++) {
 8012c2e:	9c05      	ldr	r4, [sp, #20]
                    	GFXwriteFillRect(myGFX,x+i*size, y+j*size, size, size, bg);
 8012c30:	fa0f fb85 	sxth.w	fp, r5
    for (int16_t i=x; i<x+w; i++) {
 8012c34:	42b4      	cmp	r4, r6
 8012c36:	dad5      	bge.n	8012be4 <GFXdrawChar+0x314>
 8012c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c3a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8012c3e:	46a9      	mov	r9, r5
 8012c40:	18ef      	adds	r7, r5, r3
 8012c42:	9d02      	ldr	r5, [sp, #8]
 8012c44:	b23f      	sxth	r7, r7
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012c46:	4623      	mov	r3, r4
 8012c48:	4621      	mov	r1, r4
 8012c4a:	3401      	adds	r4, #1
 8012c4c:	9501      	str	r5, [sp, #4]
 8012c4e:	9700      	str	r7, [sp, #0]
 8012c50:	465a      	mov	r2, fp
 8012c52:	b224      	sxth	r4, r4
 8012c54:	4650      	mov	r0, sl
 8012c56:	f7ff fbc9 	bl	80123ec <GFXwriteLine>
    for (int16_t i=x; i<x+w; i++) {
 8012c5a:	42b4      	cmp	r4, r6
 8012c5c:	dbf3      	blt.n	8012c46 <GFXdrawChar+0x376>
 8012c5e:	464d      	mov	r5, r9
 8012c60:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8012c64:	e7be      	b.n	8012be4 <GFXdrawChar+0x314>
    GFXdrawPixel(myGFX, x, y, color);
 8012c66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012c68:	4650      	mov	r0, sl
 8012c6a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012c6c:	eb03 0208 	add.w	r2, r3, r8
 8012c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c72:	b212      	sxth	r2, r2
 8012c74:	f7ff fc56 	bl	8012524 <GFXdrawPixel>
 8012c78:	e7b4      	b.n	8012be4 <GFXdrawChar+0x314>
 8012c7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012c7c:	4650      	mov	r0, sl
 8012c7e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012c80:	eb03 0208 	add.w	r2, r3, r8
 8012c84:	9b02      	ldr	r3, [sp, #8]
 8012c86:	b212      	sxth	r2, r2
 8012c88:	f7ff fc4c 	bl	8012524 <GFXdrawPixel>
 8012c8c:	e7aa      	b.n	8012be4 <GFXdrawChar+0x314>
        if(bg != color) { // If opaque, draw vertical line for last column
 8012c8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c90:	9a02      	ldr	r2, [sp, #8]
 8012c92:	4293      	cmp	r3, r2
 8012c94:	f43f aef2 	beq.w	8012a7c <GFXdrawChar+0x1ac>
            if(size == 1) GFXwriteFastVLine(myGFX,x+5, y, 8, bg);
 8012c98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c9a:	2b01      	cmp	r3, #1
 8012c9c:	d01e      	beq.n	8012cdc <GFXdrawChar+0x40c>
            else          GFXwriteFillRect(myGFX,x+5*size, y, size, 8*size, bg);
 8012c9e:	9b03      	ldr	r3, [sp, #12]
 8012ca0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8012ca4:	00dc      	lsls	r4, r3, #3
 8012ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ca8:	442b      	add	r3, r5
 8012caa:	b21d      	sxth	r5, r3
    for (int16_t i=x; i<x+w; i++) {
 8012cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012cae:	442b      	add	r3, r5
 8012cb0:	42ab      	cmp	r3, r5
 8012cb2:	461e      	mov	r6, r3
 8012cb4:	f77f aee2 	ble.w	8012a7c <GFXdrawChar+0x1ac>
 8012cb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012cba:	3b01      	subs	r3, #1
 8012cbc:	441c      	add	r4, r3
 8012cbe:	b224      	sxth	r4, r4
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012cc0:	9b02      	ldr	r3, [sp, #8]
 8012cc2:	4629      	mov	r1, r5
 8012cc4:	9400      	str	r4, [sp, #0]
 8012cc6:	4650      	mov	r0, sl
 8012cc8:	9301      	str	r3, [sp, #4]
 8012cca:	462b      	mov	r3, r5
 8012ccc:	3501      	adds	r5, #1
 8012cce:	9a04      	ldr	r2, [sp, #16]
 8012cd0:	f7ff fb8c 	bl	80123ec <GFXwriteLine>
 8012cd4:	b22d      	sxth	r5, r5
    for (int16_t i=x; i<x+w; i++) {
 8012cd6:	42ae      	cmp	r6, r5
 8012cd8:	dcf2      	bgt.n	8012cc0 <GFXdrawChar+0x3f0>
 8012cda:	e6cf      	b.n	8012a7c <GFXdrawChar+0x1ac>
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012cdc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012cde:	4650      	mov	r0, sl
            if(size == 1) GFXwriteFastVLine(myGFX,x+5, y, 8, bg);
 8012ce0:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012ce4:	3407      	adds	r4, #7
 8012ce6:	9225      	str	r2, [sp, #148]	; 0x94
 8012ce8:	4619      	mov	r1, r3
 8012cea:	9a04      	ldr	r2, [sp, #16]
 8012cec:	b224      	sxth	r4, r4
 8012cee:	9424      	str	r4, [sp, #144]	; 0x90
}
 8012cf0:	b01b      	add	sp, #108	; 0x6c
 8012cf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012cf6:	f7ff bb79 	b.w	80123ec <GFXwriteLine>
 8012cfa:	bf00      	nop

08012cfc <GFXwrite>:
        }
  }
}


void GFXwrite(GFX* myGFX, uint8_t c) {
 8012cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!myGFX->gfxFont) { // 'Classic' built-in font
 8012cfe:	6983      	ldr	r3, [r0, #24]
void GFXwrite(GFX* myGFX, uint8_t c) {
 8012d00:	b085      	sub	sp, #20
 8012d02:	4604      	mov	r4, r0
	if(!myGFX->gfxFont) { // 'Classic' built-in font
 8012d04:	b32b      	cbz	r3, 8012d52 <GFXwrite+0x56>
			myGFX->cursor_x += myGFX->textsize * 6;          // Advance x one char
		}

	} else { // Custom font

		if(c == '\n') {
 8012d06:	290a      	cmp	r1, #10
 8012d08:	d018      	beq.n	8012d3c <GFXwrite+0x40>
			myGFX->cursor_x  = 0;
			myGFX->cursor_y += (int16_t)myGFX->textsize *
						(uint8_t)pgm_read_byte(&myGFX->gfxFont->yAdvance);
		} else if(c != '\r') {
 8012d0a:	290d      	cmp	r1, #13
 8012d0c:	d01f      	beq.n	8012d4e <GFXwrite+0x52>
			uint8_t first = pgm_read_byte(&myGFX->gfxFont->first);
 8012d0e:	7a1a      	ldrb	r2, [r3, #8]
			if((c >= first) && (c <= (uint8_t)pgm_read_byte(&myGFX->gfxFont->last))) {
 8012d10:	4291      	cmp	r1, r2
 8012d12:	d31c      	bcc.n	8012d4e <GFXwrite+0x52>
 8012d14:	7a58      	ldrb	r0, [r3, #9]
 8012d16:	4288      	cmp	r0, r1
 8012d18:	d319      	bcc.n	8012d4e <GFXwrite+0x52>
				GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
				  &myGFX->gfxFont->glyph))[c - first]);
 8012d1a:	685d      	ldr	r5, [r3, #4]
 8012d1c:	1a8a      	subs	r2, r1, r2
 8012d1e:	89e0      	ldrh	r0, [r4, #14]
 8012d20:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
				uint8_t   w     = pgm_read_byte(&glyph->width),
						  h     = pgm_read_byte(&glyph->height);
				if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8012d24:	78eb      	ldrb	r3, [r5, #3]
				uint8_t   w     = pgm_read_byte(&glyph->width),
 8012d26:	78ae      	ldrb	r6, [r5, #2]
				if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8012d28:	b10b      	cbz	r3, 8012d2e <GFXwrite+0x32>
 8012d2a:	2e00      	cmp	r6, #0
 8012d2c:	d158      	bne.n	8012de0 <GFXwrite+0xe4>
					//     cursor_y += (int16_t)textsize *
					//       (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
					// }
					GFXdrawChar(myGFX, myGFX->cursor_x, myGFX->cursor_y, c, myGFX->textcolor, myGFX->textbgcolor, myGFX->textsize);
				}
				myGFX->cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)myGFX->textsize;
 8012d2e:	792b      	ldrb	r3, [r5, #4]
 8012d30:	89a2      	ldrh	r2, [r4, #12]
 8012d32:	fb13 f300 	smulbb	r3, r3, r0
 8012d36:	4413      	add	r3, r2
 8012d38:	81a3      	strh	r3, [r4, #12]
			}
		}

	}
}
 8012d3a:	e008      	b.n	8012d4e <GFXwrite+0x52>
			myGFX->cursor_x  = 0;
 8012d3c:	2000      	movs	r0, #0
			myGFX->cursor_y += (int16_t)myGFX->textsize *
 8012d3e:	8962      	ldrh	r2, [r4, #10]
 8012d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
			myGFX->cursor_x  = 0;
 8012d44:	81a0      	strh	r0, [r4, #12]
			myGFX->cursor_y += (int16_t)myGFX->textsize *
 8012d46:	7a9b      	ldrb	r3, [r3, #10]
 8012d48:	fb01 2303 	mla	r3, r1, r3, r2
 8012d4c:	8163      	strh	r3, [r4, #10]
}
 8012d4e:	b005      	add	sp, #20
 8012d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(c == '\n') {                        // Newline?
 8012d52:	290a      	cmp	r1, #10
 8012d54:	d03c      	beq.n	8012dd0 <GFXwrite+0xd4>
		} else if(c != '\r') {                 // Ignore carriage returns
 8012d56:	290d      	cmp	r1, #13
 8012d58:	d0f9      	beq.n	8012d4e <GFXwrite+0x52>
    if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off edge?
 8012d5a:	8a85      	ldrh	r5, [r0, #20]
 8012d5c:	8962      	ldrh	r2, [r4, #10]
			GFXcheckScrollWrap(myGFX, myGFX->textsize * 6 - myGFX->textsize * 2);
 8012d5e:	89c0      	ldrh	r0, [r0, #14]
    if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off edge?
 8012d60:	b135      	cbz	r5, 8012d70 <GFXwrite+0x74>
 8012d62:	89a7      	ldrh	r7, [r4, #12]
			GFXcheckScrollWrap(myGFX, myGFX->textsize * 6 - myGFX->textsize * 2);
 8012d64:	0085      	lsls	r5, r0, #2
    if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off edge?
 8012d66:	88a6      	ldrh	r6, [r4, #4]
 8012d68:	fa07 f585 	sxtah	r5, r7, r5
 8012d6c:	42b5      	cmp	r5, r6
 8012d6e:	da6c      	bge.n	8012e4a <GFXwrite+0x14e>
    if (myGFX->autoscroll) {
 8012d70:	8c23      	ldrh	r3, [r4, #32]
 8012d72:	b1b3      	cbz	r3, 8012da2 <GFXwrite+0xa6>
            fontOffset = (myGFX->fontHeight * myGFX->textsize)-1; // cursor defines upper left corner of char
 8012d74:	8ba3      	ldrh	r3, [r4, #28]
        uint16_t cursor = myGFX->cursor_y + fontOffset + myGFX->fontDesc * myGFX->textsize;
 8012d76:	8be5      	ldrh	r5, [r4, #30]
            fontOffset = (myGFX->fontHeight * myGFX->textsize)-1; // cursor defines upper left corner of char
 8012d78:	fb13 f300 	smulbb	r3, r3, r0
        if (cursor >= myGFX->_height) {
 8012d7c:	88e7      	ldrh	r7, [r4, #6]
        uint16_t cursor = myGFX->cursor_y + fontOffset + myGFX->fontDesc * myGFX->textsize;
 8012d7e:	fb15 f500 	smulbb	r5, r5, r0
            fontOffset = (myGFX->fontHeight * myGFX->textsize)-1; // cursor defines upper left corner of char
 8012d82:	3b01      	subs	r3, #1
        uint16_t cursor = myGFX->cursor_y + fontOffset + myGFX->fontDesc * myGFX->textsize;
 8012d84:	b2ad      	uxth	r5, r5
            fontOffset = (myGFX->fontHeight * myGFX->textsize)-1; // cursor defines upper left corner of char
 8012d86:	b29b      	uxth	r3, r3
        uint16_t cursor = myGFX->cursor_y + fontOffset + myGFX->fontDesc * myGFX->textsize;
 8012d88:	195e      	adds	r6, r3, r5
 8012d8a:	4416      	add	r6, r2
        if (cursor >= myGFX->_height) {
 8012d8c:	b2b6      	uxth	r6, r6
 8012d8e:	42be      	cmp	r6, r7
 8012d90:	d307      	bcc.n	8012da2 <GFXwrite+0xa6>
            myGFX->cursor_y = myGFX->_height - fontOffset-1 - myGFX->fontDesc * myGFX->textsize;
 8012d92:	43ed      	mvns	r5, r5
            myGFX->cursor_x  = 0;
 8012d94:	2600      	movs	r6, #0
            myGFX->cursor_y = myGFX->_height - fontOffset-1 - myGFX->fontDesc * myGFX->textsize;
 8012d96:	443d      	add	r5, r7
            myGFX->cursor_x  = 0;
 8012d98:	81a6      	strh	r6, [r4, #12]
            myGFX->cursor_y = myGFX->_height - fontOffset-1 - myGFX->fontDesc * myGFX->textsize;
 8012d9a:	1aeb      	subs	r3, r5, r3
 8012d9c:	b29a      	uxth	r2, r3
 8012d9e:	8162      	strh	r2, [r4, #10]
 8012da0:	e001      	b.n	8012da6 <GFXwrite+0xaa>
 8012da2:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
			GFXdrawChar(myGFX, myGFX->cursor_x, myGFX->cursor_y, c, myGFX->textcolor, myGFX->textbgcolor, myGFX->textsize);
 8012da6:	8a67      	ldrh	r7, [r4, #18]
 8012da8:	b2c0      	uxtb	r0, r0
 8012daa:	8a25      	ldrh	r5, [r4, #16]
 8012dac:	460b      	mov	r3, r1
 8012dae:	9002      	str	r0, [sp, #8]
 8012db0:	b212      	sxth	r2, r2
 8012db2:	4631      	mov	r1, r6
 8012db4:	4620      	mov	r0, r4
 8012db6:	e9cd 5700 	strd	r5, r7, [sp]
 8012dba:	f7ff fd89 	bl	80128d0 <GFXdrawChar>
			myGFX->cursor_x += myGFX->textsize * 6;          // Advance x one char
 8012dbe:	89e3      	ldrh	r3, [r4, #14]
 8012dc0:	89a2      	ldrh	r2, [r4, #12]
 8012dc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012dc6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8012dca:	81a3      	strh	r3, [r4, #12]
}
 8012dcc:	b005      	add	sp, #20
 8012dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize;
 8012dd0:	8b82      	ldrh	r2, [r0, #28]
 8012dd2:	8961      	ldrh	r1, [r4, #10]
 8012dd4:	89c0      	ldrh	r0, [r0, #14]
			myGFX->cursor_x  = 0;                     // Reset x to zero,
 8012dd6:	81a3      	strh	r3, [r4, #12]
			myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize;
 8012dd8:	fb12 1300 	smlabb	r3, r2, r0, r1
 8012ddc:	8163      	strh	r3, [r4, #10]
 8012dde:	e7b6      	b.n	8012d4e <GFXwrite+0x52>
    if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off edge?
 8012de0:	8aa3      	ldrh	r3, [r4, #20]
 8012de2:	8962      	ldrh	r2, [r4, #10]
 8012de4:	b18b      	cbz	r3, 8012e0a <GFXwrite+0x10e>
					GFXcheckScrollWrap(myGFX, myGFX->textsize * (xo + w));
 8012de6:	f995 3005 	ldrsb.w	r3, [r5, #5]
    if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off edge?
 8012dea:	89a7      	ldrh	r7, [r4, #12]
					GFXcheckScrollWrap(myGFX, myGFX->textsize * (xo + w));
 8012dec:	4433      	add	r3, r6
    if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off edge?
 8012dee:	88a6      	ldrh	r6, [r4, #4]
					GFXcheckScrollWrap(myGFX, myGFX->textsize * (xo + w));
 8012df0:	fb13 f300 	smulbb	r3, r3, r0
    if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off edge?
 8012df4:	fa07 f383 	sxtah	r3, r7, r3
 8012df8:	42b3      	cmp	r3, r6
 8012dfa:	db06      	blt.n	8012e0a <GFXwrite+0x10e>
    	myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize; // Advance y one line
 8012dfc:	8ba3      	ldrh	r3, [r4, #28]
    	myGFX->cursor_x  = 0;            // Reset x to zero
 8012dfe:	2600      	movs	r6, #0
    	myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize; // Advance y one line
 8012e00:	fb13 2200 	smlabb	r2, r3, r0, r2
    	myGFX->cursor_x  = 0;            // Reset x to zero
 8012e04:	81a6      	strh	r6, [r4, #12]
    	myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize; // Advance y one line
 8012e06:	b292      	uxth	r2, r2
 8012e08:	8162      	strh	r2, [r4, #10]
    if (myGFX->autoscroll) {
 8012e0a:	8c23      	ldrh	r3, [r4, #32]
 8012e0c:	b323      	cbz	r3, 8012e58 <GFXwrite+0x15c>
        uint16_t cursor = myGFX->cursor_y + fontOffset + myGFX->fontDesc * myGFX->textsize;
 8012e0e:	8be3      	ldrh	r3, [r4, #30]
        if (cursor >= myGFX->_height) {
 8012e10:	88e6      	ldrh	r6, [r4, #6]
        uint16_t cursor = myGFX->cursor_y + fontOffset + myGFX->fontDesc * myGFX->textsize;
 8012e12:	fb13 f300 	smulbb	r3, r3, r0
 8012e16:	b29b      	uxth	r3, r3
 8012e18:	18d7      	adds	r7, r2, r3
        if (cursor >= myGFX->_height) {
 8012e1a:	b2bf      	uxth	r7, r7
 8012e1c:	42b7      	cmp	r7, r6
 8012e1e:	d31b      	bcc.n	8012e58 <GFXwrite+0x15c>
            myGFX->cursor_y = myGFX->_height - fontOffset-1 - myGFX->fontDesc * myGFX->textsize;
 8012e20:	1e72      	subs	r2, r6, #1
            myGFX->cursor_x  = 0;
 8012e22:	2600      	movs	r6, #0
            myGFX->cursor_y = myGFX->_height - fontOffset-1 - myGFX->fontDesc * myGFX->textsize;
 8012e24:	1ad3      	subs	r3, r2, r3
 8012e26:	46b4      	mov	ip, r6
            myGFX->cursor_x  = 0;
 8012e28:	81a6      	strh	r6, [r4, #12]
            myGFX->cursor_y = myGFX->_height - fontOffset-1 - myGFX->fontDesc * myGFX->textsize;
 8012e2a:	b29a      	uxth	r2, r3
 8012e2c:	8162      	strh	r2, [r4, #10]
					GFXdrawChar(myGFX, myGFX->cursor_x, myGFX->cursor_y, c, myGFX->textcolor, myGFX->textbgcolor, myGFX->textsize);
 8012e2e:	8a67      	ldrh	r7, [r4, #18]
 8012e30:	b2c0      	uxtb	r0, r0
 8012e32:	8a26      	ldrh	r6, [r4, #16]
 8012e34:	460b      	mov	r3, r1
 8012e36:	9002      	str	r0, [sp, #8]
 8012e38:	b212      	sxth	r2, r2
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	4661      	mov	r1, ip
 8012e3e:	e9cd 6700 	strd	r6, r7, [sp]
 8012e42:	f7ff fd45 	bl	80128d0 <GFXdrawChar>
 8012e46:	89e0      	ldrh	r0, [r4, #14]
 8012e48:	e771      	b.n	8012d2e <GFXwrite+0x32>
    	myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize; // Advance y one line
 8012e4a:	8ba5      	ldrh	r5, [r4, #28]
    	myGFX->cursor_x  = 0;            // Reset x to zero
 8012e4c:	81a3      	strh	r3, [r4, #12]
    	myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize; // Advance y one line
 8012e4e:	fb15 2200 	smlabb	r2, r5, r0, r2
 8012e52:	b292      	uxth	r2, r2
 8012e54:	8162      	strh	r2, [r4, #10]
 8012e56:	e78b      	b.n	8012d70 <GFXwrite+0x74>
 8012e58:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8012e5c:	e7e7      	b.n	8012e2e <GFXwrite+0x132>
 8012e5e:	bf00      	nop

08012e60 <GFXsetCursor>:

void GFXsetCursor(GFX* myGFX, int16_t x, int16_t y) {
	myGFX->cursor_x = x;
 8012e60:	8181      	strh	r1, [r0, #12]
	myGFX->cursor_y = y;
 8012e62:	8142      	strh	r2, [r0, #10]
}
 8012e64:	4770      	bx	lr
 8012e66:	bf00      	nop

08012e68 <GFXgetCursorX>:

int16_t GFXgetCursorX(GFX* myGFX)
{
    return myGFX->cursor_x;
}
 8012e68:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8012e6c:	4770      	bx	lr
 8012e6e:	bf00      	nop

08012e70 <GFXsetTextSize>:
{
    return myGFX->cursor_y;
}

void GFXsetTextSize(GFX* myGFX, uint8_t s) {
	myGFX->textsize = (s > 0) ? s : 1;
 8012e70:	2900      	cmp	r1, #0
 8012e72:	bf08      	it	eq
 8012e74:	2101      	moveq	r1, #1
 8012e76:	81c1      	strh	r1, [r0, #14]
}
 8012e78:	4770      	bx	lr
 8012e7a:	bf00      	nop

08012e7c <GFXsetTextColor>:

void GFXsetTextColor(GFX* myGFX, uint16_t c, uint16_t b) {
	myGFX->textcolor   = c;
 8012e7c:	8201      	strh	r1, [r0, #16]
	myGFX->textbgcolor = b;
 8012e7e:	8242      	strh	r2, [r0, #18]
}
 8012e80:	4770      	bx	lr
 8012e82:	bf00      	nop

08012e84 <GFXsetFont>:
// to this function to use correct CP437 character values in your code.
void GFXcp437(GFX* myGFX, uint8_t x) {
	myGFX->_cp437 = x;
}

void GFXsetFont(GFX* myGFX, const GFXfont *f) {
 8012e84:	6983      	ldr	r3, [r0, #24]

	if(f)
 8012e86:	b139      	cbz	r1, 8012e98 <GFXsetFont+0x14>
    {            // Font struct pointer passed in?
        if(!myGFX->gfxFont) { // And no current font struct?
 8012e88:	b10b      	cbz	r3, 8012e8e <GFXsetFont+0xa>
		}

		myGFX->fontHeight = 8;
		myGFX->fontDesc = 0;
	}
    myGFX->gfxFont = (GFXfont *)f;
 8012e8a:	6181      	str	r1, [r0, #24]
}
 8012e8c:	4770      	bx	lr
        	myGFX->cursor_y += 6;
 8012e8e:	8943      	ldrh	r3, [r0, #10]
    myGFX->gfxFont = (GFXfont *)f;
 8012e90:	6181      	str	r1, [r0, #24]
        	myGFX->cursor_y += 6;
 8012e92:	3306      	adds	r3, #6
 8012e94:	8143      	strh	r3, [r0, #10]
}
 8012e96:	4770      	bx	lr
	else if(myGFX->gfxFont)
 8012e98:	b113      	cbz	r3, 8012ea0 <GFXsetFont+0x1c>
		myGFX->fontDesc = 0;
 8012e9a:	83c1      	strh	r1, [r0, #30]
		uint8_t first  = (uint8_t) pgm_read_byte(&f->first);
 8012e9c:	7a0b      	ldrb	r3, [r1, #8]
 8012e9e:	deff      	udf	#255	; 0xff
		myGFX->fontHeight = 8;
 8012ea0:	2308      	movs	r3, #8
 8012ea2:	61c3      	str	r3, [r0, #28]
 8012ea4:	e7f1      	b.n	8012e8a <GFXsetFont+0x6>
 8012ea6:	bf00      	nop

08012ea8 <OLEDparseInt>:
	'A', '#',
	'B', ' '
};

int OLEDparseInt(char* buffer, uint32_t myNumber, uint8_t numDigits)
{
 8012ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int i = 0; i < numDigits; i++)
 8012eaa:	4617      	mov	r7, r2
 8012eac:	b1ca      	cbz	r2, 8012ee2 <OLEDparseInt+0x3a>
 8012eae:	460d      	mov	r5, r1
 8012eb0:	4606      	mov	r6, r0
 8012eb2:	1e54      	subs	r4, r2, #1
	{
		int whichPlace = (uint32_t)(powf(10.0f,(numDigits - 1) - i));
 8012eb4:	ee07 4a90 	vmov	s15, r4
 8012eb8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8012ebc:	3c01      	subs	r4, #1
 8012ebe:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8012ec2:	f014 fe09 	bl	8027ad8 <powf>
 8012ec6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012eca:	ee17 3a90 	vmov	r3, s15
		int thisDigit = (myNumber / whichPlace);
 8012ece:	fbb5 f2f3 	udiv	r2, r5, r3
		buffer[i] = thisDigit + 48;
 8012ed2:	f102 0130 	add.w	r1, r2, #48	; 0x30
		myNumber -= thisDigit * whichPlace;
 8012ed6:	fb02 5513 	mls	r5, r2, r3, r5
	for (int i = 0; i < numDigits; i++)
 8012eda:	1c63      	adds	r3, r4, #1
		buffer[i] = thisDigit + 48;
 8012edc:	f806 1b01 	strb.w	r1, [r6], #1
	for (int i = 0; i < numDigits; i++)
 8012ee0:	d1e8      	bne.n	8012eb4 <OLEDparseInt+0xc>
	}

	return numDigits;
}
 8012ee2:	4638      	mov	r0, r7
 8012ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ee6:	bf00      	nop

08012ee8 <OLEDparsePitch>:

int OLEDparsePitch(char* buffer, float midi, uint8_t showCents)
{
	int pclass, octave, note, neg = 0; float offset;

	note = (int)midi;
 8012ee8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	offset = midi - note;

	if ((midi + 0.5f) > (note+1))
 8012eec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	note = (int)midi;
 8012ef0:	ee17 3a10 	vmov	r3, s14
	offset = midi - note;
 8012ef4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	if ((midi + 0.5f) > (note+1))
 8012ef8:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012efc:	1c5a      	adds	r2, r3, #1
	offset = midi - note;
 8012efe:	ee30 0a66 	vsub.f32	s0, s0, s13
	if ((midi + 0.5f) > (note+1))
 8012f02:	ee07 2a10 	vmov	s14, r2
 8012f06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
{
 8012f0a:	b470      	push	{r4, r5, r6}
	if ((midi + 0.5f) > (note+1))
 8012f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f14:	dd3a      	ble.n	8012f8c <OLEDparsePitch+0xa4>
	{
		note += 1;
		offset = (1.0f - offset) + 0.01f;
 8012f16:	eddf 7a20 	vldr	s15, [pc, #128]	; 8012f98 <OLEDparsePitch+0xb0>
		note += 1;
 8012f1a:	4613      	mov	r3, r2
		neg = 1;
 8012f1c:	2601      	movs	r6, #1
		offset = (1.0f - offset) + 0.01f;
 8012f1e:	ee37 0ac0 	vsub.f32	s0, s15, s0
	}

	pclass = (note % 12);
 8012f22:	4d1e      	ldr	r5, [pc, #120]	; (8012f9c <OLEDparsePitch+0xb4>)
 8012f24:	17da      	asrs	r2, r3, #31
	octave = (int)(note / 12) - 1;

	int idx = 0;

	buffer[idx++] = pitches[pclass*2];
 8012f26:	4c1e      	ldr	r4, [pc, #120]	; (8012fa0 <OLEDparsePitch+0xb8>)
	pclass = (note % 12);
 8012f28:	fb85 c503 	smull	ip, r5, r5, r3
 8012f2c:	ebc2 0265 	rsb	r2, r2, r5, asr #1
 8012f30:	eb02 0542 	add.w	r5, r2, r2, lsl #1
		buffer[i] = thisDigit + 48;
 8012f34:	322f      	adds	r2, #47	; 0x2f
	pclass = (note % 12);
 8012f36:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
	buffer[idx++] = pitches[pclass*2];
 8012f3a:	f814 5013 	ldrb.w	r5, [r4, r3, lsl #1]
	buffer[idx++] = pitches[pclass*2+1];
 8012f3e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	buffer[idx++] = pitches[pclass*2];
 8012f42:	7005      	strb	r5, [r0, #0]
	buffer[idx++] = pitches[pclass*2+1];
 8012f44:	785b      	ldrb	r3, [r3, #1]
		buffer[i] = thisDigit + 48;
 8012f46:	7082      	strb	r2, [r0, #2]
	buffer[idx++] = pitches[pclass*2+1];
 8012f48:	7043      	strb	r3, [r0, #1]

	OLEDparseInt(&buffer[idx++], octave, 1);

	if (showCents)
 8012f4a:	b309      	cbz	r1, 8012f90 <OLEDparsePitch+0xa8>
		if (neg == 1)
			buffer[idx++] = '-';
		else
			buffer[idx++] = '+';

		OLEDparseInt(&buffer[idx], (uint32_t) (offset * 100.0f), 2);
 8012f4c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012fa4 <OLEDparsePitch+0xbc>
		if (neg == 1)
 8012f50:	2e01      	cmp	r6, #1
		int thisDigit = (myNumber / whichPlace);
 8012f52:	4a15      	ldr	r2, [pc, #84]	; (8012fa8 <OLEDparsePitch+0xc0>)
		buffer[idx++] = ' ';
 8012f54:	f04f 0120 	mov.w	r1, #32
		OLEDparseInt(&buffer[idx], (uint32_t) (offset * 100.0f), 2);
 8012f58:	ee20 0a27 	vmul.f32	s0, s0, s15
			buffer[idx++] = '+';
 8012f5c:	bf0c      	ite	eq
 8012f5e:	232d      	moveq	r3, #45	; 0x2d
 8012f60:	232b      	movne	r3, #43	; 0x2b
		buffer[idx++] = ' ';
 8012f62:	70c1      	strb	r1, [r0, #3]
		idx += 2;
 8012f64:	2107      	movs	r1, #7
		OLEDparseInt(&buffer[idx], (uint32_t) (offset * 100.0f), 2);
 8012f66:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012f6a:	7103      	strb	r3, [r0, #4]
 8012f6c:	ee17 3a90 	vmov	r3, s15
		int thisDigit = (myNumber / whichPlace);
 8012f70:	fba2 4203 	umull	r4, r2, r2, r3
 8012f74:	08d2      	lsrs	r2, r2, #3
		myNumber -= thisDigit * whichPlace;
 8012f76:	eb02 0482 	add.w	r4, r2, r2, lsl #2
		buffer[i] = thisDigit + 48;
 8012f7a:	3230      	adds	r2, #48	; 0x30
		myNumber -= thisDigit * whichPlace;
 8012f7c:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
		buffer[i] = thisDigit + 48;
 8012f80:	7142      	strb	r2, [r0, #5]
 8012f82:	3330      	adds	r3, #48	; 0x30
 8012f84:	7183      	strb	r3, [r0, #6]
	}

	return idx;
}
 8012f86:	4608      	mov	r0, r1
 8012f88:	bc70      	pop	{r4, r5, r6}
 8012f8a:	4770      	bx	lr
	int pclass, octave, note, neg = 0; float offset;
 8012f8c:	2600      	movs	r6, #0
 8012f8e:	e7c8      	b.n	8012f22 <OLEDparsePitch+0x3a>
	OLEDparseInt(&buffer[idx++], octave, 1);
 8012f90:	2103      	movs	r1, #3
}
 8012f92:	bc70      	pop	{r4, r5, r6}
 8012f94:	4608      	mov	r0, r1
 8012f96:	4770      	bx	lr
 8012f98:	3f8147ae 	.word	0x3f8147ae
 8012f9c:	2aaaaaab 	.word	0x2aaaaaab
 8012fa0:	20000020 	.word	0x20000020
 8012fa4:	42c80000 	.word	0x42c80000
 8012fa8:	cccccccd 	.word	0xcccccccd

08012fac <OLEDparsePitchClass>:
int OLEDparsePitchClass(char* buffer, float midi)
{
	int pclass, note;
	float offset;

	note = (int)midi;
 8012fac:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	{
		note += 1;
		offset = (1.0f - offset) + 0.01f;
	}

	pclass = (note % 12);
 8012fb0:	4a13      	ldr	r2, [pc, #76]	; (8013000 <OLEDparsePitchClass+0x54>)
	if ((midi + 0.5f) > (note+1))
 8012fb2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5

	int idx = 0;

	buffer[idx++] = pitches[pclass*2];
 8012fb6:	4913      	ldr	r1, [pc, #76]	; (8013004 <OLEDparsePitchClass+0x58>)
	note = (int)midi;
 8012fb8:	ee17 3a10 	vmov	r3, s14
	if ((midi + 0.5f) > (note+1))
 8012fbc:	ee30 0a27 	vadd.f32	s0, s0, s15
{
 8012fc0:	b430      	push	{r4, r5}
	if ((midi + 0.5f) > (note+1))
 8012fc2:	1c5c      	adds	r4, r3, #1
{
 8012fc4:	4605      	mov	r5, r0
	buffer[idx++] = pitches[pclass*2+1];

	return idx;
}
 8012fc6:	2002      	movs	r0, #2
	if ((midi + 0.5f) > (note+1))
 8012fc8:	ee07 4a90 	vmov	s15, r4
 8012fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		note += 1;
 8012fd0:	eeb4 0a67 	vcmp.f32	s0, s15
 8012fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fd8:	bfc8      	it	gt
 8012fda:	4623      	movgt	r3, r4
	pclass = (note % 12);
 8012fdc:	fb82 2403 	smull	r2, r4, r2, r3
 8012fe0:	17da      	asrs	r2, r3, #31
 8012fe2:	ebc2 0264 	rsb	r2, r2, r4, asr #1
 8012fe6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012fea:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
	buffer[idx++] = pitches[pclass*2];
 8012fee:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
	buffer[idx++] = pitches[pclass*2+1];
 8012ff2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
	buffer[idx++] = pitches[pclass*2];
 8012ff6:	702a      	strb	r2, [r5, #0]
	buffer[idx++] = pitches[pclass*2+1];
 8012ff8:	785b      	ldrb	r3, [r3, #1]
 8012ffa:	706b      	strb	r3, [r5, #1]
}
 8012ffc:	bc30      	pop	{r4, r5}
 8012ffe:	4770      	bx	lr
 8013000:	2aaaaaab 	.word	0x2aaaaaab
 8013004:	20000020 	.word	0x20000020

08013008 <OLEDparseFixedFloat>:

int OLEDparseFixedFloat(char* buffer, float input, uint8_t numDigits, uint8_t numDecimal)
{
	float power = powf(10.0f, numDecimal);
 8013008:	ee07 2a90 	vmov	s15, r2
{
 801300c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013010:	ed2d 8b02 	vpush	{d8}
 8013014:	b085      	sub	sp, #20
 8013016:	eeb0 8a40 	vmov.f32	s16, s0
	float power = powf(10.0f, numDecimal);
 801301a:	eef8 0a67 	vcvt.f32.u32	s1, s15
{
 801301e:	4680      	mov	r8, r0
	float power = powf(10.0f, numDecimal);
 8013020:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
{
 8013024:	9201      	str	r2, [sp, #4]
 8013026:	9102      	str	r1, [sp, #8]
	float power = powf(10.0f, numDecimal);
 8013028:	f014 fd56 	bl	8027ad8 <powf>
	float f = ((float)(int)(input * power + 0.5f)) / power;
 801302c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013030:	eee0 7a08 	vfma.f32	s15, s0, s16
 8013034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801303c:	ee87 7a80 	vdiv.f32	s14, s15, s0

	int nonzeroHasHappened = 0, decimalHasHappened = 0;

	int myNumber = (int)(f * power);
 8013040:	ee27 0a00 	vmul.f32	s0, s14, s0
 8013044:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013048:	ee17 5a90 	vmov	r5, s15

	int idx = 0, i = 0;

	if (myNumber < 0)
 801304c:	2d00      	cmp	r5, #0
 801304e:	f2c0 8082 	blt.w	8013156 <OLEDparseFixedFloat+0x14e>
	int idx = 0, i = 0;
 8013052:	2600      	movs	r6, #0
		myNumber *= -1;
		buffer[idx++] = '-';
		i++;
	}

	while (i < numDigits)
 8013054:	9b02      	ldr	r3, [sp, #8]
 8013056:	429e      	cmp	r6, r3
 8013058:	da3e      	bge.n	80130d8 <OLEDparseFixedFloat+0xd0>
 801305a:	2400      	movs	r4, #0
 801305c:	1b9f      	subs	r7, r3, r6
 801305e:	9603      	str	r6, [sp, #12]
		if ((decimalHasHappened == 0) && ((numDigits-i) == numDecimal))
		{
			if (nonzeroHasHappened == 0)
			{
				idx++; //get past the negative if there is one - this is hacky should figure out how to do it right
				buffer[idx-1] = '0';
 8013060:	46a9      	mov	r9, r5
			decimalHasHappened = 1;
		}
		else
		{

			int whichPlace = (uint32_t) powf(10.0f,(numDigits - 1 - i));
 8013062:	f107 3aff 	add.w	sl, r7, #4294967295	; 0xffffffff
	while (i < numDigits)
 8013066:	9400      	str	r4, [sp, #0]
				buffer[idx-1] = '0';
 8013068:	46a3      	mov	fp, r4
 801306a:	e00d      	b.n	8013088 <OLEDparseFixedFloat+0x80>
			int thisDigit = (myNumber / whichPlace);

			if (nonzeroHasHappened == 0)
			{
				if (thisDigit > 0)
 801306c:	2b00      	cmp	r3, #0
 801306e:	dd63      	ble.n	8013138 <OLEDparseFixedFloat+0x130>
				{
					buffer[idx++] = thisDigit + 48;
 8013070:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 8013074:	462e      	mov	r6, r5
					nonzeroHasHappened = 1;
 8013076:	f04f 0b01 	mov.w	fp, #1
					buffer[idx++] = thisDigit + 48;
 801307a:	f88c e000 	strb.w	lr, [ip]
 801307e:	3401      	adds	r4, #1
 8013080:	fb02 9913 	mls	r9, r2, r3, r9
	while (i < numDigits)
 8013084:	42bc      	cmp	r4, r7
 8013086:	d027      	beq.n	80130d8 <OLEDparseFixedFloat+0xd0>
		if ((decimalHasHappened == 0) && ((numDigits-i) == numDecimal))
 8013088:	9b00      	ldr	r3, [sp, #0]
 801308a:	1c75      	adds	r5, r6, #1
 801308c:	b91b      	cbnz	r3, 8013096 <OLEDparseFixedFloat+0x8e>
 801308e:	1b3b      	subs	r3, r7, r4
 8013090:	9a01      	ldr	r2, [sp, #4]
 8013092:	429a      	cmp	r2, r3
 8013094:	d026      	beq.n	80130e4 <OLEDparseFixedFloat+0xdc>
			int whichPlace = (uint32_t) powf(10.0f,(numDigits - 1 - i));
 8013096:	ebaa 0304 	sub.w	r3, sl, r4
 801309a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801309e:	ee07 3a90 	vmov	s15, r3
 80130a2:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80130a6:	f014 fd17 	bl	8027ad8 <powf>
 80130aa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80130ae:	eb08 0c06 	add.w	ip, r8, r6
 80130b2:	ee17 2a90 	vmov	r2, s15
			int thisDigit = (myNumber / whichPlace);
 80130b6:	fb99 f3f2 	sdiv	r3, r9, r2
			if (nonzeroHasHappened == 0)
 80130ba:	f1bb 0f00 	cmp.w	fp, #0
 80130be:	d0d5      	beq.n	801306c <OLEDparseFixedFloat+0x64>
					buffer[idx++] = ' ';
				}
			}
			else
			{
				buffer[idx++] = thisDigit + 48;
 80130c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80130c4:	462e      	mov	r6, r5
 80130c6:	f04f 0b01 	mov.w	fp, #1
 80130ca:	f88c 1000 	strb.w	r1, [ip]
 80130ce:	3401      	adds	r4, #1
 80130d0:	fb02 9913 	mls	r9, r2, r3, r9
	while (i < numDigits)
 80130d4:	42bc      	cmp	r4, r7
 80130d6:	d1d7      	bne.n	8013088 <OLEDparseFixedFloat+0x80>
			i++;
		}
	}

	return idx;
}
 80130d8:	4630      	mov	r0, r6
 80130da:	b005      	add	sp, #20
 80130dc:	ecbd 8b02 	vpop	{d8}
 80130e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (nonzeroHasHappened == 0)
 80130e4:	f1bb 0f00 	cmp.w	fp, #0
 80130e8:	d02c      	beq.n	8013144 <OLEDparseFixedFloat+0x13c>
 80130ea:	4632      	mov	r2, r6
	while (i < numDigits)
 80130ec:	9b03      	ldr	r3, [sp, #12]
			buffer[idx++] = '.';
 80130ee:	f04f 012e 	mov.w	r1, #46	; 0x2e
	while (i < numDigits)
 80130f2:	4423      	add	r3, r4
			buffer[idx++] = '.';
 80130f4:	f808 1002 	strb.w	r1, [r8, r2]
	while (i < numDigits)
 80130f8:	9a02      	ldr	r2, [sp, #8]
 80130fa:	4293      	cmp	r3, r2
 80130fc:	da31      	bge.n	8013162 <OLEDparseFixedFloat+0x15a>
			int whichPlace = (uint32_t) powf(10.0f,(numDigits - 1 - i));
 80130fe:	ebaa 0304 	sub.w	r3, sl, r4
			decimalHasHappened = 1;
 8013102:	2201      	movs	r2, #1
			int whichPlace = (uint32_t) powf(10.0f,(numDigits - 1 - i));
 8013104:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
				buffer[idx++] = thisDigit + 48;
 8013108:	f04f 0b01 	mov.w	fp, #1
			int whichPlace = (uint32_t) powf(10.0f,(numDigits - 1 - i));
 801310c:	ee07 3a90 	vmov	s15, r3
			decimalHasHappened = 1;
 8013110:	9200      	str	r2, [sp, #0]
			int whichPlace = (uint32_t) powf(10.0f,(numDigits - 1 - i));
 8013112:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013116:	f014 fcdf 	bl	8027ad8 <powf>
 801311a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801311e:	eb08 0c05 	add.w	ip, r8, r5
 8013122:	3501      	adds	r5, #1
 8013124:	ee17 2a90 	vmov	r2, s15
				buffer[idx++] = thisDigit + 48;
 8013128:	462e      	mov	r6, r5
			int thisDigit = (myNumber / whichPlace);
 801312a:	fb99 f3f2 	sdiv	r3, r9, r2
				buffer[idx++] = thisDigit + 48;
 801312e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013132:	f88c 1000 	strb.w	r1, [ip]
 8013136:	e7ca      	b.n	80130ce <OLEDparseFixedFloat+0xc6>
					buffer[idx++] = ' ';
 8013138:	f04f 0120 	mov.w	r1, #32
 801313c:	462e      	mov	r6, r5
 801313e:	f88c 1000 	strb.w	r1, [ip]
 8013142:	e79c      	b.n	801307e <OLEDparseFixedFloat+0x76>
				buffer[idx-1] = '0';
 8013144:	eb08 0305 	add.w	r3, r8, r5
 8013148:	f04f 0130 	mov.w	r1, #48	; 0x30
 801314c:	462a      	mov	r2, r5
 801314e:	1cb5      	adds	r5, r6, #2
 8013150:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013154:	e7ca      	b.n	80130ec <OLEDparseFixedFloat+0xe4>
		buffer[idx++] = '-';
 8013156:	232d      	movs	r3, #45	; 0x2d
		myNumber *= -1;
 8013158:	426d      	negs	r5, r5
		buffer[idx++] = '-';
 801315a:	2601      	movs	r6, #1
 801315c:	f888 3000 	strb.w	r3, [r8]
 8013160:	e778      	b.n	8013054 <OLEDparseFixedFloat+0x4c>
			buffer[idx++] = '.';
 8013162:	462e      	mov	r6, r5
}
 8013164:	4630      	mov	r0, r6
 8013166:	b005      	add	sp, #20
 8013168:	ecbd 8b02 	vpop	{d8}
 801316c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013170 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8013170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8013174:	4b8d      	ldr	r3, [pc, #564]	; (80133ac <MX_GPIO_Init+0x23c>)
{
 8013176:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013178:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PC14 PC4 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801317a:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 801317c:	f8df 8238 	ldr.w	r8, [pc, #568]	; 80133b8 <MX_GPIO_Init+0x248>
 8013180:	f244 01d0 	movw	r1, #16592	; 0x40d0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013184:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8013186:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013188:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 801318a:	4640      	mov	r0, r8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801318c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 801318e:	f8df a22c 	ldr.w	sl, [pc, #556]	; 80133bc <MX_GPIO_Init+0x24c>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9 
 8013192:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80133c0 <MX_GPIO_Init+0x250>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 8013196:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80133c4 <MX_GPIO_Init+0x254>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801319a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801319e:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 80131a2:	f046 0610 	orr.w	r6, r6, #16
 80131a6:	f8c3 60e0 	str.w	r6, [r3, #224]	; 0xe0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pins : PF7 PF8 PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80131aa:	2603      	movs	r6, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80131ac:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 80131b0:	f007 0710 	and.w	r7, r7, #16
 80131b4:	9701      	str	r7, [sp, #4]
 80131b6:	9f01      	ldr	r7, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80131b8:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 80131bc:	f047 0704 	orr.w	r7, r7, #4
 80131c0:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 80131c4:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 80131c8:	f007 0704 	and.w	r7, r7, #4
 80131cc:	9702      	str	r7, [sp, #8]
 80131ce:	9f02      	ldr	r7, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80131d0:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 80131d4:	f047 0720 	orr.w	r7, r7, #32
 80131d8:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 80131dc:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 80131e0:	f007 0720 	and.w	r7, r7, #32
 80131e4:	9703      	str	r7, [sp, #12]
 80131e6:	9f03      	ldr	r7, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80131e8:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 80131ec:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 80131f0:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 80131f4:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 80131f8:	f007 0780 	and.w	r7, r7, #128	; 0x80
 80131fc:	9704      	str	r7, [sp, #16]
 80131fe:	9f04      	ldr	r7, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013200:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8013204:	432f      	orrs	r7, r5
 8013206:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 801320a:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 801320e:	402f      	ands	r7, r5
 8013210:	9705      	str	r7, [sp, #20]
 8013212:	9f05      	ldr	r7, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013214:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8013218:	f047 0702 	orr.w	r7, r7, #2
 801321c:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8013220:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8013224:	f007 0702 	and.w	r7, r7, #2
 8013228:	9706      	str	r7, [sp, #24]
 801322a:	9f06      	ldr	r7, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801322c:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8013230:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8013234:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8013238:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 801323c:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8013240:	9707      	str	r7, [sp, #28]
 8013242:	9f07      	ldr	r7, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8013244:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8013248:	f047 0708 	orr.w	r7, r7, #8
 801324c:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8013250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 8013254:	4f56      	ldr	r7, [pc, #344]	; (80133b0 <MX_GPIO_Init+0x240>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8013256:	f003 0308 	and.w	r3, r3, #8
 801325a:	9308      	str	r3, [sp, #32]
 801325c:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 801325e:	f7f2 fbf7 	bl	8005a50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8013262:	4622      	mov	r2, r4
 8013264:	4650      	mov	r0, sl
 8013266:	2140      	movs	r1, #64	; 0x40
 8013268:	f7f2 fbf2 	bl	8005a50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9 
 801326c:	4622      	mov	r2, r4
 801326e:	4648      	mov	r0, r9
 8013270:	f44f 61ea 	mov.w	r1, #1872	; 0x750
 8013274:	f7f2 fbec 	bl	8005a50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 8013278:	4622      	mov	r2, r4
 801327a:	4658      	mov	r0, fp
 801327c:	2111      	movs	r1, #17
 801327e:	f7f2 fbe7 	bl	8005a50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 8013282:	4622      	mov	r2, r4
 8013284:	4638      	mov	r0, r7
 8013286:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 801328a:	f7f2 fbe1 	bl	8005a50 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 801328e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013292:	a909      	add	r1, sp, #36	; 0x24
 8013294:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8013296:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013298:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801329c:	f7f2 f89e 	bl	80053dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80132a0:	f244 03d0 	movw	r3, #16592	; 0x40d0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80132a4:	a909      	add	r1, sp, #36	; 0x24
 80132a6:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80132a8:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80132ac:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80132b0:	f7f2 f894 	bl	80053dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80132b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80132b8:	4b3e      	ldr	r3, [pc, #248]	; (80133b4 <MX_GPIO_Init+0x244>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80132ba:	4640      	mov	r0, r8
 80132bc:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132be:	940b      	str	r4, [sp, #44]	; 0x2c

  /*Configure GPIO pins : PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80132c0:	f508 6880 	add.w	r8, r8, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80132c4:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80132c8:	f7f2 f888 	bl	80053dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80132cc:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80132ce:	a909      	add	r1, sp, #36	; 0x24
 80132d0:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80132d2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80132d4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132d6:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80132da:	f7f2 f87f 	bl	80053dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80132de:	f44f 63f0 	mov.w	r3, #1920	; 0x780
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80132e2:	4650      	mov	r0, sl
 80132e4:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132e6:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80132e8:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80132ec:	f7f2 f876 	bl	80053dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80132f0:	f248 0302 	movw	r3, #32770	; 0x8002
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80132f4:	a909      	add	r1, sp, #36	; 0x24
 80132f6:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80132f8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132fa:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80132fe:	f7f2 f86d 	bl	80053dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9 
 8013302:	f44f 63ea 	mov.w	r3, #1872	; 0x750
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013306:	4648      	mov	r0, r9
 8013308:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9 
 801330a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801330c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801330e:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013312:	f7f2 f863 	bl	80053dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8013316:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013318:	a909      	add	r1, sp, #36	; 0x24
 801331a:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 801331c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801331e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013320:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013324:	f7f2 f85a 	bl	80053dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8013328:	f24f 0302 	movw	r3, #61442	; 0xf002
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801332c:	a909      	add	r1, sp, #36	; 0x24
 801332e:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8013330:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013332:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013336:	f7f2 f851 	bl	80053dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 801333a:	f44f 7301 	mov.w	r3, #516	; 0x204
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801333e:	4658      	mov	r0, fp
 8013340:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 8013342:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013344:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013348:	f7f2 f848 	bl	80053dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_7;
 801334c:	f44f 6308 	mov.w	r3, #2176	; 0x880
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013350:	a909      	add	r1, sp, #36	; 0x24
 8013352:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_7;
 8013354:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013356:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801335a:	f7f2 f83f 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG9 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_14;
 801335e:	f246 2308 	movw	r3, #25096	; 0x6208
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013362:	a909      	add	r1, sp, #36	; 0x24
 8013364:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_14;
 8013366:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013368:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801336c:	f7f2 f836 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8013370:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013374:	a909      	add	r1, sp, #36	; 0x24
 8013376:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8013378:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801337a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801337c:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013380:	f7f2 f82c 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8013384:	2378      	movs	r3, #120	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013386:	4640      	mov	r0, r8
 8013388:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 801338a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801338c:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013390:	f7f2 f824 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013394:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013398:	a909      	add	r1, sp, #36	; 0x24
 801339a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801339c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801339e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80133a2:	f7f2 f81b 	bl	80053dc <HAL_GPIO_Init>

}
 80133a6:	b00f      	add	sp, #60	; 0x3c
 80133a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ac:	58024400 	.word	0x58024400
 80133b0:	58021800 	.word	0x58021800
 80133b4:	11110000 	.word	0x11110000
 80133b8:	58020800 	.word	0x58020800
 80133bc:	58021400 	.word	0x58021400
 80133c0:	58020000 	.word	0x58020000
 80133c4:	58020400 	.word	0x58020400

080133c8 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80133c8:	b538      	push	{r3, r4, r5, lr}

  hi2c2.Instance = I2C2;
 80133ca:	4b13      	ldr	r3, [pc, #76]	; (8013418 <MX_I2C2_Init+0x50>)
  hi2c2.Init.Timing = 0x505097F4;
  hi2c2.Init.OwnAddress1 = 0;
 80133cc:	2200      	movs	r2, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80133ce:	2101      	movs	r1, #1
  hi2c2.Instance = I2C2;
 80133d0:	4d12      	ldr	r5, [pc, #72]	; (801341c <MX_I2C2_Init+0x54>)
  hi2c2.Init.Timing = 0x505097F4;
 80133d2:	4c13      	ldr	r4, [pc, #76]	; (8013420 <MX_I2C2_Init+0x58>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80133d4:	4618      	mov	r0, r3
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80133d6:	621a      	str	r2, [r3, #32]
  hi2c2.Init.Timing = 0x505097F4;
 80133d8:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c2.Init.OwnAddress1 = 0;
 80133dc:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c2.Init.OwnAddress2 = 0;
 80133e0:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80133e4:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80133e8:	f7f3 f8fc 	bl	80065e4 <HAL_I2C_Init>
 80133ec:	b988      	cbnz	r0, 8013412 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80133ee:	2100      	movs	r1, #0
 80133f0:	4809      	ldr	r0, [pc, #36]	; (8013418 <MX_I2C2_Init+0x50>)
 80133f2:	f7f4 fe03 	bl	8007ffc <HAL_I2CEx_ConfigAnalogFilter>
 80133f6:	b948      	cbnz	r0, 801340c <MX_I2C2_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80133f8:	2100      	movs	r1, #0
 80133fa:	4807      	ldr	r0, [pc, #28]	; (8013418 <MX_I2C2_Init+0x50>)
 80133fc:	f7f4 fe56 	bl	80080ac <HAL_I2CEx_ConfigDigitalFilter>
 8013400:	b900      	cbnz	r0, 8013404 <MX_I2C2_Init+0x3c>
  {
    Error_Handler();
  }

}
 8013402:	bd38      	pop	{r3, r4, r5, pc}
 8013404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8013408:	f000 bc16 	b.w	8013c38 <Error_Handler>
    Error_Handler();
 801340c:	f000 fc14 	bl	8013c38 <Error_Handler>
 8013410:	e7f2      	b.n	80133f8 <MX_I2C2_Init+0x30>
    Error_Handler();
 8013412:	f000 fc11 	bl	8013c38 <Error_Handler>
 8013416:	e7ea      	b.n	80133ee <MX_I2C2_Init+0x26>
 8013418:	20015094 	.word	0x20015094
 801341c:	40005800 	.word	0x40005800
 8013420:	505097f4 	.word	0x505097f4

08013424 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8013424:	b538      	push	{r3, r4, r5, lr}

  hi2c4.Instance = I2C4;
 8013426:	4b13      	ldr	r3, [pc, #76]	; (8013474 <MX_I2C4_Init+0x50>)
  hi2c4.Init.Timing = 0x307075B1;
  hi2c4.Init.OwnAddress1 = 0;
 8013428:	2200      	movs	r2, #0
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801342a:	2101      	movs	r1, #1
  hi2c4.Instance = I2C4;
 801342c:	4d12      	ldr	r5, [pc, #72]	; (8013478 <MX_I2C4_Init+0x54>)
  hi2c4.Init.Timing = 0x307075B1;
 801342e:	4c13      	ldr	r4, [pc, #76]	; (801347c <MX_I2C4_Init+0x58>)
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c4.Init.OwnAddress2 = 0;
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8013430:	4618      	mov	r0, r3
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013432:	621a      	str	r2, [r3, #32]
  hi2c4.Init.Timing = 0x307075B1;
 8013434:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c4.Init.OwnAddress1 = 0;
 8013438:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c4.Init.OwnAddress2 = 0;
 801343c:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013440:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8013444:	f7f3 f8ce 	bl	80065e4 <HAL_I2C_Init>
 8013448:	b988      	cbnz	r0, 801346e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801344a:	2100      	movs	r1, #0
 801344c:	4809      	ldr	r0, [pc, #36]	; (8013474 <MX_I2C4_Init+0x50>)
 801344e:	f7f4 fdd5 	bl	8007ffc <HAL_I2CEx_ConfigAnalogFilter>
 8013452:	b948      	cbnz	r0, 8013468 <MX_I2C4_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8013454:	2100      	movs	r1, #0
 8013456:	4807      	ldr	r0, [pc, #28]	; (8013474 <MX_I2C4_Init+0x50>)
 8013458:	f7f4 fe28 	bl	80080ac <HAL_I2CEx_ConfigDigitalFilter>
 801345c:	b900      	cbnz	r0, 8013460 <MX_I2C4_Init+0x3c>
  {
    Error_Handler();
  }

}
 801345e:	bd38      	pop	{r3, r4, r5, pc}
 8013460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8013464:	f000 bbe8 	b.w	8013c38 <Error_Handler>
    Error_Handler();
 8013468:	f000 fbe6 	bl	8013c38 <Error_Handler>
 801346c:	e7f2      	b.n	8013454 <MX_I2C4_Init+0x30>
    Error_Handler();
 801346e:	f000 fbe3 	bl	8013c38 <Error_Handler>
 8013472:	e7ea      	b.n	801344a <MX_I2C4_Init+0x26>
 8013474:	20015048 	.word	0x20015048
 8013478:	58001c00 	.word	0x58001c00
 801347c:	307075b1 	.word	0x307075b1

08013480 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8013480:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C2)
 8013482:	4a50      	ldr	r2, [pc, #320]	; (80135c4 <HAL_I2C_MspInit+0x144>)
{
 8013484:	b08b      	sub	sp, #44	; 0x2c
  if(i2cHandle->Instance==I2C2)
 8013486:	6803      	ldr	r3, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013488:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C2)
 801348a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801348c:	9409      	str	r4, [sp, #36]	; 0x24
 801348e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8013492:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 8013496:	d069      	beq.n	801356c <HAL_I2C_MspInit+0xec>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C4)
 8013498:	4a4b      	ldr	r2, [pc, #300]	; (80135c8 <HAL_I2C_MspInit+0x148>)
 801349a:	4293      	cmp	r3, r2
 801349c:	d001      	beq.n	80134a2 <HAL_I2C_MspInit+0x22>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 801349e:	b00b      	add	sp, #44	; 0x2c
 80134a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80134a2:	4f4a      	ldr	r7, [pc, #296]	; (80135cc <HAL_I2C_MspInit+0x14c>)
 80134a4:	4605      	mov	r5, r0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80134a6:	f44f 5040 	mov.w	r0, #12288	; 0x3000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80134aa:	2212      	movs	r2, #18
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80134ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80134b0:	a905      	add	r1, sp, #20
    hdma_i2c4_rx.Instance = BDMA_Channel0;
 80134b2:	4e47      	ldr	r6, [pc, #284]	; (80135d0 <HAL_I2C_MspInit+0x150>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80134b4:	f043 0308 	orr.w	r3, r3, #8
 80134b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80134bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80134c0:	9005      	str	r0, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80134c2:	2001      	movs	r0, #1
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80134c4:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80134c8:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80134ca:	2204      	movs	r2, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80134cc:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80134ce:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80134d0:	4840      	ldr	r0, [pc, #256]	; (80135d4 <HAL_I2C_MspInit+0x154>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80134d2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80134d4:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80134d6:	f7f1 ff81 	bl	80053dc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80134da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    hdma_i2c4_rx.Init.Request = BDMA_REQUEST_I2C4_RX;
 80134de:	210d      	movs	r1, #13
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80134e0:	60b4      	str	r4, [r6, #8]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80134e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_I2C4_CLK_ENABLE();
 80134e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 80134ea:	4630      	mov	r0, r6
    __HAL_RCC_I2C4_CLK_ENABLE();
 80134ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80134f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80134f4:	60f4      	str	r4, [r6, #12]
    __HAL_RCC_I2C4_CLK_ENABLE();
 80134f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80134fa:	6132      	str	r2, [r6, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
 80134fc:	9304      	str	r3, [sp, #16]
 80134fe:	9b04      	ldr	r3, [sp, #16]
    hdma_i2c4_rx.Instance = BDMA_Channel0;
 8013500:	4b35      	ldr	r3, [pc, #212]	; (80135d8 <HAL_I2C_MspInit+0x158>)
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013502:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013506:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_i2c4_rx.Instance = BDMA_Channel0;
 801350a:	e9c6 3100 	strd	r3, r1, [r6]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 801350e:	f7ef f9cd 	bl	80028ac <HAL_DMA_Init>
 8013512:	2800      	cmp	r0, #0
 8013514:	d153      	bne.n	80135be <HAL_I2C_MspInit+0x13e>
    hdma_i2c4_tx.Instance = BDMA_Channel1;
 8013516:	4c31      	ldr	r4, [pc, #196]	; (80135dc <HAL_I2C_MspInit+0x15c>)
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013518:	2300      	movs	r3, #0
    hdma_i2c4_tx.Instance = BDMA_Channel1;
 801351a:	4831      	ldr	r0, [pc, #196]	; (80135e0 <HAL_I2C_MspInit+0x160>)
    hdma_i2c4_tx.Init.Request = BDMA_REQUEST_I2C4_TX;
 801351c:	270e      	movs	r7, #14
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801351e:	2140      	movs	r1, #64	; 0x40
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013520:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c4_tx.Instance = BDMA_Channel1;
 8013524:	6020      	str	r0, [r4, #0]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8013526:	4620      	mov	r0, r4
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 8013528:	63ee      	str	r6, [r5, #60]	; 0x3c
 801352a:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801352c:	e9c4 7101 	strd	r7, r1, [r4, #4]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013530:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013534:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013538:	e9c4 3307 	strd	r3, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 801353c:	f7ef f9b6 	bl	80028ac <HAL_DMA_Init>
 8013540:	2800      	cmp	r0, #0
 8013542:	d139      	bne.n	80135b8 <HAL_I2C_MspInit+0x138>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8013544:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 7, 0);
 8013546:	2200      	movs	r2, #0
 8013548:	2107      	movs	r1, #7
 801354a:	205f      	movs	r0, #95	; 0x5f
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 801354c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 7, 0);
 801354e:	f7ee ffe1 	bl	8002514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8013552:	205f      	movs	r0, #95	; 0x5f
 8013554:	f7ef f824 	bl	80025a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 7, 0);
 8013558:	2200      	movs	r2, #0
 801355a:	2107      	movs	r1, #7
 801355c:	2060      	movs	r0, #96	; 0x60
 801355e:	f7ee ffd9 	bl	8002514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8013562:	2060      	movs	r0, #96	; 0x60
 8013564:	f7ef f81c 	bl	80025a0 <HAL_NVIC_EnableIRQ>
}
 8013568:	b00b      	add	sp, #44	; 0x2c
 801356a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801356c:	4c17      	ldr	r4, [pc, #92]	; (80135cc <HAL_I2C_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801356e:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8013570:	f44f 6640 	mov.w	r6, #3072	; 0xc00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013574:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013576:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801357a:	a905      	add	r1, sp, #20
 801357c:	4819      	ldr	r0, [pc, #100]	; (80135e4 <HAL_I2C_MspInit+0x164>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801357e:	f043 0302 	orr.w	r3, r3, #2
 8013582:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8013586:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801358a:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801358c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013590:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8013592:	9209      	str	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013594:	9301      	str	r3, [sp, #4]
 8013596:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013598:	f7f1 ff20 	bl	80053dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 801359c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80135a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80135a4:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 80135a8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80135ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80135b0:	9302      	str	r3, [sp, #8]
 80135b2:	9b02      	ldr	r3, [sp, #8]
}
 80135b4:	b00b      	add	sp, #44	; 0x2c
 80135b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80135b8:	f000 fb3e 	bl	8013c38 <Error_Handler>
 80135bc:	e7c2      	b.n	8013544 <HAL_I2C_MspInit+0xc4>
      Error_Handler();
 80135be:	f000 fb3b 	bl	8013c38 <Error_Handler>
 80135c2:	e7a8      	b.n	8013516 <HAL_I2C_MspInit+0x96>
 80135c4:	40005800 	.word	0x40005800
 80135c8:	58001c00 	.word	0x58001c00
 80135cc:	58024400 	.word	0x58024400
 80135d0:	200150e0 	.word	0x200150e0
 80135d4:	58020c00 	.word	0x58020c00
 80135d8:	58025408 	.word	0x58025408
 80135dc:	20014fd0 	.word	0x20014fd0
 80135e0:	5802541c 	.word	0x5802541c
 80135e4:	58020400 	.word	0x58020400

080135e8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C2)
 80135e8:	4a18      	ldr	r2, [pc, #96]	; (801364c <HAL_I2C_MspDeInit+0x64>)
 80135ea:	6803      	ldr	r3, [r0, #0]
 80135ec:	4293      	cmp	r3, r2
 80135ee:	d020      	beq.n	8013632 <HAL_I2C_MspDeInit+0x4a>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
  else if(i2cHandle->Instance==I2C4)
 80135f0:	4a17      	ldr	r2, [pc, #92]	; (8013650 <HAL_I2C_MspDeInit+0x68>)
 80135f2:	4293      	cmp	r3, r2
 80135f4:	d000      	beq.n	80135f8 <HAL_I2C_MspDeInit+0x10>
 80135f6:	4770      	bx	lr
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 80135f8:	f502 320a 	add.w	r2, r2, #141312	; 0x22800
  
    /**I2C4 GPIO Configuration    
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA 
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13);
 80135fc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
{
 8013600:	b510      	push	{r4, lr}
    __HAL_RCC_I2C4_CLK_DISABLE();
 8013602:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8013606:	4604      	mov	r4, r0
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13);
 8013608:	4812      	ldr	r0, [pc, #72]	; (8013654 <HAL_I2C_MspDeInit+0x6c>)
    __HAL_RCC_I2C4_CLK_DISABLE();
 801360a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801360e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13);
 8013612:	f7f2 f8ed 	bl	80057f0 <HAL_GPIO_DeInit>

    /* I2C4 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8013616:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8013618:	f7ef fd78 	bl	800310c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 801361c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801361e:	f7ef fd75 	bl	800310c <HAL_DMA_DeInit>

    /* I2C4 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8013622:	205f      	movs	r0, #95	; 0x5f
 8013624:	f7ee ffd0 	bl	80025c8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 8013628:	2060      	movs	r0, #96	; 0x60
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }
} 
 801362a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 801362e:	f7ee bfcb 	b.w	80025c8 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8013632:	4a09      	ldr	r2, [pc, #36]	; (8013658 <HAL_I2C_MspDeInit+0x70>)
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8013634:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8013638:	4808      	ldr	r0, [pc, #32]	; (801365c <HAL_I2C_MspDeInit+0x74>)
    __HAL_RCC_I2C2_CLK_DISABLE();
 801363a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 801363e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8013642:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8013646:	f7f2 b8d3 	b.w	80057f0 <HAL_GPIO_DeInit>
 801364a:	bf00      	nop
 801364c:	40005800 	.word	0x40005800
 8013650:	58001c00 	.word	0x58001c00
 8013654:	58020c00 	.word	0x58020c00
 8013658:	58024400 	.word	0x58024400
 801365c:	58020400 	.word	0x58020400

08013660 <SCB_EnableDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8013660:	4816      	ldr	r0, [pc, #88]	; (80136bc <SCB_EnableDCache+0x5c>)
 8013662:	2300      	movs	r3, #0
{
 8013664:	b4f0      	push	{r4, r5, r6, r7}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8013666:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 801366a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 801366e:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013672:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8013676:	f3c5 06c9 	ubfx	r6, r5, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801367a:	f3c5 354e 	ubfx	r5, r5, #13, #15
 801367e:	07b7      	lsls	r7, r6, #30
 8013680:	016d      	lsls	r5, r5, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013682:	ea05 040c 	and.w	r4, r5, ip
 8013686:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8013688:	4632      	mov	r2, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801368a:	ea44 0301 	orr.w	r3, r4, r1
      } while (ways-- != 0U);
 801368e:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013690:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8013694:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8013698:	1c53      	adds	r3, r2, #1
 801369a:	d1f6      	bne.n	801368a <SCB_EnableDCache+0x2a>
 801369c:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
 801369e:	f115 0f20 	cmn.w	r5, #32
 80136a2:	d1ee      	bne.n	8013682 <SCB_EnableDCache+0x22>
 80136a4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80136a8:	6943      	ldr	r3, [r0, #20]
 80136aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80136ae:	6143      	str	r3, [r0, #20]
 80136b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80136b4:	f3bf 8f6f 	isb	sy
}
 80136b8:	bcf0      	pop	{r4, r5, r6, r7}
 80136ba:	4770      	bx	lr
 80136bc:	e000ed00 	.word	0xe000ed00

080136c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80136c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136c4:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80136c6:	224c      	movs	r2, #76	; 0x4c
 80136c8:	2100      	movs	r1, #0
 80136ca:	a80a      	add	r0, sp, #40	; 0x28
 80136cc:	f013 ff35 	bl	802753a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80136d0:	2220      	movs	r2, #32
 80136d2:	2100      	movs	r1, #0
 80136d4:	a802      	add	r0, sp, #8
 80136d6:	f013 ff30 	bl	802753a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80136da:	22bc      	movs	r2, #188	; 0xbc
 80136dc:	2100      	movs	r1, #0
 80136de:	a81d      	add	r0, sp, #116	; 0x74
 80136e0:	f013 ff2b 	bl	802753a <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80136e4:	2002      	movs	r0, #2
 80136e6:	f7f4 fd37 	bl	8008158 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80136ea:	4b3f      	ldr	r3, [pc, #252]	; (80137e8 <SystemClock_Config+0x128>)
 80136ec:	2100      	movs	r1, #0
 80136ee:	4a3f      	ldr	r2, [pc, #252]	; (80137ec <SystemClock_Config+0x12c>)

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80136f0:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80136f2:	9101      	str	r1, [sp, #4]
 80136f4:	6999      	ldr	r1, [r3, #24]
 80136f6:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80136fa:	6199      	str	r1, [r3, #24]
 80136fc:	699b      	ldr	r3, [r3, #24]
 80136fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013702:	9301      	str	r3, [sp, #4]
 8013704:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8013706:	f043 0301 	orr.w	r3, r3, #1
 801370a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801370c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801370e:	f003 0301 	and.w	r3, r3, #1
 8013712:	9301      	str	r3, [sp, #4]
 8013714:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8013716:	6983      	ldr	r3, [r0, #24]
 8013718:	049b      	lsls	r3, r3, #18
 801371a:	d5fc      	bpl.n	8013716 <SystemClock_Config+0x56>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 801371c:	4a34      	ldr	r2, [pc, #208]	; (80137f0 <SystemClock_Config+0x130>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801371e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8013720:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8013724:	f04f 0c21 	mov.w	ip, #33	; 0x21
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8013728:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 801372a:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 10;
 801372c:	210a      	movs	r1, #10
  RCC_OscInitStruct.PLL.PLLN = 384;
 801372e:	f44f 76c0 	mov.w	r6, #384	; 0x180
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8013732:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8013736:	2703      	movs	r7, #3
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8013738:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 801373c:	4323      	orrs	r3, r4
 801373e:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8013740:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8013742:	900b      	str	r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013744:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8013746:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 801374a:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 2;
 801374c:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 801374e:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8013750:	9718      	str	r7, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8013752:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013754:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8013758:	e9cd 1615 	strd	r1, r6, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 801375c:	e9cd 831a 	strd	r8, r3, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013760:	f7f4 fd3a 	bl	80081d8 <HAL_RCC_OscConfig>
 8013764:	b100      	cbz	r0, 8013768 <SystemClock_Config+0xa8>
 8013766:	e7fe      	b.n	8013766 <SystemClock_Config+0xa6>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013768:	223f      	movs	r2, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801376a:	9703      	str	r7, [sp, #12]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 801376c:	2708      	movs	r7, #8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 801376e:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013770:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8013772:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8013776:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8013778:	4641      	mov	r1, r8
 801377a:	eb0d 0007 	add.w	r0, sp, r7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 801377e:	9705      	str	r7, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8013780:	e9cd 3306 	strd	r3, r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8013784:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8013788:	f7f5 f94c 	bl	8008a24 <HAL_RCC_ClockConfig>
 801378c:	4603      	mov	r3, r0
 801378e:	b100      	cbz	r0, 8013792 <SystemClock_Config+0xd2>
 8013790:	e7fe      	b.n	8013790 <SystemClock_Config+0xd0>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8013792:	2219      	movs	r2, #25
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SAI1
 8013794:	f8df e05c 	ldr.w	lr, [pc, #92]	; 80137f4 <SystemClock_Config+0x134>
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 8013798:	f44f 7cac 	mov.w	ip, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2R = 1;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.PLL3.PLL3M = 25;
  PeriphClkInitStruct.PLL3.PLL3N = 384;
 801379c:	9627      	str	r6, [sp, #156]	; 0x9c
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 801379e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 80137a2:	2607      	movs	r6, #7
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80137a4:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80137a6:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 80137a8:	9522      	str	r5, [sp, #136]	; 0x88
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80137aa:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80137ac:	932e      	str	r3, [sp, #184]	; 0xb8
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80137ae:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80137b0:	9532      	str	r5, [sp, #200]	; 0xc8
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80137b2:	9342      	str	r3, [sp, #264]	; 0x108
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80137b4:	9345      	str	r3, [sp, #276]	; 0x114
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 80137b6:	9226      	str	r2, [sp, #152]	; 0x98
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80137b8:	913e      	str	r1, [sp, #248]	; 0xf8
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80137ba:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
 80137be:	e9cd 4728 	strd	r4, r7, [sp, #160]	; 0xa0
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80137c2:	e9cd 432a 	strd	r4, r3, [sp, #168]	; 0xa8
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80137c6:	e9cd 332c 	strd	r3, r3, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80137ca:	e9cd 333c 	strd	r3, r3, [sp, #240]	; 0xf0
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80137ce:	e9cd e21d 	strd	lr, r2, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 80137d2:	e9cd c61f 	strd	ip, r6, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80137d6:	f7f5 fdbd 	bl	8009354 <HAL_RCCEx_PeriphCLKConfig>
 80137da:	b100      	cbz	r0, 80137de <SystemClock_Config+0x11e>
 80137dc:	e7fe      	b.n	80137dc <SystemClock_Config+0x11c>
  {
    Error_Handler();
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80137de:	f7f4 fceb 	bl	80081b8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80137e2:	b04c      	add	sp, #304	; 0x130
 80137e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137e8:	58024800 	.word	0x58024800
 80137ec:	58000400 	.word	0x58000400
 80137f0:	58024400 	.word	0x58024400
 80137f4:	010f0118 	.word	0x010f0118

080137f8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
	//HAL_MDMA_Start_IT(&hmdma_mdma_channel40_dma1_stream0_tc_0, (uint32_t)&ADC_valuesDMA, (uint32_t)&ADC_values, 10, 1);
}
 80137f8:	4770      	bx	lr
 80137fa:	bf00      	nop

080137fc <HAL_ADC_ConvHalfCpltCallback>:
 80137fc:	4770      	bx	lr
 80137fe:	bf00      	nop

08013800 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 8013800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 1;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013804:	4c2b      	ldr	r4, [pc, #172]	; (80138b4 <SDRAM_Initialization_sequence+0xb4>)
{
 8013806:	b087      	sub	sp, #28
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8013808:	2501      	movs	r5, #1
    __IO uint32_t tmpmrd = 0;
 801380a:	2600      	movs	r6, #0
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801380c:	2710      	movs	r7, #16
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801380e:	a902      	add	r1, sp, #8
 8013810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013814:	4620      	mov	r0, r4
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
 8013816:	f04f 0808 	mov.w	r8, #8
    __IO uint32_t tmpmrd = 0;
 801381a:	9601      	str	r6, [sp, #4]
    Command.ModeRegisterDefinition = 0;
 801381c:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 801381e:	f04f 0903 	mov.w	r9, #3
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8013822:	9502      	str	r5, [sp, #8]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8013824:	e9cd 7503 	strd	r7, r5, [sp, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013828:	f7f8 fe1a 	bl	800c460 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 801382c:	4628      	mov	r0, r5
 801382e:	f7ed fa0f 	bl	8000c50 <HAL_Delay>
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8013832:	2302      	movs	r3, #2
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013834:	eb0d 0108 	add.w	r1, sp, r8
 8013838:	4620      	mov	r0, r4
 801383a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 801383e:	9302      	str	r3, [sp, #8]
    Command.ModeRegisterDefinition = 0;
 8013840:	9605      	str	r6, [sp, #20]
    Command.AutoRefreshNumber = 1;
 8013842:	e9cd 7503 	strd	r7, r5, [sp, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013846:	f7f8 fe0b 	bl	800c460 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 801384a:	f240 2222 	movw	r2, #546	; 0x222
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 801384e:	2304      	movs	r3, #4
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013850:	eb0d 0108 	add.w	r1, sp, r8
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 8013854:	9201      	str	r2, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013856:	4620      	mov	r0, r4
    Command.ModeRegisterDefinition = tmpmrd;
 8013858:	f8dd c004 	ldr.w	ip, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801385c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8013860:	9302      	str	r3, [sp, #8]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8013862:	9703      	str	r7, [sp, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 8013864:	e9cd 5c04 	strd	r5, ip, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013868:	f7f8 fdfa 	bl	800c460 <HAL_SDRAM_SendCommand>
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801386c:	eb0d 0108 	add.w	r1, sp, r8
 8013870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013874:	4620      	mov	r0, r4
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8013876:	9703      	str	r7, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 8013878:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 801387a:	f8cd 9008 	str.w	r9, [sp, #8]
    Command.AutoRefreshNumber = 8;
 801387e:	f8cd 8010 	str.w	r8, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013882:	f7f8 fded 	bl	800c460 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8013886:	4628      	mov	r0, r5
 8013888:	f7ed f9e2 	bl	8000c50 <HAL_Delay>
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801388c:	eb0d 0108 	add.w	r1, sp, r8
 8013890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013894:	4620      	mov	r0, r4
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8013896:	e9cd 9702 	strd	r9, r7, [sp, #8]
    Command.ModeRegisterDefinition = 0;
 801389a:	e9cd 8604 	strd	r8, r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801389e:	f7f8 fddf 	bl	800c460 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 80138a2:	f240 5169 	movw	r1, #1385	; 0x569
 80138a6:	4620      	mov	r0, r4
 80138a8:	f7f8 fdfc 	bl	800c4a4 <HAL_SDRAM_ProgramRefreshRate>
}
 80138ac:	b007      	add	sp, #28
 80138ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138b2:	bf00      	nop
 80138b4:	20014f9c 	.word	0x20014f9c

080138b8 <randomNumber>:

float randomNumber(void) {
 80138b8:	b500      	push	{lr}
 80138ba:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 80138bc:	4807      	ldr	r0, [pc, #28]	; (80138dc <randomNumber+0x24>)
 80138be:	a901      	add	r1, sp, #4
 80138c0:	f7f6 fede 	bl	800a680 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 80138c4:	eddd 7a01 	vldr	s15, [sp, #4]
 80138c8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80138e0 <randomNumber+0x28>
 80138cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 80138d0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80138d4:	b003      	add	sp, #12
 80138d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80138da:	bf00      	nop
 80138dc:	20015694 	.word	0x20015694
 80138e0:	2f80000d 	.word	0x2f80000d

080138e4 <MPU_Conf>:


void MPU_Conf(void)
{
 80138e4:	b510      	push	{r4, lr}
 80138e6:	b084      	sub	sp, #16
  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80138e8:	2400      	movs	r4, #0
	HAL_MPU_Disable();
 80138ea:	f7ee fe9f 	bl	800262c <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x30000000;
 80138ee:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80138f2:	f240 1201 	movw	r2, #257	; 0x101
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80138f6:	4b0d      	ldr	r3, [pc, #52]	; (801392c <MPU_Conf+0x48>)


  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80138f8:	4668      	mov	r0, sp
  MPU_InitStruct.BaseAddress = 0x30000000;
 80138fa:	9101      	str	r1, [sp, #4]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80138fc:	f8ad 2000 	strh.w	r2, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8013900:	e9cd 3402 	strd	r3, r4, [sp, #8]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8013904:	f7ee feb4 	bl	8002670 <HAL_MPU_ConfigRegion>
  //now set up D3 domain RAM

  MPU_InitStruct.Enable = MPU_REGION_ENABLE;

  //D3 Domain�SRAM1
  MPU_InitStruct.BaseAddress = 0x38000000;
 8013908:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801390c:	f240 2201 	movw	r2, #513	; 0x201


  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8013910:	4b07      	ldr	r3, [pc, #28]	; (8013930 <MPU_Conf+0x4c>)


  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8013912:	4668      	mov	r0, sp
  MPU_InitStruct.BaseAddress = 0x38000000;
 8013914:	9101      	str	r1, [sp, #4]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8013916:	f8ad 2000 	strh.w	r2, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 801391a:	9302      	str	r3, [sp, #8]
 801391c:	9403      	str	r4, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801391e:	f7ee fea7 	bl	8002670 <HAL_MPU_ConfigRegion>
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  */



  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8013922:	2004      	movs	r0, #4
 8013924:	f7ee fe92 	bl	800264c <HAL_MPU_Enable>
}
 8013928:	b004      	add	sp, #16
 801392a:	bd10      	pop	{r4, pc}
 801392c:	03010011 	.word	0x03010011
 8013930:	0301000f 	.word	0x0301000f

08013934 <main>:
{
 8013934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MPU_Conf();
 8013936:	f7ff ffd5 	bl	80138e4 <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 801393a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801393e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8013942:	4c7e      	ldr	r4, [pc, #504]	; (8013b3c <main+0x208>)
 8013944:	2500      	movs	r5, #0
 8013946:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 801394a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801394e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8013952:	6963      	ldr	r3, [r4, #20]
 8013954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013958:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801395a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801395e:	f3bf 8f6f 	isb	sy
  SCB_EnableDCache();
 8013962:	f7ff fe7d 	bl	8013660 <SCB_EnableDCache>
  HAL_Init();
 8013966:	f7ed f92f 	bl	8000bc8 <HAL_Init>
  __ASM volatile ("dsb 0xF":::"memory");
 801396a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801396e:	f3bf 8f6f 	isb	sy
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8013972:	6963      	ldr	r3, [r4, #20]
 8013974:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013978:	6163      	str	r3, [r4, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 801397a:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 801397e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013982:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8013986:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801398a:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 801398e:	6963      	ldr	r3, [r4, #20]
 8013990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013994:	6163      	str	r3, [r4, #20]
 8013996:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 801399a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801399e:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80139a2:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80139a6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80139aa:	07b7      	lsls	r7, r6, #30
 80139ac:	0158      	lsls	r0, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80139ae:	ea00 050c 	and.w	r5, r0, ip
 80139b2:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80139b4:	4632      	mov	r2, r6
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80139b6:	ea41 0305 	orr.w	r3, r1, r5
      } while (ways-- != 0U);
 80139ba:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80139bc:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 80139c0:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 80139c4:	1c53      	adds	r3, r2, #1
 80139c6:	d1f6      	bne.n	80139b6 <main+0x82>
 80139c8:	3820      	subs	r0, #32
    } while(sets-- != 0U);
 80139ca:	f110 0f20 	cmn.w	r0, #32
 80139ce:	d1ee      	bne.n	80139ae <main+0x7a>
 80139d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80139d4:	f3bf 8f6f 	isb	sy
  SystemClock_Config();
 80139d8:	f7ff fe72 	bl	80136c0 <SystemClock_Config>
  MX_GPIO_Init();
 80139dc:	f7ff fbc8 	bl	8013170 <MX_GPIO_Init>
  MX_BDMA_Init();
 80139e0:	f7fd ff1e 	bl	8011820 <MX_BDMA_Init>
  MX_DMA_Init();
 80139e4:	f7fe f82e 	bl	8011a44 <MX_DMA_Init>
  MX_FMC_Init();
 80139e8:	f7fe fbee 	bl	80121c8 <MX_FMC_Init>
  MX_ADC1_Init();
 80139ec:	f7fd f966 	bl	8010cbc <MX_ADC1_Init>
  MX_I2C2_Init();
 80139f0:	f7ff fcea 	bl	80133c8 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 80139f4:	f000 ffd4 	bl	80149a0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80139f8:	f7fe fbcc 	bl	8012194 <MX_FATFS_Init>
  MX_SAI1_Init();
 80139fc:	f000 fe48 	bl	8014690 <MX_SAI1_Init>
  MX_RNG_Init();
 8013a00:	f000 fe18 	bl	8014634 <MX_RNG_Init>
  MX_I2C4_Init();
 8013a04:	f7ff fd0e 	bl	8013424 <MX_I2C4_Init>
  MX_USB_HOST_Init();
 8013a08:	f00a fbd8 	bl	801e1bc <MX_USB_HOST_Init>
  MX_TIM3_Init();
 8013a0c:	f008 fdc4 	bl	801c598 <MX_TIM3_Init>
  MX_TIM4_Init();
 8013a10:	f008 fe40 	bl	801c694 <MX_TIM4_Init>
  __ASM volatile ("dsb 0xF":::"memory");
 8013a14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013a18:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8013a1c:	2500      	movs	r5, #0
 8013a1e:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8013a22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013a26:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8013a2a:	6963      	ldr	r3, [r4, #20]
 8013a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013a30:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8013a32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013a36:	f3bf 8f6f 	isb	sy
  SCB_EnableDCache();
 8013a3a:	f7ff fe11 	bl	8013660 <SCB_EnableDCache>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8013a3e:	2104      	movs	r1, #4
 8013a40:	483f      	ldr	r0, [pc, #252]	; (8013b40 <main+0x20c>)
 8013a42:	f7f9 f86f 	bl	800cb24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8013a46:	4629      	mov	r1, r5
 8013a48:	483e      	ldr	r0, [pc, #248]	; (8013b44 <main+0x210>)
 8013a4a:	f7f9 f86b 	bl	800cb24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8013a4e:	2104      	movs	r1, #4
 8013a50:	483c      	ldr	r0, [pc, #240]	; (8013b44 <main+0x210>)
 8013a52:	f7f9 f867 	bl	800cb24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8013a56:	2108      	movs	r1, #8
 8013a58:	483a      	ldr	r0, [pc, #232]	; (8013b44 <main+0x210>)
 8013a5a:	f7f9 f863 	bl	800cb24 <HAL_TIM_PWM_Start>
  HAL_FLASH_Unlock();
 8013a5e:	f7f1 faaf 	bl	8004fc0 <HAL_FLASH_Unlock>
  if( EE_Init() != EE_OK)
 8013a62:	f7fe f883 	bl	8011b6c <EE_Init>
 8013a66:	4605      	mov	r5, r0
 8013a68:	b100      	cbz	r0, 8013a6c <main+0x138>
 8013a6a:	e7fe      	b.n	8013a6a <main+0x136>
  if((EE_ReadVariable(VirtAddVarTab[0],  &VarDataTab)) != HAL_OK) // read what the preset was before last power-off
 8013a6c:	4c36      	ldr	r4, [pc, #216]	; (8013b48 <main+0x214>)
 8013a6e:	4937      	ldr	r1, [pc, #220]	; (8013b4c <main+0x218>)
 8013a70:	8820      	ldrh	r0, [r4, #0]
 8013a72:	f7fe fa53 	bl	8011f1c <EE_ReadVariable>
 8013a76:	2800      	cmp	r0, #0
 8013a78:	d13e      	bne.n	8013af8 <main+0x1c4>
  if (VarDataTab < PresetNil) //make sure the stored data is a number not past the number of available presets
 8013a7a:	4b34      	ldr	r3, [pc, #208]	; (8013b4c <main+0x218>)

// helper function to initialize measuring unit (cycle counter) */
static void CycleCounterInit( void )
{
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8013a7c:	4a34      	ldr	r2, [pc, #208]	; (8013b50 <main+0x21c>)
  if (VarDataTab < PresetNil) //make sure the stored data is a number not past the number of available presets
 8013a7e:	881b      	ldrh	r3, [r3, #0]
 8013a80:	4834      	ldr	r0, [pc, #208]	; (8013b54 <main+0x220>)
 8013a82:	2b12      	cmp	r3, #18

  /* Unlock DWT registers */
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8013a84:	4934      	ldr	r1, [pc, #208]	; (8013b58 <main+0x224>)
  if (VarDataTab < PresetNil) //make sure the stored data is a number not past the number of available presets
 8013a86:	bf28      	it	cs
 8013a88:	2300      	movcs	r3, #0
 8013a8a:	7003      	strb	r3, [r0, #0]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8013a8c:	68d3      	ldr	r3, [r2, #12]
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8013a8e:	6809      	ldr	r1, [r1, #0]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8013a90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013a94:	60d3      	str	r3, [r2, #12]
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8013a96:	07cb      	lsls	r3, r1, #31
 8013a98:	d502      	bpl.n	8013aa0 <main+0x16c>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 8013a9a:	4b30      	ldr	r3, [pc, #192]	; (8013b5c <main+0x228>)
 8013a9c:	4a30      	ldr	r2, [pc, #192]	; (8013b60 <main+0x22c>)
 8013a9e:	601a      	str	r2, [r3, #0]

  /* clear the cycle counter */
  DWT->CYCCNT = 0;
 8013aa0:	4830      	ldr	r0, [pc, #192]	; (8013b64 <main+0x230>)
 8013aa2:	2500      	movs	r5, #0

  /* start the cycle counter */
  DWT->CTRL = 0x40000001;
 8013aa4:	4c30      	ldr	r4, [pc, #192]	; (8013b68 <main+0x234>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8013aa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  DWT->CYCCNT = 0;
 8013aaa:	6045      	str	r5, [r0, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8013aac:	462a      	mov	r2, r5
  DWT->CTRL = 0x40000001;
 8013aae:	6004      	str	r4, [r0, #0]

  for (int i = 0; i < 4; i++)
  {
	  cycleCountAverages[i][0] = 0.0f;
 8013ab0:	2400      	movs	r4, #0
 8013ab2:	4b2e      	ldr	r3, [pc, #184]	; (8013b6c <main+0x238>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8013ab4:	482e      	ldr	r0, [pc, #184]	; (8013b70 <main+0x23c>)
	  cycleCountAverages[i][0] = 0.0f;
 8013ab6:	601c      	str	r4, [r3, #0]
	  cycleCountAverages[i][1] = 0.0f;
 8013ab8:	605c      	str	r4, [r3, #4]
	  cycleCountAverages[i][2] = 0.0f;
 8013aba:	609c      	str	r4, [r3, #8]
	  cycleCountAverages[i][0] = 0.0f;
 8013abc:	60dc      	str	r4, [r3, #12]
	  cycleCountAverages[i][1] = 0.0f;
 8013abe:	611c      	str	r4, [r3, #16]
	  cycleCountAverages[i][2] = 0.0f;
 8013ac0:	615c      	str	r4, [r3, #20]
	  cycleCountAverages[i][0] = 0.0f;
 8013ac2:	619c      	str	r4, [r3, #24]
	  cycleCountAverages[i][1] = 0.0f;
 8013ac4:	61dc      	str	r4, [r3, #28]
	  cycleCountAverages[i][2] = 0.0f;
 8013ac6:	621c      	str	r4, [r3, #32]
	  cycleCountAverages[i][0] = 0.0f;
 8013ac8:	625c      	str	r4, [r3, #36]	; 0x24
	  cycleCountAverages[i][1] = 0.0f;
 8013aca:	629c      	str	r4, [r3, #40]	; 0x28
	  cycleCountAverages[i][2] = 0.0f;
 8013acc:	62dc      	str	r4, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8013ace:	f7f1 ffbf 	bl	8005a50 <HAL_GPIO_WritePin>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8013ad2:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 8013ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8013ada:	eee1 3a10 	vmsr	fpscr, r3
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8013ade:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013ae2:	4629      	mov	r1, r5
 8013ae4:	4823      	ldr	r0, [pc, #140]	; (8013b74 <main+0x240>)
 8013ae6:	f7ee fbb3 	bl	8002250 <HAL_ADCEx_Calibration_Start>
  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values, NUM_ADC_CHANNELS) != HAL_OK)
 8013aea:	2206      	movs	r2, #6
 8013aec:	4922      	ldr	r1, [pc, #136]	; (8013b78 <main+0x244>)
 8013aee:	4821      	ldr	r0, [pc, #132]	; (8013b74 <main+0x240>)
 8013af0:	f7ed f8e0 	bl	8000cb4 <HAL_ADC_Start_DMA>
 8013af4:	b138      	cbz	r0, 8013b06 <main+0x1d2>
 8013af6:	e7fe      	b.n	8013af6 <main+0x1c2>
	  if((EE_WriteVariable(VirtAddVarTab[0],  0)) != HAL_OK)
 8013af8:	4629      	mov	r1, r5
 8013afa:	8820      	ldrh	r0, [r4, #0]
 8013afc:	f7fe fa4a 	bl	8011f94 <EE_WriteVariable>
 8013b00:	2800      	cmp	r0, #0
 8013b02:	d0ba      	beq.n	8013a7a <main+0x146>
 8013b04:	e7fe      	b.n	8013b04 <main+0x1d0>
 8013b06:	4c1d      	ldr	r4, [pc, #116]	; (8013b7c <main+0x248>)
  HAL_Delay(10);
 8013b08:	200a      	movs	r0, #10
 8013b0a:	f7ed f8a1 	bl	8000c50 <HAL_Delay>
  OLED_init(&hi2c4);
 8013b0e:	4620      	mov	r0, r4
 8013b10:	f000 f9b0 	bl	8013e74 <OLED_init>
  SDRAM_Initialization_sequence();
 8013b14:	f7ff fe74 	bl	8013800 <SDRAM_Initialization_sequence>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 8013b18:	4a19      	ldr	r2, [pc, #100]	; (8013b80 <main+0x24c>)
 8013b1a:	491a      	ldr	r1, [pc, #104]	; (8013b84 <main+0x250>)
 8013b1c:	481a      	ldr	r0, [pc, #104]	; (8013b88 <main+0x254>)
 8013b1e:	f7fd fda5 	bl	801166c <audioInit>
  OLED_writePreset();
 8013b22:	f000 f92d 	bl	8013d80 <OLED_writePreset>
    MX_USB_HOST_Process();
 8013b26:	f00a fb7f 	bl	801e228 <MX_USB_HOST_Process>
    OLED_process(); // process what to write to the screen but don't actually draw
 8013b2a:	f000 fd11 	bl	8014550 <OLED_process>
 	if (hi2c4.State == HAL_I2C_STATE_READY)
 8013b2e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8013b32:	2b20      	cmp	r3, #32
 8013b34:	d1f7      	bne.n	8013b26 <main+0x1f2>
	  OLED_draw();
 8013b36:	f000 fae5 	bl	8014104 <OLED_draw>
 8013b3a:	e7f4      	b.n	8013b26 <main+0x1f2>
 8013b3c:	e000ed00 	.word	0xe000ed00
 8013b40:	200186b0 	.word	0x200186b0
 8013b44:	20018670 	.word	0x20018670
 8013b48:	20000018 	.word	0x20000018
 8013b4c:	20000508 	.word	0x20000508
 8013b50:	e000edf0 	.word	0xe000edf0
 8013b54:	20000655 	.word	0x20000655
 8013b58:	e0001fb4 	.word	0xe0001fb4
 8013b5c:	e0001fb0 	.word	0xe0001fb0
 8013b60:	c5acce55 	.word	0xc5acce55
 8013b64:	e0001000 	.word	0xe0001000
 8013b68:	40000001 	.word	0x40000001
 8013b6c:	20015560 	.word	0x20015560
 8013b70:	58020800 	.word	0x58020800
 8013b74:	20000710 	.word	0x20000710
 8013b78:	30001080 	.word	0x30001080
 8013b7c:	20015048 	.word	0x20015048
 8013b80:	200156a8 	.word	0x200156a8
 8013b84:	20015830 	.word	0x20015830
 8013b88:	20015094 	.word	0x20015094

08013b8c <CycleCounterTrackMinAndMax>:



//this keeps min and max, but doesn't do the array for averaging - a bit less expensive
void CycleCounterTrackMinAndMax( uint8_t whichCount)
{
 8013b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if ((cycleCountVals[whichCount][2] == 0) && (cycleCountVals[whichCount][1] > 0)) //the [2] spot in the array will be set to 1 if an interrupt happened during the cycle count -- need to set that in any higher-priority interrupts to make that true
 8013b90:	0046      	lsls	r6, r0, #1
 8013b92:	4c27      	ldr	r4, [pc, #156]	; (8013c30 <CycleCounterTrackMinAndMax+0xa4>)
 8013b94:	1833      	adds	r3, r6, r0
 8013b96:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
{
 8013b9a:	ed2d 8b02 	vpush	{d8}
	if ((cycleCountVals[whichCount][2] == 0) && (cycleCountVals[whichCount][1] > 0)) //the [2] spot in the array will be set to 1 if an interrupt happened during the cycle count -- need to set that in any higher-priority interrupts to make that true
 8013b9e:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
 8013ba2:	ea58 0109 	orrs.w	r1, r8, r9
 8013ba6:	d13e      	bne.n	8013c26 <CycleCounterTrackMinAndMax+0x9a>
 8013ba8:	e9d2 8902 	ldrd	r8, r9, [r2, #8]
 8013bac:	f1b8 0f01 	cmp.w	r8, #1
 8013bb0:	f179 0100 	sbcs.w	r1, r9, #0
 8013bb4:	db37      	blt.n	8013c26 <CycleCounterTrackMinAndMax+0x9a>
	{
		if ((cycleCountVals[whichCount][1] < cycleCountAverages[whichCount][1]) || (cycleCountAverages[whichCount][1] == 0))
 8013bb6:	4f1f      	ldr	r7, [pc, #124]	; (8013c34 <CycleCounterTrackMinAndMax+0xa8>)
 8013bb8:	4605      	mov	r5, r0
 8013bba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013bbe:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8013bc2:	ed93 8a01 	vldr	s16, [r3, #4]
 8013bc6:	f7ec fe1b 	bl	8000800 <__aeabi_l2f>
 8013bca:	ee07 0a90 	vmov	s15, r0
 8013bce:	eef4 7ac8 	vcmpe.f32	s15, s16
 8013bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bd6:	d404      	bmi.n	8013be2 <CycleCounterTrackMinAndMax+0x56>
 8013bd8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be0:	d10a      	bne.n	8013bf8 <CycleCounterTrackMinAndMax+0x6c>
		{
			cycleCountAverages[whichCount][1] = cycleCountVals[whichCount][1];
 8013be2:	1973      	adds	r3, r6, r5
 8013be4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8013be8:	eb07 0883 	add.w	r8, r7, r3, lsl #2
 8013bec:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8013bf0:	f7ec fe06 	bl	8000800 <__aeabi_l2f>
 8013bf4:	f8c8 0004 	str.w	r0, [r8, #4]
		}
		//update max value ([2])
		if (cycleCountVals[whichCount][1] > cycleCountAverages[whichCount][2])
 8013bf8:	1970      	adds	r0, r6, r5
 8013bfa:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 8013bfe:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8013c02:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8013c06:	f7ec fdfb 	bl	8000800 <__aeabi_l2f>
 8013c0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8013c0e:	ee07 0a10 	vmov	s14, r0
 8013c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c1a:	dd04      	ble.n	8013c26 <CycleCounterTrackMinAndMax+0x9a>
		{
			cycleCountAverages[whichCount][2] = cycleCountVals[whichCount][1];
 8013c1c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8013c20:	f7ec fdee 	bl	8000800 <__aeabi_l2f>
 8013c24:	60b8      	str	r0, [r7, #8]
		}
	}
}
 8013c26:	ecbd 8b02 	vpop	{d8}
 8013c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c2e:	bf00      	nop
 8013c30:	20015590 	.word	0x20015590
 8013c34:	20015560 	.word	0x20015560

08013c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013c38:	e7fe      	b.n	8013c38 <Error_Handler>
 8013c3a:	bf00      	nop

08013c3c <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8013c3c:	4770      	bx	lr
 8013c3e:	bf00      	nop

08013c40 <setLED_Edit>:
	buttonActionFunctions[Rhodes] = UIRhodesButtons;
}

void setLED_Edit(uint8_t onOff)
{
	if (onOff)
 8013c40:	b920      	cbnz	r0, 8013c4c <setLED_Edit+0xc>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8013c42:	4602      	mov	r2, r0
 8013c44:	2180      	movs	r1, #128	; 0x80
 8013c46:	4804      	ldr	r0, [pc, #16]	; (8013c58 <setLED_Edit+0x18>)
 8013c48:	f7f1 bf02 	b.w	8005a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	2180      	movs	r1, #128	; 0x80
 8013c50:	4801      	ldr	r0, [pc, #4]	; (8013c58 <setLED_Edit+0x18>)
 8013c52:	f7f1 befd 	b.w	8005a50 <HAL_GPIO_WritePin>
 8013c56:	bf00      	nop
 8013c58:	58020800 	.word	0x58020800

08013c5c <setLED_USB>:
}


void setLED_USB(uint8_t onOff)
{
	if (onOff)
 8013c5c:	b920      	cbnz	r0, 8013c68 <setLED_USB+0xc>
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8013c5e:	4602      	mov	r2, r0
 8013c60:	2140      	movs	r1, #64	; 0x40
 8013c62:	4804      	ldr	r0, [pc, #16]	; (8013c74 <setLED_USB+0x18>)
 8013c64:	f7f1 bef4 	b.w	8005a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8013c68:	2201      	movs	r2, #1
 8013c6a:	2140      	movs	r1, #64	; 0x40
 8013c6c:	4801      	ldr	r0, [pc, #4]	; (8013c74 <setLED_USB+0x18>)
 8013c6e:	f7f1 beef 	b.w	8005a50 <HAL_GPIO_WritePin>
 8013c72:	bf00      	nop
 8013c74:	58021800 	.word	0x58021800

08013c78 <setLED_1>:
}


void setLED_1(uint8_t onOff)
{
	if (onOff)
 8013c78:	b928      	cbnz	r0, 8013c86 <setLED_1+0xe>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8013c7a:	4602      	mov	r2, r0
 8013c7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013c80:	4804      	ldr	r0, [pc, #16]	; (8013c94 <setLED_1+0x1c>)
 8013c82:	f7f1 bee5 	b.w	8005a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8013c86:	2201      	movs	r2, #1
 8013c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013c8c:	4801      	ldr	r0, [pc, #4]	; (8013c94 <setLED_1+0x1c>)
 8013c8e:	f7f1 bedf 	b.w	8005a50 <HAL_GPIO_WritePin>
 8013c92:	bf00      	nop
 8013c94:	58020000 	.word	0x58020000

08013c98 <setLED_2>:
	}
}

void setLED_2(uint8_t onOff)
{
	if (onOff)
 8013c98:	b928      	cbnz	r0, 8013ca6 <setLED_2+0xe>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8013c9a:	4602      	mov	r2, r0
 8013c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013ca0:	4804      	ldr	r0, [pc, #16]	; (8013cb4 <setLED_2+0x1c>)
 8013ca2:	f7f1 bed5 	b.w	8005a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8013ca6:	2201      	movs	r2, #1
 8013ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013cac:	4801      	ldr	r0, [pc, #4]	; (8013cb4 <setLED_2+0x1c>)
 8013cae:	f7f1 becf 	b.w	8005a50 <HAL_GPIO_WritePin>
 8013cb2:	bf00      	nop
 8013cb4:	58020000 	.word	0x58020000

08013cb8 <setLED_A>:
}


void setLED_A(uint8_t onOff)
{
	if (onOff)
 8013cb8:	b920      	cbnz	r0, 8013cc4 <setLED_A+0xc>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8013cba:	4602      	mov	r2, r0
 8013cbc:	2140      	movs	r1, #64	; 0x40
 8013cbe:	4804      	ldr	r0, [pc, #16]	; (8013cd0 <setLED_A+0x18>)
 8013cc0:	f7f1 bec6 	b.w	8005a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8013cc4:	2201      	movs	r2, #1
 8013cc6:	2140      	movs	r1, #64	; 0x40
 8013cc8:	4801      	ldr	r0, [pc, #4]	; (8013cd0 <setLED_A+0x18>)
 8013cca:	f7f1 bec1 	b.w	8005a50 <HAL_GPIO_WritePin>
 8013cce:	bf00      	nop
 8013cd0:	58020800 	.word	0x58020800

08013cd4 <setLED_B>:
	}
}

void setLED_B(uint8_t onOff)
{
	if (onOff)
 8013cd4:	b920      	cbnz	r0, 8013ce0 <setLED_B+0xc>
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8013cd6:	4602      	mov	r2, r0
 8013cd8:	2180      	movs	r1, #128	; 0x80
 8013cda:	4804      	ldr	r0, [pc, #16]	; (8013cec <setLED_B+0x18>)
 8013cdc:	f7f1 beb8 	b.w	8005a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);
 8013ce0:	2201      	movs	r2, #1
 8013ce2:	2180      	movs	r1, #128	; 0x80
 8013ce4:	4801      	ldr	r0, [pc, #4]	; (8013cec <setLED_B+0x18>)
 8013ce6:	f7f1 beb3 	b.w	8005a50 <HAL_GPIO_WritePin>
 8013cea:	bf00      	nop
 8013cec:	58021800 	.word	0x58021800

08013cf0 <setLED_C>:
	}
}

void setLED_C(uint8_t onOff)
{
	if (onOff)
 8013cf0:	b928      	cbnz	r0, 8013cfe <setLED_C+0xe>
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8013cf2:	4602      	mov	r2, r0
 8013cf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013cf8:	4804      	ldr	r0, [pc, #16]	; (8013d0c <setLED_C+0x1c>)
 8013cfa:	f7f1 bea9 	b.w	8005a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
 8013cfe:	2201      	movs	r2, #1
 8013d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013d04:	4801      	ldr	r0, [pc, #4]	; (8013d0c <setLED_C+0x1c>)
 8013d06:	f7f1 bea3 	b.w	8005a50 <HAL_GPIO_WritePin>
 8013d0a:	bf00      	nop
 8013d0c:	58021800 	.word	0x58021800

08013d10 <setLED_leftout_clip>:
	}
}

void setLED_leftout_clip(uint8_t onOff)
{
	if (onOff)
 8013d10:	b920      	cbnz	r0, 8013d1c <setLED_leftout_clip+0xc>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8013d12:	4602      	mov	r2, r0
 8013d14:	2110      	movs	r1, #16
 8013d16:	4804      	ldr	r0, [pc, #16]	; (8013d28 <setLED_leftout_clip+0x18>)
 8013d18:	f7f1 be9a 	b.w	8005a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8013d1c:	2201      	movs	r2, #1
 8013d1e:	2110      	movs	r1, #16
 8013d20:	4801      	ldr	r0, [pc, #4]	; (8013d28 <setLED_leftout_clip+0x18>)
 8013d22:	f7f1 be95 	b.w	8005a50 <HAL_GPIO_WritePin>
 8013d26:	bf00      	nop
 8013d28:	58020000 	.word	0x58020000

08013d2c <setLED_rightout_clip>:
	}
}

void setLED_rightout_clip(uint8_t onOff)
{
	if (onOff)
 8013d2c:	b920      	cbnz	r0, 8013d38 <setLED_rightout_clip+0xc>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8013d2e:	4602      	mov	r2, r0
 8013d30:	2140      	movs	r1, #64	; 0x40
 8013d32:	4804      	ldr	r0, [pc, #16]	; (8013d44 <setLED_rightout_clip+0x18>)
 8013d34:	f7f1 be8c 	b.w	8005a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8013d38:	2201      	movs	r2, #1
 8013d3a:	2140      	movs	r1, #64	; 0x40
 8013d3c:	4801      	ldr	r0, [pc, #4]	; (8013d44 <setLED_rightout_clip+0x18>)
 8013d3e:	f7f1 be87 	b.w	8005a50 <HAL_GPIO_WritePin>
 8013d42:	bf00      	nop
 8013d44:	58020000 	.word	0x58020000

08013d48 <setLED_leftin_clip>:
	}
}

void setLED_leftin_clip(uint8_t onOff)
{
	if (onOff)
 8013d48:	b920      	cbnz	r0, 8013d54 <setLED_leftin_clip+0xc>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8013d4a:	4602      	mov	r2, r0
 8013d4c:	2110      	movs	r1, #16
 8013d4e:	4804      	ldr	r0, [pc, #16]	; (8013d60 <setLED_leftin_clip+0x18>)
 8013d50:	f7f1 be7e 	b.w	8005a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8013d54:	2201      	movs	r2, #1
 8013d56:	2110      	movs	r1, #16
 8013d58:	4801      	ldr	r0, [pc, #4]	; (8013d60 <setLED_leftin_clip+0x18>)
 8013d5a:	f7f1 be79 	b.w	8005a50 <HAL_GPIO_WritePin>
 8013d5e:	bf00      	nop
 8013d60:	58020800 	.word	0x58020800

08013d64 <setLED_rightin_clip>:
	}
}

void setLED_rightin_clip(uint8_t onOff)
{
	if (onOff)
 8013d64:	b920      	cbnz	r0, 8013d70 <setLED_rightin_clip+0xc>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8013d66:	4602      	mov	r2, r0
 8013d68:	2101      	movs	r1, #1
 8013d6a:	4804      	ldr	r0, [pc, #16]	; (8013d7c <setLED_rightin_clip+0x18>)
 8013d6c:	f7f1 be70 	b.w	8005a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8013d70:	2201      	movs	r2, #1
 8013d72:	4802      	ldr	r0, [pc, #8]	; (8013d7c <setLED_rightin_clip+0x18>)
 8013d74:	4611      	mov	r1, r2
 8013d76:	f7f1 be6b 	b.w	8005a50 <HAL_GPIO_WritePin>
 8013d7a:	bf00      	nop
 8013d7c:	58020400 	.word	0x58020400

08013d80 <OLED_writePreset>:
	}
//	OLED_draw();
}

void OLED_writePreset()
{
 8013d80:	b5f0      	push	{r4, r5, r6, r7, lr}
	GFXsetFont(&theGFX, &EuphemiaCAS8pt7b);
 8013d82:	4935      	ldr	r1, [pc, #212]	; (8013e58 <OLED_writePreset+0xd8>)
{
 8013d84:	b089      	sub	sp, #36	; 0x24
	GFXsetFont(&theGFX, &EuphemiaCAS8pt7b);
 8013d86:	4835      	ldr	r0, [pc, #212]	; (8013e5c <OLED_writePreset+0xdc>)
}


void OLEDclear()
{
	GFXfillRect(&theGFX, 0, 0, 128, 32, 0);
 8013d88:	2600      	movs	r6, #0
	GFXsetFont(&theGFX, &EuphemiaCAS8pt7b);
 8013d8a:	f7ff f87b 	bl	8012e84 <GFXsetFont>
	GFXfillRect(&theGFX, 0, 0, 128, 32, 0);
 8013d8e:	2320      	movs	r3, #32
	itoa((currentPreset+1), tempString, 10);
 8013d90:	4f33      	ldr	r7, [pc, #204]	; (8013e60 <OLED_writePreset+0xe0>)
	GFXfillRect(&theGFX, 0, 0, 128, 32, 0);
 8013d92:	4632      	mov	r2, r6
 8013d94:	4631      	mov	r1, r6
 8013d96:	9300      	str	r3, [sp, #0]
 8013d98:	4830      	ldr	r0, [pc, #192]	; (8013e5c <OLED_writePreset+0xdc>)
 8013d9a:	2380      	movs	r3, #128	; 0x80
 8013d9c:	9601      	str	r6, [sp, #4]
	itoa((currentPreset+1), tempString, 10);
 8013d9e:	ac02      	add	r4, sp, #8
	GFXfillRect(&theGFX, 0, 0, 128, 32, 0);
 8013da0:	f7fe fc28 	bl	80125f4 <GFXfillRect>
	itoa((currentPreset+1), tempString, 10);
 8013da4:	7838      	ldrb	r0, [r7, #0]
 8013da6:	4621      	mov	r1, r4
 8013da8:	220a      	movs	r2, #10
 8013daa:	3001      	adds	r0, #1
 8013dac:	f013 fbb8 	bl	8027520 <itoa>
	strcat(tempString, ":");
 8013db0:	4620      	mov	r0, r4
 8013db2:	f7ec fa91 	bl	80002d8 <strlen>
 8013db6:	4a2b      	ldr	r2, [pc, #172]	; (8013e64 <OLED_writePreset+0xe4>)
 8013db8:	4603      	mov	r3, r0
	strcat(tempString, modeNames[currentPreset]);
 8013dba:	783d      	ldrb	r5, [r7, #0]
	strcat(tempString, ":");
 8013dbc:	8812      	ldrh	r2, [r2, #0]
 8013dbe:	3001      	adds	r0, #1
	strcat(tempString, modeNames[currentPreset]);
 8013dc0:	4929      	ldr	r1, [pc, #164]	; (8013e68 <OLED_writePreset+0xe8>)
	strcat(tempString, ":");
 8013dc2:	52e2      	strh	r2, [r4, r3]
	strcat(tempString, modeNames[currentPreset]);
 8013dc4:	4420      	add	r0, r4
 8013dc6:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8013dca:	f013 fbbe 	bl	802754a <stpcpy>
	int myLength = strlen(tempString);
 8013dce:	1b05      	subs	r5, r0, r4

void OLEDwriteString(char* myCharArray, uint8_t arrayLength, uint8_t startCursor, OLEDLine line)
{
	uint8_t cursorX = startCursor;
	uint8_t cursorY = 12 + (16 * (line%2));
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013dd0:	4631      	mov	r1, r6
 8013dd2:	220c      	movs	r2, #12

	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013dd4:	b2ed      	uxtb	r5, r5
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013dd6:	4821      	ldr	r0, [pc, #132]	; (8013e5c <OLED_writePreset+0xdc>)
 8013dd8:	f7ff f842 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013ddc:	2010      	movs	r0, #16
 8013dde:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8013de2:	9601      	str	r6, [sp, #4]
 8013de4:	9000      	str	r0, [sp, #0]
 8013de6:	4632      	mov	r2, r6
 8013de8:	4631      	mov	r1, r6
 8013dea:	009b      	lsls	r3, r3, #2
 8013dec:	481b      	ldr	r0, [pc, #108]	; (8013e5c <OLED_writePreset+0xdc>)
 8013dee:	f7fe fc01 	bl	80125f4 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 8013df2:	b145      	cbz	r5, 8013e06 <OLED_writePreset+0x86>
	{
		GFXwrite(&theGFX, myCharArray[i]);
 8013df4:	4e19      	ldr	r6, [pc, #100]	; (8013e5c <OLED_writePreset+0xdc>)
 8013df6:	4425      	add	r5, r4
 8013df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013dfc:	4630      	mov	r0, r6
 8013dfe:	f7fe ff7d 	bl	8012cfc <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8013e02:	42a5      	cmp	r5, r4
 8013e04:	d1f8      	bne.n	8013df8 <OLED_writePreset+0x78>
	GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 8013e06:	4919      	ldr	r1, [pc, #100]	; (8013e6c <OLED_writePreset+0xec>)
 8013e08:	4814      	ldr	r0, [pc, #80]	; (8013e5c <OLED_writePreset+0xdc>)
 8013e0a:	f7ff f83b 	bl	8012e84 <GFXsetFont>
	OLEDwriteString(modeNamesDetails[currentPreset], strlen(modeNamesDetails[currentPreset]), 0, SecondLine);
 8013e0e:	783a      	ldrb	r2, [r7, #0]
 8013e10:	4b17      	ldr	r3, [pc, #92]	; (8013e70 <OLED_writePreset+0xf0>)
 8013e12:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8013e16:	4620      	mov	r0, r4
 8013e18:	f7ec fa5e 	bl	80002d8 <strlen>
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013e1c:	221c      	movs	r2, #28
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013e1e:	b2c5      	uxtb	r5, r0
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013e20:	2100      	movs	r1, #0
 8013e22:	480e      	ldr	r0, [pc, #56]	; (8013e5c <OLED_writePreset+0xdc>)
 8013e24:	f7ff f81c 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013e28:	2220      	movs	r2, #32
 8013e2a:	2100      	movs	r1, #0
 8013e2c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8013e30:	9200      	str	r2, [sp, #0]
 8013e32:	2210      	movs	r2, #16
 8013e34:	9101      	str	r1, [sp, #4]
 8013e36:	009b      	lsls	r3, r3, #2
 8013e38:	4808      	ldr	r0, [pc, #32]	; (8013e5c <OLED_writePreset+0xdc>)
 8013e3a:	f7fe fbdb 	bl	80125f4 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 8013e3e:	b14d      	cbz	r5, 8013e54 <OLED_writePreset+0xd4>
 8013e40:	3c01      	subs	r4, #1
		GFXwrite(&theGFX, myCharArray[i]);
 8013e42:	4e06      	ldr	r6, [pc, #24]	; (8013e5c <OLED_writePreset+0xdc>)
 8013e44:	4425      	add	r5, r4
 8013e46:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013e4a:	4630      	mov	r0, r6
 8013e4c:	f7fe ff56 	bl	8012cfc <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8013e50:	42ac      	cmp	r4, r5
 8013e52:	d1f8      	bne.n	8013e46 <OLED_writePreset+0xc6>
}
 8013e54:	b009      	add	sp, #36	; 0x24
 8013e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e58:	0802ac0c 	.word	0x0802ac0c
 8013e5c:	20015670 	.word	0x20015670
 8013e60:	20000655 	.word	0x20000655
 8013e64:	0802b2a4 	.word	0x0802b2a4
 8013e68:	20018740 	.word	0x20018740
 8013e6c:	0802a658 	.word	0x0802a658
 8013e70:	200188f0 	.word	0x200188f0

08013e74 <OLED_init>:
{
 8013e74:	b530      	push	{r4, r5, lr}
	  ssd1306_begin(hi2c, SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
 8013e76:	2278      	movs	r2, #120	; 0x78
{
 8013e78:	b083      	sub	sp, #12
	  ssd1306_begin(hi2c, SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
 8013e7a:	2102      	movs	r1, #2
	buttonActionFunctions[Pitchshift] = UIPitchShiftButtons;
 8013e7c:	4d28      	ldr	r5, [pc, #160]	; (8013f20 <OLED_init+0xac>)
	  ssd1306_begin(hi2c, SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
 8013e7e:	f008 f82f 	bl	801bee0 <ssd1306_begin>
 8013e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e86:	2100      	movs	r1, #0
 8013e88:	4826      	ldr	r0, [pc, #152]	; (8013f24 <OLED_init+0xb0>)
 8013e8a:	f013 fb56 	bl	802753a <memset>
	buttonActionFunctions[Vocoder] = UIVocoderButtons;
 8013e8e:	4b26      	ldr	r3, [pc, #152]	; (8013f28 <OLED_init+0xb4>)
 8013e90:	4926      	ldr	r1, [pc, #152]	; (8013f2c <OLED_init+0xb8>)
	buttonActionFunctions[VocoderCh] = UIVocoderChButtons;
 8013e92:	4a27      	ldr	r2, [pc, #156]	; (8013f30 <OLED_init+0xbc>)
	buttonActionFunctions[Vocoder] = UIVocoderButtons;
 8013e94:	6019      	str	r1, [r3, #0]
	buttonActionFunctions[VocoderCh] = UIVocoderChButtons;
 8013e96:	605a      	str	r2, [r3, #4]
	buttonActionFunctions[AutotuneMono] = UINeartuneButtons;
 8013e98:	4826      	ldr	r0, [pc, #152]	; (8013f34 <OLED_init+0xc0>)
	buttonActionFunctions[AutotunePoly] = UIAutotuneButtons;
 8013e9a:	4927      	ldr	r1, [pc, #156]	; (8013f38 <OLED_init+0xc4>)
	buttonActionFunctions[SamplerButtonPress] = UISamplerBPButtons;
 8013e9c:	4a27      	ldr	r2, [pc, #156]	; (8013f3c <OLED_init+0xc8>)
	buttonActionFunctions[Pitchshift] = UIPitchShiftButtons;
 8013e9e:	609d      	str	r5, [r3, #8]
	buttonActionFunctions[AutotuneMono] = UINeartuneButtons;
 8013ea0:	60d8      	str	r0, [r3, #12]
	buttonActionFunctions[AutotunePoly] = UIAutotuneButtons;
 8013ea2:	6119      	str	r1, [r3, #16]
	buttonActionFunctions[SamplerButtonPress] = UISamplerBPButtons;
 8013ea4:	615a      	str	r2, [r3, #20]
	buttonActionFunctions[SamplerKeyboard] = UISamplerKButtons;
 8013ea6:	4d26      	ldr	r5, [pc, #152]	; (8013f40 <OLED_init+0xcc>)
	buttonActionFunctions[SamplerAutoGrab] = UISamplerAutoButtons;
 8013ea8:	4826      	ldr	r0, [pc, #152]	; (8013f44 <OLED_init+0xd0>)
	buttonActionFunctions[Distortion] = UIDistortionButtons;
 8013eaa:	4927      	ldr	r1, [pc, #156]	; (8013f48 <OLED_init+0xd4>)
	buttonActionFunctions[Wavefolder] = UIWaveFolderButtons;
 8013eac:	4a27      	ldr	r2, [pc, #156]	; (8013f4c <OLED_init+0xd8>)
	buttonActionFunctions[SamplerKeyboard] = UISamplerKButtons;
 8013eae:	619d      	str	r5, [r3, #24]
	buttonActionFunctions[SamplerAutoGrab] = UISamplerAutoButtons;
 8013eb0:	61d8      	str	r0, [r3, #28]
	buttonActionFunctions[Distortion] = UIDistortionButtons;
 8013eb2:	6219      	str	r1, [r3, #32]
	buttonActionFunctions[Wavefolder] = UIWaveFolderButtons;
 8013eb4:	625a      	str	r2, [r3, #36]	; 0x24
	buttonActionFunctions[BitCrusher] = UIBitcrusherButtons;
 8013eb6:	4d26      	ldr	r5, [pc, #152]	; (8013f50 <OLED_init+0xdc>)
	buttonActionFunctions[Delay] = UIDelayButtons;
 8013eb8:	4826      	ldr	r0, [pc, #152]	; (8013f54 <OLED_init+0xe0>)
	buttonActionFunctions[Reverb] = UIReverbButtons;
 8013eba:	4927      	ldr	r1, [pc, #156]	; (8013f58 <OLED_init+0xe4>)
	buttonActionFunctions[Reverb2] = UIReverb2Buttons;
 8013ebc:	4a27      	ldr	r2, [pc, #156]	; (8013f5c <OLED_init+0xe8>)
	buttonActionFunctions[BitCrusher] = UIBitcrusherButtons;
 8013ebe:	629d      	str	r5, [r3, #40]	; 0x28
	buttonActionFunctions[Delay] = UIDelayButtons;
 8013ec0:	62d8      	str	r0, [r3, #44]	; 0x2c
	buttonActionFunctions[Reverb] = UIReverbButtons;
 8013ec2:	6319      	str	r1, [r3, #48]	; 0x30
	buttonActionFunctions[Reverb2] = UIReverb2Buttons;
 8013ec4:	635a      	str	r2, [r3, #52]	; 0x34
	  GFXinit(&theGFX, 128, 32);
 8013ec6:	4c26      	ldr	r4, [pc, #152]	; (8013f60 <OLED_init+0xec>)
	buttonActionFunctions[LivingStringSynth] = UILivingStringSynthButtons;
 8013ec8:	4826      	ldr	r0, [pc, #152]	; (8013f64 <OLED_init+0xf0>)
	buttonActionFunctions[ClassicSynth] = UIClassicSynthButtons;
 8013eca:	4927      	ldr	r1, [pc, #156]	; (8013f68 <OLED_init+0xf4>)
	buttonActionFunctions[Rhodes] = UIRhodesButtons;
 8013ecc:	4a27      	ldr	r2, [pc, #156]	; (8013f6c <OLED_init+0xf8>)
	buttonActionFunctions[LivingString] = UILivingStringButtons;
 8013ece:	4d28      	ldr	r5, [pc, #160]	; (8013f70 <OLED_init+0xfc>)
	buttonActionFunctions[Rhodes] = UIRhodesButtons;
 8013ed0:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40
	buttonActionFunctions[LivingStringSynth] = UILivingStringSynthButtons;
 8013ed4:	e9c3 500e 	strd	r5, r0, [r3, #56]	; 0x38
	  initModeNames();
 8013ed8:	f008 fcb8 	bl	801c84c <initModeNames>
	  GFXinit(&theGFX, 128, 32);
 8013edc:	4620      	mov	r0, r4
 8013ede:	2220      	movs	r2, #32
 8013ee0:	2180      	movs	r1, #128	; 0x80
 8013ee2:	f7fe fa6b 	bl	80123bc <GFXinit>
	  GFXsetFont(&theGFX, &EuphemiaCAS8pt7b); //this one is elegant but definitely not monospaced can fit 9 Ms
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	4922      	ldr	r1, [pc, #136]	; (8013f74 <OLED_init+0x100>)
 8013eea:	f7fe ffcb 	bl	8012e84 <GFXsetFont>
	  GFXsetTextColor(&theGFX, 1, 0);
 8013eee:	4620      	mov	r0, r4
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	2101      	movs	r1, #1
 8013ef4:	f7fe ffc2 	bl	8012e7c <GFXsetTextColor>
	  GFXsetTextSize(&theGFX, 1);
 8013ef8:	4620      	mov	r0, r4
 8013efa:	2101      	movs	r1, #1
 8013efc:	f7fe ffb8 	bl	8012e70 <GFXsetTextSize>
	GFXfillRect(&theGFX, 0, 0, 128, 32, 0);
 8013f00:	2200      	movs	r2, #0
 8013f02:	2320      	movs	r3, #32
 8013f04:	4620      	mov	r0, r4
 8013f06:	4611      	mov	r1, r2
 8013f08:	9201      	str	r2, [sp, #4]
 8013f0a:	9300      	str	r3, [sp, #0]
 8013f0c:	2380      	movs	r3, #128	; 0x80
 8013f0e:	f7fe fb71 	bl	80125f4 <GFXfillRect>
	  OLED_writePreset();
 8013f12:	f7ff ff35 	bl	8013d80 <OLED_writePreset>
}
 8013f16:	b003      	add	sp, #12
 8013f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	ssd1306_display_full_buffer();
 8013f1c:	f008 b93e 	b.w	801c19c <ssd1306_display_full_buffer>
 8013f20:	0801db91 	.word	0x0801db91
 8013f24:	20018464 	.word	0x20018464
 8013f28:	20019078 	.word	0x20019078
 8013f2c:	0801da89 	.word	0x0801da89
 8013f30:	0801db0d 	.word	0x0801db0d
 8013f34:	0801db99 	.word	0x0801db99
 8013f38:	0801dbf5 	.word	0x0801dbf5
 8013f3c:	0801dbfd 	.word	0x0801dbfd
 8013f40:	0801dced 	.word	0x0801dced
 8013f44:	0801dd81 	.word	0x0801dd81
 8013f48:	0801de05 	.word	0x0801de05
 8013f4c:	0801de3d 	.word	0x0801de3d
 8013f50:	0801de75 	.word	0x0801de75
 8013f54:	0801dead 	.word	0x0801dead
 8013f58:	0801df09 	.word	0x0801df09
 8013f5c:	0801df65 	.word	0x0801df65
 8013f60:	20015670 	.word	0x20015670
 8013f64:	0801e021 	.word	0x0801e021
 8013f68:	0801e0a5 	.word	0x0801e0a5
 8013f6c:	0801e0f1 	.word	0x0801e0f1
 8013f70:	0801df9d 	.word	0x0801df9d
 8013f74:	0802ac0c 	.word	0x0802ac0c

08013f78 <OLED_writeEditScreen>:
{
 8013f78:	b570      	push	{r4, r5, r6, lr}
	GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 8013f7a:	4921      	ldr	r1, [pc, #132]	; (8014000 <OLED_writeEditScreen+0x88>)
{
 8013f7c:	b082      	sub	sp, #8
	GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 8013f7e:	4821      	ldr	r0, [pc, #132]	; (8014004 <OLED_writeEditScreen+0x8c>)
	GFXfillRect(&theGFX, 0, 0, 128, 32, 0);
 8013f80:	2500      	movs	r5, #0
	GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 8013f82:	f7fe ff7f 	bl	8012e84 <GFXsetFont>
	GFXfillRect(&theGFX, 0, 0, 128, 32, 0);
 8013f86:	2320      	movs	r3, #32
 8013f88:	462a      	mov	r2, r5
 8013f8a:	4629      	mov	r1, r5
 8013f8c:	9501      	str	r5, [sp, #4]
 8013f8e:	9300      	str	r3, [sp, #0]
 8013f90:	2380      	movs	r3, #128	; 0x80
 8013f92:	481c      	ldr	r0, [pc, #112]	; (8014004 <OLED_writeEditScreen+0x8c>)
 8013f94:	f7fe fb2e 	bl	80125f4 <GFXfillRect>
 8013f98:	4c1b      	ldr	r4, [pc, #108]	; (8014008 <OLED_writeEditScreen+0x90>)
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013f9a:	4629      	mov	r1, r5
 8013f9c:	220c      	movs	r2, #12
 8013f9e:	4819      	ldr	r0, [pc, #100]	; (8014004 <OLED_writeEditScreen+0x8c>)
 8013fa0:	f104 060f 	add.w	r6, r4, #15
 8013fa4:	f7fe ff5c 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013fa8:	2310      	movs	r3, #16
 8013faa:	9501      	str	r5, [sp, #4]
 8013fac:	462a      	mov	r2, r5
 8013fae:	4629      	mov	r1, r5
		GFXwrite(&theGFX, myCharArray[i]);
 8013fb0:	4d14      	ldr	r5, [pc, #80]	; (8014004 <OLED_writeEditScreen+0x8c>)
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013fb2:	9300      	str	r3, [sp, #0]
 8013fb4:	23b4      	movs	r3, #180	; 0xb4
 8013fb6:	4813      	ldr	r0, [pc, #76]	; (8014004 <OLED_writeEditScreen+0x8c>)
 8013fb8:	f7fe fb1c 	bl	80125f4 <GFXfillRect>
		GFXwrite(&theGFX, myCharArray[i]);
 8013fbc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	f7fe fe9b 	bl	8012cfc <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8013fc6:	42a6      	cmp	r6, r4
 8013fc8:	d1f8      	bne.n	8013fbc <OLED_writeEditScreen+0x44>
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013fca:	221c      	movs	r2, #28
 8013fcc:	2100      	movs	r1, #0
 8013fce:	480d      	ldr	r0, [pc, #52]	; (8014004 <OLED_writeEditScreen+0x8c>)
 8013fd0:	4c0e      	ldr	r4, [pc, #56]	; (801400c <OLED_writeEditScreen+0x94>)
 8013fd2:	f7fe ff45 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013fd6:	2100      	movs	r1, #0
 8013fd8:	2220      	movs	r2, #32
 8013fda:	f104 0610 	add.w	r6, r4, #16
		GFXwrite(&theGFX, myCharArray[i]);
 8013fde:	4d09      	ldr	r5, [pc, #36]	; (8014004 <OLED_writeEditScreen+0x8c>)
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013fe0:	23c0      	movs	r3, #192	; 0xc0
 8013fe2:	4808      	ldr	r0, [pc, #32]	; (8014004 <OLED_writeEditScreen+0x8c>)
 8013fe4:	e9cd 2100 	strd	r2, r1, [sp]
 8013fe8:	2210      	movs	r2, #16
 8013fea:	f7fe fb03 	bl	80125f4 <GFXfillRect>
		GFXwrite(&theGFX, myCharArray[i]);
 8013fee:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013ff2:	4628      	mov	r0, r5
 8013ff4:	f7fe fe82 	bl	8012cfc <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8013ff8:	42b4      	cmp	r4, r6
 8013ffa:	d1f8      	bne.n	8013fee <OLED_writeEditScreen+0x76>
}
 8013ffc:	b002      	add	sp, #8
 8013ffe:	bd70      	pop	{r4, r5, r6, pc}
 8014000:	0802a658 	.word	0x0802a658
 8014004:	20015670 	.word	0x20015670
 8014008:	0802b27f 	.word	0x0802b27f
 801400c:	0802b28f 	.word	0x0802b28f

08014010 <OLED_writeTuning>:
{
 8014010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8014014:	2600      	movs	r6, #0
{
 8014016:	b083      	sub	sp, #12
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8014018:	2710      	movs	r7, #16
	GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 801401a:	4935      	ldr	r1, [pc, #212]	; (80140f0 <OLED_writeTuning+0xe0>)
 801401c:	4835      	ldr	r0, [pc, #212]	; (80140f4 <OLED_writeTuning+0xe4>)
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 801401e:	f04f 0920 	mov.w	r9, #32
	GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 8014022:	f7fe ff2f 	bl	8012e84 <GFXsetFont>
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8014026:	2380      	movs	r3, #128	; 0x80
 8014028:	4631      	mov	r1, r6
 801402a:	463a      	mov	r2, r7
 801402c:	4831      	ldr	r0, [pc, #196]	; (80140f4 <OLED_writeTuning+0xe4>)
 801402e:	9601      	str	r6, [sp, #4]
 8014030:	9700      	str	r7, [sp, #0]
 8014032:	f7fe fadf 	bl	80125f4 <GFXfillRect>
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014036:	4631      	mov	r1, r6
 8014038:	221c      	movs	r2, #28
 801403a:	482e      	ldr	r0, [pc, #184]	; (80140f4 <OLED_writeTuning+0xe4>)
 801403c:	f7fe ff10 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8014040:	2318      	movs	r3, #24
 8014042:	463a      	mov	r2, r7
 8014044:	4631      	mov	r1, r6
 8014046:	482b      	ldr	r0, [pc, #172]	; (80140f4 <OLED_writeTuning+0xe4>)
 8014048:	9601      	str	r6, [sp, #4]
 801404a:	f8cd 9000 	str.w	r9, [sp]
 801404e:	f7fe fad1 	bl	80125f4 <GFXfillRect>
	OLEDwriteInt(currentTuning, 2, 12, SecondLine);
 8014052:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8014100 <OLED_writeTuning+0xf0>
		GFXwrite(&theGFX, myCharArray[i]);
 8014056:	2154      	movs	r1, #84	; 0x54
 8014058:	4826      	ldr	r0, [pc, #152]	; (80140f4 <OLED_writeTuning+0xe4>)
	}
}

void OLEDwriteInt(uint32_t myNumber, uint8_t numDigits, uint8_t startCursor, OLEDLine line)
{
	int len = OLEDparseInt(oled_buffer, myNumber, numDigits);
 801405a:	4c27      	ldr	r4, [pc, #156]	; (80140f8 <OLED_writeTuning+0xe8>)
		GFXwrite(&theGFX, myCharArray[i]);
 801405c:	f7fe fe4e 	bl	8012cfc <GFXwrite>
 8014060:	4631      	mov	r1, r6
 8014062:	4824      	ldr	r0, [pc, #144]	; (80140f4 <OLED_writeTuning+0xe4>)
 8014064:	f7fe fe4a 	bl	8012cfc <GFXwrite>
	int len = OLEDparseInt(oled_buffer, myNumber, numDigits);
 8014068:	f8d8 1000 	ldr.w	r1, [r8]
 801406c:	2202      	movs	r2, #2
 801406e:	4620      	mov	r0, r4
 8014070:	f7fe ff1a 	bl	8012ea8 <OLEDparseInt>
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014074:	221c      	movs	r2, #28
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8014076:	b2c5      	uxtb	r5, r0
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014078:	210c      	movs	r1, #12
 801407a:	481e      	ldr	r0, [pc, #120]	; (80140f4 <OLED_writeTuning+0xe4>)
 801407c:	f7fe fef0 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8014080:	f8cd 9000 	str.w	r9, [sp]
 8014084:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8014088:	9601      	str	r6, [sp, #4]
 801408a:	463a      	mov	r2, r7
 801408c:	210c      	movs	r1, #12
 801408e:	009b      	lsls	r3, r3, #2
 8014090:	4818      	ldr	r0, [pc, #96]	; (80140f4 <OLED_writeTuning+0xe4>)
 8014092:	f7fe faaf 	bl	80125f4 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 8014096:	b145      	cbz	r5, 80140aa <OLED_writeTuning+0x9a>
		GFXwrite(&theGFX, myCharArray[i]);
 8014098:	4e16      	ldr	r6, [pc, #88]	; (80140f4 <OLED_writeTuning+0xe4>)
 801409a:	4425      	add	r5, r4
 801409c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140a0:	4630      	mov	r0, r6
 80140a2:	f7fe fe2b 	bl	8012cfc <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 80140a6:	42ac      	cmp	r4, r5
 80140a8:	d1f8      	bne.n	801409c <OLED_writeTuning+0x8c>
	OLEDwriteString(tuningNames[currentTuning], 12, 36, SecondLine);
 80140aa:	f8d8 3000 	ldr.w	r3, [r8]
	GFXsetCursor(&theGFX, cursorX, cursorY);
 80140ae:	221c      	movs	r2, #28
 80140b0:	4810      	ldr	r0, [pc, #64]	; (80140f4 <OLED_writeTuning+0xe4>)
 80140b2:	2124      	movs	r1, #36	; 0x24
	OLEDwriteString(tuningNames[currentTuning], 12, 36, SecondLine);
 80140b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80140b8:	4d10      	ldr	r5, [pc, #64]	; (80140fc <OLED_writeTuning+0xec>)
		GFXwrite(&theGFX, myCharArray[i]);
 80140ba:	4606      	mov	r6, r0
	OLEDwriteString(tuningNames[currentTuning], 12, 36, SecondLine);
 80140bc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	GFXsetCursor(&theGFX, cursorX, cursorY);
 80140c0:	f7fe fece 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 80140c4:	2200      	movs	r2, #0
 80140c6:	2320      	movs	r3, #32
 80140c8:	2124      	movs	r1, #36	; 0x24
 80140ca:	4630      	mov	r0, r6
 80140cc:	1e6c      	subs	r4, r5, #1
 80140ce:	350b      	adds	r5, #11
 80140d0:	e9cd 3200 	strd	r3, r2, [sp]
 80140d4:	2390      	movs	r3, #144	; 0x90
 80140d6:	2210      	movs	r2, #16
 80140d8:	f7fe fa8c 	bl	80125f4 <GFXfillRect>
		GFXwrite(&theGFX, myCharArray[i]);
 80140dc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80140e0:	4630      	mov	r0, r6
 80140e2:	f7fe fe0b 	bl	8012cfc <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 80140e6:	42a5      	cmp	r5, r4
 80140e8:	d1f8      	bne.n	80140dc <OLED_writeTuning+0xcc>
}
 80140ea:	b003      	add	sp, #12
 80140ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140f0:	0802a658 	.word	0x0802a658
 80140f4:	20015670 	.word	0x20015670
 80140f8:	20015650 	.word	0x20015650
 80140fc:	0802b310 	.word	0x0802b310
 8014100:	20000650 	.word	0x20000650

08014104 <OLED_draw>:
	ssd1306_display_full_buffer();
 8014104:	f008 b84a 	b.w	801c19c <ssd1306_display_full_buffer>

08014108 <OLEDclearLine>:
{
 8014108:	4602      	mov	r2, r0
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 801410a:	2100      	movs	r1, #0
 801410c:	2380      	movs	r3, #128	; 0x80
 801410e:	4807      	ldr	r0, [pc, #28]	; (801412c <OLEDclearLine+0x24>)
{
 8014110:	b510      	push	{r4, lr}
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8014112:	0854      	lsrs	r4, r2, #1
 8014114:	f002 0201 	and.w	r2, r2, #1
{
 8014118:	b082      	sub	sp, #8
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 801411a:	3401      	adds	r4, #1
 801411c:	0112      	lsls	r2, r2, #4
 801411e:	9101      	str	r1, [sp, #4]
 8014120:	0124      	lsls	r4, r4, #4
 8014122:	9400      	str	r4, [sp, #0]
 8014124:	f7fe fa66 	bl	80125f4 <GFXfillRect>
}
 8014128:	b002      	add	sp, #8
 801412a:	bd10      	pop	{r4, pc}
 801412c:	20015670 	.word	0x20015670

08014130 <OLEDwriteString>:
{
 8014130:	b5f0      	push	{r4, r5, r6, r7, lr}
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014132:	4617      	mov	r7, r2
	uint8_t cursorY = 12 + (16 * (line%2));
 8014134:	f003 0201 	and.w	r2, r3, #1
{
 8014138:	461e      	mov	r6, r3
 801413a:	b083      	sub	sp, #12
	uint8_t cursorY = 12 + (16 * (line%2));
 801413c:	0112      	lsls	r2, r2, #4
{
 801413e:	460d      	mov	r5, r1
 8014140:	4604      	mov	r4, r0
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014142:	4639      	mov	r1, r7
 8014144:	480e      	ldr	r0, [pc, #56]	; (8014180 <OLEDwriteString+0x50>)
 8014146:	320c      	adds	r2, #12
 8014148:	f7fe fe8a 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 801414c:	1c70      	adds	r0, r6, #1
 801414e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8014152:	f04f 0c00 	mov.w	ip, #0
 8014156:	0100      	lsls	r0, r0, #4
 8014158:	4639      	mov	r1, r7
 801415a:	0132      	lsls	r2, r6, #4
 801415c:	009b      	lsls	r3, r3, #2
 801415e:	e9cd 0c00 	strd	r0, ip, [sp]
 8014162:	4807      	ldr	r0, [pc, #28]	; (8014180 <OLEDwriteString+0x50>)
 8014164:	f7fe fa46 	bl	80125f4 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 8014168:	b145      	cbz	r5, 801417c <OLEDwriteString+0x4c>
		GFXwrite(&theGFX, myCharArray[i]);
 801416a:	4e05      	ldr	r6, [pc, #20]	; (8014180 <OLEDwriteString+0x50>)
 801416c:	4425      	add	r5, r4
 801416e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014172:	4630      	mov	r0, r6
 8014174:	f7fe fdc2 	bl	8012cfc <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8014178:	42a5      	cmp	r5, r4
 801417a:	d1f8      	bne.n	801416e <OLEDwriteString+0x3e>
}
 801417c:	b003      	add	sp, #12
 801417e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014180:	20015670 	.word	0x20015670

08014184 <OLEDwriteInt>:
{
 8014184:	b5f0      	push	{r4, r5, r6, r7, lr}
	int len = OLEDparseInt(oled_buffer, myNumber, numDigits);
 8014186:	4c16      	ldr	r4, [pc, #88]	; (80141e0 <OLEDwriteInt+0x5c>)
{
 8014188:	461f      	mov	r7, r3
 801418a:	b083      	sub	sp, #12
 801418c:	4616      	mov	r6, r2
	int len = OLEDparseInt(oled_buffer, myNumber, numDigits);
 801418e:	460a      	mov	r2, r1
 8014190:	4601      	mov	r1, r0
 8014192:	4620      	mov	r0, r4
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014194:	b236      	sxth	r6, r6
	int len = OLEDparseInt(oled_buffer, myNumber, numDigits);
 8014196:	f7fe fe87 	bl	8012ea8 <OLEDparseInt>
	uint8_t cursorY = 12 + (16 * (line%2));
 801419a:	f007 0201 	and.w	r2, r7, #1
	int len = OLEDparseInt(oled_buffer, myNumber, numDigits);
 801419e:	4605      	mov	r5, r0
	GFXsetCursor(&theGFX, cursorX, cursorY);
 80141a0:	4631      	mov	r1, r6
	uint8_t cursorY = 12 + (16 * (line%2));
 80141a2:	0112      	lsls	r2, r2, #4
	GFXsetCursor(&theGFX, cursorX, cursorY);
 80141a4:	480f      	ldr	r0, [pc, #60]	; (80141e4 <OLEDwriteInt+0x60>)
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 80141a6:	b2ed      	uxtb	r5, r5
	GFXsetCursor(&theGFX, cursorX, cursorY);
 80141a8:	320c      	adds	r2, #12
 80141aa:	f7fe fe59 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 80141ae:	1c7a      	adds	r2, r7, #1
 80141b0:	2000      	movs	r0, #0
 80141b2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80141b6:	0112      	lsls	r2, r2, #4
 80141b8:	4631      	mov	r1, r6
 80141ba:	009b      	lsls	r3, r3, #2
 80141bc:	e9cd 2000 	strd	r2, r0, [sp]
 80141c0:	013a      	lsls	r2, r7, #4
 80141c2:	4808      	ldr	r0, [pc, #32]	; (80141e4 <OLEDwriteInt+0x60>)
 80141c4:	f7fe fa16 	bl	80125f4 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 80141c8:	b145      	cbz	r5, 80141dc <OLEDwriteInt+0x58>
		GFXwrite(&theGFX, myCharArray[i]);
 80141ca:	4e06      	ldr	r6, [pc, #24]	; (80141e4 <OLEDwriteInt+0x60>)
 80141cc:	4425      	add	r5, r4
 80141ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141d2:	4630      	mov	r0, r6
 80141d4:	f7fe fd92 	bl	8012cfc <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 80141d8:	42a5      	cmp	r5, r4
 80141da:	d1f8      	bne.n	80141ce <OLEDwriteInt+0x4a>

	OLEDwriteString(oled_buffer, len, startCursor, line);
}
 80141dc:	b003      	add	sp, #12
 80141de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141e0:	20015650 	.word	0x20015650
 80141e4:	20015670 	.word	0x20015670

080141e8 <OLEDwritePitch>:

	OLEDwriteLine(oled_buffer, len, line);
}

void OLEDwritePitch(float midi, uint8_t startCursor, OLEDLine line, uint8_t showCents)
{
 80141e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int len = OLEDparsePitch(oled_buffer, midi, showCents);
 80141ea:	4c16      	ldr	r4, [pc, #88]	; (8014244 <OLEDwritePitch+0x5c>)
{
 80141ec:	460f      	mov	r7, r1
 80141ee:	b083      	sub	sp, #12
	int len = OLEDparsePitch(oled_buffer, midi, showCents);
 80141f0:	4611      	mov	r1, r2
{
 80141f2:	4606      	mov	r6, r0
	int len = OLEDparsePitch(oled_buffer, midi, showCents);
 80141f4:	4620      	mov	r0, r4
 80141f6:	f7fe fe77 	bl	8012ee8 <OLEDparsePitch>
	uint8_t cursorY = 12 + (16 * (line%2));
 80141fa:	f007 0201 	and.w	r2, r7, #1
	GFXsetCursor(&theGFX, cursorX, cursorY);
 80141fe:	b236      	sxth	r6, r6
	int len = OLEDparsePitch(oled_buffer, midi, showCents);
 8014200:	4605      	mov	r5, r0
	uint8_t cursorY = 12 + (16 * (line%2));
 8014202:	0112      	lsls	r2, r2, #4
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014204:	4810      	ldr	r0, [pc, #64]	; (8014248 <OLEDwritePitch+0x60>)
 8014206:	4631      	mov	r1, r6
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8014208:	b2ed      	uxtb	r5, r5
	GFXsetCursor(&theGFX, cursorX, cursorY);
 801420a:	320c      	adds	r2, #12
 801420c:	f7fe fe28 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8014210:	1c7a      	adds	r2, r7, #1
 8014212:	2000      	movs	r0, #0
 8014214:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8014218:	0112      	lsls	r2, r2, #4
 801421a:	4631      	mov	r1, r6
 801421c:	009b      	lsls	r3, r3, #2
 801421e:	e9cd 2000 	strd	r2, r0, [sp]
 8014222:	013a      	lsls	r2, r7, #4
 8014224:	4808      	ldr	r0, [pc, #32]	; (8014248 <OLEDwritePitch+0x60>)
 8014226:	f7fe f9e5 	bl	80125f4 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 801422a:	b145      	cbz	r5, 801423e <OLEDwritePitch+0x56>
		GFXwrite(&theGFX, myCharArray[i]);
 801422c:	4e06      	ldr	r6, [pc, #24]	; (8014248 <OLEDwritePitch+0x60>)
 801422e:	4425      	add	r5, r4
 8014230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014234:	4630      	mov	r0, r6
 8014236:	f7fe fd61 	bl	8012cfc <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 801423a:	42a5      	cmp	r5, r4
 801423c:	d1f8      	bne.n	8014230 <OLEDwritePitch+0x48>

	OLEDwriteString(oled_buffer, len, startCursor, line);
}
 801423e:	b003      	add	sp, #12
 8014240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014242:	bf00      	nop
 8014244:	20015650 	.word	0x20015650
 8014248:	20015670 	.word	0x20015670

0801424c <OLEDwritePitchClass>:

void OLEDwritePitchClass(float midi, uint8_t startCursor, OLEDLine line)
{
 801424c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int len = OLEDparsePitchClass(oled_buffer, midi);
 801424e:	4c15      	ldr	r4, [pc, #84]	; (80142a4 <OLEDwritePitchClass+0x58>)
{
 8014250:	460f      	mov	r7, r1
 8014252:	b083      	sub	sp, #12
 8014254:	4606      	mov	r6, r0
	int len = OLEDparsePitchClass(oled_buffer, midi);
 8014256:	4620      	mov	r0, r4
 8014258:	f7fe fea8 	bl	8012fac <OLEDparsePitchClass>
	uint8_t cursorY = 12 + (16 * (line%2));
 801425c:	f007 0201 	and.w	r2, r7, #1
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014260:	b236      	sxth	r6, r6
	int len = OLEDparsePitchClass(oled_buffer, midi);
 8014262:	4605      	mov	r5, r0
	uint8_t cursorY = 12 + (16 * (line%2));
 8014264:	0112      	lsls	r2, r2, #4
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014266:	4810      	ldr	r0, [pc, #64]	; (80142a8 <OLEDwritePitchClass+0x5c>)
 8014268:	4631      	mov	r1, r6
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 801426a:	b2ed      	uxtb	r5, r5
	GFXsetCursor(&theGFX, cursorX, cursorY);
 801426c:	320c      	adds	r2, #12
 801426e:	f7fe fdf7 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8014272:	1c7a      	adds	r2, r7, #1
 8014274:	2000      	movs	r0, #0
 8014276:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801427a:	0112      	lsls	r2, r2, #4
 801427c:	4631      	mov	r1, r6
 801427e:	009b      	lsls	r3, r3, #2
 8014280:	e9cd 2000 	strd	r2, r0, [sp]
 8014284:	013a      	lsls	r2, r7, #4
 8014286:	4808      	ldr	r0, [pc, #32]	; (80142a8 <OLEDwritePitchClass+0x5c>)
 8014288:	f7fe f9b4 	bl	80125f4 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 801428c:	b145      	cbz	r5, 80142a0 <OLEDwritePitchClass+0x54>
		GFXwrite(&theGFX, myCharArray[i]);
 801428e:	4e06      	ldr	r6, [pc, #24]	; (80142a8 <OLEDwritePitchClass+0x5c>)
 8014290:	4425      	add	r5, r4
 8014292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014296:	4630      	mov	r0, r6
 8014298:	f7fe fd30 	bl	8012cfc <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 801429c:	42a5      	cmp	r5, r4
 801429e:	d1f8      	bne.n	8014292 <OLEDwritePitchClass+0x46>

	OLEDwriteString(oled_buffer, len, startCursor, line);
}
 80142a0:	b003      	add	sp, #12
 80142a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142a4:	20015650 	.word	0x20015650
 80142a8:	20015670 	.word	0x20015670

080142ac <OLEDwriteFloat>:
	OLEDwriteLine(oled_buffer, len, line);
}


void OLEDwriteFloat(float input, uint8_t startCursor, OLEDLine line)
{
 80142ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142ae:	ed2d 8b02 	vpush	{d8}
 80142b2:	b083      	sub	sp, #12
 80142b4:	4606      	mov	r6, r0
 80142b6:	460f      	mov	r7, r1
 80142b8:	eeb0 8a40 	vmov.f32	s16, s0
	int numDigits = 5;
	int numDecimal = 1;

	if (fastabsf(input)<1.0f)
 80142bc:	f00f ff86 	bl	80241cc <fastabsf>
 80142c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80142c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80142c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142cc:	d438      	bmi.n	8014340 <OLEDwriteFloat+0x94>
	{
		numDigits = 3;
		numDecimal = 2;
	}

	else if (fastabsf(input)<10.0f)
 80142ce:	eeb0 0a48 	vmov.f32	s0, s16
 80142d2:	f00f ff7b 	bl	80241cc <fastabsf>
 80142d6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80142da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80142de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e2:	d530      	bpl.n	8014346 <OLEDwriteFloat+0x9a>
 80142e4:	2202      	movs	r2, #2
 80142e6:	2104      	movs	r1, #4
	{
		numDigits = 8;
		numDecimal = 0;
	}

	int len = OLEDparseFixedFloat(oled_buffer, input, numDigits, numDecimal);
 80142e8:	4c41      	ldr	r4, [pc, #260]	; (80143f0 <OLEDwriteFloat+0x144>)
 80142ea:	eeb0 0a48 	vmov.f32	s0, s16
	GFXsetCursor(&theGFX, cursorX, cursorY);
 80142ee:	b236      	sxth	r6, r6
	int len = OLEDparseFixedFloat(oled_buffer, input, numDigits, numDecimal);
 80142f0:	4620      	mov	r0, r4
 80142f2:	f7fe fe89 	bl	8013008 <OLEDparseFixedFloat>
	uint8_t cursorY = 12 + (16 * (line%2));
 80142f6:	f007 0201 	and.w	r2, r7, #1
	int len = OLEDparseFixedFloat(oled_buffer, input, numDigits, numDecimal);
 80142fa:	4605      	mov	r5, r0
	GFXsetCursor(&theGFX, cursorX, cursorY);
 80142fc:	4631      	mov	r1, r6
	uint8_t cursorY = 12 + (16 * (line%2));
 80142fe:	0112      	lsls	r2, r2, #4
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014300:	483c      	ldr	r0, [pc, #240]	; (80143f4 <OLEDwriteFloat+0x148>)
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8014302:	b2ed      	uxtb	r5, r5
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014304:	320c      	adds	r2, #12
 8014306:	f7fe fdab 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 801430a:	1c7a      	adds	r2, r7, #1
 801430c:	2000      	movs	r0, #0
 801430e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8014312:	0112      	lsls	r2, r2, #4
 8014314:	4631      	mov	r1, r6
 8014316:	009b      	lsls	r3, r3, #2
 8014318:	e9cd 2000 	strd	r2, r0, [sp]
 801431c:	013a      	lsls	r2, r7, #4
 801431e:	4835      	ldr	r0, [pc, #212]	; (80143f4 <OLEDwriteFloat+0x148>)
 8014320:	f7fe f968 	bl	80125f4 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 8014324:	b145      	cbz	r5, 8014338 <OLEDwriteFloat+0x8c>
		GFXwrite(&theGFX, myCharArray[i]);
 8014326:	4e33      	ldr	r6, [pc, #204]	; (80143f4 <OLEDwriteFloat+0x148>)
 8014328:	4425      	add	r5, r4
 801432a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801432e:	4630      	mov	r0, r6
 8014330:	f7fe fce4 	bl	8012cfc <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8014334:	42ac      	cmp	r4, r5
 8014336:	d1f8      	bne.n	801432a <OLEDwriteFloat+0x7e>

	OLEDwriteString(oled_buffer, len, startCursor, line);
}
 8014338:	b003      	add	sp, #12
 801433a:	ecbd 8b02 	vpop	{d8}
 801433e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014340:	2202      	movs	r2, #2
 8014342:	2103      	movs	r1, #3
 8014344:	e7d0      	b.n	80142e8 <OLEDwriteFloat+0x3c>
	else if (fastabsf(input)<100.0f)
 8014346:	eeb0 0a48 	vmov.f32	s0, s16
 801434a:	f00f ff3f 	bl	80241cc <fastabsf>
 801434e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80143f8 <OLEDwriteFloat+0x14c>
 8014352:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801435a:	d502      	bpl.n	8014362 <OLEDwriteFloat+0xb6>
 801435c:	2202      	movs	r2, #2
 801435e:	2105      	movs	r1, #5
 8014360:	e7c2      	b.n	80142e8 <OLEDwriteFloat+0x3c>
	else if (fastabsf(input)<1000.0f)
 8014362:	eeb0 0a48 	vmov.f32	s0, s16
 8014366:	f00f ff31 	bl	80241cc <fastabsf>
 801436a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80143fc <OLEDwriteFloat+0x150>
 801436e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014376:	d502      	bpl.n	801437e <OLEDwriteFloat+0xd2>
 8014378:	2201      	movs	r2, #1
 801437a:	2105      	movs	r1, #5
 801437c:	e7b4      	b.n	80142e8 <OLEDwriteFloat+0x3c>
	else if (fastabsf(input)<10000.0f)
 801437e:	eeb0 0a48 	vmov.f32	s0, s16
 8014382:	f00f ff23 	bl	80241cc <fastabsf>
 8014386:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014400 <OLEDwriteFloat+0x154>
 801438a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014392:	d502      	bpl.n	801439a <OLEDwriteFloat+0xee>
 8014394:	2200      	movs	r2, #0
 8014396:	2105      	movs	r1, #5
 8014398:	e7a6      	b.n	80142e8 <OLEDwriteFloat+0x3c>
	else if (fastabsf(input)<100000.0f)
 801439a:	eeb0 0a48 	vmov.f32	s0, s16
 801439e:	f00f ff15 	bl	80241cc <fastabsf>
 80143a2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014404 <OLEDwriteFloat+0x158>
 80143a6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80143aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ae:	d502      	bpl.n	80143b6 <OLEDwriteFloat+0x10a>
 80143b0:	2200      	movs	r2, #0
 80143b2:	2106      	movs	r1, #6
 80143b4:	e798      	b.n	80142e8 <OLEDwriteFloat+0x3c>
	else if (fastabsf(input)<1000000.0f)
 80143b6:	eeb0 0a48 	vmov.f32	s0, s16
 80143ba:	f00f ff07 	bl	80241cc <fastabsf>
 80143be:	eddf 7a12 	vldr	s15, [pc, #72]	; 8014408 <OLEDwriteFloat+0x15c>
 80143c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80143c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ca:	d502      	bpl.n	80143d2 <OLEDwriteFloat+0x126>
 80143cc:	2200      	movs	r2, #0
 80143ce:	2107      	movs	r1, #7
 80143d0:	e78a      	b.n	80142e8 <OLEDwriteFloat+0x3c>
	else if (fastabsf(input)<10000000.0f)
 80143d2:	eeb0 0a48 	vmov.f32	s0, s16
 80143d6:	f00f fef9 	bl	80241cc <fastabsf>
 80143da:	eddf 7a0c 	vldr	s15, [pc, #48]	; 801440c <OLEDwriteFloat+0x160>
 80143de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80143e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143e6:	d5c7      	bpl.n	8014378 <OLEDwriteFloat+0xcc>
 80143e8:	2200      	movs	r2, #0
 80143ea:	2108      	movs	r1, #8
 80143ec:	e77c      	b.n	80142e8 <OLEDwriteFloat+0x3c>
 80143ee:	bf00      	nop
 80143f0:	20015650 	.word	0x20015650
 80143f4:	20015670 	.word	0x20015670
 80143f8:	42c80000 	.word	0x42c80000
 80143fc:	447a0000 	.word	0x447a0000
 8014400:	461c4000 	.word	0x461c4000
 8014404:	47c35000 	.word	0x47c35000
 8014408:	49742400 	.word	0x49742400
 801440c:	4b189680 	.word	0x4b189680

08014410 <OLED_writeKnobParameter.part.0>:
void OLED_writeKnobParameter(uint8_t whichKnob)
 8014410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		int len = strlen(knobParamNames[currentPreset][whichParam]);
 8014414:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8014548 <OLED_writeKnobParameter.part.0+0x138>
void OLED_writeKnobParameter(uint8_t whichKnob)
 8014418:	4606      	mov	r6, r0
		int whichParam = whichKnob + (knobPage * KNOB_PAGE_SIZE);
 801441a:	4f45      	ldr	r7, [pc, #276]	; (8014530 <OLED_writeKnobParameter.part.0+0x120>)
 801441c:	2405      	movs	r4, #5
		int len = strlen(knobParamNames[currentPreset][whichParam]);
 801441e:	f899 3000 	ldrb.w	r3, [r9]
		floatADCUI[whichKnob] = smoothedADC[whichKnob];
 8014422:	0080      	lsls	r0, r0, #2
 8014424:	4943      	ldr	r1, [pc, #268]	; (8014534 <OLED_writeKnobParameter.part.0+0x124>)
		int len = strlen(knobParamNames[currentPreset][whichParam]);
 8014426:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801442a:	f8df b120 	ldr.w	fp, [pc, #288]	; 801454c <OLED_writeKnobParameter.part.0+0x13c>
		floatADCUI[whichKnob] = smoothedADC[whichKnob];
 801442e:	4401      	add	r1, r0
		int len = strlen(knobParamNames[currentPreset][whichParam]);
 8014430:	eb03 0383 	add.w	r3, r3, r3, lsl #2
void OLED_writeKnobParameter(uint8_t whichKnob)
 8014434:	ed2d 8b02 	vpush	{d8}
		int whichParam = whichKnob + (knobPage * KNOB_PAGE_SIZE);
 8014438:	783a      	ldrb	r2, [r7, #0]
void OLED_writeKnobParameter(uint8_t whichKnob)
 801443a:	b083      	sub	sp, #12
		floatADCUI[whichKnob] = smoothedADC[whichKnob];
 801443c:	6809      	ldr	r1, [r1, #0]
		int whichParam = whichKnob + (knobPage * KNOB_PAGE_SIZE);
 801443e:	fb14 6402 	smlabb	r4, r4, r2, r6
		floatADCUI[whichKnob] = smoothedADC[whichKnob];
 8014442:	4a3d      	ldr	r2, [pc, #244]	; (8014538 <OLED_writeKnobParameter.part.0+0x128>)
		int len = strlen(knobParamNames[currentPreset][whichParam]);
 8014444:	4423      	add	r3, r4
		floatADCUI[whichKnob] = smoothedADC[whichKnob];
 8014446:	4402      	add	r2, r0
		int len = strlen(knobParamNames[currentPreset][whichParam]);
 8014448:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
		floatADCUI[whichKnob] = smoothedADC[whichKnob];
 801444c:	6011      	str	r1, [r2, #0]
		int len = strlen(knobParamNames[currentPreset][whichParam]);
 801444e:	f7eb ff43 	bl	80002d8 <strlen>
		if (len > 0)
 8014452:	2800      	cmp	r0, #0
 8014454:	d066      	beq.n	8014524 <OLED_writeKnobParameter.part.0+0x114>
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8014456:	f04f 0800 	mov.w	r8, #0
 801445a:	f04f 0a10 	mov.w	sl, #16
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 801445e:	b2c5      	uxtb	r5, r0
			GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 8014460:	4936      	ldr	r1, [pc, #216]	; (801453c <OLED_writeKnobParameter.part.0+0x12c>)
 8014462:	4837      	ldr	r0, [pc, #220]	; (8014540 <OLED_writeKnobParameter.part.0+0x130>)
 8014464:	f7fe fd0e 	bl	8012e84 <GFXsetFont>
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8014468:	4641      	mov	r1, r8
 801446a:	4652      	mov	r2, sl
 801446c:	2380      	movs	r3, #128	; 0x80
 801446e:	4834      	ldr	r0, [pc, #208]	; (8014540 <OLED_writeKnobParameter.part.0+0x130>)
 8014470:	f8cd 8004 	str.w	r8, [sp, #4]
 8014474:	f8cd a000 	str.w	sl, [sp]
 8014478:	f7fe f8bc 	bl	80125f4 <GFXfillRect>
			OLEDwriteString(knobParamNames[currentPreset][whichParam], len, 0, SecondLine);
 801447c:	f899 3000 	ldrb.w	r3, [r9]
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014480:	4641      	mov	r1, r8
 8014482:	221c      	movs	r2, #28
			OLEDwriteString(knobParamNames[currentPreset][whichParam], len, 0, SecondLine);
 8014484:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014488:	482d      	ldr	r0, [pc, #180]	; (8014540 <OLED_writeKnobParameter.part.0+0x130>)
			OLEDwriteString(knobParamNames[currentPreset][whichParam], len, 0, SecondLine);
 801448a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801448e:	441c      	add	r4, r3
 8014490:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014494:	f7fe fce4 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8014498:	2020      	movs	r0, #32
 801449a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801449e:	f8cd 8004 	str.w	r8, [sp, #4]
 80144a2:	4652      	mov	r2, sl
 80144a4:	9000      	str	r0, [sp, #0]
 80144a6:	4641      	mov	r1, r8
 80144a8:	009b      	lsls	r3, r3, #2
 80144aa:	4825      	ldr	r0, [pc, #148]	; (8014540 <OLED_writeKnobParameter.part.0+0x130>)
 80144ac:	f7fe f8a2 	bl	80125f4 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 80144b0:	b155      	cbz	r5, 80144c8 <OLED_writeKnobParameter.part.0+0xb8>
 80144b2:	3c01      	subs	r4, #1
		GFXwrite(&theGFX, myCharArray[i]);
 80144b4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8014540 <OLED_writeKnobParameter.part.0+0x130>
 80144b8:	4425      	add	r5, r4
 80144ba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80144be:	4640      	mov	r0, r8
 80144c0:	f7fe fc1c 	bl	8012cfc <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 80144c4:	42ac      	cmp	r4, r5
 80144c6:	d1f8      	bne.n	80144ba <OLED_writeKnobParameter.part.0+0xaa>
	return GFXgetCursorX(&theGFX);
 80144c8:	481d      	ldr	r0, [pc, #116]	; (8014540 <OLED_writeKnobParameter.part.0+0x130>)
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 80144ca:	2420      	movs	r4, #32
	return GFXgetCursorX(&theGFX);
 80144cc:	f7fe fccc 	bl	8012e68 <GFXgetCursorX>
	GFXsetCursor(&theGFX, cursorX, cursorY);
 80144d0:	221c      	movs	r2, #28
 80144d2:	b2c5      	uxtb	r5, r0
 80144d4:	481a      	ldr	r0, [pc, #104]	; (8014540 <OLED_writeKnobParameter.part.0+0x130>)
 80144d6:	4629      	mov	r1, r5
 80144d8:	f7fe fcc2 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 80144dc:	2300      	movs	r3, #0
 80144de:	4629      	mov	r1, r5
 80144e0:	2210      	movs	r2, #16
 80144e2:	4817      	ldr	r0, [pc, #92]	; (8014540 <OLED_writeKnobParameter.part.0+0x130>)
 80144e4:	e9cd 4300 	strd	r4, r3, [sp]
 80144e8:	230c      	movs	r3, #12
 80144ea:	f7fe f883 	bl	80125f4 <GFXfillRect>
		GFXwrite(&theGFX, myCharArray[i]);
 80144ee:	4621      	mov	r1, r4
 80144f0:	4813      	ldr	r0, [pc, #76]	; (8014540 <OLED_writeKnobParameter.part.0+0x130>)
 80144f2:	f7fe fc03 	bl	8012cfc <GFXwrite>
			OLEDwriteFloat(displayValues[whichKnob + (knobPage * KNOB_PAGE_SIZE)], getCursorX(), SecondLine);
 80144f6:	7839      	ldrb	r1, [r7, #0]
 80144f8:	2205      	movs	r2, #5
 80144fa:	4b12      	ldr	r3, [pc, #72]	; (8014544 <OLED_writeKnobParameter.part.0+0x134>)
	return GFXgetCursorX(&theGFX);
 80144fc:	4810      	ldr	r0, [pc, #64]	; (8014540 <OLED_writeKnobParameter.part.0+0x130>)
			OLEDwriteFloat(displayValues[whichKnob + (knobPage * KNOB_PAGE_SIZE)], getCursorX(), SecondLine);
 80144fe:	fb12 6601 	smlabb	r6, r2, r1, r6
 8014502:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8014506:	ed96 8a00 	vldr	s16, [r6]
	return GFXgetCursorX(&theGFX);
 801450a:	f7fe fcad 	bl	8012e68 <GFXgetCursorX>
			OLEDwriteFloat(displayValues[whichKnob + (knobPage * KNOB_PAGE_SIZE)], getCursorX(), SecondLine);
 801450e:	2101      	movs	r1, #1
 8014510:	b2c0      	uxtb	r0, r0
 8014512:	eeb0 0a48 	vmov.f32	s0, s16
}
 8014516:	b003      	add	sp, #12
 8014518:	ecbd 8b02 	vpop	{d8}
 801451c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			OLEDwriteFloat(displayValues[whichKnob + (knobPage * KNOB_PAGE_SIZE)], getCursorX(), SecondLine);
 8014520:	f7ff bec4 	b.w	80142ac <OLEDwriteFloat>
}
 8014524:	b003      	add	sp, #12
 8014526:	ecbd 8b02 	vpop	{d8}
 801452a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801452e:	bf00      	nop
 8014530:	20000656 	.word	0x20000656
 8014534:	20014304 	.word	0x20014304
 8014538:	2001883c 	.word	0x2001883c
 801453c:	0802a658 	.word	0x0802a658
 8014540:	20015670 	.word	0x20015670
 8014544:	200187c4 	.word	0x200187c4
 8014548:	20000655 	.word	0x20000655
 801454c:	20018964 	.word	0x20018964

08014550 <OLED_process>:
{
 8014550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (writeKnobFlag >= 0)
 8014554:	4c2d      	ldr	r4, [pc, #180]	; (801460c <OLED_process+0xbc>)
{
 8014556:	b083      	sub	sp, #12
	if (writeKnobFlag >= 0)
 8014558:	f994 0000 	ldrsb.w	r0, [r4]
 801455c:	2800      	cmp	r0, #0
 801455e:	db03      	blt.n	8014568 <OLED_process+0x18>
	if (whichKnob < KNOB_PAGE_SIZE)
 8014560:	2804      	cmp	r0, #4
 8014562:	dd4e      	ble.n	8014602 <OLED_process+0xb2>
		writeKnobFlag = -1;
 8014564:	23ff      	movs	r3, #255	; 0xff
 8014566:	7023      	strb	r3, [r4, #0]
	if (writeButtonFlag >= 0 && writeActionFlag >= 0) //These should always be set together
 8014568:	4e29      	ldr	r6, [pc, #164]	; (8014610 <OLED_process+0xc0>)
 801456a:	f996 0000 	ldrsb.w	r0, [r6]
 801456e:	2800      	cmp	r0, #0
 8014570:	db44      	blt.n	80145fc <OLED_process+0xac>
 8014572:	4f28      	ldr	r7, [pc, #160]	; (8014614 <OLED_process+0xc4>)
 8014574:	f997 1000 	ldrsb.w	r1, [r7]
 8014578:	2900      	cmp	r1, #0
 801457a:	db3f      	blt.n	80145fc <OLED_process+0xac>
	char* str = buttonActionFunctions[currentPreset](whichButton, whichAction);
 801457c:	4a26      	ldr	r2, [pc, #152]	; (8014618 <OLED_process+0xc8>)
 801457e:	b2c9      	uxtb	r1, r1
 8014580:	4b26      	ldr	r3, [pc, #152]	; (801461c <OLED_process+0xcc>)
 8014582:	b2c0      	uxtb	r0, r0
 8014584:	7812      	ldrb	r2, [r2, #0]
 8014586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801458a:	4798      	blx	r3
 801458c:	4604      	mov	r4, r0
	int len = strlen(str);
 801458e:	f7eb fea3 	bl	80002d8 <strlen>
	if (len > 0)
 8014592:	b380      	cbz	r0, 80145f6 <OLED_process+0xa6>
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8014594:	f04f 0800 	mov.w	r8, #0
 8014598:	f04f 0910 	mov.w	r9, #16
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 801459c:	b2c5      	uxtb	r5, r0
		GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 801459e:	4920      	ldr	r1, [pc, #128]	; (8014620 <OLED_process+0xd0>)
 80145a0:	4820      	ldr	r0, [pc, #128]	; (8014624 <OLED_process+0xd4>)
 80145a2:	f7fe fc6f 	bl	8012e84 <GFXsetFont>
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 80145a6:	2380      	movs	r3, #128	; 0x80
 80145a8:	4641      	mov	r1, r8
 80145aa:	464a      	mov	r2, r9
 80145ac:	481d      	ldr	r0, [pc, #116]	; (8014624 <OLED_process+0xd4>)
 80145ae:	f8cd 8004 	str.w	r8, [sp, #4]
 80145b2:	f8cd 9000 	str.w	r9, [sp]
 80145b6:	f7fe f81d 	bl	80125f4 <GFXfillRect>
	GFXsetCursor(&theGFX, cursorX, cursorY);
 80145ba:	4641      	mov	r1, r8
 80145bc:	221c      	movs	r2, #28
 80145be:	4819      	ldr	r0, [pc, #100]	; (8014624 <OLED_process+0xd4>)
 80145c0:	f7fe fc4e 	bl	8012e60 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 80145c4:	2020      	movs	r0, #32
 80145c6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80145ca:	f8cd 8004 	str.w	r8, [sp, #4]
 80145ce:	9000      	str	r0, [sp, #0]
 80145d0:	464a      	mov	r2, r9
 80145d2:	4641      	mov	r1, r8
 80145d4:	009b      	lsls	r3, r3, #2
 80145d6:	4813      	ldr	r0, [pc, #76]	; (8014624 <OLED_process+0xd4>)
 80145d8:	f7fe f80c 	bl	80125f4 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 80145dc:	b15d      	cbz	r5, 80145f6 <OLED_process+0xa6>
 80145de:	4425      	add	r5, r4
		GFXwrite(&theGFX, myCharArray[i]);
 80145e0:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8014624 <OLED_process+0xd4>
 80145e4:	3c01      	subs	r4, #1
 80145e6:	3d01      	subs	r5, #1
 80145e8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80145ec:	4640      	mov	r0, r8
 80145ee:	f7fe fb85 	bl	8012cfc <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 80145f2:	42ac      	cmp	r4, r5
 80145f4:	d1f8      	bne.n	80145e8 <OLED_process+0x98>
		writeButtonFlag = -1;
 80145f6:	23ff      	movs	r3, #255	; 0xff
 80145f8:	7033      	strb	r3, [r6, #0]
		writeActionFlag = -1;
 80145fa:	703b      	strb	r3, [r7, #0]
}
 80145fc:	b003      	add	sp, #12
 80145fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014602:	b2c0      	uxtb	r0, r0
 8014604:	f7ff ff04 	bl	8014410 <OLED_writeKnobParameter.part.0>
 8014608:	e7ac      	b.n	8014564 <OLED_process+0x14>
 801460a:	bf00      	nop
 801460c:	200002cf 	.word	0x200002cf
 8014610:	200002ce 	.word	0x200002ce
 8014614:	200002cd 	.word	0x200002cd
 8014618:	20000655 	.word	0x20000655
 801461c:	20019078 	.word	0x20019078
 8014620:	0802a658 	.word	0x0802a658
 8014624:	20015670 	.word	0x20015670

08014628 <OLEDgetCursor>:
	}
}

int16_t OLEDgetCursor()
{
	return GFXgetCursorX(&theGFX);
 8014628:	4801      	ldr	r0, [pc, #4]	; (8014630 <OLEDgetCursor+0x8>)
 801462a:	f7fe bc1d 	b.w	8012e68 <GFXgetCursorX>
 801462e:	bf00      	nop
 8014630:	20015670 	.word	0x20015670

08014634 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8014634:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 8014636:	4b07      	ldr	r3, [pc, #28]	; (8014654 <MX_RNG_Init+0x20>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8014638:	2100      	movs	r1, #0
  hrng.Instance = RNG;
 801463a:	4a07      	ldr	r2, [pc, #28]	; (8014658 <MX_RNG_Init+0x24>)
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 801463c:	4618      	mov	r0, r3
  hrng.Instance = RNG;
 801463e:	e9c3 2100 	strd	r2, r1, [r3]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8014642:	f7f5 ffc5 	bl	800a5d0 <HAL_RNG_Init>
 8014646:	b900      	cbnz	r0, 801464a <MX_RNG_Init+0x16>
  {
    Error_Handler();
  }

}
 8014648:	bd08      	pop	{r3, pc}
 801464a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 801464e:	f7ff baf3 	b.w	8013c38 <Error_Handler>
 8014652:	bf00      	nop
 8014654:	20015694 	.word	0x20015694
 8014658:	48021800 	.word	0x48021800

0801465c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 801465c:	6802      	ldr	r2, [r0, #0]
 801465e:	4b0a      	ldr	r3, [pc, #40]	; (8014688 <HAL_RNG_MspInit+0x2c>)
 8014660:	429a      	cmp	r2, r3
 8014662:	d000      	beq.n	8014666 <HAL_RNG_MspInit+0xa>
 8014664:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8014666:	4b09      	ldr	r3, [pc, #36]	; (801468c <HAL_RNG_MspInit+0x30>)
{
 8014668:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 801466a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 801466e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014672:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8014676:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801467e:	9301      	str	r3, [sp, #4]
 8014680:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8014682:	b002      	add	sp, #8
 8014684:	4770      	bx	lr
 8014686:	bf00      	nop
 8014688:	48021800 	.word	0x48021800
 801468c:	58024400 	.word	0x58024400

08014690 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8014690:	b570      	push	{r4, r5, r6, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 8014692:	481a      	ldr	r0, [pc, #104]	; (80146fc <MX_SAI1_Init+0x6c>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8014694:	2500      	movs	r5, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 8014696:	4c1a      	ldr	r4, [pc, #104]	; (8014700 <MX_SAI1_Init+0x70>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8014698:	2101      	movs	r1, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 801469a:	f64b 3280 	movw	r2, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 801469e:	2302      	movs	r3, #2
  hsai_BlockA1.Instance = SAI1_Block_A;
 80146a0:	6020      	str	r0, [r4, #0]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80146a2:	4620      	mov	r0, r4
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80146a4:	61e1      	str	r1, [r4, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80146a6:	4629      	mov	r1, r5
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80146a8:	6222      	str	r2, [r4, #32]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80146aa:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80146ac:	60e5      	str	r5, [r4, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80146ae:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80146b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80146b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80146b8:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80146bc:	f7f6 f810 	bl	800a6e0 <HAL_SAI_InitProtocol>
 80146c0:	b9c8      	cbnz	r0, 80146f6 <MX_SAI1_Init+0x66>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80146c2:	4c10      	ldr	r4, [pc, #64]	; (8014704 <MX_SAI1_Init+0x74>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80146c4:	2500      	movs	r5, #0
  hsai_BlockB1.Instance = SAI1_Block_B;
 80146c6:	4910      	ldr	r1, [pc, #64]	; (8014708 <MX_SAI1_Init+0x78>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80146c8:	2203      	movs	r2, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80146ca:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80146cc:	2601      	movs	r6, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 80146ce:	6021      	str	r1, [r4, #0]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80146d0:	4620      	mov	r0, r4
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80146d2:	6062      	str	r2, [r4, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80146d4:	4629      	mov	r1, r5
 80146d6:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80146d8:	60a6      	str	r6, [r4, #8]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80146da:	61e6      	str	r6, [r4, #28]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80146dc:	6165      	str	r5, [r4, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80146de:	60e5      	str	r5, [r4, #12]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80146e0:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80146e2:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80146e6:	f7f5 fffb 	bl	800a6e0 <HAL_SAI_InitProtocol>
 80146ea:	b900      	cbnz	r0, 80146ee <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
  }

}
 80146ec:	bd70      	pop	{r4, r5, r6, pc}
 80146ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 80146f2:	f7ff baa1 	b.w	8013c38 <Error_Handler>
    Error_Handler();
 80146f6:	f7ff fa9f 	bl	8013c38 <Error_Handler>
 80146fa:	e7e2      	b.n	80146c2 <MX_SAI1_Init+0x32>
 80146fc:	40015804 	.word	0x40015804
 8014700:	20015830 	.word	0x20015830
 8014704:	200156a8 	.word	0x200156a8
 8014708:	40015824 	.word	0x40015824

0801470c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 801470c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8014710:	4a5e      	ldr	r2, [pc, #376]	; (801488c <HAL_SAI_MspInit+0x180>)
{
 8014712:	b088      	sub	sp, #32
    if(hsai->Instance==SAI1_Block_A)
 8014714:	6803      	ldr	r3, [r0, #0]
{
 8014716:	4605      	mov	r5, r0
    if(hsai->Instance==SAI1_Block_A)
 8014718:	4293      	cmp	r3, r2
 801471a:	d040      	beq.n	801479e <HAL_SAI_MspInit+0x92>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 801471c:	4a5c      	ldr	r2, [pc, #368]	; (8014890 <HAL_SAI_MspInit+0x184>)
 801471e:	4293      	cmp	r3, r2
 8014720:	d002      	beq.n	8014728 <HAL_SAI_MspInit+0x1c>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 8014722:	b008      	add	sp, #32
 8014724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (SAI1_client == 0)
 8014728:	4c5a      	ldr	r4, [pc, #360]	; (8014894 <HAL_SAI_MspInit+0x188>)
 801472a:	6822      	ldr	r2, [r4, #0]
 801472c:	2a00      	cmp	r2, #0
 801472e:	d07b      	beq.n	8014828 <HAL_SAI_MspInit+0x11c>
    SAI1_client ++;
 8014730:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8014732:	2008      	movs	r0, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014734:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014736:	2302      	movs	r3, #2
    SAI1_client ++;
 8014738:	6022      	str	r2, [r4, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 801473a:	2206      	movs	r2, #6
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801473c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 801473e:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014740:	4855      	ldr	r0, [pc, #340]	; (8014898 <HAL_SAI_MspInit+0x18c>)
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8014742:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai1_b.Instance = DMA1_Stream2;
 8014746:	4c55      	ldr	r4, [pc, #340]	; (801489c <HAL_SAI_MspInit+0x190>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014748:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801474a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 801474c:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801474e:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014750:	f7f0 fe44 	bl	80053dc <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8014754:	4a52      	ldr	r2, [pc, #328]	; (80148a0 <HAL_SAI_MspInit+0x194>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8014756:	2358      	movs	r3, #88	; 0x58
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8014758:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 801475c:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8014760:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_b.Instance = DMA1_Stream2;
 8014764:	6022      	str	r2, [r4, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8014766:	6063      	str	r3, [r4, #4]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8014768:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 801476c:	2304      	movs	r3, #4
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801476e:	60a6      	str	r6, [r4, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8014770:	60e6      	str	r6, [r4, #12]
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8014772:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8014774:	e9c4 c004 	strd	ip, r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8014778:	4620      	mov	r0, r4
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 801477a:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 801477e:	e9c4 7106 	strd	r7, r1, [r4, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8014782:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8014786:	f7ee f891 	bl	80028ac <HAL_DMA_Init>
 801478a:	2800      	cmp	r0, #0
 801478c:	d162      	bne.n	8014854 <HAL_SAI_MspInit+0x148>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 801478e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
 8014792:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8014794:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
}
 8014798:	b008      	add	sp, #32
 801479a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SAI1_client == 0)
 801479e:	4c3d      	ldr	r4, [pc, #244]	; (8014894 <HAL_SAI_MspInit+0x188>)
 80147a0:	6822      	ldr	r2, [r4, #0]
 80147a2:	2a00      	cmp	r2, #0
 80147a4:	d05c      	beq.n	8014860 <HAL_SAI_MspInit+0x154>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80147a6:	2024      	movs	r0, #36	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147a8:	2600      	movs	r6, #0
    SAI1_client ++;
 80147aa:	3201      	adds	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147ac:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80147ae:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80147b0:	f04f 0806 	mov.w	r8, #6
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80147b4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80147b6:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80147b8:	4837      	ldr	r0, [pc, #220]	; (8014898 <HAL_SAI_MspInit+0x18c>)
    SAI1_client ++;
 80147ba:	6022      	str	r2, [r4, #0]
    hdma_sai1_a.Instance = DMA1_Stream1;
 80147bc:	4c39      	ldr	r4, [pc, #228]	; (80148a4 <HAL_SAI_MspInit+0x198>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80147be:	e9cd 3806 	strd	r3, r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147c2:	e9cd 7604 	strd	r7, r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80147c6:	f7f0 fe09 	bl	80053dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80147ca:	2350      	movs	r3, #80	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80147cc:	a903      	add	r1, sp, #12
 80147ce:	4832      	ldr	r0, [pc, #200]	; (8014898 <HAL_SAI_MspInit+0x18c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80147d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80147d2:	e9cd 7806 	strd	r7, r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147d6:	e9cd 7604 	strd	r7, r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80147da:	f7f0 fdff 	bl	80053dc <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 80147de:	4b32      	ldr	r3, [pc, #200]	; (80148a8 <HAL_SAI_MspInit+0x19c>)
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80147e0:	2040      	movs	r0, #64	; 0x40
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80147e2:	f04f 0857 	mov.w	r8, #87	; 0x57
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80147e6:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80147ea:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80147ee:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80147f2:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80147f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_sai1_a.Instance = DMA1_Stream1;
 80147fa:	6023      	str	r3, [r4, #0]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80147fc:	2304      	movs	r3, #4
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80147fe:	60e6      	str	r6, [r4, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8014800:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8014802:	62e6      	str	r6, [r4, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8014804:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8014806:	e9c4 8001 	strd	r8, r0, [r4, #4]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 801480a:	4620      	mov	r0, r4
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801480c:	e9c4 ec04 	strd	lr, ip, [r4, #16]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8014810:	e9c4 7106 	strd	r7, r1, [r4, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8014814:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8014818:	f7ee f848 	bl	80028ac <HAL_DMA_Init>
 801481c:	b9e8      	cbnz	r0, 801485a <HAL_SAI_MspInit+0x14e>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 801481e:	63a5      	str	r5, [r4, #56]	; 0x38
 8014820:	682b      	ldr	r3, [r5, #0]
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8014822:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
 8014826:	e779      	b.n	801471c <HAL_SAI_MspInit+0x10>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8014828:	4b20      	ldr	r3, [pc, #128]	; (80148ac <HAL_SAI_MspInit+0x1a0>)
      HAL_NVIC_SetPriority(SAI1_IRQn, 2, 0);
 801482a:	2102      	movs	r1, #2
 801482c:	2057      	movs	r0, #87	; 0x57
       __HAL_RCC_SAI1_CLK_ENABLE();
 801482e:	f8d3 60f0 	ldr.w	r6, [r3, #240]	; 0xf0
 8014832:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
 8014836:	f8c3 60f0 	str.w	r6, [r3, #240]	; 0xf0
 801483a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801483e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014842:	9302      	str	r3, [sp, #8]
 8014844:	9b02      	ldr	r3, [sp, #8]
      HAL_NVIC_SetPriority(SAI1_IRQn, 2, 0);
 8014846:	f7ed fe65 	bl	8002514 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 801484a:	2057      	movs	r0, #87	; 0x57
 801484c:	f7ed fea8 	bl	80025a0 <HAL_NVIC_EnableIRQ>
 8014850:	6822      	ldr	r2, [r4, #0]
 8014852:	e76d      	b.n	8014730 <HAL_SAI_MspInit+0x24>
      Error_Handler();
 8014854:	f7ff f9f0 	bl	8013c38 <Error_Handler>
 8014858:	e799      	b.n	801478e <HAL_SAI_MspInit+0x82>
      Error_Handler();
 801485a:	f7ff f9ed 	bl	8013c38 <Error_Handler>
 801485e:	e7de      	b.n	801481e <HAL_SAI_MspInit+0x112>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8014860:	4b12      	ldr	r3, [pc, #72]	; (80148ac <HAL_SAI_MspInit+0x1a0>)
    HAL_NVIC_SetPriority(SAI1_IRQn, 2, 0);
 8014862:	2102      	movs	r1, #2
 8014864:	2057      	movs	r0, #87	; 0x57
       __HAL_RCC_SAI1_CLK_ENABLE();
 8014866:	f8d3 60f0 	ldr.w	r6, [r3, #240]	; 0xf0
 801486a:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
 801486e:	f8c3 60f0 	str.w	r6, [r3, #240]	; 0xf0
 8014872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801487a:	9301      	str	r3, [sp, #4]
 801487c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(SAI1_IRQn, 2, 0);
 801487e:	f7ed fe49 	bl	8002514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8014882:	2057      	movs	r0, #87	; 0x57
 8014884:	f7ed fe8c 	bl	80025a0 <HAL_NVIC_EnableIRQ>
 8014888:	6822      	ldr	r2, [r4, #0]
 801488a:	e78c      	b.n	80147a6 <HAL_SAI_MspInit+0x9a>
 801488c:	40015804 	.word	0x40015804
 8014890:	40015824 	.word	0x40015824
 8014894:	2000050c 	.word	0x2000050c
 8014898:	58021000 	.word	0x58021000
 801489c:	200157b8 	.word	0x200157b8
 80148a0:	40020040 	.word	0x40020040
 80148a4:	20015740 	.word	0x20015740
 80148a8:	40020028 	.word	0x40020028
 80148ac:	58024400 	.word	0x58024400

080148b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80148b0:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;  
 80148b2:	4c0a      	ldr	r4, [pc, #40]	; (80148dc <SD_initialize+0x2c>)
 80148b4:	2501      	movs	r5, #1
 80148b6:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80148b8:	f7fd f81a 	bl	80118f0 <BSP_SD_Init>
 80148bc:	b108      	cbz	r0, 80148c2 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80148be:	7820      	ldrb	r0, [r4, #0]
}
 80148c0:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 80148c2:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80148c4:	f7fc fff4 	bl	80118b0 <BSP_SD_GetCardState>
 80148c8:	b918      	cbnz	r0, 80148d2 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 80148ca:	7823      	ldrb	r3, [r4, #0]
 80148cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80148d0:	7023      	strb	r3, [r4, #0]
  return Stat;
 80148d2:	7823      	ldrb	r3, [r4, #0]
 80148d4:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 80148d6:	7023      	strb	r3, [r4, #0]
  return Stat;
 80148d8:	7820      	ldrb	r0, [r4, #0]
}
 80148da:	bd38      	pop	{r3, r4, r5, pc}
 80148dc:	20000038 	.word	0x20000038

080148e0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80148e0:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80148e2:	2301      	movs	r3, #1
 80148e4:	4c05      	ldr	r4, [pc, #20]	; (80148fc <SD_status+0x1c>)
 80148e6:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80148e8:	f7fc ffe2 	bl	80118b0 <BSP_SD_GetCardState>
 80148ec:	b918      	cbnz	r0, 80148f6 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 80148ee:	7823      	ldrb	r3, [r4, #0]
 80148f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80148f4:	7023      	strb	r3, [r4, #0]
  return Stat;
 80148f6:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 80148f8:	bd10      	pop	{r4, pc}
 80148fa:	bf00      	nop
 80148fc:	20000038 	.word	0x20000038

08014900 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014900:	b508      	push	{r3, lr}
 8014902:	4608      	mov	r0, r1
 8014904:	4611      	mov	r1, r2
 8014906:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8014908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801490c:	f7fc ffac 	bl	8011868 <BSP_SD_ReadBlocks>
 8014910:	b920      	cbnz	r0, 801491c <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8014912:	f7fc ffcd 	bl	80118b0 <BSP_SD_GetCardState>
 8014916:	2800      	cmp	r0, #0
 8014918:	d1fb      	bne.n	8014912 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 801491a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 801491c:	2001      	movs	r0, #1
}
 801491e:	bd08      	pop	{r3, pc}

08014920 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014920:	4b16      	ldr	r3, [pc, #88]	; (801497c <SD_ioctl+0x5c>)
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	07db      	lsls	r3, r3, #31
 8014926:	d408      	bmi.n	801493a <SD_ioctl+0x1a>
{
 8014928:	b510      	push	{r4, lr}
 801492a:	4614      	mov	r4, r2
 801492c:	b08a      	sub	sp, #40	; 0x28

  switch (cmd)
 801492e:	2903      	cmp	r1, #3
 8014930:	d821      	bhi.n	8014976 <SD_ioctl+0x56>
 8014932:	e8df f001 	tbb	[pc, r1]
 8014936:	0704      	.short	0x0704
 8014938:	170f      	.short	0x170f
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801493a:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 801493c:	4770      	bx	lr
    res = RES_OK;
 801493e:	2000      	movs	r0, #0
}
 8014940:	b00a      	add	sp, #40	; 0x28
 8014942:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8014944:	a801      	add	r0, sp, #4
 8014946:	f7fc ffbd 	bl	80118c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801494a:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 801494c:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801494e:	6023      	str	r3, [r4, #0]
}
 8014950:	b00a      	add	sp, #40	; 0x28
 8014952:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8014954:	a801      	add	r0, sp, #4
 8014956:	f7fc ffb5 	bl	80118c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801495a:	9b08      	ldr	r3, [sp, #32]
    res = RES_OK;
 801495c:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 801495e:	8023      	strh	r3, [r4, #0]
}
 8014960:	b00a      	add	sp, #40	; 0x28
 8014962:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8014964:	a801      	add	r0, sp, #4
 8014966:	f7fc ffad 	bl	80118c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801496a:	9b08      	ldr	r3, [sp, #32]
 801496c:	2000      	movs	r0, #0
 801496e:	0a5b      	lsrs	r3, r3, #9
 8014970:	6023      	str	r3, [r4, #0]
}
 8014972:	b00a      	add	sp, #40	; 0x28
 8014974:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 8014976:	2004      	movs	r0, #4
}
 8014978:	b00a      	add	sp, #40	; 0x28
 801497a:	bd10      	pop	{r4, pc}
 801497c:	20000038 	.word	0x20000038

08014980 <SD_write>:
{
 8014980:	b508      	push	{r3, lr}
 8014982:	4608      	mov	r0, r1
 8014984:	4611      	mov	r1, r2
 8014986:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8014988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801498c:	f7fc ff7e 	bl	801188c <BSP_SD_WriteBlocks>
 8014990:	b920      	cbnz	r0, 801499c <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8014992:	f7fc ff8d 	bl	80118b0 <BSP_SD_GetCardState>
 8014996:	2800      	cmp	r0, #0
 8014998:	d1fb      	bne.n	8014992 <SD_write+0x12>
}
 801499a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 801499c:	2001      	movs	r0, #1
}
 801499e:	bd08      	pop	{r3, pc}

080149a0 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80149a0:	b410      	push	{r4}

  hsd1.Instance = SDMMC1;
 80149a2:	4b08      	ldr	r3, [pc, #32]	; (80149c4 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80149a4:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hsd1.Instance = SDMMC1;
 80149a8:	4807      	ldr	r0, [pc, #28]	; (80149c8 <MX_SDMMC1_SD_Init+0x28>)
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 0;
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80149aa:	2101      	movs	r1, #1
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80149ac:	2200      	movs	r2, #0
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80149ae:	60dc      	str	r4, [r3, #12]
  hsd1.Instance = SDMMC1;
 80149b0:	6018      	str	r0, [r3, #0]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80149b2:	6199      	str	r1, [r3, #24]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80149b4:	e9c3 2201 	strd	r2, r2, [r3, #4]
  hsd1.Init.ClockDiv = 0;
 80149b8:	e9c3 2204 	strd	r2, r2, [r3, #16]

}
 80149bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149c0:	4770      	bx	lr
 80149c2:	bf00      	nop
 80149c4:	200158c8 	.word	0x200158c8
 80149c8:	52007000 	.word	0x52007000

080149cc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80149cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 80149d0:	4b2e      	ldr	r3, [pc, #184]	; (8014a8c <HAL_SD_MspInit+0xc0>)
{
 80149d2:	b088      	sub	sp, #32
  if(sdHandle->Instance==SDMMC1)
 80149d4:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80149d6:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 80149d8:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80149da:	9407      	str	r4, [sp, #28]
 80149dc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80149e0:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(sdHandle->Instance==SDMMC1)
 80149e4:	d002      	beq.n	80149ec <HAL_SD_MspInit+0x20>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80149e6:	b008      	add	sp, #32
 80149e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80149ec:	4b28      	ldr	r3, [pc, #160]	; (8014a90 <HAL_SD_MspInit+0xc4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80149ee:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80149f0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80149f4:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80149f6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80149fa:	2603      	movs	r6, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80149fc:	f04f 0801 	mov.w	r8, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014a00:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8014a04:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8014a08:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8014a0c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8014a10:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8014a14:	9200      	str	r2, [sp, #0]
 8014a16:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014a18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014a1c:	f042 0204 	orr.w	r2, r2, #4
 8014a20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8014a24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014a28:	f002 0204 	and.w	r2, r2, #4
 8014a2c:	9201      	str	r2, [sp, #4]
 8014a2e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014a30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014a34:	f042 0208 	orr.w	r2, r2, #8
 8014a38:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8014a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8014a40:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014a42:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014a46:	4813      	ldr	r0, [pc, #76]	; (8014a94 <HAL_SD_MspInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a48:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014a4a:	9302      	str	r3, [sp, #8]
 8014a4c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8014a4e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014a50:	e9cd 8605 	strd	r8, r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014a54:	f7f0 fcc2 	bl	80053dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8014a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014a5c:	eb0d 0105 	add.w	r1, sp, r5
 8014a60:	480c      	ldr	r0, [pc, #48]	; (8014a94 <HAL_SD_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8014a62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a64:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a66:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8014a68:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014a6c:	f7f0 fcb6 	bl	80053dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8014a70:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014a72:	eb0d 0105 	add.w	r1, sp, r5
 8014a76:	4808      	ldr	r0, [pc, #32]	; (8014a98 <HAL_SD_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8014a78:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014a7a:	e9cd 7804 	strd	r7, r8, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8014a7e:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014a82:	f7f0 fcab 	bl	80053dc <HAL_GPIO_Init>
}
 8014a86:	b008      	add	sp, #32
 8014a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a8c:	52007000 	.word	0x52007000
 8014a90:	58024400 	.word	0x58024400
 8014a94:	58020800 	.word	0x58020800
 8014a98:	58020c00 	.word	0x58020c00

08014a9c <initGlobalSFXObjects>:
float oversamplerArray[MAX_OVERSAMPLER_RATIO];



void initGlobalSFXObjects()
{
 8014a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
void calculateNoteArray()
{
	for (int i = 0; i < 128; i++)
	{
		float tempNote = i;
		float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8014aa0:	4beb      	ldr	r3, [pc, #940]	; (8014e50 <initGlobalSFXObjects+0x3b4>)
	for (int i = 0; i < 128; i++)
 8014aa2:	2000      	movs	r0, #0
 8014aa4:	4ceb      	ldr	r4, [pc, #940]	; (8014e54 <initGlobalSFXObjects+0x3b8>)
		float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8014aa6:	781f      	ldrb	r7, [r3, #0]
 8014aa8:	4eeb      	ldr	r6, [pc, #940]	; (8014e58 <initGlobalSFXObjects+0x3bc>)
 8014aaa:	4dec      	ldr	r5, [pc, #944]	; (8014e5c <initGlobalSFXObjects+0x3c0>)
		float tempNote = i;
 8014aac:	ee07 0a90 	vmov	s15, r0
	for (int i = 0; i < 128; i++)
 8014ab0:	3001      	adds	r0, #1
		float tempNote = i;
 8014ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	for (int i = 0; i < 128; i++)
 8014ab6:	2880      	cmp	r0, #128	; 0x80
		float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8014ab8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8014abc:	ee17 3a90 	vmov	r3, s15
 8014ac0:	eba3 0307 	sub.w	r3, r3, r7
 8014ac4:	fb85 2103 	smull	r2, r1, r5, r3
 8014ac8:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8014acc:	ebc2 0261 	rsb	r2, r2, r1, asr #1
 8014ad0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014ad4:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8014ad8:	ee07 3a90 	vmov	s15, r3
 8014adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8014ae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ae4:	ee17 3a90 	vmov	r3, s15
 8014ae8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014aec:	edd3 7a00 	vldr	s15, [r3]
 8014af0:	ee37 7a87 	vadd.f32	s14, s15, s14
		notes[i] = tunedNote;
 8014af4:	eca4 7a01 	vstmia	r4!, {s14}
	for (int i = 0; i < 128; i++)
 8014af8:	d1d8      	bne.n	8014aac <initGlobalSFXObjects+0x10>
 8014afa:	4cd9      	ldr	r4, [pc, #868]	; (8014e60 <initGlobalSFXObjects+0x3c4>)
		tExpSmooth_initToPool(&polyRamp[i], 0.0f, 0.02f, &smallPool);
 8014afc:	2600      	movs	r6, #0
 8014afe:	f8df a3b4 	ldr.w	sl, [pc, #948]	; 8014eb4 <initGlobalSFXObjects+0x418>
	tSimplePoly_initToPool(&poly, NUM_VOC_VOICES, &smallPool);
 8014b02:	2108      	movs	r1, #8
 8014b04:	f104 0720 	add.w	r7, r4, #32
		tExpSmooth_initToPool(&polyRamp[i], 0.0f, 0.02f, &smallPool);
 8014b08:	4dd6      	ldr	r5, [pc, #856]	; (8014e64 <initGlobalSFXObjects+0x3c8>)
	tSimplePoly_initToPool(&poly, NUM_VOC_VOICES, &smallPool);
 8014b0a:	4ad6      	ldr	r2, [pc, #856]	; (8014e64 <initGlobalSFXObjects+0x3c8>)
 8014b0c:	48d6      	ldr	r0, [pc, #856]	; (8014e68 <initGlobalSFXObjects+0x3cc>)
 8014b0e:	f00f ffc5 	bl	8024a9c <tSimplePoly_initToPool>
		tExpSmooth_initToPool(&polyRamp[i], 0.0f, 0.02f, &smallPool);
 8014b12:	4620      	mov	r0, r4
 8014b14:	3404      	adds	r4, #4
 8014b16:	4629      	mov	r1, r5
 8014b18:	eddf 0ad4 	vldr	s1, [pc, #848]	; 8014e6c <initGlobalSFXObjects+0x3d0>
 8014b1c:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 8014e70 <initGlobalSFXObjects+0x3d4>
 8014b20:	f00d ff5e 	bl	80229e0 <tExpSmooth_initToPool>
	for (int i = 0; i < NUM_VOC_VOICES; i++)
 8014b24:	42a7      	cmp	r7, r4
 8014b26:	d1f4      	bne.n	8014b12 <initGlobalSFXObjects+0x76>
	tExpSmooth_init(&comp, 1.0f, 0.01f);
 8014b28:	eddf 0ad2 	vldr	s1, [pc, #840]	; 8014e74 <initGlobalSFXObjects+0x3d8>
 8014b2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014b30:	48d1      	ldr	r0, [pc, #836]	; (8014e78 <initGlobalSFXObjects+0x3dc>)
	defaultPresetKnobValues[VocoderCh][2] = 1.0f; // quality
 8014b32:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
	tExpSmooth_init(&comp, 1.0f, 0.01f);
 8014b36:	f00d ff29 	bl	802298c <tExpSmooth_init>
	LEAF_generate_exp(expBuffer, 1000.0f, -1.0f, 0.0f, -0.0008f, EXP_BUFFER_SIZE); //exponential buffer rising from 0 to 1
 8014b3a:	2180      	movs	r1, #128	; 0x80
 8014b3c:	eddf 1acf 	vldr	s3, [pc, #828]	; 8014e7c <initGlobalSFXObjects+0x3e0>
 8014b40:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8014b44:	ed9f 1aca 	vldr	s2, [pc, #808]	; 8014e70 <initGlobalSFXObjects+0x3d4>
 8014b48:	ed9f 0acd 	vldr	s0, [pc, #820]	; 8014e80 <initGlobalSFXObjects+0x3e4>
 8014b4c:	48cd      	ldr	r0, [pc, #820]	; (8014e84 <initGlobalSFXObjects+0x3e8>)
 8014b4e:	f00f fc8b 	bl	8024468 <LEAF_generate_exp>
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8014b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014b56:	48cc      	ldr	r0, [pc, #816]	; (8014e88 <initGlobalSFXObjects+0x3ec>)
 8014b58:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8014b5c:	eddf 1ac7 	vldr	s3, [pc, #796]	; 8014e7c <initGlobalSFXObjects+0x3e0>
 8014b60:	eddf 0ac3 	vldr	s1, [pc, #780]	; 8014e70 <initGlobalSFXObjects+0x3d4>
 8014b64:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 8014e8c <initGlobalSFXObjects+0x3f0>
 8014b68:	f00f fc7e 	bl	8024468 <LEAF_generate_exp>
	defaultPresetKnobValues[Vocoder][0] = 0.4f; // volume
 8014b6c:	4bc8      	ldr	r3, [pc, #800]	; (8014e90 <initGlobalSFXObjects+0x3f4>)
	defaultPresetKnobValues[VocoderCh][9] = 0.66f; // envelope speed
 8014b6e:	48c9      	ldr	r0, [pc, #804]	; (8014e94 <initGlobalSFXObjects+0x3f8>)
	defaultPresetKnobValues[Vocoder][1] = 0.5f; // warp factor
 8014b70:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
	defaultPresetKnobValues[Pitchshift][5] = 0.25f; //offset
 8014b74:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
	defaultPresetKnobValues[Vocoder][0] = 0.4f; // volume
 8014b78:	4fc7      	ldr	r7, [pc, #796]	; (8014e98 <initGlobalSFXObjects+0x3fc>)
	defaultPresetKnobValues[Vocoder][4] = 0.2f; // noise threshold
 8014b7a:	f8df c33c 	ldr.w	ip, [pc, #828]	; 8014eb8 <initGlobalSFXObjects+0x41c>
	defaultPresetKnobValues[SamplerButtonPress][2] = 0.75f; // speed
 8014b7e:	f04f 5e7d 	mov.w	lr, #1061158912	; 0x3f400000
	defaultPresetKnobValues[Vocoder][2] = 0.85f; // quality
 8014b82:	f8df 8338 	ldr.w	r8, [pc, #824]	; 8014ebc <initGlobalSFXObjects+0x420>
	defaultPresetKnobValues[Delay][0] = 0.25f; // delayL
 8014b86:	f203 494c 	addw	r9, r3, #1100	; 0x44c
	defaultPresetKnobValues[VocoderCh][9] = 0.66f; // envelope speed
 8014b8a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	defaultPresetKnobValues[Delay][1] = 0.25f; // delayR
 8014b8e:	f503 6b8a 	add.w	fp, r3, #1104	; 0x450
	defaultPresetKnobValues[SamplerAutoGrab][0] = 0.95f; // thresh
 8014b92:	48c2      	ldr	r0, [pc, #776]	; (8014e9c <initGlobalSFXObjects+0x400>)
	defaultPresetKnobValues[Vocoder][5] = 0.02f; // breathiness
 8014b94:	f8c3 a014 	str.w	sl, [r3, #20]
	defaultPresetKnobValues[Delay][3] = 1.0f; // lowpass
 8014b98:	f503 6a8b 	add.w	sl, r3, #1112	; 0x458
	defaultPresetKnobValues[Vocoder][0] = 0.4f; // volume
 8014b9c:	601f      	str	r7, [r3, #0]
	defaultPresetKnobValues[VocoderCh][0] = 0.4f; // volume
 8014b9e:	665f      	str	r7, [r3, #100]	; 0x64
	defaultPresetKnobValues[Vocoder][2] = 0.85f; // quality
 8014ba0:	f8c3 8008 	str.w	r8, [r3, #8]
	defaultPresetKnobValues[Vocoder][4] = 0.2f; // noise threshold
 8014ba4:	f8c3 c010 	str.w	ip, [r3, #16]
	defaultPresetKnobValues[VocoderCh][4] = 0.2f; //noise thresh
 8014ba8:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	defaultPresetKnobValues[VocoderCh][2] = 1.0f; // quality
 8014bac:	66dc      	str	r4, [r3, #108]	; 0x6c
	defaultPresetKnobValues[Pitchshift][5] = 0.25f; //offset
 8014bae:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
	defaultPresetKnobValues[Pitchshift][6] = 0.25f;
 8014bb2:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
	defaultPresetKnobValues[Vocoder][3] = 0.0f; // sawToPulse
 8014bb6:	60de      	str	r6, [r3, #12]
	defaultPresetKnobValues[Vocoder][9] = 0.0f;
 8014bb8:	625e      	str	r6, [r3, #36]	; 0x24
	defaultPresetKnobValues[VocoderCh][5] = 0.0f;// saw->pulse fade
 8014bba:	679e      	str	r6, [r3, #120]	; 0x78
	defaultPresetKnobValues[VocoderCh][8] = 0.0f; // breathiness
 8014bbc:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
	defaultPresetKnobValues[VocoderCh][13] = 0.0f; // stereo
 8014bc0:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	defaultPresetKnobValues[VocoderCh][14] = 0.0f; // barkpull
 8014bc4:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
	defaultPresetKnobValues[Pitchshift][2] = 0.0f; // f amount
 8014bc8:	f8c3 60d0 	str.w	r6, [r3, #208]	; 0xd0
	defaultPresetKnobValues[Vocoder][1] = 0.5f; // warp factor
 8014bcc:	605a      	str	r2, [r3, #4]
	defaultPresetKnobValues[Vocoder][6] = 0.5f; // tilt
 8014bce:	619a      	str	r2, [r3, #24]
	defaultPresetKnobValues[Vocoder][7] = 0.5f; // pulse width
 8014bd0:	61da      	str	r2, [r3, #28]
	defaultPresetKnobValues[Vocoder][8] = 0.5f; // pulse shape
 8014bd2:	621a      	str	r2, [r3, #32]
	defaultPresetKnobValues[VocoderCh][1] = 0.5f; // warp factor
 8014bd4:	669a      	str	r2, [r3, #104]	; 0x68
	defaultPresetKnobValues[VocoderCh][3] = 0.5f; //band width
 8014bd6:	671a      	str	r2, [r3, #112]	; 0x70
	defaultPresetKnobValues[VocoderCh][6] = 0.5f; // pulse length
 8014bd8:	67da      	str	r2, [r3, #124]	; 0x7c
	defaultPresetKnobValues[VocoderCh][7] = 0.5f; // pulse width
 8014bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	defaultPresetKnobValues[VocoderCh][10] = 0.5f;// squish
 8014bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	defaultPresetKnobValues[VocoderCh][11] = 0.5f; // offset
 8014be2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	defaultPresetKnobValues[VocoderCh][12] = 0.5f; // tilt
 8014be6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	defaultPresetKnobValues[Pitchshift][0] = 0.5f; // pitch
 8014bea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	defaultPresetKnobValues[Pitchshift][1] = 0.5f; // fine pitch
 8014bee:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	defaultPresetKnobValues[Pitchshift][3] = 0.5f; // formant
 8014bf2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	defaultPresetKnobValues[Pitchshift][4] = 0.5f; //range
 8014bf6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	defaultPresetKnobValues[Pitchshift][7] = 0.25f;
 8014bfa:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
	defaultPresetKnobValues[SamplerAutoGrab][0] = 0.95f; // thresh
 8014bfe:	f8c3 02bc 	str.w	r0, [r3, #700]	; 0x2bc
	defaultPresetKnobValues[AutotunePoly][2] = 0.1f;
 8014c02:	48a7      	ldr	r0, [pc, #668]	; (8014ea0 <initGlobalSFXObjects+0x404>)
	defaultPresetKnobValues[Pitchshift][8] = 0.25f;
 8014c04:	f8c3 10e8 	str.w	r1, [r3, #232]	; 0xe8
	defaultPresetKnobValues[Pitchshift][9] = 0.25f;
 8014c08:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
	defaultPresetKnobValues[AutotuneMono][1] = 1.0f; // amount
 8014c0c:	f8c3 4130 	str.w	r4, [r3, #304]	; 0x130
	defaultPresetKnobValues[AutotuneMono][3] = 1.0f; // leap allow
 8014c10:	f8c3 4138 	str.w	r4, [r3, #312]	; 0x138
	defaultPresetKnobValues[AutotuneMono][4] = 0.25f; // hysteresis
 8014c14:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
	defaultPresetKnobValues[AutotunePoly][0] = 1.0f; // fidelity thresh
 8014c18:	f8c3 4190 	str.w	r4, [r3, #400]	; 0x190
	defaultPresetKnobValues[SamplerButtonPress][1] = 1.0f; // end
 8014c1c:	f8c3 41f8 	str.w	r4, [r3, #504]	; 0x1f8
	defaultPresetKnobValues[SamplerButtonPress][4] = 0.4f;//crossfade
 8014c20:	f8c3 7204 	str.w	r7, [r3, #516]	; 0x204
	defaultPresetKnobValues[SamplerKeyboard][1] = 1.0f; // end
 8014c24:	f8c3 425c 	str.w	r4, [r3, #604]	; 0x25c
	defaultPresetKnobValues[SamplerKeyboard][5] = 0.4f;//crossfade
 8014c28:	f8c3 726c 	str.w	r7, [r3, #620]	; 0x26c
	defaultPresetKnobValues[SamplerAutoGrab][3] = 0.25f; // crossfade
 8014c2c:	f8c3 12c8 	str.w	r1, [r3, #712]	; 0x2c8
	defaultPresetKnobValues[SamplerButtonPress][2] = 0.75f; // speed
 8014c30:	f8c3 e1fc 	str.w	lr, [r3, #508]	; 0x1fc
	defaultPresetKnobValues[AutotunePoly][2] = 0.1f;
 8014c34:	f8c3 0198 	str.w	r0, [r3, #408]	; 0x198
	defaultPresetKnobValues[SamplerKeyboard][2] = 0.75f; // speed
 8014c38:	f8c3 e260 	str.w	lr, [r3, #608]	; 0x260
	defaultPresetKnobValues[SamplerAutoGrab][2] = 0.75f; // speed
 8014c3c:	f8c3 e2c4 	str.w	lr, [r3, #708]	; 0x2c4
	defaultPresetKnobValues[AutotuneMono][0] = 0.0f; // pickiness
 8014c40:	f8c3 612c 	str.w	r6, [r3, #300]	; 0x12c
	defaultPresetKnobValues[AutotuneMono][2] = 0.5f; // speed
 8014c44:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	defaultPresetKnobValues[AutotunePoly][1] = 0.5f;
 8014c48:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	defaultPresetKnobValues[AutotunePoly][3] = 0.0f;
 8014c4c:	f8c3 619c 	str.w	r6, [r3, #412]	; 0x19c
	defaultPresetKnobValues[AutotunePoly][4] = 0.0f;
 8014c50:	f8c3 61a0 	str.w	r6, [r3, #416]	; 0x1a0
	defaultPresetKnobValues[SamplerButtonPress][0] = 0.0f; // start
 8014c54:	f8c3 61f4 	str.w	r6, [r3, #500]	; 0x1f4
	defaultPresetKnobValues[SamplerButtonPress][3] = 0.5f; // speed mult
 8014c58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	defaultPresetKnobValues[SamplerKeyboard][0] = 0.0f; // start
 8014c5c:	f8c3 6258 	str.w	r6, [r3, #600]	; 0x258
	defaultPresetKnobValues[SamplerKeyboard][3] = 0.5f; // speed mult
 8014c60:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	defaultPresetKnobValues[SamplerKeyboard][4] = 0.0f; //looping on
 8014c64:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	defaultPresetKnobValues[SamplerKeyboard][6] = 0.0f;//velocity sensitivity
 8014c68:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
	defaultPresetKnobValues[SamplerAutoGrab][1] = 0.5f; // window
 8014c6c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	defaultPresetKnobValues[SamplerAutoGrab][4] = 0.0f;
 8014c70:	f8c3 62cc 	str.w	r6, [r3, #716]	; 0x2cc
	defaultPresetKnobValues[SamplerAutoGrab][5] = 0.0f; // len rand
 8014c74:	f8c3 62d0 	str.w	r6, [r3, #720]	; 0x2d0
	defaultPresetKnobValues[SamplerAutoGrab][6] = 0.0f; // speed rand
 8014c78:	f8c3 62d4 	str.w	r6, [r3, #724]	; 0x2d4
	defaultPresetKnobValues[SamplerAutoGrab][7] = 0.0f;
 8014c7c:	f8c3 62d8 	str.w	r6, [r3, #728]	; 0x2d8
	defaultPresetKnobValues[SamplerAutoGrab][8] = 0.0f;
 8014c80:	f8c3 62dc 	str.w	r6, [r3, #732]	; 0x2dc
	defaultPresetKnobValues[Delay][0] = 0.25f; // delayL
 8014c84:	f8c9 1000 	str.w	r1, [r9]
	defaultPresetKnobValues[Delay][4] = 0.5f; // feedback
 8014c88:	f203 495c 	addw	r9, r3, #1116	; 0x45c
	defaultPresetKnobValues[Delay][3] = 1.0f; // lowpass
 8014c8c:	f8ca 4000 	str.w	r4, [sl]
	defaultPresetKnobValues[Reverb][1] = 0.5f; // in lowpass
 8014c90:	f203 4ab4 	addw	sl, r3, #1204	; 0x4b4
	defaultPresetKnobValues[Wavefolder][3] = 0.75f; // post gain
 8014c94:	f8c3 e390 	str.w	lr, [r3, #912]	; 0x390
	defaultPresetKnobValues[Delay][5] = 1.0f; // post gain
 8014c98:	f503 6e8c 	add.w	lr, r3, #1120	; 0x460
	defaultPresetKnobValues[Delay][1] = 0.25f; // delayR
 8014c9c:	f8cb 1000 	str.w	r1, [fp]
	defaultPresetKnobValues[Reverb][0] = 0.5f; // size
 8014ca0:	f503 6b96 	add.w	fp, r3, #1200	; 0x4b0
	defaultPresetKnobValues[Delay][5] = 1.0f; // post gain
 8014ca4:	f8ce 4000 	str.w	r4, [lr]
	defaultPresetKnobValues[Reverb][3] = 0.5f; // fb lowpass
 8014ca8:	f203 4ebc 	addw	lr, r3, #1212	; 0x4bc
	defaultPresetKnobValues[Delay][4] = 0.5f; // feedback
 8014cac:	f8c9 2000 	str.w	r2, [r9]
	defaultPresetKnobValues[Reverb][2] = 0.5f; // in highpass
 8014cb0:	f503 6997 	add.w	r9, r3, #1208	; 0x4b8
	defaultPresetKnobValues[Reverb][1] = 0.5f; // in lowpass
 8014cb4:	f8ca 2000 	str.w	r2, [sl]
	defaultPresetKnobValues[Reverb2][0] = 0.2f; // size
 8014cb8:	f203 5a14 	addw	sl, r3, #1300	; 0x514
	defaultPresetKnobValues[Reverb][0] = 0.5f; // size
 8014cbc:	f8cb 2000 	str.w	r2, [fp]
	defaultPresetKnobValues[Reverb][4] = 0.5f; // fb gain
 8014cc0:	f503 6b98 	add.w	fp, r3, #1216	; 0x4c0
	defaultPresetKnobValues[Reverb2][0] = 0.2f; // size
 8014cc4:	f8ca c000 	str.w	ip, [sl]
	defaultPresetKnobValues[Delay][2] = 0.0f; // highpass
 8014cc8:	f203 4a54 	addw	sl, r3, #1108	; 0x454
	defaultPresetKnobValues[Reverb][2] = 0.5f; // in highpass
 8014ccc:	f8c9 2000 	str.w	r2, [r9]
	defaultPresetKnobValues[Reverb2][1] = 0.5f; // lowpass
 8014cd0:	f503 69a3 	add.w	r9, r3, #1304	; 0x518
	defaultPresetKnobValues[Reverb][3] = 0.5f; // fb lowpass
 8014cd4:	f8ce 2000 	str.w	r2, [lr]
	defaultPresetKnobValues[Reverb2][2] = 0.5f; // highpass
 8014cd8:	f203 5e1c 	addw	lr, r3, #1308	; 0x51c
	defaultPresetKnobValues[Reverb][4] = 0.5f; // fb gain
 8014cdc:	f8cb 2000 	str.w	r2, [fp]
	defaultPresetKnobValues[Reverb2][3] = 0.5f; // peak freq
 8014ce0:	f503 6ba4 	add.w	fp, r3, #1312	; 0x520
	defaultPresetKnobValues[Reverb2][1] = 0.5f; // lowpass
 8014ce4:	f8c9 2000 	str.w	r2, [r9]
	defaultPresetKnobValues[Reverb2][4] = 0.5f; // peak gain
 8014ce8:	f203 5924 	addw	r9, r3, #1316	; 0x524
	defaultPresetKnobValues[Reverb2][2] = 0.5f; // highpass
 8014cec:	f8ce 2000 	str.w	r2, [lr]
	defaultPresetKnobValues[LivingString][1] = 0.1f; // detune
 8014cf0:	f203 5e7c 	addw	lr, r3, #1404	; 0x57c
	defaultPresetKnobValues[Delay][2] = 0.0f; // highpass
 8014cf4:	f8ca 6000 	str.w	r6, [sl]
	defaultPresetKnobValues[LivingString][5] = 0.25f; // prep pos
 8014cf8:	f203 5a8c 	addw	sl, r3, #1420	; 0x58c
	defaultPresetKnobValues[Distortion][0] = .25f; // pre gain
 8014cfc:	f8c3 1320 	str.w	r1, [r3, #800]	; 0x320
	defaultPresetKnobValues[Distortion][4] = 0.25f; //post gain
 8014d00:	f8c3 1330 	str.w	r1, [r3, #816]	; 0x330
	defaultPresetKnobValues[Wavefolder][0] = 0.4f; // gain
 8014d04:	f8c3 7384 	str.w	r7, [r3, #900]	; 0x384
	defaultPresetKnobValues[BitCrusher][0] = 0.1f; // quality
 8014d08:	f8c3 03e8 	str.w	r0, [r3, #1000]	; 0x3e8
	defaultPresetKnobValues[SamplerAutoGrab][9] = 0.0f;
 8014d0c:	f8c3 62e0 	str.w	r6, [r3, #736]	; 0x2e0
	defaultPresetKnobValues[Distortion][1] = 0.5f; // tilt (low and high shelves, opposing gains)
 8014d10:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	defaultPresetKnobValues[Distortion][2] = 0.5f; // mid gain
 8014d14:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	defaultPresetKnobValues[Distortion][3] = 0.5f; // mid freq
 8014d18:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
	defaultPresetKnobValues[Wavefolder][1] = 0.5f; // offset1
 8014d1c:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	defaultPresetKnobValues[Wavefolder][2] = 0.5f; // offset2
 8014d20:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
	defaultPresetKnobValues[Wavefolder][4] = 0.0f;
 8014d24:	f8c3 6394 	str.w	r6, [r3, #916]	; 0x394
	defaultPresetKnobValues[BitCrusher][1] = 0.5f; // samp ratio
 8014d28:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
	defaultPresetKnobValues[BitCrusher][2] = 0.0f; // rounding
 8014d2c:	f8c3 63f0 	str.w	r6, [r3, #1008]	; 0x3f0
	defaultPresetKnobValues[BitCrusher][3] = 0.0f; // operation
 8014d30:	f8c3 63f4 	str.w	r6, [r3, #1012]	; 0x3f4
	defaultPresetKnobValues[BitCrusher][4] = 0.5f; // post gain
 8014d34:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
	defaultPresetKnobValues[BitCrusher][5] = 0.0f; // pre gain
 8014d38:	f8c3 63fc 	str.w	r6, [r3, #1020]	; 0x3fc
	defaultPresetKnobValues[Reverb2][3] = 0.5f; // peak freq
 8014d3c:	f8cb 2000 	str.w	r2, [fp]
	defaultPresetKnobValues[LivingString][4] = 0.5f; // pick pos
 8014d40:	f503 6bb1 	add.w	fp, r3, #1416	; 0x588
	defaultPresetKnobValues[Reverb2][4] = 0.5f; // peak gain
 8014d44:	f8c9 2000 	str.w	r2, [r9]
	defaultPresetKnobValues[LivingString][9] = 0.5f;
 8014d48:	f203 599c 	addw	r9, r3, #1436	; 0x59c
	defaultPresetKnobValues[LivingString][1] = 0.1f; // detune
 8014d4c:	f8ce 0000 	str.w	r0, [lr]
	defaultPresetKnobValues[LivingStringSynth][0] = 0.5f;
 8014d50:	f203 5edc 	addw	lr, r3, #1500	; 0x5dc
	defaultPresetKnobValues[LivingString][5] = 0.25f; // prep pos
 8014d54:	f8ca 1000 	str.w	r1, [sl]
	defaultPresetKnobValues[LivingStringSynth][2] = .85f; // decay
 8014d58:	f203 5ae4 	addw	sl, r3, #1508	; 0x5e4
	defaultPresetKnobValues[LivingStringSynth][0] = 0.5f;
 8014d5c:	f8ce 2000 	str.w	r2, [lr]
	defaultPresetKnobValues[LivingStringSynth][3] = 1.0f; // damping
 8014d60:	f503 6ebd 	add.w	lr, r3, #1512	; 0x5e8
	defaultPresetKnobValues[LivingStringSynth][2] = .85f; // decay
 8014d64:	f8ca 8000 	str.w	r8, [sl]
	defaultPresetKnobValues[LivingStringSynth][5] = 0.25f; // prep pos
 8014d68:	f503 6abe 	add.w	sl, r3, #1520	; 0x5f0
	defaultPresetKnobValues[LivingString][9] = 0.5f;
 8014d6c:	f8c9 2000 	str.w	r2, [r9]
	defaultPresetKnobValues[LivingStringSynth][4] = 0.4f; // pick pos
 8014d70:	f203 59ec 	addw	r9, r3, #1516	; 0x5ec
	defaultPresetKnobValues[LivingStringSynth][3] = 1.0f; // damping
 8014d74:	f8ce 4000 	str.w	r4, [lr]
	defaultPresetKnobValues[LivingStringSynth][9] = 0.4f; // release time
 8014d78:	f503 64c0 	add.w	r4, r3, #1536	; 0x600
	defaultPresetKnobValues[LivingStringSynth][5] = 0.25f; // prep pos
 8014d7c:	f8ca 1000 	str.w	r1, [sl]
	defaultPresetKnobValues[ClassicSynth][0] = 0.5f; // volume
 8014d80:	f503 6ec8 	add.w	lr, r3, #1600	; 0x640
	defaultPresetKnobValues[ClassicSynth][2] = 0.2f; // detune
 8014d84:	f503 6ac9 	add.w	sl, r3, #1608	; 0x648
	defaultPresetKnobValues[LivingStringSynth][4] = 0.4f; // pick pos
 8014d88:	f8c9 7000 	str.w	r7, [r9]
	defaultPresetKnobValues[ClassicSynth][0] = 0.5f; // volume
 8014d8c:	f8ce 2000 	str.w	r2, [lr]
	defaultPresetKnobValues[ClassicSynth][1] = 0.5f; // lowpass
 8014d90:	f203 6844 	addw	r8, r3, #1604	; 0x644
	defaultPresetKnobValues[ClassicSynth][2] = 0.2f; // detune
 8014d94:	f8ca c000 	str.w	ip, [sl]
	defaultPresetKnobValues[LivingString][0] = 0.3f; // freq 1
 8014d98:	f503 69af 	add.w	r9, r3, #1400	; 0x578
	defaultPresetKnobValues[LivingStringSynth][9] = 0.4f; // release time
 8014d9c:	6027      	str	r7, [r4, #0]
	defaultPresetKnobValues[LivingString][2] = 0.3f; // decay
 8014d9e:	f503 6eb0 	add.w	lr, r3, #1408	; 0x580
	defaultPresetKnobValues[LivingString][0] = 0.3f; // freq 1
 8014da2:	4c40      	ldr	r4, [pc, #256]	; (8014ea4 <initGlobalSFXObjects+0x408>)
	defaultPresetKnobValues[LivingString][11] = 0.3f;// freq 3
 8014da4:	f203 5ca4 	addw	ip, r3, #1444	; 0x5a4
	defaultPresetKnobValues[LivingString][12] = 0.3f;// freq 4
 8014da8:	f503 67b5 	add.w	r7, r3, #1448	; 0x5a8
	defaultPresetKnobValues[ClassicSynth][1] = 0.5f; // lowpass
 8014dac:	f8c8 2000 	str.w	r2, [r8]
	defaultPresetKnobValues[LivingString][0] = 0.3f; // freq 1
 8014db0:	f8c9 4000 	str.w	r4, [r9]
	defaultPresetKnobValues[LivingString][10] = 0.3f;// freq 2
 8014db4:	f503 68b4 	add.w	r8, r3, #1440	; 0x5a0
	defaultPresetKnobValues[LivingString][2] = 0.3f; // decay
 8014db8:	f8ce 4000 	str.w	r4, [lr]
	defaultPresetKnobValues[LivingString][13] = 0.3f;// freq 5
 8014dbc:	f203 59ac 	addw	r9, r3, #1452	; 0x5ac
	defaultPresetKnobValues[LivingString][11] = 0.3f;// freq 3
 8014dc0:	f8cc 4000 	str.w	r4, [ip]
	defaultPresetKnobValues[LivingString][14] = 0.3f;// freq 6
 8014dc4:	f503 6eb6 	add.w	lr, r3, #1456	; 0x5b0
	defaultPresetKnobValues[LivingStringSynth][8] = 0.3f; // feedback volume
 8014dc8:	f203 5afc 	addw	sl, r3, #1532	; 0x5fc
	defaultPresetKnobValues[LivingString][3] = 0.9f; // damping
 8014dcc:	f203 5c84 	addw	ip, r3, #1412	; 0x584
	defaultPresetKnobValues[LivingString][12] = 0.3f;// freq 4
 8014dd0:	603c      	str	r4, [r7, #0]
	defaultPresetKnobValues[LivingString][3] = 0.9f; // damping
 8014dd2:	4f35      	ldr	r7, [pc, #212]	; (8014ea8 <initGlobalSFXObjects+0x40c>)
	defaultPresetKnobValues[LivingString][10] = 0.3f;// freq 2
 8014dd4:	f8c8 4000 	str.w	r4, [r8]
	defaultPresetKnobValues[LivingString][6] = 0.0f; // prep index
 8014dd8:	f503 68b2 	add.w	r8, r3, #1424	; 0x590
	defaultPresetKnobValues[LivingString][13] = 0.3f;// freq 5
 8014ddc:	f8c9 4000 	str.w	r4, [r9]
	defaultPresetKnobValues[LivingString][7] = 0.0f; // let ring
 8014de0:	f203 5994 	addw	r9, r3, #1428	; 0x594
	defaultPresetKnobValues[LivingString][4] = 0.5f; // pick pos
 8014de4:	f8cb 2000 	str.w	r2, [fp]
	defaultPresetKnobValues[LivingStringSynth][1] = 0.5f;
 8014de8:	f503 6bbc 	add.w	fp, r3, #1504	; 0x5e0
	defaultPresetKnobValues[LivingString][14] = 0.3f;// freq 6
 8014dec:	f8ce 4000 	str.w	r4, [lr]
	defaultPresetKnobValues[LivingString][8] = 0.8f;
 8014df0:	f503 6eb3 	add.w	lr, r3, #1432	; 0x598
	defaultPresetKnobValues[LivingStringSynth][8] = 0.3f; // feedback volume
 8014df4:	f8ca 4000 	str.w	r4, [sl]
	defaultPresetKnobValues[ClassicSynth][5] = 0.0f;
 8014df8:	f203 6454 	addw	r4, r3, #1620	; 0x654
	defaultPresetKnobValues[LivingString][3] = 0.9f; // damping
 8014dfc:	f8cc 7000 	str.w	r7, [ip]
	defaultPresetKnobValues[LivingStringSynth][7] = 0.0f; // let ring
 8014e00:	f503 6cbf 	add.w	ip, r3, #1528	; 0x5f8
	defaultPresetKnobValues[LivingString][8] = 0.8f;
 8014e04:	eddf 7a29 	vldr	s15, [pc, #164]	; 8014eac <initGlobalSFXObjects+0x410>
	defaultPresetKnobValues[LivingStringSynth][6] = 0.0f; // prep index
 8014e08:	f203 5af4 	addw	sl, r3, #1524	; 0x5f4
	defaultPresetKnobValues[LivingStringSynth][1] = 0.5f;
 8014e0c:	f8cb 2000 	str.w	r2, [fp]
	defaultPresetKnobValues[ClassicSynth][6] = 0.06f;
 8014e10:	f503 6bcb 	add.w	fp, r3, #1624	; 0x658
	defaultPresetKnobValues[LivingString][6] = 0.0f; // prep index
 8014e14:	f8c8 6000 	str.w	r6, [r8]
	defaultPresetKnobValues[ClassicSynth][3] = 0.0f;
 8014e18:	f203 684c 	addw	r8, r3, #1612	; 0x64c
	defaultPresetKnobValues[LivingString][7] = 0.0f; // let ring
 8014e1c:	f8c9 6000 	str.w	r6, [r9]
	defaultPresetKnobValues[ClassicSynth][4] = 0.0f;
 8014e20:	f503 69ca 	add.w	r9, r3, #1616	; 0x650
	defaultPresetKnobValues[LivingString][8] = 0.8f;
 8014e24:	edce 7a00 	vstr	s15, [lr]
	defaultPresetKnobValues[ClassicSynth][7] = 0.9f;
 8014e28:	f203 6e5c 	addw	lr, r3, #1628	; 0x65c
	defaultPresetKnobValues[LivingStringSynth][7] = 0.0f; // let ring
 8014e2c:	f8cc 6000 	str.w	r6, [ip]
	defaultPresetKnobValues[ClassicSynth][8] = 0.1f;
 8014e30:	f503 6ccc 	add.w	ip, r3, #1632	; 0x660
	defaultPresetKnobValues[ClassicSynth][5] = 0.0f;
 8014e34:	6026      	str	r6, [r4, #0]
	defaultPresetKnobValues[ClassicSynth][6] = 0.06f;
 8014e36:	4c1e      	ldr	r4, [pc, #120]	; (8014eb0 <initGlobalSFXObjects+0x414>)
	defaultPresetKnobValues[LivingStringSynth][6] = 0.0f; // prep index
 8014e38:	f8ca 6000 	str.w	r6, [sl]
	defaultPresetKnobValues[ClassicSynth][11] = 0.06f;
 8014e3c:	f203 6a6c 	addw	sl, r3, #1644	; 0x66c
	defaultPresetKnobValues[ClassicSynth][6] = 0.06f;
 8014e40:	f8cb 4000 	str.w	r4, [fp]
	defaultPresetKnobValues[ClassicSynth][3] = 0.0f;
 8014e44:	f8c8 6000 	str.w	r6, [r8]
	defaultPresetKnobValues[ClassicSynth][9] = 0.1f;
 8014e48:	f203 6864 	addw	r8, r3, #1636	; 0x664
 8014e4c:	e038      	b.n	8014ec0 <initGlobalSFXObjects+0x424>
 8014e4e:	bf00      	nop
 8014e50:	20000654 	.word	0x20000654
 8014e54:	20016448 	.word	0x20016448
 8014e58:	20000620 	.word	0x20000620
 8014e5c:	2aaaaaab 	.word	0x2aaaaaab
 8014e60:	20017950 	.word	0x20017950
 8014e64:	20014b2c 	.word	0x20014b2c
 8014e68:	20017554 	.word	0x20017554
 8014e6c:	3ca3d70a 	.word	0x3ca3d70a
 8014e70:	00000000 	.word	0x00000000
 8014e74:	3c23d70a 	.word	0x3c23d70a
 8014e78:	20017294 	.word	0x20017294
 8014e7c:	ba51b717 	.word	0xba51b717
 8014e80:	447a0000 	.word	0x447a0000
 8014e84:	2001707c 	.word	0x2001707c
 8014e88:	20017970 	.word	0x20017970
 8014e8c:	3a83126f 	.word	0x3a83126f
 8014e90:	20015968 	.word	0x20015968
 8014e94:	3f28f5c3 	.word	0x3f28f5c3
 8014e98:	3ecccccd 	.word	0x3ecccccd
 8014e9c:	3f733333 	.word	0x3f733333
 8014ea0:	3dcccccd 	.word	0x3dcccccd
 8014ea4:	3e99999a 	.word	0x3e99999a
 8014ea8:	3f666666 	.word	0x3f666666
 8014eac:	3f4ccccd 	.word	0x3f4ccccd
 8014eb0:	3d75c28f 	.word	0x3d75c28f
 8014eb4:	3ca3d70a 	.word	0x3ca3d70a
 8014eb8:	3e4ccccd 	.word	0x3e4ccccd
 8014ebc:	3f59999a 	.word	0x3f59999a
	defaultPresetKnobValues[ClassicSynth][4] = 0.0f;
 8014ec0:	f8c9 6000 	str.w	r6, [r9]
	defaultPresetKnobValues[ClassicSynth][12] = 0.9f;
 8014ec4:	f503 69ce 	add.w	r9, r3, #1648	; 0x670
	defaultPresetKnobValues[ClassicSynth][7] = 0.9f;
 8014ec8:	f8ce 7000 	str.w	r7, [lr]
	defaultPresetKnobValues[ClassicSynth][13] = 0.1f;
 8014ecc:	f203 6e74 	addw	lr, r3, #1652	; 0x674
	defaultPresetKnobValues[ClassicSynth][8] = 0.1f;
 8014ed0:	f8cc 0000 	str.w	r0, [ip]
	defaultPresetKnobValues[ClassicSynth][14] = 0.1f;
 8014ed4:	f503 6ccf 	add.w	ip, r3, #1656	; 0x678
	defaultPresetKnobValues[ClassicSynth][9] = 0.1f;
 8014ed8:	f8c8 0000 	str.w	r0, [r8]
	defaultPresetKnobValues[ClassicSynth][16] = 0.06f;
 8014edc:	f503 68d0 	add.w	r8, r3, #1664	; 0x680
	defaultPresetKnobValues[ClassicSynth][13] = 0.1f;
 8014ee0:	f8ce 0000 	str.w	r0, [lr]
	defaultPresetKnobValues[ClassicSynth][18] = 0.1f;
 8014ee4:	f503 6ed1 	add.w	lr, r3, #1672	; 0x688
	defaultPresetKnobValues[ClassicSynth][14] = 0.1f;
 8014ee8:	f8cc 0000 	str.w	r0, [ip]
	defaultPresetKnobValues[ClassicSynth][19] = 0.1f;
 8014eec:	f203 6c8c 	addw	ip, r3, #1676	; 0x68c
	defaultPresetKnobValues[ClassicSynth][16] = 0.06f;
 8014ef0:	f8c8 4000 	str.w	r4, [r8]
	defaultPresetKnobValues[Rhodes][0] = 0.25f;
 8014ef4:	f203 68a4 	addw	r8, r3, #1700	; 0x6a4
	defaultPresetKnobValues[ClassicSynth][18] = 0.1f;
 8014ef8:	f8ce 0000 	str.w	r0, [lr]
	defaultPresetKnobValues[Rhodes][2] = 0.25f;
 8014efc:	f203 6eac 	addw	lr, r3, #1708	; 0x6ac
	defaultPresetKnobValues[ClassicSynth][19] = 0.1f;
 8014f00:	f8cc 0000 	str.w	r0, [ip]
	defaultPresetKnobValues[Rhodes][3] = 0.5f;
 8014f04:	f503 6cd6 	add.w	ip, r3, #1712	; 0x6b0
	defaultPresetKnobValues[ClassicSynth][11] = 0.06f;
 8014f08:	f8ca 4000 	str.w	r4, [sl]
	defaultPresetKnobValues[Rhodes][7] = 0.9f;
 8014f0c:	f503 60d8 	add.w	r0, r3, #1728	; 0x6c0
	defaultPresetKnobValues[Rhodes][1] = 0.25f;
 8014f10:	f503 64d5 	add.w	r4, r3, #1704	; 0x6a8
	defaultPresetKnobValues[ClassicSynth][12] = 0.9f;
 8014f14:	f8c9 7000 	str.w	r7, [r9]
	defaultPresetKnobValues[Rhodes][0] = 0.25f;
 8014f18:	f8c8 1000 	str.w	r1, [r8]
	defaultPresetKnobValues[ClassicSynth][17] = 0.9f;
 8014f1c:	f203 6984 	addw	r9, r3, #1668	; 0x684
	defaultPresetKnobValues[Rhodes][1] = 0.25f;
 8014f20:	6021      	str	r1, [r4, #0]
	defaultPresetKnobValues[Rhodes][9] = 0.5f;
 8014f22:	f503 68d9 	add.w	r8, r3, #1736	; 0x6c8
	defaultPresetKnobValues[Rhodes][2] = 0.25f;
 8014f26:	f8ce 1000 	str.w	r1, [lr]
	defaultPresetKnobValues[Rhodes][12] = 0.9f;
 8014f2a:	f203 64d4 	addw	r4, r3, #1748	; 0x6d4
	defaultPresetKnobValues[Rhodes][7] = 0.9f;
 8014f2e:	6007      	str	r7, [r0, #0]
	defaultPresetKnobValues[Rhodes][14] = 0.5f;
 8014f30:	f203 6edc 	addw	lr, r3, #1756	; 0x6dc
	defaultPresetKnobValues[Rhodes][3] = 0.5f;
 8014f34:	f8cc 2000 	str.w	r2, [ip]
	defaultPresetKnobValues[Rhodes][15] = 0.8f;
 8014f38:	f503 61dc 	add.w	r1, r3, #1760	; 0x6e0
	defaultPresetKnobValues[Rhodes][18] = 0.5f;
 8014f3c:	f203 6cec 	addw	ip, r3, #1772	; 0x6ec
	defaultPresetKnobValues[Rhodes][19] = 0.5f;
 8014f40:	f503 60de 	add.w	r0, r3, #1776	; 0x6f0
	defaultPresetKnobValues[ClassicSynth][17] = 0.9f;
 8014f44:	f8c9 7000 	str.w	r7, [r9]
	defaultPresetKnobValues[Rhodes][8] = 0.1007f;
 8014f48:	f203 6ac4 	addw	sl, r3, #1732	; 0x6c4
	defaultPresetKnobValues[Rhodes][12] = 0.9f;
 8014f4c:	6027      	str	r7, [r4, #0]
	defaultPresetKnobValues[ClassicSynth][15] = 0.0f;
 8014f4e:	f203 647c 	addw	r4, r3, #1660	; 0x67c
	defaultPresetKnobValues[Rhodes][9] = 0.5f;
 8014f52:	f8c8 2000 	str.w	r2, [r8]
	defaultPresetKnobValues[Rhodes][4] = 0.0f; //stereo spread
 8014f56:	f203 67b4 	addw	r7, r3, #1716	; 0x6b4
	defaultPresetKnobValues[Rhodes][14] = 0.5f;
 8014f5a:	f8ce 2000 	str.w	r2, [lr]
	defaultPresetKnobValues[Rhodes][5] = 0.05f;
 8014f5e:	f503 68d7 	add.w	r8, r3, #1720	; 0x6b8
	defaultPresetKnobValues[Rhodes][6] = 0.05f;
 8014f62:	f203 6ebc 	addw	lr, r3, #1724	; 0x6bc
	defaultPresetKnobValues[Rhodes][18] = 0.5f;
 8014f66:	f8cc 2000 	str.w	r2, [ip]
	defaultPresetKnobValues[Rhodes][19] = 0.5f;
 8014f6a:	6002      	str	r2, [r0, #0]
	defaultPresetKnobValues[Rhodes][10] = 0.05f;
 8014f6c:	f203 6ccc 	addw	ip, r3, #1740	; 0x6cc
	defaultPresetKnobValues[Rhodes][11] = 0.05f;
 8014f70:	f503 60da 	add.w	r0, r3, #1744	; 0x6d0
	defaultPresetKnobValues[Rhodes][15] = 0.8f;
 8014f74:	edc1 7a00 	vstr	s15, [r1]
	defaultPresetKnobValues[Rhodes][5] = 0.05f;
 8014f78:	4920      	ldr	r1, [pc, #128]	; (8014ffc <initGlobalSFXObjects+0x560>)
	defaultPresetKnobValues[ClassicSynth][10] = 0.0f;
 8014f7a:	f503 69cd 	add.w	r9, r3, #1640	; 0x668
	defaultPresetKnobValues[ClassicSynth][15] = 0.0f;
 8014f7e:	6026      	str	r6, [r4, #0]
	defaultPresetKnobValues[Rhodes][13] = 0.1007f;
 8014f80:	f503 64db 	add.w	r4, r3, #1752	; 0x6d8
	defaultPresetKnobValues[Rhodes][4] = 0.0f; //stereo spread
 8014f84:	603e      	str	r6, [r7, #0]
	defaultPresetKnobValues[Rhodes][16] = 0.6f;
 8014f86:	f203 67e4 	addw	r7, r3, #1764	; 0x6e4
	defaultPresetKnobValues[Rhodes][5] = 0.05f;
 8014f8a:	f8c8 1000 	str.w	r1, [r8]
	defaultPresetKnobValues[Rhodes][20] = 0.5f;
 8014f8e:	f203 68f4 	addw	r8, r3, #1780	; 0x6f4
	defaultPresetKnobValues[Rhodes][6] = 0.05f;
 8014f92:	f8ce 1000 	str.w	r1, [lr]
	defaultPresetKnobValues[Rhodes][21] = 0.0f;
 8014f96:	f503 6edf 	add.w	lr, r3, #1784	; 0x6f8
	defaultPresetKnobValues[Rhodes][10] = 0.05f;
 8014f9a:	f8cc 1000 	str.w	r1, [ip]
	defaultPresetKnobValues[Rhodes][22] = 0.00f;
 8014f9e:	f203 6cfc 	addw	ip, r3, #1788	; 0x6fc
	defaultPresetKnobValues[Rhodes][11] = 0.05f;
 8014fa2:	6001      	str	r1, [r0, #0]
	defaultPresetKnobValues[Rhodes][23] = 0.00f;
 8014fa4:	f503 60e0 	add.w	r0, r3, #1792	; 0x700
	defaultPresetKnobValues[Rhodes][8] = 0.1007f;
 8014fa8:	4915      	ldr	r1, [pc, #84]	; (8015000 <initGlobalSFXObjects+0x564>)
 8014faa:	4d16      	ldr	r5, [pc, #88]	; (8015004 <initGlobalSFXObjects+0x568>)
	defaultPresetKnobValues[Rhodes][16] = 0.6f;
 8014fac:	f8df b05c 	ldr.w	fp, [pc, #92]	; 801500c <initGlobalSFXObjects+0x570>
	defaultPresetKnobValues[ClassicSynth][10] = 0.0f;
 8014fb0:	f8c9 6000 	str.w	r6, [r9]
	defaultPresetKnobValues[Rhodes][17] = 0.7f;
 8014fb4:	f503 69dd 	add.w	r9, r3, #1768	; 0x6e8
	defaultPresetKnobValues[Rhodes][13] = 0.1007f;
 8014fb8:	6021      	str	r1, [r4, #0]
 8014fba:	461c      	mov	r4, r3
	defaultPresetKnobValues[Rhodes][8] = 0.1007f;
 8014fbc:	f8ca 1000 	str.w	r1, [sl]
	defaultPresetKnobValues[Rhodes][24] = 0.00f;
 8014fc0:	f203 7104 	addw	r1, r3, #1796	; 0x704
	defaultPresetKnobValues[Rhodes][16] = 0.6f;
 8014fc4:	f8c7 b000 	str.w	fp, [r7]
 8014fc8:	f505 67e1 	add.w	r7, r5, #1800	; 0x708
	defaultPresetKnobValues[Rhodes][17] = 0.7f;
 8014fcc:	4b0e      	ldr	r3, [pc, #56]	; (8015008 <initGlobalSFXObjects+0x56c>)
 8014fce:	f8c9 3000 	str.w	r3, [r9]
	defaultPresetKnobValues[Rhodes][20] = 0.5f;
 8014fd2:	f8c8 2000 	str.w	r2, [r8]
	defaultPresetKnobValues[Rhodes][21] = 0.0f;
 8014fd6:	f8ce 6000 	str.w	r6, [lr]
	defaultPresetKnobValues[Rhodes][22] = 0.00f;
 8014fda:	f8cc 6000 	str.w	r6, [ip]
	defaultPresetKnobValues[Rhodes][23] = 0.00f;
 8014fde:	6006      	str	r6, [r0, #0]
	defaultPresetKnobValues[Rhodes][24] = 0.00f;
 8014fe0:	600e      	str	r6, [r1, #0]
 8014fe2:	4628      	mov	r0, r5
 8014fe4:	3564      	adds	r5, #100	; 0x64
 8014fe6:	4621      	mov	r1, r4
 8014fe8:	2264      	movs	r2, #100	; 0x64
 8014fea:	f012 fa9b 	bl	8027524 <memcpy>
	for (int p = 0; p < PresetNil; p++)
 8014fee:	42af      	cmp	r7, r5
 8014ff0:	f104 0464 	add.w	r4, r4, #100	; 0x64
 8014ff4:	d1f5      	bne.n	8014fe2 <initGlobalSFXObjects+0x546>
}
 8014ff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ffa:	bf00      	nop
 8014ffc:	3d4ccccd 	.word	0x3d4ccccd
 8015000:	3dce3bcd 	.word	0x3dce3bcd
 8015004:	20016710 	.word	0x20016710
 8015008:	3f333333 	.word	0x3f333333
 801500c:	3f19999a 	.word	0x3f19999a

08015010 <SFXVocoderAlloc>:
{
 8015010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	leaf.clearOnAllocation = 1;
 8015014:	4b3c      	ldr	r3, [pc, #240]	; (8015108 <SFXVocoderAlloc+0xf8>)
 8015016:	2501      	movs	r5, #1
	tTalkboxFloat_initToPool(&vocoder, 1024,  &smallPool);
 8015018:	4a3c      	ldr	r2, [pc, #240]	; (801510c <SFXVocoderAlloc+0xfc>)
 801501a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801501e:	483c      	ldr	r0, [pc, #240]	; (8015110 <SFXVocoderAlloc+0x100>)
	tHighpass_initToPool(&noiseHP, 4500.0f, &smallPool);
 8015020:	2400      	movs	r4, #0
	tSimplePoly_setNumVoices(&poly, numVoices);
 8015022:	f8df 9138 	ldr.w	r9, [pc, #312]	; 801515c <SFXVocoderAlloc+0x14c>
 8015026:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8015160 <SFXVocoderAlloc+0x150>
 801502a:	4f3a      	ldr	r7, [pc, #232]	; (8015114 <SFXVocoderAlloc+0x104>)
		tSawtooth_initToPool(&osc[i], &smallPool);
 801502c:	4e37      	ldr	r6, [pc, #220]	; (801510c <SFXVocoderAlloc+0xfc>)
{
 801502e:	ed2d 8b02 	vpush	{d8}
	leaf.clearOnAllocation = 1;
 8015032:	615d      	str	r5, [r3, #20]
	tTalkboxFloat_initToPool(&vocoder, 1024,  &smallPool);
 8015034:	f00b fc9a 	bl	802096c <tTalkboxFloat_initToPool>
	tTalkboxFloat_setWarpOn(&vocoder, 1);
 8015038:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801503c:	4834      	ldr	r0, [pc, #208]	; (8015110 <SFXVocoderAlloc+0x100>)
 801503e:	f00b ff49 	bl	8020ed4 <tTalkboxFloat_setWarpOn>
	tNoise_initToPool(&vocoderNoise, WhiteNoise, &smallPool);
 8015042:	4a32      	ldr	r2, [pc, #200]	; (801510c <SFXVocoderAlloc+0xfc>)
 8015044:	4621      	mov	r1, r4
 8015046:	4834      	ldr	r0, [pc, #208]	; (8015118 <SFXVocoderAlloc+0x108>)
 8015048:	f010 f96e 	bl	8025328 <tNoise_initToPool>
	tZeroCrossing_initToPool(&zerox, 16, &smallPool);
 801504c:	4a2f      	ldr	r2, [pc, #188]	; (801510c <SFXVocoderAlloc+0xfc>)
 801504e:	2110      	movs	r1, #16
 8015050:	4832      	ldr	r0, [pc, #200]	; (801511c <SFXVocoderAlloc+0x10c>)
 8015052:	f009 fef5 	bl	801ee40 <tZeroCrossing_initToPool>
	tSimplePoly_setNumVoices(&poly, numVoices);
 8015056:	f899 1000 	ldrb.w	r1, [r9]
 801505a:	4831      	ldr	r0, [pc, #196]	; (8015120 <SFXVocoderAlloc+0x110>)
 801505c:	f00f fff0 	bl	8025040 <tSimplePoly_setNumVoices>
	tExpSmooth_initToPool(&noiseRamp, 0.0f, 0.005f, &smallPool);
 8015060:	492a      	ldr	r1, [pc, #168]	; (801510c <SFXVocoderAlloc+0xfc>)
 8015062:	eddf 0a30 	vldr	s1, [pc, #192]	; 8015124 <SFXVocoderAlloc+0x114>
 8015066:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8015128 <SFXVocoderAlloc+0x118>
 801506a:	4830      	ldr	r0, [pc, #192]	; (801512c <SFXVocoderAlloc+0x11c>)
 801506c:	f00d fcb8 	bl	80229e0 <tExpSmooth_initToPool>
	tVZFilter_initToPool(&shelf1, Lowshelf, 80.0f, 6.0f, &smallPool);
 8015070:	4a26      	ldr	r2, [pc, #152]	; (801510c <SFXVocoderAlloc+0xfc>)
 8015072:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8015076:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8015130 <SFXVocoderAlloc+0x120>
 801507a:	2106      	movs	r1, #6
 801507c:	482d      	ldr	r0, [pc, #180]	; (8015134 <SFXVocoderAlloc+0x124>)
 801507e:	f00e f83d 	bl	80230fc <tVZFilter_initToPool>
	tVZFilter_initToPool(&shelf2, Highshelf, 12000.0f, 6.0f, &smallPool);
 8015082:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8015086:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015138 <SFXVocoderAlloc+0x128>
 801508a:	2107      	movs	r1, #7
 801508c:	4a1f      	ldr	r2, [pc, #124]	; (801510c <SFXVocoderAlloc+0xfc>)
 801508e:	482b      	ldr	r0, [pc, #172]	; (801513c <SFXVocoderAlloc+0x12c>)
 8015090:	f00e f834 	bl	80230fc <tVZFilter_initToPool>
		tRosenbergGlottalPulse_setOpenLengthAndPulseLength(&glottal[i], 0.3f, 0.4f);
 8015094:	eddf 8a2a 	vldr	s17, [pc, #168]	; 8015140 <SFXVocoderAlloc+0x130>
	tNoise_initToPool(&breathNoise, WhiteNoise, &smallPool);
 8015098:	4a1c      	ldr	r2, [pc, #112]	; (801510c <SFXVocoderAlloc+0xfc>)
 801509a:	4621      	mov	r1, r4
 801509c:	4829      	ldr	r0, [pc, #164]	; (8015144 <SFXVocoderAlloc+0x134>)
		tRosenbergGlottalPulse_setOpenLengthAndPulseLength(&glottal[i], 0.3f, 0.4f);
 801509e:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 8015148 <SFXVocoderAlloc+0x138>
	tNoise_initToPool(&breathNoise, WhiteNoise, &smallPool);
 80150a2:	f010 f941 	bl	8025328 <tNoise_initToPool>
	tHighpass_initToPool(&noiseHP, 4500.0f, &smallPool);
 80150a6:	4919      	ldr	r1, [pc, #100]	; (801510c <SFXVocoderAlloc+0xfc>)
 80150a8:	ed9f 0a28 	vldr	s0, [pc, #160]	; 801514c <SFXVocoderAlloc+0x13c>
 80150ac:	4828      	ldr	r0, [pc, #160]	; (8015150 <SFXVocoderAlloc+0x140>)
 80150ae:	f00d ffe1 	bl	8023074 <tHighpass_initToPool>
 80150b2:	193d      	adds	r5, r7, r4
		tSawtooth_initToPool(&osc[i], &smallPool);
 80150b4:	eb08 0004 	add.w	r0, r8, r4
 80150b8:	4631      	mov	r1, r6
 80150ba:	3404      	adds	r4, #4
 80150bc:	f010 f87e 	bl	80251bc <tSawtooth_initToPool>
		tRosenbergGlottalPulse_initToPool(&glottal[i], &smallPool);
 80150c0:	4628      	mov	r0, r5
 80150c2:	4631      	mov	r1, r6
 80150c4:	f00b ff12 	bl	8020eec <tRosenbergGlottalPulse_initToPool>
		tRosenbergGlottalPulse_setOpenLengthAndPulseLength(&glottal[i], 0.3f, 0.4f);
 80150c8:	eef0 0a68 	vmov.f32	s1, s17
 80150cc:	eeb0 0a48 	vmov.f32	s0, s16
 80150d0:	4628      	mov	r0, r5
 80150d2:	f00c f825 	bl	8021120 <tRosenbergGlottalPulse_setOpenLengthAndPulseLength>
	for (int i = 0; i < NUM_VOC_VOICES; i++)
 80150d6:	2c20      	cmp	r4, #32
 80150d8:	d1eb      	bne.n	80150b2 <SFXVocoderAlloc+0xa2>
	setLED_A(numVoices == 1);
 80150da:	f899 0000 	ldrb.w	r0, [r9]
 80150de:	f1a0 0001 	sub.w	r0, r0, #1
 80150e2:	fab0 f080 	clz	r0, r0
 80150e6:	0940      	lsrs	r0, r0, #5
 80150e8:	f7fe fde6 	bl	8013cb8 <setLED_A>
	setLED_B(internalExternal);
 80150ec:	4b19      	ldr	r3, [pc, #100]	; (8015154 <SFXVocoderAlloc+0x144>)
 80150ee:	7818      	ldrb	r0, [r3, #0]
 80150f0:	f7fe fdf0 	bl	8013cd4 <setLED_B>
	vocFreezeLPC = 0;
 80150f4:	2300      	movs	r3, #0
 80150f6:	4a18      	ldr	r2, [pc, #96]	; (8015158 <SFXVocoderAlloc+0x148>)
	setLED_C(vocFreezeLPC);
 80150f8:	4618      	mov	r0, r3
	vocFreezeLPC = 0;
 80150fa:	6013      	str	r3, [r2, #0]
}
 80150fc:	ecbd 8b02 	vpop	{d8}
 8015100:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	setLED_C(vocFreezeLPC);
 8015104:	f7fe bdf4 	b.w	8013cf0 <setLED_C>
 8015108:	200194a0 	.word	0x200194a0
 801510c:	20014b2c 	.word	0x20014b2c
 8015110:	20018174 	.word	0x20018174
 8015114:	20016248 	.word	0x20016248
 8015118:	20016e64 	.word	0x20016e64
 801511c:	200176c4 	.word	0x200176c4
 8015120:	20017554 	.word	0x20017554
 8015124:	3ba3d70a 	.word	0x3ba3d70a
 8015128:	00000000 	.word	0x00000000
 801512c:	2001825c 	.word	0x2001825c
 8015130:	42a00000 	.word	0x42a00000
 8015134:	20017534 	.word	0x20017534
 8015138:	463b8000 	.word	0x463b8000
 801513c:	2001745c 	.word	0x2001745c
 8015140:	3ecccccd 	.word	0x3ecccccd
 8015144:	20016218 	.word	0x20016218
 8015148:	3e99999a 	.word	0x3e99999a
 801514c:	458ca000 	.word	0x458ca000
 8015150:	20016e5c 	.word	0x20016e5c
 8015154:	2000059c 	.word	0x2000059c
 8015158:	20000614 	.word	0x20000614
 801515c:	20000250 	.word	0x20000250
 8015160:	20017314 	.word	0x20017314

08015164 <SFXVocoderFrame>:
{
 8015164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8015168:	4c84      	ldr	r4, [pc, #528]	; (801537c <SFXVocoderFrame+0x218>)
{
 801516a:	ed2d 8b02 	vpush	{d8}
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 801516e:	7d23      	ldrb	r3, [r4, #20]
 8015170:	2b01      	cmp	r3, #1
 8015172:	d113      	bne.n	801519c <SFXVocoderFrame+0x38>
		numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8015174:	4d82      	ldr	r5, [pc, #520]	; (8015380 <SFXVocoderFrame+0x21c>)
		tSimplePoly_setNumVoices(&poly, numVoices);
 8015176:	4883      	ldr	r0, [pc, #524]	; (8015384 <SFXVocoderFrame+0x220>)
		numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8015178:	782a      	ldrb	r2, [r5, #0]
 801517a:	2a01      	cmp	r2, #1
 801517c:	bf98      	it	ls
 801517e:	2308      	movls	r3, #8
		tSimplePoly_setNumVoices(&poly, numVoices);
 8015180:	4619      	mov	r1, r3
		numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8015182:	702b      	strb	r3, [r5, #0]
		tSimplePoly_setNumVoices(&poly, numVoices);
 8015184:	f00f ff5c 	bl	8025040 <tSimplePoly_setNumVoices>
		setLED_A(numVoices == 1);
 8015188:	7828      	ldrb	r0, [r5, #0]
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 801518a:	2300      	movs	r3, #0
		setLED_A(numVoices == 1);
 801518c:	f1a0 0001 	sub.w	r0, r0, #1
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 8015190:	7523      	strb	r3, [r4, #20]
		setLED_A(numVoices == 1);
 8015192:	fab0 f080 	clz	r0, r0
 8015196:	0940      	lsrs	r0, r0, #5
 8015198:	f7fe fd8e 	bl	8013cb8 <setLED_A>
	if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 801519c:	7e23      	ldrb	r3, [r4, #24]
 801519e:	2b01      	cmp	r3, #1
 80151a0:	f000 80e0 	beq.w	8015364 <SFXVocoderFrame+0x200>
	if (buttonActionsSFX[ButtonC][ActionPress] == 1)
 80151a4:	7f23      	ldrb	r3, [r4, #28]
 80151a6:	2b01      	cmp	r3, #1
 80151a8:	f000 80c9 	beq.w	801533e <SFXVocoderFrame+0x1da>
	displayValues[0] = presetKnobValues[Vocoder][0]; //vocoder volume
 80151ac:	4b76      	ldr	r3, [pc, #472]	; (8015388 <SFXVocoderFrame+0x224>)
	displayValues[6] = (presetKnobValues[Vocoder][6] * 30.0f) - 15.0f;; //tilt filter
 80151ae:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
	displayValues[1] = (presetKnobValues[Vocoder][1] * 0.4f) - 0.2f; //warp factor
 80151b2:	eddf 6a76 	vldr	s13, [pc, #472]	; 801538c <SFXVocoderFrame+0x228>
	displayValues[6] = (presetKnobValues[Vocoder][6] * 30.0f) - 15.0f;; //tilt filter
 80151b6:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
	displayValues[1] = (presetKnobValues[Vocoder][1] * 0.4f) - 0.2f; //warp factor
 80151ba:	ed93 5a01 	vldr	s10, [r3, #4]
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 80151be:	2400      	movs	r4, #0
	displayValues[1] = (presetKnobValues[Vocoder][1] * 0.4f) - 0.2f; //warp factor
 80151c0:	eddf 7a73 	vldr	s15, [pc, #460]	; 8015390 <SFXVocoderFrame+0x22c>
	displayValues[6] = (presetKnobValues[Vocoder][6] * 30.0f) - 15.0f;; //tilt filter
 80151c4:	edd3 5a06 	vldr	s11, [r3, #24]
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 80151c8:	46a1      	mov	r9, r4
	displayValues[1] = (presetKnobValues[Vocoder][1] * 0.4f) - 0.2f; //warp factor
 80151ca:	eee5 7a26 	vfma.f32	s15, s10, s13
	displayValues[2] = presetKnobValues[Vocoder][2] * 1.1f; //quality
 80151ce:	edd3 6a02 	vldr	s13, [r3, #8]
	displayValues[6] = (presetKnobValues[Vocoder][6] * 30.0f) - 15.0f;; //tilt filter
 80151d2:	eea5 7a86 	vfma.f32	s14, s11, s12
	displayValues[2] = presetKnobValues[Vocoder][2] * 1.1f; //quality
 80151d6:	ed9f 6a6f 	vldr	s12, [pc, #444]	; 8015394 <SFXVocoderFrame+0x230>
	displayValues[0] = presetKnobValues[Vocoder][0]; //vocoder volume
 80151da:	4d6f      	ldr	r5, [pc, #444]	; (8015398 <SFXVocoderFrame+0x234>)
 80151dc:	6819      	ldr	r1, [r3, #0]
	displayValues[2] = presetKnobValues[Vocoder][2] * 1.1f; //quality
 80151de:	ee66 6a86 	vmul.f32	s13, s13, s12
	displayValues[3] = presetKnobValues[Vocoder][3]; //crossfade between sawtooth and glottal pulse
 80151e2:	68da      	ldr	r2, [r3, #12]
	displayValues[4] = presetKnobValues[Vocoder][4]; //noise thresh
 80151e4:	6918      	ldr	r0, [r3, #16]
	displayValues[0] = presetKnobValues[Vocoder][0]; //vocoder volume
 80151e6:	6029      	str	r1, [r5, #0]
	tTalkboxFloat_setWarpFactor(&vocoder, displayValues[1]);
 80151e8:	eeb0 0a67 	vmov.f32	s0, s15
	displayValues[5] = presetKnobValues[Vocoder][5]; //breathy
 80151ec:	6959      	ldr	r1, [r3, #20]
	displayValues[3] = presetKnobValues[Vocoder][3]; //crossfade between sawtooth and glottal pulse
 80151ee:	60ea      	str	r2, [r5, #12]
	displayValues[7] = presetKnobValues[Vocoder][7]; //pulse length
 80151f0:	69da      	ldr	r2, [r3, #28]
	displayValues[8] = presetKnobValues[Vocoder][8]; //open length
 80151f2:	6a1b      	ldr	r3, [r3, #32]
	displayValues[4] = presetKnobValues[Vocoder][4]; //noise thresh
 80151f4:	6128      	str	r0, [r5, #16]
	tTalkboxFloat_setWarpFactor(&vocoder, displayValues[1]);
 80151f6:	4869      	ldr	r0, [pc, #420]	; (801539c <SFXVocoderFrame+0x238>)
	displayValues[1] = (presetKnobValues[Vocoder][1] * 0.4f) - 0.2f; //warp factor
 80151f8:	edc5 7a01 	vstr	s15, [r5, #4]
	displayValues[2] = presetKnobValues[Vocoder][2] * 1.1f; //quality
 80151fc:	edc5 6a02 	vstr	s13, [r5, #8]
	displayValues[5] = presetKnobValues[Vocoder][5]; //breathy
 8015200:	6169      	str	r1, [r5, #20]
	displayValues[6] = (presetKnobValues[Vocoder][6] * 30.0f) - 15.0f;; //tilt filter
 8015202:	ed85 7a06 	vstr	s14, [r5, #24]
	displayValues[7] = presetKnobValues[Vocoder][7]; //pulse length
 8015206:	61ea      	str	r2, [r5, #28]
	displayValues[8] = presetKnobValues[Vocoder][8]; //open length
 8015208:	622b      	str	r3, [r5, #32]
	tTalkboxFloat_setWarpFactor(&vocoder, displayValues[1]);
 801520a:	f00b fe5f 	bl	8020ecc <tTalkboxFloat_setWarpFactor>
	tTalkboxFloat_setQuality(&vocoder, displayValues[2]);
 801520e:	ed95 0a02 	vldr	s0, [r5, #8]
 8015212:	4862      	ldr	r0, [pc, #392]	; (801539c <SFXVocoderFrame+0x238>)
 8015214:	f00b fe3c 	bl	8020e90 <tTalkboxFloat_setQuality>
 8015218:	4f61      	ldr	r7, [pc, #388]	; (80153a0 <SFXVocoderFrame+0x23c>)
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801521a:	4e5a      	ldr	r6, [pc, #360]	; (8015384 <SFXVocoderFrame+0x220>)
		tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 801521c:	ed9f 8a61 	vldr	s16, [pc, #388]	; 80153a4 <SFXVocoderFrame+0x240>
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8015220:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80153d4 <SFXVocoderFrame+0x270>
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015224:	e04f      	b.n	80152c6 <SFXVocoderFrame+0x162>
		tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 8015226:	f00f ff3b 	bl	80250a0 <tSimplePoly_getVelocity>
 801522a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801522e:	2800      	cmp	r0, #0
 8015230:	4658      	mov	r0, fp
 8015232:	fe30 0a08 	vselgt.f32	s0, s0, s16
 8015236:	f00d fc0f 	bl	8022a58 <tExpSmooth_setDest>
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801523a:	4651      	mov	r1, sl
 801523c:	4630      	mov	r0, r6
 801523e:	f00f ff23 	bl	8025088 <tSimplePoly_getPitch>
 8015242:	ee07 0a90 	vmov	s15, r0
 8015246:	4a58      	ldr	r2, [pc, #352]	; (80153a8 <SFXVocoderFrame+0x244>)
 8015248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801524c:	4b57      	ldr	r3, [pc, #348]	; (80153ac <SFXVocoderFrame+0x248>)
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801524e:	ed92 0a00 	vldr	s0, [r2]
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8015252:	781a      	ldrb	r2, [r3, #0]
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8015254:	ee37 7a00 	vadd.f32	s14, s14, s0
	float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8015258:	4955      	ldr	r1, [pc, #340]	; (80153b0 <SFXVocoderFrame+0x24c>)
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801525a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801525e:	ee17 3a90 	vmov	r3, s15
 8015262:	1a9b      	subs	r3, r3, r2
 8015264:	fb88 2003 	smull	r2, r0, r8, r3
 8015268:	17da      	asrs	r2, r3, #31
 801526a:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 801526e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015272:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8015276:	ee07 3a90 	vmov	s15, r3
 801527a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 801527e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015282:	ee17 3a90 	vmov	r3, s15
 8015286:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801528a:	ed93 0a00 	vldr	s0, [r3]
	freq[voice] = LEAF_midiToFrequency(tunedNote);
 801528e:	ee37 0a00 	vadd.f32	s0, s14, s0
 8015292:	f00f f95f 	bl	8024554 <LEAF_midiToFrequency>
		tSawtooth_setFreq(&osc[i], freq[i]);
 8015296:	4847      	ldr	r0, [pc, #284]	; (80153b4 <SFXVocoderFrame+0x250>)
	freq[voice] = LEAF_midiToFrequency(tunedNote);
 8015298:	ed87 0a00 	vstr	s0, [r7]
		tSawtooth_setFreq(&osc[i], freq[i]);
 801529c:	4420      	add	r0, r4
 801529e:	f00f ffb5 	bl	802520c <tSawtooth_setFreq>
 80152a2:	4b45      	ldr	r3, [pc, #276]	; (80153b8 <SFXVocoderFrame+0x254>)
		tRosenbergGlottalPulse_setFreq(&glottal[i], freq[i]);
 80152a4:	ecb7 0a01 	vldmia	r7!, {s0}
 80152a8:	eb04 0a03 	add.w	sl, r4, r3
 80152ac:	3404      	adds	r4, #4
 80152ae:	4650      	mov	r0, sl
 80152b0:	f00b ff0c 	bl	80210cc <tRosenbergGlottalPulse_setFreq>
		tRosenbergGlottalPulse_setOpenLengthAndPulseLength(&glottal[i], displayValues[8] * displayValues[7], displayValues[7]);
 80152b4:	edd5 0a07 	vldr	s1, [r5, #28]
 80152b8:	ed95 0a08 	vldr	s0, [r5, #32]
 80152bc:	4650      	mov	r0, sl
 80152be:	ee20 0a80 	vmul.f32	s0, s1, s0
 80152c2:	f00b ff2d 	bl	8021120 <tRosenbergGlottalPulse_setOpenLengthAndPulseLength>
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 80152c6:	4630      	mov	r0, r6
		tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 80152c8:	fa5f fa89 	uxtb.w	sl, r9
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 80152cc:	f00f fec0 	bl	8025050 <tSimplePoly_getNumVoices>
 80152d0:	4b3a      	ldr	r3, [pc, #232]	; (80153bc <SFXVocoderFrame+0x258>)
 80152d2:	4548      	cmp	r0, r9
		tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 80152d4:	4651      	mov	r1, sl
 80152d6:	4630      	mov	r0, r6
 80152d8:	eb04 0b03 	add.w	fp, r4, r3
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 80152dc:	f109 0901 	add.w	r9, r9, #1
 80152e0:	dca1      	bgt.n	8015226 <SFXVocoderFrame+0xc2>
	if (tSimplePoly_getNumActiveVoices(&poly) != 0)
 80152e2:	4828      	ldr	r0, [pc, #160]	; (8015384 <SFXVocoderFrame+0x220>)
 80152e4:	f00f feb8 	bl	8025058 <tSimplePoly_getNumActiveVoices>
 80152e8:	b9c0      	cbnz	r0, 801531c <SFXVocoderFrame+0x1b8>
		tExpSmooth_setDest(&comp, 0.0f);
 80152ea:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80153a4 <SFXVocoderFrame+0x240>
 80152ee:	4834      	ldr	r0, [pc, #208]	; (80153c0 <SFXVocoderFrame+0x25c>)
 80152f0:	f00d fbb2 	bl	8022a58 <tExpSmooth_setDest>
	tVZFilter_setGain(&shelf1, fasterdbtoa(-1.0f * displayValues[6]));
 80152f4:	ed95 0a06 	vldr	s0, [r5, #24]
 80152f8:	eeb1 0a40 	vneg.f32	s0, s0
 80152fc:	f00f fa06 	bl	802470c <fasterdbtoa>
 8015300:	4830      	ldr	r0, [pc, #192]	; (80153c4 <SFXVocoderFrame+0x260>)
 8015302:	f00e fd35 	bl	8023d70 <tVZFilter_setGain>
	tVZFilter_setGain(&shelf2, fastdbtoa(displayValues[6]));
 8015306:	ed95 0a06 	vldr	s0, [r5, #24]
 801530a:	f00f f9f7 	bl	80246fc <fastdbtoa>
 801530e:	482e      	ldr	r0, [pc, #184]	; (80153c8 <SFXVocoderFrame+0x264>)
}
 8015310:	ecbd 8b02 	vpop	{d8}
 8015314:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	tVZFilter_setGain(&shelf2, fastdbtoa(displayValues[6]));
 8015318:	f00e bd2a 	b.w	8023d70 <tVZFilter_setGain>
		tExpSmooth_setDest(&comp, sqrtf(1.0f / tSimplePoly_getNumActiveVoices(&poly)));
 801531c:	4819      	ldr	r0, [pc, #100]	; (8015384 <SFXVocoderFrame+0x220>)
 801531e:	f00f fe9b 	bl	8025058 <tSimplePoly_getNumActiveVoices>
 8015322:	ee07 0a90 	vmov	s15, r0
 8015326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801532a:	4825      	ldr	r0, [pc, #148]	; (80153c0 <SFXVocoderFrame+0x25c>)
 801532c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015330:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015334:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015338:	f00d fb8e 	bl	8022a58 <tExpSmooth_setDest>
 801533c:	e7da      	b.n	80152f4 <SFXVocoderFrame+0x190>
		vocFreezeLPC = !vocFreezeLPC;
 801533e:	4d23      	ldr	r5, [pc, #140]	; (80153cc <SFXVocoderFrame+0x268>)
		tTalkboxFloat_setFreeze(&vocoder, vocFreezeLPC);
 8015340:	4816      	ldr	r0, [pc, #88]	; (801539c <SFXVocoderFrame+0x238>)
		vocFreezeLPC = !vocFreezeLPC;
 8015342:	682b      	ldr	r3, [r5, #0]
 8015344:	fab3 f383 	clz	r3, r3
 8015348:	095b      	lsrs	r3, r3, #5
		tTalkboxFloat_setFreeze(&vocoder, vocFreezeLPC);
 801534a:	ee07 3a90 	vmov	s15, r3
		vocFreezeLPC = !vocFreezeLPC;
 801534e:	602b      	str	r3, [r5, #0]
		tTalkboxFloat_setFreeze(&vocoder, vocFreezeLPC);
 8015350:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8015354:	f00b fdc4 	bl	8020ee0 <tTalkboxFloat_setFreeze>
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8015358:	2300      	movs	r3, #0
		setLED_C(vocFreezeLPC);
 801535a:	7828      	ldrb	r0, [r5, #0]
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 801535c:	7723      	strb	r3, [r4, #28]
		setLED_C(vocFreezeLPC);
 801535e:	f7fe fcc7 	bl	8013cf0 <setLED_C>
 8015362:	e723      	b.n	80151ac <SFXVocoderFrame+0x48>
		internalExternal = !internalExternal;
 8015364:	4a1a      	ldr	r2, [pc, #104]	; (80153d0 <SFXVocoderFrame+0x26c>)
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 8015366:	2100      	movs	r1, #0
		internalExternal = !internalExternal;
 8015368:	7813      	ldrb	r3, [r2, #0]
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 801536a:	7621      	strb	r1, [r4, #24]
		internalExternal = !internalExternal;
 801536c:	fab3 f383 	clz	r3, r3
 8015370:	095b      	lsrs	r3, r3, #5
		setLED_B(internalExternal);
 8015372:	4618      	mov	r0, r3
		internalExternal = !internalExternal;
 8015374:	7013      	strb	r3, [r2, #0]
		setLED_B(internalExternal);
 8015376:	f7fe fcad 	bl	8013cd4 <setLED_B>
 801537a:	e713      	b.n	80151a4 <SFXVocoderFrame+0x40>
 801537c:	20018714 	.word	0x20018714
 8015380:	20000250 	.word	0x20000250
 8015384:	20017554 	.word	0x20017554
 8015388:	20016710 	.word	0x20016710
 801538c:	3ecccccd 	.word	0x3ecccccd
 8015390:	be4ccccd 	.word	0xbe4ccccd
 8015394:	3f8ccccd 	.word	0x3f8ccccd
 8015398:	200187c4 	.word	0x200187c4
 801539c:	20018174 	.word	0x20018174
 80153a0:	20016e3c 	.word	0x20016e3c
 80153a4:	00000000 	.word	0x00000000
 80153a8:	200005d8 	.word	0x200005d8
 80153ac:	20000654 	.word	0x20000654
 80153b0:	20000620 	.word	0x20000620
 80153b4:	20017314 	.word	0x20017314
 80153b8:	20016248 	.word	0x20016248
 80153bc:	20017950 	.word	0x20017950
 80153c0:	20017294 	.word	0x20017294
 80153c4:	20017534 	.word	0x20017534
 80153c8:	2001745c 	.word	0x2001745c
 80153cc:	20000614 	.word	0x20000614
 80153d0:	2000059c 	.word	0x2000059c
 80153d4:	2aaaaaab 	.word	0x2aaaaaab

080153d8 <SFXVocoderTick>:
	if (internalExternal == 1)
 80153d8:	4b60      	ldr	r3, [pc, #384]	; (801555c <SFXVocoderTick+0x184>)
{
 80153da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153de:	ed2d 8b08 	vpush	{d8-d11}
	if (internalExternal == 1)
 80153e2:	781b      	ldrb	r3, [r3, #0]
{
 80153e4:	4680      	mov	r8, r0
 80153e6:	ed90 8a01 	vldr	s16, [r0, #4]
	if (internalExternal == 1)
 80153ea:	2b01      	cmp	r3, #1
 80153ec:	f000 80b1 	beq.w	8015552 <SFXVocoderTick+0x17a>
		zerocross = tZeroCrossing_tick(&zerox, input[1]);
 80153f0:	eeb0 0a48 	vmov.f32	s0, s16
 80153f4:	485a      	ldr	r0, [pc, #360]	; (8015560 <SFXVocoderTick+0x188>)
 80153f6:	f009 fd59 	bl	801eeac <tZeroCrossing_tick>
		if (!vocChFreeze)
 80153fa:	4b5a      	ldr	r3, [pc, #360]	; (8015564 <SFXVocoderTick+0x18c>)
			tExpSmooth_setDest(&noiseRamp,zerocross > ((displayValues[4])-0.1f));
 80153fc:	4f5a      	ldr	r7, [pc, #360]	; (8015568 <SFXVocoderTick+0x190>)
		if (!vocChFreeze)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	2b00      	cmp	r3, #0
 8015402:	f000 808f 	beq.w	8015524 <SFXVocoderTick+0x14c>
		noiseRampVal = tExpSmooth_tick(&noiseRamp);
 8015406:	4859      	ldr	r0, [pc, #356]	; (801556c <SFXVocoderTick+0x194>)
		for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015408:	2400      	movs	r4, #0
		noiseRampVal = tExpSmooth_tick(&noiseRamp);
 801540a:	f00d fb2f 	bl	8022a6c <tExpSmooth_tick>
 801540e:	eeb0 ba40 	vmov.f32	s22, s0
		float noiseSample = tNoise_tick(&vocoderNoise) * noiseRampVal * 0.6f;
 8015412:	4857      	ldr	r0, [pc, #348]	; (8015570 <SFXVocoderTick+0x198>)
		for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015414:	4626      	mov	r6, r4
		float noiseSample = tNoise_tick(&vocoderNoise) * noiseRampVal * 0.6f;
 8015416:	f00f ff9d 	bl	8025354 <tNoise_tick>
 801541a:	eddf 7a56 	vldr	s15, [pc, #344]	; 8015574 <SFXVocoderTick+0x19c>
 801541e:	ee20 0a0b 	vmul.f32	s0, s0, s22
	float sample = 0.0f;
 8015422:	ed9f 9a55 	vldr	s18, [pc, #340]	; 8015578 <SFXVocoderTick+0x1a0>
		for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015426:	f8df a180 	ldr.w	sl, [pc, #384]	; 80155a8 <SFXVocoderTick+0x1d0>
			sample += tSawtooth_tick(&osc[i]) * tExpSmooth_tick(&polyRamp[i]) * (1.0f - displayValues[3]);
 801542a:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80155ac <SFXVocoderTick+0x1d4>
		float noiseSample = tNoise_tick(&vocoderNoise) * noiseRampVal * 0.6f;
 801542e:	ee20 aa27 	vmul.f32	s20, s0, s15
			sample += tRosenbergGlottalPulse_tickHQ(&glottal[i]) * tExpSmooth_tick(&polyRamp[i]) * 1.9f * displayValues[3];
 8015432:	eddf aa52 	vldr	s21, [pc, #328]	; 801557c <SFXVocoderTick+0x1a4>
		for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015436:	e026      	b.n	8015486 <SFXVocoderTick+0xae>
 8015438:	4d51      	ldr	r5, [pc, #324]	; (8015580 <SFXVocoderTick+0x1a8>)
			sample += tSawtooth_tick(&osc[i]) * tExpSmooth_tick(&polyRamp[i]) * (1.0f - displayValues[3]);
 801543a:	f00f ff19 	bl	8025270 <tSawtooth_tick>
 801543e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8015442:	4425      	add	r5, r4
 8015444:	eef0 8a40 	vmov.f32	s17, s0
 8015448:	4628      	mov	r0, r5
 801544a:	f00d fb0f 	bl	8022a6c <tExpSmooth_tick>
			sample += tRosenbergGlottalPulse_tickHQ(&glottal[i]) * tExpSmooth_tick(&polyRamp[i]) * 1.9f * displayValues[3];
 801544e:	484d      	ldr	r0, [pc, #308]	; (8015584 <SFXVocoderTick+0x1ac>)
			sample += tSawtooth_tick(&osc[i]) * tExpSmooth_tick(&polyRamp[i]) * (1.0f - displayValues[3]);
 8015450:	edd7 7a03 	vldr	s15, [r7, #12]
 8015454:	ee68 8a80 	vmul.f32	s17, s17, s0
			sample += tRosenbergGlottalPulse_tickHQ(&glottal[i]) * tExpSmooth_tick(&polyRamp[i]) * 1.9f * displayValues[3];
 8015458:	4420      	add	r0, r4
 801545a:	3404      	adds	r4, #4
			sample += tSawtooth_tick(&osc[i]) * tExpSmooth_tick(&polyRamp[i]) * (1.0f - displayValues[3]);
 801545c:	ee38 8a67 	vsub.f32	s16, s16, s15
			sample += tRosenbergGlottalPulse_tickHQ(&glottal[i]) * tExpSmooth_tick(&polyRamp[i]) * 1.9f * displayValues[3];
 8015460:	f00b fdc4 	bl	8020fec <tRosenbergGlottalPulse_tickHQ>
 8015464:	4628      	mov	r0, r5
 8015466:	eef0 9a40 	vmov.f32	s19, s0
 801546a:	f00d faff 	bl	8022a6c <tExpSmooth_tick>
 801546e:	edd7 7a03 	vldr	s15, [r7, #12]
 8015472:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8015476:	ee67 7aa9 	vmul.f32	s15, s15, s19
 801547a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801547e:	eea8 0a88 	vfma.f32	s0, s17, s16
 8015482:	ee39 9a00 	vadd.f32	s18, s18, s0
		for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015486:	4650      	mov	r0, sl
 8015488:	f00f fde2 	bl	8025050 <tSimplePoly_getNumVoices>
 801548c:	42b0      	cmp	r0, r6
			sample += tSawtooth_tick(&osc[i]) * tExpSmooth_tick(&polyRamp[i]) * (1.0f - displayValues[3]);
 801548e:	eb09 0004 	add.w	r0, r9, r4
		for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015492:	f106 0601 	add.w	r6, r6, #1
 8015496:	dccf      	bgt.n	8015438 <SFXVocoderTick+0x60>
		sample = (sample * (1.0f - (0.3f * displayValues[5])) * (1.0f-noiseRampVal)) + noiseSample;
 8015498:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801549c:	ed97 7a05 	vldr	s14, [r7, #20]
 80154a0:	eddf 7a39 	vldr	s15, [pc, #228]	; 8015588 <SFXVocoderTick+0x1b0>
		sample += (tHighpass_tick(&noiseHP, tNoise_tick(&breathNoise)) * displayValues[5] * 1.5f);
 80154a4:	4839      	ldr	r0, [pc, #228]	; (801558c <SFXVocoderTick+0x1b4>)
		sample = (sample * (1.0f - (0.3f * displayValues[5])) * (1.0f-noiseRampVal)) + noiseSample;
 80154a6:	eeb0 8a40 	vmov.f32	s16, s0
 80154aa:	ee30 0a4b 	vsub.f32	s0, s0, s22
 80154ae:	eea7 8a67 	vfms.f32	s16, s14, s15
 80154b2:	ee28 8a00 	vmul.f32	s16, s16, s0
		sample += (tHighpass_tick(&noiseHP, tNoise_tick(&breathNoise)) * displayValues[5] * 1.5f);
 80154b6:	f00f ff4d 	bl	8025354 <tNoise_tick>
 80154ba:	4835      	ldr	r0, [pc, #212]	; (8015590 <SFXVocoderTick+0x1b8>)
 80154bc:	f00d fe0e 	bl	80230dc <tHighpass_tick>
 80154c0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80154c4:	edd7 7a05 	vldr	s15, [r7, #20]
		sample *= tExpSmooth_tick(&comp);
 80154c8:	4832      	ldr	r0, [pc, #200]	; (8015594 <SFXVocoderTick+0x1bc>)
		sample += (tHighpass_tick(&noiseHP, tNoise_tick(&breathNoise)) * displayValues[5] * 1.5f);
 80154ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80154ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 80154d2:	eea9 0a08 	vfma.f32	s0, s18, s16
 80154d6:	ee3a aa00 	vadd.f32	s20, s20, s0
		sample *= tExpSmooth_tick(&comp);
 80154da:	f00d fac7 	bl	8022a6c <tExpSmooth_tick>
 80154de:	ed98 8a01 	vldr	s16, [r8, #4]
 80154e2:	ee2a 0a00 	vmul.f32	s0, s20, s0
	sample = tanhf(sample);
 80154e6:	f012 fc5d 	bl	8027da4 <tanhf>
	sample = tTalkboxFloat_tick(&vocoder, sample, input[1]);
 80154ea:	eef0 0a48 	vmov.f32	s1, s16
 80154ee:	482a      	ldr	r0, [pc, #168]	; (8015598 <SFXVocoderTick+0x1c0>)
 80154f0:	f00b fbfe 	bl	8020cf0 <tTalkboxFloat_tick>
	sample = tVZFilter_tick(&shelf1, sample); //put it through the low shelf
 80154f4:	4829      	ldr	r0, [pc, #164]	; (801559c <SFXVocoderTick+0x1c4>)
 80154f6:	f00e f801 	bl	80234fc <tVZFilter_tick>
	sample = tVZFilter_tick(&shelf2, sample); // now put that result through the high shelf
 80154fa:	4829      	ldr	r0, [pc, #164]	; (80155a0 <SFXVocoderTick+0x1c8>)
 80154fc:	f00d fffe 	bl	80234fc <tVZFilter_tick>
	sample *= displayValues[0] * 0.6f;
 8015500:	edd7 7a00 	vldr	s15, [r7]
 8015504:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8015574 <SFXVocoderTick+0x19c>
 8015508:	ee67 7a87 	vmul.f32	s15, s15, s14
	sample = tanhf(sample);
 801550c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015510:	f012 fc48 	bl	8027da4 <tanhf>
	input[0] = sample;
 8015514:	ed88 0a00 	vstr	s0, [r8]
	input[1] = sample;
 8015518:	ed88 0a01 	vstr	s0, [r8, #4]
}
 801551c:	ecbd 8b08 	vpop	{d8-d11}
 8015520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			tExpSmooth_setDest(&noiseRamp,zerocross > ((displayValues[4])-0.1f));
 8015524:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 80155a4 <SFXVocoderTick+0x1cc>
 8015528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801552c:	edd7 7a04 	vldr	s15, [r7, #16]
 8015530:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8015578 <SFXVocoderTick+0x1a0>
 8015534:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015538:	480c      	ldr	r0, [pc, #48]	; (801556c <SFXVocoderTick+0x194>)
 801553a:	eef4 7ac0 	vcmpe.f32	s15, s0
 801553e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015542:	bf54      	ite	pl
 8015544:	eeb0 0a47 	vmovpl.f32	s0, s14
 8015548:	eeb0 0a66 	vmovmi.f32	s0, s13
 801554c:	f00d fa84 	bl	8022a58 <tExpSmooth_setDest>
 8015550:	e759      	b.n	8015406 <SFXVocoderTick+0x2e>
		sample = input[0];
 8015552:	ed90 0a00 	vldr	s0, [r0]
 8015556:	4f04      	ldr	r7, [pc, #16]	; (8015568 <SFXVocoderTick+0x190>)
 8015558:	e7c5      	b.n	80154e6 <SFXVocoderTick+0x10e>
 801555a:	bf00      	nop
 801555c:	2000059c 	.word	0x2000059c
 8015560:	200176c4 	.word	0x200176c4
 8015564:	20000610 	.word	0x20000610
 8015568:	200187c4 	.word	0x200187c4
 801556c:	2001825c 	.word	0x2001825c
 8015570:	20016e64 	.word	0x20016e64
 8015574:	3f19999a 	.word	0x3f19999a
 8015578:	00000000 	.word	0x00000000
 801557c:	3ff33333 	.word	0x3ff33333
 8015580:	20017950 	.word	0x20017950
 8015584:	20016248 	.word	0x20016248
 8015588:	3e99999a 	.word	0x3e99999a
 801558c:	20016218 	.word	0x20016218
 8015590:	20016e5c 	.word	0x20016e5c
 8015594:	20017294 	.word	0x20017294
 8015598:	20018174 	.word	0x20018174
 801559c:	20017534 	.word	0x20017534
 80155a0:	2001745c 	.word	0x2001745c
 80155a4:	3dcccccd 	.word	0x3dcccccd
 80155a8:	20017554 	.word	0x20017554
 80155ac:	20017314 	.word	0x20017314

080155b0 <SFXVocoderFree>:
{
 80155b0:	b570      	push	{r4, r5, r6, lr}
	tTalkboxFloat_free(&vocoder);
 80155b2:	4812      	ldr	r0, [pc, #72]	; (80155fc <SFXVocoderFree+0x4c>)
	tVZFilter_free(&shelf2);
 80155b4:	2400      	movs	r4, #0
	tTalkboxFloat_free(&vocoder);
 80155b6:	f00b f935 	bl	8020824 <tTalkboxFloat_free>
	tNoise_free(&vocoderNoise);
 80155ba:	4811      	ldr	r0, [pc, #68]	; (8015600 <SFXVocoderFree+0x50>)
 80155bc:	f00f fec6 	bl	802534c <tNoise_free>
	tZeroCrossing_free(&zerox);
 80155c0:	4810      	ldr	r0, [pc, #64]	; (8015604 <SFXVocoderFree+0x54>)
 80155c2:	f009 fc63 	bl	801ee8c <tZeroCrossing_free>
	tExpSmooth_free(&noiseRamp);
 80155c6:	4810      	ldr	r0, [pc, #64]	; (8015608 <SFXVocoderFree+0x58>)
 80155c8:	f00d fa30 	bl	8022a2c <tExpSmooth_free>
	tNoise_free(&breathNoise);
 80155cc:	480f      	ldr	r0, [pc, #60]	; (801560c <SFXVocoderFree+0x5c>)
 80155ce:	f00f febd 	bl	802534c <tNoise_free>
	tHighpass_free(&noiseHP);
 80155d2:	480f      	ldr	r0, [pc, #60]	; (8015610 <SFXVocoderFree+0x60>)
 80155d4:	f00d fd6e 	bl	80230b4 <tHighpass_free>
	tVZFilter_free(&shelf1);
 80155d8:	480e      	ldr	r0, [pc, #56]	; (8015614 <SFXVocoderFree+0x64>)
 80155da:	f00d ff81 	bl	80234e0 <tVZFilter_free>
	tVZFilter_free(&shelf2);
 80155de:	480e      	ldr	r0, [pc, #56]	; (8015618 <SFXVocoderFree+0x68>)
 80155e0:	4e0e      	ldr	r6, [pc, #56]	; (801561c <SFXVocoderFree+0x6c>)
 80155e2:	4d0f      	ldr	r5, [pc, #60]	; (8015620 <SFXVocoderFree+0x70>)
 80155e4:	f00d ff7c 	bl	80234e0 <tVZFilter_free>
		tSawtooth_free(&osc[i]);
 80155e8:	1930      	adds	r0, r6, r4
 80155ea:	f00f fe0b 	bl	8025204 <tSawtooth_free>
		tRosenbergGlottalPulse_free(&glottal[i]);
 80155ee:	1928      	adds	r0, r5, r4
 80155f0:	3404      	adds	r4, #4
 80155f2:	f00b fc8b 	bl	8020f0c <tRosenbergGlottalPulse_free>
	for (int i = 0; i < NUM_VOC_VOICES; i++)
 80155f6:	2c20      	cmp	r4, #32
 80155f8:	d1f6      	bne.n	80155e8 <SFXVocoderFree+0x38>
}
 80155fa:	bd70      	pop	{r4, r5, r6, pc}
 80155fc:	20018174 	.word	0x20018174
 8015600:	20016e64 	.word	0x20016e64
 8015604:	200176c4 	.word	0x200176c4
 8015608:	2001825c 	.word	0x2001825c
 801560c:	20016218 	.word	0x20016218
 8015610:	20016e5c 	.word	0x20016e5c
 8015614:	20017534 	.word	0x20017534
 8015618:	2001745c 	.word	0x2001745c
 801561c:	20017314 	.word	0x20017314
 8015620:	20016248 	.word	0x20016248

08015624 <SFXVocoderChAlloc>:
	invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015624:	4bd7      	ldr	r3, [pc, #860]	; (8015984 <SFXVocoderChAlloc+0x360>)
 8015626:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801562a:	ed9f 6ad7 	vldr	s12, [pc, #860]	; 8015988 <SFXVocoderChAlloc+0x364>
	displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 801562e:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
	displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 8015632:	4ad6      	ldr	r2, [pc, #856]	; (801598c <SFXVocoderChAlloc+0x368>)
	displayValues[12] = (presetKnobValues[VocoderCh][12] * 2.0f) - 1.0f; //tilt
 8015634:	eebf 5a00 	vmov.f32	s10, #240	; 0xbf800000 -1.0
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015638:	eddf 6ad5 	vldr	s13, [pc, #852]	; 8015990 <SFXVocoderChAlloc+0x36c>
 801563c:	eef2 2a00 	vmov.f32	s5, #32	; 0x41000000  8.0
	displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 8015640:	ed9f 2ad4 	vldr	s4, [pc, #848]	; 8015994 <SFXVocoderChAlloc+0x370>
	tVZFilter_initToPool(&vocodec_highshelf, Highshelf, 6000.0f, 3.0f, &smallPool);
 8015644:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
	displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 8015648:	ed9f 4ad3 	vldr	s8, [pc, #844]	; 8015998 <SFXVocoderChAlloc+0x374>
	tVZFilter_initToPool(&vocodec_highshelf, Highshelf, 6000.0f, 3.0f, &smallPool);
 801564c:	2107      	movs	r1, #7
 801564e:	ed9f 0ad3 	vldr	s0, [pc, #844]	; 801599c <SFXVocoderChAlloc+0x378>
{
 8015652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015656:	ed2d 8b04 	vpush	{d8-d9}
	invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 801565a:	781b      	ldrb	r3, [r3, #0]
{
 801565c:	b083      	sub	sp, #12
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 801565e:	edd2 4a1b 	vldr	s9, [r2, #108]	; 0x6c
	tVZFilter_setGain(&vocodec_highshelf, 4.0f);
 8015662:	2400      	movs	r4, #0
	invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015664:	ee07 3a10 	vmov	s14, r3
	displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 8015668:	edd2 5a1c 	vldr	s11, [r2, #112]	; 0x70
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 801566c:	ee64 4aa6 	vmul.f32	s9, s9, s13
	bandWidthInSemitones = 99.0f * invNumberOfVocoderBands;
 8015670:	eddf 6acb 	vldr	s13, [pc, #812]	; 80159a0 <SFXVocoderChAlloc+0x37c>
	invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015674:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 8015678:	edd2 1a1a 	vldr	s3, [r2, #104]	; 0x68
	displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 801567c:	4bc9      	ldr	r3, [pc, #804]	; (80159a4 <SFXVocoderChAlloc+0x380>)
	tVZFilter_setGain(&vocodec_highshelf, 4.0f);
 801567e:	f04f 0801 	mov.w	r8, #1
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015682:	eefc 4ae4 	vcvt.u32.f32	s9, s9
	displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 8015686:	6e57      	ldr	r7, [r2, #100]	; 0x64
	invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015688:	ee37 7a46 	vsub.f32	s14, s14, s12
	displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 801568c:	ed9f 6ac6 	vldr	s12, [pc, #792]	; 80159a8 <SFXVocoderChAlloc+0x384>
	displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 8015690:	eea1 4a82 	vfma.f32	s8, s3, s4
	displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 8015694:	ed9f 2ac5 	vldr	s4, [pc, #788]	; 80159ac <SFXVocoderChAlloc+0x388>
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015698:	edcd 4a01 	vstr	s9, [sp, #4]
	displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 801569c:	eea5 6a83 	vfma.f32	s12, s11, s6
	invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 80156a0:	eec7 3a87 	vdiv.f32	s7, s15, s14
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 80156a4:	f89d 0004 	ldrb.w	r0, [sp, #4]
	displayValues[12] = (presetKnobValues[VocoderCh][12] * 2.0f) - 1.0f; //tilt
 80156a8:	edd2 7a25 	vldr	s15, [r2, #148]	; 0x94
	tVZFilter_setGain(&vocodec_highshelf, 4.0f);
 80156ac:	4625      	mov	r5, r4
	bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 80156ae:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80159b0 <SFXVocoderChAlloc+0x38c>
	displayValues[10] = presetKnobValues[VocoderCh][10] * 2.0f; //bandsquish
 80156b2:	edd2 5a23 	vldr	s11, [r2, #140]	; 0x8c
	displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 80156b6:	edd2 4a24 	vldr	s9, [r2, #144]	; 0x90
	displayValues[12] = (presetKnobValues[VocoderCh][12] * 2.0f) - 1.0f; //tilt
 80156ba:	eea7 5a83 	vfma.f32	s10, s15, s6
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 80156be:	ee07 0a90 	vmov	s15, r0
	displayValues[5] = presetKnobValues[VocoderCh][5]; //crossfade between sawtooth and glottal pulse
 80156c2:	6f90      	ldr	r0, [r2, #120]	; 0x78
	displayValues[10] = presetKnobValues[VocoderCh][10] * 2.0f; //bandsquish
 80156c4:	ee75 5aa5 	vadd.f32	s11, s11, s11
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 80156c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	displayValues[4] = presetKnobValues[VocoderCh][4]; //noise thresh
 80156cc:	f8d2 c074 	ldr.w	ip, [r2, #116]	; 0x74
	displayValues[6] = presetKnobValues[VocoderCh][6]; //pulse width
 80156d0:	f8d2 a07c 	ldr.w	sl, [r2, #124]	; 0x7c
	displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 80156d4:	ee64 4a82 	vmul.f32	s9, s9, s4
	displayValues[7] = presetKnobValues[VocoderCh][7]; //pulse shape
 80156d8:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 80156dc:	ee77 7aa2 	vadd.f32	s15, s15, s5
	displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 80156e0:	601f      	str	r7, [r3, #0]
	displayValues[8] = presetKnobValues[VocoderCh][8]; //breathiness
 80156e2:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
	displayValues[9] = presetKnobValues[VocoderCh][9]; //speed
 80156e6:	f8d2 9088 	ldr.w	r9, [r2, #136]	; 0x88
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 80156ea:	edc3 7a02 	vstr	s15, [r3, #8]
	displayValues[5] = presetKnobValues[VocoderCh][5]; //crossfade between sawtooth and glottal pulse
 80156ee:	6158      	str	r0, [r3, #20]
	displayValues[13] = presetKnobValues[VocoderCh][13]; //stereo
 80156f0:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
	bandWidthInSemitones = 99.0f * invNumberOfVocoderBands;
 80156f4:	ee63 6aa6 	vmul.f32	s13, s7, s13
	displayValues[14] = presetKnobValues[VocoderCh][14]; //odd/even
 80156f8:	f8d2 e09c 	ldr.w	lr, [r2, #156]	; 0x9c
	displayValues[4] = presetKnobValues[VocoderCh][4]; //noise thresh
 80156fc:	f8c3 c010 	str.w	ip, [r3, #16]
	displayValues[6] = presetKnobValues[VocoderCh][6]; //pulse width
 8015700:	f8c3 a018 	str.w	sl, [r3, #24]
	bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 8015704:	ee66 7a87 	vmul.f32	s15, s13, s14
	displayValues[7] = presetKnobValues[VocoderCh][7]; //pulse shape
 8015708:	61de      	str	r6, [r3, #28]
	displayValues[8] = presetKnobValues[VocoderCh][8]; //breathiness
 801570a:	621f      	str	r7, [r3, #32]
	invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 801570c:	f8df c318 	ldr.w	ip, [pc, #792]	; 8015a28 <SFXVocoderChAlloc+0x404>
	thisBandwidth = bandWidthInOctaves * myQ;
 8015710:	ee26 7a27 	vmul.f32	s14, s12, s15
	bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 8015714:	4fa7      	ldr	r7, [pc, #668]	; (80159b4 <SFXVocoderChAlloc+0x390>)
	bandWidthInSemitones = 99.0f * invNumberOfVocoderBands;
 8015716:	f8df a314 	ldr.w	sl, [pc, #788]	; 8015a2c <SFXVocoderChAlloc+0x408>
	thisBandwidth = bandWidthInOctaves * myQ;
 801571a:	4ea7      	ldr	r6, [pc, #668]	; (80159b8 <SFXVocoderChAlloc+0x394>)
	displayValues[9] = presetKnobValues[VocoderCh][9]; //speed
 801571c:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
	displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 8015720:	ed83 4a01 	vstr	s8, [r3, #4]
	displayValues[10] = presetKnobValues[VocoderCh][10] * 2.0f; //bandsquish
 8015724:	edc3 5a0a 	vstr	s11, [r3, #40]	; 0x28
	displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 8015728:	edc3 4a0b 	vstr	s9, [r3, #44]	; 0x2c
	displayValues[12] = (presetKnobValues[VocoderCh][12] * 2.0f) - 1.0f; //tilt
 801572c:	ed83 5a0c 	vstr	s10, [r3, #48]	; 0x30
	tVZFilter_initToPool(&vocodec_highshelf, Highshelf, 6000.0f, 3.0f, &smallPool);
 8015730:	4aa2      	ldr	r2, [pc, #648]	; (80159bc <SFXVocoderChAlloc+0x398>)
	displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 8015732:	ed83 6a03 	vstr	s12, [r3, #12]
	displayValues[13] = presetKnobValues[VocoderCh][13]; //stereo
 8015736:	6358      	str	r0, [r3, #52]	; 0x34
	tVZFilter_initToPool(&vocodec_highshelf, Highshelf, 6000.0f, 3.0f, &smallPool);
 8015738:	48a1      	ldr	r0, [pc, #644]	; (80159c0 <SFXVocoderChAlloc+0x39c>)
	bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 801573a:	edc7 7a00 	vstr	s15, [r7]
	displayValues[14] = presetKnobValues[VocoderCh][14]; //odd/even
 801573e:	f8c3 e038 	str.w	lr, [r3, #56]	; 0x38
	invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015742:	edcc 3a00 	vstr	s7, [ip]
	bandWidthInSemitones = 99.0f * invNumberOfVocoderBands;
 8015746:	edca 6a00 	vstr	s13, [sl]
	thisBandwidth = bandWidthInOctaves * myQ;
 801574a:	ed86 7a00 	vstr	s14, [r6]
	tVZFilter_initToPool(&vocodec_highshelf, Highshelf, 6000.0f, 3.0f, &smallPool);
 801574e:	f00d fcd5 	bl	80230fc <tVZFilter_initToPool>
	tVZFilter_setGain(&vocodec_highshelf, 4.0f);
 8015752:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8015756:	489a      	ldr	r0, [pc, #616]	; (80159c0 <SFXVocoderChAlloc+0x39c>)
 8015758:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 8015a30 <SFXVocoderChAlloc+0x40c>
 801575c:	f00e fb08 	bl	8023d70 <tVZFilter_setGain>
 8015760:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8015a34 <SFXVocoderChAlloc+0x410>
 8015764:	4f97      	ldr	r7, [pc, #604]	; (80159c4 <SFXVocoderChAlloc+0x3a0>)
		tExpSmooth_initToPool(&envFollowers[i], 0.0f, 0.001f, &smallPool); // factor of .001 is 10 ms?
 8015766:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80159c8 <SFXVocoderChAlloc+0x3a4>
 801576a:	eddf 8a98 	vldr	s17, [pc, #608]	; 80159cc <SFXVocoderChAlloc+0x3a8>
 801576e:	e004      	b.n	801577a <SFXVocoderChAlloc+0x156>
 8015770:	3501      	adds	r5, #1
 8015772:	f108 0801 	add.w	r8, r8, #1
 8015776:	3704      	adds	r7, #4
 8015778:	3408      	adds	r4, #8
		float bandFreq = faster_mtof((i * bandWidthInSemitones) + 30.0f); //midinote 28 (41Hz) to midinote 134 (18814Hz) is 106 midinotes, divide that by how many bands to find out how far apart to put the bands
 801577a:	ee07 5a90 	vmov	s15, r5
 801577e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8015782:	ed9a 7a00 	vldr	s14, [sl]
 8015786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801578a:	eea7 0a87 	vfma.f32	s0, s15, s14
 801578e:	f00e ff65 	bl	802465c <faster_mtof>
		bandGains[i] = 1.0f;
 8015792:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		float bandFreq = faster_mtof((i * bandWidthInSemitones) + 30.0f); //midinote 28 (41Hz) to midinote 134 (18814Hz) is 106 midinotes, divide that by how many bands to find out how far apart to put the bands
 8015796:	eeb0 8a40 	vmov.f32	s16, s0
			tVZFilter_initToPool(&analysisBands[i][0], BandpassPeak, bandFreq, thisBandwidth, &smallPool);
 801579a:	eb0b 0004 	add.w	r0, fp, r4
 801579e:	4a87      	ldr	r2, [pc, #540]	; (80159bc <SFXVocoderChAlloc+0x398>)
 80157a0:	2103      	movs	r1, #3
		bandGains[i] = 1.0f;
 80157a2:	f849 3b04 	str.w	r3, [r9], #4
		if (i == 0)
 80157a6:	2d00      	cmp	r5, #0
 80157a8:	f000 80c2 	beq.w	8015930 <SFXVocoderChAlloc+0x30c>
 80157ac:	edd6 7a00 	vldr	s15, [r6]
		else if (i == (MAX_NUM_VOCODER_BANDS-1))
 80157b0:	2d17      	cmp	r5, #23
			tVZFilter_initToPool(&analysisBands[i][0], BandpassPeak, bandFreq, thisBandwidth, &smallPool);
 80157b2:	eef0 0a67 	vmov.f32	s1, s15
		else if (i == (MAX_NUM_VOCODER_BANDS-1))
 80157b6:	f000 8092 	beq.w	80158de <SFXVocoderChAlloc+0x2ba>
			tVZFilter_initToPool(&analysisBands[i][0], BandpassPeak, bandFreq, thisBandwidth, &smallPool);
 80157ba:	f00d fc9f 	bl	80230fc <tVZFilter_initToPool>
			tVZFilter_initToPool(&analysisBands[i][1], BandpassPeak, bandFreq, thisBandwidth, &smallPool);
 80157be:	4b84      	ldr	r3, [pc, #528]	; (80159d0 <SFXVocoderChAlloc+0x3ac>)
 80157c0:	4a7e      	ldr	r2, [pc, #504]	; (80159bc <SFXVocoderChAlloc+0x398>)
 80157c2:	eeb0 0a48 	vmov.f32	s0, s16
 80157c6:	1918      	adds	r0, r3, r4
 80157c8:	edd6 0a00 	vldr	s1, [r6]
 80157cc:	2103      	movs	r1, #3
 80157ce:	f00d fc95 	bl	80230fc <tVZFilter_initToPool>
			tVZFilter_initToPool(&synthesisBands[i][0], BandpassPeak, bandFreq, thisBandwidth, &smallPool);
 80157d2:	4b80      	ldr	r3, [pc, #512]	; (80159d4 <SFXVocoderChAlloc+0x3b0>)
 80157d4:	4a79      	ldr	r2, [pc, #484]	; (80159bc <SFXVocoderChAlloc+0x398>)
 80157d6:	eeb0 0a48 	vmov.f32	s0, s16
 80157da:	1918      	adds	r0, r3, r4
 80157dc:	edd6 0a00 	vldr	s1, [r6]
 80157e0:	2103      	movs	r1, #3
 80157e2:	f00d fc8b 	bl	80230fc <tVZFilter_initToPool>
			tVZFilter_initToPool(&synthesisBands[i][1], BandpassPeak, bandFreq, thisBandwidth, &smallPool);
 80157e6:	4b7c      	ldr	r3, [pc, #496]	; (80159d8 <SFXVocoderChAlloc+0x3b4>)
 80157e8:	eeb0 0a48 	vmov.f32	s0, s16
 80157ec:	4a73      	ldr	r2, [pc, #460]	; (80159bc <SFXVocoderChAlloc+0x398>)
 80157ee:	1918      	adds	r0, r3, r4
 80157f0:	2103      	movs	r1, #3
 80157f2:	edd6 0a00 	vldr	s1, [r6]
 80157f6:	f00d fc81 	bl	80230fc <tVZFilter_initToPool>
		tExpSmooth_initToPool(&envFollowers[i], 0.0f, 0.001f, &smallPool); // factor of .001 is 10 ms?
 80157fa:	4970      	ldr	r1, [pc, #448]	; (80159bc <SFXVocoderChAlloc+0x398>)
 80157fc:	eef0 0a49 	vmov.f32	s1, s18
 8015800:	4638      	mov	r0, r7
 8015802:	eeb0 0a68 	vmov.f32	s0, s17
 8015806:	f00d f8eb 	bl	80229e0 <tExpSmooth_initToPool>
	for (int i = 0; i < MAX_NUM_VOCODER_BANDS; i++)
 801580a:	f1b8 0f18 	cmp.w	r8, #24
 801580e:	d1af      	bne.n	8015770 <SFXVocoderChAlloc+0x14c>
	tNoise_initToPool(&breathNoise, WhiteNoise, &smallPool);
 8015810:	2100      	movs	r1, #0
 8015812:	4a6a      	ldr	r2, [pc, #424]	; (80159bc <SFXVocoderChAlloc+0x398>)
 8015814:	4871      	ldr	r0, [pc, #452]	; (80159dc <SFXVocoderChAlloc+0x3b8>)
	tHighpass_initToPool(&chVocFinalHP2, 20.0f, &smallPool);
 8015816:	460c      	mov	r4, r1
	tSimplePoly_setNumVoices(&poly, numVoices);
 8015818:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8015a38 <SFXVocoderChAlloc+0x414>
	tNoise_initToPool(&breathNoise, WhiteNoise, &smallPool);
 801581c:	f00f fd84 	bl	8025328 <tNoise_initToPool>
	tNoise_initToPool(&vocoderNoise, WhiteNoise, &smallPool);
 8015820:	4a66      	ldr	r2, [pc, #408]	; (80159bc <SFXVocoderChAlloc+0x398>)
 8015822:	4621      	mov	r1, r4
 8015824:	486e      	ldr	r0, [pc, #440]	; (80159e0 <SFXVocoderChAlloc+0x3bc>)
 8015826:	f00f fd7f 	bl	8025328 <tNoise_initToPool>
	tZeroCrossing_initToPool(&zerox, 256, &smallPool);
 801582a:	4a64      	ldr	r2, [pc, #400]	; (80159bc <SFXVocoderChAlloc+0x398>)
 801582c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015830:	486c      	ldr	r0, [pc, #432]	; (80159e4 <SFXVocoderChAlloc+0x3c0>)
 8015832:	f009 fb05 	bl	801ee40 <tZeroCrossing_initToPool>
	tSimplePoly_setNumVoices(&poly, numVoices);
 8015836:	f899 1000 	ldrb.w	r1, [r9]
 801583a:	486b      	ldr	r0, [pc, #428]	; (80159e8 <SFXVocoderChAlloc+0x3c4>)
 801583c:	f00f fc00 	bl	8025040 <tSimplePoly_setNumVoices>
	tExpSmooth_initToPool(&noiseRamp, 0.0f, 0.05f, &smallPool);
 8015840:	eddf 0a6a 	vldr	s1, [pc, #424]	; 80159ec <SFXVocoderChAlloc+0x3c8>
 8015844:	495d      	ldr	r1, [pc, #372]	; (80159bc <SFXVocoderChAlloc+0x398>)
 8015846:	ed9f 0a61 	vldr	s0, [pc, #388]	; 80159cc <SFXVocoderChAlloc+0x3a8>
 801584a:	4869      	ldr	r0, [pc, #420]	; (80159f0 <SFXVocoderChAlloc+0x3cc>)
 801584c:	f00d f8c8 	bl	80229e0 <tExpSmooth_initToPool>
	tHighpass_initToPool(&noiseHP, 5000.0f, &smallPool);
 8015850:	495a      	ldr	r1, [pc, #360]	; (80159bc <SFXVocoderChAlloc+0x398>)
 8015852:	ed9f 0a68 	vldr	s0, [pc, #416]	; 80159f4 <SFXVocoderChAlloc+0x3d0>
 8015856:	4868      	ldr	r0, [pc, #416]	; (80159f8 <SFXVocoderChAlloc+0x3d4>)
 8015858:	f00d fc0c 	bl	8023074 <tHighpass_initToPool>
 801585c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8015a3c <SFXVocoderChAlloc+0x418>
	tHighpass_initToPool(&chVocFinalHP1, 20.0f, &smallPool);
 8015860:	4956      	ldr	r1, [pc, #344]	; (80159bc <SFXVocoderChAlloc+0x398>)
 8015862:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8015866:	4865      	ldr	r0, [pc, #404]	; (80159fc <SFXVocoderChAlloc+0x3d8>)
		tRosenbergGlottalPulse_setOpenLength(&glottal[i], 0.3f);
 8015868:	eddf 8a65 	vldr	s17, [pc, #404]	; 8015a00 <SFXVocoderChAlloc+0x3dc>
	tHighpass_initToPool(&chVocFinalHP1, 20.0f, &smallPool);
 801586c:	f00d fc02 	bl	8023074 <tHighpass_initToPool>
		tRosenbergGlottalPulse_setPulseLength(&glottal[i], 0.4f);
 8015870:	ed9f 8a64 	vldr	s16, [pc, #400]	; 8015a04 <SFXVocoderChAlloc+0x3e0>
	tHighpass_initToPool(&chVocFinalHP2, 20.0f, &smallPool);
 8015874:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8015878:	4f63      	ldr	r7, [pc, #396]	; (8015a08 <SFXVocoderChAlloc+0x3e4>)
		tSawtooth_initToPool(&osc[i], &smallPool);
 801587a:	4e50      	ldr	r6, [pc, #320]	; (80159bc <SFXVocoderChAlloc+0x398>)
	tHighpass_initToPool(&chVocFinalHP2, 20.0f, &smallPool);
 801587c:	494f      	ldr	r1, [pc, #316]	; (80159bc <SFXVocoderChAlloc+0x398>)
 801587e:	4863      	ldr	r0, [pc, #396]	; (8015a0c <SFXVocoderChAlloc+0x3e8>)
 8015880:	f00d fbf8 	bl	8023074 <tHighpass_initToPool>
 8015884:	193d      	adds	r5, r7, r4
		tSawtooth_initToPool(&osc[i], &smallPool);
 8015886:	eb08 0004 	add.w	r0, r8, r4
 801588a:	4631      	mov	r1, r6
 801588c:	3404      	adds	r4, #4
 801588e:	f00f fc95 	bl	80251bc <tSawtooth_initToPool>
		tRosenbergGlottalPulse_initToPool(&glottal[i], &smallPool);
 8015892:	4631      	mov	r1, r6
 8015894:	4628      	mov	r0, r5
 8015896:	f00b fb29 	bl	8020eec <tRosenbergGlottalPulse_initToPool>
		tRosenbergGlottalPulse_setOpenLength(&glottal[i], 0.3f);
 801589a:	eeb0 0a68 	vmov.f32	s0, s17
 801589e:	4628      	mov	r0, r5
 80158a0:	f00b fc22 	bl	80210e8 <tRosenbergGlottalPulse_setOpenLength>
		tRosenbergGlottalPulse_setPulseLength(&glottal[i], 0.4f);
 80158a4:	eeb0 0a48 	vmov.f32	s0, s16
 80158a8:	4628      	mov	r0, r5
 80158aa:	f00b fc2b 	bl	8021104 <tRosenbergGlottalPulse_setPulseLength>
	for (int i = 0; i < NUM_VOC_VOICES; i++)
 80158ae:	2c20      	cmp	r4, #32
 80158b0:	d1e8      	bne.n	8015884 <SFXVocoderChAlloc+0x260>
	setLED_A(numVoices == 1);
 80158b2:	f899 0000 	ldrb.w	r0, [r9]
 80158b6:	f1a0 0001 	sub.w	r0, r0, #1
 80158ba:	fab0 f080 	clz	r0, r0
 80158be:	0940      	lsrs	r0, r0, #5
 80158c0:	f7fe f9fa 	bl	8013cb8 <setLED_A>
	setLED_B(internalExternal);
 80158c4:	4b52      	ldr	r3, [pc, #328]	; (8015a10 <SFXVocoderChAlloc+0x3ec>)
 80158c6:	7818      	ldrb	r0, [r3, #0]
 80158c8:	f7fe fa04 	bl	8013cd4 <setLED_B>
	setLED_C(vocChFreeze);
 80158cc:	4b51      	ldr	r3, [pc, #324]	; (8015a14 <SFXVocoderChAlloc+0x3f0>)
 80158ce:	7818      	ldrb	r0, [r3, #0]
}
 80158d0:	b003      	add	sp, #12
 80158d2:	ecbd 8b04 	vpop	{d8-d9}
 80158d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	setLED_C(vocChFreeze);
 80158da:	f7fe ba09 	b.w	8013cf0 <setLED_C>
			tVZFilter_initToPool(&analysisBands[i][0], Highpass, bandFreq, thisBandwidth, &smallPool);
 80158de:	4a37      	ldr	r2, [pc, #220]	; (80159bc <SFXVocoderChAlloc+0x398>)
 80158e0:	2100      	movs	r1, #0
 80158e2:	484d      	ldr	r0, [pc, #308]	; (8015a18 <SFXVocoderChAlloc+0x3f4>)
 80158e4:	f00d fc0a 	bl	80230fc <tVZFilter_initToPool>
			tVZFilter_initToPool(&analysisBands[i][1], Highpass, bandFreq, thisBandwidth, &smallPool);
 80158e8:	edd6 0a00 	vldr	s1, [r6]
 80158ec:	eeb0 0a48 	vmov.f32	s0, s16
 80158f0:	4a32      	ldr	r2, [pc, #200]	; (80159bc <SFXVocoderChAlloc+0x398>)
 80158f2:	2100      	movs	r1, #0
 80158f4:	4849      	ldr	r0, [pc, #292]	; (8015a1c <SFXVocoderChAlloc+0x3f8>)
 80158f6:	f00d fc01 	bl	80230fc <tVZFilter_initToPool>
			tVZFilter_initToPool(&synthesisBands[i][0], Highpass, bandFreq, thisBandwidth, &smallPool);
 80158fa:	edd6 0a00 	vldr	s1, [r6]
 80158fe:	eeb0 0a48 	vmov.f32	s0, s16
 8015902:	4a2e      	ldr	r2, [pc, #184]	; (80159bc <SFXVocoderChAlloc+0x398>)
 8015904:	2100      	movs	r1, #0
 8015906:	4846      	ldr	r0, [pc, #280]	; (8015a20 <SFXVocoderChAlloc+0x3fc>)
 8015908:	f00d fbf8 	bl	80230fc <tVZFilter_initToPool>
			tVZFilter_initToPool(&synthesisBands[i][1], Highpass, bandFreq, thisBandwidth, &smallPool);
 801590c:	eeb0 0a48 	vmov.f32	s0, s16
 8015910:	edd6 0a00 	vldr	s1, [r6]
 8015914:	2100      	movs	r1, #0
 8015916:	4a29      	ldr	r2, [pc, #164]	; (80159bc <SFXVocoderChAlloc+0x398>)
 8015918:	4842      	ldr	r0, [pc, #264]	; (8015a24 <SFXVocoderChAlloc+0x400>)
 801591a:	f00d fbef 	bl	80230fc <tVZFilter_initToPool>
		tExpSmooth_initToPool(&envFollowers[i], 0.0f, 0.001f, &smallPool); // factor of .001 is 10 ms?
 801591e:	4638      	mov	r0, r7
 8015920:	4926      	ldr	r1, [pc, #152]	; (80159bc <SFXVocoderChAlloc+0x398>)
 8015922:	eddf 0a29 	vldr	s1, [pc, #164]	; 80159c8 <SFXVocoderChAlloc+0x3a4>
 8015926:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80159cc <SFXVocoderChAlloc+0x3a8>
 801592a:	f00d f859 	bl	80229e0 <tExpSmooth_initToPool>
 801592e:	e76f      	b.n	8015810 <SFXVocoderChAlloc+0x1ec>
			tVZFilter_initToPool(&analysisBands[i][0], Lowpass, bandFreq, thisBandwidth, &smallPool);
 8015930:	edd6 0a00 	vldr	s1, [r6]
 8015934:	4658      	mov	r0, fp
 8015936:	2101      	movs	r1, #1
 8015938:	f00d fbe0 	bl	80230fc <tVZFilter_initToPool>
			tVZFilter_initToPool(&analysisBands[i][1], Lowpass, bandFreq, thisBandwidth, &smallPool);
 801593c:	edd6 0a00 	vldr	s1, [r6]
 8015940:	eeb0 0a48 	vmov.f32	s0, s16
 8015944:	4a1d      	ldr	r2, [pc, #116]	; (80159bc <SFXVocoderChAlloc+0x398>)
 8015946:	2101      	movs	r1, #1
 8015948:	4821      	ldr	r0, [pc, #132]	; (80159d0 <SFXVocoderChAlloc+0x3ac>)
 801594a:	f00d fbd7 	bl	80230fc <tVZFilter_initToPool>
			tVZFilter_initToPool(&synthesisBands[i][0], Lowpass, bandFreq,thisBandwidth, &smallPool);
 801594e:	edd6 0a00 	vldr	s1, [r6]
 8015952:	eeb0 0a48 	vmov.f32	s0, s16
 8015956:	4a19      	ldr	r2, [pc, #100]	; (80159bc <SFXVocoderChAlloc+0x398>)
 8015958:	2101      	movs	r1, #1
 801595a:	481e      	ldr	r0, [pc, #120]	; (80159d4 <SFXVocoderChAlloc+0x3b0>)
 801595c:	f00d fbce 	bl	80230fc <tVZFilter_initToPool>
			tVZFilter_initToPool(&synthesisBands[i][1], Lowpass, bandFreq,thisBandwidth, &smallPool);
 8015960:	eeb0 0a48 	vmov.f32	s0, s16
 8015964:	edd6 0a00 	vldr	s1, [r6]
 8015968:	2101      	movs	r1, #1
 801596a:	4a14      	ldr	r2, [pc, #80]	; (80159bc <SFXVocoderChAlloc+0x398>)
 801596c:	481a      	ldr	r0, [pc, #104]	; (80159d8 <SFXVocoderChAlloc+0x3b4>)
 801596e:	f00d fbc5 	bl	80230fc <tVZFilter_initToPool>
		tExpSmooth_initToPool(&envFollowers[i], 0.0f, 0.001f, &smallPool); // factor of .001 is 10 ms?
 8015972:	4912      	ldr	r1, [pc, #72]	; (80159bc <SFXVocoderChAlloc+0x398>)
 8015974:	eef0 0a49 	vmov.f32	s1, s18
 8015978:	4638      	mov	r0, r7
 801597a:	eeb0 0a68 	vmov.f32	s0, s17
 801597e:	f00d f82f 	bl	80229e0 <tExpSmooth_initToPool>
 8015982:	e6f5      	b.n	8015770 <SFXVocoderChAlloc+0x14c>
 8015984:	20000251 	.word	0x20000251
 8015988:	3f7d70a4 	.word	0x3f7d70a4
 801598c:	20016710 	.word	0x20016710
 8015990:	41873333 	.word	0x41873333
 8015994:	3f4ccccd 	.word	0x3f4ccccd
 8015998:	becccccd 	.word	0xbecccccd
 801599c:	45bb8000 	.word	0x45bb8000
 80159a0:	42c60000 	.word	0x42c60000
 80159a4:	200187c4 	.word	0x200187c4
 80159a8:	3dcccccd 	.word	0x3dcccccd
 80159ac:	42700000 	.word	0x42700000
 80159b0:	3daaaaab 	.word	0x3daaaaab
 80159b4:	20016e68 	.word	0x20016e68
 80159b8:	20016240 	.word	0x20016240
 80159bc:	20014b2c 	.word	0x20014b2c
 80159c0:	20017624 	.word	0x20017624
 80159c4:	20017660 	.word	0x20017660
 80159c8:	3a83126f 	.word	0x3a83126f
 80159cc:	00000000 	.word	0x00000000
 80159d0:	20018270 	.word	0x20018270
 80159d4:	20017460 	.word	0x20017460
 80159d8:	20017464 	.word	0x20017464
 80159dc:	20016218 	.word	0x20016218
 80159e0:	20016e64 	.word	0x20016e64
 80159e4:	200176c4 	.word	0x200176c4
 80159e8:	20017554 	.word	0x20017554
 80159ec:	3d4ccccd 	.word	0x3d4ccccd
 80159f0:	2001825c 	.word	0x2001825c
 80159f4:	459c4000 	.word	0x459c4000
 80159f8:	20016e5c 	.word	0x20016e5c
 80159fc:	2001623c 	.word	0x2001623c
 8015a00:	3e99999a 	.word	0x3e99999a
 8015a04:	3ecccccd 	.word	0x3ecccccd
 8015a08:	20016248 	.word	0x20016248
 8015a0c:	20018260 	.word	0x20018260
 8015a10:	2000059c 	.word	0x2000059c
 8015a14:	20000610 	.word	0x20000610
 8015a18:	20018324 	.word	0x20018324
 8015a1c:	20018328 	.word	0x20018328
 8015a20:	20017518 	.word	0x20017518
 8015a24:	2001751c 	.word	0x2001751c
 8015a28:	20000244 	.word	0x20000244
 8015a2c:	20017548 	.word	0x20017548
 8015a30:	2001826c 	.word	0x2001826c
 8015a34:	200172b0 	.word	0x200172b0
 8015a38:	20000250 	.word	0x20000250
 8015a3c:	20017314 	.word	0x20017314

08015a40 <SFXVocoderChFrame>:
{
 8015a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8015a44:	4c4c      	ldr	r4, [pc, #304]	; (8015b78 <SFXVocoderChFrame+0x138>)
{
 8015a46:	ed2d 8b08 	vpush	{d8-d11}
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8015a4a:	7d23      	ldrb	r3, [r4, #20]
{
 8015a4c:	b087      	sub	sp, #28
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8015a4e:	2b01      	cmp	r3, #1
 8015a50:	d113      	bne.n	8015a7a <SFXVocoderChFrame+0x3a>
		numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8015a52:	4d4a      	ldr	r5, [pc, #296]	; (8015b7c <SFXVocoderChFrame+0x13c>)
		tSimplePoly_setNumVoices(&poly, numVoices);
 8015a54:	484a      	ldr	r0, [pc, #296]	; (8015b80 <SFXVocoderChFrame+0x140>)
		numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8015a56:	782a      	ldrb	r2, [r5, #0]
 8015a58:	2a01      	cmp	r2, #1
 8015a5a:	bf98      	it	ls
 8015a5c:	2308      	movls	r3, #8
		tSimplePoly_setNumVoices(&poly, numVoices);
 8015a5e:	4619      	mov	r1, r3
		numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8015a60:	702b      	strb	r3, [r5, #0]
		tSimplePoly_setNumVoices(&poly, numVoices);
 8015a62:	f00f faed 	bl	8025040 <tSimplePoly_setNumVoices>
		setLED_A(numVoices == 1);
 8015a66:	7828      	ldrb	r0, [r5, #0]
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 8015a68:	2300      	movs	r3, #0
		setLED_A(numVoices == 1);
 8015a6a:	f1a0 0001 	sub.w	r0, r0, #1
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 8015a6e:	7523      	strb	r3, [r4, #20]
		setLED_A(numVoices == 1);
 8015a70:	fab0 f080 	clz	r0, r0
 8015a74:	0940      	lsrs	r0, r0, #5
 8015a76:	f7fe f91f 	bl	8013cb8 <setLED_A>
	if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 8015a7a:	7e23      	ldrb	r3, [r4, #24]
 8015a7c:	2b01      	cmp	r3, #1
 8015a7e:	f000 8295 	beq.w	8015fac <SFXVocoderChFrame+0x56c>
	if (buttonActionsSFX[ButtonC][ActionPress] == 1)
 8015a82:	7f23      	ldrb	r3, [r4, #28]
 8015a84:	2b01      	cmp	r3, #1
 8015a86:	f000 82a0 	beq.w	8015fca <SFXVocoderChFrame+0x58a>
	displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 8015a8a:	4b3e      	ldr	r3, [pc, #248]	; (8015b84 <SFXVocoderChFrame+0x144>)
	displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 8015a8c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015a90:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8015b88 <SFXVocoderChFrame+0x148>
	displayValues[12] = (presetKnobValues[VocoderCh][12] * 4.0f) - 2.0f; //tilt
 8015a94:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015a98:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
	displayValues[12] = (presetKnobValues[VocoderCh][12] * 4.0f) - 2.0f; //tilt
 8015a9c:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
	displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 8015aa0:	ed93 5a1c 	vldr	s10, [r3, #112]	; 0x70
	displayValues[10] = presetKnobValues[VocoderCh][10] + 0.5f; //bandsquish
 8015aa4:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015aa8:	ee27 7a26 	vmul.f32	s14, s14, s13
	displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 8015aac:	eddf 4a37 	vldr	s9, [pc, #220]	; 8015b8c <SFXVocoderChFrame+0x14c>
	displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 8015ab0:	ed93 2a1a 	vldr	s4, [r3, #104]	; 0x68
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015ab4:	eef2 2a00 	vmov.f32	s5, #32	; 0x41000000  8.0
	displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 8015ab8:	eee5 4a27 	vfma.f32	s9, s10, s15
	displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 8015abc:	ed9f 3a34 	vldr	s6, [pc, #208]	; 8015b90 <SFXVocoderChFrame+0x150>
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015ac0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 8015ac4:	ed9f 4a33 	vldr	s8, [pc, #204]	; 8015b94 <SFXVocoderChFrame+0x154>
	displayValues[10] = presetKnobValues[VocoderCh][10] + 0.5f; //bandsquish
 8015ac8:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
	chVocOutputGain = 9.0f * displayValues[0];
 8015acc:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
	displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 8015ad0:	eea2 4a03 	vfma.f32	s8, s4, s6
	displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 8015ad4:	ed93 3a19 	vldr	s6, [r3, #100]	; 0x64
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015ad8:	ed8d 7a00 	vstr	s14, [sp]
	displayValues[10] = presetKnobValues[VocoderCh][10] + 0.5f; //bandsquish
 8015adc:	ee35 5a23 	vadd.f32	s10, s10, s7
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015ae0:	f89d 2000 	ldrb.w	r2, [sp]
	chVocOutputGain = 9.0f * displayValues[0];
 8015ae4:	ee63 6a26 	vmul.f32	s13, s6, s13
	displayValues[12] = (presetKnobValues[VocoderCh][12] * 4.0f) - 2.0f; //tilt
 8015ae8:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015aec:	2500      	movs	r5, #0
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015aee:	ee07 2a90 	vmov	s15, r2
	displayValues[13] = presetKnobValues[VocoderCh][13]; //stereo
 8015af2:	edd3 3a26 	vldr	s7, [r3, #152]	; 0x98
	displayValues[12] = (presetKnobValues[VocoderCh][12] * 4.0f) - 2.0f; //tilt
 8015af6:	eea7 6a25 	vfma.f32	s12, s14, s11
	displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 8015afa:	ed9f 2a27 	vldr	s4, [pc, #156]	; 8015b98 <SFXVocoderChFrame+0x158>
	oneMinusStereo = 1.0f - displayValues[13];
 8015afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 8015b02:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 8015b0a:	4c24      	ldr	r4, [pc, #144]	; (8015b9c <SFXVocoderChFrame+0x15c>)
	displayValues[4] = presetKnobValues[VocoderCh][4]; //noise thresh
 8015b0c:	6f5e      	ldr	r6, [r3, #116]	; 0x74
	displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 8015b0e:	ee65 5a82 	vmul.f32	s11, s11, s4
	displayValues[5] = presetKnobValues[VocoderCh][5]; //crossfade between sawtooth and glottal pulse
 8015b12:	6f98      	ldr	r0, [r3, #120]	; 0x78
	oneMinusStereo = 1.0f - displayValues[13];
 8015b14:	ee37 7a63 	vsub.f32	s14, s14, s7
	displayValues[6] = presetKnobValues[VocoderCh][6]; //pulse width
 8015b18:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015b1a:	ee77 7aa2 	vadd.f32	s15, s15, s5
	displayValues[7] = presetKnobValues[VocoderCh][7]; //pulse shape
 8015b1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015b22:	46a9      	mov	r9, r5
	displayValues[4] = presetKnobValues[VocoderCh][4]; //noise thresh
 8015b24:	6126      	str	r6, [r4, #16]
	displayValues[5] = presetKnobValues[VocoderCh][5]; //crossfade between sawtooth and glottal pulse
 8015b26:	6160      	str	r0, [r4, #20]
	displayValues[8] = presetKnobValues[VocoderCh][8]; //breathiness
 8015b28:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
	displayValues[9] = presetKnobValues[VocoderCh][9]; //speed
 8015b2c:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
	displayValues[6] = presetKnobValues[VocoderCh][6]; //pulse width
 8015b30:	61a1      	str	r1, [r4, #24]
	displayValues[7] = presetKnobValues[VocoderCh][7]; //pulse shape
 8015b32:	61e2      	str	r2, [r4, #28]
	displayValues[14] = presetKnobValues[VocoderCh][14]; //snap to bark scale
 8015b34:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	chVocOutputGain = 9.0f * displayValues[0];
 8015b38:	4a19      	ldr	r2, [pc, #100]	; (8015ba0 <SFXVocoderChFrame+0x160>)
	oneMinusStereo = 1.0f - displayValues[13];
 8015b3a:	4b1a      	ldr	r3, [pc, #104]	; (8015ba4 <SFXVocoderChFrame+0x164>)
	displayValues[8] = presetKnobValues[VocoderCh][8]; //breathiness
 8015b3c:	6226      	str	r6, [r4, #32]
	displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015b3e:	edc4 7a02 	vstr	s15, [r4, #8]
	displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 8015b42:	ed84 4a01 	vstr	s8, [r4, #4]
	displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 8015b46:	edc4 4a03 	vstr	s9, [r4, #12]
	displayValues[9] = presetKnobValues[VocoderCh][9]; //speed
 8015b4a:	6260      	str	r0, [r4, #36]	; 0x24
	displayValues[10] = presetKnobValues[VocoderCh][10] + 0.5f; //bandsquish
 8015b4c:	ed84 5a0a 	vstr	s10, [r4, #40]	; 0x28
	displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 8015b50:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
	displayValues[12] = (presetKnobValues[VocoderCh][12] * 4.0f) - 2.0f; //tilt
 8015b54:	ed84 6a0c 	vstr	s12, [r4, #48]	; 0x30
	displayValues[14] = presetKnobValues[VocoderCh][14]; //snap to bark scale
 8015b58:	63a1      	str	r1, [r4, #56]	; 0x38
	displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 8015b5a:	ed84 3a00 	vstr	s6, [r4]
	chVocOutputGain = 9.0f * displayValues[0];
 8015b5e:	edc2 6a00 	vstr	s13, [r2]
 8015b62:	4f11      	ldr	r7, [pc, #68]	; (8015ba8 <SFXVocoderChFrame+0x168>)
	displayValues[13] = presetKnobValues[VocoderCh][13]; //stereo
 8015b64:	edc4 3a0d 	vstr	s7, [r4, #52]	; 0x34
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015b68:	4e05      	ldr	r6, [pc, #20]	; (8015b80 <SFXVocoderChFrame+0x140>)
	oneMinusStereo = 1.0f - displayValues[13];
 8015b6a:	ed83 7a00 	vstr	s14, [r3]
		tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 8015b6e:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 8015bac <SFXVocoderChFrame+0x16c>
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8015b72:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8015bb0 <SFXVocoderChFrame+0x170>
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015b76:	e06d      	b.n	8015c54 <SFXVocoderChFrame+0x214>
 8015b78:	20018714 	.word	0x20018714
 8015b7c:	20000250 	.word	0x20000250
 8015b80:	20017554 	.word	0x20017554
 8015b84:	20016710 	.word	0x20016710
 8015b88:	41873333 	.word	0x41873333
 8015b8c:	3dcccccd 	.word	0x3dcccccd
 8015b90:	3f4ccccd 	.word	0x3f4ccccd
 8015b94:	becccccd 	.word	0xbecccccd
 8015b98:	42700000 	.word	0x42700000
 8015b9c:	200187c4 	.word	0x200187c4
 8015ba0:	200001ec 	.word	0x200001ec
 8015ba4:	20000254 	.word	0x20000254
 8015ba8:	20016e3c 	.word	0x20016e3c
 8015bac:	00000000 	.word	0x00000000
 8015bb0:	2aaaaaab 	.word	0x2aaaaaab
		tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 8015bb4:	f00f fa74 	bl	80250a0 <tSimplePoly_getVelocity>
 8015bb8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015bbc:	2800      	cmp	r0, #0
 8015bbe:	4658      	mov	r0, fp
 8015bc0:	fe30 0a08 	vselgt.f32	s0, s0, s16
 8015bc4:	f00c ff48 	bl	8022a58 <tExpSmooth_setDest>
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8015bc8:	4651      	mov	r1, sl
 8015bca:	4630      	mov	r0, r6
 8015bcc:	f00f fa5c 	bl	8025088 <tSimplePoly_getPitch>
 8015bd0:	ee07 0a90 	vmov	s15, r0
 8015bd4:	4ad0      	ldr	r2, [pc, #832]	; (8015f18 <SFXVocoderChFrame+0x4d8>)
 8015bd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8015bda:	4bd0      	ldr	r3, [pc, #832]	; (8015f1c <SFXVocoderChFrame+0x4dc>)
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8015bdc:	ed92 0a00 	vldr	s0, [r2]
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8015be0:	781a      	ldrb	r2, [r3, #0]
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8015be2:	ee37 7a00 	vadd.f32	s14, s14, s0
	float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8015be6:	49ce      	ldr	r1, [pc, #824]	; (8015f20 <SFXVocoderChFrame+0x4e0>)
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8015be8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015bec:	ee17 3a90 	vmov	r3, s15
 8015bf0:	1a9b      	subs	r3, r3, r2
 8015bf2:	fb88 2003 	smull	r2, r0, r8, r3
 8015bf6:	17da      	asrs	r2, r3, #31
 8015bf8:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 8015bfc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015c00:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8015c04:	ee07 3a90 	vmov	s15, r3
 8015c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8015c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015c10:	ee17 3a90 	vmov	r3, s15
 8015c14:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015c18:	ed93 0a00 	vldr	s0, [r3]
	freq[voice] = LEAF_midiToFrequency(tunedNote);
 8015c1c:	ee37 0a00 	vadd.f32	s0, s14, s0
 8015c20:	f00e fc98 	bl	8024554 <LEAF_midiToFrequency>
		tSawtooth_setFreq(&osc[i], freq[i]);
 8015c24:	48bf      	ldr	r0, [pc, #764]	; (8015f24 <SFXVocoderChFrame+0x4e4>)
	freq[voice] = LEAF_midiToFrequency(tunedNote);
 8015c26:	ed87 0a00 	vstr	s0, [r7]
		tSawtooth_setFreq(&osc[i], freq[i]);
 8015c2a:	4428      	add	r0, r5
 8015c2c:	f00f faee 	bl	802520c <tSawtooth_setFreq>
 8015c30:	4bbd      	ldr	r3, [pc, #756]	; (8015f28 <SFXVocoderChFrame+0x4e8>)
		tRosenbergGlottalPulse_setFreq(&glottal[i], freq[i]);
 8015c32:	ecb7 0a01 	vldmia	r7!, {s0}
 8015c36:	eb05 0a03 	add.w	sl, r5, r3
 8015c3a:	3504      	adds	r5, #4
 8015c3c:	4650      	mov	r0, sl
 8015c3e:	f00b fa45 	bl	80210cc <tRosenbergGlottalPulse_setFreq>
		tRosenbergGlottalPulse_setOpenLengthAndPulseLength(&glottal[i], displayValues[6] * displayValues[7], displayValues[6]);
 8015c42:	edd4 0a06 	vldr	s1, [r4, #24]
 8015c46:	ed94 0a07 	vldr	s0, [r4, #28]
 8015c4a:	4650      	mov	r0, sl
 8015c4c:	ee20 0a80 	vmul.f32	s0, s1, s0
 8015c50:	f00b fa66 	bl	8021120 <tRosenbergGlottalPulse_setOpenLengthAndPulseLength>
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015c54:	4630      	mov	r0, r6
		tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 8015c56:	fa5f fa89 	uxtb.w	sl, r9
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015c5a:	f00f f9f9 	bl	8025050 <tSimplePoly_getNumVoices>
 8015c5e:	4bb3      	ldr	r3, [pc, #716]	; (8015f2c <SFXVocoderChFrame+0x4ec>)
 8015c60:	4548      	cmp	r0, r9
		tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 8015c62:	4651      	mov	r1, sl
 8015c64:	4630      	mov	r0, r6
 8015c66:	eb05 0b03 	add.w	fp, r5, r3
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015c6a:	f109 0901 	add.w	r9, r9, #1
 8015c6e:	dca1      	bgt.n	8015bb4 <SFXVocoderChFrame+0x174>
	numberOfVocoderBands = displayValues[2];
 8015c70:	ed94 7a02 	vldr	s14, [r4, #8]
	float warpFactor = 1.0f + displayValues[1];
 8015c74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if ((numberOfVocoderBands != prevNumberOfVocoderBands) || (myQ != prevMyQ) || (warpFactor != prevWarpFactor) || (bandSquish != prevBandSquish) || (bandOffset != prevBandOffset) || (myTilt != prevMyTilt) || (barkPull != prevBarkPull))
 8015c78:	4ead      	ldr	r6, [pc, #692]	; (8015f30 <SFXVocoderChFrame+0x4f0>)
	numberOfVocoderBands = displayValues[2];
 8015c7a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8015c7e:	4dad      	ldr	r5, [pc, #692]	; (8015f34 <SFXVocoderChFrame+0x4f4>)
	if ((numberOfVocoderBands != prevNumberOfVocoderBands) || (myQ != prevMyQ) || (warpFactor != prevWarpFactor) || (bandSquish != prevBandSquish) || (bandOffset != prevBandOffset) || (myTilt != prevMyTilt) || (barkPull != prevBarkPull))
 8015c80:	7833      	ldrb	r3, [r6, #0]
	float warpFactor = 1.0f + displayValues[1];
 8015c82:	edd4 8a01 	vldr	s17, [r4, #4]
	numberOfVocoderBands = displayValues[2];
 8015c86:	ed8d 7a00 	vstr	s14, [sp]
 8015c8a:	f89d 1000 	ldrb.w	r1, [sp]
	float warpFactor = 1.0f + displayValues[1];
 8015c8e:	ee78 8aa7 	vadd.f32	s17, s17, s15
	float myQ = displayValues[3];
 8015c92:	ed94 8a03 	vldr	s16, [r4, #12]
	if ((numberOfVocoderBands != prevNumberOfVocoderBands) || (myQ != prevMyQ) || (warpFactor != prevWarpFactor) || (bandSquish != prevBandSquish) || (bandOffset != prevBandOffset) || (myTilt != prevMyTilt) || (barkPull != prevBarkPull))
 8015c96:	428b      	cmp	r3, r1
	float bandSquish = displayValues[10];
 8015c98:	ed94 9a0a 	vldr	s18, [r4, #40]	; 0x28
	numberOfVocoderBands = displayValues[2];
 8015c9c:	7029      	strb	r1, [r5, #0]
	float bandOffset = displayValues[11];
 8015c9e:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
	float myTilt = displayValues[12];
 8015ca2:	edd4 aa0c 	vldr	s21, [r4, #48]	; 0x30
	float barkPull = displayValues[14];
 8015ca6:	edd4 9a0e 	vldr	s19, [r4, #56]	; 0x38
 8015caa:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8015f98 <SFXVocoderChFrame+0x558>
	if ((numberOfVocoderBands != prevNumberOfVocoderBands) || (myQ != prevMyQ) || (warpFactor != prevWarpFactor) || (bandSquish != prevBandSquish) || (bandOffset != prevBandOffset) || (myTilt != prevMyTilt) || (barkPull != prevBarkPull))
 8015cae:	f000 8107 	beq.w	8015ec0 <SFXVocoderChFrame+0x480>
 8015cb2:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 8015f9c <SFXVocoderChFrame+0x55c>
 8015cb6:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8015fa0 <SFXVocoderChFrame+0x560>
 8015cba:	4b9f      	ldr	r3, [pc, #636]	; (8015f38 <SFXVocoderChFrame+0x4f8>)
 8015cbc:	9300      	str	r3, [sp, #0]
 8015cbe:	4b9f      	ldr	r3, [pc, #636]	; (8015f3c <SFXVocoderChFrame+0x4fc>)
 8015cc0:	9301      	str	r3, [sp, #4]
 8015cc2:	4b9f      	ldr	r3, [pc, #636]	; (8015f40 <SFXVocoderChFrame+0x500>)
 8015cc4:	9302      	str	r3, [sp, #8]
		invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015cc6:	ee07 1a90 	vmov	s15, r1
 8015cca:	ed9f 6a9e 	vldr	s12, [pc, #632]	; 8015f44 <SFXVocoderChFrame+0x504>
 8015cce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 8015cd2:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8015f48 <SFXVocoderChFrame+0x508>
		invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
		bandWidthInSemitones = 94.0f * bandSquish * invNumberOfVocoderBands; //was 90
 8015cda:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8015f4c <SFXVocoderChFrame+0x50c>
		alteringBands = 1;
 8015cde:	499c      	ldr	r1, [pc, #624]	; (8015f50 <SFXVocoderChFrame+0x510>)
 8015ce0:	f04f 0c01 	mov.w	ip, #1
		invMyQ = 1.0f / myQ;
 8015ce4:	ee85 5a88 	vdiv.f32	s10, s11, s16
 8015ce8:	4b9a      	ldr	r3, [pc, #616]	; (8015f54 <SFXVocoderChFrame+0x514>)
		bandWidthInSemitones = 94.0f * bandSquish * invNumberOfVocoderBands; //was 90
 8015cea:	489b      	ldr	r0, [pc, #620]	; (8015f58 <SFXVocoderChFrame+0x518>)
		invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015cec:	4a9b      	ldr	r2, [pc, #620]	; (8015f5c <SFXVocoderChFrame+0x51c>)
		bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 8015cee:	f8df e2b4 	ldr.w	lr, [pc, #692]	; 8015fa4 <SFXVocoderChFrame+0x564>
		thisBandwidth = bandWidthInOctaves * myQ;
 8015cf2:	4f9b      	ldr	r7, [pc, #620]	; (8015f60 <SFXVocoderChFrame+0x520>)
		invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015cf4:	ee76 6ac6 	vsub.f32	s13, s13, s12
		alteringBands = 1;
 8015cf8:	9103      	str	r1, [sp, #12]
		bandWidthInSemitones = 94.0f * bandSquish * invNumberOfVocoderBands; //was 90
 8015cfa:	ee69 7a27 	vmul.f32	s15, s18, s15
		alteringBands = 1;
 8015cfe:	f8c1 c000 	str.w	ip, [r1]
		invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015d02:	ee85 6aa6 	vdiv.f32	s12, s11, s13
		invMyQ = 1.0f / myQ;
 8015d06:	ed83 5a00 	vstr	s10, [r3]
		bandWidthInSemitones = 94.0f * bandSquish * invNumberOfVocoderBands; //was 90
 8015d0a:	ee67 7a86 	vmul.f32	s15, s15, s12
		invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015d0e:	ed82 6a00 	vstr	s12, [r2]
		bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 8015d12:	ee27 7a87 	vmul.f32	s14, s15, s14
		bandWidthInSemitones = 94.0f * bandSquish * invNumberOfVocoderBands; //was 90
 8015d16:	edc0 7a00 	vstr	s15, [r0]
		thisBandwidth = bandWidthInOctaves * myQ;
 8015d1a:	ee67 6a08 	vmul.f32	s13, s14, s16
		bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 8015d1e:	ed8e 7a00 	vstr	s14, [lr]
		thisBandwidth = bandWidthInOctaves * myQ;
 8015d22:	edc7 6a00 	vstr	s13, [r7]
		float bandFreq = faster_mtof((currentBandToAlter * bandWidthInSemitones) + bandOffset); //midinote 28 (41Hz) to midinote 134 (18814Hz) is 106 midinotes, divide that by how many bands to find out how far apart to put the bands
 8015d26:	f8df 9280 	ldr.w	r9, [pc, #640]	; 8015fa8 <SFXVocoderChFrame+0x568>
 8015d2a:	eeb0 0a4a 	vmov.f32	s0, s20
	float oneMinusBarkPull = 1.0f - barkPull;
 8015d2e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
		float bandFreq = faster_mtof((currentBandToAlter * bandWidthInSemitones) + bandOffset); //midinote 28 (41Hz) to midinote 134 (18814Hz) is 106 midinotes, divide that by how many bands to find out how far apart to put the bands
 8015d32:	ed99 7a00 	vldr	s14, [r9]
 8015d36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float oneMinusBarkPull = 1.0f - barkPull;
 8015d3a:	ee7b ba69 	vsub.f32	s23, s22, s19
		float bandFreq = faster_mtof((currentBandToAlter * bandWidthInSemitones) + bandOffset); //midinote 28 (41Hz) to midinote 134 (18814Hz) is 106 midinotes, divide that by how many bands to find out how far apart to put the bands
 8015d3e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8015d42:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8015d46:	f00e fc89 	bl	802465c <faster_mtof>
		bandFreq = (bandFreq * oneMinusBarkPull) + (barkBandFreqs[currentBandToAlter] * barkPull);
 8015d4a:	f8d9 c000 	ldr.w	ip, [r9]
		float tiltY = displayValues[12] * myHeight + tiltOffset;
 8015d4e:	9a05      	ldr	r2, [sp, #20]
 8015d50:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
		bandFreq = (bandFreq * oneMinusBarkPull) + (barkBandFreqs[currentBandToAlter] * barkPull);
 8015d54:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8015d58:	4882      	ldr	r0, [pc, #520]	; (8015f64 <SFXVocoderChFrame+0x524>)
		float tiltY = displayValues[12] * myHeight + tiltOffset;
 8015d5a:	edd2 6a00 	vldr	s13, [r2]
		float myHeight = currentBandToAlter * invNumberOfVocoderBands; //x value
 8015d5e:	ee06 ca10 	vmov	s12, ip
		bandFreq = (bandFreq * oneMinusBarkPull) + (barkBandFreqs[currentBandToAlter] * barkPull);
 8015d62:	4408      	add	r0, r1
		float tiltY = displayValues[12] * myHeight + tiltOffset;
 8015d64:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
		float myHeight = currentBandToAlter * invNumberOfVocoderBands; //x value
 8015d68:	eeb8 4ac6 	vcvt.f32.s32	s8, s12
		float bandBandwidth = (thisBandwidth * oneMinusBarkPull) + (barkBandWidths[currentBandToAlter] *  barkPull * myQ);
 8015d6c:	4a7e      	ldr	r2, [pc, #504]	; (8015f68 <SFXVocoderChFrame+0x528>)
		float tiltY = displayValues[12] * myHeight + tiltOffset;
 8015d6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
		bandFreq = (bandFreq * oneMinusBarkPull) + (barkBandFreqs[currentBandToAlter] * barkPull);
 8015d72:	edd0 7a00 	vldr	s15, [r0]
		float tiltOffset = (1.0f - ((myTilt * 0.5f) + 0.5f)) + 0.5f;
 8015d76:	ee7a 4a8b 	vadd.f32	s9, s21, s22
		bandGains[currentBandToAlter] = invMyQ * tiltY;
 8015d7a:	9b04      	ldr	r3, [sp, #16]
		bandFreq = (bandFreq * oneMinusBarkPull) + (barkBandFreqs[currentBandToAlter] * barkPull);
 8015d7c:	ee69 7aa7 	vmul.f32	s15, s19, s15
		if (bandFreq > 5000.0f) // a way to keep the upper bands fixed so consonants are not stretched even though vowels are
 8015d80:	eddf 5a7a 	vldr	s11, [pc, #488]	; 8015f6c <SFXVocoderChFrame+0x52c>
		float tiltY = displayValues[12] * myHeight + tiltOffset;
 8015d84:	eea4 7a26 	vfma.f32	s14, s8, s13
		float bandBandwidth = (thisBandwidth * oneMinusBarkPull) + (barkBandWidths[currentBandToAlter] *  barkPull * myQ);
 8015d88:	440a      	add	r2, r1
		float tiltY = displayValues[12] * myHeight + tiltOffset;
 8015d8a:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
		bandGains[currentBandToAlter] = invMyQ * tiltY;
 8015d8e:	ed93 6a00 	vldr	s12, [r3]
		bandFreq = (bandFreq * oneMinusBarkPull) + (barkBandFreqs[currentBandToAlter] * barkPull);
 8015d92:	eeeb 7a80 	vfma.f32	s15, s23, s0
		bandGains[currentBandToAlter] = invMyQ * tiltY;
 8015d96:	4b76      	ldr	r3, [pc, #472]	; (8015f70 <SFXVocoderChFrame+0x530>)
		float bandBandwidth = (thisBandwidth * oneMinusBarkPull) + (barkBandWidths[currentBandToAlter] *  barkPull * myQ);
 8015d98:	ee68 6a29 	vmul.f32	s13, s16, s19
 8015d9c:	edd2 0a00 	vldr	s1, [r2]
		bandGains[currentBandToAlter] = invMyQ * tiltY;
 8015da0:	4419      	add	r1, r3
		if (analysisOrSynthesis == 0)
 8015da2:	4b74      	ldr	r3, [pc, #464]	; (8015f74 <SFXVocoderChFrame+0x534>)
 8015da4:	ea4f 00cc 	mov.w	r0, ip, lsl #3
		float tiltY = displayValues[12] * myHeight + tiltOffset;
 8015da8:	eea4 7ac5 	vfms.f32	s14, s9, s10
		if (analysisOrSynthesis == 0)
 8015dac:	681b      	ldr	r3, [r3, #0]
		float bandBandwidth = (thisBandwidth * oneMinusBarkPull) + (barkBandWidths[currentBandToAlter] *  barkPull * myQ);
 8015dae:	ee66 0aa0 	vmul.f32	s1, s13, s1
 8015db2:	edd7 6a00 	vldr	s13, [r7]
		bandFreq = (bandFreq * oneMinusBarkPull) + (barkBandFreqs[currentBandToAlter] * barkPull);
 8015db6:	eeb0 0a67 	vmov.f32	s0, s15
 8015dba:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8015f78 <SFXVocoderChFrame+0x538>
		float bandBandwidth = (thisBandwidth * oneMinusBarkPull) + (barkBandWidths[currentBandToAlter] *  barkPull * myQ);
 8015dbe:	eee6 0aab 	vfma.f32	s1, s13, s23
		float tempWarpFactor = warpFactor;
 8015dc2:	eeb4 0ae5 	vcmpe.f32	s0, s11
 8015dc6:	fe80 0a67 	vminnm.f32	s0, s0, s15
		bandGains[currentBandToAlter] = invMyQ * tiltY;
 8015dca:	ee27 7a06 	vmul.f32	s14, s14, s12
		float tempWarpFactor = warpFactor;
 8015dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		bandGains[currentBandToAlter] = invMyQ * tiltY;
 8015dd2:	ed81 7a00 	vstr	s14, [r1]
		float tempWarpFactor = warpFactor;
 8015dd6:	bf98      	it	ls
 8015dd8:	eeb0 ba68 	vmovls.f32	s22, s17
		if (analysisOrSynthesis == 0)
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	f040 8100 	bne.w	8015fe2 <SFXVocoderChFrame+0x5a2>
			tVZFilter_setFreqAndBandwidth(&analysisBands[currentBandToAlter][0], bandFreq, bandBandwidth);
 8015de2:	4f66      	ldr	r7, [pc, #408]	; (8015f7c <SFXVocoderChFrame+0x53c>)
 8015de4:	4438      	add	r0, r7
 8015de6:	f00d fdd7 	bl	8023998 <tVZFilter_setFreqAndBandwidth>
			analysisBands[currentBandToAlter][1]->B = analysisBands[currentBandToAlter][0]->B;
 8015dea:	f8d9 3000 	ldr.w	r3, [r9]
 8015dee:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015df2:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8015df6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8015df8:	6851      	ldr	r1, [r2, #4]
 8015dfa:	6348      	str	r0, [r1, #52]	; 0x34
			analysisBands[currentBandToAlter][1]->fc = analysisBands[currentBandToAlter][0]->fc;
 8015dfc:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015e00:	6851      	ldr	r1, [r2, #4]
 8015e02:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015e04:	6288      	str	r0, [r1, #40]	; 0x28
			analysisBands[currentBandToAlter][1]->R2 = analysisBands[currentBandToAlter][0]->R2;
 8015e06:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015e0a:	6851      	ldr	r1, [r2, #4]
 8015e0c:	6940      	ldr	r0, [r0, #20]
 8015e0e:	6148      	str	r0, [r1, #20]
			analysisBands[currentBandToAlter][1]->cL = analysisBands[currentBandToAlter][0]->cL;
 8015e10:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015e14:	6851      	ldr	r1, [r2, #4]
 8015e16:	69c0      	ldr	r0, [r0, #28]
 8015e18:	61c8      	str	r0, [r1, #28]
			analysisBands[currentBandToAlter][1]->cB = analysisBands[currentBandToAlter][0]->cB;
 8015e1a:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015e1e:	6851      	ldr	r1, [r2, #4]
 8015e20:	6a00      	ldr	r0, [r0, #32]
 8015e22:	6208      	str	r0, [r1, #32]
			analysisBands[currentBandToAlter][1]->cH = analysisBands[currentBandToAlter][0]->cH;
 8015e24:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015e28:	6851      	ldr	r1, [r2, #4]
 8015e2a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8015e2c:	6248      	str	r0, [r1, #36]	; 0x24
			analysisBands[currentBandToAlter][1]->h = analysisBands[currentBandToAlter][0]->h;
 8015e2e:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015e32:	6851      	ldr	r1, [r2, #4]
 8015e34:	6980      	ldr	r0, [r0, #24]
 8015e36:	6188      	str	r0, [r1, #24]
			analysisBands[currentBandToAlter][1]->g = analysisBands[currentBandToAlter][0]->g;
 8015e38:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8015e3c:	6852      	ldr	r2, [r2, #4]
 8015e3e:	6909      	ldr	r1, [r1, #16]
			analysisOrSynthesis++;
 8015e40:	484c      	ldr	r0, [pc, #304]	; (8015f74 <SFXVocoderChFrame+0x534>)
			analysisBands[currentBandToAlter][1]->g = analysisBands[currentBandToAlter][0]->g;
 8015e42:	6111      	str	r1, [r2, #16]
			analysisOrSynthesis++;
 8015e44:	6802      	ldr	r2, [r0, #0]
		if ((currentBandToAlter >= numberOfVocoderBands) && (analysisOrSynthesis == 0))
 8015e46:	7829      	ldrb	r1, [r5, #0]
			analysisOrSynthesis++;
 8015e48:	3201      	adds	r2, #1
		if ((currentBandToAlter >= numberOfVocoderBands) && (analysisOrSynthesis == 0))
 8015e4a:	428b      	cmp	r3, r1
			analysisOrSynthesis++;
 8015e4c:	6002      	str	r2, [r0, #0]
		if ((currentBandToAlter >= numberOfVocoderBands) && (analysisOrSynthesis == 0))
 8015e4e:	db02      	blt.n	8015e56 <SFXVocoderChFrame+0x416>
 8015e50:	2a00      	cmp	r2, #0
 8015e52:	f000 8105 	beq.w	8016060 <SFXVocoderChFrame+0x620>
	prevBandOffset = bandOffset;
 8015e56:	9b00      	ldr	r3, [sp, #0]
	prevNumberOfVocoderBands = numberOfVocoderBands;
 8015e58:	7031      	strb	r1, [r6, #0]
	prevBandOffset = bandOffset;
 8015e5a:	ed83 aa00 	vstr	s20, [r3]
	prevMyTilt = myTilt;
 8015e5e:	9b01      	ldr	r3, [sp, #4]
	prevMyQ = myQ;
 8015e60:	ed88 8a00 	vstr	s16, [r8]
	prevMyTilt = myTilt;
 8015e64:	edc3 aa00 	vstr	s21, [r3]
	prevBarkPull = barkPull;
 8015e68:	9b02      	ldr	r3, [sp, #8]
	prevWarpFactor = warpFactor;
 8015e6a:	edca 8a00 	vstr	s17, [sl]
	prevBandSquish = bandSquish;
 8015e6e:	ed8b 9a00 	vstr	s18, [fp]
	prevBarkPull = barkPull;
 8015e72:	edc3 9a00 	vstr	s19, [r3]
	for (int i = 0; i < numberOfVocoderBands; i++)
 8015e76:	b199      	cbz	r1, 8015ea0 <SFXVocoderChFrame+0x460>
 8015e78:	4f41      	ldr	r7, [pc, #260]	; (8015f80 <SFXVocoderChFrame+0x540>)
 8015e7a:	2600      	movs	r6, #0
		tExpSmooth_setFactor(&envFollowers[i], (displayValues[9] * 0.0015f) + 0.0001f);
 8015e7c:	eddf 8a41 	vldr	s17, [pc, #260]	; 8015f84 <SFXVocoderChFrame+0x544>
 8015e80:	ed9f 8a41 	vldr	s16, [pc, #260]	; 8015f88 <SFXVocoderChFrame+0x548>
 8015e84:	eeb0 0a48 	vmov.f32	s0, s16
 8015e88:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8015e8c:	4638      	mov	r0, r7
	for (int i = 0; i < numberOfVocoderBands; i++)
 8015e8e:	3601      	adds	r6, #1
 8015e90:	3704      	adds	r7, #4
		tExpSmooth_setFactor(&envFollowers[i], (displayValues[9] * 0.0015f) + 0.0001f);
 8015e92:	eea7 0aa8 	vfma.f32	s0, s15, s17
 8015e96:	f00c fdcd 	bl	8022a34 <tExpSmooth_setFactor>
	for (int i = 0; i < numberOfVocoderBands; i++)
 8015e9a:	782b      	ldrb	r3, [r5, #0]
 8015e9c:	42b3      	cmp	r3, r6
 8015e9e:	dcf1      	bgt.n	8015e84 <SFXVocoderChFrame+0x444>
	if (tSimplePoly_getNumActiveVoices(&poly) != 0)
 8015ea0:	483a      	ldr	r0, [pc, #232]	; (8015f8c <SFXVocoderChFrame+0x54c>)
 8015ea2:	f00f f8d9 	bl	8025058 <tSimplePoly_getNumActiveVoices>
 8015ea6:	2800      	cmp	r0, #0
 8015ea8:	f040 80e0 	bne.w	801606c <SFXVocoderChFrame+0x62c>
		tExpSmooth_setDest(&comp, 0.0f);
 8015eac:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8015f90 <SFXVocoderChFrame+0x550>
 8015eb0:	4838      	ldr	r0, [pc, #224]	; (8015f94 <SFXVocoderChFrame+0x554>)
}
 8015eb2:	b007      	add	sp, #28
 8015eb4:	ecbd 8b08 	vpop	{d8-d11}
 8015eb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		tExpSmooth_setDest(&comp, 0.0f);
 8015ebc:	f00c bdcc 	b.w	8022a58 <tExpSmooth_setDest>
	if ((numberOfVocoderBands != prevNumberOfVocoderBands) || (myQ != prevMyQ) || (warpFactor != prevWarpFactor) || (bandSquish != prevBandSquish) || (bandOffset != prevBandOffset) || (myTilt != prevMyTilt) || (barkPull != prevBarkPull))
 8015ec0:	edd8 7a00 	vldr	s15, [r8]
 8015ec4:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015f9c <SFXVocoderChFrame+0x55c>
 8015ec8:	eef4 7a48 	vcmp.f32	s15, s16
 8015ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed0:	f47f aef1 	bne.w	8015cb6 <SFXVocoderChFrame+0x276>
 8015ed4:	edda 7a00 	vldr	s15, [sl]
 8015ed8:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8015fa0 <SFXVocoderChFrame+0x560>
 8015edc:	eef4 7a68 	vcmp.f32	s15, s17
 8015ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ee4:	f47f aee9 	bne.w	8015cba <SFXVocoderChFrame+0x27a>
 8015ee8:	eddb 7a00 	vldr	s15, [fp]
 8015eec:	4b12      	ldr	r3, [pc, #72]	; (8015f38 <SFXVocoderChFrame+0x4f8>)
 8015eee:	eef4 7a49 	vcmp.f32	s15, s18
 8015ef2:	9300      	str	r3, [sp, #0]
 8015ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ef8:	f040 80cd 	bne.w	8016096 <SFXVocoderChFrame+0x656>
 8015efc:	edd3 7a00 	vldr	s15, [r3]
 8015f00:	4b0e      	ldr	r3, [pc, #56]	; (8015f3c <SFXVocoderChFrame+0x4fc>)
 8015f02:	eef4 7a4a 	vcmp.f32	s15, s20
 8015f06:	9301      	str	r3, [sp, #4]
 8015f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f0c:	f000 80c8 	beq.w	80160a0 <SFXVocoderChFrame+0x660>
 8015f10:	4b0b      	ldr	r3, [pc, #44]	; (8015f40 <SFXVocoderChFrame+0x500>)
 8015f12:	9302      	str	r3, [sp, #8]
 8015f14:	e6d7      	b.n	8015cc6 <SFXVocoderChFrame+0x286>
 8015f16:	bf00      	nop
 8015f18:	200005d8 	.word	0x200005d8
 8015f1c:	20000654 	.word	0x20000654
 8015f20:	20000620 	.word	0x20000620
 8015f24:	20017314 	.word	0x20017314
 8015f28:	20016248 	.word	0x20016248
 8015f2c:	20017950 	.word	0x20017950
 8015f30:	20000268 	.word	0x20000268
 8015f34:	20000251 	.word	0x20000251
 8015f38:	2000025c 	.word	0x2000025c
 8015f3c:	200005e4 	.word	0x200005e4
 8015f40:	200005e0 	.word	0x200005e0
 8015f44:	3f7d70a4 	.word	0x3f7d70a4
 8015f48:	3daaaaab 	.word	0x3daaaaab
 8015f4c:	42bc0000 	.word	0x42bc0000
 8015f50:	20000514 	.word	0x20000514
 8015f54:	20000240 	.word	0x20000240
 8015f58:	20017548 	.word	0x20017548
 8015f5c:	20000244 	.word	0x20000244
 8015f60:	20016240 	.word	0x20016240
 8015f64:	2000012c 	.word	0x2000012c
 8015f68:	2000018c 	.word	0x2000018c
 8015f6c:	459c4000 	.word	0x459c4000
 8015f70:	200172b0 	.word	0x200172b0
 8015f74:	20000518 	.word	0x20000518
 8015f78:	467a0000 	.word	0x467a0000
 8015f7c:	2001826c 	.word	0x2001826c
 8015f80:	20017660 	.word	0x20017660
 8015f84:	3ac49ba6 	.word	0x3ac49ba6
 8015f88:	38d1b717 	.word	0x38d1b717
 8015f8c:	20017554 	.word	0x20017554
 8015f90:	00000000 	.word	0x00000000
 8015f94:	20017294 	.word	0x20017294
 8015f98:	20000264 	.word	0x20000264
 8015f9c:	20000270 	.word	0x20000270
 8015fa0:	20000260 	.word	0x20000260
 8015fa4:	20016e68 	.word	0x20016e68
 8015fa8:	2000056c 	.word	0x2000056c
		internalExternal = !internalExternal;
 8015fac:	4a4c      	ldr	r2, [pc, #304]	; (80160e0 <SFXVocoderChFrame+0x6a0>)
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 8015fae:	2100      	movs	r1, #0
		internalExternal = !internalExternal;
 8015fb0:	7813      	ldrb	r3, [r2, #0]
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 8015fb2:	7621      	strb	r1, [r4, #24]
		internalExternal = !internalExternal;
 8015fb4:	fab3 f383 	clz	r3, r3
 8015fb8:	095b      	lsrs	r3, r3, #5
		setLED_B(internalExternal);
 8015fba:	4618      	mov	r0, r3
		internalExternal = !internalExternal;
 8015fbc:	7013      	strb	r3, [r2, #0]
		setLED_B(internalExternal);
 8015fbe:	f7fd fe89 	bl	8013cd4 <setLED_B>
	if (buttonActionsSFX[ButtonC][ActionPress] == 1)
 8015fc2:	7f23      	ldrb	r3, [r4, #28]
 8015fc4:	2b01      	cmp	r3, #1
 8015fc6:	f47f ad60 	bne.w	8015a8a <SFXVocoderChFrame+0x4a>
		vocChFreeze = !vocChFreeze;
 8015fca:	4a46      	ldr	r2, [pc, #280]	; (80160e4 <SFXVocoderChFrame+0x6a4>)
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8015fcc:	2100      	movs	r1, #0
		vocChFreeze = !vocChFreeze;
 8015fce:	6813      	ldr	r3, [r2, #0]
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8015fd0:	7721      	strb	r1, [r4, #28]
		vocChFreeze = !vocChFreeze;
 8015fd2:	fab3 f383 	clz	r3, r3
 8015fd6:	095b      	lsrs	r3, r3, #5
		setLED_C(vocChFreeze);
 8015fd8:	4618      	mov	r0, r3
		vocChFreeze = !vocChFreeze;
 8015fda:	6013      	str	r3, [r2, #0]
		setLED_C(vocChFreeze);
 8015fdc:	f7fd fe88 	bl	8013cf0 <setLED_C>
 8015fe0:	e553      	b.n	8015a8a <SFXVocoderChFrame+0x4a>
			tVZFilter_setFreqAndBandwidth(&synthesisBands[currentBandToAlter][0], bandFreq * tempWarpFactor, bandBandwidth);
 8015fe2:	4f41      	ldr	r7, [pc, #260]	; (80160e8 <SFXVocoderChFrame+0x6a8>)
 8015fe4:	ee2b 0a00 	vmul.f32	s0, s22, s0
 8015fe8:	4438      	add	r0, r7
 8015fea:	f00d fcd5 	bl	8023998 <tVZFilter_setFreqAndBandwidth>
			synthesisBands[currentBandToAlter][1]->B = synthesisBands[currentBandToAlter][0]->B;
 8015fee:	f8d9 3000 	ldr.w	r3, [r9]
			analysisOrSynthesis = 0;
 8015ff2:	f04f 0e00 	mov.w	lr, #0
			synthesisBands[currentBandToAlter][1]->B = synthesisBands[currentBandToAlter][0]->B;
 8015ff6:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015ffa:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
			currentBandToAlter++;
 8015ffe:	f103 0c01 	add.w	ip, r3, #1
			synthesisBands[currentBandToAlter][1]->B = synthesisBands[currentBandToAlter][0]->B;
 8016002:	6851      	ldr	r1, [r2, #4]
 8016004:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8016006:	6348      	str	r0, [r1, #52]	; 0x34
			synthesisBands[currentBandToAlter][1]->fc = synthesisBands[currentBandToAlter][0]->fc;
 8016008:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 801600c:	6851      	ldr	r1, [r2, #4]
 801600e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016010:	6288      	str	r0, [r1, #40]	; 0x28
			synthesisBands[currentBandToAlter][1]->R2 = synthesisBands[currentBandToAlter][0]->R2;
 8016012:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8016016:	6851      	ldr	r1, [r2, #4]
 8016018:	6940      	ldr	r0, [r0, #20]
 801601a:	6148      	str	r0, [r1, #20]
			synthesisBands[currentBandToAlter][1]->cL = synthesisBands[currentBandToAlter][0]->cL;
 801601c:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8016020:	6851      	ldr	r1, [r2, #4]
 8016022:	69c0      	ldr	r0, [r0, #28]
 8016024:	61c8      	str	r0, [r1, #28]
			synthesisBands[currentBandToAlter][1]->cB = synthesisBands[currentBandToAlter][0]->cB;
 8016026:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 801602a:	6851      	ldr	r1, [r2, #4]
 801602c:	6a00      	ldr	r0, [r0, #32]
 801602e:	6208      	str	r0, [r1, #32]
			synthesisBands[currentBandToAlter][1]->cH = synthesisBands[currentBandToAlter][0]->cH;
 8016030:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8016034:	6851      	ldr	r1, [r2, #4]
 8016036:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016038:	6248      	str	r0, [r1, #36]	; 0x24
			synthesisBands[currentBandToAlter][1]->h = synthesisBands[currentBandToAlter][0]->h;
 801603a:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 801603e:	6851      	ldr	r1, [r2, #4]
 8016040:	6980      	ldr	r0, [r0, #24]
 8016042:	6188      	str	r0, [r1, #24]
			synthesisBands[currentBandToAlter][1]->g = synthesisBands[currentBandToAlter][0]->g;
 8016044:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
 8016048:	6852      	ldr	r2, [r2, #4]
 801604a:	691b      	ldr	r3, [r3, #16]
 801604c:	6113      	str	r3, [r2, #16]
		if ((currentBandToAlter >= numberOfVocoderBands) && (analysisOrSynthesis == 0))
 801604e:	7829      	ldrb	r1, [r5, #0]
			analysisOrSynthesis = 0;
 8016050:	4b26      	ldr	r3, [pc, #152]	; (80160ec <SFXVocoderChFrame+0x6ac>)
		if ((currentBandToAlter >= numberOfVocoderBands) && (analysisOrSynthesis == 0))
 8016052:	458c      	cmp	ip, r1
			currentBandToAlter++;
 8016054:	f8c9 c000 	str.w	ip, [r9]
			analysisOrSynthesis = 0;
 8016058:	f8c3 e000 	str.w	lr, [r3]
		if ((currentBandToAlter >= numberOfVocoderBands) && (analysisOrSynthesis == 0))
 801605c:	f6ff aefb 	blt.w	8015e56 <SFXVocoderChFrame+0x416>
			alteringBands = 0;
 8016060:	2300      	movs	r3, #0
 8016062:	9a03      	ldr	r2, [sp, #12]
			currentBandToAlter = 0;
 8016064:	f8c9 3000 	str.w	r3, [r9]
			alteringBands = 0;
 8016068:	6013      	str	r3, [r2, #0]
 801606a:	e6f4      	b.n	8015e56 <SFXVocoderChFrame+0x416>
		tExpSmooth_setDest(&comp, sqrtf(1.0f / tSimplePoly_getNumActiveVoices(&poly)));
 801606c:	4820      	ldr	r0, [pc, #128]	; (80160f0 <SFXVocoderChFrame+0x6b0>)
 801606e:	f00e fff3 	bl	8025058 <tSimplePoly_getNumActiveVoices>
 8016072:	ee07 0a90 	vmov	s15, r0
 8016076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801607a:	481e      	ldr	r0, [pc, #120]	; (80160f4 <SFXVocoderChFrame+0x6b4>)
 801607c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016080:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016084:	eeb1 0ac0 	vsqrt.f32	s0, s0
}
 8016088:	b007      	add	sp, #28
 801608a:	ecbd 8b08 	vpop	{d8-d11}
 801608e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		tExpSmooth_setDest(&comp, 0.0f);
 8016092:	f00c bce1 	b.w	8022a58 <tExpSmooth_setDest>
 8016096:	4b18      	ldr	r3, [pc, #96]	; (80160f8 <SFXVocoderChFrame+0x6b8>)
 8016098:	9301      	str	r3, [sp, #4]
 801609a:	4b18      	ldr	r3, [pc, #96]	; (80160fc <SFXVocoderChFrame+0x6bc>)
 801609c:	9302      	str	r3, [sp, #8]
 801609e:	e612      	b.n	8015cc6 <SFXVocoderChFrame+0x286>
	if ((numberOfVocoderBands != prevNumberOfVocoderBands) || (myQ != prevMyQ) || (warpFactor != prevWarpFactor) || (bandSquish != prevBandSquish) || (bandOffset != prevBandOffset) || (myTilt != prevMyTilt) || (barkPull != prevBarkPull))
 80160a0:	edd3 7a00 	vldr	s15, [r3]
 80160a4:	4b15      	ldr	r3, [pc, #84]	; (80160fc <SFXVocoderChFrame+0x6bc>)
 80160a6:	eef4 7a6a 	vcmp.f32	s15, s21
 80160aa:	9302      	str	r3, [sp, #8]
 80160ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160b0:	f47f ae09 	bne.w	8015cc6 <SFXVocoderChFrame+0x286>
 80160b4:	edd3 7a00 	vldr	s15, [r3]
 80160b8:	eef4 7a69 	vcmp.f32	s15, s19
 80160bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160c0:	f47f ae01 	bne.w	8015cc6 <SFXVocoderChFrame+0x286>
	if (alteringBands)
 80160c4:	4b0e      	ldr	r3, [pc, #56]	; (8016100 <SFXVocoderChFrame+0x6c0>)
 80160c6:	9303      	str	r3, [sp, #12]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	f43f aec3 	beq.w	8015e56 <SFXVocoderChFrame+0x416>
 80160d0:	4b0c      	ldr	r3, [pc, #48]	; (8016104 <SFXVocoderChFrame+0x6c4>)
 80160d2:	4a0d      	ldr	r2, [pc, #52]	; (8016108 <SFXVocoderChFrame+0x6c8>)
 80160d4:	edd3 7a00 	vldr	s15, [r3]
 80160d8:	4f0c      	ldr	r7, [pc, #48]	; (801610c <SFXVocoderChFrame+0x6cc>)
 80160da:	4b0d      	ldr	r3, [pc, #52]	; (8016110 <SFXVocoderChFrame+0x6d0>)
 80160dc:	e623      	b.n	8015d26 <SFXVocoderChFrame+0x2e6>
 80160de:	bf00      	nop
 80160e0:	2000059c 	.word	0x2000059c
 80160e4:	20000610 	.word	0x20000610
 80160e8:	20017460 	.word	0x20017460
 80160ec:	20000518 	.word	0x20000518
 80160f0:	20017554 	.word	0x20017554
 80160f4:	20017294 	.word	0x20017294
 80160f8:	200005e4 	.word	0x200005e4
 80160fc:	200005e0 	.word	0x200005e0
 8016100:	20000514 	.word	0x20000514
 8016104:	20017548 	.word	0x20017548
 8016108:	20000244 	.word	0x20000244
 801610c:	20016240 	.word	0x20016240
 8016110:	20000240 	.word	0x20000240

08016114 <SFXVocoderChTick>:
{
 8016114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016118:	4605      	mov	r5, r0
	input[1] = tVZFilter_tick(&vocodec_highshelf, input[1]);
 801611a:	489c      	ldr	r0, [pc, #624]	; (801638c <SFXVocoderChTick+0x278>)
{
 801611c:	ed2d 8b06 	vpush	{d8-d10}
 8016120:	b083      	sub	sp, #12
	input[1] = tVZFilter_tick(&vocodec_highshelf, input[1]);
 8016122:	ed95 0a01 	vldr	s0, [r5, #4]
 8016126:	f00d f9e9 	bl	80234fc <tVZFilter_tick>
	if (internalExternal == 1)
 801612a:	4b99      	ldr	r3, [pc, #612]	; (8016390 <SFXVocoderChTick+0x27c>)
	input[1] = tVZFilter_tick(&vocodec_highshelf, input[1]);
 801612c:	ed85 0a01 	vstr	s0, [r5, #4]
	if (internalExternal == 1)
 8016130:	781b      	ldrb	r3, [r3, #0]
 8016132:	2b01      	cmp	r3, #1
 8016134:	f040 80a8 	bne.w	8016288 <SFXVocoderChTick+0x174>
		sample = input[0];
 8016138:	ed95 0a00 	vldr	s0, [r5]
 801613c:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 80163f8 <SFXVocoderChTick+0x2e4>
	sample = LEAF_tanh(sample);
 8016140:	f00e f96e 	bl	8024420 <LEAF_tanh>
	input[1] = input[1] * (displayValues[0] * 30.0f);
 8016144:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
	sample = LEAF_tanh(sample);
 8016148:	eeb0 9a40 	vmov.f32	s18, s0
	input[1] = input[1] * (displayValues[0] * 30.0f);
 801614c:	ed98 0a00 	vldr	s0, [r8]
 8016150:	edd5 7a01 	vldr	s15, [r5, #4]
 8016154:	ee20 0a07 	vmul.f32	s0, s0, s14
	for (int i = 0; i < numberOfVocoderBands; i++)
 8016158:	4f8e      	ldr	r7, [pc, #568]	; (8016394 <SFXVocoderChTick+0x280>)
	float output[2] = {0.0f, 0.0f};
 801615a:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 8016398 <SFXVocoderChTick+0x284>
	for (int i = 0; i < numberOfVocoderBands; i++)
 801615e:	783b      	ldrb	r3, [r7, #0]
	input[1] = input[1] * (displayValues[0] * 30.0f);
 8016160:	ee20 0a27 	vmul.f32	s0, s0, s15
	float output[2] = {0.0f, 0.0f};
 8016164:	ed8d 8a00 	vstr	s16, [sp]
 8016168:	ed8d 8a01 	vstr	s16, [sp, #4]
	input[1] = input[1] * (displayValues[0] * 30.0f);
 801616c:	ed85 0a01 	vstr	s0, [r5, #4]
	for (int i = 0; i < numberOfVocoderBands; i++)
 8016170:	2b00      	cmp	r3, #0
 8016172:	f000 8108 	beq.w	8016386 <SFXVocoderChTick+0x272>
 8016176:	f04f 0b00 	mov.w	fp, #0
		tempSamp = LEAF_clip(0.0f, tempSamp, 2.0f);
 801617a:	eef0 9a48 	vmov.f32	s19, s16
 801617e:	4e87      	ldr	r6, [pc, #540]	; (801639c <SFXVocoderChTick+0x288>)
 8016180:	46da      	mov	sl, fp
 8016182:	f8df 8278 	ldr.w	r8, [pc, #632]	; 80163fc <SFXVocoderChTick+0x2e8>
 8016186:	e02f      	b.n	80161e8 <SFXVocoderChTick+0xd4>
		tempSamp = tExpSmooth_tick(&envFollowers[i]);
 8016188:	4648      	mov	r0, r9
	for (int i = 0; i < numberOfVocoderBands; i++)
 801618a:	f10b 0b01 	add.w	fp, fp, #1
		tempSamp = tExpSmooth_tick(&envFollowers[i]);
 801618e:	f00c fc6d 	bl	8022a6c <tExpSmooth_tick>
		tempSamp = LEAF_clip(0.0f, tempSamp, 2.0f);
 8016192:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8016196:	eef0 0a40 	vmov.f32	s1, s0
 801619a:	eeb0 0a69 	vmov.f32	s0, s19
 801619e:	f00e f8ef 	bl	8024380 <LEAF_clip>
		tempSynth = tVZFilter_tickEfficient(&synthesisBands[i][0], tempSynth);
 80161a2:	4b7f      	ldr	r3, [pc, #508]	; (80163a0 <SFXVocoderChTick+0x28c>)
		tempSamp = LEAF_clip(0.0f, tempSamp, 2.0f);
 80161a4:	eef0 8a40 	vmov.f32	s17, s0
		tempSynth = tVZFilter_tickEfficient(&synthesisBands[i][0], tempSynth);
 80161a8:	1918      	adds	r0, r3, r4
 80161aa:	eeb0 0a49 	vmov.f32	s0, s18
 80161ae:	f00d f9e3 	bl	8023578 <tVZFilter_tickEfficient>
		tempSynth = tVZFilter_tickEfficient(&synthesisBands[i][1], tempSynth);
 80161b2:	4b7c      	ldr	r3, [pc, #496]	; (80163a4 <SFXVocoderChTick+0x290>)
 80161b4:	1918      	adds	r0, r3, r4
 80161b6:	f00d f9df 	bl	8023578 <tVZFilter_tickEfficient>
		output[oddEven] += tempSynth * tempSamp * bandGains[i];
 80161ba:	ee28 0a80 	vmul.f32	s0, s17, s0
 80161be:	ecf6 7a01 	vldmia	r6!, {s15}
 80161c2:	ab02      	add	r3, sp, #8
 80161c4:	a902      	add	r1, sp, #8
 80161c6:	eea0 8a27 	vfma.f32	s16, s0, s15
 80161ca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
	for (int i = 0; i < numberOfVocoderBands; i++)
 80161ce:	783b      	ldrb	r3, [r7, #0]
 80161d0:	f00b 0a01 	and.w	sl, fp, #1
 80161d4:	455b      	cmp	r3, fp
 80161d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
		output[oddEven] += tempSynth * tempSamp * bandGains[i];
 80161da:	ed02 8a02 	vstr	s16, [r2, #-8]
	for (int i = 0; i < numberOfVocoderBands; i++)
 80161de:	dd1a      	ble.n	8016216 <SFXVocoderChTick+0x102>
 80161e0:	ed11 8a02 	vldr	s16, [r1, #-8]
 80161e4:	ed95 0a01 	vldr	s0, [r5, #4]
 80161e8:	4a6f      	ldr	r2, [pc, #444]	; (80163a8 <SFXVocoderChTick+0x294>)
 80161ea:	ea4f 04cb 	mov.w	r4, fp, lsl #3
		if (!vocChFreeze)
 80161ee:	f8d8 3000 	ldr.w	r3, [r8]
 80161f2:	eb02 098b 	add.w	r9, r2, fp, lsl #2
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d1c6      	bne.n	8016188 <SFXVocoderChTick+0x74>
			tempSamp = tVZFilter_tickEfficient(&analysisBands[i][0], tempSamp);
 80161fa:	4b6c      	ldr	r3, [pc, #432]	; (80163ac <SFXVocoderChTick+0x298>)
 80161fc:	1918      	adds	r0, r3, r4
 80161fe:	f00d f9bb 	bl	8023578 <tVZFilter_tickEfficient>
			tempSamp = tVZFilter_tickEfficient(&analysisBands[i][1], tempSamp);
 8016202:	4b6b      	ldr	r3, [pc, #428]	; (80163b0 <SFXVocoderChTick+0x29c>)
 8016204:	1918      	adds	r0, r3, r4
 8016206:	f00d f9b7 	bl	8023578 <tVZFilter_tickEfficient>
			tExpSmooth_setDest(&envFollowers[i], fabsf(tempSamp));
 801620a:	4648      	mov	r0, r9
 801620c:	eeb0 0ac0 	vabs.f32	s0, s0
 8016210:	f00c fc22 	bl	8022a58 <tExpSmooth_setDest>
 8016214:	e7b8      	b.n	8016188 <SFXVocoderChTick+0x74>
 8016216:	ed9d 9a00 	vldr	s18, [sp]
 801621a:	ed9d 8a01 	vldr	s16, [sp, #4]
	float finalSample1 = tHighpass_tick(&chVocFinalHP1, (output[0] + (output[1] * oneMinusStereo)) * chVocOutputGain);
 801621e:	4e65      	ldr	r6, [pc, #404]	; (80163b4 <SFXVocoderChTick+0x2a0>)
 8016220:	eeb0 0a49 	vmov.f32	s0, s18
 8016224:	4c64      	ldr	r4, [pc, #400]	; (80163b8 <SFXVocoderChTick+0x2a4>)
 8016226:	ed96 7a00 	vldr	s14, [r6]
 801622a:	edd4 7a00 	vldr	s15, [r4]
 801622e:	eea7 0a08 	vfma.f32	s0, s14, s16
 8016232:	4862      	ldr	r0, [pc, #392]	; (80163bc <SFXVocoderChTick+0x2a8>)
	input[0] = 0.98f * tanhf(finalSample1);
 8016234:	eddf 8a62 	vldr	s17, [pc, #392]	; 80163c0 <SFXVocoderChTick+0x2ac>
	float finalSample1 = tHighpass_tick(&chVocFinalHP1, (output[0] + (output[1] * oneMinusStereo)) * chVocOutputGain);
 8016238:	ee20 0a27 	vmul.f32	s0, s0, s15
 801623c:	f00c ff4e 	bl	80230dc <tHighpass_tick>
	float finalSample2 = tHighpass_tick(&chVocFinalHP2, (output[1] + (output[0] * oneMinusStereo)) * chVocOutputGain);
 8016240:	edd6 7a00 	vldr	s15, [r6]
	float finalSample1 = tHighpass_tick(&chVocFinalHP1, (output[0] + (output[1] * oneMinusStereo)) * chVocOutputGain);
 8016244:	eef0 9a40 	vmov.f32	s19, s0
	float finalSample2 = tHighpass_tick(&chVocFinalHP2, (output[1] + (output[0] * oneMinusStereo)) * chVocOutputGain);
 8016248:	ed94 0a00 	vldr	s0, [r4]
 801624c:	eea7 8a89 	vfma.f32	s16, s15, s18
 8016250:	485c      	ldr	r0, [pc, #368]	; (80163c4 <SFXVocoderChTick+0x2b0>)
 8016252:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016256:	f00c ff41 	bl	80230dc <tHighpass_tick>
 801625a:	eeb0 8a40 	vmov.f32	s16, s0
	input[0] = 0.98f * tanhf(finalSample1);
 801625e:	eeb0 0a69 	vmov.f32	s0, s19
 8016262:	f011 fd9f 	bl	8027da4 <tanhf>
 8016266:	ee60 7a28 	vmul.f32	s15, s0, s17
	input[1] = 0.98f * tanhf(finalSample2);
 801626a:	eeb0 0a48 	vmov.f32	s0, s16
	input[0] = 0.98f * tanhf(finalSample1);
 801626e:	edc5 7a00 	vstr	s15, [r5]
	input[1] = 0.98f * tanhf(finalSample2);
 8016272:	f011 fd97 	bl	8027da4 <tanhf>
 8016276:	ee20 0a28 	vmul.f32	s0, s0, s17
 801627a:	ed85 0a01 	vstr	s0, [r5, #4]
}
 801627e:	b003      	add	sp, #12
 8016280:	ecbd 8b06 	vpop	{d8-d10}
 8016284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!vocChFreeze)
 8016288:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80163fc <SFXVocoderChTick+0x2e8>
		float zerocross = tZeroCrossing_tick(&zerox, input[1]);
 801628c:	484e      	ldr	r0, [pc, #312]	; (80163c8 <SFXVocoderChTick+0x2b4>)
 801628e:	f008 fe0d 	bl	801eeac <tZeroCrossing_tick>
		if (!vocChFreeze)
 8016292:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setDest(&noiseRamp,zerocross > ((displayValues[4])-0.1f));
 8016296:	f8df 8160 	ldr.w	r8, [pc, #352]	; 80163f8 <SFXVocoderChTick+0x2e4>
		if (!vocChFreeze)
 801629a:	b9ab      	cbnz	r3, 80162c8 <SFXVocoderChTick+0x1b4>
			tExpSmooth_setDest(&noiseRamp,zerocross > ((displayValues[4])-0.1f));
 801629c:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 80163cc <SFXVocoderChTick+0x2b8>
 80162a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80162a4:	edd8 7a04 	vldr	s15, [r8, #16]
 80162a8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8016398 <SFXVocoderChTick+0x284>
 80162ac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80162b0:	4847      	ldr	r0, [pc, #284]	; (80163d0 <SFXVocoderChTick+0x2bc>)
 80162b2:	eef4 7ac0 	vcmpe.f32	s15, s0
 80162b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162ba:	bf54      	ite	pl
 80162bc:	eeb0 0a47 	vmovpl.f32	s0, s14
 80162c0:	eeb0 0a66 	vmovmi.f32	s0, s13
 80162c4:	f00c fbc8 	bl	8022a58 <tExpSmooth_setDest>
		float noiseRampVal = tExpSmooth_tick(&noiseRamp);
 80162c8:	4841      	ldr	r0, [pc, #260]	; (80163d0 <SFXVocoderChTick+0x2bc>)
		for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 80162ca:	2400      	movs	r4, #0
		float noiseRampVal = tExpSmooth_tick(&noiseRamp);
 80162cc:	f00c fbce 	bl	8022a6c <tExpSmooth_tick>
 80162d0:	eeb0 aa40 	vmov.f32	s20, s0
		float noiseSample = tNoise_tick(&vocoderNoise) * noiseRampVal;
 80162d4:	483f      	ldr	r0, [pc, #252]	; (80163d4 <SFXVocoderChTick+0x2c0>)
 80162d6:	f00f f83d 	bl	8025354 <tNoise_tick>
	float sample = 0.0f;
 80162da:	ed9f 9a2f 	vldr	s18, [pc, #188]	; 8016398 <SFXVocoderChTick+0x284>
		float noiseSample = tNoise_tick(&vocoderNoise) * noiseRampVal;
 80162de:	ee60 8a0a 	vmul.f32	s17, s0, s20
		for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 80162e2:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8016400 <SFXVocoderChTick+0x2ec>
			float tempRamp = tExpSmooth_tick(&polyRamp[i]);
 80162e6:	4f3c      	ldr	r7, [pc, #240]	; (80163d8 <SFXVocoderChTick+0x2c4>)
			if (tempRamp > 0.0001f)
 80162e8:	eddf 9a3c 	vldr	s19, [pc, #240]	; 80163dc <SFXVocoderChTick+0x2c8>
		for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 80162ec:	e005      	b.n	80162fa <SFXVocoderChTick+0x1e6>
					sample += tSawtooth_tick(&osc[i]) * tempRamp;
 80162ee:	1998      	adds	r0, r3, r6
 80162f0:	f00e ffbe 	bl	8025270 <tSawtooth_tick>
 80162f4:	eea0 9a08 	vfma.f32	s18, s0, s16
		for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 80162f8:	3401      	adds	r4, #1
 80162fa:	4648      	mov	r0, r9
 80162fc:	00a6      	lsls	r6, r4, #2
 80162fe:	f00e fea7 	bl	8025050 <tSimplePoly_getNumVoices>
 8016302:	42a0      	cmp	r0, r4
			float tempRamp = tExpSmooth_tick(&polyRamp[i]);
 8016304:	eb07 0006 	add.w	r0, r7, r6
		for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8016308:	dd19      	ble.n	801633e <SFXVocoderChTick+0x22a>
			float tempRamp = tExpSmooth_tick(&polyRamp[i]);
 801630a:	f00c fbaf 	bl	8022a6c <tExpSmooth_tick>
			if (tempRamp > 0.0001f)
 801630e:	eeb4 0ae9 	vcmpe.f32	s0, s19
			float tempRamp = tExpSmooth_tick(&polyRamp[i]);
 8016312:	eeb0 8a40 	vmov.f32	s16, s0
				if (displayValues[5] < 0.5f)
 8016316:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
			if (tempRamp > 0.0001f)
 801631a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801631e:	ddeb      	ble.n	80162f8 <SFXVocoderChTick+0x1e4>
				if (displayValues[5] < 0.5f)
 8016320:	ed98 7a05 	vldr	s14, [r8, #20]
					sample += tRosenbergGlottalPulse_tick(&glottal[i]) * tempRamp;
 8016324:	482e      	ldr	r0, [pc, #184]	; (80163e0 <SFXVocoderChTick+0x2cc>)
				if (displayValues[5] < 0.5f)
 8016326:	eeb4 7ae7 	vcmpe.f32	s14, s15
					sample += tSawtooth_tick(&osc[i]) * tempRamp;
 801632a:	4b2e      	ldr	r3, [pc, #184]	; (80163e4 <SFXVocoderChTick+0x2d0>)
					sample += tRosenbergGlottalPulse_tick(&glottal[i]) * tempRamp;
 801632c:	4430      	add	r0, r6
				if (displayValues[5] < 0.5f)
 801632e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016332:	d4dc      	bmi.n	80162ee <SFXVocoderChTick+0x1da>
					sample += tRosenbergGlottalPulse_tick(&glottal[i]) * tempRamp;
 8016334:	f00a fdee 	bl	8020f14 <tRosenbergGlottalPulse_tick>
 8016338:	eea0 9a08 	vfma.f32	s18, s0, s16
 801633c:	e7dc      	b.n	80162f8 <SFXVocoderChTick+0x1e4>
		sample = (sample * (1.0f - (0.3f * displayValues[8])) * (1.0f-noiseRampVal)) + noiseSample;
 801633e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016342:	edd8 6a08 	vldr	s13, [r8, #32]
 8016346:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80163e8 <SFXVocoderChTick+0x2d4>
		sample += (tHighpass_tick(&noiseHP, tNoise_tick(&breathNoise)) * displayValues[8] * 2.0f);
 801634a:	4828      	ldr	r0, [pc, #160]	; (80163ec <SFXVocoderChTick+0x2d8>)
		sample = (sample * (1.0f - (0.3f * displayValues[8])) * (1.0f-noiseRampVal)) + noiseSample;
 801634c:	eeb0 8a67 	vmov.f32	s16, s15
 8016350:	ee77 7aca 	vsub.f32	s15, s15, s20
 8016354:	eea6 8ac7 	vfms.f32	s16, s13, s14
 8016358:	ee28 8a27 	vmul.f32	s16, s16, s15
		sample += (tHighpass_tick(&noiseHP, tNoise_tick(&breathNoise)) * displayValues[8] * 2.0f);
 801635c:	f00e fffa 	bl	8025354 <tNoise_tick>
 8016360:	4823      	ldr	r0, [pc, #140]	; (80163f0 <SFXVocoderChTick+0x2dc>)
 8016362:	f00c febb 	bl	80230dc <tHighpass_tick>
 8016366:	edd8 7a08 	vldr	s15, [r8, #32]
		sample *= tExpSmooth_tick(&comp);
 801636a:	4822      	ldr	r0, [pc, #136]	; (80163f4 <SFXVocoderChTick+0x2e0>)
		sample += (tHighpass_tick(&noiseHP, tNoise_tick(&breathNoise)) * displayValues[8] * 2.0f);
 801636c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016370:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016374:	eee9 7a08 	vfma.f32	s15, s18, s16
 8016378:	ee78 8aa7 	vadd.f32	s17, s17, s15
		sample *= tExpSmooth_tick(&comp);
 801637c:	f00c fb76 	bl	8022a6c <tExpSmooth_tick>
 8016380:	ee28 0a80 	vmul.f32	s0, s17, s0
 8016384:	e6dc      	b.n	8016140 <SFXVocoderChTick+0x2c>
	for (int i = 0; i < numberOfVocoderBands; i++)
 8016386:	eeb0 9a48 	vmov.f32	s18, s16
 801638a:	e748      	b.n	801621e <SFXVocoderChTick+0x10a>
 801638c:	20017624 	.word	0x20017624
 8016390:	2000059c 	.word	0x2000059c
 8016394:	20000251 	.word	0x20000251
 8016398:	00000000 	.word	0x00000000
 801639c:	200172b0 	.word	0x200172b0
 80163a0:	20017460 	.word	0x20017460
 80163a4:	20017464 	.word	0x20017464
 80163a8:	20017660 	.word	0x20017660
 80163ac:	2001826c 	.word	0x2001826c
 80163b0:	20018270 	.word	0x20018270
 80163b4:	20000254 	.word	0x20000254
 80163b8:	200001ec 	.word	0x200001ec
 80163bc:	2001623c 	.word	0x2001623c
 80163c0:	3f7ae148 	.word	0x3f7ae148
 80163c4:	20018260 	.word	0x20018260
 80163c8:	200176c4 	.word	0x200176c4
 80163cc:	3dcccccd 	.word	0x3dcccccd
 80163d0:	2001825c 	.word	0x2001825c
 80163d4:	20016e64 	.word	0x20016e64
 80163d8:	20017950 	.word	0x20017950
 80163dc:	38d1b717 	.word	0x38d1b717
 80163e0:	20016248 	.word	0x20016248
 80163e4:	20017314 	.word	0x20017314
 80163e8:	3e99999a 	.word	0x3e99999a
 80163ec:	20016218 	.word	0x20016218
 80163f0:	20016e5c 	.word	0x20016e5c
 80163f4:	20017294 	.word	0x20017294
 80163f8:	200187c4 	.word	0x200187c4
 80163fc:	20000610 	.word	0x20000610
 8016400:	20017554 	.word	0x20017554

08016404 <SFXVocoderChFree>:
{
 8016404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016406:	4c1f      	ldr	r4, [pc, #124]	; (8016484 <SFXVocoderChFree+0x80>)
 8016408:	4d1f      	ldr	r5, [pc, #124]	; (8016488 <SFXVocoderChFree+0x84>)
 801640a:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 801640e:	4e1f      	ldr	r6, [pc, #124]	; (801648c <SFXVocoderChFree+0x88>)
		tVZFilter_free(&analysisBands[i][0]);
 8016410:	4620      	mov	r0, r4
 8016412:	f00d f865 	bl	80234e0 <tVZFilter_free>
		tVZFilter_free(&analysisBands[i][1]);
 8016416:	1d20      	adds	r0, r4, #4
 8016418:	f00d f862 	bl	80234e0 <tVZFilter_free>
		tVZFilter_free(&synthesisBands[i][0]);
 801641c:	1f28      	subs	r0, r5, #4
 801641e:	f00d f85f 	bl	80234e0 <tVZFilter_free>
 8016422:	3408      	adds	r4, #8
		tVZFilter_free(&synthesisBands[i][1]);
 8016424:	4628      	mov	r0, r5
 8016426:	3508      	adds	r5, #8
 8016428:	f00d f85a 	bl	80234e0 <tVZFilter_free>
		tExpSmooth_free(&envFollowers[i]);
 801642c:	4630      	mov	r0, r6
 801642e:	f00c fafd 	bl	8022a2c <tExpSmooth_free>
	for (int i = 0; i < MAX_NUM_VOCODER_BANDS; i++)
 8016432:	42a7      	cmp	r7, r4
 8016434:	f106 0604 	add.w	r6, r6, #4
 8016438:	d1ea      	bne.n	8016410 <SFXVocoderChFree+0xc>
	tNoise_free(&breathNoise);
 801643a:	4815      	ldr	r0, [pc, #84]	; (8016490 <SFXVocoderChFree+0x8c>)
	tHighpass_free(&chVocFinalHP2);
 801643c:	2400      	movs	r4, #0
	tNoise_free(&breathNoise);
 801643e:	f00e ff85 	bl	802534c <tNoise_free>
	tNoise_free(&vocoderNoise);
 8016442:	4814      	ldr	r0, [pc, #80]	; (8016494 <SFXVocoderChFree+0x90>)
 8016444:	f00e ff82 	bl	802534c <tNoise_free>
	tZeroCrossing_free(&zerox);
 8016448:	4813      	ldr	r0, [pc, #76]	; (8016498 <SFXVocoderChFree+0x94>)
 801644a:	f008 fd1f 	bl	801ee8c <tZeroCrossing_free>
	tExpSmooth_free(&noiseRamp);
 801644e:	4813      	ldr	r0, [pc, #76]	; (801649c <SFXVocoderChFree+0x98>)
 8016450:	f00c faec 	bl	8022a2c <tExpSmooth_free>
	tHighpass_free(&noiseHP);
 8016454:	4812      	ldr	r0, [pc, #72]	; (80164a0 <SFXVocoderChFree+0x9c>)
 8016456:	f00c fe2d 	bl	80230b4 <tHighpass_free>
	tVZFilter_free(&vocodec_highshelf);
 801645a:	4812      	ldr	r0, [pc, #72]	; (80164a4 <SFXVocoderChFree+0xa0>)
 801645c:	f00d f840 	bl	80234e0 <tVZFilter_free>
	tHighpass_free(&chVocFinalHP1);
 8016460:	4811      	ldr	r0, [pc, #68]	; (80164a8 <SFXVocoderChFree+0xa4>)
 8016462:	f00c fe27 	bl	80230b4 <tHighpass_free>
	tHighpass_free(&chVocFinalHP2);
 8016466:	4811      	ldr	r0, [pc, #68]	; (80164ac <SFXVocoderChFree+0xa8>)
 8016468:	4e11      	ldr	r6, [pc, #68]	; (80164b0 <SFXVocoderChFree+0xac>)
 801646a:	4d12      	ldr	r5, [pc, #72]	; (80164b4 <SFXVocoderChFree+0xb0>)
 801646c:	f00c fe22 	bl	80230b4 <tHighpass_free>
		tSawtooth_free(&osc[i]);
 8016470:	1930      	adds	r0, r6, r4
 8016472:	f00e fec7 	bl	8025204 <tSawtooth_free>
		tRosenbergGlottalPulse_free(&glottal[i]);
 8016476:	1928      	adds	r0, r5, r4
 8016478:	3404      	adds	r4, #4
 801647a:	f00a fd47 	bl	8020f0c <tRosenbergGlottalPulse_free>
	for (int i = 0; i < NUM_VOC_VOICES; i++)
 801647e:	2c20      	cmp	r4, #32
 8016480:	d1f6      	bne.n	8016470 <SFXVocoderChFree+0x6c>
}
 8016482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016484:	2001826c 	.word	0x2001826c
 8016488:	20017464 	.word	0x20017464
 801648c:	20017660 	.word	0x20017660
 8016490:	20016218 	.word	0x20016218
 8016494:	20016e64 	.word	0x20016e64
 8016498:	200176c4 	.word	0x200176c4
 801649c:	2001825c 	.word	0x2001825c
 80164a0:	20016e5c 	.word	0x20016e5c
 80164a4:	20017624 	.word	0x20017624
 80164a8:	2001623c 	.word	0x2001623c
 80164ac:	20018260 	.word	0x20018260
 80164b0:	20017314 	.word	0x20017314
 80164b4:	20016248 	.word	0x20016248

080164b8 <SFXPitchShiftAlloc>:
{
 80164b8:	b510      	push	{r4, lr}
	tFormantShifter_initToPool(&fs, 7, &smallPool);
 80164ba:	4a22      	ldr	r2, [pc, #136]	; (8016544 <SFXPitchShiftAlloc+0x8c>)
 80164bc:	2107      	movs	r1, #7
 80164be:	4822      	ldr	r0, [pc, #136]	; (8016548 <SFXPitchShiftAlloc+0x90>)
	tRamp_init(&pitchshiftRamp, 100.0f, 1);
 80164c0:	4c22      	ldr	r4, [pc, #136]	; (801654c <SFXPitchShiftAlloc+0x94>)
{
 80164c2:	ed2d 8b02 	vpush	{d8}
	tFormantShifter_initToPool(&fs, 7, &smallPool);
 80164c6:	f00b fc03 	bl	8021cd0 <tFormantShifter_initToPool>
	tRetune_init(&retune, NUM_RETUNE, 1024, 512);
 80164ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80164ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80164d2:	2101      	movs	r1, #1
 80164d4:	481e      	ldr	r0, [pc, #120]	; (8016550 <SFXPitchShiftAlloc+0x98>)
 80164d6:	f00b f889 	bl	80215ec <tRetune_init>
	tRetune_init(&retune2, NUM_RETUNE, 1024, 512);
 80164da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80164de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80164e2:	2101      	movs	r1, #1
 80164e4:	481b      	ldr	r0, [pc, #108]	; (8016554 <SFXPitchShiftAlloc+0x9c>)
 80164e6:	f00b f881 	bl	80215ec <tRetune_init>
	tRamp_init(&pitchshiftRamp, 100.0f, 1);
 80164ea:	4620      	mov	r0, r4
 80164ec:	2101      	movs	r1, #1
 80164ee:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8016558 <SFXPitchShiftAlloc+0xa0>
 80164f2:	f00c f997 	bl	8022824 <tRamp_init>
	tExpSmooth_init(&smoother1, 0.0f, 0.01f);
 80164f6:	eddf 8a19 	vldr	s17, [pc, #100]	; 801655c <SFXPitchShiftAlloc+0xa4>
 80164fa:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8016560 <SFXPitchShiftAlloc+0xa8>
	tRamp_setVal(&pitchshiftRamp, 1.0f);
 80164fe:	4620      	mov	r0, r4
 8016500:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016504:	f00c fa08 	bl	8022918 <tRamp_setVal>
	tSimplePoly_setNumVoices(&poly, 1);
 8016508:	2101      	movs	r1, #1
 801650a:	4816      	ldr	r0, [pc, #88]	; (8016564 <SFXPitchShiftAlloc+0xac>)
 801650c:	f00e fd98 	bl	8025040 <tSimplePoly_setNumVoices>
	tExpSmooth_init(&smoother1, 0.0f, 0.01f);
 8016510:	eef0 0a68 	vmov.f32	s1, s17
 8016514:	eeb0 0a48 	vmov.f32	s0, s16
 8016518:	4813      	ldr	r0, [pc, #76]	; (8016568 <SFXPitchShiftAlloc+0xb0>)
 801651a:	f00c fa37 	bl	802298c <tExpSmooth_init>
	tExpSmooth_init(&smoother2, 0.0f, 0.01f);
 801651e:	eef0 0a68 	vmov.f32	s1, s17
 8016522:	eeb0 0a48 	vmov.f32	s0, s16
 8016526:	4811      	ldr	r0, [pc, #68]	; (801656c <SFXPitchShiftAlloc+0xb4>)
 8016528:	f00c fa30 	bl	802298c <tExpSmooth_init>
	tExpSmooth_init(&smoother3, 0.0f, 0.01f);
 801652c:	eef0 0a68 	vmov.f32	s1, s17
 8016530:	eeb0 0a48 	vmov.f32	s0, s16
 8016534:	480e      	ldr	r0, [pc, #56]	; (8016570 <SFXPitchShiftAlloc+0xb8>)
}
 8016536:	ecbd 8b02 	vpop	{d8}
 801653a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tExpSmooth_init(&smoother3, 0.0f, 0.01f);
 801653e:	f00c ba25 	b.w	802298c <tExpSmooth_init>
 8016542:	bf00      	nop
 8016544:	20014b2c 	.word	0x20014b2c
 8016548:	20016364 	.word	0x20016364
 801654c:	200176c8 	.word	0x200176c8
 8016550:	20016088 	.word	0x20016088
 8016554:	20017880 	.word	0x20017880
 8016558:	42c80000 	.word	0x42c80000
 801655c:	3c23d70a 	.word	0x3c23d70a
 8016560:	00000000 	.word	0x00000000
 8016564:	20017554 	.word	0x20017554
 8016568:	20016244 	.word	0x20016244
 801656c:	20017078 	.word	0x20017078
 8016570:	200177b4 	.word	0x200177b4

08016574 <SFXPitchShiftFrame>:
}
 8016574:	4770      	bx	lr
 8016576:	bf00      	nop

08016578 <SFXPitchShiftTick>:
{
 8016578:	b570      	push	{r4, r5, r6, lr}
 801657a:	ed2d 8b04 	vpush	{d8-d9}
	float myPitchFactorFine = ((presetKnobValues[Pitchshift][1]*2.0f) - 1.0f) * 0.1f;
 801657e:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 8016582:	4e60      	ldr	r6, [pc, #384]	; (8016704 <SFXPitchShiftTick+0x18c>)
 8016584:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
	float myPitchFactorCombined = myPitchFactorFine + myPitchFactorCoarse;
 8016588:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8016708 <SFXPitchShiftTick+0x190>
	float myPitchFactorFine = ((presetKnobValues[Pitchshift][1]*2.0f) - 1.0f) * 0.1f;
 801658c:	edd6 6a33 	vldr	s13, [r6, #204]	; 0xcc
{
 8016590:	b082      	sub	sp, #8
	float myPitchFactorFine = ((presetKnobValues[Pitchshift][1]*2.0f) - 1.0f) * 0.1f;
 8016592:	eef0 5a48 	vmov.f32	s11, s16
	float myPitchFactorCoarse = (presetKnobValues[Pitchshift][0]*2.0f) - 1.0f;
 8016596:	ed96 6a32 	vldr	s12, [r6, #200]	; 0xc8
	displayValues[0] = myPitchFactorCombined;
 801659a:	4c5c      	ldr	r4, [pc, #368]	; (801670c <SFXPitchShiftTick+0x194>)
{
 801659c:	4605      	mov	r5, r0
	float myPitchFactorCoarse = (presetKnobValues[Pitchshift][0]*2.0f) - 1.0f;
 801659e:	eea6 8a27 	vfma.f32	s16, s12, s15
	float keyPitch = tSimplePoly_getPitchAndCheckActive(&poly, 0);
 80165a2:	2100      	movs	r1, #0
	float myPitchFactorFine = ((presetKnobValues[Pitchshift][1]*2.0f) - 1.0f) * 0.1f;
 80165a4:	eee6 5aa7 	vfma.f32	s11, s13, s15
	float keyPitch = tSimplePoly_getPitchAndCheckActive(&poly, 0);
 80165a8:	4859      	ldr	r0, [pc, #356]	; (8016710 <SFXPitchShiftTick+0x198>)
	float myPitchFactorCombined = myPitchFactorFine + myPitchFactorCoarse;
 80165aa:	eea5 8a87 	vfma.f32	s16, s11, s14
	displayValues[0] = myPitchFactorCombined;
 80165ae:	ed84 8a00 	vstr	s16, [r4]
	displayValues[1] = myPitchFactorCombined;
 80165b2:	ed84 8a01 	vstr	s16, [r4, #4]
	float keyPitch = tSimplePoly_getPitchAndCheckActive(&poly, 0);
 80165b6:	f00e fd6d 	bl	8025094 <tSimplePoly_getPitchAndCheckActive>
 80165ba:	ee07 0a90 	vmov	s15, r0
 80165be:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	if (keyPitch >= 0)
 80165c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80165c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ca:	f280 8094 	bge.w	80166f6 <SFXPitchShiftTick+0x17e>
		keyPitch = 1.0f;
 80165ce:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
	float myPitchFactor = fastexp2f(myPitchFactorCombined);
 80165d2:	eeb0 0a48 	vmov.f32	s0, s16
 80165d6:	f00d fe01 	bl	80241dc <fastexp2f>
	myPitchFactor *= keyPitch;
 80165da:	ee68 8a80 	vmul.f32	s17, s17, s0
	tRetune_setPitchFactor(&retune, myPitchFactor, 0);
 80165de:	2100      	movs	r1, #0
 80165e0:	484c      	ldr	r0, [pc, #304]	; (8016714 <SFXPitchShiftTick+0x19c>)
	displayValues[3] = fastexp2f((presetKnobValues[Pitchshift][3]*2.0f) - 1.0f);
 80165e2:	eebf 9a00 	vmov.f32	s18, #240	; 0xbf800000 -1.0
	tRetune_setPitchFactor(&retune, myPitchFactor, 0);
 80165e6:	eeb0 0a68 	vmov.f32	s0, s17
 80165ea:	f00b f91f 	bl	802182c <tRetune_setPitchFactor>
	tRetune_setPitchFactor(&retune2, myPitchFactor, 0);
 80165ee:	2100      	movs	r1, #0
 80165f0:	4849      	ldr	r0, [pc, #292]	; (8016718 <SFXPitchShiftTick+0x1a0>)
 80165f2:	eeb0 0a68 	vmov.f32	s0, s17
 80165f6:	f00b f919 	bl	802182c <tRetune_setPitchFactor>
	displayValues[2] = LEAF_clip( 0.0f,((presetKnobValues[Pitchshift][2]) * 3.0f) - 0.2f,3.0f);
 80165fa:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 80165fe:	edd6 7a34 	vldr	s15, [r6, #208]	; 0xd0
 8016602:	eddf 0a46 	vldr	s1, [pc, #280]	; 801671c <SFXPitchShiftTick+0x1a4>
 8016606:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8016720 <SFXPitchShiftTick+0x1a8>
 801660a:	eee7 0a81 	vfma.f32	s1, s15, s2
 801660e:	f00d feb7 	bl	8024380 <LEAF_clip>
	displayValues[3] = fastexp2f((presetKnobValues[Pitchshift][3]*2.0f) - 1.0f);
 8016612:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
	displayValues[2] = LEAF_clip( 0.0f,((presetKnobValues[Pitchshift][2]) * 3.0f) - 0.2f,3.0f);
 8016616:	ed84 0a02 	vstr	s0, [r4, #8]
	displayValues[3] = fastexp2f((presetKnobValues[Pitchshift][3]*2.0f) - 1.0f);
 801661a:	eeb0 0a49 	vmov.f32	s0, s18
 801661e:	ed96 7a35 	vldr	s14, [r6, #212]	; 0xd4
 8016622:	eea7 0a27 	vfma.f32	s0, s14, s15
 8016626:	f00d fdd9 	bl	80241dc <fastexp2f>
	tExpSmooth_setDest(&smoother3, displayValues[2]);
 801662a:	483e      	ldr	r0, [pc, #248]	; (8016724 <SFXPitchShiftTick+0x1ac>)
	displayValues[3] = fastexp2f((presetKnobValues[Pitchshift][3]*2.0f) - 1.0f);
 801662c:	ed84 0a03 	vstr	s0, [r4, #12]
	tExpSmooth_setDest(&smoother3, displayValues[2]);
 8016630:	ed94 0a02 	vldr	s0, [r4, #8]
 8016634:	f00c fa10 	bl	8022a58 <tExpSmooth_setDest>
	tFormantShifter_setIntensity(&fs, tExpSmooth_tick(&smoother3)+.1f);
 8016638:	483a      	ldr	r0, [pc, #232]	; (8016724 <SFXPitchShiftTick+0x1ac>)
 801663a:	f00c fa17 	bl	8022a6c <tExpSmooth_tick>
 801663e:	eddf 7a32 	vldr	s15, [pc, #200]	; 8016708 <SFXPitchShiftTick+0x190>
 8016642:	4839      	ldr	r0, [pc, #228]	; (8016728 <SFXPitchShiftTick+0x1b0>)
 8016644:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016648:	f00b fdf2 	bl	8022230 <tFormantShifter_setIntensity>
	tFormantShifter_setShiftFactor(&fs, displayValues[3]);
 801664c:	ed94 0a03 	vldr	s0, [r4, #12]
 8016650:	4835      	ldr	r0, [pc, #212]	; (8016728 <SFXPitchShiftTick+0x1b0>)
 8016652:	f00b fde9 	bl	8022228 <tFormantShifter_setShiftFactor>
	if (displayValues[2] > 0.01f)
 8016656:	eddf 7a35 	vldr	s15, [pc, #212]	; 801672c <SFXPitchShiftTick+0x1b4>
 801665a:	ed94 7a02 	vldr	s14, [r4, #8]
		tRamp_setDest(&pitchshiftRamp, 1.0f);
 801665e:	4834      	ldr	r0, [pc, #208]	; (8016730 <SFXPitchShiftTick+0x1b8>)
	if (displayValues[2] > 0.01f)
 8016660:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		tRamp_setDest(&pitchshiftRamp, -1.0f);
 8016668:	bfcc      	ite	gt
 801666a:	eeb0 0a49 	vmovgt.f32	s0, s18
		tRamp_setDest(&pitchshiftRamp, 1.0f);
 801666e:	eeb7 0a00 	vmovle.f32	s0, #112	; 0x3f800000  1.0
 8016672:	f00c f943 	bl	80228fc <tRamp_setDest>
	float crossfadeVal = tRamp_tick(&pitchshiftRamp);
 8016676:	482e      	ldr	r0, [pc, #184]	; (8016730 <SFXPitchShiftTick+0x1b8>)
 8016678:	f00c f95c 	bl	8022934 <tRamp_tick>
	LEAF_crossfade(crossfadeVal, myGains);
 801667c:	4668      	mov	r0, sp
 801667e:	f00d fdfb 	bl	8024278 <LEAF_crossfade>
	tExpSmooth_setDest(&smoother1, myGains[0]);
 8016682:	ed9d 0a00 	vldr	s0, [sp]
 8016686:	482b      	ldr	r0, [pc, #172]	; (8016734 <SFXPitchShiftTick+0x1bc>)
 8016688:	f00c f9e6 	bl	8022a58 <tExpSmooth_setDest>
	tExpSmooth_setDest(&smoother2, myGains[1]);
 801668c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8016690:	4829      	ldr	r0, [pc, #164]	; (8016738 <SFXPitchShiftTick+0x1c0>)
 8016692:	f00c f9e1 	bl	8022a58 <tExpSmooth_setDest>
	float formantsample = tanhf(tFormantShifter_remove(&fs, input[1]));
 8016696:	4824      	ldr	r0, [pc, #144]	; (8016728 <SFXPitchShiftTick+0x1b0>)
 8016698:	ed95 0a01 	vldr	s0, [r5, #4]
 801669c:	f00b fc10 	bl	8021ec0 <tFormantShifter_remove>
 80166a0:	f011 fb80 	bl	8027da4 <tanhf>
	float* samples = tRetune_tick(&retune2, formantsample);
 80166a4:	481c      	ldr	r0, [pc, #112]	; (8016718 <SFXPitchShiftTick+0x1a0>)
 80166a6:	f00a ffed 	bl	8021684 <tRetune_tick>
	formantsample = samples[0];
 80166aa:	ed90 8a00 	vldr	s16, [r0]
	samples = tRetune_tick(&retune, sample);
 80166ae:	ed95 0a01 	vldr	s0, [r5, #4]
 80166b2:	4818      	ldr	r0, [pc, #96]	; (8016714 <SFXPitchShiftTick+0x19c>)
 80166b4:	f00a ffe6 	bl	8021684 <tRetune_tick>
	formantsample = tanhf(tFormantShifter_add(&fs, formantsample)) * tExpSmooth_tick(&smoother2) ;
 80166b8:	eeb0 0a48 	vmov.f32	s0, s16
	sample = samples[0];
 80166bc:	ed90 8a00 	vldr	s16, [r0]
	formantsample = tanhf(tFormantShifter_add(&fs, formantsample)) * tExpSmooth_tick(&smoother2) ;
 80166c0:	4819      	ldr	r0, [pc, #100]	; (8016728 <SFXPitchShiftTick+0x1b0>)
 80166c2:	f00b fc7b 	bl	8021fbc <tFormantShifter_add>
 80166c6:	f011 fb6d 	bl	8027da4 <tanhf>
 80166ca:	481b      	ldr	r0, [pc, #108]	; (8016738 <SFXPitchShiftTick+0x1c0>)
 80166cc:	eeb0 9a40 	vmov.f32	s18, s0
 80166d0:	f00c f9cc 	bl	8022a6c <tExpSmooth_tick>
	sample = (sample * (tExpSmooth_tick(&smoother1))) +  formantsample;
 80166d4:	4817      	ldr	r0, [pc, #92]	; (8016734 <SFXPitchShiftTick+0x1bc>)
	formantsample = tanhf(tFormantShifter_add(&fs, formantsample)) * tExpSmooth_tick(&smoother2) ;
 80166d6:	eef0 8a40 	vmov.f32	s17, s0
	sample = (sample * (tExpSmooth_tick(&smoother1))) +  formantsample;
 80166da:	f00c f9c7 	bl	8022a6c <tExpSmooth_tick>
 80166de:	ee20 0a08 	vmul.f32	s0, s0, s16
 80166e2:	eea9 0a28 	vfma.f32	s0, s18, s17
	input[0] = sample;
 80166e6:	ed85 0a00 	vstr	s0, [r5]
	input[1] = sample;
 80166ea:	ed85 0a01 	vstr	s0, [r5, #4]
}
 80166ee:	b002      	add	sp, #8
 80166f0:	ecbd 8b04 	vpop	{d8-d9}
 80166f4:	bd70      	pop	{r4, r5, r6, pc}
		keyPitch = LEAF_midiToFrequency(keyPitch) * 0.003822629969419f ;
 80166f6:	eddf 8a11 	vldr	s17, [pc, #68]	; 801673c <SFXPitchShiftTick+0x1c4>
 80166fa:	f00d ff2b 	bl	8024554 <LEAF_midiToFrequency>
 80166fe:	ee60 8a28 	vmul.f32	s17, s0, s17
 8016702:	e766      	b.n	80165d2 <SFXPitchShiftTick+0x5a>
 8016704:	20016710 	.word	0x20016710
 8016708:	3dcccccd 	.word	0x3dcccccd
 801670c:	200187c4 	.word	0x200187c4
 8016710:	20017554 	.word	0x20017554
 8016714:	20016088 	.word	0x20016088
 8016718:	20017880 	.word	0x20017880
 801671c:	be4ccccd 	.word	0xbe4ccccd
 8016720:	00000000 	.word	0x00000000
 8016724:	200177b4 	.word	0x200177b4
 8016728:	20016364 	.word	0x20016364
 801672c:	3c23d70a 	.word	0x3c23d70a
 8016730:	200176c8 	.word	0x200176c8
 8016734:	20016244 	.word	0x20016244
 8016738:	20017078 	.word	0x20017078
 801673c:	3b7a8517 	.word	0x3b7a8517

08016740 <SFXPitchShiftFree>:
{
 8016740:	b508      	push	{r3, lr}
	tFormantShifter_free(&fs);
 8016742:	480b      	ldr	r0, [pc, #44]	; (8016770 <SFXPitchShiftFree+0x30>)
 8016744:	f00b fb80 	bl	8021e48 <tFormantShifter_free>
	tRetune_free(&retune);
 8016748:	480a      	ldr	r0, [pc, #40]	; (8016774 <SFXPitchShiftFree+0x34>)
 801674a:	f00a ff59 	bl	8021600 <tRetune_free>
	tRetune_free(&retune2);
 801674e:	480a      	ldr	r0, [pc, #40]	; (8016778 <SFXPitchShiftFree+0x38>)
 8016750:	f00a ff56 	bl	8021600 <tRetune_free>
	tRamp_free(&pitchshiftRamp);
 8016754:	4809      	ldr	r0, [pc, #36]	; (801677c <SFXPitchShiftFree+0x3c>)
 8016756:	f00c f8cd 	bl	80228f4 <tRamp_free>
	tExpSmooth_free(&smoother1);
 801675a:	4809      	ldr	r0, [pc, #36]	; (8016780 <SFXPitchShiftFree+0x40>)
 801675c:	f00c f966 	bl	8022a2c <tExpSmooth_free>
	tExpSmooth_free(&smoother2);
 8016760:	4808      	ldr	r0, [pc, #32]	; (8016784 <SFXPitchShiftFree+0x44>)
 8016762:	f00c f963 	bl	8022a2c <tExpSmooth_free>
	tExpSmooth_free(&smoother3);
 8016766:	4808      	ldr	r0, [pc, #32]	; (8016788 <SFXPitchShiftFree+0x48>)
}
 8016768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tExpSmooth_free(&smoother3);
 801676c:	f00c b95e 	b.w	8022a2c <tExpSmooth_free>
 8016770:	20016364 	.word	0x20016364
 8016774:	20016088 	.word	0x20016088
 8016778:	20017880 	.word	0x20017880
 801677c:	200176c8 	.word	0x200176c8
 8016780:	20016244 	.word	0x20016244
 8016784:	20017078 	.word	0x20017078
 8016788:	200177b4 	.word	0x200177b4

0801678c <SFXNeartuneAlloc>:
{
 801678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	leaf.clearOnAllocation = 1;
 801678e:	2401      	movs	r4, #1
 8016790:	4d28      	ldr	r5, [pc, #160]	; (8016834 <SFXNeartuneAlloc+0xa8>)
	tRetune_init(&autotuneMono, 1, 512, 256);
 8016792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016796:	4828      	ldr	r0, [pc, #160]	; (8016838 <SFXNeartuneAlloc+0xac>)
 8016798:	4621      	mov	r1, r4
 801679a:	f44f 7200 	mov.w	r2, #512	; 0x200
	leaf.clearOnAllocation = 1;
 801679e:	616c      	str	r4, [r5, #20]
	tRetune_init(&autotuneMono, 1, 512, 256);
 80167a0:	f00a ff24 	bl	80215ec <tRetune_init>
		float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 80167a4:	4b25      	ldr	r3, [pc, #148]	; (801683c <SFXNeartuneAlloc+0xb0>)
	for (int i = 0; i < 128; i++)
 80167a6:	2100      	movs	r1, #0
 80167a8:	4825      	ldr	r0, [pc, #148]	; (8016840 <SFXNeartuneAlloc+0xb4>)
		float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 80167aa:	781f      	ldrb	r7, [r3, #0]
 80167ac:	4e25      	ldr	r6, [pc, #148]	; (8016844 <SFXNeartuneAlloc+0xb8>)
 80167ae:	4d26      	ldr	r5, [pc, #152]	; (8016848 <SFXNeartuneAlloc+0xbc>)
		float tempNote = i;
 80167b0:	ee07 1a90 	vmov	s15, r1
	for (int i = 0; i < 128; i++)
 80167b4:	3101      	adds	r1, #1
		float tempNote = i;
 80167b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	for (int i = 0; i < 128; i++)
 80167ba:	2980      	cmp	r1, #128	; 0x80
		float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 80167bc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80167c0:	ee17 3a90 	vmov	r3, s15
 80167c4:	eba3 0307 	sub.w	r3, r3, r7
 80167c8:	fb85 2403 	smull	r2, r4, r5, r3
 80167cc:	ea4f 72e3 	mov.w	r2, r3, asr #31
 80167d0:	ebc2 0264 	rsb	r2, r2, r4, asr #1
 80167d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80167d8:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80167dc:	ee07 3a90 	vmov	s15, r3
 80167e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 80167e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80167e8:	ee17 3a90 	vmov	r3, s15
 80167ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80167f0:	edd3 7a00 	vldr	s15, [r3]
 80167f4:	ee77 7a87 	vadd.f32	s15, s15, s14
		notes[i] = tunedNote;
 80167f8:	ece0 7a01 	vstmia	r0!, {s15}
	for (int i = 0; i < 128; i++)
 80167fc:	d1d8      	bne.n	80167b0 <SFXNeartuneAlloc+0x24>
	tExpSmooth_init(&neartune_smoother, 1.0f, .007f);
 80167fe:	eddf 0a13 	vldr	s1, [pc, #76]	; 801684c <SFXNeartuneAlloc+0xc0>
 8016802:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016806:	4812      	ldr	r0, [pc, #72]	; (8016850 <SFXNeartuneAlloc+0xc4>)
 8016808:	f00c f8c0 	bl	802298c <tExpSmooth_init>
	tRamp_init(&nearWetRamp, 20.0f, 1);
 801680c:	2101      	movs	r1, #1
 801680e:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8016812:	4810      	ldr	r0, [pc, #64]	; (8016854 <SFXNeartuneAlloc+0xc8>)
 8016814:	f00c f806 	bl	8022824 <tRamp_init>
	setLED_A(autotuneChromatic);
 8016818:	4b0f      	ldr	r3, [pc, #60]	; (8016858 <SFXNeartuneAlloc+0xcc>)
 801681a:	7818      	ldrb	r0, [r3, #0]
 801681c:	f7fd fa4c 	bl	8013cb8 <setLED_A>
	setLED_C(autotuneLock);
 8016820:	4b0e      	ldr	r3, [pc, #56]	; (801685c <SFXNeartuneAlloc+0xd0>)
 8016822:	7818      	ldrb	r0, [r3, #0]
 8016824:	f7fd fa64 	bl	8013cf0 <setLED_C>
	lastSnap = 1.0f;
 8016828:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801682c:	4b0c      	ldr	r3, [pc, #48]	; (8016860 <SFXNeartuneAlloc+0xd4>)
 801682e:	601a      	str	r2, [r3, #0]
}
 8016830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016832:	bf00      	nop
 8016834:	200194a0 	.word	0x200194a0
 8016838:	2001754c 	.word	0x2001754c
 801683c:	20000654 	.word	0x20000654
 8016840:	20016448 	.word	0x20016448
 8016844:	20000620 	.word	0x20000620
 8016848:	2aaaaaab 	.word	0x2aaaaaab
 801684c:	3be56042 	.word	0x3be56042
 8016850:	2001761c 	.word	0x2001761c
 8016854:	20018394 	.word	0x20018394
 8016858:	2000051c 	.word	0x2000051c
 801685c:	20000520 	.word	0x20000520
 8016860:	2000024c 	.word	0x2000024c

08016864 <SFXNeartuneFrame>:
{
 8016864:	b538      	push	{r3, r4, r5, lr}
	if ((tSimplePoly_getNumActiveVoices(&poly) != 0) || (autotuneChromatic == 1) || (autotuneLock == 1))
 8016866:	4826      	ldr	r0, [pc, #152]	; (8016900 <SFXNeartuneFrame+0x9c>)
 8016868:	f00e fbf6 	bl	8025058 <tSimplePoly_getNumActiveVoices>
 801686c:	b9e8      	cbnz	r0, 80168aa <SFXNeartuneFrame+0x46>
 801686e:	4b25      	ldr	r3, [pc, #148]	; (8016904 <SFXNeartuneFrame+0xa0>)
 8016870:	781b      	ldrb	r3, [r3, #0]
 8016872:	2b01      	cmp	r3, #1
 8016874:	d019      	beq.n	80168aa <SFXNeartuneFrame+0x46>
 8016876:	4b24      	ldr	r3, [pc, #144]	; (8016908 <SFXNeartuneFrame+0xa4>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	2b01      	cmp	r3, #1
 801687c:	d015      	beq.n	80168aa <SFXNeartuneFrame+0x46>
	if (buttonActionsSFX[ButtonA][ActionPress])
 801687e:	4c23      	ldr	r4, [pc, #140]	; (801690c <SFXNeartuneFrame+0xa8>)
		tRamp_setDest(&nearWetRamp, -1.0f);
 8016880:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016884:	4822      	ldr	r0, [pc, #136]	; (8016910 <SFXNeartuneFrame+0xac>)
 8016886:	f00c f839 	bl	80228fc <tRamp_setDest>
	if (buttonActionsSFX[ButtonA][ActionPress])
 801688a:	7d23      	ldrb	r3, [r4, #20]
 801688c:	b1b3      	cbz	r3, 80168bc <SFXNeartuneFrame+0x58>
		autotuneChromatic = !autotuneChromatic;
 801688e:	4a1d      	ldr	r2, [pc, #116]	; (8016904 <SFXNeartuneFrame+0xa0>)
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 8016890:	2100      	movs	r1, #0
		autotuneChromatic = !autotuneChromatic;
 8016892:	7813      	ldrb	r3, [r2, #0]
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 8016894:	7521      	strb	r1, [r4, #20]
		autotuneChromatic = !autotuneChromatic;
 8016896:	fab3 f383 	clz	r3, r3
 801689a:	095b      	lsrs	r3, r3, #5
		setLED_A(autotuneChromatic);
 801689c:	4618      	mov	r0, r3
		autotuneChromatic = !autotuneChromatic;
 801689e:	7013      	strb	r3, [r2, #0]
		setLED_A(autotuneChromatic);
 80168a0:	f7fd fa0a 	bl	8013cb8 <setLED_A>
	if (buttonActionsSFX[ButtonC][ActionPress])
 80168a4:	7f23      	ldrb	r3, [r4, #28]
 80168a6:	b963      	cbnz	r3, 80168c2 <SFXNeartuneFrame+0x5e>
}
 80168a8:	bd38      	pop	{r3, r4, r5, pc}
	if (buttonActionsSFX[ButtonA][ActionPress])
 80168aa:	4c18      	ldr	r4, [pc, #96]	; (801690c <SFXNeartuneFrame+0xa8>)
		tRamp_setDest(&nearWetRamp, 1.0f);
 80168ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80168b0:	4817      	ldr	r0, [pc, #92]	; (8016910 <SFXNeartuneFrame+0xac>)
 80168b2:	f00c f823 	bl	80228fc <tRamp_setDest>
	if (buttonActionsSFX[ButtonA][ActionPress])
 80168b6:	7d23      	ldrb	r3, [r4, #20]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d1e8      	bne.n	801688e <SFXNeartuneFrame+0x2a>
	if (buttonActionsSFX[ButtonC][ActionPress])
 80168bc:	7f23      	ldrb	r3, [r4, #28]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d0f2      	beq.n	80168a8 <SFXNeartuneFrame+0x44>
		autotuneLock = !autotuneLock;
 80168c2:	4d11      	ldr	r5, [pc, #68]	; (8016908 <SFXNeartuneFrame+0xa4>)
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 80168c4:	2200      	movs	r2, #0
		autotuneLock = !autotuneLock;
 80168c6:	682b      	ldr	r3, [r5, #0]
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 80168c8:	7722      	strb	r2, [r4, #28]
		autotuneLock = !autotuneLock;
 80168ca:	fab3 f383 	clz	r3, r3
 80168ce:	095b      	lsrs	r3, r3, #5
		setLED_C(autotuneLock);
 80168d0:	4618      	mov	r0, r3
		autotuneLock = !autotuneLock;
 80168d2:	602b      	str	r3, [r5, #0]
		setLED_C(autotuneLock);
 80168d4:	f7fd fa0c 	bl	8013cf0 <setLED_C>
		if (autotuneLock)
 80168d8:	6829      	ldr	r1, [r5, #0]
 80168da:	b151      	cbz	r1, 80168f2 <SFXNeartuneFrame+0x8e>
 80168dc:	4d0d      	ldr	r5, [pc, #52]	; (8016914 <SFXNeartuneFrame+0xb0>)
 80168de:	4c0e      	ldr	r4, [pc, #56]	; (8016918 <SFXNeartuneFrame+0xb4>)
 80168e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80168e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80168e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80168e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80168e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80168ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80168f0:	bd38      	pop	{r3, r4, r5, pc}
 80168f2:	2230      	movs	r2, #48	; 0x30
 80168f4:	4808      	ldr	r0, [pc, #32]	; (8016918 <SFXNeartuneFrame+0xb4>)
 80168f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80168fa:	f010 be1e 	b.w	802753a <memset>
 80168fe:	bf00      	nop
 8016900:	20017554 	.word	0x20017554
 8016904:	2000051c 	.word	0x2000051c
 8016908:	20000520 	.word	0x20000520
 801690c:	20018714 	.word	0x20018714
 8016910:	20018394 	.word	0x20018394
 8016914:	20000530 	.word	0x20000530
 8016918:	200005a8 	.word	0x200005a8

0801691c <SFXNeartuneFree>:
{
 801691c:	b508      	push	{r3, lr}
	tRetune_free(&autotuneMono);
 801691e:	4805      	ldr	r0, [pc, #20]	; (8016934 <SFXNeartuneFree+0x18>)
 8016920:	f00a fe6e 	bl	8021600 <tRetune_free>
	tExpSmooth_free(&neartune_smoother);
 8016924:	4804      	ldr	r0, [pc, #16]	; (8016938 <SFXNeartuneFree+0x1c>)
 8016926:	f00c f881 	bl	8022a2c <tExpSmooth_free>
	tRamp_free(&nearWetRamp);
 801692a:	4804      	ldr	r0, [pc, #16]	; (801693c <SFXNeartuneFree+0x20>)
}
 801692c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tRamp_free(&nearWetRamp);
 8016930:	f00b bfe0 	b.w	80228f4 <tRamp_free>
 8016934:	2001754c 	.word	0x2001754c
 8016938:	2001761c 	.word	0x2001761c
 801693c:	20018394 	.word	0x20018394

08016940 <SFXAutotuneAlloc>:
{
 8016940:	b508      	push	{r3, lr}
	tAutotune_init(&autotunePoly, NUM_AUTOTUNE, 1024, 512);
 8016942:	2104      	movs	r1, #4
 8016944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016948:	4805      	ldr	r0, [pc, #20]	; (8016960 <SFXAutotuneAlloc+0x20>)
 801694a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801694e:	f00b f86b 	bl	8021a28 <tAutotune_init>
	tSimplePoly_setNumVoices(&poly, NUM_AUTOTUNE);
 8016952:	2104      	movs	r1, #4
 8016954:	4803      	ldr	r0, [pc, #12]	; (8016964 <SFXAutotuneAlloc+0x24>)
}
 8016956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tSimplePoly_setNumVoices(&poly, NUM_AUTOTUNE);
 801695a:	f00e bb71 	b.w	8025040 <tSimplePoly_setNumVoices>
 801695e:	bf00      	nop
 8016960:	20016e38 	.word	0x20016e38
 8016964:	20017554 	.word	0x20017554

08016968 <SFXAutotuneFrame>:
{
 8016968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801696c:	4f35      	ldr	r7, [pc, #212]	; (8016a44 <SFXAutotuneFrame+0xdc>)
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 801696e:	2400      	movs	r4, #0
 8016970:	4d35      	ldr	r5, [pc, #212]	; (8016a48 <SFXAutotuneFrame+0xe0>)
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8016972:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8016a64 <SFXAutotuneFrame+0xfc>
{
 8016976:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 801697a:	ed9f 8a34 	vldr	s16, [pc, #208]	; 8016a4c <SFXAutotuneFrame+0xe4>
{
 801697e:	b082      	sub	sp, #8
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016980:	e03e      	b.n	8016a00 <SFXAutotuneFrame+0x98>
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8016982:	f00e fb81 	bl	8025088 <tSimplePoly_getPitch>
 8016986:	ee07 0a90 	vmov	s15, r0
 801698a:	4a31      	ldr	r2, [pc, #196]	; (8016a50 <SFXAutotuneFrame+0xe8>)
 801698c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8016990:	4b30      	ldr	r3, [pc, #192]	; (8016a54 <SFXAutotuneFrame+0xec>)
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8016992:	ed92 0a00 	vldr	s0, [r2]
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8016996:	781a      	ldrb	r2, [r3, #0]
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8016998:	ee37 7a00 	vadd.f32	s14, s14, s0
	float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 801699c:	492e      	ldr	r1, [pc, #184]	; (8016a58 <SFXAutotuneFrame+0xf0>)
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801699e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80169a2:	ee17 3a90 	vmov	r3, s15
 80169a6:	1a9b      	subs	r3, r3, r2
 80169a8:	fb88 2003 	smull	r2, r0, r8, r3
 80169ac:	17da      	asrs	r2, r3, #31
 80169ae:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 80169b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80169b6:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80169ba:	ee07 3a90 	vmov	s15, r3
 80169be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 80169c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80169c6:	ee17 3a90 	vmov	r3, s15
 80169ca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80169ce:	ed93 0a00 	vldr	s0, [r3]
	freq[voice] = LEAF_midiToFrequency(tunedNote);
 80169d2:	ee37 0a00 	vadd.f32	s0, s14, s0
 80169d6:	f00d fdbd 	bl	8024554 <LEAF_midiToFrequency>
 80169da:	4b20      	ldr	r3, [pc, #128]	; (8016a5c <SFXAutotuneFrame+0xf4>)
		tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 80169dc:	4631      	mov	r1, r6
	freq[voice] = LEAF_midiToFrequency(tunedNote);
 80169de:	eca7 0a01 	vstmia	r7!, {s0}
		tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 80169e2:	4628      	mov	r0, r5
 80169e4:	eb03 0684 	add.w	r6, r3, r4, lsl #2
 80169e8:	f00e fb5a 	bl	80250a0 <tSimplePoly_getVelocity>
 80169ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80169f0:	2800      	cmp	r0, #0
 80169f2:	4630      	mov	r0, r6
 80169f4:	f104 0401 	add.w	r4, r4, #1
 80169f8:	fe30 0a08 	vselgt.f32	s0, s0, s16
 80169fc:	f00c f82c 	bl	8022a58 <tExpSmooth_setDest>
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016a00:	4628      	mov	r0, r5
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8016a02:	b2e6      	uxtb	r6, r4
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016a04:	f00e fb24 	bl	8025050 <tSimplePoly_getNumVoices>
 8016a08:	42a0      	cmp	r0, r4
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8016a0a:	4631      	mov	r1, r6
 8016a0c:	4628      	mov	r0, r5
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016a0e:	dcb8      	bgt.n	8016982 <SFXAutotuneFrame+0x1a>
	int tempNumVoices = tSimplePoly_getNumActiveVoices(&poly);
 8016a10:	480d      	ldr	r0, [pc, #52]	; (8016a48 <SFXAutotuneFrame+0xe0>)
 8016a12:	f00e fb21 	bl	8025058 <tSimplePoly_getNumActiveVoices>
	if (tempNumVoices != 0) tExpSmooth_setDest(&comp, 1.0f / (float)tempNumVoices);
 8016a16:	9001      	str	r0, [sp, #4]
 8016a18:	b920      	cbnz	r0, 8016a24 <SFXAutotuneFrame+0xbc>
}
 8016a1a:	b002      	add	sp, #8
 8016a1c:	ecbd 8b02 	vpop	{d8}
 8016a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (tempNumVoices != 0) tExpSmooth_setDest(&comp, 1.0f / (float)tempNumVoices);
 8016a24:	ee07 0a90 	vmov	s15, r0
 8016a28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016a2c:	480c      	ldr	r0, [pc, #48]	; (8016a60 <SFXAutotuneFrame+0xf8>)
 8016a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a32:	ee80 0a27 	vdiv.f32	s0, s0, s15
}
 8016a36:	b002      	add	sp, #8
 8016a38:	ecbd 8b02 	vpop	{d8}
 8016a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (tempNumVoices != 0) tExpSmooth_setDest(&comp, 1.0f / (float)tempNumVoices);
 8016a40:	f00c b80a 	b.w	8022a58 <tExpSmooth_setDest>
 8016a44:	20016e3c 	.word	0x20016e3c
 8016a48:	20017554 	.word	0x20017554
 8016a4c:	00000000 	.word	0x00000000
 8016a50:	200005d8 	.word	0x200005d8
 8016a54:	20000654 	.word	0x20000654
 8016a58:	20000620 	.word	0x20000620
 8016a5c:	20017950 	.word	0x20017950
 8016a60:	20017294 	.word	0x20017294
 8016a64:	2aaaaaab 	.word	0x2aaaaaab

08016a68 <SFXAutotuneTick>:
	displayValues[0] = 0.5f + (presetKnobValues[AutotunePoly][0] * 0.47f);
 8016a68:	4b27      	ldr	r3, [pc, #156]	; (8016b08 <SFXAutotuneTick+0xa0>)
 8016a6a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016a6e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8016b0c <SFXAutotuneTick+0xa4>
{
 8016a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a76:	ed2d 8b02 	vpush	{d8}
	displayValues[0] = 0.5f + (presetKnobValues[AutotunePoly][0] * 0.47f);
 8016a7a:	edd3 6a64 	vldr	s13, [r3, #400]	; 0x190
{
 8016a7e:	4680      	mov	r8, r0
	displayValues[0] = 0.5f + (presetKnobValues[AutotunePoly][0] * 0.47f);
 8016a80:	4b23      	ldr	r3, [pc, #140]	; (8016b10 <SFXAutotuneTick+0xa8>)
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016a82:	2400      	movs	r4, #0
	displayValues[0] = 0.5f + (presetKnobValues[AutotunePoly][0] * 0.47f);
 8016a84:	eee6 7a87 	vfma.f32	s15, s13, s14
	tAutotune_setFidelityThreshold(&autotunePoly, displayValues[0]);
 8016a88:	4822      	ldr	r0, [pc, #136]	; (8016b14 <SFXAutotuneTick+0xac>)
 8016a8a:	4d23      	ldr	r5, [pc, #140]	; (8016b18 <SFXAutotuneTick+0xb0>)
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016a8c:	4f23      	ldr	r7, [pc, #140]	; (8016b1c <SFXAutotuneTick+0xb4>)
		tAutotune_setFreq(&autotunePoly, freq[i], i);
 8016a8e:	4606      	mov	r6, r0
	tAutotune_setFidelityThreshold(&autotunePoly, displayValues[0]);
 8016a90:	eeb0 0a67 	vmov.f32	s0, s15
	displayValues[0] = 0.5f + (presetKnobValues[AutotunePoly][0] * 0.47f);
 8016a94:	edc3 7a00 	vstr	s15, [r3]
	tAutotune_setFidelityThreshold(&autotunePoly, displayValues[0]);
 8016a98:	f00b f916 	bl	8021cc8 <tAutotune_setFidelityThreshold>
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016a9c:	e003      	b.n	8016aa6 <SFXAutotuneTick+0x3e>
		tAutotune_setFreq(&autotunePoly, freq[i], i);
 8016a9e:	ecb5 0a01 	vldmia	r5!, {s0}
 8016aa2:	f00b f909 	bl	8021cb8 <tAutotune_setFreq>
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016aa6:	4638      	mov	r0, r7
 8016aa8:	f00e fad2 	bl	8025050 <tSimplePoly_getNumVoices>
 8016aac:	42a0      	cmp	r0, r4
		tAutotune_setFreq(&autotunePoly, freq[i], i);
 8016aae:	4621      	mov	r1, r4
 8016ab0:	4630      	mov	r0, r6
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016ab2:	f104 0401 	add.w	r4, r4, #1
 8016ab6:	dcf2      	bgt.n	8016a9e <SFXAutotuneTick+0x36>
	float* samples = tAutotune_tick(&autotunePoly, input[1]);
 8016ab8:	ed98 0a01 	vldr	s0, [r8, #4]
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016abc:	2400      	movs	r4, #0
	float* samples = tAutotune_tick(&autotunePoly, input[1]);
 8016abe:	4815      	ldr	r0, [pc, #84]	; (8016b14 <SFXAutotuneTick+0xac>)
 8016ac0:	f00a fffe 	bl	8021ac0 <tAutotune_tick>
	float sample = 0.0f;
 8016ac4:	ed9f 8a16 	vldr	s16, [pc, #88]	; 8016b20 <SFXAutotuneTick+0xb8>
	float* samples = tAutotune_tick(&autotunePoly, input[1]);
 8016ac8:	4605      	mov	r5, r0
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016aca:	4f14      	ldr	r7, [pc, #80]	; (8016b1c <SFXAutotuneTick+0xb4>)
		sample += samples[i] * tExpSmooth_tick(&polyRamp[i]);
 8016acc:	4e15      	ldr	r6, [pc, #84]	; (8016b24 <SFXAutotuneTick+0xbc>)
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016ace:	e005      	b.n	8016adc <SFXAutotuneTick+0x74>
		sample += samples[i] * tExpSmooth_tick(&polyRamp[i]);
 8016ad0:	ecf5 8a01 	vldmia	r5!, {s17}
 8016ad4:	f00b ffca 	bl	8022a6c <tExpSmooth_tick>
 8016ad8:	eea8 8a80 	vfma.f32	s16, s17, s0
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016adc:	4638      	mov	r0, r7
 8016ade:	f00e fab7 	bl	8025050 <tSimplePoly_getNumVoices>
 8016ae2:	42a0      	cmp	r0, r4
		sample += samples[i] * tExpSmooth_tick(&polyRamp[i]);
 8016ae4:	eb06 0084 	add.w	r0, r6, r4, lsl #2
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016ae8:	f104 0401 	add.w	r4, r4, #1
 8016aec:	dcf0      	bgt.n	8016ad0 <SFXAutotuneTick+0x68>
	sample *= tExpSmooth_tick(&comp);
 8016aee:	480e      	ldr	r0, [pc, #56]	; (8016b28 <SFXAutotuneTick+0xc0>)
 8016af0:	f00b ffbc 	bl	8022a6c <tExpSmooth_tick>
 8016af4:	ee28 0a00 	vmul.f32	s0, s16, s0
	input[0] = sample;
 8016af8:	ed88 0a00 	vstr	s0, [r8]
	input[1] = sample;
 8016afc:	ed88 0a01 	vstr	s0, [r8, #4]
}
 8016b00:	ecbd 8b02 	vpop	{d8}
 8016b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b08:	20016710 	.word	0x20016710
 8016b0c:	3ef0a3d7 	.word	0x3ef0a3d7
 8016b10:	200187c4 	.word	0x200187c4
 8016b14:	20016e38 	.word	0x20016e38
 8016b18:	20016e3c 	.word	0x20016e3c
 8016b1c:	20017554 	.word	0x20017554
 8016b20:	00000000 	.word	0x00000000
 8016b24:	20017950 	.word	0x20017950
 8016b28:	20017294 	.word	0x20017294

08016b2c <SFXAutotuneFree>:
	tAutotune_free(&autotunePoly);
 8016b2c:	4801      	ldr	r0, [pc, #4]	; (8016b34 <SFXAutotuneFree+0x8>)
 8016b2e:	f00a bf85 	b.w	8021a3c <tAutotune_free>
 8016b32:	bf00      	nop
 8016b34:	20016e38 	.word	0x20016e38

08016b38 <SFXSamplerBPAlloc>:
	tBuffer_initToPool(&buff, leaf.sampleRate * 172.0f, &largePool);
 8016b38:	4b1d      	ldr	r3, [pc, #116]	; (8016bb0 <SFXSamplerBPAlloc+0x78>)
 8016b3a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8016bb4 <SFXSamplerBPAlloc+0x7c>
 8016b3e:	4a1e      	ldr	r2, [pc, #120]	; (8016bb8 <SFXSamplerBPAlloc+0x80>)
{
 8016b40:	b570      	push	{r4, r5, r6, lr}
 8016b42:	ed2d 8b02 	vpush	{d8}
	tBuffer_initToPool(&buff, leaf.sampleRate * 172.0f, &largePool);
 8016b46:	edd3 7a00 	vldr	s15, [r3]
 8016b4a:	4c1c      	ldr	r4, [pc, #112]	; (8016bbc <SFXSamplerBPAlloc+0x84>)
 8016b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
	tSampler_init(&sampler, &buff);
 8016b50:	4e1b      	ldr	r6, [pc, #108]	; (8016bc0 <SFXSamplerBPAlloc+0x88>)
	tBuffer_initToPool(&buff, leaf.sampleRate * 172.0f, &largePool);
 8016b52:	4620      	mov	r0, r4
	tExpSmooth_initToPool(&startSmooth, 0.0f, 0.01f, &smallPool);
 8016b54:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8016bc4 <SFXSamplerBPAlloc+0x8c>
 8016b58:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 8016bc8 <SFXSamplerBPAlloc+0x90>
	tBuffer_initToPool(&buff, leaf.sampleRate * 172.0f, &largePool);
 8016b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	tExpSmooth_initToPool(&startSmooth, 0.0f, 0.01f, &smallPool);
 8016b60:	4d1a      	ldr	r5, [pc, #104]	; (8016bcc <SFXSamplerBPAlloc+0x94>)
	tBuffer_initToPool(&buff, leaf.sampleRate * 172.0f, &largePool);
 8016b62:	ee17 1a90 	vmov	r1, s15
 8016b66:	f00f fe1f 	bl	80267a8 <tBuffer_initToPool>
	tBuffer_setRecordMode(&buff, RecordOneShot);
 8016b6a:	4620      	mov	r0, r4
 8016b6c:	2100      	movs	r1, #0
 8016b6e:	f00f fe81 	bl	8026874 <tBuffer_setRecordMode>
	tSampler_init(&sampler, &buff);
 8016b72:	4621      	mov	r1, r4
 8016b74:	4630      	mov	r0, r6
 8016b76:	f00f fe8d 	bl	8026894 <tSampler_init>
	tSampler_setMode(&sampler, bpMode + 1);
 8016b7a:	4b15      	ldr	r3, [pc, #84]	; (8016bd0 <SFXSamplerBPAlloc+0x98>)
 8016b7c:	4630      	mov	r0, r6
 8016b7e:	6819      	ldr	r1, [r3, #0]
 8016b80:	3101      	adds	r1, #1
 8016b82:	b2c9      	uxtb	r1, r1
 8016b84:	f00f ff2e 	bl	80269e4 <tSampler_setMode>
	tExpSmooth_initToPool(&startSmooth, 0.0f, 0.01f, &smallPool);
 8016b88:	4629      	mov	r1, r5
 8016b8a:	eef0 0a68 	vmov.f32	s1, s17
 8016b8e:	4811      	ldr	r0, [pc, #68]	; (8016bd4 <SFXSamplerBPAlloc+0x9c>)
 8016b90:	eeb0 0a48 	vmov.f32	s0, s16
 8016b94:	f00b ff24 	bl	80229e0 <tExpSmooth_initToPool>
	tExpSmooth_initToPool(&lengthSmooth, 0.0f, 0.01f, &smallPool);
 8016b98:	eef0 0a68 	vmov.f32	s1, s17
 8016b9c:	eeb0 0a48 	vmov.f32	s0, s16
 8016ba0:	4629      	mov	r1, r5
 8016ba2:	480d      	ldr	r0, [pc, #52]	; (8016bd8 <SFXSamplerBPAlloc+0xa0>)
}
 8016ba4:	ecbd 8b02 	vpop	{d8}
 8016ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tExpSmooth_initToPool(&lengthSmooth, 0.0f, 0.01f, &smallPool);
 8016bac:	f00b bf18 	b.w	80229e0 <tExpSmooth_initToPool>
 8016bb0:	200194a0 	.word	0x200194a0
 8016bb4:	432c0000 	.word	0x432c0000
 8016bb8:	20014254 	.word	0x20014254
 8016bbc:	20016ff0 	.word	0x20016ff0
 8016bc0:	2001728c 	.word	0x2001728c
 8016bc4:	3c23d70a 	.word	0x3c23d70a
 8016bc8:	00000000 	.word	0x00000000
 8016bcc:	20014b2c 	.word	0x20014b2c
 8016bd0:	20000524 	.word	0x20000524
 8016bd4:	200177b8 	.word	0x200177b8
 8016bd8:	2001705c 	.word	0x2001705c

08016bdc <SFXSamplerBPFrame>:
 8016bdc:	4770      	bx	lr
 8016bde:	bf00      	nop

08016be0 <SFXSamplerBPTick>:
{
 8016be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buttonActionsSFX[ButtonC][ActionPress])
 8016be4:	4e91      	ldr	r6, [pc, #580]	; (8016e2c <SFXSamplerBPTick+0x24c>)
{
 8016be6:	4607      	mov	r7, r0
	int recordPosition = tBuffer_getRecordPosition(&buff);
 8016be8:	4891      	ldr	r0, [pc, #580]	; (8016e30 <SFXSamplerBPTick+0x250>)
{
 8016bea:	ed2d 8b02 	vpush	{d8}
	int recordPosition = tBuffer_getRecordPosition(&buff);
 8016bee:	f00f fe39 	bl	8026864 <tBuffer_getRecordPosition>
	if (buttonActionsSFX[ButtonC][ActionPress])
 8016bf2:	7f33      	ldrb	r3, [r6, #28]
	int recordPosition = tBuffer_getRecordPosition(&buff);
 8016bf4:	ee08 0a10 	vmov	s16, r0
	if (buttonActionsSFX[ButtonC][ActionPress])
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	f040 80a8 	bne.w	8016d4e <SFXSamplerBPTick+0x16e>
	if (buttonActionsSFX[ButtonB][ActionPress])
 8016bfe:	7e33      	ldrb	r3, [r6, #24]
 8016c00:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8016e60 <SFXSamplerBPTick+0x280>
 8016c04:	4c8b      	ldr	r4, [pc, #556]	; (8016e34 <SFXSamplerBPTick+0x254>)
 8016c06:	4d8c      	ldr	r5, [pc, #560]	; (8016e38 <SFXSamplerBPTick+0x258>)
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	f040 80b3 	bne.w	8016d74 <SFXSamplerBPTick+0x194>
	if (buttonActionsSFX[ButtonA][ActionPress])
 8016c0e:	7d33      	ldrb	r3, [r6, #20]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	f040 80c6 	bne.w	8016da2 <SFXSamplerBPTick+0x1c2>
	if (buttonActionsSFX[ButtonA][ActionRelease])
 8016c16:	7d73      	ldrb	r3, [r6, #21]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	f040 80d1 	bne.w	8016dc0 <SFXSamplerBPTick+0x1e0>
	sampleLength = recordPosition * leaf.invSampleRate;
 8016c1e:	4b87      	ldr	r3, [pc, #540]	; (8016e3c <SFXSamplerBPTick+0x25c>)
 8016c20:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
	displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8016c24:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
	displayValues[0] = knobs[0] * sampleLength;
 8016c28:	ed94 7a7d 	vldr	s14, [r4, #500]	; 0x1f4
	sampleLength = recordPosition * leaf.invSampleRate;
 8016c2c:	edd3 7a01 	vldr	s15, [r3, #4]
	displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8016c30:	edd4 0a7e 	vldr	s1, [r4, #504]	; 0x1f8
	sampleLength = recordPosition * leaf.invSampleRate;
 8016c34:	ee68 7a27 	vmul.f32	s15, s16, s15
	displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8016c38:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8016e40 <SFXSamplerBPTick+0x260>
 8016c3c:	ee38 1ac7 	vsub.f32	s2, s17, s14
	displayValues[0] = knobs[0] * sampleLength;
 8016c40:	ee27 7a87 	vmul.f32	s14, s15, s14
	sampleLength = recordPosition * leaf.invSampleRate;
 8016c44:	edc8 7a00 	vstr	s15, [r8]
	displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8016c48:	ee21 1a27 	vmul.f32	s2, s2, s15
 8016c4c:	ee67 0aa0 	vmul.f32	s1, s15, s1
	displayValues[0] = knobs[0] * sampleLength;
 8016c50:	ed85 7a00 	vstr	s14, [r5]
	displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8016c54:	f00d fb94 	bl	8024380 <LEAF_clip>
	displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 8016c58:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016c5c:	edd4 6a7f 	vldr	s13, [r4, #508]	; 0x1fc
	float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8016c60:	ed94 7a80 	vldr	s14, [r4, #512]	; 0x200
 8016c64:	eeb2 6a0c 	vmov.f32	s12, #44	; 0x41600000  14.0
	displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 8016c68:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
	displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8016c6c:	ed85 0a01 	vstr	s0, [r5, #4]
	displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 8016c70:	ee76 6ae7 	vsub.f32	s13, s13, s15
	float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8016c74:	ee77 7a67 	vsub.f32	s15, s14, s15
	displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 8016c78:	ee66 6aa5 	vmul.f32	s13, s13, s11
	float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8016c7c:	ee67 7a86 	vmul.f32	s15, s15, s12
	displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 8016c80:	edc5 6a02 	vstr	s13, [r5, #8]
	float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8016c84:	fef8 7a67 	vrinta.f32	s15, s15
	if (rate < 0.0f)
 8016c88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c90:	f100 80c0 	bmi.w	8016e14 <SFXSamplerBPTick+0x234>
		rate += 1.0f;
 8016c94:	ee77 7aa8 	vadd.f32	s15, s15, s17
	displayValues[4] = knobs[4] * 4000.0f;
 8016c98:	ed9f 6a6a 	vldr	s12, [pc, #424]	; 8016e44 <SFXSamplerBPTick+0x264>
	samplerRate = displayValues[3] * displayValues[2];
 8016c9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
	displayValues[4] = knobs[4] * 4000.0f;
 8016ca0:	ed94 7a81 	vldr	s14, [r4, #516]	; 0x204
	tExpSmooth_setDest(&startSmooth, knobs[0] * recordPosition);
 8016ca4:	ed94 0a7d 	vldr	s0, [r4, #500]	; 0x1f4
	displayValues[4] = knobs[4] * 4000.0f;
 8016ca8:	ee27 7a06 	vmul.f32	s14, s14, s12
	samplerRate = displayValues[3] * displayValues[2];
 8016cac:	4e66      	ldr	r6, [pc, #408]	; (8016e48 <SFXSamplerBPTick+0x268>)
	tExpSmooth_setDest(&startSmooth, knobs[0] * recordPosition);
 8016cae:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016cb2:	4866      	ldr	r0, [pc, #408]	; (8016e4c <SFXSamplerBPTick+0x26c>)
	samplerRate = displayValues[3] * displayValues[2];
 8016cb4:	edc6 6a00 	vstr	s13, [r6]
	displayValues[4] = knobs[4] * 4000.0f;
 8016cb8:	ed85 7a04 	vstr	s14, [r5, #16]
	displayValues[3] = rate;
 8016cbc:	edc5 7a03 	vstr	s15, [r5, #12]
	tExpSmooth_setDest(&startSmooth, knobs[0] * recordPosition);
 8016cc0:	f00b feca 	bl	8022a58 <tExpSmooth_setDest>
	tExpSmooth_setDest(&lengthSmooth, knobs[1] * recordPosition);
 8016cc4:	ed94 0a7e 	vldr	s0, [r4, #504]	; 0x1f8
 8016cc8:	4861      	ldr	r0, [pc, #388]	; (8016e50 <SFXSamplerBPTick+0x270>)
 8016cca:	ee28 0a00 	vmul.f32	s0, s16, s0
	samplePlayStart = tExpSmooth_tick(&startSmooth);
 8016cce:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8016e64 <SFXSamplerBPTick+0x284>
	tExpSmooth_setDest(&lengthSmooth, knobs[1] * recordPosition);
 8016cd2:	f00b fec1 	bl	8022a58 <tExpSmooth_setDest>
	samplePlayStart = tExpSmooth_tick(&startSmooth);
 8016cd6:	485d      	ldr	r0, [pc, #372]	; (8016e4c <SFXSamplerBPTick+0x26c>)
 8016cd8:	f00b fec8 	bl	8022a6c <tExpSmooth_tick>
 8016cdc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	samplePlayLength = tExpSmooth_tick(&lengthSmooth);
 8016ce0:	485b      	ldr	r0, [pc, #364]	; (8016e50 <SFXSamplerBPTick+0x270>)
 8016ce2:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8016e68 <SFXSamplerBPTick+0x288>
	samplePlayStart = tExpSmooth_tick(&startSmooth);
 8016ce6:	ed89 0a00 	vstr	s0, [r9]
	samplePlayLength = tExpSmooth_tick(&lengthSmooth);
 8016cea:	f00b febf 	bl	8022a6c <tExpSmooth_tick>
	crossfadeLength = displayValues[4];
 8016cee:	edd5 7a04 	vldr	s15, [r5, #16]
	samplePlayLength = tExpSmooth_tick(&lengthSmooth);
 8016cf2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	crossfadeLength = displayValues[4];
 8016cf6:	4c57      	ldr	r4, [pc, #348]	; (8016e54 <SFXSamplerBPTick+0x274>)
 8016cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	tSampler_setStart(&sampler, samplePlayStart);
 8016cfc:	f8d9 1000 	ldr.w	r1, [r9]
 8016d00:	4855      	ldr	r0, [pc, #340]	; (8016e58 <SFXSamplerBPTick+0x278>)
	samplePlayLength = tExpSmooth_tick(&lengthSmooth);
 8016d02:	ed88 0a00 	vstr	s0, [r8]
	crossfadeLength = displayValues[4];
 8016d06:	edc4 7a00 	vstr	s15, [r4]
	tSampler_setStart(&sampler, samplePlayStart);
 8016d0a:	f00f fee1 	bl	8026ad0 <tSampler_setStart>
	tSampler_setLength(&sampler, samplePlayLength);
 8016d0e:	f8d8 1000 	ldr.w	r1, [r8]
 8016d12:	4851      	ldr	r0, [pc, #324]	; (8016e58 <SFXSamplerBPTick+0x278>)
 8016d14:	f010 faea 	bl	80272ec <tSampler_setLength>
	tSampler_setRate(&sampler, samplerRate);
 8016d18:	ed96 0a00 	vldr	s0, [r6]
 8016d1c:	484e      	ldr	r0, [pc, #312]	; (8016e58 <SFXSamplerBPTick+0x278>)
 8016d1e:	f010 fb7f 	bl	8027420 <tSampler_setRate>
	tSampler_setCrossfadeLength(&sampler, crossfadeLength);
 8016d22:	6821      	ldr	r1, [r4, #0]
 8016d24:	484c      	ldr	r0, [pc, #304]	; (8016e58 <SFXSamplerBPTick+0x278>)
 8016d26:	f00f fe61 	bl	80269ec <tSampler_setCrossfadeLength>
	tBuffer_tick(&buff, input[1]);
 8016d2a:	ed97 0a01 	vldr	s0, [r7, #4]
 8016d2e:	4840      	ldr	r0, [pc, #256]	; (8016e30 <SFXSamplerBPTick+0x250>)
 8016d30:	f00f fd5e 	bl	80267f0 <tBuffer_tick>
	sample = tanhf(tSampler_tick(&sampler));
 8016d34:	4848      	ldr	r0, [pc, #288]	; (8016e58 <SFXSamplerBPTick+0x278>)
 8016d36:	f00f fff7 	bl	8026d28 <tSampler_tick>
 8016d3a:	f011 f833 	bl	8027da4 <tanhf>
	input[0] = sample;
 8016d3e:	ed87 0a00 	vstr	s0, [r7]
	input[1] = sample;
 8016d42:	ed87 0a01 	vstr	s0, [r7, #4]
}
 8016d46:	ecbd 8b02 	vpop	{d8}
 8016d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (samplePlaying)
 8016d4e:	4b43      	ldr	r3, [pc, #268]	; (8016e5c <SFXSamplerBPTick+0x27c>)
 8016d50:	781a      	ldrb	r2, [r3, #0]
 8016d52:	2a00      	cmp	r2, #0
 8016d54:	d140      	bne.n	8016dd8 <SFXSamplerBPTick+0x1f8>
			samplePlaying = 1;
 8016d56:	2201      	movs	r2, #1
			tSampler_play(&sampler);
 8016d58:	483f      	ldr	r0, [pc, #252]	; (8016e58 <SFXSamplerBPTick+0x278>)
 8016d5a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8016e60 <SFXSamplerBPTick+0x280>
 8016d5e:	4c35      	ldr	r4, [pc, #212]	; (8016e34 <SFXSamplerBPTick+0x254>)
			samplePlaying = 1;
 8016d60:	701a      	strb	r2, [r3, #0]
 8016d62:	4d35      	ldr	r5, [pc, #212]	; (8016e38 <SFXSamplerBPTick+0x258>)
			tSampler_play(&sampler);
 8016d64:	f00f fe58 	bl	8026a18 <tSampler_play>
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8016d68:	2300      	movs	r3, #0
 8016d6a:	7733      	strb	r3, [r6, #28]
	if (buttonActionsSFX[ButtonB][ActionPress])
 8016d6c:	7e33      	ldrb	r3, [r6, #24]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	f43f af4d 	beq.w	8016c0e <SFXSamplerBPTick+0x2e>
		bpMode = !bpMode;
 8016d74:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8016e6c <SFXSamplerBPTick+0x28c>
		tSampler_setMode(&sampler, bpMode + 1);
 8016d78:	4837      	ldr	r0, [pc, #220]	; (8016e58 <SFXSamplerBPTick+0x278>)
		bpMode = !bpMode;
 8016d7a:	f8d9 3000 	ldr.w	r3, [r9]
 8016d7e:	fab3 f383 	clz	r3, r3
 8016d82:	095b      	lsrs	r3, r3, #5
		tSampler_setMode(&sampler, bpMode + 1);
 8016d84:	1c59      	adds	r1, r3, #1
		bpMode = !bpMode;
 8016d86:	f8c9 3000 	str.w	r3, [r9]
		tSampler_setMode(&sampler, bpMode + 1);
 8016d8a:	f00f fe2b 	bl	80269e4 <tSampler_setMode>
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 8016d8e:	2300      	movs	r3, #0
		setLED_B(bpMode);
 8016d90:	f899 0000 	ldrb.w	r0, [r9]
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 8016d94:	7633      	strb	r3, [r6, #24]
		setLED_B(bpMode);
 8016d96:	f7fc ff9d 	bl	8013cd4 <setLED_B>
	if (buttonActionsSFX[ButtonA][ActionPress])
 8016d9a:	7d33      	ldrb	r3, [r6, #20]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	f43f af3a 	beq.w	8016c16 <SFXSamplerBPTick+0x36>
		tSampler_stop(&sampler);
 8016da2:	482d      	ldr	r0, [pc, #180]	; (8016e58 <SFXSamplerBPTick+0x278>)
 8016da4:	f00f fe88 	bl	8026ab8 <tSampler_stop>
		tBuffer_record(&buff);
 8016da8:	4821      	ldr	r0, [pc, #132]	; (8016e30 <SFXSamplerBPTick+0x250>)
 8016daa:	f00f fd51 	bl	8026850 <tBuffer_record>
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 8016dae:	2300      	movs	r3, #0
		setLED_A(1);
 8016db0:	2001      	movs	r0, #1
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 8016db2:	7533      	strb	r3, [r6, #20]
		setLED_A(1);
 8016db4:	f7fc ff80 	bl	8013cb8 <setLED_A>
	if (buttonActionsSFX[ButtonA][ActionRelease])
 8016db8:	7d73      	ldrb	r3, [r6, #21]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	f43f af2f 	beq.w	8016c1e <SFXSamplerBPTick+0x3e>
		tBuffer_stop(&buff);
 8016dc0:	481b      	ldr	r0, [pc, #108]	; (8016e30 <SFXSamplerBPTick+0x250>)
 8016dc2:	f00f fd4b 	bl	802685c <tBuffer_stop>
		if (samplePlaying) tSampler_play(&sampler);
 8016dc6:	4b25      	ldr	r3, [pc, #148]	; (8016e5c <SFXSamplerBPTick+0x27c>)
 8016dc8:	781b      	ldrb	r3, [r3, #0]
 8016dca:	bb53      	cbnz	r3, 8016e22 <SFXSamplerBPTick+0x242>
		buttonActionsSFX[ButtonA][ActionRelease] = 0;
 8016dcc:	2300      	movs	r3, #0
		setLED_A(0);
 8016dce:	4618      	mov	r0, r3
		buttonActionsSFX[ButtonA][ActionRelease] = 0;
 8016dd0:	7573      	strb	r3, [r6, #21]
		setLED_A(0);
 8016dd2:	f7fc ff71 	bl	8013cb8 <setLED_A>
 8016dd6:	e722      	b.n	8016c1e <SFXSamplerBPTick+0x3e>
			samplePlaying = 0;
 8016dd8:	2200      	movs	r2, #0
			tSampler_stop(&sampler);
 8016dda:	481f      	ldr	r0, [pc, #124]	; (8016e58 <SFXSamplerBPTick+0x278>)
			displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8016ddc:	4c15      	ldr	r4, [pc, #84]	; (8016e34 <SFXSamplerBPTick+0x254>)
			samplePlaying = 0;
 8016dde:	701a      	strb	r2, [r3, #0]
			tSampler_stop(&sampler);
 8016de0:	f00f fe6a 	bl	8026ab8 <tSampler_stop>
			displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8016de4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016de8:	ed94 1a7d 	vldr	s2, [r4, #500]	; 0x1f4
 8016dec:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8016e60 <SFXSamplerBPTick+0x280>
 8016df0:	edd4 0a7e 	vldr	s1, [r4, #504]	; 0x1f8
 8016df4:	ee77 7ac1 	vsub.f32	s15, s15, s2
 8016df8:	ed98 1a00 	vldr	s2, [r8]
 8016dfc:	4d0e      	ldr	r5, [pc, #56]	; (8016e38 <SFXSamplerBPTick+0x258>)
 8016dfe:	ee61 0a20 	vmul.f32	s1, s2, s1
 8016e02:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8016e40 <SFXSamplerBPTick+0x260>
 8016e06:	ee27 1a81 	vmul.f32	s2, s15, s2
 8016e0a:	f00d fab9 	bl	8024380 <LEAF_clip>
 8016e0e:	ed85 0a01 	vstr	s0, [r5, #4]
 8016e12:	e7a9      	b.n	8016d68 <SFXSamplerBPTick+0x188>
		(rate = 1.0f / fabsf(rate-1.0f));
 8016e14:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8016e18:	eeb0 7ae7 	vabs.f32	s14, s15
 8016e1c:	eec8 7a87 	vdiv.f32	s15, s17, s14
 8016e20:	e73a      	b.n	8016c98 <SFXSamplerBPTick+0xb8>
		if (samplePlaying) tSampler_play(&sampler);
 8016e22:	480d      	ldr	r0, [pc, #52]	; (8016e58 <SFXSamplerBPTick+0x278>)
 8016e24:	f00f fdf8 	bl	8026a18 <tSampler_play>
 8016e28:	e7d0      	b.n	8016dcc <SFXSamplerBPTick+0x1ec>
 8016e2a:	bf00      	nop
 8016e2c:	20018714 	.word	0x20018714
 8016e30:	20016ff0 	.word	0x20016ff0
 8016e34:	20016710 	.word	0x20016710
 8016e38:	200187c4 	.word	0x200187c4
 8016e3c:	200194a0 	.word	0x200194a0
 8016e40:	00000000 	.word	0x00000000
 8016e44:	457a0000 	.word	0x457a0000
 8016e48:	200002a8 	.word	0x200002a8
 8016e4c:	200177b8 	.word	0x200177b8
 8016e50:	2001705c 	.word	0x2001705c
 8016e54:	20000564 	.word	0x20000564
 8016e58:	2001728c 	.word	0x2001728c
 8016e5c:	200002a4 	.word	0x200002a4
 8016e60:	200005fc 	.word	0x200005fc
 8016e64:	20000604 	.word	0x20000604
 8016e68:	20000600 	.word	0x20000600
 8016e6c:	20000524 	.word	0x20000524

08016e70 <SFXSamplerBPFree>:
{
 8016e70:	b508      	push	{r3, lr}
	tBuffer_free(&buff);
 8016e72:	4807      	ldr	r0, [pc, #28]	; (8016e90 <SFXSamplerBPFree+0x20>)
 8016e74:	f00f fcb0 	bl	80267d8 <tBuffer_free>
	tSampler_free(&sampler);
 8016e78:	4806      	ldr	r0, [pc, #24]	; (8016e94 <SFXSamplerBPFree+0x24>)
 8016e7a:	f00f fda7 	bl	80269cc <tSampler_free>
	tExpSmooth_free(&startSmooth);
 8016e7e:	4806      	ldr	r0, [pc, #24]	; (8016e98 <SFXSamplerBPFree+0x28>)
 8016e80:	f00b fdd4 	bl	8022a2c <tExpSmooth_free>
	tExpSmooth_free(&lengthSmooth);
 8016e84:	4805      	ldr	r0, [pc, #20]	; (8016e9c <SFXSamplerBPFree+0x2c>)
}
 8016e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tExpSmooth_free(&lengthSmooth);
 8016e8a:	f00b bdcf 	b.w	8022a2c <tExpSmooth_free>
 8016e8e:	bf00      	nop
 8016e90:	20016ff0 	.word	0x20016ff0
 8016e94:	2001728c 	.word	0x2001728c
 8016e98:	200177b8 	.word	0x200177b8
 8016e9c:	2001705c 	.word	0x2001705c

08016ea0 <SFXSamplerKAlloc>:
{
 8016ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ea4:	4b41      	ldr	r3, [pc, #260]	; (8016fac <SFXSamplerKAlloc+0x10c>)
	leaf.clearOnAllocation = 0; //needs this in case the box loads on this one first
 8016ea6:	2200      	movs	r2, #0
 8016ea8:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8016ff8 <SFXSamplerKAlloc+0x158>
	currentSamplerKeyGlobal = 60 - LOWEST_SAMPLER_KEY;
 8016eac:	2018      	movs	r0, #24
 8016eae:	4940      	ldr	r1, [pc, #256]	; (8016fb0 <SFXSamplerKAlloc+0x110>)
 8016eb0:	4614      	mov	r4, r2
 8016eb2:	f8df a148 	ldr.w	sl, [pc, #328]	; 8016ffc <SFXSamplerKAlloc+0x15c>
 8016eb6:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8017000 <SFXSamplerKAlloc+0x160>
 8016eba:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8017004 <SFXSamplerKAlloc+0x164>
		tSampler_initToPool(&keySampler[i], &keyBuff[i], &smallPool);
 8016ebe:	4f3d      	ldr	r7, [pc, #244]	; (8016fb4 <SFXSamplerKAlloc+0x114>)
	leaf.clearOnAllocation = 0; //needs this in case the box loads on this one first
 8016ec0:	f8cb 2014 	str.w	r2, [fp, #20]
{
 8016ec4:	ed2d 8b04 	vpush	{d8-d9}
 8016ec8:	b085      	sub	sp, #20
		tExpSmooth_initToPool(&kSamplerGains[i], 0.0f, 0.04f, &smallPool);
 8016eca:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 8016fb8 <SFXSamplerKAlloc+0x118>
		samplePlayStarts[i] = 0;
 8016ece:	ed9f 8a3b 	vldr	s16, [pc, #236]	; 8016fbc <SFXSamplerKAlloc+0x11c>
 8016ed2:	9303      	str	r3, [sp, #12]
 8016ed4:	4b3a      	ldr	r3, [pc, #232]	; (8016fc0 <SFXSamplerKAlloc+0x120>)
		crossfadeLengths[i] = 1000;
 8016ed6:	eddf 8a3b 	vldr	s17, [pc, #236]	; 8016fc4 <SFXSamplerKAlloc+0x124>
 8016eda:	9300      	str	r3, [sp, #0]
 8016edc:	4b3a      	ldr	r3, [pc, #232]	; (8016fc8 <SFXSamplerKAlloc+0x128>)
	currentSamplerKeyGlobal = 60 - LOWEST_SAMPLER_KEY;
 8016ede:	6008      	str	r0, [r1, #0]
 8016ee0:	9302      	str	r3, [sp, #8]
 8016ee2:	4b3a      	ldr	r3, [pc, #232]	; (8016fcc <SFXSamplerKAlloc+0x12c>)
 8016ee4:	9301      	str	r3, [sp, #4]
		tBuffer_initToPool(&keyBuff[i], leaf.sampleRate * 3.5f, &largePool);
 8016ee6:	eef0 7a0c 	vmov.f32	s15, #12	; 0x40600000  3.5
 8016eea:	ed9b 7a00 	vldr	s14, [fp]
 8016eee:	4b38      	ldr	r3, [pc, #224]	; (8016fd0 <SFXSamplerKAlloc+0x130>)
 8016ef0:	4a38      	ldr	r2, [pc, #224]	; (8016fd4 <SFXSamplerKAlloc+0x134>)
 8016ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ef6:	191d      	adds	r5, r3, r4
 8016ef8:	4b37      	ldr	r3, [pc, #220]	; (8016fd8 <SFXSamplerKAlloc+0x138>)
 8016efa:	4628      	mov	r0, r5
 8016efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f00:	191e      	adds	r6, r3, r4
 8016f02:	ee17 1a90 	vmov	r1, s15
 8016f06:	f00f fc4f 	bl	80267a8 <tBuffer_initToPool>
		tBuffer_setRecordMode(&keyBuff[i], RecordOneShot);
 8016f0a:	4628      	mov	r0, r5
 8016f0c:	2100      	movs	r1, #0
 8016f0e:	f00f fcb1 	bl	8026874 <tBuffer_setRecordMode>
		tSampler_initToPool(&keySampler[i], &keyBuff[i], &smallPool);
 8016f12:	463a      	mov	r2, r7
 8016f14:	4629      	mov	r1, r5
 8016f16:	4630      	mov	r0, r6
 8016f18:	f00f fd0c 	bl	8026934 <tSampler_initToPool>
		tSampler_setMode(&keySampler[i], PlayLoop);
 8016f1c:	4630      	mov	r0, r6
 8016f1e:	2101      	movs	r1, #1
 8016f20:	f00f fd60 	bl	80269e4 <tSampler_setMode>
		tExpSmooth_initToPool(&kSamplerGains[i], 0.0f, 0.04f, &smallPool);
 8016f24:	4b2d      	ldr	r3, [pc, #180]	; (8016fdc <SFXSamplerKAlloc+0x13c>)
 8016f26:	4639      	mov	r1, r7
 8016f28:	eef0 0a49 	vmov.f32	s1, s18
 8016f2c:	1918      	adds	r0, r3, r4
		samplePlayStarts[i] = 0;
 8016f2e:	9b03      	ldr	r3, [sp, #12]
		tExpSmooth_initToPool(&kSamplerGains[i], 0.0f, 0.04f, &smallPool);
 8016f30:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8016fbc <SFXSamplerKAlloc+0x11c>
		samplePlayStarts[i] = 0;
 8016f34:	eca3 8a01 	vstmia	r3!, {s16}
 8016f38:	9303      	str	r3, [sp, #12]
		samplePlayLengths[i] = 0;
 8016f3a:	9b00      	ldr	r3, [sp, #0]
 8016f3c:	eca3 8a01 	vstmia	r3!, {s16}
 8016f40:	9300      	str	r3, [sp, #0]
		detectedAttackPos[i] = 0;
 8016f42:	9b02      	ldr	r3, [sp, #8]
 8016f44:	461a      	mov	r2, r3
 8016f46:	2300      	movs	r3, #0
 8016f48:	f842 3f04 	str.w	r3, [r2, #4]!
		crossfadeLengths[i] = 1000;
 8016f4c:	9b01      	ldr	r3, [sp, #4]
		detectedAttackPos[i] = 0;
 8016f4e:	9202      	str	r2, [sp, #8]
		crossfadeLengths[i] = 1000;
 8016f50:	ece3 8a01 	vstmia	r3!, {s17}
 8016f54:	9301      	str	r3, [sp, #4]
		samplerKeyHeld[i] = 0;
 8016f56:	f04f 0300 	mov.w	r3, #0
 8016f5a:	f80a 3f01 	strb.w	r3, [sl, #1]!
		tExpSmooth_initToPool(&kSamplerGains[i], 0.0f, 0.04f, &smallPool);
 8016f5e:	f00b fd3f 	bl	80229e0 <tExpSmooth_initToPool>
		loopOns[i] = 1;
 8016f62:	2101      	movs	r1, #1
 8016f64:	4b1e      	ldr	r3, [pc, #120]	; (8016fe0 <SFXSamplerKAlloc+0x140>)
		sampleRates[i] = 1.0f;
 8016f66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
		loopOns[i] = 1;
 8016f6a:	5119      	str	r1, [r3, r4]
 8016f6c:	3404      	adds	r4, #4
		sampleRates[i] = 1.0f;
 8016f6e:	f849 2b04 	str.w	r2, [r9], #4
	for (int i = 0; i < NUM_SAMPLER_KEYS; i++)
 8016f72:	2cc4      	cmp	r4, #196	; 0xc4
		sampleRatesMult[i] = 1.0f;
 8016f74:	f848 2b04 	str.w	r2, [r8], #4
	for (int i = 0; i < NUM_SAMPLER_KEYS; i++)
 8016f78:	d1b5      	bne.n	8016ee6 <SFXSamplerKAlloc+0x46>
	tSimplePoly_setNumVoices(&poly, NUM_SAMPLER_VOICES);
 8016f7a:	2106      	movs	r1, #6
 8016f7c:	4819      	ldr	r0, [pc, #100]	; (8016fe4 <SFXSamplerKAlloc+0x144>)
 8016f7e:	f00e f85f 	bl	8025040 <tSimplePoly_setNumVoices>
	setLED_B(controlAllKeys);
 8016f82:	4919      	ldr	r1, [pc, #100]	; (8016fe8 <SFXSamplerKAlloc+0x148>)
		waitingForDeactivation[i] = -1;
 8016f84:	4b19      	ldr	r3, [pc, #100]	; (8016fec <SFXSamplerKAlloc+0x14c>)
 8016f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	setLED_B(controlAllKeys);
 8016f8a:	7808      	ldrb	r0, [r1, #0]
		waitingForDeactivation[i] = -1;
 8016f8c:	e9c3 2200 	strd	r2, r2, [r3]
 8016f90:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8016f94:	e9c3 2204 	strd	r2, r2, [r3, #16]
	setLED_B(controlAllKeys);
 8016f98:	f7fc fe9c 	bl	8013cd4 <setLED_B>
	samp_thresh = 0.0002f;
 8016f9c:	4b14      	ldr	r3, [pc, #80]	; (8016ff0 <SFXSamplerKAlloc+0x150>)
 8016f9e:	4a15      	ldr	r2, [pc, #84]	; (8016ff4 <SFXSamplerKAlloc+0x154>)
 8016fa0:	601a      	str	r2, [r3, #0]
}
 8016fa2:	b005      	add	sp, #20
 8016fa4:	ecbd 8b04 	vpop	{d8-d9}
 8016fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fac:	2001737c 	.word	0x2001737c
 8016fb0:	20000220 	.word	0x20000220
 8016fb4:	20014b2c 	.word	0x20014b2c
 8016fb8:	3d23d70a 	.word	0x3d23d70a
 8016fbc:	00000000 	.word	0x00000000
 8016fc0:	20016280 	.word	0x20016280
 8016fc4:	447a0000 	.word	0x447a0000
 8016fc8:	2001839c 	.word	0x2001839c
 8016fcc:	200177bc 	.word	0x200177bc
 8016fd0:	20018198 	.word	0x20018198
 8016fd4:	20014254 	.word	0x20014254
 8016fd8:	20016f2c 	.word	0x20016f2c
 8016fdc:	2001608c 	.word	0x2001608c
 8016fe0:	2001664c 	.word	0x2001664c
 8016fe4:	20017554 	.word	0x20017554
 8016fe8:	20000560 	.word	0x20000560
 8016fec:	20017648 	.word	0x20017648
 8016ff0:	200005f4 	.word	0x200005f4
 8016ff4:	3951b717 	.word	0x3951b717
 8016ff8:	200194a0 	.word	0x200194a0
 8016ffc:	2001776b 	.word	0x2001776b
 8017000:	20016368 	.word	0x20016368
 8017004:	20017884 	.word	0x20017884

08017008 <SFXSamplerKFrame>:
	int currentSamplerKey = currentSamplerKeyGlobal;
 8017008:	4aa5      	ldr	r2, [pc, #660]	; (80172a0 <SFXSamplerKFrame+0x298>)
	if (samplerKeyHeld[currentSamplerKey])
 801700a:	4ba6      	ldr	r3, [pc, #664]	; (80172a4 <SFXSamplerKFrame+0x29c>)
{
 801700c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017010:	ed2d 8b04 	vpush	{d8-d9}
	int currentSamplerKey = currentSamplerKeyGlobal;
 8017014:	6814      	ldr	r4, [r2, #0]
{
 8017016:	b083      	sub	sp, #12
	if (samplerKeyHeld[currentSamplerKey])
 8017018:	5d1b      	ldrb	r3, [r3, r4]
 801701a:	2b00      	cmp	r3, #0
 801701c:	f040 8101 	bne.w	8017222 <SFXSamplerKFrame+0x21a>
	if (buttonActionsSFX[ButtonA][ActionPress])
 8017020:	4da1      	ldr	r5, [pc, #644]	; (80172a8 <SFXSamplerKFrame+0x2a0>)
 8017022:	7d2b      	ldrb	r3, [r5, #20]
 8017024:	b163      	cbz	r3, 8017040 <SFXSamplerKFrame+0x38>
		tBuffer_setRecordPosition(&keyBuff[currentSamplerKey],0);
 8017026:	48a1      	ldr	r0, [pc, #644]	; (80172ac <SFXSamplerKFrame+0x2a4>)
 8017028:	2100      	movs	r1, #0
 801702a:	eb00 0684 	add.w	r6, r0, r4, lsl #2
 801702e:	4630      	mov	r0, r6
 8017030:	f00f fc1c 	bl	802686c <tBuffer_setRecordPosition>
		tBuffer_setRecordedLength(&keyBuff[currentSamplerKey],0);
 8017034:	4630      	mov	r0, r6
 8017036:	2100      	movs	r1, #0
 8017038:	f00f fc24 	bl	8026884 <tBuffer_setRecordedLength>
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 801703c:	2300      	movs	r3, #0
 801703e:	752b      	strb	r3, [r5, #20]
	if (buttonActionsSFX[ButtonB][ActionPress])
 8017040:	7e2b      	ldrb	r3, [r5, #24]
 8017042:	b153      	cbz	r3, 801705a <SFXSamplerKFrame+0x52>
		controlAllKeys = !controlAllKeys;
 8017044:	4a9a      	ldr	r2, [pc, #616]	; (80172b0 <SFXSamplerKFrame+0x2a8>)
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 8017046:	2100      	movs	r1, #0
		controlAllKeys = !controlAllKeys;
 8017048:	6813      	ldr	r3, [r2, #0]
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 801704a:	7629      	strb	r1, [r5, #24]
		controlAllKeys = !controlAllKeys;
 801704c:	fab3 f383 	clz	r3, r3
 8017050:	095b      	lsrs	r3, r3, #5
		setLED_B(controlAllKeys);
 8017052:	4618      	mov	r0, r3
		controlAllKeys = !controlAllKeys;
 8017054:	6013      	str	r3, [r2, #0]
		setLED_B(controlAllKeys);
 8017056:	f7fc fe3d 	bl	8013cd4 <setLED_B>
	if (buttonActionsSFX[ButtonC][ActionPress])
 801705a:	7f2b      	ldrb	r3, [r5, #28]
 801705c:	2b00      	cmp	r3, #0
 801705e:	f000 80c2 	beq.w	80171e6 <SFXSamplerKFrame+0x1de>
		if (!controlAllKeys)
 8017062:	4a93      	ldr	r2, [pc, #588]	; (80172b0 <SFXSamplerKFrame+0x2a8>)
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8017064:	2300      	movs	r3, #0
		if (!controlAllKeys)
 8017066:	f8d2 9000 	ldr.w	r9, [r2]
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 801706a:	772b      	strb	r3, [r5, #28]
		if (!controlAllKeys)
 801706c:	f1b9 0f00 	cmp.w	r9, #0
 8017070:	d053      	beq.n	801711a <SFXSamplerKFrame+0x112>
 8017072:	2306      	movs	r3, #6
 8017074:	f8df 9268 	ldr.w	r9, [pc, #616]	; 80172e0 <SFXSamplerKFrame+0x2d8>
							if ((currentPower > samp_thresh) && (currentPower > (previousPower + 0.0005f)))
 8017078:	eddf 8a8e 	vldr	s17, [pc, #568]	; 80172b4 <SFXSamplerKFrame+0x2ac>
						float previousPower = 0.0f;
 801707c:	ed9f 9a8e 	vldr	s18, [pc, #568]	; 80172b8 <SFXSamplerKFrame+0x2b0>
 8017080:	9301      	str	r3, [sp, #4]
 8017082:	4f8a      	ldr	r7, [pc, #552]	; (80172ac <SFXSamplerKFrame+0x2a4>)
 8017084:	4e8d      	ldr	r6, [pc, #564]	; (80172bc <SFXSamplerKFrame+0x2b4>)
 8017086:	f8df 8238 	ldr.w	r8, [pc, #568]	; 80172c0 <SFXSamplerKFrame+0x2b8>
 801708a:	e01c      	b.n	80170c6 <SFXSamplerKFrame+0xbe>
							if ((currentPower > samp_thresh) && (currentPower > (previousPower + 0.0005f)))
 801708c:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8017090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017094:	d53b      	bpl.n	801710e <SFXSamplerKFrame+0x106>
								int thePos = (i + detectedAttackPos[key] - 480) % buffLength;
 8017096:	6833      	ldr	r3, [r6, #0]
 8017098:	441d      	add	r5, r3
 801709a:	f5a5 75f0 	sub.w	r5, r5, #480	; 0x1e0
 801709e:	fb95 f3f4 	sdiv	r3, r5, r4
 80170a2:	fb04 5513 	mls	r5, r4, r3, r5
 80170a6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
								samplePlayStarts[key] = thePos;
 80170aa:	ee07 5a90 	vmov	s15, r5
								detectedAttackPos[key] = thePos;
 80170ae:	6035      	str	r5, [r6, #0]
								samplePlayStarts[key] = thePos;
 80170b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80170b4:	edc8 7a00 	vstr	s15, [r8]
 80170b8:	3604      	adds	r6, #4
 80170ba:	3704      	adds	r7, #4
 80170bc:	f108 0804 	add.w	r8, r8, #4
				for (int key = 0; key < NUM_SAMPLER_KEYS; key++)
 80170c0:	45b1      	cmp	r9, r6
 80170c2:	f000 80a4 	beq.w	801720e <SFXSamplerKFrame+0x206>
					int buffLength = tBuffer_getRecordedLength(&keyBuff[key]);
 80170c6:	4638      	mov	r0, r7
 80170c8:	f00f fbd8 	bl	802687c <tBuffer_getRecordedLength>
					if (buffLength > 0)
 80170cc:	1e04      	subs	r4, r0, #0
 80170ce:	ddf3      	ble.n	80170b8 <SFXSamplerKFrame+0xb0>
						if (detectedAttackPos[key] > 0)
 80170d0:	6833      	ldr	r3, [r6, #0]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	f300 808c 	bgt.w	80171f0 <SFXSamplerKFrame+0x1e8>
						float previousPower = 0.0f;
 80170d8:	eeb0 0a49 	vmov.f32	s0, s18
							if ((currentPower > samp_thresh) && (currentPower > (previousPower + 0.0005f)))
 80170dc:	ee30 8a28 	vadd.f32	s16, s0, s17
{
 80170e0:	f04f 0b01 	mov.w	fp, #1
 80170e4:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 80172e4 <SFXSamplerKFrame+0x2dc>
 80170e8:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
							float testSample = tBuffer_get(&keyBuff[key], (i + detectedAttackPos[key]) % buffLength);
 80170ec:	4638      	mov	r0, r7
 80170ee:	442b      	add	r3, r5
 80170f0:	fb93 f1f4 	sdiv	r1, r3, r4
 80170f4:	fb04 3111 	mls	r1, r4, r1, r3
 80170f8:	f00f fb98 	bl	802682c <tBuffer_get>
							currentPower = testSample*testSample;
 80170fc:	ee20 0a00 	vmul.f32	s0, s0, s0
							if ((currentPower > samp_thresh) && (currentPower > (previousPower + 0.0005f)))
 8017100:	edda 7a00 	vldr	s15, [sl]
 8017104:	eef4 7ac0 	vcmpe.f32	s15, s0
 8017108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801710c:	d4be      	bmi.n	801708c <SFXSamplerKFrame+0x84>
							if (i >= buffLength)
 801710e:	455c      	cmp	r4, fp
 8017110:	ddd2      	ble.n	80170b8 <SFXSamplerKFrame+0xb0>
 8017112:	f10b 0b01 	add.w	fp, fp, #1
 8017116:	6833      	ldr	r3, [r6, #0]
 8017118:	e7e6      	b.n	80170e8 <SFXSamplerKFrame+0xe0>
			int buffLength = tBuffer_getRecordedLength(&keyBuff[currentSamplerKey]);
 801711a:	ea4f 0884 	mov.w	r8, r4, lsl #2
 801711e:	4f63      	ldr	r7, [pc, #396]	; (80172ac <SFXSamplerKFrame+0x2a4>)
			if (detectedAttackPos[currentSamplerKey] > 0)
 8017120:	4e66      	ldr	r6, [pc, #408]	; (80172bc <SFXSamplerKFrame+0x2b4>)
			int buffLength = tBuffer_getRecordedLength(&keyBuff[currentSamplerKey]);
 8017122:	4447      	add	r7, r8
 8017124:	4638      	mov	r0, r7
 8017126:	f00f fba9 	bl	802687c <tBuffer_getRecordedLength>
			if (detectedAttackPos[currentSamplerKey] > 0)
 801712a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
			int buffLength = tBuffer_getRecordedLength(&keyBuff[currentSamplerKey]);
 801712e:	4605      	mov	r5, r0
			if (detectedAttackPos[currentSamplerKey] > 0)
 8017130:	2b00      	cmp	r3, #0
 8017132:	f300 80a4 	bgt.w	801727e <SFXSamplerKFrame+0x276>
			float previousPower = 0.0f;
 8017136:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80172b8 <SFXSamplerKFrame+0x2b0>
				if ((currentPower > samp_thresh) && (currentPower > (previousPower + 0.0005f)))
 801713a:	ed9f 8a5e 	vldr	s16, [pc, #376]	; 80172b4 <SFXSamplerKFrame+0x2ac>
 801713e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 80172e4 <SFXSamplerKFrame+0x2dc>
 8017142:	ee30 8a08 	vadd.f32	s16, s0, s16
				float testSample = tBuffer_get(&keyBuff[currentSamplerKey], (i + detectedAttackPos[currentSamplerKey]) % buffLength);
 8017146:	444b      	add	r3, r9
 8017148:	4638      	mov	r0, r7
 801714a:	f109 0b01 	add.w	fp, r9, #1
 801714e:	fb93 f1f5 	sdiv	r1, r3, r5
 8017152:	fb05 3111 	mls	r1, r5, r1, r3
 8017156:	f00f fb69 	bl	802682c <tBuffer_get>
				currentPower = testSample*testSample;
 801715a:	ee20 0a00 	vmul.f32	s0, s0, s0
				if ((currentPower > samp_thresh) && (currentPower > (previousPower + 0.0005f)))
 801715e:	edda 7a00 	vldr	s15, [sl]
 8017162:	eef4 7ac0 	vcmpe.f32	s15, s0
 8017166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801716a:	f140 8082 	bpl.w	8017272 <SFXSamplerKFrame+0x26a>
 801716e:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8017172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017176:	d57c      	bpl.n	8017272 <SFXSamplerKFrame+0x26a>
					int thePos = (i + detectedAttackPos[currentSamplerKey] - 480) % buffLength;
 8017178:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
					OLEDclearLine(SecondLine);
 801717c:	2001      	movs	r0, #1
					samplePlayStarts[currentSamplerKey] = thePos;
 801717e:	4a50      	ldr	r2, [pc, #320]	; (80172c0 <SFXSamplerKFrame+0x2b8>)
					int thePos = (i + detectedAttackPos[currentSamplerKey] - 480) % buffLength;
 8017180:	444b      	add	r3, r9
					samplePlayStarts[currentSamplerKey] = thePos;
 8017182:	4490      	add	r8, r2
					int thePos = (i + detectedAttackPos[currentSamplerKey] - 480) % buffLength;
 8017184:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8017188:	fb92 f3f5 	sdiv	r3, r2, r5
 801718c:	fb05 2313 	mls	r3, r5, r3, r2
 8017190:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
					samplePlayStarts[currentSamplerKey] = thePos;
 8017194:	ee07 3a90 	vmov	s15, r3
					detectedAttackPos[currentSamplerKey] = thePos;
 8017198:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
					samplePlayStarts[currentSamplerKey] = thePos;
 801719c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171a0:	edc8 7a00 	vstr	s15, [r8]
					OLEDclearLine(SecondLine);
 80171a4:	f7fc ffb0 	bl	8014108 <OLEDclearLine>
					OLEDwriteString("ATKDETECT ", 10, 0, SecondLine);
 80171a8:	2200      	movs	r2, #0
 80171aa:	210a      	movs	r1, #10
 80171ac:	2301      	movs	r3, #1
 80171ae:	4845      	ldr	r0, [pc, #276]	; (80172c4 <SFXSamplerKFrame+0x2bc>)
 80171b0:	f7fc ffbe 	bl	8014130 <OLEDwriteString>
					OLEDwriteFloat((samplePlayStarts[currentSamplerKey] / (float)buffLength) * (buffLength * leaf.invSampleRate), OLEDgetCursor(), SecondLine);
 80171b4:	ee07 5a90 	vmov	s15, r5
 80171b8:	ed98 7a00 	vldr	s14, [r8]
 80171bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171c0:	4b41      	ldr	r3, [pc, #260]	; (80172c8 <SFXSamplerKFrame+0x2c0>)
 80171c2:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80171c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80171ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80171ce:	ee28 8a27 	vmul.f32	s16, s16, s15
 80171d2:	f7fd fa29 	bl	8014628 <OLEDgetCursor>
 80171d6:	2101      	movs	r1, #1
 80171d8:	b2c0      	uxtb	r0, r0
 80171da:	eeb0 0a48 	vmov.f32	s0, s16
 80171de:	f7fd f865 	bl	80142ac <OLEDwriteFloat>
				if (i >= buffLength)
 80171e2:	455d      	cmp	r5, fp
 80171e4:	dd34      	ble.n	8017250 <SFXSamplerKFrame+0x248>
}
 80171e6:	b003      	add	sp, #12
 80171e8:	ecbd 8b04 	vpop	{d8-d9}
 80171ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							previousPower = tBuffer_get(&keyBuff[key], (detectedAttackPos[key] -1) % buffLength);
 80171f0:	f241 22bf 	movw	r2, #4799	; 0x12bf
							detectedAttackPos[key] += 4800;
 80171f4:	f503 5196 	add.w	r1, r3, #4800	; 0x12c0
							previousPower = tBuffer_get(&keyBuff[key], (detectedAttackPos[key] -1) % buffLength);
 80171f8:	4638      	mov	r0, r7
 80171fa:	441a      	add	r2, r3
							detectedAttackPos[key] += 4800;
 80171fc:	6031      	str	r1, [r6, #0]
							previousPower = tBuffer_get(&keyBuff[key], (detectedAttackPos[key] -1) % buffLength);
 80171fe:	fb92 f1f4 	sdiv	r1, r2, r4
 8017202:	fb04 2111 	mls	r1, r4, r1, r2
 8017206:	f00f fb11 	bl	802682c <tBuffer_get>
 801720a:	6833      	ldr	r3, [r6, #0]
 801720c:	e766      	b.n	80170dc <SFXSamplerKFrame+0xd4>
			for (int i = 0; i < NUM_SAMPLER_VOICES; i++)
 801720e:	9b01      	ldr	r3, [sp, #4]
 8017210:	3b01      	subs	r3, #1
 8017212:	9301      	str	r3, [sp, #4]
 8017214:	f47f af35 	bne.w	8017082 <SFXSamplerKFrame+0x7a>
}
 8017218:	b003      	add	sp, #12
 801721a:	ecbd 8b04 	vpop	{d8-d9}
 801721e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((tBuffer_isActive(&keyBuff[currentSamplerKey])) || (currentSamplerKey != prevSamplerKey)) //only write if recording
 8017222:	4822      	ldr	r0, [pc, #136]	; (80172ac <SFXSamplerKFrame+0x2a4>)
 8017224:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8017228:	f00f fb30 	bl	802688c <tBuffer_isActive>
 801722c:	4b27      	ldr	r3, [pc, #156]	; (80172cc <SFXSamplerKFrame+0x2c4>)
 801722e:	b158      	cbz	r0, 8017248 <SFXSamplerKFrame+0x240>
			buttonActionsUI[ExtraMessage][ActionHoldContinuous] = 1;
 8017230:	4a27      	ldr	r2, [pc, #156]	; (80172d0 <SFXSamplerKFrame+0x2c8>)
 8017232:	2101      	movs	r1, #1
			writeButtonFlag = ExtraMessage;
 8017234:	4827      	ldr	r0, [pc, #156]	; (80172d4 <SFXSamplerKFrame+0x2cc>)
 8017236:	250a      	movs	r5, #10
			buttonActionsUI[ExtraMessage][ActionHoldContinuous] = 1;
 8017238:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
			writeActionFlag = ActionHoldContinuous;
 801723c:	2103      	movs	r1, #3
 801723e:	4a26      	ldr	r2, [pc, #152]	; (80172d8 <SFXSamplerKFrame+0x2d0>)
			writeButtonFlag = ExtraMessage;
 8017240:	7005      	strb	r5, [r0, #0]
			writeActionFlag = ActionHoldContinuous;
 8017242:	7011      	strb	r1, [r2, #0]
		prevSamplerKey = currentSamplerKey;
 8017244:	601c      	str	r4, [r3, #0]
 8017246:	e6eb      	b.n	8017020 <SFXSamplerKFrame+0x18>
		if ((tBuffer_isActive(&keyBuff[currentSamplerKey])) || (currentSamplerKey != prevSamplerKey)) //only write if recording
 8017248:	681a      	ldr	r2, [r3, #0]
 801724a:	42a2      	cmp	r2, r4
 801724c:	d1f0      	bne.n	8017230 <SFXSamplerKFrame+0x228>
 801724e:	e7f9      	b.n	8017244 <SFXSamplerKFrame+0x23c>
					detectedAttackPos[currentSamplerKey] = 0;
 8017250:	2500      	movs	r5, #0
					OLEDclearLine(SecondLine);
 8017252:	2001      	movs	r0, #1
					detectedAttackPos[currentSamplerKey] = 0;
 8017254:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
					OLEDclearLine(SecondLine);
 8017258:	f7fc ff56 	bl	8014108 <OLEDclearLine>
					OLEDwriteString("NO ATK FOUND ", 10, 0, SecondLine);
 801725c:	462a      	mov	r2, r5
 801725e:	2301      	movs	r3, #1
 8017260:	210a      	movs	r1, #10
 8017262:	481e      	ldr	r0, [pc, #120]	; (80172dc <SFXSamplerKFrame+0x2d4>)
}
 8017264:	b003      	add	sp, #12
 8017266:	ecbd 8b04 	vpop	{d8-d9}
 801726a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					OLEDwriteString("NO ATK FOUND ", 10, 0, SecondLine);
 801726e:	f7fc bf5f 	b.w	8014130 <OLEDwriteString>
				if (i >= buffLength)
 8017272:	455d      	cmp	r5, fp
 8017274:	ddec      	ble.n	8017250 <SFXSamplerKFrame+0x248>
{
 8017276:	46d9      	mov	r9, fp
 8017278:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 801727c:	e763      	b.n	8017146 <SFXSamplerKFrame+0x13e>
				previousPower = tBuffer_get(&keyBuff[currentSamplerKey], (detectedAttackPos[currentSamplerKey] -1) % buffLength);
 801727e:	f241 22bf 	movw	r2, #4799	; 0x12bf
				detectedAttackPos[currentSamplerKey] += 4800;
 8017282:	f503 5196 	add.w	r1, r3, #4800	; 0x12c0
				previousPower = tBuffer_get(&keyBuff[currentSamplerKey], (detectedAttackPos[currentSamplerKey] -1) % buffLength);
 8017286:	4638      	mov	r0, r7
 8017288:	441a      	add	r2, r3
				detectedAttackPos[currentSamplerKey] += 4800;
 801728a:	f846 1024 	str.w	r1, [r6, r4, lsl #2]
				previousPower = tBuffer_get(&keyBuff[currentSamplerKey], (detectedAttackPos[currentSamplerKey] -1) % buffLength);
 801728e:	fb92 f1f5 	sdiv	r1, r2, r5
 8017292:	fb05 2111 	mls	r1, r5, r1, r2
 8017296:	f00f fac9 	bl	802682c <tBuffer_get>
 801729a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 801729e:	e74c      	b.n	801713a <SFXSamplerKFrame+0x132>
 80172a0:	20000220 	.word	0x20000220
 80172a4:	2001776c 	.word	0x2001776c
 80172a8:	20018714 	.word	0x20018714
 80172ac:	20018198 	.word	0x20018198
 80172b0:	20000560 	.word	0x20000560
 80172b4:	3a03126f 	.word	0x3a03126f
 80172b8:	00000000 	.word	0x00000000
 80172bc:	200183a0 	.word	0x200183a0
 80172c0:	2001737c 	.word	0x2001737c
 80172c4:	0802b2f4 	.word	0x0802b2f4
 80172c8:	200194a0 	.word	0x200194a0
 80172cc:	2000026c 	.word	0x2000026c
 80172d0:	20018854 	.word	0x20018854
 80172d4:	200002ce 	.word	0x200002ce
 80172d8:	200002cd 	.word	0x200002cd
 80172dc:	0802b2e4 	.word	0x0802b2e4
 80172e0:	20018464 	.word	0x20018464
 80172e4:	200005f4 	.word	0x200005f4

080172e8 <SFXSamplerKTick>:
	if (!controlAllKeys)
 80172e8:	4baf      	ldr	r3, [pc, #700]	; (80175a8 <SFXSamplerKTick+0x2c0>)
{
 80172ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172ee:	ed2d 8b04 	vpush	{d8-d9}
	if (!controlAllKeys)
 80172f2:	681b      	ldr	r3, [r3, #0]
{
 80172f4:	b087      	sub	sp, #28
 80172f6:	4682      	mov	sl, r0
	if (!controlAllKeys)
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	f000 817d 	beq.w	80175f8 <SFXSamplerKTick+0x310>
		for (int i = 0; i < NUM_SAMPLER_VOICES; i++)
 80172fe:	2700      	movs	r7, #0
 8017300:	4caa      	ldr	r4, [pc, #680]	; (80175ac <SFXSamplerKTick+0x2c4>)
 8017302:	4dab      	ldr	r5, [pc, #684]	; (80175b0 <SFXSamplerKTick+0x2c8>)
 8017304:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 80175e4 <SFXSamplerKTick+0x2fc>
			displayValues[1] = LEAF_clip(0.0f, knobs[1], (1.0f - knobs[0]));
 8017308:	eddf 8aaa 	vldr	s17, [pc, #680]	; 80175b4 <SFXSamplerKTick+0x2cc>
			displayValues[5] = knobs[5] * 4000.0f;
 801730c:	ed9f 8aaa 	vldr	s16, [pc, #680]	; 80175b8 <SFXSamplerKTick+0x2d0>
			if (tSimplePoly_isOn(&poly, i) > 0)
 8017310:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 80175f0 <SFXSamplerKTick+0x308>
 8017314:	9000      	str	r0, [sp, #0]
 8017316:	e003      	b.n	8017320 <SFXSamplerKTick+0x38>
		for (int i = 0; i < NUM_SAMPLER_VOICES; i++)
 8017318:	3701      	adds	r7, #1
 801731a:	2f06      	cmp	r7, #6
 801731c:	f000 80f5 	beq.w	801750a <SFXSamplerKTick+0x222>
			displayValues[1] = LEAF_clip(0.0f, knobs[1], (1.0f - knobs[0]));
 8017320:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
			displayValues[0] = knobs[0];
 8017324:	ed94 1a96 	vldr	s2, [r4, #600]	; 0x258
			displayValues[1] = LEAF_clip(0.0f, knobs[1], (1.0f - knobs[0]));
 8017328:	edd4 0a97 	vldr	s1, [r4, #604]	; 0x25c
 801732c:	eeb0 0a68 	vmov.f32	s0, s17
			displayValues[0] = knobs[0];
 8017330:	ed85 1a00 	vstr	s2, [r5]
			displayValues[1] = LEAF_clip(0.0f, knobs[1], (1.0f - knobs[0]));
 8017334:	ee39 1a41 	vsub.f32	s2, s18, s2
 8017338:	f00d f822 	bl	8024380 <LEAF_clip>
			displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 801733c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017340:	edd4 5a98 	vldr	s11, [r4, #608]	; 0x260
			float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8017344:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8017348:	edd4 6a99 	vldr	s13, [r4, #612]	; 0x264
			displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 801734c:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8017350:	ee75 5ae7 	vsub.f32	s11, s11, s15
			displayValues[1] = LEAF_clip(0.0f, knobs[1], (1.0f - knobs[0]));
 8017354:	ed85 0a01 	vstr	s0, [r5, #4]
			float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8017358:	ee76 7ae7 	vsub.f32	s15, s13, s15
			displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 801735c:	ee25 6a86 	vmul.f32	s12, s11, s12
			float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8017360:	ee67 7a87 	vmul.f32	s15, s15, s14
			displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 8017364:	ed85 6a02 	vstr	s12, [r5, #8]
			float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8017368:	fef8 7a67 	vrinta.f32	s15, s15
			if (rate < 0.0f)
 801736c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017374:	f100 8107 	bmi.w	8017586 <SFXSamplerKTick+0x29e>
				rate += 1.0f;
 8017378:	ee77 7a89 	vadd.f32	s15, s15, s18
			displayValues[5] = knobs[5] * 4000.0f;
 801737c:	edd4 6a9b 	vldr	s13, [r4, #620]	; 0x26c
			if (tSimplePoly_isOn(&poly, i) > 0)
 8017380:	b2fe      	uxtb	r6, r7
			displayValues[4] = roundf(knobs[4]);
 8017382:	ed94 7a9a 	vldr	s14, [r4, #616]	; 0x268
			if (tSimplePoly_isOn(&poly, i) > 0)
 8017386:	4658      	mov	r0, fp
			displayValues[5] = knobs[5] * 4000.0f;
 8017388:	ee66 6a88 	vmul.f32	s13, s13, s16
			displayValues[6] = knobs[6];
 801738c:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
			if (tSimplePoly_isOn(&poly, i) > 0)
 8017390:	4631      	mov	r1, r6
			displayValues[3] = rate;
 8017392:	edc5 7a03 	vstr	s15, [r5, #12]
			displayValues[6] = knobs[6];
 8017396:	61ab      	str	r3, [r5, #24]
			displayValues[4] = roundf(knobs[4]);
 8017398:	fef8 7a47 	vrinta.f32	s15, s14
			displayValues[5] = knobs[5] * 4000.0f;
 801739c:	edc5 6a05 	vstr	s13, [r5, #20]
			displayValues[4] = roundf(knobs[4]);
 80173a0:	edc5 7a04 	vstr	s15, [r5, #16]
			if (tSimplePoly_isOn(&poly, i) > 0)
 80173a4:	f00d fe82 	bl	80250ac <tSimplePoly_isOn>
 80173a8:	2800      	cmp	r0, #0
 80173aa:	ddb5      	ble.n	8017318 <SFXSamplerKTick+0x30>
				int key = tSimplePoly_getPitch(&poly, i) - LOWEST_SAMPLER_KEY;
 80173ac:	4631      	mov	r1, r6
 80173ae:	4658      	mov	r0, fp
 80173b0:	f00d fe6a 	bl	8025088 <tSimplePoly_getPitch>
 80173b4:	f1a0 0a24 	sub.w	sl, r0, #36	; 0x24
				if ((0 <= key) && (key < NUM_SAMPLER_KEYS))
 80173b8:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80173bc:	d8ac      	bhi.n	8017318 <SFXSamplerKTick+0x30>
					tBuffer_tick(&keyBuff[key], input[1]);
 80173be:	4a7f      	ldr	r2, [pc, #508]	; (80175bc <SFXSamplerKTick+0x2d4>)
 80173c0:	ea4f 068a 	mov.w	r6, sl, lsl #2
 80173c4:	9b00      	ldr	r3, [sp, #0]
 80173c6:	eb02 0806 	add.w	r8, r2, r6
 80173ca:	ed93 0a01 	vldr	s0, [r3, #4]
 80173ce:	4640      	mov	r0, r8
 80173d0:	f00f fa0e 	bl	80267f0 <tBuffer_tick>
					int recordedLength = tBuffer_getRecordedLength(&keyBuff[key]);
 80173d4:	4640      	mov	r0, r8
 80173d6:	f00f fa51 	bl	802687c <tBuffer_getRecordedLength>
					if (knobs[0] != prevKnobs[0])
 80173da:	edd4 6a96 	vldr	s13, [r4, #600]	; 0x258
					sampleLength = recordedLength * leaf.invSampleRate;
 80173de:	ee07 0a90 	vmov	s15, r0
					if (knobs[0] != prevKnobs[0])
 80173e2:	ed99 6a00 	vldr	s12, [r9]
					sampleLength = recordedLength * leaf.invSampleRate;
 80173e6:	4976      	ldr	r1, [pc, #472]	; (80175c0 <SFXSamplerKTick+0x2d8>)
 80173e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80173ec:	4a75      	ldr	r2, [pc, #468]	; (80175c4 <SFXSamplerKTick+0x2dc>)
					if (knobs[0] != prevKnobs[0])
 80173ee:	eef4 6a46 	vcmp.f32	s13, s12
					sampleLength = recordedLength * leaf.invSampleRate;
 80173f2:	ed91 7a01 	vldr	s14, [r1, #4]
 80173f6:	ee27 7a27 	vmul.f32	s14, s14, s15
					if (knobs[0] != prevKnobs[0])
 80173fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					sampleLength = recordedLength * leaf.invSampleRate;
 80173fe:	ed82 7a00 	vstr	s14, [r2]
						samplePlayStarts[key]= (knobs[0] * recordedLength);
 8017402:	4a71      	ldr	r2, [pc, #452]	; (80175c8 <SFXSamplerKTick+0x2e0>)
					if (knobs[0] != prevKnobs[0])
 8017404:	f040 80c6 	bne.w	8017594 <SFXSamplerKTick+0x2ac>
 8017408:	4432      	add	r2, r6
 801740a:	edd2 6a00 	vldr	s13, [r2]
					if (knobs[1] != prevKnobs[1])
 801740e:	ed94 7a97 	vldr	s14, [r4, #604]	; 0x25c
 8017412:	ed99 6a01 	vldr	s12, [r9, #4]
						samplePlayLengths[key] = (knobs[1] * recordedLength);
 8017416:	4a6d      	ldr	r2, [pc, #436]	; (80175cc <SFXSamplerKTick+0x2e4>)
					if (knobs[1] != prevKnobs[1])
 8017418:	eeb4 7a46 	vcmp.f32	s14, s12
 801741c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017420:	d004      	beq.n	801742c <SFXSamplerKTick+0x144>
						samplePlayLengths[key] = (knobs[1] * recordedLength);
 8017422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017426:	1991      	adds	r1, r2, r6
 8017428:	edc1 7a00 	vstr	s15, [r1]
					if (knobs[2] != prevKnobs[2])
 801742c:	ed94 7a98 	vldr	s14, [r4, #608]	; 0x260
 8017430:	edd9 7a02 	vldr	s15, [r9, #8]
						sampleRates[key] = displayValues[2];
 8017434:	4b66      	ldr	r3, [pc, #408]	; (80175d0 <SFXSamplerKTick+0x2e8>)
					if (knobs[2] != prevKnobs[2])
 8017436:	eeb4 7a67 	vcmp.f32	s14, s15
						sampleRates[key] = displayValues[2];
 801743a:	9302      	str	r3, [sp, #8]
					if (knobs[2] != prevKnobs[2])
 801743c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017440:	d002      	beq.n	8017448 <SFXSamplerKTick+0x160>
						sampleRates[key] = displayValues[2];
 8017442:	68a8      	ldr	r0, [r5, #8]
 8017444:	1999      	adds	r1, r3, r6
 8017446:	6008      	str	r0, [r1, #0]
					if (knobs[3] != prevKnobs[3])
 8017448:	ed94 7a99 	vldr	s14, [r4, #612]	; 0x264
 801744c:	edd9 7a03 	vldr	s15, [r9, #12]
						sampleRatesMult[key] = displayValues[3];
 8017450:	4b60      	ldr	r3, [pc, #384]	; (80175d4 <SFXSamplerKTick+0x2ec>)
					if (knobs[3] != prevKnobs[3])
 8017452:	eeb4 7a67 	vcmp.f32	s14, s15
 8017456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801745a:	d002      	beq.n	8017462 <SFXSamplerKTick+0x17a>
						sampleRatesMult[key] = displayValues[3];
 801745c:	68e8      	ldr	r0, [r5, #12]
 801745e:	1999      	adds	r1, r3, r6
 8017460:	6008      	str	r0, [r1, #0]
					if (knobs[4] != prevKnobs[4])
 8017462:	edd4 7a9a 	vldr	s15, [r4, #616]	; 0x268
 8017466:	ed99 7a04 	vldr	s14, [r9, #16]
 801746a:	eef4 7a47 	vcmp.f32	s15, s14
 801746e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017472:	f040 81d8 	bne.w	8017826 <SFXSamplerKTick+0x53e>
 8017476:	4958      	ldr	r1, [pc, #352]	; (80175d8 <SFXSamplerKTick+0x2f0>)
 8017478:	9101      	str	r1, [sp, #4]
					if (knobs[5] != prevKnobs[5])
 801747a:	ed94 7a9b 	vldr	s14, [r4, #620]	; 0x26c
 801747e:	edd9 7a05 	vldr	s15, [r9, #20]
						crossfadeLengths[key] = displayValues[5];
 8017482:	4956      	ldr	r1, [pc, #344]	; (80175dc <SFXSamplerKTick+0x2f4>)
					if (knobs[5] != prevKnobs[5])
 8017484:	eeb4 7a67 	vcmp.f32	s14, s15
						crossfadeLengths[key] = displayValues[5];
 8017488:	9103      	str	r1, [sp, #12]
					if (knobs[5] != prevKnobs[5])
 801748a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801748e:	d002      	beq.n	8017496 <SFXSamplerKTick+0x1ae>
						crossfadeLengths[key] = displayValues[5];
 8017490:	6968      	ldr	r0, [r5, #20]
 8017492:	4431      	add	r1, r6
 8017494:	6008      	str	r0, [r1, #0]
					tSampler_setStart(&keySampler[key], samplePlayStarts[key]);
 8017496:	4852      	ldr	r0, [pc, #328]	; (80175e0 <SFXSamplerKTick+0x2f8>)
 8017498:	eefd 7ae6 	vcvt.s32.f32	s15, s13
		for (int i = 0; i < NUM_SAMPLER_VOICES; i++)
 801749c:	3701      	adds	r7, #1
					tSampler_setStart(&keySampler[key], samplePlayStarts[key]);
 801749e:	eb00 0806 	add.w	r8, r0, r6
 80174a2:	ee17 1a90 	vmov	r1, s15
 80174a6:	4640      	mov	r0, r8
 80174a8:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80174ac:	f00f fb10 	bl	8026ad0 <tSampler_setStart>
					tSampler_setLength(&keySampler[key], samplePlayLengths[key]);
 80174b0:	9a05      	ldr	r2, [sp, #20]
 80174b2:	4640      	mov	r0, r8
 80174b4:	4432      	add	r2, r6
 80174b6:	edd2 7a00 	vldr	s15, [r2]
 80174ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80174be:	ee17 1a90 	vmov	r1, s15
 80174c2:	f00f ff13 	bl	80272ec <tSampler_setLength>
					tSampler_setCrossfadeLength(&keySampler[key], crossfadeLengths[key]);
 80174c6:	9b03      	ldr	r3, [sp, #12]
 80174c8:	4640      	mov	r0, r8
 80174ca:	4433      	add	r3, r6
 80174cc:	edd3 7a00 	vldr	s15, [r3]
 80174d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80174d4:	ee17 1a90 	vmov	r1, s15
 80174d8:	f00f fa88 	bl	80269ec <tSampler_setCrossfadeLength>
					tSampler_setRate(&keySampler[key], sampleRates[key] * sampleRatesMult[key]);
 80174dc:	9b02      	ldr	r3, [sp, #8]
 80174de:	4640      	mov	r0, r8
 80174e0:	4433      	add	r3, r6
 80174e2:	461a      	mov	r2, r3
 80174e4:	9b04      	ldr	r3, [sp, #16]
 80174e6:	441e      	add	r6, r3
 80174e8:	ed92 0a00 	vldr	s0, [r2]
 80174ec:	edd6 7a00 	vldr	s15, [r6]
 80174f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80174f4:	f00f ff94 	bl	8027420 <tSampler_setRate>
					tSampler_setMode(&keySampler[key], loopOns[key]);
 80174f8:	9b01      	ldr	r3, [sp, #4]
 80174fa:	4640      	mov	r0, r8
 80174fc:	f813 102a 	ldrb.w	r1, [r3, sl, lsl #2]
 8017500:	f00f fa70 	bl	80269e4 <tSampler_setMode>
		for (int i = 0; i < NUM_SAMPLER_VOICES; i++)
 8017504:	2f06      	cmp	r7, #6
 8017506:	f47f af0b 	bne.w	8017320 <SFXSamplerKTick+0x38>
 801750a:	f8dd a000 	ldr.w	sl, [sp]
 801750e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80175f4 <SFXSamplerKTick+0x30c>
 8017512:	2400      	movs	r4, #0
 8017514:	4f33      	ldr	r7, [pc, #204]	; (80175e4 <SFXSamplerKTick+0x2fc>)
	float sample = 0.0f;
 8017516:	ed9f 9a27 	vldr	s18, [pc, #156]	; 80175b4 <SFXSamplerKTick+0x2cc>
		if ( tempGain > 0.0001f)
 801751a:	eddf 8a33 	vldr	s17, [pc, #204]	; 80175e8 <SFXSamplerKTick+0x300>
 801751e:	4d33      	ldr	r5, [pc, #204]	; (80175ec <SFXSamplerKTick+0x304>)
			sample += tSampler_tick(&keySampler[i]) * tempGain;
 8017520:	4e2f      	ldr	r6, [pc, #188]	; (80175e0 <SFXSamplerKTick+0x2f8>)
 8017522:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017526:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017528:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801752c:	e887 0003 	stmia.w	r7, {r0, r1}
 8017530:	e002      	b.n	8017538 <SFXSamplerKTick+0x250>
 8017532:	3404      	adds	r4, #4
	for (int i = 0; i < NUM_SAMPLER_KEYS; i++)
 8017534:	2cc4      	cmp	r4, #196	; 0xc4
 8017536:	d011      	beq.n	801755c <SFXSamplerKTick+0x274>
		float tempGain = tExpSmooth_tick(&kSamplerGains[i]);
 8017538:	1928      	adds	r0, r5, r4
 801753a:	f00b fa97 	bl	8022a6c <tExpSmooth_tick>
		if ( tempGain > 0.0001f)
 801753e:	eeb4 0ae8 	vcmpe.f32	s0, s17
		float tempGain = tExpSmooth_tick(&kSamplerGains[i]);
 8017542:	eeb0 8a40 	vmov.f32	s16, s0
		if ( tempGain > 0.0001f)
 8017546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801754a:	ddf2      	ble.n	8017532 <SFXSamplerKTick+0x24a>
			sample += tSampler_tick(&keySampler[i]) * tempGain;
 801754c:	1930      	adds	r0, r6, r4
 801754e:	3404      	adds	r4, #4
 8017550:	f00f fbea 	bl	8026d28 <tSampler_tick>
 8017554:	eea0 9a08 	vfma.f32	s18, s0, s16
	for (int i = 0; i < NUM_SAMPLER_KEYS; i++)
 8017558:	2cc4      	cmp	r4, #196	; 0xc4
 801755a:	d1ed      	bne.n	8017538 <SFXSamplerKTick+0x250>
	sample = tanhf(sample) * 0.98;
 801755c:	eeb0 0a49 	vmov.f32	s0, s18
 8017560:	f010 fc20 	bl	8027da4 <tanhf>
 8017564:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8017568:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80175a0 <SFXSamplerKTick+0x2b8>
 801756c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017570:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
	input[0] = sample;
 8017574:	ed8a 0a00 	vstr	s0, [sl]
	input[1] = sample;
 8017578:	ed8a 0a01 	vstr	s0, [sl, #4]
}
 801757c:	b007      	add	sp, #28
 801757e:	ecbd 8b04 	vpop	{d8-d9}
 8017582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				(rate = 1.0f / fabsf(rate-1.0f));
 8017586:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801758a:	eeb0 7ae7 	vabs.f32	s14, s15
 801758e:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8017592:	e6f3      	b.n	801737c <SFXSamplerKTick+0x94>
						samplePlayStarts[key]= (knobs[0] * recordedLength);
 8017594:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017598:	4432      	add	r2, r6
 801759a:	edc2 6a00 	vstr	s13, [r2]
 801759e:	e736      	b.n	801740e <SFXSamplerKTick+0x126>
 80175a0:	f5c28f5c 	.word	0xf5c28f5c
 80175a4:	3fef5c28 	.word	0x3fef5c28
 80175a8:	20000560 	.word	0x20000560
 80175ac:	20016710 	.word	0x20016710
 80175b0:	200187c4 	.word	0x200187c4
 80175b4:	00000000 	.word	0x00000000
 80175b8:	457a0000 	.word	0x457a0000
 80175bc:	20018198 	.word	0x20018198
 80175c0:	200194a0 	.word	0x200194a0
 80175c4:	200005fc 	.word	0x200005fc
 80175c8:	2001737c 	.word	0x2001737c
 80175cc:	20016280 	.word	0x20016280
 80175d0:	20016368 	.word	0x20016368
 80175d4:	20017884 	.word	0x20017884
 80175d8:	2001664c 	.word	0x2001664c
 80175dc:	200177bc 	.word	0x200177bc
 80175e0:	20016f2c 	.word	0x20016f2c
 80175e4:	20018180 	.word	0x20018180
 80175e8:	38d1b717 	.word	0x38d1b717
 80175ec:	2001608c 	.word	0x2001608c
 80175f0:	20017554 	.word	0x20017554
 80175f4:	20016968 	.word	0x20016968
	int currentSamplerKey = currentSamplerKeyGlobal;
 80175f8:	4b9b      	ldr	r3, [pc, #620]	; (8017868 <SFXSamplerKTick+0x580>)
		displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 80175fa:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		int recordedLength = tBuffer_getRecordedLength(&keyBuff[currentSamplerKey]);
 80175fe:	489b      	ldr	r0, [pc, #620]	; (801786c <SFXSamplerKTick+0x584>)
	int currentSamplerKey = currentSamplerKeyGlobal;
 8017600:	681f      	ldr	r7, [r3, #0]
		displayValues[0] = knobs[0] * sampleLength;
 8017602:	4c9b      	ldr	r4, [pc, #620]	; (8017870 <SFXSamplerKTick+0x588>)
 8017604:	00be      	lsls	r6, r7, #2
 8017606:	4d9b      	ldr	r5, [pc, #620]	; (8017874 <SFXSamplerKTick+0x58c>)
		int recordedLength = tBuffer_getRecordedLength(&keyBuff[currentSamplerKey]);
 8017608:	4430      	add	r0, r6
 801760a:	f00f f937 	bl	802687c <tBuffer_getRecordedLength>
		sampleLength = recordedLength * leaf.invSampleRate;
 801760e:	ee07 0a90 	vmov	s15, r0
 8017612:	4b99      	ldr	r3, [pc, #612]	; (8017878 <SFXSamplerKTick+0x590>)
 8017614:	eef8 8ae7 	vcvt.f32.s32	s17, s15
		displayValues[0] = knobs[0] * sampleLength;
 8017618:	ed94 7a96 	vldr	s14, [r4, #600]	; 0x258
		sampleLength = recordedLength * leaf.invSampleRate;
 801761c:	edd3 7a01 	vldr	s15, [r3, #4]
		displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8017620:	ee38 1a47 	vsub.f32	s2, s16, s14
 8017624:	edd4 0a97 	vldr	s1, [r4, #604]	; 0x25c
		sampleLength = recordedLength * leaf.invSampleRate;
 8017628:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801762c:	4b93      	ldr	r3, [pc, #588]	; (801787c <SFXSamplerKTick+0x594>)
		displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 801762e:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8017880 <SFXSamplerKTick+0x598>
		displayValues[0] = knobs[0] * sampleLength;
 8017632:	ee27 7a87 	vmul.f32	s14, s15, s14
		sampleLength = recordedLength * leaf.invSampleRate;
 8017636:	edc3 7a00 	vstr	s15, [r3]
		displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 801763a:	ee21 1a27 	vmul.f32	s2, s2, s15
 801763e:	ee67 0aa0 	vmul.f32	s1, s15, s1
		displayValues[0] = knobs[0] * sampleLength;
 8017642:	ed85 7a00 	vstr	s14, [r5]
		displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8017646:	f00c fe9b 	bl	8024380 <LEAF_clip>
		displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 801764a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801764e:	ed94 6a98 	vldr	s12, [r4, #608]	; 0x260
		float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8017652:	edd4 6a99 	vldr	s13, [r4, #612]	; 0x264
 8017656:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
		displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 801765a:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
		displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 801765e:	ed85 0a01 	vstr	s0, [r5, #4]
		displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 8017662:	ee76 4a67 	vsub.f32	s9, s12, s15
		float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8017666:	ee76 7ae7 	vsub.f32	s15, s13, s15
		displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 801766a:	ee64 4aa5 	vmul.f32	s9, s9, s11
		float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 801766e:	ee67 7a87 	vmul.f32	s15, s15, s14
		displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 8017672:	edc5 4a02 	vstr	s9, [r5, #8]
		float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8017676:	fef8 7a67 	vrinta.f32	s15, s15
		if (rate < 0.0f)
 801767a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801767e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017682:	f100 80e9 	bmi.w	8017858 <SFXSamplerKTick+0x570>
			rate += 1.0f;
 8017686:	ee77 3a88 	vadd.f32	s7, s15, s16
		if (fabsf(knobs[0]-prevKnobs[0]) > 0.0001f)
 801768a:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80178a4 <SFXSamplerKTick+0x5bc>
 801768e:	ed94 5a96 	vldr	s10, [r4, #600]	; 0x258
 8017692:	edd9 5a00 	vldr	s11, [r9]
 8017696:	ed9f 3a7b 	vldr	s6, [pc, #492]	; 8017884 <SFXSamplerKTick+0x59c>
 801769a:	ee75 5a65 	vsub.f32	s11, s10, s11
		displayValues[5] = knobs[5] * 4000.0f;
 801769e:	edd4 7a9b 	vldr	s15, [r4, #620]	; 0x26c
 80176a2:	eddf 2a79 	vldr	s5, [pc, #484]	; 8017888 <SFXSamplerKTick+0x5a0>
		displayValues[6] = knobs[6];
 80176a6:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
		if (fabsf(knobs[0]-prevKnobs[0]) > 0.0001f)
 80176aa:	eef0 5ae5 	vabs.f32	s11, s11
		displayValues[4] = roundf(knobs[4]);
 80176ae:	ed94 7a9a 	vldr	s14, [r4, #616]	; 0x268
		displayValues[5] = knobs[5] * 4000.0f;
 80176b2:	ee67 2aa2 	vmul.f32	s5, s15, s5
		displayValues[6] = knobs[6];
 80176b6:	61ab      	str	r3, [r5, #24]
		displayValues[4] = roundf(knobs[4]);
 80176b8:	feb8 4a47 	vrinta.f32	s8, s14
		displayValues[3] = rate;
 80176bc:	edc5 3a03 	vstr	s7, [r5, #12]
		if (fabsf(knobs[0]-prevKnobs[0]) > 0.0001f)
 80176c0:	eef4 5ac3 	vcmpe.f32	s11, s6
		displayValues[4] = roundf(knobs[4]);
 80176c4:	ed85 4a04 	vstr	s8, [r5, #16]
		displayValues[5] = knobs[5] * 4000.0f;
 80176c8:	edc5 2a05 	vstr	s5, [r5, #20]
			samplePlayStarts[currentSamplerKey]= (knobs[0] * recordedLength);// + detectedAttackPos[currentSamplerKey];
 80176cc:	4b6f      	ldr	r3, [pc, #444]	; (801788c <SFXSamplerKTick+0x5a4>)
		if (fabsf(knobs[0]-prevKnobs[0]) > 0.0001f)
 80176ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176d2:	f300 80b3 	bgt.w	801783c <SFXSamplerKTick+0x554>
 80176d6:	4433      	add	r3, r6
 80176d8:	ed93 5a00 	vldr	s10, [r3]
		if (fabsf(knobs[1]-prevKnobs[1])  > 0.0001f)
 80176dc:	ed94 3a97 	vldr	s6, [r4, #604]	; 0x25c
 80176e0:	edd9 5a01 	vldr	s11, [r9, #4]
 80176e4:	ed9f 2a67 	vldr	s4, [pc, #412]	; 8017884 <SFXSamplerKTick+0x59c>
 80176e8:	ee73 5a65 	vsub.f32	s11, s6, s11
			samplePlayLengths[currentSamplerKey] = (knobs[1] * recordedLength);// - detectedAttackPos[currentSamplerKey];
 80176ec:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 80178a8 <SFXSamplerKTick+0x5c0>
		if (fabsf(knobs[1]-prevKnobs[1])  > 0.0001f)
 80176f0:	eef0 5ae5 	vabs.f32	s11, s11
 80176f4:	eef4 5ac2 	vcmpe.f32	s11, s4
 80176f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176fc:	dd05      	ble.n	801770a <SFXSamplerKTick+0x422>
			samplePlayLengths[currentSamplerKey] = (knobs[1] * recordedLength);// - detectedAttackPos[currentSamplerKey];
 80176fe:	ee68 5a83 	vmul.f32	s11, s17, s6
 8017702:	eb0b 0306 	add.w	r3, fp, r6
 8017706:	edc3 5a00 	vstr	s11, [r3]
		if (fabsf(knobs[2]-prevKnobs[2])  > 0.0001f)
 801770a:	ed99 3a02 	vldr	s6, [r9, #8]
 801770e:	eddf 5a5d 	vldr	s11, [pc, #372]	; 8017884 <SFXSamplerKTick+0x59c>
 8017712:	ee36 6a43 	vsub.f32	s12, s12, s6
			sampleRates[currentSamplerKey] = displayValues[2];
 8017716:	4b5e      	ldr	r3, [pc, #376]	; (8017890 <SFXSamplerKTick+0x5a8>)
 8017718:	9301      	str	r3, [sp, #4]
		if (fabsf(knobs[2]-prevKnobs[2])  > 0.0001f)
 801771a:	eeb0 6ac6 	vabs.f32	s12, s12
 801771e:	eeb4 6ae5 	vcmpe.f32	s12, s11
		if (fabsf(knobs[3]-prevKnobs[3])  > 0.0001f)
 8017722:	edd9 5a03 	vldr	s11, [r9, #12]
 8017726:	ed9f 6a57 	vldr	s12, [pc, #348]	; 8017884 <SFXSamplerKTick+0x59c>
 801772a:	ee76 6ae5 	vsub.f32	s13, s13, s11
		if (fabsf(knobs[2]-prevKnobs[2])  > 0.0001f)
 801772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if (fabsf(knobs[3]-prevKnobs[3])  > 0.0001f)
 8017732:	eef0 6ae6 	vabs.f32	s13, s13
			sampleRates[currentSamplerKey] = displayValues[2];
 8017736:	bfc8      	it	gt
 8017738:	199b      	addgt	r3, r3, r6
		if (fabsf(knobs[3]-prevKnobs[3])  > 0.0001f)
 801773a:	eef4 6ac6 	vcmpe.f32	s13, s12
		if (fabsf(knobs[4]-prevKnobs[4]) > 0.0001f)
 801773e:	ed99 6a04 	vldr	s12, [r9, #16]
			sampleRates[currentSamplerKey] = displayValues[2];
 8017742:	bfc8      	it	gt
 8017744:	edc3 4a00 	vstrgt	s9, [r3]
		if (fabsf(knobs[4]-prevKnobs[4]) > 0.0001f)
 8017748:	ee37 7a46 	vsub.f32	s14, s14, s12
 801774c:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8017884 <SFXSamplerKTick+0x59c>
		if (fabsf(knobs[3]-prevKnobs[3])  > 0.0001f)
 8017750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			sampleRatesMult[currentSamplerKey] = displayValues[3];
 8017754:	4b4f      	ldr	r3, [pc, #316]	; (8017894 <SFXSamplerKTick+0x5ac>)
		if (fabsf(knobs[4]-prevKnobs[4]) > 0.0001f)
 8017756:	eeb0 7ac7 	vabs.f32	s14, s14
			sampleRatesMult[currentSamplerKey] = displayValues[3];
 801775a:	9300      	str	r3, [sp, #0]
 801775c:	bfc8      	it	gt
 801775e:	199b      	addgt	r3, r3, r6
		if (fabsf(knobs[4]-prevKnobs[4]) > 0.0001f)
 8017760:	eeb4 7ae6 	vcmpe.f32	s14, s13
			sampleRatesMult[currentSamplerKey] = displayValues[3];
 8017764:	bfc8      	it	gt
 8017766:	edc3 3a00 	vstrgt	s7, [r3]
		if (fabsf(knobs[4]-prevKnobs[4]) > 0.0001f)
 801776a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801776e:	dc6b      	bgt.n	8017848 <SFXSamplerKTick+0x560>
 8017770:	4a49      	ldr	r2, [pc, #292]	; (8017898 <SFXSamplerKTick+0x5b0>)
		if (fabsf(knobs[5]-prevKnobs[5])> 0.0001f)
 8017772:	edd9 6a05 	vldr	s13, [r9, #20]
		tSampler_setLength(&keySampler[currentSamplerKey], samplePlayLengths[currentSamplerKey]);
 8017776:	44b3      	add	fp, r6
		if (fabsf(knobs[5]-prevKnobs[5])> 0.0001f)
 8017778:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8017884 <SFXSamplerKTick+0x59c>
 801777c:	ee77 7ae6 	vsub.f32	s15, s15, s13
			crossfadeLengths[currentSamplerKey] = displayValues[5];
 8017780:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80178ac <SFXSamplerKTick+0x5c4>
		tSampler_setStart(&keySampler[currentSamplerKey], samplePlayStarts[currentSamplerKey]);
 8017784:	4845      	ldr	r0, [pc, #276]	; (801789c <SFXSamplerKTick+0x5b4>)
 8017786:	9202      	str	r2, [sp, #8]
		if (fabsf(knobs[5]-prevKnobs[5])> 0.0001f)
 8017788:	eef0 7ae7 	vabs.f32	s15, s15
		tSampler_setStart(&keySampler[currentSamplerKey], samplePlayStarts[currentSamplerKey]);
 801778c:	eb00 0806 	add.w	r8, r0, r6
 8017790:	4c43      	ldr	r4, [pc, #268]	; (80178a0 <SFXSamplerKTick+0x5b8>)
 8017792:	4640      	mov	r0, r8
 8017794:	4d35      	ldr	r5, [pc, #212]	; (801786c <SFXSamplerKTick+0x584>)
		if (fabsf(knobs[5]-prevKnobs[5])> 0.0001f)
 8017796:	eef4 7ac7 	vcmpe.f32	s15, s14
		tSampler_setStart(&keySampler[currentSamplerKey], samplePlayStarts[currentSamplerKey]);
 801779a:	eefd 7ac5 	vcvt.s32.f32	s15, s10
		if (fabsf(knobs[5]-prevKnobs[5])> 0.0001f)
 801779e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			crossfadeLengths[currentSamplerKey] = displayValues[5];
 80177a2:	bfc4      	itt	gt
 80177a4:	eb09 0106 	addgt.w	r1, r9, r6
 80177a8:	edc1 2a00 	vstrgt	s5, [r1]
		tSampler_setStart(&keySampler[currentSamplerKey], samplePlayStarts[currentSamplerKey]);
 80177ac:	ee17 1a90 	vmov	r1, s15
 80177b0:	f00f f98e 	bl	8026ad0 <tSampler_setStart>
		tSampler_setLength(&keySampler[currentSamplerKey], samplePlayLengths[currentSamplerKey]);
 80177b4:	eddb 7a00 	vldr	s15, [fp]
 80177b8:	4640      	mov	r0, r8
 80177ba:	f104 0b31 	add.w	fp, r4, #49	; 0x31
 80177be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80177c2:	ee17 1a90 	vmov	r1, s15
 80177c6:	f00f fd91 	bl	80272ec <tSampler_setLength>
		tSampler_setCrossfadeLength(&keySampler[currentSamplerKey], crossfadeLengths[currentSamplerKey]);
 80177ca:	eb09 0306 	add.w	r3, r9, r6
 80177ce:	4640      	mov	r0, r8
 80177d0:	edd3 7a00 	vldr	s15, [r3]
 80177d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80177d8:	ee17 1a90 	vmov	r1, s15
 80177dc:	f00f f906 	bl	80269ec <tSampler_setCrossfadeLength>
		tSampler_setRate(&keySampler[currentSamplerKey], sampleRates[currentSamplerKey] * sampleRatesMult[currentSamplerKey]);
 80177e0:	9b01      	ldr	r3, [sp, #4]
 80177e2:	9a00      	ldr	r2, [sp, #0]
 80177e4:	4640      	mov	r0, r8
 80177e6:	4433      	add	r3, r6
 80177e8:	4432      	add	r2, r6
 80177ea:	ed93 0a00 	vldr	s0, [r3]
 80177ee:	edd2 7a00 	vldr	s15, [r2]
 80177f2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80177f6:	f00f fe13 	bl	8027420 <tSampler_setRate>
		tSampler_setMode(&keySampler[currentSamplerKey], loopOns[currentSamplerKey]);
 80177fa:	9a02      	ldr	r2, [sp, #8]
 80177fc:	4640      	mov	r0, r8
 80177fe:	f812 1027 	ldrb.w	r1, [r2, r7, lsl #2]
 8017802:	f00f f8ef 	bl	80269e4 <tSampler_setMode>
 8017806:	e004      	b.n	8017812 <SFXSamplerKTick+0x52a>
		for (int i = 0; i < NUM_SAMPLER_KEYS; ++i)
 8017808:	45a3      	cmp	fp, r4
 801780a:	f105 0504 	add.w	r5, r5, #4
 801780e:	f43f ae7e 	beq.w	801750e <SFXSamplerKTick+0x226>
			if (samplerKeyHeld[i] > 0)
 8017812:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017816:	2b00      	cmp	r3, #0
 8017818:	d0f6      	beq.n	8017808 <SFXSamplerKTick+0x520>
				tBuffer_tick(&keyBuff[i], input[1]);
 801781a:	ed9a 0a01 	vldr	s0, [sl, #4]
 801781e:	4628      	mov	r0, r5
 8017820:	f00e ffe6 	bl	80267f0 <tBuffer_tick>
 8017824:	e7f0      	b.n	8017808 <SFXSamplerKTick+0x520>
						loopOns[key] = roundf(knobs[4]);
 8017826:	fef8 7a67 	vrinta.f32	s15, s15
 801782a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801782e:	491a      	ldr	r1, [pc, #104]	; (8017898 <SFXSamplerKTick+0x5b0>)
 8017830:	ee17 0a90 	vmov	r0, s15
 8017834:	9101      	str	r1, [sp, #4]
 8017836:	f841 002a 	str.w	r0, [r1, sl, lsl #2]
 801783a:	e61e      	b.n	801747a <SFXSamplerKTick+0x192>
			samplePlayStarts[currentSamplerKey]= (knobs[0] * recordedLength);// + detectedAttackPos[currentSamplerKey];
 801783c:	ee28 5a85 	vmul.f32	s10, s17, s10
 8017840:	4433      	add	r3, r6
 8017842:	ed83 5a00 	vstr	s10, [r3]
 8017846:	e749      	b.n	80176dc <SFXSamplerKTick+0x3f4>
			loopOns[currentSamplerKey] = roundf(knobs[4]);
 8017848:	eebd 4ac4 	vcvt.s32.f32	s8, s8
 801784c:	4a12      	ldr	r2, [pc, #72]	; (8017898 <SFXSamplerKTick+0x5b0>)
 801784e:	ee14 3a10 	vmov	r3, s8
 8017852:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8017856:	e78c      	b.n	8017772 <SFXSamplerKTick+0x48a>
			(rate = 1.0f / fabsf(rate-1.0f));
 8017858:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801785c:	eef0 7ae7 	vabs.f32	s15, s15
 8017860:	eec8 3a27 	vdiv.f32	s7, s16, s15
 8017864:	e711      	b.n	801768a <SFXSamplerKTick+0x3a2>
 8017866:	bf00      	nop
 8017868:	20000220 	.word	0x20000220
 801786c:	20018198 	.word	0x20018198
 8017870:	20016710 	.word	0x20016710
 8017874:	200187c4 	.word	0x200187c4
 8017878:	200194a0 	.word	0x200194a0
 801787c:	200005fc 	.word	0x200005fc
 8017880:	00000000 	.word	0x00000000
 8017884:	38d1b717 	.word	0x38d1b717
 8017888:	457a0000 	.word	0x457a0000
 801788c:	2001737c 	.word	0x2001737c
 8017890:	20016368 	.word	0x20016368
 8017894:	20017884 	.word	0x20017884
 8017898:	2001664c 	.word	0x2001664c
 801789c:	20016f2c 	.word	0x20016f2c
 80178a0:	2001776b 	.word	0x2001776b
 80178a4:	20018180 	.word	0x20018180
 80178a8:	20016280 	.word	0x20016280
 80178ac:	200177bc 	.word	0x200177bc

080178b0 <SFXSamplerKFree>:
{
 80178b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178b2:	2400      	movs	r4, #0
 80178b4:	4f07      	ldr	r7, [pc, #28]	; (80178d4 <SFXSamplerKFree+0x24>)
 80178b6:	4e08      	ldr	r6, [pc, #32]	; (80178d8 <SFXSamplerKFree+0x28>)
 80178b8:	4d08      	ldr	r5, [pc, #32]	; (80178dc <SFXSamplerKFree+0x2c>)
		tBuffer_free(&keyBuff[i]);
 80178ba:	1938      	adds	r0, r7, r4
 80178bc:	f00e ff8c 	bl	80267d8 <tBuffer_free>
		tSampler_free(&keySampler[i]);
 80178c0:	1930      	adds	r0, r6, r4
 80178c2:	f00f f883 	bl	80269cc <tSampler_free>
		tExpSmooth_free(&kSamplerGains[i]);
 80178c6:	1928      	adds	r0, r5, r4
 80178c8:	3404      	adds	r4, #4
 80178ca:	f00b f8af 	bl	8022a2c <tExpSmooth_free>
	for (int i = 0; i < NUM_SAMPLER_KEYS; i++)
 80178ce:	2cc4      	cmp	r4, #196	; 0xc4
 80178d0:	d1f3      	bne.n	80178ba <SFXSamplerKFree+0xa>
}
 80178d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178d4:	20018198 	.word	0x20018198
 80178d8:	20016f2c 	.word	0x20016f2c
 80178dc:	2001608c 	.word	0x2001608c

080178e0 <SFXSamplerAutoAlloc>:
{
 80178e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tBuffer_initToPool(&asBuff[0], MAX_AUTOSAMP_LENGTH, &largePool);
 80178e4:	4d36      	ldr	r5, [pc, #216]	; (80179c0 <SFXSamplerAutoAlloc+0xe0>)
 80178e6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8017a08 <SFXSamplerAutoAlloc+0x128>
 80178ea:	4f36      	ldr	r7, [pc, #216]	; (80179c4 <SFXSamplerAutoAlloc+0xe4>)
	tBuffer_initToPool(&asBuff[1], MAX_AUTOSAMP_LENGTH, &largePool);
 80178ec:	1d2e      	adds	r6, r5, #4
	tBuffer_initToPool(&asBuff[0], MAX_AUTOSAMP_LENGTH, &largePool);
 80178ee:	4642      	mov	r2, r8
 80178f0:	4628      	mov	r0, r5
 80178f2:	4639      	mov	r1, r7
	tSampler_initToPool(&asSampler[0], &asBuff[0], &smallPool);
 80178f4:	4c34      	ldr	r4, [pc, #208]	; (80179c8 <SFXSamplerAutoAlloc+0xe8>)
	tBuffer_initToPool(&asBuff[0], MAX_AUTOSAMP_LENGTH, &largePool);
 80178f6:	f00e ff57 	bl	80267a8 <tBuffer_initToPool>
	tBuffer_setRecordMode(&asBuff[0], RecordOneShot);
 80178fa:	4628      	mov	r0, r5
 80178fc:	2100      	movs	r1, #0
 80178fe:	f00e ffb9 	bl	8026874 <tBuffer_setRecordMode>
	tBuffer_initToPool(&asBuff[1], MAX_AUTOSAMP_LENGTH, &largePool);
 8017902:	4642      	mov	r2, r8
 8017904:	4639      	mov	r1, r7
 8017906:	4630      	mov	r0, r6
	tSampler_initToPool(&asSampler[0], &asBuff[0], &smallPool);
 8017908:	4f30      	ldr	r7, [pc, #192]	; (80179cc <SFXSamplerAutoAlloc+0xec>)
	tBuffer_initToPool(&asBuff[1], MAX_AUTOSAMP_LENGTH, &largePool);
 801790a:	f00e ff4d 	bl	80267a8 <tBuffer_initToPool>
	tBuffer_setRecordMode(&asBuff[1], RecordOneShot);
 801790e:	4630      	mov	r0, r6
 8017910:	2100      	movs	r1, #0
 8017912:	f00e ffaf 	bl	8026874 <tBuffer_setRecordMode>
	tSampler_initToPool(&asSampler[0], &asBuff[0], &smallPool);
 8017916:	4622      	mov	r2, r4
 8017918:	4629      	mov	r1, r5
 801791a:	4638      	mov	r0, r7
	tSampler_initToPool(&asSampler[1], &asBuff[1], &smallPool);
 801791c:	1d3d      	adds	r5, r7, #4
	tSampler_initToPool(&asSampler[0], &asBuff[0], &smallPool);
 801791e:	f00f f809 	bl	8026934 <tSampler_initToPool>
	tSampler_setMode(&asSampler[0], PlayLoop);
 8017922:	4638      	mov	r0, r7
 8017924:	2101      	movs	r1, #1
 8017926:	f00f f85d 	bl	80269e4 <tSampler_setMode>
	tSampler_initToPool(&asSampler[1], &asBuff[1], &smallPool);
 801792a:	4622      	mov	r2, r4
 801792c:	4631      	mov	r1, r6
 801792e:	4628      	mov	r0, r5
 8017930:	f00f f800 	bl	8026934 <tSampler_initToPool>
	tSampler_setMode(&asSampler[1], PlayLoop);
 8017934:	4628      	mov	r0, r5
 8017936:	2101      	movs	r1, #1
 8017938:	f00f f854 	bl	80269e4 <tSampler_setMode>
	tEnvelopeFollower_initToPool(&envfollow, 0.00001f, 0.9999f, &smallPool);
 801793c:	4621      	mov	r1, r4
 801793e:	eddf 0a24 	vldr	s1, [pc, #144]	; 80179d0 <SFXSamplerAutoAlloc+0xf0>
 8017942:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80179d4 <SFXSamplerAutoAlloc+0xf4>
 8017946:	4824      	ldr	r0, [pc, #144]	; (80179d8 <SFXSamplerAutoAlloc+0xf8>)
 8017948:	f007 fa2c 	bl	801eda4 <tEnvelopeFollower_initToPool>
	tExpSmooth_initToPool(&cfxSmooth, 0.0f, 0.01f, &smallPool);
 801794c:	4621      	mov	r1, r4
 801794e:	eddf 0a23 	vldr	s1, [pc, #140]	; 80179dc <SFXSamplerAutoAlloc+0xfc>
 8017952:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80179e0 <SFXSamplerAutoAlloc+0x100>
 8017956:	4823      	ldr	r0, [pc, #140]	; (80179e4 <SFXSamplerAutoAlloc+0x104>)
 8017958:	f00b f842 	bl	80229e0 <tExpSmooth_initToPool>
	setLED_A(samplerMode == PlayBackAndForth);
 801795c:	4b22      	ldr	r3, [pc, #136]	; (80179e8 <SFXSamplerAutoAlloc+0x108>)
 801795e:	7818      	ldrb	r0, [r3, #0]
 8017960:	f1a0 0002 	sub.w	r0, r0, #2
 8017964:	fab0 f080 	clz	r0, r0
 8017968:	0940      	lsrs	r0, r0, #5
 801796a:	f7fc f9a5 	bl	8013cb8 <setLED_A>
	setLED_B(triggerChannel);
 801796e:	4b1f      	ldr	r3, [pc, #124]	; (80179ec <SFXSamplerAutoAlloc+0x10c>)
 8017970:	7818      	ldrb	r0, [r3, #0]
 8017972:	f7fc f9af 	bl	8013cd4 <setLED_B>
	currentSampler = 1;
 8017976:	2001      	movs	r0, #1
	sample_countdown = 0;
 8017978:	2200      	movs	r2, #0
	currentSampler = 1;
 801797a:	491d      	ldr	r1, [pc, #116]	; (80179f0 <SFXSamplerAutoAlloc+0x110>)
	sample_countdown = 0;
 801797c:	4b1d      	ldr	r3, [pc, #116]	; (80179f4 <SFXSamplerAutoAlloc+0x114>)
	currentSampler = 1;
 801797e:	7008      	strb	r0, [r1, #0]
	sample_countdown = 0;
 8017980:	601a      	str	r2, [r3, #0]
	randLengthVal = randomNumber() * 10000.0f;
 8017982:	f7fb ff99 	bl	80138b8 <randomNumber>
 8017986:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80179f8 <SFXSamplerAutoAlloc+0x118>
 801798a:	4b1c      	ldr	r3, [pc, #112]	; (80179fc <SFXSamplerAutoAlloc+0x11c>)
 801798c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017990:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017994:	ed83 0a00 	vstr	s0, [r3]
	randRateVal = (randomNumber() - 0.5f) * 4.0f;
 8017998:	f7fb ff8e 	bl	80138b8 <randomNumber>
 801799c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	setLED_C(pitchQuantization);
 80179a0:	4a17      	ldr	r2, [pc, #92]	; (8017a00 <SFXSamplerAutoAlloc+0x120>)
	randRateVal = (randomNumber() - 0.5f) * 4.0f;
 80179a2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80179a6:	4b17      	ldr	r3, [pc, #92]	; (8017a04 <SFXSamplerAutoAlloc+0x124>)
	setLED_C(pitchQuantization);
 80179a8:	7810      	ldrb	r0, [r2, #0]
	randRateVal = (randomNumber() - 0.5f) * 4.0f;
 80179aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80179ae:	ee20 0a07 	vmul.f32	s0, s0, s14
 80179b2:	ed83 0a00 	vstr	s0, [r3]
}
 80179b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	setLED_C(pitchQuantization);
 80179ba:	f7fc b999 	b.w	8013cf0 <setLED_C>
 80179be:	bf00      	nop
 80179c0:	20017538 	.word	0x20017538
 80179c4:	0002ee00 	.word	0x0002ee00
 80179c8:	20014b2c 	.word	0x20014b2c
 80179cc:	200177a8 	.word	0x200177a8
 80179d0:	3f7ff972 	.word	0x3f7ff972
 80179d4:	3727c5ac 	.word	0x3727c5ac
 80179d8:	20018398 	.word	0x20018398
 80179dc:	3c23d70a 	.word	0x3c23d70a
 80179e0:	00000000 	.word	0x00000000
 80179e4:	20017290 	.word	0x20017290
 80179e8:	200002a5 	.word	0x200002a5
 80179ec:	2000060d 	.word	0x2000060d
 80179f0:	20000574 	.word	0x20000574
 80179f4:	20000608 	.word	0x20000608
 80179f8:	461c4000 	.word	0x461c4000
 80179fc:	200005ec 	.word	0x200005ec
 8017a00:	200005dc 	.word	0x200005dc
 8017a04:	200005f0 	.word	0x200005f0
 8017a08:	20014254 	.word	0x20014254

08017a0c <SFXSamplerAutoFrame>:
	if (buttonActionsSFX[ButtonC][ActionPress] == 1)
 8017a0c:	4b07      	ldr	r3, [pc, #28]	; (8017a2c <SFXSamplerAutoFrame+0x20>)
 8017a0e:	7f1a      	ldrb	r2, [r3, #28]
 8017a10:	2a01      	cmp	r2, #1
 8017a12:	d000      	beq.n	8017a16 <SFXSamplerAutoFrame+0xa>
}
 8017a14:	4770      	bx	lr
		pitchQuantization = !pitchQuantization;
 8017a16:	4906      	ldr	r1, [pc, #24]	; (8017a30 <SFXSamplerAutoFrame+0x24>)
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8017a18:	2000      	movs	r0, #0
		pitchQuantization = !pitchQuantization;
 8017a1a:	680a      	ldr	r2, [r1, #0]
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8017a1c:	7718      	strb	r0, [r3, #28]
		pitchQuantization = !pitchQuantization;
 8017a1e:	fab2 f282 	clz	r2, r2
 8017a22:	0952      	lsrs	r2, r2, #5
		setLED_C(pitchQuantization);
 8017a24:	4610      	mov	r0, r2
		pitchQuantization = !pitchQuantization;
 8017a26:	600a      	str	r2, [r1, #0]
		setLED_C(pitchQuantization);
 8017a28:	f7fc b962 	b.w	8013cf0 <setLED_C>
 8017a2c:	20018714 	.word	0x20018714
 8017a30:	200005dc 	.word	0x200005dc
 8017a34:	00000000 	.word	0x00000000

08017a38 <SFXSamplerAutoTick>:
{
 8017a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (triggerChannel > 0)
 8017a3c:	f8df 935c 	ldr.w	r9, [pc, #860]	; 8017d9c <SFXSamplerAutoTick+0x364>
{
 8017a40:	4604      	mov	r4, r0
	if (triggerChannel > 0)
 8017a42:	f899 3000 	ldrb.w	r3, [r9]
{
 8017a46:	ed2d 8b06 	vpush	{d8-d10}
 8017a4a:	b089      	sub	sp, #36	; 0x24
	if (triggerChannel > 0)
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d072      	beq.n	8017b36 <SFXSamplerAutoTick+0xfe>
		currentPower = tEnvelopeFollower_tick(&envfollow, input[0]);
 8017a50:	4db9      	ldr	r5, [pc, #740]	; (8017d38 <SFXSamplerAutoTick+0x300>)
 8017a52:	ed90 0a00 	vldr	s0, [r0]
 8017a56:	48b9      	ldr	r0, [pc, #740]	; (8017d3c <SFXSamplerAutoTick+0x304>)
 8017a58:	f007 f9c0 	bl	801eddc <tEnvelopeFollower_tick>
 8017a5c:	ed85 0a00 	vstr	s0, [r5]
	samp_thresh = 1.0f - knobs[0];
 8017a60:	4ab7      	ldr	r2, [pc, #732]	; (8017d40 <SFXSamplerAutoTick+0x308>)
 8017a62:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	int window_size = expBuffer[(int)(knobs[1] * expBufferSizeMinusOne)] * MAX_AUTOSAMP_LENGTH;
 8017a66:	4bb7      	ldr	r3, [pc, #732]	; (8017d44 <SFXSamplerAutoTick+0x30c>)
 8017a68:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8017a6c:	edd2 6ab0 	vldr	s13, [r2, #704]	; 0x2c0
 8017a70:	edd3 7a00 	vldr	s15, [r3]
 8017a74:	49b4      	ldr	r1, [pc, #720]	; (8017d48 <SFXSamplerAutoTick+0x310>)
 8017a76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8017a7a:	ed9f 5ab4 	vldr	s10, [pc, #720]	; 8017d4c <SFXSamplerAutoTick+0x314>
 8017a7e:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8017d50 <SFXSamplerAutoTick+0x318>
 8017a82:	edd2 7ab2 	vldr	s15, [r2, #712]	; 0x2c8
 8017a86:	eefd 6ae6 	vcvt.s32.f32	s13, s13
	samp_thresh = 1.0f - knobs[0];
 8017a8a:	ed92 6aaf 	vldr	s12, [r2, #700]	; 0x2bc
 8017a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
	displayValues[0] = samp_thresh;
 8017a92:	4bb0      	ldr	r3, [pc, #704]	; (8017d54 <SFXSamplerAutoTick+0x31c>)
	samp_thresh = 1.0f - knobs[0];
 8017a94:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8017a98:	f8df 8304 	ldr.w	r8, [pc, #772]	; 8017da0 <SFXSamplerAutoTick+0x368>
	int window_size = expBuffer[(int)(knobs[1] * expBufferSizeMinusOne)] * MAX_AUTOSAMP_LENGTH;
 8017a9c:	ee16 0a90 	vmov	r0, s13
	if (pitchQuantization)
 8017aa0:	4ead      	ldr	r6, [pc, #692]	; (8017d58 <SFXSamplerAutoTick+0x320>)
 8017aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017aa6:	ed92 7ab1 	vldr	s14, [r2, #708]	; 0x2c4
	int window_size = expBuffer[(int)(knobs[1] * expBufferSizeMinusOne)] * MAX_AUTOSAMP_LENGTH;
 8017aaa:	eb01 0180 	add.w	r1, r1, r0, lsl #2
	displayValues[0] = samp_thresh;
 8017aae:	ed83 6a00 	vstr	s12, [r3]
	samp_thresh = 1.0f - knobs[0];
 8017ab2:	ed88 6a00 	vstr	s12, [r8]
 8017ab6:	ee37 7a64 	vsub.f32	s14, s14, s9
	int window_size = expBuffer[(int)(knobs[1] * expBufferSizeMinusOne)] * MAX_AUTOSAMP_LENGTH;
 8017aba:	edd1 0a00 	vldr	s1, [r1]
 8017abe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017ac2:	ed92 9ab4 	vldr	s18, [r2, #720]	; 0x2d0
 8017ac6:	ee60 0a85 	vmul.f32	s1, s1, s10
	if (pitchQuantization)
 8017aca:	6831      	ldr	r1, [r6, #0]
 8017acc:	ed9f 5aa3 	vldr	s10, [pc, #652]	; 8017d5c <SFXSamplerAutoTick+0x324>
	int window_size = expBuffer[(int)(knobs[1] * expBufferSizeMinusOne)] * MAX_AUTOSAMP_LENGTH;
 8017ad0:	eefd 8ae0 	vcvt.s32.f32	s17, s1
 8017ad4:	ee29 9a05 	vmul.f32	s18, s18, s10
	displayValues[1] = window_size;
 8017ad8:	eeb8 6ae8 	vcvt.f32.s32	s12, s17
 8017adc:	ed83 6a01 	vstr	s12, [r3, #4]
	if (pitchQuantization)
 8017ae0:	b391      	cbz	r1, 8017b48 <SFXSamplerAutoTick+0x110>
		rate = roundf((knobs[2] - 0.5f) * 14.0f);
 8017ae2:	eeb2 5a0c 	vmov.f32	s10, #44	; 0x41600000  14.0
		if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 8017ae6:	ed9f 6a9e 	vldr	s12, [pc, #632]	; 8017d60 <SFXSamplerAutoTick+0x328>
		rate = roundf((knobs[2] - 0.5f) * 14.0f);
 8017aea:	ee27 7a05 	vmul.f32	s14, s14, s10
 8017aee:	feb8 7a47 	vrinta.f32	s14, s14
		if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 8017af2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8017af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017afa:	f100 81a4 	bmi.w	8017e46 <SFXSamplerAutoTick+0x40e>
		else rate += 1.0f;
 8017afe:	ee77 9a25 	vadd.f32	s19, s14, s11
	crossfadeLength = knobs[3] * 1000.0f;
 8017b02:	4f98      	ldr	r7, [pc, #608]	; (8017d64 <SFXSamplerAutoTick+0x32c>)
	if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 8017b04:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
	displayValues[3] = crossfadeLength;
 8017b08:	edc3 6a03 	vstr	s13, [r3, #12]
	crossfadeLength = knobs[3] * 1000.0f;
 8017b0c:	edc7 7a00 	vstr	s15, [r7]
	displayValues[2] = rate;
 8017b10:	edc3 9a02 	vstr	s19, [r3, #8]
	if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 8017b14:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8017b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b1c:	f100 81aa 	bmi.w	8017e74 <SFXSamplerAutoTick+0x43c>
	displayValues[5] = randLengthAmount;
 8017b20:	ed83 9a05 	vstr	s18, [r3, #20]
		randRateAmount = roundf(knobs[6] * 8.0f);
 8017b24:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017b28:	ed92 8ab5 	vldr	s16, [r2, #724]	; 0x2d4
 8017b2c:	ee28 8a07 	vmul.f32	s16, s16, s14
 8017b30:	feb8 8a48 	vrinta.f32	s16, s16
 8017b34:	e02e      	b.n	8017b94 <SFXSamplerAutoTick+0x15c>
		currentPower = tEnvelopeFollower_tick(&envfollow, input[1]);
 8017b36:	4d80      	ldr	r5, [pc, #512]	; (8017d38 <SFXSamplerAutoTick+0x300>)
 8017b38:	ed90 0a01 	vldr	s0, [r0, #4]
 8017b3c:	487f      	ldr	r0, [pc, #508]	; (8017d3c <SFXSamplerAutoTick+0x304>)
 8017b3e:	f007 f94d 	bl	801eddc <tEnvelopeFollower_tick>
 8017b42:	ed85 0a00 	vstr	s0, [r5]
 8017b46:	e78b      	b.n	8017a60 <SFXSamplerAutoTick+0x28>
	if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 8017b48:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
	crossfadeLength = knobs[3] * 1000.0f;
 8017b4c:	4f85      	ldr	r7, [pc, #532]	; (8017d64 <SFXSamplerAutoTick+0x32c>)
		rate = (knobs[2] - 0.5f) * 4.0f;
 8017b4e:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
	displayValues[3] = crossfadeLength;
 8017b52:	edc3 6a03 	vstr	s13, [r3, #12]
	crossfadeLength = knobs[3] * 1000.0f;
 8017b56:	edc7 7a00 	vstr	s15, [r7]
	if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 8017b5a:	eeb4 9ac6 	vcmpe.f32	s18, s12
		rate = (knobs[2] - 0.5f) * 4.0f;
 8017b5e:	ee67 9a29 	vmul.f32	s19, s14, s19
	if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 8017b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	displayValues[2] = rate;
 8017b66:	edc3 9a02 	vstr	s19, [r3, #8]
	if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 8017b6a:	f100 80d9 	bmi.w	8017d20 <SFXSamplerAutoTick+0x2e8>
	displayValues[5] = randLengthAmount;
 8017b6e:	ed83 9a05 	vstr	s18, [r3, #20]
		randRateAmount = knobs[6] * 2.0f;
 8017b72:	ed92 8ab5 	vldr	s16, [r2, #724]	; 0x2d4
		if (randRateAmount < 0.01) randRateAmount = 0.0f;
 8017b76:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8017d60 <SFXSamplerAutoTick+0x328>
		randRateAmount = knobs[6] * 2.0f;
 8017b7a:	ee38 8a08 	vadd.f32	s16, s16, s16
		if (randRateAmount < 0.01) randRateAmount = 0.0f;
 8017b7e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8017d30 <SFXSamplerAutoTick+0x2f8>
 8017b82:	eeb7 5ac8 	vcvt.f64.f32	d5, s16
 8017b86:	eeb4 5b46 	vcmp.f64	d5, d6
 8017b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b8e:	bf48      	it	mi
 8017b90:	eeb0 8a47 	vmovmi.f32	s16, s14
	tSampler_setCrossfadeLength(&asSampler[0], crossfadeLength);
 8017b94:	ee17 1a90 	vmov	r1, s15
 8017b98:	4873      	ldr	r0, [pc, #460]	; (8017d68 <SFXSamplerAutoTick+0x330>)
	displayValues[6] = randRateAmount;
 8017b9a:	ed83 8a06 	vstr	s16, [r3, #24]
	tSampler_setCrossfadeLength(&asSampler[0], crossfadeLength);
 8017b9e:	f00e ff25 	bl	80269ec <tSampler_setCrossfadeLength>
	tSampler_setCrossfadeLength(&asSampler[1], crossfadeLength);
 8017ba2:	6839      	ldr	r1, [r7, #0]
 8017ba4:	4871      	ldr	r0, [pc, #452]	; (8017d6c <SFXSamplerAutoTick+0x334>)
 8017ba6:	f00e ff21 	bl	80269ec <tSampler_setCrossfadeLength>
	if ((currentPower > (samp_thresh)) && (currentPower > (previousPower + 0.001f)) && (samp_triggered == 0) && (sample_countdown == 0) && (fadeDone == 1))
 8017baa:	ed95 7a00 	vldr	s14, [r5]
 8017bae:	edd8 7a00 	vldr	s15, [r8]
 8017bb2:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8017da4 <SFXSamplerAutoTick+0x36c>
 8017bb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bbe:	f340 80b4 	ble.w	8017d2a <SFXSamplerAutoTick+0x2f2>
 8017bc2:	edda 7a00 	vldr	s15, [sl]
 8017bc6:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8017d70 <SFXSamplerAutoTick+0x338>
 8017bca:	ed95 7a00 	vldr	s14, [r5]
 8017bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bda:	f140 80a6 	bpl.w	8017d2a <SFXSamplerAutoTick+0x2f2>
 8017bde:	4f65      	ldr	r7, [pc, #404]	; (8017d74 <SFXSamplerAutoTick+0x33c>)
 8017be0:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 8017da8 <SFXSamplerAutoTick+0x370>
 8017be4:	683b      	ldr	r3, [r7, #0]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	f000 8149 	beq.w	8017e7e <SFXSamplerAutoTick+0x446>
 8017bec:	4b62      	ldr	r3, [pc, #392]	; (8017d78 <SFXSamplerAutoTick+0x340>)
 8017bee:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8017dac <SFXSamplerAutoTick+0x374>
 8017bf2:	9301      	str	r3, [sp, #4]
 8017bf4:	4f61      	ldr	r7, [pc, #388]	; (8017d7c <SFXSamplerAutoTick+0x344>)
 8017bf6:	4b5c      	ldr	r3, [pc, #368]	; (8017d68 <SFXSamplerAutoTick+0x330>)
 8017bf8:	9302      	str	r3, [sp, #8]
	tBuffer_tick(&asBuff[0], input[1]);
 8017bfa:	ed94 0a01 	vldr	s0, [r4, #4]
 8017bfe:	4860      	ldr	r0, [pc, #384]	; (8017d80 <SFXSamplerAutoTick+0x348>)
 8017c00:	f00e fdf6 	bl	80267f0 <tBuffer_tick>
	tBuffer_tick(&asBuff[1], input[1]);
 8017c04:	ed94 0a01 	vldr	s0, [r4, #4]
 8017c08:	485e      	ldr	r0, [pc, #376]	; (8017d84 <SFXSamplerAutoTick+0x34c>)
 8017c0a:	f00e fdf1 	bl	80267f0 <tBuffer_tick>
	if (sample_countdown > 0)
 8017c0e:	f8db 2000 	ldr.w	r2, [fp]
 8017c12:	2a00      	cmp	r2, #0
 8017c14:	f000 80ce 	beq.w	8017db4 <SFXSamplerAutoTick+0x37c>
		sample_countdown--;
 8017c18:	3a01      	subs	r2, #1
 8017c1a:	f8cb 2000 	str.w	r2, [fp]
	if (pitchQuantization)
 8017c1e:	6833      	ldr	r3, [r6, #0]
 8017c20:	ed98 0a00 	vldr	s0, [r8]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	f000 80f4 	beq.w	8017e12 <SFXSamplerAutoTick+0x3da>
		tSampler_setRate(&asSampler[0], rate * randRateVal);
 8017c2a:	ee29 0a80 	vmul.f32	s0, s19, s0
 8017c2e:	484e      	ldr	r0, [pc, #312]	; (8017d68 <SFXSamplerAutoTick+0x330>)
 8017c30:	f00f fbf6 	bl	8027420 <tSampler_setRate>
		tSampler_setRate(&asSampler[1], rate * randRateVal);
 8017c34:	ed98 0a00 	vldr	s0, [r8]
 8017c38:	484c      	ldr	r0, [pc, #304]	; (8017d6c <SFXSamplerAutoTick+0x334>)
 8017c3a:	ee29 0a80 	vmul.f32	s0, s19, s0
 8017c3e:	f00f fbef 	bl	8027420 <tSampler_setRate>
	finalWindowSize = LEAF_clip(4, window_size + randLengthVal, MAX_AUTOSAMP_LENGTH);
 8017c42:	9b01      	ldr	r3, [sp, #4]
 8017c44:	ee18 2a90 	vmov	r2, s17
 8017c48:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8017d4c <SFXSamplerAutoTick+0x314>
 8017c4c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8017c50:	681b      	ldr	r3, [r3, #0]
	if (buttonActionsSFX[ButtonA][ActionPress])
 8017c52:	4e4d      	ldr	r6, [pc, #308]	; (8017d88 <SFXSamplerAutoTick+0x350>)
	finalWindowSize = LEAF_clip(4, window_size + randLengthVal, MAX_AUTOSAMP_LENGTH);
 8017c54:	441a      	add	r2, r3
 8017c56:	ee00 2a90 	vmov	s1, r2
 8017c5a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8017c5e:	f00c fb8f 	bl	8024380 <LEAF_clip>
 8017c62:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	tSampler_setEnd(&asSampler[0], finalWindowSize);
 8017c66:	4840      	ldr	r0, [pc, #256]	; (8017d68 <SFXSamplerAutoTick+0x330>)
	finalWindowSize = LEAF_clip(4, window_size + randLengthVal, MAX_AUTOSAMP_LENGTH);
 8017c68:	ee17 1a90 	vmov	r1, s15
 8017c6c:	edc7 7a00 	vstr	s15, [r7]
	tSampler_setEnd(&asSampler[0], finalWindowSize);
 8017c70:	f00e ffc4 	bl	8026bfc <tSampler_setEnd>
	tSampler_setEnd(&asSampler[1], finalWindowSize);
 8017c74:	6839      	ldr	r1, [r7, #0]
 8017c76:	483d      	ldr	r0, [pc, #244]	; (8017d6c <SFXSamplerAutoTick+0x334>)
 8017c78:	f00e ffc0 	bl	8026bfc <tSampler_setEnd>
	if (buttonActionsSFX[ButtonA][ActionPress])
 8017c7c:	7d33      	ldrb	r3, [r6, #20]
 8017c7e:	b14b      	cbz	r3, 8017c94 <SFXSamplerAutoTick+0x25c>
		if (samplerMode == PlayLoop)
 8017c80:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8017db0 <SFXSamplerAutoTick+0x378>
 8017c84:	f898 7000 	ldrb.w	r7, [r8]
 8017c88:	2f01      	cmp	r7, #1
 8017c8a:	f000 8155 	beq.w	8017f38 <SFXSamplerAutoTick+0x500>
		else if (samplerMode == PlayBackAndForth)
 8017c8e:	2f02      	cmp	r7, #2
 8017c90:	f000 8163 	beq.w	8017f5a <SFXSamplerAutoTick+0x522>
	if (buttonActionsSFX[ButtonB][ActionPress])
 8017c94:	7e33      	ldrb	r3, [r6, #24]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	f040 80c8 	bne.w	8017e2c <SFXSamplerAutoTick+0x3f4>
	float fade = tExpSmooth_tick(&cfxSmooth);
 8017c9c:	4e3b      	ldr	r6, [pc, #236]	; (8017d8c <SFXSamplerAutoTick+0x354>)
 8017c9e:	4630      	mov	r0, r6
 8017ca0:	f00a fee4 	bl	8022a6c <tExpSmooth_tick>
	if (fabsf(cfxSmooth->curr - cfxSmooth->dest) < 0.00001f)
 8017ca4:	6833      	ldr	r3, [r6, #0]
 8017ca6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8017d90 <SFXSamplerAutoTick+0x358>
 8017caa:	edd3 7a03 	vldr	s15, [r3, #12]
 8017cae:	edd3 6a04 	vldr	s13, [r3, #16]
 8017cb2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017cb6:	eef0 7ae7 	vabs.f32	s15, s15
 8017cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cc2:	d502      	bpl.n	8017cca <SFXSamplerAutoTick+0x292>
		fadeDone = 1;
 8017cc4:	4b33      	ldr	r3, [pc, #204]	; (8017d94 <SFXSamplerAutoTick+0x35c>)
 8017cc6:	2201      	movs	r2, #1
 8017cc8:	601a      	str	r2, [r3, #0]
	LEAF_crossfade((fade * 2.0f) - 1.0f, volumes);
 8017cca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8017cce:	a806      	add	r0, sp, #24
 8017cd0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017cd4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8017cdc:	f00c facc 	bl	8024278 <LEAF_crossfade>
	sample = (tSampler_tick(&asSampler[0]) * volumes[1]) + (tSampler_tick(&asSampler[1]) * volumes[0]);
 8017ce0:	4821      	ldr	r0, [pc, #132]	; (8017d68 <SFXSamplerAutoTick+0x330>)
 8017ce2:	f00f f821 	bl	8026d28 <tSampler_tick>
 8017ce6:	4821      	ldr	r0, [pc, #132]	; (8017d6c <SFXSamplerAutoTick+0x334>)
 8017ce8:	eef0 8a40 	vmov.f32	s17, s0
 8017cec:	ed9d 8a07 	vldr	s16, [sp, #28]
 8017cf0:	f00f f81a 	bl	8026d28 <tSampler_tick>
 8017cf4:	eddd 7a06 	vldr	s15, [sp, #24]
	input[0] = sample * 0.99f;
 8017cf8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8017d98 <SFXSamplerAutoTick+0x360>
	sample = (tSampler_tick(&asSampler[0]) * volumes[1]) + (tSampler_tick(&asSampler[1]) * volumes[0]);
 8017cfc:	ee20 0a27 	vmul.f32	s0, s0, s15
	previousPower = currentPower;
 8017d00:	682b      	ldr	r3, [r5, #0]
 8017d02:	f8ca 3000 	str.w	r3, [sl]
	sample = (tSampler_tick(&asSampler[0]) * volumes[1]) + (tSampler_tick(&asSampler[1]) * volumes[0]);
 8017d06:	eea8 0a88 	vfma.f32	s0, s17, s16
	input[0] = sample * 0.99f;
 8017d0a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017d0e:	ed84 0a00 	vstr	s0, [r4]
	input[1] = sample * 0.99f;
 8017d12:	ed84 0a01 	vstr	s0, [r4, #4]
}
 8017d16:	b009      	add	sp, #36	; 0x24
 8017d18:	ecbd 8b06 	vpop	{d8-d10}
 8017d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	displayValues[5] = randLengthAmount;
 8017d20:	ed9f 9a0f 	vldr	s18, [pc, #60]	; 8017d60 <SFXSamplerAutoTick+0x328>
 8017d24:	ed83 9a05 	vstr	s18, [r3, #20]
 8017d28:	e723      	b.n	8017b72 <SFXSamplerAutoTick+0x13a>
 8017d2a:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8017da8 <SFXSamplerAutoTick+0x370>
 8017d2e:	e75d      	b.n	8017bec <SFXSamplerAutoTick+0x1b4>
 8017d30:	47ae147b 	.word	0x47ae147b
 8017d34:	3f847ae1 	.word	0x3f847ae1
 8017d38:	20000570 	.word	0x20000570
 8017d3c:	20018398 	.word	0x20018398
 8017d40:	20016710 	.word	0x20016710
 8017d44:	20000238 	.word	0x20000238
 8017d48:	2001707c 	.word	0x2001707c
 8017d4c:	483b8000 	.word	0x483b8000
 8017d50:	447a0000 	.word	0x447a0000
 8017d54:	200187c4 	.word	0x200187c4
 8017d58:	200005dc 	.word	0x200005dc
 8017d5c:	459c4000 	.word	0x459c4000
 8017d60:	00000000 	.word	0x00000000
 8017d64:	20000564 	.word	0x20000564
 8017d68:	200177a8 	.word	0x200177a8
 8017d6c:	200177ac 	.word	0x200177ac
 8017d70:	3a83126f 	.word	0x3a83126f
 8017d74:	200005f8 	.word	0x200005f8
 8017d78:	200005ec 	.word	0x200005ec
 8017d7c:	2000023c 	.word	0x2000023c
 8017d80:	20017538 	.word	0x20017538
 8017d84:	2001753c 	.word	0x2001753c
 8017d88:	20018714 	.word	0x20018714
 8017d8c:	20017290 	.word	0x20017290
 8017d90:	3727c5ac 	.word	0x3727c5ac
 8017d94:	20000584 	.word	0x20000584
 8017d98:	3f7d70a4 	.word	0x3f7d70a4
 8017d9c:	2000060d 	.word	0x2000060d
 8017da0:	200005f4 	.word	0x200005f4
 8017da4:	200005e8 	.word	0x200005e8
 8017da8:	20000608 	.word	0x20000608
 8017dac:	200005f0 	.word	0x200005f0
 8017db0:	200002a5 	.word	0x200002a5
	else if (samp_triggered == 1)
 8017db4:	4b78      	ldr	r3, [pc, #480]	; (8017f98 <SFXSamplerAutoTick+0x560>)
 8017db6:	6819      	ldr	r1, [r3, #0]
 8017db8:	2901      	cmp	r1, #1
 8017dba:	f47f af30 	bne.w	8017c1e <SFXSamplerAutoTick+0x1e6>
		currentSampler = !currentSampler;
 8017dbe:	4977      	ldr	r1, [pc, #476]	; (8017f9c <SFXSamplerAutoTick+0x564>)
		setLED_1(0);
 8017dc0:	4610      	mov	r0, r2
 8017dc2:	9203      	str	r2, [sp, #12]
 8017dc4:	9305      	str	r3, [sp, #20]
		currentSampler = !currentSampler;
 8017dc6:	9104      	str	r1, [sp, #16]
		setLED_1(0);
 8017dc8:	f7fb ff56 	bl	8013c78 <setLED_1>
		currentSampler = !currentSampler;
 8017dcc:	9904      	ldr	r1, [sp, #16]
		tSampler_play(&asSampler[currentSampler]);
 8017dce:	9b02      	ldr	r3, [sp, #8]
		currentSampler = !currentSampler;
 8017dd0:	f891 c000 	ldrb.w	ip, [r1]
 8017dd4:	9102      	str	r1, [sp, #8]
 8017dd6:	fabc fc8c 	clz	ip, ip
 8017dda:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
		tSampler_play(&asSampler[currentSampler]);
 8017dde:	eb03 008c 	add.w	r0, r3, ip, lsl #2
		currentSampler = !currentSampler;
 8017de2:	f881 c000 	strb.w	ip, [r1]
		tSampler_play(&asSampler[currentSampler]);
 8017de6:	f00e fe17 	bl	8026a18 <tSampler_play>
		tExpSmooth_setDest(&cfxSmooth,(float)currentSampler);
 8017dea:	9902      	ldr	r1, [sp, #8]
 8017dec:	486c      	ldr	r0, [pc, #432]	; (8017fa0 <SFXSamplerAutoTick+0x568>)
 8017dee:	780b      	ldrb	r3, [r1, #0]
 8017df0:	ee00 3a10 	vmov	s0, r3
 8017df4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8017df8:	f00a fe2e 	bl	8022a58 <tExpSmooth_setDest>
		samp_triggered = 0;
 8017dfc:	9a03      	ldr	r2, [sp, #12]
 8017dfe:	9b05      	ldr	r3, [sp, #20]
		fadeDone = 0;
 8017e00:	4968      	ldr	r1, [pc, #416]	; (8017fa4 <SFXSamplerAutoTick+0x56c>)
		samp_triggered = 0;
 8017e02:	601a      	str	r2, [r3, #0]
	if (pitchQuantization)
 8017e04:	6833      	ldr	r3, [r6, #0]
		fadeDone = 0;
 8017e06:	600a      	str	r2, [r1, #0]
 8017e08:	ed98 0a00 	vldr	s0, [r8]
	if (pitchQuantization)
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	f47f af0c 	bne.w	8017c2a <SFXSamplerAutoTick+0x1f2>
		tSampler_setRate(&asSampler[0], rate + randRateVal);
 8017e12:	ee39 0a80 	vadd.f32	s0, s19, s0
 8017e16:	4864      	ldr	r0, [pc, #400]	; (8017fa8 <SFXSamplerAutoTick+0x570>)
 8017e18:	f00f fb02 	bl	8027420 <tSampler_setRate>
		tSampler_setRate(&asSampler[1], rate + randRateVal);
 8017e1c:	ed98 0a00 	vldr	s0, [r8]
 8017e20:	4862      	ldr	r0, [pc, #392]	; (8017fac <SFXSamplerAutoTick+0x574>)
 8017e22:	ee39 0a80 	vadd.f32	s0, s19, s0
 8017e26:	f00f fafb 	bl	8027420 <tSampler_setRate>
 8017e2a:	e70a      	b.n	8017c42 <SFXSamplerAutoTick+0x20a>
		triggerChannel = (triggerChannel > 0) ? 0 : 1;
 8017e2c:	f899 3000 	ldrb.w	r3, [r9]
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 8017e30:	2200      	movs	r2, #0
		triggerChannel = (triggerChannel > 0) ? 0 : 1;
 8017e32:	fab3 f383 	clz	r3, r3
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 8017e36:	7632      	strb	r2, [r6, #24]
		triggerChannel = (triggerChannel > 0) ? 0 : 1;
 8017e38:	095b      	lsrs	r3, r3, #5
		setLED_B(triggerChannel);
 8017e3a:	4618      	mov	r0, r3
		triggerChannel = (triggerChannel > 0) ? 0 : 1;
 8017e3c:	f889 3000 	strb.w	r3, [r9]
		setLED_B(triggerChannel);
 8017e40:	f7fb ff48 	bl	8013cd4 <setLED_B>
 8017e44:	e72a      	b.n	8017c9c <SFXSamplerAutoTick+0x264>
		if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 8017e46:	ee37 7a65 	vsub.f32	s14, s14, s11
	crossfadeLength = knobs[3] * 1000.0f;
 8017e4a:	4f59      	ldr	r7, [pc, #356]	; (8017fb0 <SFXSamplerAutoTick+0x578>)
	if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 8017e4c:	eeb3 5a04 	vmov.f32	s10, #52	; 0x41a00000  20.0
	displayValues[3] = crossfadeLength;
 8017e50:	edc3 6a03 	vstr	s13, [r3, #12]
	crossfadeLength = knobs[3] * 1000.0f;
 8017e54:	edc7 7a00 	vstr	s15, [r7]
		if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 8017e58:	eeb0 7ac7 	vabs.f32	s14, s14
	if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 8017e5c:	eeb4 9a45 	vcmp.f32	s18, s10
		if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 8017e60:	eec5 9a87 	vdiv.f32	s19, s11, s14
	if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 8017e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e68:	bf48      	it	mi
 8017e6a:	eeb0 9a46 	vmovmi.f32	s18, s12
	displayValues[2] = rate;
 8017e6e:	edc3 9a02 	vstr	s19, [r3, #8]
 8017e72:	e655      	b.n	8017b20 <SFXSamplerAutoTick+0xe8>
	displayValues[5] = randLengthAmount;
 8017e74:	ed83 6a05 	vstr	s12, [r3, #20]
	if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 8017e78:	eeb0 9a46 	vmov.f32	s18, s12
 8017e7c:	e652      	b.n	8017b24 <SFXSamplerAutoTick+0xec>
	if ((currentPower > (samp_thresh)) && (currentPower > (previousPower + 0.001f)) && (samp_triggered == 0) && (sample_countdown == 0) && (fadeDone == 1))
 8017e7e:	f8db 2000 	ldr.w	r2, [fp]
 8017e82:	2a00      	cmp	r2, #0
 8017e84:	f47f aeb2 	bne.w	8017bec <SFXSamplerAutoTick+0x1b4>
 8017e88:	4a46      	ldr	r2, [pc, #280]	; (8017fa4 <SFXSamplerAutoTick+0x56c>)
 8017e8a:	6812      	ldr	r2, [r2, #0]
 8017e8c:	2a01      	cmp	r2, #1
 8017e8e:	f47f aead 	bne.w	8017bec <SFXSamplerAutoTick+0x1b4>
		randLengthVal = (randomNumber() - 0.5f) * randLengthAmount * 2.0f;
 8017e92:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8017e96:	f7fb fd0f 	bl	80138b8 <randomNumber>
 8017e9a:	ee39 9a09 	vadd.f32	s18, s18, s18
 8017e9e:	4b45      	ldr	r3, [pc, #276]	; (8017fb4 <SFXSamplerAutoTick+0x57c>)
		if (pitchQuantization) randRateVal = roundf(randomNumber() * randRateAmount) + 1.0f;
 8017ea0:	6832      	ldr	r2, [r6, #0]
		randLengthVal = (randomNumber() - 0.5f) * randLengthAmount * 2.0f;
 8017ea2:	ee70 7a4a 	vsub.f32	s15, s0, s20
 8017ea6:	9301      	str	r3, [sp, #4]
 8017ea8:	ee67 7a89 	vmul.f32	s15, s15, s18
 8017eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017eb0:	edc3 7a00 	vstr	s15, [r3]
		if (pitchQuantization) randRateVal = roundf(randomNumber() * randRateAmount) + 1.0f;
 8017eb4:	2a00      	cmp	r2, #0
 8017eb6:	d061      	beq.n	8017f7c <SFXSamplerAutoTick+0x544>
 8017eb8:	f7fb fcfe 	bl	80138b8 <randomNumber>
 8017ebc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017ec0:	ee60 7a08 	vmul.f32	s15, s0, s16
 8017ec4:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8017fc4 <SFXSamplerAutoTick+0x58c>
 8017ec8:	fef8 7a67 	vrinta.f32	s15, s15
 8017ecc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017ed0:	edc8 7a00 	vstr	s15, [r8]
		samp_triggered = 1;
 8017ed4:	2201      	movs	r2, #1
		tSampler_stop(&asSampler[!currentSampler]);
 8017ed6:	4b34      	ldr	r3, [pc, #208]	; (8017fa8 <SFXSamplerAutoTick+0x570>)
		setLED_1(1);
 8017ed8:	4610      	mov	r0, r2
		tSampler_stop(&asSampler[!currentSampler]);
 8017eda:	9302      	str	r3, [sp, #8]
		samp_triggered = 1;
 8017edc:	603a      	str	r2, [r7, #0]
		setLED_1(1);
 8017ede:	f7fb fecb 	bl	8013c78 <setLED_1>
		finalWindowSize = LEAF_clip(4, window_size + randLengthVal, MAX_AUTOSAMP_LENGTH);
 8017ee2:	9a01      	ldr	r2, [sp, #4]
 8017ee4:	ee18 1a90 	vmov	r1, s17
 8017ee8:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8017fb8 <SFXSamplerAutoTick+0x580>
 8017eec:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8017ef0:	6812      	ldr	r2, [r2, #0]
 8017ef2:	4f32      	ldr	r7, [pc, #200]	; (8017fbc <SFXSamplerAutoTick+0x584>)
 8017ef4:	188a      	adds	r2, r1, r2
 8017ef6:	ee00 2a90 	vmov	s1, r2
 8017efa:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8017efe:	f00c fa3f 	bl	8024380 <LEAF_clip>
		tSampler_stop(&asSampler[!currentSampler]);
 8017f02:	4a26      	ldr	r2, [pc, #152]	; (8017f9c <SFXSamplerAutoTick+0x564>)
		finalWindowSize = LEAF_clip(4, window_size + randLengthVal, MAX_AUTOSAMP_LENGTH);
 8017f04:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		tSampler_stop(&asSampler[!currentSampler]);
 8017f08:	9b02      	ldr	r3, [sp, #8]
 8017f0a:	7810      	ldrb	r0, [r2, #0]
 8017f0c:	fab0 f080 	clz	r0, r0
		sample_countdown = finalWindowSize;
 8017f10:	edcb 7a00 	vstr	s15, [fp]
		finalWindowSize = LEAF_clip(4, window_size + randLengthVal, MAX_AUTOSAMP_LENGTH);
 8017f14:	edc7 7a00 	vstr	s15, [r7]
		tSampler_stop(&asSampler[!currentSampler]);
 8017f18:	0940      	lsrs	r0, r0, #5
 8017f1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017f1e:	f00e fdcb 	bl	8026ab8 <tSampler_stop>
		tBuffer_record(&asBuff[!currentSampler]);
 8017f22:	4a1e      	ldr	r2, [pc, #120]	; (8017f9c <SFXSamplerAutoTick+0x564>)
 8017f24:	4826      	ldr	r0, [pc, #152]	; (8017fc0 <SFXSamplerAutoTick+0x588>)
 8017f26:	7812      	ldrb	r2, [r2, #0]
 8017f28:	fab2 f282 	clz	r2, r2
 8017f2c:	0952      	lsrs	r2, r2, #5
 8017f2e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8017f32:	f00e fc8d 	bl	8026850 <tBuffer_record>
 8017f36:	e660      	b.n	8017bfa <SFXSamplerAutoTick+0x1c2>
			tSampler_setMode(&asSampler[0], PlayBackAndForth);
 8017f38:	2102      	movs	r1, #2
 8017f3a:	481b      	ldr	r0, [pc, #108]	; (8017fa8 <SFXSamplerAutoTick+0x570>)
 8017f3c:	f00e fd52 	bl	80269e4 <tSampler_setMode>
			tSampler_setMode(&asSampler[1], PlayBackAndForth);
 8017f40:	2102      	movs	r1, #2
 8017f42:	481a      	ldr	r0, [pc, #104]	; (8017fac <SFXSamplerAutoTick+0x574>)
 8017f44:	f00e fd4e 	bl	80269e4 <tSampler_setMode>
			samplerMode = PlayBackAndForth;
 8017f48:	2302      	movs	r3, #2
			setLED_A(1);
 8017f4a:	4638      	mov	r0, r7
			samplerMode = PlayBackAndForth;
 8017f4c:	f888 3000 	strb.w	r3, [r8]
			setLED_A(1);
 8017f50:	f7fb feb2 	bl	8013cb8 <setLED_A>
			buttonActionsSFX[ButtonA][ActionPress] = 0;
 8017f54:	2300      	movs	r3, #0
 8017f56:	7533      	strb	r3, [r6, #20]
 8017f58:	e69c      	b.n	8017c94 <SFXSamplerAutoTick+0x25c>
			tSampler_setMode(&asSampler[0], PlayLoop);
 8017f5a:	2101      	movs	r1, #1
 8017f5c:	4812      	ldr	r0, [pc, #72]	; (8017fa8 <SFXSamplerAutoTick+0x570>)
 8017f5e:	f00e fd41 	bl	80269e4 <tSampler_setMode>
			tSampler_setMode(&asSampler[1], PlayLoop);
 8017f62:	2101      	movs	r1, #1
 8017f64:	4811      	ldr	r0, [pc, #68]	; (8017fac <SFXSamplerAutoTick+0x574>)
 8017f66:	f00e fd3d 	bl	80269e4 <tSampler_setMode>
			samplerMode = PlayLoop;
 8017f6a:	2301      	movs	r3, #1
			setLED_A(0);
 8017f6c:	2000      	movs	r0, #0
			samplerMode = PlayLoop;
 8017f6e:	f888 3000 	strb.w	r3, [r8]
			setLED_A(0);
 8017f72:	f7fb fea1 	bl	8013cb8 <setLED_A>
			buttonActionsSFX[ButtonA][ActionPress] = 0;
 8017f76:	2300      	movs	r3, #0
 8017f78:	7533      	strb	r3, [r6, #20]
 8017f7a:	e68b      	b.n	8017c94 <SFXSamplerAutoTick+0x25c>
		else randRateVal = (randomNumber() - 0.5f) * randRateAmount * 2.0f;
 8017f7c:	f7fb fc9c 	bl	80138b8 <randomNumber>
 8017f80:	ee38 8a08 	vadd.f32	s16, s16, s16
 8017f84:	ee30 0a4a 	vsub.f32	s0, s0, s20
 8017f88:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8017fc4 <SFXSamplerAutoTick+0x58c>
 8017f8c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8017f90:	ed88 8a00 	vstr	s16, [r8]
 8017f94:	e79e      	b.n	8017ed4 <SFXSamplerAutoTick+0x49c>
 8017f96:	bf00      	nop
 8017f98:	200005f8 	.word	0x200005f8
 8017f9c:	20000574 	.word	0x20000574
 8017fa0:	20017290 	.word	0x20017290
 8017fa4:	20000584 	.word	0x20000584
 8017fa8:	200177a8 	.word	0x200177a8
 8017fac:	200177ac 	.word	0x200177ac
 8017fb0:	20000564 	.word	0x20000564
 8017fb4:	200005ec 	.word	0x200005ec
 8017fb8:	483b8000 	.word	0x483b8000
 8017fbc:	2000023c 	.word	0x2000023c
 8017fc0:	20017538 	.word	0x20017538
 8017fc4:	200005f0 	.word	0x200005f0

08017fc8 <SFXSamplerAutoFree>:
{
 8017fc8:	b538      	push	{r3, r4, r5, lr}
	tBuffer_free(&asBuff[0]);
 8017fca:	4d0b      	ldr	r5, [pc, #44]	; (8017ff8 <SFXSamplerAutoFree+0x30>)
	tSampler_free(&asSampler[0]);
 8017fcc:	4c0b      	ldr	r4, [pc, #44]	; (8017ffc <SFXSamplerAutoFree+0x34>)
	tBuffer_free(&asBuff[0]);
 8017fce:	4628      	mov	r0, r5
 8017fd0:	f00e fc02 	bl	80267d8 <tBuffer_free>
	tBuffer_free(&asBuff[1]);
 8017fd4:	1d28      	adds	r0, r5, #4
 8017fd6:	f00e fbff 	bl	80267d8 <tBuffer_free>
	tSampler_free(&asSampler[0]);
 8017fda:	4620      	mov	r0, r4
 8017fdc:	f00e fcf6 	bl	80269cc <tSampler_free>
	tSampler_free(&asSampler[1]);
 8017fe0:	1d20      	adds	r0, r4, #4
 8017fe2:	f00e fcf3 	bl	80269cc <tSampler_free>
	tEnvelopeFollower_free(&envfollow);
 8017fe6:	4806      	ldr	r0, [pc, #24]	; (8018000 <SFXSamplerAutoFree+0x38>)
 8017fe8:	f006 fef4 	bl	801edd4 <tEnvelopeFollower_free>
	tExpSmooth_free(&cfxSmooth);
 8017fec:	4805      	ldr	r0, [pc, #20]	; (8018004 <SFXSamplerAutoFree+0x3c>)
}
 8017fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tExpSmooth_free(&cfxSmooth);
 8017ff2:	f00a bd1b 	b.w	8022a2c <tExpSmooth_free>
 8017ff6:	bf00      	nop
 8017ff8:	20017538 	.word	0x20017538
 8017ffc:	200177a8 	.word	0x200177a8
 8018000:	20018398 	.word	0x20018398
 8018004:	20017290 	.word	0x20017290

08018008 <SFXDistortionAlloc>:
{
 8018008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tOversampler_initToPool(&oversampler, distOS_ratio, 0, &smallPool);
 801800c:	4e29      	ldr	r6, [pc, #164]	; (80180b4 <SFXDistortionAlloc+0xac>)
	leaf.clearOnAllocation = 1;
 801800e:	2701      	movs	r7, #1
	tOversampler_initToPool(&oversampler, distOS_ratio, 0, &smallPool);
 8018010:	4d29      	ldr	r5, [pc, #164]	; (80180b8 <SFXDistortionAlloc+0xb0>)
 8018012:	2200      	movs	r2, #0
	leaf.clearOnAllocation = 1;
 8018014:	4c29      	ldr	r4, [pc, #164]	; (80180bc <SFXDistortionAlloc+0xb4>)
	tOversampler_initToPool(&oversampler, distOS_ratio, 0, &smallPool);
 8018016:	4633      	mov	r3, r6
	tVZFilter_initToPool(&shelf1, Lowshelf, 80.0f, 6.0f, &smallPool);
 8018018:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80180dc <SFXDistortionAlloc+0xd4>
	tOversampler_initToPool(&oversampler, distOS_ratio, 0, &smallPool);
 801801c:	6829      	ldr	r1, [r5, #0]
 801801e:	4828      	ldr	r0, [pc, #160]	; (80180c0 <SFXDistortionAlloc+0xb8>)
	tVZFilter_initToPool(&shelf2, Highshelf, 12000.0f, 6.0f, &smallPool);
 8018020:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80180e0 <SFXDistortionAlloc+0xd8>
	leaf.clearOnAllocation = 1;
 8018024:	6167      	str	r7, [r4, #20]
	tOversampler_initToPool(&oversampler, distOS_ratio, 0, &smallPool);
 8018026:	f007 ff01 	bl	801fe2c <tOversampler_initToPool>
	tVZFilter_initToPool(&bell1, Bell, 1000.0f, 1.9f, &smallPool);
 801802a:	4f26      	ldr	r7, [pc, #152]	; (80180c4 <SFXDistortionAlloc+0xbc>)
	tVZFilter_initToPool(&shelf1, Lowshelf, 80.0f, 6.0f, &smallPool);
 801802c:	4632      	mov	r2, r6
 801802e:	4648      	mov	r0, r9
 8018030:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8018034:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80180c8 <SFXDistortionAlloc+0xc0>
 8018038:	2106      	movs	r1, #6
 801803a:	f00b f85f 	bl	80230fc <tVZFilter_initToPool>
	tVZFilter_initToPool(&shelf2, Highshelf, 12000.0f, 6.0f, &smallPool);
 801803e:	4632      	mov	r2, r6
 8018040:	4640      	mov	r0, r8
 8018042:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8018046:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80180cc <SFXDistortionAlloc+0xc4>
 801804a:	2107      	movs	r1, #7
 801804c:	f00b f856 	bl	80230fc <tVZFilter_initToPool>
	tVZFilter_initToPool(&bell1, Bell, 1000.0f, 1.9f, &smallPool);
 8018050:	4632      	mov	r2, r6
 8018052:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80180d0 <SFXDistortionAlloc+0xc8>
 8018056:	2105      	movs	r1, #5
 8018058:	4638      	mov	r0, r7
 801805a:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80180d4 <SFXDistortionAlloc+0xcc>
 801805e:	f00b f84d 	bl	80230fc <tVZFilter_initToPool>
	tVZFilter_setSampleRate(&shelf1, leaf.sampleRate * distOS_ratio);
 8018062:	edd5 7a00 	vldr	s15, [r5]
 8018066:	ed94 0a00 	vldr	s0, [r4]
 801806a:	4648      	mov	r0, r9
 801806c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018070:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018074:	f00b fa38 	bl	80234e8 <tVZFilter_setSampleRate>
	tVZFilter_setSampleRate(&shelf2, leaf.sampleRate * distOS_ratio);
 8018078:	edd5 7a00 	vldr	s15, [r5]
 801807c:	ed94 0a00 	vldr	s0, [r4]
 8018080:	4640      	mov	r0, r8
 8018082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018086:	ee27 0a80 	vmul.f32	s0, s15, s0
 801808a:	f00b fa2d 	bl	80234e8 <tVZFilter_setSampleRate>
	tVZFilter_setSampleRate(&bell1, leaf.sampleRate * distOS_ratio);
 801808e:	ed95 0a00 	vldr	s0, [r5]
 8018092:	edd4 7a00 	vldr	s15, [r4]
 8018096:	4638      	mov	r0, r7
 8018098:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801809c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80180a0:	f00b fa22 	bl	80234e8 <tVZFilter_setSampleRate>
	setLED_A(distortionMode);
 80180a4:	4b0c      	ldr	r3, [pc, #48]	; (80180d8 <SFXDistortionAlloc+0xd0>)
 80180a6:	7818      	ldrb	r0, [r3, #0]
 80180a8:	f7fb fe06 	bl	8013cb8 <setLED_A>
	leaf.clearOnAllocation = 0;
 80180ac:	2300      	movs	r3, #0
 80180ae:	6163      	str	r3, [r4, #20]
}
 80180b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180b4:	20014b2c 	.word	0x20014b2c
 80180b8:	20000234 	.word	0x20000234
 80180bc:	200194a0 	.word	0x200194a0
 80180c0:	2001817c 	.word	0x2001817c
 80180c4:	20017374 	.word	0x20017374
 80180c8:	42a00000 	.word	0x42a00000
 80180cc:	463b8000 	.word	0x463b8000
 80180d0:	3ff33333 	.word	0x3ff33333
 80180d4:	447a0000 	.word	0x447a0000
 80180d8:	2000057c 	.word	0x2000057c
 80180dc:	20017534 	.word	0x20017534
 80180e0:	2001745c 	.word	0x2001745c

080180e4 <SFXDistortionFrame>:
	if (buttonActionsSFX[ButtonA][ActionPress])
 80180e4:	4a27      	ldr	r2, [pc, #156]	; (8018184 <SFXDistortionFrame+0xa0>)
{
 80180e6:	b510      	push	{r4, lr}
	if (buttonActionsSFX[ButtonA][ActionPress])
 80180e8:	7d13      	ldrb	r3, [r2, #20]
 80180ea:	b153      	cbz	r3, 8018102 <SFXDistortionFrame+0x1e>
		distortionMode = !distortionMode;
 80180ec:	4926      	ldr	r1, [pc, #152]	; (8018188 <SFXDistortionFrame+0xa4>)
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 80180ee:	2000      	movs	r0, #0
		distortionMode = !distortionMode;
 80180f0:	780b      	ldrb	r3, [r1, #0]
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 80180f2:	7510      	strb	r0, [r2, #20]
		distortionMode = !distortionMode;
 80180f4:	fab3 f383 	clz	r3, r3
 80180f8:	095b      	lsrs	r3, r3, #5
		setLED_A(distortionMode);
 80180fa:	4618      	mov	r0, r3
		distortionMode = !distortionMode;
 80180fc:	700b      	strb	r3, [r1, #0]
		setLED_A(distortionMode);
 80180fe:	f7fb fddb 	bl	8013cb8 <setLED_A>
	displayValues[1] = (presetKnobValues[Distortion][1] * 30.0f) - 15.0f;
 8018102:	4b22      	ldr	r3, [pc, #136]	; (801818c <SFXDistortionFrame+0xa8>)
 8018104:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 8018108:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
	displayValues[2] = (presetKnobValues[Distortion][2] * 34.0f) - 17.0f;
 801810c:	eddf 6a20 	vldr	s13, [pc, #128]	; 8018190 <SFXDistortionFrame+0xac>
 8018110:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
	displayValues[1] = (presetKnobValues[Distortion][1] * 30.0f) - 15.0f;
 8018114:	ed93 5ac9 	vldr	s10, [r3, #804]	; 0x324
	displayValues[2] = (presetKnobValues[Distortion][2] * 34.0f) - 17.0f;
 8018118:	edd3 5aca 	vldr	s11, [r3, #808]	; 0x328
	displayValues[1] = (presetKnobValues[Distortion][1] * 30.0f) - 15.0f;
 801811c:	eea5 7a06 	vfma.f32	s14, s10, s12
	displayValues[3] = faster_mtof(presetKnobValues[Distortion][3] * 77.0f + 42.0f);
 8018120:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8018194 <SFXDistortionFrame+0xb0>
	displayValues[2] = (presetKnobValues[Distortion][2] * 34.0f) - 17.0f;
 8018124:	eee5 7aa6 	vfma.f32	s15, s11, s13
	displayValues[3] = faster_mtof(presetKnobValues[Distortion][3] * 77.0f + 42.0f);
 8018128:	ed93 6acb 	vldr	s12, [r3, #812]	; 0x32c
 801812c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8018198 <SFXDistortionFrame+0xb4>
	displayValues[1] = (presetKnobValues[Distortion][1] * 30.0f) - 15.0f;
 8018130:	4c1a      	ldr	r4, [pc, #104]	; (801819c <SFXDistortionFrame+0xb8>)
	displayValues[3] = faster_mtof(presetKnobValues[Distortion][3] * 77.0f + 42.0f);
 8018132:	eea6 0a26 	vfma.f32	s0, s12, s13
	displayValues[1] = (presetKnobValues[Distortion][1] * 30.0f) - 15.0f;
 8018136:	ed84 7a01 	vstr	s14, [r4, #4]
	displayValues[2] = (presetKnobValues[Distortion][2] * 34.0f) - 17.0f;
 801813a:	edc4 7a02 	vstr	s15, [r4, #8]
	displayValues[3] = faster_mtof(presetKnobValues[Distortion][3] * 77.0f + 42.0f);
 801813e:	f00c fa8d 	bl	802465c <faster_mtof>
	tVZFilter_setGain(&shelf1, fastdbtoa(-1.0f * displayValues[1]));
 8018142:	edd4 7a01 	vldr	s15, [r4, #4]
	displayValues[3] = faster_mtof(presetKnobValues[Distortion][3] * 77.0f + 42.0f);
 8018146:	ed84 0a03 	vstr	s0, [r4, #12]
	tVZFilter_setGain(&shelf1, fastdbtoa(-1.0f * displayValues[1]));
 801814a:	eeb1 0a67 	vneg.f32	s0, s15
 801814e:	f00c fad5 	bl	80246fc <fastdbtoa>
 8018152:	4813      	ldr	r0, [pc, #76]	; (80181a0 <SFXDistortionFrame+0xbc>)
 8018154:	f00b fe0c 	bl	8023d70 <tVZFilter_setGain>
	tVZFilter_setGain(&shelf2, fastdbtoa(displayValues[1]));
 8018158:	ed94 0a01 	vldr	s0, [r4, #4]
 801815c:	f00c face 	bl	80246fc <fastdbtoa>
 8018160:	4810      	ldr	r0, [pc, #64]	; (80181a4 <SFXDistortionFrame+0xc0>)
 8018162:	f00b fe05 	bl	8023d70 <tVZFilter_setGain>
	tVZFilter_setFreq(&bell1, displayValues[3]);
 8018166:	ed94 0a03 	vldr	s0, [r4, #12]
 801816a:	480f      	ldr	r0, [pc, #60]	; (80181a8 <SFXDistortionFrame+0xc4>)
 801816c:	f00b fa36 	bl	80235dc <tVZFilter_setFreq>
	tVZFilter_setGain(&bell1, fastdbtoa(displayValues[2]));
 8018170:	ed94 0a02 	vldr	s0, [r4, #8]
 8018174:	f00c fac2 	bl	80246fc <fastdbtoa>
 8018178:	480b      	ldr	r0, [pc, #44]	; (80181a8 <SFXDistortionFrame+0xc4>)
}
 801817a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&bell1, fastdbtoa(displayValues[2]));
 801817e:	f00b bdf7 	b.w	8023d70 <tVZFilter_setGain>
 8018182:	bf00      	nop
 8018184:	20018714 	.word	0x20018714
 8018188:	2000057c 	.word	0x2000057c
 801818c:	20016710 	.word	0x20016710
 8018190:	42080000 	.word	0x42080000
 8018194:	42280000 	.word	0x42280000
 8018198:	429a0000 	.word	0x429a0000
 801819c:	200187c4 	.word	0x200187c4
 80181a0:	20017534 	.word	0x20017534
 80181a4:	2001745c 	.word	0x2001745c
 80181a8:	20017374 	.word	0x20017374

080181ac <SFXDistortionTick>:
{
 80181ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	displayValues[0] = ((presetKnobValues[Distortion][0] * 20.0f) + 1.0f); // 15.0f
 80181b0:	4e2f      	ldr	r6, [pc, #188]	; (8018270 <SFXDistortionTick+0xc4>)
 80181b2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80181b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80181ba:	4b2e      	ldr	r3, [pc, #184]	; (8018274 <SFXDistortionTick+0xc8>)
 80181bc:	edd6 6ac8 	vldr	s13, [r6, #800]	; 0x320
{
 80181c0:	4683      	mov	fp, r0
	displayValues[4] = presetKnobValues[Distortion][4]; // 15.0f
 80181c2:	f8d6 2330 	ldr.w	r2, [r6, #816]	; 0x330
	displayValues[0] = ((presetKnobValues[Distortion][0] * 20.0f) + 1.0f); // 15.0f
 80181c6:	eee6 7a87 	vfma.f32	s15, s13, s14
	for (int i = 0; i < distOS_ratio; i++)
 80181ca:	4f2b      	ldr	r7, [pc, #172]	; (8018278 <SFXDistortionTick+0xcc>)
	tOversampler_upsample(&oversampler, sample, oversamplerArray);
 80181cc:	492b      	ldr	r1, [pc, #172]	; (801827c <SFXDistortionTick+0xd0>)
{
 80181ce:	ed2d 8b02 	vpush	{d8}
	float sample = input[1];
 80181d2:	ed90 0a01 	vldr	s0, [r0, #4]
	tOversampler_upsample(&oversampler, sample, oversamplerArray);
 80181d6:	482a      	ldr	r0, [pc, #168]	; (8018280 <SFXDistortionTick+0xd4>)
 80181d8:	ee27 0a80 	vmul.f32	s0, s15, s0
	displayValues[4] = presetKnobValues[Distortion][4]; // 15.0f
 80181dc:	611a      	str	r2, [r3, #16]
	displayValues[0] = ((presetKnobValues[Distortion][0] * 20.0f) + 1.0f); // 15.0f
 80181de:	edc3 7a00 	vstr	s15, [r3]
	tOversampler_upsample(&oversampler, sample, oversamplerArray);
 80181e2:	f007 ff0d 	bl	8020000 <tOversampler_upsample>
	for (int i = 0; i < distOS_ratio; i++)
 80181e6:	683b      	ldr	r3, [r7, #0]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	dd2d      	ble.n	8018248 <SFXDistortionTick+0x9c>
 80181ec:	4c23      	ldr	r4, [pc, #140]	; (801827c <SFXDistortionTick+0xd0>)
 80181ee:	2500      	movs	r5, #0
 80181f0:	f8df a098 	ldr.w	sl, [pc, #152]	; 801828c <SFXDistortionTick+0xe0>
		oversamplerArray[i] = tVZFilter_tick(&shelf1, oversamplerArray[i]); //put it through the low shelf
 80181f4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8018290 <SFXDistortionTick+0xe4>
		oversamplerArray[i] = tVZFilter_tick(&shelf2, oversamplerArray[i]); // now put that result through the high shelf
 80181f8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8018294 <SFXDistortionTick+0xe8>
		oversamplerArray[i] = tanhf(oversamplerArray[i] * presetKnobValues[Distortion][4]) * 0.95f;
 80181fc:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8018284 <SFXDistortionTick+0xd8>
		if (distortionMode > 0) oversamplerArray[i] = LEAF_shaper(oversamplerArray[i], 1.0f);
 8018200:	f89a 3000 	ldrb.w	r3, [sl]
 8018204:	ecb4 0a01 	vldmia	r4!, {s0}
 8018208:	bb53      	cbnz	r3, 8018260 <SFXDistortionTick+0xb4>
		else oversamplerArray[i] = tanhf(oversamplerArray[i]);
 801820a:	f00f fdcb 	bl	8027da4 <tanhf>
 801820e:	ed04 0a01 	vstr	s0, [r4, #-4]
		oversamplerArray[i] = tVZFilter_tick(&shelf1, oversamplerArray[i]); //put it through the low shelf
 8018212:	4648      	mov	r0, r9
	for (int i = 0; i < distOS_ratio; i++)
 8018214:	3501      	adds	r5, #1
		oversamplerArray[i] = tVZFilter_tick(&shelf1, oversamplerArray[i]); //put it through the low shelf
 8018216:	f00b f971 	bl	80234fc <tVZFilter_tick>
		oversamplerArray[i] = tVZFilter_tick(&shelf2, oversamplerArray[i]); // now put that result through the high shelf
 801821a:	4640      	mov	r0, r8
		oversamplerArray[i] = tVZFilter_tick(&shelf1, oversamplerArray[i]); //put it through the low shelf
 801821c:	ed04 0a01 	vstr	s0, [r4, #-4]
		oversamplerArray[i] = tVZFilter_tick(&shelf2, oversamplerArray[i]); // now put that result through the high shelf
 8018220:	f00b f96c 	bl	80234fc <tVZFilter_tick>
		oversamplerArray[i] = tVZFilter_tick(&bell1, oversamplerArray[i]); // now add a bell (or peaking eq) filter
 8018224:	4818      	ldr	r0, [pc, #96]	; (8018288 <SFXDistortionTick+0xdc>)
		oversamplerArray[i] = tVZFilter_tick(&shelf2, oversamplerArray[i]); // now put that result through the high shelf
 8018226:	ed04 0a01 	vstr	s0, [r4, #-4]
		oversamplerArray[i] = tVZFilter_tick(&bell1, oversamplerArray[i]); // now add a bell (or peaking eq) filter
 801822a:	f00b f967 	bl	80234fc <tVZFilter_tick>
		oversamplerArray[i] = tanhf(oversamplerArray[i] * presetKnobValues[Distortion][4]) * 0.95f;
 801822e:	edd6 7acc 	vldr	s15, [r6, #816]	; 0x330
 8018232:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018236:	f00f fdb5 	bl	8027da4 <tanhf>
	for (int i = 0; i < distOS_ratio; i++)
 801823a:	683b      	ldr	r3, [r7, #0]
		oversamplerArray[i] = tanhf(oversamplerArray[i] * presetKnobValues[Distortion][4]) * 0.95f;
 801823c:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < distOS_ratio; i++)
 8018240:	42ab      	cmp	r3, r5
		oversamplerArray[i] = tanhf(oversamplerArray[i] * presetKnobValues[Distortion][4]) * 0.95f;
 8018242:	ed04 0a01 	vstr	s0, [r4, #-4]
	for (int i = 0; i < distOS_ratio; i++)
 8018246:	dcdb      	bgt.n	8018200 <SFXDistortionTick+0x54>
	sample = tOversampler_downsample(&oversampler, oversamplerArray);
 8018248:	490c      	ldr	r1, [pc, #48]	; (801827c <SFXDistortionTick+0xd0>)
 801824a:	480d      	ldr	r0, [pc, #52]	; (8018280 <SFXDistortionTick+0xd4>)
 801824c:	f007 ff22 	bl	8020094 <tOversampler_downsample>
	input[0] = sample;
 8018250:	ed8b 0a00 	vstr	s0, [fp]
	input[1] = sample;
 8018254:	ed8b 0a01 	vstr	s0, [fp, #4]
}
 8018258:	ecbd 8b02 	vpop	{d8}
 801825c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (distortionMode > 0) oversamplerArray[i] = LEAF_shaper(oversamplerArray[i], 1.0f);
 8018260:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8018264:	f00c f832 	bl	80242cc <LEAF_shaper>
 8018268:	ed04 0a01 	vstr	s0, [r4, #-4]
 801826c:	e7d1      	b.n	8018212 <SFXDistortionTick+0x66>
 801826e:	bf00      	nop
 8018270:	20016710 	.word	0x20016710
 8018274:	200187c4 	.word	0x200187c4
 8018278:	20000234 	.word	0x20000234
 801827c:	200172a0 	.word	0x200172a0
 8018280:	2001817c 	.word	0x2001817c
 8018284:	3f733333 	.word	0x3f733333
 8018288:	20017374 	.word	0x20017374
 801828c:	2000057c 	.word	0x2000057c
 8018290:	20017534 	.word	0x20017534
 8018294:	2001745c 	.word	0x2001745c

08018298 <SFXDistortionFree>:
{
 8018298:	b508      	push	{r3, lr}
	tOversampler_free(&oversampler);
 801829a:	4807      	ldr	r0, [pc, #28]	; (80182b8 <SFXDistortionFree+0x20>)
 801829c:	f007 fe16 	bl	801fecc <tOversampler_free>
	tVZFilter_free(&shelf1);
 80182a0:	4806      	ldr	r0, [pc, #24]	; (80182bc <SFXDistortionFree+0x24>)
 80182a2:	f00b f91d 	bl	80234e0 <tVZFilter_free>
	tVZFilter_free(&shelf2);
 80182a6:	4806      	ldr	r0, [pc, #24]	; (80182c0 <SFXDistortionFree+0x28>)
 80182a8:	f00b f91a 	bl	80234e0 <tVZFilter_free>
	tVZFilter_free(&bell1);
 80182ac:	4805      	ldr	r0, [pc, #20]	; (80182c4 <SFXDistortionFree+0x2c>)
}
 80182ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tVZFilter_free(&bell1);
 80182b2:	f00b b915 	b.w	80234e0 <tVZFilter_free>
 80182b6:	bf00      	nop
 80182b8:	2001817c 	.word	0x2001817c
 80182bc:	20017534 	.word	0x20017534
 80182c0:	2001745c 	.word	0x2001745c
 80182c4:	20017374 	.word	0x20017374

080182c8 <SFXWaveFolderAlloc>:
{
 80182c8:	b538      	push	{r3, r4, r5, lr}
	tLockhartWavefolder_initToPool(&wavefolder1, &smallPool);
 80182ca:	4c0f      	ldr	r4, [pc, #60]	; (8018308 <SFXWaveFolderAlloc+0x40>)
	leaf.clearOnAllocation = 1;
 80182cc:	2301      	movs	r3, #1
 80182ce:	4d0f      	ldr	r5, [pc, #60]	; (801830c <SFXWaveFolderAlloc+0x44>)
	tLockhartWavefolder_initToPool(&wavefolder1, &smallPool);
 80182d0:	4621      	mov	r1, r4
 80182d2:	480f      	ldr	r0, [pc, #60]	; (8018310 <SFXWaveFolderAlloc+0x48>)
	leaf.clearOnAllocation = 1;
 80182d4:	616b      	str	r3, [r5, #20]
	tLockhartWavefolder_initToPool(&wavefolder1, &smallPool);
 80182d6:	f007 ff0f 	bl	80200f8 <tLockhartWavefolder_initToPool>
	tLockhartWavefolder_initToPool(&wavefolder2, &smallPool);
 80182da:	4621      	mov	r1, r4
 80182dc:	480d      	ldr	r0, [pc, #52]	; (8018314 <SFXWaveFolderAlloc+0x4c>)
 80182de:	f007 ff0b 	bl	80200f8 <tLockhartWavefolder_initToPool>
	tHighpass_initToPool(&wfHP, 10.0f, &smallPool);
 80182e2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80182e6:	4621      	mov	r1, r4
 80182e8:	480b      	ldr	r0, [pc, #44]	; (8018318 <SFXWaveFolderAlloc+0x50>)
 80182ea:	f00a fec3 	bl	8023074 <tHighpass_initToPool>
	tOversampler_initToPool(&oversampler, 2, 0, &smallPool);
 80182ee:	4623      	mov	r3, r4
 80182f0:	2200      	movs	r2, #0
 80182f2:	2102      	movs	r1, #2
 80182f4:	4809      	ldr	r0, [pc, #36]	; (801831c <SFXWaveFolderAlloc+0x54>)
 80182f6:	f007 fd99 	bl	801fe2c <tOversampler_initToPool>
	setLED_A(foldMode);
 80182fa:	4b09      	ldr	r3, [pc, #36]	; (8018320 <SFXWaveFolderAlloc+0x58>)
 80182fc:	7818      	ldrb	r0, [r3, #0]
 80182fe:	f7fb fcdb 	bl	8013cb8 <setLED_A>
	leaf.clearOnAllocation = 0;
 8018302:	2300      	movs	r3, #0
 8018304:	616b      	str	r3, [r5, #20]
}
 8018306:	bd38      	pop	{r3, r4, r5, pc}
 8018308:	20014b2c 	.word	0x20014b2c
 801830c:	200194a0 	.word	0x200194a0
 8018310:	20016150 	.word	0x20016150
 8018314:	20017458 	.word	0x20017458
 8018318:	2001729c 	.word	0x2001729c
 801831c:	2001817c 	.word	0x2001817c
 8018320:	2000058c 	.word	0x2000058c

08018324 <SFXWaveFolderFrame>:
	if (buttonActionsSFX[ButtonA][ActionPress])
 8018324:	4a07      	ldr	r2, [pc, #28]	; (8018344 <SFXWaveFolderFrame+0x20>)
 8018326:	7d13      	ldrb	r3, [r2, #20]
 8018328:	b903      	cbnz	r3, 801832c <SFXWaveFolderFrame+0x8>
}
 801832a:	4770      	bx	lr
		foldMode = !foldMode;
 801832c:	4906      	ldr	r1, [pc, #24]	; (8018348 <SFXWaveFolderFrame+0x24>)
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 801832e:	2000      	movs	r0, #0
		foldMode = !foldMode;
 8018330:	680b      	ldr	r3, [r1, #0]
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 8018332:	7510      	strb	r0, [r2, #20]
		foldMode = !foldMode;
 8018334:	fab3 f383 	clz	r3, r3
 8018338:	095b      	lsrs	r3, r3, #5
		setLED_A(foldMode);
 801833a:	4618      	mov	r0, r3
		foldMode = !foldMode;
 801833c:	600b      	str	r3, [r1, #0]
		setLED_A(foldMode);
 801833e:	f7fb bcbb 	b.w	8013cb8 <setLED_A>
 8018342:	bf00      	nop
 8018344:	20018714 	.word	0x20018714
 8018348:	2000058c 	.word	0x2000058c

0801834c <SFXWaveFolderTick>:
	displayValues[0] = (presetKnobValues[Wavefolder][0] * 4.0f);
 801834c:	4b3a      	ldr	r3, [pc, #232]	; (8018438 <SFXWaveFolderTick+0xec>)
	displayValues[1] = presetKnobValues[Wavefolder][1] - 0.5f;
 801834e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	displayValues[0] = (presetKnobValues[Wavefolder][0] * 4.0f);
 8018352:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
	if (foldMode == 0)
 8018356:	4939      	ldr	r1, [pc, #228]	; (801843c <SFXWaveFolderTick+0xf0>)
{
 8018358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801835c:	ed2d 8b02 	vpush	{d8}
	displayValues[0] = (presetKnobValues[Wavefolder][0] * 4.0f);
 8018360:	ed93 0ae1 	vldr	s0, [r3, #900]	; 0x384
{
 8018364:	4606      	mov	r6, r0
	displayValues[2] = presetKnobValues[Wavefolder][2] - 0.5f;
 8018366:	ed93 7ae3 	vldr	s14, [r3, #908]	; 0x38c
	displayValues[1] = presetKnobValues[Wavefolder][1] - 0.5f;
 801836a:	edd3 7ae2 	vldr	s15, [r3, #904]	; 0x388
	displayValues[0] = (presetKnobValues[Wavefolder][0] * 4.0f);
 801836e:	ee20 0a06 	vmul.f32	s0, s0, s12
	displayValues[2] = presetKnobValues[Wavefolder][2] - 0.5f;
 8018372:	ee37 7a66 	vsub.f32	s14, s14, s13
	float sample = input[1];
 8018376:	ed90 8a01 	vldr	s16, [r0, #4]
	displayValues[1] = presetKnobValues[Wavefolder][1] - 0.5f;
 801837a:	ee77 7ae6 	vsub.f32	s15, s15, s13
	displayValues[0] = (presetKnobValues[Wavefolder][0] * 4.0f);
 801837e:	4c30      	ldr	r4, [pc, #192]	; (8018440 <SFXWaveFolderTick+0xf4>)
	displayValues[3] = presetKnobValues[Wavefolder][3];
 8018380:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
	sample = sample * gain;
 8018384:	ee20 8a08 	vmul.f32	s16, s0, s16
	if (foldMode == 0)
 8018388:	680b      	ldr	r3, [r1, #0]
	displayValues[0] = (presetKnobValues[Wavefolder][0] * 4.0f);
 801838a:	ed84 0a00 	vstr	s0, [r4]
	displayValues[2] = presetKnobValues[Wavefolder][2] - 0.5f;
 801838e:	ed84 7a02 	vstr	s14, [r4, #8]
	displayValues[1] = presetKnobValues[Wavefolder][1] - 0.5f;
 8018392:	edc4 7a01 	vstr	s15, [r4, #4]
	displayValues[3] = presetKnobValues[Wavefolder][3];
 8018396:	60e2      	str	r2, [r4, #12]
	if (foldMode == 0)
 8018398:	bb93      	cbnz	r3, 8018400 <SFXWaveFolderTick+0xb4>
 801839a:	4d2a      	ldr	r5, [pc, #168]	; (8018444 <SFXWaveFolderTick+0xf8>)
		tOversampler_upsample(&oversampler, sample, oversamplerArray);
 801839c:	eeb0 0a48 	vmov.f32	s0, s16
 80183a0:	4829      	ldr	r0, [pc, #164]	; (8018448 <SFXWaveFolderTick+0xfc>)
 80183a2:	4629      	mov	r1, r5
			oversamplerArray[i] = tLockhartWavefolder_tick(&wavefolder1, oversamplerArray[i]);
 80183a4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8018450 <SFXWaveFolderTick+0x104>
 80183a8:	f105 0708 	add.w	r7, r5, #8
		tOversampler_upsample(&oversampler, sample, oversamplerArray);
 80183ac:	f007 fe28 	bl	8020000 <tOversampler_upsample>
			oversamplerArray[i] = sample + displayValues[1];
 80183b0:	edd4 7a01 	vldr	s15, [r4, #4]
			oversamplerArray[i] *= displayValues[0];
 80183b4:	ed94 0a00 	vldr	s0, [r4]
			oversamplerArray[i] = sample + displayValues[1];
 80183b8:	ee78 7a27 	vadd.f32	s15, s16, s15
			oversamplerArray[i] = tanhf(oversamplerArray[i]);
 80183bc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80183c0:	f00f fcf0 	bl	8027da4 <tanhf>
			oversamplerArray[i] = tLockhartWavefolder_tick(&wavefolder1, oversamplerArray[i]);
 80183c4:	4640      	mov	r0, r8
			oversamplerArray[i] = tanhf(oversamplerArray[i]);
 80183c6:	ed85 0a00 	vstr	s0, [r5]
			oversamplerArray[i] = tLockhartWavefolder_tick(&wavefolder1, oversamplerArray[i]);
 80183ca:	f007 ff21 	bl	8020210 <tLockhartWavefolder_tick>
			oversamplerArray[i] = tanhf(oversamplerArray[i]);
 80183ce:	f00f fce9 	bl	8027da4 <tanhf>
 80183d2:	eca5 0a01 	vstmia	r5!, {s0}
		for (int i = 0; i < 2; i++)
 80183d6:	42bd      	cmp	r5, r7
 80183d8:	d1ea      	bne.n	80183b0 <SFXWaveFolderTick+0x64>
		sample = tHighpass_tick(&wfHP, tOversampler_downsample(&oversampler, oversamplerArray)) * displayValues[3];
 80183da:	491a      	ldr	r1, [pc, #104]	; (8018444 <SFXWaveFolderTick+0xf8>)
 80183dc:	481a      	ldr	r0, [pc, #104]	; (8018448 <SFXWaveFolderTick+0xfc>)
 80183de:	f007 fe59 	bl	8020094 <tOversampler_downsample>
		sample = tHighpass_tick(&wfHP, sample) * displayValues[3];
 80183e2:	481a      	ldr	r0, [pc, #104]	; (801844c <SFXWaveFolderTick+0x100>)
 80183e4:	f00a fe7a 	bl	80230dc <tHighpass_tick>
 80183e8:	edd4 7a03 	vldr	s15, [r4, #12]
 80183ec:	ee20 0a27 	vmul.f32	s0, s0, s15
		input[0] = sample;
 80183f0:	ed86 0a00 	vstr	s0, [r6]
		input[1] = sample;
 80183f4:	ed86 0a01 	vstr	s0, [r6, #4]
}
 80183f8:	ecbd 8b02 	vpop	{d8}
 80183fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sample = sample + displayValues[1];
 8018400:	ee77 7a88 	vadd.f32	s15, s15, s16
		sample = LEAF_tanh(sample);
 8018404:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018408:	f00c f80a 	bl	8024420 <LEAF_tanh>
		sample = tLockhartWavefolder_tick(&wavefolder1, sample);
 801840c:	4810      	ldr	r0, [pc, #64]	; (8018450 <SFXWaveFolderTick+0x104>)
 801840e:	f007 feff 	bl	8020210 <tLockhartWavefolder_tick>
		sample = sample + displayValues[2];
 8018412:	edd4 7a02 	vldr	s15, [r4, #8]
		sample *= displayValues[0];
 8018416:	ed94 7a00 	vldr	s14, [r4]
		sample = sample + displayValues[2];
 801841a:	ee30 0a27 	vadd.f32	s0, s0, s15
		sample = LEAF_tanh(sample);
 801841e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018422:	f00b fffd 	bl	8024420 <LEAF_tanh>
		sample = tLockhartWavefolder_tick(&wavefolder2, sample);
 8018426:	480b      	ldr	r0, [pc, #44]	; (8018454 <SFXWaveFolderTick+0x108>)
 8018428:	f007 fef2 	bl	8020210 <tLockhartWavefolder_tick>
		sample = tOversampler_tick(&oversampler, sample, oversampleBuf, &LEAF_tanh);
 801842c:	4a0a      	ldr	r2, [pc, #40]	; (8018458 <SFXWaveFolderTick+0x10c>)
 801842e:	490b      	ldr	r1, [pc, #44]	; (801845c <SFXWaveFolderTick+0x110>)
 8018430:	4805      	ldr	r0, [pc, #20]	; (8018448 <SFXWaveFolderTick+0xfc>)
 8018432:	f007 fd5b 	bl	801feec <tOversampler_tick>
 8018436:	e7d4      	b.n	80183e2 <SFXWaveFolderTick+0x96>
 8018438:	20016710 	.word	0x20016710
 801843c:	2000058c 	.word	0x2000058c
 8018440:	200187c4 	.word	0x200187c4
 8018444:	200172a0 	.word	0x200172a0
 8018448:	2001817c 	.word	0x2001817c
 801844c:	2001729c 	.word	0x2001729c
 8018450:	20016150 	.word	0x20016150
 8018454:	20017458 	.word	0x20017458
 8018458:	08024421 	.word	0x08024421
 801845c:	2001832c 	.word	0x2001832c

08018460 <SFXWaveFolderFree>:
{
 8018460:	b508      	push	{r3, lr}
	tLockhartWavefolder_free(&wavefolder1);
 8018462:	4807      	ldr	r0, [pc, #28]	; (8018480 <SFXWaveFolderFree+0x20>)
 8018464:	f007 fed0 	bl	8020208 <tLockhartWavefolder_free>
	tLockhartWavefolder_free(&wavefolder2);
 8018468:	4806      	ldr	r0, [pc, #24]	; (8018484 <SFXWaveFolderFree+0x24>)
 801846a:	f007 fecd 	bl	8020208 <tLockhartWavefolder_free>
	tHighpass_free(&wfHP);
 801846e:	4806      	ldr	r0, [pc, #24]	; (8018488 <SFXWaveFolderFree+0x28>)
 8018470:	f00a fe20 	bl	80230b4 <tHighpass_free>
	tOversampler_free(&oversampler);
 8018474:	4805      	ldr	r0, [pc, #20]	; (801848c <SFXWaveFolderFree+0x2c>)
}
 8018476:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tOversampler_free(&oversampler);
 801847a:	f007 bd27 	b.w	801fecc <tOversampler_free>
 801847e:	bf00      	nop
 8018480:	20016150 	.word	0x20016150
 8018484:	20017458 	.word	0x20017458
 8018488:	2001729c 	.word	0x2001729c
 801848c:	2001817c 	.word	0x2001817c

08018490 <SFXBitcrusherAlloc>:
{
 8018490:	b510      	push	{r4, lr}
	tCrusher_initToPool(&crush, &smallPool);
 8018492:	4c07      	ldr	r4, [pc, #28]	; (80184b0 <SFXBitcrusherAlloc+0x20>)
 8018494:	4807      	ldr	r0, [pc, #28]	; (80184b4 <SFXBitcrusherAlloc+0x24>)
 8018496:	4621      	mov	r1, r4
 8018498:	f007 ffd2 	bl	8020440 <tCrusher_initToPool>
	tCrusher_initToPool(&crush2, &smallPool);
 801849c:	4621      	mov	r1, r4
 801849e:	4806      	ldr	r0, [pc, #24]	; (80184b8 <SFXBitcrusherAlloc+0x28>)
 80184a0:	f007 ffce 	bl	8020440 <tCrusher_initToPool>
	setLED_A(crusherStereo);
 80184a4:	4b05      	ldr	r3, [pc, #20]	; (80184bc <SFXBitcrusherAlloc+0x2c>)
}
 80184a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	setLED_A(crusherStereo);
 80184aa:	7818      	ldrb	r0, [r3, #0]
 80184ac:	f7fb bc04 	b.w	8013cb8 <setLED_A>
 80184b0:	20014b2c 	.word	0x20014b2c
 80184b4:	20016e60 	.word	0x20016e60
 80184b8:	2001642c 	.word	0x2001642c
 80184bc:	20000568 	.word	0x20000568

080184c0 <SFXBitcrusherFrame>:
	if (buttonActionsSFX[ButtonA][ActionPress])
 80184c0:	4a07      	ldr	r2, [pc, #28]	; (80184e0 <SFXBitcrusherFrame+0x20>)
 80184c2:	7d13      	ldrb	r3, [r2, #20]
 80184c4:	b903      	cbnz	r3, 80184c8 <SFXBitcrusherFrame+0x8>
}
 80184c6:	4770      	bx	lr
		crusherStereo = !crusherStereo;
 80184c8:	4906      	ldr	r1, [pc, #24]	; (80184e4 <SFXBitcrusherFrame+0x24>)
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 80184ca:	2000      	movs	r0, #0
		crusherStereo = !crusherStereo;
 80184cc:	680b      	ldr	r3, [r1, #0]
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 80184ce:	7510      	strb	r0, [r2, #20]
		crusherStereo = !crusherStereo;
 80184d0:	fab3 f383 	clz	r3, r3
 80184d4:	095b      	lsrs	r3, r3, #5
		setLED_A(crusherStereo);
 80184d6:	4618      	mov	r0, r3
		crusherStereo = !crusherStereo;
 80184d8:	600b      	str	r3, [r1, #0]
		setLED_A(crusherStereo);
 80184da:	f7fb bbed 	b.w	8013cb8 <setLED_A>
 80184de:	bf00      	nop
 80184e0:	20018714 	.word	0x20018714
 80184e4:	20000568 	.word	0x20000568

080184e8 <SFXBitcrusherTick>:
{
 80184e8:	b570      	push	{r4, r5, r6, lr}
	displayValues[0] = (presetKnobValues[BitCrusher][0] * 0.99f )+ 0.01f;
 80184ea:	4d51      	ldr	r5, [pc, #324]	; (8018630 <SFXBitcrusherTick+0x148>)
{
 80184ec:	4606      	mov	r6, r0
	displayValues[0] = (presetKnobValues[BitCrusher][0] * 0.99f )+ 0.01f;
 80184ee:	eddf 6a51 	vldr	s13, [pc, #324]	; 8018634 <SFXBitcrusherTick+0x14c>
 80184f2:	ed95 7afa 	vldr	s14, [r5, #1000]	; 0x3e8
 80184f6:	eddf 7a50 	vldr	s15, [pc, #320]	; 8018638 <SFXBitcrusherTick+0x150>
 80184fa:	4c50      	ldr	r4, [pc, #320]	; (801863c <SFXBitcrusherTick+0x154>)
	tCrusher_setQuality (&crush, presetKnobValues[BitCrusher][0]);
 80184fc:	eeb0 0a47 	vmov.f32	s0, s14
	displayValues[0] = (presetKnobValues[BitCrusher][0] * 0.99f )+ 0.01f;
 8018500:	eee7 7a26 	vfma.f32	s15, s14, s13
	tCrusher_setQuality (&crush, presetKnobValues[BitCrusher][0]);
 8018504:	484e      	ldr	r0, [pc, #312]	; (8018640 <SFXBitcrusherTick+0x158>)
{
 8018506:	ed2d 8b02 	vpush	{d8}
	tCrusher_setSamplingRatio (&crush, presetKnobValues[BitCrusher][1] * 0.5f);
 801850a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	displayValues[2] = presetKnobValues[BitCrusher][2] * 0.1f;
 801850e:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 8018644 <SFXBitcrusherTick+0x15c>
	displayValues[0] = (presetKnobValues[BitCrusher][0] * 0.99f )+ 0.01f;
 8018512:	edc4 7a00 	vstr	s15, [r4]
	tCrusher_setQuality (&crush, presetKnobValues[BitCrusher][0]);
 8018516:	f008 f81b 	bl	8020550 <tCrusher_setQuality>
	tCrusher_setQuality (&crush2, presetKnobValues[BitCrusher][0]);
 801851a:	ed95 0afa 	vldr	s0, [r5, #1000]	; 0x3e8
 801851e:	484a      	ldr	r0, [pc, #296]	; (8018648 <SFXBitcrusherTick+0x160>)
 8018520:	f008 f816 	bl	8020550 <tCrusher_setQuality>
	displayValues[1] = presetKnobValues[BitCrusher][1];
 8018524:	edd5 7afb 	vldr	s15, [r5, #1004]	; 0x3ec
	tCrusher_setSamplingRatio (&crush, presetKnobValues[BitCrusher][1] * 0.5f);
 8018528:	4845      	ldr	r0, [pc, #276]	; (8018640 <SFXBitcrusherTick+0x158>)
 801852a:	ee27 0aa8 	vmul.f32	s0, s15, s17
	displayValues[1] = presetKnobValues[BitCrusher][1];
 801852e:	edc4 7a01 	vstr	s15, [r4, #4]
	tCrusher_setSamplingRatio (&crush, presetKnobValues[BitCrusher][1] * 0.5f);
 8018532:	f008 f839 	bl	80205a8 <tCrusher_setSamplingRatio>
	tCrusher_setSamplingRatio (&crush2, presetKnobValues[BitCrusher][1] * 0.5f);
 8018536:	ed95 0afb 	vldr	s0, [r5, #1004]	; 0x3ec
 801853a:	4843      	ldr	r0, [pc, #268]	; (8018648 <SFXBitcrusherTick+0x160>)
 801853c:	ee20 0a28 	vmul.f32	s0, s0, s17
 8018540:	f008 f832 	bl	80205a8 <tCrusher_setSamplingRatio>
	displayValues[2] = presetKnobValues[BitCrusher][2] * 0.1f;
 8018544:	edd5 7afc 	vldr	s15, [r5, #1008]	; 0x3f0
	tCrusher_setRound (&crush, displayValues[2]);
 8018548:	483d      	ldr	r0, [pc, #244]	; (8018640 <SFXBitcrusherTick+0x158>)
	displayValues[2] = presetKnobValues[BitCrusher][2] * 0.1f;
 801854a:	ee67 7a88 	vmul.f32	s15, s15, s16
	tCrusher_setRound (&crush, displayValues[2]);
 801854e:	eeb0 0a67 	vmov.f32	s0, s15
	displayValues[2] = presetKnobValues[BitCrusher][2] * 0.1f;
 8018552:	edc4 7a02 	vstr	s15, [r4, #8]
	tCrusher_setRound (&crush, displayValues[2]);
 8018556:	f008 f821 	bl	802059c <tCrusher_setRound>
	tCrusher_setRound (&crush2, displayValues[2]);
 801855a:	ed94 0a02 	vldr	s0, [r4, #8]
 801855e:	483a      	ldr	r0, [pc, #232]	; (8018648 <SFXBitcrusherTick+0x160>)
 8018560:	f008 f81c 	bl	802059c <tCrusher_setRound>
	displayValues[3] = (uint32_t) (presetKnobValues[BitCrusher][3] * 8.0f);
 8018564:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8018568:	ed95 0afd 	vldr	s0, [r5, #1012]	; 0x3f4
	tCrusher_setOperation (&crush, presetKnobValues[BitCrusher][3]);
 801856c:	4834      	ldr	r0, [pc, #208]	; (8018640 <SFXBitcrusherTick+0x158>)
	displayValues[3] = (uint32_t) (presetKnobValues[BitCrusher][3] * 8.0f);
 801856e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801857a:	edc4 7a03 	vstr	s15, [r4, #12]
	tCrusher_setOperation (&crush, presetKnobValues[BitCrusher][3]);
 801857e:	f007 ffdd 	bl	802053c <tCrusher_setOperation>
	tCrusher_setOperation (&crush2, presetKnobValues[BitCrusher][3]);
 8018582:	ed95 0afd 	vldr	s0, [r5, #1012]	; 0x3f4
 8018586:	4830      	ldr	r0, [pc, #192]	; (8018648 <SFXBitcrusherTick+0x160>)
 8018588:	f007 ffd8 	bl	802053c <tCrusher_setOperation>
	displayValues[5] = (presetKnobValues[BitCrusher][5] * 5.0f) + 1.0f;
 801858c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018590:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8018594:	ed95 6aff 	vldr	s12, [r5, #1020]	; 0x3fc
	if (displayValues[0] < 0.1f)
 8018598:	edd4 6a00 	vldr	s13, [r4]
	displayValues[5] = (presetKnobValues[BitCrusher][5] * 5.0f) + 1.0f;
 801859c:	eef0 5a67 	vmov.f32	s11, s15
	displayValues[4] = presetKnobValues[BitCrusher][4];
 80185a0:	f8d5 33f8 	ldr.w	r3, [r5, #1016]	; 0x3f8
	if (displayValues[0] < 0.1f)
 80185a4:	eef4 6ac8 	vcmpe.f32	s13, s16
	displayValues[4] = presetKnobValues[BitCrusher][4];
 80185a8:	6123      	str	r3, [r4, #16]
	displayValues[5] = (presetKnobValues[BitCrusher][5] * 5.0f) + 1.0f;
 80185aa:	eee6 5a07 	vfma.f32	s11, s12, s14
	if (displayValues[0] < 0.1f)
 80185ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	displayValues[5] = (presetKnobValues[BitCrusher][5] * 5.0f) + 1.0f;
 80185b2:	eeb0 7a65 	vmov.f32	s14, s11
 80185b6:	edc4 5a05 	vstr	s11, [r4, #20]
	if (displayValues[0] < 0.1f)
 80185ba:	d41e      	bmi.n	80185fa <SFXBitcrusherTick+0x112>
		volumeComp = (1.0f / (displayValues[3] + 1.0f));
 80185bc:	edd4 6a03 	vldr	s13, [r4, #12]
 80185c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80185c4:	eec7 8aa6 	vdiv.f32	s17, s15, s13
	sample = tanhf(tCrusher_tick(&crush, input[1] * displayValues[5])) * displayValues[4] * volumeComp;
 80185c8:	ed96 0a01 	vldr	s0, [r6, #4]
 80185cc:	481c      	ldr	r0, [pc, #112]	; (8018640 <SFXBitcrusherTick+0x158>)
 80185ce:	ee27 0a00 	vmul.f32	s0, s14, s0
 80185d2:	f007 ff73 	bl	80204bc <tCrusher_tick>
 80185d6:	f00f fbe5 	bl	8027da4 <tanhf>
	if (crusherStereo)
 80185da:	4b1c      	ldr	r3, [pc, #112]	; (801864c <SFXBitcrusherTick+0x164>)
	sample = tanhf(tCrusher_tick(&crush, input[1] * displayValues[5])) * displayValues[4] * volumeComp;
 80185dc:	ee20 0a28 	vmul.f32	s0, s0, s17
 80185e0:	ed94 8a04 	vldr	s16, [r4, #16]
	if (crusherStereo)
 80185e4:	681b      	ldr	r3, [r3, #0]
	sample = tanhf(tCrusher_tick(&crush, input[1] * displayValues[5])) * displayValues[4] * volumeComp;
 80185e6:	ee20 8a08 	vmul.f32	s16, s0, s16
	if (crusherStereo)
 80185ea:	b94b      	cbnz	r3, 8018600 <SFXBitcrusherTick+0x118>
		input[1] = sample;
 80185ec:	ed86 8a01 	vstr	s16, [r6, #4]
	input[0] = sample;
 80185f0:	ed86 8a00 	vstr	s16, [r6]
}
 80185f4:	ecbd 8b02 	vpop	{d8}
 80185f8:	bd70      	pop	{r4, r5, r6, pc}
		volumeComp = 1.0f;
 80185fa:	eef0 8a67 	vmov.f32	s17, s15
 80185fe:	e7e3      	b.n	80185c8 <SFXBitcrusherTick+0xe0>
		input[1] = tanhf(tCrusher_tick(&crush2, input[0] * displayValues[5])) * displayValues[4] * volumeComp;
 8018600:	edd4 7a05 	vldr	s15, [r4, #20]
 8018604:	ed96 0a00 	vldr	s0, [r6]
 8018608:	480f      	ldr	r0, [pc, #60]	; (8018648 <SFXBitcrusherTick+0x160>)
 801860a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801860e:	f007 ff55 	bl	80204bc <tCrusher_tick>
 8018612:	f00f fbc7 	bl	8027da4 <tanhf>
 8018616:	edd4 7a04 	vldr	s15, [r4, #16]
	input[0] = sample;
 801861a:	ed86 8a00 	vstr	s16, [r6]
		input[1] = tanhf(tCrusher_tick(&crush2, input[0] * displayValues[5])) * displayValues[4] * volumeComp;
 801861e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8018622:	ee68 8a80 	vmul.f32	s17, s17, s0
 8018626:	edc6 8a01 	vstr	s17, [r6, #4]
}
 801862a:	ecbd 8b02 	vpop	{d8}
 801862e:	bd70      	pop	{r4, r5, r6, pc}
 8018630:	20016710 	.word	0x20016710
 8018634:	3f7d70a4 	.word	0x3f7d70a4
 8018638:	3c23d70a 	.word	0x3c23d70a
 801863c:	200187c4 	.word	0x200187c4
 8018640:	20016e60 	.word	0x20016e60
 8018644:	3dcccccd 	.word	0x3dcccccd
 8018648:	2001642c 	.word	0x2001642c
 801864c:	20000568 	.word	0x20000568

08018650 <SFXBitcrusherFree>:
{
 8018650:	b508      	push	{r3, lr}
	tCrusher_free(&crush);
 8018652:	4804      	ldr	r0, [pc, #16]	; (8018664 <SFXBitcrusherFree+0x14>)
 8018654:	f007 ff26 	bl	80204a4 <tCrusher_free>
	tCrusher_free(&crush2);
 8018658:	4803      	ldr	r0, [pc, #12]	; (8018668 <SFXBitcrusherFree+0x18>)
}
 801865a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tCrusher_free(&crush2);
 801865e:	f007 bf21 	b.w	80204a4 <tCrusher_free>
 8018662:	bf00      	nop
 8018664:	20016e60 	.word	0x20016e60
 8018668:	2001642c 	.word	0x2001642c

0801866c <SFXDelayAlloc>:
{
 801866c:	b570      	push	{r4, r5, r6, lr}
 801866e:	ed2d 8b04 	vpush	{d8-d9}
	tTapeDelay_init(&delay, 2000, 30000);
 8018672:	ed9f 9a2a 	vldr	s18, [pc, #168]	; 801871c <SFXDelayAlloc+0xb0>
	leaf.clearOnAllocation = 1;
 8018676:	2501      	movs	r5, #1
 8018678:	4e29      	ldr	r6, [pc, #164]	; (8018720 <SFXDelayAlloc+0xb4>)
	tTapeDelay_init(&delay, 2000, 30000);
 801867a:	f247 5130 	movw	r1, #30000	; 0x7530
	tSVF_init(&delayLP, SVFTypeLowpass, 16000.f, .7f);
 801867e:	ed9f 8a29 	vldr	s16, [pc, #164]	; 8018724 <SFXDelayAlloc+0xb8>
	tTapeDelay_init(&delay, 2000, 30000);
 8018682:	eeb0 0a49 	vmov.f32	s0, s18
	tSVF_init(&delayLP, SVFTypeLowpass, 16000.f, .7f);
 8018686:	eddf 8a28 	vldr	s17, [pc, #160]	; 8018728 <SFXDelayAlloc+0xbc>
	delayShaper = 0;
 801868a:	2400      	movs	r4, #0
	tTapeDelay_init(&delay, 2000, 30000);
 801868c:	4827      	ldr	r0, [pc, #156]	; (801872c <SFXDelayAlloc+0xc0>)
	leaf.clearOnAllocation = 1;
 801868e:	6175      	str	r5, [r6, #20]
	tTapeDelay_init(&delay, 2000, 30000);
 8018690:	f007 fa8a 	bl	801fba8 <tTapeDelay_init>
	tTapeDelay_init(&delay2, 2000, 30000);
 8018694:	eeb0 0a49 	vmov.f32	s0, s18
 8018698:	f247 5130 	movw	r1, #30000	; 0x7530
 801869c:	4824      	ldr	r0, [pc, #144]	; (8018730 <SFXDelayAlloc+0xc4>)
 801869e:	f007 fa83 	bl	801fba8 <tTapeDelay_init>
	tSVF_init(&delayLP, SVFTypeLowpass, 16000.f, .7f);
 80186a2:	eef0 0a48 	vmov.f32	s1, s16
 80186a6:	eeb0 0a68 	vmov.f32	s0, s17
 80186aa:	4629      	mov	r1, r5
 80186ac:	4821      	ldr	r0, [pc, #132]	; (8018734 <SFXDelayAlloc+0xc8>)
 80186ae:	f00a fb11 	bl	8022cd4 <tSVF_init>
	tSVF_init(&delayHP, SVFTypeHighpass, 20.f, .7f);
 80186b2:	eef0 0a48 	vmov.f32	s1, s16
 80186b6:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80186ba:	4621      	mov	r1, r4
 80186bc:	481e      	ldr	r0, [pc, #120]	; (8018738 <SFXDelayAlloc+0xcc>)
 80186be:	f00a fb09 	bl	8022cd4 <tSVF_init>
	tSVF_init(&delayLP2, SVFTypeLowpass, 16000.f, .7f);
 80186c2:	eef0 0a48 	vmov.f32	s1, s16
 80186c6:	eeb0 0a68 	vmov.f32	s0, s17
 80186ca:	4629      	mov	r1, r5
 80186cc:	481b      	ldr	r0, [pc, #108]	; (801873c <SFXDelayAlloc+0xd0>)
 80186ce:	f00a fb01 	bl	8022cd4 <tSVF_init>
	tSVF_init(&delayHP2, SVFTypeHighpass, 20.f, .7f);
 80186d2:	eef0 0a48 	vmov.f32	s1, s16
 80186d6:	4621      	mov	r1, r4
 80186d8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80186dc:	4818      	ldr	r0, [pc, #96]	; (8018740 <SFXDelayAlloc+0xd4>)
 80186de:	f00a faf9 	bl	8022cd4 <tSVF_init>
	tHighpass_init(&delayShaperHp, 20.0f);
 80186e2:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80186e6:	4817      	ldr	r0, [pc, #92]	; (8018744 <SFXDelayAlloc+0xd8>)
 80186e8:	f00a fca4 	bl	8023034 <tHighpass_init>
	tFeedbackLeveler_init(&feedbackControl, .99f, 0.01, 0.125f, 0);
 80186ec:	4621      	mov	r1, r4
 80186ee:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 80186f2:	eddf 0a15 	vldr	s1, [pc, #84]	; 8018748 <SFXDelayAlloc+0xdc>
 80186f6:	ed9f 0a15 	vldr	s0, [pc, #84]	; 801874c <SFXDelayAlloc+0xe0>
 80186fa:	4815      	ldr	r0, [pc, #84]	; (8018750 <SFXDelayAlloc+0xe4>)
 80186fc:	f007 ff6a 	bl	80205d4 <tFeedbackLeveler_init>
	capFeedback = 1;
 8018700:	4b14      	ldr	r3, [pc, #80]	; (8018754 <SFXDelayAlloc+0xe8>)
	delayShaper = 0;
 8018702:	4a15      	ldr	r2, [pc, #84]	; (8018758 <SFXDelayAlloc+0xec>)
	setLED_A(delayShaper);
 8018704:	4620      	mov	r0, r4
	capFeedback = 1;
 8018706:	701d      	strb	r5, [r3, #0]
	freeze = 0;
 8018708:	4b14      	ldr	r3, [pc, #80]	; (801875c <SFXDelayAlloc+0xf0>)
	delayShaper = 0;
 801870a:	6014      	str	r4, [r2, #0]
	freeze = 0;
 801870c:	601c      	str	r4, [r3, #0]
	setLED_A(delayShaper);
 801870e:	f7fb fad3 	bl	8013cb8 <setLED_A>
	leaf.clearOnAllocation = 0;
 8018712:	6174      	str	r4, [r6, #20]
}
 8018714:	ecbd 8b04 	vpop	{d8-d9}
 8018718:	bd70      	pop	{r4, r5, r6, pc}
 801871a:	bf00      	nop
 801871c:	44fa0000 	.word	0x44fa0000
 8018720:	200194a0 	.word	0x200194a0
 8018724:	3f333333 	.word	0x3f333333
 8018728:	467a0000 	.word	0x467a0000
 801872c:	200177b0 	.word	0x200177b0
 8018730:	20017058 	.word	0x20017058
 8018734:	200176cc 	.word	0x200176cc
 8018738:	20017310 	.word	0x20017310
 801873c:	20017644 	.word	0x20017644
 8018740:	20017558 	.word	0x20017558
 8018744:	20017540 	.word	0x20017540
 8018748:	3c23d70a 	.word	0x3c23d70a
 801874c:	3f7d70a4 	.word	0x3f7d70a4
 8018750:	20017378 	.word	0x20017378
 8018754:	20000528 	.word	0x20000528
 8018758:	20000578 	.word	0x20000578
 801875c:	20000590 	.word	0x20000590

08018760 <SFXDelayFrame>:
{
 8018760:	b510      	push	{r4, lr}
	if (buttonActionsSFX[ButtonA][ActionPress])
 8018762:	4c14      	ldr	r4, [pc, #80]	; (80187b4 <SFXDelayFrame+0x54>)
 8018764:	7d23      	ldrb	r3, [r4, #20]
 8018766:	b9cb      	cbnz	r3, 801879c <SFXDelayFrame+0x3c>
	if (buttonActionsSFX[ButtonB][ActionPress])
 8018768:	7e23      	ldrb	r3, [r4, #24]
 801876a:	b13b      	cbz	r3, 801877c <SFXDelayFrame+0x1c>
		capFeedback = !capFeedback;
 801876c:	4a12      	ldr	r2, [pc, #72]	; (80187b8 <SFXDelayFrame+0x58>)
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 801876e:	2100      	movs	r1, #0
		capFeedback = !capFeedback;
 8018770:	7813      	ldrb	r3, [r2, #0]
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 8018772:	7621      	strb	r1, [r4, #24]
		capFeedback = !capFeedback;
 8018774:	fab3 f383 	clz	r3, r3
 8018778:	095b      	lsrs	r3, r3, #5
 801877a:	7013      	strb	r3, [r2, #0]
	if (buttonActionsSFX[ButtonC][ActionPress])
 801877c:	7f23      	ldrb	r3, [r4, #28]
 801877e:	b903      	cbnz	r3, 8018782 <SFXDelayFrame+0x22>
}
 8018780:	bd10      	pop	{r4, pc}
		freeze = !freeze;
 8018782:	4a0e      	ldr	r2, [pc, #56]	; (80187bc <SFXDelayFrame+0x5c>)
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8018784:	2100      	movs	r1, #0
		freeze = !freeze;
 8018786:	6813      	ldr	r3, [r2, #0]
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8018788:	7721      	strb	r1, [r4, #28]
		freeze = !freeze;
 801878a:	fab3 f383 	clz	r3, r3
 801878e:	095b      	lsrs	r3, r3, #5
 8018790:	6013      	str	r3, [r2, #0]
		setLED_C(freeze);
 8018792:	4618      	mov	r0, r3
}
 8018794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		setLED_C(freeze);
 8018798:	f7fb baaa 	b.w	8013cf0 <setLED_C>
		delayShaper = !delayShaper;
 801879c:	4a08      	ldr	r2, [pc, #32]	; (80187c0 <SFXDelayFrame+0x60>)
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 801879e:	2100      	movs	r1, #0
		delayShaper = !delayShaper;
 80187a0:	6813      	ldr	r3, [r2, #0]
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 80187a2:	7521      	strb	r1, [r4, #20]
		delayShaper = !delayShaper;
 80187a4:	fab3 f383 	clz	r3, r3
 80187a8:	095b      	lsrs	r3, r3, #5
		setLED_A(delayShaper);
 80187aa:	4618      	mov	r0, r3
		delayShaper = !delayShaper;
 80187ac:	6013      	str	r3, [r2, #0]
		setLED_A(delayShaper);
 80187ae:	f7fb fa83 	bl	8013cb8 <setLED_A>
 80187b2:	e7d9      	b.n	8018768 <SFXDelayFrame+0x8>
 80187b4:	20018714 	.word	0x20018714
 80187b8:	20000528 	.word	0x20000528
 80187bc:	20000590 	.word	0x20000590
 80187c0:	20000578 	.word	0x20000578

080187c4 <SFXDelayTick>:
{
 80187c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	displayValues[0] = presetKnobValues[Delay][0] * 30000.0f;
 80187c6:	4d88      	ldr	r5, [pc, #544]	; (80189e8 <SFXDelayTick+0x224>)
{
 80187c8:	4607      	mov	r7, r0
	displayValues[0] = presetKnobValues[Delay][0] * 30000.0f;
 80187ca:	eddf 6a88 	vldr	s13, [pc, #544]	; 80189ec <SFXDelayTick+0x228>
 80187ce:	462b      	mov	r3, r5
 80187d0:	4c87      	ldr	r4, [pc, #540]	; (80189f0 <SFXDelayTick+0x22c>)
{
 80187d2:	ed2d 8b02 	vpush	{d8}
	displayValues[2] = faster_mtof((presetKnobValues[Delay][2] * 128) + 10.0f);
 80187d6:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
	displayValues[0] = presetKnobValues[Delay][0] * 30000.0f;
 80187da:	ecb3 7a01 	vldmia	r3!, {s14}
	displayValues[2] = faster_mtof((presetKnobValues[Delay][2] * 128) + 10.0f);
 80187de:	edd5 7a02 	vldr	s15, [r5, #8]
 80187e2:	eddf 8a84 	vldr	s17, [pc, #528]	; 80189f4 <SFXDelayTick+0x230>
	displayValues[0] = presetKnobValues[Delay][0] * 30000.0f;
 80187e6:	ee27 7a26 	vmul.f32	s14, s14, s13
	displayValues[2] = faster_mtof((presetKnobValues[Delay][2] * 128) + 10.0f);
 80187ea:	eeb0 0a48 	vmov.f32	s0, s16
	displayValues[0] = presetKnobValues[Delay][0] * 30000.0f;
 80187ee:	ed84 7a00 	vstr	s14, [r4]
	displayValues[2] = faster_mtof((presetKnobValues[Delay][2] * 128) + 10.0f);
 80187f2:	eea7 0aa8 	vfma.f32	s0, s15, s17
	displayValues[1] = presetKnobValues[Delay][1] * 30000.0f;
 80187f6:	edd3 7a00 	vldr	s15, [r3]
 80187fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80187fe:	edc4 7a01 	vstr	s15, [r4, #4]
	displayValues[2] = faster_mtof((presetKnobValues[Delay][2] * 128) + 10.0f);
 8018802:	f00b ff2b 	bl	802465c <faster_mtof>
 8018806:	ed84 0a02 	vstr	s0, [r4, #8]
	displayValues[3] = faster_mtof((presetKnobValues[Delay][3] * 128) + 10.0f);
 801880a:	eeb0 0a48 	vmov.f32	s0, s16
 801880e:	edd5 7a03 	vldr	s15, [r5, #12]
 8018812:	eea7 0aa8 	vfma.f32	s0, s15, s17
 8018816:	f00b ff21 	bl	802465c <faster_mtof>
	displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Delay][4] * 1.1f, 0.9f) : presetKnobValues[Delay][4] * 1.1f;
 801881a:	4b77      	ldr	r3, [pc, #476]	; (80189f8 <SFXDelayTick+0x234>)
	displayValues[3] = faster_mtof((presetKnobValues[Delay][3] * 128) + 10.0f);
 801881c:	ed84 0a03 	vstr	s0, [r4, #12]
	displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Delay][4] * 1.1f, 0.9f) : presetKnobValues[Delay][4] * 1.1f;
 8018820:	781b      	ldrb	r3, [r3, #0]
 8018822:	2b00      	cmp	r3, #0
 8018824:	f040 80d1 	bne.w	80189ca <SFXDelayTick+0x206>
 8018828:	edd5 7a04 	vldr	s15, [r5, #16]
 801882c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80189fc <SFXDelayTick+0x238>
 8018830:	ee67 7a87 	vmul.f32	s15, s15, s14
	displayValues[5] = presetKnobValues[Delay][5];
 8018834:	4b72      	ldr	r3, [pc, #456]	; (8018a00 <SFXDelayTick+0x23c>)
	tSVF_setFreq(&delayHP, displayValues[2]);
 8018836:	ed94 0a02 	vldr	s0, [r4, #8]
	displayValues[5] = presetKnobValues[Delay][5];
 801883a:	681b      	ldr	r3, [r3, #0]
	tSVF_setFreq(&delayHP, displayValues[2]);
 801883c:	4871      	ldr	r0, [pc, #452]	; (8018a04 <SFXDelayTick+0x240>)
	displayValues[5] = presetKnobValues[Delay][5];
 801883e:	6163      	str	r3, [r4, #20]
	displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Delay][4] * 1.1f, 0.9f) : presetKnobValues[Delay][4] * 1.1f;
 8018840:	edc4 7a04 	vstr	s15, [r4, #16]
	tSVF_setFreq(&delayHP, displayValues[2]);
 8018844:	f00a fafa 	bl	8022e3c <tSVF_setFreq>
	tSVF_setFreq(&delayHP2, displayValues[2]);
 8018848:	ed94 0a02 	vldr	s0, [r4, #8]
 801884c:	486e      	ldr	r0, [pc, #440]	; (8018a08 <SFXDelayTick+0x244>)
 801884e:	f00a faf5 	bl	8022e3c <tSVF_setFreq>
	tSVF_setFreq(&delayLP, displayValues[3]);
 8018852:	ed94 0a03 	vldr	s0, [r4, #12]
 8018856:	486d      	ldr	r0, [pc, #436]	; (8018a0c <SFXDelayTick+0x248>)
 8018858:	f00a faf0 	bl	8022e3c <tSVF_setFreq>
	tSVF_setFreq(&delayLP2, displayValues[3]);
 801885c:	ed94 0a03 	vldr	s0, [r4, #12]
 8018860:	486b      	ldr	r0, [pc, #428]	; (8018a10 <SFXDelayTick+0x24c>)
 8018862:	f00a faeb 	bl	8022e3c <tSVF_setFreq>
	if (delayShaper == 0)
 8018866:	4b6b      	ldr	r3, [pc, #428]	; (8018a14 <SFXDelayTick+0x250>)
		input1 = tFeedbackLeveler_tick(&feedbackControl, tanhf(input[1] + (delayFB1 * displayValues[4])));
 8018868:	4e6b      	ldr	r6, [pc, #428]	; (8018a18 <SFXDelayTick+0x254>)
	if (delayShaper == 0)
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d16d      	bne.n	801894c <SFXDelayTick+0x188>
		input1 = tFeedbackLeveler_tick(&feedbackControl, tanhf(input[1] + (delayFB1 * displayValues[4])));
 8018870:	ed94 7a04 	vldr	s14, [r4, #16]
 8018874:	edd6 7a00 	vldr	s15, [r6]
 8018878:	ed97 0a01 	vldr	s0, [r7, #4]
		input2 = tFeedbackLeveler_tick(&feedbackControl, tanhf(input[1] + (delayFB2 * displayValues[4])));
 801887c:	4d67      	ldr	r5, [pc, #412]	; (8018a1c <SFXDelayTick+0x258>)
		input1 = tFeedbackLeveler_tick(&feedbackControl, tanhf(input[1] + (delayFB1 * displayValues[4])));
 801887e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8018882:	f00f fa8f 	bl	8027da4 <tanhf>
 8018886:	4866      	ldr	r0, [pc, #408]	; (8018a20 <SFXDelayTick+0x25c>)
 8018888:	f007 ff06 	bl	8020698 <tFeedbackLeveler_tick>
		input2 = tFeedbackLeveler_tick(&feedbackControl, tanhf(input[1] + (delayFB2 * displayValues[4])));
 801888c:	edd5 7a00 	vldr	s15, [r5]
 8018890:	ed94 7a04 	vldr	s14, [r4, #16]
		input1 = tFeedbackLeveler_tick(&feedbackControl, tanhf(input[1] + (delayFB1 * displayValues[4])));
 8018894:	eef0 8a40 	vmov.f32	s17, s0
		input2 = tFeedbackLeveler_tick(&feedbackControl, tanhf(input[1] + (delayFB2 * displayValues[4])));
 8018898:	ed97 0a01 	vldr	s0, [r7, #4]
 801889c:	eea7 0a27 	vfma.f32	s0, s14, s15
 80188a0:	f00f fa80 	bl	8027da4 <tanhf>
 80188a4:	485e      	ldr	r0, [pc, #376]	; (8018a20 <SFXDelayTick+0x25c>)
 80188a6:	f007 fef7 	bl	8020698 <tFeedbackLeveler_tick>
 80188aa:	eeb0 8a40 	vmov.f32	s16, s0
	tTapeDelay_setDelay(&delay, displayValues[0]);
 80188ae:	ed94 0a00 	vldr	s0, [r4]
 80188b2:	485c      	ldr	r0, [pc, #368]	; (8018a24 <SFXDelayTick+0x260>)
 80188b4:	f007 fa60 	bl	801fd78 <tTapeDelay_setDelay>
	tTapeDelay_setDelay(&delay2, displayValues[1]);
 80188b8:	ed94 0a01 	vldr	s0, [r4, #4]
 80188bc:	485a      	ldr	r0, [pc, #360]	; (8018a28 <SFXDelayTick+0x264>)
 80188be:	f007 fa5b 	bl	801fd78 <tTapeDelay_setDelay>
	if (!freeze)
 80188c2:	4b5a      	ldr	r3, [pc, #360]	; (8018a2c <SFXDelayTick+0x268>)
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d070      	beq.n	80189ac <SFXDelayTick+0x1e8>
		delayFB1 = tTapeDelay_tick(&delay, delayFB1);
 80188ca:	4856      	ldr	r0, [pc, #344]	; (8018a24 <SFXDelayTick+0x260>)
 80188cc:	ed96 0a00 	vldr	s0, [r6]
 80188d0:	f007 f9dc 	bl	801fc8c <tTapeDelay_tick>
		delayFB2 = tTapeDelay_tick(&delay2, delayFB2);
 80188d4:	4854      	ldr	r0, [pc, #336]	; (8018a28 <SFXDelayTick+0x264>)
		delayFB1 = tTapeDelay_tick(&delay, delayFB1);
 80188d6:	ed86 0a00 	vstr	s0, [r6]
		delayFB2 = tTapeDelay_tick(&delay2, delayFB2);
 80188da:	ed95 0a00 	vldr	s0, [r5]
 80188de:	f007 f9d5 	bl	801fc8c <tTapeDelay_tick>
 80188e2:	ed85 0a00 	vstr	s0, [r5]
	delayFB1 = tSVF_tick(&delayLP, delayFB1);
 80188e6:	4849      	ldr	r0, [pc, #292]	; (8018a0c <SFXDelayTick+0x248>)
 80188e8:	ed96 0a00 	vldr	s0, [r6]
 80188ec:	f00a fa70 	bl	8022dd0 <tSVF_tick>
	delayFB2 = tSVF_tick(&delayLP2, delayFB2);
 80188f0:	4847      	ldr	r0, [pc, #284]	; (8018a10 <SFXDelayTick+0x24c>)
	delayFB1 = tSVF_tick(&delayLP, delayFB1);
 80188f2:	ed86 0a00 	vstr	s0, [r6]
	delayFB2 = tSVF_tick(&delayLP2, delayFB2);
 80188f6:	ed95 0a00 	vldr	s0, [r5]
 80188fa:	f00a fa69 	bl	8022dd0 <tSVF_tick>
	delayFB1 = tanhf(tSVF_tick(&delayHP, delayFB1));
 80188fe:	4841      	ldr	r0, [pc, #260]	; (8018a04 <SFXDelayTick+0x240>)
	delayFB2 = tSVF_tick(&delayLP2, delayFB2);
 8018900:	ed85 0a00 	vstr	s0, [r5]
	delayFB1 = tanhf(tSVF_tick(&delayHP, delayFB1));
 8018904:	ed96 0a00 	vldr	s0, [r6]
 8018908:	f00a fa62 	bl	8022dd0 <tSVF_tick>
 801890c:	f00f fa4a 	bl	8027da4 <tanhf>
	delayFB2 = tanhf(tSVF_tick(&delayHP2, delayFB2));
 8018910:	483d      	ldr	r0, [pc, #244]	; (8018a08 <SFXDelayTick+0x244>)
	delayFB1 = tanhf(tSVF_tick(&delayHP, delayFB1));
 8018912:	ed86 0a00 	vstr	s0, [r6]
	delayFB2 = tanhf(tSVF_tick(&delayHP2, delayFB2));
 8018916:	ed95 0a00 	vldr	s0, [r5]
 801891a:	f00a fa59 	bl	8022dd0 <tSVF_tick>
 801891e:	f00f fa41 	bl	8027da4 <tanhf>
	input[0] = delayFB1 * displayValues[5];
 8018922:	edd4 7a05 	vldr	s15, [r4, #20]
 8018926:	ed96 7a00 	vldr	s14, [r6]
	delayFB2 = tanhf(tSVF_tick(&delayHP2, delayFB2));
 801892a:	ed85 0a00 	vstr	s0, [r5]
	input[0] = delayFB1 * displayValues[5];
 801892e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018932:	edc7 7a00 	vstr	s15, [r7]
	input[1] = delayFB2 * displayValues[5];
 8018936:	edd4 7a05 	vldr	s15, [r4, #20]
 801893a:	ed95 7a00 	vldr	s14, [r5]
 801893e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018942:	edc7 7a01 	vstr	s15, [r7, #4]
}
 8018946:	ecbd 8b02 	vpop	{d8}
 801894a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		input1 = tFeedbackLeveler_tick(&feedbackControl, tHighpass_tick(&delayShaperHp, LEAF_shaper(input[1] + (delayFB1 * displayValues[4] * 0.5f), 0.5f)));
 801894c:	ed96 7a00 	vldr	s14, [r6]
 8018950:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8018954:	edd4 7a04 	vldr	s15, [r4, #16]
 8018958:	ed97 0a01 	vldr	s0, [r7, #4]
 801895c:	ee67 7a87 	vmul.f32	s15, s15, s14
		input2 = tFeedbackLeveler_tick(&feedbackControl, tHighpass_tick(&delayShaperHp, LEAF_shaper(input[1] + (delayFB2 * displayValues[4] * 0.5f), 0.5f)));
 8018960:	4d2e      	ldr	r5, [pc, #184]	; (8018a1c <SFXDelayTick+0x258>)
		input1 = tFeedbackLeveler_tick(&feedbackControl, tHighpass_tick(&delayShaperHp, LEAF_shaper(input[1] + (delayFB1 * displayValues[4] * 0.5f), 0.5f)));
 8018962:	eef0 0a48 	vmov.f32	s1, s16
 8018966:	eea7 0a88 	vfma.f32	s0, s15, s16
 801896a:	f00b fcaf 	bl	80242cc <LEAF_shaper>
 801896e:	4830      	ldr	r0, [pc, #192]	; (8018a30 <SFXDelayTick+0x26c>)
 8018970:	f00a fbb4 	bl	80230dc <tHighpass_tick>
 8018974:	482a      	ldr	r0, [pc, #168]	; (8018a20 <SFXDelayTick+0x25c>)
 8018976:	f007 fe8f 	bl	8020698 <tFeedbackLeveler_tick>
		input2 = tFeedbackLeveler_tick(&feedbackControl, tHighpass_tick(&delayShaperHp, LEAF_shaper(input[1] + (delayFB2 * displayValues[4] * 0.5f), 0.5f)));
 801897a:	ed95 7a00 	vldr	s14, [r5]
 801897e:	edd4 7a04 	vldr	s15, [r4, #16]
		input1 = tFeedbackLeveler_tick(&feedbackControl, tHighpass_tick(&delayShaperHp, LEAF_shaper(input[1] + (delayFB1 * displayValues[4] * 0.5f), 0.5f)));
 8018982:	eef0 8a40 	vmov.f32	s17, s0
		input2 = tFeedbackLeveler_tick(&feedbackControl, tHighpass_tick(&delayShaperHp, LEAF_shaper(input[1] + (delayFB2 * displayValues[4] * 0.5f), 0.5f)));
 8018986:	ed97 0a01 	vldr	s0, [r7, #4]
 801898a:	eef0 0a48 	vmov.f32	s1, s16
 801898e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018992:	eea7 0a88 	vfma.f32	s0, s15, s16
 8018996:	f00b fc99 	bl	80242cc <LEAF_shaper>
 801899a:	4825      	ldr	r0, [pc, #148]	; (8018a30 <SFXDelayTick+0x26c>)
 801899c:	f00a fb9e 	bl	80230dc <tHighpass_tick>
 80189a0:	481f      	ldr	r0, [pc, #124]	; (8018a20 <SFXDelayTick+0x25c>)
 80189a2:	f007 fe79 	bl	8020698 <tFeedbackLeveler_tick>
 80189a6:	eeb0 8a40 	vmov.f32	s16, s0
 80189aa:	e780      	b.n	80188ae <SFXDelayTick+0xea>
		delayFB1 = tTapeDelay_tick(&delay, input1);
 80189ac:	481d      	ldr	r0, [pc, #116]	; (8018a24 <SFXDelayTick+0x260>)
 80189ae:	eeb0 0a68 	vmov.f32	s0, s17
 80189b2:	f007 f96b 	bl	801fc8c <tTapeDelay_tick>
		delayFB2 = tTapeDelay_tick(&delay2, input2);
 80189b6:	481c      	ldr	r0, [pc, #112]	; (8018a28 <SFXDelayTick+0x264>)
		delayFB1 = tTapeDelay_tick(&delay, input1);
 80189b8:	ed86 0a00 	vstr	s0, [r6]
		delayFB2 = tTapeDelay_tick(&delay2, input2);
 80189bc:	eeb0 0a48 	vmov.f32	s0, s16
 80189c0:	f007 f964 	bl	801fc8c <tTapeDelay_tick>
 80189c4:	ed85 0a00 	vstr	s0, [r5]
 80189c8:	e78d      	b.n	80188e6 <SFXDelayTick+0x122>
	displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Delay][4] * 1.1f, 0.9f) : presetKnobValues[Delay][4] * 1.1f;
 80189ca:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80189fc <SFXDelayTick+0x238>
 80189ce:	edd5 0a04 	vldr	s1, [r5, #16]
 80189d2:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8018a34 <SFXDelayTick+0x270>
 80189d6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80189da:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8018a38 <SFXDelayTick+0x274>
 80189de:	f00b fccf 	bl	8024380 <LEAF_clip>
 80189e2:	eef0 7a40 	vmov.f32	s15, s0
 80189e6:	e725      	b.n	8018834 <SFXDelayTick+0x70>
 80189e8:	20016b5c 	.word	0x20016b5c
 80189ec:	46ea6000 	.word	0x46ea6000
 80189f0:	200187c4 	.word	0x200187c4
 80189f4:	43000000 	.word	0x43000000
 80189f8:	20000528 	.word	0x20000528
 80189fc:	3f8ccccd 	.word	0x3f8ccccd
 8018a00:	20016b70 	.word	0x20016b70
 8018a04:	20017310 	.word	0x20017310
 8018a08:	20017558 	.word	0x20017558
 8018a0c:	200176cc 	.word	0x200176cc
 8018a10:	20017644 	.word	0x20017644
 8018a14:	20000578 	.word	0x20000578
 8018a18:	20017550 	.word	0x20017550
 8018a1c:	20018264 	.word	0x20018264
 8018a20:	20017378 	.word	0x20017378
 8018a24:	200177b0 	.word	0x200177b0
 8018a28:	20017058 	.word	0x20017058
 8018a2c:	20000590 	.word	0x20000590
 8018a30:	20017540 	.word	0x20017540
 8018a34:	3f666666 	.word	0x3f666666
 8018a38:	00000000 	.word	0x00000000

08018a3c <SFXDelayFree>:
{
 8018a3c:	b508      	push	{r3, lr}
	tTapeDelay_free(&delay);
 8018a3e:	480d      	ldr	r0, [pc, #52]	; (8018a74 <SFXDelayFree+0x38>)
 8018a40:	f007 f918 	bl	801fc74 <tTapeDelay_free>
	tTapeDelay_free(&delay2);
 8018a44:	480c      	ldr	r0, [pc, #48]	; (8018a78 <SFXDelayFree+0x3c>)
 8018a46:	f007 f915 	bl	801fc74 <tTapeDelay_free>
	tSVF_free(&delayLP);
 8018a4a:	480c      	ldr	r0, [pc, #48]	; (8018a7c <SFXDelayFree+0x40>)
 8018a4c:	f00a f9bc 	bl	8022dc8 <tSVF_free>
	tSVF_free(&delayHP);
 8018a50:	480b      	ldr	r0, [pc, #44]	; (8018a80 <SFXDelayFree+0x44>)
 8018a52:	f00a f9b9 	bl	8022dc8 <tSVF_free>
	tSVF_free(&delayLP2);
 8018a56:	480b      	ldr	r0, [pc, #44]	; (8018a84 <SFXDelayFree+0x48>)
 8018a58:	f00a f9b6 	bl	8022dc8 <tSVF_free>
	tSVF_free(&delayHP2);
 8018a5c:	480a      	ldr	r0, [pc, #40]	; (8018a88 <SFXDelayFree+0x4c>)
 8018a5e:	f00a f9b3 	bl	8022dc8 <tSVF_free>
	tHighpass_free(&delayShaperHp);
 8018a62:	480a      	ldr	r0, [pc, #40]	; (8018a8c <SFXDelayFree+0x50>)
 8018a64:	f00a fb26 	bl	80230b4 <tHighpass_free>
	tFeedbackLeveler_free(&feedbackControl);
 8018a68:	4809      	ldr	r0, [pc, #36]	; (8018a90 <SFXDelayFree+0x54>)
}
 8018a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tFeedbackLeveler_free(&feedbackControl);
 8018a6e:	f007 be03 	b.w	8020678 <tFeedbackLeveler_free>
 8018a72:	bf00      	nop
 8018a74:	200177b0 	.word	0x200177b0
 8018a78:	20017058 	.word	0x20017058
 8018a7c:	200176cc 	.word	0x200176cc
 8018a80:	20017310 	.word	0x20017310
 8018a84:	20017644 	.word	0x20017644
 8018a88:	20017558 	.word	0x20017558
 8018a8c:	20017540 	.word	0x20017540
 8018a90:	20017378 	.word	0x20017378

08018a94 <SFXReverbAlloc>:
{
 8018a94:	b570      	push	{r4, r5, r6, lr}
	tDattorroReverb_init(&reverb);
 8018a96:	4e0d      	ldr	r6, [pc, #52]	; (8018acc <SFXReverbAlloc+0x38>)
	leaf.clearOnAllocation = 1;
 8018a98:	2501      	movs	r5, #1
 8018a9a:	4c0d      	ldr	r4, [pc, #52]	; (8018ad0 <SFXReverbAlloc+0x3c>)
	tDattorroReverb_init(&reverb);
 8018a9c:	4630      	mov	r0, r6
	leaf.clearOnAllocation = 1;
 8018a9e:	6165      	str	r5, [r4, #20]
	tDattorroReverb_init(&reverb);
 8018aa0:	f00d fb74 	bl	802618c <tDattorroReverb_init>
	tExpSmooth_init(&sizeSmoother, 0.5f, 0.001f);
 8018aa4:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8018ad4 <SFXReverbAlloc+0x40>
 8018aa8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8018aac:	480a      	ldr	r0, [pc, #40]	; (8018ad8 <SFXReverbAlloc+0x44>)
 8018aae:	f009 ff6d 	bl	802298c <tExpSmooth_init>
	tDattorroReverb_setMix(&reverb, 1.0f);
 8018ab2:	4630      	mov	r0, r6
 8018ab4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8018ab8:	f00d fd6e 	bl	8026598 <tDattorroReverb_setMix>
	freeze = 0;
 8018abc:	2300      	movs	r3, #0
	capFeedback = 1;
 8018abe:	4907      	ldr	r1, [pc, #28]	; (8018adc <SFXReverbAlloc+0x48>)
	freeze = 0;
 8018ac0:	4a07      	ldr	r2, [pc, #28]	; (8018ae0 <SFXReverbAlloc+0x4c>)
	capFeedback = 1;
 8018ac2:	700d      	strb	r5, [r1, #0]
	leaf.clearOnAllocation = 0;
 8018ac4:	6163      	str	r3, [r4, #20]
	freeze = 0;
 8018ac6:	6013      	str	r3, [r2, #0]
}
 8018ac8:	bd70      	pop	{r4, r5, r6, pc}
 8018aca:	bf00      	nop
 8018acc:	20016648 	.word	0x20016648
 8018ad0:	200194a0 	.word	0x200194a0
 8018ad4:	3a83126f 	.word	0x3a83126f
 8018ad8:	20018170 	.word	0x20018170
 8018adc:	20000528 	.word	0x20000528
 8018ae0:	20000590 	.word	0x20000590

08018ae4 <SFXReverbFrame>:
	if (buttonActionsSFX[ButtonB][ActionPress])
 8018ae4:	4a1c      	ldr	r2, [pc, #112]	; (8018b58 <SFXReverbFrame+0x74>)
{
 8018ae6:	b570      	push	{r4, r5, r6, lr}
 8018ae8:	ed2d 8b02 	vpush	{d8}
	if (buttonActionsSFX[ButtonB][ActionPress])
 8018aec:	7e13      	ldrb	r3, [r2, #24]
 8018aee:	b13b      	cbz	r3, 8018b00 <SFXReverbFrame+0x1c>
		capFeedback = !capFeedback;
 8018af0:	491a      	ldr	r1, [pc, #104]	; (8018b5c <SFXReverbFrame+0x78>)
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 8018af2:	2000      	movs	r0, #0
		capFeedback = !capFeedback;
 8018af4:	780b      	ldrb	r3, [r1, #0]
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 8018af6:	7610      	strb	r0, [r2, #24]
		capFeedback = !capFeedback;
 8018af8:	fab3 f383 	clz	r3, r3
 8018afc:	095b      	lsrs	r3, r3, #5
 8018afe:	700b      	strb	r3, [r1, #0]
	displayValues[1] = faster_mtof(presetKnobValues[Reverb][1]*129.0f);
 8018b00:	4e17      	ldr	r6, [pc, #92]	; (8018b60 <SFXReverbFrame+0x7c>)
 8018b02:	ed9f 8a18 	vldr	s16, [pc, #96]	; 8018b64 <SFXReverbFrame+0x80>
 8018b06:	4635      	mov	r5, r6
 8018b08:	4c17      	ldr	r4, [pc, #92]	; (8018b68 <SFXReverbFrame+0x84>)
 8018b0a:	ecb5 0a01 	vldmia	r5!, {s0}
 8018b0e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018b12:	f00b fda3 	bl	802465c <faster_mtof>
	tDattorroReverb_setFeedbackFilter(&reverb, displayValues[1]);
 8018b16:	4815      	ldr	r0, [pc, #84]	; (8018b6c <SFXReverbFrame+0x88>)
	displayValues[1] = faster_mtof(presetKnobValues[Reverb][1]*129.0f);
 8018b18:	ed84 0a01 	vstr	s0, [r4, #4]
	tDattorroReverb_setFeedbackFilter(&reverb, displayValues[1]);
 8018b1c:	f00d fe24 	bl	8026768 <tDattorroReverb_setFeedbackFilter>
	displayValues[2] =  faster_mtof(presetKnobValues[Reverb][2]*123.0f);
 8018b20:	eddf 7a13 	vldr	s15, [pc, #76]	; 8018b70 <SFXReverbFrame+0x8c>
 8018b24:	ed95 0a00 	vldr	s0, [r5]
 8018b28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018b2c:	f00b fd96 	bl	802465c <faster_mtof>
	tDattorroReverb_setHP(&reverb, displayValues[2]);
 8018b30:	480e      	ldr	r0, [pc, #56]	; (8018b6c <SFXReverbFrame+0x88>)
	displayValues[2] =  faster_mtof(presetKnobValues[Reverb][2]*123.0f);
 8018b32:	ed84 0a02 	vstr	s0, [r4, #8]
	tDattorroReverb_setHP(&reverb, displayValues[2]);
 8018b36:	f00d fd7d 	bl	8026634 <tDattorroReverb_setHP>
	displayValues[3] = faster_mtof(presetKnobValues[Reverb][3]*129.0f);
 8018b3a:	ed96 0a02 	vldr	s0, [r6, #8]
 8018b3e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018b42:	f00b fd8b 	bl	802465c <faster_mtof>
	tDattorroReverb_setInputFilter(&reverb, displayValues[3]);
 8018b46:	4809      	ldr	r0, [pc, #36]	; (8018b6c <SFXReverbFrame+0x88>)
	displayValues[3] = faster_mtof(presetKnobValues[Reverb][3]*129.0f);
 8018b48:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8018b4c:	ecbd 8b02 	vpop	{d8}
 8018b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tDattorroReverb_setInputFilter(&reverb, displayValues[3]);
 8018b54:	f00d bdf2 	b.w	802673c <tDattorroReverb_setInputFilter>
 8018b58:	20018714 	.word	0x20018714
 8018b5c:	20000528 	.word	0x20000528
 8018b60:	20016bc4 	.word	0x20016bc4
 8018b64:	43010000 	.word	0x43010000
 8018b68:	200187c4 	.word	0x200187c4
 8018b6c:	20016648 	.word	0x20016648
 8018b70:	42f60000 	.word	0x42f60000

08018b74 <SFXReverbTick>:
	if (buttonActionsSFX[ButtonC][ActionPress])
 8018b74:	4b34      	ldr	r3, [pc, #208]	; (8018c48 <SFXReverbTick+0xd4>)
{
 8018b76:	b570      	push	{r4, r5, r6, lr}
 8018b78:	ed2d 8b02 	vpush	{d8}
	if (buttonActionsSFX[ButtonC][ActionPress])
 8018b7c:	7f1a      	ldrb	r2, [r3, #28]
{
 8018b7e:	b082      	sub	sp, #8
 8018b80:	4604      	mov	r4, r0
	if (buttonActionsSFX[ButtonC][ActionPress])
 8018b82:	2a00      	cmp	r2, #0
 8018b84:	d144      	bne.n	8018c10 <SFXReverbTick+0x9c>
	input[1] *= 4.0f;
 8018b86:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8018b8a:	edd4 7a01 	vldr	s15, [r4, #4]
	displayValues[0] = presetKnobValues[Reverb][0];
 8018b8e:	4e2f      	ldr	r6, [pc, #188]	; (8018c4c <SFXReverbTick+0xd8>)
	tExpSmooth_setDest(&sizeSmoother, (displayValues[0] * 0.9f) + 0.1f);
 8018b90:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8018c50 <SFXReverbTick+0xdc>
	input[1] *= 4.0f;
 8018b94:	ee67 7aa6 	vmul.f32	s15, s15, s13
	tExpSmooth_setDest(&sizeSmoother, (displayValues[0] * 0.9f) + 0.1f);
 8018b98:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8018c54 <SFXReverbTick+0xe0>
	displayValues[0] = presetKnobValues[Reverb][0];
 8018b9c:	4d2e      	ldr	r5, [pc, #184]	; (8018c58 <SFXReverbTick+0xe4>)
	tExpSmooth_setDest(&sizeSmoother, (displayValues[0] * 0.9f) + 0.1f);
 8018b9e:	482f      	ldr	r0, [pc, #188]	; (8018c5c <SFXReverbTick+0xe8>)
	input[1] *= 4.0f;
 8018ba0:	edc4 7a01 	vstr	s15, [r4, #4]
	displayValues[0] = presetKnobValues[Reverb][0];
 8018ba4:	edd6 7a00 	vldr	s15, [r6]
	tExpSmooth_setDest(&sizeSmoother, (displayValues[0] * 0.9f) + 0.1f);
 8018ba8:	eea7 0a87 	vfma.f32	s0, s15, s14
	displayValues[0] = presetKnobValues[Reverb][0];
 8018bac:	edc5 7a00 	vstr	s15, [r5]
	tExpSmooth_setDest(&sizeSmoother, (displayValues[0] * 0.9f) + 0.1f);
 8018bb0:	f009 ff52 	bl	8022a58 <tExpSmooth_setDest>
	float tempSize = tExpSmooth_tick(&sizeSmoother);
 8018bb4:	4829      	ldr	r0, [pc, #164]	; (8018c5c <SFXReverbTick+0xe8>)
 8018bb6:	f009 ff59 	bl	8022a6c <tExpSmooth_tick>
	tDattorroReverb_setSize(&reverb, tempSize);
 8018bba:	4829      	ldr	r0, [pc, #164]	; (8018c60 <SFXReverbTick+0xec>)
 8018bbc:	f00d fd58 	bl	8026670 <tDattorroReverb_setSize>
	displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Reverb][4], 0.5f) : presetKnobValues[Reverb][4];
 8018bc0:	4b28      	ldr	r3, [pc, #160]	; (8018c64 <SFXReverbTick+0xf0>)
 8018bc2:	781b      	ldrb	r3, [r3, #0]
 8018bc4:	bba3      	cbnz	r3, 8018c30 <SFXReverbTick+0xbc>
 8018bc6:	edd6 7a04 	vldr	s15, [r6, #16]
	tDattorroReverb_setFeedbackGain(&reverb, displayValues[4]);
 8018bca:	eeb0 0a67 	vmov.f32	s0, s15
 8018bce:	4824      	ldr	r0, [pc, #144]	; (8018c60 <SFXReverbTick+0xec>)
	displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Reverb][4], 0.5f) : presetKnobValues[Reverb][4];
 8018bd0:	edc5 7a04 	vstr	s15, [r5, #16]
	tDattorroReverb_setFeedbackGain(&reverb, displayValues[4]);
 8018bd4:	f00d fde4 	bl	80267a0 <tDattorroReverb_setFeedbackGain>
	sample = tanhf(stereo[0]) * 0.99f;
 8018bd8:	ed9f 8a23 	vldr	s16, [pc, #140]	; 8018c68 <SFXReverbTick+0xf4>
	tDattorroReverb_tickStereo(&reverb, input[1], stereo);
 8018bdc:	4669      	mov	r1, sp
 8018bde:	4820      	ldr	r0, [pc, #128]	; (8018c60 <SFXReverbTick+0xec>)
 8018be0:	ed94 0a01 	vldr	s0, [r4, #4]
 8018be4:	f00d fb30 	bl	8026248 <tDattorroReverb_tickStereo>
	sample = tanhf(stereo[0]) * 0.99f;
 8018be8:	ed9d 0a00 	vldr	s0, [sp]
 8018bec:	f00f f8da 	bl	8027da4 <tanhf>
 8018bf0:	ee60 7a08 	vmul.f32	s15, s0, s16
	input[1] = tanhf(stereo[1]) * 0.99f;
 8018bf4:	ed9d 0a01 	vldr	s0, [sp, #4]
	input[0] = sample;
 8018bf8:	edc4 7a00 	vstr	s15, [r4]
	input[1] = tanhf(stereo[1]) * 0.99f;
 8018bfc:	f00f f8d2 	bl	8027da4 <tanhf>
 8018c00:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018c04:	ed84 0a01 	vstr	s0, [r4, #4]
}
 8018c08:	b002      	add	sp, #8
 8018c0a:	ecbd 8b02 	vpop	{d8}
 8018c0e:	bd70      	pop	{r4, r5, r6, pc}
		freeze = !freeze;
 8018c10:	4d16      	ldr	r5, [pc, #88]	; (8018c6c <SFXReverbTick+0xf8>)
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8018c12:	2100      	movs	r1, #0
		tDattorroReverb_setFreeze(&reverb, freeze);
 8018c14:	4812      	ldr	r0, [pc, #72]	; (8018c60 <SFXReverbTick+0xec>)
		freeze = !freeze;
 8018c16:	682a      	ldr	r2, [r5, #0]
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8018c18:	7719      	strb	r1, [r3, #28]
		freeze = !freeze;
 8018c1a:	fab2 f282 	clz	r2, r2
 8018c1e:	0952      	lsrs	r2, r2, #5
		tDattorroReverb_setFreeze(&reverb, freeze);
 8018c20:	4611      	mov	r1, r2
		freeze = !freeze;
 8018c22:	602a      	str	r2, [r5, #0]
		tDattorroReverb_setFreeze(&reverb, freeze);
 8018c24:	f00d fcc8 	bl	80265b8 <tDattorroReverb_setFreeze>
		setLED_C(freeze);
 8018c28:	7828      	ldrb	r0, [r5, #0]
 8018c2a:	f7fb f861 	bl	8013cf0 <setLED_C>
 8018c2e:	e7aa      	b.n	8018b86 <SFXReverbTick+0x12>
	displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Reverb][4], 0.5f) : presetKnobValues[Reverb][4];
 8018c30:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8018c34:	edd6 0a04 	vldr	s1, [r6, #16]
 8018c38:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8018c70 <SFXReverbTick+0xfc>
 8018c3c:	f00b fba0 	bl	8024380 <LEAF_clip>
 8018c40:	eef0 7a40 	vmov.f32	s15, s0
 8018c44:	e7c1      	b.n	8018bca <SFXReverbTick+0x56>
 8018c46:	bf00      	nop
 8018c48:	20018714 	.word	0x20018714
 8018c4c:	20016bc0 	.word	0x20016bc0
 8018c50:	3f666666 	.word	0x3f666666
 8018c54:	3dcccccd 	.word	0x3dcccccd
 8018c58:	200187c4 	.word	0x200187c4
 8018c5c:	20018170 	.word	0x20018170
 8018c60:	20016648 	.word	0x20016648
 8018c64:	20000528 	.word	0x20000528
 8018c68:	3f7d70a4 	.word	0x3f7d70a4
 8018c6c:	20000590 	.word	0x20000590
 8018c70:	00000000 	.word	0x00000000

08018c74 <SFXReverbFree>:
{
 8018c74:	b508      	push	{r3, lr}
	tDattorroReverb_free(&reverb);
 8018c76:	4804      	ldr	r0, [pc, #16]	; (8018c88 <SFXReverbFree+0x14>)
 8018c78:	f00d fa8e 	bl	8026198 <tDattorroReverb_free>
	tExpSmooth_free(&sizeSmoother);
 8018c7c:	4803      	ldr	r0, [pc, #12]	; (8018c8c <SFXReverbFree+0x18>)
}
 8018c7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tExpSmooth_free(&sizeSmoother);
 8018c82:	f009 bed3 	b.w	8022a2c <tExpSmooth_free>
 8018c86:	bf00      	nop
 8018c88:	20016648 	.word	0x20016648
 8018c8c:	20018170 	.word	0x20018170

08018c90 <SFXReverb2Alloc>:
{
 8018c90:	b570      	push	{r4, r5, r6, lr}
	tNReverb_init(&reverb2, 1.0f);
 8018c92:	4e26      	ldr	r6, [pc, #152]	; (8018d2c <SFXReverb2Alloc+0x9c>)
	leaf.clearOnAllocation = 1;
 8018c94:	2401      	movs	r4, #1
 8018c96:	4d26      	ldr	r5, [pc, #152]	; (8018d30 <SFXReverb2Alloc+0xa0>)
	tNReverb_init(&reverb2, 1.0f);
 8018c98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8018c9c:	4630      	mov	r0, r6
	leaf.clearOnAllocation = 1;
 8018c9e:	616c      	str	r4, [r5, #20]
{
 8018ca0:	ed2d 8b04 	vpush	{d8-d9}
	tSVF_init(&lowpass, SVFTypeLowpass, 18000.0f, 0.75f);
 8018ca4:	ed9f 9a23 	vldr	s18, [pc, #140]	; 8018d34 <SFXReverb2Alloc+0xa4>
	tNReverb_init(&reverb2, 1.0f);
 8018ca8:	f00c ff9a 	bl	8025be0 <tNReverb_init>
	tSVF_init(&highpass, SVFTypeHighpass, 40.0f, 0.75f);
 8018cac:	eddf 8a22 	vldr	s17, [pc, #136]	; 8018d38 <SFXReverb2Alloc+0xa8>
	tNReverb_setMix(&reverb2, 1.0f);
 8018cb0:	4630      	mov	r0, r6
 8018cb2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	tSVF_init(&bandpass, SVFTypeBandpass, 2000.0f, 1.0f);
 8018cb6:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8018d3c <SFXReverb2Alloc+0xac>
	tNReverb_setMix(&reverb2, 1.0f);
 8018cba:	f00c fff9 	bl	8025cb0 <tNReverb_setMix>
	tSVF_init(&lowpass, SVFTypeLowpass, 18000.0f, 0.75f);
 8018cbe:	eeb0 0a49 	vmov.f32	s0, s18
 8018cc2:	4621      	mov	r1, r4
 8018cc4:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 8018cc8:	481d      	ldr	r0, [pc, #116]	; (8018d40 <SFXReverb2Alloc+0xb0>)
 8018cca:	f00a f803 	bl	8022cd4 <tSVF_init>
	tSVF_init(&highpass, SVFTypeHighpass, 40.0f, 0.75f);
 8018cce:	eeb0 0a68 	vmov.f32	s0, s17
 8018cd2:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 8018cd6:	2100      	movs	r1, #0
 8018cd8:	481a      	ldr	r0, [pc, #104]	; (8018d44 <SFXReverb2Alloc+0xb4>)
 8018cda:	f009 fffb 	bl	8022cd4 <tSVF_init>
	tSVF_init(&bandpass, SVFTypeBandpass, 2000.0f, 1.0f);
 8018cde:	eeb0 0a48 	vmov.f32	s0, s16
 8018ce2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8018ce6:	2102      	movs	r1, #2
 8018ce8:	4817      	ldr	r0, [pc, #92]	; (8018d48 <SFXReverb2Alloc+0xb8>)
 8018cea:	f009 fff3 	bl	8022cd4 <tSVF_init>
	tSVF_init(&lowpass2, SVFTypeLowpass, 18000.0f, 0.75f);
 8018cee:	eeb0 0a49 	vmov.f32	s0, s18
 8018cf2:	4621      	mov	r1, r4
 8018cf4:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 8018cf8:	4814      	ldr	r0, [pc, #80]	; (8018d4c <SFXReverb2Alloc+0xbc>)
 8018cfa:	f009 ffeb 	bl	8022cd4 <tSVF_init>
	tSVF_init(&highpass2, SVFTypeHighpass, 40.0f, 0.75f);
 8018cfe:	eeb0 0a68 	vmov.f32	s0, s17
 8018d02:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 8018d06:	2100      	movs	r1, #0
 8018d08:	4811      	ldr	r0, [pc, #68]	; (8018d50 <SFXReverb2Alloc+0xc0>)
 8018d0a:	f009 ffe3 	bl	8022cd4 <tSVF_init>
	tSVF_init(&bandpass2, SVFTypeBandpass, 2000.0f, 1.0f);
 8018d0e:	eeb0 0a48 	vmov.f32	s0, s16
 8018d12:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8018d16:	2102      	movs	r1, #2
 8018d18:	480e      	ldr	r0, [pc, #56]	; (8018d54 <SFXReverb2Alloc+0xc4>)
 8018d1a:	f009 ffdb 	bl	8022cd4 <tSVF_init>
	freeze = 0;
 8018d1e:	2300      	movs	r3, #0
 8018d20:	4a0d      	ldr	r2, [pc, #52]	; (8018d58 <SFXReverb2Alloc+0xc8>)
	leaf.clearOnAllocation = 0;
 8018d22:	616b      	str	r3, [r5, #20]
	freeze = 0;
 8018d24:	6013      	str	r3, [r2, #0]
}
 8018d26:	ecbd 8b04 	vpop	{d8-d9}
 8018d2a:	bd70      	pop	{r4, r5, r6, pc}
 8018d2c:	20018268 	.word	0x20018268
 8018d30:	200194a0 	.word	0x200194a0
 8018d34:	468ca000 	.word	0x468ca000
 8018d38:	42200000 	.word	0x42200000
 8018d3c:	44fa0000 	.word	0x44fa0000
 8018d40:	20016348 	.word	0x20016348
 8018d44:	20018178 	.word	0x20018178
 8018d48:	20017640 	.word	0x20017640
 8018d4c:	20017298 	.word	0x20017298
 8018d50:	20017544 	.word	0x20017544
 8018d54:	20017620 	.word	0x20017620
 8018d58:	20000590 	.word	0x20000590

08018d5c <SFXReverb2Frame>:
 8018d5c:	4770      	bx	lr
 8018d5e:	bf00      	nop

08018d60 <SFXReverb2Tick>:
	displayValues[0] = presetKnobValues[Reverb2][0] * 4.0f;
 8018d60:	4b5f      	ldr	r3, [pc, #380]	; (8018ee0 <SFXReverb2Tick+0x180>)
 8018d62:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
{
 8018d66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d6a:	ed2d 8b02 	vpush	{d8}
	displayValues[0] = presetKnobValues[Reverb2][0] * 4.0f;
 8018d6e:	ed93 0a00 	vldr	s0, [r3]
{
 8018d72:	b083      	sub	sp, #12
	if (!freeze)
 8018d74:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8018f14 <SFXReverb2Tick+0x1b4>
{
 8018d78:	4605      	mov	r5, r0
	displayValues[0] = presetKnobValues[Reverb2][0] * 4.0f;
 8018d7a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018d7e:	4c59      	ldr	r4, [pc, #356]	; (8018ee4 <SFXReverb2Tick+0x184>)
	if (!freeze)
 8018d80:	f8d9 3000 	ldr.w	r3, [r9]
	displayValues[0] = presetKnobValues[Reverb2][0] * 4.0f;
 8018d84:	ed84 0a00 	vstr	s0, [r4]
	if (!freeze)
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	f040 8092 	bne.w	8018eb2 <SFXReverb2Tick+0x152>
		tNReverb_setT60(&reverb2, displayValues[0]);
 8018d8e:	4856      	ldr	r0, [pc, #344]	; (8018ee8 <SFXReverb2Tick+0x188>)
 8018d90:	f00c ff4a 	bl	8025c28 <tNReverb_setT60>
	displayValues[1] = faster_mtof(presetKnobValues[Reverb2][1]*135.0f);
 8018d94:	4e55      	ldr	r6, [pc, #340]	; (8018eec <SFXReverb2Tick+0x18c>)
 8018d96:	eddf 7a56 	vldr	s15, [pc, #344]	; 8018ef0 <SFXReverb2Tick+0x190>
 8018d9a:	4637      	mov	r7, r6
	displayValues[2] = faster_mtof(presetKnobValues[Reverb2][2]*128.0f);
 8018d9c:	ed9f 8a55 	vldr	s16, [pc, #340]	; 8018ef4 <SFXReverb2Tick+0x194>
	if (buttonActionsSFX[ButtonC][ActionPress])
 8018da0:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8018f18 <SFXReverb2Tick+0x1b8>
	displayValues[1] = faster_mtof(presetKnobValues[Reverb2][1]*135.0f);
 8018da4:	ecb7 0a01 	vldmia	r7!, {s0}
 8018da8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018dac:	f00b fc56 	bl	802465c <faster_mtof>
	tSVF_setFreq(&lowpass, displayValues[1]);
 8018db0:	4851      	ldr	r0, [pc, #324]	; (8018ef8 <SFXReverb2Tick+0x198>)
	displayValues[1] = faster_mtof(presetKnobValues[Reverb2][1]*135.0f);
 8018db2:	ed84 0a01 	vstr	s0, [r4, #4]
	tSVF_setFreq(&lowpass, displayValues[1]);
 8018db6:	f00a f841 	bl	8022e3c <tSVF_setFreq>
	tSVF_setFreq(&lowpass2, displayValues[1]);
 8018dba:	4850      	ldr	r0, [pc, #320]	; (8018efc <SFXReverb2Tick+0x19c>)
 8018dbc:	ed94 0a01 	vldr	s0, [r4, #4]
 8018dc0:	f00a f83c 	bl	8022e3c <tSVF_setFreq>
	displayValues[2] = faster_mtof(presetKnobValues[Reverb2][2]*128.0f);
 8018dc4:	ed97 0a00 	vldr	s0, [r7]
 8018dc8:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018dcc:	f00b fc46 	bl	802465c <faster_mtof>
	tSVF_setFreq(&highpass, displayValues[2]);
 8018dd0:	484b      	ldr	r0, [pc, #300]	; (8018f00 <SFXReverb2Tick+0x1a0>)
	displayValues[2] = faster_mtof(presetKnobValues[Reverb2][2]*128.0f);
 8018dd2:	ed84 0a02 	vstr	s0, [r4, #8]
	tSVF_setFreq(&highpass, displayValues[2]);
 8018dd6:	f00a f831 	bl	8022e3c <tSVF_setFreq>
	tSVF_setFreq(&highpass2, displayValues[2]);
 8018dda:	484a      	ldr	r0, [pc, #296]	; (8018f04 <SFXReverb2Tick+0x1a4>)
 8018ddc:	ed94 0a02 	vldr	s0, [r4, #8]
 8018de0:	f00a f82c 	bl	8022e3c <tSVF_setFreq>
	displayValues[3] = faster_mtof(presetKnobValues[Reverb2][3]*128.0f);
 8018de4:	ed96 0a02 	vldr	s0, [r6, #8]
 8018de8:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018dec:	f00b fc36 	bl	802465c <faster_mtof>
	tSVF_setFreq(&bandpass, displayValues[3]);
 8018df0:	4845      	ldr	r0, [pc, #276]	; (8018f08 <SFXReverb2Tick+0x1a8>)
	displayValues[3] = faster_mtof(presetKnobValues[Reverb2][3]*128.0f);
 8018df2:	ed84 0a03 	vstr	s0, [r4, #12]
	tSVF_setFreq(&bandpass, displayValues[3]);
 8018df6:	f00a f821 	bl	8022e3c <tSVF_setFreq>
	tSVF_setFreq(&bandpass2, displayValues[3]);
 8018dfa:	ed94 0a03 	vldr	s0, [r4, #12]
 8018dfe:	4843      	ldr	r0, [pc, #268]	; (8018f0c <SFXReverb2Tick+0x1ac>)
 8018e00:	f00a f81c 	bl	8022e3c <tSVF_setFreq>
	displayValues[4] = (presetKnobValues[Reverb2][4] * 4.0f) - 2.0f;
 8018e04:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8018e08:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8018e0c:	edd6 6a03 	vldr	s13, [r6, #12]
	if (buttonActionsSFX[ButtonC][ActionPress])
 8018e10:	f898 301c 	ldrb.w	r3, [r8, #28]
	displayValues[4] = (presetKnobValues[Reverb2][4] * 4.0f) - 2.0f;
 8018e14:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018e18:	edc4 7a04 	vstr	s15, [r4, #16]
	if (buttonActionsSFX[ButtonC][ActionPress])
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d150      	bne.n	8018ec2 <SFXReverb2Tick+0x162>
	if (buttonActionsSFX[ButtonA][ActionPress])
 8018e20:	f898 3014 	ldrb.w	r3, [r8, #20]
 8018e24:	b163      	cbz	r3, 8018e40 <SFXReverb2Tick+0xe0>
		freeze = !freeze;
 8018e26:	f8d9 3000 	ldr.w	r3, [r9]
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 8018e2a:	2200      	movs	r2, #0
		freeze = !freeze;
 8018e2c:	fab3 f383 	clz	r3, r3
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 8018e30:	f888 2014 	strb.w	r2, [r8, #20]
		freeze = !freeze;
 8018e34:	095b      	lsrs	r3, r3, #5
		setLED_C(freeze);
 8018e36:	4618      	mov	r0, r3
		freeze = !freeze;
 8018e38:	f8c9 3000 	str.w	r3, [r9]
		setLED_C(freeze);
 8018e3c:	f7fa ff58 	bl	8013cf0 <setLED_C>
	tNReverb_tickStereo(&reverb2, input[1], stereoOuts);
 8018e40:	4669      	mov	r1, sp
 8018e42:	ed95 0a01 	vldr	s0, [r5, #4]
 8018e46:	4828      	ldr	r0, [pc, #160]	; (8018ee8 <SFXReverb2Tick+0x188>)
 8018e48:	f00c ff36 	bl	8025cb8 <tNReverb_tickStereo>
	float leftOut = tSVF_tick(&lowpass, stereoOuts[0]);
 8018e4c:	ed9d 0a00 	vldr	s0, [sp]
 8018e50:	4829      	ldr	r0, [pc, #164]	; (8018ef8 <SFXReverb2Tick+0x198>)
 8018e52:	f009 ffbd 	bl	8022dd0 <tSVF_tick>
	leftOut = tSVF_tick(&highpass, leftOut);
 8018e56:	482a      	ldr	r0, [pc, #168]	; (8018f00 <SFXReverb2Tick+0x1a0>)
 8018e58:	f009 ffba 	bl	8022dd0 <tSVF_tick>
	leftOut += tSVF_tick(&bandpass, leftOut) * displayValues[4];
 8018e5c:	482a      	ldr	r0, [pc, #168]	; (8018f08 <SFXReverb2Tick+0x1a8>)
	leftOut = tSVF_tick(&highpass, leftOut);
 8018e5e:	eef0 8a40 	vmov.f32	s17, s0
	leftOut += tSVF_tick(&bandpass, leftOut) * displayValues[4];
 8018e62:	f009 ffb5 	bl	8022dd0 <tSVF_tick>
 8018e66:	edd4 7a04 	vldr	s15, [r4, #16]
	float rightOutTemp = tSVF_tick(&lowpass2, stereoOuts[1]);
 8018e6a:	4824      	ldr	r0, [pc, #144]	; (8018efc <SFXReverb2Tick+0x19c>)
	leftOut += tSVF_tick(&bandpass, leftOut) * displayValues[4];
 8018e6c:	eee0 8a27 	vfma.f32	s17, s0, s15
	float rightOutTemp = tSVF_tick(&lowpass2, stereoOuts[1]);
 8018e70:	ed9d 0a01 	vldr	s0, [sp, #4]
 8018e74:	f009 ffac 	bl	8022dd0 <tSVF_tick>
	rightOutTemp = tSVF_tick(&highpass2, rightOutTemp);
 8018e78:	4822      	ldr	r0, [pc, #136]	; (8018f04 <SFXReverb2Tick+0x1a4>)
 8018e7a:	f009 ffa9 	bl	8022dd0 <tSVF_tick>
	rightOutTemp += tSVF_tick(&bandpass, rightOutTemp) * displayValues[4];
 8018e7e:	4822      	ldr	r0, [pc, #136]	; (8018f08 <SFXReverb2Tick+0x1a8>)
	rightOutTemp = tSVF_tick(&highpass2, rightOutTemp);
 8018e80:	eeb0 8a40 	vmov.f32	s16, s0
	rightOutTemp += tSVF_tick(&bandpass, rightOutTemp) * displayValues[4];
 8018e84:	f009 ffa4 	bl	8022dd0 <tSVF_tick>
 8018e88:	edd4 7a04 	vldr	s15, [r4, #16]
 8018e8c:	eea0 8a27 	vfma.f32	s16, s0, s15
	sample = tanhf(leftOut);
 8018e90:	eeb0 0a68 	vmov.f32	s0, s17
 8018e94:	f00e ff86 	bl	8027da4 <tanhf>
	input[0] = sample;
 8018e98:	ed85 0a00 	vstr	s0, [r5]
	input[1] = tanhf(rightOutTemp);
 8018e9c:	eeb0 0a48 	vmov.f32	s0, s16
 8018ea0:	f00e ff80 	bl	8027da4 <tanhf>
 8018ea4:	ed85 0a01 	vstr	s0, [r5, #4]
}
 8018ea8:	b003      	add	sp, #12
 8018eaa:	ecbd 8b02 	vpop	{d8}
 8018eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		tNReverb_setT60(&reverb2, 1000.0f);
 8018eb2:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8018f10 <SFXReverb2Tick+0x1b0>
 8018eb6:	480c      	ldr	r0, [pc, #48]	; (8018ee8 <SFXReverb2Tick+0x188>)
 8018eb8:	f00c feb6 	bl	8025c28 <tNReverb_setT60>
		input[1] = 0.0f;
 8018ebc:	2300      	movs	r3, #0
 8018ebe:	606b      	str	r3, [r5, #4]
 8018ec0:	e768      	b.n	8018d94 <SFXReverb2Tick+0x34>
		freeze = !freeze;
 8018ec2:	f8d9 3000 	ldr.w	r3, [r9]
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8018ec6:	2200      	movs	r2, #0
		freeze = !freeze;
 8018ec8:	fab3 f383 	clz	r3, r3
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8018ecc:	f888 201c 	strb.w	r2, [r8, #28]
		freeze = !freeze;
 8018ed0:	095b      	lsrs	r3, r3, #5
		setLED_C(freeze);
 8018ed2:	4618      	mov	r0, r3
		freeze = !freeze;
 8018ed4:	f8c9 3000 	str.w	r3, [r9]
		setLED_C(freeze);
 8018ed8:	f7fa ff0a 	bl	8013cf0 <setLED_C>
 8018edc:	e7a0      	b.n	8018e20 <SFXReverb2Tick+0xc0>
 8018ede:	bf00      	nop
 8018ee0:	20016c24 	.word	0x20016c24
 8018ee4:	200187c4 	.word	0x200187c4
 8018ee8:	20018268 	.word	0x20018268
 8018eec:	20016c28 	.word	0x20016c28
 8018ef0:	43070000 	.word	0x43070000
 8018ef4:	43000000 	.word	0x43000000
 8018ef8:	20016348 	.word	0x20016348
 8018efc:	20017298 	.word	0x20017298
 8018f00:	20018178 	.word	0x20018178
 8018f04:	20017544 	.word	0x20017544
 8018f08:	20017640 	.word	0x20017640
 8018f0c:	20017620 	.word	0x20017620
 8018f10:	447a0000 	.word	0x447a0000
 8018f14:	20000590 	.word	0x20000590
 8018f18:	20018714 	.word	0x20018714

08018f1c <SFXReverb2Free>:
{
 8018f1c:	b508      	push	{r3, lr}
	tNReverb_free(&reverb2);
 8018f1e:	480b      	ldr	r0, [pc, #44]	; (8018f4c <SFXReverb2Free+0x30>)
 8018f20:	f00c fe64 	bl	8025bec <tNReverb_free>
	tSVF_free(&lowpass);
 8018f24:	480a      	ldr	r0, [pc, #40]	; (8018f50 <SFXReverb2Free+0x34>)
 8018f26:	f009 ff4f 	bl	8022dc8 <tSVF_free>
	tSVF_free(&highpass);
 8018f2a:	480a      	ldr	r0, [pc, #40]	; (8018f54 <SFXReverb2Free+0x38>)
 8018f2c:	f009 ff4c 	bl	8022dc8 <tSVF_free>
	tSVF_free(&bandpass);
 8018f30:	4809      	ldr	r0, [pc, #36]	; (8018f58 <SFXReverb2Free+0x3c>)
 8018f32:	f009 ff49 	bl	8022dc8 <tSVF_free>
	tSVF_free(&lowpass2);
 8018f36:	4809      	ldr	r0, [pc, #36]	; (8018f5c <SFXReverb2Free+0x40>)
 8018f38:	f009 ff46 	bl	8022dc8 <tSVF_free>
	tSVF_free(&highpass2);
 8018f3c:	4808      	ldr	r0, [pc, #32]	; (8018f60 <SFXReverb2Free+0x44>)
 8018f3e:	f009 ff43 	bl	8022dc8 <tSVF_free>
	tSVF_free(&bandpass2);
 8018f42:	4808      	ldr	r0, [pc, #32]	; (8018f64 <SFXReverb2Free+0x48>)
}
 8018f44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tSVF_free(&bandpass2);
 8018f48:	f009 bf3e 	b.w	8022dc8 <tSVF_free>
 8018f4c:	20018268 	.word	0x20018268
 8018f50:	20016348 	.word	0x20016348
 8018f54:	20018178 	.word	0x20018178
 8018f58:	20017640 	.word	0x20017640
 8018f5c:	20017298 	.word	0x20017298
 8018f60:	20017544 	.word	0x20017544
 8018f64:	20017620 	.word	0x20017620

08018f68 <SFXLivingStringAlloc>:
{
 8018f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	levMode = 0;
 8018f6c:	2300      	movs	r3, #0
 8018f6e:	4e2a      	ldr	r6, [pc, #168]	; (8019018 <SFXLivingStringAlloc+0xb0>)
 8018f70:	4d2a      	ldr	r5, [pc, #168]	; (801901c <SFXLivingStringAlloc+0xb4>)
	tSimplePoly_setNumVoices(&poly, NUM_STRINGS);
 8018f72:	2106      	movs	r1, #6
 8018f74:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8019054 <SFXLivingStringAlloc+0xec>
 8018f78:	461c      	mov	r4, r3
 8018f7a:	4f29      	ldr	r7, [pc, #164]	; (8019020 <SFXLivingStringAlloc+0xb8>)
 8018f7c:	4829      	ldr	r0, [pc, #164]	; (8019024 <SFXLivingStringAlloc+0xbc>)
	levMode = 0;
 8018f7e:	6033      	str	r3, [r6, #0]
{
 8018f80:	ed2d 8b06 	vpush	{d8-d10}
		myDetune[i] = (randomNumber() * 0.3f) - 0.15f;
 8018f84:	eddf aa28 	vldr	s21, [pc, #160]	; 8019028 <SFXLivingStringAlloc+0xc0>
	tSimplePoly_setNumVoices(&poly, NUM_STRINGS);
 8018f88:	f00c f85a 	bl	8025040 <tSimplePoly_setNumVoices>
		myDetune[i] = (randomNumber() * 0.3f) - 0.15f;
 8018f8c:	ed9f aa27 	vldr	s20, [pc, #156]	; 801902c <SFXLivingStringAlloc+0xc4>
		tComplexLivingString_init(&theString[i], 440.f, 0.8f, 0.3f, 0.f, 9000.f, 1.0f, 0.3f, 0.01f, 0.125f, levMode);
 8018f90:	eddf 9a27 	vldr	s19, [pc, #156]	; 8019030 <SFXLivingStringAlloc+0xc8>
 8018f94:	ed9f 9a27 	vldr	s18, [pc, #156]	; 8019034 <SFXLivingStringAlloc+0xcc>
 8018f98:	ed9f 8a27 	vldr	s16, [pc, #156]	; 8019038 <SFXLivingStringAlloc+0xd0>
 8018f9c:	eddf 8a27 	vldr	s17, [pc, #156]	; 801903c <SFXLivingStringAlloc+0xd4>
		myDetune[i] = (randomNumber() * 0.3f) - 0.15f;
 8018fa0:	f7fa fc8a 	bl	80138b8 <randomNumber>
 8018fa4:	eef0 7a4a 	vmov.f32	s15, s20
		tComplexLivingString_init(&theString[i], 440.f, 0.8f, 0.3f, 0.f, 9000.f, 1.0f, 0.3f, 0.01f, 0.125f, levMode);
 8018fa8:	ed9f 3a1f 	vldr	s6, [pc, #124]	; 8019028 <SFXLivingStringAlloc+0xc0>
 8018fac:	eb08 0004 	add.w	r0, r8, r4
 8018fb0:	eeb4 4a00 	vmov.f32	s8, #64	; 0x3e000000  0.125
 8018fb4:	6831      	ldr	r1, [r6, #0]
		myDetune[i] = (randomNumber() * 0.3f) - 0.15f;
 8018fb6:	eee0 7a2a 	vfma.f32	s15, s0, s21
		tComplexLivingString_init(&theString[i], 440.f, 0.8f, 0.3f, 0.f, 9000.f, 1.0f, 0.3f, 0.01f, 0.125f, levMode);
 8018fba:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8019040 <SFXLivingStringAlloc+0xd8>
 8018fbe:	eef0 3a69 	vmov.f32	s7, s19
 8018fc2:	eeb0 1a43 	vmov.f32	s2, s6
 8018fc6:	eeb0 2a49 	vmov.f32	s4, s18
 8018fca:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8018fce:	eef0 1a48 	vmov.f32	s3, s16
 8018fd2:	eef0 0a68 	vmov.f32	s1, s17
		myDetune[i] = (randomNumber() * 0.3f) - 0.15f;
 8018fd6:	ece5 7a01 	vstmia	r5!, {s15}
		tComplexLivingString_init(&theString[i], 440.f, 0.8f, 0.3f, 0.f, 9000.f, 1.0f, 0.3f, 0.01f, 0.125f, levMode);
 8018fda:	f00c fb33 	bl	8025644 <tComplexLivingString_init>
		tExpSmooth_initToPool(&stringGains[i], 0.0f, 0.002f, &smallPool);
 8018fde:	1938      	adds	r0, r7, r4
 8018fe0:	3404      	adds	r4, #4
 8018fe2:	4918      	ldr	r1, [pc, #96]	; (8019044 <SFXLivingStringAlloc+0xdc>)
 8018fe4:	eddf 0a18 	vldr	s1, [pc, #96]	; 8019048 <SFXLivingStringAlloc+0xe0>
 8018fe8:	eeb0 0a48 	vmov.f32	s0, s16
 8018fec:	f009 fcf8 	bl	80229e0 <tExpSmooth_initToPool>
	for (int i = 0; i < NUM_STRINGS; i++)
 8018ff0:	2c18      	cmp	r4, #24
 8018ff2:	d1d5      	bne.n	8018fa0 <SFXLivingStringAlloc+0x38>
	ignoreFreqKnobs = 0;
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	4a15      	ldr	r2, [pc, #84]	; (801904c <SFXLivingStringAlloc+0xe4>)
	setLED_A(ignoreFreqKnobs);
 8018ff8:	4618      	mov	r0, r3
	ignoreFreqKnobs = 0;
 8018ffa:	6013      	str	r3, [r2, #0]
	setLED_A(ignoreFreqKnobs);
 8018ffc:	f7fa fe5c 	bl	8013cb8 <setLED_A>
	setLED_B(independentStrings);
 8019000:	4b13      	ldr	r3, [pc, #76]	; (8019050 <SFXLivingStringAlloc+0xe8>)
 8019002:	7818      	ldrb	r0, [r3, #0]
 8019004:	f7fa fe66 	bl	8013cd4 <setLED_B>
	setLED_C(levMode);
 8019008:	7830      	ldrb	r0, [r6, #0]
}
 801900a:	ecbd 8b06 	vpop	{d8-d10}
 801900e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	setLED_C(levMode);
 8019012:	f7fa be6d 	b.w	8013cf0 <setLED_C>
 8019016:	bf00      	nop
 8019018:	200005a0 	.word	0x200005a0
 801901c:	20016268 	.word	0x20016268
 8019020:	20017060 	.word	0x20017060
 8019024:	20017554 	.word	0x20017554
 8019028:	3e99999a 	.word	0x3e99999a
 801902c:	be19999a 	.word	0xbe19999a
 8019030:	3c23d70a 	.word	0x3c23d70a
 8019034:	460ca000 	.word	0x460ca000
 8019038:	00000000 	.word	0x00000000
 801903c:	3f4ccccd 	.word	0x3f4ccccd
 8019040:	43dc0000 	.word	0x43dc0000
 8019044:	20014b2c 	.word	0x20014b2c
 8019048:	3b03126f 	.word	0x3b03126f
 801904c:	20000594 	.word	0x20000594
 8019050:	20000598 	.word	0x20000598
 8019054:	20016070 	.word	0x20016070

08019058 <SFXLivingStringFrame>:
{
 8019058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 801905c:	4dba      	ldr	r5, [pc, #744]	; (8019348 <SFXLivingStringFrame+0x2f0>)
{
 801905e:	ed2d 8b04 	vpush	{d8-d9}
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8019062:	7d2b      	ldrb	r3, [r5, #20]
{
 8019064:	b083      	sub	sp, #12
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8019066:	2b01      	cmp	r3, #1
 8019068:	f000 820a 	beq.w	8019480 <SFXLivingStringFrame+0x428>
	if (buttonActionsSFX[ButtonC][ActionPress] == 1)
 801906c:	7f2b      	ldrb	r3, [r5, #28]
 801906e:	2b01      	cmp	r3, #1
 8019070:	f000 813b 	beq.w	80192ea <SFXLivingStringFrame+0x292>
	if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 8019074:	7e2b      	ldrb	r3, [r5, #24]
 8019076:	4fb5      	ldr	r7, [pc, #724]	; (801934c <SFXLivingStringFrame+0x2f4>)
 8019078:	2b01      	cmp	r3, #1
		independentStrings = !independentStrings;
 801907a:	4eb5      	ldr	r6, [pc, #724]	; (8019350 <SFXLivingStringFrame+0x2f8>)
	if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 801907c:	f000 8151 	beq.w	8019322 <SFXLivingStringFrame+0x2ca>
	displayValues[0] = LEAF_midiToFrequency((presetKnobValues[LivingString][0] * 90.0f)); //freq
 8019080:	f8df b300 	ldr.w	fp, [pc, #768]	; 8019384 <SFXLivingStringFrame+0x32c>
	displayValues[6] = ((tanhf((presetKnobValues[LivingString][6] * 8.0f) - 4.0f)) * 0.5f) + 0.5f;//prep Index
 8019084:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	displayValues[0] = LEAF_midiToFrequency((presetKnobValues[LivingString][0] * 90.0f)); //freq
 8019088:	eddf 8ab2 	vldr	s17, [pc, #712]	; 8019354 <SFXLivingStringFrame+0x2fc>
 801908c:	465d      	mov	r5, fp
 801908e:	4cb2      	ldr	r4, [pc, #712]	; (8019358 <SFXLivingStringFrame+0x300>)
 8019090:	ecb5 0a01 	vldmia	r5!, {s0}
 8019094:	ee20 0a28 	vmul.f32	s0, s0, s17
 8019098:	f00b fa5c 	bl	8024554 <LEAF_midiToFrequency>
	displayValues[3] = mtof((presetKnobValues[LivingString][3] * 130.0f)+12.0f); //lowpass
 801909c:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 80190a0:	eddb 6a03 	vldr	s13, [fp, #12]
 80190a4:	ed9f 7aad 	vldr	s14, [pc, #692]	; 801935c <SFXLivingStringFrame+0x304>
	displayValues[2] = presetKnobValues[LivingString][2]; //decay
 80190a8:	f8db 2008 	ldr.w	r2, [fp, #8]
	displayValues[3] = mtof((presetKnobValues[LivingString][3] * 130.0f)+12.0f); //lowpass
 80190ac:	eee6 7a87 	vfma.f32	s15, s13, s14
	displayValues[1] = presetKnobValues[LivingString][1]; //detune
 80190b0:	6829      	ldr	r1, [r5, #0]
	displayValues[0] = LEAF_midiToFrequency((presetKnobValues[LivingString][0] * 90.0f)); //freq
 80190b2:	ed84 0a00 	vstr	s0, [r4]
	displayValues[2] = presetKnobValues[LivingString][2]; //decay
 80190b6:	60a2      	str	r2, [r4, #8]
	displayValues[1] = presetKnobValues[LivingString][1]; //detune
 80190b8:	6061      	str	r1, [r4, #4]
	displayValues[3] = mtof((presetKnobValues[LivingString][3] * 130.0f)+12.0f); //lowpass
 80190ba:	eeb0 0a67 	vmov.f32	s0, s15
 80190be:	f00b faa9 	bl	8024614 <mtof>
	displayValues[4] = (presetKnobValues[LivingString][4] * 0.48) + 0.5f;//pickPos
 80190c2:	ed9b 4a04 	vldr	s8, [fp, #16]
	displayValues[5] = (presetKnobValues[LivingString][5] * 0.48) + 0.02f;//prepPos
 80190c6:	ed9b 5a05 	vldr	s10, [fp, #20]
	displayValues[4] = (presetKnobValues[LivingString][4] * 0.48) + 0.5f;//pickPos
 80190ca:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80190ce:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
	displayValues[3] = mtof((presetKnobValues[LivingString][3] * 130.0f)+12.0f); //lowpass
 80190d2:	ed84 0a03 	vstr	s0, [r4, #12]
	displayValues[5] = (presetKnobValues[LivingString][5] * 0.48) + 0.02f;//prepPos
 80190d6:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
	displayValues[6] = ((tanhf((presetKnobValues[LivingString][6] * 8.0f) - 4.0f)) * 0.5f) + 0.5f;//prep Index
 80190da:	ed9b 2a06 	vldr	s4, [fp, #24]
 80190de:	eef2 2a00 	vmov.f32	s5, #32	; 0x41000000  8.0
 80190e2:	eeb9 0a00 	vmov.f32	s0, #144	; 0xc0800000 -4.0
	displayValues[4] = (presetKnobValues[LivingString][4] * 0.48) + 0.5f;//pickPos
 80190e6:	ed9f 3b94 	vldr	d3, [pc, #592]	; 8019338 <SFXLivingStringFrame+0x2e0>
	displayValues[5] = (presetKnobValues[LivingString][5] * 0.48) + 0.02f;//prepPos
 80190ea:	ed9f 7b95 	vldr	d7, [pc, #596]	; 8019340 <SFXLivingStringFrame+0x2e8>
	displayValues[6] = ((tanhf((presetKnobValues[LivingString][6] * 8.0f) - 4.0f)) * 0.5f) + 0.5f;//prep Index
 80190ee:	eea2 0a22 	vfma.f32	s0, s4, s5
	displayValues[4] = (presetKnobValues[LivingString][4] * 0.48) + 0.5f;//pickPos
 80190f2:	eea4 6b03 	vfma.f64	d6, d4, d3
	displayValues[5] = (presetKnobValues[LivingString][5] * 0.48) + 0.02f;//prepPos
 80190f6:	eea5 7b03 	vfma.f64	d7, d5, d3
	displayValues[4] = (presetKnobValues[LivingString][4] * 0.48) + 0.5f;//pickPos
 80190fa:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 80190fe:	ed84 6a04 	vstr	s12, [r4, #16]
	displayValues[5] = (presetKnobValues[LivingString][5] * 0.48) + 0.02f;//prepPos
 8019102:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8019106:	ed84 7a05 	vstr	s14, [r4, #20]
	displayValues[6] = ((tanhf((presetKnobValues[LivingString][6] * 8.0f) - 4.0f)) * 0.5f) + 0.5f;//prep Index
 801910a:	f00e fe4b 	bl	8027da4 <tanhf>
 801910e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	displayValues[7] = presetKnobValues[LivingString][7];// let ring
 8019112:	f8db 201c 	ldr.w	r2, [fp, #28]
	displayValues[6] = ((tanhf((presetKnobValues[LivingString][6] * 8.0f) - 4.0f)) * 0.5f) + 0.5f;//prep Index
 8019116:	ee30 0a08 	vadd.f32	s0, s0, s16
	if (!independentStrings)
 801911a:	6836      	ldr	r6, [r6, #0]
	displayValues[7] = presetKnobValues[LivingString][7];// let ring
 801911c:	61e2      	str	r2, [r4, #28]
	displayValues[6] = ((tanhf((presetKnobValues[LivingString][6] * 8.0f) - 4.0f)) * 0.5f) + 0.5f;//prep Index
 801911e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019122:	ed84 0a06 	vstr	s0, [r4, #24]
	if (!independentStrings)
 8019126:	2e00      	cmp	r6, #0
 8019128:	f040 8134 	bne.w	8019394 <SFXLivingStringFrame+0x33c>
		if (!ignoreFreqKnobs)
 801912c:	4b8c      	ldr	r3, [pc, #560]	; (8019360 <SFXLivingStringFrame+0x308>)
 801912e:	f8d3 9000 	ldr.w	r9, [r3]
 8019132:	f1b9 0f00 	cmp.w	r9, #0
 8019136:	f000 808b 	beq.w	8019250 <SFXLivingStringFrame+0x1f8>
 801913a:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8019388 <SFXLivingStringFrame+0x330>
 801913e:	46b1      	mov	r9, r6
 8019140:	4b88      	ldr	r3, [pc, #544]	; (8019364 <SFXLivingStringFrame+0x30c>)
				tComplexLivingString_setDecay(&theString[i], (displayValues[2] * 0.015f) + 0.995f);
 8019142:	f8cd 8000 	str.w	r8, [sp]
 8019146:	46b0      	mov	r8, r6
 8019148:	9701      	str	r7, [sp, #4]
 801914a:	461f      	mov	r7, r3
 801914c:	f8df a23c 	ldr.w	sl, [pc, #572]	; 801938c <SFXLivingStringFrame+0x334>
 8019150:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8019390 <SFXLivingStringFrame+0x338>
 8019154:	ed9f 9a84 	vldr	s18, [pc, #528]	; 8019368 <SFXLivingStringFrame+0x310>
 8019158:	eddf 8a84 	vldr	s17, [pc, #528]	; 801936c <SFXLivingStringFrame+0x314>
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801915c:	fa5f f688 	uxtb.w	r6, r8
 8019160:	9b01      	ldr	r3, [sp, #4]
 8019162:	4883      	ldr	r0, [pc, #524]	; (8019370 <SFXLivingStringFrame+0x318>)
 8019164:	4631      	mov	r1, r6
 8019166:	eb03 0509 	add.w	r5, r3, r9
 801916a:	f00b ff8d 	bl	8025088 <tSimplePoly_getPitch>
 801916e:	ee07 0a90 	vmov	s15, r0
 8019172:	ed9b 0a00 	vldr	s0, [fp]
 8019176:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801917a:	4b7e      	ldr	r3, [pc, #504]	; (8019374 <SFXLivingStringFrame+0x31c>)
 801917c:	7818      	ldrb	r0, [r3, #0]
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801917e:	ee37 7a00 	vadd.f32	s14, s14, s0
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8019182:	4b7d      	ldr	r3, [pc, #500]	; (8019378 <SFXLivingStringFrame+0x320>)
 8019184:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019188:	ee17 1a90 	vmov	r1, s15
 801918c:	1a09      	subs	r1, r1, r0
 801918e:	fb83 3c01 	smull	r3, ip, r3, r1
 8019192:	17c8      	asrs	r0, r1, #31
	float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8019194:	4b79      	ldr	r3, [pc, #484]	; (801937c <SFXLivingStringFrame+0x324>)
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8019196:	ebc0 006c 	rsb	r0, r0, ip, asr #1
 801919a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801919e:	eba1 0080 	sub.w	r0, r1, r0, lsl #2
 80191a2:	ee07 0a90 	vmov	s15, r0
 80191a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 80191aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80191ae:	ee17 1a90 	vmov	r1, s15
 80191b2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80191b6:	ed91 0a00 	vldr	s0, [r1]
	freq[voice] = LEAF_midiToFrequency(tunedNote);
 80191ba:	ee37 0a00 	vadd.f32	s0, s14, s0
 80191be:	f00b f9c9 	bl	8024554 <LEAF_midiToFrequency>
				tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 80191c2:	eef0 6a48 	vmov.f32	s13, s16
 80191c6:	ecb7 7a01 	vldmia	r7!, {s14}
 80191ca:	4628      	mov	r0, r5
 80191cc:	edd4 7a01 	vldr	s15, [r4, #4]
	freq[voice] = LEAF_midiToFrequency(tunedNote);
 80191d0:	ecaa 0a01 	vstmia	sl!, {s0}
				tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 80191d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80191d8:	ee26 0a80 	vmul.f32	s0, s13, s0
 80191dc:	f00c fa84 	bl	80256e8 <tComplexLivingString_setFreq>
				tComplexLivingString_setDecay(&theString[i], (displayValues[2] * 0.015f) + 0.995f);
 80191e0:	eeb0 0a68 	vmov.f32	s0, s17
 80191e4:	edd4 7a02 	vldr	s15, [r4, #8]
 80191e8:	4628      	mov	r0, r5
 80191ea:	eea7 0a89 	vfma.f32	s0, s15, s18
 80191ee:	f00c fae3 	bl	80257b8 <tComplexLivingString_setDecay>
				tComplexLivingString_setDampFreq(&theString[i], displayValues[3]);
 80191f2:	4628      	mov	r0, r5
 80191f4:	ed94 0a03 	vldr	s0, [r4, #12]
 80191f8:	f00c fabe 	bl	8025778 <tComplexLivingString_setDampFreq>
				tComplexLivingString_setPickPos(&theString[i], displayValues[4]);
 80191fc:	4628      	mov	r0, r5
 80191fe:	ed94 0a04 	vldr	s0, [r4, #16]
 8019202:	f00c fa89 	bl	8025718 <tComplexLivingString_setPickPos>
				tComplexLivingString_setPrepPos(&theString[i], displayValues[5]);
 8019206:	4628      	mov	r0, r5
 8019208:	ed94 0a05 	vldr	s0, [r4, #20]
 801920c:	f00c fa94 	bl	8025738 <tComplexLivingString_setPrepPos>
				tComplexLivingString_setPrepIndex(&theString[i], displayValues[6]);
 8019210:	ed94 0a06 	vldr	s0, [r4, #24]
 8019214:	4628      	mov	r0, r5
 8019216:	f00c faa1 	bl	802575c <tComplexLivingString_setPrepIndex>
				if (tSimplePoly_isOn(&poly, i))
 801921a:	4631      	mov	r1, r6
 801921c:	4854      	ldr	r0, [pc, #336]	; (8019370 <SFXLivingStringFrame+0x318>)
 801921e:	f00b ff45 	bl	80250ac <tSimplePoly_isOn>
 8019222:	9b00      	ldr	r3, [sp, #0]
					tExpSmooth_setDest(&stringGains[i], 1.0f);
 8019224:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019228:	eb03 0109 	add.w	r1, r3, r9
				if (tSimplePoly_isOn(&poly, i))
 801922c:	b908      	cbnz	r0, 8019232 <SFXLivingStringFrame+0x1da>
					tExpSmooth_setDest(&stringGains[i], displayValues[7]);
 801922e:	ed94 0a07 	vldr	s0, [r4, #28]
			for (int i = 0; i < NUM_STRINGS; i++)
 8019232:	f108 0801 	add.w	r8, r8, #1
					tExpSmooth_setDest(&stringGains[i], displayValues[7]);
 8019236:	4608      	mov	r0, r1
 8019238:	f009 fc0e 	bl	8022a58 <tExpSmooth_setDest>
 801923c:	f109 0904 	add.w	r9, r9, #4
			for (int i = 0; i < NUM_STRINGS; i++)
 8019240:	f1b8 0f06 	cmp.w	r8, #6
 8019244:	d18a      	bne.n	801915c <SFXLivingStringFrame+0x104>
}
 8019246:	b003      	add	sp, #12
 8019248:	ecbd 8b04 	vpop	{d8-d9}
 801924c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019250:	f8df a110 	ldr.w	sl, [pc, #272]	; 8019364 <SFXLivingStringFrame+0x30c>
		if (!ignoreFreqKnobs)
 8019254:	464e      	mov	r6, r9
 8019256:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8019388 <SFXLivingStringFrame+0x330>
				tComplexLivingString_setDecay(&theString[i], (displayValues[2] * 0.015f) + 0.995f);
 801925a:	ed9f 9a43 	vldr	s18, [pc, #268]	; 8019368 <SFXLivingStringFrame+0x310>
 801925e:	eddf 8a43 	vldr	s17, [pc, #268]	; 801936c <SFXLivingStringFrame+0x314>
				float freqVal = displayValues[0] * (i+1);
 8019262:	f109 0901 	add.w	r9, r9, #1
				tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 8019266:	eeb0 0a48 	vmov.f32	s0, s16
 801926a:	ecba 6a01 	vldmia	sl!, {s12}
 801926e:	19bd      	adds	r5, r7, r6
 8019270:	edd4 6a01 	vldr	s13, [r4, #4]
				float freqVal = displayValues[0] * (i+1);
 8019274:	ee07 9a90 	vmov	s15, r9
				tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 8019278:	4628      	mov	r0, r5
				float freqVal = displayValues[0] * (i+1);
 801927a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801927e:	edd4 7a00 	vldr	s15, [r4]
				tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 8019282:	eea6 0a26 	vfma.f32	s0, s12, s13
				float freqVal = displayValues[0] * (i+1);
 8019286:	ee67 7a27 	vmul.f32	s15, s14, s15
				tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 801928a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801928e:	f00c fa2b 	bl	80256e8 <tComplexLivingString_setFreq>
				tComplexLivingString_setDecay(&theString[i], (displayValues[2] * 0.015f) + 0.995f);
 8019292:	eeb0 0a68 	vmov.f32	s0, s17
 8019296:	edd4 7a02 	vldr	s15, [r4, #8]
 801929a:	4628      	mov	r0, r5
 801929c:	eea7 0a89 	vfma.f32	s0, s15, s18
 80192a0:	f00c fa8a 	bl	80257b8 <tComplexLivingString_setDecay>
				tComplexLivingString_setDampFreq(&theString[i], displayValues[3]);
 80192a4:	4628      	mov	r0, r5
 80192a6:	ed94 0a03 	vldr	s0, [r4, #12]
 80192aa:	f00c fa65 	bl	8025778 <tComplexLivingString_setDampFreq>
				tComplexLivingString_setPickPos(&theString[i], displayValues[4]);
 80192ae:	4628      	mov	r0, r5
 80192b0:	ed94 0a04 	vldr	s0, [r4, #16]
 80192b4:	f00c fa30 	bl	8025718 <tComplexLivingString_setPickPos>
				tComplexLivingString_setPrepPos(&theString[i], displayValues[5]);
 80192b8:	4628      	mov	r0, r5
 80192ba:	ed94 0a05 	vldr	s0, [r4, #20]
 80192be:	f00c fa3b 	bl	8025738 <tComplexLivingString_setPrepPos>
				tComplexLivingString_setPrepIndex(&theString[i], displayValues[6]);
 80192c2:	4628      	mov	r0, r5
 80192c4:	ed94 0a06 	vldr	s0, [r4, #24]
 80192c8:	f00c fa48 	bl	802575c <tComplexLivingString_setPrepIndex>
				tExpSmooth_setDest(&stringGains[i], 1.0f);
 80192cc:	eb08 0006 	add.w	r0, r8, r6
 80192d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80192d4:	3604      	adds	r6, #4
 80192d6:	f009 fbbf 	bl	8022a58 <tExpSmooth_setDest>
			for (int i = 0; i < NUM_STRINGS; i++)
 80192da:	f1b9 0f06 	cmp.w	r9, #6
 80192de:	d1c0      	bne.n	8019262 <SFXLivingStringFrame+0x20a>
}
 80192e0:	b003      	add	sp, #12
 80192e2:	ecbd 8b04 	vpop	{d8-d9}
 80192e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		levMode = !levMode;
 80192ea:	4e25      	ldr	r6, [pc, #148]	; (8019380 <SFXLivingStringFrame+0x328>)
 80192ec:	4f17      	ldr	r7, [pc, #92]	; (801934c <SFXLivingStringFrame+0x2f4>)
 80192ee:	6831      	ldr	r1, [r6, #0]
 80192f0:	463c      	mov	r4, r7
 80192f2:	f107 0818 	add.w	r8, r7, #24
 80192f6:	fab1 f181 	clz	r1, r1
 80192fa:	0949      	lsrs	r1, r1, #5
 80192fc:	6031      	str	r1, [r6, #0]
 80192fe:	e000      	b.n	8019302 <SFXLivingStringFrame+0x2aa>
 8019300:	6831      	ldr	r1, [r6, #0]
			tComplexLivingString_setLevMode(&theString[i], levMode);
 8019302:	4620      	mov	r0, r4
 8019304:	3404      	adds	r4, #4
 8019306:	f00c fa6f 	bl	80257e8 <tComplexLivingString_setLevMode>
		for (int i = 0; i < NUM_STRINGS; i++)
 801930a:	4544      	cmp	r4, r8
 801930c:	d1f8      	bne.n	8019300 <SFXLivingStringFrame+0x2a8>
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 801930e:	2300      	movs	r3, #0
		setLED_C(levMode);
 8019310:	7830      	ldrb	r0, [r6, #0]
		independentStrings = !independentStrings;
 8019312:	4e0f      	ldr	r6, [pc, #60]	; (8019350 <SFXLivingStringFrame+0x2f8>)
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8019314:	772b      	strb	r3, [r5, #28]
		setLED_C(levMode);
 8019316:	f7fa fceb 	bl	8013cf0 <setLED_C>
	if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 801931a:	7e2b      	ldrb	r3, [r5, #24]
 801931c:	2b01      	cmp	r3, #1
 801931e:	f47f aeaf 	bne.w	8019080 <SFXLivingStringFrame+0x28>
		independentStrings = !independentStrings;
 8019322:	6833      	ldr	r3, [r6, #0]
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 8019324:	2200      	movs	r2, #0
		independentStrings = !independentStrings;
 8019326:	fab3 f383 	clz	r3, r3
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 801932a:	762a      	strb	r2, [r5, #24]
		independentStrings = !independentStrings;
 801932c:	095b      	lsrs	r3, r3, #5
		setLED_B(independentStrings);
 801932e:	4618      	mov	r0, r3
		independentStrings = !independentStrings;
 8019330:	6033      	str	r3, [r6, #0]
		setLED_B(independentStrings);
 8019332:	f7fa fccf 	bl	8013cd4 <setLED_B>
 8019336:	e6a3      	b.n	8019080 <SFXLivingStringFrame+0x28>
 8019338:	eb851eb8 	.word	0xeb851eb8
 801933c:	3fdeb851 	.word	0x3fdeb851
 8019340:	40000000 	.word	0x40000000
 8019344:	3f947ae1 	.word	0x3f947ae1
 8019348:	20018714 	.word	0x20018714
 801934c:	20016070 	.word	0x20016070
 8019350:	20000598 	.word	0x20000598
 8019354:	42b40000 	.word	0x42b40000
 8019358:	200187c4 	.word	0x200187c4
 801935c:	43020000 	.word	0x43020000
 8019360:	20000594 	.word	0x20000594
 8019364:	20016268 	.word	0x20016268
 8019368:	3c75c28f 	.word	0x3c75c28f
 801936c:	3f7eb852 	.word	0x3f7eb852
 8019370:	20017554 	.word	0x20017554
 8019374:	20000654 	.word	0x20000654
 8019378:	2aaaaaab 	.word	0x2aaaaaab
 801937c:	20000620 	.word	0x20000620
 8019380:	200005a0 	.word	0x200005a0
 8019384:	20016c88 	.word	0x20016c88
 8019388:	20017060 	.word	0x20017060
 801938c:	20016e3c 	.word	0x20016e3c
 8019390:	200005d8 	.word	0x200005d8
		displayValues[10] = LEAF_midiToFrequency((presetKnobValues[LivingString][10] * 90.0f)); //freq
 8019394:	ed9b 0a0a 	vldr	s0, [fp, #40]	; 0x28
		displayValues[14] = LEAF_midiToFrequency((presetKnobValues[LivingString][14] * 90.0f)); //freq
 8019398:	2600      	movs	r6, #0
 801939a:	4d41      	ldr	r5, [pc, #260]	; (80194a0 <SFXLivingStringFrame+0x448>)
 801939c:	f104 0a24 	add.w	sl, r4, #36	; 0x24
		displayValues[10] = LEAF_midiToFrequency((presetKnobValues[LivingString][10] * 90.0f)); //freq
 80193a0:	ee20 0a28 	vmul.f32	s0, s0, s17
		for (int i = 0; i < NUM_STRINGS; i++)
 80193a4:	46b1      	mov	r9, r6
		displayValues[10] = LEAF_midiToFrequency((presetKnobValues[LivingString][10] * 90.0f)); //freq
 80193a6:	f00b f8d5 	bl	8024554 <LEAF_midiToFrequency>
		displayValues[11] = LEAF_midiToFrequency((presetKnobValues[LivingString][11] * 90.0f)); //freq
 80193aa:	eddb 7a0b 	vldr	s15, [fp, #44]	; 0x2c
		displayValues[10] = LEAF_midiToFrequency((presetKnobValues[LivingString][10] * 90.0f)); //freq
 80193ae:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		displayValues[11] = LEAF_midiToFrequency((presetKnobValues[LivingString][11] * 90.0f)); //freq
 80193b2:	ee27 0aa8 	vmul.f32	s0, s15, s17
			tComplexLivingString_setDecay(&theString[i], (displayValues[2] * 0.015f) + 0.995f);
 80193b6:	eddf 9a3b 	vldr	s19, [pc, #236]	; 80194a4 <SFXLivingStringFrame+0x44c>
		displayValues[11] = LEAF_midiToFrequency((presetKnobValues[LivingString][11] * 90.0f)); //freq
 80193ba:	f00b f8cb 	bl	8024554 <LEAF_midiToFrequency>
		displayValues[12] = LEAF_midiToFrequency((presetKnobValues[LivingString][12] * 90.0f)); //freq
 80193be:	eddb 7a0c 	vldr	s15, [fp, #48]	; 0x30
		displayValues[11] = LEAF_midiToFrequency((presetKnobValues[LivingString][11] * 90.0f)); //freq
 80193c2:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
		displayValues[12] = LEAF_midiToFrequency((presetKnobValues[LivingString][12] * 90.0f)); //freq
 80193c6:	ee27 0aa8 	vmul.f32	s0, s15, s17
			tComplexLivingString_setDecay(&theString[i], (displayValues[2] * 0.015f) + 0.995f);
 80193ca:	ed9f 9a37 	vldr	s18, [pc, #220]	; 80194a8 <SFXLivingStringFrame+0x450>
		displayValues[12] = LEAF_midiToFrequency((presetKnobValues[LivingString][12] * 90.0f)); //freq
 80193ce:	f00b f8c1 	bl	8024554 <LEAF_midiToFrequency>
		displayValues[13] = LEAF_midiToFrequency((presetKnobValues[LivingString][13] * 90.0f)); //freq
 80193d2:	eddb 7a0d 	vldr	s15, [fp, #52]	; 0x34
		displayValues[12] = LEAF_midiToFrequency((presetKnobValues[LivingString][12] * 90.0f)); //freq
 80193d6:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
		displayValues[13] = LEAF_midiToFrequency((presetKnobValues[LivingString][13] * 90.0f)); //freq
 80193da:	ee27 0aa8 	vmul.f32	s0, s15, s17
 80193de:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80194b0 <SFXLivingStringFrame+0x458>
 80193e2:	f00b f8b7 	bl	8024554 <LEAF_midiToFrequency>
		displayValues[14] = LEAF_midiToFrequency((presetKnobValues[LivingString][14] * 90.0f)); //freq
 80193e6:	eddb 7a0e 	vldr	s15, [fp, #56]	; 0x38
 80193ea:	46ab      	mov	fp, r5
		displayValues[13] = LEAF_midiToFrequency((presetKnobValues[LivingString][13] * 90.0f)); //freq
 80193ec:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
		displayValues[14] = LEAF_midiToFrequency((presetKnobValues[LivingString][14] * 90.0f)); //freq
 80193f0:	ee27 0aa8 	vmul.f32	s0, s15, s17
 80193f4:	f00b f8ae 	bl	8024554 <LEAF_midiToFrequency>
 80193f8:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
			float freqVal = i == 0 ? displayValues[0] : displayValues[9+i];
 80193fc:	2e00      	cmp	r6, #0
 80193fe:	d04b      	beq.n	8019498 <SFXLivingStringFrame+0x440>
 8019400:	edda 7a00 	vldr	s15, [sl]
			tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 8019404:	eeb0 0a48 	vmov.f32	s0, s16
 8019408:	ecfb 6a01 	vldmia	fp!, {s13}
 801940c:	ed94 7a01 	vldr	s14, [r4, #4]
 8019410:	eb07 0509 	add.w	r5, r7, r9
		for (int i = 0; i < NUM_STRINGS; i++)
 8019414:	3601      	adds	r6, #1
 8019416:	f10a 0a04 	add.w	sl, sl, #4
			tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 801941a:	eea6 0a87 	vfma.f32	s0, s13, s14
 801941e:	4628      	mov	r0, r5
 8019420:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019424:	f00c f960 	bl	80256e8 <tComplexLivingString_setFreq>
			tComplexLivingString_setDecay(&theString[i], (displayValues[2] * 0.015f) + 0.995f);
 8019428:	eeb0 0a49 	vmov.f32	s0, s18
 801942c:	edd4 7a02 	vldr	s15, [r4, #8]
 8019430:	4628      	mov	r0, r5
 8019432:	eea7 0aa9 	vfma.f32	s0, s15, s19
 8019436:	f00c f9bf 	bl	80257b8 <tComplexLivingString_setDecay>
			tComplexLivingString_setDampFreq(&theString[i], displayValues[3]);
 801943a:	4628      	mov	r0, r5
 801943c:	ed94 0a03 	vldr	s0, [r4, #12]
 8019440:	f00c f99a 	bl	8025778 <tComplexLivingString_setDampFreq>
			tComplexLivingString_setPickPos(&theString[i], displayValues[4]);
 8019444:	4628      	mov	r0, r5
 8019446:	ed94 0a04 	vldr	s0, [r4, #16]
 801944a:	f00c f965 	bl	8025718 <tComplexLivingString_setPickPos>
			tComplexLivingString_setPrepPos(&theString[i], displayValues[5]);
 801944e:	4628      	mov	r0, r5
 8019450:	ed94 0a05 	vldr	s0, [r4, #20]
 8019454:	f00c f970 	bl	8025738 <tComplexLivingString_setPrepPos>
			tComplexLivingString_setPrepIndex(&theString[i], displayValues[6]);
 8019458:	4628      	mov	r0, r5
 801945a:	ed94 0a06 	vldr	s0, [r4, #24]
 801945e:	f00c f97d 	bl	802575c <tComplexLivingString_setPrepIndex>
			tExpSmooth_setDest(&stringGains[i], 1.0f);
 8019462:	eb08 0009 	add.w	r0, r8, r9
 8019466:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801946a:	f109 0904 	add.w	r9, r9, #4
 801946e:	f009 faf3 	bl	8022a58 <tExpSmooth_setDest>
		for (int i = 0; i < NUM_STRINGS; i++)
 8019472:	2e06      	cmp	r6, #6
 8019474:	d1c2      	bne.n	80193fc <SFXLivingStringFrame+0x3a4>
}
 8019476:	b003      	add	sp, #12
 8019478:	ecbd 8b04 	vpop	{d8-d9}
 801947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ignoreFreqKnobs = !ignoreFreqKnobs;
 8019480:	4a0a      	ldr	r2, [pc, #40]	; (80194ac <SFXLivingStringFrame+0x454>)
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 8019482:	2100      	movs	r1, #0
		ignoreFreqKnobs = !ignoreFreqKnobs;
 8019484:	6813      	ldr	r3, [r2, #0]
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 8019486:	7529      	strb	r1, [r5, #20]
		ignoreFreqKnobs = !ignoreFreqKnobs;
 8019488:	fab3 f383 	clz	r3, r3
 801948c:	095b      	lsrs	r3, r3, #5
		setLED_A(ignoreFreqKnobs);
 801948e:	4618      	mov	r0, r3
		ignoreFreqKnobs = !ignoreFreqKnobs;
 8019490:	6013      	str	r3, [r2, #0]
		setLED_A(ignoreFreqKnobs);
 8019492:	f7fa fc11 	bl	8013cb8 <setLED_A>
 8019496:	e5e9      	b.n	801906c <SFXLivingStringFrame+0x14>
			float freqVal = i == 0 ? displayValues[0] : displayValues[9+i];
 8019498:	edd4 7a00 	vldr	s15, [r4]
 801949c:	e7b2      	b.n	8019404 <SFXLivingStringFrame+0x3ac>
 801949e:	bf00      	nop
 80194a0:	20016268 	.word	0x20016268
 80194a4:	3c75c28f 	.word	0x3c75c28f
 80194a8:	3f7eb852 	.word	0x3f7eb852
 80194ac:	20000594 	.word	0x20000594
 80194b0:	20017060 	.word	0x20017060

080194b4 <SFXLivingStringTick>:
{
 80194b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194b6:	4605      	mov	r5, r0
 80194b8:	2400      	movs	r4, #0
 80194ba:	4f10      	ldr	r7, [pc, #64]	; (80194fc <SFXLivingStringTick+0x48>)
 80194bc:	4e10      	ldr	r6, [pc, #64]	; (8019500 <SFXLivingStringTick+0x4c>)
 80194be:	ed2d 8b02 	vpush	{d8}
	float sample = 0.0f;
 80194c2:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8019504 <SFXLivingStringTick+0x50>
		float tick = tComplexLivingString_tick(&theString[i], input[1]);
 80194c6:	1938      	adds	r0, r7, r4
 80194c8:	ed95 0a01 	vldr	s0, [r5, #4]
 80194cc:	f00c f9a2 	bl	8025814 <tComplexLivingString_tick>
		sample += tick * tExpSmooth_tick(&stringGains[i]);
 80194d0:	1930      	adds	r0, r6, r4
 80194d2:	3404      	adds	r4, #4
		float tick = tComplexLivingString_tick(&theString[i], input[1]);
 80194d4:	eef0 8a40 	vmov.f32	s17, s0
		sample += tick * tExpSmooth_tick(&stringGains[i]);
 80194d8:	f009 fac8 	bl	8022a6c <tExpSmooth_tick>
	for (int i = 0; i < NUM_STRINGS; i++)
 80194dc:	2c18      	cmp	r4, #24
		sample += tick * tExpSmooth_tick(&stringGains[i]);
 80194de:	eea0 8a28 	vfma.f32	s16, s0, s17
	for (int i = 0; i < NUM_STRINGS; i++)
 80194e2:	d1f0      	bne.n	80194c6 <SFXLivingStringTick+0x12>
	sample *= 0.1625f;
 80194e4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019508 <SFXLivingStringTick+0x54>
 80194e8:	ee28 8a27 	vmul.f32	s16, s16, s15
	input[0] = sample;
 80194ec:	ed85 8a00 	vstr	s16, [r5]
	input[1] = sample;
 80194f0:	ed85 8a01 	vstr	s16, [r5, #4]
}
 80194f4:	ecbd 8b02 	vpop	{d8}
 80194f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194fa:	bf00      	nop
 80194fc:	20016070 	.word	0x20016070
 8019500:	20017060 	.word	0x20017060
 8019504:	00000000 	.word	0x00000000
 8019508:	3e266666 	.word	0x3e266666

0801950c <SFXLivingStringFree>:
{
 801950c:	b570      	push	{r4, r5, r6, lr}
 801950e:	2400      	movs	r4, #0
 8019510:	4e05      	ldr	r6, [pc, #20]	; (8019528 <SFXLivingStringFree+0x1c>)
 8019512:	4d06      	ldr	r5, [pc, #24]	; (801952c <SFXLivingStringFree+0x20>)
		tComplexLivingString_free(&theString[i]);
 8019514:	1930      	adds	r0, r6, r4
 8019516:	f00c f89b 	bl	8025650 <tComplexLivingString_free>
		tExpSmooth_free(&stringGains[i]);
 801951a:	1928      	adds	r0, r5, r4
 801951c:	3404      	adds	r4, #4
 801951e:	f009 fa85 	bl	8022a2c <tExpSmooth_free>
	for (int i = 0; i < NUM_STRINGS; i++)
 8019522:	2c18      	cmp	r4, #24
 8019524:	d1f6      	bne.n	8019514 <SFXLivingStringFree+0x8>
}
 8019526:	bd70      	pop	{r4, r5, r6, pc}
 8019528:	20016070 	.word	0x20016070
 801952c:	20017060 	.word	0x20017060

08019530 <SFXLivingStringSynthAlloc>:
	levMode = 1;
 8019530:	4a44      	ldr	r2, [pc, #272]	; (8019644 <SFXLivingStringSynthAlloc+0x114>)
 8019532:	2001      	movs	r0, #1
	tSimplePoly_setNumVoices(&poly, NUM_STRINGS);
 8019534:	2106      	movs	r1, #6
{
 8019536:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	leaf.clearOnAllocation = 0;
 801953a:	2300      	movs	r3, #0
 801953c:	f8df b158 	ldr.w	fp, [pc, #344]	; 8019698 <SFXLivingStringSynthAlloc+0x168>
 8019540:	4e41      	ldr	r6, [pc, #260]	; (8019648 <SFXLivingStringSynthAlloc+0x118>)
 8019542:	f8df a158 	ldr.w	sl, [pc, #344]	; 801969c <SFXLivingStringSynthAlloc+0x16c>
	tSimplePoly_setNumVoices(&poly, NUM_STRINGS);
 8019546:	461c      	mov	r4, r3
 8019548:	f8df 9154 	ldr.w	r9, [pc, #340]	; 80196a0 <SFXLivingStringSynthAlloc+0x170>
 801954c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80196a4 <SFXLivingStringSynthAlloc+0x174>
 8019550:	4f3e      	ldr	r7, [pc, #248]	; (801964c <SFXLivingStringSynthAlloc+0x11c>)
		tSlide_initToPool(&stringOutEnvs[i], 10.0f, 1000.0f, &smallPool);
 8019552:	4d3f      	ldr	r5, [pc, #252]	; (8019650 <SFXLivingStringSynthAlloc+0x120>)
	leaf.clearOnAllocation = 0;
 8019554:	f8cb 3014 	str.w	r3, [fp, #20]
{
 8019558:	ed2d 8b06 	vpush	{d8-d10}
		tComplexLivingString_init(&theString[i], 440.f, 0.2f, 0.3f, 0.f, 9000.f, 1.0f, 0.0f, 0.01f, 0.125f, levModeStr);
 801955c:	ed9f aa3d 	vldr	s20, [pc, #244]	; 8019654 <SFXLivingStringSynthAlloc+0x124>
 8019560:	eddf 8a3d 	vldr	s17, [pc, #244]	; 8019658 <SFXLivingStringSynthAlloc+0x128>
 8019564:	eddf 9a3d 	vldr	s19, [pc, #244]	; 801965c <SFXLivingStringSynthAlloc+0x12c>
 8019568:	ed9f 9a3d 	vldr	s18, [pc, #244]	; 8019660 <SFXLivingStringSynthAlloc+0x130>
		tSlide_initToPool(&stringOutEnvs[i], 10.0f, 1000.0f, &smallPool);
 801956c:	ed9f 8a3d 	vldr	s16, [pc, #244]	; 8019664 <SFXLivingStringSynthAlloc+0x134>
	levMode = 1;
 8019570:	6010      	str	r0, [r2, #0]
	tSimplePoly_setNumVoices(&poly, NUM_STRINGS);
 8019572:	483d      	ldr	r0, [pc, #244]	; (8019668 <SFXLivingStringSynthAlloc+0x138>)
 8019574:	f00b fd64 	bl	8025040 <tSimplePoly_setNumVoices>
		tComplexLivingString_init(&theString[i], 440.f, 0.2f, 0.3f, 0.f, 9000.f, 1.0f, 0.0f, 0.01f, 0.125f, levModeStr);
 8019578:	eeb4 4a00 	vmov.f32	s8, #64	; 0x3e000000  0.125
 801957c:	eddf 1a36 	vldr	s3, [pc, #216]	; 8019658 <SFXLivingStringSynthAlloc+0x128>
 8019580:	eef0 3a4a 	vmov.f32	s7, s20
 8019584:	eb0a 0004 	add.w	r0, sl, r4
 8019588:	eeb0 3a68 	vmov.f32	s6, s17
 801958c:	6831      	ldr	r1, [r6, #0]
 801958e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8019592:	eddf 0a36 	vldr	s1, [pc, #216]	; 801966c <SFXLivingStringSynthAlloc+0x13c>
 8019596:	eeb0 2a69 	vmov.f32	s4, s19
 801959a:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8019670 <SFXLivingStringSynthAlloc+0x140>
 801959e:	eeb0 1a49 	vmov.f32	s2, s18
 80195a2:	f00c f84f 	bl	8025644 <tComplexLivingString_init>
		tSlide_initToPool(&stringOutEnvs[i], 10.0f, 1000.0f, &smallPool);
 80195a6:	eb09 0004 	add.w	r0, r9, r4
 80195aa:	4629      	mov	r1, r5
 80195ac:	eef0 0a48 	vmov.f32	s1, s16
 80195b0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80195b4:	f009 fa6a 	bl	8022a8c <tSlide_initToPool>
		tSlide_initToPool(&stringInEnvs[i], 12.0f, 1000.0f, &smallPool);
 80195b8:	eb08 0004 	add.w	r0, r8, r4
 80195bc:	4629      	mov	r1, r5
 80195be:	eef0 0a48 	vmov.f32	s1, s16
 80195c2:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 80195c6:	f009 fa61 	bl	8022a8c <tSlide_initToPool>
		tADSR4_initToPool(&pluckEnvs[i], 4.0f, 70.0f, 0.0f, 5.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &smallPool);
 80195ca:	1938      	adds	r0, r7, r4
 80195cc:	3404      	adds	r4, #4
 80195ce:	462b      	mov	r3, r5
 80195d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80195d4:	4927      	ldr	r1, [pc, #156]	; (8019674 <SFXLivingStringSynthAlloc+0x144>)
 80195d6:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80195da:	eddf 0a27 	vldr	s1, [pc, #156]	; 8019678 <SFXLivingStringSynthAlloc+0x148>
 80195de:	eeb0 1a68 	vmov.f32	s2, s17
 80195e2:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80195e6:	f008 fe43 	bl	8022270 <tADSR4_initToPool>
	for (int i = 0; i < NUM_STRINGS; i++)
 80195ea:	2c18      	cmp	r4, #24
 80195ec:	d1c4      	bne.n	8019578 <SFXLivingStringSynthAlloc+0x48>
	tVZFilter_initToPool(&pluckFilt, BandpassPeak, 2000.0f, 4.0f, &smallPool);
 80195ee:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80195f2:	ed9f 0a22 	vldr	s0, [pc, #136]	; 801967c <SFXLivingStringSynthAlloc+0x14c>
 80195f6:	4a16      	ldr	r2, [pc, #88]	; (8019650 <SFXLivingStringSynthAlloc+0x120>)
 80195f8:	2103      	movs	r1, #3
 80195fa:	4821      	ldr	r0, [pc, #132]	; (8019680 <SFXLivingStringSynthAlloc+0x150>)
 80195fc:	f009 fd7e 	bl	80230fc <tVZFilter_initToPool>
	tNoise_initToPool(&stringPluckNoise, WhiteNoise, &smallPool);
 8019600:	4a13      	ldr	r2, [pc, #76]	; (8019650 <SFXLivingStringSynthAlloc+0x120>)
 8019602:	2100      	movs	r1, #0
 8019604:	481f      	ldr	r0, [pc, #124]	; (8019684 <SFXLivingStringSynthAlloc+0x154>)
 8019606:	f00b fe8f 	bl	8025328 <tNoise_initToPool>
	setLED_A(numVoices == 1);
 801960a:	4b1f      	ldr	r3, [pc, #124]	; (8019688 <SFXLivingStringSynthAlloc+0x158>)
 801960c:	7818      	ldrb	r0, [r3, #0]
 801960e:	f1a0 0001 	sub.w	r0, r0, #1
 8019612:	fab0 f080 	clz	r0, r0
 8019616:	0940      	lsrs	r0, r0, #5
 8019618:	f7fa fb4e 	bl	8013cb8 <setLED_A>
	setLED_B(voicePluck);
 801961c:	4b1b      	ldr	r3, [pc, #108]	; (801968c <SFXLivingStringSynthAlloc+0x15c>)
 801961e:	7818      	ldrb	r0, [r3, #0]
 8019620:	f7fa fb58 	bl	8013cd4 <setLED_B>
	setLED_C(levModeStr);
 8019624:	7830      	ldrb	r0, [r6, #0]
 8019626:	f7fa fb63 	bl	8013cf0 <setLED_C>
	samplesPerMs = leaf.sampleRate / 1000.0f;
 801962a:	eddb 7a00 	vldr	s15, [fp]
 801962e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8019690 <SFXLivingStringSynthAlloc+0x160>
 8019632:	4b18      	ldr	r3, [pc, #96]	; (8019694 <SFXLivingStringSynthAlloc+0x164>)
 8019634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019638:	edc3 7a00 	vstr	s15, [r3]
}
 801963c:	ecbd 8b06 	vpop	{d8-d10}
 8019640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019644:	200005a0 	.word	0x200005a0
 8019648:	200005a4 	.word	0x200005a4
 801964c:	20017440 	.word	0x20017440
 8019650:	20014b2c 	.word	0x20014b2c
 8019654:	3c23d70a 	.word	0x3c23d70a
 8019658:	00000000 	.word	0x00000000
 801965c:	460ca000 	.word	0x460ca000
 8019660:	3e99999a 	.word	0x3e99999a
 8019664:	447a0000 	.word	0x447a0000
 8019668:	20017554 	.word	0x20017554
 801966c:	3e4ccccd 	.word	0x3e4ccccd
 8019670:	43dc0000 	.word	0x43dc0000
 8019674:	20017970 	.word	0x20017970
 8019678:	428c0000 	.word	0x428c0000
 801967c:	44fa0000 	.word	0x44fa0000
 8019680:	2001839c 	.word	0x2001839c
 8019684:	20016344 	.word	0x20016344
 8019688:	20000250 	.word	0x20000250
 801968c:	20000618 	.word	0x20000618
 8019690:	3a83126f 	.word	0x3a83126f
 8019694:	200002ac 	.word	0x200002ac
 8019698:	200194a0 	.word	0x200194a0
 801969c:	20016070 	.word	0x20016070
 80196a0:	20017628 	.word	0x20017628
 80196a4:	200176f0 	.word	0x200176f0

080196a8 <SFXLivingStringSynthFrame>:
{
 80196a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 80196ac:	4dc0      	ldr	r5, [pc, #768]	; (80199b0 <SFXLivingStringSynthFrame+0x308>)
{
 80196ae:	ed2d 8b02 	vpush	{d8}
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 80196b2:	7d2b      	ldrb	r3, [r5, #20]
{
 80196b4:	b083      	sub	sp, #12
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 80196b6:	2b01      	cmp	r3, #1
 80196b8:	d113      	bne.n	80196e2 <SFXLivingStringSynthFrame+0x3a>
		numVoices = (numVoices > 1) ? 1 : NUM_STRINGS;
 80196ba:	4cbe      	ldr	r4, [pc, #760]	; (80199b4 <SFXLivingStringSynthFrame+0x30c>)
		tSimplePoly_setNumVoices(&poly, numVoices);
 80196bc:	48be      	ldr	r0, [pc, #760]	; (80199b8 <SFXLivingStringSynthFrame+0x310>)
		numVoices = (numVoices > 1) ? 1 : NUM_STRINGS;
 80196be:	7822      	ldrb	r2, [r4, #0]
 80196c0:	2a01      	cmp	r2, #1
 80196c2:	bf98      	it	ls
 80196c4:	2306      	movls	r3, #6
		tSimplePoly_setNumVoices(&poly, numVoices);
 80196c6:	4619      	mov	r1, r3
		numVoices = (numVoices > 1) ? 1 : NUM_STRINGS;
 80196c8:	7023      	strb	r3, [r4, #0]
		tSimplePoly_setNumVoices(&poly, numVoices);
 80196ca:	f00b fcb9 	bl	8025040 <tSimplePoly_setNumVoices>
		setLED_A(numVoices == 1);
 80196ce:	7820      	ldrb	r0, [r4, #0]
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 80196d0:	2300      	movs	r3, #0
		setLED_A(numVoices == 1);
 80196d2:	f1a0 0001 	sub.w	r0, r0, #1
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 80196d6:	752b      	strb	r3, [r5, #20]
		setLED_A(numVoices == 1);
 80196d8:	fab0 f080 	clz	r0, r0
 80196dc:	0940      	lsrs	r0, r0, #5
 80196de:	f7fa faeb 	bl	8013cb8 <setLED_A>
	if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 80196e2:	7e2b      	ldrb	r3, [r5, #24]
 80196e4:	2b01      	cmp	r3, #1
 80196e6:	f000 814a 	beq.w	801997e <SFXLivingStringSynthFrame+0x2d6>
	if (buttonActionsSFX[ButtonC][ActionPress] == 1)
 80196ea:	7f2b      	ldrb	r3, [r5, #28]
 80196ec:	2b01      	cmp	r3, #1
 80196ee:	f000 812d 	beq.w	801994c <SFXLivingStringSynthFrame+0x2a4>
 80196f2:	f8df a318 	ldr.w	sl, [pc, #792]	; 8019a0c <SFXLivingStringSynthFrame+0x364>
	displayValues[0] = presetKnobValues[LivingStringSynth][0] * 10.0f; //pluck volume
 80196f6:	4db1      	ldr	r5, [pc, #708]	; (80199bc <SFXLivingStringSynthFrame+0x314>)
 80196f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
	displayValues[3] = faster_mtof((presetKnobValues[LivingStringSynth][3] * 119.0f)+20.0f); //lowpass
 80196fc:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8019700:	eddf 6aaf 	vldr	s13, [pc, #700]	; 80199c0 <SFXLivingStringSynthFrame+0x318>
	displayValues[0] = presetKnobValues[LivingStringSynth][0] * 10.0f; //pluck volume
 8019704:	462b      	mov	r3, r5
	displayValues[3] = faster_mtof((presetKnobValues[LivingStringSynth][3] * 119.0f)+20.0f); //lowpass
 8019706:	ed95 6a03 	vldr	s12, [r5, #12]
	displayValues[0] = presetKnobValues[LivingStringSynth][0] * 10.0f; //pluck volume
 801970a:	4cae      	ldr	r4, [pc, #696]	; (80199c4 <SFXLivingStringSynthFrame+0x31c>)
	displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 801970c:	2600      	movs	r6, #0
	displayValues[0] = presetKnobValues[LivingStringSynth][0] * 10.0f; //pluck volume
 801970e:	ecf3 7a01 	vldmia	r3!, {s15}
	displayValues[3] = faster_mtof((presetKnobValues[LivingStringSynth][3] * 119.0f)+20.0f); //lowpass
 8019712:	eea6 0a26 	vfma.f32	s0, s12, s13
		tComplexLivingString_setDecay(&theString[i], ((displayValues[2]  * 0.02f) + 0.98f));
 8019716:	eddf 8aac 	vldr	s17, [pc, #688]	; 80199c8 <SFXLivingStringSynthFrame+0x320>
	displayValues[0] = presetKnobValues[LivingStringSynth][0] * 10.0f; //pluck volume
 801971a:	ee67 7a87 	vmul.f32	s15, s15, s14
	displayValues[1] = presetKnobValues[LivingStringSynth][1]; //lowpass
 801971e:	681a      	ldr	r2, [r3, #0]
	displayValues[2] = presetKnobValues[LivingStringSynth][2]; //decay
 8019720:	68ab      	ldr	r3, [r5, #8]
	displayValues[1] = presetKnobValues[LivingStringSynth][1]; //lowpass
 8019722:	6062      	str	r2, [r4, #4]
	displayValues[2] = presetKnobValues[LivingStringSynth][2]; //decay
 8019724:	60a3      	str	r3, [r4, #8]
	displayValues[0] = presetKnobValues[LivingStringSynth][0] * 10.0f; //pluck volume
 8019726:	edc4 7a00 	vstr	s15, [r4]
	displayValues[3] = faster_mtof((presetKnobValues[LivingStringSynth][3] * 119.0f)+20.0f); //lowpass
 801972a:	f00a ff97 	bl	802465c <faster_mtof>
	displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 801972e:	eeb2 7a01 	vmov.f32	s14, #33	; 0x41080000  8.5
 8019732:	edd5 6a06 	vldr	s13, [r5, #24]
 8019736:	eef9 7a01 	vmov.f32	s15, #145	; 0xc0880000 -4.250
	displayValues[4] = (presetKnobValues[LivingStringSynth][4] * 0.44) + 0.52f;//pick Pos
 801973a:	ed95 4a04 	vldr	s8, [r5, #16]
	displayValues[5] = (presetKnobValues[LivingStringSynth][5] * 0.44) + 0.04f;//prep Pos
 801973e:	ed95 5a05 	vldr	s10, [r5, #20]
	displayValues[4] = (presetKnobValues[LivingStringSynth][4] * 0.44) + 0.52f;//pick Pos
 8019742:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
	displayValues[3] = faster_mtof((presetKnobValues[LivingStringSynth][3] * 119.0f)+20.0f); //lowpass
 8019746:	ed84 0a03 	vstr	s0, [r4, #12]
	displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 801974a:	eee6 7a87 	vfma.f32	s15, s13, s14
		tComplexLivingString_setDecay(&theString[i], ((displayValues[2]  * 0.02f) + 0.98f));
 801974e:	ed9f 8a9f 	vldr	s16, [pc, #636]	; 80199cc <SFXLivingStringSynthFrame+0x324>
	displayValues[5] = (presetKnobValues[LivingStringSynth][5] * 0.44) + 0.04f;//prep Pos
 8019752:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8019756:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 8019a10 <SFXLivingStringSynthFrame+0x368>
 801975a:	4f9d      	ldr	r7, [pc, #628]	; (80199d0 <SFXLivingStringSynthFrame+0x328>)
	displayValues[4] = (presetKnobValues[LivingStringSynth][4] * 0.44) + 0.52f;//pick Pos
 801975c:	ed9f 3b8e 	vldr	d3, [pc, #568]	; 8019998 <SFXLivingStringSynthFrame+0x2f0>
 8019760:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80199a0 <SFXLivingStringSynthFrame+0x2f8>
	displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 8019764:	eeb0 0a67 	vmov.f32	s0, s15
	displayValues[5] = (presetKnobValues[LivingStringSynth][5] * 0.44) + 0.04f;//prep Pos
 8019768:	ed9f 7b8f 	vldr	d7, [pc, #572]	; 80199a8 <SFXLivingStringSynthFrame+0x300>
	displayValues[4] = (presetKnobValues[LivingStringSynth][4] * 0.44) + 0.52f;//pick Pos
 801976c:	eea4 6b03 	vfma.f64	d6, d4, d3
	displayValues[5] = (presetKnobValues[LivingStringSynth][5] * 0.44) + 0.04f;//prep Pos
 8019770:	eea5 7b03 	vfma.f64	d7, d5, d3
	displayValues[4] = (presetKnobValues[LivingStringSynth][4] * 0.44) + 0.52f;//pick Pos
 8019774:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8019778:	ed84 6a04 	vstr	s12, [r4, #16]
	displayValues[5] = (presetKnobValues[LivingStringSynth][5] * 0.44) + 0.04f;//prep Pos
 801977c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8019780:	ed84 7a05 	vstr	s14, [r4, #20]
	displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 8019784:	f00a fe4c 	bl	8024420 <LEAF_tanh>
	displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 8019788:	4b92      	ldr	r3, [pc, #584]	; (80199d4 <SFXLivingStringSynthFrame+0x32c>)
	displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 801978a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 801978e:	edd5 7a09 	vldr	s15, [r5, #36]	; 0x24
	displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 8019792:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 8019796:	edd3 5a00 	vldr	s11, [r3]
	displayValues[8] = presetKnobValues[LivingStringSynth][8];//feedback level
 801979a:	6a2a      	ldr	r2, [r5, #32]
	displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 801979c:	ee30 0a07 	vadd.f32	s0, s0, s14
	displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 80197a0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80197a4:	4b8c      	ldr	r3, [pc, #560]	; (80199d8 <SFXLivingStringSynthFrame+0x330>)
	displayValues[8] = presetKnobValues[LivingStringSynth][8];//feedback level
 80197a6:	6222      	str	r2, [r4, #32]
	displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 80197a8:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80199dc <SFXLivingStringSynthFrame+0x334>
	displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 80197ac:	ee20 0a06 	vmul.f32	s0, s0, s12
	displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 80197b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	displayValues[7] = presetKnobValues[LivingStringSynth][7];//let Ring
 80197b4:	69e9      	ldr	r1, [r5, #28]
	displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 80197b6:	ed84 0a06 	vstr	s0, [r4, #24]
	displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 80197ba:	ee17 2a90 	vmov	r2, s15
	displayValues[7] = presetKnobValues[LivingStringSynth][7];//let Ring
 80197be:	61e1      	str	r1, [r4, #28]
	displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 80197c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80197c4:	edd3 7a00 	vldr	s15, [r3]
 80197c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80197cc:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
		tComplexLivingString_setDecay(&theString[i], ((displayValues[2]  * 0.02f) + 0.98f));
 80197d0:	eeb0 0a48 	vmov.f32	s0, s16
 80197d4:	edd4 7a02 	vldr	s15, [r4, #8]
 80197d8:	eb0a 0506 	add.w	r5, sl, r6
 80197dc:	eea7 0aa8 	vfma.f32	s0, s15, s17
 80197e0:	4628      	mov	r0, r5
 80197e2:	f00b ffe9 	bl	80257b8 <tComplexLivingString_setDecay>
		tComplexLivingString_setDampFreq(&theString[i], displayValues[3]);
 80197e6:	4628      	mov	r0, r5
 80197e8:	ed94 0a03 	vldr	s0, [r4, #12]
 80197ec:	f00b ffc4 	bl	8025778 <tComplexLivingString_setDampFreq>
		tComplexLivingString_setPickPos(&theString[i], displayValues[4]);
 80197f0:	4628      	mov	r0, r5
 80197f2:	ed94 0a04 	vldr	s0, [r4, #16]
 80197f6:	f00b ff8f 	bl	8025718 <tComplexLivingString_setPickPos>
		tComplexLivingString_setPrepPos(&theString[i], displayValues[5]);
 80197fa:	4628      	mov	r0, r5
 80197fc:	ed94 0a05 	vldr	s0, [r4, #20]
 8019800:	f00b ff9a 	bl	8025738 <tComplexLivingString_setPrepPos>
		tComplexLivingString_setPrepIndex(&theString[i], displayValues[6]);
 8019804:	4628      	mov	r0, r5
 8019806:	ed94 0a06 	vldr	s0, [r4, #24]
 801980a:	f00b ffa7 	bl	802575c <tComplexLivingString_setPrepIndex>
		tSlide_setDownSlide(&stringOutEnvs[i], displayValues[9] * samplesPerMs);
 801980e:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8019812:	edd7 7a00 	vldr	s15, [r7]
 8019816:	eb0b 0006 	add.w	r0, fp, r6
 801981a:	3604      	adds	r6, #4
 801981c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019820:	f009 f95e 	bl	8022ae0 <tSlide_setDownSlide>
	for (int i = 0; i < NUM_STRINGS; i++)
 8019824:	2e18      	cmp	r6, #24
 8019826:	d1d3      	bne.n	80197d0 <SFXLivingStringSynthFrame+0x128>
	tVZFilter_setFreq(&pluckFilt, faster_mtof((displayValues[1] * 100.0f)+20.0f));
 8019828:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801982c:	ed94 7a01 	vldr	s14, [r4, #4]
 8019830:	eddf 7a6b 	vldr	s15, [pc, #428]	; 80199e0 <SFXLivingStringSynthFrame+0x338>
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8019834:	2500      	movs	r5, #0
 8019836:	4b6b      	ldr	r3, [pc, #428]	; (80199e4 <SFXLivingStringSynthFrame+0x33c>)
	tVZFilter_setFreq(&pluckFilt, faster_mtof((displayValues[1] * 100.0f)+20.0f));
 8019838:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801983c:	462e      	mov	r6, r5
 801983e:	9301      	str	r3, [sp, #4]
	tVZFilter_setFreq(&pluckFilt, faster_mtof((displayValues[1] * 100.0f)+20.0f));
 8019840:	f00a ff0c 	bl	802465c <faster_mtof>
 8019844:	4868      	ldr	r0, [pc, #416]	; (80199e8 <SFXLivingStringSynthFrame+0x340>)
 8019846:	f009 fec9 	bl	80235dc <tVZFilter_setFreq>
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801984a:	f8df 816c 	ldr.w	r8, [pc, #364]	; 80199b8 <SFXLivingStringSynthFrame+0x310>
		float voiceOn = (tSimplePoly_getVelocity(&poly, i) > 0);
 801984e:	eddf 8a67 	vldr	s17, [pc, #412]	; 80199ec <SFXLivingStringSynthFrame+0x344>
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8019852:	e01a      	b.n	801988a <SFXLivingStringSynthFrame+0x1e2>
			tComplexLivingString_setTargetLev(&theString[i],voiceOn * displayValues[8]);
 8019854:	ed94 0a08 	vldr	s0, [r4, #32]
 8019858:	ee28 0a00 	vmul.f32	s0, s16, s0
 801985c:	f00b ffb0 	bl	80257c0 <tComplexLivingString_setTargetLev>
		if (voiceOn)
 8019860:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019864:	4f62      	ldr	r7, [pc, #392]	; (80199f0 <SFXLivingStringSynthFrame+0x348>)
 8019866:	eb0b 0305 	add.w	r3, fp, r5
			tSlide_setDest(&stringOutEnvs[i], 1.0f);
 801986a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801986e:	442f      	add	r7, r5
		if (voiceOn)
 8019870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			tSlide_setDest(&stringOutEnvs[i], 1.0f);
 8019874:	4618      	mov	r0, r3
		if (voiceOn)
 8019876:	d05a      	beq.n	801992e <SFXLivingStringSynthFrame+0x286>
			tSlide_setDest(&stringOutEnvs[i], 1.0f);
 8019878:	f009 f93a 	bl	8022af0 <tSlide_setDest>
			tSlide_setDest(&stringInEnvs[i], 1.0f);
 801987c:	4638      	mov	r0, r7
 801987e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019882:	f009 f935 	bl	8022af0 <tSlide_setDest>
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8019886:	3601      	adds	r6, #1
 8019888:	3504      	adds	r5, #4
 801988a:	4640      	mov	r0, r8
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801988c:	fa5f f986 	uxtb.w	r9, r6
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8019890:	f00b fbde 	bl	8025050 <tSimplePoly_getNumVoices>
 8019894:	42b0      	cmp	r0, r6
 8019896:	eb0a 0705 	add.w	r7, sl, r5
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801989a:	4649      	mov	r1, r9
 801989c:	4640      	mov	r0, r8
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801989e:	dd50      	ble.n	8019942 <SFXLivingStringSynthFrame+0x29a>
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 80198a0:	f00b fbf2 	bl	8025088 <tSimplePoly_getPitch>
 80198a4:	ee07 0a90 	vmov	s15, r0
 80198a8:	4a52      	ldr	r2, [pc, #328]	; (80199f4 <SFXLivingStringSynthFrame+0x34c>)
		float voiceOn = (tSimplePoly_getVelocity(&poly, i) > 0);
 80198aa:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 80198ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 80198b2:	4b51      	ldr	r3, [pc, #324]	; (80199f8 <SFXLivingStringSynthFrame+0x350>)
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 80198b4:	ed92 0a00 	vldr	s0, [r2]
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 80198b8:	781a      	ldrb	r2, [r3, #0]
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 80198ba:	ee37 7a00 	vadd.f32	s14, s14, s0
	float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 80198be:	494f      	ldr	r1, [pc, #316]	; (80199fc <SFXLivingStringSynthFrame+0x354>)
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 80198c0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80198c4:	ee17 3a90 	vmov	r3, s15
 80198c8:	1a9b      	subs	r3, r3, r2
 80198ca:	4a4d      	ldr	r2, [pc, #308]	; (8019a00 <SFXLivingStringSynthFrame+0x358>)
 80198cc:	fb82 2003 	smull	r2, r0, r2, r3
 80198d0:	17da      	asrs	r2, r3, #31
 80198d2:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 80198d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80198da:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80198de:	ee07 3a90 	vmov	s15, r3
 80198e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 80198e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80198ea:	ee17 3a90 	vmov	r3, s15
 80198ee:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80198f2:	ed91 0a00 	vldr	s0, [r1]
	freq[voice] = LEAF_midiToFrequency(tunedNote);
 80198f6:	ee37 0a00 	vadd.f32	s0, s14, s0
 80198fa:	f00a fe2b 	bl	8024554 <LEAF_midiToFrequency>
 80198fe:	9b01      	ldr	r3, [sp, #4]
		tComplexLivingString_setFreq(&theString[i], freq[i]);
 8019900:	4638      	mov	r0, r7
	freq[voice] = LEAF_midiToFrequency(tunedNote);
 8019902:	eca3 0a01 	vstmia	r3!, {s0}
 8019906:	9301      	str	r3, [sp, #4]
		tComplexLivingString_setFreq(&theString[i], freq[i]);
 8019908:	f00b feee 	bl	80256e8 <tComplexLivingString_setFreq>
		float voiceOn = (tSimplePoly_getVelocity(&poly, i) > 0);
 801990c:	4649      	mov	r1, r9
 801990e:	4640      	mov	r0, r8
 8019910:	f00b fbc6 	bl	80250a0 <tSimplePoly_getVelocity>
		if (levModeStr)
 8019914:	4b3b      	ldr	r3, [pc, #236]	; (8019a04 <SFXLivingStringSynthFrame+0x35c>)
		float voiceOn = (tSimplePoly_getVelocity(&poly, i) > 0);
 8019916:	2800      	cmp	r0, #0
			tComplexLivingString_setTargetLev(&theString[i],1.0f);
 8019918:	eeb0 0a48 	vmov.f32	s0, s16
		if (levModeStr)
 801991c:	681b      	ldr	r3, [r3, #0]
			tComplexLivingString_setTargetLev(&theString[i],1.0f);
 801991e:	4638      	mov	r0, r7
		float voiceOn = (tSimplePoly_getVelocity(&poly, i) > 0);
 8019920:	fe38 8a28 	vselgt.f32	s16, s16, s17
		if (levModeStr)
 8019924:	2b00      	cmp	r3, #0
 8019926:	d195      	bne.n	8019854 <SFXLivingStringSynthFrame+0x1ac>
			tComplexLivingString_setTargetLev(&theString[i],1.0f);
 8019928:	f00b ff4a 	bl	80257c0 <tComplexLivingString_setTargetLev>
 801992c:	e798      	b.n	8019860 <SFXLivingStringSynthFrame+0x1b8>
			tSlide_setDest(&stringOutEnvs[i], displayValues[7]);
 801992e:	ed94 0a07 	vldr	s0, [r4, #28]
 8019932:	f009 f8dd 	bl	8022af0 <tSlide_setDest>
			tSlide_setDest(&stringInEnvs[i], 0.0f);
 8019936:	eeb0 0a68 	vmov.f32	s0, s17
 801993a:	4638      	mov	r0, r7
 801993c:	f009 f8d8 	bl	8022af0 <tSlide_setDest>
 8019940:	e7a1      	b.n	8019886 <SFXLivingStringSynthFrame+0x1de>
}
 8019942:	b003      	add	sp, #12
 8019944:	ecbd 8b02 	vpop	{d8}
 8019948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		levModeStr = !levModeStr;
 801994c:	4e2d      	ldr	r6, [pc, #180]	; (8019a04 <SFXLivingStringSynthFrame+0x35c>)
 801994e:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8019a0c <SFXLivingStringSynthFrame+0x364>
 8019952:	6831      	ldr	r1, [r6, #0]
 8019954:	4654      	mov	r4, sl
 8019956:	f10a 0718 	add.w	r7, sl, #24
 801995a:	fab1 f181 	clz	r1, r1
 801995e:	0949      	lsrs	r1, r1, #5
 8019960:	6031      	str	r1, [r6, #0]
 8019962:	e000      	b.n	8019966 <SFXLivingStringSynthFrame+0x2be>
 8019964:	6831      	ldr	r1, [r6, #0]
			tComplexLivingString_setLevMode(&theString[i], levModeStr);
 8019966:	4620      	mov	r0, r4
 8019968:	3404      	adds	r4, #4
 801996a:	f00b ff3d 	bl	80257e8 <tComplexLivingString_setLevMode>
		for (int i = 0; i < NUM_STRINGS; i++)
 801996e:	42a7      	cmp	r7, r4
 8019970:	d1f8      	bne.n	8019964 <SFXLivingStringSynthFrame+0x2bc>
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8019972:	2300      	movs	r3, #0
		setLED_C(levModeStr);
 8019974:	7830      	ldrb	r0, [r6, #0]
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 8019976:	772b      	strb	r3, [r5, #28]
		setLED_C(levModeStr);
 8019978:	f7fa f9ba 	bl	8013cf0 <setLED_C>
 801997c:	e6bb      	b.n	80196f6 <SFXLivingStringSynthFrame+0x4e>
		voicePluck = !voicePluck;
 801997e:	4a22      	ldr	r2, [pc, #136]	; (8019a08 <SFXLivingStringSynthFrame+0x360>)
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 8019980:	2100      	movs	r1, #0
		voicePluck = !voicePluck;
 8019982:	6813      	ldr	r3, [r2, #0]
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 8019984:	7629      	strb	r1, [r5, #24]
		voicePluck = !voicePluck;
 8019986:	fab3 f383 	clz	r3, r3
 801998a:	095b      	lsrs	r3, r3, #5
		setLED_B(voicePluck);
 801998c:	4618      	mov	r0, r3
		voicePluck = !voicePluck;
 801998e:	6013      	str	r3, [r2, #0]
		setLED_B(voicePluck);
 8019990:	f7fa f9a0 	bl	8013cd4 <setLED_B>
 8019994:	e6a9      	b.n	80196ea <SFXLivingStringSynthFrame+0x42>
 8019996:	bf00      	nop
 8019998:	c28f5c29 	.word	0xc28f5c29
 801999c:	3fdc28f5 	.word	0x3fdc28f5
 80199a0:	00000000 	.word	0x00000000
 80199a4:	3fe0a3d7 	.word	0x3fe0a3d7
 80199a8:	40000000 	.word	0x40000000
 80199ac:	3fa47ae1 	.word	0x3fa47ae1
 80199b0:	20018714 	.word	0x20018714
 80199b4:	20000250 	.word	0x20000250
 80199b8:	20017554 	.word	0x20017554
 80199bc:	20016cec 	.word	0x20016cec
 80199c0:	42ee0000 	.word	0x42ee0000
 80199c4:	200187c4 	.word	0x200187c4
 80199c8:	3ca3d70a 	.word	0x3ca3d70a
 80199cc:	3f7ae148 	.word	0x3f7ae148
 80199d0:	200002ac 	.word	0x200002ac
 80199d4:	20000238 	.word	0x20000238
 80199d8:	2001707c 	.word	0x2001707c
 80199dc:	46000000 	.word	0x46000000
 80199e0:	42c80000 	.word	0x42c80000
 80199e4:	20016e3c 	.word	0x20016e3c
 80199e8:	2001839c 	.word	0x2001839c
 80199ec:	00000000 	.word	0x00000000
 80199f0:	200176f0 	.word	0x200176f0
 80199f4:	200005d8 	.word	0x200005d8
 80199f8:	20000654 	.word	0x20000654
 80199fc:	20000620 	.word	0x20000620
 8019a00:	2aaaaaab 	.word	0x2aaaaaab
 8019a04:	200005a4 	.word	0x200005a4
 8019a08:	20000618 	.word	0x20000618
 8019a0c:	20016070 	.word	0x20016070
 8019a10:	20017628 	.word	0x20017628

08019a14 <SFXLivingStringSynthTick>:
	float pluck = displayValues[0] * tNoise_tick(&stringPluckNoise);
 8019a14:	4b27      	ldr	r3, [pc, #156]	; (8019ab4 <SFXLivingStringSynthTick+0xa0>)
{
 8019a16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a1a:	ed2d 8b06 	vpush	{d8-d10}
	float pluck = displayValues[0] * tNoise_tick(&stringPluckNoise);
 8019a1e:	ed93 8a00 	vldr	s16, [r3]
{
 8019a22:	4606      	mov	r6, r0
	float pluck = displayValues[0] * tNoise_tick(&stringPluckNoise);
 8019a24:	4824      	ldr	r0, [pc, #144]	; (8019ab8 <SFXLivingStringSynthTick+0xa4>)
	pluck = tVZFilter_tick(&pluckFilt, pluck);
 8019a26:	2400      	movs	r4, #0
	float pluck = displayValues[0] * tNoise_tick(&stringPluckNoise);
 8019a28:	f00b fc94 	bl	8025354 <tNoise_tick>
	pluck = tVZFilter_tick(&pluckFilt, pluck);
 8019a2c:	4823      	ldr	r0, [pc, #140]	; (8019abc <SFXLivingStringSynthTick+0xa8>)
 8019a2e:	ee28 0a00 	vmul.f32	s0, s16, s0
	float sample = 0.0f;
 8019a32:	ed9f 9a23 	vldr	s18, [pc, #140]	; 8019ac0 <SFXLivingStringSynthTick+0xac>
	pluck = tVZFilter_tick(&pluckFilt, pluck);
 8019a36:	f009 fd61 	bl	80234fc <tVZFilter_tick>
 8019a3a:	eeb0 aa40 	vmov.f32	s20, s0
 8019a3e:	f8df a090 	ldr.w	sl, [pc, #144]	; 8019ad0 <SFXLivingStringSynthTick+0xbc>
 8019a42:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8019ad4 <SFXLivingStringSynthTick+0xc0>
 8019a46:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8019ad8 <SFXLivingStringSynthTick+0xc4>
 8019a4a:	4f1e      	ldr	r7, [pc, #120]	; (8019ac4 <SFXLivingStringSynthTick+0xb0>)
		inputSample = (input[1] * voicePluck) + (pluck * tADSR4_tick(&pluckEnvs[i]));
 8019a4c:	edda 7a00 	vldr	s15, [sl]
 8019a50:	eb09 0004 	add.w	r0, r9, r4
 8019a54:	edd6 9a01 	vldr	s19, [r6, #4]
 8019a58:	eb08 0504 	add.w	r5, r8, r4
 8019a5c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8019a60:	f008 fcc2 	bl	80223e8 <tADSR4_tick>
 8019a64:	ee20 8a0a 	vmul.f32	s16, s0, s20
		sample += tComplexLivingString_tick(&theString[i], (inputSample * tSlide_tickNoInput(&stringOutEnvs[i]))) * tSlide_tickNoInput(&stringOutEnvs[i]);
 8019a68:	4628      	mov	r0, r5
 8019a6a:	f009 f845 	bl	8022af8 <tSlide_tickNoInput>
 8019a6e:	1938      	adds	r0, r7, r4
 8019a70:	3404      	adds	r4, #4
		inputSample = (input[1] * voicePluck) + (pluck * tADSR4_tick(&pluckEnvs[i]));
 8019a72:	eea9 8aa8 	vfma.f32	s16, s19, s17
		sample += tComplexLivingString_tick(&theString[i], (inputSample * tSlide_tickNoInput(&stringOutEnvs[i]))) * tSlide_tickNoInput(&stringOutEnvs[i]);
 8019a76:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019a7a:	f00b fecb 	bl	8025814 <tComplexLivingString_tick>
 8019a7e:	4628      	mov	r0, r5
 8019a80:	eeb0 8a40 	vmov.f32	s16, s0
 8019a84:	f009 f838 	bl	8022af8 <tSlide_tickNoInput>
	for (int i = 0; i < NUM_STRINGS; i++)
 8019a88:	2c18      	cmp	r4, #24
		sample += tComplexLivingString_tick(&theString[i], (inputSample * tSlide_tickNoInput(&stringOutEnvs[i]))) * tSlide_tickNoInput(&stringOutEnvs[i]);
 8019a8a:	eea8 9a00 	vfma.f32	s18, s16, s0
	for (int i = 0; i < NUM_STRINGS; i++)
 8019a8e:	d1dd      	bne.n	8019a4c <SFXLivingStringSynthTick+0x38>
	sample *= 0.1625f;
 8019a90:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8019ac8 <SFXLivingStringSynthTick+0xb4>
	sample = LEAF_tanh(sample) * 0.98f;
 8019a94:	ee29 0a00 	vmul.f32	s0, s18, s0
 8019a98:	f00a fcc2 	bl	8024420 <LEAF_tanh>
 8019a9c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8019acc <SFXLivingStringSynthTick+0xb8>
 8019aa0:	ee20 0a27 	vmul.f32	s0, s0, s15
	input[0] = sample;
 8019aa4:	ed86 0a00 	vstr	s0, [r6]
	input[1] = sample;
 8019aa8:	ed86 0a01 	vstr	s0, [r6, #4]
}
 8019aac:	ecbd 8b06 	vpop	{d8-d10}
 8019ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ab4:	200187c4 	.word	0x200187c4
 8019ab8:	20016344 	.word	0x20016344
 8019abc:	2001839c 	.word	0x2001839c
 8019ac0:	00000000 	.word	0x00000000
 8019ac4:	20016070 	.word	0x20016070
 8019ac8:	3e266666 	.word	0x3e266666
 8019acc:	3f7ae148 	.word	0x3f7ae148
 8019ad0:	20000618 	.word	0x20000618
 8019ad4:	20017440 	.word	0x20017440
 8019ad8:	20017628 	.word	0x20017628

08019adc <SFXLivingStringSynthFree>:
{
 8019adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ae0:	2400      	movs	r4, #0
 8019ae2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8019b30 <SFXLivingStringSynthFree+0x54>
 8019ae6:	4f0d      	ldr	r7, [pc, #52]	; (8019b1c <SFXLivingStringSynthFree+0x40>)
 8019ae8:	4e0d      	ldr	r6, [pc, #52]	; (8019b20 <SFXLivingStringSynthFree+0x44>)
 8019aea:	4d0e      	ldr	r5, [pc, #56]	; (8019b24 <SFXLivingStringSynthFree+0x48>)
		tComplexLivingString_free(&theString[i]);
 8019aec:	eb08 0004 	add.w	r0, r8, r4
 8019af0:	f00b fdae 	bl	8025650 <tComplexLivingString_free>
		tSlide_free(&stringInEnvs[i]);
 8019af4:	1938      	adds	r0, r7, r4
 8019af6:	f008 ffef 	bl	8022ad8 <tSlide_free>
		tSlide_free(&stringOutEnvs[i]);
 8019afa:	1930      	adds	r0, r6, r4
 8019afc:	f008 ffec 	bl	8022ad8 <tSlide_free>
		tADSR4_free(&pluckEnvs[i]);
 8019b00:	1928      	adds	r0, r5, r4
 8019b02:	3404      	adds	r4, #4
 8019b04:	f008 fc0e 	bl	8022324 <tADSR4_free>
	for (int i = 0; i < NUM_STRINGS; i++)
 8019b08:	2c18      	cmp	r4, #24
 8019b0a:	d1ef      	bne.n	8019aec <SFXLivingStringSynthFree+0x10>
	tVZFilter_free(&pluckFilt);
 8019b0c:	4806      	ldr	r0, [pc, #24]	; (8019b28 <SFXLivingStringSynthFree+0x4c>)
 8019b0e:	f009 fce7 	bl	80234e0 <tVZFilter_free>
	tNoise_free(&stringPluckNoise);
 8019b12:	4806      	ldr	r0, [pc, #24]	; (8019b2c <SFXLivingStringSynthFree+0x50>)
}
 8019b14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	tNoise_free(&stringPluckNoise);
 8019b18:	f00b bc18 	b.w	802534c <tNoise_free>
 8019b1c:	200176f0 	.word	0x200176f0
 8019b20:	20017628 	.word	0x20017628
 8019b24:	20017440 	.word	0x20017440
 8019b28:	2001839c 	.word	0x2001839c
 8019b2c:	20016344 	.word	0x20016344
 8019b30:	20016070 	.word	0x20016070

08019b34 <SFXClassicSynthAlloc>:
	tSimplePoly_setNumVoices(&poly, numVoices);
 8019b34:	4aa5      	ldr	r2, [pc, #660]	; (8019dcc <SFXClassicSynthAlloc+0x298>)
 8019b36:	48a6      	ldr	r0, [pc, #664]	; (8019dd0 <SFXClassicSynthAlloc+0x29c>)
{
 8019b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	leaf.clearOnAllocation = 1;
 8019b3c:	2301      	movs	r3, #1
 8019b3e:	f8df a2fc 	ldr.w	sl, [pc, #764]	; 8019e3c <SFXClassicSynthAlloc+0x308>
	displayValues[16] = knobs[16];  // fade between sawtooth and glottal pulse
 8019b42:	f04f 0800 	mov.w	r8, #0
	leaf.clearOnAllocation = 1;
 8019b46:	f8ca 3014 	str.w	r3, [sl, #20]
	displayValues[16] = knobs[16];  // fade between sawtooth and glottal pulse
 8019b4a:	4644      	mov	r4, r8
{
 8019b4c:	ed2d 8b08 	vpush	{d8-d11}
	tSimplePoly_setNumVoices(&poly, numVoices);
 8019b50:	7811      	ldrb	r1, [r2, #0]
 8019b52:	f00b fa75 	bl	8025040 <tSimplePoly_setNumVoices>
	displayValues[0] = knobs[0]; //synth volume
 8019b56:	4b9f      	ldr	r3, [pc, #636]	; (8019dd4 <SFXClassicSynthAlloc+0x2a0>)
	displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019b58:	4a9f      	ldr	r2, [pc, #636]	; (8019dd8 <SFXClassicSynthAlloc+0x2a4>)
	displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 8019b5a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
	displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019b5e:	ed93 5a05 	vldr	s10, [r3, #20]
	displayValues[0] = knobs[0]; //synth volume
 8019b62:	461f      	mov	r7, r3
	displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019b64:	edd2 7a00 	vldr	s15, [r2]
	displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019b68:	edd3 5a06 	vldr	s11, [r3, #24]
	displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019b6c:	ed93 6a08 	vldr	s12, [r3, #32]
	displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019b70:	ee27 5a85 	vmul.f32	s10, s15, s10
	displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019b74:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
	displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019b78:	ee67 5aa5 	vmul.f32	s11, s15, s11
	displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019b7c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
	displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019b80:	ee27 6a86 	vmul.f32	s12, s15, s12
	displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019b84:	ee67 6aa6 	vmul.f32	s13, s15, s13
	displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 8019b88:	eddf 8a94 	vldr	s17, [pc, #592]	; 8019ddc <SFXClassicSynthAlloc+0x2a8>
	displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019b8c:	ee27 7a87 	vmul.f32	s14, s15, s14
	displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019b90:	4a93      	ldr	r2, [pc, #588]	; (8019de0 <SFXClassicSynthAlloc+0x2ac>)
 8019b92:	eebd 5ac5 	vcvt.s32.f32	s10, s10
	displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 8019b96:	ed93 4a04 	vldr	s8, [r3, #16]
	displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019b9a:	eefd 5ae5 	vcvt.s32.f32	s11, s11
	displayValues[0] = knobs[0]; //synth volume
 8019b9e:	f857 eb04 	ldr.w	lr, [r7], #4
	displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019ba2:	eebd 6ac6 	vcvt.s32.f32	s12, s12
			synthDetune[i][j] = ((leaf.random() * 0.0264f) - 0.0132f);
 8019ba6:	ed9f aa8f 	vldr	s20, [pc, #572]	; 8019de4 <SFXClassicSynthAlloc+0x2b0>
	displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019baa:	eefd 6ae6 	vcvt.s32.f32	s13, s13
	displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019bae:	ee15 ca10 	vmov	ip, s10
	displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019bb2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019bb6:	ee15 6a90 	vmov	r6, s11
	displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 8019bba:	eef0 3a68 	vmov.f32	s7, s17
	displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019bbe:	ee16 5a10 	vmov	r5, s12
	displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019bc2:	ee16 0a90 	vmov	r0, s13
	displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019bc6:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
	displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019bca:	ee17 1a10 	vmov	r1, s14
	displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019bce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
	displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019bd2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
	displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 8019bd6:	eee4 3a24 	vfma.f32	s7, s8, s9
	displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019bda:	eb02 0080 	add.w	r0, r2, r0, lsl #2
	displayValues[1] = knobs[1] * 4096.0f; //lowpass cutoff
 8019bde:	edd7 4a00 	vldr	s9, [r7]
	displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019be2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	displayValues[1] = knobs[1] * 4096.0f; //lowpass cutoff
 8019be6:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8019de8 <SFXClassicSynthAlloc+0x2b4>
	displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019bea:	ed9f 6a80 	vldr	s12, [pc, #512]	; 8019dec <SFXClassicSynthAlloc+0x2b8>
	displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019bee:	edd5 5a00 	vldr	s11, [r5]
	displayValues[1] = knobs[1] * 4096.0f; //lowpass cutoff
 8019bf2:	ee64 4a87 	vmul.f32	s9, s9, s14
	displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019bf6:	ed9c 4a00 	vldr	s8, [ip]
	displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019bfa:	ed96 5a00 	vldr	s10, [r6]
	displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019bfe:	ee65 5a86 	vmul.f32	s11, s11, s12
	displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019c02:	edd0 6a00 	vldr	s13, [r0]
	displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019c06:	ee24 4a06 	vmul.f32	s8, s8, s12
	displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019c0a:	ed91 7a00 	vldr	s14, [r1]
	displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019c0e:	ee25 5a06 	vmul.f32	s10, s10, s12
	displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019c12:	ee66 6a86 	vmul.f32	s13, s13, s12
	displayValues[0] = knobs[0]; //synth volume
 8019c16:	4d76      	ldr	r5, [pc, #472]	; (8019df0 <SFXClassicSynthAlloc+0x2bc>)
	displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019c18:	ee27 7a06 	vmul.f32	s14, s14, s12
	displayValues[7] = knobs[7]; //sus
 8019c1c:	69de      	ldr	r6, [r3, #28]
	displayValues[12] = knobs[12]; //sus
 8019c1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
	displayValues[2] = knobs[2]; //keyfollow filter cutoff
 8019c20:	f8d3 c008 	ldr.w	ip, [r3, #8]
	displayValues[3] = knobs[3]; //detune
 8019c24:	68df      	ldr	r7, [r3, #12]
	displayValues[9] = knobs[9]; //leak
 8019c26:	6a58      	ldr	r0, [r3, #36]	; 0x24
	displayValues[7] = knobs[7]; //sus
 8019c28:	61ee      	str	r6, [r5, #28]
	displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019c2a:	edc5 6a0a 	vstr	s13, [r5, #40]	; 0x28
	displayValues[12] = knobs[12]; //sus
 8019c2e:	6329      	str	r1, [r5, #48]	; 0x30
	displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019c30:	ed85 4a05 	vstr	s8, [r5, #20]
	displayValues[0] = knobs[0]; //synth volume
 8019c34:	f8c5 e000 	str.w	lr, [r5]
	displayValues[1] = knobs[1] * 4096.0f; //lowpass cutoff
 8019c38:	edc5 4a01 	vstr	s9, [r5, #4]
	displayValues[2] = knobs[2]; //keyfollow filter cutoff
 8019c3c:	f8c5 c008 	str.w	ip, [r5, #8]
	displayValues[3] = knobs[3]; //detune
 8019c40:	60ef      	str	r7, [r5, #12]
	displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 8019c42:	edc5 3a04 	vstr	s7, [r5, #16]
	displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019c46:	ed85 5a06 	vstr	s10, [r5, #24]
	displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019c4a:	edc5 5a08 	vstr	s11, [r5, #32]
	displayValues[9] = knobs[9]; //leak
 8019c4e:	6268      	str	r0, [r5, #36]	; 0x24
	displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019c50:	ed85 7a0b 	vstr	s14, [r5, #44]	; 0x2c
	displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019c54:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
	displayValues[14] = knobs[14]; //leak
 8019c58:	6b99      	ldr	r1, [r3, #56]	; 0x38
	displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019c5a:	ee67 7a87 	vmul.f32	s15, s15, s14
	displayValues[15] = knobs[15] * 4095.0f;  // filter envelope amount
 8019c5e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
	displayValues[16] = knobs[16];  // fade between sawtooth and glottal pulse
 8019c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	displayValues[15] = knobs[15] * 4095.0f;  // filter envelope amount
 8019c64:	eddf 6a63 	vldr	s13, [pc, #396]	; 8019df4 <SFXClassicSynthAlloc+0x2c0>
	displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	displayValues[16] = knobs[16];  // fade between sawtooth and glottal pulse
 8019c6c:	642b      	str	r3, [r5, #64]	; 0x40
	displayValues[15] = knobs[15] * 4095.0f;  // filter envelope amount
 8019c6e:	ee27 7a26 	vmul.f32	s14, s14, s13
			tSawtooth_initToPool(&osc[(i * NUM_OSC_PER_VOICE) + j], &smallPool);
 8019c72:	4e61      	ldr	r6, [pc, #388]	; (8019df8 <SFXClassicSynthAlloc+0x2c4>)
			synthDetune[i][j] = ((leaf.random() * 0.0264f) - 0.0132f);
 8019c74:	eddf 9a61 	vldr	s19, [pc, #388]	; 8019dfc <SFXClassicSynthAlloc+0x2c8>
	displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019c78:	ee17 3a90 	vmov	r3, s15
			tRosenbergGlottalPulse_setOpenLength(&glottal[(i * NUM_OSC_PER_VOICE) + j], 0.3f);
 8019c7c:	ed9f 9a60 	vldr	s18, [pc, #384]	; 8019e00 <SFXClassicSynthAlloc+0x2cc>
	displayValues[14] = knobs[14]; //leak
 8019c80:	63a9      	str	r1, [r5, #56]	; 0x38
	displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019c82:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	displayValues[15] = knobs[15] * 4095.0f;  // filter envelope amount
 8019c86:	ed85 7a0f 	vstr	s14, [r5, #60]	; 0x3c
	displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019c8a:	edd2 7a00 	vldr	s15, [r2]
 8019c8e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8019c92:	ed85 6a0d 	vstr	s12, [r5, #52]	; 0x34
 8019c96:	4b5b      	ldr	r3, [pc, #364]	; (8019e04 <SFXClassicSynthAlloc+0x2d0>)
 8019c98:	f104 0b0c 	add.w	fp, r4, #12
 8019c9c:	eb03 0904 	add.w	r9, r3, r4
			tSawtooth_initToPool(&osc[(i * NUM_OSC_PER_VOICE) + j], &smallPool);
 8019ca0:	4b59      	ldr	r3, [pc, #356]	; (8019e08 <SFXClassicSynthAlloc+0x2d4>)
 8019ca2:	4631      	mov	r1, r6
 8019ca4:	1918      	adds	r0, r3, r4
 8019ca6:	f00b fa89 	bl	80251bc <tSawtooth_initToPool>
			synthDetune[i][j] = ((leaf.random() * 0.0264f) - 0.0132f);
 8019caa:	f8da 3010 	ldr.w	r3, [sl, #16]
 8019cae:	4798      	blx	r3
 8019cb0:	eef0 7a69 	vmov.f32	s15, s19
 8019cb4:	4b55      	ldr	r3, [pc, #340]	; (8019e0c <SFXClassicSynthAlloc+0x2d8>)
			tRosenbergGlottalPulse_initToPool(&glottal[(i * NUM_OSC_PER_VOICE) + j], &smallPool);
 8019cb6:	4631      	mov	r1, r6
			synthDetune[i][j] = ((leaf.random() * 0.0264f) - 0.0132f);
 8019cb8:	eee0 7a0a 	vfma.f32	s15, s0, s20
 8019cbc:	191f      	adds	r7, r3, r4
 8019cbe:	3404      	adds	r4, #4
			tRosenbergGlottalPulse_initToPool(&glottal[(i * NUM_OSC_PER_VOICE) + j], &smallPool);
 8019cc0:	4638      	mov	r0, r7
			synthDetune[i][j] = ((leaf.random() * 0.0264f) - 0.0132f);
 8019cc2:	ece9 7a01 	vstmia	r9!, {s15}
			tRosenbergGlottalPulse_initToPool(&glottal[(i * NUM_OSC_PER_VOICE) + j], &smallPool);
 8019cc6:	f007 f911 	bl	8020eec <tRosenbergGlottalPulse_initToPool>
			tRosenbergGlottalPulse_setOpenLength(&glottal[(i * NUM_OSC_PER_VOICE) + j], 0.3f);
 8019cca:	eeb0 0a49 	vmov.f32	s0, s18
 8019cce:	4638      	mov	r0, r7
 8019cd0:	f007 fa0a 	bl	80210e8 <tRosenbergGlottalPulse_setOpenLength>
			tRosenbergGlottalPulse_setPulseLength(&glottal[(i * NUM_OSC_PER_VOICE) + j], 0.4f);
 8019cd4:	eeb0 0a68 	vmov.f32	s0, s17
 8019cd8:	4638      	mov	r0, r7
 8019cda:	f007 fa13 	bl	8021104 <tRosenbergGlottalPulse_setPulseLength>
		for (int j = 0; j < NUM_OSC_PER_VOICE; j++)
 8019cde:	455c      	cmp	r4, fp
 8019ce0:	d1de      	bne.n	8019ca0 <SFXClassicSynthAlloc+0x16c>
 8019ce2:	4b4b      	ldr	r3, [pc, #300]	; (8019e10 <SFXClassicSynthAlloc+0x2dc>)
		tEfficientSVF_initToPool(&synthLP[i], SVFTypeLowpass, 6000.0f, displayValues[4], &smallPool);
 8019ce4:	f241 7270 	movw	r2, #6000	; 0x1770
 8019ce8:	484a      	ldr	r0, [pc, #296]	; (8019e14 <SFXClassicSynthAlloc+0x2e0>)
 8019cea:	2101      	movs	r1, #1
 8019cec:	eb03 0908 	add.w	r9, r3, r8
 8019cf0:	ed95 0a04 	vldr	s0, [r5, #16]
 8019cf4:	4440      	add	r0, r8
 8019cf6:	4633      	mov	r3, r6
 8019cf8:	f009 f8ce 	bl	8022e98 <tEfficientSVF_initToPool>
		tADSR4_setLeakFactor(&polyEnvs[i],((1.0f - displayValues[9]) * 0.00005f) + 0.99995f);
 8019cfc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		tADSR4_initToPool(&polyEnvs[i], displayValues[5], displayValues[6], displayValues[7], displayValues[8], decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &smallPool);
 8019d00:	4633      	mov	r3, r6
 8019d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019d06:	4944      	ldr	r1, [pc, #272]	; (8019e18 <SFXClassicSynthAlloc+0x2e4>)
 8019d08:	4648      	mov	r0, r9
 8019d0a:	edd5 1a08 	vldr	s3, [r5, #32]
 8019d0e:	ed95 1a07 	vldr	s2, [r5, #28]
 8019d12:	edd5 0a06 	vldr	s1, [r5, #24]
 8019d16:	ed95 0a05 	vldr	s0, [r5, #20]
 8019d1a:	f008 faa9 	bl	8022270 <tADSR4_initToPool>
		tADSR4_setLeakFactor(&polyEnvs[i],((1.0f - displayValues[9]) * 0.00005f) + 0.99995f);
 8019d1e:	eddf aa3f 	vldr	s21, [pc, #252]	; 8019e1c <SFXClassicSynthAlloc+0x2e8>
 8019d22:	edd5 7a09 	vldr	s15, [r5, #36]	; 0x24
 8019d26:	4648      	mov	r0, r9
 8019d28:	4f3d      	ldr	r7, [pc, #244]	; (8019e20 <SFXClassicSynthAlloc+0x2ec>)
 8019d2a:	eeb0 0a6a 	vmov.f32	s0, s21
 8019d2e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8019d32:	ed9f ba3c 	vldr	s22, [pc, #240]	; 8019e24 <SFXClassicSynthAlloc+0x2f0>
 8019d36:	4447      	add	r7, r8
 8019d38:	f108 0804 	add.w	r8, r8, #4
 8019d3c:	eea7 0a8b 	vfma.f32	s0, s15, s22
 8019d40:	f008 fb34 	bl	80223ac <tADSR4_setLeakFactor>
		tADSR4_initToPool(&polyFiltEnvs[i], displayValues[10], displayValues[11], displayValues[12], displayValues[13], decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &smallPool);
 8019d44:	4638      	mov	r0, r7
 8019d46:	4633      	mov	r3, r6
 8019d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019d4c:	4932      	ldr	r1, [pc, #200]	; (8019e18 <SFXClassicSynthAlloc+0x2e4>)
 8019d4e:	edd5 1a0d 	vldr	s3, [r5, #52]	; 0x34
 8019d52:	ed95 1a0c 	vldr	s2, [r5, #48]	; 0x30
 8019d56:	edd5 0a0b 	vldr	s1, [r5, #44]	; 0x2c
 8019d5a:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
 8019d5e:	f008 fa87 	bl	8022270 <tADSR4_initToPool>
		tADSR4_setLeakFactor(&polyFiltEnvs[i], ((1.0f - displayValues[14]) * 0.00005f) + 0.99995f);
 8019d62:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 8019d66:	eeb0 0a6a 	vmov.f32	s0, s21
 8019d6a:	4638      	mov	r0, r7
 8019d6c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019d70:	eea8 0a0b 	vfma.f32	s0, s16, s22
 8019d74:	f008 fb1a 	bl	80223ac <tADSR4_setLeakFactor>
	for (int i = 0; i < NUM_VOC_VOICES; i++)
 8019d78:	f1b8 0f20 	cmp.w	r8, #32
 8019d7c:	d18b      	bne.n	8019c96 <SFXClassicSynthAlloc+0x162>
	tCycle_initToPool(&pwmLFO1, &smallPool);
 8019d7e:	491e      	ldr	r1, [pc, #120]	; (8019df8 <SFXClassicSynthAlloc+0x2c4>)
 8019d80:	4829      	ldr	r0, [pc, #164]	; (8019e28 <SFXClassicSynthAlloc+0x2f4>)
 8019d82:	f00b f99d 	bl	80250c0 <tCycle_initToPool>
	tCycle_initToPool(&pwmLFO2, &smallPool);
 8019d86:	491c      	ldr	r1, [pc, #112]	; (8019df8 <SFXClassicSynthAlloc+0x2c4>)
 8019d88:	4828      	ldr	r0, [pc, #160]	; (8019e2c <SFXClassicSynthAlloc+0x2f8>)
 8019d8a:	f00b f999 	bl	80250c0 <tCycle_initToPool>
	tCycle_setFreq(&pwmLFO1, 63.0f);
 8019d8e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8019e30 <SFXClassicSynthAlloc+0x2fc>
 8019d92:	4825      	ldr	r0, [pc, #148]	; (8019e28 <SFXClassicSynthAlloc+0x2f4>)
 8019d94:	f00b f9a6 	bl	80250e4 <tCycle_setFreq>
	tCycle_setFreq(&pwmLFO2, 72.11f);
 8019d98:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8019e34 <SFXClassicSynthAlloc+0x300>
 8019d9c:	4823      	ldr	r0, [pc, #140]	; (8019e2c <SFXClassicSynthAlloc+0x2f8>)
 8019d9e:	f00b f9a1 	bl	80250e4 <tCycle_setFreq>
	setLED_A(numVoices == 1);
 8019da2:	4b0a      	ldr	r3, [pc, #40]	; (8019dcc <SFXClassicSynthAlloc+0x298>)
 8019da4:	7818      	ldrb	r0, [r3, #0]
 8019da6:	f1a0 0001 	sub.w	r0, r0, #1
 8019daa:	fab0 f080 	clz	r0, r0
 8019dae:	0940      	lsrs	r0, r0, #5
 8019db0:	f7f9 ff82 	bl	8013cb8 <setLED_A>
	cycleCountVals[0][2] = 2;
 8019db4:	4b20      	ldr	r3, [pc, #128]	; (8019e38 <SFXClassicSynthAlloc+0x304>)
 8019db6:	2002      	movs	r0, #2
 8019db8:	2100      	movs	r1, #0
	leaf.clearOnAllocation = 0;
 8019dba:	2200      	movs	r2, #0
	cycleCountVals[0][2] = 2;
 8019dbc:	e9c3 0104 	strd	r0, r1, [r3, #16]
}
 8019dc0:	ecbd 8b08 	vpop	{d8-d11}
	leaf.clearOnAllocation = 0;
 8019dc4:	f8ca 2014 	str.w	r2, [sl, #20]
}
 8019dc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dcc:	20000250 	.word	0x20000250
 8019dd0:	20017554 	.word	0x20017554
 8019dd4:	20016d50 	.word	0x20016d50
 8019dd8:	20000238 	.word	0x20000238
 8019ddc:	3ecccccd 	.word	0x3ecccccd
 8019de0:	2001707c 	.word	0x2001707c
 8019de4:	3cd844d0 	.word	0x3cd844d0
 8019de8:	45800000 	.word	0x45800000
 8019dec:	46000000 	.word	0x46000000
 8019df0:	200187c4 	.word	0x200187c4
 8019df4:	457ff000 	.word	0x457ff000
 8019df8:	20014b2c 	.word	0x20014b2c
 8019dfc:	bc5844d0 	.word	0xbc5844d0
 8019e00:	3e99999a 	.word	0x3e99999a
 8019e04:	20018334 	.word	0x20018334
 8019e08:	20017314 	.word	0x20017314
 8019e0c:	20016248 	.word	0x20016248
 8019e10:	200176d0 	.word	0x200176d0
 8019e14:	20016e18 	.word	0x20016e18
 8019e18:	20017970 	.word	0x20017970
 8019e1c:	3f7ffcb9 	.word	0x3f7ffcb9
 8019e20:	20015948 	.word	0x20015948
 8019e24:	3851b717 	.word	0x3851b717
 8019e28:	200176c0 	.word	0x200176c0
 8019e2c:	200177a4 	.word	0x200177a4
 8019e30:	427c0000 	.word	0x427c0000
 8019e34:	42903852 	.word	0x42903852
 8019e38:	20015590 	.word	0x20015590
 8019e3c:	200194a0 	.word	0x200194a0

08019e40 <SFXClassicSynthFrame>:
{
 8019e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8019e44:	4cbf      	ldr	r4, [pc, #764]	; (801a144 <SFXClassicSynthFrame+0x304>)
{
 8019e46:	ed2d 8b08 	vpush	{d8-d11}
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8019e4a:	7d23      	ldrb	r3, [r4, #20]
{
 8019e4c:	b085      	sub	sp, #20
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8019e4e:	2b01      	cmp	r3, #1
 8019e50:	f000 80f5 	beq.w	801a03e <SFXClassicSynthFrame+0x1fe>
 8019e54:	4bbc      	ldr	r3, [pc, #752]	; (801a148 <SFXClassicSynthFrame+0x308>)
 8019e56:	9302      	str	r3, [sp, #8]
	if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 8019e58:	7e23      	ldrb	r3, [r4, #24]
 8019e5a:	2b01      	cmp	r3, #1
 8019e5c:	f000 8108 	beq.w	801a070 <SFXClassicSynthFrame+0x230>
	if (writeKnobFlag != -1)
 8019e60:	4bba      	ldr	r3, [pc, #744]	; (801a14c <SFXClassicSynthFrame+0x30c>)
 8019e62:	f993 2000 	ldrsb.w	r2, [r3]
 8019e66:	1c53      	adds	r3, r2, #1
 8019e68:	d01d      	beq.n	8019ea6 <SFXClassicSynthFrame+0x66>
		switch(writeKnobFlag + (knobPage * KNOB_PAGE_SIZE))
 8019e6a:	49b9      	ldr	r1, [pc, #740]	; (801a150 <SFXClassicSynthFrame+0x310>)
 8019e6c:	2305      	movs	r3, #5
 8019e6e:	7809      	ldrb	r1, [r1, #0]
 8019e70:	fb13 2301 	smlabb	r3, r3, r1, r2
 8019e74:	2b10      	cmp	r3, #16
 8019e76:	d816      	bhi.n	8019ea6 <SFXClassicSynthFrame+0x66>
 8019e78:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019e7c:	02fd0011 	.word	0x02fd0011
 8019e80:	02f302f8 	.word	0x02f302f8
 8019e84:	02a902d4 	.word	0x02a902d4
 8019e88:	0265027e 	.word	0x0265027e
 8019e8c:	0215023a 	.word	0x0215023a
 8019e90:	01bf01ea 	.word	0x01bf01ea
 8019e94:	013901a6 	.word	0x013901a6
 8019e98:	01090114 	.word	0x01090114
 8019e9c:	0104      	.short	0x0104
				displayValues[0] = knobs[0]; //synth volume
 8019e9e:	4bad      	ldr	r3, [pc, #692]	; (801a154 <SFXClassicSynthFrame+0x314>)
 8019ea0:	4ead      	ldr	r6, [pc, #692]	; (801a158 <SFXClassicSynthFrame+0x318>)
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	6033      	str	r3, [r6, #0]
	float tempLFO1 = (tCycle_tick(&pwmLFO1) * 0.25f) + 0.5f; // pulse length
 8019ea6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8019eaa:	48ac      	ldr	r0, [pc, #688]	; (801a15c <SFXClassicSynthFrame+0x31c>)
 8019eac:	eeb5 8a00 	vmov.f32	s16, #80	; 0x3e800000  0.250
 8019eb0:	f00b f926 	bl	8025100 <tCycle_tick>
	float tempLFO2 = ((tCycle_tick(&pwmLFO2) * 0.25f) + 0.5f) * tempLFO1; // open length
 8019eb4:	48aa      	ldr	r0, [pc, #680]	; (801a160 <SFXClassicSynthFrame+0x320>)
	float tempLFO1 = (tCycle_tick(&pwmLFO1) * 0.25f) + 0.5f; // pulse length
 8019eb6:	eef0 9a68 	vmov.f32	s19, s17
 8019eba:	eee0 9a08 	vfma.f32	s19, s0, s16
	float tempLFO2 = ((tCycle_tick(&pwmLFO2) * 0.25f) + 0.5f) * tempLFO1; // open length
 8019ebe:	f00b f91f 	bl	8025100 <tCycle_tick>
 8019ec2:	eee0 8a08 	vfma.f32	s17, s0, s16
	for (int i = 0; i < numVoices; i++)
 8019ec6:	9b02      	ldr	r3, [sp, #8]
 8019ec8:	781b      	ldrb	r3, [r3, #0]
	float tempLFO2 = ((tCycle_tick(&pwmLFO2) * 0.25f) + 0.5f) * tempLFO1; // open length
 8019eca:	ee68 8aa9 	vmul.f32	s17, s17, s19
	for (int i = 0; i < numVoices; i++)
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	f000 80a3 	beq.w	801a01a <SFXClassicSynthFrame+0x1da>
 8019ed4:	f04f 0a00 	mov.w	sl, #0
 8019ed8:	4ba2      	ldr	r3, [pc, #648]	; (801a164 <SFXClassicSynthFrame+0x324>)
 8019eda:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 801a1c4 <SFXClassicSynthFrame+0x384>
 8019ede:	4657      	mov	r7, sl
 8019ee0:	4e9d      	ldr	r6, [pc, #628]	; (801a158 <SFXClassicSynthFrame+0x318>)
		float myMidiNote = tSimplePoly_getPitch(&poly, i);
 8019ee2:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 801a194 <SFXClassicSynthFrame+0x354>
		float tempFreq2 = displayValues[1] +  keyFollowFilt;
 8019ee6:	eddf baa0 	vldr	s23, [pc, #640]	; 801a168 <SFXClassicSynthFrame+0x328>
		tempFreq2 = LEAF_clip(0.0f, tempFreq2, 4095.0f);
 8019eea:	ed9f baa0 	vldr	s22, [pc, #640]	; 801a16c <SFXClassicSynthFrame+0x32c>
 8019eee:	eddf aaa0 	vldr	s21, [pc, #640]	; 801a170 <SFXClassicSynthFrame+0x330>
 8019ef2:	9301      	str	r3, [sp, #4]
		float myMidiNote = tSimplePoly_getPitch(&poly, i);
 8019ef4:	b2fb      	uxtb	r3, r7
 8019ef6:	4a9f      	ldr	r2, [pc, #636]	; (801a174 <SFXClassicSynthFrame+0x334>)
 8019ef8:	4658      	mov	r0, fp
			float tempFreq = freq[i] * (1.0f + (synthDetune[i][j] * displayValues[3]));
 8019efa:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
		float myMidiNote = tSimplePoly_getPitch(&poly, i);
 8019efe:	461c      	mov	r4, r3
 8019f00:	4619      	mov	r1, r3
 8019f02:	9303      	str	r3, [sp, #12]
 8019f04:	eb02 050a 	add.w	r5, r2, sl
 8019f08:	f00b f8be 	bl	8025088 <tSimplePoly_getPitch>
 8019f0c:	ee07 0a90 	vmov	s15, r0
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8019f10:	4621      	mov	r1, r4
 8019f12:	4658      	mov	r0, fp
		float myMidiNote = tSimplePoly_getPitch(&poly, i);
 8019f14:	eeb8 aae7 	vcvt.f32.s32	s20, s15
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8019f18:	f00b f8b6 	bl	8025088 <tSimplePoly_getPitch>
 8019f1c:	ee07 0a90 	vmov	s15, r0
 8019f20:	4b95      	ldr	r3, [pc, #596]	; (801a178 <SFXClassicSynthFrame+0x338>)
 8019f22:	f10a 090c 	add.w	r9, sl, #12
 8019f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019f2a:	ed93 0a00 	vldr	s0, [r3]
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8019f2e:	4b93      	ldr	r3, [pc, #588]	; (801a17c <SFXClassicSynthFrame+0x33c>)
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8019f30:	ee37 7a00 	vadd.f32	s14, s14, s0
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8019f34:	7818      	ldrb	r0, [r3, #0]
 8019f36:	4b92      	ldr	r3, [pc, #584]	; (801a180 <SFXClassicSynthFrame+0x340>)
 8019f38:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019f3c:	ee17 1a90 	vmov	r1, s15
 8019f40:	1a09      	subs	r1, r1, r0
 8019f42:	fb83 3401 	smull	r3, r4, r3, r1
 8019f46:	17c8      	asrs	r0, r1, #31
	float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8019f48:	4b8e      	ldr	r3, [pc, #568]	; (801a184 <SFXClassicSynthFrame+0x344>)
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8019f4a:	ebc0 0064 	rsb	r0, r0, r4, asr #1
 8019f4e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019f52:	eba1 0080 	sub.w	r0, r1, r0, lsl #2
 8019f56:	ee07 0a90 	vmov	s15, r0
 8019f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8019f5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f62:	ee17 1a90 	vmov	r1, s15
 8019f66:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8019f6a:	ed91 0a00 	vldr	s0, [r1]
	freq[voice] = LEAF_midiToFrequency(tunedNote);
 8019f6e:	ee37 0a00 	vadd.f32	s0, s14, s0
 8019f72:	f00a faef 	bl	8024554 <LEAF_midiToFrequency>
 8019f76:	eca8 0a01 	vstmia	r8!, {s0}
			float tempFreq = freq[i] * (1.0f + (synthDetune[i][j] * displayValues[3]));
 8019f7a:	eeb0 8a49 	vmov.f32	s16, s18
 8019f7e:	ecb5 7a01 	vldmia	r5!, {s14}
 8019f82:	edd6 7a03 	vldr	s15, [r6, #12]
 8019f86:	4b80      	ldr	r3, [pc, #512]	; (801a188 <SFXClassicSynthFrame+0x348>)
 8019f88:	eea7 8a27 	vfma.f32	s16, s14, s15
 8019f8c:	eb03 040a 	add.w	r4, r3, sl
			tSawtooth_setFreq(&osc[(i * NUM_OSC_PER_VOICE) + j], tempFreq);
 8019f90:	4b7e      	ldr	r3, [pc, #504]	; (801a18c <SFXClassicSynthFrame+0x34c>)
 8019f92:	eb03 000a 	add.w	r0, r3, sl
 8019f96:	f10a 0a04 	add.w	sl, sl, #4
			float tempFreq = freq[i] * (1.0f + (synthDetune[i][j] * displayValues[3]));
 8019f9a:	ee28 8a00 	vmul.f32	s16, s16, s0
			tSawtooth_setFreq(&osc[(i * NUM_OSC_PER_VOICE) + j], tempFreq);
 8019f9e:	eeb0 0a48 	vmov.f32	s0, s16
 8019fa2:	f00b f933 	bl	802520c <tSawtooth_setFreq>
			tRosenbergGlottalPulse_setFreq(&glottal[(i * NUM_OSC_PER_VOICE) + j], tempFreq);
 8019fa6:	eeb0 0a48 	vmov.f32	s0, s16
 8019faa:	4620      	mov	r0, r4
 8019fac:	f007 f88e 	bl	80210cc <tRosenbergGlottalPulse_setFreq>
			tRosenbergGlottalPulse_setPulseLength(&glottal[(i * NUM_OSC_PER_VOICE) + j], tempLFO1);
 8019fb0:	eeb0 0a69 	vmov.f32	s0, s19
 8019fb4:	4620      	mov	r0, r4
 8019fb6:	f007 f8a5 	bl	8021104 <tRosenbergGlottalPulse_setPulseLength>
			tRosenbergGlottalPulse_setOpenLength(&glottal[(i * NUM_OSC_PER_VOICE) + j], tempLFO2);
 8019fba:	eeb0 0a68 	vmov.f32	s0, s17
 8019fbe:	4620      	mov	r0, r4
 8019fc0:	f007 f892 	bl	80210e8 <tRosenbergGlottalPulse_setOpenLength>
		for (int j = 0; j < NUM_OSC_PER_VOICE; j++)
 8019fc4:	45ca      	cmp	sl, r9
 8019fc6:	d002      	beq.n	8019fce <SFXClassicSynthFrame+0x18e>
 8019fc8:	ed18 0a01 	vldr	s0, [r8, #-4]
 8019fcc:	e7d5      	b.n	8019f7a <SFXClassicSynthFrame+0x13a>
		float tempFreq2 = displayValues[1] +  keyFollowFilt;
 8019fce:	edd6 7a02 	vldr	s15, [r6, #8]
		tempFreq2 = LEAF_clip(0.0f, tempFreq2, 4095.0f);
 8019fd2:	eeb0 1a4b 	vmov.f32	s2, s22
		float tempFreq2 = displayValues[1] +  keyFollowFilt;
 8019fd6:	edd6 0a01 	vldr	s1, [r6, #4]
		tempFreq2 = LEAF_clip(0.0f, tempFreq2, 4095.0f);
 8019fda:	eeb0 0a6a 	vmov.f32	s0, s21
		float tempFreq2 = displayValues[1] +  keyFollowFilt;
 8019fde:	ee67 7aab 	vmul.f32	s15, s15, s23
		tempFreq2 = LEAF_clip(0.0f, tempFreq2, 4095.0f);
 8019fe2:	eeea 0a27 	vfma.f32	s1, s20, s15
 8019fe6:	f00a f9cb 	bl	8024380 <LEAF_clip>
		if (numVoices > 1)
 8019fea:	9b02      	ldr	r3, [sp, #8]
		filtFreqs[i] = (uint16_t) tempFreq2;
 8019fec:	eebc 0ac0 	vcvt.u32.f32	s0, s0
		if (numVoices > 1)
 8019ff0:	7819      	ldrb	r1, [r3, #0]
		filtFreqs[i] = (uint16_t) tempFreq2;
 8019ff2:	9b01      	ldr	r3, [sp, #4]
 8019ff4:	ee10 2a10 	vmov	r2, s0
		if (numVoices > 1)
 8019ff8:	2901      	cmp	r1, #1
		filtFreqs[i] = (uint16_t) tempFreq2;
 8019ffa:	f823 2f02 	strh.w	r2, [r3, #2]!
 8019ffe:	9301      	str	r3, [sp, #4]
		if (numVoices > 1)
 801a000:	d907      	bls.n	801a012 <SFXClassicSynthFrame+0x1d2>
			if (poly->voices[i][0] == -2)
 801a002:	f8db 0000 	ldr.w	r0, [fp]
 801a006:	6900      	ldr	r0, [r0, #16]
 801a008:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 801a00c:	6800      	ldr	r0, [r0, #0]
 801a00e:	3002      	adds	r0, #2
 801a010:	d008      	beq.n	801a024 <SFXClassicSynthFrame+0x1e4>
	for (int i = 0; i < numVoices; i++)
 801a012:	3701      	adds	r7, #1
 801a014:	42b9      	cmp	r1, r7
 801a016:	f73f af6d 	bgt.w	8019ef4 <SFXClassicSynthFrame+0xb4>
}
 801a01a:	b005      	add	sp, #20
 801a01c:	ecbd 8b08 	vpop	{d8-d11}
 801a020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (polyEnvs[i]->whichStage == env_idle)
 801a024:	4b5a      	ldr	r3, [pc, #360]	; (801a190 <SFXClassicSynthFrame+0x350>)
 801a026:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a02a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801a02c:	2800      	cmp	r0, #0
 801a02e:	d1f0      	bne.n	801a012 <SFXClassicSynthFrame+0x1d2>
					tSimplePoly_deactivateVoice(&poly, i);
 801a030:	9903      	ldr	r1, [sp, #12]
 801a032:	4658      	mov	r0, fp
 801a034:	f00a ff4e 	bl	8024ed4 <tSimplePoly_deactivateVoice>
 801a038:	9b02      	ldr	r3, [sp, #8]
 801a03a:	7819      	ldrb	r1, [r3, #0]
 801a03c:	e7e9      	b.n	801a012 <SFXClassicSynthFrame+0x1d2>
		numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 801a03e:	4d42      	ldr	r5, [pc, #264]	; (801a148 <SFXClassicSynthFrame+0x308>)
		tSimplePoly_setNumVoices(&poly, numVoices);
 801a040:	4854      	ldr	r0, [pc, #336]	; (801a194 <SFXClassicSynthFrame+0x354>)
		numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 801a042:	782a      	ldrb	r2, [r5, #0]
 801a044:	9502      	str	r5, [sp, #8]
 801a046:	2a01      	cmp	r2, #1
 801a048:	bf98      	it	ls
 801a04a:	2308      	movls	r3, #8
		tSimplePoly_setNumVoices(&poly, numVoices);
 801a04c:	4619      	mov	r1, r3
		numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 801a04e:	702b      	strb	r3, [r5, #0]
		tSimplePoly_setNumVoices(&poly, numVoices);
 801a050:	f00a fff6 	bl	8025040 <tSimplePoly_setNumVoices>
		setLED_A(numVoices == 1);
 801a054:	7828      	ldrb	r0, [r5, #0]
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 801a056:	2300      	movs	r3, #0
		setLED_A(numVoices == 1);
 801a058:	f1a0 0001 	sub.w	r0, r0, #1
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 801a05c:	7523      	strb	r3, [r4, #20]
		setLED_A(numVoices == 1);
 801a05e:	fab0 f080 	clz	r0, r0
 801a062:	0940      	lsrs	r0, r0, #5
 801a064:	f7f9 fe28 	bl	8013cb8 <setLED_A>
	if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 801a068:	7e23      	ldrb	r3, [r4, #24]
 801a06a:	2b01      	cmp	r3, #1
 801a06c:	f47f aef8 	bne.w	8019e60 <SFXClassicSynthFrame+0x20>
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 801a070:	2000      	movs	r0, #0
		cycleCountVals[0][1] = 0;
 801a072:	4b49      	ldr	r3, [pc, #292]	; (801a198 <SFXClassicSynthFrame+0x358>)
 801a074:	2600      	movs	r6, #0
 801a076:	2700      	movs	r7, #0
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 801a078:	7620      	strb	r0, [r4, #24]
		cycleCountVals[0][1] = 0;
 801a07a:	e9c3 6702 	strd	r6, r7, [r3, #8]
		setLED_Edit(0);
 801a07e:	f7f9 fddf 	bl	8013c40 <setLED_Edit>
 801a082:	e6ed      	b.n	8019e60 <SFXClassicSynthFrame+0x20>
				displayValues[16] = knobs[16];  // fade between sawtooth and glottal pulse
 801a084:	4b45      	ldr	r3, [pc, #276]	; (801a19c <SFXClassicSynthFrame+0x35c>)
 801a086:	4e34      	ldr	r6, [pc, #208]	; (801a158 <SFXClassicSynthFrame+0x318>)
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	6433      	str	r3, [r6, #64]	; 0x40
				break;
 801a08c:	e70b      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
				displayValues[15] = knobs[15] * 4095.0f;  // filter envelope amount
 801a08e:	4b44      	ldr	r3, [pc, #272]	; (801a1a0 <SFXClassicSynthFrame+0x360>)
 801a090:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801a16c <SFXClassicSynthFrame+0x32c>
 801a094:	edd3 7a00 	vldr	s15, [r3]
 801a098:	4e2f      	ldr	r6, [pc, #188]	; (801a158 <SFXClassicSynthFrame+0x318>)
 801a09a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a09e:	edc6 7a0f 	vstr	s15, [r6, #60]	; 0x3c
				break;
 801a0a2:	e700      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
				displayValues[14] = knobs[14]; //leak
 801a0a4:	4b3f      	ldr	r3, [pc, #252]	; (801a1a4 <SFXClassicSynthFrame+0x364>)
				for (int i = 0; i < numVoices; i++)
 801a0a6:	9f02      	ldr	r7, [sp, #8]
				displayValues[14] = knobs[14]; //leak
 801a0a8:	edd3 7a00 	vldr	s15, [r3]
 801a0ac:	4e2a      	ldr	r6, [pc, #168]	; (801a158 <SFXClassicSynthFrame+0x318>)
				for (int i = 0; i < numVoices; i++)
 801a0ae:	783b      	ldrb	r3, [r7, #0]
				displayValues[14] = knobs[14]; //leak
 801a0b0:	edc6 7a0e 	vstr	s15, [r6, #56]	; 0x38
				for (int i = 0; i < numVoices; i++)
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	f43f aef6 	beq.w	8019ea6 <SFXClassicSynthFrame+0x66>
					tADSR4_setLeakFactor(&polyFiltEnvs[i], ((1.0f - displayValues[14]) * 0.00005f) + 0.99995f);
 801a0ba:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801a0be:	4d3a      	ldr	r5, [pc, #232]	; (801a1a8 <SFXClassicSynthFrame+0x368>)
				for (int i = 0; i < numVoices; i++)
 801a0c0:	2400      	movs	r4, #0
					tADSR4_setLeakFactor(&polyFiltEnvs[i], ((1.0f - displayValues[14]) * 0.00005f) + 0.99995f);
 801a0c2:	eddf 8a3a 	vldr	s17, [pc, #232]	; 801a1ac <SFXClassicSynthFrame+0x36c>
 801a0c6:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 801a1b0 <SFXClassicSynthFrame+0x370>
 801a0ca:	e001      	b.n	801a0d0 <SFXClassicSynthFrame+0x290>
 801a0cc:	edd6 7a0e 	vldr	s15, [r6, #56]	; 0x38
 801a0d0:	ee79 7a67 	vsub.f32	s15, s18, s15
 801a0d4:	4628      	mov	r0, r5
 801a0d6:	eeb0 0a48 	vmov.f32	s0, s16
				for (int i = 0; i < numVoices; i++)
 801a0da:	3401      	adds	r4, #1
 801a0dc:	3504      	adds	r5, #4
					tADSR4_setLeakFactor(&polyFiltEnvs[i], ((1.0f - displayValues[14]) * 0.00005f) + 0.99995f);
 801a0de:	eea7 0aa8 	vfma.f32	s0, s15, s17
 801a0e2:	f008 f963 	bl	80223ac <tADSR4_setLeakFactor>
				for (int i = 0; i < numVoices; i++)
 801a0e6:	783b      	ldrb	r3, [r7, #0]
 801a0e8:	42a3      	cmp	r3, r4
 801a0ea:	dcef      	bgt.n	801a0cc <SFXClassicSynthFrame+0x28c>
 801a0ec:	e6db      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
				displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 801a0ee:	4a31      	ldr	r2, [pc, #196]	; (801a1b4 <SFXClassicSynthFrame+0x374>)
 801a0f0:	4b31      	ldr	r3, [pc, #196]	; (801a1b8 <SFXClassicSynthFrame+0x378>)
 801a0f2:	edd2 7a00 	vldr	s15, [r2]
 801a0f6:	ed93 7a00 	vldr	s14, [r3]
 801a0fa:	4b30      	ldr	r3, [pc, #192]	; (801a1bc <SFXClassicSynthFrame+0x37c>)
 801a0fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a100:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801a1c0 <SFXClassicSynthFrame+0x380>
				for (int i = 0; i < numVoices; i++)
 801a104:	9f02      	ldr	r7, [sp, #8]
				displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 801a106:	4e14      	ldr	r6, [pc, #80]	; (801a158 <SFXClassicSynthFrame+0x318>)
 801a108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				for (int i = 0; i < numVoices; i++)
 801a10c:	783a      	ldrb	r2, [r7, #0]
				displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 801a10e:	ee17 1a90 	vmov	r1, s15
 801a112:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a116:	ed93 0a00 	vldr	s0, [r3]
 801a11a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a11e:	ed86 0a0d 	vstr	s0, [r6, #52]	; 0x34
				for (int i = 0; i < numVoices; i++)
 801a122:	2a00      	cmp	r2, #0
 801a124:	f43f aebf 	beq.w	8019ea6 <SFXClassicSynthFrame+0x66>
 801a128:	4d1f      	ldr	r5, [pc, #124]	; (801a1a8 <SFXClassicSynthFrame+0x368>)
 801a12a:	2400      	movs	r4, #0
 801a12c:	e001      	b.n	801a132 <SFXClassicSynthFrame+0x2f2>
 801a12e:	ed96 0a0d 	vldr	s0, [r6, #52]	; 0x34
					tADSR4_setRelease(&polyFiltEnvs[i], displayValues[13]);
 801a132:	4628      	mov	r0, r5
				for (int i = 0; i < numVoices; i++)
 801a134:	3401      	adds	r4, #1
					tADSR4_setRelease(&polyFiltEnvs[i], displayValues[13]);
 801a136:	f008 f92b 	bl	8022390 <tADSR4_setRelease>
				for (int i = 0; i < numVoices; i++)
 801a13a:	783b      	ldrb	r3, [r7, #0]
 801a13c:	3504      	adds	r5, #4
 801a13e:	42a3      	cmp	r3, r4
 801a140:	dcf5      	bgt.n	801a12e <SFXClassicSynthFrame+0x2ee>
 801a142:	e6b0      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
 801a144:	20018714 	.word	0x20018714
 801a148:	20000250 	.word	0x20000250
 801a14c:	200002cf 	.word	0x200002cf
 801a150:	20000656 	.word	0x20000656
 801a154:	20016d50 	.word	0x20016d50
 801a158:	200187c4 	.word	0x200187c4
 801a15c:	200176c0 	.word	0x200176c0
 801a160:	200177a4 	.word	0x200177a4
 801a164:	2001727a 	.word	0x2001727a
 801a168:	42800000 	.word	0x42800000
 801a16c:	457ff000 	.word	0x457ff000
 801a170:	00000000 	.word	0x00000000
 801a174:	20018334 	.word	0x20018334
 801a178:	200005d8 	.word	0x200005d8
 801a17c:	20000654 	.word	0x20000654
 801a180:	2aaaaaab 	.word	0x2aaaaaab
 801a184:	20000620 	.word	0x20000620
 801a188:	20016248 	.word	0x20016248
 801a18c:	20017314 	.word	0x20017314
 801a190:	200176d0 	.word	0x200176d0
 801a194:	20017554 	.word	0x20017554
 801a198:	20015590 	.word	0x20015590
 801a19c:	20016d90 	.word	0x20016d90
 801a1a0:	20016d8c 	.word	0x20016d8c
 801a1a4:	20016d88 	.word	0x20016d88
 801a1a8:	20015948 	.word	0x20015948
 801a1ac:	3851b717 	.word	0x3851b717
 801a1b0:	3f7ffcb9 	.word	0x3f7ffcb9
 801a1b4:	20016d84 	.word	0x20016d84
 801a1b8:	20000238 	.word	0x20000238
 801a1bc:	2001707c 	.word	0x2001707c
 801a1c0:	46000000 	.word	0x46000000
 801a1c4:	20016e3c 	.word	0x20016e3c
				displayValues[12] = knobs[12]; //sus
 801a1c8:	4bb0      	ldr	r3, [pc, #704]	; (801a48c <SFXClassicSynthFrame+0x64c>)
				for (int i = 0; i < numVoices; i++)
 801a1ca:	9f02      	ldr	r7, [sp, #8]
				displayValues[12] = knobs[12]; //sus
 801a1cc:	ed93 0a00 	vldr	s0, [r3]
 801a1d0:	4eaf      	ldr	r6, [pc, #700]	; (801a490 <SFXClassicSynthFrame+0x650>)
				for (int i = 0; i < numVoices; i++)
 801a1d2:	783b      	ldrb	r3, [r7, #0]
				displayValues[12] = knobs[12]; //sus
 801a1d4:	ed86 0a0c 	vstr	s0, [r6, #48]	; 0x30
				for (int i = 0; i < numVoices; i++)
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	f43f ae64 	beq.w	8019ea6 <SFXClassicSynthFrame+0x66>
 801a1de:	4dad      	ldr	r5, [pc, #692]	; (801a494 <SFXClassicSynthFrame+0x654>)
 801a1e0:	2400      	movs	r4, #0
 801a1e2:	e001      	b.n	801a1e8 <SFXClassicSynthFrame+0x3a8>
 801a1e4:	ed96 0a0c 	vldr	s0, [r6, #48]	; 0x30
					tADSR4_setSustain(&polyFiltEnvs[i], displayValues[12]);
 801a1e8:	4628      	mov	r0, r5
				for (int i = 0; i < numVoices; i++)
 801a1ea:	3401      	adds	r4, #1
					tADSR4_setSustain(&polyFiltEnvs[i], displayValues[12]);
 801a1ec:	f008 f8ba 	bl	8022364 <tADSR4_setSustain>
				for (int i = 0; i < numVoices; i++)
 801a1f0:	783b      	ldrb	r3, [r7, #0]
 801a1f2:	3504      	adds	r5, #4
 801a1f4:	42a3      	cmp	r3, r4
 801a1f6:	dcf5      	bgt.n	801a1e4 <SFXClassicSynthFrame+0x3a4>
 801a1f8:	e655      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
				displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 801a1fa:	4aa7      	ldr	r2, [pc, #668]	; (801a498 <SFXClassicSynthFrame+0x658>)
 801a1fc:	4ba7      	ldr	r3, [pc, #668]	; (801a49c <SFXClassicSynthFrame+0x65c>)
 801a1fe:	edd2 7a00 	vldr	s15, [r2]
 801a202:	ed93 7a00 	vldr	s14, [r3]
 801a206:	4ba6      	ldr	r3, [pc, #664]	; (801a4a0 <SFXClassicSynthFrame+0x660>)
 801a208:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a20c:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 801a4a4 <SFXClassicSynthFrame+0x664>
				for (int i = 0; i < numVoices; i++)
 801a210:	9f02      	ldr	r7, [sp, #8]
				displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 801a212:	4e9f      	ldr	r6, [pc, #636]	; (801a490 <SFXClassicSynthFrame+0x650>)
 801a214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				for (int i = 0; i < numVoices; i++)
 801a218:	783a      	ldrb	r2, [r7, #0]
				displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 801a21a:	ee17 1a90 	vmov	r1, s15
 801a21e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a222:	ed93 0a00 	vldr	s0, [r3]
 801a226:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a22a:	ed86 0a0b 	vstr	s0, [r6, #44]	; 0x2c
				for (int i = 0; i < numVoices; i++)
 801a22e:	2a00      	cmp	r2, #0
 801a230:	f43f ae39 	beq.w	8019ea6 <SFXClassicSynthFrame+0x66>
 801a234:	4d97      	ldr	r5, [pc, #604]	; (801a494 <SFXClassicSynthFrame+0x654>)
 801a236:	2400      	movs	r4, #0
 801a238:	e001      	b.n	801a23e <SFXClassicSynthFrame+0x3fe>
 801a23a:	ed96 0a0b 	vldr	s0, [r6, #44]	; 0x2c
					tADSR4_setDecay(&polyFiltEnvs[i], displayValues[11]);
 801a23e:	4628      	mov	r0, r5
				for (int i = 0; i < numVoices; i++)
 801a240:	3401      	adds	r4, #1
					tADSR4_setDecay(&polyFiltEnvs[i], displayValues[11]);
 801a242:	f008 f881 	bl	8022348 <tADSR4_setDecay>
				for (int i = 0; i < numVoices; i++)
 801a246:	783b      	ldrb	r3, [r7, #0]
 801a248:	3504      	adds	r5, #4
 801a24a:	42a3      	cmp	r3, r4
 801a24c:	dcf5      	bgt.n	801a23a <SFXClassicSynthFrame+0x3fa>
 801a24e:	e62a      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
				displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 801a250:	4a95      	ldr	r2, [pc, #596]	; (801a4a8 <SFXClassicSynthFrame+0x668>)
 801a252:	4b92      	ldr	r3, [pc, #584]	; (801a49c <SFXClassicSynthFrame+0x65c>)
 801a254:	edd2 7a00 	vldr	s15, [r2]
 801a258:	ed93 7a00 	vldr	s14, [r3]
 801a25c:	4b90      	ldr	r3, [pc, #576]	; (801a4a0 <SFXClassicSynthFrame+0x660>)
 801a25e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a262:	ed9f 7a90 	vldr	s14, [pc, #576]	; 801a4a4 <SFXClassicSynthFrame+0x664>
				for (int i = 0; i < numVoices; i++)
 801a266:	9f02      	ldr	r7, [sp, #8]
				displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 801a268:	4e89      	ldr	r6, [pc, #548]	; (801a490 <SFXClassicSynthFrame+0x650>)
 801a26a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				for (int i = 0; i < numVoices; i++)
 801a26e:	783a      	ldrb	r2, [r7, #0]
				displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 801a270:	ee17 1a90 	vmov	r1, s15
 801a274:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a278:	ed93 0a00 	vldr	s0, [r3]
 801a27c:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a280:	ed86 0a0a 	vstr	s0, [r6, #40]	; 0x28
				for (int i = 0; i < numVoices; i++)
 801a284:	2a00      	cmp	r2, #0
 801a286:	f43f ae0e 	beq.w	8019ea6 <SFXClassicSynthFrame+0x66>
 801a28a:	4d82      	ldr	r5, [pc, #520]	; (801a494 <SFXClassicSynthFrame+0x654>)
 801a28c:	2400      	movs	r4, #0
 801a28e:	e001      	b.n	801a294 <SFXClassicSynthFrame+0x454>
 801a290:	ed96 0a0a 	vldr	s0, [r6, #40]	; 0x28
					tADSR4_setAttack(&polyFiltEnvs[i], displayValues[10]);
 801a294:	4628      	mov	r0, r5
				for (int i = 0; i < numVoices; i++)
 801a296:	3401      	adds	r4, #1
					tADSR4_setAttack(&polyFiltEnvs[i], displayValues[10]);
 801a298:	f008 f848 	bl	802232c <tADSR4_setAttack>
				for (int i = 0; i < numVoices; i++)
 801a29c:	783b      	ldrb	r3, [r7, #0]
 801a29e:	3504      	adds	r5, #4
 801a2a0:	42a3      	cmp	r3, r4
 801a2a2:	dcf5      	bgt.n	801a290 <SFXClassicSynthFrame+0x450>
 801a2a4:	e5ff      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
				displayValues[9] = knobs[9]; //leak
 801a2a6:	4b81      	ldr	r3, [pc, #516]	; (801a4ac <SFXClassicSynthFrame+0x66c>)
				for (int i = 0; i < numVoices; i++)
 801a2a8:	9f02      	ldr	r7, [sp, #8]
				displayValues[9] = knobs[9]; //leak
 801a2aa:	edd3 7a00 	vldr	s15, [r3]
 801a2ae:	4e78      	ldr	r6, [pc, #480]	; (801a490 <SFXClassicSynthFrame+0x650>)
				for (int i = 0; i < numVoices; i++)
 801a2b0:	783b      	ldrb	r3, [r7, #0]
				displayValues[9] = knobs[9]; //leak
 801a2b2:	edc6 7a09 	vstr	s15, [r6, #36]	; 0x24
				for (int i = 0; i < numVoices; i++)
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	f43f adf5 	beq.w	8019ea6 <SFXClassicSynthFrame+0x66>
					tADSR4_setLeakFactor(&polyEnvs[i], ((1.0f - displayValues[9]) * 0.00005f) + 0.99995f);
 801a2bc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801a2c0:	4d7b      	ldr	r5, [pc, #492]	; (801a4b0 <SFXClassicSynthFrame+0x670>)
				for (int i = 0; i < numVoices; i++)
 801a2c2:	2400      	movs	r4, #0
					tADSR4_setLeakFactor(&polyEnvs[i], ((1.0f - displayValues[9]) * 0.00005f) + 0.99995f);
 801a2c4:	eddf 8a7b 	vldr	s17, [pc, #492]	; 801a4b4 <SFXClassicSynthFrame+0x674>
 801a2c8:	ed9f 8a7b 	vldr	s16, [pc, #492]	; 801a4b8 <SFXClassicSynthFrame+0x678>
 801a2cc:	e001      	b.n	801a2d2 <SFXClassicSynthFrame+0x492>
 801a2ce:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
 801a2d2:	ee79 7a67 	vsub.f32	s15, s18, s15
 801a2d6:	4628      	mov	r0, r5
 801a2d8:	eeb0 0a48 	vmov.f32	s0, s16
				for (int i = 0; i < numVoices; i++)
 801a2dc:	3401      	adds	r4, #1
 801a2de:	3504      	adds	r5, #4
					tADSR4_setLeakFactor(&polyEnvs[i], ((1.0f - displayValues[9]) * 0.00005f) + 0.99995f);
 801a2e0:	eea7 0aa8 	vfma.f32	s0, s15, s17
 801a2e4:	f008 f862 	bl	80223ac <tADSR4_setLeakFactor>
				for (int i = 0; i < numVoices; i++)
 801a2e8:	783b      	ldrb	r3, [r7, #0]
 801a2ea:	42a3      	cmp	r3, r4
 801a2ec:	dcef      	bgt.n	801a2ce <SFXClassicSynthFrame+0x48e>
 801a2ee:	e5da      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
				displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 801a2f0:	4a72      	ldr	r2, [pc, #456]	; (801a4bc <SFXClassicSynthFrame+0x67c>)
 801a2f2:	4b6a      	ldr	r3, [pc, #424]	; (801a49c <SFXClassicSynthFrame+0x65c>)
 801a2f4:	edd2 7a00 	vldr	s15, [r2]
 801a2f8:	ed93 7a00 	vldr	s14, [r3]
 801a2fc:	4b68      	ldr	r3, [pc, #416]	; (801a4a0 <SFXClassicSynthFrame+0x660>)
 801a2fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a302:	ed9f 7a68 	vldr	s14, [pc, #416]	; 801a4a4 <SFXClassicSynthFrame+0x664>
				for (int i = 0; i < numVoices; i++)
 801a306:	9f02      	ldr	r7, [sp, #8]
				displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 801a308:	4e61      	ldr	r6, [pc, #388]	; (801a490 <SFXClassicSynthFrame+0x650>)
 801a30a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				for (int i = 0; i < numVoices; i++)
 801a30e:	783a      	ldrb	r2, [r7, #0]
				displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 801a310:	ee17 1a90 	vmov	r1, s15
 801a314:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a318:	ed93 0a00 	vldr	s0, [r3]
 801a31c:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a320:	ed86 0a08 	vstr	s0, [r6, #32]
				for (int i = 0; i < numVoices; i++)
 801a324:	2a00      	cmp	r2, #0
 801a326:	f43f adbe 	beq.w	8019ea6 <SFXClassicSynthFrame+0x66>
 801a32a:	4d61      	ldr	r5, [pc, #388]	; (801a4b0 <SFXClassicSynthFrame+0x670>)
 801a32c:	2400      	movs	r4, #0
 801a32e:	e001      	b.n	801a334 <SFXClassicSynthFrame+0x4f4>
 801a330:	ed96 0a08 	vldr	s0, [r6, #32]
					tADSR4_setRelease(&polyEnvs[i], displayValues[8]);
 801a334:	4628      	mov	r0, r5
				for (int i = 0; i < numVoices; i++)
 801a336:	3401      	adds	r4, #1
					tADSR4_setRelease(&polyEnvs[i], displayValues[8]);
 801a338:	f008 f82a 	bl	8022390 <tADSR4_setRelease>
				for (int i = 0; i < numVoices; i++)
 801a33c:	783b      	ldrb	r3, [r7, #0]
 801a33e:	3504      	adds	r5, #4
 801a340:	42a3      	cmp	r3, r4
 801a342:	dcf5      	bgt.n	801a330 <SFXClassicSynthFrame+0x4f0>
 801a344:	e5af      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
				displayValues[7] = knobs[7]; //sus
 801a346:	4b5e      	ldr	r3, [pc, #376]	; (801a4c0 <SFXClassicSynthFrame+0x680>)
				for (int i = 0; i < numVoices; i++)
 801a348:	9f02      	ldr	r7, [sp, #8]
				displayValues[7] = knobs[7]; //sus
 801a34a:	ed93 0a00 	vldr	s0, [r3]
 801a34e:	4e50      	ldr	r6, [pc, #320]	; (801a490 <SFXClassicSynthFrame+0x650>)
				for (int i = 0; i < numVoices; i++)
 801a350:	783b      	ldrb	r3, [r7, #0]
				displayValues[7] = knobs[7]; //sus
 801a352:	ed86 0a07 	vstr	s0, [r6, #28]
				for (int i = 0; i < numVoices; i++)
 801a356:	2b00      	cmp	r3, #0
 801a358:	f43f ada5 	beq.w	8019ea6 <SFXClassicSynthFrame+0x66>
 801a35c:	4d54      	ldr	r5, [pc, #336]	; (801a4b0 <SFXClassicSynthFrame+0x670>)
 801a35e:	2400      	movs	r4, #0
 801a360:	e001      	b.n	801a366 <SFXClassicSynthFrame+0x526>
 801a362:	ed96 0a07 	vldr	s0, [r6, #28]
					tADSR4_setSustain(&polyEnvs[i], displayValues[7]);
 801a366:	4628      	mov	r0, r5
				for (int i = 0; i < numVoices; i++)
 801a368:	3401      	adds	r4, #1
					tADSR4_setSustain(&polyEnvs[i], displayValues[7]);
 801a36a:	f007 fffb 	bl	8022364 <tADSR4_setSustain>
				for (int i = 0; i < numVoices; i++)
 801a36e:	783b      	ldrb	r3, [r7, #0]
 801a370:	3504      	adds	r5, #4
 801a372:	42a3      	cmp	r3, r4
 801a374:	dcf5      	bgt.n	801a362 <SFXClassicSynthFrame+0x522>
 801a376:	e596      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
				displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 801a378:	4a52      	ldr	r2, [pc, #328]	; (801a4c4 <SFXClassicSynthFrame+0x684>)
 801a37a:	4b48      	ldr	r3, [pc, #288]	; (801a49c <SFXClassicSynthFrame+0x65c>)
 801a37c:	edd2 7a00 	vldr	s15, [r2]
 801a380:	ed93 7a00 	vldr	s14, [r3]
 801a384:	4b46      	ldr	r3, [pc, #280]	; (801a4a0 <SFXClassicSynthFrame+0x660>)
 801a386:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a38a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801a4a4 <SFXClassicSynthFrame+0x664>
				for (int i = 0; i < numVoices; i++)
 801a38e:	9f02      	ldr	r7, [sp, #8]
				displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 801a390:	4e3f      	ldr	r6, [pc, #252]	; (801a490 <SFXClassicSynthFrame+0x650>)
 801a392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				for (int i = 0; i < numVoices; i++)
 801a396:	783a      	ldrb	r2, [r7, #0]
				displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 801a398:	ee17 1a90 	vmov	r1, s15
 801a39c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a3a0:	ed93 0a00 	vldr	s0, [r3]
 801a3a4:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a3a8:	ed86 0a06 	vstr	s0, [r6, #24]
				for (int i = 0; i < numVoices; i++)
 801a3ac:	2a00      	cmp	r2, #0
 801a3ae:	f43f ad7a 	beq.w	8019ea6 <SFXClassicSynthFrame+0x66>
 801a3b2:	4d3f      	ldr	r5, [pc, #252]	; (801a4b0 <SFXClassicSynthFrame+0x670>)
 801a3b4:	2400      	movs	r4, #0
 801a3b6:	e001      	b.n	801a3bc <SFXClassicSynthFrame+0x57c>
 801a3b8:	ed96 0a06 	vldr	s0, [r6, #24]
					tADSR4_setDecay(&polyEnvs[i], displayValues[6]);
 801a3bc:	4628      	mov	r0, r5
				for (int i = 0; i < numVoices; i++)
 801a3be:	3401      	adds	r4, #1
					tADSR4_setDecay(&polyEnvs[i], displayValues[6]);
 801a3c0:	f007 ffc2 	bl	8022348 <tADSR4_setDecay>
				for (int i = 0; i < numVoices; i++)
 801a3c4:	783b      	ldrb	r3, [r7, #0]
 801a3c6:	3504      	adds	r5, #4
 801a3c8:	42a3      	cmp	r3, r4
 801a3ca:	dcf5      	bgt.n	801a3b8 <SFXClassicSynthFrame+0x578>
 801a3cc:	e56b      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
				displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 801a3ce:	4a3e      	ldr	r2, [pc, #248]	; (801a4c8 <SFXClassicSynthFrame+0x688>)
 801a3d0:	4b32      	ldr	r3, [pc, #200]	; (801a49c <SFXClassicSynthFrame+0x65c>)
 801a3d2:	edd2 7a00 	vldr	s15, [r2]
 801a3d6:	ed93 7a00 	vldr	s14, [r3]
 801a3da:	4b31      	ldr	r3, [pc, #196]	; (801a4a0 <SFXClassicSynthFrame+0x660>)
 801a3dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a3e0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801a4a4 <SFXClassicSynthFrame+0x664>
				for (int i = 0; i < numVoices; i++)
 801a3e4:	9f02      	ldr	r7, [sp, #8]
				displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 801a3e6:	4e2a      	ldr	r6, [pc, #168]	; (801a490 <SFXClassicSynthFrame+0x650>)
 801a3e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				for (int i = 0; i < numVoices; i++)
 801a3ec:	783a      	ldrb	r2, [r7, #0]
				displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 801a3ee:	ee17 1a90 	vmov	r1, s15
 801a3f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a3f6:	ed93 0a00 	vldr	s0, [r3]
 801a3fa:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a3fe:	ed86 0a05 	vstr	s0, [r6, #20]
				for (int i = 0; i < numVoices; i++)
 801a402:	2a00      	cmp	r2, #0
 801a404:	f43f ad4f 	beq.w	8019ea6 <SFXClassicSynthFrame+0x66>
 801a408:	4d29      	ldr	r5, [pc, #164]	; (801a4b0 <SFXClassicSynthFrame+0x670>)
 801a40a:	2400      	movs	r4, #0
 801a40c:	e001      	b.n	801a412 <SFXClassicSynthFrame+0x5d2>
 801a40e:	ed96 0a05 	vldr	s0, [r6, #20]
					tADSR4_setAttack(&polyEnvs[i], displayValues[5]);
 801a412:	4628      	mov	r0, r5
				for (int i = 0; i < numVoices; i++)
 801a414:	3401      	adds	r4, #1
					tADSR4_setAttack(&polyEnvs[i], displayValues[5]);
 801a416:	f007 ff89 	bl	802232c <tADSR4_setAttack>
				for (int i = 0; i < numVoices; i++)
 801a41a:	783b      	ldrb	r3, [r7, #0]
 801a41c:	3504      	adds	r5, #4
 801a41e:	42a3      	cmp	r3, r4
 801a420:	dcf5      	bgt.n	801a40e <SFXClassicSynthFrame+0x5ce>
 801a422:	e540      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
				displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 801a424:	4b29      	ldr	r3, [pc, #164]	; (801a4cc <SFXClassicSynthFrame+0x68c>)
 801a426:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801a42a:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801a4d0 <SFXClassicSynthFrame+0x690>
 801a42e:	ed93 7a00 	vldr	s14, [r3]
				for (int i = 0; i < numVoices; i++)
 801a432:	9f02      	ldr	r7, [sp, #8]
				displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 801a434:	eea7 0a27 	vfma.f32	s0, s14, s15
 801a438:	4e15      	ldr	r6, [pc, #84]	; (801a490 <SFXClassicSynthFrame+0x650>)
				for (int i = 0; i < numVoices; i++)
 801a43a:	783b      	ldrb	r3, [r7, #0]
				displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 801a43c:	ed86 0a04 	vstr	s0, [r6, #16]
				for (int i = 0; i < numVoices; i++)
 801a440:	2b00      	cmp	r3, #0
 801a442:	f43f ad30 	beq.w	8019ea6 <SFXClassicSynthFrame+0x66>
 801a446:	4d23      	ldr	r5, [pc, #140]	; (801a4d4 <SFXClassicSynthFrame+0x694>)
 801a448:	2400      	movs	r4, #0
 801a44a:	e001      	b.n	801a450 <SFXClassicSynthFrame+0x610>
 801a44c:	ed96 0a04 	vldr	s0, [r6, #16]
					tEfficientSVF_setQ(&synthLP[i],displayValues[4]);
 801a450:	4628      	mov	r0, r5
				for (int i = 0; i < numVoices; i++)
 801a452:	3401      	adds	r4, #1
					tEfficientSVF_setQ(&synthLP[i],displayValues[4]);
 801a454:	f008 fdd2 	bl	8022ffc <tEfficientSVF_setQ>
				for (int i = 0; i < numVoices; i++)
 801a458:	783b      	ldrb	r3, [r7, #0]
 801a45a:	3504      	adds	r5, #4
 801a45c:	42a3      	cmp	r3, r4
 801a45e:	dcf5      	bgt.n	801a44c <SFXClassicSynthFrame+0x60c>
 801a460:	e521      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
				displayValues[3] = knobs[3]; //detune
 801a462:	4b1d      	ldr	r3, [pc, #116]	; (801a4d8 <SFXClassicSynthFrame+0x698>)
 801a464:	4e0a      	ldr	r6, [pc, #40]	; (801a490 <SFXClassicSynthFrame+0x650>)
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	60f3      	str	r3, [r6, #12]
				break;
 801a46a:	e51c      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
				displayValues[2] = knobs[2]; //keyfollow filter cutoff
 801a46c:	4b1b      	ldr	r3, [pc, #108]	; (801a4dc <SFXClassicSynthFrame+0x69c>)
 801a46e:	4e08      	ldr	r6, [pc, #32]	; (801a490 <SFXClassicSynthFrame+0x650>)
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	60b3      	str	r3, [r6, #8]
				break;
 801a474:	e517      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
				displayValues[1] = knobs[1] * 4096.0f; //lowpass cutoff
 801a476:	4b1a      	ldr	r3, [pc, #104]	; (801a4e0 <SFXClassicSynthFrame+0x6a0>)
 801a478:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 801a4e4 <SFXClassicSynthFrame+0x6a4>
 801a47c:	edd3 7a00 	vldr	s15, [r3]
 801a480:	4e03      	ldr	r6, [pc, #12]	; (801a490 <SFXClassicSynthFrame+0x650>)
 801a482:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a486:	edc6 7a01 	vstr	s15, [r6, #4]
				break;
 801a48a:	e50c      	b.n	8019ea6 <SFXClassicSynthFrame+0x66>
 801a48c:	20016d80 	.word	0x20016d80
 801a490:	200187c4 	.word	0x200187c4
 801a494:	20015948 	.word	0x20015948
 801a498:	20016d7c 	.word	0x20016d7c
 801a49c:	20000238 	.word	0x20000238
 801a4a0:	2001707c 	.word	0x2001707c
 801a4a4:	46000000 	.word	0x46000000
 801a4a8:	20016d78 	.word	0x20016d78
 801a4ac:	20016d74 	.word	0x20016d74
 801a4b0:	200176d0 	.word	0x200176d0
 801a4b4:	3851b717 	.word	0x3851b717
 801a4b8:	3f7ffcb9 	.word	0x3f7ffcb9
 801a4bc:	20016d70 	.word	0x20016d70
 801a4c0:	20016d6c 	.word	0x20016d6c
 801a4c4:	20016d68 	.word	0x20016d68
 801a4c8:	20016d64 	.word	0x20016d64
 801a4cc:	20016d60 	.word	0x20016d60
 801a4d0:	3ecccccd 	.word	0x3ecccccd
 801a4d4:	20016e18 	.word	0x20016e18
 801a4d8:	20016d5c 	.word	0x20016d5c
 801a4dc:	20016d58 	.word	0x20016d58
 801a4e0:	20016d54 	.word	0x20016d54
 801a4e4:	45800000 	.word	0x45800000

0801a4e8 <SFXClassicSynthTick>:
{
 801a4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801a4ec:	2500      	movs	r5, #0
 801a4ee:	f8df a124 	ldr.w	sl, [pc, #292]	; 801a614 <SFXClassicSynthTick+0x12c>
 801a4f2:	260c      	movs	r6, #12
 801a4f4:	4c3e      	ldr	r4, [pc, #248]	; (801a5f0 <SFXClassicSynthTick+0x108>)
 801a4f6:	46a9      	mov	r9, r5
{
 801a4f8:	ed2d 8b08 	vpush	{d8-d11}
 801a4fc:	b083      	sub	sp, #12
	float sample = 0.0f;
 801a4fe:	eddf aa3d 	vldr	s21, [pc, #244]	; 801a5f4 <SFXClassicSynthTick+0x10c>
		tEfficientSVF_setFreq(&synthLP[i], LEAF_clip(0.0f, (filtFreqs[i] + (displayValues[15] * tADSR4_tick(&polyFiltEnvs[i]))), 4095.0f));
 801a502:	ed9f ba3d 	vldr	s22, [pc, #244]	; 801a5f8 <SFXClassicSynthTick+0x110>
{
 801a506:	9001      	str	r0, [sp, #4]
		tEfficientSVF_setFreq(&synthLP[i], LEAF_clip(0.0f, (filtFreqs[i] + (displayValues[15] * tADSR4_tick(&polyFiltEnvs[i]))), 4095.0f));
 801a508:	eef0 ba6a 	vmov.f32	s23, s21
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801a50c:	483b      	ldr	r0, [pc, #236]	; (801a5fc <SFXClassicSynthTick+0x114>)
 801a50e:	f00a fd9f 	bl	8025050 <tSimplePoly_getNumVoices>
 801a512:	4548      	cmp	r0, r9
 801a514:	dd58      	ble.n	801a5c8 <SFXClassicSynthTick+0xe0>
		float env = tADSR4_tick(&polyEnvs[i]);
 801a516:	483a      	ldr	r0, [pc, #232]	; (801a600 <SFXClassicSynthTick+0x118>)
			tempSample += tSawtooth_tick(&osc[(i * NUM_OSC_PER_VOICE) + j]) * env * (1.0f-displayValues[16]);
 801a518:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 801a51c:	eb05 0b45 	add.w	fp, r5, r5, lsl #1
		float tempSample = 0.0f;
 801a520:	eddf 8a34 	vldr	s17, [pc, #208]	; 801a5f4 <SFXClassicSynthTick+0x10c>
		float env = tADSR4_tick(&polyEnvs[i]);
 801a524:	4428      	add	r0, r5
 801a526:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 801a618 <SFXClassicSynthTick+0x130>
 801a52a:	f007 ff5d 	bl	80223e8 <tADSR4_tick>
 801a52e:	eef0 9a40 	vmov.f32	s19, s0
 801a532:	4f34      	ldr	r7, [pc, #208]	; (801a604 <SFXClassicSynthTick+0x11c>)
			tempSample += tSawtooth_tick(&osc[(i * NUM_OSC_PER_VOICE) + j]) * env * (1.0f-displayValues[16]);
 801a534:	eb08 000b 	add.w	r0, r8, fp
 801a538:	f00a fe9a 	bl	8025270 <tSawtooth_tick>
			tempSample += tRosenbergGlottalPulse_tick(&glottal[(i * NUM_OSC_PER_VOICE) + j]) * env * (displayValues[16]);
 801a53c:	eb07 000b 	add.w	r0, r7, fp
			tempSample += tSawtooth_tick(&osc[(i * NUM_OSC_PER_VOICE) + j]) * env * (1.0f-displayValues[16]);
 801a540:	eeb0 9a40 	vmov.f32	s18, s0
 801a544:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
			tempSample += tRosenbergGlottalPulse_tick(&glottal[(i * NUM_OSC_PER_VOICE) + j]) * env * (displayValues[16]);
 801a548:	f006 fce4 	bl	8020f14 <tRosenbergGlottalPulse_tick>
 801a54c:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
			tempSample += tSawtooth_tick(&osc[(i * NUM_OSC_PER_VOICE) + j]) * env * (1.0f-displayValues[16]);
 801a550:	ee3a 8a48 	vsub.f32	s16, s20, s16
 801a554:	f10b 0b04 	add.w	fp, fp, #4
			tempSample += tRosenbergGlottalPulse_tick(&glottal[(i * NUM_OSC_PER_VOICE) + j]) * env * (displayValues[16]);
 801a558:	ee20 0a27 	vmul.f32	s0, s0, s15
		for (int j = 0; j < NUM_OSC_PER_VOICE; j++)
 801a55c:	45b3      	cmp	fp, r6
			tempSample += tRosenbergGlottalPulse_tick(&glottal[(i * NUM_OSC_PER_VOICE) + j]) * env * (displayValues[16]);
 801a55e:	eea9 0a08 	vfma.f32	s0, s18, s16
 801a562:	eee9 8a80 	vfma.f32	s17, s19, s0
		for (int j = 0; j < NUM_OSC_PER_VOICE; j++)
 801a566:	d1e5      	bne.n	801a534 <SFXClassicSynthTick+0x4c>
		tEfficientSVF_setFreq(&synthLP[i], LEAF_clip(0.0f, (filtFreqs[i] + (displayValues[15] * tADSR4_tick(&polyFiltEnvs[i]))), 4095.0f));
 801a568:	f83a 3f02 	ldrh.w	r3, [sl, #2]!
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801a56c:	f109 0901 	add.w	r9, r9, #1
		tEfficientSVF_setFreq(&synthLP[i], LEAF_clip(0.0f, (filtFreqs[i] + (displayValues[15] * tADSR4_tick(&polyFiltEnvs[i]))), 4095.0f));
 801a570:	4825      	ldr	r0, [pc, #148]	; (801a608 <SFXClassicSynthTick+0x120>)
 801a572:	360c      	adds	r6, #12
 801a574:	ee08 3a10 	vmov	s16, r3
 801a578:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
 801a57c:	4428      	add	r0, r5
 801a57e:	4f23      	ldr	r7, [pc, #140]	; (801a60c <SFXClassicSynthTick+0x124>)
 801a580:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801a584:	f007 ff30 	bl	80223e8 <tADSR4_tick>
 801a588:	eeb0 1a4b 	vmov.f32	s2, s22
 801a58c:	442f      	add	r7, r5
 801a58e:	3504      	adds	r5, #4
 801a590:	eef0 0a48 	vmov.f32	s1, s16
 801a594:	eee9 0a00 	vfma.f32	s1, s18, s0
 801a598:	eeb0 0a6b 	vmov.f32	s0, s23
 801a59c:	f009 fef0 	bl	8024380 <LEAF_clip>
 801a5a0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801a5a4:	4638      	mov	r0, r7
 801a5a6:	ee10 3a10 	vmov	r3, s0
 801a5aa:	b299      	uxth	r1, r3
 801a5ac:	f008 fd02 	bl	8022fb4 <tEfficientSVF_setFreq>
		sample += tEfficientSVF_tick(&synthLP[i], tempSample);
 801a5b0:	4638      	mov	r0, r7
 801a5b2:	eeb0 0a68 	vmov.f32	s0, s17
 801a5b6:	f008 fcad 	bl	8022f14 <tEfficientSVF_tick>
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801a5ba:	4810      	ldr	r0, [pc, #64]	; (801a5fc <SFXClassicSynthTick+0x114>)
		sample += tEfficientSVF_tick(&synthLP[i], tempSample);
 801a5bc:	ee7a aa80 	vadd.f32	s21, s21, s0
	for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801a5c0:	f00a fd46 	bl	8025050 <tSimplePoly_getNumVoices>
 801a5c4:	4548      	cmp	r0, r9
 801a5c6:	dca6      	bgt.n	801a516 <SFXClassicSynthTick+0x2e>
	sample *= INV_NUM_OSC_PER_VOICE * displayValues[0];
 801a5c8:	ed94 0a00 	vldr	s0, [r4]
 801a5cc:	eddf 7a10 	vldr	s15, [pc, #64]	; 801a610 <SFXClassicSynthTick+0x128>
 801a5d0:	ee20 0a27 	vmul.f32	s0, s0, s15
	sample = tanhf(sample);
 801a5d4:	ee20 0a2a 	vmul.f32	s0, s0, s21
 801a5d8:	f00d fbe4 	bl	8027da4 <tanhf>
	input[0] = sample;
 801a5dc:	9b01      	ldr	r3, [sp, #4]
 801a5de:	ed83 0a00 	vstr	s0, [r3]
	input[1] = sample;
 801a5e2:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801a5e6:	b003      	add	sp, #12
 801a5e8:	ecbd 8b08 	vpop	{d8-d11}
 801a5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5f0:	200187c4 	.word	0x200187c4
 801a5f4:	00000000 	.word	0x00000000
 801a5f8:	457ff000 	.word	0x457ff000
 801a5fc:	20017554 	.word	0x20017554
 801a600:	200176d0 	.word	0x200176d0
 801a604:	20016248 	.word	0x20016248
 801a608:	20015948 	.word	0x20015948
 801a60c:	20016e18 	.word	0x20016e18
 801a610:	3ea8f5c3 	.word	0x3ea8f5c3
 801a614:	2001727a 	.word	0x2001727a
 801a618:	20017314 	.word	0x20017314

0801a61c <SFXClassicSynthFree>:
{
 801a61c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a620:	2500      	movs	r5, #0
 801a622:	260c      	movs	r6, #12
 801a624:	f8df 8064 	ldr.w	r8, [pc, #100]	; 801a68c <SFXClassicSynthFree+0x70>
 801a628:	4f15      	ldr	r7, [pc, #84]	; (801a680 <SFXClassicSynthFree+0x64>)
 801a62a:	f8df b064 	ldr.w	fp, [pc, #100]	; 801a690 <SFXClassicSynthFree+0x74>
 801a62e:	f8df a064 	ldr.w	sl, [pc, #100]	; 801a694 <SFXClassicSynthFree+0x78>
 801a632:	f8df 9064 	ldr.w	r9, [pc, #100]	; 801a698 <SFXClassicSynthFree+0x7c>
 801a636:	eb05 0445 	add.w	r4, r5, r5, lsl #1
			tSawtooth_free(&osc[(i * NUM_OSC_PER_VOICE) + j]);
 801a63a:	eb08 0004 	add.w	r0, r8, r4
 801a63e:	f00a fde1 	bl	8025204 <tSawtooth_free>
			tRosenbergGlottalPulse_free(&glottal[(i * NUM_OSC_PER_VOICE) + j]);
 801a642:	1938      	adds	r0, r7, r4
 801a644:	3404      	adds	r4, #4
 801a646:	f006 fc61 	bl	8020f0c <tRosenbergGlottalPulse_free>
		for (int j = 0; j < NUM_OSC_PER_VOICE; j++)
 801a64a:	42b4      	cmp	r4, r6
 801a64c:	d1f5      	bne.n	801a63a <SFXClassicSynthFree+0x1e>
		tEfficientSVF_free(&synthLP[i]);
 801a64e:	eb0b 0005 	add.w	r0, fp, r5
 801a652:	f104 060c 	add.w	r6, r4, #12
 801a656:	f008 fc59 	bl	8022f0c <tEfficientSVF_free>
		tADSR4_free(&polyEnvs[i]);
 801a65a:	eb0a 0005 	add.w	r0, sl, r5
 801a65e:	f007 fe61 	bl	8022324 <tADSR4_free>
		tADSR4_free(&polyFiltEnvs[i]);
 801a662:	eb09 0005 	add.w	r0, r9, r5
 801a666:	3504      	adds	r5, #4
 801a668:	f007 fe5c 	bl	8022324 <tADSR4_free>
	for (int i = 0; i < NUM_VOC_VOICES; i++)
 801a66c:	2d20      	cmp	r5, #32
 801a66e:	d1e2      	bne.n	801a636 <SFXClassicSynthFree+0x1a>
	tCycle_free(&pwmLFO1);
 801a670:	4804      	ldr	r0, [pc, #16]	; (801a684 <SFXClassicSynthFree+0x68>)
 801a672:	f00a fd33 	bl	80250dc <tCycle_free>
	tCycle_free(&pwmLFO2);
 801a676:	4804      	ldr	r0, [pc, #16]	; (801a688 <SFXClassicSynthFree+0x6c>)
}
 801a678:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	tCycle_free(&pwmLFO2);
 801a67c:	f00a bd2e 	b.w	80250dc <tCycle_free>
 801a680:	20016248 	.word	0x20016248
 801a684:	200176c0 	.word	0x200176c0
 801a688:	200177a4 	.word	0x200177a4
 801a68c:	20017314 	.word	0x20017314
 801a690:	20016e18 	.word	0x20016e18
 801a694:	200176d0 	.word	0x200176d0
 801a698:	20015948 	.word	0x20015948

0801a69c <SFXRhodesAlloc>:
{
 801a69c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	leaf.clearOnAllocation = 1;
 801a6a0:	2101      	movs	r1, #1
	soundNames[0] = "DARK  ";
 801a6a2:	f8df b150 	ldr.w	fp, [pc, #336]	; 801a7f4 <SFXRhodesAlloc+0x158>
 801a6a6:	4a41      	ldr	r2, [pc, #260]	; (801a7ac <SFXRhodesAlloc+0x110>)
	soundNames[4] = "CUSTOM";
 801a6a8:	2400      	movs	r4, #0
	soundNames[1] = "LIGHT ";
 801a6aa:	4b41      	ldr	r3, [pc, #260]	; (801a7b0 <SFXRhodesAlloc+0x114>)
	leaf.clearOnAllocation = 1;
 801a6ac:	4841      	ldr	r0, [pc, #260]	; (801a7b4 <SFXRhodesAlloc+0x118>)
	soundNames[0] = "DARK  ";
 801a6ae:	f8cb 2000 	str.w	r2, [fp]
	soundNames[1] = "LIGHT ";
 801a6b2:	f8cb 3004 	str.w	r3, [fp, #4]
	soundNames[3] = "PAD   ";
 801a6b6:	4a40      	ldr	r2, [pc, #256]	; (801a7b8 <SFXRhodesAlloc+0x11c>)
	soundNames[4] = "CUSTOM";
 801a6b8:	4b40      	ldr	r3, [pc, #256]	; (801a7bc <SFXRhodesAlloc+0x120>)
 801a6ba:	f8df a13c 	ldr.w	sl, [pc, #316]	; 801a7f8 <SFXRhodesAlloc+0x15c>
 801a6be:	f8df 913c 	ldr.w	r9, [pc, #316]	; 801a7fc <SFXRhodesAlloc+0x160>
 801a6c2:	f8cb 3010 	str.w	r3, [fp, #16]
{
 801a6c6:	ed2d 8b04 	vpush	{d8-d9}
	leaf.clearOnAllocation = 1;
 801a6ca:	6141      	str	r1, [r0, #20]
			tADSR4_initToPool(&FM_envs[i][j], 10, 1000, 0.5f, 100.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &smallPool);
 801a6cc:	ed9f 9a3c 	vldr	s18, [pc, #240]	; 801a7c0 <SFXRhodesAlloc+0x124>
	soundNames[2] = "BASS  ";
 801a6d0:	493c      	ldr	r1, [pc, #240]	; (801a7c4 <SFXRhodesAlloc+0x128>)
			tADSR4_initToPool(&FM_envs[i][j], 10, 1000, 0.5f, 100.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &smallPool);
 801a6d2:	eddf 8a3d 	vldr	s17, [pc, #244]	; 801a7c8 <SFXRhodesAlloc+0x12c>
			tADSR4_setLeakFactor(&FM_envs[i][j], 0.99998f);
 801a6d6:	ed9f 8a3d 	vldr	s16, [pc, #244]	; 801a7cc <SFXRhodesAlloc+0x130>
	soundNames[3] = "PAD   ";
 801a6da:	e9cb 1202 	strd	r1, r2, [fp, #8]
 801a6de:	f104 0818 	add.w	r8, r4, #24
			tCycle_initToPool(&FM_sines[i][j], &smallPool);
 801a6e2:	4e3b      	ldr	r6, [pc, #236]	; (801a7d0 <SFXRhodesAlloc+0x134>)
			tADSR4_initToPool(&FM_envs[i][j], 10, 1000, 0.5f, 100.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &smallPool);
 801a6e4:	4f3b      	ldr	r7, [pc, #236]	; (801a7d4 <SFXRhodesAlloc+0x138>)
 801a6e6:	eb09 0504 	add.w	r5, r9, r4
			tCycle_initToPool(&FM_sines[i][j], &smallPool);
 801a6ea:	eb0a 0004 	add.w	r0, sl, r4
 801a6ee:	4631      	mov	r1, r6
 801a6f0:	3404      	adds	r4, #4
 801a6f2:	f00a fce5 	bl	80250c0 <tCycle_initToPool>
			tADSR4_initToPool(&FM_envs[i][j], 10, 1000, 0.5f, 100.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &smallPool);
 801a6f6:	4628      	mov	r0, r5
 801a6f8:	4633      	mov	r3, r6
 801a6fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a6fe:	4639      	mov	r1, r7
 801a700:	eef0 1a49 	vmov.f32	s3, s18
 801a704:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 801a708:	eef0 0a68 	vmov.f32	s1, s17
 801a70c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801a710:	f007 fdae 	bl	8022270 <tADSR4_initToPool>
			tADSR4_setLeakFactor(&FM_envs[i][j], 0.99998f);
 801a714:	eeb0 0a48 	vmov.f32	s0, s16
 801a718:	4628      	mov	r0, r5
 801a71a:	f007 fe47 	bl	80223ac <tADSR4_setLeakFactor>
		for (int j = 0; j < 6; j++)
 801a71e:	4544      	cmp	r4, r8
 801a720:	d1e1      	bne.n	801a6e6 <SFXRhodesAlloc+0x4a>
	for (int i = 0; i < NUM_VOC_VOICES; i++)
 801a722:	2cc0      	cmp	r4, #192	; 0xc0
 801a724:	d1db      	bne.n	801a6de <SFXRhodesAlloc+0x42>
 801a726:	4c2c      	ldr	r4, [pc, #176]	; (801a7d8 <SFXRhodesAlloc+0x13c>)
		tExpSmooth_initToPool(&susSmoothers[i], 1.0f, 0.01f, &smallPool);
 801a728:	4e29      	ldr	r6, [pc, #164]	; (801a7d0 <SFXRhodesAlloc+0x134>)
 801a72a:	f104 0518 	add.w	r5, r4, #24
 801a72e:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 801a7dc <SFXRhodesAlloc+0x140>
 801a732:	4620      	mov	r0, r4
 801a734:	3404      	adds	r4, #4
 801a736:	4631      	mov	r1, r6
 801a738:	eef0 0a48 	vmov.f32	s1, s16
 801a73c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a740:	f008 f94e 	bl	80229e0 <tExpSmooth_initToPool>
	for (int i = 0; i < 6; i++)
 801a744:	42a5      	cmp	r5, r4
 801a746:	d1f4      	bne.n	801a732 <SFXRhodesAlloc+0x96>
	tCycle_initToPool(&tremolo, &smallPool);
 801a748:	4921      	ldr	r1, [pc, #132]	; (801a7d0 <SFXRhodesAlloc+0x134>)
 801a74a:	4825      	ldr	r0, [pc, #148]	; (801a7e0 <SFXRhodesAlloc+0x144>)
 801a74c:	f00a fcb8 	bl	80250c0 <tCycle_initToPool>
	tCycle_setFreq(&tremolo, 3.0f);
 801a750:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 801a754:	4822      	ldr	r0, [pc, #136]	; (801a7e0 <SFXRhodesAlloc+0x144>)
 801a756:	f00a fcc5 	bl	80250e4 <tCycle_setFreq>
	tSimplePoly_setNumVoices(&poly, NUM_VOC_VOICES);
 801a75a:	2108      	movs	r1, #8
 801a75c:	4821      	ldr	r0, [pc, #132]	; (801a7e4 <SFXRhodesAlloc+0x148>)
 801a75e:	f00a fc6f 	bl	8025040 <tSimplePoly_setNumVoices>
	setLED_A(numVoices == 1);
 801a762:	4b21      	ldr	r3, [pc, #132]	; (801a7e8 <SFXRhodesAlloc+0x14c>)
 801a764:	7818      	ldrb	r0, [r3, #0]
 801a766:	f1a0 0001 	sub.w	r0, r0, #1
 801a76a:	fab0 f080 	clz	r0, r0
 801a76e:	0940      	lsrs	r0, r0, #5
 801a770:	f7f9 faa2 	bl	8013cb8 <setLED_A>
	setLED_C(tremoloStereo == 1);
 801a774:	4b1d      	ldr	r3, [pc, #116]	; (801a7ec <SFXRhodesAlloc+0x150>)
 801a776:	7818      	ldrb	r0, [r3, #0]
 801a778:	f1a0 0001 	sub.w	r0, r0, #1
 801a77c:	fab0 f080 	clz	r0, r0
 801a780:	0940      	lsrs	r0, r0, #5
 801a782:	f7f9 fab5 	bl	8013cf0 <setLED_C>
	OLEDclearLine(SecondLine);
 801a786:	2001      	movs	r0, #1
 801a788:	f7f9 fcbe 	bl	8014108 <OLEDclearLine>
	OLEDwriteString(soundNames[Rsound], 6, 0, SecondLine);
 801a78c:	4918      	ldr	r1, [pc, #96]	; (801a7f0 <SFXRhodesAlloc+0x154>)
 801a78e:	2301      	movs	r3, #1
 801a790:	2200      	movs	r2, #0
 801a792:	6808      	ldr	r0, [r1, #0]
 801a794:	2106      	movs	r1, #6
 801a796:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 801a79a:	f7f9 fcc9 	bl	8014130 <OLEDwriteString>
	leaf.clearOnAllocation = 0;
 801a79e:	2300      	movs	r3, #0
 801a7a0:	4a04      	ldr	r2, [pc, #16]	; (801a7b4 <SFXRhodesAlloc+0x118>)
 801a7a2:	6153      	str	r3, [r2, #20]
}
 801a7a4:	ecbd 8b04 	vpop	{d8-d9}
 801a7a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7ac:	0802b2bc 	.word	0x0802b2bc
 801a7b0:	0802b2c4 	.word	0x0802b2c4
 801a7b4:	200194a0 	.word	0x200194a0
 801a7b8:	0802b2d4 	.word	0x0802b2d4
 801a7bc:	0802b2dc 	.word	0x0802b2dc
 801a7c0:	42c80000 	.word	0x42c80000
 801a7c4:	0802b2cc 	.word	0x0802b2cc
 801a7c8:	447a0000 	.word	0x447a0000
 801a7cc:	3f7ffeb0 	.word	0x3f7ffeb0
 801a7d0:	20014b2c 	.word	0x20014b2c
 801a7d4:	20017970 	.word	0x20017970
 801a7d8:	20016430 	.word	0x20016430
 801a7dc:	3c23d70a 	.word	0x3c23d70a
 801a7e0:	200177a0 	.word	0x200177a0
 801a7e4:	20017554 	.word	0x20017554
 801a7e8:	20000250 	.word	0x20000250
 801a7ec:	2000060c 	.word	0x2000060c
 801a7f0:	20000510 	.word	0x20000510
 801a7f4:	20017520 	.word	0x20017520
 801a7f8:	20016e6c 	.word	0x20016e6c
 801a7fc:	2001755c 	.word	0x2001755c

0801a800 <SFXRhodesFrame>:
{
 801a800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 801a804:	4ce0      	ldr	r4, [pc, #896]	; (801ab88 <SFXRhodesFrame+0x388>)
{
 801a806:	ed2d 8b04 	vpush	{d8-d9}
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 801a80a:	7d23      	ldrb	r3, [r4, #20]
{
 801a80c:	b083      	sub	sp, #12
	if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 801a80e:	2b01      	cmp	r3, #1
 801a810:	f000 846d 	beq.w	801b0ee <SFXRhodesFrame+0x8ee>
 801a814:	4bdd      	ldr	r3, [pc, #884]	; (801ab8c <SFXRhodesFrame+0x38c>)
 801a816:	9301      	str	r3, [sp, #4]
	if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 801a818:	7e23      	ldrb	r3, [r4, #24]
 801a81a:	2b01      	cmp	r3, #1
 801a81c:	d10e      	bne.n	801a83c <SFXRhodesFrame+0x3c>
		Rsound = (Rsound + 1 ) % 5; // switch to another rhodes preset sound
 801a81e:	48dc      	ldr	r0, [pc, #880]	; (801ab90 <SFXRhodesFrame+0x390>)
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 801a820:	2100      	movs	r1, #0
		Rsound = (Rsound + 1 ) % 5; // switch to another rhodes preset sound
 801a822:	4adc      	ldr	r2, [pc, #880]	; (801ab94 <SFXRhodesFrame+0x394>)
 801a824:	6803      	ldr	r3, [r0, #0]
		buttonActionsSFX[ButtonB][ActionPress] = 0;
 801a826:	7621      	strb	r1, [r4, #24]
		Rsound = (Rsound + 1 ) % 5; // switch to another rhodes preset sound
 801a828:	3301      	adds	r3, #1
 801a82a:	fb82 2103 	smull	r2, r1, r2, r3
 801a82e:	17da      	asrs	r2, r3, #31
 801a830:	ebc2 0261 	rsb	r2, r2, r1, asr #1
 801a834:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a838:	1a9b      	subs	r3, r3, r2
 801a83a:	6003      	str	r3, [r0, #0]
	if (buttonActionsSFX[ButtonC][ActionPress] == 1)
 801a83c:	7f23      	ldrb	r3, [r4, #28]
 801a83e:	2b01      	cmp	r3, #1
 801a840:	f000 846c 	beq.w	801b11c <SFXRhodesFrame+0x91c>
	displayValues[0] = presetKnobValues[Rhodes][0] * 4.0f; // brightness
 801a844:	4dd4      	ldr	r5, [pc, #848]	; (801ab98 <SFXRhodesFrame+0x398>)
 801a846:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
	displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a84a:	4bd4      	ldr	r3, [pc, #848]	; (801ab9c <SFXRhodesFrame+0x39c>)
	displayValues[2] = presetKnobValues[Rhodes][2] * 10.0f; //tremelo rate
 801a84c:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
	displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a850:	ed95 6a08 	vldr	s12, [r5, #32]
	displayValues[0] = presetKnobValues[Rhodes][0] * 4.0f; // brightness
 801a854:	4628      	mov	r0, r5
	displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a856:	edd3 6a00 	vldr	s13, [r3]
	FM_indices[4][5] = displayValues[21] = LEAF_clip(0.0f, ((presetKnobValues[Rhodes][21] * 1000.0f) - 10.0f), 1000.0f); // feedback
 801a85a:	eefa 0a04 	vmov.f32	s1, #164	; 0xc1200000 -10.0
	displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a85e:	ed95 7a05 	vldr	s14, [r5, #20]
	displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a862:	edd5 7a06 	vldr	s15, [r5, #24]
	displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a866:	ee26 7a87 	vmul.f32	s14, s13, s14
 801a86a:	49cd      	ldr	r1, [pc, #820]	; (801aba0 <SFXRhodesFrame+0x3a0>)
	displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a86c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	displayValues[0] = presetKnobValues[Rhodes][0] * 4.0f; // brightness
 801a870:	ecf0 3a01 	vldmia	r0!, {s7}
	displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a874:	ee66 6a86 	vmul.f32	s13, s13, s12
	displayValues[3] = presetKnobValues[Rhodes][3] * 1.3f; //drive
 801a878:	edd5 4a03 	vldr	s9, [r5, #12]
	displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a87c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	FM_indices[4][0] = displayValues[10] = presetKnobValues[Rhodes][10] * 1000.0f;
 801a880:	ed9f 1ac8 	vldr	s2, [pc, #800]	; 801aba4 <SFXRhodesFrame+0x3a4>
	displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a888:	eddf 2ac7 	vldr	s5, [pc, #796]	; 801aba8 <SFXRhodesFrame+0x3a8>
	displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a88c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
	FM_indices[4][0] = displayValues[10] = presetKnobValues[Rhodes][10] * 1000.0f;
 801a890:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
	displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a894:	ee17 2a10 	vmov	r2, s14
	displayValues[0] = presetKnobValues[Rhodes][0] * 4.0f; // brightness
 801a898:	ee63 3aa5 	vmul.f32	s7, s7, s11
	displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a89c:	ee17 3a90 	vmov	r3, s15
	displayValues[3] = presetKnobValues[Rhodes][3] * 1.3f; //drive
 801a8a0:	eddf 7ac2 	vldr	s15, [pc, #776]	; 801abac <SFXRhodesFrame+0x3ac>
	displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a8a4:	ee16 4a90 	vmov	r4, s13
	displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a8a8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a8ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	displayValues[3] = presetKnobValues[Rhodes][3] * 1.3f; //drive
 801a8b0:	ee64 4aa7 	vmul.f32	s9, s9, s15
	displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a8b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
	displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a8b8:	ed92 3a00 	vldr	s6, [r2]
	displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a8bc:	ed93 5a00 	vldr	s10, [r3]
	FM_indices[4][0] = displayValues[10] = presetKnobValues[Rhodes][10] * 1000.0f;
 801a8c0:	ee66 6a01 	vmul.f32	s13, s12, s2
	displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a8c4:	edd1 5a00 	vldr	s11, [r1]
	displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a8c8:	ee23 3a22 	vmul.f32	s6, s6, s5
	displayValues[2] = presetKnobValues[Rhodes][2] * 10.0f; //tremelo rate
 801a8cc:	ed95 4a02 	vldr	s8, [r5, #8]
	displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a8d0:	ee25 5a22 	vmul.f32	s10, s10, s5
	FM_indices[4][1] = displayValues[11] = presetKnobValues[Rhodes][11] * 1000.0f;
 801a8d4:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
	displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a8d8:	ee65 5aa2 	vmul.f32	s11, s11, s5
	FM_indices[4][2] = displayValues[12] = presetKnobValues[Rhodes][12] * 1000.0f;
 801a8dc:	edd5 7a0c 	vldr	s15, [r5, #48]	; 0x30
	displayValues[2] = presetKnobValues[Rhodes][2] * 10.0f; //tremelo rate
 801a8e0:	ee24 4a02 	vmul.f32	s8, s8, s4
	FM_indices[4][1] = displayValues[11] = presetKnobValues[Rhodes][11] * 1000.0f;
 801a8e4:	ee27 7a01 	vmul.f32	s14, s14, s2
	displayValues[0] = presetKnobValues[Rhodes][0] * 4.0f; // brightness
 801a8e8:	4cb1      	ldr	r4, [pc, #708]	; (801abb0 <SFXRhodesFrame+0x3b0>)
	FM_indices[4][2] = displayValues[12] = presetKnobValues[Rhodes][12] * 1000.0f;
 801a8ea:	ee67 7a81 	vmul.f32	s15, s15, s2
	FM_indices[4][0] = displayValues[10] = presetKnobValues[Rhodes][10] * 1000.0f;
 801a8ee:	4eb1      	ldr	r6, [pc, #708]	; (801abb4 <SFXRhodesFrame+0x3b4>)
	displayValues[9] = presetKnobValues[Rhodes][9];
 801a8f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	displayValues[1] = presetKnobValues[Rhodes][1]; // tremelo amount
 801a8f2:	6800      	ldr	r0, [r0, #0]
	displayValues[4] = presetKnobValues[Rhodes][4]; //pan spread
 801a8f4:	6929      	ldr	r1, [r5, #16]
	displayValues[7] = presetKnobValues[Rhodes][7];
 801a8f6:	69ea      	ldr	r2, [r5, #28]
	displayValues[2] = presetKnobValues[Rhodes][2] * 10.0f; //tremelo rate
 801a8f8:	ed84 4a02 	vstr	s8, [r4, #8]
	displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a8fc:	edc4 5a08 	vstr	s11, [r4, #32]
	displayValues[9] = presetKnobValues[Rhodes][9];
 801a900:	6263      	str	r3, [r4, #36]	; 0x24
	displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a902:	ed84 3a05 	vstr	s6, [r4, #20]
	displayValues[1] = presetKnobValues[Rhodes][1]; // tremelo amount
 801a906:	6060      	str	r0, [r4, #4]
	displayValues[0] = presetKnobValues[Rhodes][0] * 4.0f; // brightness
 801a908:	edc4 3a00 	vstr	s7, [r4]
	displayValues[3] = presetKnobValues[Rhodes][3] * 1.3f; //drive
 801a90c:	edc4 4a03 	vstr	s9, [r4, #12]
	displayValues[4] = presetKnobValues[Rhodes][4]; //pan spread
 801a910:	6121      	str	r1, [r4, #16]
	displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a912:	ed84 5a06 	vstr	s10, [r4, #24]
	displayValues[7] = presetKnobValues[Rhodes][7];
 801a916:	61e2      	str	r2, [r4, #28]
	FM_indices[4][0] = displayValues[10] = presetKnobValues[Rhodes][10] * 1000.0f;
 801a918:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
 801a91c:	edc6 6a18 	vstr	s13, [r6, #96]	; 0x60
	FM_indices[4][1] = displayValues[11] = presetKnobValues[Rhodes][11] * 1000.0f;
 801a920:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 801a924:	ed86 7a19 	vstr	s14, [r6, #100]	; 0x64
	FM_indices[4][2] = displayValues[12] = presetKnobValues[Rhodes][12] * 1000.0f;
 801a928:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
 801a92c:	edc6 7a1a 	vstr	s15, [r6, #104]	; 0x68
	FM_indices[4][3] = displayValues[13] = presetKnobValues[Rhodes][13] * 1000.0f;
 801a930:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
	FM_indices[4][4] = displayValues[14] = presetKnobValues[Rhodes][14] * 1000.0f;
 801a934:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
	FM_indices[4][3] = displayValues[13] = presetKnobValues[Rhodes][13] * 1000.0f;
 801a938:	ee27 7a01 	vmul.f32	s14, s14, s2
	FM_indices[4][5] = displayValues[21] = LEAF_clip(0.0f, ((presetKnobValues[Rhodes][21] * 1000.0f) - 10.0f), 1000.0f); // feedback
 801a93c:	edd5 6a15 	vldr	s13, [r5, #84]	; 0x54
	FM_indices[4][4] = displayValues[14] = presetKnobValues[Rhodes][14] * 1000.0f;
 801a940:	ee67 7a81 	vmul.f32	s15, s15, s2
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a944:	f8df 8294 	ldr.w	r8, [pc, #660]	; 801abdc <SFXRhodesFrame+0x3dc>
	FM_indices[4][5] = displayValues[21] = LEAF_clip(0.0f, ((presetKnobValues[Rhodes][21] * 1000.0f) - 10.0f), 1000.0f); // feedback
 801a948:	eee6 0a81 	vfma.f32	s1, s13, s2
 801a94c:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 801abb8 <SFXRhodesFrame+0x3b8>
	FM_indices[4][3] = displayValues[13] = presetKnobValues[Rhodes][13] * 1000.0f;
 801a950:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801a954:	ed86 7a1b 	vstr	s14, [r6, #108]	; 0x6c
	FM_indices[4][4] = displayValues[14] = presetKnobValues[Rhodes][14] * 1000.0f;
 801a958:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801a95c:	edc6 7a1c 	vstr	s15, [r6, #112]	; 0x70
	FM_indices[4][5] = displayValues[21] = LEAF_clip(0.0f, ((presetKnobValues[Rhodes][21] * 1000.0f) - 10.0f), 1000.0f); // feedback
 801a960:	f009 fd0e 	bl	8024380 <LEAF_clip>
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a964:	ed95 4a0f 	vldr	s8, [r5, #60]	; 0x3c
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a968:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a96c:	edd8 6a0f 	vldr	s13, [r8, #60]	; 0x3c
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a970:	4b92      	ldr	r3, [pc, #584]	; (801abbc <SFXRhodesFrame+0x3bc>)
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a972:	eef4 6a44 	vcmp.f32	s13, s8
	FM_indices[4][5] = displayValues[21] = LEAF_clip(0.0f, ((presetKnobValues[Rhodes][21] * 1000.0f) - 10.0f), 1000.0f); // feedback
 801a976:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a97a:	ed93 7a00 	vldr	s14, [r3]
	FM_indices[4][5] = displayValues[21] = LEAF_clip(0.0f, ((presetKnobValues[Rhodes][21] * 1000.0f) - 10.0f), 1000.0f); // feedback
 801a97e:	ed86 0a1d 	vstr	s0, [r6, #116]	; 0x74
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a986:	ee75 7ac7 	vsub.f32	s15, s11, s14
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a98a:	d01a      	beq.n	801a9c2 <SFXRhodesFrame+0x1c2>
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a98c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801a990:	eeb2 6a0c 	vmov.f32	s12, #44	; 0x41600000  14.0
 801a994:	ee74 6a66 	vsub.f32	s13, s8, s13
 801a998:	ee66 6a86 	vmul.f32	s13, s13, s12
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a99c:	ee27 6aa6 	vmul.f32	s12, s15, s13
			float snapRate = roundf(rawRate);
 801a9a0:	fef8 6a66 	vrinta.f32	s13, s13
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a9a4:	eea7 6a26 	vfma.f32	s12, s14, s13
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a9a8:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801a9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9b0:	f100 83e1 	bmi.w	801b176 <SFXRhodesFrame+0x976>
			else rate += 1.0f;
 801a9b4:	ee36 6a25 	vadd.f32	s12, s12, s11
			FM_freqRatios[4][k-15] = rate;
 801a9b8:	4a81      	ldr	r2, [pc, #516]	; (801abc0 <SFXRhodesFrame+0x3c0>)
			displayValues[k] = rate;
 801a9ba:	ed84 6a0f 	vstr	s12, [r4, #60]	; 0x3c
			FM_freqRatios[4][k-15] = rate;
 801a9be:	ed82 6a18 	vstr	s12, [r2, #96]	; 0x60
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a9c2:	4a80      	ldr	r2, [pc, #512]	; (801abc4 <SFXRhodesFrame+0x3c4>)
 801a9c4:	edd8 6a10 	vldr	s13, [r8, #64]	; 0x40
 801a9c8:	edd2 4a00 	vldr	s9, [r2]
		prevKnobValues[k] = presetKnobValues[Rhodes][k];
 801a9cc:	ed88 4a0f 	vstr	s8, [r8, #60]	; 0x3c
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a9d0:	eef4 6a64 	vcmp.f32	s13, s9
 801a9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9d8:	d01e      	beq.n	801aa18 <SFXRhodesFrame+0x218>
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a9da:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801a9de:	eeb2 6a0c 	vmov.f32	s12, #44	; 0x41600000  14.0
 801a9e2:	ee74 6ae6 	vsub.f32	s13, s9, s13
 801a9e6:	ee66 6a86 	vmul.f32	s13, s13, s12
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a9ea:	ee27 6aa6 	vmul.f32	s12, s15, s13
			float snapRate = roundf(rawRate);
 801a9ee:	fef8 6a66 	vrinta.f32	s13, s13
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a9f2:	eea7 6a26 	vfma.f32	s12, s14, s13
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a9f6:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a9fa:	eef0 6a46 	vmov.f32	s13, s12
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa02:	f100 83bf 	bmi.w	801b184 <SFXRhodesFrame+0x984>
			else rate += 1.0f;
 801aa06:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801aa0a:	ee36 6a86 	vadd.f32	s12, s13, s12
			FM_freqRatios[4][k-15] = rate;
 801aa0e:	4a6c      	ldr	r2, [pc, #432]	; (801abc0 <SFXRhodesFrame+0x3c0>)
			displayValues[k] = rate;
 801aa10:	ed84 6a10 	vstr	s12, [r4, #64]	; 0x40
			FM_freqRatios[4][k-15] = rate;
 801aa14:	ed82 6a19 	vstr	s12, [r2, #100]	; 0x64
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801aa18:	4a6b      	ldr	r2, [pc, #428]	; (801abc8 <SFXRhodesFrame+0x3c8>)
 801aa1a:	edd8 6a11 	vldr	s13, [r8, #68]	; 0x44
 801aa1e:	ed92 5a00 	vldr	s10, [r2]
		prevKnobValues[k] = presetKnobValues[Rhodes][k];
 801aa22:	edc8 4a10 	vstr	s9, [r8, #64]	; 0x40
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801aa26:	eef4 6a45 	vcmp.f32	s13, s10
 801aa2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa2e:	d01e      	beq.n	801aa6e <SFXRhodesFrame+0x26e>
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801aa30:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801aa34:	eeb2 6a0c 	vmov.f32	s12, #44	; 0x41600000  14.0
 801aa38:	ee75 6a66 	vsub.f32	s13, s10, s13
 801aa3c:	ee66 6a86 	vmul.f32	s13, s13, s12
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801aa40:	ee27 6aa6 	vmul.f32	s12, s15, s13
			float snapRate = roundf(rawRate);
 801aa44:	fef8 6a66 	vrinta.f32	s13, s13
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801aa48:	eea7 6a26 	vfma.f32	s12, s14, s13
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801aa4c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801aa50:	eef0 6a46 	vmov.f32	s13, s12
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801aa54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa58:	f100 839d 	bmi.w	801b196 <SFXRhodesFrame+0x996>
			else rate += 1.0f;
 801aa5c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801aa60:	ee36 6a86 	vadd.f32	s12, s13, s12
			FM_freqRatios[4][k-15] = rate;
 801aa64:	4a56      	ldr	r2, [pc, #344]	; (801abc0 <SFXRhodesFrame+0x3c0>)
			displayValues[k] = rate;
 801aa66:	ed84 6a11 	vstr	s12, [r4, #68]	; 0x44
			FM_freqRatios[4][k-15] = rate;
 801aa6a:	ed82 6a1a 	vstr	s12, [r2, #104]	; 0x68
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801aa6e:	4a57      	ldr	r2, [pc, #348]	; (801abcc <SFXRhodesFrame+0x3cc>)
 801aa70:	edd8 6a12 	vldr	s13, [r8, #72]	; 0x48
 801aa74:	edd2 5a00 	vldr	s11, [r2]
		prevKnobValues[k] = presetKnobValues[Rhodes][k];
 801aa78:	ed88 5a11 	vstr	s10, [r8, #68]	; 0x44
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801aa7c:	eef4 6a65 	vcmp.f32	s13, s11
 801aa80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa84:	d01e      	beq.n	801aac4 <SFXRhodesFrame+0x2c4>
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801aa86:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801aa8a:	eeb2 6a0c 	vmov.f32	s12, #44	; 0x41600000  14.0
 801aa8e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 801aa92:	ee66 6a86 	vmul.f32	s13, s13, s12
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801aa96:	ee27 6aa6 	vmul.f32	s12, s15, s13
			float snapRate = roundf(rawRate);
 801aa9a:	fef8 6a66 	vrinta.f32	s13, s13
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801aa9e:	eea7 6a26 	vfma.f32	s12, s14, s13
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801aaa2:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801aaa6:	eef0 6a46 	vmov.f32	s13, s12
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801aaaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aaae:	f100 8342 	bmi.w	801b136 <SFXRhodesFrame+0x936>
			else rate += 1.0f;
 801aab2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801aab6:	ee36 6a86 	vadd.f32	s12, s13, s12
			FM_freqRatios[4][k-15] = rate;
 801aaba:	4a41      	ldr	r2, [pc, #260]	; (801abc0 <SFXRhodesFrame+0x3c0>)
			displayValues[k] = rate;
 801aabc:	ed84 6a12 	vstr	s12, [r4, #72]	; 0x48
			FM_freqRatios[4][k-15] = rate;
 801aac0:	ed82 6a1b 	vstr	s12, [r2, #108]	; 0x6c
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801aac4:	4a42      	ldr	r2, [pc, #264]	; (801abd0 <SFXRhodesFrame+0x3d0>)
 801aac6:	edd8 6a13 	vldr	s13, [r8, #76]	; 0x4c
 801aaca:	ed92 6a00 	vldr	s12, [r2]
		prevKnobValues[k] = presetKnobValues[Rhodes][k];
 801aace:	edc8 5a12 	vstr	s11, [r8, #72]	; 0x48
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801aad2:	eef4 6a46 	vcmp.f32	s13, s12
 801aad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aada:	d01e      	beq.n	801ab1a <SFXRhodesFrame+0x31a>
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801aadc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801aae0:	eef2 3a0c 	vmov.f32	s7, #44	; 0x41600000  14.0
 801aae4:	ee76 6a66 	vsub.f32	s13, s12, s13
 801aae8:	ee66 6aa3 	vmul.f32	s13, s13, s7
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801aaec:	ee67 3aa6 	vmul.f32	s7, s15, s13
			float snapRate = roundf(rawRate);
 801aaf0:	fef8 6a66 	vrinta.f32	s13, s13
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801aaf4:	eee7 3a26 	vfma.f32	s7, s14, s13
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801aaf8:	eef5 3ac0 	vcmpe.f32	s7, #0.0
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801aafc:	eef0 6a63 	vmov.f32	s13, s7
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801ab00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab04:	f100 8320 	bmi.w	801b148 <SFXRhodesFrame+0x948>
			else rate += 1.0f;
 801ab08:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 801ab0c:	ee76 3aa3 	vadd.f32	s7, s13, s7
			FM_freqRatios[4][k-15] = rate;
 801ab10:	4a2b      	ldr	r2, [pc, #172]	; (801abc0 <SFXRhodesFrame+0x3c0>)
			displayValues[k] = rate;
 801ab12:	edc4 3a13 	vstr	s7, [r4, #76]	; 0x4c
			FM_freqRatios[4][k-15] = rate;
 801ab16:	edc2 3a1c 	vstr	s7, [r2, #112]	; 0x70
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801ab1a:	4a2e      	ldr	r2, [pc, #184]	; (801abd4 <SFXRhodesFrame+0x3d4>)
 801ab1c:	edd8 3a14 	vldr	s7, [r8, #80]	; 0x50
 801ab20:	edd2 6a00 	vldr	s13, [r2]
		prevKnobValues[k] = presetKnobValues[Rhodes][k];
 801ab24:	ed88 6a13 	vstr	s12, [r8, #76]	; 0x4c
		if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801ab28:	eef4 6a63 	vcmp.f32	s13, s7
 801ab2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab30:	d01c      	beq.n	801ab6c <SFXRhodesFrame+0x36c>
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801ab32:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 801ab36:	eeb2 3a0c 	vmov.f32	s6, #44	; 0x41600000  14.0
 801ab3a:	ee76 3ae3 	vsub.f32	s7, s13, s7
 801ab3e:	ee63 3a83 	vmul.f32	s7, s7, s6
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801ab42:	ee67 7aa3 	vmul.f32	s15, s15, s7
			float snapRate = roundf(rawRate);
 801ab46:	fef8 3a63 	vrinta.f32	s7, s7
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801ab4a:	eee7 7a23 	vfma.f32	s15, s14, s7
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801ab4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ab52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ab56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab5a:	f100 82fe 	bmi.w	801b15a <SFXRhodesFrame+0x95a>
			else rate += 1.0f;
 801ab5e:	ee77 7a87 	vadd.f32	s15, s15, s14
			FM_freqRatios[4][k-15] = rate;
 801ab62:	4a17      	ldr	r2, [pc, #92]	; (801abc0 <SFXRhodesFrame+0x3c0>)
			displayValues[k] = rate;
 801ab64:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
			FM_freqRatios[4][k-15] = rate;
 801ab68:	edc2 7a1d 	vstr	s15, [r2, #116]	; 0x74
	if (presetKnobValues[Rhodes][22] != prevKnobValues[22])
 801ab6c:	4a1a      	ldr	r2, [pc, #104]	; (801abd8 <SFXRhodesFrame+0x3d8>)
 801ab6e:	edd8 7a16 	vldr	s15, [r8, #88]	; 0x58
 801ab72:	ed92 7a00 	vldr	s14, [r2]
		prevKnobValues[k] = presetKnobValues[Rhodes][k];
 801ab76:	edc8 6a14 	vstr	s13, [r8, #80]	; 0x50
	if (presetKnobValues[Rhodes][22] != prevKnobValues[22])
 801ab7a:	eeb4 7a67 	vcmp.f32	s14, s15
 801ab7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab82:	f000 80e4 	beq.w	801ad4e <SFXRhodesFrame+0x54e>
 801ab86:	e02b      	b.n	801abe0 <SFXRhodesFrame+0x3e0>
 801ab88:	20018714 	.word	0x20018714
 801ab8c:	20000250 	.word	0x20000250
 801ab90:	20000510 	.word	0x20000510
 801ab94:	66666667 	.word	0x66666667
 801ab98:	20016db4 	.word	0x20016db4
 801ab9c:	20000238 	.word	0x20000238
 801aba0:	2001707c 	.word	0x2001707c
 801aba4:	447a0000 	.word	0x447a0000
 801aba8:	46000000 	.word	0x46000000
 801abac:	3fa66666 	.word	0x3fa66666
 801abb0:	200187c4 	.word	0x200187c4
 801abb4:	200000b4 	.word	0x200000b4
 801abb8:	00000000 	.word	0x00000000
 801abbc:	20000258 	.word	0x20000258
 801abc0:	2000003c 	.word	0x2000003c
 801abc4:	20016df4 	.word	0x20016df4
 801abc8:	20016df8 	.word	0x20016df8
 801abcc:	20016dfc 	.word	0x20016dfc
 801abd0:	20016e00 	.word	0x20016e00
 801abd4:	20016e04 	.word	0x20016e04
 801abd8:	20016e0c 	.word	0x20016e0c
 801abdc:	20017708 	.word	0x20017708
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801abe0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		overtoneSnap = displayValues[22] = presetKnobValues[Rhodes][22];
 801abe4:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801abe8:	eef2 3a0c 	vmov.f32	s7, #44	; 0x41600000  14.0
		overtoneSnap = displayValues[22] = presetKnobValues[Rhodes][22];
 801abec:	ed83 7a00 	vstr	s14, [r3]
 801abf0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801abf4:	ee34 4a67 	vsub.f32	s8, s8, s15
 801abf8:	ee73 7a47 	vsub.f32	s15, s6, s14
 801abfc:	ee24 4a23 	vmul.f32	s8, s8, s7
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801ac00:	ee64 3a27 	vmul.f32	s7, s8, s15
			float snapRate = roundf(rawRate);
 801ac04:	feb8 4a44 	vrinta.f32	s8, s8
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801ac08:	eee7 3a04 	vfma.f32	s7, s14, s8
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801ac0c:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 801ac10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac14:	f100 82a8 	bmi.w	801b168 <SFXRhodesFrame+0x968>
			else rate += 1.0f;
 801ac18:	ee33 4a83 	vadd.f32	s8, s7, s6
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801ac1c:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
			FM_freqRatios[4][k-15] = rate;
 801ac20:	4bc7      	ldr	r3, [pc, #796]	; (801af40 <SFXRhodesFrame+0x740>)
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801ac22:	eef2 3a0c 	vmov.f32	s7, #44	; 0x41600000  14.0
			displayValues[k] = rate;
 801ac26:	ed84 4a0f 	vstr	s8, [r4, #60]	; 0x3c
			FM_freqRatios[4][k-15] = rate;
 801ac2a:	ed83 4a18 	vstr	s8, [r3, #96]	; 0x60
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801ac2e:	ee74 4ac3 	vsub.f32	s9, s9, s6
 801ac32:	ee64 4aa3 	vmul.f32	s9, s9, s7
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801ac36:	ee24 4aa7 	vmul.f32	s8, s9, s15
			float snapRate = roundf(rawRate);
 801ac3a:	fef8 4a64 	vrinta.f32	s9, s9
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801ac3e:	eea7 4a24 	vfma.f32	s8, s14, s9
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801ac42:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801ac46:	eef0 4a44 	vmov.f32	s9, s8
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801ac4a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 801ac4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac52:	f100 82c5 	bmi.w	801b1e0 <SFXRhodesFrame+0x9e0>
			else rate += 1.0f;
 801ac56:	ee74 4a84 	vadd.f32	s9, s9, s8
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801ac5a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
			displayValues[k] = rate;
 801ac5e:	edc4 4a10 	vstr	s9, [r4, #64]	; 0x40
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801ac62:	eeb2 4a0c 	vmov.f32	s8, #44	; 0x41600000  14.0
			FM_freqRatios[4][k-15] = rate;
 801ac66:	edc3 4a19 	vstr	s9, [r3, #100]	; 0x64
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801ac6a:	ee35 5a63 	vsub.f32	s10, s10, s7
 801ac6e:	ee25 5a04 	vmul.f32	s10, s10, s8
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801ac72:	ee65 4a27 	vmul.f32	s9, s10, s15
			float snapRate = roundf(rawRate);
 801ac76:	feb8 5a45 	vrinta.f32	s10, s10
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801ac7a:	eee7 4a05 	vfma.f32	s9, s14, s10
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801ac7e:	eef5 4ac0 	vcmpe.f32	s9, #0.0
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801ac82:	eeb0 5a64 	vmov.f32	s10, s9
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801ac86:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 801ac8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac8e:	f100 82a0 	bmi.w	801b1d2 <SFXRhodesFrame+0x9d2>
			else rate += 1.0f;
 801ac92:	ee35 5a24 	vadd.f32	s10, s10, s9
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801ac96:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
			displayValues[k] = rate;
 801ac9a:	ed84 5a11 	vstr	s10, [r4, #68]	; 0x44
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801ac9e:	eef2 4a0c 	vmov.f32	s9, #44	; 0x41600000  14.0
			FM_freqRatios[4][k-15] = rate;
 801aca2:	ed83 5a1a 	vstr	s10, [r3, #104]	; 0x68
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801aca6:	ee75 5ac4 	vsub.f32	s11, s11, s8
 801acaa:	ee65 5aa4 	vmul.f32	s11, s11, s9
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801acae:	ee25 5aa7 	vmul.f32	s10, s11, s15
			float snapRate = roundf(rawRate);
 801acb2:	fef8 5a65 	vrinta.f32	s11, s11
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801acb6:	eea7 5a25 	vfma.f32	s10, s14, s11
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801acba:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801acbe:	eef0 5a45 	vmov.f32	s11, s10
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801acc2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801acc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acca:	f100 827b 	bmi.w	801b1c4 <SFXRhodesFrame+0x9c4>
			else rate += 1.0f;
 801acce:	ee75 5a85 	vadd.f32	s11, s11, s10
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801acd2:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
			displayValues[k] = rate;
 801acd6:	edc4 5a12 	vstr	s11, [r4, #72]	; 0x48
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801acda:	eeb2 5a0c 	vmov.f32	s10, #44	; 0x41600000  14.0
			FM_freqRatios[4][k-15] = rate;
 801acde:	edc3 5a1b 	vstr	s11, [r3, #108]	; 0x6c
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801ace2:	ee36 6a64 	vsub.f32	s12, s12, s9
 801ace6:	ee26 6a05 	vmul.f32	s12, s12, s10
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801acea:	ee66 5a27 	vmul.f32	s11, s12, s15
			float snapRate = roundf(rawRate);
 801acee:	feb8 6a46 	vrinta.f32	s12, s12
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801acf2:	eee7 5a06 	vfma.f32	s11, s14, s12
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801acf6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801acfa:	eeb0 6a65 	vmov.f32	s12, s11
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801acfe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801ad02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad06:	f100 8256 	bmi.w	801b1b6 <SFXRhodesFrame+0x9b6>
			else rate += 1.0f;
 801ad0a:	ee36 6a25 	vadd.f32	s12, s12, s11
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801ad0e:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
			displayValues[k] = rate;
 801ad12:	ed84 6a13 	vstr	s12, [r4, #76]	; 0x4c
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801ad16:	eef2 5a0c 	vmov.f32	s11, #44	; 0x41600000  14.0
			FM_freqRatios[4][k-15] = rate;
 801ad1a:	ed83 6a1c 	vstr	s12, [r3, #112]	; 0x70
			float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801ad1e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801ad22:	ee66 6aa5 	vmul.f32	s13, s13, s11
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801ad26:	ee66 7aa7 	vmul.f32	s15, s13, s15
			float snapRate = roundf(rawRate);
 801ad2a:	fef8 6a66 	vrinta.f32	s13, s13
			float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801ad2e:	eee7 7a26 	vfma.f32	s15, s14, s13
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801ad32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ad36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ad3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad3e:	f100 8233 	bmi.w	801b1a8 <SFXRhodesFrame+0x9a8>
			else rate += 1.0f;
 801ad42:	ee77 7aa6 	vadd.f32	s15, s15, s13
			displayValues[k] = rate;
 801ad46:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
			FM_freqRatios[4][k-15] = rate;
 801ad4a:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	displayValues[23] = presetKnobValues[Rhodes][23];
 801ad4e:	4b7d      	ldr	r3, [pc, #500]	; (801af44 <SFXRhodesFrame+0x744>)
	prevKnobValues[22] = presetKnobValues[Rhodes][22];
 801ad50:	ed88 7a16 	vstr	s14, [r8, #88]	; 0x58
	displayValues[23] = presetKnobValues[Rhodes][23];
 801ad54:	edd3 7a00 	vldr	s15, [r3]
	if (prevDisplayValues[23] != displayValues[23])
 801ad58:	4b7b      	ldr	r3, [pc, #492]	; (801af48 <SFXRhodesFrame+0x748>)
	displayValues[23] = presetKnobValues[Rhodes][23];
 801ad5a:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
	if (prevDisplayValues[23] != displayValues[23])
 801ad5e:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 801ad62:	eef4 7a66 	vcmp.f32	s15, s13
 801ad66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad6a:	d03a      	beq.n	801ade2 <SFXRhodesFrame+0x5e2>
 801ad6c:	f8df 9210 	ldr.w	r9, [pc, #528]	; 801af80 <SFXRhodesFrame+0x780>
			randomDecays[i] = (1.0f - displayValues[23]) + (randomNumberDraw * displayValues[23]);
 801ad70:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
 801ad74:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801ad78:	ed9f 8a74 	vldr	s16, [pc, #464]	; 801af4c <SFXRhodesFrame+0x74c>
 801ad7c:	f109 0518 	add.w	r5, r9, #24
	if (prevDisplayValues[23] != displayValues[23])
 801ad80:	464e      	mov	r6, r9
			float randomNumberDraw = (randomNumber() * 2.0f) + 0.08f;
 801ad82:	f7f8 fd99 	bl	80138b8 <randomNumber>
			randomDecays[i] = (1.0f - displayValues[23]) + (randomNumberDraw * displayValues[23]);
 801ad86:	eeb0 7a48 	vmov.f32	s14, s16
 801ad8a:	eef0 6a68 	vmov.f32	s13, s17
 801ad8e:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 801ad92:	eea0 7a09 	vfma.f32	s14, s0, s18
 801ad96:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ad9a:	ece6 6a01 	vstmia	r6!, {s13}
		for (int i = 0; i < 6; i++)
 801ad9e:	42ae      	cmp	r6, r5
 801ada0:	d1ef      	bne.n	801ad82 <SFXRhodesFrame+0x582>
 801ada2:	4f6b      	ldr	r7, [pc, #428]	; (801af50 <SFXRhodesFrame+0x750>)
				tADSR4_setDecay(&FM_envs[i][j],(LEAF_clip(10.0f, displayValues[6] * randomDecays[j], 20000.0f))); //FM_decays[Rsound][j] * displayValues[6]);
 801ada4:	ed9f 8a6b 	vldr	s16, [pc, #428]	; 801af54 <SFXRhodesFrame+0x754>
 801ada8:	f107 0ac0 	add.w	sl, r7, #192	; 0xc0
	if (prevDisplayValues[23] != displayValues[23])
 801adac:	46bb      	mov	fp, r7
 801adae:	464d      	mov	r5, r9
				tADSR4_setDecay(&FM_envs[i][j],(LEAF_clip(10.0f, displayValues[6] * randomDecays[j], 20000.0f))); //FM_decays[Rsound][j] * displayValues[6]);
 801adb0:	ecf5 0a01 	vldmia	r5!, {s1}
 801adb4:	eeb0 1a48 	vmov.f32	s2, s16
 801adb8:	edd4 7a06 	vldr	s15, [r4, #24]
 801adbc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801adc0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801adc4:	f009 fadc 	bl	8024380 <LEAF_clip>
 801adc8:	4658      	mov	r0, fp
 801adca:	f007 fabd 	bl	8022348 <tADSR4_setDecay>
			for (int j = 0; j < 6; j++)
 801adce:	42b5      	cmp	r5, r6
 801add0:	f10b 0b04 	add.w	fp, fp, #4
 801add4:	d1ec      	bne.n	801adb0 <SFXRhodesFrame+0x5b0>
 801add6:	3718      	adds	r7, #24
		for (int i = 0; i < NUM_VOC_VOICES; i++)
 801add8:	4557      	cmp	r7, sl
 801adda:	d1e7      	bne.n	801adac <SFXRhodesFrame+0x5ac>
 801addc:	4b59      	ldr	r3, [pc, #356]	; (801af44 <SFXRhodesFrame+0x744>)
 801adde:	edd3 6a00 	vldr	s13, [r3]
	displayValues[24] = presetKnobValues[Rhodes][24];
 801ade2:	4b5d      	ldr	r3, [pc, #372]	; (801af58 <SFXRhodesFrame+0x758>)
	if (prevDisplayValues[24] != displayValues[24])
 801ade4:	4a58      	ldr	r2, [pc, #352]	; (801af48 <SFXRhodesFrame+0x748>)
	displayValues[24] = presetKnobValues[Rhodes][24];
 801ade6:	ed93 7a00 	vldr	s14, [r3]
	if (prevDisplayValues[24] != displayValues[24])
 801adea:	edd2 7a18 	vldr	s15, [r2, #96]	; 0x60
	prevKnobValues[23] = presetKnobValues[Rhodes][23];
 801adee:	edc8 6a17 	vstr	s13, [r8, #92]	; 0x5c
	if (prevDisplayValues[24] != displayValues[24])
 801adf2:	eeb4 7a67 	vcmp.f32	s14, s15
	displayValues[24] = presetKnobValues[Rhodes][24];
 801adf6:	ed84 7a18 	vstr	s14, [r4, #96]	; 0x60
	if (prevDisplayValues[24] != displayValues[24])
 801adfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adfe:	d023      	beq.n	801ae48 <SFXRhodesFrame+0x648>
 801ae00:	4d56      	ldr	r5, [pc, #344]	; (801af5c <SFXRhodesFrame+0x75c>)
			randomSustains[i] = (1.0f - displayValues[24]) + (randomNumberDraw * displayValues[24]);
 801ae02:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
 801ae06:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 801ae0a:	4e55      	ldr	r6, [pc, #340]	; (801af60 <SFXRhodesFrame+0x760>)
 801ae0c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801ae10:	f105 0718 	add.w	r7, r5, #24
			float randomNumberDraw = randomNumber() * 2.0f;
 801ae14:	f7f8 fd50 	bl	80138b8 <randomNumber>
			randomSustains[i] = (1.0f - displayValues[24]) + (randomNumberDraw * displayValues[24]);
 801ae18:	eeb0 7a68 	vmov.f32	s14, s17
 801ae1c:	eef0 6a48 	vmov.f32	s13, s16
 801ae20:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
			tExpSmooth_setDest(&susSmoothers[i], displayValues[7] * randomSustains[i]);
 801ae24:	4630      	mov	r0, r6
 801ae26:	3604      	adds	r6, #4
			randomSustains[i] = (1.0f - displayValues[24]) + (randomNumberDraw * displayValues[24]);
 801ae28:	eea0 7a09 	vfma.f32	s14, s0, s18
			tExpSmooth_setDest(&susSmoothers[i], displayValues[7] * randomSustains[i]);
 801ae2c:	ed94 0a07 	vldr	s0, [r4, #28]
			randomSustains[i] = (1.0f - displayValues[24]) + (randomNumberDraw * displayValues[24]);
 801ae30:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ae34:	ece5 6a01 	vstmia	r5!, {s13}
			tExpSmooth_setDest(&susSmoothers[i], displayValues[7] * randomSustains[i]);
 801ae38:	ee26 0a80 	vmul.f32	s0, s13, s0
 801ae3c:	f007 fe0c 	bl	8022a58 <tExpSmooth_setDest>
		for (int i = 0; i < 6; i++)
 801ae40:	42bd      	cmp	r5, r7
 801ae42:	d1e7      	bne.n	801ae14 <SFXRhodesFrame+0x614>
 801ae44:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
	prevDisplayValues[24] = displayValues[24];
 801ae48:	4b3f      	ldr	r3, [pc, #252]	; (801af48 <SFXRhodesFrame+0x748>)
 801ae4a:	f04f 0906 	mov.w	r9, #6
 801ae4e:	4e45      	ldr	r6, [pc, #276]	; (801af64 <SFXRhodesFrame+0x764>)
 801ae50:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 801ae54:	f103 0814 	add.w	r8, r3, #20
							tADSR4_setDecay(&FM_envs[i][j],(LEAF_clip(7.0f, displayValues[6] * randomDecays[j], 20000.0f)));
 801ae58:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 801af54 <SFXRhodesFrame+0x754>
 801ae5c:	4b42      	ldr	r3, [pc, #264]	; (801af68 <SFXRhodesFrame+0x768>)
 801ae5e:	9300      	str	r3, [sp, #0]
		if (prevDisplayValues[k] != displayValues[k])
 801ae60:	ecf3 7a01 	vldmia	r3!, {s15}
 801ae64:	ecb8 7a01 	vldmia	r8!, {s14}
 801ae68:	9300      	str	r3, [sp, #0]
 801ae6a:	eeb4 7a67 	vcmp.f32	s14, s15
 801ae6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae72:	d02d      	beq.n	801aed0 <SFXRhodesFrame+0x6d0>
			switch(k)
 801ae74:	f1a9 0307 	sub.w	r3, r9, #7
 801ae78:	2b03      	cmp	r3, #3
 801ae7a:	d805      	bhi.n	801ae88 <SFXRhodesFrame+0x688>
 801ae7c:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ae80:	00fd0113 	.word	0x00fd0113
 801ae84:	003100e8 	.word	0x003100e8
 801ae88:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801af50 <SFXRhodesFrame+0x750>
							uint64_t tempCount1 = DWT->CYCCNT;
 801ae8c:	4d37      	ldr	r5, [pc, #220]	; (801af6c <SFXRhodesFrame+0x76c>)
 801ae8e:	f10b 0718 	add.w	r7, fp, #24
							cycleCountVals[1][2] = 0;
 801ae92:	2200      	movs	r2, #0
 801ae94:	2300      	movs	r3, #0
							tADSR4_setAttack(&FM_envs[i][j], displayValues[5] );
 801ae96:	4658      	mov	r0, fp
 801ae98:	ed94 0a05 	vldr	s0, [r4, #20]
 801ae9c:	f10b 0b04 	add.w	fp, fp, #4
							cycleCountVals[1][2] = 0;
 801aea0:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
							uint64_t tempCount1 = DWT->CYCCNT;
 801aea4:	f8d5 a004 	ldr.w	sl, [r5, #4]
							tADSR4_setAttack(&FM_envs[i][j], displayValues[5] );
 801aea8:	f007 fa40 	bl	802232c <tADSR4_setAttack>
							uint64_t tempCount2 = DWT->CYCCNT;
 801aeac:	686a      	ldr	r2, [r5, #4]
							CycleCounterTrackMinAndMax(1);
 801aeae:	2001      	movs	r0, #1
							cycleCountVals[1][1] = tempCount2-tempCount1;
 801aeb0:	ebb2 020a 	subs.w	r2, r2, sl
 801aeb4:	eb62 0302 	sbc.w	r3, r2, r2
 801aeb8:	e9c6 2308 	strd	r2, r3, [r6, #32]
							CycleCounterTrackMinAndMax(1);
 801aebc:	f7f8 fe66 	bl	8013b8c <CycleCounterTrackMinAndMax>
						for (int j = 0; j < 6; j++)
 801aec0:	455f      	cmp	r7, fp
 801aec2:	d1e6      	bne.n	801ae92 <SFXRhodesFrame+0x692>
					for (int i = 0; i < NUM_VOC_VOICES; i++)
 801aec4:	4b2a      	ldr	r3, [pc, #168]	; (801af70 <SFXRhodesFrame+0x770>)
 801aec6:	429f      	cmp	r7, r3
 801aec8:	d1e1      	bne.n	801ae8e <SFXRhodesFrame+0x68e>
 801aeca:	9b00      	ldr	r3, [sp, #0]
 801aecc:	ed53 7a01 	vldr	s15, [r3, #-4]
	for (int k = 5; k < 10; k++)
 801aed0:	f1b9 0f0a 	cmp.w	r9, #10
		prevDisplayValues[k] = displayValues[k];
 801aed4:	ed48 7a01 	vstr	s15, [r8, #-4]
	for (int k = 5; k < 10; k++)
 801aed8:	d021      	beq.n	801af1e <SFXRhodesFrame+0x71e>
 801aeda:	f109 0901 	add.w	r9, r9, #1
 801aede:	9b00      	ldr	r3, [sp, #0]
 801aee0:	e7be      	b.n	801ae60 <SFXRhodesFrame+0x660>
 801aee2:	4d1b      	ldr	r5, [pc, #108]	; (801af50 <SFXRhodesFrame+0x750>)
							tADSR4_setLeakFactor(&FM_envs[i][j], ((1.0f - displayValues[9])  * 0.00004f) + 0.99996f);
 801aee4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801aee8:	eddf 8a22 	vldr	s17, [pc, #136]	; 801af74 <SFXRhodesFrame+0x774>
 801aeec:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
 801aef0:	ed9f 8a21 	vldr	s16, [pc, #132]	; 801af78 <SFXRhodesFrame+0x778>
 801aef4:	f105 0618 	add.w	r6, r5, #24
 801aef8:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 801aefc:	eeb0 0a48 	vmov.f32	s0, s16
 801af00:	4628      	mov	r0, r5
 801af02:	3504      	adds	r5, #4
 801af04:	ee79 7a67 	vsub.f32	s15, s18, s15
 801af08:	eea7 0aa8 	vfma.f32	s0, s15, s17
 801af0c:	f007 fa4e 	bl	80223ac <tADSR4_setLeakFactor>
						for (int j = 0; j < 6; j++)
 801af10:	42b5      	cmp	r5, r6
 801af12:	d1f1      	bne.n	801aef8 <SFXRhodesFrame+0x6f8>
					for (int i = 0; i < NUM_VOC_VOICES; i++)
 801af14:	42bd      	cmp	r5, r7
 801af16:	d1ed      	bne.n	801aef4 <SFXRhodesFrame+0x6f4>
		prevDisplayValues[k] = displayValues[k];
 801af18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801af1a:	4a0b      	ldr	r2, [pc, #44]	; (801af48 <SFXRhodesFrame+0x748>)
 801af1c:	6253      	str	r3, [r2, #36]	; 0x24
	for (int i = 0; i < numVoices; i++)
 801af1e:	9b01      	ldr	r3, [sp, #4]
 801af20:	781b      	ldrb	r3, [r3, #0]
 801af22:	2b00      	cmp	r3, #0
 801af24:	f000 808a 	beq.w	801b03c <SFXRhodesFrame+0x83c>
 801af28:	f8df b058 	ldr.w	fp, [pc, #88]	; 801af84 <SFXRhodesFrame+0x784>
 801af2c:	2500      	movs	r5, #0
 801af2e:	4f13      	ldr	r7, [pc, #76]	; (801af7c <SFXRhodesFrame+0x77c>)
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801af30:	465e      	mov	r6, fp
 801af32:	f8df a054 	ldr.w	sl, [pc, #84]	; 801af88 <SFXRhodesFrame+0x788>
 801af36:	f8df 9054 	ldr.w	r9, [pc, #84]	; 801af8c <SFXRhodesFrame+0x78c>
				if ((FM_envs[i][0]->whichStage == env_idle) && (FM_envs[i][2]->whichStage == env_idle))
 801af3a:	46b8      	mov	r8, r7
 801af3c:	e02b      	b.n	801af96 <SFXRhodesFrame+0x796>
 801af3e:	bf00      	nop
 801af40:	2000003c 	.word	0x2000003c
 801af44:	20016e10 	.word	0x20016e10
 801af48:	20016ff4 	.word	0x20016ff4
 801af4c:	bf6b851f 	.word	0xbf6b851f
 801af50:	2001755c 	.word	0x2001755c
 801af54:	469c4000 	.word	0x469c4000
 801af58:	20016e14 	.word	0x20016e14
 801af5c:	2000028c 	.word	0x2000028c
 801af60:	20016430 	.word	0x20016430
 801af64:	20015590 	.word	0x20015590
 801af68:	200187d8 	.word	0x200187d8
 801af6c:	e0001000 	.word	0xe0001000
 801af70:	2001761c 	.word	0x2001761c
 801af74:	3827c5ac 	.word	0x3827c5ac
 801af78:	3f7ffd61 	.word	0x3f7ffd61
 801af7c:	20016e3c 	.word	0x20016e3c
 801af80:	20000274 	.word	0x20000274
 801af84:	20017554 	.word	0x20017554
 801af88:	200005d8 	.word	0x200005d8
 801af8c:	20000620 	.word	0x20000620
	for (int i = 0; i < numVoices; i++)
 801af90:	3501      	adds	r5, #1
 801af92:	42ab      	cmp	r3, r5
 801af94:	dd52      	ble.n	801b03c <SFXRhodesFrame+0x83c>
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801af96:	b2ef      	uxtb	r7, r5
 801af98:	4630      	mov	r0, r6
 801af9a:	4639      	mov	r1, r7
 801af9c:	f00a f874 	bl	8025088 <tSimplePoly_getPitch>
 801afa0:	ee07 0a90 	vmov	s15, r0
 801afa4:	ed9a 0a00 	vldr	s0, [sl]
 801afa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801afac:	4b90      	ldr	r3, [pc, #576]	; (801b1f0 <SFXRhodesFrame+0x9f0>)
 801afae:	4a91      	ldr	r2, [pc, #580]	; (801b1f4 <SFXRhodesFrame+0x9f4>)
 801afb0:	7819      	ldrb	r1, [r3, #0]
	float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801afb2:	ee37 7a00 	vadd.f32	s14, s14, s0
	float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801afb6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801afba:	ee17 3a90 	vmov	r3, s15
 801afbe:	1a5b      	subs	r3, r3, r1
 801afc0:	fb82 2003 	smull	r2, r0, r2, r3
 801afc4:	17d9      	asrs	r1, r3, #31
 801afc6:	ebc1 0160 	rsb	r1, r1, r0, asr #1
 801afca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801afce:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
 801afd2:	ee07 3a90 	vmov	s15, r3
 801afd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 801afda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801afde:	ee17 3a90 	vmov	r3, s15
 801afe2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801afe6:	ed93 0a00 	vldr	s0, [r3]
	freq[voice] = LEAF_midiToFrequency(tunedNote);
 801afea:	ee37 0a00 	vadd.f32	s0, s14, s0
 801afee:	f009 fab1 	bl	8024554 <LEAF_midiToFrequency>
		if (numVoices > 1)
 801aff2:	9b01      	ldr	r3, [sp, #4]
	freq[voice] = LEAF_midiToFrequency(tunedNote);
 801aff4:	eca8 0a01 	vstmia	r8!, {s0}
		if (numVoices > 1)
 801aff8:	781b      	ldrb	r3, [r3, #0]
 801affa:	2b01      	cmp	r3, #1
 801affc:	d9c8      	bls.n	801af90 <SFXRhodesFrame+0x790>
			if (poly->voices[i][0] == -2)
 801affe:	f8db 1000 	ldr.w	r1, [fp]
 801b002:	6909      	ldr	r1, [r1, #16]
 801b004:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 801b008:	6809      	ldr	r1, [r1, #0]
 801b00a:	3102      	adds	r1, #2
 801b00c:	d1c0      	bne.n	801af90 <SFXRhodesFrame+0x790>
 801b00e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
				if ((FM_envs[i][0]->whichStage == env_idle) && (FM_envs[i][2]->whichStage == env_idle))
 801b012:	4a79      	ldr	r2, [pc, #484]	; (801b1f8 <SFXRhodesFrame+0x9f8>)
 801b014:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 801b018:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801b01c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b01e:	2800      	cmp	r0, #0
 801b020:	d1b6      	bne.n	801af90 <SFXRhodesFrame+0x790>
 801b022:	6889      	ldr	r1, [r1, #8]
 801b024:	6a89      	ldr	r1, [r1, #40]	; 0x28
 801b026:	2900      	cmp	r1, #0
 801b028:	d1b2      	bne.n	801af90 <SFXRhodesFrame+0x790>
					tSimplePoly_deactivateVoice(&poly, i);
 801b02a:	4639      	mov	r1, r7
 801b02c:	4630      	mov	r0, r6
 801b02e:	f009 ff51 	bl	8024ed4 <tSimplePoly_deactivateVoice>
 801b032:	9b01      	ldr	r3, [sp, #4]
	for (int i = 0; i < numVoices; i++)
 801b034:	3501      	adds	r5, #1
 801b036:	781b      	ldrb	r3, [r3, #0]
 801b038:	42ab      	cmp	r3, r5
 801b03a:	dcac      	bgt.n	801af96 <SFXRhodesFrame+0x796>
	tCycle_setFreq(&tremolo, displayValues[2]);
 801b03c:	ed94 0a02 	vldr	s0, [r4, #8]
 801b040:	486e      	ldr	r0, [pc, #440]	; (801b1fc <SFXRhodesFrame+0x9fc>)
}
 801b042:	b003      	add	sp, #12
 801b044:	ecbd 8b04 	vpop	{d8-d9}
 801b048:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	tCycle_setFreq(&tremolo, displayValues[2]);
 801b04c:	f00a b84a 	b.w	80250e4 <tCycle_setFreq>
 801b050:	4d69      	ldr	r5, [pc, #420]	; (801b1f8 <SFXRhodesFrame+0x9f8>)
 801b052:	f105 0ac0 	add.w	sl, r5, #192	; 0xc0
 801b056:	f105 0718 	add.w	r7, r5, #24
							tADSR4_setRelease(&FM_envs[i][j], displayValues[8]);
 801b05a:	4628      	mov	r0, r5
 801b05c:	3504      	adds	r5, #4
 801b05e:	ed94 0a08 	vldr	s0, [r4, #32]
 801b062:	f007 f995 	bl	8022390 <tADSR4_setRelease>
						for (int j = 0; j < 6; j++)
 801b066:	42af      	cmp	r7, r5
 801b068:	d1f7      	bne.n	801b05a <SFXRhodesFrame+0x85a>
					for (int i = 0; i < NUM_VOC_VOICES; i++)
 801b06a:	45aa      	cmp	sl, r5
 801b06c:	d1f3      	bne.n	801b056 <SFXRhodesFrame+0x856>
		prevDisplayValues[k] = displayValues[k];
 801b06e:	9b00      	ldr	r3, [sp, #0]
 801b070:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801b074:	f848 3c04 	str.w	r3, [r8, #-4]
 801b078:	e72f      	b.n	801aeda <SFXRhodesFrame+0x6da>
 801b07a:	4d61      	ldr	r5, [pc, #388]	; (801b200 <SFXRhodesFrame+0xa00>)
 801b07c:	4f61      	ldr	r7, [pc, #388]	; (801b204 <SFXRhodesFrame+0xa04>)
 801b07e:	f105 0a18 	add.w	sl, r5, #24
						tExpSmooth_setDest(&susSmoothers[i], displayValues[7] * randomSustains[i]);
 801b082:	ecb5 0a01 	vldmia	r5!, {s0}
 801b086:	4638      	mov	r0, r7
 801b088:	edd4 7a07 	vldr	s15, [r4, #28]
 801b08c:	3704      	adds	r7, #4
 801b08e:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b092:	f007 fce1 	bl	8022a58 <tExpSmooth_setDest>
					for (int i = 0; i < 6; i++)
 801b096:	45aa      	cmp	sl, r5
 801b098:	d1f3      	bne.n	801b082 <SFXRhodesFrame+0x882>
		prevDisplayValues[k] = displayValues[k];
 801b09a:	9b00      	ldr	r3, [sp, #0]
 801b09c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801b0a0:	f848 3c04 	str.w	r3, [r8, #-4]
 801b0a4:	e719      	b.n	801aeda <SFXRhodesFrame+0x6da>
 801b0a6:	4f58      	ldr	r7, [pc, #352]	; (801b208 <SFXRhodesFrame+0xa08>)
 801b0a8:	f8df a14c 	ldr.w	sl, [pc, #332]	; 801b1f8 <SFXRhodesFrame+0x9f8>
 801b0ac:	46bb      	mov	fp, r7
 801b0ae:	4f57      	ldr	r7, [pc, #348]	; (801b20c <SFXRhodesFrame+0xa0c>)
	prevDisplayValues[24] = displayValues[24];
 801b0b0:	4655      	mov	r5, sl
							tADSR4_setDecay(&FM_envs[i][j],(LEAF_clip(7.0f, displayValues[6] * randomDecays[j], 20000.0f)));
 801b0b2:	ecf7 0a01 	vldmia	r7!, {s1}
 801b0b6:	eeb0 1a48 	vmov.f32	s2, s16
 801b0ba:	edd4 7a06 	vldr	s15, [r4, #24]
 801b0be:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 801b0c2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801b0c6:	f009 f95b 	bl	8024380 <LEAF_clip>
 801b0ca:	4628      	mov	r0, r5
 801b0cc:	f007 f93c 	bl	8022348 <tADSR4_setDecay>
						for (int j = 0; j < 6; j++)
 801b0d0:	45bb      	cmp	fp, r7
 801b0d2:	f105 0504 	add.w	r5, r5, #4
 801b0d6:	d1ec      	bne.n	801b0b2 <SFXRhodesFrame+0x8b2>
 801b0d8:	f10a 0a18 	add.w	sl, sl, #24
					for (int i = 0; i < NUM_VOC_VOICES; i++)
 801b0dc:	4b4c      	ldr	r3, [pc, #304]	; (801b210 <SFXRhodesFrame+0xa10>)
 801b0de:	4553      	cmp	r3, sl
 801b0e0:	d1e5      	bne.n	801b0ae <SFXRhodesFrame+0x8ae>
		prevDisplayValues[k] = displayValues[k];
 801b0e2:	9b00      	ldr	r3, [sp, #0]
 801b0e4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801b0e8:	f848 3c04 	str.w	r3, [r8, #-4]
 801b0ec:	e6f5      	b.n	801aeda <SFXRhodesFrame+0x6da>
		numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 801b0ee:	4d49      	ldr	r5, [pc, #292]	; (801b214 <SFXRhodesFrame+0xa14>)
		tSimplePoly_setNumVoices(&poly, numVoices);
 801b0f0:	4849      	ldr	r0, [pc, #292]	; (801b218 <SFXRhodesFrame+0xa18>)
		numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 801b0f2:	782a      	ldrb	r2, [r5, #0]
 801b0f4:	9501      	str	r5, [sp, #4]
 801b0f6:	2a01      	cmp	r2, #1
 801b0f8:	bf98      	it	ls
 801b0fa:	2308      	movls	r3, #8
		tSimplePoly_setNumVoices(&poly, numVoices);
 801b0fc:	4619      	mov	r1, r3
		numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 801b0fe:	702b      	strb	r3, [r5, #0]
		tSimplePoly_setNumVoices(&poly, numVoices);
 801b100:	f009 ff9e 	bl	8025040 <tSimplePoly_setNumVoices>
		setLED_A(numVoices == 1);
 801b104:	7828      	ldrb	r0, [r5, #0]
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 801b106:	2300      	movs	r3, #0
		setLED_A(numVoices == 1);
 801b108:	f1a0 0001 	sub.w	r0, r0, #1
		buttonActionsSFX[ButtonA][ActionPress] = 0;
 801b10c:	7523      	strb	r3, [r4, #20]
		setLED_A(numVoices == 1);
 801b10e:	fab0 f080 	clz	r0, r0
 801b112:	0940      	lsrs	r0, r0, #5
 801b114:	f7f8 fdd0 	bl	8013cb8 <setLED_A>
 801b118:	f7ff bb7e 	b.w	801a818 <SFXRhodesFrame+0x18>
		tremoloStereo = !tremoloStereo;
 801b11c:	4a3f      	ldr	r2, [pc, #252]	; (801b21c <SFXRhodesFrame+0xa1c>)
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 801b11e:	2100      	movs	r1, #0
		tremoloStereo = !tremoloStereo;
 801b120:	7813      	ldrb	r3, [r2, #0]
		buttonActionsSFX[ButtonC][ActionPress] = 0;
 801b122:	7721      	strb	r1, [r4, #28]
		tremoloStereo = !tremoloStereo;
 801b124:	fab3 f383 	clz	r3, r3
 801b128:	095b      	lsrs	r3, r3, #5
		setLED_C(tremoloStereo == 1);
 801b12a:	4618      	mov	r0, r3
		tremoloStereo = !tremoloStereo;
 801b12c:	7013      	strb	r3, [r2, #0]
		setLED_C(tremoloStereo == 1);
 801b12e:	f7f8 fddf 	bl	8013cf0 <setLED_C>
 801b132:	f7ff bb87 	b.w	801a844 <SFXRhodesFrame+0x44>
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801b136:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 801b13a:	ee76 6a63 	vsub.f32	s13, s12, s7
 801b13e:	eef0 6ae6 	vabs.f32	s13, s13
 801b142:	ee83 6aa6 	vdiv.f32	s12, s7, s13
 801b146:	e4b8      	b.n	801aaba <SFXRhodesFrame+0x2ba>
 801b148:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 801b14c:	ee73 6ac3 	vsub.f32	s13, s7, s6
 801b150:	eef0 6ae6 	vabs.f32	s13, s13
 801b154:	eec3 3a26 	vdiv.f32	s7, s6, s13
 801b158:	e4da      	b.n	801ab10 <SFXRhodesFrame+0x310>
 801b15a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b15e:	eef0 3ae7 	vabs.f32	s7, s15
 801b162:	eec7 7a23 	vdiv.f32	s15, s14, s7
 801b166:	e4fc      	b.n	801ab62 <SFXRhodesFrame+0x362>
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801b168:	ee33 4ac3 	vsub.f32	s8, s7, s6
 801b16c:	eef0 3ac4 	vabs.f32	s7, s8
 801b170:	ee83 4a23 	vdiv.f32	s8, s6, s7
 801b174:	e552      	b.n	801ac1c <SFXRhodesFrame+0x41c>
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801b176:	ee76 6a65 	vsub.f32	s13, s12, s11
 801b17a:	eef0 6ae6 	vabs.f32	s13, s13
 801b17e:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801b182:	e419      	b.n	801a9b8 <SFXRhodesFrame+0x1b8>
 801b184:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801b188:	ee76 6a65 	vsub.f32	s13, s12, s11
 801b18c:	eef0 6ae6 	vabs.f32	s13, s13
 801b190:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801b194:	e43b      	b.n	801aa0e <SFXRhodesFrame+0x20e>
 801b196:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801b19a:	ee76 6a65 	vsub.f32	s13, s12, s11
 801b19e:	eef0 6ae6 	vabs.f32	s13, s13
 801b1a2:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801b1a6:	e45d      	b.n	801aa64 <SFXRhodesFrame+0x264>
			if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801b1a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b1ac:	eeb0 6ae7 	vabs.f32	s12, s15
 801b1b0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801b1b4:	e5c7      	b.n	801ad46 <SFXRhodesFrame+0x546>
 801b1b6:	ee36 6a65 	vsub.f32	s12, s12, s11
 801b1ba:	eeb0 5ac6 	vabs.f32	s10, s12
 801b1be:	ee85 6a85 	vdiv.f32	s12, s11, s10
 801b1c2:	e5a4      	b.n	801ad0e <SFXRhodesFrame+0x50e>
 801b1c4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b1c8:	eef0 4ae5 	vabs.f32	s9, s11
 801b1cc:	eec5 5a24 	vdiv.f32	s11, s10, s9
 801b1d0:	e57f      	b.n	801acd2 <SFXRhodesFrame+0x4d2>
 801b1d2:	ee35 5a64 	vsub.f32	s10, s10, s9
 801b1d6:	eeb0 4ac5 	vabs.f32	s8, s10
 801b1da:	ee84 5a84 	vdiv.f32	s10, s9, s8
 801b1de:	e55a      	b.n	801ac96 <SFXRhodesFrame+0x496>
 801b1e0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801b1e4:	eef0 3ae4 	vabs.f32	s7, s9
 801b1e8:	eec4 4a23 	vdiv.f32	s9, s8, s7
 801b1ec:	e535      	b.n	801ac5a <SFXRhodesFrame+0x45a>
 801b1ee:	bf00      	nop
 801b1f0:	20000654 	.word	0x20000654
 801b1f4:	2aaaaaab 	.word	0x2aaaaaab
 801b1f8:	2001755c 	.word	0x2001755c
 801b1fc:	200177a0 	.word	0x200177a0
 801b200:	2000028c 	.word	0x2000028c
 801b204:	20016430 	.word	0x20016430
 801b208:	2000028c 	.word	0x2000028c
 801b20c:	20000274 	.word	0x20000274
 801b210:	2001761c 	.word	0x2001761c
 801b214:	20000250 	.word	0x20000250
 801b218:	20017554 	.word	0x20017554
 801b21c:	2000060c 	.word	0x2000060c

0801b220 <SFXRhodesTick>:
{
 801b220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b224:	f8df 8364 	ldr.w	r8, [pc, #868]	; 801b58c <SFXRhodesTick+0x36c>
 801b228:	4cc8      	ldr	r4, [pc, #800]	; (801b54c <SFXRhodesTick+0x32c>)
 801b22a:	f108 0518 	add.w	r5, r8, #24
 801b22e:	4646      	mov	r6, r8
 801b230:	ed2d 8b08 	vpush	{d8-d11}
 801b234:	b08d      	sub	sp, #52	; 0x34
 801b236:	900b      	str	r0, [sp, #44]	; 0x2c
		sustainsFinal[i] = tExpSmooth_tick(&susSmoothers[i]);
 801b238:	4620      	mov	r0, r4
 801b23a:	3404      	adds	r4, #4
 801b23c:	f007 fc16 	bl	8022a6c <tExpSmooth_tick>
 801b240:	eca6 0a01 	vstmia	r6!, {s0}
	for (int i = 0; i < 6; i++)
 801b244:	42ae      	cmp	r6, r5
 801b246:	d1f7      	bne.n	801b238 <SFXRhodesTick+0x18>
 801b248:	4bc1      	ldr	r3, [pc, #772]	; (801b550 <SFXRhodesTick+0x330>)
 801b24a:	f103 09c0 	add.w	r9, r3, #192	; 0xc0
 801b24e:	461f      	mov	r7, r3
{
 801b250:	463d      	mov	r5, r7
 801b252:	4644      	mov	r4, r8
			tADSR4_setSustain(&FM_envs[i][j], sustainsFinal[j]); //FM_sustains[Rsound][j] * displayValues[7]);
 801b254:	ecb4 0a01 	vldmia	r4!, {s0}
 801b258:	4628      	mov	r0, r5
 801b25a:	f007 f883 	bl	8022364 <tADSR4_setSustain>
 801b25e:	3504      	adds	r5, #4
		for (int j = 0; j < 6; j++)
 801b260:	42a6      	cmp	r6, r4
 801b262:	d1f7      	bne.n	801b254 <SFXRhodesTick+0x34>
 801b264:	3718      	adds	r7, #24
	for (int i = 0; i < NUM_VOC_VOICES; i++)
 801b266:	454f      	cmp	r7, r9
 801b268:	d1f2      	bne.n	801b250 <SFXRhodesTick+0x30>
	for (int i = 0; i < numVoices; i++)
 801b26a:	4bba      	ldr	r3, [pc, #744]	; (801b554 <SFXRhodesTick+0x334>)
 801b26c:	781b      	ldrb	r3, [r3, #0]
 801b26e:	2b00      	cmp	r3, #0
 801b270:	f000 8164 	beq.w	801b53c <SFXRhodesTick+0x31c>
 801b274:	4bb6      	ldr	r3, [pc, #728]	; (801b550 <SFXRhodesTick+0x330>)
 801b276:	f04f 0a00 	mov.w	sl, #0
 801b27a:	f8df 8314 	ldr.w	r8, [pc, #788]	; 801b590 <SFXRhodesTick+0x370>
		leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801b27e:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801b282:	f103 0014 	add.w	r0, r3, #20
	float rightSample = 0.0f;
 801b286:	ed9f 9ab4 	vldr	s18, [pc, #720]	; 801b558 <SFXRhodesTick+0x338>
 801b28a:	49b4      	ldr	r1, [pc, #720]	; (801b55c <SFXRhodesTick+0x33c>)
 801b28c:	4642      	mov	r2, r8
 801b28e:	900a      	str	r0, [sp, #40]	; 0x28
		leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801b290:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 801b294:	48b2      	ldr	r0, [pc, #712]	; (801b560 <SFXRhodesTick+0x340>)
	float leftSample = 0.0f;
 801b296:	eef0 9a49 	vmov.f32	s19, s18
 801b29a:	46d0      	mov	r8, sl
 801b29c:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 801b594 <SFXRhodesTick+0x374>
 801b2a0:	9003      	str	r0, [sp, #12]
 801b2a2:	f103 0010 	add.w	r0, r3, #16
 801b2a6:	4caf      	ldr	r4, [pc, #700]	; (801b564 <SFXRhodesTick+0x344>)
 801b2a8:	9009      	str	r0, [sp, #36]	; 0x24
 801b2aa:	f103 000c 	add.w	r0, r3, #12
 801b2ae:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 801b598 <SFXRhodesTick+0x378>
 801b2b2:	9008      	str	r0, [sp, #32]
 801b2b4:	1d18      	adds	r0, r3, #4
 801b2b6:	3308      	adds	r3, #8
 801b2b8:	4dab      	ldr	r5, [pc, #684]	; (801b568 <SFXRhodesTick+0x348>)
 801b2ba:	9006      	str	r0, [sp, #24]
 801b2bc:	9307      	str	r3, [sp, #28]
 801b2be:	460b      	mov	r3, r1
 801b2c0:	4651      	mov	r1, sl
 801b2c2:	4692      	mov	sl, r2
		tCycle_setFreq(&FM_sines[i][5], (myFrequency  * FM_freqRatios[Rsound][5]) + (FM_indices[Rsound][5] * feedback_output * displayValues[0]));
 801b2c4:	f8d9 7000 	ldr.w	r7, [r9]
	for (int i = 0; i < numVoices; i++)
 801b2c8:	3101      	adds	r1, #1
		tCycle_setFreq(&FM_sines[i][5], (myFrequency  * FM_freqRatios[Rsound][5]) + (FM_indices[Rsound][5] * feedback_output * displayValues[0]));
 801b2ca:	ed9a 0a00 	vldr	s0, [sl]
 801b2ce:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b2d2:	eddb 7a00 	vldr	s15, [fp]
		float myFrequency = freq[i];
 801b2d6:	ecf3 8a01 	vldmia	r3!, {s17}
		tCycle_setFreq(&FM_sines[i][5], (myFrequency  * FM_freqRatios[Rsound][5]) + (FM_indices[Rsound][5] * feedback_output * displayValues[0]));
 801b2da:	00ff      	lsls	r7, r7, #3
 801b2dc:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b2e0:	4aa2      	ldr	r2, [pc, #648]	; (801b56c <SFXRhodesTick+0x34c>)
 801b2e2:	eb05 0c07 	add.w	ip, r5, r7
 801b2e6:	4427      	add	r7, r4
 801b2e8:	eb02 0608 	add.w	r6, r2, r8
		float myFrequency = freq[i];
 801b2ec:	9305      	str	r3, [sp, #20]
		tCycle_setFreq(&FM_sines[i][5], (myFrequency  * FM_freqRatios[Rsound][5]) + (FM_indices[Rsound][5] * feedback_output * displayValues[0]));
 801b2ee:	ed9c 0a05 	vldr	s0, [ip, #20]
 801b2f2:	3a04      	subs	r2, #4
	for (int i = 0; i < numVoices; i++)
 801b2f4:	9104      	str	r1, [sp, #16]
		tCycle_setFreq(&FM_sines[i][5], (myFrequency  * FM_freqRatios[Rsound][5]) + (FM_indices[Rsound][5] * feedback_output * displayValues[0]));
 801b2f6:	4630      	mov	r0, r6
 801b2f8:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b2fc:	4b9c      	ldr	r3, [pc, #624]	; (801b570 <SFXRhodesTick+0x350>)
 801b2fe:	499d      	ldr	r1, [pc, #628]	; (801b574 <SFXRhodesTick+0x354>)
 801b300:	4442      	add	r2, r8
 801b302:	ed97 7a05 	vldr	s14, [r7, #20]
 801b306:	4443      	add	r3, r8
 801b308:	4441      	add	r1, r8
 801b30a:	9202      	str	r2, [sp, #8]
 801b30c:	eea7 0a28 	vfma.f32	s0, s14, s17
 801b310:	9301      	str	r3, [sp, #4]
 801b312:	9100      	str	r1, [sp, #0]
 801b314:	f009 fee6 	bl	80250e4 <tCycle_setFreq>
		feedback_output = tCycle_tick(&FM_sines[i][5]);
 801b318:	4630      	mov	r0, r6
 801b31a:	4f97      	ldr	r7, [pc, #604]	; (801b578 <SFXRhodesTick+0x358>)
 801b31c:	f009 fef0 	bl	8025100 <tCycle_tick>
		tCycle_setFreq(&FM_sines[i][4], (myFrequency  * FM_freqRatios[Rsound][4]) + (FM_indices[Rsound][4] * feedback_output * displayValues[0] * tADSR4_tick(&FM_envs[i][5])));
 801b320:	f8d9 0000 	ldr.w	r0, [r9]
 801b324:	edda 7a00 	vldr	s15, [sl]
 801b328:	4447      	add	r7, r8
 801b32a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
		feedback_output = tCycle_tick(&FM_sines[i][5]);
 801b32e:	ed8b 0a00 	vstr	s0, [fp]
		tCycle_setFreq(&FM_sines[i][4], (myFrequency  * FM_freqRatios[Rsound][4]) + (FM_indices[Rsound][4] * feedback_output * displayValues[0] * tADSR4_tick(&FM_envs[i][5])));
 801b332:	00c0      	lsls	r0, r0, #3
 801b334:	eb05 0c00 	add.w	ip, r5, r0
 801b338:	1826      	adds	r6, r4, r0
 801b33a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b33c:	ed9c 8a04 	vldr	s16, [ip, #16]
 801b340:	4440      	add	r0, r8
 801b342:	ed96 ba04 	vldr	s22, [r6, #16]
 801b346:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b34a:	4e8c      	ldr	r6, [pc, #560]	; (801b57c <SFXRhodesTick+0x35c>)
 801b34c:	4446      	add	r6, r8
 801b34e:	ee28 8a00 	vmul.f32	s16, s16, s0
 801b352:	f007 f849 	bl	80223e8 <tADSR4_tick>
 801b356:	9802      	ldr	r0, [sp, #8]
 801b358:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b35c:	eeab 0a28 	vfma.f32	s0, s22, s17
 801b360:	f009 fec0 	bl	80250e4 <tCycle_setFreq>
		tCycle_setFreq(&FM_sines[i][3], (myFrequency  * FM_freqRatios[Rsound][3]) + (FM_indices[Rsound][3] * displayValues[0] * tCycle_tick(&FM_sines[i][4]) * tADSR4_tickNoInterp(&FM_envs[i][4])));
 801b364:	f8d9 2000 	ldr.w	r2, [r9]
 801b368:	edda 7a00 	vldr	s15, [sl]
 801b36c:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801b370:	9802      	ldr	r0, [sp, #8]
 801b372:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b376:	eb05 0e0c 	add.w	lr, r5, ip
 801b37a:	44a4      	add	ip, r4
 801b37c:	ed9e 8a03 	vldr	s16, [lr, #12]
 801b380:	ed9c ba03 	vldr	s22, [ip, #12]
 801b384:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b388:	f009 feba 	bl	8025100 <tCycle_tick>
 801b38c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b38e:	ee28 8a00 	vmul.f32	s16, s16, s0
 801b392:	eb02 0008 	add.w	r0, r2, r8
 801b396:	f007 f985 	bl	80226a4 <tADSR4_tickNoInterp>
 801b39a:	9801      	ldr	r0, [sp, #4]
 801b39c:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b3a0:	eeab 0a28 	vfma.f32	s0, s22, s17
 801b3a4:	f009 fe9e 	bl	80250e4 <tCycle_setFreq>
		tCycle_setFreq(&FM_sines[i][2], (myFrequency  * FM_freqRatios[Rsound][2]) + (FM_indices[Rsound][2] * displayValues[0] * tCycle_tick(&FM_sines[i][3]) * tADSR4_tickNoInterp(&FM_envs[i][3])));
 801b3a8:	f8d9 2000 	ldr.w	r2, [r9]
 801b3ac:	edda 7a00 	vldr	s15, [sl]
 801b3b0:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801b3b4:	9801      	ldr	r0, [sp, #4]
 801b3b6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b3ba:	eb05 0e0c 	add.w	lr, r5, ip
 801b3be:	44a4      	add	ip, r4
 801b3c0:	ed9e 8a02 	vldr	s16, [lr, #8]
 801b3c4:	ed9c ba02 	vldr	s22, [ip, #8]
 801b3c8:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b3cc:	f009 fe98 	bl	8025100 <tCycle_tick>
 801b3d0:	9b08      	ldr	r3, [sp, #32]
 801b3d2:	ee28 8a00 	vmul.f32	s16, s16, s0
 801b3d6:	eb03 0008 	add.w	r0, r3, r8
 801b3da:	f007 f963 	bl	80226a4 <tADSR4_tickNoInterp>
 801b3de:	9800      	ldr	r0, [sp, #0]
 801b3e0:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b3e4:	eeab 0a28 	vfma.f32	s0, s22, s17
 801b3e8:	f009 fe7c 	bl	80250e4 <tCycle_setFreq>
		tCycle_setFreq(&FM_sines[i][1], myFrequency  * FM_freqRatios[Rsound][1]);
 801b3ec:	f8d9 2000 	ldr.w	r2, [r9]
 801b3f0:	4638      	mov	r0, r7
 801b3f2:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801b3f6:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 801b3fa:	ed9c 0a01 	vldr	s0, [ip, #4]
 801b3fe:	ee28 0a80 	vmul.f32	s0, s17, s0
 801b402:	f009 fe6f 	bl	80250e4 <tCycle_setFreq>
		tCycle_setFreq(&FM_sines[i][0],( myFrequency  * FM_freqRatios[Rsound][0]) + (FM_indices[Rsound][0] * displayValues[0] * tCycle_tick(&FM_sines[i][1]) * tADSR4_tickNoInterp(&FM_envs[i][1])));
 801b406:	f8d9 2000 	ldr.w	r2, [r9]
 801b40a:	4638      	mov	r0, r7
 801b40c:	edda 7a00 	vldr	s15, [sl]
 801b410:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801b414:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 801b418:	eb05 0c07 	add.w	ip, r5, r7
 801b41c:	4427      	add	r7, r4
 801b41e:	ed9c 8a00 	vldr	s16, [ip]
 801b422:	ed97 ba00 	vldr	s22, [r7]
 801b426:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b42a:	f009 fe69 	bl	8025100 <tCycle_tick>
 801b42e:	9b06      	ldr	r3, [sp, #24]
 801b430:	ee28 8a00 	vmul.f32	s16, s16, s0
 801b434:	eb03 0008 	add.w	r0, r3, r8
 801b438:	f007 f934 	bl	80226a4 <tADSR4_tickNoInterp>
 801b43c:	4630      	mov	r0, r6
 801b43e:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b442:	eeab 0a28 	vfma.f32	s0, s22, s17
 801b446:	f009 fe4d 	bl	80250e4 <tCycle_setFreq>
		sample += (tCycle_tick(&FM_sines[i][2]) * tADSR4_tickNoInterp(&FM_envs[i][2]));
 801b44a:	9800      	ldr	r0, [sp, #0]
 801b44c:	f009 fe58 	bl	8025100 <tCycle_tick>
 801b450:	9b07      	ldr	r3, [sp, #28]
 801b452:	eeb0 ba40 	vmov.f32	s22, s0
 801b456:	eb03 0008 	add.w	r0, r3, r8
 801b45a:	f007 f923 	bl	80226a4 <tADSR4_tickNoInterp>
		sample += tCycle_tick(&FM_sines[i][0]) * tADSR4_tickNoInterp(&FM_envs[i][0]);
 801b45e:	4630      	mov	r0, r6
		sample += (tCycle_tick(&FM_sines[i][2]) * tADSR4_tickNoInterp(&FM_envs[i][2]));
 801b460:	eef0 8a40 	vmov.f32	s17, s0
		sample += tCycle_tick(&FM_sines[i][0]) * tADSR4_tickNoInterp(&FM_envs[i][0]);
 801b464:	f009 fe4c 	bl	8025100 <tCycle_tick>
 801b468:	4b39      	ldr	r3, [pc, #228]	; (801b550 <SFXRhodesTick+0x330>)
 801b46a:	eeb0 8a40 	vmov.f32	s16, s0
 801b46e:	eb03 0008 	add.w	r0, r3, r8
 801b472:	f108 0818 	add.w	r8, r8, #24
 801b476:	f007 f915 	bl	80226a4 <tADSR4_tickNoInterp>
		leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801b47a:	9b03      	ldr	r3, [sp, #12]
 801b47c:	edda 7a04 	vldr	s15, [sl, #16]
		sample += tCycle_tick(&FM_sines[i][0]) * tADSR4_tickNoInterp(&FM_envs[i][0]);
 801b480:	ee28 0a00 	vmul.f32	s0, s16, s0
		leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801b484:	ecf3 6a01 	vldmia	r3!, {s13}
 801b488:	ee3a 6ae7 	vsub.f32	s12, s21, s15
	for (int i = 0; i < numVoices; i++)
 801b48c:	9904      	ldr	r1, [sp, #16]
		leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801b48e:	ee3a 7ae6 	vsub.f32	s14, s21, s13
 801b492:	9303      	str	r3, [sp, #12]
		rightSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (panValues[i])));
 801b494:	ee67 6aa6 	vmul.f32	s13, s15, s13
	for (int i = 0; i < numVoices; i++)
 801b498:	4b2e      	ldr	r3, [pc, #184]	; (801b554 <SFXRhodesTick+0x334>)
		sample += tCycle_tick(&FM_sines[i][0]) * tADSR4_tickNoInterp(&FM_envs[i][0]);
 801b49a:	eeab 0a28 	vfma.f32	s0, s22, s17
		leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801b49e:	ee67 7a27 	vmul.f32	s15, s14, s15
	for (int i = 0; i < numVoices; i++)
 801b4a2:	7818      	ldrb	r0, [r3, #0]
		rightSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (panValues[i])));
 801b4a4:	eee6 6a0a 	vfma.f32	s13, s12, s20
	for (int i = 0; i < numVoices; i++)
 801b4a8:	9b05      	ldr	r3, [sp, #20]
 801b4aa:	4288      	cmp	r0, r1
		leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801b4ac:	eee6 7a0a 	vfma.f32	s15, s12, s20
		rightSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (panValues[i])));
 801b4b0:	eea6 9a80 	vfma.f32	s18, s13, s0
		leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801b4b4:	eee7 9a80 	vfma.f32	s19, s15, s0
	for (int i = 0; i < numVoices; i++)
 801b4b8:	f73f af04 	bgt.w	801b2c4 <SFXRhodesTick+0xa4>
 801b4bc:	eddf 7a30 	vldr	s15, [pc, #192]	; 801b580 <SFXRhodesTick+0x360>
 801b4c0:	46d0      	mov	r8, sl
 801b4c2:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801b4c6:	ee29 9a27 	vmul.f32	s18, s18, s15
	float tremoloSignal = ((tCycle_tick(&tremolo) * 0.5f) + 0.5f) * displayValues[1];
 801b4ca:	482e      	ldr	r0, [pc, #184]	; (801b584 <SFXRhodesTick+0x364>)
 801b4cc:	f009 fe18 	bl	8025100 <tCycle_tick>
 801b4d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b4d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b4d8:	edd8 6a01 	vldr	s13, [r8, #4]
	if (tremoloStereo)
 801b4dc:	4b2a      	ldr	r3, [pc, #168]	; (801b588 <SFXRhodesTick+0x368>)
	float tremoloSignal = ((tCycle_tick(&tremolo) * 0.5f) + 0.5f) * displayValues[1];
 801b4de:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b4e2:	ee26 7a87 	vmul.f32	s14, s13, s14
	if (tremoloStereo)
 801b4e6:	781b      	ldrb	r3, [r3, #0]
 801b4e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
	float tremoloSignal = ((tCycle_tick(&tremolo) * 0.5f) + 0.5f) * displayValues[1];
 801b4ec:	ee20 7a07 	vmul.f32	s14, s0, s14
 801b4f0:	ee37 0a87 	vadd.f32	s0, s15, s14
	if (tremoloStereo)
 801b4f4:	b9cb      	cbnz	r3, 801b52a <SFXRhodesTick+0x30a>
		rightSample *= ((tremoloSignal) + (1.0f - displayValues[1]));
 801b4f6:	ee29 9a00 	vmul.f32	s18, s18, s0
	leftSample *= displayValues[3]; //drive
 801b4fa:	ed98 8a03 	vldr	s16, [r8, #12]
 801b4fe:	ee68 9a29 	vmul.f32	s19, s16, s19
	leftSample = tanhf(leftSample);
 801b502:	ee29 0a80 	vmul.f32	s0, s19, s0
 801b506:	f00c fc4d 	bl	8027da4 <tanhf>
 801b50a:	eef0 8a40 	vmov.f32	s17, s0
	rightSample = tanhf(rightSample);
 801b50e:	ee28 0a09 	vmul.f32	s0, s16, s18
 801b512:	f00c fc47 	bl	8027da4 <tanhf>
	input[0] = leftSample;
 801b516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b518:	edc3 8a00 	vstr	s17, [r3]
	input[1] = rightSample;
 801b51c:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801b520:	b00d      	add	sp, #52	; 0x34
 801b522:	ecbd 8b08 	vpop	{d8-d11}
 801b526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rightSample *= ((1.0f-tremoloSignal) + (1.0f - displayValues[1]));
 801b52a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801b52e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801b532:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801b536:	ee27 9a09 	vmul.f32	s18, s14, s18
 801b53a:	e7de      	b.n	801b4fa <SFXRhodesTick+0x2da>
	for (int i = 0; i < numVoices; i++)
 801b53c:	ed9f 9a06 	vldr	s18, [pc, #24]	; 801b558 <SFXRhodesTick+0x338>
 801b540:	f8df 804c 	ldr.w	r8, [pc, #76]	; 801b590 <SFXRhodesTick+0x370>
 801b544:	eef0 9a49 	vmov.f32	s19, s18
 801b548:	e7bf      	b.n	801b4ca <SFXRhodesTick+0x2aa>
 801b54a:	bf00      	nop
 801b54c:	20016430 	.word	0x20016430
 801b550:	2001755c 	.word	0x2001755c
 801b554:	20000250 	.word	0x20000250
 801b558:	00000000 	.word	0x00000000
 801b55c:	20016e3c 	.word	0x20016e3c
 801b560:	2001621c 	.word	0x2001621c
 801b564:	2000003c 	.word	0x2000003c
 801b568:	200000b4 	.word	0x200000b4
 801b56c:	20016e80 	.word	0x20016e80
 801b570:	20016e78 	.word	0x20016e78
 801b574:	20016e74 	.word	0x20016e74
 801b578:	20016e70 	.word	0x20016e70
 801b57c:	20016e6c 	.word	0x20016e6c
 801b580:	3ecccccd 	.word	0x3ecccccd
 801b584:	200177a0 	.word	0x200177a0
 801b588:	2000060c 	.word	0x2000060c
 801b58c:	2001634c 	.word	0x2001634c
 801b590:	200187c4 	.word	0x200187c4
 801b594:	20000510 	.word	0x20000510
 801b598:	20000588 	.word	0x20000588

0801b59c <SFXRhodesFree>:
{
 801b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b59e:	2400      	movs	r4, #0
 801b5a0:	4f12      	ldr	r7, [pc, #72]	; (801b5ec <SFXRhodesFree+0x50>)
 801b5a2:	4e13      	ldr	r6, [pc, #76]	; (801b5f0 <SFXRhodesFree+0x54>)
 801b5a4:	f104 0518 	add.w	r5, r4, #24
			tCycle_free(&FM_sines[i][j]);
 801b5a8:	1938      	adds	r0, r7, r4
 801b5aa:	f009 fd97 	bl	80250dc <tCycle_free>
			tADSR4_free(&FM_envs[i][j]);
 801b5ae:	1930      	adds	r0, r6, r4
 801b5b0:	3404      	adds	r4, #4
 801b5b2:	f006 feb7 	bl	8022324 <tADSR4_free>
		for (int j = 0; j < 6; j++)
 801b5b6:	42ac      	cmp	r4, r5
 801b5b8:	d1f6      	bne.n	801b5a8 <SFXRhodesFree+0xc>
	for (int i = 0; i < NUM_VOC_VOICES; i++)
 801b5ba:	2cc0      	cmp	r4, #192	; 0xc0
 801b5bc:	d1f2      	bne.n	801b5a4 <SFXRhodesFree+0x8>
		tExpSmooth_free(&susSmoothers[i]);
 801b5be:	480d      	ldr	r0, [pc, #52]	; (801b5f4 <SFXRhodesFree+0x58>)
 801b5c0:	f007 fa34 	bl	8022a2c <tExpSmooth_free>
 801b5c4:	480c      	ldr	r0, [pc, #48]	; (801b5f8 <SFXRhodesFree+0x5c>)
 801b5c6:	f007 fa31 	bl	8022a2c <tExpSmooth_free>
 801b5ca:	480c      	ldr	r0, [pc, #48]	; (801b5fc <SFXRhodesFree+0x60>)
 801b5cc:	f007 fa2e 	bl	8022a2c <tExpSmooth_free>
 801b5d0:	480b      	ldr	r0, [pc, #44]	; (801b600 <SFXRhodesFree+0x64>)
 801b5d2:	f007 fa2b 	bl	8022a2c <tExpSmooth_free>
 801b5d6:	480b      	ldr	r0, [pc, #44]	; (801b604 <SFXRhodesFree+0x68>)
 801b5d8:	f007 fa28 	bl	8022a2c <tExpSmooth_free>
 801b5dc:	480a      	ldr	r0, [pc, #40]	; (801b608 <SFXRhodesFree+0x6c>)
 801b5de:	f007 fa25 	bl	8022a2c <tExpSmooth_free>
	tCycle_free(&tremolo);
 801b5e2:	480a      	ldr	r0, [pc, #40]	; (801b60c <SFXRhodesFree+0x70>)
}
 801b5e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	tCycle_free(&tremolo);
 801b5e8:	f009 bd78 	b.w	80250dc <tCycle_free>
 801b5ec:	20016e6c 	.word	0x20016e6c
 801b5f0:	2001755c 	.word	0x2001755c
 801b5f4:	20016430 	.word	0x20016430
 801b5f8:	20016434 	.word	0x20016434
 801b5fc:	20016438 	.word	0x20016438
 801b600:	2001643c 	.word	0x2001643c
 801b604:	20016440 	.word	0x20016440
 801b608:	20016444 	.word	0x20016444
 801b60c:	200177a0 	.word	0x200177a0

0801b610 <calculateNoteArray>:
		float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801b610:	4b17      	ldr	r3, [pc, #92]	; (801b670 <calculateNoteArray+0x60>)
	for (int i = 0; i < 128; i++)
 801b612:	2100      	movs	r1, #0
 801b614:	4817      	ldr	r0, [pc, #92]	; (801b674 <calculateNoteArray+0x64>)
{
 801b616:	b4f0      	push	{r4, r5, r6, r7}
 801b618:	4e17      	ldr	r6, [pc, #92]	; (801b678 <calculateNoteArray+0x68>)
		float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801b61a:	781f      	ldrb	r7, [r3, #0]
 801b61c:	4d17      	ldr	r5, [pc, #92]	; (801b67c <calculateNoteArray+0x6c>)
		float tempNote = i;
 801b61e:	ee07 1a90 	vmov	s15, r1
	for (int i = 0; i < 128; i++)
 801b622:	3101      	adds	r1, #1
		float tempNote = i;
 801b624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	for (int i = 0; i < 128; i++)
 801b628:	2980      	cmp	r1, #128	; 0x80
		float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801b62a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801b62e:	ee17 3a90 	vmov	r3, s15
 801b632:	eba3 0307 	sub.w	r3, r3, r7
 801b636:	fb85 2403 	smull	r2, r4, r5, r3
 801b63a:	ea4f 72e3 	mov.w	r2, r3, asr #31
 801b63e:	ebc2 0264 	rsb	r2, r2, r4, asr #1
 801b642:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b646:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 801b64a:	ee07 3a90 	vmov	s15, r3
 801b64e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 801b652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b656:	ee17 3a90 	vmov	r3, s15
 801b65a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b65e:	edd3 7a00 	vldr	s15, [r3]
 801b662:	ee77 7a87 	vadd.f32	s15, s15, s14
		notes[i] = tunedNote;
 801b666:	ece0 7a01 	vstmia	r0!, {s15}
	for (int i = 0; i < 128; i++)
 801b66a:	d1d8      	bne.n	801b61e <calculateNoteArray+0xe>
	}
}
 801b66c:	bcf0      	pop	{r4, r5, r6, r7}
 801b66e:	4770      	bx	lr
 801b670:	20000654 	.word	0x20000654
 801b674:	20016448 	.word	0x20016448
 801b678:	20000620 	.word	0x20000620
 801b67c:	2aaaaaab 	.word	0x2aaaaaab

0801b680 <nearestNoteWithHysteresis>:

int lastNearNote = -1;


float nearestNoteWithHysteresis(float note, float hysteresis)
{
 801b680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	float leastDifference = fastabsf(note - notes[0]);
 801b684:	4f76      	ldr	r7, [pc, #472]	; (801b860 <nearestNoteWithHysteresis+0x1e0>)
{
 801b686:	ed2d 8b04 	vpush	{d8-d9}
 801b68a:	eef0 8a40 	vmov.f32	s17, s0
	float leastDifference = fastabsf(note - notes[0]);
 801b68e:	ed97 0a00 	vldr	s0, [r7]
{
 801b692:	eeb0 9a60 	vmov.f32	s18, s1
	float leastDifference = fastabsf(note - notes[0]);
 801b696:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801b69a:	f008 fd97 	bl	80241cc <fastabsf>
	float difference;
	int nearIndex = 0;
	int* chord;
	float output = 0.0f;

	if (autotuneChromatic > 0)
 801b69e:	4b71      	ldr	r3, [pc, #452]	; (801b864 <nearestNoteWithHysteresis+0x1e4>)
	{
		chord = chromaticArray;
 801b6a0:	4971      	ldr	r1, [pc, #452]	; (801b868 <nearestNoteWithHysteresis+0x1e8>)
	float leastDifference = fastabsf(note - notes[0]);
 801b6a2:	eeb0 8a40 	vmov.f32	s16, s0
	if (autotuneChromatic > 0)
 801b6a6:	f893 8000 	ldrb.w	r8, [r3]
	}
	else
	{
		chord = chordArray;
	}
	if (autotuneLock > 0)
 801b6aa:	4a70      	ldr	r2, [pc, #448]	; (801b86c <nearestNoteWithHysteresis+0x1ec>)
		chord = chromaticArray;
 801b6ac:	4b70      	ldr	r3, [pc, #448]	; (801b870 <nearestNoteWithHysteresis+0x1f0>)
	if (autotuneLock > 0)
 801b6ae:	6812      	ldr	r2, [r2, #0]
		chord = chromaticArray;
 801b6b0:	f1b8 0f00 	cmp.w	r8, #0
 801b6b4:	bf0c      	ite	eq
 801b6b6:	4688      	moveq	r8, r1
 801b6b8:	4698      	movne	r8, r3
	{
		chord = lockArray;
 801b6ba:	4b6e      	ldr	r3, [pc, #440]	; (801b874 <nearestNoteWithHysteresis+0x1f4>)
 801b6bc:	2a00      	cmp	r2, #0
 801b6be:	bf18      	it	ne
 801b6c0:	4698      	movne	r8, r3
	}
	int hasNotes = 0;
	for (int i = 0; i < 12; i++)
	{
		if (chord[i] > 0)
 801b6c2:	e9d8 3200 	ldrd	r3, r2, [r8]
 801b6c6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	bfcc      	ite	gt
 801b6ce:	2301      	movgt	r3, #1
 801b6d0:	2300      	movle	r3, #0
		{
			hasNotes = 1;
 801b6d2:	2a00      	cmp	r2, #0
		if (chord[i] > 0)
 801b6d4:	e9d8 1203 	ldrd	r1, r2, [r8, #12]
			hasNotes = 1;
 801b6d8:	bfc8      	it	gt
 801b6da:	2301      	movgt	r3, #1
 801b6dc:	2800      	cmp	r0, #0
		if (chord[i] > 0)
 801b6de:	f8d8 0014 	ldr.w	r0, [r8, #20]
			hasNotes = 1;
 801b6e2:	bfc8      	it	gt
 801b6e4:	2301      	movgt	r3, #1
 801b6e6:	2900      	cmp	r1, #0
		if (chord[i] > 0)
 801b6e8:	f8d8 1018 	ldr.w	r1, [r8, #24]
			hasNotes = 1;
 801b6ec:	bfc8      	it	gt
 801b6ee:	2301      	movgt	r3, #1
 801b6f0:	2a00      	cmp	r2, #0
		if (chord[i] > 0)
 801b6f2:	f8d8 201c 	ldr.w	r2, [r8, #28]
			hasNotes = 1;
 801b6f6:	bfc8      	it	gt
 801b6f8:	2301      	movgt	r3, #1
 801b6fa:	2800      	cmp	r0, #0
		if (chord[i] > 0)
 801b6fc:	f8d8 0020 	ldr.w	r0, [r8, #32]
			hasNotes = 1;
 801b700:	bfc8      	it	gt
 801b702:	2301      	movgt	r3, #1
 801b704:	2900      	cmp	r1, #0
		if (chord[i] > 0)
 801b706:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
			hasNotes = 1;
 801b70a:	bfc8      	it	gt
 801b70c:	2301      	movgt	r3, #1
 801b70e:	2a00      	cmp	r2, #0
		if (chord[i] > 0)
 801b710:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
			hasNotes = 1;
 801b714:	bfc8      	it	gt
 801b716:	2301      	movgt	r3, #1
 801b718:	2800      	cmp	r0, #0
 801b71a:	bfc8      	it	gt
 801b71c:	2301      	movgt	r3, #1
 801b71e:	2900      	cmp	r1, #0
 801b720:	bfc8      	it	gt
 801b722:	2301      	movgt	r3, #1
		if (chord[i] > 0)
 801b724:	2a00      	cmp	r2, #0
 801b726:	f340 808d 	ble.w	801b844 <nearestNoteWithHysteresis+0x1c4>
 801b72a:	4d53      	ldr	r5, [pc, #332]	; (801b878 <nearestNoteWithHysteresis+0x1f8>)

	}
	if (hasNotes)
	{

		for(int i = 1; i < 128; i++)
 801b72c:	2401      	movs	r4, #1
	int nearIndex = 0;
 801b72e:	2600      	movs	r6, #0
		{
			if (chord[i%12] > 0)
 801b730:	f8df 914c 	ldr.w	r9, [pc, #332]	; 801b880 <nearestNoteWithHysteresis+0x200>
 801b734:	e003      	b.n	801b73e <nearestNoteWithHysteresis+0xbe>
		for(int i = 1; i < 128; i++)
 801b736:	3401      	adds	r4, #1
 801b738:	3504      	adds	r5, #4
 801b73a:	2c80      	cmp	r4, #128	; 0x80
 801b73c:	d01c      	beq.n	801b778 <nearestNoteWithHysteresis+0xf8>
			if (chord[i%12] > 0)
 801b73e:	fba9 2304 	umull	r2, r3, r9, r4
 801b742:	08db      	lsrs	r3, r3, #3
 801b744:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b748:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 801b74c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801b750:	2b00      	cmp	r3, #0
 801b752:	ddf0      	ble.n	801b736 <nearestNoteWithHysteresis+0xb6>
			{
				difference = fastabsf(note - notes[i]);
 801b754:	ed95 0a00 	vldr	s0, [r5]
 801b758:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801b75c:	f008 fd36 	bl	80241cc <fastabsf>
				if(difference < leastDifference)
 801b760:	eeb4 0ac8 	vcmpe.f32	s0, s16
 801b764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b768:	d5e5      	bpl.n	801b736 <nearestNoteWithHysteresis+0xb6>
 801b76a:	4626      	mov	r6, r4
		for(int i = 1; i < 128; i++)
 801b76c:	3401      	adds	r4, #1
				{
					leastDifference = difference;
 801b76e:	eeb0 8a40 	vmov.f32	s16, s0
 801b772:	3504      	adds	r5, #4
		for(int i = 1; i < 128; i++)
 801b774:	2c80      	cmp	r4, #128	; 0x80
 801b776:	d1e2      	bne.n	801b73e <nearestNoteWithHysteresis+0xbe>
					nearIndex = i;
				}
			}
		}

		if (lastNearNote == -1)
 801b778:	4840      	ldr	r0, [pc, #256]	; (801b87c <nearestNoteWithHysteresis+0x1fc>)
 801b77a:	6801      	ldr	r1, [r0, #0]
 801b77c:	1c4b      	adds	r3, r1, #1
 801b77e:	d058      	beq.n	801b832 <nearestNoteWithHysteresis+0x1b2>
 801b780:	eb07 0381 	add.w	r3, r7, r1, lsl #2
		{
			output = notes[nearIndex];
			lastNearNote = nearIndex;
			return output;
		}
		if (nearIndex != lastNearNote)
 801b784:	42b1      	cmp	r1, r6
 801b786:	ed93 0a00 	vldr	s0, [r3]
 801b78a:	d057      	beq.n	801b83c <nearestNoteWithHysteresis+0x1bc>
 801b78c:	460b      	mov	r3, r1
		{
			//check if it's beyond the hysteresis

			//find closest note in chord upward from lastNearNote
			int upNote = 0;
 801b78e:	2400      	movs	r4, #0
			int downNote = 128;
			int i = lastNearNote;
			while ((i < 128) && (upNote == 0))
			{
				i++;
				if (chord[i%12] > 0)
 801b790:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 801b884 <nearestNoteWithHysteresis+0x204>
 801b794:	e00f      	b.n	801b7b6 <nearestNoteWithHysteresis+0x136>
 801b796:	ebc2 0265 	rsb	r2, r2, r5, asr #1
			while ((i < 128) && (upNote == 0))
 801b79a:	b9a4      	cbnz	r4, 801b7c6 <nearestNoteWithHysteresis+0x146>
				if (chord[i%12] > 0)
 801b79c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b7a0:	eba3 0282 	sub.w	r2, r3, r2, lsl #2
 801b7a4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801b7a8:	2a00      	cmp	r2, #0
 801b7aa:	bfcc      	ite	gt
 801b7ac:	461c      	movgt	r4, r3
 801b7ae:	2400      	movle	r4, #0
				{
					upNote = i;
				}
				if (i == 128)
				{
					upNote = 128;
 801b7b0:	2b80      	cmp	r3, #128	; 0x80
 801b7b2:	bf08      	it	eq
 801b7b4:	461c      	moveq	r4, r3
			while ((i < 128) && (upNote == 0))
 801b7b6:	2b7f      	cmp	r3, #127	; 0x7f
				i++;
 801b7b8:	f103 0301 	add.w	r3, r3, #1
				if (chord[i%12] > 0)
 801b7bc:	fb8c 2503 	smull	r2, r5, ip, r3
 801b7c0:	ea4f 72e3 	mov.w	r2, r3, asr #31
			while ((i < 128) && (upNote == 0))
 801b7c4:	dde7      	ble.n	801b796 <nearestNoteWithHysteresis+0x116>
			int downNote = 128;
 801b7c6:	2280      	movs	r2, #128	; 0x80
			}
			i = lastNearNote;
			while ((i > 0) && (downNote == 128))
			{
				i--;
				if (chord[i%12] > 0)
 801b7c8:	4d2d      	ldr	r5, [pc, #180]	; (801b880 <nearestNoteWithHysteresis+0x200>)
 801b7ca:	e010      	b.n	801b7ee <nearestNoteWithHysteresis+0x16e>
			while ((i > 0) && (downNote == 128))
 801b7cc:	2a80      	cmp	r2, #128	; 0x80
				if (chord[i%12] > 0)
 801b7ce:	ea4f 03d3 	mov.w	r3, r3, lsr #3
			while ((i > 0) && (downNote == 128))
 801b7d2:	d112      	bne.n	801b7fa <nearestNoteWithHysteresis+0x17a>
				if (chord[i%12] > 0)
 801b7d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b7d8:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
 801b7dc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	bfcc      	ite	gt
 801b7e4:	460a      	movgt	r2, r1
 801b7e6:	2280      	movle	r2, #128	; 0x80
				{
					downNote = i;
				}
				if (i == 0)
				{
					downNote = 0;
 801b7e8:	2900      	cmp	r1, #0
 801b7ea:	bf08      	it	eq
 801b7ec:	460a      	moveq	r2, r1
			while ((i > 0) && (downNote == 128))
 801b7ee:	2900      	cmp	r1, #0
				i--;
 801b7f0:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
				if (chord[i%12] > 0)
 801b7f4:	fba5 c301 	umull	ip, r3, r5, r1
			while ((i > 0) && (downNote == 128))
 801b7f8:	dce8      	bgt.n	801b7cc <nearestNoteWithHysteresis+0x14c>
				}
			}
			//now should have adjacent notes in array available
			//calculate the differences that should be necessary to move away
			float upperNearHyst = (notes[upNote] - notes[lastNearNote]) * hysteresis;
			float lowerNearHyst = (notes[lastNearNote] - notes[downNote]) * -hysteresis;
 801b7fa:	eb07 0282 	add.w	r2, r7, r2, lsl #2

			float theDifference = note - notes[lastNearNote];
 801b7fe:	ee78 8ac0 	vsub.f32	s17, s17, s0
			float lowerNearHyst = (notes[lastNearNote] - notes[downNote]) * -hysteresis;
 801b802:	edd2 7a00 	vldr	s15, [r2]
 801b806:	ee70 7a67 	vsub.f32	s15, s0, s15
			if ((theDifference > upperNearHyst) || (theDifference < lowerNearHyst))
 801b80a:	ee69 7a67 	vnmul.f32	s15, s18, s15
 801b80e:	eef4 7ae8 	vcmpe.f32	s15, s17
 801b812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b816:	dc0c      	bgt.n	801b832 <nearestNoteWithHysteresis+0x1b2>
			float upperNearHyst = (notes[upNote] - notes[lastNearNote]) * hysteresis;
 801b818:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801b81c:	edd4 7a00 	vldr	s15, [r4]
 801b820:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b824:	ee27 9a89 	vmul.f32	s18, s15, s18
			if ((theDifference > upperNearHyst) || (theDifference < lowerNearHyst))
 801b828:	eeb4 9a68 	vcmp.f32	s18, s17
 801b82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b830:	d504      	bpl.n	801b83c <nearestNoteWithHysteresis+0x1bc>
			{
				output = notes[nearIndex];
 801b832:	eb07 0786 	add.w	r7, r7, r6, lsl #2
				lastNearNote = nearIndex;
 801b836:	6006      	str	r6, [r0, #0]
				output = notes[nearIndex];
 801b838:	ed97 0a00 	vldr	s0, [r7]
	else
	{
		output = -1.0f; //signal that there are no notes to snap to
	}
	return output;
}
 801b83c:	ecbd 8b04 	vpop	{d8-d9}
 801b840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (chord[i] > 0)
 801b844:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801b848:	2a00      	cmp	r2, #0
 801b84a:	f73f af6e 	bgt.w	801b72a <nearestNoteWithHysteresis+0xaa>
	if (hasNotes)
 801b84e:	2b00      	cmp	r3, #0
 801b850:	f47f af6b 	bne.w	801b72a <nearestNoteWithHysteresis+0xaa>
		output = -1.0f; //signal that there are no notes to snap to
 801b854:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 801b858:	ecbd 8b04 	vpop	{d8-d9}
 801b85c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b860:	20016448 	.word	0x20016448
 801b864:	2000051c 	.word	0x2000051c
 801b868:	20000530 	.word	0x20000530
 801b86c:	20000520 	.word	0x20000520
 801b870:	200001f0 	.word	0x200001f0
 801b874:	200005a8 	.word	0x200005a8
 801b878:	2001644c 	.word	0x2001644c
 801b87c:	20000248 	.word	0x20000248
 801b880:	aaaaaaab 	.word	0xaaaaaaab
 801b884:	2aaaaaab 	.word	0x2aaaaaab

0801b888 <SFXNeartuneTick>:
{
 801b888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b88a:	ed2d 8b02 	vpush	{d8}
	displayValues[0] = 0.5f + (presetKnobValues[AutotuneMono][0] * 0.49f); //fidelity
 801b88e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801b892:	4d75      	ldr	r5, [pc, #468]	; (801ba68 <SFXNeartuneTick+0x1e0>)
 801b894:	eddf 7a75 	vldr	s15, [pc, #468]	; 801ba6c <SFXNeartuneTick+0x1e4>
{
 801b898:	b083      	sub	sp, #12
	displayValues[0] = 0.5f + (presetKnobValues[AutotuneMono][0] * 0.49f); //fidelity
 801b89a:	ed95 7a4b 	vldr	s14, [r5, #300]	; 0x12c
{
 801b89e:	4606      	mov	r6, r0
	displayValues[0] = 0.5f + (presetKnobValues[AutotuneMono][0] * 0.49f); //fidelity
 801b8a0:	eef0 6a48 	vmov.f32	s13, s16
 801b8a4:	4c72      	ldr	r4, [pc, #456]	; (801ba70 <SFXNeartuneTick+0x1e8>)
	tRetune_setFidelityThreshold(&autotuneMono, displayValues[0]);
 801b8a6:	4873      	ldr	r0, [pc, #460]	; (801ba74 <SFXNeartuneTick+0x1ec>)
	displayValues[0] = 0.5f + (presetKnobValues[AutotuneMono][0] * 0.49f); //fidelity
 801b8a8:	eee7 6a27 	vfma.f32	s13, s14, s15
	tRetune_setFidelityThreshold(&autotuneMono, displayValues[0]);
 801b8ac:	eeb0 0a66 	vmov.f32	s0, s13
	displayValues[0] = 0.5f + (presetKnobValues[AutotuneMono][0] * 0.49f); //fidelity
 801b8b0:	edc4 6a00 	vstr	s13, [r4]
	tRetune_setFidelityThreshold(&autotuneMono, displayValues[0]);
 801b8b4:	f005 ffcc 	bl	8021850 <tRetune_setFidelityThreshold>
	displayValues[1] = LEAF_clip(0.0f, presetKnobValues[AutotuneMono][1] * 1.1f, 1.0f); // amount of forcing to new pitch
 801b8b8:	eddf 7a6f 	vldr	s15, [pc, #444]	; 801ba78 <SFXNeartuneTick+0x1f0>
 801b8bc:	edd5 0a4c 	vldr	s1, [r5, #304]	; 0x130
 801b8c0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801b8c4:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801ba7c <SFXNeartuneTick+0x1f4>
 801b8c8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801b8cc:	f008 fd58 	bl	8024380 <LEAF_clip>
	displayValues[3] = presetKnobValues[AutotuneMono][3] * 12.0f;
 801b8d0:	eef2 5a08 	vmov.f32	s11, #40	; 0x41400000  12.0
 801b8d4:	edd5 7a4e 	vldr	s15, [r5, #312]	; 0x138
	displayValues[4] = (presetKnobValues[AutotuneMono][4] * 0.5f) + 0.5f;
 801b8d8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	displayValues[2] = presetKnobValues[AutotuneMono][2]; //speed to get to desired pitch shift
 801b8dc:	edd5 6a4d 	vldr	s13, [r5, #308]	; 0x134
	displayValues[3] = presetKnobValues[AutotuneMono][3] * 12.0f;
 801b8e0:	ee67 7aa5 	vmul.f32	s15, s15, s11
	displayValues[4] = (presetKnobValues[AutotuneMono][4] * 0.5f) + 0.5f;
 801b8e4:	ed95 7a4f 	vldr	s14, [r5, #316]	; 0x13c
	if (displayValues[2] > .90f)
 801b8e8:	eddf 5a65 	vldr	s11, [pc, #404]	; 801ba80 <SFXNeartuneTick+0x1f8>
	displayValues[4] = (presetKnobValues[AutotuneMono][4] * 0.5f) + 0.5f;
 801b8ec:	ee37 7a06 	vadd.f32	s14, s14, s12
	displayValues[1] = LEAF_clip(0.0f, presetKnobValues[AutotuneMono][1] * 1.1f, 1.0f); // amount of forcing to new pitch
 801b8f0:	ed84 0a01 	vstr	s0, [r4, #4]
	if (displayValues[2] > .90f)
 801b8f4:	eef4 6ae5 	vcmpe.f32	s13, s11
	displayValues[2] = presetKnobValues[AutotuneMono][2]; //speed to get to desired pitch shift
 801b8f8:	edc4 6a02 	vstr	s13, [r4, #8]
	displayValues[3] = presetKnobValues[AutotuneMono][3] * 12.0f;
 801b8fc:	edc4 7a03 	vstr	s15, [r4, #12]
	displayValues[4] = (presetKnobValues[AutotuneMono][4] * 0.5f) + 0.5f;
 801b900:	ee27 7a08 	vmul.f32	s14, s14, s16
	if (displayValues[2] > .90f)
 801b904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	displayValues[4] = (presetKnobValues[AutotuneMono][4] * 0.5f) + 0.5f;
 801b908:	ed84 7a04 	vstr	s14, [r4, #16]
	if (displayValues[2] > .90f)
 801b90c:	f300 8084 	bgt.w	801ba18 <SFXNeartuneTick+0x190>
 801b910:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801b914:	ee67 7aa6 	vmul.f32	s15, s15, s13
	tExpSmooth_setFactor(&neartune_smoother, expBuffer[(int)(displayValues[2] * displayValues[2] * displayValues[2] * expBufferSizeMinusOne)]);
 801b918:	4a5a      	ldr	r2, [pc, #360]	; (801ba84 <SFXNeartuneTick+0x1fc>)
 801b91a:	4b5b      	ldr	r3, [pc, #364]	; (801ba88 <SFXNeartuneTick+0x200>)
 801b91c:	ed92 7a00 	vldr	s14, [r2]
 801b920:	485a      	ldr	r0, [pc, #360]	; (801ba8c <SFXNeartuneTick+0x204>)
 801b922:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b92a:	ee17 2a90 	vmov	r2, s15
 801b92e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801b932:	ed93 0a00 	vldr	s0, [r3]
 801b936:	f007 f87d 	bl	8022a34 <tExpSmooth_setFactor>
	float destFactor = tExpSmooth_tick(&neartune_smoother);
 801b93a:	4854      	ldr	r0, [pc, #336]	; (801ba8c <SFXNeartuneTick+0x204>)
 801b93c:	f007 f896 	bl	8022a6c <tExpSmooth_tick>
	float detectedPeriod = tRetune_getInputPeriod(&autotuneMono);
 801b940:	484c      	ldr	r0, [pc, #304]	; (801ba74 <SFXNeartuneTick+0x1ec>)
	float destFactor = tExpSmooth_tick(&neartune_smoother);
 801b942:	eef0 8a40 	vmov.f32	s17, s0
	float detectedPeriod = tRetune_getInputPeriod(&autotuneMono);
 801b946:	f005 ff87 	bl	8021858 <tRetune_getInputPeriod>
	if (detectedPeriod > 0.0f)
 801b94a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b952:	dd3b      	ble.n	801b9cc <SFXNeartuneTick+0x144>
		detectedNote = LEAF_frequencyToMidi(1.0f / detectedPeriod);
 801b954:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801b958:	4d4d      	ldr	r5, [pc, #308]	; (801ba90 <SFXNeartuneTick+0x208>)
 801b95a:	ee88 0a00 	vdiv.f32	s0, s16, s0
 801b95e:	f008 fca1 	bl	80242a4 <LEAF_frequencyToMidi>
		desiredSnap = nearestNoteWithHysteresis(detectedNote, displayValues[4]);
 801b962:	edd4 0a04 	vldr	s1, [r4, #16]
		detectedNote = LEAF_frequencyToMidi(1.0f / detectedPeriod);
 801b966:	ed85 0a00 	vstr	s0, [r5]
		desiredSnap = nearestNoteWithHysteresis(detectedNote, displayValues[4]);
 801b96a:	f7ff fe89 	bl	801b680 <nearestNoteWithHysteresis>
 801b96e:	4b49      	ldr	r3, [pc, #292]	; (801ba94 <SFXNeartuneTick+0x20c>)
		if (desiredSnap > 0.0f)
 801b970:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		desiredSnap = nearestNoteWithHysteresis(detectedNote, displayValues[4]);
 801b974:	ed83 0a00 	vstr	s0, [r3]
		if (desiredSnap > 0.0f)
 801b978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b97c:	dd68      	ble.n	801ba50 <SFXNeartuneTick+0x1c8>
			destinationNote = (desiredSnap * displayValues[1]) + (detectedNote * (1.0f - displayValues[1]));
 801b97e:	edd4 6a01 	vldr	s13, [r4, #4]
 801b982:	edd5 7a00 	vldr	s15, [r5]
 801b986:	ee38 8a66 	vsub.f32	s16, s16, s13
			factorDiff = (fabsf(destinationNote-lastSnap));
 801b98a:	4c43      	ldr	r4, [pc, #268]	; (801ba98 <SFXNeartuneTick+0x210>)
			changeAmount = (fabsf(destinationNote-detectedNote));
 801b98c:	4a43      	ldr	r2, [pc, #268]	; (801ba9c <SFXNeartuneTick+0x214>)
			factorDiff = (fabsf(destinationNote-lastSnap));
 801b98e:	ed94 7a00 	vldr	s14, [r4]
			destinationNote = (desiredSnap * displayValues[1]) + (detectedNote * (1.0f - displayValues[1]));
 801b992:	ee28 8a27 	vmul.f32	s16, s16, s15
			factorDiff = (fabsf(destinationNote-lastSnap));
 801b996:	4b42      	ldr	r3, [pc, #264]	; (801baa0 <SFXNeartuneTick+0x218>)
			destinationNote = (desiredSnap * displayValues[1]) + (detectedNote * (1.0f - displayValues[1]));
 801b998:	4f42      	ldr	r7, [pc, #264]	; (801baa4 <SFXNeartuneTick+0x21c>)
 801b99a:	eea0 8a26 	vfma.f32	s16, s0, s13
			if ((changeAmount < 11.9))
 801b99e:	ed9f 6b30 	vldr	d6, [pc, #192]	; 801ba60 <SFXNeartuneTick+0x1d8>
			changeAmount = (fabsf(destinationNote-detectedNote));
 801b9a2:	ee78 7a67 	vsub.f32	s15, s16, s15
			destinationNote = (desiredSnap * displayValues[1]) + (detectedNote * (1.0f - displayValues[1]));
 801b9a6:	ed87 8a00 	vstr	s16, [r7]
			factorDiff = (fabsf(destinationNote-lastSnap));
 801b9aa:	ee38 7a47 	vsub.f32	s14, s16, s14
			changeAmount = (fabsf(destinationNote-detectedNote));
 801b9ae:	eef0 7ae7 	vabs.f32	s15, s15
			factorDiff = (fabsf(destinationNote-lastSnap));
 801b9b2:	eeb0 7ac7 	vabs.f32	s14, s14
			if ((changeAmount < 11.9))
 801b9b6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			changeAmount = (fabsf(destinationNote-detectedNote));
 801b9ba:	edc2 7a00 	vstr	s15, [r2]
			factorDiff = (fabsf(destinationNote-lastSnap));
 801b9be:	ed83 7a00 	vstr	s14, [r3]
			if ((changeAmount < 11.9))
 801b9c2:	eeb4 5bc6 	vcmpe.f64	d5, d6
 801b9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9ca:	d42a      	bmi.n	801ba22 <SFXNeartuneTick+0x19a>
	tRetune_setPitchFactor(&autotuneMono, destFactor, 0);
 801b9cc:	2100      	movs	r1, #0
 801b9ce:	eeb0 0a68 	vmov.f32	s0, s17
 801b9d2:	4828      	ldr	r0, [pc, #160]	; (801ba74 <SFXNeartuneTick+0x1ec>)
 801b9d4:	f005 ff2a 	bl	802182c <tRetune_setPitchFactor>
	float* samples = tRetune_tick(&autotuneMono, input[1]);
 801b9d8:	ed96 0a01 	vldr	s0, [r6, #4]
 801b9dc:	4825      	ldr	r0, [pc, #148]	; (801ba74 <SFXNeartuneTick+0x1ec>)
 801b9de:	f005 fe51 	bl	8021684 <tRetune_tick>
 801b9e2:	4604      	mov	r4, r0
	LEAF_crossfade(tRamp_tick(&nearWetRamp), fades);
 801b9e4:	4830      	ldr	r0, [pc, #192]	; (801baa8 <SFXNeartuneTick+0x220>)
 801b9e6:	f006 ffa5 	bl	8022934 <tRamp_tick>
 801b9ea:	4668      	mov	r0, sp
 801b9ec:	f008 fc44 	bl	8024278 <LEAF_crossfade>
	sample += input[1] * fades[1]; // crossfade to dry signal if no notes held down.
 801b9f0:	edd6 7a01 	vldr	s15, [r6, #4]
 801b9f4:	ed9d 7a01 	vldr	s14, [sp, #4]
 801b9f8:	edd4 6a00 	vldr	s13, [r4]
 801b9fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ba00:	ed9d 7a00 	vldr	s14, [sp]
 801ba04:	eee6 7a87 	vfma.f32	s15, s13, s14
	input[0] = sample;
 801ba08:	edc6 7a00 	vstr	s15, [r6]
	input[1] = sample;
 801ba0c:	edc6 7a01 	vstr	s15, [r6, #4]
}
 801ba10:	b003      	add	sp, #12
 801ba12:	ecbd 8b02 	vpop	{d8}
 801ba16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		displayValues[2] = 1.0f;
 801ba18:	eef0 7a46 	vmov.f32	s15, s12
 801ba1c:	ed84 6a02 	vstr	s12, [r4, #8]
 801ba20:	e77a      	b.n	801b918 <SFXNeartuneTick+0x90>
				destinationFactor = (LEAF_midiToFrequency(destinationNote) / LEAF_midiToFrequency(detectedNote));
 801ba22:	eeb0 0a48 	vmov.f32	s0, s16
 801ba26:	f008 fd95 	bl	8024554 <LEAF_midiToFrequency>
 801ba2a:	eeb0 8a40 	vmov.f32	s16, s0
 801ba2e:	ed95 0a00 	vldr	s0, [r5]
 801ba32:	f008 fd8f 	bl	8024554 <LEAF_midiToFrequency>
 801ba36:	4b1d      	ldr	r3, [pc, #116]	; (801baac <SFXNeartuneTick+0x224>)
 801ba38:	eec8 7a00 	vdiv.f32	s15, s16, s0
				tExpSmooth_setDest(&neartune_smoother, destinationFactor);
 801ba3c:	4813      	ldr	r0, [pc, #76]	; (801ba8c <SFXNeartuneTick+0x204>)
 801ba3e:	eeb0 0a67 	vmov.f32	s0, s15
				destinationFactor = (LEAF_midiToFrequency(destinationNote) / LEAF_midiToFrequency(detectedNote));
 801ba42:	edc3 7a00 	vstr	s15, [r3]
				tExpSmooth_setDest(&neartune_smoother, destinationFactor);
 801ba46:	f007 f807 	bl	8022a58 <tExpSmooth_setDest>
				lastSnap = destinationNote;
 801ba4a:	683b      	ldr	r3, [r7, #0]
 801ba4c:	6023      	str	r3, [r4, #0]
 801ba4e:	e7bd      	b.n	801b9cc <SFXNeartuneTick+0x144>
			tExpSmooth_setDest(&neartune_smoother, 1.0f);
 801ba50:	eeb0 0a48 	vmov.f32	s0, s16
 801ba54:	480d      	ldr	r0, [pc, #52]	; (801ba8c <SFXNeartuneTick+0x204>)
 801ba56:	f006 ffff 	bl	8022a58 <tExpSmooth_setDest>
 801ba5a:	e7b7      	b.n	801b9cc <SFXNeartuneTick+0x144>
 801ba5c:	f3af 8000 	nop.w
 801ba60:	cccccccd 	.word	0xcccccccd
 801ba64:	4027cccc 	.word	0x4027cccc
 801ba68:	20016710 	.word	0x20016710
 801ba6c:	3efae148 	.word	0x3efae148
 801ba70:	200187c4 	.word	0x200187c4
 801ba74:	2001754c 	.word	0x2001754c
 801ba78:	3f8ccccd 	.word	0x3f8ccccd
 801ba7c:	00000000 	.word	0x00000000
 801ba80:	3f666666 	.word	0x3f666666
 801ba84:	20000238 	.word	0x20000238
 801ba88:	2001707c 	.word	0x2001707c
 801ba8c:	2001761c 	.word	0x2001761c
 801ba90:	20000230 	.word	0x20000230
 801ba94:	20000224 	.word	0x20000224
 801ba98:	2000024c 	.word	0x2000024c
 801ba9c:	2000052c 	.word	0x2000052c
 801baa0:	20000580 	.word	0x20000580
 801baa4:	2000022c 	.word	0x2000022c
 801baa8:	20018394 	.word	0x20018394
 801baac:	20000228 	.word	0x20000228

0801bab0 <noteOff>:
}

void noteOff(int key, int velocity)
{
	UNUSED(velocity);
	if (chordArray[key%12] > 0) chordArray[key%12]--;
 801bab0:	4a48      	ldr	r2, [pc, #288]	; (801bbd4 <noteOff+0x124>)
 801bab2:	4949      	ldr	r1, [pc, #292]	; (801bbd8 <noteOff+0x128>)
 801bab4:	fb82 3200 	smull	r3, r2, r2, r0
 801bab8:	17c3      	asrs	r3, r0, #31
 801baba:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 801babe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bac2:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
{
 801bac6:	b570      	push	{r4, r5, r6, lr}
	if (chordArray[key%12] > 0) chordArray[key%12]--;
 801bac8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
{
 801bacc:	4604      	mov	r4, r0
	if (chordArray[key%12] > 0) chordArray[key%12]--;
 801bace:	2a00      	cmp	r2, #0
 801bad0:	dd02      	ble.n	801bad8 <noteOff+0x28>
 801bad2:	3a01      	subs	r2, #1
 801bad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]



	if (currentPreset == Rhodes)
 801bad8:	4b40      	ldr	r3, [pc, #256]	; (801bbdc <noteOff+0x12c>)
 801bada:	781b      	ldrb	r3, [r3, #0]
 801badc:	2b11      	cmp	r3, #17
 801bade:	d031      	beq.n	801bb44 <noteOff+0x94>
				tADSR4_off(&FM_envs[voice][j]);
			}
		}

	}
	else if (currentPreset == ClassicSynth)
 801bae0:	2b10      	cmp	r3, #16
 801bae2:	d04c      	beq.n	801bb7e <noteOff+0xce>
			tADSR4_off(&polyEnvs[voice]);
			tADSR4_off(&polyFiltEnvs[voice]);
		}
	}

	else if (currentPreset == SamplerKeyboard)
 801bae4:	2b06      	cmp	r3, #6
 801bae6:	d00b      	beq.n	801bb00 <noteOff+0x50>
			UISamplerKButtons(ButtonC, ActionHoldContinuous);
			tSampler_stop(&keySampler[key-LOWEST_SAMPLER_KEY]);
			//waitingForDeactivation[voice] = key;
		}
	}
	else if (currentPreset == LivingStringSynth)
 801bae8:	2b0f      	cmp	r3, #15
 801baea:	b2e1      	uxtb	r1, r4
	{
		int voice;

		voice = tSimplePoly_noteOff(&poly, key); //if we're monophonic, we need to allow fast voice stealing and returning to previous stolen notes without regard for the release envelopes
 801baec:	483c      	ldr	r0, [pc, #240]	; (801bbe0 <noteOff+0x130>)
	else if (currentPreset == LivingStringSynth)
 801baee:	d05b      	beq.n	801bba8 <noteOff+0xf8>
			tADSR4_off(&pluckEnvs[voice]);
		}
	}
	else
	{
		tSimplePoly_noteOff(&poly, key);
 801baf0:	f009 f956 	bl	8024da0 <tSimplePoly_noteOff>
	}

	if (tSimplePoly_getNumActiveVoices(&poly) < 1)
 801baf4:	483a      	ldr	r0, [pc, #232]	; (801bbe0 <noteOff+0x130>)
 801baf6:	f009 faaf 	bl	8025058 <tSimplePoly_getNumActiveVoices>
 801bafa:	2800      	cmp	r0, #0
 801bafc:	dd1d      	ble.n	801bb3a <noteOff+0x8a>
	{
		setLED_2(0);
	}

}
 801bafe:	bd70      	pop	{r4, r5, r6, pc}
		if (key >= LOWEST_SAMPLER_KEY && key < LOWEST_SAMPLER_KEY + NUM_SAMPLER_KEYS)
 801bb00:	3c24      	subs	r4, #36	; 0x24
 801bb02:	2c30      	cmp	r4, #48	; 0x30
 801bb04:	d8f6      	bhi.n	801baf4 <noteOff+0x44>
 801bb06:	00a6      	lsls	r6, r4, #2
			if (tBuffer_isActive(&keyBuff[key-LOWEST_SAMPLER_KEY]) == 1)
 801bb08:	4d36      	ldr	r5, [pc, #216]	; (801bbe4 <noteOff+0x134>)
 801bb0a:	4435      	add	r5, r6
 801bb0c:	4628      	mov	r0, r5
 801bb0e:	f00a febd 	bl	802688c <tBuffer_isActive>
 801bb12:	2801      	cmp	r0, #1
 801bb14:	d055      	beq.n	801bbc2 <noteOff+0x112>
				tExpSmooth_setDest(&kSamplerGains[key-LOWEST_SAMPLER_KEY], 0.0f);
 801bb16:	4834      	ldr	r0, [pc, #208]	; (801bbe8 <noteOff+0x138>)
 801bb18:	ed9f 0a34 	vldr	s0, [pc, #208]	; 801bbec <noteOff+0x13c>
 801bb1c:	4430      	add	r0, r6
 801bb1e:	f006 ff9b 	bl	8022a58 <tExpSmooth_setDest>
			samplerKeyHeld[key-LOWEST_SAMPLER_KEY] = 0;
 801bb22:	4b33      	ldr	r3, [pc, #204]	; (801bbf0 <noteOff+0x140>)
 801bb24:	2200      	movs	r2, #0
			UISamplerKButtons(ButtonC, ActionHoldContinuous);
 801bb26:	2103      	movs	r1, #3
 801bb28:	2007      	movs	r0, #7
			samplerKeyHeld[key-LOWEST_SAMPLER_KEY] = 0;
 801bb2a:	551a      	strb	r2, [r3, r4]
			UISamplerKButtons(ButtonC, ActionHoldContinuous);
 801bb2c:	f002 f8de 	bl	801dcec <UISamplerKButtons>
			tSampler_stop(&keySampler[key-LOWEST_SAMPLER_KEY]);
 801bb30:	4830      	ldr	r0, [pc, #192]	; (801bbf4 <noteOff+0x144>)
 801bb32:	4430      	add	r0, r6
 801bb34:	f00a ffc0 	bl	8026ab8 <tSampler_stop>
 801bb38:	e7dc      	b.n	801baf4 <noteOff+0x44>
		setLED_2(0);
 801bb3a:	2000      	movs	r0, #0
}
 801bb3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		setLED_2(0);
 801bb40:	f7f8 b8aa 	b.w	8013c98 <setLED_2>
		if (tSimplePoly_getNumVoices(&poly) > 1)
 801bb44:	4826      	ldr	r0, [pc, #152]	; (801bbe0 <noteOff+0x130>)
 801bb46:	f009 fa83 	bl	8025050 <tSimplePoly_getNumVoices>
 801bb4a:	2801      	cmp	r0, #1
 801bb4c:	b2e1      	uxtb	r1, r4
			voice = tSimplePoly_markPendingNoteOff(&poly, key); //if we're polyphonic, we need to let release envelopes happen and not mark voices free when they are not
 801bb4e:	4824      	ldr	r0, [pc, #144]	; (801bbe0 <noteOff+0x130>)
		if (tSimplePoly_getNumVoices(&poly) > 1)
 801bb50:	dd12      	ble.n	801bb78 <noteOff+0xc8>
			voice = tSimplePoly_markPendingNoteOff(&poly, key); //if we're polyphonic, we need to let release envelopes happen and not mark voices free when they are not
 801bb52:	f009 fa09 	bl	8024f68 <tSimplePoly_markPendingNoteOff>
		if (voice >= 0)
 801bb56:	2800      	cmp	r0, #0
 801bb58:	dbcc      	blt.n	801baf4 <noteOff+0x44>
 801bb5a:	4c27      	ldr	r4, [pc, #156]	; (801bbf8 <noteOff+0x148>)
 801bb5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bb60:	f104 0518 	add.w	r5, r4, #24
 801bb64:	00c0      	lsls	r0, r0, #3
 801bb66:	4404      	add	r4, r0
 801bb68:	4405      	add	r5, r0
				tADSR4_off(&FM_envs[voice][j]);
 801bb6a:	4620      	mov	r0, r4
 801bb6c:	3404      	adds	r4, #4
 801bb6e:	f006 fc33 	bl	80223d8 <tADSR4_off>
			for (int j = 0; j < 6; j++)
 801bb72:	42a5      	cmp	r5, r4
 801bb74:	d1f9      	bne.n	801bb6a <noteOff+0xba>
 801bb76:	e7bd      	b.n	801baf4 <noteOff+0x44>
			voice = tSimplePoly_noteOff(&poly, key); //if we're monophonic, we need to allow fast voice stealing and returning to previous stolen notes without regard for the release envelopes
 801bb78:	f009 f912 	bl	8024da0 <tSimplePoly_noteOff>
 801bb7c:	e7eb      	b.n	801bb56 <noteOff+0xa6>
		if (tSimplePoly_getNumVoices(&poly) > 1)
 801bb7e:	4818      	ldr	r0, [pc, #96]	; (801bbe0 <noteOff+0x130>)
 801bb80:	f009 fa66 	bl	8025050 <tSimplePoly_getNumVoices>
 801bb84:	2801      	cmp	r0, #1
 801bb86:	b2e1      	uxtb	r1, r4
			voice = tSimplePoly_markPendingNoteOff(&poly, key); //if we're polyphonic, we need to let release envelopes happen and not mark voices free when they are not
 801bb88:	4815      	ldr	r0, [pc, #84]	; (801bbe0 <noteOff+0x130>)
		if (tSimplePoly_getNumVoices(&poly) > 1)
 801bb8a:	dd17      	ble.n	801bbbc <noteOff+0x10c>
			voice = tSimplePoly_markPendingNoteOff(&poly, key); //if we're polyphonic, we need to let release envelopes happen and not mark voices free when they are not
 801bb8c:	f009 f9ec 	bl	8024f68 <tSimplePoly_markPendingNoteOff>
		if (voice >= 0)
 801bb90:	2800      	cmp	r0, #0
 801bb92:	dbaf      	blt.n	801baf4 <noteOff+0x44>
 801bb94:	0084      	lsls	r4, r0, #2
			tADSR4_off(&polyEnvs[voice]);
 801bb96:	4819      	ldr	r0, [pc, #100]	; (801bbfc <noteOff+0x14c>)
 801bb98:	4420      	add	r0, r4
 801bb9a:	f006 fc1d 	bl	80223d8 <tADSR4_off>
			tADSR4_off(&polyFiltEnvs[voice]);
 801bb9e:	4818      	ldr	r0, [pc, #96]	; (801bc00 <noteOff+0x150>)
 801bba0:	4420      	add	r0, r4
 801bba2:	f006 fc19 	bl	80223d8 <tADSR4_off>
 801bba6:	e7a5      	b.n	801baf4 <noteOff+0x44>
		voice = tSimplePoly_noteOff(&poly, key); //if we're monophonic, we need to allow fast voice stealing and returning to previous stolen notes without regard for the release envelopes
 801bba8:	f009 f8fa 	bl	8024da0 <tSimplePoly_noteOff>
		if (voice >= 0)
 801bbac:	2800      	cmp	r0, #0
 801bbae:	dba1      	blt.n	801baf4 <noteOff+0x44>
			tADSR4_off(&pluckEnvs[voice]);
 801bbb0:	4b14      	ldr	r3, [pc, #80]	; (801bc04 <noteOff+0x154>)
 801bbb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801bbb6:	f006 fc0f 	bl	80223d8 <tADSR4_off>
 801bbba:	e79b      	b.n	801baf4 <noteOff+0x44>
			voice = tSimplePoly_noteOff(&poly, key); //if we're monophonic, we need to allow fast voice stealing and returning to previous stolen notes without regard for the release envelopes
 801bbbc:	f009 f8f0 	bl	8024da0 <tSimplePoly_noteOff>
 801bbc0:	e7e6      	b.n	801bb90 <noteOff+0xe0>
				tBuffer_stop(&keyBuff[key-LOWEST_SAMPLER_KEY]);
 801bbc2:	4628      	mov	r0, r5
 801bbc4:	f00a fe4a 	bl	802685c <tBuffer_stop>
				UISamplerKButtons(ButtonUp, ActionPress);
 801bbc8:	2100      	movs	r1, #0
 801bbca:	2004      	movs	r0, #4
 801bbcc:	f002 f88e 	bl	801dcec <UISamplerKButtons>
 801bbd0:	e7a7      	b.n	801bb22 <noteOff+0x72>
 801bbd2:	bf00      	nop
 801bbd4:	2aaaaaab 	.word	0x2aaaaaab
 801bbd8:	20000530 	.word	0x20000530
 801bbdc:	20000655 	.word	0x20000655
 801bbe0:	20017554 	.word	0x20017554
 801bbe4:	20018198 	.word	0x20018198
 801bbe8:	2001608c 	.word	0x2001608c
 801bbec:	00000000 	.word	0x00000000
 801bbf0:	2001776c 	.word	0x2001776c
 801bbf4:	20016f2c 	.word	0x20016f2c
 801bbf8:	2001755c 	.word	0x2001755c
 801bbfc:	200176d0 	.word	0x200176d0
 801bc00:	20015948 	.word	0x20015948
 801bc04:	20017440 	.word	0x20017440

0801bc08 <noteOn>:
	if (!velocity)
 801bc08:	2900      	cmp	r1, #0
 801bc0a:	d038      	beq.n	801bc7e <noteOn+0x76>
		chordArray[key%12]++;
 801bc0c:	4a93      	ldr	r2, [pc, #588]	; (801be5c <noteOn+0x254>)
{
 801bc0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc12:	4604      	mov	r4, r0
 801bc14:	460d      	mov	r5, r1
		chordArray[key%12]++;
 801bc16:	17c3      	asrs	r3, r0, #31
 801bc18:	4891      	ldr	r0, [pc, #580]	; (801be60 <noteOn+0x258>)
 801bc1a:	fb82 1204 	smull	r1, r2, r2, r4
		if (currentPreset == AutotuneMono)
 801bc1e:	4991      	ldr	r1, [pc, #580]	; (801be64 <noteOn+0x25c>)
		chordArray[key%12]++;
 801bc20:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 801bc24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc28:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
{
 801bc2c:	ed2d 8b02 	vpush	{d8}
		chordArray[key%12]++;
 801bc30:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
		if (currentPreset == AutotuneMono)
 801bc34:	7809      	ldrb	r1, [r1, #0]
		chordArray[key%12]++;
 801bc36:	3201      	adds	r2, #1
		if (currentPreset == AutotuneMono)
 801bc38:	2903      	cmp	r1, #3
		chordArray[key%12]++;
 801bc3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (currentPreset == AutotuneMono)
 801bc3e:	d00f      	beq.n	801bc60 <noteOn+0x58>
		if (currentPreset == Rhodes)
 801bc40:	2911      	cmp	r1, #17
 801bc42:	d039      	beq.n	801bcb8 <noteOn+0xb0>
		else if (currentPreset == ClassicSynth)
 801bc44:	2910      	cmp	r1, #16
 801bc46:	d05e      	beq.n	801bd06 <noteOn+0xfe>
		else if (currentPreset == SamplerKeyboard)
 801bc48:	2906      	cmp	r1, #6
 801bc4a:	d122      	bne.n	801bc92 <noteOn+0x8a>
			if ((key >= LOWEST_SAMPLER_KEY) && key < (LOWEST_SAMPLER_KEY + NUM_SAMPLER_KEYS))
 801bc4c:	3c24      	subs	r4, #36	; 0x24
 801bc4e:	2c30      	cmp	r4, #48	; 0x30
 801bc50:	d972      	bls.n	801bd38 <noteOn+0x130>
		setLED_2(1);
 801bc52:	2001      	movs	r0, #1
}
 801bc54:	ecbd 8b02 	vpop	{d8}
 801bc58:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		setLED_2(1);
 801bc5c:	f7f8 b81c 	b.w	8013c98 <setLED_2>
			if (autotuneLock)
 801bc60:	4a81      	ldr	r2, [pc, #516]	; (801be68 <noteOn+0x260>)
 801bc62:	6812      	ldr	r2, [r2, #0]
 801bc64:	b96a      	cbnz	r2, 801bc82 <noteOn+0x7a>
 801bc66:	b2ea      	uxtb	r2, r5
			tSimplePoly_noteOn(&poly, key, velocity);
 801bc68:	4621      	mov	r1, r4
 801bc6a:	4880      	ldr	r0, [pc, #512]	; (801be6c <noteOn+0x264>)
 801bc6c:	f008 ff6c 	bl	8024b48 <tSimplePoly_noteOn>
		setLED_2(1);
 801bc70:	2001      	movs	r0, #1
}
 801bc72:	ecbd 8b02 	vpop	{d8}
 801bc76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		setLED_2(1);
 801bc7a:	f7f8 b80d 	b.w	8013c98 <setLED_2>
		noteOff(key, velocity);
 801bc7e:	f7ff bf17 	b.w	801bab0 <noteOff>
				lockArray[key%12]++;
 801bc82:	487b      	ldr	r0, [pc, #492]	; (801be70 <noteOn+0x268>)
 801bc84:	b2ea      	uxtb	r2, r5
 801bc86:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801bc8a:	3101      	adds	r1, #1
 801bc8c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 801bc90:	e7ea      	b.n	801bc68 <noteOn+0x60>
		else if (currentPreset == LivingStringSynth)
 801bc92:	290f      	cmp	r1, #15
 801bc94:	b2ea      	uxtb	r2, r5
 801bc96:	d1e7      	bne.n	801bc68 <noteOn+0x60>
			int whichVoice = tSimplePoly_noteOn(&poly, key, velocity);
 801bc98:	4621      	mov	r1, r4
 801bc9a:	4874      	ldr	r0, [pc, #464]	; (801be6c <noteOn+0x264>)
 801bc9c:	f008 ff54 	bl	8024b48 <tSimplePoly_noteOn>
			if (whichVoice >= 0)
 801bca0:	2800      	cmp	r0, #0
 801bca2:	dbd6      	blt.n	801bc52 <noteOn+0x4a>
				tADSR4_on(&pluckEnvs[whichVoice], velocity * 0.0078125f);
 801bca4:	4b73      	ldr	r3, [pc, #460]	; (801be74 <noteOn+0x26c>)
 801bca6:	ee00 5a10 	vmov	s0, r5
 801bcaa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801bcae:	eeba 0aec 	vcvt.f32.s32	s0, s0, #7
 801bcb2:	f006 fb7f 	bl	80223b4 <tADSR4_on>
 801bcb6:	e7cc      	b.n	801bc52 <noteOn+0x4a>
			int whichVoice = tSimplePoly_noteOn(&poly, key, velocity);
 801bcb8:	b2ea      	uxtb	r2, r5
 801bcba:	4621      	mov	r1, r4
 801bcbc:	486b      	ldr	r0, [pc, #428]	; (801be6c <noteOn+0x264>)
 801bcbe:	f008 ff43 	bl	8024b48 <tSimplePoly_noteOn>
			if (whichVoice >= 0)
 801bcc2:	1e07      	subs	r7, r0, #0
 801bcc4:	dbc5      	blt.n	801bc52 <noteOn+0x4a>
 801bcc6:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801bcca:	4b6b      	ldr	r3, [pc, #428]	; (801be78 <noteOn+0x270>)
					tADSR4_on(&FM_envs[whichVoice][j], velocity * 0.0078125f);
 801bccc:	ee08 5a10 	vmov	s16, r5
 801bcd0:	00f2      	lsls	r2, r6, #3
 801bcd2:	f103 0618 	add.w	r6, r3, #24
 801bcd6:	eeba 8aec 	vcvt.f32.s32	s16, s16, #7
 801bcda:	18d5      	adds	r5, r2, r3
 801bcdc:	4416      	add	r6, r2
 801bcde:	4628      	mov	r0, r5
 801bce0:	3504      	adds	r5, #4
 801bce2:	eeb0 0a48 	vmov.f32	s0, s16
 801bce6:	f006 fb65 	bl	80223b4 <tADSR4_on>
				for (int j = 0; j < 6; j++)
 801bcea:	42ae      	cmp	r6, r5
 801bcec:	d1f7      	bne.n	801bcde <noteOn+0xd6>
				panValues[whichVoice] = key * 0.0078125; // divide by 128.0f
 801bcee:	ee07 4a10 	vmov	s14, r4
 801bcf2:	eeba 7bec 	vcvt.f64.s32	d7, d7, #7
 801bcf6:	4b61      	ldr	r3, [pc, #388]	; (801be7c <noteOn+0x274>)
 801bcf8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801bcfc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 801bd00:	ed87 7a00 	vstr	s14, [r7]
 801bd04:	e7a5      	b.n	801bc52 <noteOn+0x4a>
			int whichVoice = tSimplePoly_noteOn(&poly, key, velocity);
 801bd06:	4621      	mov	r1, r4
 801bd08:	b2ea      	uxtb	r2, r5
 801bd0a:	4858      	ldr	r0, [pc, #352]	; (801be6c <noteOn+0x264>)
 801bd0c:	f008 ff1c 	bl	8024b48 <tSimplePoly_noteOn>
			if (whichVoice >= 0)
 801bd10:	2800      	cmp	r0, #0
 801bd12:	db9e      	blt.n	801bc52 <noteOn+0x4a>
				tADSR4_on(&polyEnvs[whichVoice], velocity * 0.0078125f);
 801bd14:	ee08 5a10 	vmov	s16, r5
 801bd18:	0084      	lsls	r4, r0, #2
 801bd1a:	4859      	ldr	r0, [pc, #356]	; (801be80 <noteOn+0x278>)
 801bd1c:	eeba 8aec 	vcvt.f32.s32	s16, s16, #7
 801bd20:	4420      	add	r0, r4
 801bd22:	eeb0 0a48 	vmov.f32	s0, s16
 801bd26:	f006 fb45 	bl	80223b4 <tADSR4_on>
				tADSR4_on(&polyFiltEnvs[whichVoice], velocity * 0.0078125f);
 801bd2a:	4856      	ldr	r0, [pc, #344]	; (801be84 <noteOn+0x27c>)
 801bd2c:	eeb0 0a48 	vmov.f32	s0, s16
 801bd30:	4420      	add	r0, r4
 801bd32:	f006 fb3f 	bl	80223b4 <tADSR4_on>
 801bd36:	e78c      	b.n	801bc52 <noteOn+0x4a>
					if (tBuffer_getRecordedLength(&keyBuff[currentSamplerKeyGlobal]) == 0)
 801bd38:	4f53      	ldr	r7, [pc, #332]	; (801be88 <noteOn+0x280>)
					currentSamplerKeyGlobal = key - LOWEST_SAMPLER_KEY;
 801bd3a:	4e54      	ldr	r6, [pc, #336]	; (801be8c <noteOn+0x284>)
					if (tBuffer_getRecordedLength(&keyBuff[currentSamplerKeyGlobal]) == 0)
 801bd3c:	eb07 0084 	add.w	r0, r7, r4, lsl #2
					currentSamplerKeyGlobal = key - LOWEST_SAMPLER_KEY;
 801bd40:	6034      	str	r4, [r6, #0]
					if (tBuffer_getRecordedLength(&keyBuff[currentSamplerKeyGlobal]) == 0)
 801bd42:	f00a fd9b 	bl	802687c <tBuffer_getRecordedLength>
 801bd46:	2800      	cmp	r0, #0
 801bd48:	d06b      	beq.n	801be22 <noteOn+0x21a>
						keySampler[currentSamplerKeyGlobal]->active = -1;
 801bd4a:	6832      	ldr	r2, [r6, #0]
 801bd4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801bd50:	4c4f      	ldr	r4, [pc, #316]	; (801be90 <noteOn+0x288>)
						tSampler_setStart(&keySampler[currentSamplerKeyGlobal], samplePlayStarts[currentSamplerKeyGlobal]);
 801bd52:	0090      	lsls	r0, r2, #2
 801bd54:	4b4f      	ldr	r3, [pc, #316]	; (801be94 <noteOn+0x28c>)
						keySampler[currentSamplerKeyGlobal]->active = -1;
 801bd56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
						tSampler_setStart(&keySampler[currentSamplerKeyGlobal], samplePlayStarts[currentSamplerKeyGlobal]);
 801bd5a:	4403      	add	r3, r0
 801bd5c:	4420      	add	r0, r4
						keySampler[currentSamplerKeyGlobal]->active = -1;
 801bd5e:	6451      	str	r1, [r2, #68]	; 0x44
						tSampler_setStart(&keySampler[currentSamplerKeyGlobal], samplePlayStarts[currentSamplerKeyGlobal]);
 801bd60:	edd3 7a00 	vldr	s15, [r3]
						tSampler_setLength(&keySampler[currentSamplerKeyGlobal], samplePlayLengths[currentSamplerKeyGlobal]);
 801bd64:	f8df 8154 	ldr.w	r8, [pc, #340]	; 801bebc <noteOn+0x2b4>
						tSampler_setStart(&keySampler[currentSamplerKeyGlobal], samplePlayStarts[currentSamplerKeyGlobal]);
 801bd68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
						if (newBuffer[currentSamplerKeyGlobal])
 801bd6c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 801beb8 <noteOn+0x2b0>
						tSampler_setStart(&keySampler[currentSamplerKeyGlobal], samplePlayStarts[currentSamplerKeyGlobal]);
 801bd70:	ee17 1a90 	vmov	r1, s15
 801bd74:	f00a feac 	bl	8026ad0 <tSampler_setStart>
						tSampler_setLength(&keySampler[currentSamplerKeyGlobal], samplePlayLengths[currentSamplerKeyGlobal]);
 801bd78:	6830      	ldr	r0, [r6, #0]
 801bd7a:	0080      	lsls	r0, r0, #2
 801bd7c:	eb08 0300 	add.w	r3, r8, r0
 801bd80:	4420      	add	r0, r4
 801bd82:	edd3 7a00 	vldr	s15, [r3]
 801bd86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bd8a:	ee17 1a90 	vmov	r1, s15
 801bd8e:	f00b faad 	bl	80272ec <tSampler_setLength>
						tSampler_setCrossfadeLength(&keySampler[currentSamplerKeyGlobal], crossfadeLengths[currentSamplerKeyGlobal]);
 801bd92:	6830      	ldr	r0, [r6, #0]
 801bd94:	4b40      	ldr	r3, [pc, #256]	; (801be98 <noteOn+0x290>)
 801bd96:	0080      	lsls	r0, r0, #2
 801bd98:	4403      	add	r3, r0
 801bd9a:	4420      	add	r0, r4
 801bd9c:	edd3 7a00 	vldr	s15, [r3]
 801bda0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bda4:	ee17 1a90 	vmov	r1, s15
 801bda8:	f00a fe20 	bl	80269ec <tSampler_setCrossfadeLength>
						tSampler_setRate(&keySampler[currentSamplerKeyGlobal], sampleRates[currentSamplerKeyGlobal] * sampleRatesMult[currentSamplerKeyGlobal]);
 801bdac:	6830      	ldr	r0, [r6, #0]
 801bdae:	4a3b      	ldr	r2, [pc, #236]	; (801be9c <noteOn+0x294>)
 801bdb0:	0080      	lsls	r0, r0, #2
 801bdb2:	4b3b      	ldr	r3, [pc, #236]	; (801bea0 <noteOn+0x298>)
 801bdb4:	4402      	add	r2, r0
 801bdb6:	4403      	add	r3, r0
 801bdb8:	4420      	add	r0, r4
 801bdba:	edd3 7a00 	vldr	s15, [r3]
 801bdbe:	ed92 0a00 	vldr	s0, [r2]
 801bdc2:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bdc6:	f00b fb2b 	bl	8027420 <tSampler_setRate>
						tSampler_setMode(&keySampler[currentSamplerKeyGlobal], loopOns[currentSamplerKeyGlobal]);
 801bdca:	6833      	ldr	r3, [r6, #0]
 801bdcc:	4a35      	ldr	r2, [pc, #212]	; (801bea4 <noteOn+0x29c>)
 801bdce:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 801bdd2:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 801bdd6:	f00a fe05 	bl	80269e4 <tSampler_setMode>
						tSampler_play(&keySampler[currentSamplerKeyGlobal]);
 801bdda:	6830      	ldr	r0, [r6, #0]
 801bddc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 801bde0:	f00a fe1a 	bl	8026a18 <tSampler_play>
						if (newBuffer[currentSamplerKeyGlobal])
 801bde4:	6833      	ldr	r3, [r6, #0]
 801bde6:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 801bdea:	bb2a      	cbnz	r2, 801be38 <noteOn+0x230>
 801bdec:	009a      	lsls	r2, r3, #2
						float tempGain = (velocity * 0.0078125f * displayValues[6]) + (1.0f - displayValues[6]);
 801bdee:	4b2e      	ldr	r3, [pc, #184]	; (801bea8 <noteOn+0x2a0>)
 801bdf0:	ee07 5a90 	vmov	s15, r5
 801bdf4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801bdf8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 801beac <noteOn+0x2a4>
 801bdfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801be00:	edd3 7a06 	vldr	s15, [r3, #24]
						tExpSmooth_setDest(&kSamplerGains[currentSamplerKeyGlobal], tempGain);
 801be04:	482a      	ldr	r0, [pc, #168]	; (801beb0 <noteOn+0x2a8>)
						float tempGain = (velocity * 0.0078125f * displayValues[6]) + (1.0f - displayValues[6]);
 801be06:	ee30 0a67 	vsub.f32	s0, s0, s15
 801be0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
						tExpSmooth_setDest(&kSamplerGains[currentSamplerKeyGlobal], tempGain);
 801be0e:	4410      	add	r0, r2
 801be10:	eea7 0a27 	vfma.f32	s0, s14, s15
 801be14:	f006 fe20 	bl	8022a58 <tExpSmooth_setDest>
 801be18:	6833      	ldr	r3, [r6, #0]
					samplerKeyHeld[currentSamplerKeyGlobal] = 1;
 801be1a:	4a26      	ldr	r2, [pc, #152]	; (801beb4 <noteOn+0x2ac>)
 801be1c:	2101      	movs	r1, #1
 801be1e:	54d1      	strb	r1, [r2, r3]
 801be20:	e717      	b.n	801bc52 <noteOn+0x4a>
						tBuffer_record(&keyBuff[currentSamplerKeyGlobal]);
 801be22:	6830      	ldr	r0, [r6, #0]
 801be24:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801be28:	f00a fd12 	bl	8026850 <tBuffer_record>
						newBuffer[currentSamplerKeyGlobal] = 1;
 801be2c:	6833      	ldr	r3, [r6, #0]
 801be2e:	4a22      	ldr	r2, [pc, #136]	; (801beb8 <noteOn+0x2b0>)
 801be30:	2101      	movs	r1, #1
 801be32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801be36:	e7f0      	b.n	801be1a <noteOn+0x212>
							int recordLength = tBuffer_getRecordedLength(&keyBuff[currentSamplerKeyGlobal]);
 801be38:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 801be3c:	f00a fd1e 	bl	802687c <tBuffer_getRecordedLength>
							samplePlayLengths[currentSamplerKeyGlobal] = recordLength;
 801be40:	6833      	ldr	r3, [r6, #0]
 801be42:	ee07 0a90 	vmov	s15, r0
							newBuffer[currentSamplerKeyGlobal] = 0;
 801be46:	2100      	movs	r1, #0
							samplePlayLengths[currentSamplerKeyGlobal] = recordLength;
 801be48:	009a      	lsls	r2, r3, #2
 801be4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							newBuffer[currentSamplerKeyGlobal] = 0;
 801be4e:	f849 1023 	str.w	r1, [r9, r3, lsl #2]
							samplePlayLengths[currentSamplerKeyGlobal] = recordLength;
 801be52:	4490      	add	r8, r2
 801be54:	edc8 7a00 	vstr	s15, [r8]
 801be58:	e7c9      	b.n	801bdee <noteOn+0x1e6>
 801be5a:	bf00      	nop
 801be5c:	2aaaaaab 	.word	0x2aaaaaab
 801be60:	20000530 	.word	0x20000530
 801be64:	20000655 	.word	0x20000655
 801be68:	20000520 	.word	0x20000520
 801be6c:	20017554 	.word	0x20017554
 801be70:	200005a8 	.word	0x200005a8
 801be74:	20017440 	.word	0x20017440
 801be78:	2001755c 	.word	0x2001755c
 801be7c:	2001621c 	.word	0x2001621c
 801be80:	200176d0 	.word	0x200176d0
 801be84:	20015948 	.word	0x20015948
 801be88:	20018198 	.word	0x20018198
 801be8c:	20000220 	.word	0x20000220
 801be90:	20016f2c 	.word	0x20016f2c
 801be94:	2001737c 	.word	0x2001737c
 801be98:	200177bc 	.word	0x200177bc
 801be9c:	20016368 	.word	0x20016368
 801bea0:	20017884 	.word	0x20017884
 801bea4:	2001664c 	.word	0x2001664c
 801bea8:	200187c4 	.word	0x200187c4
 801beac:	3c000000 	.word	0x3c000000
 801beb0:	2001608c 	.word	0x2001608c
 801beb4:	2001776c 	.word	0x2001776c
 801beb8:	20016154 	.word	0x20016154
 801bebc:	20016280 	.word	0x20016280

0801bec0 <pitchBend>:


void pitchBend(int data)
{
	pitchBendValue = (data - 8192) * 0.000244140625f;
 801bec0:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 801bec4:	ee07 3a90 	vmov	s15, r3
 801bec8:	4b02      	ldr	r3, [pc, #8]	; (801bed4 <pitchBend+0x14>)
 801beca:	eefa 7aca 	vcvt.f32.s32	s15, s15, #12
 801bece:	edc3 7a00 	vstr	s15, [r3]
}
 801bed2:	4770      	bx	lr
 801bed4:	200005d8 	.word	0x200005d8

0801bed8 <sustainOff>:
 801bed8:	4770      	bx	lr
 801beda:	bf00      	nop

0801bedc <sustainOn>:
}

void sustainOn()
{

}
 801bedc:	4770      	bx	lr
 801bede:	bf00      	nop

0801bee0 <ssd1306_begin>:
uint8_t OLED_i2c_address;
uint8_t OLED_externalVCC;
I2C_HandleTypeDef* OLED_i2c_handle;

void ssd1306_begin(I2C_HandleTypeDef* hi2c, uint8_t vccstate, uint8_t i2caddr)
{
 801bee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	OLED_i2c_address = i2caddr;
 801bee4:	4ea9      	ldr	r6, [pc, #676]	; (801c18c <ssd1306_begin+0x2ac>)
{
 801bee6:	4688      	mov	r8, r1
	OLED_externalVCC = vccstate;
	OLED_i2c_handle = hi2c;
 801bee8:	4da9      	ldr	r5, [pc, #676]	; (801c190 <ssd1306_begin+0x2b0>)
{
 801beea:	b084      	sub	sp, #16
	OLED_externalVCC = vccstate;
 801beec:	4ba9      	ldr	r3, [pc, #676]	; (801c194 <ssd1306_begin+0x2b4>)

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //PULL RESET LINE HIGH
 801beee:	f44f 7100 	mov.w	r1, #512	; 0x200
	OLED_i2c_address = i2caddr;
 801bef2:	7032      	strb	r2, [r6, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //PULL RESET LINE HIGH
 801bef4:	2201      	movs	r2, #1
	OLED_i2c_handle = hi2c;
 801bef6:	6028      	str	r0, [r5, #0]

void ssd1306_command(uint8_t c) {
	// I2C
	//	uint8_t control = 0x00;   // Co = 0, D/C = 0

	uint8_t i2c_message[2] = {0,0};
 801bef8:	ac04      	add	r4, sp, #16
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //PULL RESET LINE HIGH
 801befa:	48a7      	ldr	r0, [pc, #668]	; (801c198 <ssd1306_begin+0x2b8>)
	i2c_message[1] = c;
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801befc:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	OLED_externalVCC = vccstate;
 801bf00:	f883 8000 	strb.w	r8, [r3]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //PULL RESET LINE HIGH
 801bf04:	f7e9 fda4 	bl	8005a50 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 801bf08:	2001      	movs	r0, #1
 801bf0a:	f7e4 fea1 	bl	8000c50 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //PULL RESET LINE HIGH
 801bf0e:	2200      	movs	r2, #0
 801bf10:	f44f 7100 	mov.w	r1, #512	; 0x200
 801bf14:	48a0      	ldr	r0, [pc, #640]	; (801c198 <ssd1306_begin+0x2b8>)
 801bf16:	f7e9 fd9b 	bl	8005a50 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 801bf1a:	200a      	movs	r0, #10
 801bf1c:	f7e4 fe98 	bl	8000c50 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //PULL RESET LINE HIGH
 801bf20:	2201      	movs	r2, #1
 801bf22:	f44f 7100 	mov.w	r1, #512	; 0x200
 801bf26:	489c      	ldr	r0, [pc, #624]	; (801c198 <ssd1306_begin+0x2b8>)
 801bf28:	f7e9 fd92 	bl	8005a50 <HAL_GPIO_WritePin>
	uint8_t i2c_message[2] = {0,0};
 801bf2c:	f44f 432e 	mov.w	r3, #44544	; 0xae00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bf30:	7831      	ldrb	r1, [r6, #0]
 801bf32:	6828      	ldr	r0, [r5, #0]
 801bf34:	9700      	str	r7, [sp, #0]
	uint8_t i2c_message[2] = {0,0};
 801bf36:	f824 3d04 	strh.w	r3, [r4, #-4]!
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bf3a:	2302      	movs	r3, #2
 801bf3c:	4622      	mov	r2, r4
 801bf3e:	f7ea fc3f 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bf42:	f44f 4c55 	mov.w	ip, #54528	; 0xd500
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bf46:	7831      	ldrb	r1, [r6, #0]
 801bf48:	4622      	mov	r2, r4
 801bf4a:	6828      	ldr	r0, [r5, #0]
 801bf4c:	2302      	movs	r3, #2
 801bf4e:	9700      	str	r7, [sp, #0]
	uint8_t i2c_message[2] = {0,0};
 801bf50:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bf54:	f7ea fc34 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bf58:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bf5c:	7831      	ldrb	r1, [r6, #0]
 801bf5e:	6828      	ldr	r0, [r5, #0]
 801bf60:	4622      	mov	r2, r4
 801bf62:	9700      	str	r7, [sp, #0]
 801bf64:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bf66:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bf6a:	f7ea fc29 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bf6e:	f44f 4c28 	mov.w	ip, #43008	; 0xa800
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bf72:	7831      	ldrb	r1, [r6, #0]
 801bf74:	6828      	ldr	r0, [r5, #0]
 801bf76:	4622      	mov	r2, r4
 801bf78:	9700      	str	r7, [sp, #0]
 801bf7a:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bf7c:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bf80:	f7ea fc1e 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bf84:	f44f 5cf8 	mov.w	ip, #7936	; 0x1f00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bf88:	7831      	ldrb	r1, [r6, #0]
 801bf8a:	6828      	ldr	r0, [r5, #0]
 801bf8c:	4622      	mov	r2, r4
 801bf8e:	9700      	str	r7, [sp, #0]
 801bf90:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bf92:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bf96:	f7ea fc13 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bf9a:	f44f 4c53 	mov.w	ip, #54016	; 0xd300
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bf9e:	7831      	ldrb	r1, [r6, #0]
 801bfa0:	6828      	ldr	r0, [r5, #0]
 801bfa2:	4622      	mov	r2, r4
 801bfa4:	9700      	str	r7, [sp, #0]
 801bfa6:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bfa8:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bfac:	f7ea fc08 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bfb0:	f04f 0c00 	mov.w	ip, #0
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bfb4:	7831      	ldrb	r1, [r6, #0]
 801bfb6:	6828      	ldr	r0, [r5, #0]
 801bfb8:	4622      	mov	r2, r4
 801bfba:	9700      	str	r7, [sp, #0]
 801bfbc:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bfbe:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bfc2:	f7ea fbfd 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bfc6:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bfca:	7831      	ldrb	r1, [r6, #0]
 801bfcc:	6828      	ldr	r0, [r5, #0]
 801bfce:	4622      	mov	r2, r4
 801bfd0:	9700      	str	r7, [sp, #0]
 801bfd2:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bfd4:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bfd8:	f7ea fbf2 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bfdc:	f44f 4c0d 	mov.w	ip, #36096	; 0x8d00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bfe0:	7831      	ldrb	r1, [r6, #0]
 801bfe2:	6828      	ldr	r0, [r5, #0]
 801bfe4:	4622      	mov	r2, r4
 801bfe6:	9700      	str	r7, [sp, #0]
 801bfe8:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bfea:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bfee:	f7ea fbe7 	bl	80067c0 <HAL_I2C_Master_Transmit>
	if (vccstate == SSD1306_EXTERNALVCC)
 801bff2:	f1b8 0f01 	cmp.w	r8, #1
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bff6:	6828      	ldr	r0, [r5, #0]
 801bff8:	7831      	ldrb	r1, [r6, #0]
 801bffa:	4622      	mov	r2, r4
	uint8_t i2c_message[2] = {0,0};
 801bffc:	bf0c      	ite	eq
 801bffe:	f44f 5c80 	moveq.w	ip, #4096	; 0x1000
 801c002:	f44f 5ca0 	movne.w	ip, #5120	; 0x1400
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c006:	9700      	str	r7, [sp, #0]
 801c008:	2302      	movs	r3, #2
 801c00a:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	uint8_t i2c_message[2] = {0,0};
 801c00e:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c012:	f7ea fbd5 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c016:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c01a:	7831      	ldrb	r1, [r6, #0]
 801c01c:	4622      	mov	r2, r4
 801c01e:	6828      	ldr	r0, [r5, #0]
 801c020:	2302      	movs	r3, #2
 801c022:	9700      	str	r7, [sp, #0]
	uint8_t i2c_message[2] = {0,0};
 801c024:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c028:	f7ea fbca 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c02c:	f04f 0c00 	mov.w	ip, #0
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c030:	7831      	ldrb	r1, [r6, #0]
 801c032:	6828      	ldr	r0, [r5, #0]
 801c034:	4622      	mov	r2, r4
 801c036:	9700      	str	r7, [sp, #0]
 801c038:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c03a:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c03e:	f7ea fbbf 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c042:	f44f 4c21 	mov.w	ip, #41216	; 0xa100
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c046:	7831      	ldrb	r1, [r6, #0]
 801c048:	6828      	ldr	r0, [r5, #0]
 801c04a:	4622      	mov	r2, r4
 801c04c:	9700      	str	r7, [sp, #0]
 801c04e:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c050:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c054:	f7ea fbb4 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c058:	f44f 4c48 	mov.w	ip, #51200	; 0xc800
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c05c:	7831      	ldrb	r1, [r6, #0]
 801c05e:	6828      	ldr	r0, [r5, #0]
 801c060:	4622      	mov	r2, r4
 801c062:	9700      	str	r7, [sp, #0]
 801c064:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c066:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c06a:	f7ea fba9 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c06e:	f44f 4c5a 	mov.w	ip, #55808	; 0xda00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c072:	7831      	ldrb	r1, [r6, #0]
 801c074:	6828      	ldr	r0, [r5, #0]
 801c076:	4622      	mov	r2, r4
 801c078:	9700      	str	r7, [sp, #0]
 801c07a:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c07c:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c080:	f7ea fb9e 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c084:	f44f 7c00 	mov.w	ip, #512	; 0x200
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c088:	7831      	ldrb	r1, [r6, #0]
 801c08a:	6828      	ldr	r0, [r5, #0]
 801c08c:	4622      	mov	r2, r4
 801c08e:	9700      	str	r7, [sp, #0]
 801c090:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c092:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c096:	f7ea fb93 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c09a:	f44f 4c01 	mov.w	ip, #33024	; 0x8100
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c09e:	7831      	ldrb	r1, [r6, #0]
 801c0a0:	6828      	ldr	r0, [r5, #0]
 801c0a2:	4622      	mov	r2, r4
 801c0a4:	9700      	str	r7, [sp, #0]
 801c0a6:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c0a8:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c0ac:	f7ea fb88 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c0b0:	f44f 4c0f 	mov.w	ip, #36608	; 0x8f00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c0b4:	7831      	ldrb	r1, [r6, #0]
 801c0b6:	6828      	ldr	r0, [r5, #0]
 801c0b8:	4622      	mov	r2, r4
 801c0ba:	9700      	str	r7, [sp, #0]
 801c0bc:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c0be:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c0c2:	f7ea fb7d 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c0c6:	f44f 4c59 	mov.w	ip, #55552	; 0xd900
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c0ca:	7831      	ldrb	r1, [r6, #0]
 801c0cc:	6828      	ldr	r0, [r5, #0]
 801c0ce:	4622      	mov	r2, r4
 801c0d0:	9700      	str	r7, [sp, #0]
 801c0d2:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c0d4:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c0d8:	f7ea fb72 	bl	80067c0 <HAL_I2C_Master_Transmit>
	if (vccstate == SSD1306_EXTERNALVCC)
 801c0dc:	f1b8 0f01 	cmp.w	r8, #1
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c0e0:	6828      	ldr	r0, [r5, #0]
 801c0e2:	7831      	ldrb	r1, [r6, #0]
 801c0e4:	4622      	mov	r2, r4
	uint8_t i2c_message[2] = {0,0};
 801c0e6:	bf0c      	ite	eq
 801c0e8:	f44f 5c08 	moveq.w	ip, #8704	; 0x2200
 801c0ec:	f44f 4c71 	movne.w	ip, #61696	; 0xf100
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c0f0:	9700      	str	r7, [sp, #0]
 801c0f2:	2302      	movs	r3, #2
 801c0f4:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	uint8_t i2c_message[2] = {0,0};
 801c0f8:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c0fc:	f7ea fb60 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c100:	f44f 4c5b 	mov.w	ip, #56064	; 0xdb00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c104:	7831      	ldrb	r1, [r6, #0]
 801c106:	4622      	mov	r2, r4
 801c108:	6828      	ldr	r0, [r5, #0]
 801c10a:	2302      	movs	r3, #2
 801c10c:	9700      	str	r7, [sp, #0]
	uint8_t i2c_message[2] = {0,0};
 801c10e:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c112:	f7ea fb55 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c116:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c11a:	7831      	ldrb	r1, [r6, #0]
 801c11c:	6828      	ldr	r0, [r5, #0]
 801c11e:	4622      	mov	r2, r4
 801c120:	9700      	str	r7, [sp, #0]
 801c122:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c124:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c128:	f7ea fb4a 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c12c:	f44f 4c24 	mov.w	ip, #41984	; 0xa400
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c130:	7831      	ldrb	r1, [r6, #0]
 801c132:	6828      	ldr	r0, [r5, #0]
 801c134:	4622      	mov	r2, r4
 801c136:	9700      	str	r7, [sp, #0]
 801c138:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c13a:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c13e:	f7ea fb3f 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c142:	f44f 4c26 	mov.w	ip, #42496	; 0xa600
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c146:	7831      	ldrb	r1, [r6, #0]
 801c148:	6828      	ldr	r0, [r5, #0]
 801c14a:	4622      	mov	r2, r4
 801c14c:	9700      	str	r7, [sp, #0]
 801c14e:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c150:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c154:	f7ea fb34 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c158:	f44f 5c38 	mov.w	ip, #11776	; 0x2e00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c15c:	7831      	ldrb	r1, [r6, #0]
 801c15e:	6828      	ldr	r0, [r5, #0]
 801c160:	4622      	mov	r2, r4
 801c162:	9700      	str	r7, [sp, #0]
 801c164:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c166:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c16a:	f7ea fb29 	bl	80067c0 <HAL_I2C_Master_Transmit>
 801c16e:	6828      	ldr	r0, [r5, #0]
 801c170:	4622      	mov	r2, r4
 801c172:	7831      	ldrb	r1, [r6, #0]
	uint8_t i2c_message[2] = {0,0};
 801c174:	f44f 452f 	mov.w	r5, #44800	; 0xaf00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c178:	2302      	movs	r3, #2
 801c17a:	9700      	str	r7, [sp, #0]
	uint8_t i2c_message[2] = {0,0};
 801c17c:	f8ad 500c 	strh.w	r5, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c180:	f7ea fb1e 	bl	80067c0 <HAL_I2C_Master_Transmit>
}
 801c184:	b004      	add	sp, #16
 801c186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c18a:	bf00      	nop
 801c18c:	2001866c 	.word	0x2001866c
 801c190:	20018668 	.word	0x20018668
 801c194:	20018664 	.word	0x20018664
 801c198:	58020000 	.word	0x58020000

0801c19c <ssd1306_display_full_buffer>:
  ssd1306_command(contrast);
}



void ssd1306_display_full_buffer(void) {
 801c19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1a0:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c1a2:	4e2d      	ldr	r6, [pc, #180]	; (801c258 <ssd1306_display_full_buffer+0xbc>)
 801c1a4:	4d2d      	ldr	r5, [pc, #180]	; (801c25c <ssd1306_display_full_buffer+0xc0>)
 801c1a6:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	uint8_t i2c_message[2] = {0,0};
 801c1aa:	ac04      	add	r4, sp, #16
 801c1ac:	f44f 5204 	mov.w	r2, #8448	; 0x2100
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c1b0:	7831      	ldrb	r1, [r6, #0]
	uint8_t i2c_message[2] = {0,0};
 801c1b2:	f04f 0800 	mov.w	r8, #0
 801c1b6:	f824 2d04 	strh.w	r2, [r4, #-4]!
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c1ba:	2302      	movs	r3, #2
 801c1bc:	4622      	mov	r2, r4
 801c1be:	6828      	ldr	r0, [r5, #0]
 801c1c0:	9700      	str	r7, [sp, #0]
 801c1c2:	f7ea fafd 	bl	80067c0 <HAL_I2C_Master_Transmit>
 801c1c6:	7831      	ldrb	r1, [r6, #0]
 801c1c8:	4622      	mov	r2, r4
 801c1ca:	6828      	ldr	r0, [r5, #0]
 801c1cc:	9700      	str	r7, [sp, #0]
 801c1ce:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c1d0:	f8ad 800c 	strh.w	r8, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c1d4:	f7ea faf4 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c1d8:	f44f 4cfe 	mov.w	ip, #32512	; 0x7f00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c1dc:	7831      	ldrb	r1, [r6, #0]
 801c1de:	4622      	mov	r2, r4
 801c1e0:	6828      	ldr	r0, [r5, #0]
 801c1e2:	9700      	str	r7, [sp, #0]
 801c1e4:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c1e6:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c1ea:	f7ea fae9 	bl	80067c0 <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801c1ee:	f44f 5c08 	mov.w	ip, #8704	; 0x2200
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c1f2:	7831      	ldrb	r1, [r6, #0]
 801c1f4:	4622      	mov	r2, r4
 801c1f6:	6828      	ldr	r0, [r5, #0]
 801c1f8:	9700      	str	r7, [sp, #0]
 801c1fa:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801c1fc:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c200:	f7ea fade 	bl	80067c0 <HAL_I2C_Master_Transmit>
 801c204:	7831      	ldrb	r1, [r6, #0]
 801c206:	4622      	mov	r2, r4
 801c208:	6828      	ldr	r0, [r5, #0]
 801c20a:	2302      	movs	r3, #2
 801c20c:	9700      	str	r7, [sp, #0]
	uint8_t i2c_message[2] = {0,0};
 801c20e:	f8ad 800c 	strh.w	r8, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c212:	f7ea fad5 	bl	80067c0 <HAL_I2C_Master_Transmit>
//		HAL_I2C_Master_Transmit_DMA(OLED_i2c_handle, OLED_i2c_address, displayBufferChunk, 17);
////		HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, displayBufferChunk, 17, 2000);
////		HAL_Delay(1);
//		i--;
//	}
	displayBufferChunk[0] = 0x40;
 801c216:	f8df 804c 	ldr.w	r8, [pc, #76]	; 801c264 <ssd1306_display_full_buffer+0xc8>
	uint8_t i2c_message[2] = {0,0};
 801c21a:	f44f 7c40 	mov.w	ip, #768	; 0x300
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c21e:	7831      	ldrb	r1, [r6, #0]
 801c220:	4622      	mov	r2, r4
 801c222:	6828      	ldr	r0, [r5, #0]
 801c224:	2302      	movs	r3, #2
 801c226:	9700      	str	r7, [sp, #0]
	uint8_t i2c_message[2] = {0,0};
 801c228:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801c22c:	f7ea fac8 	bl	80067c0 <HAL_I2C_Master_Transmit>
	displayBufferChunk[0] = 0x40;
 801c230:	4640      	mov	r0, r8
 801c232:	2340      	movs	r3, #64	; 0x40
 801c234:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c238:	4909      	ldr	r1, [pc, #36]	; (801c260 <ssd1306_display_full_buffer+0xc4>)
 801c23a:	f800 3b01 	strb.w	r3, [r0], #1
 801c23e:	f00b f971 	bl	8027524 <memcpy>
	for (int i = 0; i < 512; i++)
	{
		displayBufferChunk[i+1] = buffer[i];
	}
	HAL_I2C_Master_Transmit_DMA(OLED_i2c_handle, OLED_i2c_address, displayBufferChunk, 513);
 801c242:	4642      	mov	r2, r8
 801c244:	7831      	ldrb	r1, [r6, #0]
 801c246:	f240 2301 	movw	r3, #513	; 0x201
 801c24a:	6828      	ldr	r0, [r5, #0]
 801c24c:	f7ea fbe2 	bl	8006a14 <HAL_I2C_Master_Transmit_DMA>
}
 801c250:	b004      	add	sp, #16
 801c252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c256:	bf00      	nop
 801c258:	2001866c 	.word	0x2001866c
 801c25c:	20018668 	.word	0x20018668
 801c260:	20018464 	.word	0x20018464
 801c264:	38000000 	.word	0x38000000

0801c268 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c268:	4b07      	ldr	r3, [pc, #28]	; (801c288 <HAL_MspInit+0x20>)
{
 801c26a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c26c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 801c270:	f042 0202 	orr.w	r2, r2, #2
 801c274:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 801c278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801c27c:	f003 0302 	and.w	r3, r3, #2
 801c280:	9301      	str	r3, [sp, #4]
 801c282:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801c284:	b002      	add	sp, #8
 801c286:	4770      	bx	lr
 801c288:	58024400 	.word	0x58024400

0801c28c <NMI_Handler>:
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c28c:	4b05      	ldr	r3, [pc, #20]	; (801c2a4 <NMI_Handler+0x18>)
 801c28e:	2001      	movs	r0, #1
 801c290:	2100      	movs	r1, #0
 801c292:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801c296:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 801c29a:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 801c29e:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
	}
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 801c2a2:	4770      	bx	lr
 801c2a4:	20015590 	.word	0x20015590

0801c2a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c2a8:	4b05      	ldr	r3, [pc, #20]	; (801c2c0 <MemManage_Handler+0x18>)
 801c2aa:	2001      	movs	r0, #1
 801c2ac:	2100      	movs	r1, #0
 801c2ae:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801c2b2:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 801c2b6:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 801c2ba:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
 801c2be:	e7fe      	b.n	801c2be <MemManage_Handler+0x16>
 801c2c0:	20015590 	.word	0x20015590

0801c2c4 <BusFault_Handler>:
 801c2c4:	b508      	push	{r3, lr}
 801c2c6:	f7ff ffef 	bl	801c2a8 <MemManage_Handler>
 801c2ca:	bf00      	nop

0801c2cc <UsageFault_Handler>:
 801c2cc:	b508      	push	{r3, lr}
 801c2ce:	f7ff ffeb 	bl	801c2a8 <MemManage_Handler>
 801c2d2:	bf00      	nop

0801c2d4 <SVC_Handler>:
 801c2d4:	4b05      	ldr	r3, [pc, #20]	; (801c2ec <SVC_Handler+0x18>)
 801c2d6:	2001      	movs	r0, #1
 801c2d8:	2100      	movs	r1, #0
 801c2da:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801c2de:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 801c2e2:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 801c2e6:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
 801c2ea:	4770      	bx	lr
 801c2ec:	20015590 	.word	0x20015590

0801c2f0 <DebugMon_Handler>:
 801c2f0:	4b05      	ldr	r3, [pc, #20]	; (801c308 <DebugMon_Handler+0x18>)
 801c2f2:	2001      	movs	r0, #1
 801c2f4:	2100      	movs	r1, #0
 801c2f6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801c2fa:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 801c2fe:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 801c302:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
 801c306:	4770      	bx	lr
 801c308:	20015590 	.word	0x20015590

0801c30c <PendSV_Handler>:
 801c30c:	4b05      	ldr	r3, [pc, #20]	; (801c324 <PendSV_Handler+0x18>)
 801c30e:	2001      	movs	r0, #1
 801c310:	2100      	movs	r1, #0
 801c312:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801c316:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 801c31a:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 801c31e:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
 801c322:	4770      	bx	lr
 801c324:	20015590 	.word	0x20015590

0801c328 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c328:	4b06      	ldr	r3, [pc, #24]	; (801c344 <SysTick_Handler+0x1c>)
 801c32a:	2001      	movs	r0, #1
 801c32c:	2100      	movs	r1, #0
 801c32e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801c332:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 801c336:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 801c33a:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801c33e:	f7e4 bc75 	b.w	8000c2c <HAL_IncTick>
 801c342:	bf00      	nop
 801c344:	20015590 	.word	0x20015590

0801c348 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 801c348:	b430      	push	{r4, r5}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c34a:	4b07      	ldr	r3, [pc, #28]	; (801c368 <DMA1_Stream1_IRQHandler+0x20>)
 801c34c:	2401      	movs	r4, #1
 801c34e:	2500      	movs	r5, #0
	}
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 801c350:	4806      	ldr	r0, [pc, #24]	; (801c36c <DMA1_Stream1_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c352:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801c356:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801c35a:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801c35e:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 801c362:	bc30      	pop	{r4, r5}
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 801c364:	f7e7 bf8e 	b.w	8004284 <HAL_DMA_IRQHandler>
 801c368:	20015590 	.word	0x20015590
 801c36c:	20015740 	.word	0x20015740

0801c370 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 801c370:	b430      	push	{r4, r5}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c372:	4b07      	ldr	r3, [pc, #28]	; (801c390 <DMA1_Stream2_IRQHandler+0x20>)
 801c374:	2401      	movs	r4, #1
 801c376:	2500      	movs	r5, #0
	}
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 801c378:	4806      	ldr	r0, [pc, #24]	; (801c394 <DMA1_Stream2_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c37a:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801c37e:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801c382:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801c386:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 801c38a:	bc30      	pop	{r4, r5}
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 801c38c:	f7e7 bf7a 	b.w	8004284 <HAL_DMA_IRQHandler>
 801c390:	20015590 	.word	0x20015590
 801c394:	200157b8 	.word	0x200157b8

0801c398 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 801c398:	b430      	push	{r4, r5}
  /* USER CODE BEGIN ADC_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c39a:	4b07      	ldr	r3, [pc, #28]	; (801c3b8 <ADC_IRQHandler+0x20>)
 801c39c:	2401      	movs	r4, #1
 801c39e:	2500      	movs	r5, #0
	}
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 801c3a0:	4806      	ldr	r0, [pc, #24]	; (801c3bc <ADC_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c3a2:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801c3a6:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801c3aa:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801c3ae:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 801c3b2:	bc30      	pop	{r4, r5}
  HAL_ADC_IRQHandler(&hadc1);
 801c3b4:	f7e4 bd78 	b.w	8000ea8 <HAL_ADC_IRQHandler>
 801c3b8:	20015590 	.word	0x20015590
 801c3bc:	20000710 	.word	0x20000710

0801c3c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 801c3c0:	b430      	push	{r4, r5}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c3c2:	4b07      	ldr	r3, [pc, #28]	; (801c3e0 <DMA2_Stream0_IRQHandler+0x20>)
 801c3c4:	2401      	movs	r4, #1
 801c3c6:	2500      	movs	r5, #0
	}
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 801c3c8:	4806      	ldr	r0, [pc, #24]	; (801c3e4 <DMA2_Stream0_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c3ca:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801c3ce:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801c3d2:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801c3d6:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 801c3da:	bc30      	pop	{r4, r5}
  HAL_DMA_IRQHandler(&hdma_adc1);
 801c3dc:	f7e7 bf52 	b.w	8004284 <HAL_DMA_IRQHandler>
 801c3e0:	20015590 	.word	0x20015590
 801c3e4:	20000774 	.word	0x20000774

0801c3e8 <SAI1_IRQHandler>:
/**
  * @brief This function handles SAI1 global interrupt.
  */
uint8_t isItCalled = 0;
void SAI1_IRQHandler(void)
{
 801c3e8:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN SAI1_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
	}
	isItCalled = 1;
 801c3ea:	4a0b      	ldr	r2, [pc, #44]	; (801c418 <SAI1_IRQHandler+0x30>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c3ec:	2401      	movs	r4, #1
 801c3ee:	4b0b      	ldr	r3, [pc, #44]	; (801c41c <SAI1_IRQHandler+0x34>)
 801c3f0:	2500      	movs	r5, #0
	isItCalled = 1;
 801c3f2:	2101      	movs	r1, #1
  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 801c3f4:	480a      	ldr	r0, [pc, #40]	; (801c420 <SAI1_IRQHandler+0x38>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c3f6:	e9c3 4504 	strd	r4, r5, [r3, #16]
	isItCalled = 1;
 801c3fa:	7011      	strb	r1, [r2, #0]
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c3fc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801c400:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801c404:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 801c408:	f7ee ffe8 	bl	800b3dc <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 801c40c:	4805      	ldr	r0, [pc, #20]	; (801c424 <SAI1_IRQHandler+0x3c>)
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 801c40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 801c412:	f7ee bfe3 	b.w	800b3dc <HAL_SAI_IRQHandler>
 801c416:	bf00      	nop
 801c418:	2000061c 	.word	0x2000061c
 801c41c:	20015590 	.word	0x20015590
 801c420:	20015830 	.word	0x20015830
 801c424:	200156a8 	.word	0x200156a8

0801c428 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 801c428:	b430      	push	{r4, r5}
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c42a:	4b07      	ldr	r3, [pc, #28]	; (801c448 <I2C4_EV_IRQHandler+0x20>)
 801c42c:	2401      	movs	r4, #1
 801c42e:	2500      	movs	r5, #0
	}
  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 801c430:	4806      	ldr	r0, [pc, #24]	; (801c44c <I2C4_EV_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c432:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801c436:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801c43a:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801c43e:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 801c442:	bc30      	pop	{r4, r5}
  HAL_I2C_EV_IRQHandler(&hi2c4);
 801c444:	f7ea bbe8 	b.w	8006c18 <HAL_I2C_EV_IRQHandler>
 801c448:	20015590 	.word	0x20015590
 801c44c:	20015048 	.word	0x20015048

0801c450 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 801c450:	b430      	push	{r4, r5}
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c452:	4b07      	ldr	r3, [pc, #28]	; (801c470 <I2C4_ER_IRQHandler+0x20>)
 801c454:	2401      	movs	r4, #1
 801c456:	2500      	movs	r5, #0
	}
  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 801c458:	4806      	ldr	r0, [pc, #24]	; (801c474 <I2C4_ER_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c45a:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801c45e:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801c462:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801c466:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 801c46a:	bc30      	pop	{r4, r5}
  HAL_I2C_ER_IRQHandler(&hi2c4);
 801c46c:	f7eb bc1c 	b.w	8007ca8 <HAL_I2C_ER_IRQHandler>
 801c470:	20015590 	.word	0x20015590
 801c474:	20015048 	.word	0x20015048

0801c478 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 801c478:	b430      	push	{r4, r5}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c47a:	4b07      	ldr	r3, [pc, #28]	; (801c498 <OTG_FS_IRQHandler+0x20>)
 801c47c:	2401      	movs	r4, #1
 801c47e:	2500      	movs	r5, #0
	}
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 801c480:	4806      	ldr	r0, [pc, #24]	; (801c49c <OTG_FS_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c482:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801c486:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801c48a:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801c48e:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801c492:	bc30      	pop	{r4, r5}
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 801c494:	f7e9 bc14 	b.w	8005cc0 <HAL_HCD_IRQHandler>
 801c498:	20015590 	.word	0x20015590
 801c49c:	200191dc 	.word	0x200191dc

0801c4a0 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 801c4a0:	b430      	push	{r4, r5}
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c4a2:	4b07      	ldr	r3, [pc, #28]	; (801c4c0 <DMAMUX1_OVR_IRQHandler+0x20>)
 801c4a4:	2401      	movs	r4, #1
 801c4a6:	2500      	movs	r5, #0
	}
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA2_Stream0
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 801c4a8:	4806      	ldr	r0, [pc, #24]	; (801c4c4 <DMAMUX1_OVR_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c4aa:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801c4ae:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801c4b2:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801c4b6:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 801c4ba:	bc30      	pop	{r4, r5}
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 801c4bc:	f7e8 bc6e 	b.w	8004d9c <HAL_DMAEx_MUX_IRQHandler>
 801c4c0:	20015590 	.word	0x20015590
 801c4c4:	20000774 	.word	0x20000774

0801c4c8 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 801c4c8:	b430      	push	{r4, r5}
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c4ca:	4b07      	ldr	r3, [pc, #28]	; (801c4e8 <BDMA_Channel0_IRQHandler+0x20>)
 801c4cc:	2401      	movs	r4, #1
 801c4ce:	2500      	movs	r5, #0
	}
  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 801c4d0:	4806      	ldr	r0, [pc, #24]	; (801c4ec <BDMA_Channel0_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c4d2:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801c4d6:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801c4da:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801c4de:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 801c4e2:	bc30      	pop	{r4, r5}
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 801c4e4:	f7e7 bece 	b.w	8004284 <HAL_DMA_IRQHandler>
 801c4e8:	20015590 	.word	0x20015590
 801c4ec:	200150e0 	.word	0x200150e0

0801c4f0 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 801c4f0:	b430      	push	{r4, r5}
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c4f2:	4b07      	ldr	r3, [pc, #28]	; (801c510 <BDMA_Channel1_IRQHandler+0x20>)
 801c4f4:	2401      	movs	r4, #1
 801c4f6:	2500      	movs	r5, #0
	}
  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 801c4f8:	4806      	ldr	r0, [pc, #24]	; (801c514 <BDMA_Channel1_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801c4fa:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801c4fe:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801c502:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801c506:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 801c50a:	bc30      	pop	{r4, r5}
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 801c50c:	f7e7 beba 	b.w	8004284 <HAL_DMA_IRQHandler>
 801c510:	20015590 	.word	0x20015590
 801c514:	20014fd0 	.word	0x20014fd0

0801c518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 801c518:	b430      	push	{r4, r5}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801c51a:	4c19      	ldr	r4, [pc, #100]	; (801c580 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801c51c:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 801c51e:	4b19      	ldr	r3, [pc, #100]	; (801c584 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801c520:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 801c524:	4818      	ldr	r0, [pc, #96]	; (801c588 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801c526:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 801c52a:	4d18      	ldr	r5, [pc, #96]	; (801c58c <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801c52c:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 801c530:	681c      	ldr	r4, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 801c532:	4917      	ldr	r1, [pc, #92]	; (801c590 <SystemInit+0x78>)
  RCC->CR |= RCC_CR_HSION;
 801c534:	f044 0401 	orr.w	r4, r4, #1
 801c538:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 801c53a:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 801c53c:	681c      	ldr	r4, [r3, #0]
 801c53e:	4020      	ands	r0, r4
 801c540:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 801c542:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 801c544:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 801c546:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 801c548:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 801c54a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 801c54c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 801c54e:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 801c550:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 801c552:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 801c554:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 801c556:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 801c558:	6818      	ldr	r0, [r3, #0]
 801c55a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 801c55e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 801c560:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 801c562:	682b      	ldr	r3, [r5, #0]
 801c564:	4019      	ands	r1, r3
 801c566:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 801c56a:	d202      	bcs.n	801c572 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 801c56c:	4b09      	ldr	r3, [pc, #36]	; (801c594 <SystemInit+0x7c>)
 801c56e:	2201      	movs	r2, #1
 801c570:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801c572:	4b03      	ldr	r3, [pc, #12]	; (801c580 <SystemInit+0x68>)
 801c574:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801c578:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 801c57a:	bc30      	pop	{r4, r5}
 801c57c:	4770      	bx	lr
 801c57e:	bf00      	nop
 801c580:	e000ed00 	.word	0xe000ed00
 801c584:	58024400 	.word	0x58024400
 801c588:	eaf6ed7f 	.word	0xeaf6ed7f
 801c58c:	5c001000 	.word	0x5c001000
 801c590:	ffff0000 	.word	0xffff0000
 801c594:	51008108 	.word	0x51008108

0801c598 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 801c598:	b530      	push	{r4, r5, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  htim3.Instance = TIM3;
 801c59a:	4c39      	ldr	r4, [pc, #228]	; (801c680 <MX_TIM3_Init+0xe8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801c59c:	2300      	movs	r3, #0
{
 801c59e:	b093      	sub	sp, #76	; 0x4c
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1024;
 801c5a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  htim3.Instance = TIM3;
 801c5a4:	4937      	ldr	r1, [pc, #220]	; (801c684 <MX_TIM3_Init+0xec>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801c5a6:	4620      	mov	r0, r4
  htim3.Init.Period = 1024;
 801c5a8:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 801c5aa:	6021      	str	r1, [r4, #0]
  htim3.Init.Prescaler = 0;
 801c5ac:	6063      	str	r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801c5ae:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801c5b0:	930b      	str	r3, [sp, #44]	; 0x2c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801c5b2:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801c5b4:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801c5b6:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801c5b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801c5bc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 801c5c0:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801c5c4:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801c5c8:	f7f0 f996 	bl	800c8f8 <HAL_TIM_PWM_Init>
 801c5cc:	bb38      	cbnz	r0, 801c61e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801c5ce:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801c5d0:	a903      	add	r1, sp, #12
 801c5d2:	482b      	ldr	r0, [pc, #172]	; (801c680 <MX_TIM3_Init+0xe8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801c5d4:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801c5d6:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801c5d8:	f7f1 f994 	bl	800d904 <HAL_TIMEx_MasterConfigSynchronization>
 801c5dc:	b9e0      	cbnz	r0, 801c618 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 801c5de:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801c5e0:	2560      	movs	r5, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801c5e2:	a90b      	add	r1, sp, #44	; 0x2c
 801c5e4:	2204      	movs	r2, #4
 801c5e6:	4826      	ldr	r0, [pc, #152]	; (801c680 <MX_TIM3_Init+0xe8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801c5e8:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801c5ea:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.Pulse = 0;
 801c5ec:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801c5f0:	f7f0 fefa 	bl	800d3e8 <HAL_TIM_PWM_ConfigChannel>
 801c5f4:	b108      	cbz	r0, 801c5fa <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 801c5f6:	f7f7 fb1f 	bl	8013c38 <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM3)
 801c5fa:	6822      	ldr	r2, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c5fc:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM3)
 801c5fe:	4921      	ldr	r1, [pc, #132]	; (801c684 <MX_TIM3_Init+0xec>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c600:	930a      	str	r3, [sp, #40]	; 0x28
  if(timHandle->Instance==TIM3)
 801c602:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c604:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801c608:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if(timHandle->Instance==TIM3)
 801c60c:	d021      	beq.n	801c652 <MX_TIM3_Init+0xba>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 801c60e:	4b1e      	ldr	r3, [pc, #120]	; (801c688 <MX_TIM3_Init+0xf0>)
 801c610:	429a      	cmp	r2, r3
 801c612:	d007      	beq.n	801c624 <MX_TIM3_Init+0x8c>
}
 801c614:	b013      	add	sp, #76	; 0x4c
 801c616:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 801c618:	f7f7 fb0e 	bl	8013c38 <Error_Handler>
 801c61c:	e7df      	b.n	801c5de <MX_TIM3_Init+0x46>
    Error_Handler();
 801c61e:	f7f7 fb0b 	bl	8013c38 <Error_Handler>
 801c622:	e7d4      	b.n	801c5ce <MX_TIM3_Init+0x36>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c624:	4b19      	ldr	r3, [pc, #100]	; (801c68c <MX_TIM3_Init+0xf4>)
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c626:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 801c628:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c62c:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c62e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c632:	4817      	ldr	r0, [pc, #92]	; (801c690 <MX_TIM3_Init+0xf8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c634:	4322      	orrs	r2, r4
 801c636:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 801c63a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 801c63e:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c640:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c642:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801c644:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c646:	9302      	str	r3, [sp, #8]
 801c648:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c64a:	f7e8 fec7 	bl	80053dc <HAL_GPIO_Init>
}
 801c64e:	b013      	add	sp, #76	; 0x4c
 801c650:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c652:	4b0e      	ldr	r3, [pc, #56]	; (801c68c <MX_TIM3_Init+0xf4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c654:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801c656:	2520      	movs	r5, #32
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c658:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c65a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c65e:	480c      	ldr	r0, [pc, #48]	; (801c690 <MX_TIM3_Init+0xf8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c660:	4322      	orrs	r2, r4
 801c662:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 801c666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801c66a:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c66c:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c66e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801c670:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c672:	9301      	str	r3, [sp, #4]
 801c674:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c676:	f7e8 feb1 	bl	80053dc <HAL_GPIO_Init>
}
 801c67a:	b013      	add	sp, #76	; 0x4c
 801c67c:	bd30      	pop	{r4, r5, pc}
 801c67e:	bf00      	nop
 801c680:	200186b0 	.word	0x200186b0
 801c684:	40000400 	.word	0x40000400
 801c688:	40000800 	.word	0x40000800
 801c68c:	58024400 	.word	0x58024400
 801c690:	58020400 	.word	0x58020400

0801c694 <MX_TIM4_Init>:
{
 801c694:	b530      	push	{r4, r5, lr}
  htim4.Instance = TIM4;
 801c696:	4c4e      	ldr	r4, [pc, #312]	; (801c7d0 <MX_TIM4_Init+0x13c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801c698:	2300      	movs	r3, #0
{
 801c69a:	b097      	sub	sp, #92	; 0x5c
  htim4.Init.Period = 1024;
 801c69c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  htim4.Instance = TIM4;
 801c6a0:	494c      	ldr	r1, [pc, #304]	; (801c7d4 <MX_TIM4_Init+0x140>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 801c6a2:	4620      	mov	r0, r4
  htim4.Init.Period = 1024;
 801c6a4:	60e2      	str	r2, [r4, #12]
  htim4.Instance = TIM4;
 801c6a6:	6021      	str	r1, [r4, #0]
  htim4.Init.Prescaler = 0;
 801c6a8:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801c6aa:	9306      	str	r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801c6ac:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801c6ae:	930f      	str	r3, [sp, #60]	; 0x3c
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 801c6b0:	60a3      	str	r3, [r4, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801c6b2:	6123      	str	r3, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801c6b4:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801c6b6:	9309      	str	r3, [sp, #36]	; 0x24
 801c6b8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801c6bc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801c6c0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801c6c4:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 801c6c8:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 801c6cc:	f7ef fffe 	bl	800c6cc <HAL_TIM_Base_Init>
 801c6d0:	2800      	cmp	r0, #0
 801c6d2:	d14d      	bne.n	801c770 <MX_TIM4_Init+0xdc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801c6d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 801c6d8:	a906      	add	r1, sp, #24
 801c6da:	483d      	ldr	r0, [pc, #244]	; (801c7d0 <MX_TIM4_Init+0x13c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801c6dc:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 801c6de:	f7f0 fb0b 	bl	800ccf8 <HAL_TIM_ConfigClockSource>
 801c6e2:	2800      	cmp	r0, #0
 801c6e4:	d141      	bne.n	801c76a <MX_TIM4_Init+0xd6>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 801c6e6:	483a      	ldr	r0, [pc, #232]	; (801c7d0 <MX_TIM4_Init+0x13c>)
 801c6e8:	f7f0 f906 	bl	800c8f8 <HAL_TIM_PWM_Init>
 801c6ec:	2800      	cmp	r0, #0
 801c6ee:	d139      	bne.n	801c764 <MX_TIM4_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801c6f0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 801c6f2:	a903      	add	r1, sp, #12
 801c6f4:	4836      	ldr	r0, [pc, #216]	; (801c7d0 <MX_TIM4_Init+0x13c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801c6f6:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801c6f8:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 801c6fa:	f7f1 f903 	bl	800d904 <HAL_TIMEx_MasterConfigSynchronization>
 801c6fe:	bb70      	cbnz	r0, 801c75e <MX_TIM4_Init+0xca>
  sConfigOC.Pulse = 0;
 801c700:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801c702:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801c704:	a90f      	add	r1, sp, #60	; 0x3c
 801c706:	4832      	ldr	r0, [pc, #200]	; (801c7d0 <MX_TIM4_Init+0x13c>)
 801c708:	461a      	mov	r2, r3
  sConfigOC.Pulse = 0;
 801c70a:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801c70c:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801c70e:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801c710:	950f      	str	r5, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801c712:	f7f0 fe69 	bl	800d3e8 <HAL_TIM_PWM_ConfigChannel>
 801c716:	b9f8      	cbnz	r0, 801c758 <MX_TIM4_Init+0xc4>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801c718:	2204      	movs	r2, #4
 801c71a:	a90f      	add	r1, sp, #60	; 0x3c
 801c71c:	482c      	ldr	r0, [pc, #176]	; (801c7d0 <MX_TIM4_Init+0x13c>)
 801c71e:	f7f0 fe63 	bl	800d3e8 <HAL_TIM_PWM_ConfigChannel>
 801c722:	b9b0      	cbnz	r0, 801c752 <MX_TIM4_Init+0xbe>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801c724:	a90f      	add	r1, sp, #60	; 0x3c
 801c726:	2208      	movs	r2, #8
 801c728:	4829      	ldr	r0, [pc, #164]	; (801c7d0 <MX_TIM4_Init+0x13c>)
 801c72a:	f7f0 fe5d 	bl	800d3e8 <HAL_TIM_PWM_ConfigChannel>
 801c72e:	b108      	cbz	r0, 801c734 <MX_TIM4_Init+0xa0>
    Error_Handler();
 801c730:	f7f7 fa82 	bl	8013c38 <Error_Handler>
  if(timHandle->Instance==TIM3)
 801c734:	6822      	ldr	r2, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c736:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM3)
 801c738:	4927      	ldr	r1, [pc, #156]	; (801c7d8 <MX_TIM4_Init+0x144>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c73a:	930e      	str	r3, [sp, #56]	; 0x38
  if(timHandle->Instance==TIM3)
 801c73c:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c73e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 801c742:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if(timHandle->Instance==TIM3)
 801c746:	d02d      	beq.n	801c7a4 <MX_TIM4_Init+0x110>
  else if(timHandle->Instance==TIM4)
 801c748:	4b22      	ldr	r3, [pc, #136]	; (801c7d4 <MX_TIM4_Init+0x140>)
 801c74a:	429a      	cmp	r2, r3
 801c74c:	d013      	beq.n	801c776 <MX_TIM4_Init+0xe2>
}
 801c74e:	b017      	add	sp, #92	; 0x5c
 801c750:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 801c752:	f7f7 fa71 	bl	8013c38 <Error_Handler>
 801c756:	e7e5      	b.n	801c724 <MX_TIM4_Init+0x90>
    Error_Handler();
 801c758:	f7f7 fa6e 	bl	8013c38 <Error_Handler>
 801c75c:	e7dc      	b.n	801c718 <MX_TIM4_Init+0x84>
    Error_Handler();
 801c75e:	f7f7 fa6b 	bl	8013c38 <Error_Handler>
 801c762:	e7cd      	b.n	801c700 <MX_TIM4_Init+0x6c>
    Error_Handler();
 801c764:	f7f7 fa68 	bl	8013c38 <Error_Handler>
 801c768:	e7c2      	b.n	801c6f0 <MX_TIM4_Init+0x5c>
    Error_Handler();
 801c76a:	f7f7 fa65 	bl	8013c38 <Error_Handler>
 801c76e:	e7ba      	b.n	801c6e6 <MX_TIM4_Init+0x52>
    Error_Handler();
 801c770:	f7f7 fa62 	bl	8013c38 <Error_Handler>
 801c774:	e7ae      	b.n	801c6d4 <MX_TIM4_Init+0x40>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c776:	4b19      	ldr	r3, [pc, #100]	; (801c7dc <MX_TIM4_Init+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c778:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 801c77a:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c77e:	a90a      	add	r1, sp, #40	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c780:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c784:	4816      	ldr	r0, [pc, #88]	; (801c7e0 <MX_TIM4_Init+0x14c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c786:	4322      	orrs	r2, r4
 801c788:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 801c78c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 801c790:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c792:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c794:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801c796:	940e      	str	r4, [sp, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c798:	9302      	str	r3, [sp, #8]
 801c79a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c79c:	f7e8 fe1e 	bl	80053dc <HAL_GPIO_Init>
}
 801c7a0:	b017      	add	sp, #92	; 0x5c
 801c7a2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c7a4:	4b0d      	ldr	r3, [pc, #52]	; (801c7dc <MX_TIM4_Init+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c7a6:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801c7a8:	2520      	movs	r5, #32
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c7aa:	a90a      	add	r1, sp, #40	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c7ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c7b0:	480b      	ldr	r0, [pc, #44]	; (801c7e0 <MX_TIM4_Init+0x14c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c7b2:	4322      	orrs	r2, r4
 801c7b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 801c7b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801c7bc:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c7be:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c7c0:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801c7c2:	940e      	str	r4, [sp, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c7c4:	9301      	str	r3, [sp, #4]
 801c7c6:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c7c8:	f7e8 fe08 	bl	80053dc <HAL_GPIO_Init>
}
 801c7cc:	b017      	add	sp, #92	; 0x5c
 801c7ce:	bd30      	pop	{r4, r5, pc}
 801c7d0:	20018670 	.word	0x20018670
 801c7d4:	40000800 	.word	0x40000800
 801c7d8:	40000400 	.word	0x40000400
 801c7dc:	58024400 	.word	0x58024400
 801c7e0:	58020400 	.word	0x58020400

0801c7e4 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM3)
 801c7e4:	6802      	ldr	r2, [r0, #0]
 801c7e6:	4b0a      	ldr	r3, [pc, #40]	; (801c810 <HAL_TIM_PWM_MspInit+0x2c>)
 801c7e8:	429a      	cmp	r2, r3
 801c7ea:	d000      	beq.n	801c7ee <HAL_TIM_PWM_MspInit+0xa>
 801c7ec:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 801c7ee:	4b09      	ldr	r3, [pc, #36]	; (801c814 <HAL_TIM_PWM_MspInit+0x30>)
{
 801c7f0:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 801c7f2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 801c7f6:	f042 0202 	orr.w	r2, r2, #2
 801c7fa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 801c7fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801c802:	f003 0302 	and.w	r3, r3, #2
 801c806:	9301      	str	r3, [sp, #4]
 801c808:	9b01      	ldr	r3, [sp, #4]
}
 801c80a:	b002      	add	sp, #8
 801c80c:	4770      	bx	lr
 801c80e:	bf00      	nop
 801c810:	40000400 	.word	0x40000400
 801c814:	58024400 	.word	0x58024400

0801c818 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM4)
 801c818:	6802      	ldr	r2, [r0, #0]
 801c81a:	4b0a      	ldr	r3, [pc, #40]	; (801c844 <HAL_TIM_Base_MspInit+0x2c>)
 801c81c:	429a      	cmp	r2, r3
 801c81e:	d000      	beq.n	801c822 <HAL_TIM_Base_MspInit+0xa>
 801c820:	4770      	bx	lr
    __HAL_RCC_TIM4_CLK_ENABLE();
 801c822:	4b09      	ldr	r3, [pc, #36]	; (801c848 <HAL_TIM_Base_MspInit+0x30>)
{
 801c824:	b082      	sub	sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 801c826:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 801c82a:	f042 0204 	orr.w	r2, r2, #4
 801c82e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 801c832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801c836:	f003 0304 	and.w	r3, r3, #4
 801c83a:	9301      	str	r3, [sp, #4]
 801c83c:	9b01      	ldr	r3, [sp, #4]
}
 801c83e:	b002      	add	sp, #8
 801c840:	4770      	bx	lr
 801c842:	bf00      	nop
 801c844:	40000800 	.word	0x40000800
 801c848:	58024400 	.word	0x58024400

0801c84c <initModeNames>:
VocodecPresetType currentPreset = 0;
VocodecPresetType previousPreset = PresetNil;
uint8_t loadingPreset = 0;

void initModeNames(void)
{
 801c84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c850:	4ad2      	ldr	r2, [pc, #840]	; (801cb9c <initModeNames+0x350>)
 801c852:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	for (int i = 0; i < NUM_ADC_CHANNELS; i++)
	{
		floatADCUI[i] = -1.0f;
		orderedParams[i] = i;
 801c856:	4cd2      	ldr	r4, [pc, #840]	; (801cba0 <initModeNames+0x354>)
	}
	orderedParams[6] = ButtonA;
	orderedParams[7] = ButtonB;
 801c858:	f04f 0906 	mov.w	r9, #6
		floatADCUI[i] = -1.0f;
 801c85c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
		cvAddParam[i] = -1;
	}

	modeNames[Vocoder] = "VOCODER1";
	shortModeNames[Vocoder] = "VL";
	modeNamesDetails[Vocoder] = "LPC";
 801c860:	f8df b45c 	ldr.w	fp, [pc, #1116]	; 801ccc0 <initModeNames+0x474>
		floatADCUI[i] = -1.0f;
 801c864:	4bcf      	ldr	r3, [pc, #828]	; (801cba4 <initModeNames+0x358>)
	orderedParams[7] = ButtonB;
 801c866:	f884 9007 	strb.w	r9, [r4, #7]
		orderedParams[i] = i;
 801c86a:	f04f 0904 	mov.w	r9, #4
 801c86e:	6017      	str	r7, [r2, #0]
 801c870:	6057      	str	r7, [r2, #4]
 801c872:	6097      	str	r7, [r2, #8]
 801c874:	60d7      	str	r7, [r2, #12]
 801c876:	8217      	strh	r7, [r2, #16]
 801c878:	f8df e448 	ldr.w	lr, [pc, #1096]	; 801ccc4 <initModeNames+0x478>
	modeNamesDetails[Vocoder] = "LPC";
 801c87c:	4aca      	ldr	r2, [pc, #808]	; (801cba8 <initModeNames+0x35c>)
		floatADCUI[i] = -1.0f;
 801c87e:	edc3 7a00 	vstr	s15, [r3]
 801c882:	edc3 7a01 	vstr	s15, [r3, #4]
 801c886:	edc3 7a02 	vstr	s15, [r3, #8]
 801c88a:	edc3 7a03 	vstr	s15, [r3, #12]
 801c88e:	edc3 7a04 	vstr	s15, [r3, #16]
 801c892:	edc3 7a05 	vstr	s15, [r3, #20]
		orderedParams[i] = i;
 801c896:	f8c4 e000 	str.w	lr, [r4]
	numPages[Vocoder] = 2;
	knobParamNames[Vocoder][0] = "VOLUME";
 801c89a:	4bc4      	ldr	r3, [pc, #784]	; (801cbac <initModeNames+0x360>)
	knobParamNames[Vocoder][1] = "WARP";
 801c89c:	f8df e428 	ldr.w	lr, [pc, #1064]	; 801ccc8 <initModeNames+0x47c>
		orderedParams[i] = i;
 801c8a0:	f884 9004 	strb.w	r9, [r4, #4]
 801c8a4:	f04f 0905 	mov.w	r9, #5
	modeNamesDetails[Vocoder] = "LPC";
 801c8a8:	f8cb 2000 	str.w	r2, [fp]
	knobParamNames[Vocoder][0] = "VOLUME";
 801c8ac:	4ac0      	ldr	r2, [pc, #768]	; (801cbb0 <initModeNames+0x364>)
		orderedParams[i] = i;
 801c8ae:	f884 9005 	strb.w	r9, [r4, #5]
	orderedParams[6] = ButtonA;
 801c8b2:	f884 9006 	strb.w	r9, [r4, #6]
	knobParamNames[Vocoder][2] = "QUALITY";
	knobParamNames[Vocoder][3] = "SAWtoPULSE";
 801c8b6:	4cbf      	ldr	r4, [pc, #764]	; (801cbb4 <initModeNames+0x368>)
	modeNames[Vocoder] = "VOCODER1";
 801c8b8:	f8df 8410 	ldr.w	r8, [pc, #1040]	; 801cccc <initModeNames+0x480>
 801c8bc:	f8df a410 	ldr.w	sl, [pc, #1040]	; 801ccd0 <initModeNames+0x484>
	knobParamNames[Vocoder][7] = "PULSEWIDTH";
	knobParamNames[Vocoder][8] = "PULSESHAPE";
	knobParamNames[Vocoder][9] = "";


	modeNames[VocoderCh] = "VOCODER2";
 801c8c0:	4dbd      	ldr	r5, [pc, #756]	; (801cbb8 <initModeNames+0x36c>)
	shortModeNames[Vocoder] = "VL";
 801c8c2:	f8df c410 	ldr.w	ip, [pc, #1040]	; 801ccd4 <initModeNames+0x488>
 801c8c6:	48bd      	ldr	r0, [pc, #756]	; (801cbbc <initModeNames+0x370>)
	shortModeNames[VocoderCh] = "VC";
 801c8c8:	49bd      	ldr	r1, [pc, #756]	; (801cbc0 <initModeNames+0x374>)
	knobParamNames[Vocoder][4] = "NOISTHRESH";
 801c8ca:	4fbe      	ldr	r7, [pc, #760]	; (801cbc4 <initModeNames+0x378>)
	shortModeNames[Vocoder] = "VL";
 801c8cc:	f8cc 0000 	str.w	r0, [ip]
	shortModeNames[VocoderCh] = "VC";
 801c8d0:	f8cc 1004 	str.w	r1, [ip, #4]
	knobParamNames[Vocoder][8] = "PULSESHAPE";
 801c8d4:	48bc      	ldr	r0, [pc, #752]	; (801cbc8 <initModeNames+0x37c>)
	knobParamNames[Vocoder][9] = "";
 801c8d6:	49bd      	ldr	r1, [pc, #756]	; (801cbcc <initModeNames+0x380>)
	modeNamesDetails[VocoderCh] = "CHANNEL";
 801c8d8:	4ebd      	ldr	r6, [pc, #756]	; (801cbd0 <initModeNames+0x384>)
	knobParamNames[Vocoder][4] = "NOISTHRESH";
 801c8da:	611f      	str	r7, [r3, #16]
	modeNamesDetails[VocoderCh] = "CHANNEL";
 801c8dc:	f8cb 6004 	str.w	r6, [fp, #4]
	knobParamNames[VocoderCh][11] = "BANDOFF";
	knobParamNames[VocoderCh][12] = "TILT";
	knobParamNames[VocoderCh][13] = "STEREO";
	knobParamNames[VocoderCh][14] = "BARKPULL";

	modeNames[Pitchshift] = "PITCHSHIFT";
 801c8e0:	f8df 93f4 	ldr.w	r9, [pc, #1012]	; 801ccd8 <initModeNames+0x48c>
	knobParamNames[VocoderCh][10] = "BANDSQUISH";
 801c8e4:	4ebb      	ldr	r6, [pc, #748]	; (801cbd4 <initModeNames+0x388>)
	knobParamNames[Vocoder][1] = "WARP";
 801c8e6:	e9c3 2e00 	strd	r2, lr, [r3]
	knobParamNames[Vocoder][2] = "QUALITY";
 801c8ea:	4abb      	ldr	r2, [pc, #748]	; (801cbd8 <initModeNames+0x38c>)
	knobParamNames[Vocoder][3] = "SAWtoPULSE";
 801c8ec:	e9c3 2402 	strd	r2, r4, [r3, #8]
	knobParamNames[Vocoder][5] = "BREATH";
 801c8f0:	4aba      	ldr	r2, [pc, #744]	; (801cbdc <initModeNames+0x390>)
	modeNames[VocoderCh] = "VOCODER2";
 801c8f2:	e9c8 a500 	strd	sl, r5, [r8]
	knobParamNames[Vocoder][5] = "BREATH";
 801c8f6:	615a      	str	r2, [r3, #20]
	knobParamNames[Vocoder][7] = "PULSEWIDTH";
 801c8f8:	4db9      	ldr	r5, [pc, #740]	; (801cbe0 <initModeNames+0x394>)
	knobParamNames[Vocoder][6] = "TILT";
 801c8fa:	4aba      	ldr	r2, [pc, #744]	; (801cbe4 <initModeNames+0x398>)
	knobParamNames[VocoderCh][3] = "BANDWIDTH";
 801c8fc:	f8df a3dc 	ldr.w	sl, [pc, #988]	; 801ccdc <initModeNames+0x490>
	knobParamNames[Vocoder][7] = "PULSEWIDTH";
 801c900:	e9c3 2506 	strd	r2, r5, [r3, #24]
	knobParamNames[VocoderCh][0] = "VOLUME";
 801c904:	4aaa      	ldr	r2, [pc, #680]	; (801cbb0 <initModeNames+0x364>)
	knobParamNames[Vocoder][9] = "";
 801c906:	e9c3 0108 	strd	r0, r1, [r3, #32]
	knobParamNames[VocoderCh][1] = "WARP";
 801c90a:	e9c3 2e19 	strd	r2, lr, [r3, #100]	; 0x64
	knobParamNames[VocoderCh][2] = "QUALITY";
 801c90e:	4ab2      	ldr	r2, [pc, #712]	; (801cbd8 <initModeNames+0x38c>)
	knobParamNames[VocoderCh][5] = "SAWtoPULSE";
 801c910:	679c      	str	r4, [r3, #120]	; 0x78
	knobParamNames[VocoderCh][2] = "QUALITY";
 801c912:	66da      	str	r2, [r3, #108]	; 0x6c
	knobParamNames[VocoderCh][14] = "BARKPULL";
 801c914:	4cb4      	ldr	r4, [pc, #720]	; (801cbe8 <initModeNames+0x39c>)
	knobParamNames[VocoderCh][7] = "PULSESHAPE";
 801c916:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
	knobParamNames[VocoderCh][8] = "BREATH";
 801c91a:	4ab0      	ldr	r2, [pc, #704]	; (801cbdc <initModeNames+0x390>)
	knobParamNames[VocoderCh][12] = "TILT";
 801c91c:	48b1      	ldr	r0, [pc, #708]	; (801cbe4 <initModeNames+0x398>)
	modeNames[Pitchshift] = "PITCHSHIFT";
 801c91e:	f8c8 9008 	str.w	r9, [r8, #8]
	knobParamNames[VocoderCh][4] = "NOISTHRESH";
 801c922:	675f      	str	r7, [r3, #116]	; 0x74
	knobParamNames[VocoderCh][11] = "BANDOFF";
 801c924:	f8df e3b8 	ldr.w	lr, [pc, #952]	; 801cce0 <initModeNames+0x494>
	knobParamNames[VocoderCh][6] = "PULSEWIDTH";
 801c928:	67dd      	str	r5, [r3, #124]	; 0x7c
	shortModeNames[Pitchshift] = "PS";
 801c92a:	4fb0      	ldr	r7, [pc, #704]	; (801cbec <initModeNames+0x3a0>)
	modeNamesDetails[Pitchshift] = "";
	numPages[Pitchshift] = 2;
	knobParamNames[Pitchshift][0] = "SHIFT";
 801c92c:	4db0      	ldr	r5, [pc, #704]	; (801cbf0 <initModeNames+0x3a4>)
	knobParamNames[VocoderCh][8] = "BREATH";
 801c92e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	knobParamNames[VocoderCh][12] = "TILT";
 801c932:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	knobParamNames[Pitchshift][1] = "FINE";
 801c936:	4aaf      	ldr	r2, [pc, #700]	; (801cbf4 <initModeNames+0x3a8>)
	knobParamNames[Pitchshift][2] = "F AMT";
 801c938:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 801cce4 <initModeNames+0x498>
	knobParamNames[Pitchshift][3] = "FORMANT";
 801c93c:	48ae      	ldr	r0, [pc, #696]	; (801cbf8 <initModeNames+0x3ac>)
	knobParamNames[VocoderCh][10] = "BANDSQUISH";
 801c93e:	f8c3 608c 	str.w	r6, [r3, #140]	; 0x8c
	knobParamNames[VocoderCh][14] = "BARKPULL";
 801c942:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	knobParamNames[Pitchshift][4] = "RANGE";
 801c946:	4ead      	ldr	r6, [pc, #692]	; (801cbfc <initModeNames+0x3b0>)
	knobParamNames[Pitchshift][6] = "";
	knobParamNames[Pitchshift][7] = "";
	knobParamNames[Pitchshift][8] = "";
	knobParamNames[Pitchshift][9] = "";

	modeNames[AutotuneMono] = "AUTOTUNE";
 801c948:	4cad      	ldr	r4, [pc, #692]	; (801cc00 <initModeNames+0x3b4>)
	shortModeNames[Pitchshift] = "PS";
 801c94a:	f8cc 7008 	str.w	r7, [ip, #8]
	modeNames[AutotuneMono] = "AUTOTUNE";
 801c94e:	f8c8 400c 	str.w	r4, [r8, #12]
	knobParamNames[VocoderCh][11] = "BANDOFF";
 801c952:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
	shortModeNames[AutotuneMono] = "NT";
 801c956:	4fab      	ldr	r7, [pc, #684]	; (801cc04 <initModeNames+0x3b8>)
	knobParamNames[Pitchshift][5] = "OFFSET";
 801c958:	f8df e38c 	ldr.w	lr, [pc, #908]	; 801cce8 <initModeNames+0x49c>
	knobParamNames[Pitchshift][0] = "SHIFT";
 801c95c:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
	knobParamNames[Pitchshift][1] = "FINE";
 801c960:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	modeNamesDetails[AutotuneMono] = "";
	numPages[AutotuneMono] = 1;
	knobParamNames[AutotuneMono][0] = "PICKINESS";
	knobParamNames[AutotuneMono][1] = "AMOUNT";
 801c964:	4da8      	ldr	r5, [pc, #672]	; (801cc08 <initModeNames+0x3bc>)
	knobParamNames[VocoderCh][9] = "SPEED";
 801c966:	4aa9      	ldr	r2, [pc, #676]	; (801cc0c <initModeNames+0x3c0>)
	knobParamNames[Pitchshift][4] = "RANGE";
 801c968:	f8c3 60d8 	str.w	r6, [r3, #216]	; 0xd8
	knobParamNames[VocoderCh][13] = "STEREO";
 801c96c:	4ca8      	ldr	r4, [pc, #672]	; (801cc10 <initModeNames+0x3c4>)
	knobParamNames[AutotuneMono][2] = "SPEED";
	knobParamNames[AutotuneMono][3] = "LEAPALLOW";
 801c96e:	4ea9      	ldr	r6, [pc, #676]	; (801cc14 <initModeNames+0x3c8>)
	modeNamesDetails[Pitchshift] = "";
 801c970:	f8cb 1008 	str.w	r1, [fp, #8]
	modeNamesDetails[AutotuneMono] = "";
 801c974:	f8cb 100c 	str.w	r1, [fp, #12]
	shortModeNames[AutotuneMono] = "NT";
 801c978:	f8cc 700c 	str.w	r7, [ip, #12]
	knobParamNames[VocoderCh][3] = "BANDWIDTH";
 801c97c:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
	knobParamNames[Pitchshift][5] = "OFFSET";
 801c980:	f8c3 e0dc 	str.w	lr, [r3, #220]	; 0xdc
	knobParamNames[AutotuneMono][4] = "HYSTERESIS";


	modeNames[AutotunePoly] = "HARMONIZE";
	shortModeNames[AutotunePoly] = "AT";
 801c984:	4fa4      	ldr	r7, [pc, #656]	; (801cc18 <initModeNames+0x3cc>)
	knobParamNames[AutotuneMono][1] = "AMOUNT";
 801c986:	f8c3 5130 	str.w	r5, [r3, #304]	; 0x130
	knobParamNames[VocoderCh][9] = "SPEED";
 801c98a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	knobParamNames[AutotunePoly][2] = "";
	knobParamNames[AutotunePoly][3] = "";
	knobParamNames[AutotunePoly][4] = "";


	modeNames[SamplerButtonPress] = "SAMPLER BP";
 801c98e:	4da3      	ldr	r5, [pc, #652]	; (801cc1c <initModeNames+0x3d0>)
	knobParamNames[VocoderCh][13] = "STEREO";
 801c990:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
	shortModeNames[SamplerButtonPress] = "SB";
 801c994:	f8df e354 	ldr.w	lr, [pc, #852]	; 801ccec <initModeNames+0x4a0>
	knobParamNames[SamplerButtonPress][4] = "CROSSFADE";



	modeNames[SamplerKeyboard] = "KEYSAMPLER";
	shortModeNames[SamplerKeyboard] = "KS";
 801c998:	4ca1      	ldr	r4, [pc, #644]	; (801cc20 <initModeNames+0x3d4>)
	modeNames[AutotunePoly] = "HARMONIZE";
 801c99a:	f8df a354 	ldr.w	sl, [pc, #852]	; 801ccf0 <initModeNames+0x4a4>
	knobParamNames[Pitchshift][3] = "FORMANT";
 801c99e:	e9c3 9034 	strd	r9, r0, [r3, #208]	; 0xd0
	knobParamNames[AutotuneMono][0] = "PICKINESS";
 801c9a2:	48a0      	ldr	r0, [pc, #640]	; (801cc24 <initModeNames+0x3d8>)
	knobParamNames[AutotuneMono][4] = "HYSTERESIS";
 801c9a4:	f8df 934c 	ldr.w	r9, [pc, #844]	; 801ccf4 <initModeNames+0x4a8>
	knobParamNames[Pitchshift][7] = "";
 801c9a8:	e9c3 1138 	strd	r1, r1, [r3, #224]	; 0xe0
	knobParamNames[Pitchshift][9] = "";
 801c9ac:	e9c3 113a 	strd	r1, r1, [r3, #232]	; 0xe8
	knobParamNames[AutotuneMono][0] = "PICKINESS";
 801c9b0:	f8c3 012c 	str.w	r0, [r3, #300]	; 0x12c
	knobParamNames[AutotuneMono][3] = "LEAPALLOW";
 801c9b4:	f8c3 6138 	str.w	r6, [r3, #312]	; 0x138
	modeNamesDetails[SamplerButtonPress] = "PRESS BUTTON A";
 801c9b8:	4e9b      	ldr	r6, [pc, #620]	; (801cc28 <initModeNames+0x3dc>)
	shortModeNames[AutotunePoly] = "AT";
 801c9ba:	f8cc 7010 	str.w	r7, [ip, #16]
	modeNames[SamplerButtonPress] = "SAMPLER BP";
 801c9be:	f8c8 5014 	str.w	r5, [r8, #20]
	modeNamesDetails[SamplerButtonPress] = "PRESS BUTTON A";
 801c9c2:	f8cb 6014 	str.w	r6, [fp, #20]
	knobParamNames[AutotunePoly][0] = "PICKINESS";
 801c9c6:	f8c3 0190 	str.w	r0, [r3, #400]	; 0x190
	modeNamesDetails[SamplerKeyboard] = "KEY TO REC";
 801c9ca:	4f98      	ldr	r7, [pc, #608]	; (801cc2c <initModeNames+0x3e0>)
	modeNames[SamplerKeyboard] = "KEYSAMPLER";
 801c9cc:	4898      	ldr	r0, [pc, #608]	; (801cc30 <initModeNames+0x3e4>)
	numPages[SamplerKeyboard] = 2;
	knobParamNames[SamplerKeyboard][0] = "START";
	knobParamNames[SamplerKeyboard][1] = "LENGTH";
	knobParamNames[SamplerKeyboard][2] = "SPEED";
	knobParamNames[SamplerKeyboard][3] = "SPEEDMULT";
	knobParamNames[SamplerKeyboard][4] = "LOOP ON";
 801c9ce:	4d99      	ldr	r5, [pc, #612]	; (801cc34 <initModeNames+0x3e8>)
	knobParamNames[SamplerKeyboard][7] = "";
	knobParamNames[SamplerKeyboard][8] = "";
	knobParamNames[SamplerKeyboard][9] = "";


	modeNames[SamplerAutoGrab] = "AUTOSAMP";
 801c9d0:	4e99      	ldr	r6, [pc, #612]	; (801cc38 <initModeNames+0x3ec>)
	shortModeNames[SamplerButtonPress] = "SB";
 801c9d2:	f8cc e014 	str.w	lr, [ip, #20]
	modeNames[SamplerKeyboard] = "KEYSAMPLER";
 801c9d6:	f8c8 0018 	str.w	r0, [r8, #24]
	shortModeNames[SamplerKeyboard] = "KS";
 801c9da:	f8cc 4018 	str.w	r4, [ip, #24]
	knobParamNames[SamplerButtonPress][0] = "START";
 801c9de:	4897      	ldr	r0, [pc, #604]	; (801cc3c <initModeNames+0x3f0>)
	knobParamNames[SamplerButtonPress][1] = "LENGTH";
 801c9e0:	4c97      	ldr	r4, [pc, #604]	; (801cc40 <initModeNames+0x3f4>)
	modeNamesDetails[SamplerKeyboard] = "KEY TO REC";
 801c9e2:	f8cb 7018 	str.w	r7, [fp, #24]
	modeNames[SamplerAutoGrab] = "AUTOSAMP";
 801c9e6:	f8c8 601c 	str.w	r6, [r8, #28]
	knobParamNames[SamplerButtonPress][3] = "SPEEDMULT";
 801c9ea:	4f96      	ldr	r7, [pc, #600]	; (801cc44 <initModeNames+0x3f8>)
	knobParamNames[SamplerKeyboard][6] = "VELO SENS";
 801c9ec:	f8df e308 	ldr.w	lr, [pc, #776]	; 801ccf8 <initModeNames+0x4ac>
	knobParamNames[SamplerKeyboard][4] = "LOOP ON";
 801c9f0:	f8c3 5268 	str.w	r5, [r3, #616]	; 0x268
	shortModeNames[SamplerAutoGrab] = "AS";
	modeNamesDetails[SamplerAutoGrab] = "AUDIO TRIG'D";
	numPages[SamplerAutoGrab] = 2;
	knobParamNames[SamplerAutoGrab][0] = "THRESHOLD";
 801c9f4:	4e94      	ldr	r6, [pc, #592]	; (801cc48 <initModeNames+0x3fc>)
	knobParamNames[SamplerButtonPress][4] = "CROSSFADE";
 801c9f6:	4d95      	ldr	r5, [pc, #596]	; (801cc4c <initModeNames+0x400>)
	modeNamesDetails[AutotunePoly] = "";
 801c9f8:	f8cb 1010 	str.w	r1, [fp, #16]
	modeNames[AutotunePoly] = "HARMONIZE";
 801c9fc:	f8c8 a010 	str.w	sl, [r8, #16]
	knobParamNames[AutotuneMono][2] = "SPEED";
 801ca00:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	knobParamNames[AutotunePoly][1] = "";
 801ca04:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
	knobParamNames[AutotunePoly][2] = "";
 801ca08:	f8c3 1198 	str.w	r1, [r3, #408]	; 0x198
	knobParamNames[AutotunePoly][3] = "";
 801ca0c:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
	knobParamNames[AutotunePoly][4] = "";
 801ca10:	f8c3 11a0 	str.w	r1, [r3, #416]	; 0x1a0
	knobParamNames[SamplerButtonPress][2] = "SPEED";
 801ca14:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	knobParamNames[SamplerKeyboard][2] = "SPEED";
 801ca18:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	knobParamNames[SamplerKeyboard][7] = "";
 801ca1c:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
	knobParamNames[SamplerKeyboard][8] = "";
 801ca20:	f8c3 1278 	str.w	r1, [r3, #632]	; 0x278
	knobParamNames[SamplerKeyboard][9] = "";
 801ca24:	f8c3 127c 	str.w	r1, [r3, #636]	; 0x27c
	knobParamNames[AutotuneMono][4] = "HYSTERESIS";
 801ca28:	f8c3 913c 	str.w	r9, [r3, #316]	; 0x13c
	knobParamNames[SamplerKeyboard][6] = "VELO SENS";
 801ca2c:	f8c3 e270 	str.w	lr, [r3, #624]	; 0x270
	shortModeNames[SamplerAutoGrab] = "AS";
 801ca30:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801ccfc <initModeNames+0x4b0>
	modeNamesDetails[SamplerAutoGrab] = "AUDIO TRIG'D";
 801ca34:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 801cd00 <initModeNames+0x4b4>
	knobParamNames[SamplerButtonPress][0] = "START";
 801ca38:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
	knobParamNames[SamplerKeyboard][0] = "START";
 801ca3c:	f8c3 0258 	str.w	r0, [r3, #600]	; 0x258
	knobParamNames[SamplerButtonPress][1] = "LENGTH";
 801ca40:	f8c3 41f8 	str.w	r4, [r3, #504]	; 0x1f8
	knobParamNames[SamplerAutoGrab][1] = "WINDOW";
 801ca44:	4882      	ldr	r0, [pc, #520]	; (801cc50 <initModeNames+0x404>)
	knobParamNames[SamplerKeyboard][1] = "LENGTH";
 801ca46:	f8c3 425c 	str.w	r4, [r3, #604]	; 0x25c
	knobParamNames[SamplerButtonPress][3] = "SPEEDMULT";
 801ca4a:	f8c3 7200 	str.w	r7, [r3, #512]	; 0x200
	knobParamNames[SamplerAutoGrab][2] = "SPEED";
	knobParamNames[SamplerAutoGrab][3] = "CROSSFADE";
	knobParamNames[SamplerAutoGrab][4] = "";
	knobParamNames[SamplerAutoGrab][5] = "LEN RAND";
 801ca4e:	4c81      	ldr	r4, [pc, #516]	; (801cc54 <initModeNames+0x408>)
	knobParamNames[SamplerKeyboard][3] = "SPEEDMULT";
 801ca50:	f8c3 7264 	str.w	r7, [r3, #612]	; 0x264
	knobParamNames[SamplerButtonPress][4] = "CROSSFADE";
 801ca54:	f8c3 5204 	str.w	r5, [r3, #516]	; 0x204
	knobParamNames[SamplerKeyboard][5] = "CROSSFADE";
 801ca58:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	knobParamNames[SamplerAutoGrab][2] = "SPEED";
 801ca5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
	knobParamNames[SamplerAutoGrab][3] = "CROSSFADE";
 801ca60:	f8c3 52c8 	str.w	r5, [r3, #712]	; 0x2c8

	modeNames[BitCrusher] = "BITCRUSH";
	shortModeNames[BitCrusher] = "BC";
	modeNamesDetails[BitCrusher] = "AHH HALP ME";
	numPages[BitCrusher] = 2;
	knobParamNames[BitCrusher][0] = "QUALITY";
 801ca64:	4a5c      	ldr	r2, [pc, #368]	; (801cbd8 <initModeNames+0x38c>)
	knobParamNames[Distortion][1] = "TILT";
 801ca66:	4d5f      	ldr	r5, [pc, #380]	; (801cbe4 <initModeNames+0x398>)
	knobParamNames[SamplerAutoGrab][0] = "THRESHOLD";
 801ca68:	f8c3 62bc 	str.w	r6, [r3, #700]	; 0x2bc
	modeNames[Wavefolder] = "WAVEFOLD";
 801ca6c:	4e7a      	ldr	r6, [pc, #488]	; (801cc58 <initModeNames+0x40c>)
	shortModeNames[SamplerAutoGrab] = "AS";
 801ca6e:	f8cc 901c 	str.w	r9, [ip, #28]
	modeNamesDetails[SamplerAutoGrab] = "AUDIO TRIG'D";
 801ca72:	f8cb a01c 	str.w	sl, [fp, #28]
	modeNames[Wavefolder] = "WAVEFOLD";
 801ca76:	f8c8 6024 	str.w	r6, [r8, #36]	; 0x24
	knobParamNames[SamplerAutoGrab][6] = "SPD RAND";
 801ca7a:	f8df e288 	ldr.w	lr, [pc, #648]	; 801cd04 <initModeNames+0x4b8>
	modeNames[Distortion] = "DISTORT";
 801ca7e:	f8df 9288 	ldr.w	r9, [pc, #648]	; 801cd08 <initModeNames+0x4bc>
	shortModeNames[Distortion] = "DT";
 801ca82:	4f76      	ldr	r7, [pc, #472]	; (801cc5c <initModeNames+0x410>)
	knobParamNames[Distortion][1] = "TILT";
 801ca84:	f8c3 5324 	str.w	r5, [r3, #804]	; 0x324
	knobParamNames[BitCrusher][0] = "QUALITY";
 801ca88:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
	modeNamesDetails[Distortion] = "WITH EQ";
 801ca8c:	4d74      	ldr	r5, [pc, #464]	; (801cc60 <initModeNames+0x414>)
	knobParamNames[Distortion][2] = "MID GAIN";
 801ca8e:	4a75      	ldr	r2, [pc, #468]	; (801cc64 <initModeNames+0x418>)
	knobParamNames[Distortion][3] = "MID FREQ";
 801ca90:	f8df a278 	ldr.w	sl, [pc, #632]	; 801cd0c <initModeNames+0x4c0>
	knobParamNames[SamplerAutoGrab][1] = "WINDOW";
 801ca94:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
	knobParamNames[SamplerAutoGrab][5] = "LEN RAND";
 801ca98:	f8c3 42d0 	str.w	r4, [r3, #720]	; 0x2d0
	shortModeNames[Wavefolder] = "WF";
 801ca9c:	4872      	ldr	r0, [pc, #456]	; (801cc68 <initModeNames+0x41c>)
	modeNamesDetails[Wavefolder] = "SERGE STYLE";
 801ca9e:	4c73      	ldr	r4, [pc, #460]	; (801cc6c <initModeNames+0x420>)
	knobParamNames[BitCrusher][1] = "SAMP RATIO";
 801caa0:	4e73      	ldr	r6, [pc, #460]	; (801cc70 <initModeNames+0x424>)
	modeNames[Distortion] = "DISTORT";
 801caa2:	f8c8 9020 	str.w	r9, [r8, #32]
	shortModeNames[Distortion] = "DT";
 801caa6:	f8cc 7020 	str.w	r7, [ip, #32]
	modeNamesDetails[Distortion] = "WITH EQ";
 801caaa:	f8cb 5020 	str.w	r5, [fp, #32]
	shortModeNames[Wavefolder] = "WF";
 801caae:	f8cc 0024 	str.w	r0, [ip, #36]	; 0x24
	modeNamesDetails[Wavefolder] = "SERGE STYLE";
 801cab2:	f8cb 4024 	str.w	r4, [fp, #36]	; 0x24
	knobParamNames[Distortion][0] = "PRE GAIN";
 801cab6:	486f      	ldr	r0, [pc, #444]	; (801cc74 <initModeNames+0x428>)
	knobParamNames[Distortion][4] = "POST GAIN";
 801cab8:	4c6f      	ldr	r4, [pc, #444]	; (801cc78 <initModeNames+0x42c>)
	knobParamNames[SamplerAutoGrab][6] = "SPD RAND";
 801caba:	f8c3 e2d4 	str.w	lr, [r3, #724]	; 0x2d4
	knobParamNames[Wavefolder][1] = "OFFSET1";
 801cabe:	f8df 9250 	ldr.w	r9, [pc, #592]	; 801cd10 <initModeNames+0x4c4>
	knobParamNames[Wavefolder][0] = "GAIN";
 801cac2:	f8df e250 	ldr.w	lr, [pc, #592]	; 801cd14 <initModeNames+0x4c8>
	knobParamNames[Wavefolder][2] = "OFFSET2";
 801cac6:	4f6d      	ldr	r7, [pc, #436]	; (801cc7c <initModeNames+0x430>)
	modeNames[BitCrusher] = "BITCRUSH";
 801cac8:	4d6d      	ldr	r5, [pc, #436]	; (801cc80 <initModeNames+0x434>)
	knobParamNames[Distortion][2] = "MID GAIN";
 801caca:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	knobParamNames[Distortion][3] = "MID FREQ";
 801cace:	f8c3 a32c 	str.w	sl, [r3, #812]	; 0x32c
	shortModeNames[BitCrusher] = "BC";
 801cad2:	4a6c      	ldr	r2, [pc, #432]	; (801cc84 <initModeNames+0x438>)
	modeNamesDetails[BitCrusher] = "AHH HALP ME";
 801cad4:	f8df a240 	ldr.w	sl, [pc, #576]	; 801cd18 <initModeNames+0x4cc>
	knobParamNames[BitCrusher][1] = "SAMP RATIO";
 801cad8:	f8c3 63ec 	str.w	r6, [r3, #1004]	; 0x3ec
	knobParamNames[BitCrusher][8] = "";
	knobParamNames[BitCrusher][9] = "";

	modeNames[Delay] = "DELAY";
	shortModeNames[Delay] = "DL";
	modeNamesDetails[Delay] = "STEREO";
 801cadc:	4e4c      	ldr	r6, [pc, #304]	; (801cc10 <initModeNames+0x3c4>)
	modeNames[BitCrusher] = "BITCRUSH";
 801cade:	f8c8 5028 	str.w	r5, [r8, #40]	; 0x28
	shortModeNames[BitCrusher] = "BC";
 801cae2:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	modeNamesDetails[BitCrusher] = "AHH HALP ME";
 801cae6:	f8cb a028 	str.w	sl, [fp, #40]	; 0x28
	knobParamNames[SamplerAutoGrab][4] = "";
 801caea:	f8c3 12cc 	str.w	r1, [r3, #716]	; 0x2cc
	knobParamNames[SamplerAutoGrab][7] = "";
 801caee:	f8c3 12d8 	str.w	r1, [r3, #728]	; 0x2d8
	knobParamNames[SamplerAutoGrab][8] = "";
 801caf2:	f8c3 12dc 	str.w	r1, [r3, #732]	; 0x2dc
	knobParamNames[SamplerAutoGrab][9] = "";
 801caf6:	f8c3 12e0 	str.w	r1, [r3, #736]	; 0x2e0
	knobParamNames[Wavefolder][4] = "";
 801cafa:	f8c3 1394 	str.w	r1, [r3, #916]	; 0x394
	knobParamNames[Wavefolder][0] = "GAIN";
 801cafe:	f8c3 e384 	str.w	lr, [r3, #900]	; 0x384
	knobParamNames[Wavefolder][1] = "OFFSET1";
 801cb02:	f8c3 9388 	str.w	r9, [r3, #904]	; 0x388
	knobParamNames[Wavefolder][2] = "OFFSET2";
 801cb06:	f8c3 738c 	str.w	r7, [r3, #908]	; 0x38c
	knobParamNames[Distortion][0] = "PRE GAIN";
 801cb0a:	f8c3 0320 	str.w	r0, [r3, #800]	; 0x320
	knobParamNames[Distortion][4] = "POST GAIN";
 801cb0e:	f8c3 4330 	str.w	r4, [r3, #816]	; 0x330
	knobParamNames[Wavefolder][3] = "POST GAIN";
 801cb12:	f8c3 4390 	str.w	r4, [r3, #912]	; 0x390
	modeNamesDetails[Delay] = "STEREO";
 801cb16:	f8cb 602c 	str.w	r6, [fp, #44]	; 0x2c
	knobParamNames[BitCrusher][4] = "POST GAIN";
 801cb1a:	f8c3 43f8 	str.w	r4, [r3, #1016]	; 0x3f8
	knobParamNames[Delay][0] = "DELAY_L";
	knobParamNames[Delay][1] = "DELAY_R";
	knobParamNames[Delay][2] = "HIGHPASS";
	knobParamNames[Delay][3] = "LOWPASS";
	knobParamNames[Delay][4] = "FEEDBACK";
	knobParamNames[Delay][5] = "POST GAIN";
 801cb1e:	f8c3 4460 	str.w	r4, [r3, #1120]	; 0x460
	knobParamNames[Delay][6] = "POST GAIN";
 801cb22:	f8c3 4464 	str.w	r4, [r3, #1124]	; 0x464
	knobParamNames[Delay][7] = "POST GAIN";
 801cb26:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
	knobParamNames[Delay][8] = "POST GAIN";
 801cb2a:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
	knobParamNames[Delay][1] = "DELAY_R";
 801cb2e:	4e56      	ldr	r6, [pc, #344]	; (801cc88 <initModeNames+0x43c>)
	numPages[Reverb] = 1;
	knobParamNames[Reverb][0] = "SIZE";
	knobParamNames[Reverb][1] = "FB LOPASS";
	knobParamNames[Reverb][2] = "IN HIPASS";
	knobParamNames[Reverb][3] = "IN LOPASS";
	knobParamNames[Reverb][4] = "FB GAIN";
 801cb30:	4c56      	ldr	r4, [pc, #344]	; (801cc8c <initModeNames+0x440>)
	knobParamNames[BitCrusher][2] = "ROUNDING";
 801cb32:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 801cd1c <initModeNames+0x4d0>
	knobParamNames[BitCrusher][3] = "OPERATION";
 801cb36:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 801cd20 <initModeNames+0x4d4>
	modeNames[Delay] = "DELAY";
 801cb3a:	4f55      	ldr	r7, [pc, #340]	; (801cc90 <initModeNames+0x444>)
	shortModeNames[Delay] = "DL";
 801cb3c:	4d55      	ldr	r5, [pc, #340]	; (801cc94 <initModeNames+0x448>)
	knobParamNames[Delay][0] = "DELAY_L";
 801cb3e:	4a56      	ldr	r2, [pc, #344]	; (801cc98 <initModeNames+0x44c>)
	knobParamNames[BitCrusher][5] = "PRE GAIN";
 801cb40:	f8c3 03fc 	str.w	r0, [r3, #1020]	; 0x3fc
	knobParamNames[Delay][1] = "DELAY_R";
 801cb44:	f8c3 6450 	str.w	r6, [r3, #1104]	; 0x450
	knobParamNames[Reverb][2] = "IN HIPASS";
 801cb48:	4854      	ldr	r0, [pc, #336]	; (801cc9c <initModeNames+0x450>)
	knobParamNames[Reverb][1] = "FB LOPASS";
 801cb4a:	4e55      	ldr	r6, [pc, #340]	; (801cca0 <initModeNames+0x454>)
	knobParamNames[Reverb][4] = "FB GAIN";
 801cb4c:	f8c3 44c0 	str.w	r4, [r3, #1216]	; 0x4c0
	knobParamNames[Delay][3] = "LOWPASS";
 801cb50:	4c54      	ldr	r4, [pc, #336]	; (801cca4 <initModeNames+0x458>)
	modeNames[Delay] = "DELAY";
 801cb52:	f8c8 702c 	str.w	r7, [r8, #44]	; 0x2c
	shortModeNames[Delay] = "DL";
 801cb56:	f8cc 502c 	str.w	r5, [ip, #44]	; 0x2c
	modeNames[Reverb] = "REVERB1";
 801cb5a:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 801cd24 <initModeNames+0x4d8>
	knobParamNames[BitCrusher][2] = "ROUNDING";
 801cb5e:	f8c3 e3f0 	str.w	lr, [r3, #1008]	; 0x3f0
	knobParamNames[BitCrusher][3] = "OPERATION";
 801cb62:	f8c3 93f4 	str.w	r9, [r3, #1012]	; 0x3f4
	knobParamNames[Reverb][3] = "IN LOPASS";
 801cb66:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 801cd28 <initModeNames+0x4dc>
	modeNamesDetails[Reverb] = "DATTORRO ALG";
 801cb6a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 801cd2c <initModeNames+0x4e0>


	modeNames[Reverb2] = "REVERB2";
 801cb6e:	4f4e      	ldr	r7, [pc, #312]	; (801cca8 <initModeNames+0x45c>)
	shortModeNames[Reverb2] = "RV";
	modeNamesDetails[Reverb2] = "NREVERB ALG";
 801cb70:	4d4e      	ldr	r5, [pc, #312]	; (801ccac <initModeNames+0x460>)
	knobParamNames[Delay][0] = "DELAY_L";
 801cb72:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
	knobParamNames[Reverb][1] = "FB LOPASS";
 801cb76:	f8c3 64b4 	str.w	r6, [r3, #1204]	; 0x4b4
	knobParamNames[Delay][2] = "HIGHPASS";
 801cb7a:	4a4d      	ldr	r2, [pc, #308]	; (801ccb0 <initModeNames+0x464>)
	shortModeNames[Reverb] = "RV";
 801cb7c:	4e4d      	ldr	r6, [pc, #308]	; (801ccb4 <initModeNames+0x468>)
	knobParamNames[Reverb][2] = "IN HIPASS";
 801cb7e:	f8c3 04b8 	str.w	r0, [r3, #1208]	; 0x4b8
	knobParamNames[Delay][3] = "LOWPASS";
 801cb82:	f8c3 4458 	str.w	r4, [r3, #1112]	; 0x458
	knobParamNames[Reverb][0] = "SIZE";
 801cb86:	484c      	ldr	r0, [pc, #304]	; (801ccb8 <initModeNames+0x46c>)
	knobParamNames[Delay][4] = "FEEDBACK";
 801cb88:	4c4c      	ldr	r4, [pc, #304]	; (801ccbc <initModeNames+0x470>)
	modeNames[Reverb] = "REVERB1";
 801cb8a:	f8c8 a030 	str.w	sl, [r8, #48]	; 0x30
	modeNamesDetails[Reverb] = "DATTORRO ALG";
 801cb8e:	f8cb 9030 	str.w	r9, [fp, #48]	; 0x30
	modeNames[Reverb2] = "REVERB2";
 801cb92:	f8c8 7034 	str.w	r7, [r8, #52]	; 0x34
	modeNamesDetails[Reverb2] = "NREVERB ALG";
 801cb96:	f8cb 5034 	str.w	r5, [fp, #52]	; 0x34
 801cb9a:	e0c9      	b.n	801cd30 <initModeNames+0x4e4>
 801cb9c:	20018938 	.word	0x20018938
 801cba0:	20018788 	.word	0x20018788
 801cba4:	2001883c 	.word	0x2001883c
 801cba8:	0802c3dc 	.word	0x0802c3dc
 801cbac:	20018964 	.word	0x20018964
 801cbb0:	0802c3e0 	.word	0x0802c3e0
 801cbb4:	0802c3f8 	.word	0x0802c3f8
 801cbb8:	0802c438 	.word	0x0802c438
 801cbbc:	0802c3d8 	.word	0x0802c3d8
 801cbc0:	0802c444 	.word	0x0802c444
 801cbc4:	0802c404 	.word	0x0802c404
 801cbc8:	0802c42c 	.word	0x0802c42c
 801cbcc:	0802c348 	.word	0x0802c348
 801cbd0:	0802c448 	.word	0x0802c448
 801cbd4:	0802c464 	.word	0x0802c464
 801cbd8:	0802c3f0 	.word	0x0802c3f0
 801cbdc:	0802c410 	.word	0x0802c410
 801cbe0:	0802c420 	.word	0x0802c420
 801cbe4:	0802c418 	.word	0x0802c418
 801cbe8:	0802c480 	.word	0x0802c480
 801cbec:	0802c498 	.word	0x0802c498
 801cbf0:	0802c49c 	.word	0x0802c49c
 801cbf4:	0802c4a4 	.word	0x0802c4a4
 801cbf8:	0802c4b4 	.word	0x0802c4b4
 801cbfc:	0802c4bc 	.word	0x0802c4bc
 801cc00:	0802c4cc 	.word	0x0802c4cc
 801cc04:	0802c4e8 	.word	0x0802c4e8
 801cc08:	0802c4e4 	.word	0x0802c4e4
 801cc0c:	0802c45c 	.word	0x0802c45c
 801cc10:	0802c478 	.word	0x0802c478
 801cc14:	0802c4ec 	.word	0x0802c4ec
 801cc18:	0802c510 	.word	0x0802c510
 801cc1c:	0802c514 	.word	0x0802c514
 801cc20:	0802c568 	.word	0x0802c568
 801cc24:	0802c4d8 	.word	0x0802c4d8
 801cc28:	0802c524 	.word	0x0802c524
 801cc2c:	0802c56c 	.word	0x0802c56c
 801cc30:	0802c55c 	.word	0x0802c55c
 801cc34:	0802c578 	.word	0x0802c578
 801cc38:	0802c58c 	.word	0x0802c58c
 801cc3c:	0802c534 	.word	0x0802c534
 801cc40:	0802c53c 	.word	0x0802c53c
 801cc44:	0802c544 	.word	0x0802c544
 801cc48:	0802c5ac 	.word	0x0802c5ac
 801cc4c:	0802c550 	.word	0x0802c550
 801cc50:	0802c5b8 	.word	0x0802c5b8
 801cc54:	0802c5c0 	.word	0x0802c5c0
 801cc58:	0802c61c 	.word	0x0802c61c
 801cc5c:	0802c5e0 	.word	0x0802c5e0
 801cc60:	0802c5e4 	.word	0x0802c5e4
 801cc64:	0802c5f8 	.word	0x0802c5f8
 801cc68:	0802c628 	.word	0x0802c628
 801cc6c:	0802c62c 	.word	0x0802c62c
 801cc70:	0802c664 	.word	0x0802c664
 801cc74:	0802c5ec 	.word	0x0802c5ec
 801cc78:	0802c610 	.word	0x0802c610
 801cc7c:	0802c640 	.word	0x0802c640
 801cc80:	0802c648 	.word	0x0802c648
 801cc84:	0802c654 	.word	0x0802c654
 801cc88:	0802c69c 	.word	0x0802c69c
 801cc8c:	0802c70c 	.word	0x0802c70c
 801cc90:	0802c688 	.word	0x0802c688
 801cc94:	0802c690 	.word	0x0802c690
 801cc98:	0802c694 	.word	0x0802c694
 801cc9c:	0802c6f4 	.word	0x0802c6f4
 801cca0:	0802c6e8 	.word	0x0802c6e8
 801cca4:	0802c6b0 	.word	0x0802c6b0
 801cca8:	0802c714 	.word	0x0802c714
 801ccac:	0802c71c 	.word	0x0802c71c
 801ccb0:	0802c6a4 	.word	0x0802c6a4
 801ccb4:	0802c6cc 	.word	0x0802c6cc
 801ccb8:	0802c6e0 	.word	0x0802c6e0
 801ccbc:	0802c6b8 	.word	0x0802c6b8
 801ccc0:	200188f0 	.word	0x200188f0
 801ccc4:	03020100 	.word	0x03020100
 801ccc8:	0802c3e8 	.word	0x0802c3e8
 801cccc:	20018740 	.word	0x20018740
 801ccd0:	0802c3cc 	.word	0x0802c3cc
 801ccd4:	20018880 	.word	0x20018880
 801ccd8:	0802c48c 	.word	0x0802c48c
 801ccdc:	0802c450 	.word	0x0802c450
 801cce0:	0802c470 	.word	0x0802c470
 801cce4:	0802c4ac 	.word	0x0802c4ac
 801cce8:	0802c4c4 	.word	0x0802c4c4
 801ccec:	0802c520 	.word	0x0802c520
 801ccf0:	0802c504 	.word	0x0802c504
 801ccf4:	0802c4f8 	.word	0x0802c4f8
 801ccf8:	0802c580 	.word	0x0802c580
 801ccfc:	0802c598 	.word	0x0802c598
 801cd00:	0802c59c 	.word	0x0802c59c
 801cd04:	0802c5cc 	.word	0x0802c5cc
 801cd08:	0802c5d8 	.word	0x0802c5d8
 801cd0c:	0802c604 	.word	0x0802c604
 801cd10:	0802c638 	.word	0x0802c638
 801cd14:	0802c5fc 	.word	0x0802c5fc
 801cd18:	0802c658 	.word	0x0802c658
 801cd1c:	0802c670 	.word	0x0802c670
 801cd20:	0802c67c 	.word	0x0802c67c
 801cd24:	0802c6c4 	.word	0x0802c6c4
 801cd28:	0802c700 	.word	0x0802c700
 801cd2c:	0802c6d0 	.word	0x0802c6d0
	knobParamNames[BitCrusher][6] = "";
 801cd30:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
	knobParamNames[BitCrusher][7] = "";
 801cd34:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
	knobParamNames[BitCrusher][8] = "";
 801cd38:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
	knobParamNames[BitCrusher][9] = "";
 801cd3c:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
	knobParamNames[Delay][9] = "";
 801cd40:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
	knobParamNames[Reverb][3] = "IN LOPASS";
 801cd44:	f8c3 e4bc 	str.w	lr, [r3, #1212]	; 0x4bc
	knobParamNames[Delay][2] = "HIGHPASS";
 801cd48:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
	knobParamNames[Delay][4] = "FEEDBACK";
 801cd4c:	f8c3 445c 	str.w	r4, [r3, #1116]	; 0x45c
	knobParamNames[Reverb][0] = "SIZE";
 801cd50:	f8c3 04b0 	str.w	r0, [r3, #1200]	; 0x4b0
	numPages[Reverb2] = 1;
	knobParamNames[Reverb2][0] = "SIZE";
	knobParamNames[Reverb2][1] = "LOWPASS";
	knobParamNames[Reverb2][2] = "HIGHPASS";
	knobParamNames[Reverb2][3] = "PEAK_FREQ";
 801cd54:	f8df e2fc 	ldr.w	lr, [pc, #764]	; 801d054 <initModeNames+0x808>

	modeNames[LivingString] = "STRING1";
	shortModeNames[LivingString] = "LS";
	modeNamesDetails[LivingString] = "SYMP STRING";
	numPages[LivingString] = 3;
	knobParamNames[LivingString][0] = "FREQ1";
 801cd58:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 801d058 <initModeNames+0x80c>
	knobParamNames[LivingString][5] = "PREP POS";
	knobParamNames[LivingString][6] = "PREP FORCE";
	knobParamNames[LivingString][7] = "LET RING";
	knobParamNames[LivingString][8] = "";
	knobParamNames[LivingString][9] = "";
	knobParamNames[LivingString][10] = "FREQ2";
 801cd5c:	4f8d      	ldr	r7, [pc, #564]	; (801cf94 <initModeNames+0x748>)
	knobParamNames[LivingString][11] = "FREQ3";
 801cd5e:	4d8e      	ldr	r5, [pc, #568]	; (801cf98 <initModeNames+0x74c>)
	knobParamNames[Reverb2][1] = "LOWPASS";
 801cd60:	4c8e      	ldr	r4, [pc, #568]	; (801cf9c <initModeNames+0x750>)
	knobParamNames[LivingString][12] = "FREQ4";
 801cd62:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 801d05c <initModeNames+0x810>
	shortModeNames[Reverb2] = "RV";
 801cd66:	e9cc 660c 	strd	r6, r6, [ip, #48]	; 0x30
	knobParamNames[Reverb2][0] = "SIZE";
 801cd6a:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	knobParamNames[Reverb2][2] = "HIGHPASS";
 801cd6e:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
	knobParamNames[Reverb2][4] = "PEAK_GAIN";
 801cd72:	4a8b      	ldr	r2, [pc, #556]	; (801cfa0 <initModeNames+0x754>)
	knobParamNames[Reverb2][3] = "PEAK_FREQ";
 801cd74:	f8c3 e520 	str.w	lr, [r3, #1312]	; 0x520
	knobParamNames[Reverb2][4] = "PEAK_GAIN";
 801cd78:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	knobParamNames[LivingString][4] = "PICK POS";
 801cd7c:	4a89      	ldr	r2, [pc, #548]	; (801cfa4 <initModeNames+0x758>)
	knobParamNames[LivingString][13] = "FREQ5";
	knobParamNames[LivingString][14] = "FREQ6";
 801cd7e:	f8df e2e0 	ldr.w	lr, [pc, #736]	; 801d060 <initModeNames+0x814>
	knobParamNames[LivingString][4] = "PICK POS";
 801cd82:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588
	modeNames[LivingString] = "STRING1";
 801cd86:	4a88      	ldr	r2, [pc, #544]	; (801cfa8 <initModeNames+0x75c>)
	knobParamNames[LivingString][13] = "FREQ5";
 801cd88:	4e88      	ldr	r6, [pc, #544]	; (801cfac <initModeNames+0x760>)
	modeNames[LivingString] = "STRING1";
 801cd8a:	f8c8 2038 	str.w	r2, [r8, #56]	; 0x38
	knobParamNames[LivingString][14] = "FREQ6";
 801cd8e:	f8c3 e5b0 	str.w	lr, [r3, #1456]	; 0x5b0
	knobParamNames[LivingString][3] = "DAMPING";
 801cd92:	4a87      	ldr	r2, [pc, #540]	; (801cfb0 <initModeNames+0x764>)

	modeNames[LivingStringSynth] = "STRING2";
	shortModeNames[LivingStringSynth] = "SS";
	modeNamesDetails[LivingStringSynth] = "STRING SYNTH";
 801cd94:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 801d064 <initModeNames+0x818>
	knobParamNames[Reverb2][1] = "LOWPASS";
 801cd98:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	modeNamesDetails[LivingStringSynth] = "STRING SYNTH";
 801cd9c:	f8cb e03c 	str.w	lr, [fp, #60]	; 0x3c
	numPages[LivingStringSynth] = 2;
	knobParamNames[LivingStringSynth][0] = "PLUCK VOL";
 801cda0:	4c84      	ldr	r4, [pc, #528]	; (801cfb4 <initModeNames+0x768>)
	knobParamNames[LivingString][0] = "FREQ1";
 801cda2:	f8c3 9578 	str.w	r9, [r3, #1400]	; 0x578
	knobParamNames[LivingString][10] = "FREQ2";
 801cda6:	f8c3 75a0 	str.w	r7, [r3, #1440]	; 0x5a0
	knobParamNames[LivingStringSynth][1] = "PLUCK TONE";
 801cdaa:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 801d068 <initModeNames+0x81c>
	shortModeNames[LivingString] = "LS";
 801cdae:	4f82      	ldr	r7, [pc, #520]	; (801cfb8 <initModeNames+0x76c>)
	knobParamNames[LivingString][11] = "FREQ3";
 801cdb0:	f8c3 55a4 	str.w	r5, [r3, #1444]	; 0x5a4
	modeNames[LivingStringSynth] = "STRING2";
 801cdb4:	4881      	ldr	r0, [pc, #516]	; (801cfbc <initModeNames+0x770>)
	modeNamesDetails[LivingString] = "SYMP STRING";
 801cdb6:	4d82      	ldr	r5, [pc, #520]	; (801cfc0 <initModeNames+0x774>)
	knobParamNames[LivingString][13] = "FREQ5";
 801cdb8:	f8c3 65ac 	str.w	r6, [r3, #1452]	; 0x5ac
	numPages[Vocoder] = 2;
 801cdbc:	f8df e2ac 	ldr.w	lr, [pc, #684]	; 801d06c <initModeNames+0x820>
	shortModeNames[LivingStringSynth] = "SS";
 801cdc0:	4e80      	ldr	r6, [pc, #512]	; (801cfc4 <initModeNames+0x778>)
	knobParamNames[LivingString][3] = "DAMPING";
 801cdc2:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
	knobParamNames[LivingStringSynth][2] = "DECAY";
	knobParamNames[LivingStringSynth][3] = "DAMPING";
 801cdc6:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
	numPages[Vocoder] = 2;
 801cdca:	4a7f      	ldr	r2, [pc, #508]	; (801cfc8 <initModeNames+0x77c>)
	shortModeNames[LivingString] = "LS";
 801cdcc:	f8cc 7038 	str.w	r7, [ip, #56]	; 0x38
	modeNamesDetails[LivingString] = "SYMP STRING";
 801cdd0:	f8cb 5038 	str.w	r5, [fp, #56]	; 0x38
	knobParamNames[LivingString][5] = "PREP POS";
 801cdd4:	4f7d      	ldr	r7, [pc, #500]	; (801cfcc <initModeNames+0x780>)
	knobParamNames[LivingString][6] = "PREP FORCE";
 801cdd6:	4d7e      	ldr	r5, [pc, #504]	; (801cfd0 <initModeNames+0x784>)
	modeNames[LivingStringSynth] = "STRING2";
 801cdd8:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
	shortModeNames[LivingStringSynth] = "SS";
 801cddc:	f8cc 603c 	str.w	r6, [ip, #60]	; 0x3c
	knobParamNames[LivingString][7] = "LET RING";
 801cde0:	487c      	ldr	r0, [pc, #496]	; (801cfd4 <initModeNames+0x788>)
	knobParamNames[LivingString][2] = "DECAY";
 801cde2:	4e7d      	ldr	r6, [pc, #500]	; (801cfd8 <initModeNames+0x78c>)
	numPages[Vocoder] = 2;
 801cde4:	f8c2 e000 	str.w	lr, [r2]
	knobParamNames[LivingStringSynth][0] = "PLUCK VOL";
 801cde8:	f8c3 45dc 	str.w	r4, [r3, #1500]	; 0x5dc
	numPages[Vocoder] = 2;
 801cdec:	f8df e280 	ldr.w	lr, [pc, #640]	; 801d070 <initModeNames+0x824>
	knobParamNames[LivingString][1] = "DETUNE";
 801cdf0:	4c7a      	ldr	r4, [pc, #488]	; (801cfdc <initModeNames+0x790>)
	knobParamNames[LivingStringSynth][1] = "PLUCK TONE";
 801cdf2:	f8c3 95e0 	str.w	r9, [r3, #1504]	; 0x5e0
	numPages[Vocoder] = 2;
 801cdf6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801d074 <initModeNames+0x828>
 801cdfa:	f8c2 e004 	str.w	lr, [r2, #4]
 801cdfe:	f8c2 900c 	str.w	r9, [r2, #12]
	knobParamNames[LivingString][8] = "";
 801ce02:	f8c3 1598 	str.w	r1, [r3, #1432]	; 0x598
	knobParamNames[LivingString][9] = "";
 801ce06:	f8c3 159c 	str.w	r1, [r3, #1436]	; 0x59c
	knobParamNames[LivingString][12] = "FREQ4";
 801ce0a:	f8c3 a5a8 	str.w	sl, [r3, #1448]	; 0x5a8
	knobParamNames[LivingString][1] = "DETUNE";
 801ce0e:	f8c3 457c 	str.w	r4, [r3, #1404]	; 0x57c
	knobParamNames[LivingString][2] = "DECAY";
 801ce12:	f8c3 6580 	str.w	r6, [r3, #1408]	; 0x580
	knobParamNames[LivingStringSynth][2] = "DECAY";
 801ce16:	f8c3 65e4 	str.w	r6, [r3, #1508]	; 0x5e4
	knobParamNames[LivingString][5] = "PREP POS";
 801ce1a:	f8c3 758c 	str.w	r7, [r3, #1420]	; 0x58c
	knobParamNames[LivingString][6] = "PREP FORCE";
 801ce1e:	f8c3 5590 	str.w	r5, [r3, #1424]	; 0x590
	knobParamNames[LivingString][7] = "LET RING";
 801ce22:	f8c3 0594 	str.w	r0, [r3, #1428]	; 0x594
	numPages[Vocoder] = 2;
 801ce26:	f8c2 e008 	str.w	lr, [r2, #8]
	knobParamNames[LivingStringSynth][4] = "PICK_POS";
	knobParamNames[LivingStringSynth][5] = "PREP POS";
	knobParamNames[LivingStringSynth][6] = "PREP FORCE";
	knobParamNames[LivingStringSynth][7] = "LET RING";
 801ce2a:	f8c3 05f8 	str.w	r0, [r3, #1528]	; 0x5f8
	knobParamNames[ClassicSynth][12] = "F_SUSTAIN";
	knobParamNames[ClassicSynth][13] = "F_RELEASE";
	knobParamNames[ClassicSynth][14] = "F_LEAK";
	knobParamNames[ClassicSynth][15] = "F_AMOUNT";
	knobParamNames[ClassicSynth][16] = "SAW/PULSE";
	knobParamNames[ClassicSynth][17] = "";
 801ce2e:	f8c3 1684 	str.w	r1, [r3, #1668]	; 0x684
	knobParamNames[ClassicSynth][0] = "VOLUME";
 801ce32:	486b      	ldr	r0, [pc, #428]	; (801cfe0 <initModeNames+0x794>)
	knobParamNames[ClassicSynth][18] = "";
 801ce34:	f8c3 1688 	str.w	r1, [r3, #1672]	; 0x688
	knobParamNames[ClassicSynth][19] = "";
 801ce38:	f8c3 168c 	str.w	r1, [r3, #1676]	; 0x68c
	numPages[ClassicSynth] = 4;
 801ce3c:	f04f 0104 	mov.w	r1, #4
	knobParamNames[LivingStringSynth][4] = "PICK_POS";
 801ce40:	f8df 9234 	ldr.w	r9, [pc, #564]	; 801d078 <initModeNames+0x82c>
	numPages[ClassicSynth] = 4;
 801ce44:	7411      	strb	r1, [r2, #16]
	knobParamNames[ClassicSynth][0] = "VOLUME";
 801ce46:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
	knobParamNames[LivingStringSynth][8] = "FB LEVEL";
 801ce4a:	4a66      	ldr	r2, [pc, #408]	; (801cfe4 <initModeNames+0x798>)
	knobParamNames[ClassicSynth][1] = "LOWPASS";
 801ce4c:	4853      	ldr	r0, [pc, #332]	; (801cf9c <initModeNames+0x750>)
	knobParamNames[LivingStringSynth][4] = "PICK_POS";
 801ce4e:	f8c3 95ec 	str.w	r9, [r3, #1516]	; 0x5ec
	knobParamNames[LivingStringSynth][5] = "PREP POS";
 801ce52:	f8c3 75f0 	str.w	r7, [r3, #1520]	; 0x5f0
	knobParamNames[ClassicSynth][4] = "FILTER Q";
 801ce56:	f8df a224 	ldr.w	sl, [pc, #548]	; 801d07c <initModeNames+0x830>
	knobParamNames[LivingStringSynth][6] = "PREP FORCE";
 801ce5a:	f8c3 55f4 	str.w	r5, [r3, #1524]	; 0x5f4
	knobParamNames[ClassicSynth][10] = "F_ATTACK";
 801ce5e:	f8df 9220 	ldr.w	r9, [pc, #544]	; 801d080 <initModeNames+0x834>
	knobParamNames[ClassicSynth][11] = "F_DECAY";
 801ce62:	f8df e220 	ldr.w	lr, [pc, #544]	; 801d084 <initModeNames+0x838>
	knobParamNames[ClassicSynth][12] = "F_SUSTAIN";
 801ce66:	4f60      	ldr	r7, [pc, #384]	; (801cfe8 <initModeNames+0x79c>)
	knobParamNames[ClassicSynth][1] = "LOWPASS";
 801ce68:	f8c3 0644 	str.w	r0, [r3, #1604]	; 0x644
	knobParamNames[ClassicSynth][3] = "DETUNE";
 801ce6c:	f8c3 464c 	str.w	r4, [r3, #1612]	; 0x64c
	knobParamNames[ClassicSynth][13] = "F_RELEASE";
 801ce70:	485e      	ldr	r0, [pc, #376]	; (801cfec <initModeNames+0x7a0>)
	knobParamNames[ClassicSynth][14] = "F_LEAK";
 801ce72:	4d5f      	ldr	r5, [pc, #380]	; (801cff0 <initModeNames+0x7a4>)
	knobParamNames[ClassicSynth][6] = "DECAY";
 801ce74:	f8c3 6658 	str.w	r6, [r3, #1624]	; 0x658
	knobParamNames[ClassicSynth][15] = "F_AMOUNT";
 801ce78:	4c5e      	ldr	r4, [pc, #376]	; (801cff4 <initModeNames+0x7a8>)
	knobParamNames[ClassicSynth][16] = "SAW/PULSE";
 801ce7a:	495f      	ldr	r1, [pc, #380]	; (801cff8 <initModeNames+0x7ac>)
	knobParamNames[LivingStringSynth][8] = "FB LEVEL";
 801ce7c:	f8c3 25fc 	str.w	r2, [r3, #1532]	; 0x5fc
	knobParamNames[ClassicSynth][2] = "KEYFOLLOW";
 801ce80:	4e5e      	ldr	r6, [pc, #376]	; (801cffc <initModeNames+0x7b0>)
	modeNames[ClassicSynth] = "POLYSYNTH";
 801ce82:	4a5f      	ldr	r2, [pc, #380]	; (801d000 <initModeNames+0x7b4>)
	knobParamNames[ClassicSynth][2] = "KEYFOLLOW";
 801ce84:	f8c3 6648 	str.w	r6, [r3, #1608]	; 0x648
	modeNames[ClassicSynth] = "POLYSYNTH";
 801ce88:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
	knobParamNames[ClassicSynth][4] = "FILTER Q";
 801ce8c:	f8c3 a650 	str.w	sl, [r3, #1616]	; 0x650
	knobParamNames[ClassicSynth][10] = "F_ATTACK";
 801ce90:	f8c3 9668 	str.w	r9, [r3, #1640]	; 0x668
	modeNamesDetails[ClassicSynth] = "VCO+VCF";
 801ce94:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 801d088 <initModeNames+0x83c>

	modeNames[Rhodes] = "RHODES";
 801ce98:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 801d08c <initModeNames+0x840>
	knobParamNames[ClassicSynth][11] = "F_DECAY";
 801ce9c:	f8c3 e66c 	str.w	lr, [r3, #1644]	; 0x66c
	knobParamNames[ClassicSynth][12] = "F_SUSTAIN";
 801cea0:	f8c3 7670 	str.w	r7, [r3, #1648]	; 0x670
	shortModeNames[Rhodes] = "RD";
 801cea4:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 801d090 <initModeNames+0x844>
	modeNamesDetails[Rhodes] = "DARK";
 801cea8:	4f56      	ldr	r7, [pc, #344]	; (801d004 <initModeNames+0x7b8>)
	knobParamNames[ClassicSynth][13] = "F_RELEASE";
 801ceaa:	f8c3 0674 	str.w	r0, [r3, #1652]	; 0x674
	knobParamNames[ClassicSynth][14] = "F_LEAK";
 801ceae:	f8c3 5678 	str.w	r5, [r3, #1656]	; 0x678
	knobParamNames[LivingStringSynth][9] = "RELEASE";
 801ceb2:	4855      	ldr	r0, [pc, #340]	; (801d008 <initModeNames+0x7bc>)
	knobParamNames[ClassicSynth][5] = "ATTACK";
 801ceb4:	4d55      	ldr	r5, [pc, #340]	; (801d00c <initModeNames+0x7c0>)
	knobParamNames[ClassicSynth][15] = "F_AMOUNT";
 801ceb6:	f8c3 467c 	str.w	r4, [r3, #1660]	; 0x67c
	knobParamNames[ClassicSynth][16] = "SAW/PULSE";
 801ceba:	f8c3 1680 	str.w	r1, [r3, #1664]	; 0x680
	knobParamNames[ClassicSynth][7] = "SUSTAIN";
 801cebe:	4c54      	ldr	r4, [pc, #336]	; (801d010 <initModeNames+0x7c4>)
	knobParamNames[ClassicSynth][9] = "LEAK";
 801cec0:	4954      	ldr	r1, [pc, #336]	; (801d014 <initModeNames+0x7c8>)
	numPages[Rhodes] = 5;
	knobParamNames[Rhodes][0] = "BRIGHTNESS";
 801cec2:	4a55      	ldr	r2, [pc, #340]	; (801d018 <initModeNames+0x7cc>)
	shortModeNames[ClassicSynth] = "CS";
 801cec4:	4e55      	ldr	r6, [pc, #340]	; (801d01c <initModeNames+0x7d0>)
	modeNamesDetails[ClassicSynth] = "VCO+VCF";
 801cec6:	f8cb a040 	str.w	sl, [fp, #64]	; 0x40
	shortModeNames[ClassicSynth] = "CS";
 801ceca:	f8cc 6040 	str.w	r6, [ip, #64]	; 0x40
	modeNames[Rhodes] = "RHODES";
 801cece:	f8c8 9044 	str.w	r9, [r8, #68]	; 0x44
	shortModeNames[Rhodes] = "RD";
 801ced2:	f8cc e044 	str.w	lr, [ip, #68]	; 0x44
	modeNamesDetails[Rhodes] = "DARK";
 801ced6:	f8cb 7044 	str.w	r7, [fp, #68]	; 0x44
	numPages[Rhodes] = 5;
 801ceda:	f04f 0705 	mov.w	r7, #5
	knobParamNames[LivingStringSynth][9] = "RELEASE";
 801cede:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
	knobParamNames[ClassicSynth][8] = "RELEASE";
 801cee2:	f8c3 0660 	str.w	r0, [r3, #1632]	; 0x660
	knobParamNames[ClassicSynth][5] = "ATTACK";
 801cee6:	f8c3 5654 	str.w	r5, [r3, #1620]	; 0x654
	knobParamNames[ClassicSynth][7] = "SUSTAIN";
 801ceea:	f8c3 465c 	str.w	r4, [r3, #1628]	; 0x65c
	knobParamNames[ClassicSynth][9] = "LEAK";
 801ceee:	f8c3 1664 	str.w	r1, [r3, #1636]	; 0x664
	knobParamNames[Rhodes][0] = "BRIGHTNESS";
 801cef2:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
	knobParamNames[Rhodes][1] = "TREM DEPTH";
 801cef6:	4a4a      	ldr	r2, [pc, #296]	; (801d020 <initModeNames+0x7d4>)
	numPages[Rhodes] = 5;
 801cef8:	4e33      	ldr	r6, [pc, #204]	; (801cfc8 <initModeNames+0x77c>)
	knobParamNames[Rhodes][1] = "TREM DEPTH";
 801cefa:	f8c3 26a8 	str.w	r2, [r3, #1704]	; 0x6a8
	knobParamNames[Rhodes][2] = "TREM RATE";
 801cefe:	4a49      	ldr	r2, [pc, #292]	; (801d024 <initModeNames+0x7d8>)
	numPages[Rhodes] = 5;
 801cf00:	7477      	strb	r7, [r6, #17]
	knobParamNames[Rhodes][2] = "TREM RATE";
 801cf02:	f8c3 26ac 	str.w	r2, [r3, #1708]	; 0x6ac
	knobParamNames[Rhodes][3] = "DRIVE";
 801cf06:	4a48      	ldr	r2, [pc, #288]	; (801d028 <initModeNames+0x7dc>)
	knobParamNames[Rhodes][4] = "PAN SPREAD";
	knobParamNames[Rhodes][5] = "ATTACK";
	knobParamNames[Rhodes][6] = "DECAY";
 801cf08:	4e33      	ldr	r6, [pc, #204]	; (801cfd8 <initModeNames+0x78c>)
	knobParamNames[Rhodes][3] = "DRIVE";
 801cf0a:	f8c3 26b0 	str.w	r2, [r3, #1712]	; 0x6b0
	knobParamNames[Rhodes][4] = "PAN SPREAD";
 801cf0e:	4a47      	ldr	r2, [pc, #284]	; (801d02c <initModeNames+0x7e0>)
	knobParamNames[Rhodes][7] = "SUSTAIN";
	knobParamNames[Rhodes][8] = "RELEASE";
	knobParamNames[Rhodes][9] = "LEAK";
 801cf10:	f8c3 16c8 	str.w	r1, [r3, #1736]	; 0x6c8
	knobParamNames[Rhodes][4] = "PAN SPREAD";
 801cf14:	f8c3 26b4 	str.w	r2, [r3, #1716]	; 0x6b4
	knobParamNames[Rhodes][16] = "RATIO2";
	knobParamNames[Rhodes][17] = "RATIO3";
	knobParamNames[Rhodes][18] = "RATIO4";
	knobParamNames[Rhodes][19] = "RATIO5";
	knobParamNames[Rhodes][20] = "RATIO6";
	knobParamNames[Rhodes][21] = "FEEDBACK";
 801cf18:	4945      	ldr	r1, [pc, #276]	; (801d030 <initModeNames+0x7e4>)
	knobParamNames[Rhodes][10] = "INDEX1";
 801cf1a:	4a46      	ldr	r2, [pc, #280]	; (801d034 <initModeNames+0x7e8>)
	knobParamNames[Rhodes][12] = "INDEX3";
 801cf1c:	f8df a174 	ldr.w	sl, [pc, #372]	; 801d094 <initModeNames+0x848>
	knobParamNames[Rhodes][13] = "INDEX4";
 801cf20:	f8df 9174 	ldr.w	r9, [pc, #372]	; 801d098 <initModeNames+0x84c>
	knobParamNames[Rhodes][14] = "INDEX5";
 801cf24:	f8df 8174 	ldr.w	r8, [pc, #372]	; 801d09c <initModeNames+0x850>
	knobParamNames[Rhodes][15] = "RATIO1";
 801cf28:	f8df e174 	ldr.w	lr, [pc, #372]	; 801d0a0 <initModeNames+0x854>
	knobParamNames[Rhodes][5] = "ATTACK";
 801cf2c:	f8c3 56b8 	str.w	r5, [r3, #1720]	; 0x6b8
	knobParamNames[Rhodes][16] = "RATIO2";
 801cf30:	f8df c170 	ldr.w	ip, [pc, #368]	; 801d0a4 <initModeNames+0x858>
	knobParamNames[Rhodes][6] = "DECAY";
 801cf34:	f8c3 66bc 	str.w	r6, [r3, #1724]	; 0x6bc
	knobParamNames[Rhodes][17] = "RATIO3";
 801cf38:	4f3f      	ldr	r7, [pc, #252]	; (801d038 <initModeNames+0x7ec>)
	knobParamNames[Rhodes][7] = "SUSTAIN";
 801cf3a:	f8c3 46c0 	str.w	r4, [r3, #1728]	; 0x6c0
	knobParamNames[Rhodes][18] = "RATIO4";
 801cf3e:	4e3f      	ldr	r6, [pc, #252]	; (801d03c <initModeNames+0x7f0>)
	knobParamNames[Rhodes][8] = "RELEASE";
 801cf40:	f8c3 06c4 	str.w	r0, [r3, #1732]	; 0x6c4
	knobParamNames[Rhodes][19] = "RATIO5";
 801cf44:	4d3e      	ldr	r5, [pc, #248]	; (801d040 <initModeNames+0x7f4>)
	knobParamNames[Rhodes][20] = "RATIO6";
 801cf46:	4c3f      	ldr	r4, [pc, #252]	; (801d044 <initModeNames+0x7f8>)
	knobParamNames[Rhodes][21] = "FEEDBACK";
 801cf48:	f8c3 16f8 	str.w	r1, [r3, #1784]	; 0x6f8
	knobParamNames[Rhodes][22] = "TUNE SNAP";
 801cf4c:	483e      	ldr	r0, [pc, #248]	; (801d048 <initModeNames+0x7fc>)
	knobParamNames[Rhodes][23] = "RAND DECAY";
 801cf4e:	493f      	ldr	r1, [pc, #252]	; (801d04c <initModeNames+0x800>)
	knobParamNames[Rhodes][24] = "RAND SUST";
 801cf50:	f8df b154 	ldr.w	fp, [pc, #340]	; 801d0a8 <initModeNames+0x85c>
	knobParamNames[Rhodes][10] = "INDEX1";
 801cf54:	f8c3 26cc 	str.w	r2, [r3, #1740]	; 0x6cc
	knobParamNames[Rhodes][11] = "INDEX2";
 801cf58:	4a3d      	ldr	r2, [pc, #244]	; (801d050 <initModeNames+0x804>)
	knobParamNames[Rhodes][12] = "INDEX3";
 801cf5a:	f8c3 a6d4 	str.w	sl, [r3, #1748]	; 0x6d4
	knobParamNames[Rhodes][11] = "INDEX2";
 801cf5e:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
	knobParamNames[Rhodes][13] = "INDEX4";
 801cf62:	f8c3 96d8 	str.w	r9, [r3, #1752]	; 0x6d8
	knobParamNames[Rhodes][14] = "INDEX5";
 801cf66:	f8c3 86dc 	str.w	r8, [r3, #1756]	; 0x6dc
	knobParamNames[Rhodes][15] = "RATIO1";
 801cf6a:	f8c3 e6e0 	str.w	lr, [r3, #1760]	; 0x6e0
	knobParamNames[Rhodes][16] = "RATIO2";
 801cf6e:	f8c3 c6e4 	str.w	ip, [r3, #1764]	; 0x6e4
	knobParamNames[Rhodes][17] = "RATIO3";
 801cf72:	f8c3 76e8 	str.w	r7, [r3, #1768]	; 0x6e8
	knobParamNames[Rhodes][18] = "RATIO4";
 801cf76:	f8c3 66ec 	str.w	r6, [r3, #1772]	; 0x6ec
	knobParamNames[Rhodes][19] = "RATIO5";
 801cf7a:	f8c3 56f0 	str.w	r5, [r3, #1776]	; 0x6f0
	knobParamNames[Rhodes][20] = "RATIO6";
 801cf7e:	f8c3 46f4 	str.w	r4, [r3, #1780]	; 0x6f4
	knobParamNames[Rhodes][22] = "TUNE SNAP";
 801cf82:	f8c3 06fc 	str.w	r0, [r3, #1788]	; 0x6fc
	knobParamNames[Rhodes][23] = "RAND DECAY";
 801cf86:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
	knobParamNames[Rhodes][24] = "RAND SUST";
 801cf8a:	f8c3 b704 	str.w	fp, [r3, #1796]	; 0x704
}
 801cf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf92:	bf00      	nop
 801cf94:	0802c7a8 	.word	0x0802c7a8
 801cf98:	0802c7b0 	.word	0x0802c7b0
 801cf9c:	0802c6b0 	.word	0x0802c6b0
 801cfa0:	0802c734 	.word	0x0802c734
 801cfa4:	0802c778 	.word	0x0802c778
 801cfa8:	0802c740 	.word	0x0802c740
 801cfac:	0802c7c0 	.word	0x0802c7c0
 801cfb0:	0802c770 	.word	0x0802c770
 801cfb4:	0802c7e8 	.word	0x0802c7e8
 801cfb8:	0802c748 	.word	0x0802c748
 801cfbc:	0802c7d0 	.word	0x0802c7d0
 801cfc0:	0802c74c 	.word	0x0802c74c
 801cfc4:	0802c8d0 	.word	0x0802c8d0
 801cfc8:	20018828 	.word	0x20018828
 801cfcc:	0802c784 	.word	0x0802c784
 801cfd0:	0802c790 	.word	0x0802c790
 801cfd4:	0802c79c 	.word	0x0802c79c
 801cfd8:	0802c768 	.word	0x0802c768
 801cfdc:	0802c760 	.word	0x0802c760
 801cfe0:	0802c3e0 	.word	0x0802c3e0
 801cfe4:	0802c80c 	.word	0x0802c80c
 801cfe8:	0802c87c 	.word	0x0802c87c
 801cfec:	0802c888 	.word	0x0802c888
 801cff0:	0802c894 	.word	0x0802c894
 801cff4:	0802c89c 	.word	0x0802c89c
 801cff8:	0802c8a8 	.word	0x0802c8a8
 801cffc:	0802c838 	.word	0x0802c838
 801d000:	0802c820 	.word	0x0802c820
 801d004:	0802c8c0 	.word	0x0802c8c0
 801d008:	0802c818 	.word	0x0802c818
 801d00c:	0802c850 	.word	0x0802c850
 801d010:	0802c858 	.word	0x0802c858
 801d014:	0802c860 	.word	0x0802c860
 801d018:	0802c8c8 	.word	0x0802c8c8
 801d01c:	0802c82c 	.word	0x0802c82c
 801d020:	0802c8d4 	.word	0x0802c8d4
 801d024:	0802c8e0 	.word	0x0802c8e0
 801d028:	0802c8ec 	.word	0x0802c8ec
 801d02c:	0802c8f4 	.word	0x0802c8f4
 801d030:	0802c6b8 	.word	0x0802c6b8
 801d034:	0802c900 	.word	0x0802c900
 801d038:	0802c938 	.word	0x0802c938
 801d03c:	0802c940 	.word	0x0802c940
 801d040:	0802c948 	.word	0x0802c948
 801d044:	0802c950 	.word	0x0802c950
 801d048:	0802c958 	.word	0x0802c958
 801d04c:	0802c964 	.word	0x0802c964
 801d050:	0802c908 	.word	0x0802c908
 801d054:	0802c728 	.word	0x0802c728
 801d058:	0802c758 	.word	0x0802c758
 801d05c:	0802c7b8 	.word	0x0802c7b8
 801d060:	0802c7c8 	.word	0x0802c7c8
 801d064:	0802c7d8 	.word	0x0802c7d8
 801d068:	0802c7f4 	.word	0x0802c7f4
 801d06c:	01020302 	.word	0x01020302
 801d070:	02020101 	.word	0x02020101
 801d074:	02030101 	.word	0x02030101
 801d078:	0802c800 	.word	0x0802c800
 801d07c:	0802c844 	.word	0x0802c844
 801d080:	0802c868 	.word	0x0802c868
 801d084:	0802c874 	.word	0x0802c874
 801d088:	0802c830 	.word	0x0802c830
 801d08c:	0802c8b4 	.word	0x0802c8b4
 801d090:	0802c8bc 	.word	0x0802c8bc
 801d094:	0802c910 	.word	0x0802c910
 801d098:	0802c918 	.word	0x0802c918
 801d09c:	0802c920 	.word	0x0802c920
 801d0a0:	0802c928 	.word	0x0802c928
 801d0a4:	0802c930 	.word	0x0802c930
 801d0a8:	0802c970 	.word	0x0802c970

0801d0ac <buttonCheck>:

void buttonCheck(void)
{
	if (codecReady)
 801d0ac:	4ba0      	ldr	r3, [pc, #640]	; (801d330 <buttonCheck+0x284>)
 801d0ae:	781b      	ldrb	r3, [r3, #0]
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	f000 80e7 	beq.w	801d284 <buttonCheck+0x1d8>
		buttonValues[8] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_11); // D
		buttonValues[9] = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10); // E
		 */

		//A little more efficient since it avoids a function call
		buttonValues[0] =!(GPIOB->IDR & GPIO_PIN_13);
 801d0b6:	499f      	ldr	r1, [pc, #636]	; (801d334 <buttonCheck+0x288>)
		buttonValues[6] =!(GPIOD->IDR & GPIO_PIN_7);
		buttonValues[7] =!(GPIOB->IDR & GPIO_PIN_11);
		buttonValues[8] =!(GPIOG->IDR & GPIO_PIN_11);
		buttonValues[9] =!(GPIOB->IDR & GPIO_PIN_10);

		for (int i = 0; i < NUM_BUTTONS; i++)
 801d0b8:	2300      	movs	r3, #0
		buttonValues[0] =!(GPIOB->IDR & GPIO_PIN_13);
 801d0ba:	4a9f      	ldr	r2, [pc, #636]	; (801d338 <buttonCheck+0x28c>)
{
 801d0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buttonValues[0] =!(GPIOB->IDR & GPIO_PIN_13);
 801d0c0:	6908      	ldr	r0, [r1, #16]
{
 801d0c2:	b087      	sub	sp, #28
				buttonActionsSFX[i][ActionHoldContinuous] = TRUE;
				buttonActionsUI[i][ActionHoldContinuous] = TRUE;
				writeButtonFlag = i;
				writeActionFlag = ActionHoldContinuous;
			}
			if (buttonHysteresis[i] < buttonHysteresisThreshold)
 801d0c4:	4f9d      	ldr	r7, [pc, #628]	; (801d33c <buttonCheck+0x290>)
 801d0c6:	4694      	mov	ip, r2
		buttonValues[0] =!(GPIOB->IDR & GPIO_PIN_13);
 801d0c8:	f480 5000 	eor.w	r0, r0, #8192	; 0x2000
			{
				if (buttonCounters[i] < buttonHoldMax) buttonCounters[i]++;
 801d0cc:	4d9c      	ldr	r5, [pc, #624]	; (801d340 <buttonCheck+0x294>)
			if (buttonHysteresis[i] < buttonHysteresisThreshold)
 801d0ce:	f8d7 a000 	ldr.w	sl, [r7]
		buttonValues[0] =!(GPIOB->IDR & GPIO_PIN_13);
 801d0d2:	f3c0 3040 	ubfx	r0, r0, #13, #1
 801d0d6:	4f9b      	ldr	r7, [pc, #620]	; (801d344 <buttonCheck+0x298>)
				if ((buttonCounters[i] >= buttonHoldThreshold) && (cleanButtonValues[i] == 1))
 801d0d8:	4c9b      	ldr	r4, [pc, #620]	; (801d348 <buttonCheck+0x29c>)
		buttonValues[0] =!(GPIOB->IDR & GPIO_PIN_13);
 801d0da:	7010      	strb	r0, [r2, #0]
		buttonValues[1] =!(GPIOB->IDR & GPIO_PIN_12);
 801d0dc:	6908      	ldr	r0, [r1, #16]
 801d0de:	f997 7000 	ldrsb.w	r7, [r7]
 801d0e2:	f480 5080 	eor.w	r0, r0, #4096	; 0x1000
		buttonValues[3] =!(GPIOD->IDR & GPIO_PIN_11);
 801d0e6:	4e99      	ldr	r6, [pc, #612]	; (801d34c <buttonCheck+0x2a0>)
 801d0e8:	9701      	str	r7, [sp, #4]
		buttonValues[1] =!(GPIOB->IDR & GPIO_PIN_12);
 801d0ea:	f3c0 3000 	ubfx	r0, r0, #12, #1
				if (buttonCounters[i] < buttonHoldMax) buttonCounters[i]++;
 801d0ee:	682d      	ldr	r5, [r5, #0]
				if ((buttonCounters[i] >= buttonHoldThreshold) && (cleanButtonValues[i] == 1))
 801d0f0:	6824      	ldr	r4, [r4, #0]
		buttonValues[1] =!(GPIOB->IDR & GPIO_PIN_12);
 801d0f2:	7050      	strb	r0, [r2, #1]
		buttonValues[2] =!(GPIOB->IDR & GPIO_PIN_14);
 801d0f4:	6908      	ldr	r0, [r1, #16]
				if ((buttonCounters[i] >= buttonHoldThreshold) && (cleanButtonValues[i] == 1))
 801d0f6:	9405      	str	r4, [sp, #20]
		buttonValues[2] =!(GPIOB->IDR & GPIO_PIN_14);
 801d0f8:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
				if (buttonCounters[i] < buttonHoldMax) buttonCounters[i]++;
 801d0fc:	9504      	str	r5, [sp, #16]
 801d0fe:	4f94      	ldr	r7, [pc, #592]	; (801d350 <buttonCheck+0x2a4>)
		buttonValues[2] =!(GPIOB->IDR & GPIO_PIN_14);
 801d100:	f3c0 3080 	ubfx	r0, r0, #14, #1
 801d104:	4c93      	ldr	r4, [pc, #588]	; (801d354 <buttonCheck+0x2a8>)
 801d106:	f997 b000 	ldrsb.w	fp, [r7]
 801d10a:	7090      	strb	r0, [r2, #2]
		buttonValues[3] =!(GPIOD->IDR & GPIO_PIN_11);
 801d10c:	6930      	ldr	r0, [r6, #16]
 801d10e:	4f92      	ldr	r7, [pc, #584]	; (801d358 <buttonCheck+0x2ac>)
 801d110:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
 801d114:	f8df e268 	ldr.w	lr, [pc, #616]	; 801d380 <buttonCheck+0x2d4>
 801d118:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 801d11c:	70d0      	strb	r0, [r2, #3]
		buttonValues[4] =!(GPIOB->IDR & GPIO_PIN_15);
 801d11e:	690d      	ldr	r5, [r1, #16]
		buttonValues[5] =!(GPIOB->IDR & GPIO_PIN_1);
 801d120:	6908      	ldr	r0, [r1, #16]
		buttonValues[4] =!(GPIOB->IDR & GPIO_PIN_15);
 801d122:	f485 4900 	eor.w	r9, r5, #32768	; 0x8000
		buttonValues[6] =!(GPIOD->IDR & GPIO_PIN_7);
 801d126:	6936      	ldr	r6, [r6, #16]
		buttonValues[5] =!(GPIOB->IDR & GPIO_PIN_1);
 801d128:	f080 0802 	eor.w	r8, r0, #2
		buttonValues[8] =!(GPIOG->IDR & GPIO_PIN_11);
 801d12c:	488b      	ldr	r0, [pc, #556]	; (801d35c <buttonCheck+0x2b0>)
		buttonValues[7] =!(GPIOB->IDR & GPIO_PIN_11);
 801d12e:	690d      	ldr	r5, [r1, #16]
		buttonValues[6] =!(GPIOD->IDR & GPIO_PIN_7);
 801d130:	f086 0680 	eor.w	r6, r6, #128	; 0x80
		buttonValues[8] =!(GPIOG->IDR & GPIO_PIN_11);
 801d134:	6900      	ldr	r0, [r0, #16]
		buttonValues[4] =!(GPIOB->IDR & GPIO_PIN_15);
 801d136:	f3c9 39c0 	ubfx	r9, r9, #15, #1
		buttonValues[9] =!(GPIOB->IDR & GPIO_PIN_10);
 801d13a:	6909      	ldr	r1, [r1, #16]
		buttonValues[7] =!(GPIOB->IDR & GPIO_PIN_11);
 801d13c:	f485 6500 	eor.w	r5, r5, #2048	; 0x800
		buttonValues[8] =!(GPIOG->IDR & GPIO_PIN_11);
 801d140:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
		buttonValues[5] =!(GPIOB->IDR & GPIO_PIN_1);
 801d144:	f3c8 0840 	ubfx	r8, r8, #1, #1
		buttonValues[9] =!(GPIOB->IDR & GPIO_PIN_10);
 801d148:	f481 6180 	eor.w	r1, r1, #1024	; 0x400
		buttonValues[6] =!(GPIOD->IDR & GPIO_PIN_7);
 801d14c:	f3c6 16c0 	ubfx	r6, r6, #7, #1
		buttonValues[7] =!(GPIOB->IDR & GPIO_PIN_11);
 801d150:	f3c5 25c0 	ubfx	r5, r5, #11, #1
		buttonValues[8] =!(GPIOG->IDR & GPIO_PIN_11);
 801d154:	f3c0 20c0 	ubfx	r0, r0, #11, #1
		buttonValues[9] =!(GPIOB->IDR & GPIO_PIN_10);
 801d158:	f3c1 2180 	ubfx	r1, r1, #10, #1
		buttonValues[4] =!(GPIOB->IDR & GPIO_PIN_15);
 801d15c:	f882 9004 	strb.w	r9, [r2, #4]
		buttonValues[5] =!(GPIOB->IDR & GPIO_PIN_1);
 801d160:	f882 8005 	strb.w	r8, [r2, #5]
		buttonValues[6] =!(GPIOD->IDR & GPIO_PIN_7);
 801d164:	7196      	strb	r6, [r2, #6]
		buttonValues[7] =!(GPIOB->IDR & GPIO_PIN_11);
 801d166:	71d5      	strb	r5, [r2, #7]
		buttonValues[8] =!(GPIOG->IDR & GPIO_PIN_11);
 801d168:	7210      	strb	r0, [r2, #8]
 801d16a:	f8df 8218 	ldr.w	r8, [pc, #536]	; 801d384 <buttonCheck+0x2d8>
		buttonValues[9] =!(GPIOB->IDR & GPIO_PIN_10);
 801d16e:	7251      	strb	r1, [r2, #9]
				buttonActionsSFX[i][ActionHoldContinuous] = TRUE;
 801d170:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 801d36c <buttonCheck+0x2c0>
 801d174:	e00f      	b.n	801d196 <buttonCheck+0xea>
				if (buttonCounters[i] < buttonHoldMax) buttonCounters[i]++;
 801d176:	f858 1002 	ldr.w	r1, [r8, r2]
 801d17a:	9804      	ldr	r0, [sp, #16]
 801d17c:	4281      	cmp	r1, r0
 801d17e:	d202      	bcs.n	801d186 <buttonCheck+0xda>
 801d180:	3101      	adds	r1, #1
 801d182:	f848 1002 	str.w	r1, [r8, r2]
				if ((buttonCounters[i] >= buttonHoldThreshold) && (cleanButtonValues[i] == 1))
 801d186:	9805      	ldr	r0, [sp, #20]
 801d188:	4288      	cmp	r0, r1
 801d18a:	d801      	bhi.n	801d190 <buttonCheck+0xe4>
 801d18c:	2d01      	cmp	r5, #1
 801d18e:	d07a      	beq.n	801d286 <buttonCheck+0x1da>
		for (int i = 0; i < NUM_BUTTONS; i++)
 801d190:	3301      	adds	r3, #1
 801d192:	2b0a      	cmp	r3, #10
 801d194:	d037      	beq.n	801d206 <buttonCheck+0x15a>
			if (buttonValues[i] != buttonValuesPrev[i])
 801d196:	f81c 1b01 	ldrb.w	r1, [ip], #1
 801d19a:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 801d19e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801d1a2:	428a      	cmp	r2, r1
 801d1a4:	d001      	beq.n	801d1aa <buttonCheck+0xfe>
				buttonHysteresis[i]++;
 801d1a6:	3001      	adds	r0, #1
 801d1a8:	6020      	str	r0, [r4, #0]
			if (cleanButtonValues[i] == 1)
 801d1aa:	f81e 5003 	ldrb.w	r5, [lr, r3]
 801d1ae:	009a      	lsls	r2, r3, #2
 801d1b0:	2d01      	cmp	r5, #1
 801d1b2:	d10d      	bne.n	801d1d0 <buttonCheck+0x124>
				writeButtonFlag = i;
 801d1b4:	b25e      	sxtb	r6, r3
				writeActionFlag = ActionHoldContinuous;
 801d1b6:	f04f 0b03 	mov.w	fp, #3
				writeButtonFlag = i;
 801d1ba:	9601      	str	r6, [sp, #4]
				buttonActionsSFX[i][ActionHoldContinuous] = TRUE;
 801d1bc:	eb09 0602 	add.w	r6, r9, r2
 801d1c0:	9602      	str	r6, [sp, #8]
				buttonActionsUI[i][ActionHoldContinuous] = TRUE;
 801d1c2:	4e67      	ldr	r6, [pc, #412]	; (801d360 <buttonCheck+0x2b4>)
 801d1c4:	4416      	add	r6, r2
 801d1c6:	9603      	str	r6, [sp, #12]
				buttonActionsSFX[i][ActionHoldContinuous] = TRUE;
 801d1c8:	9e02      	ldr	r6, [sp, #8]
 801d1ca:	70f5      	strb	r5, [r6, #3]
				buttonActionsUI[i][ActionHoldContinuous] = TRUE;
 801d1cc:	9e03      	ldr	r6, [sp, #12]
 801d1ce:	70f5      	strb	r5, [r6, #3]
			if (buttonHysteresis[i] < buttonHysteresisThreshold)
 801d1d0:	4582      	cmp	sl, r0
 801d1d2:	d8d0      	bhi.n	801d176 <buttonCheck+0xca>
				}
			}
			else
			{
				cleanButtonValues[i] = buttonValues[i];
				buttonHysteresis[i] = 0;
 801d1d4:	2000      	movs	r0, #0
				buttonCounters[i] = 0;

				if (cleanButtonValues[i] == 1)
 801d1d6:	2901      	cmp	r1, #1
				cleanButtonValues[i] = buttonValues[i];
 801d1d8:	f80e 1003 	strb.w	r1, [lr, r3]
				buttonHysteresis[i] = 0;
 801d1dc:	6020      	str	r0, [r4, #0]
				buttonCounters[i] = 0;
 801d1de:	f848 0002 	str.w	r0, [r8, r2]
				if (cleanButtonValues[i] == 1)
 801d1e2:	d045      	beq.n	801d270 <buttonCheck+0x1c4>
					buttonActionsSFX[i][ActionPress] = TRUE;
					buttonActionsUI[i][ActionPress] = TRUE;
					writeButtonFlag = i;
					writeActionFlag = ActionPress;
				}
				else if (cleanButtonValues[i] == 0)
 801d1e4:	b959      	cbnz	r1, 801d1fe <buttonCheck+0x152>
				{
					buttonActionsSFX[i][ActionRelease] = TRUE;
					buttonActionsUI[i][ActionRelease] = TRUE;
 801d1e6:	4d5e      	ldr	r5, [pc, #376]	; (801d360 <buttonCheck+0x2b4>)
					buttonActionsSFX[i][ActionRelease] = TRUE;
 801d1e8:	eb09 0002 	add.w	r0, r9, r2
					writeButtonFlag = i;
					writeActionFlag = ActionRelease;
 801d1ec:	f04f 0b01 	mov.w	fp, #1
					buttonActionsUI[i][ActionRelease] = TRUE;
 801d1f0:	442a      	add	r2, r5
					writeButtonFlag = i;
 801d1f2:	b25d      	sxtb	r5, r3
 801d1f4:	9501      	str	r5, [sp, #4]
					buttonActionsSFX[i][ActionRelease] = TRUE;
 801d1f6:	f04f 0501 	mov.w	r5, #1
 801d1fa:	7045      	strb	r5, [r0, #1]
					buttonActionsUI[i][ActionRelease] = TRUE;
 801d1fc:	7055      	strb	r5, [r2, #1]
				}
				buttonValuesPrev[i] = buttonValues[i];
 801d1fe:	7039      	strb	r1, [r7, #0]
		for (int i = 0; i < NUM_BUTTONS; i++)
 801d200:	3301      	adds	r3, #1
 801d202:	2b0a      	cmp	r3, #10
 801d204:	d1c7      	bne.n	801d196 <buttonCheck+0xea>

		// make some if statements if you want to find the "attack" of the buttons (getting the "press" action)

		/// DEFINE GLOBAL BUTTON BEHAVIOR HERE

		if (buttonActionsUI[ButtonLeft][ActionPress] == 1)
 801d206:	4b56      	ldr	r3, [pc, #344]	; (801d360 <buttonCheck+0x2b4>)
 801d208:	4a4e      	ldr	r2, [pc, #312]	; (801d344 <buttonCheck+0x298>)
 801d20a:	791b      	ldrb	r3, [r3, #4]
 801d20c:	9901      	ldr	r1, [sp, #4]
 801d20e:	2b01      	cmp	r3, #1
 801d210:	7011      	strb	r1, [r2, #0]
 801d212:	4a4f      	ldr	r2, [pc, #316]	; (801d350 <buttonCheck+0x2a4>)
 801d214:	f882 b000 	strb.w	fp, [r2]
 801d218:	f000 815c 	beq.w	801d4d4 <buttonCheck+0x428>
			loadingPreset = 1;
			OLED_writePreset();
			writeCurrentPresetToFlash();
			clearButtonActions();
		}
		if (buttonActionsUI[ButtonRight][ActionPress] == 1)
 801d21c:	4b50      	ldr	r3, [pc, #320]	; (801d360 <buttonCheck+0x2b4>)
 801d21e:	7a1b      	ldrb	r3, [r3, #8]
 801d220:	2b01      	cmp	r3, #1
 801d222:	f000 8191 	beq.w	801d548 <buttonCheck+0x49c>
			loadingPreset = 1;
			OLED_writePreset();
			writeCurrentPresetToFlash();
			clearButtonActions();
		}
		if (buttonActionsUI[ButtonD][ActionPress] == 1)
 801d226:	4b4e      	ldr	r3, [pc, #312]	; (801d360 <buttonCheck+0x2b4>)
 801d228:	f893 3020 	ldrb.w	r3, [r3, #32]
 801d22c:	2b01      	cmp	r3, #1
 801d22e:	f000 81c6 	beq.w	801d5be <buttonCheck+0x512>
			}
			changeTuning();
			OLED_writeTuning();
			buttonActionsUI[ButtonD][ActionPress] = 0;
		}
		if (buttonActionsUI[ButtonE][ActionPress] == 1)
 801d232:	4b4b      	ldr	r3, [pc, #300]	; (801d360 <buttonCheck+0x2b4>)
 801d234:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801d238:	2b01      	cmp	r3, #1
 801d23a:	f000 81fd 	beq.w	801d638 <buttonCheck+0x58c>
			changeTuning();
			OLED_writeTuning();
			buttonActionsUI[ButtonE][ActionPress] = 0;
		}

		if (buttonActionsUI[ButtonEdit][ActionPress])
 801d23e:	4b48      	ldr	r3, [pc, #288]	; (801d360 <buttonCheck+0x2b4>)
 801d240:	781b      	ldrb	r3, [r3, #0]
 801d242:	2b00      	cmp	r3, #0
 801d244:	f040 81e9 	bne.w	801d61a <buttonCheck+0x56e>
		{
			OLED_writeEditScreen();
			setLED_Edit(1);
			buttonActionsUI[ButtonEdit][ActionPress] = 0;
		}
		if (buttonActionsUI[ButtonEdit][ActionHoldContinuous] == 1)
 801d248:	4b45      	ldr	r3, [pc, #276]	; (801d360 <buttonCheck+0x2b4>)
 801d24a:	78db      	ldrb	r3, [r3, #3]
 801d24c:	2b01      	cmp	r3, #1
		{
			if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801d24e:	4b44      	ldr	r3, [pc, #272]	; (801d360 <buttonCheck+0x2b4>)
		if (buttonActionsUI[ButtonEdit][ActionHoldContinuous] == 1)
 801d250:	d026      	beq.n	801d2a0 <buttonCheck+0x1f4>
				buttonActionsUI[ButtonEdit][ActionHoldContinuous] = 0;
			}

//			OLEDdrawFloatArray(audioDisplayBuffer, -1.0f, 1.0f, 128, displayBufferIndex, 0, BothLines);
		}
		if (buttonActionsUI[ButtonEdit][ActionRelease] == 1)
 801d252:	785b      	ldrb	r3, [r3, #1]
 801d254:	2b01      	cmp	r3, #1
 801d256:	d038      	beq.n	801d2ca <buttonCheck+0x21e>
			buttonActionsUI[ButtonEdit][ActionRelease] = 0;
			buttonActionsUI[ButtonEdit][ActionHoldContinuous] = 0;
			buttonActionsSFX[ButtonEdit][ActionHoldContinuous] = 0;

		}
		if (buttonActionsUI[ButtonDown][ActionPress] == 1)
 801d258:	4b41      	ldr	r3, [pc, #260]	; (801d360 <buttonCheck+0x2b4>)
 801d25a:	7b1b      	ldrb	r3, [r3, #12]
 801d25c:	2b01      	cmp	r3, #1
 801d25e:	d044      	beq.n	801d2ea <buttonCheck+0x23e>
			decrementPage();
			OLEDwriteString("P", 1, 110, FirstLine);
			OLEDwriteInt(knobPage, 1, 120, FirstLine);
			buttonActionsUI[ButtonDown][ActionPress] = 0;
		}
		if (buttonActionsUI[ButtonUp][ActionPress] == 1)
 801d260:	4b3f      	ldr	r3, [pc, #252]	; (801d360 <buttonCheck+0x2b4>)
 801d262:	7c1b      	ldrb	r3, [r3, #16]
 801d264:	2b01      	cmp	r3, #1
 801d266:	f000 80e3 	beq.w	801d430 <buttonCheck+0x384>
//			OLEDwriteString(" ", 1, getCursorX(), SecondLine);
//			OLEDwriteString(paramNames[orderedParams[currentParamIndex]], getCursorX(), SecondLine);
//			buttonActionsUI[ButtonEdit][ActionPress] = 0;
//		}
	}
}
 801d26a:	b007      	add	sp, #28
 801d26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					writeButtonFlag = i;
 801d270:	b258      	sxtb	r0, r3
					buttonActionsSFX[i][ActionPress] = TRUE;
 801d272:	f809 1002 	strb.w	r1, [r9, r2]
					writeActionFlag = ActionPress;
 801d276:	f04f 0b00 	mov.w	fp, #0
				buttonValuesPrev[i] = buttonValues[i];
 801d27a:	7039      	strb	r1, [r7, #0]
					writeButtonFlag = i;
 801d27c:	9001      	str	r0, [sp, #4]
					buttonActionsUI[i][ActionPress] = TRUE;
 801d27e:	4838      	ldr	r0, [pc, #224]	; (801d360 <buttonCheck+0x2b4>)
 801d280:	5481      	strb	r1, [r0, r2]
 801d282:	e7bd      	b.n	801d200 <buttonCheck+0x154>
 801d284:	4770      	bx	lr
					buttonActionsUI[i][ActionHoldInstant] = TRUE;
 801d286:	4836      	ldr	r0, [pc, #216]	; (801d360 <buttonCheck+0x2b4>)
					buttonActionsSFX[i][ActionHoldInstant] = TRUE;
 801d288:	eb09 0102 	add.w	r1, r9, r2
					writeActionFlag = ActionHoldInstant;
 801d28c:	f04f 0b02 	mov.w	fp, #2
					buttonActionsUI[i][ActionHoldInstant] = TRUE;
 801d290:	4402      	add	r2, r0
					writeButtonFlag = i;
 801d292:	b258      	sxtb	r0, r3
 801d294:	9001      	str	r0, [sp, #4]
					buttonActionsSFX[i][ActionHoldInstant] = TRUE;
 801d296:	f04f 0001 	mov.w	r0, #1
 801d29a:	7088      	strb	r0, [r1, #2]
					buttonActionsUI[i][ActionHoldInstant] = TRUE;
 801d29c:	7090      	strb	r0, [r2, #2]
 801d29e:	e777      	b.n	801d190 <buttonCheck+0xe4>
			if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801d2a0:	7f1c      	ldrb	r4, [r3, #28]
 801d2a2:	2c01      	cmp	r4, #1
 801d2a4:	f000 8261 	beq.w	801d76a <buttonCheck+0x6be>
			if (buttonActionsUI[ButtonDown][ActionPress])
 801d2a8:	4d2d      	ldr	r5, [pc, #180]	; (801d360 <buttonCheck+0x2b4>)
 801d2aa:	7b2b      	ldrb	r3, [r5, #12]
 801d2ac:	b14b      	cbz	r3, 801d2c2 <buttonCheck+0x216>
				cvAddParam[currentPreset] = -1;
 801d2ae:	4a2d      	ldr	r2, [pc, #180]	; (801d364 <buttonCheck+0x2b8>)
				buttonActionsUI[ButtonDown][ActionPress] = 0;
 801d2b0:	2300      	movs	r3, #0
				cvAddParam[currentPreset] = -1;
 801d2b2:	20ff      	movs	r0, #255	; 0xff
 801d2b4:	4c2c      	ldr	r4, [pc, #176]	; (801d368 <buttonCheck+0x2bc>)
 801d2b6:	7811      	ldrb	r1, [r2, #0]
				buttonActionsSFX[ButtonDown][ActionPress] = 0;
 801d2b8:	4a2c      	ldr	r2, [pc, #176]	; (801d36c <buttonCheck+0x2c0>)
				cvAddParam[currentPreset] = -1;
 801d2ba:	5460      	strb	r0, [r4, r1]
				buttonActionsUI[ButtonDown][ActionPress] = 0;
 801d2bc:	732b      	strb	r3, [r5, #12]
				buttonActionsUI[ButtonEdit][ActionHoldContinuous] = 0;
 801d2be:	70eb      	strb	r3, [r5, #3]
				buttonActionsSFX[ButtonDown][ActionPress] = 0;
 801d2c0:	7313      	strb	r3, [r2, #12]
		if (buttonActionsUI[ButtonEdit][ActionRelease] == 1)
 801d2c2:	4b27      	ldr	r3, [pc, #156]	; (801d360 <buttonCheck+0x2b4>)
 801d2c4:	785b      	ldrb	r3, [r3, #1]
 801d2c6:	2b01      	cmp	r3, #1
 801d2c8:	d1ca      	bne.n	801d260 <buttonCheck+0x1b4>
			OLED_writePreset();
 801d2ca:	f7f6 fd59 	bl	8013d80 <OLED_writePreset>
			setLED_Edit(0);
 801d2ce:	2000      	movs	r0, #0
 801d2d0:	f7f6 fcb6 	bl	8013c40 <setLED_Edit>
			buttonActionsSFX[ButtonEdit][ActionRelease] = 0;
 801d2d4:	2300      	movs	r3, #0
 801d2d6:	4a25      	ldr	r2, [pc, #148]	; (801d36c <buttonCheck+0x2c0>)
			buttonActionsUI[ButtonEdit][ActionRelease] = 0;
 801d2d8:	4921      	ldr	r1, [pc, #132]	; (801d360 <buttonCheck+0x2b4>)
			buttonActionsSFX[ButtonEdit][ActionRelease] = 0;
 801d2da:	7053      	strb	r3, [r2, #1]
			buttonActionsUI[ButtonEdit][ActionRelease] = 0;
 801d2dc:	704b      	strb	r3, [r1, #1]
			buttonActionsUI[ButtonEdit][ActionHoldContinuous] = 0;
 801d2de:	70cb      	strb	r3, [r1, #3]
			buttonActionsSFX[ButtonEdit][ActionHoldContinuous] = 0;
 801d2e0:	70d3      	strb	r3, [r2, #3]
		if (buttonActionsUI[ButtonDown][ActionPress] == 1)
 801d2e2:	4b1f      	ldr	r3, [pc, #124]	; (801d360 <buttonCheck+0x2b4>)
 801d2e4:	7b1b      	ldrb	r3, [r3, #12]
 801d2e6:	2b01      	cmp	r3, #1
 801d2e8:	d1ba      	bne.n	801d260 <buttonCheck+0x1b4>

}

void decrementPage(void)
{
	if (knobPage == 0) knobPage = numPages[currentPreset] - 1;
 801d2ea:	4f21      	ldr	r7, [pc, #132]	; (801d370 <buttonCheck+0x2c4>)
 801d2ec:	4d1d      	ldr	r5, [pc, #116]	; (801d364 <buttonCheck+0x2b8>)
 801d2ee:	783b      	ldrb	r3, [r7, #0]
 801d2f0:	7829      	ldrb	r1, [r5, #0]
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	f000 8231 	beq.w	801d75a <buttonCheck+0x6ae>
	else knobPage--;
 801d2f8:	3b01      	subs	r3, #1
 801d2fa:	b2db      	uxtb	r3, r3
	setKnobValues(presetKnobValues[currentPreset] + (knobPage * KNOB_PAGE_SIZE));
 801d2fc:	4a1d      	ldr	r2, [pc, #116]	; (801d374 <buttonCheck+0x2c8>)
 801d2fe:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 801d302:	2064      	movs	r0, #100	; 0x64
 801d304:	4c18      	ldr	r4, [pc, #96]	; (801d368 <buttonCheck+0x2bc>)
 801d306:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
	}
}

void setKnobValues(float* values)
{
	for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d30a:	f04f 0900 	mov.w	r9, #0
	setKnobValues(presetKnobValues[currentPreset] + (knobPage * KNOB_PAGE_SIZE));
 801d30e:	fb00 2001 	mla	r0, r0, r1, r2
 801d312:	4a19      	ldr	r2, [pc, #100]	; (801d378 <buttonCheck+0x2cc>)
 801d314:	9401      	str	r4, [sp, #4]
 801d316:	9203      	str	r2, [sp, #12]
		{
			knob = 5;
		}
		knobActive[knob] = 0;
		floatADCUI[knob] = -1.0f;
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d318:	f10b 0214 	add.w	r2, fp, #20
 801d31c:	4c17      	ldr	r4, [pc, #92]	; (801d37c <buttonCheck+0x2d0>)
 801d31e:	4606      	mov	r6, r0
 801d320:	1882      	adds	r2, r0, r2
	setKnobValues(presetKnobValues[currentPreset] + (knobPage * KNOB_PAGE_SIZE));
 801d322:	9004      	str	r0, [sp, #16]
 801d324:	f8df 8060 	ldr.w	r8, [pc, #96]	; 801d388 <buttonCheck+0x2dc>
 801d328:	9402      	str	r4, [sp, #8]
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d32a:	9205      	str	r2, [sp, #20]
 801d32c:	703b      	strb	r3, [r7, #0]
 801d32e:	e043      	b.n	801d3b8 <buttonCheck+0x30c>
 801d330:	200004f8 	.word	0x200004f8
 801d334:	58020400 	.word	0x58020400
 801d338:	2001906c 	.word	0x2001906c
 801d33c:	200002c4 	.word	0x200002c4
 801d340:	200002bc 	.word	0x200002bc
 801d344:	200002ce 	.word	0x200002ce
 801d348:	200002c0 	.word	0x200002c0
 801d34c:	58020c00 	.word	0x58020c00
 801d350:	200002cd 	.word	0x200002cd
 801d354:	2001878c 	.word	0x2001878c
 801d358:	200186ef 	.word	0x200186ef
 801d35c:	58021800 	.word	0x58021800
 801d360:	20018854 	.word	0x20018854
 801d364:	20000655 	.word	0x20000655
 801d368:	20018938 	.word	0x20018938
 801d36c:	20018714 	.word	0x20018714
 801d370:	20000656 	.word	0x20000656
 801d374:	20016710 	.word	0x20016710
 801d378:	20017948 	.word	0x20017948
 801d37c:	20014304 	.word	0x20014304
 801d380:	200187b8 	.word	0x200187b8
 801d384:	200188c8 	.word	0x200188c8
 801d388:	2001883c 	.word	0x2001883c
		knobActive[knob] = 0;
 801d38c:	9b03      	ldr	r3, [sp, #12]
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d38e:	ed9a 0a00 	vldr	s0, [sl]
		knobActive[knob] = 0;
 801d392:	f803 e009 	strb.w	lr, [r3, r9]
	for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d396:	f109 0901 	add.w	r9, r9, #1
		floatADCUI[knob] = -1.0f;
 801d39a:	edcc 7a00 	vstr	s15, [ip]
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d39e:	f005 fb5f 	bl	8022a60 <tExpSmooth_setValAndDest>

		smoothedADC[knob] = values[knob];
 801d3a2:	9b02      	ldr	r3, [sp, #8]
	for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d3a4:	f1b9 0f05 	cmp.w	r9, #5
		smoothedADC[knob] = values[knob];
 801d3a8:	441c      	add	r4, r3
 801d3aa:	f8da 3000 	ldr.w	r3, [sl]
 801d3ae:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d3b0:	d02a      	beq.n	801d408 <buttonCheck+0x35c>
 801d3b2:	783b      	ldrb	r3, [r7, #0]
 801d3b4:	7829      	ldrb	r1, [r5, #0]
 801d3b6:	9e04      	ldr	r6, [sp, #16]
 801d3b8:	ea4f 0489 	mov.w	r4, r9, lsl #2
		if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801d3bc:	2205      	movs	r2, #5
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d3be:	48b9      	ldr	r0, [pc, #740]	; (801d6a4 <buttonCheck+0x5f8>)
		floatADCUI[knob] = -1.0f;
 801d3c0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d3c4:	eb0b 0a04 	add.w	sl, fp, r4
		knobActive[knob] = 0;
 801d3c8:	f04f 0e00 	mov.w	lr, #0
		if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801d3cc:	fb12 9203 	smlabb	r2, r2, r3, r9
		floatADCUI[knob] = -1.0f;
 801d3d0:	eb08 0c04 	add.w	ip, r8, r4
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d3d4:	44b2      	add	sl, r6
		if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801d3d6:	9e01      	ldr	r6, [sp, #4]
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d3d8:	4420      	add	r0, r4
		if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801d3da:	5671      	ldrsb	r1, [r6, r1]
 801d3dc:	428a      	cmp	r2, r1
 801d3de:	d1d5      	bne.n	801d38c <buttonCheck+0x2e0>
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d3e0:	9c05      	ldr	r4, [sp, #20]
		knobActive[knob] = 0;
 801d3e2:	2200      	movs	r2, #0
		floatADCUI[knob] = -1.0f;
 801d3e4:	4bb0      	ldr	r3, [pc, #704]	; (801d6a8 <buttonCheck+0x5fc>)
	for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d3e6:	f109 0901 	add.w	r9, r9, #1
		knobActive[knob] = 0;
 801d3ea:	9903      	ldr	r1, [sp, #12]
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d3ec:	ed94 0a00 	vldr	s0, [r4]
 801d3f0:	48ae      	ldr	r0, [pc, #696]	; (801d6ac <buttonCheck+0x600>)
		knobActive[knob] = 0;
 801d3f2:	714a      	strb	r2, [r1, #5]
		floatADCUI[knob] = -1.0f;
 801d3f4:	f8c8 3014 	str.w	r3, [r8, #20]
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d3f8:	f005 fb32 	bl	8022a60 <tExpSmooth_setValAndDest>
		smoothedADC[knob] = values[knob];
 801d3fc:	6823      	ldr	r3, [r4, #0]
	for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d3fe:	f1b9 0f05 	cmp.w	r9, #5
		smoothedADC[knob] = values[knob];
 801d402:	9a02      	ldr	r2, [sp, #8]
 801d404:	6153      	str	r3, [r2, #20]
	for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d406:	d1d4      	bne.n	801d3b2 <buttonCheck+0x306>
			OLEDwriteString("P", 1, 110, FirstLine);
 801d408:	2300      	movs	r3, #0
 801d40a:	226e      	movs	r2, #110	; 0x6e
 801d40c:	2101      	movs	r1, #1
 801d40e:	48a8      	ldr	r0, [pc, #672]	; (801d6b0 <buttonCheck+0x604>)
 801d410:	f7f6 fe8e 	bl	8014130 <OLEDwriteString>
			OLEDwriteInt(knobPage, 1, 120, FirstLine);
 801d414:	2300      	movs	r3, #0
 801d416:	2278      	movs	r2, #120	; 0x78
 801d418:	7838      	ldrb	r0, [r7, #0]
 801d41a:	2101      	movs	r1, #1
 801d41c:	f7f6 feb2 	bl	8014184 <OLEDwriteInt>
			buttonActionsUI[ButtonDown][ActionPress] = 0;
 801d420:	2300      	movs	r3, #0
 801d422:	4aa4      	ldr	r2, [pc, #656]	; (801d6b4 <buttonCheck+0x608>)
 801d424:	7313      	strb	r3, [r2, #12]
		if (buttonActionsUI[ButtonUp][ActionPress] == 1)
 801d426:	4ba3      	ldr	r3, [pc, #652]	; (801d6b4 <buttonCheck+0x608>)
 801d428:	7c1b      	ldrb	r3, [r3, #16]
 801d42a:	2b01      	cmp	r3, #1
 801d42c:	f47f af1d 	bne.w	801d26a <buttonCheck+0x1be>
	knobPage = (knobPage + 1) % numPages[currentPreset];
 801d430:	4fa1      	ldr	r7, [pc, #644]	; (801d6b8 <buttonCheck+0x60c>)
	setKnobValues(presetKnobValues[currentPreset] + (knobPage * KNOB_PAGE_SIZE));
 801d432:	2464      	movs	r4, #100	; 0x64
	knobPage = (knobPage + 1) % numPages[currentPreset];
 801d434:	4da1      	ldr	r5, [pc, #644]	; (801d6bc <buttonCheck+0x610>)
	for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d436:	f04f 0a00 	mov.w	sl, #0
	knobPage = (knobPage + 1) % numPages[currentPreset];
 801d43a:	783b      	ldrb	r3, [r7, #0]
 801d43c:	7829      	ldrb	r1, [r5, #0]
 801d43e:	4aa0      	ldr	r2, [pc, #640]	; (801d6c0 <buttonCheck+0x614>)
 801d440:	4ea0      	ldr	r6, [pc, #640]	; (801d6c4 <buttonCheck+0x618>)
 801d442:	5c50      	ldrb	r0, [r2, r1]
 801d444:	1c5a      	adds	r2, r3, #1
	setKnobValues(presetKnobValues[currentPreset] + (knobPage * KNOB_PAGE_SIZE));
 801d446:	4ba0      	ldr	r3, [pc, #640]	; (801d6c8 <buttonCheck+0x61c>)
 801d448:	9601      	str	r6, [sp, #4]
 801d44a:	fb04 3401 	mla	r4, r4, r1, r3
 801d44e:	4b9f      	ldr	r3, [pc, #636]	; (801d6cc <buttonCheck+0x620>)
 801d450:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 801d6fc <buttonCheck+0x650>
 801d454:	9303      	str	r3, [sp, #12]
 801d456:	4626      	mov	r6, r4
 801d458:	4b9d      	ldr	r3, [pc, #628]	; (801d6d0 <buttonCheck+0x624>)
 801d45a:	9404      	str	r4, [sp, #16]
 801d45c:	9302      	str	r3, [sp, #8]
	knobPage = (knobPage + 1) % numPages[currentPreset];
 801d45e:	fb92 f3f0 	sdiv	r3, r2, r0
 801d462:	fb00 2313 	mls	r3, r0, r3, r2
	setKnobValues(presetKnobValues[currentPreset] + (knobPage * KNOB_PAGE_SIZE));
 801d466:	eb03 0983 	add.w	r9, r3, r3, lsl #2
	knobPage = (knobPage + 1) % numPages[currentPreset];
 801d46a:	b2db      	uxtb	r3, r3
	setKnobValues(presetKnobValues[currentPreset] + (knobPage * KNOB_PAGE_SIZE));
 801d46c:	ea4f 0989 	mov.w	r9, r9, lsl #2
	knobPage = (knobPage + 1) % numPages[currentPreset];
 801d470:	703b      	strb	r3, [r7, #0]
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d472:	f109 0214 	add.w	r2, r9, #20
 801d476:	18a2      	adds	r2, r4, r2
 801d478:	9205      	str	r2, [sp, #20]
 801d47a:	ea4f 048a 	mov.w	r4, sl, lsl #2
		if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801d47e:	2205      	movs	r2, #5
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d480:	4888      	ldr	r0, [pc, #544]	; (801d6a4 <buttonCheck+0x5f8>)
		floatADCUI[knob] = -1.0f;
 801d482:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d486:	eb09 0b04 	add.w	fp, r9, r4
		knobActive[knob] = 0;
 801d48a:	f04f 0e00 	mov.w	lr, #0
		if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801d48e:	fb12 a203 	smlabb	r2, r2, r3, sl
		floatADCUI[knob] = -1.0f;
 801d492:	eb08 0c04 	add.w	ip, r8, r4
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d496:	44b3      	add	fp, r6
		if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801d498:	9e01      	ldr	r6, [sp, #4]
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d49a:	4420      	add	r0, r4
		if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801d49c:	5671      	ldrsb	r1, [r6, r1]
 801d49e:	428a      	cmp	r2, r1
 801d4a0:	f000 812e 	beq.w	801d700 <buttonCheck+0x654>
		knobActive[knob] = 0;
 801d4a4:	9b03      	ldr	r3, [sp, #12]
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d4a6:	ed9b 0a00 	vldr	s0, [fp]
		knobActive[knob] = 0;
 801d4aa:	f803 e00a 	strb.w	lr, [r3, sl]
	for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d4ae:	f10a 0a01 	add.w	sl, sl, #1
		floatADCUI[knob] = -1.0f;
 801d4b2:	edcc 7a00 	vstr	s15, [ip]
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d4b6:	f005 fad3 	bl	8022a60 <tExpSmooth_setValAndDest>
		smoothedADC[knob] = values[knob];
 801d4ba:	9b02      	ldr	r3, [sp, #8]
	for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d4bc:	f1ba 0f05 	cmp.w	sl, #5
		smoothedADC[knob] = values[knob];
 801d4c0:	441c      	add	r4, r3
 801d4c2:	f8db 3000 	ldr.w	r3, [fp]
 801d4c6:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d4c8:	f000 812f 	beq.w	801d72a <buttonCheck+0x67e>
 801d4cc:	783b      	ldrb	r3, [r7, #0]
 801d4ce:	7829      	ldrb	r1, [r5, #0]
 801d4d0:	9e04      	ldr	r6, [sp, #16]
 801d4d2:	e7d2      	b.n	801d47a <buttonCheck+0x3ce>
			previousPreset = currentPreset;
 801d4d4:	4d79      	ldr	r5, [pc, #484]	; (801d6bc <buttonCheck+0x610>)
 801d4d6:	4a7f      	ldr	r2, [pc, #508]	; (801d6d4 <buttonCheck+0x628>)
 801d4d8:	782b      	ldrb	r3, [r5, #0]
 801d4da:	7013      	strb	r3, [r2, #0]
			if (currentPreset <= 0) currentPreset = PresetNil - 1;
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	f000 813a 	beq.w	801d756 <buttonCheck+0x6aa>
			else currentPreset--;
 801d4e2:	3b01      	subs	r3, #1
 801d4e4:	b2db      	uxtb	r3, r3
			loadingPreset = 1;
 801d4e6:	2101      	movs	r1, #1
 801d4e8:	4a7b      	ldr	r2, [pc, #492]	; (801d6d8 <buttonCheck+0x62c>)
 801d4ea:	702b      	strb	r3, [r5, #0]
 801d4ec:	7011      	strb	r1, [r2, #0]
			OLED_writePreset();
 801d4ee:	f7f6 fc47 	bl	8013d80 <OLED_writePreset>
	if((EE_WriteVariable(VirtAddVarTab[0],  currentPreset)) != HAL_OK)
 801d4f2:	4b7a      	ldr	r3, [pc, #488]	; (801d6dc <buttonCheck+0x630>)
 801d4f4:	7829      	ldrb	r1, [r5, #0]
 801d4f6:	8818      	ldrh	r0, [r3, #0]
 801d4f8:	f7f4 fd4c 	bl	8011f94 <EE_WriteVariable>
 801d4fc:	b108      	cbz	r0, 801d502 <buttonCheck+0x456>
		Error_Handler();
 801d4fe:	f7f6 fb9b 	bl	8013c38 <Error_Handler>
			buttonActionsUI[b][a] = 0;
 801d502:	2300      	movs	r3, #0
			buttonActionsSFX[b][a] = 0;
 801d504:	4a76      	ldr	r2, [pc, #472]	; (801d6e0 <buttonCheck+0x634>)
			buttonActionsUI[b][a] = 0;
 801d506:	486b      	ldr	r0, [pc, #428]	; (801d6b4 <buttonCheck+0x608>)
 801d508:	21ff      	movs	r1, #255	; 0xff
			buttonActionsSFX[b][a] = 0;
 801d50a:	6013      	str	r3, [r2, #0]
			buttonActionsUI[b][a] = 0;
 801d50c:	6083      	str	r3, [r0, #8]
 801d50e:	60c3      	str	r3, [r0, #12]
 801d510:	6103      	str	r3, [r0, #16]
 801d512:	6143      	str	r3, [r0, #20]
 801d514:	6183      	str	r3, [r0, #24]
 801d516:	61c3      	str	r3, [r0, #28]
 801d518:	6203      	str	r3, [r0, #32]
 801d51a:	6243      	str	r3, [r0, #36]	; 0x24
 801d51c:	6283      	str	r3, [r0, #40]	; 0x28
 801d51e:	6003      	str	r3, [r0, #0]
 801d520:	6043      	str	r3, [r0, #4]
			buttonActionsSFX[b][a] = 0;
 801d522:	6053      	str	r3, [r2, #4]
 801d524:	6093      	str	r3, [r2, #8]
 801d526:	60d3      	str	r3, [r2, #12]
 801d528:	6113      	str	r3, [r2, #16]
 801d52a:	6153      	str	r3, [r2, #20]
 801d52c:	6193      	str	r3, [r2, #24]
 801d52e:	61d3      	str	r3, [r2, #28]
 801d530:	6213      	str	r3, [r2, #32]
 801d532:	6253      	str	r3, [r2, #36]	; 0x24
 801d534:	6293      	str	r3, [r2, #40]	; 0x28
 801d536:	4b6b      	ldr	r3, [pc, #428]	; (801d6e4 <buttonCheck+0x638>)
 801d538:	7019      	strb	r1, [r3, #0]
 801d53a:	4b6b      	ldr	r3, [pc, #428]	; (801d6e8 <buttonCheck+0x63c>)
 801d53c:	7019      	strb	r1, [r3, #0]
		if (buttonActionsUI[ButtonRight][ActionPress] == 1)
 801d53e:	4b5d      	ldr	r3, [pc, #372]	; (801d6b4 <buttonCheck+0x608>)
 801d540:	7a1b      	ldrb	r3, [r3, #8]
 801d542:	2b01      	cmp	r3, #1
 801d544:	f47f ae6f 	bne.w	801d226 <buttonCheck+0x17a>
			previousPreset = currentPreset;
 801d548:	4d5c      	ldr	r5, [pc, #368]	; (801d6bc <buttonCheck+0x610>)
 801d54a:	4a62      	ldr	r2, [pc, #392]	; (801d6d4 <buttonCheck+0x628>)
 801d54c:	782b      	ldrb	r3, [r5, #0]
			if (currentPreset >= PresetNil - 1) currentPreset = 0;
 801d54e:	2b10      	cmp	r3, #16
			previousPreset = currentPreset;
 801d550:	7013      	strb	r3, [r2, #0]
			if (currentPreset >= PresetNil - 1) currentPreset = 0;
 801d552:	f200 80fe 	bhi.w	801d752 <buttonCheck+0x6a6>
			else currentPreset++;
 801d556:	3301      	adds	r3, #1
 801d558:	b2db      	uxtb	r3, r3
			loadingPreset = 1;
 801d55a:	2101      	movs	r1, #1
 801d55c:	4a5e      	ldr	r2, [pc, #376]	; (801d6d8 <buttonCheck+0x62c>)
 801d55e:	702b      	strb	r3, [r5, #0]
 801d560:	7011      	strb	r1, [r2, #0]
			OLED_writePreset();
 801d562:	f7f6 fc0d 	bl	8013d80 <OLED_writePreset>
	if((EE_WriteVariable(VirtAddVarTab[0],  currentPreset)) != HAL_OK)
 801d566:	4b5d      	ldr	r3, [pc, #372]	; (801d6dc <buttonCheck+0x630>)
 801d568:	7829      	ldrb	r1, [r5, #0]
 801d56a:	8818      	ldrh	r0, [r3, #0]
 801d56c:	f7f4 fd12 	bl	8011f94 <EE_WriteVariable>
 801d570:	b108      	cbz	r0, 801d576 <buttonCheck+0x4ca>
		Error_Handler();
 801d572:	f7f6 fb61 	bl	8013c38 <Error_Handler>
			buttonActionsUI[b][a] = 0;
 801d576:	2300      	movs	r3, #0
			buttonActionsSFX[b][a] = 0;
 801d578:	4a59      	ldr	r2, [pc, #356]	; (801d6e0 <buttonCheck+0x634>)
			buttonActionsUI[b][a] = 0;
 801d57a:	484e      	ldr	r0, [pc, #312]	; (801d6b4 <buttonCheck+0x608>)
 801d57c:	21ff      	movs	r1, #255	; 0xff
			buttonActionsSFX[b][a] = 0;
 801d57e:	6013      	str	r3, [r2, #0]
			buttonActionsUI[b][a] = 0;
 801d580:	6203      	str	r3, [r0, #32]
 801d582:	6243      	str	r3, [r0, #36]	; 0x24
 801d584:	6283      	str	r3, [r0, #40]	; 0x28
 801d586:	6003      	str	r3, [r0, #0]
 801d588:	6043      	str	r3, [r0, #4]
 801d58a:	6083      	str	r3, [r0, #8]
 801d58c:	60c3      	str	r3, [r0, #12]
 801d58e:	6103      	str	r3, [r0, #16]
 801d590:	6143      	str	r3, [r0, #20]
 801d592:	6183      	str	r3, [r0, #24]
 801d594:	61c3      	str	r3, [r0, #28]
			buttonActionsSFX[b][a] = 0;
 801d596:	6053      	str	r3, [r2, #4]
 801d598:	6093      	str	r3, [r2, #8]
 801d59a:	60d3      	str	r3, [r2, #12]
 801d59c:	6113      	str	r3, [r2, #16]
 801d59e:	6153      	str	r3, [r2, #20]
 801d5a0:	6193      	str	r3, [r2, #24]
 801d5a2:	61d3      	str	r3, [r2, #28]
 801d5a4:	6213      	str	r3, [r2, #32]
 801d5a6:	6253      	str	r3, [r2, #36]	; 0x24
 801d5a8:	6293      	str	r3, [r2, #40]	; 0x28
 801d5aa:	4b4e      	ldr	r3, [pc, #312]	; (801d6e4 <buttonCheck+0x638>)
 801d5ac:	7019      	strb	r1, [r3, #0]
 801d5ae:	4b4e      	ldr	r3, [pc, #312]	; (801d6e8 <buttonCheck+0x63c>)
 801d5b0:	7019      	strb	r1, [r3, #0]
		if (buttonActionsUI[ButtonD][ActionPress] == 1)
 801d5b2:	4b40      	ldr	r3, [pc, #256]	; (801d6b4 <buttonCheck+0x608>)
 801d5b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 801d5b8:	2b01      	cmp	r3, #1
 801d5ba:	f47f ae3a 	bne.w	801d232 <buttonCheck+0x186>
			if (currentTuning == 0)
 801d5be:	4a4b      	ldr	r2, [pc, #300]	; (801d6ec <buttonCheck+0x640>)
 801d5c0:	6813      	ldr	r3, [r2, #0]
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	f040 80c3 	bne.w	801d74e <buttonCheck+0x6a2>
				currentTuning = NUM_TUNINGS - 1;
 801d5c8:	233e      	movs	r3, #62	; 0x3e
		centsDeviation[i] = tuningPresets[currentTuning][i];
 801d5ca:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801d5ce:	4c48      	ldr	r4, [pc, #288]	; (801d6f0 <buttonCheck+0x644>)
 801d5d0:	4f48      	ldr	r7, [pc, #288]	; (801d6f4 <buttonCheck+0x648>)
 801d5d2:	eb04 1401 	add.w	r4, r4, r1, lsl #4
 801d5d6:	6013      	str	r3, [r2, #0]
 801d5d8:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 801d5dc:	6820      	ldr	r0, [r4, #0]
 801d5de:	3410      	adds	r4, #16
 801d5e0:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801d5e4:	463d      	mov	r5, r7
 801d5e6:	f854 2c08 	ldr.w	r2, [r4, #-8]
 801d5ea:	3710      	adds	r7, #16
 801d5ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d5f0:	4564      	cmp	r4, ip
 801d5f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d5f4:	d1f2      	bne.n	801d5dc <buttonCheck+0x530>
	if (currentPreset == AutotuneMono)
 801d5f6:	4b31      	ldr	r3, [pc, #196]	; (801d6bc <buttonCheck+0x610>)
 801d5f8:	781b      	ldrb	r3, [r3, #0]
 801d5fa:	2b03      	cmp	r3, #3
 801d5fc:	f000 80b2 	beq.w	801d764 <buttonCheck+0x6b8>
			OLED_writeTuning();
 801d600:	f7f6 fd06 	bl	8014010 <OLED_writeTuning>
			buttonActionsUI[ButtonD][ActionPress] = 0;
 801d604:	2300      	movs	r3, #0
 801d606:	4a2b      	ldr	r2, [pc, #172]	; (801d6b4 <buttonCheck+0x608>)
 801d608:	f882 3020 	strb.w	r3, [r2, #32]
		if (buttonActionsUI[ButtonE][ActionPress] == 1)
 801d60c:	4b29      	ldr	r3, [pc, #164]	; (801d6b4 <buttonCheck+0x608>)
 801d60e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801d612:	2b01      	cmp	r3, #1
 801d614:	f47f ae13 	bne.w	801d23e <buttonCheck+0x192>
 801d618:	e00e      	b.n	801d638 <buttonCheck+0x58c>
			OLED_writeEditScreen();
 801d61a:	f7f6 fcad 	bl	8013f78 <OLED_writeEditScreen>
			setLED_Edit(1);
 801d61e:	2001      	movs	r0, #1
 801d620:	f7f6 fb0e 	bl	8013c40 <setLED_Edit>
			buttonActionsUI[ButtonEdit][ActionPress] = 0;
 801d624:	2300      	movs	r3, #0
 801d626:	4a23      	ldr	r2, [pc, #140]	; (801d6b4 <buttonCheck+0x608>)
 801d628:	7013      	strb	r3, [r2, #0]
		if (buttonActionsUI[ButtonEdit][ActionHoldContinuous] == 1)
 801d62a:	4b22      	ldr	r3, [pc, #136]	; (801d6b4 <buttonCheck+0x608>)
 801d62c:	78db      	ldrb	r3, [r3, #3]
 801d62e:	2b01      	cmp	r3, #1
			if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801d630:	4b20      	ldr	r3, [pc, #128]	; (801d6b4 <buttonCheck+0x608>)
		if (buttonActionsUI[ButtonEdit][ActionHoldContinuous] == 1)
 801d632:	f47f ae0e 	bne.w	801d252 <buttonCheck+0x1a6>
 801d636:	e633      	b.n	801d2a0 <buttonCheck+0x1f4>
			currentTuning = (currentTuning + 1) % NUM_TUNINGS;
 801d638:	492c      	ldr	r1, [pc, #176]	; (801d6ec <buttonCheck+0x640>)
 801d63a:	4b2f      	ldr	r3, [pc, #188]	; (801d6f8 <buttonCheck+0x64c>)
 801d63c:	680a      	ldr	r2, [r1, #0]
		centsDeviation[i] = tuningPresets[currentTuning][i];
 801d63e:	4c2c      	ldr	r4, [pc, #176]	; (801d6f0 <buttonCheck+0x644>)
			currentTuning = (currentTuning + 1) % NUM_TUNINGS;
 801d640:	3201      	adds	r2, #1
 801d642:	4f2c      	ldr	r7, [pc, #176]	; (801d6f4 <buttonCheck+0x648>)
 801d644:	fba3 0302 	umull	r0, r3, r3, r2
 801d648:	1ad0      	subs	r0, r2, r3
 801d64a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 801d64e:	095b      	lsrs	r3, r3, #5
 801d650:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 801d654:	1ad3      	subs	r3, r2, r3
		centsDeviation[i] = tuningPresets[currentTuning][i];
 801d656:	eb03 0243 	add.w	r2, r3, r3, lsl #1
			currentTuning = (currentTuning + 1) % NUM_TUNINGS;
 801d65a:	600b      	str	r3, [r1, #0]
		centsDeviation[i] = tuningPresets[currentTuning][i];
 801d65c:	eb04 1402 	add.w	r4, r4, r2, lsl #4
 801d660:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 801d664:	6820      	ldr	r0, [r4, #0]
 801d666:	3410      	adds	r4, #16
 801d668:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801d66c:	463d      	mov	r5, r7
 801d66e:	f854 2c08 	ldr.w	r2, [r4, #-8]
 801d672:	3710      	adds	r7, #16
 801d674:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d678:	4564      	cmp	r4, ip
 801d67a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d67c:	d1f2      	bne.n	801d664 <buttonCheck+0x5b8>
	if (currentPreset == AutotuneMono)
 801d67e:	4b0f      	ldr	r3, [pc, #60]	; (801d6bc <buttonCheck+0x610>)
 801d680:	781b      	ldrb	r3, [r3, #0]
 801d682:	2b03      	cmp	r3, #3
 801d684:	d101      	bne.n	801d68a <buttonCheck+0x5de>
		calculateNoteArray();
 801d686:	f7fd ffc3 	bl	801b610 <calculateNoteArray>
			OLED_writeTuning();
 801d68a:	f7f6 fcc1 	bl	8014010 <OLED_writeTuning>
			buttonActionsUI[ButtonE][ActionPress] = 0;
 801d68e:	2300      	movs	r3, #0
 801d690:	4a08      	ldr	r2, [pc, #32]	; (801d6b4 <buttonCheck+0x608>)
 801d692:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		if (buttonActionsUI[ButtonEdit][ActionPress])
 801d696:	4b07      	ldr	r3, [pc, #28]	; (801d6b4 <buttonCheck+0x608>)
 801d698:	781b      	ldrb	r3, [r3, #0]
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	f43f add4 	beq.w	801d248 <buttonCheck+0x19c>
 801d6a0:	e7bb      	b.n	801d61a <buttonCheck+0x56e>
 801d6a2:	bf00      	nop
 801d6a4:	200142a4 	.word	0x200142a4
 801d6a8:	bf800000 	.word	0xbf800000
 801d6ac:	200142b8 	.word	0x200142b8
 801d6b0:	0802c960 	.word	0x0802c960
 801d6b4:	20018854 	.word	0x20018854
 801d6b8:	20000656 	.word	0x20000656
 801d6bc:	20000655 	.word	0x20000655
 801d6c0:	20018828 	.word	0x20018828
 801d6c4:	20018938 	.word	0x20018938
 801d6c8:	20016710 	.word	0x20016710
 801d6cc:	20017948 	.word	0x20017948
 801d6d0:	20014304 	.word	0x20014304
 801d6d4:	200002cc 	.word	0x200002cc
 801d6d8:	20000657 	.word	0x20000657
 801d6dc:	20000018 	.word	0x20000018
 801d6e0:	20018714 	.word	0x20018714
 801d6e4:	200002ce 	.word	0x200002ce
 801d6e8:	200002cd 	.word	0x200002cd
 801d6ec:	20000650 	.word	0x20000650
 801d6f0:	0802b604 	.word	0x0802b604
 801d6f4:	20000620 	.word	0x20000620
 801d6f8:	04104105 	.word	0x04104105
 801d6fc:	2001883c 	.word	0x2001883c
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d700:	9c05      	ldr	r4, [sp, #20]
		knobActive[knob] = 0;
 801d702:	2200      	movs	r2, #0
		floatADCUI[knob] = -1.0f;
 801d704:	4b2c      	ldr	r3, [pc, #176]	; (801d7b8 <buttonCheck+0x70c>)
	for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d706:	f10a 0a01 	add.w	sl, sl, #1
		knobActive[knob] = 0;
 801d70a:	9903      	ldr	r1, [sp, #12]
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d70c:	ed94 0a00 	vldr	s0, [r4]
 801d710:	482a      	ldr	r0, [pc, #168]	; (801d7bc <buttonCheck+0x710>)
		knobActive[knob] = 0;
 801d712:	714a      	strb	r2, [r1, #5]
		floatADCUI[knob] = -1.0f;
 801d714:	f8c8 3014 	str.w	r3, [r8, #20]
		tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d718:	f005 f9a2 	bl	8022a60 <tExpSmooth_setValAndDest>
		smoothedADC[knob] = values[knob];
 801d71c:	6823      	ldr	r3, [r4, #0]
	for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d71e:	f1ba 0f05 	cmp.w	sl, #5
		smoothedADC[knob] = values[knob];
 801d722:	9a02      	ldr	r2, [sp, #8]
 801d724:	6153      	str	r3, [r2, #20]
	for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d726:	f47f aed1 	bne.w	801d4cc <buttonCheck+0x420>
			OLEDwriteString("P", 1, 110, FirstLine);
 801d72a:	2300      	movs	r3, #0
 801d72c:	226e      	movs	r2, #110	; 0x6e
 801d72e:	2101      	movs	r1, #1
 801d730:	4823      	ldr	r0, [pc, #140]	; (801d7c0 <buttonCheck+0x714>)
 801d732:	f7f6 fcfd 	bl	8014130 <OLEDwriteString>
			OLEDwriteInt(knobPage, 1, 120, FirstLine);
 801d736:	7838      	ldrb	r0, [r7, #0]
 801d738:	2300      	movs	r3, #0
 801d73a:	2278      	movs	r2, #120	; 0x78
 801d73c:	2101      	movs	r1, #1
 801d73e:	f7f6 fd21 	bl	8014184 <OLEDwriteInt>
			buttonActionsUI[ButtonUp][ActionPress] = 0;
 801d742:	2300      	movs	r3, #0
 801d744:	4a1f      	ldr	r2, [pc, #124]	; (801d7c4 <buttonCheck+0x718>)
 801d746:	7413      	strb	r3, [r2, #16]
}
 801d748:	b007      	add	sp, #28
 801d74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				currentTuning = (currentTuning - 1);
 801d74e:	3b01      	subs	r3, #1
 801d750:	e73b      	b.n	801d5ca <buttonCheck+0x51e>
			if (currentPreset >= PresetNil - 1) currentPreset = 0;
 801d752:	2300      	movs	r3, #0
 801d754:	e701      	b.n	801d55a <buttonCheck+0x4ae>
			if (currentPreset <= 0) currentPreset = PresetNil - 1;
 801d756:	2311      	movs	r3, #17
 801d758:	e6c5      	b.n	801d4e6 <buttonCheck+0x43a>
	if (knobPage == 0) knobPage = numPages[currentPreset] - 1;
 801d75a:	4b1b      	ldr	r3, [pc, #108]	; (801d7c8 <buttonCheck+0x71c>)
 801d75c:	5c5b      	ldrb	r3, [r3, r1]
 801d75e:	3b01      	subs	r3, #1
 801d760:	b2db      	uxtb	r3, r3
 801d762:	e5cb      	b.n	801d2fc <buttonCheck+0x250>
		calculateNoteArray();
 801d764:	f7fd ff54 	bl	801b610 <calculateNoteArray>
 801d768:	e74a      	b.n	801d600 <buttonCheck+0x554>
				keyCenter = (keyCenter + 1) % 12;
 801d76a:	4d18      	ldr	r5, [pc, #96]	; (801d7cc <buttonCheck+0x720>)
				OLEDclearLine(SecondLine);
 801d76c:	4620      	mov	r0, r4
				keyCenter = (keyCenter + 1) % 12;
 801d76e:	4b18      	ldr	r3, [pc, #96]	; (801d7d0 <buttonCheck+0x724>)
 801d770:	782a      	ldrb	r2, [r5, #0]
 801d772:	3201      	adds	r2, #1
 801d774:	fba3 1302 	umull	r1, r3, r3, r2
 801d778:	08db      	lsrs	r3, r3, #3
 801d77a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d77e:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 801d782:	702b      	strb	r3, [r5, #0]
				OLEDclearLine(SecondLine);
 801d784:	f7f6 fcc0 	bl	8014108 <OLEDclearLine>
				OLEDwriteString("KEY: ", 5, 0, SecondLine);
 801d788:	2200      	movs	r2, #0
 801d78a:	4623      	mov	r3, r4
 801d78c:	2105      	movs	r1, #5
 801d78e:	4811      	ldr	r0, [pc, #68]	; (801d7d4 <buttonCheck+0x728>)
 801d790:	f7f6 fcce 	bl	8014130 <OLEDwriteString>
				OLEDwritePitchClass(keyCenter+60, 64, SecondLine);
 801d794:	782b      	ldrb	r3, [r5, #0]
 801d796:	4621      	mov	r1, r4
 801d798:	2040      	movs	r0, #64	; 0x40
 801d79a:	333c      	adds	r3, #60	; 0x3c
 801d79c:	ee00 3a10 	vmov	s0, r3
 801d7a0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d7a4:	f7f6 fd52 	bl	801424c <OLEDwritePitchClass>
				buttonActionsUI[ButtonC][ActionPress] = 0;
 801d7a8:	2300      	movs	r3, #0
 801d7aa:	4906      	ldr	r1, [pc, #24]	; (801d7c4 <buttonCheck+0x718>)
				buttonActionsSFX[ButtonC][ActionPress] = 0;
 801d7ac:	4a0a      	ldr	r2, [pc, #40]	; (801d7d8 <buttonCheck+0x72c>)
				buttonActionsUI[ButtonC][ActionPress] = 0;
 801d7ae:	770b      	strb	r3, [r1, #28]
				buttonActionsUI[ButtonEdit][ActionHoldContinuous] = 0;
 801d7b0:	70cb      	strb	r3, [r1, #3]
				buttonActionsSFX[ButtonC][ActionPress] = 0;
 801d7b2:	7713      	strb	r3, [r2, #28]
 801d7b4:	e578      	b.n	801d2a8 <buttonCheck+0x1fc>
 801d7b6:	bf00      	nop
 801d7b8:	bf800000 	.word	0xbf800000
 801d7bc:	200142b8 	.word	0x200142b8
 801d7c0:	0802c960 	.word	0x0802c960
 801d7c4:	20018854 	.word	0x20018854
 801d7c8:	20018828 	.word	0x20018828
 801d7cc:	20000654 	.word	0x20000654
 801d7d0:	aaaaaaab 	.word	0xaaaaaaab
 801d7d4:	0802c3c4 	.word	0x0802c3c4
 801d7d8:	20018714 	.word	0x20018714

0801d7dc <adcCheck>:
		floatADC[i] = (float) (ADC_values[i]>>6) * INV_TWO_TO_10;
 801d7dc:	486f      	ldr	r0, [pc, #444]	; (801d99c <adcCheck+0x1c0>)
 801d7de:	eddf 4a70 	vldr	s9, [pc, #448]	; 801d9a0 <adcCheck+0x1c4>
{
 801d7e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		floatADC[i] = (float) (ADC_values[i]>>6) * INV_TWO_TO_10;
 801d7e6:	8801      	ldrh	r1, [r0, #0]
 801d7e8:	8842      	ldrh	r2, [r0, #2]
 801d7ea:	8883      	ldrh	r3, [r0, #4]
 801d7ec:	0989      	lsrs	r1, r1, #6
 801d7ee:	0992      	lsrs	r2, r2, #6
	if (firstADCPass)
 801d7f0:	4e6c      	ldr	r6, [pc, #432]	; (801d9a4 <adcCheck+0x1c8>)
		floatADC[i] = (float) (ADC_values[i]>>6) * INV_TWO_TO_10;
 801d7f2:	099b      	lsrs	r3, r3, #6
 801d7f4:	ee05 1a10 	vmov	s10, r1
 801d7f8:	ee05 2a90 	vmov	s11, r2
 801d7fc:	88c1      	ldrh	r1, [r0, #6]
 801d7fe:	ee06 3a10 	vmov	s12, r3
 801d802:	8902      	ldrh	r2, [r0, #8]
 801d804:	8943      	ldrh	r3, [r0, #10]
 801d806:	0989      	lsrs	r1, r1, #6
 801d808:	0992      	lsrs	r2, r2, #6
 801d80a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801d80e:	099b      	lsrs	r3, r3, #6
 801d810:	ee06 1a90 	vmov	s13, r1
 801d814:	ee07 2a10 	vmov	s14, r2
 801d818:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801d81c:	ee07 3a90 	vmov	s15, r3
 801d820:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801d824:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d828:	4c5f      	ldr	r4, [pc, #380]	; (801d9a8 <adcCheck+0x1cc>)
 801d82a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	if (firstADCPass)
 801d82e:	6832      	ldr	r2, [r6, #0]
		floatADC[i] = (float) (ADC_values[i]>>6) * INV_TWO_TO_10;
 801d830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d834:	ee25 5a24 	vmul.f32	s10, s10, s9
 801d838:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801d83c:	ee26 6a24 	vmul.f32	s12, s12, s9
 801d840:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801d844:	ed84 5a00 	vstr	s10, [r4]
 801d848:	ee27 7a24 	vmul.f32	s14, s14, s9
 801d84c:	edc4 5a01 	vstr	s11, [r4, #4]
 801d850:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801d854:	ed84 6a02 	vstr	s12, [r4, #8]
 801d858:	edc4 6a03 	vstr	s13, [r4, #12]
 801d85c:	ed84 7a04 	vstr	s14, [r4, #16]
 801d860:	edc4 7a05 	vstr	s15, [r4, #20]
	if (firstADCPass)
 801d864:	b142      	cbz	r2, 801d878 <adcCheck+0x9c>
 801d866:	4d51      	ldr	r5, [pc, #324]	; (801d9ac <adcCheck+0x1d0>)
		firstADCPass = 0;
 801d868:	2700      	movs	r7, #0
 801d86a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d86c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d86e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801d872:	6037      	str	r7, [r6, #0]
 801d874:	e885 0003 	stmia.w	r5, {r0, r1}
 801d878:	4d4b      	ldr	r5, [pc, #300]	; (801d9a8 <adcCheck+0x1cc>)
{
 801d87a:	f04f 0b00 	mov.w	fp, #0
 801d87e:	4e4b      	ldr	r6, [pc, #300]	; (801d9ac <adcCheck+0x1d0>)
 801d880:	4c4b      	ldr	r4, [pc, #300]	; (801d9b0 <adcCheck+0x1d4>)
 801d882:	4f4c      	ldr	r7, [pc, #304]	; (801d9b4 <adcCheck+0x1d8>)
 801d884:	f8df 8144 	ldr.w	r8, [pc, #324]	; 801d9cc <adcCheck+0x1f0>
 801d888:	f8df 9144 	ldr.w	r9, [pc, #324]	; 801d9d0 <adcCheck+0x1f4>
				else writeKnobFlag = i;
 801d88c:	f8df a144 	ldr.w	sl, [pc, #324]	; 801d9d4 <adcCheck+0x1f8>
 801d890:	e031      	b.n	801d8f6 <adcCheck+0x11a>
			if (buttonActionsUI[ButtonEdit][ActionHoldContinuous])
 801d892:	4949      	ldr	r1, [pc, #292]	; (801d9b8 <adcCheck+0x1dc>)
 801d894:	78ca      	ldrb	r2, [r1, #3]
 801d896:	b16a      	cbz	r2, 801d8b4 <adcCheck+0xd8>
				if (i != 5) cvAddParam[currentPreset] = i + (knobPage * KNOB_PAGE_SIZE);;
 801d898:	f1bb 0f05 	cmp.w	fp, #5
 801d89c:	d008      	beq.n	801d8b0 <adcCheck+0xd4>
 801d89e:	4a47      	ldr	r2, [pc, #284]	; (801d9bc <adcCheck+0x1e0>)
 801d8a0:	4847      	ldr	r0, [pc, #284]	; (801d9c0 <adcCheck+0x1e4>)
 801d8a2:	7812      	ldrb	r2, [r2, #0]
 801d8a4:	7800      	ldrb	r0, [r0, #0]
 801d8a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d8aa:	4b46      	ldr	r3, [pc, #280]	; (801d9c4 <adcCheck+0x1e8>)
 801d8ac:	445a      	add	r2, fp
 801d8ae:	541a      	strb	r2, [r3, r0]
				buttonActionsUI[ButtonEdit][ActionHoldContinuous] = 0;
 801d8b0:	2200      	movs	r2, #0
 801d8b2:	70ca      	strb	r2, [r1, #3]
			lastFloatADC[i] = floatADC[i];
 801d8b4:	ed15 0a01 	vldr	s0, [r5, #-4]
			if (i == 5) writeKnobFlag = cvAddParam[currentPreset] - (knobPage * KNOB_PAGE_SIZE);
 801d8b8:	f1bb 0f05 	cmp.w	fp, #5
			lastFloatADC[i] = floatADC[i];
 801d8bc:	ed06 0a01 	vstr	s0, [r6, #-4]
			if (i == 5) writeKnobFlag = cvAddParam[currentPreset] - (knobPage * KNOB_PAGE_SIZE);
 801d8c0:	d05e      	beq.n	801d980 <adcCheck+0x1a4>
			else writeKnobFlag = i;
 801d8c2:	fa4f f28b 	sxtb.w	r2, fp
		if (floatADCUI[i] >= 0.0f)
 801d8c6:	edd4 7a00 	vldr	s15, [r4]
			knobActive[i] = 1;
 801d8ca:	2101      	movs	r1, #1
 801d8cc:	f88a 2000 	strb.w	r2, [sl]
		if (floatADCUI[i] >= 0.0f)
 801d8d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			knobActive[i] = 1;
 801d8d4:	f809 100b 	strb.w	r1, [r9, fp]
		if (floatADCUI[i] >= 0.0f)
 801d8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8dc:	da28      	bge.n	801d930 <adcCheck+0x154>
		if (knobActive[i]) tExpSmooth_setDest(&adc[i], floatADC[i]);
 801d8de:	4b3a      	ldr	r3, [pc, #232]	; (801d9c8 <adcCheck+0x1ec>)
 801d8e0:	eb03 008b 	add.w	r0, r3, fp, lsl #2
 801d8e4:	f005 f8b8 	bl	8022a58 <tExpSmooth_setDest>
	for (int i = 0; i < 6; i++)
 801d8e8:	f10b 0b01 	add.w	fp, fp, #1
 801d8ec:	3404      	adds	r4, #4
 801d8ee:	3704      	adds	r7, #4
 801d8f0:	f1bb 0f06 	cmp.w	fp, #6
 801d8f4:	d042      	beq.n	801d97c <adcCheck+0x1a0>
		if (fastabsf(floatADC[i] - lastFloatADC[i]) > adcHysteresisThreshold)
 801d8f6:	ecf6 7a01 	vldmia	r6!, {s15}
 801d8fa:	ecb5 0a01 	vldmia	r5!, {s0}
 801d8fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d902:	f006 fc63 	bl	80241cc <fastabsf>
 801d906:	edd8 7a00 	vldr	s15, [r8]
 801d90a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d912:	dcbe      	bgt.n	801d892 <adcCheck+0xb6>
		if (floatADCUI[i] >= 0.0f)
 801d914:	edd4 7a00 	vldr	s15, [r4]
 801d918:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d920:	da06      	bge.n	801d930 <adcCheck+0x154>
 801d922:	f819 200b 	ldrb.w	r2, [r9, fp]
		if (knobActive[i]) tExpSmooth_setDest(&adc[i], floatADC[i]);
 801d926:	2a00      	cmp	r2, #0
 801d928:	d0de      	beq.n	801d8e8 <adcCheck+0x10c>
 801d92a:	ed15 0a01 	vldr	s0, [r5, #-4]
 801d92e:	e7d6      	b.n	801d8de <adcCheck+0x102>
			if (fastabsf(smoothedADC[i] - floatADCUI[i]) > adcHysteresisThreshold)
 801d930:	ed97 0a00 	vldr	s0, [r7]
 801d934:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d938:	f006 fc48 	bl	80241cc <fastabsf>
 801d93c:	edd8 7a00 	vldr	s15, [r8]
 801d940:	f819 200b 	ldrb.w	r2, [r9, fp]
 801d944:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d94c:	ddeb      	ble.n	801d926 <adcCheck+0x14a>
				if (i == 5) writeKnobFlag = cvAddParam[currentPreset] - (knobPage * KNOB_PAGE_SIZE);
 801d94e:	f1bb 0f05 	cmp.w	fp, #5
 801d952:	d004      	beq.n	801d95e <adcCheck+0x182>
				else writeKnobFlag = i;
 801d954:	f88a b000 	strb.w	fp, [sl]
		if (knobActive[i]) tExpSmooth_setDest(&adc[i], floatADC[i]);
 801d958:	2a00      	cmp	r2, #0
 801d95a:	d0c5      	beq.n	801d8e8 <adcCheck+0x10c>
 801d95c:	e7e5      	b.n	801d92a <adcCheck+0x14e>
				if (i == 5) writeKnobFlag = cvAddParam[currentPreset] - (knobPage * KNOB_PAGE_SIZE);
 801d95e:	4917      	ldr	r1, [pc, #92]	; (801d9bc <adcCheck+0x1e0>)
 801d960:	4817      	ldr	r0, [pc, #92]	; (801d9c0 <adcCheck+0x1e4>)
 801d962:	7809      	ldrb	r1, [r1, #0]
 801d964:	7800      	ldrb	r0, [r0, #0]
 801d966:	ebc1 1c81 	rsb	ip, r1, r1, lsl #6
 801d96a:	4b16      	ldr	r3, [pc, #88]	; (801d9c4 <adcCheck+0x1e8>)
 801d96c:	ebc1 018c 	rsb	r1, r1, ip, lsl #2
 801d970:	5c18      	ldrb	r0, [r3, r0]
 801d972:	4401      	add	r1, r0
 801d974:	f88a 1000 	strb.w	r1, [sl]
		if (knobActive[i]) tExpSmooth_setDest(&adc[i], floatADC[i]);
 801d978:	2a00      	cmp	r2, #0
 801d97a:	d1d6      	bne.n	801d92a <adcCheck+0x14e>
}
 801d97c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (i == 5) writeKnobFlag = cvAddParam[currentPreset] - (knobPage * KNOB_PAGE_SIZE);
 801d980:	490e      	ldr	r1, [pc, #56]	; (801d9bc <adcCheck+0x1e0>)
 801d982:	4a0f      	ldr	r2, [pc, #60]	; (801d9c0 <adcCheck+0x1e4>)
 801d984:	7809      	ldrb	r1, [r1, #0]
 801d986:	7812      	ldrb	r2, [r2, #0]
 801d988:	ebc1 1081 	rsb	r0, r1, r1, lsl #6
 801d98c:	4b0d      	ldr	r3, [pc, #52]	; (801d9c4 <adcCheck+0x1e8>)
 801d98e:	ebc1 0180 	rsb	r1, r1, r0, lsl #2
 801d992:	5c9a      	ldrb	r2, [r3, r2]
 801d994:	440a      	add	r2, r1
 801d996:	b252      	sxtb	r2, r2
 801d998:	e795      	b.n	801d8c6 <adcCheck+0xea>
 801d99a:	bf00      	nop
 801d99c:	30001080 	.word	0x30001080
 801d9a0:	3a800000 	.word	0x3a800000
 801d9a4:	200002c8 	.word	0x200002c8
 801d9a8:	200186fc 	.word	0x200186fc
 801d9ac:	2001894c 	.word	0x2001894c
 801d9b0:	2001883c 	.word	0x2001883c
 801d9b4:	20014304 	.word	0x20014304
 801d9b8:	20018854 	.word	0x20018854
 801d9bc:	20000656 	.word	0x20000656
 801d9c0:	20000655 	.word	0x20000655
 801d9c4:	20018938 	.word	0x20018938
 801d9c8:	200142a4 	.word	0x200142a4
 801d9cc:	200002b8 	.word	0x200002b8
 801d9d0:	20017948 	.word	0x20017948
 801d9d4:	200002cf 	.word	0x200002cf

0801d9d8 <resetKnobValues>:
{
 801d9d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		floatADCUI[i] = -1.0f;
 801d9dc:	4820      	ldr	r0, [pc, #128]	; (801da60 <resetKnobValues+0x88>)
		knobActive[i] = 0;
 801d9de:	2600      	movs	r6, #0
 801d9e0:	4f20      	ldr	r7, [pc, #128]	; (801da64 <resetKnobValues+0x8c>)
		if (i != 5) value = presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)];
 801d9e2:	f04f 0a05 	mov.w	sl, #5
	for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 801d9e6:	4634      	mov	r4, r6
		floatADCUI[i] = -1.0f;
 801d9e8:	f8df b098 	ldr.w	fp, [pc, #152]	; 801da84 <resetKnobValues+0xac>
		knobActive[i] = 0;
 801d9ec:	46b1      	mov	r9, r6
 801d9ee:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801da80 <resetKnobValues+0xa8>
 801d9f2:	4d1d      	ldr	r5, [pc, #116]	; (801da68 <resetKnobValues+0x90>)
		floatADCUI[i] = -1.0f;
 801d9f4:	f84b 0b04 	str.w	r0, [fp], #4
{
 801d9f8:	ed2d 8b02 	vpush	{d8}
		knobActive[i] = 0;
 801d9fc:	f807 6b01 	strb.w	r6, [r7], #1
		floatADCUI[i] = -1.0f;
 801da00:	ee08 0a90 	vmov	s17, r0
 801da04:	4e19      	ldr	r6, [pc, #100]	; (801da6c <resetKnobValues+0x94>)
		if (i != 5) value = presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)];
 801da06:	4b1a      	ldr	r3, [pc, #104]	; (801da70 <resetKnobValues+0x98>)
		tExpSmooth_setValAndDest(&adc[i], value);
 801da08:	4628      	mov	r0, r5
		if (i != 5) value = presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)];
 801da0a:	7832      	ldrb	r2, [r6, #0]
 801da0c:	3504      	adds	r5, #4
 801da0e:	781b      	ldrb	r3, [r3, #0]
 801da10:	fb1a 4202 	smlabb	r2, sl, r2, r4
	for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 801da14:	3401      	adds	r4, #1
		if (i != 5) value = presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)];
 801da16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801da1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801da1e:	4413      	add	r3, r2
 801da20:	4a14      	ldr	r2, [pc, #80]	; (801da74 <resetKnobValues+0x9c>)
 801da22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801da26:	ed93 8a00 	vldr	s16, [r3]
		tExpSmooth_setValAndDest(&adc[i], value);
 801da2a:	eeb0 0a48 	vmov.f32	s0, s16
 801da2e:	f005 f817 	bl	8022a60 <tExpSmooth_setValAndDest>
		if (i != 5) value = presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)];
 801da32:	2c05      	cmp	r4, #5
		smoothedADC[i] = value;
 801da34:	eca8 8a01 	vstmia	r8!, {s16}
		knobActive[i] = 0;
 801da38:	f807 9b01 	strb.w	r9, [r7], #1
		floatADCUI[i] = -1.0f;
 801da3c:	eceb 8a01 	vstmia	fp!, {s17}
		if (i != 5) value = presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)];
 801da40:	d1e1      	bne.n	801da06 <resetKnobValues+0x2e>
		tExpSmooth_setValAndDest(&adc[i], value);
 801da42:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 801da78 <resetKnobValues+0xa0>
 801da46:	480d      	ldr	r0, [pc, #52]	; (801da7c <resetKnobValues+0xa4>)
 801da48:	eeb0 0a48 	vmov.f32	s0, s16
 801da4c:	f005 f808 	bl	8022a60 <tExpSmooth_setValAndDest>
		smoothedADC[i] = value;
 801da50:	4b0b      	ldr	r3, [pc, #44]	; (801da80 <resetKnobValues+0xa8>)
 801da52:	ed83 8a05 	vstr	s16, [r3, #20]
}
 801da56:	ecbd 8b02 	vpop	{d8}
 801da5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da5e:	bf00      	nop
 801da60:	bf800000 	.word	0xbf800000
 801da64:	20017948 	.word	0x20017948
 801da68:	200142a4 	.word	0x200142a4
 801da6c:	20000656 	.word	0x20000656
 801da70:	20000655 	.word	0x20000655
 801da74:	20016710 	.word	0x20016710
 801da78:	00000000 	.word	0x00000000
 801da7c:	200142b8 	.word	0x200142b8
 801da80:	20014304 	.word	0x20014304
 801da84:	2001883c 	.word	0x2001883c

0801da88 <UIVocoderButtons>:
}

char* UIVocoderButtons(VocodecButton button, ButtonAction action)
{
	char* writeString = "";
	if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801da88:	4b15      	ldr	r3, [pc, #84]	; (801dae0 <UIVocoderButtons+0x58>)
{
 801da8a:	b410      	push	{r4}
	if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801da8c:	7d1a      	ldrb	r2, [r3, #20]
 801da8e:	2a01      	cmp	r2, #1
 801da90:	d01b      	beq.n	801daca <UIVocoderButtons+0x42>
	char* writeString = "";
 801da92:	4814      	ldr	r0, [pc, #80]	; (801dae4 <UIVocoderButtons+0x5c>)
	{
		writeString = (numVoices > 1) ? "POLY" : "MONO";
		buttonActionsUI[ButtonA][ActionPress] = 0;
	}
	if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801da94:	7e1a      	ldrb	r2, [r3, #24]
 801da96:	2a01      	cmp	r2, #1
 801da98:	d108      	bne.n	801daac <UIVocoderButtons+0x24>
	{
		writeString = internalExternal ? "EXTERNAL" : "INTERNAL";
 801da9a:	4a13      	ldr	r2, [pc, #76]	; (801dae8 <UIVocoderButtons+0x60>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801da9c:	2400      	movs	r4, #0
		writeString = internalExternal ? "EXTERNAL" : "INTERNAL";
 801da9e:	4813      	ldr	r0, [pc, #76]	; (801daec <UIVocoderButtons+0x64>)
 801daa0:	7811      	ldrb	r1, [r2, #0]
 801daa2:	4a13      	ldr	r2, [pc, #76]	; (801daf0 <UIVocoderButtons+0x68>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801daa4:	761c      	strb	r4, [r3, #24]
		writeString = internalExternal ? "EXTERNAL" : "INTERNAL";
 801daa6:	42a1      	cmp	r1, r4
 801daa8:	bf08      	it	eq
 801daaa:	4610      	moveq	r0, r2
	}
	if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801daac:	7f1a      	ldrb	r2, [r3, #28]
 801daae:	2a01      	cmp	r2, #1
 801dab0:	d108      	bne.n	801dac4 <UIVocoderButtons+0x3c>
	{
		writeString = vocFreezeLPC ? "FROZEN" : "UNFROZEN";
 801dab2:	4a10      	ldr	r2, [pc, #64]	; (801daf4 <UIVocoderButtons+0x6c>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801dab4:	2400      	movs	r4, #0
		writeString = vocFreezeLPC ? "FROZEN" : "UNFROZEN";
 801dab6:	4810      	ldr	r0, [pc, #64]	; (801daf8 <UIVocoderButtons+0x70>)
 801dab8:	6811      	ldr	r1, [r2, #0]
 801daba:	4a10      	ldr	r2, [pc, #64]	; (801dafc <UIVocoderButtons+0x74>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801dabc:	771c      	strb	r4, [r3, #28]
		writeString = vocFreezeLPC ? "FROZEN" : "UNFROZEN";
 801dabe:	42a1      	cmp	r1, r4
 801dac0:	bf08      	it	eq
 801dac2:	4610      	moveq	r0, r2
	}
	return writeString;
}
 801dac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dac8:	4770      	bx	lr
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801daca:	4a0d      	ldr	r2, [pc, #52]	; (801db00 <UIVocoderButtons+0x78>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801dacc:	2400      	movs	r4, #0
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801dace:	480d      	ldr	r0, [pc, #52]	; (801db04 <UIVocoderButtons+0x7c>)
 801dad0:	7811      	ldrb	r1, [r2, #0]
 801dad2:	4a0d      	ldr	r2, [pc, #52]	; (801db08 <UIVocoderButtons+0x80>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801dad4:	751c      	strb	r4, [r3, #20]
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801dad6:	2901      	cmp	r1, #1
 801dad8:	bf98      	it	ls
 801dada:	4610      	movls	r0, r2
 801dadc:	e7da      	b.n	801da94 <UIVocoderButtons+0xc>
 801dade:	bf00      	nop
 801dae0:	20018854 	.word	0x20018854
 801dae4:	0802c348 	.word	0x0802c348
 801dae8:	2000059c 	.word	0x2000059c
 801daec:	0802c37c 	.word	0x0802c37c
 801daf0:	0802c388 	.word	0x0802c388
 801daf4:	20000614 	.word	0x20000614
 801daf8:	0802c394 	.word	0x0802c394
 801dafc:	0802c39c 	.word	0x0802c39c
 801db00:	20000250 	.word	0x20000250
 801db04:	0802c36c 	.word	0x0802c36c
 801db08:	0802c374 	.word	0x0802c374

0801db0c <UIVocoderChButtons>:

char* UIVocoderChButtons(VocodecButton button, ButtonAction action)
{
	char* writeString = "";
	if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801db0c:	4b15      	ldr	r3, [pc, #84]	; (801db64 <UIVocoderChButtons+0x58>)
{
 801db0e:	b410      	push	{r4}
	if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801db10:	7d1a      	ldrb	r2, [r3, #20]
 801db12:	2a01      	cmp	r2, #1
 801db14:	d01b      	beq.n	801db4e <UIVocoderChButtons+0x42>
	char* writeString = "";
 801db16:	4814      	ldr	r0, [pc, #80]	; (801db68 <UIVocoderChButtons+0x5c>)
	{
		writeString = (numVoices > 1) ? "POLY" : "MONO";
		buttonActionsUI[ButtonA][ActionPress] = 0;
	}
	if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801db18:	7e1a      	ldrb	r2, [r3, #24]
 801db1a:	2a01      	cmp	r2, #1
 801db1c:	d108      	bne.n	801db30 <UIVocoderChButtons+0x24>
	{
		writeString = internalExternal ? "EXTERNAL" : "INTERNAL";
 801db1e:	4a13      	ldr	r2, [pc, #76]	; (801db6c <UIVocoderChButtons+0x60>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801db20:	2400      	movs	r4, #0
		writeString = internalExternal ? "EXTERNAL" : "INTERNAL";
 801db22:	4813      	ldr	r0, [pc, #76]	; (801db70 <UIVocoderChButtons+0x64>)
 801db24:	7811      	ldrb	r1, [r2, #0]
 801db26:	4a13      	ldr	r2, [pc, #76]	; (801db74 <UIVocoderChButtons+0x68>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801db28:	761c      	strb	r4, [r3, #24]
		writeString = internalExternal ? "EXTERNAL" : "INTERNAL";
 801db2a:	42a1      	cmp	r1, r4
 801db2c:	bf08      	it	eq
 801db2e:	4610      	moveq	r0, r2
	}
	if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801db30:	7f1a      	ldrb	r2, [r3, #28]
 801db32:	2a01      	cmp	r2, #1
 801db34:	d108      	bne.n	801db48 <UIVocoderChButtons+0x3c>
	{
		writeString = vocChFreeze ? "FROZEN" : "UNFROZEN";
 801db36:	4a10      	ldr	r2, [pc, #64]	; (801db78 <UIVocoderChButtons+0x6c>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801db38:	2400      	movs	r4, #0
		writeString = vocChFreeze ? "FROZEN" : "UNFROZEN";
 801db3a:	4810      	ldr	r0, [pc, #64]	; (801db7c <UIVocoderChButtons+0x70>)
 801db3c:	6811      	ldr	r1, [r2, #0]
 801db3e:	4a10      	ldr	r2, [pc, #64]	; (801db80 <UIVocoderChButtons+0x74>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801db40:	771c      	strb	r4, [r3, #28]
		writeString = vocChFreeze ? "FROZEN" : "UNFROZEN";
 801db42:	42a1      	cmp	r1, r4
 801db44:	bf08      	it	eq
 801db46:	4610      	moveq	r0, r2
	}
	return writeString;
}
 801db48:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db4c:	4770      	bx	lr
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801db4e:	4a0d      	ldr	r2, [pc, #52]	; (801db84 <UIVocoderChButtons+0x78>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801db50:	2400      	movs	r4, #0
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801db52:	480d      	ldr	r0, [pc, #52]	; (801db88 <UIVocoderChButtons+0x7c>)
 801db54:	7811      	ldrb	r1, [r2, #0]
 801db56:	4a0d      	ldr	r2, [pc, #52]	; (801db8c <UIVocoderChButtons+0x80>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801db58:	751c      	strb	r4, [r3, #20]
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801db5a:	2901      	cmp	r1, #1
 801db5c:	bf98      	it	ls
 801db5e:	4610      	movls	r0, r2
 801db60:	e7da      	b.n	801db18 <UIVocoderChButtons+0xc>
 801db62:	bf00      	nop
 801db64:	20018854 	.word	0x20018854
 801db68:	0802c348 	.word	0x0802c348
 801db6c:	2000059c 	.word	0x2000059c
 801db70:	0802c37c 	.word	0x0802c37c
 801db74:	0802c388 	.word	0x0802c388
 801db78:	20000610 	.word	0x20000610
 801db7c:	0802c394 	.word	0x0802c394
 801db80:	0802c39c 	.word	0x0802c39c
 801db84:	20000250 	.word	0x20000250
 801db88:	0802c36c 	.word	0x0802c36c
 801db8c:	0802c374 	.word	0x0802c374

0801db90 <UIPitchShiftButtons>:

char* UIPitchShiftButtons(VocodecButton button, ButtonAction action)
{
	char* writeString = "";
	return writeString;
}
 801db90:	4800      	ldr	r0, [pc, #0]	; (801db94 <UIPitchShiftButtons+0x4>)
 801db92:	4770      	bx	lr
 801db94:	0802c348 	.word	0x0802c348

0801db98 <UINeartuneButtons>:

char* UINeartuneButtons(VocodecButton button, ButtonAction action)
{
	char* writeString = "";
	if (buttonActionsUI[ButtonA][ActionPress])
 801db98:	4b0e      	ldr	r3, [pc, #56]	; (801dbd4 <UINeartuneButtons+0x3c>)
{
 801db9a:	b410      	push	{r4}
	if (buttonActionsUI[ButtonA][ActionPress])
 801db9c:	7d1a      	ldrb	r2, [r3, #20]
 801db9e:	b1b2      	cbz	r2, 801dbce <UINeartuneButtons+0x36>
	{
		writeString = autotuneChromatic ? "AUTOCHROM ON" : "AUTOCHROM OFF";
 801dba0:	4a0d      	ldr	r2, [pc, #52]	; (801dbd8 <UINeartuneButtons+0x40>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801dba2:	2400      	movs	r4, #0
		writeString = autotuneChromatic ? "AUTOCHROM ON" : "AUTOCHROM OFF";
 801dba4:	480d      	ldr	r0, [pc, #52]	; (801dbdc <UINeartuneButtons+0x44>)
 801dba6:	7811      	ldrb	r1, [r2, #0]
 801dba8:	4a0d      	ldr	r2, [pc, #52]	; (801dbe0 <UINeartuneButtons+0x48>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801dbaa:	751c      	strb	r4, [r3, #20]
		writeString = autotuneChromatic ? "AUTOCHROM ON" : "AUTOCHROM OFF";
 801dbac:	42a1      	cmp	r1, r4
 801dbae:	bf08      	it	eq
 801dbb0:	4610      	moveq	r0, r2
	}

	if (buttonActionsUI[ButtonC][ActionPress])
 801dbb2:	7f1a      	ldrb	r2, [r3, #28]
 801dbb4:	b142      	cbz	r2, 801dbc8 <UINeartuneButtons+0x30>
	{
		writeString = autotuneLock ? "CHORD LOCK ON" : "CHORD LOCK OFF";
 801dbb6:	4a0b      	ldr	r2, [pc, #44]	; (801dbe4 <UINeartuneButtons+0x4c>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801dbb8:	2400      	movs	r4, #0
		writeString = autotuneLock ? "CHORD LOCK ON" : "CHORD LOCK OFF";
 801dbba:	480b      	ldr	r0, [pc, #44]	; (801dbe8 <UINeartuneButtons+0x50>)
 801dbbc:	6811      	ldr	r1, [r2, #0]
 801dbbe:	4a0b      	ldr	r2, [pc, #44]	; (801dbec <UINeartuneButtons+0x54>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801dbc0:	771c      	strb	r4, [r3, #28]
		writeString = autotuneLock ? "CHORD LOCK ON" : "CHORD LOCK OFF";
 801dbc2:	42a1      	cmp	r1, r4
 801dbc4:	bf08      	it	eq
 801dbc6:	4610      	moveq	r0, r2
	}


	return writeString;
}
 801dbc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dbcc:	4770      	bx	lr
	char* writeString = "";
 801dbce:	4808      	ldr	r0, [pc, #32]	; (801dbf0 <UINeartuneButtons+0x58>)
 801dbd0:	e7ef      	b.n	801dbb2 <UINeartuneButtons+0x1a>
 801dbd2:	bf00      	nop
 801dbd4:	20018854 	.word	0x20018854
 801dbd8:	2000051c 	.word	0x2000051c
 801dbdc:	0802c270 	.word	0x0802c270
 801dbe0:	0802c280 	.word	0x0802c280
 801dbe4:	20000520 	.word	0x20000520
 801dbe8:	0802c290 	.word	0x0802c290
 801dbec:	0802c2a0 	.word	0x0802c2a0
 801dbf0:	0802c348 	.word	0x0802c348

0801dbf4 <UIAutotuneButtons>:
 801dbf4:	4800      	ldr	r0, [pc, #0]	; (801dbf8 <UIAutotuneButtons+0x4>)
 801dbf6:	4770      	bx	lr
 801dbf8:	0802c348 	.word	0x0802c348

0801dbfc <UISamplerBPButtons>:
	char* writeString = "";
	return writeString;
}

char* UISamplerBPButtons(VocodecButton button, ButtonAction action)
{
 801dbfc:	b570      	push	{r4, r5, r6, lr}
	char* writeString = "";
	if (buttonActionsUI[ButtonC][ActionPress])
 801dbfe:	4c31      	ldr	r4, [pc, #196]	; (801dcc4 <UISamplerBPButtons+0xc8>)
 801dc00:	7f23      	ldrb	r3, [r4, #28]
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d144      	bne.n	801dc90 <UISamplerBPButtons+0x94>
		OLEDwriteFloat(sampleLength, 0, SecondLine);
		OLEDwriteString(samplePlaying ? "PLAYING" : "STOPPED", 7, 48, SecondLine);
		buttonActionsUI[ButtonC][ActionPress] = 0;
	}

	if (buttonActionsUI[ButtonB][ActionPress])
 801dc06:	7e23      	ldrb	r3, [r4, #24]
 801dc08:	bb83      	cbnz	r3, 801dc6c <UISamplerBPButtons+0x70>
	{
		OLEDclearLine(SecondLine);
		OLEDwriteString(bpMode ? "BACKANDFORTH" : "FORWARD     ", 12, 0, SecondLine);
		buttonActionsUI[ButtonB][ActionPress] = 0;
	}
	if (buttonActionsUI[ButtonA][ActionHoldContinuous])
 801dc0a:	7de3      	ldrb	r3, [r4, #23]
 801dc0c:	b9db      	cbnz	r3, 801dc46 <UISamplerBPButtons+0x4a>
		OLEDclearLine(SecondLine);
		OLEDwriteString("RECORDING", 9, 0, SecondLine);
		OLEDwriteFloat(sampleLength, 84, SecondLine);
		buttonActionsUI[ButtonA][ActionHoldContinuous] = 0;
	}
	if (buttonActionsUI[ButtonA][ActionRelease])
 801dc0e:	7d63      	ldrb	r3, [r4, #21]
 801dc10:	b1bb      	cbz	r3, 801dc42 <UISamplerBPButtons+0x46>
	{
		OLEDclearLine(SecondLine);
 801dc12:	2001      	movs	r0, #1
		OLEDwriteFloat(sampleLength, 0, SecondLine);
		OLEDwriteString(samplePlaying ? "PLAYING" : "STOPPED", 7, 48, SecondLine);
 801dc14:	4d2c      	ldr	r5, [pc, #176]	; (801dcc8 <UISamplerBPButtons+0xcc>)
		OLEDclearLine(SecondLine);
 801dc16:	f7f6 fa77 	bl	8014108 <OLEDclearLine>
		OLEDwriteFloat(sampleLength, 0, SecondLine);
 801dc1a:	4b2c      	ldr	r3, [pc, #176]	; (801dccc <UISamplerBPButtons+0xd0>)
 801dc1c:	2101      	movs	r1, #1
 801dc1e:	2000      	movs	r0, #0
 801dc20:	ed93 0a00 	vldr	s0, [r3]
 801dc24:	f7f6 fb42 	bl	80142ac <OLEDwriteFloat>
		OLEDwriteString(samplePlaying ? "PLAYING" : "STOPPED", 7, 48, SecondLine);
 801dc28:	4a29      	ldr	r2, [pc, #164]	; (801dcd0 <UISamplerBPButtons+0xd4>)
 801dc2a:	482a      	ldr	r0, [pc, #168]	; (801dcd4 <UISamplerBPButtons+0xd8>)
 801dc2c:	2301      	movs	r3, #1
 801dc2e:	7816      	ldrb	r6, [r2, #0]
 801dc30:	2107      	movs	r1, #7
 801dc32:	2230      	movs	r2, #48	; 0x30
 801dc34:	2e00      	cmp	r6, #0
 801dc36:	bf08      	it	eq
 801dc38:	4628      	moveq	r0, r5
 801dc3a:	f7f6 fa79 	bl	8014130 <OLEDwriteString>
		buttonActionsUI[ButtonA][ActionRelease] = 0;
 801dc3e:	2300      	movs	r3, #0
 801dc40:	7563      	strb	r3, [r4, #21]
	}
	return writeString;
}
 801dc42:	4825      	ldr	r0, [pc, #148]	; (801dcd8 <UISamplerBPButtons+0xdc>)
 801dc44:	bd70      	pop	{r4, r5, r6, pc}
		OLEDclearLine(SecondLine);
 801dc46:	2001      	movs	r0, #1
 801dc48:	f7f6 fa5e 	bl	8014108 <OLEDclearLine>
		OLEDwriteString("RECORDING", 9, 0, SecondLine);
 801dc4c:	2301      	movs	r3, #1
 801dc4e:	2200      	movs	r2, #0
 801dc50:	2109      	movs	r1, #9
 801dc52:	4822      	ldr	r0, [pc, #136]	; (801dcdc <UISamplerBPButtons+0xe0>)
 801dc54:	f7f6 fa6c 	bl	8014130 <OLEDwriteString>
		OLEDwriteFloat(sampleLength, 84, SecondLine);
 801dc58:	4b1c      	ldr	r3, [pc, #112]	; (801dccc <UISamplerBPButtons+0xd0>)
 801dc5a:	2101      	movs	r1, #1
 801dc5c:	2054      	movs	r0, #84	; 0x54
 801dc5e:	ed93 0a00 	vldr	s0, [r3]
 801dc62:	f7f6 fb23 	bl	80142ac <OLEDwriteFloat>
		buttonActionsUI[ButtonA][ActionHoldContinuous] = 0;
 801dc66:	2300      	movs	r3, #0
 801dc68:	75e3      	strb	r3, [r4, #23]
 801dc6a:	e7d0      	b.n	801dc0e <UISamplerBPButtons+0x12>
		OLEDclearLine(SecondLine);
 801dc6c:	2001      	movs	r0, #1
		OLEDwriteString(bpMode ? "BACKANDFORTH" : "FORWARD     ", 12, 0, SecondLine);
 801dc6e:	4d1c      	ldr	r5, [pc, #112]	; (801dce0 <UISamplerBPButtons+0xe4>)
		OLEDclearLine(SecondLine);
 801dc70:	f7f6 fa4a 	bl	8014108 <OLEDclearLine>
		OLEDwriteString(bpMode ? "BACKANDFORTH" : "FORWARD     ", 12, 0, SecondLine);
 801dc74:	4a1b      	ldr	r2, [pc, #108]	; (801dce4 <UISamplerBPButtons+0xe8>)
 801dc76:	481c      	ldr	r0, [pc, #112]	; (801dce8 <UISamplerBPButtons+0xec>)
 801dc78:	2301      	movs	r3, #1
 801dc7a:	6816      	ldr	r6, [r2, #0]
 801dc7c:	2200      	movs	r2, #0
 801dc7e:	210c      	movs	r1, #12
 801dc80:	4296      	cmp	r6, r2
 801dc82:	bf08      	it	eq
 801dc84:	4628      	moveq	r0, r5
 801dc86:	f7f6 fa53 	bl	8014130 <OLEDwriteString>
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801dc8a:	2300      	movs	r3, #0
 801dc8c:	7623      	strb	r3, [r4, #24]
 801dc8e:	e7bc      	b.n	801dc0a <UISamplerBPButtons+0xe>
		OLEDclearLine(SecondLine);
 801dc90:	2001      	movs	r0, #1
		OLEDwriteString(samplePlaying ? "PLAYING" : "STOPPED", 7, 48, SecondLine);
 801dc92:	4d0d      	ldr	r5, [pc, #52]	; (801dcc8 <UISamplerBPButtons+0xcc>)
		OLEDclearLine(SecondLine);
 801dc94:	f7f6 fa38 	bl	8014108 <OLEDclearLine>
		OLEDwriteFloat(sampleLength, 0, SecondLine);
 801dc98:	4b0c      	ldr	r3, [pc, #48]	; (801dccc <UISamplerBPButtons+0xd0>)
 801dc9a:	2101      	movs	r1, #1
 801dc9c:	2000      	movs	r0, #0
 801dc9e:	ed93 0a00 	vldr	s0, [r3]
 801dca2:	f7f6 fb03 	bl	80142ac <OLEDwriteFloat>
		OLEDwriteString(samplePlaying ? "PLAYING" : "STOPPED", 7, 48, SecondLine);
 801dca6:	4a0a      	ldr	r2, [pc, #40]	; (801dcd0 <UISamplerBPButtons+0xd4>)
 801dca8:	480a      	ldr	r0, [pc, #40]	; (801dcd4 <UISamplerBPButtons+0xd8>)
 801dcaa:	2301      	movs	r3, #1
 801dcac:	7816      	ldrb	r6, [r2, #0]
 801dcae:	2107      	movs	r1, #7
 801dcb0:	2230      	movs	r2, #48	; 0x30
 801dcb2:	2e00      	cmp	r6, #0
 801dcb4:	bf08      	it	eq
 801dcb6:	4628      	moveq	r0, r5
 801dcb8:	f7f6 fa3a 	bl	8014130 <OLEDwriteString>
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801dcbc:	2300      	movs	r3, #0
 801dcbe:	7723      	strb	r3, [r4, #28]
 801dcc0:	e7a1      	b.n	801dc06 <UISamplerBPButtons+0xa>
 801dcc2:	bf00      	nop
 801dcc4:	20018854 	.word	0x20018854
 801dcc8:	0802c324 	.word	0x0802c324
 801dccc:	200005fc 	.word	0x200005fc
 801dcd0:	200002a4 	.word	0x200002a4
 801dcd4:	0802c31c 	.word	0x0802c31c
 801dcd8:	0802c348 	.word	0x0802c348
 801dcdc:	0802c34c 	.word	0x0802c34c
 801dce0:	0802c33c 	.word	0x0802c33c
 801dce4:	20000524 	.word	0x20000524
 801dce8:	0802c32c 	.word	0x0802c32c

0801dcec <UISamplerKButtons>:

char* UISamplerKButtons(VocodecButton button, ButtonAction action)
{
 801dcec:	b510      	push	{r4, lr}
	char* writeString = "";


	if (buttonActionsUI[ExtraMessage][ActionHoldContinuous] || buttonActionsUI[ButtonA][ActionPress])
 801dcee:	4c1d      	ldr	r4, [pc, #116]	; (801dd64 <UISamplerKButtons+0x78>)
 801dcf0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
{
 801dcf4:	ed2d 8b02 	vpush	{d8}
	if (buttonActionsUI[ExtraMessage][ActionHoldContinuous] || buttonActionsUI[ButtonA][ActionPress])
 801dcf8:	b97b      	cbnz	r3, 801dd1a <UISamplerKButtons+0x2e>
 801dcfa:	7d23      	ldrb	r3, [r4, #20]
 801dcfc:	b96b      	cbnz	r3, 801dd1a <UISamplerKButtons+0x2e>
		OLEDwriteFloat(sampleLength, OLEDgetCursor(), SecondLine);
		buttonActionsUI[ExtraMessage][ActionHoldContinuous] = 0;
		buttonActionsUI[ButtonA][ActionPress] = 0;
	}

	if (buttonActionsUI[ButtonB][ActionPress])
 801dcfe:	7e23      	ldrb	r3, [r4, #24]
 801dd00:	b363      	cbz	r3, 801dd5c <UISamplerKButtons+0x70>
	{
		writeString = controlAllKeys ? "MOD ALL" : "MOD SINGLE";
 801dd02:	4b19      	ldr	r3, [pc, #100]	; (801dd68 <UISamplerKButtons+0x7c>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801dd04:	2100      	movs	r1, #0
		writeString = controlAllKeys ? "MOD ALL" : "MOD SINGLE";
 801dd06:	4819      	ldr	r0, [pc, #100]	; (801dd6c <UISamplerKButtons+0x80>)
 801dd08:	681a      	ldr	r2, [r3, #0]
 801dd0a:	4b19      	ldr	r3, [pc, #100]	; (801dd70 <UISamplerKButtons+0x84>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801dd0c:	7621      	strb	r1, [r4, #24]
		writeString = controlAllKeys ? "MOD ALL" : "MOD SINGLE";
 801dd0e:	428a      	cmp	r2, r1
 801dd10:	bf08      	it	eq
 801dd12:	4618      	moveq	r0, r3
	}
	return writeString;
}
 801dd14:	ecbd 8b02 	vpop	{d8}
 801dd18:	bd10      	pop	{r4, pc}
		OLEDclearLine(SecondLine);
 801dd1a:	2001      	movs	r0, #1
 801dd1c:	f7f6 f9f4 	bl	8014108 <OLEDclearLine>
		OLEDwritePitch(currentSamplerKeyGlobal + LOWEST_SAMPLER_KEY, 0, SecondLine, false);
 801dd20:	4b14      	ldr	r3, [pc, #80]	; (801dd74 <UISamplerKButtons+0x88>)
 801dd22:	2200      	movs	r2, #0
 801dd24:	2101      	movs	r1, #1
 801dd26:	681b      	ldr	r3, [r3, #0]
 801dd28:	4610      	mov	r0, r2
 801dd2a:	3324      	adds	r3, #36	; 0x24
 801dd2c:	ee00 3a10 	vmov	s0, r3
 801dd30:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801dd34:	f7f6 fa58 	bl	80141e8 <OLEDwritePitch>
		OLEDwriteFloat(sampleLength, OLEDgetCursor(), SecondLine);
 801dd38:	4b0f      	ldr	r3, [pc, #60]	; (801dd78 <UISamplerKButtons+0x8c>)
 801dd3a:	ed93 8a00 	vldr	s16, [r3]
 801dd3e:	f7f6 fc73 	bl	8014628 <OLEDgetCursor>
 801dd42:	2101      	movs	r1, #1
 801dd44:	b2c0      	uxtb	r0, r0
 801dd46:	eeb0 0a48 	vmov.f32	s0, s16
 801dd4a:	f7f6 faaf 	bl	80142ac <OLEDwriteFloat>
		buttonActionsUI[ExtraMessage][ActionHoldContinuous] = 0;
 801dd4e:	2300      	movs	r3, #0
 801dd50:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801dd54:	7523      	strb	r3, [r4, #20]
	if (buttonActionsUI[ButtonB][ActionPress])
 801dd56:	7e23      	ldrb	r3, [r4, #24]
 801dd58:	2b00      	cmp	r3, #0
 801dd5a:	d1d2      	bne.n	801dd02 <UISamplerKButtons+0x16>
	char* writeString = "";
 801dd5c:	4807      	ldr	r0, [pc, #28]	; (801dd7c <UISamplerKButtons+0x90>)
}
 801dd5e:	ecbd 8b02 	vpop	{d8}
 801dd62:	bd10      	pop	{r4, pc}
 801dd64:	20018854 	.word	0x20018854
 801dd68:	20000560 	.word	0x20000560
 801dd6c:	0802c358 	.word	0x0802c358
 801dd70:	0802c360 	.word	0x0802c360
 801dd74:	20000220 	.word	0x20000220
 801dd78:	200005fc 	.word	0x200005fc
 801dd7c:	0802c348 	.word	0x0802c348

0801dd80 <UISamplerAutoButtons>:

char* UISamplerAutoButtons(VocodecButton button, ButtonAction action)
{
	char* writeString = "";
	if (buttonActionsUI[ButtonA][ActionPress])
 801dd80:	4b15      	ldr	r3, [pc, #84]	; (801ddd8 <UISamplerAutoButtons+0x58>)
{
 801dd82:	b410      	push	{r4}
	if (buttonActionsUI[ButtonA][ActionPress])
 801dd84:	7d1a      	ldrb	r2, [r3, #20]
 801dd86:	b15a      	cbz	r2, 801dda0 <UISamplerAutoButtons+0x20>
	{
		if (samplerMode == PlayLoop)
 801dd88:	4a14      	ldr	r2, [pc, #80]	; (801dddc <UISamplerAutoButtons+0x5c>)
 801dd8a:	7812      	ldrb	r2, [r2, #0]
 801dd8c:	2a01      	cmp	r2, #1
 801dd8e:	d021      	beq.n	801ddd4 <UISamplerAutoButtons+0x54>
		{
			writeString = "LOOP";
		}
		else if (samplerMode == PlayBackAndForth)
		{
			writeString = "BACK'N'FORTH";
 801dd90:	4813      	ldr	r0, [pc, #76]	; (801dde0 <UISamplerAutoButtons+0x60>)
 801dd92:	4914      	ldr	r1, [pc, #80]	; (801dde4 <UISamplerAutoButtons+0x64>)
 801dd94:	2a02      	cmp	r2, #2
 801dd96:	bf08      	it	eq
 801dd98:	4608      	moveq	r0, r1
		}
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801dd9a:	2200      	movs	r2, #0
 801dd9c:	751a      	strb	r2, [r3, #20]
 801dd9e:	e000      	b.n	801dda2 <UISamplerAutoButtons+0x22>
	char* writeString = "";
 801dda0:	480f      	ldr	r0, [pc, #60]	; (801dde0 <UISamplerAutoButtons+0x60>)
	}
	if (buttonActionsUI[ButtonB][ActionPress])
 801dda2:	7e1a      	ldrb	r2, [r3, #24]
 801dda4:	b142      	cbz	r2, 801ddb8 <UISamplerAutoButtons+0x38>
	{
		writeString = triggerChannel ? "CH2 TRIG" : "CH1 TRIG";
 801dda6:	4a10      	ldr	r2, [pc, #64]	; (801dde8 <UISamplerAutoButtons+0x68>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801dda8:	2400      	movs	r4, #0
		writeString = triggerChannel ? "CH2 TRIG" : "CH1 TRIG";
 801ddaa:	4810      	ldr	r0, [pc, #64]	; (801ddec <UISamplerAutoButtons+0x6c>)
 801ddac:	7811      	ldrb	r1, [r2, #0]
 801ddae:	4a10      	ldr	r2, [pc, #64]	; (801ddf0 <UISamplerAutoButtons+0x70>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801ddb0:	761c      	strb	r4, [r3, #24]
		writeString = triggerChannel ? "CH2 TRIG" : "CH1 TRIG";
 801ddb2:	42a1      	cmp	r1, r4
 801ddb4:	bf08      	it	eq
 801ddb6:	4610      	moveq	r0, r2
	}
	if (buttonActionsUI[ButtonC][ActionPress])
 801ddb8:	7f1a      	ldrb	r2, [r3, #28]
 801ddba:	b142      	cbz	r2, 801ddce <UISamplerAutoButtons+0x4e>
	{
		writeString = pitchQuantization ? "QUANT SPEED" : "CONT SPEED";
 801ddbc:	4a0d      	ldr	r2, [pc, #52]	; (801ddf4 <UISamplerAutoButtons+0x74>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801ddbe:	2400      	movs	r4, #0
		writeString = pitchQuantization ? "QUANT SPEED" : "CONT SPEED";
 801ddc0:	480d      	ldr	r0, [pc, #52]	; (801ddf8 <UISamplerAutoButtons+0x78>)
 801ddc2:	6811      	ldr	r1, [r2, #0]
 801ddc4:	4a0d      	ldr	r2, [pc, #52]	; (801ddfc <UISamplerAutoButtons+0x7c>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801ddc6:	771c      	strb	r4, [r3, #28]
		writeString = pitchQuantization ? "QUANT SPEED" : "CONT SPEED";
 801ddc8:	42a1      	cmp	r1, r4
 801ddca:	bf08      	it	eq
 801ddcc:	4610      	moveq	r0, r2
	}
	return writeString;
}
 801ddce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ddd2:	4770      	bx	lr
			writeString = "LOOP";
 801ddd4:	480a      	ldr	r0, [pc, #40]	; (801de00 <UISamplerAutoButtons+0x80>)
 801ddd6:	e7e0      	b.n	801dd9a <UISamplerAutoButtons+0x1a>
 801ddd8:	20018854 	.word	0x20018854
 801dddc:	200002a5 	.word	0x200002a5
 801dde0:	0802c348 	.word	0x0802c348
 801dde4:	0802c2dc 	.word	0x0802c2dc
 801dde8:	2000060d 	.word	0x2000060d
 801ddec:	0802c2ec 	.word	0x0802c2ec
 801ddf0:	0802c2f8 	.word	0x0802c2f8
 801ddf4:	200005dc 	.word	0x200005dc
 801ddf8:	0802c304 	.word	0x0802c304
 801ddfc:	0802c310 	.word	0x0802c310
 801de00:	0802c2d4 	.word	0x0802c2d4

0801de04 <UIDistortionButtons>:

char* UIDistortionButtons(VocodecButton button, ButtonAction action)
{
	char* writeString = "";
	if (buttonActionsUI[ButtonA][ActionPress])
 801de04:	4b08      	ldr	r3, [pc, #32]	; (801de28 <UIDistortionButtons+0x24>)
 801de06:	7d1a      	ldrb	r2, [r3, #20]
 801de08:	b162      	cbz	r2, 801de24 <UIDistortionButtons+0x20>
	{
		writeString = distortionMode ? "SHAPER" : "TANH";
 801de0a:	4a08      	ldr	r2, [pc, #32]	; (801de2c <UIDistortionButtons+0x28>)
 801de0c:	4808      	ldr	r0, [pc, #32]	; (801de30 <UIDistortionButtons+0x2c>)
{
 801de0e:	b410      	push	{r4}
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801de10:	2400      	movs	r4, #0
		writeString = distortionMode ? "SHAPER" : "TANH";
 801de12:	7811      	ldrb	r1, [r2, #0]
 801de14:	4a07      	ldr	r2, [pc, #28]	; (801de34 <UIDistortionButtons+0x30>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801de16:	751c      	strb	r4, [r3, #20]
		writeString = distortionMode ? "SHAPER" : "TANH";
 801de18:	42a1      	cmp	r1, r4
 801de1a:	bf08      	it	eq
 801de1c:	4610      	moveq	r0, r2
	}
	return writeString;
}
 801de1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801de22:	4770      	bx	lr
	char* writeString = "";
 801de24:	4804      	ldr	r0, [pc, #16]	; (801de38 <UIDistortionButtons+0x34>)
}
 801de26:	4770      	bx	lr
 801de28:	20018854 	.word	0x20018854
 801de2c:	2000057c 	.word	0x2000057c
 801de30:	0802c200 	.word	0x0802c200
 801de34:	0802c208 	.word	0x0802c208
 801de38:	0802c348 	.word	0x0802c348

0801de3c <UIWaveFolderButtons>:

char* UIWaveFolderButtons(VocodecButton button, ButtonAction action)
{
	char* writeString = "";
	if (buttonActionsUI[ButtonA][ActionPress])
 801de3c:	4b08      	ldr	r3, [pc, #32]	; (801de60 <UIWaveFolderButtons+0x24>)
 801de3e:	7d1a      	ldrb	r2, [r3, #20]
 801de40:	b162      	cbz	r2, 801de5c <UIWaveFolderButtons+0x20>
	{
		writeString = foldMode ? "TWO IN SERIES" : "OVERSAMPLED";
 801de42:	4a08      	ldr	r2, [pc, #32]	; (801de64 <UIWaveFolderButtons+0x28>)
 801de44:	4808      	ldr	r0, [pc, #32]	; (801de68 <UIWaveFolderButtons+0x2c>)
{
 801de46:	b410      	push	{r4}
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801de48:	2400      	movs	r4, #0
		writeString = foldMode ? "TWO IN SERIES" : "OVERSAMPLED";
 801de4a:	6811      	ldr	r1, [r2, #0]
 801de4c:	4a07      	ldr	r2, [pc, #28]	; (801de6c <UIWaveFolderButtons+0x30>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801de4e:	751c      	strb	r4, [r3, #20]
		writeString = foldMode ? "TWO IN SERIES" : "OVERSAMPLED";
 801de50:	42a1      	cmp	r1, r4
 801de52:	bf08      	it	eq
 801de54:	4610      	moveq	r0, r2
	}
	return writeString;
}
 801de56:	f85d 4b04 	ldr.w	r4, [sp], #4
 801de5a:	4770      	bx	lr
	char* writeString = "";
 801de5c:	4804      	ldr	r0, [pc, #16]	; (801de70 <UIWaveFolderButtons+0x34>)
}
 801de5e:	4770      	bx	lr
 801de60:	20018854 	.word	0x20018854
 801de64:	2000058c 	.word	0x2000058c
 801de68:	0802c3a8 	.word	0x0802c3a8
 801de6c:	0802c3b8 	.word	0x0802c3b8
 801de70:	0802c348 	.word	0x0802c348

0801de74 <UIBitcrusherButtons>:

char* UIBitcrusherButtons(VocodecButton button, ButtonAction action)
{
	char* writeString = "";

	if (buttonActionsUI[ButtonA][ActionPress])
 801de74:	4b08      	ldr	r3, [pc, #32]	; (801de98 <UIBitcrusherButtons+0x24>)
 801de76:	7d1a      	ldrb	r2, [r3, #20]
 801de78:	b162      	cbz	r2, 801de94 <UIBitcrusherButtons+0x20>
	{
		writeString = crusherStereo ? "STEREO" : "MONO";
 801de7a:	4a08      	ldr	r2, [pc, #32]	; (801de9c <UIBitcrusherButtons+0x28>)
 801de7c:	4808      	ldr	r0, [pc, #32]	; (801dea0 <UIBitcrusherButtons+0x2c>)
{
 801de7e:	b410      	push	{r4}
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801de80:	2400      	movs	r4, #0
		writeString = crusherStereo ? "STEREO" : "MONO";
 801de82:	6811      	ldr	r1, [r2, #0]
 801de84:	4a07      	ldr	r2, [pc, #28]	; (801dea4 <UIBitcrusherButtons+0x30>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801de86:	751c      	strb	r4, [r3, #20]
		writeString = crusherStereo ? "STEREO" : "MONO";
 801de88:	42a1      	cmp	r1, r4
 801de8a:	bf08      	it	eq
 801de8c:	4610      	moveq	r0, r2
	}


	return writeString;
}
 801de8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801de92:	4770      	bx	lr
	char* writeString = "";
 801de94:	4804      	ldr	r0, [pc, #16]	; (801dea8 <UIBitcrusherButtons+0x34>)
}
 801de96:	4770      	bx	lr
 801de98:	20018854 	.word	0x20018854
 801de9c:	20000568 	.word	0x20000568
 801dea0:	0802c478 	.word	0x0802c478
 801dea4:	0802c374 	.word	0x0802c374
 801dea8:	0802c348 	.word	0x0802c348

0801deac <UIDelayButtons>:

char* UIDelayButtons(VocodecButton button, ButtonAction action)
{
	char* writeString = "";
	if (buttonActionsUI[ButtonA][ActionPress])
 801deac:	4b0e      	ldr	r3, [pc, #56]	; (801dee8 <UIDelayButtons+0x3c>)
{
 801deae:	b410      	push	{r4}
	if (buttonActionsUI[ButtonA][ActionPress])
 801deb0:	7d1a      	ldrb	r2, [r3, #20]
 801deb2:	b1b2      	cbz	r2, 801dee2 <UIDelayButtons+0x36>
	{
		writeString = delayShaper ? "SHAPER ON" : "SHAPER OFF";
 801deb4:	4a0d      	ldr	r2, [pc, #52]	; (801deec <UIDelayButtons+0x40>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801deb6:	2400      	movs	r4, #0
		writeString = delayShaper ? "SHAPER ON" : "SHAPER OFF";
 801deb8:	480d      	ldr	r0, [pc, #52]	; (801def0 <UIDelayButtons+0x44>)
 801deba:	6811      	ldr	r1, [r2, #0]
 801debc:	4a0d      	ldr	r2, [pc, #52]	; (801def4 <UIDelayButtons+0x48>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801debe:	751c      	strb	r4, [r3, #20]
		writeString = delayShaper ? "SHAPER ON" : "SHAPER OFF";
 801dec0:	42a1      	cmp	r1, r4
 801dec2:	bf08      	it	eq
 801dec4:	4610      	moveq	r0, r2
	}
	if (buttonActionsUI[ButtonB][ActionPress])
 801dec6:	7e1a      	ldrb	r2, [r3, #24]
 801dec8:	b142      	cbz	r2, 801dedc <UIDelayButtons+0x30>
	{
		writeString = capFeedback ? "FB CAP" : "FB UNCAP";
 801deca:	4a0b      	ldr	r2, [pc, #44]	; (801def8 <UIDelayButtons+0x4c>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801decc:	2400      	movs	r4, #0
		writeString = capFeedback ? "FB CAP" : "FB UNCAP";
 801dece:	480b      	ldr	r0, [pc, #44]	; (801defc <UIDelayButtons+0x50>)
 801ded0:	7811      	ldrb	r1, [r2, #0]
 801ded2:	4a0b      	ldr	r2, [pc, #44]	; (801df00 <UIDelayButtons+0x54>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801ded4:	761c      	strb	r4, [r3, #24]
		writeString = capFeedback ? "FB CAP" : "FB UNCAP";
 801ded6:	42a1      	cmp	r1, r4
 801ded8:	bf08      	it	eq
 801deda:	4610      	moveq	r0, r2
	}
	return writeString;
}
 801dedc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dee0:	4770      	bx	lr
	char* writeString = "";
 801dee2:	4808      	ldr	r0, [pc, #32]	; (801df04 <UIDelayButtons+0x58>)
 801dee4:	e7ef      	b.n	801dec6 <UIDelayButtons+0x1a>
 801dee6:	bf00      	nop
 801dee8:	20018854 	.word	0x20018854
 801deec:	20000578 	.word	0x20000578
 801def0:	0802c1d4 	.word	0x0802c1d4
 801def4:	0802c1e0 	.word	0x0802c1e0
 801def8:	20000528 	.word	0x20000528
 801defc:	0802c1ec 	.word	0x0802c1ec
 801df00:	0802c1f4 	.word	0x0802c1f4
 801df04:	0802c348 	.word	0x0802c348

0801df08 <UIReverbButtons>:

char* UIReverbButtons(VocodecButton button, ButtonAction action)
{
	char* writeString = "";
	if (buttonActionsUI[ButtonC][ActionPress])
 801df08:	4b0e      	ldr	r3, [pc, #56]	; (801df44 <UIReverbButtons+0x3c>)
{
 801df0a:	b410      	push	{r4}
	if (buttonActionsUI[ButtonC][ActionPress])
 801df0c:	7f1a      	ldrb	r2, [r3, #28]
 801df0e:	b1b2      	cbz	r2, 801df3e <UIReverbButtons+0x36>
	{
		writeString = freeze ? "FREEZE" : "UNFREEZE";
 801df10:	4a0d      	ldr	r2, [pc, #52]	; (801df48 <UIReverbButtons+0x40>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801df12:	2400      	movs	r4, #0
		writeString = freeze ? "FREEZE" : "UNFREEZE";
 801df14:	480d      	ldr	r0, [pc, #52]	; (801df4c <UIReverbButtons+0x44>)
 801df16:	6811      	ldr	r1, [r2, #0]
 801df18:	4a0d      	ldr	r2, [pc, #52]	; (801df50 <UIReverbButtons+0x48>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801df1a:	771c      	strb	r4, [r3, #28]
		writeString = freeze ? "FREEZE" : "UNFREEZE";
 801df1c:	42a1      	cmp	r1, r4
 801df1e:	bf08      	it	eq
 801df20:	4610      	moveq	r0, r2
	}
	if (buttonActionsUI[ButtonB][ActionPress])
 801df22:	7e1a      	ldrb	r2, [r3, #24]
 801df24:	b142      	cbz	r2, 801df38 <UIReverbButtons+0x30>
	{
		writeString = capFeedback ? "FB CAP" : "FB UNCAP";
 801df26:	4a0b      	ldr	r2, [pc, #44]	; (801df54 <UIReverbButtons+0x4c>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801df28:	2400      	movs	r4, #0
		writeString = capFeedback ? "FB CAP" : "FB UNCAP";
 801df2a:	480b      	ldr	r0, [pc, #44]	; (801df58 <UIReverbButtons+0x50>)
 801df2c:	7811      	ldrb	r1, [r2, #0]
 801df2e:	4a0b      	ldr	r2, [pc, #44]	; (801df5c <UIReverbButtons+0x54>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801df30:	761c      	strb	r4, [r3, #24]
		writeString = capFeedback ? "FB CAP" : "FB UNCAP";
 801df32:	42a1      	cmp	r1, r4
 801df34:	bf08      	it	eq
 801df36:	4610      	moveq	r0, r2
	}
	return writeString;
}
 801df38:	f85d 4b04 	ldr.w	r4, [sp], #4
 801df3c:	4770      	bx	lr
	char* writeString = "";
 801df3e:	4808      	ldr	r0, [pc, #32]	; (801df60 <UIReverbButtons+0x58>)
 801df40:	e7ef      	b.n	801df22 <UIReverbButtons+0x1a>
 801df42:	bf00      	nop
 801df44:	20018854 	.word	0x20018854
 801df48:	20000590 	.word	0x20000590
 801df4c:	0802c2b0 	.word	0x0802c2b0
 801df50:	0802c2b8 	.word	0x0802c2b8
 801df54:	20000528 	.word	0x20000528
 801df58:	0802c1ec 	.word	0x0802c1ec
 801df5c:	0802c1f4 	.word	0x0802c1f4
 801df60:	0802c348 	.word	0x0802c348

0801df64 <UIReverb2Buttons>:

char* UIReverb2Buttons(VocodecButton button, ButtonAction action)
{
	char* writeString = "";
	if (buttonActionsUI[ButtonC][ActionPress])
 801df64:	4b08      	ldr	r3, [pc, #32]	; (801df88 <UIReverb2Buttons+0x24>)
 801df66:	7f1a      	ldrb	r2, [r3, #28]
 801df68:	b162      	cbz	r2, 801df84 <UIReverb2Buttons+0x20>
	{
		writeString = freeze ? "FREEZE" : "UNFREEZE";
 801df6a:	4a08      	ldr	r2, [pc, #32]	; (801df8c <UIReverb2Buttons+0x28>)
 801df6c:	4808      	ldr	r0, [pc, #32]	; (801df90 <UIReverb2Buttons+0x2c>)
{
 801df6e:	b410      	push	{r4}
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801df70:	2400      	movs	r4, #0
		writeString = freeze ? "FREEZE" : "UNFREEZE";
 801df72:	6811      	ldr	r1, [r2, #0]
 801df74:	4a07      	ldr	r2, [pc, #28]	; (801df94 <UIReverb2Buttons+0x30>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801df76:	771c      	strb	r4, [r3, #28]
		writeString = freeze ? "FREEZE" : "UNFREEZE";
 801df78:	42a1      	cmp	r1, r4
 801df7a:	bf08      	it	eq
 801df7c:	4610      	moveq	r0, r2
	}
	return writeString;
}
 801df7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801df82:	4770      	bx	lr
	char* writeString = "";
 801df84:	4804      	ldr	r0, [pc, #16]	; (801df98 <UIReverb2Buttons+0x34>)
}
 801df86:	4770      	bx	lr
 801df88:	20018854 	.word	0x20018854
 801df8c:	20000590 	.word	0x20000590
 801df90:	0802c2b0 	.word	0x0802c2b0
 801df94:	0802c2b8 	.word	0x0802c2b8
 801df98:	0802c348 	.word	0x0802c348

0801df9c <UILivingStringButtons>:

char* UILivingStringButtons(VocodecButton button, ButtonAction action)
{
	char* writeString = "";
	if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801df9c:	4b15      	ldr	r3, [pc, #84]	; (801dff4 <UILivingStringButtons+0x58>)
{
 801df9e:	b410      	push	{r4}
	if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801dfa0:	7d1a      	ldrb	r2, [r3, #20]
 801dfa2:	2a01      	cmp	r2, #1
 801dfa4:	d01b      	beq.n	801dfde <UILivingStringButtons+0x42>
	char* writeString = "";
 801dfa6:	4814      	ldr	r0, [pc, #80]	; (801dff8 <UILivingStringButtons+0x5c>)
	{
		writeString = (ignoreFreqKnobs > 0) ? "MIDI PITCH" : "KNOB PITCH";
		buttonActionsUI[ButtonA][ActionPress] = 0;
	}
	if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801dfa8:	7f1a      	ldrb	r2, [r3, #28]
 801dfaa:	2a01      	cmp	r2, #1
 801dfac:	d108      	bne.n	801dfc0 <UILivingStringButtons+0x24>
	{
		writeString = (levMode > 0) ? "FB MODE" : "DECAY MODE";
 801dfae:	4a13      	ldr	r2, [pc, #76]	; (801dffc <UILivingStringButtons+0x60>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801dfb0:	2400      	movs	r4, #0
		writeString = (levMode > 0) ? "FB MODE" : "DECAY MODE";
 801dfb2:	4813      	ldr	r0, [pc, #76]	; (801e000 <UILivingStringButtons+0x64>)
 801dfb4:	6811      	ldr	r1, [r2, #0]
 801dfb6:	4a13      	ldr	r2, [pc, #76]	; (801e004 <UILivingStringButtons+0x68>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801dfb8:	771c      	strb	r4, [r3, #28]
		writeString = (levMode > 0) ? "FB MODE" : "DECAY MODE";
 801dfba:	42a1      	cmp	r1, r4
 801dfbc:	bfd8      	it	le
 801dfbe:	4610      	movle	r0, r2
	}

	if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801dfc0:	7e1a      	ldrb	r2, [r3, #24]
 801dfc2:	2a01      	cmp	r2, #1
 801dfc4:	d108      	bne.n	801dfd8 <UILivingStringButtons+0x3c>
	{
		writeString = (independentStrings > 0) ? "INDIV CONTROL" : "KNOB1=>ALL";
 801dfc6:	4a10      	ldr	r2, [pc, #64]	; (801e008 <UILivingStringButtons+0x6c>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801dfc8:	2400      	movs	r4, #0
		writeString = (independentStrings > 0) ? "INDIV CONTROL" : "KNOB1=>ALL";
 801dfca:	4810      	ldr	r0, [pc, #64]	; (801e00c <UILivingStringButtons+0x70>)
 801dfcc:	6811      	ldr	r1, [r2, #0]
 801dfce:	4a10      	ldr	r2, [pc, #64]	; (801e010 <UILivingStringButtons+0x74>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801dfd0:	761c      	strb	r4, [r3, #24]
		writeString = (independentStrings > 0) ? "INDIV CONTROL" : "KNOB1=>ALL";
 801dfd2:	42a1      	cmp	r1, r4
 801dfd4:	bfd8      	it	le
 801dfd6:	4610      	movle	r0, r2
	}

	return writeString;
}
 801dfd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfdc:	4770      	bx	lr
		writeString = (ignoreFreqKnobs > 0) ? "MIDI PITCH" : "KNOB PITCH";
 801dfde:	4a0d      	ldr	r2, [pc, #52]	; (801e014 <UILivingStringButtons+0x78>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801dfe0:	2400      	movs	r4, #0
		writeString = (ignoreFreqKnobs > 0) ? "MIDI PITCH" : "KNOB PITCH";
 801dfe2:	480d      	ldr	r0, [pc, #52]	; (801e018 <UILivingStringButtons+0x7c>)
 801dfe4:	6811      	ldr	r1, [r2, #0]
 801dfe6:	4a0d      	ldr	r2, [pc, #52]	; (801e01c <UILivingStringButtons+0x80>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801dfe8:	751c      	strb	r4, [r3, #20]
		writeString = (ignoreFreqKnobs > 0) ? "MIDI PITCH" : "KNOB PITCH";
 801dfea:	42a1      	cmp	r1, r4
 801dfec:	bfd8      	it	le
 801dfee:	4610      	movle	r0, r2
 801dff0:	e7da      	b.n	801dfa8 <UILivingStringButtons+0xc>
 801dff2:	bf00      	nop
 801dff4:	20018854 	.word	0x20018854
 801dff8:	0802c348 	.word	0x0802c348
 801dffc:	200005a0 	.word	0x200005a0
 801e000:	0802c228 	.word	0x0802c228
 801e004:	0802c230 	.word	0x0802c230
 801e008:	20000598 	.word	0x20000598
 801e00c:	0802c23c 	.word	0x0802c23c
 801e010:	0802c24c 	.word	0x0802c24c
 801e014:	20000594 	.word	0x20000594
 801e018:	0802c210 	.word	0x0802c210
 801e01c:	0802c21c 	.word	0x0802c21c

0801e020 <UILivingStringSynthButtons>:

char* UILivingStringSynthButtons(VocodecButton button, ButtonAction action)
{
	char* writeString = "";
	if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801e020:	4b15      	ldr	r3, [pc, #84]	; (801e078 <UILivingStringSynthButtons+0x58>)
{
 801e022:	b410      	push	{r4}
	if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801e024:	7d1a      	ldrb	r2, [r3, #20]
 801e026:	2a01      	cmp	r2, #1
 801e028:	d01b      	beq.n	801e062 <UILivingStringSynthButtons+0x42>
	char* writeString = "";
 801e02a:	4814      	ldr	r0, [pc, #80]	; (801e07c <UILivingStringSynthButtons+0x5c>)
	{
		writeString = (numVoices > 1) ? "POLY" : "MONO";
		buttonActionsUI[ButtonA][ActionPress] = 0;
	}
	if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801e02c:	7e1a      	ldrb	r2, [r3, #24]
 801e02e:	2a01      	cmp	r2, #1
 801e030:	d108      	bne.n	801e044 <UILivingStringSynthButtons+0x24>
	{
		writeString = (voicePluck > 0) ? "AUDIO IN" : "NO AUDIO IN";
 801e032:	4a13      	ldr	r2, [pc, #76]	; (801e080 <UILivingStringSynthButtons+0x60>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801e034:	2400      	movs	r4, #0
		writeString = (voicePluck > 0) ? "AUDIO IN" : "NO AUDIO IN";
 801e036:	4813      	ldr	r0, [pc, #76]	; (801e084 <UILivingStringSynthButtons+0x64>)
 801e038:	6811      	ldr	r1, [r2, #0]
 801e03a:	4a13      	ldr	r2, [pc, #76]	; (801e088 <UILivingStringSynthButtons+0x68>)
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801e03c:	761c      	strb	r4, [r3, #24]
		writeString = (voicePluck > 0) ? "AUDIO IN" : "NO AUDIO IN";
 801e03e:	42a1      	cmp	r1, r4
 801e040:	bfd8      	it	le
 801e042:	4610      	movle	r0, r2
	}
	if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801e044:	7f1a      	ldrb	r2, [r3, #28]
 801e046:	2a01      	cmp	r2, #1
 801e048:	d108      	bne.n	801e05c <UILivingStringSynthButtons+0x3c>
	{
		writeString = (levModeStr > 0) ? "FB MODE" : "DECAY MODE";
 801e04a:	4a10      	ldr	r2, [pc, #64]	; (801e08c <UILivingStringSynthButtons+0x6c>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801e04c:	2400      	movs	r4, #0
		writeString = (levModeStr > 0) ? "FB MODE" : "DECAY MODE";
 801e04e:	4810      	ldr	r0, [pc, #64]	; (801e090 <UILivingStringSynthButtons+0x70>)
 801e050:	6811      	ldr	r1, [r2, #0]
 801e052:	4a10      	ldr	r2, [pc, #64]	; (801e094 <UILivingStringSynthButtons+0x74>)
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801e054:	771c      	strb	r4, [r3, #28]
		writeString = (levModeStr > 0) ? "FB MODE" : "DECAY MODE";
 801e056:	42a1      	cmp	r1, r4
 801e058:	bfd8      	it	le
 801e05a:	4610      	movle	r0, r2
	}
	return writeString;
}
 801e05c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e060:	4770      	bx	lr
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801e062:	4a0d      	ldr	r2, [pc, #52]	; (801e098 <UILivingStringSynthButtons+0x78>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801e064:	2400      	movs	r4, #0
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801e066:	480d      	ldr	r0, [pc, #52]	; (801e09c <UILivingStringSynthButtons+0x7c>)
 801e068:	7811      	ldrb	r1, [r2, #0]
 801e06a:	4a0d      	ldr	r2, [pc, #52]	; (801e0a0 <UILivingStringSynthButtons+0x80>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801e06c:	751c      	strb	r4, [r3, #20]
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801e06e:	2901      	cmp	r1, #1
 801e070:	bf98      	it	ls
 801e072:	4610      	movls	r0, r2
 801e074:	e7da      	b.n	801e02c <UILivingStringSynthButtons+0xc>
 801e076:	bf00      	nop
 801e078:	20018854 	.word	0x20018854
 801e07c:	0802c348 	.word	0x0802c348
 801e080:	20000618 	.word	0x20000618
 801e084:	0802c258 	.word	0x0802c258
 801e088:	0802c264 	.word	0x0802c264
 801e08c:	200005a4 	.word	0x200005a4
 801e090:	0802c228 	.word	0x0802c228
 801e094:	0802c230 	.word	0x0802c230
 801e098:	20000250 	.word	0x20000250
 801e09c:	0802c36c 	.word	0x0802c36c
 801e0a0:	0802c374 	.word	0x0802c374

0801e0a4 <UIClassicSynthButtons>:

char* UIClassicSynthButtons(VocodecButton button, ButtonAction action)
{
	char* writeString = "";
	if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801e0a4:	4b0d      	ldr	r3, [pc, #52]	; (801e0dc <UIClassicSynthButtons+0x38>)
 801e0a6:	7d1a      	ldrb	r2, [r3, #20]
 801e0a8:	2a01      	cmp	r2, #1
 801e0aa:	d006      	beq.n	801e0ba <UIClassicSynthButtons+0x16>
	{
		writeString = (numVoices > 1) ? "POLY" : "MONO";
		buttonActionsUI[ButtonA][ActionPress] = 0;
	}
	if (buttonActionsUI[ButtonB][ActionPress])
 801e0ac:	7e1a      	ldrb	r2, [r3, #24]
	char* writeString = "";
 801e0ae:	480c      	ldr	r0, [pc, #48]	; (801e0e0 <UIClassicSynthButtons+0x3c>)
	if (buttonActionsUI[ButtonB][ActionPress])
 801e0b0:	b112      	cbz	r2, 801e0b8 <UIClassicSynthButtons+0x14>
	{
		//writeString = knobPage == 0 ? "SETTINGS" : "ADSR";
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801e0b2:	2200      	movs	r2, #0
 801e0b4:	761a      	strb	r2, [r3, #24]
 801e0b6:	4770      	bx	lr
	}
	return writeString;
}
 801e0b8:	4770      	bx	lr
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801e0ba:	4a0a      	ldr	r2, [pc, #40]	; (801e0e4 <UIClassicSynthButtons+0x40>)
 801e0bc:	480a      	ldr	r0, [pc, #40]	; (801e0e8 <UIClassicSynthButtons+0x44>)
{
 801e0be:	b410      	push	{r4}
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801e0c0:	7811      	ldrb	r1, [r2, #0]
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801e0c2:	2400      	movs	r4, #0
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801e0c4:	4a09      	ldr	r2, [pc, #36]	; (801e0ec <UIClassicSynthButtons+0x48>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801e0c6:	751c      	strb	r4, [r3, #20]
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801e0c8:	2901      	cmp	r1, #1
 801e0ca:	bf98      	it	ls
 801e0cc:	4610      	movls	r0, r2
	if (buttonActionsUI[ButtonB][ActionPress])
 801e0ce:	7e1a      	ldrb	r2, [r3, #24]
 801e0d0:	b10a      	cbz	r2, 801e0d6 <UIClassicSynthButtons+0x32>
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801e0d2:	2200      	movs	r2, #0
 801e0d4:	761a      	strb	r2, [r3, #24]
}
 801e0d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e0da:	4770      	bx	lr
 801e0dc:	20018854 	.word	0x20018854
 801e0e0:	0802c348 	.word	0x0802c348
 801e0e4:	20000250 	.word	0x20000250
 801e0e8:	0802c36c 	.word	0x0802c36c
 801e0ec:	0802c374 	.word	0x0802c374

0801e0f0 <UIRhodesButtons>:

char* UIRhodesButtons(VocodecButton button, ButtonAction action)
{
 801e0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char* writeString = "";
	if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801e0f2:	4c1f      	ldr	r4, [pc, #124]	; (801e170 <UIRhodesButtons+0x80>)
 801e0f4:	7d23      	ldrb	r3, [r4, #20]
 801e0f6:	2b01      	cmp	r3, #1
 801e0f8:	d008      	beq.n	801e10c <UIRhodesButtons+0x1c>
	{
		writeString = (numVoices > 1) ? "POLY" : "MONO";
		buttonActionsUI[ButtonA][ActionPress] = 0;
	}
	if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801e0fa:	7e25      	ldrb	r5, [r4, #24]
	char* writeString = "";
 801e0fc:	4e1d      	ldr	r6, [pc, #116]	; (801e174 <UIRhodesButtons+0x84>)
	if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801e0fe:	2d01      	cmp	r5, #1
 801e100:	d010      	beq.n	801e124 <UIRhodesButtons+0x34>
	{
		buttonActionsUI[ButtonB][ActionPress] = 0;
		OLEDclearLine(SecondLine);
		OLEDwriteString(soundNames[Rsound], 6, 0, SecondLine);
	}
	if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801e102:	7f25      	ldrb	r5, [r4, #28]
 801e104:	2d01      	cmp	r5, #1
 801e106:	d01f      	beq.n	801e148 <UIRhodesButtons+0x58>
		OLEDclearLine(SecondLine);
		OLEDwriteString("STEREO TREMO", 12, 0, SecondLine);
		OLEDwriteInt(tremoloStereo, 1, 110, SecondLine);
	}
	return writeString;
}
 801e108:	4630      	mov	r0, r6
 801e10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801e10c:	4b1a      	ldr	r3, [pc, #104]	; (801e178 <UIRhodesButtons+0x88>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801e10e:	2100      	movs	r1, #0
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801e110:	4e1a      	ldr	r6, [pc, #104]	; (801e17c <UIRhodesButtons+0x8c>)
 801e112:	781a      	ldrb	r2, [r3, #0]
	if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801e114:	7e25      	ldrb	r5, [r4, #24]
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801e116:	4b1a      	ldr	r3, [pc, #104]	; (801e180 <UIRhodesButtons+0x90>)
		buttonActionsUI[ButtonA][ActionPress] = 0;
 801e118:	7521      	strb	r1, [r4, #20]
		writeString = (numVoices > 1) ? "POLY" : "MONO";
 801e11a:	2a01      	cmp	r2, #1
 801e11c:	bf98      	it	ls
 801e11e:	461e      	movls	r6, r3
	if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801e120:	2d01      	cmp	r5, #1
 801e122:	d1ee      	bne.n	801e102 <UIRhodesButtons+0x12>
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801e124:	2700      	movs	r7, #0
		OLEDclearLine(SecondLine);
 801e126:	4628      	mov	r0, r5
		buttonActionsUI[ButtonB][ActionPress] = 0;
 801e128:	7627      	strb	r7, [r4, #24]
		OLEDclearLine(SecondLine);
 801e12a:	f7f5 ffed 	bl	8014108 <OLEDclearLine>
		OLEDwriteString(soundNames[Rsound], 6, 0, SecondLine);
 801e12e:	4915      	ldr	r1, [pc, #84]	; (801e184 <UIRhodesButtons+0x94>)
 801e130:	462b      	mov	r3, r5
 801e132:	4815      	ldr	r0, [pc, #84]	; (801e188 <UIRhodesButtons+0x98>)
 801e134:	463a      	mov	r2, r7
 801e136:	680d      	ldr	r5, [r1, #0]
 801e138:	2106      	movs	r1, #6
 801e13a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801e13e:	f7f5 fff7 	bl	8014130 <OLEDwriteString>
	if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801e142:	7f25      	ldrb	r5, [r4, #28]
 801e144:	2d01      	cmp	r5, #1
 801e146:	d1df      	bne.n	801e108 <UIRhodesButtons+0x18>
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801e148:	2700      	movs	r7, #0
		OLEDclearLine(SecondLine);
 801e14a:	4628      	mov	r0, r5
		buttonActionsUI[ButtonC][ActionPress] = 0;
 801e14c:	7727      	strb	r7, [r4, #28]
		OLEDclearLine(SecondLine);
 801e14e:	f7f5 ffdb 	bl	8014108 <OLEDclearLine>
		OLEDwriteString("STEREO TREMO", 12, 0, SecondLine);
 801e152:	462b      	mov	r3, r5
 801e154:	463a      	mov	r2, r7
 801e156:	210c      	movs	r1, #12
 801e158:	480c      	ldr	r0, [pc, #48]	; (801e18c <UIRhodesButtons+0x9c>)
 801e15a:	f7f5 ffe9 	bl	8014130 <OLEDwriteString>
		OLEDwriteInt(tremoloStereo, 1, 110, SecondLine);
 801e15e:	4a0c      	ldr	r2, [pc, #48]	; (801e190 <UIRhodesButtons+0xa0>)
 801e160:	462b      	mov	r3, r5
 801e162:	4629      	mov	r1, r5
 801e164:	7810      	ldrb	r0, [r2, #0]
 801e166:	226e      	movs	r2, #110	; 0x6e
 801e168:	f7f6 f80c 	bl	8014184 <OLEDwriteInt>
}
 801e16c:	4630      	mov	r0, r6
 801e16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e170:	20018854 	.word	0x20018854
 801e174:	0802c348 	.word	0x0802c348
 801e178:	20000250 	.word	0x20000250
 801e17c:	0802c36c 	.word	0x0802c36c
 801e180:	0802c374 	.word	0x0802c374
 801e184:	20000510 	.word	0x20000510
 801e188:	20017520 	.word	0x20017520
 801e18c:	0802c2c4 	.word	0x0802c2c4
 801e190:	2000060c 	.word	0x2000060c

0801e194 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801e194:	2904      	cmp	r1, #4
 801e196:	d00b      	beq.n	801e1b0 <USBH_UserProcess+0x1c>
 801e198:	2905      	cmp	r1, #5
 801e19a:	d005      	beq.n	801e1a8 <USBH_UserProcess+0x14>
 801e19c:	2902      	cmp	r1, #2
 801e19e:	d000      	beq.n	801e1a2 <USBH_UserProcess+0xe>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 801e1a0:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 801e1a2:	4b05      	ldr	r3, [pc, #20]	; (801e1b8 <USBH_UserProcess+0x24>)
 801e1a4:	7019      	strb	r1, [r3, #0]
  break;
 801e1a6:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 801e1a8:	4b03      	ldr	r3, [pc, #12]	; (801e1b8 <USBH_UserProcess+0x24>)
 801e1aa:	2204      	movs	r2, #4
 801e1ac:	701a      	strb	r2, [r3, #0]
  break;
 801e1ae:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 801e1b0:	4b01      	ldr	r3, [pc, #4]	; (801e1b8 <USBH_UserProcess+0x24>)
 801e1b2:	2201      	movs	r2, #1
 801e1b4:	701a      	strb	r2, [r3, #0]
}
 801e1b6:	4770      	bx	lr
 801e1b8:	20000658 	.word	0x20000658

0801e1bc <MX_USB_HOST_Init>:
{
 801e1bc:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801e1be:	2201      	movs	r2, #1
 801e1c0:	490c      	ldr	r1, [pc, #48]	; (801e1f4 <MX_USB_HOST_Init+0x38>)
 801e1c2:	480d      	ldr	r0, [pc, #52]	; (801e1f8 <MX_USB_HOST_Init+0x3c>)
 801e1c4:	f7f1 f8ba 	bl	800f33c <USBH_Init>
 801e1c8:	b988      	cbnz	r0, 801e1ee <MX_USB_HOST_Init+0x32>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 801e1ca:	490c      	ldr	r1, [pc, #48]	; (801e1fc <MX_USB_HOST_Init+0x40>)
 801e1cc:	480a      	ldr	r0, [pc, #40]	; (801e1f8 <MX_USB_HOST_Init+0x3c>)
 801e1ce:	f7f1 f91b 	bl	800f408 <USBH_RegisterClass>
 801e1d2:	b948      	cbnz	r0, 801e1e8 <MX_USB_HOST_Init+0x2c>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801e1d4:	4808      	ldr	r0, [pc, #32]	; (801e1f8 <MX_USB_HOST_Init+0x3c>)
 801e1d6:	f7f1 fa07 	bl	800f5e8 <USBH_Start>
 801e1da:	b108      	cbz	r0, 801e1e0 <MX_USB_HOST_Init+0x24>
    Error_Handler();
 801e1dc:	f7f5 fd2c 	bl	8013c38 <Error_Handler>
}
 801e1e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 801e1e4:	f7e9 bfe8 	b.w	80081b8 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 801e1e8:	f7f5 fd26 	bl	8013c38 <Error_Handler>
 801e1ec:	e7f2      	b.n	801e1d4 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 801e1ee:	f7f5 fd23 	bl	8013c38 <Error_Handler>
 801e1f2:	e7ea      	b.n	801e1ca <MX_USB_HOST_Init+0xe>
 801e1f4:	0801e195 	.word	0x0801e195
 801e1f8:	300010a0 	.word	0x300010a0
 801e1fc:	200002d0 	.word	0x200002d0

0801e200 <MX_USB_HOST_DeInit>:
{
 801e200:	b508      	push	{r3, lr}
  if (USBH_Stop(&hUsbHostFS) != USBH_OK)
 801e202:	4808      	ldr	r0, [pc, #32]	; (801e224 <MX_USB_HOST_DeInit+0x24>)
 801e204:	f7f1 f9fa 	bl	800f5fc <USBH_Stop>
 801e208:	b948      	cbnz	r0, 801e21e <MX_USB_HOST_DeInit+0x1e>
  if (USBH_DeInit(&hUsbHostFS) != USBH_OK)
 801e20a:	4806      	ldr	r0, [pc, #24]	; (801e224 <MX_USB_HOST_DeInit+0x24>)
 801e20c:	f7f1 f8ce 	bl	800f3ac <USBH_DeInit>
 801e210:	b108      	cbz	r0, 801e216 <MX_USB_HOST_DeInit+0x16>
    Error_Handler();
 801e212:	f7f5 fd11 	bl	8013c38 <Error_Handler>
}
 801e216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_DisableUSBVoltageDetector();
 801e21a:	f7e9 bfd5 	b.w	80081c8 <HAL_PWREx_DisableUSBVoltageDetector>
    Error_Handler();
 801e21e:	f7f5 fd0b 	bl	8013c38 <Error_Handler>
 801e222:	e7f2      	b.n	801e20a <MX_USB_HOST_DeInit+0xa>
 801e224:	300010a0 	.word	0x300010a0

0801e228 <MX_USB_HOST_Process>:
{
 801e228:	b508      	push	{r3, lr}
	MIDI_Application();
 801e22a:	f7f2 fc83 	bl	8010b34 <MIDI_Application>
	USBH_Process(&hUsbHostFS);
 801e22e:	4802      	ldr	r0, [pc, #8]	; (801e238 <MX_USB_HOST_Process+0x10>)
}
 801e230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	USBH_Process(&hUsbHostFS);
 801e234:	f7f1 b9f4 	b.w	800f620 <USBH_Process>
 801e238:	300010a0 	.word	0x300010a0

0801e23c <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{   
 801e23c:	b508      	push	{r3, lr}

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 801e23e:	2102      	movs	r1, #2
 801e240:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 801e244:	4798      	blx	r3

	return USBH_OK;
}
 801e246:	2000      	movs	r0, #0
 801e248:	bd08      	pop	{r3, pc}
 801e24a:	bf00      	nop

0801e24c <USBH_MIDI_Process>:
 *         (background process)
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 801e24c:	b510      	push	{r4, lr}
	USBH_StatusTypeDef status = USBH_BUSY;
	USBH_StatusTypeDef req_status = USBH_OK;
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801e24e:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
 801e252:	69dc      	ldr	r4, [r3, #28]

	switch(MIDI_Handle->state)
 801e254:	7823      	ldrb	r3, [r4, #0]
 801e256:	b153      	cbz	r3, 801e26e <USBH_MIDI_Process+0x22>
 801e258:	2b02      	cmp	r3, #2
 801e25a:	d106      	bne.n	801e26a <USBH_MIDI_Process+0x1e>
		//MIDI_ProcessTransmission(phost);
		//MIDI_ProcessReception(phost);
		break;

	case MIDI_ERROR_STATE:
		req_status = USBH_ClrFeature(phost, 0x00);
 801e25c:	2100      	movs	r1, #0
 801e25e:	f7f2 faa5 	bl	80107ac <USBH_ClrFeature>

		if(req_status == USBH_OK )
 801e262:	b910      	cbnz	r0, 801e26a <USBH_MIDI_Process+0x1e>
		{
			/*Change the state to waiting*/
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 801e264:	7020      	strb	r0, [r4, #0]
	USBH_StatusTypeDef status = USBH_BUSY;
 801e266:	2001      	movs	r0, #1
		break;

	}

	return status;
}
 801e268:	bd10      	pop	{r4, pc}
	USBH_StatusTypeDef status = USBH_BUSY;
 801e26a:	2001      	movs	r0, #1
}
 801e26c:	bd10      	pop	{r4, pc}
		status = USBH_OK;
 801e26e:	4618      	mov	r0, r3
}
 801e270:	bd10      	pop	{r4, pc}
 801e272:	bf00      	nop

0801e274 <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 801e274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	USBH_StatusTypeDef status = USBH_BUSY;
	USBH_StatusTypeDef req_status = USBH_OK;
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801e278:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
{
 801e27c:	b083      	sub	sp, #12
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801e27e:	69dc      	ldr	r4, [r3, #28]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
	uint16_t length;
	switch(MIDI_Handle->state)
 801e280:	7823      	ldrb	r3, [r4, #0]
 801e282:	2b01      	cmp	r3, #1
 801e284:	d00a      	beq.n	801e29c <USBH_MIDI_SOFProcess+0x28>
 801e286:	2b02      	cmp	r3, #2
 801e288:	d104      	bne.n	801e294 <USBH_MIDI_SOFProcess+0x20>
				break;
		}
		break;

	case MIDI_ERROR_STATE:
		req_status = USBH_ClrFeature(phost, 0x00);
 801e28a:	2100      	movs	r1, #0
 801e28c:	f7f2 fa8e 	bl	80107ac <USBH_ClrFeature>

		if(req_status == USBH_OK )
 801e290:	b900      	cbnz	r0, 801e294 <USBH_MIDI_SOFProcess+0x20>
		{
			/*Change the state to waiting*/
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 801e292:	7020      	strb	r0, [r4, #0]
		break;

	}

	return USBH_OK;
}
 801e294:	2000      	movs	r0, #0
 801e296:	b003      	add	sp, #12
 801e298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch(MIDI_Handle->data_rx_state)
 801e29c:	7e63      	ldrb	r3, [r4, #25]
 801e29e:	2b03      	cmp	r3, #3
 801e2a0:	d06f      	beq.n	801e382 <USBH_MIDI_SOFProcess+0x10e>
 801e2a2:	2b04      	cmp	r3, #4
 801e2a4:	d1f6      	bne.n	801e294 <USBH_MIDI_SOFProcess+0x20>
				URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 801e2a6:	7861      	ldrb	r1, [r4, #1]
 801e2a8:	4605      	mov	r5, r0
 801e2aa:	f000 fa49 	bl	801e740 <USBH_LL_GetURBState>
				if(URB_Status == USBH_URB_DONE )
 801e2ae:	2801      	cmp	r0, #1
 801e2b0:	d1f0      	bne.n	801e294 <USBH_MIDI_SOFProcess+0x20>
					length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 801e2b2:	7861      	ldrb	r1, [r4, #1]
 801e2b4:	4628      	mov	r0, r5
 801e2b6:	f000 f9fb 	bl	801e6b0 <USBH_LL_GetLastXferSize>
					if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 801e2ba:	8ae3      	ldrh	r3, [r4, #22]
 801e2bc:	b286      	uxth	r6, r0
 801e2be:	1b9a      	subs	r2, r3, r6
 801e2c0:	2a00      	cmp	r2, #0
 801e2c2:	dd02      	ble.n	801e2ca <USBH_MIDI_SOFProcess+0x56>
 801e2c4:	8922      	ldrh	r2, [r4, #8]
 801e2c6:	42b2      	cmp	r2, r6
 801e2c8:	d366      	bcc.n	801e398 <USBH_MIDI_SOFProcess+0x124>
						MIDI_write_buffer = !MIDI_write_buffer;
 801e2ca:	4837      	ldr	r0, [pc, #220]	; (801e3a8 <USBH_MIDI_SOFProcess+0x134>)
						MIDI_Handle->data_rx_state = MIDI_IDLE;
 801e2cc:	2300      	movs	r3, #0
						MIDI_read_buffer = !MIDI_read_buffer; //switch buffers for double buffer fun
 801e2ce:	4937      	ldr	r1, [pc, #220]	; (801e3ac <USBH_MIDI_SOFProcess+0x138>)
						MIDI_write_buffer = !MIDI_write_buffer;
 801e2d0:	f890 c000 	ldrb.w	ip, [r0]
						MIDI_read_buffer = !MIDI_read_buffer; //switch buffers for double buffer fun
 801e2d4:	780a      	ldrb	r2, [r1, #0]
						MIDI_write_buffer = !MIDI_write_buffer;
 801e2d6:	fabc fc8c 	clz	ip, ip
						MIDI_Handle->data_rx_state = MIDI_IDLE;
 801e2da:	7663      	strb	r3, [r4, #25]
						MIDI_read_buffer = !MIDI_read_buffer; //switch buffers for double buffer fun
 801e2dc:	fab2 f282 	clz	r2, r2
						MIDI_write_buffer = !MIDI_write_buffer;
 801e2e0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
						MIDI_read_buffer = !MIDI_read_buffer; //switch buffers for double buffer fun
 801e2e4:	0952      	lsrs	r2, r2, #5
						MIDI_write_buffer = !MIDI_write_buffer;
 801e2e6:	f880 c000 	strb.w	ip, [r0]
						MIDI_read_buffer = !MIDI_read_buffer; //switch buffers for double buffer fun
 801e2ea:	700a      	strb	r2, [r1, #0]
						for (int i = 0; i < length; i++)
 801e2ec:	2e00      	cmp	r6, #0
 801e2ee:	d035      	beq.n	801e35c <USBH_MIDI_SOFProcess+0xe8>
 801e2f0:	482f      	ldr	r0, [pc, #188]	; (801e3b0 <USBH_MIDI_SOFProcess+0x13c>)
								myUSB_FIFO_overflowBit = 1;
 801e2f2:	f04f 0801 	mov.w	r8, #1
 801e2f6:	492f      	ldr	r1, [pc, #188]	; (801e3b4 <USBH_MIDI_SOFProcess+0x140>)
								myUSB_FIFO_writePointer = 0;
 801e2f8:	469e      	mov	lr, r3
 801e2fa:	eb00 1282 	add.w	r2, r0, r2, lsl #6
									myUSB_FIFO[myUSB_FIFO_writePointer] = MIDI_RX_Buffer[MIDI_read_buffer][i];
 801e2fe:	4f2e      	ldr	r7, [pc, #184]	; (801e3b8 <USBH_MIDI_SOFProcess+0x144>)
								myUSB_FIFO_overflowBit = 1;
 801e300:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 801e3bc <USBH_MIDI_SOFProcess+0x148>
 801e304:	9401      	str	r4, [sp, #4]
							if ((i % 4) == 0)
 801e306:	f003 0003 	and.w	r0, r3, #3
 801e30a:	3301      	adds	r3, #1
 801e30c:	b9d8      	cbnz	r0, 801e346 <USBH_MIDI_SOFProcess+0xd2>
								if (MIDI_RX_Buffer[MIDI_read_buffer][i] > 0)
 801e30e:	7810      	ldrb	r0, [r2, #0]
 801e310:	b1c8      	cbz	r0, 801e346 <USBH_MIDI_SOFProcess+0xd2>
									myUSB_FIFO[myUSB_FIFO_writePointer] = MIDI_RX_Buffer[MIDI_read_buffer][i];
 801e312:	f8b1 b000 	ldrh.w	fp, [r1]
									myUSB_FIFO[myUSB_FIFO_writePointer+1] = MIDI_RX_Buffer[MIDI_read_buffer][i+1];
 801e316:	f892 a001 	ldrb.w	sl, [r2, #1]
									myUSB_FIFO[myUSB_FIFO_writePointer] = MIDI_RX_Buffer[MIDI_read_buffer][i];
 801e31a:	fa1f fb8b 	uxth.w	fp, fp
									myUSB_FIFO[myUSB_FIFO_writePointer+2] = MIDI_RX_Buffer[MIDI_read_buffer][i+2];
 801e31e:	7894      	ldrb	r4, [r2, #2]
									myUSB_FIFO[myUSB_FIFO_writePointer] = MIDI_RX_Buffer[MIDI_read_buffer][i];
 801e320:	f807 000b 	strb.w	r0, [r7, fp]
									myUSB_FIFO[myUSB_FIFO_writePointer+1] = MIDI_RX_Buffer[MIDI_read_buffer][i+1];
 801e324:	8808      	ldrh	r0, [r1, #0]
									myUSB_FIFO[myUSB_FIFO_writePointer+3] = MIDI_RX_Buffer[MIDI_read_buffer][i+3];
 801e326:	f892 b003 	ldrb.w	fp, [r2, #3]
									myUSB_FIFO[myUSB_FIFO_writePointer+1] = MIDI_RX_Buffer[MIDI_read_buffer][i+1];
 801e32a:	3001      	adds	r0, #1
 801e32c:	f807 a000 	strb.w	sl, [r7, r0]
									myUSB_FIFO[myUSB_FIFO_writePointer+2] = MIDI_RX_Buffer[MIDI_read_buffer][i+2];
 801e330:	8808      	ldrh	r0, [r1, #0]
 801e332:	3002      	adds	r0, #2
 801e334:	543c      	strb	r4, [r7, r0]
									myUSB_FIFO[myUSB_FIFO_writePointer+3] = MIDI_RX_Buffer[MIDI_read_buffer][i+3];
 801e336:	8808      	ldrh	r0, [r1, #0]
 801e338:	3003      	adds	r0, #3
 801e33a:	f807 b000 	strb.w	fp, [r7, r0]
									myUSB_FIFO_writePointer+=4;
 801e33e:	8808      	ldrh	r0, [r1, #0]
 801e340:	3004      	adds	r0, #4
 801e342:	b280      	uxth	r0, r0
 801e344:	8008      	strh	r0, [r1, #0]
							if (myUSB_FIFO_writePointer >= 256)
 801e346:	8808      	ldrh	r0, [r1, #0]
 801e348:	3201      	adds	r2, #1
 801e34a:	28ff      	cmp	r0, #255	; 0xff
 801e34c:	d903      	bls.n	801e356 <USBH_MIDI_SOFProcess+0xe2>
								myUSB_FIFO_writePointer = 0;
 801e34e:	f8a1 e000 	strh.w	lr, [r1]
								myUSB_FIFO_overflowBit = 1;
 801e352:	f889 8000 	strb.w	r8, [r9]
						for (int i = 0; i < length; i++)
 801e356:	429e      	cmp	r6, r3
 801e358:	d1d5      	bne.n	801e306 <USBH_MIDI_SOFProcess+0x92>
 801e35a:	9c01      	ldr	r4, [sp, #4]
						MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 801e35c:	2304      	movs	r3, #4
 801e35e:	7663      	strb	r3, [r4, #25]
 * @retval None
 */
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
	USBH_StatusTypeDef Status = USBH_BUSY;
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801e360:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
 801e364:	69db      	ldr	r3, [r3, #28]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 801e366:	781a      	ldrb	r2, [r3, #0]
 801e368:	2a01      	cmp	r2, #1
 801e36a:	d893      	bhi.n	801e294 <USBH_MIDI_SOFProcess+0x20>
						USBH_MIDI_Receive(phost, &MIDI_RX_Buffer[MIDI_write_buffer][0], RX_BUFF_SIZE); // start a new reception
 801e36c:	4a10      	ldr	r2, [pc, #64]	; (801e3b0 <USBH_MIDI_SOFProcess+0x13c>)
	{
		MIDI_Handle->pRxData = pbuff;
		MIDI_Handle->RxDataLength = length;
 801e36e:	2440      	movs	r4, #64	; 0x40
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 801e370:	2001      	movs	r0, #1
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 801e372:	2103      	movs	r1, #3
						USBH_MIDI_Receive(phost, &MIDI_RX_Buffer[MIDI_write_buffer][0], RX_BUFF_SIZE); // start a new reception
 801e374:	eb02 128c 	add.w	r2, r2, ip, lsl #6
		MIDI_Handle->RxDataLength = length;
 801e378:	82dc      	strh	r4, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 801e37a:	7018      	strb	r0, [r3, #0]
		MIDI_Handle->pRxData = pbuff;
 801e37c:	611a      	str	r2, [r3, #16]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 801e37e:	7659      	strb	r1, [r3, #25]
 801e380:	e788      	b.n	801e294 <USBH_MIDI_SOFProcess+0x20>
				USBH_BulkReceiveData (phost,
 801e382:	7863      	ldrb	r3, [r4, #1]
 801e384:	8922      	ldrh	r2, [r4, #8]
 801e386:	6921      	ldr	r1, [r4, #16]
 801e388:	f7f2 fb30 	bl	80109ec <USBH_BulkReceiveData>
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 801e38c:	2304      	movs	r3, #4
}
 801e38e:	2000      	movs	r0, #0
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 801e390:	7663      	strb	r3, [r4, #25]
}
 801e392:	b003      	add	sp, #12
 801e394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						MIDI_Handle->pRxData += length;
 801e398:	6922      	ldr	r2, [r4, #16]
						MIDI_Handle->RxDataLength -= length ;
 801e39a:	1b98      	subs	r0, r3, r6
						MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 801e39c:	2303      	movs	r3, #3
						MIDI_Handle->pRxData += length;
 801e39e:	4432      	add	r2, r6
						MIDI_Handle->RxDataLength -= length ;
 801e3a0:	82e0      	strh	r0, [r4, #22]
						MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 801e3a2:	7663      	strb	r3, [r4, #25]
						MIDI_Handle->pRxData += length;
 801e3a4:	6122      	str	r2, [r4, #16]
						MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 801e3a6:	e775      	b.n	801e294 <USBH_MIDI_SOFProcess+0x20>
 801e3a8:	20000008 	.word	0x20000008
 801e3ac:	200004cc 	.word	0x200004cc
 801e3b0:	30000000 	.word	0x30000000
 801e3b4:	2000065c 	.word	0x2000065c
 801e3b8:	200190dc 	.word	0x200190dc
 801e3bc:	20000659 	.word	0x20000659

0801e3c0 <USBH_MIDI_InterfaceDeInit>:
{
 801e3c0:	b538      	push	{r3, r4, r5, lr}
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801e3c2:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
{
 801e3c6:	4605      	mov	r5, r0
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801e3c8:	69dc      	ldr	r4, [r3, #28]
	if ( MIDI_Handle->OutPipe)
 801e3ca:	78a1      	ldrb	r1, [r4, #2]
 801e3cc:	b949      	cbnz	r1, 801e3e2 <USBH_MIDI_InterfaceDeInit+0x22>
	if ( MIDI_Handle->InPipe)
 801e3ce:	7861      	ldrb	r1, [r4, #1]
 801e3d0:	b991      	cbnz	r1, 801e3f8 <USBH_MIDI_InterfaceDeInit+0x38>
	if(phost->pActiveClass->pData)
 801e3d2:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
 801e3d6:	69da      	ldr	r2, [r3, #28]
 801e3d8:	b10a      	cbz	r2, 801e3de <USBH_MIDI_InterfaceDeInit+0x1e>
		phost->pActiveClass->pData = 0;
 801e3da:	2200      	movs	r2, #0
 801e3dc:	61da      	str	r2, [r3, #28]
}
 801e3de:	2000      	movs	r0, #0
 801e3e0:	bd38      	pop	{r3, r4, r5, pc}
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 801e3e2:	f7f2 fb25 	bl	8010a30 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 801e3e6:	78a1      	ldrb	r1, [r4, #2]
 801e3e8:	4628      	mov	r0, r5
 801e3ea:	f7f2 fb71 	bl	8010ad0 <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 801e3ee:	2300      	movs	r3, #0
	if ( MIDI_Handle->InPipe)
 801e3f0:	7861      	ldrb	r1, [r4, #1]
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 801e3f2:	70a3      	strb	r3, [r4, #2]
	if ( MIDI_Handle->InPipe)
 801e3f4:	2900      	cmp	r1, #0
 801e3f6:	d0ec      	beq.n	801e3d2 <USBH_MIDI_InterfaceDeInit+0x12>
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 801e3f8:	4628      	mov	r0, r5
 801e3fa:	f7f2 fb19 	bl	8010a30 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 801e3fe:	7861      	ldrb	r1, [r4, #1]
 801e400:	4628      	mov	r0, r5
 801e402:	f7f2 fb65 	bl	8010ad0 <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 801e406:	2300      	movs	r3, #0
 801e408:	7063      	strb	r3, [r4, #1]
 801e40a:	e7e2      	b.n	801e3d2 <USBH_MIDI_InterfaceDeInit+0x12>

0801e40c <USBH_MIDI_InterfaceInit>:
{	
 801e40c:	b5f0      	push	{r4, r5, r6, r7, lr}
	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 801e40e:	23ff      	movs	r3, #255	; 0xff
{	
 801e410:	b085      	sub	sp, #20
	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 801e412:	2203      	movs	r2, #3
 801e414:	2101      	movs	r1, #1
{	
 801e416:	4605      	mov	r5, r0
	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 801e418:	f7f1 f80e 	bl	800f438 <USBH_FindInterface>
	if(interface == 0xFF) /* No Valid Interface */
 801e41c:	28ff      	cmp	r0, #255	; 0xff
 801e41e:	d058      	beq.n	801e4d2 <USBH_MIDI_InterfaceInit+0xc6>
		USBH_SelectInterface (phost, interface);
 801e420:	4601      	mov	r1, r0
 801e422:	4628      	mov	r0, r5
 801e424:	f7f0 fffe 	bl	800f424 <USBH_SelectInterface>
		phost->pActiveClass->pData = &myMIDIHandle;
 801e428:	4c2d      	ldr	r4, [pc, #180]	; (801e4e0 <USBH_MIDI_InterfaceInit+0xd4>)
 801e42a:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 801e42e:	222a      	movs	r2, #42	; 0x2a
		phost->pActiveClass->pData = &myMIDIHandle;
 801e430:	61dc      	str	r4, [r3, #28]
		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 801e432:	f895 3324 	ldrb.w	r3, [r5, #804]	; 0x324
 801e436:	fb02 5203 	mla	r2, r2, r3, r5
 801e43a:	f892 134e 	ldrb.w	r1, [r2, #846]	; 0x34e
			myMIDIHandle.InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 801e43e:	f8b2 2350 	ldrh.w	r2, [r2, #848]	; 0x350
		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 801e442:	0608      	lsls	r0, r1, #24
 801e444:	d442      	bmi.n	801e4cc <USBH_MIDI_InterfaceInit+0xc0>
			myMIDIHandle.OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 801e446:	70e1      	strb	r1, [r4, #3]
			myMIDIHandle.OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 801e448:	80e2      	strh	r2, [r4, #6]
		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 801e44a:	222a      	movs	r2, #42	; 0x2a
 801e44c:	fb02 5303 	mla	r3, r2, r3, r5
 801e450:	f893 1356 	ldrb.w	r1, [r3, #854]	; 0x356
 801e454:	f8b3 3358 	ldrh.w	r3, [r3, #856]	; 0x358
 801e458:	060a      	lsls	r2, r1, #24
 801e45a:	d43d      	bmi.n	801e4d8 <USBH_MIDI_InterfaceInit+0xcc>
			myMIDIHandle.OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 801e45c:	70e1      	strb	r1, [r4, #3]
			myMIDIHandle.OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 801e45e:	80e3      	strh	r3, [r4, #6]
		myMIDIHandle.OutPipe = USBH_AllocPipe(phost, myMIDIHandle.OutEp);
 801e460:	4628      	mov	r0, r5
		USBH_OpenPipe  (phost,
 801e462:	2702      	movs	r7, #2
		myMIDIHandle.OutPipe = USBH_AllocPipe(phost, myMIDIHandle.OutEp);
 801e464:	f7f2 faea 	bl	8010a3c <USBH_AllocPipe>
		myMIDIHandle.InPipe = USBH_AllocPipe(phost, myMIDIHandle.InEp);
 801e468:	7921      	ldrb	r1, [r4, #4]
		myMIDIHandle.OutPipe = USBH_AllocPipe(phost, myMIDIHandle.OutEp);
 801e46a:	70a0      	strb	r0, [r4, #2]
		myMIDIHandle.InPipe = USBH_AllocPipe(phost, myMIDIHandle.InEp);
 801e46c:	4628      	mov	r0, r5
 801e46e:	f7f2 fae5 	bl	8010a3c <USBH_AllocPipe>
		USBH_OpenPipe  (phost,
 801e472:	f8b4 c006 	ldrh.w	ip, [r4, #6]
		myMIDIHandle.InPipe = USBH_AllocPipe(phost, myMIDIHandle.InEp);
 801e476:	7060      	strb	r0, [r4, #1]
		myMIDIHandle.state = MIDI_IDLE_STATE;
 801e478:	2600      	movs	r6, #0
		USBH_OpenPipe  (phost,
 801e47a:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 801e47e:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 801e482:	78e2      	ldrb	r2, [r4, #3]
 801e484:	78a1      	ldrb	r1, [r4, #2]
 801e486:	9000      	str	r0, [sp, #0]
 801e488:	4628      	mov	r0, r5
 801e48a:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 801e48e:	f7f2 fabf 	bl	8010a10 <USBH_OpenPipe>
		USBH_OpenPipe  (phost,
 801e492:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 801e496:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e49a:	4628      	mov	r0, r5
 801e49c:	9701      	str	r7, [sp, #4]
 801e49e:	f895 731d 	ldrb.w	r7, [r5, #797]	; 0x31d
 801e4a2:	7922      	ldrb	r2, [r4, #4]
 801e4a4:	f8cd c008 	str.w	ip, [sp, #8]
 801e4a8:	7861      	ldrb	r1, [r4, #1]
 801e4aa:	9700      	str	r7, [sp, #0]
 801e4ac:	f7f2 fab0 	bl	8010a10 <USBH_OpenPipe>
		USBH_LL_SetToggle  (phost, myMIDIHandle.InPipe,0);
 801e4b0:	4632      	mov	r2, r6
 801e4b2:	7861      	ldrb	r1, [r4, #1]
 801e4b4:	4628      	mov	r0, r5
		myMIDIHandle.state = MIDI_IDLE_STATE;
 801e4b6:	7026      	strb	r6, [r4, #0]
		USBH_LL_SetToggle  (phost, myMIDIHandle.InPipe,0);
 801e4b8:	f000 f958 	bl	801e76c <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, myMIDIHandle.OutPipe,0);
 801e4bc:	4632      	mov	r2, r6
 801e4be:	78a1      	ldrb	r1, [r4, #2]
 801e4c0:	4628      	mov	r0, r5
 801e4c2:	f000 f953 	bl	801e76c <USBH_LL_SetToggle>
 801e4c6:	4630      	mov	r0, r6
}
 801e4c8:	b005      	add	sp, #20
 801e4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			myMIDIHandle.InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 801e4cc:	7121      	strb	r1, [r4, #4]
			myMIDIHandle.InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 801e4ce:	8122      	strh	r2, [r4, #8]
 801e4d0:	e7bb      	b.n	801e44a <USBH_MIDI_InterfaceInit+0x3e>
		status = USBH_FAIL;
 801e4d2:	2002      	movs	r0, #2
}
 801e4d4:	b005      	add	sp, #20
 801e4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			myMIDIHandle.InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 801e4d8:	7121      	strb	r1, [r4, #4]
			myMIDIHandle.InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 801e4da:	8123      	strh	r3, [r4, #8]
 801e4dc:	78e1      	ldrb	r1, [r4, #3]
 801e4de:	e7bf      	b.n	801e460 <USBH_MIDI_InterfaceInit+0x54>
 801e4e0:	200190c0 	.word	0x200190c0

0801e4e4 <USBH_MIDI_Stop>:
  if(phost->gState == HOST_CLASS)
 801e4e4:	7802      	ldrb	r2, [r0, #0]
 801e4e6:	2a0b      	cmp	r2, #11
 801e4e8:	d001      	beq.n	801e4ee <USBH_MIDI_Stop+0xa>
}
 801e4ea:	2000      	movs	r0, #0
 801e4ec:	4770      	bx	lr
{
 801e4ee:	b538      	push	{r3, r4, r5, lr}
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801e4f0:	f8d0 24ec 	ldr.w	r2, [r0, #1260]	; 0x4ec
    MIDI_Handle->state = MIDI_IDLE_STATE;
 801e4f4:	2300      	movs	r3, #0
 801e4f6:	4604      	mov	r4, r0
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801e4f8:	69d5      	ldr	r5, [r2, #28]
    MIDI_Handle->state = MIDI_IDLE_STATE;
 801e4fa:	702b      	strb	r3, [r5, #0]
    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 801e4fc:	7869      	ldrb	r1, [r5, #1]
 801e4fe:	f7f2 fa97 	bl	8010a30 <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 801e502:	78a9      	ldrb	r1, [r5, #2]
 801e504:	4620      	mov	r0, r4
 801e506:	f7f2 fa93 	bl	8010a30 <USBH_ClosePipe>
}
 801e50a:	2000      	movs	r0, #0
 801e50c:	bd38      	pop	{r3, r4, r5, pc}
 801e50e:	bf00      	nop

0801e510 <USBH_MIDI_Receive>:
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801e510:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
 801e514:	69db      	ldr	r3, [r3, #28]
	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 801e516:	7818      	ldrb	r0, [r3, #0]
 801e518:	2801      	cmp	r0, #1
 801e51a:	d901      	bls.n	801e520 <USBH_MIDI_Receive+0x10>
	USBH_StatusTypeDef Status = USBH_BUSY;
 801e51c:	2001      	movs	r0, #1
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
}
 801e51e:	4770      	bx	lr
{
 801e520:	b430      	push	{r4, r5}
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 801e522:	2501      	movs	r5, #1
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 801e524:	2403      	movs	r4, #3
		MIDI_Handle->pRxData = pbuff;
 801e526:	6119      	str	r1, [r3, #16]
		Status = USBH_OK;
 801e528:	2000      	movs	r0, #0
		MIDI_Handle->RxDataLength = length;
 801e52a:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 801e52c:	701d      	strb	r5, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 801e52e:	765c      	strb	r4, [r3, #25]
}
 801e530:	bc30      	pop	{r4, r5}
 801e532:	4770      	bx	lr

0801e534 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801e534:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcdHandle->Instance==USB_OTG_FS)
 801e536:	4b1e      	ldr	r3, [pc, #120]	; (801e5b0 <HAL_HCD_MspInit+0x7c>)
{
 801e538:	b088      	sub	sp, #32
  if(hcdHandle->Instance==USB_OTG_FS)
 801e53a:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801e53c:	2400      	movs	r4, #0
  if(hcdHandle->Instance==USB_OTG_FS)
 801e53e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801e540:	9407      	str	r4, [sp, #28]
 801e542:	e9cd 4403 	strd	r4, r4, [sp, #12]
 801e546:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hcdHandle->Instance==USB_OTG_FS)
 801e54a:	d001      	beq.n	801e550 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */
//
  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801e54c:	b008      	add	sp, #32
 801e54e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801e550:	4d18      	ldr	r5, [pc, #96]	; (801e5b4 <HAL_HCD_MspInit+0x80>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e552:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e554:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801e556:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801e55a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e55e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801e560:	f043 0301 	orr.w	r3, r3, #1
 801e564:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 801e568:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e56c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801e56e:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801e570:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e574:	9006      	str	r0, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e576:	4810      	ldr	r0, [pc, #64]	; (801e5b8 <HAL_HCD_MspInit+0x84>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801e578:	9301      	str	r3, [sp, #4]
 801e57a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801e57c:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801e57e:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e580:	f7e6 ff2c 	bl	80053dc <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801e584:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 801e588:	4622      	mov	r2, r4
 801e58a:	2101      	movs	r1, #1
 801e58c:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801e58e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e592:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 801e596:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 801e59a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e59e:	9302      	str	r3, [sp, #8]
 801e5a0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 801e5a2:	f7e3 ffb7 	bl	8002514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801e5a6:	2065      	movs	r0, #101	; 0x65
 801e5a8:	f7e3 fffa 	bl	80025a0 <HAL_NVIC_EnableIRQ>
}
 801e5ac:	b008      	add	sp, #32
 801e5ae:	bd70      	pop	{r4, r5, r6, pc}
 801e5b0:	40080000 	.word	0x40080000
 801e5b4:	58024400 	.word	0x58024400
 801e5b8:	58020000 	.word	0x58020000

0801e5bc <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 801e5bc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801e5c0:	f7f1 ba96 	b.w	800faf0 <USBH_LL_IncTimer>

0801e5c4 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 801e5c4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801e5c8:	f7f1 baaa 	b.w	800fb20 <USBH_LL_Connect>

0801e5cc <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 801e5cc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801e5d0:	f7f1 bab2 	b.w	800fb38 <USBH_LL_Disconnect>

0801e5d4 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801e5d4:	4770      	bx	lr
 801e5d6:	bf00      	nop

0801e5d8 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 801e5d8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801e5dc:	f7f1 ba98 	b.w	800fb10 <USBH_LL_PortEnabled>

0801e5e0 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 801e5e0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801e5e4:	f7f1 ba98 	b.w	800fb18 <USBH_LL_PortDisabled>

0801e5e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801e5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801e5ea:	f890 353c 	ldrb.w	r3, [r0, #1340]	; 0x53c
 801e5ee:	2b01      	cmp	r3, #1
 801e5f0:	d001      	beq.n	801e5f6 <USBH_LL_Init+0xe>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 801e5f2:	2000      	movs	r0, #0
 801e5f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801e5f6:	4a10      	ldr	r2, [pc, #64]	; (801e638 <USBH_LL_Init+0x50>)
 801e5f8:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.Init.Host_channels = 6;
 801e5fa:	2606      	movs	r6, #6
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801e5fc:	4f0f      	ldr	r7, [pc, #60]	; (801e63c <USBH_LL_Init+0x54>)
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801e5fe:	2502      	movs	r5, #2
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801e600:	2100      	movs	r1, #0
  phost->pData = &hhcd_USB_OTG_FS;
 801e602:	f8c0 2540 	str.w	r2, [r0, #1344]	; 0x540
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801e606:	4610      	mov	r0, r2
  hhcd_USB_OTG_FS.pData = phost;
 801e608:	f8c2 42c0 	str.w	r4, [r2, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801e60c:	6017      	str	r7, [r2, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 6;
 801e60e:	6096      	str	r6, [r2, #8]
  hhcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 801e610:	e9c2 3303 	strd	r3, r3, [r2, #12]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801e614:	e9c2 5106 	strd	r5, r1, [r2, #24]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801e618:	f7e7 fa82 	bl	8005b20 <HAL_HCD_Init>
 801e61c:	b940      	cbnz	r0, 801e630 <USBH_LL_Init+0x48>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801e61e:	4806      	ldr	r0, [pc, #24]	; (801e638 <USBH_LL_Init+0x50>)
 801e620:	f7e7 ff1e 	bl	8006460 <HAL_HCD_GetCurrentFrame>
 801e624:	4601      	mov	r1, r0
 801e626:	4620      	mov	r0, r4
 801e628:	f7f1 fa5e 	bl	800fae8 <USBH_LL_SetTimer>
}
 801e62c:	2000      	movs	r0, #0
 801e62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Error_Handler( );
 801e630:	f7f5 fb02 	bl	8013c38 <Error_Handler>
 801e634:	e7f3      	b.n	801e61e <USBH_LL_Init+0x36>
 801e636:	bf00      	nop
 801e638:	200191dc 	.word	0x200191dc
 801e63c:	40080000 	.word	0x40080000

0801e640 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801e640:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 801e642:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
 801e646:	f7e7 fed1 	bl	80063ec <HAL_HCD_Start>
 801e64a:	2803      	cmp	r0, #3
 801e64c:	d802      	bhi.n	801e654 <USBH_LL_Start+0x14>
 801e64e:	4b02      	ldr	r3, [pc, #8]	; (801e658 <USBH_LL_Start+0x18>)
 801e650:	5c18      	ldrb	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 801e652:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_Start(phost->pData);
 801e654:	2002      	movs	r0, #2
}
 801e656:	bd08      	pop	{r3, pc}
 801e658:	0802c988 	.word	0x0802c988

0801e65c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801e65c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 801e65e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
 801e662:	f7e7 fed9 	bl	8006418 <HAL_HCD_Stop>
 801e666:	2803      	cmp	r0, #3
 801e668:	d802      	bhi.n	801e670 <USBH_LL_Stop+0x14>
 801e66a:	4b02      	ldr	r3, [pc, #8]	; (801e674 <USBH_LL_Stop+0x18>)
 801e66c:	5c18      	ldrb	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 801e66e:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_Stop(phost->pData);
 801e670:	2002      	movs	r0, #2
}
 801e672:	bd08      	pop	{r3, pc}
 801e674:	0802c988 	.word	0x0802c988

0801e678 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801e678:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801e67a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
 801e67e:	f7e7 fef3 	bl	8006468 <HAL_HCD_GetCurrentSpeed>
 801e682:	2802      	cmp	r0, #2
 801e684:	d802      	bhi.n	801e68c <USBH_LL_GetSpeed+0x14>
 801e686:	4b02      	ldr	r3, [pc, #8]	; (801e690 <USBH_LL_GetSpeed+0x18>)
 801e688:	5c18      	ldrb	r0, [r3, r0]
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 801e68a:	bd08      	pop	{r3, pc}
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801e68c:	2001      	movs	r0, #1
}
 801e68e:	bd08      	pop	{r3, pc}
 801e690:	0802c984 	.word	0x0802c984

0801e694 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801e694:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801e696:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
 801e69a:	f7e7 fecf 	bl	800643c <HAL_HCD_ResetPort>
 801e69e:	2803      	cmp	r0, #3
 801e6a0:	d802      	bhi.n	801e6a8 <USBH_LL_ResetPort+0x14>
 801e6a2:	4b02      	ldr	r3, [pc, #8]	; (801e6ac <USBH_LL_ResetPort+0x18>)
 801e6a4:	5c18      	ldrb	r0, [r3, r0]
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 801e6a6:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 801e6a8:	2002      	movs	r0, #2
}
 801e6aa:	bd08      	pop	{r3, pc}
 801e6ac:	0802c988 	.word	0x0802c988

0801e6b0 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801e6b0:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
 801e6b4:	f7e7 bece 	b.w	8006454 <HAL_HCD_HC_GetXferCount>

0801e6b8 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801e6b8:	b530      	push	{r4, r5, lr}
 801e6ba:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801e6bc:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
{
 801e6c0:	f89d 4020 	ldrb.w	r4, [sp, #32]
 801e6c4:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801e6c8:	9400      	str	r4, [sp, #0]
{
 801e6ca:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801e6ce:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801e6d2:	f7e7 f9d7 	bl	8005a84 <HAL_HCD_HC_Init>
 801e6d6:	2803      	cmp	r0, #3
 801e6d8:	d803      	bhi.n	801e6e2 <USBH_LL_OpenPipe+0x2a>
 801e6da:	4b03      	ldr	r3, [pc, #12]	; (801e6e8 <USBH_LL_OpenPipe+0x30>)
 801e6dc:	5c18      	ldrb	r0, [r3, r0]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 801e6de:	b005      	add	sp, #20
 801e6e0:	bd30      	pop	{r4, r5, pc}
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801e6e2:	2002      	movs	r0, #2
}
 801e6e4:	b005      	add	sp, #20
 801e6e6:	bd30      	pop	{r4, r5, pc}
 801e6e8:	0802c988 	.word	0x0802c988

0801e6ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801e6ec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801e6ee:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
 801e6f2:	f7e7 fa03 	bl	8005afc <HAL_HCD_HC_Halt>
 801e6f6:	2803      	cmp	r0, #3
 801e6f8:	d802      	bhi.n	801e700 <USBH_LL_ClosePipe+0x14>
 801e6fa:	4b02      	ldr	r3, [pc, #8]	; (801e704 <USBH_LL_ClosePipe+0x18>)
 801e6fc:	5c18      	ldrb	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 801e6fe:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801e700:	2002      	movs	r0, #2
}
 801e702:	bd08      	pop	{r3, pc}
 801e704:	0802c988 	.word	0x0802c988

0801e708 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801e708:	b530      	push	{r4, r5, lr}
 801e70a:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801e70c:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
{
 801e710:	f89d 5020 	ldrb.w	r5, [sp, #32]
 801e714:	9c09      	ldr	r4, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801e716:	9500      	str	r5, [sp, #0]
 801e718:	9401      	str	r4, [sp, #4]
{
 801e71a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801e71e:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801e722:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801e726:	f7e7 fa5b 	bl	8005be0 <HAL_HCD_HC_SubmitRequest>
 801e72a:	2803      	cmp	r0, #3
 801e72c:	d803      	bhi.n	801e736 <USBH_LL_SubmitURB+0x2e>
 801e72e:	4b03      	ldr	r3, [pc, #12]	; (801e73c <USBH_LL_SubmitURB+0x34>)
 801e730:	5c18      	ldrb	r0, [r3, r0]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 801e732:	b005      	add	sp, #20
 801e734:	bd30      	pop	{r4, r5, pc}
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801e736:	2002      	movs	r0, #2
}
 801e738:	b005      	add	sp, #20
 801e73a:	bd30      	pop	{r4, r5, pc}
 801e73c:	0802c988 	.word	0x0802c988

0801e740 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801e740:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
 801e744:	f7e7 be7e 	b.w	8006444 <HAL_HCD_HC_GetURBState>

0801e748 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801e748:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 801e74a:	f890 353c 	ldrb.w	r3, [r0, #1340]	; 0x53c
 801e74e:	2b01      	cmp	r3, #1
 801e750:	d004      	beq.n	801e75c <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801e752:	20c8      	movs	r0, #200	; 0xc8
 801e754:	f7e2 fa7c 	bl	8000c50 <HAL_Delay>
  return USBH_OK;
}
 801e758:	2000      	movs	r0, #0
 801e75a:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 801e75c:	4608      	mov	r0, r1
 801e75e:	f000 f819 	bl	801e794 <MX_DriverVbusFS>
  HAL_Delay(200);
 801e762:	20c8      	movs	r0, #200	; 0xc8
 801e764:	f7e2 fa74 	bl	8000c50 <HAL_Delay>
}
 801e768:	2000      	movs	r0, #0
 801e76a:	bd08      	pop	{r3, pc}

0801e76c <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801e76c:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540

  if(pHandle->hc[pipe].ep_is_in)
 801e770:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801e774:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801e778:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 801e77c:	b91b      	cbnz	r3, 801e786 <USBH_LL_SetToggle+0x1a>
  {
    pHandle->hc[pipe].toggle_in = toggle;
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801e77e:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
  }

  return USBH_OK;
}
 801e782:	2000      	movs	r0, #0
 801e784:	4770      	bx	lr
    pHandle->hc[pipe].toggle_in = toggle;
 801e786:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
}
 801e78a:	2000      	movs	r0, #0
 801e78c:	4770      	bx	lr
 801e78e:	bf00      	nop

0801e790 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 801e790:	f7e2 ba5e 	b.w	8000c50 <HAL_Delay>

0801e794 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,(GPIO_PinState)data);
 801e794:	fab0 f280 	clz	r2, r0
 801e798:	2140      	movs	r1, #64	; 0x40
 801e79a:	4802      	ldr	r0, [pc, #8]	; (801e7a4 <MX_DriverVbusFS+0x10>)
 801e79c:	0952      	lsrs	r2, r2, #5
 801e79e:	f7e7 b957 	b.w	8005a50 <HAL_GPIO_WritePin>
 801e7a2:	bf00      	nop
 801e7a4:	58021400 	.word	0x58021400

0801e7a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801e7a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 801e7e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801e7ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801e7ae:	e003      	b.n	801e7b8 <LoopCopyDataInit>

0801e7b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801e7b0:	4b0c      	ldr	r3, [pc, #48]	; (801e7e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801e7b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801e7b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801e7b6:	3104      	adds	r1, #4

0801e7b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801e7b8:	480b      	ldr	r0, [pc, #44]	; (801e7e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801e7ba:	4b0c      	ldr	r3, [pc, #48]	; (801e7ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801e7bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801e7be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801e7c0:	d3f6      	bcc.n	801e7b0 <CopyDataInit>
  ldr  r2, =_sbss
 801e7c2:	4a0b      	ldr	r2, [pc, #44]	; (801e7f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801e7c4:	e002      	b.n	801e7cc <LoopFillZerobss>

0801e7c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801e7c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801e7c8:	f842 3b04 	str.w	r3, [r2], #4

0801e7cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801e7cc:	4b09      	ldr	r3, [pc, #36]	; (801e7f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801e7ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801e7d0:	d3f9      	bcc.n	801e7c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801e7d2:	f7fd fea1 	bl	801c518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801e7d6:	f008 fe67 	bl	80274a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801e7da:	f7f5 f8ab 	bl	8013934 <main>
  bx  lr    
 801e7de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801e7e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 801e7e4:	0804caf0 	.word	0x0804caf0
  ldr  r0, =_sdata
 801e7e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801e7ec:	2000049c 	.word	0x2000049c
  ldr  r2, =_sbss
 801e7f0:	200004a0 	.word	0x200004a0
  ldr  r3, = _ebss
 801e7f4:	200194d0 	.word	0x200194d0

0801e7f8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801e7f8:	e7fe      	b.n	801e7f8 <ADC3_IRQHandler>
 801e7fa:	0000      	movs	r0, r0
 801e7fc:	0000      	movs	r0, r0
	...

0801e800 <mayer_fht>:
 REAL f0,g0,f1,g1,f2,g2,f3,g3; */
 int  k,k1,k2,k3,k4,kx;
 REAL *fi,*fn,*gi;
 TRIG_VARS;

 for (k1=1,k2=0;k1<n;k1++)
 801e800:	2901      	cmp	r1, #1
{
 801e802:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e806:	ed2d 8b02 	vpush	{d8}
 801e80a:	b08b      	sub	sp, #44	; 0x2c
 for (k1=1,k2=0;k1<n;k1++)
 801e80c:	f340 822d 	ble.w	801ec6a <mayer_fht+0x46a>
    {
     REAL aa;
     for (k=n>>1; (!((k2^=k)&k)); k>>=1);
 801e810:	ea4f 0c61 	mov.w	ip, r1, asr #1
 801e814:	1d07      	adds	r7, r0, #4
 for (k1=1,k2=0;k1<n;k1++)
 801e816:	2400      	movs	r4, #0
 801e818:	2601      	movs	r6, #1
     for (k=n>>1; (!((k2^=k)&k)); k>>=1);
 801e81a:	ea3c 0304 	bics.w	r3, ip, r4
 801e81e:	ea8c 0204 	eor.w	r2, ip, r4
 801e822:	f040 8220 	bne.w	801ec66 <mayer_fht+0x466>
 801e826:	4663      	mov	r3, ip
 801e828:	105b      	asrs	r3, r3, #1
 801e82a:	ea83 0402 	eor.w	r4, r3, r2
 801e82e:	ea23 0502 	bic.w	r5, r3, r2
 801e832:	4622      	mov	r2, r4
 801e834:	2d00      	cmp	r5, #0
 801e836:	d0f7      	beq.n	801e828 <mayer_fht+0x28>
     if (k1>k2)
 801e838:	42b4      	cmp	r4, r6
 801e83a:	da05      	bge.n	801e848 <mayer_fht+0x48>
        {
             aa=fz[k1];fz[k1]=fz[k2];fz[k2]=aa;
 801e83c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 801e840:	683a      	ldr	r2, [r7, #0]
 801e842:	681d      	ldr	r5, [r3, #0]
 801e844:	603d      	str	r5, [r7, #0]
 801e846:	601a      	str	r2, [r3, #0]
 for (k1=1,k2=0;k1<n;k1++)
 801e848:	3601      	adds	r6, #1
 801e84a:	3704      	adds	r7, #4
 801e84c:	42b1      	cmp	r1, r6
 801e84e:	d1e4      	bne.n	801e81a <mayer_fht+0x1a>
        }
    }
 for ( k=0 ; (1<<k)<n ; k++ );
 801e850:	2300      	movs	r3, #0
 801e852:	2401      	movs	r4, #1
 801e854:	3301      	adds	r3, #1
 801e856:	fa04 f203 	lsl.w	r2, r4, r3
 801e85a:	42b2      	cmp	r2, r6
 801e85c:	dbfa      	blt.n	801e854 <mayer_fht+0x54>
 k  &= 1;
 if (k==0)
 801e85e:	f013 0301 	ands.w	r3, r3, #1
 801e862:	eb00 0a86 	add.w	sl, r0, r6, lsl #2
 801e866:	9301      	str	r3, [sp, #4]
 801e868:	f000 8201 	beq.w	801ec6e <mayer_fht+0x46e>
             fi[1 ] = (f1+f3);
            }
    }
 else
    {
         for (fi=fz,fn=fz+n,gi=fi+1;fi<fn;fi+=8,gi+=8)
 801e86c:	4550      	cmp	r0, sl
 801e86e:	d266      	bcs.n	801e93e <mayer_fht+0x13e>
 801e870:	f100 0320 	add.w	r3, r0, #32
 801e874:	f100 0440 	add.w	r4, r0, #64	; 0x40
 801e878:	f1c3 021f 	rsb	r2, r3, #31
 801e87c:	4452      	add	r2, sl
 801e87e:	f022 021f 	bic.w	r2, r2, #31
             bf0     = (bs1 + bs2);
             bg1     = (bc1 - bc2);     
             bg0     = (bc1 + bc2);
             bf3     = (bs3 - bs4);     
             bf2     = (bs3 + bs4);
             bg3     = SQRT2*bc4;               
 801e882:	ed9f 3be9 	vldr	d3, [pc, #932]	; 801ec28 <mayer_fht+0x428>
 801e886:	4422      	add	r2, r4
             bc3     = fi[4 ] - gi[4 ];
 801e888:	ed53 7a03 	vldr	s15, [r3, #-12]
 801e88c:	3320      	adds	r3, #32
             bc4     = fi[6 ] - gi[6 ];
 801e88e:	ed13 6a0a 	vldr	s12, [r3, #-40]	; 0xffffffd8
 801e892:	ed13 7a09 	vldr	s14, [r3, #-36]	; 0xffffffdc
             bc3     = fi[4 ] - gi[4 ];
 801e896:	ed53 6a0c 	vldr	s13, [r3, #-48]	; 0xffffffd0
             bc4     = fi[6 ] - gi[6 ];
 801e89a:	ee36 2a47 	vsub.f32	s4, s12, s14
             bc1     = fi[0 ] - gi[0 ];
 801e89e:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
             bc3     = fi[4 ] - gi[4 ];
 801e8a2:	ee36 0ae7 	vsub.f32	s0, s13, s15
             bc2     = fi[2 ] - gi[2 ];
 801e8a6:	ed53 4a0e 	vldr	s9, [r3, #-56]	; 0xffffffc8
             bc1     = fi[0 ] - gi[0 ];
 801e8aa:	ed13 5a10 	vldr	s10, [r3, #-64]	; 0xffffffc0
             bs3     = fi[4 ] + gi[4 ];
 801e8ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
             bg3     = SQRT2*bc4;               
 801e8b2:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
             bc2     = fi[2 ] - gi[2 ];
 801e8b6:	ed53 7a0d 	vldr	s15, [r3, #-52]	; 0xffffffcc
             bg2     = SQRT2*bc3;
 801e8ba:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
             bc1     = fi[0 ] - gi[0 ];
 801e8be:	ee75 1a65 	vsub.f32	s3, s10, s11
             bg3     = SQRT2*bc4;               
 801e8c2:	ee22 2b03 	vmul.f64	d2, d2, d3
             bg2     = SQRT2*bc3;
 801e8c6:	ee20 0b03 	vmul.f64	d0, d0, d3
             bc2     = fi[2 ] - gi[2 ];
 801e8ca:	ee34 4ae7 	vsub.f32	s8, s9, s15
             bs1     = fi[0 ] + gi[0 ];
 801e8ce:	ee35 5a25 	vadd.f32	s10, s10, s11
             bg3     = SQRT2*bc4;               
 801e8d2:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
             bs2     = fi[2 ] + gi[2 ];
 801e8d6:	ee74 5aa7 	vadd.f32	s11, s9, s15
             bg2     = SQRT2*bc3;
 801e8da:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
             bs4     = fi[6 ] + gi[6 ];
 801e8de:	ee76 7a07 	vadd.f32	s15, s12, s14
             bg0     = (bc1 + bc2);
 801e8e2:	ee31 1a84 	vadd.f32	s2, s3, s8
             bg1     = (bc1 - bc2);     
 801e8e6:	ee71 4ac4 	vsub.f32	s9, s3, s8
             bf1     = (bs1 - bs2);     
 801e8ea:	ee35 7a65 	vsub.f32	s14, s10, s11
             bf2     = (bs3 + bs4);
 801e8ee:	ee36 6aa7 	vadd.f32	s12, s13, s15
             bf0     = (bs1 + bs2);
 801e8f2:	ee75 5a25 	vadd.f32	s11, s10, s11
             bf3     = (bs3 - bs4);     
 801e8f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
             fi[4 ] = bf0 - bf2;
             fi[0 ] = bf0 + bf2;
             fi[6 ] = bf1 - bf3;
             fi[2 ] = bf1 + bf3;
             gi[4 ] = bg0 - bg2;
 801e8fa:	ee31 5a40 	vsub.f32	s10, s2, s0
             gi[0 ] = bg0 + bg2;
             gi[6 ] = bg1 - bg3;
 801e8fe:	ee74 6ac2 	vsub.f32	s13, s9, s4
             gi[0 ] = bg0 + bg2;
 801e902:	ee31 0a00 	vadd.f32	s0, s2, s0
             gi[4 ] = bg0 - bg2;
 801e906:	ed03 5a0b 	vstr	s10, [r3, #-44]	; 0xffffffd4
             gi[2 ] = bg1 + bg3;
 801e90a:	ee34 2a82 	vadd.f32	s4, s9, s4
             gi[6 ] = bg1 - bg3;
 801e90e:	ed43 6a09 	vstr	s13, [r3, #-36]	; 0xffffffdc
             fi[4 ] = bf0 - bf2;
 801e912:	ee35 5ac6 	vsub.f32	s10, s11, s12
             fi[6 ] = bf1 - bf3;
 801e916:	ee77 6a67 	vsub.f32	s13, s14, s15
             gi[0 ] = bg0 + bg2;
 801e91a:	ed03 0a0f 	vstr	s0, [r3, #-60]	; 0xffffffc4
             fi[0 ] = bf0 + bf2;
 801e91e:	ee35 6a86 	vadd.f32	s12, s11, s12
             gi[2 ] = bg1 + bg3;
 801e922:	ed03 2a0d 	vstr	s4, [r3, #-52]	; 0xffffffcc
             fi[2 ] = bf1 + bf3;
 801e926:	ee77 7a27 	vadd.f32	s15, s14, s15
             fi[4 ] = bf0 - bf2;
 801e92a:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
             fi[6 ] = bf1 - bf3;
 801e92e:	ed43 6a0a 	vstr	s13, [r3, #-40]	; 0xffffffd8
             fi[0 ] = bf0 + bf2;
 801e932:	ed03 6a10 	vstr	s12, [r3, #-64]	; 0xffffffc0
             fi[2 ] = bf1 + bf3;
 801e936:	ed43 7a0e 	vstr	s15, [r3, #-56]	; 0xffffffc8
         for (fi=fz,fn=fz+n,gi=fi+1;fi<fn;fi+=8,gi+=8)
 801e93a:	429a      	cmp	r2, r3
 801e93c:	d1a4      	bne.n	801e888 <mayer_fht+0x88>
            }
    }
 if (n<16) return;
 801e93e:	290f      	cmp	r1, #15
 801e940:	f340 818c 	ble.w	801ec5c <mayer_fht+0x45c>
 801e944:	9b01      	ldr	r3, [sp, #4]
 801e946:	3301      	adds	r3, #1
             fi[0 ]  = f0         + f2;
             fi[k3]  = f1         - f3;
             fi[k1]  = f1         + f3;
             g1      = gi[0 ] - gi[k1];
             g0      = gi[0 ] + gi[k1];
             g3      = SQRT2  * gi[k3];
 801e948:	ed9f 8bb7 	vldr	d8, [pc, #732]	; 801ec28 <mayer_fht+0x428>
 801e94c:	009b      	lsls	r3, r3, #2
 801e94e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801e952:	9306      	str	r3, [sp, #24]
     k  += 2;
 801e954:	9901      	ldr	r1, [sp, #4]
     k1  = 1  << k;
 801e956:	2501      	movs	r5, #1
             f1      = fi[0 ] - fi[k1];
 801e958:	2204      	movs	r2, #4
             g2      = SQRT2  * gi[k2];
             gi[k2]  = g0         - g2;
             gi[0 ]  = g0         + g2;
             gi[k3]  = g1         - g3;
             gi[k1]  = g1         + g3;
             gi     += k4;
 801e95a:	9808      	ldr	r0, [sp, #32]
     k  += 2;
 801e95c:	3102      	adds	r1, #2
             gi     += k4;
 801e95e:	4603      	mov	r3, r0
     k1  = 1  << k;
 801e960:	408d      	lsls	r5, r1
             f1      = fi[0 ] - fi[k1];
 801e962:	fa02 f401 	lsl.w	r4, r2, r1
     k  += 2;
 801e966:	9101      	str	r1, [sp, #4]
     kx  = k1 >> 1;
 801e968:	106f      	asrs	r7, r5, #1
 801e96a:	eb00 0e04 	add.w	lr, r0, r4
     k3  = k2 + k1;
 801e96e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
             f1      = fi[0 ] - fi[k1];
 801e972:	9403      	str	r4, [sp, #12]
         gi  = fi + kx;
 801e974:	eb00 0287 	add.w	r2, r0, r7, lsl #2
     kx  = k1 >> 1;
 801e978:	9702      	str	r7, [sp, #8]
             f3      = fi[k2] - fi[k3];
 801e97a:	0089      	lsls	r1, r1, #2
 801e97c:	00ee      	lsls	r6, r5, #3
 801e97e:	eb02 0c04 	add.w	ip, r2, r4
 801e982:	460c      	mov	r4, r1
 801e984:	9105      	str	r1, [sp, #20]
 801e986:	9604      	str	r6, [sp, #16]
 801e988:	1857      	adds	r7, r2, r1
 801e98a:	1906      	adds	r6, r0, r4
 801e98c:	4601      	mov	r1, r0
 801e98e:	00ec      	lsls	r4, r5, #3
 801e990:	1910      	adds	r0, r2, r4
 801e992:	4421      	add	r1, r4
     k4  = k2 << 1;
 801e994:	00ac      	lsls	r4, r5, #2
 801e996:	9407      	str	r4, [sp, #28]
             gi     += k4;
 801e998:	012c      	lsls	r4, r5, #4
             f1      = fi[0 ] - fi[k1];
 801e99a:	ed93 6a00 	vldr	s12, [r3]
             f3      = fi[k2] - fi[k3];
 801e99e:	edd6 6a00 	vldr	s13, [r6]
             f1      = fi[0 ] - fi[k1];
 801e9a2:	ed9e 7a00 	vldr	s14, [lr]
             f3      = fi[k2] - fi[k3];
 801e9a6:	edd1 7a00 	vldr	s15, [r1]
             f0      = fi[0 ] + fi[k1];
 801e9aa:	ee76 5a07 	vadd.f32	s11, s12, s14
             f1      = fi[0 ] - fi[k1];
 801e9ae:	ee36 7a47 	vsub.f32	s14, s12, s14
             f2      = fi[k2] + fi[k3];
 801e9b2:	ee37 6aa6 	vadd.f32	s12, s15, s13
             f3      = fi[k2] - fi[k3];
 801e9b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
             fi[k2]  = f0         - f2;
 801e9ba:	ee35 5ac6 	vsub.f32	s10, s11, s12
             fi[k3]  = f1         - f3;
 801e9be:	ee77 6a67 	vsub.f32	s13, s14, s15
             fi[0 ]  = f0         + f2;
 801e9c2:	ee35 6a86 	vadd.f32	s12, s11, s12
             fi[k1]  = f1         + f3;
 801e9c6:	ee77 7a27 	vadd.f32	s15, s14, s15
             fi[k2]  = f0         - f2;
 801e9ca:	ed81 5a00 	vstr	s10, [r1]
 801e9ce:	4421      	add	r1, r4
             fi[0 ]  = f0         + f2;
 801e9d0:	ed83 6a00 	vstr	s12, [r3]
             fi     += k4;
 801e9d4:	4423      	add	r3, r4
             fi[k3]  = f1         - f3;
 801e9d6:	edc6 6a00 	vstr	s13, [r6]
 801e9da:	4426      	add	r6, r4
             fi[k1]  = f1         + f3;
 801e9dc:	edce 7a00 	vstr	s15, [lr]
            } while (fi<fn);
 801e9e0:	4553      	cmp	r3, sl
             g2      = SQRT2  * gi[k2];
 801e9e2:	ed90 5a00 	vldr	s10, [r0]
 801e9e6:	44a6      	add	lr, r4
             g3      = SQRT2  * gi[k3];
 801e9e8:	ed97 7a00 	vldr	s14, [r7]
             g2      = SQRT2  * gi[k2];
 801e9ec:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
             g1      = gi[0 ] - gi[k1];
 801e9f0:	ed92 6a00 	vldr	s12, [r2]
             g3      = SQRT2  * gi[k3];
 801e9f4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
             g1      = gi[0 ] - gi[k1];
 801e9f8:	eddc 6a00 	vldr	s13, [ip]
             g2      = SQRT2  * gi[k2];
 801e9fc:	ee25 5b08 	vmul.f64	d5, d5, d8
             g3      = SQRT2  * gi[k3];
 801ea00:	ee27 7b08 	vmul.f64	d7, d7, d8
             g2      = SQRT2  * gi[k2];
 801ea04:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
             g0      = gi[0 ] + gi[k1];
 801ea08:	ee76 5a26 	vadd.f32	s11, s12, s13
             g1      = gi[0 ] - gi[k1];
 801ea0c:	ee76 6a66 	vsub.f32	s13, s12, s13
             g3      = SQRT2  * gi[k3];
 801ea10:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
             gi[k2]  = g0         - g2;
 801ea14:	ee35 6ac5 	vsub.f32	s12, s11, s10
             gi[0 ]  = g0         + g2;
 801ea18:	ee35 5a85 	vadd.f32	s10, s11, s10
             gi[k3]  = g1         - g3;
 801ea1c:	ee76 7ac7 	vsub.f32	s15, s13, s14
             gi[k1]  = g1         + g3;
 801ea20:	ee36 7a87 	vadd.f32	s14, s13, s14
             gi[k2]  = g0         - g2;
 801ea24:	ed80 6a00 	vstr	s12, [r0]
             gi[0 ]  = g0         + g2;
 801ea28:	ed82 5a00 	vstr	s10, [r2]
 801ea2c:	4420      	add	r0, r4
             gi[k3]  = g1         - g3;
 801ea2e:	edc7 7a00 	vstr	s15, [r7]
             gi     += k4;
 801ea32:	4422      	add	r2, r4
             gi[k1]  = g1         + g3;
 801ea34:	ed8c 7a00 	vstr	s14, [ip]
 801ea38:	4427      	add	r7, r4
 801ea3a:	44a4      	add	ip, r4
            } while (fi<fn);
 801ea3c:	d3ad      	bcc.n	801e99a <mayer_fht+0x19a>
 801ea3e:	9e06      	ldr	r6, [sp, #24]
 801ea40:	497b      	ldr	r1, [pc, #492]	; (801ec30 <mayer_fht+0x430>)
 801ea42:	4632      	mov	r2, r6
 801ea44:	487b      	ldr	r0, [pc, #492]	; (801ec34 <mayer_fht+0x434>)
 801ea46:	f008 fd6d 	bl	8027524 <memcpy>
 801ea4a:	4632      	mov	r2, r6
 801ea4c:	497a      	ldr	r1, [pc, #488]	; (801ec38 <mayer_fht+0x438>)
 801ea4e:	487b      	ldr	r0, [pc, #492]	; (801ec3c <mayer_fht+0x43c>)
 801ea50:	f008 fd68 	bl	8027524 <memcpy>
     TRIG_INIT(k,c1,s1);
     for (ii=1;ii<kx;ii++)
 801ea54:	9b02      	ldr	r3, [sp, #8]
 801ea56:	2b01      	cmp	r3, #1
 801ea58:	f340 80f8 	ble.w	801ec4c <mayer_fht+0x44c>
 801ea5c:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
 801ea60:	9a08      	ldr	r2, [sp, #32]
        {
         REAL c2,s2;
         TRIG_NEXT(k,c1,s1);
 801ea62:	f04f 0e01 	mov.w	lr, #1
 801ea66:	2300      	movs	r3, #0
 801ea68:	44a8      	add	r8, r5
 801ea6a:	f102 0904 	add.w	r9, r2, #4
 801ea6e:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 801ec48 <mayer_fht+0x448>
 801ea72:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801ea76:	9a01      	ldr	r2, [sp, #4]
 801ea78:	4871      	ldr	r0, [pc, #452]	; (801ec40 <mayer_fht+0x440>)
 801ea7a:	1ad2      	subs	r2, r2, r3
 801ea7c:	0091      	lsls	r1, r2, #2
 801ea7e:	2a01      	cmp	r2, #1
 801ea80:	eb0b 0501 	add.w	r5, fp, r1
 801ea84:	4408      	add	r0, r1
 801ea86:	ed95 2a00 	vldr	s4, [r5]
 801ea8a:	edd0 2a00 	vldr	s5, [r0]
 801ea8e:	dd30      	ble.n	801eaf2 <mayer_fht+0x2f2>
 801ea90:	3302      	adds	r3, #2
 801ea92:	fa4e f003 	asr.w	r0, lr, r3
 801ea96:	07c5      	lsls	r5, r0, #31
 801ea98:	d504      	bpl.n	801eaa4 <mayer_fht+0x2a4>
 801ea9a:	3301      	adds	r3, #1
 801ea9c:	fa4e f003 	asr.w	r0, lr, r3
 801eaa0:	07c0      	lsls	r0, r0, #31
 801eaa2:	d4fa      	bmi.n	801ea9a <mayer_fht+0x29a>
 801eaa4:	9801      	ldr	r0, [sp, #4]
 801eaa6:	3a01      	subs	r2, #1
 801eaa8:	4e65      	ldr	r6, [pc, #404]	; (801ec40 <mayer_fht+0x440>)
 801eaaa:	1ac3      	subs	r3, r0, r3
 801eaac:	4865      	ldr	r0, [pc, #404]	; (801ec44 <mayer_fht+0x444>)
 801eaae:	0092      	lsls	r2, r2, #2
 801eab0:	4408      	add	r0, r1
 801eab2:	009b      	lsls	r3, r3, #2
 801eab4:	eb0b 0502 	add.w	r5, fp, r2
 801eab8:	4432      	add	r2, r6
 801eaba:	edd0 7a00 	vldr	s15, [r0]
 801eabe:	eb0b 0003 	add.w	r0, fp, r3
 801eac2:	4433      	add	r3, r6
 801eac4:	edd2 6a00 	vldr	s13, [r2]
 801eac8:	ed90 6a00 	vldr	s12, [r0]
 801eacc:	eb0b 0001 	add.w	r0, fp, r1
 801ead0:	edd5 5a00 	vldr	s11, [r5]
 801ead4:	4431      	add	r1, r6
 801ead6:	ed93 7a00 	vldr	s14, [r3]
 801eada:	ee35 6a86 	vadd.f32	s12, s11, s12
 801eade:	ee36 7a87 	vadd.f32	s14, s13, s14
 801eae2:	ee66 6a27 	vmul.f32	s13, s12, s15
 801eae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eaea:	edc0 6a00 	vstr	s13, [r0]
 801eaee:	edc1 7a00 	vstr	s15, [r1]
 801eaf2:	9a03      	ldr	r2, [sp, #12]
         c2 = c1*c1 - s1*s1;
 801eaf4:	ee22 3a42 	vnmul.f32	s6, s4, s4
         s2 = 2*(c1*s1);
 801eaf8:	ee62 3a22 	vmul.f32	s7, s4, s5
             fn = fz + n;
             fi = fz +ii;
 801eafc:	464b      	mov	r3, r9
 801eafe:	eb02 0709 	add.w	r7, r2, r9
 801eb02:	eb02 0608 	add.w	r6, r2, r8
 801eb06:	9a05      	ldr	r2, [sp, #20]
         c2 = c1*c1 - s1*s1;
 801eb08:	eea2 3aa2 	vfma.f32	s6, s5, s5
         s2 = 2*(c1*s1);
 801eb0c:	ee73 3aa3 	vadd.f32	s7, s7, s7
             gi = fz +k1-ii;
 801eb10:	46c4      	mov	ip, r8
 801eb12:	eb02 0509 	add.w	r5, r2, r9
 801eb16:	eb02 0008 	add.w	r0, r2, r8
 801eb1a:	9a04      	ldr	r2, [sp, #16]
 801eb1c:	4611      	mov	r1, r2
 801eb1e:	4442      	add	r2, r8
 801eb20:	4449      	add	r1, r9
                 a       = c2*fi[k1] + s2*gi[k1];
                 f1      = fi[0 ]    - a;
                 f0      = fi[0 ]    + a;
                 g1      = gi[0 ]    - b;
                 g0      = gi[0 ]    + b;
                 b       = s2*fi[k3] - c2*gi[k3];
 801eb22:	edd0 4a00 	vldr	s9, [r0]
 801eb26:	edd5 7a00 	vldr	s15, [r5]
 801eb2a:	ee63 1a64 	vnmul.f32	s3, s6, s9
                 a       = c2*fi[k3] + s2*gi[k3];
                 f3      = fi[k2]    - a;
                 f2      = fi[k2]    + a;
                 g3      = gi[k2]    - b;
 801eb2e:	ed92 1a00 	vldr	s2, [r2]
                 a       = c2*fi[k3] + s2*gi[k3];
 801eb32:	ee64 4aa3 	vmul.f32	s9, s9, s7
                 b       = s2*fi[k1] - c2*gi[k1];
 801eb36:	edd6 5a00 	vldr	s11, [r6]
                 f3      = fi[k2]    - a;
 801eb3a:	ed91 6a00 	vldr	s12, [r1]
                 b       = s2*fi[k3] - c2*gi[k3];
 801eb3e:	eee7 1aa3 	vfma.f32	s3, s15, s7
                 b       = s2*fi[k1] - c2*gi[k1];
 801eb42:	ed97 0a00 	vldr	s0, [r7]
                 a       = c2*fi[k3] + s2*gi[k3];
 801eb46:	eee7 4a83 	vfma.f32	s9, s15, s6
                 f1      = fi[0 ]    - a;
 801eb4a:	edd3 6a00 	vldr	s13, [r3]
                 a       = c2*fi[k1] + s2*gi[k1];
 801eb4e:	ee25 7aa3 	vmul.f32	s14, s11, s7
                 g1      = gi[0 ]    - b;
 801eb52:	ed9c 5a00 	vldr	s10, [ip]
                 b       = s2*fi[k1] - c2*gi[k1];
 801eb56:	ee63 5a65 	vnmul.f32	s11, s6, s11
                 a       = c2*fi[k1] + s2*gi[k1];
 801eb5a:	eea0 7a03 	vfma.f32	s14, s0, s6
                 g3      = gi[k2]    - b;
 801eb5e:	ee31 4a61 	vsub.f32	s8, s2, s3
                 f3      = fi[k2]    - a;
 801eb62:	ee76 7a64 	vsub.f32	s15, s12, s9
                 g2      = gi[k2]    + b;
 801eb66:	ee71 1a21 	vadd.f32	s3, s2, s3
                 b       = s1*f2     - c1*g3;
                 a       = c1*f2     + s1*g3;
 801eb6a:	ee62 0a04 	vmul.f32	s1, s4, s8
                 f2      = fi[k2]    + a;
 801eb6e:	ee76 4a24 	vadd.f32	s9, s12, s9
                 b       = s1*f2     - c1*g3;
 801eb72:	ee24 4a62 	vnmul.f32	s8, s8, s5
                 a       = c1*f2     + s1*g3;
 801eb76:	eeb0 1a60 	vmov.f32	s2, s1
                 b       = s2*fi[k1] - c2*gi[k1];
 801eb7a:	eee0 5a23 	vfma.f32	s11, s0, s7
                 fi[k2]  = f0        - a;
                 fi[0 ]  = f0        + a;
                 gi[k3]  = g1        - b;
                 gi[k1]  = g1        + b;
                 b       = c1*g2     - s1*f3;
                 a       = s1*g2     + c1*f3;
 801eb7e:	ee22 6aa7 	vmul.f32	s12, s5, s15
                 a       = c1*f2     + s1*g3;
 801eb82:	eea2 1aa4 	vfma.f32	s2, s5, s9
                 b       = s1*f2     - c1*g3;
 801eb86:	eea2 4a24 	vfma.f32	s8, s4, s9
                 b       = c1*g2     - s1*f3;
 801eb8a:	ee67 7ac2 	vnmul.f32	s15, s15, s4
                 a       = s1*g2     + c1*f3;
 801eb8e:	eea2 6a21 	vfma.f32	s12, s4, s3
                 b       = c1*g2     - s1*f3;
 801eb92:	eee2 7aa1 	vfma.f32	s15, s5, s3
                 f0      = fi[0 ]    + a;
 801eb96:	ee76 1a87 	vadd.f32	s3, s13, s14
                 b       = s1*f2     - c1*g3;
 801eb9a:	eef0 4a44 	vmov.f32	s9, s8
                 f1      = fi[0 ]    - a;
 801eb9e:	ee36 7ac7 	vsub.f32	s14, s13, s14
                 g1      = gi[0 ]    - b;
 801eba2:	ee35 4a65 	vsub.f32	s8, s10, s11
                 g0      = gi[0 ]    + b;
 801eba6:	ee75 6a25 	vadd.f32	s13, s10, s11
                 fi[k2]  = f0        - a;
 801ebaa:	ee71 5ac1 	vsub.f32	s11, s3, s2
                 fi[0 ]  = f0        + a;
 801ebae:	ee31 1a81 	vadd.f32	s2, s3, s2
                 gi[k3]  = g1        - b;
 801ebb2:	ee34 5a64 	vsub.f32	s10, s8, s9
                 fi[k2]  = f0        - a;
 801ebb6:	edc1 5a00 	vstr	s11, [r1]
                 gi[k1]  = g1        + b;
 801ebba:	ee74 4a24 	vadd.f32	s9, s8, s9
                 fi[0 ]  = f0        + a;
 801ebbe:	ed83 1a00 	vstr	s2, [r3]
                 gi[k2]  = g0        - a;
                 gi[0 ]  = g0        + a;
                 fi[k3]  = f1        - b;
                 fi[k1]  = f1        + b;
                 gi     += k4;
                 fi     += k4;
 801ebc2:	4423      	add	r3, r4
                 gi[k2]  = g0        - a;
 801ebc4:	ee76 5ac6 	vsub.f32	s11, s13, s12
                 gi[k3]  = g1        - b;
 801ebc8:	ed80 5a00 	vstr	s10, [r0]
                 gi[0 ]  = g0        + a;
 801ebcc:	ee36 6a86 	vadd.f32	s12, s13, s12
                } while (fi<fn);
 801ebd0:	4553      	cmp	r3, sl
                 fi[k3]  = f1        - b;
 801ebd2:	ee77 6a67 	vsub.f32	s13, s14, s15
                 gi[k1]  = g1        + b;
 801ebd6:	edc6 4a00 	vstr	s9, [r6]
                 fi[k1]  = f1        + b;
 801ebda:	ee77 7a27 	vadd.f32	s15, s14, s15
                 gi[k2]  = g0        - a;
 801ebde:	edc2 5a00 	vstr	s11, [r2]
 801ebe2:	4421      	add	r1, r4
                 gi[0 ]  = g0        + a;
 801ebe4:	ed8c 6a00 	vstr	s12, [ip]
 801ebe8:	4420      	add	r0, r4
                 fi[k3]  = f1        - b;
 801ebea:	edc5 6a00 	vstr	s13, [r5]
 801ebee:	4426      	add	r6, r4
                 fi[k1]  = f1        + b;
 801ebf0:	edc7 7a00 	vstr	s15, [r7]
 801ebf4:	4422      	add	r2, r4
                 gi     += k4;
 801ebf6:	44a4      	add	ip, r4
 801ebf8:	4425      	add	r5, r4
 801ebfa:	4427      	add	r7, r4
                } while (fi<fn);
 801ebfc:	d391      	bcc.n	801eb22 <mayer_fht+0x322>
     for (ii=1;ii<kx;ii++)
 801ebfe:	f10e 0e01 	add.w	lr, lr, #1
 801ec02:	9b02      	ldr	r3, [sp, #8]
 801ec04:	4573      	cmp	r3, lr
 801ec06:	d021      	beq.n	801ec4c <mayer_fht+0x44c>
         TRIG_NEXT(k,c1,s1);
 801ec08:	f01e 0301 	ands.w	r3, lr, #1
 801ec0c:	d161      	bne.n	801ecd2 <mayer_fht+0x4d2>
 801ec0e:	3301      	adds	r3, #1
 801ec10:	fa4e f203 	asr.w	r2, lr, r3
 801ec14:	07d6      	lsls	r6, r2, #31
 801ec16:	d5fa      	bpl.n	801ec0e <mayer_fht+0x40e>
 801ec18:	f109 0904 	add.w	r9, r9, #4
 801ec1c:	f1a8 0804 	sub.w	r8, r8, #4
 801ec20:	e729      	b.n	801ea76 <mayer_fht+0x276>
 801ec22:	bf00      	nop
 801ec24:	f3af 8000 	nop.w
 801ec28:	667f3bcd 	.word	0x667f3bcd
 801ec2c:	3ff6a09e 	.word	0x3ff6a09e
 801ec30:	0802c994 	.word	0x0802c994
 801ec34:	200002f8 	.word	0x200002f8
 801ec38:	0802ca34 	.word	0x0802ca34
 801ec3c:	20000348 	.word	0x20000348
 801ec40:	200002f0 	.word	0x200002f0
 801ec44:	0802c9dc 	.word	0x0802c9dc
 801ec48:	20000340 	.word	0x20000340
 801ec4c:	9b06      	ldr	r3, [sp, #24]
        }
     TRIG_RESET(k,c1,s1);
    } while (k4<n);
 801ec4e:	9a07      	ldr	r2, [sp, #28]
 801ec50:	3308      	adds	r3, #8
 801ec52:	9306      	str	r3, [sp, #24]
 801ec54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec56:	4293      	cmp	r3, r2
 801ec58:	f73f ae7c 	bgt.w	801e954 <mayer_fht+0x154>
}
 801ec5c:	b00b      	add	sp, #44	; 0x2c
 801ec5e:	ecbd 8b02 	vpop	{d8}
 801ec62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     for (k=n>>1; (!((k2^=k)&k)); k>>=1);
 801ec66:	4614      	mov	r4, r2
 801ec68:	e5e6      	b.n	801e838 <mayer_fht+0x38>
 801ec6a:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
         for (fi=fz,fn=fz+n;fi<fn;fi+=4)
 801ec6e:	4550      	cmp	r0, sl
 801ec70:	d22c      	bcs.n	801eccc <mayer_fht+0x4cc>
 801ec72:	f100 0310 	add.w	r3, r0, #16
 801ec76:	f100 0420 	add.w	r4, r0, #32
 801ec7a:	f1c3 020f 	rsb	r2, r3, #15
 801ec7e:	4452      	add	r2, sl
 801ec80:	f022 020f 	bic.w	r2, r2, #15
 801ec84:	4422      	add	r2, r4
             f1     = fi[0 ]-fi[1 ];
 801ec86:	ed13 6a03 	vldr	s12, [r3, #-12]
 801ec8a:	3310      	adds	r3, #16
             f3     = fi[2 ]-fi[3 ];
 801ec8c:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
             f1     = fi[0 ]-fi[1 ];
 801ec90:	ed53 5a08 	vldr	s11, [r3, #-32]	; 0xffffffe0
             f3     = fi[2 ]-fi[3 ];
 801ec94:	ed53 7a05 	vldr	s15, [r3, #-20]	; 0xffffffec
             f1     = fi[0 ]-fi[1 ];
 801ec98:	ee35 7ac6 	vsub.f32	s14, s11, s12
             f0     = fi[0 ]+fi[1 ];
 801ec9c:	ee75 5a86 	vadd.f32	s11, s11, s12
             f2     = fi[2 ]+fi[3 ];
 801eca0:	ee36 6aa7 	vadd.f32	s12, s13, s15
             f3     = fi[2 ]-fi[3 ];
 801eca4:	ee76 7ae7 	vsub.f32	s15, s13, s15
             fi[2 ] = (f0-f2);  
 801eca8:	ee35 5ac6 	vsub.f32	s10, s11, s12
             fi[3 ] = (f1-f3);  
 801ecac:	ee77 6a67 	vsub.f32	s13, s14, s15
             fi[0 ] = (f0+f2);
 801ecb0:	ee35 6a86 	vadd.f32	s12, s11, s12
             fi[1 ] = (f1+f3);
 801ecb4:	ee77 7a27 	vadd.f32	s15, s14, s15
             fi[2 ] = (f0-f2);  
 801ecb8:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
             fi[3 ] = (f1-f3);  
 801ecbc:	ed43 6a05 	vstr	s13, [r3, #-20]	; 0xffffffec
             fi[0 ] = (f0+f2);
 801ecc0:	ed03 6a08 	vstr	s12, [r3, #-32]	; 0xffffffe0
             fi[1 ] = (f1+f3);
 801ecc4:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
         for (fi=fz,fn=fz+n;fi<fn;fi+=4)
 801ecc8:	429a      	cmp	r2, r3
 801ecca:	d1dc      	bne.n	801ec86 <mayer_fht+0x486>
 801eccc:	2300      	movs	r3, #0
 801ecce:	9301      	str	r3, [sp, #4]
 801ecd0:	e635      	b.n	801e93e <mayer_fht+0x13e>
         TRIG_NEXT(k,c1,s1);
 801ecd2:	2300      	movs	r3, #0
 801ecd4:	e7a0      	b.n	801ec18 <mayer_fht+0x418>
 801ecd6:	bf00      	nop

0801ecd8 <mayer_realfft>:
  real[i] = (q-t)*0.5;  real[j] = (q+t)*0.5;
 }
}

void mayer_realfft(int n, REAL *real)
{
 801ecd8:	b538      	push	{r3, r4, r5, lr}
 801ecda:	460c      	mov	r4, r1
 801ecdc:	4605      	mov	r5, r0
    REAL a,b;
 int i,j,k;
 mayer_fht(real,n);
 801ecde:	4601      	mov	r1, r0
 801ece0:	4620      	mov	r0, r4
 801ece2:	f7ff fd8d 	bl	801e800 <mayer_fht>
 for (i=1,j=n-1,k=n/2;i<k;i++,j--) {
 801ece6:	2d00      	cmp	r5, #0
 801ece8:	bfb4      	ite	lt
 801ecea:	1c6b      	addlt	r3, r5, #1
 801ecec:	462b      	movge	r3, r5
 801ecee:	105b      	asrs	r3, r3, #1
 801ecf0:	2b01      	cmp	r3, #1
 801ecf2:	dd18      	ble.n	801ed26 <mayer_realfft+0x4e>
  a = real[i];
  b = real[j];
  real[j] = (a-b)*0.5;
 801ecf4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801ecf8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 801ecfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ed00:	1d21      	adds	r1, r4, #4
  a = real[i];
 801ed02:	edd1 7a00 	vldr	s15, [r1]
  b = real[j];
 801ed06:	ed70 6a01 	vldmdb	r0!, {s13}
  real[j] = (a-b)*0.5;
 801ed0a:	ee37 7ae6 	vsub.f32	s14, s15, s13
  real[i] = (a+b)*0.5;
 801ed0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
  real[j] = (a-b)*0.5;
 801ed12:	ee27 7a06 	vmul.f32	s14, s14, s12
  real[i] = (a+b)*0.5;
 801ed16:	ee67 7a86 	vmul.f32	s15, s15, s12
  real[j] = (a-b)*0.5;
 801ed1a:	ed80 7a00 	vstr	s14, [r0]
  real[i] = (a+b)*0.5;
 801ed1e:	ece1 7a01 	vstmia	r1!, {s15}
 for (i=1,j=n-1,k=n/2;i<k;i++,j--) {
 801ed22:	428b      	cmp	r3, r1
 801ed24:	d1ed      	bne.n	801ed02 <mayer_realfft+0x2a>
 }
}
 801ed26:	bd38      	pop	{r3, r4, r5, pc}

0801ed28 <mayer_realifft>:

void mayer_realifft(int n, REAL *real)
{
    REAL a,b;
 int i,j,k;
 for (i=1,j=n-1,k=n/2;i<k;i++,j--) {
 801ed28:	2800      	cmp	r0, #0
{
 801ed2a:	b410      	push	{r4}
 801ed2c:	460c      	mov	r4, r1
 for (i=1,j=n-1,k=n/2;i<k;i++,j--) {
 801ed2e:	bfb4      	ite	lt
 801ed30:	1c41      	addlt	r1, r0, #1
 801ed32:	4601      	movge	r1, r0
 801ed34:	1049      	asrs	r1, r1, #1
 801ed36:	2901      	cmp	r1, #1
 801ed38:	dd12      	ble.n	801ed60 <mayer_realifft+0x38>
 801ed3a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801ed3e:	1d23      	adds	r3, r4, #4
 801ed40:	eb04 0280 	add.w	r2, r4, r0, lsl #2
  a = real[i];
 801ed44:	edd3 7a00 	vldr	s15, [r3]
  b = real[j];
 801ed48:	ed32 7a01 	vldmdb	r2!, {s14}
  real[j] = (a-b);
 801ed4c:	ee77 6ac7 	vsub.f32	s13, s15, s14
  real[i] = (a+b);
 801ed50:	ee77 7a87 	vadd.f32	s15, s15, s14
  real[j] = (a-b);
 801ed54:	edc2 6a00 	vstr	s13, [r2]
  real[i] = (a+b);
 801ed58:	ece3 7a01 	vstmia	r3!, {s15}
 for (i=1,j=n-1,k=n/2;i<k;i++,j--) {
 801ed5c:	4299      	cmp	r1, r3
 801ed5e:	d1f1      	bne.n	801ed44 <mayer_realifft+0x1c>
 }
 mayer_fht(real,n);
 801ed60:	4601      	mov	r1, r0
 801ed62:	4620      	mov	r0, r4
}
 801ed64:	f85d 4b04 	ldr.w	r4, [sp], #4
 mayer_fht(real,n);
 801ed68:	f7ff bd4a 	b.w	801e800 <mayer_fht>

0801ed6c <tEnvelopeFollower_init>:
//===========================================================================
/* Envelope Follower */
//===========================================================================

void    tEnvelopeFollower_init(tEnvelopeFollower* const ef, float attackThreshold, float decayCoeff)
{
 801ed6c:	b538      	push	{r3, r4, r5, lr}
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf.mempool);
}

void    tEnvelopeFollower_initToPool    (tEnvelopeFollower* const ef, float attackThreshold, float decayCoeff, tMempool* const mp)
{
    _tMempool* m = *mp;
 801ed6e:	4b0c      	ldr	r3, [pc, #48]	; (801eda0 <tEnvelopeFollower_init+0x34>)
{
 801ed70:	4605      	mov	r5, r0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 801ed72:	2010      	movs	r0, #16
{
 801ed74:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801ed78:	699c      	ldr	r4, [r3, #24]
{
 801ed7a:	eef0 8a40 	vmov.f32	s17, s0
 801ed7e:	eeb0 8a60 	vmov.f32	s16, s1
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 801ed82:	4621      	mov	r1, r4
 801ed84:	f005 fcfc 	bl	8024780 <mpool_alloc>
    e->mempool = m;
    
    e->y = 0.0f;
 801ed88:	2300      	movs	r3, #0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 801ed8a:	6028      	str	r0, [r5, #0]
    e->mempool = m;
 801ed8c:	6004      	str	r4, [r0, #0]
    e->a_thresh = attackThreshold;
 801ed8e:	edc0 8a02 	vstr	s17, [r0, #8]
    e->d_coeff = decayCoeff;
 801ed92:	ed80 8a03 	vstr	s16, [r0, #12]
    e->y = 0.0f;
 801ed96:	6043      	str	r3, [r0, #4]
}
 801ed98:	ecbd 8b02 	vpop	{d8}
 801ed9c:	bd38      	pop	{r3, r4, r5, pc}
 801ed9e:	bf00      	nop
 801eda0:	200194a0 	.word	0x200194a0

0801eda4 <tEnvelopeFollower_initToPool>:
{
 801eda4:	b538      	push	{r3, r4, r5, lr}
 801eda6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801edaa:	680c      	ldr	r4, [r1, #0]
{
 801edac:	eef0 8a40 	vmov.f32	s17, s0
 801edb0:	eeb0 8a60 	vmov.f32	s16, s1
 801edb4:	4605      	mov	r5, r0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 801edb6:	4621      	mov	r1, r4
 801edb8:	2010      	movs	r0, #16
 801edba:	f005 fce1 	bl	8024780 <mpool_alloc>
    e->y = 0.0f;
 801edbe:	2300      	movs	r3, #0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 801edc0:	6028      	str	r0, [r5, #0]
    e->mempool = m;
 801edc2:	6004      	str	r4, [r0, #0]
    e->a_thresh = attackThreshold;
 801edc4:	edc0 8a02 	vstr	s17, [r0, #8]
    e->d_coeff = decayCoeff;
 801edc8:	ed80 8a03 	vstr	s16, [r0, #12]
    e->y = 0.0f;
 801edcc:	6043      	str	r3, [r0, #4]
}
 801edce:	ecbd 8b02 	vpop	{d8}
 801edd2:	bd38      	pop	{r3, r4, r5, pc}

0801edd4 <tEnvelopeFollower_free>:

void    tEnvelopeFollower_free  (tEnvelopeFollower* const ef)
{
    _tEnvelopeFollower* e = *ef;
 801edd4:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)e, e->mempool);
 801edd6:	6801      	ldr	r1, [r0, #0]
 801edd8:	f005 bd7a 	b.w	80248d0 <mpool_free>

0801eddc <tEnvelopeFollower_tick>:
}

float   tEnvelopeFollower_tick(tEnvelopeFollower* const ef, float x)
{
    _tEnvelopeFollower* e = *ef;
 801eddc:	6803      	ldr	r3, [r0, #0]
 801edde:	eeb0 0ac0 	vabs.f32	s0, s0
    
    if (x < 0.0f ) x = -x;  /* Absolute value. */
    
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x;                      /* If we hit a peak, ride the peak to the top. */
 801ede2:	edd3 7a01 	vldr	s15, [r3, #4]
 801ede6:	eef4 7ac0 	vcmpe.f32	s15, s0
 801edea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edee:	d814      	bhi.n	801ee1a <tEnvelopeFollower_tick+0x3e>
 801edf0:	ed93 7a02 	vldr	s14, [r3, #8]
 801edf4:	eeb4 7ac0 	vcmpe.f32	s14, s0
 801edf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edfc:	d50d      	bpl.n	801ee1a <tEnvelopeFollower_tick+0x3e>
    //ef->y = envelope_pow[(uint16_t)(ef->y * (float)UINT16_MAX)] * ef->d_coeff; //not quite the right behavior - too much loss of precision?
    //ef->y = powf(ef->y, 1.000009f) * ef->d_coeff;  // too expensive
    
#ifdef NO_DENORMAL_CHECK
#else
    if( e->y < VSF)   e->y = 0.0f;
 801edfe:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801ee38 <tEnvelopeFollower_tick+0x5c>
 801ee02:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801ee06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee0a:	d511      	bpl.n	801ee30 <tEnvelopeFollower_tick+0x54>
 801ee0c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801ee3c <tEnvelopeFollower_tick+0x60>
 801ee10:	eeb0 0a67 	vmov.f32	s0, s15
 801ee14:	edc3 7a01 	vstr	s15, [r3, #4]
#endif
    return e->y;
}
 801ee18:	4770      	bx	lr
    else                                    e->y = e->y * e->d_coeff;    /* Else, exponential decay of output. */
 801ee1a:	ed93 0a03 	vldr	s0, [r3, #12]
 801ee1e:	ee27 0a80 	vmul.f32	s0, s15, s0
    if( e->y < VSF)   e->y = 0.0f;
 801ee22:	eddf 7a05 	vldr	s15, [pc, #20]	; 801ee38 <tEnvelopeFollower_tick+0x5c>
 801ee26:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801ee2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee2e:	d4ed      	bmi.n	801ee0c <tEnvelopeFollower_tick+0x30>
 801ee30:	ed83 0a01 	vstr	s0, [r3, #4]
 801ee34:	4770      	bx	lr
 801ee36:	bf00      	nop
 801ee38:	006ce3ee 	.word	0x006ce3ee
 801ee3c:	00000000 	.word	0x00000000

0801ee40 <tZeroCrossing_initToPool>:
{
    tZeroCrossing_initToPool   (zc, maxWindowSize, &leaf.mempool);
}

void    tZeroCrossing_initToPool   (tZeroCrossing* const zc, int maxWindowSize, tMempool* const mp)
{
 801ee40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 801ee42:	6816      	ldr	r6, [r2, #0]
{
 801ee44:	460d      	mov	r5, r1
 801ee46:	4607      	mov	r7, r0
    _tZeroCrossing* z = *zc = (_tZeroCrossing*) mpool_alloc(sizeof(_tZeroCrossing), m);
 801ee48:	2024      	movs	r0, #36	; 0x24
 801ee4a:	4631      	mov	r1, r6
 801ee4c:	f005 fc98 	bl	8024780 <mpool_alloc>
    z->mempool = m;

    z->count = 0;
    z->maxWindowSize = maxWindowSize;
    z->currentWindowSize = maxWindowSize;
    z->invCurrentWindowSize = 1.0f / maxWindowSize;
 801ee50:	ee07 5a90 	vmov	s15, r5
 801ee54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tZeroCrossing* z = *zc = (_tZeroCrossing*) mpool_alloc(sizeof(_tZeroCrossing), m);
 801ee58:	4604      	mov	r4, r0
    z->invCurrentWindowSize = 1.0f / maxWindowSize;
 801ee5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    z->count = 0;
 801ee5e:	2300      	movs	r3, #0
    _tZeroCrossing* z = *zc = (_tZeroCrossing*) mpool_alloc(sizeof(_tZeroCrossing), m);
 801ee60:	6038      	str	r0, [r7, #0]
    z->position = 0;
    z->prevPosition = maxWindowSize;
    z->inBuffer = (float*) mpool_calloc(sizeof(float) * maxWindowSize, m);
 801ee62:	4631      	mov	r1, r6
    z->mempool = m;
 801ee64:	6006      	str	r6, [r0, #0]
    z->invCurrentWindowSize = 1.0f / maxWindowSize;
 801ee66:	eec6 7a87 	vdiv.f32	s15, s13, s14
    z->maxWindowSize = maxWindowSize;
 801ee6a:	6085      	str	r5, [r0, #8]
    z->count = 0;
 801ee6c:	6063      	str	r3, [r4, #4]
    z->inBuffer = (float*) mpool_calloc(sizeof(float) * maxWindowSize, m);
 801ee6e:	00a8      	lsls	r0, r5, #2
    z->position = 0;
 801ee70:	6223      	str	r3, [r4, #32]
    z->currentWindowSize = maxWindowSize;
 801ee72:	60e5      	str	r5, [r4, #12]
    z->prevPosition = maxWindowSize;
 801ee74:	61e5      	str	r5, [r4, #28]
    z->invCurrentWindowSize = 1.0f / maxWindowSize;
 801ee76:	edc4 7a04 	vstr	s15, [r4, #16]
    z->inBuffer = (float*) mpool_calloc(sizeof(float) * maxWindowSize, m);
 801ee7a:	f005 fcd7 	bl	802482c <mpool_calloc>
    z->countBuffer = (uint16_t*) mpool_calloc(sizeof(uint16_t) * maxWindowSize, m);
 801ee7e:	4631      	mov	r1, r6
    z->inBuffer = (float*) mpool_calloc(sizeof(float) * maxWindowSize, m);
 801ee80:	6160      	str	r0, [r4, #20]
    z->countBuffer = (uint16_t*) mpool_calloc(sizeof(uint16_t) * maxWindowSize, m);
 801ee82:	0068      	lsls	r0, r5, #1
 801ee84:	f005 fcd2 	bl	802482c <mpool_calloc>
 801ee88:	61a0      	str	r0, [r4, #24]
}
 801ee8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ee8c <tZeroCrossing_free>:

void    tZeroCrossing_free (tZeroCrossing* const zc)
{
 801ee8c:	b510      	push	{r4, lr}
    _tZeroCrossing* z = *zc;
 801ee8e:	6804      	ldr	r4, [r0, #0]
    
    mpool_free((char*)z->inBuffer, z->mempool);
 801ee90:	6821      	ldr	r1, [r4, #0]
 801ee92:	6960      	ldr	r0, [r4, #20]
 801ee94:	f005 fd1c 	bl	80248d0 <mpool_free>
    mpool_free((char*)z->countBuffer, z->mempool);
 801ee98:	6821      	ldr	r1, [r4, #0]
 801ee9a:	69a0      	ldr	r0, [r4, #24]
 801ee9c:	f005 fd18 	bl	80248d0 <mpool_free>
    mpool_free((char*)z, z->mempool);
 801eea0:	6821      	ldr	r1, [r4, #0]
 801eea2:	4620      	mov	r0, r4
}
 801eea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)z, z->mempool);
 801eea8:	f005 bd12 	b.w	80248d0 <mpool_free>

0801eeac <tZeroCrossing_tick>:

//returns proportion of zero crossings within window size (0.0 would be none in window, 1.0 would be all zero crossings)
float   tZeroCrossing_tick         (tZeroCrossing* const zc, float input)
{
 801eeac:	b430      	push	{r4, r5}
    _tZeroCrossing* z = *zc;
 801eeae:	6803      	ldr	r3, [r0, #0]

    z->inBuffer[z->position] = input;
 801eeb0:	6a19      	ldr	r1, [r3, #32]
 801eeb2:	695a      	ldr	r2, [r3, #20]
 801eeb4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801eeb8:	ed82 0a00 	vstr	s0, [r2]
    int futurePosition = ((z->position + 1) % z->currentWindowSize);
 801eebc:	6a18      	ldr	r0, [r3, #32]
    float output = 0.0f;

    //add new value to count
    if ((z->inBuffer[z->position] * z->inBuffer[z->prevPosition]) < 0.0f)
 801eebe:	695a      	ldr	r2, [r3, #20]
 801eec0:	69dc      	ldr	r4, [r3, #28]
    int futurePosition = ((z->position + 1) % z->currentWindowSize);
 801eec2:	1c45      	adds	r5, r0, #1
    if ((z->inBuffer[z->position] * z->inBuffer[z->prevPosition]) < 0.0f)
 801eec4:	eb02 0180 	add.w	r1, r2, r0, lsl #2
 801eec8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    int futurePosition = ((z->position + 1) % z->currentWindowSize);
 801eecc:	68dc      	ldr	r4, [r3, #12]
    if ((z->inBuffer[z->position] * z->inBuffer[z->prevPosition]) < 0.0f)
 801eece:	ed91 7a00 	vldr	s14, [r1]
 801eed2:	edd2 7a00 	vldr	s15, [r2]
    {
        //zero crossing happened, add it to the count array
        z->countBuffer[z->position] = 1;
 801eed6:	699a      	ldr	r2, [r3, #24]
    if ((z->inBuffer[z->position] * z->inBuffer[z->prevPosition]) < 0.0f)
 801eed8:	ee67 7a87 	vmul.f32	s15, s15, s14
    int futurePosition = ((z->position + 1) % z->currentWindowSize);
 801eedc:	fb95 f1f4 	sdiv	r1, r5, r4
    if ((z->inBuffer[z->position] * z->inBuffer[z->prevPosition]) < 0.0f)
 801eee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    int futurePosition = ((z->position + 1) % z->currentWindowSize);
 801eee4:	fb04 5111 	mls	r1, r4, r1, r5
    if ((z->inBuffer[z->position] * z->inBuffer[z->prevPosition]) < 0.0f)
 801eee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eeec:	d41c      	bmi.n	801ef28 <tZeroCrossing_tick+0x7c>
        z->count++;
    }
    else
    {
        z->countBuffer[z->position] = 0;
 801eeee:	2400      	movs	r4, #0
 801eef0:	f822 4010 	strh.w	r4, [r2, r0, lsl #1]
 801eef4:	685a      	ldr	r2, [r3, #4]
    }

    //remove oldest value from count
    if (z->countBuffer[futurePosition] > 0)
 801eef6:	6998      	ldr	r0, [r3, #24]
 801eef8:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801eefc:	b110      	cbz	r0, 801ef04 <tZeroCrossing_tick+0x58>
    {
        z->count--;
        if (z->count < 0)
 801eefe:	3a01      	subs	r2, #1
 801ef00:	d40d      	bmi.n	801ef1e <tZeroCrossing_tick+0x72>
        z->count--;
 801ef02:	605a      	str	r2, [r3, #4]
 801ef04:	ee07 2a90 	vmov	s15, r2
 801ef08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        {
            z->count = 0;
        }
    }

    z->prevPosition = z->position;
 801ef0c:	6a1a      	ldr	r2, [r3, #32]
    z->position = futurePosition;

    output = z->count * z->invCurrentWindowSize;
 801ef0e:	ed93 0a04 	vldr	s0, [r3, #16]
    z->position = futurePosition;
 801ef12:	e9c3 2107 	strd	r2, r1, [r3, #28]

    return output;
}
 801ef16:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ef1a:	bc30      	pop	{r4, r5}
 801ef1c:	4770      	bx	lr
            z->count = 0;
 801ef1e:	2200      	movs	r2, #0
 801ef20:	eddf 7a05 	vldr	s15, [pc, #20]	; 801ef38 <tZeroCrossing_tick+0x8c>
 801ef24:	605a      	str	r2, [r3, #4]
 801ef26:	e7f1      	b.n	801ef0c <tZeroCrossing_tick+0x60>
        z->countBuffer[z->position] = 1;
 801ef28:	2401      	movs	r4, #1
 801ef2a:	f822 4010 	strh.w	r4, [r2, r0, lsl #1]
        z->count++;
 801ef2e:	685a      	ldr	r2, [r3, #4]
 801ef30:	4422      	add	r2, r4
 801ef32:	605a      	str	r2, [r3, #4]
 801ef34:	e7df      	b.n	801eef6 <tZeroCrossing_tick+0x4a>
 801ef36:	bf00      	nop
 801ef38:	00000000 	.word	0x00000000

0801ef3c <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf.mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, float factor, tMempool* const mp)
{
 801ef3c:	b538      	push	{r3, r4, r5, lr}
 801ef3e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801ef42:	680c      	ldr	r4, [r1, #0]
{
 801ef44:	4605      	mov	r5, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 801ef46:	2010      	movs	r0, #16
{
 801ef48:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 801ef4c:	4621      	mov	r1, r4
 801ef4e:	f005 fc17 	bl	8024780 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 801ef52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
 801ef56:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 801ef58:	6028      	str	r0, [r5, #0]
    p->mempool = m;
 801ef5a:	6004      	str	r4, [r0, #0]
    p->oneminusfactor=1.0f-factor;
 801ef5c:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->factor=factor;
 801ef60:	ed80 8a01 	vstr	s16, [r0, #4]
    p->curr=0.0f;
 801ef64:	60c3      	str	r3, [r0, #12]
    p->oneminusfactor=1.0f-factor;
 801ef66:	edc0 7a02 	vstr	s15, [r0, #8]
}
 801ef6a:	ecbd 8b02 	vpop	{d8}
 801ef6e:	bd38      	pop	{r3, r4, r5, pc}

0801ef70 <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
    _tPowerFollower* p = *pf;
 801ef70:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
 801ef72:	6801      	ldr	r1, [r0, #0]
 801ef74:	f005 bcac 	b.w	80248d0 <mpool_free>

0801ef78 <tPowerFollower_tick>:
    return 0;
}

float   tPowerFollower_tick(tPowerFollower* const pf, float input)
{
    _tPowerFollower* p = *pf;
 801ef78:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
 801ef7a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ef7e:	edd3 7a02 	vldr	s15, [r3, #8]
 801ef82:	ed93 0a03 	vldr	s0, [r3, #12]
 801ef86:	edd3 6a01 	vldr	s13, [r3, #4]
 801ef8a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ef8e:	eea6 0a87 	vfma.f32	s0, s13, s14
 801ef92:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
 801ef96:	4770      	bx	lr

0801ef98 <tEnvPD_initToPool>:
{
    tEnvPD_initToPool(xpd, ws, hs, bs, &leaf.mempool);
}

void    tEnvPD_initToPool       (tEnvPD* const xpd, int ws, int hs, int bs, tMempool* const mp)
{
 801ef98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef9c:	ed2d 8b04 	vpush	{d8-d9}
 801efa0:	b083      	sub	sp, #12
 801efa2:	4688      	mov	r8, r1
 801efa4:	4605      	mov	r5, r0
    _tMempool* m = *mp;
    _tEnvPD* x = *xpd = (_tEnvPD*) mpool_calloc(sizeof(_tEnvPD), m);
 801efa6:	f241 109c 	movw	r0, #4508	; 0x119c
{
 801efaa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801efac:	4616      	mov	r6, r2
 801efae:	461f      	mov	r7, r3
    _tMempool* m = *mp;
 801efb0:	6824      	ldr	r4, [r4, #0]
    _tEnvPD* x = *xpd = (_tEnvPD*) mpool_calloc(sizeof(_tEnvPD), m);
 801efb2:	4621      	mov	r1, r4
 801efb4:	f005 fc3a 	bl	802482c <mpool_calloc>
    
    int period = hs, npoints = ws;
    
    int i;
    
    if (npoints < 1) npoints = 1024;
 801efb8:	f1b8 0f00 	cmp.w	r8, #0
    _tEnvPD* x = *xpd = (_tEnvPD*) mpool_calloc(sizeof(_tEnvPD), m);
 801efbc:	6028      	str	r0, [r5, #0]
 801efbe:	4682      	mov	sl, r0
    x->mempool = m;
 801efc0:	6004      	str	r4, [r0, #0]
    if (npoints < 1) npoints = 1024;
 801efc2:	f340 8081 	ble.w	801f0c8 <tEnvPD_initToPool+0x130>
 801efc6:	ee07 8a90 	vmov	s15, r8
 801efca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801efce:	f108 033f 	add.w	r3, r8, #63	; 0x3f
 801efd2:	ea4f 1168 	mov.w	r1, r8, asr #5
 801efd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801efda:	fa1f f288 	uxth.w	r2, r8
 801efde:	9301      	str	r3, [sp, #4]
 801efe0:	ee87 8a27 	vdiv.f32	s16, s14, s15
    if (period < 1) period = npoints/2;
 801efe4:	2e00      	cmp	r6, #0
    if (period < npoints / MAXOVERLAP + 1)
        period = npoints / MAXOVERLAP + 1;
    
    x->x_npoints = npoints;
    x->x_phase = 0;
    x->x_period = period;
 801efe6:	f241 1506 	movw	r5, #4358	; 0x1106
    
    x->windowSize = npoints;
    x->hopSize = period;
    x->blockSize = bs;
 801efea:	f241 1498 	movw	r4, #4504	; 0x1198
    x->x_npoints = npoints;
 801efee:	f241 100a 	movw	r0, #4362	; 0x110a
    if (period < 1) period = npoints/2;
 801eff2:	bfd8      	it	le
 801eff4:	ea4f 0668 	movle.w	r6, r8, asr #1
 801eff8:	ed9f 9a38 	vldr	s18, [pc, #224]	; 801f0dc <tEnvPD_initToPool+0x144>
    x->blockSize = bs;
 801effc:	b2bf      	uxth	r7, r7
    if (period < npoints / MAXOVERLAP + 1)
 801effe:	428e      	cmp	r6, r1
 801f000:	ea4f 0b88 	mov.w	fp, r8, lsl #2
        period = npoints / MAXOVERLAP + 1;
 801f004:	bfd8      	it	le
 801f006:	1c4e      	addle	r6, r1, #1
    x->hopSize = period;
 801f008:	f241 1196 	movw	r1, #4502	; 0x1196
    x->x_period = period;
 801f00c:	b2b6      	uxth	r6, r6
 801f00e:	f82a 6005 	strh.w	r6, [sl, r5]
    x->x_phase = 0;
 801f012:	f241 1504 	movw	r5, #4356	; 0x1104
    x->hopSize = period;
 801f016:	f82a 6001 	strh.w	r6, [sl, r1]
    x->x_phase = 0;
 801f01a:	2100      	movs	r1, #0
    x->blockSize = bs;
 801f01c:	f82a 7004 	strh.w	r7, [sl, r4]
    x->windowSize = npoints;
 801f020:	f241 1494 	movw	r4, #4500	; 0x1194
    x->x_npoints = npoints;
 801f024:	f82a 2000 	strh.w	r2, [sl, r0]
 801f028:	f241 1010 	movw	r0, #4368	; 0x1110
    x->x_phase = 0;
 801f02c:	f82a 1005 	strh.w	r1, [sl, r5]
    
    for (i = 0; i < MAXOVERLAP; i++) x->x_sumbuf[i] = 0;
    for (i = 0; i < npoints; i++)
 801f030:	460d      	mov	r5, r1
    x->windowSize = npoints;
 801f032:	f82a 2004 	strh.w	r2, [sl, r4]
 801f036:	4450      	add	r0, sl
 801f038:	2280      	movs	r2, #128	; 0x80
 801f03a:	f10a 0404 	add.w	r4, sl, #4
 801f03e:	f008 fa7c 	bl	802753a <memset>
    for (i = 0; i < MAXOVERLAP; i++) x->x_sumbuf[i] = 0;
 801f042:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f046:	eb04 090b 	add.w	r9, r4, fp
        x->buf[i] = (1.0f - cosf((2 * PI * i) / npoints))/npoints;
 801f04a:	eef0 8a40 	vmov.f32	s17, s0
 801f04e:	e001      	b.n	801f054 <tEnvPD_initToPool+0xbc>
 801f050:	f008 fb94 	bl	802777c <cosf>
    for (i = 0; i < npoints; i++)
 801f054:	3501      	adds	r5, #1
        x->buf[i] = (1.0f - cosf((2 * PI * i) / npoints))/npoints;
 801f056:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801f05a:	ee07 5a90 	vmov	s15, r5
 801f05e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f062:	ee60 7a08 	vmul.f32	s15, s0, s16
 801f066:	ee27 0a09 	vmul.f32	s0, s14, s18
 801f06a:	ece4 7a01 	vstmia	r4!, {s15}
    for (i = 0; i < npoints; i++)
 801f06e:	45a1      	cmp	r9, r4
 801f070:	ee20 0a08 	vmul.f32	s0, s0, s16
 801f074:	d1ec      	bne.n	801f050 <tEnvPD_initToPool+0xb8>
    for (; i < npoints+INITVSTAKEN; i++) x->buf[i] = 0;
 801f076:	9b01      	ldr	r3, [sp, #4]
 801f078:	4598      	cmp	r8, r3
 801f07a:	dc09      	bgt.n	801f090 <tEnvPD_initToPool+0xf8>
 801f07c:	3301      	adds	r3, #1
 801f07e:	f10b 0004 	add.w	r0, fp, #4
 801f082:	2100      	movs	r1, #0
 801f084:	eba3 0208 	sub.w	r2, r3, r8
 801f088:	4450      	add	r0, sl
 801f08a:	0092      	lsls	r2, r2, #2
 801f08c:	f008 fa55 	bl	802753a <memset>
    
    x->x_f = 0;
 801f090:	f241 1190 	movw	r1, #4496	; 0x1190
 801f094:	2500      	movs	r5, #0
    
    x->x_allocforvs = INITVSTAKEN;
 801f096:	f241 109a 	movw	r0, #4506	; 0x119a
 801f09a:	2440      	movs	r4, #64	; 0x40
    x->x_f = 0;
 801f09c:	4451      	add	r1, sl
    
    // ~ ~ ~ dsp ~ ~ ~
    if (x->x_period % x->blockSize)
 801f09e:	fbb6 f2f7 	udiv	r2, r6, r7
 801f0a2:	fb07 6212 	mls	r2, r7, r2, r6
    x->x_f = 0;
 801f0a6:	600d      	str	r5, [r1, #0]
    if (x->x_period % x->blockSize)
 801f0a8:	b292      	uxth	r2, r2
    x->x_allocforvs = INITVSTAKEN;
 801f0aa:	f82a 4000 	strh.w	r4, [sl, r0]
    if (x->x_period % x->blockSize)
 801f0ae:	b112      	cbz	r2, 801f0b6 <tEnvPD_initToPool+0x11e>
    {
        x->x_realperiod = x->x_period + x->blockSize - (x->x_period % x->blockSize);
 801f0b0:	443e      	add	r6, r7
 801f0b2:	1ab2      	subs	r2, r6, r2
 801f0b4:	b296      	uxth	r6, r2
 801f0b6:	f241 1208 	movw	r2, #4360	; 0x1108
 801f0ba:	f82a 6002 	strh.w	r6, [sl, r2]
    else
    {
        x->x_realperiod = x->x_period;
    }
    // ~ ~ ~ ~ ~ ~ ~ ~
}
 801f0be:	b003      	add	sp, #12
 801f0c0:	ecbd 8b04 	vpop	{d8-d9}
 801f0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801f0cc:	f240 433f 	movw	r3, #1087	; 0x43f
 801f0d0:	ed9f 8a03 	vldr	s16, [pc, #12]	; 801f0e0 <tEnvPD_initToPool+0x148>
 801f0d4:	2120      	movs	r1, #32
 801f0d6:	9301      	str	r3, [sp, #4]
    if (npoints < 1) npoints = 1024;
 801f0d8:	4690      	mov	r8, r2
 801f0da:	e783      	b.n	801efe4 <tEnvPD_initToPool+0x4c>
 801f0dc:	40c90fdb 	.word	0x40c90fdb
 801f0e0:	3a800000 	.word	0x3a800000

0801f0e4 <tEnvPD_tick>:
}

float tEnvPD_tick (tEnvPD* const xpd)
{
    _tEnvPD* x = *xpd;
    return powtodb(x->x_result);
 801f0e4:	6802      	ldr	r2, [r0, #0]
 801f0e6:	f241 130c 	movw	r3, #4364	; 0x110c
 801f0ea:	4413      	add	r3, r2
 801f0ec:	ed93 0a00 	vldr	s0, [r3]
 801f0f0:	f005 bada 	b.w	80246a8 <powtodb>

0801f0f4 <tSNAC_initToPool>:
{
    tSNAC_initToPool(snac, overlaparg, &leaf.mempool);
}

void    tSNAC_initToPool    (tSNAC* const snac, int overlaparg, tMempool* const mp)
{
 801f0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0f8:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 801f0fc:	6815      	ldr	r5, [r2, #0]
{
 801f0fe:	4680      	mov	r8, r0
 801f100:	460f      	mov	r7, r1
    _tSNAC* s = *snac = (_tSNAC*) mpool_alloc(sizeof(_tSNAC), m);
 801f102:	202c      	movs	r0, #44	; 0x2c
 801f104:	4629      	mov	r1, r5
    s->mempool = m;
    
    s->biasfactor = DEFBIAS;
    s->timeindex = 0;
    s->periodindex = 0;
    s->periodlength = 0.;
 801f106:	ed9f 8a40 	vldr	s16, [pc, #256]	; 801f208 <tSNAC_initToPool+0x114>
    _tSNAC* s = *snac = (_tSNAC*) mpool_alloc(sizeof(_tSNAC), m);
 801f10a:	f005 fb39 	bl	8024780 <mpool_alloc>
    s->fidelity = 0.;
    s->minrms = DEFMINRMS;
 801f10e:	4a3f      	ldr	r2, [pc, #252]	; (801f20c <tSNAC_initToPool+0x118>)
    _tSNAC* s = *snac = (_tSNAC*) mpool_alloc(sizeof(_tSNAC), m);
 801f110:	4604      	mov	r4, r0
    s->timeindex = 0;
 801f112:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    s->biasfactor = DEFBIAS;
 801f116:	483e      	ldr	r0, [pc, #248]	; (801f210 <tSNAC_initToPool+0x11c>)
    s->periodindex = 0;
 801f118:	2100      	movs	r1, #0
    _tSNAC* s = *snac = (_tSNAC*) mpool_alloc(sizeof(_tSNAC), m);
 801f11a:	f8c8 4000 	str.w	r4, [r8]
    s->minrms = DEFMINRMS;
 801f11e:	62a2      	str	r2, [r4, #40]	; 0x28
    s->timeindex = 0;
 801f120:	6163      	str	r3, [r4, #20]
    s->biasfactor = DEFBIAS;
 801f122:	6260      	str	r0, [r4, #36]	; 0x24
    s->framesize = SNAC_FRAME_SIZE;

    s->inputbuf = (float*) mpool_calloc(sizeof(float) * SNAC_FRAME_SIZE, m);
 801f124:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    s->periodindex = 0;
 801f128:	8361      	strh	r1, [r4, #26]
    s->inputbuf = (float*) mpool_calloc(sizeof(float) * SNAC_FRAME_SIZE, m);
 801f12a:	4629      	mov	r1, r5
    s->mempool = m;
 801f12c:	6025      	str	r5, [r4, #0]
    s->periodlength = 0.;
 801f12e:	ed84 8a07 	vstr	s16, [r4, #28]
    s->fidelity = 0.;
 801f132:	ed84 8a08 	vstr	s16, [r4, #32]
    s->inputbuf = (float*) mpool_calloc(sizeof(float) * SNAC_FRAME_SIZE, m);
 801f136:	f005 fb79 	bl	802482c <mpool_calloc>
    s->processbuf = (float*) mpool_calloc(sizeof(float) * (SNAC_FRAME_SIZE * 2), m);
 801f13a:	4629      	mov	r1, r5
    s->inputbuf = (float*) mpool_calloc(sizeof(float) * SNAC_FRAME_SIZE, m);
 801f13c:	6060      	str	r0, [r4, #4]
    s->processbuf = (float*) mpool_calloc(sizeof(float) * (SNAC_FRAME_SIZE * 2), m);
 801f13e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801f142:	f005 fb73 	bl	802482c <mpool_calloc>
    s->spectrumbuf = (float*) mpool_calloc(sizeof(float) * (SNAC_FRAME_SIZE / 2), m);
 801f146:	4629      	mov	r1, r5
    s->processbuf = (float*) mpool_calloc(sizeof(float) * (SNAC_FRAME_SIZE * 2), m);
 801f148:	60a0      	str	r0, [r4, #8]
    s->spectrumbuf = (float*) mpool_calloc(sizeof(float) * (SNAC_FRAME_SIZE / 2), m);
 801f14a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801f14e:	f005 fb6d 	bl	802482c <mpool_calloc>
    s->biasbuf = (float*) mpool_calloc(sizeof(float) * SNAC_FRAME_SIZE, m);
 801f152:	4629      	mov	r1, r5
    s->spectrumbuf = (float*) mpool_calloc(sizeof(float) * (SNAC_FRAME_SIZE / 2), m);
 801f154:	60e0      	str	r0, [r4, #12]
    s->biasbuf = (float*) mpool_calloc(sizeof(float) * SNAC_FRAME_SIZE, m);
 801f156:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801f15a:	f005 fb67 	bl	802482c <mpool_calloc>
 801f15e:	6120      	str	r0, [r4, #16]
    
    snac_biasbuf(snac);
 801f160:	f8d8 4000 	ldr.w	r4, [r8]
static void snac_biasbuf(tSNAC* const snac)
{
    _tSNAC* s = *snac;
    
    int n;
    int maxperiod = (int)(s->framesize * (float)SEEK);
 801f164:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 801f214 <tSNAC_initToPool+0x120>
 801f168:	8ae3      	ldrh	r3, [r4, #22]
 801f16a:	ee07 3a90 	vmov	s15, r3
 801f16e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f172:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f17a:	ee17 6a90 	vmov	r6, s15
    float bias = s->biasfactor / logf((float)(maxperiod - 4));
 801f17e:	1f33      	subs	r3, r6, #4
 801f180:	ee00 3a10 	vmov	s0, r3
 801f184:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801f188:	f008 fbbe 	bl	8027908 <logf>
 801f18c:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    for(n=0; n<5; n++)    // periods < 5 samples can't be tracked
    {
        biasbuf[n] = 0.0f;
    }
    
    for(n=5; n<maxperiod; n++)
 801f190:	2e05      	cmp	r6, #5
    float *biasbuf = s->biasbuf;
 801f192:	6924      	ldr	r4, [r4, #16]
    float bias = s->biasfactor / logf((float)(maxperiod - 4));
 801f194:	eec7 8a80 	vdiv.f32	s17, s15, s0
        biasbuf[n] = 0.0f;
 801f198:	ed84 8a00 	vstr	s16, [r4]
 801f19c:	ed84 8a01 	vstr	s16, [r4, #4]
 801f1a0:	ed84 8a02 	vstr	s16, [r4, #8]
 801f1a4:	ed84 8a03 	vstr	s16, [r4, #12]
 801f1a8:	ed84 8a04 	vstr	s16, [r4, #16]
    for(n=5; n<maxperiod; n++)
 801f1ac:	dd17      	ble.n	801f1de <tSNAC_initToPool+0xea>
 801f1ae:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    {
        biasbuf[n] = 1.0f - (float)logf(n - 4) * bias;
 801f1b2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801f1b6:	3414      	adds	r4, #20
    for(n=5; n<maxperiod; n++)
 801f1b8:	eeb0 0a48 	vmov.f32	s0, s16
 801f1bc:	2502      	movs	r5, #2
 801f1be:	e001      	b.n	801f1c4 <tSNAC_initToPool+0xd0>
 801f1c0:	f008 fba2 	bl	8027908 <logf>
        biasbuf[n] = 1.0f - (float)logf(n - 4) * bias;
 801f1c4:	eef0 7a49 	vmov.f32	s15, s18
 801f1c8:	ee07 5a10 	vmov	s14, r5
 801f1cc:	3501      	adds	r5, #1
 801f1ce:	eee0 7a68 	vfms.f32	s15, s0, s17
 801f1d2:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 801f1d6:	ece4 7a01 	vstmia	r4!, {s15}
    for(n=5; n<maxperiod; n++)
 801f1da:	42b4      	cmp	r4, r6
 801f1dc:	d1f0      	bne.n	801f1c0 <tSNAC_initToPool+0xcc>
    if(!((lap==1)|(lap==2)|(lap==4)|(lap==8))) lap = DEFOVERLAP;
 801f1de:	2f08      	cmp	r7, #8
    _tSNAC* s = *snac;
 801f1e0:	f8d8 2000 	ldr.w	r2, [r8]
    if(!((lap==1)|(lap==2)|(lap==4)|(lap==8))) lap = DEFOVERLAP;
 801f1e4:	d905      	bls.n	801f1f2 <tSNAC_initToPool+0xfe>
 801f1e6:	2701      	movs	r7, #1
    s->overlap = lap;
 801f1e8:	8317      	strh	r7, [r2, #24]
}
 801f1ea:	ecbd 8b04 	vpop	{d8-d9}
 801f1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!((lap==1)|(lap==2)|(lap==4)|(lap==8))) lap = DEFOVERLAP;
 801f1f2:	f44f 738b 	mov.w	r3, #278	; 0x116
 801f1f6:	40fb      	lsrs	r3, r7
 801f1f8:	07db      	lsls	r3, r3, #31
 801f1fa:	d5f4      	bpl.n	801f1e6 <tSNAC_initToPool+0xf2>
 801f1fc:	b2bf      	uxth	r7, r7
    s->overlap = lap;
 801f1fe:	8317      	strh	r7, [r2, #24]
}
 801f200:	ecbd 8b04 	vpop	{d8-d9}
 801f204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f208:	00000000 	.word	0x00000000
 801f20c:	3b449ba6 	.word	0x3b449ba6
 801f210:	3e4ccccd 	.word	0x3e4ccccd
 801f214:	3f59999a 	.word	0x3f59999a

0801f218 <tSNAC_ioSamples>:
{
 801f218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f21c:	ed2d 8b02 	vpush	{d8}
 801f220:	b08b      	sub	sp, #44	; 0x2c
 801f222:	460d      	mov	r5, r1
 801f224:	9204      	str	r2, [sp, #16]
    _tSNAC* s = *snac;
 801f226:	6802      	ldr	r2, [r0, #0]
{
 801f228:	9002      	str	r0, [sp, #8]
 801f22a:	9301      	str	r3, [sp, #4]
    int mask = s->framesize - 1;
 801f22c:	8ad0      	ldrh	r0, [r2, #22]
    if(!(timeindex & (s->framesize / s->overlap - 1))) snac_analyzeframe(snac);
 801f22e:	8b13      	ldrh	r3, [r2, #24]
    int timeindex = s->timeindex;
 801f230:	8a94      	ldrh	r4, [r2, #20]
    int mask = s->framesize - 1;
 801f232:	1e46      	subs	r6, r0, #1
    _tSNAC* s = *snac;
 801f234:	9203      	str	r2, [sp, #12]
    if(!(timeindex & (s->framesize / s->overlap - 1))) snac_analyzeframe(snac);
 801f236:	fbb0 f3f3 	udiv	r3, r0, r3
 801f23a:	3b01      	subs	r3, #1
 801f23c:	4023      	ands	r3, r4
    float *processbuf = s->processbuf;
 801f23e:	e9d2 7801 	ldrd	r7, r8, [r2, #4]
    if(!(timeindex & (s->framesize / s->overlap - 1))) snac_analyzeframe(snac);
 801f242:	9305      	str	r3, [sp, #20]
 801f244:	d019      	beq.n	801f27a <tSNAC_ioSamples+0x62>
    while(size--)
 801f246:	9b01      	ldr	r3, [sp, #4]
 801f248:	b183      	cbz	r3, 801f26c <tSNAC_ioSamples+0x54>
 801f24a:	9a04      	ldr	r2, [sp, #16]
 801f24c:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
        inputbuf[timeindex] = *in++;
 801f250:	00a3      	lsls	r3, r4, #2
 801f252:	f855 0b04 	ldr.w	r0, [r5], #4
        out[outindex++] = processbuf[timeindex++];
 801f256:	3401      	adds	r4, #1
        inputbuf[timeindex] = *in++;
 801f258:	18f9      	adds	r1, r7, r3
        out[outindex++] = processbuf[timeindex++];
 801f25a:	4443      	add	r3, r8
    while(size--)
 801f25c:	4565      	cmp	r5, ip
        timeindex &= mask;
 801f25e:	ea04 0406 	and.w	r4, r4, r6
        inputbuf[timeindex] = *in++;
 801f262:	6008      	str	r0, [r1, #0]
        out[outindex++] = processbuf[timeindex++];
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	f842 3b04 	str.w	r3, [r2], #4
    while(size--)
 801f26a:	d1f1      	bne.n	801f250 <tSNAC_ioSamples+0x38>
    s->timeindex = timeindex;
 801f26c:	9b03      	ldr	r3, [sp, #12]
 801f26e:	829c      	strh	r4, [r3, #20]
}
 801f270:	b00b      	add	sp, #44	; 0x2c
 801f272:	ecbd 8b02 	vpop	{d8}
 801f276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float norm = 1. / sqrt((float)(framesize * 2));
 801f27a:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 801f27e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 801f282:	ee07 ea90 	vmov	s15, lr
 801f286:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f28a:	eeb1 6bc7 	vsqrt.f64	d6, d7
 801f28e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801f292:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    for(n=0; n<framesize; n++)
 801f296:	b178      	cbz	r0, 801f2b8 <tSNAC_ioSamples+0xa0>
 801f298:	4642      	mov	r2, r8
 801f29a:	eb08 0c80 	add.w	ip, r8, r0, lsl #2
    int timeindex = s->timeindex;
 801f29e:	4623      	mov	r3, r4
        processbuf[n] = inputbuf[tindex] * norm;
 801f2a0:	eb07 0183 	add.w	r1, r7, r3, lsl #2
        tindex++;
 801f2a4:	3301      	adds	r3, #1
        processbuf[n] = inputbuf[tindex] * norm;
 801f2a6:	edd1 7a00 	vldr	s15, [r1]
        tindex &= mask;
 801f2aa:	4033      	ands	r3, r6
        processbuf[n] = inputbuf[tindex] * norm;
 801f2ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f2b0:	ece2 7a01 	vstmia	r2!, {s15}
    for(n=0; n<framesize; n++)
 801f2b4:	4594      	cmp	ip, r2
 801f2b6:	d1f3      	bne.n	801f2a0 <tSNAC_ioSamples+0x88>
    for(n=framesize; n<(framesize<<1); n++) processbuf[n] = 0.;
 801f2b8:	4570      	cmp	r0, lr
 801f2ba:	da07      	bge.n	801f2cc <tSNAC_ioSamples+0xb4>
 801f2bc:	ebae 0200 	sub.w	r2, lr, r0
 801f2c0:	2100      	movs	r1, #0
 801f2c2:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 801f2c6:	0092      	lsls	r2, r2, #2
 801f2c8:	f008 f937 	bl	802753a <memset>
    snac_autocorrelation(snac);
 801f2cc:	9b02      	ldr	r3, [sp, #8]
 801f2ce:	681b      	ldr	r3, [r3, #0]
    int framesize = s->framesize;
 801f2d0:	f8b3 9016 	ldrh.w	r9, [r3, #22]
    float *processbuf = s->processbuf;
 801f2d4:	f8d3 a008 	ldr.w	sl, [r3, #8]
    int fftsize = framesize * 2;
 801f2d8:	ea4f 0b49 	mov.w	fp, r9, lsl #1
    float *spectrumbuf = s->spectrumbuf;
 801f2dc:	68db      	ldr	r3, [r3, #12]
    REALFFT(fftsize, processbuf);
 801f2de:	4651      	mov	r1, sl
 801f2e0:	4658      	mov	r0, fp
    float *spectrumbuf = s->spectrumbuf;
 801f2e2:	9306      	str	r3, [sp, #24]
    REALFFT(fftsize, processbuf);
 801f2e4:	f7ff fcf8 	bl	801ecd8 <mayer_realfft>
    processbuf[0] *= processbuf[0];                      // DC
 801f2e8:	edda 7a00 	vldr	s15, [sl]
    processbuf[framesize] *= processbuf[framesize];      // Nyquist
 801f2ec:	eb0a 0189 	add.w	r1, sl, r9, lsl #2
    for(n=1; n<framesize; n++)
 801f2f0:	f1b9 0f01 	cmp.w	r9, #1
    processbuf[0] *= processbuf[0];                      // DC
 801f2f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f2f8:	edca 7a00 	vstr	s15, [sl]
    processbuf[framesize] *= processbuf[framesize];      // Nyquist
 801f2fc:	edd1 7a00 	vldr	s15, [r1]
 801f300:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f304:	edc1 7a00 	vstr	s15, [r1]
    for(n=1; n<framesize; n++)
 801f308:	dd11      	ble.n	801f32e <tSNAC_ioSamples+0x116>
 801f30a:	f10a 0304 	add.w	r3, sl, #4
 801f30e:	eb0a 02c9 	add.w	r2, sl, r9, lsl #3
        processbuf[fftsize-n] = 0.;
 801f312:	2000      	movs	r0, #0
        + processbuf[fftsize-n] * processbuf[fftsize-n]; // imag coefficients appear reversed
 801f314:	ed72 7a01 	vldmdb	r2!, {s15}
        processbuf[n] = processbuf[n] * processbuf[n]
 801f318:	ed93 7a00 	vldr	s14, [r3]
        + processbuf[fftsize-n] * processbuf[fftsize-n]; // imag coefficients appear reversed
 801f31c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f320:	eee7 7a07 	vfma.f32	s15, s14, s14
        processbuf[n] = processbuf[n] * processbuf[n]
 801f324:	ece3 7a01 	vstmia	r3!, {s15}
    for(n=1; n<framesize; n++)
 801f328:	4299      	cmp	r1, r3
        processbuf[fftsize-n] = 0.;
 801f32a:	6010      	str	r0, [r2, #0]
    for(n=1; n<framesize; n++)
 801f32c:	d1f2      	bne.n	801f314 <tSNAC_ioSamples+0xfc>
    for(m=0; m<(framesize>>1); m++)
 801f32e:	ea5f 0969 	movs.w	r9, r9, asr #1
 801f332:	d009      	beq.n	801f348 <tSNAC_ioSamples+0x130>
 801f334:	9a06      	ldr	r2, [sp, #24]
 801f336:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
 801f33a:	4653      	mov	r3, sl
        spectrumbuf[m] = processbuf[m];
 801f33c:	f853 1b04 	ldr.w	r1, [r3], #4
    for(m=0; m<(framesize>>1); m++)
 801f340:	4599      	cmp	r9, r3
        spectrumbuf[m] = processbuf[m];
 801f342:	f842 1b04 	str.w	r1, [r2], #4
    for(m=0; m<(framesize>>1); m++)
 801f346:	d1f9      	bne.n	801f33c <tSNAC_ioSamples+0x124>
    REALIFFT(fftsize, processbuf);
 801f348:	4651      	mov	r1, sl
 801f34a:	4658      	mov	r0, fp
 801f34c:	f7ff fcec 	bl	801ed28 <mayer_realifft>
    snac_normalize(snac);
 801f350:	9b02      	ldr	r3, [sp, #8]
    float rms = s->minrms / sqrt(1.0f / (float)framesize);
 801f352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    int seek = framesize * SEEK;
 801f356:	eddf 4ade 	vldr	s9, [pc, #888]	; 801f6d0 <tSNAC_ioSamples+0x4b8>
    snac_normalize(snac);
 801f35a:	681b      	ldr	r3, [r3, #0]
    int framesize = s->framesize;
 801f35c:	8ada      	ldrh	r2, [r3, #22]
    float rms = s->minrms / sqrt(1.0f / (float)framesize);
 801f35e:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
    int seek = framesize * SEEK;
 801f362:	ee07 2a90 	vmov	s15, r2
    int framesize = s->framesize;
 801f366:	9206      	str	r2, [sp, #24]
    float rms = s->minrms / sqrt(1.0f / (float)framesize);
 801f368:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    float *processbuf= s->processbuf;
 801f36c:	689a      	ldr	r2, [r3, #8]
    int seek = framesize * SEEK;
 801f36e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    int framesizeplustimeindex = s->framesize + s->timeindex;
 801f372:	f8b3 a014 	ldrh.w	sl, [r3, #20]
    float rzero = processbuf[0];
 801f376:	ed92 6a00 	vldr	s12, [r2]
    float *inputbuf = s->inputbuf;
 801f37a:	f8d3 9004 	ldr.w	r9, [r3, #4]
    float rms = s->minrms / sqrt(1.0f / (float)framesize);
 801f37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    processbuf[0] = 1;
 801f382:	edc2 6a00 	vstr	s13, [r2]
    int mask = framesize - 1;
 801f386:	9906      	ldr	r1, [sp, #24]
    float *processbuf= s->processbuf;
 801f388:	9207      	str	r2, [sp, #28]
    int mask = framesize - 1;
 801f38a:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    int framesizeplustimeindex = s->framesize + s->timeindex;
 801f38e:	eb0a 0b01 	add.w	fp, sl, r1
    int seek = framesize * SEEK;
 801f392:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801f396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f39a:	ee17 0a90 	vmov	r0, s15
    for(n=1, m=s->timeindex+1; n<seek; n++, m++)
 801f39e:	2801      	cmp	r0, #1
    float rms = s->minrms / sqrt(1.0f / (float)framesize);
 801f3a0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801f3a4:	eeb1 4bc7 	vsqrt.f64	d4, d7
 801f3a8:	ee85 7b04 	vdiv.f64	d7, d5, d4
 801f3ac:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    float minrzero = rms * rms;
 801f3b0:	ee27 7a07 	vmul.f32	s14, s14, s14
    double normintegral = (double)rzero * 2.;
 801f3b4:	fe87 6a06 	vmaxnm.f32	s12, s14, s12
 801f3b8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801f3bc:	ee36 6b06 	vadd.f64	d6, d6, d6
    for(n=1, m=s->timeindex+1; n<seek; n++, m++)
 801f3c0:	dd2b      	ble.n	801f41a <tSNAC_ioSamples+0x202>
        processbuf[n] /= (float)normintegral * 0.5f;
 801f3c2:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801f3c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801f3ca:	f102 0c04 	add.w	ip, r2, #4
    for(n=1, m=s->timeindex+1; n<seek; n++, m++)
 801f3ce:	2101      	movs	r1, #1
        signal2 = inputbuf[(framesizeplustimeindex - n)&mask];
 801f3d0:	ebab 0201 	sub.w	r2, fp, r1
        signal1 = inputbuf[(n + timeindexminusone)&mask];
 801f3d4:	eb0a 0301 	add.w	r3, sl, r1
        processbuf[n] /= (float)normintegral * 0.5f;
 801f3d8:	eddc 5a00 	vldr	s11, [ip]
    for(n=1, m=s->timeindex+1; n<seek; n++, m++)
 801f3dc:	3101      	adds	r1, #1
        signal2 = inputbuf[(framesizeplustimeindex - n)&mask];
 801f3de:	ea02 020e 	and.w	r2, r2, lr
        signal1 = inputbuf[(n + timeindexminusone)&mask];
 801f3e2:	ea03 030e 	and.w	r3, r3, lr
    for(n=1, m=s->timeindex+1; n<seek; n++, m++)
 801f3e6:	4288      	cmp	r0, r1
        signal2 = inputbuf[(framesizeplustimeindex - n)&mask];
 801f3e8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
        signal1 = inputbuf[(n + timeindexminusone)&mask];
 801f3ec:	eb09 0383 	add.w	r3, r9, r3, lsl #2
        signal2 = inputbuf[(framesizeplustimeindex - n)&mask];
 801f3f0:	ed92 7a00 	vldr	s14, [r2]
        signal1 = inputbuf[(n + timeindexminusone)&mask];
 801f3f4:	edd3 7a00 	vldr	s15, [r3]
        normintegral -= (double)(signal1 * signal1 + signal2 * signal2);
 801f3f8:	ee27 7a07 	vmul.f32	s14, s14, s14
 801f3fc:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801f400:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801f404:	ee36 6b47 	vsub.f64	d6, d6, d7
        processbuf[n] /= (float)normintegral * 0.5f;
 801f408:	eef7 7bc6 	vcvt.f32.f64	s15, d6
 801f40c:	ee67 7a85 	vmul.f32	s15, s15, s10
 801f410:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 801f414:	ecac 7a01 	vstmia	ip!, {s14}
    for(n=1, m=s->timeindex+1; n<seek; n++, m++)
 801f418:	d1da      	bne.n	801f3d0 <tSNAC_ioSamples+0x1b8>
    for(n = seek; n<framesize; n++) processbuf[n] = 0.;
 801f41a:	9b06      	ldr	r3, [sp, #24]
 801f41c:	4283      	cmp	r3, r0
 801f41e:	dd07      	ble.n	801f430 <tSNAC_ioSamples+0x218>
 801f420:	1a1a      	subs	r2, r3, r0
 801f422:	9b07      	ldr	r3, [sp, #28]
 801f424:	2100      	movs	r1, #0
 801f426:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801f42a:	0092      	lsls	r2, r2, #2
 801f42c:	f008 f885 	bl	802753a <memset>
    snac_pickpeak(snac);
 801f430:	9b02      	ldr	r3, [sp, #8]
    int seek = s->framesize * SEEK;
 801f432:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 801f6d0 <tSNAC_ioSamples+0x4b8>
    snac_pickpeak(snac);
 801f436:	681b      	ldr	r3, [r3, #0]
    int seek = s->framesize * SEEK;
 801f438:	8ada      	ldrh	r2, [r3, #22]
    snac_pickpeak(snac);
 801f43a:	9307      	str	r3, [sp, #28]
    int seek = s->framesize * SEEK;
 801f43c:	ee07 2a90 	vmov	s15, r2
    float *biasbuf = s->biasbuf;
 801f440:	6918      	ldr	r0, [r3, #16]
    float *processbuf= s->processbuf;
 801f442:	689a      	ldr	r2, [r3, #8]
    int seek = s->framesize * SEEK;
 801f444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f448:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f44c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f450:	ee17 aa90 	vmov	sl, s15
    for(n=1; n<seek; n++)
 801f454:	f1ba 0f01 	cmp.w	sl, #1
 801f458:	f340 808b 	ble.w	801f572 <tSNAC_ioSamples+0x35a>
        if(processbuf[n] < 0.) break;
 801f45c:	edd2 7a01 	vldr	s15, [r2, #4]
 801f460:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f468:	f100 8083 	bmi.w	801f572 <tSNAC_ioSamples+0x35a>
 801f46c:	f102 0108 	add.w	r1, r2, #8
    for(n=1; n<seek; n++)
 801f470:	f04f 0901 	mov.w	r9, #1
 801f474:	e006      	b.n	801f484 <tSNAC_ioSamples+0x26c>
        if(processbuf[n] < 0.) break;
 801f476:	ecf1 7a01 	vldmia	r1!, {s15}
 801f47a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f482:	d404      	bmi.n	801f48e <tSNAC_ioSamples+0x276>
    for(n=1; n<seek; n++)
 801f484:	f109 0901 	add.w	r9, r9, #1
 801f488:	45ca      	cmp	sl, r9
 801f48a:	d1f4      	bne.n	801f476 <tSNAC_ioSamples+0x25e>
 801f48c:	46d1      	mov	r9, sl
    for(; n<seek-1; n++)
 801f48e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801f492:	45ca      	cmp	sl, r9
 801f494:	dd6b      	ble.n	801f56e <tSNAC_ioSamples+0x356>
 801f496:	ea4f 0389 	mov.w	r3, r9, lsl #2
 801f49a:	2100      	movs	r1, #0
 801f49c:	9408      	str	r4, [sp, #32]
 801f49e:	4614      	mov	r4, r2
 801f4a0:	f1a3 0b04 	sub.w	fp, r3, #4
 801f4a4:	4403      	add	r3, r0
 801f4a6:	9509      	str	r5, [sp, #36]	; 0x24
 801f4a8:	4655      	mov	r5, sl
 801f4aa:	9106      	str	r1, [sp, #24]
 801f4ac:	4493      	add	fp, r2
 801f4ae:	ed9f 8a89 	vldr	s16, [pc, #548]	; 801f6d4 <tSNAC_ioSamples+0x4bc>
 801f4b2:	469a      	mov	sl, r3
 801f4b4:	e005      	b.n	801f4c2 <tSNAC_ioSamples+0x2aa>
 801f4b6:	f109 0901 	add.w	r9, r9, #1
 801f4ba:	f10a 0a04 	add.w	sl, sl, #4
 801f4be:	45a9      	cmp	r9, r5
 801f4c0:	d029      	beq.n	801f516 <tSNAC_ioSamples+0x2fe>
 801f4c2:	4659      	mov	r1, fp
        if(processbuf[n] >= processbuf[n-1])
 801f4c4:	f10b 0b04 	add.w	fp, fp, #4
 801f4c8:	ed91 7a00 	vldr	s14, [r1]
 801f4cc:	eddb 7a00 	vldr	s15, [fp]
 801f4d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4d8:	dbed      	blt.n	801f4b6 <tSNAC_ioSamples+0x29e>
            if(processbuf[n] > processbuf[n+1])     // we have a local peak
 801f4da:	ed9b 7a01 	vldr	s14, [fp, #4]
 801f4de:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4e6:	dde6      	ble.n	801f4b6 <tSNAC_ioSamples+0x29e>
                biasedpeak = interpolate3max(processbuf, n) * biasbuf[n];
 801f4e8:	4649      	mov	r1, r9
 801f4ea:	4620      	mov	r0, r4
 801f4ec:	f004 fe22 	bl	8024134 <interpolate3max>
 801f4f0:	edda 7a00 	vldr	s15, [sl]
 801f4f4:	ee20 0a27 	vmul.f32	s0, s0, s15
                if(biasedpeak > maxvalue)
 801f4f8:	eeb4 0ac8 	vcmpe.f32	s0, s16
 801f4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f500:	ddd9      	ble.n	801f4b6 <tSNAC_ioSamples+0x29e>
 801f502:	f8cd 9018 	str.w	r9, [sp, #24]
    for(; n<seek-1; n++)
 801f506:	f109 0901 	add.w	r9, r9, #1
                    maxvalue = biasedpeak;
 801f50a:	eeb0 8a40 	vmov.f32	s16, s0
 801f50e:	f10a 0a04 	add.w	sl, sl, #4
    for(; n<seek-1; n++)
 801f512:	45a9      	cmp	r9, r5
 801f514:	d1d5      	bne.n	801f4c2 <tSNAC_ioSamples+0x2aa>
 801f516:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801f51a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    s->periodindex = peakindex;
 801f51e:	9a07      	ldr	r2, [sp, #28]
 801f520:	8353      	strh	r3, [r2, #26]
    _tSNAC* s = *snac;
 801f522:	9b02      	ldr	r3, [sp, #8]
 801f524:	f8d3 a000 	ldr.w	sl, [r3]
    if(s->periodindex)
 801f528:	f8ba 901a 	ldrh.w	r9, [sl, #26]
 801f52c:	f1b9 0f00 	cmp.w	r9, #0
 801f530:	f43f ae89 	beq.w	801f246 <tSNAC_ioSamples+0x2e>
        interpolate3phase(s->processbuf, s->periodindex);
 801f534:	4649      	mov	r1, r9
 801f536:	f8da 0008 	ldr.w	r0, [sl, #8]
 801f53a:	f004 fe19 	bl	8024170 <interpolate3phase>
        periodlength = (float)s->periodindex +
 801f53e:	ee07 9a90 	vmov	s15, r9
        if(periodlength < 8) periodlength = snac_spectralpeak(snac, periodlength);
 801f542:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
        periodlength = (float)s->periodindex +
 801f546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f54a:	ee37 0a80 	vadd.f32	s0, s15, s0
        if(periodlength < 8) periodlength = snac_spectralpeak(snac, periodlength);
 801f54e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801f552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f556:	d40f      	bmi.n	801f578 <tSNAC_ioSamples+0x360>
        s->periodlength = periodlength;
 801f558:	ed8a 0a07 	vstr	s0, [sl, #28]
        s->fidelity = interpolate3max(s->processbuf, s->periodindex);
 801f55c:	f8ba 101a 	ldrh.w	r1, [sl, #26]
 801f560:	f8da 0008 	ldr.w	r0, [sl, #8]
 801f564:	f004 fde6 	bl	8024134 <interpolate3max>
 801f568:	ed8a 0a08 	vstr	s0, [sl, #32]
 801f56c:	e66b      	b.n	801f246 <tSNAC_ioSamples+0x2e>
    for(; n<seek-1; n++)
 801f56e:	2300      	movs	r3, #0
 801f570:	e7d5      	b.n	801f51e <tSNAC_ioSamples+0x306>
    for(n=1; n<seek; n++)
 801f572:	f04f 0901 	mov.w	r9, #1
 801f576:	e78a      	b.n	801f48e <tSNAC_ioSamples+0x276>
    if(periodlength < 4.0f) return periodlength;
 801f578:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 801f57c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f584:	d4e8      	bmi.n	801f558 <tSNAC_ioSamples+0x340>
        if(periodlength < 8) periodlength = snac_spectralpeak(snac, periodlength);
 801f586:	9b02      	ldr	r3, [sp, #8]
    startbin = (int)(peaklocation * 0.8f + 0.5f);
 801f588:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    stopbin = (int)(peaklocation * 1.25f + 0.5f);
 801f58c:	eef7 5a04 	vmov.f32	s11, #116	; 0x3fa00000  1.250
    startbin = (int)(peaklocation * 0.8f + 0.5f);
 801f590:	ed9f 6a51 	vldr	s12, [pc, #324]	; 801f6d8 <tSNAC_ioSamples+0x4c0>
        if(periodlength < 8) periodlength = snac_spectralpeak(snac, periodlength);
 801f594:	f8d3 9000 	ldr.w	r9, [r3]
    int spectrumsize = s->framesize>>1;
 801f598:	f8b9 3016 	ldrh.w	r3, [r9, #22]
    float *spectrumbuf = s->spectrumbuf;
 801f59c:	f8d9 c00c 	ldr.w	ip, [r9, #12]
    float peaklocation = (float)(s->framesize * 2.0f) / periodlength;
 801f5a0:	ee07 3a10 	vmov	s14, r3
    int spectrumsize = s->framesize>>1;
 801f5a4:	085b      	lsrs	r3, r3, #1
    float peaklocation = (float)(s->framesize * 2.0f) / periodlength;
 801f5a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    if(stopbin >= spectrumsize - 1) stopbin = spectrumsize - 1;
 801f5aa:	1e5a      	subs	r2, r3, #1
    float peaklocation = (float)(s->framesize * 2.0f) / periodlength;
 801f5ac:	ee37 7a07 	vadd.f32	s14, s14, s14
 801f5b0:	eec7 6a00 	vdiv.f32	s13, s14, s0
    stopbin = (int)(peaklocation * 1.25f + 0.5f);
 801f5b4:	eeb0 7a67 	vmov.f32	s14, s15
 801f5b8:	eea6 7aa5 	vfma.f32	s14, s13, s11
    startbin = (int)(peaklocation * 0.8f + 0.5f);
 801f5bc:	eee6 7a86 	vfma.f32	s15, s13, s12
    stopbin = (int)(peaklocation * 1.25f + 0.5f);
 801f5c0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    startbin = (int)(peaklocation * 0.8f + 0.5f);
 801f5c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    stopbin = (int)(peaklocation * 1.25f + 0.5f);
 801f5c8:	ee17 1a10 	vmov	r1, s14
    startbin = (int)(peaklocation * 0.8f + 0.5f);
 801f5cc:	ee17 3a90 	vmov	r3, s15
 801f5d0:	4291      	cmp	r1, r2
 801f5d2:	bfa8      	it	ge
 801f5d4:	4611      	movge	r1, r2
 801f5d6:	2b01      	cmp	r3, #1
 801f5d8:	bfb8      	it	lt
 801f5da:	2301      	movlt	r3, #1
    for(n=startbin; n<stopbin; n++)
 801f5dc:	4299      	cmp	r1, r3
 801f5de:	dd64      	ble.n	801f6aa <tSNAC_ioSamples+0x492>
 801f5e0:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    float max = 0.;
 801f5e4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801f6d4 <tSNAC_ioSamples+0x4bc>
 801f5e8:	441a      	add	r2, r3
 801f5ea:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 801f5ee:	4610      	mov	r0, r2
        if(spectrumbuf[n] >= spectrumbuf[n-1])
 801f5f0:	3204      	adds	r2, #4
 801f5f2:	ed90 7a00 	vldr	s14, [r0]
 801f5f6:	edd2 7a00 	vldr	s15, [r2]
 801f5fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f602:	db0e      	blt.n	801f622 <tSNAC_ioSamples+0x40a>
            if(spectrumbuf[n] > spectrumbuf[n+1])
 801f604:	ed92 7a01 	vldr	s14, [r2, #4]
                if(spectrumbuf[n] > max)
 801f608:	eef4 7a47 	vcmp.f32	s15, s14
 801f60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f610:	dd07      	ble.n	801f622 <tSNAC_ioSamples+0x40a>
 801f612:	eef4 7a66 	vcmp.f32	s15, s13
 801f616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f61a:	dd02      	ble.n	801f622 <tSNAC_ioSamples+0x40a>
                    max = spectrumbuf[n];
 801f61c:	eef0 6a67 	vmov.f32	s13, s15
                if(spectrumbuf[n] > max)
 801f620:	9305      	str	r3, [sp, #20]
    for(n=startbin; n<stopbin; n++)
 801f622:	3301      	adds	r3, #1
 801f624:	4299      	cmp	r1, r3
 801f626:	d1e2      	bne.n	801f5ee <tSNAC_ioSamples+0x3d6>
    for(n=(peakbin-1); n<(peakbin+2); n++)
 801f628:	9b05      	ldr	r3, [sp, #20]
 801f62a:	461a      	mov	r2, r3
 801f62c:	1e58      	subs	r0, r3, #1
 801f62e:	3301      	adds	r3, #1
 801f630:	ee07 2a90 	vmov	s15, r2
 801f634:	4283      	cmp	r3, r0
 801f636:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801f63a:	db25      	blt.n	801f688 <tSNAC_ioSamples+0x470>
        spectrumbuf[n] = sqrtf(spectrumbuf[n]);
 801f63c:	0080      	lsls	r0, r0, #2
    for(n=(peakbin-1); n<(peakbin+2); n++)
 801f63e:	469e      	mov	lr, r3
        spectrumbuf[n] = sqrtf(spectrumbuf[n]);
 801f640:	eb0c 0100 	add.w	r1, ip, r0
 801f644:	3004      	adds	r0, #4
 801f646:	ed91 7a00 	vldr	s14, [r1]
 801f64a:	eb0c 0200 	add.w	r2, ip, r0
 801f64e:	eef1 7ac7 	vsqrt.f32	s15, s14
 801f652:	edc1 7a00 	vstr	s15, [r1]
 801f656:	ed92 7a00 	vldr	s14, [r2]
 801f65a:	eef1 7ac7 	vsqrt.f32	s15, s14
 801f65e:	edc2 7a00 	vstr	s15, [r2]
 801f662:	1d02      	adds	r2, r0, #4
    for(n=(peakbin-1); n<(peakbin+2); n++)
 801f664:	459e      	cmp	lr, r3
        spectrumbuf[n] = sqrtf(spectrumbuf[n]);
 801f666:	4462      	add	r2, ip
 801f668:	ed92 7a00 	vldr	s14, [r2]
 801f66c:	eef1 7ac7 	vsqrt.f32	s15, s14
 801f670:	edc2 7a00 	vstr	s15, [r2]
    for(n=(peakbin-1); n<(peakbin+2); n++)
 801f674:	da08      	bge.n	801f688 <tSNAC_ioSamples+0x470>
        spectrumbuf[n] = sqrtf(spectrumbuf[n]);
 801f676:	f100 0308 	add.w	r3, r0, #8
 801f67a:	4463      	add	r3, ip
 801f67c:	ed93 7a00 	vldr	s14, [r3]
 801f680:	eef1 7ac7 	vsqrt.f32	s15, s14
 801f684:	edc3 7a00 	vstr	s15, [r3]
    peaklocation = (float)peakbin + interpolate3phase(spectrumbuf, peakbin);
 801f688:	9905      	ldr	r1, [sp, #20]
 801f68a:	4660      	mov	r0, ip
 801f68c:	f004 fd70 	bl	8024170 <interpolate3phase>
    periodlength = (float)(s->framesize * 2.0f) / peaklocation;
 801f690:	f8b9 3016 	ldrh.w	r3, [r9, #22]
    peaklocation = (float)peakbin + interpolate3phase(spectrumbuf, peakbin);
 801f694:	ee30 8a08 	vadd.f32	s16, s0, s16
    periodlength = (float)(s->framesize * 2.0f) / peaklocation;
 801f698:	ee07 3a90 	vmov	s15, r3
 801f69c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f6a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f6a4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801f6a8:	e756      	b.n	801f558 <tSNAC_ioSamples+0x340>
        spectrumbuf[n] = sqrtf(spectrumbuf[n]);
 801f6aa:	ed5c 7a01 	vldr	s15, [ip, #-4]
    for(n=(peakbin-1); n<(peakbin+2); n++)
 801f6ae:	f04f 0e01 	mov.w	lr, #1
        spectrumbuf[n] = sqrtf(spectrumbuf[n]);
 801f6b2:	eddc 6a00 	vldr	s13, [ip]
 801f6b6:	2000      	movs	r0, #0
 801f6b8:	eeb1 7ae7 	vsqrt.f32	s14, s15
    for(n=(peakbin-1); n<(peakbin+2); n++)
 801f6bc:	4673      	mov	r3, lr
        spectrumbuf[n] = sqrtf(spectrumbuf[n]);
 801f6be:	ed9f 8a05 	vldr	s16, [pc, #20]	; 801f6d4 <tSNAC_ioSamples+0x4bc>
 801f6c2:	eef1 7ae6 	vsqrt.f32	s15, s13
 801f6c6:	ed0c 7a01 	vstr	s14, [ip, #-4]
 801f6ca:	edcc 7a00 	vstr	s15, [ip]
 801f6ce:	e7c8      	b.n	801f662 <tSNAC_ioSamples+0x44a>
 801f6d0:	3f59999a 	.word	0x3f59999a
 801f6d4:	00000000 	.word	0x00000000
 801f6d8:	3f4ccccd 	.word	0x3f4ccccd

0801f6dc <tPeriodDetection_initToPool>:
{
    tPeriodDetection_initToPool(pd, in, out, bufSize, frameSize, &leaf.mempool);
}

void tPeriodDetection_initToPool (tPeriodDetection* const pd, float* in, float* out, int bufSize, int frameSize, tMempool* const mp)
{
 801f6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6e0:	b085      	sub	sp, #20
 801f6e2:	4682      	mov	sl, r0
 801f6e4:	468b      	mov	fp, r1
    _tMempool* m = *mp;
    _tPeriodDetection* p = *pd = (_tPeriodDetection*) mpool_calloc(sizeof(_tPeriodDetection), m);
 801f6e6:	2068      	movs	r0, #104	; 0x68
{
 801f6e8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f6ea:	461d      	mov	r5, r3
 801f6ec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    p->inBuffer = in;
    p->outBuffer = out;
    p->bufSize = bufSize;
    p->frameSize = frameSize;
    p->framesPerBuffer = p->bufSize / p->frameSize;
    p->curBlock = 1;
 801f6ee:	f04f 0801 	mov.w	r8, #1
    _tMempool* m = *mp;
 801f6f2:	f8d6 9000 	ldr.w	r9, [r6]
{
 801f6f6:	9203      	str	r2, [sp, #12]
    _tPeriodDetection* p = *pd = (_tPeriodDetection*) mpool_calloc(sizeof(_tPeriodDetection), m);
 801f6f8:	4649      	mov	r1, r9
 801f6fa:	f005 f897 	bl	802482c <mpool_calloc>
 801f6fe:	4604      	mov	r4, r0
    p->lastBlock = 0;
 801f700:	f04f 0c00 	mov.w	ip, #0
    p->outBuffer = out;
 801f704:	9b03      	ldr	r3, [sp, #12]
    _tPeriodDetection* p = *pd = (_tPeriodDetection*) mpool_calloc(sizeof(_tPeriodDetection), m);
 801f706:	f8ca 4000 	str.w	r4, [sl]
    
    p->hopSize = DEFHOPSIZE;
    p->windowSize = DEFWINDOWSIZE;
    p->fba = FBA;
    
    tEnvPD_initToPool(&p->env, p->windowSize, p->hopSize, p->frameSize, mp);
 801f70a:	2240      	movs	r2, #64	; 0x40
    p->hopSize = DEFHOPSIZE;
 801f70c:	f04f 1040 	mov.w	r0, #4194368	; 0x400040
    p->fba = FBA;
 801f710:	2114      	movs	r1, #20
    p->index = 0;
 801f712:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
    p->outBuffer = out;
 801f716:	6123      	str	r3, [r4, #16]
    tEnvPD_initToPool(&p->env, p->windowSize, p->hopSize, p->frameSize, mp);
 801f718:	463b      	mov	r3, r7
    p->hopSize = DEFHOPSIZE;
 801f71a:	63e0      	str	r0, [r4, #60]	; 0x3c
    tEnvPD_initToPool(&p->env, p->windowSize, p->hopSize, p->frameSize, mp);
 801f71c:	1d20      	adds	r0, r4, #4
    p->fba = FBA;
 801f71e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    tEnvPD_initToPool(&p->env, p->windowSize, p->hopSize, p->frameSize, mp);
 801f722:	4611      	mov	r1, r2
    p->mempool = m;
 801f724:	f8c4 9000 	str.w	r9, [r4]
    p->inBuffer = in;
 801f728:	f8c4 b00c 	str.w	fp, [r4, #12]
    p->frameSize = frameSize;
 801f72c:	e9c4 7505 	strd	r7, r5, [r4, #20]
    p->framesPerBuffer = p->bufSize / p->frameSize;
 801f730:	fb95 f5f7 	sdiv	r5, r5, r7
    p->lastBlock = 0;
 801f734:	e9c4 8c08 	strd	r8, ip, [r4, #32]
    p->framesPerBuffer = p->bufSize / p->frameSize;
 801f738:	61e5      	str	r5, [r4, #28]
    tEnvPD_initToPool(&p->env, p->windowSize, p->hopSize, p->frameSize, mp);
 801f73a:	9600      	str	r6, [sp, #0]
 801f73c:	f7ff fc2c 	bl	801ef98 <tEnvPD_initToPool>
    
    tSNAC_initToPool(&p->snac, DEFOVERLAP, mp);
 801f740:	4632      	mov	r2, r6
 801f742:	4641      	mov	r1, r8
 801f744:	f104 0008 	add.w	r0, r4, #8
 801f748:	f7ff fcd4 	bl	801f0f4 <tSNAC_initToPool>

    p->history = 0.0f;
    p->alpha = 1.0f;
    p->tolerance = 1.0f;
    p->timeConstant = DEFTIMECONSTANT;
    p->radius = expf(-1000.0f * p->hopSize * leaf.invSampleRate / p->timeConstant);
 801f74c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 801f74e:	4b0f      	ldr	r3, [pc, #60]	; (801f78c <tPeriodDetection_initToPool+0xb0>)
 801f750:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 801f754:	ee00 2a10 	vmov	s0, r2
    p->history = 0.0f;
 801f758:	2100      	movs	r1, #0
    p->radius = expf(-1000.0f * p->hopSize * leaf.invSampleRate / p->timeConstant);
 801f75a:	edd3 7a01 	vldr	s15, [r3, #4]
    p->alpha = 1.0f;
 801f75e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    p->radius = expf(-1000.0f * p->hopSize * leaf.invSampleRate / p->timeConstant);
 801f762:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->timeConstant = DEFTIMECONSTANT;
 801f766:	4a0a      	ldr	r2, [pc, #40]	; (801f790 <tPeriodDetection_initToPool+0xb4>)
    p->radius = expf(-1000.0f * p->hopSize * leaf.invSampleRate / p->timeConstant);
 801f768:	ee67 7a87 	vmul.f32	s15, s15, s14
    p->alpha = 1.0f;
 801f76c:	6623      	str	r3, [r4, #96]	; 0x60
    p->tolerance = 1.0f;
 801f76e:	6663      	str	r3, [r4, #100]	; 0x64
    p->history = 0.0f;
 801f770:	65e1      	str	r1, [r4, #92]	; 0x5c
    p->timeConstant = DEFTIMECONSTANT;
 801f772:	6462      	str	r2, [r4, #68]	; 0x44
    p->radius = expf(-1000.0f * p->hopSize * leaf.invSampleRate / p->timeConstant);
 801f774:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f778:	f008 f840 	bl	80277fc <expf>
    p->fidelityThreshold = 0.95;
 801f77c:	4b05      	ldr	r3, [pc, #20]	; (801f794 <tPeriodDetection_initToPool+0xb8>)
    p->radius = expf(-1000.0f * p->hopSize * leaf.invSampleRate / p->timeConstant);
 801f77e:	ed84 0a12 	vstr	s0, [r4, #72]	; 0x48
    p->fidelityThreshold = 0.95;
 801f782:	65a3      	str	r3, [r4, #88]	; 0x58
}
 801f784:	b005      	add	sp, #20
 801f786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f78a:	bf00      	nop
 801f78c:	200194a0 	.word	0x200194a0
 801f790:	42c80000 	.word	0x42c80000
 801f794:	3f733333 	.word	0x3f733333

0801f798 <tPeriodDetection_free>:

void tPeriodDetection_free (tPeriodDetection* const pd)
{
 801f798:	b538      	push	{r3, r4, r5, lr}
    _tPeriodDetection* p = *pd;
 801f79a:	6805      	ldr	r5, [r0, #0]
    _tEnvPD* x = *xpd;
 801f79c:	6868      	ldr	r0, [r5, #4]
    mpool_free((char*)x, x->mempool);
 801f79e:	6801      	ldr	r1, [r0, #0]
 801f7a0:	f005 f896 	bl	80248d0 <mpool_free>
    _tSNAC* s = *snac;
 801f7a4:	68ac      	ldr	r4, [r5, #8]
    mpool_free((char*)s->inputbuf, s->mempool);
 801f7a6:	e9d4 1000 	ldrd	r1, r0, [r4]
 801f7aa:	f005 f891 	bl	80248d0 <mpool_free>
    mpool_free((char*)s->processbuf, s->mempool);
 801f7ae:	6821      	ldr	r1, [r4, #0]
 801f7b0:	68a0      	ldr	r0, [r4, #8]
 801f7b2:	f005 f88d 	bl	80248d0 <mpool_free>
    mpool_free((char*)s->spectrumbuf, s->mempool);
 801f7b6:	6821      	ldr	r1, [r4, #0]
 801f7b8:	68e0      	ldr	r0, [r4, #12]
 801f7ba:	f005 f889 	bl	80248d0 <mpool_free>
    mpool_free((char*)s->biasbuf, s->mempool);
 801f7be:	6821      	ldr	r1, [r4, #0]
 801f7c0:	6920      	ldr	r0, [r4, #16]
 801f7c2:	f005 f885 	bl	80248d0 <mpool_free>
    mpool_free((char*)s, s->mempool);
 801f7c6:	6821      	ldr	r1, [r4, #0]
 801f7c8:	4620      	mov	r0, r4
 801f7ca:	f005 f881 	bl	80248d0 <mpool_free>
    
    tEnvPD_free(&p->env);
    tSNAC_free(&p->snac);
    mpool_free((char*)p, p->mempool);
 801f7ce:	6829      	ldr	r1, [r5, #0]
 801f7d0:	4628      	mov	r0, r5
}
 801f7d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char*)p, p->mempool);
 801f7d6:	f005 b87b 	b.w	80248d0 <mpool_free>
 801f7da:	bf00      	nop

0801f7dc <tPeriodDetection_tick>:

float tPeriodDetection_tick (tPeriodDetection* pd, float sample)
{
 801f7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    _tPeriodDetection* p = *pd;
 801f7e0:	6804      	ldr	r4, [r0, #0]
    
    int i, iLast;
    
    i = (p->curBlock*p->frameSize);
 801f7e2:	6963      	ldr	r3, [r4, #20]
 801f7e4:	6a21      	ldr	r1, [r4, #32]
    iLast = (p->lastBlock*p->frameSize)+p->index;
 801f7e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    i = (p->curBlock*p->frameSize);
 801f7e8:	fb01 f103 	mul.w	r1, r1, r3
    iLast = (p->lastBlock*p->frameSize)+p->index;
 801f7ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
    
    p->i = i;
    p->iLast = iLast;
    
    p->inBuffer[i+p->index] = sample;
 801f7ee:	68e0      	ldr	r0, [r4, #12]
    iLast = (p->lastBlock*p->frameSize)+p->index;
 801f7f0:	fb05 2303 	mla	r3, r5, r3, r2
    p->inBuffer[i+p->index] = sample;
 801f7f4:	440a      	add	r2, r1
    p->i = i;
 801f7f6:	62a1      	str	r1, [r4, #40]	; 0x28
    p->inBuffer[i+p->index] = sample;
 801f7f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    p->iLast = iLast;
 801f7fc:	6323      	str	r3, [r4, #48]	; 0x30
    p->inBuffer[i+p->index] = sample;
 801f7fe:	ed82 0a00 	vstr	s0, [r2]
    
    p->index++;
 801f802:	6b63      	ldr	r3, [r4, #52]	; 0x34
    p->indexstore = p->index;
    if (p->index >= p->frameSize)
 801f804:	6962      	ldr	r2, [r4, #20]
    p->index++;
 801f806:	3301      	adds	r3, #1
    if (p->index >= p->frameSize)
 801f808:	4293      	cmp	r3, r2
    p->index++;
 801f80a:	6363      	str	r3, [r4, #52]	; 0x34
    p->indexstore = p->index;
 801f80c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (p->index >= p->frameSize)
 801f80e:	da03      	bge.n	801f818 <tPeriodDetection_tick+0x3c>
        if (p->curBlock >= p->framesPerBuffer) p->curBlock = 0;
        p->lastBlock++;
        if (p->lastBlock >= p->framesPerBuffer) p->lastBlock = 0;
    }
    return p->period;
}
 801f810:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 801f814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    _tEnvPD* x = *xpd;
 801f818:	f8d4 c004 	ldr.w	ip, [r4, #4]
        p->index = 0;
 801f81c:	2200      	movs	r2, #0
    int n = x->blockSize;
 801f81e:	f241 1398 	movw	r3, #4504	; 0x1198
    for (count = x->x_phase, sump = x->x_sumbuf;
 801f822:	f241 1604 	movw	r6, #4356	; 0x1104
        p->index = 0;
 801f826:	6362      	str	r2, [r4, #52]	; 0x34
        tEnvPD_processBlock(&p->env, &(p->inBuffer[i]));
 801f828:	0089      	lsls	r1, r1, #2
    int n = x->blockSize;
 801f82a:	f83c 5003 	ldrh.w	r5, [ip, r3]
         count < x->x_npoints; count += x->x_realperiod, sump++)
 801f82e:	f241 130a 	movw	r3, #4362	; 0x110a
    for (count = x->x_phase, sump = x->x_sumbuf;
 801f832:	f83c 6006 	ldrh.w	r6, [ip, r6]
 801f836:	f241 1010 	movw	r0, #4368	; 0x1110
 801f83a:	f83c 3003 	ldrh.w	r3, [ip, r3]
    in += n;
 801f83e:	eb01 0985 	add.w	r9, r1, r5, lsl #2
 801f842:	68e2      	ldr	r2, [r4, #12]
    for (count = x->x_phase, sump = x->x_sumbuf;
 801f844:	4460      	add	r0, ip
 801f846:	42b3      	cmp	r3, r6
    in += n;
 801f848:	4491      	add	r9, r2
    for (count = x->x_phase, sump = x->x_sumbuf;
 801f84a:	d924      	bls.n	801f896 <tPeriodDetection_tick+0xba>
 801f84c:	f241 1808 	movw	r8, #4360	; 0x1108
 801f850:	f241 1e0a 	movw	lr, #4362	; 0x110a
 801f854:	4607      	mov	r7, r0
 801f856:	f10c 0a04 	add.w	sl, ip, #4
 801f85a:	44e0      	add	r8, ip
 801f85c:	44e6      	add	lr, ip
        t_sample *hp = x->buf + count;
 801f85e:	eb0a 0286 	add.w	r2, sl, r6, lsl #2
        t_sample sum = *sump;
 801f862:	ecb7 7a01 	vldmia	r7!, {s14}
        for (i = 0; i < n; i++)
 801f866:	b165      	cbz	r5, 801f882 <tPeriodDetection_tick+0xa6>
 801f868:	4648      	mov	r0, r9
 801f86a:	2300      	movs	r3, #0
            sum += *hp++ * (*fp * *fp);
 801f86c:	ed70 7a01 	vldmdb	r0!, {s15}
        for (i = 0; i < n; i++)
 801f870:	3301      	adds	r3, #1
            sum += *hp++ * (*fp * *fp);
 801f872:	ecf2 6a01 	vldmia	r2!, {s13}
 801f876:	ee67 7aa7 	vmul.f32	s15, s15, s15
        for (i = 0; i < n; i++)
 801f87a:	429d      	cmp	r5, r3
            sum += *hp++ * (*fp * *fp);
 801f87c:	eea6 7aa7 	vfma.f32	s14, s13, s15
        for (i = 0; i < n; i++)
 801f880:	d1f4      	bne.n	801f86c <tPeriodDetection_tick+0x90>
        *sump = sum;
 801f882:	ed07 7a01 	vstr	s14, [r7, #-4]
 801f886:	4638      	mov	r0, r7
         count < x->x_npoints; count += x->x_realperiod, sump++)
 801f888:	f8b8 2000 	ldrh.w	r2, [r8]
 801f88c:	f8be 3000 	ldrh.w	r3, [lr]
 801f890:	4416      	add	r6, r2
    for (count = x->x_phase, sump = x->x_sumbuf;
 801f892:	429e      	cmp	r6, r3
 801f894:	dbe3      	blt.n	801f85e <tPeriodDetection_tick+0x82>
    x->x_phase -= n;
 801f896:	f241 1204 	movw	r2, #4356	; 0x1104
    sump[0] = 0;
 801f89a:	2300      	movs	r3, #0
 801f89c:	6003      	str	r3, [r0, #0]
        tSNAC_ioSamples(&p->snac, &(p->inBuffer[i]), &(p->outBuffer[i]), p->frameSize);
 801f89e:	f104 0008 	add.w	r0, r4, #8
    x->x_phase -= n;
 801f8a2:	f83c 3002 	ldrh.w	r3, [ip, r2]
 801f8a6:	1b5d      	subs	r5, r3, r5
 801f8a8:	f82c 5002 	strh.w	r5, [ip, r2]
        tSNAC_ioSamples(&p->snac, &(p->inBuffer[i]), &(p->outBuffer[i]), p->frameSize);
 801f8ac:	6963      	ldr	r3, [r4, #20]
 801f8ae:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
 801f8b2:	440a      	add	r2, r1
 801f8b4:	4429      	add	r1, r5
 801f8b6:	f7ff fcaf 	bl	801f218 <tSNAC_ioSamples>
    _tSNAC* s = *snac;
 801f8ba:	68a3      	ldr	r3, [r4, #8]
        if (fidelity > p->fidelityThreshold)
 801f8bc:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
 801f8c0:	edd3 7a08 	vldr	s15, [r3, #32]
 801f8c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8cc:	d501      	bpl.n	801f8d2 <tPeriodDetection_tick+0xf6>
    return(s->periodlength);
 801f8ce:	69db      	ldr	r3, [r3, #28]
        	p->period = tSNAC_getPeriod(&p->snac);
 801f8d0:	63a3      	str	r3, [r4, #56]	; 0x38
        if (p->curBlock >= p->framesPerBuffer) p->curBlock = 0;
 801f8d2:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
        p->curBlock++;
 801f8d6:	3301      	adds	r3, #1
        if (p->curBlock >= p->framesPerBuffer) p->curBlock = 0;
 801f8d8:	4293      	cmp	r3, r2
        p->curBlock++;
 801f8da:	6223      	str	r3, [r4, #32]
        if (p->curBlock >= p->framesPerBuffer) p->curBlock = 0;
 801f8dc:	db01      	blt.n	801f8e2 <tPeriodDetection_tick+0x106>
 801f8de:	2300      	movs	r3, #0
 801f8e0:	6223      	str	r3, [r4, #32]
        p->lastBlock++;
 801f8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
}
 801f8e4:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
        p->lastBlock++;
 801f8e8:	3301      	adds	r3, #1
        if (p->lastBlock >= p->framesPerBuffer) p->lastBlock = 0;
 801f8ea:	429a      	cmp	r2, r3
 801f8ec:	bfd8      	it	le
 801f8ee:	2300      	movle	r3, #0
 801f8f0:	6263      	str	r3, [r4, #36]	; 0x24
}
 801f8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f8f6:	bf00      	nop

0801f8f8 <tPeriodDetection_getPeriod>:

float tPeriodDetection_getPeriod(tPeriodDetection* pd)
{
    _tPeriodDetection* p = *pd;
    return p->period;
 801f8f8:	6803      	ldr	r3, [r0, #0]
}
 801f8fa:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
 801f8fe:	4770      	bx	lr

0801f900 <tPeriodDetection_setFidelityThreshold>:
    p->windowSize = ws;
}

void tPeriodDetection_setFidelityThreshold(tPeriodDetection* pd, float threshold)
{
    _tPeriodDetection* p = *pd;
 801f900:	6803      	ldr	r3, [r0, #0]
    p->fidelityThreshold = threshold;
 801f902:	ed83 0a16 	vstr	s0, [r3, #88]	; 0x58
}
 801f906:	4770      	bx	lr

0801f908 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf.mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
 801f908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f90a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801f90e:	6816      	ldr	r6, [r2, #0]
{
 801f910:	460d      	mov	r5, r1
 801f912:	4607      	mov	r7, r0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 801f914:	202c      	movs	r0, #44	; 0x2c
 801f916:	4631      	mov	r1, r6
{
 801f918:	eeb0 8a40 	vmov.f32	s16, s0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 801f91c:	f004 ff30 	bl	8024780 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 801f920:	ee07 5a90 	vmov	s15, r5
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 801f924:	6038      	str	r0, [r7, #0]
 801f926:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 801f928:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
 801f92c:	6006      	str	r6, [r0, #0]
    d->maxDelay = maxDelay;
 801f92e:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 801f930:	eef4 7ac8 	vcmpe.f32	s15, s16
 801f934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f938:	d457      	bmi.n	801f9ea <tLinearDelay_initToPool+0xe2>
    else if (delay < 0.0f)  d->delay = 0.0f;
 801f93a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801f93e:	2300      	movs	r3, #0
 801f940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f944:	bf4c      	ite	mi
 801f946:	6203      	strmi	r3, [r0, #32]
    else                    d->delay = delay;
 801f948:	ed80 8a08 	vstrpl	s16, [r0, #32]

    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801f94c:	4631      	mov	r1, r6
 801f94e:	00a8      	lsls	r0, r5, #2
 801f950:	f004 ff16 	bl	8024780 <mpool_alloc>

    d->gain = 1.0f;

    d->lastIn = 0.0f;
 801f954:	eddf 7a26 	vldr	s15, [pc, #152]	; 801f9f0 <tLinearDelay_initToPool+0xe8>
    d->gain = 1.0f;
 801f958:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
 801f95c:	2300      	movs	r3, #0
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801f95e:	60a0      	str	r0, [r4, #8]

int     tLinearDelay_setDelay (tLinearDelay* const dl, float delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801f960:	eeb0 0a67 	vmov.f32	s0, s15
    d->gain = 1.0f;
 801f964:	6062      	str	r2, [r4, #4]
    d->lastIn = 0.0f;
 801f966:	edc4 7a04 	vstr	s15, [r4, #16]
    d->lastOut = 0.0f;
 801f96a:	edc4 7a03 	vstr	s15, [r4, #12]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801f96e:	edd4 0a08 	vldr	s1, [r4, #32]
    d->outPoint = 0;
 801f972:	e9c4 3305 	strd	r3, r3, [r4, #20]
    _tLinearDelay* d = *dl;
 801f976:	683d      	ldr	r5, [r7, #0]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801f978:	edd5 7a07 	vldr	s15, [r5, #28]
 801f97c:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 801f980:	f004 fcfe 	bl	8024380 <LEAF_clip>

    float outPointer = d->inPoint - d->delay;
 801f984:	edd5 7a05 	vldr	s15, [r5, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801f988:	ed85 0a08 	vstr	s0, [r5, #32]
    float outPointer = d->inPoint - d->delay;
 801f98c:	eef8 7a67 	vcvt.f32.u32	s15, s15

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
 801f990:	69ea      	ldr	r2, [r5, #28]
    float outPointer = d->inPoint - d->delay;
 801f992:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 801f996:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f99e:	d50a      	bpl.n	801f9b6 <tLinearDelay_initToPool+0xae>
        outPointer += d->maxDelay; // modulo maximum length
 801f9a0:	ee07 2a90 	vmov	s15, r2
 801f9a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f9a8:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 801f9ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9b4:	d4f8      	bmi.n	801f9a8 <tLinearDelay_initToPool+0xa0>

    d->outPoint = (uint32_t) outPointer;   // integer part
 801f9b6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801f9ba:	ee17 3a90 	vmov	r3, s15

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
 801f9be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 801f9c2:	ee07 3a10 	vmov	s14, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 801f9c6:	4293      	cmp	r3, r2
    d->outPoint = (uint32_t) outPointer;   // integer part
 801f9c8:	61ab      	str	r3, [r5, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 801f9ca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801f9ce:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 801f9d2:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->alpha = outPointer - d->outPoint; // fractional part
 801f9d6:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 801f9da:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 801f9de:	d101      	bne.n	801f9e4 <tLinearDelay_initToPool+0xdc>
 801f9e0:	2300      	movs	r3, #0
 801f9e2:	61ab      	str	r3, [r5, #24]
}
 801f9e4:	ecbd 8b02 	vpop	{d8}
 801f9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (delay > maxDelay)   d->delay = maxDelay;
 801f9ea:	edc0 7a08 	vstr	s15, [r0, #32]
 801f9ee:	e7ad      	b.n	801f94c <tLinearDelay_initToPool+0x44>
 801f9f0:	00000000 	.word	0x00000000

0801f9f4 <tLinearDelay_free>:
{
 801f9f4:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 801f9f6:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
 801f9f8:	6821      	ldr	r1, [r4, #0]
 801f9fa:	68a0      	ldr	r0, [r4, #8]
 801f9fc:	f004 ff68 	bl	80248d0 <mpool_free>
    mpool_free((char*)d, d->mempool);
 801fa00:	6821      	ldr	r1, [r4, #0]
 801fa02:	4620      	mov	r0, r4
}
 801fa04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 801fa08:	f004 bf62 	b.w	80248d0 <mpool_free>

0801fa0c <tLinearDelay_clear>:
	_tLinearDelay* d = *dl;
 801fa0c:	6801      	ldr	r1, [r0, #0]
	for (int i = 0; i < d->maxDelay; i++)
 801fa0e:	69cb      	ldr	r3, [r1, #28]
 801fa10:	b14b      	cbz	r3, 801fa26 <tLinearDelay_clear+0x1a>
 801fa12:	2300      	movs	r3, #0
		d->buff[i] = 0;
 801fa14:	2000      	movs	r0, #0
 801fa16:	688a      	ldr	r2, [r1, #8]
 801fa18:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	for (int i = 0; i < d->maxDelay; i++)
 801fa1c:	3301      	adds	r3, #1
		d->buff[i] = 0;
 801fa1e:	6010      	str	r0, [r2, #0]
	for (int i = 0; i < d->maxDelay; i++)
 801fa20:	69ca      	ldr	r2, [r1, #28]
 801fa22:	429a      	cmp	r2, r3
 801fa24:	d8f7      	bhi.n	801fa16 <tLinearDelay_clear+0xa>
}
 801fa26:	4770      	bx	lr

0801fa28 <tLinearDelay_tick>:
{
 801fa28:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 801fa2a:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 801fa2c:	edd3 7a01 	vldr	s15, [r3, #4]
 801fa30:	6959      	ldr	r1, [r3, #20]
 801fa32:	689a      	ldr	r2, [r3, #8]
 801fa34:	ee27 0a80 	vmul.f32	s0, s15, s0
 801fa38:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801fa3c:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 801fa40:	695a      	ldr	r2, [r3, #20]
 801fa42:	69d9      	ldr	r1, [r3, #28]
 801fa44:	3201      	adds	r2, #1
 801fa46:	428a      	cmp	r2, r1
 801fa48:	615a      	str	r2, [r3, #20]
 801fa4a:	d101      	bne.n	801fa50 <tLinearDelay_tick+0x28>
 801fa4c:	2200      	movs	r2, #0
 801fa4e:	615a      	str	r2, [r3, #20]
    uint32_t idx = (uint32_t) d->outPoint;
 801fa50:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
 801fa52:	6898      	ldr	r0, [r3, #8]
    if ((idx + 1) < d->maxDelay)
 801fa54:	1c54      	adds	r4, r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
 801fa56:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801fa5a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801fa5e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ((idx + 1) < d->maxDelay)
 801fa62:	42a1      	cmp	r1, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
 801fa64:	ed92 0a00 	vldr	s0, [r2]
 801fa68:	ee20 0a07 	vmul.f32	s0, s0, s14
 801fa6c:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 801fa70:	d909      	bls.n	801fa86 <tLinearDelay_tick+0x5e>
        d->lastOut += d->buff[idx+1] * d->alpha;
 801fa72:	ed92 7a01 	vldr	s14, [r2, #4]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 801fa76:	619c      	str	r4, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 801fa78:	eea7 0a27 	vfma.f32	s0, s14, s15
 801fa7c:	ed83 0a03 	vstr	s0, [r3, #12]
}
 801fa80:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fa84:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 801fa86:	ed90 7a00 	vldr	s14, [r0]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 801fa8a:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
 801fa8c:	eea7 0a27 	vfma.f32	s0, s14, s15
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 801fa90:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 801fa92:	ed83 0a03 	vstr	s0, [r3, #12]
}
 801fa96:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fa9a:	4770      	bx	lr

0801fa9c <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
 801fa9c:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 801fa9e:	edd3 7a01 	vldr	s15, [r3, #4]
 801faa2:	6959      	ldr	r1, [r3, #20]
 801faa4:	689a      	ldr	r2, [r3, #8]
 801faa6:	ee27 0a80 	vmul.f32	s0, s15, s0
 801faaa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801faae:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 801fab2:	695a      	ldr	r2, [r3, #20]
 801fab4:	69d9      	ldr	r1, [r3, #28]
 801fab6:	3201      	adds	r2, #1
 801fab8:	428a      	cmp	r2, r1
 801faba:	615a      	str	r2, [r3, #20]
 801fabc:	d101      	bne.n	801fac2 <tLinearDelay_tickIn+0x26>
 801fabe:	2200      	movs	r2, #0
 801fac0:	615a      	str	r2, [r3, #20]
}
 801fac2:	4770      	bx	lr

0801fac4 <tLinearDelay_tickOut>:
{
 801fac4:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 801fac6:	6803      	ldr	r3, [r0, #0]
	uint32_t idx = (uint32_t) d->outPoint;
 801fac8:	699a      	ldr	r2, [r3, #24]
	d->lastOut = d->buff[idx] * d->omAlpha;
 801faca:	6899      	ldr	r1, [r3, #8]
	if ((idx + 1) < d->maxDelay)
 801facc:	1c50      	adds	r0, r2, #1
	d->lastOut = d->buff[idx] * d->omAlpha;
 801face:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801fad2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	if ((idx + 1) < d->maxDelay)
 801fad6:	69dc      	ldr	r4, [r3, #28]
 801fad8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
	d->lastOut = d->buff[idx] * d->omAlpha;
 801fadc:	ed92 0a00 	vldr	s0, [r2]
	if ((idx + 1) < d->maxDelay)
 801fae0:	42a0      	cmp	r0, r4
	d->lastOut = d->buff[idx] * d->omAlpha;
 801fae2:	ee20 0a07 	vmul.f32	s0, s0, s14
 801fae6:	ed83 0a03 	vstr	s0, [r3, #12]
	if ((idx + 1) < d->maxDelay)
 801faea:	d209      	bcs.n	801fb00 <tLinearDelay_tickOut+0x3c>
		d->lastOut += d->buff[idx+1] * d->alpha;
 801faec:	ed92 7a01 	vldr	s14, [r2, #4]
	if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 801faf0:	6198      	str	r0, [r3, #24]
		d->lastOut += d->buff[idx+1] * d->alpha;
 801faf2:	eea7 0a27 	vfma.f32	s0, s14, s15
 801faf6:	ed83 0a03 	vstr	s0, [r3, #12]
}
 801fafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fafe:	4770      	bx	lr
		d->lastOut += d->buff[0] * d->alpha;
 801fb00:	ed91 7a00 	vldr	s14, [r1]
	if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 801fb04:	2200      	movs	r2, #0
		d->lastOut += d->buff[0] * d->alpha;
 801fb06:	eea7 0a27 	vfma.f32	s0, s14, s15
	if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 801fb0a:	619a      	str	r2, [r3, #24]
		d->lastOut += d->buff[0] * d->alpha;
 801fb0c:	ed83 0a03 	vstr	s0, [r3, #12]
}
 801fb10:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb14:	4770      	bx	lr
 801fb16:	bf00      	nop

0801fb18 <tLinearDelay_setDelay>:
{
 801fb18:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 801fb1a:	6804      	ldr	r4, [r0, #0]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801fb1c:	eef0 0a40 	vmov.f32	s1, s0
 801fb20:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 801fb94 <tLinearDelay_setDelay+0x7c>
 801fb24:	edd4 7a07 	vldr	s15, [r4, #28]
 801fb28:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 801fb2c:	f004 fc28 	bl	8024380 <LEAF_clip>
    float outPointer = d->inPoint - d->delay;
 801fb30:	edd4 7a05 	vldr	s15, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801fb34:	ed84 0a08 	vstr	s0, [r4, #32]
    float outPointer = d->inPoint - d->delay;
 801fb38:	eef8 7a67 	vcvt.f32.u32	s15, s15
        outPointer += d->maxDelay; // modulo maximum length
 801fb3c:	69e2      	ldr	r2, [r4, #28]
    float outPointer = d->inPoint - d->delay;
 801fb3e:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 801fb42:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fb46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb4a:	d50a      	bpl.n	801fb62 <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
 801fb4c:	ee07 2a90 	vmov	s15, r2
 801fb50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fb54:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 801fb58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb60:	d4f8      	bmi.n	801fb54 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
 801fb62:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801fb66:	ee17 3a90 	vmov	r3, s15
    d->omAlpha = 1.0f - d->alpha;
 801fb6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 801fb6e:	ee07 3a10 	vmov	s14, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 801fb72:	4293      	cmp	r3, r2
    d->outPoint = (uint32_t) outPointer;   // integer part
 801fb74:	61a3      	str	r3, [r4, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 801fb76:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801fb7a:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 801fb7e:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->alpha = outPointer - d->outPoint; // fractional part
 801fb82:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 801fb86:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 801fb8a:	d101      	bne.n	801fb90 <tLinearDelay_setDelay+0x78>
 801fb8c:	2300      	movs	r3, #0
 801fb8e:	61a3      	str	r3, [r4, #24]

    return 0;
}
 801fb90:	2000      	movs	r0, #0
 801fb92:	bd10      	pop	{r4, pc}
 801fb94:	00000000 	.word	0x00000000

0801fb98 <tLinearDelay_getDelay>:
}

float   tLinearDelay_getDelay (tLinearDelay* const dl)
{
    _tLinearDelay* d = *dl;
    return d->delay;
 801fb98:	6803      	ldr	r3, [r0, #0]
}
 801fb9a:	ed93 0a08 	vldr	s0, [r3, #32]
 801fb9e:	4770      	bx	lr

0801fba0 <tLinearDelay_getLastOut>:

float   tLinearDelay_getLastOut (tLinearDelay* const dl)
{
    _tLinearDelay* d = *dl;
    return d->lastOut;
 801fba0:	6803      	ldr	r3, [r0, #0]
}
 801fba2:	ed93 0a03 	vldr	s0, [r3, #12]
 801fba6:	4770      	bx	lr

0801fba8 <tTapeDelay_init>:
    return d->gain;
}

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ TapeDelay ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ //
void tTapeDelay_init (tTapeDelay* const dl, float delay, uint32_t maxDelay)
{
 801fba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tTapeDelay_initToPool(dl, delay, maxDelay, &leaf.mempool);
}

void tTapeDelay_initToPool (tTapeDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
    _tMempool* m = *mp;
 801fbaa:	4b18      	ldr	r3, [pc, #96]	; (801fc0c <tTapeDelay_init+0x64>)
{
 801fbac:	4606      	mov	r6, r0
 801fbae:	460f      	mov	r7, r1
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 801fbb0:	202c      	movs	r0, #44	; 0x2c
{
 801fbb2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801fbb6:	699d      	ldr	r5, [r3, #24]
{
 801fbb8:	eeb0 8a40 	vmov.f32	s16, s0
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 801fbbc:	4629      	mov	r1, r5
 801fbbe:	f004 fddf 	bl	8024780 <mpool_alloc>
 801fbc2:	4604      	mov	r4, r0
    d->mempool = m;

    d->maxDelay = maxDelay;

    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801fbc4:	4629      	mov	r1, r5
 801fbc6:	00b8      	lsls	r0, r7, #2
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 801fbc8:	6034      	str	r4, [r6, #0]
    d->mempool = m;
 801fbca:	6025      	str	r5, [r4, #0]
    d->maxDelay = maxDelay;
 801fbcc:	61a7      	str	r7, [r4, #24]
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801fbce:	f004 fdd7 	bl	8024780 <mpool_alloc>

    d->gain = 1.0f;
 801fbd2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

    d->lastIn = 0.0f;
 801fbd6:	2300      	movs	r3, #0
    d->lastOut = 0.0f;

    d->idx = 0.0f;
    d->inc = 1.0f;
    d->inPoint = 0;
 801fbd8:	2200      	movs	r2, #0
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801fbda:	60a0      	str	r0, [r4, #8]
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, float delay)
{
    _tTapeDelay* d = *dl;
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801fbdc:	eef0 0a48 	vmov.f32	s1, s16
    d->gain = 1.0f;
 801fbe0:	edc4 7a01 	vstr	s15, [r4, #4]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801fbe4:	eeb0 0a67 	vmov.f32	s0, s15
    d->inc = 1.0f;
 801fbe8:	edc4 7a08 	vstr	s15, [r4, #32]
    d->inPoint = 0;
 801fbec:	6162      	str	r2, [r4, #20]
    d->lastIn = 0.0f;
 801fbee:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 801fbf0:	60e3      	str	r3, [r4, #12]
    d->idx = 0.0f;
 801fbf2:	6263      	str	r3, [r4, #36]	; 0x24
    _tTapeDelay* d = *dl;
 801fbf4:	6834      	ldr	r4, [r6, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801fbf6:	edd4 7a06 	vldr	s15, [r4, #24]
 801fbfa:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 801fbfe:	f004 fbbf 	bl	8024380 <LEAF_clip>
 801fc02:	ed84 0a07 	vstr	s0, [r4, #28]
}
 801fc06:	ecbd 8b02 	vpop	{d8}
 801fc0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fc0c:	200194a0 	.word	0x200194a0

0801fc10 <tTapeDelay_initToPool>:
{
 801fc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc12:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801fc16:	6815      	ldr	r5, [r2, #0]
{
 801fc18:	4606      	mov	r6, r0
 801fc1a:	460f      	mov	r7, r1
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 801fc1c:	202c      	movs	r0, #44	; 0x2c
 801fc1e:	4629      	mov	r1, r5
{
 801fc20:	eeb0 8a40 	vmov.f32	s16, s0
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 801fc24:	f004 fdac 	bl	8024780 <mpool_alloc>
 801fc28:	4604      	mov	r4, r0
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801fc2a:	4629      	mov	r1, r5
 801fc2c:	00b8      	lsls	r0, r7, #2
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 801fc2e:	6034      	str	r4, [r6, #0]
    d->mempool = m;
 801fc30:	6025      	str	r5, [r4, #0]
    d->maxDelay = maxDelay;
 801fc32:	61a7      	str	r7, [r4, #24]
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801fc34:	f004 fda4 	bl	8024780 <mpool_alloc>
    d->gain = 1.0f;
 801fc38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->lastIn = 0.0f;
 801fc3c:	2300      	movs	r3, #0
    d->inPoint = 0;
 801fc3e:	2200      	movs	r2, #0
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801fc40:	60a0      	str	r0, [r4, #8]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801fc42:	eef0 0a48 	vmov.f32	s1, s16
    d->gain = 1.0f;
 801fc46:	edc4 7a01 	vstr	s15, [r4, #4]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801fc4a:	eeb0 0a67 	vmov.f32	s0, s15
    d->inc = 1.0f;
 801fc4e:	edc4 7a08 	vstr	s15, [r4, #32]
    d->inPoint = 0;
 801fc52:	6162      	str	r2, [r4, #20]
    d->lastIn = 0.0f;
 801fc54:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 801fc56:	60e3      	str	r3, [r4, #12]
    d->idx = 0.0f;
 801fc58:	6263      	str	r3, [r4, #36]	; 0x24
    _tTapeDelay* d = *dl;
 801fc5a:	6834      	ldr	r4, [r6, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801fc5c:	edd4 7a06 	vldr	s15, [r4, #24]
 801fc60:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 801fc64:	f004 fb8c 	bl	8024380 <LEAF_clip>
 801fc68:	ed84 0a07 	vstr	s0, [r4, #28]
}
 801fc6c:	ecbd 8b02 	vpop	{d8}
 801fc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fc72:	bf00      	nop

0801fc74 <tTapeDelay_free>:
{
 801fc74:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 801fc76:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
 801fc78:	6821      	ldr	r1, [r4, #0]
 801fc7a:	68a0      	ldr	r0, [r4, #8]
 801fc7c:	f004 fe28 	bl	80248d0 <mpool_free>
    mpool_free((char*)d, d->mempool);
 801fc80:	6821      	ldr	r1, [r4, #0]
 801fc82:	4620      	mov	r0, r4
}
 801fc84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 801fc88:	f004 be22 	b.w	80248d0 <mpool_free>

0801fc8c <tTapeDelay_tick>:
{
 801fc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tTapeDelay* d = *dl;
 801fc8e:	6804      	ldr	r4, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 801fc90:	edd4 7a01 	vldr	s15, [r4, #4]
 801fc94:	6962      	ldr	r2, [r4, #20]
 801fc96:	68a3      	ldr	r3, [r4, #8]
 801fc98:	ee27 0a80 	vmul.f32	s0, s15, s0
 801fc9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801fca0:	ed83 0a00 	vstr	s0, [r3]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 801fca4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 801fca8:	3201      	adds	r2, #1
 801fcaa:	429a      	cmp	r2, r3
 801fcac:	6162      	str	r2, [r4, #20]
 801fcae:	d101      	bne.n	801fcb4 <tTapeDelay_tick+0x28>
 801fcb0:	2200      	movs	r2, #0
 801fcb2:	6162      	str	r2, [r4, #20]
    int idx =  (int) d->idx;
 801fcb4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801fcb8:	1e5e      	subs	r6, r3, #1
 801fcba:	68a1      	ldr	r1, [r4, #8]
    int idx =  (int) d->idx;
 801fcbc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801fcc0:	ee17 2a10 	vmov	r2, s14
    float alpha = d->idx - idx;
 801fcc4:	eeb8 2ac7 	vcvt.f32.s32	s4, s14
                                              d->buff[(idx + 1) % d->maxDelay],
 801fcc8:	1c57      	adds	r7, r2, #1
                                              d->buff[(idx + 2) % d->maxDelay],
 801fcca:	f102 0c02 	add.w	ip, r2, #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801fcce:	4416      	add	r6, r2
 801fcd0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801fcd4:	ee37 2ac2 	vsub.f32	s4, s15, s4
 801fcd8:	edd2 0a00 	vldr	s1, [r2]
                                              d->buff[(idx + 1) % d->maxDelay],
 801fcdc:	fbb7 f0f3 	udiv	r0, r7, r3
 801fce0:	fb03 7010 	mls	r0, r3, r0, r7
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801fce4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
                                              d->buff[(idx + 2) % d->maxDelay],
 801fce8:	fbbc f5f3 	udiv	r5, ip, r3
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801fcec:	ed92 1a00 	vldr	s2, [r2]
                                              d->buff[(idx + 2) % d->maxDelay],
 801fcf0:	fb03 c515 	mls	r5, r3, r5, ip
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801fcf4:	fbb6 f2f3 	udiv	r2, r6, r3
 801fcf8:	fb03 6312 	mls	r3, r3, r2, r6
 801fcfc:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 801fd00:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801fd04:	edd5 1a00 	vldr	s3, [r5]
 801fd08:	ed91 0a00 	vldr	s0, [r1]
 801fd0c:	f004 fc50 	bl	80245b0 <LEAF_interpolate_hermite_x>
    float diff = (d->inPoint - d->idx);
 801fd10:	edd4 7a05 	vldr	s15, [r4, #20]
 801fd14:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 801fd18:	eef8 7a67 	vcvt.f32.u32	s15, s15
    while (diff < 0.f) diff += d->maxDelay;
 801fd1c:	ed94 7a06 	vldr	s14, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801fd20:	ed84 0a03 	vstr	s0, [r4, #12]
    while (diff < 0.f) diff += d->maxDelay;
 801fd24:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    float diff = (d->inPoint - d->idx);
 801fd28:	ee77 7ae6 	vsub.f32	s15, s15, s13
    while (diff < 0.f) diff += d->maxDelay;
 801fd2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd34:	d506      	bpl.n	801fd44 <tTapeDelay_tick+0xb8>
 801fd36:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fd3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd42:	d4f8      	bmi.n	801fd36 <tTapeDelay_tick+0xaa>
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 801fd44:	edd4 5a07 	vldr	s11, [r4, #28]
 801fd48:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801fd4c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801fd50:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 801fd54:	ee76 7a05 	vadd.f32	s15, s12, s10
    d->idx += d->inc;
 801fd58:	ee76 6aa7 	vadd.f32	s13, s13, s15
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 801fd5c:	edc4 7a08 	vstr	s15, [r4, #32]
    if (d->idx >= d->maxDelay) d->idx = 0.0f;
 801fd60:	eef4 6ac7 	vcmpe.f32	s13, s14
 801fd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd68:	da02      	bge.n	801fd70 <tTapeDelay_tick+0xe4>
    d->idx += d->inc;
 801fd6a:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
}
 801fd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (d->idx >= d->maxDelay) d->idx = 0.0f;
 801fd70:	2300      	movs	r3, #0
 801fd72:	6263      	str	r3, [r4, #36]	; 0x24
}
 801fd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fd76:	bf00      	nop

0801fd78 <tTapeDelay_setDelay>:
{
 801fd78:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 801fd7a:	6804      	ldr	r4, [r0, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801fd7c:	eef0 0a40 	vmov.f32	s1, s0
 801fd80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801fd84:	edd4 7a06 	vldr	s15, [r4, #24]
 801fd88:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 801fd8c:	f004 faf8 	bl	8024380 <LEAF_clip>
 801fd90:	ed84 0a07 	vstr	s0, [r4, #28]
}
 801fd94:	bd10      	pop	{r4, pc}
 801fd96:	bf00      	nop

0801fd98 <tTapeDelay_tapOut>:

float tTapeDelay_tapOut (tTapeDelay* const dl, float tapDelay)
{
 801fd98:	b4f0      	push	{r4, r5, r6, r7}
    _tTapeDelay* d = *dl;
 801fd9a:	6801      	ldr	r1, [r0, #0]

    float tap = (float) d->inPoint - tapDelay - 1.f;
 801fd9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fda0:	edd1 7a05 	vldr	s15, [r1, #20]
 801fda4:	698b      	ldr	r3, [r1, #24]
 801fda6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fdaa:	ee37 0ac0 	vsub.f32	s0, s15, s0

    // Check for wraparound.
    while ( tap < 0.f )   tap += (float)d->maxDelay;
 801fdae:	eeb4 0ac7 	vcmpe.f32	s0, s14
    float tap = (float) d->inPoint - tapDelay - 1.f;
 801fdb2:	ee70 7a47 	vsub.f32	s15, s0, s14
    while ( tap < 0.f )   tap += (float)d->maxDelay;
 801fdb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdba:	d50a      	bpl.n	801fdd2 <tTapeDelay_tapOut+0x3a>
 801fdbc:	ee07 3a10 	vmov	s14, r3
 801fdc0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801fdc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fdc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fdcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdd0:	d4f8      	bmi.n	801fdc4 <tTapeDelay_tapOut+0x2c>

    int idx =  (int) tap;
 801fdd2:	eebd 7ae7 	vcvt.s32.f32	s14, s15

    float alpha = tap - idx;

    float samp =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801fdd6:	6889      	ldr	r1, [r1, #8]
 801fdd8:	1e5d      	subs	r5, r3, #1
    int idx =  (int) tap;
 801fdda:	ee17 2a10 	vmov	r2, s14
    float alpha = tap - idx;
 801fdde:	eeb8 2ac7 	vcvt.f32.s32	s4, s14
                                              d->buff[idx],
                                              d->buff[(idx + 1) % d->maxDelay],
 801fde2:	1c56      	adds	r6, r2, #1
                                              d->buff[(idx + 2) % d->maxDelay],
 801fde4:	1c97      	adds	r7, r2, #2
    float samp =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801fde6:	4415      	add	r5, r2
 801fde8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801fdec:	ee37 2ac2 	vsub.f32	s4, s15, s4
 801fdf0:	edd2 0a00 	vldr	s1, [r2]
                                              d->buff[(idx + 1) % d->maxDelay],
 801fdf4:	fbb6 f0f3 	udiv	r0, r6, r3
 801fdf8:	fb03 6210 	mls	r2, r3, r0, r6
    float samp =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801fdfc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
                                              d->buff[(idx + 2) % d->maxDelay],
 801fe00:	fbb7 f4f3 	udiv	r4, r7, r3
    float samp =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801fe04:	ed92 1a00 	vldr	s2, [r2]
                                              d->buff[(idx + 2) % d->maxDelay],
 801fe08:	fb03 7414 	mls	r4, r3, r4, r7
    float samp =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801fe0c:	fbb5 f2f3 	udiv	r2, r5, r3
 801fe10:	fb03 5312 	mls	r3, r3, r2, r5
 801fe14:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801fe18:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801fe1c:	edd0 1a00 	vldr	s3, [r0]
 801fe20:	ed91 0a00 	vldr	s0, [r1]
                                              alpha);

    return samp;

}
 801fe24:	bcf0      	pop	{r4, r5, r6, r7}
    float samp =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801fe26:	f004 bbc3 	b.w	80245b0 <LEAF_interpolate_hermite_x>
 801fe2a:	bf00      	nop

0801fe2c <tOversampler_initToPool>:
{
    tOversampler_initToPool(osr, ratio, extraQuality, &leaf.mempool);
}

void tOversampler_initToPool (tOversampler* const osr, int ratio, int extraQuality, tMempool* const mp)
{
 801fe2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tMempool* m = *mp;
 801fe30:	681e      	ldr	r6, [r3, #0]
{
 801fe32:	4617      	mov	r7, r2
 801fe34:	460d      	mov	r5, r1
 801fe36:	4680      	mov	r8, r0
    _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 801fe38:	4631      	mov	r1, r6
 801fe3a:	201c      	movs	r0, #28
 801fe3c:	f004 fca0 	bl	8024780 <mpool_alloc>
 801fe40:	2f00      	cmp	r7, #0
    os->mempool = m;
    
    uint8_t offset = 0;
    if (extraQuality) offset = 6;
    if (ratio == 2 || ratio == 4  ||
 801fe42:	f1a5 0202 	sub.w	r2, r5, #2
    _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 801fe46:	f8c8 0000 	str.w	r0, [r8]
 801fe4a:	bf18      	it	ne
 801fe4c:	2706      	movne	r7, #6
 801fe4e:	4604      	mov	r4, r0
    if (ratio == 2 || ratio == 4  ||
 801fe50:	2a1e      	cmp	r2, #30
    os->mempool = m;
 801fe52:	6006      	str	r6, [r0, #0]
    if (ratio == 2 || ratio == 4  ||
 801fe54:	d92d      	bls.n	801feb2 <tOversampler_initToPool+0x86>
        ratio == 8 || ratio == 16 ||
        ratio == 32 || ratio == 64) {
 801fe56:	2d40      	cmp	r5, #64	; 0x40
 801fe58:	d129      	bne.n	801feae <tOversampler_initToPool+0x82>
        os->ratio = ratio;
        int idx = (int)(log2f(os->ratio))-1+offset;
 801fe5a:	ee07 5a90 	vmov	s15, r5
        os->ratio = ratio;
 801fe5e:	6065      	str	r5, [r4, #4]
        int idx = (int)(log2f(os->ratio))-1+offset;
 801fe60:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801fe64:	f007 fdb8 	bl	80279d8 <log2f>
 801fe68:	eebd 0ac0 	vcvt.s32.f32	s0, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 801fe6c:	4814      	ldr	r0, [pc, #80]	; (801fec0 <tOversampler_initToPool+0x94>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 801fe6e:	4631      	mov	r1, r6
        int idx = (int)(log2f(os->ratio))-1+offset;
 801fe70:	ee10 3a10 	vmov	r3, s0
 801fe74:	3b01      	subs	r3, #1
 801fe76:	19da      	adds	r2, r3, r7
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 801fe78:	4f12      	ldr	r7, [pc, #72]	; (801fec4 <tOversampler_initToPool+0x98>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 801fe7a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 801fe7e:	edd3 7a00 	vldr	s15, [r3]
 801fe82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fe86:	ee17 0a90 	vmov	r0, s15
 801fe8a:	edc4 7a05 	vstr	s15, [r4, #20]
        os->phaseLength = os->numTaps / os->ratio;
 801fe8e:	fb90 f5f5 	sdiv	r5, r0, r5
 801fe92:	61a5      	str	r5, [r4, #24]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 801fe94:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 801fe96:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 801fe9a:	60a3      	str	r3, [r4, #8]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 801fe9c:	f004 fc70 	bl	8024780 <mpool_alloc>
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 801fea0:	6963      	ldr	r3, [r4, #20]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 801fea2:	60e0      	str	r0, [r4, #12]
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 801fea4:	4631      	mov	r1, r6
 801fea6:	00d8      	lsls	r0, r3, #3
 801fea8:	f004 fc6a 	bl	8024780 <mpool_alloc>
 801feac:	6120      	str	r0, [r4, #16]
    }
}
 801feae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ratio == 2 || ratio == 4  ||
 801feb2:	4b05      	ldr	r3, [pc, #20]	; (801fec8 <tOversampler_initToPool+0x9c>)
 801feb4:	40d3      	lsrs	r3, r2
 801feb6:	07db      	lsls	r3, r3, #31
 801feb8:	d4cf      	bmi.n	801fe5a <tOversampler_initToPool+0x2e>
}
 801feba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801febe:	bf00      	nop
 801fec0:	0804c0fc 	.word	0x0804c0fc
 801fec4:	200003b4 	.word	0x200003b4
 801fec8:	40004045 	.word	0x40004045

0801fecc <tOversampler_free>:

void tOversampler_free (tOversampler* const osr)
{
 801fecc:	b510      	push	{r4, lr}
    _tOversampler* os = *osr;
 801fece:	6804      	ldr	r4, [r0, #0]
    
    mpool_free((char*)os->upState, os->mempool);
 801fed0:	6821      	ldr	r1, [r4, #0]
 801fed2:	68e0      	ldr	r0, [r4, #12]
 801fed4:	f004 fcfc 	bl	80248d0 <mpool_free>
    mpool_free((char*)os->downState, os->mempool);
 801fed8:	6821      	ldr	r1, [r4, #0]
 801feda:	6920      	ldr	r0, [r4, #16]
 801fedc:	f004 fcf8 	bl	80248d0 <mpool_free>
    mpool_free((char*)os, os->mempool);
 801fee0:	6821      	ldr	r1, [r4, #0]
 801fee2:	4620      	mov	r0, r4
}
 801fee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)os, os->mempool);
 801fee8:	f004 bcf2 	b.w	80248d0 <mpool_free>

0801feec <tOversampler_tick>:

float tOversampler_tick(tOversampler* const osr, float input, float* oversample, float (*effectTick)(float))
{
 801feec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _tOversampler* os = *osr;
 801fef0:	f8d0 9000 	ldr.w	r9, [r0]
{
 801fef4:	4680      	mov	r8, r0
 801fef6:	468a      	mov	sl, r1
 801fef8:	4617      	mov	r7, r2
// From CMSIS DSP Library
void tOversampler_upsample(tOversampler* const osr, float input, float* output)
{
    _tOversampler* os = *osr;
    
    float *pState = os->upState;                 /* State pointer */
 801fefa:	f8d9 c00c 	ldr.w	ip, [r9, #12]
    float *pStateCur;
    float *ptr1;                               /* Temporary pointer for state buffer */
    float *ptr2;                               /* Temporary pointer for coefficient buffer */
    float sum0;                                /* Accumulators */
    uint32_t i, tapCnt;                    /* Loop counters */
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 801fefe:	f8d9 5018 	ldr.w	r5, [r9, #24]
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 801ff02:	f8d9 e008 	ldr.w	lr, [r9, #8]
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
 801ff06:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
 801ff0a:	ed03 0a01 	vstr	s0, [r3, #-4]
    
    /* Address modifier index of coefficient buffer */
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
 801ff0e:	f8d9 4004 	ldr.w	r4, [r9, #4]
    
    while (i > 0U)
 801ff12:	b32c      	cbz	r4, 801ff60 <tOversampler_tick+0x74>
 801ff14:	f104 0b01 	add.w	fp, r4, #1
    j = 1U;
 801ff18:	2601      	movs	r6, #1
         Repeat until we've computed numTaps-(4*os->L) coefficients. */
        
        /* Initialize tapCnt with number of samples */
        tapCnt = phaseLen;
        
        while (tapCnt > 0U)
 801ff1a:	eddf 5a38 	vldr	s11, [pc, #224]	; 801fffc <tOversampler_tick+0x110>
        ptr2 = pCoeffs + (os->ratio - j);
 801ff1e:	1ba3      	subs	r3, r4, r6
 801ff20:	ee07 4a90 	vmov	s15, r4
 801ff24:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 801ff28:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
        while (tapCnt > 0U)
 801ff2c:	2d00      	cmp	r5, #0
 801ff2e:	d061      	beq.n	801fff4 <tOversampler_tick+0x108>
            sum0 += *ptr1++ * *ptr2;
            
            /* Upsampling is done by stuffing L-1 zeros between each sample.
             * So instead of multiplying zeros with coefficients,
             * Increment the coefficient pointer by interpolation factor times. */
            ptr2 += os->ratio;
 801ff30:	00a4      	lsls	r4, r4, #2
 801ff32:	462a      	mov	r2, r5
        ptr1 = pState;
 801ff34:	4660      	mov	r0, ip
        sum0 = 0.0f;
 801ff36:	eddf 7a31 	vldr	s15, [pc, #196]	; 801fffc <tOversampler_tick+0x110>
            sum0 += *ptr1++ * *ptr2;
 801ff3a:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
 801ff3e:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 801ff40:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
 801ff44:	4423      	add	r3, r4
            sum0 += *ptr1++ * *ptr2;
 801ff46:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 801ff4a:	d1f6      	bne.n	801ff3a <tOversampler_tick+0x4e>
 801ff4c:	ee67 7a86 	vmul.f32	s15, s15, s12
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
        
        /* Increment the address modifier index of coefficient buffer */
        j++;
 801ff50:	3601      	adds	r6, #1
        *output++ = sum0 * os->ratio;
 801ff52:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 801ff56:	455e      	cmp	r6, fp
 801ff58:	d002      	beq.n	801ff60 <tOversampler_tick+0x74>
 801ff5a:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801ff5e:	e7de      	b.n	801ff1e <tOversampler_tick+0x32>
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 801ff60:	3d01      	subs	r5, #1
    pState = pState + 1;
 801ff62:	f10c 0c04 	add.w	ip, ip, #4
    pStateCur = os->upState;
 801ff66:	f8d9 300c 	ldr.w	r3, [r9, #12]
    while (tapCnt > 0U)
 801ff6a:	d005      	beq.n	801ff78 <tOversampler_tick+0x8c>
    {
        *pStateCur++ = *pState++;
 801ff6c:	f85c 2b04 	ldr.w	r2, [ip], #4
    while (tapCnt > 0U)
 801ff70:	3d01      	subs	r5, #1
        *pStateCur++ = *pState++;
 801ff72:	f843 2b04 	str.w	r2, [r3], #4
    while (tapCnt > 0U)
 801ff76:	d1f9      	bne.n	801ff6c <tOversampler_tick+0x80>
    for (int i = 0; i < os->ratio; ++i) {
 801ff78:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ff7c:	2b00      	cmp	r3, #0
 801ff7e:	dd0b      	ble.n	801ff98 <tOversampler_tick+0xac>
 801ff80:	4655      	mov	r5, sl
 801ff82:	2400      	movs	r4, #0
        oversample[i] = effectTick(oversample[i]);
 801ff84:	ed95 0a00 	vldr	s0, [r5]
    for (int i = 0; i < os->ratio; ++i) {
 801ff88:	3401      	adds	r4, #1
        oversample[i] = effectTick(oversample[i]);
 801ff8a:	47b8      	blx	r7
 801ff8c:	eca5 0a01 	vstmia	r5!, {s0}
    for (int i = 0; i < os->ratio; ++i) {
 801ff90:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ff94:	42a3      	cmp	r3, r4
 801ff96:	dcf5      	bgt.n	801ff84 <tOversampler_tick+0x98>
}

// From CMSIS DSP Library
float tOversampler_downsample(tOversampler *const osr, float* input)
{
    _tOversampler* os = *osr;
 801ff98:	f8d8 4000 	ldr.w	r4, [r8]
    uint32_t i, tapCnt;
    float output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
 801ff9c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    float *pState = os->downState;                 /* State pointer */
 801ffa0:	e9d4 0604 	ldrd	r0, r6, [r4, #16]
    
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
 801ffa4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
    pStateCur = os->downState + (numTaps - 1U);
 801ffa8:	4432      	add	r2, r6
 801ffaa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    
    do
    {
        *pStateCur++ = *input++;
 801ffae:	f85a 1b04 	ldr.w	r1, [sl], #4
        
    } while (--i);
 801ffb2:	3b01      	subs	r3, #1
        *pStateCur++ = *input++;
 801ffb4:	f842 1b04 	str.w	r1, [r2], #4
    } while (--i);
 801ffb8:	d1f9      	bne.n	801ffae <tOversampler_tick+0xc2>
 801ffba:	6861      	ldr	r1, [r4, #4]
 801ffbc:	1e73      	subs	r3, r6, #1
 801ffbe:	6924      	ldr	r4, [r4, #16]
 801ffc0:	461a      	mov	r2, r3
 801ffc2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    
    /* Set accumulator to zero */
    acc0 = 0.0f;
 801ffc6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801fffc <tOversampler_tick+0x110>
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
    
    while (tapCnt > 0U)
 801ffca:	b90e      	cbnz	r6, 801ffd0 <tOversampler_tick+0xe4>
 801ffcc:	e009      	b.n	801ffe2 <tOversampler_tick+0xf6>
 801ffce:	3a01      	subs	r2, #1
        
        /* Fetch 1 state variable */
        x0 = *px0++;
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
 801ffd0:	ecb5 7a01 	vldmia	r5!, {s14}
 801ffd4:	ecf0 7a01 	vldmia	r0!, {s15}
 801ffd8:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
 801ffdc:	2a00      	cmp	r2, #0
 801ffde:	d1f6      	bne.n	801ffce <tOversampler_tick+0xe2>
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 801ffe0:	b133      	cbz	r3, 801fff0 <tOversampler_tick+0x104>
 801ffe2:	4622      	mov	r2, r4
    {
        *pStateCur++ = *pState++;
 801ffe4:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
 801ffe8:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 801ffea:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
 801ffee:	d1f9      	bne.n	801ffe4 <tOversampler_tick+0xf8>
}
 801fff0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (tapCnt > 0U)
 801fff4:	eef0 7a65 	vmov.f32	s15, s11
 801fff8:	e7aa      	b.n	801ff50 <tOversampler_tick+0x64>
 801fffa:	bf00      	nop
 801fffc:	00000000 	.word	0x00000000

08020000 <tOversampler_upsample>:
{
 8020000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tOversampler* os = *osr;
 8020004:	f8d0 c000 	ldr.w	ip, [r0]
    float *pState = os->upState;                 /* State pointer */
 8020008:	f8dc 700c 	ldr.w	r7, [ip, #12]
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 802000c:	f8dc 5018 	ldr.w	r5, [ip, #24]
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 8020010:	f8dc e008 	ldr.w	lr, [ip, #8]
    *pStateCur = input;
 8020014:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8020018:	ed03 0a01 	vstr	s0, [r3, #-4]
    i = os->ratio;
 802001c:	f8dc 4004 	ldr.w	r4, [ip, #4]
    while (i > 0U)
 8020020:	b324      	cbz	r4, 802006c <tOversampler_upsample+0x6c>
 8020022:	f104 0801 	add.w	r8, r4, #1
    j = 1U;
 8020026:	2601      	movs	r6, #1
        while (tapCnt > 0U)
 8020028:	eddf 5a19 	vldr	s11, [pc, #100]	; 8020090 <tOversampler_upsample+0x90>
        ptr2 = pCoeffs + (os->ratio - j);
 802002c:	1ba3      	subs	r3, r4, r6
 802002e:	ee07 4a90 	vmov	s15, r4
 8020032:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8020036:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
        while (tapCnt > 0U)
 802003a:	b32d      	cbz	r5, 8020088 <tOversampler_upsample+0x88>
            ptr2 += os->ratio;
 802003c:	00a4      	lsls	r4, r4, #2
 802003e:	462a      	mov	r2, r5
        ptr1 = pState;
 8020040:	4638      	mov	r0, r7
        sum0 = 0.0f;
 8020042:	eddf 7a13 	vldr	s15, [pc, #76]	; 8020090 <tOversampler_upsample+0x90>
            sum0 += *ptr1++ * *ptr2;
 8020046:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
 802004a:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 802004c:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
 8020050:	4423      	add	r3, r4
            sum0 += *ptr1++ * *ptr2;
 8020052:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 8020056:	d1f6      	bne.n	8020046 <tOversampler_upsample+0x46>
 8020058:	ee67 7a86 	vmul.f32	s15, s15, s12
        j++;
 802005c:	3601      	adds	r6, #1
        *output++ = sum0 * os->ratio;
 802005e:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 8020062:	4546      	cmp	r6, r8
 8020064:	d002      	beq.n	802006c <tOversampler_upsample+0x6c>
 8020066:	f8dc 4004 	ldr.w	r4, [ip, #4]
 802006a:	e7df      	b.n	802002c <tOversampler_upsample+0x2c>
    while (tapCnt > 0U)
 802006c:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
 802006e:	f107 0204 	add.w	r2, r7, #4
    pStateCur = os->upState;
 8020072:	f8dc 100c 	ldr.w	r1, [ip, #12]
    while (tapCnt > 0U)
 8020076:	d005      	beq.n	8020084 <tOversampler_upsample+0x84>
        *pStateCur++ = *pState++;
 8020078:	f852 0b04 	ldr.w	r0, [r2], #4
    while (tapCnt > 0U)
 802007c:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 802007e:	f841 0b04 	str.w	r0, [r1], #4
    while (tapCnt > 0U)
 8020082:	d1f9      	bne.n	8020078 <tOversampler_upsample+0x78>
}
 8020084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (tapCnt > 0U)
 8020088:	eef0 7a65 	vmov.f32	s15, s11
 802008c:	e7e6      	b.n	802005c <tOversampler_upsample+0x5c>
 802008e:	bf00      	nop
 8020090:	00000000 	.word	0x00000000

08020094 <tOversampler_downsample>:
{
 8020094:	b4f0      	push	{r4, r5, r6, r7}
    _tOversampler* os = *osr;
 8020096:	6806      	ldr	r6, [r0, #0]
    pStateCur = os->downState + (numTaps - 1U);
 8020098:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    float *pState = os->downState;                 /* State pointer */
 802009c:	e9d6 0704 	ldrd	r0, r7, [r6, #16]
    i = os->ratio;
 80200a0:	e9d6 3501 	ldrd	r3, r5, [r6, #4]
    pStateCur = os->downState + (numTaps - 1U);
 80200a4:	443a      	add	r2, r7
 80200a6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        *pStateCur++ = *input++;
 80200aa:	f851 4b04 	ldr.w	r4, [r1], #4
    } while (--i);
 80200ae:	3b01      	subs	r3, #1
        *pStateCur++ = *input++;
 80200b0:	f842 4b04 	str.w	r4, [r2], #4
    } while (--i);
 80200b4:	d1f9      	bne.n	80200aa <tOversampler_downsample+0x16>
 80200b6:	1e7b      	subs	r3, r7, #1
 80200b8:	6871      	ldr	r1, [r6, #4]
 80200ba:	6934      	ldr	r4, [r6, #16]
 80200bc:	461a      	mov	r2, r3
 80200be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    acc0 = 0.0f;
 80200c2:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80200f0 <tOversampler_downsample+0x5c>
    while (tapCnt > 0U)
 80200c6:	b90f      	cbnz	r7, 80200cc <tOversampler_downsample+0x38>
 80200c8:	e009      	b.n	80200de <tOversampler_downsample+0x4a>
 80200ca:	3a01      	subs	r2, #1
        acc0 += x0 * c0;
 80200cc:	ecb5 7a01 	vldmia	r5!, {s14}
 80200d0:	ecf0 7a01 	vldmia	r0!, {s15}
 80200d4:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
 80200d8:	2a00      	cmp	r2, #0
 80200da:	d1f6      	bne.n	80200ca <tOversampler_downsample+0x36>
    while (tapCnt > 0U)
 80200dc:	b133      	cbz	r3, 80200ec <tOversampler_downsample+0x58>
 80200de:	4622      	mov	r2, r4
        *pStateCur++ = *pState++;
 80200e0:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
 80200e4:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 80200e6:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
 80200ea:	d1f9      	bne.n	80200e0 <tOversampler_downsample+0x4c>
        /* Decrement loop counter */
        tapCnt--;
    }
    
    return output;
}
 80200ec:	bcf0      	pop	{r4, r5, r6, r7}
 80200ee:	4770      	bx	lr
	...

080200f8 <tLockhartWavefolder_initToPool>:
{
	tLockhartWavefolder_initToPool   (wf,  &leaf.mempool);
}

void tLockhartWavefolder_initToPool (tLockhartWavefolder* const wf, tMempool* const mp)
{
 80200f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tMempool* m = *mp;
 80200fc:	680c      	ldr	r4, [r1, #0]
{
 80200fe:	4605      	mov	r5, r0
    _tLockhartWavefolder* w = *wf = (_tLockhartWavefolder*) mpool_alloc(sizeof(_tLockhartWavefolder), m);
 8020100:	20e0      	movs	r0, #224	; 0xe0
    w->Is = 10e-16;
    
    w->a = 2.0*w->RL/w->R;
    w->b = (w->R+2.0*w->RL)/(w->VT*w->R);
    w->d = (w->RL*w->Is)/w->VT;
    w->half_a = 0.5 * w->a;
 8020102:	f04f 0800 	mov.w	r8, #0
    _tLockhartWavefolder* w = *wf = (_tLockhartWavefolder*) mpool_alloc(sizeof(_tLockhartWavefolder), m);
 8020106:	4621      	mov	r1, r4
    w->half_a = 0.5 * w->a;
 8020108:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8020204 <tLockhartWavefolder_initToPool+0x10c>
    _tLockhartWavefolder* w = *wf = (_tLockhartWavefolder*) mpool_alloc(sizeof(_tLockhartWavefolder), m);
 802010c:	f004 fb38 	bl	8024780 <mpool_alloc>
    w->a = 2.0*w->RL/w->R;
 8020110:	2200      	movs	r2, #0
 8020112:	4b3b      	ldr	r3, [pc, #236]	; (8020200 <tLockhartWavefolder_initToPool+0x108>)
    _tLockhartWavefolder* w = *wf = (_tLockhartWavefolder*) mpool_alloc(sizeof(_tLockhartWavefolder), m);
 8020114:	6028      	str	r0, [r5, #0]
    w->mempool = m;
 8020116:	6004      	str	r4, [r0, #0]
    w->a = 2.0*w->RL/w->R;
 8020118:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    w->RL = 7.5e3;
 802011c:	a528      	add	r5, pc, #160	; (adr r5, 80201c0 <tLockhartWavefolder_initToPool+0xc8>)
 802011e:	e9d5 4500 	ldrd	r4, r5, [r5]
    w->R = 15e3;
 8020122:	a329      	add	r3, pc, #164	; (adr r3, 80201c8 <tLockhartWavefolder_initToPool+0xd0>)
 8020124:	e9d3 2300 	ldrd	r2, r3, [r3]
    w->RL = 7.5e3;
 8020128:	e9c0 4508 	strd	r4, r5, [r0, #32]
    w->R = 15e3;
 802012c:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    w->VT = 26e-3;
 8020130:	a527      	add	r5, pc, #156	; (adr r5, 80201d0 <tLockhartWavefolder_initToPool+0xd8>)
 8020132:	e9d5 4500 	ldrd	r4, r5, [r5]
    w->Is = 10e-16;
 8020136:	a328      	add	r3, pc, #160	; (adr r3, 80201d8 <tLockhartWavefolder_initToPool+0xe0>)
 8020138:	e9d3 2300 	ldrd	r2, r3, [r3]
    w->VT = 26e-3;
 802013c:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
    w->Is = 10e-16;
 8020140:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    w->b = (w->R+2.0*w->RL)/(w->VT*w->R);
 8020144:	a526      	add	r5, pc, #152	; (adr r5, 80201e0 <tLockhartWavefolder_initToPool+0xe8>)
 8020146:	e9d5 4500 	ldrd	r4, r5, [r5]
    w->d = (w->RL*w->Is)/w->VT;
 802014a:	a327      	add	r3, pc, #156	; (adr r3, 80201e8 <tLockhartWavefolder_initToPool+0xf0>)
 802014c:	e9d3 2300 	ldrd	r2, r3, [r3]
    w->b = (w->R+2.0*w->RL)/(w->VT*w->R);
 8020150:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    w->d = (w->RL*w->Is)/w->VT;
 8020154:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
    w->longthing = (0.5*w->VT/w->b);
    
    
    // Antialiasing error threshold
    w->AAthresh = 10e-10; //10
 8020158:	a525      	add	r5, pc, #148	; (adr r5, 80201f0 <tLockhartWavefolder_initToPool+0xf8>)
 802015a:	e9d5 4500 	ldrd	r4, r5, [r5]
    w->Ln1 = 0.0;
 802015e:	2200      	movs	r2, #0
 8020160:	2300      	movs	r3, #0
    w->longthing = (0.5*w->VT/w->b);
 8020162:	a725      	add	r7, pc, #148	; (adr r7, 80201f8 <tLockhartWavefolder_initToPool+0x100>)
 8020164:	e9d7 6700 	ldrd	r6, r7, [r7]
    w->half_a = 0.5 * w->a;
 8020168:	e9c0 8918 	strd	r8, r9, [r0, #96]	; 0x60
    w->longthing = (0.5*w->VT/w->b);
 802016c:	e9c0 671a 	strd	r6, r7, [r0, #104]	; 0x68
    w->Ln1 = 0.0;
 8020170:	e9c0 2302 	strd	r2, r3, [r0, #8]
    w->Fn1 = 0.0;
 8020174:	e9c0 2304 	strd	r2, r3, [r0, #16]
    w->xn1 = 0.0;
 8020178:	e9c0 2306 	strd	r2, r3, [r0, #24]

	w->LambertThresh = 10e-10; //12  //was 8


    w->w = 0.0f;
 802017c:	e9c0 231e 	strd	r2, r3, [r0, #120]	; 0x78
    w->expw = 0.0f;
 8020180:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
    w->p = 0.0f;
 8020184:	e9c0 2322 	strd	r2, r3, [r0, #136]	; 0x88
    w->r = 0.0f;
 8020188:	e9c0 2324 	strd	r2, r3, [r0, #144]	; 0x90
    w->s= 0.0f;
 802018c:	e9c0 2326 	strd	r2, r3, [r0, #152]	; 0x98
    w->myerr = 0.0f;
 8020190:	e9c0 2328 	strd	r2, r3, [r0, #160]	; 0xa0
    w->l = 0.0f;
 8020194:	e9c0 232a 	strd	r2, r3, [r0, #168]	; 0xa8
    w->u = 0.0f;
 8020198:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    w->Ln = 0.0f;
 802019c:	e9c0 232e 	strd	r2, r3, [r0, #184]	; 0xb8
	w->Fn = 0.0f;
 80201a0:	e9c0 2330 	strd	r2, r3, [r0, #192]	; 0xc0
    w->tempsDenom = 0.0f;
 80201a4:	e9c0 2332 	strd	r2, r3, [r0, #200]	; 0xc8
    w->tempErrDenom = 0.0f;
 80201a8:	e9c0 2334 	strd	r2, r3, [r0, #208]	; 0xd0
    w->tempOutDenom = 0.0f;
 80201ac:	e9c0 2336 	strd	r2, r3, [r0, #216]	; 0xd8
    w->AAthresh = 10e-10; //10
 80201b0:	e9c0 4516 	strd	r4, r5, [r0, #88]	; 0x58
	w->LambertThresh = 10e-10; //12  //was 8
 80201b4:	e9c0 451c 	strd	r4, r5, [r0, #112]	; 0x70


}
 80201b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80201bc:	f3af 8000 	nop.w
 80201c0:	00000000 	.word	0x00000000
 80201c4:	40bd4c00 	.word	0x40bd4c00
 80201c8:	00000000 	.word	0x00000000
 80201cc:	40cd4c00 	.word	0x40cd4c00
 80201d0:	76c8b439 	.word	0x76c8b439
 80201d4:	3f9a9fbe 	.word	0x3f9a9fbe
 80201d8:	9ee75616 	.word	0x9ee75616
 80201dc:	3cd203af 	.word	0x3cd203af
 80201e0:	b13b13b1 	.word	0xb13b13b1
 80201e4:	40533b13 	.word	0x40533b13
 80201e8:	46f1bc84 	.word	0x46f1bc84
 80201ec:	3df3d2ab 	.word	0x3df3d2ab
 80201f0:	e826d695 	.word	0xe826d695
 80201f4:	3e112e0b 	.word	0x3e112e0b
 80201f8:	f23033a4 	.word	0xf23033a4
 80201fc:	3f2626b2 	.word	0x3f2626b2
 8020200:	3ff00000 	.word	0x3ff00000
 8020204:	3fe00000 	.word	0x3fe00000

08020208 <tLockhartWavefolder_free>:

void tLockhartWavefolder_free (tLockhartWavefolder* const wf)
{
    _tLockhartWavefolder* w = *wf;
 8020208:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)w, w->mempool);
 802020a:	6801      	ldr	r1, [r0, #0]
 802020c:	f004 bb60 	b.w	80248d0 <mpool_free>

08020210 <tLockhartWavefolder_tick>:
    _tLockhartWavefolder* w = *wf;

    float out = 0.0f;
    
    // Compute Antiderivative
    w->l = (in > 0.0) - (in < 0.0);
 8020210:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
{
 8020214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    w->l = (in > 0.0) - (in < 0.0);
 8020216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    _tLockhartWavefolder* w = *wf;
 802021a:	6806      	ldr	r6, [r0, #0]
{
 802021c:	4607      	mov	r7, r0
        if ((fabs(mwf->myerr))<mwf->LambertThresh) {
 802021e:	f640 34b8 	movw	r4, #3000	; 0xbb8
{
 8020222:	ed2d 8b0e 	vpush	{d8-d14}
    w->l = (in > 0.0) - (in < 0.0);
 8020226:	bfc8      	it	gt
 8020228:	2301      	movgt	r3, #1
    w->u = w->d*exp(w->l*w->b*in);
 802022a:	eeb7 eac0 	vcvt.f64.f32	d14, s0
    w->l = (in > 0.0) - (in < 0.0);
 802022e:	bfd8      	it	le
 8020230:	2300      	movle	r3, #0
 8020232:	bf4c      	ite	mi
 8020234:	2201      	movmi	r2, #1
 8020236:	2200      	movpl	r2, #0
    	mwf->r = (mwf->w+1.0)*mwf->expw;
 8020238:	eeb7 bb00 	vmov.f64	d11, #112	; 0x3f800000  1.0
        mwf->s = (mwf->w+2.0)/mwf->tempsDenom;
 802023c:	eeb0 9b00 	vmov.f64	d9, #0	; 0x40000000  2.0
    w->l = (in > 0.0) - (in < 0.0);
 8020240:	1a9b      	subs	r3, r3, r2
    w->u = w->d*exp(w->l*w->b*in);
 8020242:	ed96 0b12 	vldr	d0, [r6, #72]	; 0x48
    w->l = (in > 0.0) - (in < 0.0);
 8020246:	ee07 3a90 	vmov	s15, r3
    w->u = w->d*exp(w->l*w->b*in);
 802024a:	ee2e 0b00 	vmul.f64	d0, d14, d0
    w->l = (in > 0.0) - (in < 0.0);
 802024e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8020252:	ed86 7b2a 	vstr	d7, [r6, #168]	; 0xa8
    w->u = w->d*exp(w->l*w->b*in);
 8020256:	ee20 0b07 	vmul.f64	d0, d0, d7
 802025a:	f007 fdf5 	bl	8027e48 <exp>
 802025e:	ed96 cb14 	vldr	d12, [r6, #80]	; 0x50
    	w->u = 10e-5;
    	LEAF_error();
    }
    */

    w->Ln = tLockhartWavefolderLambert(wf,w->u,w->Ln1);
 8020262:	ed96 8b02 	vldr	d8, [r6, #8]
    w->u = w->d*exp(w->l*w->b*in);
 8020266:	ee20 cb0c 	vmul.f64	d12, d0, d12
 802026a:	ed86 cb2c 	vstr	d12, [r6, #176]	; 0xb0
	_tLockhartWavefolder* mwf = *wf;
 802026e:	683d      	ldr	r5, [r7, #0]
 8020270:	eeb1 cb4c 	vneg.f64	d12, d12
        if ((fabs(mwf->myerr))<mwf->LambertThresh) {
 8020274:	ed95 db1c 	vldr	d13, [r5, #112]	; 0x70
	mwf->w = ln;
 8020278:	ed85 8b1e 	vstr	d8, [r5, #120]	; 0x78
 802027c:	e006      	b.n	802028c <tLockhartWavefolder_tick+0x7c>
        mwf->w = mwf->w - mwf->myerr;
 802027e:	ee38 8b45 	vsub.f64	d8, d8, d5
    for(int i=0; i<3000; i+=1) { //1000
 8020282:	3c01      	subs	r4, #1
        mwf->w = mwf->w - mwf->myerr;
 8020284:	ed85 8b1e 	vstr	d8, [r5, #120]	; 0x78
    for(int i=0; i<3000; i+=1) { //1000
 8020288:	f000 80c9 	beq.w	802041e <tLockhartWavefolder_tick+0x20e>
    	mwf->expw = exp(mwf->w);
 802028c:	eeb0 0b48 	vmov.f64	d0, d8
 8020290:	f007 fdda 	bl	8027e48 <exp>
    	mwf->r = (mwf->w+1.0)*mwf->expw;
 8020294:	ee38 7b0b 	vadd.f64	d7, d8, d11
        mwf->s = (mwf->w+2.0)/mwf->tempsDenom;
 8020298:	ee38 4b09 	vadd.f64	d4, d8, d9
    	mwf->p = mwf->w*mwf->expw - x;
 802029c:	eeb0 6b4c 	vmov.f64	d6, d12
    	mwf->tempsDenom = (2.0*(mwf->w+1.0));
 80202a0:	ee37 1b07 	vadd.f64	d1, d7, d7
    	mwf->r = (mwf->w+1.0)*mwf->expw;
 80202a4:	ee20 7b07 	vmul.f64	d7, d0, d7
        mwf->s = (mwf->w+2.0)/mwf->tempsDenom;
 80202a8:	ee84 2b01 	vdiv.f64	d2, d4, d1
    	mwf->p = mwf->w*mwf->expw - x;
 80202ac:	eea0 6b08 	vfma.f64	d6, d0, d8
        mwf->tempErrDenom = (mwf->r-(mwf->p*mwf->s));
 80202b0:	eeb0 3b47 	vmov.f64	d3, d7
 80202b4:	eea6 3b42 	vfms.f64	d3, d6, d2
        mwf->myerr = (mwf->p/mwf->tempErrDenom);
 80202b8:	ee86 5b03 	vdiv.f64	d5, d6, d3
        if ((fabs(mwf->myerr))<mwf->LambertThresh) {
 80202bc:	eeb0 abc5 	vabs.f64	d10, d5
 80202c0:	eeb4 abcd 	vcmpe.f64	d10, d13
 80202c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202c8:	d5d9      	bpl.n	802027e <tLockhartWavefolder_tick+0x6e>
 80202ca:	ed85 0b20 	vstr	d0, [r5, #128]	; 0x80
 80202ce:	ed85 6b22 	vstr	d6, [r5, #136]	; 0x88
 80202d2:	ed85 7b24 	vstr	d7, [r5, #144]	; 0x90
 80202d6:	ed85 1b32 	vstr	d1, [r5, #200]	; 0xc8
 80202da:	ed85 2b26 	vstr	d2, [r5, #152]	; 0x98
 80202de:	ed85 3b34 	vstr	d3, [r5, #208]	; 0xd0
 80202e2:	ed85 5b28 	vstr	d5, [r5, #160]	; 0xa0
	{
		w->Ln = 10e-5;
		LEAF_error();
	}
*/
    w->Fn = (w->longthing*(w->Ln*(w->Ln + 2.0))) - (w->half_a*in*in);
 80202e6:	ee2e 5b0e 	vmul.f64	d5, d14, d14
 80202ea:	ee24 4b08 	vmul.f64	d4, d4, d8
 80202ee:	ed96 7b18 	vldr	d7, [r6, #96]	; 0x60
		LEAF_error();
	}
	*/
    // Check for ill-conditioning

    if (fabs(in-w->xn1)<w->AAthresh)
 80202f2:	ed96 db06 	vldr	d13, [r6, #24]
    w->Fn = (w->longthing*(w->Ln*(w->Ln + 2.0))) - (w->half_a*in*in);
 80202f6:	ed96 6b1a 	vldr	d6, [r6, #104]	; 0x68
 80202fa:	ee27 5b45 	vnmul.f64	d5, d7, d5
    if (fabs(in-w->xn1)<w->AAthresh)
 80202fe:	ee3e 3b4d 	vsub.f64	d3, d14, d13
 8020302:	ed96 7b16 	vldr	d7, [r6, #88]	; 0x58
    w->Fn = (w->longthing*(w->Ln*(w->Ln + 2.0))) - (w->half_a*in*in);
 8020306:	eea6 5b04 	vfma.f64	d5, d6, d4
    if (fabs(in-w->xn1)<w->AAthresh)
 802030a:	eeb0 6bc3 	vabs.f64	d6, d3
    w->Ln = tLockhartWavefolderLambert(wf,w->u,w->Ln1);
 802030e:	ed86 8b2e 	vstr	d8, [r6, #184]	; 0xb8
    if (fabs(in-w->xn1)<w->AAthresh)
 8020312:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8020316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    w->Fn = (w->longthing*(w->Ln*(w->Ln + 2.0))) - (w->half_a*in*in);
 802031a:	ed86 5b30 	vstr	d5, [r6, #192]	; 0xc0
    if (fabs(in-w->xn1)<w->AAthresh)
 802031e:	d412      	bmi.n	8020346 <tLockhartWavefolder_tick+0x136>
    	{
    		w->tempOutDenom = 10e-5;
    		LEAF_error();
    	}
    	*/
        out = ((w->Fn-w->Fn1)/w->tempOutDenom);
 8020320:	ed96 7b04 	vldr	d7, [r6, #16]
    	w->tempOutDenom = (in-w->xn1);
 8020324:	ed86 3b36 	vstr	d3, [r6, #216]	; 0xd8
        out = ((w->Fn-w->Fn1)/w->tempOutDenom);
 8020328:	ee35 7b47 	vsub.f64	d7, d5, d7
 802032c:	ee87 0b03 	vdiv.f64	d0, d7, d3
 8020330:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		*/

    }

    // Update States
    w->Ln1 = w->Ln;
 8020334:	ed86 8b02 	vstr	d8, [r6, #8]
    w->Fn1 = w->Fn;
 8020338:	ed86 5b04 	vstr	d5, [r6, #16]
    w->xn1 = (double)in;
 802033c:	ed86 eb06 	vstr	d14, [r6, #24]
    
    return out;
}
 8020340:	ecbd 8b0e 	vpop	{d8-d14}
 8020344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    	double xn = 0.5*(in+w->xn1);
 8020346:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
        if ((fabs(mwf->myerr))<mwf->LambertThresh) {
 802034a:	f640 34b8 	movw	r4, #3000	; 0xbb8
    	double xn = 0.5*(in+w->xn1);
 802034e:	ee3e db0d 	vadd.f64	d13, d14, d13
    	mwf->r = (mwf->w+1.0)*mwf->expw;
 8020352:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
        mwf->s = (mwf->w+2.0)/mwf->tempsDenom;
 8020356:	eeb0 ab00 	vmov.f64	d10, #0	; 0x40000000  2.0
    	double xn = 0.5*(in+w->xn1);
 802035a:	ee2d db07 	vmul.f64	d13, d13, d7
    	w->u = w->d*exp(w->l*w->b*xn);
 802035e:	ed96 0b2a 	vldr	d0, [r6, #168]	; 0xa8
 8020362:	ed96 7b12 	vldr	d7, [r6, #72]	; 0x48
 8020366:	ee20 0b07 	vmul.f64	d0, d0, d7
 802036a:	ee20 0b0d 	vmul.f64	d0, d0, d13
 802036e:	f007 fd6b 	bl	8027e48 <exp>
 8020372:	ed96 bb14 	vldr	d11, [r6, #80]	; 0x50
    	w->Ln = tLockhartWavefolderLambert(wf,w->u,w->Ln1);
 8020376:	ed96 8b02 	vldr	d8, [r6, #8]
    	w->u = w->d*exp(w->l*w->b*xn);
 802037a:	ee20 bb0b 	vmul.f64	d11, d0, d11
 802037e:	ed86 bb2c 	vstr	d11, [r6, #176]	; 0xb0
	_tLockhartWavefolder* mwf = *wf;
 8020382:	683d      	ldr	r5, [r7, #0]
 8020384:	eeb1 bb4b 	vneg.f64	d11, d11
        if ((fabs(mwf->myerr))<mwf->LambertThresh) {
 8020388:	ed95 cb1c 	vldr	d12, [r5, #112]	; 0x70
	mwf->w = ln;
 802038c:	ed85 8b1e 	vstr	d8, [r5, #120]	; 0x78
 8020390:	e005      	b.n	802039e <tLockhartWavefolder_tick+0x18e>
        mwf->w = mwf->w - mwf->myerr;
 8020392:	ee38 8b45 	vsub.f64	d8, d8, d5
    for(int i=0; i<3000; i+=1) { //1000
 8020396:	3c01      	subs	r4, #1
        mwf->w = mwf->w - mwf->myerr;
 8020398:	ed85 8b1e 	vstr	d8, [r5, #120]	; 0x78
    for(int i=0; i<3000; i+=1) { //1000
 802039c:	d01e      	beq.n	80203dc <tLockhartWavefolder_tick+0x1cc>
    	mwf->expw = exp(mwf->w);
 802039e:	eeb0 0b48 	vmov.f64	d0, d8
 80203a2:	f007 fd51 	bl	8027e48 <exp>
    	mwf->r = (mwf->w+1.0)*mwf->expw;
 80203a6:	ee38 7b09 	vadd.f64	d7, d8, d9
        mwf->s = (mwf->w+2.0)/mwf->tempsDenom;
 80203aa:	ee38 5b0a 	vadd.f64	d5, d8, d10
    	mwf->p = mwf->w*mwf->expw - x;
 80203ae:	eeb0 6b4b 	vmov.f64	d6, d11
    	mwf->tempsDenom = (2.0*(mwf->w+1.0));
 80203b2:	ee37 2b07 	vadd.f64	d2, d7, d7
    	mwf->r = (mwf->w+1.0)*mwf->expw;
 80203b6:	ee20 7b07 	vmul.f64	d7, d0, d7
        mwf->s = (mwf->w+2.0)/mwf->tempsDenom;
 80203ba:	ee85 3b02 	vdiv.f64	d3, d5, d2
    	mwf->p = mwf->w*mwf->expw - x;
 80203be:	eea0 6b08 	vfma.f64	d6, d0, d8
        mwf->tempErrDenom = (mwf->r-(mwf->p*mwf->s));
 80203c2:	eeb0 4b47 	vmov.f64	d4, d7
 80203c6:	eea6 4b43 	vfms.f64	d4, d6, d3
        mwf->myerr = (mwf->p/mwf->tempErrDenom);
 80203ca:	ee86 5b04 	vdiv.f64	d5, d6, d4
        if ((fabs(mwf->myerr))<mwf->LambertThresh) {
 80203ce:	eeb0 1bc5 	vabs.f64	d1, d5
 80203d2:	eeb4 1bcc 	vcmpe.f64	d1, d12
 80203d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80203da:	d5da      	bpl.n	8020392 <tLockhartWavefolder_tick+0x182>
 80203dc:	ed85 0b20 	vstr	d0, [r5, #128]	; 0x80
 80203e0:	ed85 6b22 	vstr	d6, [r5, #136]	; 0x88
 80203e4:	ed85 7b24 	vstr	d7, [r5, #144]	; 0x90
 80203e8:	ed85 2b32 	vstr	d2, [r5, #200]	; 0xc8
 80203ec:	ed85 3b26 	vstr	d3, [r5, #152]	; 0x98
 80203f0:	ed85 4b34 	vstr	d4, [r5, #208]	; 0xd0
 80203f4:	ed85 5b28 	vstr	d5, [r5, #160]	; 0xa0
        out = (float)((w->l*w->VT*w->Ln) - (w->a*xn));
 80203f8:	ed96 5b10 	vldr	d5, [r6, #64]	; 0x40
 80203fc:	ed96 7b2a 	vldr	d7, [r6, #168]	; 0xa8
 8020400:	ed96 6b0c 	vldr	d6, [r6, #48]	; 0x30
 8020404:	ee25 db4d 	vnmul.f64	d13, d5, d13
 8020408:	ee27 7b06 	vmul.f64	d7, d7, d6
    	w->Ln = tLockhartWavefolderLambert(wf,w->u,w->Ln1);
 802040c:	ed86 8b2e 	vstr	d8, [r6, #184]	; 0xb8
 8020410:	ed96 5b30 	vldr	d5, [r6, #192]	; 0xc0
        out = (float)((w->l*w->VT*w->Ln) - (w->a*xn));
 8020414:	eea7 db08 	vfma.f64	d13, d7, d8
 8020418:	eeb7 0bcd 	vcvt.f32.f64	s0, d13
 802041c:	e78a      	b.n	8020334 <tLockhartWavefolder_tick+0x124>
 802041e:	ed85 0b20 	vstr	d0, [r5, #128]	; 0x80
 8020422:	ed85 6b22 	vstr	d6, [r5, #136]	; 0x88
 8020426:	ed85 7b24 	vstr	d7, [r5, #144]	; 0x90
 802042a:	ed85 1b32 	vstr	d1, [r5, #200]	; 0xc8
 802042e:	ed85 2b26 	vstr	d2, [r5, #152]	; 0x98
 8020432:	ed85 3b34 	vstr	d3, [r5, #208]	; 0xd0
 8020436:	ed85 5b28 	vstr	d5, [r5, #160]	; 0xa0
 802043a:	ee38 4b09 	vadd.f64	d4, d8, d9
 802043e:	e752      	b.n	80202e6 <tLockhartWavefolder_tick+0xd6>

08020440 <tCrusher_initToPool>:
{
    tCrusher_initToPool(cr, &leaf.mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
 8020440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 8020442:	680e      	ldr	r6, [r1, #0]
{
 8020444:	460d      	mov	r5, r1
 8020446:	4607      	mov	r7, r0
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8020448:	2020      	movs	r0, #32
 802044a:	4631      	mov	r1, r6
 802044c:	f004 f998 	bl	8024780 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = SCALAR;
    c->rnd = 0.25f;
 8020450:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8020454:	4604      	mov	r4, r0
    c->div = SCALAR;
 8020456:	4a10      	ldr	r2, [pc, #64]	; (8020498 <tCrusher_initToPool+0x58>)
    c->op = 4;
 8020458:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 802045a:	6038      	str	r0, [r7, #0]
    c->div = SCALAR;
 802045c:	60e2      	str	r2, [r4, #12]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 802045e:	2010      	movs	r0, #16
    c->op = 4;
 8020460:	6161      	str	r1, [r4, #20]
    c->rnd = 0.25f;
 8020462:	6123      	str	r3, [r4, #16]
    c->srr = 0.25f;
 8020464:	6063      	str	r3, [r4, #4]
    c->mempool = m;
 8020466:	6026      	str	r6, [r4, #0]
    _tMempool* m = *mp;
 8020468:	682d      	ldr	r5, [r5, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 802046a:	4629      	mov	r1, r5
 802046c:	f004 f988 	bl	8024780 <mpool_alloc>
    s->invRatio = 1.0f;
 8020470:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
 8020474:	2200      	movs	r2, #0
    s->count = 0;
 8020476:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8020478:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 802047a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 802049c <tCrusher_initToPool+0x5c>
    s->mempool = m;
 802047e:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
 8020480:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
 8020482:	6082      	str	r2, [r0, #8]
    s->count = 0;
 8020484:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 8020486:	eddf 7a06 	vldr	s15, [pc, #24]	; 80204a0 <tCrusher_initToPool+0x60>
 802048a:	edd4 6a03 	vldr	s13, [r4, #12]
 802048e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020492:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8020496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020498:	459c4000 	.word	0x459c4000
 802049c:	3912ccf6 	.word	0x3912ccf6
 80204a0:	3e99999a 	.word	0x3e99999a

080204a4 <tCrusher_free>:

void tCrusher_free (tCrusher* const cr)
{
 80204a4:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
 80204a6:	6804      	ldr	r4, [r0, #0]
    _tSampleReducer* s = *sr;
 80204a8:	69e0      	ldr	r0, [r4, #28]
    mpool_free((char*)s, s->mempool);
 80204aa:	6801      	ldr	r1, [r0, #0]
 80204ac:	f004 fa10 	bl	80248d0 <mpool_free>
    
    tSampleReducer_free(&c->sReducer);
    mpool_free((char*)c, c->mempool);
 80204b0:	6821      	ldr	r1, [r4, #0]
 80204b2:	4620      	mov	r0, r4
}
 80204b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)c, c->mempool);
 80204b8:	f004 ba0a 	b.w	80248d0 <mpool_free>

080204bc <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    float sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 80204bc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8020538 <tCrusher_tick+0x7c>
 80204c0:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 80204c4:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
 80204c6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
 80204ca:	6804      	ldr	r4, [r0, #0]
    
    sample /= c->div;
 80204cc:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
 80204d0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 80204d4:	6960      	ldr	r0, [r4, #20]
 80204d6:	05c0      	lsls	r0, r0, #23
 80204d8:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80204dc:	f003 ff4a 	bl	8024374 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 80204e0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80204e4:	eef0 0a40 	vmov.f32	s1, s0
 80204e8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80204ec:	f003 ff48 	bl	8024380 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 80204f0:	edd4 0a04 	vldr	s1, [r4, #16]
 80204f4:	f003 ff2c 	bl	8024350 <LEAF_round>
    _tSampleReducer* s = *sr;
 80204f8:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
 80204fa:	68da      	ldr	r2, [r3, #12]
 80204fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8020500:	ee07 2a10 	vmov	s14, r2
 8020504:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8020508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802050c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020510:	dd08      	ble.n	8020524 <tCrusher_tick+0x68>
        s->hold = input;
 8020512:	2201      	movs	r2, #1
 8020514:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
 8020518:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
 802051a:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 802051e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020522:	bd10      	pop	{r4, pc}
 8020524:	3201      	adds	r2, #1
 8020526:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
 802052a:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
 802052c:	edd4 7a06 	vldr	s15, [r4, #24]
}
 8020530:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020534:	bd10      	pop	{r4, pc}
 8020536:	bf00      	nop
 8020538:	459c4000 	.word	0x459c4000

0802053c <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, float op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
 802053c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
 8020540:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
 8020542:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020546:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 802054a:	ed83 0a05 	vstr	s0, [r3, #20]
}
 802054e:	4770      	bx	lr

08020550 <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, float val)
{
 8020550:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
 8020552:	eef0 0a40 	vmov.f32	s1, s0
 8020556:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8020588 <tCrusher_setQuality+0x38>
 802055a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    _tCrusher* c = *cr;
 802055e:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
 8020560:	f003 ff0e 	bl	8024380 <LEAF_clip>
    
    c->div = 0.01f + val * SCALAR;
 8020564:	ed9f 7a09 	vldr	s14, [pc, #36]	; 802058c <tCrusher_setQuality+0x3c>
 8020568:	eddf 7a09 	vldr	s15, [pc, #36]	; 8020590 <tCrusher_setQuality+0x40>
    
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 802056c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8020594 <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
 8020570:	eee0 7a07 	vfma.f32	s15, s0, s14
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 8020574:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8020598 <tCrusher_setQuality+0x48>
 8020578:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
 802057c:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 8020580:	ed84 7a06 	vstr	s14, [r4, #24]
}
 8020584:	bd10      	pop	{r4, pc}
 8020586:	bf00      	nop
 8020588:	00000000 	.word	0x00000000
 802058c:	459c4000 	.word	0x459c4000
 8020590:	3c23d70a 	.word	0x3c23d70a
 8020594:	3912ccf6 	.word	0x3912ccf6
 8020598:	3e99999a 	.word	0x3e99999a

0802059c <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, float rnd)
{
    _tCrusher* c = *cr;
    c->rnd = fabsf(rnd);
 802059c:	eeb0 0ac0 	vabs.f32	s0, s0
    _tCrusher* c = *cr;
 80205a0:	6803      	ldr	r3, [r0, #0]
    c->rnd = fabsf(rnd);
 80205a2:	ed83 0a04 	vstr	s0, [r3, #16]
}
 80205a6:	4770      	bx	lr

080205a8 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 80205a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, float ratio)
{
    _tCrusher* c = *cr;
 80205ac:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
 80205ae:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 80205b2:	eeb4 0a67 	vcmp.f32	s0, s15
 80205b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205ba:	d809      	bhi.n	80205d0 <tCrusher_setSamplingRatio+0x28>
 80205bc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80205c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205c4:	db04      	blt.n	80205d0 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
 80205c6:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
 80205ca:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
 80205cc:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);

}
 80205d0:	4770      	bx	lr
 80205d2:	bf00      	nop

080205d4 <tFeedbackLeveler_init>:
}

/* Feedback Leveler */

void tFeedbackLeveler_init (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode)
{
 80205d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf.mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode, tMempool* const mp)
{
    _tMempool* m = *mp;
 80205d8:	4d12      	ldr	r5, [pc, #72]	; (8020624 <tFeedbackLeveler_init+0x50>)
{
 80205da:	4680      	mov	r8, r0
 80205dc:	460f      	mov	r7, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80205de:	2018      	movs	r0, #24
    _tMempool* m = *mp;
 80205e0:	f855 6f18 	ldr.w	r6, [r5, #24]!
{
 80205e4:	ed2d 8b04 	vpush	{d8-d9}
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80205e8:	4631      	mov	r1, r6
{
 80205ea:	eef0 8a40 	vmov.f32	s17, s0
 80205ee:	eeb0 9a60 	vmov.f32	s18, s1
 80205f2:	eeb0 8a41 	vmov.f32	s16, s2
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80205f6:	f004 f8c3 	bl	8024780 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
 80205fa:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80205fc:	4604      	mov	r4, r0
 80205fe:	f8c8 0000 	str.w	r0, [r8]
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 8020602:	eeb0 0a49 	vmov.f32	s0, s18
    p->mempool = m;
 8020606:	6006      	str	r6, [r0, #0]
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 8020608:	4629      	mov	r1, r5
    p->targetLevel=targetLevel;
 802060a:	edc4 8a01 	vstr	s17, [r4, #4]
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 802060e:	3014      	adds	r0, #20
    p->curr=0.0f;
 8020610:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 8020612:	f7fe fc93 	bl	801ef3c <tPowerFollower_initToPool>
    p->mode=mode;
 8020616:	60e7      	str	r7, [r4, #12]
    p->strength=strength;
 8020618:	ed84 8a02 	vstr	s16, [r4, #8]
}
 802061c:	ecbd 8b04 	vpop	{d8-d9}
 8020620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020624:	200194a0 	.word	0x200194a0

08020628 <tFeedbackLeveler_initToPool>:
{
 8020628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tMempool* m = *mp;
 802062c:	6815      	ldr	r5, [r2, #0]
{
 802062e:	4680      	mov	r8, r0
 8020630:	460f      	mov	r7, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8020632:	2018      	movs	r0, #24
 8020634:	4629      	mov	r1, r5
{
 8020636:	4616      	mov	r6, r2
 8020638:	ed2d 8b04 	vpush	{d8-d9}
 802063c:	eef0 8a40 	vmov.f32	s17, s0
 8020640:	eeb0 9a60 	vmov.f32	s18, s1
 8020644:	eeb0 8a41 	vmov.f32	s16, s2
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8020648:	f004 f89a 	bl	8024780 <mpool_alloc>
    p->curr=0.0f;
 802064c:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 802064e:	4604      	mov	r4, r0
 8020650:	f8c8 0000 	str.w	r0, [r8]
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 8020654:	eeb0 0a49 	vmov.f32	s0, s18
    p->mempool = m;
 8020658:	6005      	str	r5, [r0, #0]
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 802065a:	4631      	mov	r1, r6
    p->targetLevel=targetLevel;
 802065c:	edc4 8a01 	vstr	s17, [r4, #4]
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 8020660:	3014      	adds	r0, #20
    p->curr=0.0f;
 8020662:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 8020664:	f7fe fc6a 	bl	801ef3c <tPowerFollower_initToPool>
    p->mode=mode;
 8020668:	60e7      	str	r7, [r4, #12]
    p->strength=strength;
 802066a:	ed84 8a02 	vstr	s16, [r4, #8]
}
 802066e:	ecbd 8b04 	vpop	{d8-d9}
 8020672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020676:	bf00      	nop

08020678 <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
 8020678:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
 802067a:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
 802067c:	f104 0014 	add.w	r0, r4, #20
 8020680:	f7fe fc76 	bl	801ef70 <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
 8020684:	6821      	ldr	r1, [r4, #0]
 8020686:	4620      	mov	r0, r4
}
 8020688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 802068c:	f004 b920 	b.w	80248d0 <mpool_free>

08020690 <tFeedbackLeveler_setMode>:
    tPowerFollower_setFactor(&p->pwrFlw,factor);
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
 8020690:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
 8020692:	60d9      	str	r1, [r3, #12]
}
 8020694:	4770      	bx	lr
 8020696:	bf00      	nop

08020698 <tFeedbackLeveler_tick>:

float   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, float input)
{
 8020698:	b510      	push	{r4, lr}
 802069a:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
 802069e:	6804      	ldr	r4, [r0, #0]
{
 80206a0:	eeb0 8a40 	vmov.f32	s16, s0
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 80206a4:	f104 0014 	add.w	r0, r4, #20
 80206a8:	f7fe fc66 	bl	801ef78 <tPowerFollower_tick>
 80206ac:	edd4 7a01 	vldr	s15, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 80206b0:	68e3      	ldr	r3, [r4, #12]
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 80206b2:	ee70 7a67 	vsub.f32	s15, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 80206b6:	b943      	cbnz	r3, 80206ca <tFeedbackLeveler_tick+0x32>
 80206b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80206bc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80206e4 <tFeedbackLeveler_tick+0x4c>
 80206c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80206c4:	bf48      	it	mi
 80206c6:	eef0 7a47 	vmovmi.f32	s15, s14
    p->curr=input*(1.0f-p->strength*levdiff);
 80206ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80206ce:	ed94 7a02 	vldr	s14, [r4, #8]
 80206d2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80206d6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80206da:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
 80206de:	ecbd 8b02 	vpop	{d8}
 80206e2:	bd10      	pop	{r4, pc}
 80206e4:	00000000 	.word	0x00000000

080206e8 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, float TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
 80206e8:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
 80206ea:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80206ee:	4770      	bx	lr

080206f0 <tTalkbox_lpcDurbin>:
    }

}

void tTalkbox_lpcDurbin(float *r, int p, float *k, float *g)
{
 80206f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i, j;
    float a[ORD_MAX], at[ORD_MAX], e=r[0];

    for(i=0; i<=p; i++)
 80206f4:	f1b1 0900 	subs.w	r9, r1, #0
{
 80206f8:	4615      	mov	r5, r2
 80206fa:	ed2d 8b04 	vpush	{d8-d9}
 80206fe:	b0c7      	sub	sp, #284	; 0x11c
    float a[ORD_MAX], at[ORD_MAX], e=r[0];
 8020700:	edd0 8a00 	vldr	s17, [r0]
{
 8020704:	9301      	str	r3, [sp, #4]
    for(i=0; i<=p; i++)
 8020706:	db7e      	blt.n	8020806 <tTalkbox_lpcDurbin+0x116>
    {
    	a[i] = 0.0f; //probably don't need to clear at[] or k[]
 8020708:	f109 0201 	add.w	r2, r9, #1
 802070c:	4607      	mov	r7, r0
 802070e:	2100      	movs	r1, #0
 8020710:	a802      	add	r0, sp, #8
 8020712:	0092      	lsls	r2, r2, #2
 8020714:	f006 ff11 	bl	802753a <memset>
    }
	k[0] = 0.0f;
 8020718:	2300      	movs	r3, #0
    at[0] = 0.0f;
    for(i=1; i<=p; i++)
 802071a:	f1b9 0f00 	cmp.w	r9, #0
	k[0] = 0.0f;
 802071e:	602b      	str	r3, [r5, #0]
    at[0] = 0.0f;
 8020720:	9324      	str	r3, [sp, #144]	; 0x90
    for(i=1; i<=p; i++)
 8020722:	dd50      	ble.n	80207c6 <tTalkbox_lpcDurbin+0xd6>
 8020724:	1d3e      	adds	r6, r7, #4
 8020726:	f06f 0a07 	mvn.w	sl, #7
 802072a:	3504      	adds	r5, #4
 802072c:	f10d 0808 	add.w	r8, sp, #8
 8020730:	ebaa 0a07 	sub.w	sl, sl, r7
 8020734:	4634      	mov	r4, r6
 8020736:	2701      	movs	r7, #1
        for(j=1; j<i; j++)
        {
            at[j] = a[j];
            k[i] -= a[j] * r[i-j];
        }
        if(fabs(e) < 1.0e-20f) { e = 0.0f;  break; }
 8020738:	eddf 9a38 	vldr	s19, [pc, #224]	; 802081c <tTalkbox_lpcDurbin+0x12c>
        k[i] = -r[i];
 802073c:	ed94 8a00 	vldr	s16, [r4]
        for(j=1; j<i; j++)
 8020740:	2f01      	cmp	r7, #1
 8020742:	f104 0b04 	add.w	fp, r4, #4
 8020746:	eeb0 9ae8 	vabs.f32	s18, s17
        k[i] = -r[i];
 802074a:	eeb1 8a48 	vneg.f32	s16, s16
 802074e:	eca5 8a01 	vstmia	r5!, {s16}
        for(j=1; j<i; j++)
 8020752:	d04c      	beq.n	80207ee <tTalkbox_lpcDurbin+0xfe>
 8020754:	ab25      	add	r3, sp, #148	; 0x94
 8020756:	eb0a 020b 	add.w	r2, sl, fp
 802075a:	a903      	add	r1, sp, #12
 802075c:	4618      	mov	r0, r3
 802075e:	f006 fee1 	bl	8027524 <memcpy>
 8020762:	a903      	add	r1, sp, #12
 8020764:	4603      	mov	r3, r0
 8020766:	460a      	mov	r2, r1
            k[i] -= a[j] * r[i-j];
 8020768:	ed74 7a01 	vldmdb	r4!, {s15}
            at[j] = a[j];
 802076c:	ecb2 7a01 	vldmia	r2!, {s14}
        for(j=1; j<i; j++)
 8020770:	42a6      	cmp	r6, r4
            k[i] -= a[j] * r[i-j];
 8020772:	eea7 8a67 	vfms.f32	s16, s14, s15
 8020776:	ed05 8a01 	vstr	s16, [r5, #-4]
        for(j=1; j<i; j++)
 802077a:	d1f5      	bne.n	8020768 <tTalkbox_lpcDurbin+0x78>
        if(fabs(e) < 1.0e-20f) { e = 0.0f;  break; }
 802077c:	eeb4 9ae9 	vcmpe.f32	s18, s19
 8020780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020784:	d429      	bmi.n	80207da <tTalkbox_lpcDurbin+0xea>
        k[i] /= e;
 8020786:	eec8 6a28 	vdiv.f32	s13, s16, s17
 802078a:	aa24      	add	r2, sp, #144	; 0x90
 802078c:	4618      	mov	r0, r3
 802078e:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8020792:	ed45 6a01 	vstr	s13, [r5, #-4]

        a[i] = k[i];
 8020796:	edc8 6a01 	vstr	s13, [r8, #4]
        for(j=1; j<i; j++) a[j] = at[j] + k[i] * at[i-j];
 802079a:	ed32 7a01 	vldmdb	r2!, {s14}
 802079e:	ecf0 7a01 	vldmia	r0!, {s15}
 80207a2:	4293      	cmp	r3, r2
 80207a4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80207a8:	ece1 7a01 	vstmia	r1!, {s15}
 80207ac:	d1f5      	bne.n	802079a <tTalkbox_lpcDurbin+0xaa>

        e *= 1.0f - k[i] * k[i];
 80207ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    for(i=1; i<=p; i++)
 80207b2:	3701      	adds	r7, #1
 80207b4:	f108 0804 	add.w	r8, r8, #4
 80207b8:	465c      	mov	r4, fp
 80207ba:	45b9      	cmp	r9, r7
        e *= 1.0f - k[i] * k[i];
 80207bc:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80207c0:	ee68 8aa7 	vmul.f32	s17, s17, s15
    for(i=1; i<=p; i++)
 80207c4:	daba      	bge.n	802073c <tTalkbox_lpcDurbin+0x4c>
    }

    if(e < 1.0e-20f) e = 0.0f;
 80207c6:	eddf 7a15 	vldr	s15, [pc, #84]	; 802081c <tTalkbox_lpcDurbin+0x12c>
 80207ca:	eef4 8ae7 	vcmpe.f32	s17, s15
 80207ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207d2:	d402      	bmi.n	80207da <tTalkbox_lpcDurbin+0xea>
 80207d4:	eef1 7ae8 	vsqrt.f32	s15, s17
 80207d8:	e001      	b.n	80207de <tTalkbox_lpcDurbin+0xee>
        for(j=1; j<i; j++)
 80207da:	eddf 7a11 	vldr	s15, [pc, #68]	; 8020820 <tTalkbox_lpcDurbin+0x130>
    *g = sqrtf(e);
 80207de:	9b01      	ldr	r3, [sp, #4]
 80207e0:	edc3 7a00 	vstr	s15, [r3]
}
 80207e4:	b047      	add	sp, #284	; 0x11c
 80207e6:	ecbd 8b04 	vpop	{d8-d9}
 80207ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(fabs(e) < 1.0e-20f) { e = 0.0f;  break; }
 80207ee:	eeb4 9ae9 	vcmpe.f32	s18, s19
 80207f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207f6:	d4f0      	bmi.n	80207da <tTalkbox_lpcDurbin+0xea>
        k[i] /= e;
 80207f8:	eec8 6a28 	vdiv.f32	s13, s16, s17
 80207fc:	ed45 6a01 	vstr	s13, [r5, #-4]
        a[i] = k[i];
 8020800:	edc8 6a01 	vstr	s13, [r8, #4]
 8020804:	e7d3      	b.n	80207ae <tTalkbox_lpcDurbin+0xbe>
    if(e < 1.0e-20f) e = 0.0f;
 8020806:	eddf 7a05 	vldr	s15, [pc, #20]	; 802081c <tTalkbox_lpcDurbin+0x12c>
	k[0] = 0.0f;
 802080a:	2300      	movs	r3, #0
    if(e < 1.0e-20f) e = 0.0f;
 802080c:	eef4 8ae7 	vcmpe.f32	s17, s15
	k[0] = 0.0f;
 8020810:	6013      	str	r3, [r2, #0]
    if(e < 1.0e-20f) e = 0.0f;
 8020812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020816:	d5dd      	bpl.n	80207d4 <tTalkbox_lpcDurbin+0xe4>
 8020818:	e7df      	b.n	80207da <tTalkbox_lpcDurbin+0xea>
 802081a:	bf00      	nop
 802081c:	1e3ce508 	.word	0x1e3ce508
 8020820:	00000000 	.word	0x00000000

08020824 <tTalkboxFloat_free>:
    tTalkboxFloat_update(voc);
    tTalkboxFloat_suspend(voc);
}

void tTalkboxFloat_free (tTalkboxFloat* const voc)
{
 8020824:	b510      	push	{r4, lr}
    _tTalkboxFloat* v = *voc;
 8020826:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)v->buf1, v->mempool);
 8020828:	6821      	ldr	r1, [r4, #0]
 802082a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802082c:	f004 f850 	bl	80248d0 <mpool_free>
    mpool_free((char*)v->buf0, v->mempool);
 8020830:	6821      	ldr	r1, [r4, #0]
 8020832:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020834:	f004 f84c 	bl	80248d0 <mpool_free>
    mpool_free((char*)v->window, v->mempool);
 8020838:	6821      	ldr	r1, [r4, #0]
 802083a:	6a20      	ldr	r0, [r4, #32]
 802083c:	f004 f848 	bl	80248d0 <mpool_free>
    mpool_free((char*)v->car1, v->mempool);
 8020840:	6821      	ldr	r1, [r4, #0]
 8020842:	69e0      	ldr	r0, [r4, #28]
 8020844:	f004 f844 	bl	80248d0 <mpool_free>
    mpool_free((char*)v->car0, v->mempool);
 8020848:	6821      	ldr	r1, [r4, #0]
 802084a:	69a0      	ldr	r0, [r4, #24]
 802084c:	f004 f840 	bl	80248d0 <mpool_free>

    mpool_free((char*)v->dl, v->mempool);
 8020850:	6821      	ldr	r1, [r4, #0]
 8020852:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8020856:	f004 f83b 	bl	80248d0 <mpool_free>
    mpool_free((char*)v->Rt, v->mempool);
 802085a:	6821      	ldr	r1, [r4, #0]
 802085c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8020860:	f004 f836 	bl	80248d0 <mpool_free>
    mpool_free((char*)v->k, v->mempool);
 8020864:	6821      	ldr	r1, [r4, #0]
 8020866:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8020868:	f004 f832 	bl	80248d0 <mpool_free>
    mpool_free((char*)v, v->mempool);
 802086c:	6821      	ldr	r1, [r4, #0]
 802086e:	4620      	mov	r0, r4
}
 8020870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)v, v->mempool);
 8020874:	f004 b82c 	b.w	80248d0 <mpool_free>

08020878 <tTalkboxFloat_update>:

void tTalkboxFloat_update(tTalkboxFloat* const voc) ///update internal parameters...
{
 8020878:	b538      	push	{r3, r4, r5, lr}
    _tTalkboxFloat* v = *voc;
 802087a:	6804      	ldr	r4, [r0, #0]

    int32_t n = (int32_t)(0.01633f * fs); //this sets the window time to 16ms if the buffer is large enough. Buffer needs to be at least 784 samples at 48000
    if(n > v->bufsize) n = v->bufsize;

    //O = (VstInt32)(0.0005f * fs);
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * fs);
 802087c:	eddf 7a33 	vldr	s15, [pc, #204]	; 802094c <tTalkboxFloat_update+0xd4>
    float fs = leaf.sampleRate;
 8020880:	4b33      	ldr	r3, [pc, #204]	; (8020950 <tTalkboxFloat_update+0xd8>)
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * fs);
 8020882:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8020954 <tTalkboxFloat_update+0xdc>
 8020886:	eddf 5a34 	vldr	s11, [pc, #208]	; 8020958 <tTalkboxFloat_update+0xe0>
 802088a:	ed9f 6a34 	vldr	s12, [pc, #208]	; 802095c <tTalkboxFloat_update+0xe4>
{
 802088e:	ed2d 8b04 	vpush	{d8-d9}
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * fs);
 8020892:	edd4 6a04 	vldr	s13, [r4, #16]
 8020896:	6961      	ldr	r1, [r4, #20]
 8020898:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802089c:	edd3 6a00 	vldr	s13, [r3]
    int32_t n = (int32_t)(0.01633f * fs); //this sets the window time to 16ms if the buffer is large enough. Buffer needs to be at least 784 samples at 48000
 80208a0:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8020960 <tTalkboxFloat_update+0xe8>
 80208a4:	fec6 6ae5 	vminnm.f32	s13, s13, s11
 80208a8:	fec6 6a86 	vmaxnm.f32	s13, s13, s12
 80208ac:	ee66 7aa7 	vmul.f32	s15, s13, s15

    if(n != v->N) //recalc hanning window
 80208b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    int32_t n = (int32_t)(0.01633f * fs); //this sets the window time to 16ms if the buffer is large enough. Buffer needs to be at least 784 samples at 48000
 80208b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * fs);
 80208b6:	ee27 7a26 	vmul.f32	s14, s14, s13
    int32_t n = (int32_t)(0.01633f * fs); //this sets the window time to 16ms if the buffer is large enough. Buffer needs to be at least 784 samples at 48000
 80208ba:	ee17 3a90 	vmov	r3, s15
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * fs);
 80208be:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80208c2:	428b      	cmp	r3, r1
 80208c4:	bfa8      	it	ge
 80208c6:	460b      	movge	r3, r1
 80208c8:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
    if(n != v->N) //recalc hanning window
 80208cc:	429a      	cmp	r2, r3
 80208ce:	d027      	beq.n	8020920 <tTalkboxFloat_update+0xa8>
    {
        v->N = n;
        float dp = TWO_PI / v->N;
 80208d0:	ee07 3a90 	vmov	s15, r3
 80208d4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8020964 <tTalkboxFloat_update+0xec>
        float p = 0.0f;
        for(n=0; n<v->N; n++)
 80208d8:	2b00      	cmp	r3, #0
        v->N = n;
 80208da:	6463      	str	r3, [r4, #68]	; 0x44
        float dp = TWO_PI / v->N;
 80208dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80208e0:	eec7 8a27 	vdiv.f32	s17, s14, s15
        for(n=0; n<v->N; n++)
 80208e4:	dd1c      	ble.n	8020920 <tTalkboxFloat_update+0xa8>
        float p = 0.0f;
 80208e6:	ed9f 8a20 	vldr	s16, [pc, #128]	; 8020968 <tTalkboxFloat_update+0xf0>
        for(n=0; n<v->N; n++)
 80208ea:	2500      	movs	r5, #0
 80208ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
        {
            v->window[n] = 0.5f - 0.5f * cosf(p);
 80208f0:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 80208f4:	eeb0 9a40 	vmov.f32	s18, s0
 80208f8:	e001      	b.n	80208fe <tTalkboxFloat_update+0x86>
 80208fa:	f006 ff3f 	bl	802777c <cosf>
 80208fe:	ee39 0a40 	vsub.f32	s0, s18, s0
 8020902:	6a23      	ldr	r3, [r4, #32]
            p += dp;
 8020904:	ee38 8a28 	vadd.f32	s16, s16, s17
            v->window[n] = 0.5f - 0.5f * cosf(p);
 8020908:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        for(n=0; n<v->N; n++)
 802090c:	3501      	adds	r5, #1
            v->window[n] = 0.5f - 0.5f * cosf(p);
 802090e:	ee60 7a29 	vmul.f32	s15, s0, s19
 8020912:	eeb0 0a48 	vmov.f32	s0, s16
 8020916:	edc3 7a00 	vstr	s15, [r3]
        for(n=0; n<v->N; n++)
 802091a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 802091c:	42ab      	cmp	r3, r5
 802091e:	dcec      	bgt.n	80208fa <tTalkboxFloat_update+0x82>
        }
    }
    v->wet = 0.5f * v->param[0] * v->param[0];
 8020920:	ed94 7a01 	vldr	s14, [r4, #4]
 8020924:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    v->dry = 2.0f * v->param[1] * v->param[1];
 8020928:	edd4 7a02 	vldr	s15, [r4, #8]
    v->wet = 0.5f * v->param[0] * v->param[0];
 802092c:	ee27 7a07 	vmul.f32	s14, s14, s14
    v->dry = 2.0f * v->param[1] * v->param[1];
 8020930:	ee67 7aa7 	vmul.f32	s15, s15, s15
    v->wet = 0.5f * v->param[0] * v->param[0];
 8020934:	ee27 7a26 	vmul.f32	s14, s14, s13
    v->dry = 2.0f * v->param[1] * v->param[1];
 8020938:	ee77 7aa7 	vadd.f32	s15, s15, s15
    v->wet = 0.5f * v->param[0] * v->param[0];
 802093c:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
    v->dry = 2.0f * v->param[1] * v->param[1];
 8020940:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
 8020944:	ecbd 8b04 	vpop	{d8-d9}
 8020948:	bd38      	pop	{r3, r4, r5, pc}
 802094a:	bf00      	nop
 802094c:	39d1b717 	.word	0x39d1b717
 8020950:	200194a0 	.word	0x200194a0
 8020954:	38d1b717 	.word	0x38d1b717
 8020958:	47bb8000 	.word	0x47bb8000
 802095c:	45fa0000 	.word	0x45fa0000
 8020960:	3c85c67e 	.word	0x3c85c67e
 8020964:	40c90fdb 	.word	0x40c90fdb
 8020968:	00000000 	.word	0x00000000

0802096c <tTalkboxFloat_initToPool>:
{
 802096c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tMempool* m = *mp;
 8020970:	6817      	ldr	r7, [r2, #0]
{
 8020972:	4680      	mov	r8, r0
 8020974:	4689      	mov	r9, r1
    _tTalkboxFloat* v = *voc = (_tTalkboxFloat*) mpool_alloc(sizeof(_tTalkboxFloat), m);
 8020976:	2090      	movs	r0, #144	; 0x90
 8020978:	4639      	mov	r1, r7
    v->param[1] = 0.0f;  //dry
 802097a:	2400      	movs	r4, #0
    _tTalkboxFloat* v = *voc = (_tTalkboxFloat*) mpool_alloc(sizeof(_tTalkboxFloat), m);
 802097c:	f003 ff00 	bl	8024780 <mpool_alloc>
    v->warpOn = 0;
 8020980:	2500      	movs	r5, #0
    _tTalkboxFloat* v = *voc = (_tTalkboxFloat*) mpool_alloc(sizeof(_tTalkboxFloat), m);
 8020982:	4606      	mov	r6, r0
    v->param[0] = 0.5f;  //wet
 8020984:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    v->param[3] = 1.0f;  //quality
 8020988:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    _tTalkboxFloat* v = *voc = (_tTalkboxFloat*) mpool_alloc(sizeof(_tTalkboxFloat), m);
 802098c:	f8c8 0000 	str.w	r0, [r8]
    v->car0 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020990:	4639      	mov	r1, r7
    v->mempool = m;
 8020992:	6007      	str	r7, [r0, #0]
    v->bufsize = bufsize;
 8020994:	f8c0 9014 	str.w	r9, [r0, #20]
    v->car0 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020998:	ea4f 0089 	mov.w	r0, r9, lsl #2
    v->param[0] = 0.5f;  //wet
 802099c:	6072      	str	r2, [r6, #4]
    v->param[3] = 1.0f;  //quality
 802099e:	6133      	str	r3, [r6, #16]
    v->param[1] = 0.0f;  //dry
 80209a0:	60b4      	str	r4, [r6, #8]
    v->param[2] = 0; // Swap
 80209a2:	60f4      	str	r4, [r6, #12]
    v->warpFactor = 0.0f;
 80209a4:	6334      	str	r4, [r6, #48]	; 0x30
    v->G = 0.0f;
 80209a6:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
    v->freeze = 0;
 80209aa:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
    v->car0 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209ae:	f003 fee7 	bl	8024780 <mpool_alloc>
    v->car1 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209b2:	6973      	ldr	r3, [r6, #20]
    v->car0 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209b4:	61b0      	str	r0, [r6, #24]
    v->car1 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209b6:	4639      	mov	r1, r7
 80209b8:	0098      	lsls	r0, r3, #2
 80209ba:	f003 fee1 	bl	8024780 <mpool_alloc>
    v->window = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209be:	6973      	ldr	r3, [r6, #20]
    v->car1 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209c0:	61f0      	str	r0, [r6, #28]
    v->window = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209c2:	4639      	mov	r1, r7
 80209c4:	0098      	lsls	r0, r3, #2
 80209c6:	f003 fedb 	bl	8024780 <mpool_alloc>
    v->buf0 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209ca:	6973      	ldr	r3, [r6, #20]
    v->window = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209cc:	6230      	str	r0, [r6, #32]
    v->buf0 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209ce:	4639      	mov	r1, r7
 80209d0:	0098      	lsls	r0, r3, #2
 80209d2:	f003 fed5 	bl	8024780 <mpool_alloc>
    v->buf1 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209d6:	6973      	ldr	r3, [r6, #20]
    v->buf0 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209d8:	6270      	str	r0, [r6, #36]	; 0x24
    v->buf1 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209da:	4639      	mov	r1, r7
 80209dc:	0098      	lsls	r0, r3, #2
 80209de:	f003 fecf 	bl	8024780 <mpool_alloc>
    v->dl = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209e2:	6973      	ldr	r3, [r6, #20]
    v->buf1 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209e4:	62b0      	str	r0, [r6, #40]	; 0x28
    v->dl = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209e6:	4639      	mov	r1, r7
 80209e8:	0098      	lsls	r0, r3, #2
 80209ea:	f003 fec9 	bl	8024780 <mpool_alloc>
    v->Rt = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209ee:	6973      	ldr	r3, [r6, #20]
    v->dl = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209f0:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
    v->Rt = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209f4:	4639      	mov	r1, r7
 80209f6:	0098      	lsls	r0, r3, #2
 80209f8:	f003 fec2 	bl	8024780 <mpool_alloc>
    v->k = (float*) mpool_alloc(sizeof(float) * ORD_MAX, m);
 80209fc:	4639      	mov	r1, r7
    v->Rt = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 80209fe:	f8c6 008c 	str.w	r0, [r6, #140]	; 0x8c
    v->k = (float*) mpool_alloc(sizeof(float) * ORD_MAX, m);
 8020a02:	2088      	movs	r0, #136	; 0x88
 8020a04:	f003 febc 	bl	8024780 <mpool_alloc>
 8020a08:	62f0      	str	r0, [r6, #44]	; 0x2c
    tTalkboxFloat_update(voc);
 8020a0a:	4640      	mov	r0, r8
 8020a0c:	f7ff ff34 	bl	8020878 <tTalkboxFloat_update>

void tTalkboxFloat_suspend(tTalkboxFloat* const voc) ///clear any buffers...
{
    _tTalkboxFloat* v = *voc;
 8020a10:	f8d8 3000 	ldr.w	r3, [r8]
    v->FX = 0;

    v->u0 = v->u1 = v->u2 = v->u3 = v->u4 = 0.0f;
    v->d0 = v->d1 = v->d2 = v->d3 = v->d4 = 0.0f;

    for (int32_t i = 0; i < v->bufsize; i++)
 8020a14:	695a      	ldr	r2, [r3, #20]
    v->pos = v->K = 0;
 8020a16:	641d      	str	r5, [r3, #64]	; 0x40
    for (int32_t i = 0; i < v->bufsize; i++)
 8020a18:	42aa      	cmp	r2, r5
    v->pos = v->K = 0;
 8020a1a:	64dd      	str	r5, [r3, #76]	; 0x4c
    v->emphasis = 0.0f;
 8020a1c:	63dc      	str	r4, [r3, #60]	; 0x3c
    v->FX = 0;
 8020a1e:	659c      	str	r4, [r3, #88]	; 0x58
    v->u0 = v->u1 = v->u2 = v->u3 = v->u4 = 0.0f;
 8020a20:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
 8020a24:	67dc      	str	r4, [r3, #124]	; 0x7c
 8020a26:	679c      	str	r4, [r3, #120]	; 0x78
 8020a28:	675c      	str	r4, [r3, #116]	; 0x74
 8020a2a:	671c      	str	r4, [r3, #112]	; 0x70
    v->d0 = v->d1 = v->d2 = v->d3 = v->d4 = 0.0f;
 8020a2c:	66dc      	str	r4, [r3, #108]	; 0x6c
 8020a2e:	669c      	str	r4, [r3, #104]	; 0x68
 8020a30:	665c      	str	r4, [r3, #100]	; 0x64
 8020a32:	661c      	str	r4, [r3, #96]	; 0x60
 8020a34:	65dc      	str	r4, [r3, #92]	; 0x5c
    for (int32_t i = 0; i < v->bufsize; i++)
 8020a36:	dd12      	ble.n	8020a5e <tTalkboxFloat_initToPool+0xf2>
 8020a38:	4629      	mov	r1, r5
    {
        v->buf0[i] = 0;
 8020a3a:	4622      	mov	r2, r4
 8020a3c:	0088      	lsls	r0, r1, #2
 8020a3e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    for (int32_t i = 0; i < v->bufsize; i++)
 8020a40:	3101      	adds	r1, #1
        v->buf0[i] = 0;
 8020a42:	4404      	add	r4, r0
 8020a44:	6022      	str	r2, [r4, #0]
        v->buf1[i] = 0;
 8020a46:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8020a48:	4404      	add	r4, r0
 8020a4a:	6022      	str	r2, [r4, #0]
        v->car0[i] = 0;
 8020a4c:	699c      	ldr	r4, [r3, #24]
 8020a4e:	4404      	add	r4, r0
 8020a50:	6022      	str	r2, [r4, #0]
        v->car1[i] = 0;
 8020a52:	69dc      	ldr	r4, [r3, #28]
 8020a54:	4420      	add	r0, r4
 8020a56:	6002      	str	r2, [r0, #0]
    for (int32_t i = 0; i < v->bufsize; i++)
 8020a58:	6958      	ldr	r0, [r3, #20]
 8020a5a:	4281      	cmp	r1, r0
 8020a5c:	dbee      	blt.n	8020a3c <tTalkboxFloat_initToPool+0xd0>
}
 8020a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020a62:	bf00      	nop

08020a64 <tTalkboxFloat_warpedAutocorrelate>:

// warped autocorrelation adapted from ten.enegatum@liam's post on music-dsp 2004-04-07 09:37:51
//find the order-P autocorrelation array, R, for the sequence x of length L and warping of lambda
//wAutocorrelate(&pfSrc[stIndex],siglen,R,P,0);
void tTalkboxFloat_warpedAutocorrelate(float * x, float* dl, float* Rt, unsigned int L, float * R, unsigned int P, float lambda)
{
 8020a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    float r1,r2,r1t;
    R[0]=0;
 8020a68:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8020b3c <tTalkboxFloat_warpedAutocorrelate+0xd8>
{
 8020a6c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8020a70:	9d08      	ldr	r5, [sp, #32]
    R[0]=0;
 8020a72:	ed8e 7a00 	vstr	s14, [lr]
    Rt[0]=0;
 8020a76:	ed82 7a00 	vstr	s14, [r2]
    r1=0;
    r2=0;
    r1t=0;
    for(uint32_t m=0; m<L;m++)
 8020a7a:	b1f3      	cbz	r3, 8020aba <tTalkboxFloat_warpedAutocorrelate+0x56>
 8020a7c:	4604      	mov	r4, r0
 8020a7e:	460e      	mov	r6, r1
 8020a80:	eb00 0783 	add.w	r7, r0, r3, lsl #2
    r2=0;
 8020a84:	eef0 7a47 	vmov.f32	s15, s14
    r1=0;
 8020a88:	eeb0 6a47 	vmov.f32	s12, s14
 8020a8c:	e001      	b.n	8020a92 <tTalkboxFloat_warpedAutocorrelate+0x2e>
 8020a8e:	ed92 7a00 	vldr	s14, [r2]
    {
                    Rt[0] += (x[m]) * (x[m]);
 8020a92:	edd4 6a00 	vldr	s13, [r4]
 8020a96:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8020a9a:	ed82 7a00 	vstr	s14, [r2]

                    dl[m]= r1 - lambda * (x[m]-r2);
 8020a9e:	ecb4 7a01 	vldmia	r4!, {s14}
 8020aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
    for(uint32_t m=0; m<L;m++)
 8020aa6:	42bc      	cmp	r4, r7
                    dl[m]= r1 - lambda * (x[m]-r2);
 8020aa8:	eea7 6a80 	vfma.f32	s12, s15, s0
 8020aac:	eef0 7a46 	vmov.f32	s15, s12
 8020ab0:	eca6 6a01 	vstmia	r6!, {s12}
                    r1 = x[m];
 8020ab4:	ed14 6a01 	vldr	s12, [r4, #-4]
    for(uint32_t m=0; m<L;m++)
 8020ab8:	d1e9      	bne.n	8020a8e <tTalkboxFloat_warpedAutocorrelate+0x2a>
                    r2 = dl[m];
    }
    for(uint32_t i=1; i<=P; i++)
 8020aba:	b3d5      	cbz	r5, 8020b32 <tTalkboxFloat_warpedAutocorrelate+0xce>
 8020abc:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8020ac0:	4694      	mov	ip, r2
 8020ac2:	1d15      	adds	r5, r2, #4
 8020ac4:	eb01 0783 	add.w	r7, r1, r3, lsl #2
 8020ac8:	f108 0804 	add.w	r8, r8, #4
    {
            Rt[i]=0;
 8020acc:	ed9f 5a1b 	vldr	s10, [pc, #108]	; 8020b3c <tTalkboxFloat_warpedAutocorrelate+0xd8>
 8020ad0:	eb02 0908 	add.w	r9, r2, r8
 8020ad4:	eca5 5a01 	vstmia	r5!, {s10}
            r1=0;
            r2=0;
            for(unsigned int m=0; m<L;m++)
 8020ad8:	b303      	cbz	r3, 8020b1c <tTalkboxFloat_warpedAutocorrelate+0xb8>
 8020ada:	4606      	mov	r6, r0
 8020adc:	460c      	mov	r4, r1
 8020ade:	eeb0 7a45 	vmov.f32	s14, s10
            r2=0;
 8020ae2:	eef0 7a45 	vmov.f32	s15, s10
            r1=0;
 8020ae6:	eef0 6a45 	vmov.f32	s13, s10
 8020aea:	e001      	b.n	8020af0 <tTalkboxFloat_warpedAutocorrelate+0x8c>
 8020aec:	ed15 7a01 	vldr	s14, [r5, #-4]
            {
                    Rt[i] +=  (dl[m]) * (x[m]);
 8020af0:	edd4 5a00 	vldr	s11, [r4]
 8020af4:	ecb6 6a01 	vldmia	r6!, {s12}
 8020af8:	eea5 7a86 	vfma.f32	s14, s11, s12
 8020afc:	ed05 7a01 	vstr	s14, [r5, #-4]

                    r1t = dl[m];
 8020b00:	ecb4 7a01 	vldmia	r4!, {s14}
                    dl[m]= r1 - lambda * (r1t-r2);
 8020b04:	ee77 7ac7 	vsub.f32	s15, s15, s14
            for(unsigned int m=0; m<L;m++)
 8020b08:	42a7      	cmp	r7, r4
                    dl[m]= r1 - lambda * (r1t-r2);
 8020b0a:	eee7 6a80 	vfma.f32	s13, s15, s0
 8020b0e:	eef0 7a66 	vmov.f32	s15, s13
                    r1 = r1t;
 8020b12:	eef0 6a47 	vmov.f32	s13, s14
                    dl[m]= r1 - lambda * (r1t-r2);
 8020b16:	ed44 7a01 	vstr	s15, [r4, #-4]
            for(unsigned int m=0; m<L;m++)
 8020b1a:	d1e7      	bne.n	8020aec <tTalkboxFloat_warpedAutocorrelate+0x88>
    for(uint32_t i=1; i<=P; i++)
 8020b1c:	45a9      	cmp	r9, r5
 8020b1e:	d1d9      	bne.n	8020ad4 <tTalkboxFloat_warpedAutocorrelate+0x70>
 8020b20:	4442      	add	r2, r8
                    r2 = dl[m];
            }
    }
    for(uint32_t i=0; i<=P; i++)
    {
            R[i]=Rt[i];
 8020b22:	f85c 3b04 	ldr.w	r3, [ip], #4
    for(uint32_t i=0; i<=P; i++)
 8020b26:	4562      	cmp	r2, ip
            R[i]=Rt[i];
 8020b28:	f84e 3b04 	str.w	r3, [lr], #4
    for(uint32_t i=0; i<=P; i++)
 8020b2c:	d1f9      	bne.n	8020b22 <tTalkboxFloat_warpedAutocorrelate+0xbe>
    }

}
 8020b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            R[i]=Rt[i];
 8020b32:	6813      	ldr	r3, [r2, #0]
 8020b34:	f8ce 3000 	str.w	r3, [lr]
}
 8020b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020b3c:	00000000 	.word	0x00000000

08020b40 <tTalkboxFloat_lpc>:
    return o;
}


void tTalkboxFloat_lpc(float *buf, float *car, float* dl, float* Rt, int32_t n, int32_t o, float warp, int warpOn, float *k, int freeze, float *G)
{
 8020b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b44:	ed2d 8b02 	vpush	{d8}
 8020b48:	b0c9      	sub	sp, #292	; 0x124
 8020b4a:	4604      	mov	r4, r0
 8020b4c:	468b      	mov	fp, r1
 8020b4e:	9f56      	ldr	r7, [sp, #344]	; 0x158
 8020b50:	9d54      	ldr	r5, [sp, #336]	; 0x150
 8020b52:	9e55      	ldr	r6, [sp, #340]	; 0x154
 8020b54:	f8dd 8164 	ldr.w	r8, [sp, #356]	; 0x164
    float z[ORD_MAX], r[ORD_MAX], x;
    int32_t i, j, nn=n;


	if (warpOn == 0)
 8020b58:	2f00      	cmp	r7, #0
 8020b5a:	d03a      	beq.n	8020bd2 <tTalkboxFloat_lpc+0x92>
			for(i=0; i<nn; i++) r[j] += buf[i] * buf[i+j]; //autocorrelation
		}
	}
	else
	{
		for(j=0; j<=o; j++, nn--)  //buf[] is already emphasized and windowed
 8020b5c:	2e00      	cmp	r6, #0
 8020b5e:	4692      	mov	sl, r2
 8020b60:	eeb0 8a40 	vmov.f32	s16, s0
 8020b64:	f2c0 80b7 	blt.w	8020cd6 <tTalkboxFloat_lpc+0x196>
		{
			z[j] = r[j] = 0.0f;
 8020b68:	1c77      	adds	r7, r6, #1
 8020b6a:	a826      	add	r0, sp, #152	; 0x98
 8020b6c:	2100      	movs	r1, #0
 8020b6e:	9303      	str	r3, [sp, #12]
 8020b70:	00bf      	lsls	r7, r7, #2
 8020b72:	9002      	str	r0, [sp, #8]
 8020b74:	463a      	mov	r2, r7
 8020b76:	f006 fce0 	bl	802753a <memset>
 8020b7a:	463a      	mov	r2, r7
 8020b7c:	2100      	movs	r1, #0
 8020b7e:	a804      	add	r0, sp, #16
 8020b80:	f006 fcdb 	bl	802753a <memset>
 8020b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
		}
		tTalkboxFloat_warpedAutocorrelate(buf, dl, Rt, n, r, o, warp);
 8020b88:	9200      	str	r2, [sp, #0]
 8020b8a:	eeb0 0a48 	vmov.f32	s0, s16
 8020b8e:	461a      	mov	r2, r3
 8020b90:	9601      	str	r6, [sp, #4]
 8020b92:	4651      	mov	r1, sl
 8020b94:	462b      	mov	r3, r5
 8020b96:	4620      	mov	r0, r4
 8020b98:	f7ff ff64 	bl	8020a64 <tTalkboxFloat_warpedAutocorrelate>
	}

	r[0] *= 1.001f;  //stability fix
 8020b9c:	eddd 7a26 	vldr	s15, [sp, #152]	; 0x98
 8020ba0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8020cdc <tTalkboxFloat_lpc+0x19c>

	float min = 0.000001f;
	if (!freeze)
 8020ba4:	9b58      	ldr	r3, [sp, #352]	; 0x160
	r[0] *= 1.001f;  //stability fix
 8020ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020baa:	edcd 7a26 	vstr	s15, [sp, #152]	; 0x98
	if (!freeze)
 8020bae:	2b00      	cmp	r3, #0
 8020bb0:	d13f      	bne.n	8020c32 <tTalkboxFloat_lpc+0xf2>
	{
		if(r[0] < min)
 8020bb2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8020ce0 <tTalkboxFloat_lpc+0x1a0>
 8020bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bbe:	d566      	bpl.n	8020c8e <tTalkboxFloat_lpc+0x14e>
		{
//            for(i=0; i<n; i++)
//            {
				buf[i] = 0.0f;
 8020bc0:	eb04 0489 	add.w	r4, r4, r9, lsl #2
 8020bc4:	2300      	movs	r3, #0
 8020bc6:	6023      	str	r3, [r4, #0]
            x -= k[j] * z[j-1];
            z[j] = z[j-1] + k[j] * x;
        }
        buf[i] = z[0] = x;  //output buf[] will be windowed elsewhere
    }
}
 8020bc8:	b049      	add	sp, #292	; 0x124
 8020bca:	ecbd 8b02 	vpop	{d8}
 8020bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(j=0; j<=o; j++, nn--)  //buf[] is already emphasized and windowed
 8020bd2:	2e00      	cmp	r6, #0
 8020bd4:	dbe2      	blt.n	8020b9c <tTalkboxFloat_lpc+0x5c>
 8020bd6:	4629      	mov	r1, r5
			z[j] = r[j] = 0.0f;
 8020bd8:	f04f 0a00 	mov.w	sl, #0
 8020bdc:	ea6f 0e06 	mvn.w	lr, r6
 8020be0:	af26      	add	r7, sp, #152	; 0x98
 8020be2:	f10d 0c10 	add.w	ip, sp, #16
			for(i=0; i<nn; i++) r[j] += buf[i] * buf[i+j]; //autocorrelation
 8020be6:	2900      	cmp	r1, #0
 8020be8:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8020bec:	44ae      	add	lr, r5
			z[j] = r[j] = 0.0f;
 8020bee:	f847 ab04 	str.w	sl, [r7], #4
 8020bf2:	f84c ab04 	str.w	sl, [ip], #4
			for(i=0; i<nn; i++) r[j] += buf[i] * buf[i+j]; //autocorrelation
 8020bf6:	dd19      	ble.n	8020c2c <tTalkboxFloat_lpc+0xec>
 8020bf8:	4681      	mov	r9, r0
 8020bfa:	4623      	mov	r3, r4
 8020bfc:	eddf 7a39 	vldr	s15, [pc, #228]	; 8020ce4 <tTalkboxFloat_lpc+0x1a4>
 8020c00:	ecf3 6a01 	vldmia	r3!, {s13}
 8020c04:	ecb9 7a01 	vldmia	r9!, {s14}
 8020c08:	429a      	cmp	r2, r3
 8020c0a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020c0e:	d1f7      	bne.n	8020c00 <tTalkboxFloat_lpc+0xc0>
 8020c10:	4689      	mov	r9, r1
 8020c12:	ed47 7a01 	vstr	s15, [r7, #-4]
		for(j=0; j<=o; j++, nn--)  //buf[] is already emphasized and windowed
 8020c16:	3901      	subs	r1, #1
 8020c18:	3004      	adds	r0, #4
 8020c1a:	3a04      	subs	r2, #4
 8020c1c:	458e      	cmp	lr, r1
 8020c1e:	d0bd      	beq.n	8020b9c <tTalkboxFloat_lpc+0x5c>
			for(i=0; i<nn; i++) r[j] += buf[i] * buf[i+j]; //autocorrelation
 8020c20:	2900      	cmp	r1, #0
			z[j] = r[j] = 0.0f;
 8020c22:	f847 ab04 	str.w	sl, [r7], #4
 8020c26:	f84c ab04 	str.w	sl, [ip], #4
			for(i=0; i<nn; i++) r[j] += buf[i] * buf[i+j]; //autocorrelation
 8020c2a:	dce5      	bgt.n	8020bf8 <tTalkboxFloat_lpc+0xb8>
 8020c2c:	f04f 0900 	mov.w	r9, #0
 8020c30:	e7f1      	b.n	8020c16 <tTalkboxFloat_lpc+0xd6>
    for(i=0; i<n; i++)
 8020c32:	2d00      	cmp	r5, #0
 8020c34:	ddc8      	ble.n	8020bc8 <tTalkboxFloat_lpc+0x88>
 8020c36:	1c77      	adds	r7, r6, #1
 8020c38:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 8020c3a:	4658      	mov	r0, fp
 8020c3c:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 8020c40:	00bf      	lsls	r7, r7, #2
 8020c42:	1d19      	adds	r1, r3, #4
 8020c44:	eb03 0c07 	add.w	ip, r3, r7
 8020c48:	ab04      	add	r3, sp, #16
 8020c4a:	441f      	add	r7, r3
        x = G[0] * car[i];
 8020c4c:	ecb0 7a01 	vldmia	r0!, {s14}
        for(j=o; j>0; j--)  //lattice filter
 8020c50:	2e00      	cmp	r6, #0
        x = G[0] * car[i];
 8020c52:	edd8 7a00 	vldr	s15, [r8]
 8020c56:	ee27 7a27 	vmul.f32	s14, s14, s15
        for(j=o; j>0; j--)  //lattice filter
 8020c5a:	dd0d      	ble.n	8020c78 <tTalkboxFloat_lpc+0x138>
 8020c5c:	463a      	mov	r2, r7
 8020c5e:	4663      	mov	r3, ip
            x -= k[j] * z[j-1];
 8020c60:	ed73 6a01 	vldmdb	r3!, {s13}
 8020c64:	ed52 7a02 	vldr	s15, [r2, #-8]
        for(j=o; j>0; j--)  //lattice filter
 8020c68:	4299      	cmp	r1, r3
            x -= k[j] * z[j-1];
 8020c6a:	eea6 7ae7 	vfms.f32	s14, s13, s15
            z[j] = z[j-1] + k[j] * x;
 8020c6e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020c72:	ed62 7a01 	vstmdb	r2!, {s15}
        for(j=o; j>0; j--)  //lattice filter
 8020c76:	d1f3      	bne.n	8020c60 <tTalkboxFloat_lpc+0x120>
    for(i=0; i<n; i++)
 8020c78:	4285      	cmp	r5, r0
        buf[i] = z[0] = x;  //output buf[] will be windowed elsewhere
 8020c7a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8020c7e:	eca4 7a01 	vstmia	r4!, {s14}
    for(i=0; i<n; i++)
 8020c82:	d1e3      	bne.n	8020c4c <tTalkboxFloat_lpc+0x10c>
}
 8020c84:	b049      	add	sp, #292	; 0x124
 8020c86:	ecbd 8b02 	vpop	{d8}
 8020c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tTalkbox_lpcDurbin(r, o, k, G);  //calc reflection coeffs
 8020c8e:	4643      	mov	r3, r8
 8020c90:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 8020c92:	4631      	mov	r1, r6
 8020c94:	a826      	add	r0, sp, #152	; 0x98
 8020c96:	f7ff fd2b 	bl	80206f0 <tTalkbox_lpcDurbin>
		for(i=0; i<=o; i++)
 8020c9a:	2e00      	cmp	r6, #0
 8020c9c:	dbc9      	blt.n	8020c32 <tTalkboxFloat_lpc+0xf2>
 8020c9e:	9b57      	ldr	r3, [sp, #348]	; 0x15c
			if(k[i] > 0.998f) k[i] = 0.998f; else if(k[i] < -0.998f) k[i] = -.998f;
 8020ca0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8020ce8 <tTalkboxFloat_lpc+0x1a8>
 8020ca4:	1d1a      	adds	r2, r3, #4
 8020ca6:	eddf 6a11 	vldr	s13, [pc, #68]	; 8020cec <tTalkboxFloat_lpc+0x1ac>
 8020caa:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8020cae:	e003      	b.n	8020cb8 <tTalkboxFloat_lpc+0x178>
 8020cb0:	ed03 7a01 	vstr	s14, [r3, #-4]
		for(i=0; i<=o; i++)
 8020cb4:	429a      	cmp	r2, r3
 8020cb6:	d0bc      	beq.n	8020c32 <tTalkboxFloat_lpc+0xf2>
			if(k[i] > 0.998f) k[i] = 0.998f; else if(k[i] < -0.998f) k[i] = -.998f;
 8020cb8:	ecf3 7a01 	vldmia	r3!, {s15}
 8020cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cc4:	dcf4      	bgt.n	8020cb0 <tTalkboxFloat_lpc+0x170>
 8020cc6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8020cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cce:	bf48      	it	mi
 8020cd0:	ed43 6a01 	vstrmi	s13, [r3, #-4]
 8020cd4:	e7ee      	b.n	8020cb4 <tTalkboxFloat_lpc+0x174>
 8020cd6:	aa26      	add	r2, sp, #152	; 0x98
 8020cd8:	9202      	str	r2, [sp, #8]
 8020cda:	e755      	b.n	8020b88 <tTalkboxFloat_lpc+0x48>
 8020cdc:	3f8020c5 	.word	0x3f8020c5
 8020ce0:	358637bd 	.word	0x358637bd
 8020ce4:	00000000 	.word	0x00000000
 8020ce8:	3f7f7cee 	.word	0x3f7f7cee
 8020cec:	bf7f7cee 	.word	0xbf7f7cee

08020cf0 <tTalkboxFloat_tick>:
{
 8020cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020cf4:	ed2d 8b04 	vpush	{d8-d9}
    _tTalkboxFloat* v = *voc;
 8020cf8:	6804      	ldr	r4, [r0, #0]
    p = v->d0 + h0 *  x; v->d0 = v->d1;  v->d1 = x  - h0 * p;
 8020cfa:	eeb0 5a40 	vmov.f32	s10, s0
    q = v->d2 + h1 * v->d4; v->d2 = v->d3;  v->d3 = v->d4 - h1 * q;
 8020cfe:	eddf 6a62 	vldr	s13, [pc, #392]	; 8020e88 <tTalkboxFloat_tick+0x198>
{
 8020d02:	b086      	sub	sp, #24
    q = v->d2 + h1 * v->d4; v->d2 = v->d3;  v->d3 = v->d4 - h1 * q;
 8020d04:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
    p = v->d0 + h0 *  x; v->d0 = v->d1;  v->d1 = x  - h0 * p;
 8020d08:	eddf 5a60 	vldr	s11, [pc, #384]	; 8020e8c <tTalkboxFloat_tick+0x19c>
 8020d0c:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
    q = v->d2 + h1 * v->d4; v->d2 = v->d3;  v->d3 = v->d4 - h1 * q;
 8020d10:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
    p = v->d0 + h0 *  x; v->d0 = v->d1;  v->d1 = x  - h0 * p;
 8020d14:	eee0 7a25 	vfma.f32	s15, s0, s11
    q = v->d2 + h1 * v->d4; v->d2 = v->d3;  v->d3 = v->d4 - h1 * q;
 8020d18:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8020d1a:	eea7 6a26 	vfma.f32	s12, s14, s13
    p = v->d0 + h0 *  x; v->d0 = v->d1;  v->d1 = x  - h0 * p;
 8020d1e:	6e21      	ldr	r1, [r4, #96]	; 0x60
    if(v->K++)
 8020d20:	6c22      	ldr	r2, [r4, #64]	; 0x40
    q = v->d2 + h1 * v->d4; v->d2 = v->d3;  v->d3 = v->d4 - h1 * q;
 8020d22:	6663      	str	r3, [r4, #100]	; 0x64
    p = v->d0 + h0 *  x; v->d0 = v->d1;  v->d1 = x  - h0 * p;
 8020d24:	65e1      	str	r1, [r4, #92]	; 0x5c
    v->d4 = x;
 8020d26:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
    p = v->d0 + h0 *  x; v->d0 = v->d1;  v->d1 = x  - h0 * p;
 8020d2a:	eea7 5ae5 	vfms.f32	s10, s15, s11
    int32_t  p0=v->pos, p1 = (v->pos + v->N/2) % v->N;
 8020d2e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    q = v->d2 + h1 * v->d4; v->d2 = v->d3;  v->d3 = v->d4 - h1 * q;
 8020d30:	eea6 7a66 	vfms.f32	s14, s12, s13
    int32_t  p0=v->pos, p1 = (v->pos + v->N/2) % v->N;
 8020d34:	6c63      	ldr	r3, [r4, #68]	; 0x44
    float e=v->emphasis, w, o, x, fx=v->FX;
 8020d36:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 8020d3a:	ed94 8a16 	vldr	s16, [r4, #88]	; 0x58
    p = v->d0 + h0 *  x; v->d0 = v->d1;  v->d1 = x  - h0 * p;
 8020d3e:	ed84 5a18 	vstr	s10, [r4, #96]	; 0x60
    q = v->d2 + h1 * v->d4; v->d2 = v->d3;  v->d3 = v->d4 - h1 * q;
 8020d42:	ed84 7a1a 	vstr	s14, [r4, #104]	; 0x68
    if(v->K++)
 8020d46:	2a00      	cmp	r2, #0
 8020d48:	d06b      	beq.n	8020e22 <tTalkboxFloat_tick+0x132>
    int32_t  p0=v->pos, p1 = (v->pos + v->N/2) % v->N;
 8020d4a:	2b00      	cmp	r3, #0
 8020d4c:	461e      	mov	r6, r3
        v->car0[p0] = v->car1[p1] = x; //carrier input
 8020d4e:	69e0      	ldr	r0, [r4, #28]
    x = p + q;
 8020d50:	ee77 7a86 	vadd.f32	s15, s15, s12
    int32_t  p0=v->pos, p1 = (v->pos + v->N/2) % v->N;
 8020d54:	bfb8      	it	lt
 8020d56:	1c5e      	addlt	r6, r3, #1
        v->K = 0;
 8020d58:	2700      	movs	r7, #0
        v->car0[p0] = v->car1[p1] = x; //carrier input
 8020d5a:	00a9      	lsls	r1, r5, #2
        x = o - e;  e = o;  //6dB/oct pre-emphasis
 8020d5c:	ee70 8ae6 	vsub.f32	s17, s1, s13
    int32_t  p0=v->pos, p1 = (v->pos + v->N/2) % v->N;
 8020d60:	eb05 0266 	add.w	r2, r5, r6, asr #1
        v->K = 0;
 8020d64:	6427      	str	r7, [r4, #64]	; 0x40
        if(++p0 >= v->N) { tTalkboxFloat_lpc(v->buf0, v->car0, v->dl, v->Rt, v->N, v->O, v->warpFactor, v->warpOn, v->k, v->freeze, &v->G);  p0 = 0; }
 8020d66:	3501      	adds	r5, #1
 8020d68:	eeb0 9a60 	vmov.f32	s18, s1
    int32_t  p0=v->pos, p1 = (v->pos + v->N/2) % v->N;
 8020d6c:	fb92 f6f3 	sdiv	r6, r2, r3
 8020d70:	fb03 2616 	mls	r6, r3, r6, r2
        v->car0[p0] = v->car1[p1] = x; //carrier input
 8020d74:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8020d78:	4440      	add	r0, r8
 8020d7a:	edc0 7a00 	vstr	s15, [r0]
 8020d7e:	69a3      	ldr	r3, [r4, #24]
 8020d80:	440b      	add	r3, r1
 8020d82:	edc3 7a00 	vstr	s15, [r3]
        w = v->window[p0]; fx = v->buf0[p0] * w;  v->buf0[p0] = x * w;  //50% overlapping hanning windows
 8020d86:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8020d8a:	440a      	add	r2, r1
 8020d8c:	440b      	add	r3, r1
 8020d8e:	edd2 9a00 	vldr	s19, [r2]
 8020d92:	ed93 8a00 	vldr	s16, [r3]
 8020d96:	ee68 7aa9 	vmul.f32	s15, s17, s19
 8020d9a:	ee29 8a88 	vmul.f32	s16, s19, s16
 8020d9e:	edc3 7a00 	vstr	s15, [r3]
        if(++p0 >= v->N) { tTalkboxFloat_lpc(v->buf0, v->car0, v->dl, v->Rt, v->N, v->O, v->warpFactor, v->warpOn, v->k, v->freeze, &v->G);  p0 = 0; }
 8020da2:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 8020da6:	45ac      	cmp	ip, r5
 8020da8:	dd55      	ble.n	8020e56 <tTalkboxFloat_tick+0x166>
        w = 1.0f - w;  fx += v->buf1[p1] * w;  v->buf1[p1] = x * w;
 8020daa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8020dae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        if(++p1 >= v->N) { tTalkboxFloat_lpc(v->buf1, v->car1, v->dl, v->Rt, v->N, v->O, v->warpFactor, v->warpOn, v->k, v->freeze, &v->G);  p1 = 0; }
 8020db0:	3601      	adds	r6, #1
        w = 1.0f - w;  fx += v->buf1[p1] * w;  v->buf1[p1] = x * w;
 8020db2:	4498      	add	r8, r3
 8020db4:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8020db8:	ed98 7a00 	vldr	s14, [r8]
 8020dbc:	ee68 6aa7 	vmul.f32	s13, s17, s15
 8020dc0:	eea7 8a27 	vfma.f32	s16, s14, s15
 8020dc4:	edc8 6a00 	vstr	s13, [r8]
        if(++p1 >= v->N) { tTalkboxFloat_lpc(v->buf1, v->car1, v->dl, v->Rt, v->N, v->O, v->warpFactor, v->warpOn, v->k, v->freeze, &v->G);  p1 = 0; }
 8020dc8:	6c67      	ldr	r7, [r4, #68]	; 0x44
 8020dca:	42b7      	cmp	r7, r6
 8020dcc:	dd2e      	ble.n	8020e2c <tTalkboxFloat_tick+0x13c>
    q = v->u2 + h1 * v->u4; v->u2 = v->u3;  v->u3 = v->u4 - h1 * q;
 8020dce:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
    p = v->u0 + h0 * fx; v->u0 = v->u1;  v->u1 = fx - h0 * p;
 8020dd2:	eef0 5a48 	vmov.f32	s11, s16
 8020dd6:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8020e8c <tTalkboxFloat_tick+0x19c>
 8020dda:	ed94 0a1c 	vldr	s0, [r4, #112]	; 0x70
    q = v->u2 + h1 * v->u4; v->u2 = v->u3;  v->u3 = v->u4 - h1 * q;
 8020dde:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8020e88 <tTalkboxFloat_tick+0x198>
 8020de2:	ed94 7a1e 	vldr	s14, [r4, #120]	; 0x78
    p = v->u0 + h0 * fx; v->u0 = v->u1;  v->u1 = fx - h0 * p;
 8020de6:	eea8 0a06 	vfma.f32	s0, s16, s12
 8020dea:	6f62      	ldr	r2, [r4, #116]	; 0x74
    q = v->u2 + h1 * v->u4; v->u2 = v->u3;  v->u3 = v->u4 - h1 * q;
 8020dec:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8020df0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    v->emphasis = e;
 8020df2:	ed84 9a0f 	vstr	s18, [r4, #60]	; 0x3c
    v->pos = p0;
 8020df6:	64e5      	str	r5, [r4, #76]	; 0x4c
    v->FX = fx;
 8020df8:	ed84 8a16 	vstr	s16, [r4, #88]	; 0x58
    p = v->u0 + h0 * fx; v->u0 = v->u1;  v->u1 = fx - h0 * p;
 8020dfc:	eee0 5a46 	vfms.f32	s11, s0, s12
 8020e00:	6722      	str	r2, [r4, #112]	; 0x70
    v->u4 = fx;
 8020e02:	ed84 8a20 	vstr	s16, [r4, #128]	; 0x80
    q = v->u2 + h1 * v->u4; v->u2 = v->u3;  v->u3 = v->u4 - h1 * q;
 8020e06:	eee7 7a66 	vfms.f32	s15, s14, s13
 8020e0a:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8020e0c:	ee30 0a07 	vadd.f32	s0, s0, s14
    p = v->u0 + h0 * fx; v->u0 = v->u1;  v->u1 = fx - h0 * p;
 8020e10:	edc4 5a1d 	vstr	s11, [r4, #116]	; 0x74
    q = v->u2 + h1 * v->u4; v->u2 = v->u3;  v->u3 = v->u4 - h1 * q;
 8020e14:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
}
 8020e18:	b006      	add	sp, #24
 8020e1a:	ecbd 8b04 	vpop	{d8-d9}
 8020e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(v->K++)
 8020e22:	2301      	movs	r3, #1
    float e=v->emphasis, w, o, x, fx=v->FX;
 8020e24:	eeb0 9a66 	vmov.f32	s18, s13
    if(v->K++)
 8020e28:	6423      	str	r3, [r4, #64]	; 0x40
 8020e2a:	e7d0      	b.n	8020dce <tTalkboxFloat_tick+0xde>
        if(++p1 >= v->N) { tTalkboxFloat_lpc(v->buf1, v->car1, v->dl, v->Rt, v->N, v->O, v->warpFactor, v->warpOn, v->k, v->freeze, &v->G);  p1 = 0; }
 8020e2c:	f104 0684 	add.w	r6, r4, #132	; 0x84
 8020e30:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8020e34:	69e1      	ldr	r1, [r4, #28]
 8020e36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8020e38:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
 8020e3c:	9605      	str	r6, [sp, #20]
 8020e3e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8020e40:	9604      	str	r6, [sp, #16]
 8020e42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020e44:	9603      	str	r6, [sp, #12]
 8020e46:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8020e48:	9602      	str	r6, [sp, #8]
 8020e4a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8020e4c:	e9cd 7600 	strd	r7, r6, [sp]
 8020e50:	f7ff fe76 	bl	8020b40 <tTalkboxFloat_lpc>
 8020e54:	e7bb      	b.n	8020dce <tTalkboxFloat_tick+0xde>
        if(++p0 >= v->N) { tTalkboxFloat_lpc(v->buf0, v->car0, v->dl, v->Rt, v->N, v->O, v->warpFactor, v->warpOn, v->k, v->freeze, &v->G);  p0 = 0; }
 8020e56:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 8020e5a:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8020e5e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8020e62:	463d      	mov	r5, r7
 8020e64:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8020e68:	69a1      	ldr	r1, [r4, #24]
 8020e6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020e6c:	f8cd e014 	str.w	lr, [sp, #20]
 8020e70:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8020e72:	9704      	str	r7, [sp, #16]
 8020e74:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8020e76:	9703      	str	r7, [sp, #12]
 8020e78:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8020e7a:	9702      	str	r7, [sp, #8]
 8020e7c:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8020e7e:	e9cd c700 	strd	ip, r7, [sp]
 8020e82:	f7ff fe5d 	bl	8020b40 <tTalkboxFloat_lpc>
 8020e86:	e790      	b.n	8020daa <tTalkboxFloat_tick+0xba>
 8020e88:	3f451eb8 	.word	0x3f451eb8
 8020e8c:	3e99999a 	.word	0x3e99999a

08020e90 <tTalkboxFloat_setQuality>:

void tTalkboxFloat_setQuality(tTalkboxFloat* const voc, float quality)
{
    _tTalkboxFloat* v = *voc;
    v->param[3] = quality;
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * leaf.sampleRate);
 8020e90:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8020ec0 <tTalkboxFloat_setQuality+0x30>
 8020e94:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8020ec4 <tTalkboxFloat_setQuality+0x34>
 8020e98:	4b0b      	ldr	r3, [pc, #44]	; (8020ec8 <tTalkboxFloat_setQuality+0x38>)
 8020e9a:	eee0 7a07 	vfma.f32	s15, s0, s14
    _tTalkboxFloat* v = *voc;
 8020e9e:	6802      	ldr	r2, [r0, #0]
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * leaf.sampleRate);
 8020ea0:	ed93 7a00 	vldr	s14, [r3]
    v->param[3] = quality;
 8020ea4:	ed82 0a04 	vstr	s0, [r2, #16]
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * leaf.sampleRate);
 8020ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020eb0:	ee17 3a90 	vmov	r3, s15
    if (v->O >= ORD_MAX)
 8020eb4:	2b21      	cmp	r3, #33	; 0x21
    {
    	v->O = ORD_MAX-1;
 8020eb6:	bfc8      	it	gt
 8020eb8:	2321      	movgt	r3, #33	; 0x21
 8020eba:	6493      	str	r3, [r2, #72]	; 0x48
    }
}
 8020ebc:	4770      	bx	lr
 8020ebe:	bf00      	nop
 8020ec0:	39d1b717 	.word	0x39d1b717
 8020ec4:	38d1b717 	.word	0x38d1b717
 8020ec8:	200194a0 	.word	0x200194a0

08020ecc <tTalkboxFloat_setWarpFactor>:

void tTalkboxFloat_setWarpFactor(tTalkboxFloat* const voc, float warpFactor)
{
    _tTalkboxFloat* v = *voc;
 8020ecc:	6803      	ldr	r3, [r0, #0]

    v->warpFactor = warpFactor;
 8020ece:	ed83 0a0c 	vstr	s0, [r3, #48]	; 0x30
}
 8020ed2:	4770      	bx	lr

08020ed4 <tTalkboxFloat_setWarpOn>:

void tTalkboxFloat_setWarpOn(tTalkboxFloat* const voc, float warpOn)
{
    _tTalkboxFloat* v = *voc;

    v->warpOn = warpOn;
 8020ed4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tTalkboxFloat* v = *voc;
 8020ed8:	6803      	ldr	r3, [r0, #0]
    v->warpOn = warpOn;
 8020eda:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
 8020ede:	4770      	bx	lr

08020ee0 <tTalkboxFloat_setFreeze>:

void tTalkboxFloat_setFreeze(tTalkboxFloat* const voc, float freeze)
{
    _tTalkboxFloat* v = *voc;

    v->freeze = freeze;
 8020ee0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tTalkboxFloat* v = *voc;
 8020ee4:	6803      	ldr	r3, [r0, #0]
    v->freeze = freeze;
 8020ee6:	ed83 0a0e 	vstr	s0, [r3, #56]	; 0x38
}
 8020eea:	4770      	bx	lr

08020eec <tRosenbergGlottalPulse_initToPool>:
{
    tRosenbergGlottalPulse_initToPool(gp, &leaf.mempool);
}

void tRosenbergGlottalPulse_initToPool (tRosenbergGlottalPulse* const gp, tMempool* const mp)
{
 8020eec:	b538      	push	{r3, r4, r5, lr}
     _tMempool* m = *mp;
 8020eee:	680c      	ldr	r4, [r1, #0]
{
 8020ef0:	4605      	mov	r5, r0
    _tRosenbergGlottalPulse* g = *gp = (_tRosenbergGlottalPulse*) mpool_alloc(sizeof(_tRosenbergGlottalPulse), m);
 8020ef2:	201c      	movs	r0, #28
 8020ef4:	4621      	mov	r1, r4
 8020ef6:	f003 fc43 	bl	8024780 <mpool_alloc>
    g->mempool = m;

    g->phase  = 0.0f;
 8020efa:	2300      	movs	r3, #0
    _tRosenbergGlottalPulse* g = *gp = (_tRosenbergGlottalPulse*) mpool_alloc(sizeof(_tRosenbergGlottalPulse), m);
 8020efc:	6028      	str	r0, [r5, #0]
    g->mempool = m;
 8020efe:	6004      	str	r4, [r0, #0]
    g->phase  = 0.0f;
 8020f00:	6043      	str	r3, [r0, #4]
    g->openLength = 0.0f;
 8020f02:	6083      	str	r3, [r0, #8]
    g->pulseLength = 0.0f;
 8020f04:	60c3      	str	r3, [r0, #12]
    g->freq = 0.0f;
 8020f06:	6143      	str	r3, [r0, #20]
    g->inc = 0.0f;
 8020f08:	6183      	str	r3, [r0, #24]


}
 8020f0a:	bd38      	pop	{r3, r4, r5, pc}

08020f0c <tRosenbergGlottalPulse_free>:
void tRosenbergGlottalPulse_free (tRosenbergGlottalPulse* const gp)
{
    _tRosenbergGlottalPulse* g = *gp;
 8020f0c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)g, g->mempool);
 8020f0e:	6801      	ldr	r1, [r0, #0]
 8020f10:	f003 bcde 	b.w	80248d0 <mpool_free>

08020f14 <tRosenbergGlottalPulse_tick>:
}

float   tRosenbergGlottalPulse_tick           (tRosenbergGlottalPulse* const gp)
{
 8020f14:	b508      	push	{r3, lr}
    _tRosenbergGlottalPulse* g = *gp;
 8020f16:	6803      	ldr	r3, [r0, #0]

    float output = 0.0f;

    // Phasor increment
    g->phase += g->inc;
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 8020f18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    g->phase += g->inc;
 8020f1c:	ed93 7a01 	vldr	s14, [r3, #4]
 8020f20:	edd3 7a06 	vldr	s15, [r3, #24]
 8020f24:	ee37 7a27 	vadd.f32	s14, s14, s15
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 8020f28:	eeb4 7ae6 	vcmpe.f32	s14, s13
    g->phase += g->inc;
 8020f2c:	ed83 7a01 	vstr	s14, [r3, #4]
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 8020f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f34:	db51      	blt.n	8020fda <tRosenbergGlottalPulse_tick+0xc6>
 8020f36:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8020f3a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8020f3e:	ee77 7a66 	vsub.f32	s15, s14, s13
 8020f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f46:	eeb0 7a67 	vmov.f32	s14, s15
 8020f4a:	daf6      	bge.n	8020f3a <tRosenbergGlottalPulse_tick+0x26>
 8020f4c:	edc3 7a01 	vstr	s15, [r3, #4]
    while (g->phase < 0.0f) g->phase += 1.0f;
 8020f50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f58:	d53c      	bpl.n	8020fd4 <tRosenbergGlottalPulse_tick+0xc0>
 8020f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020f5e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8020f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020f66:	ee37 0aa6 	vadd.f32	s0, s15, s13
 8020f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f6e:	eef0 7a40 	vmov.f32	s15, s0
 8020f72:	d4f6      	bmi.n	8020f62 <tRosenbergGlottalPulse_tick+0x4e>
 8020f74:	ed83 0a01 	vstr	s0, [r3, #4]

    if (g->phase < g->openLength)
 8020f78:	edd3 7a02 	vldr	s15, [r3, #8]
 8020f7c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8020f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f84:	dc17      	bgt.n	8020fb6 <tRosenbergGlottalPulse_tick+0xa2>
    {
        output = 0.5f*(1.0f-fastercosf(PI * g->phase));
    }

    else if (g->phase < g->pulseLength)
 8020f86:	ed93 7a03 	vldr	s14, [r3, #12]
 8020f8a:	eeb4 7ac0 	vcmpe.f32	s14, s0
 8020f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f92:	dc02      	bgt.n	8020f9a <tRosenbergGlottalPulse_tick+0x86>
        output = fastercosf(HALF_PI * (g->phase-g->openLength)* g->invPulseLengthMinusOpenLength);
    }

    else
    {
        output = 0.0f;
 8020f94:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8020fe0 <tRosenbergGlottalPulse_tick+0xcc>
    }
    return output;
}
 8020f98:	bd08      	pop	{r3, pc}
        output = fastercosf(HALF_PI * (g->phase-g->openLength)* g->invPulseLengthMinusOpenLength);
 8020f9a:	ed93 7a04 	vldr	s14, [r3, #16]
 8020f9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8020fa2:	eddf 7a10 	vldr	s15, [pc, #64]	; 8020fe4 <tRosenbergGlottalPulse_tick+0xd0>
 8020fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8020faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        output = fastercosf(HALF_PI * (g->phase-g->openLength)* g->invPulseLengthMinusOpenLength);
 8020fae:	ee27 0a80 	vmul.f32	s0, s15, s0
 8020fb2:	f003 b8f9 	b.w	80241a8 <fastercosf>
        output = 0.5f*(1.0f-fastercosf(PI * g->phase));
 8020fb6:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8020fe8 <tRosenbergGlottalPulse_tick+0xd4>
 8020fba:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020fbe:	f003 f8f3 	bl	80241a8 <fastercosf>
 8020fc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8020fc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8020fca:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8020fce:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 8020fd2:	bd08      	pop	{r3, pc}
    while (g->phase < 0.0f) g->phase += 1.0f;
 8020fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8020fd8:	e7ce      	b.n	8020f78 <tRosenbergGlottalPulse_tick+0x64>
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 8020fda:	eef0 7a47 	vmov.f32	s15, s14
 8020fde:	e7b7      	b.n	8020f50 <tRosenbergGlottalPulse_tick+0x3c>
 8020fe0:	00000000 	.word	0x00000000
 8020fe4:	3fc90fdb 	.word	0x3fc90fdb
 8020fe8:	40490fdb 	.word	0x40490fdb

08020fec <tRosenbergGlottalPulse_tickHQ>:


float   tRosenbergGlottalPulse_tickHQ           (tRosenbergGlottalPulse* const gp)
{
 8020fec:	b508      	push	{r3, lr}
    _tRosenbergGlottalPulse* g = *gp;
 8020fee:	6803      	ldr	r3, [r0, #0]

    float output = 0.0f;

    // Phasor increment
    g->phase += g->inc;
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 8020ff0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    g->phase += g->inc;
 8020ff4:	ed93 7a01 	vldr	s14, [r3, #4]
 8020ff8:	edd3 7a06 	vldr	s15, [r3, #24]
 8020ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 8021000:	eeb4 7ae6 	vcmpe.f32	s14, s13
    g->phase += g->inc;
 8021004:	ed83 7a01 	vstr	s14, [r3, #4]
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 8021008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802100c:	db4e      	blt.n	80210ac <tRosenbergGlottalPulse_tickHQ+0xc0>
 802100e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8021012:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8021016:	ee77 7a66 	vsub.f32	s15, s14, s13
 802101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802101e:	eeb0 7a67 	vmov.f32	s14, s15
 8021022:	daf6      	bge.n	8021012 <tRosenbergGlottalPulse_tickHQ+0x26>
    while (g->phase < 0.0f) g->phase += 1.0f;
 8021024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021028:	edc3 7a01 	vstr	s15, [r3, #4]
 802102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021030:	d543      	bpl.n	80210ba <tRosenbergGlottalPulse_tickHQ+0xce>
 8021032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021036:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802103a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802103e:	ee37 0aa6 	vadd.f32	s0, s15, s13
 8021042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021046:	eef0 7a40 	vmov.f32	s15, s0
 802104a:	d4f6      	bmi.n	802103a <tRosenbergGlottalPulse_tickHQ+0x4e>
 802104c:	ed83 0a01 	vstr	s0, [r3, #4]

    if (g->phase < g->openLength)
 8021050:	edd3 7a02 	vldr	s15, [r3, #8]
 8021054:	eef4 7ac0 	vcmpe.f32	s15, s0
 8021058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802105c:	dc17      	bgt.n	802108e <tRosenbergGlottalPulse_tickHQ+0xa2>
    {
        output = 0.5f*(1.0f-cosf(PI * g->phase));
    }

    else if (g->phase < g->pulseLength)
 802105e:	ed93 7a03 	vldr	s14, [r3, #12]
 8021062:	eeb4 7ac0 	vcmpe.f32	s14, s0
 8021066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802106a:	dd0d      	ble.n	8021088 <tRosenbergGlottalPulse_tickHQ+0x9c>
    {
        output = cosf(HALF_PI * (g->phase-g->openLength)* g->invPulseLengthMinusOpenLength);
 802106c:	ed93 7a04 	vldr	s14, [r3, #16]
 8021070:	ee30 0a67 	vsub.f32	s0, s0, s15
 8021074:	eddf 7a12 	vldr	s15, [pc, #72]	; 80210c0 <tRosenbergGlottalPulse_tickHQ+0xd4>
 8021078:	ee67 7a27 	vmul.f32	s15, s14, s15
    else
    {
        output = 0.0f;
    }
    return output;
}
 802107c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        output = cosf(HALF_PI * (g->phase-g->openLength)* g->invPulseLengthMinusOpenLength);
 8021080:	ee27 0a80 	vmul.f32	s0, s15, s0
 8021084:	f006 bb7a 	b.w	802777c <cosf>
        output = 0.0f;
 8021088:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80210c4 <tRosenbergGlottalPulse_tickHQ+0xd8>
}
 802108c:	bd08      	pop	{r3, pc}
        output = 0.5f*(1.0f-cosf(PI * g->phase));
 802108e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80210c8 <tRosenbergGlottalPulse_tickHQ+0xdc>
 8021092:	ee20 0a27 	vmul.f32	s0, s0, s15
 8021096:	f006 fb71 	bl	802777c <cosf>
 802109a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802109e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80210a2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80210a6:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 80210aa:	bd08      	pop	{r3, pc}
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 80210ac:	eef0 7a47 	vmov.f32	s15, s14
    while (g->phase < 0.0f) g->phase += 1.0f;
 80210b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80210b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210b8:	d4bb      	bmi.n	8021032 <tRosenbergGlottalPulse_tickHQ+0x46>
 80210ba:	eeb0 0a67 	vmov.f32	s0, s15
 80210be:	e7c7      	b.n	8021050 <tRosenbergGlottalPulse_tickHQ+0x64>
 80210c0:	3fc90fdb 	.word	0x3fc90fdb
 80210c4:	00000000 	.word	0x00000000
 80210c8:	40490fdb 	.word	0x40490fdb

080210cc <tRosenbergGlottalPulse_setFreq>:

void   tRosenbergGlottalPulse_setFreq           (tRosenbergGlottalPulse* const gp, float freq)
{
    _tRosenbergGlottalPulse* g = *gp;
    g->freq = freq;
    g->inc = freq * leaf.invSampleRate;
 80210cc:	4a05      	ldr	r2, [pc, #20]	; (80210e4 <tRosenbergGlottalPulse_setFreq+0x18>)
    _tRosenbergGlottalPulse* g = *gp;
 80210ce:	6803      	ldr	r3, [r0, #0]
    g->inc = freq * leaf.invSampleRate;
 80210d0:	edd2 7a01 	vldr	s15, [r2, #4]
    g->freq = freq;
 80210d4:	ed83 0a05 	vstr	s0, [r3, #20]
    g->inc = freq * leaf.invSampleRate;
 80210d8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80210dc:	ed83 0a06 	vstr	s0, [r3, #24]
}
 80210e0:	4770      	bx	lr
 80210e2:	bf00      	nop
 80210e4:	200194a0 	.word	0x200194a0

080210e8 <tRosenbergGlottalPulse_setOpenLength>:

void   tRosenbergGlottalPulse_setOpenLength           (tRosenbergGlottalPulse* const gp, float openLength)
{
    _tRosenbergGlottalPulse* g = *gp;
 80210e8:	6803      	ldr	r3, [r0, #0]
    g->openLength = openLength;
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 80210ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80210ee:	edd3 7a03 	vldr	s15, [r3, #12]
    g->openLength = openLength;
 80210f2:	ed83 0a02 	vstr	s0, [r3, #8]
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 80210f6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80210fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80210fe:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8021102:	4770      	bx	lr

08021104 <tRosenbergGlottalPulse_setPulseLength>:

void   tRosenbergGlottalPulse_setPulseLength           (tRosenbergGlottalPulse* const gp, float pulseLength)
{
    _tRosenbergGlottalPulse* g = *gp;
 8021104:	6803      	ldr	r3, [r0, #0]
    g->pulseLength = pulseLength;
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8021106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802110a:	edd3 7a02 	vldr	s15, [r3, #8]
    g->pulseLength = pulseLength;
 802110e:	ed83 0a03 	vstr	s0, [r3, #12]
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8021112:	ee30 0a67 	vsub.f32	s0, s0, s15
 8021116:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802111a:	edc3 7a04 	vstr	s15, [r3, #16]
}
 802111e:	4770      	bx	lr

08021120 <tRosenbergGlottalPulse_setOpenLengthAndPulseLength>:
void   tRosenbergGlottalPulse_setOpenLengthAndPulseLength           (tRosenbergGlottalPulse* const gp, float openLength, float pulseLength)
{
    _tRosenbergGlottalPulse* g = *gp;
    g->openLength = openLength;
    g->pulseLength = pulseLength;
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8021120:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tRosenbergGlottalPulse* g = *gp;
 8021124:	6803      	ldr	r3, [r0, #0]
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8021126:	ee30 7ac0 	vsub.f32	s14, s1, s0
    g->openLength = openLength;
 802112a:	ed83 0a02 	vstr	s0, [r3, #8]
    g->pulseLength = pulseLength;
 802112e:	edc3 0a03 	vstr	s1, [r3, #12]
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8021132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021136:	edc3 7a04 	vstr	s15, [r3, #16]
}
 802113a:	4770      	bx	lr

0802113c <tSOLAD_ioSamples>:
    mpool_free((char*)w, w->mempool);
}

// send one block of input samples, receive one block of output samples
void tSOLAD_ioSamples(tSOLAD* const wp, float* in, float* out, int blocksize)
{
 802113c:	b4f0      	push	{r4, r5, r6, r7}
 802113e:	ed2d 8b02 	vpush	{d8}
    _tSOLAD* w = *wp;
 8021142:	6800      	ldr	r0, [r0, #0]
    
    int i = w->timeindex;
    int n = w->blocksize = blocksize;
 8021144:	b29d      	uxth	r5, r3
    int i = w->timeindex;
 8021146:	8886      	ldrh	r6, [r0, #4]
 8021148:	462b      	mov	r3, r5
    int n = w->blocksize = blocksize;
 802114a:	80c5      	strh	r5, [r0, #6]
    
    if(!i) w->delaybuf[LOOPSIZE] = in[0];   // copy one sample for interpolation
 802114c:	b926      	cbnz	r6, 8021158 <tSOLAD_ioSamples+0x1c>
 802114e:	6a04      	ldr	r4, [r0, #32]
 8021150:	680f      	ldr	r7, [r1, #0]
 8021152:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
 8021156:	6027      	str	r7, [r4, #0]
    while(n--) w->delaybuf[i++] = *in++;    // copy one input block to delay buffer
 8021158:	b163      	cbz	r3, 8021174 <tSOLAD_ioSamples+0x38>
 802115a:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 802115e:	ebc1 0c86 	rsb	ip, r1, r6, lsl #2
 8021162:	eb0c 0701 	add.w	r7, ip, r1
 8021166:	6a03      	ldr	r3, [r0, #32]
 8021168:	f851 6b04 	ldr.w	r6, [r1], #4
 802116c:	443b      	add	r3, r7
 802116e:	428c      	cmp	r4, r1
 8021170:	601e      	str	r6, [r3, #0]
 8021172:	d1f6      	bne.n	8021162 <tSOLAD_ioSamples+0x26>
    
    if(w->pitchfactor > 1) pitchup(w, out);
 8021174:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8021178:	edd0 6a02 	vldr	s13, [r0, #8]
 802117c:	8883      	ldrh	r3, [r0, #4]
 802117e:	edd0 3a04 	vldr	s7, [r0, #16]
 8021182:	eef4 6ac2 	vcmpe.f32	s13, s4
 8021186:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
 802118a:	edd0 7a03 	vldr	s15, [r0, #12]
 802118e:	ee06 1a10 	vmov	s12, r1
 8021192:	edd0 5a05 	vldr	s11, [r0, #20]
 8021196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802119a:	88c1      	ldrh	r1, [r0, #6]
 802119c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80211a0:	ed90 7a07 	vldr	s14, [r0, #28]
 80211a4:	ed90 3a06 	vldr	s6, [r0, #24]
 80211a8:	f340 80b8 	ble.w	802131c <tSOLAD_ioSamples+0x1e0>
    float xfadelength = w->xfadelength;
    
    float readlagstep = pitchfactor - 1;
    float xfadespeed = pitchfactor * pitchfactor;
    float xfadestep = xfadespeed / xfadelength;
    float limitfactor = (pitchfactor - (float)0.99) / xfadespeed;
 80211ac:	ed9f 5aa1 	vldr	s10, [pc, #644]	; 8021434 <tSOLAD_ioSamples+0x2f8>
    float xfadespeed = pitchfactor * pitchfactor;
 80211b0:	ee66 1aa6 	vmul.f32	s3, s13, s13
    float readlagstep = pitchfactor - 1;
 80211b4:	ee36 2ac2 	vsub.f32	s4, s13, s4
    float limitfactor = (pitchfactor - (float)0.99) / xfadespeed;
 80211b8:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80211bc:	ee86 5aa1 	vdiv.f32	s10, s13, s3
    float limit = period * limitfactor;
 80211c0:	ee25 1a23 	vmul.f32	s2, s10, s7
    float readindex, outputsample;
    
    if((readlag > (period + 2 * limit)) & (xfadevalue < 0))
 80211c4:	ee71 6a01 	vadd.f32	s13, s2, s2
 80211c8:	ee76 4aa3 	vadd.f32	s9, s13, s7
 80211cc:	eef4 4a67 	vcmp.f32	s9, s15
 80211d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211d4:	f140 808a 	bpl.w	80212ec <tSOLAD_ioSamples+0x1b0>
 80211d8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80211dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211e0:	f140 8084 	bpl.w	80212ec <tSOLAD_ioSamples+0x1b0>
 80211e4:	ee77 6ae6 	vsub.f32	s13, s15, s13
    {
        jump = period;                                        // jump forward
 80211e8:	eef0 5a63 	vmov.f32	s11, s7
 80211ec:	e001      	b.n	80211f2 <tSOLAD_ioSamples+0xb6>
        while((jump * 2) < (readlag - 2 * limit)) jump *= 2;  // use available space
 80211ee:	eef0 5a47 	vmov.f32	s11, s14
 80211f2:	ee35 7aa5 	vadd.f32	s14, s11, s11
 80211f6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80211fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211fe:	d4f6      	bmi.n	80211ee <tSOLAD_ioSamples+0xb2>
        readlag -= jump;                                      // reduce read pointer lag
        xfadevalue = 1;                                       // start crossfade
        xfadelength = period - 1;
 8021200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        readlag -= jump;                                      // reduce read pointer lag
 8021204:	ee77 7ae5 	vsub.f32	s15, s15, s11
        xfadelength = period - 1;
 8021208:	ee33 3ac7 	vsub.f32	s6, s7, s14
        xfadestep = xfadespeed / xfadelength;
 802120c:	eec1 0a83 	vdiv.f32	s1, s3, s6
    }
    
    while(n--)
 8021210:	1e4c      	subs	r4, r1, #1
 8021212:	2900      	cmp	r1, #0
 8021214:	d05a      	beq.n	80212cc <tSOLAD_ioSamples+0x190>
 8021216:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
            {
                xfadelength = readlag / limitfactor;
                if(xfadelength < 1) xfadelength = 1;
                xfadestep = xfadespeed / xfadelength;
                
                jump = -period;         // jump backward
 802121a:	eeb1 8a63 	vneg.f32	s16, s7
 802121e:	ee82 0a85 	vdiv.f32	s0, s5, s10
        if(readlag < limit)  // check if read pointer should jump backward...
 8021222:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8021226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802122a:	dd0b      	ble.n	8021244 <tSOLAD_ioSamples+0x108>
            if((xfadevalue < 0) | (readlag < 0)) // ...but try not to interrupt crossfade
 802122c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
                xfadelength = readlag / limitfactor;
 8021230:	ee60 6a27 	vmul.f32	s13, s0, s15
            if((xfadevalue < 0) | (readlag < 0)) // ...but try not to interrupt crossfade
 8021234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021238:	d465      	bmi.n	8021306 <tSOLAD_ioSamples+0x1ca>
 802123a:	eef5 7a40 	vcmp.f32	s15, #0.0
 802123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021242:	d460      	bmi.n	8021306 <tSOLAD_ioSamples+0x1ca>
                readlag += period;      // increase read pointer lag
                xfadevalue = 1;         // start crossfade
            }
        }
        
        readindex = refindex - readlag;
 8021244:	ee76 6a67 	vsub.f32	s13, s12, s15
        outputsample = read_sample(w, readindex);
 8021248:	6a03      	ldr	r3, [r0, #32]
        
        if(xfadevalue > 0)
 802124a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
        {
            outputsample *= (1 - xfadevalue);
 802124e:	ee72 8ac7 	vsub.f32	s17, s5, s14
            outputsample += read_sample(w, readindex - jump) * xfadevalue;
 8021252:	ee36 4ae5 	vsub.f32	s8, s13, s11
}

// read one sample from delay buffer, with linear interpolation
static inline float read_sample(_tSOLAD* const w, float floatindex)
{
    int index = (int)floatindex;
 8021256:	eefd 4ae6 	vcvt.s32.f32	s9, s13
        if(xfadevalue > 0)
 802125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int index = (int)floatindex;
 802125e:	eebd 5ac4 	vcvt.s32.f32	s10, s8
    float fraction = floatindex - (float)index;
    float *buf = w->delaybuf;
    index &= LOOPMASK;
 8021262:	ee14 1a90 	vmov	r1, s9
    float fraction = floatindex - (float)index;
 8021266:	eef8 4ae4 	vcvt.f32.s32	s9, s9
    index &= LOOPMASK;
 802126a:	f3c1 010b 	ubfx	r1, r1, #0, #12
 802126e:	ee15 6a10 	vmov	r6, s10
    float fraction = floatindex - (float)index;
 8021272:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 8021276:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    float fraction = floatindex - (float)index;
 802127a:	ee76 6ae4 	vsub.f32	s13, s13, s9
    index &= LOOPMASK;
 802127e:	f3c6 060b 	ubfx	r6, r6, #0, #12
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 8021282:	edd1 4a00 	vldr	s9, [r1]
    float fraction = floatindex - (float)index;
 8021286:	ee34 5a45 	vsub.f32	s10, s8, s10
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 802128a:	ed91 4a01 	vldr	s8, [r1, #4]
 802128e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8021292:	ee34 4a64 	vsub.f32	s8, s8, s9
 8021296:	eee6 4a84 	vfma.f32	s9, s13, s8
        if(xfadevalue > 0)
 802129a:	dd2a      	ble.n	80212f2 <tSOLAD_ioSamples+0x1b6>
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 802129c:	edd3 6a00 	vldr	s13, [r3]
    while(n--)
 80212a0:	3c01      	subs	r4, #1
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 80212a2:	ed93 4a01 	vldr	s8, [r3, #4]
        refindex += 1;
 80212a6:	ee36 6a22 	vadd.f32	s12, s12, s5
    while(n--)
 80212aa:	1c67      	adds	r7, r4, #1
        readlag -= readlagstep;
 80212ac:	ee77 7ac2 	vsub.f32	s15, s15, s4
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 80212b0:	ee34 4a66 	vsub.f32	s8, s8, s13
 80212b4:	eee5 6a04 	vfma.f32	s13, s10, s8
            outputsample += read_sample(w, readindex - jump) * xfadevalue;
 80212b8:	ee66 6a87 	vmul.f32	s13, s13, s14
            xfadevalue -= xfadestep;
 80212bc:	ee37 7a60 	vsub.f32	s14, s14, s1
            outputsample += read_sample(w, readindex - jump) * xfadevalue;
 80212c0:	eee4 6aa8 	vfma.f32	s13, s9, s17
        *out++ = outputsample;
 80212c4:	ece2 6a01 	vstmia	r2!, {s13}
    while(n--)
 80212c8:	d1ab      	bne.n	8021222 <tSOLAD_ioSamples+0xe6>
 80212ca:	8883      	ldrh	r3, [r0, #4]
    w->readlag = readlag;               // state variables
 80212cc:	edc0 7a03 	vstr	s15, [r0, #12]
    w->jump = jump;
 80212d0:	edc0 5a05 	vstr	s11, [r0, #20]
    w->xfadelength = xfadelength;
 80212d4:	ed80 3a06 	vstr	s6, [r0, #24]
    w->xfadevalue = xfadevalue;
 80212d8:	ed80 7a07 	vstr	s14, [r0, #28]
    w->timeindex += blocksize;
 80212dc:	441d      	add	r5, r3
    w->timeindex &= LOOPMASK;
 80212de:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80212e2:	8085      	strh	r5, [r0, #4]
}
 80212e4:	ecbd 8b02 	vpop	{d8}
 80212e8:	bcf0      	pop	{r4, r5, r6, r7}
 80212ea:	4770      	bx	lr
    float xfadestep = xfadespeed / xfadelength;
 80212ec:	eec1 0a83 	vdiv.f32	s1, s3, s6
 80212f0:	e78e      	b.n	8021210 <tSOLAD_ioSamples+0xd4>
    while(n--)
 80212f2:	3c01      	subs	r4, #1
        *out++ = outputsample;
 80212f4:	ece2 4a01 	vstmia	r2!, {s9}
        refindex += 1;
 80212f8:	ee36 6a22 	vadd.f32	s12, s12, s5
    while(n--)
 80212fc:	1c66      	adds	r6, r4, #1
        readlag -= readlagstep;
 80212fe:	ee77 7ac2 	vsub.f32	s15, s15, s4
    while(n--)
 8021302:	d18e      	bne.n	8021222 <tSOLAD_ioSamples+0xe6>
 8021304:	e7e1      	b.n	80212ca <tSOLAD_ioSamples+0x18e>
 8021306:	fe86 3aa2 	vmaxnm.f32	s6, s13, s5
                jump = -period;         // jump backward
 802130a:	eef0 5a48 	vmov.f32	s11, s16
                xfadestep = xfadespeed / xfadelength;
 802130e:	eec1 0a83 	vdiv.f32	s1, s3, s6
                readlag += period;      // increase read pointer lag
 8021312:	ee77 7aa3 	vadd.f32	s15, s15, s7
                xfadevalue = 1;         // start crossfade
 8021316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802131a:	e793      	b.n	8021244 <tSOLAD_ioSamples+0x108>
    if(pitchfactor > 0.5) xfadespeed = pitchfactor;
 802131c:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    while(n--)
 8021320:	1e4c      	subs	r4, r1, #1
    float readlagstep = 1 - pitchfactor;
 8021322:	ee72 1a66 	vsub.f32	s3, s4, s13
    else xfadespeed = 1 - pitchfactor;
 8021326:	eef4 6ac5 	vcmpe.f32	s13, s10
 802132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802132e:	fe76 6aa1 	vselgt.f32	s13, s13, s3
    xfadestep = xfadespeed / xfadelength;
 8021332:	eec6 0a83 	vdiv.f32	s1, s13, s6
    while(n--)
 8021336:	2900      	cmp	r1, #0
 8021338:	d053      	beq.n	80213e2 <tSOLAD_ioSamples+0x2a6>
        refindex += 1;
 802133a:	eef0 2a42 	vmov.f32	s5, s4
                xfadelength = period - 1;
 802133e:	ee33 2ac2 	vsub.f32	s4, s7, s4
                xfadestep = xfadespeed / xfadelength;
 8021342:	ee86 0a82 	vdiv.f32	s0, s13, s4
            if(xfadevalue <= 0)      // ...but do not interrupt crossfade
 8021346:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802134e:	d804      	bhi.n	802135a <tSOLAD_ioSamples+0x21e>
 8021350:	eef4 7a63 	vcmp.f32	s15, s7
 8021354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021358:	dc56      	bgt.n	8021408 <tSOLAD_ioSamples+0x2cc>
        readindex = refindex - readlag;
 802135a:	ee36 5a67 	vsub.f32	s10, s12, s15
        outputsample = read_sample(w, readindex);
 802135e:	6a01      	ldr	r1, [r0, #32]
        if(xfadevalue > 0)
 8021360:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    int index = (int)floatindex;
 8021364:	eefd 6ac5 	vcvt.s32.f32	s13, s10
        if(xfadevalue > 0)
 8021368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    index &= LOOPMASK;
 802136c:	ee16 3a90 	vmov	r3, s13
    float fraction = floatindex - (float)index;
 8021370:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    index &= LOOPMASK;
 8021374:	f3c3 030b 	ubfx	r3, r3, #0, #12
    float fraction = floatindex - (float)index;
 8021378:	ee75 6a66 	vsub.f32	s13, s10, s13
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 802137c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021380:	edd3 4a00 	vldr	s9, [r3]
 8021384:	ed93 4a01 	vldr	s8, [r3, #4]
 8021388:	ee34 4a64 	vsub.f32	s8, s8, s9
 802138c:	eee6 4a84 	vfma.f32	s9, s13, s8
        if(xfadevalue > 0)
 8021390:	dd30      	ble.n	80213f4 <tSOLAD_ioSamples+0x2b8>
            outputsample += read_sample(w, readindex - jump) * xfadevalue;  // fadeout
 8021392:	ee35 5a65 	vsub.f32	s10, s10, s11
    while(n--)
 8021396:	3c01      	subs	r4, #1
            outputsample *= (1 - xfadevalue);                               // fadein
 8021398:	ee32 1ac7 	vsub.f32	s2, s5, s14
        refindex += 1;
 802139c:	ee36 6a22 	vadd.f32	s12, s12, s5
    int index = (int)floatindex;
 80213a0:	eefd 6ac5 	vcvt.s32.f32	s13, s10
        readlag += readlagstep;
 80213a4:	ee77 7aa1 	vadd.f32	s15, s15, s3
    index &= LOOPMASK;
 80213a8:	ee16 3a90 	vmov	r3, s13
    float fraction = floatindex - (float)index;
 80213ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    index &= LOOPMASK;
 80213b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    float fraction = floatindex - (float)index;
 80213b4:	ee35 5a66 	vsub.f32	s10, s10, s13
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 80213b8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80213bc:	edd1 6a00 	vldr	s13, [r1]
 80213c0:	ed91 4a01 	vldr	s8, [r1, #4]
    while(n--)
 80213c4:	1c61      	adds	r1, r4, #1
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 80213c6:	ee34 4a66 	vsub.f32	s8, s8, s13
 80213ca:	eee5 6a04 	vfma.f32	s13, s10, s8
            outputsample += read_sample(w, readindex - jump) * xfadevalue;  // fadeout
 80213ce:	ee66 6a87 	vmul.f32	s13, s13, s14
            xfadevalue -= xfadestep;
 80213d2:	ee37 7a60 	vsub.f32	s14, s14, s1
            outputsample += read_sample(w, readindex - jump) * xfadevalue;  // fadeout
 80213d6:	eee4 6a81 	vfma.f32	s13, s9, s2
        *out++ = outputsample;
 80213da:	ece2 6a01 	vstmia	r2!, {s13}
    while(n--)
 80213de:	d1b2      	bne.n	8021346 <tSOLAD_ioSamples+0x20a>
 80213e0:	8883      	ldrh	r3, [r0, #4]
    w->jump = jump;                 // state variables
 80213e2:	edc0 5a05 	vstr	s11, [r0, #20]
    w->readlag = readlag;
 80213e6:	edc0 7a03 	vstr	s15, [r0, #12]
    w->xfadevalue = xfadevalue;
 80213ea:	ed80 7a07 	vstr	s14, [r0, #28]
    w->xfadelength = xfadelength;
 80213ee:	ed80 3a06 	vstr	s6, [r0, #24]
 80213f2:	e773      	b.n	80212dc <tSOLAD_ioSamples+0x1a0>
    while(n--)
 80213f4:	3c01      	subs	r4, #1
        *out++ = outputsample;
 80213f6:	ece2 4a01 	vstmia	r2!, {s9}
        refindex += 1;
 80213fa:	ee36 6a22 	vadd.f32	s12, s12, s5
    while(n--)
 80213fe:	1c63      	adds	r3, r4, #1
        readlag += readlagstep;
 8021400:	ee77 7aa1 	vadd.f32	s15, s15, s3
    while(n--)
 8021404:	d19f      	bne.n	8021346 <tSOLAD_ioSamples+0x20a>
 8021406:	e7eb      	b.n	80213e0 <tSOLAD_ioSamples+0x2a4>
                jump = period;                           // jump forward
 8021408:	eef0 5a63 	vmov.f32	s11, s7
 802140c:	e001      	b.n	8021412 <tSOLAD_ioSamples+0x2d6>
                while((jump * 2) < readlag) jump *= 2;   // use available space
 802140e:	eef0 5a47 	vmov.f32	s11, s14
 8021412:	ee35 7aa5 	vadd.f32	s14, s11, s11
 8021416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802141e:	d4f6      	bmi.n	802140e <tSOLAD_ioSamples+0x2d2>
                readlag -= jump;                         // reduce read pointer lag
 8021420:	ee77 7ae5 	vsub.f32	s15, s15, s11
                xfadestep = xfadespeed / xfadelength;
 8021424:	eef0 0a40 	vmov.f32	s1, s0
                xfadevalue = 1;                          // start crossfade
 8021428:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                xfadelength = period - 1;
 802142c:	eeb0 3a42 	vmov.f32	s6, s4
 8021430:	e793      	b.n	802135a <tSOLAD_ioSamples+0x21e>
 8021432:	bf00      	nop
 8021434:	3f7d70a4 	.word	0x3f7d70a4

08021438 <tRetune_initToPool>:
{
    tRetune_initToPool(rt, numVoices, bufSize, frameSize, &leaf.mempool);
}

void tRetune_initToPool (tRetune* const rt, int numVoices, int bufSize, int frameSize, tMempool* const mp)
{
 8021438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802143c:	ed2d 8b02 	vpush	{d8}
 8021440:	b085      	sub	sp, #20
 8021442:	4604      	mov	r4, r0
 8021444:	4689      	mov	r9, r1
    _tMempool* m = *mp;
    _tRetune* r = *rt = (_tRetune*) mpool_alloc(sizeof(_tRetune), m);
 8021446:	203c      	movs	r0, #60	; 0x3c
{
 8021448:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 802144c:	4617      	mov	r7, r2
 802144e:	469a      	mov	sl, r3
    _tMempool* m = *mp;
 8021450:	f8d8 6000 	ldr.w	r6, [r8]
    _tRetune* r = *rt = (_tRetune*) mpool_alloc(sizeof(_tRetune), m);
 8021454:	4631      	mov	r1, r6
 8021456:	f003 f993 	bl	8024780 <mpool_alloc>
 802145a:	4605      	mov	r5, r0
 802145c:	6020      	str	r0, [r4, #0]
    
    r->bufSize = bufSize;
    r->frameSize = frameSize;
    r->numVoices = numVoices;
    
    r->inBuffer = (float*) mpool_calloc(sizeof(float) * r->bufSize, m);
 802145e:	4631      	mov	r1, r6
    r->mempool = *mp;
 8021460:	f8d8 2000 	ldr.w	r2, [r8]
    r->frameSize = frameSize;
 8021464:	f8c0 a018 	str.w	sl, [r0, #24]
    r->inBuffer = (float*) mpool_calloc(sizeof(float) * r->bufSize, m);
 8021468:	00b8      	lsls	r0, r7, #2
    r->mempool = *mp;
 802146a:	602a      	str	r2, [r5, #0]
    r->bufSize = bufSize;
 802146c:	61ef      	str	r7, [r5, #28]
    r->numVoices = numVoices;
 802146e:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
    r->inBuffer = (float*) mpool_calloc(sizeof(float) * r->bufSize, m);
 8021472:	f003 f9db 	bl	802482c <mpool_calloc>
    r->outBuffers = (float**) mpool_calloc(sizeof(float*) * r->numVoices, m);
 8021476:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8021478:	4631      	mov	r1, r6
    r->inBuffer = (float*) mpool_calloc(sizeof(float) * r->bufSize, m);
 802147a:	60e8      	str	r0, [r5, #12]
    r->outBuffers = (float**) mpool_calloc(sizeof(float*) * r->numVoices, m);
 802147c:	0098      	lsls	r0, r3, #2
 802147e:	f003 f9d5 	bl	802482c <mpool_calloc>
    
    r->hopSize = DEFHOPSIZE;
 8021482:	f04f 1240 	mov.w	r2, #4194368	; 0x400040
    r->windowSize = DEFWINDOWSIZE;
    r->fba = FBA;
 8021486:	2314      	movs	r3, #20
    r->outBuffers = (float**) mpool_calloc(sizeof(float*) * r->numVoices, m);
 8021488:	6128      	str	r0, [r5, #16]
    r->hopSize = DEFHOPSIZE;
 802148a:	622a      	str	r2, [r5, #32]
void tRetune_setTimeConstant(tRetune* const rt, float tc)
{
    _tRetune* r = *rt;
    
    r->timeConstant = tc;
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 802148c:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
    r->fba = FBA;
 8021490:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 8021494:	4b50      	ldr	r3, [pc, #320]	; (80215d8 <tRetune_initToPool+0x1a0>)
    _tRetune* r = *rt;
 8021496:	6824      	ldr	r4, [r4, #0]
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 8021498:	ed93 0a01 	vldr	s0, [r3, #4]
 802149c:	8c23      	ldrh	r3, [r4, #32]
 802149e:	ee20 0a07 	vmul.f32	s0, s0, s14
 80214a2:	ee07 3a90 	vmov	s15, r3
    r->timeConstant = tc;
 80214a6:	4b4d      	ldr	r3, [pc, #308]	; (80215dc <tRetune_initToPool+0x1a4>)
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 80214a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    r->timeConstant = tc;
 80214ac:	62e3      	str	r3, [r4, #44]	; 0x2c
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 80214ae:	ee20 0a27 	vmul.f32	s0, s0, s15
 80214b2:	f006 f9a3 	bl	80277fc <expf>
    r->inputPeriod = 0.0f;
 80214b6:	2300      	movs	r3, #0
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 80214b8:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
    r->ps = (tPitchShift*) mpool_calloc(sizeof(tPitchShift) * r->numVoices, m);
 80214bc:	4631      	mov	r1, r6
 80214be:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    r->inputPeriod = 0.0f;
 80214c0:	636b      	str	r3, [r5, #52]	; 0x34
    r->ps = (tPitchShift*) mpool_calloc(sizeof(tPitchShift) * r->numVoices, m);
 80214c2:	0080      	lsls	r0, r0, #2
 80214c4:	f003 f9b2 	bl	802482c <mpool_calloc>
    r->pitchFactor = (float*) mpool_calloc(sizeof(float) * r->numVoices, m);
 80214c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
    r->ps = (tPitchShift*) mpool_calloc(sizeof(tPitchShift) * r->numVoices, m);
 80214ca:	60a8      	str	r0, [r5, #8]
    r->pitchFactor = (float*) mpool_calloc(sizeof(float) * r->numVoices, m);
 80214cc:	4631      	mov	r1, r6
 80214ce:	0098      	lsls	r0, r3, #2
 80214d0:	f003 f9ac 	bl	802482c <mpool_calloc>
    r->tickOutput = (float*) mpool_calloc(sizeof(float) * r->numVoices, m);
 80214d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
    r->pitchFactor = (float*) mpool_calloc(sizeof(float) * r->numVoices, m);
 80214d6:	62a8      	str	r0, [r5, #40]	; 0x28
    r->tickOutput = (float*) mpool_calloc(sizeof(float) * r->numVoices, m);
 80214d8:	4631      	mov	r1, r6
 80214da:	0098      	lsls	r0, r3, #2
 80214dc:	f003 f9a6 	bl	802482c <mpool_calloc>
    for (int i = 0; i < r->numVoices; ++i)
 80214e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
    r->tickOutput = (float*) mpool_calloc(sizeof(float) * r->numVoices, m);
 80214e2:	6168      	str	r0, [r5, #20]
    for (int i = 0; i < r->numVoices; ++i)
 80214e4:	2b00      	cmp	r3, #0
 80214e6:	dd0c      	ble.n	8021502 <tRetune_initToPool+0xca>
 80214e8:	2400      	movs	r4, #0
        r->outBuffers[i] = (float*) mpool_calloc(sizeof(float) * r->bufSize, m);
 80214ea:	69e8      	ldr	r0, [r5, #28]
 80214ec:	4631      	mov	r1, r6
 80214ee:	692f      	ldr	r7, [r5, #16]
 80214f0:	0080      	lsls	r0, r0, #2
 80214f2:	f003 f99b 	bl	802482c <mpool_calloc>
 80214f6:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
    for (int i = 0; i < r->numVoices; ++i)
 80214fa:	3401      	adds	r4, #1
 80214fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80214fe:	42a3      	cmp	r3, r4
 8021500:	dcf3      	bgt.n	80214ea <tRetune_initToPool+0xb2>
    tPeriodDetection_initToPool(&r->pd, r->inBuffer, r->outBuffers[0], r->bufSize, r->frameSize, mp);
 8021502:	692a      	ldr	r2, [r5, #16]
 8021504:	1d28      	adds	r0, r5, #4
 8021506:	69eb      	ldr	r3, [r5, #28]
 8021508:	6812      	ldr	r2, [r2, #0]
 802150a:	68e9      	ldr	r1, [r5, #12]
 802150c:	f8cd 8004 	str.w	r8, [sp, #4]
 8021510:	69ac      	ldr	r4, [r5, #24]
 8021512:	9003      	str	r0, [sp, #12]
 8021514:	9400      	str	r4, [sp, #0]
 8021516:	f7fe f8e1 	bl	801f6dc <tPeriodDetection_initToPool>
    for (int i = 0; i < r->numVoices; ++i)
 802151a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802151c:	2b00      	cmp	r3, #0
 802151e:	dd56      	ble.n	80215ce <tRetune_initToPool+0x196>
 8021520:	2700      	movs	r7, #0
    w->period = INITPERIOD;
 8021522:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 80215e0 <tRetune_initToPool+0x1a8>
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 8021526:	eddf 8a2f 	vldr	s17, [pc, #188]	; 80215e4 <tRetune_initToPool+0x1ac>
        tPitchShift_initToPool(&r->ps[i], &r->pd, r->outBuffers[i], r->bufSize, mp);
 802152a:	692b      	ldr	r3, [r5, #16]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 802152c:	2038      	movs	r0, #56	; 0x38
    _tMempool* m = *mp;
 802152e:	f8d8 a000 	ldr.w	sl, [r8]
    ps->pitchFactor = 1.0f;
 8021532:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
        tPitchShift_initToPool(&r->ps[i], &r->pd, r->outBuffers[i], r->bufSize, mp);
 8021536:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 802153a:	4651      	mov	r1, sl
        tPitchShift_initToPool(&r->ps[i], &r->pd, r->outBuffers[i], r->bufSize, mp);
 802153c:	69ee      	ldr	r6, [r5, #28]
 802153e:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8021542:	9302      	str	r3, [sp, #8]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 8021544:	f003 f972 	bl	802482c <mpool_calloc>
    ps->outBuffer = out;
 8021548:	9902      	ldr	r1, [sp, #8]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 802154a:	4604      	mov	r4, r0
    ps->curBlock = 1;
 802154c:	f04f 0c01 	mov.w	ip, #1
    ps->lastBlock = 0;
 8021550:	2200      	movs	r2, #0
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 8021552:	f849 4027 	str.w	r4, [r9, r7, lsl #2]
    _tSOLAD* w = *wp = (_tSOLAD*) mpool_calloc(sizeof(_tSOLAD), m);
 8021556:	2024      	movs	r0, #36	; 0x24
    ps->mempool = m;
 8021558:	f8c4 a000 	str.w	sl, [r4]
    for (int i = 0; i < r->numVoices; ++i)
 802155c:	4467      	add	r7, ip
    _tPeriodDetection* p = *pd;
 802155e:	686b      	ldr	r3, [r5, #4]
    ps->outBuffer = out;
 8021560:	6121      	str	r1, [r4, #16]
    ps->p = pd;
 8021562:	9903      	ldr	r1, [sp, #12]
    ps->bufSize = bufSize;
 8021564:	61a6      	str	r6, [r4, #24]
    ps->p = pd;
 8021566:	60e1      	str	r1, [r4, #12]
    ps->frameSize = p->frameSize;
 8021568:	695b      	ldr	r3, [r3, #20]
    ps->curBlock = 1;
 802156a:	f8c4 c020 	str.w	ip, [r4, #32]
    ps->frameSize = p->frameSize;
 802156e:	6163      	str	r3, [r4, #20]
    ps->pitchFactor = 1.0f;
 8021570:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
    ps->framesPerBuffer = ps->bufSize / ps->frameSize;
 8021574:	fb96 f6f3 	sdiv	r6, r6, r3
    ps->index = 0;
 8021578:	e9c4 2209 	strd	r2, r2, [r4, #36]	; 0x24
    ps->framesPerBuffer = ps->bufSize / ps->frameSize;
 802157c:	61e6      	str	r6, [r4, #28]
    _tMempool* m = *mp;
 802157e:	f8d8 a000 	ldr.w	sl, [r8]
    _tSOLAD* w = *wp = (_tSOLAD*) mpool_calloc(sizeof(_tSOLAD), m);
 8021582:	4651      	mov	r1, sl
 8021584:	f003 f952 	bl	802482c <mpool_calloc>
 8021588:	4606      	mov	r6, r0
    w->delaybuf = (float*) mpool_calloc(sizeof(float) * (LOOPSIZE+16), m);
 802158a:	4651      	mov	r1, sl
 802158c:	f244 0040 	movw	r0, #16448	; 0x4040
    _tSOLAD* w = *wp = (_tSOLAD*) mpool_calloc(sizeof(_tSOLAD), m);
 8021590:	6066      	str	r6, [r4, #4]
    w->mempool = m;
 8021592:	f8c6 a000 	str.w	sl, [r6]
    w->pitchfactor = 1.;
 8021596:	f8c6 b008 	str.w	fp, [r6, #8]
    w->delaybuf = (float*) mpool_calloc(sizeof(float) * (LOOPSIZE+16), m);
 802159a:	f003 f947 	bl	802482c <mpool_calloc>
    w->xfadevalue = -1;
 802159e:	4a12      	ldr	r2, [pc, #72]	; (80215e8 <tRetune_initToPool+0x1b0>)
    w->timeindex = 0;
 80215a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    w->delaybuf = (float*) mpool_calloc(sizeof(float) * (LOOPSIZE+16), m);
 80215a4:	6230      	str	r0, [r6, #32]
    w->xfadevalue = -1;
 80215a6:	61f2      	str	r2, [r6, #28]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 80215a8:	f104 0008 	add.w	r0, r4, #8
    w->timeindex = 0;
 80215ac:	6073      	str	r3, [r6, #4]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 80215ae:	4641      	mov	r1, r8
    w->period = INITPERIOD;
 80215b0:	ed86 8a04 	vstr	s16, [r6, #16]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 80215b4:	eeb0 0a68 	vmov.f32	s0, s17
    w->readlag = INITPERIOD;
 80215b8:	ed86 8a03 	vstr	s16, [r6, #12]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 80215bc:	f001 fd5a 	bl	8023074 <tHighpass_initToPool>
    _tSOLAD* w = *wp;
 80215c0:	6863      	ldr	r3, [r4, #4]
    w->pitchfactor = pitchfactor;
 80215c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80215c6:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < r->numVoices; ++i)
 80215c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80215ca:	42bb      	cmp	r3, r7
 80215cc:	dcad      	bgt.n	802152a <tRetune_initToPool+0xf2>
}
 80215ce:	b005      	add	sp, #20
 80215d0:	ecbd 8b02 	vpop	{d8}
 80215d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215d8:	200194a0 	.word	0x200194a0
 80215dc:	42c80000 	.word	0x42c80000
 80215e0:	42800000 	.word	0x42800000
 80215e4:	42200000 	.word	0x42200000
 80215e8:	bf800000 	.word	0xbf800000

080215ec <tRetune_init>:
{
 80215ec:	b510      	push	{r4, lr}
    tRetune_initToPool(rt, numVoices, bufSize, frameSize, &leaf.mempool);
 80215ee:	4c03      	ldr	r4, [pc, #12]	; (80215fc <tRetune_init+0x10>)
{
 80215f0:	b082      	sub	sp, #8
    tRetune_initToPool(rt, numVoices, bufSize, frameSize, &leaf.mempool);
 80215f2:	9400      	str	r4, [sp, #0]
 80215f4:	f7ff ff20 	bl	8021438 <tRetune_initToPool>
}
 80215f8:	b002      	add	sp, #8
 80215fa:	bd10      	pop	{r4, pc}
 80215fc:	200194b8 	.word	0x200194b8

08021600 <tRetune_free>:
{
 8021600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tRetune* r = *rt;
 8021602:	6804      	ldr	r4, [r0, #0]
    tPeriodDetection_free(&r->pd);
 8021604:	1d20      	adds	r0, r4, #4
 8021606:	f7fe f8c7 	bl	801f798 <tPeriodDetection_free>
    for (int i = 0; i < r->numVoices; ++i)
 802160a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802160c:	2b00      	cmp	r3, #0
 802160e:	dd1e      	ble.n	802164e <tRetune_free+0x4e>
 8021610:	2500      	movs	r5, #0
    _tPitchShift* ps = *psr;
 8021612:	68a3      	ldr	r3, [r4, #8]
 8021614:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
    _tSOLAD* w = *wp;
 8021618:	6877      	ldr	r7, [r6, #4]
    mpool_free((char*)w->delaybuf, w->mempool);
 802161a:	6839      	ldr	r1, [r7, #0]
 802161c:	6a38      	ldr	r0, [r7, #32]
 802161e:	f003 f957 	bl	80248d0 <mpool_free>
    mpool_free((char*)w, w->mempool);
 8021622:	6839      	ldr	r1, [r7, #0]
 8021624:	4638      	mov	r0, r7
 8021626:	f003 f953 	bl	80248d0 <mpool_free>
    tHighpass_free(&ps->hp);
 802162a:	f106 0008 	add.w	r0, r6, #8
 802162e:	f001 fd41 	bl	80230b4 <tHighpass_free>
    mpool_free((char*)ps, ps->mempool);
 8021632:	6831      	ldr	r1, [r6, #0]
 8021634:	4630      	mov	r0, r6
 8021636:	f003 f94b 	bl	80248d0 <mpool_free>
        mpool_free((char*)r->outBuffers[i], r->mempool);
 802163a:	6923      	ldr	r3, [r4, #16]
 802163c:	6821      	ldr	r1, [r4, #0]
 802163e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    for (int i = 0; i < r->numVoices; ++i)
 8021642:	3501      	adds	r5, #1
        mpool_free((char*)r->outBuffers[i], r->mempool);
 8021644:	f003 f944 	bl	80248d0 <mpool_free>
    for (int i = 0; i < r->numVoices; ++i)
 8021648:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802164a:	42ab      	cmp	r3, r5
 802164c:	dce1      	bgt.n	8021612 <tRetune_free+0x12>
    mpool_free((char*)r->tickOutput, r->mempool);
 802164e:	6821      	ldr	r1, [r4, #0]
 8021650:	6960      	ldr	r0, [r4, #20]
 8021652:	f003 f93d 	bl	80248d0 <mpool_free>
    mpool_free((char*)r->pitchFactor, r->mempool);
 8021656:	6821      	ldr	r1, [r4, #0]
 8021658:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802165a:	f003 f939 	bl	80248d0 <mpool_free>
    mpool_free((char*)r->ps, r->mempool);
 802165e:	6821      	ldr	r1, [r4, #0]
 8021660:	68a0      	ldr	r0, [r4, #8]
 8021662:	f003 f935 	bl	80248d0 <mpool_free>
    mpool_free((char*)r->inBuffer, r->mempool);
 8021666:	6821      	ldr	r1, [r4, #0]
 8021668:	68e0      	ldr	r0, [r4, #12]
 802166a:	f003 f931 	bl	80248d0 <mpool_free>
    mpool_free((char*)r->outBuffers, r->mempool);
 802166e:	6821      	ldr	r1, [r4, #0]
 8021670:	6920      	ldr	r0, [r4, #16]
 8021672:	f003 f92d 	bl	80248d0 <mpool_free>
    mpool_free((char*)r, r->mempool);
 8021676:	6821      	ldr	r1, [r4, #0]
 8021678:	4620      	mov	r0, r4
}
 802167a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    mpool_free((char*)r, r->mempool);
 802167e:	f003 b927 	b.w	80248d0 <mpool_free>
 8021682:	bf00      	nop

08021684 <tRetune_tick>:
{
 8021684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021688:	ed2d 8b04 	vpush	{d8-d9}
    _tRetune* r = *rt;
 802168c:	6807      	ldr	r7, [r0, #0]
{
 802168e:	b083      	sub	sp, #12
    r->inputPeriod = tPeriodDetection_tick(&r->pd, sample);
 8021690:	1d38      	adds	r0, r7, #4
 8021692:	f7fe f8a3 	bl	801f7dc <tPeriodDetection_tick>
    for (int v = 0; v < r->numVoices; ++v)
 8021696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    r->inputPeriod = tPeriodDetection_tick(&r->pd, sample);
 8021698:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    for (int v = 0; v < r->numVoices; ++v)
 802169c:	2b00      	cmp	r3, #0
 802169e:	f340 8083 	ble.w	80217a8 <tRetune_tick+0x124>
 80216a2:	2500      	movs	r5, #0
    if(period > MAXPERIOD) period = MAXPERIOD;
 80216a4:	ed9f 9a5f 	vldr	s18, [pc, #380]	; 8021824 <tRetune_tick+0x1a0>
    return (p->fba == 0 && (p->max > 60 && p->deltamax > 6)) ? 1 : 0;
 80216a8:	eddf 9a5f 	vldr	s19, [pc, #380]	; 8021828 <tRetune_tick+0x1a4>
 80216ac:	e005      	b.n	80216ba <tRetune_tick+0x36>
        r->tickOutput[v] = tPitchShift_shift(&r->ps[v]);
 80216ae:	ed86 8a00 	vstr	s16, [r6]
    for (int v = 0; v < r->numVoices; ++v)
 80216b2:	3501      	adds	r5, #1
 80216b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80216b6:	42ab      	cmp	r3, r5
 80216b8:	dd76      	ble.n	80217a8 <tRetune_tick+0x124>
    _tPitchShift* ps = *psr;
 80216ba:	68bb      	ldr	r3, [r7, #8]
        r->tickOutput[v] = tPitchShift_shift(&r->ps[v]);
 80216bc:	697e      	ldr	r6, [r7, #20]
    _tPitchShift* ps = *psr;
 80216be:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        r->tickOutput[v] = tPitchShift_shift(&r->ps[v]);
 80216c2:	eb06 0685 	add.w	r6, r6, r5, lsl #2
    _tPeriodDetection* p = *ps->p;
 80216c6:	68e2      	ldr	r2, [r4, #12]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 80216c8:	f104 0008 	add.w	r0, r4, #8
 80216cc:	6923      	ldr	r3, [r4, #16]
    _tPeriodDetection* p = *ps->p;
 80216ce:	6812      	ldr	r2, [r2, #0]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 80216d0:	6b11      	ldr	r1, [r2, #48]	; 0x30
    _tPeriodDetection* p = *ps->p;
 80216d2:	9201      	str	r2, [sp, #4]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 80216d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    i = p->i;
 80216d8:	f8d2 8028 	ldr.w	r8, [r2, #40]	; 0x28
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 80216dc:	ed93 0a00 	vldr	s0, [r3]
 80216e0:	f001 fcfc 	bl	80230dc <tHighpass_tick>
    if (p->indexstore >= ps->frameSize)
 80216e4:	9a01      	ldr	r2, [sp, #4]
 80216e6:	6963      	ldr	r3, [r4, #20]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 80216e8:	eeb0 8a40 	vmov.f32	s16, s0
    if (p->indexstore >= ps->frameSize)
 80216ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80216ee:	429a      	cmp	r2, r3
 80216f0:	dbdd      	blt.n	80216ae <tRetune_tick+0x2a>
        period = tPeriodDetection_getPeriod(&p);
 80216f2:	a801      	add	r0, sp, #4
 80216f4:	f7fe f900 	bl	801f8f8 <tPeriodDetection_getPeriod>
    _tPeriodDetection* p = *ps->p;
 80216f8:	68e3      	ldr	r3, [r4, #12]
        period = tPeriodDetection_getPeriod(&p);
 80216fa:	eef0 8a40 	vmov.f32	s17, s0
    _tPeriodDetection* p = *ps->p;
 80216fe:	f8d3 9000 	ldr.w	r9, [r3]
    envout = tEnvPD_tick(&p->env);
 8021702:	f109 0004 	add.w	r0, r9, #4
 8021706:	f7fd fced 	bl	801f0e4 <tEnvPD_tick>
    if (envout >= 1.0f)
 802170a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802170e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021716:	db0e      	blt.n	8021736 <tRetune_tick+0xb2>
        p->lastmax = p->max;
 8021718:	edd9 7a13 	vldr	s15, [r9, #76]	; 0x4c
        if (envout > p->max)
 802171c:	eeb4 0ae7 	vcmpe.f32	s0, s15
        p->lastmax = p->max;
 8021720:	edc9 7a14 	vstr	s15, [r9, #80]	; 0x50
 8021724:	ee30 7a67 	vsub.f32	s14, s0, s15
        if (envout > p->max)
 8021728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802172c:	dd6e      	ble.n	802180c <tRetune_tick+0x188>
            p->max = envout;
 802172e:	ed89 0a13 	vstr	s0, [r9, #76]	; 0x4c
        p->deltamax = p->max - p->lastmax;
 8021732:	ed89 7a15 	vstr	s14, [r9, #84]	; 0x54
    p->fba = p->fba ? (p->fba - 1) : 0;
 8021736:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
 802173a:	9901      	ldr	r1, [sp, #4]
 802173c:	2b00      	cmp	r3, #0
 802173e:	d039      	beq.n	80217b4 <tRetune_tick+0x130>
 8021740:	3b01      	subs	r3, #1
 8021742:	b2db      	uxtb	r3, r3
 8021744:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40
    return (p->fba == 0 && (p->max > 60 && p->deltamax > 6)) ? 1 : 0;
 8021748:	b3a3      	cbz	r3, 80217b4 <tRetune_tick+0x130>
 802174a:	6862      	ldr	r2, [r4, #4]
    if(period > MAXPERIOD) period = MAXPERIOD;
 802174c:	88d3      	ldrh	r3, [r2, #6]
    if(period > MINPERIOD) w->period = period;  // ignore period when too small
 802174e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    if(period > MAXPERIOD) period = MAXPERIOD;
 8021752:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8021756:	ee00 3a10 	vmov	s0, r3
 802175a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 802175e:	ee20 0a09 	vmul.f32	s0, s0, s18
 8021762:	fe80 0a68 	vminnm.f32	s0, s0, s17
    if(period > MINPERIOD) w->period = period;  // ignore period when too small
 8021766:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802176e:	dd02      	ble.n	8021776 <tRetune_tick+0xf2>
 8021770:	ed82 0a04 	vstr	s0, [r2, #16]
 8021774:	6862      	ldr	r2, [r4, #4]
        tSOLAD_setPitchFactor(&ps->sola, ps->pitchFactor);
 8021776:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
        tSOLAD_ioSamples(&ps->sola, &(p->inBuffer[i]), &(ps->outBuffer[i]), ps->frameSize);
 802177a:	ea4f 0888 	mov.w	r8, r8, lsl #2
 802177e:	1d20      	adds	r0, r4, #4
    for (int v = 0; v < r->numVoices; ++v)
 8021780:	3501      	adds	r5, #1
    if (pitchfactor <= 0.0f) return;
 8021782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    w->pitchfactor = pitchfactor;
 802178a:	bf88      	it	hi
 802178c:	edc2 7a02 	vstrhi	s15, [r2, #8]
        tSOLAD_ioSamples(&ps->sola, &(p->inBuffer[i]), &(ps->outBuffer[i]), ps->frameSize);
 8021790:	68c9      	ldr	r1, [r1, #12]
 8021792:	6922      	ldr	r2, [r4, #16]
 8021794:	6963      	ldr	r3, [r4, #20]
 8021796:	4441      	add	r1, r8
 8021798:	4442      	add	r2, r8
 802179a:	f7ff fccf 	bl	802113c <tSOLAD_ioSamples>
        r->tickOutput[v] = tPitchShift_shift(&r->ps[v]);
 802179e:	ed86 8a00 	vstr	s16, [r6]
    for (int v = 0; v < r->numVoices; ++v)
 80217a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80217a4:	42ab      	cmp	r3, r5
 80217a6:	dc88      	bgt.n	80216ba <tRetune_tick+0x36>
}
 80217a8:	6978      	ldr	r0, [r7, #20]
 80217aa:	b003      	add	sp, #12
 80217ac:	ecbd 8b04 	vpop	{d8-d9}
 80217b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (p->fba == 0 && (p->max > 60 && p->deltamax > 6)) ? 1 : 0;
 80217b4:	edd9 7a13 	vldr	s15, [r9, #76]	; 0x4c
 80217b8:	eef4 7ae9 	vcmpe.f32	s15, s19
 80217bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217c0:	ddc3      	ble.n	802174a <tRetune_tick+0xc6>
 80217c2:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 80217c6:	ed99 7a15 	vldr	s14, [r9, #84]	; 0x54
 80217ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80217ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217d2:	ddba      	ble.n	802174a <tRetune_tick+0xc6>
            tSOLAD_setReadLag(&ps->sola, p->windowSize);
 80217d4:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
            p->fba = 5;
 80217d6:	2305      	movs	r3, #5
            tSOLAD_setReadLag(&ps->sola, p->windowSize);
 80217d8:	ee07 2a90 	vmov	s15, r2
            p->fba = 5;
 80217dc:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
    _tSOLAD* w = *wp;
 80217e0:	6862      	ldr	r2, [r4, #4]
            tSOLAD_setReadLag(&ps->sola, p->windowSize);
 80217e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if(readlag < w->readlag)               // do not jump backward, only forward
 80217e6:	ed92 7a03 	vldr	s14, [r2, #12]
 80217ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80217ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217f2:	d5ab      	bpl.n	802174c <tRetune_tick+0xc8>
        w->jump = w->readlag - readlag;
 80217f4:	ee37 7a67 	vsub.f32	s14, s14, s15
        w->xfadevalue = 1;
 80217f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        w->readlag = readlag;
 80217fc:	edc2 7a03 	vstr	s15, [r2, #12]
        w->xfadelength = readlag;
 8021800:	edc2 7a06 	vstr	s15, [r2, #24]
        w->jump = w->readlag - readlag;
 8021804:	ed82 7a05 	vstr	s14, [r2, #20]
        w->xfadevalue = 1;
 8021808:	61d3      	str	r3, [r2, #28]
 802180a:	e79e      	b.n	802174a <tRetune_tick+0xc6>
            p->deltamax = envout - p->max;
 802180c:	ed89 7a15 	vstr	s14, [r9, #84]	; 0x54
            p->max = p->max * ps->radius;
 8021810:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8021814:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8021818:	ee36 7ae7 	vsub.f32	s14, s13, s15
 802181c:	edc9 6a13 	vstr	s13, [r9, #76]	; 0x4c
 8021820:	e787      	b.n	8021732 <tRetune_tick+0xae>
 8021822:	bf00      	nop
 8021824:	3f4ccccd 	.word	0x3f4ccccd
 8021828:	42700000 	.word	0x42700000

0802182c <tRetune_setPitchFactor>:
{
 802182c:	b410      	push	{r4}
    _tRetune* r = *rt;
 802182e:	6802      	ldr	r2, [r0, #0]
    r->pitchFactor[voice] = pf;
 8021830:	008c      	lsls	r4, r1, #2
 8021832:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8021834:	4420      	add	r0, r4
 8021836:	ed80 0a00 	vstr	s0, [r0]
    tPitchShift_setPitchFactor(&r->ps[voice], r->pitchFactor[voice]);
 802183a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    _tPitchShift* ps = *psr;
 802183c:	6892      	ldr	r2, [r2, #8]
    tPitchShift_setPitchFactor(&r->ps[voice], r->pitchFactor[voice]);
 802183e:	4423      	add	r3, r4
    _tPitchShift* ps = *psr;
 8021840:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    tPitchShift_setPitchFactor(&r->ps[voice], r->pitchFactor[voice]);
 8021844:	681b      	ldr	r3, [r3, #0]
    ps->pitchFactor = pf;
 8021846:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8021848:	f85d 4b04 	ldr.w	r4, [sp], #4
 802184c:	4770      	bx	lr
 802184e:	bf00      	nop

08021850 <tRetune_setFidelityThreshold>:

void tRetune_setFidelityThreshold(tRetune* const rt, float threshold)
{
    _tRetune* r = *rt;
    
    tPeriodDetection_setFidelityThreshold(&r->pd, threshold);
 8021850:	6800      	ldr	r0, [r0, #0]
 8021852:	3004      	adds	r0, #4
 8021854:	f7fe b854 	b.w	801f900 <tPeriodDetection_setFidelityThreshold>

08021858 <tRetune_getInputPeriod>:

float tRetune_getInputPeriod(tRetune* const rt)
{
    _tRetune* r = *rt;
    
    return (r->inputPeriod * leaf.invSampleRate);
 8021858:	6802      	ldr	r2, [r0, #0]
 802185a:	4b04      	ldr	r3, [pc, #16]	; (802186c <tRetune_getInputPeriod+0x14>)
 802185c:	ed92 0a0d 	vldr	s0, [r2, #52]	; 0x34
 8021860:	edd3 7a01 	vldr	s15, [r3, #4]
}
 8021864:	ee20 0a27 	vmul.f32	s0, s0, s15
 8021868:	4770      	bx	lr
 802186a:	bf00      	nop
 802186c:	200194a0 	.word	0x200194a0

08021870 <tAutotune_initToPool>:
{
    tAutotune_initToPool(rt, numVoices, bufSize, frameSize, &leaf.mempool);
}

void tAutotune_initToPool (tAutotune* const rt, int numVoices, int bufSize, int frameSize, tMempool* const mp)
{
 8021870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021874:	ed2d 8b02 	vpush	{d8}
 8021878:	b085      	sub	sp, #20
 802187a:	4604      	mov	r4, r0
 802187c:	4689      	mov	r9, r1
    _tMempool* m = *mp;
    _tAutotune* r = *rt = (_tAutotune*) mpool_alloc(sizeof(_tAutotune), m);
 802187e:	2040      	movs	r0, #64	; 0x40
{
 8021880:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8021884:	4617      	mov	r7, r2
 8021886:	469a      	mov	sl, r3
    _tMempool* m = *mp;
 8021888:	f8d8 6000 	ldr.w	r6, [r8]
    _tAutotune* r = *rt = (_tAutotune*) mpool_alloc(sizeof(_tAutotune), m);
 802188c:	4631      	mov	r1, r6
 802188e:	f002 ff77 	bl	8024780 <mpool_alloc>
 8021892:	4605      	mov	r5, r0
 8021894:	6020      	str	r0, [r4, #0]
    
    r->bufSize = bufSize;
    r->frameSize = frameSize;
    r->numVoices = numVoices;
    
    r->inBuffer = (float*) mpool_alloc(sizeof(float) * r->bufSize, m);
 8021896:	4631      	mov	r1, r6
    r->mempool = *mp;
 8021898:	f8d8 2000 	ldr.w	r2, [r8]
    r->frameSize = frameSize;
 802189c:	f8c0 a018 	str.w	sl, [r0, #24]
    r->inBuffer = (float*) mpool_alloc(sizeof(float) * r->bufSize, m);
 80218a0:	00b8      	lsls	r0, r7, #2
    r->mempool = *mp;
 80218a2:	602a      	str	r2, [r5, #0]
    r->bufSize = bufSize;
 80218a4:	61ef      	str	r7, [r5, #28]
    r->numVoices = numVoices;
 80218a6:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
    r->inBuffer = (float*) mpool_alloc(sizeof(float) * r->bufSize, m);
 80218aa:	f002 ff69 	bl	8024780 <mpool_alloc>
    r->outBuffers = (float**) mpool_alloc(sizeof(float*) * r->numVoices, m);
 80218ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80218b0:	4631      	mov	r1, r6
    r->inBuffer = (float*) mpool_alloc(sizeof(float) * r->bufSize, m);
 80218b2:	60e8      	str	r0, [r5, #12]
    r->outBuffers = (float**) mpool_alloc(sizeof(float*) * r->numVoices, m);
 80218b4:	0098      	lsls	r0, r3, #2
 80218b6:	f002 ff63 	bl	8024780 <mpool_alloc>
    
    r->hopSize = DEFHOPSIZE;
 80218ba:	f04f 1240 	mov.w	r2, #4194368	; 0x400040
    r->windowSize = DEFWINDOWSIZE;
    r->fba = FBA;
 80218be:	2314      	movs	r3, #20
    r->outBuffers = (float**) mpool_alloc(sizeof(float*) * r->numVoices, m);
 80218c0:	6128      	str	r0, [r5, #16]
    r->hopSize = DEFHOPSIZE;
 80218c2:	622a      	str	r2, [r5, #32]
void tAutotune_setTimeConstant(tAutotune* const rt, float tc)
{
    _tAutotune* r = *rt;
    
    r->timeConstant = tc;
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 80218c4:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
    r->fba = FBA;
 80218c8:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 80218cc:	4b51      	ldr	r3, [pc, #324]	; (8021a14 <tAutotune_initToPool+0x1a4>)
    _tAutotune* r = *rt;
 80218ce:	6824      	ldr	r4, [r4, #0]
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 80218d0:	ed93 0a01 	vldr	s0, [r3, #4]
 80218d4:	8c23      	ldrh	r3, [r4, #32]
 80218d6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80218da:	ee07 3a90 	vmov	s15, r3
    r->timeConstant = tc;
 80218de:	4b4e      	ldr	r3, [pc, #312]	; (8021a18 <tAutotune_initToPool+0x1a8>)
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 80218e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    r->timeConstant = tc;
 80218e4:	62e3      	str	r3, [r4, #44]	; 0x2c
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 80218e6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80218ea:	f005 ff87 	bl	80277fc <expf>
 80218ee:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
    r->ps = (tPitchShift*) mpool_alloc(sizeof(tPitchShift) * r->numVoices, m);
 80218f2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80218f4:	4631      	mov	r1, r6
 80218f6:	0080      	lsls	r0, r0, #2
 80218f8:	f002 ff42 	bl	8024780 <mpool_alloc>
    r->freq = (float*) mpool_alloc(sizeof(float) * r->numVoices, m);
 80218fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    r->ps = (tPitchShift*) mpool_alloc(sizeof(tPitchShift) * r->numVoices, m);
 80218fe:	60a8      	str	r0, [r5, #8]
    r->freq = (float*) mpool_alloc(sizeof(float) * r->numVoices, m);
 8021900:	4631      	mov	r1, r6
 8021902:	0098      	lsls	r0, r3, #2
 8021904:	f002 ff3c 	bl	8024780 <mpool_alloc>
    r->tickOutput = (float*) mpool_alloc(sizeof(float) * r->numVoices, m);
 8021908:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    r->freq = (float*) mpool_alloc(sizeof(float) * r->numVoices, m);
 802190a:	62a8      	str	r0, [r5, #40]	; 0x28
    r->tickOutput = (float*) mpool_alloc(sizeof(float) * r->numVoices, m);
 802190c:	4631      	mov	r1, r6
 802190e:	0098      	lsls	r0, r3, #2
 8021910:	f002 ff36 	bl	8024780 <mpool_alloc>
    for (int i = 0; i < r->numVoices; ++i)
 8021914:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    r->tickOutput = (float*) mpool_alloc(sizeof(float) * r->numVoices, m);
 8021916:	6168      	str	r0, [r5, #20]
    for (int i = 0; i < r->numVoices; ++i)
 8021918:	2b00      	cmp	r3, #0
 802191a:	dd0c      	ble.n	8021936 <tAutotune_initToPool+0xc6>
 802191c:	2400      	movs	r4, #0
        r->outBuffers[i] = (float*) mpool_alloc(sizeof(float) * r->bufSize, m);
 802191e:	69e8      	ldr	r0, [r5, #28]
 8021920:	4631      	mov	r1, r6
 8021922:	692f      	ldr	r7, [r5, #16]
 8021924:	0080      	lsls	r0, r0, #2
 8021926:	f002 ff2b 	bl	8024780 <mpool_alloc>
 802192a:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
    for (int i = 0; i < r->numVoices; ++i)
 802192e:	3401      	adds	r4, #1
 8021930:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8021932:	42a3      	cmp	r3, r4
 8021934:	dcf3      	bgt.n	802191e <tAutotune_initToPool+0xae>
    tPeriodDetection_initToPool(&r->pd, r->inBuffer, r->outBuffers[0], r->bufSize, r->frameSize, mp);
 8021936:	692a      	ldr	r2, [r5, #16]
 8021938:	1d28      	adds	r0, r5, #4
 802193a:	69eb      	ldr	r3, [r5, #28]
 802193c:	6812      	ldr	r2, [r2, #0]
 802193e:	68e9      	ldr	r1, [r5, #12]
 8021940:	f8cd 8004 	str.w	r8, [sp, #4]
 8021944:	69ac      	ldr	r4, [r5, #24]
 8021946:	9003      	str	r0, [sp, #12]
 8021948:	9400      	str	r4, [sp, #0]
 802194a:	f7fd fec7 	bl	801f6dc <tPeriodDetection_initToPool>
    for (int i = 0; i < r->numVoices; ++i)
 802194e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8021950:	2b00      	cmp	r3, #0
 8021952:	dd56      	ble.n	8021a02 <tAutotune_initToPool+0x192>
 8021954:	2700      	movs	r7, #0
    w->period = INITPERIOD;
 8021956:	ed9f 8a31 	vldr	s16, [pc, #196]	; 8021a1c <tAutotune_initToPool+0x1ac>
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 802195a:	eddf 8a31 	vldr	s17, [pc, #196]	; 8021a20 <tAutotune_initToPool+0x1b0>
        tPitchShift_initToPool(&r->ps[i], &r->pd, r->outBuffers[i], r->bufSize, mp);
 802195e:	692b      	ldr	r3, [r5, #16]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 8021960:	2038      	movs	r0, #56	; 0x38
    _tMempool* m = *mp;
 8021962:	f8d8 a000 	ldr.w	sl, [r8]
    ps->pitchFactor = 1.0f;
 8021966:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
        tPitchShift_initToPool(&r->ps[i], &r->pd, r->outBuffers[i], r->bufSize, mp);
 802196a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 802196e:	4651      	mov	r1, sl
        tPitchShift_initToPool(&r->ps[i], &r->pd, r->outBuffers[i], r->bufSize, mp);
 8021970:	69ee      	ldr	r6, [r5, #28]
 8021972:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8021976:	9302      	str	r3, [sp, #8]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 8021978:	f002 ff58 	bl	802482c <mpool_calloc>
    ps->outBuffer = out;
 802197c:	9902      	ldr	r1, [sp, #8]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 802197e:	4604      	mov	r4, r0
    ps->curBlock = 1;
 8021980:	f04f 0c01 	mov.w	ip, #1
    ps->lastBlock = 0;
 8021984:	2200      	movs	r2, #0
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 8021986:	f849 4027 	str.w	r4, [r9, r7, lsl #2]
    _tSOLAD* w = *wp = (_tSOLAD*) mpool_calloc(sizeof(_tSOLAD), m);
 802198a:	2024      	movs	r0, #36	; 0x24
    ps->mempool = m;
 802198c:	f8c4 a000 	str.w	sl, [r4]
    for (int i = 0; i < r->numVoices; ++i)
 8021990:	4467      	add	r7, ip
    _tPeriodDetection* p = *pd;
 8021992:	686b      	ldr	r3, [r5, #4]
    ps->outBuffer = out;
 8021994:	6121      	str	r1, [r4, #16]
    ps->p = pd;
 8021996:	9903      	ldr	r1, [sp, #12]
    ps->bufSize = bufSize;
 8021998:	61a6      	str	r6, [r4, #24]
    ps->p = pd;
 802199a:	60e1      	str	r1, [r4, #12]
    ps->frameSize = p->frameSize;
 802199c:	695b      	ldr	r3, [r3, #20]
    ps->curBlock = 1;
 802199e:	f8c4 c020 	str.w	ip, [r4, #32]
    ps->frameSize = p->frameSize;
 80219a2:	6163      	str	r3, [r4, #20]
    ps->pitchFactor = 1.0f;
 80219a4:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
    ps->framesPerBuffer = ps->bufSize / ps->frameSize;
 80219a8:	fb96 f6f3 	sdiv	r6, r6, r3
    ps->index = 0;
 80219ac:	e9c4 2209 	strd	r2, r2, [r4, #36]	; 0x24
    ps->framesPerBuffer = ps->bufSize / ps->frameSize;
 80219b0:	61e6      	str	r6, [r4, #28]
    _tMempool* m = *mp;
 80219b2:	f8d8 a000 	ldr.w	sl, [r8]
    _tSOLAD* w = *wp = (_tSOLAD*) mpool_calloc(sizeof(_tSOLAD), m);
 80219b6:	4651      	mov	r1, sl
 80219b8:	f002 ff38 	bl	802482c <mpool_calloc>
 80219bc:	4606      	mov	r6, r0
    w->delaybuf = (float*) mpool_calloc(sizeof(float) * (LOOPSIZE+16), m);
 80219be:	4651      	mov	r1, sl
 80219c0:	f244 0040 	movw	r0, #16448	; 0x4040
    _tSOLAD* w = *wp = (_tSOLAD*) mpool_calloc(sizeof(_tSOLAD), m);
 80219c4:	6066      	str	r6, [r4, #4]
    w->mempool = m;
 80219c6:	f8c6 a000 	str.w	sl, [r6]
    w->pitchfactor = 1.;
 80219ca:	f8c6 b008 	str.w	fp, [r6, #8]
    w->delaybuf = (float*) mpool_calloc(sizeof(float) * (LOOPSIZE+16), m);
 80219ce:	f002 ff2d 	bl	802482c <mpool_calloc>
    w->xfadevalue = -1;
 80219d2:	4a14      	ldr	r2, [pc, #80]	; (8021a24 <tAutotune_initToPool+0x1b4>)
    w->timeindex = 0;
 80219d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    w->delaybuf = (float*) mpool_calloc(sizeof(float) * (LOOPSIZE+16), m);
 80219d8:	6230      	str	r0, [r6, #32]
    w->xfadevalue = -1;
 80219da:	61f2      	str	r2, [r6, #28]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 80219dc:	f104 0008 	add.w	r0, r4, #8
    w->timeindex = 0;
 80219e0:	6073      	str	r3, [r6, #4]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 80219e2:	4641      	mov	r1, r8
    w->period = INITPERIOD;
 80219e4:	ed86 8a04 	vstr	s16, [r6, #16]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 80219e8:	eeb0 0a68 	vmov.f32	s0, s17
    w->readlag = INITPERIOD;
 80219ec:	ed86 8a03 	vstr	s16, [r6, #12]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 80219f0:	f001 fb40 	bl	8023074 <tHighpass_initToPool>
    _tSOLAD* w = *wp;
 80219f4:	6863      	ldr	r3, [r4, #4]
    w->pitchfactor = pitchfactor;
 80219f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80219fa:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < r->numVoices; ++i)
 80219fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80219fe:	42bb      	cmp	r3, r7
 8021a00:	dcad      	bgt.n	802195e <tAutotune_initToPool+0xee>
    r->inputPeriod = 0.0f;
 8021a02:	2200      	movs	r2, #0
    r->shiftOn = 0;
 8021a04:	2300      	movs	r3, #0
    r->inputPeriod = 0.0f;
 8021a06:	636a      	str	r2, [r5, #52]	; 0x34
    r->shiftOn = 0;
 8021a08:	63ab      	str	r3, [r5, #56]	; 0x38
}
 8021a0a:	b005      	add	sp, #20
 8021a0c:	ecbd 8b02 	vpop	{d8}
 8021a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a14:	200194a0 	.word	0x200194a0
 8021a18:	42c80000 	.word	0x42c80000
 8021a1c:	42800000 	.word	0x42800000
 8021a20:	42200000 	.word	0x42200000
 8021a24:	bf800000 	.word	0xbf800000

08021a28 <tAutotune_init>:
{
 8021a28:	b510      	push	{r4, lr}
    tAutotune_initToPool(rt, numVoices, bufSize, frameSize, &leaf.mempool);
 8021a2a:	4c03      	ldr	r4, [pc, #12]	; (8021a38 <tAutotune_init+0x10>)
{
 8021a2c:	b082      	sub	sp, #8
    tAutotune_initToPool(rt, numVoices, bufSize, frameSize, &leaf.mempool);
 8021a2e:	9400      	str	r4, [sp, #0]
 8021a30:	f7ff ff1e 	bl	8021870 <tAutotune_initToPool>
}
 8021a34:	b002      	add	sp, #8
 8021a36:	bd10      	pop	{r4, pc}
 8021a38:	200194b8 	.word	0x200194b8

08021a3c <tAutotune_free>:
{
 8021a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tAutotune* r = *rt;
 8021a3e:	6804      	ldr	r4, [r0, #0]
    tPeriodDetection_free(&r->pd);
 8021a40:	1d20      	adds	r0, r4, #4
 8021a42:	f7fd fea9 	bl	801f798 <tPeriodDetection_free>
    for (int i = 0; i < r->numVoices; ++i)
 8021a46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	dd1e      	ble.n	8021a8a <tAutotune_free+0x4e>
 8021a4c:	2500      	movs	r5, #0
    _tPitchShift* ps = *psr;
 8021a4e:	68a3      	ldr	r3, [r4, #8]
 8021a50:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
    _tSOLAD* w = *wp;
 8021a54:	6877      	ldr	r7, [r6, #4]
    mpool_free((char*)w->delaybuf, w->mempool);
 8021a56:	6839      	ldr	r1, [r7, #0]
 8021a58:	6a38      	ldr	r0, [r7, #32]
 8021a5a:	f002 ff39 	bl	80248d0 <mpool_free>
    mpool_free((char*)w, w->mempool);
 8021a5e:	6839      	ldr	r1, [r7, #0]
 8021a60:	4638      	mov	r0, r7
 8021a62:	f002 ff35 	bl	80248d0 <mpool_free>
    tHighpass_free(&ps->hp);
 8021a66:	f106 0008 	add.w	r0, r6, #8
 8021a6a:	f001 fb23 	bl	80230b4 <tHighpass_free>
    mpool_free((char*)ps, ps->mempool);
 8021a6e:	6831      	ldr	r1, [r6, #0]
 8021a70:	4630      	mov	r0, r6
 8021a72:	f002 ff2d 	bl	80248d0 <mpool_free>
        mpool_free((char*)r->outBuffers[i], r->mempool);
 8021a76:	6923      	ldr	r3, [r4, #16]
 8021a78:	6821      	ldr	r1, [r4, #0]
 8021a7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    for (int i = 0; i < r->numVoices; ++i)
 8021a7e:	3501      	adds	r5, #1
        mpool_free((char*)r->outBuffers[i], r->mempool);
 8021a80:	f002 ff26 	bl	80248d0 <mpool_free>
    for (int i = 0; i < r->numVoices; ++i)
 8021a84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8021a86:	42ab      	cmp	r3, r5
 8021a88:	dce1      	bgt.n	8021a4e <tAutotune_free+0x12>
    mpool_free((char*)r->tickOutput, r->mempool);
 8021a8a:	6821      	ldr	r1, [r4, #0]
 8021a8c:	6960      	ldr	r0, [r4, #20]
 8021a8e:	f002 ff1f 	bl	80248d0 <mpool_free>
    mpool_free((char*)r->freq, r->mempool);
 8021a92:	6821      	ldr	r1, [r4, #0]
 8021a94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8021a96:	f002 ff1b 	bl	80248d0 <mpool_free>
    mpool_free((char*)r->ps, r->mempool);
 8021a9a:	6821      	ldr	r1, [r4, #0]
 8021a9c:	68a0      	ldr	r0, [r4, #8]
 8021a9e:	f002 ff17 	bl	80248d0 <mpool_free>
    mpool_free((char*)r->inBuffer, r->mempool);
 8021aa2:	6821      	ldr	r1, [r4, #0]
 8021aa4:	68e0      	ldr	r0, [r4, #12]
 8021aa6:	f002 ff13 	bl	80248d0 <mpool_free>
    mpool_free((char*)r->outBuffers, r->mempool);
 8021aaa:	6821      	ldr	r1, [r4, #0]
 8021aac:	6920      	ldr	r0, [r4, #16]
 8021aae:	f002 ff0f 	bl	80248d0 <mpool_free>
    mpool_free((char*)r, r->mempool);
 8021ab2:	6821      	ldr	r1, [r4, #0]
 8021ab4:	4620      	mov	r0, r4
}
 8021ab6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    mpool_free((char*)r, r->mempool);
 8021aba:	f002 bf09 	b.w	80248d0 <mpool_free>
 8021abe:	bf00      	nop

08021ac0 <tAutotune_tick>:
{
 8021ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ac4:	ed2d 8b06 	vpush	{d8-d10}
    _tAutotune* r = *rt;
 8021ac8:	6806      	ldr	r6, [r0, #0]
{
 8021aca:	b082      	sub	sp, #8
    float tempPeriod = tPeriodDetection_tick(&r->pd, sample);
 8021acc:	1d30      	adds	r0, r6, #4
 8021ace:	f7fd fe85 	bl	801f7dc <tPeriodDetection_tick>
    if (tempPeriod < 1000.0f) //to avoid trying to follow consonants JS
 8021ad2:	eddf 7a75 	vldr	s15, [pc, #468]	; 8021ca8 <tAutotune_tick+0x1e8>
 8021ad6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ade:	d501      	bpl.n	8021ae4 <tAutotune_tick+0x24>
		r->inputPeriod = tempPeriod;
 8021ae0:	ed86 0a0d 	vstr	s0, [r6, #52]	; 0x34
	for (int v = 0; v < r->numVoices; ++v)
 8021ae4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8021ae6:	2b00      	cmp	r3, #0
 8021ae8:	f340 8097 	ble.w	8021c1a <tAutotune_tick+0x15a>
 8021aec:	2500      	movs	r5, #0
    if(period > MAXPERIOD) period = MAXPERIOD;
 8021aee:	eddf 9a6f 	vldr	s19, [pc, #444]	; 8021cac <tAutotune_tick+0x1ec>
        if (period != 0) ps->pitchFactor = period*freq*leaf.invSampleRate;
 8021af2:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021cb4 <tAutotune_tick+0x1f4>
    return (p->fba == 0 && (p->max > 60 && p->deltamax > 6)) ? 1 : 0;
 8021af6:	ed9f aa6e 	vldr	s20, [pc, #440]	; 8021cb0 <tAutotune_tick+0x1f0>
 8021afa:	e006      	b.n	8021b0a <tAutotune_tick+0x4a>
		r->tickOutput[v] = tPitchShift_shiftToFreq(&r->ps[v], r->freq[v]);
 8021afc:	edc7 8a00 	vstr	s17, [r7]
	for (int v = 0; v < r->numVoices; ++v)
 8021b00:	3501      	adds	r5, #1
 8021b02:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8021b04:	42ab      	cmp	r3, r5
 8021b06:	f340 8088 	ble.w	8021c1a <tAutotune_tick+0x15a>
    _tPitchShift* ps = *psr;
 8021b0a:	68b1      	ldr	r1, [r6, #8]
 8021b0c:	00ab      	lsls	r3, r5, #2
		r->tickOutput[v] = tPitchShift_shiftToFreq(&r->ps[v], r->freq[v]);
 8021b0e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    _tPitchShift* ps = *psr;
 8021b10:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]
		r->tickOutput[v] = tPitchShift_shiftToFreq(&r->ps[v], r->freq[v]);
 8021b14:	6977      	ldr	r7, [r6, #20]
 8021b16:	eb02 0c03 	add.w	ip, r2, r3
    _tPeriodDetection* p = *ps->p;
 8021b1a:	68e1      	ldr	r1, [r4, #12]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 8021b1c:	f104 0008 	add.w	r0, r4, #8
 8021b20:	6922      	ldr	r2, [r4, #16]
		r->tickOutput[v] = tPitchShift_shiftToFreq(&r->ps[v], r->freq[v]);
 8021b22:	441f      	add	r7, r3
    _tPeriodDetection* p = *ps->p;
 8021b24:	6809      	ldr	r1, [r1, #0]
		r->tickOutput[v] = tPitchShift_shiftToFreq(&r->ps[v], r->freq[v]);
 8021b26:	ed9c 8a00 	vldr	s16, [ip]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 8021b2a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    _tPeriodDetection* p = *ps->p;
 8021b2c:	9101      	str	r1, [sp, #4]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 8021b2e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    i = p->i;
 8021b32:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 8021b36:	ed92 0a00 	vldr	s0, [r2]
 8021b3a:	f001 facf 	bl	80230dc <tHighpass_tick>
    if (p->indexstore >= ps->frameSize)
 8021b3e:	9a01      	ldr	r2, [sp, #4]
 8021b40:	6963      	ldr	r3, [r4, #20]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 8021b42:	eef0 8a40 	vmov.f32	s17, s0
    if (p->indexstore >= ps->frameSize)
 8021b46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8021b48:	429a      	cmp	r2, r3
 8021b4a:	dbd7      	blt.n	8021afc <tAutotune_tick+0x3c>
        period = tPeriodDetection_getPeriod(&p);
 8021b4c:	a801      	add	r0, sp, #4
 8021b4e:	f7fd fed3 	bl	801f8f8 <tPeriodDetection_getPeriod>
    _tPeriodDetection* p = *ps->p;
 8021b52:	68e3      	ldr	r3, [r4, #12]
        period = tPeriodDetection_getPeriod(&p);
 8021b54:	eeb0 9a40 	vmov.f32	s18, s0
    _tPeriodDetection* p = *ps->p;
 8021b58:	f8d3 a000 	ldr.w	sl, [r3]
    envout = tEnvPD_tick(&p->env);
 8021b5c:	f10a 0004 	add.w	r0, sl, #4
 8021b60:	f7fd fac0 	bl	801f0e4 <tEnvPD_tick>
    if (envout >= 1.0f)
 8021b64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021b68:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b70:	db0f      	blt.n	8021b92 <tAutotune_tick+0xd2>
        p->lastmax = p->max;
 8021b72:	edda 7a13 	vldr	s15, [sl, #76]	; 0x4c
        if (envout > p->max)
 8021b76:	eeb4 0ae7 	vcmpe.f32	s0, s15
        p->lastmax = p->max;
 8021b7a:	edca 7a14 	vstr	s15, [sl, #80]	; 0x50
 8021b7e:	ee30 7a67 	vsub.f32	s14, s0, s15
        if (envout > p->max)
 8021b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b86:	f340 8083 	ble.w	8021c90 <tAutotune_tick+0x1d0>
            p->max = envout;
 8021b8a:	ed8a 0a13 	vstr	s0, [sl, #76]	; 0x4c
        p->deltamax = p->max - p->lastmax;
 8021b8e:	ed8a 7a15 	vstr	s14, [sl, #84]	; 0x54
    p->fba = p->fba ? (p->fba - 1) : 0;
 8021b92:	f89a 3040 	ldrb.w	r3, [sl, #64]	; 0x40
 8021b96:	2b00      	cmp	r3, #0
 8021b98:	d04c      	beq.n	8021c34 <tAutotune_tick+0x174>
 8021b9a:	3b01      	subs	r3, #1
 8021b9c:	b2db      	uxtb	r3, r3
 8021b9e:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
    return (p->fba == 0 && (p->max > 60 && p->deltamax > 6)) ? 1 : 0;
 8021ba2:	2b00      	cmp	r3, #0
 8021ba4:	d046      	beq.n	8021c34 <tAutotune_tick+0x174>
 8021ba6:	6862      	ldr	r2, [r4, #4]
 8021ba8:	9901      	ldr	r1, [sp, #4]
    if(period > MAXPERIOD) period = MAXPERIOD;
 8021baa:	88d3      	ldrh	r3, [r2, #6]
    if(period > MINPERIOD) w->period = period;  // ignore period when too small
 8021bac:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    if(period > MAXPERIOD) period = MAXPERIOD;
 8021bb0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8021bb4:	ee07 3a90 	vmov	s15, r3
 8021bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021bbc:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8021bc0:	fec7 7ac9 	vminnm.f32	s15, s15, s18
    if(period > MINPERIOD) w->period = period;  // ignore period when too small
 8021bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bcc:	dd02      	ble.n	8021bd4 <tAutotune_tick+0x114>
 8021bce:	edc2 7a04 	vstr	s15, [r2, #16]
 8021bd2:	6862      	ldr	r2, [r4, #4]
        if (period != 0) ps->pitchFactor = period*freq*leaf.invSampleRate;
 8021bd4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8021bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bdc:	d023      	beq.n	8021c26 <tAutotune_tick+0x166>
 8021bde:	edd8 7a01 	vldr	s15, [r8, #4]
 8021be2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8021be6:	ee28 8a09 	vmul.f32	s16, s16, s18
    if (pitchfactor <= 0.0f) return;
 8021bea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8021bee:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
 8021bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bf6:	d81a      	bhi.n	8021c2e <tAutotune_tick+0x16e>
        tSOLAD_ioSamples(&ps->sola, &(p->inBuffer[i]), &(ps->outBuffer[i]), ps->frameSize);
 8021bf8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8021bfc:	68c9      	ldr	r1, [r1, #12]
 8021bfe:	6922      	ldr	r2, [r4, #16]
 8021c00:	1d20      	adds	r0, r4, #4
 8021c02:	6963      	ldr	r3, [r4, #20]
 8021c04:	4449      	add	r1, r9
 8021c06:	444a      	add	r2, r9
	for (int v = 0; v < r->numVoices; ++v)
 8021c08:	3501      	adds	r5, #1
        tSOLAD_ioSamples(&ps->sola, &(p->inBuffer[i]), &(ps->outBuffer[i]), ps->frameSize);
 8021c0a:	f7ff fa97 	bl	802113c <tSOLAD_ioSamples>
		r->tickOutput[v] = tPitchShift_shiftToFreq(&r->ps[v], r->freq[v]);
 8021c0e:	edc7 8a00 	vstr	s17, [r7]
	for (int v = 0; v < r->numVoices; ++v)
 8021c12:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8021c14:	42ab      	cmp	r3, r5
 8021c16:	f73f af78 	bgt.w	8021b0a <tAutotune_tick+0x4a>
    return r->tickOutput;
 8021c1a:	6970      	ldr	r0, [r6, #20]
}
 8021c1c:	b002      	add	sp, #8
 8021c1e:	ecbd 8b06 	vpop	{d8-d10}
 8021c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021c26:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8021c2a:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
    w->pitchfactor = pitchfactor;
 8021c2e:	ed82 8a02 	vstr	s16, [r2, #8]
 8021c32:	e7e1      	b.n	8021bf8 <tAutotune_tick+0x138>
    return (p->fba == 0 && (p->max > 60 && p->deltamax > 6)) ? 1 : 0;
 8021c34:	edda 7a13 	vldr	s15, [sl, #76]	; 0x4c
 8021c38:	eef4 7aca 	vcmpe.f32	s15, s20
 8021c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c40:	ddb1      	ble.n	8021ba6 <tAutotune_tick+0xe6>
 8021c42:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8021c46:	ed9a 7a15 	vldr	s14, [sl, #84]	; 0x54
 8021c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c52:	dda8      	ble.n	8021ba6 <tAutotune_tick+0xe6>
            p->fba = 5;
 8021c54:	9901      	ldr	r1, [sp, #4]
 8021c56:	2305      	movs	r3, #5
            tSOLAD_setReadLag(&ps->sola, p->windowSize);
 8021c58:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
            p->fba = 5;
 8021c5a:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
            tSOLAD_setReadLag(&ps->sola, p->windowSize);
 8021c5e:	ee07 2a90 	vmov	s15, r2
    _tSOLAD* w = *wp;
 8021c62:	6862      	ldr	r2, [r4, #4]
            tSOLAD_setReadLag(&ps->sola, p->windowSize);
 8021c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if(readlag < w->readlag)               // do not jump backward, only forward
 8021c68:	ed92 7a03 	vldr	s14, [r2, #12]
 8021c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c74:	d599      	bpl.n	8021baa <tAutotune_tick+0xea>
        w->jump = w->readlag - readlag;
 8021c76:	ee37 7a67 	vsub.f32	s14, s14, s15
        w->xfadevalue = 1;
 8021c7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        w->readlag = readlag;
 8021c7e:	edc2 7a03 	vstr	s15, [r2, #12]
        w->xfadelength = readlag;
 8021c82:	edc2 7a06 	vstr	s15, [r2, #24]
        w->jump = w->readlag - readlag;
 8021c86:	ed82 7a05 	vstr	s14, [r2, #20]
        w->xfadevalue = 1;
 8021c8a:	61d3      	str	r3, [r2, #28]
 8021c8c:	6862      	ldr	r2, [r4, #4]
 8021c8e:	e78c      	b.n	8021baa <tAutotune_tick+0xea>
            p->deltamax = envout - p->max;
 8021c90:	ed8a 7a15 	vstr	s14, [sl, #84]	; 0x54
            p->max = p->max * ps->radius;
 8021c94:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8021c98:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8021c9c:	ee36 7ae7 	vsub.f32	s14, s13, s15
 8021ca0:	edca 6a13 	vstr	s13, [sl, #76]	; 0x4c
 8021ca4:	e773      	b.n	8021b8e <tAutotune_tick+0xce>
 8021ca6:	bf00      	nop
 8021ca8:	447a0000 	.word	0x447a0000
 8021cac:	3f4ccccd 	.word	0x3f4ccccd
 8021cb0:	42700000 	.word	0x42700000
 8021cb4:	200194a0 	.word	0x200194a0

08021cb8 <tAutotune_setFreq>:
    r->freq[voice] = f;
 8021cb8:	6803      	ldr	r3, [r0, #0]
 8021cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021cbc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8021cc0:	ed81 0a00 	vstr	s0, [r1]
}
 8021cc4:	4770      	bx	lr
 8021cc6:	bf00      	nop

08021cc8 <tAutotune_setFidelityThreshold>:

void tAutotune_setFidelityThreshold(tAutotune* const rt, float threshold)
{
    _tAutotune* r = *rt;

    tPeriodDetection_setFidelityThreshold(&r->pd, threshold);
 8021cc8:	6800      	ldr	r0, [r0, #0]
 8021cca:	3004      	adds	r0, #4
 8021ccc:	f7fd be18 	b.w	801f900 <tPeriodDetection_setFidelityThreshold>

08021cd0 <tFormantShifter_initToPool>:
{
    tFormantShifter_initToPool(fsr, order, &leaf.mempool);
}

void tFormantShifter_initToPool (tFormantShifter* const fsr, int order, tMempool* const mp)
{
 8021cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021cd4:	ed2d 8b06 	vpush	{d8-d10}
    _tMempool* m = *mp;
 8021cd8:	6815      	ldr	r5, [r2, #0]
{
 8021cda:	4688      	mov	r8, r1
 8021cdc:	4681      	mov	r9, r0
    _tFormantShifter* fs = *fsr = (_tFormantShifter*) mpool_alloc(sizeof(_tFormantShifter), m);
 8021cde:	2068      	movs	r0, #104	; 0x68
 8021ce0:	4629      	mov	r1, r5
{
 8021ce2:	4616      	mov	r6, r2
    _tFormantShifter* fs = *fsr = (_tFormantShifter*) mpool_alloc(sizeof(_tFormantShifter), m);
 8021ce4:	f002 fd4c 	bl	8024780 <mpool_alloc>
 8021ce8:	4604      	mov	r4, r0
 8021cea:	f8c9 0000 	str.w	r0, [r9]
    fs->mempool = m;
    
    fs->ford = order;
    fs->fk = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021cee:	4629      	mov	r1, r5
 8021cf0:	ea4f 0088 	mov.w	r0, r8, lsl #2
    fs->ftvec = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
    
    fs->fbuff = (float*) mpool_calloc(sizeof(float*) * fs->ford, m);

    
    fs->falph = powf(0.001f, 10.0f * leaf.invSampleRate);
 8021cf4:	eddf 9a4d 	vldr	s19, [pc, #308]	; 8021e2c <tFormantShifter_initToPool+0x15c>
    fs->flamb = -(0.8517f*sqrtf(atanf(0.06583f*leaf.sampleRate))-0.1916f);
    fs->fhp = 0.0f;
    fs->flp = 0.0f;
    fs->flpa = powf(0.001f, 10.0f * leaf.invSampleRate);
    fs->fmute = 1.0f;
 8021cf8:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
    fs->cbi = 0;
    fs->intensity = 1.0f;
    fs->invIntensity = 1.0f;
    tHighpass_initToPool(&fs->hp, 20.0f, mp);
    tHighpass_initToPool(&fs->hp2, 20.0f, mp);
    tFeedbackLeveler_initToPool(&fs->fbl1, 0.8f, .005f, 0.125, 1, mp);
 8021cfc:	eddf 8a4c 	vldr	s17, [pc, #304]	; 8021e30 <tFormantShifter_initToPool+0x160>
 8021d00:	ed9f 8a4c 	vldr	s16, [pc, #304]	; 8021e34 <tFormantShifter_initToPool+0x164>
    fs->ford = order;
 8021d04:	e9c4 5800 	strd	r5, r8, [r4]
    fs->fk = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d08:	f002 fd90 	bl	802482c <mpool_calloc>
    fs->fb = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d0c:	6863      	ldr	r3, [r4, #4]
    fs->fk = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d0e:	6120      	str	r0, [r4, #16]
    fs->fb = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d10:	4629      	mov	r1, r5
 8021d12:	0098      	lsls	r0, r3, #2
    fs->falph = powf(0.001f, 10.0f * leaf.invSampleRate);
 8021d14:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8021e44 <tFormantShifter_initToPool+0x174>
    fs->fb = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d18:	f002 fd88 	bl	802482c <mpool_calloc>
    fs->fc = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d1c:	6863      	ldr	r3, [r4, #4]
    fs->fb = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d1e:	6160      	str	r0, [r4, #20]
    fs->fc = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d20:	4629      	mov	r1, r5
 8021d22:	0098      	lsls	r0, r3, #2
 8021d24:	f002 fd82 	bl	802482c <mpool_calloc>
    fs->frb = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d28:	6863      	ldr	r3, [r4, #4]
    fs->fc = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d2a:	61a0      	str	r0, [r4, #24]
    fs->frb = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d2c:	4629      	mov	r1, r5
 8021d2e:	0098      	lsls	r0, r3, #2
 8021d30:	f002 fd7c 	bl	802482c <mpool_calloc>
    fs->frc = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d34:	6863      	ldr	r3, [r4, #4]
    fs->frb = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d36:	61e0      	str	r0, [r4, #28]
    fs->frc = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d38:	4629      	mov	r1, r5
 8021d3a:	0098      	lsls	r0, r3, #2
 8021d3c:	f002 fd76 	bl	802482c <mpool_calloc>
    fs->fsig = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d40:	6863      	ldr	r3, [r4, #4]
    fs->frc = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d42:	6220      	str	r0, [r4, #32]
    fs->fsig = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d44:	4629      	mov	r1, r5
 8021d46:	0098      	lsls	r0, r3, #2
 8021d48:	f002 fd70 	bl	802482c <mpool_calloc>
    fs->fsmooth = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d4c:	6863      	ldr	r3, [r4, #4]
    fs->fsig = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d4e:	6260      	str	r0, [r4, #36]	; 0x24
    fs->fsmooth = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d50:	4629      	mov	r1, r5
 8021d52:	0098      	lsls	r0, r3, #2
 8021d54:	f002 fd6a 	bl	802482c <mpool_calloc>
    fs->ftvec = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d58:	6863      	ldr	r3, [r4, #4]
    fs->fsmooth = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d5a:	62a0      	str	r0, [r4, #40]	; 0x28
    fs->ftvec = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d5c:	4629      	mov	r1, r5
 8021d5e:	0098      	lsls	r0, r3, #2
 8021d60:	f002 fd64 	bl	802482c <mpool_calloc>
    fs->fbuff = (float*) mpool_calloc(sizeof(float*) * fs->ford, m);
 8021d64:	6863      	ldr	r3, [r4, #4]
 8021d66:	4629      	mov	r1, r5
    fs->ftvec = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021d68:	63e0      	str	r0, [r4, #60]	; 0x3c
    fs->fbuff = (float*) mpool_calloc(sizeof(float*) * fs->ford, m);
 8021d6a:	0098      	lsls	r0, r3, #2
 8021d6c:	f002 fd5e 	bl	802482c <mpool_calloc>
    fs->falph = powf(0.001f, 10.0f * leaf.invSampleRate);
 8021d70:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8021d74:	ed98 aa01 	vldr	s20, [r8, #4]
 8021d78:	eeb0 0a69 	vmov.f32	s0, s19
    fs->fbuff = (float*) mpool_calloc(sizeof(float*) * fs->ford, m);
 8021d7c:	63a0      	str	r0, [r4, #56]	; 0x38
    fs->falph = powf(0.001f, 10.0f * leaf.invSampleRate);
 8021d7e:	ee6a 0a20 	vmul.f32	s1, s20, s1
 8021d82:	f005 fea9 	bl	8027ad8 <powf>
 8021d86:	eeb0 9a40 	vmov.f32	s18, s0
    fs->flamb = -(0.8517f*sqrtf(atanf(0.06583f*leaf.sampleRate))-0.1916f);
 8021d8a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8021e38 <tFormantShifter_initToPool+0x168>
 8021d8e:	ed98 0a00 	vldr	s0, [r8]
    fs->falph = powf(0.001f, 10.0f * leaf.invSampleRate);
 8021d92:	ed84 9a02 	vstr	s18, [r4, #8]
    fs->flamb = -(0.8517f*sqrtf(atanf(0.06583f*leaf.sampleRate))-0.1916f);
 8021d96:	ee20 0a27 	vmul.f32	s0, s0, s15
 8021d9a:	f005 fc1d 	bl	80275d8 <atanf>
 8021d9e:	eef1 6ac0 	vsqrt.f32	s13, s0
 8021da2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8021e3c <tFormantShifter_initToPool+0x16c>
    fs->fhp = 0.0f;
 8021da6:	2300      	movs	r3, #0
    fs->flamb = -(0.8517f*sqrtf(atanf(0.06583f*leaf.sampleRate))-0.1916f);
 8021da8:	eddf 7a25 	vldr	s15, [pc, #148]	; 8021e40 <tFormantShifter_initToPool+0x170>
    fs->flpa = powf(0.001f, 10.0f * leaf.invSampleRate);
 8021dac:	ed84 9a0d 	vstr	s18, [r4, #52]	; 0x34
    fs->fhp = 0.0f;
 8021db0:	62e3      	str	r3, [r4, #44]	; 0x2c
    fs->fmutealph = powf(0.001f, 1.0f * leaf.invSampleRate);
 8021db2:	eef0 0a4a 	vmov.f32	s1, s20
    fs->flp = 0.0f;
 8021db6:	6323      	str	r3, [r4, #48]	; 0x30
    fs->fmutealph = powf(0.001f, 1.0f * leaf.invSampleRate);
 8021db8:	eeb0 0a69 	vmov.f32	s0, s19
    fs->fmute = 1.0f;
 8021dbc:	6427      	str	r7, [r4, #64]	; 0x40
    fs->flamb = -(0.8517f*sqrtf(atanf(0.06583f*leaf.sampleRate))-0.1916f);
 8021dbe:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8021dc2:	edc4 7a03 	vstr	s15, [r4, #12]
    fs->fmutealph = powf(0.001f, 1.0f * leaf.invSampleRate);
 8021dc6:	f005 fe87 	bl	8027ad8 <powf>
    fs->cbi = 0;
 8021dca:	2300      	movs	r3, #0
    fs->fmutealph = powf(0.001f, 1.0f * leaf.invSampleRate);
 8021dcc:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    tHighpass_initToPool(&fs->hp, 20.0f, mp);
 8021dd0:	4631      	mov	r1, r6
    fs->cbi = 0;
 8021dd2:	64a3      	str	r3, [r4, #72]	; 0x48
    tHighpass_initToPool(&fs->hp, 20.0f, mp);
 8021dd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
    fs->intensity = 1.0f;
 8021dd8:	6527      	str	r7, [r4, #80]	; 0x50
    tHighpass_initToPool(&fs->hp, 20.0f, mp);
 8021dda:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
    fs->invIntensity = 1.0f;
 8021dde:	6567      	str	r7, [r4, #84]	; 0x54
    tHighpass_initToPool(&fs->hp, 20.0f, mp);
 8021de0:	f001 f948 	bl	8023074 <tHighpass_initToPool>
    tHighpass_initToPool(&fs->hp2, 20.0f, mp);
 8021de4:	4631      	mov	r1, r6
 8021de6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021dea:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8021dee:	f001 f941 	bl	8023074 <tHighpass_initToPool>
    tFeedbackLeveler_initToPool(&fs->fbl1, 0.8f, .005f, 0.125, 1, mp);
 8021df2:	4632      	mov	r2, r6
 8021df4:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8021df8:	eef0 0a68 	vmov.f32	s1, s17
 8021dfc:	eeb0 0a48 	vmov.f32	s0, s16
 8021e00:	2101      	movs	r1, #1
 8021e02:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 8021e06:	f7fe fc0f 	bl	8020628 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&fs->fbl2, 0.8f, .005f, 0.125, 1, mp);
 8021e0a:	eef0 0a68 	vmov.f32	s1, s17
 8021e0e:	eeb0 0a48 	vmov.f32	s0, s16
 8021e12:	4632      	mov	r2, r6
 8021e14:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8021e18:	2101      	movs	r1, #1
 8021e1a:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
}
 8021e1e:	ecbd 8b06 	vpop	{d8-d10}
 8021e22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    tFeedbackLeveler_initToPool(&fs->fbl2, 0.8f, .005f, 0.125, 1, mp);
 8021e26:	f7fe bbff 	b.w	8020628 <tFeedbackLeveler_initToPool>
 8021e2a:	bf00      	nop
 8021e2c:	3a83126f 	.word	0x3a83126f
 8021e30:	3ba3d70a 	.word	0x3ba3d70a
 8021e34:	3f4ccccd 	.word	0x3f4ccccd
 8021e38:	3d86d1e1 	.word	0x3d86d1e1
 8021e3c:	3f5a0903 	.word	0x3f5a0903
 8021e40:	3e4432ca 	.word	0x3e4432ca
 8021e44:	200194a0 	.word	0x200194a0

08021e48 <tFormantShifter_free>:

void tFormantShifter_free (tFormantShifter* const fsr)
{
 8021e48:	b510      	push	{r4, lr}
    _tFormantShifter* fs = *fsr;
 8021e4a:	6804      	ldr	r4, [r0, #0]
    
    mpool_free((char*)fs->fk, fs->mempool);
 8021e4c:	6821      	ldr	r1, [r4, #0]
 8021e4e:	6920      	ldr	r0, [r4, #16]
 8021e50:	f002 fd3e 	bl	80248d0 <mpool_free>
    mpool_free((char*)fs->fb, fs->mempool);
 8021e54:	6821      	ldr	r1, [r4, #0]
 8021e56:	6960      	ldr	r0, [r4, #20]
 8021e58:	f002 fd3a 	bl	80248d0 <mpool_free>
    mpool_free((char*)fs->fc, fs->mempool);
 8021e5c:	6821      	ldr	r1, [r4, #0]
 8021e5e:	69a0      	ldr	r0, [r4, #24]
 8021e60:	f002 fd36 	bl	80248d0 <mpool_free>
    mpool_free((char*)fs->frb, fs->mempool);
 8021e64:	6821      	ldr	r1, [r4, #0]
 8021e66:	69e0      	ldr	r0, [r4, #28]
 8021e68:	f002 fd32 	bl	80248d0 <mpool_free>
    mpool_free((char*)fs->frc, fs->mempool);
 8021e6c:	6821      	ldr	r1, [r4, #0]
 8021e6e:	6a20      	ldr	r0, [r4, #32]
 8021e70:	f002 fd2e 	bl	80248d0 <mpool_free>
    mpool_free((char*)fs->fsig, fs->mempool);
 8021e74:	6821      	ldr	r1, [r4, #0]
 8021e76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8021e78:	f002 fd2a 	bl	80248d0 <mpool_free>
    mpool_free((char*)fs->fsmooth, fs->mempool);
 8021e7c:	6821      	ldr	r1, [r4, #0]
 8021e7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8021e80:	f002 fd26 	bl	80248d0 <mpool_free>
    mpool_free((char*)fs->ftvec, fs->mempool);
 8021e84:	6821      	ldr	r1, [r4, #0]
 8021e86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8021e88:	f002 fd22 	bl	80248d0 <mpool_free>
    mpool_free((char*)fs->fbuff, fs->mempool);
 8021e8c:	6821      	ldr	r1, [r4, #0]
 8021e8e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8021e90:	f002 fd1e 	bl	80248d0 <mpool_free>
    tHighpass_free(&fs->hp);
 8021e94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021e98:	f001 f90c 	bl	80230b4 <tHighpass_free>
    tHighpass_free(&fs->hp2);
 8021e9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021ea0:	f001 f908 	bl	80230b4 <tHighpass_free>
    tFeedbackLeveler_free(&fs->fbl1);
 8021ea4:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8021ea8:	f7fe fbe6 	bl	8020678 <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&fs->fbl2);
 8021eac:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8021eb0:	f7fe fbe2 	bl	8020678 <tFeedbackLeveler_free>
    mpool_free((char*)fs, fs->mempool);
 8021eb4:	6821      	ldr	r1, [r4, #0]
 8021eb6:	4620      	mov	r0, r4
}
 8021eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)fs, fs->mempool);
 8021ebc:	f002 bd08 	b.w	80248d0 <mpool_free>

08021ec0 <tFormantShifter_remove>:
{
    return tFormantShifter_add(fsr, tFormantShifter_remove(fsr, in));
}

float tFormantShifter_remove(tFormantShifter* const fsr, float in)
{
 8021ec0:	b510      	push	{r4, lr}
    _tFormantShifter* fs = *fsr;
 8021ec2:	6804      	ldr	r4, [r0, #0]
    in = tFeedbackLeveler_tick(&fs->fbl1, in);
 8021ec4:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8021ec8:	f7fe fbe6 	bl	8020698 <tFeedbackLeveler_tick>
    in = tHighpass_tick(&fs->hp, in * fs->intensity);
 8021ecc:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 8021ed0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021ed4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8021ed8:	f001 f900 	bl	80230dc <tHighpass_tick>
    

    float fa, fb, fc, foma, falph, ford, flamb, tf, fk;

    ford = fs->ford;
 8021edc:	edd4 7a01 	vldr	s15, [r4, #4]
    foma = (1.0f - falph);
    flamb = fs->flamb;
    
    tf = in;
    
    fa = tf - fs->fhp;
 8021ee0:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    foma = (1.0f - falph);
 8021ee4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    ford = fs->ford;
 8021ee8:	eef8 3ae7 	vcvt.f32.s32	s7, s15
    falph = fs->falph;
 8021eec:	ed94 5a02 	vldr	s10, [r4, #8]
    fa = tf - fs->fhp;
 8021ef0:	ee70 6a66 	vsub.f32	s13, s0, s13
    fs->fhp = tf;
 8021ef4:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    foma = (1.0f - falph);
 8021ef8:	ee75 5ac5 	vsub.f32	s11, s11, s10
    flamb = fs->flamb;
 8021efc:	ed94 3a03 	vldr	s6, [r4, #12]
    fb = fa;
    for(int i = 0; i < ford; i++)
 8021f00:	eef5 3ac0 	vcmpe.f32	s7, #0.0
    fa = tf - fs->fhp;
 8021f04:	eeb0 0a66 	vmov.f32	s0, s13
    for(int i = 0; i < ford; i++)
 8021f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f0c:	dd53      	ble.n	8021fb6 <tFormantShifter_remove+0xf6>
 8021f0e:	2100      	movs	r1, #0
        fc = (fb - fs->fc[i])*flamb + fs->fb[i];
        fs->fc[i] = fc;
        fs->fb[i] = fb;
        fk = fa*fc*foma + fs->fk[i]*falph;
        fs->fk[i] = fk;
        tf = fk/(fs->fsig[i] + 0.000001f);
 8021f10:	eddf 2a29 	vldr	s5, [pc, #164]	; 8021fb8 <tFormantShifter_remove+0xf8>
 8021f14:	008b      	lsls	r3, r1, #2
        fs->fsig[i] = fa*fa*foma + fs->fsig[i]*falph;
 8021f16:	6a62      	ldr	r2, [r4, #36]	; 0x24
    for(int i = 0; i < ford; i++)
 8021f18:	3101      	adds	r1, #1
        fs->fsig[i] = fa*fa*foma + fs->fsig[i]*falph;
 8021f1a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8021f1e:	441a      	add	r2, r3
        fk = fa*fc*foma + fs->fk[i]*falph;
 8021f20:	ee25 6a80 	vmul.f32	s12, s11, s0
    for(int i = 0; i < ford; i++)
 8021f24:	ee07 1a90 	vmov	s15, r1
 8021f28:	eef8 4ae7 	vcvt.f32.s32	s9, s15
        fs->fsig[i] = fa*fa*foma + fs->fsig[i]*falph;
 8021f2c:	edd2 7a00 	vldr	s15, [r2]
 8021f30:	ee65 7a27 	vmul.f32	s15, s10, s15
    for(int i = 0; i < ford; i++)
 8021f34:	eef4 4ae3 	vcmpe.f32	s9, s7
        fs->fsig[i] = fa*fa*foma + fs->fsig[i]*falph;
 8021f38:	eee5 7a87 	vfma.f32	s15, s11, s14
    for(int i = 0; i < ford; i++)
 8021f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        fs->fsig[i] = fa*fa*foma + fs->fsig[i]*falph;
 8021f40:	edc2 7a00 	vstr	s15, [r2]
        fc = (fb - fs->fc[i])*flamb + fs->fb[i];
 8021f44:	e9d4 0205 	ldrd	r0, r2, [r4, #20]
 8021f48:	441a      	add	r2, r3
 8021f4a:	4418      	add	r0, r3
 8021f4c:	edd2 7a00 	vldr	s15, [r2]
 8021f50:	ed90 7a00 	vldr	s14, [r0]
 8021f54:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8021f58:	eea7 7a83 	vfma.f32	s14, s15, s6
        fs->fc[i] = fc;
 8021f5c:	ed82 7a00 	vstr	s14, [r2]
        fs->fb[i] = fb;
 8021f60:	6962      	ldr	r2, [r4, #20]
 8021f62:	441a      	add	r2, r3
 8021f64:	edc2 6a00 	vstr	s13, [r2]
        fk = fa*fc*foma + fs->fk[i]*falph;
 8021f68:	6922      	ldr	r2, [r4, #16]
 8021f6a:	441a      	add	r2, r3
 8021f6c:	edd2 6a00 	vldr	s13, [r2]
 8021f70:	ee65 6a26 	vmul.f32	s13, s10, s13
 8021f74:	eee6 6a07 	vfma.f32	s13, s12, s14
        fs->fk[i] = fk;
 8021f78:	edc2 6a00 	vstr	s13, [r2]
        tf = tf*foma + fs->fsmooth[i]*falph;
 8021f7c:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
        tf = fk/(fs->fsig[i] + 0.000001f);
 8021f80:	4418      	add	r0, r3
        tf = tf*foma + fs->fsmooth[i]*falph;
 8021f82:	441a      	add	r2, r3
        tf = fk/(fs->fsig[i] + 0.000001f);
 8021f84:	ed90 6a00 	vldr	s12, [r0]
        tf = tf*foma + fs->fsmooth[i]*falph;
 8021f88:	edd2 7a00 	vldr	s15, [r2]
        tf = fk/(fs->fsig[i] + 0.000001f);
 8021f8c:	ee36 6a22 	vadd.f32	s12, s12, s5
        tf = tf*foma + fs->fsmooth[i]*falph;
 8021f90:	ee65 7a27 	vmul.f32	s15, s10, s15
        tf = fk/(fs->fsig[i] + 0.000001f);
 8021f94:	ee86 4a86 	vdiv.f32	s8, s13, s12
        fs->fsmooth[i] = tf;
        fs->fbuff[i] = tf;
        fb = fc - tf*fa;
 8021f98:	eef0 6a47 	vmov.f32	s13, s14
        tf = tf*foma + fs->fsmooth[i]*falph;
 8021f9c:	eee5 7a84 	vfma.f32	s15, s11, s8
        fs->fsmooth[i] = tf;
 8021fa0:	edc2 7a00 	vstr	s15, [r2]
        fb = fc - tf*fa;
 8021fa4:	eee7 6ac0 	vfms.f32	s13, s15, s0
        fs->fbuff[i] = tf;
 8021fa8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        fa = fa - tf*fc;
 8021faa:	eea7 0a67 	vfms.f32	s0, s14, s15
        fs->fbuff[i] = tf;
 8021fae:	4413      	add	r3, r2
 8021fb0:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < ford; i++)
 8021fb4:	d4ae      	bmi.n	8021f14 <tFormantShifter_remove+0x54>
    }

    //return fa * 0.1f;
    return fa;
}
 8021fb6:	bd10      	pop	{r4, pc}
 8021fb8:	358637bd 	.word	0x358637bd

08021fbc <tFormantShifter_add>:

float tFormantShifter_add(tFormantShifter* const fsr, float in)
{
 8021fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021fbe:	ed2d 8b02 	vpush	{d8}
    _tFormantShifter* fs = *fsr;
 8021fc2:	6804      	ldr	r4, [r0, #0]
    float fa, fb, fc, ford, flpa, flamb, tf, tf2, f0resp, f1resp, frlamb;
    ford = fs->ford;

    flpa = fs->flpa;
    flamb = fs->flamb;
    tf = fs->shiftFactor * (1.0f+flamb)/(1.0f-flamb);
 8021fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    flamb = fs->flamb;
 8021fc8:	edd4 7a03 	vldr	s15, [r4, #12]
    tf = fs->shiftFactor * (1.0f+flamb)/(1.0f-flamb);
 8021fcc:	ed94 5a13 	vldr	s10, [r4, #76]	; 0x4c
 8021fd0:	ee37 6a87 	vadd.f32	s12, s15, s14
    flpa = fs->flpa;
 8021fd4:	ed94 3a0d 	vldr	s6, [r4, #52]	; 0x34
    tf = fs->shiftFactor * (1.0f+flamb)/(1.0f-flamb);
 8021fd8:	ee77 6a67 	vsub.f32	s13, s14, s15
    ford = fs->ford;
 8021fdc:	edd4 7a01 	vldr	s15, [r4, #4]
    tf = fs->shiftFactor * (1.0f+flamb)/(1.0f-flamb);
 8021fe0:	ee26 6a05 	vmul.f32	s12, s12, s10
    ford = fs->ford;
 8021fe4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tf = fs->shiftFactor * (1.0f+flamb)/(1.0f-flamb);
 8021fe8:	eec6 7a26 	vdiv.f32	s15, s12, s13
    frlamb = (tf-1.0f)/(tf+1.0f);
    
    tf2 = in;
    fa = 0.0f;
    fb = fa;
    for (int i=0; i<ford; i++)
 8021fec:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8021ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    frlamb = (tf-1.0f)/(tf+1.0f);
 8021ff4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8021ff8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021ffc:	ee86 5aa7 	vdiv.f32	s10, s13, s15
    for (int i=0; i<ford; i++)
 8022000:	f340 8107 	ble.w	8022212 <tFormantShifter_add+0x256>
    fb = fa;
 8022004:	eddf 6a87 	vldr	s13, [pc, #540]	; 8022224 <tFormantShifter_add+0x268>
    for (int i=0; i<ford; i++)
 8022008:	2100      	movs	r1, #0
 802200a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    fa = 0.0f;
 802200c:	eef0 7a66 	vmov.f32	s15, s13
 8022010:	008b      	lsls	r3, r1, #2
    for (int i=0; i<ford; i++)
 8022012:	3101      	adds	r1, #1
    {
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8022014:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
    for (int i=0; i<ford; i++)
 8022018:	ee04 1a90 	vmov	s9, r1
        tf = fs->fbuff[i];
        fb = fc - tf*fa;
        fs->ftvec[i] = tf*fc;
 802201c:	441a      	add	r2, r3
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 802201e:	18c6      	adds	r6, r0, r3
 8022020:	441d      	add	r5, r3
        tf = fs->fbuff[i];
 8022022:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    for (int i=0; i<ford; i++)
 8022024:	eef8 4ae4 	vcvt.f32.s32	s9, s9
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8022028:	ed96 6a00 	vldr	s12, [r6]
 802202c:	ed95 7a00 	vldr	s14, [r5]
        tf = fs->fbuff[i];
 8022030:	4418      	add	r0, r3
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8022032:	ee76 6ac6 	vsub.f32	s13, s13, s12
        tf = fs->fbuff[i];
 8022036:	ed90 6a00 	vldr	s12, [r0]
    for (int i=0; i<ford; i++)
 802203a:	eef4 4ae5 	vcmpe.f32	s9, s11
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 802203e:	eea6 7a85 	vfma.f32	s14, s13, s10
    for (int i=0; i<ford; i++)
 8022042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        fs->ftvec[i] = tf*fc;
 8022046:	ee27 4a06 	vmul.f32	s8, s14, s12
        fb = fc - tf*fa;
 802204a:	eea6 7a67 	vfms.f32	s14, s12, s15
        fs->ftvec[i] = tf*fc;
 802204e:	ed82 4a00 	vstr	s8, [r2]
        fa = fa - fs->ftvec[i];
 8022052:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8022054:	4413      	add	r3, r2
        fb = fc - tf*fa;
 8022056:	eef0 6a47 	vmov.f32	s13, s14
        fa = fa - fs->ftvec[i];
 802205a:	ed93 7a00 	vldr	s14, [r3]
 802205e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    for (int i=0; i<ford; i++)
 8022062:	d4d5      	bmi.n	8022010 <tFormantShifter_add+0x54>
 8022064:	eeb1 7a67 	vneg.f32	s14, s15
    }
    tf = -fa;
    for (int i=ford-1; i>=0; i--)
 8022068:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802206c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8022070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022074:	ee17 7a90 	vmov	r7, s15
 8022078:	2f00      	cmp	r7, #0
 802207a:	f2c0 80c2 	blt.w	8022202 <tFormantShifter_add+0x246>
    {
        tf = tf + fs->ftvec[i];
 802207e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8022080:	1c7b      	adds	r3, r7, #1
 8022082:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8022086:	ed71 7a01 	vldmdb	r1!, {s15}
    for (int i=ford-1; i>=0; i--)
 802208a:	428a      	cmp	r2, r1
        tf = tf + fs->ftvec[i];
 802208c:	ee37 7a27 	vadd.f32	s14, s14, s15
    for (int i=ford-1; i>=0; i--)
 8022090:	d1f9      	bne.n	8022086 <tFormantShifter_add+0xca>
    f0resp = tf;
    
    //  second time: compute 1-response
    fa = 1.0f;
    fb = fa;
    for (int i=0; i<ford; i++)
 8022092:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8022096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802209a:	f340 80bf 	ble.w	802221c <tFormantShifter_add+0x260>
    fb = fa;
 802209e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    for (int i=0; i<ford; i++)
 80220a2:	2100      	movs	r1, #0
    fa = 1.0f;
 80220a4:	eef0 7a46 	vmov.f32	s15, s12
 80220a8:	008b      	lsls	r3, r1, #2
    for (int i=0; i<ford; i++)
 80220aa:	3101      	adds	r1, #1
    {
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 80220ac:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
    for (int i=0; i<ford; i++)
 80220b0:	ee04 1a10 	vmov	s8, r1
        tf = fs->fbuff[i];
        fb = fc - tf*fa;
        fs->ftvec[i] = tf*fc;
 80220b4:	441a      	add	r2, r3
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 80220b6:	18c6      	adds	r6, r0, r3
 80220b8:	441d      	add	r5, r3
        tf = fs->fbuff[i];
 80220ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    for (int i=0; i<ford; i++)
 80220bc:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 80220c0:	edd6 4a00 	vldr	s9, [r6]
 80220c4:	edd5 6a00 	vldr	s13, [r5]
        tf = fs->fbuff[i];
 80220c8:	4418      	add	r0, r3
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 80220ca:	ee36 6a64 	vsub.f32	s12, s12, s9
        tf = fs->fbuff[i];
 80220ce:	edd0 4a00 	vldr	s9, [r0]
    for (int i=0; i<ford; i++)
 80220d2:	eeb4 4ae5 	vcmpe.f32	s8, s11
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 80220d6:	eee6 6a05 	vfma.f32	s13, s12, s10
    for (int i=0; i<ford; i++)
 80220da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        fs->ftvec[i] = tf*fc;
 80220de:	ee66 3aa4 	vmul.f32	s7, s13, s9
        fb = fc - tf*fa;
 80220e2:	eee4 6ae7 	vfms.f32	s13, s9, s15
        fs->ftvec[i] = tf*fc;
 80220e6:	edc2 3a00 	vstr	s7, [r2]
        fa = fa - fs->ftvec[i];
 80220ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80220ec:	4413      	add	r3, r2
        fb = fc - tf*fa;
 80220ee:	eeb0 6a66 	vmov.f32	s12, s13
        fa = fa - fs->ftvec[i];
 80220f2:	edd3 6a00 	vldr	s13, [r3]
 80220f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
    for (int i=0; i<ford; i++)
 80220fa:	d4d5      	bmi.n	80220a8 <tFormantShifter_add+0xec>
    }
    tf = -fa;
    for (int i=ford-1; i>=0; i--)
 80220fc:	2f00      	cmp	r7, #0
 80220fe:	eef1 7a67 	vneg.f32	s15, s15
 8022102:	db08      	blt.n	8022116 <tFormantShifter_add+0x15a>
 8022104:	1c7b      	adds	r3, r7, #1
 8022106:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    {
        tf = tf + fs->ftvec[i];
 802210a:	ed73 6a01 	vldmdb	r3!, {s13}
    for (int i=ford-1; i>=0; i--)
 802210e:	429a      	cmp	r2, r3
        tf = tf + fs->ftvec[i];
 8022110:	ee77 7aa6 	vadd.f32	s15, s15, s13
    for (int i=ford-1; i>=0; i--)
 8022114:	d1f9      	bne.n	802210a <tFormantShifter_add+0x14e>
    f1resp = tf;
    
    //  now solve equations for output, based on 0-response and 1-response
    tf = 2.0f*tf2;
    tf2 = tf;
    tf = (1.0f - f1resp + f0resp);
 8022116:	ee77 7a67 	vsub.f32	s15, s14, s15
    if (tf!=0.0f)
 802211a:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 802211e:	eef4 7a66 	vcmp.f32	s15, s13
 8022122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022126:	d066      	beq.n	80221f6 <tFormantShifter_add+0x23a>
    {
        tf2 = (tf2 + f0resp) / tf;
 8022128:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    tf = (1.0f - f1resp + f0resp);
 802212c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        tf2 = (tf2 + f0resp) / tf;
 8022130:	eea0 7a06 	vfma.f32	s14, s0, s12
    tf = (1.0f - f1resp + f0resp);
 8022134:	ee77 7aa6 	vadd.f32	s15, s15, s13
        tf2 = (tf2 + f0resp) / tf;
 8022138:	ee87 0a27 	vdiv.f32	s0, s14, s15
    }
    
    //  third time: update delay registers
    fa = tf2;
    fb = fa;
    for (int i=0; i<ford; i++)
 802213c:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8022140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022144:	dd2b      	ble.n	802219e <tFormantShifter_add+0x1e2>
    fb = fa;
 8022146:	eeb0 6a40 	vmov.f32	s12, s0
    for (int i=0; i<ford; i++)
 802214a:	2100      	movs	r1, #0
    fa = tf2;
 802214c:	eef0 6a40 	vmov.f32	s13, s0
 8022150:	008b      	lsls	r3, r1, #2
    for (int i=0; i<ford; i++)
 8022152:	3101      	adds	r1, #1
    {
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8022154:	e9d4 0207 	ldrd	r0, r2, [r4, #28]
    for (int i=0; i<ford; i++)
 8022158:	ee07 1a90 	vmov	s15, r1
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 802215c:	441a      	add	r2, r3
 802215e:	4418      	add	r0, r3
    for (int i=0; i<ford; i++)
 8022160:	eef8 4ae7 	vcvt.f32.s32	s9, s15
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8022164:	ed92 7a00 	vldr	s14, [r2]
 8022168:	edd0 7a00 	vldr	s15, [r0]
 802216c:	ee36 7a47 	vsub.f32	s14, s12, s14
    for (int i=0; i<ford; i++)
 8022170:	eef4 4ae5 	vcmpe.f32	s9, s11
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8022174:	eee7 7a05 	vfma.f32	s15, s14, s10
    for (int i=0; i<ford; i++)
 8022178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        fs->frc[i] = fc;
 802217c:	edc2 7a00 	vstr	s15, [r2]
        fs->frb[i] = fb;
 8022180:	69e2      	ldr	r2, [r4, #28]
 8022182:	441a      	add	r2, r3
 8022184:	ed82 6a00 	vstr	s12, [r2]
        tf = fs->fbuff[i];
        fb = fc - tf*fa;
 8022188:	eeb0 6a67 	vmov.f32	s12, s15
        tf = fs->fbuff[i];
 802218c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 802218e:	4413      	add	r3, r2
 8022190:	ed93 7a00 	vldr	s14, [r3]
        fb = fc - tf*fa;
 8022194:	eea7 6a66 	vfms.f32	s12, s14, s13
        fa = fa - tf*fc;
 8022198:	eee7 6ac7 	vfms.f32	s13, s15, s14
    for (int i=0; i<ford; i++)
 802219c:	d4d8      	bmi.n	8022150 <tFormantShifter_add+0x194>
    tf = tf + flpa * fs->flp;  // lowpass post-emphasis filter
    fs->flp = tf;
    
    // Bring up the gain slowly when formant correction goes from disabled
    // to enabled, while things stabilize.
    if (fs->fmute>0.5f)
 802219e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    tf = tf + flpa * fs->flp;  // lowpass post-emphasis filter
 80221a2:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
    if (fs->fmute>0.5f)
 80221a6:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
    tf = tf + flpa * fs->flp;  // lowpass post-emphasis filter
 80221aa:	eea7 0a03 	vfma.f32	s0, s14, s6
    if (fs->fmute>0.5f)
 80221ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80221b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fs->flp = tf;
 80221b6:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
    if (fs->fmute>0.5f)
 80221ba:	dd1f      	ble.n	80221fc <tFormantShifter_add+0x240>
    {
        tf = tf*(fs->fmute - 0.5f)*2.0f;
 80221bc:	ee78 7a67 	vsub.f32	s15, s16, s15
 80221c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80221c4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80221c8:	f005 fdec 	bl	8027da4 <tanhf>
    else
    {
        tf = 0.0f;
    }
    tf2 = fs->fmutealph;
    fs->fmute = (1.0f-tf2) + tf2*fs->fmute;
 80221cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80221d0:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
    // now tf is signal output
    // ...and we're done messing with formants
    //tf = tFeedbackLeveler_tick(&fs->fbl2, tf);
    tf = tHighpass_tick(&fs->hp2, tanhf(tf));
 80221d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    fs->fmute = (1.0f-tf2) + tf2*fs->fmute;
 80221d8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80221dc:	eee8 7a07 	vfma.f32	s15, s16, s14
 80221e0:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    tf = tHighpass_tick(&fs->hp2, tanhf(tf));
 80221e4:	f000 ff7a 	bl	80230dc <tHighpass_tick>

    return tf * fs->invIntensity;
 80221e8:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
}
 80221ec:	ecbd 8b02 	vpop	{d8}
    return tf * fs->invIntensity;
 80221f0:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 80221f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tf2 = 0.0f;
 80221f6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8022224 <tFormantShifter_add+0x268>
 80221fa:	e79f      	b.n	802213c <tFormantShifter_add+0x180>
 80221fc:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8022224 <tFormantShifter_add+0x268>
 8022200:	e7e4      	b.n	80221cc <tFormantShifter_add+0x210>
    for (int i=0; i<ford; i++)
 8022202:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8022206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802220a:	dc05      	bgt.n	8022218 <tFormantShifter_add+0x25c>
 802220c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8022210:	e781      	b.n	8022116 <tFormantShifter_add+0x15a>
    for (int i=0; i<ford; i++)
 8022212:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8022224 <tFormantShifter_add+0x268>
 8022216:	e727      	b.n	8022068 <tFormantShifter_add+0xac>
 8022218:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 802221a:	e740      	b.n	802209e <tFormantShifter_add+0xe2>
    for (int i=0; i<ford; i++)
 802221c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8022220:	e771      	b.n	8022106 <tFormantShifter_add+0x14a>
 8022222:	bf00      	nop
 8022224:	00000000 	.word	0x00000000

08022228 <tFormantShifter_setShiftFactor>:

// 1.0f is no change, 2.0f is an octave up, 0.5f is an octave down
void tFormantShifter_setShiftFactor(tFormantShifter* const fsr, float shiftFactor)
{
    _tFormantShifter* fs = *fsr;
 8022228:	6803      	ldr	r3, [r0, #0]
    fs->shiftFactor = shiftFactor;
 802222a:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 802222e:	4770      	bx	lr

08022230 <tFormantShifter_setIntensity>:

void tFormantShifter_setIntensity(tFormantShifter* const fsr, float intensity)
{
 8022230:	b510      	push	{r4, lr}
    _tFormantShifter* fs = *fsr;



    fs->intensity = LEAF_clip(1.0f, intensity, 100.0f);
 8022232:	eef0 0a40 	vmov.f32	s1, s0
 8022236:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 802226c <tFormantShifter_setIntensity+0x3c>
 802223a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    _tFormantShifter* fs = *fsr;
 802223e:	6804      	ldr	r4, [r0, #0]
    fs->intensity = LEAF_clip(1.0f, intensity, 100.0f);
 8022240:	f002 f89e 	bl	8024380 <LEAF_clip>

   // tFeedbackLeveler_setTargetLevel(&fs->fbl1, fs->intensity);
    //tFeedbackLeveler_setTargetLevel(&fs->fbl2, fs->intensity);
    //make sure you don't divide by zero, doofies
    if (fs->intensity != 0.0f)
 8022244:	eeb5 0a40 	vcmp.f32	s0, #0.0
    fs->intensity = LEAF_clip(1.0f, intensity, 100.0f);
 8022248:	ed84 0a14 	vstr	s0, [r4, #80]	; 0x50
    if (fs->intensity != 0.0f)
 802224c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022250:	d104      	bne.n	802225c <tFormantShifter_setIntensity+0x2c>
    {
    	fs->invIntensity = 1.0f/fs->intensity;
    }
    else
    {
    	fs->invIntensity = 1.0f;
 8022252:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022256:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
    }

}
 802225a:	bd10      	pop	{r4, pc}
    	fs->invIntensity = 1.0f/fs->intensity;
 802225c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022260:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022264:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
 8022268:	bd10      	pop	{r4, pc}
 802226a:	bf00      	nop
 802226c:	42c80000 	.word	0x42c80000

08022270 <tADSR4_initToPool>:
}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSR4_initToPool    (tADSR4* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
 8022270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022272:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 8022276:	681d      	ldr	r5, [r3, #0]
{
 8022278:	4614      	mov	r4, r2
 802227a:	4607      	mov	r7, r0
 802227c:	460e      	mov	r6, r1
    _tADSR4* adsr = *adsrenv = (_tADSR4*) mpool_alloc(sizeof(_tADSR4), m);
 802227e:	2050      	movs	r0, #80	; 0x50
 8022280:	4629      	mov	r1, r5
{
 8022282:	eef0 8a61 	vmov.f32	s17, s3
 8022286:	eef0 9a40 	vmov.f32	s19, s0
 802228a:	eeb0 9a60 	vmov.f32	s18, s1
 802228e:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSR4* adsr = *adsrenv = (_tADSR4*) mpool_alloc(sizeof(_tADSR4), m);
 8022292:	f002 fa75 	bl	8024780 <mpool_alloc>

    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->bufferSizeDividedBySampleRateInMs = bufferSize / (leaf.sampleRate * 0.001f);
 8022296:	4b20      	ldr	r3, [pc, #128]	; (8022318 <tADSR4_initToPool+0xa8>)
 8022298:	ee07 4a90 	vmov	s15, r4
    _tADSR4* adsr = *adsrenv = (_tADSR4*) mpool_alloc(sizeof(_tADSR4), m);
 802229c:	6038      	str	r0, [r7, #0]

    adsr->next = 0.0f;

    adsr->whichStage = env_idle;

    adsr->sustain = sustain;
 802229e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    adsr->bufferSizeDividedBySampleRateInMs = bufferSize / (leaf.sampleRate * 0.001f);
 80222a2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    adsr->mempool = m;
 80222a6:	6005      	str	r5, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = bufferSize / (leaf.sampleRate * 0.001f);
 80222a8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 802231c <tADSR4_initToPool+0xac>

    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 80222ac:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = bufferSize / (leaf.sampleRate * 0.001f);
 80222b0:	edd3 6a00 	vldr	s13, [r3]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 80222b4:	1e62      	subs	r2, r4, #1
 80222b6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8022320 <tADSR4_initToPool+0xb0>
    adsr->whichStage = env_idle;
 80222ba:	2300      	movs	r3, #0
    adsr->bufferSizeDividedBySampleRateInMs = bufferSize / (leaf.sampleRate * 0.001f);
 80222bc:	ee66 6aa7 	vmul.f32	s13, s13, s15

    adsr->leakFactor = 1.0f;
 80222c0:	ed80 6a13 	vstr	s12, [r0, #76]	; 0x4c
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80222c4:	fec9 9a87 	vmaxnm.f32	s19, s19, s14
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 80222c8:	fe89 9a07 	vmaxnm.f32	s18, s18, s14
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80222cc:	fec8 1a87 	vmaxnm.f32	s3, s17, s14
 80222d0:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    adsr->bufferSizeDividedBySampleRateInMs = bufferSize / (leaf.sampleRate * 0.001f);
 80222d4:	eec5 7a26 	vdiv.f32	s15, s10, s13
    adsr->sustain = sustain;
 80222d8:	fe88 8a46 	vminnm.f32	s16, s16, s12
    adsr->next = 0.0f;
 80222dc:	ed80 7a05 	vstr	s14, [r0, #20]
    adsr->exp_buff = expBuffer;
 80222e0:	6046      	str	r6, [r0, #4]
    adsr->buff_size = bufferSize;
 80222e2:	6084      	str	r4, [r0, #8]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 80222e4:	60c2      	str	r2, [r0, #12]
    adsr->whichStage = env_idle;
 80222e6:	6283      	str	r3, [r0, #40]	; 0x28
    adsr->sustain = sustain;
 80222e8:	ed80 8a0b 	vstr	s16, [r0, #44]	; 0x2c
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80222ec:	ee87 6aa9 	vdiv.f32	s12, s15, s19
    adsr->bufferSizeDividedBySampleRateInMs = bufferSize / (leaf.sampleRate * 0.001f);
 80222f0:	edc0 7a04 	vstr	s15, [r0, #16]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 80222f4:	eec7 6a89 	vdiv.f32	s13, s15, s18
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80222f8:	ee87 7aa1 	vdiv.f32	s14, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 80222fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8022300:	ed80 6a06 	vstr	s12, [r0, #24]
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8022304:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8022308:	edc0 6a07 	vstr	s13, [r0, #28]
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 802230c:	ed80 7a08 	vstr	s14, [r0, #32]
}
 8022310:	ecbd 8b04 	vpop	{d8-d9}
 8022314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022316:	bf00      	nop
 8022318:	200194a0 	.word	0x200194a0
 802231c:	3a83126f 	.word	0x3a83126f
 8022320:	00000000 	.word	0x00000000

08022324 <tADSR4_free>:

void    tADSR4_free  (tADSR4* const adsrenv)
{
    _tADSR4* adsr = *adsrenv;
 8022324:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)adsr, adsr->mempool);
 8022326:	6801      	ldr	r1, [r0, #0]
 8022328:	f002 bad2 	b.w	80248d0 <mpool_free>

0802232c <tADSR4_setAttack>:
}

void     tADSR4_setAttack(tADSR4* const adsrenv, float attack)
{
    _tADSR4* adsr = *adsrenv;
 802232c:	6803      	ldr	r3, [r0, #0]
    if (attack < 0.0f)
    {
        attack = 0.0f;
    }

    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 802232e:	eddf 7a05 	vldr	s15, [pc, #20]	; 8022344 <tADSR4_setAttack+0x18>
 8022332:	ed93 7a04 	vldr	s14, [r3, #16]
 8022336:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 802233a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802233e:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8022342:	4770      	bx	lr
 8022344:	00000000 	.word	0x00000000

08022348 <tADSR4_setDecay>:

void     tADSR4_setDecay(tADSR4* const adsrenv, float decay)
{
    _tADSR4* adsr = *adsrenv;
 8022348:	6803      	ldr	r3, [r0, #0]

    if (decay < 0.0f)
    {
        decay = 0.0f;
    }
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 802234a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8022360 <tADSR4_setDecay+0x18>
 802234e:	ed93 7a04 	vldr	s14, [r3, #16]
 8022352:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 8022356:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802235a:	edc3 7a07 	vstr	s15, [r3, #28]
}
 802235e:	4770      	bx	lr
 8022360:	00000000 	.word	0x00000000

08022364 <tADSR4_setSustain>:

void     tADSR4_setSustain(tADSR4* const adsrenv, float sustain)
{
    _tADSR4* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8022364:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSR4* adsr = *adsrenv;
 8022368:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 802236a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022372:	dd02      	ble.n	802237a <tADSR4_setSustain+0x16>
 8022374:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 8022378:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 802237a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802237e:	2200      	movs	r2, #0
 8022380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022384:	bf4c      	ite	mi
 8022386:	62da      	strmi	r2, [r3, #44]	; 0x2c
    else                     adsr->sustain = sustain;
 8022388:	ed83 0a0b 	vstrpl	s0, [r3, #44]	; 0x2c
}
 802238c:	4770      	bx	lr
 802238e:	bf00      	nop

08022390 <tADSR4_setRelease>:

void     tADSR4_setRelease(tADSR4* const adsrenv, float release)
{
    _tADSR4* adsr = *adsrenv;
 8022390:	6803      	ldr	r3, [r0, #0]

    if (release < 0.0f)
    {
        release = 0.0f;
    }
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8022392:	eddf 7a05 	vldr	s15, [pc, #20]	; 80223a8 <tADSR4_setRelease+0x18>
 8022396:	ed93 7a04 	vldr	s14, [r3, #16]
 802239a:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 802239e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80223a2:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80223a6:	4770      	bx	lr
 80223a8:	00000000 	.word	0x00000000

080223ac <tADSR4_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSR4_setLeakFactor(tADSR4* const adsrenv, float leakFactor)
{
    _tADSR4* adsr = *adsrenv;
 80223ac:	6803      	ldr	r3, [r0, #0]


    adsr->leakFactor = leakFactor;
 80223ae:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 80223b2:	4770      	bx	lr

080223b4 <tADSR4_on>:

void tADSR4_on(tADSR4* const adsrenv, float velocity)
{
    _tADSR4* adsr = *adsrenv;
 80223b4:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 80223b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80223b8:	b942      	cbnz	r2, 80223cc <tADSR4_on+0x18>
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
    }
    else // Normal start.
    {
        adsr->whichStage = env_attack;
 80223ba:	2101      	movs	r1, #1
    }

    adsr->attackPhase = 0;
 80223bc:	2200      	movs	r2, #0
 80223be:	6299      	str	r1, [r3, #40]	; 0x28
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 80223c0:	ed83 0a0c 	vstr	s0, [r3, #48]	; 0x30
    adsr->attackPhase = 0;
 80223c4:	63da      	str	r2, [r3, #60]	; 0x3c
    adsr->decayPhase = 0;
 80223c6:	641a      	str	r2, [r3, #64]	; 0x40
    adsr->releasePhase = 0;
 80223c8:	645a      	str	r2, [r3, #68]	; 0x44
}
 80223ca:	4770      	bx	lr
        adsr->rampPhase = 0;
 80223cc:	2000      	movs	r0, #0
        adsr->rampPeak = adsr->next;
 80223ce:	695a      	ldr	r2, [r3, #20]
        adsr->whichStage = env_ramp;
 80223d0:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 80223d2:	6498      	str	r0, [r3, #72]	; 0x48
        adsr->rampPeak = adsr->next;
 80223d4:	635a      	str	r2, [r3, #52]	; 0x34
 80223d6:	e7f1      	b.n	80223bc <tADSR4_on+0x8>

080223d8 <tADSR4_off>:

void tADSR4_off(tADSR4* const adsrenv)
{
    _tADSR4* adsr = *adsrenv;
 80223d8:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 80223da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80223dc:	b11a      	cbz	r2, 80223e6 <tADSR4_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 80223de:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 80223e0:	695a      	ldr	r2, [r3, #20]
        adsr->whichStage = env_release;
 80223e2:	6299      	str	r1, [r3, #40]	; 0x28
        adsr->releasePeak = adsr->next;
 80223e4:	639a      	str	r2, [r3, #56]	; 0x38
    }
}
 80223e6:	4770      	bx	lr

080223e8 <tADSR4_tick>:

float   tADSR4_tick(tADSR4* const adsrenv)
{
 80223e8:	b510      	push	{r4, lr}
    _tADSR4* adsr = *adsrenv;
 80223ea:	6804      	ldr	r4, [r0, #0]
{
 80223ec:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
 80223f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80223f2:	3b01      	subs	r3, #1
 80223f4:	2b04      	cmp	r3, #4
 80223f6:	f200 808c 	bhi.w	8022512 <tADSR4_tick+0x12a>
 80223fa:	e8df f003 	tbb	[pc, r3]
 80223fe:	4b22      	.short	0x4b22
 8022400:	6b3e      	.short	0x6b3e
 8022402:	03          	.byte	0x03
 8022403:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 8022404:	edd4 7a03 	vldr	s15, [r4, #12]
 8022408:	ed94 1a12 	vldr	s2, [r4, #72]	; 0x48
 802240c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022410:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8022414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022418:	f340 80e3 	ble.w	80225e2 <tADSR4_tick+0x1fa>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
 802241c:	eddf 7aa0 	vldr	s15, [pc, #640]	; 80226a0 <tADSR4_tick+0x2b8>
                adsr->whichStage = env_attack;
 8022420:	2301      	movs	r3, #1
 8022422:	eeb0 8a67 	vmov.f32	s16, s15
 8022426:	62a3      	str	r3, [r4, #40]	; 0x28
                adsr->next = 0.0f;
 8022428:	edc4 7a05 	vstr	s15, [r4, #20]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 802242c:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 8022430:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->rampPhase += adsr->rampInc;
 8022434:	ee37 1a81 	vadd.f32	s2, s15, s2
 8022438:	ed84 1a12 	vstr	s2, [r4, #72]	; 0x48
}
 802243c:	ecbd 8b02 	vpop	{d8}
 8022440:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 8022442:	edd4 7a03 	vldr	s15, [r4, #12]
 8022446:	ed94 1a0f 	vldr	s2, [r4, #60]	; 0x3c
 802244a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802244e:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
 8022452:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8022456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802245a:	dd61      	ble.n	8022520 <tADSR4_tick+0x138>
                adsr->whichStage = env_decay;
 802245c:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
 802245e:	ed84 8a05 	vstr	s16, [r4, #20]
                adsr->whichStage = env_decay;
 8022462:	62a3      	str	r3, [r4, #40]	; 0x28
            adsr->attackPhase += adsr->attackInc;
 8022464:	edd4 7a06 	vldr	s15, [r4, #24]
}
 8022468:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->attackPhase += adsr->attackInc;
 802246c:	ee37 1a81 	vadd.f32	s2, s15, s2
 8022470:	ed84 1a0f 	vstr	s2, [r4, #60]	; 0x3c
}
 8022474:	ecbd 8b02 	vpop	{d8}
 8022478:	bd10      	pop	{r4, pc}
            adsr->next = adsr->next * adsr->leakFactor;
 802247a:	ed94 8a05 	vldr	s16, [r4, #20]
 802247e:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 8022482:	ee28 8a27 	vmul.f32	s16, s16, s15
}
 8022486:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->next = adsr->next * adsr->leakFactor;
 802248a:	ed84 8a05 	vstr	s16, [r4, #20]
}
 802248e:	ecbd 8b02 	vpop	{d8}
 8022492:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8022494:	edd4 7a03 	vldr	s15, [r4, #12]
 8022498:	ed94 1a10 	vldr	s2, [r4, #64]	; 0x40
 802249c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80224a0:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80224a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224a8:	dd66      	ble.n	8022578 <tADSR4_tick+0x190>
                adsr->next = adsr->gain * adsr->sustain;
 80224aa:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
                adsr->whichStage = env_sustain;
 80224ae:	2303      	movs	r3, #3
                adsr->next = adsr->gain * adsr->sustain;
 80224b0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
                adsr->whichStage = env_sustain;
 80224b4:	62a3      	str	r3, [r4, #40]	; 0x28
                adsr->next = adsr->gain * adsr->sustain;
 80224b6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80224ba:	ed84 8a05 	vstr	s16, [r4, #20]
            adsr->decayPhase += adsr->decayInc;
 80224be:	edd4 7a07 	vldr	s15, [r4, #28]
}
 80224c2:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->decayPhase += adsr->decayInc;
 80224c6:	ee37 1a81 	vadd.f32	s2, s15, s2
 80224ca:	ed84 1a10 	vstr	s2, [r4, #64]	; 0x40
}
 80224ce:	ecbd 8b02 	vpop	{d8}
 80224d2:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 80224d4:	edd4 7a03 	vldr	s15, [r4, #12]
 80224d8:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
 80224dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80224e0:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80224e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224e8:	f340 80a4 	ble.w	8022634 <tADSR4_tick+0x24c>
                adsr->next = 0.0f;
 80224ec:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80226a0 <tADSR4_tick+0x2b8>
                adsr->whichStage = env_idle;
 80224f0:	2300      	movs	r3, #0
 80224f2:	eeb0 8a67 	vmov.f32	s16, s15
 80224f6:	62a3      	str	r3, [r4, #40]	; 0x28
                adsr->next = 0.0f;
 80224f8:	edc4 7a05 	vstr	s15, [r4, #20]
            adsr->releasePhase += adsr->releaseInc;
 80224fc:	edd4 7a08 	vldr	s15, [r4, #32]
}
 8022500:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->releasePhase += adsr->releaseInc;
 8022504:	ee37 1a81 	vadd.f32	s2, s15, s2
 8022508:	ed84 1a11 	vstr	s2, [r4, #68]	; 0x44
}
 802250c:	ecbd 8b02 	vpop	{d8}
 8022510:	bd10      	pop	{r4, pc}
 8022512:	ed94 8a05 	vldr	s16, [r4, #20]
 8022516:	eeb0 0a48 	vmov.f32	s0, s16
 802251a:	ecbd 8b02 	vpop	{d8}
 802251e:	bd10      	pop	{r4, pc}
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8022520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022524:	6862      	ldr	r2, [r4, #4]
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 8022526:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 802252a:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->attackPhase - intPart;
 802252e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8022532:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->attackPhase - intPart;
 8022536:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 802253a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802253e:	f100 80ab 	bmi.w	8022698 <tADSR4_tick+0x2b0>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 8022542:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8022546:	ee17 3a90 	vmov	r3, s15
 802254a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802254e:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
 8022552:	ee16 3a90 	vmov	r3, s13
 8022556:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802255a:	ed92 0a00 	vldr	s0, [r2]
 802255e:	f002 f845 	bl	80245ec <LEAF_interpolation_linear>
 8022562:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022566:	ed94 1a0f 	vldr	s2, [r4, #60]	; 0x3c
 802256a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 802256e:	ee28 8a00 	vmul.f32	s16, s16, s0
 8022572:	ed84 8a05 	vstr	s16, [r4, #20]
 8022576:	e775      	b.n	8022464 <tADSR4_tick+0x7c>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8022578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802257c:	6862      	ldr	r2, [r4, #4]
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 802257e:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8022582:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->decayPhase - intPart;
 8022586:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 802258a:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->decayPhase - intPart;
 802258e:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8022592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022596:	d47c      	bmi.n	8022692 <tADSR4_tick+0x2aa>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 8022598:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 802259c:	ee17 3a90 	vmov	r3, s15
 80225a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80225a4:	edd3 0a00 	vldr	s1, [r3]
                float interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart));
 80225a8:	ee16 3a90 	vmov	r3, s13
 80225ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80225b0:	ed92 0a00 	vldr	s0, [r2]
 80225b4:	f002 f81a 	bl	80245ec <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 80225b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80225bc:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 80225c0:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80225c4:	ee37 7a48 	vsub.f32	s14, s14, s16
 80225c8:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
 80225cc:	ed94 1a10 	vldr	s2, [r4, #64]	; 0x40
 80225d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80225d4:	eea7 8a00 	vfma.f32	s16, s14, s0
 80225d8:	ee27 8a88 	vmul.f32	s16, s15, s16
 80225dc:	ed84 8a05 	vstr	s16, [r4, #20]
 80225e0:	e76d      	b.n	80224be <tADSR4_tick+0xd6>
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 80225e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80225e6:	6862      	ldr	r2, [r4, #4]
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 80225e8:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 80225ec:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->rampPhase - intPart;
 80225f0:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 80225f4:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->rampPhase - intPart;
 80225f8:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 80225fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022600:	d444      	bmi.n	802268c <tADSR4_tick+0x2a4>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8022602:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8022606:	ee17 3a90 	vmov	r3, s15
 802260a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802260e:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
 8022612:	ee16 3a90 	vmov	r3, s13
 8022616:	ed94 8a0d 	vldr	s16, [r4, #52]	; 0x34
 802261a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802261e:	ed92 0a00 	vldr	s0, [r2]
 8022622:	f001 ffe3 	bl	80245ec <LEAF_interpolation_linear>
 8022626:	ee28 8a00 	vmul.f32	s16, s16, s0
 802262a:	ed94 1a12 	vldr	s2, [r4, #72]	; 0x48
 802262e:	ed84 8a05 	vstr	s16, [r4, #20]
 8022632:	e6fb      	b.n	802242c <tADSR4_tick+0x44>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8022634:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022638:	6862      	ldr	r2, [r4, #4]
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 802263a:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 802263e:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->releasePhase - intPart;
 8022642:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8022646:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->releasePhase - intPart;
 802264a:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 802264e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022652:	d418      	bmi.n	8022686 <tADSR4_tick+0x29e>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 8022654:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8022658:	ee17 3a90 	vmov	r3, s15
 802265c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022660:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
 8022664:	ee16 3a90 	vmov	r3, s13
 8022668:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
 802266c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8022670:	ed92 0a00 	vldr	s0, [r2]
 8022674:	f001 ffba 	bl	80245ec <LEAF_interpolation_linear>
 8022678:	ee28 8a00 	vmul.f32	s16, s16, s0
 802267c:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
 8022680:	ed84 8a05 	vstr	s16, [r4, #20]
 8022684:	e73a      	b.n	80224fc <tADSR4_tick+0x114>
                    secondValue = 0.0f;
 8022686:	eddf 0a06 	vldr	s1, [pc, #24]	; 80226a0 <tADSR4_tick+0x2b8>
 802268a:	e7eb      	b.n	8022664 <tADSR4_tick+0x27c>
                    secondValue = 0.0f;
 802268c:	eddf 0a04 	vldr	s1, [pc, #16]	; 80226a0 <tADSR4_tick+0x2b8>
 8022690:	e7bf      	b.n	8022612 <tADSR4_tick+0x22a>
                    secondValue = 0.0f;
 8022692:	eddf 0a03 	vldr	s1, [pc, #12]	; 80226a0 <tADSR4_tick+0x2b8>
 8022696:	e787      	b.n	80225a8 <tADSR4_tick+0x1c0>
                    secondValue = 0.0f;
 8022698:	eddf 0a01 	vldr	s1, [pc, #4]	; 80226a0 <tADSR4_tick+0x2b8>
 802269c:	e759      	b.n	8022552 <tADSR4_tick+0x16a>
 802269e:	bf00      	nop
 80226a0:	00000000 	.word	0x00000000

080226a4 <tADSR4_tickNoInterp>:

float   tADSR4_tickNoInterp(tADSR4* const adsrenv)
{
    _tADSR4* adsr = *adsrenv;
 80226a4:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 80226a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80226a8:	3a01      	subs	r2, #1
 80226aa:	2a04      	cmp	r2, #4
 80226ac:	d872      	bhi.n	8022794 <tADSR4_tickNoInterp+0xf0>
 80226ae:	e8df f002 	tbb	[pc, r2]
 80226b2:	3d1c      	.short	0x3d1c
 80226b4:	5934      	.short	0x5934
 80226b6:	03          	.byte	0x03
 80226b7:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 80226b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80226bc:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80226c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80226c4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80226c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226cc:	f340 808b 	ble.w	80227e6 <tADSR4_tickNoInterp+0x142>
            {
                adsr->whichStage = env_attack;
 80226d0:	2201      	movs	r2, #1
                adsr->next = 0.0f;
 80226d2:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8022820 <tADSR4_tickNoInterp+0x17c>
                adsr->whichStage = env_attack;
 80226d6:	629a      	str	r2, [r3, #40]	; 0x28
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 80226d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80226dc:	ed83 0a05 	vstr	s0, [r3, #20]
 80226e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80226e4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
            break;
 80226e8:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 80226ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80226ee:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80226f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80226f6:	ed93 0a0c 	vldr	s0, [r3, #48]	; 0x30
 80226fa:	eef4 6ac7 	vcmpe.f32	s13, s14
 80226fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022702:	dd4a      	ble.n	802279a <tADSR4_tickNoInterp+0xf6>
            {
                adsr->whichStage = env_decay;
 8022704:	2202      	movs	r2, #2
 8022706:	629a      	str	r2, [r3, #40]	; 0x28
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 8022708:	edd3 7a06 	vldr	s15, [r3, #24]
 802270c:	ed83 0a05 	vstr	s0, [r3, #20]
 8022710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022714:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
            break;
 8022718:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->next = adsr->next * adsr->leakFactor;
 802271a:	ed93 0a05 	vldr	s0, [r3, #20]
 802271e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8022722:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022726:	ed83 0a05 	vstr	s0, [r3, #20]
            break;
 802272a:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 802272c:	edd3 7a03 	vldr	s15, [r3, #12]
 8022730:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8022734:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8022738:	ed93 0a0b 	vldr	s0, [r3, #44]	; 0x2c
 802273c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8022740:	eef4 6ac7 	vcmpe.f32	s13, s14
 8022744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022748:	dd37      	ble.n	80227ba <tADSR4_tickNoInterp+0x116>
                adsr->next = adsr->gain * adsr->sustain;
 802274a:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
 802274e:	2203      	movs	r2, #3
 8022750:	629a      	str	r2, [r3, #40]	; 0x28
            adsr->decayPhase += adsr->decayInc;
 8022752:	edd3 7a07 	vldr	s15, [r3, #28]
 8022756:	ed83 0a05 	vstr	s0, [r3, #20]
 802275a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802275e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
            break;
 8022762:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8022764:	edd3 7a03 	vldr	s15, [r3, #12]
 8022768:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 802276c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8022770:	eef4 6ac7 	vcmpe.f32	s13, s14
 8022774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022778:	dd43      	ble.n	8022802 <tADSR4_tickNoInterp+0x15e>
            {
                adsr->whichStage = env_idle;
 802277a:	2200      	movs	r2, #0
                adsr->next = 0.0f;
 802277c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8022820 <tADSR4_tickNoInterp+0x17c>
                adsr->whichStage = env_idle;
 8022780:	629a      	str	r2, [r3, #40]	; 0x28
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 8022782:	edd3 7a08 	vldr	s15, [r3, #32]
 8022786:	ed83 0a05 	vstr	s0, [r3, #20]
 802278a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802278e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
            break;
    }
    return adsr->next;
}
 8022792:	4770      	bx	lr
 8022794:	ed93 0a05 	vldr	s0, [r3, #20]
 8022798:	4770      	bx	lr
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 802279a:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 802279e:	685a      	ldr	r2, [r3, #4]
 80227a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80227a4:	ee17 1a10 	vmov	r1, s14
 80227a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80227ac:	ed92 7a00 	vldr	s14, [r2]
 80227b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80227b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80227b8:	e7a6      	b.n	8022708 <tADSR4_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 80227ba:	eefc 5ae6 	vcvt.u32.f32	s11, s13
 80227be:	685a      	ldr	r2, [r3, #4]
 80227c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80227c4:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 80227c8:	ee15 1a90 	vmov	r1, s11
 80227cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80227d0:	ee37 7a40 	vsub.f32	s14, s14, s0
 80227d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80227d8:	ed92 6a00 	vldr	s12, [r2]
 80227dc:	eea6 0a07 	vfma.f32	s0, s12, s14
 80227e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80227e4:	e7b5      	b.n	8022752 <tADSR4_tickNoInterp+0xae>
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 80227e6:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 80227ea:	685a      	ldr	r2, [r3, #4]
 80227ec:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80227f0:	ee17 1a10 	vmov	r1, s14
 80227f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80227f8:	ed92 0a00 	vldr	s0, [r2]
 80227fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022800:	e76a      	b.n	80226d8 <tADSR4_tickNoInterp+0x34>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 8022802:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8022806:	685a      	ldr	r2, [r3, #4]
 8022808:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 802280c:	ee17 1a10 	vmov	r1, s14
 8022810:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8022814:	ed92 0a00 	vldr	s0, [r2]
 8022818:	ee20 0a27 	vmul.f32	s0, s0, s15
 802281c:	e7b1      	b.n	8022782 <tADSR4_tickNoInterp+0xde>
 802281e:	bf00      	nop
 8022820:	00000000 	.word	0x00000000

08022824 <tRamp_init>:


/////-----------------
/* Ramp */
void    tRamp_init(tRamp* const r, float time, int samples_per_tick)
{
 8022824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tRamp_initToPool(r, time, samples_per_tick, &leaf.mempool);
}

void    tRamp_initToPool    (tRamp* const r, float time, int samples_per_tick, tMempool* const mp)
{
    _tMempool* m = *mp;
 8022826:	4d17      	ldr	r5, [pc, #92]	; (8022884 <tRamp_init+0x60>)
{
 8022828:	4607      	mov	r7, r0
 802282a:	460c      	mov	r4, r1
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 802282c:	2024      	movs	r0, #36	; 0x24
    _tMempool* m = *mp;
 802282e:	69ae      	ldr	r6, [r5, #24]
{
 8022830:	ed2d 8b02 	vpush	{d8}
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 8022834:	4631      	mov	r1, r6
{
 8022836:	eeb0 8a40 	vmov.f32	s16, s0
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 802283a:	f001 ffa1 	bl	8024780 <mpool_alloc>
    ramp->mempool = m;
    
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 802283e:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8022888 <tRamp_init+0x64>
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 8022842:	6038      	str	r0, [r7, #0]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8022844:	ee07 4a90 	vmov	s15, r4
    ramp->mempool = m;
 8022848:	6006      	str	r6, [r0, #0]
    ramp->curr = 0.0f;
 802284a:	2300      	movs	r3, #0
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 802284c:	edd5 6a00 	vldr	s13, [r5]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8022850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
    else
    {
        ramp->time = time;
    }
    ramp->samples_per_tick = samples_per_tick;
 8022854:	6204      	str	r4, [r0, #32]
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 8022856:	ee86 7a26 	vdiv.f32	s14, s12, s13
    ramp->curr = 0.0f;
 802285a:	6103      	str	r3, [r0, #16]
    ramp->dest = 0.0f;
 802285c:	6143      	str	r3, [r0, #20]
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (float)ramp->samples_per_tick;
    ramp->inc = (ramp->dest - ramp->curr) * ramp->factor;
 802285e:	6043      	str	r3, [r0, #4]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8022860:	ee67 7a87 	vmul.f32	s15, s15, s14
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 8022864:	ed80 7a02 	vstr	s14, [r0, #8]
 8022868:	fe88 0a27 	vmaxnm.f32	s0, s16, s15
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (float)ramp->samples_per_tick;
 802286c:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8022870:	ed80 0a06 	vstr	s0, [r0, #24]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8022874:	edc0 7a03 	vstr	s15, [r0, #12]
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (float)ramp->samples_per_tick;
 8022878:	ed80 7a07 	vstr	s14, [r0, #28]
}
 802287c:	ecbd 8b02 	vpop	{d8}
 8022880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022882:	bf00      	nop
 8022884:	200194a0 	.word	0x200194a0
 8022888:	4479ffff 	.word	0x4479ffff

0802288c <tRamp_initToPool>:
{
 802288c:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
 802288e:	6815      	ldr	r5, [r2, #0]
{
 8022890:	460c      	mov	r4, r1
 8022892:	4606      	mov	r6, r0
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 8022894:	2024      	movs	r0, #36	; 0x24
 8022896:	4629      	mov	r1, r5
{
 8022898:	ed2d 8b02 	vpush	{d8}
 802289c:	eeb0 8a40 	vmov.f32	s16, s0
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 80228a0:	f001 ff6e 	bl	8024780 <mpool_alloc>
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 80228a4:	4b11      	ldr	r3, [pc, #68]	; (80228ec <tRamp_initToPool+0x60>)
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 80228a6:	ee07 4a90 	vmov	s15, r4
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 80228aa:	6030      	str	r0, [r6, #0]
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 80228ac:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80228f0 <tRamp_initToPool+0x64>
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 80228b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    ramp->mempool = m;
 80228b4:	6005      	str	r5, [r0, #0]
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 80228b6:	edd3 6a00 	vldr	s13, [r3]
    ramp->curr = 0.0f;
 80228ba:	2300      	movs	r3, #0
    ramp->samples_per_tick = samples_per_tick;
 80228bc:	6204      	str	r4, [r0, #32]
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 80228be:	ee86 7a26 	vdiv.f32	s14, s12, s13
    ramp->curr = 0.0f;
 80228c2:	6103      	str	r3, [r0, #16]
    ramp->dest = 0.0f;
 80228c4:	6143      	str	r3, [r0, #20]
    ramp->inc = (ramp->dest - ramp->curr) * ramp->factor;
 80228c6:	6043      	str	r3, [r0, #4]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 80228c8:	ee67 7a87 	vmul.f32	s15, s15, s14
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 80228cc:	ed80 7a02 	vstr	s14, [r0, #8]
 80228d0:	fe87 0a88 	vmaxnm.f32	s0, s15, s16
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (float)ramp->samples_per_tick;
 80228d4:	ee87 7a80 	vdiv.f32	s14, s15, s0
 80228d8:	ed80 0a06 	vstr	s0, [r0, #24]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 80228dc:	edc0 7a03 	vstr	s15, [r0, #12]
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (float)ramp->samples_per_tick;
 80228e0:	ed80 7a07 	vstr	s14, [r0, #28]
}
 80228e4:	ecbd 8b02 	vpop	{d8}
 80228e8:	bd70      	pop	{r4, r5, r6, pc}
 80228ea:	bf00      	nop
 80228ec:	200194a0 	.word	0x200194a0
 80228f0:	4479ffff 	.word	0x4479ffff

080228f4 <tRamp_free>:

void    tRamp_free (tRamp* const r)
{
    _tRamp* ramp = *r;
 80228f4:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)ramp, ramp->mempool);
 80228f6:	6801      	ldr	r1, [r0, #0]
 80228f8:	f001 bfea 	b.w	80248d0 <mpool_free>

080228fc <tRamp_setDest>:

}

void     tRamp_setDest(tRamp* const ramp, float dest)
{
    _tRamp* r = *ramp;
 80228fc:	6803      	ldr	r3, [r0, #0]
    r->dest = dest;
    r->inc = (r->dest - r->curr) * r->factor;
 80228fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8022902:	ed93 7a07 	vldr	s14, [r3, #28]
 8022906:	ee70 7a67 	vsub.f32	s15, s0, s15
    r->dest = dest;
 802290a:	ed83 0a05 	vstr	s0, [r3, #20]
    r->inc = (r->dest - r->curr) * r->factor;
 802290e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022912:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8022916:	4770      	bx	lr

08022918 <tRamp_setVal>:

void     tRamp_setVal(tRamp* const ramp, float val)
{
    _tRamp* r = *ramp;
 8022918:	6803      	ldr	r3, [r0, #0]
    r->curr = val;
    r->inc = (r->dest - r->curr) * r->factor;
 802291a:	edd3 7a05 	vldr	s15, [r3, #20]
 802291e:	ed93 7a07 	vldr	s14, [r3, #28]
 8022922:	ee77 7ac0 	vsub.f32	s15, s15, s0
    r->curr = val;
 8022926:	ed83 0a04 	vstr	s0, [r3, #16]
    r->inc = (r->dest - r->curr) * r->factor;
 802292a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802292e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8022932:	4770      	bx	lr

08022934 <tRamp_tick>:

float   tRamp_tick(tRamp* const ramp)
{
    _tRamp* r = *ramp;
 8022934:	6803      	ldr	r3, [r0, #0]
    
    r->curr += r->inc;
 8022936:	edd3 7a01 	vldr	s15, [r3, #4]
 802293a:	ed93 0a04 	vldr	s0, [r3, #16]
    
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 802293e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8022942:	ed93 7a05 	vldr	s14, [r3, #20]
    r->curr += r->inc;
 8022946:	ee37 0a80 	vadd.f32	s0, s15, s0
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 802294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    r->curr += r->inc;
 802294e:	ed83 0a04 	vstr	s0, [r3, #16]
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 8022952:	dd04      	ble.n	802295e <tRamp_tick+0x2a>
 8022954:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8022958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802295c:	da0a      	bge.n	8022974 <tRamp_tick+0x40>
 802295e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8022962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022966:	d504      	bpl.n	8022972 <tRamp_tick+0x3e>
 8022968:	eeb4 0a47 	vcmp.f32	s0, s14
 802296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022970:	d900      	bls.n	8022974 <tRamp_tick+0x40>
		r->inc = 0.0f;
		r->curr=r->dest;
	}
    
    return r->curr;
}
 8022972:	4770      	bx	lr
		r->inc = 0.0f;
 8022974:	2200      	movs	r2, #0
		r->curr=r->dest;
 8022976:	eeb0 0a47 	vmov.f32	s0, s14
 802297a:	ed83 7a04 	vstr	s14, [r3, #16]
		r->inc = 0.0f;
 802297e:	605a      	str	r2, [r3, #4]
}
 8022980:	4770      	bx	lr
 8022982:	bf00      	nop

08022984 <tRamp_sample>:

float   tRamp_sample(tRamp* const ramp)
{
    _tRamp* r = *ramp;
    return r->curr;
 8022984:	6803      	ldr	r3, [r0, #0]
}
 8022986:	ed93 0a04 	vldr	s0, [r3, #16]
 802298a:	4770      	bx	lr

0802298c <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor)
{	// factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 802298c:	b538      	push	{r3, r4, r5, lr}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf.mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 802298e:	4b12      	ldr	r3, [pc, #72]	; (80229d8 <tExpSmooth_init+0x4c>)
{	// factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8022990:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8022992:	2014      	movs	r0, #20
{	// factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8022994:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8022998:	699c      	ldr	r4, [r3, #24]
{	// factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 802299a:	eef0 8a40 	vmov.f32	s17, s0
 802299e:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80229a2:	4621      	mov	r1, r4
 80229a4:	f001 feec 	bl	8024780 <mpool_alloc>
 80229a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80229ac:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80229dc <tExpSmooth_init+0x50>
 80229b0:	6028      	str	r0, [r5, #0]
 80229b2:	fec8 0a67 	vminnm.f32	s1, s16, s15
 80229b6:	fec0 0a87 	vmaxnm.f32	s1, s1, s14
    smooth->curr=val;
    smooth->dest=val;
    if (factor<0) factor=0;
    if (factor>1) factor=1;
    smooth->factor=factor;
    smooth->oneminusfactor=1.0f-factor;
 80229ba:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 80229be:	6004      	str	r4, [r0, #0]
    smooth->curr=val;
 80229c0:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest=val;
 80229c4:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->factor=factor;
 80229c8:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor=1.0f-factor;
 80229cc:	edc0 7a02 	vstr	s15, [r0, #8]
}
 80229d0:	ecbd 8b02 	vpop	{d8}
 80229d4:	bd38      	pop	{r3, r4, r5, pc}
 80229d6:	bf00      	nop
 80229d8:	200194a0 	.word	0x200194a0
 80229dc:	00000000 	.word	0x00000000

080229e0 <tExpSmooth_initToPool>:
{
 80229e0:	b538      	push	{r3, r4, r5, lr}
 80229e2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80229e6:	680c      	ldr	r4, [r1, #0]
{
 80229e8:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80229ea:	2014      	movs	r0, #20
{
 80229ec:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80229f0:	4621      	mov	r1, r4
{
 80229f2:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80229f6:	f001 fec3 	bl	8024780 <mpool_alloc>
 80229fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80229fe:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8022a28 <tExpSmooth_initToPool+0x48>
 8022a02:	6028      	str	r0, [r5, #0]
 8022a04:	fec8 0a67 	vminnm.f32	s1, s16, s15
 8022a08:	fec0 0a87 	vmaxnm.f32	s1, s1, s14
    smooth->oneminusfactor=1.0f-factor;
 8022a0c:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8022a10:	6004      	str	r4, [r0, #0]
    smooth->curr=val;
 8022a12:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest=val;
 8022a16:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->factor=factor;
 8022a1a:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor=1.0f-factor;
 8022a1e:	edc0 7a02 	vstr	s15, [r0, #8]
}
 8022a22:	ecbd 8b02 	vpop	{d8}
 8022a26:	bd38      	pop	{r3, r4, r5, pc}
 8022a28:	00000000 	.word	0x00000000

08022a2c <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 8022a2c:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)smooth, smooth->mempool);
 8022a2e:	6801      	ldr	r1, [r0, #0]
 8022a30:	f001 bf4e 	b.w	80248d0 <mpool_free>

08022a34 <tExpSmooth_setFactor>:
}

void     tExpSmooth_setFactor(tExpSmooth* const expsmooth, float factor)
{	// factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8022a34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022a38:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8022a54 <tExpSmooth_setFactor+0x20>
    _tExpSmooth* smooth = *expsmooth;
 8022a3c:	6803      	ldr	r3, [r0, #0]
 8022a3e:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8022a42:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
	if (factor<0)
		factor=0;
	else
		if (factor>1) factor=1;
	smooth->factor=factor;
	smooth->oneminusfactor=1.0f-factor;
 8022a46:	ee77 7ac0 	vsub.f32	s15, s15, s0
	smooth->factor=factor;
 8022a4a:	ed83 0a01 	vstr	s0, [r3, #4]
	smooth->oneminusfactor=1.0f-factor;
 8022a4e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8022a52:	4770      	bx	lr
 8022a54:	00000000 	.word	0x00000000

08022a58 <tExpSmooth_setDest>:

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
 8022a58:	6803      	ldr	r3, [r0, #0]
	smooth->dest=dest;
 8022a5a:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8022a5e:	4770      	bx	lr

08022a60 <tExpSmooth_setValAndDest>:
	smooth->curr=val;
}

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, float val)
{
    _tExpSmooth* smooth = *expsmooth;
 8022a60:	6803      	ldr	r3, [r0, #0]
	smooth->curr=val;
 8022a62:	ed83 0a03 	vstr	s0, [r3, #12]
	smooth->dest=val;
 8022a66:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8022a6a:	4770      	bx	lr

08022a6c <tExpSmooth_tick>:

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 8022a6c:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor*smooth->dest+smooth->oneminusfactor*smooth->curr;
 8022a6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8022a72:	ed93 0a02 	vldr	s0, [r3, #8]
 8022a76:	ed93 7a01 	vldr	s14, [r3, #4]
 8022a7a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022a7e:	edd3 7a04 	vldr	s15, [r3, #16]
 8022a82:	eea7 0a27 	vfma.f32	s0, s14, s15
 8022a86:	ed83 0a03 	vstr	s0, [r3, #12]
    return smooth->curr;
}
 8022a8a:	4770      	bx	lr

08022a8c <tSlide_initToPool>:
{
	tSlide_initToPool    (sl, upSlide, downSlide, &leaf.mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
 8022a8c:	b538      	push	{r3, r4, r5, lr}
 8022a8e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8022a92:	680c      	ldr	r4, [r1, #0]
{
 8022a94:	4605      	mov	r5, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8022a96:	201c      	movs	r0, #28
{
 8022a98:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8022a9c:	4621      	mov	r1, r4
{
 8022a9e:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8022aa2:	f001 fe6d 	bl	8024780 <mpool_alloc>

    if (downSlide < 1.0f)
    {
    	downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8022aa6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8022aaa:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8022aac:	6028      	str	r0, [r5, #0]
    s->mempool = m;
 8022aae:	6004      	str	r4, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8022ab0:	fec8 8aa7 	vmaxnm.f32	s17, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8022ab4:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 8022ab8:	eec7 6aa8 	vdiv.f32	s13, s15, s17
    s->prevIn = 0.0f;
 8022abc:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8022abe:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8022ac0:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8022ac2:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8022ac4:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 8022ac8:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8022acc:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8022ad0:	ecbd 8b02 	vpop	{d8}
 8022ad4:	bd38      	pop	{r3, r4, r5, pc}
 8022ad6:	bf00      	nop

08022ad8 <tSlide_free>:

void    tSlide_free  (tSlide* const sl)
{
    _tSlide* s = *sl;
 8022ad8:	6800      	ldr	r0, [r0, #0]

    mpool_free((char*)s, s->mempool);
 8022ada:	6801      	ldr	r1, [r0, #0]
 8022adc:	f001 bef8 	b.w	80248d0 <mpool_free>

08022ae0 <tSlide_setDownSlide>:
}

void tSlide_setDownSlide(tSlide* const sl, float downSlide)
{
	_tSlide* s = *sl;
	s->invDownSlide = 1.0f / downSlide;
 8022ae0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSlide* s = *sl;
 8022ae4:	6803      	ldr	r3, [r0, #0]
	s->invDownSlide = 1.0f / downSlide;
 8022ae6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8022aea:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8022aee:	4770      	bx	lr

08022af0 <tSlide_setDest>:

void tSlide_setDest(tSlide* const sl, float dest)
{
	_tSlide* s = *sl;
 8022af0:	6803      	ldr	r3, [r0, #0]
	s->dest = dest;
 8022af2:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8022af6:	4770      	bx	lr

08022af8 <tSlide_tickNoInput>:

float tSlide_tickNoInput(tSlide* const sl)
{
	_tSlide* s = *sl;
 8022af8:	6803      	ldr	r3, [r0, #0]
	float in = s->dest;

	if (in >= s->prevOut)
 8022afa:	edd3 7a01 	vldr	s15, [r3, #4]
	float in = s->dest;
 8022afe:	ed93 7a06 	vldr	s14, [r3, #24]
	if (in >= s->prevOut)
 8022b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022b06:	ee77 6a67 	vsub.f32	s13, s14, s15
 8022b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	{
		s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8022b0e:	bf94      	ite	ls
 8022b10:	ed93 6a04 	vldrls	s12, [r3, #16]
	}
	else
	{
		s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8022b14:	ed93 6a05 	vldrhi	s12, [r3, #20]
 8022b18:	eee6 7a26 	vfma.f32	s15, s12, s13
	}
#ifdef NO_DENORMAL_CHECK
#else
	if (s->currentOut < VSF) s->currentOut = 0.0f;
 8022b1c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8022b58 <tSlide_tickNoInput+0x60>
 8022b20:	eef4 7ae6 	vcmpe.f32	s15, s13
 8022b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b28:	d50c      	bpl.n	8022b44 <tSlide_tickNoInput+0x4c>
 8022b2a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8022b5c <tSlide_tickNoInput+0x64>
#endif
	s->prevIn = in;
 8022b2e:	ed83 7a03 	vstr	s14, [r3, #12]
	if (s->currentOut < VSF) s->currentOut = 0.0f;
 8022b32:	eef0 7a66 	vmov.f32	s15, s13
 8022b36:	edc3 6a02 	vstr	s13, [r3, #8]
	s->prevOut = s->currentOut;
	return s->currentOut;
}
 8022b3a:	eeb0 0a67 	vmov.f32	s0, s15
	s->prevOut = s->currentOut;
 8022b3e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8022b42:	4770      	bx	lr
 8022b44:	edc3 7a02 	vstr	s15, [r3, #8]
 8022b48:	eeb0 0a67 	vmov.f32	s0, s15
	s->prevIn = in;
 8022b4c:	ed83 7a03 	vstr	s14, [r3, #12]
	s->prevOut = s->currentOut;
 8022b50:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8022b54:	4770      	bx	lr
 8022b56:	bf00      	nop
 8022b58:	006ce3ee 	.word	0x006ce3ee
 8022b5c:	00000000 	.word	0x00000000

08022b60 <tAllpass_initToPool>:
{
    tAllpass_initToPool(ft, initDelay, maxDelay, &leaf.mempool);
}

void    tAllpass_initToPool     (tAllpass* const ft, float initDelay, uint32_t maxDelay, tMempool* const mp)
{
 8022b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022b64:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8022b68:	6814      	ldr	r4, [r2, #0]
{
 8022b6a:	4615      	mov	r5, r2
 8022b6c:	4607      	mov	r7, r0
 8022b6e:	4688      	mov	r8, r1
 8022b70:	eeb0 8a40 	vmov.f32	s16, s0
    _tAllpass* f = *ft = (_tAllpass*) mpool_alloc(sizeof(_tAllpass), m);
 8022b74:	4621      	mov	r1, r4
 8022b76:	2010      	movs	r0, #16
    f->mempool = m;
    
    f->gain = 0.7f;
 8022b78:	4e09      	ldr	r6, [pc, #36]	; (8022ba0 <tAllpass_initToPool+0x40>)
    _tAllpass* f = *ft = (_tAllpass*) mpool_alloc(sizeof(_tAllpass), m);
 8022b7a:	f001 fe01 	bl	8024780 <mpool_alloc>
    
    f->lastOut = 0.0f;
    
    tLinearDelay_initToPool(&f->delay, initDelay, maxDelay, mp);
 8022b7e:	462a      	mov	r2, r5
    _tAllpass* f = *ft = (_tAllpass*) mpool_alloc(sizeof(_tAllpass), m);
 8022b80:	4603      	mov	r3, r0
    f->lastOut = 0.0f;
 8022b82:	2500      	movs	r5, #0
    _tAllpass* f = *ft = (_tAllpass*) mpool_alloc(sizeof(_tAllpass), m);
 8022b84:	6038      	str	r0, [r7, #0]
    tLinearDelay_initToPool(&f->delay, initDelay, maxDelay, mp);
 8022b86:	eeb0 0a48 	vmov.f32	s0, s16
    f->mempool = m;
 8022b8a:	6004      	str	r4, [r0, #0]
    tLinearDelay_initToPool(&f->delay, initDelay, maxDelay, mp);
 8022b8c:	4641      	mov	r1, r8
    f->gain = 0.7f;
 8022b8e:	605e      	str	r6, [r3, #4]
    tLinearDelay_initToPool(&f->delay, initDelay, maxDelay, mp);
 8022b90:	3008      	adds	r0, #8
    f->lastOut = 0.0f;
 8022b92:	60dd      	str	r5, [r3, #12]
}
 8022b94:	ecbd 8b02 	vpop	{d8}
 8022b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    tLinearDelay_initToPool(&f->delay, initDelay, maxDelay, mp);
 8022b9c:	f7fc beb4 	b.w	801f908 <tLinearDelay_initToPool>
 8022ba0:	3f333333 	.word	0x3f333333

08022ba4 <tAllpass_free>:

void    tAllpass_free  (tAllpass* const ft)
{
 8022ba4:	b510      	push	{r4, lr}
    _tAllpass* f = *ft;
 8022ba6:	6804      	ldr	r4, [r0, #0]
    
    tLinearDelay_free(&f->delay);
 8022ba8:	f104 0008 	add.w	r0, r4, #8
 8022bac:	f7fc ff22 	bl	801f9f4 <tLinearDelay_free>
    mpool_free((char*)f, f->mempool);
 8022bb0:	6821      	ldr	r1, [r4, #0]
 8022bb2:	4620      	mov	r0, r4
}
 8022bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)f, f->mempool);
 8022bb8:	f001 be8a 	b.w	80248d0 <mpool_free>

08022bbc <tAllpass_setDelay>:

void    tAllpass_setDelay(tAllpass* const ft, float delay)
{
    _tAllpass* f = *ft;
    
    tLinearDelay_setDelay(&f->delay, delay);
 8022bbc:	6800      	ldr	r0, [r0, #0]
 8022bbe:	3008      	adds	r0, #8
 8022bc0:	f7fc bfaa 	b.w	801fb18 <tLinearDelay_setDelay>

08022bc4 <tAllpass_setGain>:
}

void    tAllpass_setGain(tAllpass* const ft, float gain)
{
    _tAllpass* f = *ft;
 8022bc4:	6803      	ldr	r3, [r0, #0]
    
    f->gain = gain;
 8022bc6:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8022bca:	4770      	bx	lr

08022bcc <tAllpass_tick>:

float   tAllpass_tick(tAllpass* const ft, float input)
{
 8022bcc:	b510      	push	{r4, lr}
 8022bce:	ed2d 8b02 	vpush	{d8}
    _tAllpass* f = *ft;
 8022bd2:	6804      	ldr	r4, [r0, #0]
{
 8022bd4:	eeb0 8a40 	vmov.f32	s16, s0
    
    float s1 = (-f->gain) * f->lastOut + input;
    
    float s2 = tLinearDelay_tick(&f->delay, s1) + (f->gain) * input;
 8022bd8:	edd4 7a03 	vldr	s15, [r4, #12]
 8022bdc:	f104 0008 	add.w	r0, r4, #8
 8022be0:	ed94 7a01 	vldr	s14, [r4, #4]
 8022be4:	eea7 0a67 	vfms.f32	s0, s14, s15
 8022be8:	f7fc ff1e 	bl	801fa28 <tLinearDelay_tick>
 8022bec:	edd4 7a01 	vldr	s15, [r4, #4]
 8022bf0:	eea7 0a88 	vfma.f32	s0, s15, s16
    
    f->lastOut = s2;
 8022bf4:	ed84 0a03 	vstr	s0, [r4, #12]
    
    return f->lastOut;
}
 8022bf8:	ecbd 8b02 	vpop	{d8}
 8022bfc:	bd10      	pop	{r4, pc}
 8022bfe:	bf00      	nop

08022c00 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf.mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, float freq, tMempool* const mp)
{
 8022c00:	b570      	push	{r4, r5, r6, lr}
 8022c02:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8022c06:	680e      	ldr	r6, [r1, #0]
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    
    f->gain = 1.0f;
 8022c08:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
{
 8022c0c:	4605      	mov	r5, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8022c0e:	2020      	movs	r0, #32
 8022c10:	4631      	mov	r1, r6
{
 8022c12:	eef0 8a40 	vmov.f32	s17, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8022c16:	f001 fdb3 	bl	8024780 <mpool_alloc>
}

void        tOnePole_setFreq        (tOnePole* const ft, float freq)
{
    _tOnePole* f = *ft;
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 8022c1a:	4b12      	ldr	r3, [pc, #72]	; (8022c64 <tOnePole_initToPool+0x64>)
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8022c1c:	6028      	str	r0, [r5, #0]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8022c1e:	eeb0 1a48 	vmov.f32	s2, s16
    f->gain = 1.0f;
 8022c22:	ed80 8a01 	vstr	s16, [r0, #4]
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8022c26:	4604      	mov	r4, r0
    f->a0 = 1.0;
 8022c28:	ed80 8a02 	vstr	s16, [r0, #8]
    f->mempool = m;
 8022c2c:	6006      	str	r6, [r0, #0]
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 8022c2e:	edd3 0a03 	vldr	s1, [r3, #12]
    _tOnePole* f = *ft;
 8022c32:	682d      	ldr	r5, [r5, #0]
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 8022c34:	ee68 0aa0 	vmul.f32	s1, s17, s1
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8022c38:	eddf 8a0b 	vldr	s17, [pc, #44]	; 8022c68 <tOnePole_initToPool+0x68>
 8022c3c:	eeb0 0a68 	vmov.f32	s0, s17
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 8022c40:	edc5 0a04 	vstr	s1, [r5, #16]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8022c44:	f001 fb9c 	bl	8024380 <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 8022c48:	ee38 8a40 	vsub.f32	s16, s16, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8022c4c:	ed85 0a04 	vstr	s0, [r5, #16]
    f->a1 = 1.0f - f->b0;
 8022c50:	ed85 8a03 	vstr	s16, [r5, #12]
    f->lastIn = 0.0f;
 8022c54:	edc4 8a06 	vstr	s17, [r4, #24]
    f->lastOut = 0.0f;
 8022c58:	edc4 8a07 	vstr	s17, [r4, #28]
}
 8022c5c:	ecbd 8b02 	vpop	{d8}
 8022c60:	bd70      	pop	{r4, r5, r6, pc}
 8022c62:	bf00      	nop
 8022c64:	200194a0 	.word	0x200194a0
 8022c68:	00000000 	.word	0x00000000

08022c6c <tOnePole_free>:
    _tOnePole* f = *ft;
 8022c6c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 8022c6e:	6801      	ldr	r1, [r0, #0]
 8022c70:	f001 be2e 	b.w	80248d0 <mpool_free>

08022c74 <tOnePole_setFreq>:
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 8022c74:	4b0b      	ldr	r3, [pc, #44]	; (8022ca4 <tOnePole_setFreq+0x30>)
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8022c76:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 8022c7a:	b510      	push	{r4, lr}
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 8022c7c:	edd3 0a03 	vldr	s1, [r3, #12]
    _tOnePole* f = *ft;
 8022c80:	6804      	ldr	r4, [r0, #0]
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 8022c82:	ee60 0a20 	vmul.f32	s1, s0, s1
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8022c86:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8022ca8 <tOnePole_setFreq+0x34>
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 8022c8a:	edc4 0a04 	vstr	s1, [r4, #16]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8022c8e:	f001 fb77 	bl	8024380 <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 8022c92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8022c96:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a1 = 1.0f - f->b0;
 8022c9a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8022c9e:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8022ca2:	bd10      	pop	{r4, pc}
 8022ca4:	200194a0 	.word	0x200194a0
 8022ca8:	00000000 	.word	0x00000000

08022cac <tOnePole_tick>:
    f->gain = gain;
}

float   tOnePole_tick(tOnePole* const ft, float input)
{
    _tOnePole* f = *ft;
 8022cac:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8022cae:	ed93 6a07 	vldr	s12, [r3, #28]
    float in = input * f->gain;
 8022cb2:	ed93 7a01 	vldr	s14, [r3, #4]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8022cb6:	edd3 7a03 	vldr	s15, [r3, #12]
    float in = input * f->gain;
 8022cba:	ee20 7a07 	vmul.f32	s14, s0, s14
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8022cbe:	edd3 6a04 	vldr	s13, [r3, #16]
 8022cc2:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
 8022cc6:	ed83 7a06 	vstr	s14, [r3, #24]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8022cca:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
 8022cce:	ed83 0a07 	vstr	s0, [r3, #28]
    
    return out;
}
 8022cd2:	4770      	bx	lr

08022cd4 <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as floating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, float freq, float Q)
{
 8022cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 8022cd8:	4f38      	ldr	r7, [pc, #224]	; (8022dbc <tSVF_init+0xe8>)
{
 8022cda:	460e      	mov	r6, r1
 8022cdc:	4681      	mov	r9, r0
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8022cde:	203c      	movs	r0, #60	; 0x3c
    svf->mempool = m;

    svf->type = type;

    svf->ic1eq = 0;
 8022ce0:	2500      	movs	r5, #0
{
 8022ce2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8022ce6:	f8d7 8018 	ldr.w	r8, [r7, #24]
{
 8022cea:	eef0 8a40 	vmov.f32	s17, s0
 8022cee:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8022cf2:	4641      	mov	r1, r8
 8022cf4:	f001 fd44 	bl	8024780 <mpool_alloc>
 8022cf8:	f8c9 0000 	str.w	r0, [r9]
    svf->mempool = m;
 8022cfc:	f8c0 8000 	str.w	r8, [r0]
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8022d00:	4604      	mov	r4, r0
    svf->type = type;
 8022d02:	7106      	strb	r6, [r0, #4]
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 8022d04:	edd7 7a01 	vldr	s15, [r7, #4]
 8022d08:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8022dc0 <tSVF_init+0xec>
    svf->Q = Q;
 8022d0c:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 8022d10:	ee27 0a80 	vmul.f32	s0, s15, s0
    svf->cutoff = freq;
 8022d14:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->ic1eq = 0;
 8022d18:	6105      	str	r5, [r0, #16]
    svf->ic2eq = 0;
 8022d1a:	6145      	str	r5, [r0, #20]
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 8022d1c:	ee20 0a28 	vmul.f32	s0, s0, s17
 8022d20:	f005 f818 	bl	8027d54 <tanf>
    svf->k = 1.0f/Q;
 8022d24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 8022d28:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->a3 = svf->g*svf->a2;
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cL = 1.0f;

    if (type == SVFTypeLowpass)
 8022d2c:	2e01      	cmp	r6, #1
    svf->cH = 0.0f;
 8022d2e:	62e5      	str	r5, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
 8022d30:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cB = 0.0f;
 8022d34:	6325      	str	r5, [r4, #48]	; 0x30
    svf->cL = 1.0f;
 8022d36:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022d3a:	ee70 6a07 	vadd.f32	s13, s0, s14
    svf->k = 1.0f/Q;
 8022d3e:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022d42:	eeb0 7a67 	vmov.f32	s14, s15
 8022d46:	eea0 7a26 	vfma.f32	s14, s0, s13
 8022d4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
    svf->a2 = svf->g*svf->a1;
 8022d4e:	ee20 7a26 	vmul.f32	s14, s0, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022d52:	edc4 6a08 	vstr	s13, [r4, #32]
    svf->a3 = svf->g*svf->a2;
 8022d56:	ee20 0a07 	vmul.f32	s0, s0, s14
    svf->a2 = svf->g*svf->a1;
 8022d5a:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8022d5e:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
 8022d62:	d016      	beq.n	8022d92 <tSVF_init+0xbe>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 8022d64:	2e02      	cmp	r6, #2
 8022d66:	d00c      	beq.n	8022d82 <tSVF_init+0xae>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }

    else if (type == SVFTypeHighpass)
 8022d68:	b1c6      	cbz	r6, 8022d9c <tSVF_init+0xc8>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -1.0f;
    }

    else if (type == SVFTypeNotch)
 8022d6a:	2e03      	cmp	r6, #3
 8022d6c:	d01f      	beq.n	8022dae <tSVF_init+0xda>
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }


    else if (type == SVFTypePeak)
 8022d6e:	2e04      	cmp	r6, #4
 8022d70:	d10b      	bne.n	8022d8a <tSVF_init+0xb6>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8022d72:	4a14      	ldr	r2, [pc, #80]	; (8022dc4 <tSVF_init+0xf0>)
        svf->cL = -2.0f;
 8022d74:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 8022d78:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 8022d7c:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
 8022d7e:	6363      	str	r3, [r4, #52]	; 0x34
}
 8022d80:	e003      	b.n	8022d8a <tSVF_init+0xb6>
        svf->cB = 1.0f;
 8022d82:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        svf->cBK = 0.0f;
 8022d86:	63a5      	str	r5, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 8022d88:	6365      	str	r5, [r4, #52]	; 0x34
}
 8022d8a:	ecbd 8b02 	vpop	{d8}
 8022d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        svf->cBK = 0.0f;
 8022d92:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8022d94:	ecbd 8b02 	vpop	{d8}
 8022d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        svf->cBK = -1.0f;
 8022d9c:	4b09      	ldr	r3, [pc, #36]	; (8022dc4 <tSVF_init+0xf0>)
        svf->cH = 1.0f;
 8022d9e:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 8022da2:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
 8022da4:	6363      	str	r3, [r4, #52]	; 0x34
}
 8022da6:	ecbd 8b02 	vpop	{d8}
 8022daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        svf->cBK = -1.0f;
 8022dae:	4b05      	ldr	r3, [pc, #20]	; (8022dc4 <tSVF_init+0xf0>)
        svf->cH = 1.0f;
 8022db0:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cL = 0.0f;
 8022db4:	6365      	str	r5, [r4, #52]	; 0x34
        svf->cBK = -1.0f;
 8022db6:	63a3      	str	r3, [r4, #56]	; 0x38
 8022db8:	e7e7      	b.n	8022d8a <tSVF_init+0xb6>
 8022dba:	bf00      	nop
 8022dbc:	200194a0 	.word	0x200194a0
 8022dc0:	40490fdb 	.word	0x40490fdb
 8022dc4:	bf800000 	.word	0xbf800000

08022dc8 <tSVF_free>:
    }
}

void    tSVF_free   (tSVF* const svff)
{
    _tSVF* svf = *svff;
 8022dc8:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)svf, svf->mempool);
 8022dca:	6801      	ldr	r1, [r0, #0]
 8022dcc:	f001 bd80 	b.w	80248d0 <mpool_free>

08022dd0 <tSVF_tick>:
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
 8022dd0:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8022dd2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 8022dd6:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8022dda:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8022dde:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8022de2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
 8022de6:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8022dea:	edd3 2a0a 	vldr	s5, [r3, #40]	; 0x28
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8022dee:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8022df2:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8022df6:	ed93 3a08 	vldr	s6, [r3, #32]
 8022dfa:	ee67 7a84 	vmul.f32	s15, s15, s8
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8022dfe:	ed93 2a07 	vldr	s4, [r3, #28]
 8022e02:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
 8022e06:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8022e0a:	eea2 5a23 	vfma.f32	s10, s4, s7
 8022e0e:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8022e12:	eee3 7a06 	vfma.f32	s15, s6, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8022e16:	eee2 5a84 	vfma.f32	s11, s5, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8022e1a:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8022e1e:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8022e22:	eed5 6aa4 	vfnms.f32	s13, s11, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8022e26:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8022e2a:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8022e2e:	edc3 6a05 	vstr	s13, [r3, #20]
}
 8022e32:	eea3 7a80 	vfma.f32	s14, s7, s0
 8022e36:	eeb0 0a47 	vmov.f32	s0, s14
 8022e3a:	4770      	bx	lr

08022e3c <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, float freq)
{
    _tSVF* svf = *svff;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 8022e3c:	4b14      	ldr	r3, [pc, #80]	; (8022e90 <tSVF_setFreq+0x54>)
 8022e3e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8022e94 <tSVF_setFreq+0x58>
{
 8022e42:	b510      	push	{r4, lr}
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 8022e44:	edd3 7a01 	vldr	s15, [r3, #4]
    _tSVF* svf = *svff;
 8022e48:	6804      	ldr	r4, [r0, #0]
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 8022e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->cutoff = freq;
 8022e4e:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 8022e52:	ee27 0a80 	vmul.f32	s0, s15, s0
 8022e56:	f004 ff7d 	bl	8027d54 <tanf>
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022e5e:	edd4 7a07 	vldr	s15, [r4, #28]
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 8022e62:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022e66:	ee70 7a27 	vadd.f32	s15, s0, s15
 8022e6a:	eeb0 7a66 	vmov.f32	s14, s13
 8022e6e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8022e72:	eef0 7a47 	vmov.f32	s15, s14
 8022e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    svf->a2 = svf->g * svf->a1;
 8022e7a:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022e7e:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a3 = svf->g * svf->a2;
 8022e82:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
 8022e86:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8022e8a:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
}
 8022e8e:	bd10      	pop	{r4, pc}
 8022e90:	200194a0 	.word	0x200194a0
 8022e94:	40490fdb 	.word	0x40490fdb

08022e98 <tEfficientSVF_initToPool>:
{
    tEfficientSVF_initToPool(svff, type, input, Q, &leaf.mempool);
}

void    tEfficientSVF_initToPool    (tEfficientSVF* const svff, SVFType type, uint16_t input, float Q, tMempool* const mp)
{
 8022e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022e9a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8022e9e:	681c      	ldr	r4, [r3, #0]
{
 8022ea0:	4607      	mov	r7, r0
 8022ea2:	460d      	mov	r5, r1
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 8022ea4:	202c      	movs	r0, #44	; 0x2c
 8022ea6:	4621      	mov	r1, r4
{
 8022ea8:	4616      	mov	r6, r2
 8022eaa:	eeb0 8a40 	vmov.f32	s16, s0
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 8022eae:	f001 fc67 	bl	8024780 <mpool_alloc>
    
    svf->ic1eq = 0;
    svf->ic2eq = 0;
    
    svf->g = __leaf_table_filtertan[input];
    svf->k = 1.0f/Q;
 8022eb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    svf->g = __leaf_table_filtertan[input];
 8022eb6:	4a14      	ldr	r2, [pc, #80]	; (8022f08 <tEfficientSVF_initToPool+0x70>)
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 8022eb8:	6038      	str	r0, [r7, #0]
    svf->ic1eq = 0;
 8022eba:	2300      	movs	r3, #0
    svf->g = __leaf_table_filtertan[input];
 8022ebc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    svf->mempool = m;
 8022ec0:	6004      	str	r4, [r0, #0]
    svf->k = 1.0f/Q;
 8022ec2:	eec7 6a08 	vdiv.f32	s13, s14, s16
    svf->type = type;
 8022ec6:	7105      	strb	r5, [r0, #4]
    svf->g = __leaf_table_filtertan[input];
 8022ec8:	edd2 7a00 	vldr	s15, [r2]
    svf->ic1eq = 0;
 8022ecc:	6103      	str	r3, [r0, #16]
    svf->g = __leaf_table_filtertan[input];
 8022ece:	edc0 7a06 	vstr	s15, [r0, #24]
    svf->ic2eq = 0;
 8022ed2:	6143      	str	r3, [r0, #20]
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 8022ed4:	ee37 6aa6 	vadd.f32	s12, s15, s13
    svf->k = 1.0f/Q;
 8022ed8:	edc0 6a07 	vstr	s13, [r0, #28]
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 8022edc:	eef0 6a47 	vmov.f32	s13, s14
 8022ee0:	eee7 6a86 	vfma.f32	s13, s15, s12
 8022ee4:	eeb0 6a66 	vmov.f32	s12, s13
 8022ee8:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g*svf->a1;
 8022eec:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 8022ef0:	edc0 6a08 	vstr	s13, [r0, #32]
    svf->a3 = svf->g*svf->a2;
 8022ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g*svf->a1;
 8022ef8:	ed80 7a09 	vstr	s14, [r0, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8022efc:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
}
 8022f00:	ecbd 8b02 	vpop	{d8}
 8022f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022f06:	bf00      	nop
 8022f08:	0802ca7c 	.word	0x0802ca7c

08022f0c <tEfficientSVF_free>:

void    tEfficientSVF_free (tEfficientSVF* const svff)
{
    _tEfficientSVF* svf = *svff;
 8022f0c:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)svf, svf->mempool);
 8022f0e:	6801      	ldr	r1, [r0, #0]
 8022f10:	f001 bcde 	b.w	80248d0 <mpool_free>

08022f14 <tEfficientSVF_tick>:
}

float   tEfficientSVF_tick(tEfficientSVF* const svff, float v0)
{
    _tEfficientSVF* svf = *svff;
 8022f14:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8022f16:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 8022f1a:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8022f1e:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8022f22:	eeb0 7a66 	vmov.f32	s14, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8022f26:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
 8022f2a:	ee70 5a66 	vsub.f32	s11, s0, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8022f2e:	ed93 4a08 	vldr	s8, [r3, #32]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8022f32:	edd3 4a0a 	vldr	s9, [r3, #40]	; 0x28
 8022f36:	eea6 7a27 	vfma.f32	s14, s12, s15
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    if (svf->type == SVFTypeLowpass)        return v2;
 8022f3a:	791a      	ldrb	r2, [r3, #4]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8022f3c:	ee67 7aa5 	vmul.f32	s15, s15, s11
    if (svf->type == SVFTypeLowpass)        return v2;
 8022f40:	2a01      	cmp	r2, #1
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8022f42:	eee4 7a06 	vfma.f32	s15, s8, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8022f46:	eea4 7aa5 	vfma.f32	s14, s9, s11
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8022f4a:	ee97 6a85 	vfnms.f32	s12, s15, s10
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8022f4e:	ee77 5a07 	vadd.f32	s11, s14, s14
 8022f52:	ee75 6ae6 	vsub.f32	s13, s11, s13
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8022f56:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8022f5a:	edc3 6a05 	vstr	s13, [r3, #20]
    if (svf->type == SVFTypeLowpass)        return v2;
 8022f5e:	d008      	beq.n	8022f72 <tEfficientSVF_tick+0x5e>
    else if (svf->type == SVFTypeBandpass)  return v1;
 8022f60:	2a02      	cmp	r2, #2
 8022f62:	d009      	beq.n	8022f78 <tEfficientSVF_tick+0x64>
    else if (svf->type == SVFTypeHighpass)  return v0 - (svf->k * v1) - v2;
 8022f64:	b16a      	cbz	r2, 8022f82 <tEfficientSVF_tick+0x6e>
    else if (svf->type == SVFTypeNotch)     return v0 - (svf->k * v1);
 8022f66:	2a03      	cmp	r2, #3
 8022f68:	d014      	beq.n	8022f94 <tEfficientSVF_tick+0x80>
    else if (svf->type == SVFTypePeak)      return v0 - (svf->k * v1) - (2.0f * v2);
 8022f6a:	2a04      	cmp	r2, #4
 8022f6c:	d019      	beq.n	8022fa2 <tEfficientSVF_tick+0x8e>
    else                                    return 0.0f;
 8022f6e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8022fb0 <tEfficientSVF_tick+0x9c>
    
}
 8022f72:	eeb0 0a47 	vmov.f32	s0, s14
 8022f76:	4770      	bx	lr
    else if (svf->type == SVFTypeBandpass)  return v1;
 8022f78:	eeb0 7a67 	vmov.f32	s14, s15
}
 8022f7c:	eeb0 0a47 	vmov.f32	s0, s14
 8022f80:	4770      	bx	lr
    else if (svf->type == SVFTypeHighpass)  return v0 - (svf->k * v1) - v2;
 8022f82:	edd3 6a07 	vldr	s13, [r3, #28]
 8022f86:	eea6 0ae7 	vfms.f32	s0, s13, s15
 8022f8a:	ee30 7a47 	vsub.f32	s14, s0, s14
}
 8022f8e:	eeb0 0a47 	vmov.f32	s0, s14
 8022f92:	4770      	bx	lr
    else if (svf->type == SVFTypeNotch)     return v0 - (svf->k * v1);
 8022f94:	ed93 7a07 	vldr	s14, [r3, #28]
 8022f98:	eea7 0a67 	vfms.f32	s0, s14, s15
 8022f9c:	eeb0 7a40 	vmov.f32	s14, s0
 8022fa0:	e7e7      	b.n	8022f72 <tEfficientSVF_tick+0x5e>
    else if (svf->type == SVFTypePeak)      return v0 - (svf->k * v1) - (2.0f * v2);
 8022fa2:	ed93 7a07 	vldr	s14, [r3, #28]
 8022fa6:	eea7 0a67 	vfms.f32	s0, s14, s15
 8022faa:	ee30 7a65 	vsub.f32	s14, s0, s11
 8022fae:	e7e0      	b.n	8022f72 <tEfficientSVF_tick+0x5e>
 8022fb0:	00000000 	.word	0x00000000

08022fb4 <tEfficientSVF_setFreq>:

void     tEfficientSVF_setFreq(tEfficientSVF* const svff, uint16_t input)
{
    _tEfficientSVF* svf = *svff;
    
    svf->g = __leaf_table_filtertan[input];
 8022fb4:	4a10      	ldr	r2, [pc, #64]	; (8022ff8 <tEfficientSVF_setFreq+0x44>)
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022fb6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    _tEfficientSVF* svf = *svff;
 8022fba:	6803      	ldr	r3, [r0, #0]
    svf->g = __leaf_table_filtertan[input];
 8022fbc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022fc0:	ed93 7a07 	vldr	s14, [r3, #28]
 8022fc4:	eef0 6a46 	vmov.f32	s13, s12
    svf->g = __leaf_table_filtertan[input];
 8022fc8:	edd1 7a00 	vldr	s15, [r1]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022fcc:	ee37 7a87 	vadd.f32	s14, s15, s14
    svf->g = __leaf_table_filtertan[input];
 8022fd0:	edc3 7a06 	vstr	s15, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022fd4:	eee7 6a87 	vfma.f32	s13, s15, s14
 8022fd8:	eeb0 7a66 	vmov.f32	s14, s13
 8022fdc:	eec6 6a07 	vdiv.f32	s13, s12, s14
    svf->a2 = svf->g * svf->a1;
 8022fe0:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022fe4:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 8022fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 8022fec:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8022ff0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8022ff4:	4770      	bx	lr
 8022ff6:	bf00      	nop
 8022ff8:	0802ca7c 	.word	0x0802ca7c

08022ffc <tEfficientSVF_setQ>:

void     tEfficientSVF_setQ(tEfficientSVF* const svff, float Q)
{
    _tEfficientSVF* svf = *svff;
    
    svf->k = 1.0f/Q;
 8022ffc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tEfficientSVF* svf = *svff;
 8023000:	6803      	ldr	r3, [r0, #0]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8023002:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
 8023006:	ee87 0a00 	vdiv.f32	s0, s14, s0
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 802300a:	eeb0 6a47 	vmov.f32	s12, s14
 802300e:	ee70 6a27 	vadd.f32	s13, s0, s15
    svf->k = 1.0f/Q;
 8023012:	ed83 0a07 	vstr	s0, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8023016:	eea7 6aa6 	vfma.f32	s12, s15, s13
 802301a:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 802301e:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8023022:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 8023026:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 802302a:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 802302e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8023032:	4770      	bx	lr

08023034 <tHighpass_init>:

/* Highpass */
void    tHighpass_init(tHighpass* const ft, float freq)
{
 8023034:	b570      	push	{r4, r5, r6, lr}
    tHighpass_initToPool(ft, freq, &leaf.mempool);
}

void    tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 8023036:	4c0e      	ldr	r4, [pc, #56]	; (8023070 <tHighpass_init+0x3c>)
{
 8023038:	4606      	mov	r6, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 802303a:	2014      	movs	r0, #20
    _tMempool* m = *mp;
 802303c:	69a5      	ldr	r5, [r4, #24]
{
 802303e:	ed2d 8b02 	vpush	{d8}
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8023042:	4629      	mov	r1, r5
{
 8023044:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8023048:	f001 fbf0 	bl	802482c <mpool_calloc>
    f->mempool = m;
    
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 802304c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8023050:	6030      	str	r0, [r6, #0]
    f->ys = 0.0f;
 8023052:	2300      	movs	r3, #0
    f->mempool = m;
 8023054:	6005      	str	r5, [r0, #0]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 8023056:	ed94 7a03 	vldr	s14, [r4, #12]
    f->xs = 0.0f;
    
    f->frequency = freq;
 802305a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 802305e:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->ys = 0.0f;
 8023062:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 8023064:	6043      	str	r3, [r0, #4]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 8023066:	edc0 7a03 	vstr	s15, [r0, #12]
}
 802306a:	ecbd 8b02 	vpop	{d8}
 802306e:	bd70      	pop	{r4, r5, r6, pc}
 8023070:	200194a0 	.word	0x200194a0

08023074 <tHighpass_initToPool>:
{
 8023074:	b538      	push	{r3, r4, r5, lr}
 8023076:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 802307a:	680c      	ldr	r4, [r1, #0]
{
 802307c:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 802307e:	2014      	movs	r0, #20
{
 8023080:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8023084:	4621      	mov	r1, r4
 8023086:	f001 fbd1 	bl	802482c <mpool_calloc>
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 802308a:	4b09      	ldr	r3, [pc, #36]	; (80230b0 <tHighpass_initToPool+0x3c>)
 802308c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8023090:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8023092:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 8023094:	ed93 7a03 	vldr	s14, [r3, #12]
    f->ys = 0.0f;
 8023098:	2300      	movs	r3, #0
    f->frequency = freq;
 802309a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 802309e:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->ys = 0.0f;
 80230a2:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 80230a4:	6043      	str	r3, [r0, #4]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 80230a6:	edc0 7a03 	vstr	s15, [r0, #12]
}
 80230aa:	ecbd 8b02 	vpop	{d8}
 80230ae:	bd38      	pop	{r3, r4, r5, pc}
 80230b0:	200194a0 	.word	0x200194a0

080230b4 <tHighpass_free>:

void    tHighpass_free  (tHighpass* const ft)
{
    _tHighpass* f = *ft;
 80230b4:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
 80230b6:	6801      	ldr	r1, [r0, #0]
 80230b8:	f001 bc0a 	b.w	80248d0 <mpool_free>

080230bc <tHighpass_setFreq>:

void     tHighpass_setFreq(tHighpass* const ft, float freq)
{
    _tHighpass* f = *ft;
    f->frequency = freq;
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 80230bc:	4a06      	ldr	r2, [pc, #24]	; (80230d8 <tHighpass_setFreq+0x1c>)
 80230be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
 80230c2:	6803      	ldr	r3, [r0, #0]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 80230c4:	ed92 7a03 	vldr	s14, [r2, #12]
    f->frequency = freq;
 80230c8:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 80230cc:	eee7 7a40 	vfms.f32	s15, s14, s0
 80230d0:	edc3 7a03 	vstr	s15, [r3, #12]
    
}
 80230d4:	4770      	bx	lr
 80230d6:	bf00      	nop
 80230d8:	200194a0 	.word	0x200194a0

080230dc <tHighpass_tick>:
}

// From JOS DC Blocker
float   tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 80230dc:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 80230de:	edd3 7a01 	vldr	s15, [r3, #4]
 80230e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80230e6:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 80230ea:	ed83 0a01 	vstr	s0, [r3, #4]
    f->ys = x - f->xs + f->R * f->ys;
 80230ee:	eed6 7a87 	vfnms.f32	s15, s13, s14
 80230f2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80230f6:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 80230fa:	4770      	bx	lr

080230fc <tVZFilter_initToPool>:
{
	tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf.mempool);
}

void    tVZFilter_initToPool     (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth, tMempool* const mp)
{
 80230fc:	b570      	push	{r4, r5, r6, lr}
 80230fe:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 8023102:	6814      	ldr	r4, [r2, #0]
{
 8023104:	4605      	mov	r5, r0
 8023106:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8023108:	2044      	movs	r0, #68	; 0x44
 802310a:	4621      	mov	r1, r4
{
 802310c:	eef0 8a40 	vmov.f32	s17, s0
 8023110:	eeb0 8a60 	vmov.f32	s16, s1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8023114:	f001 fb34 	bl	8024780 <mpool_alloc>
	f->invG    = 1.0f/ONE_OVER_SQRT2;
	f->B    = bandWidth;
	f->m    = 0.0f;
	f->s1 = 0.0f;
	f->s2 = 0.0f;
	f->sr = leaf.sampleRate;
 8023118:	4bc1      	ldr	r3, [pc, #772]	; (8023420 <tVZFilter_initToPool+0x324>)
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 802311a:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 802311c:	6004      	str	r4, [r0, #0]
	f->type = type;
 802311e:	7106      	strb	r6, [r0, #4]
	f->sr = leaf.sampleRate;
 8023120:	6819      	ldr	r1, [r3, #0]
	f->inv_sr = leaf.invSampleRate;
 8023122:	685a      	ldr	r2, [r3, #4]
	f->m    = 0.0f;
 8023124:	2300      	movs	r3, #0
	f->invG    = 1.0f/ONE_OVER_SQRT2;
 8023126:	4cbf      	ldr	r4, [pc, #764]	; (8023424 <tVZFilter_initToPool+0x328>)
	f->G    = ONE_OVER_SQRT2;
 8023128:	4ebf      	ldr	r6, [pc, #764]	; (8023428 <tVZFilter_initToPool+0x32c>)
	f->fc   = freq;
 802312a:	edc0 8a0a 	vstr	s17, [r0, #40]	; 0x28
	f->m    = 0.0f;
 802312e:	6383      	str	r3, [r0, #56]	; 0x38
	f->s1 = 0.0f;
 8023130:	6083      	str	r3, [r0, #8]
	f->s2 = 0.0f;
 8023132:	60c3      	str	r3, [r0, #12]
	f->B    = bandWidth;
 8023134:	ed80 8a0d 	vstr	s16, [r0, #52]	; 0x34
	f->G    = ONE_OVER_SQRT2;
 8023138:	62c6      	str	r6, [r0, #44]	; 0x2c
	f->invG    = 1.0f/ONE_OVER_SQRT2;
 802313a:	6304      	str	r4, [r0, #48]	; 0x30
	f->sr = leaf.sampleRate;
 802313c:	63c1      	str	r1, [r0, #60]	; 0x3c
	f->inv_sr = leaf.invSampleRate;
 802313e:	6402      	str	r2, [r0, #64]	; 0x40


void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{

	_tVZFilter* f = *vf;
 8023140:	682c      	ldr	r4, [r5, #0]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8023142:	eddf 7aba 	vldr	s15, [pc, #744]	; 802342c <tVZFilter_initToPool+0x330>
 8023146:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 802314a:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 802314e:	ee28 8a07 	vmul.f32	s16, s16, s14
 8023152:	ee28 8a27 	vmul.f32	s16, s16, s15
 8023156:	eeb0 0a48 	vmov.f32	s0, s16
 802315a:	f004 fdfb 	bl	8027d54 <tanf>

	  switch( f->type )
 802315e:	7923      	ldrb	r3, [r4, #4]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8023160:	eef0 8a40 	vmov.f32	s17, s0
 8023164:	ed84 0a04 	vstr	s0, [r4, #16]
	  switch( f->type )
 8023168:	2b0a      	cmp	r3, #10
 802316a:	f200 81b5 	bhi.w	80234d8 <tVZFilter_initToPool+0x3dc>
 802316e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023172:	0053      	.short	0x0053
 8023174:	0069005e 	.word	0x0069005e
 8023178:	00ab0074 	.word	0x00ab0074
 802317c:	011600e3 	.word	0x011600e3
 8023180:	01630136 	.word	0x01630136
 8023184:	000b01a8 	.word	0x000b01a8
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
	_tVZFilter* f = *vf;
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023188:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 802318c:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8023190:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023192:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023196:	ee60 0aa7 	vmul.f32	s1, s1, s15
 802319a:	f004 fc9d 	bl	8027ad8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 802319e:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 80231a2:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 80231a6:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 802342c <tVZFilter_initToPool+0x330>
 80231aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80231ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80231b2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80231b6:	f004 fdcd 	bl	8027d54 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80231ba:	ed95 7a04 	vldr	s14, [r5, #16]
							   // unwarped: r = pow(2, -B/2) -> approximation for low
							   // center-frequencies
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80231be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80231c2:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80231c6:	edc4 7a07 	vstr	s15, [r4, #28]
 80231ca:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80231ce:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80231d2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80231d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80231da:	ee20 0a07 	vmul.f32	s0, s0, s14
 80231de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80231e2:	ee87 7a80 	vdiv.f32	s14, s15, s0
 80231e6:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 80231ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80231ee:	eeb1 7a67 	vneg.f32	s14, s15
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 80231f2:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80231f6:	ed84 7a08 	vstr	s14, [r4, #32]
	  f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 80231fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80231fe:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8023202:	eef0 6a47 	vmov.f32	s13, s14
 8023206:	eee7 6aa8 	vfma.f32	s13, s15, s17
 802320a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802320e:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8023212:	ecbd 8b04 	vpop	{d8-d9}
 8023216:	bd70      	pop	{r4, r5, r6, pc}
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023218:	2300      	movs	r3, #0
 802321a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 802321e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023222:	6262      	str	r2, [r4, #36]	; 0x24
			f->R2 = f->invG;
 8023224:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023228:	61e3      	str	r3, [r4, #28]
 802322a:	6223      	str	r3, [r4, #32]
 802322c:	e7e5      	b.n	80231fa <tVZFilter_initToPool+0xfe>
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 802322e:	2300      	movs	r3, #0
 8023230:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8023234:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8023238:	61e2      	str	r2, [r4, #28]
			f->R2 = f->invG;
 802323a:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 802323e:	6223      	str	r3, [r4, #32]
 8023240:	6263      	str	r3, [r4, #36]	; 0x24
 8023242:	e7da      	b.n	80231fa <tVZFilter_initToPool+0xfe>
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023244:	2300      	movs	r3, #0
 8023246:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 802324a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 802324e:	6222      	str	r2, [r4, #32]
			f->R2 = f->invG;
 8023250:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023254:	61e3      	str	r3, [r4, #28]
 8023256:	6263      	str	r3, [r4, #36]	; 0x24
 8023258:	e7cf      	b.n	80231fa <tVZFilter_initToPool+0xfe>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 802325a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 802325e:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8023262:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023264:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023268:	ee60 0aa7 	vmul.f32	s1, s1, s15
 802326c:	f004 fc34 	bl	8027ad8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023270:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8023274:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8023278:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 802342c <tVZFilter_initToPool+0x330>
 802327c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023284:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023288:	f004 fd64 	bl	8027d54 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 802328c:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023290:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8023294:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023296:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 802329a:	61e3      	str	r3, [r4, #28]
 802329c:	6263      	str	r3, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 802329e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80232a2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80232a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80232aa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80232ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80232b2:	ee87 7a80 	vdiv.f32	s14, s15, s0
 80232b6:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 80232ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80232be:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 80232c2:	edc4 7a08 	vstr	s15, [r4, #32]
 80232c6:	e798      	b.n	80231fa <tVZFilter_initToPool+0xfe>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80232c8:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80232cc:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 80232d0:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80232d2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80232d6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80232da:	f004 fbfd 	bl	8027ad8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 80232de:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 80232e2:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 80232e6:	ed9f 7a51 	vldr	s14, [pc, #324]	; 802342c <tVZFilter_initToPool+0x330>
 80232ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80232ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80232f2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80232f6:	f004 fd2d 	bl	8027d54 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80232fa:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80232fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023302:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023304:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023308:	6223      	str	r3, [r4, #32]
 802330a:	edc4 7a07 	vstr	s15, [r4, #28]
 802330e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023312:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8023316:	ee20 0a00 	vmul.f32	s0, s0, s0
 802331a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802331e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023322:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8023326:	ee87 7a80 	vdiv.f32	s14, s15, s0
 802332a:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 802332e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8023332:	edc4 7a05 	vstr	s15, [r4, #20]
 8023336:	e760      	b.n	80231fa <tVZFilter_initToPool+0xfe>
			float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8023338:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 802333c:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 8023340:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023344:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8023348:	f004 fbc6 	bl	8027ad8 <powf>
			float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 802334c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8023350:	f004 fd00 	bl	8027d54 <tanf>
			float r  = f->g/wl;
 8023354:	ee88 0a80 	vdiv.f32	s0, s17, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023358:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 802335c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023360:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8023364:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8023368:	edc4 7a07 	vstr	s15, [r4, #28]
 802336c:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023370:	ee67 6a26 	vmul.f32	s13, s14, s13
			r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8023374:	ee20 0a00 	vmul.f32	s0, s0, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023378:	eee0 7a00 	vfma.f32	s15, s0, s0
 802337c:	ee87 6a80 	vdiv.f32	s12, s15, s0
 8023380:	ee76 7a65 	vsub.f32	s15, s12, s11
 8023384:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8023388:	eef1 7ac6 	vsqrt.f32	s15, s12
 802338c:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8023390:	ee27 7a27 	vmul.f32	s14, s14, s15
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023394:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8023398:	ed84 7a08 	vstr	s14, [r4, #32]
 802339c:	e72d      	b.n	80231fa <tVZFilter_initToPool+0xfe>
			float A = sqrtf(f->G);
 802339e:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80233a2:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 80233a6:	eddf 7a22 	vldr	s15, [pc, #136]	; 8023430 <tVZFilter_initToPool+0x334>
			float A = sqrtf(f->G);
 80233aa:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 80233ae:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 80233b2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80233b6:	eef1 7ac8 	vsqrt.f32	s15, s16
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80233ba:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 80233be:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 80233c2:	f004 ffb1 	bl	8028328 <sinhf>
 80233c6:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 80233ca:	ed84 9a07 	vstr	s18, [r4, #28]
 80233ce:	6265      	str	r5, [r4, #36]	; 0x24
 80233d0:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 80233d4:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 80233d8:	ed84 8a08 	vstr	s16, [r4, #32]
 80233dc:	e70d      	b.n	80231fa <tVZFilter_initToPool+0xfe>
		  float A = sqrtf(f->G);
 80233de:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 80233e2:	eddf 7a13 	vldr	s15, [pc, #76]	; 8023430 <tVZFilter_initToPool+0x334>
		  float A = sqrtf(f->G);
 80233e6:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 80233ea:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 80233ee:	ee20 0a27 	vmul.f32	s0, s0, s15
		  f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80233f2:	eef1 7ac8 	vsqrt.f32	s15, s16
 80233f6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80233fa:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 80233fe:	f004 ff93 	bl	8028328 <sinhf>
 8023402:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8023406:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 802340a:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 802340e:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8023412:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8023416:	61e3      	str	r3, [r4, #28]
 8023418:	ed84 8a08 	vstr	s16, [r4, #32]
 802341c:	e6ed      	b.n	80231fa <tVZFilter_initToPool+0xfe>
 802341e:	bf00      	nop
 8023420:	200194a0 	.word	0x200194a0
 8023424:	3fb504f3 	.word	0x3fb504f3
 8023428:	3f3504f3 	.word	0x3f3504f3
 802342c:	40490fdb 	.word	0x40490fdb
 8023430:	3eb17218 	.word	0x3eb17218
 8023434:	00000000 	.word	0x00000000
		  float x  = 2.0f*f->m-1.0f;
 8023438:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802343c:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8023440:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
			f->R2 = f->invG;
 8023444:	6b23      	ldr	r3, [r4, #48]	; 0x30
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8023446:	ed5f 0a05 	vldr	s1, [pc, #-20]	; 8023434 <tVZFilter_initToPool+0x338>
			f->R2 = f->invG;
 802344a:	6163      	str	r3, [r4, #20]
		  float x  = 2.0f*f->m-1.0f;
 802344c:	eea7 8a27 	vfma.f32	s16, s14, s15
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8023450:	eef1 8a48 	vneg.f32	s17, s16
 8023454:	eeb0 0a68 	vmov.f32	s0, s17
 8023458:	f001 f972 	bl	8024740 <maximum>
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 802345c:	ed5f 0a0b 	vldr	s1, [pc, #-44]	; 8023434 <tVZFilter_initToPool+0x338>
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8023460:	ed84 0a07 	vstr	s0, [r4, #28]
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8023464:	eeb0 0a48 	vmov.f32	s0, s16
 8023468:	f001 f96e 	bl	8024748 <minimum>
		  f->cB = 1.0f-x*x;
 802346c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8023470:	edd4 6a07 	vldr	s13, [r4, #28]
 8023474:	edd4 7a05 	vldr	s15, [r4, #20]
		  f->cB = 1.0f-x*x;
 8023478:	eea8 7a88 	vfma.f32	s14, s17, s16
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 802347c:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 8023480:	ee36 5aa6 	vadd.f32	s10, s13, s13
 8023484:	edd4 8a04 	vldr	s17, [r4, #16]
 8023488:	ee67 4aa7 	vmul.f32	s9, s15, s15
 802348c:	ee27 6a07 	vmul.f32	s12, s14, s14
 8023490:	eea6 6aa6 	vfma.f32	s12, s13, s13
 8023494:	eea0 6a00 	vfma.f32	s12, s0, s0
 8023498:	eea0 6a45 	vfms.f32	s12, s0, s10
 802349c:	ee84 5a86 	vdiv.f32	s10, s9, s12
 80234a0:	eeb1 6ac5 	vsqrt.f32	s12, s10
 80234a4:	ee26 6a25 	vmul.f32	s12, s12, s11
		  f->cL *= s; f->cB *= s; f->cH *= s;
 80234a8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80234ac:	ee27 7a06 	vmul.f32	s14, s14, s12
 80234b0:	ee20 0a06 	vmul.f32	s0, s0, s12
 80234b4:	edc4 6a07 	vstr	s13, [r4, #28]
 80234b8:	ed84 7a08 	vstr	s14, [r4, #32]
 80234bc:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 80234c0:	e69b      	b.n	80231fa <tVZFilter_initToPool+0xfe>
		  f->cL = 1.0f;
 80234c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 80234c6:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
		  f->cL = 1.0f;
 80234ca:	61e3      	str	r3, [r4, #28]
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 80234cc:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cH = 1.0f;
 80234d0:	6263      	str	r3, [r4, #36]	; 0x24
		  f->cB = f->R2;
 80234d2:	edc4 7a08 	vstr	s15, [r4, #32]
 80234d6:	e690      	b.n	80231fa <tVZFilter_initToPool+0xfe>
 80234d8:	edd4 7a05 	vldr	s15, [r4, #20]
 80234dc:	e68d      	b.n	80231fa <tVZFilter_initToPool+0xfe>
 80234de:	bf00      	nop

080234e0 <tVZFilter_free>:
    _tVZFilter* f = *vf;
 80234e0:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 80234e2:	6801      	ldr	r1, [r0, #0]
 80234e4:	f001 b9f4 	b.w	80248d0 <mpool_free>

080234e8 <tVZFilter_setSampleRate>:
	f->inv_sr = 1.0f/sampleRate;
 80234e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	_tVZFilter* f = *vf;
 80234ec:	6803      	ldr	r3, [r0, #0]
	f->sr = sampleRate;
 80234ee:	ed83 0a0f 	vstr	s0, [r3, #60]	; 0x3c
	f->inv_sr = 1.0f/sampleRate;
 80234f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80234f6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 80234fa:	4770      	bx	lr

080234fc <tVZFilter_tick>:
{
 80234fc:	b510      	push	{r4, lr}
	_tVZFilter* f = *vf;
 80234fe:	6804      	ldr	r4, [r0, #0]
{
 8023500:	ed2d 8b06 	vpush	{d8-d10}
	yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 8023504:	ed94 8a02 	vldr	s16, [r4, #8]
 8023508:	edd4 7a05 	vldr	s15, [r4, #20]
 802350c:	ed94 9a04 	vldr	s18, [r4, #16]
 8023510:	eea7 0ac8 	vfms.f32	s0, s15, s16
 8023514:	edd4 9a03 	vldr	s19, [r4, #12]
 8023518:	edd4 7a06 	vldr	s15, [r4, #24]
 802351c:	eea8 0a49 	vfms.f32	s0, s16, s18
 8023520:	ee70 8a69 	vsub.f32	s17, s0, s19
 8023524:	ee68 8aa7 	vmul.f32	s17, s17, s15
	yB = tanhf(f->g*yH) + f->s1;
 8023528:	ee29 aa28 	vmul.f32	s20, s18, s17
 802352c:	eeb0 0a4a 	vmov.f32	s0, s20
 8023530:	f004 fc38 	bl	8027da4 <tanhf>
 8023534:	ee38 8a00 	vadd.f32	s16, s16, s0
	yL = tanhf(f->g*yB) + f->s2;
 8023538:	ee29 9a08 	vmul.f32	s18, s18, s16
	f->s1 = f->g*yH + yB; // state update in 1st integrator
 802353c:	ee3a aa08 	vadd.f32	s20, s20, s16
	yL = tanhf(f->g*yB) + f->s2;
 8023540:	eeb0 0a49 	vmov.f32	s0, s18
	f->s1 = f->g*yH + yB; // state update in 1st integrator
 8023544:	ed84 aa02 	vstr	s20, [r4, #8]
	yL = tanhf(f->g*yB) + f->s2;
 8023548:	f004 fc2c 	bl	8027da4 <tanhf>
	return f->cL*yL + f->cB*yB + f->cH*yH;
 802354c:	edd4 7a08 	vldr	s15, [r4, #32]
	yL = tanhf(f->g*yB) + f->s2;
 8023550:	ee79 9a80 	vadd.f32	s19, s19, s0
	return f->cL*yL + f->cB*yB + f->cH*yH;
 8023554:	ed94 7a07 	vldr	s14, [r4, #28]
 8023558:	ee28 0a27 	vmul.f32	s0, s16, s15
 802355c:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
	f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8023560:	ee39 9a29 	vadd.f32	s18, s18, s19
	return f->cL*yL + f->cB*yB + f->cH*yH;
 8023564:	eea7 0a29 	vfma.f32	s0, s14, s19
	f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8023568:	ed84 9a03 	vstr	s18, [r4, #12]
}
 802356c:	eea7 0aa8 	vfma.f32	s0, s15, s17
 8023570:	ecbd 8b06 	vpop	{d8-d10}
 8023574:	bd10      	pop	{r4, pc}
 8023576:	bf00      	nop

08023578 <tVZFilter_tickEfficient>:
	_tVZFilter* f = *vf;
 8023578:	6803      	ldr	r3, [r0, #0]
	yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 802357a:	ed93 7a02 	vldr	s14, [r3, #8]
 802357e:	edd3 7a05 	vldr	s15, [r3, #20]
 8023582:	edd3 5a04 	vldr	s11, [r3, #16]
 8023586:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802358a:	ed93 6a03 	vldr	s12, [r3, #12]
 802358e:	ed93 4a06 	vldr	s8, [r3, #24]
	return f->cL*yL + f->cB*yB + f->cH*yH;
 8023592:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8023596:	edd3 4a08 	vldr	s9, [r3, #32]
 802359a:	ed93 5a07 	vldr	s10, [r3, #28]
	yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 802359e:	eea7 0a65 	vfms.f32	s0, s14, s11
 80235a2:	ee70 7a46 	vsub.f32	s15, s0, s12
 80235a6:	ee67 7a84 	vmul.f32	s15, s15, s8
	yB = (f->g*yH) + f->s1;
 80235aa:	eea5 7aa7 	vfma.f32	s14, s11, s15
	return f->cL*yL + f->cB*yB + f->cH*yH;
 80235ae:	ee27 0aa6 	vmul.f32	s0, s15, s13
	yL = (f->g*yB) + f->s2;
 80235b2:	eef0 6a46 	vmov.f32	s13, s12
 80235b6:	eee5 6a87 	vfma.f32	s13, s11, s14
	f->s1 = f->g*yH + yB; // state update in 1st integrator
 80235ba:	eeb0 6a47 	vmov.f32	s12, s14
	return f->cL*yL + f->cB*yB + f->cH*yH;
 80235be:	eea4 0a87 	vfma.f32	s0, s9, s14
	f->s1 = f->g*yH + yB; // state update in 1st integrator
 80235c2:	eea5 6aa7 	vfma.f32	s12, s11, s15
	f->s2 = f->g*yB + yL; // state update in 2nd integrator
 80235c6:	eef0 7a66 	vmov.f32	s15, s13
}
 80235ca:	eea5 0a26 	vfma.f32	s0, s10, s13
	f->s2 = f->g*yB + yL; // state update in 2nd integrator
 80235ce:	eee5 7a87 	vfma.f32	s15, s11, s14
	f->s1 = f->g*yH + yB; // state update in 1st integrator
 80235d2:	ed83 6a02 	vstr	s12, [r3, #8]
	f->s2 = f->g*yB + yL; // state update in 2nd integrator
 80235d6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80235da:	4770      	bx	lr

080235dc <tVZFilter_setFreq>:
{
 80235dc:	b538      	push	{r3, r4, r5, lr}
	f->fc = LEAF_clip(0.0f, freq, 0.5f*leaf.sampleRate);
 80235de:	4be3      	ldr	r3, [pc, #908]	; (802396c <tVZFilter_setFreq+0x390>)
 80235e0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	_tVZFilter* f = *vf;
 80235e4:	6804      	ldr	r4, [r0, #0]
{
 80235e6:	4605      	mov	r5, r0
	f->fc = LEAF_clip(0.0f, freq, 0.5f*leaf.sampleRate);
 80235e8:	eef0 0a40 	vmov.f32	s1, s0
 80235ec:	ed9f 0ae0 	vldr	s0, [pc, #896]	; 8023970 <tVZFilter_setFreq+0x394>
{
 80235f0:	ed2d 8b04 	vpush	{d8-d9}
	f->fc = LEAF_clip(0.0f, freq, 0.5f*leaf.sampleRate);
 80235f4:	ed93 1a00 	vldr	s2, [r3]
 80235f8:	ee21 1a27 	vmul.f32	s2, s2, s15
 80235fc:	f000 fec0 	bl	8024380 <LEAF_clip>
 8023600:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
	_tVZFilter* f = *vf;
 8023604:	682c      	ldr	r4, [r5, #0]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8023606:	eddf 7adb 	vldr	s15, [pc, #876]	; 8023974 <tVZFilter_setFreq+0x398>
 802360a:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 802360e:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8023612:	ee28 8a07 	vmul.f32	s16, s16, s14
 8023616:	ee28 8a27 	vmul.f32	s16, s16, s15
 802361a:	eeb0 0a48 	vmov.f32	s0, s16
 802361e:	f004 fb99 	bl	8027d54 <tanf>
	  switch( f->type )
 8023622:	7923      	ldrb	r3, [r4, #4]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8023624:	eef0 8a40 	vmov.f32	s17, s0
 8023628:	ed84 0a04 	vstr	s0, [r4, #16]
	  switch( f->type )
 802362c:	2b0a      	cmp	r3, #10
 802362e:	f200 81b0 	bhi.w	8023992 <tVZFilter_setFreq+0x3b6>
 8023632:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023636:	0053      	.short	0x0053
 8023638:	0069005e 	.word	0x0069005e
 802363c:	00ab0074 	.word	0x00ab0074
 8023640:	011600e3 	.word	0x011600e3
 8023644:	01560136 	.word	0x01560136
 8023648:	000b01a3 	.word	0x000b01a3
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 802364c:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023650:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8023654:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023656:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 802365a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 802365e:	f004 fa3b 	bl	8027ad8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023662:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8023666:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 802366a:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8023974 <tVZFilter_setFreq+0x398>
 802366e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023676:	ee27 0a80 	vmul.f32	s0, s15, s0
 802367a:	f004 fb6b 	bl	8027d54 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 802367e:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023682:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023686:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 802368a:	edc4 7a07 	vstr	s15, [r4, #28]
 802368e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023692:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8023696:	ee20 0a00 	vmul.f32	s0, s0, s0
 802369a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802369e:	ee20 0a07 	vmul.f32	s0, s0, s14
 80236a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80236a6:	ee87 7a80 	vdiv.f32	s14, s15, s0
 80236aa:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 80236ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80236b2:	eeb1 7a67 	vneg.f32	s14, s15
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 80236b6:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80236ba:	ed84 7a08 	vstr	s14, [r4, #32]
	  f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 80236be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80236c2:	ee77 7aa8 	vadd.f32	s15, s15, s17
 80236c6:	eef0 6a47 	vmov.f32	s13, s14
 80236ca:	eee7 6aa8 	vfma.f32	s13, s15, s17
 80236ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80236d2:	edc4 7a06 	vstr	s15, [r4, #24]
}
 80236d6:	ecbd 8b04 	vpop	{d8-d9}
 80236da:	bd38      	pop	{r3, r4, r5, pc}
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80236dc:	2300      	movs	r3, #0
 80236de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 80236e2:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80236e6:	6262      	str	r2, [r4, #36]	; 0x24
			f->R2 = f->invG;
 80236e8:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80236ec:	61e3      	str	r3, [r4, #28]
 80236ee:	6223      	str	r3, [r4, #32]
 80236f0:	e7e5      	b.n	80236be <tVZFilter_setFreq+0xe2>
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80236f2:	2300      	movs	r3, #0
 80236f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 80236f8:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80236fc:	61e2      	str	r2, [r4, #28]
			f->R2 = f->invG;
 80236fe:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8023702:	6223      	str	r3, [r4, #32]
 8023704:	6263      	str	r3, [r4, #36]	; 0x24
 8023706:	e7da      	b.n	80236be <tVZFilter_setFreq+0xe2>
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023708:	2300      	movs	r3, #0
 802370a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 802370e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023712:	6222      	str	r2, [r4, #32]
			f->R2 = f->invG;
 8023714:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023718:	61e3      	str	r3, [r4, #28]
 802371a:	6263      	str	r3, [r4, #36]	; 0x24
 802371c:	e7cf      	b.n	80236be <tVZFilter_setFreq+0xe2>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 802371e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023722:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8023726:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023728:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 802372c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8023730:	f004 f9d2 	bl	8027ad8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023734:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8023738:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 802373c:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8023974 <tVZFilter_setFreq+0x398>
 8023740:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023748:	ee27 0a80 	vmul.f32	s0, s15, s0
 802374c:	f004 fb02 	bl	8027d54 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023750:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023754:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8023758:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 802375a:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 802375e:	61e3      	str	r3, [r4, #28]
 8023760:	6263      	str	r3, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023762:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8023766:	ee20 0a00 	vmul.f32	s0, s0, s0
 802376a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802376e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023772:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8023776:	ee87 7a80 	vdiv.f32	s14, s15, s0
 802377a:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 802377e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8023782:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8023786:	edc4 7a08 	vstr	s15, [r4, #32]
 802378a:	e798      	b.n	80236be <tVZFilter_setFreq+0xe2>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 802378c:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023790:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8023794:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023796:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 802379a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 802379e:	f004 f99b 	bl	8027ad8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 80237a2:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 80237a6:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 80237aa:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8023974 <tVZFilter_setFreq+0x398>
 80237ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80237b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80237b6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80237ba:	f004 facb 	bl	8027d54 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80237be:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80237c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80237c6:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80237c8:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80237cc:	6223      	str	r3, [r4, #32]
 80237ce:	edc4 7a07 	vstr	s15, [r4, #28]
 80237d2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80237d6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80237da:	ee20 0a00 	vmul.f32	s0, s0, s0
 80237de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80237e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80237e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80237ea:	ee87 7a80 	vdiv.f32	s14, s15, s0
 80237ee:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 80237f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80237f6:	edc4 7a05 	vstr	s15, [r4, #20]
 80237fa:	e760      	b.n	80236be <tVZFilter_setFreq+0xe2>
			float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80237fc:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023800:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 8023804:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023808:	ee60 0aa7 	vmul.f32	s1, s1, s15
 802380c:	f004 f964 	bl	8027ad8 <powf>
			float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023810:	ee28 0a00 	vmul.f32	s0, s16, s0
 8023814:	f004 fa9e 	bl	8027d54 <tanf>
			float r  = f->g/wl;
 8023818:	ee88 0a80 	vdiv.f32	s0, s17, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 802381c:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8023820:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023824:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8023828:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 802382c:	edc4 7a07 	vstr	s15, [r4, #28]
 8023830:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023834:	ee67 6a26 	vmul.f32	s13, s14, s13
			r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8023838:	ee20 0a00 	vmul.f32	s0, s0, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 802383c:	eee0 7a00 	vfma.f32	s15, s0, s0
 8023840:	ee87 6a80 	vdiv.f32	s12, s15, s0
 8023844:	ee76 7a65 	vsub.f32	s15, s12, s11
 8023848:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 802384c:	eef1 7ac6 	vsqrt.f32	s15, s12
 8023850:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8023854:	ee27 7a27 	vmul.f32	s14, s14, s15
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023858:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 802385c:	ed84 7a08 	vstr	s14, [r4, #32]
 8023860:	e72d      	b.n	80236be <tVZFilter_setFreq+0xe2>
			float A = sqrtf(f->G);
 8023862:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8023866:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 802386a:	eddf 7a43 	vldr	s15, [pc, #268]	; 8023978 <tVZFilter_setFreq+0x39c>
			float A = sqrtf(f->G);
 802386e:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8023872:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8023876:	ee20 0a27 	vmul.f32	s0, s0, s15
 802387a:	eef1 7ac8 	vsqrt.f32	s15, s16
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 802387e:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 8023882:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8023886:	f004 fd4f 	bl	8028328 <sinhf>
 802388a:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 802388e:	ed84 9a07 	vstr	s18, [r4, #28]
 8023892:	6265      	str	r5, [r4, #36]	; 0x24
 8023894:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8023898:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 802389c:	ed84 8a08 	vstr	s16, [r4, #32]
 80238a0:	e70d      	b.n	80236be <tVZFilter_setFreq+0xe2>
		  float A = sqrtf(f->G);
 80238a2:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 80238a6:	eddf 7a34 	vldr	s15, [pc, #208]	; 8023978 <tVZFilter_setFreq+0x39c>
		  float A = sqrtf(f->G);
 80238aa:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 80238ae:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 80238b2:	ee20 0a27 	vmul.f32	s0, s0, s15
		  f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80238b6:	eef1 7ac8 	vsqrt.f32	s15, s16
 80238ba:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80238be:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 80238c2:	f004 fd31 	bl	8028328 <sinhf>
 80238c6:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 80238ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80238ce:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 80238d2:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 80238d6:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 80238da:	61e3      	str	r3, [r4, #28]
 80238dc:	ed84 8a08 	vstr	s16, [r4, #32]
 80238e0:	e6ed      	b.n	80236be <tVZFilter_setFreq+0xe2>
		  float x  = 2.0f*f->m-1.0f;
 80238e2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80238e6:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 80238ea:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
			f->R2 = f->invG;
 80238ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80238f0:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8023970 <tVZFilter_setFreq+0x394>
			f->R2 = f->invG;
 80238f4:	6163      	str	r3, [r4, #20]
		  float x  = 2.0f*f->m-1.0f;
 80238f6:	eea7 8a27 	vfma.f32	s16, s14, s15
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80238fa:	eef1 8a48 	vneg.f32	s17, s16
 80238fe:	eeb0 0a68 	vmov.f32	s0, s17
 8023902:	f000 ff1d 	bl	8024740 <maximum>
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8023906:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8023970 <tVZFilter_setFreq+0x394>
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 802390a:	ed84 0a07 	vstr	s0, [r4, #28]
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 802390e:	eeb0 0a48 	vmov.f32	s0, s16
 8023912:	f000 ff19 	bl	8024748 <minimum>
		  f->cB = 1.0f-x*x;
 8023916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 802391a:	edd4 6a07 	vldr	s13, [r4, #28]
 802391e:	edd4 7a05 	vldr	s15, [r4, #20]
		  f->cB = 1.0f-x*x;
 8023922:	eea8 7a88 	vfma.f32	s14, s17, s16
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8023926:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 802392a:	ee36 5aa6 	vadd.f32	s10, s13, s13
 802392e:	edd4 8a04 	vldr	s17, [r4, #16]
 8023932:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8023936:	ee27 6a07 	vmul.f32	s12, s14, s14
 802393a:	eea6 6aa6 	vfma.f32	s12, s13, s13
 802393e:	eea0 6a00 	vfma.f32	s12, s0, s0
 8023942:	eea0 6a45 	vfms.f32	s12, s0, s10
 8023946:	ee84 5a86 	vdiv.f32	s10, s9, s12
 802394a:	eeb1 6ac5 	vsqrt.f32	s12, s10
 802394e:	ee26 6a25 	vmul.f32	s12, s12, s11
		  f->cL *= s; f->cB *= s; f->cH *= s;
 8023952:	ee66 6a86 	vmul.f32	s13, s13, s12
 8023956:	ee27 7a06 	vmul.f32	s14, s14, s12
 802395a:	ee20 0a06 	vmul.f32	s0, s0, s12
 802395e:	edc4 6a07 	vstr	s13, [r4, #28]
 8023962:	ed84 7a08 	vstr	s14, [r4, #32]
 8023966:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 802396a:	e6a8      	b.n	80236be <tVZFilter_setFreq+0xe2>
 802396c:	200194a0 	.word	0x200194a0
 8023970:	00000000 	.word	0x00000000
 8023974:	40490fdb 	.word	0x40490fdb
 8023978:	3eb17218 	.word	0x3eb17218
		  f->cL = 1.0f;
 802397c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8023980:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
		  f->cL = 1.0f;
 8023984:	61e3      	str	r3, [r4, #28]
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8023986:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cH = 1.0f;
 802398a:	6263      	str	r3, [r4, #36]	; 0x24
		  f->cB = f->R2;
 802398c:	edc4 7a08 	vstr	s15, [r4, #32]
 8023990:	e695      	b.n	80236be <tVZFilter_setFreq+0xe2>
 8023992:	edd4 7a05 	vldr	s15, [r4, #20]
 8023996:	e692      	b.n	80236be <tVZFilter_setFreq+0xe2>

08023998 <tVZFilter_setFreqAndBandwidth>:
{
 8023998:	b538      	push	{r3, r4, r5, lr}
	f->B = LEAF_clip(0.0f,bw, 100.0f);
 802399a:	ed9f 1ac6 	vldr	s2, [pc, #792]	; 8023cb4 <tVZFilter_setFreqAndBandwidth+0x31c>
{
 802399e:	4605      	mov	r5, r0
	_tVZFilter* f = *vf;
 80239a0:	6804      	ldr	r4, [r0, #0]
{
 80239a2:	ed2d 8b04 	vpush	{d8-d9}
 80239a6:	eeb0 8a40 	vmov.f32	s16, s0
	f->B = LEAF_clip(0.0f,bw, 100.0f);
 80239aa:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 8023cc4 <tVZFilter_setFreqAndBandwidth+0x32c>
 80239ae:	f000 fce7 	bl	8024380 <LEAF_clip>
	f->fc = LEAF_clip(0.0f, freq, 0.5f*leaf.sampleRate);
 80239b2:	4bc1      	ldr	r3, [pc, #772]	; (8023cb8 <tVZFilter_setFreqAndBandwidth+0x320>)
 80239b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	f->B = LEAF_clip(0.0f,bw, 100.0f);
 80239b8:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
	f->fc = LEAF_clip(0.0f, freq, 0.5f*leaf.sampleRate);
 80239bc:	ed93 1a00 	vldr	s2, [r3]
 80239c0:	eef0 0a48 	vmov.f32	s1, s16
 80239c4:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8023cc4 <tVZFilter_setFreqAndBandwidth+0x32c>
 80239c8:	ee21 1a27 	vmul.f32	s2, s2, s15
 80239cc:	f000 fcd8 	bl	8024380 <LEAF_clip>
 80239d0:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
	_tVZFilter* f = *vf;
 80239d4:	682c      	ldr	r4, [r5, #0]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 80239d6:	eddf 7ab9 	vldr	s15, [pc, #740]	; 8023cbc <tVZFilter_setFreqAndBandwidth+0x324>
 80239da:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 80239de:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 80239e2:	ee28 8a07 	vmul.f32	s16, s16, s14
 80239e6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80239ea:	eeb0 0a48 	vmov.f32	s0, s16
 80239ee:	f004 f9b1 	bl	8027d54 <tanf>
	  switch( f->type )
 80239f2:	7923      	ldrb	r3, [r4, #4]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 80239f4:	eef0 8a40 	vmov.f32	s17, s0
 80239f8:	ed84 0a04 	vstr	s0, [r4, #16]
	  switch( f->type )
 80239fc:	2b0a      	cmp	r3, #10
 80239fe:	f200 81b3 	bhi.w	8023d68 <tVZFilter_setFreqAndBandwidth+0x3d0>
 8023a02:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023a06:	0053      	.short	0x0053
 8023a08:	0069005e 	.word	0x0069005e
 8023a0c:	00ab0074 	.word	0x00ab0074
 8023a10:	011600e3 	.word	0x011600e3
 8023a14:	01610136 	.word	0x01610136
 8023a18:	000b01a6 	.word	0x000b01a6
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023a1c:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023a20:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8023a24:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023a26:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023a2a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8023a2e:	f004 f853 	bl	8027ad8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023a32:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8023a36:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8023a3a:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8023cbc <tVZFilter_setFreqAndBandwidth+0x324>
 8023a3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023a42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023a46:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023a4a:	f004 f983 	bl	8027d54 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023a4e:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023a52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023a56:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8023a5a:	edc4 7a07 	vstr	s15, [r4, #28]
 8023a5e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023a62:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8023a66:	ee20 0a00 	vmul.f32	s0, s0, s0
 8023a6a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023a6e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023a72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8023a76:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8023a7a:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8023a7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8023a82:	eeb1 7a67 	vneg.f32	s14, s15
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8023a86:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8023a8a:	ed84 7a08 	vstr	s14, [r4, #32]
	  f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 8023a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023a92:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8023a96:	eef0 6a47 	vmov.f32	s13, s14
 8023a9a:	eee7 6aa8 	vfma.f32	s13, s15, s17
 8023a9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8023aa2:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8023aa6:	ecbd 8b04 	vpop	{d8-d9}
 8023aaa:	bd38      	pop	{r3, r4, r5, pc}
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023aac:	2300      	movs	r3, #0
 8023aae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8023ab2:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023ab6:	6262      	str	r2, [r4, #36]	; 0x24
			f->R2 = f->invG;
 8023ab8:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023abc:	61e3      	str	r3, [r4, #28]
 8023abe:	6223      	str	r3, [r4, #32]
 8023ac0:	e7e5      	b.n	8023a8e <tVZFilter_setFreqAndBandwidth+0xf6>
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8023ac2:	2300      	movs	r3, #0
 8023ac4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8023ac8:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8023acc:	61e2      	str	r2, [r4, #28]
			f->R2 = f->invG;
 8023ace:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8023ad2:	6223      	str	r3, [r4, #32]
 8023ad4:	6263      	str	r3, [r4, #36]	; 0x24
 8023ad6:	e7da      	b.n	8023a8e <tVZFilter_setFreqAndBandwidth+0xf6>
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023ad8:	2300      	movs	r3, #0
 8023ada:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8023ade:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023ae2:	6222      	str	r2, [r4, #32]
			f->R2 = f->invG;
 8023ae4:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023ae8:	61e3      	str	r3, [r4, #28]
 8023aea:	6263      	str	r3, [r4, #36]	; 0x24
 8023aec:	e7cf      	b.n	8023a8e <tVZFilter_setFreqAndBandwidth+0xf6>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023aee:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023af2:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8023af6:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023af8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023afc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8023b00:	f003 ffea 	bl	8027ad8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023b04:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8023b08:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8023b0c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8023cbc <tVZFilter_setFreqAndBandwidth+0x324>
 8023b10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023b18:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023b1c:	f004 f91a 	bl	8027d54 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023b20:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023b24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8023b28:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023b2a:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8023b2e:	61e3      	str	r3, [r4, #28]
 8023b30:	6263      	str	r3, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023b32:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8023b36:	ee20 0a00 	vmul.f32	s0, s0, s0
 8023b3a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023b3e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023b42:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8023b46:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8023b4a:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8023b4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8023b52:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8023b56:	edc4 7a08 	vstr	s15, [r4, #32]
 8023b5a:	e798      	b.n	8023a8e <tVZFilter_setFreqAndBandwidth+0xf6>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023b5c:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023b60:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8023b64:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023b66:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023b6a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8023b6e:	f003 ffb3 	bl	8027ad8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023b72:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8023b76:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8023b7a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8023cbc <tVZFilter_setFreqAndBandwidth+0x324>
 8023b7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023b82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023b86:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023b8a:	f004 f8e3 	bl	8027d54 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023b8e:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023b92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023b96:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023b98:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023b9c:	6223      	str	r3, [r4, #32]
 8023b9e:	edc4 7a07 	vstr	s15, [r4, #28]
 8023ba2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023ba6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8023baa:	ee20 0a00 	vmul.f32	s0, s0, s0
 8023bae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023bb2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023bb6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8023bba:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8023bbe:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8023bc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8023bc6:	edc4 7a05 	vstr	s15, [r4, #20]
 8023bca:	e760      	b.n	8023a8e <tVZFilter_setFreqAndBandwidth+0xf6>
			float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8023bcc:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023bd0:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 8023bd4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023bd8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8023bdc:	f003 ff7c 	bl	8027ad8 <powf>
			float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023be0:	ee28 0a00 	vmul.f32	s0, s16, s0
 8023be4:	f004 f8b6 	bl	8027d54 <tanf>
			float r  = f->g/wl;
 8023be8:	ee88 0a80 	vdiv.f32	s0, s17, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023bec:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8023bf0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023bf4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8023bf8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8023bfc:	edc4 7a07 	vstr	s15, [r4, #28]
 8023c00:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023c04:	ee67 6a26 	vmul.f32	s13, s14, s13
			r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8023c08:	ee20 0a00 	vmul.f32	s0, s0, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023c0c:	eee0 7a00 	vfma.f32	s15, s0, s0
 8023c10:	ee87 6a80 	vdiv.f32	s12, s15, s0
 8023c14:	ee76 7a65 	vsub.f32	s15, s12, s11
 8023c18:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8023c1c:	eef1 7ac6 	vsqrt.f32	s15, s12
 8023c20:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8023c24:	ee27 7a27 	vmul.f32	s14, s14, s15
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023c28:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8023c2c:	ed84 7a08 	vstr	s14, [r4, #32]
 8023c30:	e72d      	b.n	8023a8e <tVZFilter_setFreqAndBandwidth+0xf6>
			float A = sqrtf(f->G);
 8023c32:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8023c36:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8023c3a:	eddf 7a21 	vldr	s15, [pc, #132]	; 8023cc0 <tVZFilter_setFreqAndBandwidth+0x328>
			float A = sqrtf(f->G);
 8023c3e:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8023c42:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8023c46:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023c4a:	eef1 7ac8 	vsqrt.f32	s15, s16
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8023c4e:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 8023c52:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8023c56:	f004 fb67 	bl	8028328 <sinhf>
 8023c5a:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8023c5e:	ed84 9a07 	vstr	s18, [r4, #28]
 8023c62:	6265      	str	r5, [r4, #36]	; 0x24
 8023c64:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8023c68:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8023c6c:	ed84 8a08 	vstr	s16, [r4, #32]
 8023c70:	e70d      	b.n	8023a8e <tVZFilter_setFreqAndBandwidth+0xf6>
		  float A = sqrtf(f->G);
 8023c72:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8023c76:	eddf 7a12 	vldr	s15, [pc, #72]	; 8023cc0 <tVZFilter_setFreqAndBandwidth+0x328>
		  float A = sqrtf(f->G);
 8023c7a:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8023c7e:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8023c82:	ee20 0a27 	vmul.f32	s0, s0, s15
		  f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8023c86:	eef1 7ac8 	vsqrt.f32	s15, s16
 8023c8a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8023c8e:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8023c92:	f004 fb49 	bl	8028328 <sinhf>
 8023c96:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8023c9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023c9e:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 8023ca2:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8023ca6:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8023caa:	61e3      	str	r3, [r4, #28]
 8023cac:	ed84 8a08 	vstr	s16, [r4, #32]
 8023cb0:	e6ed      	b.n	8023a8e <tVZFilter_setFreqAndBandwidth+0xf6>
 8023cb2:	bf00      	nop
 8023cb4:	42c80000 	.word	0x42c80000
 8023cb8:	200194a0 	.word	0x200194a0
 8023cbc:	40490fdb 	.word	0x40490fdb
 8023cc0:	3eb17218 	.word	0x3eb17218
 8023cc4:	00000000 	.word	0x00000000
		  float x  = 2.0f*f->m-1.0f;
 8023cc8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8023ccc:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8023cd0:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
			f->R2 = f->invG;
 8023cd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8023cd6:	ed5f 0a05 	vldr	s1, [pc, #-20]	; 8023cc4 <tVZFilter_setFreqAndBandwidth+0x32c>
			f->R2 = f->invG;
 8023cda:	6163      	str	r3, [r4, #20]
		  float x  = 2.0f*f->m-1.0f;
 8023cdc:	eea7 8a27 	vfma.f32	s16, s14, s15
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8023ce0:	eef1 8a48 	vneg.f32	s17, s16
 8023ce4:	eeb0 0a68 	vmov.f32	s0, s17
 8023ce8:	f000 fd2a 	bl	8024740 <maximum>
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8023cec:	ed5f 0a0b 	vldr	s1, [pc, #-44]	; 8023cc4 <tVZFilter_setFreqAndBandwidth+0x32c>
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8023cf0:	ed84 0a07 	vstr	s0, [r4, #28]
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8023cf4:	eeb0 0a48 	vmov.f32	s0, s16
 8023cf8:	f000 fd26 	bl	8024748 <minimum>
		  f->cB = 1.0f-x*x;
 8023cfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8023d00:	edd4 6a07 	vldr	s13, [r4, #28]
 8023d04:	edd4 7a05 	vldr	s15, [r4, #20]
		  f->cB = 1.0f-x*x;
 8023d08:	eea8 7a88 	vfma.f32	s14, s17, s16
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8023d0c:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 8023d10:	ee36 5aa6 	vadd.f32	s10, s13, s13
 8023d14:	edd4 8a04 	vldr	s17, [r4, #16]
 8023d18:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8023d1c:	ee27 6a07 	vmul.f32	s12, s14, s14
 8023d20:	eea6 6aa6 	vfma.f32	s12, s13, s13
 8023d24:	eea0 6a00 	vfma.f32	s12, s0, s0
 8023d28:	eea0 6a45 	vfms.f32	s12, s0, s10
 8023d2c:	ee84 5a86 	vdiv.f32	s10, s9, s12
 8023d30:	eeb1 6ac5 	vsqrt.f32	s12, s10
 8023d34:	ee26 6a25 	vmul.f32	s12, s12, s11
		  f->cL *= s; f->cB *= s; f->cH *= s;
 8023d38:	ee66 6a86 	vmul.f32	s13, s13, s12
 8023d3c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8023d40:	ee20 0a06 	vmul.f32	s0, s0, s12
 8023d44:	edc4 6a07 	vstr	s13, [r4, #28]
 8023d48:	ed84 7a08 	vstr	s14, [r4, #32]
 8023d4c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 8023d50:	e69d      	b.n	8023a8e <tVZFilter_setFreqAndBandwidth+0xf6>
		  f->cL = 1.0f;
 8023d52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8023d56:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
		  f->cL = 1.0f;
 8023d5a:	61e3      	str	r3, [r4, #28]
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8023d5c:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cH = 1.0f;
 8023d60:	6263      	str	r3, [r4, #36]	; 0x24
		  f->cB = f->R2;
 8023d62:	edc4 7a08 	vstr	s15, [r4, #32]
 8023d66:	e692      	b.n	8023a8e <tVZFilter_setFreqAndBandwidth+0xf6>
 8023d68:	edd4 7a05 	vldr	s15, [r4, #20]
 8023d6c:	e68f      	b.n	8023a8e <tVZFilter_setFreqAndBandwidth+0xf6>
 8023d6e:	bf00      	nop

08023d70 <tVZFilter_setGain>:
{
 8023d70:	b538      	push	{r3, r4, r5, lr}
	f->G = LEAF_clip(0.000001f, gain, 100.0f);
 8023d72:	eef0 0a40 	vmov.f32	s1, s0
 8023d76:	ed9f 1ae3 	vldr	s2, [pc, #908]	; 8024104 <tVZFilter_setGain+0x394>
 8023d7a:	ed9f 0ae3 	vldr	s0, [pc, #908]	; 8024108 <tVZFilter_setGain+0x398>
{
 8023d7e:	4605      	mov	r5, r0
	_tVZFilter* f = *vf;
 8023d80:	6804      	ldr	r4, [r0, #0]
{
 8023d82:	ed2d 8b04 	vpush	{d8-d9}
	f->G = LEAF_clip(0.000001f, gain, 100.0f);
 8023d86:	f000 fafb 	bl	8024380 <LEAF_clip>
	f->invG = 1.0f/f->G;
 8023d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	f->G = LEAF_clip(0.000001f, gain, 100.0f);
 8023d8e:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8023d92:	eddf 7ade 	vldr	s15, [pc, #888]	; 802410c <tVZFilter_setGain+0x39c>
	f->invG = 1.0f/f->G;
 8023d96:	ee86 7a80 	vdiv.f32	s14, s13, s0
 8023d9a:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
	_tVZFilter* f = *vf;
 8023d9e:	682c      	ldr	r4, [r5, #0]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8023da0:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8023da4:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8023da8:	ee28 8a07 	vmul.f32	s16, s16, s14
 8023dac:	ee28 8a27 	vmul.f32	s16, s16, s15
 8023db0:	eeb0 0a48 	vmov.f32	s0, s16
 8023db4:	f003 ffce 	bl	8027d54 <tanf>
	  switch( f->type )
 8023db8:	7923      	ldrb	r3, [r4, #4]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8023dba:	eef0 8a40 	vmov.f32	s17, s0
 8023dbe:	ed84 0a04 	vstr	s0, [r4, #16]
	  switch( f->type )
 8023dc2:	2b0a      	cmp	r3, #10
 8023dc4:	f200 81b3 	bhi.w	802412e <tVZFilter_setGain+0x3be>
 8023dc8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023dcc:	005e0053 	.word	0x005e0053
 8023dd0:	00740069 	.word	0x00740069
 8023dd4:	00e300ab 	.word	0x00e300ab
 8023dd8:	01360116 	.word	0x01360116
 8023ddc:	01a60156 	.word	0x01a60156
 8023de0:	000b      	.short	0x000b
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023de2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023de6:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8023dea:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023dec:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023df0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8023df4:	f003 fe70 	bl	8027ad8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023df8:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8023dfc:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8023e00:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 802410c <tVZFilter_setGain+0x39c>
 8023e04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023e0c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023e10:	f003 ffa0 	bl	8027d54 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023e14:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023e18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023e1c:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8023e20:	edc4 7a07 	vstr	s15, [r4, #28]
 8023e24:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023e28:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8023e2c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8023e30:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023e34:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023e38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8023e3c:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8023e40:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8023e44:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8023e48:	eeb1 7a67 	vneg.f32	s14, s15
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8023e4c:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8023e50:	ed84 7a08 	vstr	s14, [r4, #32]
	  f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 8023e54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e58:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8023e5c:	eef0 6a47 	vmov.f32	s13, s14
 8023e60:	eee7 6aa8 	vfma.f32	s13, s15, s17
 8023e64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8023e68:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8023e6c:	ecbd 8b04 	vpop	{d8-d9}
 8023e70:	bd38      	pop	{r3, r4, r5, pc}
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023e72:	2300      	movs	r3, #0
 8023e74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8023e78:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023e7c:	6262      	str	r2, [r4, #36]	; 0x24
			f->R2 = f->invG;
 8023e7e:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023e82:	61e3      	str	r3, [r4, #28]
 8023e84:	6223      	str	r3, [r4, #32]
 8023e86:	e7e5      	b.n	8023e54 <tVZFilter_setGain+0xe4>
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8023e88:	2300      	movs	r3, #0
 8023e8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8023e8e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8023e92:	61e2      	str	r2, [r4, #28]
			f->R2 = f->invG;
 8023e94:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8023e98:	6223      	str	r3, [r4, #32]
 8023e9a:	6263      	str	r3, [r4, #36]	; 0x24
 8023e9c:	e7da      	b.n	8023e54 <tVZFilter_setGain+0xe4>
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023e9e:	2300      	movs	r3, #0
 8023ea0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8023ea4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023ea8:	6222      	str	r2, [r4, #32]
			f->R2 = f->invG;
 8023eaa:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023eae:	61e3      	str	r3, [r4, #28]
 8023eb0:	6263      	str	r3, [r4, #36]	; 0x24
 8023eb2:	e7cf      	b.n	8023e54 <tVZFilter_setGain+0xe4>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023eb4:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023eb8:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8023ebc:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023ebe:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023ec2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8023ec6:	f003 fe07 	bl	8027ad8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023eca:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8023ece:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8023ed2:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 802410c <tVZFilter_setGain+0x39c>
 8023ed6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023ede:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023ee2:	f003 ff37 	bl	8027d54 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023ee6:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023eea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8023eee:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023ef0:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8023ef4:	61e3      	str	r3, [r4, #28]
 8023ef6:	6263      	str	r3, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023ef8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8023efc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8023f00:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023f04:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023f08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8023f0c:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8023f10:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8023f14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8023f18:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8023f1c:	edc4 7a08 	vstr	s15, [r4, #32]
 8023f20:	e798      	b.n	8023e54 <tVZFilter_setGain+0xe4>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023f22:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023f26:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8023f2a:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023f2c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023f30:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8023f34:	f003 fdd0 	bl	8027ad8 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023f38:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8023f3c:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8023f40:	ed9f 7a72 	vldr	s14, [pc, #456]	; 802410c <tVZFilter_setGain+0x39c>
 8023f44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023f4c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023f50:	f003 ff00 	bl	8027d54 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023f54:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023f58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023f5c:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023f5e:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023f62:	6223      	str	r3, [r4, #32]
 8023f64:	edc4 7a07 	vstr	s15, [r4, #28]
 8023f68:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023f6c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8023f70:	ee20 0a00 	vmul.f32	s0, s0, s0
 8023f74:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023f78:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023f7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8023f80:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8023f84:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8023f88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8023f8c:	edc4 7a05 	vstr	s15, [r4, #20]
 8023f90:	e760      	b.n	8023e54 <tVZFilter_setGain+0xe4>
			float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8023f92:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023f96:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 8023f9a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023f9e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8023fa2:	f003 fd99 	bl	8027ad8 <powf>
			float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023fa6:	ee28 0a00 	vmul.f32	s0, s16, s0
 8023faa:	f003 fed3 	bl	8027d54 <tanf>
			float r  = f->g/wl;
 8023fae:	ee88 0a80 	vdiv.f32	s0, s17, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023fb2:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8023fb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023fba:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8023fbe:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8023fc2:	edc4 7a07 	vstr	s15, [r4, #28]
 8023fc6:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023fca:	ee67 6a26 	vmul.f32	s13, s14, s13
			r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8023fce:	ee20 0a00 	vmul.f32	s0, s0, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023fd2:	eee0 7a00 	vfma.f32	s15, s0, s0
 8023fd6:	ee87 6a80 	vdiv.f32	s12, s15, s0
 8023fda:	ee76 7a65 	vsub.f32	s15, s12, s11
 8023fde:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8023fe2:	eef1 7ac6 	vsqrt.f32	s15, s12
 8023fe6:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8023fea:	ee27 7a27 	vmul.f32	s14, s14, s15
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023fee:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8023ff2:	ed84 7a08 	vstr	s14, [r4, #32]
 8023ff6:	e72d      	b.n	8023e54 <tVZFilter_setGain+0xe4>
			float A = sqrtf(f->G);
 8023ff8:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8023ffc:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8024000:	eddf 7a43 	vldr	s15, [pc, #268]	; 8024110 <tVZFilter_setGain+0x3a0>
			float A = sqrtf(f->G);
 8024004:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8024008:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 802400c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024010:	eef1 7ac8 	vsqrt.f32	s15, s16
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8024014:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 8024018:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 802401c:	f004 f984 	bl	8028328 <sinhf>
 8024020:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8024024:	ed84 9a07 	vstr	s18, [r4, #28]
 8024028:	6265      	str	r5, [r4, #36]	; 0x24
 802402a:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 802402e:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8024032:	ed84 8a08 	vstr	s16, [r4, #32]
 8024036:	e70d      	b.n	8023e54 <tVZFilter_setGain+0xe4>
		  float A = sqrtf(f->G);
 8024038:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 802403c:	eddf 7a34 	vldr	s15, [pc, #208]	; 8024110 <tVZFilter_setGain+0x3a0>
		  float A = sqrtf(f->G);
 8024040:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8024044:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8024048:	ee20 0a27 	vmul.f32	s0, s0, s15
		  f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 802404c:	eef1 7ac8 	vsqrt.f32	s15, s16
 8024050:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8024054:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8024058:	f004 f966 	bl	8028328 <sinhf>
 802405c:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8024060:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024064:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 8024068:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 802406c:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8024070:	61e3      	str	r3, [r4, #28]
 8024072:	ed84 8a08 	vstr	s16, [r4, #32]
 8024076:	e6ed      	b.n	8023e54 <tVZFilter_setGain+0xe4>
		  float x  = 2.0f*f->m-1.0f;
 8024078:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802407c:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8024080:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
			f->R2 = f->invG;
 8024084:	6b23      	ldr	r3, [r4, #48]	; 0x30
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8024086:	eddf 0a23 	vldr	s1, [pc, #140]	; 8024114 <tVZFilter_setGain+0x3a4>
			f->R2 = f->invG;
 802408a:	6163      	str	r3, [r4, #20]
		  float x  = 2.0f*f->m-1.0f;
 802408c:	eea7 8a27 	vfma.f32	s16, s14, s15
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8024090:	eef1 8a48 	vneg.f32	s17, s16
 8024094:	eeb0 0a68 	vmov.f32	s0, s17
 8024098:	f000 fb52 	bl	8024740 <maximum>
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 802409c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8024114 <tVZFilter_setGain+0x3a4>
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80240a0:	ed84 0a07 	vstr	s0, [r4, #28]
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80240a4:	eeb0 0a48 	vmov.f32	s0, s16
 80240a8:	f000 fb4e 	bl	8024748 <minimum>
		  f->cB = 1.0f-x*x;
 80240ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 80240b0:	edd4 6a07 	vldr	s13, [r4, #28]
 80240b4:	edd4 7a05 	vldr	s15, [r4, #20]
		  f->cB = 1.0f-x*x;
 80240b8:	eea8 7a88 	vfma.f32	s14, s17, s16
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 80240bc:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 80240c0:	ee36 5aa6 	vadd.f32	s10, s13, s13
 80240c4:	edd4 8a04 	vldr	s17, [r4, #16]
 80240c8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80240cc:	ee27 6a07 	vmul.f32	s12, s14, s14
 80240d0:	eea6 6aa6 	vfma.f32	s12, s13, s13
 80240d4:	eea0 6a00 	vfma.f32	s12, s0, s0
 80240d8:	eea0 6a45 	vfms.f32	s12, s0, s10
 80240dc:	ee84 5a86 	vdiv.f32	s10, s9, s12
 80240e0:	eeb1 6ac5 	vsqrt.f32	s12, s10
 80240e4:	ee26 6a25 	vmul.f32	s12, s12, s11
		  f->cL *= s; f->cB *= s; f->cH *= s;
 80240e8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80240ec:	ee27 7a06 	vmul.f32	s14, s14, s12
 80240f0:	ee20 0a06 	vmul.f32	s0, s0, s12
 80240f4:	edc4 6a07 	vstr	s13, [r4, #28]
 80240f8:	ed84 7a08 	vstr	s14, [r4, #32]
 80240fc:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 8024100:	e6a8      	b.n	8023e54 <tVZFilter_setGain+0xe4>
 8024102:	bf00      	nop
 8024104:	42c80000 	.word	0x42c80000
 8024108:	358637bd 	.word	0x358637bd
 802410c:	40490fdb 	.word	0x40490fdb
 8024110:	3eb17218 	.word	0x3eb17218
 8024114:	00000000 	.word	0x00000000
		  f->cL = 1.0f;
 8024118:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 802411c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
		  f->cL = 1.0f;
 8024120:	61e3      	str	r3, [r4, #28]
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8024122:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cH = 1.0f;
 8024126:	6263      	str	r3, [r4, #36]	; 0x24
		  f->cB = f->R2;
 8024128:	edc4 7a08 	vstr	s15, [r4, #32]
 802412c:	e692      	b.n	8023e54 <tVZFilter_setGain+0xe4>
 802412e:	edd4 7a05 	vldr	s15, [r4, #20]
 8024132:	e68f      	b.n	8023e54 <tVZFilter_setGain+0xe4>

08024134 <interpolate3max>:
    return(Y);
}

float interpolate3max(float *buf, const int peakindex)
{
    float a = buf[peakindex-1];
 8024134:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    float b = buf[peakindex];
    float c = buf[peakindex+1];
    float realpeak;
    
    realpeak = b + (float)0.125 * (c - a) * (c - a) / ((float)2. * b - a - c);
 8024138:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 802413c:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
    float a = buf[peakindex-1];
 8024140:	440b      	add	r3, r1
 8024142:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8024146:	edd0 7a00 	vldr	s15, [r0]
    float c = buf[peakindex+1];
 802414a:	ed90 6a02 	vldr	s12, [r0, #8]
    float b = buf[peakindex];
 802414e:	edd0 6a01 	vldr	s13, [r0, #4]
    realpeak = b + (float)0.125 * (c - a) * (c - a) / ((float)2. * b - a - c);
 8024152:	ee36 7a67 	vsub.f32	s14, s12, s15
 8024156:	eed6 7a85 	vfnms.f32	s15, s13, s10
 802415a:	ee27 7a07 	vmul.f32	s14, s14, s14
 802415e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8024162:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8024166:	ee87 0a27 	vdiv.f32	s0, s14, s15
    
    return(realpeak);
}
 802416a:	ee30 0a26 	vadd.f32	s0, s0, s13
 802416e:	4770      	bx	lr

08024170 <interpolate3phase>:

float interpolate3phase(float *buf, const int peakindex)
{
    float a = buf[peakindex-1];
 8024170:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    float b = buf[peakindex];
    float c = buf[peakindex+1];
    float fraction;
    
    fraction = ((float)0.5 * (c - a)) / ((float)2. * b - a - c);
 8024174:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8024178:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    float a = buf[peakindex-1];
 802417c:	440b      	add	r3, r1
 802417e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8024182:	edd0 7a00 	vldr	s15, [r0]
    fraction = ((float)0.5 * (c - a)) / ((float)2. * b - a - c);
 8024186:	edd0 5a01 	vldr	s11, [r0, #4]
 802418a:	eeb0 0a67 	vmov.f32	s0, s15
    float c = buf[peakindex+1];
 802418e:	ed90 7a02 	vldr	s14, [r0, #8]
    fraction = ((float)0.5 * (c - a)) / ((float)2. * b - a - c);
 8024192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024196:	ee95 0a86 	vfnms.f32	s0, s11, s12
 802419a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802419e:	ee30 0a47 	vsub.f32	s0, s0, s14
    
    return(fraction);
}
 80241a2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80241a6:	4770      	bx	lr

080241a8 <fastercosf>:
    return fResult;
}

float fastercosf(float fAngle)
{
    float fASqr = fAngle*fAngle;
 80241a8:	ee20 7a00 	vmul.f32	s14, s0, s0
    float fResult = 3.705e-02f;
    fResult *= fASqr;
    fResult -= 4.967e-01f;
 80241ac:	eddf 6a05 	vldr	s13, [pc, #20]	; 80241c4 <fastercosf+0x1c>
 80241b0:	eddf 7a05 	vldr	s15, [pc, #20]	; 80241c8 <fastercosf+0x20>
    fResult *= fASqr;
    fResult += 1.0f;
 80241b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    fResult -= 4.967e-01f;
 80241b8:	eee7 7a26 	vfma.f32	s15, s14, s13
    return fResult;
}
 80241bc:	eea7 0a27 	vfma.f32	s0, s14, s15
 80241c0:	4770      	bx	lr
 80241c2:	bf00      	nop
 80241c4:	3d17c1be 	.word	0x3d17c1be
 80241c8:	befe4f76 	.word	0xbefe4f76

080241cc <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 80241cc:	ee10 3a10 	vmov	r3, s0
 80241d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
 80241d4:	ee00 3a10 	vmov	s0, r3
 80241d8:	4770      	bx	lr
 80241da:	bf00      	nop

080241dc <fastexp2f>:

// fast floating-point exp2 function taken from Robert Bristow Johnson's
// post in the music-dsp list on Date: Tue, 02 Sep 2014 16:50:11 -0400
float fastexp2f(float x)
{
    if (x >= -127.0)
 80241dc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802425c <fastexp2f+0x80>
 80241e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80241e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80241e8:	db34      	blt.n	8024254 <fastexp2f+0x78>
    {
        float accumulator, xPower;
        union {float f; int32_t i;} xBits;
        
        xBits.i = (int32_t)(x + 4096.0f) - 4096L;               /* integer part */
 80241ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8024260 <fastexp2f+0x84>
        xPower = x*x;
        accumulator += 0.24137976293709f*xPower;
        xPower *= x;
        accumulator += 0.05203236900844f*xPower;
        xPower *= x;
        accumulator += 0.01355574723481f*xPower;
 80241ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80241f2:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8024264 <fastexp2f+0x88>
        xBits.i = (int32_t)(x + 4096.0f) - 4096L;               /* integer part */
 80241f6:	ee30 7a07 	vadd.f32	s14, s0, s14
        accumulator += 0.01355574723481f*xPower;
 80241fa:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8024268 <fastexp2f+0x8c>
 80241fe:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 802426c <fastexp2f+0x90>
 8024202:	ed9f 5a1b 	vldr	s10, [pc, #108]	; 8024270 <fastexp2f+0x94>
        xBits.i = (int32_t)(x + 4096.0f) - 4096L;               /* integer part */
 8024206:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 802420a:	ee17 3a10 	vmov	r3, s14
 802420e:	f5a3 5280 	sub.w	r2, r3, #4096	; 0x1000
 8024212:	ee07 2a10 	vmov	s14, r2
        
        xBits.i += 127;                                                    /* bias integer part */
 8024216:	f46f 6278 	mvn.w	r2, #3968	; 0xf80
        x -= (float)(xBits.i);                                             /* fractional part */
 802421a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        xBits.i += 127;                                                    /* bias integer part */
 802421e:	4413      	add	r3, r2
        xBits.i<<= 23;                                                     /* move biased int part into exponent bits */
 8024220:	05db      	lsls	r3, r3, #23
        x -= (float)(xBits.i);                                             /* fractional part */
 8024222:	ee30 7a47 	vsub.f32	s14, s0, s14
        xPower = x*x;
 8024226:	ee67 6a07 	vmul.f32	s13, s14, s14
        accumulator += 0.01355574723481f*xPower;
 802422a:	eee6 7aa4 	vfma.f32	s15, s13, s9
 802422e:	eeb0 0a67 	vmov.f32	s0, s15
        xPower *= x;
 8024232:	ee67 7a26 	vmul.f32	s15, s14, s13
        accumulator += 0.01355574723481f*xPower;
 8024236:	eef0 6a46 	vmov.f32	s13, s12
 802423a:	eea7 0aa5 	vfma.f32	s0, s15, s11
 802423e:	eee7 6a85 	vfma.f32	s13, s15, s10
 8024242:	eef0 7a40 	vmov.f32	s15, s0
 8024246:	eee7 7a26 	vfma.f32	s15, s14, s13
        
        return accumulator * xBits.f;
 802424a:	ee07 3a10 	vmov	s14, r3
 802424e:	ee27 0a87 	vmul.f32	s0, s15, s14
 8024252:	4770      	bx	lr
    }
    else
    {
        return 0.0f;
 8024254:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8024274 <fastexp2f+0x98>
    }
}
 8024258:	4770      	bx	lr
 802425a:	bf00      	nop
 802425c:	c2fe0000 	.word	0xc2fe0000
 8024260:	45800000 	.word	0x45800000
 8024264:	3e772c42 	.word	0x3e772c42
 8024268:	3d551fe5 	.word	0x3d551fe5
 802426c:	3f316a8e 	.word	0x3f316a8e
 8024270:	3c5e18ed 	.word	0x3c5e18ed
 8024274:	00000000 	.word	0x00000000

08024278 <LEAF_crossfade>:
 when t = 0, volumes[0] = 0.707, volumes[1] = 0.707 (equal-power cross fade)
 when t = 1, volumes[0] = 1, volumes[1] = 0
 */

void LEAF_crossfade(float fade, float* volumes) {
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8024278:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802427c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8024280:	ee30 7a27 	vadd.f32	s14, s0, s15
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8024284:	ee77 7ac0 	vsub.f32	s15, s15, s0
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8024288:	ee27 7a26 	vmul.f32	s14, s14, s13
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 802428c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8024290:	eef1 6ac7 	vsqrt.f32	s13, s14
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8024294:	eeb1 7ae7 	vsqrt.f32	s14, s15
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8024298:	edc0 6a00 	vstr	s13, [r0]
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 802429c:	ed80 7a01 	vstr	s14, [r0, #4]
}
 80242a0:	4770      	bx	lr
 80242a2:	bf00      	nop

080242a4 <LEAF_frequencyToMidi>:
}
#endif

float LEAF_frequencyToMidi(float f)
{
    return (69.0f + 12.0f * log2f(f * INV_440));
 80242a4:	eddf 7a07 	vldr	s15, [pc, #28]	; 80242c4 <LEAF_frequencyToMidi+0x20>
{
 80242a8:	b508      	push	{r3, lr}
    return (69.0f + 12.0f * log2f(f * INV_440));
 80242aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80242ae:	f003 fb93 	bl	80279d8 <log2f>
 80242b2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80242b6:	eddf 7a04 	vldr	s15, [pc, #16]	; 80242c8 <LEAF_frequencyToMidi+0x24>
}
 80242ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80242be:	eeb0 0a67 	vmov.f32	s0, s15
 80242c2:	bd08      	pop	{r3, pc}
 80242c4:	3b14f209 	.word	0x3b14f209
 80242c8:	428a0000 	.word	0x428a0000

080242cc <LEAF_shaper>:

// Jones shaper
float LEAF_shaper(float input, float m_drive)
{
    float fx = input * 2.0f;    // prescale
 80242cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80242d0:	eddf 6a1a 	vldr	s13, [pc, #104]	; 802433c <LEAF_shaper+0x70>
 80242d4:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8024340 <LEAF_shaper+0x74>
    
    xc = LEAF_clip(-SQRT8, fx, SQRT8);
    xc2 = xc*xc;
    c = 0.5f*fx*(3.0f - (xc2));
    xc4 = xc2 * xc2;
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80242d8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80242dc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80242e0:	ed9f 4a18 	vldr	s8, [pc, #96]	; 8024344 <LEAF_shaper+0x78>
 80242e4:	fec0 7a67 	vminnm.f32	s15, s0, s15
 80242e8:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    xc2 = xc*xc;
 80242ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80242f0:	eddf 4a15 	vldr	s9, [pc, #84]	; 8024348 <LEAF_shaper+0x7c>
 80242f4:	ee20 6a06 	vmul.f32	s12, s0, s12
    shaperOut *= 0.5f;    // post_scale
 80242f8:	ed9f 5a14 	vldr	s10, [pc, #80]	; 802434c <LEAF_shaper+0x80>
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80242fc:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8024300:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8024304:	ee27 7a67 	vnmul.f32	s14, s14, s15
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8024308:	ee27 0aa4 	vmul.f32	s0, s15, s9
    c = 0.5f*fx*(3.0f - (xc2));
 802430c:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8024310:	eea3 7a84 	vfma.f32	s14, s7, s8
 8024314:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    c = 0.5f*fx*(3.0f - (xc2));
 8024318:	ee75 5ae7 	vsub.f32	s11, s11, s15
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 802431c:	ee70 0aa6 	vadd.f32	s1, s1, s13
 8024320:	eef0 7a40 	vmov.f32	s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8024324:	ee37 7a24 	vadd.f32	s14, s14, s9
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8024328:	eee5 7a86 	vfma.f32	s15, s11, s12
    shaperOut *= 0.5f;    // post_scale
 802432c:	ee20 0a85 	vmul.f32	s0, s1, s10
 8024330:	ee27 0a00 	vmul.f32	s0, s14, s0
    return shaperOut;
}
 8024334:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024338:	4770      	bx	lr
 802433a:	bf00      	nop
 802433c:	c03504f3 	.word	0xc03504f3
 8024340:	403504f3 	.word	0x403504f3
 8024344:	3c800000 	.word	0x3c800000
 8024348:	3d4ccccd 	.word	0x3d4ccccd
 802434c:	3f272f05 	.word	0x3f272f05

08024350 <LEAF_round>:

// round input to nearest rnd
float LEAF_round (float input, float rnd)
{
    rnd = fabsf(rnd);
 8024350:	eef0 0ae0 	vabs.f32	s1, s1
    
    if (rnd <= 0.0000001f) return input;
 8024354:	eddf 7a06 	vldr	s15, [pc, #24]	; 8024370 <LEAF_round+0x20>
 8024358:	eef4 0ae7 	vcmpe.f32	s1, s15
 802435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024360:	d905      	bls.n	802436e <LEAF_round+0x1e>
    
    float scale = 1.f / rnd;
    
    return roundf(input * scale) / scale;
 8024362:	eec0 7a20 	vdiv.f32	s15, s0, s1
 8024366:	feb8 0a67 	vrinta.f32	s0, s15
 802436a:	ee20 0a20 	vmul.f32	s0, s0, s1
}
 802436e:	4770      	bx	lr
 8024370:	33d6bf95 	.word	0x33d6bf95

08024374 <LEAF_bitwise_xor>:
{
    union unholy_t unholy;
    unholy.f = input;
    unholy.i = (unholy.i ^ op);
    
    return unholy.f;
 8024374:	ee10 3a10 	vmov	r3, s0
 8024378:	4058      	eors	r0, r3
}
 802437a:	ee00 0a10 	vmov	s0, r0
 802437e:	4770      	bx	lr

08024380 <LEAF_clip>:

float   LEAF_clip(float min, float val, float max)
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 8024380:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8024384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024388:	dd05      	ble.n	8024396 <LEAF_clip+0x16>
 802438a:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 802438e:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 8024392:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 8024396:	eeb4 0ae0 	vcmpe.f32	s0, s1
 802439a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802439e:	dc01      	bgt.n	80243a4 <LEAF_clip+0x24>
 80243a0:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 80243a4:	4770      	bx	lr
 80243a6:	bf00      	nop

080243a8 <LEAF_clipInt>:

int   LEAF_clipInt(int min, int val, int max)
{
    int tempmin = min;
    int tempmax = max;
    if (min > max)
 80243a8:	4290      	cmp	r0, r2
 80243aa:	dd02      	ble.n	80243b2 <LEAF_clipInt+0xa>
 80243ac:	4603      	mov	r3, r0
 80243ae:	4610      	mov	r0, r2
 80243b0:	461a      	mov	r2, r3
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin) {
 80243b2:	4288      	cmp	r0, r1
 80243b4:	dc03      	bgt.n	80243be <LEAF_clipInt+0x16>
 80243b6:	428a      	cmp	r2, r1
 80243b8:	bfa8      	it	ge
 80243ba:	460a      	movge	r2, r1
 80243bc:	4610      	mov	r0, r2
    } else if (val > tempmax) {
        return tempmax;
    } else {
        return val;
    }
}
 80243be:	4770      	bx	lr

080243c0 <LEAF_isPrime>:

int     LEAF_isPrime(uint64_t number )
{
    if ( number == 2 ) return 1;
 80243c0:	2900      	cmp	r1, #0
 80243c2:	bf08      	it	eq
 80243c4:	2802      	cmpeq	r0, #2
 80243c6:	d029      	beq.n	802441c <LEAF_isPrime+0x5c>
{
 80243c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ( number & 1 ) {
 80243cc:	f000 0401 	and.w	r4, r0, #1
 80243d0:	2500      	movs	r5, #0
 80243d2:	4606      	mov	r6, r0
 80243d4:	ea54 0305 	orrs.w	r3, r4, r5
 80243d8:	d01d      	beq.n	8024416 <LEAF_isPrime+0x56>
 80243da:	460f      	mov	r7, r1
        for ( int i=3; i<(int)sqrt((double)number)+1; i+=2 )
 80243dc:	f7dc f90a 	bl	80005f4 <__aeabi_ul2d>
 80243e0:	2403      	movs	r4, #3
 80243e2:	2500      	movs	r5, #0
 80243e4:	ec41 0b17 	vmov	d7, r0, r1
 80243e8:	eeb1 7bc7 	vsqrt.f64	d7, d7
 80243ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80243f0:	ee17 8a90 	vmov	r8, s15
 80243f4:	e006      	b.n	8024404 <LEAF_isPrime+0x44>
            if ( (number % i) == 0 ) return 0;
 80243f6:	f7dc fa41 	bl	800087c <__aeabi_uldivmod>
 80243fa:	3402      	adds	r4, #2
 80243fc:	f145 0500 	adc.w	r5, r5, #0
 8024400:	4313      	orrs	r3, r2
 8024402:	d008      	beq.n	8024416 <LEAF_isPrime+0x56>
        for ( int i=3; i<(int)sqrt((double)number)+1; i+=2 )
 8024404:	45a0      	cmp	r8, r4
            if ( (number % i) == 0 ) return 0;
 8024406:	4622      	mov	r2, r4
 8024408:	462b      	mov	r3, r5
 802440a:	4630      	mov	r0, r6
 802440c:	4639      	mov	r1, r7
        for ( int i=3; i<(int)sqrt((double)number)+1; i+=2 )
 802440e:	daf2      	bge.n	80243f6 <LEAF_isPrime+0x36>
    if ( number == 2 ) return 1;
 8024410:	2001      	movs	r0, #1
        return 1; // prime
    }
    else return 0; // even
}
 8024412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else return 0; // even
 8024416:	2000      	movs	r0, #0
}
 8024418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( number == 2 ) return 1;
 802441c:	2001      	movs	r0, #1
}
 802441e:	4770      	bx	lr

08024420 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
float LEAF_tanh(float x)
{
    
    if( x < -3.0f )
 8024420:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 8024424:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8024428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802442c:	d418      	bmi.n	8024460 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
 802442e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8024432:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8024436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802443a:	dc0e      	bgt.n	802445a <LEAF_tanh+0x3a>
        return 1.0f;
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 802443c:	ee60 6a00 	vmul.f32	s13, s0, s0
 8024440:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 8024444:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 8024448:	ee36 7aa7 	vadd.f32	s14, s13, s15
 802444c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8024450:	ee27 7a00 	vmul.f32	s14, s14, s0
 8024454:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8024458:	4770      	bx	lr
        return 1.0f;
 802445a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
 802445e:	4770      	bx	lr
        return -1.0f;
 8024460:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8024464:	4770      	bx	lr
 8024466:	bf00      	nop

08024468 <LEAF_generate_exp>:


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
	float increment = (end - start) / (float)size;
 8024468:	ee07 1a90 	vmov	s15, r1
 802446c:	ee31 1a60 	vsub.f32	s2, s2, s1
	float x = start;
	for (int i = 0; i < size; i++)
 8024470:	2900      	cmp	r1, #0
	float increment = (end - start) / (float)size;
 8024472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8024476:	b538      	push	{r3, r4, r5, lr}
 8024478:	ed2d 8b04 	vpush	{d8-d9}
	float increment = (end - start) / (float)size;
 802447c:	eec1 8a27 	vdiv.f32	s17, s2, s15
	for (int i = 0; i < size; i++)
 8024480:	dd16      	ble.n	80244b0 <LEAF_generate_exp+0x48>
 8024482:	4604      	mov	r4, r0
 8024484:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8024488:	eeb0 8a60 	vmov.f32	s16, s1
 802448c:	eeb0 9a40 	vmov.f32	s18, s0
 8024490:	eef0 9a61 	vmov.f32	s19, s3
	{
		buffer[i] = powf(base, x) + offset;
 8024494:	eef0 0a48 	vmov.f32	s1, s16
 8024498:	eeb0 0a49 	vmov.f32	s0, s18
 802449c:	f003 fb1c 	bl	8027ad8 <powf>
 80244a0:	ee30 0a29 	vadd.f32	s0, s0, s19
		x += increment;
 80244a4:	ee38 8a28 	vadd.f32	s16, s16, s17
		buffer[i] = powf(base, x) + offset;
 80244a8:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < size; i++)
 80244ac:	42a5      	cmp	r5, r4
 80244ae:	d1f1      	bne.n	8024494 <LEAF_generate_exp+0x2c>
    }
}
 80244b0:	ecbd 8b04 	vpop	{d8-d9}
 80244b4:	bd38      	pop	{r3, r4, r5, pc}
 80244b6:	bf00      	nop

080244b8 <LEAF_generate_atodbPositiveClipped>:
    }
}


void LEAF_generate_atodbPositiveClipped(float* buffer, float lowerThreshold, float range, int size)
{
 80244b8:	b538      	push	{r3, r4, r5, lr}
    alias.ui &= 0x7fffffff;
 80244ba:	ee10 3a10 	vmov	r3, s0
    float increment = 1.0f / (float)size;
 80244be:	ee07 1a90 	vmov	s15, r1
 80244c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    float scalar = range / fastabsf(lowerThreshold);
    for (int i = 0; i < size; i++)
 80244c6:	2900      	cmp	r1, #0
    alias.ui &= 0x7fffffff;
 80244c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    float increment = 1.0f / (float)size;
 80244cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float scalar = range / fastabsf(lowerThreshold);
 80244d0:	ee06 3a90 	vmov	s13, r3
{
 80244d4:	ed2d 8b08 	vpush	{d8-d11}
    float scalar = range / fastabsf(lowerThreshold);
 80244d8:	eec0 9aa6 	vdiv.f32	s19, s1, s13
    float increment = 1.0f / (float)size;
 80244dc:	eec7 aa27 	vdiv.f32	s21, s14, s15
    for (int i = 0; i < size; i++)
 80244e0:	dd29      	ble.n	8024536 <LEAF_generate_atodbPositiveClipped+0x7e>
 80244e2:	ed9f 9a1b 	vldr	s18, [pc, #108]	; 8024550 <LEAF_generate_atodbPositiveClipped+0x98>
 80244e6:	4604      	mov	r4, r0
 80244e8:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80244ec:	fe80 aa49 	vminnm.f32	s20, s0, s18
    {
        float temp = atodb(x);
        temp = LEAF_clip(lowerThreshold, temp, 0.0f);
        buffer[i] = (temp-lowerThreshold) * scalar;
 80244f0:	ee7a ba40 	vsub.f32	s23, s20, s0
 80244f4:	eef0 8a40 	vmov.f32	s17, s0
}


float atodb(float a)
{
    return 20.0f*log10f(a);
 80244f8:	eeb3 ba04 	vmov.f32	s22, #52	; 0x41a00000  20.0
        buffer[i] = (temp-lowerThreshold) * scalar;
 80244fc:	ee6b baa9 	vmul.f32	s23, s23, s19
    float x = 0.0f;
 8024500:	eeb0 8a49 	vmov.f32	s16, s18
 8024504:	fe80 9a09 	vmaxnm.f32	s18, s0, s18
    return 20.0f*log10f(a);
 8024508:	eeb0 0a48 	vmov.f32	s0, s16
 802450c:	f003 fe98 	bl	8028240 <log10f>
 8024510:	ee20 0a0b 	vmul.f32	s0, s0, s22
    if (val < tempmin)
 8024514:	eeb4 aac0 	vcmpe.f32	s20, s0
        buffer[i] = (temp-lowerThreshold) * scalar;
 8024518:	fec9 7a40 	vminnm.f32	s15, s18, s0
 802451c:	ee77 7ae8 	vsub.f32	s15, s15, s17
    if (val < tempmin)
 8024520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        buffer[i] = (temp-lowerThreshold) * scalar;
 8024524:	ee67 7aa9 	vmul.f32	s15, s15, s19
    if (val < tempmin)
 8024528:	dc08      	bgt.n	802453c <LEAF_generate_atodbPositiveClipped+0x84>
        buffer[i] = (temp-lowerThreshold) * scalar;
 802452a:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 802452e:	42ac      	cmp	r4, r5
        x += increment;
 8024530:	ee38 8a2a 	vadd.f32	s16, s16, s21
    for (int i = 0; i < size; i++)
 8024534:	d1e8      	bne.n	8024508 <LEAF_generate_atodbPositiveClipped+0x50>
}
 8024536:	ecbd 8b08 	vpop	{d8-d11}
 802453a:	bd38      	pop	{r3, r4, r5, pc}
        buffer[i] = (temp-lowerThreshold) * scalar;
 802453c:	ece4 ba01 	vstmia	r4!, {s23}
    for (int i = 0; i < size; i++)
 8024540:	42a5      	cmp	r5, r4
        x += increment;
 8024542:	ee38 8a2a 	vadd.f32	s16, s16, s21
    for (int i = 0; i < size; i++)
 8024546:	d1df      	bne.n	8024508 <LEAF_generate_atodbPositiveClipped+0x50>
}
 8024548:	ecbd 8b08 	vpop	{d8-d11}
 802454c:	bd38      	pop	{r3, r4, r5, pc}
 802454e:	bf00      	nop
 8024550:	00000000 	.word	0x00000000

08024554 <LEAF_midiToFrequency>:
    if( f <= -1500.0f ) return (0);
 8024554:	eddf 7a10 	vldr	s15, [pc, #64]	; 8024598 <LEAF_midiToFrequency+0x44>
 8024558:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802455c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024560:	d917      	bls.n	8024592 <LEAF_midiToFrequency+0x3e>
 8024562:	eef0 7a40 	vmov.f32	s15, s0
    else return ( powf(2.0f, (f - 69.0f) * 0.083333333333333f) * 440.0f );
 8024566:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 802459c <LEAF_midiToFrequency+0x48>
 802456a:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80245a0 <LEAF_midiToFrequency+0x4c>
 802456e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8024572:	fec7 7ae0 	vminnm.f32	s15, s15, s1
 8024576:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802457a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80245a4 <LEAF_midiToFrequency+0x50>
{
 802457e:	b508      	push	{r3, lr}
    else return ( powf(2.0f, (f - 69.0f) * 0.083333333333333f) * 440.0f );
 8024580:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8024584:	f003 faa8 	bl	8027ad8 <powf>
 8024588:	eddf 7a07 	vldr	s15, [pc, #28]	; 80245a8 <LEAF_midiToFrequency+0x54>
 802458c:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8024590:	bd08      	pop	{r3, pc}
    if( f <= -1500.0f ) return (0);
 8024592:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80245ac <LEAF_midiToFrequency+0x58>
}
 8024596:	4770      	bx	lr
 8024598:	c4bb8000 	.word	0xc4bb8000
 802459c:	428a0000 	.word	0x428a0000
 80245a0:	44bb6000 	.word	0x44bb6000
 80245a4:	3daaaaab 	.word	0x3daaaaab
 80245a8:	43dc0000 	.word	0x43dc0000
 80245ac:	00000000 	.word	0x00000000

080245b0 <LEAF_interpolate_hermite_x>:
    float y0my1 = yy0 - yy1;
 80245b0:	ee70 7a60 	vsub.f32	s15, s0, s1
    float c1 = 0.5f * (yy2 - yy0);
 80245b4:	ee31 7a40 	vsub.f32	s14, s2, s0
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 80245b8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80245bc:	ee71 1ae7 	vsub.f32	s3, s3, s15
 80245c0:	ee70 6ac1 	vsub.f32	s13, s1, s2
    float c2 = y0my1 + c1 - c3;
 80245c4:	eee7 7a06 	vfma.f32	s15, s14, s12
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 80245c8:	ee31 1ac1 	vsub.f32	s2, s3, s2
 80245cc:	eee1 6a06 	vfma.f32	s13, s2, s12
    float c2 = y0my1 + c1 - c3;
 80245d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 80245d4:	eee6 7a82 	vfma.f32	s15, s13, s4
 80245d8:	ee67 7a82 	vmul.f32	s15, s15, s4
 80245dc:	eee7 7a06 	vfma.f32	s15, s14, s12
}
 80245e0:	eee7 0a82 	vfma.f32	s1, s15, s4
 80245e4:	eeb0 0a60 	vmov.f32	s0, s1
 80245e8:	4770      	bx	lr
 80245ea:	bf00      	nop

080245ec <LEAF_interpolation_linear>:
{
 80245ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80245f0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8024610 <LEAF_interpolation_linear+0x24>
 80245f4:	fe81 1a67 	vminnm.f32	s2, s2, s15
 80245f8:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    float omAlpha = 1.0f - alpha;
 80245fc:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
 8024600:	ee20 1a81 	vmul.f32	s2, s1, s2
}
 8024604:	eea7 1a80 	vfma.f32	s2, s15, s0
 8024608:	eeb0 0a41 	vmov.f32	s0, s2
 802460c:	4770      	bx	lr
 802460e:	bf00      	nop
 8024610:	00000000 	.word	0x00000000

08024614 <mtof>:
    if (f <= -1500.0f) return(0);
 8024614:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8024648 <mtof+0x34>
 8024618:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024620:	d90f      	bls.n	8024642 <mtof+0x2e>
    else return (8.17579891564f * expf(0.0577622650f * f));
 8024622:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 802464c <mtof+0x38>
 8024626:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8024650 <mtof+0x3c>
 802462a:	fe80 0a47 	vminnm.f32	s0, s0, s14
{
 802462e:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8024630:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024634:	f003 f8e2 	bl	80277fc <expf>
 8024638:	eddf 7a06 	vldr	s15, [pc, #24]	; 8024654 <mtof+0x40>
 802463c:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8024640:	bd08      	pop	{r3, pc}
    if (f <= -1500.0f) return(0);
 8024642:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8024658 <mtof+0x44>
}
 8024646:	4770      	bx	lr
 8024648:	c4bb8000 	.word	0xc4bb8000
 802464c:	44bb6000 	.word	0x44bb6000
 8024650:	3d6c9820 	.word	0x3d6c9820
 8024654:	4102d013 	.word	0x4102d013
 8024658:	00000000 	.word	0x00000000

0802465c <faster_mtof>:
 802465c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024660:	eddf 6a0e 	vldr	s13, [pc, #56]	; 802469c <faster_mtof+0x40>
 8024664:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80246a0 <faster_mtof+0x44>
 8024668:	eee0 7a26 	vfma.f32	s15, s0, s13
 802466c:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8024670:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024674:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024678:	ee20 0a00 	vmul.f32	s0, s0, s0
 802467c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024680:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024684:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024688:	ee20 0a00 	vmul.f32	s0, s0, s0
 802468c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024690:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024694:	ee20 0a07 	vmul.f32	s0, s0, s14
 8024698:	4770      	bx	lr
 802469a:	bf00      	nop
 802469c:	386c9820 	.word	0x386c9820
 80246a0:	4102d013 	.word	0x4102d013
 80246a4:	00000000 	.word	0x00000000

080246a8 <powtodb>:
{
 80246a8:	b508      	push	{r3, lr}
 80246aa:	ed2d 8b02 	vpush	{d8}
    if (f <= 0) return (0);
 80246ae:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80246f8 <powtodb+0x50>
 80246b2:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80246b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246ba:	d910      	bls.n	80246de <powtodb+0x36>
        float val = 100.0f + 10.0f/LOGTEN * logf(f);
 80246bc:	f003 f924 	bl	8027908 <logf>
 80246c0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80246c4:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80246e8 <powtodb+0x40>
 80246c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80246f0 <powtodb+0x48>
 80246cc:	eea6 0b07 	vfma.f64	d0, d6, d7
 80246d0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
        return (val < 0.0f ? 0.0f : val);
 80246d4:	fe80 0a08 	vmaxnm.f32	s0, s0, s16
}
 80246d8:	ecbd 8b02 	vpop	{d8}
 80246dc:	bd08      	pop	{r3, pc}
    if (f <= 0) return (0);
 80246de:	eeb0 0a48 	vmov.f32	s0, s16
}
 80246e2:	ecbd 8b02 	vpop	{d8}
 80246e6:	bd08      	pop	{r3, pc}
 80246e8:	ed384f8a 	.word	0xed384f8a
 80246ec:	40115f2c 	.word	0x40115f2c
 80246f0:	00000000 	.word	0x00000000
 80246f4:	40590000 	.word	0x40590000
 80246f8:	00000000 	.word	0x00000000

080246fc <fastdbtoa>:


float fastdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 80246fc:	eddf 7a02 	vldr	s15, [pc, #8]	; 8024708 <fastdbtoa+0xc>
 8024700:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024704:	f003 b87a 	b.w	80277fc <expf>
 8024708:	3debc8e3 	.word	0x3debc8e3

0802470c <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
 802470c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024710:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 802473c <fasterdbtoa+0x30>
 8024714:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 8024718:	ee27 0aa7 	vmul.f32	s0, s15, s15
 802471c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024720:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024724:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8024728:	ee20 0a00 	vmul.f32	s0, s0, s0
 802472c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024730:	ee20 0a00 	vmul.f32	s0, s0, s0

float fasterdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
 8024734:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024738:	4770      	bx	lr
 802473a:	bf00      	nop
 802473c:	39ebc8e3 	.word	0x39ebc8e3

08024740 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8024740:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8024744:	4770      	bx	lr
 8024746:	bf00      	nop

08024748 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 8024748:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 802474c:	4770      	bx	lr
 802474e:	bf00      	nop

08024750 <leaf_pool_init>:
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(char* memory, size_t size)
{
 8024750:	b470      	push	{r4, r5, r6}
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 8024752:	4b0a      	ldr	r3, [pc, #40]	; (802477c <leaf_pool_init+0x2c>)
 8024754:	2610      	movs	r6, #16
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 8024756:	f1a1 0410 	sub.w	r4, r1, #16
    pool->usize  = 0;
 802475a:	2200      	movs	r2, #0
    pool->msize  = size;
 802475c:	6259      	str	r1, [r3, #36]	; 0x24
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + leaf.header_size;
 802475e:	1985      	adds	r5, r0, r6
    leaf.mempool = &leaf._mempool;
 8024760:	f103 011c 	add.w	r1, r3, #28
    pool->mpool = (char*)memory;
 8024764:	61d8      	str	r0, [r3, #28]
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 8024766:	62de      	str	r6, [r3, #44]	; 0x2c
    pool->usize  = 0;
 8024768:	621a      	str	r2, [r3, #32]
    node->pool = block_location + leaf.header_size;
 802476a:	6005      	str	r5, [r0, #0]
    node->next = next;
    node->prev = prev;
    node->size = size;
 802476c:	60c4      	str	r4, [r0, #12]
    node->prev = prev;
 802476e:	e9c0 2201 	strd	r2, r2, [r0, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 8024772:	6298      	str	r0, [r3, #40]	; 0x28
    leaf.mempool = &leaf._mempool;
 8024774:	6199      	str	r1, [r3, #24]
}
 8024776:	bc70      	pop	{r4, r5, r6}
 8024778:	4770      	bx	lr
 802477a:	bf00      	nop
 802477c:	200194a0 	.word	0x200194a0

08024780 <mpool_alloc>:
{
 8024780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pool->head == NULL)
 8024782:	68cb      	ldr	r3, [r1, #12]
 8024784:	2b00      	cmp	r3, #0
 8024786:	d049      	beq.n	802481c <mpool_alloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8024788:	3007      	adds	r0, #7
 802478a:	f020 0007 	bic.w	r0, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 802478e:	e002      	b.n	8024796 <mpool_alloc+0x16>
        if (node_to_alloc == NULL)
 8024790:	4623      	mov	r3, r4
 8024792:	2c00      	cmp	r4, #0
 8024794:	d042      	beq.n	802481c <mpool_alloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 8024796:	68da      	ldr	r2, [r3, #12]
 8024798:	685c      	ldr	r4, [r3, #4]
 802479a:	4282      	cmp	r2, r0
 802479c:	d3f8      	bcc.n	8024790 <mpool_alloc+0x10>
    if (leftover > leaf.header_size)
 802479e:	4e22      	ldr	r6, [pc, #136]	; (8024828 <mpool_alloc+0xa8>)
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80247a0:	1a17      	subs	r7, r2, r0
    node_to_alloc->size = size_to_alloc;
 80247a2:	60d8      	str	r0, [r3, #12]
    if (leftover > leaf.header_size)
 80247a4:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 80247a6:	42bd      	cmp	r5, r7
 80247a8:	d327      	bcc.n	80247fa <mpool_alloc+0x7a>
        node_to_alloc->size += leftover;
 80247aa:	46a4      	mov	ip, r4
 80247ac:	60da      	str	r2, [r3, #12]
    if (pool->head == node_to_alloc)
 80247ae:	68ca      	ldr	r2, [r1, #12]
 80247b0:	429a      	cmp	r2, r3
        pool->head = new_node;
 80247b2:	bf08      	it	eq
 80247b4:	f8c1 c00c 	streq.w	ip, [r1, #12]
 80247b8:	e9d3 0201 	ldrd	r0, r2, [r3, #4]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 80247bc:	b108      	cbz	r0, 80247c2 <mpool_alloc+0x42>
    {
        // Close the link
        node->next->prev = node->prev;
 80247be:	6082      	str	r2, [r0, #8]
 80247c0:	689a      	ldr	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 80247c2:	b10a      	cbz	r2, 80247c8 <mpool_alloc+0x48>
    {
        // Close the link
        node->prev->next = node->next;
 80247c4:	6858      	ldr	r0, [r3, #4]
 80247c6:	6050      	str	r0, [r2, #4]
    }
    
    node->next = NULL;
 80247c8:	2200      	movs	r2, #0
    pool->usize += leaf.header_size + node_to_alloc->size;
 80247ca:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 80247cc:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 80247d0:	6848      	ldr	r0, [r1, #4]
 80247d2:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 80247d4:	4428      	add	r0, r5
 80247d6:	4420      	add	r0, r4
 80247d8:	6048      	str	r0, [r1, #4]
    if (leaf.clearOnAllocation > 0)
 80247da:	6971      	ldr	r1, [r6, #20]
 80247dc:	4291      	cmp	r1, r2
 80247de:	dd0a      	ble.n	80247f6 <mpool_alloc+0x76>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80247e0:	68d9      	ldr	r1, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 80247e2:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80247e4:	b141      	cbz	r1, 80247f8 <mpool_alloc+0x78>
 80247e6:	3801      	subs	r0, #1
 80247e8:	4614      	mov	r4, r2
 80247ea:	f800 4f01 	strb.w	r4, [r0, #1]!
 80247ee:	3201      	adds	r2, #1
 80247f0:	68d9      	ldr	r1, [r3, #12]
 80247f2:	4291      	cmp	r1, r2
 80247f4:	d8f9      	bhi.n	80247ea <mpool_alloc+0x6a>
 80247f6:	6818      	ldr	r0, [r3, #0]
}
 80247f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80247fa:	680a      	ldr	r2, [r1, #0]
        offset += leaf.header_size + node_to_alloc->size;
 80247fc:	4428      	add	r0, r5
                               node_to_alloc->prev,
 80247fe:	f8d3 e008 	ldr.w	lr, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 8024802:	1b7f      	subs	r7, r7, r5
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8024804:	eba3 0c02 	sub.w	ip, r3, r2
        offset += leaf.header_size + node_to_alloc->size;
 8024808:	4460      	add	r0, ip
        new_node = create_node(&pool->mpool[offset],
 802480a:	eb02 0c00 	add.w	ip, r2, r0
    node->pool = block_location + leaf.header_size;
 802480e:	4465      	add	r5, ip
 8024810:	5015      	str	r5, [r2, r0]
    node->size = size;
 8024812:	f8cc 700c 	str.w	r7, [ip, #12]
    node->prev = prev;
 8024816:	e9cc 4e01 	strd	r4, lr, [ip, #4]
 802481a:	e7c8      	b.n	80247ae <mpool_alloc+0x2e>
}

void leaf_mempool_overrun(void)
{
    LEAF_error(1);
 802481c:	2001      	movs	r0, #1
 802481e:	f002 fe3b 	bl	8027498 <LEAF_error>
        return NULL;
 8024822:	2000      	movs	r0, #0
}
 8024824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024826:	bf00      	nop
 8024828:	200194a0 	.word	0x200194a0

0802482c <mpool_calloc>:
{
 802482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pool->head == NULL)
 802482e:	68cb      	ldr	r3, [r1, #12]
 8024830:	2b00      	cmp	r3, #0
 8024832:	d046      	beq.n	80248c2 <mpool_calloc+0x96>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8024834:	3007      	adds	r0, #7
 8024836:	f020 0007 	bic.w	r0, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 802483a:	e002      	b.n	8024842 <mpool_calloc+0x16>
        if (node_to_alloc == NULL)
 802483c:	4623      	mov	r3, r4
 802483e:	2c00      	cmp	r4, #0
 8024840:	d03f      	beq.n	80248c2 <mpool_calloc+0x96>
    while (node_to_alloc->size < size_to_alloc)
 8024842:	68da      	ldr	r2, [r3, #12]
 8024844:	685c      	ldr	r4, [r3, #4]
 8024846:	4282      	cmp	r2, r0
 8024848:	d3f8      	bcc.n	802483c <mpool_calloc+0x10>
    if (leftover > leaf.header_size)
 802484a:	4f20      	ldr	r7, [pc, #128]	; (80248cc <mpool_calloc+0xa0>)
    size_t leftover = node_to_alloc->size - size_to_alloc;
 802484c:	1a16      	subs	r6, r2, r0
    node_to_alloc->size = size_to_alloc;
 802484e:	60d8      	str	r0, [r3, #12]
    if (leftover > leaf.header_size)
 8024850:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8024852:	42b5      	cmp	r5, r6
 8024854:	d324      	bcc.n	80248a0 <mpool_calloc+0x74>
        node_to_alloc->size += leftover;
 8024856:	46a4      	mov	ip, r4
 8024858:	60da      	str	r2, [r3, #12]
    if (pool->head == node_to_alloc)
 802485a:	68ca      	ldr	r2, [r1, #12]
 802485c:	429a      	cmp	r2, r3
        pool->head = new_node;
 802485e:	bf08      	it	eq
 8024860:	f8c1 c00c 	streq.w	ip, [r1, #12]
 8024864:	e9d3 0201 	ldrd	r0, r2, [r3, #4]
    if (node->next != NULL)
 8024868:	b108      	cbz	r0, 802486e <mpool_calloc+0x42>
        node->next->prev = node->prev;
 802486a:	6082      	str	r2, [r0, #8]
 802486c:	689a      	ldr	r2, [r3, #8]
    if (node->prev != NULL)
 802486e:	b10a      	cbz	r2, 8024874 <mpool_calloc+0x48>
        node->prev->next = node->next;
 8024870:	6858      	ldr	r0, [r3, #4]
 8024872:	6050      	str	r0, [r2, #4]
    node->next = NULL;
 8024874:	2200      	movs	r2, #0
    pool->usize += leaf.header_size + node_to_alloc->size;
 8024876:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 8024878:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 802487c:	6848      	ldr	r0, [r1, #4]
 802487e:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8024880:	4428      	add	r0, r5
 8024882:	4420      	add	r0, r4
 8024884:	6048      	str	r0, [r1, #4]
    for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8024886:	68d9      	ldr	r1, [r3, #12]
    char* new_pool = (char*)node_to_alloc->pool;
 8024888:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 802488a:	b141      	cbz	r1, 802489e <mpool_calloc+0x72>
 802488c:	3801      	subs	r0, #1
 802488e:	4614      	mov	r4, r2
 8024890:	f800 4f01 	strb.w	r4, [r0, #1]!
 8024894:	3201      	adds	r2, #1
 8024896:	68d9      	ldr	r1, [r3, #12]
 8024898:	4291      	cmp	r1, r2
 802489a:	d8f9      	bhi.n	8024890 <mpool_calloc+0x64>
 802489c:	6818      	ldr	r0, [r3, #0]
}
 802489e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80248a0:	680a      	ldr	r2, [r1, #0]
        offset += leaf.header_size + node_to_alloc->size;
 80248a2:	4428      	add	r0, r5
                               node_to_alloc->prev,
 80248a4:	f8d3 e008 	ldr.w	lr, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 80248a8:	1b76      	subs	r6, r6, r5
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80248aa:	eba3 0c02 	sub.w	ip, r3, r2
        offset += leaf.header_size + node_to_alloc->size;
 80248ae:	4460      	add	r0, ip
        new_node = create_node(&pool->mpool[offset],
 80248b0:	eb02 0c00 	add.w	ip, r2, r0
    node->pool = block_location + leaf.header_size;
 80248b4:	4465      	add	r5, ip
 80248b6:	5015      	str	r5, [r2, r0]
    node->size = size;
 80248b8:	f8cc 600c 	str.w	r6, [ip, #12]
    node->prev = prev;
 80248bc:	e9cc 4e01 	strd	r4, lr, [ip, #4]
 80248c0:	e7cb      	b.n	802485a <mpool_calloc+0x2e>
    LEAF_error(1);
 80248c2:	2001      	movs	r0, #1
 80248c4:	f002 fde8 	bl	8027498 <LEAF_error>
        return NULL;
 80248c8:	2000      	movs	r0, #0
}
 80248ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80248cc:	200194a0 	.word	0x200194a0

080248d0 <mpool_free>:
{
 80248d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - leaf.header_size);
 80248d4:	4f33      	ldr	r7, [pc, #204]	; (80249a4 <mpool_free+0xd4>)
    pool->usize -= leaf.header_size + freed_node->size;
 80248d6:	684a      	ldr	r2, [r1, #4]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - leaf.header_size);
 80248d8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    mpool_node_t* other_node = pool->head;
 80248da:	68cb      	ldr	r3, [r1, #12]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - leaf.header_size);
 80248dc:	1b00      	subs	r0, r0, r4
    pool->usize -= leaf.header_size + freed_node->size;
 80248de:	1b12      	subs	r2, r2, r4
 80248e0:	68c4      	ldr	r4, [r0, #12]
 80248e2:	1b12      	subs	r2, r2, r4
 80248e4:	604a      	str	r2, [r1, #4]
    while (other_node != NULL)
 80248e6:	2b00      	cmp	r3, #0
 80248e8:	d03e      	beq.n	8024968 <mpool_free+0x98>
        if ((long) other_node < (long) pool->mpool ||
 80248ea:	680a      	ldr	r2, [r1, #0]
 80248ec:	4293      	cmp	r3, r2
 80248ee:	db1f      	blt.n	8024930 <mpool_free+0x60>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
 80248f0:	688c      	ldr	r4, [r1, #8]
 80248f2:	461d      	mov	r5, r3
 80248f4:	4422      	add	r2, r4
        if ((long) other_node < (long) pool->mpool ||
 80248f6:	429a      	cmp	r2, r3
 80248f8:	d91a      	bls.n	8024930 <mpool_free+0x60>
    node->next = NULL;
 80248fa:	f04f 0c00 	mov.w	ip, #0
        if (((long) freed_node) + (leaf.header_size + freed_node->size) == (long) other_node)
 80248fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024900:	68c4      	ldr	r4, [r0, #12]
        next_node = other_node->next;
 8024902:	685e      	ldr	r6, [r3, #4]
        if (((long) freed_node) + (leaf.header_size + freed_node->size) == (long) other_node)
 8024904:	eb02 0e04 	add.w	lr, r2, r4
 8024908:	f8d3 800c 	ldr.w	r8, [r3, #12]
 802490c:	eb0e 0900 	add.w	r9, lr, r0
 8024910:	45a9      	cmp	r9, r5
 8024912:	d030      	beq.n	8024976 <mpool_free+0xa6>
        else if (((long) other_node) + (leaf.header_size + other_node->size) == (long) freed_node)
 8024914:	442a      	add	r2, r5
 8024916:	4442      	add	r2, r8
 8024918:	4290      	cmp	r0, r2
 802491a:	d00e      	beq.n	802493a <mpool_free+0x6a>
    while (other_node != NULL)
 802491c:	b31e      	cbz	r6, 8024966 <mpool_free+0x96>
        if ((long) other_node < (long) pool->mpool ||
 802491e:	680b      	ldr	r3, [r1, #0]
 8024920:	42b3      	cmp	r3, r6
 8024922:	dc05      	bgt.n	8024930 <mpool_free+0x60>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
 8024924:	688c      	ldr	r4, [r1, #8]
 8024926:	4635      	mov	r5, r6
 8024928:	441c      	add	r4, r3
 802492a:	4633      	mov	r3, r6
        if ((long) other_node < (long) pool->mpool ||
 802492c:	42b4      	cmp	r4, r6
 802492e:	d8e6      	bhi.n	80248fe <mpool_free+0x2e>
            LEAF_error(2);
 8024930:	2002      	movs	r0, #2
}
 8024932:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            LEAF_error(2);
 8024936:	f002 bdaf 	b.w	8027498 <LEAF_error>
            other_node->size += leaf.header_size + freed_node->size;
 802493a:	eb0e 0408 	add.w	r4, lr, r8
 802493e:	60dc      	str	r4, [r3, #12]
            if (other_node != pool->head)
 8024940:	68ca      	ldr	r2, [r1, #12]
 8024942:	429a      	cmp	r2, r3
 8024944:	d02b      	beq.n	802499e <mpool_free+0xce>
 8024946:	689a      	ldr	r2, [r3, #8]
    if (node->next != NULL)
 8024948:	b10e      	cbz	r6, 802494e <mpool_free+0x7e>
        node->next->prev = node->prev;
 802494a:	60b2      	str	r2, [r6, #8]
 802494c:	689a      	ldr	r2, [r3, #8]
    if (node->prev != NULL)
 802494e:	b10a      	cbz	r2, 8024954 <mpool_free+0x84>
        node->prev->next = node->next;
 8024950:	6858      	ldr	r0, [r3, #4]
 8024952:	6050      	str	r0, [r2, #4]
    node->next = NULL;
 8024954:	f8c3 c004 	str.w	ip, [r3, #4]
 8024958:	4618      	mov	r0, r3
    node->prev = NULL;
 802495a:	f8c3 c008 	str.w	ip, [r3, #8]
                other_node->next = pool->head;
 802495e:	68ca      	ldr	r2, [r1, #12]
 8024960:	605a      	str	r2, [r3, #4]
    while (other_node != NULL)
 8024962:	2e00      	cmp	r6, #0
 8024964:	d1db      	bne.n	802491e <mpool_free+0x4e>
 8024966:	68cb      	ldr	r3, [r1, #12]
    freed_node->next = pool->head;
 8024968:	6043      	str	r3, [r0, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 802496a:	68cb      	ldr	r3, [r1, #12]
 802496c:	b103      	cbz	r3, 8024970 <mpool_free+0xa0>
 802496e:	6098      	str	r0, [r3, #8]
    pool->head = freed_node;
 8024970:	60c8      	str	r0, [r1, #12]
}
 8024972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            freed_node->size += leaf.header_size + other_node->size;
 8024976:	4444      	add	r4, r8
 8024978:	4422      	add	r2, r4
 802497a:	60c2      	str	r2, [r0, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
 802497c:	68ca      	ldr	r2, [r1, #12]
 802497e:	429a      	cmp	r2, r3
 8024980:	d00a      	beq.n	8024998 <mpool_free+0xc8>
 8024982:	e9d3 4201 	ldrd	r4, r2, [r3, #4]
    if (node->next != NULL)
 8024986:	b10c      	cbz	r4, 802498c <mpool_free+0xbc>
        node->next->prev = node->prev;
 8024988:	60a2      	str	r2, [r4, #8]
 802498a:	689a      	ldr	r2, [r3, #8]
    if (node->prev != NULL)
 802498c:	b10a      	cbz	r2, 8024992 <mpool_free+0xc2>
        node->prev->next = node->next;
 802498e:	685c      	ldr	r4, [r3, #4]
 8024990:	6054      	str	r4, [r2, #4]
    node->prev = NULL;
 8024992:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 8024996:	e7c1      	b.n	802491c <mpool_free+0x4c>
            if (other_node == pool->head) pool->head = pool->head->next;
 8024998:	685a      	ldr	r2, [r3, #4]
 802499a:	60ca      	str	r2, [r1, #12]
 802499c:	e7f1      	b.n	8024982 <mpool_free+0xb2>
                pool->head = pool->head->next;
 802499e:	4618      	mov	r0, r3
 80249a0:	60ce      	str	r6, [r1, #12]
 80249a2:	e7bb      	b.n	802491c <mpool_free+0x4c>
 80249a4:	200194a0 	.word	0x200194a0

080249a8 <tMempool_init>:
    //TODO: we should make a set of real error codes that are in an enum type
}

void tMempool_init(tMempool* const mp, char* memory, size_t size)
{
 80249a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tMempool_freeFromPool(mp, &leaf.mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 80249ac:	4e3a      	ldr	r6, [pc, #232]	; (8024a98 <tMempool_init+0xf0>)
{
 80249ae:	b082      	sub	sp, #8
    _tMempool* mm = *mem;
 80249b0:	f8d6 c018 	ldr.w	ip, [r6, #24]
    if (pool->head == NULL)
 80249b4:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80249b8:	b91b      	cbnz	r3, 80249c2 <tMempool_init+0x1a>
 80249ba:	e04c      	b.n	8024a56 <tMempool_init+0xae>
        if (node_to_alloc == NULL)
 80249bc:	462b      	mov	r3, r5
 80249be:	2d00      	cmp	r5, #0
 80249c0:	d049      	beq.n	8024a56 <tMempool_init+0xae>
    while (node_to_alloc->size < size_to_alloc)
 80249c2:	68dc      	ldr	r4, [r3, #12]
 80249c4:	685d      	ldr	r5, [r3, #4]
 80249c6:	2c0f      	cmp	r4, #15
 80249c8:	d9f8      	bls.n	80249bc <tMempool_init+0x14>
    node_to_alloc->size = size_to_alloc;
 80249ca:	2710      	movs	r7, #16
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80249cc:	f1a4 0e10 	sub.w	lr, r4, #16
    node_to_alloc->size = size_to_alloc;
 80249d0:	60df      	str	r7, [r3, #12]
    if (leftover > leaf.header_size)
 80249d2:	6af7      	ldr	r7, [r6, #44]	; 0x2c
 80249d4:	45be      	cmp	lr, r7
 80249d6:	d849      	bhi.n	8024a6c <tMempool_init+0xc4>
        node_to_alloc->size += leftover;
 80249d8:	46ae      	mov	lr, r5
 80249da:	60dc      	str	r4, [r3, #12]
    if (pool->head == node_to_alloc)
 80249dc:	f8dc 400c 	ldr.w	r4, [ip, #12]
 80249e0:	42a3      	cmp	r3, r4
        pool->head = new_node;
 80249e2:	bf08      	it	eq
 80249e4:	f8cc e00c 	streq.w	lr, [ip, #12]
 80249e8:	e9d3 5401 	ldrd	r5, r4, [r3, #4]
    if (node->next != NULL)
 80249ec:	b10d      	cbz	r5, 80249f2 <tMempool_init+0x4a>
        node->next->prev = node->prev;
 80249ee:	60ac      	str	r4, [r5, #8]
 80249f0:	689c      	ldr	r4, [r3, #8]
    if (node->prev != NULL)
 80249f2:	b10c      	cbz	r4, 80249f8 <tMempool_init+0x50>
        node->prev->next = node->next;
 80249f4:	685d      	ldr	r5, [r3, #4]
 80249f6:	6065      	str	r5, [r4, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 80249f8:	68dc      	ldr	r4, [r3, #12]
    node->next = NULL;
 80249fa:	2500      	movs	r5, #0
    pool->usize += leaf.header_size + node_to_alloc->size;
 80249fc:	9401      	str	r4, [sp, #4]
    node->prev = NULL;
 80249fe:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 8024a02:	6af4      	ldr	r4, [r6, #44]	; 0x2c
 8024a04:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8024a08:	4427      	add	r7, r4
 8024a0a:	463c      	mov	r4, r7
 8024a0c:	9f01      	ldr	r7, [sp, #4]
 8024a0e:	4427      	add	r7, r4
 8024a10:	f8cc 7004 	str.w	r7, [ip, #4]
    if (leaf.clearOnAllocation > 0)
 8024a14:	6974      	ldr	r4, [r6, #20]
 8024a16:	42ac      	cmp	r4, r5
 8024a18:	dd0a      	ble.n	8024a30 <tMempool_init+0x88>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8024a1a:	68df      	ldr	r7, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 8024a1c:	681c      	ldr	r4, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8024a1e:	b147      	cbz	r7, 8024a32 <tMempool_init+0x8a>
 8024a20:	3c01      	subs	r4, #1
 8024a22:	46ac      	mov	ip, r5
 8024a24:	f804 cf01 	strb.w	ip, [r4, #1]!
 8024a28:	3501      	adds	r5, #1
 8024a2a:	68df      	ldr	r7, [r3, #12]
 8024a2c:	42bd      	cmp	r5, r7
 8024a2e:	d3f9      	bcc.n	8024a24 <tMempool_init+0x7c>
 8024a30:	681c      	ldr	r4, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8024a32:	6004      	str	r4, [r0, #0]
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 8024a34:	2310      	movs	r3, #16
    pool->usize  = 0;
 8024a36:	2000      	movs	r0, #0
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 8024a38:	62f3      	str	r3, [r6, #44]	; 0x2c
    pool->mpool = (char*)memory;
 8024a3a:	6021      	str	r1, [r4, #0]
    pool->usize  = 0;
 8024a3c:	e9c4 0201 	strd	r0, r2, [r4, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 8024a40:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    node->next = next;
 8024a42:	6048      	str	r0, [r1, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 8024a44:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + leaf.header_size;
 8024a46:	440b      	add	r3, r1
    node->size = size;
 8024a48:	e9c1 0202 	strd	r0, r2, [r1, #8]
    node->pool = block_location + leaf.header_size;
 8024a4c:	600b      	str	r3, [r1, #0]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 8024a4e:	60e1      	str	r1, [r4, #12]
}
 8024a50:	b002      	add	sp, #8
 8024a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024a56:	4605      	mov	r5, r0
    LEAF_error(1);
 8024a58:	2001      	movs	r0, #1
 8024a5a:	460c      	mov	r4, r1
 8024a5c:	f002 fd1c 	bl	8027498 <LEAF_error>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8024a60:	2300      	movs	r3, #0
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 8024a62:	2210      	movs	r2, #16
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8024a64:	602b      	str	r3, [r5, #0]
    pool->mpool = (char*)memory;
 8024a66:	601c      	str	r4, [r3, #0]
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 8024a68:	62f2      	str	r2, [r6, #44]	; 0x2c
 8024a6a:	deff      	udf	#255	; 0xff
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8024a6c:	f8dc 9000 	ldr.w	r9, [ip]
        new_node = create_node(&pool->mpool[offset],
 8024a70:	ebae 0407 	sub.w	r4, lr, r7
        offset += leaf.header_size + node_to_alloc->size;
 8024a74:	f107 0810 	add.w	r8, r7, #16
                               node_to_alloc->prev,
 8024a78:	f8d3 a008 	ldr.w	sl, [r3, #8]
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8024a7c:	eba3 0e09 	sub.w	lr, r3, r9
        offset += leaf.header_size + node_to_alloc->size;
 8024a80:	44f0      	add	r8, lr
        new_node = create_node(&pool->mpool[offset],
 8024a82:	eb09 0e08 	add.w	lr, r9, r8
    node->pool = block_location + leaf.header_size;
 8024a86:	4477      	add	r7, lr
 8024a88:	f849 7008 	str.w	r7, [r9, r8]
    node->size = size;
 8024a8c:	f8ce 400c 	str.w	r4, [lr, #12]
    node->prev = prev;
 8024a90:	e9ce 5a01 	strd	r5, sl, [lr, #4]
 8024a94:	e7a2      	b.n	80249dc <tMempool_init+0x34>
 8024a96:	bf00      	nop
 8024a98:	200194a0 	.word	0x200194a0

08024a9c <tSimplePoly_initToPool>:
{
    tSimplePoly_initToPool(polyh, maxNumVoices, &leaf.mempool);
}

void    tSimplePoly_initToPool            (tSimplePoly* const polyh, int maxNumVoices, tMempool* const mp)
{
 8024a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tMempool* m = *mp;
 8024aa0:	6816      	ldr	r6, [r2, #0]
{
 8024aa2:	4680      	mov	r8, r0
 8024aa4:	460c      	mov	r4, r1
    _tSimplePoly* poly = *polyh = (_tSimplePoly*) mpool_alloc(sizeof(_tSimplePoly), m);
 8024aa6:	f240 401c 	movw	r0, #1052	; 0x41c
 8024aaa:	4631      	mov	r1, r6
{
 8024aac:	4617      	mov	r7, r2
    _tSimplePoly* poly = *polyh = (_tSimplePoly*) mpool_alloc(sizeof(_tSimplePoly), m);
 8024aae:	f7ff fe67 	bl	8024780 <mpool_alloc>
 8024ab2:	4605      	mov	r5, r0
    poly->maxNumVoices = maxNumVoices;

    for (int i = 0; i < 128; i++)
    {
        poly->notes[i][0] = -1;
        poly->notes[i][1] = 0;
 8024ab4:	2100      	movs	r1, #0
        poly->notes[i][0] = -1;
 8024ab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024aba:	462b      	mov	r3, r5
 8024abc:	f505 6280 	add.w	r2, r5, #1024	; 0x400
    _tSimplePoly* poly = *polyh = (_tSimplePoly*) mpool_alloc(sizeof(_tSimplePoly), m);
 8024ac0:	f8c8 5000 	str.w	r5, [r8]
    poly->mempool = m;
 8024ac4:	602e      	str	r6, [r5, #0]
    poly->maxNumVoices = maxNumVoices;
 8024ac6:	e9c5 4402 	strd	r4, r4, [r5, #8]
        poly->notes[i][1] = 0;
 8024aca:	e9c3 0107 	strd	r0, r1, [r3, #28]
 8024ace:	3308      	adds	r3, #8
    for (int i = 0; i < 128; i++)
 8024ad0:	4293      	cmp	r3, r2
 8024ad2:	d1fa      	bne.n	8024aca <tSimplePoly_initToPool+0x2e>
    }
    poly->stealing_on = 1;
 8024ad4:	2301      	movs	r3, #1
    poly->recover_stolen = 1;
    poly->voices = (int**) mpool_alloc(sizeof(int*) * poly->maxNumVoices, m);
 8024ad6:	00a0      	lsls	r0, r4, #2
 8024ad8:	4631      	mov	r1, r6
    poly->recover_stolen = 1;
 8024ada:	e9c5 3305 	strd	r3, r3, [r5, #20]
    poly->voices = (int**) mpool_alloc(sizeof(int*) * poly->maxNumVoices, m);
 8024ade:	f7ff fe4f 	bl	8024780 <mpool_alloc>

    for (int i = 0; i < poly->maxNumVoices; ++i)
 8024ae2:	68eb      	ldr	r3, [r5, #12]
    poly->voices = (int**) mpool_alloc(sizeof(int*) * poly->maxNumVoices, m);
 8024ae4:	4680      	mov	r8, r0
 8024ae6:	6128      	str	r0, [r5, #16]
    for (int i = 0; i < poly->maxNumVoices; ++i)
 8024ae8:	2b00      	cmp	r3, #0
 8024aea:	dd14      	ble.n	8024b16 <tSimplePoly_initToPool+0x7a>
 8024aec:	2400      	movs	r4, #0
    {
        poly->voices[i] = (int*) mpool_alloc(sizeof(int) * 3, m);
        poly->voices[i][0] = -1;
 8024aee:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8024af2:	e001      	b.n	8024af8 <tSimplePoly_initToPool+0x5c>
 8024af4:	f8d5 8010 	ldr.w	r8, [r5, #16]
        poly->voices[i] = (int*) mpool_alloc(sizeof(int) * 3, m);
 8024af8:	4631      	mov	r1, r6
 8024afa:	200c      	movs	r0, #12
 8024afc:	f7ff fe40 	bl	8024780 <mpool_alloc>
 8024b00:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
        poly->voices[i][0] = -1;
 8024b04:	692b      	ldr	r3, [r5, #16]
 8024b06:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    for (int i = 0; i < poly->maxNumVoices; ++i)
 8024b0a:	3401      	adds	r4, #1
        poly->voices[i][0] = -1;
 8024b0c:	f8c3 9000 	str.w	r9, [r3]
    for (int i = 0; i < poly->maxNumVoices; ++i)
 8024b10:	68eb      	ldr	r3, [r5, #12]
 8024b12:	42a3      	cmp	r3, r4
 8024b14:	dcee      	bgt.n	8024af4 <tSimplePoly_initToPool+0x58>
    _tMempool* m = *mp;
 8024b16:	683e      	ldr	r6, [r7, #0]
    _tStack* ns = *stack = (_tStack*) mpool_alloc(sizeof(_tStack), m);
 8024b18:	f44f 7004 	mov.w	r0, #528	; 0x210
    ns->ordered = 0;
 8024b1c:	2400      	movs	r4, #0
    _tStack* ns = *stack = (_tStack*) mpool_alloc(sizeof(_tStack), m);
 8024b1e:	4631      	mov	r1, r6
 8024b20:	f7ff fe2e 	bl	8024780 <mpool_alloc>
    ns->capacity = STACK_SIZE;
 8024b24:	2180      	movs	r1, #128	; 0x80
    _tStack* ns = *stack = (_tStack*) mpool_alloc(sizeof(_tStack), m);
 8024b26:	4603      	mov	r3, r0
 8024b28:	6068      	str	r0, [r5, #4]
 8024b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8024b2e:	3004      	adds	r0, #4
    ns->capacity = STACK_SIZE;
 8024b30:	f8a3 1208 	strh.w	r1, [r3, #520]	; 0x208
 8024b34:	21ff      	movs	r1, #255	; 0xff
    ns->mempool = m;
 8024b36:	601e      	str	r6, [r3, #0]
    ns->ordered = 0;
 8024b38:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
    ns->pos = 0;
 8024b3c:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
    }
    tStack_initToPool(&poly->stack, mp);

}
 8024b40:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024b44:	f002 bcf9 	b.w	802753a <memset>

08024b48 <tSimplePoly_noteOn>:
    mpool_free((char*)poly->voices, poly->mempool);
    mpool_free((char*)poly, poly->mempool);
}

int tSimplePoly_noteOn(tSimplePoly* const polyh, int note, uint8_t vel)
{
 8024b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _tSimplePoly* poly = *polyh;
 8024b4c:	6806      	ldr	r6, [r0, #0]
    _tStack* ns = *stack;
 8024b4e:	f8d6 c004 	ldr.w	ip, [r6, #4]
    for (int i = 0; i < ns->size; i++)
 8024b52:	f8bc 7206 	ldrh.w	r7, [ip, #518]	; 0x206
 8024b56:	b18f      	cbz	r7, 8024b7c <tSimplePoly_noteOn+0x34>
 8024b58:	b28d      	uxth	r5, r1
        if (ns->data[i] == noteVal)    return i;
 8024b5a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8024b5e:	429d      	cmp	r5, r3
 8024b60:	f000 809f 	beq.w	8024ca2 <tSimplePoly_noteOn+0x15a>
 8024b64:	f10c 0004 	add.w	r0, ip, #4
    for (int i = 0; i < ns->size; i++)
 8024b68:	2300      	movs	r3, #0
 8024b6a:	e004      	b.n	8024b76 <tSimplePoly_noteOn+0x2e>
        if (ns->data[i] == noteVal)    return i;
 8024b6c:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8024b70:	42ac      	cmp	r4, r5
 8024b72:	f000 8096 	beq.w	8024ca2 <tSimplePoly_noteOn+0x15a>
    for (int i = 0; i < ns->size; i++)
 8024b76:	3301      	adds	r3, #1
 8024b78:	42bb      	cmp	r3, r7
 8024b7a:	d1f7      	bne.n	8024b6c <tSimplePoly_noteOn+0x24>
    if (tStack_contains(&poly->stack, note) >= 0) return -1;
    else
    {
        alteredVoice = -1;
        int found = 0;
        for (int i = 0; i < poly->numVoices; i++)
 8024b7c:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8024b80:	f1b8 0f00 	cmp.w	r8, #0
 8024b84:	dd29      	ble.n	8024bda <tSimplePoly_noteOn+0x92>
        {
            if (poly->voices[i][0] == -1)    // if inactive voice, give this note to voice
 8024b86:	6933      	ldr	r3, [r6, #16]
 8024b88:	f8d3 9000 	ldr.w	r9, [r3]
 8024b8c:	f8d9 b000 	ldr.w	fp, [r9]
 8024b90:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8024b94:	f000 8089 	beq.w	8024caa <tSimplePoly_noteOn+0x162>
 8024b98:	469e      	mov	lr, r3
        for (int i = 0; i < poly->numVoices; i++)
 8024b9a:	2000      	movs	r0, #0
            if (poly->voices[i][0] == -1)    // if inactive voice, give this note to voice
 8024b9c:	461c      	mov	r4, r3
 8024b9e:	e005      	b.n	8024bac <tSimplePoly_noteOn+0x64>
 8024ba0:	f854 3f04 	ldr.w	r3, [r4, #4]!
 8024ba4:	681d      	ldr	r5, [r3, #0]
 8024ba6:	3501      	adds	r5, #1
 8024ba8:	f000 8082 	beq.w	8024cb0 <tSimplePoly_noteOn+0x168>
        for (int i = 0; i < poly->numVoices; i++)
 8024bac:	3001      	adds	r0, #1
 8024bae:	4540      	cmp	r0, r8
 8024bb0:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8024bb4:	d1f4      	bne.n	8024ba0 <tSimplePoly_noteOn+0x58>
        if (!found)
        {
            //second preference is grabbing one that is in release phase but not finished sounding yet
            for (int i = 0 ; i < poly->numVoices; i++)
            {
                if (poly->voices[i][0] == -2)    // if voice is released but still sounding, take over this voice
 8024bb6:	f11b 0f02 	cmn.w	fp, #2
            for (int i = 0 ; i < poly->numVoices; i++)
 8024bba:	f04f 0300 	mov.w	r3, #0
                if (poly->voices[i][0] == -2)    // if voice is released but still sounding, take over this voice
 8024bbe:	d107      	bne.n	8024bd0 <tSimplePoly_noteOn+0x88>
 8024bc0:	e0b4      	b.n	8024d2c <tSimplePoly_noteOn+0x1e4>
 8024bc2:	f85e 9f04 	ldr.w	r9, [lr, #4]!
 8024bc6:	f8d9 4000 	ldr.w	r4, [r9]
 8024bca:	3402      	adds	r4, #2
 8024bcc:	f000 80af 	beq.w	8024d2e <tSimplePoly_noteOn+0x1e6>
            for (int i = 0 ; i < poly->numVoices; i++)
 8024bd0:	3301      	adds	r3, #1
 8024bd2:	4298      	cmp	r0, r3
 8024bd4:	ea4f 0583 	mov.w	r5, r3, lsl #2
 8024bd8:	d1f3      	bne.n	8024bc2 <tSimplePoly_noteOn+0x7a>
                    tStack_add(&poly->stack, note);
                    break;
                }
            }
        }
        if ((!found) && (poly->stealing_on)) //steal
 8024bda:	6973      	ldr	r3, [r6, #20]
 8024bdc:	2b00      	cmp	r3, #0
 8024bde:	d060      	beq.n	8024ca2 <tSimplePoly_noteOn+0x15a>
        {
            for (int j = tStack_getSize(&poly->stack) - 1; j >= 0; j--)
 8024be0:	1e78      	subs	r0, r7, #1
 8024be2:	2f00      	cmp	r7, #0
 8024be4:	d05f      	beq.n	8024ca6 <tSimplePoly_noteOn+0x15e>
    return ns->data[which];
 8024be6:	eb0c 0380 	add.w	r3, ip, r0, lsl #2
            {
                whichNote = tStack_get(&poly->stack, j);
                whichVoice = poly->notes[whichNote][0];
 8024bea:	685b      	ldr	r3, [r3, #4]
 8024bec:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8024bf0:	69db      	ldr	r3, [r3, #28]
                if (whichVoice >= 0)
 8024bf2:	2b00      	cmp	r3, #0
 8024bf4:	da0b      	bge.n	8024c0e <tSimplePoly_noteOn+0xc6>
 8024bf6:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
            for (int j = tStack_getSize(&poly->stack) - 1; j >= 0; j--)
 8024bfa:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8024bfe:	d352      	bcc.n	8024ca6 <tSimplePoly_noteOn+0x15e>
                whichVoice = poly->notes[whichNote][0];
 8024c00:	f857 3d04 	ldr.w	r3, [r7, #-4]!
 8024c04:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8024c08:	69db      	ldr	r3, [r3, #28]
                if (whichVoice >= 0)
 8024c0a:	2b00      	cmp	r3, #0
 8024c0c:	dbf5      	blt.n	8024bfa <tSimplePoly_noteOn+0xb2>
                {
                    oldNote = poly->voices[whichVoice][0];
 8024c0e:	6930      	ldr	r0, [r6, #16]
                    poly->voices[whichVoice][0] = note;
                    poly->voices[whichVoice][1] = vel;
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
                    poly->notes[note][0] = whichVoice;
 8024c10:	eb06 05c1 	add.w	r5, r6, r1, lsl #3
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
 8024c14:	f06f 0702 	mvn.w	r7, #2
                    oldNote = poly->voices[whichVoice][0];
 8024c18:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8024c1c:	6820      	ldr	r0, [r4, #0]
                    poly->voices[whichVoice][0] = note;
 8024c1e:	6021      	str	r1, [r4, #0]
                    poly->voices[whichVoice][1] = vel;
 8024c20:	6934      	ldr	r4, [r6, #16]
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
 8024c22:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
                    poly->voices[whichVoice][1] = vel;
 8024c26:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
 8024c2a:	f8cc 2004 	str.w	r2, [ip, #4]
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
 8024c2e:	61c7      	str	r7, [r0, #28]
 8024c30:	b28f      	uxth	r7, r1
                    poly->notes[note][0] = whichVoice;
 8024c32:	61eb      	str	r3, [r5, #28]
                    poly->notes[note][1] = vel;
 8024c34:	622a      	str	r2, [r5, #32]

                    poly->voices[whichVoice][2] = note;
 8024c36:	6932      	ldr	r2, [r6, #16]
 8024c38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8024c3c:	6091      	str	r1, [r2, #8]
    _tStack* ns = *stack;
 8024c3e:	6871      	ldr	r1, [r6, #4]
    if (ns->ordered)
 8024c40:	f8d1 420c 	ldr.w	r4, [r1, #524]	; 0x20c
        for (j = 0; j < ns->size; j++)
 8024c44:	f8b1 c206 	ldrh.w	ip, [r1, #518]	; 0x206
    if (ns->ordered)
 8024c48:	b1a4      	cbz	r4, 8024c74 <tSimplePoly_noteOn+0x12c>
        for (j = 0; j < ns->size; j++)
 8024c4a:	f1bc 0f00 	cmp.w	ip, #0
 8024c4e:	f000 80a3 	beq.w	8024d98 <tSimplePoly_noteOn+0x250>
 8024c52:	2200      	movs	r2, #0
 8024c54:	eb01 0582 	add.w	r5, r1, r2, lsl #2
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8024c58:	1c50      	adds	r0, r2, #1
            if (noteVal > ns->data[j])
 8024c5a:	686e      	ldr	r6, [r5, #4]
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8024c5c:	4604      	mov	r4, r0
            if (noteVal > ns->data[j])
 8024c5e:	42be      	cmp	r6, r7
 8024c60:	da04      	bge.n	8024c6c <tSimplePoly_noteOn+0x124>
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8024c62:	68aa      	ldr	r2, [r5, #8]
 8024c64:	1c55      	adds	r5, r2, #1
 8024c66:	d005      	beq.n	8024c74 <tSimplePoly_noteOn+0x12c>
 8024c68:	42ba      	cmp	r2, r7
 8024c6a:	dc03      	bgt.n	8024c74 <tSimplePoly_noteOn+0x12c>
        for (j = 0; j < ns->size; j++)
 8024c6c:	b2c2      	uxtb	r2, r0
 8024c6e:	4562      	cmp	r2, ip
 8024c70:	d3f0      	bcc.n	8024c54 <tSimplePoly_noteOn+0x10c>
    int whereToInsert = 0;
 8024c72:	2400      	movs	r4, #0
    for (j = ns->size; j > whereToInsert; j--)
 8024c74:	fa5f f28c 	uxtb.w	r2, ip
 8024c78:	4294      	cmp	r4, r2
 8024c7a:	da08      	bge.n	8024c8e <tSimplePoly_noteOn+0x146>
 8024c7c:	1e56      	subs	r6, r2, #1
 8024c7e:	eb01 0082 	add.w	r0, r1, r2, lsl #2
        ns->data[j] = ns->data[(j - 1)];
 8024c82:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
    for (j = ns->size; j > whereToInsert; j--)
 8024c86:	b2f2      	uxtb	r2, r6
        ns->data[j] = ns->data[(j - 1)];
 8024c88:	6045      	str	r5, [r0, #4]
    for (j = ns->size; j > whereToInsert; j--)
 8024c8a:	42a2      	cmp	r2, r4
 8024c8c:	dcf6      	bgt.n	8024c7c <tSimplePoly_noteOn+0x134>
    ns->data[whereToInsert] = noteVal;
 8024c8e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    ns->size++;
 8024c92:	f10c 0c01 	add.w	ip, ip, #1
 8024c96:	4618      	mov	r0, r3
    ns->data[whereToInsert] = noteVal;
 8024c98:	6067      	str	r7, [r4, #4]
    ns->size++;
 8024c9a:	f8a1 c206 	strh.w	ip, [r1, #518]	; 0x206
                }
            }
        }
        return alteredVoice;
    }
}
 8024c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (tStack_contains(&poly->stack, note) >= 0) return -1;
 8024ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8024ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i = 0; i < poly->numVoices; i++)
 8024caa:	2000      	movs	r0, #0
            if (poly->voices[i][0] == -1)    // if inactive voice, give this note to voice
 8024cac:	464b      	mov	r3, r9
 8024cae:	4682      	mov	sl, r0
                poly->voices[i][0] = note;
 8024cb0:	6019      	str	r1, [r3, #0]
                poly->notes[note][0] = i;
 8024cb2:	eb06 04c1 	add.w	r4, r6, r1, lsl #3
                poly->voices[i][1] = vel;
 8024cb6:	6935      	ldr	r5, [r6, #16]
 8024cb8:	b28f      	uxth	r7, r1
 8024cba:	f855 500a 	ldr.w	r5, [r5, sl]
 8024cbe:	606a      	str	r2, [r5, #4]
                poly->notes[note][0] = i;
 8024cc0:	61e0      	str	r0, [r4, #28]
                poly->notes[note][1] = vel;
 8024cc2:	6222      	str	r2, [r4, #32]
                poly->voices[i][2] = note; // voices[i][2] is the output midi note, (avoiding the -1 when a voice is inactive)
 8024cc4:	6933      	ldr	r3, [r6, #16]
 8024cc6:	f853 300a 	ldr.w	r3, [r3, sl]
 8024cca:	6099      	str	r1, [r3, #8]
    _tStack* ns = *stack;
 8024ccc:	6872      	ldr	r2, [r6, #4]
    if (ns->ordered)
 8024cce:	f8d2 420c 	ldr.w	r4, [r2, #524]	; 0x20c
        for (j = 0; j < ns->size; j++)
 8024cd2:	f8b2 c206 	ldrh.w	ip, [r2, #518]	; 0x206
    if (ns->ordered)
 8024cd6:	b19c      	cbz	r4, 8024d00 <tSimplePoly_noteOn+0x1b8>
        for (j = 0; j < ns->size; j++)
 8024cd8:	f1bc 0f00 	cmp.w	ip, #0
 8024cdc:	d05e      	beq.n	8024d9c <tSimplePoly_noteOn+0x254>
 8024cde:	2300      	movs	r3, #0
 8024ce0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8024ce4:	1c59      	adds	r1, r3, #1
            if (noteVal > ns->data[j])
 8024ce6:	686e      	ldr	r6, [r5, #4]
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8024ce8:	460c      	mov	r4, r1
            if (noteVal > ns->data[j])
 8024cea:	42be      	cmp	r6, r7
 8024cec:	da04      	bge.n	8024cf8 <tSimplePoly_noteOn+0x1b0>
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8024cee:	68ab      	ldr	r3, [r5, #8]
 8024cf0:	1c5d      	adds	r5, r3, #1
 8024cf2:	d005      	beq.n	8024d00 <tSimplePoly_noteOn+0x1b8>
 8024cf4:	42bb      	cmp	r3, r7
 8024cf6:	dc03      	bgt.n	8024d00 <tSimplePoly_noteOn+0x1b8>
        for (j = 0; j < ns->size; j++)
 8024cf8:	b2cb      	uxtb	r3, r1
 8024cfa:	459c      	cmp	ip, r3
 8024cfc:	d8f0      	bhi.n	8024ce0 <tSimplePoly_noteOn+0x198>
    int whereToInsert = 0;
 8024cfe:	2400      	movs	r4, #0
    for (j = ns->size; j > whereToInsert; j--)
 8024d00:	fa5f f38c 	uxtb.w	r3, ip
 8024d04:	42a3      	cmp	r3, r4
 8024d06:	dd08      	ble.n	8024d1a <tSimplePoly_noteOn+0x1d2>
 8024d08:	1e5e      	subs	r6, r3, #1
 8024d0a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
        ns->data[j] = ns->data[(j - 1)];
 8024d0e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    for (j = ns->size; j > whereToInsert; j--)
 8024d12:	b2f3      	uxtb	r3, r6
        ns->data[j] = ns->data[(j - 1)];
 8024d14:	604d      	str	r5, [r1, #4]
    for (j = ns->size; j > whereToInsert; j--)
 8024d16:	42a3      	cmp	r3, r4
 8024d18:	dcf6      	bgt.n	8024d08 <tSimplePoly_noteOn+0x1c0>
    ns->data[whereToInsert] = noteVal;
 8024d1a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    ns->size++;
 8024d1e:	f10c 0c01 	add.w	ip, ip, #1
    ns->data[whereToInsert] = noteVal;
 8024d22:	6067      	str	r7, [r4, #4]
    ns->size++;
 8024d24:	f8a2 c206 	strh.w	ip, [r2, #518]	; 0x206
}
 8024d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (poly->voices[i][0] == -2)    // if voice is released but still sounding, take over this voice
 8024d2c:	461d      	mov	r5, r3
                    poly->voices[i][0] = note;
 8024d2e:	f8c9 1000 	str.w	r1, [r9]
                    poly->notes[note][0] = i;
 8024d32:	eb06 04c1 	add.w	r4, r6, r1, lsl #3
                    poly->voices[i][1] = vel;
 8024d36:	6937      	ldr	r7, [r6, #16]
 8024d38:	597f      	ldr	r7, [r7, r5]
 8024d3a:	607a      	str	r2, [r7, #4]
 8024d3c:	b28f      	uxth	r7, r1
                    poly->notes[note][0] = i;
 8024d3e:	61e3      	str	r3, [r4, #28]
                    poly->notes[note][1] = vel;
 8024d40:	6222      	str	r2, [r4, #32]
                    poly->voices[i][2] = note; // voices[i][2] is the output midi note, (avoiding the -1 when a voice is inactive)
 8024d42:	6932      	ldr	r2, [r6, #16]
 8024d44:	5952      	ldr	r2, [r2, r5]
 8024d46:	6091      	str	r1, [r2, #8]
    _tStack* ns = *stack;
 8024d48:	6871      	ldr	r1, [r6, #4]
    if (ns->ordered)
 8024d4a:	f8d1 420c 	ldr.w	r4, [r1, #524]	; 0x20c
        for (j = 0; j < ns->size; j++)
 8024d4e:	f8b1 c206 	ldrh.w	ip, [r1, #518]	; 0x206
    if (ns->ordered)
 8024d52:	b19c      	cbz	r4, 8024d7c <tSimplePoly_noteOn+0x234>
        for (j = 0; j < ns->size; j++)
 8024d54:	f1bc 0f00 	cmp.w	ip, #0
 8024d58:	d01e      	beq.n	8024d98 <tSimplePoly_noteOn+0x250>
 8024d5a:	2200      	movs	r2, #0
 8024d5c:	eb01 0582 	add.w	r5, r1, r2, lsl #2
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8024d60:	1c50      	adds	r0, r2, #1
            if (noteVal > ns->data[j])
 8024d62:	686e      	ldr	r6, [r5, #4]
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8024d64:	4604      	mov	r4, r0
            if (noteVal > ns->data[j])
 8024d66:	42be      	cmp	r6, r7
 8024d68:	da04      	bge.n	8024d74 <tSimplePoly_noteOn+0x22c>
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8024d6a:	68aa      	ldr	r2, [r5, #8]
 8024d6c:	1c56      	adds	r6, r2, #1
 8024d6e:	d005      	beq.n	8024d7c <tSimplePoly_noteOn+0x234>
 8024d70:	42ba      	cmp	r2, r7
 8024d72:	dc03      	bgt.n	8024d7c <tSimplePoly_noteOn+0x234>
        for (j = 0; j < ns->size; j++)
 8024d74:	b2c2      	uxtb	r2, r0
 8024d76:	4562      	cmp	r2, ip
 8024d78:	d3f0      	bcc.n	8024d5c <tSimplePoly_noteOn+0x214>
    int whereToInsert = 0;
 8024d7a:	2400      	movs	r4, #0
    for (j = ns->size; j > whereToInsert; j--)
 8024d7c:	fa5f f28c 	uxtb.w	r2, ip
 8024d80:	4294      	cmp	r4, r2
 8024d82:	da84      	bge.n	8024c8e <tSimplePoly_noteOn+0x146>
 8024d84:	1e56      	subs	r6, r2, #1
 8024d86:	eb01 0082 	add.w	r0, r1, r2, lsl #2
        ns->data[j] = ns->data[(j - 1)];
 8024d8a:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
    for (j = ns->size; j > whereToInsert; j--)
 8024d8e:	b2f2      	uxtb	r2, r6
        ns->data[j] = ns->data[(j - 1)];
 8024d90:	6045      	str	r5, [r0, #4]
    for (j = ns->size; j > whereToInsert; j--)
 8024d92:	42a2      	cmp	r2, r4
 8024d94:	dcf6      	bgt.n	8024d84 <tSimplePoly_noteOn+0x23c>
 8024d96:	e77a      	b.n	8024c8e <tSimplePoly_noteOn+0x146>
    int whereToInsert = 0;
 8024d98:	4664      	mov	r4, ip
 8024d9a:	e778      	b.n	8024c8e <tSimplePoly_noteOn+0x146>
 8024d9c:	4664      	mov	r4, ip
 8024d9e:	e7bc      	b.n	8024d1a <tSimplePoly_noteOn+0x1d2>

08024da0 <tSimplePoly_noteOff>:



int tSimplePoly_noteOff(tSimplePoly* const polyh, uint8_t note)
{
 8024da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tSimplePoly* poly = *polyh;
 8024da4:	6805      	ldr	r5, [r0, #0]
    _tStack* ns = *stack;
 8024da6:	f8d5 c004 	ldr.w	ip, [r5, #4]
    for (int i = 0; i < ns->size; i++)
 8024daa:	f8bc 0206 	ldrh.w	r0, [ip, #518]	; 0x206
 8024dae:	b178      	cbz	r0, 8024dd0 <tSimplePoly_noteOff+0x30>
        if (ns->data[i] == noteVal)    return i;
 8024db0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8024db4:	428b      	cmp	r3, r1
 8024db6:	f000 808a 	beq.w	8024ece <tSimplePoly_noteOff+0x12e>
 8024dba:	f10c 0304 	add.w	r3, ip, #4
    for (int i = 0; i < ns->size; i++)
 8024dbe:	2600      	movs	r6, #0
 8024dc0:	e003      	b.n	8024dca <tSimplePoly_noteOff+0x2a>
        if (ns->data[i] == noteVal)    return i;
 8024dc2:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8024dc6:	428a      	cmp	r2, r1
 8024dc8:	d057      	beq.n	8024e7a <tSimplePoly_noteOff+0xda>
    for (int i = 0; i < ns->size; i++)
 8024dca:	3601      	adds	r6, #1
 8024dcc:	4286      	cmp	r6, r0
 8024dce:	d1f8      	bne.n	8024dc2 <tSimplePoly_noteOff+0x22>
    int16_t noteToTest = -1;

    tStack_remove(&poly->stack, note);
    poly->notes[note][0] = -1;
 8024dd0:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
 8024dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024dd8:	61d8      	str	r0, [r3, #28]

    int deactivatedVoice = -1;
    for (int i = 0; i < poly->maxNumVoices; i++)
 8024dda:	68ee      	ldr	r6, [r5, #12]
 8024ddc:	2e00      	cmp	r6, #0
 8024dde:	dd12      	ble.n	8024e06 <tSimplePoly_noteOff+0x66>
    {
        if (poly->voices[i][0] == note)
 8024de0:	692b      	ldr	r3, [r5, #16]
 8024de2:	681a      	ldr	r2, [r3, #0]
 8024de4:	6810      	ldr	r0, [r2, #0]
 8024de6:	4288      	cmp	r0, r1
 8024de8:	d00f      	beq.n	8024e0a <tSimplePoly_noteOff+0x6a>
    for (int i = 0; i < poly->maxNumVoices; i++)
 8024dea:	2000      	movs	r0, #0
 8024dec:	e004      	b.n	8024df8 <tSimplePoly_noteOff+0x58>
        if (poly->voices[i][0] == note)
 8024dee:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8024df2:	6814      	ldr	r4, [r2, #0]
 8024df4:	428c      	cmp	r4, r1
 8024df6:	d00a      	beq.n	8024e0e <tSimplePoly_noteOff+0x6e>
    for (int i = 0; i < poly->maxNumVoices; i++)
 8024df8:	3001      	adds	r0, #1
 8024dfa:	42b0      	cmp	r0, r6
 8024dfc:	ea4f 0780 	mov.w	r7, r0, lsl #2
 8024e00:	d1f5      	bne.n	8024dee <tSimplePoly_noteOff+0x4e>
                {
                    poly->voices[deactivatedVoice][0] = noteToTest; //set the newly free voice to use the old stolen note
                    poly->voices[deactivatedVoice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
                    poly->voices[deactivatedVoice][2] = noteToTest;
                    poly->notes[noteToTest][0] = deactivatedVoice; //mark that it is no longer stolen and is now active
                    return -1;
 8024e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                }
            }
        }
    }
    return deactivatedVoice;
}
 8024e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (int i = 0; i < poly->maxNumVoices; i++)
 8024e0a:	2000      	movs	r0, #0
        if (poly->voices[i][0] == note)
 8024e0c:	4607      	mov	r7, r0
            poly->voices[i][0] = -1;
 8024e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
            poly->voices[i][1] = 0;
 8024e12:	2600      	movs	r6, #0
            poly->voices[i][0] = -1;
 8024e14:	6013      	str	r3, [r2, #0]
            poly->voices[i][1] = 0;
 8024e16:	692b      	ldr	r3, [r5, #16]
 8024e18:	59db      	ldr	r3, [r3, r7]
 8024e1a:	605e      	str	r6, [r3, #4]
    if (poly->recover_stolen)
 8024e1c:	69ab      	ldr	r3, [r5, #24]
 8024e1e:	2b00      	cmp	r3, #0
 8024e20:	d0f1      	beq.n	8024e06 <tSimplePoly_noteOff+0x66>
    _tStack* ns = *stack;
 8024e22:	6869      	ldr	r1, [r5, #4]
    return ns->size;
 8024e24:	f8b1 c206 	ldrh.w	ip, [r1, #518]	; 0x206
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 8024e28:	f1bc 0f00 	cmp.w	ip, #0
 8024e2c:	d0eb      	beq.n	8024e06 <tSimplePoly_noteOff+0x66>
                if (poly->notes[noteToTest][0] == -3) //if there is a stolen note waiting (marked inactive but on the stack)
 8024e2e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8024e32:	1cdc      	adds	r4, r3, #3
 8024e34:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
 8024e38:	6852      	ldr	r2, [r2, #4]
 8024e3a:	3203      	adds	r2, #3
 8024e3c:	d00d      	beq.n	8024e5a <tSimplePoly_noteOff+0xba>
 8024e3e:	3104      	adds	r1, #4
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 8024e40:	4632      	mov	r2, r6
 8024e42:	3201      	adds	r2, #1
 8024e44:	4562      	cmp	r2, ip
 8024e46:	d0de      	beq.n	8024e06 <tSimplePoly_noteOff+0x66>
                noteToTest = tStack_get(&poly->stack, j);
 8024e48:	f851 3f04 	ldr.w	r3, [r1, #4]!
                if (poly->notes[noteToTest][0] == -3) //if there is a stolen note waiting (marked inactive but on the stack)
 8024e4c:	b21b      	sxth	r3, r3
 8024e4e:	1cdc      	adds	r4, r3, #3
 8024e50:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
 8024e54:	6876      	ldr	r6, [r6, #4]
 8024e56:	3603      	adds	r6, #3
 8024e58:	d1f3      	bne.n	8024e42 <tSimplePoly_noteOff+0xa2>
                    poly->voices[deactivatedVoice][0] = noteToTest; //set the newly free voice to use the old stolen note
 8024e5a:	692a      	ldr	r2, [r5, #16]
                    poly->voices[deactivatedVoice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
 8024e5c:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
                    poly->notes[noteToTest][0] = deactivatedVoice; //mark that it is no longer stolen and is now active
 8024e60:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
                    poly->voices[deactivatedVoice][0] = noteToTest; //set the newly free voice to use the old stolen note
 8024e64:	59d2      	ldr	r2, [r2, r7]
 8024e66:	6013      	str	r3, [r2, #0]
                    poly->voices[deactivatedVoice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
 8024e68:	692a      	ldr	r2, [r5, #16]
 8024e6a:	6a09      	ldr	r1, [r1, #32]
 8024e6c:	59d2      	ldr	r2, [r2, r7]
 8024e6e:	6051      	str	r1, [r2, #4]
                    poly->voices[deactivatedVoice][2] = noteToTest;
 8024e70:	692a      	ldr	r2, [r5, #16]
 8024e72:	59d2      	ldr	r2, [r2, r7]
 8024e74:	6093      	str	r3, [r2, #8]
                    poly->notes[noteToTest][0] = deactivatedVoice; //mark that it is no longer stolen and is now active
 8024e76:	6060      	str	r0, [r4, #4]
 8024e78:	e7c3      	b.n	8024e02 <tSimplePoly_noteOff+0x62>
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024e7a:	eba0 0806 	sub.w	r8, r0, r6
 8024e7e:	f1b8 0f00 	cmp.w	r8, #0
 8024e82:	dd22      	ble.n	8024eca <tSimplePoly_noteOff+0x12a>
            if ((k+foundIndex) >= (ns->capacity - 1))
 8024e84:	f8bc e208 	ldrh.w	lr, [ip, #520]	; 0x208
 8024e88:	2200      	movs	r2, #0
                    ns->data[k + foundIndex + 1] = -1;
 8024e8a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8024e8e:	3801      	subs	r0, #1
            if ((k+foundIndex) >= (ns->capacity - 1))
 8024e90:	4613      	mov	r3, r2
 8024e92:	44ce      	add	lr, r9
 8024e94:	e006      	b.n	8024ea4 <tSimplePoly_noteOff+0x104>
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024e96:	3201      	adds	r2, #1
                ns->data[k + foundIndex] = -1;
 8024e98:	f8c4 9004 	str.w	r9, [r4, #4]
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024e9c:	b2d2      	uxtb	r2, r2
 8024e9e:	4590      	cmp	r8, r2
 8024ea0:	4613      	mov	r3, r2
 8024ea2:	dd0f      	ble.n	8024ec4 <tSimplePoly_noteOff+0x124>
            if ((k+foundIndex) >= (ns->capacity - 1))
 8024ea4:	4433      	add	r3, r6
 8024ea6:	4573      	cmp	r3, lr
 8024ea8:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8024eac:	daf3      	bge.n	8024e96 <tSimplePoly_noteOff+0xf6>
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024eae:	3201      	adds	r2, #1
                if ((k + foundIndex) == (ns->size - 1))
 8024eb0:	4283      	cmp	r3, r0
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
 8024eb2:	68a7      	ldr	r7, [r4, #8]
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024eb4:	b2d2      	uxtb	r2, r2
                    ns->data[k + foundIndex + 1] = -1;
 8024eb6:	bf08      	it	eq
 8024eb8:	f8c4 9008 	streq.w	r9, [r4, #8]
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
 8024ebc:	6067      	str	r7, [r4, #4]
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024ebe:	4590      	cmp	r8, r2
 8024ec0:	4613      	mov	r3, r2
 8024ec2:	dcef      	bgt.n	8024ea4 <tSimplePoly_noteOff+0x104>
        ns->size--;
 8024ec4:	f8ac 0206 	strh.w	r0, [ip, #518]	; 0x206
 8024ec8:	e782      	b.n	8024dd0 <tSimplePoly_noteOff+0x30>
 8024eca:	3801      	subs	r0, #1
 8024ecc:	e7fa      	b.n	8024ec4 <tSimplePoly_noteOff+0x124>
        if (ns->data[i] == noteVal)    return i;
 8024ece:	4680      	mov	r8, r0
    for (int i = 0; i < ns->size; i++)
 8024ed0:	2600      	movs	r6, #0
 8024ed2:	e7d7      	b.n	8024e84 <tSimplePoly_noteOff+0xe4>

08024ed4 <tSimplePoly_deactivateVoice>:


void tSimplePoly_deactivateVoice(tSimplePoly* const polyh, uint8_t voice)
{
 8024ed4:	b4f0      	push	{r4, r5, r6, r7}
    _tSimplePoly* poly = *polyh;
 8024ed6:	6803      	ldr	r3, [r0, #0]

    if (poly->voices[voice][0] == -2) //only do this if the voice is waiting for deactivation (not already reassigned while waiting)
 8024ed8:	b208      	sxth	r0, r1
 8024eda:	691a      	ldr	r2, [r3, #16]
 8024edc:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8024ee0:	6822      	ldr	r2, [r4, #0]
 8024ee2:	3202      	adds	r2, #2
 8024ee4:	d001      	beq.n	8024eea <tSimplePoly_deactivateVoice+0x16>
                    poly->notes[noteToTest][0] = voice; //mark that it is no longer stolen and is now active
                }
            }
        }
    }
}
 8024ee6:	bcf0      	pop	{r4, r5, r6, r7}
 8024ee8:	4770      	bx	lr
        poly->voices[voice][0] = -1;
 8024eea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8024eee:	0085      	lsls	r5, r0, #2
        poly->voices[voice][1] = 0;
 8024ef0:	2200      	movs	r2, #0
        poly->voices[voice][0] = -1;
 8024ef2:	6026      	str	r6, [r4, #0]
        poly->voices[voice][1] = 0;
 8024ef4:	691c      	ldr	r4, [r3, #16]
 8024ef6:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8024efa:	6042      	str	r2, [r0, #4]
        if (poly->recover_stolen)
 8024efc:	6998      	ldr	r0, [r3, #24]
 8024efe:	2800      	cmp	r0, #0
 8024f00:	d0f1      	beq.n	8024ee6 <tSimplePoly_deactivateVoice+0x12>
    _tStack* ns = *stack;
 8024f02:	6858      	ldr	r0, [r3, #4]
    return ns->size;
 8024f04:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 8024f08:	2e00      	cmp	r6, #0
 8024f0a:	d0ec      	beq.n	8024ee6 <tSimplePoly_deactivateVoice+0x12>
 8024f0c:	4607      	mov	r7, r0
 8024f0e:	f8df c054 	ldr.w	ip, [pc, #84]	; 8024f64 <tSimplePoly_deactivateVoice+0x90>
    return ns->data[which];
 8024f12:	eb00 0082 	add.w	r0, r0, r2, lsl #2
                noteToTest = tStack_get(&poly->stack, j);
 8024f16:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
                if (poly->notes[noteToTest][0] == -3) //if there is a stolen note waiting (marked inactive but on the stack)
 8024f1a:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
                noteToTest = tStack_get(&poly->stack, j);
 8024f1e:	f8ac 0000 	strh.w	r0, [ip]
                if (poly->notes[noteToTest][0] == -3) //if there is a stolen note waiting (marked inactive but on the stack)
 8024f22:	69e4      	ldr	r4, [r4, #28]
 8024f24:	3403      	adds	r4, #3
 8024f26:	d004      	beq.n	8024f32 <tSimplePoly_deactivateVoice+0x5e>
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 8024f28:	3201      	adds	r2, #1
 8024f2a:	42b2      	cmp	r2, r6
 8024f2c:	dadb      	bge.n	8024ee6 <tSimplePoly_deactivateVoice+0x12>
{
 8024f2e:	4638      	mov	r0, r7
 8024f30:	e7ef      	b.n	8024f12 <tSimplePoly_deactivateVoice+0x3e>
                    poly->voices[voice][0] = noteToTest; //set the newly free voice to use the old stolen note
 8024f32:	691c      	ldr	r4, [r3, #16]
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 8024f34:	3201      	adds	r2, #1
                    poly->voices[voice][0] = noteToTest; //set the newly free voice to use the old stolen note
 8024f36:	5964      	ldr	r4, [r4, r5]
 8024f38:	6020      	str	r0, [r4, #0]
                    poly->voices[voice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
 8024f3a:	f9bc 0000 	ldrsh.w	r0, [ip]
 8024f3e:	691c      	ldr	r4, [r3, #16]
 8024f40:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
 8024f44:	5967      	ldr	r7, [r4, r5]
                    poly->notes[noteToTest][0] = voice; //mark that it is no longer stolen and is now active
 8024f46:	4634      	mov	r4, r6
                    poly->voices[voice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
 8024f48:	6a36      	ldr	r6, [r6, #32]
 8024f4a:	607e      	str	r6, [r7, #4]
                    poly->voices[voice][2] = noteToTest;
 8024f4c:	691e      	ldr	r6, [r3, #16]
 8024f4e:	5976      	ldr	r6, [r6, r5]
 8024f50:	60b0      	str	r0, [r6, #8]
                    poly->notes[noteToTest][0] = voice; //mark that it is no longer stolen and is now active
 8024f52:	61e1      	str	r1, [r4, #28]
 8024f54:	685f      	ldr	r7, [r3, #4]
 8024f56:	f8b7 6206 	ldrh.w	r6, [r7, #518]	; 0x206
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 8024f5a:	4296      	cmp	r6, r2
 8024f5c:	ddc3      	ble.n	8024ee6 <tSimplePoly_deactivateVoice+0x12>
{
 8024f5e:	4638      	mov	r0, r7
 8024f60:	e7d7      	b.n	8024f12 <tSimplePoly_deactivateVoice+0x3e>
 8024f62:	bf00      	nop
 8024f64:	20000390 	.word	0x20000390

08024f68 <tSimplePoly_markPendingNoteOff>:
    return voiceWithThatNote;
}


int tSimplePoly_markPendingNoteOff(tSimplePoly* const polyh, uint8_t note)
{
 8024f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tSimplePoly* poly = *polyh;
 8024f6c:	6805      	ldr	r5, [r0, #0]
    _tStack* ns = *stack;
 8024f6e:	f8d5 c004 	ldr.w	ip, [r5, #4]
    for (int i = 0; i < ns->size; i++)
 8024f72:	f8bc 0206 	ldrh.w	r0, [ip, #518]	; 0x206
 8024f76:	b170      	cbz	r0, 8024f96 <tSimplePoly_markPendingNoteOff+0x2e>
        if (ns->data[i] == noteVal)    return i;
 8024f78:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8024f7c:	428b      	cmp	r3, r1
 8024f7e:	d05c      	beq.n	802503a <tSimplePoly_markPendingNoteOff+0xd2>
 8024f80:	f10c 0304 	add.w	r3, ip, #4
    for (int i = 0; i < ns->size; i++)
 8024f84:	2600      	movs	r6, #0
 8024f86:	e003      	b.n	8024f90 <tSimplePoly_markPendingNoteOff+0x28>
        if (ns->data[i] == noteVal)    return i;
 8024f88:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8024f8c:	4291      	cmp	r1, r2
 8024f8e:	d006      	beq.n	8024f9e <tSimplePoly_markPendingNoteOff+0x36>
    for (int i = 0; i < ns->size; i++)
 8024f90:	3601      	adds	r6, #1
 8024f92:	42b0      	cmp	r0, r6
 8024f94:	d1f8      	bne.n	8024f88 <tSimplePoly_markPendingNoteOff+0x20>
    int deactivatedVoice = -1;
 8024f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }


    }
    return deactivatedVoice;
}
 8024f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024f9e:	eba0 0806 	sub.w	r8, r0, r6
 8024fa2:	f1b8 0f00 	cmp.w	r8, #0
 8024fa6:	dd46      	ble.n	8025036 <tSimplePoly_markPendingNoteOff+0xce>
            if ((k+foundIndex) >= (ns->capacity - 1))
 8024fa8:	f8bc e208 	ldrh.w	lr, [ip, #520]	; 0x208
 8024fac:	2200      	movs	r2, #0
                    ns->data[k + foundIndex + 1] = -1;
 8024fae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8024fb2:	3801      	subs	r0, #1
            if ((k+foundIndex) >= (ns->capacity - 1))
 8024fb4:	4613      	mov	r3, r2
 8024fb6:	44ce      	add	lr, r9
 8024fb8:	e006      	b.n	8024fc8 <tSimplePoly_markPendingNoteOff+0x60>
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024fba:	3201      	adds	r2, #1
                ns->data[k + foundIndex] = -1;
 8024fbc:	f8c4 9004 	str.w	r9, [r4, #4]
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024fc0:	b2d2      	uxtb	r2, r2
 8024fc2:	4590      	cmp	r8, r2
 8024fc4:	4613      	mov	r3, r2
 8024fc6:	dd0f      	ble.n	8024fe8 <tSimplePoly_markPendingNoteOff+0x80>
            if ((k+foundIndex) >= (ns->capacity - 1))
 8024fc8:	4433      	add	r3, r6
 8024fca:	4573      	cmp	r3, lr
 8024fcc:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8024fd0:	daf3      	bge.n	8024fba <tSimplePoly_markPendingNoteOff+0x52>
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024fd2:	3201      	adds	r2, #1
                if ((k + foundIndex) == (ns->size - 1))
 8024fd4:	4283      	cmp	r3, r0
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
 8024fd6:	68a7      	ldr	r7, [r4, #8]
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024fd8:	b2d2      	uxtb	r2, r2
                    ns->data[k + foundIndex + 1] = -1;
 8024fda:	bf08      	it	eq
 8024fdc:	f8c4 9008 	streq.w	r9, [r4, #8]
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
 8024fe0:	6067      	str	r7, [r4, #4]
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024fe2:	4590      	cmp	r8, r2
 8024fe4:	4613      	mov	r3, r2
 8024fe6:	dcef      	bgt.n	8024fc8 <tSimplePoly_markPendingNoteOff+0x60>
        poly->notes[note][0] = -2;
 8024fe8:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
 8024fec:	f06f 0201 	mvn.w	r2, #1
        ns->size--;
 8024ff0:	f8ac 0206 	strh.w	r0, [ip, #518]	; 0x206
        poly->notes[note][0] = -2;
 8024ff4:	61da      	str	r2, [r3, #28]
        for (int i = 0; i < poly->maxNumVoices; i++)
 8024ff6:	68ee      	ldr	r6, [r5, #12]
 8024ff8:	2e00      	cmp	r6, #0
 8024ffa:	ddcc      	ble.n	8024f96 <tSimplePoly_markPendingNoteOff+0x2e>
            if (poly->voices[i][0] == note)
 8024ffc:	692b      	ldr	r3, [r5, #16]
 8024ffe:	681a      	ldr	r2, [r3, #0]
 8025000:	6810      	ldr	r0, [r2, #0]
 8025002:	4281      	cmp	r1, r0
 8025004:	d00c      	beq.n	8025020 <tSimplePoly_markPendingNoteOff+0xb8>
        for (int i = 0; i < poly->maxNumVoices; i++)
 8025006:	2000      	movs	r0, #0
 8025008:	e004      	b.n	8025014 <tSimplePoly_markPendingNoteOff+0xac>
            if (poly->voices[i][0] == note)
 802500a:	f853 2f04 	ldr.w	r2, [r3, #4]!
 802500e:	6814      	ldr	r4, [r2, #0]
 8025010:	428c      	cmp	r4, r1
 8025012:	d007      	beq.n	8025024 <tSimplePoly_markPendingNoteOff+0xbc>
        for (int i = 0; i < poly->maxNumVoices; i++)
 8025014:	3001      	adds	r0, #1
 8025016:	42b0      	cmp	r0, r6
 8025018:	ea4f 0780 	mov.w	r7, r0, lsl #2
 802501c:	d1f5      	bne.n	802500a <tSimplePoly_markPendingNoteOff+0xa2>
 802501e:	e7ba      	b.n	8024f96 <tSimplePoly_markPendingNoteOff+0x2e>
 8025020:	2000      	movs	r0, #0
            if (poly->voices[i][0] == note)
 8025022:	4607      	mov	r7, r0
                poly->voices[i][0] = -2;
 8025024:	f06f 0301 	mvn.w	r3, #1
                poly->voices[i][1] = 0;
 8025028:	2100      	movs	r1, #0
                poly->voices[i][0] = -2;
 802502a:	6013      	str	r3, [r2, #0]
                poly->voices[i][1] = 0;
 802502c:	692b      	ldr	r3, [r5, #16]
 802502e:	59db      	ldr	r3, [r3, r7]
 8025030:	6059      	str	r1, [r3, #4]
}
 8025032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025036:	3801      	subs	r0, #1
 8025038:	e7d6      	b.n	8024fe8 <tSimplePoly_markPendingNoteOff+0x80>
        if (ns->data[i] == noteVal)    return i;
 802503a:	4680      	mov	r8, r0
    for (int i = 0; i < ns->size; i++)
 802503c:	2600      	movs	r6, #0
 802503e:	e7b3      	b.n	8024fa8 <tSimplePoly_markPendingNoteOff+0x40>

08025040 <tSimplePoly_setNumVoices>:

void tSimplePoly_setNumVoices(tSimplePoly* const polyh, uint8_t numVoices)
{
    _tSimplePoly* poly = *polyh;
 8025040:	6802      	ldr	r2, [r0, #0]
    poly->numVoices = (numVoices > poly->maxNumVoices) ? poly->maxNumVoices : numVoices;
 8025042:	68d3      	ldr	r3, [r2, #12]
 8025044:	4299      	cmp	r1, r3
 8025046:	bfa8      	it	ge
 8025048:	4619      	movge	r1, r3
 802504a:	6091      	str	r1, [r2, #8]
}
 802504c:	4770      	bx	lr
 802504e:	bf00      	nop

08025050 <tSimplePoly_getNumVoices>:


int tSimplePoly_getNumVoices(tSimplePoly* const polyh)
{
    _tSimplePoly* poly = *polyh;
    return poly->numVoices;
 8025050:	6803      	ldr	r3, [r0, #0]
}
 8025052:	6898      	ldr	r0, [r3, #8]
 8025054:	4770      	bx	lr
 8025056:	bf00      	nop

08025058 <tSimplePoly_getNumActiveVoices>:

int tSimplePoly_getNumActiveVoices(tSimplePoly* const polyh)
{
 8025058:	b508      	push	{r3, lr}
    _tSimplePoly* poly = *polyh;
 802505a:	6803      	ldr	r3, [r0, #0]
    return LEAF_clip(0, tStack_getSize(&poly->stack), poly->numVoices);
 802505c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8025084 <tSimplePoly_getNumActiveVoices+0x2c>
    return ns->size;
 8025060:	685a      	ldr	r2, [r3, #4]
    return LEAF_clip(0, tStack_getSize(&poly->stack), poly->numVoices);
 8025062:	ed93 1a02 	vldr	s2, [r3, #8]
    return ns->size;
 8025066:	f8b2 3206 	ldrh.w	r3, [r2, #518]	; 0x206
    return LEAF_clip(0, tStack_getSize(&poly->stack), poly->numVoices);
 802506a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
    return ns->size;
 802506e:	ee00 3a90 	vmov	s1, r3
    return LEAF_clip(0, tStack_getSize(&poly->stack), poly->numVoices);
 8025072:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8025076:	f7ff f983 	bl	8024380 <LEAF_clip>
}
 802507a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802507e:	ee17 0a90 	vmov	r0, s15
 8025082:	bd08      	pop	{r3, pc}
 8025084:	00000000 	.word	0x00000000

08025088 <tSimplePoly_getPitch>:


int tSimplePoly_getPitch(tSimplePoly* const polyh, uint8_t voice)
{
    _tSimplePoly* poly = *polyh;
    return poly->voices[voice][2];
 8025088:	6803      	ldr	r3, [r0, #0]
 802508a:	691b      	ldr	r3, [r3, #16]
 802508c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
}
 8025090:	6898      	ldr	r0, [r3, #8]
 8025092:	4770      	bx	lr

08025094 <tSimplePoly_getPitchAndCheckActive>:

//this one returns negative one if the voice is inactive
int tSimplePoly_getPitchAndCheckActive(tSimplePoly* const polyh, uint8_t voice)
{
    _tSimplePoly* poly = *polyh;
    return poly->voices[voice][0];
 8025094:	6803      	ldr	r3, [r0, #0]
 8025096:	691b      	ldr	r3, [r3, #16]
 8025098:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
}
 802509c:	6818      	ldr	r0, [r3, #0]
 802509e:	4770      	bx	lr

080250a0 <tSimplePoly_getVelocity>:

int tSimplePoly_getVelocity(tSimplePoly* const polyh, uint8_t voice)
{
    _tSimplePoly* poly = *polyh;
    return poly->voices[voice][1];
 80250a0:	6803      	ldr	r3, [r0, #0]
 80250a2:	691b      	ldr	r3, [r3, #16]
 80250a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
}
 80250a8:	6858      	ldr	r0, [r3, #4]
 80250aa:	4770      	bx	lr

080250ac <tSimplePoly_isOn>:

int tSimplePoly_isOn(tSimplePoly* const polyh, uint8_t voice)
{
    _tSimplePoly* poly = *polyh;
    return (poly->voices[voice][0] > 0) ? 1 : 0;
 80250ac:	6803      	ldr	r3, [r0, #0]
 80250ae:	691b      	ldr	r3, [r3, #16]
 80250b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80250b4:	6818      	ldr	r0, [r3, #0]
}
 80250b6:	2800      	cmp	r0, #0
 80250b8:	bfd4      	ite	le
 80250ba:	2000      	movle	r0, #0
 80250bc:	2001      	movgt	r0, #1
 80250be:	4770      	bx	lr

080250c0 <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf.mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 80250c0:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 80250c2:	680c      	ldr	r4, [r1, #0]
{
 80250c4:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80250c6:	2010      	movs	r0, #16
 80250c8:	4621      	mov	r1, r4
 80250ca:	f7ff fb59 	bl	8024780 <mpool_alloc>
    c->mempool = m;
    
    c->inc      =  0.0f;
 80250ce:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80250d0:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 80250d2:	6004      	str	r4, [r0, #0]
    c->inc      =  0.0f;
 80250d4:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
 80250d6:	6043      	str	r3, [r0, #4]
}
 80250d8:	bd38      	pop	{r3, r4, r5, pc}
 80250da:	bf00      	nop

080250dc <tCycle_free>:

void    tCycle_free (tCycle* const cy)
{
    _tCycle* c = *cy;
 80250dc:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)c, c->mempool);
 80250de:	6801      	ldr	r1, [r0, #0]
 80250e0:	f7ff bbf6 	b.w	80248d0 <mpool_free>

080250e4 <tCycle_setFreq>:
{
    _tCycle* c = *cy;
    
    c->freq  = freq;

    c->inc = freq * leaf.invSampleRate;
 80250e4:	4a05      	ldr	r2, [pc, #20]	; (80250fc <tCycle_setFreq+0x18>)
    _tCycle* c = *cy;
 80250e6:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * leaf.invSampleRate;
 80250e8:	edd2 7a01 	vldr	s15, [r2, #4]
    c->freq  = freq;
 80250ec:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * leaf.invSampleRate;
 80250f0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80250f4:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80250f8:	4770      	bx	lr
 80250fa:	bf00      	nop
 80250fc:	200194a0 	.word	0x200194a0

08025100 <tCycle_tick>:

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 8025100:	6803      	ldr	r3, [r0, #0]
    float samp0;
    float samp1;
    
    // Phasor increment
    c->phase += c->inc;
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8025102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    c->phase += c->inc;
 8025106:	ed93 7a01 	vldr	s14, [r3, #4]
 802510a:	edd3 7a02 	vldr	s15, [r3, #8]
 802510e:	ee37 7a27 	vadd.f32	s14, s14, s15
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8025112:	eeb4 7ae6 	vcmpe.f32	s14, s13
    c->phase += c->inc;
 8025116:	ed83 7a01 	vstr	s14, [r3, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 802511a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802511e:	db3f      	blt.n	80251a0 <tCycle_tick+0xa0>
 8025120:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8025124:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8025128:	ee77 7a66 	vsub.f32	s15, s14, s13
 802512c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025130:	eeb0 7a67 	vmov.f32	s14, s15
 8025134:	daf6      	bge.n	8025124 <tCycle_tick+0x24>
    while (c->phase < 0.0f) c->phase += 1.0f;
 8025136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802513a:	edc3 7a01 	vstr	s15, [r3, #4]
 802513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025142:	d534      	bpl.n	80251ae <tCycle_tick+0xae>
 8025144:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8025148:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 802514c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8025150:	ee37 7a86 	vadd.f32	s14, s15, s12
 8025154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025158:	eef0 7a47 	vmov.f32	s15, s14
 802515c:	d4f6      	bmi.n	802514c <tCycle_tick+0x4c>
 802515e:	ed83 7a01 	vstr	s14, [r3, #4]

    // Wavetable synthesis

	temp = SINE_TABLE_SIZE * c->phase;
 8025162:	eddf 7a14 	vldr	s15, [pc, #80]	; 80251b4 <tCycle_tick+0xb4>
	intPart = (int)temp;
	fracPart = temp - (float)intPart;
	samp0 = __leaf_table_sinewave[intPart];
 8025166:	4a14      	ldr	r2, [pc, #80]	; (80251b8 <tCycle_tick+0xb8>)
	temp = SINE_TABLE_SIZE * c->phase;
 8025168:	ee27 7a27 	vmul.f32	s14, s14, s15
	intPart = (int)temp;
 802516c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8025170:	ee17 3a90 	vmov	r3, s15
	fracPart = temp - (float)intPart;
 8025174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if (++intPart >= SINE_TABLE_SIZE) intPart = 0;
 8025178:	1c59      	adds	r1, r3, #1
	samp0 = __leaf_table_sinewave[intPart];
 802517a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
	fracPart = temp - (float)intPart;
 802517e:	ee37 7a67 	vsub.f32	s14, s14, s15
	if (++intPart >= SINE_TABLE_SIZE) intPart = 0;
 8025182:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
	samp0 = __leaf_table_sinewave[intPart];
 8025186:	ed90 0a00 	vldr	s0, [r0]
	if (++intPart >= SINE_TABLE_SIZE) intPart = 0;
 802518a:	bfa8      	it	ge
 802518c:	2100      	movge	r1, #0
	samp1 = __leaf_table_sinewave[intPart];
 802518e:	eb02 0281 	add.w	r2, r2, r1, lsl #2

    return (samp0 + (samp1 - samp0) * fracPart);
 8025192:	edd2 7a00 	vldr	s15, [r2]
 8025196:	ee77 7ac0 	vsub.f32	s15, s15, s0
}
 802519a:	eea7 0a87 	vfma.f32	s0, s15, s14
 802519e:	4770      	bx	lr
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 80251a0:	eef0 7a47 	vmov.f32	s15, s14
    while (c->phase < 0.0f) c->phase += 1.0f;
 80251a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80251a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80251ac:	d4ca      	bmi.n	8025144 <tCycle_tick+0x44>
 80251ae:	eeb0 7a67 	vmov.f32	s14, s15
 80251b2:	e7d6      	b.n	8025162 <tCycle_tick+0x62>
 80251b4:	45000000 	.word	0x45000000
 80251b8:	0804a0fc 	.word	0x0804a0fc

080251bc <tSawtooth_initToPool>:
{
    tSawtooth_initToPool(cy, &leaf.mempool);
}

void    tSawtooth_initToPool    (tSawtooth* const cy, tMempool* const mp)
{
 80251bc:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
 80251be:	680d      	ldr	r5, [r1, #0]
{
 80251c0:	4604      	mov	r4, r0
    _tSawtooth* c = *cy = (_tSawtooth*) mpool_alloc(sizeof(_tSawtooth), m);
 80251c2:	2018      	movs	r0, #24
{
    _tSawtooth* c = *cy;
    
    c->freq  = freq;
    
    c->inc = c->freq * leaf.invSampleRate;
 80251c4:	4e0c      	ldr	r6, [pc, #48]	; (80251f8 <tSawtooth_initToPool+0x3c>)
    _tSawtooth* c = *cy = (_tSawtooth*) mpool_alloc(sizeof(_tSawtooth), m);
 80251c6:	4629      	mov	r1, r5
 80251c8:	f7ff fada 	bl	8024780 <mpool_alloc>
    c->inc      = 0.0f;
 80251cc:	2300      	movs	r3, #0
    _tSawtooth* c = *cy = (_tSawtooth*) mpool_alloc(sizeof(_tSawtooth), m);
 80251ce:	6020      	str	r0, [r4, #0]
 80251d0:	2103      	movs	r1, #3
    c->mempool = m;
 80251d2:	6005      	str	r5, [r0, #0]
    c->phase    = 0.0f;
 80251d4:	6043      	str	r3, [r0, #4]
    c->freq  = freq;
 80251d6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80251fc <tSawtooth_initToPool+0x40>
    c->inc = c->freq * leaf.invSampleRate;
 80251da:	edd6 7a01 	vldr	s15, [r6, #4]
    c->inc      = 0.0f;
 80251de:	6083      	str	r3, [r0, #8]
    c->inc = c->freq * leaf.invSampleRate;
 80251e0:	ee67 7a87 	vmul.f32	s15, s15, s14
    _tSawtooth* c = *cy;
 80251e4:	6823      	ldr	r3, [r4, #0]
    c->w = c->freq * INV_20;
    for (c->oct = 0; c->w > 2.0f; c->oct++)
    {
        c->w = 0.5f * c->w;
    }
    c->w = 2.0f - c->w;
 80251e6:	4a06      	ldr	r2, [pc, #24]	; (8025200 <tSawtooth_initToPool+0x44>)
    c->freq  = freq;
 80251e8:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = c->freq * leaf.invSampleRate;
 80251ec:	edc3 7a02 	vstr	s15, [r3, #8]
 80251f0:	6119      	str	r1, [r3, #16]
    c->w = 2.0f - c->w;
 80251f2:	615a      	str	r2, [r3, #20]
}
 80251f4:	bd70      	pop	{r4, r5, r6, pc}
 80251f6:	bf00      	nop
 80251f8:	200194a0 	.word	0x200194a0
 80251fc:	435c0000 	.word	0x435c0000
 8025200:	3f200000 	.word	0x3f200000

08025204 <tSawtooth_free>:
    _tSawtooth* c = *cy;
 8025204:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)c, c->mempool);
 8025206:	6801      	ldr	r1, [r0, #0]
 8025208:	f7ff bb62 	b.w	80248d0 <mpool_free>

0802520c <tSawtooth_setFreq>:
    c->w = c->freq * INV_20;
 802520c:	eddf 7a16 	vldr	s15, [pc, #88]	; 8025268 <tSawtooth_setFreq+0x5c>
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 8025210:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    c->inc = c->freq * leaf.invSampleRate;
 8025214:	4b15      	ldr	r3, [pc, #84]	; (802526c <tSawtooth_setFreq+0x60>)
    c->w = c->freq * INV_20;
 8025216:	ee60 7a27 	vmul.f32	s15, s0, s15
    _tSawtooth* c = *cy;
 802521a:	6802      	ldr	r2, [r0, #0]
    c->inc = c->freq * leaf.invSampleRate;
 802521c:	edd3 6a01 	vldr	s13, [r3, #4]
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 8025220:	2300      	movs	r3, #0
    c->freq  = freq;
 8025222:	ed82 0a03 	vstr	s0, [r2, #12]
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 8025226:	eef4 7ac7 	vcmpe.f32	s15, s14
    c->w = c->freq * INV_20;
 802522a:	edc2 7a05 	vstr	s15, [r2, #20]
    c->inc = c->freq * leaf.invSampleRate;
 802522e:	ee66 6a80 	vmul.f32	s13, s13, s0
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 8025232:	6113      	str	r3, [r2, #16]
 8025234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->inc = c->freq * leaf.invSampleRate;
 8025238:	edc2 6a02 	vstr	s13, [r2, #8]
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 802523c:	dd0c      	ble.n	8025258 <tSawtooth_setFreq+0x4c>
        c->w = 0.5f * c->w;
 802523e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 8025242:	2301      	movs	r3, #1
        c->w = 0.5f * c->w;
 8025244:	ee67 7aa6 	vmul.f32	s15, s15, s13
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 8025248:	4619      	mov	r1, r3
 802524a:	3301      	adds	r3, #1
 802524c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8025250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025254:	dcf6      	bgt.n	8025244 <tSawtooth_setFreq+0x38>
 8025256:	6111      	str	r1, [r2, #16]
    c->w = 2.0f - c->w;
 8025258:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802525c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025260:	edc2 7a05 	vstr	s15, [r2, #20]
}
 8025264:	4770      	bx	lr
 8025266:	bf00      	nop
 8025268:	3d4ccccd 	.word	0x3d4ccccd
 802526c:	200194a0 	.word	0x200194a0

08025270 <tSawtooth_tick>:

float   tSawtooth_tick(tSawtooth* const cy)
{
 8025270:	b410      	push	{r4}
    _tSawtooth* c = *cy;
 8025272:	6802      	ldr	r2, [r0, #0]
    
    // Phasor increment
    c->phase += c->inc;
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8025274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    c->phase += c->inc;
 8025278:	ed92 7a01 	vldr	s14, [r2, #4]
 802527c:	edd2 7a02 	vldr	s15, [r2, #8]
 8025280:	ee37 7a27 	vadd.f32	s14, s14, s15
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8025284:	eeb4 7ae6 	vcmpe.f32	s14, s13
    c->phase += c->inc;
 8025288:	ed82 7a01 	vstr	s14, [r2, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 802528c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025290:	db3e      	blt.n	8025310 <tSawtooth_tick+0xa0>
 8025292:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8025296:	eeb4 7ac6 	vcmpe.f32	s14, s12
 802529a:	ee77 7a66 	vsub.f32	s15, s14, s13
 802529e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252a2:	eeb0 7a67 	vmov.f32	s14, s15
 80252a6:	daf6      	bge.n	8025296 <tSawtooth_tick+0x26>
    while (c->phase < 0.0f) c->phase += 1.0f;
 80252a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80252ac:	edc2 7a01 	vstr	s15, [r2, #4]
 80252b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252b4:	d533      	bpl.n	802531e <tSawtooth_tick+0xae>
 80252b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80252ba:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80252be:	eef4 7ae6 	vcmpe.f32	s15, s13
 80252c2:	ee37 7a86 	vadd.f32	s14, s15, s12
 80252c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252ca:	eef0 7a47 	vmov.f32	s15, s14
 80252ce:	d4f6      	bmi.n	80252be <tSawtooth_tick+0x4e>
 80252d0:	ed82 7a01 	vstr	s14, [r2, #4]
    
    float out = 0.0f;
    
    int idx = (int)(c->phase * SAW_TABLE_SIZE);
 80252d4:	eef0 7a47 	vmov.f32	s15, s14
    
    // Wavetable synthesis
    out = __leaf_table_sawtooth[c->oct+1][idx] +
 80252d8:	6911      	ldr	r1, [r2, #16]
 80252da:	4812      	ldr	r0, [pc, #72]	; (8025324 <tSawtooth_tick+0xb4>)
 80252dc:	1c4c      	adds	r4, r1, #1
 80252de:	ed92 7a05 	vldr	s14, [r2, #20]
    int idx = (int)(c->phase * SAW_TABLE_SIZE);
 80252e2:	eefe 7aea 	vcvt.s32.f32	s15, s15, #11
 80252e6:	ee17 3a90 	vmov	r3, s15
         (__leaf_table_sawtooth[c->oct][idx] - __leaf_table_sawtooth[c->oct+1][idx]) * c->w;
 80252ea:	eb03 21c1 	add.w	r1, r3, r1, lsl #11
    out = __leaf_table_sawtooth[c->oct+1][idx] +
 80252ee:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    
    return out;
}
 80252f2:	f85d 4b04 	ldr.w	r4, [sp], #4
         (__leaf_table_sawtooth[c->oct][idx] - __leaf_table_sawtooth[c->oct+1][idx]) * c->w;
 80252f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    out = __leaf_table_sawtooth[c->oct+1][idx] +
 80252fa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
         (__leaf_table_sawtooth[c->oct][idx] - __leaf_table_sawtooth[c->oct+1][idx]) * c->w;
 80252fe:	edd1 7a00 	vldr	s15, [r1]
    out = __leaf_table_sawtooth[c->oct+1][idx] +
 8025302:	ed93 0a00 	vldr	s0, [r3]
         (__leaf_table_sawtooth[c->oct][idx] - __leaf_table_sawtooth[c->oct+1][idx]) * c->w;
 8025306:	ee77 7ac0 	vsub.f32	s15, s15, s0
}
 802530a:	eea7 0a87 	vfma.f32	s0, s15, s14
 802530e:	4770      	bx	lr
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8025310:	eef0 7a47 	vmov.f32	s15, s14
    while (c->phase < 0.0f) c->phase += 1.0f;
 8025314:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8025318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802531c:	d4cb      	bmi.n	80252b6 <tSawtooth_tick+0x46>
 802531e:	eeb0 7a67 	vmov.f32	s14, s15
 8025322:	e7d7      	b.n	80252d4 <tSawtooth_tick+0x64>
 8025324:	080340fc 	.word	0x080340fc

08025328 <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf.mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 8025328:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
 802532a:	6814      	ldr	r4, [r2, #0]
{
 802532c:	4606      	mov	r6, r0
 802532e:	460d      	mov	r5, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8025330:	2018      	movs	r0, #24
 8025332:	4621      	mov	r1, r4
 8025334:	f7ff fa24 	bl	8024780 <mpool_alloc>
    n->mempool = m;
    
    n->type = type;
    n->rand = leaf.random;
 8025338:	4b03      	ldr	r3, [pc, #12]	; (8025348 <tNoise_initToPool+0x20>)
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 802533a:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 802533c:	6004      	str	r4, [r0, #0]
    n->type = type;
 802533e:	7105      	strb	r5, [r0, #4]
    n->rand = leaf.random;
 8025340:	691b      	ldr	r3, [r3, #16]
 8025342:	6143      	str	r3, [r0, #20]
}
 8025344:	bd70      	pop	{r4, r5, r6, pc}
 8025346:	bf00      	nop
 8025348:	200194a0 	.word	0x200194a0

0802534c <tNoise_free>:

void    tNoise_free (tNoise* const ns)
{
    _tNoise* n = *ns;
 802534c:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)n, n->mempool);
 802534e:	6801      	ldr	r1, [r0, #0]
 8025350:	f7ff babe 	b.w	80248d0 <mpool_free>

08025354 <tNoise_tick>:
}

float   tNoise_tick(tNoise* const ns)
{
 8025354:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 8025356:	6804      	ldr	r4, [r0, #0]
    
    float rand = (n->rand() * 2.0f) - 1.0f;
 8025358:	6963      	ldr	r3, [r4, #20]
 802535a:	4798      	blx	r3
 802535c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8025360:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    
    if (n->type == PinkNoise)
 8025364:	7923      	ldrb	r3, [r4, #4]
 8025366:	2b01      	cmp	r3, #1
    float rand = (n->rand() * 2.0f) - 1.0f;
 8025368:	eee0 7a07 	vfma.f32	s15, s0, s14
 802536c:	eeb0 0a67 	vmov.f32	s0, s15
    if (n->type == PinkNoise)
 8025370:	d000      	beq.n	8025374 <tNoise_tick+0x20>
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 8025372:	bd10      	pop	{r4, pc}
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8025374:	eddf 7a18 	vldr	s15, [pc, #96]	; 80253d8 <tNoise_tick+0x84>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8025378:	eddf 6a18 	vldr	s13, [pc, #96]	; 80253dc <tNoise_tick+0x88>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 802537c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8025380:	ed94 5a02 	vldr	s10, [r4, #8]
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8025384:	ee60 6a26 	vmul.f32	s13, s0, s13
 8025388:	edd4 5a03 	vldr	s11, [r4, #12]
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 802538c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80253e0 <tNoise_tick+0x8c>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8025390:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80253e4 <tNoise_tick+0x90>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8025394:	eee5 7a07 	vfma.f32	s15, s10, s14
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8025398:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80253e8 <tNoise_tick+0x94>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 802539c:	eee5 6a86 	vfma.f32	s13, s11, s12
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 80253a0:	edd4 4a04 	vldr	s9, [r4, #16]
 80253a4:	ee20 7a07 	vmul.f32	s14, s0, s14
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 80253a8:	eddf 5a10 	vldr	s11, [pc, #64]	; 80253ec <tNoise_tick+0x98>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 80253ac:	ed9f 5a10 	vldr	s10, [pc, #64]	; 80253f0 <tNoise_tick+0x9c>
        return (tmp * 0.05f);
 80253b0:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80253f4 <tNoise_tick+0xa0>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 80253b4:	eea4 7a85 	vfma.f32	s14, s9, s10
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 80253b8:	edc4 7a02 	vstr	s15, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 80253bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 80253c0:	edc4 6a03 	vstr	s13, [r4, #12]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 80253c4:	eee0 7a25 	vfma.f32	s15, s0, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 80253c8:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 80253cc:	ee37 0a87 	vadd.f32	s0, s15, s14
        return (tmp * 0.05f);
 80253d0:	ee20 0a06 	vmul.f32	s0, s0, s12
}
 80253d4:	bd10      	pop	{r4, pc}
 80253d6:	bf00      	nop
 80253d8:	3dcad8a1 	.word	0x3dcad8a1
 80253dc:	3e97d0ff 	.word	0x3e97d0ff
 80253e0:	3f7f65fe 	.word	0x3f7f65fe
 80253e4:	3f76872b 	.word	0x3f76872b
 80253e8:	3f86be97 	.word	0x3f86be97
 80253ec:	3e3d3c36 	.word	0x3e3d3c36
 80253f0:	3f11eb85 	.word	0x3f11eb85
 80253f4:	3d4ccccd 	.word	0x3d4ccccd

080253f8 <tComplexLivingString_initToPool>:
}

void    tComplexLivingString_initToPool    (tComplexLivingString* const pl, float freq, float pickPos, float prepPos, float prepIndex,
                                     float dampFreq, float decay, float targetLev, float levSmoothFactor,
                                     float levStrength, int levMode, tMempool* const mp)
{
 80253f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253fc:	ed2d 8b0c 	vpush	{d8-d13}
 8025400:	b083      	sub	sp, #12
    _tMempool* m = *mp;
 8025402:	f8d2 8000 	ldr.w	r8, [r2]
{
 8025406:	4606      	mov	r6, r0
    _tComplexLivingString* p = *pl = (_tComplexLivingString*) mpool_alloc(sizeof(_tComplexLivingString), m);
 8025408:	2070      	movs	r0, #112	; 0x70
{
 802540a:	9100      	str	r1, [sp, #0]
    _tComplexLivingString* p = *pl = (_tComplexLivingString*) mpool_alloc(sizeof(_tComplexLivingString), m);
 802540c:	4641      	mov	r1, r8
{
 802540e:	eef0 8a42 	vmov.f32	s17, s4
 8025412:	4615      	mov	r5, r2
 8025414:	eef0 9a41 	vmov.f32	s19, s2
    p->mempool = m;

    p->curr=0.0f;
    tExpSmooth_initToPool(&p->wlSmooth, leaf.sampleRate/freq, 0.01, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8025418:	4f86      	ldr	r7, [pc, #536]	; (8025634 <tComplexLivingString_initToPool+0x23c>)
{
 802541a:	eeb0 ba43 	vmov.f32	s22, s6
    tExpSmooth_initToPool(&p->wlSmooth, leaf.sampleRate/freq, 0.01, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 802541e:	ed9f aa86 	vldr	s20, [pc, #536]	; 8025638 <tComplexLivingString_initToPool+0x240>
{
 8025422:	eef0 ba63 	vmov.f32	s23, s7
    p->curr=0.0f;
 8025426:	eddf ca85 	vldr	s25, [pc, #532]	; 802563c <tComplexLivingString_initToPool+0x244>
{
 802542a:	eeb0 ca44 	vmov.f32	s24, s8
 802542e:	eeb0 da61 	vmov.f32	s26, s3
 8025432:	eef0 da62 	vmov.f32	s27, s5
 8025436:	eef0 aa40 	vmov.f32	s21, s0
 802543a:	eeb0 9a60 	vmov.f32	s18, s1
    _tComplexLivingString* p = *pl = (_tComplexLivingString*) mpool_alloc(sizeof(_tComplexLivingString), m);
 802543e:	f7ff f99f 	bl	8024780 <mpool_alloc>
 8025442:	4604      	mov	r4, r0
 8025444:	6030      	str	r0, [r6, #0]
    tExpSmooth_initToPool(&p->wlSmooth, leaf.sampleRate/freq, 0.01, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8025446:	4629      	mov	r1, r5
 8025448:	eef0 0a4a 	vmov.f32	s1, s20
    p->mempool = m;
 802544c:	f8c4 8000 	str.w	r8, [r4]
    tExpSmooth_initToPool(&p->wlSmooth, leaf.sampleRate/freq, 0.01, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8025450:	3064      	adds	r0, #100	; 0x64
 8025452:	ed97 0a00 	vldr	s0, [r7]
 8025456:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    p->curr=0.0f;
 802545a:	edc4 ca0a 	vstr	s25, [r4, #40]	; 0x28
    tComplexLivingString_setPickPos(pl, pickPos);
    tComplexLivingString_setPrepPos(pl, prepPos);

    p->prepPos=prepPos;
    p->pickPos=pickPos;
    tLinearDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 802545e:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
    tExpSmooth_initToPool(&p->wlSmooth, leaf.sampleRate/freq, 0.01, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8025462:	ee80 0a2a 	vdiv.f32	s0, s0, s21
    tLinearDelay_initToPool(&p->delMF,p->waveLengthInSamples, 2400, mp);
 8025466:	f104 0a34 	add.w	sl, r4, #52	; 0x34
    tExpSmooth_initToPool(&p->wlSmooth, leaf.sampleRate/freq, 0.01, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 802546a:	f7fd fab9 	bl	80229e0 <tExpSmooth_initToPool>
void     tComplexLivingString_setFreq(tComplexLivingString* const pl, float freq)
{    // NOTE: It is faster to set wavelength in samples directly
    _tComplexLivingString* p = *pl;
    if (freq<20.0f) freq=20.0f;
    else if (freq>10000.0f) freq=10000.0f;
    p->waveLengthInSamples = leaf.sampleRate/freq;
 802546e:	ed97 7a00 	vldr	s14, [r7]
 8025472:	eddf 7a73 	vldr	s15, [pc, #460]	; 8025640 <tComplexLivingString_initToPool+0x248>
    tLinearDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
 8025476:	f104 0240 	add.w	r2, r4, #64	; 0x40
    _tComplexLivingString* p = *pl;
 802547a:	6833      	ldr	r3, [r6, #0]
    tLinearDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
 802547c:	f104 0930 	add.w	r9, r4, #48	; 0x30
    p->waveLengthInSamples = leaf.sampleRate/freq;
 8025480:	feca 7ae7 	vminnm.f32	s15, s21, s15
    tLinearDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
 8025484:	9201      	str	r2, [sp, #4]
    p->waveLengthInSamples = leaf.sampleRate/freq;
 8025486:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 802548a:	f103 0064 	add.w	r0, r3, #100	; 0x64
    tLinearDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
 802548e:	f104 083c 	add.w	r8, r4, #60	; 0x3c
    tLinearDelay_initToPool(&p->delMB,p->waveLengthInSamples, 2400, mp);
 8025492:	f104 0738 	add.w	r7, r4, #56	; 0x38
    p->waveLengthInSamples = leaf.sampleRate/freq;
 8025496:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 802549a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 802549e:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 80254a2:	f7fd fad9 	bl	8022a58 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&p->pickPosSmooth, pickPos, 0.01f, mp); // smoother for pick position
 80254a6:	4629      	mov	r1, r5
 80254a8:	eef0 0a4a 	vmov.f32	s1, s20
 80254ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80254b0:	eeb0 0a49 	vmov.f32	s0, s18
    p->freq = freq;
 80254b4:	edc4 aa01 	vstr	s21, [r4, #4]
    tExpSmooth_initToPool(&p->pickPosSmooth, pickPos, 0.01f, mp); // smoother for pick position
 80254b8:	f7fd fa92 	bl	80229e0 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->prepPosSmooth, prepPos, 0.01f, mp); // smoother for pick position
 80254bc:	eef0 0a4a 	vmov.f32	s1, s20
 80254c0:	4629      	mov	r1, r5
 80254c2:	eeb0 0a69 	vmov.f32	s0, s19
 80254c6:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80254ca:	f7fd fa89 	bl	80229e0 <tExpSmooth_initToPool>
 80254ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tComplexLivingString_setPickPos(tComplexLivingString* const pl, float pickPos)
{    // between 0 and 1
    _tComplexLivingString* p = *pl;
 80254d2:	6833      	ldr	r3, [r6, #0]
 80254d4:	fe89 0a40 	vminnm.f32	s0, s18, s0
    if (pickPos<0.5f) pickPos=0.5f;
    else if (pickPos>1.f) pickPos=1.f;
    p->pickPos = pickPos;
    tExpSmooth_setDest(&p->pickPosSmooth, p->pickPos);
 80254d8:	f103 0068 	add.w	r0, r3, #104	; 0x68
 80254dc:	fe80 0a08 	vmaxnm.f32	s0, s0, s16
    p->pickPos = pickPos;
 80254e0:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->pickPosSmooth, p->pickPos);
 80254e4:	f7fd fab8 	bl	8022a58 <tExpSmooth_setDest>
}

void     tComplexLivingString_setPrepPos(tComplexLivingString* const pl, float prepPos)
{    // between 0 and 1
    _tComplexLivingString* p = *pl;
 80254e8:	6833      	ldr	r3, [r6, #0]
 80254ea:	fe89 0ac8 	vminnm.f32	s0, s19, s16
 80254ee:	fe80 0a2c 	vmaxnm.f32	s0, s0, s25
    if (prepPos<0.f) prepPos=0.f;
    else if (prepPos>0.5f) prepPos=0.5f;
    p->prepPos = prepPos;
    tExpSmooth_setDest(&p->prepPosSmooth, p->prepPos);
 80254f2:	f103 006c 	add.w	r0, r3, #108	; 0x6c
    p->prepPos = prepPos;
 80254f6:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prepPosSmooth, p->prepPos);
 80254fa:	f7fd faad 	bl	8022a58 <tExpSmooth_setDest>
    tLinearDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 80254fe:	4658      	mov	r0, fp
 8025500:	462a      	mov	r2, r5
 8025502:	ed94 0a02 	vldr	s0, [r4, #8]
    p->prepPos=prepPos;
 8025506:	edc4 9a04 	vstr	s19, [r4, #16]
    tLinearDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 802550a:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->pickPos=pickPos;
 802550e:	ed84 9a03 	vstr	s18, [r4, #12]
    tLinearDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 8025512:	f7fa f9f9 	bl	801f908 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delMF,p->waveLengthInSamples, 2400, mp);
 8025516:	4650      	mov	r0, sl
 8025518:	462a      	mov	r2, r5
 802551a:	ed94 0a02 	vldr	s0, [r4, #8]
 802551e:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8025522:	f7fa f9f1 	bl	801f908 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
 8025526:	4648      	mov	r0, r9
 8025528:	462a      	mov	r2, r5
 802552a:	ed94 0a02 	vldr	s0, [r4, #8]
 802552e:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8025532:	f7fa f9e9 	bl	801f908 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
 8025536:	4640      	mov	r0, r8
 8025538:	462a      	mov	r2, r5
 802553a:	ed94 0a02 	vldr	s0, [r4, #8]
 802553e:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8025542:	f7fa f9e1 	bl	801f908 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delMB,p->waveLengthInSamples, 2400, mp);
 8025546:	4638      	mov	r0, r7
 8025548:	462a      	mov	r2, r5
 802554a:	ed94 0a02 	vldr	s0, [r4, #8]
 802554e:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8025552:	f7fa f9d9 	bl	801f908 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
 8025556:	9e01      	ldr	r6, [sp, #4]
 8025558:	462a      	mov	r2, r5
 802555a:	ed94 0a02 	vldr	s0, [r4, #8]
 802555e:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8025562:	4630      	mov	r0, r6
 8025564:	f7fa f9d0 	bl	801f908 <tLinearDelay_initToPool>
    tLinearDelay_clear(&p->delLF);
 8025568:	4658      	mov	r0, fp
 802556a:	f7fa fa4f 	bl	801fa0c <tLinearDelay_clear>
    tLinearDelay_clear(&p->delMF);
 802556e:	4650      	mov	r0, sl
 8025570:	f7fa fa4c 	bl	801fa0c <tLinearDelay_clear>
    tLinearDelay_clear(&p->delUF);
 8025574:	4648      	mov	r0, r9
 8025576:	f7fa fa49 	bl	801fa0c <tLinearDelay_clear>
    tLinearDelay_clear(&p->delUB);
 802557a:	4640      	mov	r0, r8
 802557c:	f7fa fa46 	bl	801fa0c <tLinearDelay_clear>
    tLinearDelay_clear(&p->delMB);
 8025580:	4638      	mov	r0, r7
 8025582:	f7fa fa43 	bl	801fa0c <tLinearDelay_clear>
    tLinearDelay_clear(&p->delLB);
 8025586:	4630      	mov	r0, r6
 8025588:	f7fa fa40 	bl	801fa0c <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 802558c:	4629      	mov	r1, r5
 802558e:	eeb0 0a68 	vmov.f32	s0, s17
 8025592:	f104 0044 	add.w	r0, r4, #68	; 0x44
    p->dampFreq = dampFreq;
 8025596:	edc4 8a07 	vstr	s17, [r4, #28]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 802559a:	f7fd fb31 	bl	8022c00 <tOnePole_initToPool>
    tOnePole_initToPool(&p->nutFilter, dampFreq, mp);
 802559e:	4629      	mov	r1, r5
 80255a0:	eeb0 0a68 	vmov.f32	s0, s17
 80255a4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80255a8:	f7fd fb2a 	bl	8022c00 <tOnePole_initToPool>
    tOnePole_initToPool(&p->prepFilterU, dampFreq, mp);
 80255ac:	4629      	mov	r1, r5
 80255ae:	eeb0 0a68 	vmov.f32	s0, s17
 80255b2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80255b6:	f7fd fb23 	bl	8022c00 <tOnePole_initToPool>
    tOnePole_initToPool(&p->prepFilterL, dampFreq, mp);
 80255ba:	4629      	mov	r1, r5
 80255bc:	eeb0 0a68 	vmov.f32	s0, s17
 80255c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80255c4:	f7fd fb1c 	bl	8022c00 <tOnePole_initToPool>
    tHighpass_initToPool(&p->DCblockerU,13, mp);
 80255c8:	4629      	mov	r1, r5
 80255ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80255ce:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 80255d2:	f7fd fd4f 	bl	8023074 <tHighpass_initToPool>
    tHighpass_initToPool(&p->DCblockerL,13, mp);
 80255d6:	4629      	mov	r1, r5
 80255d8:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80255dc:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 80255e0:	f7fd fd48 	bl	8023074 <tHighpass_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
 80255e4:	462a      	mov	r2, r5
 80255e6:	9900      	ldr	r1, [sp, #0]
 80255e8:	eeb0 1a4c 	vmov.f32	s2, s24
 80255ec:	eef0 0a6b 	vmov.f32	s1, s23
 80255f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80255f4:	eeb0 0a4b 	vmov.f32	s0, s22
    p->decay=decay;
 80255f8:	edc4 da08 	vstr	s27, [r4, #32]
    p->prepIndex = prepIndex;
 80255fc:	ed84 da06 	vstr	s26, [r4, #24]
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
 8025600:	f7fb f812 	bl	8020628 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevL, targetLev, levSmoothFactor, levStrength, levMode, mp);
 8025604:	462a      	mov	r2, r5
 8025606:	9900      	ldr	r1, [sp, #0]
 8025608:	eeb0 1a4c 	vmov.f32	s2, s24
 802560c:	eef0 0a6b 	vmov.f32	s1, s23
 8025610:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8025614:	eeb0 0a4b 	vmov.f32	s0, s22
 8025618:	f7fb f806 	bl	8020628 <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
 802561c:	eddd 7a00 	vldr	s15, [sp]
 8025620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025624:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 8025628:	b003      	add	sp, #12
 802562a:	ecbd 8b0c 	vpop	{d8-d13}
 802562e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025632:	bf00      	nop
 8025634:	200194a0 	.word	0x200194a0
 8025638:	3c23d70a 	.word	0x3c23d70a
 802563c:	00000000 	.word	0x00000000
 8025640:	461c4000 	.word	0x461c4000

08025644 <tComplexLivingString_init>:
    tComplexLivingString_initToPool(pl, freq, pickPos, prepPos, prepIndex, dampFreq, decay, targetLev, levSmoothFactor, levStrength, levMode, &leaf.mempool);
 8025644:	4a01      	ldr	r2, [pc, #4]	; (802564c <tComplexLivingString_init+0x8>)
 8025646:	f7ff bed7 	b.w	80253f8 <tComplexLivingString_initToPool>
 802564a:	bf00      	nop
 802564c:	200194b8 	.word	0x200194b8

08025650 <tComplexLivingString_free>:
{
 8025650:	b510      	push	{r4, lr}
    _tComplexLivingString* p = *pl;
 8025652:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_free(&p->wlSmooth);
 8025654:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8025658:	f7fd f9e8 	bl	8022a2c <tExpSmooth_free>
    tExpSmooth_free(&p->pickPosSmooth);
 802565c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8025660:	f7fd f9e4 	bl	8022a2c <tExpSmooth_free>
    tExpSmooth_free(&p->prepPosSmooth);
 8025664:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8025668:	f7fd f9e0 	bl	8022a2c <tExpSmooth_free>
    tLinearDelay_free(&p->delLF);
 802566c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8025670:	f7fa f9c0 	bl	801f9f4 <tLinearDelay_free>
    tLinearDelay_free(&p->delMF);
 8025674:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8025678:	f7fa f9bc 	bl	801f9f4 <tLinearDelay_free>
    tLinearDelay_free(&p->delUF);
 802567c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8025680:	f7fa f9b8 	bl	801f9f4 <tLinearDelay_free>
    tLinearDelay_free(&p->delUB);
 8025684:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8025688:	f7fa f9b4 	bl	801f9f4 <tLinearDelay_free>
    tLinearDelay_free(&p->delMB);
 802568c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8025690:	f7fa f9b0 	bl	801f9f4 <tLinearDelay_free>
    tLinearDelay_free(&p->delLB);
 8025694:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8025698:	f7fa f9ac 	bl	801f9f4 <tLinearDelay_free>
    tOnePole_free(&p->bridgeFilter);
 802569c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80256a0:	f7fd fae4 	bl	8022c6c <tOnePole_free>
    tOnePole_free(&p->nutFilter);
 80256a4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80256a8:	f7fd fae0 	bl	8022c6c <tOnePole_free>
    tOnePole_free(&p->prepFilterU);
 80256ac:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80256b0:	f7fd fadc 	bl	8022c6c <tOnePole_free>
    tOnePole_free(&p->prepFilterL);
 80256b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80256b8:	f7fd fad8 	bl	8022c6c <tOnePole_free>
    tHighpass_free(&p->DCblockerU);
 80256bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80256c0:	f7fd fcf8 	bl	80230b4 <tHighpass_free>
    tHighpass_free(&p->DCblockerL);
 80256c4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80256c8:	f7fd fcf4 	bl	80230b4 <tHighpass_free>
    tFeedbackLeveler_free(&p->fbLevU);
 80256cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80256d0:	f7fa ffd2 	bl	8020678 <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&p->fbLevL);
 80256d4:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80256d8:	f7fa ffce 	bl	8020678 <tFeedbackLeveler_free>
    mpool_free((char*)p, p->mempool);
 80256dc:	6821      	ldr	r1, [r4, #0]
 80256de:	4620      	mov	r0, r4
}
 80256e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 80256e4:	f7ff b8f4 	b.w	80248d0 <mpool_free>

080256e8 <tComplexLivingString_setFreq>:
    p->waveLengthInSamples = leaf.sampleRate/freq;
 80256e8:	4b09      	ldr	r3, [pc, #36]	; (8025710 <tComplexLivingString_setFreq+0x28>)
 80256ea:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80256ee:	eddf 7a09 	vldr	s15, [pc, #36]	; 8025714 <tComplexLivingString_setFreq+0x2c>
 80256f2:	ed93 7a00 	vldr	s14, [r3]
 80256f6:	fec0 7a67 	vminnm.f32	s15, s0, s15
 80256fa:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80256fe:	ee87 0a27 	vdiv.f32	s0, s14, s15
    _tComplexLivingString* p = *pl;
 8025702:	6803      	ldr	r3, [r0, #0]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8025704:	f103 0064 	add.w	r0, r3, #100	; 0x64
    p->waveLengthInSamples = leaf.sampleRate/freq;
 8025708:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 802570c:	f7fd b9a4 	b.w	8022a58 <tExpSmooth_setDest>
 8025710:	200194a0 	.word	0x200194a0
 8025714:	461c4000 	.word	0x461c4000

08025718 <tComplexLivingString_setPickPos>:
{    // between 0 and 1
 8025718:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tComplexLivingString* p = *pl;
 802571c:	6803      	ldr	r3, [r0, #0]
 802571e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    tExpSmooth_setDest(&p->pickPosSmooth, p->pickPos);
 8025722:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8025726:	fe80 0a67 	vminnm.f32	s0, s0, s15
 802572a:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    p->pickPos = pickPos;
 802572e:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->pickPosSmooth, p->pickPos);
 8025732:	f7fd b991 	b.w	8022a58 <tExpSmooth_setDest>
 8025736:	bf00      	nop

08025738 <tComplexLivingString_setPrepPos>:
{    // between 0 and 1
 8025738:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    _tComplexLivingString* p = *pl;
 802573c:	6803      	ldr	r3, [r0, #0]
 802573e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8025758 <tComplexLivingString_setPrepPos+0x20>
    tExpSmooth_setDest(&p->prepPosSmooth, p->prepPos);
 8025742:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8025746:	fe80 0a67 	vminnm.f32	s0, s0, s15
 802574a:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    p->prepPos = prepPos;
 802574e:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prepPosSmooth, p->prepPos);
 8025752:	f7fd b981 	b.w	8022a58 <tExpSmooth_setDest>
 8025756:	bf00      	nop
 8025758:	00000000 	.word	0x00000000

0802575c <tComplexLivingString_setPrepIndex>:
}

void     tComplexLivingString_setPrepIndex(tComplexLivingString* const pl, float prepIndex)
{    // between 0 and 1
 802575c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tComplexLivingString* p = *pl;
 8025760:	6803      	ldr	r3, [r0, #0]
    if (prepIndex<0.f) prepIndex=0.f;
    else if (prepIndex>1.f) prepIndex=1.f;
    p->prepIndex = prepIndex;
 8025762:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8025774 <tComplexLivingString_setPrepIndex+0x18>
 8025766:	fe80 0a67 	vminnm.f32	s0, s0, s15
 802576a:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 802576e:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8025772:	4770      	bx	lr
 8025774:	00000000 	.word	0x00000000

08025778 <tComplexLivingString_setDampFreq>:

void     tComplexLivingString_setDampFreq(tComplexLivingString* const pl, float dampFreq)
{
 8025778:	b510      	push	{r4, lr}
 802577a:	ed2d 8b02 	vpush	{d8}
 802577e:	eeb0 8a40 	vmov.f32	s16, s0
    _tComplexLivingString* p = *pl;
 8025782:	6804      	ldr	r4, [r0, #0]
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 8025784:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8025788:	f7fd fa74 	bl	8022c74 <tOnePole_setFreq>
    tOnePole_setFreq(&p->nutFilter, dampFreq);
 802578c:	eeb0 0a48 	vmov.f32	s0, s16
 8025790:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8025794:	f7fd fa6e 	bl	8022c74 <tOnePole_setFreq>
    tOnePole_setFreq(&p->prepFilterU, dampFreq);
 8025798:	eeb0 0a48 	vmov.f32	s0, s16
 802579c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80257a0:	f7fd fa68 	bl	8022c74 <tOnePole_setFreq>
    tOnePole_setFreq(&p->prepFilterL, dampFreq);
 80257a4:	eeb0 0a48 	vmov.f32	s0, s16
 80257a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
}
 80257ac:	ecbd 8b02 	vpop	{d8}
 80257b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tOnePole_setFreq(&p->prepFilterL, dampFreq);
 80257b4:	f7fd ba5e 	b.w	8022c74 <tOnePole_setFreq>

080257b8 <tComplexLivingString_setDecay>:

void     tComplexLivingString_setDecay(tComplexLivingString* const pl, float decay)
{
    _tComplexLivingString* p = *pl;
 80257b8:	6803      	ldr	r3, [r0, #0]
    p->decay=decay;
 80257ba:	ed83 0a08 	vstr	s0, [r3, #32]
}
 80257be:	4770      	bx	lr

080257c0 <tComplexLivingString_setTargetLev>:

void     tComplexLivingString_setTargetLev(tComplexLivingString* const pl, float targetLev)
{
 80257c0:	b510      	push	{r4, lr}
 80257c2:	ed2d 8b02 	vpush	{d8}
 80257c6:	eeb0 8a40 	vmov.f32	s16, s0
    _tComplexLivingString* p = *pl;
 80257ca:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLevU, targetLev);
 80257cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80257d0:	f7fa ff8a 	bl	80206e8 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
 80257d4:	eeb0 0a48 	vmov.f32	s0, s16
 80257d8:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
 80257dc:	ecbd 8b02 	vpop	{d8}
 80257e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
 80257e4:	f7fa bf80 	b.w	80206e8 <tFeedbackLeveler_setTargetLevel>

080257e8 <tComplexLivingString_setLevMode>:
    tFeedbackLeveler_setStrength(&p->fbLevU, levStrength);
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
}

void     tComplexLivingString_setLevMode(tComplexLivingString* const pl, int levMode)
{
 80257e8:	b510      	push	{r4, lr}
    _tComplexLivingString* p = *pl;
 80257ea:	6804      	ldr	r4, [r0, #0]
{
 80257ec:	b082      	sub	sp, #8
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
 80257ee:	f104 005c 	add.w	r0, r4, #92	; 0x5c
{
 80257f2:	9101      	str	r1, [sp, #4]
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
 80257f4:	f7fa ff4c 	bl	8020690 <tFeedbackLeveler_setMode>
    tFeedbackLeveler_setMode(&p->fbLevL, levMode);
 80257f8:	9901      	ldr	r1, [sp, #4]
 80257fa:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80257fe:	f7fa ff47 	bl	8020690 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 8025802:	eddd 7a01 	vldr	s15, [sp, #4]
 8025806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802580a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 802580e:	b002      	add	sp, #8
 8025810:	bd10      	pop	{r4, pc}
 8025812:	bf00      	nop

08025814 <tComplexLivingString_tick>:

float   tComplexLivingString_tick(tComplexLivingString* const pl, float input)
{
 8025814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025818:	ed2d 8b08 	vpush	{d8-d11}
    _tComplexLivingString* p = *pl;
 802581c:	6804      	ldr	r4, [r0, #0]
{
 802581e:	eef0 8a40 	vmov.f32	s17, s0

    // from pickPos upwards=forwards
    float fromLF=tLinearDelay_tickOut(&p->delLF);
 8025822:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
    float fromMF=tLinearDelay_tickOut(&p->delMF);
 8025826:	f104 0834 	add.w	r8, r4, #52	; 0x34
    float fromUF=tLinearDelay_tickOut(&p->delUF);
 802582a:	f104 0630 	add.w	r6, r4, #48	; 0x30
    float fromUB=tLinearDelay_tickOut(&p->delUB);
 802582e:	f104 053c 	add.w	r5, r4, #60	; 0x3c
    float fromLF=tLinearDelay_tickOut(&p->delLF);
 8025832:	4650      	mov	r0, sl
    float fromMB=tLinearDelay_tickOut(&p->delMB);
 8025834:	f104 0738 	add.w	r7, r4, #56	; 0x38
    float fromLF=tLinearDelay_tickOut(&p->delLF);
 8025838:	f7fa f944 	bl	801fac4 <tLinearDelay_tickOut>
    float fromMF=tLinearDelay_tickOut(&p->delMF);
 802583c:	4640      	mov	r0, r8
    float fromLF=tLinearDelay_tickOut(&p->delLF);
 802583e:	eeb0 9a40 	vmov.f32	s18, s0
    float fromMF=tLinearDelay_tickOut(&p->delMF);
 8025842:	f7fa f93f 	bl	801fac4 <tLinearDelay_tickOut>
    float fromUF=tLinearDelay_tickOut(&p->delUF);
 8025846:	4630      	mov	r0, r6
    float fromLB=tLinearDelay_tickOut(&p->delLB);
 8025848:	f104 0940 	add.w	r9, r4, #64	; 0x40
    float fromMF=tLinearDelay_tickOut(&p->delMF);
 802584c:	eef0 aa40 	vmov.f32	s21, s0
    float fromUF=tLinearDelay_tickOut(&p->delUF);
 8025850:	f7fa f938 	bl	801fac4 <tLinearDelay_tickOut>
    float fromUB=tLinearDelay_tickOut(&p->delUB);
 8025854:	4628      	mov	r0, r5
    float fromUF=tLinearDelay_tickOut(&p->delUF);
 8025856:	eef0 9a40 	vmov.f32	s19, s0
    float fromUB=tLinearDelay_tickOut(&p->delUB);
 802585a:	f7fa f933 	bl	801fac4 <tLinearDelay_tickOut>
    float fromMB=tLinearDelay_tickOut(&p->delMB);
 802585e:	4638      	mov	r0, r7
    float fromUB=tLinearDelay_tickOut(&p->delUB);
 8025860:	eeb0 aa40 	vmov.f32	s20, s0
    float fromMB=tLinearDelay_tickOut(&p->delMB);
 8025864:	f7fa f92e 	bl	801fac4 <tLinearDelay_tickOut>
    float fromLB=tLinearDelay_tickOut(&p->delLB);
 8025868:	4648      	mov	r0, r9
    float fromMB=tLinearDelay_tickOut(&p->delMB);
 802586a:	eef0 ba40 	vmov.f32	s23, s0
    float fromLB=tLinearDelay_tickOut(&p->delLB);
 802586e:	f7fa f929 	bl	801fac4 <tLinearDelay_tickOut>

    // into upper part of string, from bridge, going backwards
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1)*tHighpass_tick(&p->DCblockerU, tOnePole_tick(&p->bridgeFilter, fromUF)));
 8025872:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    float fromLB=tLinearDelay_tickOut(&p->delLB);
 8025876:	eeb0 ba40 	vmov.f32	s22, s0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1)*tHighpass_tick(&p->DCblockerU, tOnePole_tick(&p->bridgeFilter, fromUF)));
 802587a:	f104 0b5c 	add.w	fp, r4, #92	; 0x5c
 802587e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8025882:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8025886:	eeb0 0a69 	vmov.f32	s0, s19
 802588a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802588e:	bf14      	ite	ne
 8025890:	eeb7 8a00 	vmovne.f32	s16, #112	; 0x3f800000  1.0
 8025894:	ed94 8a08 	vldreq	s16, [r4, #32]
 8025898:	f7fd fa08 	bl	8022cac <tOnePole_tick>
 802589c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80258a0:	f7fd fc1c 	bl	80230dc <tHighpass_tick>
 80258a4:	4658      	mov	r0, fp
 80258a6:	ee20 0a08 	vmul.f32	s0, s0, s16
    float fromLowerPrep=-tOnePole_tick(&p->prepFilterL, fromLF);
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromMB;
    tLinearDelay_tickIn(&p->delLB, intoLower);

    // into lower part of string, from nut, going forwards toward prep position
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tOnePole_tick(&p->nutFilter, fromLB)));
 80258aa:	f104 0b60 	add.w	fp, r4, #96	; 0x60
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1)*tHighpass_tick(&p->DCblockerU, tOnePole_tick(&p->bridgeFilter, fromUF)));
 80258ae:	f7fa fef3 	bl	8020698 <tFeedbackLeveler_tick>
 80258b2:	eef1 9a40 	vneg.f32	s19, s0
    tLinearDelay_tickIn(&p->delUB, fromBridge);
 80258b6:	4628      	mov	r0, r5
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromMB;
 80258b8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    tLinearDelay_tickIn(&p->delUB, fromBridge);
 80258bc:	eeb0 0a69 	vmov.f32	s0, s19
 80258c0:	f7fa f8ec 	bl	801fa9c <tLinearDelay_tickIn>
    tLinearDelay_tickIn(&p->delMB, fromUB+input);
 80258c4:	ee3a 0a28 	vadd.f32	s0, s20, s17
 80258c8:	4638      	mov	r0, r7
 80258ca:	f7fa f8e7 	bl	801fa9c <tLinearDelay_tickIn>
    float fromLowerPrep=-tOnePole_tick(&p->prepFilterL, fromLF);
 80258ce:	eeb0 0a49 	vmov.f32	s0, s18
 80258d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80258d6:	f7fd f9e9 	bl	8022cac <tOnePole_tick>
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromMB;
 80258da:	ed94 7a06 	vldr	s14, [r4, #24]
    tLinearDelay_tickIn(&p->delLB, intoLower);
 80258de:	4648      	mov	r0, r9
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromMB;
 80258e0:	ee78 7a47 	vsub.f32	s15, s16, s14
 80258e4:	ee67 7aab 	vmul.f32	s15, s15, s23
    tLinearDelay_tickIn(&p->delLB, intoLower);
 80258e8:	eee0 7a47 	vfms.f32	s15, s0, s14
 80258ec:	eeb0 0a67 	vmov.f32	s0, s15
 80258f0:	f7fa f8d4 	bl	801fa9c <tLinearDelay_tickIn>
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tOnePole_tick(&p->nutFilter, fromLB)));
 80258f4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80258f8:	eeb0 0a4b 	vmov.f32	s0, s22
 80258fc:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8025900:	eef5 7a40 	vcmp.f32	s15, #0.0
 8025904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025908:	bf08      	it	eq
 802590a:	ed94 8a08 	vldreq	s16, [r4, #32]
 802590e:	f7fd f9cd 	bl	8022cac <tOnePole_tick>
 8025912:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8025916:	f7fd fbe1 	bl	80230dc <tHighpass_tick>
 802591a:	4658      	mov	r0, fp
 802591c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8025920:	f7fa feba 	bl	8020698 <tFeedbackLeveler_tick>
    tLinearDelay_tickIn(&p->delLF, fromNut);
 8025924:	4650      	mov	r0, sl
 8025926:	eeb1 0a40 	vneg.f32	s0, s0
 802592a:	f7fa f8b7 	bl	801fa9c <tLinearDelay_tickIn>

    // into middle part of string, from prep going toward pick position
    float fromUpperPrep=-tOnePole_tick(&p->prepFilterU, fromUB);
    float intoMiddle=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 802592e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    float fromUpperPrep=-tOnePole_tick(&p->prepFilterU, fromUB);
 8025932:	eeb0 0a4a 	vmov.f32	s0, s20
 8025936:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 802593a:	f7fd f9b7 	bl	8022cac <tOnePole_tick>
    float intoMiddle=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 802593e:	edd4 7a06 	vldr	s15, [r4, #24]

    //pick position, take input and add it into the waveguide, going to come out of middle segment
    tLinearDelay_tickIn(&p->delMF, intoMiddle + input);
 8025942:	4640      	mov	r0, r8
    float intoMiddle=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 8025944:	ee38 7a67 	vsub.f32	s14, s16, s15
    tLinearDelay_tickIn(&p->delMF, intoMiddle + input);
 8025948:	eee7 8a09 	vfma.f32	s17, s14, s18
 802594c:	eee0 8a67 	vfms.f32	s17, s0, s15
 8025950:	eeb0 0a68 	vmov.f32	s0, s17
 8025954:	f7fa f8a2 	bl	801fa9c <tLinearDelay_tickIn>

    //take output of middle segment and put it into upper segment connecting to the bridge
    tLinearDelay_tickIn(&p->delUF, fromMF);
 8025958:	eeb0 0a6a 	vmov.f32	s0, s21
 802595c:	4630      	mov	r0, r6
 802595e:	f7fa f89d 	bl	801fa9c <tLinearDelay_tickIn>

    // update all delay lengths
    float pickP=tExpSmooth_tick(&p->pickPosSmooth);
 8025962:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8025966:	f7fd f881 	bl	8022a6c <tExpSmooth_tick>
    float prepP=tExpSmooth_tick(&p->prepPosSmooth);
 802596a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    float pickP=tExpSmooth_tick(&p->pickPosSmooth);
 802596e:	eeb0 9a40 	vmov.f32	s18, s0
    float prepP=tExpSmooth_tick(&p->prepPosSmooth);
 8025972:	f7fd f87b 	bl	8022a6c <tExpSmooth_tick>
 8025976:	eef0 8a40 	vmov.f32	s17, s0
    float wLen=tExpSmooth_tick(&p->wlSmooth);
 802597a:	f104 0064 	add.w	r0, r4, #100	; 0x64
 802597e:	f7fd f875 	bl	8022a6c <tExpSmooth_tick>
 8025982:	eef0 7a40 	vmov.f32	s15, s0

    float midLen = (pickP-prepP) * wLen; // the length between the pick and the prep;
    float lowLen = prepP*wLen; // the length from prep to nut
    float upLen = (1.0f-pickP)*wLen; // the length from pick to bridge
 8025986:	ee38 8a49 	vsub.f32	s16, s16, s18


    tLinearDelay_setDelay(&p->delLF, lowLen);
 802598a:	4650      	mov	r0, sl
    float lowLen = prepP*wLen; // the length from prep to nut
 802598c:	ee28 aa80 	vmul.f32	s20, s17, s0
    float midLen = (pickP-prepP) * wLen; // the length between the pick and the prep;
 8025990:	ee79 8a68 	vsub.f32	s17, s18, s17
    float upLen = (1.0f-pickP)*wLen; // the length from pick to bridge
 8025994:	ee28 8a00 	vmul.f32	s16, s16, s0
    tLinearDelay_setDelay(&p->delLF, lowLen);
 8025998:	eeb0 0a4a 	vmov.f32	s0, s20
    float midLen = (pickP-prepP) * wLen; // the length between the pick and the prep;
 802599c:	ee68 8aa7 	vmul.f32	s17, s17, s15
    tLinearDelay_setDelay(&p->delLF, lowLen);
 80259a0:	f7fa f8ba 	bl	801fb18 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delLB, lowLen);
 80259a4:	eeb0 0a4a 	vmov.f32	s0, s20
 80259a8:	4648      	mov	r0, r9
 80259aa:	f7fa f8b5 	bl	801fb18 <tLinearDelay_setDelay>

    tLinearDelay_setDelay(&p->delMF, midLen);
 80259ae:	4640      	mov	r0, r8
 80259b0:	eeb0 0a68 	vmov.f32	s0, s17
 80259b4:	f7fa f8b0 	bl	801fb18 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delMB, midLen);
 80259b8:	eeb0 0a68 	vmov.f32	s0, s17
 80259bc:	4638      	mov	r0, r7
 80259be:	f7fa f8ab 	bl	801fb18 <tLinearDelay_setDelay>

    tLinearDelay_setDelay(&p->delUF, upLen);
 80259c2:	eeb0 0a48 	vmov.f32	s0, s16
 80259c6:	4630      	mov	r0, r6
 80259c8:	f7fa f8a6 	bl	801fb18 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delUB, upLen);
 80259cc:	eeb0 0a48 	vmov.f32	s0, s16
 80259d0:	4628      	mov	r0, r5
 80259d2:	f7fa f8a1 	bl	801fb18 <tLinearDelay_setDelay>

    //update this to allow pickup position variation
    p->curr = fromBridge;
    return p->curr;
}
 80259d6:	eeb0 0a69 	vmov.f32	s0, s19
    p->curr = fromBridge;
 80259da:	edc4 9a0a 	vstr	s19, [r4, #40]	; 0x28
}
 80259de:	ecbd 8b08 	vpop	{d8-d11}
 80259e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259e6:	bf00      	nop

080259e8 <tNReverb_initToPool>:
{
    tNReverb_initToPool(rev, t60, &leaf.mempool);
}

void    tNReverb_initToPool     (tNReverb* const rev, float t60, tMempool* const mp)
{
 80259e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259ec:	ed2d 8b06 	vpush	{d8-d10}
 80259f0:	eeb0 aa40 	vmov.f32	s20, s0
 80259f4:	b095      	sub	sp, #84	; 0x54
    _tMempool* m = *mp;
 80259f6:	680c      	ldr	r4, [r1, #0]
{
 80259f8:	4605      	mov	r5, r0
 80259fa:	9101      	str	r1, [sp, #4]
 80259fc:	9002      	str	r0, [sp, #8]
    _tNReverb* r = *rev = (_tNReverb*) mpool_alloc(sizeof(_tNReverb), m);
 80259fe:	4621      	mov	r1, r4
 8025a00:	2074      	movs	r0, #116	; 0x74
 8025a02:	f7fe febd 	bl	8024780 <mpool_alloc>
    r->mempool = m;
    
    if (t60 <= 0.0f) t60 = 0.001f;
 8025a06:	eeb5 aac0 	vcmpe.f32	s20, #0.0
    _tNReverb* r = *rev = (_tNReverb*) mpool_alloc(sizeof(_tNReverb), m);
 8025a0a:	6028      	str	r0, [r5, #0]
 8025a0c:	4682      	mov	sl, r0
    r->mempool = m;
 8025a0e:	6004      	str	r4, [r0, #0]
    if (t60 <= 0.0f) t60 = 0.001f;
 8025a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a14:	f240 80c6 	bls.w	8025ba4 <tNReverb_initToPool+0x1bc>
 8025a18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8025a1c:	ee87 8a8a 	vdiv.f32	s16, s15, s20
    
    r->inv_441 = 1.0f/44100.0f;
    
    int lengths[15] = {1433, 1601, 1867, 2053, 2251, 2399, 347, 113, 37, 59, 53, 43, 37, 29, 19}; // Delay lengths for 44100 Hz sample rate.
    double scaler = leaf.sampleRate / 25641.0f;
 8025a20:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8025bd8 <tNReverb_initToPool+0x1f0>
    int lengths[15] = {1433, 1601, 1867, 2053, 2251, 2399, 347, 113, 37, 59, 53, 43, 37, 29, 19}; // Delay lengths for 44100 Hz sample rate.
 8025a24:	af05      	add	r7, sp, #20
 8025a26:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8025bdc <tNReverb_initToPool+0x1f4>
 8025a2a:	ac04      	add	r4, sp, #16
    double scaler = leaf.sampleRate / 25641.0f;
 8025a2c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8025bc0 <tNReverb_initToPool+0x1d8>
 8025a30:	f10d 0914 	add.w	r9, sp, #20
 8025a34:	edd8 7a00 	vldr	s15, [r8]
    int lengths[15] = {1433, 1601, 1867, 2053, 2251, 2399, 347, 113, 37, 59, 53, 43, 37, 29, 19}; // Delay lengths for 44100 Hz sample rate.
 8025a38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    double scaler = leaf.sampleRate / 25641.0f;
 8025a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
    int lengths[15] = {1433, 1601, 1867, 2053, 2251, 2399, 347, 113, 37, 59, 53, 43, 37, 29, 19}; // Delay lengths for 44100 Hz sample rate.
 8025a40:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8025a42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8025a46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025a4a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8025a4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8025a50:	ee17 ba90 	vmov	fp, s15
 8025a54:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    r->inv_441 = 1.0f/44100.0f;
 8025a56:	4b5b      	ldr	r3, [pc, #364]	; (8025bc4 <tNReverb_initToPool+0x1dc>)
    int lengths[15] = {1433, 1601, 1867, 2053, 2251, 2399, 347, 113, 37, 59, 53, 43, 37, 29, 19}; // Delay lengths for 44100 Hz sample rate.
 8025a58:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    r->inv_441 = 1.0f/44100.0f;
 8025a5c:	f8ca 3010 	str.w	r3, [sl, #16]
    int lengths[15] = {1433, 1601, 1867, 2053, 2251, 2399, 347, 113, 37, 59, 53, 43, 37, 29, 19}; // Delay lengths for 44100 Hz sample rate.
 8025a60:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    
    int delay, i;
    
    for (i=0; i < 15; i++)
    {
        delay = (int) scaler * lengths[i];
 8025a64:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8025a68:	fb05 f50b 	mul.w	r5, r5, fp
        if ( (delay & 1) == 0)
 8025a6c:	07eb      	lsls	r3, r5, #31
            delay++;
 8025a6e:	bf58      	it	pl
 8025a70:	3501      	addpl	r5, #1
 8025a72:	462e      	mov	r6, r5
 8025a74:	17ef      	asrs	r7, r5, #31
 8025a76:	e000      	b.n	8025a7a <tNReverb_initToPool+0x92>
        while ( !LEAF_isPrime(delay) )
            delay += 2;
 8025a78:	3502      	adds	r5, #2
        while ( !LEAF_isPrime(delay) )
 8025a7a:	4630      	mov	r0, r6
 8025a7c:	3602      	adds	r6, #2
 8025a7e:	4639      	mov	r1, r7
 8025a80:	f147 0700 	adc.w	r7, r7, #0
 8025a84:	f7fe fc9c 	bl	80243c0 <LEAF_isPrime>
 8025a88:	2800      	cmp	r0, #0
 8025a8a:	d0f5      	beq.n	8025a78 <tNReverb_initToPool+0x90>
    for (i=0; i < 15; i++)
 8025a8c:	ab13      	add	r3, sp, #76	; 0x4c
        lengths[i] = delay;
 8025a8e:	6025      	str	r5, [r4, #0]
    for (i=0; i < 15; i++)
 8025a90:	429c      	cmp	r4, r3
 8025a92:	d1e7      	bne.n	8025a64 <tNReverb_initToPool+0x7c>
 8025a94:	f10a 0750 	add.w	r7, sl, #80	; 0x50
 8025a98:	f10a 0668 	add.w	r6, sl, #104	; 0x68
 8025a9c:	f8dd b004 	ldr.w	fp, [sp, #4]
 8025aa0:	9403      	str	r4, [sp, #12]
    }
    
    for ( i=0; i<6; i++ )
    {
        tLinearDelay_initToPool(&r->combDelays[i], lengths[i], lengths[i] * 2.0f, mp);
 8025aa2:	f859 5b04 	ldr.w	r5, [r9], #4
 8025aa6:	f1a7 041c 	sub.w	r4, r7, #28
 8025aaa:	465a      	mov	r2, fp
 8025aac:	ee07 5a90 	vmov	s15, r5
 8025ab0:	4620      	mov	r0, r4
        tLinearDelay_clear(&r->combDelays[i]);
        r->combCoeffs[i] = pow(10.0, (-3 * lengths[i] * leaf.invSampleRate / t60));
 8025ab2:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
        tLinearDelay_initToPool(&r->combDelays[i], lengths[i], lengths[i] * 2.0f, mp);
 8025ab6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8025aba:	ee70 7a00 	vadd.f32	s15, s0, s0
 8025abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8025ac2:	ee17 1a90 	vmov	r1, s15
 8025ac6:	f7f9 ff1f 	bl	801f908 <tLinearDelay_initToPool>
        tLinearDelay_clear(&r->combDelays[i]);
 8025aca:	4620      	mov	r0, r4
 8025acc:	f7f9 ff9e 	bl	801fa0c <tLinearDelay_clear>
        r->combCoeffs[i] = pow(10.0, (-3 * lengths[i] * leaf.invSampleRate / t60));
 8025ad0:	edd8 7a01 	vldr	s15, [r8, #4]
 8025ad4:	ee07 5a10 	vmov	s14, r5
 8025ad8:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8025adc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8025ae0:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
 8025ae4:	ee21 1a27 	vmul.f32	s2, s2, s15
 8025ae8:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 8025aec:	f002 fa20 	bl	8027f30 <pow>
 8025af0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8025af4:	eca7 0a01 	vstmia	r7!, {s0}
    for ( i=0; i<6; i++ )
 8025af8:	42be      	cmp	r6, r7
 8025afa:	d1d2      	bne.n	8025aa2 <tNReverb_initToPool+0xba>
 8025afc:	9c03      	ldr	r4, [sp, #12]
 8025afe:	af0b      	add	r7, sp, #44	; 0x2c
 8025b00:	f10a 0514 	add.w	r5, sl, #20
 8025b04:	9e01      	ldr	r6, [sp, #4]
    }
    
    for ( i=0; i<8; i++ )
    {
        tLinearDelay_initToPool(&r->allpassDelays[i], lengths[i+6], lengths[i+6] * 2.0f, mp);
 8025b06:	ecb7 0a01 	vldmia	r7!, {s0}
 8025b0a:	4628      	mov	r0, r5
 8025b0c:	4632      	mov	r2, r6
 8025b0e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8025b12:	ee70 7a00 	vadd.f32	s15, s0, s0
 8025b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8025b1a:	ee17 1a90 	vmov	r1, s15
 8025b1e:	f7f9 fef3 	bl	801f908 <tLinearDelay_initToPool>
        tLinearDelay_clear(&r->allpassDelays[i]);
 8025b22:	4628      	mov	r0, r5
 8025b24:	f7f9 ff72 	bl	801fa0c <tLinearDelay_clear>
    for ( i=0; i<8; i++ )
 8025b28:	42bc      	cmp	r4, r7
 8025b2a:	f105 0504 	add.w	r5, r5, #4
 8025b2e:	d1ea      	bne.n	8025b06 <tNReverb_initToPool+0x11e>

void    tNReverb_setT60(tNReverb* const rev, float t60)
{
    _tNReverb* r = *rev;
    
    if (t60 <= 0.0f)           t60 = 0.001f;
 8025b30:	eeb5 aac0 	vcmpe.f32	s20, #0.0
    _tNReverb* r = *rev;
 8025b34:	9b02      	ldr	r3, [sp, #8]
 8025b36:	681b      	ldr	r3, [r3, #0]
    if (t60 <= 0.0f)           t60 = 0.001f;
 8025b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b3c:	d937      	bls.n	8025bae <tNReverb_initToPool+0x1c6>
 8025b3e:	eeb7 7aca 	vcvt.f64.f32	d7, s20
 8025b42:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8025b46:	ee86 9b07 	vdiv.f64	d9, d6, d7
 8025b4a:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8025b4e:	f103 0568 	add.w	r5, r3, #104	; 0x68
    
    r->t60 = t60;
 8025b52:	ed83 aa02 	vstr	s20, [r3, #8]
    
    for (int i=0; i<6; i++)   r->combCoeffs[i] = pow(10.0, (-3.0 * tLinearDelay_getDelay(&r->combDelays[i]) * leaf.invSampleRate / t60 ));
 8025b56:	eeb8 8b08 	vmov.f64	d8, #136	; 0xc0400000 -3.0
 8025b5a:	f1a4 001c 	sub.w	r0, r4, #28
 8025b5e:	f7fa f81b 	bl	801fb98 <tLinearDelay_getDelay>
 8025b62:	ed98 7a01 	vldr	s14, [r8, #4]
 8025b66:	eeb7 1ac0 	vcvt.f64.f32	d1, s0
 8025b6a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8025b6e:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8025b72:	ee27 7b08 	vmul.f64	d7, d7, d8
 8025b76:	ee27 7b09 	vmul.f64	d7, d7, d9
 8025b7a:	ee27 1b01 	vmul.f64	d1, d7, d1
 8025b7e:	f002 f9d7 	bl	8027f30 <pow>
 8025b82:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8025b86:	eca4 0a01 	vstmia	r4!, {s0}
 8025b8a:	42a5      	cmp	r5, r4
 8025b8c:	d1e5      	bne.n	8025b5a <tNReverb_initToPool+0x172>
    r->allpassCoeff = 0.7f;
 8025b8e:	4a0e      	ldr	r2, [pc, #56]	; (8025bc8 <tNReverb_initToPool+0x1e0>)
    r->mix = 0.3f;
 8025b90:	4b0e      	ldr	r3, [pc, #56]	; (8025bcc <tNReverb_initToPool+0x1e4>)
    r->allpassCoeff = 0.7f;
 8025b92:	f8ca 204c 	str.w	r2, [sl, #76]	; 0x4c
    r->mix = 0.3f;
 8025b96:	f8ca 3004 	str.w	r3, [sl, #4]
}
 8025b9a:	b015      	add	sp, #84	; 0x54
 8025b9c:	ecbd 8b06 	vpop	{d8-d10}
 8025ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ba4:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8025bd0 <tNReverb_initToPool+0x1e8>
    if (t60 <= 0.0f) t60 = 0.001f;
 8025ba8:	ed9f aa0a 	vldr	s20, [pc, #40]	; 8025bd4 <tNReverb_initToPool+0x1ec>
 8025bac:	e738      	b.n	8025a20 <tNReverb_initToPool+0x38>
    if (t60 <= 0.0f)           t60 = 0.001f;
 8025bae:	ed9f 9b02 	vldr	d9, [pc, #8]	; 8025bb8 <tNReverb_initToPool+0x1d0>
 8025bb2:	ed9f aa08 	vldr	s20, [pc, #32]	; 8025bd4 <tNReverb_initToPool+0x1ec>
 8025bb6:	e7c8      	b.n	8025b4a <tNReverb_initToPool+0x162>
 8025bb8:	e7190014 	.word	0xe7190014
 8025bbc:	408f3fff 	.word	0x408f3fff
 8025bc0:	382393f9 	.word	0x382393f9
 8025bc4:	37be37c6 	.word	0x37be37c6
 8025bc8:	3f333333 	.word	0x3f333333
 8025bcc:	3e99999a 	.word	0x3e99999a
 8025bd0:	4479ffff 	.word	0x4479ffff
 8025bd4:	3a83126f 	.word	0x3a83126f
 8025bd8:	200194a0 	.word	0x200194a0
 8025bdc:	0802a118 	.word	0x0802a118

08025be0 <tNReverb_init>:
    tNReverb_initToPool(rev, t60, &leaf.mempool);
 8025be0:	4901      	ldr	r1, [pc, #4]	; (8025be8 <tNReverb_init+0x8>)
 8025be2:	f7ff bf01 	b.w	80259e8 <tNReverb_initToPool>
 8025be6:	bf00      	nop
 8025be8:	200194b8 	.word	0x200194b8

08025bec <tNReverb_free>:
{
 8025bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tNReverb* r = *rev;
 8025bee:	6807      	ldr	r7, [r0, #0]
 8025bf0:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8025bf4:	f107 064c 	add.w	r6, r7, #76	; 0x4c
 8025bf8:	462c      	mov	r4, r5
        tLinearDelay_free(&r->combDelays[i]);
 8025bfa:	4620      	mov	r0, r4
 8025bfc:	3404      	adds	r4, #4
 8025bfe:	f7f9 fef9 	bl	801f9f4 <tLinearDelay_free>
    for (int i = 0; i < 6; i++)
 8025c02:	42b4      	cmp	r4, r6
 8025c04:	d1f9      	bne.n	8025bfa <tNReverb_free+0xe>
 8025c06:	f107 0414 	add.w	r4, r7, #20
        tLinearDelay_free(&r->allpassDelays[i]);
 8025c0a:	4620      	mov	r0, r4
 8025c0c:	3404      	adds	r4, #4
 8025c0e:	f7f9 fef1 	bl	801f9f4 <tLinearDelay_free>
    for (int i = 0; i < 8; i++)
 8025c12:	42a5      	cmp	r5, r4
 8025c14:	d1f9      	bne.n	8025c0a <tNReverb_free+0x1e>
    mpool_free((char*)r, r->mempool);
 8025c16:	6839      	ldr	r1, [r7, #0]
 8025c18:	4638      	mov	r0, r7
}
 8025c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    mpool_free((char*)r, r->mempool);
 8025c1e:	f7fe be57 	b.w	80248d0 <mpool_free>
 8025c22:	bf00      	nop
 8025c24:	0000      	movs	r0, r0
	...

08025c28 <tNReverb_setT60>:
    if (t60 <= 0.0f)           t60 = 0.001f;
 8025c28:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
{
 8025c2c:	b570      	push	{r4, r5, r6, lr}
    if (t60 <= 0.0f)           t60 = 0.001f;
 8025c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8025c32:	ed2d 8b04 	vpush	{d8-d9}
    _tNReverb* r = *rev;
 8025c36:	6803      	ldr	r3, [r0, #0]
    if (t60 <= 0.0f)           t60 = 0.001f;
 8025c38:	d92b      	bls.n	8025c92 <tNReverb_setT60+0x6a>
 8025c3a:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8025c3e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8025c42:	ee86 9b07 	vdiv.f64	d9, d6, d7
 8025c46:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8025c4a:	f103 0668 	add.w	r6, r3, #104	; 0x68
 8025c4e:	4d16      	ldr	r5, [pc, #88]	; (8025ca8 <tNReverb_setT60+0x80>)
    r->t60 = t60;
 8025c50:	ed83 0a02 	vstr	s0, [r3, #8]
    for (int i=0; i<6; i++)   r->combCoeffs[i] = pow(10.0, (-3.0 * tLinearDelay_getDelay(&r->combDelays[i]) * leaf.invSampleRate / t60 ));
 8025c54:	eeb8 8b08 	vmov.f64	d8, #136	; 0xc0400000 -3.0
 8025c58:	f1a4 001c 	sub.w	r0, r4, #28
 8025c5c:	f7f9 ff9c 	bl	801fb98 <tLinearDelay_getDelay>
 8025c60:	ed95 7a01 	vldr	s14, [r5, #4]
 8025c64:	eeb7 1ac0 	vcvt.f64.f32	d1, s0
 8025c68:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8025c6c:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8025c70:	ee27 7b08 	vmul.f64	d7, d7, d8
 8025c74:	ee27 7b09 	vmul.f64	d7, d7, d9
 8025c78:	ee27 1b01 	vmul.f64	d1, d7, d1
 8025c7c:	f002 f958 	bl	8027f30 <pow>
 8025c80:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8025c84:	eca4 0a01 	vstmia	r4!, {s0}
 8025c88:	42b4      	cmp	r4, r6
 8025c8a:	d1e5      	bne.n	8025c58 <tNReverb_setT60+0x30>
    
}
 8025c8c:	ecbd 8b04 	vpop	{d8-d9}
 8025c90:	bd70      	pop	{r4, r5, r6, pc}
 8025c92:	ed9f 9b03 	vldr	d9, [pc, #12]	; 8025ca0 <tNReverb_setT60+0x78>
    if (t60 <= 0.0f)           t60 = 0.001f;
 8025c96:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8025cac <tNReverb_setT60+0x84>
 8025c9a:	e7d4      	b.n	8025c46 <tNReverb_setT60+0x1e>
 8025c9c:	f3af 8000 	nop.w
 8025ca0:	e7190014 	.word	0xe7190014
 8025ca4:	408f3fff 	.word	0x408f3fff
 8025ca8:	200194a0 	.word	0x200194a0
 8025cac:	3a83126f 	.word	0x3a83126f

08025cb0 <tNReverb_setMix>:

void    tNReverb_setMix(tNReverb* const rev, float mix)
{
    _tNReverb* r = *rev;
 8025cb0:	6803      	ldr	r3, [r0, #0]
    r->mix = mix;
 8025cb2:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8025cb6:	4770      	bx	lr

08025cb8 <tNReverb_tickStereo>:

    return out;
}

void   tNReverb_tickStereo(tNReverb* const rev, float input, float* output)
{
 8025cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025cbc:	ed2d 8b06 	vpush	{d8-d10}
    _tNReverb* r = *rev;
 8025cc0:	6805      	ldr	r5, [r0, #0]
{
 8025cc2:	eeb0 9a40 	vmov.f32	s18, s0
 8025cc6:	4688      	mov	r8, r1
    r->lastIn = input;

    float temp, temp0, temp1, temp2, temp3, out;
    int i;

    temp0 = 0.0;
 8025cc8:	ed9f 8a4c 	vldr	s16, [pc, #304]	; 8025dfc <tNReverb_tickStereo+0x144>
 8025ccc:	f105 0450 	add.w	r4, r5, #80	; 0x50
 8025cd0:	f105 0768 	add.w	r7, r5, #104	; 0x68
    r->lastIn = input;
 8025cd4:	ed85 0a1b 	vstr	s0, [r5, #108]	; 0x6c
 8025cd8:	f1a4 061c 	sub.w	r6, r4, #28
    for ( i=0; i<6; i++ )
    {
        temp = input + (r->combCoeffs[i] * tLinearDelay_getLastOut(&r->combDelays[i]));
 8025cdc:	ecf4 8a01 	vldmia	r4!, {s17}
 8025ce0:	4630      	mov	r0, r6
 8025ce2:	f7f9 ff5d 	bl	801fba0 <tLinearDelay_getLastOut>
        temp0 += tLinearDelay_tick(&r->combDelays[i],temp);
 8025ce6:	eef0 7a49 	vmov.f32	s15, s18
 8025cea:	4630      	mov	r0, r6
 8025cec:	eee8 7a80 	vfma.f32	s15, s17, s0
 8025cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8025cf4:	f7f9 fe98 	bl	801fa28 <tLinearDelay_tick>
    for ( i=0; i<6; i++ )
 8025cf8:	42bc      	cmp	r4, r7
        temp0 += tLinearDelay_tick(&r->combDelays[i],temp);
 8025cfa:	ee38 8a00 	vadd.f32	s16, s16, s0
    for ( i=0; i<6; i++ )
 8025cfe:	d1eb      	bne.n	8025cd8 <tNReverb_tickStereo+0x20>
 8025d00:	f105 0414 	add.w	r4, r5, #20
 8025d04:	f105 0620 	add.w	r6, r5, #32
    }

    for ( i=0; i<3; i++ )
    {
        temp = tLinearDelay_getLastOut(&r->allpassDelays[i]);
 8025d08:	4620      	mov	r0, r4
 8025d0a:	f7f9 ff49 	bl	801fba0 <tLinearDelay_getLastOut>
        temp1 = r->allpassCoeff * temp;
        temp1 += temp0;
 8025d0e:	edd5 7a13 	vldr	s15, [r5, #76]	; 0x4c
        temp = tLinearDelay_getLastOut(&r->allpassDelays[i]);
 8025d12:	eef0 8a40 	vmov.f32	s17, s0
        tLinearDelay_tick(&r->allpassDelays[i], temp1);
 8025d16:	4620      	mov	r0, r4
        temp1 += temp0;
 8025d18:	eea7 8a80 	vfma.f32	s16, s15, s0
 8025d1c:	3404      	adds	r4, #4
        tLinearDelay_tick(&r->allpassDelays[i], temp1);
 8025d1e:	eeb0 0a48 	vmov.f32	s0, s16
 8025d22:	f7f9 fe81 	bl	801fa28 <tLinearDelay_tick>
        temp0 = -(r->allpassCoeff * temp1) + temp;
 8025d26:	edd5 7a13 	vldr	s15, [r5, #76]	; 0x4c
    for ( i=0; i<3; i++ )
 8025d2a:	42a6      	cmp	r6, r4
        temp0 = -(r->allpassCoeff * temp1) + temp;
 8025d2c:	eee7 8ac8 	vfms.f32	s17, s15, s16
 8025d30:	eeb0 8a68 	vmov.f32	s16, s17
    for ( i=0; i<3; i++ )
 8025d34:	d1e8      	bne.n	8025d08 <tNReverb_tickStereo+0x50>
    }

    // One-pole lowpass filter.
    r->lowpassState = 0.7f * r->lowpassState + 0.3f * temp0;
 8025d36:	eddf 7a32 	vldr	s15, [pc, #200]	; 8025e00 <tNReverb_tickStereo+0x148>

    temp = tLinearDelay_getLastOut(&r->allpassDelays[3]);
 8025d3a:	4630      	mov	r0, r6
    r->lowpassState = 0.7f * r->lowpassState + 0.3f * temp0;
 8025d3c:	ed95 7a1a 	vldr	s14, [r5, #104]	; 0x68
    tLinearDelay_tick(&r->allpassDelays[3], temp1 );
    temp1 = -(r->allpassCoeff * temp1) + temp;

    float drymix = ( 1.0f - r->mix ) * input;

    temp = tLinearDelay_getLastOut(&r->allpassDelays[4]);
 8025d40:	f105 0724 	add.w	r7, r5, #36	; 0x24
    r->lowpassState = 0.7f * r->lowpassState + 0.3f * temp0;
 8025d44:	ee28 8aa7 	vmul.f32	s16, s17, s15
 8025d48:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8025e04 <tNReverb_tickStereo+0x14c>
    float drymix = ( 1.0f - r->mix ) * input;
 8025d4c:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    tLinearDelay_tick(&r->allpassDelays[4], temp2 );
    output[0] = -( r->allpassCoeff * temp2 ) + temp + drymix;
    out = output[0];


    temp = tLinearDelay_getLastOut(&r->allpassDelays[5]);
 8025d50:	f105 0428 	add.w	r4, r5, #40	; 0x28
    r->lowpassState = 0.7f * r->lowpassState + 0.3f * temp0;
 8025d54:	eea7 8a27 	vfma.f32	s16, s14, s15
 8025d58:	ed85 8a1a 	vstr	s16, [r5, #104]	; 0x68
    temp = tLinearDelay_getLastOut(&r->allpassDelays[3]);
 8025d5c:	f7f9 ff20 	bl	801fba0 <tLinearDelay_getLastOut>
    temp1 += r->lowpassState;
 8025d60:	edd5 7a13 	vldr	s15, [r5, #76]	; 0x4c
 8025d64:	ed95 8a1a 	vldr	s16, [r5, #104]	; 0x68
    temp = tLinearDelay_getLastOut(&r->allpassDelays[3]);
 8025d68:	eef0 8a40 	vmov.f32	s17, s0
    tLinearDelay_tick(&r->allpassDelays[3], temp1 );
 8025d6c:	4630      	mov	r0, r6
    temp1 += r->lowpassState;
 8025d6e:	eea7 8a80 	vfma.f32	s16, s15, s0
    tLinearDelay_tick(&r->allpassDelays[3], temp1 );
 8025d72:	eeb0 0a48 	vmov.f32	s0, s16
 8025d76:	f7f9 fe57 	bl	801fa28 <tLinearDelay_tick>
    temp1 = -(r->allpassCoeff * temp1) + temp;
 8025d7a:	ed95 7a13 	vldr	s14, [r5, #76]	; 0x4c
    float drymix = ( 1.0f - r->mix ) * input;
 8025d7e:	edd5 7a01 	vldr	s15, [r5, #4]
    temp = tLinearDelay_getLastOut(&r->allpassDelays[4]);
 8025d82:	4638      	mov	r0, r7
    temp1 = -(r->allpassCoeff * temp1) + temp;
 8025d84:	eee7 8a48 	vfms.f32	s17, s14, s16
    float drymix = ( 1.0f - r->mix ) * input;
 8025d88:	ee3a aa67 	vsub.f32	s20, s20, s15
    temp = tLinearDelay_getLastOut(&r->allpassDelays[4]);
 8025d8c:	f7f9 ff08 	bl	801fba0 <tLinearDelay_getLastOut>
    temp2 += temp1;
 8025d90:	edd5 7a13 	vldr	s15, [r5, #76]	; 0x4c
    temp = tLinearDelay_getLastOut(&r->allpassDelays[4]);
 8025d94:	eef0 9a40 	vmov.f32	s19, s0
    tLinearDelay_tick(&r->allpassDelays[4], temp2 );
 8025d98:	4638      	mov	r0, r7
    output[0] = -( r->allpassCoeff * temp2 ) + temp + drymix;
 8025d9a:	eeea 9a09 	vfma.f32	s19, s20, s18
    temp2 += temp1;
 8025d9e:	eeb0 8a68 	vmov.f32	s16, s17
 8025da2:	eea7 8a80 	vfma.f32	s16, s15, s0
    tLinearDelay_tick(&r->allpassDelays[4], temp2 );
 8025da6:	eeb0 0a48 	vmov.f32	s0, s16
 8025daa:	f7f9 fe3d 	bl	801fa28 <tLinearDelay_tick>
    output[0] = -( r->allpassCoeff * temp2 ) + temp + drymix;
 8025dae:	edd5 7a13 	vldr	s15, [r5, #76]	; 0x4c
    temp = tLinearDelay_getLastOut(&r->allpassDelays[5]);
 8025db2:	4620      	mov	r0, r4
    output[0] = -( r->allpassCoeff * temp2 ) + temp + drymix;
 8025db4:	eee7 9ac8 	vfms.f32	s19, s15, s16
 8025db8:	edc8 9a00 	vstr	s19, [r8]
    temp = tLinearDelay_getLastOut(&r->allpassDelays[5]);
 8025dbc:	f7f9 fef0 	bl	801fba0 <tLinearDelay_getLastOut>
    temp3 = r->allpassCoeff * temp;
    temp3 += temp1;
 8025dc0:	edd5 7a13 	vldr	s15, [r5, #76]	; 0x4c
    temp = tLinearDelay_getLastOut(&r->allpassDelays[5]);
 8025dc4:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_tick(&r->allpassDelays[5], temp3 );
 8025dc8:	4620      	mov	r0, r4
    temp3 += temp1;
 8025dca:	eee7 8a80 	vfma.f32	s17, s15, s0
    output[1] = r->mix *( - ( r->allpassCoeff * temp3 ) + temp + drymix);
 8025dce:	eeaa 8a09 	vfma.f32	s16, s20, s18
    tLinearDelay_tick(&r->allpassDelays[5], temp3 );
 8025dd2:	eeb0 0a68 	vmov.f32	s0, s17
 8025dd6:	f7f9 fe27 	bl	801fa28 <tLinearDelay_tick>
    output[1] = r->mix *( - ( r->allpassCoeff * temp3 ) + temp + drymix);
 8025dda:	ed95 7a13 	vldr	s14, [r5, #76]	; 0x4c
 8025dde:	edd5 7a01 	vldr	s15, [r5, #4]
 8025de2:	eea7 8a68 	vfms.f32	s16, s14, s17
 8025de6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8025dea:	ed88 8a01 	vstr	s16, [r8, #4]

    r->lastOut = out;
 8025dee:	edc5 9a1c 	vstr	s19, [r5, #112]	; 0x70
}
 8025df2:	ecbd 8b06 	vpop	{d8-d10}
 8025df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025dfa:	bf00      	nop
 8025dfc:	00000000 	.word	0x00000000
 8025e00:	3e99999a 	.word	0x3e99999a
 8025e04:	3f333333 	.word	0x3f333333

08025e08 <tDattorroReverb_initToPool>:
{
    tDattorroReverb_initToPool(rev, &leaf.mempool);
}

void    tDattorroReverb_initToPool        (tDattorroReverb* const rev, tMempool* const mp)
{
 8025e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025e0c:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 8025e10:	680d      	ldr	r5, [r1, #0]
{
 8025e12:	460e      	mov	r6, r1
 8025e14:	4681      	mov	r9, r0
    _tDattorroReverb* r = *rev = (_tDattorroReverb*) mpool_alloc(sizeof(_tDattorroReverb), m);
 8025e16:	2088      	movs	r0, #136	; 0x88
 8025e18:	4629      	mov	r1, r5
    r->mempool = m;
    
    r->size_max = 2.0f;
    r->size = 1.f;
 8025e1a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tDattorroReverb* r = *rev = (_tDattorroReverb*) mpool_alloc(sizeof(_tDattorroReverb), m);
 8025e1e:	f7fe fcaf 	bl	8024780 <mpool_alloc>
    r->t = r->size * leaf.sampleRate * 0.001f;
 8025e22:	4ac4      	ldr	r2, [pc, #784]	; (8026134 <tDattorroReverb_initToPool+0x32c>)
    _tDattorroReverb* r = *rev = (_tDattorroReverb*) mpool_alloc(sizeof(_tDattorroReverb), m);
 8025e24:	f8c9 0000 	str.w	r0, [r9]
 8025e28:	4604      	mov	r4, r0
    r->mempool = m;
 8025e2a:	6005      	str	r5, [r0, #0]
    r->size_max = 2.0f;
 8025e2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    r->t = r->size * leaf.sampleRate * 0.001f;
 8025e30:	edd2 7a00 	vldr	s15, [r2]
    r->frozen = 0;
 8025e34:	2300      	movs	r3, #0
    r->t = r->size * leaf.sampleRate * 0.001f;
 8025e36:	eddf 6ac0 	vldr	s13, [pc, #768]	; 8026138 <tDattorroReverb_initToPool+0x330>
    // INPUT
    tTapeDelay_initToPool(&r->in_delay, 0.f, SAMP(200.f), mp);
 8025e3a:	3038      	adds	r0, #56	; 0x38
 8025e3c:	ed9f 7abf 	vldr	s14, [pc, #764]	; 802613c <tDattorroReverb_initToPool+0x334>
 8025e40:	4632      	mov	r2, r6
    r->t = r->size * leaf.sampleRate * 0.001f;
 8025e42:	ee67 7aa6 	vmul.f32	s15, s15, s13
    r->size_max = 2.0f;
 8025e46:	f840 1c18 	str.w	r1, [r0, #-24]
    r->frozen = 0;
 8025e4a:	f840 3c20 	str.w	r3, [r0, #-32]
    tOnePole_initToPool(&r->in_filter, 1.f, mp);
    
    for (int i = 0; i < 4; i++)
    {
        tAllpass_initToPool(&r->in_allpass[i], SAMP(in_allpass_delays[i]), SAMP(20.f), mp); // * r->size_max
 8025e4e:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
    tTapeDelay_initToPool(&r->in_delay, 0.f, SAMP(200.f), mp);
 8025e52:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8026140 <tDattorroReverb_initToPool+0x338>
 8025e56:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8025e5a:	ee27 7a87 	vmul.f32	s14, s15, s14
    r->t = r->size * leaf.sampleRate * 0.001f;
 8025e5e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    r->size = 1.f;
 8025e62:	edc4 8a07 	vstr	s17, [r4, #28]
 8025e66:	f104 0a50 	add.w	sl, r4, #80	; 0x50
 8025e6a:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8026188 <tDattorroReverb_initToPool+0x380>
    tTapeDelay_initToPool(&r->in_delay, 0.f, SAMP(200.f), mp);
 8025e6e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8025e72:	4fb4      	ldr	r7, [pc, #720]	; (8026144 <tDattorroReverb_initToPool+0x33c>)
 8025e74:	ee17 1a90 	vmov	r1, s15
 8025e78:	f7f9 feca 	bl	801fc10 <tTapeDelay_initToPool>
    tOnePole_initToPool(&r->in_filter, 1.f, mp);
 8025e7c:	4631      	mov	r1, r6
 8025e7e:	eeb0 0a68 	vmov.f32	s0, s17
 8025e82:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8025e86:	f7fc febb 	bl	8022c00 <tOnePole_initToPool>
        tAllpass_initToPool(&r->in_allpass[i], SAMP(in_allpass_delays[i]), SAMP(20.f), mp); // * r->size_max
 8025e8a:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8025e8e:	4628      	mov	r0, r5
 8025e90:	ecb8 0a01 	vldmia	r8!, {s0}
 8025e94:	4632      	mov	r2, r6
 8025e96:	ee27 7a88 	vmul.f32	s14, s15, s16
 8025e9a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025e9e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8025ea2:	ee17 1a90 	vmov	r1, s15
 8025ea6:	f7fc fe5b 	bl	8022b60 <tAllpass_initToPool>
        tAllpass_setGain(&r->in_allpass[i], in_allpass_gains[i]);
 8025eaa:	4628      	mov	r0, r5
 8025eac:	3504      	adds	r5, #4
 8025eae:	ecb7 0a01 	vldmia	r7!, {s0}
 8025eb2:	f7fc fe87 	bl	8022bc4 <tAllpass_setGain>
    for (int i = 0; i < 4; i++)
 8025eb6:	4555      	cmp	r5, sl
 8025eb8:	d1e7      	bne.n	8025e8a <tDattorroReverb_initToPool+0x82>
    }
    
    // FEEDBACK 1
    tAllpass_initToPool(&r->f1_allpass, SAMP(30.51f), SAMP(100.f), mp); // * r->size_max
 8025eba:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8025ebe:	4632      	mov	r2, r6
 8025ec0:	ed9f 9aa1 	vldr	s18, [pc, #644]	; 8026148 <tDattorroReverb_initToPool+0x340>
 8025ec4:	4628      	mov	r0, r5
 8025ec6:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 802614c <tDattorroReverb_initToPool+0x344>
    tAllpass_setGain(&r->f1_allpass, 0.7f);
    
    tTapeDelay_initToPool(&r->f1_delay_1, SAMP(141.69f), SAMP(200.0f) * r->size_max + 1, mp);
 8025eca:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    tAllpass_initToPool(&r->f1_allpass, SAMP(30.51f), SAMP(100.f), mp); // * r->size_max
 8025ece:	ee27 7a89 	vmul.f32	s14, s15, s18
    tTapeDelay_initToPool(&r->f1_delay_1, SAMP(141.69f), SAMP(200.0f) * r->size_max + 1, mp);
 8025ed2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 802613c <tDattorroReverb_initToPool+0x334>
    tAllpass_initToPool(&r->f1_allpass, SAMP(30.51f), SAMP(100.f), mp); // * r->size_max
 8025ed6:	ee27 0a80 	vmul.f32	s0, s15, s0
    
    tOnePole_initToPool(&r->f1_filter, 1.f, mp);
    
    tHighpass_initToPool(&r->f1_hp, 20.f, mp);
    
    tCycle_initToPool(&r->f1_lfo, mp);
 8025eda:	f104 0868 	add.w	r8, r4, #104	; 0x68
    tCycle_setFreq(&r->f1_lfo, 0.1f);
    
    // FEEDBACK 2
    tAllpass_initToPool(&r->f2_allpass, SAMP(22.58f), SAMP(100.f), mp); // * r->size_max
 8025ede:	f104 076c 	add.w	r7, r4, #108	; 0x6c
    tAllpass_initToPool(&r->f1_allpass, SAMP(30.51f), SAMP(100.f), mp); // * r->size_max
 8025ee2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8025ee6:	ee17 1a90 	vmov	r1, s15
 8025eea:	f7fc fe39 	bl	8022b60 <tAllpass_initToPool>
    tAllpass_setGain(&r->f1_allpass, 0.7f);
 8025eee:	4628      	mov	r0, r5
 8025ef0:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8026150 <tDattorroReverb_initToPool+0x348>
    
    tOnePole_initToPool(&r->f2_filter, 1.f, mp);
    
    tHighpass_initToPool(&r->f2_hp, 20.f, mp);
    
    tCycle_initToPool(&r->f2_lfo, mp);
 8025ef4:	f104 0584 	add.w	r5, r4, #132	; 0x84
    tAllpass_setGain(&r->f1_allpass, 0.7f);
 8025ef8:	f7fc fe64 	bl	8022bc4 <tAllpass_setGain>
    tTapeDelay_initToPool(&r->f1_delay_1, SAMP(141.69f), SAMP(200.0f) * r->size_max + 1, mp);
 8025efc:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8025f00:	edd4 7a08 	vldr	s15, [r4, #32]
 8025f04:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8025f08:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8026154 <tDattorroReverb_initToPool+0x34c>
 8025f0c:	4632      	mov	r2, r6
 8025f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025f12:	ee27 0a00 	vmul.f32	s0, s14, s0
 8025f16:	eeb0 7a48 	vmov.f32	s14, s16
 8025f1a:	eea7 7aa8 	vfma.f32	s14, s15, s17
 8025f1e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8025f22:	ee17 1a90 	vmov	r1, s15
 8025f26:	f7f9 fe73 	bl	801fc10 <tTapeDelay_initToPool>
    tTapeDelay_initToPool(&r->f1_delay_2, SAMP(89.24f), SAMP(100.0f) * r->size_max + 1, mp);
 8025f2a:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8025f2e:	edd4 7a08 	vldr	s15, [r4, #32]
 8025f32:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025f36:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8026158 <tDattorroReverb_initToPool+0x350>
 8025f3a:	4632      	mov	r2, r6
 8025f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025f40:	ee27 0a00 	vmul.f32	s0, s14, s0
 8025f44:	eeb0 7a48 	vmov.f32	s14, s16
 8025f48:	eea7 7a89 	vfma.f32	s14, s15, s18
 8025f4c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8025f50:	ee17 1a90 	vmov	r1, s15
 8025f54:	f7f9 fe5c 	bl	801fc10 <tTapeDelay_initToPool>
    tTapeDelay_initToPool(&r->f1_delay_3, SAMP(125.f), SAMP(200.0f) * r->size_max + 1, mp);
 8025f58:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8025f5c:	edd4 7a08 	vldr	s15, [r4, #32]
 8025f60:	4632      	mov	r2, r6
 8025f62:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 802615c <tDattorroReverb_initToPool+0x354>
 8025f66:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8025f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025f6e:	ee27 0a00 	vmul.f32	s0, s14, s0
 8025f72:	eeb0 7a48 	vmov.f32	s14, s16
 8025f76:	eea7 7aa8 	vfma.f32	s14, s15, s17
 8025f7a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8025f7e:	ee17 1a90 	vmov	r1, s15
 8025f82:	f7f9 fe45 	bl	801fc10 <tTapeDelay_initToPool>
    tOnePole_initToPool(&r->f1_filter, 1.f, mp);
 8025f86:	eeb0 0a48 	vmov.f32	s0, s16
 8025f8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025f8e:	4631      	mov	r1, r6
 8025f90:	f7fc fe36 	bl	8022c00 <tOnePole_initToPool>
    tHighpass_initToPool(&r->f1_hp, 20.f, mp);
 8025f94:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8025f98:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8025f9c:	4631      	mov	r1, r6
 8025f9e:	f7fd f869 	bl	8023074 <tHighpass_initToPool>
    tCycle_initToPool(&r->f1_lfo, mp);
 8025fa2:	4631      	mov	r1, r6
 8025fa4:	4640      	mov	r0, r8
 8025fa6:	f7ff f88b 	bl	80250c0 <tCycle_initToPool>
    tCycle_setFreq(&r->f1_lfo, 0.1f);
 8025faa:	4640      	mov	r0, r8
 8025fac:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8026160 <tDattorroReverb_initToPool+0x358>
 8025fb0:	f7ff f898 	bl	80250e4 <tCycle_setFreq>
    tAllpass_initToPool(&r->f2_allpass, SAMP(22.58f), SAMP(100.f), mp); // * r->size_max
 8025fb4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8025fb8:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8026164 <tDattorroReverb_initToPool+0x35c>
 8025fbc:	4632      	mov	r2, r6
 8025fbe:	ee27 7a89 	vmul.f32	s14, s15, s18
 8025fc2:	4638      	mov	r0, r7
 8025fc4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8025fc8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8025fcc:	ee17 1a90 	vmov	r1, s15
 8025fd0:	f7fc fdc6 	bl	8022b60 <tAllpass_initToPool>
    tAllpass_setGain(&r->f2_allpass, 0.7f);
 8025fd4:	4638      	mov	r0, r7
 8025fd6:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8026150 <tDattorroReverb_initToPool+0x348>
 8025fda:	f7fc fdf3 	bl	8022bc4 <tAllpass_setGain>
    tTapeDelay_initToPool(&r->f2_delay_1, SAMP(149.62f), SAMP(200.f) * r->size_max + 1, mp);
 8025fde:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8025fe2:	edd4 7a08 	vldr	s15, [r4, #32]
 8025fe6:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8025fea:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8026168 <tDattorroReverb_initToPool+0x360>
 8025fee:	4632      	mov	r2, r6
 8025ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025ff4:	ee27 0a00 	vmul.f32	s0, s14, s0
 8025ff8:	eeb0 7a48 	vmov.f32	s14, s16
 8025ffc:	eea7 7aa8 	vfma.f32	s14, s15, s17
 8026000:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8026004:	ee17 1a90 	vmov	r1, s15
 8026008:	f7f9 fe02 	bl	801fc10 <tTapeDelay_initToPool>
    tTapeDelay_initToPool(&r->f2_delay_2, SAMP(60.48f), SAMP(100.f) * r->size_max + 1, mp);
 802600c:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8026010:	edd4 7a08 	vldr	s15, [r4, #32]
 8026014:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8026018:	ed9f 0a54 	vldr	s0, [pc, #336]	; 802616c <tDattorroReverb_initToPool+0x364>
 802601c:	4632      	mov	r2, r6
 802601e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026022:	ee27 0a00 	vmul.f32	s0, s14, s0
 8026026:	eeb0 7a48 	vmov.f32	s14, s16
 802602a:	eea7 7a89 	vfma.f32	s14, s15, s18
 802602e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8026032:	ee17 1a90 	vmov	r1, s15
 8026036:	f7f9 fdeb 	bl	801fc10 <tTapeDelay_initToPool>
    tTapeDelay_initToPool(&r->f2_delay_3, SAMP(106.28f), SAMP(200.f) * r->size_max + 1, mp);
 802603a:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 802603e:	edd4 7a08 	vldr	s15, [r4, #32]
 8026042:	4632      	mov	r2, r6
 8026044:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8026170 <tDattorroReverb_initToPool+0x368>
 8026048:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 802604c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026050:	ee27 0a00 	vmul.f32	s0, s14, s0
 8026054:	eeb0 7a48 	vmov.f32	s14, s16
 8026058:	eea7 7aa8 	vfma.f32	s14, s15, s17
 802605c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8026060:	ee17 1a90 	vmov	r1, s15
 8026064:	f7f9 fdd4 	bl	801fc10 <tTapeDelay_initToPool>
    tOnePole_initToPool(&r->f2_filter, 1.f, mp);
 8026068:	eeb0 0a48 	vmov.f32	s0, s16
 802606c:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8026070:	4631      	mov	r1, r6
 8026072:	f7fc fdc5 	bl	8022c00 <tOnePole_initToPool>
    tHighpass_initToPool(&r->f2_hp, 20.f, mp);
 8026076:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 802607a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 802607e:	4631      	mov	r1, r6
 8026080:	f7fc fff8 	bl	8023074 <tHighpass_initToPool>
    tCycle_initToPool(&r->f2_lfo, mp);
 8026084:	4631      	mov	r1, r6
 8026086:	4628      	mov	r0, r5
 8026088:	f7ff f81a 	bl	80250c0 <tCycle_initToPool>
    tCycle_setFreq(&r->f2_lfo, 0.07f);
 802608c:	4628      	mov	r0, r5
 802608e:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8026174 <tDattorroReverb_initToPool+0x36c>
 8026092:	f7ff f827 	bl	80250e4 <tCycle_setFreq>
}

void    tDattorroReverb_setMix            (tDattorroReverb* const rev, float mix)
{
    _tDattorroReverb* r = *rev;
    r->mix = LEAF_clip(0.0f, mix, 1.0f);
 8026096:	eeb0 1a48 	vmov.f32	s2, s16
    _tDattorroReverb* r = *rev;
 802609a:	f8d9 4000 	ldr.w	r4, [r9]
    r->mix = LEAF_clip(0.0f, mix, 1.0f);
 802609e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80260a2:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8026140 <tDattorroReverb_initToPool+0x338>
 80260a6:	f7fe f96b 	bl	8024380 <LEAF_clip>

void    tDattorroReverb_setInputDelay     (tDattorroReverb* const rev, float preDelay)
{
    _tDattorroReverb* r = *rev;
    
    r->predelay = LEAF_clip(0.0f, preDelay, 200.0f);
 80260aa:	eddf 0a25 	vldr	s1, [pc, #148]	; 8026140 <tDattorroReverb_initToPool+0x338>
    r->mix = LEAF_clip(0.0f, mix, 1.0f);
 80260ae:	ed84 0a05 	vstr	s0, [r4, #20]
    r->predelay = LEAF_clip(0.0f, preDelay, 200.0f);
 80260b2:	eeb0 1a68 	vmov.f32	s2, s17
    _tDattorroReverb* r = *rev;
 80260b6:	f8d9 4000 	ldr.w	r4, [r9]
    r->predelay = LEAF_clip(0.0f, preDelay, 200.0f);
 80260ba:	eeb0 0a60 	vmov.f32	s0, s1
 80260be:	f7fe f95f 	bl	8024380 <LEAF_clip>
    
    tTapeDelay_setDelay(&r->in_delay, SAMP(r->predelay));
 80260c2:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80260c6:	f104 0038 	add.w	r0, r4, #56	; 0x38
    r->predelay = LEAF_clip(0.0f, preDelay, 200.0f);
 80260ca:	ed84 0a01 	vstr	s0, [r4, #4]
    tTapeDelay_setDelay(&r->in_delay, SAMP(r->predelay));
 80260ce:	ee20 0a27 	vmul.f32	s0, s0, s15
 80260d2:	f7f9 fe51 	bl	801fd78 <tTapeDelay_setDelay>
}

void    tDattorroReverb_setInputFilter    (tDattorroReverb* const rev, float freq)
{
    _tDattorroReverb* r = *rev;
 80260d6:	f8d9 4000 	ldr.w	r4, [r9]
    
    r->input_filter = LEAF_clip(0.0f, freq, 20000.0f);
 80260da:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8026178 <tDattorroReverb_initToPool+0x370>
 80260de:	eddf 0a27 	vldr	s1, [pc, #156]	; 802617c <tDattorroReverb_initToPool+0x374>
 80260e2:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8026140 <tDattorroReverb_initToPool+0x338>
 80260e6:	f7fe f94b 	bl	8024380 <LEAF_clip>
    
    tOnePole_setFreq(&r->in_filter, r->input_filter);
 80260ea:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    r->input_filter = LEAF_clip(0.0f, freq, 20000.0f);
 80260ee:	ed84 0a02 	vstr	s0, [r4, #8]
    tOnePole_setFreq(&r->in_filter, r->input_filter);
 80260f2:	f7fc fdbf 	bl	8022c74 <tOnePole_setFreq>
}

void    tDattorroReverb_setFeedbackFilter (tDattorroReverb* const rev, float freq)
{
    _tDattorroReverb* r = *rev;
 80260f6:	f8d9 4000 	ldr.w	r4, [r9]
    
    r->feedback_filter = LEAF_clip(0.0f, freq, 20000.0f);
 80260fa:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8026178 <tDattorroReverb_initToPool+0x370>
 80260fe:	eddf 0a20 	vldr	s1, [pc, #128]	; 8026180 <tDattorroReverb_initToPool+0x378>
 8026102:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8026140 <tDattorroReverb_initToPool+0x338>
 8026106:	f7fe f93b 	bl	8024380 <LEAF_clip>
    
    tOnePole_setFreq(&r->f1_filter, r->feedback_filter);
 802610a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    r->feedback_filter = LEAF_clip(0.0f, freq, 20000.0f);
 802610e:	ed84 0a03 	vstr	s0, [r4, #12]
    tOnePole_setFreq(&r->f1_filter, r->feedback_filter);
 8026112:	f7fc fdaf 	bl	8022c74 <tOnePole_setFreq>
    tOnePole_setFreq(&r->f2_filter, r->feedback_filter);
 8026116:	ed94 0a03 	vldr	s0, [r4, #12]
 802611a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 802611e:	f7fc fda9 	bl	8022c74 <tOnePole_setFreq>
}

void    tDattorroReverb_setFeedbackGain   (tDattorroReverb* const rev, float gain)
{
    _tDattorroReverb* r = *rev;
 8026122:	f8d9 3000 	ldr.w	r3, [r9]
    r->feedback_gain = gain;
 8026126:	4a17      	ldr	r2, [pc, #92]	; (8026184 <tDattorroReverb_initToPool+0x37c>)
 8026128:	611a      	str	r2, [r3, #16]
}
 802612a:	ecbd 8b04 	vpop	{d8-d9}
 802612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026132:	bf00      	nop
 8026134:	200194a0 	.word	0x200194a0
 8026138:	3a83126f 	.word	0x3a83126f
 802613c:	43480000 	.word	0x43480000
 8026140:	00000000 	.word	0x00000000
 8026144:	200003a4 	.word	0x200003a4
 8026148:	42c80000 	.word	0x42c80000
 802614c:	41f4147b 	.word	0x41f4147b
 8026150:	3f333333 	.word	0x3f333333
 8026154:	430db0a4 	.word	0x430db0a4
 8026158:	42b27ae1 	.word	0x42b27ae1
 802615c:	42fa0000 	.word	0x42fa0000
 8026160:	3dcccccd 	.word	0x3dcccccd
 8026164:	41b4a3d7 	.word	0x41b4a3d7
 8026168:	43159eb8 	.word	0x43159eb8
 802616c:	4271eb85 	.word	0x4271eb85
 8026170:	42d48f5c 	.word	0x42d48f5c
 8026174:	3d8f5c29 	.word	0x3d8f5c29
 8026178:	469c4000 	.word	0x469c4000
 802617c:	461c4000 	.word	0x461c4000
 8026180:	459c4000 	.word	0x459c4000
 8026184:	3ecccccd 	.word	0x3ecccccd
 8026188:	20000394 	.word	0x20000394

0802618c <tDattorroReverb_init>:
    tDattorroReverb_initToPool(rev, &leaf.mempool);
 802618c:	4901      	ldr	r1, [pc, #4]	; (8026194 <tDattorroReverb_init+0x8>)
 802618e:	f7ff be3b 	b.w	8025e08 <tDattorroReverb_initToPool>
 8026192:	bf00      	nop
 8026194:	200194b8 	.word	0x200194b8

08026198 <tDattorroReverb_free>:
{
 8026198:	b510      	push	{r4, lr}
    _tDattorroReverb* r = *rev;
 802619a:	6804      	ldr	r4, [r0, #0]
    tTapeDelay_free(&r->in_delay);
 802619c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80261a0:	f7f9 fd68 	bl	801fc74 <tTapeDelay_free>
    tOnePole_free(&r->in_filter);
 80261a4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80261a8:	f7fc fd60 	bl	8022c6c <tOnePole_free>
        tAllpass_free(&r->in_allpass[i]);
 80261ac:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80261b0:	f7fc fcf8 	bl	8022ba4 <tAllpass_free>
 80261b4:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80261b8:	f7fc fcf4 	bl	8022ba4 <tAllpass_free>
 80261bc:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80261c0:	f7fc fcf0 	bl	8022ba4 <tAllpass_free>
 80261c4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80261c8:	f7fc fcec 	bl	8022ba4 <tAllpass_free>
    tAllpass_free(&r->f1_allpass);
 80261cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80261d0:	f7fc fce8 	bl	8022ba4 <tAllpass_free>
    tTapeDelay_free(&r->f1_delay_1);
 80261d4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80261d8:	f7f9 fd4c 	bl	801fc74 <tTapeDelay_free>
    tTapeDelay_free(&r->f1_delay_2);
 80261dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80261e0:	f7f9 fd48 	bl	801fc74 <tTapeDelay_free>
    tTapeDelay_free(&r->f1_delay_3);
 80261e4:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80261e8:	f7f9 fd44 	bl	801fc74 <tTapeDelay_free>
    tOnePole_free(&r->f1_filter);
 80261ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80261f0:	f7fc fd3c 	bl	8022c6c <tOnePole_free>
    tHighpass_free(&r->f1_hp);
 80261f4:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80261f8:	f7fc ff5c 	bl	80230b4 <tHighpass_free>
    tCycle_free(&r->f1_lfo);
 80261fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8026200:	f7fe ff6c 	bl	80250dc <tCycle_free>
    tAllpass_free(&r->f2_allpass);
 8026204:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8026208:	f7fc fccc 	bl	8022ba4 <tAllpass_free>
    tTapeDelay_free(&r->f2_delay_1);
 802620c:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8026210:	f7f9 fd30 	bl	801fc74 <tTapeDelay_free>
    tTapeDelay_free(&r->f2_delay_2);
 8026214:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8026218:	f7f9 fd2c 	bl	801fc74 <tTapeDelay_free>
    tTapeDelay_free(&r->f2_delay_3);
 802621c:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8026220:	f7f9 fd28 	bl	801fc74 <tTapeDelay_free>
    tOnePole_free(&r->f2_filter);
 8026224:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8026228:	f7fc fd20 	bl	8022c6c <tOnePole_free>
    tHighpass_free(&r->f2_hp);
 802622c:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8026230:	f7fc ff40 	bl	80230b4 <tHighpass_free>
    tCycle_free(&r->f2_lfo);
 8026234:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8026238:	f7fe ff50 	bl	80250dc <tCycle_free>
    mpool_free((char*)r, r->mempool);
 802623c:	6821      	ldr	r1, [r4, #0]
 802623e:	4620      	mov	r0, r4
}
 8026240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)r, r->mempool);
 8026244:	f7fe bb44 	b.w	80248d0 <mpool_free>

08026248 <tDattorroReverb_tickStereo>:
{
 8026248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802624c:	ed2d 8b06 	vpush	{d8-d10}
    _tDattorroReverb* r = *rev;
 8026250:	6804      	ldr	r4, [r0, #0]
{
 8026252:	468a      	mov	sl, r1
    	input = 0.0f;
 8026254:	eddf 9abf 	vldr	s19, [pc, #764]	; 8026554 <tDattorroReverb_tickStereo+0x30c>
    if (r->frozen)
 8026258:	69a3      	ldr	r3, [r4, #24]
	in_sample = tTapeDelay_tick(&r->in_delay, input);
 802625a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 802625e:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8026262:	f104 0650 	add.w	r6, r4, #80	; 0x50
    	input = 0.0f;
 8026266:	2b00      	cmp	r3, #0
 8026268:	fe40 9a29 	vseleq.f32	s19, s0, s19
	in_sample = tTapeDelay_tick(&r->in_delay, input);
 802626c:	eeb0 0a69 	vmov.f32	s0, s19
 8026270:	f7f9 fd0c 	bl	801fc8c <tTapeDelay_tick>
	in_sample = tOnePole_tick(&r->in_filter, in_sample);
 8026274:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8026278:	f7fc fd18 	bl	8022cac <tOnePole_tick>
 802627c:	eeb0 8a40 	vmov.f32	s16, s0
		in_sample = tAllpass_tick(&r->in_allpass[i], in_sample);
 8026280:	4628      	mov	r0, r5
 8026282:	3504      	adds	r5, #4
 8026284:	eeb0 0a48 	vmov.f32	s0, s16
 8026288:	f7fc fca0 	bl	8022bcc <tAllpass_tick>
	for (int i = 0; i < 4; i++)
 802628c:	42b5      	cmp	r5, r6
		in_sample = tAllpass_tick(&r->in_allpass[i], in_sample);
 802628e:	eeb0 8a40 	vmov.f32	s16, s0
	for (int i = 0; i < 4; i++)
 8026292:	d1f5      	bne.n	8026280 <tDattorroReverb_tickStereo+0x38>
		f1_sample = in_sample + r->f2_last; // + f2_last_out;
 8026294:	edd4 8a0d 	vldr	s17, [r4, #52]	; 0x34
		tAllpass_setDelay(&r->f1_allpass, SAMP(30.51f) + tCycle_tick(&r->f1_lfo) * SAMP(4.0f));
 8026298:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802629c:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
		f1_sample = tTapeDelay_tick(&r->f1_delay_1, f1_sample);
 80262a0:	f104 0654 	add.w	r6, r4, #84	; 0x54
		f1_sample = in_sample + r->f2_last; // + f2_last_out;
 80262a4:	ee70 8a28 	vadd.f32	s17, s0, s17
		tAllpass_setDelay(&r->f1_allpass, SAMP(30.51f) + tCycle_tick(&r->f1_lfo) * SAMP(4.0f));
 80262a8:	f7fe ff2a 	bl	8025100 <tCycle_tick>
 80262ac:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80262b0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80262b4:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8026558 <tDattorroReverb_tickStereo+0x310>
 80262b8:	4628      	mov	r0, r5
		f1_delay_2_sample = tTapeDelay_tick(&r->f1_delay_2, f1_sample * 0.5f);
 80262ba:	f104 095c 	add.w	r9, r4, #92	; 0x5c
		tAllpass_setDelay(&r->f1_allpass, SAMP(30.51f) + tCycle_tick(&r->f1_lfo) * SAMP(4.0f));
 80262be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80262c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80262c6:	eea9 0a07 	vfma.f32	s0, s18, s14
 80262ca:	f7fc fc77 	bl	8022bbc <tAllpass_setDelay>
		f1_sample = tAllpass_tick(&r->f1_allpass, f1_sample);
 80262ce:	eeb0 0a68 	vmov.f32	s0, s17
 80262d2:	4628      	mov	r0, r5
 80262d4:	f7fc fc7a 	bl	8022bcc <tAllpass_tick>
		f1_sample = tTapeDelay_tick(&r->f1_delay_1, f1_sample);
 80262d8:	4630      	mov	r0, r6
 80262da:	f7f9 fcd7 	bl	801fc8c <tTapeDelay_tick>
		f1_sample = tOnePole_tick(&r->f1_filter, f1_sample);
 80262de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80262e2:	f7fc fce3 	bl	8022cac <tOnePole_tick>
		f1_sample = f1_sample + r->f1_delay_2_last * 0.5f;
 80262e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80262ea:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
		f1_delay_2_sample = tTapeDelay_tick(&r->f1_delay_2, f1_sample * 0.5f);
 80262ee:	4648      	mov	r0, r9
		f1_sample = f1_sample + r->f1_delay_2_last * 0.5f;
 80262f0:	eea7 0a27 	vfma.f32	s0, s14, s15
 80262f4:	eef0 8a40 	vmov.f32	s17, s0
		f1_delay_2_sample = tTapeDelay_tick(&r->f1_delay_2, f1_sample * 0.5f);
 80262f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80262fc:	f7f9 fcc6 	bl	801fc8c <tTapeDelay_tick>
 8026300:	eef0 7a40 	vmov.f32	s15, s0
		f1_sample = tHighpass_tick(&r->f1_hp, f1_sample);
 8026304:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8026308:	ee38 0a80 	vadd.f32	s0, s17, s0
		r->f1_delay_2_last = f1_delay_2_sample;
 802630c:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
		f1_sample = tHighpass_tick(&r->f1_hp, f1_sample);
 8026310:	f7fc fee4 	bl	80230dc <tHighpass_tick>
		if (r->frozen)
 8026314:	69a3      	ldr	r3, [r4, #24]
		f1_sample *= r->feedback_gain;
 8026316:	edd4 7a04 	vldr	s15, [r4, #16]
		if (r->frozen)
 802631a:	2b00      	cmp	r3, #0
 802631c:	f040 8114 	bne.w	8026548 <tDattorroReverb_tickStereo+0x300>
		f1_sample *= r->feedback_gain;
 8026320:	ee27 0a80 	vmul.f32	s0, s15, s0
		r->f1_last = tTapeDelay_tick(&r->f1_delay_3, f1_sample);
 8026324:	f104 0860 	add.w	r8, r4, #96	; 0x60
		tAllpass_setDelay(&r->f2_allpass, SAMP(22.58f) + tCycle_tick(&r->f2_lfo) * SAMP(4.0f));
 8026328:	f104 076c 	add.w	r7, r4, #108	; 0x6c
		f2_sample = tTapeDelay_tick(&r->f2_delay_1, f2_sample);
 802632c:	f104 0570 	add.w	r5, r4, #112	; 0x70
		f2_delay_2_sample = tTapeDelay_tick(&r->f2_delay_2, f2_sample * 0.5f);
 8026330:	f104 0b78 	add.w	fp, r4, #120	; 0x78
		r->f1_last = tTapeDelay_tick(&r->f1_delay_3, f1_sample);
 8026334:	4640      	mov	r0, r8
 8026336:	f7f9 fca9 	bl	801fc8c <tTapeDelay_tick>
		tAllpass_setDelay(&r->f2_allpass, SAMP(22.58f) + tCycle_tick(&r->f2_lfo) * SAMP(4.0f));
 802633a:	f104 0084 	add.w	r0, r4, #132	; 0x84
		r->f1_last = tTapeDelay_tick(&r->f1_delay_3, f1_sample);
 802633e:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
		f2_sample = in_sample + r->f1_last;
 8026342:	ee30 8a08 	vadd.f32	s16, s0, s16
		tAllpass_setDelay(&r->f2_allpass, SAMP(22.58f) + tCycle_tick(&r->f2_lfo) * SAMP(4.0f));
 8026346:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
 802634a:	f7fe fed9 	bl	8025100 <tCycle_tick>
 802634e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8026352:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8026356:	ed9f 7a81 	vldr	s14, [pc, #516]	; 802655c <tDattorroReverb_tickStereo+0x314>
 802635a:	4638      	mov	r0, r7
 802635c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8026360:	ee27 0a80 	vmul.f32	s0, s15, s0
 8026364:	eea8 0a87 	vfma.f32	s0, s17, s14
 8026368:	f7fc fc28 	bl	8022bbc <tAllpass_setDelay>
		f2_sample = tAllpass_tick(&r->f2_allpass, f2_sample);
 802636c:	eeb0 0a48 	vmov.f32	s0, s16
 8026370:	4638      	mov	r0, r7
 8026372:	f7fc fc2b 	bl	8022bcc <tAllpass_tick>
		f2_sample = tTapeDelay_tick(&r->f2_delay_1, f2_sample);
 8026376:	4628      	mov	r0, r5
 8026378:	f7f9 fc88 	bl	801fc8c <tTapeDelay_tick>
		f2_sample = tOnePole_tick(&r->f2_filter, f2_sample);
 802637c:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8026380:	f7fc fc94 	bl	8022cac <tOnePole_tick>
		f2_sample = f2_sample + r->f2_delay_2_last * 0.5f;
 8026384:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8026388:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
		f2_delay_2_sample = tTapeDelay_tick(&r->f2_delay_2, f2_sample * 0.5f);
 802638c:	4658      	mov	r0, fp
		f2_sample = f2_sample + r->f2_delay_2_last * 0.5f;
 802638e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8026392:	eeb0 8a40 	vmov.f32	s16, s0
		f2_delay_2_sample = tTapeDelay_tick(&r->f2_delay_2, f2_sample * 0.5f);
 8026396:	ee20 0a27 	vmul.f32	s0, s0, s15
 802639a:	f7f9 fc77 	bl	801fc8c <tTapeDelay_tick>
 802639e:	eef0 7a40 	vmov.f32	s15, s0
		f2_sample = tHighpass_tick(&r->f2_hp, f2_sample);
 80263a2:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80263a6:	ee38 0a00 	vadd.f32	s0, s16, s0
		r->f2_delay_2_last = f2_delay_2_sample;
 80263aa:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		f2_sample = tHighpass_tick(&r->f2_hp, f2_sample);
 80263ae:	f7fc fe95 	bl	80230dc <tHighpass_tick>
		if (r->frozen)
 80263b2:	69a3      	ldr	r3, [r4, #24]
		f2_sample *= r->feedback_gain;
 80263b4:	edd4 7a04 	vldr	s15, [r4, #16]
		if (r->frozen)
 80263b8:	2b00      	cmp	r3, #0
 80263ba:	f000 80c8 	beq.w	802654e <tDattorroReverb_tickStereo+0x306>
			f2_sample = 0.0f;
 80263be:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8026554 <tDattorroReverb_tickStereo+0x30c>
		r->f2_last = tTapeDelay_tick(&r->f2_delay_3, f2_sample);
 80263c2:	f104 077c 	add.w	r7, r4, #124	; 0x7c
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_2, SAMP(6.3f));
 80263c6:	ed9f aa66 	vldr	s20, [pc, #408]	; 8026560 <tDattorroReverb_tickStereo+0x318>
		r->f2_last = tTapeDelay_tick(&r->f2_delay_3, f2_sample);
 80263ca:	4638      	mov	r0, r7
 80263cc:	f7f9 fc5e 	bl	801fc8c <tTapeDelay_tick>
    f1_sample =     tTapeDelay_tapOut(&r->f1_delay_1, SAMP(8.9f)) +
 80263d0:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 80263d4:	eddf 7a63 	vldr	s15, [pc, #396]	; 8026564 <tDattorroReverb_tickStereo+0x31c>
 80263d8:	4630      	mov	r0, r6
		r->f2_last = tTapeDelay_tick(&r->f2_delay_3, f2_sample);
 80263da:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    f1_sample =     tTapeDelay_tapOut(&r->f1_delay_1, SAMP(8.9f)) +
 80263de:	ee27 0a27 	vmul.f32	s0, s14, s15
 80263e2:	f7f9 fcd9 	bl	801fd98 <tTapeDelay_tapOut>
    tTapeDelay_tapOut(&r->f1_delay_1, SAMP(99.8f));
 80263e6:	eddf 7a60 	vldr	s15, [pc, #384]	; 8026568 <tDattorroReverb_tickStereo+0x320>
    f1_sample =     tTapeDelay_tapOut(&r->f1_delay_1, SAMP(8.9f)) +
 80263ea:	eeb0 8a40 	vmov.f32	s16, s0
    tTapeDelay_tapOut(&r->f1_delay_1, SAMP(99.8f));
 80263ee:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 80263f2:	4630      	mov	r0, r6
 80263f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80263f8:	f7f9 fcce 	bl	801fd98 <tTapeDelay_tapOut>
    f1_sample -=    tTapeDelay_tapOut(&r->f1_delay_2, SAMP(64.2f));
 80263fc:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8026400:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802656c <tDattorroReverb_tickStereo+0x324>
 8026404:	ee38 8a00 	vadd.f32	s16, s16, s0
 8026408:	4648      	mov	r0, r9
 802640a:	ee27 0a27 	vmul.f32	s0, s14, s15
 802640e:	f7f9 fcc3 	bl	801fd98 <tTapeDelay_tapOut>
    f1_sample +=    tTapeDelay_tapOut(&r->f1_delay_3, SAMP(67.f));
 8026412:	eddf 7a57 	vldr	s15, [pc, #348]	; 8026570 <tDattorroReverb_tickStereo+0x328>
    f1_sample -=    tTapeDelay_tapOut(&r->f1_delay_2, SAMP(64.2f));
 8026416:	eef0 8a40 	vmov.f32	s17, s0
    f1_sample +=    tTapeDelay_tapOut(&r->f1_delay_3, SAMP(67.f));
 802641a:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 802641e:	4640      	mov	r0, r8
 8026420:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026424:	f7f9 fcb8 	bl	801fd98 <tTapeDelay_tapOut>
 8026428:	ee30 9a08 	vadd.f32	s18, s0, s16
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_1, SAMP(66.8f));
 802642c:	eddf 7a51 	vldr	s15, [pc, #324]	; 8026574 <tDattorroReverb_tickStereo+0x32c>
 8026430:	4628      	mov	r0, r5
 8026432:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
    f1_sample +=    tTapeDelay_tapOut(&r->f1_delay_3, SAMP(67.f));
 8026436:	ee39 9a68 	vsub.f32	s18, s18, s17
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_1, SAMP(66.8f));
 802643a:	ee20 0a27 	vmul.f32	s0, s0, s15
 802643e:	f7f9 fcab 	bl	801fd98 <tTapeDelay_tapOut>
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_2, SAMP(6.3f));
 8026442:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_1, SAMP(66.8f));
 8026446:	ee39 9a40 	vsub.f32	s18, s18, s0
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_2, SAMP(6.3f));
 802644a:	4658      	mov	r0, fp
 802644c:	ee27 0a8a 	vmul.f32	s0, s15, s20
 8026450:	f7f9 fca2 	bl	801fd98 <tTapeDelay_tapOut>
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_3, SAMP(35.8f));
 8026454:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8026458:	eddf 7a47 	vldr	s15, [pc, #284]	; 8026578 <tDattorroReverb_tickStereo+0x330>
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_2, SAMP(6.3f));
 802645c:	ee39 9a40 	vsub.f32	s18, s18, s0
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_3, SAMP(35.8f));
 8026460:	4638      	mov	r0, r7
 8026462:	ee27 0a27 	vmul.f32	s0, s14, s15
 8026466:	f7f9 fc97 	bl	801fd98 <tTapeDelay_tapOut>
    f2_sample =     tTapeDelay_tapOut(&r->f2_delay_1, SAMP(11.8f)) +
 802646a:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 802646e:	eddf 7a43 	vldr	s15, [pc, #268]	; 802657c <tDattorroReverb_tickStereo+0x334>
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_3, SAMP(35.8f));
 8026472:	ee39 9a40 	vsub.f32	s18, s18, s0
    f2_sample =     tTapeDelay_tapOut(&r->f2_delay_1, SAMP(11.8f)) +
 8026476:	4628      	mov	r0, r5
 8026478:	ee27 0a27 	vmul.f32	s0, s14, s15
 802647c:	f7f9 fc8c 	bl	801fd98 <tTapeDelay_tapOut>
    tTapeDelay_tapOut(&r->f2_delay_1, SAMP(121.7f));
 8026480:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8026580 <tDattorroReverb_tickStereo+0x338>
    f2_sample =     tTapeDelay_tapOut(&r->f2_delay_1, SAMP(11.8f)) +
 8026484:	eef0 8a40 	vmov.f32	s17, s0
    tTapeDelay_tapOut(&r->f2_delay_1, SAMP(121.7f));
 8026488:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 802648c:	4628      	mov	r0, r5
 802648e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026492:	f7f9 fc81 	bl	801fd98 <tTapeDelay_tapOut>
    f2_sample -=    tTapeDelay_tapOut(&r->f2_delay_2, SAMP(6.3f));
 8026496:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 802649a:	ee78 8a80 	vadd.f32	s17, s17, s0
 802649e:	4658      	mov	r0, fp
 80264a0:	ee27 0a8a 	vmul.f32	s0, s15, s20
 80264a4:	f7f9 fc78 	bl	801fd98 <tTapeDelay_tapOut>
    f2_sample +=    tTapeDelay_tapOut(&r->f2_delay_3, SAMP(89.7f));
 80264a8:	eddf 7a36 	vldr	s15, [pc, #216]	; 8026584 <tDattorroReverb_tickStereo+0x33c>
    f2_sample -=    tTapeDelay_tapOut(&r->f2_delay_2, SAMP(6.3f));
 80264ac:	eeb0 aa40 	vmov.f32	s20, s0
    f2_sample +=    tTapeDelay_tapOut(&r->f2_delay_3, SAMP(89.7f));
 80264b0:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 80264b4:	4638      	mov	r0, r7
 80264b6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80264ba:	f7f9 fc6d 	bl	801fd98 <tTapeDelay_tapOut>
 80264be:	ee30 8a28 	vadd.f32	s16, s0, s17
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_1, SAMP(70.8f));
 80264c2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8026588 <tDattorroReverb_tickStereo+0x340>
 80264c6:	4630      	mov	r0, r6
 80264c8:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
    f2_sample +=    tTapeDelay_tapOut(&r->f2_delay_3, SAMP(89.7f));
 80264cc:	ee38 8a4a 	vsub.f32	s16, s16, s20
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_1, SAMP(70.8f));
 80264d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80264d4:	f7f9 fc60 	bl	801fd98 <tTapeDelay_tapOut>
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_2, SAMP(11.2f));
 80264d8:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 80264dc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802658c <tDattorroReverb_tickStereo+0x344>
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_1, SAMP(70.8f));
 80264e0:	ee38 8a40 	vsub.f32	s16, s16, s0
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_2, SAMP(11.2f));
 80264e4:	4648      	mov	r0, r9
 80264e6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80264ea:	f7f9 fc55 	bl	801fd98 <tTapeDelay_tapOut>
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_3, SAMP(4.1f));
 80264ee:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 80264f2:	eddf 7a27 	vldr	s15, [pc, #156]	; 8026590 <tDattorroReverb_tickStereo+0x348>
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_2, SAMP(11.2f));
 80264f6:	ee38 8a40 	vsub.f32	s16, s16, s0
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_3, SAMP(4.1f));
 80264fa:	4640      	mov	r0, r8
 80264fc:	ee27 0a27 	vmul.f32	s0, s14, s15
 8026500:	f7f9 fc4a 	bl	801fd98 <tTapeDelay_tapOut>
    output[0] = input * (1.0f - r->mix) + f1_sample  * r->mix;
 8026504:	ed94 6a05 	vldr	s12, [r4, #20]
 8026508:	eddf 6a22 	vldr	s13, [pc, #136]	; 8026594 <tDattorroReverb_tickStereo+0x34c>
 802650c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_3, SAMP(4.1f));
 8026510:	ee38 0a40 	vsub.f32	s0, s16, s0
    output[0] = input * (1.0f - r->mix) + f1_sample  * r->mix;
 8026514:	ee66 7a26 	vmul.f32	s15, s12, s13
 8026518:	ee37 6a46 	vsub.f32	s12, s14, s12
 802651c:	ee27 9a89 	vmul.f32	s18, s15, s18
 8026520:	eea6 9a29 	vfma.f32	s18, s12, s19
 8026524:	ed8a 9a00 	vstr	s18, [sl]
    output[1] = input * (1.0f - r->mix) + f2_sample * r->mix;
 8026528:	edd4 7a05 	vldr	s15, [r4, #20]
 802652c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8026530:	ee37 7a67 	vsub.f32	s14, s14, s15
 8026534:	ee20 0a26 	vmul.f32	s0, s0, s13
 8026538:	eea7 0a29 	vfma.f32	s0, s14, s19
 802653c:	ed8a 0a01 	vstr	s0, [sl, #4]
}
 8026540:	ecbd 8b06 	vpop	{d8-d10}
 8026544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			f1_sample = 0.0f;
 8026548:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8026554 <tDattorroReverb_tickStereo+0x30c>
 802654c:	e6ea      	b.n	8026324 <tDattorroReverb_tickStereo+0xdc>
		f2_sample *= r->feedback_gain;
 802654e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8026552:	e736      	b.n	80263c2 <tDattorroReverb_tickStereo+0x17a>
 8026554:	00000000 	.word	0x00000000
 8026558:	41f4147b 	.word	0x41f4147b
 802655c:	41b4a3d7 	.word	0x41b4a3d7
 8026560:	40c9999a 	.word	0x40c9999a
 8026564:	410e6666 	.word	0x410e6666
 8026568:	42c7999a 	.word	0x42c7999a
 802656c:	42806666 	.word	0x42806666
 8026570:	42860000 	.word	0x42860000
 8026574:	4285999a 	.word	0x4285999a
 8026578:	420f3333 	.word	0x420f3333
 802657c:	413ccccd 	.word	0x413ccccd
 8026580:	42f36666 	.word	0x42f36666
 8026584:	42b36666 	.word	0x42b36666
 8026588:	428d999a 	.word	0x428d999a
 802658c:	41333333 	.word	0x41333333
 8026590:	40833333 	.word	0x40833333
 8026594:	3e0f5c29 	.word	0x3e0f5c29

08026598 <tDattorroReverb_setMix>:
{
 8026598:	b510      	push	{r4, lr}
    _tDattorroReverb* r = *rev;
 802659a:	6804      	ldr	r4, [r0, #0]
    r->mix = LEAF_clip(0.0f, mix, 1.0f);
 802659c:	eef0 0a40 	vmov.f32	s1, s0
 80265a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80265a4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80265b4 <tDattorroReverb_setMix+0x1c>
 80265a8:	f7fd feea 	bl	8024380 <LEAF_clip>
 80265ac:	ed84 0a05 	vstr	s0, [r4, #20]
}
 80265b0:	bd10      	pop	{r4, pc}
 80265b2:	bf00      	nop
 80265b4:	00000000 	.word	0x00000000

080265b8 <tDattorroReverb_setFreeze>:
{
 80265b8:	b570      	push	{r4, r5, r6, lr}
    _tDattorroReverb* r = *rev;
 80265ba:	6804      	ldr	r4, [r0, #0]
    r->frozen = freeze;
 80265bc:	61a1      	str	r1, [r4, #24]
 80265be:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80265c2:	f104 0650 	add.w	r6, r4, #80	; 0x50
 80265c6:	f104 0568 	add.w	r5, r4, #104	; 0x68
 80265ca:	3484      	adds	r4, #132	; 0x84
    if (freeze)
 80265cc:	b9a1      	cbnz	r1, 80265f8 <tDattorroReverb_setFreeze+0x40>
    	tAllpass_setGain(&r->f2_allpass, 0.7f);
 80265ce:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8026624 <tDattorroReverb_setFreeze+0x6c>
 80265d2:	f7fc faf7 	bl	8022bc4 <tAllpass_setGain>
    	tAllpass_setGain(&r->f1_allpass, 0.7f);
 80265d6:	4630      	mov	r0, r6
 80265d8:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8026624 <tDattorroReverb_setFreeze+0x6c>
 80265dc:	f7fc faf2 	bl	8022bc4 <tAllpass_setGain>
    	tCycle_setFreq(&r->f1_lfo, 0.1f);
 80265e0:	4628      	mov	r0, r5
 80265e2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8026628 <tDattorroReverb_setFreeze+0x70>
 80265e6:	f7fe fd7d 	bl	80250e4 <tCycle_setFreq>
    	tCycle_setFreq(&r->f2_lfo, 0.07f);
 80265ea:	4620      	mov	r0, r4
 80265ec:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 802662c <tDattorroReverb_setFreeze+0x74>
}
 80265f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    	tCycle_setFreq(&r->f2_lfo, 0.07f);
 80265f4:	f7fe bd76 	b.w	80250e4 <tCycle_setFreq>
    	tAllpass_setGain(&r->f2_allpass, 1.0f);
 80265f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80265fc:	f7fc fae2 	bl	8022bc4 <tAllpass_setGain>
    	tAllpass_setGain(&r->f1_allpass, 1.0f);
 8026600:	4630      	mov	r0, r6
 8026602:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8026606:	f7fc fadd 	bl	8022bc4 <tAllpass_setGain>
    	tCycle_setFreq(&r->f1_lfo, 0.0f);
 802660a:	4628      	mov	r0, r5
 802660c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8026630 <tDattorroReverb_setFreeze+0x78>
 8026610:	f7fe fd68 	bl	80250e4 <tCycle_setFreq>
    	tCycle_setFreq(&r->f2_lfo, 0.0f);
 8026614:	4620      	mov	r0, r4
 8026616:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8026630 <tDattorroReverb_setFreeze+0x78>
}
 802661a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    	tCycle_setFreq(&r->f2_lfo, 0.0f);
 802661e:	f7fe bd61 	b.w	80250e4 <tCycle_setFreq>
 8026622:	bf00      	nop
 8026624:	3f333333 	.word	0x3f333333
 8026628:	3dcccccd 	.word	0x3dcccccd
 802662c:	3d8f5c29 	.word	0x3d8f5c29
 8026630:	00000000 	.word	0x00000000

08026634 <tDattorroReverb_setHP>:
{
 8026634:	b510      	push	{r4, lr}
    float newFreq = LEAF_clip(20.0f, freq, 20000.0f);
 8026636:	eef0 0a40 	vmov.f32	s1, s0
 802663a:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 802666c <tDattorroReverb_setHP+0x38>
 802663e:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
{
 8026642:	ed2d 8b02 	vpush	{d8}
    _tDattorroReverb* r = *rev;
 8026646:	6804      	ldr	r4, [r0, #0]
    float newFreq = LEAF_clip(20.0f, freq, 20000.0f);
 8026648:	f7fd fe9a 	bl	8024380 <LEAF_clip>
 802664c:	eeb0 8a40 	vmov.f32	s16, s0
    tHighpass_setFreq(&r->f1_hp, newFreq);
 8026650:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8026654:	f7fc fd32 	bl	80230bc <tHighpass_setFreq>
    tHighpass_setFreq(&r->f2_hp, newFreq);
 8026658:	f104 0080 	add.w	r0, r4, #128	; 0x80
 802665c:	eeb0 0a48 	vmov.f32	s0, s16
}
 8026660:	ecbd 8b02 	vpop	{d8}
 8026664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tHighpass_setFreq(&r->f2_hp, newFreq);
 8026668:	f7fc bd28 	b.w	80230bc <tHighpass_setFreq>
 802666c:	469c4000 	.word	0x469c4000

08026670 <tDattorroReverb_setSize>:
{
 8026670:	b510      	push	{r4, lr}
    _tDattorroReverb* r = *rev;
 8026672:	6804      	ldr	r4, [r0, #0]
    r->size = LEAF_clip(0.01f, size*r->size_max, r->size_max);
 8026674:	ed94 1a08 	vldr	s2, [r4, #32]
 8026678:	ee61 0a00 	vmul.f32	s1, s2, s0
 802667c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8026718 <tDattorroReverb_setSize+0xa8>
 8026680:	f7fd fe7e 	bl	8024380 <LEAF_clip>
    r->t = r->size * leaf.sampleRate * 0.001f;
 8026684:	4b25      	ldr	r3, [pc, #148]	; (802671c <tDattorroReverb_setSize+0xac>)
 8026686:	eddf 6a26 	vldr	s13, [pc, #152]	; 8026720 <tDattorroReverb_setSize+0xb0>
    tTapeDelay_setDelay(&r->f1_delay_1, SAMP(141.69f));
 802668a:	f104 0054 	add.w	r0, r4, #84	; 0x54
    r->t = r->size * leaf.sampleRate * 0.001f;
 802668e:	edd3 7a00 	vldr	s15, [r3]
    r->size = LEAF_clip(0.01f, size*r->size_max, r->size_max);
 8026692:	ed84 0a07 	vstr	s0, [r4, #28]
    r->t = r->size * leaf.sampleRate * 0.001f;
 8026696:	ee67 7aa6 	vmul.f32	s15, s15, s13
    tTapeDelay_setDelay(&r->f1_delay_1, SAMP(141.69f));
 802669a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8026724 <tDattorroReverb_setSize+0xb4>
    r->t = r->size * leaf.sampleRate * 0.001f;
 802669e:	ee27 0a80 	vmul.f32	s0, s15, s0
 80266a2:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    tTapeDelay_setDelay(&r->f1_delay_1, SAMP(141.69f));
 80266a6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80266aa:	f7f9 fb65 	bl	801fd78 <tTapeDelay_setDelay>
    tTapeDelay_setDelay(&r->f1_delay_2, SAMP(89.24f));
 80266ae:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 80266b2:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8026728 <tDattorroReverb_setSize+0xb8>
 80266b6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80266ba:	ee20 0a27 	vmul.f32	s0, s0, s15
 80266be:	f7f9 fb5b 	bl	801fd78 <tTapeDelay_setDelay>
    tTapeDelay_setDelay(&r->f1_delay_3, SAMP(125.f));
 80266c2:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 80266c6:	eddf 7a19 	vldr	s15, [pc, #100]	; 802672c <tDattorroReverb_setSize+0xbc>
 80266ca:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80266ce:	ee20 0a27 	vmul.f32	s0, s0, s15
 80266d2:	f7f9 fb51 	bl	801fd78 <tTapeDelay_setDelay>
    tTapeDelay_setDelay(&r->f2_delay_1, SAMP(149.62f));
 80266d6:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 80266da:	eddf 7a15 	vldr	s15, [pc, #84]	; 8026730 <tDattorroReverb_setSize+0xc0>
 80266de:	f104 0070 	add.w	r0, r4, #112	; 0x70
 80266e2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80266e6:	f7f9 fb47 	bl	801fd78 <tTapeDelay_setDelay>
    tTapeDelay_setDelay(&r->f2_delay_2, SAMP(60.48f));
 80266ea:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 80266ee:	eddf 7a11 	vldr	s15, [pc, #68]	; 8026734 <tDattorroReverb_setSize+0xc4>
 80266f2:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80266f6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80266fa:	f7f9 fb3d 	bl	801fd78 <tTapeDelay_setDelay>
    tTapeDelay_setDelay(&r->f2_delay_3, SAMP(106.28f));
 80266fe:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8026702:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8026738 <tDattorroReverb_setSize+0xc8>
 8026706:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 802670a:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 802670e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tTapeDelay_setDelay(&r->f2_delay_3, SAMP(106.28f));
 8026712:	f7f9 bb31 	b.w	801fd78 <tTapeDelay_setDelay>
 8026716:	bf00      	nop
 8026718:	3c23d70a 	.word	0x3c23d70a
 802671c:	200194a0 	.word	0x200194a0
 8026720:	3a83126f 	.word	0x3a83126f
 8026724:	430db0a4 	.word	0x430db0a4
 8026728:	42b27ae1 	.word	0x42b27ae1
 802672c:	42fa0000 	.word	0x42fa0000
 8026730:	43159eb8 	.word	0x43159eb8
 8026734:	4271eb85 	.word	0x4271eb85
 8026738:	42d48f5c 	.word	0x42d48f5c

0802673c <tDattorroReverb_setInputFilter>:
{
 802673c:	b510      	push	{r4, lr}
    _tDattorroReverb* r = *rev;
 802673e:	6804      	ldr	r4, [r0, #0]
    r->input_filter = LEAF_clip(0.0f, freq, 20000.0f);
 8026740:	eef0 0a40 	vmov.f32	s1, s0
 8026744:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8026760 <tDattorroReverb_setInputFilter+0x24>
 8026748:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8026764 <tDattorroReverb_setInputFilter+0x28>
 802674c:	f7fd fe18 	bl	8024380 <LEAF_clip>
    tOnePole_setFreq(&r->in_filter, r->input_filter);
 8026750:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    r->input_filter = LEAF_clip(0.0f, freq, 20000.0f);
 8026754:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8026758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tOnePole_setFreq(&r->in_filter, r->input_filter);
 802675c:	f7fc ba8a 	b.w	8022c74 <tOnePole_setFreq>
 8026760:	469c4000 	.word	0x469c4000
 8026764:	00000000 	.word	0x00000000

08026768 <tDattorroReverb_setFeedbackFilter>:
{
 8026768:	b510      	push	{r4, lr}
    _tDattorroReverb* r = *rev;
 802676a:	6804      	ldr	r4, [r0, #0]
    r->feedback_filter = LEAF_clip(0.0f, freq, 20000.0f);
 802676c:	eef0 0a40 	vmov.f32	s1, s0
 8026770:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8026798 <tDattorroReverb_setFeedbackFilter+0x30>
 8026774:	ed9f 0a09 	vldr	s0, [pc, #36]	; 802679c <tDattorroReverb_setFeedbackFilter+0x34>
 8026778:	f7fd fe02 	bl	8024380 <LEAF_clip>
    tOnePole_setFreq(&r->f1_filter, r->feedback_filter);
 802677c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    r->feedback_filter = LEAF_clip(0.0f, freq, 20000.0f);
 8026780:	ed84 0a03 	vstr	s0, [r4, #12]
    tOnePole_setFreq(&r->f1_filter, r->feedback_filter);
 8026784:	f7fc fa76 	bl	8022c74 <tOnePole_setFreq>
    tOnePole_setFreq(&r->f2_filter, r->feedback_filter);
 8026788:	ed94 0a03 	vldr	s0, [r4, #12]
 802678c:	f104 0074 	add.w	r0, r4, #116	; 0x74
}
 8026790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tOnePole_setFreq(&r->f2_filter, r->feedback_filter);
 8026794:	f7fc ba6e 	b.w	8022c74 <tOnePole_setFreq>
 8026798:	469c4000 	.word	0x469c4000
 802679c:	00000000 	.word	0x00000000

080267a0 <tDattorroReverb_setFeedbackGain>:
    _tDattorroReverb* r = *rev;
 80267a0:	6803      	ldr	r3, [r0, #0]
    r->feedback_gain = gain;
 80267a2:	ed83 0a04 	vstr	s0, [r3, #16]
}
 80267a6:	4770      	bx	lr

080267a8 <tBuffer_initToPool>:
{
    tBuffer_initToPool(sb, length, &leaf.mempool);
}

void  tBuffer_initToPool (tBuffer* const sb, uint32_t length, tMempool* const mp)
{
 80267a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 80267aa:	6815      	ldr	r5, [r2, #0]
{
 80267ac:	460e      	mov	r6, r1
 80267ae:	4607      	mov	r7, r0
    _tBuffer* s = *sb = (_tBuffer*) mpool_alloc(sizeof(_tBuffer), m);
 80267b0:	201c      	movs	r0, #28
 80267b2:	4629      	mov	r1, r5
 80267b4:	f7fd ffe4 	bl	8024780 <mpool_alloc>
 80267b8:	4604      	mov	r4, r0
    s->mempool = m;
    
    s->buff = (float*) mpool_alloc( sizeof(float) * length, m);
 80267ba:	4629      	mov	r1, r5
 80267bc:	00b0      	lsls	r0, r6, #2
    _tBuffer* s = *sb = (_tBuffer*) mpool_alloc(sizeof(_tBuffer), m);
 80267be:	603c      	str	r4, [r7, #0]
    s->mempool = m;
 80267c0:	6025      	str	r5, [r4, #0]
    s->buff = (float*) mpool_alloc( sizeof(float) * length, m);
 80267c2:	f7fd ffdd 	bl	8024780 <mpool_alloc>
    
    s->bufferLength = length;
    s->recordedLength = 0;
 80267c6:	2300      	movs	r3, #0
    s->buff = (float*) mpool_alloc( sizeof(float) * length, m);
 80267c8:	6060      	str	r0, [r4, #4]
    s->active = 0;
 80267ca:	61a3      	str	r3, [r4, #24]
    s->idx = 0;
 80267cc:	60a3      	str	r3, [r4, #8]
    s->mode = RecordOneShot;
 80267ce:	7523      	strb	r3, [r4, #20]
    s->recordedLength = 0;
 80267d0:	e9c4 6303 	strd	r6, r3, [r4, #12]
}
 80267d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80267d6:	bf00      	nop

080267d8 <tBuffer_free>:

void  tBuffer_free (tBuffer* const sb)
{
 80267d8:	b510      	push	{r4, lr}
    _tBuffer* s = *sb;
 80267da:	6804      	ldr	r4, [r0, #0]
    
    mpool_free((char*)s->buff, s->mempool);
 80267dc:	e9d4 1000 	ldrd	r1, r0, [r4]
 80267e0:	f7fe f876 	bl	80248d0 <mpool_free>
    mpool_free((char*)s, s->mempool);
 80267e4:	6821      	ldr	r1, [r4, #0]
 80267e6:	4620      	mov	r0, r4
}
 80267e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)s, s->mempool);
 80267ec:	f7fe b870 	b.w	80248d0 <mpool_free>

080267f0 <tBuffer_tick>:

void tBuffer_tick (tBuffer* const sb, float sample)
{
    _tBuffer* s = *sb;
 80267f0:	6803      	ldr	r3, [r0, #0]
    
    if (s->active == 1)
 80267f2:	699a      	ldr	r2, [r3, #24]
 80267f4:	2a01      	cmp	r2, #1
 80267f6:	d000      	beq.n	80267fa <tBuffer_tick+0xa>
                s->idx = 0;
            }
        }
        s->recordedLength = s->idx;
    }
}
 80267f8:	4770      	bx	lr
        s->buff[s->idx] = sample;
 80267fa:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 80267fe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8026802:	ed82 0a00 	vstr	s0, [r2]
        if (s->idx >= s->bufferLength)
 8026806:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
        s->idx += 1;
 802680a:	3201      	adds	r2, #1
        if (s->idx >= s->bufferLength)
 802680c:	428a      	cmp	r2, r1
        s->idx += 1;
 802680e:	609a      	str	r2, [r3, #8]
        if (s->idx >= s->bufferLength)
 8026810:	d304      	bcc.n	802681c <tBuffer_tick+0x2c>
            if (s->mode == RecordOneShot)
 8026812:	7d19      	ldrb	r1, [r3, #20]
 8026814:	b921      	cbnz	r1, 8026820 <tBuffer_tick+0x30>
    s->idx = 0;
}

void  tBuffer_stop(tBuffer* const sb)
{
    _tBuffer* s = *sb;
 8026816:	6802      	ldr	r2, [r0, #0]
    s->active = 0;
 8026818:	6191      	str	r1, [r2, #24]
 802681a:	689a      	ldr	r2, [r3, #8]
        s->recordedLength = s->idx;
 802681c:	611a      	str	r2, [r3, #16]
}
 802681e:	4770      	bx	lr
            else if (s->mode == RecordLoop)
 8026820:	2901      	cmp	r1, #1
 8026822:	d1fb      	bne.n	802681c <tBuffer_tick+0x2c>
                s->idx = 0;
 8026824:	2100      	movs	r1, #0
 8026826:	460a      	mov	r2, r1
 8026828:	6099      	str	r1, [r3, #8]
 802682a:	e7f7      	b.n	802681c <tBuffer_tick+0x2c>

0802682c <tBuffer_get>:
    if ((idx < 0) || (idx >= s->bufferLength)) return 0.f;
 802682c:	2900      	cmp	r1, #0
 802682e:	db09      	blt.n	8026844 <tBuffer_get+0x18>
    _tBuffer* s = *sb;
 8026830:	6803      	ldr	r3, [r0, #0]
    if ((idx < 0) || (idx >= s->bufferLength)) return 0.f;
 8026832:	68da      	ldr	r2, [r3, #12]
 8026834:	428a      	cmp	r2, r1
 8026836:	d905      	bls.n	8026844 <tBuffer_get+0x18>
    return s->buff[idx];
 8026838:	685b      	ldr	r3, [r3, #4]
 802683a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 802683e:	ed91 0a00 	vldr	s0, [r1]
 8026842:	4770      	bx	lr
    if ((idx < 0) || (idx >= s->bufferLength)) return 0.f;
 8026844:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802684c <tBuffer_get+0x20>
}
 8026848:	4770      	bx	lr
 802684a:	bf00      	nop
 802684c:	00000000 	.word	0x00000000

08026850 <tBuffer_record>:
    _tBuffer* s = *sb;
 8026850:	6803      	ldr	r3, [r0, #0]
    s->active = 1;
 8026852:	2101      	movs	r1, #1
    s->idx = 0;
 8026854:	2200      	movs	r2, #0
    s->active = 1;
 8026856:	6199      	str	r1, [r3, #24]
    s->idx = 0;
 8026858:	609a      	str	r2, [r3, #8]
}
 802685a:	4770      	bx	lr

0802685c <tBuffer_stop>:
    _tBuffer* s = *sb;
 802685c:	6803      	ldr	r3, [r0, #0]
    s->active = 0;
 802685e:	2200      	movs	r2, #0
 8026860:	619a      	str	r2, [r3, #24]
}
 8026862:	4770      	bx	lr

08026864 <tBuffer_getRecordPosition>:

int   tBuffer_getRecordPosition(tBuffer* const sb)
{
    _tBuffer* s = *sb;
    return s->idx;
 8026864:	6803      	ldr	r3, [r0, #0]
}
 8026866:	6898      	ldr	r0, [r3, #8]
 8026868:	4770      	bx	lr
 802686a:	bf00      	nop

0802686c <tBuffer_setRecordPosition>:

void   tBuffer_setRecordPosition(tBuffer* const sb, int pos)
{
    _tBuffer* s = *sb;
 802686c:	6803      	ldr	r3, [r0, #0]
    s->idx = pos;
 802686e:	6099      	str	r1, [r3, #8]
}
 8026870:	4770      	bx	lr
 8026872:	bf00      	nop

08026874 <tBuffer_setRecordMode>:

void  tBuffer_setRecordMode (tBuffer* const sb, RecordMode mode)
{
    _tBuffer* s = *sb;
 8026874:	6803      	ldr	r3, [r0, #0]
    s->mode = mode;
 8026876:	7519      	strb	r1, [r3, #20]
}
 8026878:	4770      	bx	lr
 802687a:	bf00      	nop

0802687c <tBuffer_getRecordedLength>:
}

uint32_t tBuffer_getRecordedLength(tBuffer* const sb)
{
    _tBuffer* s = *sb;
    return s->recordedLength;
 802687c:	6803      	ldr	r3, [r0, #0]
}
 802687e:	6918      	ldr	r0, [r3, #16]
 8026880:	4770      	bx	lr
 8026882:	bf00      	nop

08026884 <tBuffer_setRecordedLength>:

void tBuffer_setRecordedLength(tBuffer* const sb, int length)
{
    _tBuffer* s = *sb;
 8026884:	6803      	ldr	r3, [r0, #0]
    s->recordedLength = length;
 8026886:	6119      	str	r1, [r3, #16]
}
 8026888:	4770      	bx	lr
 802688a:	bf00      	nop

0802688c <tBuffer_isActive>:

int tBuffer_isActive(tBuffer* const sb)
{
    _tBuffer* s = *sb;
    return s->active;
 802688c:	6803      	ldr	r3, [r0, #0]
}
 802688e:	6998      	ldr	r0, [r3, #24]
 8026890:	4770      	bx	lr
 8026892:	bf00      	nop

08026894 <tSampler_init>:
static void handleStartEndChange(tSampler* const sp);

static void attemptStartEndChange(tSampler* const sp);

void tSampler_init(tSampler* const sp, tBuffer* const b)
{
 8026894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    tSampler_initToPool(sp, b, &leaf.mempool);
}

void tSampler_initToPool(tSampler* const sp, tBuffer* const b, tMempool* const mp)
{
    _tMempool* m = *mp;
 8026898:	4e23      	ldr	r6, [pc, #140]	; (8026928 <tSampler_init+0x94>)
{
 802689a:	4681      	mov	r9, r0
 802689c:	4688      	mov	r8, r1
    _tSampler* p = *sp = (_tSampler*) mpool_alloc(sizeof(_tSampler), m);
 802689e:	2054      	movs	r0, #84	; 0x54
    
    _tBuffer* s = *b;
    
    p->samp = s;
    
    p->active = 0;
 80268a0:	2500      	movs	r5, #0
{
 80268a2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80268a6:	f856 7f18 	ldr.w	r7, [r6, #24]!
    p->start = 0;
    p->end = 0;
    
    p->len = p->end - p->start;
    
    p->idx = 0.f;
 80268aa:	ed9f 8a20 	vldr	s16, [pc, #128]	; 802692c <tSampler_init+0x98>
    _tSampler* p = *sp = (_tSampler*) mpool_alloc(sizeof(_tSampler), m);
 80268ae:	4639      	mov	r1, r7
 80268b0:	f7fd ff66 	bl	8024780 <mpool_alloc>
 80268b4:	4604      	mov	r4, r0
 80268b6:	f8c9 0000 	str.w	r0, [r9]
    
    p->mode = PlayNormal;
    
    p->cfxlen = 500; // default 300 sample crossfade
    
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 80268ba:	4632      	mov	r2, r6
    p->mempool = m;
 80268bc:	6007      	str	r7, [r0, #0]
    p->inc = 1.f;
 80268be:	f04f 5e7e 	mov.w	lr, #1065353216	; 0x3f800000
    _tBuffer* s = *b;
 80268c2:	f8d8 3000 	ldr.w	r3, [r8]
    p->iinc = 1.f;
 80268c6:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
 80268ca:	f240 1001 	movw	r0, #257	; 0x101
    p->cfxlen = 500; // default 300 sample crossfade
 80268ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 80268d2:	f104 0608 	add.w	r6, r4, #8
    p->samp = s;
 80268d6:	6063      	str	r3, [r4, #4]
    p->flip = 1;
 80268d8:	2301      	movs	r3, #1
    p->inc = 1.f;
 80268da:	f8c4 e010 	str.w	lr, [r4, #16]
    p->iinc = 1.f;
 80268de:	f8c4 c018 	str.w	ip, [r4, #24]
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 80268e2:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
    p->flip = 1;
 80268e6:	77a3      	strb	r3, [r4, #30]
    p->iinc = 1.f;
 80268e8:	83a0      	strh	r0, [r4, #28]
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 80268ea:	4630      	mov	r0, r6
    p->cfxlen = 500; // default 300 sample crossfade
 80268ec:	6361      	str	r1, [r4, #52]	; 0x34
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 80268ee:	4619      	mov	r1, r3
    p->idx = 0.f;
 80268f0:	ed84 8a03 	vstr	s16, [r4, #12]
    p->active = 0;
 80268f4:	6465      	str	r5, [r4, #68]	; 0x44
    p->start = 0;
 80268f6:	6225      	str	r5, [r4, #32]
    p->end = 0;
 80268f8:	62a5      	str	r5, [r4, #40]	; 0x28
    p->len = p->end - p->start;
 80268fa:	6325      	str	r5, [r4, #48]	; 0x30
    p->mode = PlayNormal;
 80268fc:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 8026900:	f7fb ffc4 	bl	802288c <tRamp_initToPool>
    tRamp_setVal(&p->gain, 0.f);
 8026904:	eeb0 0a48 	vmov.f32	s0, s16
 8026908:	4630      	mov	r0, r6
 802690a:	f7fc f805 	bl	8022918 <tRamp_setVal>
    
    p->targetstart = -1;
    p->targetend = -1;
    
    p->inCrossfade = 0;
    p->flipStart = -1;
 802690e:	4b08      	ldr	r3, [pc, #32]	; (8026930 <tSampler_init+0x9c>)
    p->targetstart = -1;
 8026910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    p->inCrossfade = 0;
 8026914:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
    p->flipStart = -1;
 8026918:	64e3      	str	r3, [r4, #76]	; 0x4c
    p->targetstart = -1;
 802691a:	6262      	str	r2, [r4, #36]	; 0x24
    p->targetend = -1;
 802691c:	62e2      	str	r2, [r4, #44]	; 0x2c
    p->flipIdx = -1;
 802691e:	6523      	str	r3, [r4, #80]	; 0x50
}
 8026920:	ecbd 8b02 	vpop	{d8}
 8026924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026928:	200194a0 	.word	0x200194a0
 802692c:	00000000 	.word	0x00000000
 8026930:	bf800000 	.word	0xbf800000

08026934 <tSampler_initToPool>:
{
 8026934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026938:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 802693c:	6816      	ldr	r6, [r2, #0]
{
 802693e:	4681      	mov	r9, r0
 8026940:	4688      	mov	r8, r1
    _tSampler* p = *sp = (_tSampler*) mpool_alloc(sizeof(_tSampler), m);
 8026942:	2054      	movs	r0, #84	; 0x54
 8026944:	4631      	mov	r1, r6
{
 8026946:	4617      	mov	r7, r2
    _tSampler* p = *sp = (_tSampler*) mpool_alloc(sizeof(_tSampler), m);
 8026948:	f7fd ff1a 	bl	8024780 <mpool_alloc>
 802694c:	4604      	mov	r4, r0
 802694e:	f8c9 0000 	str.w	r0, [r9]
    p->active = 0;
 8026952:	2500      	movs	r5, #0
    p->mempool = m;
 8026954:	6006      	str	r6, [r0, #0]
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 8026956:	463a      	mov	r2, r7
    _tBuffer* s = *b;
 8026958:	f8d8 3000 	ldr.w	r3, [r8]
    p->inc = 1.f;
 802695c:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
    p->idx = 0.f;
 8026960:	ed9f 8a18 	vldr	s16, [pc, #96]	; 80269c4 <tSampler_initToPool+0x90>
    p->iinc = 1.f;
 8026964:	f240 1001 	movw	r0, #257	; 0x101
    p->cfxlen = 500; // default 300 sample crossfade
 8026968:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 802696c:	f104 0608 	add.w	r6, r4, #8
    p->samp = s;
 8026970:	6063      	str	r3, [r4, #4]
    p->iinc = 1.f;
 8026972:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
    p->flip = 1;
 8026976:	2301      	movs	r3, #1
    p->inc = 1.f;
 8026978:	f8c4 c010 	str.w	ip, [r4, #16]
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 802697c:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
    p->iinc = 1.f;
 8026980:	83a0      	strh	r0, [r4, #28]
    p->flip = 1;
 8026982:	77a3      	strb	r3, [r4, #30]
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 8026984:	4630      	mov	r0, r6
    p->cfxlen = 500; // default 300 sample crossfade
 8026986:	6361      	str	r1, [r4, #52]	; 0x34
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 8026988:	4619      	mov	r1, r3
    p->idx = 0.f;
 802698a:	ed84 8a03 	vstr	s16, [r4, #12]
    p->iinc = 1.f;
 802698e:	61a7      	str	r7, [r4, #24]
    p->active = 0;
 8026990:	6465      	str	r5, [r4, #68]	; 0x44
    p->start = 0;
 8026992:	6225      	str	r5, [r4, #32]
    p->end = 0;
 8026994:	62a5      	str	r5, [r4, #40]	; 0x28
    p->len = p->end - p->start;
 8026996:	6325      	str	r5, [r4, #48]	; 0x30
    p->mode = PlayNormal;
 8026998:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 802699c:	f7fb ff76 	bl	802288c <tRamp_initToPool>
    tRamp_setVal(&p->gain, 0.f);
 80269a0:	eeb0 0a48 	vmov.f32	s0, s16
 80269a4:	4630      	mov	r0, r6
 80269a6:	f7fb ffb7 	bl	8022918 <tRamp_setVal>
    p->flipStart = -1;
 80269aa:	4b07      	ldr	r3, [pc, #28]	; (80269c8 <tSampler_initToPool+0x94>)
    p->targetstart = -1;
 80269ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    p->inCrossfade = 0;
 80269b0:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
    p->flipStart = -1;
 80269b4:	64e3      	str	r3, [r4, #76]	; 0x4c
    p->targetstart = -1;
 80269b6:	6262      	str	r2, [r4, #36]	; 0x24
    p->targetend = -1;
 80269b8:	62e2      	str	r2, [r4, #44]	; 0x2c
    p->flipIdx = -1;
 80269ba:	6523      	str	r3, [r4, #80]	; 0x50
}
 80269bc:	ecbd 8b02 	vpop	{d8}
 80269c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80269c4:	00000000 	.word	0x00000000
 80269c8:	bf800000 	.word	0xbf800000

080269cc <tSampler_free>:

void tSampler_free (tSampler* const sp)
{
 80269cc:	b510      	push	{r4, lr}
    _tSampler* p = *sp;
 80269ce:	6804      	ldr	r4, [r0, #0]
    tRamp_free(&p->gain);
 80269d0:	f104 0008 	add.w	r0, r4, #8
 80269d4:	f7fb ff8e 	bl	80228f4 <tRamp_free>
    
    mpool_free((char*)p, p->mempool);
 80269d8:	6821      	ldr	r1, [r4, #0]
 80269da:	4620      	mov	r0, r4
}
 80269dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 80269e0:	f7fd bf76 	b.w	80248d0 <mpool_free>

080269e4 <tSampler_setMode>:
    return p->last;
}

void tSampler_setMode      (tSampler* const sp, PlayMode mode)
{
    _tSampler* p = *sp;
 80269e4:	6803      	ldr	r3, [r0, #0]
    p->mode = mode;
 80269e6:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
}
 80269ea:	4770      	bx	lr

080269ec <tSampler_setCrossfadeLength>:

void tSampler_setCrossfadeLength  (tSampler* const sp, uint32_t length)
{
 80269ec:	b510      	push	{r4, lr}
    _tSampler* p = *sp;
 80269ee:	6804      	ldr	r4, [r0, #0]
    
    uint32_t cfxlen = LEAF_clip(0, length, p->len * 0.25f);
 80269f0:	ee07 1a90 	vmov	s15, r1
 80269f4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8026a14 <tSampler_setCrossfadeLength+0x28>
 80269f8:	ed94 1a0c 	vldr	s2, [r4, #48]	; 0x30
 80269fc:	eef8 0a67 	vcvt.f32.u32	s1, s15
 8026a00:	eebb 1acf 	vcvt.f32.u32	s2, s2, #2
 8026a04:	f7fd fcbc 	bl	8024380 <LEAF_clip>
 8026a08:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8026a0c:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    
    p->cfxlen = cfxlen;
}
 8026a10:	bd10      	pop	{r4, pc}
 8026a12:	bf00      	nop
 8026a14:	00000000 	.word	0x00000000

08026a18 <tSampler_play>:

void tSampler_play         (tSampler* const sp)
{
 8026a18:	b510      	push	{r4, lr}
    _tSampler* p = *sp;
 8026a1a:	6804      	ldr	r4, [r0, #0]
    
    if (p->active != 0)
 8026a1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8026a1e:	f104 0008 	add.w	r0, r4, #8
 8026a22:	bb93      	cbnz	r3, 8026a8a <tSampler_play+0x72>
        
        tRamp_setDest(&p->gain, 0.f);
    }
    else
    {
        p->active = 1;
 8026a24:	2201      	movs	r2, #1
        p->retrigger = 0;
 8026a26:	6423      	str	r3, [r4, #64]	; 0x40
        
        tRamp_setDest(&p->gain, 1.f);
 8026a28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
        p->active = 1;
 8026a2c:	6462      	str	r2, [r4, #68]	; 0x44
        tRamp_setDest(&p->gain, 1.f);
 8026a2e:	f7fb ff65 	bl	80228fc <tRamp_setDest>
        
        if (p->dir > 0)
 8026a32:	f994 301c 	ldrsb.w	r3, [r4, #28]
 8026a36:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8026a38:	2b00      	cmp	r3, #0
 8026a3a:	6a22      	ldr	r2, [r4, #32]
        {
            if (p->flip > 0)    p->idx = p->start;
 8026a3c:	f994 301d 	ldrsb.w	r3, [r4, #29]
        if (p->dir > 0)
 8026a40:	dd2e      	ble.n	8026aa0 <tSampler_play+0x88>
            if (p->flip > 0)    p->idx = p->start;
 8026a42:	2b00      	cmp	r3, #0
 8026a44:	dd2e      	ble.n	8026aa4 <tSampler_play+0x8c>
            else                p->idx = p->end;
        }
        else
        {
            if (p->flip > 0)    p->idx = p->end;
            else                p->idx = p->start;
 8026a46:	ee07 2a90 	vmov	s15, r2
 8026a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026a4e:	edc4 7a03 	vstr	s15, [r4, #12]

static void handleStartEndChange(tSampler* const sp)
{
    _tSampler* p = *sp;
    
    p->len = abs(p->end - p->start);
 8026a52:	1a8b      	subs	r3, r1, r2
    
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026a54:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    p->len = abs(p->end - p->start);
 8026a58:	2b00      	cmp	r3, #0
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    p->len = abs(p->end - p->start);
 8026a5e:	bfb8      	it	lt
 8026a60:	425b      	neglt	r3, r3
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026a62:	ee07 3a10 	vmov	s14, r3
    p->len = abs(p->end - p->start);
 8026a66:	6323      	str	r3, [r4, #48]	; 0x30
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026a68:	eebb 7acf 	vcvt.f32.u32	s14, s14, #2
 8026a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a74:	dd03      	ble.n	8026a7e <tSampler_play+0x66>
 8026a76:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8026a7a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    
    if (p->start > p->end)
 8026a7e:	4291      	cmp	r1, r2
    {
        p->flip = -1;
 8026a80:	bfb4      	ite	lt
 8026a82:	23ff      	movlt	r3, #255	; 0xff
    }
    else
    {
        p->flip = 1;
 8026a84:	2301      	movge	r3, #1
 8026a86:	7763      	strb	r3, [r4, #29]
}
 8026a88:	bd10      	pop	{r4, pc}
        p->active = -1;
 8026a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        p->retrigger = 1;
 8026a8e:	2301      	movs	r3, #1
        tRamp_setDest(&p->gain, 0.f);
 8026a90:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8026ab4 <tSampler_play+0x9c>
        p->retrigger = 1;
 8026a94:	e9c4 3210 	strd	r3, r2, [r4, #64]	; 0x40
}
 8026a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tRamp_setDest(&p->gain, 0.f);
 8026a9c:	f7fb bf2e 	b.w	80228fc <tRamp_setDest>
            if (p->flip > 0)    p->idx = p->end;
 8026aa0:	2b00      	cmp	r3, #0
 8026aa2:	ddd0      	ble.n	8026a46 <tSampler_play+0x2e>
 8026aa4:	ee07 1a90 	vmov	s15, r1
 8026aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026aac:	edc4 7a03 	vstr	s15, [r4, #12]
 8026ab0:	e7cf      	b.n	8026a52 <tSampler_play+0x3a>
 8026ab2:	bf00      	nop
 8026ab4:	00000000 	.word	0x00000000

08026ab8 <tSampler_stop>:
    _tSampler* p = *sp;
 8026ab8:	6800      	ldr	r0, [r0, #0]
    p->active = -1;
 8026aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    tRamp_setDest(&p->gain, 0.f);
 8026abe:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8026acc <tSampler_stop+0x14>
    p->active = -1;
 8026ac2:	6443      	str	r3, [r0, #68]	; 0x44
    tRamp_setDest(&p->gain, 0.f);
 8026ac4:	3008      	adds	r0, #8
 8026ac6:	f7fb bf19 	b.w	80228fc <tRamp_setDest>
 8026aca:	bf00      	nop
 8026acc:	00000000 	.word	0x00000000

08026ad0 <tSampler_setStart>:
        tSampler_setEnd(sp, p->targetend);
    }
}

void tSampler_setStart     (tSampler* const sp, int32_t start)
{
 8026ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tSampler* p = *sp;
 8026ad2:	6804      	ldr	r4, [r0, #0]
    if (start == p->end)
    {
        return;
    }
    */
    if (p->active) // only bother with these checks if we're actually playing
 8026ad4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8026ad6:	2b00      	cmp	r3, #0
 8026ad8:	d042      	beq.n	8026b60 <tSampler_setStart+0x90>
    {
        if (start > p->end)
 8026ada:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8026adc:	428b      	cmp	r3, r1
 8026ade:	db1d      	blt.n	8026b1c <tSampler_setStart+0x4c>
 8026ae0:	2501      	movs	r5, #1
 8026ae2:	2700      	movs	r7, #0
        {
            tempflip = -1;
        }
        else
        {
            tempflip = 1;
 8026ae4:	462e      	mov	r6, r5
        }
        
        int dir = p->bnf * p->dir * tempflip;
        
        uint32_t cfxlen = p->cfxlen;
 8026ae6:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
        if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 8026aea:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8026aee:	eef8 6a47 	vcvt.f32.u32	s13, s14
        
        if (p->inCrossfade || p->flipStart >= 0)
 8026af2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
        if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 8026af6:	eefb 7acf 	vcvt.f32.u32	s15, s15, #2
 8026afa:	eef4 7ae6 	vcmpe.f32	s15, s13
 8026afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b02:	bf48      	it	mi
 8026b04:	eebc 7ae7 	vcvtmi.u32.f32	s14, s15
        if (p->inCrossfade || p->flipStart >= 0)
 8026b08:	b932      	cbnz	r2, 8026b18 <tSampler_setStart+0x48>
 8026b0a:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 8026b0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8026b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b16:	db06      	blt.n	8026b26 <tSampler_setStart+0x56>
        }
    }
    
    p->start = LEAF_clipInt(0, start, p->samp->recordedLength-1);
    handleStartEndChange(sp);
    p->targetstart = -1;
 8026b18:	6261      	str	r1, [r4, #36]	; 0x24
    
}
 8026b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (start > p->end)
 8026b1c:	2701      	movs	r7, #1
 8026b1e:	2500      	movs	r5, #0
            tempflip = -1;
 8026b20:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8026b24:	e7df      	b.n	8026ae6 <tSampler_setStart+0x16>
        int dir = p->bnf * p->dir * tempflip;
 8026b26:	f994 201e 	ldrsb.w	r2, [r4, #30]
 8026b2a:	f994 c01c 	ldrsb.w	ip, [r4, #28]
 8026b2e:	fb12 f20c 	smulbb	r2, r2, ip
 8026b32:	fb06 f202 	mul.w	r2, r6, r2
        if ((tempflip > 0) && (dir > 0)) // start is start and we're playing forward
 8026b36:	2a00      	cmp	r2, #0
 8026b38:	dd3c      	ble.n	8026bb4 <tSampler_setStart+0xe4>
 8026b3a:	2d00      	cmp	r5, #0
 8026b3c:	d03a      	beq.n	8026bb4 <tSampler_setStart+0xe4>
            if (start > p->idx)// start given is after current index or we're in a crossfade
 8026b3e:	ee07 1a90 	vmov	s15, r1
 8026b42:	edd4 6a03 	vldr	s13, [r4, #12]
 8026b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026b4a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8026b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b52:	dc3e      	bgt.n	8026bd2 <tSampler_setStart+0x102>
        if (tempflip != p->flip && p->flipStart < 0)
 8026b54:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8026b58:	42b3      	cmp	r3, r6
 8026b5a:	d001      	beq.n	8026b60 <tSampler_setStart+0x90>
            p->flipIdx = 0;
 8026b5c:	2300      	movs	r3, #0
 8026b5e:	6523      	str	r3, [r4, #80]	; 0x50
    p->start = LEAF_clipInt(0, start, p->samp->recordedLength-1);
 8026b60:	6863      	ldr	r3, [r4, #4]
 8026b62:	4605      	mov	r5, r0
 8026b64:	2000      	movs	r0, #0
 8026b66:	691a      	ldr	r2, [r3, #16]
 8026b68:	3a01      	subs	r2, #1
 8026b6a:	f7fd fc1d 	bl	80243a8 <LEAF_clipInt>
 8026b6e:	6220      	str	r0, [r4, #32]
    handleStartEndChange(sp);
 8026b70:	682b      	ldr	r3, [r5, #0]
    p->len = abs(p->end - p->start);
 8026b72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026b74:	6a18      	ldr	r0, [r3, #32]
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026b76:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    p->len = abs(p->end - p->start);
 8026b7a:	1a11      	subs	r1, r2, r0
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    p->len = abs(p->end - p->start);
 8026b80:	2900      	cmp	r1, #0
 8026b82:	bfb8      	it	lt
 8026b84:	4249      	neglt	r1, r1
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026b86:	ee07 1a10 	vmov	s14, r1
    p->len = abs(p->end - p->start);
 8026b8a:	6319      	str	r1, [r3, #48]	; 0x30
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026b8c:	eebb 7acf 	vcvt.f32.u32	s14, s14, #2
 8026b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b98:	dd03      	ble.n	8026ba2 <tSampler_setStart+0xd2>
 8026b9a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8026b9e:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
        p->flip = -1;
 8026ba2:	4282      	cmp	r2, r0
 8026ba4:	bfac      	ite	ge
 8026ba6:	2201      	movge	r2, #1
 8026ba8:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
    p->targetstart = -1;
 8026bac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026bb0:	775a      	strb	r2, [r3, #29]
 8026bb2:	e7b1      	b.n	8026b18 <tSampler_setStart+0x48>
        else if ((tempflip < 0) && (dir < 0)) // start is end and we're playing in reverse
 8026bb4:	2a00      	cmp	r2, #0
 8026bb6:	dacd      	bge.n	8026b54 <tSampler_setStart+0x84>
 8026bb8:	2f00      	cmp	r7, #0
 8026bba:	d0cb      	beq.n	8026b54 <tSampler_setStart+0x84>
            if (start < p->idx)// start given is before current index or we're in a crossfade
 8026bbc:	ee07 1a90 	vmov	s15, r1
 8026bc0:	edd4 6a03 	vldr	s13, [r4, #12]
 8026bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026bc8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8026bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bd0:	d5c0      	bpl.n	8026b54 <tSampler_setStart+0x84>
                float tempLen = abs(p->end - start) * 0.25f;
 8026bd2:	1a5b      	subs	r3, r3, r1
                if (cfxlen > tempLen)
 8026bd4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                p->targetstart = start;
 8026bd8:	6261      	str	r1, [r4, #36]	; 0x24
                float tempLen = abs(p->end - start) * 0.25f;
 8026bda:	2b00      	cmp	r3, #0
 8026bdc:	bfb8      	it	lt
 8026bde:	425b      	neglt	r3, r3
 8026be0:	ee07 3a90 	vmov	s15, r3
 8026be4:	eefa 7acf 	vcvt.f32.s32	s15, s15, #2
                if (cfxlen > tempLen)
 8026be8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8026bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bf0:	dd93      	ble.n	8026b1a <tSampler_setStart+0x4a>
                    p->cfxlen = tempLen;
 8026bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8026bf6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
}
 8026bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08026bfc <tSampler_setEnd>:

void tSampler_setEnd       (tSampler* const sp, int32_t end)
{
 8026bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tSampler* p = *sp;
 8026bfe:	6804      	ldr	r4, [r0, #0]
    if (end == p->start)
    {
        return;
    }
    */
    if (p->active) // only bother with these checks if we're actually playing
 8026c00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8026c02:	2b00      	cmp	r3, #0
 8026c04:	d042      	beq.n	8026c8c <tSampler_setEnd+0x90>
    {
        if (p->start > end)
 8026c06:	6a23      	ldr	r3, [r4, #32]
 8026c08:	428b      	cmp	r3, r1
 8026c0a:	dc1d      	bgt.n	8026c48 <tSampler_setEnd+0x4c>
 8026c0c:	2501      	movs	r5, #1
 8026c0e:	2700      	movs	r7, #0
        {
            tempflip = -1;
        }
        else
        {
            tempflip = 1;
 8026c10:	462e      	mov	r6, r5
        }
        
        int dir = p->bnf * p->dir * tempflip;
        
        uint32_t cfxlen = p->cfxlen;
 8026c12:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
        if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 8026c16:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8026c1a:	eef8 6a47 	vcvt.f32.u32	s13, s14
        
        if (p->inCrossfade || p->flipStart >= 0)
 8026c1e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
        if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 8026c22:	eefb 7acf 	vcvt.f32.u32	s15, s15, #2
 8026c26:	eef4 7ae6 	vcmpe.f32	s15, s13
 8026c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c2e:	bf48      	it	mi
 8026c30:	eebc 7ae7 	vcvtmi.u32.f32	s14, s15
        if (p->inCrossfade || p->flipStart >= 0)
 8026c34:	b932      	cbnz	r2, 8026c44 <tSampler_setEnd+0x48>
 8026c36:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 8026c3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8026c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c42:	db06      	blt.n	8026c52 <tSampler_setEnd+0x56>
        }
    }
    
    p->end = LEAF_clipInt(0, end, p->samp->recordedLength-1);
    handleStartEndChange(sp);
    p->targetend = -1;
 8026c44:	62e1      	str	r1, [r4, #44]	; 0x2c
}
 8026c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (p->start > end)
 8026c48:	2701      	movs	r7, #1
 8026c4a:	2500      	movs	r5, #0
            tempflip = -1;
 8026c4c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8026c50:	e7df      	b.n	8026c12 <tSampler_setEnd+0x16>
        int dir = p->bnf * p->dir * tempflip;
 8026c52:	f994 201e 	ldrsb.w	r2, [r4, #30]
 8026c56:	f994 c01c 	ldrsb.w	ip, [r4, #28]
 8026c5a:	fb12 f20c 	smulbb	r2, r2, ip
 8026c5e:	fb06 f202 	mul.w	r2, r6, r2
        if (tempflip > 0 && dir < 0) // end is end and we're playing in reverse
 8026c62:	2a00      	cmp	r2, #0
 8026c64:	da3c      	bge.n	8026ce0 <tSampler_setEnd+0xe4>
 8026c66:	2d00      	cmp	r5, #0
 8026c68:	d03a      	beq.n	8026ce0 <tSampler_setEnd+0xe4>
            if (end < p->idx) // end given is before current index or we're in a crossfade
 8026c6a:	ee07 1a90 	vmov	s15, r1
 8026c6e:	edd4 6a03 	vldr	s13, [r4, #12]
 8026c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026c76:	eef4 7ae6 	vcmpe.f32	s15, s13
 8026c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c7e:	d43e      	bmi.n	8026cfe <tSampler_setEnd+0x102>
        if (tempflip != p->flip && p->flipStart < 0)
 8026c80:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8026c84:	42b3      	cmp	r3, r6
 8026c86:	d001      	beq.n	8026c8c <tSampler_setEnd+0x90>
            p->flipIdx = 0;
 8026c88:	2300      	movs	r3, #0
 8026c8a:	6523      	str	r3, [r4, #80]	; 0x50
    p->end = LEAF_clipInt(0, end, p->samp->recordedLength-1);
 8026c8c:	6863      	ldr	r3, [r4, #4]
 8026c8e:	4605      	mov	r5, r0
 8026c90:	2000      	movs	r0, #0
 8026c92:	691a      	ldr	r2, [r3, #16]
 8026c94:	3a01      	subs	r2, #1
 8026c96:	f7fd fb87 	bl	80243a8 <LEAF_clipInt>
 8026c9a:	62a0      	str	r0, [r4, #40]	; 0x28
    handleStartEndChange(sp);
 8026c9c:	682b      	ldr	r3, [r5, #0]
    p->len = abs(p->end - p->start);
 8026c9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026ca0:	6a18      	ldr	r0, [r3, #32]
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026ca2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    p->len = abs(p->end - p->start);
 8026ca6:	1a11      	subs	r1, r2, r0
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    p->len = abs(p->end - p->start);
 8026cac:	2900      	cmp	r1, #0
 8026cae:	bfb8      	it	lt
 8026cb0:	4249      	neglt	r1, r1
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026cb2:	ee07 1a10 	vmov	s14, r1
    p->len = abs(p->end - p->start);
 8026cb6:	6319      	str	r1, [r3, #48]	; 0x30
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026cb8:	eebb 7acf 	vcvt.f32.u32	s14, s14, #2
 8026cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cc4:	dd03      	ble.n	8026cce <tSampler_setEnd+0xd2>
 8026cc6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8026cca:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
        p->flip = -1;
 8026cce:	4282      	cmp	r2, r0
 8026cd0:	bfac      	ite	ge
 8026cd2:	2201      	movge	r2, #1
 8026cd4:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
    p->targetend = -1;
 8026cd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026cdc:	775a      	strb	r2, [r3, #29]
 8026cde:	e7b1      	b.n	8026c44 <tSampler_setEnd+0x48>
        else if (tempflip < 0 && dir > 0) // end is start and we're playing forward
 8026ce0:	2a00      	cmp	r2, #0
 8026ce2:	ddcd      	ble.n	8026c80 <tSampler_setEnd+0x84>
 8026ce4:	2f00      	cmp	r7, #0
 8026ce6:	d0cb      	beq.n	8026c80 <tSampler_setEnd+0x84>
            if (end > p->idx) // end given is after current index or we're in a crossfade
 8026ce8:	ee07 1a90 	vmov	s15, r1
 8026cec:	edd4 6a03 	vldr	s13, [r4, #12]
 8026cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026cf4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8026cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cfc:	ddc0      	ble.n	8026c80 <tSampler_setEnd+0x84>
                float tempLen = abs(end - p->start) * 0.25f;
 8026cfe:	1acb      	subs	r3, r1, r3
                if (cfxlen > tempLen)
 8026d00:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                p->targetend = end;
 8026d04:	62e1      	str	r1, [r4, #44]	; 0x2c
                float tempLen = abs(end - p->start) * 0.25f;
 8026d06:	2b00      	cmp	r3, #0
 8026d08:	bfb8      	it	lt
 8026d0a:	425b      	neglt	r3, r3
 8026d0c:	ee07 3a90 	vmov	s15, r3
 8026d10:	eefa 7acf 	vcvt.f32.s32	s15, s15, #2
                if (cfxlen > tempLen)
 8026d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8026d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d1c:	dd93      	ble.n	8026c46 <tSampler_setEnd+0x4a>
                    p->cfxlen = tempLen;
 8026d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8026d22:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
}
 8026d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08026d28 <tSampler_tick>:
{
 8026d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d2c:	ed2d 8b04 	vpush	{d8-d9}
    _tSampler* p = *sp;
 8026d30:	6804      	ldr	r4, [r0, #0]
{
 8026d32:	b087      	sub	sp, #28
 8026d34:	4605      	mov	r5, r0
    if (p->targetstart >= 0)
 8026d36:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8026d38:	2900      	cmp	r1, #0
 8026d3a:	db01      	blt.n	8026d40 <tSampler_tick+0x18>
        tSampler_setStart(sp, p->targetstart);
 8026d3c:	f7ff fec8 	bl	8026ad0 <tSampler_setStart>
    if (p->targetend >= 0)
 8026d40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8026d42:	2900      	cmp	r1, #0
 8026d44:	db02      	blt.n	8026d4c <tSampler_tick+0x24>
        tSampler_setEnd(sp, p->targetend);
 8026d46:	4628      	mov	r0, r5
 8026d48:	f7ff ff58 	bl	8026bfc <tSampler_setEnd>
    if (p->active == 0)         return 0.f;
 8026d4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8026d4e:	2b00      	cmp	r3, #0
 8026d50:	f000 812f 	beq.w	8026fb2 <tSampler_tick+0x28a>
    if ((p->inc == 0.0f) || (p->len < 2))
 8026d54:	edd4 7a04 	vldr	s15, [r4, #16]
 8026d58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8026d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d60:	f000 811e 	beq.w	8026fa0 <tSampler_tick+0x278>
 8026d64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8026d66:	2b01      	cmp	r3, #1
 8026d68:	f240 811a 	bls.w	8026fa0 <tSampler_tick+0x278>
    if (p->flip < 0)
 8026d6c:	f994 801d 	ldrsb.w	r8, [r4, #29]
    float* buff = p->samp->buff;
 8026d70:	6862      	ldr	r2, [r4, #4]
    if (p->flip < 0)
 8026d72:	f1b8 0f00 	cmp.w	r8, #0
    int myStart = p->start;
 8026d76:	f8d4 a020 	ldr.w	sl, [r4, #32]
    float* buff = p->samp->buff;
 8026d7a:	6851      	ldr	r1, [r2, #4]
    int myEnd = p->end;
 8026d7c:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
    if (p->flip < 0)
 8026d80:	db02      	blt.n	8026d88 <tSampler_tick+0x60>
 8026d82:	464b      	mov	r3, r9
    int myStart = p->start;
 8026d84:	46d1      	mov	r9, sl
    int myEnd = p->end;
 8026d86:	469a      	mov	sl, r3
    int dir = p->bnf * p->dir * p->flip;
 8026d88:	f994 001c 	ldrsb.w	r0, [r4, #28]
 8026d8c:	f994 301e 	ldrsb.w	r3, [r4, #30]
    int idx = (int) p->idx;
 8026d90:	edd4 7a03 	vldr	s15, [r4, #12]
    int dir = p->bnf * p->dir * p->flip;
 8026d94:	fb13 f300 	smulbb	r3, r3, r0
    int length = p->samp->recordedLength;
 8026d98:	f8d2 b010 	ldr.w	fp, [r2, #16]
    int idx = (int) p->idx;
 8026d9c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    sample = LEAF_interpolate_hermite_x (buff[i1],
 8026da0:	9101      	str	r1, [sp, #4]
    int dir = p->bnf * p->dir * p->flip;
 8026da2:	fb08 f803 	mul.w	r8, r8, r3
    idx += rev;
 8026da6:	ee17 6a10 	vmov	r6, s14
    if (dir < 0) rev = 1;
 8026daa:	ea4f 77d8 	mov.w	r7, r8, lsr #31
    float alpha = rev + (p->idx - idx) * dir;
 8026dae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8026db2:	ee06 8a10 	vmov	s12, r8
    idx += rev;
 8026db6:	443e      	add	r6, r7
    float alpha = rev + (p->idx - idx) * dir;
 8026db8:	ee07 7a10 	vmov	s14, r7
 8026dbc:	f1c7 0001 	rsb	r0, r7, #1
    i1 = (i1 < length*rev) ? i1 + (length * (1-rev)) : i1 - (length * rev);
 8026dc0:	fb07 f70b 	mul.w	r7, r7, fp
    int i1 = idx-(1*dir);
 8026dc4:	eba6 0208 	sub.w	r2, r6, r8
    int i3 = idx+(1*dir);
 8026dc8:	eb08 0306 	add.w	r3, r8, r6
 8026dcc:	9003      	str	r0, [sp, #12]
    float alpha = rev + (p->idx - idx) * dir;
 8026dce:	eef8 8ac7 	vcvt.f32.s32	s17, s14
 8026dd2:	fb00 f00b 	mul.w	r0, r0, fp
    i1 = (i1 < length*rev) ? i1 + (length * (1-rev)) : i1 - (length * rev);
 8026dd6:	4297      	cmp	r7, r2
    float alpha = rev + (p->idx - idx) * dir;
 8026dd8:	ee77 7ae6 	vsub.f32	s15, s15, s13
    int i4 = idx+(2*dir);
 8026ddc:	eb08 0c03 	add.w	ip, r8, r3
    i1 = (i1 < length*rev) ? i1 + (length * (1-rev)) : i1 - (length * rev);
 8026de0:	bfcc      	ite	gt
 8026de2:	1812      	addgt	r2, r2, r0
 8026de4:	1bd2      	suble	r2, r2, r7
    i2 = (i2 < length*rev) ? i2 + (length * (1-rev)) : i2 - (length * rev);
 8026de6:	42b7      	cmp	r7, r6
    float alpha = rev + (p->idx - idx) * dir;
 8026de8:	eeb8 9ac6 	vcvt.f32.s32	s18, s12
    sample = LEAF_interpolate_hermite_x (buff[i1],
 8026dec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8026df0:	9002      	str	r0, [sp, #8]
    i2 = (i2 < length*rev) ? i2 + (length * (1-rev)) : i2 - (length * rev);
 8026df2:	bfcc      	ite	gt
 8026df4:	eb06 0e00 	addgt.w	lr, r6, r0
 8026df8:	eba6 0e07 	suble.w	lr, r6, r7
    i3 = (i3 < length*(1-rev)) ? i3 + (length * rev) : i3 - (length * (1-rev));
 8026dfc:	4283      	cmp	r3, r0
    float alpha = rev + (p->idx - idx) * dir;
 8026dfe:	eee7 8a89 	vfma.f32	s17, s15, s18
    sample = LEAF_interpolate_hermite_x (buff[i1],
 8026e02:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 8026e06:	ed92 0a00 	vldr	s0, [r2]
    i3 = (i3 < length*(1-rev)) ? i3 + (length * rev) : i3 - (length * (1-rev));
 8026e0a:	bfac      	ite	ge
 8026e0c:	1a1b      	subge	r3, r3, r0
 8026e0e:	19db      	addlt	r3, r3, r7
    i4 = (i4 < length*(1-rev)) ? i4 + (length * rev) : i4 - (length * (1-rev));
 8026e10:	4584      	cmp	ip, r0
    sample = LEAF_interpolate_hermite_x (buff[i1],
 8026e12:	edde 0a00 	vldr	s1, [lr]
 8026e16:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    i4 = (i4 < length*(1-rev)) ? i4 + (length * rev) : i4 - (length * (1-rev));
 8026e1a:	bfac      	ite	ge
 8026e1c:	ebac 0c00 	subge.w	ip, ip, r0
 8026e20:	44bc      	addlt	ip, r7
    sample = LEAF_interpolate_hermite_x (buff[i1],
 8026e22:	eeb0 2a68 	vmov.f32	s4, s17
 8026e26:	ed93 1a00 	vldr	s2, [r3]
 8026e2a:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8026e2e:	eddc 1a00 	vldr	s3, [ip]
 8026e32:	f7fd fbbd 	bl	80245b0 <LEAF_interpolate_hermite_x>
    if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 8026e36:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
    int32_t cfxlen = p->cfxlen;
 8026e3a:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
    if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 8026e3e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8026e42:	eef8 0a47 	vcvt.f32.u32	s1, s14
 8026e46:	ee07 ca10 	vmov	s14, ip
    sample = LEAF_interpolate_hermite_x (buff[i1],
 8026e4a:	eeb0 8a40 	vmov.f32	s16, s0
    if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 8026e4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026e52:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8026e56:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8026e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026e62:	d503      	bpl.n	8026e6c <tSampler_tick+0x144>
 8026e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8026e68:	ee17 ca90 	vmov	ip, s15
    if (myStart >= cfxlen) fadeLeftStart = myStart - cfxlen;
 8026e6c:	45e1      	cmp	r9, ip
 8026e6e:	f2c0 80a9 	blt.w	8026fc4 <tSampler_tick+0x29c>
 8026e72:	eba9 0e0c 	sub.w	lr, r9, ip
 8026e76:	f8cd 9004 	str.w	r9, [sp, #4]
    if (p->mode == PlayLoop)
 8026e7a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8026e7e:	2a01      	cmp	r2, #1
 8026e80:	f000 80ca 	beq.w	8027018 <tSampler_tick+0x2f0>
 8026e84:	edd4 8a13 	vldr	s17, [r4, #76]	; 0x4c
    float inc = fmodf(p->inc, (float)p->len);
 8026e88:	ed94 0a04 	vldr	s0, [r4, #16]
 8026e8c:	f001 f980 	bl	8028190 <fmodf>
    p->idx += (dir * inc);
 8026e90:	edd4 7a03 	vldr	s15, [r4, #12]
    if (p->flipStart >= 0)
 8026e94:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    p->idx += (dir * inc);
 8026e98:	eee9 7a00 	vfma.f32	s15, s18, s0
    if (p->flipStart >= 0)
 8026e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    p->idx += (dir * inc);
 8026ea0:	edc4 7a03 	vstr	s15, [r4, #12]
    if (p->flipStart >= 0)
 8026ea4:	db29      	blt.n	8026efa <tSampler_tick+0x1d2>
        p->flipIdx += (-dir * inc);
 8026ea6:	f1c8 0300 	rsb	r3, r8, #0
 8026eaa:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
 8026eae:	ee07 3a10 	vmov	s14, r3
 8026eb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026eb6:	eee7 6a00 	vfma.f32	s13, s14, s0
 8026eba:	eeb0 7a66 	vmov.f32	s14, s13
        if((int)p->flipIdx < 0)
 8026ebe:	eefd 6ae6 	vcvt.s32.f32	s13, s13
        p->flipIdx += (-dir * inc);
 8026ec2:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
        if((int)p->flipIdx < 0)
 8026ec6:	ee16 3a90 	vmov	r3, s13
 8026eca:	2b00      	cmp	r3, #0
 8026ecc:	da07      	bge.n	8026ede <tSampler_tick+0x1b6>
            p->idx += (float)length;
 8026ece:	ee07 ba10 	vmov	s14, fp
 8026ed2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026ed6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026eda:	edc4 7a03 	vstr	s15, [r4, #12]
        if((int)p->idx >= length)
 8026ede:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8026ee2:	ee17 3a10 	vmov	r3, s14
 8026ee6:	455b      	cmp	r3, fp
 8026ee8:	db07      	blt.n	8026efa <tSampler_tick+0x1d2>
            p->idx -= (float)length;
 8026eea:	ee07 ba10 	vmov	s14, fp
 8026eee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026ef2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026ef6:	edc4 7a03 	vstr	s15, [r4, #12]
    _tSampler* p = *sp;
 8026efa:	682f      	ldr	r7, [r5, #0]
    if (p->targetstart >= 0)
 8026efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026efe:	2900      	cmp	r1, #0
 8026f00:	db02      	blt.n	8026f08 <tSampler_tick+0x1e0>
        tSampler_setStart(sp, p->targetstart);
 8026f02:	4628      	mov	r0, r5
 8026f04:	f7ff fde4 	bl	8026ad0 <tSampler_setStart>
    if (p->targetend >= 0)
 8026f08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8026f0a:	2900      	cmp	r1, #0
 8026f0c:	db02      	blt.n	8026f14 <tSampler_tick+0x1ec>
        tSampler_setEnd(sp, p->targetend);
 8026f0e:	4628      	mov	r0, r5
 8026f10:	f7ff fe74 	bl	8026bfc <tSampler_setEnd>
    if (p->mode == PlayLoop)
 8026f14:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8026f18:	f104 0508 	add.w	r5, r4, #8
 8026f1c:	2b01      	cmp	r3, #1
 8026f1e:	d056      	beq.n	8026fce <tSampler_tick+0x2a6>
    else if (p->mode == PlayBackAndForth)
 8026f20:	2b02      	cmp	r3, #2
 8026f22:	f000 8100 	beq.w	8027126 <tSampler_tick+0x3fe>
    if (p->mode == PlayNormal)
 8026f26:	bb4b      	cbnz	r3, 8026f7c <tSampler_tick+0x254>
    	if (p->idx < myStart)
 8026f28:	ee07 9a90 	vmov	s15, r9
 8026f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8026f30:	edd4 7a03 	vldr	s15, [r4, #12]
 8026f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f3c:	f140 80d8 	bpl.w	80270f0 <tSampler_tick+0x3c8>
    		p->idx = myEnd;
 8026f40:	ed84 7a03 	vstr	s14, [r4, #12]
    	float ticksToEnd = rev ? ((idx - myStart) * p->iinc) : ((myEnd - idx) * p->iinc);
 8026f44:	f1b8 0f00 	cmp.w	r8, #0
 8026f48:	ed94 7a06 	vldr	s14, [r4, #24]
    	if (ticksToEnd < (0.007f * leaf.sampleRate))
 8026f4c:	eddf 6add 	vldr	s13, [pc, #884]	; 80272c4 <tSampler_tick+0x59c>
    	float ticksToEnd = rev ? ((idx - myStart) * p->iinc) : ((myEnd - idx) * p->iinc);
 8026f50:	bfb4      	ite	lt
 8026f52:	eba6 0309 	sublt.w	r3, r6, r9
 8026f56:	ebaa 0306 	subge.w	r3, sl, r6
 8026f5a:	ee07 3a90 	vmov	s15, r3
    	if (ticksToEnd < (0.007f * leaf.sampleRate))
 8026f5e:	4bda      	ldr	r3, [pc, #872]	; (80272c8 <tSampler_tick+0x5a0>)
    	float ticksToEnd = rev ? ((idx - myStart) * p->iinc) : ((myEnd - idx) * p->iinc);
 8026f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026f64:	ee67 7a87 	vmul.f32	s15, s15, s14
    	if (ticksToEnd < (0.007f * leaf.sampleRate))
 8026f68:	ed93 7a00 	vldr	s14, [r3]
 8026f6c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8026f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8026f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f78:	f300 8159 	bgt.w	802722e <tSampler_tick+0x506>
    sample = sample * tRamp_tick(&p->gain);
 8026f7c:	4628      	mov	r0, r5
 8026f7e:	f7fb fcd9 	bl	8022934 <tRamp_tick>
    if (p->active < 0)
 8026f82:	6c63      	ldr	r3, [r4, #68]	; 0x44
    sample = sample * tRamp_tick(&p->gain);
 8026f84:	ee20 8a08 	vmul.f32	s16, s0, s16
    if (p->active < 0)
 8026f88:	2b00      	cmp	r3, #0
 8026f8a:	f2c0 80e4 	blt.w	8027156 <tSampler_tick+0x42e>
}
 8026f8e:	eeb0 0a48 	vmov.f32	s0, s16
    p->last = sample;
 8026f92:	ed84 8a05 	vstr	s16, [r4, #20]
}
 8026f96:	b007      	add	sp, #28
 8026f98:	ecbd 8b04 	vpop	{d8-d9}
 8026f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return p->last;
 8026fa0:	ed94 8a05 	vldr	s16, [r4, #20]
}
 8026fa4:	eeb0 0a48 	vmov.f32	s0, s16
 8026fa8:	b007      	add	sp, #28
 8026faa:	ecbd 8b04 	vpop	{d8-d9}
 8026fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p->active == 0)         return 0.f;
 8026fb2:	ed9f 8ac6 	vldr	s16, [pc, #792]	; 80272cc <tSampler_tick+0x5a4>
}
 8026fb6:	eeb0 0a48 	vmov.f32	s0, s16
 8026fba:	b007      	add	sp, #28
 8026fbc:	ecbd 8b04 	vpop	{d8-d9}
 8026fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026fc4:	f8cd c004 	str.w	ip, [sp, #4]
    int32_t fadeLeftStart = 0;
 8026fc8:	f04f 0e00 	mov.w	lr, #0
 8026fcc:	e755      	b.n	8026e7a <tSampler_tick+0x152>
        if((int)p->idx < myStart)
 8026fce:	edd4 7a03 	vldr	s15, [r4, #12]
 8026fd2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8026fd6:	ee17 3a10 	vmov	r3, s14
 8026fda:	454b      	cmp	r3, r9
 8026fdc:	da0e      	bge.n	8026ffc <tSampler_tick+0x2d4>
            p->idx += (float)(fadeRightEnd - fadeLeftEnd);
 8026fde:	9b01      	ldr	r3, [sp, #4]
 8026fe0:	ebaa 0303 	sub.w	r3, sl, r3
 8026fe4:	ee07 3a10 	vmov	s14, r3
 8026fe8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026fec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026ff0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8026ff4:	edc4 7a03 	vstr	s15, [r4, #12]
 8026ff8:	ee17 3a10 	vmov	r3, s14
        if((int)p->idx > myEnd)
 8026ffc:	459a      	cmp	sl, r3
 8026ffe:	dabd      	bge.n	8026f7c <tSampler_tick+0x254>
            p->idx -= (float)(fadeRightEnd - fadeLeftEnd);
 8027000:	9b01      	ldr	r3, [sp, #4]
 8027002:	ebaa 0a03 	sub.w	sl, sl, r3
 8027006:	ee07 aa10 	vmov	s14, sl
 802700a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802700e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027012:	edc4 7a03 	vstr	s15, [r4, #12]
 8027016:	e7b1      	b.n	8026f7c <tSampler_tick+0x254>
 8027018:	ee07 ca90 	vmov	s15, ip
        if ((fadeLeftStart <= idx) && (idx <= fadeLeftEnd))
 802701c:	45b6      	cmp	lr, r6
 802701e:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8027022:	dc70      	bgt.n	8027106 <tSampler_tick+0x3de>
 8027024:	9b01      	ldr	r3, [sp, #4]
 8027026:	429e      	cmp	r6, r3
 8027028:	dc6d      	bgt.n	8027106 <tSampler_tick+0x3de>
            offset = fadeLeftEnd - idx;
 802702a:	1b9b      	subs	r3, r3, r6
            p->inCrossfade = 1;
 802702c:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
            offset = fadeLeftEnd - idx;
 8027030:	9302      	str	r3, [sp, #8]
            cdx = fadeRightEnd - offset;
 8027032:	ebaa 0303 	sub.w	r3, sl, r3
            int c1 = cdx-(1*dir);
 8027036:	eba3 0e08 	sub.w	lr, r3, r8
            c1 = (c1 < length * rev) ? c1 + (length * (1-rev)) : c1 - (length * rev);
 802703a:	4577      	cmp	r7, lr
 802703c:	f340 8127 	ble.w	802728e <tSampler_tick+0x566>
 8027040:	4486      	add	lr, r0
            c2 = (c2 < length * rev) ? c2 + (length * (1-rev)) : c2 - (length * rev);
 8027042:	429f      	cmp	r7, r3
            cfxsample = LEAF_interpolate_hermite_x (buff[c1],
 8027044:	eeb0 2a68 	vmov.f32	s4, s17
 8027048:	9005      	str	r0, [sp, #20]
            c2 = (c2 < length * rev) ? c2 + (length * (1-rev)) : c2 - (length * rev);
 802704a:	bfcc      	ite	gt
 802704c:	eb03 0c00 	addgt.w	ip, r3, r0
 8027050:	eba3 0c07 	suble.w	ip, r3, r7
            int c3 = cdx+(1*dir);
 8027054:	4443      	add	r3, r8
            cfxsample = LEAF_interpolate_hermite_x (buff[c1],
 8027056:	9104      	str	r1, [sp, #16]
 8027058:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
            c3 = (c3 < length * (1-rev)) ? c3 + (length * rev) : c3 - (length * (1-rev));
 802705c:	4283      	cmp	r3, r0
            cfxsample = LEAF_interpolate_hermite_x (buff[c1],
 802705e:	eddc 0a00 	vldr	s1, [ip]
            c3 = (c3 < length * (1-rev)) ? c3 + (length * rev) : c3 - (length * (1-rev));
 8027062:	bfac      	ite	ge
 8027064:	1a1a      	subge	r2, r3, r0
 8027066:	18fa      	addlt	r2, r7, r3
            int c4 = cdx+(2*dir);
 8027068:	4443      	add	r3, r8
            cfxsample = LEAF_interpolate_hermite_x (buff[c1],
 802706a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            c4 = (c4 < length * (1-rev)) ? c4 + (length * rev) : c4 - (length * (1-rev));
 802706e:	4283      	cmp	r3, r0
            cfxsample = LEAF_interpolate_hermite_x (buff[c1],
 8027070:	ed92 1a00 	vldr	s2, [r2]
            c4 = (c4 < length * (1-rev)) ? c4 + (length * rev) : c4 - (length * (1-rev));
 8027074:	bfac      	ite	ge
 8027076:	1a1b      	subge	r3, r3, r0
 8027078:	19db      	addlt	r3, r3, r7
            cfxsample = LEAF_interpolate_hermite_x (buff[c1],
 802707a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802707e:	edd3 1a00 	vldr	s3, [r3]
 8027082:	eb01 038e 	add.w	r3, r1, lr, lsl #2
 8027086:	ed93 0a00 	vldr	s0, [r3]
 802708a:	f7fd fa91 	bl	80245b0 <LEAF_interpolate_hermite_x>
            crossfadeMix = (float) offset / (float) cfxlen;
 802708e:	eddd 7a02 	vldr	s15, [sp, #8]
 8027092:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8027096:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802709a:	ee86 7aa9 	vdiv.f32	s14, s13, s19
 802709e:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 80270a2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80270a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80270aa:	eea8 0a27 	vfma.f32	s0, s16, s15
 80270ae:	eeb0 8a40 	vmov.f32	s16, s0
        float flipLength = fabsf(p->flipIdx - p->flipStart);
 80270b2:	ed94 7a14 	vldr	s14, [r4, #80]	; 0x50
 80270b6:	edd4 8a13 	vldr	s17, [r4, #76]	; 0x4c
 80270ba:	ee77 7a68 	vsub.f32	s15, s14, s17
 80270be:	eef0 7ae7 	vabs.f32	s15, s15
        if (flipLength > cfxlen)
 80270c2:	eef4 7ae9 	vcmpe.f32	s15, s19
 80270c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80270ca:	dd56      	ble.n	802717a <tSampler_tick+0x452>
            p->flipStart = -1;
 80270cc:	4b80      	ldr	r3, [pc, #512]	; (80272d0 <tSampler_tick+0x5a8>)
    float inc = fmodf(p->inc, (float)p->len);
 80270ce:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80270d2:	ed94 0a04 	vldr	s0, [r4, #16]
 80270d6:	eef8 0a67 	vcvt.f32.u32	s1, s15
            p->flipStart = -1;
 80270da:	64e3      	str	r3, [r4, #76]	; 0x4c
            p->flipIdx = -1;
 80270dc:	6523      	str	r3, [r4, #80]	; 0x50
    float inc = fmodf(p->inc, (float)p->len);
 80270de:	f001 f857 	bl	8028190 <fmodf>
    p->idx += (dir * inc);
 80270e2:	edd4 7a03 	vldr	s15, [r4, #12]
 80270e6:	eee9 7a00 	vfma.f32	s15, s18, s0
 80270ea:	edc4 7a03 	vstr	s15, [r4, #12]
 80270ee:	e704      	b.n	8026efa <tSampler_tick+0x1d2>
    	else if (p->idx > myEnd)
 80270f0:	ee07 aa10 	vmov	s14, sl
 80270f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80270f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80270fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027100:	f77f af20 	ble.w	8026f44 <tSampler_tick+0x21c>
 8027104:	e71c      	b.n	8026f40 <tSampler_tick+0x218>
    int32_t fadeRightStart = fadeRightEnd - cfxlen;
 8027106:	ebaa 0c0c 	sub.w	ip, sl, ip
        else if ((fadeRightStart <= idx) && (idx <= fadeRightEnd))
 802710a:	4566      	cmp	r6, ip
 802710c:	f2c0 80bb 	blt.w	8027286 <tSampler_tick+0x55e>
 8027110:	45b2      	cmp	sl, r6
 8027112:	f2c0 80b8 	blt.w	8027286 <tSampler_tick+0x55e>
            offset = idx - fadeRightStart;
 8027116:	eba6 030c 	sub.w	r3, r6, ip
            p->inCrossfade = 1;
 802711a:	2201      	movs	r2, #1
            offset = idx - fadeRightStart;
 802711c:	9302      	str	r3, [sp, #8]
            cdx = fadeLeftStart + offset;
 802711e:	4473      	add	r3, lr
            p->inCrossfade = 1;
 8027120:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8027124:	e787      	b.n	8027036 <tSampler_tick+0x30e>
        if (p->idx < myStart)
 8027126:	ee07 9a90 	vmov	s15, r9
 802712a:	ed94 7a03 	vldr	s14, [r4, #12]
 802712e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8027136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802713a:	f140 8081 	bpl.w	8027240 <tSampler_tick+0x518>
            p->idx = myStart + 1;
 802713e:	f109 0901 	add.w	r9, r9, #1
            p->bnf = -p->bnf;
 8027142:	7fa3      	ldrb	r3, [r4, #30]
            p->idx = myStart + 1;
 8027144:	ee07 9a90 	vmov	s15, r9
            p->bnf = -p->bnf;
 8027148:	425b      	negs	r3, r3
            p->idx = myStart + 1;
 802714a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            p->bnf = -p->bnf;
 802714e:	77a3      	strb	r3, [r4, #30]
            p->idx = myStart + 1;
 8027150:	edc4 7a03 	vstr	s15, [r4, #12]
 8027154:	e712      	b.n	8026f7c <tSampler_tick+0x254>
        if (tRamp_sample(&p->gain) <= 0.00001f)
 8027156:	4628      	mov	r0, r5
 8027158:	f7fb fc14 	bl	8022984 <tRamp_sample>
 802715c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80272d4 <tSampler_tick+0x5ac>
 8027160:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027168:	f63f af11 	bhi.w	8026f8e <tSampler_tick+0x266>
            if (p->retrigger == 1)
 802716c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802716e:	2b01      	cmp	r3, #1
 8027170:	f000 8090 	beq.w	8027294 <tSampler_tick+0x56c>
                p->active = 0;
 8027174:	2300      	movs	r3, #0
 8027176:	6463      	str	r3, [r4, #68]	; 0x44
 8027178:	e709      	b.n	8026f8e <tSampler_tick+0x266>
        if (p->flipIdx >= 0)
 802717a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802717e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027182:	db4f      	blt.n	8027224 <tSampler_tick+0x4fc>
            if (p->flipStart == -1)
 8027184:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8027188:	eef4 8a66 	vcmp.f32	s17, s13
 802718c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027190:	d06e      	beq.n	8027270 <tSampler_tick+0x548>
 8027192:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8027196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802719a:	eec7 8aa9 	vdiv.f32	s17, s15, s19
 802719e:	ee76 7ae8 	vsub.f32	s15, s13, s17
 80271a2:	ee27 8a88 	vmul.f32	s16, s15, s16
            int fdx = (int) p->flipIdx;
 80271a6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
            idx += (1-rev);
 80271aa:	9a03      	ldr	r2, [sp, #12]
 80271ac:	4416      	add	r6, r2
            int fdx = (int) p->flipIdx;
 80271ae:	eef0 6a67 	vmov.f32	s13, s15
            float falpha = (1-rev) - (p->flipIdx - fdx) * dir;
 80271b2:	ee07 2a90 	vmov	s15, r2
 80271b6:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
            int f3 = fdx-(1*dir);
 80271ba:	ee16 3a90 	vmov	r3, s13
            float falpha = (1-rev) - (p->flipIdx - fdx) * dir;
 80271be:	eef8 7ae6 	vcvt.f32.s32	s15, s13
            int f1 = fdx+(1*dir);
 80271c2:	eb08 0e03 	add.w	lr, r8, r3
            int f3 = fdx-(1*dir);
 80271c6:	eba3 0208 	sub.w	r2, r3, r8
            float falpha = (1-rev) - (p->flipIdx - fdx) * dir;
 80271ca:	ee37 7ac7 	vsub.f32	s14, s15, s14
            f1 = (f1 < length*(1-rev)) ? f1 + (length * rev) : f1 - (length * (1-rev));
 80271ce:	4586      	cmp	lr, r0
            int f4 = fdx-(2*dir);
 80271d0:	eba2 0c08 	sub.w	ip, r2, r8
            f1 = (f1 < length*(1-rev)) ? f1 + (length * rev) : f1 - (length * (1-rev));
 80271d4:	bfb4      	ite	lt
 80271d6:	44be      	addlt	lr, r7
 80271d8:	ebae 0e00 	subge.w	lr, lr, r0
            f2 = (f2 < length*(1-rev)) ? f2 + (length * rev) : f2 - (length * (1-rev));
 80271dc:	4283      	cmp	r3, r0
            float falpha = (1-rev) - (p->flipIdx - fdx) * dir;
 80271de:	eea9 2a07 	vfma.f32	s4, s18, s14
            f2 = (f2 < length*(1-rev)) ? f2 + (length * rev) : f2 - (length * (1-rev));
 80271e2:	da43      	bge.n	802726c <tSampler_tick+0x544>
 80271e4:	443b      	add	r3, r7
            f3 = (f3 < length*rev) ? f3 + (length * (1-rev)) : f3 - (length * rev);
 80271e6:	4297      	cmp	r7, r2
            flipsample = LEAF_interpolate_hermite_x (buff[f1],
 80271e8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
            f3 = (f3 < length*rev) ? f3 + (length * (1-rev)) : f3 - (length * rev);
 80271ec:	bfcc      	ite	gt
 80271ee:	1812      	addgt	r2, r2, r0
 80271f0:	1bd2      	suble	r2, r2, r7
            f4 = (f4 < length*rev) ? f4 + (length * (1-rev)) : f4 - (length * rev);
 80271f2:	4567      	cmp	r7, ip
            flipsample = LEAF_interpolate_hermite_x (buff[f1],
 80271f4:	edd3 0a00 	vldr	s1, [r3]
 80271f8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            f4 = (f4 < length*rev) ? f4 + (length * (1-rev)) : f4 - (length * rev);
 80271fc:	bfcc      	ite	gt
 80271fe:	4460      	addgt	r0, ip
 8027200:	ebac 0007 	suble.w	r0, ip, r7
            flipsample = LEAF_interpolate_hermite_x (buff[f1],
 8027204:	ed92 1a00 	vldr	s2, [r2]
 8027208:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 802720c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8027210:	edd0 1a00 	vldr	s3, [r0]
 8027214:	ed91 0a00 	vldr	s0, [r1]
 8027218:	f7fd f9ca 	bl	80245b0 <LEAF_interpolate_hermite_x>
 802721c:	eea0 8a28 	vfma.f32	s16, s0, s17
 8027220:	edd4 8a13 	vldr	s17, [r4, #76]	; 0x4c
 8027224:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8027228:	eef8 0a67 	vcvt.f32.u32	s1, s15
 802722c:	e62c      	b.n	8026e88 <tSampler_tick+0x160>
            tRamp_setDest(&p->gain, 0.f);
 802722e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80272cc <tSampler_tick+0x5a4>
 8027232:	4628      	mov	r0, r5
 8027234:	f7fb fb62 	bl	80228fc <tRamp_setDest>
            p->active = -1;
 8027238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802723c:	6463      	str	r3, [r4, #68]	; 0x44
 802723e:	e69d      	b.n	8026f7c <tSampler_tick+0x254>
        else if (p->idx > myEnd)
 8027240:	ee07 aa90 	vmov	s15, sl
 8027244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027248:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802724c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027250:	f77f ae94 	ble.w	8026f7c <tSampler_tick+0x254>
            p->idx = myEnd - 1;
 8027254:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
            p->bnf = -p->bnf;
 8027258:	7fa3      	ldrb	r3, [r4, #30]
            p->idx = myEnd - 1;
 802725a:	ee07 aa90 	vmov	s15, sl
            p->bnf = -p->bnf;
 802725e:	425b      	negs	r3, r3
            p->idx = myEnd - 1;
 8027260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            p->bnf = -p->bnf;
 8027264:	77a3      	strb	r3, [r4, #30]
            p->idx = myEnd - 1;
 8027266:	edc4 7a03 	vstr	s15, [r4, #12]
 802726a:	e687      	b.n	8026f7c <tSampler_tick+0x254>
            f2 = (f2 < length*(1-rev)) ? f2 + (length * rev) : f2 - (length * (1-rev));
 802726c:	1a1b      	subs	r3, r3, r0
 802726e:	e7ba      	b.n	80271e6 <tSampler_tick+0x4be>
                p->flipStart = p->idx;
 8027270:	ed94 7a03 	vldr	s14, [r4, #12]
                p->flipIdx = p->idx;
 8027274:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8027278:	ed9f 8a14 	vldr	s16, [pc, #80]	; 80272cc <tSampler_tick+0x5a4>
                p->flipStart = p->idx;
 802727c:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
                p->flipIdx = p->idx;
 8027280:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
 8027284:	e78f      	b.n	80271a6 <tSampler_tick+0x47e>
        else p->inCrossfade = 0;
 8027286:	2300      	movs	r3, #0
 8027288:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 802728c:	e711      	b.n	80270b2 <tSampler_tick+0x38a>
            c1 = (c1 < length * rev) ? c1 + (length * (1-rev)) : c1 - (length * rev);
 802728e:	ebae 0e07 	sub.w	lr, lr, r7
 8027292:	e6d6      	b.n	8027042 <tSampler_tick+0x31a>
                p->retrigger = 0;
 8027294:	2200      	movs	r2, #0
                p->active = 1;
 8027296:	6463      	str	r3, [r4, #68]	; 0x44
                tRamp_setDest(&p->gain, 1.f);
 8027298:	4628      	mov	r0, r5
 802729a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
                p->retrigger = 0;
 802729e:	6422      	str	r2, [r4, #64]	; 0x40
                tRamp_setDest(&p->gain, 1.f);
 80272a0:	f7fb fb2c 	bl	80228fc <tRamp_setDest>
                if (p->dir > 0)
 80272a4:	f994 301c 	ldrsb.w	r3, [r4, #28]
 80272a8:	2b00      	cmp	r3, #0
                    if (p->flip > 0)    p->idx = p->start;
 80272aa:	f994 301d 	ldrsb.w	r3, [r4, #29]
                if (p->dir > 0)
 80272ae:	dd13      	ble.n	80272d8 <tSampler_tick+0x5b0>
                    if (p->flip > 0)    p->idx = p->start;
 80272b0:	2b00      	cmp	r3, #0
 80272b2:	dd13      	ble.n	80272dc <tSampler_tick+0x5b4>
                    else                p->idx = p->start;
 80272b4:	edd4 7a08 	vldr	s15, [r4, #32]
 80272b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80272bc:	edc4 7a03 	vstr	s15, [r4, #12]
 80272c0:	e665      	b.n	8026f8e <tSampler_tick+0x266>
 80272c2:	bf00      	nop
 80272c4:	3be56042 	.word	0x3be56042
 80272c8:	200194a0 	.word	0x200194a0
 80272cc:	00000000 	.word	0x00000000
 80272d0:	bf800000 	.word	0xbf800000
 80272d4:	3727c5ac 	.word	0x3727c5ac
                    if (p->flip > 0)    p->idx = p->end;
 80272d8:	2b00      	cmp	r3, #0
 80272da:	ddeb      	ble.n	80272b4 <tSampler_tick+0x58c>
 80272dc:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80272e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80272e4:	edc4 7a03 	vstr	s15, [r4, #12]
 80272e8:	e651      	b.n	8026f8e <tSampler_tick+0x266>
 80272ea:	bf00      	nop

080272ec <tSampler_setLength>:

void    tSampler_setLength    (tSampler* const sp, int32_t length)
{
 80272ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tSampler* p = *sp;
 80272ee:	6804      	ldr	r4, [r0, #0]
    if (length == 0) length = 1;
 80272f0:	2900      	cmp	r1, #0
 80272f2:	bf14      	ite	ne
 80272f4:	460a      	movne	r2, r1
 80272f6:	2201      	moveq	r2, #1
    tSampler_setEnd(sp, p->start + length);
 80272f8:	6a23      	ldr	r3, [r4, #32]
    if (p->active) // only bother with these checks if we're actually playing
 80272fa:	6c65      	ldr	r5, [r4, #68]	; 0x44
    tSampler_setEnd(sp, p->start + length);
 80272fc:	1899      	adds	r1, r3, r2
    if (p->active) // only bother with these checks if we're actually playing
 80272fe:	2d00      	cmp	r5, #0
 8027300:	d041      	beq.n	8027386 <tSampler_setLength+0x9a>
        if (p->start > end)
 8027302:	428b      	cmp	r3, r1
 8027304:	dc1d      	bgt.n	8027342 <tSampler_setLength+0x56>
 8027306:	2501      	movs	r5, #1
 8027308:	2700      	movs	r7, #0
            tempflip = 1;
 802730a:	462e      	mov	r6, r5
        uint32_t cfxlen = p->cfxlen;
 802730c:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
        if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 8027310:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8027314:	eef8 6a47 	vcvt.f32.u32	s13, s14
        if (p->inCrossfade || p->flipStart >= 0)
 8027318:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 802731c:	eefb 7acf 	vcvt.f32.u32	s15, s15, #2
 8027320:	eef4 7ae6 	vcmpe.f32	s15, s13
 8027324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027328:	bf48      	it	mi
 802732a:	eebc 7ae7 	vcvtmi.u32.f32	s14, s15
        if (p->inCrossfade || p->flipStart >= 0)
 802732e:	b933      	cbnz	r3, 802733e <tSampler_setLength+0x52>
 8027330:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 8027334:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8027338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802733c:	db06      	blt.n	802734c <tSampler_setLength+0x60>
    p->targetend = -1;
 802733e:	62e1      	str	r1, [r4, #44]	; 0x2c
}
 8027340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (p->start > end)
 8027342:	2701      	movs	r7, #1
 8027344:	2500      	movs	r5, #0
            tempflip = -1;
 8027346:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 802734a:	e7df      	b.n	802730c <tSampler_setLength+0x20>
        int dir = p->bnf * p->dir * tempflip;
 802734c:	f994 301e 	ldrsb.w	r3, [r4, #30]
 8027350:	f994 c01c 	ldrsb.w	ip, [r4, #28]
 8027354:	fb13 f30c 	smulbb	r3, r3, ip
 8027358:	fb06 f303 	mul.w	r3, r6, r3
        if (tempflip > 0 && dir < 0) // end is end and we're playing in reverse
 802735c:	2b00      	cmp	r3, #0
 802735e:	da3c      	bge.n	80273da <tSampler_setLength+0xee>
 8027360:	2d00      	cmp	r5, #0
 8027362:	d03a      	beq.n	80273da <tSampler_setLength+0xee>
            if (end < p->idx) // end given is before current index or we're in a crossfade
 8027364:	ee07 1a90 	vmov	s15, r1
 8027368:	edd4 6a03 	vldr	s13, [r4, #12]
 802736c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027370:	eef4 7ae6 	vcmpe.f32	s15, s13
 8027374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027378:	d43e      	bmi.n	80273f8 <tSampler_setLength+0x10c>
        if (tempflip != p->flip && p->flipStart < 0)
 802737a:	f994 301d 	ldrsb.w	r3, [r4, #29]
 802737e:	429e      	cmp	r6, r3
 8027380:	d001      	beq.n	8027386 <tSampler_setLength+0x9a>
            p->flipIdx = 0;
 8027382:	2300      	movs	r3, #0
 8027384:	6523      	str	r3, [r4, #80]	; 0x50
    p->end = LEAF_clipInt(0, end, p->samp->recordedLength-1);
 8027386:	6863      	ldr	r3, [r4, #4]
 8027388:	4605      	mov	r5, r0
 802738a:	2000      	movs	r0, #0
 802738c:	691a      	ldr	r2, [r3, #16]
 802738e:	3a01      	subs	r2, #1
 8027390:	f7fd f80a 	bl	80243a8 <LEAF_clipInt>
 8027394:	62a0      	str	r0, [r4, #40]	; 0x28
    handleStartEndChange(sp);
 8027396:	682b      	ldr	r3, [r5, #0]
    p->len = abs(p->end - p->start);
 8027398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802739a:	6a18      	ldr	r0, [r3, #32]
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 802739c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    p->len = abs(p->end - p->start);
 80273a0:	1a11      	subs	r1, r2, r0
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 80273a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    p->len = abs(p->end - p->start);
 80273a6:	2900      	cmp	r1, #0
 80273a8:	bfb8      	it	lt
 80273aa:	4249      	neglt	r1, r1
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 80273ac:	ee07 1a10 	vmov	s14, r1
    p->len = abs(p->end - p->start);
 80273b0:	6319      	str	r1, [r3, #48]	; 0x30
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 80273b2:	eebb 7acf 	vcvt.f32.u32	s14, s14, #2
 80273b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80273ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273be:	dd03      	ble.n	80273c8 <tSampler_setLength+0xdc>
 80273c0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80273c4:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
        p->flip = -1;
 80273c8:	4282      	cmp	r2, r0
 80273ca:	bfac      	ite	ge
 80273cc:	2201      	movge	r2, #1
 80273ce:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
    p->targetend = -1;
 80273d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80273d6:	775a      	strb	r2, [r3, #29]
 80273d8:	e7b1      	b.n	802733e <tSampler_setLength+0x52>
        else if (tempflip < 0 && dir > 0) // end is start and we're playing forward
 80273da:	2b00      	cmp	r3, #0
 80273dc:	ddcd      	ble.n	802737a <tSampler_setLength+0x8e>
 80273de:	2f00      	cmp	r7, #0
 80273e0:	d0cb      	beq.n	802737a <tSampler_setLength+0x8e>
            if (end > p->idx) // end given is after current index or we're in a crossfade
 80273e2:	ee07 1a90 	vmov	s15, r1
 80273e6:	edd4 6a03 	vldr	s13, [r4, #12]
 80273ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80273ee:	eef4 7ae6 	vcmpe.f32	s15, s13
 80273f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273f6:	ddc0      	ble.n	802737a <tSampler_setLength+0x8e>
                float tempLen = abs(end - p->start) * 0.25f;
 80273f8:	2a00      	cmp	r2, #0
                if (cfxlen > tempLen)
 80273fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                p->targetend = end;
 80273fe:	62e1      	str	r1, [r4, #44]	; 0x2c
                float tempLen = abs(end - p->start) * 0.25f;
 8027400:	bfb8      	it	lt
 8027402:	4252      	neglt	r2, r2
 8027404:	ee07 2a90 	vmov	s15, r2
 8027408:	eefa 7acf 	vcvt.f32.s32	s15, s15, #2
                if (cfxlen > tempLen)
 802740c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8027410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027414:	d594      	bpl.n	8027340 <tSampler_setLength+0x54>
                    p->cfxlen = tempLen;
 8027416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802741a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
}
 802741e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08027420 <tSampler_setRate>:

void tSampler_setRate      (tSampler* const sp, float rate)
{
    _tSampler* p = *sp;
    
    if (rate < 0.f)
 8027420:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tSampler* p = *sp;
 8027424:	6803      	ldr	r3, [r0, #0]
    if (rate < 0.f)
 8027426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802742a:	d40a      	bmi.n	8027442 <tSampler_setRate+0x22>
        rate = -rate;
        p->dir = -1;
    }
    else
    {
        p->dir = 1;
 802742c:	2201      	movs	r2, #1
    }
    
    p->inc = rate;
    p->iinc = 1.f / p->inc;
 802742e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027432:	771a      	strb	r2, [r3, #28]
    p->inc = rate;
 8027434:	ed83 0a04 	vstr	s0, [r3, #16]
    p->iinc = 1.f / p->inc;
 8027438:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802743c:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8027440:	4770      	bx	lr
        rate = -rate;
 8027442:	eeb1 0a40 	vneg.f32	s0, s0
        p->dir = -1;
 8027446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802744a:	e7f0      	b.n	802742e <tSampler_setRate+0xe>

0802744c <LEAF_init>:

LEAF leaf;

void LEAF_init(float sr, int blocksize, char* memory, size_t memorysize, float(*random)(void))

{
 802744c:	b538      	push	{r3, r4, r5, lr}
 802744e:	460c      	mov	r4, r1
 8027450:	4605      	mov	r5, r0
    leaf_pool_init(memory, memorysize);
 8027452:	4611      	mov	r1, r2
 8027454:	4620      	mov	r0, r4
{
 8027456:	461c      	mov	r4, r3
 8027458:	ed2d 8b02 	vpush	{d8}
 802745c:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(memory, memorysize);
 8027460:	f7fd f976 	bl	8024750 <leaf_pool_init>
    
    leaf.sampleRate = sr;

    leaf.blockSize = blocksize;
    
    leaf.invSampleRate = 1.0f/sr;
 8027464:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 8027468:	eddf 7a09 	vldr	s15, [pc, #36]	; 8027490 <LEAF_init+0x44>
    leaf.sampleRate = sr;
 802746c:	4a09      	ldr	r2, [pc, #36]	; (8027494 <LEAF_init+0x48>)

    leaf.random = random;
    
    leaf.clearOnAllocation = 0;
 802746e:	2100      	movs	r1, #0
    leaf.invSampleRate = 1.0f/sr;
 8027470:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf.blockSize = blocksize;
 8027474:	6095      	str	r5, [r2, #8]
    leaf.sampleRate = sr;
 8027476:	ed82 8a00 	vstr	s16, [r2]
    leaf.clearOnAllocation = 0;
 802747a:	e9c2 4104 	strd	r4, r1, [r2, #16]
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 802747e:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf.invSampleRate = 1.0f/sr;
 8027482:	ed82 7a01 	vstr	s14, [r2, #4]
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 8027486:	edc2 7a03 	vstr	s15, [r2, #12]
}
 802748a:	ecbd 8b02 	vpop	{d8}
 802748e:	bd38      	pop	{r3, r4, r5, pc}
 8027490:	40c90fdb 	.word	0x40c90fdb
 8027494:	200194a0 	.word	0x200194a0

08027498 <LEAF_error>:
//implement a function called this in your user code to catch errors
__attribute__((weak))
uint8_t LEAF_error(uint8_t whichone)
{
    return whichone;
}
 8027498:	4770      	bx	lr
 802749a:	bf00      	nop

0802749c <__errno>:
 802749c:	4b01      	ldr	r3, [pc, #4]	; (80274a4 <__errno+0x8>)
 802749e:	6818      	ldr	r0, [r3, #0]
 80274a0:	4770      	bx	lr
 80274a2:	bf00      	nop
 80274a4:	20000434 	.word	0x20000434

080274a8 <__libc_init_array>:
 80274a8:	b570      	push	{r4, r5, r6, lr}
 80274aa:	4e0d      	ldr	r6, [pc, #52]	; (80274e0 <__libc_init_array+0x38>)
 80274ac:	4c0d      	ldr	r4, [pc, #52]	; (80274e4 <__libc_init_array+0x3c>)
 80274ae:	1ba4      	subs	r4, r4, r6
 80274b0:	10a4      	asrs	r4, r4, #2
 80274b2:	2500      	movs	r5, #0
 80274b4:	42a5      	cmp	r5, r4
 80274b6:	d109      	bne.n	80274cc <__libc_init_array+0x24>
 80274b8:	4e0b      	ldr	r6, [pc, #44]	; (80274e8 <__libc_init_array+0x40>)
 80274ba:	4c0c      	ldr	r4, [pc, #48]	; (80274ec <__libc_init_array+0x44>)
 80274bc:	f002 fe18 	bl	802a0f0 <_init>
 80274c0:	1ba4      	subs	r4, r4, r6
 80274c2:	10a4      	asrs	r4, r4, #2
 80274c4:	2500      	movs	r5, #0
 80274c6:	42a5      	cmp	r5, r4
 80274c8:	d105      	bne.n	80274d6 <__libc_init_array+0x2e>
 80274ca:	bd70      	pop	{r4, r5, r6, pc}
 80274cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80274d0:	4798      	blx	r3
 80274d2:	3501      	adds	r5, #1
 80274d4:	e7ee      	b.n	80274b4 <__libc_init_array+0xc>
 80274d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80274da:	4798      	blx	r3
 80274dc:	3501      	adds	r5, #1
 80274de:	e7f2      	b.n	80274c6 <__libc_init_array+0x1e>
 80274e0:	0804cae8 	.word	0x0804cae8
 80274e4:	0804cae8 	.word	0x0804cae8
 80274e8:	0804cae8 	.word	0x0804cae8
 80274ec:	0804caec 	.word	0x0804caec

080274f0 <__itoa>:
 80274f0:	1e93      	subs	r3, r2, #2
 80274f2:	2b22      	cmp	r3, #34	; 0x22
 80274f4:	b510      	push	{r4, lr}
 80274f6:	460c      	mov	r4, r1
 80274f8:	d904      	bls.n	8027504 <__itoa+0x14>
 80274fa:	2300      	movs	r3, #0
 80274fc:	700b      	strb	r3, [r1, #0]
 80274fe:	461c      	mov	r4, r3
 8027500:	4620      	mov	r0, r4
 8027502:	bd10      	pop	{r4, pc}
 8027504:	2a0a      	cmp	r2, #10
 8027506:	d109      	bne.n	802751c <__itoa+0x2c>
 8027508:	2800      	cmp	r0, #0
 802750a:	da07      	bge.n	802751c <__itoa+0x2c>
 802750c:	232d      	movs	r3, #45	; 0x2d
 802750e:	700b      	strb	r3, [r1, #0]
 8027510:	4240      	negs	r0, r0
 8027512:	2101      	movs	r1, #1
 8027514:	4421      	add	r1, r4
 8027516:	f000 f821 	bl	802755c <__utoa>
 802751a:	e7f1      	b.n	8027500 <__itoa+0x10>
 802751c:	2100      	movs	r1, #0
 802751e:	e7f9      	b.n	8027514 <__itoa+0x24>

08027520 <itoa>:
 8027520:	f7ff bfe6 	b.w	80274f0 <__itoa>

08027524 <memcpy>:
 8027524:	b510      	push	{r4, lr}
 8027526:	1e43      	subs	r3, r0, #1
 8027528:	440a      	add	r2, r1
 802752a:	4291      	cmp	r1, r2
 802752c:	d100      	bne.n	8027530 <memcpy+0xc>
 802752e:	bd10      	pop	{r4, pc}
 8027530:	f811 4b01 	ldrb.w	r4, [r1], #1
 8027534:	f803 4f01 	strb.w	r4, [r3, #1]!
 8027538:	e7f7      	b.n	802752a <memcpy+0x6>

0802753a <memset>:
 802753a:	4402      	add	r2, r0
 802753c:	4603      	mov	r3, r0
 802753e:	4293      	cmp	r3, r2
 8027540:	d100      	bne.n	8027544 <memset+0xa>
 8027542:	4770      	bx	lr
 8027544:	f803 1b01 	strb.w	r1, [r3], #1
 8027548:	e7f9      	b.n	802753e <memset+0x4>

0802754a <stpcpy>:
 802754a:	4603      	mov	r3, r0
 802754c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8027550:	4618      	mov	r0, r3
 8027552:	f803 2b01 	strb.w	r2, [r3], #1
 8027556:	2a00      	cmp	r2, #0
 8027558:	d1f8      	bne.n	802754c <stpcpy+0x2>
 802755a:	4770      	bx	lr

0802755c <__utoa>:
 802755c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802755e:	4b1d      	ldr	r3, [pc, #116]	; (80275d4 <__utoa+0x78>)
 8027560:	b08b      	sub	sp, #44	; 0x2c
 8027562:	4605      	mov	r5, r0
 8027564:	460c      	mov	r4, r1
 8027566:	466e      	mov	r6, sp
 8027568:	f103 0c20 	add.w	ip, r3, #32
 802756c:	6818      	ldr	r0, [r3, #0]
 802756e:	6859      	ldr	r1, [r3, #4]
 8027570:	4637      	mov	r7, r6
 8027572:	c703      	stmia	r7!, {r0, r1}
 8027574:	3308      	adds	r3, #8
 8027576:	4563      	cmp	r3, ip
 8027578:	463e      	mov	r6, r7
 802757a:	d1f7      	bne.n	802756c <__utoa+0x10>
 802757c:	6818      	ldr	r0, [r3, #0]
 802757e:	791b      	ldrb	r3, [r3, #4]
 8027580:	713b      	strb	r3, [r7, #4]
 8027582:	1e93      	subs	r3, r2, #2
 8027584:	2b22      	cmp	r3, #34	; 0x22
 8027586:	6038      	str	r0, [r7, #0]
 8027588:	f04f 0300 	mov.w	r3, #0
 802758c:	d904      	bls.n	8027598 <__utoa+0x3c>
 802758e:	7023      	strb	r3, [r4, #0]
 8027590:	461c      	mov	r4, r3
 8027592:	4620      	mov	r0, r4
 8027594:	b00b      	add	sp, #44	; 0x2c
 8027596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027598:	1e66      	subs	r6, r4, #1
 802759a:	fbb5 f0f2 	udiv	r0, r5, r2
 802759e:	af0a      	add	r7, sp, #40	; 0x28
 80275a0:	fb02 5510 	mls	r5, r2, r0, r5
 80275a4:	443d      	add	r5, r7
 80275a6:	1c59      	adds	r1, r3, #1
 80275a8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80275ac:	f806 5f01 	strb.w	r5, [r6, #1]!
 80275b0:	4605      	mov	r5, r0
 80275b2:	b968      	cbnz	r0, 80275d0 <__utoa+0x74>
 80275b4:	5460      	strb	r0, [r4, r1]
 80275b6:	4423      	add	r3, r4
 80275b8:	4622      	mov	r2, r4
 80275ba:	1b19      	subs	r1, r3, r4
 80275bc:	1b10      	subs	r0, r2, r4
 80275be:	4281      	cmp	r1, r0
 80275c0:	dde7      	ble.n	8027592 <__utoa+0x36>
 80275c2:	7811      	ldrb	r1, [r2, #0]
 80275c4:	7818      	ldrb	r0, [r3, #0]
 80275c6:	f802 0b01 	strb.w	r0, [r2], #1
 80275ca:	f803 1901 	strb.w	r1, [r3], #-1
 80275ce:	e7f4      	b.n	80275ba <__utoa+0x5e>
 80275d0:	460b      	mov	r3, r1
 80275d2:	e7e2      	b.n	802759a <__utoa+0x3e>
 80275d4:	0804c17c 	.word	0x0804c17c

080275d8 <atanf>:
 80275d8:	b538      	push	{r3, r4, r5, lr}
 80275da:	ee10 5a10 	vmov	r5, s0
 80275de:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80275e2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80275e6:	eef0 7a40 	vmov.f32	s15, s0
 80275ea:	db0f      	blt.n	802760c <atanf+0x34>
 80275ec:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80275f0:	dd04      	ble.n	80275fc <atanf+0x24>
 80275f2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80275f6:	eeb0 0a67 	vmov.f32	s0, s15
 80275fa:	bd38      	pop	{r3, r4, r5, pc}
 80275fc:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8027730 <atanf+0x158>
 8027600:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8027734 <atanf+0x15c>
 8027604:	2d00      	cmp	r5, #0
 8027606:	fe77 7a87 	vselgt.f32	s15, s15, s14
 802760a:	e7f4      	b.n	80275f6 <atanf+0x1e>
 802760c:	4b4a      	ldr	r3, [pc, #296]	; (8027738 <atanf+0x160>)
 802760e:	429c      	cmp	r4, r3
 8027610:	dc10      	bgt.n	8027634 <atanf+0x5c>
 8027612:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8027616:	da0a      	bge.n	802762e <atanf+0x56>
 8027618:	ed9f 7a48 	vldr	s14, [pc, #288]	; 802773c <atanf+0x164>
 802761c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8027620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8027624:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8027628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802762c:	dce3      	bgt.n	80275f6 <atanf+0x1e>
 802762e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8027632:	e013      	b.n	802765c <atanf+0x84>
 8027634:	f000 f960 	bl	80278f8 <fabsf>
 8027638:	4b41      	ldr	r3, [pc, #260]	; (8027740 <atanf+0x168>)
 802763a:	429c      	cmp	r4, r3
 802763c:	dc4f      	bgt.n	80276de <atanf+0x106>
 802763e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8027642:	429c      	cmp	r4, r3
 8027644:	dc41      	bgt.n	80276ca <atanf+0xf2>
 8027646:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802764a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802764e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8027652:	2300      	movs	r3, #0
 8027654:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027658:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802765c:	1c5a      	adds	r2, r3, #1
 802765e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8027662:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8027744 <atanf+0x16c>
 8027666:	eddf 5a38 	vldr	s11, [pc, #224]	; 8027748 <atanf+0x170>
 802766a:	ed9f 5a38 	vldr	s10, [pc, #224]	; 802774c <atanf+0x174>
 802766e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8027672:	eee6 5a87 	vfma.f32	s11, s13, s14
 8027676:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8027750 <atanf+0x178>
 802767a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802767e:	eddf 5a35 	vldr	s11, [pc, #212]	; 8027754 <atanf+0x17c>
 8027682:	eee7 5a26 	vfma.f32	s11, s14, s13
 8027686:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8027758 <atanf+0x180>
 802768a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802768e:	eddf 5a33 	vldr	s11, [pc, #204]	; 802775c <atanf+0x184>
 8027692:	eee7 5a26 	vfma.f32	s11, s14, s13
 8027696:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8027760 <atanf+0x188>
 802769a:	eea6 5a87 	vfma.f32	s10, s13, s14
 802769e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8027764 <atanf+0x18c>
 80276a2:	eea5 7a26 	vfma.f32	s14, s10, s13
 80276a6:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8027768 <atanf+0x190>
 80276aa:	eea7 5a26 	vfma.f32	s10, s14, s13
 80276ae:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 802776c <atanf+0x194>
 80276b2:	eea5 7a26 	vfma.f32	s14, s10, s13
 80276b6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80276ba:	eea5 7a86 	vfma.f32	s14, s11, s12
 80276be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80276c2:	d121      	bne.n	8027708 <atanf+0x130>
 80276c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80276c8:	e795      	b.n	80275f6 <atanf+0x1e>
 80276ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80276ce:	ee30 7a67 	vsub.f32	s14, s0, s15
 80276d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80276d6:	2301      	movs	r3, #1
 80276d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80276dc:	e7be      	b.n	802765c <atanf+0x84>
 80276de:	4b24      	ldr	r3, [pc, #144]	; (8027770 <atanf+0x198>)
 80276e0:	429c      	cmp	r4, r3
 80276e2:	dc0b      	bgt.n	80276fc <atanf+0x124>
 80276e4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80276e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80276ec:	eea0 7a27 	vfma.f32	s14, s0, s15
 80276f0:	2302      	movs	r3, #2
 80276f2:	ee70 6a67 	vsub.f32	s13, s0, s15
 80276f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80276fa:	e7af      	b.n	802765c <atanf+0x84>
 80276fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8027700:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027704:	2303      	movs	r3, #3
 8027706:	e7a9      	b.n	802765c <atanf+0x84>
 8027708:	4a1a      	ldr	r2, [pc, #104]	; (8027774 <atanf+0x19c>)
 802770a:	491b      	ldr	r1, [pc, #108]	; (8027778 <atanf+0x1a0>)
 802770c:	009b      	lsls	r3, r3, #2
 802770e:	441a      	add	r2, r3
 8027710:	440b      	add	r3, r1
 8027712:	edd3 6a00 	vldr	s13, [r3]
 8027716:	ee37 7a66 	vsub.f32	s14, s14, s13
 802771a:	2d00      	cmp	r5, #0
 802771c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027720:	ed92 7a00 	vldr	s14, [r2]
 8027724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027728:	bfb8      	it	lt
 802772a:	eef1 7a67 	vneglt.f32	s15, s15
 802772e:	e762      	b.n	80275f6 <atanf+0x1e>
 8027730:	bfc90fdb 	.word	0xbfc90fdb
 8027734:	3fc90fdb 	.word	0x3fc90fdb
 8027738:	3edfffff 	.word	0x3edfffff
 802773c:	7149f2ca 	.word	0x7149f2ca
 8027740:	3f97ffff 	.word	0x3f97ffff
 8027744:	3c8569d7 	.word	0x3c8569d7
 8027748:	3d4bda59 	.word	0x3d4bda59
 802774c:	bd6ef16b 	.word	0xbd6ef16b
 8027750:	3d886b35 	.word	0x3d886b35
 8027754:	3dba2e6e 	.word	0x3dba2e6e
 8027758:	3e124925 	.word	0x3e124925
 802775c:	3eaaaaab 	.word	0x3eaaaaab
 8027760:	bd15a221 	.word	0xbd15a221
 8027764:	bd9d8795 	.word	0xbd9d8795
 8027768:	bde38e38 	.word	0xbde38e38
 802776c:	be4ccccd 	.word	0xbe4ccccd
 8027770:	401bffff 	.word	0x401bffff
 8027774:	0804c1a4 	.word	0x0804c1a4
 8027778:	0804c1b4 	.word	0x0804c1b4

0802777c <cosf>:
 802777c:	ee10 3a10 	vmov	r3, s0
 8027780:	b507      	push	{r0, r1, r2, lr}
 8027782:	4a1c      	ldr	r2, [pc, #112]	; (80277f4 <cosf+0x78>)
 8027784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027788:	4293      	cmp	r3, r2
 802778a:	dc04      	bgt.n	8027796 <cosf+0x1a>
 802778c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80277f8 <cosf+0x7c>
 8027790:	f001 fd40 	bl	8029214 <__kernel_cosf>
 8027794:	e004      	b.n	80277a0 <cosf+0x24>
 8027796:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802779a:	db04      	blt.n	80277a6 <cosf+0x2a>
 802779c:	ee30 0a40 	vsub.f32	s0, s0, s0
 80277a0:	b003      	add	sp, #12
 80277a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80277a6:	4668      	mov	r0, sp
 80277a8:	f001 fb9a 	bl	8028ee0 <__ieee754_rem_pio2f>
 80277ac:	f000 0003 	and.w	r0, r0, #3
 80277b0:	2801      	cmp	r0, #1
 80277b2:	d007      	beq.n	80277c4 <cosf+0x48>
 80277b4:	2802      	cmp	r0, #2
 80277b6:	d00e      	beq.n	80277d6 <cosf+0x5a>
 80277b8:	b9a0      	cbnz	r0, 80277e4 <cosf+0x68>
 80277ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80277be:	ed9d 0a00 	vldr	s0, [sp]
 80277c2:	e7e5      	b.n	8027790 <cosf+0x14>
 80277c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80277c8:	ed9d 0a00 	vldr	s0, [sp]
 80277cc:	f002 f802 	bl	80297d4 <__kernel_sinf>
 80277d0:	eeb1 0a40 	vneg.f32	s0, s0
 80277d4:	e7e4      	b.n	80277a0 <cosf+0x24>
 80277d6:	eddd 0a01 	vldr	s1, [sp, #4]
 80277da:	ed9d 0a00 	vldr	s0, [sp]
 80277de:	f001 fd19 	bl	8029214 <__kernel_cosf>
 80277e2:	e7f5      	b.n	80277d0 <cosf+0x54>
 80277e4:	2001      	movs	r0, #1
 80277e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80277ea:	ed9d 0a00 	vldr	s0, [sp]
 80277ee:	f001 fff1 	bl	80297d4 <__kernel_sinf>
 80277f2:	e7d5      	b.n	80277a0 <cosf+0x24>
 80277f4:	3f490fd8 	.word	0x3f490fd8
 80277f8:	00000000 	.word	0x00000000

080277fc <expf>:
 80277fc:	ee10 2a10 	vmov	r2, s0
 8027800:	f240 412a 	movw	r1, #1066	; 0x42a
 8027804:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8027808:	428b      	cmp	r3, r1
 802780a:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 802780e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8027812:	d92e      	bls.n	8027872 <expf+0x76>
 8027814:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8027818:	d061      	beq.n	80278de <expf+0xe2>
 802781a:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 802781e:	d304      	bcc.n	802782a <expf+0x2e>
 8027820:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027824:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8027828:	4770      	bx	lr
 802782a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80278e4 <expf+0xe8>
 802782e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027836:	dd04      	ble.n	8027842 <expf+0x46>
 8027838:	2000      	movs	r0, #0
 802783a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 802783e:	f002 b91b 	b.w	8029a78 <__math_oflowf>
 8027842:	eddf 7a29 	vldr	s15, [pc, #164]	; 80278e8 <expf+0xec>
 8027846:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802784a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802784e:	d504      	bpl.n	802785a <expf+0x5e>
 8027850:	2000      	movs	r0, #0
 8027852:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8027856:	f002 b903 	b.w	8029a60 <__math_uflowf>
 802785a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80278ec <expf+0xf0>
 802785e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027866:	d504      	bpl.n	8027872 <expf+0x76>
 8027868:	2000      	movs	r0, #0
 802786a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 802786e:	f002 b8fd 	b.w	8029a6c <__math_may_uflowf>
 8027872:	491f      	ldr	r1, [pc, #124]	; (80278f0 <expf+0xf4>)
 8027874:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8027878:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 802787c:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 8027880:	eeb0 4b47 	vmov.f64	d4, d7
 8027884:	eea5 4b06 	vfma.f64	d4, d5, d6
 8027888:	ec55 4b14 	vmov	r4, r5, d4
 802788c:	ee34 7b47 	vsub.f64	d7, d4, d7
 8027890:	f004 021f 	and.w	r2, r4, #31
 8027894:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8027898:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802789c:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 80278a0:	e9d2 4500 	ldrd	r4, r5, [r2]
 80278a4:	eea6 0b07 	vfma.f64	d0, d6, d7
 80278a8:	ee14 0a10 	vmov	r0, s8
 80278ac:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 80278b0:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 80278b4:	f04f 0b00 	mov.w	fp, #0
 80278b8:	eb1b 0204 	adds.w	r2, fp, r4
 80278bc:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 80278c0:	eb4c 0305 	adc.w	r3, ip, r5
 80278c4:	eea5 6b07 	vfma.f64	d6, d5, d7
 80278c8:	ee27 7b07 	vmul.f64	d7, d7, d7
 80278cc:	eea6 0b07 	vfma.f64	d0, d6, d7
 80278d0:	ec43 2b17 	vmov	d7, r2, r3
 80278d4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80278d8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80278dc:	e7a2      	b.n	8027824 <expf+0x28>
 80278de:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80278f4 <expf+0xf8>
 80278e2:	e79f      	b.n	8027824 <expf+0x28>
 80278e4:	42b17217 	.word	0x42b17217
 80278e8:	c2cff1b4 	.word	0xc2cff1b4
 80278ec:	c2ce8ecf 	.word	0xc2ce8ecf
 80278f0:	0804c1c8 	.word	0x0804c1c8
 80278f4:	00000000 	.word	0x00000000

080278f8 <fabsf>:
 80278f8:	ee10 3a10 	vmov	r3, s0
 80278fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027900:	ee00 3a10 	vmov	s0, r3
 8027904:	4770      	bx	lr
	...

08027908 <logf>:
 8027908:	ee10 3a10 	vmov	r3, s0
 802790c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8027910:	b410      	push	{r4}
 8027912:	d057      	beq.n	80279c4 <logf+0xbc>
 8027914:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8027918:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 802791c:	d31a      	bcc.n	8027954 <logf+0x4c>
 802791e:	005a      	lsls	r2, r3, #1
 8027920:	d104      	bne.n	802792c <logf+0x24>
 8027922:	2001      	movs	r0, #1
 8027924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027928:	f002 b8ac 	b.w	8029a84 <__math_divzerof>
 802792c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8027930:	d045      	beq.n	80279be <logf+0xb6>
 8027932:	2b00      	cmp	r3, #0
 8027934:	db02      	blt.n	802793c <logf+0x34>
 8027936:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 802793a:	d303      	bcc.n	8027944 <logf+0x3c>
 802793c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027940:	f002 b8b0 	b.w	8029aa4 <__math_invalidf>
 8027944:	eddf 7a21 	vldr	s15, [pc, #132]	; 80279cc <logf+0xc4>
 8027948:	ee20 0a27 	vmul.f32	s0, s0, s15
 802794c:	ee10 3a10 	vmov	r3, s0
 8027950:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8027954:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8027958:	491d      	ldr	r1, [pc, #116]	; (80279d0 <logf+0xc8>)
 802795a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 802795e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8027962:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8027966:	0dd4      	lsrs	r4, r2, #23
 8027968:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 802796c:	05e4      	lsls	r4, r4, #23
 802796e:	ed90 5b00 	vldr	d5, [r0]
 8027972:	1b1b      	subs	r3, r3, r4
 8027974:	ee07 3a90 	vmov	s15, r3
 8027978:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 802797c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8027980:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8027984:	ee26 3b06 	vmul.f64	d3, d6, d6
 8027988:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 802798c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8027990:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8027994:	15d2      	asrs	r2, r2, #23
 8027996:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 802799a:	eea5 7b03 	vfma.f64	d7, d5, d3
 802799e:	eeb0 5b47 	vmov.f64	d5, d7
 80279a2:	ed90 0b02 	vldr	d0, [r0, #8]
 80279a6:	ee07 2a90 	vmov	s15, r2
 80279aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80279ae:	eea7 0b04 	vfma.f64	d0, d7, d4
 80279b2:	ee30 0b06 	vadd.f64	d0, d0, d6
 80279b6:	eea3 0b05 	vfma.f64	d0, d3, d5
 80279ba:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80279be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80279c2:	4770      	bx	lr
 80279c4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80279d4 <logf+0xcc>
 80279c8:	e7f9      	b.n	80279be <logf+0xb6>
 80279ca:	bf00      	nop
 80279cc:	4b000000 	.word	0x4b000000
 80279d0:	0804c430 	.word	0x0804c430
 80279d4:	00000000 	.word	0x00000000

080279d8 <log2f>:
 80279d8:	ee10 2a10 	vmov	r2, s0
 80279dc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80279e0:	b410      	push	{r4}
 80279e2:	d057      	beq.n	8027a94 <log2f+0xbc>
 80279e4:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 80279e8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80279ec:	d31a      	bcc.n	8027a24 <log2f+0x4c>
 80279ee:	0053      	lsls	r3, r2, #1
 80279f0:	d104      	bne.n	80279fc <log2f+0x24>
 80279f2:	2001      	movs	r0, #1
 80279f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80279f8:	f002 b844 	b.w	8029a84 <__math_divzerof>
 80279fc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8027a00:	d045      	beq.n	8027a8e <log2f+0xb6>
 8027a02:	2a00      	cmp	r2, #0
 8027a04:	db02      	blt.n	8027a0c <log2f+0x34>
 8027a06:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8027a0a:	d303      	bcc.n	8027a14 <log2f+0x3c>
 8027a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027a10:	f002 b848 	b.w	8029aa4 <__math_invalidf>
 8027a14:	eddf 7a21 	vldr	s15, [pc, #132]	; 8027a9c <log2f+0xc4>
 8027a18:	ee20 0a27 	vmul.f32	s0, s0, s15
 8027a1c:	ee10 3a10 	vmov	r3, s0
 8027a20:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 8027a24:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 8027a28:	491d      	ldr	r1, [pc, #116]	; (8027aa0 <log2f+0xc8>)
 8027a2a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8027a2e:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8027a32:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 8027a36:	0ddc      	lsrs	r4, r3, #23
 8027a38:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8027a3c:	05e4      	lsls	r4, r4, #23
 8027a3e:	ed90 5b00 	vldr	d5, [r0]
 8027a42:	1b12      	subs	r2, r2, r4
 8027a44:	ee07 2a90 	vmov	s15, r2
 8027a48:	ed91 4b42 	vldr	d4, [r1, #264]	; 0x108
 8027a4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8027a50:	eea5 6b07 	vfma.f64	d6, d5, d7
 8027a54:	eeb0 7b46 	vmov.f64	d7, d6
 8027a58:	ee26 5b06 	vmul.f64	d5, d6, d6
 8027a5c:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8027a60:	eea4 6b07 	vfma.f64	d6, d4, d7
 8027a64:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 8027a68:	15db      	asrs	r3, r3, #23
 8027a6a:	eea4 6b05 	vfma.f64	d6, d4, d5
 8027a6e:	ed90 4b02 	vldr	d4, [r0, #8]
 8027a72:	ee00 3a10 	vmov	s0, r3
 8027a76:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8027a7a:	ee30 0b04 	vadd.f64	d0, d0, d4
 8027a7e:	ed91 4b46 	vldr	d4, [r1, #280]	; 0x118
 8027a82:	eea4 0b07 	vfma.f64	d0, d4, d7
 8027a86:	eea5 0b06 	vfma.f64	d0, d5, d6
 8027a8a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8027a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027a92:	4770      	bx	lr
 8027a94:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8027aa4 <log2f+0xcc>
 8027a98:	e7f9      	b.n	8027a8e <log2f+0xb6>
 8027a9a:	bf00      	nop
 8027a9c:	4b000000 	.word	0x4b000000
 8027aa0:	0804c310 	.word	0x0804c310
 8027aa4:	00000000 	.word	0x00000000

08027aa8 <checkint>:
 8027aa8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8027aac:	2b7e      	cmp	r3, #126	; 0x7e
 8027aae:	dd10      	ble.n	8027ad2 <checkint+0x2a>
 8027ab0:	2b96      	cmp	r3, #150	; 0x96
 8027ab2:	dc0c      	bgt.n	8027ace <checkint+0x26>
 8027ab4:	2201      	movs	r2, #1
 8027ab6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8027aba:	fa02 f303 	lsl.w	r3, r2, r3
 8027abe:	1e5a      	subs	r2, r3, #1
 8027ac0:	4202      	tst	r2, r0
 8027ac2:	d106      	bne.n	8027ad2 <checkint+0x2a>
 8027ac4:	4203      	tst	r3, r0
 8027ac6:	bf0c      	ite	eq
 8027ac8:	2002      	moveq	r0, #2
 8027aca:	2001      	movne	r0, #1
 8027acc:	4770      	bx	lr
 8027ace:	2002      	movs	r0, #2
 8027ad0:	4770      	bx	lr
 8027ad2:	2000      	movs	r0, #0
 8027ad4:	4770      	bx	lr
	...

08027ad8 <powf>:
 8027ad8:	ee10 1a10 	vmov	r1, s0
 8027adc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8027ae0:	ee10 4a90 	vmov	r4, s1
 8027ae4:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8027ae8:	0062      	lsls	r2, r4, #1
 8027aea:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8027aee:	eef0 4a60 	vmov.f32	s9, s1
 8027af2:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8027af6:	4b92      	ldr	r3, [pc, #584]	; (8027d40 <powf+0x268>)
 8027af8:	d255      	bcs.n	8027ba6 <powf+0xce>
 8027afa:	4298      	cmp	r0, r3
 8027afc:	d855      	bhi.n	8027baa <powf+0xd2>
 8027afe:	2000      	movs	r0, #0
 8027b00:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8027b04:	4a8f      	ldr	r2, [pc, #572]	; (8027d44 <powf+0x26c>)
 8027b06:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 8027b0a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8027b0e:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8027b12:	0ddb      	lsrs	r3, r3, #23
 8027b14:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8027b18:	05db      	lsls	r3, r3, #23
 8027b1a:	ed94 6b00 	vldr	d6, [r4]
 8027b1e:	1ac9      	subs	r1, r1, r3
 8027b20:	ee07 1a90 	vmov	s15, r1
 8027b24:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8027b28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8027b2c:	eea6 2b07 	vfma.f64	d2, d6, d7
 8027b30:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 8027b34:	ee22 6b02 	vmul.f64	d6, d2, d2
 8027b38:	eea2 7b05 	vfma.f64	d7, d2, d5
 8027b3c:	15db      	asrs	r3, r3, #23
 8027b3e:	ed94 5b02 	vldr	d5, [r4, #8]
 8027b42:	ee00 3a10 	vmov	s0, r3
 8027b46:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8027b4a:	ee30 0b05 	vadd.f64	d0, d0, d5
 8027b4e:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 8027b52:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 8027b56:	eea2 0b05 	vfma.f64	d0, d2, d5
 8027b5a:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8027b5e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8027b62:	eea6 0b05 	vfma.f64	d0, d6, d5
 8027b66:	ee26 6b06 	vmul.f64	d6, d6, d6
 8027b6a:	eea7 0b06 	vfma.f64	d0, d7, d6
 8027b6e:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 8027b72:	ee20 0b07 	vmul.f64	d0, d0, d7
 8027b76:	ee10 3a90 	vmov	r3, s1
 8027b7a:	2500      	movs	r5, #0
 8027b7c:	0bda      	lsrs	r2, r3, #15
 8027b7e:	2300      	movs	r3, #0
 8027b80:	b292      	uxth	r2, r2
 8027b82:	f248 04be 	movw	r4, #32958	; 0x80be
 8027b86:	429d      	cmp	r5, r3
 8027b88:	bf08      	it	eq
 8027b8a:	4294      	cmpeq	r4, r2
 8027b8c:	f080 8094 	bcs.w	8027cb8 <powf+0x1e0>
 8027b90:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8027d28 <powf+0x250>
 8027b94:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8027b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b9c:	dd76      	ble.n	8027c8c <powf+0x1b4>
 8027b9e:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8027ba2:	f001 bf69 	b.w	8029a78 <__math_oflowf>
 8027ba6:	4298      	cmp	r0, r3
 8027ba8:	d92d      	bls.n	8027c06 <powf+0x12e>
 8027baa:	b952      	cbnz	r2, 8027bc2 <powf+0xea>
 8027bac:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8027bb0:	005b      	lsls	r3, r3, #1
 8027bb2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8027bb6:	f240 80ae 	bls.w	8027d16 <powf+0x23e>
 8027bba:	ee30 0a24 	vadd.f32	s0, s0, s9
 8027bbe:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8027bc2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8027bc6:	d105      	bne.n	8027bd4 <powf+0xfc>
 8027bc8:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8027bcc:	0064      	lsls	r4, r4, #1
 8027bce:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8027bd2:	e7f0      	b.n	8027bb6 <powf+0xde>
 8027bd4:	004b      	lsls	r3, r1, #1
 8027bd6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8027bda:	d8ee      	bhi.n	8027bba <powf+0xe2>
 8027bdc:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8027be0:	d1eb      	bne.n	8027bba <powf+0xe2>
 8027be2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8027be6:	f000 8096 	beq.w	8027d16 <powf+0x23e>
 8027bea:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8027bee:	ea6f 0404 	mvn.w	r4, r4
 8027bf2:	bf34      	ite	cc
 8027bf4:	2300      	movcc	r3, #0
 8027bf6:	2301      	movcs	r3, #1
 8027bf8:	0fe4      	lsrs	r4, r4, #31
 8027bfa:	42a3      	cmp	r3, r4
 8027bfc:	f040 808e 	bne.w	8027d1c <powf+0x244>
 8027c00:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8027c04:	e7db      	b.n	8027bbe <powf+0xe6>
 8027c06:	004d      	lsls	r5, r1, #1
 8027c08:	1e6a      	subs	r2, r5, #1
 8027c0a:	429a      	cmp	r2, r3
 8027c0c:	d91b      	bls.n	8027c46 <powf+0x16e>
 8027c0e:	2900      	cmp	r1, #0
 8027c10:	ee20 0a00 	vmul.f32	s0, s0, s0
 8027c14:	da0e      	bge.n	8027c34 <powf+0x15c>
 8027c16:	ee10 0a90 	vmov	r0, s1
 8027c1a:	f7ff ff45 	bl	8027aa8 <checkint>
 8027c1e:	2801      	cmp	r0, #1
 8027c20:	d108      	bne.n	8027c34 <powf+0x15c>
 8027c22:	eeb1 0a40 	vneg.f32	s0, s0
 8027c26:	b93d      	cbnz	r5, 8027c38 <powf+0x160>
 8027c28:	2c00      	cmp	r4, #0
 8027c2a:	dac8      	bge.n	8027bbe <powf+0xe6>
 8027c2c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8027c30:	f001 bf28 	b.w	8029a84 <__math_divzerof>
 8027c34:	2000      	movs	r0, #0
 8027c36:	e7f6      	b.n	8027c26 <powf+0x14e>
 8027c38:	2c00      	cmp	r4, #0
 8027c3a:	dac0      	bge.n	8027bbe <powf+0xe6>
 8027c3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8027c40:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8027c44:	e7bb      	b.n	8027bbe <powf+0xe6>
 8027c46:	2900      	cmp	r1, #0
 8027c48:	da1e      	bge.n	8027c88 <powf+0x1b0>
 8027c4a:	ee10 0a90 	vmov	r0, s1
 8027c4e:	f7ff ff2b 	bl	8027aa8 <checkint>
 8027c52:	b918      	cbnz	r0, 8027c5c <powf+0x184>
 8027c54:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8027c58:	f001 bf24 	b.w	8029aa4 <__math_invalidf>
 8027c5c:	2801      	cmp	r0, #1
 8027c5e:	bf0c      	ite	eq
 8027c60:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8027c64:	2000      	movne	r0, #0
 8027c66:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8027c6a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8027c6e:	f4bf af47 	bcs.w	8027b00 <powf+0x28>
 8027c72:	eddf 0a35 	vldr	s1, [pc, #212]	; 8027d48 <powf+0x270>
 8027c76:	ee20 0a20 	vmul.f32	s0, s0, s1
 8027c7a:	ee10 3a10 	vmov	r3, s0
 8027c7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027c82:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8027c86:	e73b      	b.n	8027b00 <powf+0x28>
 8027c88:	2000      	movs	r0, #0
 8027c8a:	e7ee      	b.n	8027c6a <powf+0x192>
 8027c8c:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8027d30 <powf+0x258>
 8027c90:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8027c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c98:	d803      	bhi.n	8027ca2 <powf+0x1ca>
 8027c9a:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8027c9e:	f001 bedf 	b.w	8029a60 <__math_uflowf>
 8027ca2:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8027d38 <powf+0x260>
 8027ca6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8027caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cae:	d503      	bpl.n	8027cb8 <powf+0x1e0>
 8027cb0:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8027cb4:	f001 beda 	b.w	8029a6c <__math_may_uflowf>
 8027cb8:	4924      	ldr	r1, [pc, #144]	; (8027d4c <powf+0x274>)
 8027cba:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 8027cbe:	ee30 6b07 	vadd.f64	d6, d0, d7
 8027cc2:	ec55 4b16 	vmov	r4, r5, d6
 8027cc6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8027cca:	f004 021f 	and.w	r2, r4, #31
 8027cce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8027cd2:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 8027cd6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8027cda:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8027cde:	e9d2 6700 	ldrd	r6, r7, [r2]
 8027ce2:	eea0 7b06 	vfma.f64	d7, d0, d6
 8027ce6:	1824      	adds	r4, r4, r0
 8027ce8:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8027cec:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8027cf0:	2000      	movs	r0, #0
 8027cf2:	1982      	adds	r2, r0, r6
 8027cf4:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8027cf8:	eb41 0307 	adc.w	r3, r1, r7
 8027cfc:	eea0 6b05 	vfma.f64	d6, d0, d5
 8027d00:	ee20 0b00 	vmul.f64	d0, d0, d0
 8027d04:	eea6 7b00 	vfma.f64	d7, d6, d0
 8027d08:	ec43 2b16 	vmov	d6, r2, r3
 8027d0c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8027d10:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8027d14:	e753      	b.n	8027bbe <powf+0xe6>
 8027d16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027d1a:	e750      	b.n	8027bbe <powf+0xe6>
 8027d1c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8027d50 <powf+0x278>
 8027d20:	e74d      	b.n	8027bbe <powf+0xe6>
 8027d22:	bf00      	nop
 8027d24:	f3af 8000 	nop.w
 8027d28:	ffd1d571 	.word	0xffd1d571
 8027d2c:	405fffff 	.word	0x405fffff
 8027d30:	00000000 	.word	0x00000000
 8027d34:	c062c000 	.word	0xc062c000
 8027d38:	00000000 	.word	0x00000000
 8027d3c:	c062a000 	.word	0xc062a000
 8027d40:	fefffffe 	.word	0xfefffffe
 8027d44:	0804c550 	.word	0x0804c550
 8027d48:	4b000000 	.word	0x4b000000
 8027d4c:	0804c1c8 	.word	0x0804c1c8
 8027d50:	00000000 	.word	0x00000000

08027d54 <tanf>:
 8027d54:	ee10 3a10 	vmov	r3, s0
 8027d58:	b507      	push	{r0, r1, r2, lr}
 8027d5a:	4a10      	ldr	r2, [pc, #64]	; (8027d9c <tanf+0x48>)
 8027d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027d60:	4293      	cmp	r3, r2
 8027d62:	dc05      	bgt.n	8027d70 <tanf+0x1c>
 8027d64:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8027da0 <tanf+0x4c>
 8027d68:	2001      	movs	r0, #1
 8027d6a:	f001 fd7b 	bl	8029864 <__kernel_tanf>
 8027d6e:	e004      	b.n	8027d7a <tanf+0x26>
 8027d70:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8027d74:	db04      	blt.n	8027d80 <tanf+0x2c>
 8027d76:	ee30 0a40 	vsub.f32	s0, s0, s0
 8027d7a:	b003      	add	sp, #12
 8027d7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8027d80:	4668      	mov	r0, sp
 8027d82:	f001 f8ad 	bl	8028ee0 <__ieee754_rem_pio2f>
 8027d86:	0040      	lsls	r0, r0, #1
 8027d88:	f000 0002 	and.w	r0, r0, #2
 8027d8c:	f1c0 0001 	rsb	r0, r0, #1
 8027d90:	eddd 0a01 	vldr	s1, [sp, #4]
 8027d94:	ed9d 0a00 	vldr	s0, [sp]
 8027d98:	e7e7      	b.n	8027d6a <tanf+0x16>
 8027d9a:	bf00      	nop
 8027d9c:	3f490fda 	.word	0x3f490fda
 8027da0:	00000000 	.word	0x00000000

08027da4 <tanhf>:
 8027da4:	b510      	push	{r4, lr}
 8027da6:	ee10 4a10 	vmov	r4, s0
 8027daa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8027dae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8027db2:	ed2d 8b02 	vpush	{d8}
 8027db6:	eef0 7a40 	vmov.f32	s15, s0
 8027dba:	db0c      	blt.n	8027dd6 <tanhf+0x32>
 8027dbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027dc0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8027dc4:	2c00      	cmp	r4, #0
 8027dc6:	bfac      	ite	ge
 8027dc8:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8027dcc:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8027dd0:	ecbd 8b02 	vpop	{d8}
 8027dd4:	bd10      	pop	{r4, pc}
 8027dd6:	4a1b      	ldr	r2, [pc, #108]	; (8027e44 <tanhf+0xa0>)
 8027dd8:	4293      	cmp	r3, r2
 8027dda:	dc30      	bgt.n	8027e3e <tanhf+0x9a>
 8027ddc:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8027de0:	da06      	bge.n	8027df0 <tanhf+0x4c>
 8027de2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027de6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8027dea:	ee20 0a27 	vmul.f32	s0, s0, s15
 8027dee:	e7ef      	b.n	8027dd0 <tanhf+0x2c>
 8027df0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8027df4:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8027df8:	db12      	blt.n	8027e20 <tanhf+0x7c>
 8027dfa:	f7ff fd7d 	bl	80278f8 <fabsf>
 8027dfe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027e02:	f001 ff83 	bl	8029d0c <expm1f>
 8027e06:	ee30 0a08 	vadd.f32	s0, s0, s16
 8027e0a:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8027e0e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027e12:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027e16:	2c00      	cmp	r4, #0
 8027e18:	bfb8      	it	lt
 8027e1a:	eeb1 0a40 	vneglt.f32	s0, s0
 8027e1e:	e7d7      	b.n	8027dd0 <tanhf+0x2c>
 8027e20:	f7ff fd6a 	bl	80278f8 <fabsf>
 8027e24:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8027e28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8027e2c:	f001 ff6e 	bl	8029d0c <expm1f>
 8027e30:	ee70 7a08 	vadd.f32	s15, s0, s16
 8027e34:	eeb1 7a40 	vneg.f32	s14, s0
 8027e38:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8027e3c:	e7eb      	b.n	8027e16 <tanhf+0x72>
 8027e3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027e42:	e7e8      	b.n	8027e16 <tanhf+0x72>
 8027e44:	41afffff 	.word	0x41afffff

08027e48 <exp>:
 8027e48:	b510      	push	{r4, lr}
 8027e4a:	ed2d 8b04 	vpush	{d8-d9}
 8027e4e:	eeb0 8b40 	vmov.f64	d8, d0
 8027e52:	4c33      	ldr	r4, [pc, #204]	; (8027f20 <exp+0xd8>)
 8027e54:	b08a      	sub	sp, #40	; 0x28
 8027e56:	f000 fad3 	bl	8028400 <__ieee754_exp>
 8027e5a:	f994 3000 	ldrsb.w	r3, [r4]
 8027e5e:	eeb0 9b40 	vmov.f64	d9, d0
 8027e62:	3301      	adds	r3, #1
 8027e64:	d029      	beq.n	8027eba <exp+0x72>
 8027e66:	eeb0 0b48 	vmov.f64	d0, d8
 8027e6a:	f001 fe33 	bl	8029ad4 <finite>
 8027e6e:	b320      	cbz	r0, 8027eba <exp+0x72>
 8027e70:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8027f10 <exp+0xc8>
 8027e74:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8027e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e7c:	dd2e      	ble.n	8027edc <exp+0x94>
 8027e7e:	2303      	movs	r3, #3
 8027e80:	9300      	str	r3, [sp, #0]
 8027e82:	4b28      	ldr	r3, [pc, #160]	; (8027f24 <exp+0xdc>)
 8027e84:	9301      	str	r3, [sp, #4]
 8027e86:	2300      	movs	r3, #0
 8027e88:	9308      	str	r3, [sp, #32]
 8027e8a:	f994 3000 	ldrsb.w	r3, [r4]
 8027e8e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8027e92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8027e96:	b9b3      	cbnz	r3, 8027ec6 <exp+0x7e>
 8027e98:	4b23      	ldr	r3, [pc, #140]	; (8027f28 <exp+0xe0>)
 8027e9a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8027e9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027ea2:	4668      	mov	r0, sp
 8027ea4:	f001 fe1e 	bl	8029ae4 <matherr>
 8027ea8:	b198      	cbz	r0, 8027ed2 <exp+0x8a>
 8027eaa:	9b08      	ldr	r3, [sp, #32]
 8027eac:	b11b      	cbz	r3, 8027eb6 <exp+0x6e>
 8027eae:	f7ff faf5 	bl	802749c <__errno>
 8027eb2:	9b08      	ldr	r3, [sp, #32]
 8027eb4:	6003      	str	r3, [r0, #0]
 8027eb6:	ed9d 9b06 	vldr	d9, [sp, #24]
 8027eba:	eeb0 0b49 	vmov.f64	d0, d9
 8027ebe:	b00a      	add	sp, #40	; 0x28
 8027ec0:	ecbd 8b04 	vpop	{d8-d9}
 8027ec4:	bd10      	pop	{r4, pc}
 8027ec6:	4919      	ldr	r1, [pc, #100]	; (8027f2c <exp+0xe4>)
 8027ec8:	2000      	movs	r0, #0
 8027eca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8027ece:	2b02      	cmp	r3, #2
 8027ed0:	d1e7      	bne.n	8027ea2 <exp+0x5a>
 8027ed2:	f7ff fae3 	bl	802749c <__errno>
 8027ed6:	2322      	movs	r3, #34	; 0x22
 8027ed8:	6003      	str	r3, [r0, #0]
 8027eda:	e7e6      	b.n	8027eaa <exp+0x62>
 8027edc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8027f18 <exp+0xd0>
 8027ee0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8027ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ee8:	d5e7      	bpl.n	8027eba <exp+0x72>
 8027eea:	2304      	movs	r3, #4
 8027eec:	9300      	str	r3, [sp, #0]
 8027eee:	4b0d      	ldr	r3, [pc, #52]	; (8027f24 <exp+0xdc>)
 8027ef0:	9301      	str	r3, [sp, #4]
 8027ef2:	2300      	movs	r3, #0
 8027ef4:	9308      	str	r3, [sp, #32]
 8027ef6:	2200      	movs	r2, #0
 8027ef8:	2300      	movs	r3, #0
 8027efa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027efe:	ed8d 8b04 	vstr	d8, [sp, #16]
 8027f02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8027f06:	f994 3000 	ldrsb.w	r3, [r4]
 8027f0a:	e7e0      	b.n	8027ece <exp+0x86>
 8027f0c:	f3af 8000 	nop.w
 8027f10:	fefa39ef 	.word	0xfefa39ef
 8027f14:	40862e42 	.word	0x40862e42
 8027f18:	d52d3051 	.word	0xd52d3051
 8027f1c:	c0874910 	.word	0xc0874910
 8027f20:	20000498 	.word	0x20000498
 8027f24:	0804c678 	.word	0x0804c678
 8027f28:	47efffff 	.word	0x47efffff
 8027f2c:	7ff00000 	.word	0x7ff00000

08027f30 <pow>:
 8027f30:	b570      	push	{r4, r5, r6, lr}
 8027f32:	ed2d 8b0a 	vpush	{d8-d12}
 8027f36:	eeb0 9b40 	vmov.f64	d9, d0
 8027f3a:	eeb0 8b41 	vmov.f64	d8, d1
 8027f3e:	4c8c      	ldr	r4, [pc, #560]	; (8028170 <pow+0x240>)
 8027f40:	b08a      	sub	sp, #40	; 0x28
 8027f42:	f000 fb65 	bl	8028610 <__ieee754_pow>
 8027f46:	f994 3000 	ldrsb.w	r3, [r4]
 8027f4a:	eeb0 ab40 	vmov.f64	d10, d0
 8027f4e:	1c5a      	adds	r2, r3, #1
 8027f50:	4626      	mov	r6, r4
 8027f52:	d04b      	beq.n	8027fec <pow+0xbc>
 8027f54:	eeb4 8b48 	vcmp.f64	d8, d8
 8027f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f5c:	d646      	bvs.n	8027fec <pow+0xbc>
 8027f5e:	eeb4 9b49 	vcmp.f64	d9, d9
 8027f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f66:	d719      	bvc.n	8027f9c <pow+0x6c>
 8027f68:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8027f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f70:	d13c      	bne.n	8027fec <pow+0xbc>
 8027f72:	2201      	movs	r2, #1
 8027f74:	9200      	str	r2, [sp, #0]
 8027f76:	497f      	ldr	r1, [pc, #508]	; (8028174 <pow+0x244>)
 8027f78:	4a7f      	ldr	r2, [pc, #508]	; (8028178 <pow+0x248>)
 8027f7a:	9201      	str	r2, [sp, #4]
 8027f7c:	2000      	movs	r0, #0
 8027f7e:	2200      	movs	r2, #0
 8027f80:	2b02      	cmp	r3, #2
 8027f82:	9208      	str	r2, [sp, #32]
 8027f84:	ed8d 9b02 	vstr	d9, [sp, #8]
 8027f88:	ed8d 8b04 	vstr	d8, [sp, #16]
 8027f8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8027f90:	d02a      	beq.n	8027fe8 <pow+0xb8>
 8027f92:	4668      	mov	r0, sp
 8027f94:	f001 fda6 	bl	8029ae4 <matherr>
 8027f98:	bb00      	cbnz	r0, 8027fdc <pow+0xac>
 8027f9a:	e04e      	b.n	802803a <pow+0x10a>
 8027f9c:	ed9f bb72 	vldr	d11, [pc, #456]	; 8028168 <pow+0x238>
 8027fa0:	eeb4 9b4b 	vcmp.f64	d9, d11
 8027fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027fa8:	eeb0 cb4b 	vmov.f64	d12, d11
 8027fac:	d14a      	bne.n	8028044 <pow+0x114>
 8027fae:	eeb4 8b4b 	vcmp.f64	d8, d11
 8027fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027fb6:	d11f      	bne.n	8027ff8 <pow+0xc8>
 8027fb8:	2201      	movs	r2, #1
 8027fba:	9200      	str	r2, [sp, #0]
 8027fbc:	4a6e      	ldr	r2, [pc, #440]	; (8028178 <pow+0x248>)
 8027fbe:	9201      	str	r2, [sp, #4]
 8027fc0:	2200      	movs	r2, #0
 8027fc2:	9208      	str	r2, [sp, #32]
 8027fc4:	ed8d 9b02 	vstr	d9, [sp, #8]
 8027fc8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8027fcc:	ed8d bb06 	vstr	d11, [sp, #24]
 8027fd0:	2b00      	cmp	r3, #0
 8027fd2:	d0de      	beq.n	8027f92 <pow+0x62>
 8027fd4:	4b67      	ldr	r3, [pc, #412]	; (8028174 <pow+0x244>)
 8027fd6:	2200      	movs	r2, #0
 8027fd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027fdc:	9b08      	ldr	r3, [sp, #32]
 8027fde:	b11b      	cbz	r3, 8027fe8 <pow+0xb8>
 8027fe0:	f7ff fa5c 	bl	802749c <__errno>
 8027fe4:	9b08      	ldr	r3, [sp, #32]
 8027fe6:	6003      	str	r3, [r0, #0]
 8027fe8:	ed9d ab06 	vldr	d10, [sp, #24]
 8027fec:	eeb0 0b4a 	vmov.f64	d0, d10
 8027ff0:	b00a      	add	sp, #40	; 0x28
 8027ff2:	ecbd 8b0a 	vpop	{d8-d12}
 8027ff6:	bd70      	pop	{r4, r5, r6, pc}
 8027ff8:	eeb0 0b48 	vmov.f64	d0, d8
 8027ffc:	f001 fd6a 	bl	8029ad4 <finite>
 8028000:	2800      	cmp	r0, #0
 8028002:	d0f3      	beq.n	8027fec <pow+0xbc>
 8028004:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8028008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802800c:	d5ee      	bpl.n	8027fec <pow+0xbc>
 802800e:	2301      	movs	r3, #1
 8028010:	9300      	str	r3, [sp, #0]
 8028012:	4b59      	ldr	r3, [pc, #356]	; (8028178 <pow+0x248>)
 8028014:	9301      	str	r3, [sp, #4]
 8028016:	2300      	movs	r3, #0
 8028018:	9308      	str	r3, [sp, #32]
 802801a:	f994 3000 	ldrsb.w	r3, [r4]
 802801e:	ed8d 9b02 	vstr	d9, [sp, #8]
 8028022:	ed8d 8b04 	vstr	d8, [sp, #16]
 8028026:	b913      	cbnz	r3, 802802e <pow+0xfe>
 8028028:	ed8d bb06 	vstr	d11, [sp, #24]
 802802c:	e7b1      	b.n	8027f92 <pow+0x62>
 802802e:	4953      	ldr	r1, [pc, #332]	; (802817c <pow+0x24c>)
 8028030:	2000      	movs	r0, #0
 8028032:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8028036:	2b02      	cmp	r3, #2
 8028038:	d1ab      	bne.n	8027f92 <pow+0x62>
 802803a:	f7ff fa2f 	bl	802749c <__errno>
 802803e:	2321      	movs	r3, #33	; 0x21
 8028040:	6003      	str	r3, [r0, #0]
 8028042:	e7cb      	b.n	8027fdc <pow+0xac>
 8028044:	f001 fd46 	bl	8029ad4 <finite>
 8028048:	4605      	mov	r5, r0
 802804a:	2800      	cmp	r0, #0
 802804c:	d164      	bne.n	8028118 <pow+0x1e8>
 802804e:	eeb0 0b49 	vmov.f64	d0, d9
 8028052:	f001 fd3f 	bl	8029ad4 <finite>
 8028056:	2800      	cmp	r0, #0
 8028058:	d05e      	beq.n	8028118 <pow+0x1e8>
 802805a:	eeb0 0b48 	vmov.f64	d0, d8
 802805e:	f001 fd39 	bl	8029ad4 <finite>
 8028062:	2800      	cmp	r0, #0
 8028064:	d058      	beq.n	8028118 <pow+0x1e8>
 8028066:	eeb4 ab4a 	vcmp.f64	d10, d10
 802806a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802806e:	f994 3000 	ldrsb.w	r3, [r4]
 8028072:	4a41      	ldr	r2, [pc, #260]	; (8028178 <pow+0x248>)
 8028074:	d70e      	bvc.n	8028094 <pow+0x164>
 8028076:	2101      	movs	r1, #1
 8028078:	e9cd 1200 	strd	r1, r2, [sp]
 802807c:	9508      	str	r5, [sp, #32]
 802807e:	ed8d 9b02 	vstr	d9, [sp, #8]
 8028082:	ed8d 8b04 	vstr	d8, [sp, #16]
 8028086:	2b00      	cmp	r3, #0
 8028088:	d0ce      	beq.n	8028028 <pow+0xf8>
 802808a:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 802808e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8028092:	e7d0      	b.n	8028036 <pow+0x106>
 8028094:	2103      	movs	r1, #3
 8028096:	ed8d 8b04 	vstr	d8, [sp, #16]
 802809a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802809e:	ee28 8b07 	vmul.f64	d8, d8, d7
 80280a2:	e9cd 1200 	strd	r1, r2, [sp]
 80280a6:	9508      	str	r5, [sp, #32]
 80280a8:	ed8d 9b02 	vstr	d9, [sp, #8]
 80280ac:	b9fb      	cbnz	r3, 80280ee <pow+0x1be>
 80280ae:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 80280b2:	4b33      	ldr	r3, [pc, #204]	; (8028180 <pow+0x250>)
 80280b4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80280b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80280bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80280c0:	d54b      	bpl.n	802815a <pow+0x22a>
 80280c2:	eeb0 0b48 	vmov.f64	d0, d8
 80280c6:	f001 fd17 	bl	8029af8 <rint>
 80280ca:	eeb4 0b48 	vcmp.f64	d0, d8
 80280ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80280d2:	d004      	beq.n	80280de <pow+0x1ae>
 80280d4:	4b2b      	ldr	r3, [pc, #172]	; (8028184 <pow+0x254>)
 80280d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80280da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80280de:	f996 3000 	ldrsb.w	r3, [r6]
 80280e2:	2b02      	cmp	r3, #2
 80280e4:	d139      	bne.n	802815a <pow+0x22a>
 80280e6:	f7ff f9d9 	bl	802749c <__errno>
 80280ea:	2322      	movs	r3, #34	; 0x22
 80280ec:	e7a8      	b.n	8028040 <pow+0x110>
 80280ee:	4b26      	ldr	r3, [pc, #152]	; (8028188 <pow+0x258>)
 80280f0:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 80280f4:	2200      	movs	r2, #0
 80280f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80280fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80280fe:	d5ee      	bpl.n	80280de <pow+0x1ae>
 8028100:	eeb0 0b48 	vmov.f64	d0, d8
 8028104:	f001 fcf8 	bl	8029af8 <rint>
 8028108:	eeb4 0b48 	vcmp.f64	d0, d8
 802810c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028110:	d0e5      	beq.n	80280de <pow+0x1ae>
 8028112:	2200      	movs	r2, #0
 8028114:	4b19      	ldr	r3, [pc, #100]	; (802817c <pow+0x24c>)
 8028116:	e7e0      	b.n	80280da <pow+0x1aa>
 8028118:	eeb5 ab40 	vcmp.f64	d10, #0.0
 802811c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028120:	f47f af64 	bne.w	8027fec <pow+0xbc>
 8028124:	eeb0 0b49 	vmov.f64	d0, d9
 8028128:	f001 fcd4 	bl	8029ad4 <finite>
 802812c:	2800      	cmp	r0, #0
 802812e:	f43f af5d 	beq.w	8027fec <pow+0xbc>
 8028132:	eeb0 0b48 	vmov.f64	d0, d8
 8028136:	f001 fccd 	bl	8029ad4 <finite>
 802813a:	2800      	cmp	r0, #0
 802813c:	f43f af56 	beq.w	8027fec <pow+0xbc>
 8028140:	2304      	movs	r3, #4
 8028142:	9300      	str	r3, [sp, #0]
 8028144:	4b0c      	ldr	r3, [pc, #48]	; (8028178 <pow+0x248>)
 8028146:	9301      	str	r3, [sp, #4]
 8028148:	2300      	movs	r3, #0
 802814a:	9308      	str	r3, [sp, #32]
 802814c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8028150:	ed8d 8b04 	vstr	d8, [sp, #16]
 8028154:	ed8d cb06 	vstr	d12, [sp, #24]
 8028158:	e7c1      	b.n	80280de <pow+0x1ae>
 802815a:	4668      	mov	r0, sp
 802815c:	f001 fcc2 	bl	8029ae4 <matherr>
 8028160:	2800      	cmp	r0, #0
 8028162:	f47f af3b 	bne.w	8027fdc <pow+0xac>
 8028166:	e7be      	b.n	80280e6 <pow+0x1b6>
	...
 8028170:	20000498 	.word	0x20000498
 8028174:	3ff00000 	.word	0x3ff00000
 8028178:	0804c67c 	.word	0x0804c67c
 802817c:	fff00000 	.word	0xfff00000
 8028180:	47efffff 	.word	0x47efffff
 8028184:	c7efffff 	.word	0xc7efffff
 8028188:	7ff00000 	.word	0x7ff00000
 802818c:	00000000 	.word	0x00000000

08028190 <fmodf>:
 8028190:	b500      	push	{lr}
 8028192:	ed2d 8b02 	vpush	{d8}
 8028196:	b08b      	sub	sp, #44	; 0x2c
 8028198:	eeb0 8a40 	vmov.f32	s16, s0
 802819c:	eef0 8a60 	vmov.f32	s17, s1
 80281a0:	f000 fdc0 	bl	8028d24 <__ieee754_fmodf>
 80281a4:	4b24      	ldr	r3, [pc, #144]	; (8028238 <fmodf+0xa8>)
 80281a6:	f993 3000 	ldrsb.w	r3, [r3]
 80281aa:	1c5a      	adds	r2, r3, #1
 80281ac:	d02d      	beq.n	802820a <fmodf+0x7a>
 80281ae:	eef4 8a68 	vcmp.f32	s17, s17
 80281b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80281b6:	d628      	bvs.n	802820a <fmodf+0x7a>
 80281b8:	eeb4 8a48 	vcmp.f32	s16, s16
 80281bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80281c0:	d623      	bvs.n	802820a <fmodf+0x7a>
 80281c2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80281c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80281ca:	d11e      	bne.n	802820a <fmodf+0x7a>
 80281cc:	2201      	movs	r2, #1
 80281ce:	9200      	str	r2, [sp, #0]
 80281d0:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
 80281d4:	4a19      	ldr	r2, [pc, #100]	; (802823c <fmodf+0xac>)
 80281d6:	9201      	str	r2, [sp, #4]
 80281d8:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 80281dc:	2200      	movs	r2, #0
 80281de:	9208      	str	r2, [sp, #32]
 80281e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80281e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80281e8:	b9a3      	cbnz	r3, 8028214 <fmodf+0x84>
 80281ea:	ed8d 0b06 	vstr	d0, [sp, #24]
 80281ee:	4668      	mov	r0, sp
 80281f0:	f001 fc78 	bl	8029ae4 <matherr>
 80281f4:	b1b0      	cbz	r0, 8028224 <fmodf+0x94>
 80281f6:	9b08      	ldr	r3, [sp, #32]
 80281f8:	b11b      	cbz	r3, 8028202 <fmodf+0x72>
 80281fa:	f7ff f94f 	bl	802749c <__errno>
 80281fe:	9b08      	ldr	r3, [sp, #32]
 8028200:	6003      	str	r3, [r0, #0]
 8028202:	ed9d 0b06 	vldr	d0, [sp, #24]
 8028206:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802820a:	b00b      	add	sp, #44	; 0x2c
 802820c:	ecbd 8b02 	vpop	{d8}
 8028210:	f85d fb04 	ldr.w	pc, [sp], #4
 8028214:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8028230 <fmodf+0xa0>
 8028218:	2b02      	cmp	r3, #2
 802821a:	ee87 6b07 	vdiv.f64	d6, d7, d7
 802821e:	ed8d 6b06 	vstr	d6, [sp, #24]
 8028222:	d1e4      	bne.n	80281ee <fmodf+0x5e>
 8028224:	f7ff f93a 	bl	802749c <__errno>
 8028228:	2321      	movs	r3, #33	; 0x21
 802822a:	6003      	str	r3, [r0, #0]
 802822c:	e7e3      	b.n	80281f6 <fmodf+0x66>
 802822e:	bf00      	nop
	...
 8028238:	20000498 	.word	0x20000498
 802823c:	0804c680 	.word	0x0804c680

08028240 <log10f>:
 8028240:	b500      	push	{lr}
 8028242:	ed2d 8b02 	vpush	{d8}
 8028246:	b08b      	sub	sp, #44	; 0x2c
 8028248:	eeb0 8a40 	vmov.f32	s16, s0
 802824c:	f000 fdf2 	bl	8028e34 <__ieee754_log10f>
 8028250:	4b2f      	ldr	r3, [pc, #188]	; (8028310 <log10f+0xd0>)
 8028252:	f993 3000 	ldrsb.w	r3, [r3]
 8028256:	1c5a      	adds	r2, r3, #1
 8028258:	d055      	beq.n	8028306 <log10f+0xc6>
 802825a:	eeb4 8a48 	vcmp.f32	s16, s16
 802825e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028262:	d650      	bvs.n	8028306 <log10f+0xc6>
 8028264:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8028268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802826c:	d84b      	bhi.n	8028306 <log10f+0xc6>
 802826e:	4a29      	ldr	r2, [pc, #164]	; (8028314 <log10f+0xd4>)
 8028270:	9201      	str	r2, [sp, #4]
 8028272:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 8028276:	2200      	movs	r2, #0
 8028278:	9208      	str	r2, [sp, #32]
 802827a:	ed8d 7b04 	vstr	d7, [sp, #16]
 802827e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028282:	b993      	cbnz	r3, 80282aa <log10f+0x6a>
 8028284:	4924      	ldr	r1, [pc, #144]	; (8028318 <log10f+0xd8>)
 8028286:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802828a:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 802828e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028292:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8028296:	d025      	beq.n	80282e4 <log10f+0xa4>
 8028298:	2201      	movs	r2, #1
 802829a:	2b02      	cmp	r3, #2
 802829c:	9200      	str	r2, [sp, #0]
 802829e:	d116      	bne.n	80282ce <log10f+0x8e>
 80282a0:	f7ff f8fc 	bl	802749c <__errno>
 80282a4:	2321      	movs	r3, #33	; 0x21
 80282a6:	6003      	str	r3, [r0, #0]
 80282a8:	e016      	b.n	80282d8 <log10f+0x98>
 80282aa:	491c      	ldr	r1, [pc, #112]	; (802831c <log10f+0xdc>)
 80282ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80282b0:	2000      	movs	r0, #0
 80282b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80282b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80282ba:	d1ed      	bne.n	8028298 <log10f+0x58>
 80282bc:	2202      	movs	r2, #2
 80282be:	4293      	cmp	r3, r2
 80282c0:	9200      	str	r2, [sp, #0]
 80282c2:	d111      	bne.n	80282e8 <log10f+0xa8>
 80282c4:	f7ff f8ea 	bl	802749c <__errno>
 80282c8:	2322      	movs	r3, #34	; 0x22
 80282ca:	6003      	str	r3, [r0, #0]
 80282cc:	e011      	b.n	80282f2 <log10f+0xb2>
 80282ce:	4668      	mov	r0, sp
 80282d0:	f001 fc08 	bl	8029ae4 <matherr>
 80282d4:	2800      	cmp	r0, #0
 80282d6:	d0e3      	beq.n	80282a0 <log10f+0x60>
 80282d8:	4811      	ldr	r0, [pc, #68]	; (8028320 <log10f+0xe0>)
 80282da:	f001 fc05 	bl	8029ae8 <nan>
 80282de:	ed8d 0b06 	vstr	d0, [sp, #24]
 80282e2:	e006      	b.n	80282f2 <log10f+0xb2>
 80282e4:	2302      	movs	r3, #2
 80282e6:	9300      	str	r3, [sp, #0]
 80282e8:	4668      	mov	r0, sp
 80282ea:	f001 fbfb 	bl	8029ae4 <matherr>
 80282ee:	2800      	cmp	r0, #0
 80282f0:	d0e8      	beq.n	80282c4 <log10f+0x84>
 80282f2:	9b08      	ldr	r3, [sp, #32]
 80282f4:	b11b      	cbz	r3, 80282fe <log10f+0xbe>
 80282f6:	f7ff f8d1 	bl	802749c <__errno>
 80282fa:	9b08      	ldr	r3, [sp, #32]
 80282fc:	6003      	str	r3, [r0, #0]
 80282fe:	ed9d 0b06 	vldr	d0, [sp, #24]
 8028302:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8028306:	b00b      	add	sp, #44	; 0x2c
 8028308:	ecbd 8b02 	vpop	{d8}
 802830c:	f85d fb04 	ldr.w	pc, [sp], #4
 8028310:	20000498 	.word	0x20000498
 8028314:	0804c686 	.word	0x0804c686
 8028318:	c7efffff 	.word	0xc7efffff
 802831c:	fff00000 	.word	0xfff00000
 8028320:	0804c68c 	.word	0x0804c68c
 8028324:	00000000 	.word	0x00000000

08028328 <sinhf>:
 8028328:	b530      	push	{r4, r5, lr}
 802832a:	ed2d 8b02 	vpush	{d8}
 802832e:	4c32      	ldr	r4, [pc, #200]	; (80283f8 <sinhf+0xd0>)
 8028330:	b08b      	sub	sp, #44	; 0x2c
 8028332:	eef0 8a40 	vmov.f32	s17, s0
 8028336:	f000 feff 	bl	8029138 <__ieee754_sinhf>
 802833a:	f994 3000 	ldrsb.w	r3, [r4]
 802833e:	3301      	adds	r3, #1
 8028340:	eeb0 8a40 	vmov.f32	s16, s0
 8028344:	d030      	beq.n	80283a8 <sinhf+0x80>
 8028346:	f001 fe0b 	bl	8029f60 <finitef>
 802834a:	4605      	mov	r5, r0
 802834c:	bb60      	cbnz	r0, 80283a8 <sinhf+0x80>
 802834e:	eeb0 0a68 	vmov.f32	s0, s17
 8028352:	f001 fe05 	bl	8029f60 <finitef>
 8028356:	b338      	cbz	r0, 80283a8 <sinhf+0x80>
 8028358:	2303      	movs	r3, #3
 802835a:	9300      	str	r3, [sp, #0]
 802835c:	4b27      	ldr	r3, [pc, #156]	; (80283fc <sinhf+0xd4>)
 802835e:	9301      	str	r3, [sp, #4]
 8028360:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 8028364:	f994 3000 	ldrsb.w	r3, [r4]
 8028368:	9508      	str	r5, [sp, #32]
 802836a:	ed8d 7b04 	vstr	d7, [sp, #16]
 802836e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028372:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8028376:	b9eb      	cbnz	r3, 80283b4 <sinhf+0x8c>
 8028378:	ed9f 7b17 	vldr	d7, [pc, #92]	; 80283d8 <sinhf+0xb0>
 802837c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80283e0 <sinhf+0xb8>
 8028380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028384:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8028388:	ed8d 7b06 	vstr	d7, [sp, #24]
 802838c:	4668      	mov	r0, sp
 802838e:	f001 fba9 	bl	8029ae4 <matherr>
 8028392:	b1d8      	cbz	r0, 80283cc <sinhf+0xa4>
 8028394:	9b08      	ldr	r3, [sp, #32]
 8028396:	b11b      	cbz	r3, 80283a0 <sinhf+0x78>
 8028398:	f7ff f880 	bl	802749c <__errno>
 802839c:	9b08      	ldr	r3, [sp, #32]
 802839e:	6003      	str	r3, [r0, #0]
 80283a0:	ed9d 8b06 	vldr	d8, [sp, #24]
 80283a4:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 80283a8:	eeb0 0a48 	vmov.f32	s0, s16
 80283ac:	b00b      	add	sp, #44	; 0x2c
 80283ae:	ecbd 8b02 	vpop	{d8}
 80283b2:	bd30      	pop	{r4, r5, pc}
 80283b4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80283e8 <sinhf+0xc0>
 80283b8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80283f0 <sinhf+0xc8>
 80283bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80283c0:	fe37 7b06 	vselgt.f64	d7, d7, d6
 80283c4:	2b02      	cmp	r3, #2
 80283c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80283ca:	d1df      	bne.n	802838c <sinhf+0x64>
 80283cc:	f7ff f866 	bl	802749c <__errno>
 80283d0:	2322      	movs	r3, #34	; 0x22
 80283d2:	6003      	str	r3, [r0, #0]
 80283d4:	e7de      	b.n	8028394 <sinhf+0x6c>
 80283d6:	bf00      	nop
 80283d8:	e0000000 	.word	0xe0000000
 80283dc:	47efffff 	.word	0x47efffff
 80283e0:	e0000000 	.word	0xe0000000
 80283e4:	c7efffff 	.word	0xc7efffff
 80283e8:	00000000 	.word	0x00000000
 80283ec:	7ff00000 	.word	0x7ff00000
 80283f0:	00000000 	.word	0x00000000
 80283f4:	fff00000 	.word	0xfff00000
 80283f8:	20000498 	.word	0x20000498
 80283fc:	0804c68d 	.word	0x0804c68d

08028400 <__ieee754_exp>:
 8028400:	ee10 1a90 	vmov	r1, s1
 8028404:	4b7a      	ldr	r3, [pc, #488]	; (80285f0 <__ieee754_exp+0x1f0>)
 8028406:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802840a:	429a      	cmp	r2, r3
 802840c:	b082      	sub	sp, #8
 802840e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8028412:	d928      	bls.n	8028466 <__ieee754_exp+0x66>
 8028414:	4b77      	ldr	r3, [pc, #476]	; (80285f4 <__ieee754_exp+0x1f4>)
 8028416:	429a      	cmp	r2, r3
 8028418:	d90f      	bls.n	802843a <__ieee754_exp+0x3a>
 802841a:	ee10 3a10 	vmov	r3, s0
 802841e:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8028422:	430b      	orrs	r3, r1
 8028424:	d003      	beq.n	802842e <__ieee754_exp+0x2e>
 8028426:	ee30 0b00 	vadd.f64	d0, d0, d0
 802842a:	b002      	add	sp, #8
 802842c:	4770      	bx	lr
 802842e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8028588 <__ieee754_exp+0x188>
 8028432:	2800      	cmp	r0, #0
 8028434:	fe00 0b07 	vseleq.f64	d0, d0, d7
 8028438:	e7f7      	b.n	802842a <__ieee754_exp+0x2a>
 802843a:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8028590 <__ieee754_exp+0x190>
 802843e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8028442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028446:	dd04      	ble.n	8028452 <__ieee754_exp+0x52>
 8028448:	ed9f 0b53 	vldr	d0, [pc, #332]	; 8028598 <__ieee754_exp+0x198>
 802844c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8028450:	e7eb      	b.n	802842a <__ieee754_exp+0x2a>
 8028452:	ed9f 7b53 	vldr	d7, [pc, #332]	; 80285a0 <__ieee754_exp+0x1a0>
 8028456:	eeb4 0bc7 	vcmpe.f64	d0, d7
 802845a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802845e:	d505      	bpl.n	802846c <__ieee754_exp+0x6c>
 8028460:	ed9f 0b49 	vldr	d0, [pc, #292]	; 8028588 <__ieee754_exp+0x188>
 8028464:	e7e1      	b.n	802842a <__ieee754_exp+0x2a>
 8028466:	4b64      	ldr	r3, [pc, #400]	; (80285f8 <__ieee754_exp+0x1f8>)
 8028468:	429a      	cmp	r2, r3
 802846a:	d956      	bls.n	802851a <__ieee754_exp+0x11a>
 802846c:	4b63      	ldr	r3, [pc, #396]	; (80285fc <__ieee754_exp+0x1fc>)
 802846e:	429a      	cmp	r2, r3
 8028470:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8028474:	d838      	bhi.n	80284e8 <__ieee754_exp+0xe8>
 8028476:	4b62      	ldr	r3, [pc, #392]	; (8028600 <__ieee754_exp+0x200>)
 8028478:	4413      	add	r3, r2
 802847a:	ed93 6b00 	vldr	d6, [r3]
 802847e:	4b61      	ldr	r3, [pc, #388]	; (8028604 <__ieee754_exp+0x204>)
 8028480:	ee30 6b46 	vsub.f64	d6, d0, d6
 8028484:	4413      	add	r3, r2
 8028486:	ed93 7b00 	vldr	d7, [r3]
 802848a:	f1c0 0301 	rsb	r3, r0, #1
 802848e:	1a1b      	subs	r3, r3, r0
 8028490:	ee36 0b47 	vsub.f64	d0, d6, d7
 8028494:	ed9f 4b44 	vldr	d4, [pc, #272]	; 80285a8 <__ieee754_exp+0x1a8>
 8028498:	ee20 5b00 	vmul.f64	d5, d0, d0
 802849c:	ed9f 3b44 	vldr	d3, [pc, #272]	; 80285b0 <__ieee754_exp+0x1b0>
 80284a0:	eea5 3b04 	vfma.f64	d3, d5, d4
 80284a4:	ed9f 4b44 	vldr	d4, [pc, #272]	; 80285b8 <__ieee754_exp+0x1b8>
 80284a8:	eea3 4b05 	vfma.f64	d4, d3, d5
 80284ac:	ed9f 3b44 	vldr	d3, [pc, #272]	; 80285c0 <__ieee754_exp+0x1c0>
 80284b0:	eea4 3b05 	vfma.f64	d3, d4, d5
 80284b4:	ed9f 4b44 	vldr	d4, [pc, #272]	; 80285c8 <__ieee754_exp+0x1c8>
 80284b8:	eea3 4b05 	vfma.f64	d4, d3, d5
 80284bc:	eeb0 3b40 	vmov.f64	d3, d0
 80284c0:	eea4 3b45 	vfms.f64	d3, d4, d5
 80284c4:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80284c8:	eeb0 5b43 	vmov.f64	d5, d3
 80284cc:	ee20 2b03 	vmul.f64	d2, d0, d3
 80284d0:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 80284d4:	bba3      	cbnz	r3, 8028540 <__ieee754_exp+0x140>
 80284d6:	ee35 5b44 	vsub.f64	d5, d5, d4
 80284da:	ee82 7b05 	vdiv.f64	d7, d2, d5
 80284de:	ee37 0b40 	vsub.f64	d0, d7, d0
 80284e2:	ee33 0b40 	vsub.f64	d0, d3, d0
 80284e6:	e7a0      	b.n	802842a <__ieee754_exp+0x2a>
 80284e8:	4b47      	ldr	r3, [pc, #284]	; (8028608 <__ieee754_exp+0x208>)
 80284ea:	4413      	add	r3, r2
 80284ec:	ed93 7b00 	vldr	d7, [r3]
 80284f0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80285d0 <__ieee754_exp+0x1d0>
 80284f4:	ed9f 5b38 	vldr	d5, [pc, #224]	; 80285d8 <__ieee754_exp+0x1d8>
 80284f8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80284fc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80285e0 <__ieee754_exp+0x1e0>
 8028500:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8028504:	ee17 3a90 	vmov	r3, s15
 8028508:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802850c:	eea7 0b46 	vfms.f64	d0, d7, d6
 8028510:	ee27 7b05 	vmul.f64	d7, d7, d5
 8028514:	eeb0 6b40 	vmov.f64	d6, d0
 8028518:	e7ba      	b.n	8028490 <__ieee754_exp+0x90>
 802851a:	4b3c      	ldr	r3, [pc, #240]	; (802860c <__ieee754_exp+0x20c>)
 802851c:	429a      	cmp	r2, r3
 802851e:	d80d      	bhi.n	802853c <__ieee754_exp+0x13c>
 8028520:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8028524:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8028598 <__ieee754_exp+0x198>
 8028528:	ee30 5b05 	vadd.f64	d5, d0, d5
 802852c:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8028530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028534:	dd02      	ble.n	802853c <__ieee754_exp+0x13c>
 8028536:	ee30 0b04 	vadd.f64	d0, d0, d4
 802853a:	e776      	b.n	802842a <__ieee754_exp+0x2a>
 802853c:	2300      	movs	r3, #0
 802853e:	e7a9      	b.n	8028494 <__ieee754_exp+0x94>
 8028540:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 8028544:	ee34 5b45 	vsub.f64	d5, d4, d5
 8028548:	428b      	cmp	r3, r1
 802854a:	ee82 4b05 	vdiv.f64	d4, d2, d5
 802854e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8028552:	ee37 7b46 	vsub.f64	d7, d7, d6
 8028556:	ee33 7b47 	vsub.f64	d7, d3, d7
 802855a:	ed8d 7b00 	vstr	d7, [sp]
 802855e:	9a01      	ldr	r2, [sp, #4]
 8028560:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028564:	db04      	blt.n	8028570 <__ieee754_exp+0x170>
 8028566:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 802856a:	ec41 0b10 	vmov	d0, r0, r1
 802856e:	e75c      	b.n	802842a <__ieee754_exp+0x2a>
 8028570:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8028574:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 8028578:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 80285e8 <__ieee754_exp+0x1e8>
 802857c:	ec41 0b10 	vmov	d0, r0, r1
 8028580:	ee20 0b07 	vmul.f64	d0, d0, d7
 8028584:	e751      	b.n	802842a <__ieee754_exp+0x2a>
 8028586:	bf00      	nop
	...
 8028590:	fefa39ef 	.word	0xfefa39ef
 8028594:	40862e42 	.word	0x40862e42
 8028598:	8800759c 	.word	0x8800759c
 802859c:	7e37e43c 	.word	0x7e37e43c
 80285a0:	d52d3051 	.word	0xd52d3051
 80285a4:	c0874910 	.word	0xc0874910
 80285a8:	72bea4d0 	.word	0x72bea4d0
 80285ac:	3e663769 	.word	0x3e663769
 80285b0:	c5d26bf1 	.word	0xc5d26bf1
 80285b4:	bebbbd41 	.word	0xbebbbd41
 80285b8:	af25de2c 	.word	0xaf25de2c
 80285bc:	3f11566a 	.word	0x3f11566a
 80285c0:	16bebd93 	.word	0x16bebd93
 80285c4:	bf66c16c 	.word	0xbf66c16c
 80285c8:	5555553e 	.word	0x5555553e
 80285cc:	3fc55555 	.word	0x3fc55555
 80285d0:	652b82fe 	.word	0x652b82fe
 80285d4:	3ff71547 	.word	0x3ff71547
 80285d8:	35793c76 	.word	0x35793c76
 80285dc:	3dea39ef 	.word	0x3dea39ef
 80285e0:	fee00000 	.word	0xfee00000
 80285e4:	3fe62e42 	.word	0x3fe62e42
 80285e8:	00000000 	.word	0x00000000
 80285ec:	01700000 	.word	0x01700000
 80285f0:	40862e41 	.word	0x40862e41
 80285f4:	7fefffff 	.word	0x7fefffff
 80285f8:	3fd62e42 	.word	0x3fd62e42
 80285fc:	3ff0a2b1 	.word	0x3ff0a2b1
 8028600:	0804c6a8 	.word	0x0804c6a8
 8028604:	0804c6b8 	.word	0x0804c6b8
 8028608:	0804c698 	.word	0x0804c698
 802860c:	3e2fffff 	.word	0x3e2fffff

08028610 <__ieee754_pow>:
 8028610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028614:	ec57 6b11 	vmov	r6, r7, d1
 8028618:	ed2d 8b02 	vpush	{d8}
 802861c:	eeb0 8b40 	vmov.f64	d8, d0
 8028620:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8028624:	ea58 0306 	orrs.w	r3, r8, r6
 8028628:	b085      	sub	sp, #20
 802862a:	46b9      	mov	r9, r7
 802862c:	ee11 2a10 	vmov	r2, s2
 8028630:	f000 8306 	beq.w	8028c40 <__ieee754_pow+0x630>
 8028634:	ee18 aa90 	vmov	sl, s17
 8028638:	4bb9      	ldr	r3, [pc, #740]	; (8028920 <__ieee754_pow+0x310>)
 802863a:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 802863e:	429c      	cmp	r4, r3
 8028640:	ee10 ba10 	vmov	fp, s0
 8028644:	dc0b      	bgt.n	802865e <__ieee754_pow+0x4e>
 8028646:	d105      	bne.n	8028654 <__ieee754_pow+0x44>
 8028648:	f1bb 0f00 	cmp.w	fp, #0
 802864c:	d107      	bne.n	802865e <__ieee754_pow+0x4e>
 802864e:	45a0      	cmp	r8, r4
 8028650:	dc0d      	bgt.n	802866e <__ieee754_pow+0x5e>
 8028652:	e001      	b.n	8028658 <__ieee754_pow+0x48>
 8028654:	4598      	cmp	r8, r3
 8028656:	dc02      	bgt.n	802865e <__ieee754_pow+0x4e>
 8028658:	4598      	cmp	r8, r3
 802865a:	d110      	bne.n	802867e <__ieee754_pow+0x6e>
 802865c:	b17a      	cbz	r2, 802867e <__ieee754_pow+0x6e>
 802865e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8028662:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8028666:	ea54 030b 	orrs.w	r3, r4, fp
 802866a:	f000 82e9 	beq.w	8028c40 <__ieee754_pow+0x630>
 802866e:	48ad      	ldr	r0, [pc, #692]	; (8028924 <__ieee754_pow+0x314>)
 8028670:	b005      	add	sp, #20
 8028672:	ecbd 8b02 	vpop	{d8}
 8028676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802867a:	f001 ba35 	b.w	8029ae8 <nan>
 802867e:	f1ba 0f00 	cmp.w	sl, #0
 8028682:	da4e      	bge.n	8028722 <__ieee754_pow+0x112>
 8028684:	4ba8      	ldr	r3, [pc, #672]	; (8028928 <__ieee754_pow+0x318>)
 8028686:	4598      	cmp	r8, r3
 8028688:	dc49      	bgt.n	802871e <__ieee754_pow+0x10e>
 802868a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802868e:	4598      	cmp	r8, r3
 8028690:	dd47      	ble.n	8028722 <__ieee754_pow+0x112>
 8028692:	ea4f 5328 	mov.w	r3, r8, asr #20
 8028696:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802869a:	2b14      	cmp	r3, #20
 802869c:	dd24      	ble.n	80286e8 <__ieee754_pow+0xd8>
 802869e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80286a2:	fa22 f503 	lsr.w	r5, r2, r3
 80286a6:	fa05 f303 	lsl.w	r3, r5, r3
 80286aa:	4293      	cmp	r3, r2
 80286ac:	d139      	bne.n	8028722 <__ieee754_pow+0x112>
 80286ae:	f005 0501 	and.w	r5, r5, #1
 80286b2:	f1c5 0502 	rsb	r5, r5, #2
 80286b6:	2a00      	cmp	r2, #0
 80286b8:	d15a      	bne.n	8028770 <__ieee754_pow+0x160>
 80286ba:	4b99      	ldr	r3, [pc, #612]	; (8028920 <__ieee754_pow+0x310>)
 80286bc:	4598      	cmp	r8, r3
 80286be:	d122      	bne.n	8028706 <__ieee754_pow+0xf6>
 80286c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80286c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80286c8:	ea53 030b 	orrs.w	r3, r3, fp
 80286cc:	f000 82b8 	beq.w	8028c40 <__ieee754_pow+0x630>
 80286d0:	4b96      	ldr	r3, [pc, #600]	; (802892c <__ieee754_pow+0x31c>)
 80286d2:	429c      	cmp	r4, r3
 80286d4:	dd27      	ble.n	8028726 <__ieee754_pow+0x116>
 80286d6:	f1b9 0f00 	cmp.w	r9, #0
 80286da:	f280 82b4 	bge.w	8028c46 <__ieee754_pow+0x636>
 80286de:	ed9f 7b84 	vldr	d7, [pc, #528]	; 80288f0 <__ieee754_pow+0x2e0>
 80286e2:	ed8d 7b00 	vstr	d7, [sp]
 80286e6:	e026      	b.n	8028736 <__ieee754_pow+0x126>
 80286e8:	2a00      	cmp	r2, #0
 80286ea:	d140      	bne.n	802876e <__ieee754_pow+0x15e>
 80286ec:	f1c3 0314 	rsb	r3, r3, #20
 80286f0:	fa48 f503 	asr.w	r5, r8, r3
 80286f4:	fa05 f303 	lsl.w	r3, r5, r3
 80286f8:	4543      	cmp	r3, r8
 80286fa:	f040 82aa 	bne.w	8028c52 <__ieee754_pow+0x642>
 80286fe:	f005 0501 	and.w	r5, r5, #1
 8028702:	f1c5 0502 	rsb	r5, r5, #2
 8028706:	4b8a      	ldr	r3, [pc, #552]	; (8028930 <__ieee754_pow+0x320>)
 8028708:	4598      	cmp	r8, r3
 802870a:	d11b      	bne.n	8028744 <__ieee754_pow+0x134>
 802870c:	f1b9 0f00 	cmp.w	r9, #0
 8028710:	f280 829c 	bge.w	8028c4c <__ieee754_pow+0x63c>
 8028714:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8028718:	ee87 7b08 	vdiv.f64	d7, d7, d8
 802871c:	e7e1      	b.n	80286e2 <__ieee754_pow+0xd2>
 802871e:	2502      	movs	r5, #2
 8028720:	e7c9      	b.n	80286b6 <__ieee754_pow+0xa6>
 8028722:	2500      	movs	r5, #0
 8028724:	e7c7      	b.n	80286b6 <__ieee754_pow+0xa6>
 8028726:	f1b9 0f00 	cmp.w	r9, #0
 802872a:	dad8      	bge.n	80286de <__ieee754_pow+0xce>
 802872c:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8028730:	4633      	mov	r3, r6
 8028732:	e9cd 3400 	strd	r3, r4, [sp]
 8028736:	ed9d 0b00 	vldr	d0, [sp]
 802873a:	b005      	add	sp, #20
 802873c:	ecbd 8b02 	vpop	{d8}
 8028740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028744:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8028748:	d102      	bne.n	8028750 <__ieee754_pow+0x140>
 802874a:	ee28 7b08 	vmul.f64	d7, d8, d8
 802874e:	e7c8      	b.n	80286e2 <__ieee754_pow+0xd2>
 8028750:	4b78      	ldr	r3, [pc, #480]	; (8028934 <__ieee754_pow+0x324>)
 8028752:	4599      	cmp	r9, r3
 8028754:	d10c      	bne.n	8028770 <__ieee754_pow+0x160>
 8028756:	f1ba 0f00 	cmp.w	sl, #0
 802875a:	db09      	blt.n	8028770 <__ieee754_pow+0x160>
 802875c:	eeb0 0b48 	vmov.f64	d0, d8
 8028760:	b005      	add	sp, #20
 8028762:	ecbd 8b02 	vpop	{d8}
 8028766:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802876a:	f000 bad7 	b.w	8028d1c <__ieee754_sqrt>
 802876e:	2500      	movs	r5, #0
 8028770:	eeb0 0b48 	vmov.f64	d0, d8
 8028774:	f001 f9a5 	bl	8029ac2 <fabs>
 8028778:	ed8d 0b00 	vstr	d0, [sp]
 802877c:	f1bb 0f00 	cmp.w	fp, #0
 8028780:	d128      	bne.n	80287d4 <__ieee754_pow+0x1c4>
 8028782:	b124      	cbz	r4, 802878e <__ieee754_pow+0x17e>
 8028784:	4b6a      	ldr	r3, [pc, #424]	; (8028930 <__ieee754_pow+0x320>)
 8028786:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 802878a:	429a      	cmp	r2, r3
 802878c:	d122      	bne.n	80287d4 <__ieee754_pow+0x1c4>
 802878e:	f1b9 0f00 	cmp.w	r9, #0
 8028792:	da07      	bge.n	80287a4 <__ieee754_pow+0x194>
 8028794:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8028798:	ed9d 6b00 	vldr	d6, [sp]
 802879c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 80287a0:	ed8d 7b00 	vstr	d7, [sp]
 80287a4:	f1ba 0f00 	cmp.w	sl, #0
 80287a8:	dac5      	bge.n	8028736 <__ieee754_pow+0x126>
 80287aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80287ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80287b2:	ea54 0305 	orrs.w	r3, r4, r5
 80287b6:	d106      	bne.n	80287c6 <__ieee754_pow+0x1b6>
 80287b8:	ed9d 7b00 	vldr	d7, [sp]
 80287bc:	ee37 7b47 	vsub.f64	d7, d7, d7
 80287c0:	ee87 7b07 	vdiv.f64	d7, d7, d7
 80287c4:	e78d      	b.n	80286e2 <__ieee754_pow+0xd2>
 80287c6:	2d01      	cmp	r5, #1
 80287c8:	d1b5      	bne.n	8028736 <__ieee754_pow+0x126>
 80287ca:	ed9d 7b00 	vldr	d7, [sp]
 80287ce:	eeb1 7b47 	vneg.f64	d7, d7
 80287d2:	e786      	b.n	80286e2 <__ieee754_pow+0xd2>
 80287d4:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 80287d8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80287dc:	ea55 030a 	orrs.w	r3, r5, sl
 80287e0:	d104      	bne.n	80287ec <__ieee754_pow+0x1dc>
 80287e2:	ee38 8b48 	vsub.f64	d8, d8, d8
 80287e6:	ee88 7b08 	vdiv.f64	d7, d8, d8
 80287ea:	e77a      	b.n	80286e2 <__ieee754_pow+0xd2>
 80287ec:	4b52      	ldr	r3, [pc, #328]	; (8028938 <__ieee754_pow+0x328>)
 80287ee:	4598      	cmp	r8, r3
 80287f0:	f340 80a8 	ble.w	8028944 <__ieee754_pow+0x334>
 80287f4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80287f8:	4598      	cmp	r8, r3
 80287fa:	dd0b      	ble.n	8028814 <__ieee754_pow+0x204>
 80287fc:	4b4b      	ldr	r3, [pc, #300]	; (802892c <__ieee754_pow+0x31c>)
 80287fe:	429c      	cmp	r4, r3
 8028800:	dc0e      	bgt.n	8028820 <__ieee754_pow+0x210>
 8028802:	f1b9 0f00 	cmp.w	r9, #0
 8028806:	f6bf af6a 	bge.w	80286de <__ieee754_pow+0xce>
 802880a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 80288f8 <__ieee754_pow+0x2e8>
 802880e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8028812:	e766      	b.n	80286e2 <__ieee754_pow+0xd2>
 8028814:	4b49      	ldr	r3, [pc, #292]	; (802893c <__ieee754_pow+0x32c>)
 8028816:	429c      	cmp	r4, r3
 8028818:	ddf3      	ble.n	8028802 <__ieee754_pow+0x1f2>
 802881a:	4b45      	ldr	r3, [pc, #276]	; (8028930 <__ieee754_pow+0x320>)
 802881c:	429c      	cmp	r4, r3
 802881e:	dd03      	ble.n	8028828 <__ieee754_pow+0x218>
 8028820:	f1b9 0f00 	cmp.w	r9, #0
 8028824:	dcf1      	bgt.n	802880a <__ieee754_pow+0x1fa>
 8028826:	e75a      	b.n	80286de <__ieee754_pow+0xce>
 8028828:	ed9d 7b00 	vldr	d7, [sp]
 802882c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8028830:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8028900 <__ieee754_pow+0x2f0>
 8028834:	ee37 6b46 	vsub.f64	d6, d7, d6
 8028838:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 802883c:	eeb1 3b46 	vneg.f64	d3, d6
 8028840:	eea3 5b07 	vfma.f64	d5, d3, d7
 8028844:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8028848:	eea5 7b46 	vfms.f64	d7, d5, d6
 802884c:	ee26 5b06 	vmul.f64	d5, d6, d6
 8028850:	ee27 5b05 	vmul.f64	d5, d7, d5
 8028854:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8028908 <__ieee754_pow+0x2f8>
 8028858:	ee27 7b45 	vnmul.f64	d7, d7, d5
 802885c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8028910 <__ieee754_pow+0x300>
 8028860:	eea6 7b05 	vfma.f64	d7, d6, d5
 8028864:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8028918 <__ieee754_pow+0x308>
 8028868:	eeb0 4b47 	vmov.f64	d4, d7
 802886c:	eea6 4b05 	vfma.f64	d4, d6, d5
 8028870:	ec53 2b14 	vmov	r2, r3, d4
 8028874:	2200      	movs	r2, #0
 8028876:	ec43 2b14 	vmov	d4, r2, r3
 802887a:	eeb0 6b44 	vmov.f64	d6, d4
 802887e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8028882:	ee37 7b46 	vsub.f64	d7, d7, d6
 8028886:	3d01      	subs	r5, #1
 8028888:	ea55 030a 	orrs.w	r3, r5, sl
 802888c:	f04f 0200 	mov.w	r2, #0
 8028890:	463b      	mov	r3, r7
 8028892:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8028896:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 802889a:	ec47 6b15 	vmov	d5, r6, r7
 802889e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 80288a2:	ec47 6b13 	vmov	d3, r6, r7
 80288a6:	ec43 2b16 	vmov	d6, r2, r3
 80288aa:	ee27 7b03 	vmul.f64	d7, d7, d3
 80288ae:	ee35 5b46 	vsub.f64	d5, d5, d6
 80288b2:	4b23      	ldr	r3, [pc, #140]	; (8028940 <__ieee754_pow+0x330>)
 80288b4:	eea5 7b04 	vfma.f64	d7, d5, d4
 80288b8:	ee24 6b06 	vmul.f64	d6, d4, d6
 80288bc:	ee37 5b06 	vadd.f64	d5, d7, d6
 80288c0:	ee15 1a90 	vmov	r1, s11
 80288c4:	4299      	cmp	r1, r3
 80288c6:	ee15 2a10 	vmov	r2, s10
 80288ca:	f340 819b 	ble.w	8028c04 <__ieee754_pow+0x5f4>
 80288ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80288d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80288d6:	4313      	orrs	r3, r2
 80288d8:	f000 810a 	beq.w	8028af0 <__ieee754_pow+0x4e0>
 80288dc:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80288f8 <__ieee754_pow+0x2e8>
 80288e0:	ee28 8b07 	vmul.f64	d8, d8, d7
 80288e4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80288e8:	e6fb      	b.n	80286e2 <__ieee754_pow+0xd2>
 80288ea:	bf00      	nop
 80288ec:	f3af 8000 	nop.w
	...
 80288f8:	8800759c 	.word	0x8800759c
 80288fc:	7e37e43c 	.word	0x7e37e43c
 8028900:	55555555 	.word	0x55555555
 8028904:	3fd55555 	.word	0x3fd55555
 8028908:	652b82fe 	.word	0x652b82fe
 802890c:	3ff71547 	.word	0x3ff71547
 8028910:	f85ddf44 	.word	0xf85ddf44
 8028914:	3e54ae0b 	.word	0x3e54ae0b
 8028918:	60000000 	.word	0x60000000
 802891c:	3ff71547 	.word	0x3ff71547
 8028920:	7ff00000 	.word	0x7ff00000
 8028924:	0804c68c 	.word	0x0804c68c
 8028928:	433fffff 	.word	0x433fffff
 802892c:	3fefffff 	.word	0x3fefffff
 8028930:	3ff00000 	.word	0x3ff00000
 8028934:	3fe00000 	.word	0x3fe00000
 8028938:	41e00000 	.word	0x41e00000
 802893c:	3feffffe 	.word	0x3feffffe
 8028940:	408fffff 	.word	0x408fffff
 8028944:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8028948:	f280 80ce 	bge.w	8028ae8 <__ieee754_pow+0x4d8>
 802894c:	ed9d 6b00 	vldr	d6, [sp]
 8028950:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 8028c58 <__ieee754_pow+0x648>
 8028954:	ee26 7b07 	vmul.f64	d7, d6, d7
 8028958:	ed8d 7b00 	vstr	d7, [sp]
 802895c:	9c01      	ldr	r4, [sp, #4]
 802895e:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8028962:	1521      	asrs	r1, r4, #20
 8028964:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8028968:	4419      	add	r1, r3
 802896a:	4be3      	ldr	r3, [pc, #908]	; (8028cf8 <__ieee754_pow+0x6e8>)
 802896c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8028970:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 8028974:	429c      	cmp	r4, r3
 8028976:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 802897a:	dd06      	ble.n	802898a <__ieee754_pow+0x37a>
 802897c:	4bdf      	ldr	r3, [pc, #892]	; (8028cfc <__ieee754_pow+0x6ec>)
 802897e:	429c      	cmp	r4, r3
 8028980:	f340 80b4 	ble.w	8028aec <__ieee754_pow+0x4dc>
 8028984:	3101      	adds	r1, #1
 8028986:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 802898a:	2400      	movs	r4, #0
 802898c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028990:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8028994:	4603      	mov	r3, r0
 8028996:	ec43 2b17 	vmov	d7, r2, r3
 802899a:	4bd9      	ldr	r3, [pc, #868]	; (8028d00 <__ieee754_pow+0x6f0>)
 802899c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 80289a0:	4463      	add	r3, ip
 80289a2:	ed93 5b00 	vldr	d5, [r3]
 80289a6:	1040      	asrs	r0, r0, #1
 80289a8:	ee37 2b45 	vsub.f64	d2, d7, d5
 80289ac:	ee35 6b07 	vadd.f64	d6, d5, d7
 80289b0:	ee84 1b06 	vdiv.f64	d1, d4, d6
 80289b4:	ee22 6b01 	vmul.f64	d6, d2, d1
 80289b8:	ed8d 6b00 	vstr	d6, [sp]
 80289bc:	e9dd 8900 	ldrd	r8, r9, [sp]
 80289c0:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 80289c4:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 80289c8:	f04f 0800 	mov.w	r8, #0
 80289cc:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 80289d0:	2200      	movs	r2, #0
 80289d2:	ec49 8b14 	vmov	d4, r8, r9
 80289d6:	ec43 2b16 	vmov	d6, r2, r3
 80289da:	eeb1 3b44 	vneg.f64	d3, d4
 80289de:	eea3 2b06 	vfma.f64	d2, d3, d6
 80289e2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80289e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80289ea:	eea3 2b07 	vfma.f64	d2, d3, d7
 80289ee:	ed9d 7b00 	vldr	d7, [sp]
 80289f2:	ee22 2b01 	vmul.f64	d2, d2, d1
 80289f6:	ee27 5b07 	vmul.f64	d5, d7, d7
 80289fa:	ee37 6b04 	vadd.f64	d6, d7, d4
 80289fe:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8028c60 <__ieee754_pow+0x650>
 8028a02:	ee25 0b05 	vmul.f64	d0, d5, d5
 8028a06:	ee26 6b02 	vmul.f64	d6, d6, d2
 8028a0a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8028c68 <__ieee754_pow+0x658>
 8028a0e:	eea5 7b01 	vfma.f64	d7, d5, d1
 8028a12:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8028c70 <__ieee754_pow+0x660>
 8028a16:	eea7 1b05 	vfma.f64	d1, d7, d5
 8028a1a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8028c78 <__ieee754_pow+0x668>
 8028a1e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8028a22:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8028c80 <__ieee754_pow+0x670>
 8028a26:	eea7 1b05 	vfma.f64	d1, d7, d5
 8028a2a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8028c88 <__ieee754_pow+0x678>
 8028a2e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8028a32:	eea0 6b07 	vfma.f64	d6, d0, d7
 8028a36:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 8028a3a:	eeb0 5b47 	vmov.f64	d5, d7
 8028a3e:	eea4 5b04 	vfma.f64	d5, d4, d4
 8028a42:	ee35 5b06 	vadd.f64	d5, d5, d6
 8028a46:	ed8d 5b02 	vstr	d5, [sp, #8]
 8028a4a:	f8cd 8008 	str.w	r8, [sp, #8]
 8028a4e:	ed9d 5b02 	vldr	d5, [sp, #8]
 8028a52:	ee35 7b47 	vsub.f64	d7, d5, d7
 8028a56:	eea3 7b04 	vfma.f64	d7, d3, d4
 8028a5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028a5e:	ed9d 6b00 	vldr	d6, [sp]
 8028a62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028a66:	eea2 7b05 	vfma.f64	d7, d2, d5
 8028a6a:	eeb0 6b47 	vmov.f64	d6, d7
 8028a6e:	eea4 6b05 	vfma.f64	d6, d4, d5
 8028a72:	ed8d 6b00 	vstr	d6, [sp]
 8028a76:	f8cd 8000 	str.w	r8, [sp]
 8028a7a:	ed9d 2b00 	vldr	d2, [sp]
 8028a7e:	eeb0 6b42 	vmov.f64	d6, d2
 8028a82:	eea3 6b05 	vfma.f64	d6, d3, d5
 8028a86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8028a8a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8028c90 <__ieee754_pow+0x680>
 8028a8e:	4b9d      	ldr	r3, [pc, #628]	; (8028d04 <__ieee754_pow+0x6f4>)
 8028a90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028a94:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8028c98 <__ieee754_pow+0x688>
 8028a98:	4463      	add	r3, ip
 8028a9a:	eea2 7b06 	vfma.f64	d7, d2, d6
 8028a9e:	ed93 6b00 	vldr	d6, [r3]
 8028aa2:	4b99      	ldr	r3, [pc, #612]	; (8028d08 <__ieee754_pow+0x6f8>)
 8028aa4:	ee37 6b06 	vadd.f64	d6, d7, d6
 8028aa8:	449c      	add	ip, r3
 8028aaa:	ed9c 1b00 	vldr	d1, [ip]
 8028aae:	eeb0 4b46 	vmov.f64	d4, d6
 8028ab2:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8028ca0 <__ieee754_pow+0x690>
 8028ab6:	ee07 1a90 	vmov	s15, r1
 8028aba:	eea2 4b03 	vfma.f64	d4, d2, d3
 8028abe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028ac2:	ee34 4b01 	vadd.f64	d4, d4, d1
 8028ac6:	ee34 5b07 	vadd.f64	d5, d4, d7
 8028aca:	ed8d 5b00 	vstr	d5, [sp]
 8028ace:	f8cd 8000 	str.w	r8, [sp]
 8028ad2:	ed9d 4b00 	vldr	d4, [sp]
 8028ad6:	ee34 7b47 	vsub.f64	d7, d4, d7
 8028ada:	ee37 7b41 	vsub.f64	d7, d7, d1
 8028ade:	eea2 7b43 	vfms.f64	d7, d2, d3
 8028ae2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028ae6:	e6ce      	b.n	8028886 <__ieee754_pow+0x276>
 8028ae8:	2300      	movs	r3, #0
 8028aea:	e73a      	b.n	8028962 <__ieee754_pow+0x352>
 8028aec:	2401      	movs	r4, #1
 8028aee:	e74d      	b.n	802898c <__ieee754_pow+0x37c>
 8028af0:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8028ca8 <__ieee754_pow+0x698>
 8028af4:	ee35 5b46 	vsub.f64	d5, d5, d6
 8028af8:	ee37 4b04 	vadd.f64	d4, d7, d4
 8028afc:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8028b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028b04:	f73f aeea 	bgt.w	80288dc <__ieee754_pow+0x2cc>
 8028b08:	4a80      	ldr	r2, [pc, #512]	; (8028d0c <__ieee754_pow+0x6fc>)
 8028b0a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8028b0e:	4293      	cmp	r3, r2
 8028b10:	f340 808e 	ble.w	8028c30 <__ieee754_pow+0x620>
 8028b14:	151b      	asrs	r3, r3, #20
 8028b16:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 8028b1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8028b1e:	4103      	asrs	r3, r0
 8028b20:	440b      	add	r3, r1
 8028b22:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8028b26:	487a      	ldr	r0, [pc, #488]	; (8028d10 <__ieee754_pow+0x700>)
 8028b28:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8028b2c:	4110      	asrs	r0, r2
 8028b2e:	ea23 0500 	bic.w	r5, r3, r0
 8028b32:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8028b36:	2400      	movs	r4, #0
 8028b38:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8028b3c:	f1c2 0214 	rsb	r2, r2, #20
 8028b40:	ec45 4b15 	vmov	d5, r4, r5
 8028b44:	4110      	asrs	r0, r2
 8028b46:	2900      	cmp	r1, #0
 8028b48:	bfb8      	it	lt
 8028b4a:	4240      	neglt	r0, r0
 8028b4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8028b50:	ee36 5b07 	vadd.f64	d5, d6, d7
 8028b54:	ec53 2b15 	vmov	r2, r3, d5
 8028b58:	2200      	movs	r2, #0
 8028b5a:	ec43 2b15 	vmov	d5, r2, r3
 8028b5e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8028cb0 <__ieee754_pow+0x6a0>
 8028b62:	ee35 6b46 	vsub.f64	d6, d5, d6
 8028b66:	ee37 6b46 	vsub.f64	d6, d7, d6
 8028b6a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8028cb8 <__ieee754_pow+0x6a8>
 8028b6e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8028b72:	eea6 7b04 	vfma.f64	d7, d6, d4
 8028b76:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8028cc0 <__ieee754_pow+0x6b0>
 8028b7a:	eeb0 4b47 	vmov.f64	d4, d7
 8028b7e:	eea5 4b06 	vfma.f64	d4, d5, d6
 8028b82:	eeb0 3b44 	vmov.f64	d3, d4
 8028b86:	eea5 3b46 	vfms.f64	d3, d5, d6
 8028b8a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8028cc8 <__ieee754_pow+0x6b8>
 8028b8e:	ee37 7b43 	vsub.f64	d7, d7, d3
 8028b92:	ee24 6b04 	vmul.f64	d6, d4, d4
 8028b96:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8028cd0 <__ieee754_pow+0x6c0>
 8028b9a:	eea4 7b07 	vfma.f64	d7, d4, d7
 8028b9e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8028ba2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8028cd8 <__ieee754_pow+0x6c8>
 8028ba6:	eea3 5b06 	vfma.f64	d5, d3, d6
 8028baa:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8028ce0 <__ieee754_pow+0x6d0>
 8028bae:	eea5 3b06 	vfma.f64	d3, d5, d6
 8028bb2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8028ce8 <__ieee754_pow+0x6d8>
 8028bb6:	eea3 5b06 	vfma.f64	d5, d3, d6
 8028bba:	eeb0 3b44 	vmov.f64	d3, d4
 8028bbe:	eea5 3b46 	vfms.f64	d3, d5, d6
 8028bc2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8028bc6:	eeb0 6b43 	vmov.f64	d6, d3
 8028bca:	ee24 3b03 	vmul.f64	d3, d4, d3
 8028bce:	ee36 5b45 	vsub.f64	d5, d6, d5
 8028bd2:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8028bd6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028bda:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8028bde:	ee37 7b44 	vsub.f64	d7, d7, d4
 8028be2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028be6:	ed8d 7b00 	vstr	d7, [sp]
 8028bea:	9901      	ldr	r1, [sp, #4]
 8028bec:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8028bf0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8028bf4:	da1e      	bge.n	8028c34 <__ieee754_pow+0x624>
 8028bf6:	eeb0 0b47 	vmov.f64	d0, d7
 8028bfa:	f001 f809 	bl	8029c10 <scalbn>
 8028bfe:	ee20 7b08 	vmul.f64	d7, d0, d8
 8028c02:	e56e      	b.n	80286e2 <__ieee754_pow+0xd2>
 8028c04:	4b43      	ldr	r3, [pc, #268]	; (8028d14 <__ieee754_pow+0x704>)
 8028c06:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8028c0a:	4298      	cmp	r0, r3
 8028c0c:	f77f af7c 	ble.w	8028b08 <__ieee754_pow+0x4f8>
 8028c10:	4b41      	ldr	r3, [pc, #260]	; (8028d18 <__ieee754_pow+0x708>)
 8028c12:	440b      	add	r3, r1
 8028c14:	4313      	orrs	r3, r2
 8028c16:	d002      	beq.n	8028c1e <__ieee754_pow+0x60e>
 8028c18:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8028cf0 <__ieee754_pow+0x6e0>
 8028c1c:	e660      	b.n	80288e0 <__ieee754_pow+0x2d0>
 8028c1e:	ee35 5b46 	vsub.f64	d5, d5, d6
 8028c22:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8028c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028c2a:	f6ff af6d 	blt.w	8028b08 <__ieee754_pow+0x4f8>
 8028c2e:	e7f3      	b.n	8028c18 <__ieee754_pow+0x608>
 8028c30:	2000      	movs	r0, #0
 8028c32:	e78d      	b.n	8028b50 <__ieee754_pow+0x540>
 8028c34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028c38:	460b      	mov	r3, r1
 8028c3a:	ec43 2b10 	vmov	d0, r2, r3
 8028c3e:	e7de      	b.n	8028bfe <__ieee754_pow+0x5ee>
 8028c40:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8028c44:	e54d      	b.n	80286e2 <__ieee754_pow+0xd2>
 8028c46:	e9cd 6700 	strd	r6, r7, [sp]
 8028c4a:	e574      	b.n	8028736 <__ieee754_pow+0x126>
 8028c4c:	ed8d 8b00 	vstr	d8, [sp]
 8028c50:	e571      	b.n	8028736 <__ieee754_pow+0x126>
 8028c52:	4615      	mov	r5, r2
 8028c54:	e557      	b.n	8028706 <__ieee754_pow+0xf6>
 8028c56:	bf00      	nop
 8028c58:	00000000 	.word	0x00000000
 8028c5c:	43400000 	.word	0x43400000
 8028c60:	4a454eef 	.word	0x4a454eef
 8028c64:	3fca7e28 	.word	0x3fca7e28
 8028c68:	93c9db65 	.word	0x93c9db65
 8028c6c:	3fcd864a 	.word	0x3fcd864a
 8028c70:	a91d4101 	.word	0xa91d4101
 8028c74:	3fd17460 	.word	0x3fd17460
 8028c78:	518f264d 	.word	0x518f264d
 8028c7c:	3fd55555 	.word	0x3fd55555
 8028c80:	db6fabff 	.word	0xdb6fabff
 8028c84:	3fdb6db6 	.word	0x3fdb6db6
 8028c88:	33333303 	.word	0x33333303
 8028c8c:	3fe33333 	.word	0x3fe33333
 8028c90:	dc3a03fd 	.word	0xdc3a03fd
 8028c94:	3feec709 	.word	0x3feec709
 8028c98:	145b01f5 	.word	0x145b01f5
 8028c9c:	be3e2fe0 	.word	0xbe3e2fe0
 8028ca0:	e0000000 	.word	0xe0000000
 8028ca4:	3feec709 	.word	0x3feec709
 8028ca8:	652b82fe 	.word	0x652b82fe
 8028cac:	3c971547 	.word	0x3c971547
 8028cb0:	fefa39ef 	.word	0xfefa39ef
 8028cb4:	3fe62e42 	.word	0x3fe62e42
 8028cb8:	0ca86c39 	.word	0x0ca86c39
 8028cbc:	be205c61 	.word	0xbe205c61
 8028cc0:	00000000 	.word	0x00000000
 8028cc4:	3fe62e43 	.word	0x3fe62e43
 8028cc8:	72bea4d0 	.word	0x72bea4d0
 8028ccc:	3e663769 	.word	0x3e663769
 8028cd0:	c5d26bf1 	.word	0xc5d26bf1
 8028cd4:	bebbbd41 	.word	0xbebbbd41
 8028cd8:	af25de2c 	.word	0xaf25de2c
 8028cdc:	3f11566a 	.word	0x3f11566a
 8028ce0:	16bebd93 	.word	0x16bebd93
 8028ce4:	bf66c16c 	.word	0xbf66c16c
 8028ce8:	5555553e 	.word	0x5555553e
 8028cec:	3fc55555 	.word	0x3fc55555
 8028cf0:	c2f8f359 	.word	0xc2f8f359
 8028cf4:	01a56e1f 	.word	0x01a56e1f
 8028cf8:	0003988e 	.word	0x0003988e
 8028cfc:	000bb679 	.word	0x000bb679
 8028d00:	0804c6c8 	.word	0x0804c6c8
 8028d04:	0804c6e8 	.word	0x0804c6e8
 8028d08:	0804c6d8 	.word	0x0804c6d8
 8028d0c:	3fe00000 	.word	0x3fe00000
 8028d10:	000fffff 	.word	0x000fffff
 8028d14:	4090cbff 	.word	0x4090cbff
 8028d18:	3f6f3400 	.word	0x3f6f3400

08028d1c <__ieee754_sqrt>:
 8028d1c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8028d20:	4770      	bx	lr
	...

08028d24 <__ieee754_fmodf>:
 8028d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028d26:	ee10 6a90 	vmov	r6, s1
 8028d2a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8028d2e:	ee10 3a10 	vmov	r3, s0
 8028d32:	d009      	beq.n	8028d48 <__ieee754_fmodf+0x24>
 8028d34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8028d38:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8028d3c:	ee10 7a10 	vmov	r7, s0
 8028d40:	da02      	bge.n	8028d48 <__ieee754_fmodf+0x24>
 8028d42:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8028d46:	dd0a      	ble.n	8028d5e <__ieee754_fmodf+0x3a>
 8028d48:	ee07 3a90 	vmov	s15, r3
 8028d4c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8028d50:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8028d54:	ee17 3a90 	vmov	r3, s15
 8028d58:	ee00 3a10 	vmov	s0, r3
 8028d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028d5e:	42a9      	cmp	r1, r5
 8028d60:	dbfa      	blt.n	8028d58 <__ieee754_fmodf+0x34>
 8028d62:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8028d66:	d105      	bne.n	8028d74 <__ieee754_fmodf+0x50>
 8028d68:	4a30      	ldr	r2, [pc, #192]	; (8028e2c <__ieee754_fmodf+0x108>)
 8028d6a:	0fe3      	lsrs	r3, r4, #31
 8028d6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8028d70:	681b      	ldr	r3, [r3, #0]
 8028d72:	e7f1      	b.n	8028d58 <__ieee754_fmodf+0x34>
 8028d74:	4b2e      	ldr	r3, [pc, #184]	; (8028e30 <__ieee754_fmodf+0x10c>)
 8028d76:	4299      	cmp	r1, r3
 8028d78:	dc3e      	bgt.n	8028df8 <__ieee754_fmodf+0xd4>
 8028d7a:	020a      	lsls	r2, r1, #8
 8028d7c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8028d80:	2a00      	cmp	r2, #0
 8028d82:	dc36      	bgt.n	8028df2 <__ieee754_fmodf+0xce>
 8028d84:	429d      	cmp	r5, r3
 8028d86:	dc3a      	bgt.n	8028dfe <__ieee754_fmodf+0xda>
 8028d88:	022b      	lsls	r3, r5, #8
 8028d8a:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8028d8e:	005b      	lsls	r3, r3, #1
 8028d90:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8028d94:	d5fb      	bpl.n	8028d8e <__ieee754_fmodf+0x6a>
 8028d96:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8028d9a:	bfbb      	ittet	lt
 8028d9c:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8028da0:	1a1b      	sublt	r3, r3, r0
 8028da2:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8028da6:	4099      	lsllt	r1, r3
 8028da8:	bfa8      	it	ge
 8028daa:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8028dae:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8028db2:	bfb5      	itete	lt
 8028db4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8028db8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8028dbc:	1a9b      	sublt	r3, r3, r2
 8028dbe:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8028dc2:	bfb8      	it	lt
 8028dc4:	409d      	lsllt	r5, r3
 8028dc6:	1a80      	subs	r0, r0, r2
 8028dc8:	1b4b      	subs	r3, r1, r5
 8028dca:	b9d8      	cbnz	r0, 8028e04 <__ieee754_fmodf+0xe0>
 8028dcc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8028dd0:	bf28      	it	cs
 8028dd2:	460b      	movcs	r3, r1
 8028dd4:	2b00      	cmp	r3, #0
 8028dd6:	d0c7      	beq.n	8028d68 <__ieee754_fmodf+0x44>
 8028dd8:	4915      	ldr	r1, [pc, #84]	; (8028e30 <__ieee754_fmodf+0x10c>)
 8028dda:	428b      	cmp	r3, r1
 8028ddc:	dd1a      	ble.n	8028e14 <__ieee754_fmodf+0xf0>
 8028dde:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8028de2:	db1a      	blt.n	8028e1a <__ieee754_fmodf+0xf6>
 8028de4:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8028de8:	4323      	orrs	r3, r4
 8028dea:	327f      	adds	r2, #127	; 0x7f
 8028dec:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8028df0:	e7b2      	b.n	8028d58 <__ieee754_fmodf+0x34>
 8028df2:	3801      	subs	r0, #1
 8028df4:	0052      	lsls	r2, r2, #1
 8028df6:	e7c3      	b.n	8028d80 <__ieee754_fmodf+0x5c>
 8028df8:	15c8      	asrs	r0, r1, #23
 8028dfa:	387f      	subs	r0, #127	; 0x7f
 8028dfc:	e7c2      	b.n	8028d84 <__ieee754_fmodf+0x60>
 8028dfe:	15ea      	asrs	r2, r5, #23
 8028e00:	3a7f      	subs	r2, #127	; 0x7f
 8028e02:	e7c8      	b.n	8028d96 <__ieee754_fmodf+0x72>
 8028e04:	2b00      	cmp	r3, #0
 8028e06:	da02      	bge.n	8028e0e <__ieee754_fmodf+0xea>
 8028e08:	0049      	lsls	r1, r1, #1
 8028e0a:	3801      	subs	r0, #1
 8028e0c:	e7dc      	b.n	8028dc8 <__ieee754_fmodf+0xa4>
 8028e0e:	d0ab      	beq.n	8028d68 <__ieee754_fmodf+0x44>
 8028e10:	0059      	lsls	r1, r3, #1
 8028e12:	e7fa      	b.n	8028e0a <__ieee754_fmodf+0xe6>
 8028e14:	005b      	lsls	r3, r3, #1
 8028e16:	3a01      	subs	r2, #1
 8028e18:	e7df      	b.n	8028dda <__ieee754_fmodf+0xb6>
 8028e1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8028e1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8028e22:	3282      	adds	r2, #130	; 0x82
 8028e24:	4113      	asrs	r3, r2
 8028e26:	4323      	orrs	r3, r4
 8028e28:	e796      	b.n	8028d58 <__ieee754_fmodf+0x34>
 8028e2a:	bf00      	nop
 8028e2c:	0804c6f8 	.word	0x0804c6f8
 8028e30:	007fffff 	.word	0x007fffff

08028e34 <__ieee754_log10f>:
 8028e34:	b508      	push	{r3, lr}
 8028e36:	ee10 2a10 	vmov	r2, s0
 8028e3a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8028e3e:	ed2d 8b02 	vpush	{d8}
 8028e42:	d108      	bne.n	8028e56 <__ieee754_log10f+0x22>
 8028e44:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8028ec8 <__ieee754_log10f+0x94>
 8028e48:	eddf 7a20 	vldr	s15, [pc, #128]	; 8028ecc <__ieee754_log10f+0x98>
 8028e4c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8028e50:	ecbd 8b02 	vpop	{d8}
 8028e54:	bd08      	pop	{r3, pc}
 8028e56:	2a00      	cmp	r2, #0
 8028e58:	da02      	bge.n	8028e60 <__ieee754_log10f+0x2c>
 8028e5a:	ee30 7a40 	vsub.f32	s14, s0, s0
 8028e5e:	e7f3      	b.n	8028e48 <__ieee754_log10f+0x14>
 8028e60:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8028e64:	db02      	blt.n	8028e6c <__ieee754_log10f+0x38>
 8028e66:	ee30 0a00 	vadd.f32	s0, s0, s0
 8028e6a:	e7f1      	b.n	8028e50 <__ieee754_log10f+0x1c>
 8028e6c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8028e70:	bfbf      	itttt	lt
 8028e72:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 8028ed0 <__ieee754_log10f+0x9c>
 8028e76:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8028e7a:	f06f 0118 	mvnlt.w	r1, #24
 8028e7e:	ee17 2a90 	vmovlt	r2, s15
 8028e82:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8028e86:	bfa8      	it	ge
 8028e88:	2100      	movge	r1, #0
 8028e8a:	3b7f      	subs	r3, #127	; 0x7f
 8028e8c:	440b      	add	r3, r1
 8028e8e:	0fd9      	lsrs	r1, r3, #31
 8028e90:	440b      	add	r3, r1
 8028e92:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8028e96:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8028e9a:	ee07 3a90 	vmov	s15, r3
 8028e9e:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8028ea2:	ee00 3a10 	vmov	s0, r3
 8028ea6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8028eaa:	f7fe fd2d 	bl	8027908 <logf>
 8028eae:	eddf 7a09 	vldr	s15, [pc, #36]	; 8028ed4 <__ieee754_log10f+0xa0>
 8028eb2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8028eb6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8028ed8 <__ieee754_log10f+0xa4>
 8028eba:	eea8 0a27 	vfma.f32	s0, s16, s15
 8028ebe:	eddf 7a07 	vldr	s15, [pc, #28]	; 8028edc <__ieee754_log10f+0xa8>
 8028ec2:	eea8 0a27 	vfma.f32	s0, s16, s15
 8028ec6:	e7c3      	b.n	8028e50 <__ieee754_log10f+0x1c>
 8028ec8:	cc000000 	.word	0xcc000000
 8028ecc:	00000000 	.word	0x00000000
 8028ed0:	4c000000 	.word	0x4c000000
 8028ed4:	3ede5bd9 	.word	0x3ede5bd9
 8028ed8:	355427db 	.word	0x355427db
 8028edc:	3e9a2080 	.word	0x3e9a2080

08028ee0 <__ieee754_rem_pio2f>:
 8028ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028ee2:	ee10 6a10 	vmov	r6, s0
 8028ee6:	4b86      	ldr	r3, [pc, #536]	; (8029100 <__ieee754_rem_pio2f+0x220>)
 8028ee8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8028eec:	429c      	cmp	r4, r3
 8028eee:	b087      	sub	sp, #28
 8028ef0:	4605      	mov	r5, r0
 8028ef2:	dc05      	bgt.n	8028f00 <__ieee754_rem_pio2f+0x20>
 8028ef4:	2300      	movs	r3, #0
 8028ef6:	ed85 0a00 	vstr	s0, [r5]
 8028efa:	6043      	str	r3, [r0, #4]
 8028efc:	2000      	movs	r0, #0
 8028efe:	e020      	b.n	8028f42 <__ieee754_rem_pio2f+0x62>
 8028f00:	4b80      	ldr	r3, [pc, #512]	; (8029104 <__ieee754_rem_pio2f+0x224>)
 8028f02:	429c      	cmp	r4, r3
 8028f04:	dc38      	bgt.n	8028f78 <__ieee754_rem_pio2f+0x98>
 8028f06:	2e00      	cmp	r6, #0
 8028f08:	f024 040f 	bic.w	r4, r4, #15
 8028f0c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8029108 <__ieee754_rem_pio2f+0x228>
 8028f10:	4b7e      	ldr	r3, [pc, #504]	; (802910c <__ieee754_rem_pio2f+0x22c>)
 8028f12:	dd18      	ble.n	8028f46 <__ieee754_rem_pio2f+0x66>
 8028f14:	429c      	cmp	r4, r3
 8028f16:	ee70 7a47 	vsub.f32	s15, s0, s14
 8028f1a:	bf09      	itett	eq
 8028f1c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8029110 <__ieee754_rem_pio2f+0x230>
 8028f20:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8029114 <__ieee754_rem_pio2f+0x234>
 8028f24:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8028f28:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8029118 <__ieee754_rem_pio2f+0x238>
 8028f2c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8028f30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8028f34:	edc0 6a00 	vstr	s13, [r0]
 8028f38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028f3c:	edc0 7a01 	vstr	s15, [r0, #4]
 8028f40:	2001      	movs	r0, #1
 8028f42:	b007      	add	sp, #28
 8028f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028f46:	429c      	cmp	r4, r3
 8028f48:	ee70 7a07 	vadd.f32	s15, s0, s14
 8028f4c:	bf09      	itett	eq
 8028f4e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8029110 <__ieee754_rem_pio2f+0x230>
 8028f52:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8029114 <__ieee754_rem_pio2f+0x234>
 8028f56:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8028f5a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8029118 <__ieee754_rem_pio2f+0x238>
 8028f5e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8028f62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8028f66:	edc0 6a00 	vstr	s13, [r0]
 8028f6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028f6e:	edc0 7a01 	vstr	s15, [r0, #4]
 8028f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8028f76:	e7e4      	b.n	8028f42 <__ieee754_rem_pio2f+0x62>
 8028f78:	4b68      	ldr	r3, [pc, #416]	; (802911c <__ieee754_rem_pio2f+0x23c>)
 8028f7a:	429c      	cmp	r4, r3
 8028f7c:	dc71      	bgt.n	8029062 <__ieee754_rem_pio2f+0x182>
 8028f7e:	f7fe fcbb 	bl	80278f8 <fabsf>
 8028f82:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8029120 <__ieee754_rem_pio2f+0x240>
 8028f86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8028f8a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8028f8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028f92:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8028f96:	ee17 0a90 	vmov	r0, s15
 8028f9a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8029108 <__ieee754_rem_pio2f+0x228>
 8028f9e:	eeb1 7a46 	vneg.f32	s14, s12
 8028fa2:	eea7 0a27 	vfma.f32	s0, s14, s15
 8028fa6:	281f      	cmp	r0, #31
 8028fa8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8029114 <__ieee754_rem_pio2f+0x234>
 8028fac:	ee66 7a27 	vmul.f32	s15, s12, s15
 8028fb0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8028fb4:	ee16 3a90 	vmov	r3, s13
 8028fb8:	dc1c      	bgt.n	8028ff4 <__ieee754_rem_pio2f+0x114>
 8028fba:	1e47      	subs	r7, r0, #1
 8028fbc:	4959      	ldr	r1, [pc, #356]	; (8029124 <__ieee754_rem_pio2f+0x244>)
 8028fbe:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8028fc2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8028fc6:	428a      	cmp	r2, r1
 8028fc8:	d014      	beq.n	8028ff4 <__ieee754_rem_pio2f+0x114>
 8028fca:	602b      	str	r3, [r5, #0]
 8028fcc:	ed95 7a00 	vldr	s14, [r5]
 8028fd0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8028fd4:	2e00      	cmp	r6, #0
 8028fd6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8028fda:	ed85 0a01 	vstr	s0, [r5, #4]
 8028fde:	dab0      	bge.n	8028f42 <__ieee754_rem_pio2f+0x62>
 8028fe0:	eeb1 7a47 	vneg.f32	s14, s14
 8028fe4:	eeb1 0a40 	vneg.f32	s0, s0
 8028fe8:	ed85 7a00 	vstr	s14, [r5]
 8028fec:	ed85 0a01 	vstr	s0, [r5, #4]
 8028ff0:	4240      	negs	r0, r0
 8028ff2:	e7a6      	b.n	8028f42 <__ieee754_rem_pio2f+0x62>
 8028ff4:	15e4      	asrs	r4, r4, #23
 8028ff6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8028ffa:	1aa2      	subs	r2, r4, r2
 8028ffc:	2a08      	cmp	r2, #8
 8028ffe:	dde4      	ble.n	8028fca <__ieee754_rem_pio2f+0xea>
 8029000:	eddf 7a43 	vldr	s15, [pc, #268]	; 8029110 <__ieee754_rem_pio2f+0x230>
 8029004:	eef0 6a40 	vmov.f32	s13, s0
 8029008:	eee7 6a27 	vfma.f32	s13, s14, s15
 802900c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8029010:	eea7 0a27 	vfma.f32	s0, s14, s15
 8029014:	eddf 7a40 	vldr	s15, [pc, #256]	; 8029118 <__ieee754_rem_pio2f+0x238>
 8029018:	ee96 0a27 	vfnms.f32	s0, s12, s15
 802901c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8029020:	eef0 7a40 	vmov.f32	s15, s0
 8029024:	ee15 3a90 	vmov	r3, s11
 8029028:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802902c:	1aa4      	subs	r4, r4, r2
 802902e:	2c19      	cmp	r4, #25
 8029030:	dc04      	bgt.n	802903c <__ieee754_rem_pio2f+0x15c>
 8029032:	edc5 5a00 	vstr	s11, [r5]
 8029036:	eeb0 0a66 	vmov.f32	s0, s13
 802903a:	e7c7      	b.n	8028fcc <__ieee754_rem_pio2f+0xec>
 802903c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8029128 <__ieee754_rem_pio2f+0x248>
 8029040:	eeb0 0a66 	vmov.f32	s0, s13
 8029044:	eea7 0a25 	vfma.f32	s0, s14, s11
 8029048:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802904c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8029050:	ed9f 7a36 	vldr	s14, [pc, #216]	; 802912c <__ieee754_rem_pio2f+0x24c>
 8029054:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8029058:	ee30 7a67 	vsub.f32	s14, s0, s15
 802905c:	ed85 7a00 	vstr	s14, [r5]
 8029060:	e7b4      	b.n	8028fcc <__ieee754_rem_pio2f+0xec>
 8029062:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8029066:	db06      	blt.n	8029076 <__ieee754_rem_pio2f+0x196>
 8029068:	ee70 7a40 	vsub.f32	s15, s0, s0
 802906c:	edc0 7a01 	vstr	s15, [r0, #4]
 8029070:	edc0 7a00 	vstr	s15, [r0]
 8029074:	e742      	b.n	8028efc <__ieee754_rem_pio2f+0x1c>
 8029076:	15e2      	asrs	r2, r4, #23
 8029078:	3a86      	subs	r2, #134	; 0x86
 802907a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 802907e:	ee07 3a90 	vmov	s15, r3
 8029082:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8029086:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8029130 <__ieee754_rem_pio2f+0x250>
 802908a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802908e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029092:	ed8d 7a03 	vstr	s14, [sp, #12]
 8029096:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802909a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802909e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80290a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80290a6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80290aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80290ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80290b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80290b6:	edcd 7a05 	vstr	s15, [sp, #20]
 80290ba:	d11e      	bne.n	80290fa <__ieee754_rem_pio2f+0x21a>
 80290bc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80290c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80290c4:	bf0c      	ite	eq
 80290c6:	2301      	moveq	r3, #1
 80290c8:	2302      	movne	r3, #2
 80290ca:	491a      	ldr	r1, [pc, #104]	; (8029134 <__ieee754_rem_pio2f+0x254>)
 80290cc:	9101      	str	r1, [sp, #4]
 80290ce:	2102      	movs	r1, #2
 80290d0:	9100      	str	r1, [sp, #0]
 80290d2:	a803      	add	r0, sp, #12
 80290d4:	4629      	mov	r1, r5
 80290d6:	f000 f8fb 	bl	80292d0 <__kernel_rem_pio2f>
 80290da:	2e00      	cmp	r6, #0
 80290dc:	f6bf af31 	bge.w	8028f42 <__ieee754_rem_pio2f+0x62>
 80290e0:	edd5 7a00 	vldr	s15, [r5]
 80290e4:	eef1 7a67 	vneg.f32	s15, s15
 80290e8:	edc5 7a00 	vstr	s15, [r5]
 80290ec:	edd5 7a01 	vldr	s15, [r5, #4]
 80290f0:	eef1 7a67 	vneg.f32	s15, s15
 80290f4:	edc5 7a01 	vstr	s15, [r5, #4]
 80290f8:	e77a      	b.n	8028ff0 <__ieee754_rem_pio2f+0x110>
 80290fa:	2303      	movs	r3, #3
 80290fc:	e7e5      	b.n	80290ca <__ieee754_rem_pio2f+0x1ea>
 80290fe:	bf00      	nop
 8029100:	3f490fd8 	.word	0x3f490fd8
 8029104:	4016cbe3 	.word	0x4016cbe3
 8029108:	3fc90f80 	.word	0x3fc90f80
 802910c:	3fc90fd0 	.word	0x3fc90fd0
 8029110:	37354400 	.word	0x37354400
 8029114:	37354443 	.word	0x37354443
 8029118:	2e85a308 	.word	0x2e85a308
 802911c:	43490f80 	.word	0x43490f80
 8029120:	3f22f984 	.word	0x3f22f984
 8029124:	0804c700 	.word	0x0804c700
 8029128:	2e85a300 	.word	0x2e85a300
 802912c:	248d3132 	.word	0x248d3132
 8029130:	43800000 	.word	0x43800000
 8029134:	0804c780 	.word	0x0804c780

08029138 <__ieee754_sinhf>:
 8029138:	b510      	push	{r4, lr}
 802913a:	ee10 3a10 	vmov	r3, s0
 802913e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8029142:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8029146:	ed2d 8b02 	vpush	{d8}
 802914a:	eef0 7a40 	vmov.f32	s15, s0
 802914e:	db06      	blt.n	802915e <__ieee754_sinhf+0x26>
 8029150:	ee70 7a00 	vadd.f32	s15, s0, s0
 8029154:	ecbd 8b02 	vpop	{d8}
 8029158:	eeb0 0a67 	vmov.f32	s0, s15
 802915c:	bd10      	pop	{r4, pc}
 802915e:	2b00      	cmp	r3, #0
 8029160:	4b28      	ldr	r3, [pc, #160]	; (8029204 <__ieee754_sinhf+0xcc>)
 8029162:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8029166:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 802916a:	fe28 8a88 	vselge.f32	s16, s17, s16
 802916e:	429c      	cmp	r4, r3
 8029170:	dc2a      	bgt.n	80291c8 <__ieee754_sinhf+0x90>
 8029172:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 8029176:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 802917a:	da08      	bge.n	802918e <__ieee754_sinhf+0x56>
 802917c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8029208 <__ieee754_sinhf+0xd0>
 8029180:	ee30 7a07 	vadd.f32	s14, s0, s14
 8029184:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8029188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802918c:	dce2      	bgt.n	8029154 <__ieee754_sinhf+0x1c>
 802918e:	eeb0 0a67 	vmov.f32	s0, s15
 8029192:	f7fe fbb1 	bl	80278f8 <fabsf>
 8029196:	f000 fdb9 	bl	8029d0c <expm1f>
 802919a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 802919e:	bfbb      	ittet	lt
 80291a0:	ee20 7a00 	vmullt.f32	s14, s0, s0
 80291a4:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 80291a8:	ee70 8a28 	vaddge.f32	s17, s0, s17
 80291ac:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 80291b0:	bfad      	iteet	ge
 80291b2:	eec0 7a28 	vdivge.f32	s15, s0, s17
 80291b6:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 80291ba:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 80291be:	ee77 7a80 	vaddge.f32	s15, s15, s0
 80291c2:	ee67 7a88 	vmul.f32	s15, s15, s16
 80291c6:	e7c5      	b.n	8029154 <__ieee754_sinhf+0x1c>
 80291c8:	4b10      	ldr	r3, [pc, #64]	; (802920c <__ieee754_sinhf+0xd4>)
 80291ca:	429c      	cmp	r4, r3
 80291cc:	dc06      	bgt.n	80291dc <__ieee754_sinhf+0xa4>
 80291ce:	f7fe fb93 	bl	80278f8 <fabsf>
 80291d2:	f7fe fb13 	bl	80277fc <expf>
 80291d6:	ee60 7a08 	vmul.f32	s15, s0, s16
 80291da:	e7bb      	b.n	8029154 <__ieee754_sinhf+0x1c>
 80291dc:	4b0c      	ldr	r3, [pc, #48]	; (8029210 <__ieee754_sinhf+0xd8>)
 80291de:	429c      	cmp	r4, r3
 80291e0:	dc0a      	bgt.n	80291f8 <__ieee754_sinhf+0xc0>
 80291e2:	f7fe fb89 	bl	80278f8 <fabsf>
 80291e6:	ee20 0a28 	vmul.f32	s0, s0, s17
 80291ea:	f7fe fb07 	bl	80277fc <expf>
 80291ee:	ee68 7a00 	vmul.f32	s15, s16, s0
 80291f2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80291f6:	e7ad      	b.n	8029154 <__ieee754_sinhf+0x1c>
 80291f8:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8029208 <__ieee754_sinhf+0xd0>
 80291fc:	ee60 7a07 	vmul.f32	s15, s0, s14
 8029200:	e7a8      	b.n	8029154 <__ieee754_sinhf+0x1c>
 8029202:	bf00      	nop
 8029204:	41afffff 	.word	0x41afffff
 8029208:	7cf0bdc2 	.word	0x7cf0bdc2
 802920c:	42b17217 	.word	0x42b17217
 8029210:	42b2d4fc 	.word	0x42b2d4fc

08029214 <__kernel_cosf>:
 8029214:	ee10 3a10 	vmov	r3, s0
 8029218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802921c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8029220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8029224:	da05      	bge.n	8029232 <__kernel_cosf+0x1e>
 8029226:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802922a:	ee17 2a90 	vmov	r2, s15
 802922e:	2a00      	cmp	r2, #0
 8029230:	d03b      	beq.n	80292aa <__kernel_cosf+0x96>
 8029232:	ee20 6a00 	vmul.f32	s12, s0, s0
 8029236:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802923a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80292b0 <__kernel_cosf+0x9c>
 802923e:	4a1d      	ldr	r2, [pc, #116]	; (80292b4 <__kernel_cosf+0xa0>)
 8029240:	ee66 7a07 	vmul.f32	s15, s12, s14
 8029244:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80292b8 <__kernel_cosf+0xa4>
 8029248:	eea6 7a25 	vfma.f32	s14, s12, s11
 802924c:	4293      	cmp	r3, r2
 802924e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80292bc <__kernel_cosf+0xa8>
 8029252:	eee7 5a06 	vfma.f32	s11, s14, s12
 8029256:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80292c0 <__kernel_cosf+0xac>
 802925a:	eea5 7a86 	vfma.f32	s14, s11, s12
 802925e:	eddf 5a19 	vldr	s11, [pc, #100]	; 80292c4 <__kernel_cosf+0xb0>
 8029262:	eee7 5a06 	vfma.f32	s11, s14, s12
 8029266:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80292c8 <__kernel_cosf+0xb4>
 802926a:	eea5 7a86 	vfma.f32	s14, s11, s12
 802926e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8029272:	ee27 7a06 	vmul.f32	s14, s14, s12
 8029276:	eee6 0a07 	vfma.f32	s1, s12, s14
 802927a:	dc04      	bgt.n	8029286 <__kernel_cosf+0x72>
 802927c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8029280:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8029284:	4770      	bx	lr
 8029286:	4a11      	ldr	r2, [pc, #68]	; (80292cc <__kernel_cosf+0xb8>)
 8029288:	4293      	cmp	r3, r2
 802928a:	bfda      	itte	le
 802928c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8029290:	ee07 3a10 	vmovle	s14, r3
 8029294:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8029298:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802929c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80292a0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80292a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80292a8:	4770      	bx	lr
 80292aa:	eeb0 0a66 	vmov.f32	s0, s13
 80292ae:	4770      	bx	lr
 80292b0:	ad47d74e 	.word	0xad47d74e
 80292b4:	3e999999 	.word	0x3e999999
 80292b8:	310f74f6 	.word	0x310f74f6
 80292bc:	b493f27c 	.word	0xb493f27c
 80292c0:	37d00d01 	.word	0x37d00d01
 80292c4:	bab60b61 	.word	0xbab60b61
 80292c8:	3d2aaaab 	.word	0x3d2aaaab
 80292cc:	3f480000 	.word	0x3f480000

080292d0 <__kernel_rem_pio2f>:
 80292d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80292d4:	ed2d 8b04 	vpush	{d8-d9}
 80292d8:	b0d7      	sub	sp, #348	; 0x15c
 80292da:	469b      	mov	fp, r3
 80292dc:	460e      	mov	r6, r1
 80292de:	4bbe      	ldr	r3, [pc, #760]	; (80295d8 <__kernel_rem_pio2f+0x308>)
 80292e0:	9964      	ldr	r1, [sp, #400]	; 0x190
 80292e2:	9002      	str	r0, [sp, #8]
 80292e4:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80292e8:	9865      	ldr	r0, [sp, #404]	; 0x194
 80292ea:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80295e8 <__kernel_rem_pio2f+0x318>
 80292ee:	1ed1      	subs	r1, r2, #3
 80292f0:	2308      	movs	r3, #8
 80292f2:	fb91 f1f3 	sdiv	r1, r1, r3
 80292f6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80292fa:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 80292fe:	1c4c      	adds	r4, r1, #1
 8029300:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8029304:	eba1 050a 	sub.w	r5, r1, sl
 8029308:	aa1a      	add	r2, sp, #104	; 0x68
 802930a:	eb09 070a 	add.w	r7, r9, sl
 802930e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8029312:	4696      	mov	lr, r2
 8029314:	2300      	movs	r3, #0
 8029316:	42bb      	cmp	r3, r7
 8029318:	dd0f      	ble.n	802933a <__kernel_rem_pio2f+0x6a>
 802931a:	af42      	add	r7, sp, #264	; 0x108
 802931c:	2200      	movs	r2, #0
 802931e:	454a      	cmp	r2, r9
 8029320:	dc27      	bgt.n	8029372 <__kernel_rem_pio2f+0xa2>
 8029322:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8029326:	eb0b 0302 	add.w	r3, fp, r2
 802932a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 802932e:	9d02      	ldr	r5, [sp, #8]
 8029330:	eddf 7aad 	vldr	s15, [pc, #692]	; 80295e8 <__kernel_rem_pio2f+0x318>
 8029334:	f04f 0c00 	mov.w	ip, #0
 8029338:	e015      	b.n	8029366 <__kernel_rem_pio2f+0x96>
 802933a:	42dd      	cmn	r5, r3
 802933c:	bf5d      	ittte	pl
 802933e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8029342:	ee07 2a90 	vmovpl	s15, r2
 8029346:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802934a:	eef0 7a47 	vmovmi.f32	s15, s14
 802934e:	ecee 7a01 	vstmia	lr!, {s15}
 8029352:	3301      	adds	r3, #1
 8029354:	e7df      	b.n	8029316 <__kernel_rem_pio2f+0x46>
 8029356:	ecf5 6a01 	vldmia	r5!, {s13}
 802935a:	ed33 7a01 	vldmdb	r3!, {s14}
 802935e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8029362:	f10c 0c01 	add.w	ip, ip, #1
 8029366:	45d4      	cmp	ip, sl
 8029368:	ddf5      	ble.n	8029356 <__kernel_rem_pio2f+0x86>
 802936a:	ece7 7a01 	vstmia	r7!, {s15}
 802936e:	3201      	adds	r2, #1
 8029370:	e7d5      	b.n	802931e <__kernel_rem_pio2f+0x4e>
 8029372:	ab06      	add	r3, sp, #24
 8029374:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8029378:	9304      	str	r3, [sp, #16]
 802937a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80295e4 <__kernel_rem_pio2f+0x314>
 802937e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80295e0 <__kernel_rem_pio2f+0x310>
 8029382:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8029386:	9303      	str	r3, [sp, #12]
 8029388:	464d      	mov	r5, r9
 802938a:	ab56      	add	r3, sp, #344	; 0x158
 802938c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8029390:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8029394:	3f01      	subs	r7, #1
 8029396:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 802939a:	00bf      	lsls	r7, r7, #2
 802939c:	ab56      	add	r3, sp, #344	; 0x158
 802939e:	19da      	adds	r2, r3, r7
 80293a0:	3a4c      	subs	r2, #76	; 0x4c
 80293a2:	2300      	movs	r3, #0
 80293a4:	1ae9      	subs	r1, r5, r3
 80293a6:	2900      	cmp	r1, #0
 80293a8:	dc4c      	bgt.n	8029444 <__kernel_rem_pio2f+0x174>
 80293aa:	4620      	mov	r0, r4
 80293ac:	f000 fe24 	bl	8029ff8 <scalbnf>
 80293b0:	eeb0 8a40 	vmov.f32	s16, s0
 80293b4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80293b8:	ee28 0a00 	vmul.f32	s0, s16, s0
 80293bc:	f000 fdda 	bl	8029f74 <floorf>
 80293c0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80293c4:	eea0 8a67 	vfms.f32	s16, s0, s15
 80293c8:	2c00      	cmp	r4, #0
 80293ca:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80293ce:	edcd 7a01 	vstr	s15, [sp, #4]
 80293d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80293d6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80293da:	dd48      	ble.n	802946e <__kernel_rem_pio2f+0x19e>
 80293dc:	1e69      	subs	r1, r5, #1
 80293de:	ab06      	add	r3, sp, #24
 80293e0:	f1c4 0008 	rsb	r0, r4, #8
 80293e4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80293e8:	9a01      	ldr	r2, [sp, #4]
 80293ea:	fa4c f300 	asr.w	r3, ip, r0
 80293ee:	441a      	add	r2, r3
 80293f0:	4083      	lsls	r3, r0
 80293f2:	9201      	str	r2, [sp, #4]
 80293f4:	ebac 0203 	sub.w	r2, ip, r3
 80293f8:	ab06      	add	r3, sp, #24
 80293fa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80293fe:	f1c4 0307 	rsb	r3, r4, #7
 8029402:	fa42 f803 	asr.w	r8, r2, r3
 8029406:	f1b8 0f00 	cmp.w	r8, #0
 802940a:	dd41      	ble.n	8029490 <__kernel_rem_pio2f+0x1c0>
 802940c:	9b01      	ldr	r3, [sp, #4]
 802940e:	2000      	movs	r0, #0
 8029410:	3301      	adds	r3, #1
 8029412:	9301      	str	r3, [sp, #4]
 8029414:	4601      	mov	r1, r0
 8029416:	4285      	cmp	r5, r0
 8029418:	dc6d      	bgt.n	80294f6 <__kernel_rem_pio2f+0x226>
 802941a:	2c00      	cmp	r4, #0
 802941c:	dd04      	ble.n	8029428 <__kernel_rem_pio2f+0x158>
 802941e:	2c01      	cmp	r4, #1
 8029420:	d07e      	beq.n	8029520 <__kernel_rem_pio2f+0x250>
 8029422:	2c02      	cmp	r4, #2
 8029424:	f000 8086 	beq.w	8029534 <__kernel_rem_pio2f+0x264>
 8029428:	f1b8 0f02 	cmp.w	r8, #2
 802942c:	d130      	bne.n	8029490 <__kernel_rem_pio2f+0x1c0>
 802942e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8029432:	ee30 8a48 	vsub.f32	s16, s0, s16
 8029436:	b359      	cbz	r1, 8029490 <__kernel_rem_pio2f+0x1c0>
 8029438:	4620      	mov	r0, r4
 802943a:	f000 fddd 	bl	8029ff8 <scalbnf>
 802943e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8029442:	e025      	b.n	8029490 <__kernel_rem_pio2f+0x1c0>
 8029444:	ee60 7a28 	vmul.f32	s15, s0, s17
 8029448:	a806      	add	r0, sp, #24
 802944a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802944e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8029452:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8029456:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802945a:	ee10 1a10 	vmov	r1, s0
 802945e:	ed32 0a01 	vldmdb	r2!, {s0}
 8029462:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8029466:	ee37 0a80 	vadd.f32	s0, s15, s0
 802946a:	3301      	adds	r3, #1
 802946c:	e79a      	b.n	80293a4 <__kernel_rem_pio2f+0xd4>
 802946e:	d106      	bne.n	802947e <__kernel_rem_pio2f+0x1ae>
 8029470:	1e6b      	subs	r3, r5, #1
 8029472:	aa06      	add	r2, sp, #24
 8029474:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8029478:	ea4f 2822 	mov.w	r8, r2, asr #8
 802947c:	e7c3      	b.n	8029406 <__kernel_rem_pio2f+0x136>
 802947e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8029482:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8029486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802948a:	da31      	bge.n	80294f0 <__kernel_rem_pio2f+0x220>
 802948c:	f04f 0800 	mov.w	r8, #0
 8029490:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8029494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029498:	f040 80a8 	bne.w	80295ec <__kernel_rem_pio2f+0x31c>
 802949c:	1e6b      	subs	r3, r5, #1
 802949e:	4618      	mov	r0, r3
 80294a0:	2200      	movs	r2, #0
 80294a2:	4548      	cmp	r0, r9
 80294a4:	da4d      	bge.n	8029542 <__kernel_rem_pio2f+0x272>
 80294a6:	2a00      	cmp	r2, #0
 80294a8:	f000 8087 	beq.w	80295ba <__kernel_rem_pio2f+0x2ea>
 80294ac:	aa06      	add	r2, sp, #24
 80294ae:	3c08      	subs	r4, #8
 80294b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80294b4:	2900      	cmp	r1, #0
 80294b6:	f000 808d 	beq.w	80295d4 <__kernel_rem_pio2f+0x304>
 80294ba:	4620      	mov	r0, r4
 80294bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80294c0:	9302      	str	r3, [sp, #8]
 80294c2:	f000 fd99 	bl	8029ff8 <scalbnf>
 80294c6:	9b02      	ldr	r3, [sp, #8]
 80294c8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80295e4 <__kernel_rem_pio2f+0x314>
 80294cc:	0099      	lsls	r1, r3, #2
 80294ce:	aa42      	add	r2, sp, #264	; 0x108
 80294d0:	1850      	adds	r0, r2, r1
 80294d2:	1d05      	adds	r5, r0, #4
 80294d4:	461c      	mov	r4, r3
 80294d6:	2c00      	cmp	r4, #0
 80294d8:	f280 80b8 	bge.w	802964c <__kernel_rem_pio2f+0x37c>
 80294dc:	2500      	movs	r5, #0
 80294de:	1b5c      	subs	r4, r3, r5
 80294e0:	2c00      	cmp	r4, #0
 80294e2:	f2c0 80d8 	blt.w	8029696 <__kernel_rem_pio2f+0x3c6>
 80294e6:	4f3d      	ldr	r7, [pc, #244]	; (80295dc <__kernel_rem_pio2f+0x30c>)
 80294e8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80295e8 <__kernel_rem_pio2f+0x318>
 80294ec:	2400      	movs	r4, #0
 80294ee:	e0c6      	b.n	802967e <__kernel_rem_pio2f+0x3ae>
 80294f0:	f04f 0802 	mov.w	r8, #2
 80294f4:	e78a      	b.n	802940c <__kernel_rem_pio2f+0x13c>
 80294f6:	ab06      	add	r3, sp, #24
 80294f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80294fc:	b949      	cbnz	r1, 8029512 <__kernel_rem_pio2f+0x242>
 80294fe:	b12b      	cbz	r3, 802950c <__kernel_rem_pio2f+0x23c>
 8029500:	aa06      	add	r2, sp, #24
 8029502:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8029506:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802950a:	2301      	movs	r3, #1
 802950c:	3001      	adds	r0, #1
 802950e:	4619      	mov	r1, r3
 8029510:	e781      	b.n	8029416 <__kernel_rem_pio2f+0x146>
 8029512:	aa06      	add	r2, sp, #24
 8029514:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8029518:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802951c:	460b      	mov	r3, r1
 802951e:	e7f5      	b.n	802950c <__kernel_rem_pio2f+0x23c>
 8029520:	1e68      	subs	r0, r5, #1
 8029522:	ab06      	add	r3, sp, #24
 8029524:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8029528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802952c:	aa06      	add	r2, sp, #24
 802952e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8029532:	e779      	b.n	8029428 <__kernel_rem_pio2f+0x158>
 8029534:	1e68      	subs	r0, r5, #1
 8029536:	ab06      	add	r3, sp, #24
 8029538:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802953c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8029540:	e7f4      	b.n	802952c <__kernel_rem_pio2f+0x25c>
 8029542:	a906      	add	r1, sp, #24
 8029544:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8029548:	3801      	subs	r0, #1
 802954a:	430a      	orrs	r2, r1
 802954c:	e7a9      	b.n	80294a2 <__kernel_rem_pio2f+0x1d2>
 802954e:	f10c 0c01 	add.w	ip, ip, #1
 8029552:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8029556:	2a00      	cmp	r2, #0
 8029558:	d0f9      	beq.n	802954e <__kernel_rem_pio2f+0x27e>
 802955a:	eb0b 0305 	add.w	r3, fp, r5
 802955e:	aa1a      	add	r2, sp, #104	; 0x68
 8029560:	009b      	lsls	r3, r3, #2
 8029562:	1898      	adds	r0, r3, r2
 8029564:	3004      	adds	r0, #4
 8029566:	1c69      	adds	r1, r5, #1
 8029568:	3704      	adds	r7, #4
 802956a:	2200      	movs	r2, #0
 802956c:	4465      	add	r5, ip
 802956e:	9005      	str	r0, [sp, #20]
 8029570:	428d      	cmp	r5, r1
 8029572:	f6ff af0a 	blt.w	802938a <__kernel_rem_pio2f+0xba>
 8029576:	a81a      	add	r0, sp, #104	; 0x68
 8029578:	eb02 0c03 	add.w	ip, r2, r3
 802957c:	4484      	add	ip, r0
 802957e:	9803      	ldr	r0, [sp, #12]
 8029580:	f8dd e008 	ldr.w	lr, [sp, #8]
 8029584:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8029588:	9001      	str	r0, [sp, #4]
 802958a:	ee07 0a90 	vmov	s15, r0
 802958e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8029592:	9805      	ldr	r0, [sp, #20]
 8029594:	edcc 7a00 	vstr	s15, [ip]
 8029598:	eddf 7a13 	vldr	s15, [pc, #76]	; 80295e8 <__kernel_rem_pio2f+0x318>
 802959c:	eb00 0802 	add.w	r8, r0, r2
 80295a0:	f04f 0c00 	mov.w	ip, #0
 80295a4:	45d4      	cmp	ip, sl
 80295a6:	dd0c      	ble.n	80295c2 <__kernel_rem_pio2f+0x2f2>
 80295a8:	eb02 0c07 	add.w	ip, r2, r7
 80295ac:	a842      	add	r0, sp, #264	; 0x108
 80295ae:	4484      	add	ip, r0
 80295b0:	edcc 7a01 	vstr	s15, [ip, #4]
 80295b4:	3101      	adds	r1, #1
 80295b6:	3204      	adds	r2, #4
 80295b8:	e7da      	b.n	8029570 <__kernel_rem_pio2f+0x2a0>
 80295ba:	9b04      	ldr	r3, [sp, #16]
 80295bc:	f04f 0c01 	mov.w	ip, #1
 80295c0:	e7c7      	b.n	8029552 <__kernel_rem_pio2f+0x282>
 80295c2:	ecfe 6a01 	vldmia	lr!, {s13}
 80295c6:	ed38 7a01 	vldmdb	r8!, {s14}
 80295ca:	f10c 0c01 	add.w	ip, ip, #1
 80295ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 80295d2:	e7e7      	b.n	80295a4 <__kernel_rem_pio2f+0x2d4>
 80295d4:	3b01      	subs	r3, #1
 80295d6:	e769      	b.n	80294ac <__kernel_rem_pio2f+0x1dc>
 80295d8:	0804cac4 	.word	0x0804cac4
 80295dc:	0804ca98 	.word	0x0804ca98
 80295e0:	43800000 	.word	0x43800000
 80295e4:	3b800000 	.word	0x3b800000
 80295e8:	00000000 	.word	0x00000000
 80295ec:	4260      	negs	r0, r4
 80295ee:	eeb0 0a48 	vmov.f32	s0, s16
 80295f2:	f000 fd01 	bl	8029ff8 <scalbnf>
 80295f6:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80295e0 <__kernel_rem_pio2f+0x310>
 80295fa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80295fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029602:	db1a      	blt.n	802963a <__kernel_rem_pio2f+0x36a>
 8029604:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80295e4 <__kernel_rem_pio2f+0x314>
 8029608:	ee60 7a27 	vmul.f32	s15, s0, s15
 802960c:	aa06      	add	r2, sp, #24
 802960e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8029612:	a906      	add	r1, sp, #24
 8029614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8029618:	3408      	adds	r4, #8
 802961a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802961e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8029622:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8029626:	ee10 3a10 	vmov	r3, s0
 802962a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802962e:	1c6b      	adds	r3, r5, #1
 8029630:	ee17 2a90 	vmov	r2, s15
 8029634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8029638:	e73f      	b.n	80294ba <__kernel_rem_pio2f+0x1ea>
 802963a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802963e:	aa06      	add	r2, sp, #24
 8029640:	ee10 3a10 	vmov	r3, s0
 8029644:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8029648:	462b      	mov	r3, r5
 802964a:	e736      	b.n	80294ba <__kernel_rem_pio2f+0x1ea>
 802964c:	aa06      	add	r2, sp, #24
 802964e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8029652:	9202      	str	r2, [sp, #8]
 8029654:	ee07 2a90 	vmov	s15, r2
 8029658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802965c:	3c01      	subs	r4, #1
 802965e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8029662:	ee20 0a07 	vmul.f32	s0, s0, s14
 8029666:	ed65 7a01 	vstmdb	r5!, {s15}
 802966a:	e734      	b.n	80294d6 <__kernel_rem_pio2f+0x206>
 802966c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8029670:	ecf7 6a01 	vldmia	r7!, {s13}
 8029674:	ed9c 7a00 	vldr	s14, [ip]
 8029678:	eee6 7a87 	vfma.f32	s15, s13, s14
 802967c:	3401      	adds	r4, #1
 802967e:	454c      	cmp	r4, r9
 8029680:	dc01      	bgt.n	8029686 <__kernel_rem_pio2f+0x3b6>
 8029682:	42a5      	cmp	r5, r4
 8029684:	daf2      	bge.n	802966c <__kernel_rem_pio2f+0x39c>
 8029686:	aa56      	add	r2, sp, #344	; 0x158
 8029688:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 802968c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8029690:	3501      	adds	r5, #1
 8029692:	3804      	subs	r0, #4
 8029694:	e723      	b.n	80294de <__kernel_rem_pio2f+0x20e>
 8029696:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8029698:	2a03      	cmp	r2, #3
 802969a:	d84d      	bhi.n	8029738 <__kernel_rem_pio2f+0x468>
 802969c:	e8df f002 	tbb	[pc, r2]
 80296a0:	021f1f3e 	.word	0x021f1f3e
 80296a4:	aa56      	add	r2, sp, #344	; 0x158
 80296a6:	4411      	add	r1, r2
 80296a8:	399c      	subs	r1, #156	; 0x9c
 80296aa:	4608      	mov	r0, r1
 80296ac:	461c      	mov	r4, r3
 80296ae:	2c00      	cmp	r4, #0
 80296b0:	dc5f      	bgt.n	8029772 <__kernel_rem_pio2f+0x4a2>
 80296b2:	4608      	mov	r0, r1
 80296b4:	461c      	mov	r4, r3
 80296b6:	2c01      	cmp	r4, #1
 80296b8:	dc6b      	bgt.n	8029792 <__kernel_rem_pio2f+0x4c2>
 80296ba:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80295e8 <__kernel_rem_pio2f+0x318>
 80296be:	2b01      	cmp	r3, #1
 80296c0:	dc77      	bgt.n	80297b2 <__kernel_rem_pio2f+0x4e2>
 80296c2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80296c6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80296ca:	f1b8 0f00 	cmp.w	r8, #0
 80296ce:	d176      	bne.n	80297be <__kernel_rem_pio2f+0x4ee>
 80296d0:	edc6 6a00 	vstr	s13, [r6]
 80296d4:	ed86 7a01 	vstr	s14, [r6, #4]
 80296d8:	edc6 7a02 	vstr	s15, [r6, #8]
 80296dc:	e02c      	b.n	8029738 <__kernel_rem_pio2f+0x468>
 80296de:	aa56      	add	r2, sp, #344	; 0x158
 80296e0:	4411      	add	r1, r2
 80296e2:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80295e8 <__kernel_rem_pio2f+0x318>
 80296e6:	399c      	subs	r1, #156	; 0x9c
 80296e8:	4618      	mov	r0, r3
 80296ea:	2800      	cmp	r0, #0
 80296ec:	da32      	bge.n	8029754 <__kernel_rem_pio2f+0x484>
 80296ee:	f1b8 0f00 	cmp.w	r8, #0
 80296f2:	d035      	beq.n	8029760 <__kernel_rem_pio2f+0x490>
 80296f4:	eef1 7a47 	vneg.f32	s15, s14
 80296f8:	edc6 7a00 	vstr	s15, [r6]
 80296fc:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8029700:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029704:	a82f      	add	r0, sp, #188	; 0xbc
 8029706:	2101      	movs	r1, #1
 8029708:	428b      	cmp	r3, r1
 802970a:	da2c      	bge.n	8029766 <__kernel_rem_pio2f+0x496>
 802970c:	f1b8 0f00 	cmp.w	r8, #0
 8029710:	d001      	beq.n	8029716 <__kernel_rem_pio2f+0x446>
 8029712:	eef1 7a67 	vneg.f32	s15, s15
 8029716:	edc6 7a01 	vstr	s15, [r6, #4]
 802971a:	e00d      	b.n	8029738 <__kernel_rem_pio2f+0x468>
 802971c:	aa56      	add	r2, sp, #344	; 0x158
 802971e:	4411      	add	r1, r2
 8029720:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80295e8 <__kernel_rem_pio2f+0x318>
 8029724:	399c      	subs	r1, #156	; 0x9c
 8029726:	2b00      	cmp	r3, #0
 8029728:	da0e      	bge.n	8029748 <__kernel_rem_pio2f+0x478>
 802972a:	f1b8 0f00 	cmp.w	r8, #0
 802972e:	d001      	beq.n	8029734 <__kernel_rem_pio2f+0x464>
 8029730:	eef1 7a67 	vneg.f32	s15, s15
 8029734:	edc6 7a00 	vstr	s15, [r6]
 8029738:	9b01      	ldr	r3, [sp, #4]
 802973a:	f003 0007 	and.w	r0, r3, #7
 802973e:	b057      	add	sp, #348	; 0x15c
 8029740:	ecbd 8b04 	vpop	{d8-d9}
 8029744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029748:	ed31 7a01 	vldmdb	r1!, {s14}
 802974c:	3b01      	subs	r3, #1
 802974e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8029752:	e7e8      	b.n	8029726 <__kernel_rem_pio2f+0x456>
 8029754:	ed71 7a01 	vldmdb	r1!, {s15}
 8029758:	3801      	subs	r0, #1
 802975a:	ee37 7a27 	vadd.f32	s14, s14, s15
 802975e:	e7c4      	b.n	80296ea <__kernel_rem_pio2f+0x41a>
 8029760:	eef0 7a47 	vmov.f32	s15, s14
 8029764:	e7c8      	b.n	80296f8 <__kernel_rem_pio2f+0x428>
 8029766:	ecb0 7a01 	vldmia	r0!, {s14}
 802976a:	3101      	adds	r1, #1
 802976c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8029770:	e7ca      	b.n	8029708 <__kernel_rem_pio2f+0x438>
 8029772:	ed50 7a02 	vldr	s15, [r0, #-8]
 8029776:	ed70 6a01 	vldmdb	r0!, {s13}
 802977a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802977e:	3c01      	subs	r4, #1
 8029780:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029784:	ed00 7a01 	vstr	s14, [r0, #-4]
 8029788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802978c:	edc0 7a00 	vstr	s15, [r0]
 8029790:	e78d      	b.n	80296ae <__kernel_rem_pio2f+0x3de>
 8029792:	ed50 7a02 	vldr	s15, [r0, #-8]
 8029796:	ed70 6a01 	vldmdb	r0!, {s13}
 802979a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802979e:	3c01      	subs	r4, #1
 80297a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80297a4:	ed00 7a01 	vstr	s14, [r0, #-4]
 80297a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80297ac:	edc0 7a00 	vstr	s15, [r0]
 80297b0:	e781      	b.n	80296b6 <__kernel_rem_pio2f+0x3e6>
 80297b2:	ed31 7a01 	vldmdb	r1!, {s14}
 80297b6:	3b01      	subs	r3, #1
 80297b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80297bc:	e77f      	b.n	80296be <__kernel_rem_pio2f+0x3ee>
 80297be:	eef1 6a66 	vneg.f32	s13, s13
 80297c2:	eeb1 7a47 	vneg.f32	s14, s14
 80297c6:	edc6 6a00 	vstr	s13, [r6]
 80297ca:	ed86 7a01 	vstr	s14, [r6, #4]
 80297ce:	eef1 7a67 	vneg.f32	s15, s15
 80297d2:	e781      	b.n	80296d8 <__kernel_rem_pio2f+0x408>

080297d4 <__kernel_sinf>:
 80297d4:	ee10 3a10 	vmov	r3, s0
 80297d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80297dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80297e0:	da04      	bge.n	80297ec <__kernel_sinf+0x18>
 80297e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80297e6:	ee17 3a90 	vmov	r3, s15
 80297ea:	b35b      	cbz	r3, 8029844 <__kernel_sinf+0x70>
 80297ec:	ee20 7a00 	vmul.f32	s14, s0, s0
 80297f0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8029848 <__kernel_sinf+0x74>
 80297f4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802984c <__kernel_sinf+0x78>
 80297f8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80297fc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8029850 <__kernel_sinf+0x7c>
 8029800:	eee6 7a07 	vfma.f32	s15, s12, s14
 8029804:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8029854 <__kernel_sinf+0x80>
 8029808:	eea7 6a87 	vfma.f32	s12, s15, s14
 802980c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8029858 <__kernel_sinf+0x84>
 8029810:	ee60 6a07 	vmul.f32	s13, s0, s14
 8029814:	eee6 7a07 	vfma.f32	s15, s12, s14
 8029818:	b930      	cbnz	r0, 8029828 <__kernel_sinf+0x54>
 802981a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802985c <__kernel_sinf+0x88>
 802981e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8029822:	eea6 0a26 	vfma.f32	s0, s12, s13
 8029826:	4770      	bx	lr
 8029828:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802982c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8029830:	eee0 7a86 	vfma.f32	s15, s1, s12
 8029834:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8029838:	eddf 7a09 	vldr	s15, [pc, #36]	; 8029860 <__kernel_sinf+0x8c>
 802983c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8029840:	ee30 0a60 	vsub.f32	s0, s0, s1
 8029844:	4770      	bx	lr
 8029846:	bf00      	nop
 8029848:	2f2ec9d3 	.word	0x2f2ec9d3
 802984c:	b2d72f34 	.word	0xb2d72f34
 8029850:	3638ef1b 	.word	0x3638ef1b
 8029854:	b9500d01 	.word	0xb9500d01
 8029858:	3c088889 	.word	0x3c088889
 802985c:	be2aaaab 	.word	0xbe2aaaab
 8029860:	3e2aaaab 	.word	0x3e2aaaab

08029864 <__kernel_tanf>:
 8029864:	b508      	push	{r3, lr}
 8029866:	ee10 3a10 	vmov	r3, s0
 802986a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802986e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8029872:	eef0 7a40 	vmov.f32	s15, s0
 8029876:	da17      	bge.n	80298a8 <__kernel_tanf+0x44>
 8029878:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 802987c:	ee17 1a10 	vmov	r1, s14
 8029880:	bb41      	cbnz	r1, 80298d4 <__kernel_tanf+0x70>
 8029882:	1c43      	adds	r3, r0, #1
 8029884:	4313      	orrs	r3, r2
 8029886:	d108      	bne.n	802989a <__kernel_tanf+0x36>
 8029888:	f7fe f836 	bl	80278f8 <fabsf>
 802988c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029890:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029894:	eeb0 0a67 	vmov.f32	s0, s15
 8029898:	bd08      	pop	{r3, pc}
 802989a:	2801      	cmp	r0, #1
 802989c:	d0fa      	beq.n	8029894 <__kernel_tanf+0x30>
 802989e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80298a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80298a6:	e7f5      	b.n	8029894 <__kernel_tanf+0x30>
 80298a8:	494e      	ldr	r1, [pc, #312]	; (80299e4 <__kernel_tanf+0x180>)
 80298aa:	428a      	cmp	r2, r1
 80298ac:	dd12      	ble.n	80298d4 <__kernel_tanf+0x70>
 80298ae:	2b00      	cmp	r3, #0
 80298b0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80299e8 <__kernel_tanf+0x184>
 80298b4:	bfb8      	it	lt
 80298b6:	eef1 7a40 	vneglt.f32	s15, s0
 80298ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80298be:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80299ec <__kernel_tanf+0x188>
 80298c2:	bfb8      	it	lt
 80298c4:	eef1 0a60 	vneglt.f32	s1, s1
 80298c8:	ee77 0a60 	vsub.f32	s1, s14, s1
 80298cc:	ee70 7aa7 	vadd.f32	s15, s1, s15
 80298d0:	eddf 0a47 	vldr	s1, [pc, #284]	; 80299f0 <__kernel_tanf+0x18c>
 80298d4:	ed9f 6a47 	vldr	s12, [pc, #284]	; 80299f4 <__kernel_tanf+0x190>
 80298d8:	eddf 5a47 	vldr	s11, [pc, #284]	; 80299f8 <__kernel_tanf+0x194>
 80298dc:	ed9f 5a47 	vldr	s10, [pc, #284]	; 80299fc <__kernel_tanf+0x198>
 80298e0:	4940      	ldr	r1, [pc, #256]	; (80299e4 <__kernel_tanf+0x180>)
 80298e2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80298e6:	428a      	cmp	r2, r1
 80298e8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80298ec:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80298f0:	eee7 5a06 	vfma.f32	s11, s14, s12
 80298f4:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8029a00 <__kernel_tanf+0x19c>
 80298f8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80298fc:	eddf 5a41 	vldr	s11, [pc, #260]	; 8029a04 <__kernel_tanf+0x1a0>
 8029900:	eee6 5a07 	vfma.f32	s11, s12, s14
 8029904:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8029a08 <__kernel_tanf+0x1a4>
 8029908:	eea5 6a87 	vfma.f32	s12, s11, s14
 802990c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8029a0c <__kernel_tanf+0x1a8>
 8029910:	eee6 5a07 	vfma.f32	s11, s12, s14
 8029914:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8029a10 <__kernel_tanf+0x1ac>
 8029918:	eea7 6a05 	vfma.f32	s12, s14, s10
 802991c:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8029a14 <__kernel_tanf+0x1b0>
 8029920:	eea6 5a07 	vfma.f32	s10, s12, s14
 8029924:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8029a18 <__kernel_tanf+0x1b4>
 8029928:	eea5 6a07 	vfma.f32	s12, s10, s14
 802992c:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8029a1c <__kernel_tanf+0x1b8>
 8029930:	eea6 5a07 	vfma.f32	s10, s12, s14
 8029934:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8029a20 <__kernel_tanf+0x1bc>
 8029938:	eea5 6a07 	vfma.f32	s12, s10, s14
 802993c:	eeb0 7a46 	vmov.f32	s14, s12
 8029940:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8029944:	eeb0 6a60 	vmov.f32	s12, s1
 8029948:	eea7 6a24 	vfma.f32	s12, s14, s9
 802994c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8029a24 <__kernel_tanf+0x1c0>
 8029950:	eee6 0a26 	vfma.f32	s1, s12, s13
 8029954:	eee4 0a87 	vfma.f32	s1, s9, s14
 8029958:	ee77 6aa0 	vadd.f32	s13, s15, s1
 802995c:	dd1d      	ble.n	802999a <__kernel_tanf+0x136>
 802995e:	ee07 0a10 	vmov	s14, r0
 8029962:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8029966:	ee66 5aa6 	vmul.f32	s11, s13, s13
 802996a:	ee76 6a87 	vadd.f32	s13, s13, s14
 802996e:	179b      	asrs	r3, r3, #30
 8029970:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8029974:	f003 0302 	and.w	r3, r3, #2
 8029978:	f1c3 0301 	rsb	r3, r3, #1
 802997c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8029980:	ee76 0a60 	vsub.f32	s1, s12, s1
 8029984:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8029988:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802998c:	ee07 3a90 	vmov	s15, r3
 8029990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8029994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8029998:	e77c      	b.n	8029894 <__kernel_tanf+0x30>
 802999a:	2801      	cmp	r0, #1
 802999c:	d01f      	beq.n	80299de <__kernel_tanf+0x17a>
 802999e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80299a2:	eec7 5a26 	vdiv.f32	s11, s14, s13
 80299a6:	4b20      	ldr	r3, [pc, #128]	; (8029a28 <__kernel_tanf+0x1c4>)
 80299a8:	ee16 2a90 	vmov	r2, s13
 80299ac:	401a      	ands	r2, r3
 80299ae:	ee06 2a10 	vmov	s12, r2
 80299b2:	ee15 2a90 	vmov	r2, s11
 80299b6:	4013      	ands	r3, r2
 80299b8:	ee07 3a10 	vmov	s14, r3
 80299bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80299c0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80299c4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80299c8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80299cc:	eef0 7a66 	vmov.f32	s15, s13
 80299d0:	eee7 7a20 	vfma.f32	s15, s14, s1
 80299d4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80299d8:	eef0 7a47 	vmov.f32	s15, s14
 80299dc:	e75a      	b.n	8029894 <__kernel_tanf+0x30>
 80299de:	eef0 7a66 	vmov.f32	s15, s13
 80299e2:	e757      	b.n	8029894 <__kernel_tanf+0x30>
 80299e4:	3f2ca13f 	.word	0x3f2ca13f
 80299e8:	3f490fda 	.word	0x3f490fda
 80299ec:	33222168 	.word	0x33222168
 80299f0:	00000000 	.word	0x00000000
 80299f4:	37d95384 	.word	0x37d95384
 80299f8:	3895c07a 	.word	0x3895c07a
 80299fc:	b79bae5f 	.word	0xb79bae5f
 8029a00:	398137b9 	.word	0x398137b9
 8029a04:	3abede48 	.word	0x3abede48
 8029a08:	3c11371f 	.word	0x3c11371f
 8029a0c:	3d5d0dd1 	.word	0x3d5d0dd1
 8029a10:	38a3f445 	.word	0x38a3f445
 8029a14:	3a1a26c8 	.word	0x3a1a26c8
 8029a18:	3b6b6916 	.word	0x3b6b6916
 8029a1c:	3cb327a4 	.word	0x3cb327a4
 8029a20:	3e088889 	.word	0x3e088889
 8029a24:	3eaaaaab 	.word	0x3eaaaaab
 8029a28:	fffff000 	.word	0xfffff000

08029a2c <with_errnof>:
 8029a2c:	b510      	push	{r4, lr}
 8029a2e:	ed2d 8b02 	vpush	{d8}
 8029a32:	eeb0 8a40 	vmov.f32	s16, s0
 8029a36:	4604      	mov	r4, r0
 8029a38:	f7fd fd30 	bl	802749c <__errno>
 8029a3c:	eeb0 0a48 	vmov.f32	s0, s16
 8029a40:	ecbd 8b02 	vpop	{d8}
 8029a44:	6004      	str	r4, [r0, #0]
 8029a46:	bd10      	pop	{r4, pc}

08029a48 <xflowf>:
 8029a48:	b130      	cbz	r0, 8029a58 <xflowf+0x10>
 8029a4a:	eef1 7a40 	vneg.f32	s15, s0
 8029a4e:	2022      	movs	r0, #34	; 0x22
 8029a50:	ee27 0a80 	vmul.f32	s0, s15, s0
 8029a54:	f7ff bfea 	b.w	8029a2c <with_errnof>
 8029a58:	eef0 7a40 	vmov.f32	s15, s0
 8029a5c:	e7f7      	b.n	8029a4e <xflowf+0x6>
	...

08029a60 <__math_uflowf>:
 8029a60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8029a68 <__math_uflowf+0x8>
 8029a64:	f7ff bff0 	b.w	8029a48 <xflowf>
 8029a68:	10000000 	.word	0x10000000

08029a6c <__math_may_uflowf>:
 8029a6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8029a74 <__math_may_uflowf+0x8>
 8029a70:	f7ff bfea 	b.w	8029a48 <xflowf>
 8029a74:	1a200000 	.word	0x1a200000

08029a78 <__math_oflowf>:
 8029a78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8029a80 <__math_oflowf+0x8>
 8029a7c:	f7ff bfe4 	b.w	8029a48 <xflowf>
 8029a80:	70000000 	.word	0x70000000

08029a84 <__math_divzerof>:
 8029a84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8029a88:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8029a8c:	2800      	cmp	r0, #0
 8029a8e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8029a92:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8029aa0 <__math_divzerof+0x1c>
 8029a96:	2022      	movs	r0, #34	; 0x22
 8029a98:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8029a9c:	f7ff bfc6 	b.w	8029a2c <with_errnof>
 8029aa0:	00000000 	.word	0x00000000

08029aa4 <__math_invalidf>:
 8029aa4:	eef0 7a40 	vmov.f32	s15, s0
 8029aa8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8029aac:	eef4 7a67 	vcmp.f32	s15, s15
 8029ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029ab4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8029ab8:	d602      	bvs.n	8029ac0 <__math_invalidf+0x1c>
 8029aba:	2021      	movs	r0, #33	; 0x21
 8029abc:	f7ff bfb6 	b.w	8029a2c <with_errnof>
 8029ac0:	4770      	bx	lr

08029ac2 <fabs>:
 8029ac2:	ec51 0b10 	vmov	r0, r1, d0
 8029ac6:	ee10 2a10 	vmov	r2, s0
 8029aca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8029ace:	ec43 2b10 	vmov	d0, r2, r3
 8029ad2:	4770      	bx	lr

08029ad4 <finite>:
 8029ad4:	ee10 3a90 	vmov	r3, s1
 8029ad8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8029adc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8029ae0:	0fc0      	lsrs	r0, r0, #31
 8029ae2:	4770      	bx	lr

08029ae4 <matherr>:
 8029ae4:	2000      	movs	r0, #0
 8029ae6:	4770      	bx	lr

08029ae8 <nan>:
 8029ae8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8029af0 <nan+0x8>
 8029aec:	4770      	bx	lr
 8029aee:	bf00      	nop
 8029af0:	00000000 	.word	0x00000000
 8029af4:	7ff80000 	.word	0x7ff80000

08029af8 <rint>:
 8029af8:	b530      	push	{r4, r5, lr}
 8029afa:	b085      	sub	sp, #20
 8029afc:	ed8d 0b00 	vstr	d0, [sp]
 8029b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029b04:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8029b08:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 8029b0c:	2813      	cmp	r0, #19
 8029b0e:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8029b12:	dc5a      	bgt.n	8029bca <rint+0xd2>
 8029b14:	2800      	cmp	r0, #0
 8029b16:	da2f      	bge.n	8029b78 <rint+0x80>
 8029b18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8029b1c:	4311      	orrs	r1, r2
 8029b1e:	d027      	beq.n	8029b70 <rint+0x78>
 8029b20:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8029b24:	4315      	orrs	r5, r2
 8029b26:	426a      	negs	r2, r5
 8029b28:	432a      	orrs	r2, r5
 8029b2a:	0b12      	lsrs	r2, r2, #12
 8029b2c:	0c5b      	lsrs	r3, r3, #17
 8029b2e:	045b      	lsls	r3, r3, #17
 8029b30:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8029b34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8029b38:	ea42 0103 	orr.w	r1, r2, r3
 8029b3c:	4b31      	ldr	r3, [pc, #196]	; (8029c04 <rint+0x10c>)
 8029b3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8029b42:	ed93 6b00 	vldr	d6, [r3]
 8029b46:	ec41 0b17 	vmov	d7, r0, r1
 8029b4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8029b4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8029b52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029b56:	ee37 7b46 	vsub.f64	d7, d7, d6
 8029b5a:	ed8d 7b00 	vstr	d7, [sp]
 8029b5e:	9b01      	ldr	r3, [sp, #4]
 8029b60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8029b64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8029b68:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8029b6c:	e9cd 0100 	strd	r0, r1, [sp]
 8029b70:	ed9d 0b00 	vldr	d0, [sp]
 8029b74:	b005      	add	sp, #20
 8029b76:	bd30      	pop	{r4, r5, pc}
 8029b78:	4923      	ldr	r1, [pc, #140]	; (8029c08 <rint+0x110>)
 8029b7a:	4101      	asrs	r1, r0
 8029b7c:	ea03 0501 	and.w	r5, r3, r1
 8029b80:	4315      	orrs	r5, r2
 8029b82:	d0f5      	beq.n	8029b70 <rint+0x78>
 8029b84:	0849      	lsrs	r1, r1, #1
 8029b86:	ea03 0501 	and.w	r5, r3, r1
 8029b8a:	432a      	orrs	r2, r5
 8029b8c:	d00b      	beq.n	8029ba6 <rint+0xae>
 8029b8e:	ea23 0101 	bic.w	r1, r3, r1
 8029b92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8029b96:	2813      	cmp	r0, #19
 8029b98:	fa43 f300 	asr.w	r3, r3, r0
 8029b9c:	bf0c      	ite	eq
 8029b9e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8029ba2:	2200      	movne	r2, #0
 8029ba4:	430b      	orrs	r3, r1
 8029ba6:	4619      	mov	r1, r3
 8029ba8:	4b16      	ldr	r3, [pc, #88]	; (8029c04 <rint+0x10c>)
 8029baa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8029bae:	ed94 6b00 	vldr	d6, [r4]
 8029bb2:	4610      	mov	r0, r2
 8029bb4:	ec41 0b17 	vmov	d7, r0, r1
 8029bb8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8029bbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8029bc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029bc4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8029bc8:	e008      	b.n	8029bdc <rint+0xe4>
 8029bca:	2833      	cmp	r0, #51	; 0x33
 8029bcc:	dd09      	ble.n	8029be2 <rint+0xea>
 8029bce:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8029bd2:	d1cd      	bne.n	8029b70 <rint+0x78>
 8029bd4:	ed9d 7b00 	vldr	d7, [sp]
 8029bd8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8029bdc:	ed8d 7b00 	vstr	d7, [sp]
 8029be0:	e7c6      	b.n	8029b70 <rint+0x78>
 8029be2:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 8029be6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8029bea:	40c1      	lsrs	r1, r0
 8029bec:	420a      	tst	r2, r1
 8029bee:	d0bf      	beq.n	8029b70 <rint+0x78>
 8029bf0:	0849      	lsrs	r1, r1, #1
 8029bf2:	420a      	tst	r2, r1
 8029bf4:	bf1f      	itttt	ne
 8029bf6:	ea22 0101 	bicne.w	r1, r2, r1
 8029bfa:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8029bfe:	4102      	asrne	r2, r0
 8029c00:	430a      	orrne	r2, r1
 8029c02:	e7d0      	b.n	8029ba6 <rint+0xae>
 8029c04:	0804cad0 	.word	0x0804cad0
 8029c08:	000fffff 	.word	0x000fffff
 8029c0c:	00000000 	.word	0x00000000

08029c10 <scalbn>:
 8029c10:	b500      	push	{lr}
 8029c12:	ed2d 8b02 	vpush	{d8}
 8029c16:	b083      	sub	sp, #12
 8029c18:	ed8d 0b00 	vstr	d0, [sp]
 8029c1c:	9b01      	ldr	r3, [sp, #4]
 8029c1e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8029c22:	b9a2      	cbnz	r2, 8029c4e <scalbn+0x3e>
 8029c24:	9a00      	ldr	r2, [sp, #0]
 8029c26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8029c2a:	4313      	orrs	r3, r2
 8029c2c:	d03a      	beq.n	8029ca4 <scalbn+0x94>
 8029c2e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8029ce8 <scalbn+0xd8>
 8029c32:	4b35      	ldr	r3, [pc, #212]	; (8029d08 <scalbn+0xf8>)
 8029c34:	ee20 7b07 	vmul.f64	d7, d0, d7
 8029c38:	4298      	cmp	r0, r3
 8029c3a:	ed8d 7b00 	vstr	d7, [sp]
 8029c3e:	da11      	bge.n	8029c64 <scalbn+0x54>
 8029c40:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8029cf0 <scalbn+0xe0>
 8029c44:	ed9d 6b00 	vldr	d6, [sp]
 8029c48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029c4c:	e007      	b.n	8029c5e <scalbn+0x4e>
 8029c4e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8029c52:	428a      	cmp	r2, r1
 8029c54:	d10a      	bne.n	8029c6c <scalbn+0x5c>
 8029c56:	ed9d 7b00 	vldr	d7, [sp]
 8029c5a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8029c5e:	ed8d 7b00 	vstr	d7, [sp]
 8029c62:	e01f      	b.n	8029ca4 <scalbn+0x94>
 8029c64:	9b01      	ldr	r3, [sp, #4]
 8029c66:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8029c6a:	3a36      	subs	r2, #54	; 0x36
 8029c6c:	4402      	add	r2, r0
 8029c6e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8029c72:	428a      	cmp	r2, r1
 8029c74:	dd0a      	ble.n	8029c8c <scalbn+0x7c>
 8029c76:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8029cf8 <scalbn+0xe8>
 8029c7a:	eeb0 0b48 	vmov.f64	d0, d8
 8029c7e:	ed9d 1b00 	vldr	d1, [sp]
 8029c82:	f000 fa19 	bl	802a0b8 <copysign>
 8029c86:	ee20 7b08 	vmul.f64	d7, d0, d8
 8029c8a:	e7e8      	b.n	8029c5e <scalbn+0x4e>
 8029c8c:	2a00      	cmp	r2, #0
 8029c8e:	dd10      	ble.n	8029cb2 <scalbn+0xa2>
 8029c90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8029c94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8029c98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8029c9c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8029ca0:	e9cd 0100 	strd	r0, r1, [sp]
 8029ca4:	ed9d 0b00 	vldr	d0, [sp]
 8029ca8:	b003      	add	sp, #12
 8029caa:	ecbd 8b02 	vpop	{d8}
 8029cae:	f85d fb04 	ldr.w	pc, [sp], #4
 8029cb2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8029cb6:	da06      	bge.n	8029cc6 <scalbn+0xb6>
 8029cb8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8029cbc:	4298      	cmp	r0, r3
 8029cbe:	dcda      	bgt.n	8029c76 <scalbn+0x66>
 8029cc0:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8029cf0 <scalbn+0xe0>
 8029cc4:	e7d9      	b.n	8029c7a <scalbn+0x6a>
 8029cc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8029cca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8029cce:	3236      	adds	r2, #54	; 0x36
 8029cd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8029cd4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8029cd8:	ec41 0b17 	vmov	d7, r0, r1
 8029cdc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8029d00 <scalbn+0xf0>
 8029ce0:	e7b2      	b.n	8029c48 <scalbn+0x38>
 8029ce2:	bf00      	nop
 8029ce4:	f3af 8000 	nop.w
 8029ce8:	00000000 	.word	0x00000000
 8029cec:	43500000 	.word	0x43500000
 8029cf0:	c2f8f359 	.word	0xc2f8f359
 8029cf4:	01a56e1f 	.word	0x01a56e1f
 8029cf8:	8800759c 	.word	0x8800759c
 8029cfc:	7e37e43c 	.word	0x7e37e43c
 8029d00:	00000000 	.word	0x00000000
 8029d04:	3c900000 	.word	0x3c900000
 8029d08:	ffff3cb0 	.word	0xffff3cb0

08029d0c <expm1f>:
 8029d0c:	ee10 2a10 	vmov	r2, s0
 8029d10:	4984      	ldr	r1, [pc, #528]	; (8029f24 <expm1f+0x218>)
 8029d12:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8029d16:	428b      	cmp	r3, r1
 8029d18:	d923      	bls.n	8029d62 <expm1f+0x56>
 8029d1a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8029d1e:	d902      	bls.n	8029d26 <expm1f+0x1a>
 8029d20:	ee30 0a00 	vadd.f32	s0, s0, s0
 8029d24:	4770      	bx	lr
 8029d26:	d105      	bne.n	8029d34 <expm1f+0x28>
 8029d28:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8029d2c:	2a00      	cmp	r2, #0
 8029d2e:	fe20 0a27 	vselge.f32	s0, s0, s15
 8029d32:	4770      	bx	lr
 8029d34:	2a00      	cmp	r2, #0
 8029d36:	db08      	blt.n	8029d4a <expm1f+0x3e>
 8029d38:	4a7b      	ldr	r2, [pc, #492]	; (8029f28 <expm1f+0x21c>)
 8029d3a:	4293      	cmp	r3, r2
 8029d3c:	f240 80ea 	bls.w	8029f14 <expm1f+0x208>
 8029d40:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8029f2c <expm1f+0x220>
 8029d44:	ee20 0a00 	vmul.f32	s0, s0, s0
 8029d48:	4770      	bx	lr
 8029d4a:	eddf 7a79 	vldr	s15, [pc, #484]	; 8029f30 <expm1f+0x224>
 8029d4e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8029d52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8029d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029d5a:	d554      	bpl.n	8029e06 <expm1f+0xfa>
 8029d5c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8029d60:	4770      	bx	lr
 8029d62:	4974      	ldr	r1, [pc, #464]	; (8029f34 <expm1f+0x228>)
 8029d64:	428b      	cmp	r3, r1
 8029d66:	d96c      	bls.n	8029e42 <expm1f+0x136>
 8029d68:	4973      	ldr	r1, [pc, #460]	; (8029f38 <expm1f+0x22c>)
 8029d6a:	428b      	cmp	r3, r1
 8029d6c:	d84b      	bhi.n	8029e06 <expm1f+0xfa>
 8029d6e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8029f3c <expm1f+0x230>
 8029d72:	2a00      	cmp	r2, #0
 8029d74:	bfa7      	ittee	ge
 8029d76:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8029d7a:	eddf 7a71 	vldrge	s15, [pc, #452]	; 8029f40 <expm1f+0x234>
 8029d7e:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 8029f44 <expm1f+0x238>
 8029d82:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8029d86:	bfac      	ite	ge
 8029d88:	2301      	movge	r3, #1
 8029d8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8029d8e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8029d92:	ee37 7a40 	vsub.f32	s14, s14, s0
 8029d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8029d9a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8029d9e:	ee20 5a25 	vmul.f32	s10, s0, s11
 8029da2:	eddf 6a69 	vldr	s13, [pc, #420]	; 8029f48 <expm1f+0x23c>
 8029da6:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8029f4c <expm1f+0x240>
 8029daa:	ee20 7a05 	vmul.f32	s14, s0, s10
 8029dae:	eea7 6a26 	vfma.f32	s12, s14, s13
 8029db2:	eddf 6a67 	vldr	s13, [pc, #412]	; 8029f50 <expm1f+0x244>
 8029db6:	eee6 6a07 	vfma.f32	s13, s12, s14
 8029dba:	ed9f 6a66 	vldr	s12, [pc, #408]	; 8029f54 <expm1f+0x248>
 8029dbe:	eea6 6a87 	vfma.f32	s12, s13, s14
 8029dc2:	eddf 6a65 	vldr	s13, [pc, #404]	; 8029f58 <expm1f+0x24c>
 8029dc6:	eee6 6a07 	vfma.f32	s13, s12, s14
 8029dca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8029dce:	eef0 4a46 	vmov.f32	s9, s12
 8029dd2:	eee6 4a87 	vfma.f32	s9, s13, s14
 8029dd6:	eef0 6a64 	vmov.f32	s13, s9
 8029dda:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8029dde:	eee5 4a66 	vfms.f32	s9, s10, s13
 8029de2:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8029de6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8029dea:	eee0 6a64 	vfms.f32	s13, s0, s9
 8029dee:	eef0 4a66 	vmov.f32	s9, s13
 8029df2:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8029df6:	ee66 6a87 	vmul.f32	s13, s13, s14
 8029dfa:	bb83      	cbnz	r3, 8029e5e <expm1f+0x152>
 8029dfc:	eef0 7a47 	vmov.f32	s15, s14
 8029e00:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8029e04:	e026      	b.n	8029e54 <expm1f+0x148>
 8029e06:	eddf 7a55 	vldr	s15, [pc, #340]	; 8029f5c <expm1f+0x250>
 8029e0a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8029e0e:	ee20 7a27 	vmul.f32	s14, s0, s15
 8029e12:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8029e16:	2a00      	cmp	r2, #0
 8029e18:	fe66 7aa7 	vselge.f32	s15, s13, s15
 8029e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8029e20:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8029f3c <expm1f+0x230>
 8029e24:	eddf 6a46 	vldr	s13, [pc, #280]	; 8029f40 <expm1f+0x234>
 8029e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8029e2c:	ee17 3a90 	vmov	r3, s15
 8029e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8029e34:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8029e38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8029e3c:	eeb0 7a40 	vmov.f32	s14, s0
 8029e40:	e7a5      	b.n	8029d8e <expm1f+0x82>
 8029e42:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8029e46:	d208      	bcs.n	8029e5a <expm1f+0x14e>
 8029e48:	eddf 7a38 	vldr	s15, [pc, #224]	; 8029f2c <expm1f+0x220>
 8029e4c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8029e50:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8029e54:	ee30 0a67 	vsub.f32	s0, s0, s15
 8029e58:	4770      	bx	lr
 8029e5a:	2300      	movs	r3, #0
 8029e5c:	e79d      	b.n	8029d9a <expm1f+0x8e>
 8029e5e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8029e62:	1c5a      	adds	r2, r3, #1
 8029e64:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8029e68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029e6c:	d106      	bne.n	8029e7c <expm1f+0x170>
 8029e6e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8029e72:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8029e76:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8029e7a:	4770      	bx	lr
 8029e7c:	2b01      	cmp	r3, #1
 8029e7e:	d118      	bne.n	8029eb2 <expm1f+0x1a6>
 8029e80:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8029e84:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8029e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029e8c:	bf41      	itttt	mi
 8029e8e:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8029e92:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8029e96:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8029e9a:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8029e9e:	bf5f      	itttt	pl
 8029ea0:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8029ea4:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8029ea8:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8029eac:	eeb0 0a46 	vmovpl.f32	s0, s12
 8029eb0:	4770      	bx	lr
 8029eb2:	1c5a      	adds	r2, r3, #1
 8029eb4:	2a39      	cmp	r2, #57	; 0x39
 8029eb6:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8029eba:	d90b      	bls.n	8029ed4 <expm1f+0x1c8>
 8029ebc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8029ec0:	ee36 0a40 	vsub.f32	s0, s12, s0
 8029ec4:	ee10 3a10 	vmov	r3, s0
 8029ec8:	440b      	add	r3, r1
 8029eca:	ee00 3a10 	vmov	s0, r3
 8029ece:	ee30 0a46 	vsub.f32	s0, s0, s12
 8029ed2:	4770      	bx	lr
 8029ed4:	2b16      	cmp	r3, #22
 8029ed6:	dc11      	bgt.n	8029efc <expm1f+0x1f0>
 8029ed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8029edc:	fa42 f303 	asr.w	r3, r2, r3
 8029ee0:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8029ee4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8029ee8:	ee07 3a90 	vmov	s15, r3
 8029eec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8029ef0:	ee10 3a10 	vmov	r3, s0
 8029ef4:	440b      	add	r3, r1
 8029ef6:	ee00 3a10 	vmov	s0, r3
 8029efa:	4770      	bx	lr
 8029efc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8029f00:	05db      	lsls	r3, r3, #23
 8029f02:	ee07 3a10 	vmov	s14, r3
 8029f06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8029f0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8029f0e:	ee30 0a06 	vadd.f32	s0, s0, s12
 8029f12:	e7ed      	b.n	8029ef0 <expm1f+0x1e4>
 8029f14:	eddf 7a11 	vldr	s15, [pc, #68]	; 8029f5c <expm1f+0x250>
 8029f18:	ee20 7a27 	vmul.f32	s14, s0, s15
 8029f1c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8029f20:	e77c      	b.n	8029e1c <expm1f+0x110>
 8029f22:	bf00      	nop
 8029f24:	4195b843 	.word	0x4195b843
 8029f28:	42b17217 	.word	0x42b17217
 8029f2c:	7149f2ca 	.word	0x7149f2ca
 8029f30:	0da24260 	.word	0x0da24260
 8029f34:	3eb17218 	.word	0x3eb17218
 8029f38:	3f851591 	.word	0x3f851591
 8029f3c:	3f317180 	.word	0x3f317180
 8029f40:	3717f7d1 	.word	0x3717f7d1
 8029f44:	b717f7d1 	.word	0xb717f7d1
 8029f48:	b457edbb 	.word	0xb457edbb
 8029f4c:	36867e54 	.word	0x36867e54
 8029f50:	b8a670cd 	.word	0xb8a670cd
 8029f54:	3ad00d01 	.word	0x3ad00d01
 8029f58:	bd088889 	.word	0xbd088889
 8029f5c:	3fb8aa3b 	.word	0x3fb8aa3b

08029f60 <finitef>:
 8029f60:	ee10 3a10 	vmov	r3, s0
 8029f64:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8029f68:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8029f6c:	bfac      	ite	ge
 8029f6e:	2000      	movge	r0, #0
 8029f70:	2001      	movlt	r0, #1
 8029f72:	4770      	bx	lr

08029f74 <floorf>:
 8029f74:	ee10 3a10 	vmov	r3, s0
 8029f78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8029f7c:	0dca      	lsrs	r2, r1, #23
 8029f7e:	3a7f      	subs	r2, #127	; 0x7f
 8029f80:	2a16      	cmp	r2, #22
 8029f82:	dc2a      	bgt.n	8029fda <floorf+0x66>
 8029f84:	2a00      	cmp	r2, #0
 8029f86:	da11      	bge.n	8029fac <floorf+0x38>
 8029f88:	eddf 7a18 	vldr	s15, [pc, #96]	; 8029fec <floorf+0x78>
 8029f8c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8029f90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8029f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029f98:	dd05      	ble.n	8029fa6 <floorf+0x32>
 8029f9a:	2b00      	cmp	r3, #0
 8029f9c:	da23      	bge.n	8029fe6 <floorf+0x72>
 8029f9e:	4a14      	ldr	r2, [pc, #80]	; (8029ff0 <floorf+0x7c>)
 8029fa0:	2900      	cmp	r1, #0
 8029fa2:	bf18      	it	ne
 8029fa4:	4613      	movne	r3, r2
 8029fa6:	ee00 3a10 	vmov	s0, r3
 8029faa:	4770      	bx	lr
 8029fac:	4911      	ldr	r1, [pc, #68]	; (8029ff4 <floorf+0x80>)
 8029fae:	4111      	asrs	r1, r2
 8029fb0:	420b      	tst	r3, r1
 8029fb2:	d0fa      	beq.n	8029faa <floorf+0x36>
 8029fb4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8029fec <floorf+0x78>
 8029fb8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8029fbc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8029fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029fc4:	ddef      	ble.n	8029fa6 <floorf+0x32>
 8029fc6:	2b00      	cmp	r3, #0
 8029fc8:	bfbe      	ittt	lt
 8029fca:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8029fce:	fa40 f202 	asrlt.w	r2, r0, r2
 8029fd2:	189b      	addlt	r3, r3, r2
 8029fd4:	ea23 0301 	bic.w	r3, r3, r1
 8029fd8:	e7e5      	b.n	8029fa6 <floorf+0x32>
 8029fda:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8029fde:	d3e4      	bcc.n	8029faa <floorf+0x36>
 8029fe0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8029fe4:	4770      	bx	lr
 8029fe6:	2300      	movs	r3, #0
 8029fe8:	e7dd      	b.n	8029fa6 <floorf+0x32>
 8029fea:	bf00      	nop
 8029fec:	7149f2ca 	.word	0x7149f2ca
 8029ff0:	bf800000 	.word	0xbf800000
 8029ff4:	007fffff 	.word	0x007fffff

08029ff8 <scalbnf>:
 8029ff8:	b508      	push	{r3, lr}
 8029ffa:	ee10 2a10 	vmov	r2, s0
 8029ffe:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 802a002:	ed2d 8b02 	vpush	{d8}
 802a006:	eef0 0a40 	vmov.f32	s1, s0
 802a00a:	d004      	beq.n	802a016 <scalbnf+0x1e>
 802a00c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802a010:	d306      	bcc.n	802a020 <scalbnf+0x28>
 802a012:	ee70 0a00 	vadd.f32	s1, s0, s0
 802a016:	ecbd 8b02 	vpop	{d8}
 802a01a:	eeb0 0a60 	vmov.f32	s0, s1
 802a01e:	bd08      	pop	{r3, pc}
 802a020:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802a024:	d21c      	bcs.n	802a060 <scalbnf+0x68>
 802a026:	4b1f      	ldr	r3, [pc, #124]	; (802a0a4 <scalbnf+0xac>)
 802a028:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802a0a8 <scalbnf+0xb0>
 802a02c:	4298      	cmp	r0, r3
 802a02e:	ee60 0a27 	vmul.f32	s1, s0, s15
 802a032:	db10      	blt.n	802a056 <scalbnf+0x5e>
 802a034:	ee10 2a90 	vmov	r2, s1
 802a038:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 802a03c:	3b19      	subs	r3, #25
 802a03e:	4403      	add	r3, r0
 802a040:	2bfe      	cmp	r3, #254	; 0xfe
 802a042:	dd0f      	ble.n	802a064 <scalbnf+0x6c>
 802a044:	ed9f 8a19 	vldr	s16, [pc, #100]	; 802a0ac <scalbnf+0xb4>
 802a048:	eeb0 0a48 	vmov.f32	s0, s16
 802a04c:	f000 f843 	bl	802a0d6 <copysignf>
 802a050:	ee60 0a08 	vmul.f32	s1, s0, s16
 802a054:	e7df      	b.n	802a016 <scalbnf+0x1e>
 802a056:	eddf 7a16 	vldr	s15, [pc, #88]	; 802a0b0 <scalbnf+0xb8>
 802a05a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 802a05e:	e7da      	b.n	802a016 <scalbnf+0x1e>
 802a060:	0ddb      	lsrs	r3, r3, #23
 802a062:	e7ec      	b.n	802a03e <scalbnf+0x46>
 802a064:	2b00      	cmp	r3, #0
 802a066:	dd06      	ble.n	802a076 <scalbnf+0x7e>
 802a068:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 802a06c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 802a070:	ee00 3a90 	vmov	s1, r3
 802a074:	e7cf      	b.n	802a016 <scalbnf+0x1e>
 802a076:	f113 0f16 	cmn.w	r3, #22
 802a07a:	da06      	bge.n	802a08a <scalbnf+0x92>
 802a07c:	f24c 3350 	movw	r3, #50000	; 0xc350
 802a080:	4298      	cmp	r0, r3
 802a082:	dcdf      	bgt.n	802a044 <scalbnf+0x4c>
 802a084:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 802a0b0 <scalbnf+0xb8>
 802a088:	e7de      	b.n	802a048 <scalbnf+0x50>
 802a08a:	3319      	adds	r3, #25
 802a08c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 802a090:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 802a094:	eddf 7a07 	vldr	s15, [pc, #28]	; 802a0b4 <scalbnf+0xbc>
 802a098:	ee07 3a10 	vmov	s14, r3
 802a09c:	ee67 0a27 	vmul.f32	s1, s14, s15
 802a0a0:	e7b9      	b.n	802a016 <scalbnf+0x1e>
 802a0a2:	bf00      	nop
 802a0a4:	ffff3cb0 	.word	0xffff3cb0
 802a0a8:	4c000000 	.word	0x4c000000
 802a0ac:	7149f2ca 	.word	0x7149f2ca
 802a0b0:	0da24260 	.word	0x0da24260
 802a0b4:	33000000 	.word	0x33000000

0802a0b8 <copysign>:
 802a0b8:	ec51 0b10 	vmov	r0, r1, d0
 802a0bc:	ee11 0a90 	vmov	r0, s3
 802a0c0:	ee10 2a10 	vmov	r2, s0
 802a0c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802a0c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 802a0cc:	ea41 0300 	orr.w	r3, r1, r0
 802a0d0:	ec43 2b10 	vmov	d0, r2, r3
 802a0d4:	4770      	bx	lr

0802a0d6 <copysignf>:
 802a0d6:	ee10 3a10 	vmov	r3, s0
 802a0da:	ee10 2a90 	vmov	r2, s1
 802a0de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802a0e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 802a0e6:	4313      	orrs	r3, r2
 802a0e8:	ee00 3a10 	vmov	s0, r3
 802a0ec:	4770      	bx	lr
	...

0802a0f0 <_init>:
 802a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a0f2:	bf00      	nop
 802a0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a0f6:	bc08      	pop	{r3}
 802a0f8:	469e      	mov	lr, r3
 802a0fa:	4770      	bx	lr

0802a0fc <_fini>:
 802a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a0fe:	bf00      	nop
 802a100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a102:	bc08      	pop	{r3}
 802a104:	469e      	mov	lr, r3
 802a106:	4770      	bx	lr
