
cube_for_new_genera_brain4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000297f0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0011c878  08029a88  08029a88  00039a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08146300  08146300  001604b8  2**0
                  CONTENTS
  4 .ARM          00000008  08146300  08146300  00156300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08146308  08146308  001604b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08146308  08146308  00156308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0814630c  0814630c  0015630c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004b8  20000000  08146310  00160000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019058  200004b8  081467c8  001604b8  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  20019510  081467c8  00169510  2**0
                  ALLOC
 11 .RAM_D1       0007eb58  24000000  24000000  00170000  2**5
                  ALLOC
 12 .RAM_D2       000015e8  30000000  30000000  00170000  2**5
                  ALLOC
 13 .RAM_D3       00000201  38000000  38000000  00170000  2**5
                  ALLOC
 14 .SDRAM        02000000  60000000  60000000  00170000  2**5
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  001604b8  2**0
                  CONTENTS, READONLY
 16 .debug_info   000c8390  00000000  00000000  001604e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00010fab  00000000  00000000  00228876  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00067897  00000000  00000000  00239821  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00004478  00000000  00000000  002a10b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00010320  00000000  00000000  002a5530  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0004a3d2  00000000  00000000  002b5850  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0005353c  00000000  00000000  002ffc22  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0018c625  00000000  00000000  0035315e  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  004df783  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00010428  00000000  00000000  004df800  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200004b8 	.word	0x200004b8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08029a70 	.word	0x08029a70

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200004bc 	.word	0x200004bc
 80002d4:	08029a70 	.word	0x08029a70

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	; 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000426:	f1a4 0401 	sub.w	r4, r4, #1
 800042a:	d1e9      	bne.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <__aeabi_uldivmod>:
 8000660:	b953      	cbnz	r3, 8000678 <__aeabi_uldivmod+0x18>
 8000662:	b94a      	cbnz	r2, 8000678 <__aeabi_uldivmod+0x18>
 8000664:	2900      	cmp	r1, #0
 8000666:	bf08      	it	eq
 8000668:	2800      	cmpeq	r0, #0
 800066a:	bf1c      	itt	ne
 800066c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000670:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000674:	f000 b972 	b.w	800095c <__aeabi_idiv0>
 8000678:	f1ad 0c08 	sub.w	ip, sp, #8
 800067c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000680:	f000 f806 	bl	8000690 <__udivmoddi4>
 8000684:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800068c:	b004      	add	sp, #16
 800068e:	4770      	bx	lr

08000690 <__udivmoddi4>:
 8000690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000694:	9e08      	ldr	r6, [sp, #32]
 8000696:	4604      	mov	r4, r0
 8000698:	4688      	mov	r8, r1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d14b      	bne.n	8000736 <__udivmoddi4+0xa6>
 800069e:	428a      	cmp	r2, r1
 80006a0:	4615      	mov	r5, r2
 80006a2:	d967      	bls.n	8000774 <__udivmoddi4+0xe4>
 80006a4:	fab2 f282 	clz	r2, r2
 80006a8:	b14a      	cbz	r2, 80006be <__udivmoddi4+0x2e>
 80006aa:	f1c2 0720 	rsb	r7, r2, #32
 80006ae:	fa01 f302 	lsl.w	r3, r1, r2
 80006b2:	fa20 f707 	lsr.w	r7, r0, r7
 80006b6:	4095      	lsls	r5, r2
 80006b8:	ea47 0803 	orr.w	r8, r7, r3
 80006bc:	4094      	lsls	r4, r2
 80006be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006c2:	0c23      	lsrs	r3, r4, #16
 80006c4:	fbb8 f7fe 	udiv	r7, r8, lr
 80006c8:	fa1f fc85 	uxth.w	ip, r5
 80006cc:	fb0e 8817 	mls	r8, lr, r7, r8
 80006d0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006d4:	fb07 f10c 	mul.w	r1, r7, ip
 80006d8:	4299      	cmp	r1, r3
 80006da:	d909      	bls.n	80006f0 <__udivmoddi4+0x60>
 80006dc:	18eb      	adds	r3, r5, r3
 80006de:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80006e2:	f080 811b 	bcs.w	800091c <__udivmoddi4+0x28c>
 80006e6:	4299      	cmp	r1, r3
 80006e8:	f240 8118 	bls.w	800091c <__udivmoddi4+0x28c>
 80006ec:	3f02      	subs	r7, #2
 80006ee:	442b      	add	r3, r5
 80006f0:	1a5b      	subs	r3, r3, r1
 80006f2:	b2a4      	uxth	r4, r4
 80006f4:	fbb3 f0fe 	udiv	r0, r3, lr
 80006f8:	fb0e 3310 	mls	r3, lr, r0, r3
 80006fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000700:	fb00 fc0c 	mul.w	ip, r0, ip
 8000704:	45a4      	cmp	ip, r4
 8000706:	d909      	bls.n	800071c <__udivmoddi4+0x8c>
 8000708:	192c      	adds	r4, r5, r4
 800070a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800070e:	f080 8107 	bcs.w	8000920 <__udivmoddi4+0x290>
 8000712:	45a4      	cmp	ip, r4
 8000714:	f240 8104 	bls.w	8000920 <__udivmoddi4+0x290>
 8000718:	3802      	subs	r0, #2
 800071a:	442c      	add	r4, r5
 800071c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000720:	eba4 040c 	sub.w	r4, r4, ip
 8000724:	2700      	movs	r7, #0
 8000726:	b11e      	cbz	r6, 8000730 <__udivmoddi4+0xa0>
 8000728:	40d4      	lsrs	r4, r2
 800072a:	2300      	movs	r3, #0
 800072c:	e9c6 4300 	strd	r4, r3, [r6]
 8000730:	4639      	mov	r1, r7
 8000732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000736:	428b      	cmp	r3, r1
 8000738:	d909      	bls.n	800074e <__udivmoddi4+0xbe>
 800073a:	2e00      	cmp	r6, #0
 800073c:	f000 80eb 	beq.w	8000916 <__udivmoddi4+0x286>
 8000740:	2700      	movs	r7, #0
 8000742:	e9c6 0100 	strd	r0, r1, [r6]
 8000746:	4638      	mov	r0, r7
 8000748:	4639      	mov	r1, r7
 800074a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074e:	fab3 f783 	clz	r7, r3
 8000752:	2f00      	cmp	r7, #0
 8000754:	d147      	bne.n	80007e6 <__udivmoddi4+0x156>
 8000756:	428b      	cmp	r3, r1
 8000758:	d302      	bcc.n	8000760 <__udivmoddi4+0xd0>
 800075a:	4282      	cmp	r2, r0
 800075c:	f200 80fa 	bhi.w	8000954 <__udivmoddi4+0x2c4>
 8000760:	1a84      	subs	r4, r0, r2
 8000762:	eb61 0303 	sbc.w	r3, r1, r3
 8000766:	2001      	movs	r0, #1
 8000768:	4698      	mov	r8, r3
 800076a:	2e00      	cmp	r6, #0
 800076c:	d0e0      	beq.n	8000730 <__udivmoddi4+0xa0>
 800076e:	e9c6 4800 	strd	r4, r8, [r6]
 8000772:	e7dd      	b.n	8000730 <__udivmoddi4+0xa0>
 8000774:	b902      	cbnz	r2, 8000778 <__udivmoddi4+0xe8>
 8000776:	deff      	udf	#255	; 0xff
 8000778:	fab2 f282 	clz	r2, r2
 800077c:	2a00      	cmp	r2, #0
 800077e:	f040 808f 	bne.w	80008a0 <__udivmoddi4+0x210>
 8000782:	1b49      	subs	r1, r1, r5
 8000784:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000788:	fa1f f885 	uxth.w	r8, r5
 800078c:	2701      	movs	r7, #1
 800078e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000792:	0c23      	lsrs	r3, r4, #16
 8000794:	fb0e 111c 	mls	r1, lr, ip, r1
 8000798:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079c:	fb08 f10c 	mul.w	r1, r8, ip
 80007a0:	4299      	cmp	r1, r3
 80007a2:	d907      	bls.n	80007b4 <__udivmoddi4+0x124>
 80007a4:	18eb      	adds	r3, r5, r3
 80007a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x122>
 80007ac:	4299      	cmp	r1, r3
 80007ae:	f200 80cd 	bhi.w	800094c <__udivmoddi4+0x2bc>
 80007b2:	4684      	mov	ip, r0
 80007b4:	1a59      	subs	r1, r3, r1
 80007b6:	b2a3      	uxth	r3, r4
 80007b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80007bc:	fb0e 1410 	mls	r4, lr, r0, r1
 80007c0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007c4:	fb08 f800 	mul.w	r8, r8, r0
 80007c8:	45a0      	cmp	r8, r4
 80007ca:	d907      	bls.n	80007dc <__udivmoddi4+0x14c>
 80007cc:	192c      	adds	r4, r5, r4
 80007ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007d2:	d202      	bcs.n	80007da <__udivmoddi4+0x14a>
 80007d4:	45a0      	cmp	r8, r4
 80007d6:	f200 80b6 	bhi.w	8000946 <__udivmoddi4+0x2b6>
 80007da:	4618      	mov	r0, r3
 80007dc:	eba4 0408 	sub.w	r4, r4, r8
 80007e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007e4:	e79f      	b.n	8000726 <__udivmoddi4+0x96>
 80007e6:	f1c7 0c20 	rsb	ip, r7, #32
 80007ea:	40bb      	lsls	r3, r7
 80007ec:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007f0:	ea4e 0e03 	orr.w	lr, lr, r3
 80007f4:	fa01 f407 	lsl.w	r4, r1, r7
 80007f8:	fa20 f50c 	lsr.w	r5, r0, ip
 80007fc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000800:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000804:	4325      	orrs	r5, r4
 8000806:	fbb3 f9f8 	udiv	r9, r3, r8
 800080a:	0c2c      	lsrs	r4, r5, #16
 800080c:	fb08 3319 	mls	r3, r8, r9, r3
 8000810:	fa1f fa8e 	uxth.w	sl, lr
 8000814:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000818:	fb09 f40a 	mul.w	r4, r9, sl
 800081c:	429c      	cmp	r4, r3
 800081e:	fa02 f207 	lsl.w	r2, r2, r7
 8000822:	fa00 f107 	lsl.w	r1, r0, r7
 8000826:	d90b      	bls.n	8000840 <__udivmoddi4+0x1b0>
 8000828:	eb1e 0303 	adds.w	r3, lr, r3
 800082c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000830:	f080 8087 	bcs.w	8000942 <__udivmoddi4+0x2b2>
 8000834:	429c      	cmp	r4, r3
 8000836:	f240 8084 	bls.w	8000942 <__udivmoddi4+0x2b2>
 800083a:	f1a9 0902 	sub.w	r9, r9, #2
 800083e:	4473      	add	r3, lr
 8000840:	1b1b      	subs	r3, r3, r4
 8000842:	b2ad      	uxth	r5, r5
 8000844:	fbb3 f0f8 	udiv	r0, r3, r8
 8000848:	fb08 3310 	mls	r3, r8, r0, r3
 800084c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000850:	fb00 fa0a 	mul.w	sl, r0, sl
 8000854:	45a2      	cmp	sl, r4
 8000856:	d908      	bls.n	800086a <__udivmoddi4+0x1da>
 8000858:	eb1e 0404 	adds.w	r4, lr, r4
 800085c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000860:	d26b      	bcs.n	800093a <__udivmoddi4+0x2aa>
 8000862:	45a2      	cmp	sl, r4
 8000864:	d969      	bls.n	800093a <__udivmoddi4+0x2aa>
 8000866:	3802      	subs	r0, #2
 8000868:	4474      	add	r4, lr
 800086a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800086e:	fba0 8902 	umull	r8, r9, r0, r2
 8000872:	eba4 040a 	sub.w	r4, r4, sl
 8000876:	454c      	cmp	r4, r9
 8000878:	46c2      	mov	sl, r8
 800087a:	464b      	mov	r3, r9
 800087c:	d354      	bcc.n	8000928 <__udivmoddi4+0x298>
 800087e:	d051      	beq.n	8000924 <__udivmoddi4+0x294>
 8000880:	2e00      	cmp	r6, #0
 8000882:	d069      	beq.n	8000958 <__udivmoddi4+0x2c8>
 8000884:	ebb1 050a 	subs.w	r5, r1, sl
 8000888:	eb64 0403 	sbc.w	r4, r4, r3
 800088c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000890:	40fd      	lsrs	r5, r7
 8000892:	40fc      	lsrs	r4, r7
 8000894:	ea4c 0505 	orr.w	r5, ip, r5
 8000898:	e9c6 5400 	strd	r5, r4, [r6]
 800089c:	2700      	movs	r7, #0
 800089e:	e747      	b.n	8000730 <__udivmoddi4+0xa0>
 80008a0:	f1c2 0320 	rsb	r3, r2, #32
 80008a4:	fa20 f703 	lsr.w	r7, r0, r3
 80008a8:	4095      	lsls	r5, r2
 80008aa:	fa01 f002 	lsl.w	r0, r1, r2
 80008ae:	fa21 f303 	lsr.w	r3, r1, r3
 80008b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008b6:	4338      	orrs	r0, r7
 80008b8:	0c01      	lsrs	r1, r0, #16
 80008ba:	fbb3 f7fe 	udiv	r7, r3, lr
 80008be:	fa1f f885 	uxth.w	r8, r5
 80008c2:	fb0e 3317 	mls	r3, lr, r7, r3
 80008c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ca:	fb07 f308 	mul.w	r3, r7, r8
 80008ce:	428b      	cmp	r3, r1
 80008d0:	fa04 f402 	lsl.w	r4, r4, r2
 80008d4:	d907      	bls.n	80008e6 <__udivmoddi4+0x256>
 80008d6:	1869      	adds	r1, r5, r1
 80008d8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80008dc:	d22f      	bcs.n	800093e <__udivmoddi4+0x2ae>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d92d      	bls.n	800093e <__udivmoddi4+0x2ae>
 80008e2:	3f02      	subs	r7, #2
 80008e4:	4429      	add	r1, r5
 80008e6:	1acb      	subs	r3, r1, r3
 80008e8:	b281      	uxth	r1, r0
 80008ea:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ee:	fb0e 3310 	mls	r3, lr, r0, r3
 80008f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008f6:	fb00 f308 	mul.w	r3, r0, r8
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d907      	bls.n	800090e <__udivmoddi4+0x27e>
 80008fe:	1869      	adds	r1, r5, r1
 8000900:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000904:	d217      	bcs.n	8000936 <__udivmoddi4+0x2a6>
 8000906:	428b      	cmp	r3, r1
 8000908:	d915      	bls.n	8000936 <__udivmoddi4+0x2a6>
 800090a:	3802      	subs	r0, #2
 800090c:	4429      	add	r1, r5
 800090e:	1ac9      	subs	r1, r1, r3
 8000910:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000914:	e73b      	b.n	800078e <__udivmoddi4+0xfe>
 8000916:	4637      	mov	r7, r6
 8000918:	4630      	mov	r0, r6
 800091a:	e709      	b.n	8000730 <__udivmoddi4+0xa0>
 800091c:	4607      	mov	r7, r0
 800091e:	e6e7      	b.n	80006f0 <__udivmoddi4+0x60>
 8000920:	4618      	mov	r0, r3
 8000922:	e6fb      	b.n	800071c <__udivmoddi4+0x8c>
 8000924:	4541      	cmp	r1, r8
 8000926:	d2ab      	bcs.n	8000880 <__udivmoddi4+0x1f0>
 8000928:	ebb8 0a02 	subs.w	sl, r8, r2
 800092c:	eb69 020e 	sbc.w	r2, r9, lr
 8000930:	3801      	subs	r0, #1
 8000932:	4613      	mov	r3, r2
 8000934:	e7a4      	b.n	8000880 <__udivmoddi4+0x1f0>
 8000936:	4660      	mov	r0, ip
 8000938:	e7e9      	b.n	800090e <__udivmoddi4+0x27e>
 800093a:	4618      	mov	r0, r3
 800093c:	e795      	b.n	800086a <__udivmoddi4+0x1da>
 800093e:	4667      	mov	r7, ip
 8000940:	e7d1      	b.n	80008e6 <__udivmoddi4+0x256>
 8000942:	4681      	mov	r9, r0
 8000944:	e77c      	b.n	8000840 <__udivmoddi4+0x1b0>
 8000946:	3802      	subs	r0, #2
 8000948:	442c      	add	r4, r5
 800094a:	e747      	b.n	80007dc <__udivmoddi4+0x14c>
 800094c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000950:	442b      	add	r3, r5
 8000952:	e72f      	b.n	80007b4 <__udivmoddi4+0x124>
 8000954:	4638      	mov	r0, r7
 8000956:	e708      	b.n	800076a <__udivmoddi4+0xda>
 8000958:	4637      	mov	r7, r6
 800095a:	e6e9      	b.n	8000730 <__udivmoddi4+0xa0>

0800095c <__aeabi_idiv0>:
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000962:	4d0e      	ldr	r5, [pc, #56]	; (800099c <HAL_InitTick+0x3c>)
 8000964:	782b      	ldrb	r3, [r5, #0]
 8000966:	b90b      	cbnz	r3, 800096c <HAL_InitTick+0xc>
  {
    return HAL_ERROR;
 8000968:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800096a:	bd38      	pop	{r3, r4, r5, pc}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800096c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000970:	490b      	ldr	r1, [pc, #44]	; (80009a0 <HAL_InitTick+0x40>)
 8000972:	4604      	mov	r4, r0
 8000974:	6808      	ldr	r0, [r1, #0]
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	fbb0 f0f3 	udiv	r0, r0, r3
 800097e:	f001 fd2b 	bl	80023d8 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	2c0f      	cmp	r4, #15
 8000984:	d8f0      	bhi.n	8000968 <HAL_InitTick+0x8>
 8000986:	2800      	cmp	r0, #0
 8000988:	d1ee      	bne.n	8000968 <HAL_InitTick+0x8>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098a:	2200      	movs	r2, #0
 800098c:	4621      	mov	r1, r4
 800098e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000992:	f001 fcad 	bl	80022f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000996:	2000      	movs	r0, #0
 8000998:	606c      	str	r4, [r5, #4]
}
 800099a:	bd38      	pop	{r3, r4, r5, pc}
 800099c:	20000000 	.word	0x20000000
 80009a0:	200002c4 	.word	0x200002c4

080009a4 <HAL_Init>:
{
 80009a4:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a6:	2003      	movs	r0, #3
{
 80009a8:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009aa:	f001 fc85 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009ae:	4c12      	ldr	r4, [pc, #72]	; (80009f8 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009b0:	f007 fe9a 	bl	80086e8 <HAL_RCC_GetSysClockFreq>
 80009b4:	4a11      	ldr	r2, [pc, #68]	; (80009fc <HAL_Init+0x58>)
 80009b6:	4912      	ldr	r1, [pc, #72]	; (8000a00 <HAL_Init+0x5c>)
 80009b8:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009ba:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009bc:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 80009c0:	4d10      	ldr	r5, [pc, #64]	; (8000a04 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009c2:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009c6:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009c8:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009ca:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009ce:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009d2:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d6:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009d8:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 80009dc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009de:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e0:	f7ff ffbe 	bl	8000960 <HAL_InitTick>
 80009e4:	b110      	cbz	r0, 80009ec <HAL_Init+0x48>
    return HAL_ERROR;
 80009e6:	2001      	movs	r0, #1
}
 80009e8:	b003      	add	sp, #12
 80009ea:	bd30      	pop	{r4, r5, pc}
 80009ec:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 80009ee:	f01b f969 	bl	801bcc4 <HAL_MspInit>
  return HAL_OK;
 80009f2:	9801      	ldr	r0, [sp, #4]
}
 80009f4:	b003      	add	sp, #12
 80009f6:	bd30      	pop	{r4, r5, pc}
 80009f8:	200002c8 	.word	0x200002c8
 80009fc:	58024400 	.word	0x58024400
 8000a00:	0802ae24 	.word	0x0802ae24
 8000a04:	200002c4 	.word	0x200002c4

08000a08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000a08:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <HAL_IncTick+0x10>)
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <HAL_IncTick+0x14>)
 8000a0c:	6811      	ldr	r1, [r2, #0]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	440b      	add	r3, r1
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	200006a0 	.word	0x200006a0
 8000a1c:	20000000 	.word	0x20000000

08000a20 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a20:	4b01      	ldr	r3, [pc, #4]	; (8000a28 <HAL_GetTick+0x8>)
 8000a22:	6818      	ldr	r0, [r3, #0]
}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	200006a0 	.word	0x200006a0

08000a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a2c:	b538      	push	{r3, r4, r5, lr}
 8000a2e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a30:	f7ff fff6 	bl	8000a20 <HAL_GetTick>
 8000a34:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a36:	1c63      	adds	r3, r4, #1
 8000a38:	d002      	beq.n	8000a40 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <HAL_Delay+0x20>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a40:	f7ff ffee 	bl	8000a20 <HAL_GetTick>
 8000a44:	1b40      	subs	r0, r0, r5
 8000a46:	42a0      	cmp	r0, r4
 8000a48:	d3fa      	bcc.n	8000a40 <HAL_Delay+0x14>
  {
  }
}
 8000a4a:	bd38      	pop	{r3, r4, r5, pc}
 8000a4c:	20000000 	.word	0x20000000

08000a50 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000a50:	4b01      	ldr	r3, [pc, #4]	; (8000a58 <HAL_GetREVID+0x8>)
 8000a52:	6818      	ldr	r0, [r3, #0]
}
 8000a54:	0c00      	lsrs	r0, r0, #16
 8000a56:	4770      	bx	lr
 8000a58:	5c001000 	.word	0x5c001000

08000a5c <HAL_SetFMCMemorySwappingConfig>:
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
 8000a5c:	f030 7380 	bics.w	r3, r0, #16777216	; 0x1000000
{
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4604      	mov	r4, r0
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
 8000a64:	d002      	beq.n	8000a6c <HAL_SetFMCMemorySwappingConfig+0x10>
 8000a66:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8000a6a:	d106      	bne.n	8000a7a <HAL_SetFMCMemorySwappingConfig+0x1e>
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_SetFMCMemorySwappingConfig+0x2c>)
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8000a74:	4320      	orrs	r0, r4
 8000a76:	6018      	str	r0, [r3, #0]
}
 8000a78:	bd10      	pop	{r4, pc}
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
 8000a7a:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <HAL_SetFMCMemorySwappingConfig+0x30>)
 8000a80:	f012 ff60 	bl	8013944 <assert_failed>
 8000a84:	e7f2      	b.n	8000a6c <HAL_SetFMCMemorySwappingConfig+0x10>
 8000a86:	bf00      	nop
 8000a88:	52004000 	.word	0x52004000
 8000a8c:	08144c88 	.word	0x08144c88

08000a90 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000a94:	4b6a      	ldr	r3, [pc, #424]	; (8000c40 <HAL_ADC_Start_DMA+0x1b0>)
{
 8000a96:	460e      	mov	r6, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000a98:	6801      	ldr	r1, [r0, #0]
{
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d037      	beq.n	8000b12 <HAL_ADC_Start_DMA+0x82>
 8000aa2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	d033      	beq.n	8000b12 <HAL_ADC_Start_DMA+0x82>
 8000aaa:	4866      	ldr	r0, [pc, #408]	; (8000c44 <HAL_ADC_Start_DMA+0x1b4>)

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000aac:	4a64      	ldr	r2, [pc, #400]	; (8000c40 <HAL_ADC_Start_DMA+0x1b0>)
 8000aae:	4b66      	ldr	r3, [pc, #408]	; (8000c48 <HAL_ADC_Start_DMA+0x1b8>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ab0:	6885      	ldr	r5, [r0, #8]
 8000ab2:	4291      	cmp	r1, r2
 8000ab4:	bf18      	it	ne
 8000ab6:	4299      	cmpne	r1, r3
 8000ab8:	d002      	beq.n	8000ac0 <HAL_ADC_Start_DMA+0x30>
 8000aba:	4b64      	ldr	r3, [pc, #400]	; (8000c4c <HAL_ADC_Start_DMA+0x1bc>)
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d12a      	bne.n	8000b16 <HAL_ADC_Start_DMA+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ac0:	688b      	ldr	r3, [r1, #8]
 8000ac2:	075a      	lsls	r2, r3, #29
 8000ac4:	d430      	bmi.n	8000b28 <HAL_ADC_Start_DMA+0x98>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ac6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d02c      	beq.n	8000b28 <HAL_ADC_Start_DMA+0x98>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ace:	f005 051f 	and.w	r5, r5, #31
 8000ad2:	2301      	movs	r3, #1

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000ad4:	2d09      	cmp	r5, #9
    __HAL_LOCK(hadc);
 8000ad6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000ada:	d905      	bls.n	8000ae8 <HAL_ADC_Start_DMA+0x58>
        LL_ADC_REG_StartConversion(hadc->Instance);
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000adc:	2300      	movs	r3, #0
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = HAL_BUSY;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000ae8:	f240 2021 	movw	r0, #545	; 0x221
 8000aec:	40e8      	lsrs	r0, r5
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000aee:	07c3      	lsls	r3, r0, #31
 8000af0:	d5f4      	bpl.n	8000adc <HAL_ADC_Start_DMA+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000af2:	688b      	ldr	r3, [r1, #8]
 8000af4:	07d8      	lsls	r0, r3, #31
 8000af6:	d41a      	bmi.n	8000b2e <HAL_ADC_Start_DMA+0x9e>
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000af8:	688a      	ldr	r2, [r1, #8]
 8000afa:	4b55      	ldr	r3, [pc, #340]	; (8000c50 <HAL_ADC_Start_DMA+0x1c0>)
 8000afc:	421a      	tst	r2, r3
 8000afe:	d05b      	beq.n	8000bb8 <HAL_ADC_Start_DMA+0x128>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6563      	str	r3, [r4, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000b10:	e7e4      	b.n	8000adc <HAL_ADC_Start_DMA+0x4c>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000b12:	4850      	ldr	r0, [pc, #320]	; (8000c54 <HAL_ADC_Start_DMA+0x1c4>)
 8000b14:	e7ca      	b.n	8000aac <HAL_ADC_Start_DMA+0x1c>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000b16:	f240 71a7 	movw	r1, #1959	; 0x7a7
 8000b1a:	484f      	ldr	r0, [pc, #316]	; (8000c58 <HAL_ADC_Start_DMA+0x1c8>)
 8000b1c:	f012 ff12 	bl	8013944 <assert_failed>
 8000b20:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b22:	688b      	ldr	r3, [r1, #8]
 8000b24:	075a      	lsls	r2, r3, #29
 8000b26:	d5ce      	bpl.n	8000ac6 <HAL_ADC_Start_DMA+0x36>
    tmp_hal_status = HAL_BUSY;
 8000b28:	2002      	movs	r0, #2
}
 8000b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b2e:	4b46      	ldr	r3, [pc, #280]	; (8000c48 <HAL_ADC_Start_DMA+0x1b8>)
 8000b30:	1ac9      	subs	r1, r1, r3
 8000b32:	bf18      	it	ne
 8000b34:	2101      	movne	r1, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000b36:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000b38:	4b48      	ldr	r3, [pc, #288]	; (8000c5c <HAL_ADC_Start_DMA+0x1cc>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b40:	6563      	str	r3, [r4, #84]	; 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000b42:	b105      	cbz	r5, 8000b46 <HAL_ADC_Start_DMA+0xb6>
 8000b44:	b119      	cbz	r1, 8000b4e <HAL_ADC_Start_DMA+0xbe>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b48:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b4c:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000b4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b50:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8000b54:	d02e      	beq.n	8000bb4 <HAL_ADC_Start_DMA+0x124>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000b56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000b58:	f023 0306 	bic.w	r3, r3, #6
 8000b5c:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b5e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b60:	463b      	mov	r3, r7
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b62:	483f      	ldr	r0, [pc, #252]	; (8000c60 <HAL_ADC_Start_DMA+0x1d0>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b64:	4632      	mov	r2, r6
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b66:	4f3f      	ldr	r7, [pc, #252]	; (8000c64 <HAL_ADC_Start_DMA+0x1d4>)
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b68:	251c      	movs	r5, #28
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b6a:	63c8      	str	r0, [r1, #60]	; 0x3c
        __HAL_UNLOCK(hadc);
 8000b6c:	2100      	movs	r1, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b6e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b70:	4e3d      	ldr	r6, [pc, #244]	; (8000c68 <HAL_ADC_Start_DMA+0x1d8>)
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b72:	6407      	str	r7, [r0, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b74:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000b76:	64c6      	str	r6, [r0, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b78:	6820      	ldr	r0, [r4, #0]
 8000b7a:	6005      	str	r5, [r0, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000b7c:	6820      	ldr	r0, [r4, #0]
        __HAL_UNLOCK(hadc);
 8000b7e:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000b82:	6841      	ldr	r1, [r0, #4]
 8000b84:	f041 0110 	orr.w	r1, r1, #16
 8000b88:	6041      	str	r1, [r0, #4]
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8000b8a:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000b8c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000b8e:	68c1      	ldr	r1, [r0, #12]
 8000b90:	f021 0103 	bic.w	r1, r1, #3
 8000b94:	4329      	orrs	r1, r5
 8000b96:	60c1      	str	r1, [r0, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b98:	6821      	ldr	r1, [r4, #0]
 8000b9a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000b9c:	3140      	adds	r1, #64	; 0x40
 8000b9e:	f002 fc2b 	bl	80033f8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000ba2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8000ba4:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <HAL_ADC_Start_DMA+0x1dc>)
 8000ba6:	6891      	ldr	r1, [r2, #8]
 8000ba8:	400b      	ands	r3, r1
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6093      	str	r3, [r2, #8]
}
 8000bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          ADC_CLEAR_ERRORCODE(hadc);
 8000bb4:	65a3      	str	r3, [r4, #88]	; 0x58
 8000bb6:	e7d2      	b.n	8000b5e <HAL_ADC_Start_DMA+0xce>
  MODIFY_REG(ADCx->CR,
 8000bb8:	688a      	ldr	r2, [r1, #8]
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <HAL_ADC_Start_DMA+0x1dc>)
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000bc4:	f7ff ff2c 	bl	8000a20 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000bc8:	6823      	ldr	r3, [r4, #0]
 8000bca:	4a1d      	ldr	r2, [pc, #116]	; (8000c40 <HAL_ADC_Start_DMA+0x1b0>)
    tickstart = HAL_GetTick();
 8000bcc:	4680      	mov	r8, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d022      	beq.n	8000c18 <HAL_ADC_Start_DMA+0x188>
 8000bd2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d01e      	beq.n	8000c18 <HAL_ADC_Start_DMA+0x188>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000bda:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <HAL_ADC_Start_DMA+0x1b4>)
 8000bdc:	6892      	ldr	r2, [r2, #8]
  MODIFY_REG(ADCx->CR,
 8000bde:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8000c6c <HAL_ADC_Start_DMA+0x1dc>
 8000be2:	e00c      	b.n	8000bfe <HAL_ADC_Start_DMA+0x16e>
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	ea02 0209 	and.w	r2, r2, r9
 8000bea:	f042 0201 	orr.w	r2, r2, #1
 8000bee:	609a      	str	r2, [r3, #8]
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000bf0:	f7ff ff16 	bl	8000a20 <HAL_GetTick>
 8000bf4:	eba0 0008 	sub.w	r0, r0, r8
 8000bf8:	2802      	cmp	r0, #2
 8000bfa:	d881      	bhi.n	8000b00 <HAL_ADC_Start_DMA+0x70>
 8000bfc:	6823      	ldr	r3, [r4, #0]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	07d2      	lsls	r2, r2, #31
 8000c02:	d418      	bmi.n	8000c36 <HAL_ADC_Start_DMA+0x1a6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	07d1      	lsls	r1, r2, #31
 8000c08:	d5ec      	bpl.n	8000be4 <HAL_ADC_Start_DMA+0x154>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c0a:	f7ff ff09 	bl	8000a20 <HAL_GetTick>
 8000c0e:	eba0 0008 	sub.w	r0, r0, r8
 8000c12:	2802      	cmp	r0, #2
 8000c14:	d9f2      	bls.n	8000bfc <HAL_ADC_Start_DMA+0x16c>
 8000c16:	e773      	b.n	8000b00 <HAL_ADC_Start_DMA+0x70>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000c18:	490e      	ldr	r1, [pc, #56]	; (8000c54 <HAL_ADC_Start_DMA+0x1c4>)
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <HAL_ADC_Start_DMA+0x1b8>)
 8000c1c:	6889      	ldr	r1, [r1, #8]
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000c1e:	f011 0f1f 	tst.w	r1, #31
 8000c22:	bf0c      	ite	eq
 8000c24:	2101      	moveq	r1, #1
 8000c26:	2100      	movne	r1, #0
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	bf18      	it	ne
 8000c2c:	f041 0101 	orrne.w	r1, r1, #1
 8000c30:	2900      	cmp	r1, #0
 8000c32:	d1d4      	bne.n	8000bde <HAL_ADC_Start_DMA+0x14e>
 8000c34:	e77f      	b.n	8000b36 <HAL_ADC_Start_DMA+0xa6>
 8000c36:	4904      	ldr	r1, [pc, #16]	; (8000c48 <HAL_ADC_Start_DMA+0x1b8>)
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	bf18      	it	ne
 8000c3c:	2101      	movne	r1, #1
 8000c3e:	e77a      	b.n	8000b36 <HAL_ADC_Start_DMA+0xa6>
 8000c40:	40022000 	.word	0x40022000
 8000c44:	58026300 	.word	0x58026300
 8000c48:	40022100 	.word	0x40022100
 8000c4c:	58026000 	.word	0x58026000
 8000c50:	8000003f 	.word	0x8000003f
 8000c54:	40022300 	.word	0x40022300
 8000c58:	08144cbc 	.word	0x08144cbc
 8000c5c:	fffff0fe 	.word	0xfffff0fe
 8000c60:	08000f5d 	.word	0x08000f5d
 8000c64:	08000c71 	.word	0x08000c71
 8000c68:	08000fc5 	.word	0x08000fc5
 8000c6c:	7fffffc0 	.word	0x7fffffc0

08000c70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000c70:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000c72:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000c74:	f012 fc9c 	bl	80135b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000c78:	bd08      	pop	{r3, pc}
 8000c7a:	bf00      	nop

08000c7c <HAL_ADC_LevelOutOfWindowCallback>:
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <HAL_ADC_ErrorCallback>:
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <HAL_ADC_IRQHandler>:
{
 8000c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000c86:	4aa1      	ldr	r2, [pc, #644]	; (8000f0c <HAL_ADC_IRQHandler+0x288>)
{
 8000c88:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000c8a:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000c8c:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000c8e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000c90:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000c92:	f000 8096 	beq.w	8000dc2 <HAL_ADC_IRQHandler+0x13e>
 8000c96:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	f000 8091 	beq.w	8000dc2 <HAL_ADC_IRQHandler+0x13e>
 8000ca0:	4a9b      	ldr	r2, [pc, #620]	; (8000f10 <HAL_ADC_IRQHandler+0x28c>)
 8000ca2:	6897      	ldr	r7, [r2, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000ca4:	4999      	ldr	r1, [pc, #612]	; (8000f0c <HAL_ADC_IRQHandler+0x288>)
 8000ca6:	4a9b      	ldr	r2, [pc, #620]	; (8000f14 <HAL_ADC_IRQHandler+0x290>)
 8000ca8:	f007 071f 	and.w	r7, r7, #31
 8000cac:	428b      	cmp	r3, r1
 8000cae:	bf18      	it	ne
 8000cb0:	4293      	cmpne	r3, r2
 8000cb2:	d003      	beq.n	8000cbc <HAL_ADC_IRQHandler+0x38>
 8000cb4:	4a98      	ldr	r2, [pc, #608]	; (8000f18 <HAL_ADC_IRQHandler+0x294>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	f040 808b 	bne.w	8000dd2 <HAL_ADC_IRQHandler+0x14e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8000cbc:	6923      	ldr	r3, [r4, #16]
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	d001      	beq.n	8000cc6 <HAL_ADC_IRQHandler+0x42>
 8000cc2:	2b08      	cmp	r3, #8
 8000cc4:	d17f      	bne.n	8000dc6 <HAL_ADC_IRQHandler+0x142>
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000cc6:	07a8      	lsls	r0, r5, #30
 8000cc8:	d502      	bpl.n	8000cd0 <HAL_ADC_IRQHandler+0x4c>
 8000cca:	07b1      	lsls	r1, r6, #30
 8000ccc:	f100 80aa 	bmi.w	8000e24 <HAL_ADC_IRQHandler+0x1a0>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000cd0:	076b      	lsls	r3, r5, #29
 8000cd2:	d56b      	bpl.n	8000dac <HAL_ADC_IRQHandler+0x128>
 8000cd4:	0770      	lsls	r0, r6, #29
 8000cd6:	d569      	bpl.n	8000dac <HAL_ADC_IRQHandler+0x128>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000cda:	06db      	lsls	r3, r3, #27
 8000cdc:	d403      	bmi.n	8000ce6 <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000cde:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ce0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce4:	6563      	str	r3, [r4, #84]	; 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000ce6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ce8:	68da      	ldr	r2, [r3, #12]
 8000cea:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000cee:	d11c      	bne.n	8000d2a <HAL_ADC_IRQHandler+0xa6>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000cf0:	4a88      	ldr	r2, [pc, #544]	; (8000f14 <HAL_ADC_IRQHandler+0x290>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	f000 80fa 	beq.w	8000eec <HAL_ADC_IRQHandler+0x268>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000cf8:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000cfa:	0490      	lsls	r0, r2, #18
 8000cfc:	d415      	bmi.n	8000d2a <HAL_ADC_IRQHandler+0xa6>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	0711      	lsls	r1, r2, #28
 8000d02:	d512      	bpl.n	8000d2a <HAL_ADC_IRQHandler+0xa6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	0752      	lsls	r2, r2, #29
 8000d08:	f100 811a 	bmi.w	8000f40 <HAL_ADC_IRQHandler+0x2bc>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	f022 020c 	bic.w	r2, r2, #12
 8000d12:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000d14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d1a:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000d1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d1e:	04db      	lsls	r3, r3, #19
 8000d20:	d403      	bmi.n	8000d2a <HAL_ADC_IRQHandler+0xa6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f012 fc3e 	bl	80135ac <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000d36:	06a8      	lsls	r0, r5, #26
 8000d38:	d53e      	bpl.n	8000db8 <HAL_ADC_IRQHandler+0x134>
 8000d3a:	06b1      	lsls	r1, r6, #26
 8000d3c:	d53c      	bpl.n	8000db8 <HAL_ADC_IRQHandler+0x134>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d40:	06d8      	lsls	r0, r3, #27
 8000d42:	d403      	bmi.n	8000d4c <HAL_ADC_IRQHandler+0xc8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d4a:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8000d4c:	6823      	ldr	r3, [r4, #0]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d4e:	4871      	ldr	r0, [pc, #452]	; (8000f14 <HAL_ADC_IRQHandler+0x290>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000d50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d52:	4283      	cmp	r3, r0
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d54:	68d9      	ldr	r1, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000d56:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d5a:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 8000d5e:	d06f      	beq.n	8000e40 <HAL_ADC_IRQHandler+0x1bc>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000d60:	68d8      	ldr	r0, [r3, #12]
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	d075      	beq.n	8000e52 <HAL_ADC_IRQHandler+0x1ce>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8000d66:	f000 7200 	and.w	r2, r0, #33554432	; 0x2000000
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	f000 80c3 	beq.w	8000ef6 <HAL_ADC_IRQHandler+0x272>
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000d70:	4620      	mov	r0, r4
 8000d72:	f001 f9d9 	bl	8002128 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	2260      	movs	r2, #96	; 0x60
 8000d7a:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8000d7c:	0628      	lsls	r0, r5, #24
 8000d7e:	d502      	bpl.n	8000d86 <HAL_ADC_IRQHandler+0x102>
 8000d80:	0631      	lsls	r1, r6, #24
 8000d82:	f100 809c 	bmi.w	8000ebe <HAL_ADC_IRQHandler+0x23a>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8000d86:	05ea      	lsls	r2, r5, #23
 8000d88:	d502      	bpl.n	8000d90 <HAL_ADC_IRQHandler+0x10c>
 8000d8a:	05f3      	lsls	r3, r6, #23
 8000d8c:	f100 80a2 	bmi.w	8000ed4 <HAL_ADC_IRQHandler+0x250>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8000d90:	05a8      	lsls	r0, r5, #22
 8000d92:	d502      	bpl.n	8000d9a <HAL_ADC_IRQHandler+0x116>
 8000d94:	05b1      	lsls	r1, r6, #22
 8000d96:	f100 8086 	bmi.w	8000ea6 <HAL_ADC_IRQHandler+0x222>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000d9a:	06ea      	lsls	r2, r5, #27
 8000d9c:	d501      	bpl.n	8000da2 <HAL_ADC_IRQHandler+0x11e>
 8000d9e:	06f3      	lsls	r3, r6, #27
 8000da0:	d41d      	bmi.n	8000dde <HAL_ADC_IRQHandler+0x15a>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8000da2:	0568      	lsls	r0, r5, #21
 8000da4:	d501      	bpl.n	8000daa <HAL_ADC_IRQHandler+0x126>
 8000da6:	0571      	lsls	r1, r6, #21
 8000da8:	d46c      	bmi.n	8000e84 <HAL_ADC_IRQHandler+0x200>
}
 8000daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000dac:	0729      	lsls	r1, r5, #28
 8000dae:	d5c2      	bpl.n	8000d36 <HAL_ADC_IRQHandler+0xb2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000db0:	0732      	lsls	r2, r6, #28
 8000db2:	d491      	bmi.n	8000cd8 <HAL_ADC_IRQHandler+0x54>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000db4:	06a8      	lsls	r0, r5, #26
 8000db6:	d4c0      	bmi.n	8000d3a <HAL_ADC_IRQHandler+0xb6>
 8000db8:	066a      	lsls	r2, r5, #25
 8000dba:	d5df      	bpl.n	8000d7c <HAL_ADC_IRQHandler+0xf8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000dbc:	0673      	lsls	r3, r6, #25
 8000dbe:	d5dd      	bpl.n	8000d7c <HAL_ADC_IRQHandler+0xf8>
 8000dc0:	e7bd      	b.n	8000d3e <HAL_ADC_IRQHandler+0xba>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000dc2:	4a56      	ldr	r2, [pc, #344]	; (8000f1c <HAL_ADC_IRQHandler+0x298>)
 8000dc4:	e76d      	b.n	8000ca2 <HAL_ADC_IRQHandler+0x1e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8000dc6:	f640 0199 	movw	r1, #2201	; 0x899
 8000dca:	4855      	ldr	r0, [pc, #340]	; (8000f20 <HAL_ADC_IRQHandler+0x29c>)
 8000dcc:	f012 fdba 	bl	8013944 <assert_failed>
 8000dd0:	e779      	b.n	8000cc6 <HAL_ADC_IRQHandler+0x42>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000dd2:	f640 0198 	movw	r1, #2200	; 0x898
 8000dd6:	4852      	ldr	r0, [pc, #328]	; (8000f20 <HAL_ADC_IRQHandler+0x29c>)
 8000dd8:	f012 fdb4 	bl	8013944 <assert_failed>
 8000ddc:	e76e      	b.n	8000cbc <HAL_ADC_IRQHandler+0x38>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000dde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000de0:	b18b      	cbz	r3, 8000e06 <HAL_ADC_IRQHandler+0x182>
 8000de2:	6823      	ldr	r3, [r4, #0]
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8000de4:	2f00      	cmp	r7, #0
 8000de6:	f000 809d 	beq.w	8000f24 <HAL_ADC_IRQHandler+0x2a0>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000dea:	4a48      	ldr	r2, [pc, #288]	; (8000f0c <HAL_ADC_IRQHandler+0x288>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	f000 80b0 	beq.w	8000f52 <HAL_ADC_IRQHandler+0x2ce>
 8000df2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000df6:	4293      	cmp	r3, r2
 8000df8:	f000 80ab 	beq.w	8000f52 <HAL_ADC_IRQHandler+0x2ce>
 8000dfc:	4a44      	ldr	r2, [pc, #272]	; (8000f10 <HAL_ADC_IRQHandler+0x28c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000dfe:	6892      	ldr	r2, [r2, #8]
 8000e00:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8000e04:	d00b      	beq.n	8000e1e <HAL_ADC_IRQHandler+0x19a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000e06:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 8000e08:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000e10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8000e18:	f7ff ff32 	bl	8000c80 <HAL_ADC_ErrorCallback>
 8000e1c:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000e1e:	2210      	movs	r2, #16
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e7be      	b.n	8000da2 <HAL_ADC_IRQHandler+0x11e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e26:	06da      	lsls	r2, r3, #27
 8000e28:	d403      	bmi.n	8000e32 <HAL_ADC_IRQHandler+0x1ae>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000e2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e30:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000e32:	4620      	mov	r0, r4
 8000e34:	f001 f980 	bl	8002138 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e747      	b.n	8000cd0 <HAL_ADC_IRQHandler+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8000e40:	1fb8      	subs	r0, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8000e42:	2801      	cmp	r0, #1
 8000e44:	d98c      	bls.n	8000d60 <HAL_ADC_IRQHandler+0xdc>
 8000e46:	2f00      	cmp	r7, #0
 8000e48:	d08a      	beq.n	8000d60 <HAL_ADC_IRQHandler+0xdc>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000e4a:	4830      	ldr	r0, [pc, #192]	; (8000f0c <HAL_ADC_IRQHandler+0x288>)
 8000e4c:	68c0      	ldr	r0, [r0, #12]
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8000e4e:	2a00      	cmp	r2, #0
 8000e50:	d189      	bne.n	8000d66 <HAL_ADC_IRQHandler+0xe2>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	0652      	lsls	r2, r2, #25
 8000e56:	d58b      	bpl.n	8000d70 <HAL_ADC_IRQHandler+0xec>
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8000e58:	0281      	lsls	r1, r0, #10
 8000e5a:	d489      	bmi.n	8000d70 <HAL_ADC_IRQHandler+0xec>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	0712      	lsls	r2, r2, #28
 8000e60:	d465      	bmi.n	8000f2e <HAL_ADC_IRQHandler+0x2aa>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000e68:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000e6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e70:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8000e72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	f53f af7b 	bmi.w	8000d70 <HAL_ADC_IRQHandler+0xec>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6563      	str	r3, [r4, #84]	; 0x54
 8000e82:	e775      	b.n	8000d70 <HAL_ADC_IRQHandler+0xec>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000e84:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000e86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8a:	6822      	ldr	r2, [r4, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000e8c:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e92:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8000e94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000e9c:	6011      	str	r1, [r2, #0]
}
 8000e9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000ea2:	f001 b943 	b.w	800212c <HAL_ADCEx_InjectedQueueOverflowCallback>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000ea6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000ea8:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eae:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000eb0:	f001 f940 	bl	8002134 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	e76d      	b.n	8000d9a <HAL_ADC_IRQHandler+0x116>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ebe:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ec0:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec6:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ec8:	f7ff fed8 	bl	8000c7c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	2280      	movs	r2, #128	; 0x80
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e758      	b.n	8000d86 <HAL_ADC_IRQHandler+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000ed4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000ed6:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000ede:	f001 f927 	bl	8002130 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e751      	b.n	8000d90 <HAL_ADC_IRQHandler+0x10c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000eec:	2f09      	cmp	r7, #9
 8000eee:	d906      	bls.n	8000efe <HAL_ADC_IRQHandler+0x27a>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_ADC_IRQHandler+0x288>)
 8000ef2:	68d2      	ldr	r2, [r2, #12]
 8000ef4:	e701      	b.n	8000cfa <HAL_ADC_IRQHandler+0x76>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8000ef6:	0481      	lsls	r1, r0, #18
 8000ef8:	f53f af3a 	bmi.w	8000d70 <HAL_ADC_IRQHandler+0xec>
 8000efc:	e7a9      	b.n	8000e52 <HAL_ADC_IRQHandler+0x1ce>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000efe:	f240 2221 	movw	r2, #545	; 0x221
 8000f02:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f04:	07d2      	lsls	r2, r2, #31
 8000f06:	f53f aef7 	bmi.w	8000cf8 <HAL_ADC_IRQHandler+0x74>
 8000f0a:	e7f1      	b.n	8000ef0 <HAL_ADC_IRQHandler+0x26c>
 8000f0c:	40022000 	.word	0x40022000
 8000f10:	58026300 	.word	0x58026300
 8000f14:	40022100 	.word	0x40022100
 8000f18:	58026000 	.word	0x58026000
 8000f1c:	40022300 	.word	0x40022300
 8000f20:	08144cbc 	.word	0x08144cbc
      if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	0797      	lsls	r7, r2, #30
 8000f28:	f43f af79 	beq.w	8000e1e <HAL_ADC_IRQHandler+0x19a>
 8000f2c:	e76b      	b.n	8000e06 <HAL_ADC_IRQHandler+0x182>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f30:	f043 0310 	orr.w	r3, r3, #16
 8000f34:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	65a3      	str	r3, [r4, #88]	; 0x58
 8000f3e:	e717      	b.n	8000d70 <HAL_ADC_IRQHandler+0xec>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f42:	f043 0310 	orr.w	r3, r3, #16
 8000f46:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000f50:	e6eb      	b.n	8000d2a <HAL_ADC_IRQHandler+0xa6>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000f52:	4a01      	ldr	r2, [pc, #4]	; (8000f58 <HAL_ADC_IRQHandler+0x2d4>)
 8000f54:	e753      	b.n	8000dfe <HAL_ADC_IRQHandler+0x17a>
 8000f56:	bf00      	nop
 8000f58:	40022300 	.word	0x40022300

08000f5c <ADC_DMAConvCplt>:
{
 8000f5c:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8000f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000f62:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8000f68:	d11d      	bne.n	8000fa6 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8000f6a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f70:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8000f72:	680a      	ldr	r2, [r1, #0]
 8000f74:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f78:	68ca      	ldr	r2, [r1, #12]
 8000f7a:	d01b      	beq.n	8000fb4 <ADC_DMAConvCplt+0x58>
 8000f7c:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000f80:	d10d      	bne.n	8000f9e <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8000f82:	68ca      	ldr	r2, [r1, #12]
 8000f84:	0494      	lsls	r4, r2, #18
 8000f86:	d40a      	bmi.n	8000f9e <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000f8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f8e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000f92:	04d1      	lsls	r1, r2, #19
 8000f94:	d403      	bmi.n	8000f9e <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000f98:	f042 0201 	orr.w	r2, r2, #1
 8000f9c:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f012 fb04 	bl	80135ac <HAL_ADC_ConvCpltCallback>
}
 8000fa4:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000fa6:	06d2      	lsls	r2, r2, #27
 8000fa8:	d407      	bmi.n	8000fba <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8000fb4:	0790      	lsls	r0, r2, #30
 8000fb6:	d1f2      	bne.n	8000f9e <ADC_DMAConvCplt+0x42>
 8000fb8:	e7e6      	b.n	8000f88 <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ErrorCallback(hadc);
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fe60 	bl	8000c80 <HAL_ADC_ErrorCallback>
}
 8000fc0:	bd10      	pop	{r4, pc}
 8000fc2:	bf00      	nop

08000fc4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fc6:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000fca:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fd0:	655a      	str	r2, [r3, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000fd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fd4:	f042 0204 	orr.w	r2, r2, #4
 8000fd8:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc);
 8000fda:	f7ff fe51 	bl	8000c80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000fde:	bd08      	pop	{r3, pc}

08000fe0 <HAL_ADC_ConfigChannel>:
{
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	4605      	mov	r5, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000fe4:	4ab3      	ldr	r2, [pc, #716]	; (80012b4 <HAL_ADC_ConfigChannel+0x2d4>)
 8000fe6:	48b4      	ldr	r0, [pc, #720]	; (80012b8 <HAL_ADC_ConfigChannel+0x2d8>)
{
 8000fe8:	b083      	sub	sp, #12
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000fea:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t wait_loop_index = 0;
 8000fec:	2600      	movs	r6, #0
{
 8000fee:	460c      	mov	r4, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000ff0:	4283      	cmp	r3, r0
 8000ff2:	bf18      	it	ne
 8000ff4:	4293      	cmpne	r3, r2
  __IO uint32_t wait_loop_index = 0;
 8000ff6:	9601      	str	r6, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000ff8:	d003      	beq.n	8001002 <HAL_ADC_ConfigChannel+0x22>
 8000ffa:	4ab0      	ldr	r2, [pc, #704]	; (80012bc <HAL_ADC_ConfigChannel+0x2dc>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	f040 8153 	bne.w	80012a8 <HAL_ADC_ConfigChannel+0x2c8>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001002:	6862      	ldr	r2, [r4, #4]
 8001004:	f422 7340 	bic.w	r3, r2, #768	; 0x300
 8001008:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800100c:	1f98      	subs	r0, r3, #6
 800100e:	bf18      	it	ne
 8001010:	2001      	movne	r0, #1
 8001012:	2918      	cmp	r1, #24
 8001014:	f240 8119 	bls.w	800124a <HAL_ADC_ConfigChannel+0x26a>
 8001018:	2301      	movs	r3, #1
 800101a:	f422 7600 	bic.w	r6, r2, #512	; 0x200
 800101e:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8001022:	f5b6 7680 	subs.w	r6, r6, #256	; 0x100
 8001026:	bf18      	it	ne
 8001028:	2601      	movne	r6, #1
 800102a:	2918      	cmp	r1, #24
 800102c:	f240 8107 	bls.w	800123e <HAL_ADC_ConfigChannel+0x25e>
 8001030:	2201      	movs	r2, #1
 8001032:	4003      	ands	r3, r0
 8001034:	421e      	tst	r6, r3
 8001036:	d002      	beq.n	800103e <HAL_ADC_ConfigChannel+0x5e>
 8001038:	2a00      	cmp	r2, #0
 800103a:	f040 8404 	bne.w	8001846 <HAL_ADC_ConfigChannel+0x866>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800103e:	68a3      	ldr	r3, [r4, #8]
 8001040:	2b07      	cmp	r3, #7
 8001042:	f200 8256 	bhi.w	80014f2 <HAL_ADC_ConfigChannel+0x512>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8001046:	68e3      	ldr	r3, [r4, #12]
 8001048:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800104c:	4293      	cmp	r3, r2
 800104e:	d003      	beq.n	8001058 <HAL_ADC_ConfigChannel+0x78>
 8001050:	4a9b      	ldr	r2, [pc, #620]	; (80012c0 <HAL_ADC_ConfigChannel+0x2e0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	f040 8111 	bne.w	800127a <HAL_ADC_ConfigChannel+0x29a>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8001058:	6923      	ldr	r3, [r4, #16]
 800105a:	2b04      	cmp	r3, #4
 800105c:	f200 8116 	bhi.w	800128c <HAL_ADC_ConfigChannel+0x2ac>
  if (hadc->Init.OversamplingMode == ENABLE)
 8001060:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8001064:	6961      	ldr	r1, [r4, #20]
 8001066:	2b01      	cmp	r3, #1
 8001068:	682a      	ldr	r2, [r5, #0]
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
 800106a:	4b96      	ldr	r3, [pc, #600]	; (80012c4 <HAL_ADC_ConfigChannel+0x2e4>)
 800106c:	f000 8223 	beq.w	80014b6 <HAL_ADC_ConfigChannel+0x4d6>
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800107a:	f040 810d 	bne.w	8001298 <HAL_ADC_ConfigChannel+0x2b8>
      return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 800107e:	68d2      	ldr	r2, [r2, #12]
 8001080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001084:	0852      	lsrs	r2, r2, #1
 8001086:	f002 020e 	and.w	r2, r2, #14
 800108a:	40d3      	lsrs	r3, r2
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 800108c:	4299      	cmp	r1, r3
 800108e:	f200 813f 	bhi.w	8001310 <HAL_ADC_ConfigChannel+0x330>
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001092:	4b8b      	ldr	r3, [pc, #556]	; (80012c0 <HAL_ADC_ConfigChannel+0x2e0>)
 8001094:	68e2      	ldr	r2, [r4, #12]
 8001096:	429a      	cmp	r2, r3
 8001098:	f000 8152 	beq.w	8001340 <HAL_ADC_ConfigChannel+0x360>
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800109c:	6821      	ldr	r1, [r4, #0]
 800109e:	4b8a      	ldr	r3, [pc, #552]	; (80012c8 <HAL_ADC_ConfigChannel+0x2e8>)
 80010a0:	4e8a      	ldr	r6, [pc, #552]	; (80012cc <HAL_ADC_ConfigChannel+0x2ec>)
 80010a2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80010a6:	2901      	cmp	r1, #1
 80010a8:	bf18      	it	ne
 80010aa:	4299      	cmpne	r1, r3
 80010ac:	4888      	ldr	r0, [pc, #544]	; (80012d0 <HAL_ADC_ConfigChannel+0x2f0>)
 80010ae:	bf14      	ite	ne
 80010b0:	2301      	movne	r3, #1
 80010b2:	2300      	moveq	r3, #0
 80010b4:	42b1      	cmp	r1, r6
 80010b6:	bf0c      	ite	eq
 80010b8:	2300      	moveq	r3, #0
 80010ba:	f003 0301 	andne.w	r3, r3, #1
 80010be:	4e85      	ldr	r6, [pc, #532]	; (80012d4 <HAL_ADC_ConfigChannel+0x2f4>)
 80010c0:	4281      	cmp	r1, r0
 80010c2:	bf0c      	ite	eq
 80010c4:	2300      	moveq	r3, #0
 80010c6:	f003 0301 	andne.w	r3, r3, #1
 80010ca:	f100 6006 	add.w	r0, r0, #140509184	; 0x8600000
 80010ce:	42b1      	cmp	r1, r6
 80010d0:	bf0c      	ite	eq
 80010d2:	2300      	moveq	r3, #0
 80010d4:	f003 0301 	andne.w	r3, r3, #1
 80010d8:	3018      	adds	r0, #24
 80010da:	4e7f      	ldr	r6, [pc, #508]	; (80012d8 <HAL_ADC_ConfigChannel+0x2f8>)
 80010dc:	4281      	cmp	r1, r0
 80010de:	bf0c      	ite	eq
 80010e0:	2300      	moveq	r3, #0
 80010e2:	f003 0301 	andne.w	r3, r3, #1
 80010e6:	f100 6006 	add.w	r0, r0, #140509184	; 0x8600000
 80010ea:	42b1      	cmp	r1, r6
 80010ec:	bf0c      	ite	eq
 80010ee:	2300      	moveq	r3, #0
 80010f0:	f003 0301 	andne.w	r3, r3, #1
 80010f4:	3060      	adds	r0, #96	; 0x60
 80010f6:	4e79      	ldr	r6, [pc, #484]	; (80012dc <HAL_ADC_ConfigChannel+0x2fc>)
 80010f8:	4281      	cmp	r1, r0
 80010fa:	bf0c      	ite	eq
 80010fc:	2300      	moveq	r3, #0
 80010fe:	f003 0301 	andne.w	r3, r3, #1
 8001102:	f100 6006 	add.w	r0, r0, #140509184	; 0x8600000
 8001106:	42b1      	cmp	r1, r6
 8001108:	bf0c      	ite	eq
 800110a:	2300      	moveq	r3, #0
 800110c:	f003 0301 	andne.w	r3, r3, #1
 8001110:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8001114:	4e72      	ldr	r6, [pc, #456]	; (80012e0 <HAL_ADC_ConfigChannel+0x300>)
 8001116:	4281      	cmp	r1, r0
 8001118:	bf0c      	ite	eq
 800111a:	2300      	moveq	r3, #0
 800111c:	f003 0301 	andne.w	r3, r3, #1
 8001120:	f100 6008 	add.w	r0, r0, #142606336	; 0x8800000
 8001124:	42b1      	cmp	r1, r6
 8001126:	bf0c      	ite	eq
 8001128:	2300      	moveq	r3, #0
 800112a:	f003 0301 	andne.w	r3, r3, #1
 800112e:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
 8001132:	f106 6606 	add.w	r6, r6, #140509184	; 0x8600000
 8001136:	4281      	cmp	r1, r0
 8001138:	bf0c      	ite	eq
 800113a:	2300      	moveq	r3, #0
 800113c:	f003 0301 	andne.w	r3, r3, #1
 8001140:	4868      	ldr	r0, [pc, #416]	; (80012e4 <HAL_ADC_ConfigChannel+0x304>)
 8001142:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8001146:	42b1      	cmp	r1, r6
 8001148:	bf0c      	ite	eq
 800114a:	2300      	moveq	r3, #0
 800114c:	f003 0301 	andne.w	r3, r3, #1
 8001150:	4e65      	ldr	r6, [pc, #404]	; (80012e8 <HAL_ADC_ConfigChannel+0x308>)
 8001152:	4281      	cmp	r1, r0
 8001154:	bf0c      	ite	eq
 8001156:	2300      	moveq	r3, #0
 8001158:	f003 0301 	andne.w	r3, r3, #1
 800115c:	4863      	ldr	r0, [pc, #396]	; (80012ec <HAL_ADC_ConfigChannel+0x30c>)
 800115e:	42b1      	cmp	r1, r6
 8001160:	bf0c      	ite	eq
 8001162:	2300      	moveq	r3, #0
 8001164:	f003 0301 	andne.w	r3, r3, #1
 8001168:	4e61      	ldr	r6, [pc, #388]	; (80012f0 <HAL_ADC_ConfigChannel+0x310>)
 800116a:	4281      	cmp	r1, r0
 800116c:	bf0c      	ite	eq
 800116e:	2300      	moveq	r3, #0
 8001170:	f003 0301 	andne.w	r3, r3, #1
 8001174:	485f      	ldr	r0, [pc, #380]	; (80012f4 <HAL_ADC_ConfigChannel+0x314>)
 8001176:	4960      	ldr	r1, [pc, #384]	; (80012f8 <HAL_ADC_ConfigChannel+0x318>)
 8001178:	42b2      	cmp	r2, r6
 800117a:	bf0c      	ite	eq
 800117c:	2300      	moveq	r3, #0
 800117e:	f003 0301 	andne.w	r3, r3, #1
 8001182:	4282      	cmp	r2, r0
 8001184:	bf0c      	ite	eq
 8001186:	2300      	moveq	r3, #0
 8001188:	f003 0301 	andne.w	r3, r3, #1
 800118c:	428a      	cmp	r2, r1
 800118e:	bf0c      	ite	eq
 8001190:	2300      	moveq	r3, #0
 8001192:	f003 0301 	andne.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d166      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x288>
  __HAL_LOCK(hadc);
 800119a:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 800119e:	2b01      	cmp	r3, #1
 80011a0:	f000 82a2 	beq.w	80016e8 <HAL_ADC_ConfigChannel+0x708>
 80011a4:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011a6:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(hadc);
 80011a8:	f885 0050 	strb.w	r0, [r5, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011ac:	6893      	ldr	r3, [r2, #8]
 80011ae:	075b      	lsls	r3, r3, #29
 80011b0:	d451      	bmi.n	8001256 <HAL_ADC_ConfigChannel+0x276>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80011b8:	2900      	cmp	r1, #0
 80011ba:	f040 81a2 	bne.w	8001502 <HAL_ADC_ConfigChannel+0x522>
 80011be:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80011c2:	4098      	lsls	r0, r3
 80011c4:	69d3      	ldr	r3, [r2, #28]
  MODIFY_REG(*preg,
 80011c6:	271f      	movs	r7, #31
 80011c8:	4318      	orrs	r0, r3
 80011ca:	61d0      	str	r0, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80011cc:	6862      	ldr	r2, [r4, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011ce:	6829      	ldr	r1, [r5, #0]
 80011d0:	0990      	lsrs	r0, r2, #6
  MODIFY_REG(*preg,
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	403a      	ands	r2, r7
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011d6:	3130      	adds	r1, #48	; 0x30
 80011d8:	f000 000c 	and.w	r0, r0, #12
  MODIFY_REG(*preg,
 80011dc:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80011e0:	4097      	lsls	r7, r2
 80011e2:	5846      	ldr	r6, [r0, r1]
 80011e4:	4093      	lsls	r3, r2
 80011e6:	ea26 0207 	bic.w	r2, r6, r7
 80011ea:	4313      	orrs	r3, r2
 80011ec:	5043      	str	r3, [r0, r1]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011ee:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	0757      	lsls	r7, r2, #29
 80011f4:	f100 8183 	bmi.w	80014fe <HAL_ADC_ConfigChannel+0x51e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011f8:	689e      	ldr	r6, [r3, #8]
 80011fa:	f016 0608 	ands.w	r6, r6, #8
 80011fe:	f000 80f1 	beq.w	80013e4 <HAL_ADC_ConfigChannel+0x404>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	07d6      	lsls	r6, r2, #31
 8001206:	d418      	bmi.n	800123a <HAL_ADC_ConfigChannel+0x25a>
  MODIFY_REG(ADCx->DIFSEL,
 8001208:	68e1      	ldr	r1, [r4, #12]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800120a:	6826      	ldr	r6, [r4, #0]
 800120c:	f001 0018 	and.w	r0, r1, #24
 8001210:	4a3a      	ldr	r2, [pc, #232]	; (80012fc <HAL_ADC_ConfigChannel+0x31c>)
 8001212:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001216:	40c2      	lsrs	r2, r0
 8001218:	f3c6 0013 	ubfx	r0, r6, #0, #20
 800121c:	4032      	ands	r2, r6
 800121e:	ea21 0100 	bic.w	r1, r1, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001222:	4827      	ldr	r0, [pc, #156]	; (80012c0 <HAL_ADC_ConfigChannel+0x2e0>)
 8001224:	430a      	orrs	r2, r1
 8001226:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800122a:	68e3      	ldr	r3, [r4, #12]
 800122c:	4283      	cmp	r3, r0
 800122e:	f000 821c 	beq.w	800166a <HAL_ADC_ConfigChannel+0x68a>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	2a00      	cmp	r2, #0
 8001236:	f2c0 81b6 	blt.w	80015a6 <HAL_ADC_ConfigChannel+0x5c6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800123a:	2000      	movs	r0, #0
 800123c:	e00f      	b.n	800125e <HAL_ADC_ConfigChannel+0x27e>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800123e:	4a30      	ldr	r2, [pc, #192]	; (8001300 <HAL_ADC_ConfigChannel+0x320>)
 8001240:	40ca      	lsrs	r2, r1
 8001242:	43d2      	mvns	r2, r2
 8001244:	f002 0201 	and.w	r2, r2, #1
 8001248:	e6f3      	b.n	8001032 <HAL_ADC_ConfigChannel+0x52>
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <HAL_ADC_ConfigChannel+0x324>)
 800124c:	40cb      	lsrs	r3, r1
 800124e:	43db      	mvns	r3, r3
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	e6e1      	b.n	800101a <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001256:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001258:	f043 0320 	orr.w	r3, r3, #32
 800125c:	656b      	str	r3, [r5, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800125e:	2300      	movs	r3, #0
 8001260:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8001264:	b003      	add	sp, #12
 8001266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001268:	4b27      	ldr	r3, [pc, #156]	; (8001308 <HAL_ADC_ConfigChannel+0x328>)
 800126a:	429a      	cmp	r2, r3
 800126c:	d095      	beq.n	800119a <HAL_ADC_ConfigChannel+0x1ba>
 800126e:	f640 2174 	movw	r1, #2676	; 0xa74
 8001272:	4826      	ldr	r0, [pc, #152]	; (800130c <HAL_ADC_ConfigChannel+0x32c>)
 8001274:	f012 fb66 	bl	8013944 <assert_failed>
 8001278:	e78f      	b.n	800119a <HAL_ADC_ConfigChannel+0x1ba>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 800127a:	f640 2161 	movw	r1, #2657	; 0xa61
 800127e:	4823      	ldr	r0, [pc, #140]	; (800130c <HAL_ADC_ConfigChannel+0x32c>)
 8001280:	f012 fb60 	bl	8013944 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8001284:	6923      	ldr	r3, [r4, #16]
 8001286:	2b04      	cmp	r3, #4
 8001288:	f67f aeea 	bls.w	8001060 <HAL_ADC_ConfigChannel+0x80>
 800128c:	f640 2162 	movw	r1, #2658	; 0xa62
 8001290:	481e      	ldr	r0, [pc, #120]	; (800130c <HAL_ADC_ConfigChannel+0x32c>)
 8001292:	f012 fb57 	bl	8013944 <assert_failed>
 8001296:	e6e3      	b.n	8001060 <HAL_ADC_ConfigChannel+0x80>
    if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
 8001298:	68d3      	ldr	r3, [r2, #12]
 800129a:	f003 031c 	and.w	r3, r3, #28
 800129e:	2b1c      	cmp	r3, #28
 80012a0:	f47f aeed 	bne.w	800107e <HAL_ADC_ConfigChannel+0x9e>
 80012a4:	23ff      	movs	r3, #255	; 0xff
 80012a6:	e6f1      	b.n	800108c <HAL_ADC_ConfigChannel+0xac>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80012a8:	f640 215e 	movw	r1, #2654	; 0xa5e
 80012ac:	4817      	ldr	r0, [pc, #92]	; (800130c <HAL_ADC_ConfigChannel+0x32c>)
 80012ae:	f012 fb49 	bl	8013944 <assert_failed>
 80012b2:	e6a6      	b.n	8001002 <HAL_ADC_ConfigChannel+0x22>
 80012b4:	40022100 	.word	0x40022100
 80012b8:	40022000 	.word	0x40022000
 80012bc:	58026000 	.word	0x58026000
 80012c0:	47ff0000 	.word	0x47ff0000
 80012c4:	5c001000 	.word	0x5c001000
 80012c8:	04300002 	.word	0x04300002
 80012cc:	08600004 	.word	0x08600004
 80012d0:	0c900008 	.word	0x0c900008
 80012d4:	10c00010 	.word	0x10c00010
 80012d8:	19200040 	.word	0x19200040
 80012dc:	21800100 	.word	0x21800100
 80012e0:	2a000400 	.word	0x2a000400
 80012e4:	36902000 	.word	0x36902000
 80012e8:	3ac04000 	.word	0x3ac04000
 80012ec:	3ef08000 	.word	0x3ef08000
 80012f0:	43210000 	.word	0x43210000
 80012f4:	47520000 	.word	0x47520000
 80012f8:	4b840000 	.word	0x4b840000
 80012fc:	000fffff 	.word	0x000fffff
 8001300:	01041001 	.word	0x01041001
 8001304:	01041000 	.word	0x01041000
 8001308:	4fb80000 	.word	0x4fb80000
 800130c:	08144cbc 	.word	0x08144cbc
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8001310:	f640 216a 	movw	r1, #2666	; 0xa6a
 8001314:	48bd      	ldr	r0, [pc, #756]	; (800160c <HAL_ADC_ConfigChannel+0x62c>)
 8001316:	f012 fb15 	bl	8013944 <assert_failed>
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 800131a:	6923      	ldr	r3, [r4, #16]
 800131c:	2b04      	cmp	r3, #4
 800131e:	f43f aeb8 	beq.w	8001092 <HAL_ADC_ConfigChannel+0xb2>
 8001322:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8001326:	2b01      	cmp	r3, #1
 8001328:	f47f aeb3 	bne.w	8001092 <HAL_ADC_ConfigChannel+0xb2>
 800132c:	f640 216f 	movw	r1, #2671	; 0xa6f
 8001330:	48b6      	ldr	r0, [pc, #728]	; (800160c <HAL_ADC_ConfigChannel+0x62c>)
 8001332:	f012 fb07 	bl	8013944 <assert_failed>
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001336:	4bb6      	ldr	r3, [pc, #728]	; (8001610 <HAL_ADC_ConfigChannel+0x630>)
 8001338:	68e2      	ldr	r2, [r4, #12]
 800133a:	429a      	cmp	r2, r3
 800133c:	f47f aeae 	bne.w	800109c <HAL_ADC_ConfigChannel+0xbc>
    if (hadc->Instance == ADC1)
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	4ab4      	ldr	r2, [pc, #720]	; (8001614 <HAL_ADC_ConfigChannel+0x634>)
 8001344:	4293      	cmp	r3, r2
 8001346:	f000 81d8 	beq.w	80016fa <HAL_ADC_ConfigChannel+0x71a>
    if (hadc->Instance == ADC2)
 800134a:	4ab3      	ldr	r2, [pc, #716]	; (8001618 <HAL_ADC_ConfigChannel+0x638>)
 800134c:	4293      	cmp	r3, r2
 800134e:	f000 80e7 	beq.w	8001520 <HAL_ADC_ConfigChannel+0x540>
    if (hadc->Instance == ADC3)
 8001352:	4ab2      	ldr	r2, [pc, #712]	; (800161c <HAL_ADC_ConfigChannel+0x63c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	f47f af20 	bne.w	800119a <HAL_ADC_ConfigChannel+0x1ba>
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
 800135a:	6822      	ldr	r2, [r4, #0]
 800135c:	4bb0      	ldr	r3, [pc, #704]	; (8001620 <HAL_ADC_ConfigChannel+0x640>)
 800135e:	48b1      	ldr	r0, [pc, #708]	; (8001624 <HAL_ADC_ConfigChannel+0x644>)
 8001360:	49b1      	ldr	r1, [pc, #708]	; (8001628 <HAL_ADC_ConfigChannel+0x648>)
 8001362:	429a      	cmp	r2, r3
 8001364:	bf18      	it	ne
 8001366:	4282      	cmpne	r2, r0
 8001368:	48b0      	ldr	r0, [pc, #704]	; (800162c <HAL_ADC_ConfigChannel+0x64c>)
 800136a:	bf14      	ite	ne
 800136c:	2301      	movne	r3, #1
 800136e:	2300      	moveq	r3, #0
 8001370:	428a      	cmp	r2, r1
 8001372:	bf0c      	ite	eq
 8001374:	2300      	moveq	r3, #0
 8001376:	f003 0301 	andne.w	r3, r3, #1
 800137a:	f101 6106 	add.w	r1, r1, #140509184	; 0x8600000
 800137e:	4282      	cmp	r2, r0
 8001380:	bf0c      	ite	eq
 8001382:	2300      	moveq	r3, #0
 8001384:	f003 0301 	andne.w	r3, r3, #1
 8001388:	3118      	adds	r1, #24
 800138a:	48a9      	ldr	r0, [pc, #676]	; (8001630 <HAL_ADC_ConfigChannel+0x650>)
 800138c:	428a      	cmp	r2, r1
 800138e:	bf0c      	ite	eq
 8001390:	2300      	moveq	r3, #0
 8001392:	f003 0301 	andne.w	r3, r3, #1
 8001396:	f101 51ca 	add.w	r1, r1, #423624704	; 0x19400000
 800139a:	4282      	cmp	r2, r0
 800139c:	bf0c      	ite	eq
 800139e:	2300      	moveq	r3, #0
 80013a0:	f003 0301 	andne.w	r3, r3, #1
 80013a4:	f501 61fc 	add.w	r1, r1, #2016	; 0x7e0
 80013a8:	48a2      	ldr	r0, [pc, #648]	; (8001634 <HAL_ADC_ConfigChannel+0x654>)
 80013aa:	428a      	cmp	r2, r1
 80013ac:	bf0c      	ite	eq
 80013ae:	2300      	moveq	r3, #0
 80013b0:	f003 0301 	andne.w	r3, r3, #1
 80013b4:	49a0      	ldr	r1, [pc, #640]	; (8001638 <HAL_ADC_ConfigChannel+0x658>)
 80013b6:	4282      	cmp	r2, r0
 80013b8:	bf0c      	ite	eq
 80013ba:	2300      	moveq	r3, #0
 80013bc:	f003 0301 	andne.w	r3, r3, #1
 80013c0:	428a      	cmp	r2, r1
 80013c2:	bf0c      	ite	eq
 80013c4:	2300      	moveq	r3, #0
 80013c6:	f003 0301 	andne.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f43f aee5 	beq.w	800119a <HAL_ADC_ConfigChannel+0x1ba>
 80013d0:	4b9a      	ldr	r3, [pc, #616]	; (800163c <HAL_ADC_ConfigChannel+0x65c>)
 80013d2:	429a      	cmp	r2, r3
 80013d4:	f43f aee1 	beq.w	800119a <HAL_ADC_ConfigChannel+0x1ba>
 80013d8:	f640 2184 	movw	r1, #2692	; 0xa84
 80013dc:	488b      	ldr	r0, [pc, #556]	; (800160c <HAL_ADC_ConfigChannel+0x62c>)
 80013de:	f012 fab1 	bl	8013944 <assert_failed>
 80013e2:	e6da      	b.n	800119a <HAL_ADC_ConfigChannel+0x1ba>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013e4:	6821      	ldr	r1, [r4, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013e6:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 80013e8:	2207      	movs	r2, #7
 80013ea:	68a7      	ldr	r7, [r4, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013ec:	0dc8      	lsrs	r0, r1, #23
  MODIFY_REG(*preg,
 80013ee:	f3c1 5104 	ubfx	r1, r1, #20, #5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013f2:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 80013f6:	fa02 fc01 	lsl.w	ip, r2, r1
 80013fa:	fa07 f101 	lsl.w	r1, r7, r1
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80013fe:	4f90      	ldr	r7, [pc, #576]	; (8001640 <HAL_ADC_ConfigChannel+0x660>)
 8001400:	58c2      	ldr	r2, [r0, r3]
 8001402:	ea22 020c 	bic.w	r2, r2, ip
 8001406:	430a      	orrs	r2, r1
 8001408:	50c2      	str	r2, [r0, r3]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001414:	f000 8120 	beq.w	8001658 <HAL_ADC_ConfigChannel+0x678>
 8001418:	682b      	ldr	r3, [r5, #0]
 800141a:	6962      	ldr	r2, [r4, #20]
 800141c:	68d9      	ldr	r1, [r3, #12]
 800141e:	f011 0f10 	tst.w	r1, #16
 8001422:	68d9      	ldr	r1, [r3, #12]
 8001424:	f040 81ce 	bne.w	80017c4 <HAL_ADC_ConfigChannel+0x7e4>
 8001428:	f3c1 0182 	ubfx	r1, r1, #2, #3
 800142c:	0049      	lsls	r1, r1, #1
 800142e:	fa02 f101 	lsl.w	r1, r2, r1
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001432:	6920      	ldr	r0, [r4, #16]
 8001434:	6822      	ldr	r2, [r4, #0]
 8001436:	2804      	cmp	r0, #4
 8001438:	f000 81a8 	beq.w	800178c <HAL_ADC_ConfigChannel+0x7ac>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800143c:	3360      	adds	r3, #96	; 0x60
  MODIFY_REG(*preg,
 800143e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001442:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8001446:	430a      	orrs	r2, r1
 8001448:	f007 4100 	and.w	r1, r7, #2147483648	; 0x80000000
 800144c:	430a      	orrs	r2, r1
 800144e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
 8001452:	7e63      	ldrb	r3, [r4, #25]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d905      	bls.n	8001464 <HAL_ADC_ConfigChannel+0x484>
 8001458:	f640 21b2 	movw	r1, #2738	; 0xab2
 800145c:	486b      	ldr	r0, [pc, #428]	; (800160c <HAL_ADC_ConfigChannel+0x62c>)
 800145e:	f012 fa71 	bl	8013944 <assert_failed>
 8001462:	7e63      	ldrb	r3, [r4, #25]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001464:	682a      	ldr	r2, [r5, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	6921      	ldr	r1, [r4, #16]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800146a:	f102 0260 	add.w	r2, r2, #96	; 0x60
 800146e:	bf14      	ite	ne
 8001470:	2000      	movne	r0, #0
 8001472:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001476:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800147a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800147e:	4303      	orrs	r3, r0
 8001480:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
 8001484:	7e23      	ldrb	r3, [r4, #24]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d905      	bls.n	8001496 <HAL_ADC_ConfigChannel+0x4b6>
 800148a:	f640 21b6 	movw	r1, #2742	; 0xab6
 800148e:	485f      	ldr	r0, [pc, #380]	; (800160c <HAL_ADC_ConfigChannel+0x62c>)
 8001490:	f012 fa58 	bl	8013944 <assert_failed>
 8001494:	7e23      	ldrb	r3, [r4, #24]
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001496:	2b01      	cmp	r3, #1
 8001498:	682a      	ldr	r2, [r5, #0]
 800149a:	6921      	ldr	r1, [r4, #16]
 800149c:	d104      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x4c8>
 800149e:	f001 011f 	and.w	r1, r1, #31
 80014a2:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80014a6:	408e      	lsls	r6, r1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80014a8:	6913      	ldr	r3, [r2, #16]
 80014aa:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80014ae:	431e      	orrs	r6, r3
 80014b0:	6116      	str	r6, [r2, #16]
 80014b2:	682b      	ldr	r3, [r5, #0]
 80014b4:	e6a5      	b.n	8001202 <HAL_ADC_ConfigChannel+0x222>
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
 80014b6:	681b      	ldr	r3, [r3, #0]
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset/(hadc->Init.Oversampling.Ratio+1U)));
 80014b8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80014ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014be:	3001      	adds	r0, #1
 80014c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014c4:	fbb1 f1f0 	udiv	r1, r1, r0
 80014c8:	d123      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x532>
      return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 80014ca:	68d2      	ldr	r2, [r2, #12]
 80014cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d0:	0852      	lsrs	r2, r2, #1
 80014d2:	f002 020e 	and.w	r2, r2, #14
 80014d6:	40d3      	lsrs	r3, r2
 80014d8:	4299      	cmp	r1, r3
 80014da:	f200 8108 	bhi.w	80016ee <HAL_ADC_ConfigChannel+0x70e>
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 80014de:	6923      	ldr	r3, [r4, #16]
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	f43f add6 	beq.w	8001092 <HAL_ADC_ConfigChannel+0xb2>
 80014e6:	f640 216f 	movw	r1, #2671	; 0xa6f
 80014ea:	4848      	ldr	r0, [pc, #288]	; (800160c <HAL_ADC_ConfigChannel+0x62c>)
 80014ec:	f012 fa2a 	bl	8013944 <assert_failed>
 80014f0:	e721      	b.n	8001336 <HAL_ADC_ConfigChannel+0x356>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80014f2:	f44f 6126 	mov.w	r1, #2656	; 0xa60
 80014f6:	4845      	ldr	r0, [pc, #276]	; (800160c <HAL_ADC_ConfigChannel+0x62c>)
 80014f8:	f012 fa24 	bl	8013944 <assert_failed>
 80014fc:	e5a3      	b.n	8001046 <HAL_ADC_ConfigChannel+0x66>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	e67f      	b.n	8001202 <HAL_ADC_ConfigChannel+0x222>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	fa93 f3a3 	rbit	r3, r3
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	f003 031f 	and.w	r3, r3, #31
 800150e:	4098      	lsls	r0, r3
 8001510:	e658      	b.n	80011c4 <HAL_ADC_ConfigChannel+0x1e4>
    if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
 8001512:	68d3      	ldr	r3, [r2, #12]
 8001514:	f003 031c 	and.w	r3, r3, #28
 8001518:	2b1c      	cmp	r3, #28
 800151a:	d1d6      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x4ea>
 800151c:	23ff      	movs	r3, #255	; 0xff
 800151e:	e7db      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x4f8>
      assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
 8001520:	6822      	ldr	r2, [r4, #0]
 8001522:	4b3f      	ldr	r3, [pc, #252]	; (8001620 <HAL_ADC_ConfigChannel+0x640>)
 8001524:	493f      	ldr	r1, [pc, #252]	; (8001624 <HAL_ADC_ConfigChannel+0x644>)
 8001526:	4840      	ldr	r0, [pc, #256]	; (8001628 <HAL_ADC_ConfigChannel+0x648>)
 8001528:	429a      	cmp	r2, r3
 800152a:	bf18      	it	ne
 800152c:	428a      	cmpne	r2, r1
 800152e:	493f      	ldr	r1, [pc, #252]	; (800162c <HAL_ADC_ConfigChannel+0x64c>)
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	4282      	cmp	r2, r0
 8001538:	bf0c      	ite	eq
 800153a:	2300      	moveq	r3, #0
 800153c:	f003 0301 	andne.w	r3, r3, #1
 8001540:	f100 6006 	add.w	r0, r0, #140509184	; 0x8600000
 8001544:	428a      	cmp	r2, r1
 8001546:	bf0c      	ite	eq
 8001548:	2300      	moveq	r3, #0
 800154a:	f003 0301 	andne.w	r3, r3, #1
 800154e:	3018      	adds	r0, #24
 8001550:	4937      	ldr	r1, [pc, #220]	; (8001630 <HAL_ADC_ConfigChannel+0x650>)
 8001552:	4282      	cmp	r2, r0
 8001554:	bf0c      	ite	eq
 8001556:	2300      	moveq	r3, #0
 8001558:	f003 0301 	andne.w	r3, r3, #1
 800155c:	f100 50ca 	add.w	r0, r0, #423624704	; 0x19400000
 8001560:	428a      	cmp	r2, r1
 8001562:	bf0c      	ite	eq
 8001564:	2300      	moveq	r3, #0
 8001566:	f003 0301 	andne.w	r3, r3, #1
 800156a:	f500 60fc 	add.w	r0, r0, #2016	; 0x7e0
 800156e:	f101 6106 	add.w	r1, r1, #140509184	; 0x8600000
 8001572:	4282      	cmp	r2, r0
 8001574:	bf0c      	ite	eq
 8001576:	2300      	moveq	r3, #0
 8001578:	f003 0301 	andne.w	r3, r3, #1
 800157c:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8001580:	428a      	cmp	r2, r1
 8001582:	bf0c      	ite	eq
 8001584:	2300      	moveq	r3, #0
 8001586:	f003 0301 	andne.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	f43f ae05 	beq.w	800119a <HAL_ADC_ConfigChannel+0x1ba>
 8001590:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <HAL_ADC_ConfigChannel+0x664>)
 8001592:	429a      	cmp	r2, r3
 8001594:	f43f ae01 	beq.w	800119a <HAL_ADC_ConfigChannel+0x1ba>
 8001598:	f640 217e 	movw	r1, #2686	; 0xa7e
 800159c:	481b      	ldr	r0, [pc, #108]	; (800160c <HAL_ADC_ConfigChannel+0x62c>)
 800159e:	f012 f9d1 	bl	8013944 <assert_failed>
 80015a2:	682b      	ldr	r3, [r5, #0]
 80015a4:	e6d5      	b.n	8001352 <HAL_ADC_ConfigChannel+0x372>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015a6:	6829      	ldr	r1, [r5, #0]
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_ADC_ConfigChannel+0x634>)
 80015aa:	4299      	cmp	r1, r3
 80015ac:	f000 813d 	beq.w	800182a <HAL_ADC_ConfigChannel+0x84a>
 80015b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80015b4:	4299      	cmp	r1, r3
 80015b6:	f000 8138 	beq.w	800182a <HAL_ADC_ConfigChannel+0x84a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015ba:	4e18      	ldr	r6, [pc, #96]	; (800161c <HAL_ADC_ConfigChannel+0x63c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015bc:	4c22      	ldr	r4, [pc, #136]	; (8001648 <HAL_ADC_ConfigChannel+0x668>)
 80015be:	68a0      	ldr	r0, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015c0:	68b3      	ldr	r3, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015c2:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80015c6:	43db      	mvns	r3, r3
 80015c8:	f003 0301 	and.w	r3, r3, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 8141 	beq.w	8001854 <HAL_ADC_ConfigChannel+0x874>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <HAL_ADC_ConfigChannel+0x66c>)
 80015d4:	429a      	cmp	r2, r3
 80015d6:	f000 8160 	beq.w	800189a <HAL_ADC_ConfigChannel+0x8ba>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <HAL_ADC_ConfigChannel+0x670>)
 80015dc:	429a      	cmp	r2, r3
 80015de:	f000 817e 	beq.w	80018de <HAL_ADC_ConfigChannel+0x8fe>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_ADC_ConfigChannel+0x674>)
 80015e4:	429a      	cmp	r2, r3
 80015e6:	f47f ae28 	bne.w	800123a <HAL_ADC_ConfigChannel+0x25a>
            if (ADC_VREFINT_INSTANCE(hadc))
 80015ea:	0243      	lsls	r3, r0, #9
 80015ec:	f53f ae25 	bmi.w	800123a <HAL_ADC_ConfigChannel+0x25a>
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_ADC_ConfigChannel+0x63c>)
 80015f2:	4299      	cmp	r1, r3
 80015f4:	f47f ae21 	bne.w	800123a <HAL_ADC_ConfigChannel+0x25a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015f8:	68a2      	ldr	r2, [r4, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80015fa:	f446 0380 	orr.w	r3, r6, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fe:	2000      	movs	r0, #0
 8001600:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001604:	4313      	orrs	r3, r2
 8001606:	60a3      	str	r3, [r4, #8]
 8001608:	e629      	b.n	800125e <HAL_ADC_ConfigChannel+0x27e>
 800160a:	bf00      	nop
 800160c:	08144cbc 	.word	0x08144cbc
 8001610:	47ff0000 	.word	0x47ff0000
 8001614:	40022000 	.word	0x40022000
 8001618:	40022100 	.word	0x40022100
 800161c:	58026000 	.word	0x58026000
 8001620:	04300002 	.word	0x04300002
 8001624:	08600004 	.word	0x08600004
 8001628:	0c900008 	.word	0x0c900008
 800162c:	10c00010 	.word	0x10c00010
 8001630:	2a000400 	.word	0x2a000400
 8001634:	36902000 	.word	0x36902000
 8001638:	3ac04000 	.word	0x3ac04000
 800163c:	3ef08000 	.word	0x3ef08000
 8001640:	5c001000 	.word	0x5c001000
 8001644:	4b840000 	.word	0x4b840000
 8001648:	58026300 	.word	0x58026300
 800164c:	cb840000 	.word	0xcb840000
 8001650:	c7520000 	.word	0xc7520000
 8001654:	cfb80000 	.word	0xcfb80000
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001658:	682b      	ldr	r3, [r5, #0]
 800165a:	6962      	ldr	r2, [r4, #20]
 800165c:	68d9      	ldr	r1, [r3, #12]
 800165e:	f3c1 0182 	ubfx	r1, r1, #2, #3
 8001662:	0049      	lsls	r1, r1, #1
 8001664:	fa02 f101 	lsl.w	r1, r2, r1
 8001668:	e6e3      	b.n	8001432 <HAL_ADC_ConfigChannel+0x452>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800166a:	6822      	ldr	r2, [r4, #0]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800166c:	6829      	ldr	r1, [r5, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800166e:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 80ac 	beq.w	80017d0 <HAL_ADC_ConfigChannel+0x7f0>
 8001678:	fa92 f3a2 	rbit	r3, r2
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	f003 031f 	and.w	r3, r3, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001686:	2b09      	cmp	r3, #9
 8001688:	f200 80ea 	bhi.w	8001860 <HAL_ADC_ConfigChannel+0x880>
 800168c:	fa92 f3a2 	rbit	r3, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001690:	fab3 f383 	clz	r3, r3
 8001694:	fa92 f0a2 	rbit	r0, r2
 8001698:	2601      	movs	r6, #1
 800169a:	fab0 f080 	clz	r0, r0
 800169e:	3301      	adds	r3, #1
 80016a0:	4430      	add	r0, r6
 80016a2:	069b      	lsls	r3, r3, #26
 80016a4:	f000 001f 	and.w	r0, r0, #31
 80016a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 80016ac:	fa06 f000 	lsl.w	r0, r6, r0
 80016b0:	4303      	orrs	r3, r0
 80016b2:	fa92 f2a2 	rbit	r2, r2
 80016b6:	fab2 f282 	clz	r2, r2
 80016ba:	4432      	add	r2, r6
 80016bc:	f002 021f 	and.w	r2, r2, #31
 80016c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80016c4:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016c6:	431a      	orrs	r2, r3
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016c8:	3114      	adds	r1, #20
  MODIFY_REG(*preg,
 80016ca:	2707      	movs	r7, #7
 80016cc:	68a3      	ldr	r3, [r4, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016ce:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 80016d0:	f3c2 5204 	ubfx	r2, r2, #20, #5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016d4:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 80016d8:	4097      	lsls	r7, r2
 80016da:	4093      	lsls	r3, r2
 80016dc:	5870      	ldr	r0, [r6, r1]
 80016de:	ea20 0207 	bic.w	r2, r0, r7
 80016e2:	431a      	orrs	r2, r3
 80016e4:	5072      	str	r2, [r6, r1]
 80016e6:	e5a4      	b.n	8001232 <HAL_ADC_ConfigChannel+0x252>
  __HAL_LOCK(hadc);
 80016e8:	2002      	movs	r0, #2
}
 80016ea:	b003      	add	sp, #12
 80016ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset/(hadc->Init.Oversampling.Ratio+1U)));
 80016ee:	f640 2166 	movw	r1, #2662	; 0xa66
 80016f2:	4883      	ldr	r0, [pc, #524]	; (8001900 <HAL_ADC_ConfigChannel+0x920>)
 80016f4:	f012 f926 	bl	8013944 <assert_failed>
 80016f8:	e60f      	b.n	800131a <HAL_ADC_ConfigChannel+0x33a>
      assert_param(IS_ADC1_DIFF_CHANNEL(sConfig->Channel));
 80016fa:	6822      	ldr	r2, [r4, #0]
 80016fc:	4b81      	ldr	r3, [pc, #516]	; (8001904 <HAL_ADC_ConfigChannel+0x924>)
 80016fe:	4882      	ldr	r0, [pc, #520]	; (8001908 <HAL_ADC_ConfigChannel+0x928>)
 8001700:	4982      	ldr	r1, [pc, #520]	; (800190c <HAL_ADC_ConfigChannel+0x92c>)
 8001702:	429a      	cmp	r2, r3
 8001704:	bf18      	it	ne
 8001706:	4282      	cmpne	r2, r0
 8001708:	4881      	ldr	r0, [pc, #516]	; (8001910 <HAL_ADC_ConfigChannel+0x930>)
 800170a:	bf14      	ite	ne
 800170c:	2301      	movne	r3, #1
 800170e:	2300      	moveq	r3, #0
 8001710:	428a      	cmp	r2, r1
 8001712:	bf0c      	ite	eq
 8001714:	2300      	moveq	r3, #0
 8001716:	f003 0301 	andne.w	r3, r3, #1
 800171a:	f101 6106 	add.w	r1, r1, #140509184	; 0x8600000
 800171e:	4282      	cmp	r2, r0
 8001720:	bf0c      	ite	eq
 8001722:	2300      	moveq	r3, #0
 8001724:	f003 0301 	andne.w	r3, r3, #1
 8001728:	3118      	adds	r1, #24
 800172a:	487a      	ldr	r0, [pc, #488]	; (8001914 <HAL_ADC_ConfigChannel+0x934>)
 800172c:	428a      	cmp	r2, r1
 800172e:	bf0c      	ite	eq
 8001730:	2300      	moveq	r3, #0
 8001732:	f003 0301 	andne.w	r3, r3, #1
 8001736:	f101 51ca 	add.w	r1, r1, #423624704	; 0x19400000
 800173a:	4282      	cmp	r2, r0
 800173c:	bf0c      	ite	eq
 800173e:	2300      	moveq	r3, #0
 8001740:	f003 0301 	andne.w	r3, r3, #1
 8001744:	f501 61fc 	add.w	r1, r1, #2016	; 0x7e0
 8001748:	f100 6006 	add.w	r0, r0, #140509184	; 0x8600000
 800174c:	428a      	cmp	r2, r1
 800174e:	bf0c      	ite	eq
 8001750:	2300      	moveq	r3, #0
 8001752:	f003 0301 	andne.w	r3, r3, #1
 8001756:	4970      	ldr	r1, [pc, #448]	; (8001918 <HAL_ADC_ConfigChannel+0x938>)
 8001758:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800175c:	4282      	cmp	r2, r0
 800175e:	bf0c      	ite	eq
 8001760:	2300      	moveq	r3, #0
 8001762:	f003 0301 	andne.w	r3, r3, #1
 8001766:	428a      	cmp	r2, r1
 8001768:	bf0c      	ite	eq
 800176a:	2300      	moveq	r3, #0
 800176c:	f003 0301 	andne.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	f43f ad12 	beq.w	800119a <HAL_ADC_ConfigChannel+0x1ba>
 8001776:	4b69      	ldr	r3, [pc, #420]	; (800191c <HAL_ADC_ConfigChannel+0x93c>)
 8001778:	429a      	cmp	r2, r3
 800177a:	f43f ad0e 	beq.w	800119a <HAL_ADC_ConfigChannel+0x1ba>
 800177e:	f640 217a 	movw	r1, #2682	; 0xa7a
 8001782:	485f      	ldr	r0, [pc, #380]	; (8001900 <HAL_ADC_ConfigChannel+0x920>)
 8001784:	f012 f8de 	bl	8013944 <assert_failed>
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	e5de      	b.n	800134a <HAL_ADC_ConfigChannel+0x36a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800178c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800178e:	0692      	lsls	r2, r2, #26
 8001790:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8001794:	4291      	cmp	r1, r2
 8001796:	d040      	beq.n	800181a <HAL_ADC_ConfigChannel+0x83a>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001798:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800179a:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 800179e:	4291      	cmp	r1, r2
 80017a0:	d033      	beq.n	800180a <HAL_ADC_ConfigChannel+0x82a>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017a2:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80017a4:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 80017a8:	4291      	cmp	r1, r2
 80017aa:	d026      	beq.n	80017fa <HAL_ADC_ConfigChannel+0x81a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017ac:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80017ae:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 80017b2:	4291      	cmp	r1, r2
 80017b4:	f47f ad25 	bne.w	8001202 <HAL_ADC_ConfigChannel+0x222>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80017b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017be:	66da      	str	r2, [r3, #108]	; 0x6c
 80017c0:	682b      	ldr	r3, [r5, #0]
 80017c2:	e51e      	b.n	8001202 <HAL_ADC_ConfigChannel+0x222>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017c4:	0849      	lsrs	r1, r1, #1
 80017c6:	f001 0108 	and.w	r1, r1, #8
 80017ca:	fa02 f101 	lsl.w	r1, r2, r1
 80017ce:	e630      	b.n	8001432 <HAL_ADC_ConfigChannel+0x452>
 80017d0:	2601      	movs	r6, #1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017d2:	0e92      	lsrs	r2, r2, #26
 80017d4:	4432      	add	r2, r6
 80017d6:	f002 001f 	and.w	r0, r2, #31
 80017da:	0693      	lsls	r3, r2, #26
 80017dc:	4086      	lsls	r6, r0
 80017de:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017e2:	2809      	cmp	r0, #9
 80017e4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80017e8:	ea43 0306 	orr.w	r3, r3, r6
 80017ec:	f67f af6a 	bls.w	80016c4 <HAL_ADC_ConfigChannel+0x6e4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017f0:	3a1e      	subs	r2, #30
 80017f2:	0512      	lsls	r2, r2, #20
 80017f4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80017f8:	e765      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x6e6>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80017fa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001800:	669a      	str	r2, [r3, #104]	; 0x68
 8001802:	6822      	ldr	r2, [r4, #0]
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	0692      	lsls	r2, r2, #26
 8001808:	e7d0      	b.n	80017ac <HAL_ADC_ConfigChannel+0x7cc>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800180a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800180c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001810:	665a      	str	r2, [r3, #100]	; 0x64
 8001812:	6822      	ldr	r2, [r4, #0]
 8001814:	682b      	ldr	r3, [r5, #0]
 8001816:	0692      	lsls	r2, r2, #26
 8001818:	e7c3      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x7c2>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800181a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800181c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001820:	661a      	str	r2, [r3, #96]	; 0x60
 8001822:	6822      	ldr	r2, [r4, #0]
 8001824:	682b      	ldr	r3, [r5, #0]
 8001826:	0692      	lsls	r2, r2, #26
 8001828:	e7b6      	b.n	8001798 <HAL_ADC_ConfigChannel+0x7b8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800182a:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <HAL_ADC_ConfigChannel+0x940>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800182c:	4e3d      	ldr	r6, [pc, #244]	; (8001924 <HAL_ADC_ConfigChannel+0x944>)
 800182e:	4f3e      	ldr	r7, [pc, #248]	; (8001928 <HAL_ADC_ConfigChannel+0x948>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001830:	461c      	mov	r4, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001832:	6898      	ldr	r0, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001834:	68bf      	ldr	r7, [r7, #8]
 8001836:	68b3      	ldr	r3, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001838:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 800183c:	433b      	orrs	r3, r7
 800183e:	43db      	mvns	r3, r3
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	e6c2      	b.n	80015cc <HAL_ADC_ConfigChannel+0x5ec>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001846:	f640 215f 	movw	r1, #2655	; 0xa5f
 800184a:	482d      	ldr	r0, [pc, #180]	; (8001900 <HAL_ADC_ConfigChannel+0x920>)
 800184c:	f012 f87a 	bl	8013944 <assert_failed>
 8001850:	f7ff bbf5 	b.w	800103e <HAL_ADC_ConfigChannel+0x5e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001854:	6d6b      	ldr	r3, [r5, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8001856:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001858:	f043 0320 	orr.w	r3, r3, #32
 800185c:	656b      	str	r3, [r5, #84]	; 0x54
 800185e:	e4fe      	b.n	800125e <HAL_ADC_ConfigChannel+0x27e>
 8001860:	fa92 f3a2 	rbit	r3, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	fa92 f0a2 	rbit	r0, r2
 800186c:	2601      	movs	r6, #1
 800186e:	fab0 f080 	clz	r0, r0
 8001872:	3301      	adds	r3, #1
 8001874:	4430      	add	r0, r6
 8001876:	069b      	lsls	r3, r3, #26
 8001878:	f000 001f 	and.w	r0, r0, #31
 800187c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8001880:	fa06 f000 	lsl.w	r0, r6, r0
 8001884:	4303      	orrs	r3, r0
 8001886:	fa92 f2a2 	rbit	r2, r2
 800188a:	fab2 f282 	clz	r2, r2
 800188e:	4432      	add	r2, r6
 8001890:	f002 021f 	and.w	r2, r2, #31
 8001894:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001898:	e7aa      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x810>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800189a:	0200      	lsls	r0, r0, #8
 800189c:	f53f accd 	bmi.w	800123a <HAL_ADC_ConfigChannel+0x25a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_ADC_ConfigChannel+0x94c>)
 80018a2:	4299      	cmp	r1, r3
 80018a4:	f47f acc9 	bne.w	800123a <HAL_ADC_ConfigChannel+0x25a>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <HAL_ADC_ConfigChannel+0x950>)
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80018aa:	f446 0200 	orr.w	r2, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018ae:	68a1      	ldr	r1, [r4, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80018b6:	481f      	ldr	r0, [pc, #124]	; (8001934 <HAL_ADC_ConfigChannel+0x954>)
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	430a      	orrs	r2, r1
 80018bc:	fba0 1303 	umull	r1, r3, r0, r3
 80018c0:	60a2      	str	r2, [r4, #8]
 80018c2:	099b      	lsrs	r3, r3, #6
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0UL)
 80018c8:	9b01      	ldr	r3, [sp, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f43f acb5 	beq.w	800123a <HAL_ADC_ConfigChannel+0x25a>
                wait_loop_index--;
 80018d0:	9b01      	ldr	r3, [sp, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0UL)
 80018d6:	9b01      	ldr	r3, [sp, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f9      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x8f0>
 80018dc:	e4ad      	b.n	800123a <HAL_ADC_ConfigChannel+0x25a>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80018de:	01c2      	lsls	r2, r0, #7
 80018e0:	f53f acab 	bmi.w	800123a <HAL_ADC_ConfigChannel+0x25a>
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_ADC_ConfigChannel+0x94c>)
 80018e6:	4299      	cmp	r1, r3
 80018e8:	f47f aca7 	bne.w	800123a <HAL_ADC_ConfigChannel+0x25a>
 80018ec:	68a2      	ldr	r2, [r4, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80018ee:	f046 7380 	orr.w	r3, r6, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f2:	2000      	movs	r0, #0
 80018f4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60a3      	str	r3, [r4, #8]
 80018fc:	e4af      	b.n	800125e <HAL_ADC_ConfigChannel+0x27e>
 80018fe:	bf00      	nop
 8001900:	08144cbc 	.word	0x08144cbc
 8001904:	04300002 	.word	0x04300002
 8001908:	08600004 	.word	0x08600004
 800190c:	0c900008 	.word	0x0c900008
 8001910:	10c00010 	.word	0x10c00010
 8001914:	2a000400 	.word	0x2a000400
 8001918:	43210000 	.word	0x43210000
 800191c:	4b840000 	.word	0x4b840000
 8001920:	40022300 	.word	0x40022300
 8001924:	40022100 	.word	0x40022100
 8001928:	40022000 	.word	0x40022000
 800192c:	58026000 	.word	0x58026000
 8001930:	200002c4 	.word	0x200002c4
 8001934:	053e2d63 	.word	0x053e2d63

08001938 <ADC_Disable>:
{
 8001938:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800193a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800193c:	6899      	ldr	r1, [r3, #8]
 800193e:	0789      	lsls	r1, r1, #30
 8001940:	d502      	bpl.n	8001948 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001942:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8001944:	2000      	movs	r0, #0
}
 8001946:	bd38      	pop	{r3, r4, r5, pc}
 8001948:	6899      	ldr	r1, [r3, #8]
 800194a:	07ca      	lsls	r2, r1, #31
 800194c:	d524      	bpl.n	8001998 <ADC_Disable+0x60>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800194e:	6899      	ldr	r1, [r3, #8]
 8001950:	4604      	mov	r4, r0
 8001952:	f001 010d 	and.w	r1, r1, #13
 8001956:	2901      	cmp	r1, #1
 8001958:	d008      	beq.n	800196c <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195a:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800195c:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195e:	f043 0310 	orr.w	r3, r3, #16
 8001962:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001964:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001966:	4303      	orrs	r3, r0
 8001968:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800196a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800196c:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800196e:	2103      	movs	r1, #3
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <ADC_Disable+0x64>)
 8001972:	4002      	ands	r2, r0
 8001974:	f042 0202 	orr.w	r2, r2, #2
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800197e:	f7ff f84f 	bl	8000a20 <HAL_GetTick>
 8001982:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001984:	e004      	b.n	8001990 <ADC_Disable+0x58>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001986:	f7ff f84b 	bl	8000a20 <HAL_GetTick>
 800198a:	1b40      	subs	r0, r0, r5
 800198c:	2802      	cmp	r0, #2
 800198e:	d8e4      	bhi.n	800195a <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	07db      	lsls	r3, r3, #31
 8001996:	d4f6      	bmi.n	8001986 <ADC_Disable+0x4e>
  return HAL_OK;
 8001998:	2000      	movs	r0, #0
}
 800199a:	bd38      	pop	{r3, r4, r5, pc}
 800199c:	7fffffc0 	.word	0x7fffffc0

080019a0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 80019a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80019a2:	4a52      	ldr	r2, [pc, #328]	; (8001aec <ADC_ConfigureBoostMode+0x14c>)
{
 80019a4:	4605      	mov	r5, r0
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80019a6:	6803      	ldr	r3, [r0, #0]
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d027      	beq.n	80019fc <ADC_ConfigureBoostMode+0x5c>
 80019ac:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d023      	beq.n	80019fc <ADC_ConfigureBoostMode+0x5c>
 80019b4:	4b4e      	ldr	r3, [pc, #312]	; (8001af0 <ADC_ConfigureBoostMode+0x150>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80019bc:	bf14      	ite	ne
 80019be:	2301      	movne	r3, #1
 80019c0:	2300      	moveq	r3, #0
 80019c2:	b323      	cbz	r3, 8001a0e <ADC_ConfigureBoostMode+0x6e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80019c4:	f007 f92c 	bl	8008c20 <HAL_RCC_GetHCLKFreq>
    switch(hadc->Init.ClockPrescaler)
 80019c8:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80019ca:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 80019cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019d0:	d062      	beq.n	8001a98 <ADC_ConfigureBoostMode+0xf8>
 80019d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80019d6:	d072      	beq.n	8001abe <ADC_ConfigureBoostMode+0x11e>
 80019d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019dc:	d05c      	beq.n	8001a98 <ADC_ConfigureBoostMode+0xf8>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80019de:	f7ff f837 	bl	8000a50 <HAL_GetREVID>
 80019e2:	f241 0303 	movw	r3, #4099	; 0x1003
 80019e6:	4298      	cmp	r0, r3
 80019e8:	d832      	bhi.n	8001a50 <ADC_ConfigureBoostMode+0xb0>
  {
    if(freq > 20000000UL)
 80019ea:	4a42      	ldr	r2, [pc, #264]	; (8001af4 <ADC_ConfigureBoostMode+0x154>)
 80019ec:	682b      	ldr	r3, [r5, #0]
 80019ee:	4294      	cmp	r4, r2
 80019f0:	d928      	bls.n	8001a44 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019f8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80019fa:	bd38      	pop	{r3, r4, r5, pc}
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80019fc:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <ADC_ConfigureBoostMode+0x158>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8001a04:	bf14      	ite	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	2300      	moveq	r3, #0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1da      	bne.n	80019c4 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001a0e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001a12:	f008 fbbd 	bl	800a190 <HAL_RCCEx_GetPeriphCLKFreq>
    switch(hadc->Init.ClockPrescaler)
 8001a16:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001a18:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8001a1a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001a1e:	d049      	beq.n	8001ab4 <ADC_ConfigureBoostMode+0x114>
 8001a20:	d93e      	bls.n	8001aa0 <ADC_ConfigureBoostMode+0x100>
 8001a22:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001a26:	d04e      	beq.n	8001ac6 <ADC_ConfigureBoostMode+0x126>
 8001a28:	d927      	bls.n	8001a7a <ADC_ConfigureBoostMode+0xda>
 8001a2a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001a2e:	d048      	beq.n	8001ac2 <ADC_ConfigureBoostMode+0x122>
 8001a30:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001a34:	d1d3      	bne.n	80019de <ADC_ConfigureBoostMode+0x3e>
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001a36:	f7ff f80b 	bl	8000a50 <HAL_GetREVID>
 8001a3a:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a3e:	4298      	cmp	r0, r3
 8001a40:	d805      	bhi.n	8001a4e <ADC_ConfigureBoostMode+0xae>
 8001a42:	682b      	ldr	r3, [r5, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a4a:	609a      	str	r2, [r3, #8]
}
 8001a4c:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 256UL;
 8001a4e:	0a24      	lsrs	r4, r4, #8
    freq /= 2U; /* divider by 2 for Rev.V */
 8001a50:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8001a52:	4a2a      	ldr	r2, [pc, #168]	; (8001afc <ADC_ConfigureBoostMode+0x15c>)
 8001a54:	682b      	ldr	r3, [r5, #0]
 8001a56:	4294      	cmp	r4, r2
 8001a58:	d90a      	bls.n	8001a70 <ADC_ConfigureBoostMode+0xd0>
    else if(freq <= 12500000UL)
 8001a5a:	4a29      	ldr	r2, [pc, #164]	; (8001b00 <ADC_ConfigureBoostMode+0x160>)
 8001a5c:	4294      	cmp	r4, r2
 8001a5e:	d914      	bls.n	8001a8a <ADC_ConfigureBoostMode+0xea>
    else if(freq <= 25000000UL)
 8001a60:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <ADC_ConfigureBoostMode+0x164>)
 8001a62:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001a64:	689a      	ldr	r2, [r3, #8]
    else if(freq <= 25000000UL)
 8001a66:	d932      	bls.n	8001ace <ADC_ConfigureBoostMode+0x12e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001a68:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001a6c:	609a      	str	r2, [r3, #8]
}
 8001a6e:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a76:	609a      	str	r2, [r3, #8]
}
 8001a78:	bd38      	pop	{r3, r4, r5, pc}
    switch(hadc->Init.ClockPrescaler)
 8001a7a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001a7e:	d024      	beq.n	8001aca <ADC_ConfigureBoostMode+0x12a>
 8001a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a84:	d1ab      	bne.n	80019de <ADC_ConfigureBoostMode+0x3e>
        freq /= 32UL;
 8001a86:	0944      	lsrs	r4, r0, #5
        break;
 8001a88:	e7a9      	b.n	80019de <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a94:	609a      	str	r2, [r3, #8]
}
 8001a96:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8001a9e:	e79e      	b.n	80019de <ADC_ConfigureBoostMode+0x3e>
    switch(hadc->Init.ClockPrescaler)
 8001aa0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001aa4:	d006      	beq.n	8001ab4 <ADC_ConfigureBoostMode+0x114>
 8001aa6:	d818      	bhi.n	8001ada <ADC_ConfigureBoostMode+0x13a>
 8001aa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001aac:	d002      	beq.n	8001ab4 <ADC_ConfigureBoostMode+0x114>
 8001aae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ab2:	d194      	bne.n	80019de <ADC_ConfigureBoostMode+0x3e>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001ab4:	0c9b      	lsrs	r3, r3, #18
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8001abc:	e78f      	b.n	80019de <ADC_ConfigureBoostMode+0x3e>
        freq /= 4UL;
 8001abe:	0884      	lsrs	r4, r0, #2
        break;
 8001ac0:	e78d      	b.n	80019de <ADC_ConfigureBoostMode+0x3e>
        freq /= 128UL;
 8001ac2:	09c4      	lsrs	r4, r0, #7
        break;
 8001ac4:	e78b      	b.n	80019de <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 8001ac6:	0984      	lsrs	r4, r0, #6
        break;
 8001ac8:	e789      	b.n	80019de <ADC_ConfigureBoostMode+0x3e>
        freq /= 16UL;
 8001aca:	0904      	lsrs	r4, r0, #4
      break;
 8001acc:	e787      	b.n	80019de <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001ace:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad6:	609a      	str	r2, [r3, #8]
}
 8001ad8:	bd38      	pop	{r3, r4, r5, pc}
    switch(hadc->Init.ClockPrescaler)
 8001ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ade:	d0e9      	beq.n	8001ab4 <ADC_ConfigureBoostMode+0x114>
 8001ae0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001ae4:	f47f af7b 	bne.w	80019de <ADC_ConfigureBoostMode+0x3e>
 8001ae8:	e7e4      	b.n	8001ab4 <ADC_ConfigureBoostMode+0x114>
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	58026300 	.word	0x58026300
 8001af4:	01312d00 	.word	0x01312d00
 8001af8:	40022300 	.word	0x40022300
 8001afc:	005f5e10 	.word	0x005f5e10
 8001b00:	00bebc20 	.word	0x00bebc20
 8001b04:	017d7840 	.word	0x017d7840

08001b08 <HAL_ADC_Init>:
{
 8001b08:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8001b0a:	2300      	movs	r3, #0
{
 8001b0c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001b0e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8001b10:	2800      	cmp	r0, #0
 8001b12:	f000 81ab 	beq.w	8001e6c <HAL_ADC_Init+0x364>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001b16:	6803      	ldr	r3, [r0, #0]
 8001b18:	4604      	mov	r4, r0
 8001b1a:	499a      	ldr	r1, [pc, #616]	; (8001d84 <HAL_ADC_Init+0x27c>)
 8001b1c:	4a9a      	ldr	r2, [pc, #616]	; (8001d88 <HAL_ADC_Init+0x280>)
 8001b1e:	428b      	cmp	r3, r1
 8001b20:	bf18      	it	ne
 8001b22:	4293      	cmpne	r3, r2
 8001b24:	d003      	beq.n	8001b2e <HAL_ADC_Init+0x26>
 8001b26:	4a99      	ldr	r2, [pc, #612]	; (8001d8c <HAL_ADC_Init+0x284>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	f040 81b0 	bne.w	8001e8e <HAL_ADC_Init+0x386>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001b2e:	6862      	ldr	r2, [r4, #4]
 8001b30:	f422 2300 	bic.w	r3, r2, #524288	; 0x80000
 8001b34:	f422 3540 	bic.w	r5, r2, #196608	; 0x30000
 8001b38:	f422 1080 	bic.w	r0, r2, #1048576	; 0x100000
 8001b3c:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8001b40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b44:	bf18      	it	ne
 8001b46:	2d00      	cmpne	r5, #0
 8001b48:	bf14      	ite	ne
 8001b4a:	2301      	movne	r3, #1
 8001b4c:	2300      	moveq	r3, #0
 8001b4e:	f5b2 1fe0 	cmp.w	r2, #1835008	; 0x1c0000
 8001b52:	bf0c      	ite	eq
 8001b54:	2300      	moveq	r3, #0
 8001b56:	f003 0301 	andne.w	r3, r3, #1
 8001b5a:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8001b5e:	bf0c      	ite	eq
 8001b60:	2300      	moveq	r3, #0
 8001b62:	f003 0301 	andne.w	r3, r3, #1
 8001b66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8001b6a:	bf0c      	ite	eq
 8001b6c:	2300      	moveq	r3, #0
 8001b6e:	f003 0301 	andne.w	r3, r3, #1
 8001b72:	b12b      	cbz	r3, 8001b80 <HAL_ADC_Init+0x78>
 8001b74:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001b78:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001b7c:	f040 81e0 	bne.w	8001f40 <HAL_ADC_Init+0x438>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001b80:	68a2      	ldr	r2, [r4, #8]
 8001b82:	2a10      	cmp	r2, #16
 8001b84:	f200 817d 	bhi.w	8001e82 <HAL_ADC_Init+0x37a>
 8001b88:	4b81      	ldr	r3, [pc, #516]	; (8001d90 <HAL_ADC_Init+0x288>)
 8001b8a:	40d3      	lsrs	r3, r2
 8001b8c:	07de      	lsls	r6, r3, #31
 8001b8e:	f140 8178 	bpl.w	8001e82 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001b92:	68e3      	ldr	r3, [r4, #12]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	f200 80e0 	bhi.w	8001d5a <HAL_ADC_Init+0x252>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001b9a:	7d63      	ldrb	r3, [r4, #21]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	f200 80cc 	bhi.w	8001d3a <HAL_ADC_Init+0x232>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001ba2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ba4:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8001ba8:	f040 80d1 	bne.w	8001d4e <HAL_ADC_Init+0x246>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001bac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bae:	f5b2 6fd0 	cmp.w	r2, #1664	; 0x680
 8001bb2:	bf18      	it	ne
 8001bb4:	f5b2 6fb8 	cmpne.w	r2, #1472	; 0x5c0
 8001bb8:	f022 0040 	bic.w	r0, r2, #64	; 0x40
 8001bbc:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 8001bc0:	f422 7590 	bic.w	r5, r2, #288	; 0x120
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	f5b0 6f84 	cmp.w	r0, #1056	; 0x420
 8001bce:	bf0c      	ite	eq
 8001bd0:	2300      	moveq	r3, #0
 8001bd2:	f003 0301 	andne.w	r3, r3, #1
 8001bd6:	f422 7080 	bic.w	r0, r2, #256	; 0x100
 8001bda:	f5b1 6f88 	cmp.w	r1, #1088	; 0x440
 8001bde:	bf0c      	ite	eq
 8001be0:	2300      	moveq	r3, #0
 8001be2:	f003 0301 	andne.w	r3, r3, #1
 8001be6:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 8001bea:	f5b5 6f90 	cmp.w	r5, #1152	; 0x480
 8001bee:	bf0c      	ite	eq
 8001bf0:	2300      	moveq	r3, #0
 8001bf2:	f003 0301 	andne.w	r3, r3, #1
 8001bf6:	f5b0 6f9c 	cmp.w	r0, #1248	; 0x4e0
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2300      	moveq	r3, #0
 8001bfe:	f003 0301 	andne.w	r3, r3, #1
 8001c02:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8001c06:	bf0c      	ite	eq
 8001c08:	2300      	moveq	r3, #0
 8001c0a:	f003 0301 	andne.w	r3, r3, #1
 8001c0e:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8001c12:	bf0c      	ite	eq
 8001c14:	2300      	moveq	r3, #0
 8001c16:	f003 0301 	andne.w	r3, r3, #1
 8001c1a:	b11b      	cbz	r3, 8001c24 <HAL_ADC_Init+0x11c>
 8001c1c:	f432 6380 	bics.w	r3, r2, #1024	; 0x400
 8001c20:	f040 8194 	bne.w	8001f4c <HAL_ADC_Init+0x444>
  assert_param(IS_ADC_CONVERSIONDATAMGT(hadc->Init.ConversionDataManagement));
 8001c24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	f200 8165 	bhi.w	8001ef6 <HAL_ADC_Init+0x3ee>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001c2c:	6923      	ldr	r3, [r4, #16]
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d006      	beq.n	8001c40 <HAL_ADC_Init+0x138>
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d004      	beq.n	8001c40 <HAL_ADC_Init+0x138>
 8001c36:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8001c3a:	4856      	ldr	r0, [pc, #344]	; (8001d94 <HAL_ADC_Init+0x28c>)
 8001c3c:	f011 fe82 	bl	8013944 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8001c40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c42:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8001c46:	f040 8092 	bne.w	8001d6e <HAL_ADC_Init+0x266>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001c4a:	7d23      	ldrb	r3, [r4, #20]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d86a      	bhi.n	8001d26 <HAL_ADC_Init+0x21e>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8001c50:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d85d      	bhi.n	8001d14 <HAL_ADC_Init+0x20c>
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c58:	68e3      	ldr	r3, [r4, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d141      	bne.n	8001ce2 <HAL_ADC_Init+0x1da>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8001c5e:	7f23      	ldrb	r3, [r4, #28]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d04e      	beq.n	8001d02 <HAL_ADC_Init+0x1fa>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c64:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	f000 8104 	beq.w	8001e74 <HAL_ADC_Init+0x36c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c6c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	0095      	lsls	r5, r2, #2
 8001c72:	d504      	bpl.n	8001c7e <HAL_ADC_Init+0x176>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c74:	6899      	ldr	r1, [r3, #8]
 8001c76:	4a48      	ldr	r2, [pc, #288]	; (8001d98 <HAL_ADC_Init+0x290>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	00d0      	lsls	r0, r2, #3
 8001c82:	d416      	bmi.n	8001cb2 <HAL_ADC_Init+0x1aa>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c84:	4a45      	ldr	r2, [pc, #276]	; (8001d9c <HAL_ADC_Init+0x294>)
  MODIFY_REG(ADCx->CR,
 8001c86:	6898      	ldr	r0, [r3, #8]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	4d45      	ldr	r5, [pc, #276]	; (8001da0 <HAL_ADC_Init+0x298>)
 8001c8c:	0992      	lsrs	r2, r2, #6
 8001c8e:	4945      	ldr	r1, [pc, #276]	; (8001da4 <HAL_ADC_Init+0x29c>)
 8001c90:	fba5 5202 	umull	r5, r2, r5, r2
 8001c94:	4001      	ands	r1, r0
 8001c96:	0992      	lsrs	r2, r2, #6
 8001c98:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001c9c:	6099      	str	r1, [r3, #8]
 8001c9e:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8001ca0:	9b01      	ldr	r3, [sp, #4]
 8001ca2:	b12b      	cbz	r3, 8001cb0 <HAL_ADC_Init+0x1a8>
      wait_loop_index--;
 8001ca4:	9b01      	ldr	r3, [sp, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001caa:	9b01      	ldr	r3, [sp, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f9      	bne.n	8001ca4 <HAL_ADC_Init+0x19c>
 8001cb0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	00d1      	lsls	r1, r2, #3
 8001cb6:	f100 80d7 	bmi.w	8001e68 <HAL_ADC_Init+0x360>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cba:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001cbc:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cbe:	f042 0210 	orr.w	r2, r2, #16
 8001cc2:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001cc6:	432a      	orrs	r2, r5
 8001cc8:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	0752      	lsls	r2, r2, #29
 8001cce:	d56b      	bpl.n	8001da8 <HAL_ADC_Init+0x2a0>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001cd4:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd6:	f043 0310 	orr.w	r3, r3, #16
}
 8001cda:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cdc:	6563      	str	r3, [r4, #84]	; 0x54
}
 8001cde:	b003      	add	sp, #12
 8001ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001ce2:	69a3      	ldr	r3, [r4, #24]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	2b0f      	cmp	r3, #15
 8001ce8:	f200 80ff 	bhi.w	8001eea <HAL_ADC_Init+0x3e2>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001cec:	7f23      	ldrb	r3, [r4, #28]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	f200 80d3 	bhi.w	8001e9a <HAL_ADC_Init+0x392>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d1b5      	bne.n	8001c64 <HAL_ADC_Init+0x15c>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001cf8:	6a23      	ldr	r3, [r4, #32]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	2b07      	cmp	r3, #7
 8001cfe:	f200 810f 	bhi.w	8001f20 <HAL_ADC_Init+0x418>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8001d02:	7d63      	ldrb	r3, [r4, #21]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d1ad      	bne.n	8001c64 <HAL_ADC_Init+0x15c>
 8001d08:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001d0c:	4821      	ldr	r0, [pc, #132]	; (8001d94 <HAL_ADC_Init+0x28c>)
 8001d0e:	f011 fe19 	bl	8013944 <assert_failed>
 8001d12:	e7a7      	b.n	8001c64 <HAL_ADC_Init+0x15c>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8001d14:	f240 11b1 	movw	r1, #433	; 0x1b1
 8001d18:	481e      	ldr	r0, [pc, #120]	; (8001d94 <HAL_ADC_Init+0x28c>)
 8001d1a:	f011 fe13 	bl	8013944 <assert_failed>
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d1e:	68e3      	ldr	r3, [r4, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d09c      	beq.n	8001c5e <HAL_ADC_Init+0x156>
 8001d24:	e7dd      	b.n	8001ce2 <HAL_ADC_Init+0x1da>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001d26:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001d2a:	481a      	ldr	r0, [pc, #104]	; (8001d94 <HAL_ADC_Init+0x28c>)
 8001d2c:	f011 fe0a 	bl	8013944 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8001d30:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d98f      	bls.n	8001c58 <HAL_ADC_Init+0x150>
 8001d38:	e7ec      	b.n	8001d14 <HAL_ADC_Init+0x20c>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001d3a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001d3e:	4815      	ldr	r0, [pc, #84]	; (8001d94 <HAL_ADC_Init+0x28c>)
 8001d40:	f011 fe00 	bl	8013944 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001d44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d46:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8001d4a:	f43f af2f 	beq.w	8001bac <HAL_ADC_Init+0xa4>
 8001d4e:	f240 11ab 	movw	r1, #427	; 0x1ab
 8001d52:	4810      	ldr	r0, [pc, #64]	; (8001d94 <HAL_ADC_Init+0x28c>)
 8001d54:	f011 fdf6 	bl	8013944 <assert_failed>
 8001d58:	e728      	b.n	8001bac <HAL_ADC_Init+0xa4>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001d5a:	f240 11a9 	movw	r1, #425	; 0x1a9
 8001d5e:	480d      	ldr	r0, [pc, #52]	; (8001d94 <HAL_ADC_Init+0x28c>)
 8001d60:	f011 fdf0 	bl	8013944 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001d64:	7d63      	ldrb	r3, [r4, #21]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	f67f af1b 	bls.w	8001ba2 <HAL_ADC_Init+0x9a>
 8001d6c:	e7e5      	b.n	8001d3a <HAL_ADC_Init+0x232>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8001d6e:	f240 11af 	movw	r1, #431	; 0x1af
 8001d72:	4808      	ldr	r0, [pc, #32]	; (8001d94 <HAL_ADC_Init+0x28c>)
 8001d74:	f011 fde6 	bl	8013944 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001d78:	7d23      	ldrb	r3, [r4, #20]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	f67f af68 	bls.w	8001c50 <HAL_ADC_Init+0x148>
 8001d80:	e7d1      	b.n	8001d26 <HAL_ADC_Init+0x21e>
 8001d82:	bf00      	nop
 8001d84:	40022000 	.word	0x40022000
 8001d88:	40022100 	.word	0x40022100
 8001d8c:	58026000 	.word	0x58026000
 8001d90:	00011111 	.word	0x00011111
 8001d94:	08144cbc 	.word	0x08144cbc
 8001d98:	5fffffc0 	.word	0x5fffffc0
 8001d9c:	200002c4 	.word	0x200002c4
 8001da0:	053e2d63 	.word	0x053e2d63
 8001da4:	6fffffc0 	.word	0x6fffffc0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001da8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001daa:	06d7      	lsls	r7, r2, #27
 8001dac:	d491      	bmi.n	8001cd2 <HAL_ADC_Init+0x1ca>
    ADC_STATE_CLR_SET(hadc->State,
 8001dae:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001db0:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8001db4:	f042 0202 	orr.w	r2, r2, #2
 8001db8:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	07d6      	lsls	r6, r2, #31
 8001dbe:	d413      	bmi.n	8001de8 <HAL_ADC_Init+0x2e0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dc0:	4a91      	ldr	r2, [pc, #580]	; (8002008 <HAL_ADC_Init+0x500>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	f000 80b2 	beq.w	8001f2c <HAL_ADC_Init+0x424>
 8001dc8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	f000 80ad 	beq.w	8001f2c <HAL_ADC_Init+0x424>
 8001dd2:	4b8e      	ldr	r3, [pc, #568]	; (800200c <HAL_ADC_Init+0x504>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	07d9      	lsls	r1, r3, #31
 8001dd8:	d406      	bmi.n	8001de8 <HAL_ADC_Init+0x2e0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dda:	4a8d      	ldr	r2, [pc, #564]	; (8002010 <HAL_ADC_Init+0x508>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ddc:	6893      	ldr	r3, [r2, #8]
 8001dde:	6861      	ldr	r1, [r4, #4]
 8001de0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6093      	str	r3, [r2, #8]
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001de8:	f7fe fe32 	bl	8000a50 <HAL_GetREVID>
 8001dec:	f241 0303 	movw	r3, #4099	; 0x1003
 8001df0:	4298      	cmp	r0, r3
 8001df2:	f240 8086 	bls.w	8001f02 <HAL_ADC_Init+0x3fa>
 8001df6:	68a2      	ldr	r2, [r4, #8]
 8001df8:	7d61      	ldrb	r1, [r4, #21]
 8001dfa:	7f20      	ldrb	r0, [r4, #28]
 8001dfc:	2a10      	cmp	r2, #16
 8001dfe:	ea4f 3141 	mov.w	r1, r1, lsl #13
 8001e02:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001e04:	ea4f 4300 	mov.w	r3, r0, lsl #16
 8001e08:	f000 80e0 	beq.w	8001fcc <HAL_ADC_Init+0x4c4>
                  hadc->Init.Overrun                                                    |
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	4332      	orrs	r2, r6
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e10:	431a      	orrs	r2, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e12:	2801      	cmp	r0, #1
 8001e14:	d103      	bne.n	8001e1e <HAL_ADC_Init+0x316>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e16:	6a23      	ldr	r3, [r4, #32]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e20:	b123      	cbz	r3, 8001e2c <HAL_ADC_Init+0x324>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e22:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001e28:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e2a:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e2c:	6821      	ldr	r1, [r4, #0]
 8001e2e:	4b79      	ldr	r3, [pc, #484]	; (8002014 <HAL_ADC_Init+0x50c>)
 8001e30:	68c8      	ldr	r0, [r1, #12]
 8001e32:	4003      	ands	r3, r0
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e38:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e40:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_Init+0x340>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e44:	0712      	lsls	r2, r2, #28
 8001e46:	d532      	bpl.n	8001eae <HAL_ADC_Init+0x3a6>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e48:	68e2      	ldr	r2, [r4, #12]
 8001e4a:	2a01      	cmp	r2, #1
 8001e4c:	d060      	beq.n	8001f10 <HAL_ADC_Init+0x408>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e50:	f022 020f 	bic.w	r2, r2, #15
 8001e54:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e56:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8001e58:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e5a:	f023 0303 	bic.w	r3, r3, #3
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6563      	str	r3, [r4, #84]	; 0x54
}
 8001e64:	b003      	add	sp, #12
 8001e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e68:	2500      	movs	r5, #0
 8001e6a:	e72e      	b.n	8001cca <HAL_ADC_Init+0x1c2>
    return HAL_ERROR;
 8001e6c:	2501      	movs	r5, #1
}
 8001e6e:	4628      	mov	r0, r5
 8001e70:	b003      	add	sp, #12
 8001e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8001e74:	4620      	mov	r0, r4
 8001e76:	f00e feb3 	bl	8010be0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001e7a:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8001e7c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8001e80:	e6f4      	b.n	8001c6c <HAL_ADC_Init+0x164>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001e82:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8001e86:	4864      	ldr	r0, [pc, #400]	; (8002018 <HAL_ADC_Init+0x510>)
 8001e88:	f011 fd5c 	bl	8013944 <assert_failed>
 8001e8c:	e681      	b.n	8001b92 <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001e8e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8001e92:	4861      	ldr	r0, [pc, #388]	; (8002018 <HAL_ADC_Init+0x510>)
 8001e94:	f011 fd56 	bl	8013944 <assert_failed>
 8001e98:	e649      	b.n	8001b2e <HAL_ADC_Init+0x26>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001e9a:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001e9e:	485e      	ldr	r0, [pc, #376]	; (8002018 <HAL_ADC_Init+0x510>)
 8001ea0:	f011 fd50 	bl	8013944 <assert_failed>
 8001ea4:	7f23      	ldrb	r3, [r4, #28]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	f47f aedc 	bne.w	8001c64 <HAL_ADC_Init+0x15c>
 8001eac:	e724      	b.n	8001cf8 <HAL_ADC_Init+0x1f0>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001eae:	68d9      	ldr	r1, [r3, #12]
 8001eb0:	4a5a      	ldr	r2, [pc, #360]	; (800201c <HAL_ADC_Init+0x514>)
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eb2:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001eb8:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001ec0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d047      	beq.n	8001f58 <HAL_ADC_Init+0x450>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ec8:	6822      	ldr	r2, [r4, #0]
 8001eca:	6913      	ldr	r3, [r2, #16]
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ed2:	6822      	ldr	r2, [r4, #0]
      ADC_ConfigureBoostMode(hadc);
 8001ed4:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ed6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ed8:	6913      	ldr	r3, [r2, #16]
 8001eda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8001ee2:	f7ff fd5d 	bl	80019a0 <ADC_ConfigureBoostMode>
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	e7ae      	b.n	8001e48 <HAL_ADC_Init+0x340>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001eea:	f240 11b5 	movw	r1, #437	; 0x1b5
 8001eee:	484a      	ldr	r0, [pc, #296]	; (8002018 <HAL_ADC_Init+0x510>)
 8001ef0:	f011 fd28 	bl	8013944 <assert_failed>
 8001ef4:	e6fa      	b.n	8001cec <HAL_ADC_Init+0x1e4>
  assert_param(IS_ADC_CONVERSIONDATAMGT(hadc->Init.ConversionDataManagement));
 8001ef6:	f240 11ad 	movw	r1, #429	; 0x1ad
 8001efa:	4847      	ldr	r0, [pc, #284]	; (8002018 <HAL_ADC_Init+0x510>)
 8001efc:	f011 fd22 	bl	8013944 <assert_failed>
 8001f00:	e694      	b.n	8001c2c <HAL_ADC_Init+0x124>
 8001f02:	7d62      	ldrb	r2, [r4, #21]
 8001f04:	7f20      	ldrb	r0, [r4, #28]
 8001f06:	0351      	lsls	r1, r2, #13
 8001f08:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001f0a:	68a2      	ldr	r2, [r4, #8]
 8001f0c:	0403      	lsls	r3, r0, #16
 8001f0e:	e77d      	b.n	8001e0c <HAL_ADC_Init+0x304>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f12:	69a2      	ldr	r2, [r4, #24]
 8001f14:	f021 010f 	bic.w	r1, r1, #15
 8001f18:	3a01      	subs	r2, #1
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f1e:	e79a      	b.n	8001e56 <HAL_ADC_Init+0x34e>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001f20:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8001f24:	483c      	ldr	r0, [pc, #240]	; (8002018 <HAL_ADC_Init+0x510>)
 8001f26:	f011 fd0d 	bl	8013944 <assert_failed>
 8001f2a:	e698      	b.n	8001c5e <HAL_ADC_Init+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f2c:	4a36      	ldr	r2, [pc, #216]	; (8002008 <HAL_ADC_Init+0x500>)
 8001f2e:	4b3c      	ldr	r3, [pc, #240]	; (8002020 <HAL_ADC_Init+0x518>)
 8001f30:	6892      	ldr	r2, [r2, #8]
 8001f32:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	07d8      	lsls	r0, r3, #31
 8001f38:	f53f af56 	bmi.w	8001de8 <HAL_ADC_Init+0x2e0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f3c:	4a39      	ldr	r2, [pc, #228]	; (8002024 <HAL_ADC_Init+0x51c>)
 8001f3e:	e74d      	b.n	8001ddc <HAL_ADC_Init+0x2d4>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001f40:	f240 11a7 	movw	r1, #423	; 0x1a7
 8001f44:	4834      	ldr	r0, [pc, #208]	; (8002018 <HAL_ADC_Init+0x510>)
 8001f46:	f011 fcfd 	bl	8013944 <assert_failed>
 8001f4a:	e619      	b.n	8001b80 <HAL_ADC_Init+0x78>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001f4c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001f50:	4831      	ldr	r0, [pc, #196]	; (8002018 <HAL_ADC_Init+0x510>)
 8001f52:	f011 fcf7 	bl	8013944 <assert_failed>
 8001f56:	e665      	b.n	8001c24 <HAL_ADC_Init+0x11c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8001f58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f60:	d245      	bcs.n	8001fee <HAL_ADC_Init+0x4e6>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8001f62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f64:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8001f68:	bf14      	ite	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	2300      	moveq	r3, #0
 8001f6e:	2980      	cmp	r1, #128	; 0x80
 8001f70:	bf0c      	ite	eq
 8001f72:	2300      	moveq	r3, #0
 8001f74:	f003 0301 	andne.w	r3, r3, #1
 8001f78:	b113      	cbz	r3, 8001f80 <HAL_ADC_Init+0x478>
 8001f7a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001f7e:	d13c      	bne.n	8001ffa <HAL_ADC_Init+0x4f2>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8001f80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f82:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8001f86:	d12c      	bne.n	8001fe2 <HAL_ADC_Init+0x4da>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 8001f88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001f8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d121      	bne.n	8001fd6 <HAL_ADC_Init+0x4ce>
      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f94:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8001f96:	b10b      	cbz	r3, 8001f9c <HAL_ADC_Init+0x494>
            || (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8001f98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f9a:	b933      	cbnz	r3, 8001faa <HAL_ADC_Init+0x4a2>
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
 8001f9c:	b12e      	cbz	r6, 8001faa <HAL_ADC_Init+0x4a2>
 8001f9e:	f240 218b 	movw	r1, #651	; 0x28b
 8001fa2:	481d      	ldr	r0, [pc, #116]	; (8002018 <HAL_ADC_Init+0x510>)
 8001fa4:	f011 fcce 	bl	8013944 <assert_failed>
 8001fa8:	6c66      	ldr	r6, [r4, #68]	; 0x44
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001faa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001fac:	6820      	ldr	r0, [r4, #0]
 8001fae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fb0:	6907      	ldr	r7, [r0, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	491c      	ldr	r1, [pc, #112]	; (8002028 <HAL_ADC_Init+0x520>)
 8001fb6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001fb8:	4039      	ands	r1, r7
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	3a01      	subs	r2, #1
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001fc6:	4333      	orrs	r3, r6
 8001fc8:	6103      	str	r3, [r0, #16]
 8001fca:	e782      	b.n	8001ed2 <HAL_ADC_Init+0x3ca>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fcc:	f046 021c 	orr.w	r2, r6, #28
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	e71d      	b.n	8001e12 <HAL_ADC_Init+0x30a>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 8001fd6:	f240 2185 	movw	r1, #645	; 0x285
 8001fda:	480f      	ldr	r0, [pc, #60]	; (8002018 <HAL_ADC_Init+0x510>)
 8001fdc:	f011 fcb2 	bl	8013944 <assert_failed>
 8001fe0:	e7d7      	b.n	8001f92 <HAL_ADC_Init+0x48a>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8001fe2:	f44f 7121 	mov.w	r1, #644	; 0x284
 8001fe6:	480c      	ldr	r0, [pc, #48]	; (8002018 <HAL_ADC_Init+0x510>)
 8001fe8:	f011 fcac 	bl	8013944 <assert_failed>
 8001fec:	e7cc      	b.n	8001f88 <HAL_ADC_Init+0x480>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8001fee:	f240 2182 	movw	r1, #642	; 0x282
 8001ff2:	4809      	ldr	r0, [pc, #36]	; (8002018 <HAL_ADC_Init+0x510>)
 8001ff4:	f011 fca6 	bl	8013944 <assert_failed>
 8001ff8:	e7b3      	b.n	8001f62 <HAL_ADC_Init+0x45a>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8001ffa:	f240 2183 	movw	r1, #643	; 0x283
 8001ffe:	4806      	ldr	r0, [pc, #24]	; (8002018 <HAL_ADC_Init+0x510>)
 8002000:	f011 fca0 	bl	8013944 <assert_failed>
 8002004:	e7bc      	b.n	8001f80 <HAL_ADC_Init+0x478>
 8002006:	bf00      	nop
 8002008:	40022000 	.word	0x40022000
 800200c:	58026000 	.word	0x58026000
 8002010:	58026300 	.word	0x58026300
 8002014:	fff0c003 	.word	0xfff0c003
 8002018:	08144cbc 	.word	0x08144cbc
 800201c:	ffffbffc 	.word	0xffffbffc
 8002020:	40022100 	.word	0x40022100
 8002024:	40022300 	.word	0x40022300
 8002028:	fc00f81e 	.word	0xfc00f81e

0800202c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800202c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202e:	4604      	mov	r4, r0
 8002030:	4616      	mov	r6, r2
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002032:	4835      	ldr	r0, [pc, #212]	; (8002108 <HAL_ADCEx_Calibration_Start+0xdc>)
{
 8002034:	b083      	sub	sp, #12
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002036:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8002038:	2700      	movs	r7, #0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800203a:	4a34      	ldr	r2, [pc, #208]	; (800210c <HAL_ADCEx_Calibration_Start+0xe0>)
{
 800203c:	460d      	mov	r5, r1
  __IO uint32_t wait_loop_index = 0UL;
 800203e:	9701      	str	r7, [sp, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002040:	4283      	cmp	r3, r0
 8002042:	bf18      	it	ne
 8002044:	4293      	cmpne	r3, r2
 8002046:	d002      	beq.n	800204e <HAL_ADCEx_Calibration_Start+0x22>
 8002048:	4a31      	ldr	r2, [pc, #196]	; (8002110 <HAL_ADCEx_Calibration_Start+0xe4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d14b      	bne.n	80020e6 <HAL_ADCEx_Calibration_Start+0xba>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 800204e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002052:	429e      	cmp	r6, r3
 8002054:	d002      	beq.n	800205c <HAL_ADCEx_Calibration_Start+0x30>
 8002056:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <HAL_ADCEx_Calibration_Start+0xe8>)
 8002058:	429e      	cmp	r6, r3
 800205a:	d139      	bne.n	80020d0 <HAL_ADCEx_Calibration_Start+0xa4>

  /* Process locked */
  __HAL_LOCK(hadc);
 800205c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002060:	2b01      	cmp	r3, #1
 8002062:	d03d      	beq.n	80020e0 <HAL_ADCEx_Calibration_Start+0xb4>
 8002064:	2301      	movs	r3, #1

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002066:	4620      	mov	r0, r4
  __HAL_LOCK(hadc);
 8002068:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tmp_hal_status = ADC_Disable(hadc);
 800206c:	f7ff fc64 	bl	8001938 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002070:	bb28      	cbnz	r0, 80020be <HAL_ADCEx_Calibration_Start+0x92>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002072:	6d61      	ldr	r1, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8002074:	f405 3380 	and.w	r3, r5, #65536	; 0x10000
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <HAL_ADCEx_Calibration_Start+0xec>)
 800207a:	f006 4680 	and.w	r6, r6, #1073741824	; 0x40000000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
 800207e:	6827      	ldr	r7, [r4, #0]
 8002080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ADC_STATE_CLR_SET(hadc->State,
 8002084:	400a      	ands	r2, r1
 8002086:	4d25      	ldr	r5, [pc, #148]	; (800211c <HAL_ADCEx_Calibration_Start+0xf0>)
 8002088:	4333      	orrs	r3, r6

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800208a:	4925      	ldr	r1, [pc, #148]	; (8002120 <HAL_ADCEx_Calibration_Start+0xf4>)
    ADC_STATE_CLR_SET(hadc->State,
 800208c:	f042 0202 	orr.w	r2, r2, #2
 8002090:	6562      	str	r2, [r4, #84]	; 0x54
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	4015      	ands	r5, r2
 8002096:	432b      	orrs	r3, r5
 8002098:	60bb      	str	r3, [r7, #8]
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800209a:	6822      	ldr	r2, [r4, #0]
 800209c:	e005      	b.n	80020aa <HAL_ADCEx_Calibration_Start+0x7e>
      wait_loop_index++;
 800209e:	9b01      	ldr	r3, [sp, #4]
 80020a0:	3301      	adds	r3, #1
 80020a2:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80020a4:	9b01      	ldr	r3, [sp, #4]
 80020a6:	428b      	cmp	r3, r1
 80020a8:	d822      	bhi.n	80020f0 <HAL_ADCEx_Calibration_Start+0xc4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80020aa:	6893      	ldr	r3, [r2, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	dbf6      	blt.n	800209e <HAL_ADCEx_Calibration_Start+0x72>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020b2:	f023 0303 	bic.w	r3, r3, #3
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6563      	str	r3, [r4, #84]	; 0x54
 80020bc:	e003      	b.n	80020c6 <HAL_ADCEx_Calibration_Start+0x9a>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020c0:	f043 0310 	orr.w	r3, r3, #16
 80020c4:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c6:	2300      	movs	r3, #0
 80020c8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80020cc:	b003      	add	sp, #12
 80020ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 80020d0:	218f      	movs	r1, #143	; 0x8f
 80020d2:	4814      	ldr	r0, [pc, #80]	; (8002124 <HAL_ADCEx_Calibration_Start+0xf8>)
 80020d4:	f011 fc36 	bl	8013944 <assert_failed>
  __HAL_LOCK(hadc);
 80020d8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d1c1      	bne.n	8002064 <HAL_ADCEx_Calibration_Start+0x38>
 80020e0:	2002      	movs	r0, #2
}
 80020e2:	b003      	add	sp, #12
 80020e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80020e6:	218e      	movs	r1, #142	; 0x8e
 80020e8:	480e      	ldr	r0, [pc, #56]	; (8002124 <HAL_ADCEx_Calibration_Start+0xf8>)
 80020ea:	f011 fc2b 	bl	8013944 <assert_failed>
 80020ee:	e7ae      	b.n	800204e <HAL_ADCEx_Calibration_Start+0x22>
        ADC_STATE_CLR_SET(hadc->State,
 80020f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80020f2:	2200      	movs	r2, #0
        return HAL_ERROR;
 80020f4:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80020f6:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 80020fa:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 80020fe:	f043 0310 	orr.w	r3, r3, #16
 8002102:	6563      	str	r3, [r4, #84]	; 0x54
}
 8002104:	b003      	add	sp, #12
 8002106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002108:	40022000 	.word	0x40022000
 800210c:	40022100 	.word	0x40022100
 8002110:	58026000 	.word	0x58026000
 8002114:	47ff0000 	.word	0x47ff0000
 8002118:	ffffeefd 	.word	0xffffeefd
 800211c:	3ffeffc0 	.word	0x3ffeffc0
 8002120:	25c3f7ff 	.word	0x25c3f7ff
 8002124:	08144cf4 	.word	0x08144cf4

08002128 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop

0800212c <HAL_ADCEx_InjectedQueueOverflowCallback>:
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop

08002130 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop

08002134 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop

08002138 <HAL_ADCEx_EndOfSamplingCallback>:
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop

0800213c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800213c:	b570      	push	{r4, r5, r6, lr}
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef  tmphadcSlave;
  uint32_t tmphadcSlave_conversion_on_going;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 800213e:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
{
 8002140:	4604      	mov	r4, r0
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8002142:	6802      	ldr	r2, [r0, #0]
{
 8002144:	460d      	mov	r5, r1
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8002146:	429a      	cmp	r2, r3
 8002148:	d004      	beq.n	8002154 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 800214a:	f640 01bd 	movw	r1, #2237	; 0x8bd
 800214e:	4855      	ldr	r0, [pc, #340]	; (80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8002150:	f011 fbf8 	bl	8013944 <assert_failed>
  assert_param(IS_ADC_MULTIMODE(multimode->Mode));
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	2b09      	cmp	r3, #9
 8002158:	d933      	bls.n	80021c2 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 800215a:	f640 01be 	movw	r1, #2238	; 0x8be
 800215e:	4851      	ldr	r0, [pc, #324]	; (80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8002160:	f011 fbf0 	bl	8013944 <assert_failed>
 8002164:	682b      	ldr	r3, [r5, #0]
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002166:	b1cb      	cbz	r3, 800219c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
 8002168:	686b      	ldr	r3, [r5, #4]
 800216a:	f433 4200 	bics.w	r2, r3, #32768	; 0x8000
 800216e:	d002      	beq.n	8002176 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002170:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002174:	d15c      	bne.n	8002230 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8002176:	68ab      	ldr	r3, [r5, #8]
 8002178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800217c:	bf18      	it	ne
 800217e:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8002182:	bf14      	ite	ne
 8002184:	2201      	movne	r2, #1
 8002186:	2200      	moveq	r2, #0
 8002188:	f433 7140 	bics.w	r1, r3, #768	; 0x300
 800218c:	bf08      	it	eq
 800218e:	2200      	moveq	r2, #0
 8002190:	b122      	cbz	r2, 800219c <HAL_ADCEx_MultiModeConfigChannel+0x60>
 8002192:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219a:	d179      	bne.n	8002290 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800219c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d04b      	beq.n	800223c <HAL_ADCEx_MultiModeConfigChannel+0x100>

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80021a4:	4a3e      	ldr	r2, [pc, #248]	; (80022a0 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
  __HAL_LOCK(hadc);
 80021a6:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80021a8:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hadc);
 80021aa:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00d      	beq.n	80021ce <HAL_ADCEx_MultiModeConfigChannel+0x92>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b2:	6d63      	ldr	r3, [r4, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021b4:	2200      	movs	r2, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b6:	f043 0320 	orr.w	r3, r3, #32
    __HAL_UNLOCK(hadc);
 80021ba:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021be:	6563      	str	r3, [r4, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80021c0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_MULTIMODE(multimode->Mode));
 80021c2:	f240 22ef 	movw	r2, #751	; 0x2ef
 80021c6:	40da      	lsrs	r2, r3
 80021c8:	07d6      	lsls	r6, r2, #31
 80021ca:	d4cc      	bmi.n	8002166 <HAL_ADCEx_MultiModeConfigChannel+0x2a>
 80021cc:	e7c5      	b.n	800215a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021ce:	4a36      	ldr	r2, [pc, #216]	; (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 80021d0:	6891      	ldr	r1, [r2, #8]
 80021d2:	0749      	lsls	r1, r1, #29
 80021d4:	d509      	bpl.n	80021ea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80021d6:	689b      	ldr	r3, [r3, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80021da:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021dc:	f043 0320 	orr.w	r3, r3, #32
 80021e0:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80021e2:	2300      	movs	r3, #0
 80021e4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80021e8:	bd70      	pop	{r4, r5, r6, pc}
 80021ea:	6899      	ldr	r1, [r3, #8]
 80021ec:	0748      	lsls	r0, r1, #29
 80021ee:	d4f3      	bmi.n	80021d8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021f0:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80021f2:	482e      	ldr	r0, [pc, #184]	; (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x170>)
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021f4:	b321      	cbz	r1, 8002240 <HAL_ADCEx_MultiModeConfigChannel+0x104>
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80021f6:	6881      	ldr	r1, [r0, #8]
 80021f8:	686e      	ldr	r6, [r5, #4]
 80021fa:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80021fe:	4331      	orrs	r1, r6
 8002200:	6081      	str	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002202:	6821      	ldr	r1, [r4, #0]
 8002204:	4299      	cmp	r1, r3
 8002206:	d03a      	beq.n	800227e <HAL_ADCEx_MultiModeConfigChannel+0x142>
 8002208:	4291      	cmp	r1, r2
 800220a:	d038      	beq.n	800227e <HAL_ADCEx_MultiModeConfigChannel+0x142>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800220c:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	43db      	mvns	r3, r3
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d040      	beq.n	800229c <HAL_ADCEx_MultiModeConfigChannel+0x160>
        MODIFY_REG(tmpADC_Common->CCR,
 800221a:	4924      	ldr	r1, [pc, #144]	; (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x170>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800221c:	2000      	movs	r0, #0
        MODIFY_REG(tmpADC_Common->CCR,
 800221e:	682b      	ldr	r3, [r5, #0]
 8002220:	688e      	ldr	r6, [r1, #8]
 8002222:	68ad      	ldr	r5, [r5, #8]
 8002224:	4a23      	ldr	r2, [pc, #140]	; (80022b4 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 8002226:	432b      	orrs	r3, r5
 8002228:	4032      	ands	r2, r6
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
 800222e:	e7d8      	b.n	80021e2 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
 8002230:	f640 01c1 	movw	r1, #2241	; 0x8c1
 8002234:	481b      	ldr	r0, [pc, #108]	; (80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8002236:	f011 fb85 	bl	8013944 <assert_failed>
 800223a:	e79c      	b.n	8002176 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  __HAL_LOCK(hadc);
 800223c:	2002      	movs	r0, #2
}
 800223e:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002240:	6881      	ldr	r1, [r0, #8]
 8002242:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8002246:	6081      	str	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002248:	6821      	ldr	r1, [r4, #0]
 800224a:	4299      	cmp	r1, r3
 800224c:	d00e      	beq.n	800226c <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800224e:	4291      	cmp	r1, r2
 8002250:	d00c      	beq.n	800226c <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	43db      	mvns	r3, r3
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	b1f3      	cbz	r3, 800229c <HAL_ADCEx_MultiModeConfigChannel+0x160>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800225e:	4a13      	ldr	r2, [pc, #76]	; (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x170>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002260:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 8002264:	6891      	ldr	r1, [r2, #8]
 8002266:	400b      	ands	r3, r1
 8002268:	6093      	str	r3, [r2, #8]
 800226a:	e7ba      	b.n	80021e2 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800226c:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 8002270:	6892      	ldr	r2, [r2, #8]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4313      	orrs	r3, r2
 8002276:	43db      	mvns	r3, r3
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	e7ee      	b.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_ADCEx_MultiModeConfigChannel+0x164>)
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x16c>)
 8002282:	6892      	ldr	r2, [r2, #8]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4313      	orrs	r3, r2
 8002288:	43db      	mvns	r3, r3
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	e7c2      	b.n	8002216 <HAL_ADCEx_MultiModeConfigChannel+0xda>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8002290:	f640 01c2 	movw	r1, #2242	; 0x8c2
 8002294:	4803      	ldr	r0, [pc, #12]	; (80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>)
 8002296:	f011 fb55 	bl	8013944 <assert_failed>
 800229a:	e77f      	b.n	800219c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800229c:	2000      	movs	r0, #0
 800229e:	e7a0      	b.n	80021e2 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80022a0:	40022000 	.word	0x40022000
 80022a4:	08144cf4 	.word	0x08144cf4
 80022a8:	40022100 	.word	0x40022100
 80022ac:	40022300 	.word	0x40022300
 80022b0:	58026000 	.word	0x58026000
 80022b4:	fffff0e0 	.word	0xfffff0e0

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80022b8:	1ec3      	subs	r3, r0, #3
 80022ba:	2b04      	cmp	r3, #4
{
 80022bc:	b510      	push	{r4, lr}
 80022be:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80022c0:	d903      	bls.n	80022ca <HAL_NVIC_SetPriorityGrouping+0x12>
 80022c2:	2192      	movs	r1, #146	; 0x92
 80022c4:	4807      	ldr	r0, [pc, #28]	; (80022e4 <HAL_NVIC_SetPriorityGrouping+0x2c>)
 80022c6:	f011 fb3d 	bl	8013944 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ca:	4907      	ldr	r1, [pc, #28]	; (80022e8 <HAL_NVIC_SetPriorityGrouping+0x30>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022cc:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d0:	0224      	lsls	r4, r4, #8
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d6:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	4002      	ands	r2, r0
 80022dc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022de:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 80022e0:	60cc      	str	r4, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80022e2:	bd10      	pop	{r4, pc}
 80022e4:	08144d30 	.word	0x08144d30
 80022e8:	e000ed00 	.word	0xe000ed00
 80022ec:	05fa0000 	.word	0x05fa0000

080022f0 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80022f0:	2a0f      	cmp	r2, #15
{
 80022f2:	b570      	push	{r4, r5, r6, lr}
 80022f4:	4616      	mov	r6, r2
 80022f6:	4605      	mov	r5, r0
 80022f8:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80022fa:	d832      	bhi.n	8002362 <HAL_NVIC_SetPriority+0x72>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80022fc:	2c0f      	cmp	r4, #15
 80022fe:	d82b      	bhi.n	8002358 <HAL_NVIC_SetPriority+0x68>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <HAL_NVIC_SetPriority+0x7c>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002308:	f1c3 0107 	rsb	r1, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230c:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800230e:	2904      	cmp	r1, #4
 8002310:	bf28      	it	cs
 8002312:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002314:	2a06      	cmp	r2, #6
 8002316:	d917      	bls.n	8002348 <HAL_NVIC_SetPriority+0x58>
 8002318:	3b03      	subs	r3, #3
 800231a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800231e:	409a      	lsls	r2, r3
 8002320:	ea26 0602 	bic.w	r6, r6, r2

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8002328:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232a:	fa02 f201 	lsl.w	r2, r2, r1
 800232e:	ea24 0202 	bic.w	r2, r4, r2
 8002332:	fa02 f203 	lsl.w	r2, r2, r3
 8002336:	ea42 0206 	orr.w	r2, r2, r6
 800233a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800233e:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8002340:	db05      	blt.n	800234e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_NVIC_SetPriority+0x80>)
 8002344:	555a      	strb	r2, [r3, r5]

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002346:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002348:	2600      	movs	r6, #0
 800234a:	4633      	mov	r3, r6
 800234c:	e7ea      	b.n	8002324 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	f005 050f 	and.w	r5, r5, #15
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_NVIC_SetPriority+0x84>)
 8002354:	555a      	strb	r2, [r3, r5]
 8002356:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002358:	21ab      	movs	r1, #171	; 0xab
 800235a:	4807      	ldr	r0, [pc, #28]	; (8002378 <HAL_NVIC_SetPriority+0x88>)
 800235c:	f011 faf2 	bl	8013944 <assert_failed>
 8002360:	e7ce      	b.n	8002300 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002362:	21aa      	movs	r1, #170	; 0xaa
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <HAL_NVIC_SetPriority+0x88>)
 8002366:	f011 faed 	bl	8013944 <assert_failed>
 800236a:	e7c7      	b.n	80022fc <HAL_NVIC_SetPriority+0xc>
 800236c:	e000ed00 	.word	0xe000ed00
 8002370:	e000e400 	.word	0xe000e400
 8002374:	e000ed14 	.word	0xe000ed14
 8002378:	08144d30 	.word	0x08144d30

0800237c <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800237c:	2800      	cmp	r0, #0
 800237e:	db08      	blt.n	8002392 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002380:	f000 011f 	and.w	r1, r0, #31
 8002384:	2301      	movs	r3, #1
 8002386:	0940      	lsrs	r0, r0, #5
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <HAL_NVIC_EnableIRQ+0x20>)
 800238a:	408b      	lsls	r3, r1
 800238c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002390:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002392:	21be      	movs	r1, #190	; 0xbe
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <HAL_NVIC_EnableIRQ+0x24>)
 8002396:	f011 bad5 	b.w	8013944 <assert_failed>
 800239a:	bf00      	nop
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	08144d30 	.word	0x08144d30

080023a4 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80023a4:	2800      	cmp	r0, #0
 80023a6:	db0e      	blt.n	80023c6 <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a8:	0943      	lsrs	r3, r0, #5
 80023aa:	2201      	movs	r2, #1
 80023ac:	f000 001f 	and.w	r0, r0, #31
 80023b0:	4907      	ldr	r1, [pc, #28]	; (80023d0 <HAL_NVIC_DisableIRQ+0x2c>)
 80023b2:	3320      	adds	r3, #32
 80023b4:	fa02 f000 	lsl.w	r0, r2, r0
 80023b8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80023bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023c0:	f3bf 8f6f 	isb	sy

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80023c4:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80023c6:	21ce      	movs	r1, #206	; 0xce
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <HAL_NVIC_DisableIRQ+0x30>)
 80023ca:	f011 babb 	b.w	8013944 <assert_failed>
 80023ce:	bf00      	nop
 80023d0:	e000e100 	.word	0xe000e100
 80023d4:	08144d30 	.word	0x08144d30

080023d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	3801      	subs	r0, #1
 80023da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80023de:	d20d      	bcs.n	80023fc <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e4:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e6:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	25f0      	movs	r5, #240	; 0xf0
 80023ea:	4c06      	ldr	r4, [pc, #24]	; (8002404 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ec:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ee:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80023f8:	bc30      	pop	{r4, r5}
 80023fa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80023fc:	2001      	movs	r0, #1
 80023fe:	4770      	bx	lr
 8002400:	e000e010 	.word	0xe000e010
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002408:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800240e:	2000      	movs	r0, #0
 8002410:	4904      	ldr	r1, [pc, #16]	; (8002424 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002412:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002418:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 800241a:	6048      	str	r0, [r1, #4]
}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000ed00 	.word	0xe000ed00
 8002424:	e000ed90 	.word	0xe000ed90

08002428 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002428:	4a06      	ldr	r2, [pc, #24]	; (8002444 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800242a:	f040 0001 	orr.w	r0, r0, #1
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_MPU_Enable+0x20>)
 8002430:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002432:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800243a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800243e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00
 8002448:	e000ed90 	.word	0xe000ed90

0800244c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800244c:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 800244e:	7843      	ldrb	r3, [r0, #1]
{
 8002450:	4604      	mov	r4, r0
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8002452:	2b0f      	cmp	r3, #15
 8002454:	d86f      	bhi.n	8002536 <HAL_MPU_ConfigRegion+0xea>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 8002456:	7823      	ldrb	r3, [r4, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d904      	bls.n	8002466 <HAL_MPU_ConfigRegion+0x1a>
 800245c:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8002460:	4849      	ldr	r0, [pc, #292]	; (8002588 <HAL_MPU_ConfigRegion+0x13c>)
 8002462:	f011 fa6f 	bl	8013944 <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002466:	7862      	ldrb	r2, [r4, #1]
 8002468:	4b48      	ldr	r3, [pc, #288]	; (800258c <HAL_MPU_ConfigRegion+0x140>)
 800246a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800246c:	7822      	ldrb	r2, [r4, #0]
 800246e:	2a00      	cmp	r2, #0
 8002470:	d039      	beq.n	80024e6 <HAL_MPU_ConfigRegion+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 8002472:	7b23      	ldrb	r3, [r4, #12]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d839      	bhi.n	80024ec <HAL_MPU_ConfigRegion+0xa0>
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 8002478:	7ae3      	ldrb	r3, [r4, #11]
 800247a:	1f5a      	subs	r2, r3, #5
 800247c:	2a01      	cmp	r2, #1
 800247e:	d901      	bls.n	8002484 <HAL_MPU_ConfigRegion+0x38>
 8002480:	2b03      	cmp	r3, #3
 8002482:	d86d      	bhi.n	8002560 <HAL_MPU_ConfigRegion+0x114>
    assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 8002484:	7aa3      	ldrb	r3, [r4, #10]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d861      	bhi.n	800254e <HAL_MPU_ConfigRegion+0x102>
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 800248a:	7b63      	ldrb	r3, [r4, #13]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d849      	bhi.n	8002524 <HAL_MPU_ConfigRegion+0xd8>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8002490:	7ba3      	ldrb	r3, [r4, #14]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d83d      	bhi.n	8002512 <HAL_MPU_ConfigRegion+0xc6>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 8002496:	7be3      	ldrb	r3, [r4, #15]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d831      	bhi.n	8002500 <HAL_MPU_ConfigRegion+0xb4>
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 800249c:	7a63      	ldrb	r3, [r4, #9]
 800249e:	2bff      	cmp	r3, #255	; 0xff
 80024a0:	d067      	beq.n	8002572 <HAL_MPU_ConfigRegion+0x126>
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 80024a2:	7a23      	ldrb	r3, [r4, #8]
 80024a4:	3b04      	subs	r3, #4
 80024a6:	2b1b      	cmp	r3, #27
 80024a8:	d84b      	bhi.n	8002542 <HAL_MPU_ConfigRegion+0xf6>

    MPU->RBAR = MPU_Init->BaseAddress;
 80024aa:	6863      	ldr	r3, [r4, #4]
 80024ac:	4a37      	ldr	r2, [pc, #220]	; (800258c <HAL_MPU_ConfigRegion+0x140>)
 80024ae:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80024b0:	7ae3      	ldrb	r3, [r4, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024b2:	7b21      	ldrb	r1, [r4, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80024b4:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80024b6:	7825      	ldrb	r5, [r4, #0]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80024b8:	7aa0      	ldrb	r0, [r4, #10]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024ba:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024be:	7b61      	ldrb	r1, [r4, #13]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024c0:	7ba6      	ldrb	r6, [r4, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024c2:	432b      	orrs	r3, r5
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024c4:	7be5      	ldrb	r5, [r4, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024c6:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024ca:	7a60      	ldrb	r0, [r4, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024cc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80024d0:	7a21      	ldrb	r1, [r4, #8]
 80024d2:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80024d6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80024da:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80024de:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024e2:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80024e4:	bd70      	pop	{r4, r5, r6, pc}
    MPU->RBAR = 0x00;
 80024e6:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80024e8:	611a      	str	r2, [r3, #16]
}
 80024ea:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 80024ec:	f44f 719b 	mov.w	r1, #310	; 0x136
 80024f0:	4825      	ldr	r0, [pc, #148]	; (8002588 <HAL_MPU_ConfigRegion+0x13c>)
 80024f2:	f011 fa27 	bl	8013944 <assert_failed>
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 80024f6:	7ae3      	ldrb	r3, [r4, #11]
 80024f8:	1f5a      	subs	r2, r3, #5
 80024fa:	2a01      	cmp	r2, #1
 80024fc:	d8c0      	bhi.n	8002480 <HAL_MPU_ConfigRegion+0x34>
 80024fe:	e7c1      	b.n	8002484 <HAL_MPU_ConfigRegion+0x38>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 8002500:	f240 113b 	movw	r1, #315	; 0x13b
 8002504:	4820      	ldr	r0, [pc, #128]	; (8002588 <HAL_MPU_ConfigRegion+0x13c>)
 8002506:	f011 fa1d 	bl	8013944 <assert_failed>
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 800250a:	7a63      	ldrb	r3, [r4, #9]
 800250c:	2bff      	cmp	r3, #255	; 0xff
 800250e:	d1c8      	bne.n	80024a2 <HAL_MPU_ConfigRegion+0x56>
 8002510:	e02f      	b.n	8002572 <HAL_MPU_ConfigRegion+0x126>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8002512:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8002516:	481c      	ldr	r0, [pc, #112]	; (8002588 <HAL_MPU_ConfigRegion+0x13c>)
 8002518:	f011 fa14 	bl	8013944 <assert_failed>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 800251c:	7be3      	ldrb	r3, [r4, #15]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d9bc      	bls.n	800249c <HAL_MPU_ConfigRegion+0x50>
 8002522:	e7ed      	b.n	8002500 <HAL_MPU_ConfigRegion+0xb4>
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 8002524:	f240 1139 	movw	r1, #313	; 0x139
 8002528:	4817      	ldr	r0, [pc, #92]	; (8002588 <HAL_MPU_ConfigRegion+0x13c>)
 800252a:	f011 fa0b 	bl	8013944 <assert_failed>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 800252e:	7ba3      	ldrb	r3, [r4, #14]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d9b0      	bls.n	8002496 <HAL_MPU_ConfigRegion+0x4a>
 8002534:	e7ed      	b.n	8002512 <HAL_MPU_ConfigRegion+0xc6>
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8002536:	f240 112d 	movw	r1, #301	; 0x12d
 800253a:	4813      	ldr	r0, [pc, #76]	; (8002588 <HAL_MPU_ConfigRegion+0x13c>)
 800253c:	f011 fa02 	bl	8013944 <assert_failed>
 8002540:	e789      	b.n	8002456 <HAL_MPU_ConfigRegion+0xa>
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 8002542:	f240 113d 	movw	r1, #317	; 0x13d
 8002546:	4810      	ldr	r0, [pc, #64]	; (8002588 <HAL_MPU_ConfigRegion+0x13c>)
 8002548:	f011 f9fc 	bl	8013944 <assert_failed>
 800254c:	e7ad      	b.n	80024aa <HAL_MPU_ConfigRegion+0x5e>
    assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 800254e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002552:	480d      	ldr	r0, [pc, #52]	; (8002588 <HAL_MPU_ConfigRegion+0x13c>)
 8002554:	f011 f9f6 	bl	8013944 <assert_failed>
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 8002558:	7b63      	ldrb	r3, [r4, #13]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d998      	bls.n	8002490 <HAL_MPU_ConfigRegion+0x44>
 800255e:	e7e1      	b.n	8002524 <HAL_MPU_ConfigRegion+0xd8>
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 8002560:	f240 1137 	movw	r1, #311	; 0x137
 8002564:	4808      	ldr	r0, [pc, #32]	; (8002588 <HAL_MPU_ConfigRegion+0x13c>)
 8002566:	f011 f9ed 	bl	8013944 <assert_failed>
    assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 800256a:	7aa3      	ldrb	r3, [r4, #10]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d98c      	bls.n	800248a <HAL_MPU_ConfigRegion+0x3e>
 8002570:	e7ed      	b.n	800254e <HAL_MPU_ConfigRegion+0x102>
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 8002572:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8002576:	4804      	ldr	r0, [pc, #16]	; (8002588 <HAL_MPU_ConfigRegion+0x13c>)
 8002578:	f011 f9e4 	bl	8013944 <assert_failed>
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 800257c:	7a23      	ldrb	r3, [r4, #8]
 800257e:	3b04      	subs	r3, #4
 8002580:	2b1b      	cmp	r3, #27
 8002582:	d992      	bls.n	80024aa <HAL_MPU_ConfigRegion+0x5e>
 8002584:	e7dd      	b.n	8002542 <HAL_MPU_ConfigRegion+0xf6>
 8002586:	bf00      	nop
 8002588:	08144d30 	.word	0x08144d30
 800258c:	e000ed90 	.word	0xe000ed90

08002590 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002590:	4b35      	ldr	r3, [pc, #212]	; (8002668 <DMA_CalcBaseAndBitshift+0xd8>)
{
 8002592:	4601      	mov	r1, r0
 8002594:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002596:	4c35      	ldr	r4, [pc, #212]	; (800266c <DMA_CalcBaseAndBitshift+0xdc>)
 8002598:	6802      	ldr	r2, [r0, #0]
 800259a:	4835      	ldr	r0, [pc, #212]	; (8002670 <DMA_CalcBaseAndBitshift+0xe0>)
 800259c:	42a2      	cmp	r2, r4
 800259e:	bf18      	it	ne
 80025a0:	429a      	cmpne	r2, r3
 80025a2:	4d34      	ldr	r5, [pc, #208]	; (8002674 <DMA_CalcBaseAndBitshift+0xe4>)
 80025a4:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80025a8:	bf0c      	ite	eq
 80025aa:	2301      	moveq	r3, #1
 80025ac:	2300      	movne	r3, #0
 80025ae:	4282      	cmp	r2, r0
 80025b0:	bf08      	it	eq
 80025b2:	f043 0301 	orreq.w	r3, r3, #1
 80025b6:	3048      	adds	r0, #72	; 0x48
 80025b8:	42aa      	cmp	r2, r5
 80025ba:	bf08      	it	eq
 80025bc:	f043 0301 	orreq.w	r3, r3, #1
 80025c0:	3548      	adds	r5, #72	; 0x48
 80025c2:	42a2      	cmp	r2, r4
 80025c4:	bf08      	it	eq
 80025c6:	f043 0301 	orreq.w	r3, r3, #1
 80025ca:	3448      	adds	r4, #72	; 0x48
 80025cc:	4282      	cmp	r2, r0
 80025ce:	bf08      	it	eq
 80025d0:	f043 0301 	orreq.w	r3, r3, #1
 80025d4:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80025d8:	42aa      	cmp	r2, r5
 80025da:	bf08      	it	eq
 80025dc:	f043 0301 	orreq.w	r3, r3, #1
 80025e0:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80025e4:	42a2      	cmp	r2, r4
 80025e6:	bf08      	it	eq
 80025e8:	f043 0301 	orreq.w	r3, r3, #1
 80025ec:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80025f0:	4282      	cmp	r2, r0
 80025f2:	bf08      	it	eq
 80025f4:	f043 0301 	orreq.w	r3, r3, #1
 80025f8:	3048      	adds	r0, #72	; 0x48
 80025fa:	42aa      	cmp	r2, r5
 80025fc:	bf08      	it	eq
 80025fe:	f043 0301 	orreq.w	r3, r3, #1
 8002602:	3548      	adds	r5, #72	; 0x48
 8002604:	42a2      	cmp	r2, r4
 8002606:	bf08      	it	eq
 8002608:	f043 0301 	orreq.w	r3, r3, #1
 800260c:	3448      	adds	r4, #72	; 0x48
 800260e:	4282      	cmp	r2, r0
 8002610:	bf08      	it	eq
 8002612:	f043 0301 	orreq.w	r3, r3, #1
 8002616:	3048      	adds	r0, #72	; 0x48
 8002618:	42aa      	cmp	r2, r5
 800261a:	bf08      	it	eq
 800261c:	f043 0301 	orreq.w	r3, r3, #1
 8002620:	42a2      	cmp	r2, r4
 8002622:	bf08      	it	eq
 8002624:	f043 0301 	orreq.w	r3, r3, #1
 8002628:	4282      	cmp	r2, r0
 800262a:	bf08      	it	eq
 800262c:	f043 0301 	orreq.w	r3, r3, #1
 8002630:	b913      	cbnz	r3, 8002638 <DMA_CalcBaseAndBitshift+0xa8>
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <DMA_CalcBaseAndBitshift+0xe8>)
 8002634:	429a      	cmp	r2, r3
 8002636:	d112      	bne.n	800265e <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002638:	b2d3      	uxtb	r3, r2
 800263a:	4d10      	ldr	r5, [pc, #64]	; (800267c <DMA_CalcBaseAndBitshift+0xec>)
 800263c:	4810      	ldr	r0, [pc, #64]	; (8002680 <DMA_CalcBaseAndBitshift+0xf0>)
 800263e:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002640:	4c10      	ldr	r4, [pc, #64]	; (8002684 <DMA_CalcBaseAndBitshift+0xf4>)
 8002642:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002644:	fba5 5303 	umull	r5, r3, r5, r3
 8002648:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800264a:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 800264e:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002650:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002652:	bf88      	it	hi
 8002654:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002656:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002658:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800265a:	bc30      	pop	{r4, r5}
 800265c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800265e:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8002662:	6588      	str	r0, [r1, #88]	; 0x58
 8002664:	e7f9      	b.n	800265a <DMA_CalcBaseAndBitshift+0xca>
 8002666:	bf00      	nop
 8002668:	40020010 	.word	0x40020010
 800266c:	40020028 	.word	0x40020028
 8002670:	40020040 	.word	0x40020040
 8002674:	40020058 	.word	0x40020058
 8002678:	400204b8 	.word	0x400204b8
 800267c:	aaaaaaab 	.word	0xaaaaaaab
 8002680:	fffffc00 	.word	0xfffffc00
 8002684:	08029a88 	.word	0x08029a88

08002688 <HAL_DMA_Init>:
{
 8002688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800268c:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800268e:	f7fe f9c7 	bl	8000a20 <HAL_GetTick>
  if(hdma == NULL)
 8002692:	2d00      	cmp	r5, #0
 8002694:	f000 82ba 	beq.w	8002c0c <HAL_DMA_Init+0x584>
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002698:	682a      	ldr	r2, [r5, #0]
 800269a:	4604      	mov	r4, r0
 800269c:	4b9e      	ldr	r3, [pc, #632]	; (8002918 <HAL_DMA_Init+0x290>)
 800269e:	489f      	ldr	r0, [pc, #636]	; (800291c <HAL_DMA_Init+0x294>)
 80026a0:	499f      	ldr	r1, [pc, #636]	; (8002920 <HAL_DMA_Init+0x298>)
 80026a2:	429a      	cmp	r2, r3
 80026a4:	bf18      	it	ne
 80026a6:	4282      	cmpne	r2, r0
 80026a8:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	428a      	cmp	r2, r1
 80026b4:	bf0c      	ite	eq
 80026b6:	2300      	moveq	r3, #0
 80026b8:	f003 0301 	andne.w	r3, r3, #1
 80026bc:	3130      	adds	r1, #48	; 0x30
 80026be:	4282      	cmp	r2, r0
 80026c0:	bf0c      	ite	eq
 80026c2:	2300      	moveq	r3, #0
 80026c4:	f003 0301 	andne.w	r3, r3, #1
 80026c8:	3030      	adds	r0, #48	; 0x30
 80026ca:	428a      	cmp	r2, r1
 80026cc:	bf0c      	ite	eq
 80026ce:	2300      	moveq	r3, #0
 80026d0:	f003 0301 	andne.w	r3, r3, #1
 80026d4:	3130      	adds	r1, #48	; 0x30
 80026d6:	4282      	cmp	r2, r0
 80026d8:	bf0c      	ite	eq
 80026da:	2300      	moveq	r3, #0
 80026dc:	f003 0301 	andne.w	r3, r3, #1
 80026e0:	3030      	adds	r0, #48	; 0x30
 80026e2:	428a      	cmp	r2, r1
 80026e4:	bf0c      	ite	eq
 80026e6:	2300      	moveq	r3, #0
 80026e8:	f003 0301 	andne.w	r3, r3, #1
 80026ec:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80026f0:	4282      	cmp	r2, r0
 80026f2:	bf0c      	ite	eq
 80026f4:	2300      	moveq	r3, #0
 80026f6:	f003 0301 	andne.w	r3, r3, #1
 80026fa:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80026fe:	428a      	cmp	r2, r1
 8002700:	bf0c      	ite	eq
 8002702:	2300      	moveq	r3, #0
 8002704:	f003 0301 	andne.w	r3, r3, #1
 8002708:	3130      	adds	r1, #48	; 0x30
 800270a:	4282      	cmp	r2, r0
 800270c:	bf0c      	ite	eq
 800270e:	2300      	moveq	r3, #0
 8002710:	f003 0301 	andne.w	r3, r3, #1
 8002714:	3030      	adds	r0, #48	; 0x30
 8002716:	428a      	cmp	r2, r1
 8002718:	bf0c      	ite	eq
 800271a:	2300      	moveq	r3, #0
 800271c:	f003 0301 	andne.w	r3, r3, #1
 8002720:	3130      	adds	r1, #48	; 0x30
 8002722:	4282      	cmp	r2, r0
 8002724:	bf0c      	ite	eq
 8002726:	2300      	moveq	r3, #0
 8002728:	f003 0301 	andne.w	r3, r3, #1
 800272c:	3030      	adds	r0, #48	; 0x30
 800272e:	428a      	cmp	r2, r1
 8002730:	bf0c      	ite	eq
 8002732:	2300      	moveq	r3, #0
 8002734:	f003 0301 	andne.w	r3, r3, #1
 8002738:	3130      	adds	r1, #48	; 0x30
 800273a:	4282      	cmp	r2, r0
 800273c:	bf0c      	ite	eq
 800273e:	2300      	moveq	r3, #0
 8002740:	f003 0301 	andne.w	r3, r3, #1
 8002744:	3030      	adds	r0, #48	; 0x30
 8002746:	428a      	cmp	r2, r1
 8002748:	bf0c      	ite	eq
 800274a:	2300      	moveq	r3, #0
 800274c:	f003 0301 	andne.w	r3, r3, #1
 8002750:	4974      	ldr	r1, [pc, #464]	; (8002924 <HAL_DMA_Init+0x29c>)
 8002752:	4282      	cmp	r2, r0
 8002754:	bf0c      	ite	eq
 8002756:	2300      	moveq	r3, #0
 8002758:	f003 0301 	andne.w	r3, r3, #1
 800275c:	4872      	ldr	r0, [pc, #456]	; (8002928 <HAL_DMA_Init+0x2a0>)
 800275e:	428a      	cmp	r2, r1
 8002760:	bf0c      	ite	eq
 8002762:	2300      	moveq	r3, #0
 8002764:	f003 0301 	andne.w	r3, r3, #1
 8002768:	3128      	adds	r1, #40	; 0x28
 800276a:	4282      	cmp	r2, r0
 800276c:	bf0c      	ite	eq
 800276e:	2300      	moveq	r3, #0
 8002770:	f003 0301 	andne.w	r3, r3, #1
 8002774:	3028      	adds	r0, #40	; 0x28
 8002776:	428a      	cmp	r2, r1
 8002778:	bf0c      	ite	eq
 800277a:	2300      	moveq	r3, #0
 800277c:	f003 0301 	andne.w	r3, r3, #1
 8002780:	3128      	adds	r1, #40	; 0x28
 8002782:	4282      	cmp	r2, r0
 8002784:	bf0c      	ite	eq
 8002786:	2300      	moveq	r3, #0
 8002788:	f003 0301 	andne.w	r3, r3, #1
 800278c:	3028      	adds	r0, #40	; 0x28
 800278e:	428a      	cmp	r2, r1
 8002790:	bf0c      	ite	eq
 8002792:	2300      	moveq	r3, #0
 8002794:	f003 0301 	andne.w	r3, r3, #1
 8002798:	3128      	adds	r1, #40	; 0x28
 800279a:	4282      	cmp	r2, r0
 800279c:	bf0c      	ite	eq
 800279e:	2300      	moveq	r3, #0
 80027a0:	f003 0301 	andne.w	r3, r3, #1
 80027a4:	428a      	cmp	r2, r1
 80027a6:	bf0c      	ite	eq
 80027a8:	2300      	moveq	r3, #0
 80027aa:	f003 0301 	andne.w	r3, r3, #1
 80027ae:	b11b      	cbz	r3, 80027b8 <HAL_DMA_Init+0x130>
 80027b0:	4b5e      	ldr	r3, [pc, #376]	; (800292c <HAL_DMA_Init+0x2a4>)
 80027b2:	429a      	cmp	r2, r3
 80027b4:	f040 836b 	bne.w	8002e8e <HAL_DMA_Init+0x806>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80027b8:	68ab      	ldr	r3, [r5, #8]
 80027ba:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 80027be:	d002      	beq.n	80027c6 <HAL_DMA_Init+0x13e>
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	f040 8226 	bne.w	8002c12 <HAL_DMA_Init+0x58a>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80027c6:	68eb      	ldr	r3, [r5, #12]
 80027c8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80027cc:	f040 8114 	bne.w	80029f8 <HAL_DMA_Init+0x370>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80027d0:	692b      	ldr	r3, [r5, #16]
 80027d2:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80027d6:	f040 8105 	bne.w	80029e4 <HAL_DMA_Init+0x35c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80027da:	696b      	ldr	r3, [r5, #20]
 80027dc:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 80027e0:	d003      	beq.n	80027ea <HAL_DMA_Init+0x162>
 80027e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e6:	f040 821e 	bne.w	8002c26 <HAL_DMA_Init+0x59e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80027ea:	69ab      	ldr	r3, [r5, #24]
 80027ec:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 80027f0:	d003      	beq.n	80027fa <HAL_DMA_Init+0x172>
 80027f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027f6:	f040 8220 	bne.w	8002c3a <HAL_DMA_Init+0x5b2>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80027fa:	69ea      	ldr	r2, [r5, #28]
 80027fc:	f032 0320 	bics.w	r3, r2, #32
 8002800:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8002804:	bf14      	ite	ne
 8002806:	2301      	movne	r3, #1
 8002808:	2300      	moveq	r3, #0
 800280a:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800280e:	bf0c      	ite	eq
 8002810:	2300      	moveq	r3, #0
 8002812:	f003 0301 	andne.w	r3, r3, #1
 8002816:	b11b      	cbz	r3, 8002820 <HAL_DMA_Init+0x198>
 8002818:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800281c:	f040 8212 	bne.w	8002c44 <HAL_DMA_Init+0x5bc>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002820:	6a2b      	ldr	r3, [r5, #32]
 8002822:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8002826:	f040 824e 	bne.w	8002cc6 <HAL_DMA_Init+0x63e>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800282a:	682a      	ldr	r2, [r5, #0]
 800282c:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <HAL_DMA_Init+0x290>)
 800282e:	483b      	ldr	r0, [pc, #236]	; (800291c <HAL_DMA_Init+0x294>)
 8002830:	493b      	ldr	r1, [pc, #236]	; (8002920 <HAL_DMA_Init+0x298>)
 8002832:	4282      	cmp	r2, r0
 8002834:	bf18      	it	ne
 8002836:	429a      	cmpne	r2, r3
 8002838:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800283c:	bf0c      	ite	eq
 800283e:	2301      	moveq	r3, #1
 8002840:	2300      	movne	r3, #0
 8002842:	428a      	cmp	r2, r1
 8002844:	bf08      	it	eq
 8002846:	f043 0301 	orreq.w	r3, r3, #1
 800284a:	3130      	adds	r1, #48	; 0x30
 800284c:	4282      	cmp	r2, r0
 800284e:	bf08      	it	eq
 8002850:	f043 0301 	orreq.w	r3, r3, #1
 8002854:	3030      	adds	r0, #48	; 0x30
 8002856:	428a      	cmp	r2, r1
 8002858:	bf08      	it	eq
 800285a:	f043 0301 	orreq.w	r3, r3, #1
 800285e:	3130      	adds	r1, #48	; 0x30
 8002860:	4282      	cmp	r2, r0
 8002862:	bf08      	it	eq
 8002864:	f043 0301 	orreq.w	r3, r3, #1
 8002868:	3030      	adds	r0, #48	; 0x30
 800286a:	428a      	cmp	r2, r1
 800286c:	bf08      	it	eq
 800286e:	f043 0301 	orreq.w	r3, r3, #1
 8002872:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8002876:	4282      	cmp	r2, r0
 8002878:	bf08      	it	eq
 800287a:	f043 0301 	orreq.w	r3, r3, #1
 800287e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8002882:	428a      	cmp	r2, r1
 8002884:	bf08      	it	eq
 8002886:	f043 0301 	orreq.w	r3, r3, #1
 800288a:	3130      	adds	r1, #48	; 0x30
 800288c:	4282      	cmp	r2, r0
 800288e:	bf08      	it	eq
 8002890:	f043 0301 	orreq.w	r3, r3, #1
 8002894:	3030      	adds	r0, #48	; 0x30
 8002896:	428a      	cmp	r2, r1
 8002898:	bf08      	it	eq
 800289a:	f043 0301 	orreq.w	r3, r3, #1
 800289e:	3130      	adds	r1, #48	; 0x30
 80028a0:	4282      	cmp	r2, r0
 80028a2:	bf08      	it	eq
 80028a4:	f043 0301 	orreq.w	r3, r3, #1
 80028a8:	3030      	adds	r0, #48	; 0x30
 80028aa:	428a      	cmp	r2, r1
 80028ac:	bf08      	it	eq
 80028ae:	f043 0301 	orreq.w	r3, r3, #1
 80028b2:	3130      	adds	r1, #48	; 0x30
 80028b4:	4282      	cmp	r2, r0
 80028b6:	bf08      	it	eq
 80028b8:	f043 0301 	orreq.w	r3, r3, #1
 80028bc:	428a      	cmp	r2, r1
 80028be:	bf08      	it	eq
 80028c0:	f043 0301 	orreq.w	r3, r3, #1
 80028c4:	b91b      	cbnz	r3, 80028ce <HAL_DMA_Init+0x246>
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <HAL_DMA_Init+0x2a8>)
 80028c8:	429a      	cmp	r2, r3
 80028ca:	f040 8259 	bne.w	8002d80 <HAL_DMA_Init+0x6f8>
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 80028ce:	686b      	ldr	r3, [r5, #4]
 80028d0:	2b73      	cmp	r3, #115	; 0x73
 80028d2:	f200 809b 	bhi.w	8002a0c <HAL_DMA_Init+0x384>
    assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80028d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80028d8:	f033 0204 	bics.w	r2, r3, #4
 80028dc:	f040 809f 	bne.w	8002a1e <HAL_DMA_Init+0x396>
    if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80028e0:	b16b      	cbz	r3, 80028fe <HAL_DMA_Init+0x276>
      assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80028e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	f200 81e9 	bhi.w	8002cbc <HAL_DMA_Init+0x634>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80028ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80028ec:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 80028f0:	f040 822a 	bne.w	8002d48 <HAL_DMA_Init+0x6c0>
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80028f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80028f6:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 80028fa:	f040 81a8 	bne.w	8002c4e <HAL_DMA_Init+0x5c6>
    __HAL_UNLOCK(hdma);
 80028fe:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002900:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 8002902:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8002906:	2002      	movs	r0, #2
 8002908:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800290c:	6813      	ldr	r3, [r2, #0]
 800290e:	f023 0301 	bic.w	r3, r3, #1
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	e014      	b.n	8002940 <HAL_DMA_Init+0x2b8>
 8002916:	bf00      	nop
 8002918:	40020010 	.word	0x40020010
 800291c:	40020028 	.word	0x40020028
 8002920:	40020040 	.word	0x40020040
 8002924:	58025408 	.word	0x58025408
 8002928:	5802541c 	.word	0x5802541c
 800292c:	58025494 	.word	0x58025494
 8002930:	400204b8 	.word	0x400204b8
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002934:	f7fe f874 	bl	8000a20 <HAL_GetTick>
 8002938:	1b00      	subs	r0, r0, r4
 800293a:	2805      	cmp	r0, #5
 800293c:	f200 815e 	bhi.w	8002bfc <HAL_DMA_Init+0x574>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002940:	682b      	ldr	r3, [r5, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	07d0      	lsls	r0, r2, #31
 8002946:	d4f5      	bmi.n	8002934 <HAL_DMA_Init+0x2ac>
    registerValue |=  hdma->Init.Direction           |
 8002948:	e9d5 2002 	ldrd	r2, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294c:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 800294e:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002950:	e9d5 4005 	ldrd	r4, r0, [r5, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002954:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002956:	69e9      	ldr	r1, [r5, #28]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002958:	4322      	orrs	r2, r4
            hdma->Init.Mode                | hdma->Init.Priority;
 800295a:	6a2c      	ldr	r4, [r5, #32]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295c:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800295e:	6818      	ldr	r0, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002960:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002962:	49bd      	ldr	r1, [pc, #756]	; (8002c58 <HAL_DMA_Init+0x5d0>)
 8002964:	4001      	ands	r1, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002966:	6a68      	ldr	r0, [r5, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8002968:	4322      	orrs	r2, r4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800296a:	2804      	cmp	r0, #4
    registerValue |=  hdma->Init.Direction           |
 800296c:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002970:	d103      	bne.n	800297a <HAL_DMA_Init+0x2f2>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002972:	e9d5 100b 	ldrd	r1, r0, [r5, #44]	; 0x2c
 8002976:	4301      	orrs	r1, r0
 8002978:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800297a:	48b8      	ldr	r0, [pc, #736]	; (8002c5c <HAL_DMA_Init+0x5d4>)
 800297c:	49b8      	ldr	r1, [pc, #736]	; (8002c60 <HAL_DMA_Init+0x5d8>)
 800297e:	6800      	ldr	r0, [r0, #0]
 8002980:	4001      	ands	r1, r0
 8002982:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002986:	d30a      	bcc.n	800299e <HAL_DMA_Init+0x316>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002988:	6868      	ldr	r0, [r5, #4]
 800298a:	f1a0 0429 	sub.w	r4, r0, #41	; 0x29
 800298e:	2c1f      	cmp	r4, #31
 8002990:	f240 818c 	bls.w	8002cac <HAL_DMA_Init+0x624>
 8002994:	384f      	subs	r0, #79	; 0x4f
 8002996:	2803      	cmp	r0, #3
 8002998:	d801      	bhi.n	800299e <HAL_DMA_Init+0x316>
        registerValue |= DMA_SxCR_TRBUFF;
 800299a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800299e:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029a0:	6829      	ldr	r1, [r5, #0]
    registerValue |= hdma->Init.FIFOMode;
 80029a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029a4:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029a6:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029a8:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80029ac:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b0:	d144      	bne.n	8002a3c <HAL_DMA_Init+0x3b4>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029b2:	e9d5 200a 	ldrd	r2, r0, [r5, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 80029b6:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d03f      	beq.n	8002a3c <HAL_DMA_Init+0x3b4>
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029bc:	69ac      	ldr	r4, [r5, #24]
 80029be:	2c00      	cmp	r4, #0
 80029c0:	d036      	beq.n	8002a30 <HAL_DMA_Init+0x3a8>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029c2:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80029c6:	f000 823e 	beq.w	8002e46 <HAL_DMA_Init+0x7be>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80029ca:	2a02      	cmp	r2, #2
 80029cc:	d903      	bls.n	80029d6 <HAL_DMA_Init+0x34e>
 80029ce:	2a03      	cmp	r2, #3
 80029d0:	d134      	bne.n	8002a3c <HAL_DMA_Init+0x3b4>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d2:	01c2      	lsls	r2, r0, #7
 80029d4:	d532      	bpl.n	8002a3c <HAL_DMA_Init+0x3b4>
          hdma->State = HAL_DMA_STATE_READY;
 80029d6:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029d8:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80029da:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029dc:	656a      	str	r2, [r5, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80029de:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
          return HAL_ERROR;
 80029e2:	e109      	b.n	8002bf8 <HAL_DMA_Init+0x570>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80029e4:	21e4      	movs	r1, #228	; 0xe4
 80029e6:	489f      	ldr	r0, [pc, #636]	; (8002c64 <HAL_DMA_Init+0x5dc>)
 80029e8:	f010 ffac 	bl	8013944 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80029ec:	696b      	ldr	r3, [r5, #20]
 80029ee:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 80029f2:	f47f aef6 	bne.w	80027e2 <HAL_DMA_Init+0x15a>
 80029f6:	e6f8      	b.n	80027ea <HAL_DMA_Init+0x162>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80029f8:	21e3      	movs	r1, #227	; 0xe3
 80029fa:	489a      	ldr	r0, [pc, #616]	; (8002c64 <HAL_DMA_Init+0x5dc>)
 80029fc:	f010 ffa2 	bl	8013944 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002a00:	692b      	ldr	r3, [r5, #16]
 8002a02:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8002a06:	f43f aee8 	beq.w	80027da <HAL_DMA_Init+0x152>
 8002a0a:	e7eb      	b.n	80029e4 <HAL_DMA_Init+0x35c>
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 8002a0c:	21ec      	movs	r1, #236	; 0xec
 8002a0e:	4895      	ldr	r0, [pc, #596]	; (8002c64 <HAL_DMA_Init+0x5dc>)
 8002a10:	f010 ff98 	bl	8013944 <assert_failed>
    assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002a14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002a16:	f033 0204 	bics.w	r2, r3, #4
 8002a1a:	f43f af61 	beq.w	80028e0 <HAL_DMA_Init+0x258>
 8002a1e:	21ed      	movs	r1, #237	; 0xed
 8002a20:	4890      	ldr	r0, [pc, #576]	; (8002c64 <HAL_DMA_Init+0x5dc>)
 8002a22:	f010 ff8f 	bl	8013944 <assert_failed>
 8002a26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f43f af68 	beq.w	80028fe <HAL_DMA_Init+0x276>
 8002a2e:	e758      	b.n	80028e2 <HAL_DMA_Init+0x25a>
    switch (hdma->Init.FIFOThreshold)
 8002a30:	2a01      	cmp	r2, #1
 8002a32:	f000 8203 	beq.w	8002e3c <HAL_DMA_Init+0x7b4>
 8002a36:	d3cc      	bcc.n	80029d2 <HAL_DMA_Init+0x34a>
 8002a38:	2a02      	cmp	r2, #2
 8002a3a:	d0ca      	beq.n	80029d2 <HAL_DMA_Init+0x34a>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a3c:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a3e:	4628      	mov	r0, r5
 8002a40:	f7ff fda6 	bl	8002590 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a44:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002a46:	233f      	movs	r3, #63	; 0x3f
 8002a48:	f002 021f 	and.w	r2, r2, #31
 8002a4c:	4093      	lsls	r3, r2
 8002a4e:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a50:	682a      	ldr	r2, [r5, #0]
 8002a52:	4b85      	ldr	r3, [pc, #532]	; (8002c68 <HAL_DMA_Init+0x5e0>)
 8002a54:	4885      	ldr	r0, [pc, #532]	; (8002c6c <HAL_DMA_Init+0x5e4>)
 8002a56:	4986      	ldr	r1, [pc, #536]	; (8002c70 <HAL_DMA_Init+0x5e8>)
 8002a58:	4282      	cmp	r2, r0
 8002a5a:	bf18      	it	ne
 8002a5c:	429a      	cmpne	r2, r3
 8002a5e:	4e85      	ldr	r6, [pc, #532]	; (8002c74 <HAL_DMA_Init+0x5ec>)
 8002a60:	4c85      	ldr	r4, [pc, #532]	; (8002c78 <HAL_DMA_Init+0x5f0>)
 8002a62:	f100 0060 	add.w	r0, r0, #96	; 0x60
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	f8df e21c 	ldr.w	lr, [pc, #540]	; 8002c8c <HAL_DMA_Init+0x604>
 8002a70:	428a      	cmp	r2, r1
 8002a72:	bf08      	it	eq
 8002a74:	f043 0301 	orreq.w	r3, r3, #1
 8002a78:	3160      	adds	r1, #96	; 0x60
 8002a7a:	f8df c214 	ldr.w	ip, [pc, #532]	; 8002c90 <HAL_DMA_Init+0x608>
 8002a7e:	42b2      	cmp	r2, r6
 8002a80:	bf08      	it	eq
 8002a82:	f043 0301 	orreq.w	r3, r3, #1
 8002a86:	4f7d      	ldr	r7, [pc, #500]	; (8002c7c <HAL_DMA_Init+0x5f4>)
 8002a88:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8002a8c:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8002c94 <HAL_DMA_Init+0x60c>
 8002a90:	42a2      	cmp	r2, r4
 8002a92:	bf08      	it	eq
 8002a94:	f043 0301 	orreq.w	r3, r3, #1
 8002a98:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
 8002a9c:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8002c98 <HAL_DMA_Init+0x610>
 8002aa0:	4282      	cmp	r2, r0
 8002aa2:	bf08      	it	eq
 8002aa4:	f043 0301 	orreq.w	r3, r3, #1
 8002aa8:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8002aac:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8002c9c <HAL_DMA_Init+0x614>
 8002ab0:	428a      	cmp	r2, r1
 8002ab2:	bf08      	it	eq
 8002ab4:	f043 0301 	orreq.w	r3, r3, #1
 8002ab8:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8002abc:	4572      	cmp	r2, lr
 8002abe:	bf08      	it	eq
 8002ac0:	f043 0301 	orreq.w	r3, r3, #1
 8002ac4:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 8002ca0 <HAL_DMA_Init+0x618>
 8002ac8:	4562      	cmp	r2, ip
 8002aca:	bf08      	it	eq
 8002acc:	f043 0301 	orreq.w	r3, r3, #1
 8002ad0:	eba2 0e0e 	sub.w	lr, r2, lr
 8002ad4:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 8002ca4 <HAL_DMA_Init+0x61c>
 8002ad8:	42ba      	cmp	r2, r7
 8002ada:	bf08      	it	eq
 8002adc:	f043 0301 	orreq.w	r3, r3, #1
 8002ae0:	fabe fe8e 	clz	lr, lr
 8002ae4:	eba2 070c 	sub.w	r7, r2, ip
 8002ae8:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8002aec:	42b2      	cmp	r2, r6
 8002aee:	bf08      	it	eq
 8002af0:	f043 0301 	orreq.w	r3, r3, #1
 8002af4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8002af8:	eba2 060a 	sub.w	r6, r2, sl
 8002afc:	fab7 f787 	clz	r7, r7
 8002b00:	42a2      	cmp	r2, r4
 8002b02:	bf08      	it	eq
 8002b04:	f043 0301 	orreq.w	r3, r3, #1
 8002b08:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8002b0c:	eba2 040c 	sub.w	r4, r2, ip
 8002b10:	097f      	lsrs	r7, r7, #5
 8002b12:	4282      	cmp	r2, r0
 8002b14:	bf08      	it	eq
 8002b16:	f043 0301 	orreq.w	r3, r3, #1
 8002b1a:	fab6 f686 	clz	r6, r6
 8002b1e:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8002b22:	fab4 f484 	clz	r4, r4
 8002b26:	428a      	cmp	r2, r1
 8002b28:	bf08      	it	eq
 8002b2a:	f043 0301 	orreq.w	r3, r3, #1
 8002b2e:	0976      	lsrs	r6, r6, #5
 8002b30:	eba2 000a 	sub.w	r0, r2, sl
 8002b34:	eba2 010c 	sub.w	r1, r2, ip
 8002b38:	4542      	cmp	r2, r8
 8002b3a:	bf08      	it	eq
 8002b3c:	f043 0301 	orreq.w	r3, r3, #1
 8002b40:	0964      	lsrs	r4, r4, #5
 8002b42:	fab0 f080 	clz	r0, r0
 8002b46:	f10c 0c14 	add.w	ip, ip, #20
 8002b4a:	454a      	cmp	r2, r9
 8002b4c:	bf08      	it	eq
 8002b4e:	f043 0301 	orreq.w	r3, r3, #1
 8002b52:	fab1 f181 	clz	r1, r1
 8002b56:	0940      	lsrs	r0, r0, #5
 8002b58:	eba2 0c0c 	sub.w	ip, r2, ip
 8002b5c:	ea4e 0303 	orr.w	r3, lr, r3
 8002b60:	0949      	lsrs	r1, r1, #5
 8002b62:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8002ca8 <HAL_DMA_Init+0x620>
 8002b66:	fabc fc8c 	clz	ip, ip
 8002b6a:	433b      	orrs	r3, r7
 8002b6c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002b70:	eba2 0808 	sub.w	r8, r2, r8
 8002b74:	4333      	orrs	r3, r6
 8002b76:	fab8 f888 	clz	r8, r8
 8002b7a:	4323      	orrs	r3, r4
 8002b7c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002b80:	4303      	orrs	r3, r0
 8002b82:	430b      	orrs	r3, r1
 8002b84:	ea5c 0303 	orrs.w	r3, ip, r3
 8002b88:	d102      	bne.n	8002b90 <HAL_DMA_Init+0x508>
 8002b8a:	f1b8 0f00 	cmp.w	r8, #0
 8002b8e:	d02e      	beq.n	8002bee <HAL_DMA_Init+0x566>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b90:	ea47 070e 	orr.w	r7, r7, lr
 8002b94:	b2d3      	uxtb	r3, r2
 8002b96:	433e      	orrs	r6, r7
 8002b98:	4334      	orrs	r4, r6
 8002b9a:	4320      	orrs	r0, r4
 8002b9c:	4301      	orrs	r1, r0
 8002b9e:	ea5c 0101 	orrs.w	r1, ip, r1
 8002ba2:	d103      	bne.n	8002bac <HAL_DMA_Init+0x524>
 8002ba4:	f1b8 0f00 	cmp.w	r8, #0
 8002ba8:	f000 80d3 	beq.w	8002d52 <HAL_DMA_Init+0x6ca>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002bac:	4834      	ldr	r0, [pc, #208]	; (8002c80 <HAL_DMA_Init+0x5f8>)
 8002bae:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002bb0:	4a34      	ldr	r2, [pc, #208]	; (8002c84 <HAL_DMA_Init+0x5fc>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bb2:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002bb4:	fba0 0303 	umull	r0, r3, r0, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002bb8:	4833      	ldr	r0, [pc, #204]	; (8002c88 <HAL_DMA_Init+0x600>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002bba:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002bbc:	6668      	str	r0, [r5, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002bbe:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bc0:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002bc4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002bca:	662a      	str	r2, [r5, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bcc:	66ab      	str	r3, [r5, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bce:	68ab      	ldr	r3, [r5, #8]
 8002bd0:	2b80      	cmp	r3, #128	; 0x80
 8002bd2:	d07d      	beq.n	8002cd0 <HAL_DMA_Init+0x648>
 8002bd4:	792b      	ldrb	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002bd6:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bd8:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 8002bdc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002bde:	6868      	ldr	r0, [r5, #4]
 8002be0:	1e41      	subs	r1, r0, #1
 8002be2:	2907      	cmp	r1, #7
 8002be4:	d978      	bls.n	8002cd8 <HAL_DMA_Init+0x650>
      hdma->DMAmuxRequestGen = 0U;
 8002be6:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8002be8:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bec:	676b      	str	r3, [r5, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bee:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002bf0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf2:	6568      	str	r0, [r5, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002bf4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8002bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bfc:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8002bfe:	2303      	movs	r3, #3
        return HAL_ERROR;
 8002c00:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c02:	656a      	str	r2, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c04:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8002c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8002c0c:	2001      	movs	r0, #1
}
 8002c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002c12:	21e2      	movs	r1, #226	; 0xe2
 8002c14:	4813      	ldr	r0, [pc, #76]	; (8002c64 <HAL_DMA_Init+0x5dc>)
 8002c16:	f010 fe95 	bl	8013944 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002c1a:	68eb      	ldr	r3, [r5, #12]
 8002c1c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8002c20:	f43f add6 	beq.w	80027d0 <HAL_DMA_Init+0x148>
 8002c24:	e6e8      	b.n	80029f8 <HAL_DMA_Init+0x370>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002c26:	21e5      	movs	r1, #229	; 0xe5
 8002c28:	480e      	ldr	r0, [pc, #56]	; (8002c64 <HAL_DMA_Init+0x5dc>)
 8002c2a:	f010 fe8b 	bl	8013944 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002c2e:	69ab      	ldr	r3, [r5, #24]
 8002c30:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8002c34:	f47f addd 	bne.w	80027f2 <HAL_DMA_Init+0x16a>
 8002c38:	e5df      	b.n	80027fa <HAL_DMA_Init+0x172>
 8002c3a:	21e6      	movs	r1, #230	; 0xe6
 8002c3c:	4809      	ldr	r0, [pc, #36]	; (8002c64 <HAL_DMA_Init+0x5dc>)
 8002c3e:	f010 fe81 	bl	8013944 <assert_failed>
 8002c42:	e5da      	b.n	80027fa <HAL_DMA_Init+0x172>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002c44:	21e7      	movs	r1, #231	; 0xe7
 8002c46:	4807      	ldr	r0, [pc, #28]	; (8002c64 <HAL_DMA_Init+0x5dc>)
 8002c48:	f010 fe7c 	bl	8013944 <assert_failed>
 8002c4c:	e5e8      	b.n	8002820 <HAL_DMA_Init+0x198>
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8002c4e:	21f4      	movs	r1, #244	; 0xf4
 8002c50:	4804      	ldr	r0, [pc, #16]	; (8002c64 <HAL_DMA_Init+0x5dc>)
 8002c52:	f010 fe77 	bl	8013944 <assert_failed>
 8002c56:	e652      	b.n	80028fe <HAL_DMA_Init+0x276>
 8002c58:	fe10803f 	.word	0xfe10803f
 8002c5c:	5c001000 	.word	0x5c001000
 8002c60:	ffff0000 	.word	0xffff0000
 8002c64:	08144d6c 	.word	0x08144d6c
 8002c68:	40020010 	.word	0x40020010
 8002c6c:	40020028 	.word	0x40020028
 8002c70:	40020040 	.word	0x40020040
 8002c74:	40020058 	.word	0x40020058
 8002c78:	40020070 	.word	0x40020070
 8002c7c:	40020428 	.word	0x40020428
 8002c80:	cccccccd 	.word	0xcccccccd
 8002c84:	16009600 	.word	0x16009600
 8002c88:	58025880 	.word	0x58025880
 8002c8c:	400200b8 	.word	0x400200b8
 8002c90:	40020410 	.word	0x40020410
 8002c94:	400204a0 	.word	0x400204a0
 8002c98:	58025430 	.word	0x58025430
 8002c9c:	400204b8 	.word	0x400204b8
 8002ca0:	58025408 	.word	0x58025408
 8002ca4:	5802541c 	.word	0x5802541c
 8002ca8:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002cac:	497a      	ldr	r1, [pc, #488]	; (8002e98 <HAL_DMA_Init+0x810>)
 8002cae:	40e1      	lsrs	r1, r4
 8002cb0:	07c9      	lsls	r1, r1, #31
 8002cb2:	f57f ae6f 	bpl.w	8002994 <HAL_DMA_Init+0x30c>
        registerValue |= DMA_SxCR_TRBUFF;
 8002cb6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002cba:	e670      	b.n	800299e <HAL_DMA_Init+0x316>
      assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002cbc:	21f2      	movs	r1, #242	; 0xf2
 8002cbe:	4877      	ldr	r0, [pc, #476]	; (8002e9c <HAL_DMA_Init+0x814>)
 8002cc0:	f010 fe40 	bl	8013944 <assert_failed>
 8002cc4:	e611      	b.n	80028ea <HAL_DMA_Init+0x262>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002cc6:	21e8      	movs	r1, #232	; 0xe8
 8002cc8:	4874      	ldr	r0, [pc, #464]	; (8002e9c <HAL_DMA_Init+0x814>)
 8002cca:	f010 fe3b 	bl	8013944 <assert_failed>
 8002cce:	e5ac      	b.n	800282a <HAL_DMA_Init+0x1a2>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	6069      	str	r1, [r5, #4]
 8002cd6:	e77e      	b.n	8002bd6 <HAL_DMA_Init+0x54e>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cd8:	682a      	ldr	r2, [r5, #0]
 8002cda:	4b71      	ldr	r3, [pc, #452]	; (8002ea0 <HAL_DMA_Init+0x818>)
 8002cdc:	4e71      	ldr	r6, [pc, #452]	; (8002ea4 <HAL_DMA_Init+0x81c>)
 8002cde:	4c72      	ldr	r4, [pc, #456]	; (8002ea8 <HAL_DMA_Init+0x820>)
 8002ce0:	42b2      	cmp	r2, r6
 8002ce2:	bf18      	it	ne
 8002ce4:	429a      	cmpne	r2, r3
 8002ce6:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	42a2      	cmp	r2, r4
 8002cf2:	bf08      	it	eq
 8002cf4:	f043 0301 	orreq.w	r3, r3, #1
 8002cf8:	3428      	adds	r4, #40	; 0x28
 8002cfa:	42b2      	cmp	r2, r6
 8002cfc:	bf08      	it	eq
 8002cfe:	f043 0301 	orreq.w	r3, r3, #1
 8002d02:	3628      	adds	r6, #40	; 0x28
 8002d04:	42a2      	cmp	r2, r4
 8002d06:	bf08      	it	eq
 8002d08:	f043 0301 	orreq.w	r3, r3, #1
 8002d0c:	3428      	adds	r4, #40	; 0x28
 8002d0e:	42b2      	cmp	r2, r6
 8002d10:	bf08      	it	eq
 8002d12:	f043 0301 	orreq.w	r3, r3, #1
 8002d16:	42a2      	cmp	r2, r4
 8002d18:	bf08      	it	eq
 8002d1a:	f043 0301 	orreq.w	r3, r3, #1
 8002d1e:	b91b      	cbnz	r3, 8002d28 <HAL_DMA_Init+0x6a0>
 8002d20:	4b62      	ldr	r3, [pc, #392]	; (8002eac <HAL_DMA_Init+0x824>)
 8002d22:	429a      	cmp	r2, r3
 8002d24:	f040 809e 	bne.w	8002e64 <HAL_DMA_Init+0x7dc>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d28:	4b61      	ldr	r3, [pc, #388]	; (8002eb0 <HAL_DMA_Init+0x828>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002d2a:	4c62      	ldr	r4, [pc, #392]	; (8002eb4 <HAL_DMA_Init+0x82c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d2c:	4403      	add	r3, r0
 8002d2e:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002d30:	2201      	movs	r2, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d32:	2000      	movs	r0, #0
 8002d34:	672c      	str	r4, [r5, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002d36:	fa02 f101 	lsl.w	r1, r2, r1
 8002d3a:	66eb      	str	r3, [r5, #108]	; 0x6c
 8002d3c:	6769      	str	r1, [r5, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d3e:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d40:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	e752      	b.n	8002bee <HAL_DMA_Init+0x566>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002d48:	21f3      	movs	r1, #243	; 0xf3
 8002d4a:	4854      	ldr	r0, [pc, #336]	; (8002e9c <HAL_DMA_Init+0x814>)
 8002d4c:	f010 fdfa 	bl	8013944 <assert_failed>
 8002d50:	e5d0      	b.n	80028f4 <HAL_DMA_Init+0x26c>
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002d52:	4959      	ldr	r1, [pc, #356]	; (8002eb8 <HAL_DMA_Init+0x830>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002d54:	3b10      	subs	r3, #16
 8002d56:	4859      	ldr	r0, [pc, #356]	; (8002ebc <HAL_DMA_Init+0x834>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002d58:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002d5a:	fba0 0303 	umull	r0, r3, r0, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002d5e:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002d60:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002d64:	d800      	bhi.n	8002d68 <HAL_DMA_Init+0x6e0>
      stream_number += 8U;
 8002d66:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002d68:	4a55      	ldr	r2, [pc, #340]	; (8002ec0 <HAL_DMA_Init+0x838>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002d6a:	f003 041f 	and.w	r4, r3, #31
 8002d6e:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002d70:	4854      	ldr	r0, [pc, #336]	; (8002ec4 <HAL_DMA_Init+0x83c>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002d72:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002d74:	40a1      	lsls	r1, r4
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002d76:	6668      	str	r0, [r5, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002d78:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002d7a:	66a9      	str	r1, [r5, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002d7c:	662a      	str	r2, [r5, #96]	; 0x60
 8002d7e:	e726      	b.n	8002bce <HAL_DMA_Init+0x546>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d80:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_DMA_Init+0x818>)
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d01e      	beq.n	8002dc4 <HAL_DMA_Init+0x73c>
 8002d86:	3314      	adds	r3, #20
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d01b      	beq.n	8002dc4 <HAL_DMA_Init+0x73c>
 8002d8c:	4b46      	ldr	r3, [pc, #280]	; (8002ea8 <HAL_DMA_Init+0x820>)
 8002d8e:	494e      	ldr	r1, [pc, #312]	; (8002ec8 <HAL_DMA_Init+0x840>)
 8002d90:	4c4e      	ldr	r4, [pc, #312]	; (8002ecc <HAL_DMA_Init+0x844>)
 8002d92:	428a      	cmp	r2, r1
 8002d94:	bf18      	it	ne
 8002d96:	429a      	cmpne	r2, r3
 8002d98:	484d      	ldr	r0, [pc, #308]	; (8002ed0 <HAL_DMA_Init+0x848>)
 8002d9a:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	42a2      	cmp	r2, r4
 8002da6:	bf08      	it	eq
 8002da8:	f043 0301 	orreq.w	r3, r3, #1
 8002dac:	4282      	cmp	r2, r0
 8002dae:	bf08      	it	eq
 8002db0:	f043 0301 	orreq.w	r3, r3, #1
 8002db4:	428a      	cmp	r2, r1
 8002db6:	bf08      	it	eq
 8002db8:	f043 0301 	orreq.w	r3, r3, #1
 8002dbc:	b913      	cbnz	r3, 8002dc4 <HAL_DMA_Init+0x73c>
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_DMA_Init+0x824>)
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d15d      	bne.n	8002e80 <HAL_DMA_Init+0x7f8>
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
 8002dc4:	686b      	ldr	r3, [r5, #4]
 8002dc6:	2b11      	cmp	r3, #17
 8002dc8:	d853      	bhi.n	8002e72 <HAL_DMA_Init+0x7ea>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dca:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8002dcc:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002dce:	4f41      	ldr	r7, [pc, #260]	; (8002ed4 <HAL_DMA_Init+0x84c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dd0:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dd4:	68ab      	ldr	r3, [r5, #8]
    __HAL_UNLOCK(hdma);
 8002dd6:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dda:	2b40      	cmp	r3, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ddc:	6811      	ldr	r1, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002dde:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002de2:	d044      	beq.n	8002e6e <HAL_DMA_Init+0x7e6>
 8002de4:	2b80      	cmp	r3, #128	; 0x80
 8002de6:	bf14      	ite	ne
 8002de8:	2100      	movne	r1, #0
 8002dea:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002dee:	692b      	ldr	r3, [r5, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002df0:	4628      	mov	r0, r5
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002df2:	68ec      	ldr	r4, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002df4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002df6:	696e      	ldr	r6, [r5, #20]
 8002df8:	ea43 03d4 	orr.w	r3, r3, r4, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002dfc:	69ac      	ldr	r4, [r5, #24]
 8002dfe:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e02:	69ee      	ldr	r6, [r5, #28]
 8002e04:	ea43 03d4 	orr.w	r3, r3, r4, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002e08:	6a2c      	ldr	r4, [r5, #32]
 8002e0a:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e0e:	4e32      	ldr	r6, [pc, #200]	; (8002ed8 <HAL_DMA_Init+0x850>)
 8002e10:	ea43 1314 	orr.w	r3, r3, r4, lsr #4
 8002e14:	4c31      	ldr	r4, [pc, #196]	; (8002edc <HAL_DMA_Init+0x854>)
 8002e16:	433b      	orrs	r3, r7
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e18:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002e1a:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	441e      	add	r6, r3
 8002e20:	fba4 2306 	umull	r2, r3, r4, r6
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	65eb      	str	r3, [r5, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e2a:	f7ff fbb1 	bl	8002590 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e2e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002e30:	2301      	movs	r3, #1
 8002e32:	f002 021f 	and.w	r2, r2, #31
 8002e36:	4093      	lsls	r3, r2
 8002e38:	6043      	str	r3, [r0, #4]
 8002e3a:	e609      	b.n	8002a50 <HAL_DMA_Init+0x3c8>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e3c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002e40:	f47f adfc 	bne.w	8002a3c <HAL_DMA_Init+0x3b4>
 8002e44:	e5c7      	b.n	80029d6 <HAL_DMA_Init+0x34e>
    switch (hdma->Init.FIFOThreshold)
 8002e46:	2a03      	cmp	r2, #3
 8002e48:	f63f adf8 	bhi.w	8002a3c <HAL_DMA_Init+0x3b4>
 8002e4c:	a401      	add	r4, pc, #4	; (adr r4, 8002e54 <HAL_DMA_Init+0x7cc>)
 8002e4e:	f854 f022 	ldr.w	pc, [r4, r2, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	080029d7 	.word	0x080029d7
 8002e58:	080029d3 	.word	0x080029d3
 8002e5c:	080029d7 	.word	0x080029d7
 8002e60:	08002e3d 	.word	0x08002e3d
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e64:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <HAL_DMA_Init+0x858>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e66:	4c1f      	ldr	r4, [pc, #124]	; (8002ee4 <HAL_DMA_Init+0x85c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e68:	4403      	add	r3, r0
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	e760      	b.n	8002d30 <HAL_DMA_Init+0x6a8>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e6e:	2110      	movs	r1, #16
 8002e70:	e7bd      	b.n	8002dee <HAL_DMA_Init+0x766>
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
 8002e72:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8002e76:	4809      	ldr	r0, [pc, #36]	; (8002e9c <HAL_DMA_Init+0x814>)
 8002e78:	f010 fd64 	bl	8013944 <assert_failed>
 8002e7c:	682a      	ldr	r2, [r5, #0]
 8002e7e:	e7a4      	b.n	8002dca <HAL_DMA_Init+0x742>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e80:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e82:	2303      	movs	r3, #3
    return HAL_ERROR;
 8002e84:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e86:	656a      	str	r2, [r5, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e88:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    return HAL_ERROR;
 8002e8c:	e6b4      	b.n	8002bf8 <HAL_DMA_Init+0x570>
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002e8e:	21e1      	movs	r1, #225	; 0xe1
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <HAL_DMA_Init+0x814>)
 8002e92:	f010 fd57 	bl	8013944 <assert_failed>
 8002e96:	e48f      	b.n	80027b8 <HAL_DMA_Init+0x130>
 8002e98:	c3c0003f 	.word	0xc3c0003f
 8002e9c:	08144d6c 	.word	0x08144d6c
 8002ea0:	58025408 	.word	0x58025408
 8002ea4:	5802541c 	.word	0x5802541c
 8002ea8:	58025430 	.word	0x58025430
 8002eac:	58025494 	.word	0x58025494
 8002eb0:	1600963f 	.word	0x1600963f
 8002eb4:	58025940 	.word	0x58025940
 8002eb8:	bffdfbf0 	.word	0xbffdfbf0
 8002ebc:	aaaaaaab 	.word	0xaaaaaaab
 8002ec0:	10008200 	.word	0x10008200
 8002ec4:	40020880 	.word	0x40020880
 8002ec8:	58025444 	.word	0x58025444
 8002ecc:	58025458 	.word	0x58025458
 8002ed0:	5802546c 	.word	0x5802546c
 8002ed4:	fffe000f 	.word	0xfffe000f
 8002ed8:	a7fdabf8 	.word	0xa7fdabf8
 8002edc:	cccccccd 	.word	0xcccccccd
 8002ee0:	1000823f 	.word	0x1000823f
 8002ee4:	40020940 	.word	0x40020940

08002ee8 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	f000 821c 	beq.w	8003326 <HAL_DMA_DeInit+0x43e>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002eee:	49a7      	ldr	r1, [pc, #668]	; (800318c <HAL_DMA_DeInit+0x2a4>)
{
 8002ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_DMA_DISABLE(hdma);
 8002ef4:	6802      	ldr	r2, [r0, #0]
 8002ef6:	4604      	mov	r4, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ef8:	4da5      	ldr	r5, [pc, #660]	; (8003190 <HAL_DMA_DeInit+0x2a8>)
  __HAL_DMA_DISABLE(hdma);
 8002efa:	6813      	ldr	r3, [r2, #0]
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	6013      	str	r3, [r2, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f02:	4ba4      	ldr	r3, [pc, #656]	; (8003194 <HAL_DMA_DeInit+0x2ac>)
 8002f04:	6802      	ldr	r2, [r0, #0]
 8002f06:	48a4      	ldr	r0, [pc, #656]	; (8003198 <HAL_DMA_DeInit+0x2b0>)
 8002f08:	4282      	cmp	r2, r0
 8002f0a:	bf18      	it	ne
 8002f0c:	429a      	cmpne	r2, r3
 8002f0e:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	428a      	cmp	r2, r1
 8002f1a:	bf08      	it	eq
 8002f1c:	f043 0301 	orreq.w	r3, r3, #1
 8002f20:	3148      	adds	r1, #72	; 0x48
 8002f22:	42aa      	cmp	r2, r5
 8002f24:	bf08      	it	eq
 8002f26:	f043 0301 	orreq.w	r3, r3, #1
 8002f2a:	3548      	adds	r5, #72	; 0x48
 8002f2c:	4282      	cmp	r2, r0
 8002f2e:	bf08      	it	eq
 8002f30:	f043 0301 	orreq.w	r3, r3, #1
 8002f34:	3048      	adds	r0, #72	; 0x48
 8002f36:	428a      	cmp	r2, r1
 8002f38:	bf08      	it	eq
 8002f3a:	f043 0301 	orreq.w	r3, r3, #1
 8002f3e:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8002f42:	42aa      	cmp	r2, r5
 8002f44:	bf08      	it	eq
 8002f46:	f043 0301 	orreq.w	r3, r3, #1
 8002f4a:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8002f4e:	4282      	cmp	r2, r0
 8002f50:	bf08      	it	eq
 8002f52:	f043 0301 	orreq.w	r3, r3, #1
 8002f56:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8002f5a:	428a      	cmp	r2, r1
 8002f5c:	bf08      	it	eq
 8002f5e:	f043 0301 	orreq.w	r3, r3, #1
 8002f62:	3148      	adds	r1, #72	; 0x48
 8002f64:	42aa      	cmp	r2, r5
 8002f66:	bf08      	it	eq
 8002f68:	f043 0301 	orreq.w	r3, r3, #1
 8002f6c:	3548      	adds	r5, #72	; 0x48
 8002f6e:	4282      	cmp	r2, r0
 8002f70:	bf08      	it	eq
 8002f72:	f043 0301 	orreq.w	r3, r3, #1
 8002f76:	3048      	adds	r0, #72	; 0x48
 8002f78:	428a      	cmp	r2, r1
 8002f7a:	bf08      	it	eq
 8002f7c:	f043 0301 	orreq.w	r3, r3, #1
 8002f80:	3148      	adds	r1, #72	; 0x48
 8002f82:	42aa      	cmp	r2, r5
 8002f84:	bf08      	it	eq
 8002f86:	f043 0301 	orreq.w	r3, r3, #1
 8002f8a:	4282      	cmp	r2, r0
 8002f8c:	bf08      	it	eq
 8002f8e:	f043 0301 	orreq.w	r3, r3, #1
 8002f92:	428a      	cmp	r2, r1
 8002f94:	bf08      	it	eq
 8002f96:	f043 0301 	orreq.w	r3, r3, #1
 8002f9a:	b91b      	cbnz	r3, 8002fa4 <HAL_DMA_DeInit+0xbc>
 8002f9c:	4b7f      	ldr	r3, [pc, #508]	; (800319c <HAL_DMA_DeInit+0x2b4>)
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	f040 81c3 	bne.w	800332a <HAL_DMA_DeInit+0x442>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8002fa4:	2100      	movs	r1, #0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8002fa6:	2521      	movs	r5, #33	; 0x21
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fa8:	4b7a      	ldr	r3, [pc, #488]	; (8003194 <HAL_DMA_DeInit+0x2ac>)
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8002faa:	6011      	str	r1, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8002fac:	6822      	ldr	r2, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fae:	487a      	ldr	r0, [pc, #488]	; (8003198 <HAL_DMA_DeInit+0x2b0>)
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8002fb0:	6051      	str	r1, [r2, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8002fb2:	6822      	ldr	r2, [r4, #0]
 8002fb4:	6091      	str	r1, [r2, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8002fb6:	6822      	ldr	r2, [r4, #0]
 8002fb8:	60d1      	str	r1, [r2, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8002fba:	6822      	ldr	r2, [r4, #0]
 8002fbc:	6111      	str	r1, [r2, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8002fbe:	6822      	ldr	r2, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fc0:	4972      	ldr	r1, [pc, #456]	; (800318c <HAL_DMA_DeInit+0x2a4>)
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8002fc2:	6155      	str	r5, [r2, #20]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fc4:	6822      	ldr	r2, [r4, #0]
 8002fc6:	4d72      	ldr	r5, [pc, #456]	; (8003190 <HAL_DMA_DeInit+0x2a8>)
 8002fc8:	4282      	cmp	r2, r0
 8002fca:	bf18      	it	ne
 8002fcc:	429a      	cmpne	r2, r3
 8002fce:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	428a      	cmp	r2, r1
 8002fda:	bf08      	it	eq
 8002fdc:	f043 0301 	orreq.w	r3, r3, #1
 8002fe0:	3148      	adds	r1, #72	; 0x48
 8002fe2:	42aa      	cmp	r2, r5
 8002fe4:	bf08      	it	eq
 8002fe6:	f043 0301 	orreq.w	r3, r3, #1
 8002fea:	3548      	adds	r5, #72	; 0x48
 8002fec:	4282      	cmp	r2, r0
 8002fee:	bf08      	it	eq
 8002ff0:	f043 0301 	orreq.w	r3, r3, #1
 8002ff4:	3048      	adds	r0, #72	; 0x48
 8002ff6:	428a      	cmp	r2, r1
 8002ff8:	bf08      	it	eq
 8002ffa:	f043 0301 	orreq.w	r3, r3, #1
 8002ffe:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8003002:	42aa      	cmp	r2, r5
 8003004:	bf08      	it	eq
 8003006:	f043 0301 	orreq.w	r3, r3, #1
 800300a:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800300e:	4282      	cmp	r2, r0
 8003010:	bf08      	it	eq
 8003012:	f043 0301 	orreq.w	r3, r3, #1
 8003016:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800301a:	428a      	cmp	r2, r1
 800301c:	bf08      	it	eq
 800301e:	f043 0301 	orreq.w	r3, r3, #1
 8003022:	3148      	adds	r1, #72	; 0x48
 8003024:	42aa      	cmp	r2, r5
 8003026:	bf08      	it	eq
 8003028:	f043 0301 	orreq.w	r3, r3, #1
 800302c:	3548      	adds	r5, #72	; 0x48
 800302e:	4282      	cmp	r2, r0
 8003030:	bf08      	it	eq
 8003032:	f043 0301 	orreq.w	r3, r3, #1
 8003036:	3048      	adds	r0, #72	; 0x48
 8003038:	428a      	cmp	r2, r1
 800303a:	bf08      	it	eq
 800303c:	f043 0301 	orreq.w	r3, r3, #1
 8003040:	3148      	adds	r1, #72	; 0x48
 8003042:	42aa      	cmp	r2, r5
 8003044:	bf08      	it	eq
 8003046:	f043 0301 	orreq.w	r3, r3, #1
 800304a:	4282      	cmp	r2, r0
 800304c:	bf08      	it	eq
 800304e:	f043 0301 	orreq.w	r3, r3, #1
 8003052:	428a      	cmp	r2, r1
 8003054:	bf08      	it	eq
 8003056:	f043 0301 	orreq.w	r3, r3, #1
 800305a:	b91b      	cbnz	r3, 8003064 <HAL_DMA_DeInit+0x17c>
 800305c:	4b4f      	ldr	r3, [pc, #316]	; (800319c <HAL_DMA_DeInit+0x2b4>)
 800305e:	429a      	cmp	r2, r3
 8003060:	f040 819d 	bne.w	800339e <HAL_DMA_DeInit+0x4b6>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003064:	b2d3      	uxtb	r3, r2
 8003066:	4d4e      	ldr	r5, [pc, #312]	; (80031a0 <HAL_DMA_DeInit+0x2b8>)
 8003068:	494e      	ldr	r1, [pc, #312]	; (80031a4 <HAL_DMA_DeInit+0x2bc>)
 800306a:	3b10      	subs	r3, #16
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800306c:	484e      	ldr	r0, [pc, #312]	; (80031a8 <HAL_DMA_DeInit+0x2c0>)
 800306e:	4011      	ands	r1, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003070:	fba5 5303 	umull	r5, r3, r5, r3
 8003074:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003076:	f003 0207 	and.w	r2, r3, #7
    if (stream_number > 3U)
 800307a:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800307c:	5c82      	ldrb	r2, [r0, r2]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800307e:	bf88      	it	hi
 8003080:	3104      	addhi	r1, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003082:	65e2      	str	r2, [r4, #92]	; 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003084:	65a1      	str	r1, [r4, #88]	; 0x58
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003086:	f002 021f 	and.w	r2, r2, #31
 800308a:	233f      	movs	r3, #63	; 0x3f
 800308c:	fa03 f202 	lsl.w	r2, r3, r2
 8003090:	608a      	str	r2, [r1, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003092:	6822      	ldr	r2, [r4, #0]
 8003094:	4b3f      	ldr	r3, [pc, #252]	; (8003194 <HAL_DMA_DeInit+0x2ac>)
 8003096:	4840      	ldr	r0, [pc, #256]	; (8003198 <HAL_DMA_DeInit+0x2b0>)
 8003098:	493c      	ldr	r1, [pc, #240]	; (800318c <HAL_DMA_DeInit+0x2a4>)
 800309a:	4282      	cmp	r2, r0
 800309c:	bf18      	it	ne
 800309e:	429a      	cmpne	r2, r3
 80030a0:	4e3b      	ldr	r6, [pc, #236]	; (8003190 <HAL_DMA_DeInit+0x2a8>)
 80030a2:	4d42      	ldr	r5, [pc, #264]	; (80031ac <HAL_DMA_DeInit+0x2c4>)
 80030a4:	f100 0060 	add.w	r0, r0, #96	; 0x60
 80030a8:	bf0c      	ite	eq
 80030aa:	2301      	moveq	r3, #1
 80030ac:	2300      	movne	r3, #0
 80030ae:	f8df e104 	ldr.w	lr, [pc, #260]	; 80031b4 <HAL_DMA_DeInit+0x2cc>
 80030b2:	428a      	cmp	r2, r1
 80030b4:	bf08      	it	eq
 80030b6:	f043 0301 	orreq.w	r3, r3, #1
 80030ba:	3160      	adds	r1, #96	; 0x60
 80030bc:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80031b8 <HAL_DMA_DeInit+0x2d0>
 80030c0:	42b2      	cmp	r2, r6
 80030c2:	bf08      	it	eq
 80030c4:	f043 0301 	orreq.w	r3, r3, #1
 80030c8:	4f39      	ldr	r7, [pc, #228]	; (80031b0 <HAL_DMA_DeInit+0x2c8>)
 80030ca:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 80030ce:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80031bc <HAL_DMA_DeInit+0x2d4>
 80030d2:	42aa      	cmp	r2, r5
 80030d4:	bf08      	it	eq
 80030d6:	f043 0301 	orreq.w	r3, r3, #1
 80030da:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
 80030de:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80031c0 <HAL_DMA_DeInit+0x2d8>
 80030e2:	4282      	cmp	r2, r0
 80030e4:	bf08      	it	eq
 80030e6:	f043 0301 	orreq.w	r3, r3, #1
 80030ea:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 80030ee:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800319c <HAL_DMA_DeInit+0x2b4>
 80030f2:	428a      	cmp	r2, r1
 80030f4:	bf08      	it	eq
 80030f6:	f043 0301 	orreq.w	r3, r3, #1
 80030fa:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80030fe:	4572      	cmp	r2, lr
 8003100:	bf08      	it	eq
 8003102:	f043 0301 	orreq.w	r3, r3, #1
 8003106:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 80031c4 <HAL_DMA_DeInit+0x2dc>
 800310a:	4562      	cmp	r2, ip
 800310c:	bf08      	it	eq
 800310e:	f043 0301 	orreq.w	r3, r3, #1
 8003112:	eba2 0e0e 	sub.w	lr, r2, lr
 8003116:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80031c8 <HAL_DMA_DeInit+0x2e0>
 800311a:	42ba      	cmp	r2, r7
 800311c:	bf08      	it	eq
 800311e:	f043 0301 	orreq.w	r3, r3, #1
 8003122:	fabe fe8e 	clz	lr, lr
 8003126:	eba2 070c 	sub.w	r7, r2, ip
 800312a:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 800312e:	42b2      	cmp	r2, r6
 8003130:	bf08      	it	eq
 8003132:	f043 0301 	orreq.w	r3, r3, #1
 8003136:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800313a:	eba2 060a 	sub.w	r6, r2, sl
 800313e:	fab7 f787 	clz	r7, r7
 8003142:	42aa      	cmp	r2, r5
 8003144:	bf08      	it	eq
 8003146:	f043 0301 	orreq.w	r3, r3, #1
 800314a:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 800314e:	eba2 050c 	sub.w	r5, r2, ip
 8003152:	097f      	lsrs	r7, r7, #5
 8003154:	4282      	cmp	r2, r0
 8003156:	bf08      	it	eq
 8003158:	f043 0301 	orreq.w	r3, r3, #1
 800315c:	fab6 f686 	clz	r6, r6
 8003160:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8003164:	fab5 f585 	clz	r5, r5
 8003168:	428a      	cmp	r2, r1
 800316a:	bf08      	it	eq
 800316c:	f043 0301 	orreq.w	r3, r3, #1
 8003170:	0976      	lsrs	r6, r6, #5
 8003172:	eba2 000a 	sub.w	r0, r2, sl
 8003176:	eba2 010c 	sub.w	r1, r2, ip
 800317a:	4542      	cmp	r2, r8
 800317c:	bf08      	it	eq
 800317e:	f043 0301 	orreq.w	r3, r3, #1
 8003182:	096d      	lsrs	r5, r5, #5
 8003184:	fab0 f080 	clz	r0, r0
 8003188:	e020      	b.n	80031cc <HAL_DMA_DeInit+0x2e4>
 800318a:	bf00      	nop
 800318c:	40020040 	.word	0x40020040
 8003190:	40020058 	.word	0x40020058
 8003194:	40020010 	.word	0x40020010
 8003198:	40020028 	.word	0x40020028
 800319c:	400204b8 	.word	0x400204b8
 80031a0:	aaaaaaab 	.word	0xaaaaaaab
 80031a4:	fffffc00 	.word	0xfffffc00
 80031a8:	08029a88 	.word	0x08029a88
 80031ac:	40020070 	.word	0x40020070
 80031b0:	40020428 	.word	0x40020428
 80031b4:	400200b8 	.word	0x400200b8
 80031b8:	40020410 	.word	0x40020410
 80031bc:	400204a0 	.word	0x400204a0
 80031c0:	58025430 	.word	0x58025430
 80031c4:	58025408 	.word	0x58025408
 80031c8:	5802541c 	.word	0x5802541c
 80031cc:	f10c 0c14 	add.w	ip, ip, #20
 80031d0:	454a      	cmp	r2, r9
 80031d2:	bf08      	it	eq
 80031d4:	f043 0301 	orreq.w	r3, r3, #1
 80031d8:	fab1 f181 	clz	r1, r1
 80031dc:	0940      	lsrs	r0, r0, #5
 80031de:	eba2 0c0c 	sub.w	ip, r2, ip
 80031e2:	ea4e 0303 	orr.w	r3, lr, r3
 80031e6:	0949      	lsrs	r1, r1, #5
 80031e8:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 80033d0 <HAL_DMA_DeInit+0x4e8>
 80031ec:	fabc fc8c 	clz	ip, ip
 80031f0:	433b      	orrs	r3, r7
 80031f2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80031f6:	eba2 0808 	sub.w	r8, r2, r8
 80031fa:	4333      	orrs	r3, r6
 80031fc:	fab8 f888 	clz	r8, r8
 8003200:	432b      	orrs	r3, r5
 8003202:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8003206:	4303      	orrs	r3, r0
 8003208:	430b      	orrs	r3, r1
 800320a:	ea5c 0303 	orrs.w	r3, ip, r3
 800320e:	d102      	bne.n	8003216 <HAL_DMA_DeInit+0x32e>
 8003210:	f1b8 0f00 	cmp.w	r8, #0
 8003214:	d02b      	beq.n	800326e <HAL_DMA_DeInit+0x386>
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003216:	ea47 070e 	orr.w	r7, r7, lr
 800321a:	b2d3      	uxtb	r3, r2
 800321c:	433e      	orrs	r6, r7
 800321e:	4335      	orrs	r5, r6
 8003220:	4328      	orrs	r0, r5
 8003222:	4301      	orrs	r1, r0
 8003224:	ea5c 0101 	orrs.w	r1, ip, r1
 8003228:	d102      	bne.n	8003230 <HAL_DMA_DeInit+0x348>
 800322a:	f1b8 0f00 	cmp.w	r8, #0
 800322e:	d063      	beq.n	80032f8 <HAL_DMA_DeInit+0x410>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003230:	4861      	ldr	r0, [pc, #388]	; (80033b8 <HAL_DMA_DeInit+0x4d0>)
 8003232:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003234:	4a61      	ldr	r2, [pc, #388]	; (80033bc <HAL_DMA_DeInit+0x4d4>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003236:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003238:	fba0 0303 	umull	r0, r3, r0, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800323c:	4860      	ldr	r0, [pc, #384]	; (80033c0 <HAL_DMA_DeInit+0x4d8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800323e:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003240:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003242:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003244:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003248:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800324e:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003250:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->DMAmuxChannel != 0U)
 8003252:	b122      	cbz	r2, 800325e <HAL_DMA_DeInit+0x376>
      hdma->DMAmuxChannel->CCR = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003258:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 800325c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800325e:	6860      	ldr	r0, [r4, #4]
 8003260:	1e41      	subs	r1, r0, #1
 8003262:	2907      	cmp	r1, #7
 8003264:	d912      	bls.n	800328c <HAL_DMA_DeInit+0x3a4>
    hdma->DMAmuxRequestGen = 0U;
 8003266:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8003268:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800326c:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->XferCpltCallback       = NULL;
 800326e:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003270:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8003272:	4618      	mov	r0, r3
  hdma->State = HAL_DMA_STATE_RESET;
 8003274:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8003278:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->XferHalfCpltCallback   = NULL;
 800327c:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8003280:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback      = NULL;
 8003284:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 8003288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800328c:	6822      	ldr	r2, [r4, #0]
 800328e:	4b4d      	ldr	r3, [pc, #308]	; (80033c4 <HAL_DMA_DeInit+0x4dc>)
 8003290:	4e4d      	ldr	r6, [pc, #308]	; (80033c8 <HAL_DMA_DeInit+0x4e0>)
 8003292:	4d4e      	ldr	r5, [pc, #312]	; (80033cc <HAL_DMA_DeInit+0x4e4>)
 8003294:	42b2      	cmp	r2, r6
 8003296:	bf18      	it	ne
 8003298:	429a      	cmpne	r2, r3
 800329a:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800329e:	bf0c      	ite	eq
 80032a0:	2301      	moveq	r3, #1
 80032a2:	2300      	movne	r3, #0
 80032a4:	42aa      	cmp	r2, r5
 80032a6:	bf08      	it	eq
 80032a8:	f043 0301 	orreq.w	r3, r3, #1
 80032ac:	3528      	adds	r5, #40	; 0x28
 80032ae:	42b2      	cmp	r2, r6
 80032b0:	bf08      	it	eq
 80032b2:	f043 0301 	orreq.w	r3, r3, #1
 80032b6:	3628      	adds	r6, #40	; 0x28
 80032b8:	42aa      	cmp	r2, r5
 80032ba:	bf08      	it	eq
 80032bc:	f043 0301 	orreq.w	r3, r3, #1
 80032c0:	3528      	adds	r5, #40	; 0x28
 80032c2:	42b2      	cmp	r2, r6
 80032c4:	bf08      	it	eq
 80032c6:	f043 0301 	orreq.w	r3, r3, #1
 80032ca:	42aa      	cmp	r2, r5
 80032cc:	bf08      	it	eq
 80032ce:	f043 0301 	orreq.w	r3, r3, #1
 80032d2:	b913      	cbnz	r3, 80032da <HAL_DMA_DeInit+0x3f2>
 80032d4:	4b3e      	ldr	r3, [pc, #248]	; (80033d0 <HAL_DMA_DeInit+0x4e8>)
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d169      	bne.n	80033ae <HAL_DMA_DeInit+0x4c6>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80032da:	4a3e      	ldr	r2, [pc, #248]	; (80033d4 <HAL_DMA_DeInit+0x4ec>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80032dc:	4d3e      	ldr	r5, [pc, #248]	; (80033d8 <HAL_DMA_DeInit+0x4f0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80032de:	4402      	add	r2, r0
 80032e0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80032e2:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80032e4:	2000      	movs	r0, #0
 80032e6:	6725      	str	r5, [r4, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80032e8:	fa03 f101 	lsl.w	r1, r3, r1
 80032ec:	6761      	str	r1, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80032ee:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032f0:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	e7b6      	b.n	8003266 <HAL_DMA_DeInit+0x37e>
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80032f8:	4938      	ldr	r1, [pc, #224]	; (80033dc <HAL_DMA_DeInit+0x4f4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80032fa:	3b10      	subs	r3, #16
 80032fc:	4838      	ldr	r0, [pc, #224]	; (80033e0 <HAL_DMA_DeInit+0x4f8>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80032fe:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003300:	fba0 0303 	umull	r0, r3, r0, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003304:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003306:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800330a:	d800      	bhi.n	800330e <HAL_DMA_DeInit+0x426>
      stream_number += 8U;
 800330c:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800330e:	4a35      	ldr	r2, [pc, #212]	; (80033e4 <HAL_DMA_DeInit+0x4fc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003310:	f003 051f 	and.w	r5, r3, #31
 8003314:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003316:	4834      	ldr	r0, [pc, #208]	; (80033e8 <HAL_DMA_DeInit+0x500>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003318:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800331a:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800331c:	6660      	str	r0, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800331e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003320:	66a1      	str	r1, [r4, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003322:	6622      	str	r2, [r4, #96]	; 0x60
 8003324:	e795      	b.n	8003252 <HAL_DMA_DeInit+0x36a>
    return HAL_ERROR;
 8003326:	2001      	movs	r0, #1
}
 8003328:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800332a:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <HAL_DMA_DeInit+0x4dc>)
 800332c:	4926      	ldr	r1, [pc, #152]	; (80033c8 <HAL_DMA_DeInit+0x4e0>)
 800332e:	4827      	ldr	r0, [pc, #156]	; (80033cc <HAL_DMA_DeInit+0x4e4>)
 8003330:	428a      	cmp	r2, r1
 8003332:	bf18      	it	ne
 8003334:	429a      	cmpne	r2, r3
 8003336:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800333a:	4d2c      	ldr	r5, [pc, #176]	; (80033ec <HAL_DMA_DeInit+0x504>)
 800333c:	bf0c      	ite	eq
 800333e:	2301      	moveq	r3, #1
 8003340:	2300      	movne	r3, #0
 8003342:	4282      	cmp	r2, r0
 8003344:	bf08      	it	eq
 8003346:	f043 0301 	orreq.w	r3, r3, #1
 800334a:	303c      	adds	r0, #60	; 0x3c
 800334c:	428a      	cmp	r2, r1
 800334e:	bf08      	it	eq
 8003350:	f043 0301 	orreq.w	r3, r3, #1
 8003354:	313c      	adds	r1, #60	; 0x3c
 8003356:	42aa      	cmp	r2, r5
 8003358:	bf08      	it	eq
 800335a:	f043 0301 	orreq.w	r3, r3, #1
 800335e:	4282      	cmp	r2, r0
 8003360:	bf08      	it	eq
 8003362:	f043 0301 	orreq.w	r3, r3, #1
 8003366:	428a      	cmp	r2, r1
 8003368:	bf08      	it	eq
 800336a:	f043 0301 	orreq.w	r3, r3, #1
 800336e:	b913      	cbnz	r3, 8003376 <HAL_DMA_DeInit+0x48e>
 8003370:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <HAL_DMA_DeInit+0x4e8>)
 8003372:	429a      	cmp	r2, r3
 8003374:	d118      	bne.n	80033a8 <HAL_DMA_DeInit+0x4c0>
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8003376:	2300      	movs	r3, #0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003378:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800337a:	6013      	str	r3, [r2, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800337c:	6822      	ldr	r2, [r4, #0]
 800337e:	6053      	str	r3, [r2, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8003380:	6822      	ldr	r2, [r4, #0]
 8003382:	6093      	str	r3, [r2, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8003384:	6822      	ldr	r2, [r4, #0]
 8003386:	60d3      	str	r3, [r2, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8003388:	6822      	ldr	r2, [r4, #0]
 800338a:	6113      	str	r3, [r2, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800338c:	f7ff f900 	bl	8002590 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003390:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003392:	2301      	movs	r3, #1
 8003394:	f002 021f 	and.w	r2, r2, #31
 8003398:	4093      	lsls	r3, r2
 800339a:	6043      	str	r3, [r0, #4]
 800339c:	e679      	b.n	8003092 <HAL_DMA_DeInit+0x1aa>
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800339e:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 80033a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80033a4:	65a1      	str	r1, [r4, #88]	; 0x58
 80033a6:	e66e      	b.n	8003086 <HAL_DMA_DeInit+0x19e>
    return HAL_ERROR;
 80033a8:	2001      	movs	r0, #1
}
 80033aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033ae:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <HAL_DMA_DeInit+0x508>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033b0:	4d10      	ldr	r5, [pc, #64]	; (80033f4 <HAL_DMA_DeInit+0x50c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033b2:	4402      	add	r2, r0
 80033b4:	0092      	lsls	r2, r2, #2
 80033b6:	e794      	b.n	80032e2 <HAL_DMA_DeInit+0x3fa>
 80033b8:	cccccccd 	.word	0xcccccccd
 80033bc:	16009600 	.word	0x16009600
 80033c0:	58025880 	.word	0x58025880
 80033c4:	58025408 	.word	0x58025408
 80033c8:	5802541c 	.word	0x5802541c
 80033cc:	58025430 	.word	0x58025430
 80033d0:	58025494 	.word	0x58025494
 80033d4:	1600963f 	.word	0x1600963f
 80033d8:	58025940 	.word	0x58025940
 80033dc:	bffdfbf0 	.word	0xbffdfbf0
 80033e0:	aaaaaaab 	.word	0xaaaaaaab
 80033e4:	10008200 	.word	0x10008200
 80033e8:	40020880 	.word	0x40020880
 80033ec:	58025458 	.word	0x58025458
 80033f0:	1000823f 	.word	0x1000823f
 80033f4:	40020940 	.word	0x40020940

080033f8 <HAL_DMA_Start_IT>:
{
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	461d      	mov	r5, r3
 80033fc:	460e      	mov	r6, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80033fe:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8003402:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003404:	1e69      	subs	r1, r5, #1
{
 8003406:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003408:	4299      	cmp	r1, r3
 800340a:	d813      	bhi.n	8003434 <HAL_DMA_Start_IT+0x3c>
  if(hdma == NULL)
 800340c:	b1cc      	cbz	r4, 8003442 <HAL_DMA_Start_IT+0x4a>
  __HAL_LOCK(hdma);
 800340e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8003412:	2b01      	cmp	r3, #1
 8003414:	f000 826f 	beq.w	80038f6 <HAL_DMA_Start_IT+0x4fe>
 8003418:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800341a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800341e:	4283      	cmp	r3, r0
  __HAL_LOCK(hdma);
 8003420:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003424:	d012      	beq.n	800344c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma);
 8003426:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003428:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800342c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003430:	6563      	str	r3, [r4, #84]	; 0x54
}
 8003432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003434:	f240 21a7 	movw	r1, #679	; 0x2a7
 8003438:	4803      	ldr	r0, [pc, #12]	; (8003448 <HAL_DMA_Start_IT+0x50>)
 800343a:	f010 fa83 	bl	8013944 <assert_failed>
  if(hdma == NULL)
 800343e:	2c00      	cmp	r4, #0
 8003440:	d1e5      	bne.n	800340e <HAL_DMA_Start_IT+0x16>
    return HAL_ERROR;
 8003442:	2001      	movs	r0, #1
}
 8003444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003446:	bf00      	nop
 8003448:	08144d6c 	.word	0x08144d6c
    hdma->State = HAL_DMA_STATE_BUSY;
 800344c:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 800344e:	6822      	ldr	r2, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8003450:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003454:	2000      	movs	r0, #0
 8003456:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8003458:	6813      	ldr	r3, [r2, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800345a:	489e      	ldr	r0, [pc, #632]	; (80036d4 <HAL_DMA_Start_IT+0x2dc>)
    __HAL_DMA_DISABLE(hdma);
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	6013      	str	r3, [r2, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003462:	4a9d      	ldr	r2, [pc, #628]	; (80036d8 <HAL_DMA_Start_IT+0x2e0>)
 8003464:	6821      	ldr	r1, [r4, #0]
 8003466:	4b9d      	ldr	r3, [pc, #628]	; (80036dc <HAL_DMA_Start_IT+0x2e4>)
 8003468:	4291      	cmp	r1, r2
 800346a:	bf18      	it	ne
 800346c:	4281      	cmpne	r1, r0
 800346e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8003472:	bf0c      	ite	eq
 8003474:	2001      	moveq	r0, #1
 8003476:	2000      	movne	r0, #0
 8003478:	4299      	cmp	r1, r3
 800347a:	bf08      	it	eq
 800347c:	f040 0001 	orreq.w	r0, r0, #1
 8003480:	3330      	adds	r3, #48	; 0x30
 8003482:	4291      	cmp	r1, r2
 8003484:	bf08      	it	eq
 8003486:	f040 0001 	orreq.w	r0, r0, #1
 800348a:	3230      	adds	r2, #48	; 0x30
 800348c:	4299      	cmp	r1, r3
 800348e:	bf08      	it	eq
 8003490:	f040 0001 	orreq.w	r0, r0, #1
 8003494:	3330      	adds	r3, #48	; 0x30
 8003496:	4291      	cmp	r1, r2
 8003498:	bf08      	it	eq
 800349a:	f040 0001 	orreq.w	r0, r0, #1
 800349e:	3230      	adds	r2, #48	; 0x30
 80034a0:	4299      	cmp	r1, r3
 80034a2:	bf08      	it	eq
 80034a4:	f040 0001 	orreq.w	r0, r0, #1
 80034a8:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80034ac:	4291      	cmp	r1, r2
 80034ae:	bf08      	it	eq
 80034b0:	f040 0001 	orreq.w	r0, r0, #1
 80034b4:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80034b8:	4299      	cmp	r1, r3
 80034ba:	bf08      	it	eq
 80034bc:	f040 0001 	orreq.w	r0, r0, #1
 80034c0:	3330      	adds	r3, #48	; 0x30
 80034c2:	4291      	cmp	r1, r2
 80034c4:	bf08      	it	eq
 80034c6:	f040 0001 	orreq.w	r0, r0, #1
 80034ca:	3230      	adds	r2, #48	; 0x30
 80034cc:	4299      	cmp	r1, r3
 80034ce:	bf08      	it	eq
 80034d0:	f040 0001 	orreq.w	r0, r0, #1
 80034d4:	3330      	adds	r3, #48	; 0x30
 80034d6:	4291      	cmp	r1, r2
 80034d8:	bf08      	it	eq
 80034da:	f040 0001 	orreq.w	r0, r0, #1
 80034de:	3230      	adds	r2, #48	; 0x30
 80034e0:	4299      	cmp	r1, r3
 80034e2:	bf08      	it	eq
 80034e4:	f040 0001 	orreq.w	r0, r0, #1
 80034e8:	3330      	adds	r3, #48	; 0x30
 80034ea:	4291      	cmp	r1, r2
 80034ec:	bf08      	it	eq
 80034ee:	f040 0001 	orreq.w	r0, r0, #1
 80034f2:	3230      	adds	r2, #48	; 0x30
 80034f4:	4299      	cmp	r1, r3
 80034f6:	bf08      	it	eq
 80034f8:	f040 0001 	orreq.w	r0, r0, #1
 80034fc:	4b78      	ldr	r3, [pc, #480]	; (80036e0 <HAL_DMA_Start_IT+0x2e8>)
 80034fe:	4291      	cmp	r1, r2
 8003500:	bf08      	it	eq
 8003502:	f040 0001 	orreq.w	r0, r0, #1
 8003506:	4a77      	ldr	r2, [pc, #476]	; (80036e4 <HAL_DMA_Start_IT+0x2ec>)
 8003508:	4299      	cmp	r1, r3
 800350a:	bf08      	it	eq
 800350c:	f040 0001 	orreq.w	r0, r0, #1
 8003510:	3328      	adds	r3, #40	; 0x28
 8003512:	4291      	cmp	r1, r2
 8003514:	bf08      	it	eq
 8003516:	f040 0001 	orreq.w	r0, r0, #1
 800351a:	3228      	adds	r2, #40	; 0x28
 800351c:	4299      	cmp	r1, r3
 800351e:	bf08      	it	eq
 8003520:	f040 0001 	orreq.w	r0, r0, #1
 8003524:	3328      	adds	r3, #40	; 0x28
 8003526:	4291      	cmp	r1, r2
 8003528:	bf08      	it	eq
 800352a:	f040 0001 	orreq.w	r0, r0, #1
 800352e:	3228      	adds	r2, #40	; 0x28
 8003530:	4299      	cmp	r1, r3
 8003532:	bf08      	it	eq
 8003534:	f040 0001 	orreq.w	r0, r0, #1
 8003538:	3328      	adds	r3, #40	; 0x28
 800353a:	4291      	cmp	r1, r2
 800353c:	bf08      	it	eq
 800353e:	f040 0001 	orreq.w	r0, r0, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003542:	6da2      	ldr	r2, [r4, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003544:	4299      	cmp	r1, r3
 8003546:	bf08      	it	eq
 8003548:	f040 0001 	orreq.w	r0, r0, #1
 800354c:	b910      	cbnz	r0, 8003554 <HAL_DMA_Start_IT+0x15c>
 800354e:	3314      	adds	r3, #20
 8003550:	4299      	cmp	r1, r3
 8003552:	d108      	bne.n	8003566 <HAL_DMA_Start_IT+0x16e>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003554:	e9d4 3119 	ldrd	r3, r1, [r4, #100]	; 0x64
 8003558:	6059      	str	r1, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800355a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800355c:	b113      	cbz	r3, 8003564 <HAL_DMA_Start_IT+0x16c>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800355e:	e9d4 311c 	ldrd	r3, r1, [r4, #112]	; 0x70
 8003562:	6059      	str	r1, [r3, #4]
 8003564:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003566:	4b5b      	ldr	r3, [pc, #364]	; (80036d4 <HAL_DMA_Start_IT+0x2dc>)
 8003568:	f8df c16c 	ldr.w	ip, [pc, #364]	; 80036d8 <HAL_DMA_Start_IT+0x2e0>
 800356c:	485b      	ldr	r0, [pc, #364]	; (80036dc <HAL_DMA_Start_IT+0x2e4>)
 800356e:	4561      	cmp	r1, ip
 8003570:	bf18      	it	ne
 8003572:	4299      	cmpne	r1, r3
 8003574:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	4281      	cmp	r1, r0
 8003580:	bf08      	it	eq
 8003582:	f043 0301 	orreq.w	r3, r3, #1
 8003586:	3030      	adds	r0, #48	; 0x30
 8003588:	4561      	cmp	r1, ip
 800358a:	bf08      	it	eq
 800358c:	f043 0301 	orreq.w	r3, r3, #1
 8003590:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8003594:	4281      	cmp	r1, r0
 8003596:	bf08      	it	eq
 8003598:	f043 0301 	orreq.w	r3, r3, #1
 800359c:	3030      	adds	r0, #48	; 0x30
 800359e:	4561      	cmp	r1, ip
 80035a0:	bf08      	it	eq
 80035a2:	f043 0301 	orreq.w	r3, r3, #1
 80035a6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80035aa:	4281      	cmp	r1, r0
 80035ac:	bf08      	it	eq
 80035ae:	f043 0301 	orreq.w	r3, r3, #1
 80035b2:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80035b6:	4561      	cmp	r1, ip
 80035b8:	bf08      	it	eq
 80035ba:	f043 0301 	orreq.w	r3, r3, #1
 80035be:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 80035c2:	4281      	cmp	r1, r0
 80035c4:	bf08      	it	eq
 80035c6:	f043 0301 	orreq.w	r3, r3, #1
 80035ca:	3030      	adds	r0, #48	; 0x30
 80035cc:	4561      	cmp	r1, ip
 80035ce:	bf08      	it	eq
 80035d0:	f043 0301 	orreq.w	r3, r3, #1
 80035d4:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80035d8:	4281      	cmp	r1, r0
 80035da:	bf08      	it	eq
 80035dc:	f043 0301 	orreq.w	r3, r3, #1
 80035e0:	3030      	adds	r0, #48	; 0x30
 80035e2:	4561      	cmp	r1, ip
 80035e4:	bf08      	it	eq
 80035e6:	f043 0301 	orreq.w	r3, r3, #1
 80035ea:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80035ee:	4281      	cmp	r1, r0
 80035f0:	bf08      	it	eq
 80035f2:	f043 0301 	orreq.w	r3, r3, #1
 80035f6:	3030      	adds	r0, #48	; 0x30
 80035f8:	4561      	cmp	r1, ip
 80035fa:	bf08      	it	eq
 80035fc:	f043 0301 	orreq.w	r3, r3, #1
 8003600:	4281      	cmp	r1, r0
 8003602:	bf08      	it	eq
 8003604:	f043 0301 	orreq.w	r3, r3, #1
 8003608:	b91b      	cbnz	r3, 8003612 <HAL_DMA_Start_IT+0x21a>
 800360a:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <HAL_DMA_Start_IT+0x2f0>)
 800360c:	4299      	cmp	r1, r3
 800360e:	f040 8174 	bne.w	80038fa <HAL_DMA_Start_IT+0x502>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003612:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003614:	233f      	movs	r3, #63	; 0x3f
 8003616:	f001 011f 	and.w	r1, r1, #31
 800361a:	408b      	lsls	r3, r1
 800361c:	6093      	str	r3, [r2, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800361e:	6822      	ldr	r2, [r4, #0]
 8003620:	6813      	ldr	r3, [r2, #0]
 8003622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003626:	6013      	str	r3, [r2, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	605d      	str	r5, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800362c:	68a3      	ldr	r3, [r4, #8]
 800362e:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003630:	6823      	ldr	r3, [r4, #0]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003632:	f000 815b 	beq.w	80038ec <HAL_DMA_Start_IT+0x4f4>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003636:	609e      	str	r6, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	60df      	str	r7, [r3, #12]
 800363c:	6821      	ldr	r1, [r4, #0]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800363e:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <HAL_DMA_Start_IT+0x2dc>)
 8003640:	4825      	ldr	r0, [pc, #148]	; (80036d8 <HAL_DMA_Start_IT+0x2e0>)
 8003642:	4a26      	ldr	r2, [pc, #152]	; (80036dc <HAL_DMA_Start_IT+0x2e4>)
 8003644:	4281      	cmp	r1, r0
 8003646:	bf18      	it	ne
 8003648:	4299      	cmpne	r1, r3
 800364a:	4d28      	ldr	r5, [pc, #160]	; (80036ec <HAL_DMA_Start_IT+0x2f4>)
 800364c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8003650:	bf0c      	ite	eq
 8003652:	2301      	moveq	r3, #1
 8003654:	2300      	movne	r3, #0
 8003656:	4291      	cmp	r1, r2
 8003658:	bf08      	it	eq
 800365a:	f043 0301 	orreq.w	r3, r3, #1
 800365e:	3248      	adds	r2, #72	; 0x48
 8003660:	42a9      	cmp	r1, r5
 8003662:	bf08      	it	eq
 8003664:	f043 0301 	orreq.w	r3, r3, #1
 8003668:	3548      	adds	r5, #72	; 0x48
 800366a:	4281      	cmp	r1, r0
 800366c:	bf08      	it	eq
 800366e:	f043 0301 	orreq.w	r3, r3, #1
 8003672:	3048      	adds	r0, #72	; 0x48
 8003674:	4291      	cmp	r1, r2
 8003676:	bf08      	it	eq
 8003678:	f043 0301 	orreq.w	r3, r3, #1
 800367c:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8003680:	42a9      	cmp	r1, r5
 8003682:	bf08      	it	eq
 8003684:	f043 0301 	orreq.w	r3, r3, #1
 8003688:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800368c:	4281      	cmp	r1, r0
 800368e:	bf08      	it	eq
 8003690:	f043 0301 	orreq.w	r3, r3, #1
 8003694:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8003698:	4291      	cmp	r1, r2
 800369a:	bf08      	it	eq
 800369c:	f043 0301 	orreq.w	r3, r3, #1
 80036a0:	3248      	adds	r2, #72	; 0x48
 80036a2:	42a9      	cmp	r1, r5
 80036a4:	bf08      	it	eq
 80036a6:	f043 0301 	orreq.w	r3, r3, #1
 80036aa:	3548      	adds	r5, #72	; 0x48
 80036ac:	4281      	cmp	r1, r0
 80036ae:	bf08      	it	eq
 80036b0:	f043 0301 	orreq.w	r3, r3, #1
 80036b4:	3048      	adds	r0, #72	; 0x48
 80036b6:	4291      	cmp	r1, r2
 80036b8:	bf08      	it	eq
 80036ba:	f043 0301 	orreq.w	r3, r3, #1
 80036be:	3248      	adds	r2, #72	; 0x48
 80036c0:	42a9      	cmp	r1, r5
 80036c2:	bf08      	it	eq
 80036c4:	f043 0301 	orreq.w	r3, r3, #1
 80036c8:	4281      	cmp	r1, r0
 80036ca:	bf08      	it	eq
 80036cc:	f043 0301 	orreq.w	r3, r3, #1
 80036d0:	e00e      	b.n	80036f0 <HAL_DMA_Start_IT+0x2f8>
 80036d2:	bf00      	nop
 80036d4:	40020010 	.word	0x40020010
 80036d8:	40020028 	.word	0x40020028
 80036dc:	40020040 	.word	0x40020040
 80036e0:	58025408 	.word	0x58025408
 80036e4:	5802541c 	.word	0x5802541c
 80036e8:	400204b8 	.word	0x400204b8
 80036ec:	40020058 	.word	0x40020058
 80036f0:	4291      	cmp	r1, r2
 80036f2:	bf08      	it	eq
 80036f4:	f043 0301 	orreq.w	r3, r3, #1
 80036f8:	b91b      	cbnz	r3, 8003702 <HAL_DMA_Start_IT+0x30a>
 80036fa:	4b9a      	ldr	r3, [pc, #616]	; (8003964 <HAL_DMA_Start_IT+0x56c>)
 80036fc:	4299      	cmp	r1, r3
 80036fe:	f040 8145 	bne.w	800398c <HAL_DMA_Start_IT+0x594>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003702:	680b      	ldr	r3, [r1, #0]
 8003704:	f023 031e 	bic.w	r3, r3, #30
 8003708:	f043 0316 	orr.w	r3, r3, #22
 800370c:	600b      	str	r3, [r1, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800370e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003710:	b123      	cbz	r3, 800371c <HAL_DMA_Start_IT+0x324>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003712:	6822      	ldr	r2, [r4, #0]
 8003714:	6813      	ldr	r3, [r2, #0]
 8003716:	f043 0308 	orr.w	r3, r3, #8
 800371a:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800371c:	6821      	ldr	r1, [r4, #0]
 800371e:	4b92      	ldr	r3, [pc, #584]	; (8003968 <HAL_DMA_Start_IT+0x570>)
 8003720:	4a92      	ldr	r2, [pc, #584]	; (800396c <HAL_DMA_Start_IT+0x574>)
 8003722:	4d93      	ldr	r5, [pc, #588]	; (8003970 <HAL_DMA_Start_IT+0x578>)
 8003724:	4291      	cmp	r1, r2
 8003726:	bf18      	it	ne
 8003728:	4299      	cmpne	r1, r3
 800372a:	4892      	ldr	r0, [pc, #584]	; (8003974 <HAL_DMA_Start_IT+0x57c>)
 800372c:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8003730:	bf0c      	ite	eq
 8003732:	2301      	moveq	r3, #1
 8003734:	2300      	movne	r3, #0
 8003736:	42a9      	cmp	r1, r5
 8003738:	bf08      	it	eq
 800373a:	f043 0301 	orreq.w	r3, r3, #1
 800373e:	3548      	adds	r5, #72	; 0x48
 8003740:	4281      	cmp	r1, r0
 8003742:	bf08      	it	eq
 8003744:	f043 0301 	orreq.w	r3, r3, #1
 8003748:	3048      	adds	r0, #72	; 0x48
 800374a:	4291      	cmp	r1, r2
 800374c:	bf08      	it	eq
 800374e:	f043 0301 	orreq.w	r3, r3, #1
 8003752:	3248      	adds	r2, #72	; 0x48
 8003754:	42a9      	cmp	r1, r5
 8003756:	bf08      	it	eq
 8003758:	f043 0301 	orreq.w	r3, r3, #1
 800375c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8003760:	4281      	cmp	r1, r0
 8003762:	bf08      	it	eq
 8003764:	f043 0301 	orreq.w	r3, r3, #1
 8003768:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800376c:	4291      	cmp	r1, r2
 800376e:	bf08      	it	eq
 8003770:	f043 0301 	orreq.w	r3, r3, #1
 8003774:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8003778:	42a9      	cmp	r1, r5
 800377a:	bf08      	it	eq
 800377c:	f043 0301 	orreq.w	r3, r3, #1
 8003780:	3548      	adds	r5, #72	; 0x48
 8003782:	4281      	cmp	r1, r0
 8003784:	bf08      	it	eq
 8003786:	f043 0301 	orreq.w	r3, r3, #1
 800378a:	3048      	adds	r0, #72	; 0x48
 800378c:	4291      	cmp	r1, r2
 800378e:	bf08      	it	eq
 8003790:	f043 0301 	orreq.w	r3, r3, #1
 8003794:	3248      	adds	r2, #72	; 0x48
 8003796:	42a9      	cmp	r1, r5
 8003798:	bf08      	it	eq
 800379a:	f043 0301 	orreq.w	r3, r3, #1
 800379e:	3548      	adds	r5, #72	; 0x48
 80037a0:	4281      	cmp	r1, r0
 80037a2:	bf08      	it	eq
 80037a4:	f043 0301 	orreq.w	r3, r3, #1
 80037a8:	3048      	adds	r0, #72	; 0x48
 80037aa:	4291      	cmp	r1, r2
 80037ac:	bf08      	it	eq
 80037ae:	f043 0301 	orreq.w	r3, r3, #1
 80037b2:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80037b6:	42a9      	cmp	r1, r5
 80037b8:	bf08      	it	eq
 80037ba:	f043 0301 	orreq.w	r3, r3, #1
 80037be:	f502 429f 	add.w	r2, r2, #20352	; 0x4f80
 80037c2:	4d6d      	ldr	r5, [pc, #436]	; (8003978 <HAL_DMA_Start_IT+0x580>)
 80037c4:	4281      	cmp	r1, r0
 80037c6:	bf08      	it	eq
 80037c8:	f043 0301 	orreq.w	r3, r3, #1
 80037cc:	486b      	ldr	r0, [pc, #428]	; (800397c <HAL_DMA_Start_IT+0x584>)
 80037ce:	4291      	cmp	r1, r2
 80037d0:	bf08      	it	eq
 80037d2:	f043 0301 	orreq.w	r3, r3, #1
 80037d6:	323c      	adds	r2, #60	; 0x3c
 80037d8:	42a9      	cmp	r1, r5
 80037da:	bf08      	it	eq
 80037dc:	f043 0301 	orreq.w	r3, r3, #1
 80037e0:	353c      	adds	r5, #60	; 0x3c
 80037e2:	4281      	cmp	r1, r0
 80037e4:	bf08      	it	eq
 80037e6:	f043 0301 	orreq.w	r3, r3, #1
 80037ea:	303c      	adds	r0, #60	; 0x3c
 80037ec:	4291      	cmp	r1, r2
 80037ee:	bf08      	it	eq
 80037f0:	f043 0301 	orreq.w	r3, r3, #1
 80037f4:	323c      	adds	r2, #60	; 0x3c
 80037f6:	42a9      	cmp	r1, r5
 80037f8:	bf08      	it	eq
 80037fa:	f043 0301 	orreq.w	r3, r3, #1
 80037fe:	4281      	cmp	r1, r0
 8003800:	bf08      	it	eq
 8003802:	f043 0301 	orreq.w	r3, r3, #1
 8003806:	4291      	cmp	r1, r2
 8003808:	bf08      	it	eq
 800380a:	f043 0301 	orreq.w	r3, r3, #1
 800380e:	b913      	cbnz	r3, 8003816 <HAL_DMA_Start_IT+0x41e>
 8003810:	4b5b      	ldr	r3, [pc, #364]	; (8003980 <HAL_DMA_Start_IT+0x588>)
 8003812:	4299      	cmp	r1, r3
 8003814:	d10e      	bne.n	8003834 <HAL_DMA_Start_IT+0x43c>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003816:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	03d2      	lsls	r2, r2, #15
 800381c:	d503      	bpl.n	8003826 <HAL_DMA_Start_IT+0x42e>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003824:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8003826:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003828:	b11b      	cbz	r3, 8003832 <HAL_DMA_Start_IT+0x43a>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	6821      	ldr	r1, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003834:	4b4c      	ldr	r3, [pc, #304]	; (8003968 <HAL_DMA_Start_IT+0x570>)
 8003836:	484d      	ldr	r0, [pc, #308]	; (800396c <HAL_DMA_Start_IT+0x574>)
 8003838:	4a4d      	ldr	r2, [pc, #308]	; (8003970 <HAL_DMA_Start_IT+0x578>)
 800383a:	4281      	cmp	r1, r0
 800383c:	bf18      	it	ne
 800383e:	4299      	cmpne	r1, r3
 8003840:	4d4c      	ldr	r5, [pc, #304]	; (8003974 <HAL_DMA_Start_IT+0x57c>)
 8003842:	4c50      	ldr	r4, [pc, #320]	; (8003984 <HAL_DMA_Start_IT+0x58c>)
 8003844:	f100 0060 	add.w	r0, r0, #96	; 0x60
 8003848:	bf0c      	ite	eq
 800384a:	2301      	moveq	r3, #1
 800384c:	2300      	movne	r3, #0
 800384e:	4291      	cmp	r1, r2
 8003850:	bf08      	it	eq
 8003852:	f043 0301 	orreq.w	r3, r3, #1
 8003856:	3260      	adds	r2, #96	; 0x60
 8003858:	42a9      	cmp	r1, r5
 800385a:	bf08      	it	eq
 800385c:	f043 0301 	orreq.w	r3, r3, #1
 8003860:	3560      	adds	r5, #96	; 0x60
 8003862:	42a1      	cmp	r1, r4
 8003864:	bf08      	it	eq
 8003866:	f043 0301 	orreq.w	r3, r3, #1
 800386a:	f504 7468 	add.w	r4, r4, #928	; 0x3a0
 800386e:	4281      	cmp	r1, r0
 8003870:	bf08      	it	eq
 8003872:	f043 0301 	orreq.w	r3, r3, #1
 8003876:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 800387a:	4291      	cmp	r1, r2
 800387c:	bf08      	it	eq
 800387e:	f043 0301 	orreq.w	r3, r3, #1
 8003882:	f502 7268 	add.w	r2, r2, #928	; 0x3a0
 8003886:	42a9      	cmp	r1, r5
 8003888:	bf08      	it	eq
 800388a:	f043 0301 	orreq.w	r3, r3, #1
 800388e:	f505 7568 	add.w	r5, r5, #928	; 0x3a0
 8003892:	42a1      	cmp	r1, r4
 8003894:	bf08      	it	eq
 8003896:	f043 0301 	orreq.w	r3, r3, #1
 800389a:	3460      	adds	r4, #96	; 0x60
 800389c:	4281      	cmp	r1, r0
 800389e:	bf08      	it	eq
 80038a0:	f043 0301 	orreq.w	r3, r3, #1
 80038a4:	3060      	adds	r0, #96	; 0x60
 80038a6:	4291      	cmp	r1, r2
 80038a8:	bf08      	it	eq
 80038aa:	f043 0301 	orreq.w	r3, r3, #1
 80038ae:	3260      	adds	r2, #96	; 0x60
 80038b0:	42a9      	cmp	r1, r5
 80038b2:	bf08      	it	eq
 80038b4:	f043 0301 	orreq.w	r3, r3, #1
 80038b8:	42a1      	cmp	r1, r4
 80038ba:	bf08      	it	eq
 80038bc:	f043 0301 	orreq.w	r3, r3, #1
 80038c0:	4281      	cmp	r1, r0
 80038c2:	bf08      	it	eq
 80038c4:	f043 0301 	orreq.w	r3, r3, #1
 80038c8:	4291      	cmp	r1, r2
 80038ca:	bf08      	it	eq
 80038cc:	f043 0301 	orreq.w	r3, r3, #1
 80038d0:	b933      	cbnz	r3, 80038e0 <HAL_DMA_Start_IT+0x4e8>
 80038d2:	3030      	adds	r0, #48	; 0x30
 80038d4:	1a08      	subs	r0, r1, r0
 80038d6:	fab0 f080 	clz	r0, r0
 80038da:	0940      	lsrs	r0, r0, #5
 80038dc:	2800      	cmp	r0, #0
 80038de:	d03c      	beq.n	800395a <HAL_DMA_Start_IT+0x562>
 80038e0:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038e2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	600b      	str	r3, [r1, #0]
}
 80038ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80038ec:	609f      	str	r7, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	60de      	str	r6, [r3, #12]
 80038f2:	6821      	ldr	r1, [r4, #0]
 80038f4:	e6a3      	b.n	800363e <HAL_DMA_Start_IT+0x246>
  __HAL_LOCK(hdma);
 80038f6:	2002      	movs	r0, #2
}
 80038f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038fa:	4b23      	ldr	r3, [pc, #140]	; (8003988 <HAL_DMA_Start_IT+0x590>)
 80038fc:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003978 <HAL_DMA_Start_IT+0x580>
 8003900:	481e      	ldr	r0, [pc, #120]	; (800397c <HAL_DMA_Start_IT+0x584>)
 8003902:	4561      	cmp	r1, ip
 8003904:	bf18      	it	ne
 8003906:	4299      	cmpne	r1, r3
 8003908:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 800390c:	bf0c      	ite	eq
 800390e:	2301      	moveq	r3, #1
 8003910:	2300      	movne	r3, #0
 8003912:	4281      	cmp	r1, r0
 8003914:	bf08      	it	eq
 8003916:	f043 0301 	orreq.w	r3, r3, #1
 800391a:	3028      	adds	r0, #40	; 0x28
 800391c:	4561      	cmp	r1, ip
 800391e:	bf08      	it	eq
 8003920:	f043 0301 	orreq.w	r3, r3, #1
 8003924:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8003928:	4281      	cmp	r1, r0
 800392a:	bf08      	it	eq
 800392c:	f043 0301 	orreq.w	r3, r3, #1
 8003930:	3028      	adds	r0, #40	; 0x28
 8003932:	4561      	cmp	r1, ip
 8003934:	bf08      	it	eq
 8003936:	f043 0301 	orreq.w	r3, r3, #1
 800393a:	4281      	cmp	r1, r0
 800393c:	bf08      	it	eq
 800393e:	f043 0301 	orreq.w	r3, r3, #1
 8003942:	b91b      	cbnz	r3, 800394c <HAL_DMA_Start_IT+0x554>
 8003944:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <HAL_DMA_Start_IT+0x588>)
 8003946:	4299      	cmp	r1, r3
 8003948:	f47f ae79 	bne.w	800363e <HAL_DMA_Start_IT+0x246>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800394c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800394e:	2301      	movs	r3, #1
 8003950:	f001 011f 	and.w	r1, r1, #31
 8003954:	408b      	lsls	r3, r1
 8003956:	6053      	str	r3, [r2, #4]
 8003958:	e666      	b.n	8003628 <HAL_DMA_Start_IT+0x230>
    __HAL_DMA_ENABLE(hdma);
 800395a:	680b      	ldr	r3, [r1, #0]
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	600b      	str	r3, [r1, #0]
}
 8003962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003964:	400204b8 	.word	0x400204b8
 8003968:	40020010 	.word	0x40020010
 800396c:	40020028 	.word	0x40020028
 8003970:	40020040 	.word	0x40020040
 8003974:	40020058 	.word	0x40020058
 8003978:	5802541c 	.word	0x5802541c
 800397c:	58025430 	.word	0x58025430
 8003980:	58025494 	.word	0x58025494
 8003984:	40020070 	.word	0x40020070
 8003988:	58025408 	.word	0x58025408
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800398c:	680b      	ldr	r3, [r1, #0]
 800398e:	f023 030e 	bic.w	r3, r3, #14
 8003992:	f043 030a 	orr.w	r3, r3, #10
 8003996:	600b      	str	r3, [r1, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003998:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	f43f aebe 	beq.w	800371c <HAL_DMA_Start_IT+0x324>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80039a0:	6822      	ldr	r2, [r4, #0]
 80039a2:	6813      	ldr	r3, [r2, #0]
 80039a4:	f043 0304 	orr.w	r3, r3, #4
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e6b7      	b.n	800371c <HAL_DMA_Start_IT+0x324>

080039ac <HAL_DMA_Abort>:
{
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 80039b0:	f7fd f836 	bl	8000a20 <HAL_GetTick>
  if(hdma == NULL)
 80039b4:	2e00      	cmp	r6, #0
 80039b6:	f000 81ef 	beq.w	8003d98 <HAL_DMA_Abort+0x3ec>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ba:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d006      	beq.n	80039d0 <HAL_DMA_Abort+0x24>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c2:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80039c4:	2300      	movs	r3, #0
    return HAL_ERROR;
 80039c6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c8:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80039ca:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039d0:	6832      	ldr	r2, [r6, #0]
 80039d2:	4604      	mov	r4, r0
 80039d4:	4b6f      	ldr	r3, [pc, #444]	; (8003b94 <HAL_DMA_Abort+0x1e8>)
 80039d6:	4870      	ldr	r0, [pc, #448]	; (8003b98 <HAL_DMA_Abort+0x1ec>)
 80039d8:	4970      	ldr	r1, [pc, #448]	; (8003b9c <HAL_DMA_Abort+0x1f0>)
 80039da:	4282      	cmp	r2, r0
 80039dc:	bf18      	it	ne
 80039de:	429a      	cmpne	r2, r3
 80039e0:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80039e4:	bf0c      	ite	eq
 80039e6:	2301      	moveq	r3, #1
 80039e8:	2300      	movne	r3, #0
 80039ea:	428a      	cmp	r2, r1
 80039ec:	bf08      	it	eq
 80039ee:	f043 0301 	orreq.w	r3, r3, #1
 80039f2:	3130      	adds	r1, #48	; 0x30
 80039f4:	4282      	cmp	r2, r0
 80039f6:	bf08      	it	eq
 80039f8:	f043 0301 	orreq.w	r3, r3, #1
 80039fc:	3030      	adds	r0, #48	; 0x30
 80039fe:	428a      	cmp	r2, r1
 8003a00:	bf08      	it	eq
 8003a02:	f043 0301 	orreq.w	r3, r3, #1
 8003a06:	3130      	adds	r1, #48	; 0x30
 8003a08:	4282      	cmp	r2, r0
 8003a0a:	bf08      	it	eq
 8003a0c:	f043 0301 	orreq.w	r3, r3, #1
 8003a10:	3030      	adds	r0, #48	; 0x30
 8003a12:	428a      	cmp	r2, r1
 8003a14:	bf08      	it	eq
 8003a16:	f043 0301 	orreq.w	r3, r3, #1
 8003a1a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003a1e:	4282      	cmp	r2, r0
 8003a20:	bf08      	it	eq
 8003a22:	f043 0301 	orreq.w	r3, r3, #1
 8003a26:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003a2a:	428a      	cmp	r2, r1
 8003a2c:	bf08      	it	eq
 8003a2e:	f043 0301 	orreq.w	r3, r3, #1
 8003a32:	3130      	adds	r1, #48	; 0x30
 8003a34:	4282      	cmp	r2, r0
 8003a36:	bf08      	it	eq
 8003a38:	f043 0301 	orreq.w	r3, r3, #1
 8003a3c:	3030      	adds	r0, #48	; 0x30
 8003a3e:	428a      	cmp	r2, r1
 8003a40:	bf08      	it	eq
 8003a42:	f043 0301 	orreq.w	r3, r3, #1
 8003a46:	3130      	adds	r1, #48	; 0x30
 8003a48:	4282      	cmp	r2, r0
 8003a4a:	bf08      	it	eq
 8003a4c:	f043 0301 	orreq.w	r3, r3, #1
 8003a50:	3030      	adds	r0, #48	; 0x30
 8003a52:	428a      	cmp	r2, r1
 8003a54:	bf08      	it	eq
 8003a56:	f043 0301 	orreq.w	r3, r3, #1
 8003a5a:	3130      	adds	r1, #48	; 0x30
 8003a5c:	4282      	cmp	r2, r0
 8003a5e:	bf08      	it	eq
 8003a60:	f043 0301 	orreq.w	r3, r3, #1
 8003a64:	428a      	cmp	r2, r1
 8003a66:	bf08      	it	eq
 8003a68:	f043 0301 	orreq.w	r3, r3, #1
 8003a6c:	b91b      	cbnz	r3, 8003a76 <HAL_DMA_Abort+0xca>
 8003a6e:	4b4c      	ldr	r3, [pc, #304]	; (8003ba0 <HAL_DMA_Abort+0x1f4>)
 8003a70:	429a      	cmp	r2, r3
 8003a72:	f040 819d 	bne.w	8003db0 <HAL_DMA_Abort+0x404>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003a76:	6813      	ldr	r3, [r2, #0]
 8003a78:	f023 031e 	bic.w	r3, r3, #30
 8003a7c:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a7e:	6832      	ldr	r2, [r6, #0]
 8003a80:	6953      	ldr	r3, [r2, #20]
 8003a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a86:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003a88:	6832      	ldr	r2, [r6, #0]
 8003a8a:	4615      	mov	r5, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a8c:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <HAL_DMA_Abort+0x1e8>)
 8003a8e:	4842      	ldr	r0, [pc, #264]	; (8003b98 <HAL_DMA_Abort+0x1ec>)
 8003a90:	4942      	ldr	r1, [pc, #264]	; (8003b9c <HAL_DMA_Abort+0x1f0>)
 8003a92:	4282      	cmp	r2, r0
 8003a94:	bf18      	it	ne
 8003a96:	429a      	cmpne	r2, r3
 8003a98:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	428a      	cmp	r2, r1
 8003aa4:	bf08      	it	eq
 8003aa6:	f043 0301 	orreq.w	r3, r3, #1
 8003aaa:	3130      	adds	r1, #48	; 0x30
 8003aac:	4282      	cmp	r2, r0
 8003aae:	bf08      	it	eq
 8003ab0:	f043 0301 	orreq.w	r3, r3, #1
 8003ab4:	3030      	adds	r0, #48	; 0x30
 8003ab6:	428a      	cmp	r2, r1
 8003ab8:	bf08      	it	eq
 8003aba:	f043 0301 	orreq.w	r3, r3, #1
 8003abe:	3130      	adds	r1, #48	; 0x30
 8003ac0:	4282      	cmp	r2, r0
 8003ac2:	bf08      	it	eq
 8003ac4:	f043 0301 	orreq.w	r3, r3, #1
 8003ac8:	3030      	adds	r0, #48	; 0x30
 8003aca:	428a      	cmp	r2, r1
 8003acc:	bf08      	it	eq
 8003ace:	f043 0301 	orreq.w	r3, r3, #1
 8003ad2:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003ad6:	4282      	cmp	r2, r0
 8003ad8:	bf08      	it	eq
 8003ada:	f043 0301 	orreq.w	r3, r3, #1
 8003ade:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003ae2:	428a      	cmp	r2, r1
 8003ae4:	bf08      	it	eq
 8003ae6:	f043 0301 	orreq.w	r3, r3, #1
 8003aea:	3130      	adds	r1, #48	; 0x30
 8003aec:	4282      	cmp	r2, r0
 8003aee:	bf08      	it	eq
 8003af0:	f043 0301 	orreq.w	r3, r3, #1
 8003af4:	3030      	adds	r0, #48	; 0x30
 8003af6:	428a      	cmp	r2, r1
 8003af8:	bf08      	it	eq
 8003afa:	f043 0301 	orreq.w	r3, r3, #1
 8003afe:	3130      	adds	r1, #48	; 0x30
 8003b00:	4282      	cmp	r2, r0
 8003b02:	bf08      	it	eq
 8003b04:	f043 0301 	orreq.w	r3, r3, #1
 8003b08:	3030      	adds	r0, #48	; 0x30
 8003b0a:	428a      	cmp	r2, r1
 8003b0c:	bf08      	it	eq
 8003b0e:	f043 0301 	orreq.w	r3, r3, #1
 8003b12:	3130      	adds	r1, #48	; 0x30
 8003b14:	4282      	cmp	r2, r0
 8003b16:	bf08      	it	eq
 8003b18:	f043 0301 	orreq.w	r3, r3, #1
 8003b1c:	3030      	adds	r0, #48	; 0x30
 8003b1e:	428a      	cmp	r2, r1
 8003b20:	bf08      	it	eq
 8003b22:	f043 0301 	orreq.w	r3, r3, #1
 8003b26:	491f      	ldr	r1, [pc, #124]	; (8003ba4 <HAL_DMA_Abort+0x1f8>)
 8003b28:	4282      	cmp	r2, r0
 8003b2a:	bf08      	it	eq
 8003b2c:	f043 0301 	orreq.w	r3, r3, #1
 8003b30:	481d      	ldr	r0, [pc, #116]	; (8003ba8 <HAL_DMA_Abort+0x1fc>)
 8003b32:	428a      	cmp	r2, r1
 8003b34:	bf08      	it	eq
 8003b36:	f043 0301 	orreq.w	r3, r3, #1
 8003b3a:	3128      	adds	r1, #40	; 0x28
 8003b3c:	4282      	cmp	r2, r0
 8003b3e:	bf08      	it	eq
 8003b40:	f043 0301 	orreq.w	r3, r3, #1
 8003b44:	3028      	adds	r0, #40	; 0x28
 8003b46:	428a      	cmp	r2, r1
 8003b48:	bf08      	it	eq
 8003b4a:	f043 0301 	orreq.w	r3, r3, #1
 8003b4e:	3128      	adds	r1, #40	; 0x28
 8003b50:	4282      	cmp	r2, r0
 8003b52:	bf08      	it	eq
 8003b54:	f043 0301 	orreq.w	r3, r3, #1
 8003b58:	3028      	adds	r0, #40	; 0x28
 8003b5a:	428a      	cmp	r2, r1
 8003b5c:	bf08      	it	eq
 8003b5e:	f043 0301 	orreq.w	r3, r3, #1
 8003b62:	3128      	adds	r1, #40	; 0x28
 8003b64:	4282      	cmp	r2, r0
 8003b66:	bf08      	it	eq
 8003b68:	f043 0301 	orreq.w	r3, r3, #1
 8003b6c:	428a      	cmp	r2, r1
 8003b6e:	bf08      	it	eq
 8003b70:	f043 0301 	orreq.w	r3, r3, #1
 8003b74:	b913      	cbnz	r3, 8003b7c <HAL_DMA_Abort+0x1d0>
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <HAL_DMA_Abort+0x200>)
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d105      	bne.n	8003b88 <HAL_DMA_Abort+0x1dc>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b7c:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8003b7e:	6813      	ldr	r3, [r2, #0]
 8003b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	6832      	ldr	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8003b88:	6813      	ldr	r3, [r2, #0]
 8003b8a:	f023 0301 	bic.w	r3, r3, #1
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	e014      	b.n	8003bbc <HAL_DMA_Abort+0x210>
 8003b92:	bf00      	nop
 8003b94:	40020010 	.word	0x40020010
 8003b98:	40020028 	.word	0x40020028
 8003b9c:	40020040 	.word	0x40020040
 8003ba0:	400204b8 	.word	0x400204b8
 8003ba4:	58025408 	.word	0x58025408
 8003ba8:	5802541c 	.word	0x5802541c
 8003bac:	58025494 	.word	0x58025494
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bb0:	f7fc ff36 	bl	8000a20 <HAL_GetTick>
 8003bb4:	1b00      	subs	r0, r0, r4
 8003bb6:	2805      	cmp	r0, #5
 8003bb8:	f200 80f0 	bhi.w	8003d9c <HAL_DMA_Abort+0x3f0>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	07db      	lsls	r3, r3, #31
 8003bc0:	d4f6      	bmi.n	8003bb0 <HAL_DMA_Abort+0x204>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bc2:	6832      	ldr	r2, [r6, #0]
 8003bc4:	4b80      	ldr	r3, [pc, #512]	; (8003dc8 <HAL_DMA_Abort+0x41c>)
 8003bc6:	4981      	ldr	r1, [pc, #516]	; (8003dcc <HAL_DMA_Abort+0x420>)
 8003bc8:	4c81      	ldr	r4, [pc, #516]	; (8003dd0 <HAL_DMA_Abort+0x424>)
 8003bca:	428a      	cmp	r2, r1
 8003bcc:	bf18      	it	ne
 8003bce:	429a      	cmpne	r2, r3
 8003bd0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003bd4:	487f      	ldr	r0, [pc, #508]	; (8003dd4 <HAL_DMA_Abort+0x428>)
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	42a2      	cmp	r2, r4
 8003bde:	bf08      	it	eq
 8003be0:	f043 0301 	orreq.w	r3, r3, #1
 8003be4:	3448      	adds	r4, #72	; 0x48
 8003be6:	428a      	cmp	r2, r1
 8003be8:	bf08      	it	eq
 8003bea:	f043 0301 	orreq.w	r3, r3, #1
 8003bee:	3148      	adds	r1, #72	; 0x48
 8003bf0:	4282      	cmp	r2, r0
 8003bf2:	bf08      	it	eq
 8003bf4:	f043 0301 	orreq.w	r3, r3, #1
 8003bf8:	3048      	adds	r0, #72	; 0x48
 8003bfa:	42a2      	cmp	r2, r4
 8003bfc:	bf08      	it	eq
 8003bfe:	f043 0301 	orreq.w	r3, r3, #1
 8003c02:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8003c06:	428a      	cmp	r2, r1
 8003c08:	bf08      	it	eq
 8003c0a:	f043 0301 	orreq.w	r3, r3, #1
 8003c0e:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8003c12:	4282      	cmp	r2, r0
 8003c14:	bf08      	it	eq
 8003c16:	f043 0301 	orreq.w	r3, r3, #1
 8003c1a:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8003c1e:	42a2      	cmp	r2, r4
 8003c20:	bf08      	it	eq
 8003c22:	f043 0301 	orreq.w	r3, r3, #1
 8003c26:	3448      	adds	r4, #72	; 0x48
 8003c28:	428a      	cmp	r2, r1
 8003c2a:	bf08      	it	eq
 8003c2c:	f043 0301 	orreq.w	r3, r3, #1
 8003c30:	3148      	adds	r1, #72	; 0x48
 8003c32:	4282      	cmp	r2, r0
 8003c34:	bf08      	it	eq
 8003c36:	f043 0301 	orreq.w	r3, r3, #1
 8003c3a:	3048      	adds	r0, #72	; 0x48
 8003c3c:	42a2      	cmp	r2, r4
 8003c3e:	bf08      	it	eq
 8003c40:	f043 0301 	orreq.w	r3, r3, #1
 8003c44:	3448      	adds	r4, #72	; 0x48
 8003c46:	428a      	cmp	r2, r1
 8003c48:	bf08      	it	eq
 8003c4a:	f043 0301 	orreq.w	r3, r3, #1
 8003c4e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8003c50:	4282      	cmp	r2, r0
 8003c52:	bf08      	it	eq
 8003c54:	f043 0301 	orreq.w	r3, r3, #1
 8003c58:	f001 011f 	and.w	r1, r1, #31
 8003c5c:	6db0      	ldr	r0, [r6, #88]	; 0x58
 8003c5e:	42a2      	cmp	r2, r4
 8003c60:	bf08      	it	eq
 8003c62:	f043 0301 	orreq.w	r3, r3, #1
 8003c66:	b91b      	cbnz	r3, 8003c70 <HAL_DMA_Abort+0x2c4>
 8003c68:	4b5b      	ldr	r3, [pc, #364]	; (8003dd8 <HAL_DMA_Abort+0x42c>)
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	f040 80a7 	bne.w	8003dbe <HAL_DMA_Abort+0x412>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c70:	233f      	movs	r3, #63	; 0x3f
 8003c72:	fa03 f101 	lsl.w	r1, r3, r1
 8003c76:	6081      	str	r1, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c78:	6832      	ldr	r2, [r6, #0]
 8003c7a:	4b53      	ldr	r3, [pc, #332]	; (8003dc8 <HAL_DMA_Abort+0x41c>)
 8003c7c:	4953      	ldr	r1, [pc, #332]	; (8003dcc <HAL_DMA_Abort+0x420>)
 8003c7e:	4c54      	ldr	r4, [pc, #336]	; (8003dd0 <HAL_DMA_Abort+0x424>)
 8003c80:	428a      	cmp	r2, r1
 8003c82:	bf18      	it	ne
 8003c84:	429a      	cmpne	r2, r3
 8003c86:	4855      	ldr	r0, [pc, #340]	; (8003ddc <HAL_DMA_Abort+0x430>)
 8003c88:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8003c8c:	bf0c      	ite	eq
 8003c8e:	2301      	moveq	r3, #1
 8003c90:	2300      	movne	r3, #0
 8003c92:	42a2      	cmp	r2, r4
 8003c94:	bf08      	it	eq
 8003c96:	f043 0301 	orreq.w	r3, r3, #1
 8003c9a:	3448      	adds	r4, #72	; 0x48
 8003c9c:	4282      	cmp	r2, r0
 8003c9e:	bf08      	it	eq
 8003ca0:	f043 0301 	orreq.w	r3, r3, #1
 8003ca4:	3048      	adds	r0, #72	; 0x48
 8003ca6:	428a      	cmp	r2, r1
 8003ca8:	bf08      	it	eq
 8003caa:	f043 0301 	orreq.w	r3, r3, #1
 8003cae:	3148      	adds	r1, #72	; 0x48
 8003cb0:	42a2      	cmp	r2, r4
 8003cb2:	bf08      	it	eq
 8003cb4:	f043 0301 	orreq.w	r3, r3, #1
 8003cb8:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8003cbc:	4282      	cmp	r2, r0
 8003cbe:	bf08      	it	eq
 8003cc0:	f043 0301 	orreq.w	r3, r3, #1
 8003cc4:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8003cc8:	428a      	cmp	r2, r1
 8003cca:	bf08      	it	eq
 8003ccc:	f043 0301 	orreq.w	r3, r3, #1
 8003cd0:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8003cd4:	42a2      	cmp	r2, r4
 8003cd6:	bf08      	it	eq
 8003cd8:	f043 0301 	orreq.w	r3, r3, #1
 8003cdc:	3448      	adds	r4, #72	; 0x48
 8003cde:	4282      	cmp	r2, r0
 8003ce0:	bf08      	it	eq
 8003ce2:	f043 0301 	orreq.w	r3, r3, #1
 8003ce6:	3048      	adds	r0, #72	; 0x48
 8003ce8:	428a      	cmp	r2, r1
 8003cea:	bf08      	it	eq
 8003cec:	f043 0301 	orreq.w	r3, r3, #1
 8003cf0:	3148      	adds	r1, #72	; 0x48
 8003cf2:	42a2      	cmp	r2, r4
 8003cf4:	bf08      	it	eq
 8003cf6:	f043 0301 	orreq.w	r3, r3, #1
 8003cfa:	3448      	adds	r4, #72	; 0x48
 8003cfc:	4282      	cmp	r2, r0
 8003cfe:	bf08      	it	eq
 8003d00:	f043 0301 	orreq.w	r3, r3, #1
 8003d04:	3048      	adds	r0, #72	; 0x48
 8003d06:	428a      	cmp	r2, r1
 8003d08:	bf08      	it	eq
 8003d0a:	f043 0301 	orreq.w	r3, r3, #1
 8003d0e:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8003d12:	42a2      	cmp	r2, r4
 8003d14:	bf08      	it	eq
 8003d16:	f043 0301 	orreq.w	r3, r3, #1
 8003d1a:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 8003d1e:	4c30      	ldr	r4, [pc, #192]	; (8003de0 <HAL_DMA_Abort+0x434>)
 8003d20:	4282      	cmp	r2, r0
 8003d22:	bf08      	it	eq
 8003d24:	f043 0301 	orreq.w	r3, r3, #1
 8003d28:	482e      	ldr	r0, [pc, #184]	; (8003de4 <HAL_DMA_Abort+0x438>)
 8003d2a:	428a      	cmp	r2, r1
 8003d2c:	bf08      	it	eq
 8003d2e:	f043 0301 	orreq.w	r3, r3, #1
 8003d32:	313c      	adds	r1, #60	; 0x3c
 8003d34:	42a2      	cmp	r2, r4
 8003d36:	bf08      	it	eq
 8003d38:	f043 0301 	orreq.w	r3, r3, #1
 8003d3c:	343c      	adds	r4, #60	; 0x3c
 8003d3e:	4282      	cmp	r2, r0
 8003d40:	bf08      	it	eq
 8003d42:	f043 0301 	orreq.w	r3, r3, #1
 8003d46:	303c      	adds	r0, #60	; 0x3c
 8003d48:	428a      	cmp	r2, r1
 8003d4a:	bf08      	it	eq
 8003d4c:	f043 0301 	orreq.w	r3, r3, #1
 8003d50:	313c      	adds	r1, #60	; 0x3c
 8003d52:	42a2      	cmp	r2, r4
 8003d54:	bf08      	it	eq
 8003d56:	f043 0301 	orreq.w	r3, r3, #1
 8003d5a:	4282      	cmp	r2, r0
 8003d5c:	bf08      	it	eq
 8003d5e:	f043 0301 	orreq.w	r3, r3, #1
 8003d62:	428a      	cmp	r2, r1
 8003d64:	bf08      	it	eq
 8003d66:	f043 0301 	orreq.w	r3, r3, #1
 8003d6a:	b913      	cbnz	r3, 8003d72 <HAL_DMA_Abort+0x3c6>
 8003d6c:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <HAL_DMA_Abort+0x43c>)
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d10b      	bne.n	8003d8a <HAL_DMA_Abort+0x3de>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d72:	e9d6 3219 	ldrd	r3, r2, [r6, #100]	; 0x64
 8003d76:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8003d78:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8003d7a:	b133      	cbz	r3, 8003d8a <HAL_DMA_Abort+0x3de>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d82:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d84:	e9d6 321c 	ldrd	r3, r2, [r6, #112]	; 0x70
 8003d88:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8003d8a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003d8c:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8003d8e:	f886 0034 	strb.w	r0, [r6, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8003d92:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
}
 8003d96:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003d98:	2001      	movs	r0, #1
}
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d9c:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8003d9e:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 8003da0:	2303      	movs	r3, #3
        return HAL_ERROR;
 8003da2:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003da4:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8003da6:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8003daa:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
}
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003db0:	6813      	ldr	r3, [r2, #0]
 8003db2:	f023 030e 	bic.w	r3, r3, #14
 8003db6:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003db8:	6832      	ldr	r2, [r6, #0]
 8003dba:	4615      	mov	r5, r2
 8003dbc:	e666      	b.n	8003a8c <HAL_DMA_Abort+0xe0>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	fa03 f101 	lsl.w	r1, r3, r1
 8003dc4:	6041      	str	r1, [r0, #4]
 8003dc6:	e757      	b.n	8003c78 <HAL_DMA_Abort+0x2cc>
 8003dc8:	40020010 	.word	0x40020010
 8003dcc:	40020028 	.word	0x40020028
 8003dd0:	40020040 	.word	0x40020040
 8003dd4:	40020070 	.word	0x40020070
 8003dd8:	400204b8 	.word	0x400204b8
 8003ddc:	40020058 	.word	0x40020058
 8003de0:	5802541c 	.word	0x5802541c
 8003de4:	58025430 	.word	0x58025430
 8003de8:	58025494 	.word	0x58025494

08003dec <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d06a      	beq.n	8003ec6 <HAL_DMA_Abort_IT+0xda>
{
 8003df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003df4:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2a02      	cmp	r2, #2
 8003dfc:	d004      	beq.n	8003e08 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dfe:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8003e00:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e02:	655a      	str	r2, [r3, #84]	; 0x54
}
 8003e04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e08:	6802      	ldr	r2, [r0, #0]
 8003e0a:	4986      	ldr	r1, [pc, #536]	; (8004024 <HAL_DMA_Abort_IT+0x238>)
 8003e0c:	428a      	cmp	r2, r1
 8003e0e:	d050      	beq.n	8003eb2 <HAL_DMA_Abort_IT+0xc6>
 8003e10:	4885      	ldr	r0, [pc, #532]	; (8004028 <HAL_DMA_Abort_IT+0x23c>)
 8003e12:	4282      	cmp	r2, r0
 8003e14:	d04d      	beq.n	8003eb2 <HAL_DMA_Abort_IT+0xc6>
 8003e16:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8004040 <HAL_DMA_Abort_IT+0x254>
 8003e1a:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800403c <HAL_DMA_Abort_IT+0x250>
 8003e1e:	f8df e230 	ldr.w	lr, [pc, #560]	; 8004050 <HAL_DMA_Abort_IT+0x264>
 8003e22:	454a      	cmp	r2, r9
 8003e24:	bf18      	it	ne
 8003e26:	4542      	cmpne	r2, r8
 8003e28:	f8df c228 	ldr.w	ip, [pc, #552]	; 8004054 <HAL_DMA_Abort_IT+0x268>
 8003e2c:	4f7f      	ldr	r7, [pc, #508]	; (800402c <HAL_DMA_Abort_IT+0x240>)
 8003e2e:	bf0c      	ite	eq
 8003e30:	f04f 0a01 	moveq.w	sl, #1
 8003e34:	f04f 0a00 	movne.w	sl, #0
 8003e38:	4c7d      	ldr	r4, [pc, #500]	; (8004030 <HAL_DMA_Abort_IT+0x244>)
 8003e3a:	4572      	cmp	r2, lr
 8003e3c:	bf08      	it	eq
 8003e3e:	f04a 0a01 	orreq.w	sl, sl, #1
 8003e42:	f8df b214 	ldr.w	fp, [pc, #532]	; 8004058 <HAL_DMA_Abort_IT+0x26c>
 8003e46:	4e7b      	ldr	r6, [pc, #492]	; (8004034 <HAL_DMA_Abort_IT+0x248>)
 8003e48:	4562      	cmp	r2, ip
 8003e4a:	bf08      	it	eq
 8003e4c:	f04a 0a01 	orreq.w	sl, sl, #1
 8003e50:	4d79      	ldr	r5, [pc, #484]	; (8004038 <HAL_DMA_Abort_IT+0x24c>)
 8003e52:	42ba      	cmp	r2, r7
 8003e54:	bf08      	it	eq
 8003e56:	f04a 0a01 	orreq.w	sl, sl, #1
 8003e5a:	42a2      	cmp	r2, r4
 8003e5c:	bf08      	it	eq
 8003e5e:	f04a 0a01 	orreq.w	sl, sl, #1
 8003e62:	f504 7456 	add.w	r4, r4, #856	; 0x358
 8003e66:	42a2      	cmp	r2, r4
 8003e68:	bf08      	it	eq
 8003e6a:	f04a 0a01 	orreq.w	sl, sl, #1
 8003e6e:	3418      	adds	r4, #24
 8003e70:	42a2      	cmp	r2, r4
 8003e72:	bf08      	it	eq
 8003e74:	f04a 0a01 	orreq.w	sl, sl, #1
 8003e78:	3418      	adds	r4, #24
 8003e7a:	42a2      	cmp	r2, r4
 8003e7c:	bf08      	it	eq
 8003e7e:	f04a 0a01 	orreq.w	sl, sl, #1
 8003e82:	3460      	adds	r4, #96	; 0x60
 8003e84:	455a      	cmp	r2, fp
 8003e86:	bf08      	it	eq
 8003e88:	f04a 0a01 	orreq.w	sl, sl, #1
 8003e8c:	42b2      	cmp	r2, r6
 8003e8e:	bf08      	it	eq
 8003e90:	f04a 0a01 	orreq.w	sl, sl, #1
 8003e94:	42aa      	cmp	r2, r5
 8003e96:	bf08      	it	eq
 8003e98:	f04a 0a01 	orreq.w	sl, sl, #1
 8003e9c:	42a2      	cmp	r2, r4
 8003e9e:	bf08      	it	eq
 8003ea0:	f04a 0a01 	orreq.w	sl, sl, #1
 8003ea4:	f1ba 0f00 	cmp.w	sl, #0
 8003ea8:	d103      	bne.n	8003eb2 <HAL_DMA_Abort_IT+0xc6>
 8003eaa:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800405c <HAL_DMA_Abort_IT+0x270>
 8003eae:	4552      	cmp	r2, sl
 8003eb0:	d10b      	bne.n	8003eca <HAL_DMA_Abort_IT+0xde>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eb2:	2104      	movs	r1, #4
  return HAL_OK;
 8003eb4:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eb6:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003eba:	6813      	ldr	r3, [r2, #0]
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	6013      	str	r3, [r2, #0]
}
 8003ec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8003ec6:	2001      	movs	r0, #1
}
 8003ec8:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003eca:	6814      	ldr	r4, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ecc:	4856      	ldr	r0, [pc, #344]	; (8004028 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ece:	f024 040e 	bic.w	r4, r4, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ed2:	4d5a      	ldr	r5, [pc, #360]	; (800403c <HAL_DMA_Abort_IT+0x250>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ed4:	6014      	str	r4, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 8003ed6:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ed8:	4c59      	ldr	r4, [pc, #356]	; (8004040 <HAL_DMA_Abort_IT+0x254>)
      __HAL_DMA_DISABLE(hdma);
 8003eda:	6811      	ldr	r1, [r2, #0]
 8003edc:	f021 0101 	bic.w	r1, r1, #1
 8003ee0:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ee2:	4a50      	ldr	r2, [pc, #320]	; (8004024 <HAL_DMA_Abort_IT+0x238>)
 8003ee4:	6819      	ldr	r1, [r3, #0]
 8003ee6:	4281      	cmp	r1, r0
 8003ee8:	bf18      	it	ne
 8003eea:	4291      	cmpne	r1, r2
 8003eec:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8003ef0:	bf0c      	ite	eq
 8003ef2:	2201      	moveq	r2, #1
 8003ef4:	2200      	movne	r2, #0
 8003ef6:	42a9      	cmp	r1, r5
 8003ef8:	bf08      	it	eq
 8003efa:	f042 0201 	orreq.w	r2, r2, #1
 8003efe:	3548      	adds	r5, #72	; 0x48
 8003f00:	42a1      	cmp	r1, r4
 8003f02:	bf08      	it	eq
 8003f04:	f042 0201 	orreq.w	r2, r2, #1
 8003f08:	3448      	adds	r4, #72	; 0x48
 8003f0a:	4281      	cmp	r1, r0
 8003f0c:	bf08      	it	eq
 8003f0e:	f042 0201 	orreq.w	r2, r2, #1
 8003f12:	3048      	adds	r0, #72	; 0x48
 8003f14:	42a9      	cmp	r1, r5
 8003f16:	bf08      	it	eq
 8003f18:	f042 0201 	orreq.w	r2, r2, #1
 8003f1c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8003f20:	42a1      	cmp	r1, r4
 8003f22:	bf08      	it	eq
 8003f24:	f042 0201 	orreq.w	r2, r2, #1
 8003f28:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8003f2c:	4281      	cmp	r1, r0
 8003f2e:	bf08      	it	eq
 8003f30:	f042 0201 	orreq.w	r2, r2, #1
 8003f34:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8003f38:	42a9      	cmp	r1, r5
 8003f3a:	bf08      	it	eq
 8003f3c:	f042 0201 	orreq.w	r2, r2, #1
 8003f40:	3548      	adds	r5, #72	; 0x48
 8003f42:	42a1      	cmp	r1, r4
 8003f44:	bf08      	it	eq
 8003f46:	f042 0201 	orreq.w	r2, r2, #1
 8003f4a:	3448      	adds	r4, #72	; 0x48
 8003f4c:	4281      	cmp	r1, r0
 8003f4e:	bf08      	it	eq
 8003f50:	f042 0201 	orreq.w	r2, r2, #1
 8003f54:	3048      	adds	r0, #72	; 0x48
 8003f56:	42a9      	cmp	r1, r5
 8003f58:	bf08      	it	eq
 8003f5a:	f042 0201 	orreq.w	r2, r2, #1
 8003f5e:	3548      	adds	r5, #72	; 0x48
 8003f60:	42a1      	cmp	r1, r4
 8003f62:	bf08      	it	eq
 8003f64:	f042 0201 	orreq.w	r2, r2, #1
 8003f68:	3448      	adds	r4, #72	; 0x48
 8003f6a:	4281      	cmp	r1, r0
 8003f6c:	bf08      	it	eq
 8003f6e:	f042 0201 	orreq.w	r2, r2, #1
 8003f72:	f100 50c0 	add.w	r0, r0, #402653184	; 0x18000000
 8003f76:	42a9      	cmp	r1, r5
 8003f78:	bf08      	it	eq
 8003f7a:	f042 0201 	orreq.w	r2, r2, #1
 8003f7e:	f500 409f 	add.w	r0, r0, #20352	; 0x4f80
 8003f82:	4d30      	ldr	r5, [pc, #192]	; (8004044 <HAL_DMA_Abort_IT+0x258>)
 8003f84:	42a1      	cmp	r1, r4
 8003f86:	bf08      	it	eq
 8003f88:	f042 0201 	orreq.w	r2, r2, #1
 8003f8c:	4c2e      	ldr	r4, [pc, #184]	; (8004048 <HAL_DMA_Abort_IT+0x25c>)
 8003f8e:	4281      	cmp	r1, r0
 8003f90:	bf08      	it	eq
 8003f92:	f042 0201 	orreq.w	r2, r2, #1
 8003f96:	303c      	adds	r0, #60	; 0x3c
 8003f98:	42a9      	cmp	r1, r5
 8003f9a:	bf08      	it	eq
 8003f9c:	f042 0201 	orreq.w	r2, r2, #1
 8003fa0:	353c      	adds	r5, #60	; 0x3c
 8003fa2:	42a1      	cmp	r1, r4
 8003fa4:	bf08      	it	eq
 8003fa6:	f042 0201 	orreq.w	r2, r2, #1
 8003faa:	343c      	adds	r4, #60	; 0x3c
 8003fac:	4281      	cmp	r1, r0
 8003fae:	bf08      	it	eq
 8003fb0:	f042 0201 	orreq.w	r2, r2, #1
 8003fb4:	303c      	adds	r0, #60	; 0x3c
 8003fb6:	42a9      	cmp	r1, r5
 8003fb8:	bf08      	it	eq
 8003fba:	f042 0201 	orreq.w	r2, r2, #1
 8003fbe:	42a1      	cmp	r1, r4
 8003fc0:	bf08      	it	eq
 8003fc2:	f042 0201 	orreq.w	r2, r2, #1
 8003fc6:	4281      	cmp	r1, r0
 8003fc8:	bf08      	it	eq
 8003fca:	f042 0201 	orreq.w	r2, r2, #1
 8003fce:	b912      	cbnz	r2, 8003fd6 <HAL_DMA_Abort_IT+0x1ea>
 8003fd0:	4a1e      	ldr	r2, [pc, #120]	; (800404c <HAL_DMA_Abort_IT+0x260>)
 8003fd2:	4291      	cmp	r1, r2
 8003fd4:	d117      	bne.n	8004006 <HAL_DMA_Abort_IT+0x21a>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fd6:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fd8:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fda:	6801      	ldr	r1, [r0, #0]
 8003fdc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003fe0:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fe2:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fe6:	f001 011f 	and.w	r1, r1, #31
 8003fea:	408a      	lsls	r2, r1
 8003fec:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fee:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8003ff2:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8003ff4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ff6:	b132      	cbz	r2, 8004006 <HAL_DMA_Abort_IT+0x21a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ff8:	6811      	ldr	r1, [r2, #0]
 8003ffa:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003ffe:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004000:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 8004004:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 8004006:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8004008:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 800400a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800400c:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004010:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8004014:	b11a      	cbz	r2, 800401e <HAL_DMA_Abort_IT+0x232>
 8004016:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 8004018:	4790      	blx	r2
  return HAL_OK;
 800401a:	4620      	mov	r0, r4
 800401c:	e6f2      	b.n	8003e04 <HAL_DMA_Abort_IT+0x18>
 800401e:	4610      	mov	r0, r2
 8004020:	e6f0      	b.n	8003e04 <HAL_DMA_Abort_IT+0x18>
 8004022:	bf00      	nop
 8004024:	40020010 	.word	0x40020010
 8004028:	40020028 	.word	0x40020028
 800402c:	400200a0 	.word	0x400200a0
 8004030:	400200b8 	.word	0x400200b8
 8004034:	40020470 	.word	0x40020470
 8004038:	40020488 	.word	0x40020488
 800403c:	40020040 	.word	0x40020040
 8004040:	40020058 	.word	0x40020058
 8004044:	5802541c 	.word	0x5802541c
 8004048:	58025430 	.word	0x58025430
 800404c:	58025494 	.word	0x58025494
 8004050:	40020070 	.word	0x40020070
 8004054:	40020088 	.word	0x40020088
 8004058:	40020458 	.word	0x40020458
 800405c:	400204b8 	.word	0x400204b8

08004060 <HAL_DMA_IRQHandler>:
{
 8004060:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004062:	4ba5      	ldr	r3, [pc, #660]	; (80042f8 <HAL_DMA_IRQHandler+0x298>)
{
 8004064:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004066:	6804      	ldr	r4, [r0, #0]
  __IO uint32_t count = 0U;
 8004068:	2100      	movs	r1, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800406a:	4aa4      	ldr	r2, [pc, #656]	; (80042fc <HAL_DMA_IRQHandler+0x29c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800406c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800406e:	429c      	cmp	r4, r3
  __IO uint32_t count = 0U;
 8004070:	9101      	str	r1, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004072:	6816      	ldr	r6, [r2, #0]
  tmpisr_dma  = regs_dma->ISR;
 8004074:	682f      	ldr	r7, [r5, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8004076:	682a      	ldr	r2, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004078:	d04d      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb6>
 800407a:	3318      	adds	r3, #24
 800407c:	429c      	cmp	r4, r3
 800407e:	d04a      	beq.n	8004116 <HAL_DMA_IRQHandler+0xb6>
 8004080:	3330      	adds	r3, #48	; 0x30
 8004082:	f8df c284 	ldr.w	ip, [pc, #644]	; 8004308 <HAL_DMA_IRQHandler+0x2a8>
 8004086:	499e      	ldr	r1, [pc, #632]	; (8004300 <HAL_DMA_IRQHandler+0x2a0>)
 8004088:	4564      	cmp	r4, ip
 800408a:	bf18      	it	ne
 800408c:	429c      	cmpne	r4, r3
 800408e:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	428c      	cmp	r4, r1
 800409a:	bf08      	it	eq
 800409c:	f043 0301 	orreq.w	r3, r3, #1
 80040a0:	3130      	adds	r1, #48	; 0x30
 80040a2:	4564      	cmp	r4, ip
 80040a4:	bf08      	it	eq
 80040a6:	f043 0301 	orreq.w	r3, r3, #1
 80040aa:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80040ae:	428c      	cmp	r4, r1
 80040b0:	bf08      	it	eq
 80040b2:	f043 0301 	orreq.w	r3, r3, #1
 80040b6:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80040ba:	4564      	cmp	r4, ip
 80040bc:	bf08      	it	eq
 80040be:	f043 0301 	orreq.w	r3, r3, #1
 80040c2:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 80040c6:	428c      	cmp	r4, r1
 80040c8:	bf08      	it	eq
 80040ca:	f043 0301 	orreq.w	r3, r3, #1
 80040ce:	3130      	adds	r1, #48	; 0x30
 80040d0:	4564      	cmp	r4, ip
 80040d2:	bf08      	it	eq
 80040d4:	f043 0301 	orreq.w	r3, r3, #1
 80040d8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80040dc:	428c      	cmp	r4, r1
 80040de:	bf08      	it	eq
 80040e0:	f043 0301 	orreq.w	r3, r3, #1
 80040e4:	3130      	adds	r1, #48	; 0x30
 80040e6:	4564      	cmp	r4, ip
 80040e8:	bf08      	it	eq
 80040ea:	f043 0301 	orreq.w	r3, r3, #1
 80040ee:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80040f2:	428c      	cmp	r4, r1
 80040f4:	bf08      	it	eq
 80040f6:	f043 0301 	orreq.w	r3, r3, #1
 80040fa:	3130      	adds	r1, #48	; 0x30
 80040fc:	4564      	cmp	r4, ip
 80040fe:	bf08      	it	eq
 8004100:	f043 0301 	orreq.w	r3, r3, #1
 8004104:	428c      	cmp	r4, r1
 8004106:	bf08      	it	eq
 8004108:	f043 0301 	orreq.w	r3, r3, #1
 800410c:	b91b      	cbnz	r3, 8004116 <HAL_DMA_IRQHandler+0xb6>
 800410e:	4b7d      	ldr	r3, [pc, #500]	; (8004304 <HAL_DMA_IRQHandler+0x2a4>)
 8004110:	429c      	cmp	r4, r3
 8004112:	f040 821e 	bne.w	8004552 <HAL_DMA_IRQHandler+0x4f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004116:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8004118:	2308      	movs	r3, #8
 800411a:	f001 021f 	and.w	r2, r1, #31
 800411e:	4093      	lsls	r3, r2
 8004120:	423b      	tst	r3, r7
 8004122:	f040 81fb 	bne.w	800451c <HAL_DMA_IRQHandler+0x4bc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004126:	fa27 f302 	lsr.w	r3, r7, r2
 800412a:	07dc      	lsls	r4, r3, #31
 800412c:	d563      	bpl.n	80041f6 <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800412e:	6801      	ldr	r1, [r0, #0]
 8004130:	4b71      	ldr	r3, [pc, #452]	; (80042f8 <HAL_DMA_IRQHandler+0x298>)
 8004132:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800430c <HAL_DMA_IRQHandler+0x2ac>
 8004136:	4c74      	ldr	r4, [pc, #464]	; (8004308 <HAL_DMA_IRQHandler+0x2a8>)
 8004138:	4561      	cmp	r1, ip
 800413a:	bf18      	it	ne
 800413c:	4299      	cmpne	r1, r3
 800413e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	42a1      	cmp	r1, r4
 800414a:	bf08      	it	eq
 800414c:	f043 0301 	orreq.w	r3, r3, #1
 8004150:	3430      	adds	r4, #48	; 0x30
 8004152:	4561      	cmp	r1, ip
 8004154:	bf08      	it	eq
 8004156:	f043 0301 	orreq.w	r3, r3, #1
 800415a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800415e:	42a1      	cmp	r1, r4
 8004160:	bf08      	it	eq
 8004162:	f043 0301 	orreq.w	r3, r3, #1
 8004166:	3430      	adds	r4, #48	; 0x30
 8004168:	4561      	cmp	r1, ip
 800416a:	bf08      	it	eq
 800416c:	f043 0301 	orreq.w	r3, r3, #1
 8004170:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004174:	42a1      	cmp	r1, r4
 8004176:	bf08      	it	eq
 8004178:	f043 0301 	orreq.w	r3, r3, #1
 800417c:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8004180:	4561      	cmp	r1, ip
 8004182:	bf08      	it	eq
 8004184:	f043 0301 	orreq.w	r3, r3, #1
 8004188:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 800418c:	42a1      	cmp	r1, r4
 800418e:	bf08      	it	eq
 8004190:	f043 0301 	orreq.w	r3, r3, #1
 8004194:	3430      	adds	r4, #48	; 0x30
 8004196:	4561      	cmp	r1, ip
 8004198:	bf08      	it	eq
 800419a:	f043 0301 	orreq.w	r3, r3, #1
 800419e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80041a2:	42a1      	cmp	r1, r4
 80041a4:	bf08      	it	eq
 80041a6:	f043 0301 	orreq.w	r3, r3, #1
 80041aa:	3430      	adds	r4, #48	; 0x30
 80041ac:	4561      	cmp	r1, ip
 80041ae:	bf08      	it	eq
 80041b0:	f043 0301 	orreq.w	r3, r3, #1
 80041b4:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80041b8:	42a1      	cmp	r1, r4
 80041ba:	bf08      	it	eq
 80041bc:	f043 0301 	orreq.w	r3, r3, #1
 80041c0:	3430      	adds	r4, #48	; 0x30
 80041c2:	4561      	cmp	r1, ip
 80041c4:	bf08      	it	eq
 80041c6:	f043 0301 	orreq.w	r3, r3, #1
 80041ca:	42a1      	cmp	r1, r4
 80041cc:	bf08      	it	eq
 80041ce:	f043 0301 	orreq.w	r3, r3, #1
 80041d2:	b91b      	cbnz	r3, 80041dc <HAL_DMA_IRQHandler+0x17c>
 80041d4:	4b4b      	ldr	r3, [pc, #300]	; (8004304 <HAL_DMA_IRQHandler+0x2a4>)
 80041d6:	4299      	cmp	r1, r3
 80041d8:	f040 8285 	bne.w	80046e6 <HAL_DMA_IRQHandler+0x686>
 80041dc:	694b      	ldr	r3, [r1, #20]
 80041de:	0619      	lsls	r1, r3, #24
 80041e0:	d509      	bpl.n	80041f6 <HAL_DMA_IRQHandler+0x196>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041e2:	2101      	movs	r1, #1
 80041e4:	4091      	lsls	r1, r2
 80041e6:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041e8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80041ea:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80041ec:	f043 0302 	orr.w	r3, r3, #2
 80041f0:	f001 021f 	and.w	r2, r1, #31
 80041f4:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041f6:	2404      	movs	r4, #4
 80041f8:	4094      	lsls	r4, r2
 80041fa:	423c      	tst	r4, r7
 80041fc:	d067      	beq.n	80042ce <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80041fe:	6801      	ldr	r1, [r0, #0]
 8004200:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <HAL_DMA_IRQHandler+0x298>)
 8004202:	f8df e108 	ldr.w	lr, [pc, #264]	; 800430c <HAL_DMA_IRQHandler+0x2ac>
 8004206:	f8df c100 	ldr.w	ip, [pc, #256]	; 8004308 <HAL_DMA_IRQHandler+0x2a8>
 800420a:	4571      	cmp	r1, lr
 800420c:	bf18      	it	ne
 800420e:	4299      	cmpne	r1, r3
 8004210:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8004214:	bf0c      	ite	eq
 8004216:	2301      	moveq	r3, #1
 8004218:	2300      	movne	r3, #0
 800421a:	4561      	cmp	r1, ip
 800421c:	bf08      	it	eq
 800421e:	f043 0301 	orreq.w	r3, r3, #1
 8004222:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004226:	4571      	cmp	r1, lr
 8004228:	bf08      	it	eq
 800422a:	f043 0301 	orreq.w	r3, r3, #1
 800422e:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8004232:	4561      	cmp	r1, ip
 8004234:	bf08      	it	eq
 8004236:	f043 0301 	orreq.w	r3, r3, #1
 800423a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800423e:	4571      	cmp	r1, lr
 8004240:	bf08      	it	eq
 8004242:	f043 0301 	orreq.w	r3, r3, #1
 8004246:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800424a:	4561      	cmp	r1, ip
 800424c:	bf08      	it	eq
 800424e:	f043 0301 	orreq.w	r3, r3, #1
 8004252:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8004256:	4571      	cmp	r1, lr
 8004258:	bf08      	it	eq
 800425a:	f043 0301 	orreq.w	r3, r3, #1
 800425e:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8004262:	4561      	cmp	r1, ip
 8004264:	bf08      	it	eq
 8004266:	f043 0301 	orreq.w	r3, r3, #1
 800426a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800426e:	4571      	cmp	r1, lr
 8004270:	bf08      	it	eq
 8004272:	f043 0301 	orreq.w	r3, r3, #1
 8004276:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800427a:	4561      	cmp	r1, ip
 800427c:	bf08      	it	eq
 800427e:	f043 0301 	orreq.w	r3, r3, #1
 8004282:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004286:	4571      	cmp	r1, lr
 8004288:	bf08      	it	eq
 800428a:	f043 0301 	orreq.w	r3, r3, #1
 800428e:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8004292:	4561      	cmp	r1, ip
 8004294:	bf08      	it	eq
 8004296:	f043 0301 	orreq.w	r3, r3, #1
 800429a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800429e:	4571      	cmp	r1, lr
 80042a0:	bf08      	it	eq
 80042a2:	f043 0301 	orreq.w	r3, r3, #1
 80042a6:	4561      	cmp	r1, ip
 80042a8:	bf08      	it	eq
 80042aa:	f043 0301 	orreq.w	r3, r3, #1
 80042ae:	b91b      	cbnz	r3, 80042b8 <HAL_DMA_IRQHandler+0x258>
 80042b0:	4b14      	ldr	r3, [pc, #80]	; (8004304 <HAL_DMA_IRQHandler+0x2a4>)
 80042b2:	4299      	cmp	r1, r3
 80042b4:	f040 8215 	bne.w	80046e2 <HAL_DMA_IRQHandler+0x682>
 80042b8:	680b      	ldr	r3, [r1, #0]
 80042ba:	079b      	lsls	r3, r3, #30
 80042bc:	d507      	bpl.n	80042ce <HAL_DMA_IRQHandler+0x26e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042be:	60ac      	str	r4, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80042c2:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80042c4:	f043 0304 	orr.w	r3, r3, #4
 80042c8:	f001 021f 	and.w	r2, r1, #31
 80042cc:	6543      	str	r3, [r0, #84]	; 0x54
 80042ce:	4604      	mov	r4, r0
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042d0:	2010      	movs	r0, #16
 80042d2:	4090      	lsls	r0, r2
 80042d4:	4238      	tst	r0, r7
 80042d6:	f000 8086 	beq.w	80043e6 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042da:	6821      	ldr	r1, [r4, #0]
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_DMA_IRQHandler+0x298>)
 80042de:	f8df e02c 	ldr.w	lr, [pc, #44]	; 800430c <HAL_DMA_IRQHandler+0x2ac>
 80042e2:	f8df c024 	ldr.w	ip, [pc, #36]	; 8004308 <HAL_DMA_IRQHandler+0x2a8>
 80042e6:	4571      	cmp	r1, lr
 80042e8:	bf18      	it	ne
 80042ea:	4299      	cmpne	r1, r3
 80042ec:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80042f0:	bf08      	it	eq
 80042f2:	2301      	moveq	r3, #1
 80042f4:	e00c      	b.n	8004310 <HAL_DMA_IRQHandler+0x2b0>
 80042f6:	bf00      	nop
 80042f8:	40020010 	.word	0x40020010
 80042fc:	200002c4 	.word	0x200002c4
 8004300:	40020070 	.word	0x40020070
 8004304:	400204b8 	.word	0x400204b8
 8004308:	40020040 	.word	0x40020040
 800430c:	40020028 	.word	0x40020028
 8004310:	bf18      	it	ne
 8004312:	2300      	movne	r3, #0
 8004314:	4561      	cmp	r1, ip
 8004316:	bf08      	it	eq
 8004318:	f043 0301 	orreq.w	r3, r3, #1
 800431c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004320:	4571      	cmp	r1, lr
 8004322:	bf08      	it	eq
 8004324:	f043 0301 	orreq.w	r3, r3, #1
 8004328:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800432c:	4561      	cmp	r1, ip
 800432e:	bf08      	it	eq
 8004330:	f043 0301 	orreq.w	r3, r3, #1
 8004334:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004338:	4571      	cmp	r1, lr
 800433a:	bf08      	it	eq
 800433c:	f043 0301 	orreq.w	r3, r3, #1
 8004340:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8004344:	4561      	cmp	r1, ip
 8004346:	bf08      	it	eq
 8004348:	f043 0301 	orreq.w	r3, r3, #1
 800434c:	f50c 7c5c 	add.w	ip, ip, #880	; 0x370
 8004350:	4571      	cmp	r1, lr
 8004352:	bf08      	it	eq
 8004354:	f043 0301 	orreq.w	r3, r3, #1
 8004358:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 800435c:	4561      	cmp	r1, ip
 800435e:	bf08      	it	eq
 8004360:	f043 0301 	orreq.w	r3, r3, #1
 8004364:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004368:	4571      	cmp	r1, lr
 800436a:	bf08      	it	eq
 800436c:	f043 0301 	orreq.w	r3, r3, #1
 8004370:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8004374:	4561      	cmp	r1, ip
 8004376:	bf08      	it	eq
 8004378:	f043 0301 	orreq.w	r3, r3, #1
 800437c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004380:	4571      	cmp	r1, lr
 8004382:	bf08      	it	eq
 8004384:	f043 0301 	orreq.w	r3, r3, #1
 8004388:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800438c:	4561      	cmp	r1, ip
 800438e:	bf08      	it	eq
 8004390:	f043 0301 	orreq.w	r3, r3, #1
 8004394:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004398:	4571      	cmp	r1, lr
 800439a:	bf08      	it	eq
 800439c:	f043 0301 	orreq.w	r3, r3, #1
 80043a0:	4561      	cmp	r1, ip
 80043a2:	bf08      	it	eq
 80043a4:	f043 0301 	orreq.w	r3, r3, #1
 80043a8:	b91b      	cbnz	r3, 80043b2 <HAL_DMA_IRQHandler+0x352>
 80043aa:	4b9f      	ldr	r3, [pc, #636]	; (8004628 <HAL_DMA_IRQHandler+0x5c8>)
 80043ac:	4299      	cmp	r1, r3
 80043ae:	f040 8194 	bne.w	80046da <HAL_DMA_IRQHandler+0x67a>
 80043b2:	680b      	ldr	r3, [r1, #0]
 80043b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80043b8:	b1ab      	cbz	r3, 80043e6 <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043ba:	60a8      	str	r0, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	0350      	lsls	r0, r2, #13
 80043c2:	f100 8102 	bmi.w	80045ca <HAL_DMA_IRQHandler+0x56a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	05d2      	lsls	r2, r2, #23
 80043ca:	d403      	bmi.n	80043d4 <HAL_DMA_IRQHandler+0x374>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	f022 0208 	bic.w	r2, r2, #8
 80043d2:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80043d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 80ff 	beq.w	80045da <HAL_DMA_IRQHandler+0x57a>
            hdma->XferHalfCpltCallback(hdma);
 80043dc:	4620      	mov	r0, r4
 80043de:	4798      	blx	r3
 80043e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80043e2:	f001 021f 	and.w	r2, r1, #31
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043e6:	2120      	movs	r1, #32
 80043e8:	4091      	lsls	r1, r2
 80043ea:	4239      	tst	r1, r7
 80043ec:	d068      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x460>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80043ee:	6822      	ldr	r2, [r4, #0]
 80043f0:	4b8e      	ldr	r3, [pc, #568]	; (800462c <HAL_DMA_IRQHandler+0x5cc>)
 80043f2:	4f8f      	ldr	r7, [pc, #572]	; (8004630 <HAL_DMA_IRQHandler+0x5d0>)
 80043f4:	488f      	ldr	r0, [pc, #572]	; (8004634 <HAL_DMA_IRQHandler+0x5d4>)
 80043f6:	42ba      	cmp	r2, r7
 80043f8:	bf18      	it	ne
 80043fa:	429a      	cmpne	r2, r3
 80043fc:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8004400:	bf0c      	ite	eq
 8004402:	2301      	moveq	r3, #1
 8004404:	2300      	movne	r3, #0
 8004406:	4282      	cmp	r2, r0
 8004408:	bf08      	it	eq
 800440a:	f043 0301 	orreq.w	r3, r3, #1
 800440e:	3030      	adds	r0, #48	; 0x30
 8004410:	42ba      	cmp	r2, r7
 8004412:	bf08      	it	eq
 8004414:	f043 0301 	orreq.w	r3, r3, #1
 8004418:	3730      	adds	r7, #48	; 0x30
 800441a:	4282      	cmp	r2, r0
 800441c:	bf08      	it	eq
 800441e:	f043 0301 	orreq.w	r3, r3, #1
 8004422:	3030      	adds	r0, #48	; 0x30
 8004424:	42ba      	cmp	r2, r7
 8004426:	bf08      	it	eq
 8004428:	f043 0301 	orreq.w	r3, r3, #1
 800442c:	3730      	adds	r7, #48	; 0x30
 800442e:	4282      	cmp	r2, r0
 8004430:	bf08      	it	eq
 8004432:	f043 0301 	orreq.w	r3, r3, #1
 8004436:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800443a:	42ba      	cmp	r2, r7
 800443c:	bf08      	it	eq
 800443e:	f043 0301 	orreq.w	r3, r3, #1
 8004442:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8004446:	4282      	cmp	r2, r0
 8004448:	bf08      	it	eq
 800444a:	f043 0301 	orreq.w	r3, r3, #1
 800444e:	3030      	adds	r0, #48	; 0x30
 8004450:	42ba      	cmp	r2, r7
 8004452:	bf08      	it	eq
 8004454:	f043 0301 	orreq.w	r3, r3, #1
 8004458:	3730      	adds	r7, #48	; 0x30
 800445a:	4282      	cmp	r2, r0
 800445c:	bf08      	it	eq
 800445e:	f043 0301 	orreq.w	r3, r3, #1
 8004462:	3030      	adds	r0, #48	; 0x30
 8004464:	42ba      	cmp	r2, r7
 8004466:	bf08      	it	eq
 8004468:	f043 0301 	orreq.w	r3, r3, #1
 800446c:	3730      	adds	r7, #48	; 0x30
 800446e:	4282      	cmp	r2, r0
 8004470:	bf08      	it	eq
 8004472:	f043 0301 	orreq.w	r3, r3, #1
 8004476:	3030      	adds	r0, #48	; 0x30
 8004478:	42ba      	cmp	r2, r7
 800447a:	bf08      	it	eq
 800447c:	f043 0301 	orreq.w	r3, r3, #1
 8004480:	4282      	cmp	r2, r0
 8004482:	bf08      	it	eq
 8004484:	f043 0301 	orreq.w	r3, r3, #1
 8004488:	b91b      	cbnz	r3, 8004492 <HAL_DMA_IRQHandler+0x432>
 800448a:	4b67      	ldr	r3, [pc, #412]	; (8004628 <HAL_DMA_IRQHandler+0x5c8>)
 800448c:	429a      	cmp	r2, r3
 800448e:	f040 812c 	bne.w	80046ea <HAL_DMA_IRQHandler+0x68a>
 8004492:	6813      	ldr	r3, [r2, #0]
 8004494:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004498:	b193      	cbz	r3, 80044c0 <HAL_DMA_IRQHandler+0x460>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800449a:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800449c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	f000 809e 	beq.w	80045e2 <HAL_DMA_IRQHandler+0x582>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	0357      	lsls	r7, r2, #13
 80044ac:	f140 80ce 	bpl.w	800464c <HAL_DMA_IRQHandler+0x5ec>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	031d      	lsls	r5, r3, #12
 80044b4:	f140 80d9 	bpl.w	800466a <HAL_DMA_IRQHandler+0x60a>
          if(hdma->XferCpltCallback != NULL)
 80044b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044ba:	b10b      	cbz	r3, 80044c0 <HAL_DMA_IRQHandler+0x460>
            hdma->XferCpltCallback(hdma);
 80044bc:	4620      	mov	r0, r4
 80044be:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d07f      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x566>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80044c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044c8:	07d8      	lsls	r0, r3, #31
 80044ca:	d51f      	bpl.n	800450c <HAL_DMA_IRQHandler+0x4ac>
        __HAL_DMA_DISABLE(hdma);
 80044cc:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80044ce:	2004      	movs	r0, #4
 80044d0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80044d4:	6813      	ldr	r3, [r2, #0]
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044dc:	4b56      	ldr	r3, [pc, #344]	; (8004638 <HAL_DMA_IRQHandler+0x5d8>)
 80044de:	6822      	ldr	r2, [r4, #0]
 80044e0:	fba3 3606 	umull	r3, r6, r3, r6
 80044e4:	0ab6      	lsrs	r6, r6, #10
 80044e6:	e002      	b.n	80044ee <HAL_DMA_IRQHandler+0x48e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80044e8:	6813      	ldr	r3, [r2, #0]
 80044ea:	07d9      	lsls	r1, r3, #31
 80044ec:	d504      	bpl.n	80044f8 <HAL_DMA_IRQHandler+0x498>
          if (++count > timeout)
 80044ee:	9b01      	ldr	r3, [sp, #4]
 80044f0:	3301      	adds	r3, #1
 80044f2:	42b3      	cmp	r3, r6
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	d9f7      	bls.n	80044e8 <HAL_DMA_IRQHandler+0x488>
        __HAL_UNLOCK(hdma);
 80044f8:	2300      	movs	r3, #0
 80044fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044fe:	6813      	ldr	r3, [r2, #0]
 8004500:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8004502:	bf4c      	ite	mi
 8004504:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8004506:	2301      	movpl	r3, #1
 8004508:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800450c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d059      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x566>
        hdma->XferErrorCallback(hdma);
 8004512:	4620      	mov	r0, r4
}
 8004514:	b003      	add	sp, #12
 8004516:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 800451a:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	075b      	lsls	r3, r3, #29
 8004520:	f57f ae01 	bpl.w	8004126 <HAL_DMA_IRQHandler+0xc6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004524:	6822      	ldr	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004526:	2308      	movs	r3, #8
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004528:	f022 0204 	bic.w	r2, r2, #4
 800452c:	6022      	str	r2, [r4, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800452e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004530:	f002 021f 	and.w	r2, r2, #31
 8004534:	4093      	lsls	r3, r2
 8004536:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004538:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800453a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	f001 021f 	and.w	r2, r1, #31
 8004544:	6543      	str	r3, [r0, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004546:	fa27 f302 	lsr.w	r3, r7, r2
 800454a:	07dc      	lsls	r4, r3, #31
 800454c:	f57f ae53 	bpl.w	80041f6 <HAL_DMA_IRQHandler+0x196>
 8004550:	e5ed      	b.n	800412e <HAL_DMA_IRQHandler+0xce>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004552:	4b3a      	ldr	r3, [pc, #232]	; (800463c <HAL_DMA_IRQHandler+0x5dc>)
 8004554:	4e3a      	ldr	r6, [pc, #232]	; (8004640 <HAL_DMA_IRQHandler+0x5e0>)
 8004556:	493b      	ldr	r1, [pc, #236]	; (8004644 <HAL_DMA_IRQHandler+0x5e4>)
 8004558:	42b4      	cmp	r4, r6
 800455a:	bf18      	it	ne
 800455c:	429c      	cmpne	r4, r3
 800455e:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	428c      	cmp	r4, r1
 800456a:	bf08      	it	eq
 800456c:	f043 0301 	orreq.w	r3, r3, #1
 8004570:	3128      	adds	r1, #40	; 0x28
 8004572:	42b4      	cmp	r4, r6
 8004574:	bf08      	it	eq
 8004576:	f043 0301 	orreq.w	r3, r3, #1
 800457a:	3628      	adds	r6, #40	; 0x28
 800457c:	428c      	cmp	r4, r1
 800457e:	bf08      	it	eq
 8004580:	f043 0301 	orreq.w	r3, r3, #1
 8004584:	3128      	adds	r1, #40	; 0x28
 8004586:	42b4      	cmp	r4, r6
 8004588:	bf08      	it	eq
 800458a:	f043 0301 	orreq.w	r3, r3, #1
 800458e:	428c      	cmp	r4, r1
 8004590:	bf08      	it	eq
 8004592:	f043 0301 	orreq.w	r3, r3, #1
 8004596:	b913      	cbnz	r3, 800459e <HAL_DMA_IRQHandler+0x53e>
 8004598:	4b2b      	ldr	r3, [pc, #172]	; (8004648 <HAL_DMA_IRQHandler+0x5e8>)
 800459a:	429c      	cmp	r4, r3
 800459c:	d113      	bne.n	80045c6 <HAL_DMA_IRQHandler+0x566>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800459e:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80045a0:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80045a2:	6823      	ldr	r3, [r4, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80045a4:	f001 011f 	and.w	r1, r1, #31
 80045a8:	408e      	lsls	r6, r1
 80045aa:	4216      	tst	r6, r2
 80045ac:	d066      	beq.n	800467c <HAL_DMA_IRQHandler+0x61c>
 80045ae:	075f      	lsls	r7, r3, #29
 80045b0:	d564      	bpl.n	800467c <HAL_DMA_IRQHandler+0x61c>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045b2:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80045b4:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045b6:	f140 809c 	bpl.w	80046f2 <HAL_DMA_IRQHandler+0x692>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045ba:	03da      	lsls	r2, r3, #15
 80045bc:	f100 80f1 	bmi.w	80047a2 <HAL_DMA_IRQHandler+0x742>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045c0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1a6      	bne.n	8004514 <HAL_DMA_IRQHandler+0x4b4>
}
 80045c6:	b003      	add	sp, #12
 80045c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	0319      	lsls	r1, r3, #12
 80045ce:	f57f af01 	bpl.w	80043d4 <HAL_DMA_IRQHandler+0x374>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80045d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f47f af01 	bne.w	80043dc <HAL_DMA_IRQHandler+0x37c>
 80045da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80045dc:	f002 021f 	and.w	r2, r2, #31
 80045e0:	e701      	b.n	80043e6 <HAL_DMA_IRQHandler+0x386>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	6813      	ldr	r3, [r2, #0]
 80045e6:	f023 0316 	bic.w	r3, r3, #22
 80045ea:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80045ec:	6822      	ldr	r2, [r4, #0]
 80045ee:	6953      	ldr	r3, [r2, #20]
 80045f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f4:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d03b      	beq.n	8004674 <HAL_DMA_IRQHandler+0x614>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045fc:	6822      	ldr	r2, [r4, #0]
 80045fe:	6813      	ldr	r3, [r2, #0]
 8004600:	f023 0308 	bic.w	r3, r3, #8
 8004604:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004606:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004608:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 800460a:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 800460c:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800460e:	f002 021f 	and.w	r2, r2, #31
 8004612:	4093      	lsls	r3, r2
 8004614:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8004616:	6d23      	ldr	r3, [r4, #80]	; 0x50
          __HAL_UNLOCK(hdma);
 8004618:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800461c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8004620:	2b00      	cmp	r3, #0
 8004622:	f47f af76 	bne.w	8004512 <HAL_DMA_IRQHandler+0x4b2>
 8004626:	e7ce      	b.n	80045c6 <HAL_DMA_IRQHandler+0x566>
 8004628:	400204b8 	.word	0x400204b8
 800462c:	40020010 	.word	0x40020010
 8004630:	40020028 	.word	0x40020028
 8004634:	40020040 	.word	0x40020040
 8004638:	1b4e81b5 	.word	0x1b4e81b5
 800463c:	58025408 	.word	0x58025408
 8004640:	5802541c 	.word	0x5802541c
 8004644:	58025430 	.word	0x58025430
 8004648:	58025494 	.word	0x58025494
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8004652:	f47f af31 	bne.w	80044b8 <HAL_DMA_IRQHandler+0x458>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004656:	6819      	ldr	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8004658:	2001      	movs	r0, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800465a:	f021 0110 	bic.w	r1, r1, #16
 800465e:	6019      	str	r1, [r3, #0]
            __HAL_UNLOCK(hdma);
 8004660:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8004664:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8004668:	e726      	b.n	80044b8 <HAL_DMA_IRQHandler+0x458>
            if(hdma->XferM1CpltCallback != NULL)
 800466a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800466c:	2b00      	cmp	r3, #0
 800466e:	f47f af25 	bne.w	80044bc <HAL_DMA_IRQHandler+0x45c>
 8004672:	e725      	b.n	80044c0 <HAL_DMA_IRQHandler+0x460>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004674:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1c0      	bne.n	80045fc <HAL_DMA_IRQHandler+0x59c>
 800467a:	e7c4      	b.n	8004606 <HAL_DMA_IRQHandler+0x5a6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800467c:	2602      	movs	r6, #2
 800467e:	408e      	lsls	r6, r1
 8004680:	4216      	tst	r6, r2
 8004682:	d00d      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x640>
 8004684:	079f      	lsls	r7, r3, #30
 8004686:	d50b      	bpl.n	80046a0 <HAL_DMA_IRQHandler+0x640>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004688:	041c      	lsls	r4, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800468a:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800468c:	f140 808e 	bpl.w	80047ac <HAL_DMA_IRQHandler+0x74c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004690:	03d9      	lsls	r1, r3, #15
 8004692:	f100 80e9 	bmi.w	8004868 <HAL_DMA_IRQHandler+0x808>
          if(hdma->XferM1CpltCallback != NULL)
 8004696:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004698:	2b00      	cmp	r3, #0
 800469a:	f47f af3b 	bne.w	8004514 <HAL_DMA_IRQHandler+0x4b4>
 800469e:	e792      	b.n	80045c6 <HAL_DMA_IRQHandler+0x566>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80046a0:	2608      	movs	r6, #8
 80046a2:	fa06 f101 	lsl.w	r1, r6, r1
 80046a6:	4211      	tst	r1, r2
 80046a8:	d08d      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x566>
 80046aa:	071b      	lsls	r3, r3, #28
 80046ac:	d58b      	bpl.n	80045c6 <HAL_DMA_IRQHandler+0x566>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046ae:	6823      	ldr	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046b0:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80046b2:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046b4:	f023 030e 	bic.w	r3, r3, #14
 80046b8:	6023      	str	r3, [r4, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046ba:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 80046c6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046c8:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 80046ca:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80046ce:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f47f af1e 	bne.w	8004514 <HAL_DMA_IRQHandler+0x4b4>
 80046d8:	e775      	b.n	80045c6 <HAL_DMA_IRQHandler+0x566>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80046da:	680b      	ldr	r3, [r1, #0]
 80046dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80046e0:	e66a      	b.n	80043b8 <HAL_DMA_IRQHandler+0x358>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80046e2:	680b      	ldr	r3, [r1, #0]
 80046e4:	e5f3      	b.n	80042ce <HAL_DMA_IRQHandler+0x26e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80046e6:	680b      	ldr	r3, [r1, #0]
 80046e8:	e585      	b.n	80041f6 <HAL_DMA_IRQHandler+0x196>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80046ea:	6813      	ldr	r3, [r2, #0]
 80046ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80046f0:	e6d2      	b.n	8004498 <HAL_DMA_IRQHandler+0x438>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046f2:	069b      	lsls	r3, r3, #26
 80046f4:	d455      	bmi.n	80047a2 <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046f6:	6802      	ldr	r2, [r0, #0]
 80046f8:	4b63      	ldr	r3, [pc, #396]	; (8004888 <HAL_DMA_IRQHandler+0x828>)
 80046fa:	4c64      	ldr	r4, [pc, #400]	; (800488c <HAL_DMA_IRQHandler+0x82c>)
 80046fc:	4964      	ldr	r1, [pc, #400]	; (8004890 <HAL_DMA_IRQHandler+0x830>)
 80046fe:	42a2      	cmp	r2, r4
 8004700:	bf18      	it	ne
 8004702:	429a      	cmpne	r2, r3
 8004704:	4d63      	ldr	r5, [pc, #396]	; (8004894 <HAL_DMA_IRQHandler+0x834>)
 8004706:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	428a      	cmp	r2, r1
 8004712:	bf08      	it	eq
 8004714:	f043 0301 	orreq.w	r3, r3, #1
 8004718:	3148      	adds	r1, #72	; 0x48
 800471a:	42aa      	cmp	r2, r5
 800471c:	bf08      	it	eq
 800471e:	f043 0301 	orreq.w	r3, r3, #1
 8004722:	3548      	adds	r5, #72	; 0x48
 8004724:	42a2      	cmp	r2, r4
 8004726:	bf08      	it	eq
 8004728:	f043 0301 	orreq.w	r3, r3, #1
 800472c:	3448      	adds	r4, #72	; 0x48
 800472e:	428a      	cmp	r2, r1
 8004730:	bf08      	it	eq
 8004732:	f043 0301 	orreq.w	r3, r3, #1
 8004736:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800473a:	42aa      	cmp	r2, r5
 800473c:	bf08      	it	eq
 800473e:	f043 0301 	orreq.w	r3, r3, #1
 8004742:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8004746:	42a2      	cmp	r2, r4
 8004748:	bf08      	it	eq
 800474a:	f043 0301 	orreq.w	r3, r3, #1
 800474e:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8004752:	428a      	cmp	r2, r1
 8004754:	bf08      	it	eq
 8004756:	f043 0301 	orreq.w	r3, r3, #1
 800475a:	3148      	adds	r1, #72	; 0x48
 800475c:	42aa      	cmp	r2, r5
 800475e:	bf08      	it	eq
 8004760:	f043 0301 	orreq.w	r3, r3, #1
 8004764:	3548      	adds	r5, #72	; 0x48
 8004766:	42a2      	cmp	r2, r4
 8004768:	bf08      	it	eq
 800476a:	f043 0301 	orreq.w	r3, r3, #1
 800476e:	3448      	adds	r4, #72	; 0x48
 8004770:	428a      	cmp	r2, r1
 8004772:	bf08      	it	eq
 8004774:	f043 0301 	orreq.w	r3, r3, #1
 8004778:	3148      	adds	r1, #72	; 0x48
 800477a:	42aa      	cmp	r2, r5
 800477c:	bf08      	it	eq
 800477e:	f043 0301 	orreq.w	r3, r3, #1
 8004782:	42a2      	cmp	r2, r4
 8004784:	bf08      	it	eq
 8004786:	f043 0301 	orreq.w	r3, r3, #1
 800478a:	428a      	cmp	r2, r1
 800478c:	bf08      	it	eq
 800478e:	f043 0301 	orreq.w	r3, r3, #1
 8004792:	b913      	cbnz	r3, 800479a <HAL_DMA_IRQHandler+0x73a>
 8004794:	4b40      	ldr	r3, [pc, #256]	; (8004898 <HAL_DMA_IRQHandler+0x838>)
 8004796:	429a      	cmp	r2, r3
 8004798:	d16b      	bne.n	8004872 <HAL_DMA_IRQHandler+0x812>
 800479a:	6813      	ldr	r3, [r2, #0]
 800479c:	f023 0308 	bic.w	r3, r3, #8
 80047a0:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80047a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f47f aeb5 	bne.w	8004514 <HAL_DMA_IRQHandler+0x4b4>
 80047aa:	e70c      	b.n	80045c6 <HAL_DMA_IRQHandler+0x566>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047ac:	069a      	lsls	r2, r3, #26
 80047ae:	d45b      	bmi.n	8004868 <HAL_DMA_IRQHandler+0x808>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047b0:	6802      	ldr	r2, [r0, #0]
 80047b2:	4b35      	ldr	r3, [pc, #212]	; (8004888 <HAL_DMA_IRQHandler+0x828>)
 80047b4:	4c35      	ldr	r4, [pc, #212]	; (800488c <HAL_DMA_IRQHandler+0x82c>)
 80047b6:	4936      	ldr	r1, [pc, #216]	; (8004890 <HAL_DMA_IRQHandler+0x830>)
 80047b8:	42a2      	cmp	r2, r4
 80047ba:	bf18      	it	ne
 80047bc:	429a      	cmpne	r2, r3
 80047be:	4d35      	ldr	r5, [pc, #212]	; (8004894 <HAL_DMA_IRQHandler+0x834>)
 80047c0:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80047c4:	bf0c      	ite	eq
 80047c6:	2301      	moveq	r3, #1
 80047c8:	2300      	movne	r3, #0
 80047ca:	428a      	cmp	r2, r1
 80047cc:	bf08      	it	eq
 80047ce:	f043 0301 	orreq.w	r3, r3, #1
 80047d2:	3148      	adds	r1, #72	; 0x48
 80047d4:	42aa      	cmp	r2, r5
 80047d6:	bf08      	it	eq
 80047d8:	f043 0301 	orreq.w	r3, r3, #1
 80047dc:	3548      	adds	r5, #72	; 0x48
 80047de:	42a2      	cmp	r2, r4
 80047e0:	bf08      	it	eq
 80047e2:	f043 0301 	orreq.w	r3, r3, #1
 80047e6:	3448      	adds	r4, #72	; 0x48
 80047e8:	428a      	cmp	r2, r1
 80047ea:	bf08      	it	eq
 80047ec:	f043 0301 	orreq.w	r3, r3, #1
 80047f0:	f501 7162 	add.w	r1, r1, #904	; 0x388
 80047f4:	42aa      	cmp	r2, r5
 80047f6:	bf08      	it	eq
 80047f8:	f043 0301 	orreq.w	r3, r3, #1
 80047fc:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8004800:	42a2      	cmp	r2, r4
 8004802:	bf08      	it	eq
 8004804:	f043 0301 	orreq.w	r3, r3, #1
 8004808:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800480c:	428a      	cmp	r2, r1
 800480e:	bf08      	it	eq
 8004810:	f043 0301 	orreq.w	r3, r3, #1
 8004814:	3148      	adds	r1, #72	; 0x48
 8004816:	42aa      	cmp	r2, r5
 8004818:	bf08      	it	eq
 800481a:	f043 0301 	orreq.w	r3, r3, #1
 800481e:	3548      	adds	r5, #72	; 0x48
 8004820:	42a2      	cmp	r2, r4
 8004822:	bf08      	it	eq
 8004824:	f043 0301 	orreq.w	r3, r3, #1
 8004828:	3448      	adds	r4, #72	; 0x48
 800482a:	428a      	cmp	r2, r1
 800482c:	bf08      	it	eq
 800482e:	f043 0301 	orreq.w	r3, r3, #1
 8004832:	3148      	adds	r1, #72	; 0x48
 8004834:	42aa      	cmp	r2, r5
 8004836:	bf08      	it	eq
 8004838:	f043 0301 	orreq.w	r3, r3, #1
 800483c:	42a2      	cmp	r2, r4
 800483e:	bf08      	it	eq
 8004840:	f043 0301 	orreq.w	r3, r3, #1
 8004844:	428a      	cmp	r2, r1
 8004846:	bf08      	it	eq
 8004848:	f043 0301 	orreq.w	r3, r3, #1
 800484c:	b913      	cbnz	r3, 8004854 <HAL_DMA_IRQHandler+0x7f4>
 800484e:	4b12      	ldr	r3, [pc, #72]	; (8004898 <HAL_DMA_IRQHandler+0x838>)
 8004850:	429a      	cmp	r2, r3
 8004852:	d113      	bne.n	800487c <HAL_DMA_IRQHandler+0x81c>
 8004854:	6813      	ldr	r3, [r2, #0]
 8004856:	f023 0314 	bic.w	r3, r3, #20
 800485a:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(hdma);
 800485c:	2200      	movs	r2, #0
          hdma->State = HAL_DMA_STATE_READY;
 800485e:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8004860:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004864:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8004868:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800486a:	2b00      	cmp	r3, #0
 800486c:	f47f ae52 	bne.w	8004514 <HAL_DMA_IRQHandler+0x4b4>
 8004870:	e6a9      	b.n	80045c6 <HAL_DMA_IRQHandler+0x566>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004872:	6813      	ldr	r3, [r2, #0]
 8004874:	f023 0304 	bic.w	r3, r3, #4
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	e792      	b.n	80047a2 <HAL_DMA_IRQHandler+0x742>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800487c:	6813      	ldr	r3, [r2, #0]
 800487e:	f023 030a 	bic.w	r3, r3, #10
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	e7ea      	b.n	800485c <HAL_DMA_IRQHandler+0x7fc>
 8004886:	bf00      	nop
 8004888:	40020010 	.word	0x40020010
 800488c:	40020028 	.word	0x40020028
 8004890:	40020040 	.word	0x40020040
 8004894:	40020058 	.word	0x40020058
 8004898:	400204b8 	.word	0x400204b8

0800489c <HAL_DMA_GetState>:
  return hdma->State;
 800489c:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop

080048a4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80048a4:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80048a6:	4770      	bx	lr

080048a8 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	4605      	mov	r5, r0
  uint32_t syncSignalID = 0;
  uint32_t syncPolarity = 0;

  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
 80048ac:	4baa      	ldr	r3, [pc, #680]	; (8004b58 <HAL_DMAEx_ConfigMuxSync+0x2b0>)
 80048ae:	48ab      	ldr	r0, [pc, #684]	; (8004b5c <HAL_DMAEx_ConfigMuxSync+0x2b4>)
{
 80048b0:	460c      	mov	r4, r1
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
 80048b2:	682a      	ldr	r2, [r5, #0]
 80048b4:	49aa      	ldr	r1, [pc, #680]	; (8004b60 <HAL_DMAEx_ConfigMuxSync+0x2b8>)
 80048b6:	429a      	cmp	r2, r3
 80048b8:	bf18      	it	ne
 80048ba:	4282      	cmpne	r2, r0
 80048bc:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80048c0:	bf14      	ite	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	2300      	moveq	r3, #0
 80048c6:	428a      	cmp	r2, r1
 80048c8:	bf0c      	ite	eq
 80048ca:	2300      	moveq	r3, #0
 80048cc:	f003 0301 	andne.w	r3, r3, #1
 80048d0:	3130      	adds	r1, #48	; 0x30
 80048d2:	4282      	cmp	r2, r0
 80048d4:	bf0c      	ite	eq
 80048d6:	2300      	moveq	r3, #0
 80048d8:	f003 0301 	andne.w	r3, r3, #1
 80048dc:	3030      	adds	r0, #48	; 0x30
 80048de:	428a      	cmp	r2, r1
 80048e0:	bf0c      	ite	eq
 80048e2:	2300      	moveq	r3, #0
 80048e4:	f003 0301 	andne.w	r3, r3, #1
 80048e8:	3130      	adds	r1, #48	; 0x30
 80048ea:	4282      	cmp	r2, r0
 80048ec:	bf0c      	ite	eq
 80048ee:	2300      	moveq	r3, #0
 80048f0:	f003 0301 	andne.w	r3, r3, #1
 80048f4:	3030      	adds	r0, #48	; 0x30
 80048f6:	428a      	cmp	r2, r1
 80048f8:	bf0c      	ite	eq
 80048fa:	2300      	moveq	r3, #0
 80048fc:	f003 0301 	andne.w	r3, r3, #1
 8004900:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004904:	4282      	cmp	r2, r0
 8004906:	bf0c      	ite	eq
 8004908:	2300      	moveq	r3, #0
 800490a:	f003 0301 	andne.w	r3, r3, #1
 800490e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004912:	428a      	cmp	r2, r1
 8004914:	bf0c      	ite	eq
 8004916:	2300      	moveq	r3, #0
 8004918:	f003 0301 	andne.w	r3, r3, #1
 800491c:	3130      	adds	r1, #48	; 0x30
 800491e:	4282      	cmp	r2, r0
 8004920:	bf0c      	ite	eq
 8004922:	2300      	moveq	r3, #0
 8004924:	f003 0301 	andne.w	r3, r3, #1
 8004928:	3030      	adds	r0, #48	; 0x30
 800492a:	428a      	cmp	r2, r1
 800492c:	bf0c      	ite	eq
 800492e:	2300      	moveq	r3, #0
 8004930:	f003 0301 	andne.w	r3, r3, #1
 8004934:	3130      	adds	r1, #48	; 0x30
 8004936:	4282      	cmp	r2, r0
 8004938:	bf0c      	ite	eq
 800493a:	2300      	moveq	r3, #0
 800493c:	f003 0301 	andne.w	r3, r3, #1
 8004940:	3030      	adds	r0, #48	; 0x30
 8004942:	428a      	cmp	r2, r1
 8004944:	bf0c      	ite	eq
 8004946:	2300      	moveq	r3, #0
 8004948:	f003 0301 	andne.w	r3, r3, #1
 800494c:	3130      	adds	r1, #48	; 0x30
 800494e:	4282      	cmp	r2, r0
 8004950:	bf0c      	ite	eq
 8004952:	2300      	moveq	r3, #0
 8004954:	f003 0301 	andne.w	r3, r3, #1
 8004958:	3030      	adds	r0, #48	; 0x30
 800495a:	428a      	cmp	r2, r1
 800495c:	bf0c      	ite	eq
 800495e:	2300      	moveq	r3, #0
 8004960:	f003 0301 	andne.w	r3, r3, #1
 8004964:	497f      	ldr	r1, [pc, #508]	; (8004b64 <HAL_DMAEx_ConfigMuxSync+0x2bc>)
 8004966:	4282      	cmp	r2, r0
 8004968:	bf0c      	ite	eq
 800496a:	2300      	moveq	r3, #0
 800496c:	f003 0301 	andne.w	r3, r3, #1
 8004970:	487d      	ldr	r0, [pc, #500]	; (8004b68 <HAL_DMAEx_ConfigMuxSync+0x2c0>)
 8004972:	428a      	cmp	r2, r1
 8004974:	bf0c      	ite	eq
 8004976:	2300      	moveq	r3, #0
 8004978:	f003 0301 	andne.w	r3, r3, #1
 800497c:	3128      	adds	r1, #40	; 0x28
 800497e:	4282      	cmp	r2, r0
 8004980:	bf0c      	ite	eq
 8004982:	2300      	moveq	r3, #0
 8004984:	f003 0301 	andne.w	r3, r3, #1
 8004988:	3028      	adds	r0, #40	; 0x28
 800498a:	428a      	cmp	r2, r1
 800498c:	bf0c      	ite	eq
 800498e:	2300      	moveq	r3, #0
 8004990:	f003 0301 	andne.w	r3, r3, #1
 8004994:	3128      	adds	r1, #40	; 0x28
 8004996:	4282      	cmp	r2, r0
 8004998:	bf0c      	ite	eq
 800499a:	2300      	moveq	r3, #0
 800499c:	f003 0301 	andne.w	r3, r3, #1
 80049a0:	3028      	adds	r0, #40	; 0x28
 80049a2:	428a      	cmp	r2, r1
 80049a4:	bf0c      	ite	eq
 80049a6:	2300      	moveq	r3, #0
 80049a8:	f003 0301 	andne.w	r3, r3, #1
 80049ac:	3128      	adds	r1, #40	; 0x28
 80049ae:	4282      	cmp	r2, r0
 80049b0:	bf0c      	ite	eq
 80049b2:	2300      	moveq	r3, #0
 80049b4:	f003 0301 	andne.w	r3, r3, #1
 80049b8:	428a      	cmp	r2, r1
 80049ba:	bf0c      	ite	eq
 80049bc:	2300      	moveq	r3, #0
 80049be:	f003 0301 	andne.w	r3, r3, #1
 80049c2:	b11b      	cbz	r3, 80049cc <HAL_DMAEx_ConfigMuxSync+0x124>
 80049c4:	4b69      	ldr	r3, [pc, #420]	; (8004b6c <HAL_DMAEx_ConfigMuxSync+0x2c4>)
 80049c6:	429a      	cmp	r2, r3
 80049c8:	f040 80c0 	bne.w	8004b4c <HAL_DMAEx_ConfigMuxSync+0x2a4>
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
 80049cc:	7a23      	ldrb	r3, [r4, #8]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d904      	bls.n	80049dc <HAL_DMAEx_ConfigMuxSync+0x134>
 80049d2:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80049d6:	4866      	ldr	r0, [pc, #408]	; (8004b70 <HAL_DMAEx_ConfigMuxSync+0x2c8>)
 80049d8:	f00e ffb4 	bl	8013944 <assert_failed>
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
 80049dc:	7a63      	ldrb	r3, [r4, #9]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d904      	bls.n	80049ec <HAL_DMAEx_ConfigMuxSync+0x144>
 80049e2:	f240 1195 	movw	r1, #405	; 0x195
 80049e6:	4862      	ldr	r0, [pc, #392]	; (8004b70 <HAL_DMAEx_ConfigMuxSync+0x2c8>)
 80049e8:	f00e ffac 	bl	8013944 <assert_failed>
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));
 80049ec:	68e3      	ldr	r3, [r4, #12]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	2b1f      	cmp	r3, #31
 80049f2:	f200 808d 	bhi.w	8004b10 <HAL_DMAEx_ConfigMuxSync+0x268>

  if(pSyncConfig->SyncEnable == ENABLE)
 80049f6:	7a23      	ldrb	r3, [r4, #8]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d02f      	beq.n	8004a5c <HAL_DMAEx_ConfigMuxSync+0x1b4>
  uint32_t syncPolarity = 0;
 80049fc:	2200      	movs	r2, #0
  uint32_t syncSignalID = 0;
 80049fe:	4611      	mov	r1, r2
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8004a00:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d004      	beq.n	8004a14 <HAL_DMAEx_ConfigMuxSync+0x16c>
    return HAL_OK;
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a0a:	f44f 6300 	mov.w	r3, #2048	; 0x800

    /* Return error status */
    return HAL_ERROR;
 8004a0e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a10:	656b      	str	r3, [r5, #84]	; 0x54
  }
}
 8004a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hdma);
 8004a14:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8004a18:	2801      	cmp	r0, #1
 8004a1a:	f000 8086 	beq.w	8004b2a <HAL_DMAEx_ConfigMuxSync+0x282>
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8004a1e:	6e2f      	ldr	r7, [r5, #96]	; 0x60
    __HAL_UNLOCK(hdma);
 8004a20:	2600      	movs	r6, #0
    __HAL_LOCK(hdma);
 8004a22:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8004a26:	683b      	ldr	r3, [r7, #0]
    return HAL_OK;
 8004a28:	4630      	mov	r0, r6
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8004a2a:	f423 3381 	bic.w	r3, r3, #66048	; 0x10200
 8004a2e:	603b      	str	r3, [r7, #0]
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8004a30:	68e7      	ldr	r7, [r4, #12]
 8004a32:	7a23      	ldrb	r3, [r4, #8]
 8004a34:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8004a38:	6e2f      	ldr	r7, [r5, #96]	; 0x60
 8004a3a:	041b      	lsls	r3, r3, #16
 8004a3c:	f894 e009 	ldrb.w	lr, [r4, #9]
 8004a40:	683c      	ldr	r4, [r7, #0]
 8004a42:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
 8004a46:	b2e4      	uxtb	r4, r4
 8004a48:	ea43 234e 	orr.w	r3, r3, lr, lsl #9
 8004a4c:	4323      	orrs	r3, r4
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004a54:	603b      	str	r3, [r7, #0]
    __HAL_UNLOCK(hdma);
 8004a56:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
}
 8004a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));
 8004a5c:	6863      	ldr	r3, [r4, #4]
 8004a5e:	f433 23c0 	bics.w	r3, r3, #393216	; 0x60000
 8004a62:	d164      	bne.n	8004b2e <HAL_DMAEx_ConfigMuxSync+0x286>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a64:	682a      	ldr	r2, [r5, #0]
 8004a66:	4b3c      	ldr	r3, [pc, #240]	; (8004b58 <HAL_DMAEx_ConfigMuxSync+0x2b0>)
 8004a68:	493c      	ldr	r1, [pc, #240]	; (8004b5c <HAL_DMAEx_ConfigMuxSync+0x2b4>)
 8004a6a:	483d      	ldr	r0, [pc, #244]	; (8004b60 <HAL_DMAEx_ConfigMuxSync+0x2b8>)
 8004a6c:	428a      	cmp	r2, r1
 8004a6e:	bf18      	it	ne
 8004a70:	429a      	cmpne	r2, r3
 8004a72:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	4282      	cmp	r2, r0
 8004a7e:	bf08      	it	eq
 8004a80:	f043 0301 	orreq.w	r3, r3, #1
 8004a84:	3030      	adds	r0, #48	; 0x30
 8004a86:	428a      	cmp	r2, r1
 8004a88:	bf08      	it	eq
 8004a8a:	f043 0301 	orreq.w	r3, r3, #1
 8004a8e:	3130      	adds	r1, #48	; 0x30
 8004a90:	4282      	cmp	r2, r0
 8004a92:	bf08      	it	eq
 8004a94:	f043 0301 	orreq.w	r3, r3, #1
 8004a98:	3030      	adds	r0, #48	; 0x30
 8004a9a:	428a      	cmp	r2, r1
 8004a9c:	bf08      	it	eq
 8004a9e:	f043 0301 	orreq.w	r3, r3, #1
 8004aa2:	3130      	adds	r1, #48	; 0x30
 8004aa4:	4282      	cmp	r2, r0
 8004aa6:	bf08      	it	eq
 8004aa8:	f043 0301 	orreq.w	r3, r3, #1
 8004aac:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004ab0:	428a      	cmp	r2, r1
 8004ab2:	bf08      	it	eq
 8004ab4:	f043 0301 	orreq.w	r3, r3, #1
 8004ab8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004abc:	4282      	cmp	r2, r0
 8004abe:	bf08      	it	eq
 8004ac0:	f043 0301 	orreq.w	r3, r3, #1
 8004ac4:	3030      	adds	r0, #48	; 0x30
 8004ac6:	428a      	cmp	r2, r1
 8004ac8:	bf08      	it	eq
 8004aca:	f043 0301 	orreq.w	r3, r3, #1
 8004ace:	3130      	adds	r1, #48	; 0x30
 8004ad0:	4282      	cmp	r2, r0
 8004ad2:	bf08      	it	eq
 8004ad4:	f043 0301 	orreq.w	r3, r3, #1
 8004ad8:	3030      	adds	r0, #48	; 0x30
 8004ada:	428a      	cmp	r2, r1
 8004adc:	bf08      	it	eq
 8004ade:	f043 0301 	orreq.w	r3, r3, #1
 8004ae2:	3130      	adds	r1, #48	; 0x30
 8004ae4:	4282      	cmp	r2, r0
 8004ae6:	bf08      	it	eq
 8004ae8:	f043 0301 	orreq.w	r3, r3, #1
 8004aec:	3030      	adds	r0, #48	; 0x30
 8004aee:	428a      	cmp	r2, r1
 8004af0:	bf08      	it	eq
 8004af2:	f043 0301 	orreq.w	r3, r3, #1
 8004af6:	6821      	ldr	r1, [r4, #0]
 8004af8:	4282      	cmp	r2, r0
 8004afa:	bf08      	it	eq
 8004afc:	f043 0301 	orreq.w	r3, r3, #1
 8004b00:	b913      	cbnz	r3, 8004b08 <HAL_DMAEx_ConfigMuxSync+0x260>
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <HAL_DMAEx_ConfigMuxSync+0x2cc>)
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d118      	bne.n	8004b3a <HAL_DMAEx_ConfigMuxSync+0x292>
      assert_param(IS_DMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
 8004b08:	2907      	cmp	r1, #7
 8004b0a:	d807      	bhi.n	8004b1c <HAL_DMAEx_ConfigMuxSync+0x274>
    syncPolarity = pSyncConfig->SyncPolarity;
 8004b0c:	6862      	ldr	r2, [r4, #4]
 8004b0e:	e777      	b.n	8004a00 <HAL_DMAEx_ConfigMuxSync+0x158>
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));
 8004b10:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004b14:	4816      	ldr	r0, [pc, #88]	; (8004b70 <HAL_DMAEx_ConfigMuxSync+0x2c8>)
 8004b16:	f00e ff15 	bl	8013944 <assert_failed>
 8004b1a:	e76c      	b.n	80049f6 <HAL_DMAEx_ConfigMuxSync+0x14e>
      assert_param(IS_DMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
 8004b1c:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8004b20:	4813      	ldr	r0, [pc, #76]	; (8004b70 <HAL_DMAEx_ConfigMuxSync+0x2c8>)
 8004b22:	f00e ff0f 	bl	8013944 <assert_failed>
 8004b26:	6821      	ldr	r1, [r4, #0]
 8004b28:	e7f0      	b.n	8004b0c <HAL_DMAEx_ConfigMuxSync+0x264>
    __HAL_LOCK(hdma);
 8004b2a:	2002      	movs	r0, #2
}
 8004b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));
 8004b2e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8004b32:	480f      	ldr	r0, [pc, #60]	; (8004b70 <HAL_DMAEx_ConfigMuxSync+0x2c8>)
 8004b34:	f00e ff06 	bl	8013944 <assert_failed>
 8004b38:	e794      	b.n	8004a64 <HAL_DMAEx_ConfigMuxSync+0x1bc>
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
 8004b3a:	290f      	cmp	r1, #15
 8004b3c:	d9e6      	bls.n	8004b0c <HAL_DMAEx_ConfigMuxSync+0x264>
 8004b3e:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004b42:	480b      	ldr	r0, [pc, #44]	; (8004b70 <HAL_DMAEx_ConfigMuxSync+0x2c8>)
 8004b44:	f00e fefe 	bl	8013944 <assert_failed>
 8004b48:	6821      	ldr	r1, [r4, #0]
 8004b4a:	e7df      	b.n	8004b0c <HAL_DMAEx_ConfigMuxSync+0x264>
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
 8004b4c:	f240 1193 	movw	r1, #403	; 0x193
 8004b50:	4807      	ldr	r0, [pc, #28]	; (8004b70 <HAL_DMAEx_ConfigMuxSync+0x2c8>)
 8004b52:	f00e fef7 	bl	8013944 <assert_failed>
 8004b56:	e739      	b.n	80049cc <HAL_DMAEx_ConfigMuxSync+0x124>
 8004b58:	40020010 	.word	0x40020010
 8004b5c:	40020028 	.word	0x40020028
 8004b60:	40020040 	.word	0x40020040
 8004b64:	58025408 	.word	0x58025408
 8004b68:	5802541c 	.word	0x5802541c
 8004b6c:	58025494 	.word	0x58025494
 8004b70:	08144da4 	.word	0x08144da4
 8004b74:	400204b8 	.word	0x400204b8

08004b78 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b78:	b510      	push	{r4, lr}
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004b7a:	e9d0 2319 	ldrd	r2, r3, [r0, #100]	; 0x64
{
 8004b7e:	4604      	mov	r4, r0
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	421a      	tst	r2, r3
 8004b84:	d00e      	beq.n	8004ba4 <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b86:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004b88:	6813      	ldr	r3, [r2, #0]
 8004b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b8e:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b90:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 8004b94:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004b96:	6d43      	ldr	r3, [r0, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
 8004b98:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b9e:	6543      	str	r3, [r0, #84]	; 0x54
    if(hdma->XferErrorCallback != NULL)
 8004ba0:	b102      	cbz	r2, 8004ba4 <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ba2:	4790      	blx	r2
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
 8004ba4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004ba6:	b1ab      	cbz	r3, 8004bd4 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004ba8:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
 8004bac:	6809      	ldr	r1, [r1, #0]
 8004bae:	4211      	tst	r1, r2
 8004bb0:	d010      	beq.n	8004bd4 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bb8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bba:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8004bbe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004bc0:	6d63      	ldr	r3, [r4, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
 8004bc2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004bc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bc8:	6563      	str	r3, [r4, #84]	; 0x54
      if(hdma->XferErrorCallback != NULL)
 8004bca:	b11a      	cbz	r2, 8004bd4 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004bcc:	4620      	mov	r0, r4
      }
    }
  }
}
 8004bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hdma->XferErrorCallback(hdma);
 8004bd2:	4710      	bx	r2
}
 8004bd4:	bd10      	pop	{r4, pc}
 8004bd6:	bf00      	nop

08004bd8 <FLASH_WaitForLastOperation.constprop.3>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	4605      	mov	r5, r0
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag, errorflag;
  uint32_t tickstart = HAL_GetTick();
 8004bdc:	f7fb ff20 	bl	8000a20 <HAL_GetTick>
 8004be0:	4606      	mov	r6, r0

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));
 8004be2:	1e6b      	subs	r3, r5, #1
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d80e      	bhi.n	8004c06 <FLASH_WaitForLastOperation.constprop.3+0x2e>

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
 8004be8:	2d01      	cmp	r5, #1
 8004bea:	d111      	bne.n	8004c10 <FLASH_WaitForLastOperation.constprop.3+0x38>
  else
  {
    bsyflag = FLASH_FLAG_QW_BANK2;
  }

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004bec:	4c2b      	ldr	r4, [pc, #172]	; (8004c9c <FLASH_WaitForLastOperation.constprop.3+0xc4>)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bee:	f24c 3550 	movw	r5, #50000	; 0xc350
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004bf2:	6923      	ldr	r3, [r4, #16]
 8004bf4:	075b      	lsls	r3, r3, #29
 8004bf6:	d53a      	bpl.n	8004c6e <FLASH_WaitForLastOperation.constprop.3+0x96>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bf8:	f7fb ff12 	bl	8000a20 <HAL_GetTick>
 8004bfc:	1b80      	subs	r0, r0, r6
 8004bfe:	42a8      	cmp	r0, r5
 8004c00:	d9f7      	bls.n	8004bf2 <FLASH_WaitForLastOperation.constprop.3+0x1a>
      {
        return HAL_TIMEOUT;
 8004c02:	2003      	movs	r0, #3
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }

  return HAL_OK;
}
 8004c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));
 8004c06:	f240 3192 	movw	r1, #914	; 0x392
 8004c0a:	4825      	ldr	r0, [pc, #148]	; (8004ca0 <FLASH_WaitForLastOperation.constprop.3+0xc8>)
 8004c0c:	f00e fe9a 	bl	8013944 <assert_failed>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004c10:	4c22      	ldr	r4, [pc, #136]	; (8004c9c <FLASH_WaitForLastOperation.constprop.3+0xc4>)
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c12:	f24c 3750 	movw	r7, #50000	; 0xc350
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004c16:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8004c1a:	075a      	lsls	r2, r3, #29
 8004c1c:	d508      	bpl.n	8004c30 <FLASH_WaitForLastOperation.constprop.3+0x58>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fb feff 	bl	8000a20 <HAL_GetTick>
 8004c22:	1b80      	subs	r0, r0, r6
 8004c24:	42b8      	cmp	r0, r7
 8004c26:	d8ec      	bhi.n	8004c02 <FLASH_WaitForLastOperation.constprop.3+0x2a>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004c28:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8004c2c:	075a      	lsls	r2, r3, #29
 8004c2e:	d4f6      	bmi.n	8004c1e <FLASH_WaitForLastOperation.constprop.3+0x46>
  if (Bank == FLASH_BANK_1)
 8004c30:	2d01      	cmp	r5, #1
 8004c32:	d01c      	beq.n	8004c6e <FLASH_WaitForLastOperation.constprop.3+0x96>
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8004c34:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
  if((errorflag & 0x7DFFFFFFU) != 0U)
 8004c38:	481a      	ldr	r0, [pc, #104]	; (8004ca4 <FLASH_WaitForLastOperation.constprop.3+0xcc>)
 8004c3a:	4018      	ands	r0, r3
 8004c3c:	d00b      	beq.n	8004c56 <FLASH_WaitForLastOperation.constprop.3+0x7e>
    pFlash.ErrorCode |= errorflag;
 8004c3e:	491a      	ldr	r1, [pc, #104]	; (8004ca8 <FLASH_WaitForLastOperation.constprop.3+0xd0>)
    return HAL_ERROR;
 8004c40:	2001      	movs	r0, #1
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8004c42:	4d1a      	ldr	r5, [pc, #104]	; (8004cac <FLASH_WaitForLastOperation.constprop.3+0xd4>)
    pFlash.ErrorCode |= errorflag;
 8004c44:	698a      	ldr	r2, [r1, #24]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8004c46:	402b      	ands	r3, r5
    pFlash.ErrorCode |= errorflag;
 8004c48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	618a      	str	r2, [r1, #24]
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8004c50:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
}
 8004c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8004c56:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8004c5a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004c5e:	d004      	beq.n	8004c6a <FLASH_WaitForLastOperation.constprop.3+0x92>
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8004c60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c64:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
}
 8004c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8004c6a:	4618      	mov	r0, r3
}
 8004c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8004c6e:	4a0b      	ldr	r2, [pc, #44]	; (8004c9c <FLASH_WaitForLastOperation.constprop.3+0xc4>)
  if((errorflag & 0x7DFFFFFFU) != 0U)
 8004c70:	480c      	ldr	r0, [pc, #48]	; (8004ca4 <FLASH_WaitForLastOperation.constprop.3+0xcc>)
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8004c72:	6913      	ldr	r3, [r2, #16]
  if((errorflag & 0x7DFFFFFFU) != 0U)
 8004c74:	4018      	ands	r0, r3
 8004c76:	d107      	bne.n	8004c88 <FLASH_WaitForLastOperation.constprop.3+0xb0>
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8004c78:	6913      	ldr	r3, [r2, #16]
 8004c7a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8004c7e:	d0f4      	beq.n	8004c6a <FLASH_WaitForLastOperation.constprop.3+0x92>
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8004c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c84:	6153      	str	r3, [r2, #20]
}
 8004c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.ErrorCode |= errorflag;
 8004c88:	4c07      	ldr	r4, [pc, #28]	; (8004ca8 <FLASH_WaitForLastOperation.constprop.3+0xd0>)
    return HAL_ERROR;
 8004c8a:	2001      	movs	r0, #1
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8004c8c:	4907      	ldr	r1, [pc, #28]	; (8004cac <FLASH_WaitForLastOperation.constprop.3+0xd4>)
 8004c8e:	400b      	ands	r3, r1
    pFlash.ErrorCode |= errorflag;
 8004c90:	69a1      	ldr	r1, [r4, #24]
 8004c92:	4319      	orrs	r1, r3
 8004c94:	61a1      	str	r1, [r4, #24]
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8004c96:	6153      	str	r3, [r2, #20]
}
 8004c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	52002000 	.word	0x52002000
 8004ca0:	08144de0 	.word	0x08144de0
 8004ca4:	15ee0000 	.word	0x15ee0000
 8004ca8:	200006a4 	.word	0x200006a4
 8004cac:	17ee0000 	.word	0x17ee0000

08004cb0 <HAL_FLASH_Program>:
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8004cb0:	2801      	cmp	r0, #1
{
 8004cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	4616      	mov	r6, r2
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8004cba:	d003      	beq.n	8004cc4 <HAL_FLASH_Program+0x14>
 8004cbc:	219b      	movs	r1, #155	; 0x9b
 8004cbe:	4834      	ldr	r0, [pc, #208]	; (8004d90 <HAL_FLASH_Program+0xe0>)
 8004cc0:	f00e fe40 	bl	8013944 <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));
 8004cc4:	f104 4778 	add.w	r7, r4, #4160749568	; 0xf8000000
 8004cc8:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 8004ccc:	d24f      	bcs.n	8004d6e <HAL_FLASH_Program+0xbe>
  __HAL_LOCK(&pFlash);
 8004cce:	4d31      	ldr	r5, [pc, #196]	; (8004d94 <HAL_FLASH_Program+0xe4>)
 8004cd0:	7d2b      	ldrb	r3, [r5, #20]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d053      	beq.n	8004d7e <HAL_FLASH_Program+0xce>
 8004cd6:	f04f 0801 	mov.w	r8, #1
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8004cda:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004cde:	f04f 0300 	mov.w	r3, #0
  __HAL_LOCK(&pFlash);
 8004ce2:	f885 8014 	strb.w	r8, [r5, #20]
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8004ce6:	d336      	bcc.n	8004d56 <HAL_FLASH_Program+0xa6>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8004ce8:	2002      	movs	r0, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004cea:	61ab      	str	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8004cec:	f7ff ff74 	bl	8004bd8 <FLASH_WaitForLastOperation.constprop.3>
  if(status == HAL_OK)
 8004cf0:	bb68      	cbnz	r0, 8004d4e <HAL_FLASH_Program+0x9e>
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8004cf2:	4a29      	ldr	r2, [pc, #164]	; (8004d98 <HAL_FLASH_Program+0xe8>)
    bank = FLASH_BANK_2;
 8004cf4:	f04f 0802 	mov.w	r8, #2
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8004cf8:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8004cfc:	ea43 0308 	orr.w	r3, r3, r8
 8004d00:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8004d04:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8004d08:	f3bf 8f4f 	dsb	sy
        *dest_addr = *src_addr;
 8004d0c:	6833      	ldr	r3, [r6, #0]
 8004d0e:	6023      	str	r3, [r4, #0]
 8004d10:	6873      	ldr	r3, [r6, #4]
 8004d12:	6063      	str	r3, [r4, #4]
 8004d14:	68b3      	ldr	r3, [r6, #8]
 8004d16:	60a3      	str	r3, [r4, #8]
 8004d18:	68f3      	ldr	r3, [r6, #12]
 8004d1a:	60e3      	str	r3, [r4, #12]
 8004d1c:	6933      	ldr	r3, [r6, #16]
 8004d1e:	6123      	str	r3, [r4, #16]
 8004d20:	6973      	ldr	r3, [r6, #20]
 8004d22:	6163      	str	r3, [r4, #20]
 8004d24:	69b3      	ldr	r3, [r6, #24]
 8004d26:	61a3      	str	r3, [r4, #24]
 8004d28:	69f3      	ldr	r3, [r6, #28]
 8004d2a:	61e3      	str	r3, [r4, #28]
  __ASM volatile ("isb 0xF":::"memory");
 8004d2c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 8004d30:	f3bf 8f4f 	dsb	sy
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8004d34:	4640      	mov	r0, r8
 8004d36:	f7ff ff4f 	bl	8004bd8 <FLASH_WaitForLastOperation.constprop.3>
      if(bank == FLASH_BANK_1)
 8004d3a:	f1b8 0f01 	cmp.w	r8, #1
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8004d3e:	4a16      	ldr	r2, [pc, #88]	; (8004d98 <HAL_FLASH_Program+0xe8>)
      if(bank == FLASH_BANK_1)
 8004d40:	d020      	beq.n	8004d84 <HAL_FLASH_Program+0xd4>
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8004d42:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8004d46:	f023 0302 	bic.w	r3, r3, #2
 8004d4a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __HAL_UNLOCK(&pFlash);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	752b      	strb	r3, [r5, #20]
}
 8004d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8004d56:	4640      	mov	r0, r8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d58:	61ab      	str	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8004d5a:	f7ff ff3d 	bl	8004bd8 <FLASH_WaitForLastOperation.constprop.3>
  if(status == HAL_OK)
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d1f5      	bne.n	8004d4e <HAL_FLASH_Program+0x9e>
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8004d62:	4a0d      	ldr	r2, [pc, #52]	; (8004d98 <HAL_FLASH_Program+0xe8>)
 8004d64:	68d3      	ldr	r3, [r2, #12]
 8004d66:	f043 0302 	orr.w	r3, r3, #2
 8004d6a:	60d3      	str	r3, [r2, #12]
 8004d6c:	e7ca      	b.n	8004d04 <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 8004d6e:	4d09      	ldr	r5, [pc, #36]	; (8004d94 <HAL_FLASH_Program+0xe4>)
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));
 8004d70:	219c      	movs	r1, #156	; 0x9c
 8004d72:	4807      	ldr	r0, [pc, #28]	; (8004d90 <HAL_FLASH_Program+0xe0>)
 8004d74:	f00e fde6 	bl	8013944 <assert_failed>
  __HAL_LOCK(&pFlash);
 8004d78:	7d2b      	ldrb	r3, [r5, #20]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d1ab      	bne.n	8004cd6 <HAL_FLASH_Program+0x26>
 8004d7e:	2002      	movs	r0, #2
}
 8004d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8004d84:	68d3      	ldr	r3, [r2, #12]
 8004d86:	f023 0302 	bic.w	r3, r3, #2
 8004d8a:	60d3      	str	r3, [r2, #12]
 8004d8c:	e7df      	b.n	8004d4e <HAL_FLASH_Program+0x9e>
 8004d8e:	bf00      	nop
 8004d90:	08144de0 	.word	0x08144de0
 8004d94:	200006a4 	.word	0x200006a4
 8004d98:	52002000 	.word	0x52002000

08004d9c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <HAL_FLASH_Unlock+0x40>)
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	07d2      	lsls	r2, r2, #31
 8004da2:	d506      	bpl.n	8004db2 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8004da4:	490e      	ldr	r1, [pc, #56]	; (8004de0 <HAL_FLASH_Unlock+0x44>)
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8004da6:	4a0f      	ldr	r2, [pc, #60]	; (8004de4 <HAL_FLASH_Unlock+0x48>)
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8004da8:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8004daa:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	07db      	lsls	r3, r3, #31
 8004db0:	d411      	bmi.n	8004dd6 <HAL_FLASH_Unlock+0x3a>
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <HAL_FLASH_Unlock+0x40>)
 8004db4:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8004db8:	f010 0001 	ands.w	r0, r0, #1
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_FLASH_Unlock+0x38>
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8004dbe:	4908      	ldr	r1, [pc, #32]	; (8004de0 <HAL_FLASH_Unlock+0x44>)
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8004dc0:	4a08      	ldr	r2, [pc, #32]	; (8004de4 <HAL_FLASH_Unlock+0x48>)
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8004dc2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8004dc6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8004dca:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
      return HAL_ERROR;
 8004dce:	f000 0001 	and.w	r0, r0, #1
 8004dd2:	4770      	bx	lr
 8004dd4:	4770      	bx	lr
 8004dd6:	2001      	movs	r0, #1
}
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	52002000 	.word	0x52002000
 8004de0:	45670123 	.word	0x45670123
 8004de4:	cdef89ab 	.word	0xcdef89ab

08004de8 <FLASH_WaitForLastOperation>:
{
 8004de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dec:	460d      	mov	r5, r1
 8004dee:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8004df0:	f7fb fe16 	bl	8000a20 <HAL_GetTick>
 8004df4:	4680      	mov	r8, r0
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));
 8004df6:	1e6b      	subs	r3, r5, #1
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d857      	bhi.n	8004eac <FLASH_WaitForLastOperation+0xc4>
    bsyflag = FLASH_FLAG_QW_BANK2;
 8004dfc:	2d01      	cmp	r5, #1
 8004dfe:	4c36      	ldr	r4, [pc, #216]	; (8004ed8 <FLASH_WaitForLastOperation+0xf0>)
 8004e00:	bf08      	it	eq
 8004e02:	2404      	moveq	r4, #4
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004e04:	4f35      	ldr	r7, [pc, #212]	; (8004edc <FLASH_WaitForLastOperation+0xf4>)
 8004e06:	2c04      	cmp	r4, #4
 8004e08:	d02d      	beq.n	8004e66 <FLASH_WaitForLastOperation+0x7e>
 8004e0a:	1c70      	adds	r0, r6, #1
 8004e0c:	d11b      	bne.n	8004e46 <FLASH_WaitForLastOperation+0x5e>
 8004e0e:	4a33      	ldr	r2, [pc, #204]	; (8004edc <FLASH_WaitForLastOperation+0xf4>)
 8004e10:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
 8004e14:	ea24 0303 	bic.w	r3, r4, r3
 8004e18:	0759      	lsls	r1, r3, #29
 8004e1a:	d5f9      	bpl.n	8004e10 <FLASH_WaitForLastOperation+0x28>
  if (Bank == FLASH_BANK_1)
 8004e1c:	2d01      	cmp	r5, #1
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8004e1e:	4a2f      	ldr	r2, [pc, #188]	; (8004edc <FLASH_WaitForLastOperation+0xf4>)
  if((errorflag & 0x7DFFFFFFU) != 0U)
 8004e20:	482f      	ldr	r0, [pc, #188]	; (8004ee0 <FLASH_WaitForLastOperation+0xf8>)
  if (Bank == FLASH_BANK_1)
 8004e22:	d02a      	beq.n	8004e7a <FLASH_WaitForLastOperation+0x92>
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8004e24:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  if((errorflag & 0x7DFFFFFFU) != 0U)
 8004e28:	4018      	ands	r0, r3
 8004e2a:	d031      	beq.n	8004e90 <FLASH_WaitForLastOperation+0xa8>
    pFlash.ErrorCode |= errorflag;
 8004e2c:	4c2d      	ldr	r4, [pc, #180]	; (8004ee4 <FLASH_WaitForLastOperation+0xfc>)
    return HAL_ERROR;
 8004e2e:	2001      	movs	r0, #1
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8004e30:	4d2d      	ldr	r5, [pc, #180]	; (8004ee8 <FLASH_WaitForLastOperation+0x100>)
    pFlash.ErrorCode |= errorflag;
 8004e32:	69a1      	ldr	r1, [r4, #24]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8004e34:	402b      	ands	r3, r5
    pFlash.ErrorCode |= errorflag;
 8004e36:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004e3a:	4319      	orrs	r1, r3
 8004e3c:	61a1      	str	r1, [r4, #24]
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8004e3e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
}
 8004e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004e46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e4a:	ea24 0303 	bic.w	r3, r4, r3
 8004e4e:	075b      	lsls	r3, r3, #29
 8004e50:	d4e4      	bmi.n	8004e1c <FLASH_WaitForLastOperation+0x34>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	f7fb fde5 	bl	8000a20 <HAL_GetTick>
 8004e56:	eba0 0008 	sub.w	r0, r0, r8
 8004e5a:	42b0      	cmp	r0, r6
 8004e5c:	d801      	bhi.n	8004e62 <FLASH_WaitForLastOperation+0x7a>
 8004e5e:	2e00      	cmp	r6, #0
 8004e60:	d1d1      	bne.n	8004e06 <FLASH_WaitForLastOperation+0x1e>
        return HAL_TIMEOUT;
 8004e62:	2003      	movs	r0, #3
 8004e64:	e7ed      	b.n	8004e42 <FLASH_WaitForLastOperation+0x5a>
 8004e66:	1c70      	adds	r0, r6, #1
 8004e68:	d127      	bne.n	8004eba <FLASH_WaitForLastOperation+0xd2>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004e6a:	4a1c      	ldr	r2, [pc, #112]	; (8004edc <FLASH_WaitForLastOperation+0xf4>)
 8004e6c:	6913      	ldr	r3, [r2, #16]
 8004e6e:	0759      	lsls	r1, r3, #29
 8004e70:	d4fc      	bmi.n	8004e6c <FLASH_WaitForLastOperation+0x84>
  if (Bank == FLASH_BANK_1)
 8004e72:	2d01      	cmp	r5, #1
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8004e74:	4a19      	ldr	r2, [pc, #100]	; (8004edc <FLASH_WaitForLastOperation+0xf4>)
  if((errorflag & 0x7DFFFFFFU) != 0U)
 8004e76:	481a      	ldr	r0, [pc, #104]	; (8004ee0 <FLASH_WaitForLastOperation+0xf8>)
  if (Bank == FLASH_BANK_1)
 8004e78:	d1d4      	bne.n	8004e24 <FLASH_WaitForLastOperation+0x3c>
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8004e7a:	6913      	ldr	r3, [r2, #16]
  if((errorflag & 0x7DFFFFFFU) != 0U)
 8004e7c:	4018      	ands	r0, r3
 8004e7e:	d120      	bne.n	8004ec2 <FLASH_WaitForLastOperation+0xda>
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8004e80:	6915      	ldr	r5, [r2, #16]
 8004e82:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
 8004e86:	d00e      	beq.n	8004ea6 <FLASH_WaitForLastOperation+0xbe>
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8004e88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e8c:	6153      	str	r3, [r2, #20]
 8004e8e:	e7d8      	b.n	8004e42 <FLASH_WaitForLastOperation+0x5a>
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8004e90:	f8d2 5110 	ldr.w	r5, [r2, #272]	; 0x110
 8004e94:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
 8004e98:	d005      	beq.n	8004ea6 <FLASH_WaitForLastOperation+0xbe>
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8004e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e9e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
}
 8004ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8004ea6:	4628      	mov	r0, r5
}
 8004ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));
 8004eac:	f240 3192 	movw	r1, #914	; 0x392
 8004eb0:	480e      	ldr	r0, [pc, #56]	; (8004eec <FLASH_WaitForLastOperation+0x104>)
 8004eb2:	f00e fd47 	bl	8013944 <assert_failed>
    bsyflag = FLASH_FLAG_QW_BANK2;
 8004eb6:	4c08      	ldr	r4, [pc, #32]	; (8004ed8 <FLASH_WaitForLastOperation+0xf0>)
 8004eb8:	e7a4      	b.n	8004e04 <FLASH_WaitForLastOperation+0x1c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	075b      	lsls	r3, r3, #29
 8004ebe:	d4c8      	bmi.n	8004e52 <FLASH_WaitForLastOperation+0x6a>
 8004ec0:	e7ac      	b.n	8004e1c <FLASH_WaitForLastOperation+0x34>
    pFlash.ErrorCode |= errorflag;
 8004ec2:	4c08      	ldr	r4, [pc, #32]	; (8004ee4 <FLASH_WaitForLastOperation+0xfc>)
    return HAL_ERROR;
 8004ec4:	4628      	mov	r0, r5
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8004ec6:	4908      	ldr	r1, [pc, #32]	; (8004ee8 <FLASH_WaitForLastOperation+0x100>)
 8004ec8:	400b      	ands	r3, r1
    pFlash.ErrorCode |= errorflag;
 8004eca:	69a1      	ldr	r1, [r4, #24]
 8004ecc:	4319      	orrs	r1, r3
 8004ece:	61a1      	str	r1, [r4, #24]
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8004ed0:	6153      	str	r3, [r2, #20]
}
 8004ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed6:	bf00      	nop
 8004ed8:	80000004 	.word	0x80000004
 8004edc:	52002000 	.word	0x52002000
 8004ee0:	15ee0000 	.word	0x15ee0000
 8004ee4:	200006a4 	.word	0x200006a4
 8004ee8:	17ee0000 	.word	0x17ee0000
 8004eec:	08144de0 	.word	0x08144de0

08004ef0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8004ef0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
#if defined (FLASH_CR_PSIZE)
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8004ef2:	f030 0330 	bics.w	r3, r0, #48	; 0x30
{
 8004ef6:	4605      	mov	r5, r0
 8004ef8:	460c      	mov	r4, r1
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8004efa:	d004      	beq.n	8004f06 <FLASH_MassErase+0x16>
 8004efc:	f44f 7144 	mov.w	r1, #784	; 0x310
 8004f00:	4826      	ldr	r0, [pc, #152]	; (8004f9c <FLASH_MassErase+0xac>)
 8004f02:	f00e fd1f 	bl	8013944 <assert_failed>
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));
 8004f06:	1e63      	subs	r3, r4, #1
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d826      	bhi.n	8004f5a <FLASH_MassErase+0x6a>

  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8004f0c:	f004 0303 	and.w	r3, r4, #3
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d02b      	beq.n	8004f6c <FLASH_MassErase+0x7c>
    FLASH->OPTCR |= FLASH_OPTCR_MER;
  }
  else
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8004f14:	07e2      	lsls	r2, r4, #31
 8004f16:	d50b      	bpl.n	8004f30 <FLASH_MassErase+0x40>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8004f18:	4b21      	ldr	r3, [pc, #132]	; (8004fa0 <FLASH_MassErase+0xb0>)
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004f20:	60da      	str	r2, [r3, #12]
      FLASH->CR1 |=  VoltageRange;
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	432a      	orrs	r2, r5
 8004f26:	60da      	str	r2, [r3, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	f042 0288 	orr.w	r2, r2, #136	; 0x88
 8004f2e:	60da      	str	r2, [r3, #12]
    }
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8004f30:	07a3      	lsls	r3, r4, #30
 8004f32:	d511      	bpl.n	8004f58 <FLASH_MassErase+0x68>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank2 */
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8004f34:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <FLASH_MassErase+0xb0>)
 8004f36:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8004f3a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004f3e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 8004f42:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8004f46:	4315      	orrs	r5, r2
 8004f48:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8004f4c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8004f50:	f042 0288 	orr.w	r2, r2, #136	; 0x88
 8004f54:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    }
  }
}
 8004f58:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_BANK(Banks));
 8004f5a:	f44f 7145 	mov.w	r1, #788	; 0x314
 8004f5e:	480f      	ldr	r0, [pc, #60]	; (8004f9c <FLASH_MassErase+0xac>)
 8004f60:	f00e fcf0 	bl	8013944 <assert_failed>
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8004f64:	f004 0303 	and.w	r3, r4, #3
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d1d3      	bne.n	8004f14 <FLASH_MassErase+0x24>
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <FLASH_MassErase+0xb0>)
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004f74:	60da      	str	r2, [r3, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8004f76:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8004f7a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004f7e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    FLASH->CR1 |= VoltageRange;
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	432a      	orrs	r2, r5
 8004f86:	60da      	str	r2, [r3, #12]
    FLASH->CR2 |= VoltageRange;
 8004f88:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8004f8c:	4315      	orrs	r5, r2
 8004f8e:	f8c3 510c 	str.w	r5, [r3, #268]	; 0x10c
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8004f92:	699a      	ldr	r2, [r3, #24]
 8004f94:	f042 0210 	orr.w	r2, r2, #16
 8004f98:	619a      	str	r2, [r3, #24]
}
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	08144e1c 	.word	0x08144e1c
 8004fa0:	52002000 	.word	0x52002000

08004fa4 <HAL_FLASHEx_Erase>:
{
 8004fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8004fa8:	6803      	ldr	r3, [r0, #0]
{
 8004faa:	b083      	sub	sp, #12
 8004fac:	4604      	mov	r4, r0
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8004fae:	2b01      	cmp	r3, #1
{
 8004fb0:	9101      	str	r1, [sp, #4]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8004fb2:	d903      	bls.n	8004fbc <HAL_FLASHEx_Erase+0x18>
 8004fb4:	21ac      	movs	r1, #172	; 0xac
 8004fb6:	487d      	ldr	r0, [pc, #500]	; (80051ac <HAL_FLASHEx_Erase+0x208>)
 8004fb8:	f00e fcc4 	bl	8013944 <assert_failed>
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));
 8004fbc:	6863      	ldr	r3, [r4, #4]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	f200 80a1 	bhi.w	8005108 <HAL_FLASHEx_Erase+0x164>
  __HAL_LOCK(&pFlash);
 8004fc6:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80051b4 <HAL_FLASHEx_Erase+0x210>
 8004fca:	f898 3014 	ldrb.w	r3, [r8, #20]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	f000 80a5 	beq.w	800511e <HAL_FLASHEx_Erase+0x17a>
 8004fd4:	2501      	movs	r5, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fd6:	2300      	movs	r3, #0
  __HAL_LOCK(&pFlash);
 8004fd8:	f888 5014 	strb.w	r5, [r8, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fdc:	f8c8 3018 	str.w	r3, [r8, #24]
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8004fe0:	6862      	ldr	r2, [r4, #4]
 8004fe2:	07d0      	lsls	r0, r2, #31
 8004fe4:	f100 80a0 	bmi.w	8005128 <HAL_FLASHEx_Erase+0x184>
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8004fe8:	0793      	lsls	r3, r2, #30
 8004fea:	d50d      	bpl.n	8005008 <HAL_FLASHEx_Erase+0x64>
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8004fec:	2102      	movs	r1, #2
 8004fee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ff2:	f7ff fef9 	bl	8004de8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004ff6:	b138      	cbz	r0, 8005008 <HAL_FLASHEx_Erase+0x64>
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8004ff8:	2301      	movs	r3, #1
  __HAL_UNLOCK(&pFlash);
 8004ffa:	2200      	movs	r2, #0
}
 8004ffc:	4618      	mov	r0, r3
  __HAL_UNLOCK(&pFlash);
 8004ffe:	f888 2014 	strb.w	r2, [r8, #20]
}
 8005002:	b003      	add	sp, #12
 8005004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005008:	6825      	ldr	r5, [r4, #0]
 800500a:	2d01      	cmp	r5, #1
 800500c:	f000 80a2 	beq.w	8005154 <HAL_FLASHEx_Erase+0x1b0>
      *SectorError = 0xFFFFFFFFU;
 8005010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005014:	9a01      	ldr	r2, [sp, #4]
 8005016:	6013      	str	r3, [r2, #0]
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8005018:	e9d4 6302 	ldrd	r6, r3, [r4, #8]
 800501c:	4433      	add	r3, r6
 800501e:	42b3      	cmp	r3, r6
 8005020:	f240 8096 	bls.w	8005150 <HAL_FLASHEx_Erase+0x1ac>
 8005024:	0237      	lsls	r7, r6, #8
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
  assert_param(IS_FLASH_SECTOR(Sector));
 8005026:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80051ac <HAL_FLASHEx_Erase+0x208>

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800502a:	4d61      	ldr	r5, [pc, #388]	; (80051b0 <HAL_FLASHEx_Erase+0x20c>)
 800502c:	e03d      	b.n	80050aa <HAL_FLASHEx_Erase+0x106>
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));
 800502e:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 8005032:	2901      	cmp	r1, #1
 8005034:	d904      	bls.n	8005040 <HAL_FLASHEx_Erase+0x9c>
 8005036:	f240 3157 	movw	r1, #855	; 0x357
 800503a:	4648      	mov	r0, r9
 800503c:	f00e fc82 	bl	8013944 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8005040:	f03b 0330 	bics.w	r3, fp, #48	; 0x30
 8005044:	d004      	beq.n	8005050 <HAL_FLASHEx_Erase+0xac>
 8005046:	f240 3159 	movw	r1, #857	; 0x359
 800504a:	4648      	mov	r0, r9
 800504c:	f00e fc7a 	bl	8013944 <assert_failed>
  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8005050:	f01a 0f01 	tst.w	sl, #1
 8005054:	d00a      	beq.n	800506c <HAL_FLASHEx_Erase+0xc8>
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8005056:	68e9      	ldr	r1, [r5, #12]
 8005058:	f421 61e6 	bic.w	r1, r1, #1840	; 0x730
 800505c:	60e9      	str	r1, [r5, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800505e:	68e9      	ldr	r1, [r5, #12]
 8005060:	f041 0184 	orr.w	r1, r1, #132	; 0x84
 8005064:	ea41 010b 	orr.w	r1, r1, fp
 8005068:	4339      	orrs	r1, r7
 800506a:	60e9      	str	r1, [r5, #12]

    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800506c:	f01a 0f02 	tst.w	sl, #2
 8005070:	d00e      	beq.n	8005090 <HAL_FLASHEx_Erase+0xec>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8005072:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 8005076:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800507a:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800507e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 8005082:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 8005086:	ea43 030b 	orr.w	r3, r3, fp
 800508a:	433b      	orrs	r3, r7
 800508c:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8005090:	6863      	ldr	r3, [r4, #4]
 8005092:	07da      	lsls	r2, r3, #31
 8005094:	d415      	bmi.n	80050c2 <HAL_FLASHEx_Erase+0x11e>
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8005096:	0798      	lsls	r0, r3, #30
 8005098:	d427      	bmi.n	80050ea <HAL_FLASHEx_Erase+0x146>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800509a:	68e3      	ldr	r3, [r4, #12]
 800509c:	3601      	adds	r6, #1
 800509e:	68a2      	ldr	r2, [r4, #8]
 80050a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050a4:	4413      	add	r3, r2
 80050a6:	42b3      	cmp	r3, r6
 80050a8:	d952      	bls.n	8005150 <HAL_FLASHEx_Erase+0x1ac>
  assert_param(IS_FLASH_SECTOR(Sector));
 80050aa:	2e07      	cmp	r6, #7
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 80050ac:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80050b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
  assert_param(IS_FLASH_SECTOR(Sector));
 80050b4:	d9bb      	bls.n	800502e <HAL_FLASHEx_Erase+0x8a>
 80050b6:	f240 3156 	movw	r1, #854	; 0x356
 80050ba:	4648      	mov	r0, r9
 80050bc:	f00e fc42 	bl	8013944 <assert_failed>
 80050c0:	e7b5      	b.n	800502e <HAL_FLASHEx_Erase+0x8a>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80050c2:	2101      	movs	r1, #1
 80050c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80050c8:	f7ff fe8e 	bl	8004de8 <FLASH_WaitForLastOperation>
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80050cc:	68ea      	ldr	r2, [r5, #12]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80050ce:	4603      	mov	r3, r0
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80050d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050d4:	f022 0204 	bic.w	r2, r2, #4
 80050d8:	60ea      	str	r2, [r5, #12]
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80050da:	6862      	ldr	r2, [r4, #4]
 80050dc:	0791      	lsls	r1, r2, #30
 80050de:	d404      	bmi.n	80050ea <HAL_FLASHEx_Erase+0x146>
        if(status != HAL_OK)
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0da      	beq.n	800509a <HAL_FLASHEx_Erase+0xf6>
          *SectorError = sector_index;
 80050e4:	9a01      	ldr	r2, [sp, #4]
 80050e6:	6016      	str	r6, [r2, #0]
          break;
 80050e8:	e787      	b.n	8004ffa <HAL_FLASHEx_Erase+0x56>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 80050ea:	2102      	movs	r1, #2
 80050ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80050f0:	f7ff fe7a 	bl	8004de8 <FLASH_WaitForLastOperation>
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80050f4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 80050f8:	4603      	mov	r3, r0
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80050fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050fe:	f022 0204 	bic.w	r2, r2, #4
 8005102:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
 8005106:	e7eb      	b.n	80050e0 <HAL_FLASHEx_Erase+0x13c>
  __HAL_LOCK(&pFlash);
 8005108:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80051b4 <HAL_FLASHEx_Erase+0x210>
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));
 800510c:	21ad      	movs	r1, #173	; 0xad
 800510e:	4827      	ldr	r0, [pc, #156]	; (80051ac <HAL_FLASHEx_Erase+0x208>)
 8005110:	f00e fc18 	bl	8013944 <assert_failed>
  __HAL_LOCK(&pFlash);
 8005114:	f898 3014 	ldrb.w	r3, [r8, #20]
 8005118:	2b01      	cmp	r3, #1
 800511a:	f47f af5b 	bne.w	8004fd4 <HAL_FLASHEx_Erase+0x30>
 800511e:	2302      	movs	r3, #2
}
 8005120:	4618      	mov	r0, r3
 8005122:	b003      	add	sp, #12
 8005124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8005128:	4629      	mov	r1, r5
 800512a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800512e:	f7ff fe5b 	bl	8004de8 <FLASH_WaitForLastOperation>
 8005132:	b158      	cbz	r0, 800514c <HAL_FLASHEx_Erase+0x1a8>
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8005134:	6863      	ldr	r3, [r4, #4]
 8005136:	079a      	lsls	r2, r3, #30
 8005138:	f57f af5e 	bpl.w	8004ff8 <HAL_FLASHEx_Erase+0x54>
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800513c:	2102      	movs	r1, #2
 800513e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005142:	9501      	str	r5, [sp, #4]
 8005144:	f7ff fe50 	bl	8004de8 <FLASH_WaitForLastOperation>
 8005148:	9b01      	ldr	r3, [sp, #4]
 800514a:	e756      	b.n	8004ffa <HAL_FLASHEx_Erase+0x56>
 800514c:	6862      	ldr	r2, [r4, #4]
 800514e:	e74b      	b.n	8004fe8 <HAL_FLASHEx_Erase+0x44>
 8005150:	2300      	movs	r3, #0
 8005152:	e752      	b.n	8004ffa <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8005154:	6861      	ldr	r1, [r4, #4]
 8005156:	6920      	ldr	r0, [r4, #16]
 8005158:	f7ff feca 	bl	8004ef0 <FLASH_MassErase>
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800515c:	6862      	ldr	r2, [r4, #4]
 800515e:	f012 0301 	ands.w	r3, r2, #1
 8005162:	d114      	bne.n	800518e <HAL_FLASHEx_Erase+0x1ea>
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8005164:	0791      	lsls	r1, r2, #30
 8005166:	f57f af48 	bpl.w	8004ffa <HAL_FLASHEx_Erase+0x56>
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800516a:	2102      	movs	r1, #2
 800516c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	f7ff fe39 	bl	8004de8 <FLASH_WaitForLastOperation>
        FLASH->CR2 &= (~FLASH_CR_BER);
 8005176:	490e      	ldr	r1, [pc, #56]	; (80051b0 <HAL_FLASHEx_Erase+0x20c>)
          status = HAL_ERROR;
 8005178:	2800      	cmp	r0, #0
 800517a:	9b01      	ldr	r3, [sp, #4]
        FLASH->CR2 &= (~FLASH_CR_BER);
 800517c:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
          status = HAL_ERROR;
 8005180:	bf18      	it	ne
 8005182:	2301      	movne	r3, #1
        FLASH->CR2 &= (~FLASH_CR_BER);
 8005184:	f022 0208 	bic.w	r2, r2, #8
 8005188:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
 800518c:	e735      	b.n	8004ffa <HAL_FLASHEx_Erase+0x56>
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800518e:	4629      	mov	r1, r5
 8005190:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005194:	f7ff fe28 	bl	8004de8 <FLASH_WaitForLastOperation>
        FLASH->CR1 &= (~FLASH_CR_BER);
 8005198:	4905      	ldr	r1, [pc, #20]	; (80051b0 <HAL_FLASHEx_Erase+0x20c>)
          status = HAL_ERROR;
 800519a:	1c03      	adds	r3, r0, #0
        FLASH->CR1 &= (~FLASH_CR_BER);
 800519c:	68ca      	ldr	r2, [r1, #12]
          status = HAL_ERROR;
 800519e:	bf18      	it	ne
 80051a0:	2301      	movne	r3, #1
        FLASH->CR1 &= (~FLASH_CR_BER);
 80051a2:	f022 0208 	bic.w	r2, r2, #8
 80051a6:	60ca      	str	r2, [r1, #12]
 80051a8:	6862      	ldr	r2, [r4, #4]
 80051aa:	e7db      	b.n	8005164 <HAL_FLASHEx_Erase+0x1c0>
 80051ac:	08144e1c 	.word	0x08144e1c
 80051b0:	52002000 	.word	0x52002000
 80051b4:	200006a4 	.word	0x200006a4

080051b8 <HAL_GPIO_Init>:
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80051b8:	4abf      	ldr	r2, [pc, #764]	; (80054b8 <HAL_GPIO_Init+0x300>)
 80051ba:	4bc0      	ldr	r3, [pc, #768]	; (80054bc <HAL_GPIO_Init+0x304>)
 80051bc:	4290      	cmp	r0, r2
 80051be:	bf18      	it	ne
 80051c0:	4298      	cmpne	r0, r3
{
 80051c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c6:	4607      	mov	r7, r0
 80051c8:	b089      	sub	sp, #36	; 0x24
 80051ca:	4689      	mov	r9, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80051cc:	bf14      	ite	ne
 80051ce:	f04f 0b01 	movne.w	fp, #1
 80051d2:	f04f 0b00 	moveq.w	fp, #0
 80051d6:	d027      	beq.n	8005228 <HAL_GPIO_Init+0x70>
 80051d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051dc:	4298      	cmp	r0, r3
 80051de:	d023      	beq.n	8005228 <HAL_GPIO_Init+0x70>
 80051e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e4:	4298      	cmp	r0, r3
 80051e6:	d01f      	beq.n	8005228 <HAL_GPIO_Init+0x70>
 80051e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ec:	4298      	cmp	r0, r3
 80051ee:	d01b      	beq.n	8005228 <HAL_GPIO_Init+0x70>
 80051f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f4:	4298      	cmp	r0, r3
 80051f6:	d017      	beq.n	8005228 <HAL_GPIO_Init+0x70>
 80051f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051fc:	4298      	cmp	r0, r3
 80051fe:	d013      	beq.n	8005228 <HAL_GPIO_Init+0x70>
 8005200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005204:	4298      	cmp	r0, r3
 8005206:	d00f      	beq.n	8005228 <HAL_GPIO_Init+0x70>
 8005208:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800520c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005210:	4290      	cmp	r0, r2
 8005212:	bf18      	it	ne
 8005214:	4298      	cmpne	r0, r3
 8005216:	d007      	beq.n	8005228 <HAL_GPIO_Init+0x70>
 8005218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521c:	4298      	cmp	r0, r3
 800521e:	d003      	beq.n	8005228 <HAL_GPIO_Init+0x70>
 8005220:	21bb      	movs	r1, #187	; 0xbb
 8005222:	48a7      	ldr	r0, [pc, #668]	; (80054c0 <HAL_GPIO_Init+0x308>)
 8005224:	f00e fb8e 	bl	8013944 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005228:	f8d9 2000 	ldr.w	r2, [r9]
 800522c:	b293      	uxth	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 8168 	beq.w	8005504 <HAL_GPIO_Init+0x34c>
 8005234:	4ba3      	ldr	r3, [pc, #652]	; (80054c4 <HAL_GPIO_Init+0x30c>)
 8005236:	4013      	ands	r3, r2
 8005238:	2b00      	cmp	r3, #0
 800523a:	f040 8163 	bne.w	8005504 <HAL_GPIO_Init+0x34c>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800523e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8005242:	4ba1      	ldr	r3, [pc, #644]	; (80054c8 <HAL_GPIO_Init+0x310>)
 8005244:	4ca1      	ldr	r4, [pc, #644]	; (80054cc <HAL_GPIO_Init+0x314>)
 8005246:	f1a2 0011 	sub.w	r0, r2, #17
 800524a:	429a      	cmp	r2, r3
 800524c:	bf18      	it	ne
 800524e:	2a03      	cmpne	r2, #3
 8005250:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 8005254:	bf8c      	ite	hi
 8005256:	2301      	movhi	r3, #1
 8005258:	2300      	movls	r3, #0
 800525a:	42a2      	cmp	r2, r4
 800525c:	bf0c      	ite	eq
 800525e:	2300      	moveq	r3, #0
 8005260:	f003 0301 	andne.w	r3, r3, #1
 8005264:	4a9a      	ldr	r2, [pc, #616]	; (80054d0 <HAL_GPIO_Init+0x318>)
 8005266:	2801      	cmp	r0, #1
 8005268:	bf94      	ite	ls
 800526a:	2300      	movls	r3, #0
 800526c:	f003 0301 	andhi.w	r3, r3, #1
 8005270:	4291      	cmp	r1, r2
 8005272:	bf0c      	ite	eq
 8005274:	2300      	moveq	r3, #0
 8005276:	f003 0301 	andne.w	r3, r3, #1
 800527a:	b11b      	cbz	r3, 8005284 <HAL_GPIO_Init+0xcc>
 800527c:	4b95      	ldr	r3, [pc, #596]	; (80054d4 <HAL_GPIO_Init+0x31c>)
 800527e:	4299      	cmp	r1, r3
 8005280:	f040 8193 	bne.w	80055aa <HAL_GPIO_Init+0x3f2>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005284:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005288:	2b02      	cmp	r3, #2
 800528a:	f200 8170 	bhi.w	800556e <HAL_GPIO_Init+0x3b6>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800528e:	f8d9 1000 	ldr.w	r1, [r9]
 8005292:	2900      	cmp	r1, #0
 8005294:	f000 810d 	beq.w	80054b2 <HAL_GPIO_Init+0x2fa>

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8005298:	4b8f      	ldr	r3, [pc, #572]	; (80054d8 <HAL_GPIO_Init+0x320>)
 800529a:	f04f 0800 	mov.w	r8, #0
 800529e:	4a8f      	ldr	r2, [pc, #572]	; (80054dc <HAL_GPIO_Init+0x324>)
 80052a0:	488f      	ldr	r0, [pc, #572]	; (80054e0 <HAL_GPIO_Init+0x328>)
 80052a2:	429f      	cmp	r7, r3
 80052a4:	bf18      	it	ne
 80052a6:	4297      	cmpne	r7, r2
 80052a8:	4d8e      	ldr	r5, [pc, #568]	; (80054e4 <HAL_GPIO_Init+0x32c>)
 80052aa:	f5a2 52c0 	sub.w	r2, r2, #6144	; 0x1800
 80052ae:	4c8e      	ldr	r4, [pc, #568]	; (80054e8 <HAL_GPIO_Init+0x330>)
 80052b0:	bf14      	ite	ne
 80052b2:	2301      	movne	r3, #1
 80052b4:	2300      	moveq	r3, #0
 80052b6:	42af      	cmp	r7, r5
 80052b8:	bf0c      	ite	eq
 80052ba:	2300      	moveq	r3, #0
 80052bc:	f003 0301 	andne.w	r3, r3, #1
 80052c0:	4287      	cmp	r7, r0
 80052c2:	bf18      	it	ne
 80052c4:	4297      	cmpne	r7, r2
 80052c6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80052ca:	bf14      	ite	ne
 80052cc:	2201      	movne	r2, #1
 80052ce:	2200      	moveq	r2, #0
 80052d0:	9305      	str	r3, [sp, #20]
 80052d2:	4b86      	ldr	r3, [pc, #536]	; (80054ec <HAL_GPIO_Init+0x334>)
 80052d4:	9200      	str	r2, [sp, #0]
 80052d6:	42a7      	cmp	r7, r4
 80052d8:	bf18      	it	ne
 80052da:	429f      	cmpne	r7, r3
 80052dc:	4a84      	ldr	r2, [pc, #528]	; (80054f0 <HAL_GPIO_Init+0x338>)
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	4287      	cmp	r7, r0
 80052e6:	bf18      	it	ne
 80052e8:	4297      	cmpne	r7, r2
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	bf14      	ite	ne
 80052ee:	2201      	movne	r2, #1
 80052f0:	2200      	moveq	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052f2:	4b80      	ldr	r3, [pc, #512]	; (80054f4 <HAL_GPIO_Init+0x33c>)
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80052f4:	9204      	str	r2, [sp, #16]
 80052f6:	4a80      	ldr	r2, [pc, #512]	; (80054f8 <HAL_GPIO_Init+0x340>)
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052f8:	2401      	movs	r4, #1
 80052fa:	fa04 f408 	lsl.w	r4, r4, r8
    if (iocurrent != 0x00U)
 80052fe:	ea14 0a01 	ands.w	sl, r4, r1
 8005302:	f000 80d0 	beq.w	80054a6 <HAL_GPIO_Init+0x2ee>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005306:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800530a:	ea4f 0648 	mov.w	r6, r8, lsl #1
 800530e:	2503      	movs	r5, #3
 8005310:	f021 0110 	bic.w	r1, r1, #16
 8005314:	40b5      	lsls	r5, r6
 8005316:	3901      	subs	r1, #1
 8005318:	43ed      	mvns	r5, r5
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800531a:	2901      	cmp	r1, #1
 800531c:	d814      	bhi.n	8005348 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800531e:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8005322:	2903      	cmp	r1, #3
 8005324:	f200 80f3 	bhi.w	800550e <HAL_GPIO_Init+0x356>
        temp = GPIOx->OSPEEDR;
 8005328:	68b8      	ldr	r0, [r7, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800532a:	40b1      	lsls	r1, r6
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800532c:	4028      	ands	r0, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800532e:	4301      	orrs	r1, r0
        GPIOx->OSPEEDR = temp;
 8005330:	60b9      	str	r1, [r7, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005332:	f8d9 1004 	ldr.w	r1, [r9, #4]
        temp = GPIOx->OTYPER;
 8005336:	6878      	ldr	r0, [r7, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005338:	f3c1 1100 	ubfx	r1, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800533c:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005340:	fa01 f408 	lsl.w	r4, r1, r8
 8005344:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 8005346:	607c      	str	r4, [r7, #4]
      temp = GPIOx->PUPDR;
 8005348:	68f8      	ldr	r0, [r7, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800534a:	f8d9 1008 	ldr.w	r1, [r9, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800534e:	4028      	ands	r0, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005350:	40b1      	lsls	r1, r6
 8005352:	4301      	orrs	r1, r0
      GPIOx->PUPDR = temp;
 8005354:	60f9      	str	r1, [r7, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005356:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800535a:	f021 0010 	bic.w	r0, r1, #16
 800535e:	2802      	cmp	r0, #2
 8005360:	d120      	bne.n	80053a4 <HAL_GPIO_Init+0x1ec>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8005362:	f1bb 0f00 	cmp.w	fp, #0
 8005366:	d003      	beq.n	8005370 <HAL_GPIO_Init+0x1b8>
 8005368:	9900      	ldr	r1, [sp, #0]
 800536a:	2900      	cmp	r1, #0
 800536c:	f040 80da 	bne.w	8005524 <HAL_GPIO_Init+0x36c>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005370:	f8d9 e010 	ldr.w	lr, [r9, #16]
 8005374:	f1be 0f0f 	cmp.w	lr, #15
 8005378:	f200 80ee 	bhi.w	8005558 <HAL_GPIO_Init+0x3a0>
        temp = GPIOx->AFR[position >> 3U];
 800537c:	ea4f 00d8 	mov.w	r0, r8, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005380:	f008 0107 	and.w	r1, r8, #7
 8005384:	f04f 0c0f 	mov.w	ip, #15
 8005388:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800538c:	0089      	lsls	r1, r1, #2
        temp = GPIOx->AFR[position >> 3U];
 800538e:	6a04      	ldr	r4, [r0, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005390:	fa0c fc01 	lsl.w	ip, ip, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005394:	fa0e f101 	lsl.w	r1, lr, r1
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005398:	ea24 040c 	bic.w	r4, r4, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800539c:	4321      	orrs	r1, r4
        GPIOx->AFR[position >> 3U] = temp;
 800539e:	6201      	str	r1, [r0, #32]
 80053a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053a4:	f001 0103 	and.w	r1, r1, #3
      temp = GPIOx->MODER;
 80053a8:	6838      	ldr	r0, [r7, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053aa:	fa01 f606 	lsl.w	r6, r1, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053ae:	4005      	ands	r5, r0
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053b0:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 80053b2:	603d      	str	r5, [r7, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80053b8:	00cc      	lsls	r4, r1, #3
 80053ba:	d572      	bpl.n	80054a2 <HAL_GPIO_Init+0x2ea>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053bc:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
 80053c0:	f028 0503 	bic.w	r5, r8, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053c4:	f008 0103 	and.w	r1, r8, #3
 80053c8:	200f      	movs	r0, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053ca:	f044 0402 	orr.w	r4, r4, #2
 80053ce:	4415      	add	r5, r2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053d0:	0089      	lsls	r1, r1, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053d2:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 80053d6:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053da:	fa00 f601 	lsl.w	r6, r0, r1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053de:	f004 0402 	and.w	r4, r4, #2
 80053e2:	9407      	str	r4, [sp, #28]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80053e4:	4c34      	ldr	r4, [pc, #208]	; (80054b8 <HAL_GPIO_Init+0x300>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053e6:	9807      	ldr	r0, [sp, #28]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80053e8:	42a7      	cmp	r7, r4
        temp = SYSCFG->EXTICR[position >> 2U];
 80053ea:	68a8      	ldr	r0, [r5, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053ec:	ea20 0006 	bic.w	r0, r0, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80053f0:	d027      	beq.n	8005442 <HAL_GPIO_Init+0x28a>
 80053f2:	f1bb 0f00 	cmp.w	fp, #0
 80053f6:	f000 80bf 	beq.w	8005578 <HAL_GPIO_Init+0x3c0>
 80053fa:	4c39      	ldr	r4, [pc, #228]	; (80054e0 <HAL_GPIO_Init+0x328>)
 80053fc:	42a7      	cmp	r7, r4
 80053fe:	f000 80a6 	beq.w	800554e <HAL_GPIO_Init+0x396>
 8005402:	9c00      	ldr	r4, [sp, #0]
 8005404:	2c00      	cmp	r4, #0
 8005406:	f000 80c1 	beq.w	800558c <HAL_GPIO_Init+0x3d4>
 800540a:	4c37      	ldr	r4, [pc, #220]	; (80054e8 <HAL_GPIO_Init+0x330>)
 800540c:	42a7      	cmp	r7, r4
 800540e:	f000 80c2 	beq.w	8005596 <HAL_GPIO_Init+0x3de>
 8005412:	9c01      	ldr	r4, [sp, #4]
 8005414:	2c00      	cmp	r4, #0
 8005416:	f000 80b4 	beq.w	8005582 <HAL_GPIO_Init+0x3ca>
 800541a:	4c38      	ldr	r4, [pc, #224]	; (80054fc <HAL_GPIO_Init+0x344>)
 800541c:	42a7      	cmp	r7, r4
 800541e:	f000 80bf 	beq.w	80055a0 <HAL_GPIO_Init+0x3e8>
 8005422:	9c04      	ldr	r4, [sp, #16]
 8005424:	2c00      	cmp	r4, #0
 8005426:	f000 80c5 	beq.w	80055b4 <HAL_GPIO_Init+0x3fc>
 800542a:	4c2b      	ldr	r4, [pc, #172]	; (80054d8 <HAL_GPIO_Init+0x320>)
 800542c:	42a7      	cmp	r7, r4
 800542e:	f000 80c6 	beq.w	80055be <HAL_GPIO_Init+0x406>
 8005432:	4c2a      	ldr	r4, [pc, #168]	; (80054dc <HAL_GPIO_Init+0x324>)
 8005434:	42a7      	cmp	r7, r4
 8005436:	bf0c      	ite	eq
 8005438:	2409      	moveq	r4, #9
 800543a:	240a      	movne	r4, #10
 800543c:	fa04 f101 	lsl.w	r1, r4, r1
 8005440:	4308      	orrs	r0, r1
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005442:	60a8      	str	r0, [r5, #8]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
 8005444:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005448:	f8d9 0004 	ldr.w	r0, [r9, #4]
        temp = EXTI_CurrentCPU->IMR1;
 800544c:	492c      	ldr	r1, [pc, #176]	; (8005500 <HAL_GPIO_Init+0x348>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800544e:	03c0      	lsls	r0, r0, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005450:	4c2b      	ldr	r4, [pc, #172]	; (8005500 <HAL_GPIO_Init+0x348>)
        temp = EXTI_CurrentCPU->IMR1;
 8005452:	6809      	ldr	r1, [r1, #0]
        temp &= ~(iocurrent);
 8005454:	bf54      	ite	pl
 8005456:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8005458:	ea4a 0101 	orrmi.w	r1, sl, r1
        EXTI_CurrentCPU->IMR1 = temp;
 800545c:	6021      	str	r1, [r4, #0]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800545e:	f8d9 0004 	ldr.w	r0, [r9, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8005462:	6861      	ldr	r1, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005464:	0386      	lsls	r6, r0, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005466:	4c26      	ldr	r4, [pc, #152]	; (8005500 <HAL_GPIO_Init+0x348>)

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005468:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800546c:	bf54      	ite	pl
 800546e:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8005470:	ea4a 0101 	orrmi.w	r1, sl, r1
        EXTI_CurrentCPU->EMR1 = temp;
 8005474:	6061      	str	r1, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8005476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800547a:	f8d9 4004 	ldr.w	r4, [r9, #4]
        temp = EXTI->RTSR1;
 800547e:	6800      	ldr	r0, [r0, #0]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005480:	02e4      	lsls	r4, r4, #11
        temp &= ~(iocurrent);
 8005482:	bf54      	ite	pl
 8005484:	4028      	andpl	r0, r5
          temp |= iocurrent;
 8005486:	ea4a 0000 	orrmi.w	r0, sl, r0
        EXTI->RTSR1 = temp;
 800548a:	6008      	str	r0, [r1, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800548c:	f8d9 0004 	ldr.w	r0, [r9, #4]
        temp = EXTI->FTSR1;
 8005490:	6849      	ldr	r1, [r1, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005492:	0280      	lsls	r0, r0, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8005494:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8005498:	bf54      	ite	pl
 800549a:	4029      	andpl	r1, r5
          temp |= iocurrent;
 800549c:	ea4a 0101 	orrmi.w	r1, sl, r1
        EXTI->FTSR1 = temp;
 80054a0:	6041      	str	r1, [r0, #4]
 80054a2:	f8d9 1000 	ldr.w	r1, [r9]
      }
    }

    position++;
 80054a6:	f108 0801 	add.w	r8, r8, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054aa:	fa31 f008 	lsrs.w	r0, r1, r8
 80054ae:	f47f af23 	bne.w	80052f8 <HAL_GPIO_Init+0x140>
  }
}
 80054b2:	b009      	add	sp, #36	; 0x24
 80054b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b8:	58020000 	.word	0x58020000
 80054bc:	58020400 	.word	0x58020400
 80054c0:	08144e5c 	.word	0x08144e5c
 80054c4:	ffff0000 	.word	0xffff0000
 80054c8:	11210000 	.word	0x11210000
 80054cc:	11220000 	.word	0x11220000
 80054d0:	11110000 	.word	0x11110000
 80054d4:	11120000 	.word	0x11120000
 80054d8:	58022000 	.word	0x58022000
 80054dc:	58022400 	.word	0x58022400
 80054e0:	58020800 	.word	0x58020800
 80054e4:	58022800 	.word	0x58022800
 80054e8:	58021000 	.word	0x58021000
 80054ec:	58021400 	.word	0x58021400
 80054f0:	58021c00 	.word	0x58021c00
 80054f4:	58024400 	.word	0x58024400
 80054f8:	58000400 	.word	0x58000400
 80054fc:	58021800 	.word	0x58021800
 8005500:	58000080 	.word	0x58000080
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005504:	21bc      	movs	r1, #188	; 0xbc
 8005506:	4830      	ldr	r0, [pc, #192]	; (80055c8 <HAL_GPIO_Init+0x410>)
 8005508:	f00e fa1c 	bl	8013944 <assert_failed>
 800550c:	e697      	b.n	800523e <HAL_GPIO_Init+0x86>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800550e:	21ce      	movs	r1, #206	; 0xce
 8005510:	482d      	ldr	r0, [pc, #180]	; (80055c8 <HAL_GPIO_Init+0x410>)
 8005512:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8005516:	f00e fa15 	bl	8013944 <assert_failed>
 800551a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800551e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005522:	e701      	b.n	8005328 <HAL_GPIO_Init+0x170>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8005524:	9901      	ldr	r1, [sp, #4]
 8005526:	2900      	cmp	r1, #0
 8005528:	f43f af22 	beq.w	8005370 <HAL_GPIO_Init+0x1b8>
 800552c:	9904      	ldr	r1, [sp, #16]
 800552e:	2900      	cmp	r1, #0
 8005530:	f43f af1e 	beq.w	8005370 <HAL_GPIO_Init+0x1b8>
 8005534:	9905      	ldr	r1, [sp, #20]
 8005536:	2900      	cmp	r1, #0
 8005538:	f43f af1a 	beq.w	8005370 <HAL_GPIO_Init+0x1b8>
 800553c:	21e6      	movs	r1, #230	; 0xe6
 800553e:	4822      	ldr	r0, [pc, #136]	; (80055c8 <HAL_GPIO_Init+0x410>)
 8005540:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8005544:	f00e f9fe 	bl	8013944 <assert_failed>
 8005548:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800554c:	e710      	b.n	8005370 <HAL_GPIO_Init+0x1b8>
 800554e:	2402      	movs	r4, #2
 8005550:	fa04 f101 	lsl.w	r1, r4, r1
 8005554:	4308      	orrs	r0, r1
 8005556:	e774      	b.n	8005442 <HAL_GPIO_Init+0x28a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005558:	21e7      	movs	r1, #231	; 0xe7
 800555a:	481b      	ldr	r0, [pc, #108]	; (80055c8 <HAL_GPIO_Init+0x410>)
 800555c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8005560:	f00e f9f0 	bl	8013944 <assert_failed>
 8005564:	f8d9 e010 	ldr.w	lr, [r9, #16]
 8005568:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800556c:	e706      	b.n	800537c <HAL_GPIO_Init+0x1c4>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800556e:	21be      	movs	r1, #190	; 0xbe
 8005570:	4815      	ldr	r0, [pc, #84]	; (80055c8 <HAL_GPIO_Init+0x410>)
 8005572:	f00e f9e7 	bl	8013944 <assert_failed>
 8005576:	e68a      	b.n	800528e <HAL_GPIO_Init+0xd6>
 8005578:	2401      	movs	r4, #1
 800557a:	fa04 f101 	lsl.w	r1, r4, r1
 800557e:	4308      	orrs	r0, r1
 8005580:	e75f      	b.n	8005442 <HAL_GPIO_Init+0x28a>
 8005582:	2405      	movs	r4, #5
 8005584:	fa04 f101 	lsl.w	r1, r4, r1
 8005588:	4308      	orrs	r0, r1
 800558a:	e75a      	b.n	8005442 <HAL_GPIO_Init+0x28a>
 800558c:	2403      	movs	r4, #3
 800558e:	fa04 f101 	lsl.w	r1, r4, r1
 8005592:	4308      	orrs	r0, r1
 8005594:	e755      	b.n	8005442 <HAL_GPIO_Init+0x28a>
 8005596:	2404      	movs	r4, #4
 8005598:	fa04 f101 	lsl.w	r1, r4, r1
 800559c:	4308      	orrs	r0, r1
 800559e:	e750      	b.n	8005442 <HAL_GPIO_Init+0x28a>
 80055a0:	2406      	movs	r4, #6
 80055a2:	fa04 f101 	lsl.w	r1, r4, r1
 80055a6:	4308      	orrs	r0, r1
 80055a8:	e74b      	b.n	8005442 <HAL_GPIO_Init+0x28a>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80055aa:	21bd      	movs	r1, #189	; 0xbd
 80055ac:	4806      	ldr	r0, [pc, #24]	; (80055c8 <HAL_GPIO_Init+0x410>)
 80055ae:	f00e f9c9 	bl	8013944 <assert_failed>
 80055b2:	e667      	b.n	8005284 <HAL_GPIO_Init+0xcc>
 80055b4:	2407      	movs	r4, #7
 80055b6:	fa04 f101 	lsl.w	r1, r4, r1
 80055ba:	4308      	orrs	r0, r1
 80055bc:	e741      	b.n	8005442 <HAL_GPIO_Init+0x28a>
 80055be:	2408      	movs	r4, #8
 80055c0:	fa04 f101 	lsl.w	r1, r4, r1
 80055c4:	4308      	orrs	r0, r1
 80055c6:	e73c      	b.n	8005442 <HAL_GPIO_Init+0x28a>
 80055c8:	08144e5c 	.word	0x08144e5c

080055cc <HAL_GPIO_DeInit>:
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80055cc:	4a80      	ldr	r2, [pc, #512]	; (80057d0 <HAL_GPIO_DeInit+0x204>)
 80055ce:	4b81      	ldr	r3, [pc, #516]	; (80057d4 <HAL_GPIO_DeInit+0x208>)
 80055d0:	4290      	cmp	r0, r2
 80055d2:	bf18      	it	ne
 80055d4:	4298      	cmpne	r0, r3
{
 80055d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055da:	4604      	mov	r4, r0
 80055dc:	b083      	sub	sp, #12
 80055de:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80055e0:	bf14      	ite	ne
 80055e2:	f04f 0801 	movne.w	r8, #1
 80055e6:	f04f 0800 	moveq.w	r8, #0
 80055ea:	d028      	beq.n	800563e <HAL_GPIO_DeInit+0x72>
 80055ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055f0:	4298      	cmp	r0, r3
 80055f2:	d024      	beq.n	800563e <HAL_GPIO_DeInit+0x72>
 80055f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055f8:	4298      	cmp	r0, r3
 80055fa:	d020      	beq.n	800563e <HAL_GPIO_DeInit+0x72>
 80055fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005600:	4298      	cmp	r0, r3
 8005602:	d01c      	beq.n	800563e <HAL_GPIO_DeInit+0x72>
 8005604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005608:	4298      	cmp	r0, r3
 800560a:	d018      	beq.n	800563e <HAL_GPIO_DeInit+0x72>
 800560c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005610:	4298      	cmp	r0, r3
 8005612:	d014      	beq.n	800563e <HAL_GPIO_DeInit+0x72>
 8005614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005618:	4298      	cmp	r0, r3
 800561a:	d010      	beq.n	800563e <HAL_GPIO_DeInit+0x72>
 800561c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005624:	4290      	cmp	r0, r2
 8005626:	bf18      	it	ne
 8005628:	4298      	cmpne	r0, r3
 800562a:	d008      	beq.n	800563e <HAL_GPIO_DeInit+0x72>
 800562c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005630:	4298      	cmp	r0, r3
 8005632:	d004      	beq.n	800563e <HAL_GPIO_DeInit+0x72>
 8005634:	f240 113f 	movw	r1, #319	; 0x13f
 8005638:	4867      	ldr	r0, [pc, #412]	; (80057d8 <HAL_GPIO_DeInit+0x20c>)
 800563a:	f00e f983 	bl	8013944 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800563e:	b2ab      	uxth	r3, r5
 8005640:	2b00      	cmp	r3, #0
 8005642:	d046      	beq.n	80056d2 <HAL_GPIO_DeInit+0x106>
 8005644:	4b65      	ldr	r3, [pc, #404]	; (80057dc <HAL_GPIO_DeInit+0x210>)
 8005646:	402b      	ands	r3, r5
 8005648:	2b00      	cmp	r3, #0
 800564a:	d142      	bne.n	80056d2 <HAL_GPIO_DeInit+0x106>
{
 800564c:	2300      	movs	r3, #0
 800564e:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 80057f8 <HAL_GPIO_DeInit+0x22c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005652:	f8df a17c 	ldr.w	sl, [pc, #380]	; 80057d0 <HAL_GPIO_DeInit+0x204>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8005656:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80057fc <HAL_GPIO_DeInit+0x230>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800565a:	f8cd 8004 	str.w	r8, [sp, #4]
    iocurrent = GPIO_Pin & (1UL << position) ;
 800565e:	f04f 0801 	mov.w	r8, #1
 8005662:	fa08 f003 	lsl.w	r0, r8, r3
    if (iocurrent != 0x00U)
 8005666:	ea10 0105 	ands.w	r1, r0, r5
 800566a:	f000 8081 	beq.w	8005770 <HAL_GPIO_DeInit+0x1a4>
 800566e:	f023 0703 	bic.w	r7, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005672:	f003 0203 	and.w	r2, r3, #3
 8005676:	f04f 0c0f 	mov.w	ip, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800567a:	4554      	cmp	r4, sl
 800567c:	445f      	add	r7, fp
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800567e:	ea4f 0282 	mov.w	r2, r2, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005682:	f8d7 e008 	ldr.w	lr, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005686:	fa0c fc02 	lsl.w	ip, ip, r2
 800568a:	ea0c 0e0e 	and.w	lr, ip, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800568e:	d02a      	beq.n	80056e6 <HAL_GPIO_DeInit+0x11a>
 8005690:	9e01      	ldr	r6, [sp, #4]
 8005692:	b1de      	cbz	r6, 80056cc <HAL_GPIO_DeInit+0x100>
 8005694:	4e52      	ldr	r6, [pc, #328]	; (80057e0 <HAL_GPIO_DeInit+0x214>)
 8005696:	42b4      	cmp	r4, r6
 8005698:	d077      	beq.n	800578a <HAL_GPIO_DeInit+0x1be>
 800569a:	4e52      	ldr	r6, [pc, #328]	; (80057e4 <HAL_GPIO_DeInit+0x218>)
 800569c:	42b4      	cmp	r4, r6
 800569e:	d079      	beq.n	8005794 <HAL_GPIO_DeInit+0x1c8>
 80056a0:	4e51      	ldr	r6, [pc, #324]	; (80057e8 <HAL_GPIO_DeInit+0x21c>)
 80056a2:	42b4      	cmp	r4, r6
 80056a4:	d06c      	beq.n	8005780 <HAL_GPIO_DeInit+0x1b4>
 80056a6:	4e51      	ldr	r6, [pc, #324]	; (80057ec <HAL_GPIO_DeInit+0x220>)
 80056a8:	42b4      	cmp	r4, r6
 80056aa:	d07d      	beq.n	80057a8 <HAL_GPIO_DeInit+0x1dc>
 80056ac:	4e50      	ldr	r6, [pc, #320]	; (80057f0 <HAL_GPIO_DeInit+0x224>)
 80056ae:	42b4      	cmp	r4, r6
 80056b0:	d07f      	beq.n	80057b2 <HAL_GPIO_DeInit+0x1e6>
 80056b2:	4e50      	ldr	r6, [pc, #320]	; (80057f4 <HAL_GPIO_DeInit+0x228>)
 80056b4:	42b4      	cmp	r4, r6
 80056b6:	d072      	beq.n	800579e <HAL_GPIO_DeInit+0x1d2>
 80056b8:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8005800 <HAL_GPIO_DeInit+0x234>
 80056bc:	4544      	cmp	r4, r8
 80056be:	d07d      	beq.n	80057bc <HAL_GPIO_DeInit+0x1f0>
 80056c0:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8005804 <HAL_GPIO_DeInit+0x238>
 80056c4:	4544      	cmp	r4, r8
 80056c6:	d07e      	beq.n	80057c6 <HAL_GPIO_DeInit+0x1fa>
 80056c8:	f04f 080a 	mov.w	r8, #10
 80056cc:	fa08 f202 	lsl.w	r2, r8, r2
 80056d0:	e00a      	b.n	80056e8 <HAL_GPIO_DeInit+0x11c>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80056d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80056d6:	4840      	ldr	r0, [pc, #256]	; (80057d8 <HAL_GPIO_DeInit+0x20c>)
 80056d8:	f00e f934 	bl	8013944 <assert_failed>
  while ((GPIO_Pin >> position) != 0x00U)
 80056dc:	2d00      	cmp	r5, #0
 80056de:	d1b5      	bne.n	800564c <HAL_GPIO_DeInit+0x80>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 80056e0:	b003      	add	sp, #12
 80056e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e6:	2200      	movs	r2, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80056e8:	4596      	cmp	lr, r2
 80056ea:	d11d      	bne.n	8005728 <HAL_GPIO_DeInit+0x15c>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80056ec:	f8d9 e000 	ldr.w	lr, [r9]
 80056f0:	43c9      	mvns	r1, r1
        EXTI->RTSR1 &= ~(iocurrent);
 80056f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80056f6:	ea0e 0e01 	and.w	lr, lr, r1
 80056fa:	f8c9 e000 	str.w	lr, [r9]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80056fe:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8005702:	ea01 0e0e 	and.w	lr, r1, lr
 8005706:	f8c9 e004 	str.w	lr, [r9, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800570a:	f8d2 e000 	ldr.w	lr, [r2]
 800570e:	ea01 0e0e 	and.w	lr, r1, lr
 8005712:	f8c2 e000 	str.w	lr, [r2]
        EXTI->FTSR1 &= ~(iocurrent);
 8005716:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800571a:	ea01 010e 	and.w	r1, r1, lr
 800571e:	6051      	str	r1, [r2, #4]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	ea22 020c 	bic.w	r2, r2, ip
 8005726:	60ba      	str	r2, [r7, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005728:	2103      	movs	r1, #3
 800572a:	005a      	lsls	r2, r3, #1
 800572c:	f8d4 e000 	ldr.w	lr, [r4]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005730:	f04f 0c0f 	mov.w	ip, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005734:	fa01 f202 	lsl.w	r2, r1, r2
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005738:	fa23 f701 	lsr.w	r7, r3, r1
 800573c:	f003 0107 	and.w	r1, r3, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005740:	ea4e 0e02 	orr.w	lr, lr, r2
 8005744:	eb04 0787 	add.w	r7, r4, r7, lsl #2
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005748:	0089      	lsls	r1, r1, #2
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800574a:	43d2      	mvns	r2, r2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800574c:	f8c4 e000 	str.w	lr, [r4]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005750:	fa0c fc01 	lsl.w	ip, ip, r1
 8005754:	6a39      	ldr	r1, [r7, #32]
 8005756:	ea21 010c 	bic.w	r1, r1, ip
 800575a:	6239      	str	r1, [r7, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800575c:	68e1      	ldr	r1, [r4, #12]
 800575e:	4011      	ands	r1, r2
 8005760:	60e1      	str	r1, [r4, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005762:	6861      	ldr	r1, [r4, #4]
 8005764:	ea21 0000 	bic.w	r0, r1, r0
 8005768:	6060      	str	r0, [r4, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800576a:	68a1      	ldr	r1, [r4, #8]
 800576c:	400a      	ands	r2, r1
 800576e:	60a2      	str	r2, [r4, #8]
    position++;
 8005770:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 8005772:	fa35 f203 	lsrs.w	r2, r5, r3
 8005776:	f47f af72 	bne.w	800565e <HAL_GPIO_DeInit+0x92>
}
 800577a:	b003      	add	sp, #12
 800577c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005780:	f04f 0804 	mov.w	r8, #4
 8005784:	fa08 f202 	lsl.w	r2, r8, r2
 8005788:	e7ae      	b.n	80056e8 <HAL_GPIO_DeInit+0x11c>
 800578a:	f04f 0802 	mov.w	r8, #2
 800578e:	fa08 f202 	lsl.w	r2, r8, r2
 8005792:	e7a9      	b.n	80056e8 <HAL_GPIO_DeInit+0x11c>
 8005794:	f04f 0803 	mov.w	r8, #3
 8005798:	fa08 f202 	lsl.w	r2, r8, r2
 800579c:	e7a4      	b.n	80056e8 <HAL_GPIO_DeInit+0x11c>
 800579e:	f04f 0807 	mov.w	r8, #7
 80057a2:	fa08 f202 	lsl.w	r2, r8, r2
 80057a6:	e79f      	b.n	80056e8 <HAL_GPIO_DeInit+0x11c>
 80057a8:	f04f 0805 	mov.w	r8, #5
 80057ac:	fa08 f202 	lsl.w	r2, r8, r2
 80057b0:	e79a      	b.n	80056e8 <HAL_GPIO_DeInit+0x11c>
 80057b2:	f04f 0806 	mov.w	r8, #6
 80057b6:	fa08 f202 	lsl.w	r2, r8, r2
 80057ba:	e795      	b.n	80056e8 <HAL_GPIO_DeInit+0x11c>
 80057bc:	f04f 0808 	mov.w	r8, #8
 80057c0:	fa08 f202 	lsl.w	r2, r8, r2
 80057c4:	e790      	b.n	80056e8 <HAL_GPIO_DeInit+0x11c>
 80057c6:	f04f 0809 	mov.w	r8, #9
 80057ca:	fa08 f202 	lsl.w	r2, r8, r2
 80057ce:	e78b      	b.n	80056e8 <HAL_GPIO_DeInit+0x11c>
 80057d0:	58020000 	.word	0x58020000
 80057d4:	58020400 	.word	0x58020400
 80057d8:	08144e5c 	.word	0x08144e5c
 80057dc:	ffff0000 	.word	0xffff0000
 80057e0:	58020800 	.word	0x58020800
 80057e4:	58020c00 	.word	0x58020c00
 80057e8:	58021000 	.word	0x58021000
 80057ec:	58021400 	.word	0x58021400
 80057f0:	58021800 	.word	0x58021800
 80057f4:	58021c00 	.word	0x58021c00
 80057f8:	58000400 	.word	0x58000400
 80057fc:	58000080 	.word	0x58000080
 8005800:	58022000 	.word	0x58022000
 8005804:	58022400 	.word	0x58022400

08005808 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800580c:	460c      	mov	r4, r1
 800580e:	b129      	cbz	r1, 800581c <HAL_GPIO_ReadPin+0x14>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005810:	692b      	ldr	r3, [r5, #16]
 8005812:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005814:	bf14      	ite	ne
 8005816:	2001      	movne	r0, #1
 8005818:	2000      	moveq	r0, #0
 800581a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800581c:	f240 118d 	movw	r1, #397	; 0x18d
 8005820:	4801      	ldr	r0, [pc, #4]	; (8005828 <HAL_GPIO_ReadPin+0x20>)
 8005822:	f00e f88f 	bl	8013944 <assert_failed>
 8005826:	e7f3      	b.n	8005810 <HAL_GPIO_ReadPin+0x8>
 8005828:	08144e5c 	.word	0x08144e5c

0800582c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	4606      	mov	r6, r0
 8005830:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005832:	460c      	mov	r4, r1
 8005834:	b161      	cbz	r1, 8005850 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005836:	2d01      	cmp	r5, #1
 8005838:	d803      	bhi.n	8005842 <HAL_GPIO_WritePin+0x16>

  if (PinState != GPIO_PIN_RESET)
 800583a:	b905      	cbnz	r5, 800583e <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800583c:	0424      	lsls	r4, r4, #16
 800583e:	61b4      	str	r4, [r6, #24]
  }
}
 8005840:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005842:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005846:	4805      	ldr	r0, [pc, #20]	; (800585c <HAL_GPIO_WritePin+0x30>)
 8005848:	f00e f87c 	bl	8013944 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800584c:	61b4      	str	r4, [r6, #24]
}
 800584e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005850:	f240 11ad 	movw	r1, #429	; 0x1ad
 8005854:	4801      	ldr	r0, [pc, #4]	; (800585c <HAL_GPIO_WritePin+0x30>)
 8005856:	f00e f875 	bl	8013944 <assert_failed>
 800585a:	e7ec      	b.n	8005836 <HAL_GPIO_WritePin+0xa>
 800585c:	08144e5c 	.word	0x08144e5c

08005860 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005864:	f890 42b8 	ldrb.w	r4, [r0, #696]	; 0x2b8
{
 8005868:	b085      	sub	sp, #20
  __HAL_LOCK(hhcd);
 800586a:	2c01      	cmp	r4, #1
{
 800586c:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8005870:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
 8005874:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
  __HAL_LOCK(hhcd);
 8005878:	d029      	beq.n	80058ce <HAL_HCD_HC_Init+0x6e>
 800587a:	4605      	mov	r5, r0
  hhcd->hc[ch_num].do_ping = 0U;
 800587c:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  __HAL_LOCK(hhcd);
 8005880:	f04f 0801 	mov.w	r8, #1
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
 8005884:	09d0      	lsrs	r0, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
 8005886:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800588a:	f002 0a7f 	and.w	sl, r2, #127	; 0x7f
  __HAL_LOCK(hhcd);
 800588e:	f885 82b8 	strb.w	r8, [r5, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8005892:	f04f 0800 	mov.w	r8, #0
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005896:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 800589a:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 800589e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 80058a2:	f884 e03f 	strb.w	lr, [r4, #63]	; 0x3f
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 80058a6:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80058aa:	f884 a03a 	strb.w	sl, [r4, #58]	; 0x3a
 80058ae:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].do_ping = 0U;
 80058b2:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d

  status =  USB_HC_Init(hhcd->Instance,
 80058b6:	6828      	ldr	r0, [r5, #0]
 80058b8:	f8cd c000 	str.w	ip, [sp]
 80058bc:	e9cd e901 	strd	lr, r9, [sp, #4]
 80058c0:	f009 f9b8 	bl	800ec34 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80058c4:	f885 82b8 	strb.w	r8, [r5, #696]	; 0x2b8

  return status;
}
 80058c8:	b005      	add	sp, #20
 80058ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hhcd);
 80058ce:	2002      	movs	r0, #2
}
 80058d0:	b005      	add	sp, #20
 80058d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d6:	bf00      	nop

080058d8 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 80058d8:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d00b      	beq.n	80058f8 <HAL_HCD_HC_Halt+0x20>
 80058e0:	2301      	movs	r3, #1
{
 80058e2:	b510      	push	{r4, lr}
 80058e4:	4604      	mov	r4, r0
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058e6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hhcd);
 80058e8:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058ec:	f009 fafe 	bl	800eeec <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80058f0:	2000      	movs	r0, #0
 80058f2:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
 80058f6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80058f8:	2002      	movs	r0, #2
}
 80058fa:	4770      	bx	lr

080058fc <HAL_HCD_Init>:
  if (hhcd == NULL)
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d057      	beq.n	80059b0 <HAL_HCD_Init+0xb4>
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8005900:	4b2c      	ldr	r3, [pc, #176]	; (80059b4 <HAL_HCD_Init+0xb8>)
{
 8005902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8005906:	6804      	ldr	r4, [r0, #0]
{
 8005908:	b08a      	sub	sp, #40	; 0x28
 800590a:	4607      	mov	r7, r0
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 800590c:	429c      	cmp	r4, r3
 800590e:	d008      	beq.n	8005922 <HAL_HCD_Init+0x26>
 8005910:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8005914:	429c      	cmp	r4, r3
 8005916:	d004      	beq.n	8005922 <HAL_HCD_Init+0x26>
 8005918:	217a      	movs	r1, #122	; 0x7a
 800591a:	4827      	ldr	r0, [pc, #156]	; (80059b8 <HAL_HCD_Init+0xbc>)
 800591c:	f00e f812 	bl	8013944 <assert_failed>
 8005920:	683c      	ldr	r4, [r7, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005922:	f897 32b9 	ldrb.w	r3, [r7, #697]	; 0x2b9
 8005926:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800592a:	2b00      	cmp	r3, #0
 800592c:	d039      	beq.n	80059a2 <HAL_HCD_Init+0xa6>
 800592e:	4620      	mov	r0, r4
  hhcd->State = HAL_HCD_STATE_BUSY;
 8005930:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005932:	466d      	mov	r5, sp
 8005934:	f107 0804 	add.w	r8, r7, #4
  hhcd->State = HAL_HCD_STATE_BUSY;
 8005938:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800593c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800593e:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005940:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hhcd->Init.dma_enable = 0U;
 8005944:	bf08      	it	eq
 8005946:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8005948:	f009 f82a 	bl	800e9a0 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800594c:	f854 6b10 	ldr.w	r6, [r4], #16
 8005950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005958:	e894 0003 	ldmia.w	r4, {r0, r1}
 800595c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005960:	4630      	mov	r0, r6
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005962:	463e      	mov	r6, r7
 8005964:	466d      	mov	r5, sp
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005966:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800596a:	f008 ffa7 	bl	800e8bc <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800596e:	2101      	movs	r1, #1
 8005970:	6838      	ldr	r0, [r7, #0]
 8005972:	f009 f81d 	bl	800e9b0 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005976:	f856 cb10 	ldr.w	ip, [r6], #16
 800597a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800597c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800597e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005982:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005986:	e885 0003 	stmia.w	r5, {r0, r1}
 800598a:	4660      	mov	r0, ip
 800598c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8005990:	f009 f842 	bl	800ea18 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8005994:	2301      	movs	r3, #1
  return HAL_OK;
 8005996:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8005998:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 800599c:	b00a      	add	sp, #40	; 0x28
 800599e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_HCD_MspInit(hhcd);
 80059a2:	4638      	mov	r0, r7
    hhcd->Lock = HAL_UNLOCKED;
 80059a4:	f887 22b8 	strb.w	r2, [r7, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 80059a8:	f018 fa96 	bl	801ded8 <HAL_HCD_MspInit>
 80059ac:	6838      	ldr	r0, [r7, #0]
 80059ae:	e7bf      	b.n	8005930 <HAL_HCD_Init+0x34>
    return HAL_ERROR;
 80059b0:	2001      	movs	r0, #1
}
 80059b2:	4770      	bx	lr
 80059b4:	40080000 	.word	0x40080000
 80059b8:	08144e98 	.word	0x08144e98

080059bc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80059bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059be:	460c      	mov	r4, r1
  hhcd->hc[ch_num].ep_is_in = direction;
 80059c0:	0089      	lsls	r1, r1, #2
{
 80059c2:	f89d c014 	ldrb.w	ip, [sp, #20]
  hhcd->hc[ch_num].ep_is_in = direction;
 80059c6:	190d      	adds	r5, r1, r4
{
 80059c8:	9f06      	ldr	r7, [sp, #24]
 80059ca:	f8bd 601c 	ldrh.w	r6, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 80059ce:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
{
 80059d2:	f89d e020 	ldrb.w	lr, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 80059d6:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 80059da:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f

  if (token == 0U)
 80059de:	f1bc 0f00 	cmp.w	ip, #0
 80059e2:	d137      	bne.n	8005a54 <HAL_HCD_HC_SubmitRequest+0x98>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
    hhcd->hc[ch_num].do_ping = do_ping;
 80059e4:	f885 e03d 	strb.w	lr, [r5, #61]	; 0x3d
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80059e8:	f04f 0e03 	mov.w	lr, #3
 80059ec:	190d      	adds	r5, r1, r4
 80059ee:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80059f2:	f885 e042 	strb.w	lr, [r5, #66]	; 0x42
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d815      	bhi.n	8005a26 <HAL_HCD_HC_SubmitRequest+0x6a>
 80059fa:	e8df f003 	tbb	[pc, r3]
 80059fe:	3902      	.short	0x3902
 8005a00:	2e2e      	.short	0x2e2e
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005a02:	f1bc 0f01 	cmp.w	ip, #1
 8005a06:	d10e      	bne.n	8005a26 <HAL_HCD_HC_SubmitRequest+0x6a>
 8005a08:	b96a      	cbnz	r2, 8005a26 <HAL_HCD_HC_SubmitRequest+0x6a>
      {
        if (length == 0U)
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005a0a:	190b      	adds	r3, r1, r4
        if (length == 0U)
 8005a0c:	2e00      	cmp	r6, #0
 8005a0e:	d13e      	bne.n	8005a8e <HAL_HCD_HC_SubmitRequest+0xd2>
          hhcd->hc[ch_num].toggle_out = 1U;
 8005a10:	2201      	movs	r2, #1
 8005a12:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
        }
        else
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005a1a:	190b      	adds	r3, r1, r4
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005a26:	190b      	adds	r3, r1, r4
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005a28:	2128      	movs	r1, #40	; 0x28
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005a2a:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005a2c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005a30:	fb01 0104 	mla	r1, r1, r4, r0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005a34:	645f      	str	r7, [r3, #68]	; 0x44
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005a36:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].xfer_len  = length;
 8005a38:	649e      	str	r6, [r3, #72]	; 0x48
  hhcd->hc[ch_num].ch_num = ch_num;
 8005a3a:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005a3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8005a42:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8005a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005a48:	7c02      	ldrb	r2, [r0, #16]
 8005a4a:	6800      	ldr	r0, [r0, #0]
}
 8005a4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005a50:	f009 b98c 	b.w	800ed6c <USB_HC_StartXfer>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005a54:	f04f 0e02 	mov.w	lr, #2
 8005a58:	e7c8      	b.n	80059ec <HAL_HCD_HC_SubmitRequest+0x30>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005a5a:	190b      	adds	r3, r1, r4
 8005a5c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
      if (direction == 0U)
 8005a60:	b96a      	cbnz	r2, 8005a7e <HAL_HCD_HC_SubmitRequest+0xc2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005a62:	f893 5051 	ldrb.w	r5, [r3, #81]	; 0x51
 8005a66:	b13d      	cbz	r5, 8005a78 <HAL_HCD_HC_SubmitRequest+0xbc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005a68:	2202      	movs	r2, #2
 8005a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a6e:	e7da      	b.n	8005a26 <HAL_HCD_HC_SubmitRequest+0x6a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005a70:	190b      	adds	r3, r1, r4
 8005a72:	2200      	movs	r2, #0
 8005a74:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 8005a7c:	e7d3      	b.n	8005a26 <HAL_HCD_HC_SubmitRequest+0x6a>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005a7e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8005a82:	2a00      	cmp	r2, #0
 8005a84:	d0f8      	beq.n	8005a78 <HAL_HCD_HC_SubmitRequest+0xbc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a8c:	e7cb      	b.n	8005a26 <HAL_HCD_HC_SubmitRequest+0x6a>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005a8e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005a92:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8005a96:	2a00      	cmp	r2, #0
 8005a98:	d0ee      	beq.n	8005a78 <HAL_HCD_HC_SubmitRequest+0xbc>
 8005a9a:	e7be      	b.n	8005a1a <HAL_HCD_HC_SubmitRequest+0x5e>

08005a9c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005aa0:	6805      	ldr	r5, [r0, #0]
{
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f008 ffb2 	bl	800ea10 <USB_GetMode>
 8005aac:	2801      	cmp	r0, #1
 8005aae:	d002      	beq.n	8005ab6 <HAL_HCD_IRQHandler+0x1a>
      HCD_RXQLVL_IRQHandler(hhcd);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
    }
  }
}
 8005ab0:	b005      	add	sp, #20
 8005ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005ab6:	6820      	ldr	r0, [r4, #0]
 8005ab8:	f008 ffa6 	bl	800ea08 <USB_ReadInterrupts>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d0f7      	beq.n	8005ab0 <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ac0:	6820      	ldr	r0, [r4, #0]
 8005ac2:	f008 ffa1 	bl	800ea08 <USB_ReadInterrupts>
 8005ac6:	0286      	lsls	r6, r0, #10
 8005ac8:	d503      	bpl.n	8005ad2 <HAL_HCD_IRQHandler+0x36>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005ad0:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005ad2:	6820      	ldr	r0, [r4, #0]
 8005ad4:	f008 ff98 	bl	800ea08 <USB_ReadInterrupts>
 8005ad8:	02c0      	lsls	r0, r0, #11
 8005ada:	d503      	bpl.n	8005ae4 <HAL_HCD_IRQHandler+0x48>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ae2:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005ae4:	6820      	ldr	r0, [r4, #0]
 8005ae6:	f008 ff8f 	bl	800ea08 <USB_ReadInterrupts>
 8005aea:	0141      	lsls	r1, r0, #5
 8005aec:	d503      	bpl.n	8005af6 <HAL_HCD_IRQHandler+0x5a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005af4:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005af6:	6820      	ldr	r0, [r4, #0]
 8005af8:	f008 ff86 	bl	800ea08 <USB_ReadInterrupts>
 8005afc:	0782      	lsls	r2, r0, #30
 8005afe:	d502      	bpl.n	8005b06 <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	2202      	movs	r2, #2
 8005b04:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005b06:	6820      	ldr	r0, [r4, #0]
 8005b08:	f008 ff7e 	bl	800ea08 <USB_ReadInterrupts>
 8005b0c:	0083      	lsls	r3, r0, #2
 8005b0e:	d452      	bmi.n	8005bb6 <HAL_HCD_IRQHandler+0x11a>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005b10:	6820      	ldr	r0, [r4, #0]
 8005b12:	f008 ff79 	bl	800ea08 <USB_ReadInterrupts>
 8005b16:	01c6      	lsls	r6, r0, #7
 8005b18:	f100 80d9 	bmi.w	8005cce <HAL_HCD_IRQHandler+0x232>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005b1c:	6820      	ldr	r0, [r4, #0]
 8005b1e:	f008 ff73 	bl	800ea08 <USB_ReadInterrupts>
 8005b22:	0700      	lsls	r0, r0, #28
 8005b24:	f100 80cc 	bmi.w	8005cc0 <HAL_HCD_IRQHandler+0x224>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005b28:	6820      	ldr	r0, [r4, #0]
 8005b2a:	f008 ff6d 	bl	800ea08 <USB_ReadInterrupts>
 8005b2e:	0181      	lsls	r1, r0, #6
 8005b30:	d451      	bmi.n	8005bd6 <HAL_HCD_IRQHandler+0x13a>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005b32:	6820      	ldr	r0, [r4, #0]
 8005b34:	f008 ff68 	bl	800ea08 <USB_ReadInterrupts>
 8005b38:	06c3      	lsls	r3, r0, #27
 8005b3a:	d5b9      	bpl.n	8005ab0 <HAL_HCD_IRQHandler+0x14>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b3c:	6822      	ldr	r2, [r4, #0]
 8005b3e:	6993      	ldr	r3, [r2, #24]
 8005b40:	f023 0310 	bic.w	r3, r3, #16
 8005b44:	6193      	str	r3, [r2, #24]
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b46:	6825      	ldr	r5, [r4, #0]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005b48:	6a2e      	ldr	r6, [r5, #32]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005b4a:	f3c6 4243 	ubfx	r2, r6, #17, #4
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;

  switch (pktsts)
 8005b4e:	2a02      	cmp	r2, #2
 8005b50:	d12c      	bne.n	8005bac <HAL_HCD_IRQHandler+0x110>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b52:	f3c6 180a 	ubfx	r8, r6, #4, #11
  {
    case GRXSTS_PKTSTS_IN:
      /* Read the data into the host buffer. */
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005b56:	f1b8 0f00 	cmp.w	r8, #0
 8005b5a:	d027      	beq.n	8005bac <HAL_HCD_IRQHandler+0x110>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005b5c:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005b60:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8005b64:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8005b68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b6a:	b1f9      	cbz	r1, 8005bac <HAL_HCD_IRQHandler+0x110>
      {
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005b6c:	4642      	mov	r2, r8
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f008 ff36 	bl	800e9e0 <USB_ReadPacket>

        /*manage multiple Xfer */
        hhcd->hc[ch_num].xfer_buff += pktcnt;
        hhcd->hc[ch_num].xfer_count  += pktcnt;

        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005b74:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005b78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005b7a:	0173      	lsls	r3, r6, #5
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005b7c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005b7e:	eb02 0008 	add.w	r0, r2, r8
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005b82:	18ee      	adds	r6, r5, r3
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005b84:	4441      	add	r1, r8
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005b86:	4ab1      	ldr	r2, [pc, #708]	; (8005e4c <HAL_HCD_IRQHandler+0x3b0>)
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005b88:	6478      	str	r0, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005b8a:	64f9      	str	r1, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005b8c:	6931      	ldr	r1, [r6, #16]
 8005b8e:	400a      	ands	r2, r1
 8005b90:	b15a      	cbz	r2, 8005baa <HAL_HCD_IRQHandler+0x10e>
        {
          /* re-activate the channel when more packets are expected */
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b92:	58ea      	ldr	r2, [r5, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b94:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b98:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b9c:	50ea      	str	r2, [r5, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005b9e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005ba2:	f083 0301 	eor.w	r3, r3, #1
 8005ba6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8005baa:	6825      	ldr	r5, [r4, #0]
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bac:	69ab      	ldr	r3, [r5, #24]
 8005bae:	f043 0310 	orr.w	r3, r3, #16
 8005bb2:	61ab      	str	r3, [r5, #24]
 8005bb4:	e77c      	b.n	8005ab0 <HAL_HCD_IRQHandler+0x14>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005bbc:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005bbe:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8005bc2:	07df      	lsls	r7, r3, #31
 8005bc4:	d4a4      	bmi.n	8005b10 <HAL_HCD_IRQHandler+0x74>
        HAL_HCD_Disconnect_Callback(hhcd);
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f018 f9d2 	bl	801df70 <HAL_HCD_Disconnect_Callback>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005bcc:	2101      	movs	r1, #1
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	f008 ffb2 	bl	800eb38 <USB_InitFSLSPClkSel>
 8005bd4:	e79c      	b.n	8005b10 <HAL_HCD_IRQHandler+0x74>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005bd6:	6820      	ldr	r0, [r4, #0]
 8005bd8:	f009 f982 	bl	800eee0 <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005bdc:	68a1      	ldr	r1, [r4, #8]
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005bde:	4681      	mov	r9, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005be0:	2900      	cmp	r1, #0
 8005be2:	f000 80ae 	beq.w	8005d42 <HAL_HCD_IRQHandler+0x2a6>
 8005be6:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 8005bea:	6820      	ldr	r0, [r4, #0]
 8005bec:	2600      	movs	r6, #0
 8005bee:	e03d      	b.n	8005c6c <HAL_HCD_IRQHandler+0x1d0>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005bf0:	075b      	lsls	r3, r3, #29
 8005bf2:	f140 80ab 	bpl.w	8005d4c <HAL_HCD_IRQHandler+0x2b0>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005bf6:	2304      	movs	r3, #4
 8005bf8:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f043 0302 	orr.w	r3, r3, #2
 8005c00:	60fb      	str	r3, [r7, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	059b      	lsls	r3, r3, #22
 8005c06:	f100 80dd 	bmi.w	8005dc4 <HAL_HCD_IRQHandler+0x328>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	07d8      	lsls	r0, r3, #31
 8005c0e:	f140 80ac 	bpl.w	8005d6a <HAL_HCD_IRQHandler+0x2ce>
    if (hhcd->Init.dma_enable != 0U)
 8005c12:	6923      	ldr	r3, [r4, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f040 8137 	bne.w	8005e88 <HAL_HCD_IRQHandler+0x3ec>
 8005c1a:	ea4f 0388 	mov.w	r3, r8, lsl #2
    hhcd->hc[ch_num].state = HC_XFRC;
 8005c1e:	eb03 0c08 	add.w	ip, r3, r8
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c22:	2200      	movs	r2, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 8005c24:	f04f 0e01 	mov.w	lr, #1
 8005c28:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c2c:	f8cc 2058 	str.w	r2, [ip, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 8005c30:	f88c e05d 	strb.w	lr, [ip, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005c34:	f8c7 e008 	str.w	lr, [r7, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005c38:	f89c 203f 	ldrb.w	r2, [ip, #63]	; 0x3f
 8005c3c:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8005c40:	f000 8158 	beq.w	8005ef4 <HAL_HCD_IRQHandler+0x458>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005c44:	2a03      	cmp	r2, #3
 8005c46:	f000 81c7 	beq.w	8005fd8 <HAL_HCD_IRQHandler+0x53c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005c4a:	2a01      	cmp	r2, #1
 8005c4c:	f000 81d4 	beq.w	8005ff8 <HAL_HCD_IRQHandler+0x55c>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005c50:	4443      	add	r3, r8
 8005c52:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005c56:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8005c5a:	f082 0201 	eor.w	r2, r2, #1
 8005c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005c62:	68a1      	ldr	r1, [r4, #8]
 8005c64:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c66:	3601      	adds	r6, #1
 8005c68:	428e      	cmp	r6, r1
 8005c6a:	d26b      	bcs.n	8005d44 <HAL_HCD_IRQHandler+0x2a8>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005c6c:	f006 030f 	and.w	r3, r6, #15
 8005c70:	fa29 f303 	lsr.w	r3, r9, r3
 8005c74:	07da      	lsls	r2, r3, #31
 8005c76:	d5f6      	bpl.n	8005c66 <HAL_HCD_IRQHandler+0x1ca>
 8005c78:	fa5f f886 	uxtb.w	r8, r6
 8005c7c:	f500 6aa0 	add.w	sl, r0, #1280	; 0x500
 8005c80:	0173      	lsls	r3, r6, #5
 8005c82:	ea4f 1b48 	mov.w	fp, r8, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005c86:	58eb      	ldr	r3, [r5, r3]
 8005c88:	eb0b 070a 	add.w	r7, fp, sl
 8005c8c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005c90:	68bb      	ldr	r3, [r7, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005c92:	d1ad      	bne.n	8005bf0 <HAL_HCD_IRQHandler+0x154>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005c94:	f013 0304 	ands.w	r3, r3, #4
 8005c98:	d15e      	bne.n	8005d58 <HAL_HCD_IRQHandler+0x2bc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	f012 0220 	ands.w	r2, r2, #32
 8005ca0:	f000 809e 	beq.w	8005de0 <HAL_HCD_IRQHandler+0x344>
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005ca4:	eb08 0288 	add.w	r2, r8, r8, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005ca8:	2120      	movs	r1, #32
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005caa:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005cae:	60b9      	str	r1, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005cb0:	f892 103d 	ldrb.w	r1, [r2, #61]	; 0x3d
 8005cb4:	2901      	cmp	r1, #1
 8005cb6:	f000 8167 	beq.w	8005f88 <HAL_HCD_IRQHandler+0x4ec>
 8005cba:	68a1      	ldr	r1, [r4, #8]
 8005cbc:	6820      	ldr	r0, [r4, #0]
 8005cbe:	e7d2      	b.n	8005c66 <HAL_HCD_IRQHandler+0x1ca>
      HAL_HCD_SOF_Callback(hhcd);
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f018 f94d 	bl	801df60 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	615a      	str	r2, [r3, #20]
 8005ccc:	e72c      	b.n	8005b28 <HAL_HCD_IRQHandler+0x8c>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cce:	6826      	ldr	r6, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005cd0:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8005cd4:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 8005cd6:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8005cda:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005cdc:	9b03      	ldr	r3, [sp, #12]
 8005cde:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ce2:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005ce4:	9b02      	ldr	r3, [sp, #8]
 8005ce6:	0798      	lsls	r0, r3, #30
 8005ce8:	d507      	bpl.n	8005cfa <HAL_HCD_IRQHandler+0x25e>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005cea:	9b02      	ldr	r3, [sp, #8]
 8005cec:	07d9      	lsls	r1, r3, #31
 8005cee:	f100 80f9 	bmi.w	8005ee4 <HAL_HCD_IRQHandler+0x448>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005cf2:	9b03      	ldr	r3, [sp, #12]
 8005cf4:	f043 0302 	orr.w	r3, r3, #2
 8005cf8:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005cfa:	9b02      	ldr	r3, [sp, #8]
 8005cfc:	071a      	lsls	r2, r3, #28
 8005cfe:	d515      	bpl.n	8005d2c <HAL_HCD_IRQHandler+0x290>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005d00:	9b03      	ldr	r3, [sp, #12]
 8005d02:	f043 0308 	orr.w	r3, r3, #8
 8005d06:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005d08:	9b02      	ldr	r3, [sp, #8]
 8005d0a:	075b      	lsls	r3, r3, #29
 8005d0c:	f140 80ee 	bpl.w	8005eec <HAL_HCD_IRQHandler+0x450>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005d10:	69a1      	ldr	r1, [r4, #24]
 8005d12:	2902      	cmp	r1, #2
 8005d14:	f000 80fe 	beq.w	8005f14 <HAL_HCD_IRQHandler+0x478>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005d18:	68e3      	ldr	r3, [r4, #12]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d103      	bne.n	8005d26 <HAL_HCD_IRQHandler+0x28a>
        {
          USBx_HOST->HFIR = 60000U;
 8005d1e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005d22:	f8c6 2404 	str.w	r2, [r6, #1028]	; 0x404
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005d26:	4620      	mov	r0, r4
 8005d28:	f018 f928 	bl	801df7c <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005d2c:	9b02      	ldr	r3, [sp, #8]
 8005d2e:	069f      	lsls	r7, r3, #26
 8005d30:	d503      	bpl.n	8005d3a <HAL_HCD_IRQHandler+0x29e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	f043 0320 	orr.w	r3, r3, #32
 8005d38:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005d3a:	9b03      	ldr	r3, [sp, #12]
 8005d3c:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
 8005d40:	e6ec      	b.n	8005b1c <HAL_HCD_IRQHandler+0x80>
 8005d42:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d48:	6143      	str	r3, [r0, #20]
 8005d4a:	e6f2      	b.n	8005b32 <HAL_HCD_IRQHandler+0x96>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	0698      	lsls	r0, r3, #26
 8005d50:	d57e      	bpl.n	8005e50 <HAL_HCD_IRQHandler+0x3b4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005d52:	2320      	movs	r3, #32
 8005d54:	60bb      	str	r3, [r7, #8]
 8005d56:	e754      	b.n	8005c02 <HAL_HCD_IRQHandler+0x166>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005d58:	2304      	movs	r3, #4
 8005d5a:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f043 0302 	orr.w	r3, r3, #2
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	68a1      	ldr	r1, [r4, #8]
 8005d66:	6820      	ldr	r0, [r4, #0]
 8005d68:	e77d      	b.n	8005c66 <HAL_HCD_IRQHandler+0x1ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	0799      	lsls	r1, r3, #30
 8005d6e:	f140 8098 	bpl.w	8005ea2 <HAL_HCD_IRQHandler+0x406>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005d72:	ea4f 0388 	mov.w	r3, r8, lsl #2
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005d76:	68f9      	ldr	r1, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005d78:	eb03 0208 	add.w	r2, r3, r8
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005d7c:	f021 0102 	bic.w	r1, r1, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005d80:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005d84:	60f9      	str	r1, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005d86:	f892 105d 	ldrb.w	r1, [r2, #93]	; 0x5d
 8005d8a:	2901      	cmp	r1, #1
 8005d8c:	f000 80bf 	beq.w	8005f0e <HAL_HCD_IRQHandler+0x472>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005d90:	2905      	cmp	r1, #5
 8005d92:	f000 80bc 	beq.w	8005f0e <HAL_HCD_IRQHandler+0x472>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005d96:	2906      	cmp	r1, #6
 8005d98:	f000 814c 	beq.w	8006034 <HAL_HCD_IRQHandler+0x598>
 8005d9c:	2908      	cmp	r1, #8
 8005d9e:	f000 8149 	beq.w	8006034 <HAL_HCD_IRQHandler+0x598>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005da2:	2903      	cmp	r1, #3
 8005da4:	f000 81a9 	beq.w	80060fa <HAL_HCD_IRQHandler+0x65e>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005da8:	4443      	add	r3, r8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005daa:	2202      	movs	r2, #2
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005dac:	4641      	mov	r1, r8
 8005dae:	4620      	mov	r0, r4
 8005db0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005db4:	60ba      	str	r2, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005db6:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8005dba:	f018 f8dd 	bl	801df78 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005dbe:	68a1      	ldr	r1, [r4, #8]
 8005dc0:	6820      	ldr	r0, [r4, #0]
 8005dc2:	e750      	b.n	8005c66 <HAL_HCD_IRQHandler+0x1ca>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dc6:	4641      	mov	r1, r8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005dc8:	f043 0302 	orr.w	r3, r3, #2
 8005dcc:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dce:	6820      	ldr	r0, [r4, #0]
 8005dd0:	f009 f88c 	bl	800eeec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	68a1      	ldr	r1, [r4, #8]
 8005ddc:	6820      	ldr	r0, [r4, #0]
 8005dde:	e742      	b.n	8005c66 <HAL_HCD_IRQHandler+0x1ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	065b      	lsls	r3, r3, #25
 8005de4:	f100 80b7 	bmi.w	8005f56 <HAL_HCD_IRQHandler+0x4ba>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 8005dee:	d1e9      	bne.n	8005dc4 <HAL_HCD_IRQHandler+0x328>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	07d2      	lsls	r2, r2, #31
 8005df4:	f100 8109 	bmi.w	800600a <HAL_HCD_IRQHandler+0x56e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f013 0308 	ands.w	r3, r3, #8
 8005dfe:	f040 8161 	bne.w	80060c4 <HAL_HCD_IRQHandler+0x628>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	06d2      	lsls	r2, r2, #27
 8005e06:	f140 8131 	bpl.w	800606c <HAL_HCD_IRQHandler+0x5d0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e0a:	eb08 0288 	add.w	r2, r8, r8, lsl #2
    hhcd->hc[ch_num].state = HC_NAK;
 8005e0e:	2103      	movs	r1, #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e10:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005e14:	6593      	str	r3, [r2, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005e16:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].state = HC_NAK;
 8005e1a:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005e1e:	b943      	cbnz	r3, 8005e32 <HAL_HCD_IRQHandler+0x396>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005e20:	2328      	movs	r3, #40	; 0x28
 8005e22:	fb03 4308 	mla	r3, r3, r8, r4
 8005e26:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8005e2a:	b912      	cbnz	r2, 8005e32 <HAL_HCD_IRQHandler+0x396>
        hhcd->hc[ch_num].do_ping = 1U;
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e32:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e34:	4641      	mov	r1, r8
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e36:	f043 0302 	orr.w	r3, r3, #2
 8005e3a:	60fb      	str	r3, [r7, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e3c:	6820      	ldr	r0, [r4, #0]
 8005e3e:	f009 f855 	bl	800eeec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e42:	2310      	movs	r3, #16
 8005e44:	60bb      	str	r3, [r7, #8]
 8005e46:	68a1      	ldr	r1, [r4, #8]
 8005e48:	6820      	ldr	r0, [r4, #0]
 8005e4a:	e70c      	b.n	8005c66 <HAL_HCD_IRQHandler+0x1ca>
 8005e4c:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	0719      	lsls	r1, r3, #28
 8005e54:	d469      	bmi.n	8005f2a <HAL_HCD_IRQHandler+0x48e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	055a      	lsls	r2, r3, #21
 8005e5a:	f57f aed2 	bpl.w	8005c02 <HAL_HCD_IRQHandler+0x166>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e60:	4641      	mov	r1, r8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e62:	f043 0302 	orr.w	r3, r3, #2
 8005e66:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e68:	6820      	ldr	r0, [r4, #0]
 8005e6a:	f009 f83f 	bl	800eeec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e6e:	2210      	movs	r2, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005e70:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8005e74:	2108      	movs	r1, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e76:	60ba      	str	r2, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005e7c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005e80:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005e84:	60ba      	str	r2, [r7, #8]
 8005e86:	e6bc      	b.n	8005c02 <HAL_HCD_IRQHandler+0x166>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005e88:	ea4f 0388 	mov.w	r3, r8, lsl #2
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005e8c:	6938      	ldr	r0, [r7, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005e8e:	eb03 0208 	add.w	r2, r3, r8
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005e92:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005e96:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005e9a:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8005e9c:	1a09      	subs	r1, r1, r0
 8005e9e:	64d1      	str	r1, [r2, #76]	; 0x4c
 8005ea0:	e6bd      	b.n	8005c1e <HAL_HCD_IRQHandler+0x182>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8005ea8:	d17f      	bne.n	8005faa <HAL_HCD_IRQHandler+0x50e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	06d2      	lsls	r2, r2, #27
 8005eae:	f57f af04 	bpl.w	8005cba <HAL_HCD_IRQHandler+0x21e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005eb2:	eb08 0188 	add.w	r1, r8, r8, lsl #2
 8005eb6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8005eba:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8005ebe:	2a03      	cmp	r2, #3
 8005ec0:	f000 8121 	beq.w	8006106 <HAL_HCD_IRQHandler+0x66a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005ec4:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 8005ec8:	d1bb      	bne.n	8005e42 <HAL_HCD_IRQHandler+0x3a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005eca:	658a      	str	r2, [r1, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8005ecc:	6923      	ldr	r3, [r4, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1b7      	bne.n	8005e42 <HAL_HCD_IRQHandler+0x3a6>
        hhcd->hc[ch_num].state = HC_NAK;
 8005ed2:	2328      	movs	r3, #40	; 0x28
 8005ed4:	2203      	movs	r2, #3
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ed6:	4641      	mov	r1, r8
        hhcd->hc[ch_num].state = HC_NAK;
 8005ed8:	fb03 4308 	mla	r3, r3, r8, r4
 8005edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	e7a8      	b.n	8005e36 <HAL_HCD_IRQHandler+0x39a>
      HAL_HCD_Connect_Callback(hhcd);
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f018 f83f 	bl	801df68 <HAL_HCD_Connect_Callback>
 8005eea:	e702      	b.n	8005cf2 <HAL_HCD_IRQHandler+0x256>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005eec:	4620      	mov	r0, r4
 8005eee:	f018 f849 	bl	801df84 <HAL_HCD_PortDisabled_Callback>
 8005ef2:	e71b      	b.n	8005d2c <HAL_HCD_IRQHandler+0x290>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ef4:	68fa      	ldr	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ef6:	4641      	mov	r1, r8
 8005ef8:	9301      	str	r3, [sp, #4]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005efa:	f042 0202 	orr.w	r2, r2, #2
 8005efe:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f00:	6820      	ldr	r0, [r4, #0]
 8005f02:	f008 fff3 	bl	800eeec <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f06:	2210      	movs	r2, #16
 8005f08:	9b01      	ldr	r3, [sp, #4]
 8005f0a:	60ba      	str	r2, [r7, #8]
 8005f0c:	e6a0      	b.n	8005c50 <HAL_HCD_IRQHandler+0x1b4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005f0e:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
 8005f12:	e749      	b.n	8005da8 <HAL_HCD_IRQHandler+0x30c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005f14:	9b02      	ldr	r3, [sp, #8]
 8005f16:	6820      	ldr	r0, [r4, #0]
 8005f18:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005f1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005f20:	bf18      	it	ne
 8005f22:	2101      	movne	r1, #1
 8005f24:	f008 fe08 	bl	800eb38 <USB_InitFSLSPClkSel>
 8005f28:	e6fd      	b.n	8005d26 <HAL_HCD_IRQHandler+0x28a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f2a:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005f2c:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8005f30:	2105      	movs	r1, #5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f32:	2010      	movs	r0, #16
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f34:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].state = HC_STALL;
 8005f38:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005f3c:	f04f 0c08 	mov.w	ip, #8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f40:	60fa      	str	r2, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005f42:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f46:	4641      	mov	r1, r8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f48:	60b8      	str	r0, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005f4a:	f8c7 c008 	str.w	ip, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f4e:	6820      	ldr	r0, [r4, #0]
 8005f50:	f008 ffcc 	bl	800eeec <USB_HC_Halt>
 8005f54:	e655      	b.n	8005c02 <HAL_HCD_IRQHandler+0x166>
    hhcd->hc[ch_num].state = HC_NYET;
 8005f56:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8005f5a:	f04f 0c04 	mov.w	ip, #4
    hhcd->hc[ch_num].do_ping = 1U;
 8005f5e:	2001      	movs	r0, #1
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f60:	4641      	mov	r1, r8
    hhcd->hc[ch_num].state = HC_NYET;
 8005f62:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f66:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NYET;
 8005f68:	f883 c05d 	strb.w	ip, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8005f6c:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f043 0302 	orr.w	r3, r3, #2
 8005f76:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f78:	6820      	ldr	r0, [r4, #0]
 8005f7a:	f008 ffb7 	bl	800eeec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005f7e:	2340      	movs	r3, #64	; 0x40
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	68a1      	ldr	r1, [r4, #8]
 8005f84:	6820      	ldr	r0, [r4, #0]
 8005f86:	e66e      	b.n	8005c66 <HAL_HCD_IRQHandler+0x1ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005f88:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005f8c:	f04f 0302 	mov.w	r3, #2
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f90:	4641      	mov	r1, r8
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005f92:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f043 0302 	orr.w	r3, r3, #2
 8005f9c:	60fb      	str	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f9e:	6820      	ldr	r0, [r4, #0]
 8005fa0:	f008 ffa4 	bl	800eeec <USB_HC_Halt>
 8005fa4:	68a1      	ldr	r1, [r4, #8]
 8005fa6:	6820      	ldr	r0, [r4, #0]
 8005fa8:	e65d      	b.n	8005c66 <HAL_HCD_IRQHandler+0x1ca>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005faa:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005fac:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005fb0:	2006      	movs	r0, #6
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fb2:	4641      	mov	r1, r8
    hhcd->hc[ch_num].ErrCnt++;
 8005fb4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fb8:	f042 0202 	orr.w	r2, r2, #2
 8005fbc:	60fa      	str	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005fbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005fc0:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt++;
 8005fc4:	3201      	adds	r2, #1
 8005fc6:	659a      	str	r2, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fc8:	6820      	ldr	r0, [r4, #0]
 8005fca:	f008 ff8f 	bl	800eeec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005fce:	2380      	movs	r3, #128	; 0x80
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	68a1      	ldr	r1, [r4, #8]
 8005fd4:	6820      	ldr	r0, [r4, #0]
 8005fd6:	e646      	b.n	8005c66 <HAL_HCD_IRQHandler+0x1ca>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005fd8:	f85b 000a 	ldr.w	r0, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005fdc:	4672      	mov	r2, lr
 8005fde:	4641      	mov	r1, r8
 8005fe0:	9301      	str	r3, [sp, #4]
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005fe2:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8005fe6:	f84b 000a 	str.w	r0, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005fea:	4620      	mov	r0, r4
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005fec:	f88c e05c 	strb.w	lr, [ip, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ff0:	f017 ffc2 	bl	801df78 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ff4:	9b01      	ldr	r3, [sp, #4]
 8005ff6:	e62b      	b.n	8005c50 <HAL_HCD_IRQHandler+0x1b4>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005ff8:	f88c 205c 	strb.w	r2, [ip, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ffc:	4641      	mov	r1, r8
 8005ffe:	4620      	mov	r0, r4
 8006000:	9301      	str	r3, [sp, #4]
 8006002:	f017 ffb9 	bl	801df78 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006006:	9b01      	ldr	r3, [sp, #4]
 8006008:	e622      	b.n	8005c50 <HAL_HCD_IRQHandler+0x1b4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800600a:	eb08 0288 	add.w	r2, r8, r8, lsl #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800600e:	4641      	mov	r1, r8
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006010:	eb04 08c2 	add.w	r8, r4, r2, lsl #3
 8006014:	f8c8 3058 	str.w	r3, [r8, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f043 0302 	orr.w	r3, r3, #2
 800601e:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006020:	6820      	ldr	r0, [r4, #0]
 8006022:	f008 ff63 	bl	800eeec <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006026:	2301      	movs	r3, #1
 8006028:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800602a:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
 800602e:	68a1      	ldr	r1, [r4, #8]
 8006030:	6820      	ldr	r0, [r4, #0]
 8006032:	e618      	b.n	8005c66 <HAL_HCD_IRQHandler+0x1ca>
      hhcd->hc[ch_num].ErrCnt++;
 8006034:	eb03 0208 	add.w	r2, r3, r8
 8006038:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800603c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800603e:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006040:	2a03      	cmp	r2, #3
 8006042:	d853      	bhi.n	80060ec <HAL_HCD_IRQHandler+0x650>
      hhcd->hc[ch_num].ErrCnt++;
 8006044:	2128      	movs	r1, #40	; 0x28
 8006046:	fb01 4008 	mla	r0, r1, r8, r4
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800604a:	2102      	movs	r1, #2
      hhcd->hc[ch_num].ErrCnt++;
 800604c:	6582      	str	r2, [r0, #88]	; 0x58
 800604e:	eb03 0208 	add.w	r2, r3, r8
 8006052:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006056:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800605a:	f85b 200a 	ldr.w	r2, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800605e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006062:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006066:	f84b 200a 	str.w	r2, [fp, sl]
 800606a:	e69d      	b.n	8005da8 <HAL_HCD_IRQHandler+0x30c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	061a      	lsls	r2, r3, #24
 8006070:	d44f      	bmi.n	8006112 <HAL_HCD_IRQHandler+0x676>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	055b      	lsls	r3, r3, #21
 8006076:	d45f      	bmi.n	8006138 <HAL_HCD_IRQHandler+0x69c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	079a      	lsls	r2, r3, #30
 800607c:	f57f adf3 	bpl.w	8005c66 <HAL_HCD_IRQHandler+0x1ca>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006080:	68fb      	ldr	r3, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006082:	2228      	movs	r2, #40	; 0x28
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006084:	f023 0302 	bic.w	r3, r3, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006088:	fb02 4208 	mla	r2, r2, r8, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800608c:	60fb      	str	r3, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800608e:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
 8006092:	2b01      	cmp	r3, #1
 8006094:	d06b      	beq.n	800616e <HAL_HCD_IRQHandler+0x6d2>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006096:	2b03      	cmp	r3, #3
 8006098:	d064      	beq.n	8006164 <HAL_HCD_IRQHandler+0x6c8>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800609a:	2b04      	cmp	r3, #4
 800609c:	d062      	beq.n	8006164 <HAL_HCD_IRQHandler+0x6c8>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800609e:	2b05      	cmp	r3, #5
 80060a0:	f000 808c 	beq.w	80061bc <HAL_HCD_IRQHandler+0x720>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80060a4:	2b06      	cmp	r3, #6
 80060a6:	d070      	beq.n	800618a <HAL_HCD_IRQHandler+0x6ee>
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d06e      	beq.n	800618a <HAL_HCD_IRQHandler+0x6ee>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060ac:	2328      	movs	r3, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80060ae:	2202      	movs	r2, #2
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060b0:	4641      	mov	r1, r8
 80060b2:	4620      	mov	r0, r4
 80060b4:	fb03 4308 	mla	r3, r3, r8, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80060b8:	60ba      	str	r2, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060ba:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80060be:	f017 ff5b 	bl	801df78 <HAL_HCD_HC_NotifyURBChange_Callback>
 80060c2:	e5fa      	b.n	8005cba <HAL_HCD_IRQHandler+0x21e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80060c4:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060c6:	4641      	mov	r1, r8
    hhcd->hc[ch_num].state = HC_STALL;
 80060c8:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80060cc:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f043 0302 	orr.w	r3, r3, #2
 80060d4:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060d6:	6820      	ldr	r0, [r4, #0]
 80060d8:	f008 ff08 	bl	800eeec <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80060dc:	2205      	movs	r2, #5
 80060de:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
 80060e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80060e6:	68a1      	ldr	r1, [r4, #8]
 80060e8:	6820      	ldr	r0, [r4, #0]
 80060ea:	e5bc      	b.n	8005c66 <HAL_HCD_IRQHandler+0x1ca>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80060ec:	2228      	movs	r2, #40	; 0x28
 80060ee:	2000      	movs	r0, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80060f0:	2104      	movs	r1, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 80060f2:	fb02 4208 	mla	r2, r2, r8, r4
 80060f6:	6590      	str	r0, [r2, #88]	; 0x58
 80060f8:	e7a9      	b.n	800604e <HAL_HCD_IRQHandler+0x5b2>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80060fa:	2228      	movs	r2, #40	; 0x28
 80060fc:	f04f 0102 	mov.w	r1, #2
 8006100:	fb02 4208 	mla	r2, r2, r8, r4
 8006104:	e7a7      	b.n	8006056 <HAL_HCD_IRQHandler+0x5ba>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006106:	2228      	movs	r2, #40	; 0x28
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006108:	4641      	mov	r1, r8
      hhcd->hc[ch_num].ErrCnt = 0U;
 800610a:	fb02 4208 	mla	r2, r2, r8, r4
 800610e:	6593      	str	r3, [r2, #88]	; 0x58
 8006110:	e6e6      	b.n	8005ee0 <HAL_HCD_IRQHandler+0x444>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006112:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006114:	4641      	mov	r1, r8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006116:	f043 0302 	orr.w	r3, r3, #2
 800611a:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800611c:	6820      	ldr	r0, [r4, #0]
 800611e:	f008 fee5 	bl	800eeec <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006122:	2328      	movs	r3, #40	; 0x28
 8006124:	2206      	movs	r2, #6
 8006126:	fb03 4808 	mla	r8, r3, r8, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800612a:	2380      	movs	r3, #128	; 0x80
    hhcd->hc[ch_num].state = HC_XACTERR;
 800612c:	f888 205d 	strb.w	r2, [r8, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	68a1      	ldr	r1, [r4, #8]
 8006134:	6820      	ldr	r0, [r4, #0]
 8006136:	e596      	b.n	8005c66 <HAL_HCD_IRQHandler+0x1ca>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006138:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800613a:	4641      	mov	r1, r8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800613c:	f043 0302 	orr.w	r3, r3, #2
 8006140:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006142:	6820      	ldr	r0, [r4, #0]
 8006144:	f008 fed2 	bl	800eeec <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006148:	2328      	movs	r3, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800614a:	2110      	movs	r1, #16
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800614c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006150:	fb03 4808 	mla	r8, r3, r8, r4
 8006154:	2308      	movs	r3, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006156:	60b9      	str	r1, [r7, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006158:	60ba      	str	r2, [r7, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800615a:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
 800615e:	68a1      	ldr	r1, [r4, #8]
 8006160:	6820      	ldr	r0, [r4, #0]
 8006162:	e580      	b.n	8005c66 <HAL_HCD_IRQHandler+0x1ca>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006164:	f04f 0302 	mov.w	r3, #2
 8006168:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
 800616c:	e79e      	b.n	80060ac <HAL_HCD_IRQHandler+0x610>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800616e:	f892 103f 	ldrb.w	r1, [r2, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006172:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006176:	1e8b      	subs	r3, r1, #2
 8006178:	2b01      	cmp	r3, #1
 800617a:	d897      	bhi.n	80060ac <HAL_HCD_IRQHandler+0x610>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800617c:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8006180:	f083 0301 	eor.w	r3, r3, #1
 8006184:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
 8006188:	e790      	b.n	80060ac <HAL_HCD_IRQHandler+0x610>
      hhcd->hc[ch_num].ErrCnt++;
 800618a:	2328      	movs	r3, #40	; 0x28
 800618c:	fb03 4208 	mla	r2, r3, r8, r4
 8006190:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006192:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006194:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 8006196:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006198:	d913      	bls.n	80061c2 <HAL_HCD_IRQHandler+0x726>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800619a:	2100      	movs	r1, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800619c:	2304      	movs	r3, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 800619e:	6591      	str	r1, [r2, #88]	; 0x58
 80061a0:	2228      	movs	r2, #40	; 0x28
 80061a2:	fb02 4208 	mla	r2, r2, r8, r4
 80061a6:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061aa:	f85b 300a 	ldr.w	r3, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061b6:	f84b 300a 	str.w	r3, [fp, sl]
 80061ba:	e777      	b.n	80060ac <HAL_HCD_IRQHandler+0x610>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80061bc:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
 80061c0:	e774      	b.n	80060ac <HAL_HCD_IRQHandler+0x610>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80061c2:	2302      	movs	r3, #2
 80061c4:	e7ec      	b.n	80061a0 <HAL_HCD_IRQHandler+0x704>
 80061c6:	bf00      	nop

080061c8 <HAL_HCD_Start>:
{
 80061c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 80061ca:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d00e      	beq.n	80061f0 <HAL_HCD_Start+0x28>
 80061d2:	4604      	mov	r4, r0
 80061d4:	2501      	movs	r5, #1
  __HAL_HCD_ENABLE(hhcd);
 80061d6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hhcd);
 80061d8:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80061dc:	f008 fbd8 	bl	800e990 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80061e0:	4629      	mov	r1, r5
 80061e2:	6820      	ldr	r0, [r4, #0]
 80061e4:	f008 fcf0 	bl	800ebc8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80061e8:	2000      	movs	r0, #0
 80061ea:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 80061f0:	2002      	movs	r0, #2
}
 80061f2:	bd38      	pop	{r3, r4, r5, pc}

080061f4 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 80061f4:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d00b      	beq.n	8006214 <HAL_HCD_Stop+0x20>
 80061fc:	2301      	movs	r3, #1
{
 80061fe:	b510      	push	{r4, lr}
 8006200:	4604      	mov	r4, r0
  (void)USB_StopHost(hhcd->Instance);
 8006202:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hhcd);
 8006204:	f884 32b8 	strb.w	r3, [r4, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8006208:	f008 fec8 	bl	800ef9c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800620c:	2000      	movs	r0, #0
 800620e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8006212:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8006214:	2002      	movs	r0, #2
}
 8006216:	4770      	bx	lr

08006218 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8006218:	6800      	ldr	r0, [r0, #0]
 800621a:	f008 bcb5 	b.w	800eb88 <USB_ResetPort>
 800621e:	bf00      	nop

08006220 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8006220:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006224:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8006228:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop

08006230 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8006230:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006234:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8006238:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800623a:	4770      	bx	lr

0800623c <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 800623c:	6800      	ldr	r0, [r0, #0]
 800623e:	f008 bcf3 	b.w	800ec28 <USB_GetCurrentFrame>
 8006242:	bf00      	nop

08006244 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8006244:	6800      	ldr	r0, [r0, #0]
 8006246:	f008 bce3 	b.w	800ec10 <USB_GetHostSpeed>
 800624a:	bf00      	nop

0800624c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	4604      	mov	r4, r0
 8006250:	460d      	mov	r5, r1
 8006252:	4616      	mov	r6, r2
 8006254:	1c6b      	adds	r3, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006256:	6822      	ldr	r2, [r4, #0]
 8006258:	d12e      	bne.n	80062b8 <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
 800625a:	6993      	ldr	r3, [r2, #24]
 800625c:	0798      	lsls	r0, r3, #30
 800625e:	d42e      	bmi.n	80062be <I2C_WaitOnTXISFlagUntilTimeout+0x72>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006260:	6993      	ldr	r3, [r2, #24]
 8006262:	06d9      	lsls	r1, r3, #27
 8006264:	d5f9      	bpl.n	800625a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006266:	6993      	ldr	r3, [r2, #24]
 8006268:	069d      	lsls	r5, r3, #26
 800626a:	d5fc      	bpl.n	8006266 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800626c:	2310      	movs	r3, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800626e:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006270:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	0791      	lsls	r1, r2, #30
 800627c:	d502      	bpl.n	8006284 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
    hi2c->Instance->TXDR = 0x00U;
 800627e:	2200      	movs	r2, #0
 8006280:	629a      	str	r2, [r3, #40]	; 0x28
 8006282:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	07d2      	lsls	r2, r2, #31
 8006288:	d404      	bmi.n	8006294 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800628a:	699a      	ldr	r2, [r3, #24]
 800628c:	f042 0201 	orr.w	r2, r2, #1
 8006290:	619a      	str	r2, [r3, #24]
 8006292:	6823      	ldr	r3, [r4, #0]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006294:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006296:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8006298:	4e1b      	ldr	r6, [pc, #108]	; (8006308 <I2C_WaitOnTXISFlagUntilTimeout+0xbc>)
    hi2c->State = HAL_I2C_STATE_READY;
 800629a:	2520      	movs	r5, #32
      return HAL_ERROR;
 800629c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800629e:	4032      	ands	r2, r6
 80062a0:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062a2:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062a4:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062a8:	f043 0304 	orr.w	r3, r3, #4
 80062ac:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80062ae:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b2:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062b8:	6993      	ldr	r3, [r2, #24]
 80062ba:	079b      	lsls	r3, r3, #30
 80062bc:	d501      	bpl.n	80062c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  return HAL_OK;
 80062be:	2000      	movs	r0, #0
}
 80062c0:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062c2:	6993      	ldr	r3, [r2, #24]
 80062c4:	06db      	lsls	r3, r3, #27
 80062c6:	d407      	bmi.n	80062d8 <I2C_WaitOnTXISFlagUntilTimeout+0x8c>
 80062c8:	e00a      	b.n	80062e0 <I2C_WaitOnTXISFlagUntilTimeout+0x94>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ca:	f7fa fba9 	bl	8000a20 <HAL_GetTick>
 80062ce:	1b80      	subs	r0, r0, r6
 80062d0:	4285      	cmp	r5, r0
 80062d2:	d30c      	bcc.n	80062ee <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 80062d4:	b15d      	cbz	r5, 80062ee <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 80062d6:	6822      	ldr	r2, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062d8:	6993      	ldr	r3, [r2, #24]
 80062da:	0698      	lsls	r0, r3, #26
 80062dc:	d5f5      	bpl.n	80062ca <I2C_WaitOnTXISFlagUntilTimeout+0x7e>
 80062de:	e7c5      	b.n	800626c <I2C_WaitOnTXISFlagUntilTimeout+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e0:	f7fa fb9e 	bl	8000a20 <HAL_GetTick>
 80062e4:	1b80      	subs	r0, r0, r6
 80062e6:	42a8      	cmp	r0, r5
 80062e8:	d801      	bhi.n	80062ee <I2C_WaitOnTXISFlagUntilTimeout+0xa2>
 80062ea:	2d00      	cmp	r5, #0
 80062ec:	d1b2      	bne.n	8006254 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062f0:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062f2:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 80062f4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062f6:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80062f8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062fc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062fe:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006302:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8006306:	bd70      	pop	{r4, r5, r6, pc}
 8006308:	fe00e800 	.word	0xfe00e800

0800630c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	4604      	mov	r4, r0
 8006310:	460d      	mov	r5, r1
 8006312:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006314:	6822      	ldr	r2, [r4, #0]
 8006316:	6993      	ldr	r3, [r2, #24]
 8006318:	069b      	lsls	r3, r3, #26
 800631a:	d44d      	bmi.n	80063b8 <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800631c:	6993      	ldr	r3, [r2, #24]
 800631e:	06d9      	lsls	r1, r3, #27
 8006320:	d52a      	bpl.n	8006378 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
 8006322:	1c6b      	adds	r3, r5, #1
 8006324:	d13c      	bne.n	80063a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x94>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006326:	6993      	ldr	r3, [r2, #24]
 8006328:	069d      	lsls	r5, r3, #26
 800632a:	d5fc      	bpl.n	8006326 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800632c:	2310      	movs	r3, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800632e:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006330:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	0791      	lsls	r1, r2, #30
 800633c:	d502      	bpl.n	8006344 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
    hi2c->Instance->TXDR = 0x00U;
 800633e:	2200      	movs	r2, #0
 8006340:	629a      	str	r2, [r3, #40]	; 0x28
 8006342:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	07d2      	lsls	r2, r2, #31
 8006348:	d404      	bmi.n	8006354 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800634a:	699a      	ldr	r2, [r3, #24]
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	619a      	str	r2, [r3, #24]
 8006352:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8006354:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006356:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8006358:	4e18      	ldr	r6, [pc, #96]	; (80063bc <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>)
    hi2c->State = HAL_I2C_STATE_READY;
 800635a:	2520      	movs	r5, #32
      return HAL_ERROR;
 800635c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800635e:	4032      	ands	r2, r6
 8006360:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006362:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8006364:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006368:	f043 0304 	orr.w	r3, r3, #4
 800636c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800636e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006372:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8006376:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006378:	f7fa fb52 	bl	8000a20 <HAL_GetTick>
 800637c:	1b80      	subs	r0, r0, r6
 800637e:	42a8      	cmp	r0, r5
 8006380:	d801      	bhi.n	8006386 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 8006382:	2d00      	cmp	r5, #0
 8006384:	d1c6      	bne.n	8006314 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006386:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006388:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800638a:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800638c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800638e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8006390:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006394:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006396:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800639a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800639e:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063a0:	6993      	ldr	r3, [r2, #24]
 80063a2:	0698      	lsls	r0, r3, #26
 80063a4:	d4c2      	bmi.n	800632c <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a6:	f7fa fb3b 	bl	8000a20 <HAL_GetTick>
 80063aa:	1b80      	subs	r0, r0, r6
 80063ac:	4285      	cmp	r5, r0
 80063ae:	d3ea      	bcc.n	8006386 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 80063b0:	2d00      	cmp	r5, #0
 80063b2:	d0e8      	beq.n	8006386 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
 80063b4:	6822      	ldr	r2, [r4, #0]
 80063b6:	e7b4      	b.n	8006322 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80063b8:	2000      	movs	r0, #0
}
 80063ba:	bd70      	pop	{r4, r5, r6, pc}
 80063bc:	fe00e800 	.word	0xfe00e800

080063c0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80063c0:	2800      	cmp	r0, #0
 80063c2:	f000 80d2 	beq.w	800656a <HAL_I2C_Init+0x1aa>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80063c6:	496f      	ldr	r1, [pc, #444]	; (8006584 <HAL_I2C_Init+0x1c4>)
{
 80063c8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80063ca:	4b6f      	ldr	r3, [pc, #444]	; (8006588 <HAL_I2C_Init+0x1c8>)
 80063cc:	4604      	mov	r4, r0
 80063ce:	6802      	ldr	r2, [r0, #0]
 80063d0:	486e      	ldr	r0, [pc, #440]	; (800658c <HAL_I2C_Init+0x1cc>)
 80063d2:	429a      	cmp	r2, r3
 80063d4:	bf18      	it	ne
 80063d6:	4282      	cmpne	r2, r0
 80063d8:	bf14      	ite	ne
 80063da:	2301      	movne	r3, #1
 80063dc:	2300      	moveq	r3, #0
 80063de:	428a      	cmp	r2, r1
 80063e0:	bf0c      	ite	eq
 80063e2:	2300      	moveq	r3, #0
 80063e4:	f003 0301 	andne.w	r3, r3, #1
 80063e8:	b11b      	cbz	r3, 80063f2 <HAL_I2C_Init+0x32>
 80063ea:	4b69      	ldr	r3, [pc, #420]	; (8006590 <HAL_I2C_Init+0x1d0>)
 80063ec:	429a      	cmp	r2, r3
 80063ee:	f040 80be 	bne.w	800656e <HAL_I2C_Init+0x1ae>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80063f2:	68a3      	ldr	r3, [r4, #8]
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f8:	d271      	bcs.n	80064de <HAL_I2C_Init+0x11e>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80063fa:	68e3      	ldr	r3, [r4, #12]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d85e      	bhi.n	80064c0 <HAL_I2C_Init+0x100>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006402:	6923      	ldr	r3, [r4, #16]
 8006404:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8006408:	d17c      	bne.n	8006504 <HAL_I2C_Init+0x144>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800640a:	6963      	ldr	r3, [r4, #20]
 800640c:	2bff      	cmp	r3, #255	; 0xff
 800640e:	d870      	bhi.n	80064f2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8006410:	69a3      	ldr	r3, [r4, #24]
 8006412:	2b07      	cmp	r3, #7
 8006414:	f200 809e 	bhi.w	8006554 <HAL_I2C_Init+0x194>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006418:	69e3      	ldr	r3, [r4, #28]
 800641a:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800641e:	f040 808e 	bne.w	800653e <HAL_I2C_Init+0x17e>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006422:	6a23      	ldr	r3, [r4, #32]
 8006424:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8006428:	d17c      	bne.n	8006524 <HAL_I2C_Init+0x164>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800642a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800642e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006432:	2b00      	cmp	r3, #0
 8006434:	d070      	beq.n	8006518 <HAL_I2C_Init+0x158>
  __HAL_I2C_DISABLE(hi2c);
 8006436:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006438:	2324      	movs	r3, #36	; 0x24
 800643a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800643e:	6813      	ldr	r3, [r2, #0]
 8006440:	f023 0301 	bic.w	r3, r3, #1
 8006444:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006446:	e9d4 2300 	ldrd	r2, r3, [r4]
 800644a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800644e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006450:	6822      	ldr	r2, [r4, #0]
 8006452:	6893      	ldr	r3, [r2, #8]
 8006454:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006458:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800645a:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800645c:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800645e:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006460:	68a3      	ldr	r3, [r4, #8]
 8006462:	bf0c      	ite	eq
 8006464:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006468:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 800646c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800646e:	68e3      	ldr	r3, [r4, #12]
 8006470:	6825      	ldr	r5, [r4, #0]
 8006472:	2b02      	cmp	r3, #2
 8006474:	d02e      	beq.n	80064d4 <HAL_I2C_Init+0x114>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006476:	6868      	ldr	r0, [r5, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006478:	2200      	movs	r2, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800647a:	4b46      	ldr	r3, [pc, #280]	; (8006594 <HAL_I2C_Init+0x1d4>)
  hi2c->State = HAL_I2C_STATE_READY;
 800647c:	2120      	movs	r1, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800647e:	4303      	orrs	r3, r0
  return HAL_OK;
 8006480:	4610      	mov	r0, r2
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006482:	606b      	str	r3, [r5, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006484:	6825      	ldr	r5, [r4, #0]
 8006486:	68eb      	ldr	r3, [r5, #12]
 8006488:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800648c:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800648e:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
 8006492:	432b      	orrs	r3, r5
 8006494:	69a5      	ldr	r5, [r4, #24]
 8006496:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800649a:	6825      	ldr	r5, [r4, #0]
 800649c:	60eb      	str	r3, [r5, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800649e:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 80064a2:	432b      	orrs	r3, r5
 80064a4:	6825      	ldr	r5, [r4, #0]
 80064a6:	602b      	str	r3, [r5, #0]
  __HAL_I2C_ENABLE(hi2c);
 80064a8:	6825      	ldr	r5, [r4, #0]
 80064aa:	682b      	ldr	r3, [r5, #0]
 80064ac:	f043 0301 	orr.w	r3, r3, #1
 80064b0:	602b      	str	r3, [r5, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064b2:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064b4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064b8:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ba:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80064be:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80064c0:	f240 11e3 	movw	r1, #483	; 0x1e3
 80064c4:	4834      	ldr	r0, [pc, #208]	; (8006598 <HAL_I2C_Init+0x1d8>)
 80064c6:	f00d fa3d 	bl	8013944 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80064ca:	6923      	ldr	r3, [r4, #16]
 80064cc:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80064d0:	d09b      	beq.n	800640a <HAL_I2C_Init+0x4a>
 80064d2:	e017      	b.n	8006504 <HAL_I2C_Init+0x144>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064d8:	606b      	str	r3, [r5, #4]
 80064da:	6825      	ldr	r5, [r4, #0]
 80064dc:	e7cb      	b.n	8006476 <HAL_I2C_Init+0xb6>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80064de:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80064e2:	482d      	ldr	r0, [pc, #180]	; (8006598 <HAL_I2C_Init+0x1d8>)
 80064e4:	f00d fa2e 	bl	8013944 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80064e8:	68e3      	ldr	r3, [r4, #12]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d988      	bls.n	8006402 <HAL_I2C_Init+0x42>
 80064f0:	e7e6      	b.n	80064c0 <HAL_I2C_Init+0x100>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80064f2:	f240 11e5 	movw	r1, #485	; 0x1e5
 80064f6:	4828      	ldr	r0, [pc, #160]	; (8006598 <HAL_I2C_Init+0x1d8>)
 80064f8:	f00d fa24 	bl	8013944 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80064fc:	69a3      	ldr	r3, [r4, #24]
 80064fe:	2b07      	cmp	r3, #7
 8006500:	d98a      	bls.n	8006418 <HAL_I2C_Init+0x58>
 8006502:	e027      	b.n	8006554 <HAL_I2C_Init+0x194>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006504:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8006508:	4823      	ldr	r0, [pc, #140]	; (8006598 <HAL_I2C_Init+0x1d8>)
 800650a:	f00d fa1b 	bl	8013944 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800650e:	6963      	ldr	r3, [r4, #20]
 8006510:	2bff      	cmp	r3, #255	; 0xff
 8006512:	f67f af7d 	bls.w	8006410 <HAL_I2C_Init+0x50>
 8006516:	e7ec      	b.n	80064f2 <HAL_I2C_Init+0x132>
    hi2c->Lock = HAL_UNLOCKED;
 8006518:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800651c:	4620      	mov	r0, r4
 800651e:	f00c fe89 	bl	8013234 <HAL_I2C_MspInit>
 8006522:	e788      	b.n	8006436 <HAL_I2C_Init+0x76>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006524:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8006528:	481b      	ldr	r0, [pc, #108]	; (8006598 <HAL_I2C_Init+0x1d8>)
 800652a:	f00d fa0b 	bl	8013944 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800652e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006532:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006536:	2b00      	cmp	r3, #0
 8006538:	f47f af7d 	bne.w	8006436 <HAL_I2C_Init+0x76>
 800653c:	e7ec      	b.n	8006518 <HAL_I2C_Init+0x158>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800653e:	f240 11e7 	movw	r1, #487	; 0x1e7
 8006542:	4815      	ldr	r0, [pc, #84]	; (8006598 <HAL_I2C_Init+0x1d8>)
 8006544:	f00d f9fe 	bl	8013944 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006548:	6a23      	ldr	r3, [r4, #32]
 800654a:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800654e:	f43f af6c 	beq.w	800642a <HAL_I2C_Init+0x6a>
 8006552:	e7e7      	b.n	8006524 <HAL_I2C_Init+0x164>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8006554:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8006558:	480f      	ldr	r0, [pc, #60]	; (8006598 <HAL_I2C_Init+0x1d8>)
 800655a:	f00d f9f3 	bl	8013944 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800655e:	69e3      	ldr	r3, [r4, #28]
 8006560:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8006564:	f43f af5d 	beq.w	8006422 <HAL_I2C_Init+0x62>
 8006568:	e7e9      	b.n	800653e <HAL_I2C_Init+0x17e>
    return HAL_ERROR;
 800656a:	2001      	movs	r0, #1
}
 800656c:	4770      	bx	lr
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800656e:	f240 11e1 	movw	r1, #481	; 0x1e1
 8006572:	4809      	ldr	r0, [pc, #36]	; (8006598 <HAL_I2C_Init+0x1d8>)
 8006574:	f00d f9e6 	bl	8013944 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006578:	68a3      	ldr	r3, [r4, #8]
 800657a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657e:	f4ff af3c 	bcc.w	80063fa <HAL_I2C_Init+0x3a>
 8006582:	e7ac      	b.n	80064de <HAL_I2C_Init+0x11e>
 8006584:	40005c00 	.word	0x40005c00
 8006588:	40005400 	.word	0x40005400
 800658c:	40005800 	.word	0x40005800
 8006590:	58001c00 	.word	0x58001c00
 8006594:	02008000 	.word	0x02008000
 8006598:	08144ed0 	.word	0x08144ed0

0800659c <HAL_I2C_Master_Transmit>:
{
 800659c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80065a0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 80065a4:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80065a6:	2c20      	cmp	r4, #32
 80065a8:	f040 80a1 	bne.w	80066ee <HAL_I2C_Master_Transmit+0x152>
    __HAL_LOCK(hi2c);
 80065ac:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80065b0:	2c01      	cmp	r4, #1
 80065b2:	f000 809c 	beq.w	80066ee <HAL_I2C_Master_Transmit+0x152>
 80065b6:	4698      	mov	r8, r3
 80065b8:	2301      	movs	r3, #1
 80065ba:	4691      	mov	r9, r2
 80065bc:	460f      	mov	r7, r1
 80065be:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80065c2:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80065c4:	f7fa fa2c 	bl	8000a20 <HAL_GetTick>
 80065c8:	4605      	mov	r5, r0
 80065ca:	e005      	b.n	80065d8 <HAL_I2C_Master_Transmit+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065cc:	f7fa fa28 	bl	8000a20 <HAL_GetTick>
 80065d0:	1b40      	subs	r0, r0, r5
 80065d2:	2819      	cmp	r0, #25
 80065d4:	f200 80a6 	bhi.w	8006724 <HAL_I2C_Master_Transmit+0x188>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	6998      	ldr	r0, [r3, #24]
 80065dc:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 80065e0:	d1f4      	bne.n	80065cc <HAL_I2C_Master_Transmit+0x30>
 80065e2:	4a78      	ldr	r2, [pc, #480]	; (80067c4 <HAL_I2C_Master_Transmit+0x228>)
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065e4:	f04f 0c21 	mov.w	ip, #33	; 0x21
 80065e8:	4977      	ldr	r1, [pc, #476]	; (80067c8 <HAL_I2C_Master_Transmit+0x22c>)
 80065ea:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
 80065ee:	4293      	cmp	r3, r2
 80065f0:	bf18      	it	ne
 80065f2:	428b      	cmpne	r3, r1
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80065f4:	f04f 0110 	mov.w	r1, #16
 80065f8:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 80067d8 <HAL_I2C_Master_Transmit+0x23c>
 80065fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006600:	bf14      	ite	ne
 8006602:	2201      	movne	r2, #1
 8006604:	2200      	moveq	r2, #0
 8006606:	4971      	ldr	r1, [pc, #452]	; (80067cc <HAL_I2C_Master_Transmit+0x230>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006608:	6460      	str	r0, [r4, #68]	; 0x44
 800660a:	428b      	cmp	r3, r1
 800660c:	bf0c      	ite	eq
 800660e:	2200      	moveq	r2, #0
 8006610:	f002 0201 	andne.w	r2, r2, #1
    hi2c->XferCount = Size;
 8006614:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006618:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800661a:	4563      	cmp	r3, ip
 800661c:	bf0c      	ite	eq
 800661e:	2200      	moveq	r2, #0
 8006620:	f002 0201 	andne.w	r2, r2, #1
    hi2c->pBuffPtr  = pData;
 8006624:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006628:	29ff      	cmp	r1, #255	; 0xff
    hi2c->XferISR   = NULL;
 800662a:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800662c:	d862      	bhi.n	80066f4 <HAL_I2C_Master_Transmit+0x158>
      hi2c->XferSize = hi2c->XferCount;
 800662e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8006630:	b289      	uxth	r1, r1
 8006632:	8521      	strh	r1, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006634:	fa5f f881 	uxtb.w	r8, r1
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006638:	2a00      	cmp	r2, #0
 800663a:	f040 80b5 	bne.w	80067a8 <HAL_I2C_Master_Transmit+0x20c>
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800663e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006642:	4a63      	ldr	r2, [pc, #396]	; (80067d0 <HAL_I2C_Master_Transmit+0x234>)
 8006644:	6859      	ldr	r1, [r3, #4]
 8006646:	433a      	orrs	r2, r7
 8006648:	4862      	ldr	r0, [pc, #392]	; (80067d4 <HAL_I2C_Master_Transmit+0x238>)
 800664a:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 800664e:	4001      	ands	r1, r0
 8006650:	430a      	orrs	r2, r1
 8006652:	605a      	str	r2, [r3, #4]
 8006654:	f8df 8194 	ldr.w	r8, [pc, #404]	; 80067ec <HAL_I2C_Master_Transmit+0x250>
 8006658:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80067c8 <HAL_I2C_Master_Transmit+0x22c>
 800665c:	ea47 0808 	orr.w	r8, r7, r8
    while (hi2c->XferCount > 0U)
 8006660:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006662:	462a      	mov	r2, r5
 8006664:	4631      	mov	r1, r6
 8006666:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d07b      	beq.n	8006766 <HAL_I2C_Master_Transmit+0x1ca>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800666e:	f7ff fded 	bl	800624c <I2C_WaitOnTXISFlagUntilTimeout>
 8006672:	2800      	cmp	r0, #0
 8006674:	d174      	bne.n	8006760 <HAL_I2C_Master_Transmit+0x1c4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006676:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	7812      	ldrb	r2, [r2, #0]
 800667c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800667e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006680:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006682:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8006684:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006686:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8006688:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800668a:	3201      	adds	r2, #1
      hi2c->XferSize--;
 800668c:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800668e:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006690:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006692:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006694:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8006696:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e1      	bne.n	8006660 <HAL_I2C_Master_Transmit+0xc4>
 800669c:	2900      	cmp	r1, #0
 800669e:	d0df      	beq.n	8006660 <HAL_I2C_Master_Transmit+0xc4>
 80066a0:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066a2:	6822      	ldr	r2, [r4, #0]
 80066a4:	d134      	bne.n	8006710 <HAL_I2C_Master_Transmit+0x174>
 80066a6:	6993      	ldr	r3, [r2, #24]
 80066a8:	0619      	lsls	r1, r3, #24
 80066aa:	d5fc      	bpl.n	80066a6 <HAL_I2C_Master_Transmit+0x10a>
 80066ac:	4b4a      	ldr	r3, [pc, #296]	; (80067d8 <HAL_I2C_Master_Transmit+0x23c>)
 80066ae:	4947      	ldr	r1, [pc, #284]	; (80067cc <HAL_I2C_Master_Transmit+0x230>)
 80066b0:	454a      	cmp	r2, r9
 80066b2:	bf18      	it	ne
 80066b4:	429a      	cmpne	r2, r3
 80066b6:	4843      	ldr	r0, [pc, #268]	; (80067c4 <HAL_I2C_Master_Transmit+0x228>)
 80066b8:	bf14      	ite	ne
 80066ba:	2301      	movne	r3, #1
 80066bc:	2300      	moveq	r3, #0
 80066be:	428a      	cmp	r2, r1
 80066c0:	bf0c      	ite	eq
 80066c2:	2300      	moveq	r3, #0
 80066c4:	f003 0301 	andne.w	r3, r3, #1
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066c8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80066ca:	4282      	cmp	r2, r0
 80066cc:	bf0c      	ite	eq
 80066ce:	2300      	moveq	r3, #0
 80066d0:	f003 0301 	andne.w	r3, r3, #1
 80066d4:	29ff      	cmp	r1, #255	; 0xff
 80066d6:	d933      	bls.n	8006740 <HAL_I2C_Master_Transmit+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066d8:	21ff      	movs	r1, #255	; 0xff
 80066da:	8521      	strh	r1, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d155      	bne.n	800678c <HAL_I2C_Master_Transmit+0x1f0>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80066e0:	6853      	ldr	r3, [r2, #4]
 80066e2:	493e      	ldr	r1, [pc, #248]	; (80067dc <HAL_I2C_Master_Transmit+0x240>)
 80066e4:	400b      	ands	r3, r1
 80066e6:	ea43 0308 	orr.w	r3, r3, r8
 80066ea:	6053      	str	r3, [r2, #4]
 80066ec:	e7b8      	b.n	8006660 <HAL_I2C_Master_Transmit+0xc4>
    return HAL_BUSY;
 80066ee:	2002      	movs	r0, #2
}
 80066f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066f4:	21ff      	movs	r1, #255	; 0xff
 80066f6:	8521      	strh	r1, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80066f8:	2a00      	cmp	r2, #0
 80066fa:	d15c      	bne.n	80067b6 <HAL_I2C_Master_Transmit+0x21a>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006702:	4937      	ldr	r1, [pc, #220]	; (80067e0 <HAL_I2C_Master_Transmit+0x244>)
 8006704:	4833      	ldr	r0, [pc, #204]	; (80067d4 <HAL_I2C_Master_Transmit+0x238>)
 8006706:	4339      	orrs	r1, r7
 8006708:	4002      	ands	r2, r0
 800670a:	430a      	orrs	r2, r1
 800670c:	605a      	str	r2, [r3, #4]
 800670e:	e7a1      	b.n	8006654 <HAL_I2C_Master_Transmit+0xb8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006710:	6993      	ldr	r3, [r2, #24]
 8006712:	061b      	lsls	r3, r3, #24
 8006714:	d4ca      	bmi.n	80066ac <HAL_I2C_Master_Transmit+0x110>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006716:	f7fa f983 	bl	8000a20 <HAL_GetTick>
 800671a:	1b40      	subs	r0, r0, r5
 800671c:	4286      	cmp	r6, r0
 800671e:	d301      	bcc.n	8006724 <HAL_I2C_Master_Transmit+0x188>
 8006720:	2e00      	cmp	r6, #0
 8006722:	d1bd      	bne.n	80066a0 <HAL_I2C_Master_Transmit+0x104>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006724:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006726:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006728:	2200      	movs	r2, #0
          return HAL_ERROR;
 800672a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800672c:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800672e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006732:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006734:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006738:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800673c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          hi2c->XferSize = hi2c->XferCount;
 8006740:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8006742:	b289      	uxth	r1, r1
 8006744:	8521      	strh	r1, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006746:	fa5f fa81 	uxtb.w	sl, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800674a:	bb33      	cbnz	r3, 800679a <HAL_I2C_Master_Transmit+0x1fe>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800674c:	6851      	ldr	r1, [r2, #4]
 800674e:	ea47 430a 	orr.w	r3, r7, sl, lsl #16
 8006752:	4822      	ldr	r0, [pc, #136]	; (80067dc <HAL_I2C_Master_Transmit+0x240>)
 8006754:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006758:	4001      	ands	r1, r0
 800675a:	430b      	orrs	r3, r1
 800675c:	6053      	str	r3, [r2, #4]
 800675e:	e77f      	b.n	8006660 <HAL_I2C_Master_Transmit+0xc4>
        return HAL_ERROR;
 8006760:	2001      	movs	r0, #1
}
 8006762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006766:	f7ff fdd1 	bl	800630c <I2C_WaitOnSTOPFlagUntilTimeout>
 800676a:	2800      	cmp	r0, #0
 800676c:	d1f8      	bne.n	8006760 <HAL_I2C_Master_Transmit+0x1c4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 8006772:	4d1c      	ldr	r5, [pc, #112]	; (80067e4 <HAL_I2C_Master_Transmit+0x248>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006774:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006776:	6821      	ldr	r1, [r4, #0]
 8006778:	684b      	ldr	r3, [r1, #4]
 800677a:	402b      	ands	r3, r5
 800677c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800677e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006782:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006786:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800678a:	e7b1      	b.n	80066f0 <HAL_I2C_Master_Transmit+0x154>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800678c:	f641 1131 	movw	r1, #6449	; 0x1931
 8006790:	4815      	ldr	r0, [pc, #84]	; (80067e8 <HAL_I2C_Master_Transmit+0x24c>)
 8006792:	f00d f8d7 	bl	8013944 <assert_failed>
 8006796:	6822      	ldr	r2, [r4, #0]
 8006798:	e7a2      	b.n	80066e0 <HAL_I2C_Master_Transmit+0x144>
 800679a:	f641 1131 	movw	r1, #6449	; 0x1931
 800679e:	4812      	ldr	r0, [pc, #72]	; (80067e8 <HAL_I2C_Master_Transmit+0x24c>)
 80067a0:	f00d f8d0 	bl	8013944 <assert_failed>
 80067a4:	6822      	ldr	r2, [r4, #0]
 80067a6:	e7d1      	b.n	800674c <HAL_I2C_Master_Transmit+0x1b0>
 80067a8:	f641 1131 	movw	r1, #6449	; 0x1931
 80067ac:	480e      	ldr	r0, [pc, #56]	; (80067e8 <HAL_I2C_Master_Transmit+0x24c>)
 80067ae:	f00d f8c9 	bl	8013944 <assert_failed>
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	e743      	b.n	800663e <HAL_I2C_Master_Transmit+0xa2>
 80067b6:	f641 1131 	movw	r1, #6449	; 0x1931
 80067ba:	480b      	ldr	r0, [pc, #44]	; (80067e8 <HAL_I2C_Master_Transmit+0x24c>)
 80067bc:	f00d f8c2 	bl	8013944 <assert_failed>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	e79b      	b.n	80066fc <HAL_I2C_Master_Transmit+0x160>
 80067c4:	40005c00 	.word	0x40005c00
 80067c8:	40005400 	.word	0x40005400
 80067cc:	40005800 	.word	0x40005800
 80067d0:	82002000 	.word	0x82002000
 80067d4:	fc009800 	.word	0xfc009800
 80067d8:	58001c00 	.word	0x58001c00
 80067dc:	fc009c00 	.word	0xfc009c00
 80067e0:	81ff2000 	.word	0x81ff2000
 80067e4:	fe00e800 	.word	0xfe00e800
 80067e8:	08144ed0 	.word	0x08144ed0
 80067ec:	01ff0000 	.word	0x01ff0000

080067f0 <HAL_I2C_Master_Transmit_DMA>:
{
 80067f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80067f4:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80067f8:	2c20      	cmp	r4, #32
 80067fa:	d148      	bne.n	800688e <HAL_I2C_Master_Transmit_DMA+0x9e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80067fc:	6807      	ldr	r7, [r0, #0]
 80067fe:	69bd      	ldr	r5, [r7, #24]
 8006800:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
 8006804:	d143      	bne.n	800688e <HAL_I2C_Master_Transmit_DMA+0x9e>
    __HAL_LOCK(hi2c);
 8006806:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800680a:	2c01      	cmp	r4, #1
 800680c:	d03f      	beq.n	800688e <HAL_I2C_Master_Transmit_DMA+0x9e>
 800680e:	4604      	mov	r4, r0
 8006810:	460e      	mov	r6, r1
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006812:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006816:	2110      	movs	r1, #16
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006818:	4868      	ldr	r0, [pc, #416]	; (80069bc <HAL_I2C_Master_Transmit_DMA+0x1cc>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800681a:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800681e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    __HAL_LOCK(hi2c);
 8006822:	2101      	movs	r1, #1
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006824:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8006826:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006828:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800682a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800682c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80069f0 <HAL_I2C_Master_Transmit_DMA+0x200>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006830:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr    = pData;
 8006832:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_LOCK(hi2c);
 8006834:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006838:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800683c:	d92b      	bls.n	8006896 <HAL_I2C_Master_Transmit_DMA+0xa6>
 800683e:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 8006840:	f04f 7980 	mov.w	r9, #16777216	; 0x1000000
 8006844:	8523      	strh	r3, [r4, #40]	; 0x28
      if (hi2c->hdmatx != NULL)
 8006846:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006848:	2b00      	cmp	r3, #0
 800684a:	d058      	beq.n	80068fe <HAL_I2C_Master_Transmit_DMA+0x10e>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800684c:	4d5c      	ldr	r5, [pc, #368]	; (80069c0 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800684e:	2700      	movs	r7, #0
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006850:	485c      	ldr	r0, [pc, #368]	; (80069c4 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006852:	4611      	mov	r1, r2
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8006854:	63dd      	str	r5, [r3, #60]	; 0x3c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006856:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006858:	64d8      	str	r0, [r3, #76]	; 0x4c
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800685a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800685c:	641f      	str	r7, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800685e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006860:	651f      	str	r7, [r3, #80]	; 0x50
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006862:	6822      	ldr	r2, [r4, #0]
 8006864:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006866:	3228      	adds	r2, #40	; 0x28
 8006868:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800686a:	f7fc fdc5 	bl	80033f8 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 800686e:	4605      	mov	r5, r0
 8006870:	2800      	cmp	r0, #0
 8006872:	d05b      	beq.n	800692c <HAL_I2C_Master_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006874:	2320      	movs	r3, #32
        __HAL_UNLOCK(hi2c);
 8006876:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
        return HAL_ERROR;
 800687a:	2501      	movs	r5, #1
        hi2c->State     = HAL_I2C_STATE_READY;
 800687c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006884:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006886:	f043 0310 	orr.w	r3, r3, #16
 800688a:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800688c:	e000      	b.n	8006890 <HAL_I2C_Master_Transmit_DMA+0xa0>
    return HAL_BUSY;
 800688e:	2502      	movs	r5, #2
}
 8006890:	4628      	mov	r0, r5
 8006892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = hi2c->XferCount;
 8006896:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	8523      	strh	r3, [r4, #40]	; 0x28
    if (hi2c->XferSize > 0U)
 800689c:	2b00      	cmp	r3, #0
 800689e:	d13b      	bne.n	8006918 <HAL_I2C_Master_Transmit_DMA+0x128>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80068a0:	4b49      	ldr	r3, [pc, #292]	; (80069c8 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 80068a2:	4a4a      	ldr	r2, [pc, #296]	; (80069cc <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 80068a4:	494a      	ldr	r1, [pc, #296]	; (80069d0 <HAL_I2C_Master_Transmit_DMA+0x1e0>)
 80068a6:	429f      	cmp	r7, r3
 80068a8:	bf18      	it	ne
 80068aa:	4297      	cmpne	r7, r2
      hi2c->XferISR = I2C_Master_ISR_IT;
 80068ac:	4a49      	ldr	r2, [pc, #292]	; (80069d4 <HAL_I2C_Master_Transmit_DMA+0x1e4>)
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80068ae:	bf14      	ite	ne
 80068b0:	2301      	movne	r3, #1
 80068b2:	2300      	moveq	r3, #0
      hi2c->XferISR = I2C_Master_ISR_IT;
 80068b4:	6362      	str	r2, [r4, #52]	; 0x34
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80068b6:	428f      	cmp	r7, r1
 80068b8:	bf0c      	ite	eq
 80068ba:	2300      	moveq	r3, #0
 80068bc:	f003 0301 	andne.w	r3, r3, #1
 80068c0:	b113      	cbz	r3, 80068c8 <HAL_I2C_Master_Transmit_DMA+0xd8>
 80068c2:	4b45      	ldr	r3, [pc, #276]	; (80069d8 <HAL_I2C_Master_Transmit_DMA+0x1e8>)
 80068c4:	429f      	cmp	r7, r3
 80068c6:	d12a      	bne.n	800691e <HAL_I2C_Master_Transmit_DMA+0x12e>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80068c8:	f3c6 0109 	ubfx	r1, r6, #0, #10
 80068cc:	4b43      	ldr	r3, [pc, #268]	; (80069dc <HAL_I2C_Master_Transmit_DMA+0x1ec>)
 80068ce:	687a      	ldr	r2, [r7, #4]
      __HAL_UNLOCK(hi2c);
 80068d0:	2000      	movs	r0, #0
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80068d2:	430b      	orrs	r3, r1
 80068d4:	4942      	ldr	r1, [pc, #264]	; (80069e0 <HAL_I2C_Master_Transmit_DMA+0x1f0>)
 80068d6:	400a      	ands	r2, r1
 80068d8:	4313      	orrs	r3, r2
 80068da:	607b      	str	r3, [r7, #4]
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80068dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 80068de:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80068e2:	4543      	cmp	r3, r8
 80068e4:	d004      	beq.n	80068f0 <HAL_I2C_Master_Transmit_DMA+0x100>
 80068e6:	4a3f      	ldr	r2, [pc, #252]	; (80069e4 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d001      	beq.n	80068f0 <HAL_I2C_Master_Transmit_DMA+0x100>
 80068ec:	21f2      	movs	r1, #242	; 0xf2
 80068ee:	e000      	b.n	80068f2 <HAL_I2C_Master_Transmit_DMA+0x102>
 80068f0:	2100      	movs	r1, #0
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80068f2:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 80068f4:	2500      	movs	r5, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80068f6:	6813      	ldr	r3, [r2, #0]
 80068f8:	430b      	orrs	r3, r1
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	e7c8      	b.n	8006890 <HAL_I2C_Master_Transmit_DMA+0xa0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80068fe:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8006900:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8006904:	2501      	movs	r5, #1
        hi2c->State     = HAL_I2C_STATE_READY;
 8006906:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800690a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800690e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006914:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8006916:	e7bb      	b.n	8006890 <HAL_I2C_Master_Transmit_DMA+0xa0>
      xfermode = I2C_AUTOEND_MODE;
 8006918:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
 800691c:	e793      	b.n	8006846 <HAL_I2C_Master_Transmit_DMA+0x56>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800691e:	f641 1131 	movw	r1, #6449	; 0x1931
 8006922:	4831      	ldr	r0, [pc, #196]	; (80069e8 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8006924:	f00d f80e 	bl	8013944 <assert_failed>
 8006928:	6827      	ldr	r7, [r4, #0]
 800692a:	e7cd      	b.n	80068c8 <HAL_I2C_Master_Transmit_DMA+0xd8>
 800692c:	4b26      	ldr	r3, [pc, #152]	; (80069c8 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 800692e:	6822      	ldr	r2, [r4, #0]
 8006930:	4826      	ldr	r0, [pc, #152]	; (80069cc <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8006932:	4927      	ldr	r1, [pc, #156]	; (80069d0 <HAL_I2C_Master_Transmit_DMA+0x1e0>)
 8006934:	429a      	cmp	r2, r3
 8006936:	bf18      	it	ne
 8006938:	4282      	cmpne	r2, r0
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800693a:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800693e:	bf14      	ite	ne
 8006940:	2301      	movne	r3, #1
 8006942:	2300      	moveq	r3, #0
 8006944:	428a      	cmp	r2, r1
 8006946:	bf0c      	ite	eq
 8006948:	2300      	moveq	r3, #0
 800694a:	f003 0301 	andne.w	r3, r3, #1
 800694e:	b113      	cbz	r3, 8006956 <HAL_I2C_Master_Transmit_DMA+0x166>
 8006950:	4b21      	ldr	r3, [pc, #132]	; (80069d8 <HAL_I2C_Master_Transmit_DMA+0x1e8>)
 8006952:	429a      	cmp	r2, r3
 8006954:	d12a      	bne.n	80069ac <HAL_I2C_Master_Transmit_DMA+0x1bc>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006956:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800695a:	4b24      	ldr	r3, [pc, #144]	; (80069ec <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800695c:	6856      	ldr	r6, [r2, #4]
        __HAL_UNLOCK(hi2c);
 800695e:	2000      	movs	r0, #0
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006960:	430b      	orrs	r3, r1
 8006962:	491f      	ldr	r1, [pc, #124]	; (80069e0 <HAL_I2C_Master_Transmit_DMA+0x1f0>)
 8006964:	400e      	ands	r6, r1
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006966:	491f      	ldr	r1, [pc, #124]	; (80069e4 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006968:	4333      	orrs	r3, r6
 800696a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800696e:	ea43 0309 	orr.w	r3, r3, r9
 8006972:	6053      	str	r3, [r2, #4]
        hi2c->XferCount -= hi2c->XferSize;
 8006974:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006976:	8d26      	ldrh	r6, [r4, #40]	; 0x28
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006978:	6b63      	ldr	r3, [r4, #52]	; 0x34
        hi2c->XferCount -= hi2c->XferSize;
 800697a:	1b92      	subs	r2, r2, r6
        __HAL_UNLOCK(hi2c);
 800697c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006980:	428b      	cmp	r3, r1
        hi2c->XferCount -= hi2c->XferSize;
 8006982:	b292      	uxth	r2, r2
 8006984:	8562      	strh	r2, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006986:	d00f      	beq.n	80069a8 <HAL_I2C_Master_Transmit_DMA+0x1b8>
 8006988:	eba3 0308 	sub.w	r3, r3, r8
 800698c:	fab3 f383 	clz	r3, r3
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	b94b      	cbnz	r3, 80069a8 <HAL_I2C_Master_Transmit_DMA+0x1b8>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006994:	6821      	ldr	r1, [r4, #0]
 8006996:	680a      	ldr	r2, [r1, #0]
 8006998:	4313      	orrs	r3, r2
 800699a:	600b      	str	r3, [r1, #0]
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800699c:	6822      	ldr	r2, [r4, #0]
 800699e:	6813      	ldr	r3, [r2, #0]
 80069a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	e773      	b.n	8006890 <HAL_I2C_Master_Transmit_DMA+0xa0>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80069a8:	2390      	movs	r3, #144	; 0x90
 80069aa:	e7f3      	b.n	8006994 <HAL_I2C_Master_Transmit_DMA+0x1a4>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80069ac:	f641 1131 	movw	r1, #6449	; 0x1931
 80069b0:	480d      	ldr	r0, [pc, #52]	; (80069e8 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80069b2:	f00c ffc7 	bl	8013944 <assert_failed>
 80069b6:	6822      	ldr	r2, [r4, #0]
 80069b8:	e7cd      	b.n	8006956 <HAL_I2C_Master_Transmit_DMA+0x166>
 80069ba:	bf00      	nop
 80069bc:	ffff0000 	.word	0xffff0000
 80069c0:	08007201 	.word	0x08007201
 80069c4:	08007c51 	.word	0x08007c51
 80069c8:	40005400 	.word	0x40005400
 80069cc:	40005800 	.word	0x40005800
 80069d0:	40005c00 	.word	0x40005c00
 80069d4:	0800750d 	.word	0x0800750d
 80069d8:	58001c00 	.word	0x58001c00
 80069dc:	82002000 	.word	0x82002000
 80069e0:	fc009800 	.word	0xfc009800
 80069e4:	08007035 	.word	0x08007035
 80069e8:	08144ed0 	.word	0x08144ed0
 80069ec:	80002000 	.word	0x80002000
 80069f0:	080077e1 	.word	0x080077e1

080069f4 <HAL_I2C_EV_IRQHandler>:
{
 80069f4:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80069f6:	6803      	ldr	r3, [r0, #0]
  if (hi2c->XferISR != NULL)
 80069f8:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80069fa:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80069fc:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80069fe:	b11c      	cbz	r4, 8006a08 <HAL_I2C_EV_IRQHandler+0x14>
    hi2c->XferISR(hi2c, itflags, itsources);
 8006a00:	4623      	mov	r3, r4
}
 8006a02:	f85d 4b04 	ldr.w	r4, [sp], #4
    hi2c->XferISR(hi2c, itflags, itsources);
 8006a06:	4718      	bx	r3
}
 8006a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop

08006a10 <HAL_I2C_MasterTxCpltCallback>:
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop

08006a14 <HAL_I2C_MasterRxCpltCallback>:
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop

08006a18 <HAL_I2C_SlaveTxCpltCallback>:
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop

08006a1c <HAL_I2C_SlaveRxCpltCallback>:
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop

08006a20 <I2C_ITSlaveSeqCplt>:
{
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4603      	mov	r3, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a24:	2000      	movs	r0, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	6811      	ldr	r1, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a2a:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a2e:	0448      	lsls	r0, r1, #17
 8006a30:	d50c      	bpl.n	8006a4c <I2C_ITSlaveSeqCplt+0x2c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a32:	6811      	ldr	r1, [r2, #0]
 8006a34:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8006a38:	6011      	str	r1, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006a3a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8006a3e:	2a29      	cmp	r2, #41	; 0x29
 8006a40:	d00e      	beq.n	8006a60 <I2C_ITSlaveSeqCplt+0x40>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a42:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8006a46:	2a2a      	cmp	r2, #42	; 0x2a
 8006a48:	d024      	beq.n	8006a94 <I2C_ITSlaveSeqCplt+0x74>
}
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006a4c:	0409      	lsls	r1, r1, #16
 8006a4e:	d5f4      	bpl.n	8006a3a <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a50:	6811      	ldr	r1, [r2, #0]
 8006a52:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8006a56:	6011      	str	r1, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006a58:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8006a5c:	2a29      	cmp	r2, #41	; 0x29
 8006a5e:	d1f0      	bne.n	8006a42 <I2C_ITSlaveSeqCplt+0x22>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a60:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a62:	2221      	movs	r2, #33	; 0x21
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a64:	681c      	ldr	r4, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8006a66:	2500      	movs	r5, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a68:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a6c:	4618      	mov	r0, r3
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a6e:	631a      	str	r2, [r3, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a70:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a74:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a76:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8006a7a:	2928      	cmp	r1, #40	; 0x28
 8006a7c:	bf14      	ite	ne
 8006a7e:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 8006a82:	f06f 0142 	mvneq.w	r1, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a86:	400a      	ands	r2, r1
 8006a88:	6022      	str	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8006a8a:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a8e:	f7ff ffc3 	bl	8006a18 <HAL_I2C_SlaveTxCpltCallback>
}
 8006a92:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a94:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a96:	2222      	movs	r2, #34	; 0x22
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a98:	681c      	ldr	r4, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8006a9a:	2500      	movs	r5, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a9c:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006aa0:	4618      	mov	r0, r3
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006aa2:	631a      	str	r2, [r3, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006aa4:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006aa8:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006aaa:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8006aae:	2928      	cmp	r1, #40	; 0x28
 8006ab0:	bf14      	ite	ne
 8006ab2:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8006ab6:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006aba:	400a      	ands	r2, r1
 8006abc:	6022      	str	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8006abe:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ac2:	f7ff ffab 	bl	8006a1c <HAL_I2C_SlaveRxCpltCallback>
}
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}

08006ac8 <HAL_I2C_AddrCallback>:
}
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop

08006acc <I2C_ITAddrCplt.isra.9.part.10>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8006ace:	6804      	ldr	r4, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ad0:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8006ad2:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006ad4:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ad6:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006ad8:	68a6      	ldr	r6, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 8006ada:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006ade:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006ae2:	68e7      	ldr	r7, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006ae4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ae8:	d10d      	bne.n	8006b06 <I2C_ITAddrCplt.isra.9.part.10+0x3a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006aea:	f3c6 0609 	ubfx	r6, r6, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8006aee:	ea82 13d6 	eor.w	r3, r2, r6, lsr #7
 8006af2:	f013 0306 	ands.w	r3, r3, #6
 8006af6:	d110      	bne.n	8006b1a <I2C_ITAddrCplt.isra.9.part.10+0x4e>
        hi2c->AddrEventCount++;
 8006af8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006afa:	3201      	adds	r2, #1
 8006afc:	6482      	str	r2, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006afe:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006b00:	2a02      	cmp	r2, #2
 8006b02:	d016      	beq.n	8006b32 <I2C_ITAddrCplt.isra.9.part.10+0x66>
}
 8006b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b06:	6823      	ldr	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8006b08:	2600      	movs	r6, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b0a:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8006b0e:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8006b10:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b14:	f7ff ffd8 	bl	8006ac8 <HAL_I2C_AddrCallback>
}
 8006b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b1a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);
 8006b1c:	2600      	movs	r6, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b1e:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b22:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8006b26:	6023      	str	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);
 8006b28:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b2c:	f7ff ffcc 	bl	8006ac8 <HAL_I2C_AddrCallback>
}
 8006b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b32:	2708      	movs	r7, #8
          hi2c->AddrEventCount = 0U;
 8006b34:	6483      	str	r3, [r0, #72]	; 0x48
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b36:	4632      	mov	r2, r6
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b38:	61e7      	str	r7, [r4, #28]
          __HAL_UNLOCK(hi2c);
 8006b3a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b3e:	f7ff ffc3 	bl	8006ac8 <HAL_I2C_AddrCallback>
}
 8006b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b44 <HAL_I2C_ListenCpltCallback>:
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop

08006b48 <HAL_I2C_MemTxCpltCallback>:
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop

08006b4c <HAL_I2C_MemRxCpltCallback>:
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop

08006b50 <HAL_I2C_ErrorCallback>:
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop

08006b54 <HAL_I2C_AbortCpltCallback>:
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop

08006b58 <I2C_DMAAbort>:
{
 8006b58:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8006b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b5e:	b10a      	cbz	r2, 8006b64 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006b60:	2100      	movs	r1, #0
 8006b62:	6511      	str	r1, [r2, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8006b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b66:	b10a      	cbz	r2, 8006b6c <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006b68:	2100      	movs	r1, #0
 8006b6a:	6511      	str	r1, [r2, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006b6c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8006b70:	2a60      	cmp	r2, #96	; 0x60
 8006b72:	d007      	beq.n	8006b84 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b74:	2200      	movs	r2, #0
    HAL_I2C_ErrorCallback(hi2c);
 8006b76:	4618      	mov	r0, r3
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b78:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006b7e:	f7ff ffe7 	bl	8006b50 <HAL_I2C_ErrorCallback>
}
 8006b82:	bd08      	pop	{r3, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b84:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006b86:	2120      	movs	r1, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b88:	4618      	mov	r0, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8006b8a:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b92:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b94:	f7ff ffde 	bl	8006b54 <HAL_I2C_AbortCpltCallback>
}
 8006b98:	bd08      	pop	{r3, pc}
 8006b9a:	bf00      	nop

08006b9c <I2C_ITError>:
{
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ba0:	2200      	movs	r2, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ba2:	484c      	ldr	r0, [pc, #304]	; (8006cd4 <I2C_ITError+0x138>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006ba4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ba8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006bac:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006bae:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006bb0:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8006bb2:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	6820      	ldr	r0, [r4, #0]
  hi2c->ErrorCode |= ErrorCode;
 8006bb8:	ea41 0102 	orr.w	r1, r1, r2
 8006bbc:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006bbe:	d830      	bhi.n	8006c22 <I2C_ITError+0x86>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bc0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006bc4:	2628      	movs	r6, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bc6:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bca:	4032      	ands	r2, r6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006bcc:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bce:	4031      	ands	r1, r6
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006bd0:	4d41      	ldr	r5, [pc, #260]	; (8006cd8 <I2C_ITError+0x13c>)
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bd2:	42b2      	cmp	r2, r6
 8006bd4:	bf14      	ite	ne
 8006bd6:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 8006bda:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bde:	42b1      	cmp	r1, r6
 8006be0:	bf18      	it	ne
 8006be2:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006be6:	4013      	ands	r3, r2
 8006be8:	6003      	str	r3, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006bea:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006bee:	6365      	str	r5, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8006bf0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 8006bf2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8006bf4:	b118      	cbz	r0, 8006bfe <I2C_ITError+0x62>
 8006bf6:	2b11      	cmp	r3, #17
 8006bf8:	d025      	beq.n	8006c46 <I2C_ITError+0xaa>
 8006bfa:	2b21      	cmp	r3, #33	; 0x21
 8006bfc:	d023      	beq.n	8006c46 <I2C_ITError+0xaa>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8006bfe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006c00:	b118      	cbz	r0, 8006c0a <I2C_ITError+0x6e>
 8006c02:	2b12      	cmp	r3, #18
 8006c04:	d037      	beq.n	8006c76 <I2C_ITError+0xda>
 8006c06:	2b22      	cmp	r3, #34	; 0x22
 8006c08:	d035      	beq.n	8006c76 <I2C_ITError+0xda>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006c0a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006c0e:	2b60      	cmp	r3, #96	; 0x60
 8006c10:	d054      	beq.n	8006cbc <I2C_ITError+0x120>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c12:	2300      	movs	r3, #0
    HAL_I2C_ErrorCallback(hi2c);
 8006c14:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c16:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006c18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006c1c:	f7ff ff98 	bl	8006b50 <HAL_I2C_ErrorCallback>
}
 8006c20:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c22:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c26:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c2a:	6803      	ldr	r3, [r0, #0]
 8006c2c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006c30:	6003      	str	r3, [r0, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006c32:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006c36:	2b60      	cmp	r3, #96	; 0x60
 8006c38:	d002      	beq.n	8006c40 <I2C_ITError+0xa4>
      hi2c->State         = HAL_I2C_STATE_READY;
 8006c3a:	2320      	movs	r3, #32
 8006c3c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	6363      	str	r3, [r4, #52]	; 0x34
 8006c44:	e7d4      	b.n	8006bf0 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	0451      	lsls	r1, r2, #17
 8006c4c:	d430      	bmi.n	8006cb0 <I2C_ITError+0x114>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c4e:	f7fd fe25 	bl	800489c <HAL_DMA_GetState>
 8006c52:	2801      	cmp	r0, #1
 8006c54:	d0d9      	beq.n	8006c0a <I2C_ITError+0x6e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8006c58:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c5a:	4920      	ldr	r1, [pc, #128]	; (8006cdc <I2C_ITError+0x140>)
 8006c5c:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8006c5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c62:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006c64:	f7fd f8c2 	bl	8003dec <HAL_DMA_Abort_IT>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d0d9      	beq.n	8006c20 <I2C_ITError+0x84>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8006c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c72:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006c74:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	0412      	lsls	r2, r2, #16
 8006c7c:	d504      	bpl.n	8006c88 <I2C_ITError+0xec>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c88:	f7fd fe08 	bl	800489c <HAL_DMA_GetState>
 8006c8c:	2801      	cmp	r0, #1
 8006c8e:	d0bc      	beq.n	8006c0a <I2C_ITError+0x6e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c90:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 8006c92:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c94:	4911      	ldr	r1, [pc, #68]	; (8006cdc <I2C_ITError+0x140>)
 8006c96:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8006c98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c9c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006c9e:	f7fd f8a5 	bl	8003dec <HAL_DMA_Abort_IT>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d0bc      	beq.n	8006c20 <I2C_ITError+0x84>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ca6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8006ca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006cac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006cae:	4718      	bx	r3
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006cba:	e7c8      	b.n	8006c4e <I2C_ITError+0xb2>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cbc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006cbe:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8006cc0:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8006cc2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006cc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cca:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ccc:	f7ff ff42 	bl	8006b54 <HAL_I2C_AbortCpltCallback>
}
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}
 8006cd2:	bf00      	nop
 8006cd4:	ffff0000 	.word	0xffff0000
 8006cd8:	08006e8d 	.word	0x08006e8d
 8006cdc:	08006b59 	.word	0x08006b59

08006ce0 <I2C_ITSlaveCplt>:
{
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006ce4:	6802      	ldr	r2, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ce6:	2620      	movs	r6, #32
{
 8006ce8:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006cea:	6810      	ldr	r0, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cf0:	61d6      	str	r6, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cf2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006cf6:	6821      	ldr	r1, [r4, #0]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cf8:	2b21      	cmp	r3, #33	; 0x21
 8006cfa:	d165      	bne.n	8006dc8 <I2C_ITSlaveCplt+0xe8>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cfc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006d00:	680a      	ldr	r2, [r1, #0]
 8006d02:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
 8006d06:	600a      	str	r2, [r1, #0]
 8006d08:	6821      	ldr	r1, [r4, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d0a:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d0c:	684a      	ldr	r2, [r1, #4]
  I2C_RESET_CR2(hi2c);
 8006d0e:	4e5d      	ldr	r6, [pc, #372]	; (8006e84 <I2C_ITSlaveCplt+0x1a4>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d14:	604a      	str	r2, [r1, #4]
  I2C_RESET_CR2(hi2c);
 8006d16:	6822      	ldr	r2, [r4, #0]
 8006d18:	6853      	ldr	r3, [r2, #4]
 8006d1a:	4033      	ands	r3, r6
 8006d1c:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	699a      	ldr	r2, [r3, #24]
 8006d22:	0792      	lsls	r2, r2, #30
 8006d24:	d502      	bpl.n	8006d2c <I2C_ITSlaveCplt+0x4c>
    hi2c->Instance->TXDR = 0x00U;
 8006d26:	2200      	movs	r2, #0
 8006d28:	629a      	str	r2, [r3, #40]	; 0x28
 8006d2a:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d2c:	699a      	ldr	r2, [r3, #24]
 8006d2e:	07d7      	lsls	r7, r2, #31
 8006d30:	d403      	bmi.n	8006d3a <I2C_ITSlaveCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d32:	699a      	ldr	r2, [r3, #24]
 8006d34:	f042 0201 	orr.w	r2, r2, #1
 8006d38:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d3a:	0446      	lsls	r6, r0, #17
 8006d3c:	d539      	bpl.n	8006db2 <I2C_ITSlaveCplt+0xd2>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	6813      	ldr	r3, [r2, #0]
 8006d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d46:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8006d48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d4a:	b11b      	cbz	r3, 8006d54 <I2C_ITSlaveCplt+0x74>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	6853      	ldr	r3, [r2, #4]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006d54:	0769      	lsls	r1, r5, #29
 8006d56:	d50b      	bpl.n	8006d70 <I2C_ITSlaveCplt+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d58:	6822      	ldr	r2, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006d5a:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006d66:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8006d68:	3301      	adds	r3, #1
 8006d6a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006d6c:	2a00      	cmp	r2, #0
 8006d6e:	d144      	bne.n	8006dfa <I2C_ITSlaveCplt+0x11a>
  if (hi2c->XferCount != 0U)
 8006d70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	b11b      	cbz	r3, 8006d7e <I2C_ITSlaveCplt+0x9e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d78:	f043 0304 	orr.w	r3, r3, #4
 8006d7c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d7e:	2700      	movs	r7, #0
 8006d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d84:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8006d86:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d88:	2e00      	cmp	r6, #0
 8006d8a:	d13d      	bne.n	8006e08 <I2C_ITSlaveCplt+0x128>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006d8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d8e:	4d3e      	ldr	r5, [pc, #248]	; (8006e88 <I2C_ITSlaveCplt+0x1a8>)
 8006d90:	42ab      	cmp	r3, r5
 8006d92:	d124      	bne.n	8006dde <I2C_ITSlaveCplt+0xfe>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d94:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d98:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8006d9a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d9e:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 8006da0:	f04f 0320 	mov.w	r3, #32
 8006da4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006da8:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006daa:	d066      	beq.n	8006e7a <I2C_ITSlaveCplt+0x19a>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006dac:	f7ff fe34 	bl	8006a18 <HAL_I2C_SlaveTxCpltCallback>
}
 8006db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006db2:	0400      	lsls	r0, r0, #16
 8006db4:	d5ce      	bpl.n	8006d54 <I2C_ITSlaveCplt+0x74>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006db6:	6822      	ldr	r2, [r4, #0]
 8006db8:	6813      	ldr	r3, [r2, #0]
 8006dba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dbe:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8006dc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1c2      	bne.n	8006d4c <I2C_ITSlaveCplt+0x6c>
 8006dc6:	e7c5      	b.n	8006d54 <I2C_ITSlaveCplt+0x74>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006dc8:	2b22      	cmp	r3, #34	; 0x22
 8006dca:	d19f      	bne.n	8006d0c <I2C_ITSlaveCplt+0x2c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dcc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006dd0:	680a      	ldr	r2, [r1, #0]
 8006dd2:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
 8006dd6:	600a      	str	r2, [r1, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006dd8:	6323      	str	r3, [r4, #48]	; 0x30
 8006dda:	6821      	ldr	r1, [r4, #0]
 8006ddc:	e796      	b.n	8006d0c <I2C_ITSlaveCplt+0x2c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006dde:	4620      	mov	r0, r4
 8006de0:	f7ff fe1e 	bl	8006a20 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8006de4:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006de6:	62e5      	str	r5, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 8006de8:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8006dea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006dee:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8006df2:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8006df4:	f7ff fea6 	bl	8006b44 <HAL_I2C_ListenCpltCallback>
}
 8006df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferCount--;
 8006dfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006dfc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006dfe:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006e00:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006e06:	e7b3      	b.n	8006d70 <I2C_ITSlaveCplt+0x90>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e08:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f7ff fec6 	bl	8006b9c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e10:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006e14:	2b28      	cmp	r3, #40	; 0x28
 8006e16:	d1cb      	bne.n	8006db0 <I2C_ITSlaveCplt+0xd0>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e18:	4b1b      	ldr	r3, [pc, #108]	; (8006e88 <I2C_ITSlaveCplt+0x1a8>)
  hi2c->State = HAL_I2C_STATE_READY;
 8006e1a:	2220      	movs	r2, #32
  hi2c->XferISR = NULL;
 8006e1c:	6367      	str	r7, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e1e:	62e3      	str	r3, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e20:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006e22:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006e26:	076a      	lsls	r2, r5, #29
 8006e28:	6823      	ldr	r3, [r4, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e2a:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006e2e:	d512      	bpl.n	8006e56 <I2C_ITSlaveCplt+0x176>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006e38:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006e3e:	b1fa      	cbz	r2, 8006e80 <I2C_ITSlaveCplt+0x1a0>
      hi2c->XferCount--;
 8006e40:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006e42:	3a01      	subs	r2, #1
 8006e44:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount--;
 8006e46:	3901      	subs	r1, #1
      hi2c->XferSize--;
 8006e48:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006e4a:	b28a      	uxth	r2, r1
 8006e4c:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e4e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006e50:	f042 0204 	orr.w	r2, r2, #4
 8006e54:	6462      	str	r2, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e56:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e5a:	2510      	movs	r5, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e5c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8006e60:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e62:	681a      	ldr	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8006e64:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e66:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 8006e6a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8006e70:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8006e74:	f7ff fe66 	bl	8006b44 <HAL_I2C_ListenCpltCallback>
}
 8006e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e7a:	f7ff fdcf 	bl	8006a1c <HAL_I2C_SlaveRxCpltCallback>
}
 8006e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	e7e8      	b.n	8006e56 <I2C_ITSlaveCplt+0x176>
 8006e84:	fe00e800 	.word	0xfe00e800
 8006e88:	ffff0000 	.word	0xffff0000

08006e8c <I2C_Slave_ISR_IT>:
{
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8006e8e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8006e92:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d07f      	beq.n	8006f98 <I2C_Slave_ISR_IT+0x10c>
 8006e98:	4616      	mov	r6, r2
 8006e9a:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006e9c:	068a      	lsls	r2, r1, #26
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8006ea2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006ea6:	d501      	bpl.n	8006eac <I2C_Slave_ISR_IT+0x20>
 8006ea8:	06b3      	lsls	r3, r6, #26
 8006eaa:	d462      	bmi.n	8006f72 <I2C_Slave_ISR_IT+0xe6>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006eac:	06ea      	lsls	r2, r5, #27
 8006eae:	d51b      	bpl.n	8006ee8 <I2C_Slave_ISR_IT+0x5c>
 8006eb0:	06f3      	lsls	r3, r6, #27
 8006eb2:	d519      	bpl.n	8006ee8 <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount == 0U)
 8006eb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d15e      	bne.n	8006f7c <I2C_Slave_ISR_IT+0xf0>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8006ebe:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8006ec2:	2928      	cmp	r1, #40	; 0x28
 8006ec4:	d102      	bne.n	8006ecc <I2C_Slave_ISR_IT+0x40>
 8006ec6:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8006eca:	d07a      	beq.n	8006fc2 <I2C_Slave_ISR_IT+0x136>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006ecc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006ed0:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ed2:	f04f 0310 	mov.w	r3, #16
 8006ed6:	61d3      	str	r3, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006ed8:	d102      	bne.n	8006ee0 <I2C_Slave_ISR_IT+0x54>
 8006eda:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8006ede:	d161      	bne.n	8006fa4 <I2C_Slave_ISR_IT+0x118>
  __HAL_UNLOCK(hi2c);
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8006ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006ee8:	076a      	lsls	r2, r5, #29
 8006eea:	d40e      	bmi.n	8006f0a <I2C_Slave_ISR_IT+0x7e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006eec:	0728      	lsls	r0, r5, #28
 8006eee:	d52a      	bpl.n	8006f46 <I2C_Slave_ISR_IT+0xba>
 8006ef0:	0731      	lsls	r1, r6, #28
 8006ef2:	d528      	bpl.n	8006f46 <I2C_Slave_ISR_IT+0xba>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ef4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006ef8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006efc:	2b28      	cmp	r3, #40	; 0x28
 8006efe:	f000 8090 	beq.w	8007022 <I2C_Slave_ISR_IT+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	2208      	movs	r2, #8
 8006f06:	61da      	str	r2, [r3, #28]
 8006f08:	e7ea      	b.n	8006ee0 <I2C_Slave_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006f0a:	0773      	lsls	r3, r6, #29
 8006f0c:	d5ee      	bpl.n	8006eec <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount > 0U)
 8006f0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	b16b      	cbz	r3, 8006f30 <I2C_Slave_ISR_IT+0xa4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f14:	6822      	ldr	r2, [r4, #0]
 8006f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f1a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8006f1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006f1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006f20:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006f22:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8006f24:	3101      	adds	r1, #1
      hi2c->XferCount--;
 8006f26:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8006f28:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8006f2a:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006f2c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006f2e:	8522      	strh	r2, [r4, #40]	; 0x28
    if ((hi2c->XferCount == 0U) && \
 8006f30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1d3      	bne.n	8006ee0 <I2C_Slave_ISR_IT+0x54>
 8006f38:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8006f3c:	d0d0      	beq.n	8006ee0 <I2C_Slave_ISR_IT+0x54>
        I2C_ITSlaveSeqCplt(hi2c);
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f7ff fd6e 	bl	8006a20 <I2C_ITSlaveSeqCplt>
 8006f44:	e7cc      	b.n	8006ee0 <I2C_Slave_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006f46:	07aa      	lsls	r2, r5, #30
 8006f48:	d5ca      	bpl.n	8006ee0 <I2C_Slave_ISR_IT+0x54>
 8006f4a:	07b3      	lsls	r3, r6, #30
 8006f4c:	d5c8      	bpl.n	8006ee0 <I2C_Slave_ISR_IT+0x54>
    if (hi2c->XferCount > 0U)
 8006f4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	b31b      	cbz	r3, 8006f9c <I2C_Slave_ISR_IT+0x110>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f54:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	7812      	ldrb	r2, [r2, #0]
 8006f5a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006f5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006f60:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006f62:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8006f64:	3101      	adds	r1, #1
      hi2c->XferCount--;
 8006f66:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8006f68:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8006f6a:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006f6c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006f6e:	8522      	strh	r2, [r4, #40]	; 0x28
 8006f70:	e7b6      	b.n	8006ee0 <I2C_Slave_ISR_IT+0x54>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006f72:	f7ff feb5 	bl	8006ce0 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006f76:	06ea      	lsls	r2, r5, #27
 8006f78:	d5b6      	bpl.n	8006ee8 <I2C_Slave_ISR_IT+0x5c>
 8006f7a:	e799      	b.n	8006eb0 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f7c:	2310      	movs	r3, #16
 8006f7e:	61d3      	str	r3, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f82:	f043 0304 	orr.w	r3, r3, #4
 8006f86:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006f88:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8006f8c:	d1a8      	bne.n	8006ee0 <I2C_Slave_ISR_IT+0x54>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f8e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006f90:	4620      	mov	r0, r4
 8006f92:	f7ff fe03 	bl	8006b9c <I2C_ITError>
 8006f96:	e7a3      	b.n	8006ee0 <I2C_Slave_ISR_IT+0x54>
  __HAL_LOCK(hi2c);
 8006f98:	2002      	movs	r0, #2
}
 8006f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006f9c:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8006fa0:	d19e      	bne.n	8006ee0 <I2C_Slave_ISR_IT+0x54>
 8006fa2:	e7cc      	b.n	8006f3e <I2C_Slave_ISR_IT+0xb2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	699a      	ldr	r2, [r3, #24]
 8006fa8:	0790      	lsls	r0, r2, #30
 8006faa:	d502      	bpl.n	8006fb2 <I2C_Slave_ISR_IT+0x126>
    hi2c->Instance->TXDR = 0x00U;
 8006fac:	2200      	movs	r2, #0
 8006fae:	629a      	str	r2, [r3, #40]	; 0x28
 8006fb0:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fb2:	699a      	ldr	r2, [r3, #24]
 8006fb4:	07d1      	lsls	r1, r2, #31
 8006fb6:	d4c2      	bmi.n	8006f3e <I2C_Slave_ISR_IT+0xb2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006fb8:	699a      	ldr	r2, [r3, #24]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	619a      	str	r2, [r3, #24]
 8006fc0:	e7bd      	b.n	8006f3e <I2C_Slave_ISR_IT+0xb2>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fc2:	481b      	ldr	r0, [pc, #108]	; (8007030 <I2C_Slave_ISR_IT+0x1a4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8006fc4:	2120      	movs	r1, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006fc6:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
 8006fc8:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fca:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fcc:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006fce:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006fd6:	d512      	bpl.n	8006ffe <I2C_Slave_ISR_IT+0x172>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fdc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006fe0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006fe6:	b301      	cbz	r1, 800702a <I2C_Slave_ISR_IT+0x19e>
      hi2c->XferCount--;
 8006fe8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006fea:	3901      	subs	r1, #1
 8006fec:	6822      	ldr	r2, [r4, #0]
      hi2c->XferCount--;
 8006fee:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006ff0:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ff6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006ff8:	f043 0304 	orr.w	r3, r3, #4
 8006ffc:	6463      	str	r3, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ffe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007002:	2510      	movs	r5, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007004:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8007008:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800700a:	6813      	ldr	r3, [r2, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800700c:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800700e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007012:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8007018:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800701c:	f7ff fd92 	bl	8006b44 <HAL_I2C_ListenCpltCallback>
 8007020:	e75e      	b.n	8006ee0 <I2C_Slave_ISR_IT+0x54>
 8007022:	4620      	mov	r0, r4
 8007024:	f7ff fd52 	bl	8006acc <I2C_ITAddrCplt.isra.9.part.10>
 8007028:	e75a      	b.n	8006ee0 <I2C_Slave_ISR_IT+0x54>
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	e7e7      	b.n	8006ffe <I2C_Slave_ISR_IT+0x172>
 800702e:	bf00      	nop
 8007030:	ffff0000 	.word	0xffff0000

08007034 <I2C_Slave_ISR_DMA>:
{
 8007034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8007036:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 800703a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800703c:	2b01      	cmp	r3, #1
 800703e:	f000 80b0 	beq.w	80071a2 <I2C_Slave_ISR_DMA+0x16e>
 8007042:	4615      	mov	r5, r2
 8007044:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007046:	068a      	lsls	r2, r1, #26
 8007048:	4604      	mov	r4, r0
 800704a:	460e      	mov	r6, r1
  __HAL_LOCK(hi2c);
 800704c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007050:	d502      	bpl.n	8007058 <I2C_Slave_ISR_DMA+0x24>
 8007052:	06ab      	lsls	r3, r5, #26
 8007054:	f100 8081 	bmi.w	800715a <I2C_Slave_ISR_DMA+0x126>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007058:	06f1      	lsls	r1, r6, #27
 800705a:	d56d      	bpl.n	8007138 <I2C_Slave_ISR_DMA+0x104>
 800705c:	06ea      	lsls	r2, r5, #27
 800705e:	d56b      	bpl.n	8007138 <I2C_Slave_ISR_DMA+0x104>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007060:	0bab      	lsrs	r3, r5, #14
 8007062:	6822      	ldr	r2, [r4, #0]
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007064:	0bed      	lsrs	r5, r5, #15
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007066:	f003 0001 	and.w	r0, r3, #1
 800706a:	432b      	orrs	r3, r5
 800706c:	07db      	lsls	r3, r3, #31
 800706e:	d579      	bpl.n	8007164 <I2C_Slave_ISR_DMA+0x130>
 8007070:	e9d4 130e 	ldrd	r1, r3, [r4, #56]	; 0x38
      if (hi2c->hdmarx != NULL)
 8007074:	b1bb      	cbz	r3, 80070a6 <I2C_Slave_ISR_DMA+0x72>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007076:	07ed      	lsls	r5, r5, #31
 8007078:	d515      	bpl.n	80070a6 <I2C_Slave_ISR_DMA+0x72>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800707a:	f8df e180 	ldr.w	lr, [pc, #384]	; 80071fc <I2C_Slave_ISR_DMA+0x1c8>
 800707e:	681d      	ldr	r5, [r3, #0]
 8007080:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8007084:	686b      	ldr	r3, [r5, #4]
 8007086:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800708a:	fab3 f383 	clz	r3, r3
 800708e:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8007092:	095b      	lsrs	r3, r3, #5
 8007094:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8007098:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800709c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f040 809a 	bne.w	80071da <I2C_Slave_ISR_DMA+0x1a6>
      if (hi2c->hdmatx != NULL)
 80070a6:	2900      	cmp	r1, #0
 80070a8:	d07f      	beq.n	80071aa <I2C_Slave_ISR_DMA+0x176>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d07d      	beq.n	80071aa <I2C_Slave_ISR_DMA+0x176>
 80070ae:	2000      	movs	r0, #0
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80070b0:	6809      	ldr	r1, [r1, #0]
 80070b2:	684b      	ldr	r3, [r1, #4]
 80070b4:	fab3 f383 	clz	r3, r3
 80070b8:	095b      	lsrs	r3, r3, #5
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d073      	beq.n	80071a6 <I2C_Slave_ISR_DMA+0x172>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80070be:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80070c2:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	d14f      	bne.n	800716a <I2C_Slave_ISR_DMA+0x136>
 80070ca:	2b28      	cmp	r3, #40	; 0x28
 80070cc:	d14d      	bne.n	800716a <I2C_Slave_ISR_DMA+0x136>
  hi2c->PreviousState = I2C_STATE_NONE;
 80070ce:	2300      	movs	r3, #0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070d0:	4849      	ldr	r0, [pc, #292]	; (80071f8 <I2C_Slave_ISR_DMA+0x1c4>)
  hi2c->State = HAL_I2C_STATE_READY;
 80070d2:	2120      	movs	r1, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80070d4:	0775      	lsls	r5, r6, #29
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070d6:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferISR = NULL;
 80070d8:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->PreviousState = I2C_STATE_NONE;
 80070da:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80070dc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80070e4:	d513      	bpl.n	800710e <I2C_Slave_ISR_DMA+0xda>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80070ee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 80070f0:	3301      	adds	r3, #1
 80070f2:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80070f4:	2a00      	cmp	r2, #0
 80070f6:	d07c      	beq.n	80071f2 <I2C_Slave_ISR_DMA+0x1be>
      hi2c->XferCount--;
 80070f8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80070fa:	1e53      	subs	r3, r2, #1
 80070fc:	6822      	ldr	r2, [r4, #0]
      hi2c->XferCount--;
 80070fe:	3901      	subs	r1, #1
      hi2c->XferSize--;
 8007100:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007102:	b28b      	uxth	r3, r1
 8007104:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007106:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007108:	f043 0304 	orr.w	r3, r3, #4
 800710c:	6463      	str	r3, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800710e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007112:	2510      	movs	r5, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007114:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8007118:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800711a:	6813      	ldr	r3, [r2, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800711c:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800711e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007122:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	61dd      	str	r5, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8007128:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800712c:	f7ff fd0a 	bl	8006b44 <HAL_I2C_ListenCpltCallback>
  __HAL_UNLOCK(hi2c);
 8007130:	2000      	movs	r0, #0
 8007132:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8007136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007138:	0732      	lsls	r2, r6, #28
 800713a:	d5f9      	bpl.n	8007130 <I2C_Slave_ISR_DMA+0xfc>
 800713c:	072b      	lsls	r3, r5, #28
 800713e:	d5f7      	bpl.n	8007130 <I2C_Slave_ISR_DMA+0xfc>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007140:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007144:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007148:	2b28      	cmp	r3, #40	; 0x28
 800714a:	d04e      	beq.n	80071ea <I2C_Slave_ISR_DMA+0x1b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	2208      	movs	r2, #8
  __HAL_UNLOCK(hi2c);
 8007150:	2000      	movs	r0, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007152:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8007154:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8007158:	e7ed      	b.n	8007136 <I2C_Slave_ISR_DMA+0x102>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800715a:	f7ff fdc1 	bl	8006ce0 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800715e:	06f1      	lsls	r1, r6, #27
 8007160:	d5ea      	bpl.n	8007138 <I2C_Slave_ISR_DMA+0x104>
 8007162:	e77b      	b.n	800705c <I2C_Slave_ISR_DMA+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007164:	2310      	movs	r3, #16
 8007166:	61d3      	str	r3, [r2, #28]
 8007168:	e7e2      	b.n	8007130 <I2C_Slave_ISR_DMA+0xfc>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800716a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800716e:	2b29      	cmp	r3, #41	; 0x29
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007170:	f04f 0310 	mov.w	r3, #16
 8007174:	61d3      	str	r3, [r2, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007176:	d1db      	bne.n	8007130 <I2C_Slave_ISR_DMA+0xfc>
 8007178:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800717c:	d0d8      	beq.n	8007130 <I2C_Slave_ISR_DMA+0xfc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	0790      	lsls	r0, r2, #30
 8007184:	d502      	bpl.n	800718c <I2C_Slave_ISR_DMA+0x158>
    hi2c->Instance->TXDR = 0x00U;
 8007186:	2200      	movs	r2, #0
 8007188:	629a      	str	r2, [r3, #40]	; 0x28
 800718a:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	07d1      	lsls	r1, r2, #31
 8007190:	d403      	bmi.n	800719a <I2C_Slave_ISR_DMA+0x166>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007192:	699a      	ldr	r2, [r3, #24]
 8007194:	f042 0201 	orr.w	r2, r2, #1
 8007198:	619a      	str	r2, [r3, #24]
          I2C_ITSlaveSeqCplt(hi2c);
 800719a:	4620      	mov	r0, r4
 800719c:	f7ff fc40 	bl	8006a20 <I2C_ITSlaveSeqCplt>
 80071a0:	e7c6      	b.n	8007130 <I2C_Slave_ISR_DMA+0xfc>
  __HAL_LOCK(hi2c);
 80071a2:	2002      	movs	r0, #2
}
 80071a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (treatdmanack == 1U)
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d189      	bne.n	80070be <I2C_Slave_ISR_DMA+0x8a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071aa:	2310      	movs	r3, #16
 80071ac:	61d3      	str	r3, [r2, #28]
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80071ae:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80071b4:	f043 0304 	orr.w	r3, r3, #4
 80071b8:	6463      	str	r3, [r4, #68]	; 0x44
        tmpstate = hi2c->State;
 80071ba:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80071be:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80071c0:	d1b6      	bne.n	8007130 <I2C_Slave_ISR_DMA+0xfc>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80071c2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 80071c6:	2b21      	cmp	r3, #33	; 0x21
 80071c8:	d001      	beq.n	80071ce <I2C_Slave_ISR_DMA+0x19a>
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80071ca:	2b22      	cmp	r3, #34	; 0x22
 80071cc:	d100      	bne.n	80071d0 <I2C_Slave_ISR_DMA+0x19c>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80071ce:	6323      	str	r3, [r4, #48]	; 0x30
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80071d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80071d2:	4620      	mov	r0, r4
 80071d4:	f7ff fce2 	bl	8006b9c <I2C_ITError>
 80071d8:	e7aa      	b.n	8007130 <I2C_Slave_ISR_DMA+0xfc>
      if (hi2c->hdmatx != NULL)
 80071da:	2900      	cmp	r1, #0
 80071dc:	f43f af6f 	beq.w	80070be <I2C_Slave_ISR_DMA+0x8a>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f43f af6c 	beq.w	80070be <I2C_Slave_ISR_DMA+0x8a>
            treatdmanack = 1U;
 80071e6:	2001      	movs	r0, #1
 80071e8:	e762      	b.n	80070b0 <I2C_Slave_ISR_DMA+0x7c>
 80071ea:	4620      	mov	r0, r4
 80071ec:	f7ff fc6e 	bl	8006acc <I2C_ITAddrCplt.isra.9.part.10>
 80071f0:	e79e      	b.n	8007130 <I2C_Slave_ISR_DMA+0xfc>
 80071f2:	6822      	ldr	r2, [r4, #0]
 80071f4:	e78b      	b.n	800710e <I2C_Slave_ISR_DMA+0xda>
 80071f6:	bf00      	nop
 80071f8:	ffff0000 	.word	0xffff0000
 80071fc:	40020028 	.word	0x40020028

08007200 <I2C_DMAMasterTransmitCplt>:
{
 8007200:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007202:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007204:	6822      	ldr	r2, [r4, #0]
 8007206:	6813      	ldr	r3, [r2, #0]
 8007208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800720c:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 800720e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007210:	b29b      	uxth	r3, r3
 8007212:	b963      	cbnz	r3, 800722e <I2C_DMAMasterTransmitCplt+0x2e>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007214:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007216:	4a1e      	ldr	r2, [pc, #120]	; (8007290 <I2C_DMAMasterTransmitCplt+0x90>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d02b      	beq.n	8007274 <I2C_DMAMasterTransmitCplt+0x74>
 800721c:	4a1d      	ldr	r2, [pc, #116]	; (8007294 <I2C_DMAMasterTransmitCplt+0x94>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d028      	beq.n	8007274 <I2C_DMAMasterTransmitCplt+0x74>
      tmpisr |= I2C_IT_STOPI;
 8007222:	2120      	movs	r1, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007224:	6822      	ldr	r2, [r4, #0]
 8007226:	6813      	ldr	r3, [r2, #0]
 8007228:	430b      	orrs	r3, r1
 800722a:	6013      	str	r3, [r2, #0]
}
 800722c:	bd10      	pop	{r4, pc}
    hi2c->pBuffPtr += hi2c->XferSize;
 800722e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007230:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007232:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8007234:	4411      	add	r1, r2
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007236:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr += hi2c->XferSize;
 8007238:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800723a:	d818      	bhi.n	800726e <I2C_DMAMasterTransmitCplt+0x6e>
      hi2c->XferSize = hi2c->XferCount;
 800723c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800723e:	b280      	uxth	r0, r0
 8007240:	4603      	mov	r3, r0
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	8520      	strh	r0, [r4, #40]	; 0x28
 8007246:	3228      	adds	r2, #40	; 0x28
 8007248:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800724a:	f7fc f8d5 	bl	80033f8 <HAL_DMA_Start_IT>
 800724e:	b9c8      	cbnz	r0, 8007284 <I2C_DMAMasterTransmitCplt+0x84>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007250:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007252:	4a10      	ldr	r2, [pc, #64]	; (8007294 <I2C_DMAMasterTransmitCplt+0x94>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d00f      	beq.n	8007278 <I2C_DMAMasterTransmitCplt+0x78>
 8007258:	4a0d      	ldr	r2, [pc, #52]	; (8007290 <I2C_DMAMasterTransmitCplt+0x90>)
 800725a:	1a9b      	subs	r3, r3, r2
 800725c:	fab3 f383 	clz	r3, r3
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	b94b      	cbnz	r3, 8007278 <I2C_DMAMasterTransmitCplt+0x78>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007264:	6821      	ldr	r1, [r4, #0]
 8007266:	680a      	ldr	r2, [r1, #0]
 8007268:	4313      	orrs	r3, r2
 800726a:	600b      	str	r3, [r1, #0]
}
 800726c:	bd10      	pop	{r4, pc}
 800726e:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007270:	4618      	mov	r0, r3
 8007272:	e7e6      	b.n	8007242 <I2C_DMAMasterTransmitCplt+0x42>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007274:	2160      	movs	r1, #96	; 0x60
 8007276:	e7d5      	b.n	8007224 <I2C_DMAMasterTransmitCplt+0x24>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007278:	6821      	ldr	r1, [r4, #0]
      tmpisr |= I2C_IT_TCI;
 800727a:	2340      	movs	r3, #64	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800727c:	680a      	ldr	r2, [r1, #0]
 800727e:	4313      	orrs	r3, r2
 8007280:	600b      	str	r3, [r1, #0]
 8007282:	e7f3      	b.n	800726c <I2C_DMAMasterTransmitCplt+0x6c>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007284:	4620      	mov	r0, r4
 8007286:	2110      	movs	r1, #16
}
 8007288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800728c:	f7ff bc86 	b.w	8006b9c <I2C_ITError>
 8007290:	08007035 	.word	0x08007035
 8007294:	080077e1 	.word	0x080077e1

08007298 <I2C_ITMasterCplt>:
{
 8007298:	b570      	push	{r4, r5, r6, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800729a:	2220      	movs	r2, #32
 800729c:	6803      	ldr	r3, [r0, #0]
{
 800729e:	4604      	mov	r4, r0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072a0:	61da      	str	r2, [r3, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80072a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80072a6:	2b21      	cmp	r3, #33	; 0x21
 80072a8:	f000 80a8 	beq.w	80073fc <I2C_ITMasterCplt+0x164>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072ac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80072b0:	2b22      	cmp	r3, #34	; 0x22
 80072b2:	f000 808d 	beq.w	80073d0 <I2C_ITMasterCplt+0x138>
  I2C_RESET_CR2(hi2c);
 80072b6:	6822      	ldr	r2, [r4, #0]
  hi2c->XferISR       = NULL;
 80072b8:	2500      	movs	r5, #0
  I2C_RESET_CR2(hi2c);
 80072ba:	4890      	ldr	r0, [pc, #576]	; (80074fc <I2C_ITMasterCplt+0x264>)
 80072bc:	6853      	ldr	r3, [r2, #4]
 80072be:	4003      	ands	r3, r0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80072c0:	488f      	ldr	r0, [pc, #572]	; (8007500 <I2C_ITMasterCplt+0x268>)
  I2C_RESET_CR2(hi2c);
 80072c2:	6053      	str	r3, [r2, #4]
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80072c4:	06cb      	lsls	r3, r1, #27
  hi2c->XferISR       = NULL;
 80072c6:	6365      	str	r5, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80072c8:	62e0      	str	r0, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80072ca:	d506      	bpl.n	80072da <I2C_ITMasterCplt+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	2210      	movs	r2, #16
 80072d0:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80072d4:	f043 0304 	orr.w	r3, r3, #4
 80072d8:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80072da:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	2a60      	cmp	r2, #96	; 0x60
 80072e2:	f000 8086 	beq.w	80073f2 <I2C_ITMasterCplt+0x15a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80072e6:	699a      	ldr	r2, [r3, #24]
 80072e8:	0795      	lsls	r5, r2, #30
 80072ea:	d502      	bpl.n	80072f2 <I2C_ITMasterCplt+0x5a>
    hi2c->Instance->TXDR = 0x00U;
 80072ec:	2200      	movs	r2, #0
 80072ee:	629a      	str	r2, [r3, #40]	; 0x28
 80072f0:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072f2:	699a      	ldr	r2, [r3, #24]
 80072f4:	07d0      	lsls	r0, r2, #31
 80072f6:	d403      	bmi.n	8007300 <I2C_ITMasterCplt+0x68>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
 80072fe:	619a      	str	r2, [r3, #24]
  tmperror = hi2c->ErrorCode;
 8007300:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007302:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007306:	2a60      	cmp	r2, #96	; 0x60
 8007308:	d00d      	beq.n	8007326 <I2C_ITMasterCplt+0x8e>
 800730a:	3300      	adds	r3, #0
 800730c:	bf18      	it	ne
 800730e:	2301      	movne	r3, #1
 8007310:	b94b      	cbnz	r3, 8007326 <I2C_ITMasterCplt+0x8e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007312:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007316:	2a21      	cmp	r2, #33	; 0x21
 8007318:	f000 80ce 	beq.w	80074b8 <I2C_ITMasterCplt+0x220>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800731c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007320:	2a22      	cmp	r2, #34	; 0x22
 8007322:	d07c      	beq.n	800741e <I2C_ITMasterCplt+0x186>
}
 8007324:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007326:	6c62      	ldr	r2, [r4, #68]	; 0x44
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007328:	2100      	movs	r1, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800732a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800732e:	4874      	ldr	r0, [pc, #464]	; (8007500 <I2C_ITMasterCplt+0x268>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007330:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007334:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007336:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007338:	8561      	strh	r1, [r4, #42]	; 0x2a
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800733a:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 800733c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800733e:	6821      	ldr	r1, [r4, #0]
 8007340:	ea42 0200 	orr.w	r2, r2, r0
 8007344:	6462      	str	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007346:	d831      	bhi.n	80073ac <I2C_ITMasterCplt+0x114>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007348:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800734c:	2628      	movs	r6, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800734e:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007352:	4032      	ands	r2, r6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007354:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007356:	4030      	ands	r0, r6
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007358:	4d6a      	ldr	r5, [pc, #424]	; (8007504 <I2C_ITMasterCplt+0x26c>)
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800735a:	42b2      	cmp	r2, r6
 800735c:	bf14      	ite	ne
 800735e:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 8007362:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007366:	42b0      	cmp	r0, r6
 8007368:	bf18      	it	ne
 800736a:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800736e:	4013      	ands	r3, r2
 8007370:	600b      	str	r3, [r1, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007372:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007376:	6365      	str	r5, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8007378:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 800737a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 800737c:	b118      	cbz	r0, 8007386 <I2C_ITMasterCplt+0xee>
 800737e:	2b11      	cmp	r3, #17
 8007380:	d05d      	beq.n	800743e <I2C_ITMasterCplt+0x1a6>
 8007382:	2b21      	cmp	r3, #33	; 0x21
 8007384:	d05b      	beq.n	800743e <I2C_ITMasterCplt+0x1a6>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8007386:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007388:	b118      	cbz	r0, 8007392 <I2C_ITMasterCplt+0xfa>
 800738a:	2b12      	cmp	r3, #18
 800738c:	d075      	beq.n	800747a <I2C_ITMasterCplt+0x1e2>
 800738e:	2b22      	cmp	r3, #34	; 0x22
 8007390:	d073      	beq.n	800747a <I2C_ITMasterCplt+0x1e2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007392:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007396:	2b60      	cmp	r3, #96	; 0x60
 8007398:	f000 809e 	beq.w	80074d8 <I2C_ITMasterCplt+0x240>
    hi2c->PreviousState = I2C_STATE_NONE;
 800739c:	2300      	movs	r3, #0
    HAL_I2C_ErrorCallback(hi2c);
 800739e:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 80073a0:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80073a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80073a6:	f7ff fbd3 	bl	8006b50 <HAL_I2C_ErrorCallback>
}
 80073aa:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80073ac:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80073b0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80073b4:	680b      	ldr	r3, [r1, #0]
 80073b6:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80073ba:	600b      	str	r3, [r1, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80073bc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80073c0:	2b60      	cmp	r3, #96	; 0x60
 80073c2:	d002      	beq.n	80073ca <I2C_ITMasterCplt+0x132>
      hi2c->State         = HAL_I2C_STATE_READY;
 80073c4:	2320      	movs	r3, #32
 80073c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	6363      	str	r3, [r4, #52]	; 0x34
 80073ce:	e7d3      	b.n	8007378 <I2C_ITMasterCplt+0xe0>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80073d0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80073d4:	2512      	movs	r5, #18
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80073d6:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80073d8:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80073dc:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80073de:	2a28      	cmp	r2, #40	; 0x28
 80073e0:	bf14      	ite	ne
 80073e2:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
 80073e6:	f06f 0244 	mvneq.w	r2, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80073ea:	4013      	ands	r3, r2
 80073ec:	6003      	str	r3, [r0, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80073ee:	6325      	str	r5, [r4, #48]	; 0x30
 80073f0:	e761      	b.n	80072b6 <I2C_ITMasterCplt+0x1e>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80073f2:	074e      	lsls	r6, r1, #29
 80073f4:	f57f af77 	bpl.w	80072e6 <I2C_ITMasterCplt+0x4e>
    tmp = (uint8_t)hi2c->Instance->RXDR;
 80073f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073fa:	e774      	b.n	80072e6 <I2C_ITMasterCplt+0x4e>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80073fc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007400:	2511      	movs	r5, #17
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007402:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007404:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007408:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800740a:	2a28      	cmp	r2, #40	; 0x28
 800740c:	bf14      	ite	ne
 800740e:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
 8007412:	f06f 0242 	mvneq.w	r2, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007416:	4013      	ands	r3, r2
 8007418:	6003      	str	r3, [r0, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800741a:	6325      	str	r5, [r4, #48]	; 0x30
 800741c:	e74b      	b.n	80072b6 <I2C_ITMasterCplt+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 800741e:	2220      	movs	r2, #32
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007420:	4620      	mov	r0, r4
      __HAL_UNLOCK(hi2c);
 8007422:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8007426:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800742a:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800742c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007434:	2a40      	cmp	r2, #64	; 0x40
 8007436:	d05d      	beq.n	80074f4 <I2C_ITMasterCplt+0x25c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007438:	f7ff faec 	bl	8006a14 <HAL_I2C_MasterRxCpltCallback>
}
 800743c:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	0451      	lsls	r1, r2, #17
 8007444:	d504      	bpl.n	8007450 <I2C_ITMasterCplt+0x1b8>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007450:	f7fd fa24 	bl	800489c <HAL_DMA_GetState>
 8007454:	2801      	cmp	r0, #1
 8007456:	d09c      	beq.n	8007392 <I2C_ITMasterCplt+0xfa>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007458:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800745a:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800745c:	492a      	ldr	r1, [pc, #168]	; (8007508 <I2C_ITMasterCplt+0x270>)
 800745e:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8007460:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007464:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007466:	f7fc fcc1 	bl	8003dec <HAL_DMA_Abort_IT>
 800746a:	2800      	cmp	r0, #0
 800746c:	f43f af5a 	beq.w	8007324 <I2C_ITMasterCplt+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007470:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8007472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007476:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007478:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	0412      	lsls	r2, r2, #16
 8007480:	d504      	bpl.n	800748c <I2C_ITMasterCplt+0x1f4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800748c:	f7fd fa06 	bl	800489c <HAL_DMA_GetState>
 8007490:	2801      	cmp	r0, #1
 8007492:	f43f af7e 	beq.w	8007392 <I2C_ITMasterCplt+0xfa>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007496:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 8007498:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800749a:	491b      	ldr	r1, [pc, #108]	; (8007508 <I2C_ITMasterCplt+0x270>)
 800749c:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800749e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80074a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80074a4:	f7fc fca2 	bl	8003dec <HAL_DMA_Abort_IT>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	f43f af3b 	beq.w	8007324 <I2C_ITMasterCplt+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80074ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 80074b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80074b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80074b6:	4718      	bx	r3
    hi2c->State = HAL_I2C_STATE_READY;
 80074b8:	2220      	movs	r2, #32
      HAL_I2C_MemTxCpltCallback(hi2c);
 80074ba:	4620      	mov	r0, r4
      __HAL_UNLOCK(hi2c);
 80074bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80074c0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80074c4:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074c6:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074ce:	2a40      	cmp	r2, #64	; 0x40
 80074d0:	d00d      	beq.n	80074ee <I2C_ITMasterCplt+0x256>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80074d2:	f7ff fa9d 	bl	8006a10 <HAL_I2C_MasterTxCpltCallback>
}
 80074d6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 80074d8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80074da:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 80074dc:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80074de:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80074e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80074e6:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 80074e8:	f7ff fb34 	bl	8006b54 <HAL_I2C_AbortCpltCallback>
}
 80074ec:	bd70      	pop	{r4, r5, r6, pc}
      HAL_I2C_MemTxCpltCallback(hi2c);
 80074ee:	f7ff fb2b 	bl	8006b48 <HAL_I2C_MemTxCpltCallback>
}
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
      HAL_I2C_MemRxCpltCallback(hi2c);
 80074f4:	f7ff fb2a 	bl	8006b4c <HAL_I2C_MemRxCpltCallback>
}
 80074f8:	bd70      	pop	{r4, r5, r6, pc}
 80074fa:	bf00      	nop
 80074fc:	fe00e800 	.word	0xfe00e800
 8007500:	ffff0000 	.word	0xffff0000
 8007504:	08006e8d 	.word	0x08006e8d
 8007508:	08006b59 	.word	0x08006b59

0800750c <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
 800750c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007510:	2b01      	cmp	r3, #1
 8007512:	f000 80d8 	beq.w	80076c6 <I2C_Master_ISR_IT+0x1ba>
 8007516:	2301      	movs	r3, #1
{
 8007518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800751c:	06cf      	lsls	r7, r1, #27
{
 800751e:	b082      	sub	sp, #8
 8007520:	4604      	mov	r4, r0
 8007522:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8007524:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007528:	d51e      	bpl.n	8007568 <I2C_Master_ISR_IT+0x5c>
 800752a:	06d6      	lsls	r6, r2, #27
 800752c:	d51c      	bpl.n	8007568 <I2C_Master_ISR_IT+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800752e:	6803      	ldr	r3, [r0, #0]
 8007530:	2110      	movs	r1, #16
 8007532:	61d9      	str	r1, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007534:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007536:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007538:	f041 0104 	orr.w	r1, r1, #4
 800753c:	6441      	str	r1, [r0, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800753e:	6999      	ldr	r1, [r3, #24]
 8007540:	0788      	lsls	r0, r1, #30
 8007542:	d502      	bpl.n	800754a <I2C_Master_ISR_IT+0x3e>
    hi2c->Instance->TXDR = 0x00U;
 8007544:	2100      	movs	r1, #0
 8007546:	6299      	str	r1, [r3, #40]	; 0x28
 8007548:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800754a:	6999      	ldr	r1, [r3, #24]
 800754c:	07c9      	lsls	r1, r1, #31
 800754e:	f140 8087 	bpl.w	8007660 <I2C_Master_ISR_IT+0x154>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007552:	06a9      	lsls	r1, r5, #26
 8007554:	d502      	bpl.n	800755c <I2C_Master_ISR_IT+0x50>
 8007556:	0693      	lsls	r3, r2, #26
 8007558:	f100 80b7 	bmi.w	80076ca <I2C_Master_ISR_IT+0x1be>
  __HAL_UNLOCK(hi2c);
 800755c:	2000      	movs	r0, #0
 800755e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8007562:	b002      	add	sp, #8
 8007564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007568:	076f      	lsls	r7, r5, #29
 800756a:	d408      	bmi.n	800757e <I2C_Master_ISR_IT+0x72>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800756c:	07a8      	lsls	r0, r5, #30
 800756e:	d519      	bpl.n	80075a4 <I2C_Master_ISR_IT+0x98>
 8007570:	0791      	lsls	r1, r2, #30
 8007572:	d517      	bpl.n	80075a4 <I2C_Master_ISR_IT+0x98>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007574:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	7809      	ldrb	r1, [r1, #0]
 800757a:	6299      	str	r1, [r3, #40]	; 0x28
 800757c:	e007      	b.n	800758e <I2C_Master_ISR_IT+0x82>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800757e:	0756      	lsls	r6, r2, #29
 8007580:	d5f4      	bpl.n	800756c <I2C_Master_ISR_IT+0x60>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007582:	6821      	ldr	r1, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007584:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800758a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800758c:	7019      	strb	r1, [r3, #0]
    hi2c->XferCount--;
 800758e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8007590:	6a60      	ldr	r0, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8007592:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8007594:	3b01      	subs	r3, #1
    hi2c->pBuffPtr++;
 8007596:	3001      	adds	r0, #1
    hi2c->XferCount--;
 8007598:	b29b      	uxth	r3, r3
    hi2c->XferSize--;
 800759a:	3901      	subs	r1, #1
    hi2c->pBuffPtr++;
 800759c:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800759e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize--;
 80075a0:	8521      	strh	r1, [r4, #40]	; 0x28
    hi2c->XferCount--;
 80075a2:	e7d6      	b.n	8007552 <I2C_Master_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80075a4:	062b      	lsls	r3, r5, #24
 80075a6:	d416      	bmi.n	80075d6 <I2C_Master_ISR_IT+0xca>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80075a8:	066e      	lsls	r6, r5, #25
 80075aa:	d5d2      	bpl.n	8007552 <I2C_Master_ISR_IT+0x46>
 80075ac:	0650      	lsls	r0, r2, #25
 80075ae:	d5d0      	bpl.n	8007552 <I2C_Master_ISR_IT+0x46>
    if (hi2c->XferCount == 0U)
 80075b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d17f      	bne.n	80076b8 <I2C_Master_ISR_IT+0x1ac>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80075b8:	6821      	ldr	r1, [r4, #0]
 80075ba:	684b      	ldr	r3, [r1, #4]
 80075bc:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80075c0:	d1c7      	bne.n	8007552 <I2C_Master_ISR_IT+0x46>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80075c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80075c4:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80075c8:	f040 80a2 	bne.w	8007710 <I2C_Master_ISR_IT+0x204>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80075cc:	684b      	ldr	r3, [r1, #4]
 80075ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075d2:	604b      	str	r3, [r1, #4]
 80075d4:	e7bd      	b.n	8007552 <I2C_Master_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80075d6:	0657      	lsls	r7, r2, #25
 80075d8:	d5bb      	bpl.n	8007552 <I2C_Master_ISR_IT+0x46>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80075dc:	6821      	ldr	r1, [r4, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d042      	beq.n	800766a <I2C_Master_ISR_IT+0x15e>
 80075e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d13f      	bne.n	800766a <I2C_Master_ISR_IT+0x15e>
 80075ea:	4b76      	ldr	r3, [pc, #472]	; (80077c4 <I2C_Master_ISR_IT+0x2b8>)
 80075ec:	4e76      	ldr	r6, [pc, #472]	; (80077c8 <I2C_Master_ISR_IT+0x2bc>)
 80075ee:	4877      	ldr	r0, [pc, #476]	; (80077cc <I2C_Master_ISR_IT+0x2c0>)
 80075f0:	4299      	cmp	r1, r3
 80075f2:	bf18      	it	ne
 80075f4:	42b1      	cmpne	r1, r6
 80075f6:	4f76      	ldr	r7, [pc, #472]	; (80077d0 <I2C_Master_ISR_IT+0x2c4>)
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80075f8:	684e      	ldr	r6, [r1, #4]
 80075fa:	bf14      	ite	ne
 80075fc:	2301      	movne	r3, #1
 80075fe:	2300      	moveq	r3, #0
 8007600:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007604:	4281      	cmp	r1, r0
 8007606:	bf0c      	ite	eq
 8007608:	2300      	moveq	r3, #0
 800760a:	f003 0301 	andne.w	r3, r3, #1
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800760e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8007610:	42b9      	cmp	r1, r7
 8007612:	bf0c      	ite	eq
 8007614:	2300      	moveq	r3, #0
 8007616:	f003 0301 	andne.w	r3, r3, #1
 800761a:	28ff      	cmp	r0, #255	; 0xff
 800761c:	f200 8099 	bhi.w	8007752 <I2C_Master_ISR_IT+0x246>
        hi2c->XferSize = hi2c->XferCount;
 8007620:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007622:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8007624:	b280      	uxth	r0, r0
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007626:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
 800762a:	8520      	strh	r0, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800762c:	b2c7      	uxtb	r7, r0
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800762e:	f000 809b 	beq.w	8007768 <I2C_Master_ISR_IT+0x25c>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8007632:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007636:	2b00      	cmp	r3, #0
 8007638:	f040 80a1 	bne.w	800777e <I2C_Master_ISR_IT+0x272>
  assert_param(IS_TRANSFER_MODE(Mode));
 800763c:	f038 7380 	bics.w	r3, r8, #16777216	; 0x1000000
 8007640:	d003      	beq.n	800764a <I2C_Master_ISR_IT+0x13e>
 8007642:	f1b8 7f00 	cmp.w	r8, #33554432	; 0x2000000
 8007646:	f040 80a2 	bne.w	800778e <I2C_Master_ISR_IT+0x282>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	4961      	ldr	r1, [pc, #388]	; (80077d4 <I2C_Master_ISR_IT+0x2c8>)
 800764e:	6858      	ldr	r0, [r3, #4]
 8007650:	4008      	ands	r0, r1
 8007652:	ea40 0008 	orr.w	r0, r0, r8
 8007656:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800765a:	4306      	orrs	r6, r0
 800765c:	605e      	str	r6, [r3, #4]
 800765e:	e778      	b.n	8007552 <I2C_Master_ISR_IT+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007660:	6999      	ldr	r1, [r3, #24]
 8007662:	f041 0101 	orr.w	r1, r1, #1
 8007666:	6199      	str	r1, [r3, #24]
 8007668:	e773      	b.n	8007552 <I2C_Master_ISR_IT+0x46>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800766a:	684b      	ldr	r3, [r1, #4]
 800766c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8007670:	d122      	bne.n	80076b8 <I2C_Master_ISR_IT+0x1ac>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007672:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->State         = HAL_I2C_STATE_READY;
 8007676:	2720      	movs	r7, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007678:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 800767c:	9201      	str	r2, [sp, #4]
 800767e:	2821      	cmp	r0, #33	; 0x21
 8007680:	d02d      	beq.n	80076de <I2C_Master_ISR_IT+0x1d2>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007682:	2612      	movs	r6, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8007684:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8007688:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800768a:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800768c:	6326      	str	r6, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800768e:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007692:	f8d1 c000 	ldr.w	ip, [r1]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007696:	f007 0728 	and.w	r7, r7, #40	; 0x28
 800769a:	2f28      	cmp	r7, #40	; 0x28
 800769c:	bf14      	ite	ne
 800769e:	f06f 06f4 	mvnne.w	r6, #244	; 0xf4
 80076a2:	f06f 0644 	mvneq.w	r6, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076a6:	ea06 060c 	and.w	r6, r6, ip
 80076aa:	600e      	str	r6, [r1, #0]
    __HAL_UNLOCK(hi2c);
 80076ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80076b0:	f7ff f9b0 	bl	8006a14 <HAL_I2C_MasterRxCpltCallback>
 80076b4:	9a01      	ldr	r2, [sp, #4]
 80076b6:	e74c      	b.n	8007552 <I2C_Master_ISR_IT+0x46>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80076b8:	2140      	movs	r1, #64	; 0x40
 80076ba:	4620      	mov	r0, r4
 80076bc:	9201      	str	r2, [sp, #4]
 80076be:	f7ff fa6d 	bl	8006b9c <I2C_ITError>
 80076c2:	9a01      	ldr	r2, [sp, #4]
 80076c4:	e745      	b.n	8007552 <I2C_Master_ISR_IT+0x46>
  __HAL_LOCK(hi2c);
 80076c6:	2002      	movs	r0, #2
}
 80076c8:	4770      	bx	lr
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80076ca:	4620      	mov	r0, r4
 80076cc:	4629      	mov	r1, r5
 80076ce:	f7ff fde3 	bl	8007298 <I2C_ITMasterCplt>
  __HAL_UNLOCK(hi2c);
 80076d2:	2000      	movs	r0, #0
 80076d4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80076d8:	b002      	add	sp, #8
 80076da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80076de:	2611      	movs	r6, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 80076e0:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 80076e4:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80076e6:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80076e8:	6326      	str	r6, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076ea:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076ee:	680f      	ldr	r7, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076f0:	f006 0628 	and.w	r6, r6, #40	; 0x28
 80076f4:	2e28      	cmp	r6, #40	; 0x28
 80076f6:	bf14      	ite	ne
 80076f8:	f06f 06f2 	mvnne.w	r6, #242	; 0xf2
 80076fc:	f06f 0642 	mvneq.w	r6, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007700:	403e      	ands	r6, r7
 8007702:	600e      	str	r6, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8007704:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007708:	f7ff f982 	bl	8006a10 <HAL_I2C_MasterTxCpltCallback>
 800770c:	9a01      	ldr	r2, [sp, #4]
 800770e:	e720      	b.n	8007552 <I2C_Master_ISR_IT+0x46>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->State         = HAL_I2C_STATE_READY;
 8007714:	2720      	movs	r7, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007716:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 800771a:	9201      	str	r2, [sp, #4]
 800771c:	2821      	cmp	r0, #33	; 0x21
 800771e:	d0de      	beq.n	80076de <I2C_Master_ISR_IT+0x1d2>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007720:	2612      	movs	r6, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8007722:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8007726:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007728:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800772a:	6326      	str	r6, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800772c:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007730:	680e      	ldr	r6, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007732:	f007 0728 	and.w	r7, r7, #40	; 0x28
 8007736:	2f28      	cmp	r7, #40	; 0x28
 8007738:	bf14      	ite	ne
 800773a:	f06f 07f4 	mvnne.w	r7, #244	; 0xf4
 800773e:	f06f 0744 	mvneq.w	r7, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007742:	403e      	ands	r6, r7
 8007744:	600e      	str	r6, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8007746:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800774a:	f7ff f963 	bl	8006a14 <HAL_I2C_MasterRxCpltCallback>
 800774e:	9a01      	ldr	r2, [sp, #4]
 8007750:	e6ff      	b.n	8007552 <I2C_Master_ISR_IT+0x46>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007752:	20ff      	movs	r0, #255	; 0xff
 8007754:	8520      	strh	r0, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007756:	bb13      	cbnz	r3, 800779e <I2C_Master_ISR_IT+0x292>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007758:	684b      	ldr	r3, [r1, #4]
 800775a:	4f1e      	ldr	r7, [pc, #120]	; (80077d4 <I2C_Master_ISR_IT+0x2c8>)
 800775c:	481e      	ldr	r0, [pc, #120]	; (80077d8 <I2C_Master_ISR_IT+0x2cc>)
 800775e:	403b      	ands	r3, r7
 8007760:	4330      	orrs	r0, r6
 8007762:	4303      	orrs	r3, r0
 8007764:	604b      	str	r3, [r1, #4]
 8007766:	e6f4      	b.n	8007552 <I2C_Master_ISR_IT+0x46>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007768:	bb13      	cbnz	r3, 80077b0 <I2C_Master_ISR_IT+0x2a4>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800776a:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
 800776e:	6848      	ldr	r0, [r1, #4]
 8007770:	4e18      	ldr	r6, [pc, #96]	; (80077d4 <I2C_Master_ISR_IT+0x2c8>)
 8007772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007776:	4030      	ands	r0, r6
 8007778:	4303      	orrs	r3, r0
 800777a:	604b      	str	r3, [r1, #4]
 800777c:	e6e9      	b.n	8007552 <I2C_Master_ISR_IT+0x46>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800777e:	f641 1131 	movw	r1, #6449	; 0x1931
 8007782:	4816      	ldr	r0, [pc, #88]	; (80077dc <I2C_Master_ISR_IT+0x2d0>)
 8007784:	9201      	str	r2, [sp, #4]
 8007786:	f00c f8dd 	bl	8013944 <assert_failed>
 800778a:	9a01      	ldr	r2, [sp, #4]
 800778c:	e756      	b.n	800763c <I2C_Master_ISR_IT+0x130>
  assert_param(IS_TRANSFER_MODE(Mode));
 800778e:	f641 1132 	movw	r1, #6450	; 0x1932
 8007792:	4812      	ldr	r0, [pc, #72]	; (80077dc <I2C_Master_ISR_IT+0x2d0>)
 8007794:	9201      	str	r2, [sp, #4]
 8007796:	f00c f8d5 	bl	8013944 <assert_failed>
 800779a:	9a01      	ldr	r2, [sp, #4]
 800779c:	e755      	b.n	800764a <I2C_Master_ISR_IT+0x13e>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800779e:	f641 1131 	movw	r1, #6449	; 0x1931
 80077a2:	480e      	ldr	r0, [pc, #56]	; (80077dc <I2C_Master_ISR_IT+0x2d0>)
 80077a4:	9201      	str	r2, [sp, #4]
 80077a6:	f00c f8cd 	bl	8013944 <assert_failed>
 80077aa:	6821      	ldr	r1, [r4, #0]
 80077ac:	9a01      	ldr	r2, [sp, #4]
 80077ae:	e7d3      	b.n	8007758 <I2C_Master_ISR_IT+0x24c>
 80077b0:	f641 1131 	movw	r1, #6449	; 0x1931
 80077b4:	4809      	ldr	r0, [pc, #36]	; (80077dc <I2C_Master_ISR_IT+0x2d0>)
 80077b6:	9201      	str	r2, [sp, #4]
 80077b8:	f00c f8c4 	bl	8013944 <assert_failed>
 80077bc:	6821      	ldr	r1, [r4, #0]
 80077be:	9a01      	ldr	r2, [sp, #4]
 80077c0:	e7d3      	b.n	800776a <I2C_Master_ISR_IT+0x25e>
 80077c2:	bf00      	nop
 80077c4:	40005400 	.word	0x40005400
 80077c8:	40005800 	.word	0x40005800
 80077cc:	40005c00 	.word	0x40005c00
 80077d0:	58001c00 	.word	0x58001c00
 80077d4:	fc009c00 	.word	0xfc009c00
 80077d8:	01ff0000 	.word	0x01ff0000
 80077dc:	08144ed0 	.word	0x08144ed0

080077e0 <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 80077e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	f000 80a8 	beq.w	800793a <I2C_Master_ISR_DMA+0x15a>
 80077ea:	2301      	movs	r3, #1
{
 80077ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80077f0:	06cd      	lsls	r5, r1, #27
 80077f2:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 80077f4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80077f8:	d529      	bpl.n	800784e <I2C_Master_ISR_DMA+0x6e>
 80077fa:	06d0      	lsls	r0, r2, #27
 80077fc:	d527      	bpl.n	800784e <I2C_Master_ISR_DMA+0x6e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	2210      	movs	r2, #16
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007802:	4998      	ldr	r1, [pc, #608]	; (8007a64 <I2C_Master_ISR_DMA+0x284>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007804:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007806:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007808:	6b62      	ldr	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800780a:	f043 0304 	orr.w	r3, r3, #4
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800780e:	428a      	cmp	r2, r1
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007810:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007812:	f000 8090 	beq.w	8007936 <I2C_Master_ISR_DMA+0x156>
 8007816:	4b94      	ldr	r3, [pc, #592]	; (8007a68 <I2C_Master_ISR_DMA+0x288>)
 8007818:	429a      	cmp	r2, r3
 800781a:	f000 808c 	beq.w	8007936 <I2C_Master_ISR_DMA+0x156>
      tmpisr |= I2C_IT_STOPI;
 800781e:	2120      	movs	r1, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007820:	6822      	ldr	r2, [r4, #0]
 8007822:	6813      	ldr	r3, [r2, #0]
 8007824:	430b      	orrs	r3, r1
 8007826:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007828:	6823      	ldr	r3, [r4, #0]
 800782a:	699a      	ldr	r2, [r3, #24]
 800782c:	0791      	lsls	r1, r2, #30
 800782e:	d502      	bpl.n	8007836 <I2C_Master_ISR_DMA+0x56>
    hi2c->Instance->TXDR = 0x00U;
 8007830:	2200      	movs	r2, #0
 8007832:	629a      	str	r2, [r3, #40]	; 0x28
 8007834:	6823      	ldr	r3, [r4, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007836:	699a      	ldr	r2, [r3, #24]
 8007838:	07d2      	lsls	r2, r2, #31
 800783a:	d403      	bmi.n	8007844 <I2C_Master_ISR_DMA+0x64>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800783c:	699a      	ldr	r2, [r3, #24]
 800783e:	f042 0201 	orr.w	r2, r2, #1
 8007842:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(hi2c);
 8007844:	2000      	movs	r0, #0
 8007846:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800784a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800784e:	060f      	lsls	r7, r1, #24
 8007850:	d553      	bpl.n	80078fa <I2C_Master_ISR_DMA+0x11a>
 8007852:	0656      	lsls	r6, r2, #25
 8007854:	d567      	bpl.n	8007926 <I2C_Master_ISR_DMA+0x146>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007856:	6822      	ldr	r2, [r4, #0]
 8007858:	6813      	ldr	r3, [r2, #0]
 800785a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800785e:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 8007860:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007862:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount != 0U)
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d069      	beq.n	800793e <I2C_Master_ISR_DMA+0x15e>
 800786a:	4980      	ldr	r1, [pc, #512]	; (8007a6c <I2C_Master_ISR_DMA+0x28c>)
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800786c:	4610      	mov	r0, r2
 800786e:	4e80      	ldr	r6, [pc, #512]	; (8007a70 <I2C_Master_ISR_DMA+0x290>)
 8007870:	6855      	ldr	r5, [r2, #4]
 8007872:	42b2      	cmp	r2, r6
 8007874:	bf18      	it	ne
 8007876:	428a      	cmpne	r2, r1
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007878:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800787a:	f3c5 0609 	ubfx	r6, r5, #0, #10
 800787e:	bf14      	ite	ne
 8007880:	2101      	movne	r1, #1
 8007882:	2100      	moveq	r1, #0
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007884:	2bff      	cmp	r3, #255	; 0xff
 8007886:	f200 8082 	bhi.w	800798e <I2C_Master_ISR_DMA+0x1ae>
        hi2c->XferSize = hi2c->XferCount;
 800788a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800788c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 800788e:	b29b      	uxth	r3, r3
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007890:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
 8007894:	8523      	strh	r3, [r4, #40]	; 0x28
 8007896:	b2db      	uxtb	r3, r3
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007898:	f000 80c6 	beq.w	8007a28 <I2C_Master_ISR_DMA+0x248>
          xfermode = hi2c->XferOptions;
 800789c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800789e:	041d      	lsls	r5, r3, #16
 80078a0:	f027 7880 	bic.w	r8, r7, #16777216	; 0x1000000
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80078a4:	2900      	cmp	r1, #0
 80078a6:	f040 80ca 	bne.w	8007a3e <I2C_Master_ISR_DMA+0x25e>
 80078aa:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80078ae:	bf18      	it	ne
 80078b0:	f1b8 0f00 	cmpne.w	r8, #0
 80078b4:	bf14      	ite	ne
 80078b6:	f04f 0801 	movne.w	r8, #1
 80078ba:	f04f 0800 	moveq.w	r8, #0
  assert_param(IS_TRANSFER_MODE(Mode));
 80078be:	f1b8 0f00 	cmp.w	r8, #0
 80078c2:	f040 80b5 	bne.w	8007a30 <I2C_Master_ISR_DMA+0x250>
 80078c6:	6822      	ldr	r2, [r4, #0]
 80078c8:	4610      	mov	r0, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80078ca:	6843      	ldr	r3, [r0, #4]
 80078cc:	433d      	orrs	r5, r7
 80078ce:	4a69      	ldr	r2, [pc, #420]	; (8007a74 <I2C_Master_ISR_DMA+0x294>)
 80078d0:	4335      	orrs	r5, r6
 80078d2:	4013      	ands	r3, r2
 80078d4:	431d      	orrs	r5, r3
 80078d6:	6045      	str	r5, [r0, #4]
      hi2c->XferCount -= hi2c->XferSize;
 80078d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80078da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80078dc:	1a9b      	subs	r3, r3, r2
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80078de:	6822      	ldr	r2, [r4, #0]
      hi2c->XferCount -= hi2c->XferSize;
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80078e8:	2b22      	cmp	r3, #34	; 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80078ea:	6813      	ldr	r3, [r2, #0]
 80078ec:	bf0c      	ite	eq
 80078ee:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80078f2:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	e7a4      	b.n	8007844 <I2C_Master_ISR_DMA+0x64>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80078fa:	064d      	lsls	r5, r1, #25
 80078fc:	d513      	bpl.n	8007926 <I2C_Master_ISR_DMA+0x146>
 80078fe:	0650      	lsls	r0, r2, #25
 8007900:	d511      	bpl.n	8007926 <I2C_Master_ISR_DMA+0x146>
    if (hi2c->XferCount == 0U)
 8007902:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d13c      	bne.n	8007984 <I2C_Master_ISR_DMA+0x1a4>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800790a:	6822      	ldr	r2, [r4, #0]
 800790c:	6853      	ldr	r3, [r2, #4]
 800790e:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8007912:	d197      	bne.n	8007844 <I2C_Master_ISR_DMA+0x64>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007914:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007916:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800791a:	d166      	bne.n	80079ea <I2C_Master_ISR_DMA+0x20a>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800791c:	6853      	ldr	r3, [r2, #4]
 800791e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007922:	6053      	str	r3, [r2, #4]
 8007924:	e78e      	b.n	8007844 <I2C_Master_ISR_DMA+0x64>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007926:	068b      	lsls	r3, r1, #26
 8007928:	d58c      	bpl.n	8007844 <I2C_Master_ISR_DMA+0x64>
 800792a:	0692      	lsls	r2, r2, #26
 800792c:	d58a      	bpl.n	8007844 <I2C_Master_ISR_DMA+0x64>
    I2C_ITMasterCplt(hi2c, ITFlags);
 800792e:	4620      	mov	r0, r4
 8007930:	f7ff fcb2 	bl	8007298 <I2C_ITMasterCplt>
 8007934:	e786      	b.n	8007844 <I2C_Master_ISR_DMA+0x64>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007936:	2160      	movs	r1, #96	; 0x60
 8007938:	e772      	b.n	8007820 <I2C_Master_ISR_DMA+0x40>
  __HAL_LOCK(hi2c);
 800793a:	2002      	movs	r0, #2
}
 800793c:	4770      	bx	lr
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800793e:	6853      	ldr	r3, [r2, #4]
 8007940:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8007944:	d11e      	bne.n	8007984 <I2C_Master_ISR_DMA+0x1a4>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007946:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->State         = HAL_I2C_STATE_READY;
 800794a:	2520      	movs	r5, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800794c:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8007950:	2921      	cmp	r1, #33	; 0x21
 8007952:	d032      	beq.n	80079ba <I2C_Master_ISR_DMA+0x1da>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007954:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8007956:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 800795a:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800795c:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800795e:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007960:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007964:	6816      	ldr	r6, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007966:	f005 0528 	and.w	r5, r5, #40	; 0x28
 800796a:	2d28      	cmp	r5, #40	; 0x28
 800796c:	bf14      	ite	ne
 800796e:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8007972:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007976:	4031      	ands	r1, r6
 8007978:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800797a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800797e:	f7ff f849 	bl	8006a14 <HAL_I2C_MasterRxCpltCallback>
 8007982:	e75f      	b.n	8007844 <I2C_Master_ISR_DMA+0x64>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007984:	2140      	movs	r1, #64	; 0x40
 8007986:	4620      	mov	r0, r4
 8007988:	f7ff f908 	bl	8006b9c <I2C_ITError>
 800798c:	e75a      	b.n	8007844 <I2C_Master_ISR_DMA+0x64>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800798e:	23ff      	movs	r3, #255	; 0xff
 8007990:	f44f 057f 	mov.w	r5, #16711680	; 0xff0000
        xfermode = I2C_RELOAD_MODE;
 8007994:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007998:	8523      	strh	r3, [r4, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800799a:	2900      	cmp	r1, #0
 800799c:	d095      	beq.n	80078ca <I2C_Master_ISR_DMA+0xea>
 800799e:	4b36      	ldr	r3, [pc, #216]	; (8007a78 <I2C_Master_ISR_DMA+0x298>)
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d091      	beq.n	80078c8 <I2C_Master_ISR_DMA+0xe8>
 80079a4:	4b35      	ldr	r3, [pc, #212]	; (8007a7c <I2C_Master_ISR_DMA+0x29c>)
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d08e      	beq.n	80078c8 <I2C_Master_ISR_DMA+0xe8>
 80079aa:	f04f 0800 	mov.w	r8, #0
 80079ae:	f641 1131 	movw	r1, #6449	; 0x1931
 80079b2:	4833      	ldr	r0, [pc, #204]	; (8007a80 <I2C_Master_ISR_DMA+0x2a0>)
 80079b4:	f00b ffc6 	bl	8013944 <assert_failed>
 80079b8:	e781      	b.n	80078be <I2C_Master_ISR_DMA+0xde>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80079ba:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 80079bc:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 80079c0:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80079c2:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80079c4:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80079c6:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80079ca:	6815      	ldr	r5, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80079cc:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80079d0:	2928      	cmp	r1, #40	; 0x28
 80079d2:	bf14      	ite	ne
 80079d4:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
 80079d8:	f06f 0142 	mvneq.w	r1, #66	; 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80079dc:	4029      	ands	r1, r5
 80079de:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80079e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80079e4:	f7ff f814 	bl	8006a10 <HAL_I2C_MasterTxCpltCallback>
 80079e8:	e72c      	b.n	8007844 <I2C_Master_ISR_DMA+0x64>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->State         = HAL_I2C_STATE_READY;
 80079ee:	2520      	movs	r5, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80079f0:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80079f4:	2921      	cmp	r1, #33	; 0x21
 80079f6:	d0e0      	beq.n	80079ba <I2C_Master_ISR_DMA+0x1da>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80079f8:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 80079fa:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 80079fe:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007a00:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007a02:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a04:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007a08:	6815      	ldr	r5, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a0a:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8007a0e:	2928      	cmp	r1, #40	; 0x28
 8007a10:	bf14      	ite	ne
 8007a12:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
 8007a16:	f06f 0144 	mvneq.w	r1, #68	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007a1a:	4029      	ands	r1, r5
 8007a1c:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8007a1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007a22:	f7fe fff7 	bl	8006a14 <HAL_I2C_MasterRxCpltCallback>
 8007a26:	e70d      	b.n	8007844 <I2C_Master_ISR_DMA+0x64>
          xfermode = I2C_AUTOEND_MODE;
 8007a28:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8007a2c:	041d      	lsls	r5, r3, #16
 8007a2e:	e7b4      	b.n	800799a <I2C_Master_ISR_DMA+0x1ba>
  assert_param(IS_TRANSFER_MODE(Mode));
 8007a30:	4813      	ldr	r0, [pc, #76]	; (8007a80 <I2C_Master_ISR_DMA+0x2a0>)
 8007a32:	f641 1132 	movw	r1, #6450	; 0x1932
 8007a36:	f00b ff85 	bl	8013944 <assert_failed>
 8007a3a:	6820      	ldr	r0, [r4, #0]
 8007a3c:	e745      	b.n	80078ca <I2C_Master_ISR_DMA+0xea>
 8007a3e:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8007a42:	bf18      	it	ne
 8007a44:	f1b8 0f00 	cmpne.w	r8, #0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007a48:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <I2C_Master_ISR_DMA+0x298>)
 8007a4a:	bf14      	ite	ne
 8007a4c:	f04f 0801 	movne.w	r8, #1
 8007a50:	f04f 0800 	moveq.w	r8, #0
 8007a54:	429a      	cmp	r2, r3
 8007a56:	f43f af32 	beq.w	80078be <I2C_Master_ISR_DMA+0xde>
 8007a5a:	4b08      	ldr	r3, [pc, #32]	; (8007a7c <I2C_Master_ISR_DMA+0x29c>)
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d1a6      	bne.n	80079ae <I2C_Master_ISR_DMA+0x1ce>
 8007a60:	e72d      	b.n	80078be <I2C_Master_ISR_DMA+0xde>
 8007a62:	bf00      	nop
 8007a64:	08007035 	.word	0x08007035
 8007a68:	080077e1 	.word	0x080077e1
 8007a6c:	40005800 	.word	0x40005800
 8007a70:	40005400 	.word	0x40005400
 8007a74:	fc009c00 	.word	0xfc009c00
 8007a78:	58001c00 	.word	0x58001c00
 8007a7c:	40005c00 	.word	0x40005c00
 8007a80:	08144ed0 	.word	0x08144ed0

08007a84 <HAL_I2C_ER_IRQHandler>:
{
 8007a84:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007a86:	6803      	ldr	r3, [r0, #0]
 8007a88:	699a      	ldr	r2, [r3, #24]
 8007a8a:	461e      	mov	r6, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007a8c:	681c      	ldr	r4, [r3, #0]
 8007a8e:	f3c2 2180 	ubfx	r1, r2, #10, #1
 8007a92:	f3c2 2540 	ubfx	r5, r2, #9, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007a96:	05d2      	lsls	r2, r2, #23
 8007a98:	d518      	bpl.n	8007acc <HAL_I2C_ER_IRQHandler+0x48>
 8007a9a:	0622      	lsls	r2, r4, #24
 8007a9c:	d51e      	bpl.n	8007adc <HAL_I2C_ER_IRQHandler+0x58>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007a9e:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007aa0:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007aa4:	f042 0201 	orr.w	r2, r2, #1
 8007aa8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007aaa:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007aac:	b139      	cbz	r1, 8007abe <HAL_I2C_ER_IRQHandler+0x3a>
 8007aae:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007ab0:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007ab6:	f042 0208 	orr.w	r2, r2, #8
 8007aba:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007abc:	61d9      	str	r1, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007abe:	2d00      	cmp	r5, #0
 8007ac0:	d151      	bne.n	8007b66 <HAL_I2C_ER_IRQHandler+0xe2>
  tmperror = hi2c->ErrorCode;
 8007ac2:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007ac4:	f013 0f0b 	tst.w	r3, #11
 8007ac8:	d112      	bne.n	8007af0 <HAL_I2C_ER_IRQHandler+0x6c>
}
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007acc:	b141      	cbz	r1, 8007ae0 <HAL_I2C_ER_IRQHandler+0x5c>
 8007ace:	0626      	lsls	r6, r4, #24
 8007ad0:	d4ee      	bmi.n	8007ab0 <HAL_I2C_ER_IRQHandler+0x2c>
  tmperror = hi2c->ErrorCode;
 8007ad2:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007ad4:	f013 0f0b 	tst.w	r3, #11
 8007ad8:	d0f7      	beq.n	8007aca <HAL_I2C_ER_IRQHandler+0x46>
 8007ada:	e009      	b.n	8007af0 <HAL_I2C_ER_IRQHandler+0x6c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007adc:	2900      	cmp	r1, #0
 8007ade:	d1f0      	bne.n	8007ac2 <HAL_I2C_ER_IRQHandler+0x3e>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ae0:	2d00      	cmp	r5, #0
 8007ae2:	d0ee      	beq.n	8007ac2 <HAL_I2C_ER_IRQHandler+0x3e>
 8007ae4:	0624      	lsls	r4, r4, #24
 8007ae6:	d43f      	bmi.n	8007b68 <HAL_I2C_ER_IRQHandler+0xe4>
  tmperror = hi2c->ErrorCode;
 8007ae8:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007aea:	f013 0f0b 	tst.w	r3, #11
 8007aee:	d0ec      	beq.n	8007aca <HAL_I2C_ER_IRQHandler+0x46>
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007af0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007af4:	2100      	movs	r1, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007af6:	4c53      	ldr	r4, [pc, #332]	; (8007c44 <HAL_I2C_ER_IRQHandler+0x1c0>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007af8:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007afc:	3a28      	subs	r2, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007afe:	62c4      	str	r4, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007b00:	8541      	strh	r1, [r0, #42]	; 0x2a
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007b02:	2a02      	cmp	r2, #2
  hi2c->ErrorCode |= ErrorCode;
 8007b04:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007b06:	6801      	ldr	r1, [r0, #0]
 8007b08:	ea43 0304 	orr.w	r3, r3, r4
 8007b0c:	6443      	str	r3, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007b0e:	d937      	bls.n	8007b80 <HAL_I2C_ER_IRQHandler+0xfc>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b10:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b14:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007b18:	680b      	ldr	r3, [r1, #0]
 8007b1a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007b1e:	600b      	str	r3, [r1, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007b20:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007b24:	2b60      	cmp	r3, #96	; 0x60
 8007b26:	d002      	beq.n	8007b2e <HAL_I2C_ER_IRQHandler+0xaa>
      hi2c->State         = HAL_I2C_STATE_READY;
 8007b28:	2320      	movs	r3, #32
 8007b2a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	6343      	str	r3, [r0, #52]	; 0x34
 8007b32:	4604      	mov	r4, r0
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8007b34:	6b80      	ldr	r0, [r0, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 8007b36:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8007b38:	b118      	cbz	r0, 8007b42 <HAL_I2C_ER_IRQHandler+0xbe>
 8007b3a:	2b11      	cmp	r3, #17
 8007b3c:	d039      	beq.n	8007bb2 <HAL_I2C_ER_IRQHandler+0x12e>
 8007b3e:	2b21      	cmp	r3, #33	; 0x21
 8007b40:	d037      	beq.n	8007bb2 <HAL_I2C_ER_IRQHandler+0x12e>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8007b42:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007b44:	b118      	cbz	r0, 8007b4e <HAL_I2C_ER_IRQHandler+0xca>
 8007b46:	2b12      	cmp	r3, #18
 8007b48:	d051      	beq.n	8007bee <HAL_I2C_ER_IRQHandler+0x16a>
 8007b4a:	2b22      	cmp	r3, #34	; 0x22
 8007b4c:	d04f      	beq.n	8007bee <HAL_I2C_ER_IRQHandler+0x16a>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b4e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007b52:	2b60      	cmp	r3, #96	; 0x60
 8007b54:	d064      	beq.n	8007c20 <HAL_I2C_ER_IRQHandler+0x19c>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b56:	2300      	movs	r3, #0
    HAL_I2C_ErrorCallback(hi2c);
 8007b58:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b5a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007b5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007b60:	f7fe fff6 	bl	8006b50 <HAL_I2C_ErrorCallback>
}
 8007b64:	bd70      	pop	{r4, r5, r6, pc}
 8007b66:	6806      	ldr	r6, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007b68:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007b6e:	f043 0302 	orr.w	r3, r3, #2
 8007b72:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b74:	61f2      	str	r2, [r6, #28]
  tmperror = hi2c->ErrorCode;
 8007b76:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007b78:	f013 0f0b 	tst.w	r3, #11
 8007b7c:	d0a5      	beq.n	8007aca <HAL_I2C_ER_IRQHandler+0x46>
 8007b7e:	e7b7      	b.n	8007af0 <HAL_I2C_ER_IRQHandler+0x6c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b80:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007b84:	2628      	movs	r6, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b86:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b8a:	4032      	ands	r2, r6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007b8c:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b8e:	4034      	ands	r4, r6
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007b90:	4d2d      	ldr	r5, [pc, #180]	; (8007c48 <HAL_I2C_ER_IRQHandler+0x1c4>)
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b92:	42b2      	cmp	r2, r6
 8007b94:	bf14      	ite	ne
 8007b96:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 8007b9a:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b9e:	42b4      	cmp	r4, r6
 8007ba0:	bf18      	it	ne
 8007ba2:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	600b      	str	r3, [r1, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007baa:	f880 6041 	strb.w	r6, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007bae:	6345      	str	r5, [r0, #52]	; 0x34
 8007bb0:	e7bf      	b.n	8007b32 <HAL_I2C_ER_IRQHandler+0xae>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	0451      	lsls	r1, r2, #17
 8007bb8:	d504      	bpl.n	8007bc4 <HAL_I2C_ER_IRQHandler+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007bc4:	f7fc fe6a 	bl	800489c <HAL_DMA_GetState>
 8007bc8:	2801      	cmp	r0, #1
 8007bca:	d0c0      	beq.n	8007b4e <HAL_I2C_ER_IRQHandler+0xca>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007bcc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8007bce:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007bd0:	491e      	ldr	r1, [pc, #120]	; (8007c4c <HAL_I2C_ER_IRQHandler+0x1c8>)
 8007bd2:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8007bd4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007bd8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007bda:	f7fc f907 	bl	8003dec <HAL_DMA_Abort_IT>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	f43f af73 	beq.w	8007aca <HAL_I2C_ER_IRQHandler+0x46>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007be4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8007be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007bea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007bec:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	0412      	lsls	r2, r2, #16
 8007bf4:	d41f      	bmi.n	8007c36 <HAL_I2C_ER_IRQHandler+0x1b2>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bf6:	f7fc fe51 	bl	800489c <HAL_DMA_GetState>
 8007bfa:	2801      	cmp	r0, #1
 8007bfc:	d0a7      	beq.n	8007b4e <HAL_I2C_ER_IRQHandler+0xca>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007bfe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 8007c00:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007c02:	4912      	ldr	r1, [pc, #72]	; (8007c4c <HAL_I2C_ER_IRQHandler+0x1c8>)
 8007c04:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8007c06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007c0a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007c0c:	f7fc f8ee 	bl	8003dec <HAL_DMA_Abort_IT>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	f43f af5a 	beq.w	8007aca <HAL_I2C_ER_IRQHandler+0x46>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c16:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8007c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007c1e:	4718      	bx	r3
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c20:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007c22:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8007c24:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8007c26:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007c2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c2e:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8007c30:	f7fe ff90 	bl	8006b54 <HAL_I2C_AbortCpltCallback>
}
 8007c34:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007c40:	e7d9      	b.n	8007bf6 <HAL_I2C_ER_IRQHandler+0x172>
 8007c42:	bf00      	nop
 8007c44:	ffff0000 	.word	0xffff0000
 8007c48:	08006e8d 	.word	0x08006e8d
 8007c4c:	08006b59 	.word	0x08006b59

08007c50 <I2C_DMAError>:
{
 8007c50:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c52:	6b85      	ldr	r5, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8007c54:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8007c56:	b124      	cbz	r4, 8007c62 <I2C_DMAError+0x12>
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8007c58:	6822      	ldr	r2, [r4, #0]
 8007c5a:	6854      	ldr	r4, [r2, #4]
 8007c5c:	fab4 f484 	clz	r4, r4
 8007c60:	0964      	lsrs	r4, r4, #5
  if (hi2c->hdmarx != NULL)
 8007c62:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d049      	beq.n	8007cfc <I2C_DMAError+0xac>
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	6853      	ldr	r3, [r2, #4]
 8007c6c:	fab3 f383 	clz	r3, r3
 8007c70:	095b      	lsrs	r3, r3, #5
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d042      	beq.n	8007cfc <I2C_DMAError+0xac>
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007c76:	f7fc fe15 	bl	80048a4 <HAL_DMA_GetError>
 8007c7a:	2802      	cmp	r0, #2
 8007c7c:	d03d      	beq.n	8007cfa <I2C_DMAError+0xaa>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007c7e:	6829      	ldr	r1, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c80:	2200      	movs	r2, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c82:	4852      	ldr	r0, [pc, #328]	; (8007dcc <I2C_DMAError+0x17c>)
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007c84:	684b      	ldr	r3, [r1, #4]
 8007c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c8a:	604b      	str	r3, [r1, #4]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007c8c:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c90:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007c94:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c96:	62e8      	str	r0, [r5, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007c98:	856a      	strh	r2, [r5, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8007c9a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007c9c:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8007c9e:	f042 0210 	orr.w	r2, r2, #16
 8007ca2:	646a      	str	r2, [r5, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007ca4:	d931      	bls.n	8007d0a <I2C_DMAError+0xba>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007ca6:	682a      	ldr	r2, [r5, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ca8:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007cac:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007cb0:	6813      	ldr	r3, [r2, #0]
 8007cb2:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007cb6:	6013      	str	r3, [r2, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007cb8:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 8007cbc:	2b60      	cmp	r3, #96	; 0x60
 8007cbe:	d002      	beq.n	8007cc6 <I2C_DMAError+0x76>
      hi2c->State         = HAL_I2C_STATE_READY;
 8007cc0:	2320      	movs	r3, #32
 8007cc2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8007cca:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 8007ccc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8007cce:	b118      	cbz	r0, 8007cd8 <I2C_DMAError+0x88>
 8007cd0:	2b11      	cmp	r3, #17
 8007cd2:	d034      	beq.n	8007d3e <I2C_DMAError+0xee>
 8007cd4:	2b21      	cmp	r3, #33	; 0x21
 8007cd6:	d032      	beq.n	8007d3e <I2C_DMAError+0xee>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8007cd8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8007cda:	b118      	cbz	r0, 8007ce4 <I2C_DMAError+0x94>
 8007cdc:	2b12      	cmp	r3, #18
 8007cde:	d046      	beq.n	8007d6e <I2C_DMAError+0x11e>
 8007ce0:	2b22      	cmp	r3, #34	; 0x22
 8007ce2:	d044      	beq.n	8007d6e <I2C_DMAError+0x11e>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ce4:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 8007ce8:	2b60      	cmp	r3, #96	; 0x60
 8007cea:	d063      	beq.n	8007db4 <I2C_DMAError+0x164>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cec:	2300      	movs	r3, #0
    HAL_I2C_ErrorCallback(hi2c);
 8007cee:	4628      	mov	r0, r5
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cf0:	632b      	str	r3, [r5, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007cf2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007cf6:	f7fe ff2b 	bl	8006b50 <HAL_I2C_ErrorCallback>
}
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007cfc:	f7fc fdd2 	bl	80048a4 <HAL_DMA_GetError>
 8007d00:	2802      	cmp	r0, #2
 8007d02:	d0fa      	beq.n	8007cfa <I2C_DMAError+0xaa>
 8007d04:	07e0      	lsls	r0, r4, #31
 8007d06:	d4ba      	bmi.n	8007c7e <I2C_DMAError+0x2e>
}
 8007d08:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d0a:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007d0e:	2628      	movs	r6, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d10:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d14:	4033      	ands	r3, r6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007d16:	6828      	ldr	r0, [r5, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d18:	4031      	ands	r1, r6
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007d1a:	4c2d      	ldr	r4, [pc, #180]	; (8007dd0 <I2C_DMAError+0x180>)
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d1c:	42b3      	cmp	r3, r6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007d1e:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d20:	bf14      	ite	ne
 8007d22:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 8007d26:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d2a:	42b1      	cmp	r1, r6
 8007d2c:	bf18      	it	ne
 8007d2e:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007d32:	4013      	ands	r3, r2
 8007d34:	6003      	str	r3, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007d36:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007d3a:	636c      	str	r4, [r5, #52]	; 0x34
 8007d3c:	e7c5      	b.n	8007cca <I2C_DMAError+0x7a>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007d3e:	682b      	ldr	r3, [r5, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	0451      	lsls	r1, r2, #17
 8007d44:	d430      	bmi.n	8007da8 <I2C_DMAError+0x158>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d46:	f7fc fda9 	bl	800489c <HAL_DMA_GetState>
 8007d4a:	2801      	cmp	r0, #1
 8007d4c:	d0ca      	beq.n	8007ce4 <I2C_DMAError+0x94>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d4e:	6baa      	ldr	r2, [r5, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8007d50:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d52:	4920      	ldr	r1, [pc, #128]	; (8007dd4 <I2C_DMAError+0x184>)
 8007d54:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8007d56:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d5a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007d5c:	f7fc f846 	bl	8003dec <HAL_DMA_Abort_IT>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d0ca      	beq.n	8007cfa <I2C_DMAError+0xaa>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d64:	6ba8      	ldr	r0, [r5, #56]	; 0x38
}
 8007d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d6a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007d6c:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007d6e:	682b      	ldr	r3, [r5, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	0412      	lsls	r2, r2, #16
 8007d74:	d504      	bpl.n	8007d80 <I2C_DMAError+0x130>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d80:	f7fc fd8c 	bl	800489c <HAL_DMA_GetState>
 8007d84:	2801      	cmp	r0, #1
 8007d86:	d0ad      	beq.n	8007ce4 <I2C_DMAError+0x94>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d88:	6bea      	ldr	r2, [r5, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 8007d8a:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d8c:	4911      	ldr	r1, [pc, #68]	; (8007dd4 <I2C_DMAError+0x184>)
 8007d8e:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8007d90:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d94:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8007d96:	f7fc f829 	bl	8003dec <HAL_DMA_Abort_IT>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d0ad      	beq.n	8007cfa <I2C_DMAError+0xaa>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d9e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
}
 8007da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007da4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007da6:	4718      	bx	r3
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007db2:	e7c8      	b.n	8007d46 <I2C_DMAError+0xf6>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007db4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007db6:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8007db8:	4628      	mov	r0, r5
    hi2c->State = HAL_I2C_STATE_READY;
 8007dba:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007dbe:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8007dc2:	632b      	str	r3, [r5, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8007dc4:	f7fe fec6 	bl	8006b54 <HAL_I2C_AbortCpltCallback>
}
 8007dc8:	bd70      	pop	{r4, r5, r6, pc}
 8007dca:	bf00      	nop
 8007dcc:	ffff0000 	.word	0xffff0000
 8007dd0:	08006e8d 	.word	0x08006e8d
 8007dd4:	08006b59 	.word	0x08006b59

08007dd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007dd8:	b570      	push	{r4, r5, r6, lr}
 8007dda:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007ddc:	4b25      	ldr	r3, [pc, #148]	; (8007e74 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 8007dde:	4826      	ldr	r0, [pc, #152]	; (8007e78 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
{
 8007de0:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007de2:	6822      	ldr	r2, [r4, #0]
 8007de4:	4925      	ldr	r1, [pc, #148]	; (8007e7c <HAL_I2CEx_ConfigAnalogFilter+0xa4>)
 8007de6:	429a      	cmp	r2, r3
 8007de8:	bf18      	it	ne
 8007dea:	4282      	cmpne	r2, r0
 8007dec:	bf14      	ite	ne
 8007dee:	2301      	movne	r3, #1
 8007df0:	2300      	moveq	r3, #0
 8007df2:	428a      	cmp	r2, r1
 8007df4:	bf0c      	ite	eq
 8007df6:	2300      	moveq	r3, #0
 8007df8:	f003 0301 	andne.w	r3, r3, #1
 8007dfc:	b113      	cbz	r3, 8007e04 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8007dfe:	4b20      	ldr	r3, [pc, #128]	; (8007e80 <HAL_I2CEx_ConfigAnalogFilter+0xa8>)
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d132      	bne.n	8007e6a <HAL_I2CEx_ConfigAnalogFilter+0x92>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8007e04:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 8007e08:	d12a      	bne.n	8007e60 <HAL_I2CEx_ConfigAnalogFilter+0x88>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e0a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b20      	cmp	r3, #32
 8007e12:	d123      	bne.n	8007e5c <HAL_I2CEx_ConfigAnalogFilter+0x84>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e14:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8007e18:	2a01      	cmp	r2, #1
 8007e1a:	d01f      	beq.n	8007e5c <HAL_I2CEx_ConfigAnalogFilter+0x84>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e1c:	6826      	ldr	r6, [r4, #0]
    __HAL_LOCK(hi2c);
 8007e1e:	2101      	movs	r1, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e20:	2224      	movs	r2, #36	; 0x24
    __HAL_LOCK(hi2c);
 8007e22:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e26:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e28:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8007e2c:	6832      	ldr	r2, [r6, #0]

    return HAL_OK;
 8007e2e:	4608      	mov	r0, r1
    __HAL_I2C_DISABLE(hi2c);
 8007e30:	f022 0201 	bic.w	r2, r2, #1
 8007e34:	6032      	str	r2, [r6, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e36:	6826      	ldr	r6, [r4, #0]
 8007e38:	6832      	ldr	r2, [r6, #0]
 8007e3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e3e:	6032      	str	r2, [r6, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e40:	6826      	ldr	r6, [r4, #0]
 8007e42:	6832      	ldr	r2, [r6, #0]
 8007e44:	4315      	orrs	r5, r2
 8007e46:	6035      	str	r5, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007e48:	6825      	ldr	r5, [r4, #0]
 8007e4a:	682a      	ldr	r2, [r5, #0]
 8007e4c:	f042 0201 	orr.w	r2, r2, #1
 8007e50:	602a      	str	r2, [r5, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007e52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007e56:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007e5a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8007e5c:	2002      	movs	r0, #2
}
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8007e60:	2165      	movs	r1, #101	; 0x65
 8007e62:	4808      	ldr	r0, [pc, #32]	; (8007e84 <HAL_I2CEx_ConfigAnalogFilter+0xac>)
 8007e64:	f00b fd6e 	bl	8013944 <assert_failed>
 8007e68:	e7cf      	b.n	8007e0a <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007e6a:	2164      	movs	r1, #100	; 0x64
 8007e6c:	4805      	ldr	r0, [pc, #20]	; (8007e84 <HAL_I2CEx_ConfigAnalogFilter+0xac>)
 8007e6e:	f00b fd69 	bl	8013944 <assert_failed>
 8007e72:	e7c7      	b.n	8007e04 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8007e74:	40005400 	.word	0x40005400
 8007e78:	40005800 	.word	0x40005800
 8007e7c:	40005c00 	.word	0x40005c00
 8007e80:	58001c00 	.word	0x58001c00
 8007e84:	08144f08 	.word	0x08144f08

08007e88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	4604      	mov	r4, r0
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007e8c:	4b24      	ldr	r3, [pc, #144]	; (8007f20 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8007e8e:	4825      	ldr	r0, [pc, #148]	; (8007f24 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
{
 8007e90:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007e92:	6822      	ldr	r2, [r4, #0]
 8007e94:	4924      	ldr	r1, [pc, #144]	; (8007f28 <HAL_I2CEx_ConfigDigitalFilter+0xa0>)
 8007e96:	429a      	cmp	r2, r3
 8007e98:	bf18      	it	ne
 8007e9a:	4282      	cmpne	r2, r0
 8007e9c:	bf14      	ite	ne
 8007e9e:	2301      	movne	r3, #1
 8007ea0:	2300      	moveq	r3, #0
 8007ea2:	428a      	cmp	r2, r1
 8007ea4:	bf0c      	ite	eq
 8007ea6:	2300      	moveq	r3, #0
 8007ea8:	f003 0301 	andne.w	r3, r3, #1
 8007eac:	b113      	cbz	r3, 8007eb4 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8007eae:	4b1f      	ldr	r3, [pc, #124]	; (8007f2c <HAL_I2CEx_ConfigDigitalFilter+0xa4>)
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d12f      	bne.n	8007f14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8007eb4:	2d0f      	cmp	r5, #15
 8007eb6:	d828      	bhi.n	8007f0a <HAL_I2CEx_ConfigDigitalFilter+0x82>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007eb8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	d121      	bne.n	8007f06 <HAL_I2CEx_ConfigDigitalFilter+0x7e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ec2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8007ec6:	2a01      	cmp	r2, #1
 8007ec8:	d01d      	beq.n	8007f06 <HAL_I2CEx_ConfigDigitalFilter+0x7e>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007eca:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8007ecc:	2001      	movs	r0, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ece:	2224      	movs	r2, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ed0:	2600      	movs	r6, #0
    __HAL_LOCK(hi2c);
 8007ed2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ed6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

    return HAL_OK;
 8007eda:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8007edc:	680a      	ldr	r2, [r1, #0]
 8007ede:	f022 0201 	bic.w	r2, r2, #1
 8007ee2:	600a      	str	r2, [r1, #0]
    tmpreg = hi2c->Instance->CR1;
 8007ee4:	6822      	ldr	r2, [r4, #0]
 8007ee6:	6811      	ldr	r1, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8007ee8:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8007eec:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8007ef0:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007ef2:	6821      	ldr	r1, [r4, #0]
 8007ef4:	680a      	ldr	r2, [r1, #0]
 8007ef6:	f042 0201 	orr.w	r2, r2, #1
 8007efa:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007efc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007f00:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007f04:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8007f06:	2002      	movs	r0, #2
}
 8007f08:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8007f0a:	2193      	movs	r1, #147	; 0x93
 8007f0c:	4808      	ldr	r0, [pc, #32]	; (8007f30 <HAL_I2CEx_ConfigDigitalFilter+0xa8>)
 8007f0e:	f00b fd19 	bl	8013944 <assert_failed>
 8007f12:	e7d1      	b.n	8007eb8 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007f14:	2192      	movs	r1, #146	; 0x92
 8007f16:	4806      	ldr	r0, [pc, #24]	; (8007f30 <HAL_I2CEx_ConfigDigitalFilter+0xa8>)
 8007f18:	f00b fd14 	bl	8013944 <assert_failed>
 8007f1c:	e7ca      	b.n	8007eb4 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8007f1e:	bf00      	nop
 8007f20:	40005400 	.word	0x40005400
 8007f24:	40005800 	.word	0x40005800
 8007f28:	40005c00 	.word	0x40005c00
 8007f2c:	58001c00 	.word	0x58001c00
 8007f30:	08144f08 	.word	0x08144f08

08007f34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007f34:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8007f36:	1e43      	subs	r3, r0, #1
{
 8007f38:	4604      	mov	r4, r0
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d904      	bls.n	8007f48 <HAL_PWREx_ConfigSupply+0x14>
 8007f3e:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8007f42:	4812      	ldr	r0, [pc, #72]	; (8007f8c <HAL_PWREx_ConfigSupply+0x58>)
 8007f44:	f00b fcfe 	bl	8013944 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007f48:	4b11      	ldr	r3, [pc, #68]	; (8007f90 <HAL_PWREx_ConfigSupply+0x5c>)
 8007f4a:	68da      	ldr	r2, [r3, #12]
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007f4c:	68d8      	ldr	r0, [r3, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007f4e:	0752      	lsls	r2, r2, #29
 8007f50:	d405      	bmi.n	8007f5e <HAL_PWREx_ConfigSupply+0x2a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007f52:	f000 0007 	and.w	r0, r0, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007f56:	1b00      	subs	r0, r0, r4
 8007f58:	bf18      	it	ne
 8007f5a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8007f5c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007f5e:	f020 0007 	bic.w	r0, r0, #7
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f62:	461d      	mov	r5, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007f64:	4320      	orrs	r0, r4
 8007f66:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8007f68:	f7f8 fd5a 	bl	8000a20 <HAL_GetTick>
 8007f6c:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f6e:	e005      	b.n	8007f7c <HAL_PWREx_ConfigSupply+0x48>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007f70:	f7f8 fd56 	bl	8000a20 <HAL_GetTick>
 8007f74:	1b00      	subs	r0, r0, r4
 8007f76:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007f7a:	d804      	bhi.n	8007f86 <HAL_PWREx_ConfigSupply+0x52>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f7c:	686b      	ldr	r3, [r5, #4]
 8007f7e:	049b      	lsls	r3, r3, #18
 8007f80:	d5f6      	bpl.n	8007f70 <HAL_PWREx_ConfigSupply+0x3c>
  return HAL_OK;
 8007f82:	2000      	movs	r0, #0
}
 8007f84:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007f86:	2001      	movs	r0, #1
}
 8007f88:	bd38      	pop	{r3, r4, r5, pc}
 8007f8a:	bf00      	nop
 8007f8c:	08144f44 	.word	0x08144f44
 8007f90:	58024800 	.word	0x58024800

08007f94 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007f94:	4a02      	ldr	r2, [pc, #8]	; (8007fa0 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8007f96:	68d3      	ldr	r3, [r2, #12]
 8007f98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f9c:	60d3      	str	r3, [r2, #12]
}
 8007f9e:	4770      	bx	lr
 8007fa0:	58024800 	.word	0x58024800

08007fa4 <HAL_PWREx_DisableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_DisableUSBVoltageDetector (void)
{
  /* Disable the USB voltage detector */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007fa4:	4a02      	ldr	r2, [pc, #8]	; (8007fb0 <HAL_PWREx_DisableUSBVoltageDetector+0xc>)
 8007fa6:	68d3      	ldr	r3, [r2, #12]
 8007fa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fac:	60d3      	str	r3, [r2, #12]
}
 8007fae:	4770      	bx	lr
 8007fb0:	58024800 	.word	0x58024800

08007fb4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	f000 823c 	beq.w	8008432 <HAL_RCC_OscConfig+0x47e>
{
 8007fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007fbc:	6803      	ldr	r3, [r0, #0]
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 80a6 	beq.w	8008112 <HAL_RCC_OscConfig+0x15e>
 8007fc6:	0698      	lsls	r0, r3, #26
 8007fc8:	f000 821e 	beq.w	8008408 <HAL_RCC_OscConfig+0x454>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fcc:	07d9      	lsls	r1, r3, #31
 8007fce:	d536      	bpl.n	800803e <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007fd0:	6863      	ldr	r3, [r4, #4]
 8007fd2:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8007fd6:	d003      	beq.n	8007fe0 <HAL_RCC_OscConfig+0x2c>
 8007fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fdc:	f040 81e8 	bne.w	80083b0 <HAL_RCC_OscConfig+0x3fc>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fe0:	4aa7      	ldr	r2, [pc, #668]	; (8008280 <HAL_RCC_OscConfig+0x2cc>)
 8007fe2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fe4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007fea:	2b10      	cmp	r3, #16
 8007fec:	f000 81f2 	beq.w	80083d4 <HAL_RCC_OscConfig+0x420>
 8007ff0:	2b18      	cmp	r3, #24
 8007ff2:	f000 81ea 	beq.w	80083ca <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ff6:	6863      	ldr	r3, [r4, #4]
 8007ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ffc:	f000 81f5 	beq.w	80083ea <HAL_RCC_OscConfig+0x436>
 8008000:	2b00      	cmp	r3, #0
 8008002:	f040 8267 	bne.w	80084d4 <HAL_RCC_OscConfig+0x520>
 8008006:	4b9e      	ldr	r3, [pc, #632]	; (8008280 <HAL_RCC_OscConfig+0x2cc>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008016:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008018:	6863      	ldr	r3, [r4, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 81fb 	beq.w	8008416 <HAL_RCC_OscConfig+0x462>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008020:	f7f8 fcfe 	bl	8000a20 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008024:	4d96      	ldr	r5, [pc, #600]	; (8008280 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8008026:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008028:	e005      	b.n	8008036 <HAL_RCC_OscConfig+0x82>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800802a:	f7f8 fcf9 	bl	8000a20 <HAL_GetTick>
 800802e:	1b80      	subs	r0, r0, r6
 8008030:	2864      	cmp	r0, #100	; 0x64
 8008032:	f200 81e7 	bhi.w	8008404 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008036:	682b      	ldr	r3, [r5, #0]
 8008038:	039b      	lsls	r3, r3, #14
 800803a:	d5f6      	bpl.n	800802a <HAL_RCC_OscConfig+0x76>
 800803c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800803e:	0798      	lsls	r0, r3, #30
 8008040:	d52b      	bpl.n	800809a <HAL_RCC_OscConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8008042:	68e2      	ldr	r2, [r4, #12]
 8008044:	2a19      	cmp	r2, #25
 8008046:	f200 8288 	bhi.w	800855a <HAL_RCC_OscConfig+0x5a6>
 800804a:	4b8e      	ldr	r3, [pc, #568]	; (8008284 <HAL_RCC_OscConfig+0x2d0>)
 800804c:	40d3      	lsrs	r3, r2
 800804e:	07d9      	lsls	r1, r3, #31
 8008050:	f140 8283 	bpl.w	800855a <HAL_RCC_OscConfig+0x5a6>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	2b7f      	cmp	r3, #127	; 0x7f
 8008058:	f200 81a4 	bhi.w	80083a4 <HAL_RCC_OscConfig+0x3f0>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800805c:	4a88      	ldr	r2, [pc, #544]	; (8008280 <HAL_RCC_OscConfig+0x2cc>)
 800805e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008060:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008062:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8008066:	f040 8173 	bne.w	8008350 <HAL_RCC_OscConfig+0x39c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800806a:	4b85      	ldr	r3, [pc, #532]	; (8008280 <HAL_RCC_OscConfig+0x2cc>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	075b      	lsls	r3, r3, #29
 8008070:	d503      	bpl.n	800807a <HAL_RCC_OscConfig+0xc6>
 8008072:	68e3      	ldr	r3, [r4, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 81b6 	beq.w	80083e6 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800807a:	f7f8 fce9 	bl	8000a50 <HAL_GetREVID>
 800807e:	f241 0303 	movw	r3, #4099	; 0x1003
 8008082:	4a7f      	ldr	r2, [pc, #508]	; (8008280 <HAL_RCC_OscConfig+0x2cc>)
 8008084:	4298      	cmp	r0, r3
 8008086:	6921      	ldr	r1, [r4, #16]
 8008088:	6853      	ldr	r3, [r2, #4]
 800808a:	f200 825b 	bhi.w	8008544 <HAL_RCC_OscConfig+0x590>
 800808e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008092:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8008096:	6053      	str	r3, [r2, #4]
 8008098:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800809a:	06d9      	lsls	r1, r3, #27
 800809c:	d539      	bpl.n	8008112 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 800809e:	69e3      	ldr	r3, [r4, #28]
 80080a0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80080a4:	f040 81fd 	bne.w	80084a2 <HAL_RCC_OscConfig+0x4ee>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 80080a8:	6a23      	ldr	r3, [r4, #32]
 80080aa:	2b3f      	cmp	r3, #63	; 0x3f
 80080ac:	f200 81f3 	bhi.w	8008496 <HAL_RCC_OscConfig+0x4e2>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080b0:	4a73      	ldr	r2, [pc, #460]	; (8008280 <HAL_RCC_OscConfig+0x2cc>)
 80080b2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80080ba:	2b08      	cmp	r3, #8
 80080bc:	f000 81c0 	beq.w	8008440 <HAL_RCC_OscConfig+0x48c>
 80080c0:	2b18      	cmp	r3, #24
 80080c2:	f000 81b8 	beq.w	8008436 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80080c6:	69e3      	ldr	r3, [r4, #28]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 8211 	beq.w	80084f0 <HAL_RCC_OscConfig+0x53c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80080ce:	4b6c      	ldr	r3, [pc, #432]	; (8008280 <HAL_RCC_OscConfig+0x2cc>)
 80080d0:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080d2:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 80080d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80080d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80080da:	f7f8 fca1 	bl	8000a20 <HAL_GetTick>
 80080de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080e0:	e005      	b.n	80080ee <HAL_RCC_OscConfig+0x13a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80080e2:	f7f8 fc9d 	bl	8000a20 <HAL_GetTick>
 80080e6:	1b80      	subs	r0, r0, r6
 80080e8:	2802      	cmp	r0, #2
 80080ea:	f200 818b 	bhi.w	8008404 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080ee:	682b      	ldr	r3, [r5, #0]
 80080f0:	05db      	lsls	r3, r3, #23
 80080f2:	d5f6      	bpl.n	80080e2 <HAL_RCC_OscConfig+0x12e>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080f4:	f7f8 fcac 	bl	8000a50 <HAL_GetREVID>
 80080f8:	f241 0303 	movw	r3, #4099	; 0x1003
 80080fc:	4298      	cmp	r0, r3
 80080fe:	f200 82b5 	bhi.w	800866c <HAL_RCC_OscConfig+0x6b8>
 8008102:	686b      	ldr	r3, [r5, #4]
 8008104:	6a22      	ldr	r2, [r4, #32]
 8008106:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800810a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800810e:	606b      	str	r3, [r5, #4]
 8008110:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008112:	071d      	lsls	r5, r3, #28
 8008114:	d51a      	bpl.n	800814c <HAL_RCC_OscConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008116:	6963      	ldr	r3, [r4, #20]
 8008118:	2b01      	cmp	r3, #1
 800811a:	f200 814f 	bhi.w	80083bc <HAL_RCC_OscConfig+0x408>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 81a6 	beq.w	8008470 <HAL_RCC_OscConfig+0x4bc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008124:	4b56      	ldr	r3, [pc, #344]	; (8008280 <HAL_RCC_OscConfig+0x2cc>)
 8008126:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008128:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800812a:	f042 0201 	orr.w	r2, r2, #1
 800812e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008130:	f7f8 fc76 	bl	8000a20 <HAL_GetTick>
 8008134:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008136:	e005      	b.n	8008144 <HAL_RCC_OscConfig+0x190>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008138:	f7f8 fc72 	bl	8000a20 <HAL_GetTick>
 800813c:	1b80      	subs	r0, r0, r6
 800813e:	2802      	cmp	r0, #2
 8008140:	f200 8160 	bhi.w	8008404 <HAL_RCC_OscConfig+0x450>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008144:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008146:	0798      	lsls	r0, r3, #30
 8008148:	d5f6      	bpl.n	8008138 <HAL_RCC_OscConfig+0x184>
 800814a:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800814c:	069a      	lsls	r2, r3, #26
 800814e:	d51a      	bpl.n	8008186 <HAL_RCC_OscConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8008150:	69a3      	ldr	r3, [r4, #24]
 8008152:	2b01      	cmp	r3, #1
 8008154:	f200 814f 	bhi.w	80083f6 <HAL_RCC_OscConfig+0x442>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 81a8 	beq.w	80084ae <HAL_RCC_OscConfig+0x4fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800815e:	4b48      	ldr	r3, [pc, #288]	; (8008280 <HAL_RCC_OscConfig+0x2cc>)
 8008160:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008162:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8008164:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008168:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800816a:	f7f8 fc59 	bl	8000a20 <HAL_GetTick>
 800816e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008170:	e005      	b.n	800817e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008172:	f7f8 fc55 	bl	8000a20 <HAL_GetTick>
 8008176:	1b80      	subs	r0, r0, r6
 8008178:	2802      	cmp	r0, #2
 800817a:	f200 8143 	bhi.w	8008404 <HAL_RCC_OscConfig+0x450>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800817e:	682b      	ldr	r3, [r5, #0]
 8008180:	049f      	lsls	r7, r3, #18
 8008182:	d5f6      	bpl.n	8008172 <HAL_RCC_OscConfig+0x1be>
 8008184:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008186:	0759      	lsls	r1, r3, #29
 8008188:	d53c      	bpl.n	8008204 <HAL_RCC_OscConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800818a:	68a3      	ldr	r3, [r4, #8]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d902      	bls.n	8008196 <HAL_RCC_OscConfig+0x1e2>
 8008190:	2b05      	cmp	r3, #5
 8008192:	f040 81f8 	bne.w	8008586 <HAL_RCC_OscConfig+0x5d2>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008196:	4b3c      	ldr	r3, [pc, #240]	; (8008288 <HAL_RCC_OscConfig+0x2d4>)
 8008198:	681a      	ldr	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800819a:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 800819c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081a0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80081a2:	f7f8 fc3d 	bl	8000a20 <HAL_GetTick>
 80081a6:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081a8:	e005      	b.n	80081b6 <HAL_RCC_OscConfig+0x202>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80081aa:	f7f8 fc39 	bl	8000a20 <HAL_GetTick>
 80081ae:	1b80      	subs	r0, r0, r6
 80081b0:	2864      	cmp	r0, #100	; 0x64
 80081b2:	f200 8127 	bhi.w	8008404 <HAL_RCC_OscConfig+0x450>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081b6:	682b      	ldr	r3, [r5, #0]
 80081b8:	05da      	lsls	r2, r3, #23
 80081ba:	d5f6      	bpl.n	80081aa <HAL_RCC_OscConfig+0x1f6>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081bc:	68a3      	ldr	r3, [r4, #8]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	f000 821d 	beq.w	80085fe <HAL_RCC_OscConfig+0x64a>
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f040 8244 	bne.w	8008652 <HAL_RCC_OscConfig+0x69e>
 80081ca:	4b2d      	ldr	r3, [pc, #180]	; (8008280 <HAL_RCC_OscConfig+0x2cc>)
 80081cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081ce:	f022 0201 	bic.w	r2, r2, #1
 80081d2:	671a      	str	r2, [r3, #112]	; 0x70
 80081d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081d6:	f022 0204 	bic.w	r2, r2, #4
 80081da:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081dc:	68a3      	ldr	r3, [r4, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 8213 	beq.w	800860a <HAL_RCC_OscConfig+0x656>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e4:	f7f8 fc1c 	bl	8000a20 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081e8:	4d25      	ldr	r5, [pc, #148]	; (8008280 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80081ea:	4607      	mov	r7, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081ec:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081f0:	e005      	b.n	80081fe <HAL_RCC_OscConfig+0x24a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081f2:	f7f8 fc15 	bl	8000a20 <HAL_GetTick>
 80081f6:	1bc0      	subs	r0, r0, r7
 80081f8:	42b0      	cmp	r0, r6
 80081fa:	f200 8103 	bhi.w	8008404 <HAL_RCC_OscConfig+0x450>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081fe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008200:	079b      	lsls	r3, r3, #30
 8008202:	d5f6      	bpl.n	80081f2 <HAL_RCC_OscConfig+0x23e>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008204:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008206:	2802      	cmp	r0, #2
 8008208:	f200 81b6 	bhi.w	8008578 <HAL_RCC_OscConfig+0x5c4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800820c:	2800      	cmp	r0, #0
 800820e:	f000 809d 	beq.w	800834c <HAL_RCC_OscConfig+0x398>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008212:	4a1b      	ldr	r2, [pc, #108]	; (8008280 <HAL_RCC_OscConfig+0x2cc>)
 8008214:	6913      	ldr	r3, [r2, #16]
 8008216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800821a:	2b18      	cmp	r3, #24
 800821c:	f000 81c1 	beq.w	80085a2 <HAL_RCC_OscConfig+0x5ee>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008220:	2802      	cmp	r0, #2
 8008222:	f040 8203 	bne.w	800862c <HAL_RCC_OscConfig+0x678>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008226:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008228:	2b03      	cmp	r3, #3
 800822a:	f200 8253 	bhi.w	80086d4 <HAL_RCC_OscConfig+0x720>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800822e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008230:	3b01      	subs	r3, #1
 8008232:	2b3e      	cmp	r3, #62	; 0x3e
 8008234:	f200 8230 	bhi.w	8008698 <HAL_RCC_OscConfig+0x6e4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008238:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800823a:	3b04      	subs	r3, #4
 800823c:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8008240:	f200 8224 	bhi.w	800868c <HAL_RCC_OscConfig+0x6d8>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008244:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008246:	3b01      	subs	r3, #1
 8008248:	2b7f      	cmp	r3, #127	; 0x7f
 800824a:	f200 823d 	bhi.w	80086c8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800824e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008250:	3b01      	subs	r3, #1
 8008252:	2b7f      	cmp	r3, #127	; 0x7f
 8008254:	f200 8232 	bhi.w	80086bc <HAL_RCC_OscConfig+0x708>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8008258:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800825a:	3b01      	subs	r3, #1
 800825c:	2b7f      	cmp	r3, #127	; 0x7f
 800825e:	f200 8227 	bhi.w	80086b0 <HAL_RCC_OscConfig+0x6fc>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8008262:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008268:	f080 821c 	bcs.w	80086a4 <HAL_RCC_OscConfig+0x6f0>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800826c:	4b04      	ldr	r3, [pc, #16]	; (8008280 <HAL_RCC_OscConfig+0x2cc>)
 800826e:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008270:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8008272:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008276:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008278:	f7f8 fbd2 	bl	8000a20 <HAL_GetTick>
 800827c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800827e:	e00b      	b.n	8008298 <HAL_RCC_OscConfig+0x2e4>
 8008280:	58024400 	.word	0x58024400
 8008284:	02020203 	.word	0x02020203
 8008288:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800828c:	f7f8 fbc8 	bl	8000a20 <HAL_GetTick>
 8008290:	1b80      	subs	r0, r0, r6
 8008292:	2802      	cmp	r0, #2
 8008294:	f200 80b6 	bhi.w	8008404 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	0199      	lsls	r1, r3, #6
 800829c:	d4f6      	bmi.n	800828c <HAL_RCC_OscConfig+0x2d8>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800829e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80082a0:	4bb1      	ldr	r3, [pc, #708]	; (8008568 <HAL_RCC_OscConfig+0x5b4>)
 80082a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80082a4:	4013      	ands	r3, r2
 80082a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082a8:	49b0      	ldr	r1, [pc, #704]	; (800856c <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082aa:	4303      	orrs	r3, r0

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082ac:	4eb0      	ldr	r6, [pc, #704]	; (8008570 <HAL_RCC_OscConfig+0x5bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082ae:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80082b2:	62ab      	str	r3, [r5, #40]	; 0x28
 80082b4:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80082b6:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80082ba:	3f01      	subs	r7, #1
 80082bc:	1e50      	subs	r0, r2, #1
 80082be:	3b01      	subs	r3, #1
 80082c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80082c2:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80082c6:	025b      	lsls	r3, r3, #9
 80082c8:	0400      	lsls	r0, r0, #16
 80082ca:	3a01      	subs	r2, #1
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80082d2:	0612      	lsls	r2, r2, #24
 80082d4:	4303      	orrs	r3, r0
 80082d6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80082da:	433b      	orrs	r3, r7
 80082dc:	4313      	orrs	r3, r2
 80082de:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80082e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80082e2:	f023 0301 	bic.w	r3, r3, #1
 80082e6:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082e8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80082ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80082ec:	4011      	ands	r1, r2
 80082ee:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80082f2:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80082f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80082f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80082f8:	f023 030c 	bic.w	r3, r3, #12
 80082fc:	4313      	orrs	r3, r2
 80082fe:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008300:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008302:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008304:	f023 0302 	bic.w	r3, r3, #2
 8008308:	4313      	orrs	r3, r2
 800830a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800830c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800830e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008312:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008314:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800831a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800831c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800831e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008322:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8008324:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008326:	f043 0301 	orr.w	r3, r3, #1
 800832a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008332:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008334:	f7f8 fb74 	bl	8000a20 <HAL_GetTick>
 8008338:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800833a:	e004      	b.n	8008346 <HAL_RCC_OscConfig+0x392>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800833c:	f7f8 fb70 	bl	8000a20 <HAL_GetTick>
 8008340:	1b00      	subs	r0, r0, r4
 8008342:	2802      	cmp	r0, #2
 8008344:	d85e      	bhi.n	8008404 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008346:	6833      	ldr	r3, [r6, #0]
 8008348:	019a      	lsls	r2, r3, #6
 800834a:	d5f7      	bpl.n	800833c <HAL_RCC_OscConfig+0x388>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800834c:	2000      	movs	r0, #0
}
 800834e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008350:	2b18      	cmp	r3, #24
 8008352:	f000 80fe 	beq.w	8008552 <HAL_RCC_OscConfig+0x59e>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008356:	68e2      	ldr	r2, [r4, #12]
 8008358:	2a00      	cmp	r2, #0
 800835a:	f000 80de 	beq.w	800851a <HAL_RCC_OscConfig+0x566>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800835e:	4984      	ldr	r1, [pc, #528]	; (8008570 <HAL_RCC_OscConfig+0x5bc>)
 8008360:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008362:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008364:	f023 0319 	bic.w	r3, r3, #25
 8008368:	4313      	orrs	r3, r2
 800836a:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 800836c:	f7f8 fb58 	bl	8000a20 <HAL_GetTick>
 8008370:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008372:	e004      	b.n	800837e <HAL_RCC_OscConfig+0x3ca>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008374:	f7f8 fb54 	bl	8000a20 <HAL_GetTick>
 8008378:	1b80      	subs	r0, r0, r6
 800837a:	2802      	cmp	r0, #2
 800837c:	d842      	bhi.n	8008404 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800837e:	682b      	ldr	r3, [r5, #0]
 8008380:	075f      	lsls	r7, r3, #29
 8008382:	d5f7      	bpl.n	8008374 <HAL_RCC_OscConfig+0x3c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008384:	f7f8 fb64 	bl	8000a50 <HAL_GetREVID>
 8008388:	f241 0303 	movw	r3, #4099	; 0x1003
 800838c:	6922      	ldr	r2, [r4, #16]
 800838e:	4298      	cmp	r0, r3
 8008390:	686b      	ldr	r3, [r5, #4]
 8008392:	f200 8174 	bhi.w	800867e <HAL_RCC_OscConfig+0x6ca>
 8008396:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800839a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800839e:	606b      	str	r3, [r5, #4]
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	e67a      	b.n	800809a <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80083a4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80083a8:	4872      	ldr	r0, [pc, #456]	; (8008574 <HAL_RCC_OscConfig+0x5c0>)
 80083aa:	f00b facb 	bl	8013944 <assert_failed>
 80083ae:	e655      	b.n	800805c <HAL_RCC_OscConfig+0xa8>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80083b0:	f240 11a3 	movw	r1, #419	; 0x1a3
 80083b4:	486f      	ldr	r0, [pc, #444]	; (8008574 <HAL_RCC_OscConfig+0x5c0>)
 80083b6:	f00b fac5 	bl	8013944 <assert_failed>
 80083ba:	e611      	b.n	8007fe0 <HAL_RCC_OscConfig+0x2c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80083bc:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80083c0:	486c      	ldr	r0, [pc, #432]	; (8008574 <HAL_RCC_OscConfig+0x5c0>)
 80083c2:	f00b fabf 	bl	8013944 <assert_failed>
 80083c6:	6963      	ldr	r3, [r4, #20]
 80083c8:	e6a9      	b.n	800811e <HAL_RCC_OscConfig+0x16a>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80083ca:	f002 0203 	and.w	r2, r2, #3
 80083ce:	2a02      	cmp	r2, #2
 80083d0:	f47f ae11 	bne.w	8007ff6 <HAL_RCC_OscConfig+0x42>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083d4:	4b66      	ldr	r3, [pc, #408]	; (8008570 <HAL_RCC_OscConfig+0x5bc>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	039a      	lsls	r2, r3, #14
 80083da:	f57f ae2f 	bpl.w	800803c <HAL_RCC_OscConfig+0x88>
 80083de:	6863      	ldr	r3, [r4, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f47f ae2b 	bne.w	800803c <HAL_RCC_OscConfig+0x88>
        return HAL_ERROR;
 80083e6:	2001      	movs	r0, #1
}
 80083e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083ea:	4a61      	ldr	r2, [pc, #388]	; (8008570 <HAL_RCC_OscConfig+0x5bc>)
 80083ec:	6813      	ldr	r3, [r2, #0]
 80083ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	e610      	b.n	8008018 <HAL_RCC_OscConfig+0x64>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80083f6:	f240 2187 	movw	r1, #647	; 0x287
 80083fa:	485e      	ldr	r0, [pc, #376]	; (8008574 <HAL_RCC_OscConfig+0x5c0>)
 80083fc:	f00b faa2 	bl	8013944 <assert_failed>
 8008400:	69a3      	ldr	r3, [r4, #24]
 8008402:	e6a9      	b.n	8008158 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 8008404:	2003      	movs	r0, #3
}
 8008406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008408:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800840c:	4859      	ldr	r0, [pc, #356]	; (8008574 <HAL_RCC_OscConfig+0x5c0>)
 800840e:	f00b fa99 	bl	8013944 <assert_failed>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	e5da      	b.n	8007fcc <HAL_RCC_OscConfig+0x18>
        tickstart = HAL_GetTick();
 8008416:	f7f8 fb03 	bl	8000a20 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800841a:	4d55      	ldr	r5, [pc, #340]	; (8008570 <HAL_RCC_OscConfig+0x5bc>)
        tickstart = HAL_GetTick();
 800841c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800841e:	e004      	b.n	800842a <HAL_RCC_OscConfig+0x476>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008420:	f7f8 fafe 	bl	8000a20 <HAL_GetTick>
 8008424:	1b80      	subs	r0, r0, r6
 8008426:	2864      	cmp	r0, #100	; 0x64
 8008428:	d8ec      	bhi.n	8008404 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800842a:	682b      	ldr	r3, [r5, #0]
 800842c:	039f      	lsls	r7, r3, #14
 800842e:	d4f7      	bmi.n	8008420 <HAL_RCC_OscConfig+0x46c>
 8008430:	e604      	b.n	800803c <HAL_RCC_OscConfig+0x88>
    return HAL_ERROR;
 8008432:	2001      	movs	r0, #1
}
 8008434:	4770      	bx	lr
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008436:	f002 0203 	and.w	r2, r2, #3
 800843a:	2a01      	cmp	r2, #1
 800843c:	f47f ae43 	bne.w	80080c6 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008440:	4b4b      	ldr	r3, [pc, #300]	; (8008570 <HAL_RCC_OscConfig+0x5bc>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	05da      	lsls	r2, r3, #23
 8008446:	d502      	bpl.n	800844e <HAL_RCC_OscConfig+0x49a>
 8008448:	69e3      	ldr	r3, [r4, #28]
 800844a:	2b80      	cmp	r3, #128	; 0x80
 800844c:	d1cb      	bne.n	80083e6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800844e:	f7f8 faff 	bl	8000a50 <HAL_GetREVID>
 8008452:	f241 0303 	movw	r3, #4099	; 0x1003
 8008456:	4a46      	ldr	r2, [pc, #280]	; (8008570 <HAL_RCC_OscConfig+0x5bc>)
 8008458:	4298      	cmp	r0, r3
 800845a:	6a21      	ldr	r1, [r4, #32]
 800845c:	f200 8099 	bhi.w	8008592 <HAL_RCC_OscConfig+0x5de>
 8008460:	6853      	ldr	r3, [r2, #4]
 8008462:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008466:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 800846a:	6053      	str	r3, [r2, #4]
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	e650      	b.n	8008112 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_LSI_DISABLE();
 8008470:	4b3f      	ldr	r3, [pc, #252]	; (8008570 <HAL_RCC_OscConfig+0x5bc>)
 8008472:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008474:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8008476:	f022 0201 	bic.w	r2, r2, #1
 800847a:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800847c:	f7f8 fad0 	bl	8000a20 <HAL_GetTick>
 8008480:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008482:	e004      	b.n	800848e <HAL_RCC_OscConfig+0x4da>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008484:	f7f8 facc 	bl	8000a20 <HAL_GetTick>
 8008488:	1b80      	subs	r0, r0, r6
 800848a:	2802      	cmp	r0, #2
 800848c:	d8ba      	bhi.n	8008404 <HAL_RCC_OscConfig+0x450>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800848e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008490:	0799      	lsls	r1, r3, #30
 8008492:	d4f7      	bmi.n	8008484 <HAL_RCC_OscConfig+0x4d0>
 8008494:	e659      	b.n	800814a <HAL_RCC_OscConfig+0x196>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8008496:	f240 211b 	movw	r1, #539	; 0x21b
 800849a:	4836      	ldr	r0, [pc, #216]	; (8008574 <HAL_RCC_OscConfig+0x5c0>)
 800849c:	f00b fa52 	bl	8013944 <assert_failed>
 80084a0:	e606      	b.n	80080b0 <HAL_RCC_OscConfig+0xfc>
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 80084a2:	f240 211a 	movw	r1, #538	; 0x21a
 80084a6:	4833      	ldr	r0, [pc, #204]	; (8008574 <HAL_RCC_OscConfig+0x5c0>)
 80084a8:	f00b fa4c 	bl	8013944 <assert_failed>
 80084ac:	e5fc      	b.n	80080a8 <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_HSI48_DISABLE();
 80084ae:	4b30      	ldr	r3, [pc, #192]	; (8008570 <HAL_RCC_OscConfig+0x5bc>)
 80084b0:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084b2:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 80084b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80084ba:	f7f8 fab1 	bl	8000a20 <HAL_GetTick>
 80084be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084c0:	e004      	b.n	80084cc <HAL_RCC_OscConfig+0x518>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80084c2:	f7f8 faad 	bl	8000a20 <HAL_GetTick>
 80084c6:	1b80      	subs	r0, r0, r6
 80084c8:	2802      	cmp	r0, #2
 80084ca:	d89b      	bhi.n	8008404 <HAL_RCC_OscConfig+0x450>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084cc:	682b      	ldr	r3, [r5, #0]
 80084ce:	0498      	lsls	r0, r3, #18
 80084d0:	d4f7      	bmi.n	80084c2 <HAL_RCC_OscConfig+0x50e>
 80084d2:	e657      	b.n	8008184 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084d8:	4b25      	ldr	r3, [pc, #148]	; (8008570 <HAL_RCC_OscConfig+0x5bc>)
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	f47f ad95 	bne.w	800800a <HAL_RCC_OscConfig+0x56>
 80084e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	e593      	b.n	8008018 <HAL_RCC_OscConfig+0x64>
        __HAL_RCC_CSI_DISABLE();
 80084f0:	4b1f      	ldr	r3, [pc, #124]	; (8008570 <HAL_RCC_OscConfig+0x5bc>)
 80084f2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084f4:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 80084f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80084fc:	f7f8 fa90 	bl	8000a20 <HAL_GetTick>
 8008500:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008502:	e005      	b.n	8008510 <HAL_RCC_OscConfig+0x55c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008504:	f7f8 fa8c 	bl	8000a20 <HAL_GetTick>
 8008508:	1b80      	subs	r0, r0, r6
 800850a:	2802      	cmp	r0, #2
 800850c:	f63f af7a 	bhi.w	8008404 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	05df      	lsls	r7, r3, #23
 8008514:	d4f6      	bmi.n	8008504 <HAL_RCC_OscConfig+0x550>
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	e5fb      	b.n	8008112 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 800851a:	4b15      	ldr	r3, [pc, #84]	; (8008570 <HAL_RCC_OscConfig+0x5bc>)
 800851c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800851e:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8008520:	f022 0201 	bic.w	r2, r2, #1
 8008524:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008526:	f7f8 fa7b 	bl	8000a20 <HAL_GetTick>
 800852a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800852c:	e005      	b.n	800853a <HAL_RCC_OscConfig+0x586>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800852e:	f7f8 fa77 	bl	8000a20 <HAL_GetTick>
 8008532:	1b80      	subs	r0, r0, r6
 8008534:	2802      	cmp	r0, #2
 8008536:	f63f af65 	bhi.w	8008404 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800853a:	682b      	ldr	r3, [r5, #0]
 800853c:	0758      	lsls	r0, r3, #29
 800853e:	d4f6      	bmi.n	800852e <HAL_RCC_OscConfig+0x57a>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	e5aa      	b.n	800809a <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008544:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008548:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800854c:	6053      	str	r3, [r2, #4]
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	e5a3      	b.n	800809a <HAL_RCC_OscConfig+0xe6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008552:	0792      	lsls	r2, r2, #30
 8008554:	f47f aeff 	bne.w	8008356 <HAL_RCC_OscConfig+0x3a2>
 8008558:	e587      	b.n	800806a <HAL_RCC_OscConfig+0xb6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800855a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800855e:	4805      	ldr	r0, [pc, #20]	; (8008574 <HAL_RCC_OscConfig+0x5c0>)
 8008560:	f00b f9f0 	bl	8013944 <assert_failed>
 8008564:	e576      	b.n	8008054 <HAL_RCC_OscConfig+0xa0>
 8008566:	bf00      	nop
 8008568:	fffffc0c 	.word	0xfffffc0c
 800856c:	ffff0007 	.word	0xffff0007
 8008570:	58024400 	.word	0x58024400
 8008574:	08144f80 	.word	0x08144f80
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008578:	4859      	ldr	r0, [pc, #356]	; (80086e0 <HAL_RCC_OscConfig+0x72c>)
 800857a:	f240 21e3 	movw	r1, #739	; 0x2e3
 800857e:	f00b f9e1 	bl	8013944 <assert_failed>
 8008582:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008584:	e642      	b.n	800820c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8008586:	f240 21b1 	movw	r1, #689	; 0x2b1
 800858a:	4855      	ldr	r0, [pc, #340]	; (80086e0 <HAL_RCC_OscConfig+0x72c>)
 800858c:	f00b f9da 	bl	8013944 <assert_failed>
 8008590:	e601      	b.n	8008196 <HAL_RCC_OscConfig+0x1e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008592:	68d3      	ldr	r3, [r2, #12]
 8008594:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008598:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800859c:	60d3      	str	r3, [r2, #12]
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	e5b7      	b.n	8008112 <HAL_RCC_OscConfig+0x15e>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085a2:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80085a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80085a6:	6b15      	ldr	r5, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085a8:	f43f aed1 	beq.w	800834e <HAL_RCC_OscConfig+0x39a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ac:	f001 0303 	and.w	r3, r1, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80085b2:	4293      	cmp	r3, r2
 80085b4:	f47f af17 	bne.w	80083e6 <HAL_RCC_OscConfig+0x432>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085b8:	f3c1 1105 	ubfx	r1, r1, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80085be:	4299      	cmp	r1, r3
 80085c0:	f47f af11 	bne.w	80083e6 <HAL_RCC_OscConfig+0x432>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80085c6:	f3c5 0208 	ubfx	r2, r5, #0, #9
 80085ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085cc:	429a      	cmp	r2, r3
 80085ce:	f47f af0a 	bne.w	80083e6 <HAL_RCC_OscConfig+0x432>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085d4:	f3c5 2246 	ubfx	r2, r5, #9, #7
 80085d8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085da:	429a      	cmp	r2, r3
 80085dc:	f47f af03 	bne.w	80083e6 <HAL_RCC_OscConfig+0x432>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80085e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085e2:	f3c5 4206 	ubfx	r2, r5, #16, #7
 80085e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085e8:	429a      	cmp	r2, r3
 80085ea:	f47f aefc 	bne.w	80083e6 <HAL_RCC_OscConfig+0x432>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80085ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80085f0:	f3c5 6506 	ubfx	r5, r5, #24, #7
 80085f4:	3801      	subs	r0, #1
    return HAL_ERROR;
 80085f6:	1a28      	subs	r0, r5, r0
 80085f8:	bf18      	it	ne
 80085fa:	2001      	movne	r0, #1
 80085fc:	e6a7      	b.n	800834e <HAL_RCC_OscConfig+0x39a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085fe:	4a39      	ldr	r2, [pc, #228]	; (80086e4 <HAL_RCC_OscConfig+0x730>)
 8008600:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8008602:	f043 0301 	orr.w	r3, r3, #1
 8008606:	6713      	str	r3, [r2, #112]	; 0x70
 8008608:	e5e8      	b.n	80081dc <HAL_RCC_OscConfig+0x228>
      tickstart = HAL_GetTick();
 800860a:	f7f8 fa09 	bl	8000a20 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800860e:	4d35      	ldr	r5, [pc, #212]	; (80086e4 <HAL_RCC_OscConfig+0x730>)
      tickstart = HAL_GetTick();
 8008610:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008612:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008616:	e005      	b.n	8008624 <HAL_RCC_OscConfig+0x670>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008618:	f7f8 fa02 	bl	8000a20 <HAL_GetTick>
 800861c:	1bc0      	subs	r0, r0, r7
 800861e:	42b0      	cmp	r0, r6
 8008620:	f63f aef0 	bhi.w	8008404 <HAL_RCC_OscConfig+0x450>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008624:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008626:	0798      	lsls	r0, r3, #30
 8008628:	d4f6      	bmi.n	8008618 <HAL_RCC_OscConfig+0x664>
 800862a:	e5eb      	b.n	8008204 <HAL_RCC_OscConfig+0x250>
        __HAL_RCC_PLL_DISABLE();
 800862c:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800862e:	4614      	mov	r4, r2
        __HAL_RCC_PLL_DISABLE();
 8008630:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008634:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008636:	f7f8 f9f3 	bl	8000a20 <HAL_GetTick>
 800863a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800863c:	e005      	b.n	800864a <HAL_RCC_OscConfig+0x696>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800863e:	f7f8 f9ef 	bl	8000a20 <HAL_GetTick>
 8008642:	1b40      	subs	r0, r0, r5
 8008644:	2802      	cmp	r0, #2
 8008646:	f63f aedd 	bhi.w	8008404 <HAL_RCC_OscConfig+0x450>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	019b      	lsls	r3, r3, #6
 800864e:	d4f6      	bmi.n	800863e <HAL_RCC_OscConfig+0x68a>
 8008650:	e67c      	b.n	800834c <HAL_RCC_OscConfig+0x398>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008652:	2b05      	cmp	r3, #5
 8008654:	4b23      	ldr	r3, [pc, #140]	; (80086e4 <HAL_RCC_OscConfig+0x730>)
 8008656:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008658:	f47f adb9 	bne.w	80081ce <HAL_RCC_OscConfig+0x21a>
 800865c:	f042 0204 	orr.w	r2, r2, #4
 8008660:	671a      	str	r2, [r3, #112]	; 0x70
 8008662:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008664:	f042 0201 	orr.w	r2, r2, #1
 8008668:	671a      	str	r2, [r3, #112]	; 0x70
 800866a:	e5b7      	b.n	80081dc <HAL_RCC_OscConfig+0x228>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800866c:	68eb      	ldr	r3, [r5, #12]
 800866e:	6a22      	ldr	r2, [r4, #32]
 8008670:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008674:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008678:	60eb      	str	r3, [r5, #12]
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	e549      	b.n	8008112 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800867e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008682:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008686:	606b      	str	r3, [r5, #4]
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	e506      	b.n	800809a <HAL_RCC_OscConfig+0xe6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800868c:	f240 21ee 	movw	r1, #750	; 0x2ee
 8008690:	4813      	ldr	r0, [pc, #76]	; (80086e0 <HAL_RCC_OscConfig+0x72c>)
 8008692:	f00b f957 	bl	8013944 <assert_failed>
 8008696:	e5d5      	b.n	8008244 <HAL_RCC_OscConfig+0x290>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008698:	f240 21ed 	movw	r1, #749	; 0x2ed
 800869c:	4810      	ldr	r0, [pc, #64]	; (80086e0 <HAL_RCC_OscConfig+0x72c>)
 800869e:	f00b f951 	bl	8013944 <assert_failed>
 80086a2:	e5c9      	b.n	8008238 <HAL_RCC_OscConfig+0x284>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 80086a4:	f240 21f2 	movw	r1, #754	; 0x2f2
 80086a8:	480d      	ldr	r0, [pc, #52]	; (80086e0 <HAL_RCC_OscConfig+0x72c>)
 80086aa:	f00b f94b 	bl	8013944 <assert_failed>
 80086ae:	e5dd      	b.n	800826c <HAL_RCC_OscConfig+0x2b8>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80086b0:	f240 21f1 	movw	r1, #753	; 0x2f1
 80086b4:	480a      	ldr	r0, [pc, #40]	; (80086e0 <HAL_RCC_OscConfig+0x72c>)
 80086b6:	f00b f945 	bl	8013944 <assert_failed>
 80086ba:	e5d2      	b.n	8008262 <HAL_RCC_OscConfig+0x2ae>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80086bc:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80086c0:	4807      	ldr	r0, [pc, #28]	; (80086e0 <HAL_RCC_OscConfig+0x72c>)
 80086c2:	f00b f93f 	bl	8013944 <assert_failed>
 80086c6:	e5c7      	b.n	8008258 <HAL_RCC_OscConfig+0x2a4>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80086c8:	f240 21ef 	movw	r1, #751	; 0x2ef
 80086cc:	4804      	ldr	r0, [pc, #16]	; (80086e0 <HAL_RCC_OscConfig+0x72c>)
 80086ce:	f00b f939 	bl	8013944 <assert_failed>
 80086d2:	e5bc      	b.n	800824e <HAL_RCC_OscConfig+0x29a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80086d4:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 80086d8:	4801      	ldr	r0, [pc, #4]	; (80086e0 <HAL_RCC_OscConfig+0x72c>)
 80086da:	f00b f933 	bl	8013944 <assert_failed>
 80086de:	e5a6      	b.n	800822e <HAL_RCC_OscConfig+0x27a>
 80086e0:	08144f80 	.word	0x08144f80
 80086e4:	58024400 	.word	0x58024400

080086e8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086e8:	4a3e      	ldr	r2, [pc, #248]	; (80087e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80086ea:	6913      	ldr	r3, [r2, #16]
 80086ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086f0:	2b10      	cmp	r3, #16
 80086f2:	d04f      	beq.n	8008794 <HAL_RCC_GetSysClockFreq+0xac>
 80086f4:	2b18      	cmp	r3, #24
 80086f6:	d00b      	beq.n	8008710 <HAL_RCC_GetSysClockFreq+0x28>
 80086f8:	b10b      	cbz	r3, 80086fe <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80086fa:	483b      	ldr	r0, [pc, #236]	; (80087e8 <HAL_RCC_GetSysClockFreq+0x100>)
 80086fc:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086fe:	6813      	ldr	r3, [r2, #0]
 8008700:	0699      	lsls	r1, r3, #26
 8008702:	d549      	bpl.n	8008798 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008704:	6813      	ldr	r3, [r2, #0]
 8008706:	4839      	ldr	r0, [pc, #228]	; (80087ec <HAL_RCC_GetSysClockFreq+0x104>)
 8008708:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800870c:	40d8      	lsrs	r0, r3
 800870e:	4770      	bx	lr
{
 8008710:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008712:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008714:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008716:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008718:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800871c:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 800871e:	b3b0      	cbz	r0, 800878e <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008720:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008724:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008728:	f001 0103 	and.w	r1, r1, #3
 800872c:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008730:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 8008734:	2901      	cmp	r1, #1
 8008736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800873a:	ee07 3a10 	vmov	s14, r3
 800873e:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 8008742:	d002      	beq.n	800874a <HAL_RCC_GetSysClockFreq+0x62>
 8008744:	d32d      	bcc.n	80087a2 <HAL_RCC_GetSysClockFreq+0xba>
 8008746:	2902      	cmp	r1, #2
 8008748:	d028      	beq.n	800879c <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800874a:	eddf 5a29 	vldr	s11, [pc, #164]	; 80087f0 <HAL_RCC_GetSysClockFreq+0x108>
 800874e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8008752:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008758:	ee07 3a90 	vmov	s15, r3
 800875c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008764:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800876c:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008770:	4b1c      	ldr	r3, [pc, #112]	; (80087e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008774:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008778:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800877a:	ee07 3a90 	vmov	s15, r3
 800877e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800878a:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800878e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008792:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8008794:	4817      	ldr	r0, [pc, #92]	; (80087f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008796:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008798:	4814      	ldr	r0, [pc, #80]	; (80087ec <HAL_RCC_GetSysClockFreq+0x104>)
}
 800879a:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800879c:	eddf 5a16 	vldr	s11, [pc, #88]	; 80087f8 <HAL_RCC_GetSysClockFreq+0x110>
 80087a0:	e7d5      	b.n	800874e <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087a2:	6813      	ldr	r3, [r2, #0]
 80087a4:	069b      	lsls	r3, r3, #26
 80087a6:	d51a      	bpl.n	80087de <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087a8:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087aa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087ae:	490f      	ldr	r1, [pc, #60]	; (80087ec <HAL_RCC_GetSysClockFreq+0x104>)
 80087b0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087b6:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087bc:	ee06 1a90 	vmov	s13, r1
 80087c0:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 80087c4:	ee06 3a90 	vmov	s13, r3
 80087c8:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 80087cc:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80087d0:	ee76 7a05 	vadd.f32	s15, s12, s10
 80087d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087d8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80087dc:	e7c8      	b.n	8008770 <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087de:	eddf 5a07 	vldr	s11, [pc, #28]	; 80087fc <HAL_RCC_GetSysClockFreq+0x114>
 80087e2:	e7b4      	b.n	800874e <HAL_RCC_GetSysClockFreq+0x66>
 80087e4:	58024400 	.word	0x58024400
 80087e8:	003d0900 	.word	0x003d0900
 80087ec:	03d09000 	.word	0x03d09000
 80087f0:	4a742400 	.word	0x4a742400
 80087f4:	017d7840 	.word	0x017d7840
 80087f8:	4bbebc20 	.word	0x4bbebc20
 80087fc:	4c742400 	.word	0x4c742400

08008800 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008800:	2800      	cmp	r0, #0
 8008802:	f000 81bd 	beq.w	8008b80 <HAL_RCC_ClockConfig+0x380>
{
 8008806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800880a:	6803      	ldr	r3, [r0, #0]
 800880c:	4604      	mov	r4, r0
 800880e:	460d      	mov	r5, r1
 8008810:	3b01      	subs	r3, #1
 8008812:	2b3e      	cmp	r3, #62	; 0x3e
 8008814:	f200 81a1 	bhi.w	8008b5a <HAL_RCC_ClockConfig+0x35a>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008818:	2d0f      	cmp	r5, #15
 800881a:	f200 818e 	bhi.w	8008b3a <HAL_RCC_ClockConfig+0x33a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800881e:	4a5e      	ldr	r2, [pc, #376]	; (8008998 <HAL_RCC_ClockConfig+0x198>)
 8008820:	6813      	ldr	r3, [r2, #0]
 8008822:	f003 030f 	and.w	r3, r3, #15
 8008826:	42ab      	cmp	r3, r5
 8008828:	f0c0 81ac 	bcc.w	8008b84 <HAL_RCC_ClockConfig+0x384>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	075e      	lsls	r6, r3, #29
 8008830:	d512      	bpl.n	8008858 <HAL_RCC_ClockConfig+0x58>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008832:	4a5a      	ldr	r2, [pc, #360]	; (800899c <HAL_RCC_ClockConfig+0x19c>)
 8008834:	6921      	ldr	r1, [r4, #16]
 8008836:	6992      	ldr	r2, [r2, #24]
 8008838:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800883c:	4291      	cmp	r1, r2
 800883e:	d90b      	bls.n	8008858 <HAL_RCC_ClockConfig+0x58>
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8008840:	f021 0330 	bic.w	r3, r1, #48	; 0x30
 8008844:	2b40      	cmp	r3, #64	; 0x40
 8008846:	f040 81c0 	bne.w	8008bca <HAL_RCC_ClockConfig+0x3ca>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800884a:	4a54      	ldr	r2, [pc, #336]	; (800899c <HAL_RCC_ClockConfig+0x19c>)
 800884c:	6993      	ldr	r3, [r2, #24]
 800884e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008852:	4319      	orrs	r1, r3
 8008854:	6191      	str	r1, [r2, #24]
 8008856:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008858:	0718      	lsls	r0, r3, #28
 800885a:	d512      	bpl.n	8008882 <HAL_RCC_ClockConfig+0x82>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800885c:	4a4f      	ldr	r2, [pc, #316]	; (800899c <HAL_RCC_ClockConfig+0x19c>)
 800885e:	6961      	ldr	r1, [r4, #20]
 8008860:	69d2      	ldr	r2, [r2, #28]
 8008862:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008866:	4291      	cmp	r1, r2
 8008868:	d90b      	bls.n	8008882 <HAL_RCC_ClockConfig+0x82>
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 800886a:	f021 0330 	bic.w	r3, r1, #48	; 0x30
 800886e:	2b40      	cmp	r3, #64	; 0x40
 8008870:	f040 81b2 	bne.w	8008bd8 <HAL_RCC_ClockConfig+0x3d8>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008874:	4a49      	ldr	r2, [pc, #292]	; (800899c <HAL_RCC_ClockConfig+0x19c>)
 8008876:	69d3      	ldr	r3, [r2, #28]
 8008878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887c:	4319      	orrs	r1, r3
 800887e:	61d1      	str	r1, [r2, #28]
 8008880:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008882:	06d9      	lsls	r1, r3, #27
 8008884:	d513      	bpl.n	80088ae <HAL_RCC_ClockConfig+0xae>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008886:	4a45      	ldr	r2, [pc, #276]	; (800899c <HAL_RCC_ClockConfig+0x19c>)
 8008888:	69a1      	ldr	r1, [r4, #24]
 800888a:	69d2      	ldr	r2, [r2, #28]
 800888c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008890:	4291      	cmp	r1, r2
 8008892:	d90c      	bls.n	80088ae <HAL_RCC_ClockConfig+0xae>
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8008894:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8008898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800889c:	f040 81a3 	bne.w	8008be6 <HAL_RCC_ClockConfig+0x3e6>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088a0:	4a3e      	ldr	r2, [pc, #248]	; (800899c <HAL_RCC_ClockConfig+0x19c>)
 80088a2:	69d3      	ldr	r3, [r2, #28]
 80088a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80088a8:	4319      	orrs	r1, r3
 80088aa:	61d1      	str	r1, [r2, #28]
 80088ac:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088ae:	069a      	lsls	r2, r3, #26
 80088b0:	d512      	bpl.n	80088d8 <HAL_RCC_ClockConfig+0xd8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088b2:	4a3a      	ldr	r2, [pc, #232]	; (800899c <HAL_RCC_ClockConfig+0x19c>)
 80088b4:	69e1      	ldr	r1, [r4, #28]
 80088b6:	6a12      	ldr	r2, [r2, #32]
 80088b8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80088bc:	4291      	cmp	r1, r2
 80088be:	d90b      	bls.n	80088d8 <HAL_RCC_ClockConfig+0xd8>
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 80088c0:	f021 0330 	bic.w	r3, r1, #48	; 0x30
 80088c4:	2b40      	cmp	r3, #64	; 0x40
 80088c6:	f040 8179 	bne.w	8008bbc <HAL_RCC_ClockConfig+0x3bc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80088ca:	4a34      	ldr	r2, [pc, #208]	; (800899c <HAL_RCC_ClockConfig+0x19c>)
 80088cc:	6a13      	ldr	r3, [r2, #32]
 80088ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d2:	4319      	orrs	r1, r3
 80088d4:	6211      	str	r1, [r2, #32]
 80088d6:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088d8:	079f      	lsls	r7, r3, #30
 80088da:	d512      	bpl.n	8008902 <HAL_RCC_ClockConfig+0x102>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088dc:	4a2f      	ldr	r2, [pc, #188]	; (800899c <HAL_RCC_ClockConfig+0x19c>)
 80088de:	68e1      	ldr	r1, [r4, #12]
 80088e0:	6992      	ldr	r2, [r2, #24]
 80088e2:	f002 020f 	and.w	r2, r2, #15
 80088e6:	4291      	cmp	r1, r2
 80088e8:	d90b      	bls.n	8008902 <HAL_RCC_ClockConfig+0x102>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80088ea:	f1a1 0308 	sub.w	r3, r1, #8
 80088ee:	2b07      	cmp	r3, #7
 80088f0:	f200 8180 	bhi.w	8008bf4 <HAL_RCC_ClockConfig+0x3f4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088f4:	4a29      	ldr	r2, [pc, #164]	; (800899c <HAL_RCC_ClockConfig+0x19c>)
 80088f6:	6993      	ldr	r3, [r2, #24]
 80088f8:	f023 030f 	bic.w	r3, r3, #15
 80088fc:	4319      	orrs	r1, r3
 80088fe:	6191      	str	r1, [r2, #24]
 8008900:	6823      	ldr	r3, [r4, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008902:	07de      	lsls	r6, r3, #31
 8008904:	d55a      	bpl.n	80089bc <HAL_RCC_ClockConfig+0x1bc>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8008906:	68a2      	ldr	r2, [r4, #8]
 8008908:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 800890c:	f422 7000 	bic.w	r0, r2, #512	; 0x200
 8008910:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8008914:	bf14      	ite	ne
 8008916:	2301      	movne	r3, #1
 8008918:	2300      	moveq	r3, #0
 800891a:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 800891e:	bf0c      	ite	eq
 8008920:	2300      	moveq	r3, #0
 8008922:	f003 0301 	andne.w	r3, r3, #1
 8008926:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800892a:	bf0c      	ite	eq
 800892c:	2300      	moveq	r3, #0
 800892e:	f003 0301 	andne.w	r3, r3, #1
 8008932:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 8008936:	bf0c      	ite	eq
 8008938:	2300      	moveq	r3, #0
 800893a:	f003 0301 	andne.w	r3, r3, #1
 800893e:	b12b      	cbz	r3, 800894c <HAL_RCC_ClockConfig+0x14c>
 8008940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008944:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8008948:	f040 812e 	bne.w	8008ba8 <HAL_RCC_ClockConfig+0x3a8>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800894c:	6863      	ldr	r3, [r4, #4]
 800894e:	2b03      	cmp	r3, #3
 8008950:	f200 8110 	bhi.w	8008b74 <HAL_RCC_ClockConfig+0x374>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008954:	4a11      	ldr	r2, [pc, #68]	; (800899c <HAL_RCC_ClockConfig+0x19c>)
 8008956:	68a1      	ldr	r1, [r4, #8]
 8008958:	6993      	ldr	r3, [r2, #24]
 800895a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800895e:	430b      	orrs	r3, r1
 8008960:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008962:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008964:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008966:	2b02      	cmp	r3, #2
 8008968:	f000 8100 	beq.w	8008b6c <HAL_RCC_ClockConfig+0x36c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800896c:	2b03      	cmp	r3, #3
 800896e:	f000 8117 	beq.w	8008ba0 <HAL_RCC_ClockConfig+0x3a0>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008972:	2b01      	cmp	r3, #1
 8008974:	f000 811e 	beq.w	8008bb4 <HAL_RCC_ClockConfig+0x3b4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008978:	0757      	lsls	r7, r2, #29
 800897a:	f140 80eb 	bpl.w	8008b54 <HAL_RCC_ClockConfig+0x354>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800897e:	4907      	ldr	r1, [pc, #28]	; (800899c <HAL_RCC_ClockConfig+0x19c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008980:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008984:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008986:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008988:	f022 0207 	bic.w	r2, r2, #7
 800898c:	4313      	orrs	r3, r2
 800898e:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8008990:	f7f8 f846 	bl	8000a20 <HAL_GetTick>
 8008994:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008996:	e009      	b.n	80089ac <HAL_RCC_ClockConfig+0x1ac>
 8008998:	52002000 	.word	0x52002000
 800899c:	58024400 	.word	0x58024400
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089a0:	f7f8 f83e 	bl	8000a20 <HAL_GetTick>
 80089a4:	1bc0      	subs	r0, r0, r7
 80089a6:	4540      	cmp	r0, r8
 80089a8:	f200 80f8 	bhi.w	8008b9c <HAL_RCC_ClockConfig+0x39c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ac:	6933      	ldr	r3, [r6, #16]
 80089ae:	6862      	ldr	r2, [r4, #4]
 80089b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089b4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80089b8:	d1f2      	bne.n	80089a0 <HAL_RCC_ClockConfig+0x1a0>
 80089ba:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089bc:	079e      	lsls	r6, r3, #30
 80089be:	d517      	bpl.n	80089f0 <HAL_RCC_ClockConfig+0x1f0>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089c0:	4b90      	ldr	r3, [pc, #576]	; (8008c04 <HAL_RCC_ClockConfig+0x404>)
 80089c2:	68e2      	ldr	r2, [r4, #12]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	f003 030f 	and.w	r3, r3, #15
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d210      	bcs.n	80089f0 <HAL_RCC_ClockConfig+0x1f0>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80089ce:	f1a2 0308 	sub.w	r3, r2, #8
 80089d2:	2b06      	cmp	r3, #6
 80089d4:	d906      	bls.n	80089e4 <HAL_RCC_ClockConfig+0x1e4>
 80089d6:	b12a      	cbz	r2, 80089e4 <HAL_RCC_ClockConfig+0x1e4>
 80089d8:	f240 4136 	movw	r1, #1078	; 0x436
 80089dc:	488a      	ldr	r0, [pc, #552]	; (8008c08 <HAL_RCC_ClockConfig+0x408>)
 80089de:	f00a ffb1 	bl	8013944 <assert_failed>
 80089e2:	68e2      	ldr	r2, [r4, #12]
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089e4:	4987      	ldr	r1, [pc, #540]	; (8008c04 <HAL_RCC_ClockConfig+0x404>)
 80089e6:	698b      	ldr	r3, [r1, #24]
 80089e8:	f023 030f 	bic.w	r3, r3, #15
 80089ec:	431a      	orrs	r2, r3
 80089ee:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089f0:	4a86      	ldr	r2, [pc, #536]	; (8008c0c <HAL_RCC_ClockConfig+0x40c>)
 80089f2:	6813      	ldr	r3, [r2, #0]
 80089f4:	f003 030f 	and.w	r3, r3, #15
 80089f8:	42ab      	cmp	r3, r5
 80089fa:	d90a      	bls.n	8008a12 <HAL_RCC_ClockConfig+0x212>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089fc:	6813      	ldr	r3, [r2, #0]
 80089fe:	f023 030f 	bic.w	r3, r3, #15
 8008a02:	432b      	orrs	r3, r5
 8008a04:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a06:	6813      	ldr	r3, [r2, #0]
 8008a08:	f003 030f 	and.w	r3, r3, #15
 8008a0c:	42ab      	cmp	r3, r5
 8008a0e:	f040 80a1 	bne.w	8008b54 <HAL_RCC_ClockConfig+0x354>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	0758      	lsls	r0, r3, #29
 8008a16:	d51a      	bpl.n	8008a4e <HAL_RCC_ClockConfig+0x24e>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a18:	4a7a      	ldr	r2, [pc, #488]	; (8008c04 <HAL_RCC_ClockConfig+0x404>)
 8008a1a:	6921      	ldr	r1, [r4, #16]
 8008a1c:	6992      	ldr	r2, [r2, #24]
 8008a1e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008a22:	4291      	cmp	r1, r2
 8008a24:	d213      	bcs.n	8008a4e <HAL_RCC_ClockConfig+0x24e>
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8008a26:	2950      	cmp	r1, #80	; 0x50
 8008a28:	bf18      	it	ne
 8008a2a:	2960      	cmpne	r1, #96	; 0x60
 8008a2c:	d008      	beq.n	8008a40 <HAL_RCC_ClockConfig+0x240>
 8008a2e:	f031 0340 	bics.w	r3, r1, #64	; 0x40
 8008a32:	d005      	beq.n	8008a40 <HAL_RCC_ClockConfig+0x240>
 8008a34:	f240 4157 	movw	r1, #1111	; 0x457
 8008a38:	4873      	ldr	r0, [pc, #460]	; (8008c08 <HAL_RCC_ClockConfig+0x408>)
 8008a3a:	f00a ff83 	bl	8013944 <assert_failed>
 8008a3e:	6921      	ldr	r1, [r4, #16]
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a40:	4a70      	ldr	r2, [pc, #448]	; (8008c04 <HAL_RCC_ClockConfig+0x404>)
 8008a42:	6993      	ldr	r3, [r2, #24]
 8008a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a48:	4319      	orrs	r1, r3
 8008a4a:	6191      	str	r1, [r2, #24]
 8008a4c:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a4e:	0719      	lsls	r1, r3, #28
 8008a50:	d51a      	bpl.n	8008a88 <HAL_RCC_ClockConfig+0x288>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a52:	4a6c      	ldr	r2, [pc, #432]	; (8008c04 <HAL_RCC_ClockConfig+0x404>)
 8008a54:	6961      	ldr	r1, [r4, #20]
 8008a56:	69d2      	ldr	r2, [r2, #28]
 8008a58:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008a5c:	4291      	cmp	r1, r2
 8008a5e:	d213      	bcs.n	8008a88 <HAL_RCC_ClockConfig+0x288>
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8008a60:	2950      	cmp	r1, #80	; 0x50
 8008a62:	bf18      	it	ne
 8008a64:	2960      	cmpne	r1, #96	; 0x60
 8008a66:	d008      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x27a>
 8008a68:	f031 0340 	bics.w	r3, r1, #64	; 0x40
 8008a6c:	d005      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x27a>
 8008a6e:	f240 4169 	movw	r1, #1129	; 0x469
 8008a72:	4865      	ldr	r0, [pc, #404]	; (8008c08 <HAL_RCC_ClockConfig+0x408>)
 8008a74:	f00a ff66 	bl	8013944 <assert_failed>
 8008a78:	6961      	ldr	r1, [r4, #20]
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a7a:	4a62      	ldr	r2, [pc, #392]	; (8008c04 <HAL_RCC_ClockConfig+0x404>)
 8008a7c:	69d3      	ldr	r3, [r2, #28]
 8008a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a82:	4319      	orrs	r1, r3
 8008a84:	61d1      	str	r1, [r2, #28]
 8008a86:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a88:	06da      	lsls	r2, r3, #27
 8008a8a:	d51c      	bpl.n	8008ac6 <HAL_RCC_ClockConfig+0x2c6>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a8c:	4a5d      	ldr	r2, [pc, #372]	; (8008c04 <HAL_RCC_ClockConfig+0x404>)
 8008a8e:	69a1      	ldr	r1, [r4, #24]
 8008a90:	69d2      	ldr	r2, [r2, #28]
 8008a92:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008a96:	4291      	cmp	r1, r2
 8008a98:	d215      	bcs.n	8008ac6 <HAL_RCC_ClockConfig+0x2c6>
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8008a9a:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8008a9e:	bf18      	it	ne
 8008aa0:	f5b1 6fa0 	cmpne.w	r1, #1280	; 0x500
 8008aa4:	d008      	beq.n	8008ab8 <HAL_RCC_ClockConfig+0x2b8>
 8008aa6:	f431 6380 	bics.w	r3, r1, #1024	; 0x400
 8008aaa:	d005      	beq.n	8008ab8 <HAL_RCC_ClockConfig+0x2b8>
 8008aac:	f240 417b 	movw	r1, #1147	; 0x47b
 8008ab0:	4855      	ldr	r0, [pc, #340]	; (8008c08 <HAL_RCC_ClockConfig+0x408>)
 8008ab2:	f00a ff47 	bl	8013944 <assert_failed>
 8008ab6:	69a1      	ldr	r1, [r4, #24]
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ab8:	4a52      	ldr	r2, [pc, #328]	; (8008c04 <HAL_RCC_ClockConfig+0x404>)
 8008aba:	69d3      	ldr	r3, [r2, #28]
 8008abc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008ac0:	4319      	orrs	r1, r3
 8008ac2:	61d1      	str	r1, [r2, #28]
 8008ac4:	6823      	ldr	r3, [r4, #0]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ac6:	069b      	lsls	r3, r3, #26
 8008ac8:	d519      	bpl.n	8008afe <HAL_RCC_ClockConfig+0x2fe>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008aca:	4b4e      	ldr	r3, [pc, #312]	; (8008c04 <HAL_RCC_ClockConfig+0x404>)
 8008acc:	69e2      	ldr	r2, [r4, #28]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d212      	bcs.n	8008afe <HAL_RCC_ClockConfig+0x2fe>
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8008ad8:	2a50      	cmp	r2, #80	; 0x50
 8008ada:	bf18      	it	ne
 8008adc:	2a60      	cmpne	r2, #96	; 0x60
 8008ade:	d008      	beq.n	8008af2 <HAL_RCC_ClockConfig+0x2f2>
 8008ae0:	f032 0340 	bics.w	r3, r2, #64	; 0x40
 8008ae4:	d005      	beq.n	8008af2 <HAL_RCC_ClockConfig+0x2f2>
 8008ae6:	f240 418d 	movw	r1, #1165	; 0x48d
 8008aea:	4847      	ldr	r0, [pc, #284]	; (8008c08 <HAL_RCC_ClockConfig+0x408>)
 8008aec:	f00a ff2a 	bl	8013944 <assert_failed>
 8008af0:	69e2      	ldr	r2, [r4, #28]
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008af2:	4944      	ldr	r1, [pc, #272]	; (8008c04 <HAL_RCC_ClockConfig+0x404>)
 8008af4:	6a0b      	ldr	r3, [r1, #32]
 8008af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afa:	431a      	orrs	r2, r3
 8008afc:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008afe:	f7ff fdf3 	bl	80086e8 <HAL_RCC_GetSysClockFreq>
 8008b02:	4a40      	ldr	r2, [pc, #256]	; (8008c04 <HAL_RCC_ClockConfig+0x404>)
 8008b04:	4942      	ldr	r1, [pc, #264]	; (8008c10 <HAL_RCC_ClockConfig+0x410>)
 8008b06:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b08:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b0a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8008b0e:	4d41      	ldr	r5, [pc, #260]	; (8008c14 <HAL_RCC_ClockConfig+0x414>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b10:	f002 020f 	and.w	r2, r2, #15
 8008b14:	4c40      	ldr	r4, [pc, #256]	; (8008c18 <HAL_RCC_ClockConfig+0x418>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b16:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b18:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b1a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8008b1e:	493f      	ldr	r1, [pc, #252]	; (8008c1c <HAL_RCC_ClockConfig+0x41c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b20:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b24:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 8008b28:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b2a:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8008b2e:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b30:	6022      	str	r2, [r4, #0]
}
 8008b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8008b36:	f7f7 bf13 	b.w	8000960 <HAL_InitTick>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008b3a:	f44f 7160 	mov.w	r1, #896	; 0x380
 8008b3e:	4832      	ldr	r0, [pc, #200]	; (8008c08 <HAL_RCC_ClockConfig+0x408>)
 8008b40:	f00a ff00 	bl	8013944 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b44:	4b31      	ldr	r3, [pc, #196]	; (8008c0c <HAL_RCC_ClockConfig+0x40c>)
 8008b46:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b48:	6819      	ldr	r1, [r3, #0]
 8008b4a:	f021 010f 	bic.w	r1, r1, #15
 8008b4e:	430d      	orrs	r5, r1
 8008b50:	601d      	str	r5, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b52:	681b      	ldr	r3, [r3, #0]
    return HAL_ERROR;
 8008b54:	2001      	movs	r0, #1
}
 8008b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008b5a:	f240 317f 	movw	r1, #895	; 0x37f
 8008b5e:	482a      	ldr	r0, [pc, #168]	; (8008c08 <HAL_RCC_ClockConfig+0x408>)
 8008b60:	f00a fef0 	bl	8013944 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008b64:	2d0f      	cmp	r5, #15
 8008b66:	f67f ae5a 	bls.w	800881e <HAL_RCC_ClockConfig+0x1e>
 8008b6a:	e7e6      	b.n	8008b3a <HAL_RCC_ClockConfig+0x33a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b6c:	0390      	lsls	r0, r2, #14
 8008b6e:	f53f af06 	bmi.w	800897e <HAL_RCC_ClockConfig+0x17e>
 8008b72:	e7ef      	b.n	8008b54 <HAL_RCC_ClockConfig+0x354>
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008b74:	f240 31f5 	movw	r1, #1013	; 0x3f5
 8008b78:	4823      	ldr	r0, [pc, #140]	; (8008c08 <HAL_RCC_ClockConfig+0x408>)
 8008b7a:	f00a fee3 	bl	8013944 <assert_failed>
 8008b7e:	e6e9      	b.n	8008954 <HAL_RCC_ClockConfig+0x154>
    return HAL_ERROR;
 8008b80:	2001      	movs	r0, #1
}
 8008b82:	4770      	bx	lr
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b84:	6813      	ldr	r3, [r2, #0]
 8008b86:	f023 030f 	bic.w	r3, r3, #15
 8008b8a:	432b      	orrs	r3, r5
 8008b8c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b8e:	6813      	ldr	r3, [r2, #0]
 8008b90:	f003 030f 	and.w	r3, r3, #15
 8008b94:	42ab      	cmp	r3, r5
 8008b96:	f43f ae49 	beq.w	800882c <HAL_RCC_ClockConfig+0x2c>
 8008b9a:	e7db      	b.n	8008b54 <HAL_RCC_ClockConfig+0x354>
            return HAL_TIMEOUT;
 8008b9c:	2003      	movs	r0, #3
 8008b9e:	e7da      	b.n	8008b56 <HAL_RCC_ClockConfig+0x356>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ba0:	0191      	lsls	r1, r2, #6
 8008ba2:	f53f aeec 	bmi.w	800897e <HAL_RCC_ClockConfig+0x17e>
 8008ba6:	e7d5      	b.n	8008b54 <HAL_RCC_ClockConfig+0x354>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8008ba8:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8008bac:	4816      	ldr	r0, [pc, #88]	; (8008c08 <HAL_RCC_ClockConfig+0x408>)
 8008bae:	f00a fec9 	bl	8013944 <assert_failed>
 8008bb2:	e6cb      	b.n	800894c <HAL_RCC_ClockConfig+0x14c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bb4:	05d2      	lsls	r2, r2, #23
 8008bb6:	f53f aee2 	bmi.w	800897e <HAL_RCC_ClockConfig+0x17e>
 8008bba:	e7cb      	b.n	8008b54 <HAL_RCC_ClockConfig+0x354>
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8008bbc:	f240 31d1 	movw	r1, #977	; 0x3d1
 8008bc0:	4811      	ldr	r0, [pc, #68]	; (8008c08 <HAL_RCC_ClockConfig+0x408>)
 8008bc2:	f00a febf 	bl	8013944 <assert_failed>
 8008bc6:	69e1      	ldr	r1, [r4, #28]
 8008bc8:	e67f      	b.n	80088ca <HAL_RCC_ClockConfig+0xca>
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8008bca:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8008bce:	480e      	ldr	r0, [pc, #56]	; (8008c08 <HAL_RCC_ClockConfig+0x408>)
 8008bd0:	f00a feb8 	bl	8013944 <assert_failed>
 8008bd4:	6921      	ldr	r1, [r4, #16]
 8008bd6:	e638      	b.n	800884a <HAL_RCC_ClockConfig+0x4a>
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8008bd8:	f240 31ae 	movw	r1, #942	; 0x3ae
 8008bdc:	480a      	ldr	r0, [pc, #40]	; (8008c08 <HAL_RCC_ClockConfig+0x408>)
 8008bde:	f00a feb1 	bl	8013944 <assert_failed>
 8008be2:	6961      	ldr	r1, [r4, #20]
 8008be4:	e646      	b.n	8008874 <HAL_RCC_ClockConfig+0x74>
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8008be6:	f240 31bf 	movw	r1, #959	; 0x3bf
 8008bea:	4807      	ldr	r0, [pc, #28]	; (8008c08 <HAL_RCC_ClockConfig+0x408>)
 8008bec:	f00a feaa 	bl	8013944 <assert_failed>
 8008bf0:	69a1      	ldr	r1, [r4, #24]
 8008bf2:	e655      	b.n	80088a0 <HAL_RCC_ClockConfig+0xa0>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008bf4:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 8008bf8:	4803      	ldr	r0, [pc, #12]	; (8008c08 <HAL_RCC_ClockConfig+0x408>)
 8008bfa:	f00a fea3 	bl	8013944 <assert_failed>
 8008bfe:	68e1      	ldr	r1, [r4, #12]
 8008c00:	e678      	b.n	80088f4 <HAL_RCC_ClockConfig+0xf4>
 8008c02:	bf00      	nop
 8008c04:	58024400 	.word	0x58024400
 8008c08:	08144f80 	.word	0x08144f80
 8008c0c:	52002000 	.word	0x52002000
 8008c10:	0802ae24 	.word	0x0802ae24
 8008c14:	20000004 	.word	0x20000004
 8008c18:	200002c8 	.word	0x200002c8
 8008c1c:	200002c4 	.word	0x200002c4

08008c20 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c20:	4a49      	ldr	r2, [pc, #292]	; (8008d48 <HAL_RCC_GetHCLKFreq+0x128>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c22:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c24:	6913      	ldr	r3, [r2, #16]
 8008c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c2a:	2b10      	cmp	r3, #16
 8008c2c:	d064      	beq.n	8008cf8 <HAL_RCC_GetHCLKFreq+0xd8>
 8008c2e:	2b18      	cmp	r3, #24
 8008c30:	d022      	beq.n	8008c78 <HAL_RCC_GetHCLKFreq+0x58>
 8008c32:	b1bb      	cbz	r3, 8008c64 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 8008c34:	4b45      	ldr	r3, [pc, #276]	; (8008d4c <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c36:	4944      	ldr	r1, [pc, #272]	; (8008d48 <HAL_RCC_GetHCLKFreq+0x128>)
 8008c38:	4845      	ldr	r0, [pc, #276]	; (8008d50 <HAL_RCC_GetHCLKFreq+0x130>)
 8008c3a:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c3c:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c3e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c42:	4c44      	ldr	r4, [pc, #272]	; (8008d54 <HAL_RCC_GetHCLKFreq+0x134>)
 8008c44:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c48:	4d43      	ldr	r5, [pc, #268]	; (8008d58 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c4a:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c4c:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c4e:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c52:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c56:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c58:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8008c5c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c5e:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008c60:	bc30      	pop	{r4, r5}
 8008c62:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c64:	6813      	ldr	r3, [r2, #0]
 8008c66:	0699      	lsls	r1, r3, #26
 8008c68:	d548      	bpl.n	8008cfc <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c6a:	6813      	ldr	r3, [r2, #0]
 8008c6c:	4a3b      	ldr	r2, [pc, #236]	; (8008d5c <HAL_RCC_GetHCLKFreq+0x13c>)
 8008c6e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008c72:	fa22 f303 	lsr.w	r3, r2, r3
 8008c76:	e7de      	b.n	8008c36 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c78:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008c7a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008c7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008c7e:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008c82:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0d6      	beq.n	8008c36 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008c88:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008c8c:	f001 0101 	and.w	r1, r1, #1
 8008c90:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c94:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008c98:	fb01 f304 	mul.w	r3, r1, r4
 8008c9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 8008ca0:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8008caa:	d002      	beq.n	8008cb2 <HAL_RCC_GetHCLKFreq+0x92>
 8008cac:	d32b      	bcc.n	8008d06 <HAL_RCC_GetHCLKFreq+0xe6>
 8008cae:	2802      	cmp	r0, #2
 8008cb0:	d026      	beq.n	8008d00 <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cb2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8008d60 <HAL_RCC_GetHCLKFreq+0x140>
 8008cb6:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8008cba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc0:	ee07 3a10 	vmov	s14, r3
 8008cc4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008cc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008ccc:	ee37 7a25 	vadd.f32	s14, s14, s11
 8008cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cd4:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008cd8:	4b1b      	ldr	r3, [pc, #108]	; (8008d48 <HAL_RCC_GetHCLKFreq+0x128>)
 8008cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cdc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008ce0:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008ce2:	ee07 3a10 	vmov	s14, r3
 8008ce6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008cea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008cee:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8008cf2:	ee17 3a90 	vmov	r3, s15
 8008cf6:	e79e      	b.n	8008c36 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8008cf8:	4b1a      	ldr	r3, [pc, #104]	; (8008d64 <HAL_RCC_GetHCLKFreq+0x144>)
 8008cfa:	e79c      	b.n	8008c36 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008cfc:	4b17      	ldr	r3, [pc, #92]	; (8008d5c <HAL_RCC_GetHCLKFreq+0x13c>)
 8008cfe:	e79a      	b.n	8008c36 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d00:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008d68 <HAL_RCC_GetHCLKFreq+0x148>
 8008d04:	e7d7      	b.n	8008cb6 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d06:	6813      	ldr	r3, [r2, #0]
 8008d08:	069b      	lsls	r3, r3, #26
 8008d0a:	d51a      	bpl.n	8008d42 <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d0c:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d0e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d12:	4912      	ldr	r1, [pc, #72]	; (8008d5c <HAL_RCC_GetHCLKFreq+0x13c>)
 8008d14:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d18:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d1a:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d20:	ee07 1a10 	vmov	s14, r1
 8008d24:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8008d28:	ee07 3a10 	vmov	s14, r3
 8008d2c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8008d30:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8008d34:	ee76 6a05 	vadd.f32	s13, s12, s10
 8008d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d40:	e7ca      	b.n	8008cd8 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d42:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8008d6c <HAL_RCC_GetHCLKFreq+0x14c>
 8008d46:	e7b6      	b.n	8008cb6 <HAL_RCC_GetHCLKFreq+0x96>
 8008d48:	58024400 	.word	0x58024400
 8008d4c:	003d0900 	.word	0x003d0900
 8008d50:	0802ae24 	.word	0x0802ae24
 8008d54:	200002c8 	.word	0x200002c8
 8008d58:	200002c4 	.word	0x200002c4
 8008d5c:	03d09000 	.word	0x03d09000
 8008d60:	4a742400 	.word	0x4a742400
 8008d64:	017d7840 	.word	0x017d7840
 8008d68:	4bbebc20 	.word	0x4bbebc20
 8008d6c:	4c742400 	.word	0x4c742400

08008d70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8008d72:	6803      	ldr	r3, [r0, #0]
{
 8008d74:	4604      	mov	r4, r0
 8008d76:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	2b3e      	cmp	r3, #62	; 0x3e
 8008d7c:	f200 809a 	bhi.w	8008eb4 <RCCEx_PLL2_Config+0x144>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8008d80:	6863      	ldr	r3, [r4, #4]
 8008d82:	3b04      	subs	r3, #4
 8008d84:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8008d88:	f200 809f 	bhi.w	8008eca <RCCEx_PLL2_Config+0x15a>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8008d8c:	68a3      	ldr	r3, [r4, #8]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	2b7f      	cmp	r3, #127	; 0x7f
 8008d92:	f200 80a4 	bhi.w	8008ede <RCCEx_PLL2_Config+0x16e>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8008d96:	6923      	ldr	r3, [r4, #16]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8008d9c:	f200 80a9 	bhi.w	8008ef2 <RCCEx_PLL2_Config+0x182>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8008da0:	68e3      	ldr	r3, [r4, #12]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	2b7f      	cmp	r3, #127	; 0x7f
 8008da6:	f200 80ae 	bhi.w	8008f06 <RCCEx_PLL2_Config+0x196>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8008daa:	6963      	ldr	r3, [r4, #20]
 8008dac:	f033 03c0 	bics.w	r3, r3, #192	; 0xc0
 8008db0:	f040 80b3 	bne.w	8008f1a <RCCEx_PLL2_Config+0x1aa>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8008db4:	69a3      	ldr	r3, [r4, #24]
 8008db6:	f033 0320 	bics.w	r3, r3, #32
 8008dba:	f040 80b8 	bne.w	8008f2e <RCCEx_PLL2_Config+0x1be>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8008dbe:	69e3      	ldr	r3, [r4, #28]
 8008dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dc4:	d270      	bcs.n	8008ea8 <RCCEx_PLL2_Config+0x138>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008dc6:	4a5f      	ldr	r2, [pc, #380]	; (8008f44 <RCCEx_PLL2_Config+0x1d4>)
 8008dc8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008dca:	f003 0303 	and.w	r3, r3, #3
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d066      	beq.n	8008ea0 <RCCEx_PLL2_Config+0x130>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008dd2:	6813      	ldr	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008dd4:	4615      	mov	r5, r2
    __HAL_RCC_PLL2_DISABLE();
 8008dd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008dda:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008ddc:	f7f7 fe20 	bl	8000a20 <HAL_GetTick>
 8008de0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008de2:	e004      	b.n	8008dee <RCCEx_PLL2_Config+0x7e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008de4:	f7f7 fe1c 	bl	8000a20 <HAL_GetTick>
 8008de8:	1bc0      	subs	r0, r0, r7
 8008dea:	2802      	cmp	r0, #2
 8008dec:	d85a      	bhi.n	8008ea4 <RCCEx_PLL2_Config+0x134>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008dee:	682b      	ldr	r3, [r5, #0]
 8008df0:	011a      	lsls	r2, r3, #4
 8008df2:	d4f7      	bmi.n	8008de4 <RCCEx_PLL2_Config+0x74>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008df4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008df6:	6822      	ldr	r2, [r4, #0]
 8008df8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008dfc:	4952      	ldr	r1, [pc, #328]	; (8008f48 <RCCEx_PLL2_Config+0x1d8>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008dfe:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008e02:	62ab      	str	r3, [r5, #40]	; 0x28
 8008e04:	6867      	ldr	r7, [r4, #4]
 8008e06:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8008e0a:	3f01      	subs	r7, #1
 8008e0c:	1e50      	subs	r0, r2, #1
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	6922      	ldr	r2, [r4, #16]
 8008e12:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8008e16:	025b      	lsls	r3, r3, #9
 8008e18:	0400      	lsls	r0, r0, #16
 8008e1a:	3a01      	subs	r2, #1
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008e22:	0612      	lsls	r2, r2, #24
 8008e24:	4303      	orrs	r3, r0
 8008e26:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008e2a:	433b      	orrs	r3, r7
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	63ab      	str	r3, [r5, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008e30:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008e32:	6962      	ldr	r2, [r4, #20]
 8008e34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e3c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008e3e:	69a2      	ldr	r2, [r4, #24]
 8008e40:	f023 0320 	bic.w	r3, r3, #32
 8008e44:	4313      	orrs	r3, r2
 8008e46:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008e48:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008e4a:	f023 0310 	bic.w	r3, r3, #16
 8008e4e:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008e50:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8008e52:	69e3      	ldr	r3, [r4, #28]
 8008e54:	4011      	ands	r1, r2
 8008e56:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008e5a:	63e9      	str	r1, [r5, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008e5c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008e5e:	f043 0310 	orr.w	r3, r3, #16
 8008e62:	62eb      	str	r3, [r5, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008e64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	d067      	beq.n	8008f3a <RCCEx_PLL2_Config+0x1ca>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008e6a:	2e01      	cmp	r6, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008e6c:	bf0c      	ite	eq
 8008e6e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008e72:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008e76:	62eb      	str	r3, [r5, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008e78:	4b32      	ldr	r3, [pc, #200]	; (8008f44 <RCCEx_PLL2_Config+0x1d4>)
 8008e7a:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e7c:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 8008e7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008e82:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008e84:	f7f7 fdcc 	bl	8000a20 <HAL_GetTick>
 8008e88:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e8a:	e004      	b.n	8008e96 <RCCEx_PLL2_Config+0x126>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e8c:	f7f7 fdc8 	bl	8000a20 <HAL_GetTick>
 8008e90:	1b40      	subs	r0, r0, r5
 8008e92:	2802      	cmp	r0, #2
 8008e94:	d806      	bhi.n	8008ea4 <RCCEx_PLL2_Config+0x134>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	011b      	lsls	r3, r3, #4
 8008e9a:	d5f7      	bpl.n	8008e8c <RCCEx_PLL2_Config+0x11c>
    }

  }


  return status;
 8008e9c:	2000      	movs	r0, #0
}
 8008e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008ea0:	2001      	movs	r0, #1
}
 8008ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008ea4:	2003      	movs	r0, #3
}
 8008ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8008ea8:	f640 4186 	movw	r1, #3206	; 0xc86
 8008eac:	4827      	ldr	r0, [pc, #156]	; (8008f4c <RCCEx_PLL2_Config+0x1dc>)
 8008eae:	f00a fd49 	bl	8013944 <assert_failed>
 8008eb2:	e788      	b.n	8008dc6 <RCCEx_PLL2_Config+0x56>
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8008eb4:	f640 417f 	movw	r1, #3199	; 0xc7f
 8008eb8:	4824      	ldr	r0, [pc, #144]	; (8008f4c <RCCEx_PLL2_Config+0x1dc>)
 8008eba:	f00a fd43 	bl	8013944 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8008ebe:	6863      	ldr	r3, [r4, #4]
 8008ec0:	3b04      	subs	r3, #4
 8008ec2:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8008ec6:	f67f af61 	bls.w	8008d8c <RCCEx_PLL2_Config+0x1c>
 8008eca:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8008ece:	481f      	ldr	r0, [pc, #124]	; (8008f4c <RCCEx_PLL2_Config+0x1dc>)
 8008ed0:	f00a fd38 	bl	8013944 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8008ed4:	68a3      	ldr	r3, [r4, #8]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8008eda:	f67f af5c 	bls.w	8008d96 <RCCEx_PLL2_Config+0x26>
 8008ede:	f640 4181 	movw	r1, #3201	; 0xc81
 8008ee2:	481a      	ldr	r0, [pc, #104]	; (8008f4c <RCCEx_PLL2_Config+0x1dc>)
 8008ee4:	f00a fd2e 	bl	8013944 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	3b01      	subs	r3, #1
 8008eec:	2b7f      	cmp	r3, #127	; 0x7f
 8008eee:	f67f af57 	bls.w	8008da0 <RCCEx_PLL2_Config+0x30>
 8008ef2:	f640 4182 	movw	r1, #3202	; 0xc82
 8008ef6:	4815      	ldr	r0, [pc, #84]	; (8008f4c <RCCEx_PLL2_Config+0x1dc>)
 8008ef8:	f00a fd24 	bl	8013944 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8008efc:	68e3      	ldr	r3, [r4, #12]
 8008efe:	3b01      	subs	r3, #1
 8008f00:	2b7f      	cmp	r3, #127	; 0x7f
 8008f02:	f67f af52 	bls.w	8008daa <RCCEx_PLL2_Config+0x3a>
 8008f06:	f640 4183 	movw	r1, #3203	; 0xc83
 8008f0a:	4810      	ldr	r0, [pc, #64]	; (8008f4c <RCCEx_PLL2_Config+0x1dc>)
 8008f0c:	f00a fd1a 	bl	8013944 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8008f10:	6963      	ldr	r3, [r4, #20]
 8008f12:	f033 03c0 	bics.w	r3, r3, #192	; 0xc0
 8008f16:	f43f af4d 	beq.w	8008db4 <RCCEx_PLL2_Config+0x44>
 8008f1a:	f640 4184 	movw	r1, #3204	; 0xc84
 8008f1e:	480b      	ldr	r0, [pc, #44]	; (8008f4c <RCCEx_PLL2_Config+0x1dc>)
 8008f20:	f00a fd10 	bl	8013944 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8008f24:	69a3      	ldr	r3, [r4, #24]
 8008f26:	f033 0320 	bics.w	r3, r3, #32
 8008f2a:	f43f af48 	beq.w	8008dbe <RCCEx_PLL2_Config+0x4e>
 8008f2e:	f640 4185 	movw	r1, #3205	; 0xc85
 8008f32:	4806      	ldr	r0, [pc, #24]	; (8008f4c <RCCEx_PLL2_Config+0x1dc>)
 8008f34:	f00a fd06 	bl	8013944 <assert_failed>
 8008f38:	e741      	b.n	8008dbe <RCCEx_PLL2_Config+0x4e>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f3e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8008f40:	e79a      	b.n	8008e78 <RCCEx_PLL2_Config+0x108>
 8008f42:	bf00      	nop
 8008f44:	58024400 	.word	0x58024400
 8008f48:	ffff0007 	.word	0xffff0007
 8008f4c:	08144fb8 	.word	0x08144fb8

08008f50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8008f52:	6803      	ldr	r3, [r0, #0]
{
 8008f54:	4604      	mov	r4, r0
 8008f56:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8008f5c:	f200 809a 	bhi.w	8009094 <RCCEx_PLL3_Config+0x144>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8008f60:	6863      	ldr	r3, [r4, #4]
 8008f62:	3b04      	subs	r3, #4
 8008f64:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8008f68:	f200 809f 	bhi.w	80090aa <RCCEx_PLL3_Config+0x15a>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8008f6c:	68a3      	ldr	r3, [r4, #8]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	2b7f      	cmp	r3, #127	; 0x7f
 8008f72:	f200 80a4 	bhi.w	80090be <RCCEx_PLL3_Config+0x16e>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8008f76:	6923      	ldr	r3, [r4, #16]
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8008f7c:	f200 80a9 	bhi.w	80090d2 <RCCEx_PLL3_Config+0x182>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8008f80:	68e3      	ldr	r3, [r4, #12]
 8008f82:	3b01      	subs	r3, #1
 8008f84:	2b7f      	cmp	r3, #127	; 0x7f
 8008f86:	f200 80ae 	bhi.w	80090e6 <RCCEx_PLL3_Config+0x196>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8008f8a:	6963      	ldr	r3, [r4, #20]
 8008f8c:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8008f90:	f040 80b3 	bne.w	80090fa <RCCEx_PLL3_Config+0x1aa>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8008f94:	69a3      	ldr	r3, [r4, #24]
 8008f96:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008f9a:	f040 80b8 	bne.w	800910e <RCCEx_PLL3_Config+0x1be>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8008f9e:	69e3      	ldr	r3, [r4, #28]
 8008fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fa4:	d270      	bcs.n	8009088 <RCCEx_PLL3_Config+0x138>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fa6:	4a5f      	ldr	r2, [pc, #380]	; (8009124 <RCCEx_PLL3_Config+0x1d4>)
 8008fa8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008faa:	f003 0303 	and.w	r3, r3, #3
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	d066      	beq.n	8009080 <RCCEx_PLL3_Config+0x130>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008fb2:	6813      	ldr	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fb4:	4615      	mov	r5, r2
    __HAL_RCC_PLL3_DISABLE();
 8008fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fba:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008fbc:	f7f7 fd30 	bl	8000a20 <HAL_GetTick>
 8008fc0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fc2:	e004      	b.n	8008fce <RCCEx_PLL3_Config+0x7e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008fc4:	f7f7 fd2c 	bl	8000a20 <HAL_GetTick>
 8008fc8:	1bc0      	subs	r0, r0, r7
 8008fca:	2802      	cmp	r0, #2
 8008fcc:	d85a      	bhi.n	8009084 <RCCEx_PLL3_Config+0x134>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fce:	682b      	ldr	r3, [r5, #0]
 8008fd0:	009a      	lsls	r2, r3, #2
 8008fd2:	d4f7      	bmi.n	8008fc4 <RCCEx_PLL3_Config+0x74>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008fd4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008fd6:	6822      	ldr	r2, [r4, #0]
 8008fd8:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008fdc:	4952      	ldr	r1, [pc, #328]	; (8009128 <RCCEx_PLL3_Config+0x1d8>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008fde:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008fe2:	62ab      	str	r3, [r5, #40]	; 0x28
 8008fe4:	6867      	ldr	r7, [r4, #4]
 8008fe6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8008fea:	3f01      	subs	r7, #1
 8008fec:	1e50      	subs	r0, r2, #1
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	6922      	ldr	r2, [r4, #16]
 8008ff2:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8008ff6:	025b      	lsls	r3, r3, #9
 8008ff8:	0400      	lsls	r0, r0, #16
 8008ffa:	3a01      	subs	r2, #1
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8009002:	0612      	lsls	r2, r2, #24
 8009004:	4303      	orrs	r3, r0
 8009006:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800900a:	433b      	orrs	r3, r7
 800900c:	4313      	orrs	r3, r2
 800900e:	642b      	str	r3, [r5, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009010:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009012:	6962      	ldr	r2, [r4, #20]
 8009014:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009018:	4313      	orrs	r3, r2
 800901a:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800901c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800901e:	69a2      	ldr	r2, [r4, #24]
 8009020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009024:	4313      	orrs	r3, r2
 8009026:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009028:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800902a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800902e:	62eb      	str	r3, [r5, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009030:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8009032:	69e3      	ldr	r3, [r4, #28]
 8009034:	4011      	ands	r1, r2
 8009036:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800903a:	6469      	str	r1, [r5, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800903c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800903e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009042:	62eb      	str	r3, [r5, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009044:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8009046:	2e00      	cmp	r6, #0
 8009048:	d067      	beq.n	800911a <RCCEx_PLL3_Config+0x1ca>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800904a:	2e01      	cmp	r6, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800904c:	bf0c      	ite	eq
 800904e:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009052:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8009056:	62eb      	str	r3, [r5, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009058:	4b32      	ldr	r3, [pc, #200]	; (8009124 <RCCEx_PLL3_Config+0x1d4>)
 800905a:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800905c:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 800905e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009062:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009064:	f7f7 fcdc 	bl	8000a20 <HAL_GetTick>
 8009068:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800906a:	e004      	b.n	8009076 <RCCEx_PLL3_Config+0x126>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800906c:	f7f7 fcd8 	bl	8000a20 <HAL_GetTick>
 8009070:	1b40      	subs	r0, r0, r5
 8009072:	2802      	cmp	r0, #2
 8009074:	d806      	bhi.n	8009084 <RCCEx_PLL3_Config+0x134>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	d5f7      	bpl.n	800906c <RCCEx_PLL3_Config+0x11c>
    }

  }


  return status;
 800907c:	2000      	movs	r0, #0
}
 800907e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8009080:	2001      	movs	r0, #1
}
 8009082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8009084:	2003      	movs	r0, #3
}
 8009086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8009088:	f640 41ee 	movw	r1, #3310	; 0xcee
 800908c:	4827      	ldr	r0, [pc, #156]	; (800912c <RCCEx_PLL3_Config+0x1dc>)
 800908e:	f00a fc59 	bl	8013944 <assert_failed>
 8009092:	e788      	b.n	8008fa6 <RCCEx_PLL3_Config+0x56>
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8009094:	f640 41e7 	movw	r1, #3303	; 0xce7
 8009098:	4824      	ldr	r0, [pc, #144]	; (800912c <RCCEx_PLL3_Config+0x1dc>)
 800909a:	f00a fc53 	bl	8013944 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 800909e:	6863      	ldr	r3, [r4, #4]
 80090a0:	3b04      	subs	r3, #4
 80090a2:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 80090a6:	f67f af61 	bls.w	8008f6c <RCCEx_PLL3_Config+0x1c>
 80090aa:	f640 41e8 	movw	r1, #3304	; 0xce8
 80090ae:	481f      	ldr	r0, [pc, #124]	; (800912c <RCCEx_PLL3_Config+0x1dc>)
 80090b0:	f00a fc48 	bl	8013944 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 80090b4:	68a3      	ldr	r3, [r4, #8]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	2b7f      	cmp	r3, #127	; 0x7f
 80090ba:	f67f af5c 	bls.w	8008f76 <RCCEx_PLL3_Config+0x26>
 80090be:	f640 41e9 	movw	r1, #3305	; 0xce9
 80090c2:	481a      	ldr	r0, [pc, #104]	; (800912c <RCCEx_PLL3_Config+0x1dc>)
 80090c4:	f00a fc3e 	bl	8013944 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	2b7f      	cmp	r3, #127	; 0x7f
 80090ce:	f67f af57 	bls.w	8008f80 <RCCEx_PLL3_Config+0x30>
 80090d2:	f640 41ea 	movw	r1, #3306	; 0xcea
 80090d6:	4815      	ldr	r0, [pc, #84]	; (800912c <RCCEx_PLL3_Config+0x1dc>)
 80090d8:	f00a fc34 	bl	8013944 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 80090dc:	68e3      	ldr	r3, [r4, #12]
 80090de:	3b01      	subs	r3, #1
 80090e0:	2b7f      	cmp	r3, #127	; 0x7f
 80090e2:	f67f af52 	bls.w	8008f8a <RCCEx_PLL3_Config+0x3a>
 80090e6:	f640 41eb 	movw	r1, #3307	; 0xceb
 80090ea:	4810      	ldr	r0, [pc, #64]	; (800912c <RCCEx_PLL3_Config+0x1dc>)
 80090ec:	f00a fc2a 	bl	8013944 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 80090f0:	6963      	ldr	r3, [r4, #20]
 80090f2:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 80090f6:	f43f af4d 	beq.w	8008f94 <RCCEx_PLL3_Config+0x44>
 80090fa:	f640 41ec 	movw	r1, #3308	; 0xcec
 80090fe:	480b      	ldr	r0, [pc, #44]	; (800912c <RCCEx_PLL3_Config+0x1dc>)
 8009100:	f00a fc20 	bl	8013944 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8009104:	69a3      	ldr	r3, [r4, #24]
 8009106:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800910a:	f43f af48 	beq.w	8008f9e <RCCEx_PLL3_Config+0x4e>
 800910e:	f640 41ed 	movw	r1, #3309	; 0xced
 8009112:	4806      	ldr	r0, [pc, #24]	; (800912c <RCCEx_PLL3_Config+0x1dc>)
 8009114:	f00a fc16 	bl	8013944 <assert_failed>
 8009118:	e741      	b.n	8008f9e <RCCEx_PLL3_Config+0x4e>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800911a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800911e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8009120:	e79a      	b.n	8009058 <RCCEx_PLL3_Config+0x108>
 8009122:	bf00      	nop
 8009124:	58024400 	.word	0x58024400
 8009128:	ffff0007 	.word	0xffff0007
 800912c:	08144fb8 	.word	0x08144fb8

08009130 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009134:	6803      	ldr	r3, [r0, #0]
{
 8009136:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009138:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800913c:	d016      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800913e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8009140:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8009144:	f000 8527 	beq.w	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8009148:	f240 861b 	bls.w	8009d82 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800914c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8009150:	f000 855b 	beq.w	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xada>
 8009154:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8009158:	f040 8639 	bne.w	8009dce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800915c:	49b7      	ldr	r1, [pc, #732]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800915e:	2600      	movs	r6, #0
 8009160:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8009162:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009166:	431a      	orrs	r2, r3
 8009168:	650a      	str	r2, [r1, #80]	; 0x50
 800916a:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800916c:	05dd      	lsls	r5, r3, #23
 800916e:	d50a      	bpl.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009170:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009172:	2a04      	cmp	r2, #4
 8009174:	d806      	bhi.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009176:	e8df f012 	tbh	[pc, r2, lsl #1]
 800917a:	04ac      	.short	0x04ac
 800917c:	04c404be 	.word	0x04c404be
 8009180:	04880488 	.word	0x04880488
      ret = HAL_ERROR;
 8009184:	2601      	movs	r6, #1
 8009186:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009188:	0598      	lsls	r0, r3, #22
 800918a:	d515      	bpl.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->Sai23ClockSelection)
 800918c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800918e:	2a80      	cmp	r2, #128	; 0x80
 8009190:	f000 850c 	beq.w	8009bac <HAL_RCCEx_PeriphCLKConfig+0xa7c>
 8009194:	f200 85ea 	bhi.w	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009198:	2a00      	cmp	r2, #0
 800919a:	f000 853c 	beq.w	8009c16 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 800919e:	2a40      	cmp	r2, #64	; 0x40
 80091a0:	f040 85eb 	bne.w	8009d7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091a4:	2100      	movs	r1, #0
 80091a6:	1d20      	adds	r0, r4, #4
 80091a8:	f7ff fde2 	bl	8008d70 <RCCEx_PLL2_Config>
 80091ac:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80091ae:	2d00      	cmp	r5, #0
 80091b0:	f000 8505 	beq.w	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 80091b4:	6823      	ldr	r3, [r4, #0]
 80091b6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80091b8:	0559      	lsls	r1, r3, #21
 80091ba:	d518      	bpl.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai4AClockSelection)
 80091bc:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80091c0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80091c4:	f000 8505 	beq.w	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80091c8:	f200 85c4 	bhi.w	8009d54 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	f000 8530 	beq.w	8009c32 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80091d2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80091d6:	f040 85c5 	bne.w	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091da:	2100      	movs	r1, #0
 80091dc:	1d20      	adds	r0, r4, #4
 80091de:	f7ff fdc7 	bl	8008d70 <RCCEx_PLL2_Config>
 80091e2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80091e4:	2d00      	cmp	r5, #0
 80091e6:	f000 84fd 	beq.w	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80091ee:	051a      	lsls	r2, r3, #20
 80091f0:	d518      	bpl.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 80091f2:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80091f6:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80091fa:	f000 84fe 	beq.w	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80091fe:	f200 85d5 	bhi.w	8009dac <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8009202:	2a00      	cmp	r2, #0
 8009204:	f000 84b4 	beq.w	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8009208:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800920c:	f040 85d6 	bne.w	8009dbc <HAL_RCCEx_PeriphCLKConfig+0xc8c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009210:	2100      	movs	r1, #0
 8009212:	1d20      	adds	r0, r4, #4
 8009214:	f7ff fdac 	bl	8008d70 <RCCEx_PLL2_Config>
 8009218:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800921a:	2d00      	cmp	r5, #0
 800921c:	f000 84b0 	beq.w	8009b80 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009224:	019f      	lsls	r7, r3, #6
 8009226:	d50d      	bpl.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x114>
    switch(PeriphClkInit->QspiClockSelection)
 8009228:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800922a:	2a10      	cmp	r2, #16
 800922c:	f000 83f6 	beq.w	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009230:	f240 85c8 	bls.w	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
 8009234:	2a20      	cmp	r2, #32
 8009236:	f000 83fa 	beq.w	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800923a:	2a30      	cmp	r2, #48	; 0x30
 800923c:	f000 83f3 	beq.w	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      ret = HAL_ERROR;
 8009240:	2601      	movs	r6, #1
 8009242:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009244:	04d8      	lsls	r0, r3, #19
 8009246:	d517      	bpl.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009248:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800924a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800924e:	f000 8477 	beq.w	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xa10>
 8009252:	f200 859f 	bhi.w	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009256:	2a00      	cmp	r2, #0
 8009258:	f000 84e4 	beq.w	8009c24 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 800925c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009260:	f040 85a0 	bne.w	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009264:	2100      	movs	r1, #0
 8009266:	1d20      	adds	r0, r4, #4
 8009268:	f7ff fd82 	bl	8008d70 <RCCEx_PLL2_Config>
 800926c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800926e:	2d00      	cmp	r5, #0
 8009270:	f000 846f 	beq.w	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009278:	0499      	lsls	r1, r3, #18
 800927a:	d51b      	bpl.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Spi45ClockSelection)
 800927c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800927e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8009282:	f000 83e5 	beq.w	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x920>
 8009286:	f200 8527 	bhi.w	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800928a:	b142      	cbz	r2, 800929e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800928c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009290:	f040 852e 	bne.w	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009294:	2101      	movs	r1, #1
 8009296:	1d20      	adds	r0, r4, #4
 8009298:	f7ff fd6a 	bl	8008d70 <RCCEx_PLL2_Config>
 800929c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800929e:	2d00      	cmp	r5, #0
 80092a0:	f040 833b 	bne.w	800991a <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80092a4:	4a65      	ldr	r2, [pc, #404]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80092a6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80092a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80092aa:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80092ae:	430b      	orrs	r3, r1
 80092b0:	6513      	str	r3, [r2, #80]	; 0x50
 80092b2:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80092b4:	045a      	lsls	r2, r3, #17
 80092b6:	d51d      	bpl.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Spi6ClockSelection)
 80092b8:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80092bc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80092c0:	f000 83d0 	beq.w	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80092c4:	f200 8527 	bhi.w	8009d16 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 80092c8:	b142      	cbz	r2, 80092dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80092ca:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80092ce:	f040 852e 	bne.w	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092d2:	2101      	movs	r1, #1
 80092d4:	1d20      	adds	r0, r4, #4
 80092d6:	f7ff fd4b 	bl	8008d70 <RCCEx_PLL2_Config>
 80092da:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80092dc:	2d00      	cmp	r5, #0
 80092de:	f040 8319 	bne.w	8009914 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80092e2:	4a56      	ldr	r2, [pc, #344]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80092e4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80092e8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80092ea:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80092ee:	430b      	orrs	r3, r1
 80092f0:	6593      	str	r3, [r2, #88]	; 0x58
 80092f2:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092f4:	041f      	lsls	r7, r3, #16
 80092f6:	d50d      	bpl.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->FdcanClockSelection)
 80092f8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80092fa:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80092fe:	f000 83bb 	beq.w	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8009302:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009306:	f000 8298 	beq.w	800983a <HAL_RCCEx_PeriphCLKConfig+0x70a>
 800930a:	2a00      	cmp	r2, #0
 800930c:	f000 829a 	beq.w	8009844 <HAL_RCCEx_PeriphCLKConfig+0x714>
      ret = HAL_ERROR;
 8009310:	2601      	movs	r6, #1
 8009312:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009314:	01d8      	lsls	r0, r3, #7
 8009316:	d50a      	bpl.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->FmcClockSelection)
 8009318:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800931a:	2a03      	cmp	r2, #3
 800931c:	d805      	bhi.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800931e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009322:	0270      	.short	0x0270
 8009324:	026b033c 	.word	0x026b033c
 8009328:	0270      	.short	0x0270
      ret = HAL_ERROR;
 800932a:	2601      	movs	r6, #1
 800932c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800932e:	0259      	lsls	r1, r3, #9
 8009330:	f140 80c9 	bpl.w	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8009334:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8009338:	4f41      	ldr	r7, [pc, #260]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800933a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800933e:	bf18      	it	ne
 8009340:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 8009344:	f422 4ca0 	bic.w	ip, r2, #20480	; 0x5000
 8009348:	f422 4010 	bic.w	r0, r2, #36864	; 0x9000
 800934c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8009350:	bf14      	ite	ne
 8009352:	2301      	movne	r3, #1
 8009354:	2300      	moveq	r3, #0
 8009356:	f422 3e88 	bic.w	lr, r2, #69632	; 0x11000
 800935a:	f5bc 5f0c 	cmp.w	ip, #8960	; 0x2300
 800935e:	bf0c      	ite	eq
 8009360:	2300      	moveq	r3, #0
 8009362:	f003 0301 	andne.w	r3, r3, #1
 8009366:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800944c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800936a:	f5b0 4f86 	cmp.w	r0, #17152	; 0x4300
 800936e:	bf0c      	ite	eq
 8009370:	2300      	moveq	r3, #0
 8009372:	f003 0301 	andne.w	r3, r3, #1
 8009376:	4833      	ldr	r0, [pc, #204]	; (8009444 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8009378:	f5b1 4f03 	cmp.w	r1, #33536	; 0x8300
 800937c:	bf0c      	ite	eq
 800937e:	2300      	moveq	r3, #0
 8009380:	f003 0301 	andne.w	r3, r3, #1
 8009384:	f5be 4f63 	cmp.w	lr, #58112	; 0xe300
 8009388:	bf0c      	ite	eq
 800938a:	2300      	moveq	r3, #0
 800938c:	f003 0301 	andne.w	r3, r3, #1
 8009390:	f422 3e04 	bic.w	lr, r2, #135168	; 0x21000
 8009394:	42b9      	cmp	r1, r7
 8009396:	bf0c      	ite	eq
 8009398:	2300      	moveq	r3, #0
 800939a:	f003 0301 	andne.w	r3, r3, #1
 800939e:	f507 4740 	add.w	r7, r7, #49152	; 0xc000
 80093a2:	4281      	cmp	r1, r0
 80093a4:	bf0c      	ite	eq
 80093a6:	2300      	moveq	r3, #0
 80093a8:	f003 0301 	andne.w	r3, r3, #1
 80093ac:	f500 4040 	add.w	r0, r0, #49152	; 0xc000
 80093b0:	4561      	cmp	r1, ip
 80093b2:	bf0c      	ite	eq
 80093b4:	2300      	moveq	r3, #0
 80093b6:	f003 0301 	andne.w	r3, r3, #1
 80093ba:	f50c 4c40 	add.w	ip, ip, #49152	; 0xc000
 80093be:	45be      	cmp	lr, r7
 80093c0:	bf0c      	ite	eq
 80093c2:	2300      	moveq	r3, #0
 80093c4:	f003 0301 	andne.w	r3, r3, #1
 80093c8:	f507 4740 	add.w	r7, r7, #49152	; 0xc000
 80093cc:	4281      	cmp	r1, r0
 80093ce:	bf0c      	ite	eq
 80093d0:	2300      	moveq	r3, #0
 80093d2:	f003 0301 	andne.w	r3, r3, #1
 80093d6:	f500 4040 	add.w	r0, r0, #49152	; 0xc000
 80093da:	4561      	cmp	r1, ip
 80093dc:	bf0c      	ite	eq
 80093de:	2300      	moveq	r3, #0
 80093e0:	f003 0301 	andne.w	r3, r3, #1
 80093e4:	f50c 4c40 	add.w	ip, ip, #49152	; 0xc000
 80093e8:	42b9      	cmp	r1, r7
 80093ea:	bf0c      	ite	eq
 80093ec:	2300      	moveq	r3, #0
 80093ee:	f003 0301 	andne.w	r3, r3, #1
 80093f2:	f507 4740 	add.w	r7, r7, #49152	; 0xc000
 80093f6:	4281      	cmp	r1, r0
 80093f8:	bf0c      	ite	eq
 80093fa:	2300      	moveq	r3, #0
 80093fc:	f003 0301 	andne.w	r3, r3, #1
 8009400:	f500 4040 	add.w	r0, r0, #49152	; 0xc000
 8009404:	4561      	cmp	r1, ip
 8009406:	bf0c      	ite	eq
 8009408:	2300      	moveq	r3, #0
 800940a:	f003 0301 	andne.w	r3, r3, #1
 800940e:	42b9      	cmp	r1, r7
 8009410:	bf0c      	ite	eq
 8009412:	2300      	moveq	r3, #0
 8009414:	f003 0301 	andne.w	r3, r3, #1
 8009418:	4281      	cmp	r1, r0
 800941a:	bf0c      	ite	eq
 800941c:	2300      	moveq	r3, #0
 800941e:	f003 0301 	andne.w	r3, r3, #1
 8009422:	2b00      	cmp	r3, #0
 8009424:	f040 81b7 	bne.w	8009796 <HAL_RCCEx_PeriphCLKConfig+0x666>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009428:	4b07      	ldr	r3, [pc, #28]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800942a:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800942c:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800942e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009432:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009434:	f7f7 faf4 	bl	8000a20 <HAL_GetTick>
 8009438:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800943a:	e010      	b.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800943c:	58024400 	.word	0x58024400
 8009440:	00010300 	.word	0x00010300
 8009444:	00014300 	.word	0x00014300
 8009448:	58024800 	.word	0x58024800
 800944c:	00018300 	.word	0x00018300
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009450:	f7f7 fae6 	bl	8000a20 <HAL_GetTick>
 8009454:	eba0 0008 	sub.w	r0, r0, r8
 8009458:	2864      	cmp	r0, #100	; 0x64
 800945a:	f200 8245 	bhi.w	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	05da      	lsls	r2, r3, #23
 8009462:	d5f5      	bpl.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x320>
    if(ret == HAL_OK)
 8009464:	2d00      	cmp	r5, #0
 8009466:	f040 84c0 	bne.w	8009dea <HAL_RCCEx_PeriphCLKConfig+0xcba>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800946a:	4b3e      	ldr	r3, [pc, #248]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800946c:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8009470:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009472:	4051      	eors	r1, r2
 8009474:	f411 7f40 	tst.w	r1, #768	; 0x300
 8009478:	d00d      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x366>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800947a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800947c:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800947e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009482:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009486:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009488:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800948a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800948e:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009490:	671a      	str	r2, [r3, #112]	; 0x70
 8009492:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009496:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800949a:	f000 83f9 	beq.w	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xb60>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800949e:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80094a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094a6:	f000 8495 	beq.w	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 80094aa:	4a2e      	ldr	r2, [pc, #184]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80094ac:	6913      	ldr	r3, [r2, #16]
 80094ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80094b2:	6113      	str	r3, [r2, #16]
 80094b4:	4a2b      	ldr	r2, [pc, #172]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80094b6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80094ba:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80094bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094c0:	430b      	orrs	r3, r1
 80094c2:	6713      	str	r3, [r2, #112]	; 0x70
 80094c4:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80094c6:	07df      	lsls	r7, r3, #31
 80094c8:	d52f      	bpl.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    switch(PeriphClkInit->Usart16ClockSelection)
 80094ca:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80094cc:	2a28      	cmp	r2, #40	; 0x28
 80094ce:	d82a      	bhi.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80094d0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80094d4:	002901a8 	.word	0x002901a8
 80094d8:	00290029 	.word	0x00290029
 80094dc:	00290029 	.word	0x00290029
 80094e0:	00290029 	.word	0x00290029
 80094e4:	0029028a 	.word	0x0029028a
 80094e8:	00290029 	.word	0x00290029
 80094ec:	00290029 	.word	0x00290029
 80094f0:	00290029 	.word	0x00290029
 80094f4:	002901a2 	.word	0x002901a2
 80094f8:	00290029 	.word	0x00290029
 80094fc:	00290029 	.word	0x00290029
 8009500:	00290029 	.word	0x00290029
 8009504:	002901a8 	.word	0x002901a8
 8009508:	00290029 	.word	0x00290029
 800950c:	00290029 	.word	0x00290029
 8009510:	00290029 	.word	0x00290029
 8009514:	002901a8 	.word	0x002901a8
 8009518:	00290029 	.word	0x00290029
 800951c:	00290029 	.word	0x00290029
 8009520:	00290029 	.word	0x00290029
 8009524:	01a8      	.short	0x01a8
      ret = HAL_ERROR;
 8009526:	2601      	movs	r6, #1
 8009528:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800952a:	0798      	lsls	r0, r3, #30
 800952c:	d50c      	bpl.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x418>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800952e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009530:	2a05      	cmp	r2, #5
 8009532:	d807      	bhi.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009534:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009538:	021f0154 	.word	0x021f0154
 800953c:	0154014e 	.word	0x0154014e
 8009540:	01540154 	.word	0x01540154
      ret = HAL_ERROR;
 8009544:	2601      	movs	r6, #1
 8009546:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009548:	0759      	lsls	r1, r3, #29
 800954a:	d50f      	bpl.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800954c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8009550:	2a05      	cmp	r2, #5
 8009552:	d809      	bhi.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8009554:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009558:	02180131 	.word	0x02180131
 800955c:	0131012b 	.word	0x0131012b
 8009560:	01310131 	.word	0x01310131
 8009564:	58024400 	.word	0x58024400
      ret = HAL_ERROR;
 8009568:	2601      	movs	r6, #1
 800956a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800956c:	069a      	lsls	r2, r3, #26
 800956e:	d51d      	bpl.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009570:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009574:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009578:	f000 82a1 	beq.w	8009abe <HAL_RCCEx_PeriphCLKConfig+0x98e>
 800957c:	f200 83bc 	bhi.w	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
 8009580:	b142      	cbz	r2, 8009594 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009582:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8009586:	f040 83c3 	bne.w	8009d10 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800958a:	2100      	movs	r1, #0
 800958c:	1d20      	adds	r0, r4, #4
 800958e:	f7ff fbef 	bl	8008d70 <RCCEx_PLL2_Config>
 8009592:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009594:	2d00      	cmp	r5, #0
 8009596:	f040 81c9 	bne.w	800992c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800959a:	4ab9      	ldr	r2, [pc, #740]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 800959c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80095a0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80095a2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80095a6:	430b      	orrs	r3, r1
 80095a8:	6553      	str	r3, [r2, #84]	; 0x54
 80095aa:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095ac:	065f      	lsls	r7, r3, #25
 80095ae:	d51d      	bpl.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80095b0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80095b4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80095b8:	f000 8277 	beq.w	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80095bc:	f200 83bb 	bhi.w	8009d36 <HAL_RCCEx_PeriphCLKConfig+0xc06>
 80095c0:	b142      	cbz	r2, 80095d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80095c2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80095c6:	f040 83c2 	bne.w	8009d4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095ca:	2100      	movs	r1, #0
 80095cc:	1d20      	adds	r0, r4, #4
 80095ce:	f7ff fbcf 	bl	8008d70 <RCCEx_PLL2_Config>
 80095d2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095d4:	2d00      	cmp	r5, #0
 80095d6:	f040 81a6 	bne.w	8009926 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80095da:	4aa9      	ldr	r2, [pc, #676]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 80095dc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80095e0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80095e2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80095e6:	430b      	orrs	r3, r1
 80095e8:	6593      	str	r3, [r2, #88]	; 0x58
 80095ea:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80095ec:	0618      	lsls	r0, r3, #24
 80095ee:	d51d      	bpl.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80095f0:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80095f4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80095f8:	f000 824d 	beq.w	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80095fc:	f200 835d 	bhi.w	8009cba <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8009600:	b142      	cbz	r2, 8009614 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8009602:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009606:	f040 8364 	bne.w	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xba2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800960a:	2100      	movs	r1, #0
 800960c:	1d20      	adds	r0, r4, #4
 800960e:	f7ff fbaf 	bl	8008d70 <RCCEx_PLL2_Config>
 8009612:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009614:	2d00      	cmp	r5, #0
 8009616:	f040 8183 	bne.w	8009920 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800961a:	4a99      	ldr	r2, [pc, #612]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 800961c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8009620:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009622:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009626:	430b      	orrs	r3, r1
 8009628:	6593      	str	r3, [r2, #88]	; 0x58
 800962a:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800962c:	0719      	lsls	r1, r3, #28
 800962e:	d510      	bpl.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x522>
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 8009630:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009634:	f432 5340 	bics.w	r3, r2, #12288	; 0x3000
 8009638:	f040 831a 	bne.w	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xb40>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800963c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009640:	f000 8266 	beq.w	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009644:	498e      	ldr	r1, [pc, #568]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 8009646:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8009648:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800964c:	4313      	orrs	r3, r2
 800964e:	654b      	str	r3, [r1, #84]	; 0x54
 8009650:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009652:	06da      	lsls	r2, r3, #27
 8009654:	d516      	bpl.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x554>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8009656:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800965a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800965e:	bf18      	it	ne
 8009660:	f5b2 5f40 	cmpne.w	r2, #12288	; 0x3000
 8009664:	d003      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8009666:	f432 7380 	bics.w	r3, r2, #256	; 0x100
 800966a:	f040 8309 	bne.w	8009c80 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800966e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009672:	f000 8259 	beq.w	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009676:	4982      	ldr	r1, [pc, #520]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 8009678:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800967a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800967e:	4313      	orrs	r3, r2
 8009680:	658b      	str	r3, [r1, #88]	; 0x58
 8009682:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009684:	031f      	lsls	r7, r3, #12
 8009686:	d50e      	bpl.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x576>
    switch(PeriphClkInit->AdcClockSelection)
 8009688:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800968c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009690:	f000 80e3 	beq.w	800985a <HAL_RCCEx_PeriphCLKConfig+0x72a>
 8009694:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8009698:	f000 80e5 	beq.w	8009866 <HAL_RCCEx_PeriphCLKConfig+0x736>
 800969c:	2900      	cmp	r1, #0
 800969e:	f000 82d6 	beq.w	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
      ret = HAL_ERROR;
 80096a2:	2601      	movs	r6, #1
 80096a4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80096a6:	0358      	lsls	r0, r3, #13
 80096a8:	d50f      	bpl.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch(PeriphClkInit->UsbClockSelection)
 80096aa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80096ae:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80096b2:	f000 80eb 	beq.w	800988c <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80096b6:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80096ba:	f000 80ed 	beq.w	8009898 <HAL_RCCEx_PeriphCLKConfig+0x768>
 80096be:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80096c2:	f000 82cc 	beq.w	8009c5e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
      ret = HAL_ERROR;
 80096c6:	2601      	movs	r6, #1
 80096c8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096ca:	03d9      	lsls	r1, r3, #15
 80096cc:	d515      	bpl.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 80096ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80096d0:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 80096d4:	f040 8171 	bne.w	80099ba <HAL_RCCEx_PeriphCLKConfig+0x88a>
    switch(PeriphClkInit->SdmmcClockSelection)
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 813b 	beq.w	8009954 <HAL_RCCEx_PeriphCLKConfig+0x824>
 80096de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096e2:	f040 8129 	bne.w	8009938 <HAL_RCCEx_PeriphCLKConfig+0x808>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096e6:	2102      	movs	r1, #2
 80096e8:	1d20      	adds	r0, r4, #4
 80096ea:	f7ff fb41 	bl	8008d70 <RCCEx_PLL2_Config>
 80096ee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80096f0:	2d00      	cmp	r5, #0
 80096f2:	f000 8137 	beq.w	8009964 <HAL_RCCEx_PeriphCLKConfig+0x834>
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80096fa:	009a      	lsls	r2, r3, #2
 80096fc:	f100 80e9 	bmi.w	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009700:	039f      	lsls	r7, r3, #14
 8009702:	d437      	bmi.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x644>
 8009704:	3600      	adds	r6, #0
 8009706:	bf18      	it	ne
 8009708:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800970a:	02d8      	lsls	r0, r3, #11
 800970c:	d50b      	bpl.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 800970e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8009710:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009714:	f040 814a 	bne.w	80099ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009718:	4959      	ldr	r1, [pc, #356]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 800971a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800971c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009720:	4313      	orrs	r3, r2
 8009722:	650b      	str	r3, [r1, #80]	; 0x50
 8009724:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009726:	0299      	lsls	r1, r3, #10
 8009728:	d50b      	bpl.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x612>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800972a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800972c:	f032 7380 	bics.w	r3, r2, #16777216	; 0x1000000
 8009730:	f040 814d 	bne.w	80099ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009734:	4952      	ldr	r1, [pc, #328]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 8009736:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8009738:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800973c:	4313      	orrs	r3, r2
 800973e:	650b      	str	r3, [r1, #80]	; 0x50
 8009740:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009742:	005a      	lsls	r2, r3, #1
 8009744:	d510      	bpl.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x638>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8009746:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800974a:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800974e:	f040 8145 	bne.w	80099dc <HAL_RCCEx_PeriphCLKConfig+0x8ac>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009752:	4b4b      	ldr	r3, [pc, #300]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 8009754:	691a      	ldr	r2, [r3, #16]
 8009756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800975a:	611a      	str	r2, [r3, #16]
 800975c:	691a      	ldr	r2, [r3, #16]
 800975e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8009762:	430a      	orrs	r2, r1
 8009764:	611a      	str	r2, [r3, #16]
 8009766:	6823      	ldr	r3, [r4, #0]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009768:	2b00      	cmp	r3, #0
 800976a:	f2c0 80a1 	blt.w	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x780>
}
 800976e:	4630      	mov	r0, r6
 8009770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8009774:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009776:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800977a:	f000 80e1 	beq.w	8009940 <HAL_RCCEx_PeriphCLKConfig+0x810>
 800977e:	f240 813c 	bls.w	80099fa <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8009782:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009786:	f000 80e0 	beq.w	800994a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800978a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800978e:	f000 80dc 	beq.w	800994a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8009792:	2601      	movs	r6, #1
 8009794:	e7b9      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x5da>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8009796:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800979a:	4b3a      	ldr	r3, [pc, #232]	; (8009884 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800979c:	429a      	cmp	r2, r3
 800979e:	f43f ae43 	beq.w	8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80097a2:	f44f 715a 	mov.w	r1, #872	; 0x368
 80097a6:	4838      	ldr	r0, [pc, #224]	; (8009888 <HAL_RCCEx_PeriphCLKConfig+0x758>)
 80097a8:	f00a f8cc 	bl	8013944 <assert_failed>
 80097ac:	e63c      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097ae:	2101      	movs	r1, #1
 80097b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097b4:	f7ff fbcc 	bl	8008f50 <RCCEx_PLL3_Config>
 80097b8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80097ba:	2d00      	cmp	r5, #0
 80097bc:	f040 809e 	bne.w	80098fc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097c0:	4a2f      	ldr	r2, [pc, #188]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 80097c2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80097c6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80097c8:	f023 0307 	bic.w	r3, r3, #7
 80097cc:	430b      	orrs	r3, r1
 80097ce:	6593      	str	r3, [r2, #88]	; 0x58
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	e6cb      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x43c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097d4:	2101      	movs	r1, #1
 80097d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097da:	f7ff fbb9 	bl	8008f50 <RCCEx_PLL3_Config>
 80097de:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80097e0:	2d00      	cmp	r5, #0
 80097e2:	f040 808e 	bne.w	8009902 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80097e6:	4a26      	ldr	r2, [pc, #152]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 80097e8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80097ea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80097ec:	f023 0307 	bic.w	r3, r3, #7
 80097f0:	430b      	orrs	r3, r1
 80097f2:	6553      	str	r3, [r2, #84]	; 0x54
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	e6a7      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x418>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80097f8:	2102      	movs	r1, #2
 80097fa:	1d20      	adds	r0, r4, #4
 80097fc:	f7ff fab8 	bl	8008d70 <RCCEx_PLL2_Config>
 8009800:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009802:	2d00      	cmp	r5, #0
 8009804:	d177      	bne.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009806:	4a1e      	ldr	r2, [pc, #120]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 8009808:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800980a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800980c:	f023 0303 	bic.w	r3, r3, #3
 8009810:	430b      	orrs	r3, r1
 8009812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	e58a      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009818:	2101      	movs	r1, #1
 800981a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800981e:	f7ff fb97 	bl	8008f50 <RCCEx_PLL3_Config>
 8009822:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009824:	2d00      	cmp	r5, #0
 8009826:	d163      	bne.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009828:	4a15      	ldr	r2, [pc, #84]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 800982a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800982c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800982e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8009832:	430b      	orrs	r3, r1
 8009834:	6553      	str	r3, [r2, #84]	; 0x54
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	e677      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800983a:	2101      	movs	r1, #1
 800983c:	1d20      	adds	r0, r4, #4
 800983e:	f7ff fa97 	bl	8008d70 <RCCEx_PLL2_Config>
 8009842:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009844:	2d00      	cmp	r5, #0
 8009846:	d174      	bne.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009848:	4a0d      	ldr	r2, [pc, #52]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 800984a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800984c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800984e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009852:	430b      	orrs	r3, r1
 8009854:	6513      	str	r3, [r2, #80]	; 0x50
 8009856:	6823      	ldr	r3, [r4, #0]
 8009858:	e55c      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800985a:	2102      	movs	r1, #2
 800985c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009860:	f7ff fb76 	bl	8008f50 <RCCEx_PLL3_Config>
 8009864:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009866:	2d00      	cmp	r5, #0
 8009868:	d151      	bne.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800986a:	4a05      	ldr	r2, [pc, #20]	; (8009880 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 800986c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8009870:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009872:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009876:	430b      	orrs	r3, r1
 8009878:	6593      	str	r3, [r2, #88]	; 0x58
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	e713      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x576>
 800987e:	bf00      	nop
 8009880:	58024400 	.word	0x58024400
 8009884:	0003e300 	.word	0x0003e300
 8009888:	08144fb8 	.word	0x08144fb8
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800988c:	2101      	movs	r1, #1
 800988e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009892:	f7ff fb5d 	bl	8008f50 <RCCEx_PLL3_Config>
 8009896:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009898:	2d00      	cmp	r5, #0
 800989a:	d135      	bne.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800989c:	4ab2      	ldr	r2, [pc, #712]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 800989e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80098a2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80098a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80098a8:	430b      	orrs	r3, r1
 80098aa:	6553      	str	r3, [r2, #84]	; 0x54
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	e70c      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 80098b0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80098b2:	f032 5380 	bics.w	r3, r2, #268435456	; 0x10000000
 80098b6:	d003      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x790>
 80098b8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80098bc:	f040 81c0 	bne.w	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xb10>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80098c0:	49a9      	ldr	r1, [pc, #676]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
}
 80098c2:	4630      	mov	r0, r6
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80098c4:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80098c6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80098ca:	4313      	orrs	r3, r2
 80098cc:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 80098ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80098d2:	2102      	movs	r1, #2
 80098d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80098d8:	f7ff fb3a 	bl	8008f50 <RCCEx_PLL3_Config>
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	2800      	cmp	r0, #0
 80098e0:	f43f af0e 	beq.w	8009700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      status=HAL_ERROR;
 80098e4:	2601      	movs	r6, #1
 80098e6:	e70b      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
            ret = HAL_TIMEOUT;
 80098e8:	2603      	movs	r6, #3
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	4635      	mov	r5, r6
 80098ee:	e5ea      	b.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x396>
 80098f0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80098f2:	462e      	mov	r6, r5
 80098f4:	e619      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80098f6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80098f8:	462e      	mov	r6, r5
 80098fa:	e518      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80098fc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80098fe:	462e      	mov	r6, r5
 8009900:	e634      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8009902:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009904:	462e      	mov	r6, r5
 8009906:	e61f      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009908:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800990a:	462e      	mov	r6, r5
 800990c:	e6dd      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800990e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009910:	462e      	mov	r6, r5
 8009912:	e6c8      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8009914:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009916:	462e      	mov	r6, r5
 8009918:	e4ec      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 800991a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800991c:	462e      	mov	r6, r5
 800991e:	e4c9      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8009920:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009922:	462e      	mov	r6, r5
 8009924:	e682      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8009926:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009928:	462e      	mov	r6, r5
 800992a:	e65f      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800992c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800992e:	462e      	mov	r6, r5
 8009930:	e63c      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009932:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009934:	462e      	mov	r6, r5
 8009936:	e4ed      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      ret = HAL_ERROR;
 8009938:	2601      	movs	r6, #1
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	4635      	mov	r5, r6
 800993e:	e6dc      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009940:	4a89      	ldr	r2, [pc, #548]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009942:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009948:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800994a:	2d00      	cmp	r5, #0
 800994c:	d05a      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	2601      	movs	r6, #1
 8009952:	e6da      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009954:	4a84      	ldr	r2, [pc, #528]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009956:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800995c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800995e:	2d00      	cmp	r5, #0
 8009960:	f47f aec9 	bne.w	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009964:	4a80      	ldr	r2, [pc, #512]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009966:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009968:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800996a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800996e:	430b      	orrs	r3, r1
 8009970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	e6c1      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009976:	2101      	movs	r1, #1
 8009978:	1d20      	adds	r0, r4, #4
 800997a:	f7ff f9f9 	bl	8008d70 <RCCEx_PLL2_Config>
 800997e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009980:	2d00      	cmp	r5, #0
 8009982:	f43f af30 	beq.w	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8009986:	e7bc      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009988:	2101      	movs	r1, #1
 800998a:	1d20      	adds	r0, r4, #4
 800998c:	f7ff f9f0 	bl	8008d70 <RCCEx_PLL2_Config>
 8009990:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009992:	2d00      	cmp	r5, #0
 8009994:	f43f af14 	beq.w	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8009998:	e7b0      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800999a:	4a73      	ldr	r2, [pc, #460]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 800999c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800999e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80099a4:	2d00      	cmp	r5, #0
 80099a6:	f43f af2e 	beq.w	8009806 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80099aa:	e7a4      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80099ac:	f240 51bd 	movw	r1, #1469	; 0x5bd
 80099b0:	486e      	ldr	r0, [pc, #440]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 80099b2:	f009 ffc7 	bl	8013944 <assert_failed>
 80099b6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80099b8:	e6ae      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 80099ba:	f240 515e 	movw	r1, #1374	; 0x55e
 80099be:	486b      	ldr	r0, [pc, #428]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 80099c0:	f009 ffc0 	bl	8013944 <assert_failed>
 80099c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    switch(PeriphClkInit->SdmmcClockSelection)
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f47f ae89 	bne.w	80096de <HAL_RCCEx_PeriphCLKConfig+0x5ae>
 80099cc:	e7c2      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x824>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80099ce:	f240 51d1 	movw	r1, #1489	; 0x5d1
 80099d2:	4866      	ldr	r0, [pc, #408]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 80099d4:	f009 ffb6 	bl	8013944 <assert_failed>
 80099d8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80099da:	e6ab      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x604>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80099dc:	f240 51e7 	movw	r1, #1511	; 0x5e7
 80099e0:	4862      	ldr	r0, [pc, #392]	; (8009b6c <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 80099e2:	f009 ffaf 	bl	8013944 <assert_failed>
 80099e6:	e6b4      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x622>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099e8:	2101      	movs	r1, #1
 80099ea:	1d20      	adds	r0, r4, #4
 80099ec:	f7ff f9c0 	bl	8008d70 <RCCEx_PLL2_Config>
 80099f0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80099f2:	2d00      	cmp	r5, #0
 80099f4:	f43f af18 	beq.w	8009828 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80099f8:	e77a      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    switch(PeriphClkInit->RngClockSelection)
 80099fa:	2a00      	cmp	r2, #0
 80099fc:	f47f aec9 	bne.w	8009792 <HAL_RCCEx_PeriphCLKConfig+0x662>
    if(ret == HAL_OK)
 8009a00:	2d00      	cmp	r5, #0
 8009a02:	d1a4      	bne.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a04:	4a58      	ldr	r2, [pc, #352]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009a06:	3600      	adds	r6, #0
 8009a08:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8009a0a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009a0c:	bf18      	it	ne
 8009a0e:	2601      	movne	r6, #1
 8009a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a14:	430b      	orrs	r3, r1
 8009a16:	6553      	str	r3, [r2, #84]	; 0x54
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	e676      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a1c:	4a52      	ldr	r2, [pc, #328]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009a1e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a24:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009a26:	b14d      	cbz	r5, 8009a3c <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	462e      	mov	r6, r5
 8009a2c:	e40a      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a2e:	2102      	movs	r1, #2
 8009a30:	1d20      	adds	r0, r4, #4
 8009a32:	f7ff f99d 	bl	8008d70 <RCCEx_PLL2_Config>
 8009a36:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009a38:	2d00      	cmp	r5, #0
 8009a3a:	d1f5      	bne.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009a3c:	4a4a      	ldr	r2, [pc, #296]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009a3e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009a40:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009a42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009a46:	430b      	orrs	r3, r1
 8009a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	f7ff bbfa 	b.w	8009244 <HAL_RCCEx_PeriphCLKConfig+0x114>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a50:	2101      	movs	r1, #1
 8009a52:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009a56:	f7ff fa7b 	bl	8008f50 <RCCEx_PLL3_Config>
 8009a5a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009a5c:	2d00      	cmp	r5, #0
 8009a5e:	f43f ac21 	beq.w	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8009a62:	e75a      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a64:	2101      	movs	r1, #1
 8009a66:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009a6a:	f7ff fa71 	bl	8008f50 <RCCEx_PLL3_Config>
 8009a6e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009a70:	2d00      	cmp	r5, #0
 8009a72:	f43f ac36 	beq.w	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009a76:	e74d      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a78:	4a3b      	ldr	r2, [pc, #236]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009a7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a80:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009a82:	2d00      	cmp	r5, #0
 8009a84:	f43f aee0 	beq.w	8009848 <HAL_RCCEx_PeriphCLKConfig+0x718>
 8009a88:	e753      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x802>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009a8a:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8009a8c:	b34d      	cbz	r5, 8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	462e      	mov	r6, r5
 8009a92:	f7ff bb79 	b.w	8009188 <HAL_RCCEx_PeriphCLKConfig+0x58>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a96:	2102      	movs	r1, #2
 8009a98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009a9c:	f7ff fa58 	bl	8008f50 <RCCEx_PLL3_Config>
 8009aa0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009aa2:	2d00      	cmp	r5, #0
 8009aa4:	f43f adb9 	beq.w	800961a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8009aa8:	e73a      	b.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009aaa:	2102      	movs	r1, #2
 8009aac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ab0:	f7ff fa4e 	bl	8008f50 <RCCEx_PLL3_Config>
 8009ab4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009ab6:	2d00      	cmp	r5, #0
 8009ab8:	f43f ad8f 	beq.w	80095da <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8009abc:	e733      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009abe:	2102      	movs	r1, #2
 8009ac0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ac4:	f7ff fa44 	bl	8008f50 <RCCEx_PLL3_Config>
 8009ac8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009aca:	2d00      	cmp	r5, #0
 8009acc:	f43f ad65 	beq.w	800959a <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8009ad0:	e72c      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ad2:	4a25      	ldr	r2, [pc, #148]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
      break;
 8009ad4:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ad6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009adc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009ade:	2d00      	cmp	r5, #0
 8009ae0:	d1d5      	bne.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x95e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ae2:	4a21      	ldr	r2, [pc, #132]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009ae4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009ae6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009ae8:	f023 0307 	bic.w	r3, r3, #7
 8009aec:	430b      	orrs	r3, r1
 8009aee:	6513      	str	r3, [r2, #80]	; 0x50
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	f7ff bb49 	b.w	8009188 <HAL_RCCEx_PeriphCLKConfig+0x58>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009af6:	2100      	movs	r1, #0
 8009af8:	1d20      	adds	r0, r4, #4
 8009afa:	f7ff f939 	bl	8008d70 <RCCEx_PLL2_Config>
 8009afe:	4605      	mov	r5, r0
      break;
 8009b00:	e7c4      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b02:	2100      	movs	r1, #0
 8009b04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b08:	f7ff fa22 	bl	8008f50 <RCCEx_PLL3_Config>
 8009b0c:	4605      	mov	r5, r0
      break;
 8009b0e:	e7bd      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009b10:	2102      	movs	r1, #2
 8009b12:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b16:	f7ff fa1b 	bl	8008f50 <RCCEx_PLL3_Config>
 8009b1a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	f43f ad90 	beq.w	8009644 <HAL_RCCEx_PeriphCLKConfig+0x514>
          status = HAL_ERROR;
 8009b24:	2601      	movs	r6, #1
 8009b26:	e58d      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x514>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009b28:	2102      	movs	r1, #2
 8009b2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b2e:	f7ff fa0f 	bl	8008f50 <RCCEx_PLL3_Config>
 8009b32:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8009b36:	2800      	cmp	r0, #0
 8009b38:	f43f ad9d 	beq.w	8009676 <HAL_RCCEx_PeriphCLKConfig+0x546>
        status = HAL_ERROR;
 8009b3c:	2601      	movs	r6, #1
 8009b3e:	e59a      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x546>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b40:	2100      	movs	r1, #0
 8009b42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b46:	f7ff fa03 	bl	8008f50 <RCCEx_PLL3_Config>
 8009b4a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009b4c:	2d00      	cmp	r5, #0
 8009b4e:	f47f ab91 	bne.w	8009274 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009b52:	4a05      	ldr	r2, [pc, #20]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8009b54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009b56:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b5c:	430b      	orrs	r3, r1
 8009b5e:	6513      	str	r3, [r2, #80]	; 0x50
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	f7ff bb89 	b.w	8009278 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8009b66:	bf00      	nop
 8009b68:	58024400 	.word	0x58024400
 8009b6c:	08144fb8 	.word	0x08144fb8
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b70:	4aa0      	ldr	r2, [pc, #640]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009b72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b78:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009b7a:	2d00      	cmp	r5, #0
 8009b7c:	f47f ab50 	bne.w	8009220 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009b80:	4a9c      	ldr	r2, [pc, #624]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009b82:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8009b86:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009b88:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009b8c:	430b      	orrs	r3, r1
 8009b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	f7ff bb47 	b.w	8009224 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b96:	2102      	movs	r1, #2
 8009b98:	3004      	adds	r0, #4
 8009b9a:	f7ff f8e9 	bl	8008d70 <RCCEx_PLL2_Config>
 8009b9e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009ba0:	2e00      	cmp	r6, #0
 8009ba2:	f47f aae2 	bne.w	800916a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8009ba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ba8:	f7ff bad8 	b.w	800915c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009bac:	2100      	movs	r1, #0
 8009bae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009bb2:	f7ff f9cd 	bl	8008f50 <RCCEx_PLL3_Config>
 8009bb6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009bb8:	2d00      	cmp	r5, #0
 8009bba:	f47f aafb 	bne.w	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009bbe:	4a8d      	ldr	r2, [pc, #564]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009bc0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009bc2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009bc4:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8009bc8:	430b      	orrs	r3, r1
 8009bca:	6513      	str	r3, [r2, #80]	; 0x50
 8009bcc:	6823      	ldr	r3, [r4, #0]
 8009bce:	f7ff baf3 	b.w	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009bd8:	f7ff f9ba 	bl	8008f50 <RCCEx_PLL3_Config>
 8009bdc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009bde:	2d00      	cmp	r5, #0
 8009be0:	f47f ab03 	bne.w	80091ea <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009be4:	4a83      	ldr	r2, [pc, #524]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009be6:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8009bea:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009bec:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8009bf0:	430b      	orrs	r3, r1
 8009bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	f7ff bafa 	b.w	80091ee <HAL_RCCEx_PeriphCLKConfig+0xbe>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009c00:	f7ff f9a6 	bl	8008f50 <RCCEx_PLL3_Config>
 8009c04:	4605      	mov	r5, r0
      break;
 8009c06:	f7ff bb08 	b.w	800921a <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c0a:	2102      	movs	r1, #2
 8009c0c:	3024      	adds	r0, #36	; 0x24
 8009c0e:	f7ff f99f 	bl	8008f50 <RCCEx_PLL3_Config>
 8009c12:	4606      	mov	r6, r0
      break;
 8009c14:	e7c4      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c16:	4a77      	ldr	r2, [pc, #476]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009c18:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009c20:	f7ff bac5 	b.w	80091ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c24:	4a73      	ldr	r2, [pc, #460]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009c26:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c2c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009c2e:	f7ff bb1e 	b.w	800926e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c32:	4a70      	ldr	r2, [pc, #448]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009c34:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009c3c:	f7ff bad2 	b.w	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8009c40:	f240 51f1 	movw	r1, #1521	; 0x5f1
 8009c44:	486c      	ldr	r0, [pc, #432]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>)
 8009c46:	f009 fe7d 	bl	8013944 <assert_failed>
 8009c4a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009c4c:	e638      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x790>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c4e:	1d20      	adds	r0, r4, #4
 8009c50:	f7ff f88e 	bl	8008d70 <RCCEx_PLL2_Config>
 8009c54:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c56:	2d00      	cmp	r5, #0
 8009c58:	f43f ae07 	beq.w	800986a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8009c5c:	e657      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c5e:	4a65      	ldr	r2, [pc, #404]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009c60:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c66:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009c68:	2d00      	cmp	r5, #0
 8009c6a:	f43f ae17 	beq.w	800989c <HAL_RCCEx_PeriphCLKConfig+0x76c>
 8009c6e:	e64b      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 8009c70:	f240 41e6 	movw	r1, #1254	; 0x4e6
 8009c74:	4860      	ldr	r0, [pc, #384]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>)
 8009c76:	f009 fe65 	bl	8013944 <assert_failed>
 8009c7a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009c7e:	e4dd      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8009c80:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 8009c84:	485c      	ldr	r0, [pc, #368]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>)
 8009c86:	f009 fe5d 	bl	8013944 <assert_failed>
 8009c8a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8009c8e:	e4ee      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x53e>
        tickstart = HAL_GetTick();
 8009c90:	f7f6 fec6 	bl	8000a20 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c94:	4f57      	ldr	r7, [pc, #348]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
        tickstart = HAL_GetTick();
 8009c96:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c98:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c9c:	e006      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c9e:	f7f6 febf 	bl	8000a20 <HAL_GetTick>
 8009ca2:	eba0 0009 	sub.w	r0, r0, r9
 8009ca6:	4540      	cmp	r0, r8
 8009ca8:	f63f ae1e 	bhi.w	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cae:	079b      	lsls	r3, r3, #30
 8009cb0:	d5f5      	bpl.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8009cb2:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8009cb6:	f7ff bbf2 	b.w	800949e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009cba:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009cbe:	f43f aca9 	beq.w	8009614 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8009cc2:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 8009cc6:	f43f aca5 	beq.w	8009614 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8009cca:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8009cce:	f43f aca1 	beq.w	8009614 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = HAL_ERROR;
 8009cd2:	2601      	movs	r6, #1
 8009cd4:	4635      	mov	r5, r6
 8009cd6:	e4a9      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009cd8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8009cdc:	f43f aadf 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009ce0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8009ce4:	f43f aadb 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009ce8:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8009cec:	f43f aad7 	beq.w	800929e <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = HAL_ERROR;
 8009cf0:	2601      	movs	r6, #1
 8009cf2:	4635      	mov	r5, r6
 8009cf4:	f7ff bade 	b.w	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009cf8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009cfc:	f43f ac4a 	beq.w	8009594 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009d00:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8009d04:	f43f ac46 	beq.w	8009594 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009d08:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009d0c:	f43f ac42 	beq.w	8009594 <HAL_RCCEx_PeriphCLKConfig+0x464>
      ret = HAL_ERROR;
 8009d10:	2601      	movs	r6, #1
 8009d12:	4635      	mov	r5, r6
 8009d14:	e44a      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009d16:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009d1a:	f43f aadf 	beq.w	80092dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8009d1e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8009d22:	f43f aadb 	beq.w	80092dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8009d26:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009d2a:	f43f aad7 	beq.w	80092dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      ret = HAL_ERROR;
 8009d2e:	2601      	movs	r6, #1
 8009d30:	4635      	mov	r5, r6
 8009d32:	f7ff badf 	b.w	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009d36:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009d3a:	f43f ac4b 	beq.w	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009d3e:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8009d42:	f43f ac47 	beq.w	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009d46:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8009d4a:	f43f ac43 	beq.w	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      ret = HAL_ERROR;
 8009d4e:	2601      	movs	r6, #1
 8009d50:	4635      	mov	r5, r6
 8009d52:	e44b      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009d54:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8009d58:	f43f aa44 	beq.w	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8009d5c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8009d60:	f43f aa40 	beq.w	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = HAL_ERROR;
 8009d64:	2601      	movs	r6, #1
 8009d66:	4635      	mov	r5, r6
 8009d68:	f7ff ba41 	b.w	80091ee <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai23ClockSelection)
 8009d6c:	2ac0      	cmp	r2, #192	; 0xc0
 8009d6e:	f43f aa1e 	beq.w	80091ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8009d72:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009d76:	f43f aa1a 	beq.w	80091ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 8009d7a:	2601      	movs	r6, #1
 8009d7c:	4635      	mov	r5, r6
 8009d7e:	f7ff ba1b 	b.w	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009d82:	bb22      	cbnz	r2, 8009dce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d84:	4a1b      	ldr	r2, [pc, #108]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009d86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d8e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8009d90:	f7ff b9e4 	b.w	800915c <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009d94:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8009d98:	f43f aa69 	beq.w	800926e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8009d9c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009da0:	f43f aa65 	beq.w	800926e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = HAL_ERROR;
 8009da4:	2601      	movs	r6, #1
 8009da6:	4635      	mov	r5, r6
 8009da8:	f7ff ba66 	b.w	8009278 <HAL_RCCEx_PeriphCLKConfig+0x148>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009dac:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8009db0:	f43f aa33 	beq.w	800921a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8009db4:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8009db8:	f43f aa2f 	beq.w	800921a <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = HAL_ERROR;
 8009dbc:	2601      	movs	r6, #1
 8009dbe:	4635      	mov	r5, r6
 8009dc0:	f7ff ba30 	b.w	8009224 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->QspiClockSelection)
 8009dc4:	2a00      	cmp	r2, #0
 8009dc6:	f43f ae2e 	beq.w	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8009dca:	f7ff ba39 	b.w	8009240 <HAL_RCCEx_PeriphCLKConfig+0x110>
      ret = HAL_ERROR;
 8009dce:	2601      	movs	r6, #1
 8009dd0:	f7ff b9cc 	b.w	800916c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009dd4:	4807      	ldr	r0, [pc, #28]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>)
 8009dd6:	4b09      	ldr	r3, [pc, #36]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0xccc>)
 8009dd8:	6901      	ldr	r1, [r0, #16]
 8009dda:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 8009dde:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 8009de2:	4313      	orrs	r3, r2
 8009de4:	6103      	str	r3, [r0, #16]
 8009de6:	f7ff bb65 	b.w	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8009dea:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009dec:	462e      	mov	r6, r5
 8009dee:	f7ff bb6a 	b.w	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8009df2:	bf00      	nop
 8009df4:	58024400 	.word	0x58024400
 8009df8:	08144fb8 	.word	0x08144fb8
 8009dfc:	00ffffcf 	.word	0x00ffffcf

08009e00 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e00:	4a46      	ldr	r2, [pc, #280]	; (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 8009e02:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e04:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009e06:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009e08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009e0a:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009e0e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d059      	beq.n	8009ec8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009e14:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009e18:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e1c:	f004 0403 	and.w	r4, r4, #3
 8009e20:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009e24:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8009e28:	2c01      	cmp	r4, #1
 8009e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e2e:	ee06 1a90 	vmov	s13, r1
 8009e32:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8009e36:	d002      	beq.n	8009e3e <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 8009e38:	d34e      	bcc.n	8009ed8 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8009e3a:	2c02      	cmp	r4, #2
 8009e3c:	d049      	beq.n	8009ed2 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e3e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 8009e42:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8009e46:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e4c:	ee07 3a10 	vmov	s14, r3
 8009e50:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009e54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009e58:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009e5c:	ee77 7a26 	vadd.f32	s15, s14, s13
 8009e60:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009e64:	4a2d      	ldr	r2, [pc, #180]	; (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 8009e66:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009e6a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009e6c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009e70:	ee06 3a90 	vmov	s13, r3
 8009e74:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8009e78:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009e7a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009e7e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009e82:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009e86:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009e8a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009e8c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009e90:	ee06 3a90 	vmov	s13, r3
 8009e94:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009e98:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009e9c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009ea0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009ea4:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009ea8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009eaa:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009eae:	ee07 3a10 	vmov	s14, r3
 8009eb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009eb6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009eba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009ebe:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009ec2:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8009ec6:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009ec8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ecc:	6083      	str	r3, [r0, #8]
}
 8009ece:	bc30      	pop	{r4, r5}
 8009ed0:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ed2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8009ed6:	e7b4      	b.n	8009e42 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ed8:	6813      	ldr	r3, [r2, #0]
 8009eda:	069b      	lsls	r3, r3, #26
 8009edc:	d51a      	bpl.n	8009f14 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ede:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ee0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ee4:	4910      	ldr	r1, [pc, #64]	; (8009f28 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8009ee6:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009eea:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009eec:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef2:	ee07 1a10 	vmov	s14, r1
 8009ef6:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8009efa:	ee07 3a10 	vmov	s14, r3
 8009efe:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8009f02:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8009f06:	ee76 7a05 	vadd.f32	s15, s12, s10
 8009f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f12:	e7a7      	b.n	8009e64 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f14:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009f2c <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8009f18:	e793      	b.n	8009e42 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8009f1a:	bf00      	nop
 8009f1c:	58024400 	.word	0x58024400
 8009f20:	4a742400 	.word	0x4a742400
 8009f24:	4bbebc20 	.word	0x4bbebc20
 8009f28:	03d09000 	.word	0x03d09000
 8009f2c:	4c742400 	.word	0x4c742400

08009f30 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f30:	4a46      	ldr	r2, [pc, #280]	; (800a04c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 8009f32:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f34:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009f36:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009f38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009f3a:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009f3e:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d059      	beq.n	8009ff8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009f44:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009f48:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f4c:	f004 0403 	and.w	r4, r4, #3
 8009f50:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009f54:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8009f58:	2c01      	cmp	r4, #1
 8009f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f5e:	ee06 1a90 	vmov	s13, r1
 8009f62:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8009f66:	d002      	beq.n	8009f6e <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 8009f68:	d34e      	bcc.n	800a008 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8009f6a:	2c02      	cmp	r4, #2
 8009f6c:	d049      	beq.n	800a002 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f6e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a050 <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 8009f72:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8009f76:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f7c:	ee07 3a10 	vmov	s14, r3
 8009f80:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009f84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009f88:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009f8c:	ee77 7a26 	vadd.f32	s15, s14, s13
 8009f90:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009f94:	4a2d      	ldr	r2, [pc, #180]	; (800a04c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 8009f96:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009f9a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009f9c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009fa0:	ee06 3a90 	vmov	s13, r3
 8009fa4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8009fa8:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009faa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009fae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009fb2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009fb6:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009fba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009fbc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009fc0:	ee06 3a90 	vmov	s13, r3
 8009fc4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009fc8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009fcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009fd0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009fd4:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009fd8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009fda:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009fde:	ee07 3a10 	vmov	s14, r3
 8009fe2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009fe6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009fea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009fee:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009ff2:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8009ff6:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ff8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ffc:	6083      	str	r3, [r0, #8]
}
 8009ffe:	bc30      	pop	{r4, r5}
 800a000:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a002:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800a006:	e7b4      	b.n	8009f72 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a008:	6813      	ldr	r3, [r2, #0]
 800a00a:	069b      	lsls	r3, r3, #26
 800a00c:	d51a      	bpl.n	800a044 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a00e:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a010:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a014:	4910      	ldr	r1, [pc, #64]	; (800a058 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 800a016:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a01a:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a01c:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a022:	ee07 1a10 	vmov	s14, r1
 800a026:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800a02a:	ee07 3a10 	vmov	s14, r3
 800a02e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800a032:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800a036:	ee76 7a05 	vadd.f32	s15, s12, s10
 800a03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a042:	e7a7      	b.n	8009f94 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a044:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a05c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 800a048:	e793      	b.n	8009f72 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 800a04a:	bf00      	nop
 800a04c:	58024400 	.word	0x58024400
 800a050:	4a742400 	.word	0x4a742400
 800a054:	4bbebc20 	.word	0x4bbebc20
 800a058:	03d09000 	.word	0x03d09000
 800a05c:	4c742400 	.word	0x4c742400

0800a060 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a060:	4a46      	ldr	r2, [pc, #280]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 800a062:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a064:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a066:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a068:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a06a:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a06e:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 800a070:	2b00      	cmp	r3, #0
 800a072:	d059      	beq.n	800a128 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a074:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a078:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a07c:	f004 0403 	and.w	r4, r4, #3
 800a080:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a084:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 800a088:	2c01      	cmp	r4, #1
 800a08a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a08e:	ee06 1a90 	vmov	s13, r1
 800a092:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800a096:	d002      	beq.n	800a09e <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 800a098:	d34e      	bcc.n	800a138 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 800a09a:	2c02      	cmp	r4, #2
 800a09c:	d049      	beq.n	800a132 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a09e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a180 <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 800a0a2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a0a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a0a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ac:	ee07 3a10 	vmov	s14, r3
 800a0b0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a0b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a0b8:	ee37 7a25 	vadd.f32	s14, s14, s11
 800a0bc:	ee77 7a26 	vadd.f32	s15, s14, s13
 800a0c0:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a0c4:	4a2d      	ldr	r2, [pc, #180]	; (800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 800a0c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a0ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a0cc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a0d0:	ee06 3a90 	vmov	s13, r3
 800a0d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 800a0d8:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a0da:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a0de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a0e2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a0e6:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a0ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a0ec:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a0f0:	ee06 3a90 	vmov	s13, r3
 800a0f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a0f8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a0fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a100:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800a104:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a108:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a10a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a10e:	ee07 3a10 	vmov	s14, r3
 800a112:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a116:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a11a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a11e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a122:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800a126:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a128:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a12c:	6083      	str	r3, [r0, #8]
}
 800a12e:	bc30      	pop	{r4, r5}
 800a130:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a132:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a184 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800a136:	e7b4      	b.n	800a0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a138:	6813      	ldr	r3, [r2, #0]
 800a13a:	069b      	lsls	r3, r3, #26
 800a13c:	d51a      	bpl.n	800a174 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a13e:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a140:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a144:	4910      	ldr	r1, [pc, #64]	; (800a188 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 800a146:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a14a:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a14c:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a152:	ee07 1a10 	vmov	s14, r1
 800a156:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800a15a:	ee07 3a10 	vmov	s14, r3
 800a15e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800a162:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800a166:	ee76 7a05 	vadd.f32	s15, s12, s10
 800a16a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a172:	e7a7      	b.n	800a0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a174:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a18c <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 800a178:	e793      	b.n	800a0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 800a17a:	bf00      	nop
 800a17c:	58024400 	.word	0x58024400
 800a180:	4a742400 	.word	0x4a742400
 800a184:	4bbebc20 	.word	0x4bbebc20
 800a188:	03d09000 	.word	0x03d09000
 800a18c:	4c742400 	.word	0x4c742400

0800a190 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a190:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800a194:	b500      	push	{lr}
 800a196:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a198:	d02d      	beq.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a19a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a19e:	d018      	beq.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a1a0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a1a4:	d04e      	beq.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a1a6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800a1aa:	d037      	beq.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a1ac:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800a1b0:	f000 808b 	beq.w	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a1b4:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800a1b8:	f000 80ac 	beq.w	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a1bc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800a1c0:	f000 80b6 	beq.w	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a1c4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800a1c8:	d062      	beq.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 800a1ca:	2000      	movs	r0, #0
}
 800a1cc:	b005      	add	sp, #20
 800a1ce:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a1d2:	4a70      	ldr	r2, [pc, #448]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a1d4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a1d6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800a1da:	2b80      	cmp	r3, #128	; 0x80
 800a1dc:	d043      	beq.n	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800a1de:	d86a      	bhi.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d039      	beq.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800a1e4:	2b40      	cmp	r3, #64	; 0x40
 800a1e6:	d1f0      	bne.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1e8:	a801      	add	r0, sp, #4
 800a1ea:	f7ff fe09 	bl	8009e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1ee:	9801      	ldr	r0, [sp, #4]
}
 800a1f0:	b005      	add	sp, #20
 800a1f2:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a1f6:	4b67      	ldr	r3, [pc, #412]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a1f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1fa:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	d8e3      	bhi.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800a202:	a201      	add	r2, pc, #4	; (adr r2, 800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 800a204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a208:	0800a259 	.word	0x0800a259
 800a20c:	0800a1e9 	.word	0x0800a1e9
 800a210:	0800a267 	.word	0x0800a267
 800a214:	0800a23d 	.word	0x0800a23d
 800a218:	0800a275 	.word	0x0800a275
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a21c:	4a5d      	ldr	r2, [pc, #372]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a21e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a220:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800a224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a228:	d01d      	beq.n	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800a22a:	d85c      	bhi.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 800a22c:	b1a3      	cbz	r3, 800a258 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800a22e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a232:	d0d9      	beq.n	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800a234:	e7c9      	b.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 800a236:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a23a:	d15b      	bne.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 800a23c:	4856      	ldr	r0, [pc, #344]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 800a23e:	b005      	add	sp, #20
 800a240:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a244:	4a53      	ldr	r2, [pc, #332]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a246:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a248:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 800a24c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a250:	d009      	beq.n	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800a252:	d8f0      	bhi.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800a254:	2b00      	cmp	r3, #0
 800a256:	d151      	bne.n	800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a258:	a801      	add	r0, sp, #4
 800a25a:	f7ff ff01 	bl	800a060 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a25e:	9802      	ldr	r0, [sp, #8]
}
 800a260:	b005      	add	sp, #20
 800a262:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a266:	a801      	add	r0, sp, #4
 800a268:	f7ff fe62 	bl	8009f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a26c:	9801      	ldr	r0, [sp, #4]
}
 800a26e:	b005      	add	sp, #20
 800a270:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a274:	4b47      	ldr	r3, [pc, #284]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a278:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800a27c:	d019      	beq.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a27e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a282:	d062      	beq.n	800a34a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 800a284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a288:	4844      	ldr	r0, [pc, #272]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 800a28a:	bf18      	it	ne
 800a28c:	2000      	movne	r0, #0
 800a28e:	e79d      	b.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a290:	4b40      	ldr	r3, [pc, #256]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a294:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800a298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a29c:	d068      	beq.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800a29e:	d95b      	bls.n	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 800a2a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a4:	d051      	beq.n	800a34a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800a2a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2aa:	d05f      	beq.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800a2ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2b0:	d18b      	bne.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 800a2b2:	483b      	ldr	r0, [pc, #236]	; (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 800a2b4:	e78a      	b.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 800a2b6:	2bc0      	cmp	r3, #192	; 0xc0
 800a2b8:	d0c0      	beq.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800a2ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2be:	d184      	bne.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a2c0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a2c2:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800a2c6:	d1da      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800a2c8:	e7f3      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a2ca:	4a32      	ldr	r2, [pc, #200]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a2cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a2ce:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800a2d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2d6:	d0c6      	beq.n	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800a2d8:	d815      	bhi.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d0bc      	beq.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800a2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e2:	d081      	beq.n	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800a2e4:	e771      	b.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 800a2e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2ea:	d0a7      	beq.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800a2ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2f0:	d0e6      	beq.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800a2f2:	e76a      	b.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 800a2f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2f8:	d0e2      	beq.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800a2fa:	e766      	b.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800a2fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a300:	f43f af72 	beq.w	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800a304:	e761      	b.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 800a306:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a30a:	d097      	beq.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800a30c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a310:	d0d6      	beq.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800a312:	e75a      	b.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a314:	4a1f      	ldr	r2, [pc, #124]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a316:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800a31c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a320:	d015      	beq.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a326:	d0cb      	beq.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f47f af4e 	bne.w	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800a32e:	e75b      	b.n	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a330:	4b18      	ldr	r3, [pc, #96]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 800a334:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800a338:	d08e      	beq.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f43f af45 	beq.w	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a340:	a801      	add	r0, sp, #4
 800a342:	f7ff fd5d 	bl	8009e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a346:	9803      	ldr	r0, [sp, #12]
          break;
 800a348:	e740      	b.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 800a34a:	4816      	ldr	r0, [pc, #88]	; (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 800a34c:	e73e      	b.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a34e:	a801      	add	r0, sp, #4
 800a350:	f7ff fdee 	bl	8009f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a354:	9803      	ldr	r0, [sp, #12]
          break;
 800a356:	e739      	b.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 800a358:	b17b      	cbz	r3, 800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a35a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a35e:	f47f af34 	bne.w	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a362:	a801      	add	r0, sp, #4
 800a364:	f7ff fd4c 	bl	8009e00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a368:	9802      	ldr	r0, [sp, #8]
          break;
 800a36a:	e72f      	b.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 800a36c:	480b      	ldr	r0, [pc, #44]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 800a36e:	e72d      	b.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a370:	a801      	add	r0, sp, #4
 800a372:	f7ff fddd 	bl	8009f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a376:	9802      	ldr	r0, [sp, #8]
          break;
 800a378:	e728      	b.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a37a:	f7fe fc51 	bl	8008c20 <HAL_RCC_GetHCLKFreq>
 800a37e:	4b05      	ldr	r3, [pc, #20]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800a380:	4a09      	ldr	r2, [pc, #36]	; (800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 800a382:	6a1b      	ldr	r3, [r3, #32]
 800a384:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a388:	5cd3      	ldrb	r3, [r2, r3]
 800a38a:	f003 031f 	and.w	r3, r3, #31
 800a38e:	40d8      	lsrs	r0, r3
          break;
 800a390:	e71c      	b.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800a392:	bf00      	nop
 800a394:	58024400 	.word	0x58024400
 800a398:	00bb8000 	.word	0x00bb8000
 800a39c:	017d7840 	.word	0x017d7840
 800a3a0:	03d09000 	.word	0x03d09000
 800a3a4:	003d0900 	.word	0x003d0900
 800a3a8:	0802ae24 	.word	0x0802ae24

0800a3ac <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	d049      	beq.n	800a444 <HAL_RNG_Init+0x98>
{
 800a3b0:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800a3b2:	4b28      	ldr	r3, [pc, #160]	; (800a454 <HAL_RNG_Init+0xa8>)
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	6802      	ldr	r2, [r0, #0]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d003      	beq.n	800a3c4 <HAL_RNG_Init+0x18>
 800a3bc:	21b1      	movs	r1, #177	; 0xb1
 800a3be:	4826      	ldr	r0, [pc, #152]	; (800a458 <HAL_RNG_Init+0xac>)
 800a3c0:	f009 fac0 	bl	8013944 <assert_failed>
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
 800a3c4:	6863      	ldr	r3, [r4, #4]
 800a3c6:	f033 0320 	bics.w	r3, r3, #32
 800a3ca:	d131      	bne.n	800a430 <HAL_RNG_Init+0x84>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a3cc:	7a63      	ldrb	r3, [r4, #9]
 800a3ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a3d2:	b343      	cbz	r3, 800a426 <HAL_RNG_Init+0x7a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a3d4:	2302      	movs	r3, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800a3d6:	e9d4 2100 	ldrd	r2, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800a3da:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800a3dc:	6813      	ldr	r3, [r2, #0]
 800a3de:	f023 0320 	bic.w	r3, r3, #32
 800a3e2:	430b      	orrs	r3, r1
 800a3e4:	6013      	str	r3, [r2, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a3e6:	6822      	ldr	r2, [r4, #0]
 800a3e8:	6813      	ldr	r3, [r2, #0]
 800a3ea:	f043 0304 	orr.w	r3, r3, #4
 800a3ee:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	065b      	lsls	r3, r3, #25
 800a3f6:	d503      	bpl.n	800a400 <HAL_RNG_Init+0x54>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a3f8:	2304      	movs	r3, #4
    return HAL_ERROR;
 800a3fa:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 800a3fc:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 800a400:	f7f6 fb0e 	bl	8000a20 <HAL_GetTick>
 800a404:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800a406:	e004      	b.n	800a412 <HAL_RNG_Init+0x66>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a408:	f7f6 fb0a 	bl	8000a20 <HAL_GetTick>
 800a40c:	1b40      	subs	r0, r0, r5
 800a40e:	2802      	cmp	r0, #2
 800a410:	d81a      	bhi.n	800a448 <HAL_RNG_Init+0x9c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800a412:	6823      	ldr	r3, [r4, #0]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	f013 0304 	ands.w	r3, r3, #4
 800a41a:	d1f5      	bne.n	800a408 <HAL_RNG_Init+0x5c>
  hrng->State = HAL_RNG_STATE_READY;
 800a41c:	2201      	movs	r2, #1
  return HAL_OK;
 800a41e:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800a420:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a422:	60e3      	str	r3, [r4, #12]
}
 800a424:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800a426:	7222      	strb	r2, [r4, #8]
    HAL_RNG_MspInit(hrng);
 800a428:	4620      	mov	r0, r4
 800a42a:	f009 ff9d 	bl	8014368 <HAL_RNG_MspInit>
 800a42e:	e7d1      	b.n	800a3d4 <HAL_RNG_Init+0x28>
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
 800a430:	21b2      	movs	r1, #178	; 0xb2
 800a432:	4809      	ldr	r0, [pc, #36]	; (800a458 <HAL_RNG_Init+0xac>)
 800a434:	f009 fa86 	bl	8013944 <assert_failed>
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a438:	7a63      	ldrb	r3, [r4, #9]
 800a43a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1c8      	bne.n	800a3d4 <HAL_RNG_Init+0x28>
 800a442:	e7f0      	b.n	800a426 <HAL_RNG_Init+0x7a>
    return HAL_ERROR;
 800a444:	2001      	movs	r0, #1
}
 800a446:	4770      	bx	lr
      hrng->State = HAL_RNG_STATE_ERROR;
 800a448:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a44a:	2302      	movs	r3, #2
      return HAL_ERROR;
 800a44c:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 800a44e:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a450:	60e3      	str	r3, [r4, #12]
}
 800a452:	bd38      	pop	{r3, r4, r5, pc}
 800a454:	48021800 	.word	0x48021800
 800a458:	08144ff4 	.word	0x08144ff4

0800a45c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800a45e:	7a03      	ldrb	r3, [r0, #8]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d00b      	beq.n	800a47c <HAL_RNG_GenerateRandomNumber+0x20>
 800a464:	4604      	mov	r4, r0
 800a466:	2001      	movs	r0, #1
 800a468:	460e      	mov	r6, r1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800a46a:	7a63      	ldrb	r3, [r4, #9]
  __HAL_LOCK(hrng);
 800a46c:	7220      	strb	r0, [r4, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 800a46e:	4283      	cmp	r3, r0
 800a470:	d006      	beq.n	800a480 <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800a472:	2304      	movs	r3, #4
 800a474:	60e3      	str	r3, [r4, #12]
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800a476:	2300      	movs	r3, #0
 800a478:	7223      	strb	r3, [r4, #8]

  return status;
}
 800a47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng);
 800a47c:	2002      	movs	r0, #2
}
 800a47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 800a480:	2302      	movs	r3, #2
 800a482:	7263      	strb	r3, [r4, #9]
    tickstart = HAL_GetTick();
 800a484:	f7f6 facc 	bl	8000a20 <HAL_GetTick>
 800a488:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a48a:	e004      	b.n	800a496 <HAL_RNG_GenerateRandomNumber+0x3a>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a48c:	f7f6 fac8 	bl	8000a20 <HAL_GetTick>
 800a490:	1bc0      	subs	r0, r0, r7
 800a492:	2802      	cmp	r0, #2
 800a494:	d80b      	bhi.n	800a4ae <HAL_RNG_GenerateRandomNumber+0x52>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a496:	6822      	ldr	r2, [r4, #0]
 800a498:	6855      	ldr	r5, [r2, #4]
 800a49a:	f015 0501 	ands.w	r5, r5, #1
 800a49e:	d0f5      	beq.n	800a48c <HAL_RNG_GenerateRandomNumber+0x30>
    hrng->RandomNumber = hrng->Instance->DR;
 800a4a0:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 800a4a2:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 800a4a4:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 800a4a6:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800a4a8:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800a4aa:	7262      	strb	r2, [r4, #9]
 800a4ac:	e7e3      	b.n	800a476 <HAL_RNG_GenerateRandomNumber+0x1a>
        hrng->State = HAL_RNG_STATE_READY;
 800a4ae:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a4b0:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 800a4b2:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 800a4b4:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a4b6:	60e3      	str	r3, [r4, #12]
}
 800a4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4ba:	bf00      	nop

0800a4bc <HAL_SAI_InitProtocol>:
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
 800a4bc:	2904      	cmp	r1, #4
{
 800a4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c0:	460d      	mov	r5, r1
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	4617      	mov	r7, r2
 800a4c6:	461e      	mov	r6, r3
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
 800a4c8:	d87c      	bhi.n	800a5c4 <HAL_SAI_InitProtocol+0x108>
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));
 800a4ca:	2f03      	cmp	r7, #3
 800a4cc:	d874      	bhi.n	800a5b8 <HAL_SAI_InitProtocol+0xfc>

  switch (protocol)
 800a4ce:	2d04      	cmp	r5, #4
 800a4d0:	d828      	bhi.n	800a524 <HAL_SAI_InitProtocol+0x68>
 800a4d2:	e8df f005 	tbb	[pc, r5]
 800a4d6:	4c4c      	.short	0x4c4c
 800a4d8:	294c      	.short	0x294c
 800a4da:	29          	.byte	0x29
 800a4db:	00          	.byte	0x00

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
 800a4dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d904      	bls.n	800a4ee <HAL_SAI_InitProtocol+0x32>
 800a4e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a4e8:	4839      	ldr	r0, [pc, #228]	; (800a5d0 <HAL_SAI_InitProtocol+0x114>)
 800a4ea:	f009 fa2b 	bl	8013944 <assert_failed>
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
 800a4ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4f0:	b113      	cbz	r3, 800a4f8 <HAL_SAI_InitProtocol+0x3c>
 800a4f2:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800a4f6:	d004      	beq.n	800a502 <HAL_SAI_InitProtocol+0x46>
 800a4f8:	f240 11af 	movw	r1, #431	; 0x1af
 800a4fc:	4834      	ldr	r0, [pc, #208]	; (800a5d0 <HAL_SAI_InitProtocol+0x114>)
 800a4fe:	f009 fa21 	bl	8013944 <assert_failed>
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	4a33      	ldr	r2, [pc, #204]	; (800a5d4 <HAL_SAI_InitProtocol+0x118>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d005      	beq.n	800a516 <HAL_SAI_InitProtocol+0x5a>
 800a50a:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800a50e:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800a512:	4293      	cmp	r3, r2
 800a514:	d106      	bne.n	800a524 <HAL_SAI_InitProtocol+0x68>
 800a516:	6862      	ldr	r2, [r4, #4]
 800a518:	2a01      	cmp	r2, #1
 800a51a:	d103      	bne.n	800a524 <HAL_SAI_InitProtocol+0x68>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a51c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a51e:	2a00      	cmp	r2, #0
 800a520:	f000 816d 	beq.w	800a7fe <HAL_SAI_InitProtocol+0x342>
  hsai->SlotInit.SlotNumber      = nbslot;

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
  {
    return HAL_ERROR;
 800a524:	2001      	movs	r0, #1
}
 800a526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a528:	6862      	ldr	r2, [r4, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a52a:	2300      	movs	r3, #0
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a52c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a530:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a534:	f032 0202 	bics.w	r2, r2, #2
  hsai->SlotInit.FirstBitOffset  = 0;
  hsai->SlotInit.SlotNumber      = nbslot;
 800a538:	6726      	str	r6, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a53a:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a53c:	bf0c      	ite	eq
 800a53e:	2201      	moveq	r2, #1
 800a540:	461a      	movne	r2, r3
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;

  if (protocol == SAI_PCM_SHORT)
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800a542:	2d04      	cmp	r5, #4
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a544:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a546:	6522      	str	r2, [r4, #80]	; 0x50
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a548:	f64f 72ff 	movw	r2, #65535	; 0xffff
      hsai->FrameInit.ActiveFrameLength = 1;
 800a54c:	bf14      	ite	ne
 800a54e:	250d      	movne	r5, #13
 800a550:	2501      	moveq	r5, #1
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a552:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a554:	65a5      	str	r5, [r4, #88]	; 0x58
  hsai->SlotInit.FirstBitOffset  = 0;
 800a556:	66a3      	str	r3, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a558:	6762      	str	r2, [r4, #116]	; 0x74
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a55a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
  }

  switch (datasize)
 800a55e:	2f03      	cmp	r7, #3
 800a560:	d8e0      	bhi.n	800a524 <HAL_SAI_InitProtocol+0x68>
 800a562:	e8df f017 	tbh	[pc, r7, lsl #1]
 800a566:	0173      	.short	0x0173
 800a568:	017a016d 	.word	0x017a016d
 800a56c:	0039      	.short	0x0039
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a56e:	6862      	ldr	r2, [r4, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a570:	2300      	movs	r3, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800a572:	6726      	str	r6, [r4, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a574:	f032 0202 	bics.w	r2, r2, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a578:	6463      	str	r3, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a57a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a57c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a580:	bf08      	it	eq
 800a582:	4619      	moveq	r1, r3
  hsai->SlotInit.FirstBitOffset  = 0;
 800a584:	66a3      	str	r3, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a586:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a58a:	bf18      	it	ne
 800a58c:	2101      	movne	r1, #1
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a58e:	65e2      	str	r2, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a590:	6763      	str	r3, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 800a592:	f016 0301 	ands.w	r3, r6, #1
 800a596:	6521      	str	r1, [r4, #80]	; 0x50
 800a598:	d1c4      	bne.n	800a524 <HAL_SAI_InitProtocol+0x68>
  if (protocol == SAI_I2S_STANDARD)
 800a59a:	2d00      	cmp	r5, #0
 800a59c:	f000 8164 	beq.w	800a868 <HAL_SAI_InitProtocol+0x3ac>
 800a5a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a5a4:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
  switch (datasize)
 800a5a8:	2f03      	cmp	r7, #3
 800a5aa:	d8bb      	bhi.n	800a524 <HAL_SAI_InitProtocol+0x68>
 800a5ac:	e8df f017 	tbh	[pc, r7, lsl #1]
 800a5b0:	02490259 	.word	0x02490259
 800a5b4:	022e0238 	.word	0x022e0238
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));
 800a5b8:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800a5bc:	4804      	ldr	r0, [pc, #16]	; (800a5d0 <HAL_SAI_InitProtocol+0x114>)
 800a5be:	f009 f9c1 	bl	8013944 <assert_failed>
 800a5c2:	e784      	b.n	800a4ce <HAL_SAI_InitProtocol+0x12>
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
 800a5c4:	f240 1151 	movw	r1, #337	; 0x151
 800a5c8:	4801      	ldr	r0, [pc, #4]	; (800a5d0 <HAL_SAI_InitProtocol+0x114>)
 800a5ca:	f009 f9bb 	bl	8013944 <assert_failed>
 800a5ce:	e77c      	b.n	800a4ca <HAL_SAI_InitProtocol+0xe>
 800a5d0:	0814502c 	.word	0x0814502c
 800a5d4:	40015804 	.word	0x40015804
      hsai->FrameInit.FrameLength = 32U * nbslot;
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
      break;
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a5d8:	0176      	lsls	r6, r6, #5
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a5da:	21e0      	movs	r1, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a5dc:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a5de:	6566      	str	r6, [r4, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a5e0:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a5e2:	66e2      	str	r2, [r4, #108]	; 0x6c
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 800a5e4:	6822      	ldr	r2, [r4, #0]
 800a5e6:	4ba7      	ldr	r3, [pc, #668]	; (800a884 <HAL_SAI_InitProtocol+0x3c8>)
 800a5e8:	49a7      	ldr	r1, [pc, #668]	; (800a888 <HAL_SAI_InitProtocol+0x3cc>)
 800a5ea:	48a8      	ldr	r0, [pc, #672]	; (800a88c <HAL_SAI_InitProtocol+0x3d0>)
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	bf18      	it	ne
 800a5f0:	428a      	cmpne	r2, r1
 800a5f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a5f6:	4da6      	ldr	r5, [pc, #664]	; (800a890 <HAL_SAI_InitProtocol+0x3d4>)
 800a5f8:	bf14      	ite	ne
 800a5fa:	2301      	movne	r3, #1
 800a5fc:	2300      	moveq	r3, #0
 800a5fe:	4282      	cmp	r2, r0
 800a600:	bf0c      	ite	eq
 800a602:	2300      	moveq	r3, #0
 800a604:	f003 0301 	andne.w	r3, r3, #1
 800a608:	f500 6084 	add.w	r0, r0, #1056	; 0x420
 800a60c:	428a      	cmp	r2, r1
 800a60e:	bf0c      	ite	eq
 800a610:	2300      	moveq	r3, #0
 800a612:	f003 0301 	andne.w	r3, r3, #1
 800a616:	499f      	ldr	r1, [pc, #636]	; (800a894 <HAL_SAI_InitProtocol+0x3d8>)
 800a618:	42aa      	cmp	r2, r5
 800a61a:	bf0c      	ite	eq
 800a61c:	2300      	moveq	r3, #0
 800a61e:	f003 0301 	andne.w	r3, r3, #1
 800a622:	4282      	cmp	r2, r0
 800a624:	bf0c      	ite	eq
 800a626:	2300      	moveq	r3, #0
 800a628:	f003 0301 	andne.w	r3, r3, #1
 800a62c:	428a      	cmp	r2, r1
 800a62e:	bf0c      	ite	eq
 800a630:	2300      	moveq	r3, #0
 800a632:	f003 0301 	andne.w	r3, r3, #1
 800a636:	b11b      	cbz	r3, 800a640 <HAL_SAI_InitProtocol+0x184>
 800a638:	4b97      	ldr	r3, [pc, #604]	; (800a898 <HAL_SAI_InitProtocol+0x3dc>)
 800a63a:	429a      	cmp	r2, r3
 800a63c:	f040 835d 	bne.w	800acfa <HAL_SAI_InitProtocol+0x83e>
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 800a640:	6a22      	ldr	r2, [r4, #32]
 800a642:	f64b 3680 	movw	r6, #48000	; 0xbb80
 800a646:	4b95      	ldr	r3, [pc, #596]	; (800a89c <HAL_SAI_InitProtocol+0x3e0>)
 800a648:	f64a 4544 	movw	r5, #44100	; 0xac44
 800a64c:	4994      	ldr	r1, [pc, #592]	; (800a8a0 <HAL_SAI_InitProtocol+0x3e4>)
 800a64e:	f245 6022 	movw	r0, #22050	; 0x5622
 800a652:	429a      	cmp	r2, r3
 800a654:	bf18      	it	ne
 800a656:	428a      	cmpne	r2, r1
 800a658:	f642 3111 	movw	r1, #11025	; 0x2b11
 800a65c:	bf14      	ite	ne
 800a65e:	2301      	movne	r3, #1
 800a660:	2300      	moveq	r3, #0
 800a662:	42b2      	cmp	r2, r6
 800a664:	bf0c      	ite	eq
 800a666:	2300      	moveq	r3, #0
 800a668:	f003 0301 	andne.w	r3, r3, #1
 800a66c:	42aa      	cmp	r2, r5
 800a66e:	bf0c      	ite	eq
 800a670:	2300      	moveq	r3, #0
 800a672:	f003 0301 	andne.w	r3, r3, #1
 800a676:	f5b2 4ffa 	cmp.w	r2, #32000	; 0x7d00
 800a67a:	bf0c      	ite	eq
 800a67c:	2300      	moveq	r3, #0
 800a67e:	f003 0301 	andne.w	r3, r3, #1
 800a682:	4282      	cmp	r2, r0
 800a684:	bf0c      	ite	eq
 800a686:	2300      	moveq	r3, #0
 800a688:	f003 0301 	andne.w	r3, r3, #1
 800a68c:	f5b2 5f7a 	cmp.w	r2, #16000	; 0x3e80
 800a690:	bf0c      	ite	eq
 800a692:	2300      	moveq	r3, #0
 800a694:	f003 0301 	andne.w	r3, r3, #1
 800a698:	428a      	cmp	r2, r1
 800a69a:	bf0c      	ite	eq
 800a69c:	2300      	moveq	r3, #0
 800a69e:	f003 0301 	andne.w	r3, r3, #1
 800a6a2:	f5b2 5ffa 	cmp.w	r2, #8000	; 0x1f40
 800a6a6:	bf0c      	ite	eq
 800a6a8:	2300      	moveq	r3, #0
 800a6aa:	f003 0301 	andne.w	r3, r3, #1
 800a6ae:	b113      	cbz	r3, 800a6b6 <HAL_SAI_InitProtocol+0x1fa>
 800a6b0:	2a00      	cmp	r2, #0
 800a6b2:	f040 8333 	bne.w	800ad1c <HAL_SAI_InitProtocol+0x860>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 800a6b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a6b8:	f033 0204 	bics.w	r2, r3, #4
 800a6bc:	d006      	beq.n	800a6cc <HAL_SAI_InitProtocol+0x210>
 800a6be:	2b08      	cmp	r3, #8
 800a6c0:	d004      	beq.n	800a6cc <HAL_SAI_InitProtocol+0x210>
 800a6c2:	f240 1185 	movw	r1, #389	; 0x185
 800a6c6:	4877      	ldr	r0, [pc, #476]	; (800a8a4 <HAL_SAI_InitProtocol+0x3e8>)
 800a6c8:	f009 f93c 	bl	8013944 <assert_failed>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 800a6cc:	6863      	ldr	r3, [r4, #4]
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	f200 8166 	bhi.w	800a9a0 <HAL_SAI_InitProtocol+0x4e4>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 800a6d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a6d6:	f023 0220 	bic.w	r2, r3, #32
 800a6da:	2a80      	cmp	r2, #128	; 0x80
 800a6dc:	d004      	beq.n	800a6e8 <HAL_SAI_InitProtocol+0x22c>
 800a6de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6e2:	2b40      	cmp	r3, #64	; 0x40
 800a6e4:	f040 82e7 	bne.w	800acb6 <HAL_SAI_InitProtocol+0x7fa>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 800a6e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a6ea:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800a6ee:	f040 8151 	bne.w	800a994 <HAL_SAI_InitProtocol+0x4d8>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 800a6f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d904      	bls.n	800a702 <HAL_SAI_InitProtocol+0x246>
 800a6f8:	f240 1189 	movw	r1, #393	; 0x189
 800a6fc:	4869      	ldr	r0, [pc, #420]	; (800a8a4 <HAL_SAI_InitProtocol+0x3e8>)
 800a6fe:	f009 f921 	bl	8013944 <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 800a702:	68a3      	ldr	r3, [r4, #8]
 800a704:	2b05      	cmp	r3, #5
 800a706:	f200 813f 	bhi.w	800a988 <HAL_SAI_InitProtocol+0x4cc>
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a70a:	f7f6 f9a1 	bl	8000a50 <HAL_GetREVID>
 800a70e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800a712:	d304      	bcc.n	800a71e <HAL_SAI_InitProtocol+0x262>
    assert_param(IS_SAI_BLOCK_MCK_OUTPUT(hsai->Init.MckOutput));
 800a714:	6923      	ldr	r3, [r4, #16]
 800a716:	f033 6300 	bics.w	r3, r3, #134217728	; 0x8000000
 800a71a:	f040 8294 	bne.w	800ac46 <HAL_SAI_InitProtocol+0x78a>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 800a71e:	6963      	ldr	r3, [r4, #20]
 800a720:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800a724:	f040 812a 	bne.w	800a97c <HAL_SAI_InitProtocol+0x4c0>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 800a728:	69a3      	ldr	r3, [r4, #24]
 800a72a:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800a72e:	f040 8167 	bne.w	800aa00 <HAL_SAI_InitProtocol+0x544>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 800a732:	69e3      	ldr	r3, [r4, #28]
 800a734:	2b04      	cmp	r3, #4
 800a736:	f200 815d 	bhi.w	800a9f4 <HAL_SAI_InitProtocol+0x538>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 800a73a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a73c:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800a740:	f040 8152 	bne.w	800a9e8 <HAL_SAI_InitProtocol+0x52c>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 800a744:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a746:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a74a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a74e:	f5b1 4f20 	cmp.w	r1, #40960	; 0xa000
 800a752:	bf18      	it	ne
 800a754:	2a00      	cmpne	r2, #0
 800a756:	d003      	beq.n	800a760 <HAL_SAI_InitProtocol+0x2a4>
 800a758:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a75c:	f040 82a3 	bne.w	800aca6 <HAL_SAI_InitProtocol+0x7ea>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 800a760:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a762:	f033 0310 	bics.w	r3, r3, #16
 800a766:	f040 8139 	bne.w	800a9dc <HAL_SAI_InitProtocol+0x520>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 800a76a:	68e3      	ldr	r3, [r4, #12]
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	f200 812f 	bhi.w	800a9d0 <HAL_SAI_InitProtocol+0x514>
  assert_param(IS_SAI_BLOCK_MCK_OVERSAMPLING(hsai->Init.MckOverSampling));
 800a772:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a774:	f033 6380 	bics.w	r3, r3, #67108864	; 0x4000000
 800a778:	f040 8124 	bne.w	800a9c4 <HAL_SAI_InitProtocol+0x508>
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 800a77c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a77e:	3b08      	subs	r3, #8
 800a780:	2bf8      	cmp	r3, #248	; 0xf8
 800a782:	f200 8119 	bhi.w	800a9b8 <HAL_SAI_InitProtocol+0x4fc>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 800a786:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a788:	3b01      	subs	r3, #1
 800a78a:	2b7f      	cmp	r3, #127	; 0x7f
 800a78c:	f200 810e 	bhi.w	800a9ac <HAL_SAI_InitProtocol+0x4f0>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 800a790:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a792:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a796:	f040 80eb 	bne.w	800a970 <HAL_SAI_InitProtocol+0x4b4>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 800a79a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a79c:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800a7a0:	f040 80e0 	bne.w	800a964 <HAL_SAI_InitProtocol+0x4a8>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 800a7a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7a6:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 800a7aa:	f040 80d5 	bne.w	800a958 <HAL_SAI_InitProtocol+0x49c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 800a7ae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a7b0:	2b18      	cmp	r3, #24
 800a7b2:	f200 80cb 	bhi.w	800a94c <HAL_SAI_InitProtocol+0x490>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 800a7b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a7b8:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800a7bc:	d006      	beq.n	800a7cc <HAL_SAI_InitProtocol+0x310>
 800a7be:	2b80      	cmp	r3, #128	; 0x80
 800a7c0:	d004      	beq.n	800a7cc <HAL_SAI_InitProtocol+0x310>
 800a7c2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800a7c6:	4837      	ldr	r0, [pc, #220]	; (800a8a4 <HAL_SAI_InitProtocol+0x3e8>)
 800a7c8:	f009 f8bc 	bl	8013944 <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 800a7cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	2b0f      	cmp	r3, #15
 800a7d2:	f200 80b5 	bhi.w	800a940 <HAL_SAI_InitProtocol+0x484>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 800a7d6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a7d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7dc:	f080 80aa 	bcs.w	800a934 <HAL_SAI_InitProtocol+0x478>
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
 800a7e0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d906      	bls.n	800a7f6 <HAL_SAI_InitProtocol+0x33a>
 800a7e8:	f240 11ab 	movw	r1, #427	; 0x1ab
 800a7ec:	482d      	ldr	r0, [pc, #180]	; (800a8a4 <HAL_SAI_InitProtocol+0x3e8>)
 800a7ee:	f009 f8a9 	bl	8013944 <assert_failed>
 800a7f2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	f43f ae70 	beq.w	800a4dc <HAL_SAI_InitProtocol+0x20>
 800a7fc:	6823      	ldr	r3, [r4, #0]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a7fe:	4a21      	ldr	r2, [pc, #132]	; (800a884 <HAL_SAI_InitProtocol+0x3c8>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d053      	beq.n	800a8ac <HAL_SAI_InitProtocol+0x3f0>
 800a804:	3220      	adds	r2, #32
 800a806:	4293      	cmp	r3, r2
 800a808:	d050      	beq.n	800a8ac <HAL_SAI_InitProtocol+0x3f0>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a80a:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800a80e:	4293      	cmp	r3, r2
 800a810:	f000 8136 	beq.w	800aa80 <HAL_SAI_InitProtocol+0x5c4>
 800a814:	3220      	adds	r2, #32
 800a816:	4293      	cmp	r3, r2
 800a818:	f000 8132 	beq.w	800aa80 <HAL_SAI_InitProtocol+0x5c4>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a81c:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800a820:	4293      	cmp	r3, r2
 800a822:	f000 8246 	beq.w	800acb2 <HAL_SAI_InitProtocol+0x7f6>
 800a826:	3220      	adds	r2, #32
 800a828:	4293      	cmp	r3, r2
 800a82a:	f000 8242 	beq.w	800acb2 <HAL_SAI_InitProtocol+0x7f6>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a82e:	4a19      	ldr	r2, [pc, #100]	; (800a894 <HAL_SAI_InitProtocol+0x3d8>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d003      	beq.n	800a83c <HAL_SAI_InitProtocol+0x380>
 800a834:	3220      	adds	r2, #32
 800a836:	4293      	cmp	r3, r2
 800a838:	f47f ae74 	bne.w	800a524 <HAL_SAI_InitProtocol+0x68>
    SaiBaseAddress = SAI4;
 800a83c:	4d1a      	ldr	r5, [pc, #104]	; (800a8a8 <HAL_SAI_InitProtocol+0x3ec>)
 800a83e:	e036      	b.n	800a8ae <HAL_SAI_InitProtocol+0x3f2>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a840:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a842:	0176      	lsls	r6, r6, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a844:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a846:	6566      	str	r6, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a848:	66e2      	str	r2, [r4, #108]	; 0x6c
 800a84a:	e6cb      	b.n	800a5e4 <HAL_SAI_InitProtocol+0x128>
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a84c:	0136      	lsls	r6, r6, #4
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a84e:	2180      	movs	r1, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a850:	2240      	movs	r2, #64	; 0x40
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a852:	6566      	str	r6, [r4, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a854:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a856:	66e2      	str	r2, [r4, #108]	; 0x6c
 800a858:	e6c4      	b.n	800a5e4 <HAL_SAI_InitProtocol+0x128>
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a85a:	0176      	lsls	r6, r6, #5
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a85c:	21c0      	movs	r1, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a85e:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a860:	6566      	str	r6, [r4, #84]	; 0x54
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a862:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a864:	66e2      	str	r2, [r4, #108]	; 0x6c
 800a866:	e6bd      	b.n	800a5e4 <HAL_SAI_InitProtocol+0x128>
 800a868:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a86c:	e9c4 5318 	strd	r5, r3, [r4, #96]	; 0x60
  switch (datasize)
 800a870:	2f03      	cmp	r7, #3
 800a872:	f63f ae57 	bhi.w	800a524 <HAL_SAI_InitProtocol+0x68>
 800a876:	e8df f017 	tbh	[pc, r7, lsl #1]
 800a87a:	00f4      	.short	0x00f4
 800a87c:	00d300e4 	.word	0x00d300e4
 800a880:	00c9      	.short	0x00c9
 800a882:	bf00      	nop
 800a884:	40015804 	.word	0x40015804
 800a888:	40015824 	.word	0x40015824
 800a88c:	40015c04 	.word	0x40015c04
 800a890:	40016004 	.word	0x40016004
 800a894:	58005404 	.word	0x58005404
 800a898:	58005424 	.word	0x58005424
 800a89c:	0002ee00 	.word	0x0002ee00
 800a8a0:	00017700 	.word	0x00017700
 800a8a4:	0814502c 	.word	0x0814502c
 800a8a8:	58005400 	.word	0x58005400
    SaiBaseAddress = SAI1;
 800a8ac:	4d75      	ldr	r5, [pc, #468]	; (800aa84 <HAL_SAI_InitProtocol+0x5c8>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800a8ae:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
 800a8b2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800a8b6:	2a00      	cmp	r2, #0
 800a8b8:	f000 81be 	beq.w	800ac38 <HAL_SAI_InitProtocol+0x77c>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a8bc:	4a72      	ldr	r2, [pc, #456]	; (800aa88 <HAL_SAI_InitProtocol+0x5cc>)
 800a8be:	4873      	ldr	r0, [pc, #460]	; (800aa8c <HAL_SAI_InitProtocol+0x5d0>)
 800a8c0:	6812      	ldr	r2, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a8c2:	6819      	ldr	r1, [r3, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a8c4:	fba0 0202 	umull	r0, r2, r0, r2
  __HAL_SAI_DISABLE(hsai);
 800a8c8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a8cc:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 800a8ce:	6019      	str	r1, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a8d0:	0093      	lsls	r3, r2, #2
 800a8d2:	b33a      	cbz	r2, 800a924 <HAL_SAI_InitProtocol+0x468>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a8d4:	6821      	ldr	r1, [r4, #0]
    count--;
 800a8d6:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a8d8:	680a      	ldr	r2, [r1, #0]
 800a8da:	03d7      	lsls	r7, r2, #15
 800a8dc:	d504      	bpl.n	800a8e8 <HAL_SAI_InitProtocol+0x42c>
    if (count == 0U)
 800a8de:	b30b      	cbz	r3, 800a924 <HAL_SAI_InitProtocol+0x468>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a8e0:	680a      	ldr	r2, [r1, #0]
    count--;
 800a8e2:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a8e4:	03d2      	lsls	r2, r2, #15
 800a8e6:	d4fa      	bmi.n	800a8de <HAL_SAI_InitProtocol+0x422>
  switch (hsai->Init.SynchroExt)
 800a8e8:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 800a8ea:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 800a8ec:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 800a8ee:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800a8f2:	f000 80c0 	beq.w	800aa76 <HAL_SAI_InitProtocol+0x5ba>
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	bf15      	itete	ne
 800a8fa:	4610      	movne	r0, r2
 800a8fc:	2123      	moveq	r1, #35	; 0x23
 800a8fe:	2103      	movne	r1, #3
 800a900:	2022      	moveq	r0, #34	; 0x22
 800a902:	bf0b      	itete	eq
 800a904:	2621      	moveq	r6, #33	; 0x21
 800a906:	2601      	movne	r6, #1
 800a908:	2220      	moveq	r2, #32
 800a90a:	2200      	movne	r2, #0
  switch (hsai->Init.Synchro)
 800a90c:	68a3      	ldr	r3, [r4, #8]
 800a90e:	3b01      	subs	r3, #1
 800a910:	2b04      	cmp	r3, #4
 800a912:	f200 818b 	bhi.w	800ac2c <HAL_SAI_InitProtocol+0x770>
 800a916:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a91a:	0186      	.short	0x0186
 800a91c:	018b00c0 	.word	0x018b00c0
 800a920:	01da00bf 	.word	0x01da00bf
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a924:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 800a928:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a92a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a92e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800a932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 800a934:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800a938:	4855      	ldr	r0, [pc, #340]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a93a:	f009 f803 	bl	8013944 <assert_failed>
 800a93e:	e74f      	b.n	800a7e0 <HAL_SAI_InitProtocol+0x324>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 800a940:	f240 11a7 	movw	r1, #423	; 0x1a7
 800a944:	4852      	ldr	r0, [pc, #328]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a946:	f008 fffd 	bl	8013944 <assert_failed>
 800a94a:	e744      	b.n	800a7d6 <HAL_SAI_InitProtocol+0x31a>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 800a94c:	f240 11a5 	movw	r1, #421	; 0x1a5
 800a950:	484f      	ldr	r0, [pc, #316]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a952:	f008 fff7 	bl	8013944 <assert_failed>
 800a956:	e72e      	b.n	800a7b6 <HAL_SAI_InitProtocol+0x2fa>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 800a958:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800a95c:	484c      	ldr	r0, [pc, #304]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a95e:	f008 fff1 	bl	8013944 <assert_failed>
 800a962:	e724      	b.n	800a7ae <HAL_SAI_InitProtocol+0x2f2>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 800a964:	f240 11a1 	movw	r1, #417	; 0x1a1
 800a968:	4849      	ldr	r0, [pc, #292]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a96a:	f008 ffeb 	bl	8013944 <assert_failed>
 800a96e:	e719      	b.n	800a7a4 <HAL_SAI_InitProtocol+0x2e8>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 800a970:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800a974:	4846      	ldr	r0, [pc, #280]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a976:	f008 ffe5 	bl	8013944 <assert_failed>
 800a97a:	e70e      	b.n	800a79a <HAL_SAI_InitProtocol+0x2de>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 800a97c:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800a980:	4843      	ldr	r0, [pc, #268]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a982:	f008 ffdf 	bl	8013944 <assert_failed>
 800a986:	e6cf      	b.n	800a728 <HAL_SAI_InitProtocol+0x26c>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 800a988:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800a98c:	4840      	ldr	r0, [pc, #256]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a98e:	f008 ffd9 	bl	8013944 <assert_failed>
 800a992:	e6ba      	b.n	800a70a <HAL_SAI_InitProtocol+0x24e>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 800a994:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800a998:	483d      	ldr	r0, [pc, #244]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a99a:	f008 ffd3 	bl	8013944 <assert_failed>
 800a99e:	e6a8      	b.n	800a6f2 <HAL_SAI_InitProtocol+0x236>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 800a9a0:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800a9a4:	483a      	ldr	r0, [pc, #232]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a9a6:	f008 ffcd 	bl	8013944 <assert_failed>
 800a9aa:	e693      	b.n	800a6d4 <HAL_SAI_InitProtocol+0x218>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 800a9ac:	f240 119f 	movw	r1, #415	; 0x19f
 800a9b0:	4837      	ldr	r0, [pc, #220]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a9b2:	f008 ffc7 	bl	8013944 <assert_failed>
 800a9b6:	e6eb      	b.n	800a790 <HAL_SAI_InitProtocol+0x2d4>
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 800a9b8:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800a9bc:	4834      	ldr	r0, [pc, #208]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a9be:	f008 ffc1 	bl	8013944 <assert_failed>
 800a9c2:	e6e0      	b.n	800a786 <HAL_SAI_InitProtocol+0x2ca>
  assert_param(IS_SAI_BLOCK_MCK_OVERSAMPLING(hsai->Init.MckOverSampling));
 800a9c4:	f240 119b 	movw	r1, #411	; 0x19b
 800a9c8:	4831      	ldr	r0, [pc, #196]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a9ca:	f008 ffbb 	bl	8013944 <assert_failed>
 800a9ce:	e6d5      	b.n	800a77c <HAL_SAI_InitProtocol+0x2c0>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 800a9d0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800a9d4:	482e      	ldr	r0, [pc, #184]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a9d6:	f008 ffb5 	bl	8013944 <assert_failed>
 800a9da:	e6ca      	b.n	800a772 <HAL_SAI_InitProtocol+0x2b6>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 800a9dc:	f240 1199 	movw	r1, #409	; 0x199
 800a9e0:	482b      	ldr	r0, [pc, #172]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a9e2:	f008 ffaf 	bl	8013944 <assert_failed>
 800a9e6:	e6c0      	b.n	800a76a <HAL_SAI_InitProtocol+0x2ae>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 800a9e8:	f240 1197 	movw	r1, #407	; 0x197
 800a9ec:	4828      	ldr	r0, [pc, #160]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a9ee:	f008 ffa9 	bl	8013944 <assert_failed>
 800a9f2:	e6a7      	b.n	800a744 <HAL_SAI_InitProtocol+0x288>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 800a9f4:	f44f 71cb 	mov.w	r1, #406	; 0x196
 800a9f8:	4825      	ldr	r0, [pc, #148]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800a9fa:	f008 ffa3 	bl	8013944 <assert_failed>
 800a9fe:	e69c      	b.n	800a73a <HAL_SAI_InitProtocol+0x27e>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 800aa00:	f240 1195 	movw	r1, #405	; 0x195
 800aa04:	4822      	ldr	r0, [pc, #136]	; (800aa90 <HAL_SAI_InitProtocol+0x5d4>)
 800aa06:	f008 ff9d 	bl	8013944 <assert_failed>
 800aa0a:	e692      	b.n	800a732 <HAL_SAI_InitProtocol+0x276>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aa0c:	0876      	lsrs	r6, r6, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800aa0e:	21e0      	movs	r1, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa10:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aa12:	01b3      	lsls	r3, r6, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800aa14:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aa16:	0176      	lsls	r6, r6, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa18:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aa1a:	e9c4 3615 	strd	r3, r6, [r4, #84]	; 0x54
 800aa1e:	e5e1      	b.n	800a5e4 <HAL_SAI_InitProtocol+0x128>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aa20:	0876      	lsrs	r6, r6, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800aa22:	21c0      	movs	r1, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa24:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800aa26:	2d02      	cmp	r5, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aa28:	ea4f 1386 	mov.w	r3, r6, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800aa2c:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aa2e:	ea4f 1646 	mov.w	r6, r6, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa32:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aa34:	e9c4 3615 	strd	r3, r6, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800aa38:	f47f add4 	bne.w	800a5e4 <HAL_SAI_InitProtocol+0x128>
      hsai->SlotInit.FirstBitOffset = 8;
 800aa3c:	2308      	movs	r3, #8
 800aa3e:	66a3      	str	r3, [r4, #104]	; 0x68
 800aa40:	e5d0      	b.n	800a5e4 <HAL_SAI_InitProtocol+0x128>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aa42:	0876      	lsrs	r6, r6, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa44:	2380      	movs	r3, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800aa46:	2d02      	cmp	r5, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aa48:	ea4f 1286 	mov.w	r2, r6, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa4c:	64a3      	str	r3, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aa4e:	ea4f 1646 	mov.w	r6, r6, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa52:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aa54:	e9c4 2615 	strd	r2, r6, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800aa58:	f47f adc4 	bne.w	800a5e4 <HAL_SAI_InitProtocol+0x128>
      hsai->SlotInit.FirstBitOffset = 16;
 800aa5c:	2310      	movs	r3, #16
 800aa5e:	66a3      	str	r3, [r4, #104]	; 0x68
 800aa60:	e5c0      	b.n	800a5e4 <HAL_SAI_InitProtocol+0x128>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800aa62:	0876      	lsrs	r6, r6, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa64:	2180      	movs	r1, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800aa66:	2240      	movs	r2, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800aa68:	0173      	lsls	r3, r6, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa6a:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800aa6c:	0136      	lsls	r6, r6, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800aa6e:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800aa70:	e9c4 3615 	strd	r3, r6, [r4, #84]	; 0x54
 800aa74:	e5b6      	b.n	800a5e4 <HAL_SAI_InitProtocol+0x128>
  switch (hsai->Init.SynchroExt)
 800aa76:	2113      	movs	r1, #19
 800aa78:	2012      	movs	r0, #18
 800aa7a:	2611      	movs	r6, #17
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800aa7c:	2210      	movs	r2, #16
 800aa7e:	e745      	b.n	800a90c <HAL_SAI_InitProtocol+0x450>
    SaiBaseAddress = SAI2;
 800aa80:	4d04      	ldr	r5, [pc, #16]	; (800aa94 <HAL_SAI_InitProtocol+0x5d8>)
 800aa82:	e714      	b.n	800a8ae <HAL_SAI_InitProtocol+0x3f2>
 800aa84:	40015800 	.word	0x40015800
 800aa88:	200002c4 	.word	0x200002c4
 800aa8c:	95cbec1b 	.word	0x95cbec1b
 800aa90:	0814502c 	.word	0x0814502c
 800aa94:	40015c00 	.word	0x40015c00
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800aa98:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800aa9a:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 800aa9e:	602a      	str	r2, [r5, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800aaa0:	6a23      	ldr	r3, [r4, #32]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d045      	beq.n	800ab32 <HAL_SAI_InitProtocol+0x676>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	4a9f      	ldr	r2, [pc, #636]	; (800ad28 <HAL_SAI_InitProtocol+0x86c>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	f000 811f 	beq.w	800acee <HAL_SAI_InitProtocol+0x832>
 800aab0:	489e      	ldr	r0, [pc, #632]	; (800ad2c <HAL_SAI_InitProtocol+0x870>)
 800aab2:	1a18      	subs	r0, r3, r0
 800aab4:	fab0 f080 	clz	r0, r0
 800aab8:	0940      	lsrs	r0, r0, #5
 800aaba:	2800      	cmp	r0, #0
 800aabc:	f040 8117 	bne.w	800acee <HAL_SAI_InitProtocol+0x832>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800aac0:	4a9b      	ldr	r2, [pc, #620]	; (800ad30 <HAL_SAI_InitProtocol+0x874>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	f000 810d 	beq.w	800ace2 <HAL_SAI_InitProtocol+0x826>
 800aac8:	3220      	adds	r2, #32
 800aaca:	4293      	cmp	r3, r2
 800aacc:	f000 8109 	beq.w	800ace2 <HAL_SAI_InitProtocol+0x826>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800aad0:	4a98      	ldr	r2, [pc, #608]	; (800ad34 <HAL_SAI_InitProtocol+0x878>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	f000 80ff 	beq.w	800acd6 <HAL_SAI_InitProtocol+0x81a>
 800aad8:	3220      	adds	r2, #32
 800aada:	4293      	cmp	r3, r2
 800aadc:	f000 80fb 	beq.w	800acd6 <HAL_SAI_InitProtocol+0x81a>
    if (hsai->Instance == SAI4_Block_A)
 800aae0:	4a95      	ldr	r2, [pc, #596]	; (800ad38 <HAL_SAI_InitProtocol+0x87c>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	f000 8114 	beq.w	800ad10 <HAL_SAI_InitProtocol+0x854>
    if (hsai->Instance == SAI4_Block_B)
 800aae8:	4a94      	ldr	r2, [pc, #592]	; (800ad3c <HAL_SAI_InitProtocol+0x880>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	f000 810b 	beq.w	800ad06 <HAL_SAI_InitProtocol+0x84a>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800aaf0:	69a2      	ldr	r2, [r4, #24]
 800aaf2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aaf6:	6a23      	ldr	r3, [r4, #32]
 800aaf8:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800aafc:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800ab00:	f000 80df 	beq.w	800acc2 <HAL_SAI_InitProtocol+0x806>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ab04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ab06:	021b      	lsls	r3, r3, #8
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ab08:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800ab0c:	bf14      	ite	ne
 800ab0e:	2201      	movne	r2, #1
 800ab10:	2202      	moveq	r2, #2
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ab12:	fb02 f303 	mul.w	r3, r2, r3
 800ab16:	fbb0 f3f3 	udiv	r3, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 800ab1a:	4a89      	ldr	r2, [pc, #548]	; (800ad40 <HAL_SAI_InitProtocol+0x884>)
 800ab1c:	fba2 1203 	umull	r1, r2, r2, r3
 800ab20:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 800ab22:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800ab26:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800ab2a:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 800ab2c:	bf08      	it	eq
 800ab2e:	3201      	addeq	r2, #1
 800ab30:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ab32:	6863      	ldr	r3, [r4, #4]
 800ab34:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ab36:	f033 0702 	bics.w	r7, r3, #2
 800ab3a:	f040 80ae 	bne.w	800ac9a <HAL_SAI_InitProtocol+0x7de>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ab3e:	2a01      	cmp	r2, #1
 800ab40:	bf18      	it	ne
 800ab42:	f44f 7700 	movne.w	r7, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800ab46:	f7f5 ff83 	bl	8000a50 <HAL_GetREVID>
 800ab4a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ab4e:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800ab50:	f0c0 8092 	bcc.w	800ac78 <HAL_SAI_InitProtocol+0x7bc>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ab54:	6811      	ldr	r1, [r2, #0]
 800ab56:	4b7b      	ldr	r3, [pc, #492]	; (800ad44 <HAL_SAI_InitProtocol+0x888>)
 800ab58:	400b      	ands	r3, r1
 800ab5a:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ab5c:	6863      	ldr	r3, [r4, #4]
 800ab5e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800ab60:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
 800ab64:	430b      	orrs	r3, r1
 800ab66:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	6962      	ldr	r2, [r4, #20]
 800ab6c:	4303      	orrs	r3, r0
 800ab6e:	69a0      	ldr	r0, [r4, #24]
 800ab70:	430b      	orrs	r3, r1
 800ab72:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ab74:	4313      	orrs	r3, r2
 800ab76:	6922      	ldr	r2, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ab78:	4303      	orrs	r3, r0
 800ab7a:	6820      	ldr	r0, [r4, #0]
 800ab7c:	430b      	orrs	r3, r1
 800ab7e:	6801      	ldr	r1, [r0, #0]
 800ab80:	4313      	orrs	r3, r2
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ab82:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ab84:	430b      	orrs	r3, r1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ab86:	f24f 0120 	movw	r1, #61472	; 0xf020
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ab8a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800ab8e:	4333      	orrs	r3, r6
 800ab90:	433b      	orrs	r3, r7
 800ab92:	6003      	str	r3, [r0, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ab94:	6826      	ldr	r6, [r4, #0]
 800ab96:	4b6c      	ldr	r3, [pc, #432]	; (800ad48 <HAL_SAI_InitProtocol+0x88c>)
 800ab98:	6872      	ldr	r2, [r6, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ab9a:	486c      	ldr	r0, [pc, #432]	; (800ad4c <HAL_SAI_InitProtocol+0x890>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ab9c:	4013      	ands	r3, r2
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800ab9e:	4a62      	ldr	r2, [pc, #392]	; (800ad28 <HAL_SAI_InitProtocol+0x86c>)
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800aba0:	6073      	str	r3, [r6, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800aba2:	69e3      	ldr	r3, [r4, #28]
 800aba4:	e9d4 760c 	ldrd	r7, r6, [r4, #48]	; 0x30
 800aba8:	433b      	orrs	r3, r7
 800abaa:	6827      	ldr	r7, [r4, #0]
 800abac:	4333      	orrs	r3, r6
 800abae:	687e      	ldr	r6, [r7, #4]
 800abb0:	4333      	orrs	r3, r6
 800abb2:	607b      	str	r3, [r7, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	689e      	ldr	r6, [r3, #8]
 800abb8:	4030      	ands	r0, r6
 800abba:	6098      	str	r0, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800abbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abbe:	6827      	ldr	r7, [r4, #0]
 800abc0:	e9d4 6017 	ldrd	r6, r0, [r4, #92]	; 0x5c
 800abc4:	4333      	orrs	r3, r6
 800abc6:	6d66      	ldr	r6, [r4, #84]	; 0x54
 800abc8:	4303      	orrs	r3, r0
 800abca:	68b8      	ldr	r0, [r7, #8]
 800abcc:	3e01      	subs	r6, #1
 800abce:	4303      	orrs	r3, r0
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800abd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800abd2:	4333      	orrs	r3, r6
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800abd4:	3801      	subs	r0, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800abd6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800abda:	60bb      	str	r3, [r7, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800abdc:	6820      	ldr	r0, [r4, #0]
 800abde:	68c3      	ldr	r3, [r0, #12]
 800abe0:	400b      	ands	r3, r1
 800abe2:	60c3      	str	r3, [r0, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800abe4:	6820      	ldr	r0, [r4, #0]
 800abe6:	e9d4 361a 	ldrd	r3, r6, [r4, #104]	; 0x68
 800abea:	68c1      	ldr	r1, [r0, #12]
 800abec:	4333      	orrs	r3, r6
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800abee:	6f66      	ldr	r6, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800abf0:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800abf2:	6f21      	ldr	r1, [r4, #112]	; 0x70
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800abf4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800abf8:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800abfa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800abfe:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d025      	beq.n	800ac52 <HAL_SAI_InitProtocol+0x796>
 800ac06:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800ac0a:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d01f      	beq.n	800ac52 <HAL_SAI_InitProtocol+0x796>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ac12:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 800ac14:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ac16:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 800ac1a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hsai);
 800ac1c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 800ac20:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
}
 800ac24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ac26:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800ac2a:	e738      	b.n	800aa9e <HAL_SAI_InitProtocol+0x5e2>
      syncen_bits = 0;
 800ac2c:	2600      	movs	r6, #0
 800ac2e:	e736      	b.n	800aa9e <HAL_SAI_InitProtocol+0x5e2>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ac30:	4632      	mov	r2, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ac32:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800ac36:	e732      	b.n	800aa9e <HAL_SAI_InitProtocol+0x5e2>
    hsai->Lock = HAL_UNLOCKED;
 800ac38:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f009 fbeb 	bl	8014418 <HAL_SAI_MspInit>
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	e63a      	b.n	800a8bc <HAL_SAI_InitProtocol+0x400>
    assert_param(IS_SAI_BLOCK_MCK_OUTPUT(hsai->Init.MckOutput));
 800ac46:	f240 118f 	movw	r1, #399	; 0x18f
 800ac4a:	4841      	ldr	r0, [pc, #260]	; (800ad50 <HAL_SAI_InitProtocol+0x894>)
 800ac4c:	f008 fe7a 	bl	8013944 <assert_failed>
 800ac50:	e565      	b.n	800a71e <HAL_SAI_InitProtocol+0x262>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ac52:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ac54:	f023 0301 	bic.w	r3, r3, #1
 800ac58:	646b      	str	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ac5a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d1d7      	bne.n	800ac12 <HAL_SAI_InitProtocol+0x756>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ac62:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ac66:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ac68:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800ac6c:	646b      	str	r3, [r5, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800ac6e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ac70:	f043 0301 	orr.w	r3, r3, #1
 800ac74:	646b      	str	r3, [r5, #68]	; 0x44
 800ac76:	e7cc      	b.n	800ac12 <HAL_SAI_InitProtocol+0x756>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ac78:	6811      	ldr	r1, [r2, #0]
 800ac7a:	4b36      	ldr	r3, [pc, #216]	; (800ad54 <HAL_SAI_InitProtocol+0x898>)
 800ac7c:	400b      	ands	r3, r1
 800ac7e:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ac80:	6863      	ldr	r3, [r4, #4]
 800ac82:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ac84:	e9d4 2011 	ldrd	r2, r0, [r4, #68]	; 0x44
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ac8c:	4303      	orrs	r3, r0
 800ac8e:	6960      	ldr	r0, [r4, #20]
 800ac90:	430b      	orrs	r3, r1
 800ac92:	69a1      	ldr	r1, [r4, #24]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ac98:	e76e      	b.n	800ab78 <HAL_SAI_InitProtocol+0x6bc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ac9a:	2a01      	cmp	r2, #1
 800ac9c:	bf14      	ite	ne
 800ac9e:	2700      	movne	r7, #0
 800aca0:	f44f 7700 	moveq.w	r7, #512	; 0x200
 800aca4:	e74f      	b.n	800ab46 <HAL_SAI_InitProtocol+0x68a>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 800aca6:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800acaa:	4829      	ldr	r0, [pc, #164]	; (800ad50 <HAL_SAI_InitProtocol+0x894>)
 800acac:	f008 fe4a 	bl	8013944 <assert_failed>
 800acb0:	e556      	b.n	800a760 <HAL_SAI_InitProtocol+0x2a4>
    SaiBaseAddress = SAI3;
 800acb2:	4d29      	ldr	r5, [pc, #164]	; (800ad58 <HAL_SAI_InitProtocol+0x89c>)
 800acb4:	e5fb      	b.n	800a8ae <HAL_SAI_InitProtocol+0x3f2>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 800acb6:	f240 1187 	movw	r1, #391	; 0x187
 800acba:	4825      	ldr	r0, [pc, #148]	; (800ad50 <HAL_SAI_InitProtocol+0x894>)
 800acbc:	f008 fe42 	bl	8013944 <assert_failed>
 800acc0:	e512      	b.n	800a6e8 <HAL_SAI_InitProtocol+0x22c>
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * hsai->FrameInit.FrameLength);
 800acc2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800acc4:	fb02 f303 	mul.w	r3, r2, r3
 800acc8:	fbb0 f3f3 	udiv	r3, r0, r3
 800accc:	e725      	b.n	800ab1a <HAL_SAI_InitProtocol+0x65e>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800acce:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800acd0:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800acd4:	e6e3      	b.n	800aa9e <HAL_SAI_InitProtocol+0x5e2>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800acd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800acda:	f7ff fa59 	bl	800a190 <HAL_RCCEx_GetPeriphCLKFreq>
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	e6fe      	b.n	800aae0 <HAL_SAI_InitProtocol+0x624>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ace2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ace6:	f7ff fa53 	bl	800a190 <HAL_RCCEx_GetPeriphCLKFreq>
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	e6f0      	b.n	800aad0 <HAL_SAI_InitProtocol+0x614>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800acee:	f44f 7080 	mov.w	r0, #256	; 0x100
 800acf2:	f7ff fa4d 	bl	800a190 <HAL_RCCEx_GetPeriphCLKFreq>
 800acf6:	6823      	ldr	r3, [r4, #0]
 800acf8:	e6e2      	b.n	800aac0 <HAL_SAI_InitProtocol+0x604>
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 800acfa:	f240 1181 	movw	r1, #385	; 0x181
 800acfe:	4814      	ldr	r0, [pc, #80]	; (800ad50 <HAL_SAI_InitProtocol+0x894>)
 800ad00:	f008 fe20 	bl	8013944 <assert_failed>
 800ad04:	e49c      	b.n	800a640 <HAL_SAI_InitProtocol+0x184>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800ad06:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ad0a:	f7ff fa41 	bl	800a190 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad0e:	e6ef      	b.n	800aaf0 <HAL_SAI_InitProtocol+0x634>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800ad10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ad14:	f7ff fa3c 	bl	800a190 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	e6e5      	b.n	800aae8 <HAL_SAI_InitProtocol+0x62c>
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 800ad1c:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800ad20:	480b      	ldr	r0, [pc, #44]	; (800ad50 <HAL_SAI_InitProtocol+0x894>)
 800ad22:	f008 fe0f 	bl	8013944 <assert_failed>
 800ad26:	e4c6      	b.n	800a6b6 <HAL_SAI_InitProtocol+0x1fa>
 800ad28:	40015804 	.word	0x40015804
 800ad2c:	40015824 	.word	0x40015824
 800ad30:	40015c04 	.word	0x40015c04
 800ad34:	40016004 	.word	0x40016004
 800ad38:	58005404 	.word	0x58005404
 800ad3c:	58005424 	.word	0x58005424
 800ad40:	cccccccd 	.word	0xcccccccd
 800ad44:	f005c010 	.word	0xf005c010
 800ad48:	ffff1ff0 	.word	0xffff1ff0
 800ad4c:	fff88000 	.word	0xfff88000
 800ad50:	0814502c 	.word	0x0814502c
 800ad54:	f805c010 	.word	0xf805c010
 800ad58:	40016000 	.word	0x40016000

0800ad5c <HAL_SAI_Abort>:
{
 800ad5c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hsai);
 800ad5e:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d047      	beq.n	800adf6 <HAL_SAI_Abort+0x9a>
 800ad66:	2601      	movs	r6, #1
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ad68:	6803      	ldr	r3, [r0, #0]
 800ad6a:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 800ad6c:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ad70:	681d      	ldr	r5, [r3, #0]
 800ad72:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
 800ad76:	d00d      	beq.n	800ad94 <HAL_SAI_Abort+0x38>
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ad7e:	601a      	str	r2, [r3, #0]
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800ad80:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 800ad84:	2b12      	cmp	r3, #18
 800ad86:	d04f      	beq.n	800ae28 <HAL_SAI_Abort+0xcc>
  HAL_StatusTypeDef status = HAL_OK;
 800ad88:	2500      	movs	r5, #0
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800ad8a:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800ad8e:	2b22      	cmp	r3, #34	; 0x22
 800ad90:	d034      	beq.n	800adfc <HAL_SAI_Abort+0xa0>
 800ad92:	6823      	ldr	r3, [r4, #0]
  hsai->Instance->IMR = 0;
 800ad94:	2000      	movs	r0, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800ad96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ad9a:	4a2e      	ldr	r2, [pc, #184]	; (800ae54 <HAL_SAI_Abort+0xf8>)
  hsai->Instance->IMR = 0;
 800ad9c:	6118      	str	r0, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800ad9e:	6823      	ldr	r3, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ada0:	6812      	ldr	r2, [r2, #0]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800ada2:	6199      	str	r1, [r3, #24]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ada4:	482c      	ldr	r0, [pc, #176]	; (800ae58 <HAL_SAI_Abort+0xfc>)
  __HAL_SAI_DISABLE(hsai);
 800ada6:	6821      	ldr	r1, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ada8:	fba0 0202 	umull	r0, r2, r0, r2
  __HAL_SAI_DISABLE(hsai);
 800adac:	680b      	ldr	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800adae:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 800adb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800adb4:	600b      	str	r3, [r1, #0]
    if (count == 0U)
 800adb6:	0093      	lsls	r3, r2, #2
 800adb8:	6821      	ldr	r1, [r4, #0]
 800adba:	b1a2      	cbz	r2, 800ade6 <HAL_SAI_Abort+0x8a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800adbc:	680a      	ldr	r2, [r1, #0]
    count--;
 800adbe:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800adc0:	03d0      	lsls	r0, r2, #15
 800adc2:	d504      	bpl.n	800adce <HAL_SAI_Abort+0x72>
    if (count == 0U)
 800adc4:	b17b      	cbz	r3, 800ade6 <HAL_SAI_Abort+0x8a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800adc6:	680a      	ldr	r2, [r1, #0]
    count--;
 800adc8:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800adca:	03d2      	lsls	r2, r2, #15
 800adcc:	d4fa      	bmi.n	800adc4 <HAL_SAI_Abort+0x68>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800adce:	684b      	ldr	r3, [r1, #4]
  hsai->State = HAL_SAI_STATE_READY;
 800add0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hsai);
 800add2:	2200      	movs	r2, #0
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800add4:	f043 0308 	orr.w	r3, r3, #8
 800add8:	604b      	str	r3, [r1, #4]
  hsai->State = HAL_SAI_STATE_READY;
 800adda:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
}
 800adde:	4628      	mov	r0, r5
  __HAL_UNLOCK(hsai);
 800ade0:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
}
 800ade4:	bd70      	pop	{r4, r5, r6, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ade6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    status = HAL_ERROR;
 800adea:	2501      	movs	r5, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800adec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adf0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800adf4:	e7eb      	b.n	800adce <HAL_SAI_Abort+0x72>
  __HAL_LOCK(hsai);
 800adf6:	2502      	movs	r5, #2
}
 800adf8:	4628      	mov	r0, r5
 800adfa:	bd70      	pop	{r4, r5, r6, pc}
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800adfc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d0c6      	beq.n	800ad92 <HAL_SAI_Abort+0x36>
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800ae04:	f7f8 fdd2 	bl	80039ac <HAL_DMA_Abort>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d0c2      	beq.n	800ad92 <HAL_SAI_Abort+0x36>
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800ae0c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ae10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae12:	2b80      	cmp	r3, #128	; 0x80
 800ae14:	d0bd      	beq.n	800ad92 <HAL_SAI_Abort+0x36>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ae16:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
          status = HAL_ERROR;
 800ae1a:	2501      	movs	r5, #1
 800ae1c:	6823      	ldr	r3, [r4, #0]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ae1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae22:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 800ae26:	e7b5      	b.n	800ad94 <HAL_SAI_Abort+0x38>
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800ae28:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d0ab      	beq.n	800ad88 <HAL_SAI_Abort+0x2c>
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800ae30:	f7f8 fdbc 	bl	80039ac <HAL_DMA_Abort>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	d0a7      	beq.n	800ad88 <HAL_SAI_Abort+0x2c>
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800ae38:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ae3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae3e:	2b80      	cmp	r3, #128	; 0x80
 800ae40:	d0a2      	beq.n	800ad88 <HAL_SAI_Abort+0x2c>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ae42:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
 800ae46:	4635      	mov	r5, r6
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ae48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae4c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800ae50:	e79b      	b.n	800ad8a <HAL_SAI_Abort+0x2e>
 800ae52:	bf00      	nop
 800ae54:	200002c4 	.word	0x200002c4
 800ae58:	95cbec1b 	.word	0x95cbec1b

0800ae5c <HAL_SAI_Transmit_DMA>:
{
 800ae5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae60:	460f      	mov	r7, r1
 800ae62:	4604      	mov	r4, r0
 800ae64:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800ae66:	f7f5 fddb 	bl	8000a20 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 800ae6a:	2f00      	cmp	r7, #0
 800ae6c:	d064      	beq.n	800af38 <HAL_SAI_Transmit_DMA+0xdc>
 800ae6e:	fab8 f588 	clz	r5, r8
 800ae72:	096d      	lsrs	r5, r5, #5
 800ae74:	2d00      	cmp	r5, #0
 800ae76:	d15f      	bne.n	800af38 <HAL_SAI_Transmit_DMA+0xdc>
  if (hsai->State == HAL_SAI_STATE_READY)
 800ae78:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 800ae7c:	b2f6      	uxtb	r6, r6
 800ae7e:	2e01      	cmp	r6, #1
 800ae80:	d156      	bne.n	800af30 <HAL_SAI_Transmit_DMA+0xd4>
    __HAL_LOCK(hsai);
 800ae82:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d052      	beq.n	800af30 <HAL_SAI_Transmit_DMA+0xd4>
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ae8a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ae8e:	2112      	movs	r1, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ae90:	4a37      	ldr	r2, [pc, #220]	; (800af70 <HAL_SAI_Transmit_DMA+0x114>)
 800ae92:	4681      	mov	r9, r0
    hsai->pBuffPtr = pData;
 800ae94:	67a7      	str	r7, [r4, #120]	; 0x78
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ae96:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferSize = Size;
 800ae9a:	f8a4 807c 	strh.w	r8, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ae9e:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    __HAL_LOCK(hsai);
 800aea2:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->XferCount = Size;
 800aea6:	f8a4 807e 	strh.w	r8, [r4, #126]	; 0x7e
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800aeaa:	4932      	ldr	r1, [pc, #200]	; (800af74 <HAL_SAI_Transmit_DMA+0x118>)
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800aeac:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800aeae:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800aeb2:	4a31      	ldr	r2, [pc, #196]	; (800af78 <HAL_SAI_Transmit_DMA+0x11c>)
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800aeb4:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800aeb6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800aeba:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800aebc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800aec0:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800aec2:	6822      	ldr	r2, [r4, #0]
 800aec4:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800aec8:	321c      	adds	r2, #28
 800aeca:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800aecc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800aed0:	f7f8 fa92 	bl	80033f8 <HAL_DMA_Start_IT>
 800aed4:	4607      	mov	r7, r0
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d132      	bne.n	800af40 <HAL_SAI_Transmit_DMA+0xe4>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800aeda:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800aedc:	6863      	ldr	r3, [r4, #4]
 800aede:	2a08      	cmp	r2, #8
 800aee0:	d03c      	beq.n	800af5c <HAL_SAI_Transmit_DMA+0x100>
 800aee2:	2005      	movs	r0, #5
 800aee4:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800aee6:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800aee8:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	bf88      	it	hi
 800aeee:	4602      	movhi	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800aef0:	690b      	ldr	r3, [r1, #16]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800aef6:	6822      	ldr	r2, [r4, #0]
 800aef8:	6813      	ldr	r3, [r2, #0]
 800aefa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aefe:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800af00:	e006      	b.n	800af10 <HAL_SAI_Transmit_DMA+0xb4>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800af02:	f7f5 fd8d 	bl	8000a20 <HAL_GetTick>
 800af06:	eba0 0009 	sub.w	r0, r0, r9
 800af0a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800af0e:	d81b      	bhi.n	800af48 <HAL_SAI_Transmit_DMA+0xec>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800af10:	6822      	ldr	r2, [r4, #0]
 800af12:	6955      	ldr	r5, [r2, #20]
 800af14:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 800af18:	d0f3      	beq.n	800af02 <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800af1a:	6813      	ldr	r3, [r2, #0]
 800af1c:	03db      	lsls	r3, r3, #15
 800af1e:	d403      	bmi.n	800af28 <HAL_SAI_Transmit_DMA+0xcc>
      __HAL_SAI_ENABLE(hsai);
 800af20:	6813      	ldr	r3, [r2, #0]
 800af22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af26:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 800af28:	2300      	movs	r3, #0
 800af2a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 800af2e:	e000      	b.n	800af32 <HAL_SAI_Transmit_DMA+0xd6>
    return HAL_BUSY;
 800af30:	2702      	movs	r7, #2
}
 800af32:	4638      	mov	r0, r7
 800af34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 800af38:	2701      	movs	r7, #1
}
 800af3a:	4638      	mov	r0, r7
 800af3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_UNLOCK(hsai);
 800af40:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 800af44:	4637      	mov	r7, r6
 800af46:	e7f4      	b.n	800af32 <HAL_SAI_Transmit_DMA+0xd6>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800af48:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 800af4c:	2703      	movs	r7, #3
        __HAL_UNLOCK(hsai);
 800af4e:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800af52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af56:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 800af5a:	e7ea      	b.n	800af32 <HAL_SAI_Transmit_DMA+0xd6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800af5c:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800af60:	2a01      	cmp	r2, #1
 800af62:	bf0b      	itete	eq
 800af64:	2015      	moveq	r0, #21
 800af66:	2005      	movne	r0, #5
 800af68:	2271      	moveq	r2, #113	; 0x71
 800af6a:	2261      	movne	r2, #97	; 0x61
 800af6c:	e7bb      	b.n	800aee6 <HAL_SAI_Transmit_DMA+0x8a>
 800af6e:	bf00      	nop
 800af70:	0800b0c1 	.word	0x0800b0c1
 800af74:	0800b05d 	.word	0x0800b05d
 800af78:	0800b13d 	.word	0x0800b13d

0800af7c <HAL_SAI_Receive_DMA>:
  if ((pData == NULL) || (Size == 0U))
 800af7c:	2900      	cmp	r1, #0
 800af7e:	d057      	beq.n	800b030 <HAL_SAI_Receive_DMA+0xb4>
{
 800af80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0U))
 800af82:	fab2 f582 	clz	r5, r2
 800af86:	096d      	lsrs	r5, r5, #5
 800af88:	2d00      	cmp	r5, #0
 800af8a:	d14f      	bne.n	800b02c <HAL_SAI_Receive_DMA+0xb0>
  if (hsai->State == HAL_SAI_STATE_READY)
 800af8c:	f890 6091 	ldrb.w	r6, [r0, #145]	; 0x91
 800af90:	b2f6      	uxtb	r6, r6
 800af92:	2e01      	cmp	r6, #1
 800af94:	d148      	bne.n	800b028 <HAL_SAI_Receive_DMA+0xac>
    __HAL_LOCK(hsai);
 800af96:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d044      	beq.n	800b028 <HAL_SAI_Receive_DMA+0xac>
 800af9e:	4604      	mov	r4, r0
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800afa0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800afa4:	2722      	movs	r7, #34	; 0x22
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800afa6:	482a      	ldr	r0, [pc, #168]	; (800b050 <HAL_SAI_Receive_DMA+0xd4>)
    hsai->pBuffPtr = pData;
 800afa8:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 800afaa:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800afae:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    hsai->XferCount = Size;
 800afb2:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
    __HAL_LOCK(hsai);
 800afb6:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800afba:	f884 7091 	strb.w	r7, [r4, #145]	; 0x91
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800afbe:	4925      	ldr	r1, [pc, #148]	; (800b054 <HAL_SAI_Receive_DMA+0xd8>)
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800afc0:	6418      	str	r0, [r3, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800afc2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800afc6:	4a24      	ldr	r2, [pc, #144]	; (800b058 <HAL_SAI_Receive_DMA+0xdc>)
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800afc8:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800afca:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800afce:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 800afd0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800afd4:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800afd6:	6821      	ldr	r1, [r4, #0]
 800afd8:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800afdc:	311c      	adds	r1, #28
 800afde:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800afe0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800afe4:	f7f8 fa08 	bl	80033f8 <HAL_DMA_Start_IT>
 800afe8:	bb20      	cbnz	r0, 800b034 <HAL_SAI_Receive_DMA+0xb8>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800afea:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800afec:	6863      	ldr	r3, [r4, #4]
 800afee:	2a08      	cmp	r2, #8
 800aff0:	d024      	beq.n	800b03c <HAL_SAI_Receive_DMA+0xc0>
 800aff2:	2505      	movs	r5, #5
 800aff4:	2261      	movs	r2, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800aff6:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800aff8:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 800affa:	2b01      	cmp	r3, #1
 800affc:	bf88      	it	hi
 800affe:	462a      	movhi	r2, r5
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b000:	690b      	ldr	r3, [r1, #16]
 800b002:	4313      	orrs	r3, r2
 800b004:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b006:	6822      	ldr	r2, [r4, #0]
 800b008:	6813      	ldr	r3, [r2, #0]
 800b00a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b00e:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	03d2      	lsls	r2, r2, #15
 800b016:	d403      	bmi.n	800b020 <HAL_SAI_Receive_DMA+0xa4>
      __HAL_SAI_ENABLE(hsai);
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b01e:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800b020:	2300      	movs	r3, #0
 800b022:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800b026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800b028:	2002      	movs	r0, #2
}
 800b02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 800b02c:	2001      	movs	r0, #1
}
 800b02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 800b030:	2001      	movs	r0, #1
}
 800b032:	4770      	bx	lr
      __HAL_UNLOCK(hsai);
 800b034:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 800b038:	4630      	mov	r0, r6
}
 800b03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b03c:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b040:	2a01      	cmp	r2, #1
 800b042:	bf0b      	itete	eq
 800b044:	2515      	moveq	r5, #21
 800b046:	2505      	movne	r5, #5
 800b048:	2271      	moveq	r2, #113	; 0x71
 800b04a:	2261      	movne	r2, #97	; 0x61
 800b04c:	e7d3      	b.n	800aff6 <HAL_SAI_Receive_DMA+0x7a>
 800b04e:	bf00      	nop
 800b050:	0800b131 	.word	0x0800b131
 800b054:	0800b0cd 	.word	0x0800b0cd
 800b058:	0800b13d 	.word	0x0800b13d

0800b05c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800b05c:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b05e:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b060:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b066:	d01a      	beq.n	800b09e <SAI_DMATxCplt+0x42>
  {
    hsai->XferCount = 0;
 800b068:	2300      	movs	r3, #0

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b06a:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 800b06c:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b070:	6813      	ldr	r3, [r2, #0]
 800b072:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b076:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b078:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b07a:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b07c:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b07e:	d011      	beq.n	800b0a4 <SAI_DMATxCplt+0x48>
 800b080:	f06f 0261 	mvn.w	r2, #97	; 0x61
 800b084:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b088:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b08a:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 800b08c:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b08e:	42a3      	cmp	r3, r4
 800b090:	bf88      	it	hi
 800b092:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b094:	690b      	ldr	r3, [r1, #16]
 800b096:	4013      	ands	r3, r2
 800b098:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800b09a:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800b09e:	f006 fa9b 	bl	80115d8 <HAL_SAI_TxCpltCallback>
#endif
}
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b0a4:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b0a8:	2a01      	cmp	r2, #1
 800b0aa:	bf0b      	itete	eq
 800b0ac:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 800b0b0:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 800b0b4:	f06f 0515 	mvneq.w	r5, #21
 800b0b8:	f06f 0505 	mvnne.w	r5, #5
 800b0bc:	e7e4      	b.n	800b088 <SAI_DMATxCplt+0x2c>
 800b0be:	bf00      	nop

0800b0c0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b0c0:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800b0c2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b0c4:	f006 fa8a 	bl	80115dc <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800b0c8:	bd08      	pop	{r3, pc}
 800b0ca:	bf00      	nop

0800b0cc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800b0cc:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b0ce:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0d0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b0d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0d6:	d01a      	beq.n	800b10e <SAI_DMARxCplt+0x42>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b0d8:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 800b0da:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b0dc:	6813      	ldr	r3, [r2, #0]
 800b0de:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b0e2:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b0e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
 800b0e6:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b0ea:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b0ec:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b0ee:	d011      	beq.n	800b114 <SAI_DMARxCplt+0x48>
 800b0f0:	f06f 0261 	mvn.w	r2, #97	; 0x61
 800b0f4:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b0f8:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b0fa:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 800b0fc:	2401      	movs	r4, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b0fe:	42a3      	cmp	r3, r4
 800b100:	bf88      	it	hi
 800b102:	462a      	movhi	r2, r5
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b104:	690b      	ldr	r3, [r1, #16]
 800b106:	4013      	ands	r3, r2
 800b108:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800b10a:	f880 4091 	strb.w	r4, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800b10e:	f006 fa67 	bl	80115e0 <HAL_SAI_RxCpltCallback>
#endif
}
 800b112:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b114:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b118:	2a01      	cmp	r2, #1
 800b11a:	bf0b      	itete	eq
 800b11c:	f06f 0271 	mvneq.w	r2, #113	; 0x71
 800b120:	f06f 0261 	mvnne.w	r2, #97	; 0x61
 800b124:	f06f 0515 	mvneq.w	r5, #21
 800b128:	f06f 0505 	mvnne.w	r5, #5
 800b12c:	e7e4      	b.n	800b0f8 <SAI_DMARxCplt+0x2c>
 800b12e:	bf00      	nop

0800b130 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b130:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800b132:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b134:	f006 fa58 	bl	80115e8 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800b138:	bd08      	pop	{r3, pc}
 800b13a:	bf00      	nop

0800b13c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b13c:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b13e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b140:	f7f9 fbb0 	bl	80048a4 <HAL_DMA_GetError>
 800b144:	2802      	cmp	r0, #2
 800b146:	d02a      	beq.n	800b19e <SAI_DMAError+0x62>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b148:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b14c:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b152:	4a17      	ldr	r2, [pc, #92]	; (800b1b0 <SAI_DMAError+0x74>)
 800b154:	4d17      	ldr	r5, [pc, #92]	; (800b1b4 <SAI_DMAError+0x78>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b156:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b15a:	680b      	ldr	r3, [r1, #0]
 800b15c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b160:	600b      	str	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b162:	6812      	ldr	r2, [r2, #0]
  __HAL_SAI_DISABLE(hsai);
 800b164:	6820      	ldr	r0, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b166:	fba5 3202 	umull	r3, r2, r5, r2
  __HAL_SAI_DISABLE(hsai);
 800b16a:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b16c:	0b12      	lsrs	r2, r2, #12
  __HAL_SAI_DISABLE(hsai);
 800b16e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    if (count == 0U)
 800b172:	0093      	lsls	r3, r2, #2
  __HAL_SAI_DISABLE(hsai);
 800b174:	6001      	str	r1, [r0, #0]
    if (count == 0U)
 800b176:	b19a      	cbz	r2, 800b1a0 <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b178:	6821      	ldr	r1, [r4, #0]
    count--;
 800b17a:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b17c:	680a      	ldr	r2, [r1, #0]
 800b17e:	03d0      	lsls	r0, r2, #15
 800b180:	d504      	bpl.n	800b18c <SAI_DMAError+0x50>
    if (count == 0U)
 800b182:	b16b      	cbz	r3, 800b1a0 <SAI_DMAError+0x64>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b184:	680a      	ldr	r2, [r1, #0]
    count--;
 800b186:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b188:	03d2      	lsls	r2, r2, #15
 800b18a:	d4fa      	bmi.n	800b182 <SAI_DMAError+0x46>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800b18c:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800b18e:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800b190:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 800b192:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 800b196:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 800b19a:	f006 fa19 	bl	80115d0 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800b19e:	bd38      	pop	{r3, r4, r5, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b1a0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b1a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1a8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800b1ac:	e7ee      	b.n	800b18c <SAI_DMAError+0x50>
 800b1ae:	bf00      	nop
 800b1b0:	200002c4 	.word	0x200002c4
 800b1b4:	95cbec1b 	.word	0x95cbec1b

0800b1b8 <HAL_SAI_IRQHandler>:
  if (hsai->State != HAL_SAI_STATE_RESET)
 800b1b8:	f890 2091 	ldrb.w	r2, [r0, #145]	; 0x91
 800b1bc:	2a00      	cmp	r2, #0
 800b1be:	d030      	beq.n	800b222 <HAL_SAI_IRQHandler+0x6a>
{
 800b1c0:	b570      	push	{r4, r5, r6, lr}
    uint32_t itflags = hsai->Instance->SR;
 800b1c2:	6802      	ldr	r2, [r0, #0]
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	6951      	ldr	r1, [r2, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800b1c8:	6915      	ldr	r5, [r2, #16]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800b1ca:	070b      	lsls	r3, r1, #28
    uint32_t cr1config = hsai->Instance->CR1;
 800b1cc:	6816      	ldr	r6, [r2, #0]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800b1ce:	d506      	bpl.n	800b1de <HAL_SAI_IRQHandler+0x26>
 800b1d0:	072b      	lsls	r3, r5, #28
 800b1d2:	d504      	bpl.n	800b1de <HAL_SAI_IRQHandler+0x26>
      hsai->InterruptServiceRoutine(hsai);
 800b1d4:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
}
 800b1d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hsai->InterruptServiceRoutine(hsai);
 800b1dc:	4718      	bx	r3
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800b1de:	07cb      	lsls	r3, r1, #31
 800b1e0:	d512      	bpl.n	800b208 <HAL_SAI_IRQHandler+0x50>
 800b1e2:	07e8      	lsls	r0, r5, #31
 800b1e4:	d510      	bpl.n	800b208 <HAL_SAI_IRQHandler+0x50>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800b1e6:	2301      	movs	r3, #1
      HAL_SAI_ErrorCallback(hsai);
 800b1e8:	4620      	mov	r0, r4
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800b1ea:	6193      	str	r3, [r2, #24]
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800b1ec:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
      hsai->ErrorCode |= tmperror;
 800b1f0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800b1f4:	2a22      	cmp	r2, #34	; 0x22
 800b1f6:	bf0c      	ite	eq
 800b1f8:	2201      	moveq	r2, #1
 800b1fa:	2202      	movne	r2, #2
      hsai->ErrorCode |= tmperror;
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
 800b202:	f006 f9e5 	bl	80115d0 <HAL_SAI_ErrorCallback>
}
 800b206:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800b208:	078b      	lsls	r3, r1, #30
 800b20a:	d50b      	bpl.n	800b224 <HAL_SAI_IRQHandler+0x6c>
 800b20c:	07a8      	lsls	r0, r5, #30
 800b20e:	d509      	bpl.n	800b224 <HAL_SAI_IRQHandler+0x6c>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800b210:	2302      	movs	r3, #2
 800b212:	6193      	str	r3, [r2, #24]
      if (hsai->mutecallback != NULL)
 800b214:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d0f4      	beq.n	800b206 <HAL_SAI_IRQHandler+0x4e>
}
 800b21c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hsai->mutecallback();
 800b220:	4718      	bx	r3
 800b222:	4770      	bx	lr
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800b224:	068b      	lsls	r3, r1, #26
 800b226:	d512      	bpl.n	800b24e <HAL_SAI_IRQHandler+0x96>
 800b228:	06a8      	lsls	r0, r5, #26
 800b22a:	d510      	bpl.n	800b24e <HAL_SAI_IRQHandler+0x96>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800b22c:	2320      	movs	r3, #32
 800b22e:	6193      	str	r3, [r2, #24]
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b230:	03b2      	lsls	r2, r6, #14
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800b232:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b236:	f043 0304 	orr.w	r3, r3, #4
 800b23a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b23e:	d424      	bmi.n	800b28a <HAL_SAI_IRQHandler+0xd2>
        (void) HAL_SAI_Abort(hsai);
 800b240:	4620      	mov	r0, r4
 800b242:	f7ff fd8b 	bl	800ad5c <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 800b246:	4620      	mov	r0, r4
 800b248:	f006 f9c2 	bl	80115d0 <HAL_SAI_ErrorCallback>
}
 800b24c:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800b24e:	064b      	lsls	r3, r1, #25
 800b250:	d50c      	bpl.n	800b26c <HAL_SAI_IRQHandler+0xb4>
 800b252:	0668      	lsls	r0, r5, #25
 800b254:	d50a      	bpl.n	800b26c <HAL_SAI_IRQHandler+0xb4>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800b256:	2340      	movs	r3, #64	; 0x40
 800b258:	6193      	str	r3, [r2, #24]
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b25a:	03b2      	lsls	r2, r6, #14
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800b25c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b260:	f043 0308 	orr.w	r3, r3, #8
 800b264:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b268:	d5ea      	bpl.n	800b240 <HAL_SAI_IRQHandler+0x88>
 800b26a:	e00e      	b.n	800b28a <HAL_SAI_IRQHandler+0xd2>
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800b26c:	074b      	lsls	r3, r1, #29
 800b26e:	d52c      	bpl.n	800b2ca <HAL_SAI_IRQHandler+0x112>
 800b270:	0768      	lsls	r0, r5, #29
 800b272:	d52a      	bpl.n	800b2ca <HAL_SAI_IRQHandler+0x112>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800b274:	2304      	movs	r3, #4
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b276:	f416 3600 	ands.w	r6, r6, #131072	; 0x20000
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800b27a:	6193      	str	r3, [r2, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800b27c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b280:	f043 0320 	orr.w	r3, r3, #32
 800b284:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800b288:	d039      	beq.n	800b2fe <HAL_SAI_IRQHandler+0x146>
        if (hsai->hdmatx != NULL)
 800b28a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b28e:	b133      	cbz	r3, 800b29e <HAL_SAI_IRQHandler+0xe6>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800b290:	4a22      	ldr	r2, [pc, #136]	; (800b31c <HAL_SAI_IRQHandler+0x164>)
 800b292:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800b294:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800b298:	f7f8 fda8 	bl	8003dec <HAL_DMA_Abort_IT>
 800b29c:	bb28      	cbnz	r0, 800b2ea <HAL_SAI_IRQHandler+0x132>
        if (hsai->hdmarx != NULL)
 800b29e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d0af      	beq.n	800b206 <HAL_SAI_IRQHandler+0x4e>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800b2a6:	4a1d      	ldr	r2, [pc, #116]	; (800b31c <HAL_SAI_IRQHandler+0x164>)
 800b2a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800b2aa:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800b2ae:	f7f8 fd9d 	bl	8003dec <HAL_DMA_Abort_IT>
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	d0a7      	beq.n	800b206 <HAL_SAI_IRQHandler+0x4e>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b2b6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 800b2ba:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2c0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 800b2c4:	f006 f984 	bl	80115d0 <HAL_SAI_ErrorCallback>
}
 800b2c8:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800b2ca:	06c9      	lsls	r1, r1, #27
 800b2cc:	d59b      	bpl.n	800b206 <HAL_SAI_IRQHandler+0x4e>
 800b2ce:	06eb      	lsls	r3, r5, #27
 800b2d0:	d599      	bpl.n	800b206 <HAL_SAI_IRQHandler+0x4e>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800b2d2:	2310      	movs	r3, #16
      HAL_SAI_ErrorCallback(hsai);
 800b2d4:	4620      	mov	r0, r4
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800b2d6:	6193      	str	r3, [r2, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800b2d8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b2dc:	f043 0310 	orr.w	r3, r3, #16
 800b2e0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
 800b2e4:	f006 f974 	bl	80115d0 <HAL_SAI_ErrorCallback>
}
 800b2e8:	bd70      	pop	{r4, r5, r6, pc}
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b2ea:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 800b2ee:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b2f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 800b2f8:	f006 f96a 	bl	80115d0 <HAL_SAI_ErrorCallback>
 800b2fc:	e7cf      	b.n	800b29e <HAL_SAI_IRQHandler+0xe6>
        hsai->Instance->IMR = 0U;
 800b2fe:	6822      	ldr	r2, [r4, #0]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b300:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        hsai->State = HAL_SAI_STATE_READY;
 800b304:	2301      	movs	r3, #1
        HAL_SAI_ErrorCallback(hsai);
 800b306:	4620      	mov	r0, r4
        hsai->Instance->IMR = 0U;
 800b308:	6116      	str	r6, [r2, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b30a:	6822      	ldr	r2, [r4, #0]
 800b30c:	6191      	str	r1, [r2, #24]
        hsai->XferCount = 0U;
 800b30e:	f8a4 607e 	strh.w	r6, [r4, #126]	; 0x7e
        hsai->State = HAL_SAI_STATE_READY;
 800b312:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
        HAL_SAI_ErrorCallback(hsai);
 800b316:	f006 f95b 	bl	80115d0 <HAL_SAI_ErrorCallback>
}
 800b31a:	bd70      	pop	{r4, r5, r6, pc}
 800b31c:	0800b321 	.word	0x0800b321

0800b320 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b320:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b322:	6b82      	ldr	r2, [r0, #56]	; 0x38

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800b324:	2400      	movs	r4, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b32a:	6811      	ldr	r1, [r2, #0]
 800b32c:	680b      	ldr	r3, [r1, #0]
 800b32e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b332:	600b      	str	r3, [r1, #0]
  hsai->Instance->IMR = 0U;
 800b334:	6813      	ldr	r3, [r2, #0]
 800b336:	611c      	str	r4, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b338:	6813      	ldr	r3, [r2, #0]
 800b33a:	6198      	str	r0, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800b33c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800b340:	2b20      	cmp	r3, #32
 800b342:	d01a      	beq.n	800b37a <SAI_DMAAbort+0x5a>
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b344:	4915      	ldr	r1, [pc, #84]	; (800b39c <SAI_DMAAbort+0x7c>)
 800b346:	4b16      	ldr	r3, [pc, #88]	; (800b3a0 <SAI_DMAAbort+0x80>)
 800b348:	6809      	ldr	r1, [r1, #0]
  __HAL_SAI_DISABLE(hsai);
 800b34a:	6814      	ldr	r4, [r2, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b34c:	fba3 3101 	umull	r3, r1, r3, r1
  __HAL_SAI_DISABLE(hsai);
 800b350:	6820      	ldr	r0, [r4, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b352:	0b09      	lsrs	r1, r1, #12
  __HAL_SAI_DISABLE(hsai);
 800b354:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    if (count == 0U)
 800b358:	008b      	lsls	r3, r1, #2
  __HAL_SAI_DISABLE(hsai);
 800b35a:	6020      	str	r0, [r4, #0]
 800b35c:	6810      	ldr	r0, [r2, #0]
    if (count == 0U)
 800b35e:	b1b1      	cbz	r1, 800b38e <SAI_DMAAbort+0x6e>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b360:	6801      	ldr	r1, [r0, #0]
    count--;
 800b362:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b364:	03cc      	lsls	r4, r1, #15
 800b366:	d504      	bpl.n	800b372 <SAI_DMAAbort+0x52>
    if (count == 0U)
 800b368:	b18b      	cbz	r3, 800b38e <SAI_DMAAbort+0x6e>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b36a:	6801      	ldr	r1, [r0, #0]
    count--;
 800b36c:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b36e:	03c9      	lsls	r1, r1, #15
 800b370:	d4fa      	bmi.n	800b368 <SAI_DMAAbort+0x48>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800b372:	6843      	ldr	r3, [r0, #4]
 800b374:	f043 0308 	orr.w	r3, r3, #8
 800b378:	6043      	str	r3, [r0, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800b37a:	2101      	movs	r1, #1

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800b37c:	2300      	movs	r3, #0

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800b37e:	4610      	mov	r0, r2
  hsai->State = HAL_SAI_STATE_READY;
 800b380:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
  hsai->XferCount = 0U;
 800b384:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
  HAL_SAI_ErrorCallback(hsai);
 800b388:	f006 f922 	bl	80115d0 <HAL_SAI_ErrorCallback>
#endif
}
 800b38c:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b38e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800b392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800b39a:	e7ea      	b.n	800b372 <SAI_DMAAbort+0x52>
 800b39c:	200002c4 	.word	0x200002c4
 800b3a0:	95cbec1b 	.word	0x95cbec1b

0800b3a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a8:	4605      	mov	r5, r0
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b3ae:	f7f5 fb37 	bl	8000a20 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b3b2:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800b3b4:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b3b6:	6828      	ldr	r0, [r5, #0]
 800b3b8:	f002 fd82 	bl	800dec0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3bc:	4604      	mov	r4, r0
 800b3be:	b118      	cbz	r0, 800b3c8 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	b007      	add	sp, #28
 800b3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b3c8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800b3ca:	6828      	ldr	r0, [r5, #0]
 800b3cc:	0409      	lsls	r1, r1, #16
 800b3ce:	f002 ffe1 	bl	800e394 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d1f3      	bne.n	800b3c0 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b3d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 8U;
 800b3dc:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b3de:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b3e0:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b3e2:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b3e4:	2202      	movs	r2, #2
  config.DataLength    = 8U;
 800b3e6:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b3e8:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b3ea:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b3ec:	4669      	mov	r1, sp
 800b3ee:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b3f0:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b3f2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b3f4:	f002 fd06 	bl	800de04 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b3f8:	6828      	ldr	r0, [r5, #0]
 800b3fa:	f003 f887 	bl	800e50c <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3fe:	4604      	mov	r4, r0
 800b400:	2800      	cmp	r0, #0
 800b402:	d1dd      	bne.n	800b3c0 <SD_FindSCR+0x1c>
  uint32_t index = 0U;
 800b404:	4681      	mov	r9, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b406:	4683      	mov	fp, r0
 800b408:	4682      	mov	sl, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b40a:	f240 582a 	movw	r8, #1322	; 0x52a
 800b40e:	e004      	b.n	800b41a <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b410:	f7f5 fb06 	bl	8000a20 <HAL_GetTick>
 800b414:	1b80      	subs	r0, r0, r6
 800b416:	3001      	adds	r0, #1
 800b418:	d025      	beq.n	800b466 <SD_FindSCR+0xc2>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b41a:	6828      	ldr	r0, [r5, #0]
 800b41c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b41e:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b422:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b424:	d10e      	bne.n	800b444 <SD_FindSCR+0xa0>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b426:	031b      	lsls	r3, r3, #12
 800b428:	d4f2      	bmi.n	800b410 <SD_FindSCR+0x6c>
 800b42a:	f1b9 0f00 	cmp.w	r9, #0
 800b42e:	d1ef      	bne.n	800b410 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b430:	f002 fcc2 	bl	800ddb8 <SDMMC_ReadFIFO>
 800b434:	4682      	mov	sl, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b436:	6828      	ldr	r0, [r5, #0]
      index++;
 800b438:	f04f 0901 	mov.w	r9, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b43c:	f002 fcbc 	bl	800ddb8 <SDMMC_ReadFIFO>
 800b440:	4683      	mov	fp, r0
 800b442:	e7e5      	b.n	800b410 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b444:	0719      	lsls	r1, r3, #28
 800b446:	d411      	bmi.n	800b46c <SD_FindSCR+0xc8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b448:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b44a:	079a      	lsls	r2, r3, #30
 800b44c:	d411      	bmi.n	800b472 <SD_FindSCR+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b44e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b450:	069b      	lsls	r3, r3, #26
 800b452:	d411      	bmi.n	800b478 <SD_FindSCR+0xd4>
 800b454:	fa9b f28b 	rev.w	r2, fp
 800b458:	fa9a f38a 	rev.w	r3, sl
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b45c:	4908      	ldr	r1, [pc, #32]	; (800b480 <SD_FindSCR+0xdc>)
 800b45e:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b460:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800b464:	e7ac      	b.n	800b3c0 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800b466:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b46a:	e7a9      	b.n	800b3c0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b46c:	2408      	movs	r4, #8
 800b46e:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b470:	e7a6      	b.n	800b3c0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b472:	2402      	movs	r4, #2
 800b474:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b476:	e7a3      	b.n	800b3c0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b478:	2420      	movs	r4, #32
 800b47a:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800b47c:	e7a0      	b.n	800b3c0 <SD_FindSCR+0x1c>
 800b47e:	bf00      	nop
 800b480:	18000f3a 	.word	0x18000f3a

0800b484 <HAL_SD_ReadBlocks>:
{
 800b484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b488:	460d      	mov	r5, r1
 800b48a:	b086      	sub	sp, #24
 800b48c:	4604      	mov	r4, r0
 800b48e:	4690      	mov	r8, r2
 800b490:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 800b492:	f7f5 fac5 	bl	8000a20 <HAL_GetTick>
  if(NULL == pData)
 800b496:	2d00      	cmp	r5, #0
 800b498:	d070      	beq.n	800b57c <HAL_SD_ReadBlocks+0xf8>
 800b49a:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800b49c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800b4a0:	b2c0      	uxtb	r0, r0
 800b4a2:	2801      	cmp	r0, #1
 800b4a4:	d007      	beq.n	800b4b6 <HAL_SD_ReadBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b4a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800b4a8:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b4aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4ae:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b4b0:	b006      	add	sp, #24
 800b4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b4b6:	eb08 0306 	add.w	r3, r8, r6
 800b4ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b4bc:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b4be:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b4c0:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b4c2:	d863      	bhi.n	800b58c <HAL_SD_ReadBlocks+0x108>
    hsd->Instance->DCTRL = 0U;
 800b4c4:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800b4c6:	2203      	movs	r2, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b4c8:	f04f 0902 	mov.w	r9, #2
    hsd->State = HAL_SD_STATE_BUSY;
 800b4cc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b4d0:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 800b4d2:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b4d4:	0271      	lsls	r1, r6, #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b4d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b4d8:	9101      	str	r1, [sp, #4]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b4da:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b4dc:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b4de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b4e2:	6820      	ldr	r0, [r4, #0]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b4e4:	9300      	str	r3, [sp, #0]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b4e6:	f04f 0300 	mov.w	r3, #0
      add *= 512U;
 800b4ea:	bf18      	it	ne
 800b4ec:	ea4f 2848 	movne.w	r8, r8, lsl #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b4f0:	9202      	str	r2, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b4f2:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b4f4:	e9cd 9303 	strd	r9, r3, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b4f8:	f002 fc84 	bl	800de04 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b4fc:	6822      	ldr	r2, [r4, #0]
    if(NumberOfBlocks > 1U)
 800b4fe:	2e01      	cmp	r6, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b500:	68d3      	ldr	r3, [r2, #12]
 800b502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b506:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 800b508:	d953      	bls.n	800b5b2 <HAL_SD_ReadBlocks+0x12e>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b50a:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b50e:	4641      	mov	r1, r8
 800b510:	6820      	ldr	r0, [r4, #0]
 800b512:	f002 fd5d 	bl	800dfd0 <SDMMC_CmdReadMultiBlock>
 800b516:	4603      	mov	r3, r0
 800b518:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d13d      	bne.n	800b59a <HAL_SD_ReadBlocks+0x116>
    dataremaining = config.DataLength;
 800b51e:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b522:	e006      	b.n	800b532 <HAL_SD_ReadBlocks+0xae>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b524:	f7f5 fa7c 	bl	8000a20 <HAL_GetTick>
 800b528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b52a:	1bc0      	subs	r0, r0, r7
 800b52c:	4298      	cmp	r0, r3
 800b52e:	d274      	bcs.n	800b61a <HAL_SD_ReadBlocks+0x196>
 800b530:	6820      	ldr	r0, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b532:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b534:	f413 7f95 	tst.w	r3, #298	; 0x12a
 800b538:	d143      	bne.n	800b5c2 <HAL_SD_ReadBlocks+0x13e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800b53a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b53c:	0419      	lsls	r1, r3, #16
 800b53e:	d5f1      	bpl.n	800b524 <HAL_SD_ReadBlocks+0xa0>
 800b540:	f1b9 0f1f 	cmp.w	r9, #31
 800b544:	d9ee      	bls.n	800b524 <HAL_SD_ReadBlocks+0xa0>
 800b546:	f105 0a04 	add.w	sl, r5, #4
 800b54a:	f105 0824 	add.w	r8, r5, #36	; 0x24
 800b54e:	e000      	b.n	800b552 <HAL_SD_ReadBlocks+0xce>
 800b550:	6820      	ldr	r0, [r4, #0]
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b552:	f002 fc31 	bl	800ddb8 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b556:	f80a 0c04 	strb.w	r0, [sl, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b55a:	0a02      	lsrs	r2, r0, #8
 800b55c:	f10a 0a04 	add.w	sl, sl, #4
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b560:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b562:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b564:	f80a 2c07 	strb.w	r2, [sl, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b568:	f80a 3c06 	strb.w	r3, [sl, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b56c:	f80a 0c05 	strb.w	r0, [sl, #-5]
        for(count = 0U; count < 8U; count++)
 800b570:	45c2      	cmp	sl, r8
 800b572:	d1ed      	bne.n	800b550 <HAL_SD_ReadBlocks+0xcc>
 800b574:	3520      	adds	r5, #32
        dataremaining -= 32U;
 800b576:	f1a9 0920 	sub.w	r9, r9, #32
 800b57a:	e7d3      	b.n	800b524 <HAL_SD_ReadBlocks+0xa0>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b57c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800b57e:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b580:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b584:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b586:	b006      	add	sp, #24
 800b588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b58c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b58e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b592:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b594:	b006      	add	sp, #24
 800b596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b59a:	4a39      	ldr	r2, [pc, #228]	; (800b680 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 800b59c:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b59e:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b5a0:	6382      	str	r2, [r0, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b5a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 800b5a4:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b5aa:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b5ae:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 800b5b0:	e77e      	b.n	800b4b0 <HAL_SD_ReadBlocks+0x2c>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b5b2:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b5b4:	4641      	mov	r1, r8
 800b5b6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b5b8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b5ba:	f002 fcc5 	bl	800df48 <SDMMC_CmdReadSingleBlock>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	e7aa      	b.n	800b518 <HAL_SD_ReadBlocks+0x94>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b5c2:	68c3      	ldr	r3, [r0, #12]
 800b5c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5c8:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b5ca:	6823      	ldr	r3, [r4, #0]
 800b5cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5ce:	05d2      	lsls	r2, r2, #23
 800b5d0:	d50b      	bpl.n	800b5ea <HAL_SD_ReadBlocks+0x166>
 800b5d2:	2e01      	cmp	r6, #1
 800b5d4:	d909      	bls.n	800b5ea <HAL_SD_ReadBlocks+0x166>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b5d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b5d8:	2a03      	cmp	r2, #3
 800b5da:	d006      	beq.n	800b5ea <HAL_SD_ReadBlocks+0x166>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f002 fdc3 	bl	800e168 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d145      	bne.n	800b674 <HAL_SD_ReadBlocks+0x1f0>
 800b5e8:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b5ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5ec:	f012 0208 	ands.w	r2, r2, #8
 800b5f0:	d121      	bne.n	800b636 <HAL_SD_ReadBlocks+0x1b2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b5f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b5f4:	f011 0102 	ands.w	r1, r1, #2
 800b5f8:	d12a      	bne.n	800b650 <HAL_SD_ReadBlocks+0x1cc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b5fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b5fc:	f010 0020 	ands.w	r0, r0, #32
 800b600:	d032      	beq.n	800b668 <HAL_SD_ReadBlocks+0x1e4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b602:	481f      	ldr	r0, [pc, #124]	; (800b680 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 800b604:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b606:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b608:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b60a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b60c:	f043 0320 	orr.w	r3, r3, #32
 800b610:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b612:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b616:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800b618:	e74a      	b.n	800b4b0 <HAL_SD_ReadBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b61a:	6823      	ldr	r3, [r4, #0]
        hsd->State= HAL_SD_STATE_READY;
 800b61c:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b61e:	4d18      	ldr	r5, [pc, #96]	; (800b680 <HAL_SD_ReadBlocks+0x1fc>)
        hsd->Context = SD_CONTEXT_NONE;
 800b620:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800b622:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b624:	639d      	str	r5, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b626:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b62c:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b62e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b632:	6322      	str	r2, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800b634:	e73c      	b.n	800b4b0 <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b636:	4812      	ldr	r0, [pc, #72]	; (800b680 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 800b638:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b63a:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b63c:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b63e:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b640:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b642:	f043 0308 	orr.w	r3, r3, #8
 800b646:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b648:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b64c:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800b64e:	e72f      	b.n	800b4b0 <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b650:	480b      	ldr	r0, [pc, #44]	; (800b680 <HAL_SD_ReadBlocks+0x1fc>)
      hsd->State = HAL_SD_STATE_READY;
 800b652:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b654:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b656:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b65a:	f043 0302 	orr.w	r3, r3, #2
 800b65e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b660:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b664:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 800b666:	e723      	b.n	800b4b0 <HAL_SD_ReadBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b668:	4906      	ldr	r1, [pc, #24]	; (800b684 <HAL_SD_ReadBlocks+0x200>)
    hsd->State = HAL_SD_STATE_READY;
 800b66a:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b66c:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b66e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 800b672:	e71d      	b.n	800b4b0 <HAL_SD_ReadBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b674:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800b676:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b678:	4801      	ldr	r0, [pc, #4]	; (800b680 <HAL_SD_ReadBlocks+0x1fc>)
          hsd->Context = SD_CONTEXT_NONE;
 800b67a:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b67c:	6390      	str	r0, [r2, #56]	; 0x38
 800b67e:	e790      	b.n	800b5a2 <HAL_SD_ReadBlocks+0x11e>
 800b680:	1fe00fff 	.word	0x1fe00fff
 800b684:	18000f3a 	.word	0x18000f3a

0800b688 <HAL_SD_WriteBlocks>:
{
 800b688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b68c:	460d      	mov	r5, r1
 800b68e:	b089      	sub	sp, #36	; 0x24
 800b690:	4604      	mov	r4, r0
 800b692:	4616      	mov	r6, r2
 800b694:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800b696:	f7f5 f9c3 	bl	8000a20 <HAL_GetTick>
  if(NULL == pData)
 800b69a:	2d00      	cmp	r5, #0
 800b69c:	d05d      	beq.n	800b75a <HAL_SD_WriteBlocks+0xd2>
 800b69e:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800b6a0:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800b6a4:	b2c0      	uxtb	r0, r0
 800b6a6:	2801      	cmp	r0, #1
 800b6a8:	d007      	beq.n	800b6ba <HAL_SD_WriteBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b6aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800b6ac:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b6ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b6b2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b6b4:	b009      	add	sp, #36	; 0x24
 800b6b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b6ba:	19f3      	adds	r3, r6, r7
 800b6bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6be:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b6c0:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6c2:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b6c4:	d851      	bhi.n	800b76a <HAL_SD_WriteBlocks+0xe2>
    hsd->Instance->DCTRL = 0U;
 800b6c6:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800b6c8:	2203      	movs	r2, #3
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b6ca:	0278      	lsls	r0, r7, #9
    hsd->State = HAL_SD_STATE_BUSY;
 800b6cc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b6d0:	2290      	movs	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 800b6d2:	62d9      	str	r1, [r3, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b6d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b6d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b6da:	9102      	str	r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b6dc:	a902      	add	r1, sp, #8
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b6de:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b6e0:	f04f 0300 	mov.w	r3, #0
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b6e4:	e9cd 0203 	strd	r0, r2, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b6e8:	6820      	ldr	r0, [r4, #0]
      add *= 512U;
 800b6ea:	bf18      	it	ne
 800b6ec:	0276      	lslne	r6, r6, #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b6ee:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b6f0:	e9cd 3305 	strd	r3, r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b6f4:	f002 fb86 	bl	800de04 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b6f8:	6822      	ldr	r2, [r4, #0]
    if(NumberOfBlocks > 1U)
 800b6fa:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b6fc:	68d3      	ldr	r3, [r2, #12]
 800b6fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b702:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 800b704:	d944      	bls.n	800b790 <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b706:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b708:	4631      	mov	r1, r6
 800b70a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b70c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b70e:	f002 fce7 	bl	800e0e0 <SDMMC_CmdWriteMultiBlock>
 800b712:	4603      	mov	r3, r0
 800b714:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b716:	bb7b      	cbnz	r3, 800b778 <HAL_SD_WriteBlocks+0xf0>
    dataremaining = config.DataLength;
 800b718:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b71a:	e007      	b.n	800b72c <HAL_SD_WriteBlocks+0xa4>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b71c:	f7f5 f980 	bl	8000a20 <HAL_GetTick>
 800b720:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b722:	eba0 0008 	sub.w	r0, r0, r8
 800b726:	4298      	cmp	r0, r3
 800b728:	d266      	bcs.n	800b7f8 <HAL_SD_WriteBlocks+0x170>
 800b72a:	6820      	ldr	r0, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b72c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b72e:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800b732:	d135      	bne.n	800b7a0 <HAL_SD_WriteBlocks+0x118>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800b734:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b736:	0459      	lsls	r1, r3, #17
 800b738:	d5f0      	bpl.n	800b71c <HAL_SD_WriteBlocks+0x94>
 800b73a:	2e1f      	cmp	r6, #31
 800b73c:	d9ee      	bls.n	800b71c <HAL_SD_WriteBlocks+0x94>
 800b73e:	f105 0920 	add.w	r9, r5, #32
 800b742:	e000      	b.n	800b746 <HAL_SD_WriteBlocks+0xbe>
 800b744:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b746:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b74a:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b74c:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b74e:	f002 fb37 	bl	800ddc0 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800b752:	454d      	cmp	r5, r9
 800b754:	d1f6      	bne.n	800b744 <HAL_SD_WriteBlocks+0xbc>
        dataremaining -= 32U;
 800b756:	3e20      	subs	r6, #32
 800b758:	e7e0      	b.n	800b71c <HAL_SD_WriteBlocks+0x94>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b75a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800b75c:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b75e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b762:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b764:	b009      	add	sp, #36	; 0x24
 800b766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b76a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b76c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b770:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800b772:	b009      	add	sp, #36	; 0x24
 800b774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b778:	4a38      	ldr	r2, [pc, #224]	; (800b85c <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800b77a:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b77c:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b77e:	6382      	str	r2, [r0, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b780:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 800b782:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 800b784:	4313      	orrs	r3, r2
 800b786:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b788:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b78c:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 800b78e:	e791      	b.n	800b6b4 <HAL_SD_WriteBlocks+0x2c>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b790:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b792:	4631      	mov	r1, r6
 800b794:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b796:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b798:	f002 fc5e 	bl	800e058 <SDMMC_CmdWriteSingleBlock>
 800b79c:	4603      	mov	r3, r0
 800b79e:	e7b9      	b.n	800b714 <HAL_SD_WriteBlocks+0x8c>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b7a0:	68c3      	ldr	r3, [r0, #12]
 800b7a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7a6:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7ac:	05d2      	lsls	r2, r2, #23
 800b7ae:	d50b      	bpl.n	800b7c8 <HAL_SD_WriteBlocks+0x140>
 800b7b0:	2f01      	cmp	r7, #1
 800b7b2:	d909      	bls.n	800b7c8 <HAL_SD_WriteBlocks+0x140>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b7b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b7b6:	2a03      	cmp	r2, #3
 800b7b8:	d006      	beq.n	800b7c8 <HAL_SD_WriteBlocks+0x140>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f002 fcd4 	bl	800e168 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d143      	bne.n	800b84e <HAL_SD_WriteBlocks+0x1c6>
 800b7c6:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b7c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7ca:	f012 0208 	ands.w	r2, r2, #8
 800b7ce:	d11f      	bne.n	800b810 <HAL_SD_WriteBlocks+0x188>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b7d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b7d2:	f011 0102 	ands.w	r1, r1, #2
 800b7d6:	d128      	bne.n	800b82a <HAL_SD_WriteBlocks+0x1a2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800b7d8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b7da:	f010 0010 	ands.w	r0, r0, #16
 800b7de:	d030      	beq.n	800b842 <HAL_SD_WriteBlocks+0x1ba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7e0:	481e      	ldr	r0, [pc, #120]	; (800b85c <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800b7e2:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7e4:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b7e6:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b7e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b7ea:	f043 0310 	orr.w	r3, r3, #16
 800b7ee:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b7f0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b7f4:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800b7f6:	e75d      	b.n	800b6b4 <HAL_SD_WriteBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7f8:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800b7fa:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7fc:	4d17      	ldr	r5, [pc, #92]	; (800b85c <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
 800b7fe:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800b800:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b802:	638d      	str	r5, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b804:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b806:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b808:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b80c:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800b80e:	e751      	b.n	800b6b4 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b810:	4812      	ldr	r0, [pc, #72]	; (800b85c <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800b812:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b814:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b816:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b818:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b81a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b81c:	f043 0308 	orr.w	r3, r3, #8
 800b820:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b822:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b826:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800b828:	e744      	b.n	800b6b4 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b82a:	480c      	ldr	r0, [pc, #48]	; (800b85c <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800b82c:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b82e:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b830:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b832:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b834:	f043 0302 	orr.w	r3, r3, #2
 800b838:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b83a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b83e:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 800b840:	e738      	b.n	800b6b4 <HAL_SD_WriteBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b842:	4907      	ldr	r1, [pc, #28]	; (800b860 <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
 800b844:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b846:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b848:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 800b84c:	e732      	b.n	800b6b4 <HAL_SD_WriteBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b84e:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800b850:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b852:	4802      	ldr	r0, [pc, #8]	; (800b85c <HAL_SD_WriteBlocks+0x1d4>)
          hsd->Context = SD_CONTEXT_NONE;
 800b854:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b856:	6390      	str	r0, [r2, #56]	; 0x38
 800b858:	e792      	b.n	800b780 <HAL_SD_WriteBlocks+0xf8>
 800b85a:	bf00      	nop
 800b85c:	1fe00fff 	.word	0x1fe00fff
 800b860:	18000f3a 	.word	0x18000f3a

0800b864 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop

0800b868 <HAL_SD_GetCardCSD>:
{
 800b868:	4603      	mov	r3, r0
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b86a:	2000      	movs	r0, #0
{
 800b86c:	b430      	push	{r4, r5}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b86e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b870:	0f92      	lsrs	r2, r2, #30
 800b872:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b874:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b876:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800b87a:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b87c:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
 800b880:	f002 0203 	and.w	r2, r2, #3
 800b884:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b886:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 800b88a:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b88c:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 800b890:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b892:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800b896:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b898:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b89a:	0d12      	lsrs	r2, r2, #20
 800b89c:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b89e:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b8a2:	f002 020f 	and.w	r2, r2, #15
 800b8a6:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b8a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b8aa:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800b8ae:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b8b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b8b2:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800b8b6:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b8b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b8ba:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800b8be:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b8c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b8c2:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800b8c6:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b8c8:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800b8ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8cc:	2a00      	cmp	r2, #0
 800b8ce:	f040 8086 	bne.w	800b9de <HAL_SD_GetCardCSD+0x176>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b8d2:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800b8d4:	f640 72fc 	movw	r2, #4092	; 0xffc
 800b8d8:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b8da:	2401      	movs	r4, #1
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b8dc:	ea02 0285 	and.w	r2, r2, r5, lsl #2
    hsd->SdCard.LogBlockSize = 512U;
 800b8e0:	f44f 7500 	mov.w	r5, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b8e4:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800b8e8:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b8ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b8ec:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 800b8f0:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b8f2:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 800b8f6:	f002 0207 	and.w	r2, r2, #7
 800b8fa:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b8fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b8fe:	f3c2 5242 	ubfx	r2, r2, #21, #3
 800b902:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b904:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b906:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800b90a:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b90c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b90e:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 800b912:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b914:	690a      	ldr	r2, [r1, #16]
 800b916:	4422      	add	r2, r4
 800b918:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b91a:	7e08      	ldrb	r0, [r1, #24]
 800b91c:	f000 0007 	and.w	r0, r0, #7
 800b920:	3002      	adds	r0, #2
 800b922:	4082      	lsls	r2, r0
 800b924:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b926:	7a08      	ldrb	r0, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 800b928:	659d      	str	r5, [r3, #88]	; 0x58
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b92a:	f000 000f 	and.w	r0, r0, #15
 800b92e:	fa04 f000 	lsl.w	r0, r4, r0
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b932:	0a44      	lsrs	r4, r0, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b934:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b936:	fb02 f204 	mul.w	r2, r2, r4
 800b93a:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b93c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  pCSD->Reserved3 = 0;
 800b93e:	2500      	movs	r5, #0
  pCSD->Reserved4 = 1;
 800b940:	2401      	movs	r4, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b942:	f3c2 3280 	ubfx	r2, r2, #14, #1
  return HAL_OK;
 800b946:	4628      	mov	r0, r5
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b948:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b94a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b94c:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 800b950:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b952:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b954:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b958:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b95a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b95c:	0fd2      	lsrs	r2, r2, #31
 800b95e:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b960:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b962:	f3c2 7241 	ubfx	r2, r2, #29, #2
 800b966:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b968:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b96a:	f3c2 6282 	ubfx	r2, r2, #26, #3
 800b96e:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b970:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b972:	f3c2 5283 	ubfx	r2, r2, #22, #4
 800b976:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b978:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b97a:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800b97e:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 800b982:	f881 5021 	strb.w	r5, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b986:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 800b98a:	4022      	ands	r2, r4
 800b98c:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b990:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b992:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800b996:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b99a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b99c:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800b9a0:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b9a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b9a6:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800b9aa:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b9ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b9b0:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800b9b4:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b9b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b9ba:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800b9be:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b9c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b9c4:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800b9c8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b9cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ce:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800b9d2:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800b9d6:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
}
 800b9da:	bc30      	pop	{r4, r5}
 800b9dc:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b9de:	2a01      	cmp	r2, #1
 800b9e0:	d00c      	beq.n	800b9fc <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9e2:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 800b9e4:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9e6:	4c0e      	ldr	r4, [pc, #56]	; (800ba20 <HAL_SD_GetCardCSD+0x1b8>)
    return HAL_ERROR;
 800b9e8:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9ea:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b9f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b9f4:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 800b9f8:	bc30      	pop	{r4, r5}
 800b9fa:	4770      	bx	lr
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b9fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.BlockSize = 512U;
 800b9fe:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ba02:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 800ba06:	0412      	lsls	r2, r2, #16
 800ba08:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800ba0c:	4322      	orrs	r2, r4
 800ba0e:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ba10:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 800ba12:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ba14:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ba16:	6598      	str	r0, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ba18:	0292      	lsls	r2, r2, #10
 800ba1a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ba1c:	655a      	str	r2, [r3, #84]	; 0x54
 800ba1e:	e78d      	b.n	800b93c <HAL_SD_GetCardCSD+0xd4>
 800ba20:	1fe00fff 	.word	0x1fe00fff

0800ba24 <HAL_SD_InitCard>:
{
 800ba24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800ba28:	6982      	ldr	r2, [r0, #24]
{
 800ba2a:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ba2c:	2300      	movs	r3, #0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800ba2e:	21fa      	movs	r1, #250	; 0xfa
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800ba30:	2a02      	cmp	r2, #2
{
 800ba32:	4604      	mov	r4, r0
 800ba34:	6805      	ldr	r5, [r0, #0]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800ba36:	910b      	str	r1, [sp, #44]	; 0x2c
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ba38:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ba3c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800ba40:	d104      	bne.n	800ba4c <HAL_SD_InitCard+0x28>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800ba42:	682b      	ldr	r3, [r5, #0]
 800ba44:	f043 0310 	orr.w	r3, r3, #16
 800ba48:	602b      	str	r3, [r5, #0]
 800ba4a:	6805      	ldr	r5, [r0, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 800ba4c:	aa0a      	add	r2, sp, #40	; 0x28
 800ba4e:	ab07      	add	r3, sp, #28
 800ba50:	ca07      	ldmia	r2, {r0, r1, r2}
 800ba52:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ba56:	4628      	mov	r0, r5
 800ba58:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ba5a:	f002 f94d 	bl	800dcf8 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ba5e:	6820      	ldr	r0, [r4, #0]
 800ba60:	f002 f9b4 	bl	800ddcc <SDMMC_PowerState_ON>
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 800ba64:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ba68:	f7fe fb92 	bl	800a190 <HAL_RCCEx_GetPeriphCLKFreq>
 800ba6c:	4ba3      	ldr	r3, [pc, #652]	; (800bcfc <HAL_SD_InitCard+0x2d8>)
 800ba6e:	fba3 3000 	umull	r3, r0, r3, r0
  if(sdmmc_clk != 0U)
 800ba72:	0940      	lsrs	r0, r0, #5
 800ba74:	d019      	beq.n	800baaa <HAL_SD_InitCard+0x86>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800ba76:	4ba2      	ldr	r3, [pc, #648]	; (800bd00 <HAL_SD_InitCard+0x2dc>)
 800ba78:	fbb3 f0f0 	udiv	r0, r3, r0
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	f7f4 ffd5 	bl	8000a2c <HAL_Delay>
  __IO uint32_t count = 0U;
 800ba82:	2300      	movs	r3, #0
 800ba84:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 800ba86:	f7f4 ffcb 	bl	8000a20 <HAL_GetTick>
 800ba8a:	4680      	mov	r8, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ba8c:	6820      	ldr	r0, [r4, #0]
 800ba8e:	f002 fc13 	bl	800e2b8 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba92:	4605      	mov	r5, r0
 800ba94:	b168      	cbz	r0, 800bab2 <HAL_SD_InitCard+0x8e>
    hsd->State = HAL_SD_STATE_READY;
 800ba96:	2601      	movs	r6, #1
 800ba98:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ba9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba9e:	431d      	orrs	r5, r3
 800baa0:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800baa2:	4630      	mov	r0, r6
 800baa4:	b018      	add	sp, #96	; 0x60
 800baa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 800baaa:	2002      	movs	r0, #2
 800baac:	f7f4 ffbe 	bl	8000a2c <HAL_Delay>
 800bab0:	e7e7      	b.n	800ba82 <HAL_SD_InitCard+0x5e>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bab2:	6820      	ldr	r0, [r4, #0]
 800bab4:	f002 fc2e 	bl	800e314 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bab8:	2800      	cmp	r0, #0
 800baba:	d179      	bne.n	800bbb0 <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800babc:	2301      	movs	r3, #1
 800babe:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bac0:	2100      	movs	r1, #0
 800bac2:	6820      	ldr	r0, [r4, #0]
 800bac4:	f002 fc66 	bl	800e394 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bac8:	bb08      	cbnz	r0, 800bb0e <HAL_SD_InitCard+0xea>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800baca:	9b06      	ldr	r3, [sp, #24]
 800bacc:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800bad0:	42b3      	cmp	r3, r6
 800bad2:	f200 8109 	bhi.w	800bce8 <HAL_SD_InitCard+0x2c4>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bad6:	4f8b      	ldr	r7, [pc, #556]	; (800bd04 <HAL_SD_InitCard+0x2e0>)
 800bad8:	e00c      	b.n	800baf4 <HAL_SD_InitCard+0xd0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bada:	4601      	mov	r1, r0
 800badc:	6820      	ldr	r0, [r4, #0]
 800bade:	f002 f981 	bl	800dde4 <SDMMC_GetResponse>
    count++;
 800bae2:	9b06      	ldr	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bae4:	1e02      	subs	r2, r0, #0
    count++;
 800bae6:	f103 0301 	add.w	r3, r3, #1
 800baea:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800baec:	9b06      	ldr	r3, [sp, #24]
 800baee:	db11      	blt.n	800bb14 <HAL_SD_InitCard+0xf0>
 800baf0:	42b3      	cmp	r3, r6
 800baf2:	d80f      	bhi.n	800bb14 <HAL_SD_InitCard+0xf0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800baf4:	2100      	movs	r1, #0
 800baf6:	6820      	ldr	r0, [r4, #0]
 800baf8:	f002 fc4c 	bl	800e394 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bafc:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 800bafe:	4605      	mov	r5, r0
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d1c8      	bne.n	800ba96 <HAL_SD_InitCard+0x72>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bb04:	6820      	ldr	r0, [r4, #0]
 800bb06:	f002 fc89 	bl	800e41c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d0e5      	beq.n	800bada <HAL_SD_InitCard+0xb6>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bb0e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800bb12:	e7c0      	b.n	800ba96 <HAL_SD_InitCard+0x72>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bb14:	9906      	ldr	r1, [sp, #24]
 800bb16:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800bb1a:	4299      	cmp	r1, r3
 800bb1c:	f200 809d 	bhi.w	800bc5a <HAL_SD_InitCard+0x236>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bb20:	0057      	lsls	r7, r2, #1
 800bb22:	6820      	ldr	r0, [r4, #0]
 800bb24:	d504      	bpl.n	800bb30 <HAL_SD_InitCard+0x10c>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bb26:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bb28:	2101      	movs	r1, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bb2a:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bb2c:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bb2e:	d051      	beq.n	800bbd4 <HAL_SD_InitCard+0x1b0>
  uint16_t sd_rca = 1U;
 800bb30:	2301      	movs	r3, #1
 800bb32:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800bb36:	f002 f951 	bl	800dddc <SDMMC_GetPowerState>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d044      	beq.n	800bbc8 <HAL_SD_InitCard+0x1a4>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bb3e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	2a03      	cmp	r2, #3
 800bb44:	d125      	bne.n	800bb92 <HAL_SD_InitCard+0x16e>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bb46:	4618      	mov	r0, r3
 800bb48:	2104      	movs	r1, #4
 800bb4a:	f002 f94b 	bl	800dde4 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bb4e:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bb50:	0d03      	lsrs	r3, r0, #20
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bb52:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bb54:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bb56:	f7ff fe87 	bl	800b868 <HAL_SD_GetCardCSD>
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d136      	bne.n	800bbce <HAL_SD_InitCard+0x1aa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bb60:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800bb62:	4603      	mov	r3, r0
 800bb64:	6820      	ldr	r0, [r4, #0]
 800bb66:	0412      	lsls	r2, r2, #16
 800bb68:	f002 fb62 	bl	800e230 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb6c:	b9b0      	cbnz	r0, 800bb9c <HAL_SD_InitCard+0x178>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bb6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bb72:	6820      	ldr	r0, [r4, #0]
 800bb74:	f002 f9a4 	bl	800dec0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d092      	beq.n	800baa2 <HAL_SD_InitCard+0x7e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb7c:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800bb7e:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb80:	4961      	ldr	r1, [pc, #388]	; (800bd08 <HAL_SD_InitCard+0x2e4>)
    return HAL_ERROR;
 800bb82:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb84:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bb86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bb88:	4318      	orrs	r0, r3
 800bb8a:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bb8c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 800bb90:	e787      	b.n	800baa2 <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bb92:	4618      	mov	r0, r3
 800bb94:	f002 fcfe 	bl	800e594 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d061      	beq.n	800bc60 <HAL_SD_InitCard+0x23c>
    hsd->State = HAL_SD_STATE_READY;
 800bb9c:	2601      	movs	r6, #1
 800bb9e:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bba2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bba4:	4308      	orrs	r0, r1
 800bba6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800bba8:	4630      	mov	r0, r6
 800bbaa:	b018      	add	sp, #96	; 0x60
 800bbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bbb0:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bbb2:	6820      	ldr	r0, [r4, #0]
 800bbb4:	f002 fb80 	bl	800e2b8 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bbb8:	4605      	mov	r5, r0
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	f47f af6b 	bne.w	800ba96 <HAL_SD_InitCard+0x72>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bbc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d181      	bne.n	800baca <HAL_SD_InitCard+0xa6>
 800bbc6:	e77b      	b.n	800bac0 <HAL_SD_InitCard+0x9c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bbc8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800bbcc:	e7e6      	b.n	800bb9c <HAL_SD_InitCard+0x178>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bbce:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800bbd2:	e7e3      	b.n	800bb9c <HAL_SD_InitCard+0x178>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800bbd4:	01d6      	lsls	r6, r2, #7
 800bbd6:	d5ab      	bpl.n	800bb30 <HAL_SD_InitCard+0x10c>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bbd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbdc:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800bbde:	6803      	ldr	r3, [r0, #0]
 800bbe0:	f043 0308 	orr.w	r3, r3, #8
 800bbe4:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800bbe6:	6820      	ldr	r0, [r4, #0]
 800bbe8:	f002 fe24 	bl	800e834 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800bbec:	4605      	mov	r5, r0
 800bbee:	b130      	cbz	r0, 800bbfe <HAL_SD_InitCard+0x1da>
 800bbf0:	e751      	b.n	800ba96 <HAL_SD_InitCard+0x72>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bbf2:	f7f4 ff15 	bl	8000a20 <HAL_GetTick>
 800bbf6:	eba0 0008 	sub.w	r0, r0, r8
 800bbfa:	3001      	adds	r0, #1
 800bbfc:	d079      	beq.n	800bcf2 <HAL_SD_InitCard+0x2ce>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc02:	0155      	lsls	r5, r2, #5
 800bc04:	d5f5      	bpl.n	800bbf2 <HAL_SD_InitCard+0x1ce>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800bc06:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800bc0a:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc10:	02d8      	lsls	r0, r3, #11
 800bc12:	f57f af7c 	bpl.w	800bb0e <HAL_SD_InitCard+0xea>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800bc16:	2001      	movs	r0, #1
 800bc18:	f7ff fe24 	bl	800b864 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800bc1c:	6822      	ldr	r2, [r4, #0]
 800bc1e:	6813      	ldr	r3, [r2, #0]
 800bc20:	f043 0304 	orr.w	r3, r3, #4
 800bc24:	6013      	str	r3, [r2, #0]
 800bc26:	e005      	b.n	800bc34 <HAL_SD_InitCard+0x210>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bc28:	f7f4 fefa 	bl	8000a20 <HAL_GetTick>
 800bc2c:	eba0 0008 	sub.w	r0, r0, r8
 800bc30:	3001      	adds	r0, #1
 800bc32:	d05e      	beq.n	800bcf2 <HAL_SD_InitCard+0x2ce>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800bc34:	6823      	ldr	r3, [r4, #0]
 800bc36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc38:	0191      	lsls	r1, r2, #6
 800bc3a:	d5f5      	bpl.n	800bc28 <HAL_SD_InitCard+0x204>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800bc3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800bc40:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc46:	02d2      	lsls	r2, r2, #11
 800bc48:	d407      	bmi.n	800bc5a <HAL_SD_InitCard+0x236>
          hsd->Instance->POWER = 0x13U;
 800bc4a:	2113      	movs	r1, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800bc4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
          hsd->Instance->POWER = 0x13U;
 800bc50:	6019      	str	r1, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	639a      	str	r2, [r3, #56]	; 0x38
 800bc56:	6820      	ldr	r0, [r4, #0]
 800bc58:	e76a      	b.n	800bb30 <HAL_SD_InitCard+0x10c>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bc5a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800bc5e:	e71a      	b.n	800ba96 <HAL_SD_InitCard+0x72>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bc60:	4601      	mov	r1, r0
 800bc62:	6820      	ldr	r0, [r4, #0]
 800bc64:	f002 f8be 	bl	800dde4 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bc68:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bc6a:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bc6c:	6820      	ldr	r0, [r4, #0]
 800bc6e:	f002 f8b9 	bl	800dde4 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bc72:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bc74:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bc76:	6820      	ldr	r0, [r4, #0]
 800bc78:	f002 f8b4 	bl	800dde4 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bc7c:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bc7e:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bc80:	6820      	ldr	r0, [r4, #0]
 800bc82:	f002 f8af 	bl	800dde4 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bc88:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc8a:	2b03      	cmp	r3, #3
 800bc8c:	d034      	beq.n	800bcf8 <HAL_SD_InitCard+0x2d4>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bc8e:	f10d 0116 	add.w	r1, sp, #22
 800bc92:	6820      	ldr	r0, [r4, #0]
 800bc94:	f002 fcf2 	bl	800e67c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	f47f af7f 	bne.w	800bb9c <HAL_SD_InitCard+0x178>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bca0:	6823      	ldr	r3, [r4, #0]
 800bca2:	2a03      	cmp	r2, #3
 800bca4:	f43f af4f 	beq.w	800bb46 <HAL_SD_InitCard+0x122>
    hsd->SdCard.RelCardAdd = sd_rca;
 800bca8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bcac:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 800bcae:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bcb0:	0409      	lsls	r1, r1, #16
 800bcb2:	f002 fca9 	bl	800e608 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	f47f af70 	bne.w	800bb9c <HAL_SD_InitCard+0x178>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bcbc:	4601      	mov	r1, r0
 800bcbe:	6820      	ldr	r0, [r4, #0]
 800bcc0:	f002 f890 	bl	800dde4 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bcc4:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bcc6:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bcc8:	6820      	ldr	r0, [r4, #0]
 800bcca:	f002 f88b 	bl	800dde4 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bcce:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bcd0:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bcd2:	6820      	ldr	r0, [r4, #0]
 800bcd4:	f002 f886 	bl	800dde4 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bcd8:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bcda:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bcdc:	6820      	ldr	r0, [r4, #0]
 800bcde:	f002 f881 	bl	800dde4 <SDMMC_GetResponse>
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	66e0      	str	r0, [r4, #108]	; 0x6c
 800bce6:	e72e      	b.n	800bb46 <HAL_SD_InitCard+0x122>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bce8:	9b06      	ldr	r3, [sp, #24]
 800bcea:	42b3      	cmp	r3, r6
 800bcec:	d8b5      	bhi.n	800bc5a <HAL_SD_InitCard+0x236>
 800bcee:	6820      	ldr	r0, [r4, #0]
 800bcf0:	e71e      	b.n	800bb30 <HAL_SD_InitCard+0x10c>
            return HAL_SD_ERROR_TIMEOUT;
 800bcf2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800bcf6:	e6ce      	b.n	800ba96 <HAL_SD_InitCard+0x72>
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	e724      	b.n	800bb46 <HAL_SD_InitCard+0x122>
 800bcfc:	10624dd3 	.word	0x10624dd3
 800bd00:	00012110 	.word	0x00012110
 800bd04:	c1100000 	.word	0xc1100000
 800bd08:	1fe00fff 	.word	0x1fe00fff

0800bd0c <HAL_SD_GetCardStatus>:
{
 800bd0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd10:	4604      	mov	r4, r0
 800bd12:	b097      	sub	sp, #92	; 0x5c
 800bd14:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800bd16:	f7f4 fe83 	bl	8000a20 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bd1a:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800bd1c:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bd1e:	6820      	ldr	r0, [r4, #0]
 800bd20:	f002 f860 	bl	800dde4 <SDMMC_GetResponse>
 800bd24:	0187      	lsls	r7, r0, #6
 800bd26:	d422      	bmi.n	800bd6e <HAL_SD_GetCardStatus+0x62>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800bd28:	2140      	movs	r1, #64	; 0x40
 800bd2a:	6820      	ldr	r0, [r4, #0]
 800bd2c:	f002 f8c8 	bl	800dec0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd30:	b308      	cbz	r0, 800bd76 <HAL_SD_GetCardStatus+0x6a>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bd32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd34:	63a3      	str	r3, [r4, #56]	; 0x38
 800bd36:	6823      	ldr	r3, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd38:	495b      	ldr	r1, [pc, #364]	; (800bea8 <HAL_SD_GetCardStatus+0x19c>)
    hsd->State = HAL_SD_STATE_READY;
 800bd3a:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd3c:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800bd3e:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 800bd40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd42:	4318      	orrs	r0, r3
 800bd44:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bd46:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bd4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bd4e:	6820      	ldr	r0, [r4, #0]
 800bd50:	f002 f8b6 	bl	800dec0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd54:	b138      	cbz	r0, 800bd66 <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 800bd56:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd58:	6822      	ldr	r2, [r4, #0]
 800bd5a:	4953      	ldr	r1, [pc, #332]	; (800bea8 <HAL_SD_GetCardStatus+0x19c>)
    status = HAL_ERROR;
 800bd5c:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd5e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800bd60:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bd62:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800bd66:	4630      	mov	r0, r6
 800bd68:	b017      	add	sp, #92	; 0x5c
 800bd6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd6e:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bd70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bd74:	e7e0      	b.n	800bd38 <HAL_SD_GetCardStatus+0x2c>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd76:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bd78:	6820      	ldr	r0, [r4, #0]
 800bd7a:	0409      	lsls	r1, r1, #16
 800bd7c:	f002 fb0a 	bl	800e394 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d1d6      	bne.n	800bd32 <HAL_SD_GetCardStatus+0x26>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bd84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  config.DataLength    = 64U;
 800bd88:	2340      	movs	r3, #64	; 0x40
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800bd8a:	2160      	movs	r1, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bd8c:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bd8e:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bd90:	2202      	movs	r2, #2
  config.DataLength    = 64U;
 800bd92:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bd94:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800bd96:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bd98:	4669      	mov	r1, sp
 800bd9a:	6820      	ldr	r0, [r4, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bd9c:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bd9e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bda0:	f002 f830 	bl	800de04 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800bda4:	6820      	ldr	r0, [r4, #0]
 800bda6:	f002 fd01 	bl	800e7ac <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	d1c1      	bne.n	800bd32 <HAL_SD_GetCardStatus+0x26>
  uint32_t *pData = pSDstatus;
 800bdae:	af06      	add	r7, sp, #24
 800bdb0:	e005      	b.n	800bdbe <HAL_SD_GetCardStatus+0xb2>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bdb2:	f7f4 fe35 	bl	8000a20 <HAL_GetTick>
 800bdb6:	eba0 0008 	sub.w	r0, r0, r8
 800bdba:	3001      	adds	r0, #1
 800bdbc:	d013      	beq.n	800bde6 <HAL_SD_GetCardStatus+0xda>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bdbe:	6823      	ldr	r3, [r4, #0]
 800bdc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bdc2:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bdc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bdc8:	d110      	bne.n	800bdec <HAL_SD_GetCardStatus+0xe0>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bdca:	0416      	lsls	r6, r2, #16
 800bdcc:	d5f1      	bpl.n	800bdb2 <HAL_SD_GetCardStatus+0xa6>
 800bdce:	f107 0620 	add.w	r6, r7, #32
 800bdd2:	e000      	b.n	800bdd6 <HAL_SD_GetCardStatus+0xca>
 800bdd4:	6823      	ldr	r3, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f001 ffee 	bl	800ddb8 <SDMMC_ReadFIFO>
 800bddc:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 800bde0:	42b7      	cmp	r7, r6
 800bde2:	d1f7      	bne.n	800bdd4 <HAL_SD_GetCardStatus+0xc8>
 800bde4:	e7e5      	b.n	800bdb2 <HAL_SD_GetCardStatus+0xa6>
      return HAL_SD_ERROR_TIMEOUT;
 800bde6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bdea:	e7a4      	b.n	800bd36 <HAL_SD_GetCardStatus+0x2a>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bdec:	0710      	lsls	r0, r2, #28
 800bdee:	d455      	bmi.n	800be9c <HAL_SD_GetCardStatus+0x190>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bdf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bdf2:	0791      	lsls	r1, r2, #30
 800bdf4:	d454      	bmi.n	800bea0 <HAL_SD_GetCardStatus+0x194>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bdf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bdf8:	0692      	lsls	r2, r2, #26
 800bdfa:	d50b      	bpl.n	800be14 <HAL_SD_GetCardStatus+0x108>
 800bdfc:	e052      	b.n	800bea4 <HAL_SD_GetCardStatus+0x198>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bdfe:	f001 ffdb 	bl	800ddb8 <SDMMC_ReadFIFO>
 800be02:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800be06:	f7f4 fe0b 	bl	8000a20 <HAL_GetTick>
 800be0a:	eba0 0008 	sub.w	r0, r0, r8
 800be0e:	3001      	adds	r0, #1
 800be10:	d0e9      	beq.n	800bde6 <HAL_SD_GetCardStatus+0xda>
 800be12:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800be14:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800be16:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800be18:	f416 5680 	ands.w	r6, r6, #4096	; 0x1000
 800be1c:	d1ef      	bne.n	800bdfe <HAL_SD_GetCardStatus+0xf2>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800be1e:	9f06      	ldr	r7, [sp, #24]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800be20:	9808      	ldr	r0, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800be22:	0a39      	lsrs	r1, r7, #8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800be24:	f3c7 1e81 	ubfx	lr, r7, #6, #2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800be28:	ea4f 4810 	mov.w	r8, r0, lsr #16
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800be2c:	f3c7 1c40 	ubfx	ip, r7, #5, #1
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800be30:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800be34:	9a09      	ldr	r2, [sp, #36]	; 0x24
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800be36:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800be3a:	f028 07ff 	bic.w	r7, r8, #255	; 0xff
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800be3e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800beac <HAL_SD_GetCardStatus+0x1a0>
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800be42:	fa5f f982 	uxtb.w	r9, r2
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800be46:	b289      	uxth	r1, r1
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800be48:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800be4c:	fa5f f880 	uxtb.w	r8, r0
 800be50:	9b07      	ldr	r3, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800be52:	ea47 0709 	orr.w	r7, r7, r9
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800be56:	f885 e000 	strb.w	lr, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800be5a:	f885 c001 	strb.w	ip, [r5, #1]
 800be5e:	fa93 fe83 	rev.w	lr, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800be62:	8069      	strh	r1, [r5, #2]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800be64:	f3c0 5303 	ubfx	r3, r0, #20, #4
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800be68:	f3c0 2107 	ubfx	r1, r0, #8, #8
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800be6c:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800be70:	f3c2 2c85 	ubfx	ip, r2, #10, #6
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800be74:	f885 8008 	strb.w	r8, [r5, #8]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800be78:	f3c2 2001 	ubfx	r0, r2, #8, #2
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800be7c:	7269      	strb	r1, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800be7e:	72ab      	strb	r3, [r5, #10]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800be80:	f3c2 1103 	ubfx	r1, r2, #4, #4
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800be84:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800be88:	f002 020f 	and.w	r2, r2, #15
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800be8c:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800be8e:	f885 c00e 	strb.w	ip, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800be92:	73e8      	strb	r0, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800be94:	7429      	strb	r1, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800be96:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800be98:	74ab      	strb	r3, [r5, #18]
 800be9a:	e756      	b.n	800bd4a <HAL_SD_GetCardStatus+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800be9c:	2008      	movs	r0, #8
 800be9e:	e74b      	b.n	800bd38 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bea0:	2002      	movs	r0, #2
 800bea2:	e749      	b.n	800bd38 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 800bea4:	2020      	movs	r0, #32
 800bea6:	e747      	b.n	800bd38 <HAL_SD_GetCardStatus+0x2c>
 800bea8:	1fe00fff 	.word	0x1fe00fff
 800beac:	18000f3a 	.word	0x18000f3a

0800beb0 <HAL_SD_GetCardInfo>:
{
 800beb0:	4603      	mov	r3, r0
}
 800beb2:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800beb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800beb6:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800beb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800beba:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bebe:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bec0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bec2:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bec4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bec6:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800beca:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800becc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bece:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bed2:	61cb      	str	r3, [r1, #28]
}
 800bed4:	4770      	bx	lr
 800bed6:	bf00      	nop

0800bed8 <HAL_SD_ConfigWideBusOperation>:
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800bed8:	f431 4380 	bics.w	r3, r1, #16384	; 0x4000
{
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	460d      	mov	r5, r1
 800bee0:	b08a      	sub	sp, #40	; 0x28
 800bee2:	4604      	mov	r4, r0
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800bee4:	d002      	beq.n	800beec <HAL_SD_ConfigWideBusOperation+0x14>
 800bee6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800beea:	d152      	bne.n	800bf92 <HAL_SD_ConfigWideBusOperation+0xba>
  hsd->State = HAL_SD_STATE_BUSY;
 800beec:	2103      	movs	r1, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 800beee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bef0:	6823      	ldr	r3, [r4, #0]
 800bef2:	428a      	cmp	r2, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800bef4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bef8:	d025      	beq.n	800bf46 <HAL_SD_ConfigWideBusOperation+0x6e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800befa:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800befe:	d022      	beq.n	800bf46 <HAL_SD_ConfigWideBusOperation+0x6e>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800bf00:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 800bf04:	d06b      	beq.n	800bfde <HAL_SD_ConfigWideBusOperation+0x106>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800bf06:	2d00      	cmp	r5, #0
 800bf08:	d049      	beq.n	800bf9e <HAL_SD_ConfigWideBusOperation+0xc6>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bf0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bf0c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800bf10:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bf12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bf14:	b9f2      	cbnz	r2, 800bf54 <HAL_SD_ConfigWideBusOperation+0x7c>
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800bf16:	6962      	ldr	r2, [r4, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bf18:	6921      	ldr	r1, [r4, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800bf1a:	2a03      	cmp	r2, #3
    Init.BusWide             = WideMode;
 800bf1c:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bf1e:	9107      	str	r1, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bf20:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 800bf24:	e9cd 6004 	strd	r6, r0, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800bf28:	d92a      	bls.n	800bf80 <HAL_SD_ConfigWideBusOperation+0xa8>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800bf2a:	9208      	str	r2, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800bf2c:	aa0a      	add	r2, sp, #40	; 0x28
 800bf2e:	ae04      	add	r6, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 800bf30:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 800bf32:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 800bf36:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800bf40:	f001 feda 	bl	800dcf8 <SDMMC_Init>
 800bf44:	e009      	b.n	800bf5a <HAL_SD_ConfigWideBusOperation+0x82>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bf46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bf48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bf4c:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bf4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bf50:	2a00      	cmp	r2, #0
 800bf52:	d0e0      	beq.n	800bf16 <HAL_SD_ConfigWideBusOperation+0x3e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf54:	4a36      	ldr	r2, [pc, #216]	; (800c030 <HAL_SD_ConfigWideBusOperation+0x158>)
    status = HAL_ERROR;
 800bf56:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf58:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bf5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bf5e:	6820      	ldr	r0, [r4, #0]
 800bf60:	f001 ffae 	bl	800dec0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf64:	b130      	cbz	r0, 800bf74 <HAL_SD_ConfigWideBusOperation+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf66:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800bf68:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf6a:	4a31      	ldr	r2, [pc, #196]	; (800c030 <HAL_SD_ConfigWideBusOperation+0x158>)
 800bf6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bf6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bf70:	4318      	orrs	r0, r3
 800bf72:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800bf74:	2301      	movs	r3, #1
}
 800bf76:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800bf78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800bf7c:	b00a      	add	sp, #40	; 0x28
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800bf80:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bf82:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bf86:	d0d0      	beq.n	800bf2a <HAL_SD_ConfigWideBusOperation+0x52>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800bf88:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bf8c:	d034      	beq.n	800bff8 <HAL_SD_ConfigWideBusOperation+0x120>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800bf8e:	2204      	movs	r2, #4
 800bf90:	e7cb      	b.n	800bf2a <HAL_SD_ConfigWideBusOperation+0x52>
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800bf92:	f640 1149 	movw	r1, #2377	; 0x949
 800bf96:	4827      	ldr	r0, [pc, #156]	; (800c034 <HAL_SD_ConfigWideBusOperation+0x15c>)
 800bf98:	f007 fcd4 	bl	8013944 <assert_failed>
 800bf9c:	e7a6      	b.n	800beec <HAL_SD_ConfigWideBusOperation+0x14>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	4618      	mov	r0, r3
  uint32_t scr[2U] = {0UL, 0UL};
 800bfa2:	e9cd 5504 	strd	r5, r5, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bfa6:	f001 ff1d 	bl	800dde4 <SDMMC_GetResponse>
 800bfaa:	0181      	lsls	r1, r0, #6
 800bfac:	d420      	bmi.n	800bff0 <HAL_SD_ConfigWideBusOperation+0x118>
  errorstate = SD_FindSCR(hsd, scr);
 800bfae:	a904      	add	r1, sp, #16
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	f7ff f9f7 	bl	800b3a4 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfb6:	b968      	cbnz	r0, 800bfd4 <HAL_SD_ConfigWideBusOperation+0xfc>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bfb8:	9a05      	ldr	r2, [sp, #20]
 800bfba:	6823      	ldr	r3, [r4, #0]
 800bfbc:	03d2      	lsls	r2, r2, #15
 800bfbe:	d534      	bpl.n	800c02a <HAL_SD_ConfigWideBusOperation+0x152>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bfc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	0409      	lsls	r1, r1, #16
 800bfc6:	f002 f9e5 	bl	800e394 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800bfca:	b918      	cbnz	r0, 800bfd4 <HAL_SD_ConfigWideBusOperation+0xfc>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bfcc:	4629      	mov	r1, r5
 800bfce:	6820      	ldr	r0, [r4, #0]
 800bfd0:	f002 fa58 	bl	800e484 <SDMMC_CmdBusWidth>
 800bfd4:	6823      	ldr	r3, [r4, #0]
      hsd->ErrorCode |= errorstate;
 800bfd6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bfd8:	4310      	orrs	r0, r2
 800bfda:	63a0      	str	r0, [r4, #56]	; 0x38
 800bfdc:	e7b7      	b.n	800bf4e <HAL_SD_ConfigWideBusOperation+0x76>
  uint32_t scr[2U] = {0UL, 0UL};
 800bfde:	2200      	movs	r2, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	4611      	mov	r1, r2
  uint32_t scr[2U] = {0UL, 0UL};
 800bfe4:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bfe8:	f001 fefc 	bl	800dde4 <SDMMC_GetResponse>
 800bfec:	0186      	lsls	r6, r0, #6
 800bfee:	d506      	bpl.n	800bffe <HAL_SD_ConfigWideBusOperation+0x126>
 800bff0:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bff2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bff6:	e7ee      	b.n	800bfd6 <HAL_SD_ConfigWideBusOperation+0xfe>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800bff8:	2202      	movs	r2, #2
 800bffa:	9208      	str	r2, [sp, #32]
 800bffc:	e796      	b.n	800bf2c <HAL_SD_ConfigWideBusOperation+0x54>
  errorstate = SD_FindSCR(hsd, scr);
 800bffe:	a904      	add	r1, sp, #16
 800c000:	4620      	mov	r0, r4
 800c002:	f7ff f9cf 	bl	800b3a4 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c006:	2800      	cmp	r0, #0
 800c008:	d1e4      	bne.n	800bfd4 <HAL_SD_ConfigWideBusOperation+0xfc>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c00a:	9a05      	ldr	r2, [sp, #20]
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	0350      	lsls	r0, r2, #13
 800c010:	d50b      	bpl.n	800c02a <HAL_SD_ConfigWideBusOperation+0x152>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c012:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c014:	4618      	mov	r0, r3
 800c016:	0409      	lsls	r1, r1, #16
 800c018:	f002 f9bc 	bl	800e394 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d1d9      	bne.n	800bfd4 <HAL_SD_ConfigWideBusOperation+0xfc>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c020:	2102      	movs	r1, #2
 800c022:	6820      	ldr	r0, [r4, #0]
 800c024:	f002 fa2e 	bl	800e484 <SDMMC_CmdBusWidth>
 800c028:	e7d4      	b.n	800bfd4 <HAL_SD_ConfigWideBusOperation+0xfc>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c02a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800c02e:	e7d2      	b.n	800bfd6 <HAL_SD_ConfigWideBusOperation+0xfe>
 800c030:	1fe00fff 	.word	0x1fe00fff
 800c034:	08145064 	.word	0x08145064

0800c038 <HAL_SD_Init>:
{
 800c038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c03a:	b087      	sub	sp, #28
  if(hsd == NULL)
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d038      	beq.n	800c0b2 <HAL_SD_Init+0x7a>
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 800c040:	6803      	ldr	r3, [r0, #0]
 800c042:	4604      	mov	r4, r0
 800c044:	4a5c      	ldr	r2, [pc, #368]	; (800c1b8 <HAL_SD_Init+0x180>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d007      	beq.n	800c05a <HAL_SD_Init+0x22>
 800c04a:	4a5c      	ldr	r2, [pc, #368]	; (800c1bc <HAL_SD_Init+0x184>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d004      	beq.n	800c05a <HAL_SD_Init+0x22>
 800c050:	f240 115b 	movw	r1, #347	; 0x15b
 800c054:	485a      	ldr	r0, [pc, #360]	; (800c1c0 <HAL_SD_Init+0x188>)
 800c056:	f007 fc75 	bl	8013944 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 800c05a:	6863      	ldr	r3, [r4, #4]
 800c05c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800c060:	d17a      	bne.n	800c158 <HAL_SD_Init+0x120>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 800c062:	68a3      	ldr	r3, [r4, #8]
 800c064:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800c068:	d16c      	bne.n	800c144 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800c06a:	68e3      	ldr	r3, [r4, #12]
 800c06c:	f433 4280 	bics.w	r2, r3, #16384	; 0x4000
 800c070:	d003      	beq.n	800c07a <HAL_SD_Init+0x42>
 800c072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c076:	f040 8084 	bne.w	800c182 <HAL_SD_Init+0x14a>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 800c07a:	6923      	ldr	r3, [r4, #16]
 800c07c:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800c080:	d175      	bne.n	800c16e <HAL_SD_Init+0x136>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 800c082:	6963      	ldr	r3, [r4, #20]
 800c084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c088:	d250      	bcs.n	800c12c <HAL_SD_Init+0xf4>
  if(hsd->State == HAL_SD_STATE_RESET)
 800c08a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800c08e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c092:	b93b      	cbnz	r3, 800c0a4 <HAL_SD_Init+0x6c>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800c094:	69a3      	ldr	r3, [r4, #24]
    hsd->Lock = HAL_UNLOCKED;
 800c096:	7722      	strb	r2, [r4, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800c098:	b90b      	cbnz	r3, 800c09e <HAL_SD_Init+0x66>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800c09a:	2302      	movs	r3, #2
 800c09c:	61a3      	str	r3, [r4, #24]
    HAL_SD_MspInit(hsd);
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f008 fb1a 	bl	80146d8 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800c0a4:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c0a6:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800c0a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c0ac:	f7ff fcba 	bl	800ba24 <HAL_SD_InitCard>
 800c0b0:	b118      	cbz	r0, 800c0ba <HAL_SD_Init+0x82>
    return HAL_ERROR;
 800c0b2:	2501      	movs	r5, #1
}
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	b007      	add	sp, #28
 800c0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c0ba:	a901      	add	r1, sp, #4
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f7ff fe25 	bl	800bd0c <HAL_SD_GetCardStatus>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	d1f5      	bne.n	800c0b2 <HAL_SD_Init+0x7a>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c0c6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 800c0c8:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c0cc:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c0ce:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800c0d2:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c0d4:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c0d6:	d05f      	beq.n	800c198 <HAL_SD_Init+0x160>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c0d8:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c0da:	68e1      	ldr	r1, [r4, #12]
 800c0dc:	4620      	mov	r0, r4
 800c0de:	f7ff fefb 	bl	800bed8 <HAL_SD_ConfigWideBusOperation>
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d1e4      	bne.n	800c0b2 <HAL_SD_Init+0x7a>
  tickstart = HAL_GetTick();
 800c0e8:	f7f4 fc9a 	bl	8000a20 <HAL_GetTick>
 800c0ec:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c0ee:	e007      	b.n	800c100 <HAL_SD_Init+0xc8>
    hsd->ErrorCode |= errorstate;
 800c0f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c0f2:	431e      	orrs	r6, r3
 800c0f4:	63a6      	str	r6, [r4, #56]	; 0x38
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800c0f6:	f7f4 fc93 	bl	8000a20 <HAL_GetTick>
 800c0fa:	1bc0      	subs	r0, r0, r7
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	d053      	beq.n	800c1a8 <HAL_SD_Init+0x170>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c100:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c102:	6820      	ldr	r0, [r4, #0]
 800c104:	0409      	lsls	r1, r1, #16
 800c106:	f002 fb0d 	bl	800e724 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c10a:	4606      	mov	r6, r0
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d1ef      	bne.n	800c0f0 <HAL_SD_Init+0xb8>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c110:	4601      	mov	r1, r0
 800c112:	6820      	ldr	r0, [r4, #0]
 800c114:	f001 fe66 	bl	800dde4 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c118:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c11c:	2804      	cmp	r0, #4
 800c11e:	d1ea      	bne.n	800c0f6 <HAL_SD_Init+0xbe>
  hsd->State = HAL_SD_STATE_READY;
 800c120:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c122:	63a6      	str	r6, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800c124:	6326      	str	r6, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800c126:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800c12a:	e7c3      	b.n	800c0b4 <HAL_SD_Init+0x7c>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 800c12c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800c130:	4823      	ldr	r0, [pc, #140]	; (800c1c0 <HAL_SD_Init+0x188>)
 800c132:	f007 fc07 	bl	8013944 <assert_failed>
  if(hsd->State == HAL_SD_STATE_RESET)
 800c136:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800c13a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1b0      	bne.n	800c0a4 <HAL_SD_Init+0x6c>
 800c142:	e7a7      	b.n	800c094 <HAL_SD_Init+0x5c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 800c144:	f240 115d 	movw	r1, #349	; 0x15d
 800c148:	481d      	ldr	r0, [pc, #116]	; (800c1c0 <HAL_SD_Init+0x188>)
 800c14a:	f007 fbfb 	bl	8013944 <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800c14e:	68e3      	ldr	r3, [r4, #12]
 800c150:	f433 4280 	bics.w	r2, r3, #16384	; 0x4000
 800c154:	d18d      	bne.n	800c072 <HAL_SD_Init+0x3a>
 800c156:	e790      	b.n	800c07a <HAL_SD_Init+0x42>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 800c158:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800c15c:	4818      	ldr	r0, [pc, #96]	; (800c1c0 <HAL_SD_Init+0x188>)
 800c15e:	f007 fbf1 	bl	8013944 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 800c162:	68a3      	ldr	r3, [r4, #8]
 800c164:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800c168:	f43f af7f 	beq.w	800c06a <HAL_SD_Init+0x32>
 800c16c:	e7ea      	b.n	800c144 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 800c16e:	f240 115f 	movw	r1, #351	; 0x15f
 800c172:	4813      	ldr	r0, [pc, #76]	; (800c1c0 <HAL_SD_Init+0x188>)
 800c174:	f007 fbe6 	bl	8013944 <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 800c178:	6963      	ldr	r3, [r4, #20]
 800c17a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c17e:	d384      	bcc.n	800c08a <HAL_SD_Init+0x52>
 800c180:	e7d4      	b.n	800c12c <HAL_SD_Init+0xf4>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800c182:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800c186:	480e      	ldr	r0, [pc, #56]	; (800c1c0 <HAL_SD_Init+0x188>)
 800c188:	f007 fbdc 	bl	8013944 <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 800c18c:	6923      	ldr	r3, [r4, #16]
 800c18e:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800c192:	f43f af76 	beq.w	800c082 <HAL_SD_Init+0x4a>
 800c196:	e7ea      	b.n	800c16e <HAL_SD_Init+0x136>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c198:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c19a:	bf14      	ite	ne
 800c19c:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c1a0:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800c1a4:	65e3      	str	r3, [r4, #92]	; 0x5c
 800c1a6:	e798      	b.n	800c0da <HAL_SD_Init+0xa2>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c1a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 800c1ac:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800c1ae:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c1b0:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800c1b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 800c1b6:	e77d      	b.n	800c0b4 <HAL_SD_Init+0x7c>
 800c1b8:	52007000 	.word	0x52007000
 800c1bc:	48022400 	.word	0x48022400
 800c1c0:	08145064 	.word	0x08145064

0800c1c4 <HAL_SD_GetCardState>:
{
 800c1c4:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c1c6:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 800c1c8:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c1ca:	6800      	ldr	r0, [r0, #0]
 800c1cc:	0409      	lsls	r1, r1, #16
 800c1ce:	f002 faa9 	bl	800e724 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1d2:	4601      	mov	r1, r0
 800c1d4:	b120      	cbz	r0, 800c1e0 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800c1d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c1d8:	2000      	movs	r0, #0
 800c1da:	4319      	orrs	r1, r3
 800c1dc:	63a1      	str	r1, [r4, #56]	; 0x38
}
 800c1de:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c1e0:	6820      	ldr	r0, [r4, #0]
 800c1e2:	f001 fdff 	bl	800dde4 <SDMMC_GetResponse>
 800c1e6:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800c1ea:	bd10      	pop	{r4, pc}

0800c1ec <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c1ec:	b310      	cbz	r0, 800c234 <HAL_SDRAM_Init+0x48>
{
 800c1ee:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c1f0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	460d      	mov	r5, r1
 800c1f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c1fc:	b1ab      	cbz	r3, 800c22a <HAL_SDRAM_Init+0x3e>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c1fe:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c200:	1d21      	adds	r1, r4, #4
 800c202:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c204:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c208:	f001 fb3a 	bl	800d880 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c20c:	4629      	mov	r1, r5
 800c20e:	e9d4 0200 	ldrd	r0, r2, [r4]
 800c212:	f001 fbf9 	bl	800da08 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800c216:	4a08      	ldr	r2, [pc, #32]	; (800c238 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c218:	2101      	movs	r1, #1

  return HAL_OK;
 800c21a:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800c21c:	6813      	ldr	r3, [r2, #0]
 800c21e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c222:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c224:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800c228:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800c22a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800c22e:	f005 fedb 	bl	8011fe8 <HAL_SDRAM_MspInit>
 800c232:	e7e4      	b.n	800c1fe <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800c234:	2001      	movs	r0, #1
}
 800c236:	4770      	bx	lr
 800c238:	52004000 	.word	0x52004000

0800c23c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c23c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800c240:	b2db      	uxtb	r3, r3
  
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c242:	2b02      	cmp	r3, #2
 800c244:	d015      	beq.n	800c272 <HAL_SDRAM_SendCommand+0x36>
{
 800c246:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_BUSY;
  }
  else if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c248:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
 800c24c:	2c01      	cmp	r4, #1
 800c24e:	d001      	beq.n	800c254 <HAL_SDRAM_SendCommand+0x18>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800c250:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800c252:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c254:	2302      	movs	r3, #2
 800c256:	4605      	mov	r5, r0
 800c258:	460e      	mov	r6, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c25a:	6800      	ldr	r0, [r0, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c25c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c260:	f001 fc7a 	bl	800db58 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c264:	6833      	ldr	r3, [r6, #0]
 800c266:	2b02      	cmp	r3, #2
 800c268:	d005      	beq.n	800c276 <HAL_SDRAM_SendCommand+0x3a>
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c26a:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  return HAL_OK;
 800c26e:	2000      	movs	r0, #0
}
 800c270:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800c272:	4618      	mov	r0, r3
}
 800c274:	4770      	bx	lr
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c276:	2305      	movs	r3, #5
  return HAL_OK;
 800c278:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c27a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 800c27e:	bd70      	pop	{r4, r5, r6, pc}

0800c280 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c280:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c282:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800c286:	b2db      	uxtb	r3, r3
 800c288:	2b02      	cmp	r3, #2
 800c28a:	d006      	beq.n	800c29a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c28c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800c290:	b2ed      	uxtb	r5, r5
 800c292:	2d01      	cmp	r5, #1
 800c294:	d003      	beq.n	800c29e <HAL_SDRAM_ProgramRefreshRate+0x1e>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800c296:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800c298:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800c29a:	4618      	mov	r0, r3
}
 800c29c:	bd38      	pop	{r3, r4, r5, pc}
 800c29e:	4604      	mov	r4, r0
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c2a0:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c2a2:	6800      	ldr	r0, [r0, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c2a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c2a8:	f001 fca0 	bl	800dbec <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c2ac:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  return HAL_OK;
 800c2b0:	2000      	movs	r0, #0
}
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}

0800c2b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2b8:	6a02      	ldr	r2, [r0, #32]
{
 800c2ba:	460f      	mov	r7, r1
 800c2bc:	4604      	mov	r4, r0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c2be:	4b3b      	ldr	r3, [pc, #236]	; (800c3ac <TIM_OC1_SetConfig+0xf8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2c0:	f022 0201 	bic.w	r2, r2, #1
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2c4:	493a      	ldr	r1, [pc, #232]	; (800c3b0 <TIM_OC1_SetConfig+0xfc>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2c6:	6202      	str	r2, [r0, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2c8:	428c      	cmp	r4, r1
  tmpccer = TIMx->CCER;
 800c2ca:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c2cc:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c2d0:	6980      	ldr	r0, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800c2d2:	f025 0502 	bic.w	r5, r5, #2
  tmpccer |= OC_Config->OCPolarity;
 800c2d6:	68ba      	ldr	r2, [r7, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c2d8:	ea03 0300 	and.w	r3, r3, r0
  tmpccmrx |= OC_Config->OCMode;
 800c2dc:	683e      	ldr	r6, [r7, #0]
  tmpccer |= OC_Config->OCPolarity;
 800c2de:	ea45 0502 	orr.w	r5, r5, r2
  tmpccmrx |= OC_Config->OCMode;
 800c2e2:	ea46 0603 	orr.w	r6, r6, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2e6:	d03a      	beq.n	800c35e <TIM_OC1_SetConfig+0xaa>
 800c2e8:	4b32      	ldr	r3, [pc, #200]	; (800c3b4 <TIM_OC1_SetConfig+0x100>)
 800c2ea:	429c      	cmp	r4, r3
 800c2ec:	d037      	beq.n	800c35e <TIM_OC1_SetConfig+0xaa>
 800c2ee:	4a32      	ldr	r2, [pc, #200]	; (800c3b8 <TIM_OC1_SetConfig+0x104>)
 800c2f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c2f4:	429c      	cmp	r4, r3
 800c2f6:	bf18      	it	ne
 800c2f8:	4294      	cmpne	r4, r2
 800c2fa:	d003      	beq.n	800c304 <TIM_OC1_SetConfig+0x50>
 800c2fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c300:	429c      	cmp	r4, r3
 800c302:	d144      	bne.n	800c38e <TIM_OC1_SetConfig+0xda>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f025 0508 	bic.w	r5, r5, #8
 800c30a:	f033 0208 	bics.w	r2, r3, #8
 800c30e:	d02c      	beq.n	800c36a <TIM_OC1_SetConfig+0xb6>
 800c310:	f641 0106 	movw	r1, #6150	; 0x1806
 800c314:	4829      	ldr	r0, [pc, #164]	; (800c3bc <TIM_OC1_SetConfig+0x108>)
 800c316:	f007 fb15 	bl	8013944 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c31a:	68fb      	ldr	r3, [r7, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c31c:	4a26      	ldr	r2, [pc, #152]	; (800c3b8 <TIM_OC1_SetConfig+0x104>)
    tmpccer |= OC_Config->OCNPolarity;
 800c31e:	431d      	orrs	r5, r3
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c320:	4b27      	ldr	r3, [pc, #156]	; (800c3c0 <TIM_OC1_SetConfig+0x10c>)
 800c322:	429c      	cmp	r4, r3
 800c324:	bf18      	it	ne
 800c326:	4294      	cmpne	r4, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 800c328:	f025 0504 	bic.w	r5, r5, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c32c:	d020      	beq.n	800c370 <TIM_OC1_SetConfig+0xbc>
 800c32e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c332:	429c      	cmp	r4, r3
 800c334:	d12b      	bne.n	800c38e <TIM_OC1_SetConfig+0xda>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800c33c:	d01c      	beq.n	800c378 <TIM_OC1_SetConfig+0xc4>
 800c33e:	f641 0113 	movw	r1, #6163	; 0x1813
 800c342:	481e      	ldr	r0, [pc, #120]	; (800c3bc <TIM_OC1_SetConfig+0x108>)
 800c344:	f007 fafe 	bl	8013944 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c34e:	d017      	beq.n	800c380 <TIM_OC1_SetConfig+0xcc>
 800c350:	f641 0114 	movw	r1, #6164	; 0x1814
 800c354:	4819      	ldr	r0, [pc, #100]	; (800c3bc <TIM_OC1_SetConfig+0x108>)
 800c356:	f007 faf5 	bl	8013944 <assert_failed>
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	e010      	b.n	800c380 <TIM_OC1_SetConfig+0xcc>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f025 0508 	bic.w	r5, r5, #8
 800c364:	f033 0208 	bics.w	r2, r3, #8
 800c368:	d119      	bne.n	800c39e <TIM_OC1_SetConfig+0xea>
    tmpccer |= OC_Config->OCNPolarity;
 800c36a:	431d      	orrs	r5, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 800c36c:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800c376:	d1e2      	bne.n	800c33e <TIM_OC1_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c37e:	d1e7      	bne.n	800c350 <TIM_OC1_SetConfig+0x9c>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c380:	f428 7840 	bic.w	r8, r8, #768	; 0x300
 800c384:	69ba      	ldr	r2, [r7, #24]
 800c386:	ea48 0802 	orr.w	r8, r8, r2
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c38a:	ea48 0803 	orr.w	r8, r8, r3
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c38e:	f8c4 8004 	str.w	r8, [r4, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c392:	61a6      	str	r6, [r4, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6363      	str	r3, [r4, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c398:	6225      	str	r5, [r4, #32]
}
 800c39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c39e:	f641 0106 	movw	r1, #6150	; 0x1806
 800c3a2:	4806      	ldr	r0, [pc, #24]	; (800c3bc <TIM_OC1_SetConfig+0x108>)
 800c3a4:	f007 face 	bl	8013944 <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	e7de      	b.n	800c36a <TIM_OC1_SetConfig+0xb6>
 800c3ac:	fffeff8c 	.word	0xfffeff8c
 800c3b0:	40010000 	.word	0x40010000
 800c3b4:	40010400 	.word	0x40010400
 800c3b8:	40014000 	.word	0x40014000
 800c3bc:	0814509c 	.word	0x0814509c
 800c3c0:	40014400 	.word	0x40014400

0800c3c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3c8:	6a03      	ldr	r3, [r0, #32]
{
 800c3ca:	460f      	mov	r7, r1
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c3cc:	4931      	ldr	r1, [pc, #196]	; (800c494 <TIM_OC3_SetConfig+0xd0>)
{
 800c3ce:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c3d4:	4288      	cmp	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3d6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800c3d8:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c3da:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800c3de:	69c6      	ldr	r6, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800c3e0:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c3e4:	68ba      	ldr	r2, [r7, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c3e6:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c3ea:	683b      	ldr	r3, [r7, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c3ec:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800c3f0:	ea46 0603 	orr.w	r6, r6, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c3f4:	d023      	beq.n	800c43e <TIM_OC3_SetConfig+0x7a>
 800c3f6:	4b28      	ldr	r3, [pc, #160]	; (800c498 <TIM_OC3_SetConfig+0xd4>)
 800c3f8:	4298      	cmp	r0, r3
 800c3fa:	d020      	beq.n	800c43e <TIM_OC3_SetConfig+0x7a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3fc:	4a27      	ldr	r2, [pc, #156]	; (800c49c <TIM_OC3_SetConfig+0xd8>)
 800c3fe:	4b28      	ldr	r3, [pc, #160]	; (800c4a0 <TIM_OC3_SetConfig+0xdc>)
 800c400:	4298      	cmp	r0, r3
 800c402:	bf18      	it	ne
 800c404:	4290      	cmpne	r0, r2
 800c406:	d003      	beq.n	800c410 <TIM_OC3_SetConfig+0x4c>
 800c408:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c40c:	4298      	cmp	r0, r3
 800c40e:	d10e      	bne.n	800c42e <TIM_OC3_SetConfig+0x6a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800c416:	d120      	bne.n	800c45a <TIM_OC3_SetConfig+0x96>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c41e:	d125      	bne.n	800c46c <TIM_OC3_SetConfig+0xa8>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c420:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c424:	69ba      	ldr	r2, [r7, #24]
 800c426:	ea48 1802 	orr.w	r8, r8, r2, lsl #4
 800c42a:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c42e:	f8c4 8004 	str.w	r8, [r4, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c432:	61e6      	str	r6, [r4, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	63e3      	str	r3, [r4, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c438:	6225      	str	r5, [r4, #32]
}
 800c43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f033 0208 	bics.w	r2, r3, #8
 800c444:	d119      	bne.n	800c47a <TIM_OC3_SetConfig+0xb6>
    tmpccer &= ~TIM_CCER_CC3NP;
 800c446:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c44a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800c44e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800c458:	d0de      	beq.n	800c418 <TIM_OC3_SetConfig+0x54>
 800c45a:	f641 01a9 	movw	r1, #6313	; 0x18a9
 800c45e:	4811      	ldr	r0, [pc, #68]	; (800c4a4 <TIM_OC3_SetConfig+0xe0>)
 800c460:	f007 fa70 	bl	8013944 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c46a:	d0d9      	beq.n	800c420 <TIM_OC3_SetConfig+0x5c>
 800c46c:	f641 01aa 	movw	r1, #6314	; 0x18aa
 800c470:	480c      	ldr	r0, [pc, #48]	; (800c4a4 <TIM_OC3_SetConfig+0xe0>)
 800c472:	f007 fa67 	bl	8013944 <assert_failed>
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	e7d2      	b.n	800c420 <TIM_OC3_SetConfig+0x5c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c47a:	f641 019c 	movw	r1, #6300	; 0x189c
 800c47e:	4809      	ldr	r0, [pc, #36]	; (800c4a4 <TIM_OC3_SetConfig+0xe0>)
 800c480:	f007 fa60 	bl	8013944 <assert_failed>
    tmpccer &= ~TIM_CCER_CC3NP;
 800c484:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 800c488:	68fb      	ldr	r3, [r7, #12]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c48a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800c48e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800c492:	e7de      	b.n	800c452 <TIM_OC3_SetConfig+0x8e>
 800c494:	40010000 	.word	0x40010000
 800c498:	40010400 	.word	0x40010400
 800c49c:	40014000 	.word	0x40014000
 800c4a0:	40014400 	.word	0x40014400
 800c4a4:	0814509c 	.word	0x0814509c

0800c4a8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	f000 80dd 	beq.w	800c668 <HAL_TIM_Base_Init+0x1c0>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c4ae:	4b80      	ldr	r3, [pc, #512]	; (800c6b0 <HAL_TIM_Base_Init+0x208>)
 800c4b0:	4980      	ldr	r1, [pc, #512]	; (800c6b4 <HAL_TIM_Base_Init+0x20c>)
{
 800c4b2:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c4b4:	6802      	ldr	r2, [r0, #0]
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	487f      	ldr	r0, [pc, #508]	; (800c6b8 <HAL_TIM_Base_Init+0x210>)
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	bf18      	it	ne
 800c4be:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800c4c2:	4d7e      	ldr	r5, [pc, #504]	; (800c6bc <HAL_TIM_Base_Init+0x214>)
 800c4c4:	bf14      	ite	ne
 800c4c6:	2301      	movne	r3, #1
 800c4c8:	2300      	moveq	r3, #0
 800c4ca:	4282      	cmp	r2, r0
 800c4cc:	bf0c      	ite	eq
 800c4ce:	2300      	moveq	r3, #0
 800c4d0:	f003 0301 	andne.w	r3, r3, #1
 800c4d4:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800c4d8:	428a      	cmp	r2, r1
 800c4da:	bf0c      	ite	eq
 800c4dc:	2300      	moveq	r3, #0
 800c4de:	f003 0301 	andne.w	r3, r3, #1
 800c4e2:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800c4e6:	42aa      	cmp	r2, r5
 800c4e8:	bf0c      	ite	eq
 800c4ea:	2300      	moveq	r3, #0
 800c4ec:	f003 0301 	andne.w	r3, r3, #1
 800c4f0:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800c4f4:	4282      	cmp	r2, r0
 800c4f6:	bf0c      	ite	eq
 800c4f8:	2300      	moveq	r3, #0
 800c4fa:	f003 0301 	andne.w	r3, r3, #1
 800c4fe:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800c502:	428a      	cmp	r2, r1
 800c504:	bf0c      	ite	eq
 800c506:	2300      	moveq	r3, #0
 800c508:	f003 0301 	andne.w	r3, r3, #1
 800c50c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c510:	42aa      	cmp	r2, r5
 800c512:	bf0c      	ite	eq
 800c514:	2300      	moveq	r3, #0
 800c516:	f003 0301 	andne.w	r3, r3, #1
 800c51a:	f5a5 4564 	sub.w	r5, r5, #58368	; 0xe400
 800c51e:	4282      	cmp	r2, r0
 800c520:	bf0c      	ite	eq
 800c522:	2300      	moveq	r3, #0
 800c524:	f003 0301 	andne.w	r3, r3, #1
 800c528:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 800c52c:	428a      	cmp	r2, r1
 800c52e:	bf0c      	ite	eq
 800c530:	2300      	moveq	r3, #0
 800c532:	f003 0301 	andne.w	r3, r3, #1
 800c536:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 800c53a:	42aa      	cmp	r2, r5
 800c53c:	bf0c      	ite	eq
 800c53e:	2300      	moveq	r3, #0
 800c540:	f003 0301 	andne.w	r3, r3, #1
 800c544:	4282      	cmp	r2, r0
 800c546:	bf0c      	ite	eq
 800c548:	2300      	moveq	r3, #0
 800c54a:	f003 0301 	andne.w	r3, r3, #1
 800c54e:	428a      	cmp	r2, r1
 800c550:	bf0c      	ite	eq
 800c552:	2300      	moveq	r3, #0
 800c554:	f003 0301 	andne.w	r3, r3, #1
 800c558:	b11b      	cbz	r3, 800c562 <HAL_TIM_Base_Init+0xba>
 800c55a:	4b59      	ldr	r3, [pc, #356]	; (800c6c0 <HAL_TIM_Base_Init+0x218>)
 800c55c:	429a      	cmp	r2, r3
 800c55e:	f040 80a0 	bne.w	800c6a2 <HAL_TIM_Base_Init+0x1fa>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c562:	68a3      	ldr	r3, [r4, #8]
 800c564:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800c568:	f023 0210 	bic.w	r2, r3, #16
 800c56c:	2920      	cmp	r1, #32
 800c56e:	bf18      	it	ne
 800c570:	2a00      	cmpne	r2, #0
 800c572:	d002      	beq.n	800c57a <HAL_TIM_Base_Init+0xd2>
 800c574:	2b40      	cmp	r3, #64	; 0x40
 800c576:	f040 8083 	bne.w	800c680 <HAL_TIM_Base_Init+0x1d8>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c57a:	6923      	ldr	r3, [r4, #16]
 800c57c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c580:	d002      	beq.n	800c588 <HAL_TIM_Base_Init+0xe0>
 800c582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c586:	d171      	bne.n	800c66c <HAL_TIM_Base_Init+0x1c4>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c588:	69a3      	ldr	r3, [r4, #24]
 800c58a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c58e:	d15f      	bne.n	800c650 <HAL_TIM_Base_Init+0x1a8>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c590:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c594:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d053      	beq.n	800c644 <HAL_TIM_Base_Init+0x19c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c59c:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c59e:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5a0:	4943      	ldr	r1, [pc, #268]	; (800c6b0 <HAL_TIM_Base_Init+0x208>)
 800c5a2:	4d48      	ldr	r5, [pc, #288]	; (800c6c4 <HAL_TIM_Base_Init+0x21c>)
 800c5a4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800c5a8:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 800c5ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800c5b0:	eba2 0505 	sub.w	r5, r2, r5
  tmpcr1 = TIMx->CR1;
 800c5b4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5b6:	fab1 f181 	clz	r1, r1
 800c5ba:	fab5 f585 	clz	r5, r5
 800c5be:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800c5c2:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800c5c6:	d018      	beq.n	800c5fa <HAL_TIM_Base_Init+0x152>
 800c5c8:	b9b9      	cbnz	r1, 800c5fa <HAL_TIM_Base_Init+0x152>
 800c5ca:	483b      	ldr	r0, [pc, #236]	; (800c6b8 <HAL_TIM_Base_Init+0x210>)
 800c5cc:	4282      	cmp	r2, r0
 800c5ce:	d014      	beq.n	800c5fa <HAL_TIM_Base_Init+0x152>
 800c5d0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c5d4:	4282      	cmp	r2, r0
 800c5d6:	d010      	beq.n	800c5fa <HAL_TIM_Base_Init+0x152>
 800c5d8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c5dc:	4282      	cmp	r2, r0
 800c5de:	d055      	beq.n	800c68c <HAL_TIM_Base_Init+0x1e4>
 800c5e0:	2d00      	cmp	r5, #0
 800c5e2:	d153      	bne.n	800c68c <HAL_TIM_Base_Init+0x1e4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5e4:	4e38      	ldr	r6, [pc, #224]	; (800c6c8 <HAL_TIM_Base_Init+0x220>)
 800c5e6:	4839      	ldr	r0, [pc, #228]	; (800c6cc <HAL_TIM_Base_Init+0x224>)
 800c5e8:	4282      	cmp	r2, r0
 800c5ea:	bf18      	it	ne
 800c5ec:	42b2      	cmpne	r2, r6
 800c5ee:	d008      	beq.n	800c602 <HAL_TIM_Base_Init+0x15a>
 800c5f0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c5f4:	4282      	cmp	r2, r0
 800c5f6:	d108      	bne.n	800c60a <HAL_TIM_Base_Init+0x162>
 800c5f8:	e003      	b.n	800c602 <HAL_TIM_Base_Init+0x15a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c5fe:	68a0      	ldr	r0, [r4, #8]
 800c600:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800c602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c606:	6920      	ldr	r0, [r4, #16]
 800c608:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c60a:	69a0      	ldr	r0, [r4, #24]
 800c60c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c610:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800c612:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c614:	68e3      	ldr	r3, [r4, #12]
 800c616:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c618:	6863      	ldr	r3, [r4, #4]
 800c61a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c61c:	b951      	cbnz	r1, 800c634 <HAL_TIM_Base_Init+0x18c>
 800c61e:	b94d      	cbnz	r5, 800c634 <HAL_TIM_Base_Init+0x18c>
 800c620:	4929      	ldr	r1, [pc, #164]	; (800c6c8 <HAL_TIM_Base_Init+0x220>)
 800c622:	4b2a      	ldr	r3, [pc, #168]	; (800c6cc <HAL_TIM_Base_Init+0x224>)
 800c624:	429a      	cmp	r2, r3
 800c626:	bf18      	it	ne
 800c628:	428a      	cmpne	r2, r1
 800c62a:	d003      	beq.n	800c634 <HAL_TIM_Base_Init+0x18c>
 800c62c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c630:	429a      	cmp	r2, r3
 800c632:	d101      	bne.n	800c638 <HAL_TIM_Base_Init+0x190>
    TIMx->RCR = Structure->RepetitionCounter;
 800c634:	6963      	ldr	r3, [r4, #20]
 800c636:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c638:	2301      	movs	r3, #1
  return HAL_OK;
 800c63a:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800c63c:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 800c63e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c642:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800c644:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c648:	4620      	mov	r0, r4
 800c64a:	f00f fe13 	bl	801c274 <HAL_TIM_Base_MspInit>
 800c64e:	e7a5      	b.n	800c59c <HAL_TIM_Base_Init+0xf4>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c650:	f44f 718c 	mov.w	r1, #280	; 0x118
 800c654:	481e      	ldr	r0, [pc, #120]	; (800c6d0 <HAL_TIM_Base_Init+0x228>)
 800c656:	f007 f975 	bl	8013944 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c65a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c65e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c662:	2b00      	cmp	r3, #0
 800c664:	d19a      	bne.n	800c59c <HAL_TIM_Base_Init+0xf4>
 800c666:	e7ed      	b.n	800c644 <HAL_TIM_Base_Init+0x19c>
    return HAL_ERROR;
 800c668:	2001      	movs	r0, #1
}
 800c66a:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c66c:	f240 1117 	movw	r1, #279	; 0x117
 800c670:	4817      	ldr	r0, [pc, #92]	; (800c6d0 <HAL_TIM_Base_Init+0x228>)
 800c672:	f007 f967 	bl	8013944 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c676:	69a3      	ldr	r3, [r4, #24]
 800c678:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c67c:	d088      	beq.n	800c590 <HAL_TIM_Base_Init+0xe8>
 800c67e:	e7e7      	b.n	800c650 <HAL_TIM_Base_Init+0x1a8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c680:	f44f 718b 	mov.w	r1, #278	; 0x116
 800c684:	4812      	ldr	r0, [pc, #72]	; (800c6d0 <HAL_TIM_Base_Init+0x228>)
 800c686:	f007 f95d 	bl	8013944 <assert_failed>
 800c68a:	e776      	b.n	800c57a <HAL_TIM_Base_Init+0xd2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c68c:	480b      	ldr	r0, [pc, #44]	; (800c6bc <HAL_TIM_Base_Init+0x214>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c68e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c692:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c694:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 800c696:	ea43 0306 	orr.w	r3, r3, r6
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c69a:	d0b2      	beq.n	800c602 <HAL_TIM_Base_Init+0x15a>
 800c69c:	2d00      	cmp	r5, #0
 800c69e:	d1b0      	bne.n	800c602 <HAL_TIM_Base_Init+0x15a>
 800c6a0:	e7a0      	b.n	800c5e4 <HAL_TIM_Base_Init+0x13c>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c6a2:	f240 1115 	movw	r1, #277	; 0x115
 800c6a6:	480a      	ldr	r0, [pc, #40]	; (800c6d0 <HAL_TIM_Base_Init+0x228>)
 800c6a8:	f007 f94c 	bl	8013944 <assert_failed>
 800c6ac:	e759      	b.n	800c562 <HAL_TIM_Base_Init+0xba>
 800c6ae:	bf00      	nop
 800c6b0:	40010000 	.word	0x40010000
 800c6b4:	40000800 	.word	0x40000800
 800c6b8:	40000400 	.word	0x40000400
 800c6bc:	40000c00 	.word	0x40000c00
 800c6c0:	40014800 	.word	0x40014800
 800c6c4:	40010400 	.word	0x40010400
 800c6c8:	40014000 	.word	0x40014000
 800c6cc:	40014400 	.word	0x40014400
 800c6d0:	0814509c 	.word	0x0814509c

0800c6d4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	f000 80dd 	beq.w	800c894 <HAL_TIM_PWM_Init+0x1c0>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c6da:	4b80      	ldr	r3, [pc, #512]	; (800c8dc <HAL_TIM_PWM_Init+0x208>)
 800c6dc:	4980      	ldr	r1, [pc, #512]	; (800c8e0 <HAL_TIM_PWM_Init+0x20c>)
{
 800c6de:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c6e0:	6802      	ldr	r2, [r0, #0]
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	487f      	ldr	r0, [pc, #508]	; (800c8e4 <HAL_TIM_PWM_Init+0x210>)
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	bf18      	it	ne
 800c6ea:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800c6ee:	4d7e      	ldr	r5, [pc, #504]	; (800c8e8 <HAL_TIM_PWM_Init+0x214>)
 800c6f0:	bf14      	ite	ne
 800c6f2:	2301      	movne	r3, #1
 800c6f4:	2300      	moveq	r3, #0
 800c6f6:	4282      	cmp	r2, r0
 800c6f8:	bf0c      	ite	eq
 800c6fa:	2300      	moveq	r3, #0
 800c6fc:	f003 0301 	andne.w	r3, r3, #1
 800c700:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800c704:	428a      	cmp	r2, r1
 800c706:	bf0c      	ite	eq
 800c708:	2300      	moveq	r3, #0
 800c70a:	f003 0301 	andne.w	r3, r3, #1
 800c70e:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800c712:	42aa      	cmp	r2, r5
 800c714:	bf0c      	ite	eq
 800c716:	2300      	moveq	r3, #0
 800c718:	f003 0301 	andne.w	r3, r3, #1
 800c71c:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800c720:	4282      	cmp	r2, r0
 800c722:	bf0c      	ite	eq
 800c724:	2300      	moveq	r3, #0
 800c726:	f003 0301 	andne.w	r3, r3, #1
 800c72a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800c72e:	428a      	cmp	r2, r1
 800c730:	bf0c      	ite	eq
 800c732:	2300      	moveq	r3, #0
 800c734:	f003 0301 	andne.w	r3, r3, #1
 800c738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c73c:	42aa      	cmp	r2, r5
 800c73e:	bf0c      	ite	eq
 800c740:	2300      	moveq	r3, #0
 800c742:	f003 0301 	andne.w	r3, r3, #1
 800c746:	f5a5 4564 	sub.w	r5, r5, #58368	; 0xe400
 800c74a:	4282      	cmp	r2, r0
 800c74c:	bf0c      	ite	eq
 800c74e:	2300      	moveq	r3, #0
 800c750:	f003 0301 	andne.w	r3, r3, #1
 800c754:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 800c758:	428a      	cmp	r2, r1
 800c75a:	bf0c      	ite	eq
 800c75c:	2300      	moveq	r3, #0
 800c75e:	f003 0301 	andne.w	r3, r3, #1
 800c762:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 800c766:	42aa      	cmp	r2, r5
 800c768:	bf0c      	ite	eq
 800c76a:	2300      	moveq	r3, #0
 800c76c:	f003 0301 	andne.w	r3, r3, #1
 800c770:	4282      	cmp	r2, r0
 800c772:	bf0c      	ite	eq
 800c774:	2300      	moveq	r3, #0
 800c776:	f003 0301 	andne.w	r3, r3, #1
 800c77a:	428a      	cmp	r2, r1
 800c77c:	bf0c      	ite	eq
 800c77e:	2300      	moveq	r3, #0
 800c780:	f003 0301 	andne.w	r3, r3, #1
 800c784:	b11b      	cbz	r3, 800c78e <HAL_TIM_PWM_Init+0xba>
 800c786:	4b59      	ldr	r3, [pc, #356]	; (800c8ec <HAL_TIM_PWM_Init+0x218>)
 800c788:	429a      	cmp	r2, r3
 800c78a:	f040 80a0 	bne.w	800c8ce <HAL_TIM_PWM_Init+0x1fa>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c78e:	68a3      	ldr	r3, [r4, #8]
 800c790:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800c794:	f023 0210 	bic.w	r2, r3, #16
 800c798:	2920      	cmp	r1, #32
 800c79a:	bf18      	it	ne
 800c79c:	2a00      	cmpne	r2, #0
 800c79e:	d002      	beq.n	800c7a6 <HAL_TIM_PWM_Init+0xd2>
 800c7a0:	2b40      	cmp	r3, #64	; 0x40
 800c7a2:	f040 8083 	bne.w	800c8ac <HAL_TIM_PWM_Init+0x1d8>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c7a6:	6923      	ldr	r3, [r4, #16]
 800c7a8:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c7ac:	d002      	beq.n	800c7b4 <HAL_TIM_PWM_Init+0xe0>
 800c7ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7b2:	d171      	bne.n	800c898 <HAL_TIM_PWM_Init+0x1c4>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c7b4:	69a3      	ldr	r3, [r4, #24]
 800c7b6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c7ba:	d15f      	bne.n	800c87c <HAL_TIM_PWM_Init+0x1a8>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c7bc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c7c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d053      	beq.n	800c870 <HAL_TIM_PWM_Init+0x19c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7c8:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c7ca:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7cc:	4943      	ldr	r1, [pc, #268]	; (800c8dc <HAL_TIM_PWM_Init+0x208>)
 800c7ce:	4d48      	ldr	r5, [pc, #288]	; (800c8f0 <HAL_TIM_PWM_Init+0x21c>)
 800c7d0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800c7d4:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 800c7d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800c7dc:	eba2 0505 	sub.w	r5, r2, r5
  tmpcr1 = TIMx->CR1;
 800c7e0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7e2:	fab1 f181 	clz	r1, r1
 800c7e6:	fab5 f585 	clz	r5, r5
 800c7ea:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800c7ee:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800c7f2:	d018      	beq.n	800c826 <HAL_TIM_PWM_Init+0x152>
 800c7f4:	b9b9      	cbnz	r1, 800c826 <HAL_TIM_PWM_Init+0x152>
 800c7f6:	483b      	ldr	r0, [pc, #236]	; (800c8e4 <HAL_TIM_PWM_Init+0x210>)
 800c7f8:	4282      	cmp	r2, r0
 800c7fa:	d014      	beq.n	800c826 <HAL_TIM_PWM_Init+0x152>
 800c7fc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c800:	4282      	cmp	r2, r0
 800c802:	d010      	beq.n	800c826 <HAL_TIM_PWM_Init+0x152>
 800c804:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c808:	4282      	cmp	r2, r0
 800c80a:	d055      	beq.n	800c8b8 <HAL_TIM_PWM_Init+0x1e4>
 800c80c:	2d00      	cmp	r5, #0
 800c80e:	d153      	bne.n	800c8b8 <HAL_TIM_PWM_Init+0x1e4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c810:	4e38      	ldr	r6, [pc, #224]	; (800c8f4 <HAL_TIM_PWM_Init+0x220>)
 800c812:	4839      	ldr	r0, [pc, #228]	; (800c8f8 <HAL_TIM_PWM_Init+0x224>)
 800c814:	4282      	cmp	r2, r0
 800c816:	bf18      	it	ne
 800c818:	42b2      	cmpne	r2, r6
 800c81a:	d008      	beq.n	800c82e <HAL_TIM_PWM_Init+0x15a>
 800c81c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c820:	4282      	cmp	r2, r0
 800c822:	d108      	bne.n	800c836 <HAL_TIM_PWM_Init+0x162>
 800c824:	e003      	b.n	800c82e <HAL_TIM_PWM_Init+0x15a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c82a:	68a0      	ldr	r0, [r4, #8]
 800c82c:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800c82e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c832:	6920      	ldr	r0, [r4, #16]
 800c834:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c836:	69a0      	ldr	r0, [r4, #24]
 800c838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c83c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800c83e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c840:	68e3      	ldr	r3, [r4, #12]
 800c842:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c844:	6863      	ldr	r3, [r4, #4]
 800c846:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c848:	b951      	cbnz	r1, 800c860 <HAL_TIM_PWM_Init+0x18c>
 800c84a:	b94d      	cbnz	r5, 800c860 <HAL_TIM_PWM_Init+0x18c>
 800c84c:	4929      	ldr	r1, [pc, #164]	; (800c8f4 <HAL_TIM_PWM_Init+0x220>)
 800c84e:	4b2a      	ldr	r3, [pc, #168]	; (800c8f8 <HAL_TIM_PWM_Init+0x224>)
 800c850:	429a      	cmp	r2, r3
 800c852:	bf18      	it	ne
 800c854:	428a      	cmpne	r2, r1
 800c856:	d003      	beq.n	800c860 <HAL_TIM_PWM_Init+0x18c>
 800c858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d101      	bne.n	800c864 <HAL_TIM_PWM_Init+0x190>
    TIMx->RCR = Structure->RepetitionCounter;
 800c860:	6963      	ldr	r3, [r4, #20]
 800c862:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c864:	2301      	movs	r3, #1
  return HAL_OK;
 800c866:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800c868:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 800c86a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c86e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800c870:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800c874:	4620      	mov	r0, r4
 800c876:	f00f fce3 	bl	801c240 <HAL_TIM_PWM_MspInit>
 800c87a:	e7a5      	b.n	800c7c8 <HAL_TIM_PWM_Init+0xf4>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c87c:	f240 41a5 	movw	r1, #1189	; 0x4a5
 800c880:	481e      	ldr	r0, [pc, #120]	; (800c8fc <HAL_TIM_PWM_Init+0x228>)
 800c882:	f007 f85f 	bl	8013944 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c886:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c88a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d19a      	bne.n	800c7c8 <HAL_TIM_PWM_Init+0xf4>
 800c892:	e7ed      	b.n	800c870 <HAL_TIM_PWM_Init+0x19c>
    return HAL_ERROR;
 800c894:	2001      	movs	r0, #1
}
 800c896:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c898:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800c89c:	4817      	ldr	r0, [pc, #92]	; (800c8fc <HAL_TIM_PWM_Init+0x228>)
 800c89e:	f007 f851 	bl	8013944 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c8a2:	69a3      	ldr	r3, [r4, #24]
 800c8a4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c8a8:	d088      	beq.n	800c7bc <HAL_TIM_PWM_Init+0xe8>
 800c8aa:	e7e7      	b.n	800c87c <HAL_TIM_PWM_Init+0x1a8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c8ac:	f240 41a3 	movw	r1, #1187	; 0x4a3
 800c8b0:	4812      	ldr	r0, [pc, #72]	; (800c8fc <HAL_TIM_PWM_Init+0x228>)
 800c8b2:	f007 f847 	bl	8013944 <assert_failed>
 800c8b6:	e776      	b.n	800c7a6 <HAL_TIM_PWM_Init+0xd2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8b8:	480b      	ldr	r0, [pc, #44]	; (800c8e8 <HAL_TIM_PWM_Init+0x214>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c8be:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8c0:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 800c8c2:	ea43 0306 	orr.w	r3, r3, r6
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8c6:	d0b2      	beq.n	800c82e <HAL_TIM_PWM_Init+0x15a>
 800c8c8:	2d00      	cmp	r5, #0
 800c8ca:	d1b0      	bne.n	800c82e <HAL_TIM_PWM_Init+0x15a>
 800c8cc:	e7a0      	b.n	800c810 <HAL_TIM_PWM_Init+0x13c>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c8ce:	f240 41a2 	movw	r1, #1186	; 0x4a2
 800c8d2:	480a      	ldr	r0, [pc, #40]	; (800c8fc <HAL_TIM_PWM_Init+0x228>)
 800c8d4:	f007 f836 	bl	8013944 <assert_failed>
 800c8d8:	e759      	b.n	800c78e <HAL_TIM_PWM_Init+0xba>
 800c8da:	bf00      	nop
 800c8dc:	40010000 	.word	0x40010000
 800c8e0:	40000800 	.word	0x40000800
 800c8e4:	40000400 	.word	0x40000400
 800c8e8:	40000c00 	.word	0x40000c00
 800c8ec:	40014800 	.word	0x40014800
 800c8f0:	40010400 	.word	0x40010400
 800c8f4:	40014000 	.word	0x40014000
 800c8f8:	40014400 	.word	0x40014400
 800c8fc:	0814509c 	.word	0x0814509c

0800c900 <HAL_TIM_PWM_Start>:
{
 800c900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800c902:	4b66      	ldr	r3, [pc, #408]	; (800ca9c <HAL_TIM_PWM_Start+0x19c>)
{
 800c904:	4606      	mov	r6, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800c906:	6804      	ldr	r4, [r0, #0]
{
 800c908:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800c90a:	429c      	cmp	r4, r3
 800c90c:	f000 8093 	beq.w	800ca36 <HAL_TIM_PWM_Start+0x136>
 800c910:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800c914:	f000 8089 	beq.w	800ca2a <HAL_TIM_PWM_Start+0x12a>
 800c918:	4b61      	ldr	r3, [pc, #388]	; (800caa0 <HAL_TIM_PWM_Start+0x1a0>)
 800c91a:	429c      	cmp	r4, r3
 800c91c:	f000 8085 	beq.w	800ca2a <HAL_TIM_PWM_Start+0x12a>
 800c920:	4b60      	ldr	r3, [pc, #384]	; (800caa4 <HAL_TIM_PWM_Start+0x1a4>)
 800c922:	429c      	cmp	r4, r3
 800c924:	f000 8081 	beq.w	800ca2a <HAL_TIM_PWM_Start+0x12a>
 800c928:	4b5f      	ldr	r3, [pc, #380]	; (800caa8 <HAL_TIM_PWM_Start+0x1a8>)
 800c92a:	429c      	cmp	r4, r3
 800c92c:	d07d      	beq.n	800ca2a <HAL_TIM_PWM_Start+0x12a>
 800c92e:	4b5f      	ldr	r3, [pc, #380]	; (800caac <HAL_TIM_PWM_Start+0x1ac>)
 800c930:	429c      	cmp	r4, r3
 800c932:	f000 8092 	beq.w	800ca5a <HAL_TIM_PWM_Start+0x15a>
 800c936:	4b5e      	ldr	r3, [pc, #376]	; (800cab0 <HAL_TIM_PWM_Start+0x1b0>)
 800c938:	429c      	cmp	r4, r3
 800c93a:	f000 8096 	beq.w	800ca6a <HAL_TIM_PWM_Start+0x16a>
 800c93e:	4b5d      	ldr	r3, [pc, #372]	; (800cab4 <HAL_TIM_PWM_Start+0x1b4>)
 800c940:	429c      	cmp	r4, r3
 800c942:	f040 8097 	bne.w	800ca74 <HAL_TIM_PWM_Start+0x174>
 800c946:	b1d5      	cbz	r5, 800c97e <HAL_TIM_PWM_Start+0x7e>
 800c948:	f240 511c 	movw	r1, #1308	; 0x51c
 800c94c:	485a      	ldr	r0, [pc, #360]	; (800cab8 <HAL_TIM_PWM_Start+0x1b8>)
 800c94e:	f006 fff9 	bl	8013944 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c952:	6834      	ldr	r4, [r6, #0]
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800c954:	4b51      	ldr	r3, [pc, #324]	; (800ca9c <HAL_TIM_PWM_Start+0x19c>)
 800c956:	429c      	cmp	r4, r3
 800c958:	d02d      	beq.n	800c9b6 <HAL_TIM_PWM_Start+0xb6>
 800c95a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800c95e:	d02a      	beq.n	800c9b6 <HAL_TIM_PWM_Start+0xb6>
 800c960:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800c964:	429c      	cmp	r4, r3
 800c966:	d026      	beq.n	800c9b6 <HAL_TIM_PWM_Start+0xb6>
 800c968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c96c:	429c      	cmp	r4, r3
 800c96e:	d022      	beq.n	800c9b6 <HAL_TIM_PWM_Start+0xb6>
 800c970:	4b4d      	ldr	r3, [pc, #308]	; (800caa8 <HAL_TIM_PWM_Start+0x1a8>)
 800c972:	429c      	cmp	r4, r3
 800c974:	d01f      	beq.n	800c9b6 <HAL_TIM_PWM_Start+0xb6>
 800c976:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800c97a:	429c      	cmp	r4, r3
 800c97c:	d01b      	beq.n	800c9b6 <HAL_TIM_PWM_Start+0xb6>
 800c97e:	4b4c      	ldr	r3, [pc, #304]	; (800cab0 <HAL_TIM_PWM_Start+0x1b0>)
 800c980:	429c      	cmp	r4, r3
 800c982:	d018      	beq.n	800c9b6 <HAL_TIM_PWM_Start+0xb6>
 800c984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c988:	429c      	cmp	r4, r3
 800c98a:	d014      	beq.n	800c9b6 <HAL_TIM_PWM_Start+0xb6>
 800c98c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c990:	429c      	cmp	r4, r3
 800c992:	d010      	beq.n	800c9b6 <HAL_TIM_PWM_Start+0xb6>
 800c994:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800c998:	429c      	cmp	r4, r3
 800c99a:	d00c      	beq.n	800c9b6 <HAL_TIM_PWM_Start+0xb6>
 800c99c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9a0:	429c      	cmp	r4, r3
 800c9a2:	d008      	beq.n	800c9b6 <HAL_TIM_PWM_Start+0xb6>
 800c9a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9a8:	429c      	cmp	r4, r3
 800c9aa:	d004      	beq.n	800c9b6 <HAL_TIM_PWM_Start+0xb6>
 800c9ac:	f641 3154 	movw	r1, #6996	; 0x1b54
 800c9b0:	4841      	ldr	r0, [pc, #260]	; (800cab8 <HAL_TIM_PWM_Start+0x1b8>)
 800c9b2:	f006 ffc7 	bl	8013944 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800c9b6:	2d14      	cmp	r5, #20
 800c9b8:	d943      	bls.n	800ca42 <HAL_TIM_PWM_Start+0x142>
 800c9ba:	2d3c      	cmp	r5, #60	; 0x3c
 800c9bc:	d147      	bne.n	800ca4e <HAL_TIM_PWM_Start+0x14e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c9be:	2301      	movs	r3, #1
 800c9c0:	f005 051f 	and.w	r5, r5, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c9c4:	6a21      	ldr	r1, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c9c6:	fa03 f505 	lsl.w	r5, r3, r5
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c9ca:	4a34      	ldr	r2, [pc, #208]	; (800ca9c <HAL_TIM_PWM_Start+0x19c>)
 800c9cc:	4f37      	ldr	r7, [pc, #220]	; (800caac <HAL_TIM_PWM_Start+0x1ac>)
  TIMx->CCER &= ~tmp;
 800c9ce:	ea21 0105 	bic.w	r1, r1, r5
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c9d2:	483a      	ldr	r0, [pc, #232]	; (800cabc <HAL_TIM_PWM_Start+0x1bc>)
  TIMx->CCER &= ~tmp;
 800c9d4:	6221      	str	r1, [r4, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9d6:	6a23      	ldr	r3, [r4, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c9d8:	4939      	ldr	r1, [pc, #228]	; (800cac0 <HAL_TIM_PWM_Start+0x1c0>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9da:	431d      	orrs	r5, r3
 800c9dc:	6225      	str	r5, [r4, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c9de:	6833      	ldr	r3, [r6, #0]
 800c9e0:	42bb      	cmp	r3, r7
 800c9e2:	bf18      	it	ne
 800c9e4:	4293      	cmpne	r3, r2
 800c9e6:	bf0c      	ite	eq
 800c9e8:	2201      	moveq	r2, #1
 800c9ea:	2200      	movne	r2, #0
 800c9ec:	4283      	cmp	r3, r0
 800c9ee:	bf08      	it	eq
 800c9f0:	f042 0201 	orreq.w	r2, r2, #1
 800c9f4:	428b      	cmp	r3, r1
 800c9f6:	bf08      	it	eq
 800c9f8:	f042 0201 	orreq.w	r2, r2, #1
 800c9fc:	b912      	cbnz	r2, 800ca04 <HAL_TIM_PWM_Start+0x104>
 800c9fe:	4a31      	ldr	r2, [pc, #196]	; (800cac4 <HAL_TIM_PWM_Start+0x1c4>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d104      	bne.n	800ca0e <HAL_TIM_PWM_Start+0x10e>
    __HAL_TIM_MOE_ENABLE(htim);
 800ca04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca0a:	645a      	str	r2, [r3, #68]	; 0x44
 800ca0c:	6833      	ldr	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca0e:	6899      	ldr	r1, [r3, #8]
 800ca10:	4a2d      	ldr	r2, [pc, #180]	; (800cac8 <HAL_TIM_PWM_Start+0x1c8>)
 800ca12:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca14:	2a06      	cmp	r2, #6
 800ca16:	d006      	beq.n	800ca26 <HAL_TIM_PWM_Start+0x126>
 800ca18:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800ca1c:	d003      	beq.n	800ca26 <HAL_TIM_PWM_Start+0x126>
    __HAL_TIM_ENABLE(htim);
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	f042 0201 	orr.w	r2, r2, #1
 800ca24:	601a      	str	r2, [r3, #0]
}
 800ca26:	2000      	movs	r0, #0
 800ca28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ca2a:	f035 030c 	bics.w	r3, r5, #12
 800ca2e:	d18b      	bne.n	800c948 <HAL_TIM_PWM_Start+0x48>
  assert_param(IS_TIM_CHANNELS(Channel));
 800ca30:	2d14      	cmp	r5, #20
 800ca32:	d8c2      	bhi.n	800c9ba <HAL_TIM_PWM_Start+0xba>
 800ca34:	e005      	b.n	800ca42 <HAL_TIM_PWM_Start+0x142>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ca36:	2914      	cmp	r1, #20
 800ca38:	d886      	bhi.n	800c948 <HAL_TIM_PWM_Start+0x48>
 800ca3a:	4b24      	ldr	r3, [pc, #144]	; (800cacc <HAL_TIM_PWM_Start+0x1cc>)
 800ca3c:	40cb      	lsrs	r3, r1
 800ca3e:	07d9      	lsls	r1, r3, #31
 800ca40:	d582      	bpl.n	800c948 <HAL_TIM_PWM_Start+0x48>
  assert_param(IS_TIM_CHANNELS(Channel));
 800ca42:	4b22      	ldr	r3, [pc, #136]	; (800cacc <HAL_TIM_PWM_Start+0x1cc>)
 800ca44:	40eb      	lsrs	r3, r5
 800ca46:	07db      	lsls	r3, r3, #31
 800ca48:	d4b9      	bmi.n	800c9be <HAL_TIM_PWM_Start+0xbe>
 800ca4a:	2d3c      	cmp	r5, #60	; 0x3c
 800ca4c:	d0b7      	beq.n	800c9be <HAL_TIM_PWM_Start+0xbe>
 800ca4e:	f641 3155 	movw	r1, #6997	; 0x1b55
 800ca52:	4819      	ldr	r0, [pc, #100]	; (800cab8 <HAL_TIM_PWM_Start+0x1b8>)
 800ca54:	f006 ff76 	bl	8013944 <assert_failed>
 800ca58:	e7b1      	b.n	800c9be <HAL_TIM_PWM_Start+0xbe>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ca5a:	2914      	cmp	r1, #20
 800ca5c:	f63f af74 	bhi.w	800c948 <HAL_TIM_PWM_Start+0x48>
 800ca60:	4b1a      	ldr	r3, [pc, #104]	; (800cacc <HAL_TIM_PWM_Start+0x1cc>)
 800ca62:	40cb      	lsrs	r3, r1
 800ca64:	07da      	lsls	r2, r3, #31
 800ca66:	d4a6      	bmi.n	800c9b6 <HAL_TIM_PWM_Start+0xb6>
 800ca68:	e76e      	b.n	800c948 <HAL_TIM_PWM_Start+0x48>
 800ca6a:	f035 0304 	bics.w	r3, r5, #4
 800ca6e:	f47f af6b 	bne.w	800c948 <HAL_TIM_PWM_Start+0x48>
 800ca72:	e784      	b.n	800c97e <HAL_TIM_PWM_Start+0x7e>
 800ca74:	4b16      	ldr	r3, [pc, #88]	; (800cad0 <HAL_TIM_PWM_Start+0x1d0>)
 800ca76:	429c      	cmp	r4, r3
 800ca78:	f43f af65 	beq.w	800c946 <HAL_TIM_PWM_Start+0x46>
 800ca7c:	4b0f      	ldr	r3, [pc, #60]	; (800cabc <HAL_TIM_PWM_Start+0x1bc>)
 800ca7e:	429c      	cmp	r4, r3
 800ca80:	d0f3      	beq.n	800ca6a <HAL_TIM_PWM_Start+0x16a>
 800ca82:	4b0f      	ldr	r3, [pc, #60]	; (800cac0 <HAL_TIM_PWM_Start+0x1c0>)
 800ca84:	429c      	cmp	r4, r3
 800ca86:	f43f af5e 	beq.w	800c946 <HAL_TIM_PWM_Start+0x46>
 800ca8a:	4b0e      	ldr	r3, [pc, #56]	; (800cac4 <HAL_TIM_PWM_Start+0x1c4>)
 800ca8c:	429c      	cmp	r4, r3
 800ca8e:	f47f af5b 	bne.w	800c948 <HAL_TIM_PWM_Start+0x48>
 800ca92:	2900      	cmp	r1, #0
 800ca94:	f47f af58 	bne.w	800c948 <HAL_TIM_PWM_Start+0x48>
 800ca98:	461c      	mov	r4, r3
 800ca9a:	e769      	b.n	800c970 <HAL_TIM_PWM_Start+0x70>
 800ca9c:	40010000 	.word	0x40010000
 800caa0:	40000400 	.word	0x40000400
 800caa4:	40000800 	.word	0x40000800
 800caa8:	40000c00 	.word	0x40000c00
 800caac:	40010400 	.word	0x40010400
 800cab0:	40001800 	.word	0x40001800
 800cab4:	40001c00 	.word	0x40001c00
 800cab8:	0814509c 	.word	0x0814509c
 800cabc:	40014000 	.word	0x40014000
 800cac0:	40014400 	.word	0x40014400
 800cac4:	40014800 	.word	0x40014800
 800cac8:	00010007 	.word	0x00010007
 800cacc:	00111111 	.word	0x00111111
 800cad0:	40002000 	.word	0x40002000

0800cad4 <HAL_TIM_ConfigClockSource>:
{
 800cad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800cad6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cada:	2b01      	cmp	r3, #1
 800cadc:	f000 8186 	beq.w	800cdec <HAL_TIM_ConfigClockSource+0x318>
 800cae0:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800cae2:	2302      	movs	r3, #2
 800cae4:	460d      	mov	r5, r1
 800cae6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800cae8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800caec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800caf0:	680b      	ldr	r3, [r1, #0]
 800caf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caf6:	bf18      	it	ne
 800caf8:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800cafc:	bf14      	ite	ne
 800cafe:	2201      	movne	r2, #1
 800cb00:	2200      	moveq	r2, #0
 800cb02:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800cb06:	bf08      	it	eq
 800cb08:	2200      	moveq	r2, #0
 800cb0a:	b112      	cbz	r2, 800cb12 <HAL_TIM_ConfigClockSource+0x3e>
 800cb0c:	2b40      	cmp	r3, #64	; 0x40
 800cb0e:	f040 8262 	bne.w	800cfd6 <HAL_TIM_ConfigClockSource+0x502>
  tmpsmcr = htim->Instance->SMCR;
 800cb12:	6822      	ldr	r2, [r4, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb14:	4bb6      	ldr	r3, [pc, #728]	; (800cdf0 <HAL_TIM_ConfigClockSource+0x31c>)
  tmpsmcr = htim->Instance->SMCR;
 800cb16:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb18:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 800cb1a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800cb1c:	682b      	ldr	r3, [r5, #0]
 800cb1e:	2b70      	cmp	r3, #112	; 0x70
 800cb20:	f000 8178 	beq.w	800ce14 <HAL_TIM_ConfigClockSource+0x340>
 800cb24:	d85c      	bhi.n	800cbe0 <HAL_TIM_ConfigClockSource+0x10c>
 800cb26:	2b30      	cmp	r3, #48	; 0x30
 800cb28:	f000 820f 	beq.w	800cf4a <HAL_TIM_ConfigClockSource+0x476>
 800cb2c:	f240 8206 	bls.w	800cf3c <HAL_TIM_ConfigClockSource+0x468>
 800cb30:	2b50      	cmp	r3, #80	; 0x50
 800cb32:	f000 81b4 	beq.w	800ce9e <HAL_TIM_ConfigClockSource+0x3ca>
 800cb36:	2b60      	cmp	r3, #96	; 0x60
 800cb38:	f000 80c3 	beq.w	800ccc2 <HAL_TIM_ConfigClockSource+0x1ee>
 800cb3c:	2b40      	cmp	r3, #64	; 0x40
 800cb3e:	f040 80b8 	bne.w	800ccb2 <HAL_TIM_ConfigClockSource+0x1de>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800cb42:	6822      	ldr	r2, [r4, #0]
 800cb44:	4bab      	ldr	r3, [pc, #684]	; (800cdf4 <HAL_TIM_ConfigClockSource+0x320>)
 800cb46:	48ac      	ldr	r0, [pc, #688]	; (800cdf8 <HAL_TIM_ConfigClockSource+0x324>)
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	bf18      	it	ne
 800cb4c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cb50:	49aa      	ldr	r1, [pc, #680]	; (800cdfc <HAL_TIM_ConfigClockSource+0x328>)
 800cb52:	bf14      	ite	ne
 800cb54:	2301      	movne	r3, #1
 800cb56:	2300      	moveq	r3, #0
 800cb58:	4282      	cmp	r2, r0
 800cb5a:	bf0c      	ite	eq
 800cb5c:	2300      	moveq	r3, #0
 800cb5e:	f003 0301 	andne.w	r3, r3, #1
 800cb62:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800cb66:	428a      	cmp	r2, r1
 800cb68:	bf0c      	ite	eq
 800cb6a:	2300      	moveq	r3, #0
 800cb6c:	f003 0301 	andne.w	r3, r3, #1
 800cb70:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800cb74:	4282      	cmp	r2, r0
 800cb76:	bf0c      	ite	eq
 800cb78:	2300      	moveq	r3, #0
 800cb7a:	f003 0301 	andne.w	r3, r3, #1
 800cb7e:	428a      	cmp	r2, r1
 800cb80:	bf0c      	ite	eq
 800cb82:	2300      	moveq	r3, #0
 800cb84:	f003 0301 	andne.w	r3, r3, #1
 800cb88:	b11b      	cbz	r3, 800cb92 <HAL_TIM_ConfigClockSource+0xbe>
 800cb8a:	4b9d      	ldr	r3, [pc, #628]	; (800ce00 <HAL_TIM_ConfigClockSource+0x32c>)
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	f040 825a 	bne.w	800d046 <HAL_TIM_ConfigClockSource+0x572>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cb92:	686b      	ldr	r3, [r5, #4]
 800cb94:	2b0a      	cmp	r3, #10
 800cb96:	bf18      	it	ne
 800cb98:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800cb9c:	d003      	beq.n	800cba6 <HAL_TIM_ConfigClockSource+0xd2>
 800cb9e:	f033 0302 	bics.w	r3, r3, #2
 800cba2:	f040 821e 	bne.w	800cfe2 <HAL_TIM_ConfigClockSource+0x50e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cba6:	68ee      	ldr	r6, [r5, #12]
 800cba8:	2e0f      	cmp	r6, #15
 800cbaa:	f200 826e 	bhi.w	800d08a <HAL_TIM_ConfigClockSource+0x5b6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cbae:	6823      	ldr	r3, [r4, #0]
 800cbb0:	6868      	ldr	r0, [r5, #4]
  tmpccer = TIMx->CCER;
 800cbb2:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbb4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbb6:	f022 020a 	bic.w	r2, r2, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbba:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800cbbe:	4310      	orrs	r0, r2
  tmpsmcr &= ~TIM_SMCR_TS;
 800cbc0:	4a90      	ldr	r2, [pc, #576]	; (800ce04 <HAL_TIM_ConfigClockSource+0x330>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbc2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbc4:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbc6:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbca:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800cbce:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbd0:	6218      	str	r0, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cbd2:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800cbd4:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cbd6:	400a      	ands	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cbd8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800cbdc:	609a      	str	r2, [r3, #8]
 800cbde:	e068      	b.n	800ccb2 <HAL_TIM_ConfigClockSource+0x1de>
  switch (sClockSourceConfig->ClockSource)
 800cbe0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cbe4:	f000 81b1 	beq.w	800cf4a <HAL_TIM_ConfigClockSource+0x476>
 800cbe8:	f200 81de 	bhi.w	800cfa8 <HAL_TIM_ConfigClockSource+0x4d4>
 800cbec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbf0:	f000 80b7 	beq.w	800cd62 <HAL_TIM_ConfigClockSource+0x28e>
 800cbf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbf8:	f000 81a7 	beq.w	800cf4a <HAL_TIM_ConfigClockSource+0x476>
 800cbfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc00:	d157      	bne.n	800ccb2 <HAL_TIM_ConfigClockSource+0x1de>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cc02:	6822      	ldr	r2, [r4, #0]
 800cc04:	4b7b      	ldr	r3, [pc, #492]	; (800cdf4 <HAL_TIM_ConfigClockSource+0x320>)
 800cc06:	487c      	ldr	r0, [pc, #496]	; (800cdf8 <HAL_TIM_ConfigClockSource+0x324>)
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	bf18      	it	ne
 800cc0c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cc10:	497a      	ldr	r1, [pc, #488]	; (800cdfc <HAL_TIM_ConfigClockSource+0x328>)
 800cc12:	4d7d      	ldr	r5, [pc, #500]	; (800ce08 <HAL_TIM_ConfigClockSource+0x334>)
 800cc14:	bf14      	ite	ne
 800cc16:	2301      	movne	r3, #1
 800cc18:	2300      	moveq	r3, #0
 800cc1a:	4282      	cmp	r2, r0
 800cc1c:	bf0c      	ite	eq
 800cc1e:	2300      	moveq	r3, #0
 800cc20:	f003 0301 	andne.w	r3, r3, #1
 800cc24:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800cc28:	428a      	cmp	r2, r1
 800cc2a:	bf0c      	ite	eq
 800cc2c:	2300      	moveq	r3, #0
 800cc2e:	f003 0301 	andne.w	r3, r3, #1
 800cc32:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800cc36:	42aa      	cmp	r2, r5
 800cc38:	bf0c      	ite	eq
 800cc3a:	2300      	moveq	r3, #0
 800cc3c:	f003 0301 	andne.w	r3, r3, #1
 800cc40:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800cc44:	4282      	cmp	r2, r0
 800cc46:	bf0c      	ite	eq
 800cc48:	2300      	moveq	r3, #0
 800cc4a:	f003 0301 	andne.w	r3, r3, #1
 800cc4e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800cc52:	428a      	cmp	r2, r1
 800cc54:	bf0c      	ite	eq
 800cc56:	2300      	moveq	r3, #0
 800cc58:	f003 0301 	andne.w	r3, r3, #1
 800cc5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc60:	42aa      	cmp	r2, r5
 800cc62:	bf0c      	ite	eq
 800cc64:	2300      	moveq	r3, #0
 800cc66:	f003 0301 	andne.w	r3, r3, #1
 800cc6a:	f5a5 4564 	sub.w	r5, r5, #58368	; 0xe400
 800cc6e:	4282      	cmp	r2, r0
 800cc70:	bf0c      	ite	eq
 800cc72:	2300      	moveq	r3, #0
 800cc74:	f003 0301 	andne.w	r3, r3, #1
 800cc78:	f500 3094 	add.w	r0, r0, #75776	; 0x12800
 800cc7c:	428a      	cmp	r2, r1
 800cc7e:	bf0c      	ite	eq
 800cc80:	2300      	moveq	r3, #0
 800cc82:	f003 0301 	andne.w	r3, r3, #1
 800cc86:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 800cc8a:	42aa      	cmp	r2, r5
 800cc8c:	bf0c      	ite	eq
 800cc8e:	2300      	moveq	r3, #0
 800cc90:	f003 0301 	andne.w	r3, r3, #1
 800cc94:	4282      	cmp	r2, r0
 800cc96:	bf0c      	ite	eq
 800cc98:	2300      	moveq	r3, #0
 800cc9a:	f003 0301 	andne.w	r3, r3, #1
 800cc9e:	428a      	cmp	r2, r1
 800cca0:	bf0c      	ite	eq
 800cca2:	2300      	moveq	r3, #0
 800cca4:	f003 0301 	andne.w	r3, r3, #1
 800cca8:	b11b      	cbz	r3, 800ccb2 <HAL_TIM_ConfigClockSource+0x1de>
 800ccaa:	4b58      	ldr	r3, [pc, #352]	; (800ce0c <HAL_TIM_ConfigClockSource+0x338>)
 800ccac:	429a      	cmp	r2, r3
 800ccae:	f040 81ff 	bne.w	800d0b0 <HAL_TIM_ConfigClockSource+0x5dc>
  __HAL_UNLOCK(htim);
 800ccb2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800ccb4:	2201      	movs	r2, #1
  return HAL_OK;
 800ccb6:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800ccb8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ccbc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ccc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ccc2:	6822      	ldr	r2, [r4, #0]
 800ccc4:	4b4b      	ldr	r3, [pc, #300]	; (800cdf4 <HAL_TIM_ConfigClockSource+0x320>)
 800ccc6:	484c      	ldr	r0, [pc, #304]	; (800cdf8 <HAL_TIM_ConfigClockSource+0x324>)
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	bf18      	it	ne
 800cccc:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ccd0:	494a      	ldr	r1, [pc, #296]	; (800cdfc <HAL_TIM_ConfigClockSource+0x328>)
 800ccd2:	bf14      	ite	ne
 800ccd4:	2301      	movne	r3, #1
 800ccd6:	2300      	moveq	r3, #0
 800ccd8:	4282      	cmp	r2, r0
 800ccda:	bf0c      	ite	eq
 800ccdc:	2300      	moveq	r3, #0
 800ccde:	f003 0301 	andne.w	r3, r3, #1
 800cce2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800cce6:	428a      	cmp	r2, r1
 800cce8:	bf0c      	ite	eq
 800ccea:	2300      	moveq	r3, #0
 800ccec:	f003 0301 	andne.w	r3, r3, #1
 800ccf0:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800ccf4:	4282      	cmp	r2, r0
 800ccf6:	bf0c      	ite	eq
 800ccf8:	2300      	moveq	r3, #0
 800ccfa:	f003 0301 	andne.w	r3, r3, #1
 800ccfe:	428a      	cmp	r2, r1
 800cd00:	bf0c      	ite	eq
 800cd02:	2300      	moveq	r3, #0
 800cd04:	f003 0301 	andne.w	r3, r3, #1
 800cd08:	b11b      	cbz	r3, 800cd12 <HAL_TIM_ConfigClockSource+0x23e>
 800cd0a:	4b3d      	ldr	r3, [pc, #244]	; (800ce00 <HAL_TIM_ConfigClockSource+0x32c>)
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	f040 8194 	bne.w	800d03a <HAL_TIM_ConfigClockSource+0x566>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cd12:	686b      	ldr	r3, [r5, #4]
 800cd14:	2b0a      	cmp	r3, #10
 800cd16:	bf18      	it	ne
 800cd18:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800cd1c:	d003      	beq.n	800cd26 <HAL_TIM_ConfigClockSource+0x252>
 800cd1e:	f033 0302 	bics.w	r3, r3, #2
 800cd22:	f040 8164 	bne.w	800cfee <HAL_TIM_ConfigClockSource+0x51a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cd26:	68ee      	ldr	r6, [r5, #12]
 800cd28:	2e0f      	cmp	r6, #15
 800cd2a:	f200 81a7 	bhi.w	800d07c <HAL_TIM_ConfigClockSource+0x5a8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	686f      	ldr	r7, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd32:	6a1d      	ldr	r5, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd34:	4a33      	ldr	r2, [pc, #204]	; (800ce04 <HAL_TIM_ConfigClockSource+0x330>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd36:	f025 0510 	bic.w	r5, r5, #16
 800cd3a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd3c:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 800cd3e:	6a19      	ldr	r1, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd40:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd44:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cd48:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800cd4c:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800cd50:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd52:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cd54:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800cd56:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd58:	400a      	ands	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cd5a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800cd5e:	609a      	str	r2, [r3, #8]
 800cd60:	e7a7      	b.n	800ccb2 <HAL_TIM_ConfigClockSource+0x1de>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800cd62:	6822      	ldr	r2, [r4, #0]
 800cd64:	4b23      	ldr	r3, [pc, #140]	; (800cdf4 <HAL_TIM_ConfigClockSource+0x320>)
 800cd66:	4924      	ldr	r1, [pc, #144]	; (800cdf8 <HAL_TIM_ConfigClockSource+0x324>)
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	bf18      	it	ne
 800cd6c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cd70:	4822      	ldr	r0, [pc, #136]	; (800cdfc <HAL_TIM_ConfigClockSource+0x328>)
 800cd72:	bf14      	ite	ne
 800cd74:	2301      	movne	r3, #1
 800cd76:	2300      	moveq	r3, #0
 800cd78:	428a      	cmp	r2, r1
 800cd7a:	bf0c      	ite	eq
 800cd7c:	2300      	moveq	r3, #0
 800cd7e:	f003 0301 	andne.w	r3, r3, #1
 800cd82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd86:	4282      	cmp	r2, r0
 800cd88:	bf0c      	ite	eq
 800cd8a:	2300      	moveq	r3, #0
 800cd8c:	f003 0301 	andne.w	r3, r3, #1
 800cd90:	428a      	cmp	r2, r1
 800cd92:	bf0c      	ite	eq
 800cd94:	2300      	moveq	r3, #0
 800cd96:	f003 0301 	andne.w	r3, r3, #1
 800cd9a:	b11b      	cbz	r3, 800cda4 <HAL_TIM_ConfigClockSource+0x2d0>
 800cd9c:	4b1c      	ldr	r3, [pc, #112]	; (800ce10 <HAL_TIM_ConfigClockSource+0x33c>)
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	f040 810d 	bne.w	800cfbe <HAL_TIM_ConfigClockSource+0x4ea>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800cda4:	68ab      	ldr	r3, [r5, #8]
 800cda6:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800cdaa:	f040 8175 	bne.w	800d098 <HAL_TIM_ConfigClockSource+0x5c4>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cdae:	686b      	ldr	r3, [r5, #4]
 800cdb0:	2b0a      	cmp	r3, #10
 800cdb2:	bf18      	it	ne
 800cdb4:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800cdb8:	d003      	beq.n	800cdc2 <HAL_TIM_ConfigClockSource+0x2ee>
 800cdba:	f033 0302 	bics.w	r3, r3, #2
 800cdbe:	f040 8122 	bne.w	800d006 <HAL_TIM_ConfigClockSource+0x532>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cdc2:	68e9      	ldr	r1, [r5, #12]
 800cdc4:	290f      	cmp	r1, #15
 800cdc6:	f200 8144 	bhi.w	800d052 <HAL_TIM_ConfigClockSource+0x57e>
      TIM_ETR_SetConfig(htim->Instance,
 800cdca:	6820      	ldr	r0, [r4, #0]
 800cdcc:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800cdce:	6882      	ldr	r2, [r0, #8]
 800cdd0:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdd2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800cdd6:	432b      	orrs	r3, r5
 800cdd8:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cdda:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  TIMx->SMCR = tmpsmcr;
 800cdde:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cde0:	6822      	ldr	r2, [r4, #0]
 800cde2:	6893      	ldr	r3, [r2, #8]
 800cde4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cde8:	6093      	str	r3, [r2, #8]
      break;
 800cdea:	e762      	b.n	800ccb2 <HAL_TIM_ConfigClockSource+0x1de>
  __HAL_LOCK(htim);
 800cdec:	2002      	movs	r0, #2
}
 800cdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdf0:	ffce0088 	.word	0xffce0088
 800cdf4:	40010000 	.word	0x40010000
 800cdf8:	40000400 	.word	0x40000400
 800cdfc:	40000800 	.word	0x40000800
 800ce00:	40014000 	.word	0x40014000
 800ce04:	ffcfff8f 	.word	0xffcfff8f
 800ce08:	40000c00 	.word	0x40000c00
 800ce0c:	40014800 	.word	0x40014800
 800ce10:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800ce14:	6822      	ldr	r2, [r4, #0]
 800ce16:	4ba9      	ldr	r3, [pc, #676]	; (800d0bc <HAL_TIM_ConfigClockSource+0x5e8>)
 800ce18:	49a9      	ldr	r1, [pc, #676]	; (800d0c0 <HAL_TIM_ConfigClockSource+0x5ec>)
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	bf18      	it	ne
 800ce1e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ce22:	48a8      	ldr	r0, [pc, #672]	; (800d0c4 <HAL_TIM_ConfigClockSource+0x5f0>)
 800ce24:	bf14      	ite	ne
 800ce26:	2301      	movne	r3, #1
 800ce28:	2300      	moveq	r3, #0
 800ce2a:	428a      	cmp	r2, r1
 800ce2c:	bf0c      	ite	eq
 800ce2e:	2300      	moveq	r3, #0
 800ce30:	f003 0301 	andne.w	r3, r3, #1
 800ce34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce38:	4282      	cmp	r2, r0
 800ce3a:	bf0c      	ite	eq
 800ce3c:	2300      	moveq	r3, #0
 800ce3e:	f003 0301 	andne.w	r3, r3, #1
 800ce42:	428a      	cmp	r2, r1
 800ce44:	bf0c      	ite	eq
 800ce46:	2300      	moveq	r3, #0
 800ce48:	f003 0301 	andne.w	r3, r3, #1
 800ce4c:	b11b      	cbz	r3, 800ce56 <HAL_TIM_ConfigClockSource+0x382>
 800ce4e:	4b9e      	ldr	r3, [pc, #632]	; (800d0c8 <HAL_TIM_ConfigClockSource+0x5f4>)
 800ce50:	429a      	cmp	r2, r3
 800ce52:	f040 80ba 	bne.w	800cfca <HAL_TIM_ConfigClockSource+0x4f6>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800ce56:	68ab      	ldr	r3, [r5, #8]
 800ce58:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800ce5c:	f040 8122 	bne.w	800d0a4 <HAL_TIM_ConfigClockSource+0x5d0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ce60:	686b      	ldr	r3, [r5, #4]
 800ce62:	2b0a      	cmp	r3, #10
 800ce64:	bf18      	it	ne
 800ce66:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800ce6a:	d003      	beq.n	800ce74 <HAL_TIM_ConfigClockSource+0x3a0>
 800ce6c:	f033 0302 	bics.w	r3, r3, #2
 800ce70:	f040 80c3 	bne.w	800cffa <HAL_TIM_ConfigClockSource+0x526>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ce74:	68e9      	ldr	r1, [r5, #12]
 800ce76:	290f      	cmp	r1, #15
 800ce78:	f200 80f9 	bhi.w	800d06e <HAL_TIM_ConfigClockSource+0x59a>
      TIM_ETR_SetConfig(htim->Instance,
 800ce7c:	6820      	ldr	r0, [r4, #0]
 800ce7e:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800ce80:	6882      	ldr	r2, [r0, #8]
 800ce82:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce84:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800ce88:	432b      	orrs	r3, r5
 800ce8a:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce8c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  TIMx->SMCR = tmpsmcr;
 800ce90:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 800ce92:	6822      	ldr	r2, [r4, #0]
 800ce94:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800ce9a:	6093      	str	r3, [r2, #8]
      break;
 800ce9c:	e709      	b.n	800ccb2 <HAL_TIM_ConfigClockSource+0x1de>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ce9e:	6822      	ldr	r2, [r4, #0]
 800cea0:	4b86      	ldr	r3, [pc, #536]	; (800d0bc <HAL_TIM_ConfigClockSource+0x5e8>)
 800cea2:	4887      	ldr	r0, [pc, #540]	; (800d0c0 <HAL_TIM_ConfigClockSource+0x5ec>)
 800cea4:	429a      	cmp	r2, r3
 800cea6:	bf18      	it	ne
 800cea8:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ceac:	4985      	ldr	r1, [pc, #532]	; (800d0c4 <HAL_TIM_ConfigClockSource+0x5f0>)
 800ceae:	bf14      	ite	ne
 800ceb0:	2301      	movne	r3, #1
 800ceb2:	2300      	moveq	r3, #0
 800ceb4:	4282      	cmp	r2, r0
 800ceb6:	bf0c      	ite	eq
 800ceb8:	2300      	moveq	r3, #0
 800ceba:	f003 0301 	andne.w	r3, r3, #1
 800cebe:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800cec2:	428a      	cmp	r2, r1
 800cec4:	bf0c      	ite	eq
 800cec6:	2300      	moveq	r3, #0
 800cec8:	f003 0301 	andne.w	r3, r3, #1
 800cecc:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800ced0:	4282      	cmp	r2, r0
 800ced2:	bf0c      	ite	eq
 800ced4:	2300      	moveq	r3, #0
 800ced6:	f003 0301 	andne.w	r3, r3, #1
 800ceda:	428a      	cmp	r2, r1
 800cedc:	bf0c      	ite	eq
 800cede:	2300      	moveq	r3, #0
 800cee0:	f003 0301 	andne.w	r3, r3, #1
 800cee4:	b11b      	cbz	r3, 800ceee <HAL_TIM_ConfigClockSource+0x41a>
 800cee6:	4b79      	ldr	r3, [pc, #484]	; (800d0cc <HAL_TIM_ConfigClockSource+0x5f8>)
 800cee8:	429a      	cmp	r2, r3
 800ceea:	f040 8098 	bne.w	800d01e <HAL_TIM_ConfigClockSource+0x54a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ceee:	686b      	ldr	r3, [r5, #4]
 800cef0:	2b0a      	cmp	r3, #10
 800cef2:	bf18      	it	ne
 800cef4:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800cef8:	d003      	beq.n	800cf02 <HAL_TIM_ConfigClockSource+0x42e>
 800cefa:	f033 0302 	bics.w	r3, r3, #2
 800cefe:	f040 8088 	bne.w	800d012 <HAL_TIM_ConfigClockSource+0x53e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cf02:	68ee      	ldr	r6, [r5, #12]
 800cf04:	2e0f      	cmp	r6, #15
 800cf06:	f200 80ab 	bhi.w	800d060 <HAL_TIM_ConfigClockSource+0x58c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf0a:	6823      	ldr	r3, [r4, #0]
 800cf0c:	6868      	ldr	r0, [r5, #4]
  tmpccer = TIMx->CCER;
 800cf0e:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf10:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf12:	f022 020a 	bic.w	r2, r2, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf16:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800cf1a:	4310      	orrs	r0, r2
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf1c:	4a6c      	ldr	r2, [pc, #432]	; (800d0d0 <HAL_TIM_ConfigClockSource+0x5fc>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf1e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf20:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf22:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf26:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800cf2a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf2c:	6218      	str	r0, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cf2e:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800cf30:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf32:	400a      	ands	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf34:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800cf38:	609a      	str	r2, [r3, #8]
 800cf3a:	e6ba      	b.n	800ccb2 <HAL_TIM_ConfigClockSource+0x1de>
  switch (sClockSourceConfig->ClockSource)
 800cf3c:	2b10      	cmp	r3, #16
 800cf3e:	d004      	beq.n	800cf4a <HAL_TIM_ConfigClockSource+0x476>
 800cf40:	2b20      	cmp	r3, #32
 800cf42:	d002      	beq.n	800cf4a <HAL_TIM_ConfigClockSource+0x476>
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f47f aeb4 	bne.w	800ccb2 <HAL_TIM_ConfigClockSource+0x1de>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800cf4a:	6821      	ldr	r1, [r4, #0]
 800cf4c:	4a5b      	ldr	r2, [pc, #364]	; (800d0bc <HAL_TIM_ConfigClockSource+0x5e8>)
 800cf4e:	4e5c      	ldr	r6, [pc, #368]	; (800d0c0 <HAL_TIM_ConfigClockSource+0x5ec>)
 800cf50:	4291      	cmp	r1, r2
 800cf52:	bf18      	it	ne
 800cf54:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 800cf58:	485a      	ldr	r0, [pc, #360]	; (800d0c4 <HAL_TIM_ConfigClockSource+0x5f0>)
 800cf5a:	bf14      	ite	ne
 800cf5c:	2201      	movne	r2, #1
 800cf5e:	2200      	moveq	r2, #0
 800cf60:	42b1      	cmp	r1, r6
 800cf62:	bf0c      	ite	eq
 800cf64:	2200      	moveq	r2, #0
 800cf66:	f002 0201 	andne.w	r2, r2, #1
 800cf6a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800cf6e:	4281      	cmp	r1, r0
 800cf70:	bf0c      	ite	eq
 800cf72:	2200      	moveq	r2, #0
 800cf74:	f002 0201 	andne.w	r2, r2, #1
 800cf78:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800cf7c:	42b1      	cmp	r1, r6
 800cf7e:	bf0c      	ite	eq
 800cf80:	2200      	moveq	r2, #0
 800cf82:	f002 0201 	andne.w	r2, r2, #1
 800cf86:	4281      	cmp	r1, r0
 800cf88:	bf0c      	ite	eq
 800cf8a:	2200      	moveq	r2, #0
 800cf8c:	f002 0201 	andne.w	r2, r2, #1
 800cf90:	b112      	cbz	r2, 800cf98 <HAL_TIM_ConfigClockSource+0x4c4>
 800cf92:	4a4e      	ldr	r2, [pc, #312]	; (800d0cc <HAL_TIM_ConfigClockSource+0x5f8>)
 800cf94:	4291      	cmp	r1, r2
 800cf96:	d148      	bne.n	800d02a <HAL_TIM_ConfigClockSource+0x556>
  tmpsmcr = TIMx->SMCR;
 800cf98:	6888      	ldr	r0, [r1, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf9a:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf9e:	4a4c      	ldr	r2, [pc, #304]	; (800d0d0 <HAL_TIM_ConfigClockSource+0x5fc>)
 800cfa0:	4002      	ands	r2, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cfa2:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800cfa4:	608b      	str	r3, [r1, #8]
 800cfa6:	e684      	b.n	800ccb2 <HAL_TIM_ConfigClockSource+0x1de>
  switch (sClockSourceConfig->ClockSource)
 800cfa8:	4a4a      	ldr	r2, [pc, #296]	; (800d0d4 <HAL_TIM_ConfigClockSource+0x600>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d0cd      	beq.n	800cf4a <HAL_TIM_ConfigClockSource+0x476>
 800cfae:	3210      	adds	r2, #16
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d0ca      	beq.n	800cf4a <HAL_TIM_ConfigClockSource+0x476>
 800cfb4:	3a20      	subs	r2, #32
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	f47f ae7b 	bne.w	800ccb2 <HAL_TIM_ConfigClockSource+0x1de>
 800cfbc:	e7c5      	b.n	800cf4a <HAL_TIM_ConfigClockSource+0x476>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800cfbe:	f241 21ab 	movw	r1, #4779	; 0x12ab
 800cfc2:	4845      	ldr	r0, [pc, #276]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800cfc4:	f006 fcbe 	bl	8013944 <assert_failed>
 800cfc8:	e6ec      	b.n	800cda4 <HAL_TIM_ConfigClockSource+0x2d0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800cfca:	f241 2193 	movw	r1, #4755	; 0x1293
 800cfce:	4842      	ldr	r0, [pc, #264]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800cfd0:	f006 fcb8 	bl	8013944 <assert_failed>
 800cfd4:	e73f      	b.n	800ce56 <HAL_TIM_ConfigClockSource+0x382>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800cfd6:	f44f 5194 	mov.w	r1, #4736	; 0x1280
 800cfda:	483f      	ldr	r0, [pc, #252]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800cfdc:	f006 fcb2 	bl	8013944 <assert_failed>
 800cfe0:	e597      	b.n	800cb12 <HAL_TIM_ConfigClockSource+0x3e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cfe2:	f241 21e2 	movw	r1, #4834	; 0x12e2
 800cfe6:	483c      	ldr	r0, [pc, #240]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800cfe8:	f006 fcac 	bl	8013944 <assert_failed>
 800cfec:	e5db      	b.n	800cba6 <HAL_TIM_ConfigClockSource+0xd2>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cfee:	f241 21d2 	movw	r1, #4818	; 0x12d2
 800cff2:	4839      	ldr	r0, [pc, #228]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800cff4:	f006 fca6 	bl	8013944 <assert_failed>
 800cff8:	e695      	b.n	800cd26 <HAL_TIM_ConfigClockSource+0x252>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cffa:	f241 2197 	movw	r1, #4759	; 0x1297
 800cffe:	4836      	ldr	r0, [pc, #216]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d000:	f006 fca0 	bl	8013944 <assert_failed>
 800d004:	e736      	b.n	800ce74 <HAL_TIM_ConfigClockSource+0x3a0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d006:	f241 21af 	movw	r1, #4783	; 0x12af
 800d00a:	4833      	ldr	r0, [pc, #204]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d00c:	f006 fc9a 	bl	8013944 <assert_failed>
 800d010:	e6d7      	b.n	800cdc2 <HAL_TIM_ConfigClockSource+0x2ee>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d012:	f241 21c2 	movw	r1, #4802	; 0x12c2
 800d016:	4830      	ldr	r0, [pc, #192]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d018:	f006 fc94 	bl	8013944 <assert_failed>
 800d01c:	e771      	b.n	800cf02 <HAL_TIM_ConfigClockSource+0x42e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d01e:	f241 21bf 	movw	r1, #4799	; 0x12bf
 800d022:	482d      	ldr	r0, [pc, #180]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d024:	f006 fc8e 	bl	8013944 <assert_failed>
 800d028:	e761      	b.n	800ceee <HAL_TIM_ConfigClockSource+0x41a>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800d02a:	f241 21f7 	movw	r1, #4855	; 0x12f7
 800d02e:	482a      	ldr	r0, [pc, #168]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d030:	f006 fc88 	bl	8013944 <assert_failed>
 800d034:	682b      	ldr	r3, [r5, #0]
 800d036:	6821      	ldr	r1, [r4, #0]
 800d038:	e7ae      	b.n	800cf98 <HAL_TIM_ConfigClockSource+0x4c4>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d03a:	f241 21cf 	movw	r1, #4815	; 0x12cf
 800d03e:	4826      	ldr	r0, [pc, #152]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d040:	f006 fc80 	bl	8013944 <assert_failed>
 800d044:	e665      	b.n	800cd12 <HAL_TIM_ConfigClockSource+0x23e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d046:	f241 21df 	movw	r1, #4831	; 0x12df
 800d04a:	4823      	ldr	r0, [pc, #140]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d04c:	f006 fc7a 	bl	8013944 <assert_failed>
 800d050:	e59f      	b.n	800cb92 <HAL_TIM_ConfigClockSource+0xbe>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d052:	f241 21b0 	movw	r1, #4784	; 0x12b0
 800d056:	4820      	ldr	r0, [pc, #128]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d058:	f006 fc74 	bl	8013944 <assert_failed>
 800d05c:	68e9      	ldr	r1, [r5, #12]
 800d05e:	e6b4      	b.n	800cdca <HAL_TIM_ConfigClockSource+0x2f6>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d060:	f241 21c3 	movw	r1, #4803	; 0x12c3
 800d064:	481c      	ldr	r0, [pc, #112]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d066:	f006 fc6d 	bl	8013944 <assert_failed>
 800d06a:	68ee      	ldr	r6, [r5, #12]
 800d06c:	e74d      	b.n	800cf0a <HAL_TIM_ConfigClockSource+0x436>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d06e:	f241 2198 	movw	r1, #4760	; 0x1298
 800d072:	4819      	ldr	r0, [pc, #100]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d074:	f006 fc66 	bl	8013944 <assert_failed>
 800d078:	68e9      	ldr	r1, [r5, #12]
 800d07a:	e6ff      	b.n	800ce7c <HAL_TIM_ConfigClockSource+0x3a8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d07c:	f241 21d3 	movw	r1, #4819	; 0x12d3
 800d080:	4815      	ldr	r0, [pc, #84]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d082:	f006 fc5f 	bl	8013944 <assert_failed>
 800d086:	68ee      	ldr	r6, [r5, #12]
 800d088:	e651      	b.n	800cd2e <HAL_TIM_ConfigClockSource+0x25a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d08a:	f241 21e3 	movw	r1, #4835	; 0x12e3
 800d08e:	4812      	ldr	r0, [pc, #72]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d090:	f006 fc58 	bl	8013944 <assert_failed>
 800d094:	68ee      	ldr	r6, [r5, #12]
 800d096:	e58a      	b.n	800cbae <HAL_TIM_ConfigClockSource+0xda>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d098:	f241 21ae 	movw	r1, #4782	; 0x12ae
 800d09c:	480e      	ldr	r0, [pc, #56]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d09e:	f006 fc51 	bl	8013944 <assert_failed>
 800d0a2:	e684      	b.n	800cdae <HAL_TIM_ConfigClockSource+0x2da>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d0a4:	f241 2196 	movw	r1, #4758	; 0x1296
 800d0a8:	480b      	ldr	r0, [pc, #44]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d0aa:	f006 fc4b 	bl	8013944 <assert_failed>
 800d0ae:	e6d7      	b.n	800ce60 <HAL_TIM_ConfigClockSource+0x38c>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d0b0:	f241 218c 	movw	r1, #4748	; 0x128c
 800d0b4:	4808      	ldr	r0, [pc, #32]	; (800d0d8 <HAL_TIM_ConfigClockSource+0x604>)
 800d0b6:	f006 fc45 	bl	8013944 <assert_failed>
 800d0ba:	e5fa      	b.n	800ccb2 <HAL_TIM_ConfigClockSource+0x1de>
 800d0bc:	40010000 	.word	0x40010000
 800d0c0:	40000400 	.word	0x40000400
 800d0c4:	40000800 	.word	0x40000800
 800d0c8:	40010400 	.word	0x40010400
 800d0cc:	40014000 	.word	0x40014000
 800d0d0:	ffcfff8f 	.word	0xffcfff8f
 800d0d4:	00100030 	.word	0x00100030
 800d0d8:	0814509c 	.word	0x0814509c

0800d0dc <TIM_OC2_SetConfig>:
{
 800d0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0e0:	6a02      	ldr	r2, [r0, #32]
{
 800d0e2:	460e      	mov	r6, r1
 800d0e4:	4604      	mov	r4, r0
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d0e6:	4b31      	ldr	r3, [pc, #196]	; (800d1ac <TIM_OC2_SetConfig+0xd0>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0e8:	f022 0210 	bic.w	r2, r2, #16
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d0ec:	4930      	ldr	r1, [pc, #192]	; (800d1b0 <TIM_OC2_SetConfig+0xd4>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0ee:	6202      	str	r2, [r0, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d0f0:	428c      	cmp	r4, r1
  tmpccer = TIMx->CCER;
 800d0f2:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800d0f4:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800d0f6:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800d0f8:	f025 0520 	bic.w	r5, r5, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d0fc:	68b0      	ldr	r0, [r6, #8]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d0fe:	ea03 0302 	and.w	r3, r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d102:	6832      	ldr	r2, [r6, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d104:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d108:	ea43 2802 	orr.w	r8, r3, r2, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d10c:	d023      	beq.n	800d156 <TIM_OC2_SetConfig+0x7a>
 800d10e:	4b29      	ldr	r3, [pc, #164]	; (800d1b4 <TIM_OC2_SetConfig+0xd8>)
 800d110:	429c      	cmp	r4, r3
 800d112:	d020      	beq.n	800d156 <TIM_OC2_SetConfig+0x7a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d114:	4a28      	ldr	r2, [pc, #160]	; (800d1b8 <TIM_OC2_SetConfig+0xdc>)
 800d116:	4b29      	ldr	r3, [pc, #164]	; (800d1bc <TIM_OC2_SetConfig+0xe0>)
 800d118:	429c      	cmp	r4, r3
 800d11a:	bf18      	it	ne
 800d11c:	4294      	cmpne	r4, r2
 800d11e:	d003      	beq.n	800d128 <TIM_OC2_SetConfig+0x4c>
 800d120:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d124:	429c      	cmp	r4, r3
 800d126:	d10e      	bne.n	800d146 <TIM_OC2_SetConfig+0x6a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d128:	69b3      	ldr	r3, [r6, #24]
 800d12a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800d12e:	d120      	bne.n	800d172 <TIM_OC2_SetConfig+0x96>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d130:	6971      	ldr	r1, [r6, #20]
 800d132:	f431 7380 	bics.w	r3, r1, #256	; 0x100
 800d136:	d125      	bne.n	800d184 <TIM_OC2_SetConfig+0xa8>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d138:	f427 6240 	bic.w	r2, r7, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d13c:	69b3      	ldr	r3, [r6, #24]
 800d13e:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800d142:	ea42 0781 	orr.w	r7, r2, r1, lsl #2
  TIMx->CR2 = tmpcr2;
 800d146:	6067      	str	r7, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800d148:	f8c4 8018 	str.w	r8, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800d14c:	6873      	ldr	r3, [r6, #4]
 800d14e:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800d150:	6225      	str	r5, [r4, #32]
}
 800d152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d156:	68f3      	ldr	r3, [r6, #12]
 800d158:	f033 0208 	bics.w	r2, r3, #8
 800d15c:	d119      	bne.n	800d192 <TIM_OC2_SetConfig+0xb6>
    tmpccer &= ~TIM_CCER_CC2NP;
 800d15e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d162:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800d166:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d16a:	69b3      	ldr	r3, [r6, #24]
 800d16c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800d170:	d0de      	beq.n	800d130 <TIM_OC2_SetConfig+0x54>
 800d172:	f641 015f 	movw	r1, #6239	; 0x185f
 800d176:	4812      	ldr	r0, [pc, #72]	; (800d1c0 <TIM_OC2_SetConfig+0xe4>)
 800d178:	f006 fbe4 	bl	8013944 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d17c:	6971      	ldr	r1, [r6, #20]
 800d17e:	f431 7380 	bics.w	r3, r1, #256	; 0x100
 800d182:	d0d9      	beq.n	800d138 <TIM_OC2_SetConfig+0x5c>
 800d184:	f44f 51c3 	mov.w	r1, #6240	; 0x1860
 800d188:	480d      	ldr	r0, [pc, #52]	; (800d1c0 <TIM_OC2_SetConfig+0xe4>)
 800d18a:	f006 fbdb 	bl	8013944 <assert_failed>
 800d18e:	6971      	ldr	r1, [r6, #20]
 800d190:	e7d2      	b.n	800d138 <TIM_OC2_SetConfig+0x5c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d192:	f641 0151 	movw	r1, #6225	; 0x1851
 800d196:	480a      	ldr	r0, [pc, #40]	; (800d1c0 <TIM_OC2_SetConfig+0xe4>)
 800d198:	f006 fbd4 	bl	8013944 <assert_failed>
    tmpccer &= ~TIM_CCER_CC2NP;
 800d19c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800d1a0:	68f3      	ldr	r3, [r6, #12]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d1a2:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1a6:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 800d1aa:	e7de      	b.n	800d16a <TIM_OC2_SetConfig+0x8e>
 800d1ac:	feff8cff 	.word	0xfeff8cff
 800d1b0:	40010000 	.word	0x40010000
 800d1b4:	40010400 	.word	0x40010400
 800d1b8:	40014000 	.word	0x40014000
 800d1bc:	40014400 	.word	0x40014400
 800d1c0:	0814509c 	.word	0x0814509c

0800d1c4 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800d1c4:	2a14      	cmp	r2, #20
{
 800d1c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1ca:	4616      	mov	r6, r2
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	460d      	mov	r5, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800d1d0:	f240 80a2 	bls.w	800d318 <HAL_TIM_PWM_ConfigChannel+0x154>
 800d1d4:	2a3c      	cmp	r2, #60	; 0x3c
 800d1d6:	f040 80a4 	bne.w	800d322 <HAL_TIM_PWM_ConfigChannel+0x15e>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800d1da:	682b      	ldr	r3, [r5, #0]
 800d1dc:	4a9b      	ldr	r2, [pc, #620]	; (800d44c <HAL_TIM_PWM_ConfigChannel+0x288>)
 800d1de:	f023 0110 	bic.w	r1, r3, #16
 800d1e2:	4291      	cmp	r1, r2
 800d1e4:	d004      	beq.n	800d1f0 <HAL_TIM_PWM_ConfigChannel+0x2c>
 800d1e6:	4a9a      	ldr	r2, [pc, #616]	; (800d450 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800d1e8:	401a      	ands	r2, r3
 800d1ea:	2a60      	cmp	r2, #96	; 0x60
 800d1ec:	f040 8235 	bne.w	800d65a <HAL_TIM_PWM_ConfigChannel+0x496>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800d1f0:	68ab      	ldr	r3, [r5, #8]
 800d1f2:	f033 0302 	bics.w	r3, r3, #2
 800d1f6:	f040 809a 	bne.w	800d32e <HAL_TIM_PWM_ConfigChannel+0x16a>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800d1fa:	692b      	ldr	r3, [r5, #16]
 800d1fc:	f033 0304 	bics.w	r3, r3, #4
 800d200:	f040 809f 	bne.w	800d342 <HAL_TIM_PWM_ConfigChannel+0x17e>
  __HAL_LOCK(htim);
 800d204:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d208:	2b01      	cmp	r3, #1
 800d20a:	f000 80a4 	beq.w	800d356 <HAL_TIM_PWM_ConfigChannel+0x192>
 800d20e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d210:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800d212:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d216:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800d21a:	2e14      	cmp	r6, #20
 800d21c:	d873      	bhi.n	800d306 <HAL_TIM_PWM_ConfigChannel+0x142>
 800d21e:	e8df f016 	tbh	[pc, r6, lsl #1]
 800d222:	0015      	.short	0x0015
 800d224:	00720072 	.word	0x00720072
 800d228:	009d0072 	.word	0x009d0072
 800d22c:	00720072 	.word	0x00720072
 800d230:	00e00072 	.word	0x00e00072
 800d234:	00720072 	.word	0x00720072
 800d238:	01290072 	.word	0x01290072
 800d23c:	00720072 	.word	0x00720072
 800d240:	018e0072 	.word	0x018e0072
 800d244:	00720072 	.word	0x00720072
 800d248:	01d50072 	.word	0x01d50072
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d24c:	6820      	ldr	r0, [r4, #0]
 800d24e:	4b81      	ldr	r3, [pc, #516]	; (800d454 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800d250:	4a81      	ldr	r2, [pc, #516]	; (800d458 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800d252:	4298      	cmp	r0, r3
 800d254:	bf18      	it	ne
 800d256:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d25a:	4980      	ldr	r1, [pc, #512]	; (800d45c <HAL_TIM_PWM_ConfigChannel+0x298>)
 800d25c:	bf14      	ite	ne
 800d25e:	2301      	movne	r3, #1
 800d260:	2300      	moveq	r3, #0
 800d262:	4290      	cmp	r0, r2
 800d264:	bf0c      	ite	eq
 800d266:	2300      	moveq	r3, #0
 800d268:	f003 0301 	andne.w	r3, r3, #1
 800d26c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d270:	4288      	cmp	r0, r1
 800d272:	bf0c      	ite	eq
 800d274:	2300      	moveq	r3, #0
 800d276:	f003 0301 	andne.w	r3, r3, #1
 800d27a:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800d27e:	4290      	cmp	r0, r2
 800d280:	bf0c      	ite	eq
 800d282:	2300      	moveq	r3, #0
 800d284:	f003 0301 	andne.w	r3, r3, #1
 800d288:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d28c:	4288      	cmp	r0, r1
 800d28e:	bf0c      	ite	eq
 800d290:	2300      	moveq	r3, #0
 800d292:	f003 0301 	andne.w	r3, r3, #1
 800d296:	f5a1 4168 	sub.w	r1, r1, #59392	; 0xe800
 800d29a:	4290      	cmp	r0, r2
 800d29c:	bf0c      	ite	eq
 800d29e:	2300      	moveq	r3, #0
 800d2a0:	f003 0301 	andne.w	r3, r3, #1
 800d2a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2a8:	4288      	cmp	r0, r1
 800d2aa:	bf0c      	ite	eq
 800d2ac:	2300      	moveq	r3, #0
 800d2ae:	f003 0301 	andne.w	r3, r3, #1
 800d2b2:	f501 3192 	add.w	r1, r1, #74752	; 0x12400
 800d2b6:	4290      	cmp	r0, r2
 800d2b8:	bf0c      	ite	eq
 800d2ba:	2300      	moveq	r3, #0
 800d2bc:	f003 0301 	andne.w	r3, r3, #1
 800d2c0:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 800d2c4:	4288      	cmp	r0, r1
 800d2c6:	bf0c      	ite	eq
 800d2c8:	2300      	moveq	r3, #0
 800d2ca:	f003 0301 	andne.w	r3, r3, #1
 800d2ce:	4290      	cmp	r0, r2
 800d2d0:	bf0c      	ite	eq
 800d2d2:	2300      	moveq	r3, #0
 800d2d4:	f003 0301 	andne.w	r3, r3, #1
 800d2d8:	b11b      	cbz	r3, 800d2e2 <HAL_TIM_PWM_ConfigChannel+0x11e>
 800d2da:	4b61      	ldr	r3, [pc, #388]	; (800d460 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800d2dc:	4298      	cmp	r0, r3
 800d2de:	f040 81ec 	bne.w	800d6ba <HAL_TIM_PWM_ConfigChannel+0x4f6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d2e2:	4629      	mov	r1, r5
 800d2e4:	f7fe ffe6 	bl	800c2b4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d2e8:	6822      	ldr	r2, [r4, #0]
 800d2ea:	6993      	ldr	r3, [r2, #24]
 800d2ec:	f043 0308 	orr.w	r3, r3, #8
 800d2f0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d2f2:	6822      	ldr	r2, [r4, #0]
 800d2f4:	6993      	ldr	r3, [r2, #24]
 800d2f6:	f023 0304 	bic.w	r3, r3, #4
 800d2fa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d2fc:	6822      	ldr	r2, [r4, #0]
 800d2fe:	6929      	ldr	r1, [r5, #16]
 800d300:	6993      	ldr	r3, [r2, #24]
 800d302:	430b      	orrs	r3, r1
 800d304:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 800d306:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d308:	2201      	movs	r2, #1
  return HAL_OK;
 800d30a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800d30c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d310:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800d318:	4b52      	ldr	r3, [pc, #328]	; (800d464 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800d31a:	40d3      	lsrs	r3, r2
 800d31c:	07db      	lsls	r3, r3, #31
 800d31e:	f53f af5c 	bmi.w	800d1da <HAL_TIM_PWM_ConfigChannel+0x16>
 800d322:	f640 611c 	movw	r1, #3612	; 0xe1c
 800d326:	4850      	ldr	r0, [pc, #320]	; (800d468 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800d328:	f006 fb0c 	bl	8013944 <assert_failed>
 800d32c:	e755      	b.n	800d1da <HAL_TIM_PWM_ConfigChannel+0x16>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800d32e:	f640 611e 	movw	r1, #3614	; 0xe1e
 800d332:	484d      	ldr	r0, [pc, #308]	; (800d468 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800d334:	f006 fb06 	bl	8013944 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800d338:	692b      	ldr	r3, [r5, #16]
 800d33a:	f033 0304 	bics.w	r3, r3, #4
 800d33e:	f43f af61 	beq.w	800d204 <HAL_TIM_PWM_ConfigChannel+0x40>
 800d342:	f640 611f 	movw	r1, #3615	; 0xe1f
 800d346:	4848      	ldr	r0, [pc, #288]	; (800d468 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800d348:	f006 fafc 	bl	8013944 <assert_failed>
  __HAL_LOCK(htim);
 800d34c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d350:	2b01      	cmp	r3, #1
 800d352:	f47f af5c 	bne.w	800d20e <HAL_TIM_PWM_ConfigChannel+0x4a>
 800d356:	2002      	movs	r0, #2
}
 800d358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d35c:	6820      	ldr	r0, [r4, #0]
 800d35e:	4b3d      	ldr	r3, [pc, #244]	; (800d454 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800d360:	4a3d      	ldr	r2, [pc, #244]	; (800d458 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800d362:	4298      	cmp	r0, r3
 800d364:	bf18      	it	ne
 800d366:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d36a:	493c      	ldr	r1, [pc, #240]	; (800d45c <HAL_TIM_PWM_ConfigChannel+0x298>)
 800d36c:	bf14      	ite	ne
 800d36e:	2301      	movne	r3, #1
 800d370:	2300      	moveq	r3, #0
 800d372:	4290      	cmp	r0, r2
 800d374:	bf0c      	ite	eq
 800d376:	2300      	moveq	r3, #0
 800d378:	f003 0301 	andne.w	r3, r3, #1
 800d37c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d380:	4288      	cmp	r0, r1
 800d382:	bf0c      	ite	eq
 800d384:	2300      	moveq	r3, #0
 800d386:	f003 0301 	andne.w	r3, r3, #1
 800d38a:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800d38e:	4290      	cmp	r0, r2
 800d390:	bf0c      	ite	eq
 800d392:	2300      	moveq	r3, #0
 800d394:	f003 0301 	andne.w	r3, r3, #1
 800d398:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d39c:	4288      	cmp	r0, r1
 800d39e:	bf0c      	ite	eq
 800d3a0:	2300      	moveq	r3, #0
 800d3a2:	f003 0301 	andne.w	r3, r3, #1
 800d3a6:	4290      	cmp	r0, r2
 800d3a8:	bf0c      	ite	eq
 800d3aa:	2300      	moveq	r3, #0
 800d3ac:	f003 0301 	andne.w	r3, r3, #1
 800d3b0:	b11b      	cbz	r3, 800d3ba <HAL_TIM_PWM_ConfigChannel+0x1f6>
 800d3b2:	4b2e      	ldr	r3, [pc, #184]	; (800d46c <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800d3b4:	4298      	cmp	r0, r3
 800d3b6:	f040 8179 	bne.w	800d6ac <HAL_TIM_PWM_ConfigChannel+0x4e8>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d3ba:	4629      	mov	r1, r5
 800d3bc:	f7ff fe8e 	bl	800d0dc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d3c0:	6822      	ldr	r2, [r4, #0]
 800d3c2:	6993      	ldr	r3, [r2, #24]
 800d3c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d3c8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d3ca:	6822      	ldr	r2, [r4, #0]
 800d3cc:	6993      	ldr	r3, [r2, #24]
 800d3ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d3d2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d3d4:	6822      	ldr	r2, [r4, #0]
 800d3d6:	6929      	ldr	r1, [r5, #16]
 800d3d8:	6993      	ldr	r3, [r2, #24]
 800d3da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d3de:	6193      	str	r3, [r2, #24]
      break;
 800d3e0:	e791      	b.n	800d306 <HAL_TIM_PWM_ConfigChannel+0x142>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d3e2:	6820      	ldr	r0, [r4, #0]
 800d3e4:	4b1b      	ldr	r3, [pc, #108]	; (800d454 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800d3e6:	4a1c      	ldr	r2, [pc, #112]	; (800d458 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800d3e8:	4298      	cmp	r0, r3
 800d3ea:	bf18      	it	ne
 800d3ec:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d3f0:	491a      	ldr	r1, [pc, #104]	; (800d45c <HAL_TIM_PWM_ConfigChannel+0x298>)
 800d3f2:	bf14      	ite	ne
 800d3f4:	2301      	movne	r3, #1
 800d3f6:	2300      	moveq	r3, #0
 800d3f8:	4290      	cmp	r0, r2
 800d3fa:	bf0c      	ite	eq
 800d3fc:	2300      	moveq	r3, #0
 800d3fe:	f003 0301 	andne.w	r3, r3, #1
 800d402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d406:	4288      	cmp	r0, r1
 800d408:	bf0c      	ite	eq
 800d40a:	2300      	moveq	r3, #0
 800d40c:	f003 0301 	andne.w	r3, r3, #1
 800d410:	4290      	cmp	r0, r2
 800d412:	bf0c      	ite	eq
 800d414:	2300      	moveq	r3, #0
 800d416:	f003 0301 	andne.w	r3, r3, #1
 800d41a:	b11b      	cbz	r3, 800d424 <HAL_TIM_PWM_ConfigChannel+0x260>
 800d41c:	4b14      	ldr	r3, [pc, #80]	; (800d470 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800d41e:	4298      	cmp	r0, r3
 800d420:	f040 813d 	bne.w	800d69e <HAL_TIM_PWM_ConfigChannel+0x4da>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d424:	4629      	mov	r1, r5
 800d426:	f7fe ffcd 	bl	800c3c4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d42a:	6822      	ldr	r2, [r4, #0]
 800d42c:	69d3      	ldr	r3, [r2, #28]
 800d42e:	f043 0308 	orr.w	r3, r3, #8
 800d432:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d434:	6822      	ldr	r2, [r4, #0]
 800d436:	69d3      	ldr	r3, [r2, #28]
 800d438:	f023 0304 	bic.w	r3, r3, #4
 800d43c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d43e:	6822      	ldr	r2, [r4, #0]
 800d440:	6929      	ldr	r1, [r5, #16]
 800d442:	69d3      	ldr	r3, [r2, #28]
 800d444:	430b      	orrs	r3, r1
 800d446:	61d3      	str	r3, [r2, #28]
      break;
 800d448:	e75d      	b.n	800d306 <HAL_TIM_PWM_ConfigChannel+0x142>
 800d44a:	bf00      	nop
 800d44c:	00010040 	.word	0x00010040
 800d450:	fffeffef 	.word	0xfffeffef
 800d454:	40010000 	.word	0x40010000
 800d458:	40000400 	.word	0x40000400
 800d45c:	40000800 	.word	0x40000800
 800d460:	40014800 	.word	0x40014800
 800d464:	00111111 	.word	0x00111111
 800d468:	0814509c 	.word	0x0814509c
 800d46c:	40014000 	.word	0x40014000
 800d470:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d474:	6826      	ldr	r6, [r4, #0]
 800d476:	4b94      	ldr	r3, [pc, #592]	; (800d6c8 <HAL_TIM_PWM_ConfigChannel+0x504>)
 800d478:	4a94      	ldr	r2, [pc, #592]	; (800d6cc <HAL_TIM_PWM_ConfigChannel+0x508>)
 800d47a:	429e      	cmp	r6, r3
 800d47c:	bf18      	it	ne
 800d47e:	f1b6 4f80 	cmpne.w	r6, #1073741824	; 0x40000000
 800d482:	4993      	ldr	r1, [pc, #588]	; (800d6d0 <HAL_TIM_PWM_ConfigChannel+0x50c>)
 800d484:	bf14      	ite	ne
 800d486:	2301      	movne	r3, #1
 800d488:	2300      	moveq	r3, #0
 800d48a:	4296      	cmp	r6, r2
 800d48c:	bf0c      	ite	eq
 800d48e:	2300      	moveq	r3, #0
 800d490:	f003 0301 	andne.w	r3, r3, #1
 800d494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d498:	428e      	cmp	r6, r1
 800d49a:	bf0c      	ite	eq
 800d49c:	2300      	moveq	r3, #0
 800d49e:	f003 0301 	andne.w	r3, r3, #1
 800d4a2:	4296      	cmp	r6, r2
 800d4a4:	bf0c      	ite	eq
 800d4a6:	2300      	moveq	r3, #0
 800d4a8:	f003 0301 	andne.w	r3, r3, #1
 800d4ac:	b11b      	cbz	r3, 800d4b6 <HAL_TIM_PWM_ConfigChannel+0x2f2>
 800d4ae:	4b89      	ldr	r3, [pc, #548]	; (800d6d4 <HAL_TIM_PWM_ConfigChannel+0x510>)
 800d4b0:	429e      	cmp	r6, r3
 800d4b2:	f040 80ed 	bne.w	800d690 <HAL_TIM_PWM_ConfigChannel+0x4cc>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4b6:	6a33      	ldr	r3, [r6, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4b8:	4983      	ldr	r1, [pc, #524]	; (800d6c8 <HAL_TIM_PWM_ConfigChannel+0x504>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4be:	428e      	cmp	r6, r1
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4c0:	6233      	str	r3, [r6, #32]
  tmpccer = TIMx->CCER;
 800d4c2:	6a33      	ldr	r3, [r6, #32]
  tmpcr2 =  TIMx->CR2;
 800d4c4:	f8d6 9004 	ldr.w	r9, [r6, #4]
  tmpccmrx = TIMx->CCMR2;
 800d4c8:	69f7      	ldr	r7, [r6, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800d4ca:	f423 5800 	bic.w	r8, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d4ce:	68aa      	ldr	r2, [r5, #8]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d4d0:	f427 47e6 	bic.w	r7, r7, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4d4:	682b      	ldr	r3, [r5, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d4d6:	ea48 3802 	orr.w	r8, r8, r2, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4da:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4de:	d00d      	beq.n	800d4fc <HAL_TIM_PWM_ConfigChannel+0x338>
 800d4e0:	4b7c      	ldr	r3, [pc, #496]	; (800d6d4 <HAL_TIM_PWM_ConfigChannel+0x510>)
 800d4e2:	429e      	cmp	r6, r3
 800d4e4:	d00a      	beq.n	800d4fc <HAL_TIM_PWM_ConfigChannel+0x338>
 800d4e6:	4a7c      	ldr	r2, [pc, #496]	; (800d6d8 <HAL_TIM_PWM_ConfigChannel+0x514>)
 800d4e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d4ec:	429e      	cmp	r6, r3
 800d4ee:	bf18      	it	ne
 800d4f0:	4296      	cmpne	r6, r2
 800d4f2:	d003      	beq.n	800d4fc <HAL_TIM_PWM_ConfigChannel+0x338>
 800d4f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4f8:	429e      	cmp	r6, r3
 800d4fa:	d108      	bne.n	800d50e <HAL_TIM_PWM_ConfigChannel+0x34a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d4fc:	696b      	ldr	r3, [r5, #20]
 800d4fe:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800d502:	f040 80be 	bne.w	800d682 <HAL_TIM_PWM_ConfigChannel+0x4be>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d506:	f429 4980 	bic.w	r9, r9, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d50a:	ea49 1983 	orr.w	r9, r9, r3, lsl #6
  TIMx->CR2 = tmpcr2;
 800d50e:	f8c6 9004 	str.w	r9, [r6, #4]
  TIMx->CCMR2 = tmpccmrx;
 800d512:	61f7      	str	r7, [r6, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800d514:	686b      	ldr	r3, [r5, #4]
 800d516:	6433      	str	r3, [r6, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800d518:	f8c6 8020 	str.w	r8, [r6, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d51c:	6822      	ldr	r2, [r4, #0]
 800d51e:	69d3      	ldr	r3, [r2, #28]
 800d520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d524:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d526:	6822      	ldr	r2, [r4, #0]
 800d528:	69d3      	ldr	r3, [r2, #28]
 800d52a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d52e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d530:	6822      	ldr	r2, [r4, #0]
 800d532:	6929      	ldr	r1, [r5, #16]
 800d534:	69d3      	ldr	r3, [r2, #28]
 800d536:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d53a:	61d3      	str	r3, [r2, #28]
      break;
 800d53c:	e6e3      	b.n	800d306 <HAL_TIM_PWM_ConfigChannel+0x142>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	4a61      	ldr	r2, [pc, #388]	; (800d6c8 <HAL_TIM_PWM_ConfigChannel+0x504>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d004      	beq.n	800d550 <HAL_TIM_PWM_ConfigChannel+0x38c>
 800d546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d54a:	4293      	cmp	r3, r2
 800d54c:	f040 8092 	bne.w	800d674 <HAL_TIM_PWM_ConfigChannel+0x4b0>
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d550:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d552:	4f5d      	ldr	r7, [pc, #372]	; (800d6c8 <HAL_TIM_PWM_ConfigChannel+0x504>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d554:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d558:	42bb      	cmp	r3, r7
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d55a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800d55c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800d55e:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800d562:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 800d564:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d568:	68ae      	ldr	r6, [r5, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d56a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800d56e:	6828      	ldr	r0, [r5, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d570:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800d574:	ea41 0100 	orr.w	r1, r1, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d578:	d00d      	beq.n	800d596 <HAL_TIM_PWM_ConfigChannel+0x3d2>
 800d57a:	4856      	ldr	r0, [pc, #344]	; (800d6d4 <HAL_TIM_PWM_ConfigChannel+0x510>)
 800d57c:	4283      	cmp	r3, r0
 800d57e:	d00a      	beq.n	800d596 <HAL_TIM_PWM_ConfigChannel+0x3d2>
 800d580:	4e55      	ldr	r6, [pc, #340]	; (800d6d8 <HAL_TIM_PWM_ConfigChannel+0x514>)
 800d582:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800d586:	4283      	cmp	r3, r0
 800d588:	bf18      	it	ne
 800d58a:	42b3      	cmpne	r3, r6
 800d58c:	d003      	beq.n	800d596 <HAL_TIM_PWM_ConfigChannel+0x3d2>
 800d58e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d592:	4283      	cmp	r3, r0
 800d594:	d104      	bne.n	800d5a0 <HAL_TIM_PWM_ConfigChannel+0x3dc>
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d596:	f42c 3c80 	bic.w	ip, ip, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d59a:	6968      	ldr	r0, [r5, #20]
 800d59c:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
  TIMx->CR2 = tmpcr2;
 800d5a0:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800d5a4:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800d5a6:	6869      	ldr	r1, [r5, #4]
 800d5a8:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 800d5aa:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d5ac:	6822      	ldr	r2, [r4, #0]
 800d5ae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d5b0:	f043 0308 	orr.w	r3, r3, #8
 800d5b4:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d5b6:	6822      	ldr	r2, [r4, #0]
 800d5b8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d5ba:	f023 0304 	bic.w	r3, r3, #4
 800d5be:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d5c0:	6822      	ldr	r2, [r4, #0]
 800d5c2:	6929      	ldr	r1, [r5, #16]
 800d5c4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d5c6:	430b      	orrs	r3, r1
 800d5c8:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800d5ca:	e69c      	b.n	800d306 <HAL_TIM_PWM_ConfigChannel+0x142>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d5cc:	6823      	ldr	r3, [r4, #0]
 800d5ce:	4a3e      	ldr	r2, [pc, #248]	; (800d6c8 <HAL_TIM_PWM_ConfigChannel+0x504>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d003      	beq.n	800d5dc <HAL_TIM_PWM_ConfigChannel+0x418>
 800d5d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d144      	bne.n	800d666 <HAL_TIM_PWM_ConfigChannel+0x4a2>
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d5dc:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5de:	4f3a      	ldr	r7, [pc, #232]	; (800d6c8 <HAL_TIM_PWM_ConfigChannel+0x504>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d5e0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5e4:	42bb      	cmp	r3, r7
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d5e6:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800d5e8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800d5ea:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800d5ee:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d5f0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d5f4:	68ae      	ldr	r6, [r5, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d5f6:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5fa:	6828      	ldr	r0, [r5, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d5fc:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d600:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d604:	d00d      	beq.n	800d622 <HAL_TIM_PWM_ConfigChannel+0x45e>
 800d606:	4833      	ldr	r0, [pc, #204]	; (800d6d4 <HAL_TIM_PWM_ConfigChannel+0x510>)
 800d608:	4283      	cmp	r3, r0
 800d60a:	d00a      	beq.n	800d622 <HAL_TIM_PWM_ConfigChannel+0x45e>
 800d60c:	4e32      	ldr	r6, [pc, #200]	; (800d6d8 <HAL_TIM_PWM_ConfigChannel+0x514>)
 800d60e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800d612:	4283      	cmp	r3, r0
 800d614:	bf18      	it	ne
 800d616:	42b3      	cmpne	r3, r6
 800d618:	d003      	beq.n	800d622 <HAL_TIM_PWM_ConfigChannel+0x45e>
 800d61a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d61e:	4283      	cmp	r3, r0
 800d620:	d104      	bne.n	800d62c <HAL_TIM_PWM_ConfigChannel+0x468>
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d622:	f42c 3c00 	bic.w	ip, ip, #131072	; 0x20000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d626:	6968      	ldr	r0, [r5, #20]
 800d628:	ea4c 2c80 	orr.w	ip, ip, r0, lsl #10
  TIMx->CR2 = tmpcr2;
 800d62c:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800d630:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800d632:	6869      	ldr	r1, [r5, #4]
 800d634:	65d9      	str	r1, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 800d636:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d638:	6822      	ldr	r2, [r4, #0]
 800d63a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d63c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d640:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d642:	6822      	ldr	r2, [r4, #0]
 800d644:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d64a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d64c:	6822      	ldr	r2, [r4, #0]
 800d64e:	6929      	ldr	r1, [r5, #16]
 800d650:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d652:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d656:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800d658:	e655      	b.n	800d306 <HAL_TIM_PWM_ConfigChannel+0x142>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800d65a:	f640 611d 	movw	r1, #3613	; 0xe1d
 800d65e:	481f      	ldr	r0, [pc, #124]	; (800d6dc <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d660:	f006 f970 	bl	8013944 <assert_failed>
 800d664:	e5c4      	b.n	800d1f0 <HAL_TIM_PWM_ConfigChannel+0x2c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d666:	f44f 6168 	mov.w	r1, #3712	; 0xe80
 800d66a:	481c      	ldr	r0, [pc, #112]	; (800d6dc <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d66c:	f006 f96a 	bl	8013944 <assert_failed>
 800d670:	6823      	ldr	r3, [r4, #0]
 800d672:	e7b3      	b.n	800d5dc <HAL_TIM_PWM_ConfigChannel+0x418>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d674:	f640 616f 	movw	r1, #3695	; 0xe6f
 800d678:	4818      	ldr	r0, [pc, #96]	; (800d6dc <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d67a:	f006 f963 	bl	8013944 <assert_failed>
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	e766      	b.n	800d550 <HAL_TIM_PWM_ConfigChannel+0x38c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d682:	f641 01e8 	movw	r1, #6376	; 0x18e8
 800d686:	4815      	ldr	r0, [pc, #84]	; (800d6dc <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d688:	f006 f95c 	bl	8013944 <assert_failed>
 800d68c:	696b      	ldr	r3, [r5, #20]
 800d68e:	e73a      	b.n	800d506 <HAL_TIM_PWM_ConfigChannel+0x342>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d690:	f640 615e 	movw	r1, #3678	; 0xe5e
 800d694:	4811      	ldr	r0, [pc, #68]	; (800d6dc <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d696:	f006 f955 	bl	8013944 <assert_failed>
 800d69a:	6826      	ldr	r6, [r4, #0]
 800d69c:	e70b      	b.n	800d4b6 <HAL_TIM_PWM_ConfigChannel+0x2f2>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d69e:	480f      	ldr	r0, [pc, #60]	; (800d6dc <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d6a0:	f640 614d 	movw	r1, #3661	; 0xe4d
 800d6a4:	f006 f94e 	bl	8013944 <assert_failed>
 800d6a8:	6820      	ldr	r0, [r4, #0]
 800d6aa:	e6bb      	b.n	800d424 <HAL_TIM_PWM_ConfigChannel+0x260>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d6ac:	480b      	ldr	r0, [pc, #44]	; (800d6dc <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d6ae:	f640 613c 	movw	r1, #3644	; 0xe3c
 800d6b2:	f006 f947 	bl	8013944 <assert_failed>
 800d6b6:	6820      	ldr	r0, [r4, #0]
 800d6b8:	e67f      	b.n	800d3ba <HAL_TIM_PWM_ConfigChannel+0x1f6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d6ba:	4808      	ldr	r0, [pc, #32]	; (800d6dc <HAL_TIM_PWM_ConfigChannel+0x518>)
 800d6bc:	f640 612b 	movw	r1, #3627	; 0xe2b
 800d6c0:	f006 f940 	bl	8013944 <assert_failed>
 800d6c4:	6820      	ldr	r0, [r4, #0]
 800d6c6:	e60c      	b.n	800d2e2 <HAL_TIM_PWM_ConfigChannel+0x11e>
 800d6c8:	40010000 	.word	0x40010000
 800d6cc:	40000400 	.word	0x40000400
 800d6d0:	40000800 	.word	0x40000800
 800d6d4:	40010400 	.word	0x40010400
 800d6d8:	40014000 	.word	0x40014000
 800d6dc:	0814509c 	.word	0x0814509c

0800d6e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800d6e2:	4b60      	ldr	r3, [pc, #384]	; (800d864 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
{
 800d6e4:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800d6e6:	6802      	ldr	r2, [r0, #0]
{
 800d6e8:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800d6ea:	4e5f      	ldr	r6, [pc, #380]	; (800d868 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	bf18      	it	ne
 800d6f0:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d6f4:	485d      	ldr	r0, [pc, #372]	; (800d86c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800d6f6:	495e      	ldr	r1, [pc, #376]	; (800d870 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800d6f8:	bf14      	ite	ne
 800d6fa:	2301      	movne	r3, #1
 800d6fc:	2300      	moveq	r3, #0
 800d6fe:	42b2      	cmp	r2, r6
 800d700:	bf0c      	ite	eq
 800d702:	2300      	moveq	r3, #0
 800d704:	f003 0301 	andne.w	r3, r3, #1
 800d708:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800d70c:	4282      	cmp	r2, r0
 800d70e:	bf0c      	ite	eq
 800d710:	2300      	moveq	r3, #0
 800d712:	f003 0301 	andne.w	r3, r3, #1
 800d716:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800d71a:	428a      	cmp	r2, r1
 800d71c:	bf0c      	ite	eq
 800d71e:	2300      	moveq	r3, #0
 800d720:	f003 0301 	andne.w	r3, r3, #1
 800d724:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800d728:	42b2      	cmp	r2, r6
 800d72a:	bf0c      	ite	eq
 800d72c:	2300      	moveq	r3, #0
 800d72e:	f003 0301 	andne.w	r3, r3, #1
 800d732:	4282      	cmp	r2, r0
 800d734:	bf0c      	ite	eq
 800d736:	2300      	moveq	r3, #0
 800d738:	f003 0301 	andne.w	r3, r3, #1
 800d73c:	428a      	cmp	r2, r1
 800d73e:	bf0c      	ite	eq
 800d740:	2300      	moveq	r3, #0
 800d742:	f003 0301 	andne.w	r3, r3, #1
 800d746:	b113      	cbz	r3, 800d74e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800d748:	4b4a      	ldr	r3, [pc, #296]	; (800d874 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d175      	bne.n	800d83a <HAL_TIMEx_MasterConfigSynchronization+0x15a>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800d74e:	682b      	ldr	r3, [r5, #0]
 800d750:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800d754:	2b40      	cmp	r3, #64	; 0x40
 800d756:	d001      	beq.n	800d75c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d174      	bne.n	800d846 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800d75c:	68ab      	ldr	r3, [r5, #8]
 800d75e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800d762:	d15f      	bne.n	800d824 <HAL_TIMEx_MasterConfigSynchronization+0x144>

  /* Check input state */
  __HAL_LOCK(htim);
 800d764:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d064      	beq.n	800d836 <HAL_TIMEx_MasterConfigSynchronization+0x156>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d76c:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 800d76e:	2001      	movs	r0, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d770:	4b3c      	ldr	r3, [pc, #240]	; (800d864 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d772:	2102      	movs	r1, #2
  __HAL_LOCK(htim);
 800d774:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d778:	429a      	cmp	r2, r3
  htim->State = HAL_TIM_STATE_BUSY;
 800d77a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800d77e:	6857      	ldr	r7, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800d780:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d782:	d037      	beq.n	800d7f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800d784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d788:	429a      	cmp	r2, r3
 800d78a:	d033      	beq.n	800d7f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d78c:	6829      	ldr	r1, [r5, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800d78e:	f027 0770 	bic.w	r7, r7, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d792:	4b34      	ldr	r3, [pc, #208]	; (800d864 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d794:	430f      	orrs	r7, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d796:	4934      	ldr	r1, [pc, #208]	; (800d868 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800d798:	4835      	ldr	r0, [pc, #212]	; (800d870 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
  htim->Instance->CR2 = tmpcr2;
 800d79a:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d79c:	6822      	ldr	r2, [r4, #0]
 800d79e:	4f33      	ldr	r7, [pc, #204]	; (800d86c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800d7a0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d7a4:	bf18      	it	ne
 800d7a6:	429a      	cmpne	r2, r3
 800d7a8:	bf0c      	ite	eq
 800d7aa:	2301      	moveq	r3, #1
 800d7ac:	2300      	movne	r3, #0
 800d7ae:	428a      	cmp	r2, r1
 800d7b0:	bf08      	it	eq
 800d7b2:	f043 0301 	orreq.w	r3, r3, #1
 800d7b6:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 800d7ba:	42ba      	cmp	r2, r7
 800d7bc:	bf08      	it	eq
 800d7be:	f043 0301 	orreq.w	r3, r3, #1
 800d7c2:	4282      	cmp	r2, r0
 800d7c4:	bf08      	it	eq
 800d7c6:	f043 0301 	orreq.w	r3, r3, #1
 800d7ca:	428a      	cmp	r2, r1
 800d7cc:	bf08      	it	eq
 800d7ce:	f043 0301 	orreq.w	r3, r3, #1
 800d7d2:	b913      	cbnz	r3, 800d7da <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 800d7d4:	4b28      	ldr	r3, [pc, #160]	; (800d878 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d104      	bne.n	800d7e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d7da:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d7dc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d7e0:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d7e2:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800d7e4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d7e6:	2201      	movs	r2, #1

  return HAL_OK;
 800d7e8:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800d7ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d7ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800d7f4:	6868      	ldr	r0, [r5, #4]
 800d7f6:	f420 1340 	bic.w	r3, r0, #3145728	; 0x300000
 800d7fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d7fe:	bf18      	it	ne
 800d800:	2b00      	cmpne	r3, #0
 800d802:	bf14      	ite	ne
 800d804:	2101      	movne	r1, #1
 800d806:	2100      	moveq	r1, #0
 800d808:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d80c:	bf0c      	ite	eq
 800d80e:	2100      	moveq	r1, #0
 800d810:	f001 0101 	andne.w	r1, r1, #1
 800d814:	b111      	cbz	r1, 800d81c <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 800d816:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d81a:	d11a      	bne.n	800d852 <HAL_TIMEx_MasterConfigSynchronization+0x172>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d81c:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d820:	4307      	orrs	r7, r0
 800d822:	e7b3      	b.n	800d78c <HAL_TIMEx_MasterConfigSynchronization+0xac>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800d824:	f240 6175 	movw	r1, #1653	; 0x675
 800d828:	4814      	ldr	r0, [pc, #80]	; (800d87c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800d82a:	f006 f88b 	bl	8013944 <assert_failed>
  __HAL_LOCK(htim);
 800d82e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d832:	2b01      	cmp	r3, #1
 800d834:	d19a      	bne.n	800d76c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d836:	2002      	movs	r0, #2
}
 800d838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800d83a:	f240 6173 	movw	r1, #1651	; 0x673
 800d83e:	480f      	ldr	r0, [pc, #60]	; (800d87c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800d840:	f006 f880 	bl	8013944 <assert_failed>
 800d844:	e783      	b.n	800d74e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800d846:	f240 6174 	movw	r1, #1652	; 0x674
 800d84a:	480c      	ldr	r0, [pc, #48]	; (800d87c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800d84c:	f006 f87a 	bl	8013944 <assert_failed>
 800d850:	e784      	b.n	800d75c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800d852:	480a      	ldr	r0, [pc, #40]	; (800d87c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800d854:	f240 6187 	movw	r1, #1671	; 0x687
 800d858:	f006 f874 	bl	8013944 <assert_failed>
 800d85c:	6868      	ldr	r0, [r5, #4]
 800d85e:	6822      	ldr	r2, [r4, #0]
 800d860:	e7dc      	b.n	800d81c <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 800d862:	bf00      	nop
 800d864:	40010000 	.word	0x40010000
 800d868:	40000400 	.word	0x40000400
 800d86c:	40000800 	.word	0x40000800
 800d870:	40000c00 	.word	0x40000c00
 800d874:	40014000 	.word	0x40014000
 800d878:	40001800 	.word	0x40001800
 800d87c:	081450d4 	.word	0x081450d4

0800d880 <FMC_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800d880:	4b5e      	ldr	r3, [pc, #376]	; (800d9fc <FMC_SDRAM_Init+0x17c>)
 800d882:	4298      	cmp	r0, r3
{
 800d884:	b570      	push	{r4, r5, r6, lr}
 800d886:	4605      	mov	r5, r0
 800d888:	460c      	mov	r4, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800d88a:	d004      	beq.n	800d896 <FMC_SDRAM_Init+0x16>
 800d88c:	f240 311a 	movw	r1, #794	; 0x31a
 800d890:	485b      	ldr	r0, [pc, #364]	; (800da00 <FMC_SDRAM_Init+0x180>)
 800d892:	f006 f857 	bl	8013944 <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 800d896:	6823      	ldr	r3, [r4, #0]
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d904      	bls.n	800d8a6 <FMC_SDRAM_Init+0x26>
 800d89c:	f240 311b 	movw	r1, #795	; 0x31b
 800d8a0:	4857      	ldr	r0, [pc, #348]	; (800da00 <FMC_SDRAM_Init+0x180>)
 800d8a2:	f006 f84f 	bl	8013944 <assert_failed>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 800d8a6:	6863      	ldr	r3, [r4, #4]
 800d8a8:	2b03      	cmp	r3, #3
 800d8aa:	f200 80a1 	bhi.w	800d9f0 <FMC_SDRAM_Init+0x170>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 800d8ae:	68a3      	ldr	r3, [r4, #8]
 800d8b0:	f033 0204 	bics.w	r2, r3, #4
 800d8b4:	d002      	beq.n	800d8bc <FMC_SDRAM_Init+0x3c>
 800d8b6:	2b08      	cmp	r3, #8
 800d8b8:	f040 8094 	bne.w	800d9e4 <FMC_SDRAM_Init+0x164>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 800d8bc:	68e3      	ldr	r3, [r4, #12]
 800d8be:	f033 0210 	bics.w	r2, r3, #16
 800d8c2:	d001      	beq.n	800d8c8 <FMC_SDRAM_Init+0x48>
 800d8c4:	2b20      	cmp	r3, #32
 800d8c6:	d17d      	bne.n	800d9c4 <FMC_SDRAM_Init+0x144>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 800d8c8:	6923      	ldr	r3, [r4, #16]
 800d8ca:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800d8ce:	f040 8083 	bne.w	800d9d8 <FMC_SDRAM_Init+0x158>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 800d8d2:	6963      	ldr	r3, [r4, #20]
 800d8d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d8d8:	2a80      	cmp	r2, #128	; 0x80
 800d8da:	d002      	beq.n	800d8e2 <FMC_SDRAM_Init+0x62>
 800d8dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8e0:	d161      	bne.n	800d9a6 <FMC_SDRAM_Init+0x126>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 800d8e2:	69a3      	ldr	r3, [r4, #24]
 800d8e4:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800d8e8:	d166      	bne.n	800d9b8 <FMC_SDRAM_Init+0x138>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 800d8ea:	69e3      	ldr	r3, [r4, #28]
 800d8ec:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800d8f0:	d002      	beq.n	800d8f8 <FMC_SDRAM_Init+0x78>
 800d8f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d8f6:	d147      	bne.n	800d988 <FMC_SDRAM_Init+0x108>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 800d8f8:	6a23      	ldr	r3, [r4, #32]
 800d8fa:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800d8fe:	d14c      	bne.n	800d99a <FMC_SDRAM_Init+0x11a>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));
 800d900:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d902:	f432 5300 	bics.w	r3, r2, #8192	; 0x2000
 800d906:	d002      	beq.n	800d90e <FMC_SDRAM_Init+0x8e>
 800d908:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800d90c:	d11c      	bne.n	800d948 <FMC_SDRAM_Init+0xc8>

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d90e:	6821      	ldr	r1, [r4, #0]
 800d910:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800d914:	b319      	cbz	r1, 800d95e <FMC_SDRAM_Init+0xde>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d916:	6829      	ldr	r1, [r5, #0]
 800d918:	4303      	orrs	r3, r0
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d91a:	483a      	ldr	r0, [pc, #232]	; (800da04 <FMC_SDRAM_Init+0x184>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d91c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800d920:	430b      	orrs	r3, r1
 800d922:	4313      	orrs	r3, r2
 800d924:	602b      	str	r3, [r5, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d926:	68e2      	ldr	r2, [r4, #12]
 800d928:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800d92c:	430b      	orrs	r3, r1
 800d92e:	6921      	ldr	r1, [r4, #16]
 800d930:	4313      	orrs	r3, r2
 800d932:	e9d4 6205 	ldrd	r6, r2, [r4, #20]
 800d936:	430b      	orrs	r3, r1
 800d938:	6869      	ldr	r1, [r5, #4]
 800d93a:	4333      	orrs	r3, r6
 800d93c:	4008      	ands	r0, r1
 800d93e:	4313      	orrs	r3, r2
 800d940:	4303      	orrs	r3, r0
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800d942:	2000      	movs	r0, #0
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d944:	606b      	str	r3, [r5, #4]
}
 800d946:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));
 800d948:	f44f 7149 	mov.w	r1, #804	; 0x324
 800d94c:	482c      	ldr	r0, [pc, #176]	; (800da00 <FMC_SDRAM_Init+0x180>)
 800d94e:	f005 fff9 	bl	8013944 <assert_failed>
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d952:	6821      	ldr	r1, [r4, #0]
 800d954:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d956:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800d95a:	2900      	cmp	r1, #0
 800d95c:	d1db      	bne.n	800d916 <FMC_SDRAM_Init+0x96>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d95e:	4303      	orrs	r3, r0
 800d960:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 800d964:	430b      	orrs	r3, r1
 800d966:	68e1      	ldr	r1, [r4, #12]
 800d968:	4303      	orrs	r3, r0
 800d96a:	6920      	ldr	r0, [r4, #16]
 800d96c:	430b      	orrs	r3, r1
 800d96e:	e9d4 1405 	ldrd	r1, r4, [r4, #20]
 800d972:	4303      	orrs	r3, r0
 800d974:	6828      	ldr	r0, [r5, #0]
 800d976:	430b      	orrs	r3, r1
 800d978:	4922      	ldr	r1, [pc, #136]	; (800da04 <FMC_SDRAM_Init+0x184>)
 800d97a:	4323      	orrs	r3, r4
 800d97c:	4001      	ands	r1, r0
}
 800d97e:	2000      	movs	r0, #0
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d980:	430b      	orrs	r3, r1
 800d982:	4313      	orrs	r3, r2
 800d984:	602b      	str	r3, [r5, #0]
}
 800d986:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 800d988:	f240 3122 	movw	r1, #802	; 0x322
 800d98c:	481c      	ldr	r0, [pc, #112]	; (800da00 <FMC_SDRAM_Init+0x180>)
 800d98e:	f005 ffd9 	bl	8013944 <assert_failed>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 800d992:	6a23      	ldr	r3, [r4, #32]
 800d994:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800d998:	d0b2      	beq.n	800d900 <FMC_SDRAM_Init+0x80>
 800d99a:	f240 3123 	movw	r1, #803	; 0x323
 800d99e:	4818      	ldr	r0, [pc, #96]	; (800da00 <FMC_SDRAM_Init+0x180>)
 800d9a0:	f005 ffd0 	bl	8013944 <assert_failed>
 800d9a4:	e7ac      	b.n	800d900 <FMC_SDRAM_Init+0x80>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 800d9a6:	f44f 7148 	mov.w	r1, #800	; 0x320
 800d9aa:	4815      	ldr	r0, [pc, #84]	; (800da00 <FMC_SDRAM_Init+0x180>)
 800d9ac:	f005 ffca 	bl	8013944 <assert_failed>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 800d9b0:	69a3      	ldr	r3, [r4, #24]
 800d9b2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800d9b6:	d098      	beq.n	800d8ea <FMC_SDRAM_Init+0x6a>
 800d9b8:	f240 3121 	movw	r1, #801	; 0x321
 800d9bc:	4810      	ldr	r0, [pc, #64]	; (800da00 <FMC_SDRAM_Init+0x180>)
 800d9be:	f005 ffc1 	bl	8013944 <assert_failed>
 800d9c2:	e792      	b.n	800d8ea <FMC_SDRAM_Init+0x6a>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 800d9c4:	f240 311e 	movw	r1, #798	; 0x31e
 800d9c8:	480d      	ldr	r0, [pc, #52]	; (800da00 <FMC_SDRAM_Init+0x180>)
 800d9ca:	f005 ffbb 	bl	8013944 <assert_failed>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 800d9ce:	6923      	ldr	r3, [r4, #16]
 800d9d0:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800d9d4:	f43f af7d 	beq.w	800d8d2 <FMC_SDRAM_Init+0x52>
 800d9d8:	f240 311f 	movw	r1, #799	; 0x31f
 800d9dc:	4808      	ldr	r0, [pc, #32]	; (800da00 <FMC_SDRAM_Init+0x180>)
 800d9de:	f005 ffb1 	bl	8013944 <assert_failed>
 800d9e2:	e776      	b.n	800d8d2 <FMC_SDRAM_Init+0x52>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 800d9e4:	f240 311d 	movw	r1, #797	; 0x31d
 800d9e8:	4805      	ldr	r0, [pc, #20]	; (800da00 <FMC_SDRAM_Init+0x180>)
 800d9ea:	f005 ffab 	bl	8013944 <assert_failed>
 800d9ee:	e765      	b.n	800d8bc <FMC_SDRAM_Init+0x3c>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 800d9f0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800d9f4:	4802      	ldr	r0, [pc, #8]	; (800da00 <FMC_SDRAM_Init+0x180>)
 800d9f6:	f005 ffa5 	bl	8013944 <assert_failed>
 800d9fa:	e758      	b.n	800d8ae <FMC_SDRAM_Init+0x2e>
 800d9fc:	52004140 	.word	0x52004140
 800da00:	08145110 	.word	0x08145110
 800da04:	ffff8000 	.word	0xffff8000

0800da08 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800da08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800da0a:	4b50      	ldr	r3, [pc, #320]	; (800db4c <FMC_SDRAM_Timing_Init+0x144>)
{
 800da0c:	4605      	mov	r5, r0
 800da0e:	460c      	mov	r4, r1
 800da10:	4616      	mov	r6, r2
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800da12:	4298      	cmp	r0, r3
 800da14:	d004      	beq.n	800da20 <FMC_SDRAM_Timing_Init+0x18>
 800da16:	f44f 7156 	mov.w	r1, #856	; 0x358
 800da1a:	484d      	ldr	r0, [pc, #308]	; (800db50 <FMC_SDRAM_Timing_Init+0x148>)
 800da1c:	f005 ff92 	bl	8013944 <assert_failed>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 800da20:	6823      	ldr	r3, [r4, #0]
 800da22:	3b01      	subs	r3, #1
 800da24:	2b0f      	cmp	r3, #15
 800da26:	f200 808a 	bhi.w	800db3e <FMC_SDRAM_Timing_Init+0x136>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 800da2a:	6863      	ldr	r3, [r4, #4]
 800da2c:	3b01      	subs	r3, #1
 800da2e:	2b0f      	cmp	r3, #15
 800da30:	d87f      	bhi.n	800db32 <FMC_SDRAM_Timing_Init+0x12a>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 800da32:	68a3      	ldr	r3, [r4, #8]
 800da34:	3b01      	subs	r3, #1
 800da36:	2b0f      	cmp	r3, #15
 800da38:	d875      	bhi.n	800db26 <FMC_SDRAM_Timing_Init+0x11e>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 800da3a:	68e3      	ldr	r3, [r4, #12]
 800da3c:	3b01      	subs	r3, #1
 800da3e:	2b0f      	cmp	r3, #15
 800da40:	d86b      	bhi.n	800db1a <FMC_SDRAM_Timing_Init+0x112>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 800da42:	6923      	ldr	r3, [r4, #16]
 800da44:	3b01      	subs	r3, #1
 800da46:	2b0f      	cmp	r3, #15
 800da48:	d861      	bhi.n	800db0e <FMC_SDRAM_Timing_Init+0x106>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 800da4a:	6963      	ldr	r3, [r4, #20]
 800da4c:	3b01      	subs	r3, #1
 800da4e:	2b0f      	cmp	r3, #15
 800da50:	d857      	bhi.n	800db02 <FMC_SDRAM_Timing_Init+0xfa>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 800da52:	69a3      	ldr	r3, [r4, #24]
 800da54:	3b01      	subs	r3, #1
 800da56:	2b0f      	cmp	r3, #15
 800da58:	d84d      	bhi.n	800daf6 <FMC_SDRAM_Timing_Init+0xee>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 800da5a:	2e01      	cmp	r6, #1
 800da5c:	d821      	bhi.n	800daa2 <FMC_SDRAM_Timing_Init+0x9a>
 800da5e:	68e3      	ldr	r3, [r4, #12]
 800da60:	6961      	ldr	r1, [r4, #20]
 800da62:	3b01      	subs	r3, #1
 800da64:	3901      	subs	r1, #1
 800da66:	031b      	lsls	r3, r3, #12
 800da68:	0509      	lsls	r1, r1, #20

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800da6a:	bb2e      	cbnz	r6, 800dab8 <FMC_SDRAM_Timing_Init+0xb0>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800da6c:	6822      	ldr	r2, [r4, #0]
 800da6e:	430b      	orrs	r3, r1
 800da70:	6860      	ldr	r0, [r4, #4]
 800da72:	3a01      	subs	r2, #1
 800da74:	68a1      	ldr	r1, [r4, #8]
 800da76:	1e47      	subs	r7, r0, #1
 800da78:	6920      	ldr	r0, [r4, #16]
 800da7a:	4313      	orrs	r3, r2
 800da7c:	1e4e      	subs	r6, r1, #1
 800da7e:	3801      	subs	r0, #1
 800da80:	69a1      	ldr	r1, [r4, #24]
 800da82:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 800da86:	68aa      	ldr	r2, [r5, #8]
 800da88:	3901      	subs	r1, #1
 800da8a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800da8e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800da92:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800da96:	2000      	movs	r0, #0
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800da98:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800da9c:	4313      	orrs	r3, r2
 800da9e:	60ab      	str	r3, [r5, #8]
}
 800daa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 800daa2:	f44f 7158 	mov.w	r1, #864	; 0x360
 800daa6:	482a      	ldr	r0, [pc, #168]	; (800db50 <FMC_SDRAM_Timing_Init+0x148>)
 800daa8:	f005 ff4c 	bl	8013944 <assert_failed>
 800daac:	68e3      	ldr	r3, [r4, #12]
 800daae:	6961      	ldr	r1, [r4, #20]
 800dab0:	3b01      	subs	r3, #1
 800dab2:	3901      	subs	r1, #1
 800dab4:	031b      	lsls	r3, r3, #12
 800dab6:	0509      	lsls	r1, r1, #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800dab8:	68a8      	ldr	r0, [r5, #8]
 800daba:	430b      	orrs	r3, r1
 800dabc:	4a25      	ldr	r2, [pc, #148]	; (800db54 <FMC_SDRAM_Timing_Init+0x14c>)
 800dabe:	4002      	ands	r2, r0
 800dac0:	4313      	orrs	r3, r2
 800dac2:	60ab      	str	r3, [r5, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800dac4:	6820      	ldr	r0, [r4, #0]
 800dac6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 800daca:	1e46      	subs	r6, r0, #1
 800dacc:	1e5a      	subs	r2, r3, #1
 800dace:	1e4b      	subs	r3, r1, #1
 800dad0:	6921      	ldr	r1, [r4, #16]
 800dad2:	0212      	lsls	r2, r2, #8
 800dad4:	1e48      	subs	r0, r1, #1
 800dad6:	69a1      	ldr	r1, [r4, #24]
 800dad8:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800dadc:	68ea      	ldr	r2, [r5, #12]
 800dade:	3901      	subs	r1, #1
 800dae0:	4333      	orrs	r3, r6
 800dae2:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800dae6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
}
 800daea:	2000      	movs	r0, #0
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800daec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800daf0:	4313      	orrs	r3, r2
 800daf2:	60eb      	str	r3, [r5, #12]
}
 800daf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 800daf6:	f240 315f 	movw	r1, #863	; 0x35f
 800dafa:	4815      	ldr	r0, [pc, #84]	; (800db50 <FMC_SDRAM_Timing_Init+0x148>)
 800dafc:	f005 ff22 	bl	8013944 <assert_failed>
 800db00:	e7ab      	b.n	800da5a <FMC_SDRAM_Timing_Init+0x52>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 800db02:	f240 315e 	movw	r1, #862	; 0x35e
 800db06:	4812      	ldr	r0, [pc, #72]	; (800db50 <FMC_SDRAM_Timing_Init+0x148>)
 800db08:	f005 ff1c 	bl	8013944 <assert_failed>
 800db0c:	e7a1      	b.n	800da52 <FMC_SDRAM_Timing_Init+0x4a>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 800db0e:	f240 315d 	movw	r1, #861	; 0x35d
 800db12:	480f      	ldr	r0, [pc, #60]	; (800db50 <FMC_SDRAM_Timing_Init+0x148>)
 800db14:	f005 ff16 	bl	8013944 <assert_failed>
 800db18:	e797      	b.n	800da4a <FMC_SDRAM_Timing_Init+0x42>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 800db1a:	f44f 7157 	mov.w	r1, #860	; 0x35c
 800db1e:	480c      	ldr	r0, [pc, #48]	; (800db50 <FMC_SDRAM_Timing_Init+0x148>)
 800db20:	f005 ff10 	bl	8013944 <assert_failed>
 800db24:	e78d      	b.n	800da42 <FMC_SDRAM_Timing_Init+0x3a>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 800db26:	f240 315b 	movw	r1, #859	; 0x35b
 800db2a:	4809      	ldr	r0, [pc, #36]	; (800db50 <FMC_SDRAM_Timing_Init+0x148>)
 800db2c:	f005 ff0a 	bl	8013944 <assert_failed>
 800db30:	e783      	b.n	800da3a <FMC_SDRAM_Timing_Init+0x32>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 800db32:	f240 315a 	movw	r1, #858	; 0x35a
 800db36:	4806      	ldr	r0, [pc, #24]	; (800db50 <FMC_SDRAM_Timing_Init+0x148>)
 800db38:	f005 ff04 	bl	8013944 <assert_failed>
 800db3c:	e779      	b.n	800da32 <FMC_SDRAM_Timing_Init+0x2a>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 800db3e:	f240 3159 	movw	r1, #857	; 0x359
 800db42:	4803      	ldr	r0, [pc, #12]	; (800db50 <FMC_SDRAM_Timing_Init+0x148>)
 800db44:	f005 fefe 	bl	8013944 <assert_failed>
 800db48:	e76f      	b.n	800da2a <FMC_SDRAM_Timing_Init+0x22>
 800db4a:	bf00      	nop
 800db4c:	52004140 	.word	0x52004140
 800db50:	08145110 	.word	0x08145110
 800db54:	ff0f0fff 	.word	0xff0f0fff

0800db58 <FMC_SDRAM_SendCommand>:
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800db58:	4b22      	ldr	r3, [pc, #136]	; (800dbe4 <FMC_SDRAM_SendCommand+0x8c>)
 800db5a:	4298      	cmp	r0, r3
{
 800db5c:	b570      	push	{r4, r5, r6, lr}
 800db5e:	4605      	mov	r5, r0
 800db60:	460c      	mov	r4, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800db62:	d004      	beq.n	800db6e <FMC_SDRAM_SendCommand+0x16>
 800db64:	f240 31d9 	movw	r1, #985	; 0x3d9
 800db68:	481f      	ldr	r0, [pc, #124]	; (800dbe8 <FMC_SDRAM_SendCommand+0x90>)
 800db6a:	f005 feeb 	bl	8013944 <assert_failed>
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 800db6e:	6823      	ldr	r3, [r4, #0]
 800db70:	2b06      	cmp	r3, #6
 800db72:	d831      	bhi.n	800dbd8 <FMC_SDRAM_SendCommand+0x80>
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 800db74:	6863      	ldr	r3, [r4, #4]
 800db76:	f023 0210 	bic.w	r2, r3, #16
 800db7a:	2a08      	cmp	r2, #8
 800db7c:	d001      	beq.n	800db82 <FMC_SDRAM_SendCommand+0x2a>
 800db7e:	2b10      	cmp	r3, #16
 800db80:	d11b      	bne.n	800dbba <FMC_SDRAM_SendCommand+0x62>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 800db82:	68a3      	ldr	r3, [r4, #8]
 800db84:	3b01      	subs	r3, #1
 800db86:	2b0e      	cmp	r3, #14
 800db88:	d820      	bhi.n	800dbcc <FMC_SDRAM_SendCommand+0x74>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));
 800db8a:	68e1      	ldr	r1, [r4, #12]
 800db8c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800db90:	d305      	bcc.n	800db9e <FMC_SDRAM_SendCommand+0x46>
 800db92:	f240 31dd 	movw	r1, #989	; 0x3dd
 800db96:	4814      	ldr	r0, [pc, #80]	; (800dbe8 <FMC_SDRAM_SendCommand+0x90>)
 800db98:	f005 fed4 	bl	8013944 <assert_failed>
 800db9c:	68e1      	ldr	r1, [r4, #12]

  /* Set command register */
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 800db9e:	6823      	ldr	r3, [r4, #0]
                          (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos)   |
                          ((Command->ModeRegisterDefinition)   << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800dba0:	2000      	movs	r0, #0
  SET_BIT(Device->SDCMR, ((Command->CommandMode)                                                 |
 800dba2:	e9d4 6201 	ldrd	r6, r2, [r4, #4]
 800dba6:	692c      	ldr	r4, [r5, #16]
 800dba8:	4333      	orrs	r3, r6
 800dbaa:	3a01      	subs	r2, #1
 800dbac:	4323      	orrs	r3, r4
 800dbae:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800dbb2:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800dbb6:	612b      	str	r3, [r5, #16]
}
 800dbb8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 800dbba:	f240 31db 	movw	r1, #987	; 0x3db
 800dbbe:	480a      	ldr	r0, [pc, #40]	; (800dbe8 <FMC_SDRAM_SendCommand+0x90>)
 800dbc0:	f005 fec0 	bl	8013944 <assert_failed>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 800dbc4:	68a3      	ldr	r3, [r4, #8]
 800dbc6:	3b01      	subs	r3, #1
 800dbc8:	2b0e      	cmp	r3, #14
 800dbca:	d9de      	bls.n	800db8a <FMC_SDRAM_SendCommand+0x32>
 800dbcc:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 800dbd0:	4805      	ldr	r0, [pc, #20]	; (800dbe8 <FMC_SDRAM_SendCommand+0x90>)
 800dbd2:	f005 feb7 	bl	8013944 <assert_failed>
 800dbd6:	e7d8      	b.n	800db8a <FMC_SDRAM_SendCommand+0x32>
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 800dbd8:	f240 31da 	movw	r1, #986	; 0x3da
 800dbdc:	4802      	ldr	r0, [pc, #8]	; (800dbe8 <FMC_SDRAM_SendCommand+0x90>)
 800dbde:	f005 feb1 	bl	8013944 <assert_failed>
 800dbe2:	e7c7      	b.n	800db74 <FMC_SDRAM_SendCommand+0x1c>
 800dbe4:	52004140 	.word	0x52004140
 800dbe8:	08145110 	.word	0x08145110

0800dbec <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800dbec:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800dbee:	4b0d      	ldr	r3, [pc, #52]	; (800dc24 <FMC_SDRAM_ProgramRefreshRate+0x38>)
{
 800dbf0:	4604      	mov	r4, r0
 800dbf2:	460d      	mov	r5, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800dbf4:	4298      	cmp	r0, r3
 800dbf6:	d004      	beq.n	800dc02 <FMC_SDRAM_ProgramRefreshRate+0x16>
 800dbf8:	f240 31f2 	movw	r1, #1010	; 0x3f2
 800dbfc:	480a      	ldr	r0, [pc, #40]	; (800dc28 <FMC_SDRAM_ProgramRefreshRate+0x3c>)
 800dbfe:	f005 fea1 	bl	8013944 <assert_failed>
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 800dc02:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800dc06:	d304      	bcc.n	800dc12 <FMC_SDRAM_ProgramRefreshRate+0x26>
 800dc08:	f240 31f3 	movw	r1, #1011	; 0x3f3
 800dc0c:	4806      	ldr	r0, [pc, #24]	; (800dc28 <FMC_SDRAM_ProgramRefreshRate+0x3c>)
 800dc0e:	f005 fe99 	bl	8013944 <assert_failed>

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800dc12:	6963      	ldr	r3, [r4, #20]

  return HAL_OK;
}
 800dc14:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800dc16:	4905      	ldr	r1, [pc, #20]	; (800dc2c <FMC_SDRAM_ProgramRefreshRate+0x40>)
 800dc18:	4019      	ands	r1, r3
 800dc1a:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 800dc1e:	6161      	str	r1, [r4, #20]
}
 800dc20:	bd38      	pop	{r3, r4, r5, pc}
 800dc22:	bf00      	nop
 800dc24:	52004140 	.word	0x52004140
 800dc28:	08145110 	.word	0x08145110
 800dc2c:	ffffc001 	.word	0xffffc001

0800dc30 <SDMMC_GetCmdResp1.part.2>:
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dc30:	4b30      	ldr	r3, [pc, #192]	; (800dcf4 <SDMMC_GetCmdResp1.part.2+0xc4>)
  return (*(__IO uint32_t *) tmp);
 800dc32:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dc34:	4013      	ands	r3, r2
 800dc36:	b34b      	cbz	r3, 800dc8c <SDMMC_GetCmdResp1.part.2+0x5c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dc38:	2a00      	cmp	r2, #0
 800dc3a:	db29      	blt.n	800dc90 <SDMMC_GetCmdResp1.part.2+0x60>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dc3c:	0051      	lsls	r1, r2, #1
 800dc3e:	d42d      	bmi.n	800dc9c <SDMMC_GetCmdResp1.part.2+0x6c>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dc40:	0093      	lsls	r3, r2, #2
 800dc42:	d42d      	bmi.n	800dca0 <SDMMC_GetCmdResp1.part.2+0x70>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dc44:	00d1      	lsls	r1, r2, #3
 800dc46:	d426      	bmi.n	800dc96 <SDMMC_GetCmdResp1.part.2+0x66>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dc48:	0113      	lsls	r3, r2, #4
 800dc4a:	d42e      	bmi.n	800dcaa <SDMMC_GetCmdResp1.part.2+0x7a>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dc4c:	0151      	lsls	r1, r2, #5
 800dc4e:	d42f      	bmi.n	800dcb0 <SDMMC_GetCmdResp1.part.2+0x80>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dc50:	01d3      	lsls	r3, r2, #7
 800dc52:	d427      	bmi.n	800dca4 <SDMMC_GetCmdResp1.part.2+0x74>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dc54:	0211      	lsls	r1, r2, #8
 800dc56:	d42e      	bmi.n	800dcb6 <SDMMC_GetCmdResp1.part.2+0x86>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dc58:	0253      	lsls	r3, r2, #9
 800dc5a:	d42f      	bmi.n	800dcbc <SDMMC_GetCmdResp1.part.2+0x8c>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dc5c:	0291      	lsls	r1, r2, #10
 800dc5e:	d430      	bmi.n	800dcc2 <SDMMC_GetCmdResp1.part.2+0x92>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dc60:	02d3      	lsls	r3, r2, #11
 800dc62:	d431      	bmi.n	800dcc8 <SDMMC_GetCmdResp1.part.2+0x98>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dc64:	0351      	lsls	r1, r2, #13
 800dc66:	d432      	bmi.n	800dcce <SDMMC_GetCmdResp1.part.2+0x9e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dc68:	0393      	lsls	r3, r2, #14
 800dc6a:	d433      	bmi.n	800dcd4 <SDMMC_GetCmdResp1.part.2+0xa4>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dc6c:	03d1      	lsls	r1, r2, #15
 800dc6e:	d434      	bmi.n	800dcda <SDMMC_GetCmdResp1.part.2+0xaa>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dc70:	0413      	lsls	r3, r2, #16
 800dc72:	d435      	bmi.n	800dce0 <SDMMC_GetCmdResp1.part.2+0xb0>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dc74:	0451      	lsls	r1, r2, #17
 800dc76:	d436      	bmi.n	800dce6 <SDMMC_GetCmdResp1.part.2+0xb6>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dc78:	0493      	lsls	r3, r2, #18
 800dc7a:	d437      	bmi.n	800dcec <SDMMC_GetCmdResp1.part.2+0xbc>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dc7c:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dc80:	bf14      	ite	ne
 800dc82:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800dc86:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800dc8a:	4770      	bx	lr
    return SDMMC_ERROR_NONE;
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dc90:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800dc94:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dc96:	f44f 7080 	mov.w	r0, #256	; 0x100
 800dc9a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dc9c:	2040      	movs	r0, #64	; 0x40
 800dc9e:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dca0:	2080      	movs	r0, #128	; 0x80
 800dca2:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dca4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800dca8:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dcaa:	f44f 7000 	mov.w	r0, #512	; 0x200
 800dcae:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dcb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800dcb4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dcb6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800dcba:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dcbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800dcc0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dcc2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800dcc6:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800dcc8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800dccc:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dcce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800dcd2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dcd4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800dcd8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dcda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800dcde:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dce0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800dce4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dce6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800dcea:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800dcec:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	fdffe008 	.word	0xfdffe008

0800dcf8 <SDMMC_Init>:
{
 800dcf8:	b084      	sub	sp, #16
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800dcfa:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800ddb4 <SDMMC_Init+0xbc>
{
 800dcfe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd02:	4605      	mov	r5, r0
 800dd04:	a809      	add	r0, sp, #36	; 0x24
 800dd06:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800dd08:	4565      	cmp	r5, ip
 800dd0a:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	; 0x30
{
 800dd0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800dd12:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800dd16:	d002      	beq.n	800dd1e <SDMMC_Init+0x26>
 800dd18:	4b23      	ldr	r3, [pc, #140]	; (800dda8 <SDMMC_Init+0xb0>)
 800dd1a:	429d      	cmp	r5, r3
 800dd1c:	d125      	bne.n	800dd6a <SDMMC_Init+0x72>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge));
 800dd1e:	f434 3380 	bics.w	r3, r4, #65536	; 0x10000
 800dd22:	d129      	bne.n	800dd78 <SDMMC_Init+0x80>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 800dd24:	f439 5380 	bics.w	r3, r9, #4096	; 0x1000
 800dd28:	d12d      	bne.n	800dd86 <SDMMC_Init+0x8e>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 800dd2a:	f438 4380 	bics.w	r3, r8, #16384	; 0x4000
 800dd2e:	d002      	beq.n	800dd36 <SDMMC_Init+0x3e>
 800dd30:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 800dd34:	d12c      	bne.n	800dd90 <SDMMC_Init+0x98>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 800dd36:	f437 3300 	bics.w	r3, r7, #131072	; 0x20000
 800dd3a:	d130      	bne.n	800dd9e <SDMMC_Init+0xa6>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 800dd3c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dd40:	d303      	bcc.n	800dd4a <SDMMC_Init+0x52>
 800dd42:	21d7      	movs	r1, #215	; 0xd7
 800dd44:	4819      	ldr	r0, [pc, #100]	; (800ddac <SDMMC_Init+0xb4>)
 800dd46:	f005 fdfd 	bl	8013944 <assert_failed>
  tmpreg |= (Init.ClockEdge           |\
 800dd4a:	ea44 0309 	orr.w	r3, r4, r9
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800dd4e:	6869      	ldr	r1, [r5, #4]
 800dd50:	4a17      	ldr	r2, [pc, #92]	; (800ddb0 <SDMMC_Init+0xb8>)
}
 800dd52:	2000      	movs	r0, #0
             Init.ClockPowerSave      |\
 800dd54:	ea43 0308 	orr.w	r3, r3, r8
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800dd58:	400a      	ands	r2, r1
             Init.BusWide             |\
 800dd5a:	433b      	orrs	r3, r7
             Init.HardwareFlowControl |\
 800dd5c:	4333      	orrs	r3, r6
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800dd5e:	4313      	orrs	r3, r2
 800dd60:	606b      	str	r3, [r5, #4]
}
 800dd62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd66:	b004      	add	sp, #16
 800dd68:	4770      	bx	lr
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800dd6a:	21d2      	movs	r1, #210	; 0xd2
 800dd6c:	480f      	ldr	r0, [pc, #60]	; (800ddac <SDMMC_Init+0xb4>)
 800dd6e:	f005 fde9 	bl	8013944 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge));
 800dd72:	f434 3380 	bics.w	r3, r4, #65536	; 0x10000
 800dd76:	d0d5      	beq.n	800dd24 <SDMMC_Init+0x2c>
 800dd78:	21d3      	movs	r1, #211	; 0xd3
 800dd7a:	480c      	ldr	r0, [pc, #48]	; (800ddac <SDMMC_Init+0xb4>)
 800dd7c:	f005 fde2 	bl	8013944 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 800dd80:	f439 5380 	bics.w	r3, r9, #4096	; 0x1000
 800dd84:	d0d1      	beq.n	800dd2a <SDMMC_Init+0x32>
 800dd86:	21d4      	movs	r1, #212	; 0xd4
 800dd88:	4808      	ldr	r0, [pc, #32]	; (800ddac <SDMMC_Init+0xb4>)
 800dd8a:	f005 fddb 	bl	8013944 <assert_failed>
 800dd8e:	e7cc      	b.n	800dd2a <SDMMC_Init+0x32>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 800dd90:	21d5      	movs	r1, #213	; 0xd5
 800dd92:	4806      	ldr	r0, [pc, #24]	; (800ddac <SDMMC_Init+0xb4>)
 800dd94:	f005 fdd6 	bl	8013944 <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 800dd98:	f437 3300 	bics.w	r3, r7, #131072	; 0x20000
 800dd9c:	d0ce      	beq.n	800dd3c <SDMMC_Init+0x44>
 800dd9e:	21d6      	movs	r1, #214	; 0xd6
 800dda0:	4802      	ldr	r0, [pc, #8]	; (800ddac <SDMMC_Init+0xb4>)
 800dda2:	f005 fdcf 	bl	8013944 <assert_failed>
 800dda6:	e7c9      	b.n	800dd3c <SDMMC_Init+0x44>
 800dda8:	48022400 	.word	0x48022400
 800ddac:	08145148 	.word	0x08145148
 800ddb0:	ffc02c00 	.word	0xffc02c00
 800ddb4:	52007000 	.word	0x52007000

0800ddb8 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800ddb8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop

0800ddc0 <SDMMC_WriteFIFO>:
{
 800ddc0:	4603      	mov	r3, r0
  SDMMCx->FIFO = *pWriteData;
 800ddc2:	680a      	ldr	r2, [r1, #0]
}
 800ddc4:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800ddc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800ddca:	4770      	bx	lr

0800ddcc <SDMMC_PowerState_ON>:
{
 800ddcc:	4602      	mov	r2, r0
}
 800ddce:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ddd0:	6813      	ldr	r3, [r2, #0]
 800ddd2:	f043 0303 	orr.w	r3, r3, #3
 800ddd6:	6013      	str	r3, [r2, #0]
}
 800ddd8:	4770      	bx	lr
 800ddda:	bf00      	nop

0800dddc <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800dddc:	6800      	ldr	r0, [r0, #0]
}
 800ddde:	f000 0003 	and.w	r0, r0, #3
 800dde2:	4770      	bx	lr

0800dde4 <SDMMC_GetResponse>:
{
 800dde4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_SDMMC_RESP(Response));
 800dde6:	f031 030c 	bics.w	r3, r1, #12
{
 800ddea:	460d      	mov	r5, r1
 800ddec:	4604      	mov	r4, r0
  assert_param(IS_SDMMC_RESP(Response));
 800ddee:	d004      	beq.n	800ddfa <SDMMC_GetResponse+0x16>
 800ddf0:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800ddf4:	4802      	ldr	r0, [pc, #8]	; (800de00 <SDMMC_GetResponse+0x1c>)
 800ddf6:	f005 fda5 	bl	8013944 <assert_failed>
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ddfa:	3414      	adds	r4, #20
  return (*(__IO uint32_t *) tmp);
 800ddfc:	5960      	ldr	r0, [r4, r5]
}
 800ddfe:	bd38      	pop	{r3, r4, r5, pc}
 800de00:	08145148 	.word	0x08145148

0800de04 <SDMMC_ConfigData>:
{
 800de04:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800de06:	684b      	ldr	r3, [r1, #4]
{
 800de08:	460c      	mov	r4, r1
 800de0a:	4605      	mov	r5, r0
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800de0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de10:	d23b      	bcs.n	800de8a <SDMMC_ConfigData+0x86>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 800de12:	68a2      	ldr	r2, [r4, #8]
 800de14:	f032 0130 	bics.w	r1, r2, #48	; 0x30
 800de18:	bf14      	ite	ne
 800de1a:	2301      	movne	r3, #1
 800de1c:	2300      	moveq	r3, #0
 800de1e:	2940      	cmp	r1, #64	; 0x40
 800de20:	bf0c      	ite	eq
 800de22:	2300      	moveq	r3, #0
 800de24:	f003 0301 	andne.w	r3, r3, #1
 800de28:	2ae0      	cmp	r2, #224	; 0xe0
 800de2a:	bf0c      	ite	eq
 800de2c:	2300      	moveq	r3, #0
 800de2e:	f003 0301 	andne.w	r3, r3, #1
 800de32:	2980      	cmp	r1, #128	; 0x80
 800de34:	bf0c      	ite	eq
 800de36:	2300      	moveq	r3, #0
 800de38:	f003 0301 	andne.w	r3, r3, #1
 800de3c:	b11b      	cbz	r3, 800de46 <SDMMC_ConfigData+0x42>
 800de3e:	f022 0210 	bic.w	r2, r2, #16
 800de42:	2ac0      	cmp	r2, #192	; 0xc0
 800de44:	d133      	bne.n	800deae <SDMMC_ConfigData+0xaa>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 800de46:	68e3      	ldr	r3, [r4, #12]
 800de48:	f033 0302 	bics.w	r3, r3, #2
 800de4c:	d129      	bne.n	800dea2 <SDMMC_ConfigData+0x9e>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 800de4e:	6923      	ldr	r3, [r4, #16]
 800de50:	f033 0308 	bics.w	r3, r3, #8
 800de54:	d11f      	bne.n	800de96 <SDMMC_ConfigData+0x92>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 800de56:	6963      	ldr	r3, [r4, #20]
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d904      	bls.n	800de66 <SDMMC_ConfigData+0x62>
 800de5c:	f240 11b1 	movw	r1, #433	; 0x1b1
 800de60:	4816      	ldr	r0, [pc, #88]	; (800debc <SDMMC_ConfigData+0xb8>)
 800de62:	f005 fd6f 	bl	8013944 <assert_failed>
  SDMMCx->DTIMER = Data->DataTimeOut;
 800de66:	6823      	ldr	r3, [r4, #0]
}
 800de68:	2000      	movs	r0, #0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800de6a:	626b      	str	r3, [r5, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800de6c:	6863      	ldr	r3, [r4, #4]
 800de6e:	62ab      	str	r3, [r5, #40]	; 0x28
                       Data->TransferDir   |\
 800de70:	6926      	ldr	r6, [r4, #16]
                       Data->TransferMode  |\
 800de72:	6961      	ldr	r1, [r4, #20]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800de74:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800de78:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800de7a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
                       Data->TransferDir   |\
 800de7c:	4333      	orrs	r3, r6
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800de7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
                       Data->TransferMode  |\
 800de82:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800de84:	4313      	orrs	r3, r2
 800de86:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800de88:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800de8a:	f240 11ad 	movw	r1, #429	; 0x1ad
 800de8e:	480b      	ldr	r0, [pc, #44]	; (800debc <SDMMC_ConfigData+0xb8>)
 800de90:	f005 fd58 	bl	8013944 <assert_failed>
 800de94:	e7bd      	b.n	800de12 <SDMMC_ConfigData+0xe>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 800de96:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800de9a:	4808      	ldr	r0, [pc, #32]	; (800debc <SDMMC_ConfigData+0xb8>)
 800de9c:	f005 fd52 	bl	8013944 <assert_failed>
 800dea0:	e7d9      	b.n	800de56 <SDMMC_ConfigData+0x52>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 800dea2:	f240 11af 	movw	r1, #431	; 0x1af
 800dea6:	4805      	ldr	r0, [pc, #20]	; (800debc <SDMMC_ConfigData+0xb8>)
 800dea8:	f005 fd4c 	bl	8013944 <assert_failed>
 800deac:	e7cf      	b.n	800de4e <SDMMC_ConfigData+0x4a>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 800deae:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800deb2:	4802      	ldr	r0, [pc, #8]	; (800debc <SDMMC_ConfigData+0xb8>)
 800deb4:	f005 fd46 	bl	8013944 <assert_failed>
 800deb8:	e7c5      	b.n	800de46 <SDMMC_ConfigData+0x42>
 800deba:	bf00      	nop
 800debc:	08145148 	.word	0x08145148

0800dec0 <SDMMC_CmdBlockLength>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dec0:	4a1c      	ldr	r2, [pc, #112]	; (800df34 <SDMMC_CmdBlockLength+0x74>)
 800dec2:	4b1d      	ldr	r3, [pc, #116]	; (800df38 <SDMMC_CmdBlockLength+0x78>)
{
 800dec4:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dec6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dec8:	f241 1410 	movw	r4, #4368	; 0x1110
  SDMMCx->ARG = Command->Argument;
 800decc:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dece:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ded2:	68c1      	ldr	r1, [r0, #12]
 800ded4:	4d19      	ldr	r5, [pc, #100]	; (800df3c <SDMMC_CmdBlockLength+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ded6:	f241 3388 	movw	r3, #5000	; 0x1388
 800deda:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dedc:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dede:	4918      	ldr	r1, [pc, #96]	; (800df40 <SDMMC_CmdBlockLength+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dee0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dee4:	432c      	orrs	r4, r5
 800dee6:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800dee8:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800deec:	d312      	bcc.n	800df14 <SDMMC_CmdBlockLength+0x54>
    sta_reg = SDMMCx->STA;
 800deee:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800def0:	420a      	tst	r2, r1
 800def2:	d0f9      	beq.n	800dee8 <SDMMC_CmdBlockLength+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800def4:	0494      	lsls	r4, r2, #18
 800def6:	d4f7      	bmi.n	800dee8 <SDMMC_CmdBlockLength+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800def8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800defa:	075a      	lsls	r2, r3, #29
 800defc:	d40e      	bmi.n	800df1c <SDMMC_CmdBlockLength+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800defe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800df00:	07db      	lsls	r3, r3, #31
 800df02:	d40f      	bmi.n	800df24 <SDMMC_CmdBlockLength+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df04:	4b0f      	ldr	r3, [pc, #60]	; (800df44 <SDMMC_CmdBlockLength+0x84>)
 800df06:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800df08:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	2b10      	cmp	r3, #16
 800df0e:	d00d      	beq.n	800df2c <SDMMC_CmdBlockLength+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df10:	2001      	movs	r0, #1
  return errorstate;
 800df12:	e001      	b.n	800df18 <SDMMC_CmdBlockLength+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800df14:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800df18:	bc30      	pop	{r4, r5}
 800df1a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df1c:	2304      	movs	r3, #4
 800df1e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df20:	4618      	mov	r0, r3
 800df22:	e7f9      	b.n	800df18 <SDMMC_CmdBlockLength+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800df24:	2301      	movs	r3, #1
 800df26:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df28:	4618      	mov	r0, r3
 800df2a:	e7f5      	b.n	800df18 <SDMMC_CmdBlockLength+0x58>
}
 800df2c:	bc30      	pop	{r4, r5}
 800df2e:	f7ff be7f 	b.w	800dc30 <SDMMC_GetCmdResp1.part.2>
 800df32:	bf00      	nop
 800df34:	200002c4 	.word	0x200002c4
 800df38:	10624dd3 	.word	0x10624dd3
 800df3c:	fffee0c0 	.word	0xfffee0c0
 800df40:	00200045 	.word	0x00200045
 800df44:	002000c5 	.word	0x002000c5

0800df48 <SDMMC_CmdReadSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df48:	4a1c      	ldr	r2, [pc, #112]	; (800dfbc <SDMMC_CmdReadSingleBlock+0x74>)
 800df4a:	4b1d      	ldr	r3, [pc, #116]	; (800dfc0 <SDMMC_CmdReadSingleBlock+0x78>)
{
 800df4c:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df4e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df50:	f241 1411 	movw	r4, #4369	; 0x1111
  SDMMCx->ARG = Command->Argument;
 800df54:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df56:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df5a:	68c1      	ldr	r1, [r0, #12]
 800df5c:	4d19      	ldr	r5, [pc, #100]	; (800dfc4 <SDMMC_CmdReadSingleBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df5e:	f241 3388 	movw	r3, #5000	; 0x1388
 800df62:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df64:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800df66:	4918      	ldr	r1, [pc, #96]	; (800dfc8 <SDMMC_CmdReadSingleBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df68:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800df6c:	432c      	orrs	r4, r5
 800df6e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800df70:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800df74:	d312      	bcc.n	800df9c <SDMMC_CmdReadSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 800df76:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800df78:	420a      	tst	r2, r1
 800df7a:	d0f9      	beq.n	800df70 <SDMMC_CmdReadSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800df7c:	0494      	lsls	r4, r2, #18
 800df7e:	d4f7      	bmi.n	800df70 <SDMMC_CmdReadSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800df82:	075a      	lsls	r2, r3, #29
 800df84:	d40e      	bmi.n	800dfa4 <SDMMC_CmdReadSingleBlock+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800df86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800df88:	07db      	lsls	r3, r3, #31
 800df8a:	d40f      	bmi.n	800dfac <SDMMC_CmdReadSingleBlock+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df8c:	4b0f      	ldr	r3, [pc, #60]	; (800dfcc <SDMMC_CmdReadSingleBlock+0x84>)
 800df8e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800df90:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800df92:	b2db      	uxtb	r3, r3
 800df94:	2b11      	cmp	r3, #17
 800df96:	d00d      	beq.n	800dfb4 <SDMMC_CmdReadSingleBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df98:	2001      	movs	r0, #1
  return errorstate;
 800df9a:	e001      	b.n	800dfa0 <SDMMC_CmdReadSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800df9c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800dfa0:	bc30      	pop	{r4, r5}
 800dfa2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dfa4:	2304      	movs	r3, #4
 800dfa6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	e7f9      	b.n	800dfa0 <SDMMC_CmdReadSingleBlock+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dfac:	2301      	movs	r3, #1
 800dfae:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	e7f5      	b.n	800dfa0 <SDMMC_CmdReadSingleBlock+0x58>
}
 800dfb4:	bc30      	pop	{r4, r5}
 800dfb6:	f7ff be3b 	b.w	800dc30 <SDMMC_GetCmdResp1.part.2>
 800dfba:	bf00      	nop
 800dfbc:	200002c4 	.word	0x200002c4
 800dfc0:	10624dd3 	.word	0x10624dd3
 800dfc4:	fffee0c0 	.word	0xfffee0c0
 800dfc8:	00200045 	.word	0x00200045
 800dfcc:	002000c5 	.word	0x002000c5

0800dfd0 <SDMMC_CmdReadMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dfd0:	4a1c      	ldr	r2, [pc, #112]	; (800e044 <SDMMC_CmdReadMultiBlock+0x74>)
 800dfd2:	4b1d      	ldr	r3, [pc, #116]	; (800e048 <SDMMC_CmdReadMultiBlock+0x78>)
{
 800dfd4:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dfd6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dfd8:	f241 1412 	movw	r4, #4370	; 0x1112
  SDMMCx->ARG = Command->Argument;
 800dfdc:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dfde:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dfe2:	68c1      	ldr	r1, [r0, #12]
 800dfe4:	4d19      	ldr	r5, [pc, #100]	; (800e04c <SDMMC_CmdReadMultiBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dfe6:	f241 3388 	movw	r3, #5000	; 0x1388
 800dfea:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dfec:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dfee:	4918      	ldr	r1, [pc, #96]	; (800e050 <SDMMC_CmdReadMultiBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dff0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dff4:	432c      	orrs	r4, r5
 800dff6:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800dff8:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800dffc:	d312      	bcc.n	800e024 <SDMMC_CmdReadMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 800dffe:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e000:	420a      	tst	r2, r1
 800e002:	d0f9      	beq.n	800dff8 <SDMMC_CmdReadMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e004:	0494      	lsls	r4, r2, #18
 800e006:	d4f7      	bmi.n	800dff8 <SDMMC_CmdReadMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e008:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e00a:	075a      	lsls	r2, r3, #29
 800e00c:	d40e      	bmi.n	800e02c <SDMMC_CmdReadMultiBlock+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e00e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e010:	07db      	lsls	r3, r3, #31
 800e012:	d40f      	bmi.n	800e034 <SDMMC_CmdReadMultiBlock+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e014:	4b0f      	ldr	r3, [pc, #60]	; (800e054 <SDMMC_CmdReadMultiBlock+0x84>)
 800e016:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e018:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	2b12      	cmp	r3, #18
 800e01e:	d00d      	beq.n	800e03c <SDMMC_CmdReadMultiBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e020:	2001      	movs	r0, #1
  return errorstate;
 800e022:	e001      	b.n	800e028 <SDMMC_CmdReadMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e024:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e028:	bc30      	pop	{r4, r5}
 800e02a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e02c:	2304      	movs	r3, #4
 800e02e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e030:	4618      	mov	r0, r3
 800e032:	e7f9      	b.n	800e028 <SDMMC_CmdReadMultiBlock+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e034:	2301      	movs	r3, #1
 800e036:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e038:	4618      	mov	r0, r3
 800e03a:	e7f5      	b.n	800e028 <SDMMC_CmdReadMultiBlock+0x58>
}
 800e03c:	bc30      	pop	{r4, r5}
 800e03e:	f7ff bdf7 	b.w	800dc30 <SDMMC_GetCmdResp1.part.2>
 800e042:	bf00      	nop
 800e044:	200002c4 	.word	0x200002c4
 800e048:	10624dd3 	.word	0x10624dd3
 800e04c:	fffee0c0 	.word	0xfffee0c0
 800e050:	00200045 	.word	0x00200045
 800e054:	002000c5 	.word	0x002000c5

0800e058 <SDMMC_CmdWriteSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e058:	4a1c      	ldr	r2, [pc, #112]	; (800e0cc <SDMMC_CmdWriteSingleBlock+0x74>)
 800e05a:	4b1d      	ldr	r3, [pc, #116]	; (800e0d0 <SDMMC_CmdWriteSingleBlock+0x78>)
{
 800e05c:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e05e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e060:	f241 1418 	movw	r4, #4376	; 0x1118
  SDMMCx->ARG = Command->Argument;
 800e064:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e066:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e06a:	68c1      	ldr	r1, [r0, #12]
 800e06c:	4d19      	ldr	r5, [pc, #100]	; (800e0d4 <SDMMC_CmdWriteSingleBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e06e:	f241 3388 	movw	r3, #5000	; 0x1388
 800e072:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e074:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e076:	4918      	ldr	r1, [pc, #96]	; (800e0d8 <SDMMC_CmdWriteSingleBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e078:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e07c:	432c      	orrs	r4, r5
 800e07e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e080:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e084:	d312      	bcc.n	800e0ac <SDMMC_CmdWriteSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 800e086:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e088:	420a      	tst	r2, r1
 800e08a:	d0f9      	beq.n	800e080 <SDMMC_CmdWriteSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e08c:	0494      	lsls	r4, r2, #18
 800e08e:	d4f7      	bmi.n	800e080 <SDMMC_CmdWriteSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e090:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e092:	075a      	lsls	r2, r3, #29
 800e094:	d40e      	bmi.n	800e0b4 <SDMMC_CmdWriteSingleBlock+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e096:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e098:	07db      	lsls	r3, r3, #31
 800e09a:	d40f      	bmi.n	800e0bc <SDMMC_CmdWriteSingleBlock+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e09c:	4b0f      	ldr	r3, [pc, #60]	; (800e0dc <SDMMC_CmdWriteSingleBlock+0x84>)
 800e09e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e0a0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	2b18      	cmp	r3, #24
 800e0a6:	d00d      	beq.n	800e0c4 <SDMMC_CmdWriteSingleBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0a8:	2001      	movs	r0, #1
  return errorstate;
 800e0aa:	e001      	b.n	800e0b0 <SDMMC_CmdWriteSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e0ac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e0b0:	bc30      	pop	{r4, r5}
 800e0b2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e0b4:	2304      	movs	r3, #4
 800e0b6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	e7f9      	b.n	800e0b0 <SDMMC_CmdWriteSingleBlock+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e0bc:	2301      	movs	r3, #1
 800e0be:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	e7f5      	b.n	800e0b0 <SDMMC_CmdWriteSingleBlock+0x58>
}
 800e0c4:	bc30      	pop	{r4, r5}
 800e0c6:	f7ff bdb3 	b.w	800dc30 <SDMMC_GetCmdResp1.part.2>
 800e0ca:	bf00      	nop
 800e0cc:	200002c4 	.word	0x200002c4
 800e0d0:	10624dd3 	.word	0x10624dd3
 800e0d4:	fffee0c0 	.word	0xfffee0c0
 800e0d8:	00200045 	.word	0x00200045
 800e0dc:	002000c5 	.word	0x002000c5

0800e0e0 <SDMMC_CmdWriteMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e0e0:	4a1c      	ldr	r2, [pc, #112]	; (800e154 <SDMMC_CmdWriteMultiBlock+0x74>)
 800e0e2:	4b1d      	ldr	r3, [pc, #116]	; (800e158 <SDMMC_CmdWriteMultiBlock+0x78>)
{
 800e0e4:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e0e6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e0e8:	f241 1419 	movw	r4, #4377	; 0x1119
  SDMMCx->ARG = Command->Argument;
 800e0ec:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e0ee:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e0f2:	68c1      	ldr	r1, [r0, #12]
 800e0f4:	4d19      	ldr	r5, [pc, #100]	; (800e15c <SDMMC_CmdWriteMultiBlock+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e0f6:	f241 3388 	movw	r3, #5000	; 0x1388
 800e0fa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e0fc:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e0fe:	4918      	ldr	r1, [pc, #96]	; (800e160 <SDMMC_CmdWriteMultiBlock+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e100:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e104:	432c      	orrs	r4, r5
 800e106:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e108:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e10c:	d312      	bcc.n	800e134 <SDMMC_CmdWriteMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 800e10e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e110:	420a      	tst	r2, r1
 800e112:	d0f9      	beq.n	800e108 <SDMMC_CmdWriteMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e114:	0494      	lsls	r4, r2, #18
 800e116:	d4f7      	bmi.n	800e108 <SDMMC_CmdWriteMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e118:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e11a:	075a      	lsls	r2, r3, #29
 800e11c:	d40e      	bmi.n	800e13c <SDMMC_CmdWriteMultiBlock+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e11e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e120:	07db      	lsls	r3, r3, #31
 800e122:	d40f      	bmi.n	800e144 <SDMMC_CmdWriteMultiBlock+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e124:	4b0f      	ldr	r3, [pc, #60]	; (800e164 <SDMMC_CmdWriteMultiBlock+0x84>)
 800e126:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e128:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	2b19      	cmp	r3, #25
 800e12e:	d00d      	beq.n	800e14c <SDMMC_CmdWriteMultiBlock+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e130:	2001      	movs	r0, #1
  return errorstate;
 800e132:	e001      	b.n	800e138 <SDMMC_CmdWriteMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e134:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e138:	bc30      	pop	{r4, r5}
 800e13a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e13c:	2304      	movs	r3, #4
 800e13e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e140:	4618      	mov	r0, r3
 800e142:	e7f9      	b.n	800e138 <SDMMC_CmdWriteMultiBlock+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e144:	2301      	movs	r3, #1
 800e146:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e148:	4618      	mov	r0, r3
 800e14a:	e7f5      	b.n	800e138 <SDMMC_CmdWriteMultiBlock+0x58>
}
 800e14c:	bc30      	pop	{r4, r5}
 800e14e:	f7ff bd6f 	b.w	800dc30 <SDMMC_GetCmdResp1.part.2>
 800e152:	bf00      	nop
 800e154:	200002c4 	.word	0x200002c4
 800e158:	10624dd3 	.word	0x10624dd3
 800e15c:	fffee0c0 	.word	0xfffee0c0
 800e160:	00200045 	.word	0x00200045
 800e164:	002000c5 	.word	0x002000c5

0800e168 <SDMMC_CmdStopTransfer>:
{
 800e168:	b570      	push	{r4, r5, r6, lr}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e16a:	68c3      	ldr	r3, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800e16c:	2600      	movs	r6, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e16e:	4a2a      	ldr	r2, [pc, #168]	; (800e218 <SDMMC_CmdStopTransfer+0xb0>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e170:	f241 140c 	movw	r4, #4364	; 0x110c
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e178:	4d28      	ldr	r5, [pc, #160]	; (800e21c <SDMMC_CmdStopTransfer+0xb4>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e17a:	6812      	ldr	r2, [r2, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e17c:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e17e:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e180:	4b27      	ldr	r3, [pc, #156]	; (800e220 <SDMMC_CmdStopTransfer+0xb8>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e182:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e186:	fba3 3202 	umull	r3, r2, r3, r2
 800e18a:	4b26      	ldr	r3, [pc, #152]	; (800e224 <SDMMC_CmdStopTransfer+0xbc>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e18c:	60c1      	str	r1, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800e18e:	6086      	str	r6, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e190:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e192:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e194:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e198:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e19a:	4923      	ldr	r1, [pc, #140]	; (800e228 <SDMMC_CmdStopTransfer+0xc0>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e19c:	432c      	orrs	r4, r5
 800e19e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e1a0:	b1c3      	cbz	r3, 800e1d4 <SDMMC_CmdStopTransfer+0x6c>
    sta_reg = SDMMCx->STA;
 800e1a2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e1a4:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e1a6:	420a      	tst	r2, r1
 800e1a8:	d0fa      	beq.n	800e1a0 <SDMMC_CmdStopTransfer+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e1aa:	0492      	lsls	r2, r2, #18
 800e1ac:	d4f8      	bmi.n	800e1a0 <SDMMC_CmdStopTransfer+0x38>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e1ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e1b0:	075b      	lsls	r3, r3, #29
 800e1b2:	d417      	bmi.n	800e1e4 <SDMMC_CmdStopTransfer+0x7c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e1b4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e1b6:	f014 0401 	ands.w	r4, r4, #1
 800e1ba:	d11a      	bne.n	800e1f2 <SDMMC_CmdStopTransfer+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e1bc:	4b1b      	ldr	r3, [pc, #108]	; (800e22c <SDMMC_CmdStopTransfer+0xc4>)
 800e1be:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e1c0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	2b0c      	cmp	r3, #12
 800e1c6:	d01b      	beq.n	800e200 <SDMMC_CmdStopTransfer+0x98>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e1c8:	68c3      	ldr	r3, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1ca:	2401      	movs	r4, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e1cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1d0:	60c3      	str	r3, [r0, #12]
 800e1d2:	e005      	b.n	800e1e0 <SDMMC_CmdStopTransfer+0x78>
 800e1d4:	68c3      	ldr	r3, [r0, #12]
      return SDMMC_ERROR_TIMEOUT;
 800e1d6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e1da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1de:	60c3      	str	r3, [r0, #12]
}
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1e4:	2404      	movs	r4, #4
 800e1e6:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e1e8:	68c3      	ldr	r3, [r0, #12]
 800e1ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1ee:	60c3      	str	r3, [r0, #12]
 800e1f0:	e7f6      	b.n	800e1e0 <SDMMC_CmdStopTransfer+0x78>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e1f2:	2401      	movs	r4, #1
 800e1f4:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e1f6:	68c3      	ldr	r3, [r0, #12]
 800e1f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1fc:	60c3      	str	r3, [r0, #12]
 800e1fe:	e7ef      	b.n	800e1e0 <SDMMC_CmdStopTransfer+0x78>
 800e200:	4605      	mov	r5, r0
 800e202:	f7ff fd15 	bl	800dc30 <SDMMC_GetCmdResp1.part.2>
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e206:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800e20a:	bf18      	it	ne
 800e20c:	4604      	movne	r4, r0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e20e:	68eb      	ldr	r3, [r5, #12]
 800e210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e214:	60eb      	str	r3, [r5, #12]
 800e216:	e7e3      	b.n	800e1e0 <SDMMC_CmdStopTransfer+0x78>
 800e218:	200002c4 	.word	0x200002c4
 800e21c:	fffee0c0 	.word	0xfffee0c0
 800e220:	10624dd3 	.word	0x10624dd3
 800e224:	05f5e100 	.word	0x05f5e100
 800e228:	00200045 	.word	0x00200045
 800e22c:	002000c5 	.word	0x002000c5

0800e230 <SDMMC_CmdSelDesel>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e230:	4b1c      	ldr	r3, [pc, #112]	; (800e2a4 <SDMMC_CmdSelDesel+0x74>)
 800e232:	491d      	ldr	r1, [pc, #116]	; (800e2a8 <SDMMC_CmdSelDesel+0x78>)
{
 800e234:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e236:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e238:	f241 1407 	movw	r4, #4359	; 0x1107
  SDMMCx->ARG = Command->Argument;
 800e23c:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e23e:	4d1b      	ldr	r5, [pc, #108]	; (800e2ac <SDMMC_CmdSelDesel+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e240:	fba1 3203 	umull	r3, r2, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e244:	68c1      	ldr	r1, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e246:	f241 3388 	movw	r3, #5000	; 0x1388
 800e24a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e24c:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e24e:	4918      	ldr	r1, [pc, #96]	; (800e2b0 <SDMMC_CmdSelDesel+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e250:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e254:	432c      	orrs	r4, r5
 800e256:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e258:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e25c:	d312      	bcc.n	800e284 <SDMMC_CmdSelDesel+0x54>
    sta_reg = SDMMCx->STA;
 800e25e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e260:	420a      	tst	r2, r1
 800e262:	d0f9      	beq.n	800e258 <SDMMC_CmdSelDesel+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e264:	0494      	lsls	r4, r2, #18
 800e266:	d4f7      	bmi.n	800e258 <SDMMC_CmdSelDesel+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e268:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e26a:	075a      	lsls	r2, r3, #29
 800e26c:	d40e      	bmi.n	800e28c <SDMMC_CmdSelDesel+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e26e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e270:	07db      	lsls	r3, r3, #31
 800e272:	d40f      	bmi.n	800e294 <SDMMC_CmdSelDesel+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e274:	4b0f      	ldr	r3, [pc, #60]	; (800e2b4 <SDMMC_CmdSelDesel+0x84>)
 800e276:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e278:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	2b07      	cmp	r3, #7
 800e27e:	d00d      	beq.n	800e29c <SDMMC_CmdSelDesel+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e280:	2001      	movs	r0, #1
  return errorstate;
 800e282:	e001      	b.n	800e288 <SDMMC_CmdSelDesel+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e284:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e288:	bc30      	pop	{r4, r5}
 800e28a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e28c:	2304      	movs	r3, #4
 800e28e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e290:	4618      	mov	r0, r3
 800e292:	e7f9      	b.n	800e288 <SDMMC_CmdSelDesel+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e294:	2301      	movs	r3, #1
 800e296:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e298:	4618      	mov	r0, r3
 800e29a:	e7f5      	b.n	800e288 <SDMMC_CmdSelDesel+0x58>
}
 800e29c:	bc30      	pop	{r4, r5}
 800e29e:	f7ff bcc7 	b.w	800dc30 <SDMMC_GetCmdResp1.part.2>
 800e2a2:	bf00      	nop
 800e2a4:	200002c4 	.word	0x200002c4
 800e2a8:	10624dd3 	.word	0x10624dd3
 800e2ac:	fffee0c0 	.word	0xfffee0c0
 800e2b0:	00200045 	.word	0x00200045
 800e2b4:	002000c5 	.word	0x002000c5

0800e2b8 <SDMMC_CmdGoIdleState>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2b8:	4b12      	ldr	r3, [pc, #72]	; (800e304 <SDMMC_CmdGoIdleState+0x4c>)
{
 800e2ba:	4602      	mov	r2, r0
  SDMMCx->ARG = Command->Argument;
 800e2bc:	2100      	movs	r1, #0
{
 800e2be:	b410      	push	{r4}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2c0:	4c11      	ldr	r4, [pc, #68]	; (800e308 <SDMMC_CmdGoIdleState+0x50>)
 800e2c2:	6818      	ldr	r0, [r3, #0]
 800e2c4:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 800e2c8:	6091      	str	r1, [r2, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2ca:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2ce:	490f      	ldr	r1, [pc, #60]	; (800e30c <SDMMC_CmdGoIdleState+0x54>)
 800e2d0:	68d4      	ldr	r4, [r2, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2d2:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2d4:	4021      	ands	r1, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2d6:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e2da:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800e2de:	60d1      	str	r1, [r2, #12]
 800e2e0:	e002      	b.n	800e2e8 <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e2e2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800e2e4:	0609      	lsls	r1, r1, #24
 800e2e6:	d407      	bmi.n	800e2f8 <SDMMC_CmdGoIdleState+0x40>
    if (count-- == 0U)
 800e2e8:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e2ec:	d2f9      	bcs.n	800e2e2 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800e2ee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2f6:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2f8:	4b05      	ldr	r3, [pc, #20]	; (800e310 <SDMMC_CmdGoIdleState+0x58>)
  return SDMMC_ERROR_NONE;
 800e2fa:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2fc:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e2fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e302:	4770      	bx	lr
 800e304:	200002c4 	.word	0x200002c4
 800e308:	10624dd3 	.word	0x10624dd3
 800e30c:	fffee0c0 	.word	0xfffee0c0
 800e310:	002000c5 	.word	0x002000c5

0800e314 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e314:	4a1c      	ldr	r2, [pc, #112]	; (800e388 <SDMMC_CmdOperCond+0x74>)
{
 800e316:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e318:	4b1c      	ldr	r3, [pc, #112]	; (800e38c <SDMMC_CmdOperCond+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e31a:	f241 1008 	movw	r0, #4360	; 0x1108
{
 800e31e:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800e320:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e324:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e326:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e328:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e32c:	68cd      	ldr	r5, [r1, #12]
 800e32e:	4c18      	ldr	r4, [pc, #96]	; (800e390 <SDMMC_CmdOperCond+0x7c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e330:	f241 3388 	movw	r3, #5000	; 0x1388
 800e334:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e336:	402c      	ands	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e338:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e33c:	4320      	orrs	r0, r4
 800e33e:	60c8      	str	r0, [r1, #12]

  do
  {
    if (count-- == 0U)
 800e340:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e344:	d313      	bcc.n	800e36e <SDMMC_CmdOperCond+0x5a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800e346:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e348:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e34c:	d0f8      	beq.n	800e340 <SDMMC_CmdOperCond+0x2c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e34e:	0492      	lsls	r2, r2, #18
 800e350:	d4f6      	bmi.n	800e340 <SDMMC_CmdOperCond+0x2c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e352:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e354:	075b      	lsls	r3, r3, #29
 800e356:	d40e      	bmi.n	800e376 <SDMMC_CmdOperCond+0x62>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e358:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800e35a:	f010 0001 	ands.w	r0, r0, #1
 800e35e:	d10d      	bne.n	800e37c <SDMMC_CmdOperCond+0x68>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e360:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e362:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800e366:	d00c      	beq.n	800e382 <SDMMC_CmdOperCond+0x6e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e368:	2340      	movs	r3, #64	; 0x40
 800e36a:	638b      	str	r3, [r1, #56]	; 0x38
 800e36c:	e001      	b.n	800e372 <SDMMC_CmdOperCond+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 800e36e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e372:	bc30      	pop	{r4, r5}
 800e374:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e376:	2004      	movs	r0, #4
 800e378:	6388      	str	r0, [r1, #56]	; 0x38
 800e37a:	e7fa      	b.n	800e372 <SDMMC_CmdOperCond+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e37c:	2001      	movs	r0, #1
 800e37e:	6388      	str	r0, [r1, #56]	; 0x38
 800e380:	e7f7      	b.n	800e372 <SDMMC_CmdOperCond+0x5e>
  }

  return SDMMC_ERROR_NONE;
 800e382:	4618      	mov	r0, r3
  return errorstate;
 800e384:	e7f5      	b.n	800e372 <SDMMC_CmdOperCond+0x5e>
 800e386:	bf00      	nop
 800e388:	200002c4 	.word	0x200002c4
 800e38c:	10624dd3 	.word	0x10624dd3
 800e390:	fffee0c0 	.word	0xfffee0c0

0800e394 <SDMMC_CmdAppCommand>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e394:	4a1c      	ldr	r2, [pc, #112]	; (800e408 <SDMMC_CmdAppCommand+0x74>)
 800e396:	4b1d      	ldr	r3, [pc, #116]	; (800e40c <SDMMC_CmdAppCommand+0x78>)
{
 800e398:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e39a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e39c:	f241 1437 	movw	r4, #4407	; 0x1137
  SDMMCx->ARG = Command->Argument;
 800e3a0:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e3a2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e3a6:	68c1      	ldr	r1, [r0, #12]
 800e3a8:	4d19      	ldr	r5, [pc, #100]	; (800e410 <SDMMC_CmdAppCommand+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e3aa:	f241 3388 	movw	r3, #5000	; 0x1388
 800e3ae:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e3b0:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e3b2:	4918      	ldr	r1, [pc, #96]	; (800e414 <SDMMC_CmdAppCommand+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e3b4:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e3b8:	432c      	orrs	r4, r5
 800e3ba:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e3bc:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e3c0:	d312      	bcc.n	800e3e8 <SDMMC_CmdAppCommand+0x54>
    sta_reg = SDMMCx->STA;
 800e3c2:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e3c4:	420a      	tst	r2, r1
 800e3c6:	d0f9      	beq.n	800e3bc <SDMMC_CmdAppCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e3c8:	0494      	lsls	r4, r2, #18
 800e3ca:	d4f7      	bmi.n	800e3bc <SDMMC_CmdAppCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e3cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e3ce:	075a      	lsls	r2, r3, #29
 800e3d0:	d40e      	bmi.n	800e3f0 <SDMMC_CmdAppCommand+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e3d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e3d4:	07db      	lsls	r3, r3, #31
 800e3d6:	d40f      	bmi.n	800e3f8 <SDMMC_CmdAppCommand+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e3d8:	4b0f      	ldr	r3, [pc, #60]	; (800e418 <SDMMC_CmdAppCommand+0x84>)
 800e3da:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e3dc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	2b37      	cmp	r3, #55	; 0x37
 800e3e2:	d00d      	beq.n	800e400 <SDMMC_CmdAppCommand+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3e4:	2001      	movs	r0, #1
  return errorstate;
 800e3e6:	e001      	b.n	800e3ec <SDMMC_CmdAppCommand+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e3e8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e3ec:	bc30      	pop	{r4, r5}
 800e3ee:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e3f0:	2304      	movs	r3, #4
 800e3f2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	e7f9      	b.n	800e3ec <SDMMC_CmdAppCommand+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	e7f5      	b.n	800e3ec <SDMMC_CmdAppCommand+0x58>
}
 800e400:	bc30      	pop	{r4, r5}
 800e402:	f7ff bc15 	b.w	800dc30 <SDMMC_GetCmdResp1.part.2>
 800e406:	bf00      	nop
 800e408:	200002c4 	.word	0x200002c4
 800e40c:	10624dd3 	.word	0x10624dd3
 800e410:	fffee0c0 	.word	0xfffee0c0
 800e414:	00200045 	.word	0x00200045
 800e418:	002000c5 	.word	0x002000c5

0800e41c <SDMMC_CmdAppOperCommand>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e41c:	4a15      	ldr	r2, [pc, #84]	; (800e474 <SDMMC_CmdAppOperCommand+0x58>)
 800e41e:	4b16      	ldr	r3, [pc, #88]	; (800e478 <SDMMC_CmdAppOperCommand+0x5c>)
{
 800e420:	b430      	push	{r4, r5}
 800e422:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e424:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e426:	f241 1029 	movw	r0, #4393	; 0x1129
  SDMMCx->ARG = Command->Argument;
 800e42a:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e42c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e430:	68e5      	ldr	r5, [r4, #12]
 800e432:	4912      	ldr	r1, [pc, #72]	; (800e47c <SDMMC_CmdAppOperCommand+0x60>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e434:	f241 3388 	movw	r3, #5000	; 0x1388
 800e438:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e43a:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e43c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e440:	4308      	orrs	r0, r1
 800e442:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 800e444:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e448:	d30d      	bcc.n	800e466 <SDMMC_CmdAppOperCommand+0x4a>
    sta_reg = SDMMCx->STA;
 800e44a:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e44c:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e450:	d0f8      	beq.n	800e444 <SDMMC_CmdAppOperCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e452:	0492      	lsls	r2, r2, #18
 800e454:	d4f6      	bmi.n	800e444 <SDMMC_CmdAppOperCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e456:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e458:	f010 0004 	ands.w	r0, r0, #4
 800e45c:	d107      	bne.n	800e46e <SDMMC_CmdAppOperCommand+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e45e:	4b08      	ldr	r3, [pc, #32]	; (800e480 <SDMMC_CmdAppOperCommand+0x64>)
 800e460:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800e462:	bc30      	pop	{r4, r5}
 800e464:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800e466:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e46a:	bc30      	pop	{r4, r5}
 800e46c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e46e:	2004      	movs	r0, #4
 800e470:	63a0      	str	r0, [r4, #56]	; 0x38
 800e472:	e7fa      	b.n	800e46a <SDMMC_CmdAppOperCommand+0x4e>
 800e474:	200002c4 	.word	0x200002c4
 800e478:	10624dd3 	.word	0x10624dd3
 800e47c:	fffee0c0 	.word	0xfffee0c0
 800e480:	002000c5 	.word	0x002000c5

0800e484 <SDMMC_CmdBusWidth>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e484:	4a1c      	ldr	r2, [pc, #112]	; (800e4f8 <SDMMC_CmdBusWidth+0x74>)
 800e486:	4b1d      	ldr	r3, [pc, #116]	; (800e4fc <SDMMC_CmdBusWidth+0x78>)
{
 800e488:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e48a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e48c:	f241 1406 	movw	r4, #4358	; 0x1106
  SDMMCx->ARG = Command->Argument;
 800e490:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e492:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e496:	68c1      	ldr	r1, [r0, #12]
 800e498:	4d19      	ldr	r5, [pc, #100]	; (800e500 <SDMMC_CmdBusWidth+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e49a:	f241 3388 	movw	r3, #5000	; 0x1388
 800e49e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e4a0:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e4a2:	4918      	ldr	r1, [pc, #96]	; (800e504 <SDMMC_CmdBusWidth+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e4a4:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e4a8:	432c      	orrs	r4, r5
 800e4aa:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e4ac:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e4b0:	d312      	bcc.n	800e4d8 <SDMMC_CmdBusWidth+0x54>
    sta_reg = SDMMCx->STA;
 800e4b2:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e4b4:	420a      	tst	r2, r1
 800e4b6:	d0f9      	beq.n	800e4ac <SDMMC_CmdBusWidth+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e4b8:	0494      	lsls	r4, r2, #18
 800e4ba:	d4f7      	bmi.n	800e4ac <SDMMC_CmdBusWidth+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e4bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e4be:	075a      	lsls	r2, r3, #29
 800e4c0:	d40e      	bmi.n	800e4e0 <SDMMC_CmdBusWidth+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e4c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e4c4:	07db      	lsls	r3, r3, #31
 800e4c6:	d40f      	bmi.n	800e4e8 <SDMMC_CmdBusWidth+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e4c8:	4b0f      	ldr	r3, [pc, #60]	; (800e508 <SDMMC_CmdBusWidth+0x84>)
 800e4ca:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e4cc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	2b06      	cmp	r3, #6
 800e4d2:	d00d      	beq.n	800e4f0 <SDMMC_CmdBusWidth+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4d4:	2001      	movs	r0, #1
  return errorstate;
 800e4d6:	e001      	b.n	800e4dc <SDMMC_CmdBusWidth+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e4d8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e4dc:	bc30      	pop	{r4, r5}
 800e4de:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e4e0:	2304      	movs	r3, #4
 800e4e2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	e7f9      	b.n	800e4dc <SDMMC_CmdBusWidth+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	e7f5      	b.n	800e4dc <SDMMC_CmdBusWidth+0x58>
}
 800e4f0:	bc30      	pop	{r4, r5}
 800e4f2:	f7ff bb9d 	b.w	800dc30 <SDMMC_GetCmdResp1.part.2>
 800e4f6:	bf00      	nop
 800e4f8:	200002c4 	.word	0x200002c4
 800e4fc:	10624dd3 	.word	0x10624dd3
 800e500:	fffee0c0 	.word	0xfffee0c0
 800e504:	00200045 	.word	0x00200045
 800e508:	002000c5 	.word	0x002000c5

0800e50c <SDMMC_CmdSendSCR>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e50c:	4a1c      	ldr	r2, [pc, #112]	; (800e580 <SDMMC_CmdSendSCR+0x74>)
  SDMMCx->ARG = Command->Argument;
 800e50e:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e510:	4b1c      	ldr	r3, [pc, #112]	; (800e584 <SDMMC_CmdSendSCR+0x78>)
{
 800e512:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e514:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e516:	f241 1433 	movw	r4, #4403	; 0x1133
  SDMMCx->ARG = Command->Argument;
 800e51a:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e51c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e520:	68c1      	ldr	r1, [r0, #12]
 800e522:	4d19      	ldr	r5, [pc, #100]	; (800e588 <SDMMC_CmdSendSCR+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e524:	f241 3388 	movw	r3, #5000	; 0x1388
 800e528:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e52a:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e52c:	4917      	ldr	r1, [pc, #92]	; (800e58c <SDMMC_CmdSendSCR+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e52e:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e532:	432c      	orrs	r4, r5
 800e534:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e536:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e53a:	d312      	bcc.n	800e562 <SDMMC_CmdSendSCR+0x56>
    sta_reg = SDMMCx->STA;
 800e53c:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e53e:	420a      	tst	r2, r1
 800e540:	d0f9      	beq.n	800e536 <SDMMC_CmdSendSCR+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e542:	0494      	lsls	r4, r2, #18
 800e544:	d4f7      	bmi.n	800e536 <SDMMC_CmdSendSCR+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e546:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e548:	075a      	lsls	r2, r3, #29
 800e54a:	d40e      	bmi.n	800e56a <SDMMC_CmdSendSCR+0x5e>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e54c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e54e:	07db      	lsls	r3, r3, #31
 800e550:	d40f      	bmi.n	800e572 <SDMMC_CmdSendSCR+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e552:	4b0f      	ldr	r3, [pc, #60]	; (800e590 <SDMMC_CmdSendSCR+0x84>)
 800e554:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e556:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e558:	b2db      	uxtb	r3, r3
 800e55a:	2b33      	cmp	r3, #51	; 0x33
 800e55c:	d00d      	beq.n	800e57a <SDMMC_CmdSendSCR+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e55e:	2001      	movs	r0, #1
  return errorstate;
 800e560:	e001      	b.n	800e566 <SDMMC_CmdSendSCR+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 800e562:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e566:	bc30      	pop	{r4, r5}
 800e568:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e56a:	2304      	movs	r3, #4
 800e56c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e56e:	4618      	mov	r0, r3
 800e570:	e7f9      	b.n	800e566 <SDMMC_CmdSendSCR+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e572:	2301      	movs	r3, #1
 800e574:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e576:	4618      	mov	r0, r3
 800e578:	e7f5      	b.n	800e566 <SDMMC_CmdSendSCR+0x5a>
}
 800e57a:	bc30      	pop	{r4, r5}
 800e57c:	f7ff bb58 	b.w	800dc30 <SDMMC_GetCmdResp1.part.2>
 800e580:	200002c4 	.word	0x200002c4
 800e584:	10624dd3 	.word	0x10624dd3
 800e588:	fffee0c0 	.word	0xfffee0c0
 800e58c:	00200045 	.word	0x00200045
 800e590:	002000c5 	.word	0x002000c5

0800e594 <SDMMC_CmdSendCID>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e594:	4a18      	ldr	r2, [pc, #96]	; (800e5f8 <SDMMC_CmdSendCID+0x64>)
{
 800e596:	4601      	mov	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e598:	4b18      	ldr	r3, [pc, #96]	; (800e5fc <SDMMC_CmdSendCID+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e59a:	f241 3002 	movw	r0, #4866	; 0x1302
{
 800e59e:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800e5a0:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e5a2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e5a4:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e5a6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5aa:	68cd      	ldr	r5, [r1, #12]
 800e5ac:	4c14      	ldr	r4, [pc, #80]	; (800e600 <SDMMC_CmdSendCID+0x6c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e5ae:	f241 3388 	movw	r3, #5000	; 0x1388
 800e5b2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5b4:	402c      	ands	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e5b6:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5ba:	4320      	orrs	r0, r4
 800e5bc:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 800e5be:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e5c2:	d30f      	bcc.n	800e5e4 <SDMMC_CmdSendCID+0x50>
    sta_reg = SDMMCx->STA;
 800e5c4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e5c6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e5ca:	d0f8      	beq.n	800e5be <SDMMC_CmdSendCID+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e5cc:	0492      	lsls	r2, r2, #18
 800e5ce:	d4f6      	bmi.n	800e5be <SDMMC_CmdSendCID+0x2a>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e5d0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e5d2:	075b      	lsls	r3, r3, #29
 800e5d4:	d40a      	bmi.n	800e5ec <SDMMC_CmdSendCID+0x58>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e5d6:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800e5d8:	f010 0001 	ands.w	r0, r0, #1
 800e5dc:	d109      	bne.n	800e5f2 <SDMMC_CmdSendCID+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e5de:	4b09      	ldr	r3, [pc, #36]	; (800e604 <SDMMC_CmdSendCID+0x70>)
 800e5e0:	638b      	str	r3, [r1, #56]	; 0x38
 800e5e2:	e001      	b.n	800e5e8 <SDMMC_CmdSendCID+0x54>
      return SDMMC_ERROR_TIMEOUT;
 800e5e4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e5e8:	bc30      	pop	{r4, r5}
 800e5ea:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e5ec:	2004      	movs	r0, #4
 800e5ee:	6388      	str	r0, [r1, #56]	; 0x38
 800e5f0:	e7fa      	b.n	800e5e8 <SDMMC_CmdSendCID+0x54>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e5f2:	2001      	movs	r0, #1
 800e5f4:	6388      	str	r0, [r1, #56]	; 0x38
 800e5f6:	e7f7      	b.n	800e5e8 <SDMMC_CmdSendCID+0x54>
 800e5f8:	200002c4 	.word	0x200002c4
 800e5fc:	10624dd3 	.word	0x10624dd3
 800e600:	fffee0c0 	.word	0xfffee0c0
 800e604:	002000c5 	.word	0x002000c5

0800e608 <SDMMC_CmdSendCSD>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e608:	4a18      	ldr	r2, [pc, #96]	; (800e66c <SDMMC_CmdSendCSD+0x64>)
 800e60a:	4b19      	ldr	r3, [pc, #100]	; (800e670 <SDMMC_CmdSendCSD+0x68>)
{
 800e60c:	b430      	push	{r4, r5}
 800e60e:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e610:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e612:	f241 3009 	movw	r0, #4873	; 0x1309
  SDMMCx->ARG = Command->Argument;
 800e616:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e618:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e61c:	68e5      	ldr	r5, [r4, #12]
 800e61e:	4915      	ldr	r1, [pc, #84]	; (800e674 <SDMMC_CmdSendCSD+0x6c>)
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e620:	f241 3388 	movw	r3, #5000	; 0x1388
 800e624:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e626:	4029      	ands	r1, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e628:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e62c:	4308      	orrs	r0, r1
 800e62e:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 800e630:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e634:	d30f      	bcc.n	800e656 <SDMMC_CmdSendCSD+0x4e>
    sta_reg = SDMMCx->STA;
 800e636:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e638:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e63c:	d0f8      	beq.n	800e630 <SDMMC_CmdSendCSD+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e63e:	0492      	lsls	r2, r2, #18
 800e640:	d4f6      	bmi.n	800e630 <SDMMC_CmdSendCSD+0x28>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e642:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e644:	075b      	lsls	r3, r3, #29
 800e646:	d40a      	bmi.n	800e65e <SDMMC_CmdSendCSD+0x56>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e648:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e64a:	f010 0001 	ands.w	r0, r0, #1
 800e64e:	d109      	bne.n	800e664 <SDMMC_CmdSendCSD+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e650:	4b09      	ldr	r3, [pc, #36]	; (800e678 <SDMMC_CmdSendCSD+0x70>)
 800e652:	63a3      	str	r3, [r4, #56]	; 0x38
 800e654:	e001      	b.n	800e65a <SDMMC_CmdSendCSD+0x52>
      return SDMMC_ERROR_TIMEOUT;
 800e656:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e65a:	bc30      	pop	{r4, r5}
 800e65c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e65e:	2004      	movs	r0, #4
 800e660:	63a0      	str	r0, [r4, #56]	; 0x38
 800e662:	e7fa      	b.n	800e65a <SDMMC_CmdSendCSD+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e664:	2001      	movs	r0, #1
 800e666:	63a0      	str	r0, [r4, #56]	; 0x38
 800e668:	e7f7      	b.n	800e65a <SDMMC_CmdSendCSD+0x52>
 800e66a:	bf00      	nop
 800e66c:	200002c4 	.word	0x200002c4
 800e670:	10624dd3 	.word	0x10624dd3
 800e674:	fffee0c0 	.word	0xfffee0c0
 800e678:	002000c5 	.word	0x002000c5

0800e67c <SDMMC_CmdSetRelAdd>:
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e67c:	4b25      	ldr	r3, [pc, #148]	; (800e714 <SDMMC_CmdSetRelAdd+0x98>)
 800e67e:	4a26      	ldr	r2, [pc, #152]	; (800e718 <SDMMC_CmdSetRelAdd+0x9c>)
{
 800e680:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 800e682:	2400      	movs	r4, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e684:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e686:	4d25      	ldr	r5, [pc, #148]	; (800e71c <SDMMC_CmdSetRelAdd+0xa0>)
  SDMMCx->ARG = Command->Argument;
 800e688:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e68a:	f241 1403 	movw	r4, #4355	; 0x1103
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e68e:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e692:	68c6      	ldr	r6, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e694:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e696:	4035      	ands	r5, r6
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e698:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e69c:	432c      	orrs	r4, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e69e:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e6a2:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e6a4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e6a8:	d311      	bcc.n	800e6ce <SDMMC_CmdSetRelAdd+0x52>
    sta_reg = SDMMCx->STA;
 800e6aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e6ac:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e6b0:	d0f8      	beq.n	800e6a4 <SDMMC_CmdSetRelAdd+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e6b2:	0496      	lsls	r6, r2, #18
 800e6b4:	d4f6      	bmi.n	800e6a4 <SDMMC_CmdSetRelAdd+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e6b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e6b8:	075d      	lsls	r5, r3, #29
 800e6ba:	d40c      	bmi.n	800e6d6 <SDMMC_CmdSetRelAdd+0x5a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e6bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e6be:	07dc      	lsls	r4, r3, #31
 800e6c0:	d40d      	bmi.n	800e6de <SDMMC_CmdSetRelAdd+0x62>
  return (uint8_t)(SDMMCx->RESPCMD);
 800e6c2:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	2b03      	cmp	r3, #3
 800e6c8:	d00d      	beq.n	800e6e6 <SDMMC_CmdSetRelAdd+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6ca:	2001      	movs	r0, #1
 800e6cc:	e001      	b.n	800e6d2 <SDMMC_CmdSetRelAdd+0x56>
      return SDMMC_ERROR_TIMEOUT;
 800e6ce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e6d2:	bc70      	pop	{r4, r5, r6}
 800e6d4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e6d6:	2304      	movs	r3, #4
 800e6d8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6da:	4618      	mov	r0, r3
 800e6dc:	e7f9      	b.n	800e6d2 <SDMMC_CmdSetRelAdd+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e6de:	2301      	movs	r3, #1
 800e6e0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	e7f5      	b.n	800e6d2 <SDMMC_CmdSetRelAdd+0x56>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e6e6:	4b0e      	ldr	r3, [pc, #56]	; (800e720 <SDMMC_CmdSetRelAdd+0xa4>)
 800e6e8:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800e6ea:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e6ec:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800e6f0:	d009      	beq.n	800e706 <SDMMC_CmdSetRelAdd+0x8a>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e6f2:	045a      	lsls	r2, r3, #17
 800e6f4:	d40a      	bmi.n	800e70c <SDMMC_CmdSetRelAdd+0x90>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e6f6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800e6fa:	bf0c      	ite	eq
 800e6fc:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800e700:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800e704:	e7e5      	b.n	800e6d2 <SDMMC_CmdSetRelAdd+0x56>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e706:	0c1b      	lsrs	r3, r3, #16
 800e708:	800b      	strh	r3, [r1, #0]
 800e70a:	e7e2      	b.n	800e6d2 <SDMMC_CmdSetRelAdd+0x56>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e70c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800e710:	e7df      	b.n	800e6d2 <SDMMC_CmdSetRelAdd+0x56>
 800e712:	bf00      	nop
 800e714:	200002c4 	.word	0x200002c4
 800e718:	10624dd3 	.word	0x10624dd3
 800e71c:	fffee0c0 	.word	0xfffee0c0
 800e720:	002000c5 	.word	0x002000c5

0800e724 <SDMMC_CmdSendStatus>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e724:	4a1c      	ldr	r2, [pc, #112]	; (800e798 <SDMMC_CmdSendStatus+0x74>)
 800e726:	4b1d      	ldr	r3, [pc, #116]	; (800e79c <SDMMC_CmdSendStatus+0x78>)
{
 800e728:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e72a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e72c:	f241 140d 	movw	r4, #4365	; 0x110d
  SDMMCx->ARG = Command->Argument;
 800e730:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e732:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e736:	68c1      	ldr	r1, [r0, #12]
 800e738:	4d19      	ldr	r5, [pc, #100]	; (800e7a0 <SDMMC_CmdSendStatus+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e73a:	f241 3388 	movw	r3, #5000	; 0x1388
 800e73e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e740:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e742:	4918      	ldr	r1, [pc, #96]	; (800e7a4 <SDMMC_CmdSendStatus+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e744:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e748:	432c      	orrs	r4, r5
 800e74a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e74c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e750:	d312      	bcc.n	800e778 <SDMMC_CmdSendStatus+0x54>
    sta_reg = SDMMCx->STA;
 800e752:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e754:	420a      	tst	r2, r1
 800e756:	d0f9      	beq.n	800e74c <SDMMC_CmdSendStatus+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e758:	0494      	lsls	r4, r2, #18
 800e75a:	d4f7      	bmi.n	800e74c <SDMMC_CmdSendStatus+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e75c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e75e:	075a      	lsls	r2, r3, #29
 800e760:	d40e      	bmi.n	800e780 <SDMMC_CmdSendStatus+0x5c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e762:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e764:	07db      	lsls	r3, r3, #31
 800e766:	d40f      	bmi.n	800e788 <SDMMC_CmdSendStatus+0x64>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e768:	4b0f      	ldr	r3, [pc, #60]	; (800e7a8 <SDMMC_CmdSendStatus+0x84>)
 800e76a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e76c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	2b0d      	cmp	r3, #13
 800e772:	d00d      	beq.n	800e790 <SDMMC_CmdSendStatus+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e774:	2001      	movs	r0, #1
  return errorstate;
 800e776:	e001      	b.n	800e77c <SDMMC_CmdSendStatus+0x58>
      return SDMMC_ERROR_TIMEOUT;
 800e778:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e77c:	bc30      	pop	{r4, r5}
 800e77e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e780:	2304      	movs	r3, #4
 800e782:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e784:	4618      	mov	r0, r3
 800e786:	e7f9      	b.n	800e77c <SDMMC_CmdSendStatus+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e788:	2301      	movs	r3, #1
 800e78a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e78c:	4618      	mov	r0, r3
 800e78e:	e7f5      	b.n	800e77c <SDMMC_CmdSendStatus+0x58>
}
 800e790:	bc30      	pop	{r4, r5}
 800e792:	f7ff ba4d 	b.w	800dc30 <SDMMC_GetCmdResp1.part.2>
 800e796:	bf00      	nop
 800e798:	200002c4 	.word	0x200002c4
 800e79c:	10624dd3 	.word	0x10624dd3
 800e7a0:	fffee0c0 	.word	0xfffee0c0
 800e7a4:	00200045 	.word	0x00200045
 800e7a8:	002000c5 	.word	0x002000c5

0800e7ac <SDMMC_CmdStatusRegister>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e7ac:	4a1c      	ldr	r2, [pc, #112]	; (800e820 <SDMMC_CmdStatusRegister+0x74>)
  SDMMCx->ARG = Command->Argument;
 800e7ae:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e7b0:	4b1c      	ldr	r3, [pc, #112]	; (800e824 <SDMMC_CmdStatusRegister+0x78>)
{
 800e7b2:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e7b4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e7b6:	f241 140d 	movw	r4, #4365	; 0x110d
  SDMMCx->ARG = Command->Argument;
 800e7ba:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e7bc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e7c0:	68c1      	ldr	r1, [r0, #12]
 800e7c2:	4d19      	ldr	r5, [pc, #100]	; (800e828 <SDMMC_CmdStatusRegister+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e7c4:	f241 3388 	movw	r3, #5000	; 0x1388
 800e7c8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e7ca:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e7cc:	4917      	ldr	r1, [pc, #92]	; (800e82c <SDMMC_CmdStatusRegister+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e7ce:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e7d2:	432c      	orrs	r4, r5
 800e7d4:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e7d6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e7da:	d312      	bcc.n	800e802 <SDMMC_CmdStatusRegister+0x56>
    sta_reg = SDMMCx->STA;
 800e7dc:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e7de:	420a      	tst	r2, r1
 800e7e0:	d0f9      	beq.n	800e7d6 <SDMMC_CmdStatusRegister+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e7e2:	0494      	lsls	r4, r2, #18
 800e7e4:	d4f7      	bmi.n	800e7d6 <SDMMC_CmdStatusRegister+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e7e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e7e8:	075a      	lsls	r2, r3, #29
 800e7ea:	d40e      	bmi.n	800e80a <SDMMC_CmdStatusRegister+0x5e>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e7ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e7ee:	07db      	lsls	r3, r3, #31
 800e7f0:	d40f      	bmi.n	800e812 <SDMMC_CmdStatusRegister+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e7f2:	4b0f      	ldr	r3, [pc, #60]	; (800e830 <SDMMC_CmdStatusRegister+0x84>)
 800e7f4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e7f6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	2b0d      	cmp	r3, #13
 800e7fc:	d00d      	beq.n	800e81a <SDMMC_CmdStatusRegister+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7fe:	2001      	movs	r0, #1
  return errorstate;
 800e800:	e001      	b.n	800e806 <SDMMC_CmdStatusRegister+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 800e802:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e806:	bc30      	pop	{r4, r5}
 800e808:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e80a:	2304      	movs	r3, #4
 800e80c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e80e:	4618      	mov	r0, r3
 800e810:	e7f9      	b.n	800e806 <SDMMC_CmdStatusRegister+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e812:	2301      	movs	r3, #1
 800e814:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e816:	4618      	mov	r0, r3
 800e818:	e7f5      	b.n	800e806 <SDMMC_CmdStatusRegister+0x5a>
}
 800e81a:	bc30      	pop	{r4, r5}
 800e81c:	f7ff ba08 	b.w	800dc30 <SDMMC_GetCmdResp1.part.2>
 800e820:	200002c4 	.word	0x200002c4
 800e824:	10624dd3 	.word	0x10624dd3
 800e828:	fffee0c0 	.word	0xfffee0c0
 800e82c:	00200045 	.word	0x00200045
 800e830:	002000c5 	.word	0x002000c5

0800e834 <SDMMC_CmdVoltageSwitch>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e834:	4a1c      	ldr	r2, [pc, #112]	; (800e8a8 <SDMMC_CmdVoltageSwitch+0x74>)
  SDMMCx->ARG = Command->Argument;
 800e836:	2100      	movs	r1, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e838:	4b1c      	ldr	r3, [pc, #112]	; (800e8ac <SDMMC_CmdVoltageSwitch+0x78>)
{
 800e83a:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e83c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e83e:	f241 140b 	movw	r4, #4363	; 0x110b
  SDMMCx->ARG = Command->Argument;
 800e842:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e844:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e848:	68c1      	ldr	r1, [r0, #12]
 800e84a:	4d19      	ldr	r5, [pc, #100]	; (800e8b0 <SDMMC_CmdVoltageSwitch+0x7c>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e84c:	f241 3388 	movw	r3, #5000	; 0x1388
 800e850:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e852:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e854:	4917      	ldr	r1, [pc, #92]	; (800e8b4 <SDMMC_CmdVoltageSwitch+0x80>)
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e856:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e85a:	432c      	orrs	r4, r5
 800e85c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800e85e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e862:	d312      	bcc.n	800e88a <SDMMC_CmdVoltageSwitch+0x56>
    sta_reg = SDMMCx->STA;
 800e864:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e866:	420a      	tst	r2, r1
 800e868:	d0f9      	beq.n	800e85e <SDMMC_CmdVoltageSwitch+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e86a:	0494      	lsls	r4, r2, #18
 800e86c:	d4f7      	bmi.n	800e85e <SDMMC_CmdVoltageSwitch+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e86e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e870:	075a      	lsls	r2, r3, #29
 800e872:	d40e      	bmi.n	800e892 <SDMMC_CmdVoltageSwitch+0x5e>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e874:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e876:	07db      	lsls	r3, r3, #31
 800e878:	d40f      	bmi.n	800e89a <SDMMC_CmdVoltageSwitch+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e87a:	4b0f      	ldr	r3, [pc, #60]	; (800e8b8 <SDMMC_CmdVoltageSwitch+0x84>)
 800e87c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e87e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e880:	b2db      	uxtb	r3, r3
 800e882:	2b0b      	cmp	r3, #11
 800e884:	d00d      	beq.n	800e8a2 <SDMMC_CmdVoltageSwitch+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e886:	2001      	movs	r0, #1
  return errorstate;
 800e888:	e001      	b.n	800e88e <SDMMC_CmdVoltageSwitch+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 800e88a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e88e:	bc30      	pop	{r4, r5}
 800e890:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e892:	2304      	movs	r3, #4
 800e894:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e896:	4618      	mov	r0, r3
 800e898:	e7f9      	b.n	800e88e <SDMMC_CmdVoltageSwitch+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e89a:	2301      	movs	r3, #1
 800e89c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e89e:	4618      	mov	r0, r3
 800e8a0:	e7f5      	b.n	800e88e <SDMMC_CmdVoltageSwitch+0x5a>
}
 800e8a2:	bc30      	pop	{r4, r5}
 800e8a4:	f7ff b9c4 	b.w	800dc30 <SDMMC_GetCmdResp1.part.2>
 800e8a8:	200002c4 	.word	0x200002c4
 800e8ac:	10624dd3 	.word	0x10624dd3
 800e8b0:	fffee0c0 	.word	0xfffee0c0
 800e8b4:	00200045 	.word	0x00200045
 800e8b8:	002000c5 	.word	0x002000c5

0800e8bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e8bc:	b084      	sub	sp, #16
 800e8be:	b430      	push	{r4, r5}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e8c0:	9d08      	ldr	r5, [sp, #32]
{
 800e8c2:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e8c4:	2d01      	cmp	r5, #1
{
 800e8c6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e8ca:	d131      	bne.n	800e930 <USB_CoreInit+0x74>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8cc:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e8ce:	4b2e      	ldr	r3, [pc, #184]	; (800e988 <USB_CoreInit+0xcc>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800e8d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8d6:	6382      	str	r2, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800e8d8:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e8da:	68c2      	ldr	r2, [r0, #12]
 800e8dc:	ea03 0302 	and.w	r3, r3, r2
 800e8e0:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e8e2:	68c3      	ldr	r3, [r0, #12]
 800e8e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e8e8:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800e8ea:	d044      	beq.n	800e976 <USB_CoreInit+0xba>
{
 800e8ec:	4b27      	ldr	r3, [pc, #156]	; (800e98c <USB_CoreInit+0xd0>)
 800e8ee:	e001      	b.n	800e8f4 <USB_CoreInit+0x38>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e8f0:	3b01      	subs	r3, #1
 800e8f2:	d045      	beq.n	800e980 <USB_CoreInit+0xc4>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e8f4:	6902      	ldr	r2, [r0, #16]
 800e8f6:	2a00      	cmp	r2, #0
 800e8f8:	dafa      	bge.n	800e8f0 <USB_CoreInit+0x34>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e8fa:	6903      	ldr	r3, [r0, #16]
 800e8fc:	4a23      	ldr	r2, [pc, #140]	; (800e98c <USB_CoreInit+0xd0>)
 800e8fe:	f043 0301 	orr.w	r3, r3, #1
 800e902:	6103      	str	r3, [r0, #16]
 800e904:	e001      	b.n	800e90a <USB_CoreInit+0x4e>

  do
  {
    if (++count > 200000U)
 800e906:	3a01      	subs	r2, #1
 800e908:	d03a      	beq.n	800e980 <USB_CoreInit+0xc4>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e90a:	6903      	ldr	r3, [r0, #16]
 800e90c:	f013 0301 	ands.w	r3, r3, #1
 800e910:	d1f9      	bne.n	800e906 <USB_CoreInit+0x4a>
  if (cfg.dma_enable == 1U)
 800e912:	9a06      	ldr	r2, [sp, #24]
 800e914:	2a01      	cmp	r2, #1
 800e916:	d107      	bne.n	800e928 <USB_CoreInit+0x6c>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e918:	6882      	ldr	r2, [r0, #8]
 800e91a:	f042 0206 	orr.w	r2, r2, #6
 800e91e:	6082      	str	r2, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e920:	6882      	ldr	r2, [r0, #8]
 800e922:	f042 0220 	orr.w	r2, r2, #32
 800e926:	6082      	str	r2, [r0, #8]
}
 800e928:	4618      	mov	r0, r3
 800e92a:	bc30      	pop	{r4, r5}
 800e92c:	b004      	add	sp, #16
 800e92e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e930:	68c2      	ldr	r2, [r0, #12]
 800e932:	4b16      	ldr	r3, [pc, #88]	; (800e98c <USB_CoreInit+0xd0>)
 800e934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e938:	60c2      	str	r2, [r0, #12]
 800e93a:	e001      	b.n	800e940 <USB_CoreInit+0x84>
    if (++count > 200000U)
 800e93c:	3b01      	subs	r3, #1
 800e93e:	d021      	beq.n	800e984 <USB_CoreInit+0xc8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e940:	6902      	ldr	r2, [r0, #16]
 800e942:	2a00      	cmp	r2, #0
 800e944:	dafa      	bge.n	800e93c <USB_CoreInit+0x80>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e946:	6903      	ldr	r3, [r0, #16]
 800e948:	4a10      	ldr	r2, [pc, #64]	; (800e98c <USB_CoreInit+0xd0>)
 800e94a:	f043 0301 	orr.w	r3, r3, #1
 800e94e:	6103      	str	r3, [r0, #16]
 800e950:	e001      	b.n	800e956 <USB_CoreInit+0x9a>
    if (++count > 200000U)
 800e952:	3a01      	subs	r2, #1
 800e954:	d016      	beq.n	800e984 <USB_CoreInit+0xc8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e956:	6903      	ldr	r3, [r0, #16]
 800e958:	f013 0301 	ands.w	r3, r3, #1
 800e95c:	d1f9      	bne.n	800e952 <USB_CoreInit+0x96>
    if (cfg.battery_charging_enable == 0U)
 800e95e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e960:	b922      	cbnz	r2, 800e96c <USB_CoreInit+0xb0>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e962:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800e964:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e968:	6382      	str	r2, [r0, #56]	; 0x38
 800e96a:	e7d2      	b.n	800e912 <USB_CoreInit+0x56>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e96c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800e96e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e972:	6382      	str	r2, [r0, #56]	; 0x38
 800e974:	e7cd      	b.n	800e912 <USB_CoreInit+0x56>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e976:	68c3      	ldr	r3, [r0, #12]
 800e978:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e97c:	60c3      	str	r3, [r0, #12]
 800e97e:	e7b5      	b.n	800e8ec <USB_CoreInit+0x30>
      return HAL_TIMEOUT;
 800e980:	2303      	movs	r3, #3
 800e982:	e7c6      	b.n	800e912 <USB_CoreInit+0x56>
 800e984:	2303      	movs	r3, #3
 800e986:	e7ea      	b.n	800e95e <USB_CoreInit+0xa2>
 800e988:	ffbdffbf 	.word	0xffbdffbf
 800e98c:	00030d40 	.word	0x00030d40

0800e990 <USB_EnableGlobalInt>:
{
 800e990:	4602      	mov	r2, r0
}
 800e992:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e994:	6893      	ldr	r3, [r2, #8]
 800e996:	f043 0301 	orr.w	r3, r3, #1
 800e99a:	6093      	str	r3, [r2, #8]
}
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop

0800e9a0 <USB_DisableGlobalInt>:
{
 800e9a0:	4602      	mov	r2, r0
}
 800e9a2:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e9a4:	6893      	ldr	r3, [r2, #8]
 800e9a6:	f023 0301 	bic.w	r3, r3, #1
 800e9aa:	6093      	str	r3, [r2, #8]
}
 800e9ac:	4770      	bx	lr
 800e9ae:	bf00      	nop

0800e9b0 <USB_SetCurrentMode>:
{
 800e9b0:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e9b2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800e9b4:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e9b6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e9ba:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800e9bc:	d00b      	beq.n	800e9d6 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800e9be:	b941      	cbnz	r1, 800e9d2 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e9c0:	68c3      	ldr	r3, [r0, #12]
 800e9c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e9c6:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800e9c8:	2032      	movs	r0, #50	; 0x32
 800e9ca:	f7f2 f82f 	bl	8000a2c <HAL_Delay>
  return HAL_OK;
 800e9ce:	2000      	movs	r0, #0
}
 800e9d0:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800e9d2:	2001      	movs	r0, #1
}
 800e9d4:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e9d6:	68c3      	ldr	r3, [r0, #12]
 800e9d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e9dc:	60c3      	str	r3, [r0, #12]
 800e9de:	e7f3      	b.n	800e9c8 <USB_SetCurrentMode+0x18>

0800e9e0 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e9e0:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 800e9e2:	0892      	lsrs	r2, r2, #2
 800e9e4:	d00d      	beq.n	800ea02 <USB_ReadPacket+0x22>
 800e9e6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
{
 800e9ea:	b410      	push	{r4}
 800e9ec:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint32_t *pDest = (uint32_t *)dest;
 800e9f0:	4608      	mov	r0, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	f840 3b04 	str.w	r3, [r0], #4
  for (i = 0U; i < count32b; i++)
 800e9f8:	4282      	cmp	r2, r0
 800e9fa:	d1fa      	bne.n	800e9f2 <USB_ReadPacket+0x12>
}
 800e9fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea00:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800ea02:	4608      	mov	r0, r1
}
 800ea04:	4770      	bx	lr
 800ea06:	bf00      	nop

0800ea08 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800ea08:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800ea0a:	6980      	ldr	r0, [r0, #24]
}
 800ea0c:	4010      	ands	r0, r2
 800ea0e:	4770      	bx	lr

0800ea10 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800ea10:	6940      	ldr	r0, [r0, #20]
}
 800ea12:	f000 0001 	and.w	r0, r0, #1
 800ea16:	4770      	bx	lr

0800ea18 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ea18:	b084      	sub	sp, #16
 800ea1a:	b530      	push	{r4, r5, lr}
 800ea1c:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ea1e:	2500      	movs	r5, #0
{
 800ea20:	b083      	sub	sp, #12
  USBx_PCGCCTL = 0U;
 800ea22:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ea26:	6ba5      	ldr	r5, [r4, #56]	; 0x38
{
 800ea28:	a807      	add	r0, sp, #28
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ea2a:	f425 1500 	bic.w	r5, r5, #2097152	; 0x200000
 800ea2e:	63a5      	str	r5, [r4, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800ea30:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800ea32:	f425 3500 	bic.w	r5, r5, #131072	; 0x20000
 800ea36:	63a5      	str	r5, [r4, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ea38:	6be5      	ldr	r5, [r4, #60]	; 0x3c
{
 800ea3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ea3e:	05eb      	lsls	r3, r5, #23
 800ea40:	9908      	ldr	r1, [sp, #32]
 800ea42:	d565      	bpl.n	800eb10 <USB_HostInit+0xf8>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800ea44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea46:	2b03      	cmp	r3, #3
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ea48:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800ea4c:	d063      	beq.n	800eb16 <USB_HostInit+0xfe>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ea4e:	f023 0304 	bic.w	r3, r3, #4
 800ea52:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ea56:	f44f 6284 	mov.w	r2, #1056	; 0x420
 800ea5a:	4b31      	ldr	r3, [pc, #196]	; (800eb20 <USB_HostInit+0x108>)
 800ea5c:	6122      	str	r2, [r4, #16]
 800ea5e:	e001      	b.n	800ea64 <USB_HostInit+0x4c>
    if (++count > 200000U)
 800ea60:	3b01      	subs	r3, #1
 800ea62:	d002      	beq.n	800ea6a <USB_HostInit+0x52>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ea64:	6922      	ldr	r2, [r4, #16]
 800ea66:	0695      	lsls	r5, r2, #26
 800ea68:	d4fa      	bmi.n	800ea60 <USB_HostInit+0x48>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ea6a:	2210      	movs	r2, #16
 800ea6c:	4b2c      	ldr	r3, [pc, #176]	; (800eb20 <USB_HostInit+0x108>)
 800ea6e:	6122      	str	r2, [r4, #16]
 800ea70:	e001      	b.n	800ea76 <USB_HostInit+0x5e>
    if (++count > 200000U)
 800ea72:	3b01      	subs	r3, #1
 800ea74:	d002      	beq.n	800ea7c <USB_HostInit+0x64>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ea76:	6922      	ldr	r2, [r4, #16]
 800ea78:	06d0      	lsls	r0, r2, #27
 800ea7a:	d4fa      	bmi.n	800ea72 <USB_HostInit+0x5a>
  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
  (void)USB_FlushRxFifo(USBx);

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ea7c:	b159      	cbz	r1, 800ea96 <USB_HostInit+0x7e>
 800ea7e:	2200      	movs	r2, #0
 800ea80:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ea84:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 800ea88:	4610      	mov	r0, r2
  for (i = 0U; i < cfg.Host_channels; i++)
 800ea8a:	3201      	adds	r2, #1
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ea8c:	609d      	str	r5, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ea8e:	60d8      	str	r0, [r3, #12]
 800ea90:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.Host_channels; i++)
 800ea92:	428a      	cmp	r2, r1
 800ea94:	d1f9      	bne.n	800ea8a <USB_HostInit+0x72>
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800ea96:	2300      	movs	r3, #0
 800ea98:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800ea9a:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 800ea9e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800eaa0:	9b01      	ldr	r3, [sp, #4]
 800eaa2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800eaa6:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800eaa8:	9b01      	ldr	r3, [sp, #4]
 800eaaa:	04da      	lsls	r2, r3, #19
 800eaac:	d404      	bmi.n	800eab8 <USB_HostInit+0xa0>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800eaae:	9b01      	ldr	r3, [sp, #4]
 800eab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800eab4:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(200U);
 800eab8:	20c8      	movs	r0, #200	; 0xc8
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800eaba:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(200U);
 800eabc:	f7f1 ffb6 	bl	8000a2c <HAL_Delay>
  USBx->GINTSTS = 0xFFFFFFFFU;
 800eac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  USBx->GINTMSK = 0U;
 800eac4:	2200      	movs	r2, #0
 800eac6:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800eac8:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800eaca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eacc:	05db      	lsls	r3, r3, #23
 800eace:	d517      	bpl.n	800eb00 <USB_HostInit+0xe8>
    USBx->GRXFSIZ  = 0x200U;
 800ead0:	f44f 7100 	mov.w	r1, #512	; 0x200
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ead4:	4a13      	ldr	r2, [pc, #76]	; (800eb24 <USB_HostInit+0x10c>)
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ead6:	4b14      	ldr	r3, [pc, #80]	; (800eb28 <USB_HostInit+0x110>)
    USBx->GRXFSIZ  = 0x200U;
 800ead8:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800eada:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800eadc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 800eae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eae2:	b91b      	cbnz	r3, 800eaec <USB_HostInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800eae4:	69a3      	ldr	r3, [r4, #24]
 800eae6:	f043 0310 	orr.w	r3, r3, #16
 800eaea:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800eaec:	69a2      	ldr	r2, [r4, #24]
}
 800eaee:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800eaf0:	4b0e      	ldr	r3, [pc, #56]	; (800eb2c <USB_HostInit+0x114>)
 800eaf2:	4313      	orrs	r3, r2
 800eaf4:	61a3      	str	r3, [r4, #24]
}
 800eaf6:	b003      	add	sp, #12
 800eaf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eafc:	b004      	add	sp, #16
 800eafe:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 800eb00:	2180      	movs	r1, #128	; 0x80
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800eb02:	4a0b      	ldr	r2, [pc, #44]	; (800eb30 <USB_HostInit+0x118>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800eb04:	4b0b      	ldr	r3, [pc, #44]	; (800eb34 <USB_HostInit+0x11c>)
    USBx->GRXFSIZ  = 0x80U;
 800eb06:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800eb08:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800eb0a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800eb0e:	e7e7      	b.n	800eae0 <USB_HostInit+0xc8>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800eb10:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800eb14:	e79b      	b.n	800ea4e <USB_HostInit+0x36>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800eb16:	f043 0304 	orr.w	r3, r3, #4
 800eb1a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800eb1e:	e79a      	b.n	800ea56 <USB_HostInit+0x3e>
 800eb20:	00030d40 	.word	0x00030d40
 800eb24:	01000200 	.word	0x01000200
 800eb28:	00e00300 	.word	0x00e00300
 800eb2c:	a3200008 	.word	0xa3200008
 800eb30:	00600080 	.word	0x00600080
 800eb34:	004000e0 	.word	0x004000e0

0800eb38 <USB_InitFSLSPClkSel>:
{
 800eb38:	b410      	push	{r4}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800eb3a:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800eb3e:	f001 0303 	and.w	r3, r1, #3
  if (freq == HCFG_48_MHZ)
 800eb42:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800eb44:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 800eb48:	f022 0203 	bic.w	r2, r2, #3
 800eb4c:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800eb50:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 800eb54:	ea43 0302 	orr.w	r3, r3, r2
 800eb58:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 800eb5c:	d00c      	beq.n	800eb78 <USB_InitFSLSPClkSel+0x40>
  else if (freq == HCFG_6_MHZ)
 800eb5e:	2902      	cmp	r1, #2
 800eb60:	d003      	beq.n	800eb6a <USB_InitFSLSPClkSel+0x32>
}
 800eb62:	2000      	movs	r0, #0
 800eb64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb68:	4770      	bx	lr
    USBx_HOST->HFIR = 6000U;
 800eb6a:	f241 7370 	movw	r3, #6000	; 0x1770
}
 800eb6e:	2000      	movs	r0, #0
    USBx_HOST->HFIR = 6000U;
 800eb70:	6063      	str	r3, [r4, #4]
}
 800eb72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb76:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 800eb78:	f64b 3380 	movw	r3, #48000	; 0xbb80
}
 800eb7c:	2000      	movs	r0, #0
    USBx_HOST->HFIR = 48000U;
 800eb7e:	6063      	str	r3, [r4, #4]
}
 800eb80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb84:	4770      	bx	lr
 800eb86:	bf00      	nop

0800eb88 <USB_ResetPort>:
{
 800eb88:	b530      	push	{r4, r5, lr}
 800eb8a:	4604      	mov	r4, r0
 800eb8c:	b083      	sub	sp, #12
  __IO uint32_t hprt0 = 0U;
 800eb8e:	2500      	movs	r5, #0
  HAL_Delay(100U);                                 /* See Note #1 */
 800eb90:	2064      	movs	r0, #100	; 0x64
  __IO uint32_t hprt0 = 0U;
 800eb92:	9501      	str	r5, [sp, #4]
  hprt0 = USBx_HPRT0;
 800eb94:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 800eb98:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800eb9a:	9b01      	ldr	r3, [sp, #4]
 800eb9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800eba0:	9301      	str	r3, [sp, #4]
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800eba2:	9b01      	ldr	r3, [sp, #4]
 800eba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eba8:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 800ebac:	f7f1 ff3e 	bl	8000a2c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ebb0:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 800ebb2:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ebb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ebb8:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 800ebbc:	f7f1 ff36 	bl	8000a2c <HAL_Delay>
}
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	b003      	add	sp, #12
 800ebc4:	bd30      	pop	{r4, r5, pc}
 800ebc6:	bf00      	nop

0800ebc8 <USB_DriveVbus>:
{
 800ebc8:	b082      	sub	sp, #8
  __IO uint32_t hprt0 = 0U;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	9301      	str	r3, [sp, #4]
  hprt0 = USBx_HPRT0;
 800ebce:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800ebd2:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ebd4:	9b01      	ldr	r3, [sp, #4]
 800ebd6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ebda:	9301      	str	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ebdc:	9b01      	ldr	r3, [sp, #4]
 800ebde:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ebe2:	9b01      	ldr	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ebe4:	d101      	bne.n	800ebea <USB_DriveVbus+0x22>
 800ebe6:	2901      	cmp	r1, #1
 800ebe8:	d00a      	beq.n	800ec00 <USB_DriveVbus+0x38>
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ebea:	04db      	lsls	r3, r3, #19
 800ebec:	d505      	bpl.n	800ebfa <USB_DriveVbus+0x32>
 800ebee:	b921      	cbnz	r1, 800ebfa <USB_DriveVbus+0x32>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ebf0:	9b01      	ldr	r3, [sp, #4]
 800ebf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebf6:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 800ebfa:	2000      	movs	r0, #0
 800ebfc:	b002      	add	sp, #8
 800ebfe:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ec00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ec04:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
}
 800ec08:	2000      	movs	r0, #0
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ec0a:	9b01      	ldr	r3, [sp, #4]
}
 800ec0c:	b002      	add	sp, #8
 800ec0e:	4770      	bx	lr

0800ec10 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ec10:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800ec12:	2300      	movs	r3, #0
 800ec14:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800ec16:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800ec1a:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ec1c:	9801      	ldr	r0, [sp, #4]
}
 800ec1e:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800ec22:	b002      	add	sp, #8
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop

0800ec28 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ec28:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800ec2c:	6880      	ldr	r0, [r0, #8]
}
 800ec2e:	b280      	uxth	r0, r0
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop

0800ec34 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800ec34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec38:	4606      	mov	r6, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ec3a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ec3e:	2001      	movs	r0, #1
{
 800ec40:	f89d 4020 	ldrb.w	r4, [sp, #32]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ec44:	eb06 1541 	add.w	r5, r6, r1, lsl #5
 800ec48:	f001 010f 	and.w	r1, r1, #15
 800ec4c:	f506 6980 	add.w	r9, r6, #1024	; 0x400
{
 800ec50:	f89d e01c 	ldrb.w	lr, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ec54:	f505 68a0 	add.w	r8, r5, #1280	; 0x500
 800ec58:	fa00 f101 	lsl.w	r1, r0, r1
 800ec5c:	f8c8 7008 	str.w	r7, [r8, #8]
 800ec60:	b250      	sxtb	r0, r2
{
 800ec62:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ec66:	2c03      	cmp	r4, #3
 800ec68:	d85b      	bhi.n	800ed22 <USB_HC_Init+0xee>
 800ec6a:	e8df f004 	tbb	[pc, r4]
 800ec6e:	3d4a      	.short	0x3d4a
 800ec70:	024a      	.short	0x024a
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ec72:	f240 679d 	movw	r7, #1693	; 0x69d
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ec76:	2800      	cmp	r0, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ec78:	f8c8 700c 	str.w	r7, [r8, #12]
      if ((epnum & 0x80U) == 0x80U)
 800ec7c:	db63      	blt.n	800ed46 <USB_HC_Init+0x112>
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ec7e:	f8d9 7018 	ldr.w	r7, [r9, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ec82:	2000      	movs	r0, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ec84:	4339      	orrs	r1, r7
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 800ec86:	4607      	mov	r7, r0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ec88:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ec8c:	69b1      	ldr	r1, [r6, #24]
 800ec8e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800ec92:	61b1      	str	r1, [r6, #24]
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ec94:	0599      	lsls	r1, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ec96:	f3cc 030a 	ubfx	r3, ip, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ec9a:	02d2      	lsls	r2, r2, #11
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ec9c:	f1be 0f02 	cmp.w	lr, #2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800eca0:	f001 51fe 	and.w	r1, r1, #532676608	; 0x1fc00000
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800eca4:	ea4f 4684 	mov.w	r6, r4, lsl #18
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800eca8:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ecac:	bf18      	it	ne
 800ecae:	f04f 0c00 	movne.w	ip, #0
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ecb2:	ea43 0301 	orr.w	r3, r3, r1
 800ecb6:	f406 2140 	and.w	r1, r6, #786432	; 0xc0000
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ecba:	bf08      	it	eq
 800ecbc:	f44f 3c00 	moveq.w	ip, #131072	; 0x20000

  if (ep_type == EP_TYPE_INTR)
 800ecc0:	2c03      	cmp	r4, #3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ecc2:	ea43 0302 	orr.w	r3, r3, r2
 800ecc6:	ea43 0301 	orr.w	r3, r3, r1
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ecca:	ea43 0307 	orr.w	r3, r3, r7
 800ecce:	ea43 030c 	orr.w	r3, r3, ip
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ecd2:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 800ecd6:	d105      	bne.n	800ece4 <USB_HC_Init+0xb0>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800ecd8:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 800ecdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ece0:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  }

  return ret;
}
 800ece4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ece8:	f240 2725 	movw	r7, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 800ecec:	2800      	cmp	r0, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ecee:	f8c8 700c 	str.w	r7, [r8, #12]
      if ((epnum & 0x80U) == 0x80U)
 800ecf2:	dac4      	bge.n	800ec7e <USB_HC_Init+0x4a>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ecf4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800ecf8:	f440 70c0 	orr.w	r0, r0, #384	; 0x180
 800ecfc:	f8c8 000c 	str.w	r0, [r8, #12]
 800ed00:	e027      	b.n	800ed52 <USB_HC_Init+0x11e>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ed02:	f240 479d 	movw	r7, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
 800ed06:	2800      	cmp	r0, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ed08:	f8c8 700c 	str.w	r7, [r8, #12]
      if ((epnum & 0x80U) == 0x80U)
 800ed0c:	db1b      	blt.n	800ed46 <USB_HC_Init+0x112>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ed0e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800ed10:	05c0      	lsls	r0, r0, #23
 800ed12:	d5b4      	bpl.n	800ec7e <USB_HC_Init+0x4a>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ed14:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800ed18:	f040 0060 	orr.w	r0, r0, #96	; 0x60
 800ed1c:	f8c8 000c 	str.w	r0, [r8, #12]
 800ed20:	e7ad      	b.n	800ec7e <USB_HC_Init+0x4a>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ed22:	f8d9 7018 	ldr.w	r7, [r9, #24]
      ret = HAL_ERROR;
 800ed26:	2800      	cmp	r0, #0
 800ed28:	f04f 0001 	mov.w	r0, #1
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ed2c:	ea41 0107 	orr.w	r1, r1, r7
      ret = HAL_ERROR;
 800ed30:	bfac      	ite	ge
 800ed32:	2700      	movge	r7, #0
 800ed34:	f44f 4700 	movlt.w	r7, #32768	; 0x8000
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ed38:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ed3c:	69b1      	ldr	r1, [r6, #24]
 800ed3e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800ed42:	61b1      	str	r1, [r6, #24]
 800ed44:	e7a6      	b.n	800ec94 <USB_HC_Init+0x60>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ed46:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800ed4a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800ed4e:	f8c8 000c 	str.w	r0, [r8, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ed52:	f8d9 7018 	ldr.w	r7, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ed56:	2000      	movs	r0, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ed58:	4339      	orrs	r1, r7
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ed5a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ed5e:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ed62:	69b1      	ldr	r1, [r6, #24]
 800ed64:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800ed68:	61b1      	str	r1, [r6, #24]
 800ed6a:	e793      	b.n	800ec94 <USB_HC_Init+0x60>

0800ed6c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ed6c:	b4f0      	push	{r4, r5, r6, r7}
 800ed6e:	784b      	ldrb	r3, [r1, #1]
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800ed70:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800ed72:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800ed76:	05e4      	lsls	r4, r4, #23
 800ed78:	f503 67a0 	add.w	r7, r3, #1280	; 0x500
 800ed7c:	d50a      	bpl.n	800ed94 <USB_HC_StartXfer+0x28>
 800ed7e:	790c      	ldrb	r4, [r1, #4]
 800ed80:	b944      	cbnz	r4, 800ed94 <USB_HC_StartXfer+0x28>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800ed82:	2a00      	cmp	r2, #0
 800ed84:	d05f      	beq.n	800ee46 <USB_HC_StartXfer+0xda>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
      return HAL_OK;
    }
    else if (dma == 1U)
 800ed86:	2a01      	cmp	r2, #1
 800ed88:	d104      	bne.n	800ed94 <USB_HC_StartXfer+0x28>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ed8a:	68fd      	ldr	r5, [r7, #12]
 800ed8c:	f025 0560 	bic.w	r5, r5, #96	; 0x60
 800ed90:	60fd      	str	r5, [r7, #12]
      hc->do_ping = 0U;
 800ed92:	714c      	strb	r4, [r1, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ed94:	690d      	ldr	r5, [r1, #16]
 800ed96:	2d00      	cmp	r5, #0
 800ed98:	d149      	bne.n	800ee2e <USB_HC_StartXfer+0xc2>
 800ed9a:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 800ed9e:	f04f 0c01 	mov.w	ip, #1
  }
  else
  {
    num_packets = 1U;
  }
  if (hc->ep_is_in != 0U)
 800eda2:	78cc      	ldrb	r4, [r1, #3]
 800eda4:	b11c      	cbz	r4, 800edae <USB_HC_StartXfer+0x42>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800eda6:	890d      	ldrh	r5, [r1, #8]
 800eda8:	fb0c f505 	mul.w	r5, ip, r5
 800edac:	610d      	str	r5, [r1, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800edae:	7a8c      	ldrb	r4, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800edb0:	f3c5 0512 	ubfx	r5, r5, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800edb4:	0764      	lsls	r4, r4, #29
 800edb6:	f004 44c0 	and.w	r4, r4, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800edba:	4334      	orrs	r4, r6
 800edbc:	432c      	orrs	r4, r5
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800edbe:	613c      	str	r4, [r7, #16]

  if (dma != 0U)
 800edc0:	b10a      	cbz	r2, 800edc6 <USB_HC_StartXfer+0x5a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800edc2:	68cc      	ldr	r4, [r1, #12]
 800edc4:	617c      	str	r4, [r7, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800edc6:	f500 6680 	add.w	r6, r0, #1024	; 0x400
 800edca:	68b4      	ldr	r4, [r6, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800edcc:	f8d3 7500 	ldr.w	r7, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800edd0:	43e4      	mvns	r4, r4

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800edd2:	4d41      	ldr	r5, [pc, #260]	; (800eed8 <USB_HC_StartXfer+0x16c>)
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800edd4:	f027 5700 	bic.w	r7, r7, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800edd8:	0764      	lsls	r4, r4, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800edda:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800edde:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 800ede2:	f8d3 7500 	ldr.w	r7, [r3, #1280]	; 0x500
 800ede6:	433c      	orrs	r4, r7
 800ede8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800edec:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800edf0:	78cf      	ldrb	r7, [r1, #3]
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800edf2:	602c      	str	r4, [r5, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800edf4:	682c      	ldr	r4, [r5, #0]
 800edf6:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 800edfa:	602c      	str	r4, [r5, #0]
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800edfc:	682c      	ldr	r4, [r5, #0]
  if (hc->ep_is_in != 0U)
 800edfe:	2f00      	cmp	r7, #0
 800ee00:	d031      	beq.n	800ee66 <USB_HC_StartXfer+0xfa>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ee02:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800ee06:	602c      	str	r4, [r5, #0]
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ee08:	682c      	ldr	r4, [r5, #0]
 800ee0a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800ee0e:	602c      	str	r4, [r5, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ee10:	682c      	ldr	r4, [r5, #0]
 800ee12:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

  if (dma == 0U) /* Slave mode */
 800ee16:	bb1a      	cbnz	r2, 800ee60 <USB_HC_StartXfer+0xf4>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800ee18:	78cb      	ldrb	r3, [r1, #3]
 800ee1a:	bb0b      	cbnz	r3, 800ee60 <USB_HC_StartXfer+0xf4>
 800ee1c:	690b      	ldr	r3, [r1, #16]
 800ee1e:	b1fb      	cbz	r3, 800ee60 <USB_HC_StartXfer+0xf4>
    {
      switch (hc->ep_type)
 800ee20:	79ca      	ldrb	r2, [r1, #7]
 800ee22:	2a03      	cmp	r2, #3
 800ee24:	d831      	bhi.n	800ee8a <USB_HC_StartXfer+0x11e>
 800ee26:	e8df f002 	tbb	[pc, r2]
 800ee2a:	2944      	.short	0x2944
 800ee2c:	2944      	.short	0x2944
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ee2e:	890e      	ldrh	r6, [r1, #8]
 800ee30:	1e6c      	subs	r4, r5, #1
 800ee32:	4434      	add	r4, r6
 800ee34:	fbb4 f4f6 	udiv	r4, r4, r6
    if (num_packets > max_hc_pkt_count)
 800ee38:	fa1f fc84 	uxth.w	ip, r4
 800ee3c:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 800ee40:	d815      	bhi.n	800ee6e <USB_HC_StartXfer+0x102>
 800ee42:	04e6      	lsls	r6, r4, #19
 800ee44:	e7ad      	b.n	800eda2 <USB_HC_StartXfer+0x36>
    if ((dma == 0U) && (hc->do_ping == 1U))
 800ee46:	794c      	ldrb	r4, [r1, #5]
 800ee48:	2c01      	cmp	r4, #1
 800ee4a:	d1a3      	bne.n	800ed94 <USB_HC_StartXfer+0x28>
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ee4c:	4a23      	ldr	r2, [pc, #140]	; (800eedc <USB_HC_StartXfer+0x170>)
 800ee4e:	613a      	str	r2, [r7, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ee50:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ee54:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ee58:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ee5c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
 800ee60:	2000      	movs	r0, #0
 800ee62:	bcf0      	pop	{r4, r5, r6, r7}
 800ee64:	4770      	bx	lr
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ee66:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 800ee6a:	602c      	str	r4, [r5, #0]
 800ee6c:	e7cc      	b.n	800ee08 <USB_HC_StartXfer+0x9c>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800ee6e:	0235      	lsls	r5, r6, #8
 800ee70:	f44f 7c80 	mov.w	ip, #256	; 0x100
 800ee74:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 800ee78:	610d      	str	r5, [r1, #16]
 800ee7a:	e792      	b.n	800eda2 <USB_HC_StartXfer+0x36>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ee7c:	6934      	ldr	r4, [r6, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ee7e:	1cda      	adds	r2, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ee80:	b2a4      	uxth	r4, r4
 800ee82:	f3c2 028f 	ubfx	r2, r2, #2, #16
 800ee86:	4294      	cmp	r4, r2
 800ee88:	d320      	bcc.n	800eecc <USB_HC_StartXfer+0x160>
    count32b = ((uint32_t)len + 3U) / 4U;
 800ee8a:	b29b      	uxth	r3, r3
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ee8c:	68ca      	ldr	r2, [r1, #12]
 800ee8e:	7849      	ldrb	r1, [r1, #1]
    count32b = ((uint32_t)len + 3U) / 4U;
 800ee90:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800ee92:	089b      	lsrs	r3, r3, #2
 800ee94:	d0e4      	beq.n	800ee60 <USB_HC_StartXfer+0xf4>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ee96:	eb00 3001 	add.w	r0, r0, r1, lsl #12
 800ee9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee9e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800eea2:	f852 1b04 	ldr.w	r1, [r2], #4
    for (i = 0U; i < count32b; i++)
 800eea6:	4293      	cmp	r3, r2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800eea8:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800eeaa:	d1fa      	bne.n	800eea2 <USB_HC_StartXfer+0x136>
}
 800eeac:	2000      	movs	r0, #0
 800eeae:	bcf0      	pop	{r4, r5, r6, r7}
 800eeb0:	4770      	bx	lr
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800eeb2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800eeb4:	1cda      	adds	r2, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800eeb6:	b2a4      	uxth	r4, r4
 800eeb8:	f3c2 028f 	ubfx	r2, r2, #2, #16
 800eebc:	4294      	cmp	r4, r2
 800eebe:	d2e4      	bcs.n	800ee8a <USB_HC_StartXfer+0x11e>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800eec0:	6983      	ldr	r3, [r0, #24]
 800eec2:	f043 0320 	orr.w	r3, r3, #32
 800eec6:	6183      	str	r3, [r0, #24]
 800eec8:	690b      	ldr	r3, [r1, #16]
 800eeca:	e7de      	b.n	800ee8a <USB_HC_StartXfer+0x11e>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800eecc:	6983      	ldr	r3, [r0, #24]
 800eece:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eed2:	6183      	str	r3, [r0, #24]
 800eed4:	690b      	ldr	r3, [r1, #16]
 800eed6:	e7d8      	b.n	800ee8a <USB_HC_StartXfer+0x11e>
 800eed8:	200004d4 	.word	0x200004d4
 800eedc:	80080000 	.word	0x80080000

0800eee0 <USB_HC_ReadInterrupt>:
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800eee0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800eee4:	6940      	ldr	r0, [r0, #20]
}
 800eee6:	b280      	uxth	r0, r0
 800eee8:	4770      	bx	lr
 800eeea:	bf00      	nop

0800eeec <USB_HC_Halt>:
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800eeec:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800eef0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800eef4:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800eef8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800eefc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800ef00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef04:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ef08:	d11f      	bne.n	800ef4a <USB_HC_Halt+0x5e>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ef0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ef0c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800ef10:	d13c      	bne.n	800ef8c <USB_HC_Halt+0xa0>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ef12:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ef16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ef1a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ef1e:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ef22:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800ef26:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ef2a:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ef2e:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800ef32:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800ef36:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
 800ef3a:	e001      	b.n	800ef40 <USB_HC_Halt+0x54>
        if (++count > 1000U)
 800ef3c:	3b01      	subs	r3, #1
 800ef3e:	d02b      	beq.n	800ef98 <USB_HC_Halt+0xac>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ef40:	6811      	ldr	r1, [r2, #0]
 800ef42:	2900      	cmp	r1, #0
 800ef44:	dbfa      	blt.n	800ef3c <USB_HC_Halt+0x50>
}
 800ef46:	2000      	movs	r0, #0
 800ef48:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ef4a:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800ef4e:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800ef52:	d11b      	bne.n	800ef8c <USB_HC_Halt+0xa0>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ef54:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ef58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ef5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ef60:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ef64:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800ef68:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ef6c:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ef70:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800ef74:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800ef78:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
 800ef7c:	e001      	b.n	800ef82 <USB_HC_Halt+0x96>
        if (++count > 1000U)
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	d00a      	beq.n	800ef98 <USB_HC_Halt+0xac>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ef82:	6811      	ldr	r1, [r2, #0]
 800ef84:	2900      	cmp	r1, #0
 800ef86:	dbfa      	blt.n	800ef7e <USB_HC_Halt+0x92>
}
 800ef88:	2000      	movs	r0, #0
 800ef8a:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ef8c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800ef90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ef94:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 800ef98:	2000      	movs	r0, #0
 800ef9a:	4770      	bx	lr

0800ef9c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ef9c:	b410      	push	{r4}
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ef9e:	6882      	ldr	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800efa0:	f44f 6184 	mov.w	r1, #1056	; 0x420
{
 800efa4:	4604      	mov	r4, r0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800efa6:	4b5b      	ldr	r3, [pc, #364]	; (800f114 <USB_StopHost+0x178>)
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800efa8:	f022 0201 	bic.w	r2, r2, #1
 800efac:	6082      	str	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800efae:	6101      	str	r1, [r0, #16]
 800efb0:	e001      	b.n	800efb6 <USB_StopHost+0x1a>
    if (++count > 200000U)
 800efb2:	3b01      	subs	r3, #1
 800efb4:	d002      	beq.n	800efbc <USB_StopHost+0x20>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800efb6:	6922      	ldr	r2, [r4, #16]
 800efb8:	0691      	lsls	r1, r2, #26
 800efba:	d4fa      	bmi.n	800efb2 <USB_StopHost+0x16>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800efbc:	2210      	movs	r2, #16
 800efbe:	4b55      	ldr	r3, [pc, #340]	; (800f114 <USB_StopHost+0x178>)
 800efc0:	6122      	str	r2, [r4, #16]
 800efc2:	e001      	b.n	800efc8 <USB_StopHost+0x2c>
    if (++count > 200000U)
 800efc4:	3b01      	subs	r3, #1
 800efc6:	d002      	beq.n	800efce <USB_StopHost+0x32>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800efc8:	6922      	ldr	r2, [r4, #16]
 800efca:	06d2      	lsls	r2, r2, #27
 800efcc:	d4fa      	bmi.n	800efc4 <USB_StopHost+0x28>
  (void)USB_FlushRxFifo(USBx);

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800efce:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
 800efd2:	f504 61a0 	add.w	r1, r4, #1280	; 0x500
 800efd6:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
  uint32_t count = 0U;
 800efda:	2300      	movs	r3, #0
 800efdc:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800efe0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800efe4:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    value = USBx_HC(i)->HCCHAR;
 800efe8:	f8d4 2520 	ldr.w	r2, [r4, #1312]	; 0x520
 800efec:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800eff0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800eff4:	f8c4 2520 	str.w	r2, [r4, #1312]	; 0x520
    value = USBx_HC(i)->HCCHAR;
 800eff8:	f8d4 2540 	ldr.w	r2, [r4, #1344]	; 0x540
 800effc:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f000:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f004:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
    value = USBx_HC(i)->HCCHAR;
 800f008:	f8d4 2560 	ldr.w	r2, [r4, #1376]	; 0x560
 800f00c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f010:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f014:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
    value = USBx_HC(i)->HCCHAR;
 800f018:	f8d4 2580 	ldr.w	r2, [r4, #1408]	; 0x580
 800f01c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f020:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f024:	f8c4 2580 	str.w	r2, [r4, #1408]	; 0x580
    value = USBx_HC(i)->HCCHAR;
 800f028:	f8d4 25a0 	ldr.w	r2, [r4, #1440]	; 0x5a0
 800f02c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f030:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f034:	f8c4 25a0 	str.w	r2, [r4, #1440]	; 0x5a0
    value = USBx_HC(i)->HCCHAR;
 800f038:	f8d4 25c0 	ldr.w	r2, [r4, #1472]	; 0x5c0
 800f03c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f040:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f044:	f8c4 25c0 	str.w	r2, [r4, #1472]	; 0x5c0
    value = USBx_HC(i)->HCCHAR;
 800f048:	f8d4 25e0 	ldr.w	r2, [r4, #1504]	; 0x5e0
 800f04c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f050:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f054:	f8c4 25e0 	str.w	r2, [r4, #1504]	; 0x5e0
    value = USBx_HC(i)->HCCHAR;
 800f058:	f8d4 2600 	ldr.w	r2, [r4, #1536]	; 0x600
 800f05c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f060:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f064:	f8c4 2600 	str.w	r2, [r4, #1536]	; 0x600
    value = USBx_HC(i)->HCCHAR;
 800f068:	f8d4 2620 	ldr.w	r2, [r4, #1568]	; 0x620
 800f06c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f070:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f074:	f8c4 2620 	str.w	r2, [r4, #1568]	; 0x620
    value = USBx_HC(i)->HCCHAR;
 800f078:	f8d4 2640 	ldr.w	r2, [r4, #1600]	; 0x640
 800f07c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f080:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f084:	f8c4 2640 	str.w	r2, [r4, #1600]	; 0x640
    value = USBx_HC(i)->HCCHAR;
 800f088:	f8d4 2660 	ldr.w	r2, [r4, #1632]	; 0x660
 800f08c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f090:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f094:	f8c4 2660 	str.w	r2, [r4, #1632]	; 0x660
    value = USBx_HC(i)->HCCHAR;
 800f098:	f8d4 2680 	ldr.w	r2, [r4, #1664]	; 0x680
 800f09c:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f0a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f0a4:	f8c4 2680 	str.w	r2, [r4, #1664]	; 0x680
    value = USBx_HC(i)->HCCHAR;
 800f0a8:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 800f0ac:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f0b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f0b4:	f8c4 26a0 	str.w	r2, [r4, #1696]	; 0x6a0
    value = USBx_HC(i)->HCCHAR;
 800f0b8:	f8d4 26c0 	ldr.w	r2, [r4, #1728]	; 0x6c0
 800f0bc:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f0c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f0c4:	f8c4 26c0 	str.w	r2, [r4, #1728]	; 0x6c0
    value = USBx_HC(i)->HCCHAR;
 800f0c8:	f8d4 26e0 	ldr.w	r2, [r4, #1760]	; 0x6e0
 800f0cc:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f0d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800f0d4:	f8c4 26e0 	str.w	r2, [r4, #1760]	; 0x6e0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800f0d8:	680a      	ldr	r2, [r1, #0]
 800f0da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f0de:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 800f0e2:	600a      	str	r2, [r1, #0]
 800f0e4:	e002      	b.n	800f0ec <USB_StopHost+0x150>
      if (++count > 1000U)
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f0e6:	680a      	ldr	r2, [r1, #0]
 800f0e8:	2a00      	cmp	r2, #0
 800f0ea:	da03      	bge.n	800f0f4 <USB_StopHost+0x158>
      if (++count > 1000U)
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f0f2:	d9f8      	bls.n	800f0e6 <USB_StopHost+0x14a>
 800f0f4:	3120      	adds	r1, #32
  for (i = 0U; i <= 15U; i++)
 800f0f6:	4281      	cmp	r1, r0
 800f0f8:	d1ee      	bne.n	800f0d8 <USB_StopHost+0x13c>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800f0fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  USBx->GINTSTS = 0xFFFFFFFFU;

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800f0fe:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800f100:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 800f104:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f106:	68a3      	ldr	r3, [r4, #8]
 800f108:	f043 0301 	orr.w	r3, r3, #1
 800f10c:	60a3      	str	r3, [r4, #8]
}
 800f10e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f112:	4770      	bx	lr
 800f114:	00030d40 	.word	0x00030d40

0800f118 <USBH_Init>:
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f118:	b3a0      	cbz	r0, 800f184 <USBH_Init+0x6c>
{
 800f11a:	b570      	push	{r4, r5, r6, lr}
 800f11c:	4604      	mov	r4, r0

  /* Set DRiver ID */
  phost->id = id;

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f11e:	2500      	movs	r5, #0
  phost->id = id;
 800f120:	f880 253c 	strb.w	r2, [r0, #1340]	; 0x53c
 800f124:	460e      	mov	r6, r1
 800f126:	223c      	movs	r2, #60	; 0x3c
 800f128:	4629      	mov	r1, r5
 800f12a:	f200 40f4 	addw	r0, r0, #1268	; 0x4f4
  phost->pActiveClass = NULL;
 800f12e:	f8c4 54ec 	str.w	r5, [r4, #1260]	; 0x4ec
  phost->ClassNumber = 0U;
 800f132:	f8c4 54f0 	str.w	r5, [r4, #1264]	; 0x4f0
 800f136:	f017 fec0 	bl	8026eba <memset>
 800f13a:	4629      	mov	r1, r5
 800f13c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f140:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 800f144:	f017 feb9 	bl	8026eba <memset>
    phost->device.Data[i] = 0U;
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 800f148:	2301      	movs	r3, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f14a:	2140      	movs	r1, #64	; 0x40
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f14c:	f44f 7280 	mov.w	r2, #256	; 0x100
  phost->gState = HOST_IDLE;
 800f150:	7025      	strb	r5, [r4, #0]
  phost->EnumState = ENUM_IDLE;
 800f152:	7065      	strb	r5, [r4, #1]
  phost->Timer = 0U;
 800f154:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
  phost->Control.errorcount = 0U;
 800f158:	7665      	strb	r5, [r4, #25]
  phost->device.is_connected = 0U;
 800f15a:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f15e:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_disconnected = 0U;
 800f162:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->RequestState = CMD_SEND;
 800f166:	70a3      	strb	r3, [r4, #2]
  phost->device.is_ReEnumerated = 0U;
 800f168:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  phost->Control.state = CTRL_SETUP;
 800f16c:	7623      	strb	r3, [r4, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f16e:	71a1      	strb	r1, [r4, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f170:	f8c4 231c 	str.w	r2, [r4, #796]	; 0x31c
  if (pUsrFunc != NULL)
 800f174:	b10e      	cbz	r6, 800f17a <USBH_Init+0x62>
    phost->pUser = pUsrFunc;
 800f176:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
  USBH_LL_Init(phost);
 800f17a:	4620      	mov	r0, r4
 800f17c:	f00e ff06 	bl	801df8c <USBH_LL_Init>
  return USBH_OK;
 800f180:	2000      	movs	r0, #0
}
 800f182:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 800f184:	2002      	movs	r0, #2
}
 800f186:	4770      	bx	lr

0800f188 <USBH_DeInit>:
{
 800f188:	b538      	push	{r3, r4, r5, lr}
 800f18a:	4604      	mov	r4, r0
 800f18c:	223c      	movs	r2, #60	; 0x3c
 800f18e:	2100      	movs	r1, #0
 800f190:	f200 40f4 	addw	r0, r0, #1268	; 0x4f4
 800f194:	f017 fe91 	bl	8026eba <memset>
 800f198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f19c:	2100      	movs	r1, #0
 800f19e:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 800f1a2:	f017 fe8a 	bl	8026eba <memset>
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f1a6:	2540      	movs	r5, #64	; 0x40
  phost->gState = HOST_IDLE;
 800f1a8:	2300      	movs	r3, #0
  phost->RequestState = CMD_SEND;
 800f1aa:	2201      	movs	r2, #1
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f1ac:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (phost->pData != NULL)
 800f1b0:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
  phost->gState = HOST_IDLE;
 800f1b4:	7023      	strb	r3, [r4, #0]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f1b6:	71a5      	strb	r5, [r4, #6]
  phost->Timer = 0U;
 800f1b8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f1bc:	f8c4 031c 	str.w	r0, [r4, #796]	; 0x31c
  phost->device.is_connected = 0U;
 800f1c0:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
  phost->EnumState = ENUM_IDLE;
 800f1c4:	7063      	strb	r3, [r4, #1]
  phost->device.is_disconnected = 0U;
 800f1c6:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
  phost->Control.errorcount = 0U;
 800f1ca:	7663      	strb	r3, [r4, #25]
  phost->device.PortEnabled = 0U;
 800f1cc:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  phost->RequestState = CMD_SEND;
 800f1d0:	70a2      	strb	r2, [r4, #2]
  phost->device.is_ReEnumerated = 0U;
 800f1d2:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  phost->Control.state = CTRL_SETUP;
 800f1d6:	7622      	strb	r2, [r4, #24]
  if (phost->pData != NULL)
 800f1d8:	b111      	cbz	r1, 800f1e0 <USBH_DeInit+0x58>
    USBH_LL_Stop(phost);
 800f1da:	4620      	mov	r0, r4
 800f1dc:	f00e ff10 	bl	801e000 <USBH_LL_Stop>
}
 800f1e0:	2000      	movs	r0, #0
 800f1e2:	bd38      	pop	{r3, r4, r5, pc}

0800f1e4 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 800f1e4:	b149      	cbz	r1, 800f1fa <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f1e6:	f8d0 34f0 	ldr.w	r3, [r0, #1264]	; 0x4f0
 800f1ea:	b933      	cbnz	r3, 800f1fa <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	f8c0 14e8 	str.w	r1, [r0, #1256]	; 0x4e8
 800f1f2:	f8c0 24f0 	str.w	r2, [r0, #1264]	; 0x4f0
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	4770      	bx	lr
    status = USBH_FAIL;
 800f1fa:	2302      	movs	r3, #2
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	4770      	bx	lr

0800f200 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f200:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 800f204:	428b      	cmp	r3, r1
 800f206:	d903      	bls.n	800f210 <USBH_SelectInterface+0x10>
  {
    phost->device.current_interface = interface;
 800f208:	f880 1324 	strb.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 800f20c:	2000      	movs	r0, #0
 800f20e:	4770      	bx	lr
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f210:	2002      	movs	r0, #2
  }

  return status;
}
 800f212:	4770      	bx	lr

0800f214 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f214:	b430      	push	{r4, r5}
 800f216:	f1a1 04ff 	sub.w	r4, r1, #255	; 0xff
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f21a:	f890 5347 	ldrb.w	r5, [r0, #839]	; 0x347
 800f21e:	fab4 f484 	clz	r4, r4
 800f222:	428d      	cmp	r5, r1
 800f224:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800f228:	d03c      	beq.n	800f2a4 <USBH_FindInterface+0x90>
 800f22a:	2c00      	cmp	r4, #0
 800f22c:	d13a      	bne.n	800f2a4 <USBH_FindInterface+0x90>
 800f22e:	f890 5371 	ldrb.w	r5, [r0, #881]	; 0x371
 800f232:	428d      	cmp	r5, r1
 800f234:	d044      	beq.n	800f2c0 <USBH_FindInterface+0xac>
 800f236:	2c00      	cmp	r4, #0
 800f238:	d142      	bne.n	800f2c0 <USBH_FindInterface+0xac>
 800f23a:	f890 539b 	ldrb.w	r5, [r0, #923]	; 0x39b
 800f23e:	428d      	cmp	r5, r1
 800f240:	d04c      	beq.n	800f2dc <USBH_FindInterface+0xc8>
 800f242:	2c00      	cmp	r4, #0
 800f244:	d14a      	bne.n	800f2dc <USBH_FindInterface+0xc8>
 800f246:	f890 53c5 	ldrb.w	r5, [r0, #965]	; 0x3c5
 800f24a:	428d      	cmp	r5, r1
 800f24c:	d054      	beq.n	800f2f8 <USBH_FindInterface+0xe4>
 800f24e:	2c00      	cmp	r4, #0
 800f250:	d152      	bne.n	800f2f8 <USBH_FindInterface+0xe4>
 800f252:	f890 53ef 	ldrb.w	r5, [r0, #1007]	; 0x3ef
 800f256:	428d      	cmp	r5, r1
 800f258:	d05c      	beq.n	800f314 <USBH_FindInterface+0x100>
 800f25a:	2c00      	cmp	r4, #0
 800f25c:	d15a      	bne.n	800f314 <USBH_FindInterface+0x100>
 800f25e:	f890 5419 	ldrb.w	r5, [r0, #1049]	; 0x419
 800f262:	428d      	cmp	r5, r1
 800f264:	d064      	beq.n	800f330 <USBH_FindInterface+0x11c>
 800f266:	2c00      	cmp	r4, #0
 800f268:	d162      	bne.n	800f330 <USBH_FindInterface+0x11c>
 800f26a:	f890 5443 	ldrb.w	r5, [r0, #1091]	; 0x443
 800f26e:	428d      	cmp	r5, r1
 800f270:	d06c      	beq.n	800f34c <USBH_FindInterface+0x138>
 800f272:	2c00      	cmp	r4, #0
 800f274:	d16a      	bne.n	800f34c <USBH_FindInterface+0x138>
 800f276:	f890 546d 	ldrb.w	r5, [r0, #1133]	; 0x46d
 800f27a:	428d      	cmp	r5, r1
 800f27c:	d074      	beq.n	800f368 <USBH_FindInterface+0x154>
 800f27e:	2c00      	cmp	r4, #0
 800f280:	d172      	bne.n	800f368 <USBH_FindInterface+0x154>
 800f282:	f890 5497 	ldrb.w	r5, [r0, #1175]	; 0x497
 800f286:	428d      	cmp	r5, r1
 800f288:	d07c      	beq.n	800f384 <USBH_FindInterface+0x170>
 800f28a:	2c00      	cmp	r4, #0
 800f28c:	d17a      	bne.n	800f384 <USBH_FindInterface+0x170>
 800f28e:	f890 54c1 	ldrb.w	r5, [r0, #1217]	; 0x4c1
 800f292:	428d      	cmp	r5, r1
 800f294:	f000 8086 	beq.w	800f3a4 <USBH_FindInterface+0x190>
 800f298:	2c00      	cmp	r4, #0
 800f29a:	f040 8083 	bne.w	800f3a4 <USBH_FindInterface+0x190>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800f29e:	20ff      	movs	r0, #255	; 0xff
}
 800f2a0:	bc30      	pop	{r4, r5}
 800f2a2:	4770      	bx	lr
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f2a4:	f890 5348 	ldrb.w	r5, [r0, #840]	; 0x348
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f2a8:	4295      	cmp	r5, r2
 800f2aa:	d001      	beq.n	800f2b0 <USBH_FindInterface+0x9c>
 800f2ac:	2aff      	cmp	r2, #255	; 0xff
 800f2ae:	d1be      	bne.n	800f22e <USBH_FindInterface+0x1a>
 800f2b0:	f890 5349 	ldrb.w	r5, [r0, #841]	; 0x349
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f2b4:	429d      	cmp	r5, r3
 800f2b6:	d001      	beq.n	800f2bc <USBH_FindInterface+0xa8>
 800f2b8:	2bff      	cmp	r3, #255	; 0xff
 800f2ba:	d1b8      	bne.n	800f22e <USBH_FindInterface+0x1a>
  uint8_t if_ix = 0U;
 800f2bc:	2000      	movs	r0, #0
 800f2be:	e7ef      	b.n	800f2a0 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f2c0:	f890 5372 	ldrb.w	r5, [r0, #882]	; 0x372
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f2c4:	4295      	cmp	r5, r2
 800f2c6:	d001      	beq.n	800f2cc <USBH_FindInterface+0xb8>
 800f2c8:	2aff      	cmp	r2, #255	; 0xff
 800f2ca:	d1b6      	bne.n	800f23a <USBH_FindInterface+0x26>
 800f2cc:	f890 5373 	ldrb.w	r5, [r0, #883]	; 0x373
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f2d0:	429d      	cmp	r5, r3
 800f2d2:	d001      	beq.n	800f2d8 <USBH_FindInterface+0xc4>
 800f2d4:	2bff      	cmp	r3, #255	; 0xff
 800f2d6:	d1b0      	bne.n	800f23a <USBH_FindInterface+0x26>
    if_ix++;
 800f2d8:	2001      	movs	r0, #1
 800f2da:	e7e1      	b.n	800f2a0 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f2dc:	f890 539c 	ldrb.w	r5, [r0, #924]	; 0x39c
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f2e0:	4295      	cmp	r5, r2
 800f2e2:	d001      	beq.n	800f2e8 <USBH_FindInterface+0xd4>
 800f2e4:	2aff      	cmp	r2, #255	; 0xff
 800f2e6:	d1ae      	bne.n	800f246 <USBH_FindInterface+0x32>
 800f2e8:	f890 539d 	ldrb.w	r5, [r0, #925]	; 0x39d
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f2ec:	429d      	cmp	r5, r3
 800f2ee:	d001      	beq.n	800f2f4 <USBH_FindInterface+0xe0>
 800f2f0:	2bff      	cmp	r3, #255	; 0xff
 800f2f2:	d1a8      	bne.n	800f246 <USBH_FindInterface+0x32>
    if_ix++;
 800f2f4:	2002      	movs	r0, #2
 800f2f6:	e7d3      	b.n	800f2a0 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f2f8:	f890 53c6 	ldrb.w	r5, [r0, #966]	; 0x3c6
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f2fc:	4295      	cmp	r5, r2
 800f2fe:	d001      	beq.n	800f304 <USBH_FindInterface+0xf0>
 800f300:	2aff      	cmp	r2, #255	; 0xff
 800f302:	d1a6      	bne.n	800f252 <USBH_FindInterface+0x3e>
 800f304:	f890 53c7 	ldrb.w	r5, [r0, #967]	; 0x3c7
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f308:	429d      	cmp	r5, r3
 800f30a:	d001      	beq.n	800f310 <USBH_FindInterface+0xfc>
 800f30c:	2bff      	cmp	r3, #255	; 0xff
 800f30e:	d1a0      	bne.n	800f252 <USBH_FindInterface+0x3e>
    if_ix++;
 800f310:	2003      	movs	r0, #3
 800f312:	e7c5      	b.n	800f2a0 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f314:	f890 53f0 	ldrb.w	r5, [r0, #1008]	; 0x3f0
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f318:	4295      	cmp	r5, r2
 800f31a:	d001      	beq.n	800f320 <USBH_FindInterface+0x10c>
 800f31c:	2aff      	cmp	r2, #255	; 0xff
 800f31e:	d19e      	bne.n	800f25e <USBH_FindInterface+0x4a>
 800f320:	f890 53f1 	ldrb.w	r5, [r0, #1009]	; 0x3f1
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f324:	429d      	cmp	r5, r3
 800f326:	d001      	beq.n	800f32c <USBH_FindInterface+0x118>
 800f328:	2bff      	cmp	r3, #255	; 0xff
 800f32a:	d198      	bne.n	800f25e <USBH_FindInterface+0x4a>
    if_ix++;
 800f32c:	2004      	movs	r0, #4
 800f32e:	e7b7      	b.n	800f2a0 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f330:	f890 541a 	ldrb.w	r5, [r0, #1050]	; 0x41a
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f334:	4295      	cmp	r5, r2
 800f336:	d001      	beq.n	800f33c <USBH_FindInterface+0x128>
 800f338:	2aff      	cmp	r2, #255	; 0xff
 800f33a:	d196      	bne.n	800f26a <USBH_FindInterface+0x56>
 800f33c:	f890 541b 	ldrb.w	r5, [r0, #1051]	; 0x41b
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f340:	429d      	cmp	r5, r3
 800f342:	d001      	beq.n	800f348 <USBH_FindInterface+0x134>
 800f344:	2bff      	cmp	r3, #255	; 0xff
 800f346:	d190      	bne.n	800f26a <USBH_FindInterface+0x56>
    if_ix++;
 800f348:	2005      	movs	r0, #5
 800f34a:	e7a9      	b.n	800f2a0 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f34c:	f890 5444 	ldrb.w	r5, [r0, #1092]	; 0x444
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f350:	4295      	cmp	r5, r2
 800f352:	d001      	beq.n	800f358 <USBH_FindInterface+0x144>
 800f354:	2aff      	cmp	r2, #255	; 0xff
 800f356:	d18e      	bne.n	800f276 <USBH_FindInterface+0x62>
 800f358:	f890 5445 	ldrb.w	r5, [r0, #1093]	; 0x445
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f35c:	429d      	cmp	r5, r3
 800f35e:	d001      	beq.n	800f364 <USBH_FindInterface+0x150>
 800f360:	2bff      	cmp	r3, #255	; 0xff
 800f362:	d188      	bne.n	800f276 <USBH_FindInterface+0x62>
    if_ix++;
 800f364:	2006      	movs	r0, #6
 800f366:	e79b      	b.n	800f2a0 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f368:	f890 546e 	ldrb.w	r5, [r0, #1134]	; 0x46e
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f36c:	4295      	cmp	r5, r2
 800f36e:	d001      	beq.n	800f374 <USBH_FindInterface+0x160>
 800f370:	2aff      	cmp	r2, #255	; 0xff
 800f372:	d186      	bne.n	800f282 <USBH_FindInterface+0x6e>
 800f374:	f890 546f 	ldrb.w	r5, [r0, #1135]	; 0x46f
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f378:	429d      	cmp	r5, r3
 800f37a:	d001      	beq.n	800f380 <USBH_FindInterface+0x16c>
 800f37c:	2bff      	cmp	r3, #255	; 0xff
 800f37e:	d180      	bne.n	800f282 <USBH_FindInterface+0x6e>
    if_ix++;
 800f380:	2007      	movs	r0, #7
 800f382:	e78d      	b.n	800f2a0 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f384:	f890 5498 	ldrb.w	r5, [r0, #1176]	; 0x498
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f388:	4295      	cmp	r5, r2
 800f38a:	d002      	beq.n	800f392 <USBH_FindInterface+0x17e>
 800f38c:	2aff      	cmp	r2, #255	; 0xff
 800f38e:	f47f af7e 	bne.w	800f28e <USBH_FindInterface+0x7a>
 800f392:	f890 5499 	ldrb.w	r5, [r0, #1177]	; 0x499
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f396:	429d      	cmp	r5, r3
 800f398:	d002      	beq.n	800f3a0 <USBH_FindInterface+0x18c>
 800f39a:	2bff      	cmp	r3, #255	; 0xff
 800f39c:	f47f af77 	bne.w	800f28e <USBH_FindInterface+0x7a>
    if_ix++;
 800f3a0:	2008      	movs	r0, #8
 800f3a2:	e77d      	b.n	800f2a0 <USBH_FindInterface+0x8c>
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f3a4:	f890 14c2 	ldrb.w	r1, [r0, #1218]	; 0x4c2
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f3a8:	4291      	cmp	r1, r2
 800f3aa:	d002      	beq.n	800f3b2 <USBH_FindInterface+0x19e>
 800f3ac:	2aff      	cmp	r2, #255	; 0xff
 800f3ae:	f47f af76 	bne.w	800f29e <USBH_FindInterface+0x8a>
 800f3b2:	f890 24c3 	ldrb.w	r2, [r0, #1219]	; 0x4c3
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d002      	beq.n	800f3c0 <USBH_FindInterface+0x1ac>
 800f3ba:	2bff      	cmp	r3, #255	; 0xff
 800f3bc:	f47f af6f 	bne.w	800f29e <USBH_FindInterface+0x8a>
    if_ix++;
 800f3c0:	2009      	movs	r0, #9
 800f3c2:	e76d      	b.n	800f2a0 <USBH_FindInterface+0x8c>

0800f3c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800f3c4:	b510      	push	{r4, lr}
 800f3c6:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800f3c8:	f00e fe0c 	bl	801dfe4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, 1);
 800f3cc:	2101      	movs	r1, #1
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	f00e fe8e 	bl	801e0f0 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	bd10      	pop	{r4, pc}

0800f3d8 <USBH_Stop>:
  *         Stop the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Stop(USBH_HandleTypeDef *phost)
{
 800f3d8:	b510      	push	{r4, lr}
 800f3da:	4604      	mov	r4, r0
  /* DeActivate VBUS on the port */
  USBH_LL_DriverVBUS(phost, 0);
 800f3dc:	2100      	movs	r1, #0
 800f3de:	f00e fe87 	bl	801e0f0 <USBH_LL_DriverVBUS>

  /* Stop and cleanup the low level driver  */
  USBH_LL_Stop(phost);
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	f00e fe0c 	bl	801e000 <USBH_LL_Stop>

  /* Free Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f3e8:	7921      	ldrb	r1, [r4, #4]
 800f3ea:	4620      	mov	r0, r4
 800f3ec:	f001 fa5e 	bl	80108ac <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f3f0:	7961      	ldrb	r1, [r4, #5]
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	f001 fa5a 	bl	80108ac <USBH_FreePipe>

  return USBH_OK;
}
 800f3f8:	2000      	movs	r0, #0
 800f3fa:	bd10      	pop	{r4, pc}

0800f3fc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800f3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f3fe:	2302      	movs	r3, #2
{
 800f400:	b087      	sub	sp, #28
 800f402:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f404:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f408:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d101      	bne.n	800f414 <USBH_Process+0x18>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f410:	2303      	movs	r3, #3
 800f412:	7003      	strb	r3, [r0, #0]
  }

  switch (phost->gState)
 800f414:	7823      	ldrb	r3, [r4, #0]
 800f416:	2b0b      	cmp	r3, #11
 800f418:	d84f      	bhi.n	800f4ba <USBH_Process+0xbe>
 800f41a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f41e:	0059      	.short	0x0059
 800f420:	0082006b 	.word	0x0082006b
 800f424:	004e00b8 	.word	0x004e00b8
 800f428:	00f700ee 	.word	0x00f700ee
 800f42c:	011f010c 	.word	0x011f010c
 800f430:	000c0117 	.word	0x000c0117
 800f434:	0051      	.short	0x0051
#endif
      break;

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f436:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d03d      	beq.n	800f4ba <USBH_Process+0xbe>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f43e:	2300      	movs	r3, #0

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
        {
          for (int j = 0; j < 10; j++)
          {
			  if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[j].bInterfaceClass)
 800f440:	f8d4 14e8 	ldr.w	r1, [r4, #1256]	; 0x4e8
 800f444:	f894 2347 	ldrb.w	r2, [r4, #839]	; 0x347
        phost->pActiveClass = NULL;
 800f448:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
			  if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[j].bInterfaceClass)
 800f44c:	790b      	ldrb	r3, [r1, #4]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d024      	beq.n	800f49c <USBH_Process+0xa0>
 800f452:	f894 2371 	ldrb.w	r2, [r4, #881]	; 0x371
 800f456:	429a      	cmp	r2, r3
 800f458:	d020      	beq.n	800f49c <USBH_Process+0xa0>
 800f45a:	f894 239b 	ldrb.w	r2, [r4, #923]	; 0x39b
 800f45e:	429a      	cmp	r2, r3
 800f460:	d01c      	beq.n	800f49c <USBH_Process+0xa0>
 800f462:	f894 23c5 	ldrb.w	r2, [r4, #965]	; 0x3c5
 800f466:	429a      	cmp	r2, r3
 800f468:	d018      	beq.n	800f49c <USBH_Process+0xa0>
 800f46a:	f894 23ef 	ldrb.w	r2, [r4, #1007]	; 0x3ef
 800f46e:	429a      	cmp	r2, r3
 800f470:	d014      	beq.n	800f49c <USBH_Process+0xa0>
 800f472:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
 800f476:	429a      	cmp	r2, r3
 800f478:	d010      	beq.n	800f49c <USBH_Process+0xa0>
 800f47a:	f894 2443 	ldrb.w	r2, [r4, #1091]	; 0x443
 800f47e:	429a      	cmp	r2, r3
 800f480:	d00c      	beq.n	800f49c <USBH_Process+0xa0>
 800f482:	f894 246d 	ldrb.w	r2, [r4, #1133]	; 0x46d
 800f486:	429a      	cmp	r2, r3
 800f488:	d008      	beq.n	800f49c <USBH_Process+0xa0>
 800f48a:	f894 2497 	ldrb.w	r2, [r4, #1175]	; 0x497
 800f48e:	429a      	cmp	r2, r3
 800f490:	d004      	beq.n	800f49c <USBH_Process+0xa0>
 800f492:	f894 24c1 	ldrb.w	r2, [r4, #1217]	; 0x4c1
 800f496:	429a      	cmp	r2, r3
 800f498:	f040 80c8 	bne.w	800f62c <USBH_Process+0x230>
			  {
				phost->pActiveClass = phost->pClass[idx];
 800f49c:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
          }
        }

        if (phost->pActiveClass != NULL)
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f4a0:	4620      	mov	r0, r4
 800f4a2:	688b      	ldr	r3, [r1, #8]
 800f4a4:	4798      	blx	r3
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	f040 80c0 	bne.w	800f62c <USBH_Process+0x230>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f4ac:	2206      	movs	r2, #6
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f4ae:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	2103      	movs	r1, #3
            phost->gState = HOST_CLASS_REQUEST;
 800f4b6:	7022      	strb	r2, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f4b8:	4798      	blx	r3
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 800f4ba:	2000      	movs	r0, #0
 800f4bc:	b007      	add	sp, #28
 800f4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (phost->pActiveClass != NULL)
 800f4c0:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d0f8      	beq.n	800f4ba <USBH_Process+0xbe>
        phost->pActiveClass->BgndProcess(phost);
 800f4c8:	695b      	ldr	r3, [r3, #20]
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	4798      	blx	r3
 800f4ce:	e7f4      	b.n	800f4ba <USBH_Process+0xbe>
      if (phost->device.is_connected)
 800f4d0:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d0f0      	beq.n	800f4ba <USBH_Process+0xbe>
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f4d8:	2301      	movs	r3, #1
        USBH_Delay(200U);
 800f4da:	20c8      	movs	r0, #200	; 0xc8
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f4dc:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
 800f4de:	f00e fe2b 	bl	801e138 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f00e fdaa 	bl	801e03c <USBH_LL_ResetPort>
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 800f4ee:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
 800f4f2:	e7e2      	b.n	800f4ba <USBH_Process+0xbe>
      if (phost->device.PortEnabled == 1U)
 800f4f4:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	f000 8145 	beq.w	800f788 <USBH_Process+0x38c>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f4fe:	f8d4 3538 	ldr.w	r3, [r4, #1336]	; 0x538
 800f502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f506:	f240 80b7 	bls.w	800f678 <USBH_Process+0x27c>
          phost->device.RstCnt++;
 800f50a:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 800f50e:	3301      	adds	r3, #1
 800f510:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 800f512:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 800f514:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800f518:	f200 8088 	bhi.w	800f62c <USBH_Process+0x230>
            phost->gState = HOST_IDLE;
 800f51c:	2300      	movs	r3, #0
 800f51e:	7023      	strb	r3, [r4, #0]
 800f520:	e7cb      	b.n	800f4ba <USBH_Process+0xbe>
      if (phost->pUser != NULL)
 800f522:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 800f526:	b113      	cbz	r3, 800f52e <USBH_Process+0x132>
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f528:	2104      	movs	r1, #4
 800f52a:	4620      	mov	r0, r4
 800f52c:	4798      	blx	r3
      USBH_Delay(100U);
 800f52e:	2064      	movs	r0, #100	; 0x64
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f530:	2500      	movs	r5, #0
      USBH_Delay(100U);
 800f532:	f00e fe01 	bl	801e138 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 800f536:	4620      	mov	r0, r4
 800f538:	f00e fd70 	bl	801e01c <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 800f53c:	2305      	movs	r3, #5
      phost->device.speed = USBH_LL_GetSpeed(phost);
 800f53e:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f542:	4629      	mov	r1, r5
      phost->gState = HOST_ENUMERATION;
 800f544:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f546:	4620      	mov	r0, r4
 800f548:	f001 f966 	bl	8010818 <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f54c:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f54e:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f550:	4620      	mov	r0, r4
 800f552:	f001 f961 	bl	8010818 <USBH_AllocPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f556:	79a7      	ldrb	r7, [r4, #6]
 800f558:	f894 631d 	ldrb.w	r6, [r4, #797]	; 0x31d
 800f55c:	4601      	mov	r1, r0
 800f55e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800f562:	2280      	movs	r2, #128	; 0x80
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f564:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f566:	4620      	mov	r0, r4
 800f568:	9702      	str	r7, [sp, #8]
 800f56a:	e9cd 6500 	strd	r6, r5, [sp]
 800f56e:	f001 f93d 	bl	80107ec <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f572:	79a7      	ldrb	r7, [r4, #6]
 800f574:	f894 631d 	ldrb.w	r6, [r4, #797]	; 0x31d
 800f578:	462a      	mov	r2, r5
 800f57a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800f57e:	4620      	mov	r0, r4
 800f580:	7961      	ldrb	r1, [r4, #5]
 800f582:	9501      	str	r5, [sp, #4]
 800f584:	9702      	str	r7, [sp, #8]
 800f586:	9600      	str	r6, [sp, #0]
 800f588:	f001 f930 	bl	80107ec <USBH_OpenPipe>
      break;
 800f58c:	e795      	b.n	800f4ba <USBH_Process+0xbe>
      phost->device.is_disconnected = 0U;
 800f58e:	2500      	movs	r5, #0
 800f590:	223c      	movs	r2, #60	; 0x3c
 800f592:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800f596:	4629      	mov	r1, r5
 800f598:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
 800f59c:	f017 fc8d 	bl	8026eba <memset>
 800f5a0:	4629      	mov	r1, r5
 800f5a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f5a6:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 800f5aa:	f017 fc86 	bl	8026eba <memset>
  phost->RequestState = CMD_SEND;
 800f5ae:	2301      	movs	r3, #1
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f5b0:	2040      	movs	r0, #64	; 0x40
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f5b2:	f44f 7180 	mov.w	r1, #256	; 0x100
      if (phost->pActiveClass != NULL)
 800f5b6:	f8d4 24ec 	ldr.w	r2, [r4, #1260]	; 0x4ec
  phost->gState = HOST_IDLE;
 800f5ba:	7025      	strb	r5, [r4, #0]
  phost->EnumState = ENUM_IDLE;
 800f5bc:	7065      	strb	r5, [r4, #1]
  phost->Timer = 0U;
 800f5be:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
  phost->Control.errorcount = 0U;
 800f5c2:	7665      	strb	r5, [r4, #25]
  phost->RequestState = CMD_SEND;
 800f5c4:	70a3      	strb	r3, [r4, #2]
  phost->Control.state = CTRL_SETUP;
 800f5c6:	7623      	strb	r3, [r4, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f5c8:	71a0      	strb	r0, [r4, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f5ca:	f8c4 131c 	str.w	r1, [r4, #796]	; 0x31c
      if (phost->pActiveClass != NULL)
 800f5ce:	b122      	cbz	r2, 800f5da <USBH_Process+0x1de>
        phost->pActiveClass->DeInit(phost);
 800f5d0:	68d3      	ldr	r3, [r2, #12]
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f5d6:	f8c4 54ec 	str.w	r5, [r4, #1260]	; 0x4ec
      if (phost->pUser != NULL)
 800f5da:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 800f5de:	b113      	cbz	r3, 800f5e6 <USBH_Process+0x1ea>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f5e0:	2105      	movs	r1, #5
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 800f5e6:	f894 5322 	ldrb.w	r5, [r4, #802]	; 0x322
 800f5ea:	b2ed      	uxtb	r5, r5
 800f5ec:	2d01      	cmp	r5, #1
 800f5ee:	f000 80c0 	beq.w	800f772 <USBH_Process+0x376>
        USBH_LL_Start(phost);
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f00e fcf6 	bl	801dfe4 <USBH_LL_Start>
  return USBH_OK;
 800f5f8:	e75f      	b.n	800f4ba <USBH_Process+0xbe>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 800f5fa:	7863      	ldrb	r3, [r4, #1]
 800f5fc:	2b07      	cmp	r3, #7
 800f5fe:	d84d      	bhi.n	800f69c <USBH_Process+0x2a0>
 800f600:	e8df f003 	tbb	[pc, r3]
 800f604:	a58b9b41 	.word	0xa58b9b41
 800f608:	5f656d75 	.word	0x5f656d75
      if (phost->pActiveClass != NULL)
 800f60c:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
 800f610:	b163      	cbz	r3, 800f62c <USBH_Process+0x230>
        status = phost->pActiveClass->Requests(phost);
 800f612:	691b      	ldr	r3, [r3, #16]
 800f614:	4620      	mov	r0, r4
 800f616:	4798      	blx	r3
 800f618:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800f61c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800f620:	b33b      	cbz	r3, 800f672 <USBH_Process+0x276>
        else if (status == USBH_FAIL)
 800f622:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800f626:	2b02      	cmp	r3, #2
 800f628:	f47f af47 	bne.w	800f4ba <USBH_Process+0xbe>
        phost->gState = HOST_ABORT_STATE;
 800f62c:	230d      	movs	r3, #13
}
 800f62e:	2000      	movs	r0, #0
        phost->gState = HOST_ABORT_STATE;
 800f630:	7023      	strb	r3, [r4, #0]
}
 800f632:	b007      	add	sp, #28
 800f634:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (phost->pUser != NULL)
 800f636:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f43f af3d 	beq.w	800f4ba <USBH_Process+0xbe>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f640:	2101      	movs	r1, #1
 800f642:	4620      	mov	r0, r4
 800f644:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f646:	2308      	movs	r3, #8
 800f648:	7023      	strb	r3, [r4, #0]
 800f64a:	e736      	b.n	800f4ba <USBH_Process+0xbe>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800f64c:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
 800f650:	069b      	lsls	r3, r3, #26
 800f652:	f100 8086 	bmi.w	800f762 <USBH_Process+0x366>
        phost->gState = HOST_CHECK_CLASS;
 800f656:	230a      	movs	r3, #10
 800f658:	7023      	strb	r3, [r4, #0]
 800f65a:	e72e      	b.n	800f4ba <USBH_Process+0xbe>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f65c:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
 800f660:	4620      	mov	r0, r4
 800f662:	f000 fdc5 	bl	80101f0 <USBH_SetCfg>
 800f666:	2800      	cmp	r0, #0
 800f668:	f47f af27 	bne.w	800f4ba <USBH_Process+0xbe>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f66c:	2309      	movs	r3, #9
 800f66e:	7023      	strb	r3, [r4, #0]
 800f670:	e723      	b.n	800f4ba <USBH_Process+0xbe>
          phost->gState = HOST_CLASS;
 800f672:	230b      	movs	r3, #11
 800f674:	7023      	strb	r3, [r4, #0]
 800f676:	e720      	b.n	800f4ba <USBH_Process+0xbe>
          phost->Timeout += 10U;
 800f678:	330a      	adds	r3, #10
          USBH_Delay(10U);
 800f67a:	200a      	movs	r0, #10
          phost->Timeout += 10U;
 800f67c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
          USBH_Delay(10U);
 800f680:	f00e fd5a 	bl	801e138 <USBH_Delay>
 800f684:	e719      	b.n	800f4ba <USBH_Process+0xbe>
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f686:	2108      	movs	r1, #8
 800f688:	4620      	mov	r0, r4
 800f68a:	f000 f959 	bl	800f940 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800f68e:	4605      	mov	r5, r0
 800f690:	2800      	cmp	r0, #0
 800f692:	f000 80c1 	beq.w	800f818 <USBH_Process+0x41c>
        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
      }
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f696:	2803      	cmp	r0, #3
 800f698:	f000 80aa 	beq.w	800f7f0 <USBH_Process+0x3f4>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f69c:	2301      	movs	r3, #1
      status = USBH_HandleEnum(phost);
 800f69e:	f88d 3017 	strb.w	r3, [sp, #23]
      if (status == USBH_OK)
 800f6a2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800f6a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	f47f af05 	bne.w	800f4ba <USBH_Process+0xbe>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f6b0:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
        phost->device.current_interface = 0U;
 800f6b4:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f6b8:	2b01      	cmp	r3, #1
 800f6ba:	d0c4      	beq.n	800f646 <USBH_Process+0x24a>
          phost->gState = HOST_INPUT;
 800f6bc:	2307      	movs	r3, #7
 800f6be:	7023      	strb	r3, [r4, #0]
 800f6c0:	e6fb      	b.n	800f4ba <USBH_Process+0xbe>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f6c2:	f894 1336 	ldrb.w	r1, [r4, #822]	; 0x336
 800f6c6:	2900      	cmp	r1, #0
 800f6c8:	d174      	bne.n	800f7b4 <USBH_Process+0x3b8>
        }
      }
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	e7e7      	b.n	800f69e <USBH_Process+0x2a2>
      if (phost->device.DevDesc.iProduct != 0U)
 800f6ce:	f894 1335 	ldrb.w	r1, [r4, #821]	; 0x335
 800f6d2:	2900      	cmp	r1, #0
 800f6d4:	d17f      	bne.n	800f7d6 <USBH_Process+0x3da>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f6d6:	2207      	movs	r2, #7
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f6d8:	2301      	movs	r3, #1
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f6da:	7062      	strb	r2, [r4, #1]
 800f6dc:	e7df      	b.n	800f69e <USBH_Process+0x2a2>
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f6de:	f894 1334 	ldrb.w	r1, [r4, #820]	; 0x334
 800f6e2:	2900      	cmp	r1, #0
 800f6e4:	d15a      	bne.n	800f79c <USBH_Process+0x3a0>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f6e6:	2206      	movs	r2, #6
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f6e8:	2301      	movs	r3, #1
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f6ea:	7062      	strb	r2, [r4, #1]
 800f6ec:	e7d7      	b.n	800f69e <USBH_Process+0x2a2>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f6ee:	f8b4 133a 	ldrh.w	r1, [r4, #826]	; 0x33a
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	f000 fa32 	bl	800fb5c <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d04b      	beq.n	800f794 <USBH_Process+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f6fc:	2803      	cmp	r0, #3
 800f6fe:	d1cd      	bne.n	800f69c <USBH_Process+0x2a0>
        phost->device.EnumCnt++;
 800f700:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800f704:	3301      	adds	r3, #1
 800f706:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 800f708:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800f70a:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f70e:	f240 80a6 	bls.w	800f85e <USBH_Process+0x462>
          phost->gState = HOST_ABORT_STATE;
 800f712:	220d      	movs	r2, #13
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f714:	2301      	movs	r3, #1
          phost->gState = HOST_ABORT_STATE;
 800f716:	7022      	strb	r2, [r4, #0]
 800f718:	e7c1      	b.n	800f69e <USBH_Process+0x2a2>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f71a:	2101      	movs	r1, #1
 800f71c:	4620      	mov	r0, r4
 800f71e:	f000 fc81 	bl	8010024 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 800f722:	4606      	mov	r6, r0
 800f724:	2800      	cmp	r0, #0
 800f726:	f000 80a7 	beq.w	800f878 <USBH_Process+0x47c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f72a:	2803      	cmp	r0, #3
 800f72c:	d1b6      	bne.n	800f69c <USBH_Process+0x2a0>
        phost->gState = HOST_ABORT_STATE;
 800f72e:	210d      	movs	r1, #13
        phost->EnumState = ENUM_IDLE;
 800f730:	2200      	movs	r2, #0
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f732:	2301      	movs	r3, #1
        phost->gState = HOST_ABORT_STATE;
 800f734:	7021      	strb	r1, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 800f736:	7062      	strb	r2, [r4, #1]
 800f738:	e7b1      	b.n	800f69e <USBH_Process+0x2a2>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f73a:	2112      	movs	r1, #18
 800f73c:	4620      	mov	r0, r4
 800f73e:	f000 f8ff 	bl	800f940 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800f742:	2800      	cmp	r0, #0
 800f744:	d1da      	bne.n	800f6fc <USBH_Process+0x300>
        phost->EnumState = ENUM_SET_ADDR;
 800f746:	2202      	movs	r2, #2
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f748:	2301      	movs	r3, #1
        phost->EnumState = ENUM_SET_ADDR;
 800f74a:	7062      	strb	r2, [r4, #1]
 800f74c:	e7a7      	b.n	800f69e <USBH_Process+0x2a2>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f74e:	2109      	movs	r1, #9
 800f750:	4620      	mov	r0, r4
 800f752:	f000 fa03 	bl	800fb5c <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800f756:	2800      	cmp	r0, #0
 800f758:	d1d0      	bne.n	800f6fc <USBH_Process+0x300>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f75a:	2204      	movs	r2, #4
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f75c:	2301      	movs	r3, #1
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f75e:	7062      	strb	r2, [r4, #1]
 800f760:	e79d      	b.n	800f69e <USBH_Process+0x2a2>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800f762:	2101      	movs	r1, #1
 800f764:	4620      	mov	r0, r4
 800f766:	f000 fe29 	bl	80103bc <USBH_SetFeature>
 800f76a:	2800      	cmp	r0, #0
 800f76c:	f47f aea5 	bne.w	800f4ba <USBH_Process+0xbe>
 800f770:	e771      	b.n	800f656 <USBH_Process+0x25a>
        phost->device.is_ReEnumerated = 0U;
 800f772:	2300      	movs	r3, #0
  USBH_LL_Start(phost);
 800f774:	4620      	mov	r0, r4
        phost->device.is_ReEnumerated = 0U;
 800f776:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  USBH_LL_Start(phost);
 800f77a:	f00e fc33 	bl	801dfe4 <USBH_LL_Start>
  USBH_LL_DriverVBUS(phost, 1);
 800f77e:	4629      	mov	r1, r5
 800f780:	4620      	mov	r0, r4
 800f782:	f00e fcb5 	bl	801e0f0 <USBH_LL_DriverVBUS>
 800f786:	e698      	b.n	800f4ba <USBH_Process+0xbe>
        phost->device.RstCnt = 0U;
 800f788:	2200      	movs	r2, #0
        phost->gState = HOST_DEV_ATTACHED;
 800f78a:	2302      	movs	r3, #2
        phost->device.RstCnt = 0U;
 800f78c:	f884 231f 	strb.w	r2, [r4, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f790:	7023      	strb	r3, [r4, #0]
 800f792:	e692      	b.n	800f4ba <USBH_Process+0xbe>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f794:	2205      	movs	r2, #5
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f796:	2301      	movs	r3, #1
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f798:	7062      	strb	r2, [r4, #1]
 800f79a:	e780      	b.n	800f69e <USBH_Process+0x2a2>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f79c:	23ff      	movs	r3, #255	; 0xff
 800f79e:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	f000 fb30 	bl	800fe08 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	d09c      	beq.n	800f6e6 <USBH_Process+0x2ea>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f7ac:	2803      	cmp	r0, #3
 800f7ae:	f47f af75 	bne.w	800f69c <USBH_Process+0x2a0>
 800f7b2:	e798      	b.n	800f6e6 <USBH_Process+0x2ea>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f7b4:	23ff      	movs	r3, #255	; 0xff
 800f7b6:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	f000 fb24 	bl	800fe08 <USBH_Get_StringDesc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f7c0:	f1a0 0303 	sub.w	r3, r0, #3
 800f7c4:	fab3 f383 	clz	r3, r3
 800f7c8:	095b      	lsrs	r3, r3, #5
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	bf08      	it	eq
 800f7ce:	2301      	moveq	r3, #1
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f7d0:	f083 0301 	eor.w	r3, r3, #1
 800f7d4:	e763      	b.n	800f69e <USBH_Process+0x2a2>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f7d6:	23ff      	movs	r3, #255	; 0xff
 800f7d8:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800f7dc:	4620      	mov	r0, r4
 800f7de:	f000 fb13 	bl	800fe08 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	f43f af77 	beq.w	800f6d6 <USBH_Process+0x2da>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f7e8:	2803      	cmp	r0, #3
 800f7ea:	f47f af57 	bne.w	800f69c <USBH_Process+0x2a0>
 800f7ee:	e772      	b.n	800f6d6 <USBH_Process+0x2da>
        phost->device.EnumCnt++;
 800f7f0:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 800f7f8:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800f7fa:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f7fe:	d888      	bhi.n	800f712 <USBH_Process+0x316>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f800:	7961      	ldrb	r1, [r4, #5]
 800f802:	4620      	mov	r0, r4
 800f804:	f001 f852 	bl	80108ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f808:	7921      	ldrb	r1, [r4, #4]
 800f80a:	4620      	mov	r0, r4
 800f80c:	f001 f84e 	bl	80108ac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f810:	2200      	movs	r2, #0
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f812:	2301      	movs	r3, #1
          phost->gState = HOST_IDLE;
 800f814:	7022      	strb	r2, [r4, #0]
 800f816:	e742      	b.n	800f69e <USBH_Process+0x2a2>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f818:	f894 732d 	ldrb.w	r7, [r4, #813]	; 0x32d
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f81c:	2601      	movs	r6, #1
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f81e:	f894 c31d 	ldrb.w	ip, [r4, #797]	; 0x31d
 800f822:	2280      	movs	r2, #128	; 0x80
 800f824:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800f828:	4620      	mov	r0, r4
 800f82a:	7921      	ldrb	r1, [r4, #4]
 800f82c:	9501      	str	r5, [sp, #4]
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f82e:	71a7      	strb	r7, [r4, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f830:	9702      	str	r7, [sp, #8]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f832:	7066      	strb	r6, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f834:	f8cd c000 	str.w	ip, [sp]
 800f838:	f000 ffd8 	bl	80107ec <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f83c:	f894 c006 	ldrb.w	ip, [r4, #6]
 800f840:	f894 731d 	ldrb.w	r7, [r4, #797]	; 0x31d
 800f844:	462a      	mov	r2, r5
 800f846:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800f84a:	4620      	mov	r0, r4
 800f84c:	7961      	ldrb	r1, [r4, #5]
 800f84e:	9501      	str	r5, [sp, #4]
 800f850:	f8cd c008 	str.w	ip, [sp, #8]
 800f854:	9700      	str	r7, [sp, #0]
 800f856:	f000 ffc9 	bl	80107ec <USBH_OpenPipe>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f85a:	4633      	mov	r3, r6
 800f85c:	e71f      	b.n	800f69e <USBH_Process+0x2a2>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f85e:	7961      	ldrb	r1, [r4, #5]
 800f860:	4620      	mov	r0, r4
 800f862:	f001 f823 	bl	80108ac <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f866:	7921      	ldrb	r1, [r4, #4]
 800f868:	4620      	mov	r0, r4
 800f86a:	f001 f81f 	bl	80108ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f86e:	2200      	movs	r2, #0
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f870:	2301      	movs	r3, #1
          phost->EnumState = ENUM_IDLE;
 800f872:	7062      	strb	r2, [r4, #1]
          phost->gState = HOST_IDLE;
 800f874:	7022      	strb	r2, [r4, #0]
 800f876:	e712      	b.n	800f69e <USBH_Process+0x2a2>
        USBH_Delay(2U);
 800f878:	2002      	movs	r0, #2
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f87a:	2501      	movs	r5, #1
        USBH_Delay(2U);
 800f87c:	f00e fc5c 	bl	801e138 <USBH_Delay>
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f880:	79a7      	ldrb	r7, [r4, #6]
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f882:	2003      	movs	r0, #3
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f884:	7921      	ldrb	r1, [r4, #4]
 800f886:	9601      	str	r6, [sp, #4]
 800f888:	462b      	mov	r3, r5
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f88a:	7060      	strb	r0, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f88c:	2280      	movs	r2, #128	; 0x80
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f88e:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f892:	4620      	mov	r0, r4
 800f894:	9702      	str	r7, [sp, #8]
 800f896:	f894 731d 	ldrb.w	r7, [r4, #797]	; 0x31d
 800f89a:	9700      	str	r7, [sp, #0]
 800f89c:	f000 ffa6 	bl	80107ec <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f8a0:	f894 c006 	ldrb.w	ip, [r4, #6]
 800f8a4:	f894 731d 	ldrb.w	r7, [r4, #797]	; 0x31d
 800f8a8:	4632      	mov	r2, r6
 800f8aa:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	7961      	ldrb	r1, [r4, #5]
 800f8b2:	9601      	str	r6, [sp, #4]
 800f8b4:	f8cd c008 	str.w	ip, [sp, #8]
 800f8b8:	9700      	str	r7, [sp, #0]
 800f8ba:	f000 ff97 	bl	80107ec <USBH_OpenPipe>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f8be:	462b      	mov	r3, r5
 800f8c0:	e6ed      	b.n	800f69e <USBH_Process+0x2a2>
 800f8c2:	bf00      	nop

0800f8c4 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 800f8c4:	f8c0 1534 	str.w	r1, [r0, #1332]	; 0x534
}
 800f8c8:	4770      	bx	lr
 800f8ca:	bf00      	nop

0800f8cc <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 800f8cc:	f8d0 2534 	ldr.w	r2, [r0, #1332]	; 0x534
 800f8d0:	3201      	adds	r2, #1
 800f8d2:	f8c0 2534 	str.w	r2, [r0, #1332]	; 0x534
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f8d6:	7802      	ldrb	r2, [r0, #0]
 800f8d8:	2a0b      	cmp	r2, #11
 800f8da:	d000      	beq.n	800f8de <USBH_LL_IncTimer+0x12>
}
 800f8dc:	4770      	bx	lr
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f8de:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d0fa      	beq.n	800f8dc <USBH_LL_IncTimer+0x10>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f8e6:	699b      	ldr	r3, [r3, #24]
 800f8e8:	4718      	bx	r3
 800f8ea:	bf00      	nop

0800f8ec <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 800f8f2:	4770      	bx	lr

0800f8f4 <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 800f8fa:	4770      	bx	lr

0800f8fc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f8fc:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
  phost->device.is_disconnected = 0U;
 800f8fe:	2200      	movs	r2, #0
  phost->device.is_connected = 1U;
 800f900:	2101      	movs	r1, #1
 800f902:	f880 1320 	strb.w	r1, [r0, #800]	; 0x320
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800f906:	4610      	mov	r0, r2
  phost->device.is_disconnected = 0U;
 800f908:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f90c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
}
 800f910:	4770      	bx	lr
 800f912:	bf00      	nop

0800f914 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f914:	b538      	push	{r3, r4, r5, lr}
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f916:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 800f918:	2500      	movs	r5, #0
{
 800f91a:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 800f91c:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.PortEnabled = 0U;
 800f920:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323
  phost->device.is_connected = 0U;
 800f924:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f928:	f00e fb6a 	bl	801e000 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f92c:	7921      	ldrb	r1, [r4, #4]
 800f92e:	4620      	mov	r0, r4
 800f930:	f000 ffbc 	bl	80108ac <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f934:	7961      	ldrb	r1, [r4, #5]
 800f936:	4620      	mov	r0, r4
 800f938:	f000 ffb8 	bl	80108ac <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 800f93c:	4628      	mov	r0, r5
 800f93e:	bd38      	pop	{r3, r4, r5, pc}

0800f940 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f940:	b570      	push	{r4, r5, r6, lr}
 800f942:	4604      	mov	r4, r0
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
  if (phost->RequestState == CMD_SEND)
 800f944:	7880      	ldrb	r0, [r0, #2]
{
 800f946:	b082      	sub	sp, #8
  if (phost->RequestState == CMD_SEND)
 800f948:	2801      	cmp	r0, #1
 800f94a:	d011      	beq.n	800f970 <USBH_Get_DevDesc+0x30>
                               uint16_t length)
{
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 800f94c:	2802      	cmp	r0, #2
 800f94e:	d002      	beq.n	800f956 <USBH_Get_DevDesc+0x16>
  status = USBH_BUSY;
 800f950:	2001      	movs	r0, #1
}
 800f952:	b002      	add	sp, #8
 800f954:	bd70      	pop	{r4, r5, r6, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 800f956:	7e23      	ldrb	r3, [r4, #24]
 800f958:	460d      	mov	r5, r1
 800f95a:	3b01      	subs	r3, #1
 800f95c:	2b0a      	cmp	r3, #10
 800f95e:	d8f7      	bhi.n	800f950 <USBH_Get_DevDesc+0x10>
 800f960:	e8df f003 	tbb	[pc, r3]
 800f964:	5548392f 	.word	0x5548392f
 800f968:	8c7f6f60 	.word	0x8c7f6f60
 800f96c:	ac9d      	.short	0xac9d
 800f96e:	14          	.byte	0x14
 800f96f:	00          	.byte	0x00
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f970:	4e79      	ldr	r6, [pc, #484]	; (800fb58 <USBH_Get_DevDesc+0x218>)
    phost->Control.setup.b.wValue.w = value_idx;
 800f972:	2500      	movs	r5, #0
                                   USB_DESC_DEVICE, phost->device.Data,
 800f974:	f504 728e 	add.w	r2, r4, #284	; 0x11c
      phost->RequestState = CMD_WAIT;
 800f978:	2302      	movs	r3, #2
    phost->Control.setup.b.wLength.w = length;
 800f97a:	82e1      	strh	r1, [r4, #22]
      phost->Control.length = length;
 800f97c:	81a1      	strh	r1, [r4, #12]
      phost->Control.state = CTRL_SETUP;
 800f97e:	7620      	strb	r0, [r4, #24]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f980:	6126      	str	r6, [r4, #16]
    phost->Control.setup.b.wValue.w = value_idx;
 800f982:	82a5      	strh	r5, [r4, #20]
      phost->Control.buff = buff;
 800f984:	60a2      	str	r2, [r4, #8]
      phost->RequestState = CMD_WAIT;
 800f986:	70a3      	strb	r3, [r4, #2]
}
 800f988:	b002      	add	sp, #8
 800f98a:	bd70      	pop	{r4, r5, r6, pc}
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f98c:	7e63      	ldrb	r3, [r4, #25]
 800f98e:	3301      	adds	r3, #1
 800f990:	b2db      	uxtb	r3, r3
 800f992:	2b02      	cmp	r3, #2
 800f994:	7663      	strb	r3, [r4, #25]
 800f996:	f240 80d7 	bls.w	800fb48 <USBH_Get_DevDesc+0x208>
        phost->RequestState = CMD_SEND;
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
        phost->Control.errorcount = 0U;
 800f99a:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f99c:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 800f9a0:	2106      	movs	r1, #6
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f9a6:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 800f9a8:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f9aa:	4620      	mov	r0, r4
 800f9ac:	f000 ff7e 	bl	80108ac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800f9b0:	7921      	ldrb	r1, [r4, #4]
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f000 ff7a 	bl	80108ac <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 800f9b8:	7025      	strb	r5, [r4, #0]
        phost->RequestState = CMD_SEND;
 800f9ba:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 800f9bc:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 800f9be:	70a3      	strb	r3, [r4, #2]
 800f9c0:	e7c7      	b.n	800f952 <USBH_Get_DevDesc+0x12>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f9c2:	7962      	ldrb	r2, [r4, #5]
 800f9c4:	f104 0110 	add.w	r1, r4, #16
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	f000 fec3 	bl	8010754 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 800f9ce:	2302      	movs	r3, #2
 800f9d0:	2001      	movs	r0, #1
 800f9d2:	7623      	strb	r3, [r4, #24]
 800f9d4:	e7bd      	b.n	800f952 <USBH_Get_DevDesc+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f9d6:	7961      	ldrb	r1, [r4, #5]
 800f9d8:	4620      	mov	r0, r4
 800f9da:	f00e fb85 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800f9de:	2801      	cmp	r0, #1
 800f9e0:	f000 80a7 	beq.w	800fb32 <USBH_Get_DevDesc+0x1f2>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f9e4:	2804      	cmp	r0, #4
 800f9e6:	d001      	beq.n	800f9ec <USBH_Get_DevDesc+0xac>
 800f9e8:	2802      	cmp	r0, #2
 800f9ea:	d1b1      	bne.n	800f950 <USBH_Get_DevDesc+0x10>
          phost->Control.state = CTRL_ERROR;
 800f9ec:	230b      	movs	r3, #11
 800f9ee:	2001      	movs	r0, #1
 800f9f0:	7623      	strb	r3, [r4, #24]
 800f9f2:	e7ae      	b.n	800f952 <USBH_Get_DevDesc+0x12>
      phost->Control.timer = (uint16_t)phost->Timer;
 800f9f4:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f9f8:	4620      	mov	r0, r4
 800f9fa:	7923      	ldrb	r3, [r4, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 800f9fc:	81e2      	strh	r2, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f9fe:	68a1      	ldr	r1, [r4, #8]
 800fa00:	89a2      	ldrh	r2, [r4, #12]
 800fa02:	f000 fecf 	bl	80107a4 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fa06:	2304      	movs	r3, #4
 800fa08:	2001      	movs	r0, #1
 800fa0a:	7623      	strb	r3, [r4, #24]
 800fa0c:	e7a1      	b.n	800f952 <USBH_Get_DevDesc+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fa0e:	7921      	ldrb	r1, [r4, #4]
 800fa10:	4620      	mov	r0, r4
 800fa12:	f00e fb69 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fa16:	2801      	cmp	r0, #1
 800fa18:	d058      	beq.n	800facc <USBH_Get_DevDesc+0x18c>
      if (URB_Status == USBH_URB_STALL)
 800fa1a:	2805      	cmp	r0, #5
 800fa1c:	d039      	beq.n	800fa92 <USBH_Get_DevDesc+0x152>
        if (URB_Status == USBH_URB_ERROR)
 800fa1e:	2804      	cmp	r0, #4
 800fa20:	d196      	bne.n	800f950 <USBH_Get_DevDesc+0x10>
 800fa22:	e7e3      	b.n	800f9ec <USBH_Get_DevDesc+0xac>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fa24:	2501      	movs	r5, #1
 800fa26:	7963      	ldrb	r3, [r4, #5]
 800fa28:	89a2      	ldrh	r2, [r4, #12]
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	68a1      	ldr	r1, [r4, #8]
 800fa2e:	9500      	str	r5, [sp, #0]
 800fa30:	f000 fea0 	bl	8010774 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800fa34:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fa38:	2306      	movs	r3, #6
 800fa3a:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 800fa3c:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fa3e:	7623      	strb	r3, [r4, #24]
 800fa40:	e787      	b.n	800f952 <USBH_Get_DevDesc+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fa42:	7961      	ldrb	r1, [r4, #5]
 800fa44:	4620      	mov	r0, r4
 800fa46:	f00e fb4f 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fa4a:	2801      	cmp	r0, #1
 800fa4c:	d06d      	beq.n	800fb2a <USBH_Get_DevDesc+0x1ea>
      else if (URB_Status == USBH_URB_STALL)
 800fa4e:	2805      	cmp	r0, #5
 800fa50:	d01f      	beq.n	800fa92 <USBH_Get_DevDesc+0x152>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fa52:	2802      	cmp	r0, #2
 800fa54:	d074      	beq.n	800fb40 <USBH_Get_DevDesc+0x200>
        if (URB_Status == USBH_URB_ERROR)
 800fa56:	2804      	cmp	r0, #4
 800fa58:	f47f af7a 	bne.w	800f950 <USBH_Get_DevDesc+0x10>
          phost->Control.state = CTRL_ERROR;
 800fa5c:	230b      	movs	r3, #11
 800fa5e:	7623      	strb	r3, [r4, #24]
 800fa60:	e7ab      	b.n	800f9ba <USBH_Get_DevDesc+0x7a>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800fa62:	2200      	movs	r2, #0
 800fa64:	7923      	ldrb	r3, [r4, #4]
 800fa66:	4620      	mov	r0, r4
 800fa68:	4611      	mov	r1, r2
 800fa6a:	f000 fe9b 	bl	80107a4 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800fa6e:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fa72:	2308      	movs	r3, #8
 800fa74:	2001      	movs	r0, #1
      phost->Control.timer = (uint16_t)phost->Timer;
 800fa76:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fa78:	7623      	strb	r3, [r4, #24]
 800fa7a:	e76a      	b.n	800f952 <USBH_Get_DevDesc+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fa7c:	7921      	ldrb	r1, [r4, #4]
 800fa7e:	4620      	mov	r0, r4
 800fa80:	f00e fb32 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fa84:	2801      	cmp	r0, #1
 800fa86:	d025      	beq.n	800fad4 <USBH_Get_DevDesc+0x194>
      else if (URB_Status == USBH_URB_ERROR)
 800fa88:	2804      	cmp	r0, #4
 800fa8a:	d0af      	beq.n	800f9ec <USBH_Get_DevDesc+0xac>
        if (URB_Status == USBH_URB_STALL)
 800fa8c:	2805      	cmp	r0, #5
 800fa8e:	f47f af5f 	bne.w	800f950 <USBH_Get_DevDesc+0x10>
        phost->RequestState = CMD_SEND;
 800fa92:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 800fa94:	2300      	movs	r3, #0
        status = USBH_NOT_SUPPORTED;
 800fa96:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 800fa98:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 800fa9a:	7623      	strb	r3, [r4, #24]
 800fa9c:	e759      	b.n	800f952 <USBH_Get_DevDesc+0x12>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800fa9e:	2200      	movs	r2, #0
 800faa0:	2501      	movs	r5, #1
 800faa2:	7963      	ldrb	r3, [r4, #5]
 800faa4:	4620      	mov	r0, r4
 800faa6:	4611      	mov	r1, r2
 800faa8:	9500      	str	r5, [sp, #0]
 800faaa:	f000 fe63 	bl	8010774 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800faae:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fab2:	230a      	movs	r3, #10
 800fab4:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 800fab6:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fab8:	7623      	strb	r3, [r4, #24]
 800faba:	e74a      	b.n	800f952 <USBH_Get_DevDesc+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fabc:	7961      	ldrb	r1, [r4, #5]
 800fabe:	4620      	mov	r0, r4
 800fac0:	f00e fb12 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fac4:	2801      	cmp	r0, #1
 800fac6:	d005      	beq.n	800fad4 <USBH_Get_DevDesc+0x194>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fac8:	2802      	cmp	r0, #2
 800faca:	d1a8      	bne.n	800fa1e <USBH_Get_DevDesc+0xde>
            phost->Control.state = CTRL_STATUS_OUT;
 800facc:	2309      	movs	r3, #9
 800face:	2001      	movs	r0, #1
 800fad0:	7623      	strb	r3, [r4, #24]
 800fad2:	e73e      	b.n	800f952 <USBH_Get_DevDesc+0x12>
        phost->RequestState = CMD_SEND;
 800fad4:	2201      	movs	r2, #1
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800fad6:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
        phost->Control.state = CTRL_IDLE;
 800fada:	2000      	movs	r0, #0
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800fadc:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
        phost->RequestState = CMD_SEND;
 800fae0:	70a2      	strb	r2, [r4, #2]
  if (length > 8U)
 800fae2:	2d08      	cmp	r5, #8
  dev_desc->bcdUSB             = LE16(buf +  2);
 800fae4:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800fae8:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800faec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
        phost->Control.state = CTRL_IDLE;
 800faf0:	7620      	strb	r0, [r4, #24]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800faf2:	f884 1327 	strb.w	r1, [r4, #807]	; 0x327
  dev_desc->bcdUSB             = LE16(buf +  2);
 800faf6:	f8a4 2328 	strh.w	r2, [r4, #808]	; 0x328
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800fafa:	f8c4 332a 	str.w	r3, [r4, #810]	; 0x32a
  if (length > 8U)
 800fafe:	f67f af28 	bls.w	800f952 <USBH_Get_DevDesc+0x12>
    dev_desc->idVendor           = LE16(buf +  8);
 800fb02:	f8b4 5124 	ldrh.w	r5, [r4, #292]	; 0x124
    dev_desc->idProduct          = LE16(buf + 10);
 800fb06:	f8b4 1126 	ldrh.w	r1, [r4, #294]	; 0x126
    dev_desc->bcdDevice          = LE16(buf + 12);
 800fb0a:	f8b4 2128 	ldrh.w	r2, [r4, #296]	; 0x128
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800fb0e:	f8d4 312a 	ldr.w	r3, [r4, #298]	; 0x12a
    dev_desc->idVendor           = LE16(buf +  8);
 800fb12:	f8a4 532e 	strh.w	r5, [r4, #814]	; 0x32e
    dev_desc->idProduct          = LE16(buf + 10);
 800fb16:	f8a4 1330 	strh.w	r1, [r4, #816]	; 0x330
    dev_desc->bcdDevice          = LE16(buf + 12);
 800fb1a:	f8a4 2332 	strh.w	r2, [r4, #818]	; 0x332
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800fb1e:	f8c4 3334 	str.w	r3, [r4, #820]	; 0x334
}
 800fb22:	b002      	add	sp, #8
 800fb24:	bd70      	pop	{r4, r5, r6, pc}
          if (direction == USB_D2H)
 800fb26:	2a00      	cmp	r2, #0
 800fb28:	dbd0      	blt.n	800facc <USBH_Get_DevDesc+0x18c>
            phost->Control.state = CTRL_STATUS_IN;
 800fb2a:	2307      	movs	r3, #7
 800fb2c:	2001      	movs	r0, #1
 800fb2e:	7623      	strb	r3, [r4, #24]
 800fb30:	e70f      	b.n	800f952 <USBH_Get_DevDesc+0x12>
        if (phost->Control.setup.b.wLength.w != 0U)
 800fb32:	8ae3      	ldrh	r3, [r4, #22]
 800fb34:	f994 2010 	ldrsb.w	r2, [r4, #16]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d0f4      	beq.n	800fb26 <USBH_Get_DevDesc+0x1e6>
          if (direction == USB_D2H)
 800fb3c:	2a00      	cmp	r2, #0
 800fb3e:	db08      	blt.n	800fb52 <USBH_Get_DevDesc+0x212>
            phost->Control.state = CTRL_DATA_OUT;
 800fb40:	2305      	movs	r3, #5
 800fb42:	2001      	movs	r0, #1
 800fb44:	7623      	strb	r3, [r4, #24]
 800fb46:	e704      	b.n	800f952 <USBH_Get_DevDesc+0x12>
        phost->Control.state = CTRL_SETUP;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	70a3      	strb	r3, [r4, #2]
 800fb50:	e6ff      	b.n	800f952 <USBH_Get_DevDesc+0x12>
            phost->Control.state = CTRL_DATA_IN;
 800fb52:	2303      	movs	r3, #3
 800fb54:	7623      	strb	r3, [r4, #24]
 800fb56:	e6fc      	b.n	800f952 <USBH_Get_DevDesc+0x12>
 800fb58:	01000680 	.word	0x01000680

0800fb5c <USBH_Get_CfgDesc>:
{
 800fb5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (phost->RequestState == CMD_SEND)
 800fb60:	7883      	ldrb	r3, [r0, #2]
{
 800fb62:	b083      	sub	sp, #12
 800fb64:	4605      	mov	r5, r0
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800fb66:	f100 041c 	add.w	r4, r0, #28
  if (phost->RequestState == CMD_SEND)
 800fb6a:	2b01      	cmp	r3, #1
 800fb6c:	d012      	beq.n	800fb94 <USBH_Get_CfgDesc+0x38>
  switch (phost->RequestState)
 800fb6e:	2b02      	cmp	r3, #2
 800fb70:	d003      	beq.n	800fb7a <USBH_Get_CfgDesc+0x1e>
  status = USBH_BUSY;
 800fb72:	2001      	movs	r0, #1
}
 800fb74:	b003      	add	sp, #12
 800fb76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (phost->Control.state)
 800fb7a:	7e03      	ldrb	r3, [r0, #24]
 800fb7c:	460e      	mov	r6, r1
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	2b0a      	cmp	r3, #10
 800fb82:	d8f6      	bhi.n	800fb72 <USBH_Get_CfgDesc+0x16>
 800fb84:	e8df f003 	tbb	[pc, r3]
 800fb88:	5145372e 	.word	0x5145372e
 800fb8c:	867a695b 	.word	0x867a695b
 800fb90:	a496      	.short	0xa496
 800fb92:	14          	.byte	0x14
 800fb93:	00          	.byte	0x00
    phost->Control.setup.b.wLength.w = length;
 800fb94:	82c1      	strh	r1, [r0, #22]
    phost->Control.setup.b.wValue.w = value_idx;
 800fb96:	2600      	movs	r6, #0
      phost->Control.buff = buff;
 800fb98:	6084      	str	r4, [r0, #8]
      phost->RequestState = CMD_WAIT;
 800fb9a:	2202      	movs	r2, #2
      phost->Control.length = length;
 800fb9c:	8181      	strh	r1, [r0, #12]
      status = USBH_BUSY;
 800fb9e:	4618      	mov	r0, r3
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fba0:	4f98      	ldr	r7, [pc, #608]	; (800fe04 <USBH_Get_CfgDesc+0x2a8>)
      phost->Control.state = CTRL_SETUP;
 800fba2:	762b      	strb	r3, [r5, #24]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fba4:	612f      	str	r7, [r5, #16]
    phost->Control.setup.b.wValue.w = value_idx;
 800fba6:	82ae      	strh	r6, [r5, #20]
      phost->RequestState = CMD_WAIT;
 800fba8:	70aa      	strb	r2, [r5, #2]
}
 800fbaa:	b003      	add	sp, #12
 800fbac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fbb0:	7e43      	ldrb	r3, [r0, #25]
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	2b02      	cmp	r3, #2
 800fbb8:	7643      	strb	r3, [r0, #25]
 800fbba:	f240 811b 	bls.w	800fdf4 <USBH_Get_CfgDesc+0x298>
        phost->Control.errorcount = 0U;
 800fbbe:	2400      	movs	r4, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fbc0:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 800fbc4:	2106      	movs	r1, #6
 800fbc6:	4798      	blx	r3
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fbc8:	7969      	ldrb	r1, [r5, #5]
        phost->Control.errorcount = 0U;
 800fbca:	766c      	strb	r4, [r5, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fbcc:	4628      	mov	r0, r5
 800fbce:	f000 fe6d 	bl	80108ac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800fbd2:	7929      	ldrb	r1, [r5, #4]
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	f000 fe69 	bl	80108ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fbda:	702c      	strb	r4, [r5, #0]
        phost->RequestState = CMD_SEND;
 800fbdc:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 800fbde:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 800fbe0:	70ab      	strb	r3, [r5, #2]
 800fbe2:	e7c7      	b.n	800fb74 <USBH_Get_CfgDesc+0x18>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fbe4:	7942      	ldrb	r2, [r0, #5]
 800fbe6:	f100 0110 	add.w	r1, r0, #16
 800fbea:	f000 fdb3 	bl	8010754 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 800fbee:	2302      	movs	r3, #2
 800fbf0:	2001      	movs	r0, #1
 800fbf2:	762b      	strb	r3, [r5, #24]
 800fbf4:	e7be      	b.n	800fb74 <USBH_Get_CfgDesc+0x18>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fbf6:	7941      	ldrb	r1, [r0, #5]
 800fbf8:	f00e fa76 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fbfc:	2801      	cmp	r0, #1
 800fbfe:	f000 80ee 	beq.w	800fdde <USBH_Get_CfgDesc+0x282>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fc02:	2804      	cmp	r0, #4
 800fc04:	d001      	beq.n	800fc0a <USBH_Get_CfgDesc+0xae>
 800fc06:	2802      	cmp	r0, #2
 800fc08:	d1b3      	bne.n	800fb72 <USBH_Get_CfgDesc+0x16>
          phost->Control.state = CTRL_ERROR;
 800fc0a:	230b      	movs	r3, #11
 800fc0c:	2001      	movs	r0, #1
 800fc0e:	762b      	strb	r3, [r5, #24]
 800fc10:	e7b0      	b.n	800fb74 <USBH_Get_CfgDesc+0x18>
      phost->Control.timer = (uint16_t)phost->Timer;
 800fc12:	f8d0 2534 	ldr.w	r2, [r0, #1332]	; 0x534
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fc16:	7903      	ldrb	r3, [r0, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 800fc18:	81c2      	strh	r2, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fc1a:	6881      	ldr	r1, [r0, #8]
 800fc1c:	8982      	ldrh	r2, [r0, #12]
 800fc1e:	f000 fdc1 	bl	80107a4 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fc22:	2304      	movs	r3, #4
 800fc24:	2001      	movs	r0, #1
 800fc26:	762b      	strb	r3, [r5, #24]
 800fc28:	e7a4      	b.n	800fb74 <USBH_Get_CfgDesc+0x18>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fc2a:	7901      	ldrb	r1, [r0, #4]
 800fc2c:	f00e fa5c 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fc30:	2801      	cmp	r0, #1
 800fc32:	d054      	beq.n	800fcde <USBH_Get_CfgDesc+0x182>
      if (URB_Status == USBH_URB_STALL)
 800fc34:	2805      	cmp	r0, #5
 800fc36:	d037      	beq.n	800fca8 <USBH_Get_CfgDesc+0x14c>
        if (URB_Status == USBH_URB_ERROR)
 800fc38:	2804      	cmp	r0, #4
 800fc3a:	d19a      	bne.n	800fb72 <USBH_Get_CfgDesc+0x16>
 800fc3c:	e7e5      	b.n	800fc0a <USBH_Get_CfgDesc+0xae>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fc3e:	2401      	movs	r4, #1
 800fc40:	7943      	ldrb	r3, [r0, #5]
 800fc42:	8982      	ldrh	r2, [r0, #12]
 800fc44:	6881      	ldr	r1, [r0, #8]
 800fc46:	9400      	str	r4, [sp, #0]
 800fc48:	f000 fd94 	bl	8010774 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800fc4c:	f8d5 2534 	ldr.w	r2, [r5, #1332]	; 0x534
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fc50:	2306      	movs	r3, #6
 800fc52:	4620      	mov	r0, r4
      phost->Control.timer = (uint16_t)phost->Timer;
 800fc54:	81ea      	strh	r2, [r5, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fc56:	762b      	strb	r3, [r5, #24]
 800fc58:	e78c      	b.n	800fb74 <USBH_Get_CfgDesc+0x18>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fc5a:	7941      	ldrb	r1, [r0, #5]
 800fc5c:	f00e fa44 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fc60:	2801      	cmp	r0, #1
 800fc62:	f000 80b8 	beq.w	800fdd6 <USBH_Get_CfgDesc+0x27a>
      else if (URB_Status == USBH_URB_STALL)
 800fc66:	2805      	cmp	r0, #5
 800fc68:	d01e      	beq.n	800fca8 <USBH_Get_CfgDesc+0x14c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fc6a:	2802      	cmp	r0, #2
 800fc6c:	f000 80be 	beq.w	800fdec <USBH_Get_CfgDesc+0x290>
        if (URB_Status == USBH_URB_ERROR)
 800fc70:	2804      	cmp	r0, #4
 800fc72:	f47f af7e 	bne.w	800fb72 <USBH_Get_CfgDesc+0x16>
          phost->Control.state = CTRL_ERROR;
 800fc76:	230b      	movs	r3, #11
 800fc78:	762b      	strb	r3, [r5, #24]
 800fc7a:	e7af      	b.n	800fbdc <USBH_Get_CfgDesc+0x80>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	7903      	ldrb	r3, [r0, #4]
 800fc80:	4611      	mov	r1, r2
 800fc82:	f000 fd8f 	bl	80107a4 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800fc86:	f8d5 2534 	ldr.w	r2, [r5, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fc8a:	2308      	movs	r3, #8
 800fc8c:	2001      	movs	r0, #1
      phost->Control.timer = (uint16_t)phost->Timer;
 800fc8e:	81ea      	strh	r2, [r5, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fc90:	762b      	strb	r3, [r5, #24]
 800fc92:	e76f      	b.n	800fb74 <USBH_Get_CfgDesc+0x18>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fc94:	7901      	ldrb	r1, [r0, #4]
 800fc96:	f00e fa27 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fc9a:	2801      	cmp	r0, #1
 800fc9c:	d023      	beq.n	800fce6 <USBH_Get_CfgDesc+0x18a>
      else if (URB_Status == USBH_URB_ERROR)
 800fc9e:	2804      	cmp	r0, #4
 800fca0:	d0b3      	beq.n	800fc0a <USBH_Get_CfgDesc+0xae>
        if (URB_Status == USBH_URB_STALL)
 800fca2:	2805      	cmp	r0, #5
 800fca4:	f47f af65 	bne.w	800fb72 <USBH_Get_CfgDesc+0x16>
        phost->RequestState = CMD_SEND;
 800fca8:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 800fcaa:	2300      	movs	r3, #0
        status = USBH_NOT_SUPPORTED;
 800fcac:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 800fcae:	70aa      	strb	r2, [r5, #2]
        phost->Control.state = CTRL_IDLE;
 800fcb0:	762b      	strb	r3, [r5, #24]
 800fcb2:	e75f      	b.n	800fb74 <USBH_Get_CfgDesc+0x18>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	2401      	movs	r4, #1
 800fcb8:	7943      	ldrb	r3, [r0, #5]
 800fcba:	4611      	mov	r1, r2
 800fcbc:	9400      	str	r4, [sp, #0]
 800fcbe:	f000 fd59 	bl	8010774 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800fcc2:	f8d5 2534 	ldr.w	r2, [r5, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fcc6:	230a      	movs	r3, #10
 800fcc8:	4620      	mov	r0, r4
      phost->Control.timer = (uint16_t)phost->Timer;
 800fcca:	81ea      	strh	r2, [r5, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fccc:	762b      	strb	r3, [r5, #24]
 800fcce:	e751      	b.n	800fb74 <USBH_Get_CfgDesc+0x18>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fcd0:	7941      	ldrb	r1, [r0, #5]
 800fcd2:	f00e fa09 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800fcd6:	2801      	cmp	r0, #1
 800fcd8:	d005      	beq.n	800fce6 <USBH_Get_CfgDesc+0x18a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fcda:	2802      	cmp	r0, #2
 800fcdc:	d1ac      	bne.n	800fc38 <USBH_Get_CfgDesc+0xdc>
            phost->Control.state = CTRL_STATUS_OUT;
 800fcde:	2309      	movs	r3, #9
 800fce0:	2001      	movs	r0, #1
 800fce2:	762b      	strb	r3, [r5, #24]
 800fce4:	e746      	b.n	800fb74 <USBH_Get_CfgDesc+0x18>
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800fce6:	7f2a      	ldrb	r2, [r5, #28]
        phost->RequestState = CMD_SEND;
 800fce8:	2101      	movs	r1, #1
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800fcea:	7f6b      	ldrb	r3, [r5, #29]
        phost->Control.state = CTRL_IDLE;
 800fcec:	2700      	movs	r7, #0
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800fcee:	8be8      	ldrh	r0, [r5, #30]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fcf0:	2e09      	cmp	r6, #9
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800fcf2:	f885 2338 	strb.w	r2, [r5, #824]	; 0x338
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800fcf6:	f885 3339 	strb.w	r3, [r5, #825]	; 0x339
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800fcfa:	6a2a      	ldr	r2, [r5, #32]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800fcfc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
        phost->RequestState = CMD_SEND;
 800fd00:	70a9      	strb	r1, [r5, #2]
        phost->Control.state = CTRL_IDLE;
 800fd02:	762f      	strb	r7, [r5, #24]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800fd04:	f8a5 033a 	strh.w	r0, [r5, #826]	; 0x33a
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800fd08:	f8c5 233c 	str.w	r2, [r5, #828]	; 0x33c
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800fd0c:	f885 3340 	strb.w	r3, [r5, #832]	; 0x340
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fd10:	d913      	bls.n	800fd3a <USBH_Get_CfgDesc+0x1de>
 800fd12:	46ac      	mov	ip, r5
    ptr = USB_LEN_CFG_DESC;
 800fd14:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800fd16:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 800fd1a:	b2fe      	uxtb	r6, r7
 800fd1c:	2e09      	cmp	r6, #9
 800fd1e:	bf8c      	ite	hi
 800fd20:	2600      	movhi	r6, #0
 800fd22:	2601      	movls	r6, #1
 800fd24:	e007      	b.n	800fd36 <USBH_Get_CfgDesc+0x1da>
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fd26:	b146      	cbz	r6, 800fd3a <USBH_Get_CfgDesc+0x1de>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fd28:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fd2a:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fd2c:	4413      	add	r3, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fd2e:	7861      	ldrb	r1, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fd30:	b29a      	uxth	r2, r3
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fd32:	2904      	cmp	r1, #4
 800fd34:	d005      	beq.n	800fd42 <USBH_Get_CfgDesc+0x1e6>
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fd36:	4290      	cmp	r0, r2
 800fd38:	d8f5      	bhi.n	800fd26 <USBH_Get_CfgDesc+0x1ca>
        status = USBH_NOT_SUPPORTED;
 800fd3a:	2000      	movs	r0, #0
}
 800fd3c:	b003      	add	sp, #12
 800fd3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800fd42:	7823      	ldrb	r3, [r4, #0]
        ep_ix = 0U;
 800fd44:	2100      	movs	r1, #0
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800fd46:	fb0e f907 	mul.w	r9, lr, r7
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800fd4a:	f88c 3342 	strb.w	r3, [ip, #834]	; 0x342
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800fd4e:	7863      	ldrb	r3, [r4, #1]
 800fd50:	f88c 3343 	strb.w	r3, [ip, #835]	; 0x343
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800fd54:	78a3      	ldrb	r3, [r4, #2]
 800fd56:	f88c 3344 	strb.w	r3, [ip, #836]	; 0x344
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800fd5a:	78e3      	ldrb	r3, [r4, #3]
 800fd5c:	f88c 3345 	strb.w	r3, [ip, #837]	; 0x345
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800fd60:	f894 8004 	ldrb.w	r8, [r4, #4]
 800fd64:	f88c 8346 	strb.w	r8, [ip, #838]	; 0x346
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800fd68:	7963      	ldrb	r3, [r4, #5]
 800fd6a:	f88c 3347 	strb.w	r3, [ip, #839]	; 0x347
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800fd6e:	79a3      	ldrb	r3, [r4, #6]
 800fd70:	f88c 3348 	strb.w	r3, [ip, #840]	; 0x348
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800fd74:	79e3      	ldrb	r3, [r4, #7]
 800fd76:	f88c 3349 	strb.w	r3, [ip, #841]	; 0x349
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800fd7a:	7a23      	ldrb	r3, [r4, #8]
 800fd7c:	f88c 334a 	strb.w	r3, [ip, #842]	; 0x34a
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fd80:	4290      	cmp	r0, r2
 800fd82:	d922      	bls.n	800fdca <USBH_Get_CfgDesc+0x26e>
 800fd84:	4541      	cmp	r1, r8
 800fd86:	d220      	bcs.n	800fdca <USBH_Get_CfgDesc+0x26e>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fd88:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fd8a:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fd8c:	4413      	add	r3, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800fd8e:	7866      	ldrb	r6, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fd90:	b29a      	uxth	r2, r3
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800fd92:	2e05      	cmp	r6, #5
 800fd94:	d1f4      	bne.n	800fd80 <USBH_Get_CfgDesc+0x224>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800fd96:	3101      	adds	r1, #1
 800fd98:	7826      	ldrb	r6, [r4, #0]
 800fd9a:	eb09 03c1 	add.w	r3, r9, r1, lsl #3
            ep_ix++;
 800fd9e:	b2c9      	uxtb	r1, r1
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800fda0:	442b      	add	r3, r5
 800fda2:	f883 6344 	strb.w	r6, [r3, #836]	; 0x344
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800fda6:	7866      	ldrb	r6, [r4, #1]
 800fda8:	f883 6345 	strb.w	r6, [r3, #837]	; 0x345
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800fdac:	78a6      	ldrb	r6, [r4, #2]
 800fdae:	f883 6346 	strb.w	r6, [r3, #838]	; 0x346
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800fdb2:	78e6      	ldrb	r6, [r4, #3]
 800fdb4:	f883 6347 	strb.w	r6, [r3, #839]	; 0x347
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800fdb8:	88a6      	ldrh	r6, [r4, #4]
 800fdba:	f8a3 6348 	strh.w	r6, [r3, #840]	; 0x348
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800fdbe:	79a6      	ldrb	r6, [r4, #6]
 800fdc0:	f883 634a 	strb.w	r6, [r3, #842]	; 0x34a
 800fdc4:	f89c 8346 	ldrb.w	r8, [ip, #838]	; 0x346
 800fdc8:	e7da      	b.n	800fd80 <USBH_Get_CfgDesc+0x224>
 800fdca:	3701      	adds	r7, #1
 800fdcc:	f10c 0c2a 	add.w	ip, ip, #42	; 0x2a
 800fdd0:	e7a3      	b.n	800fd1a <USBH_Get_CfgDesc+0x1be>
          if (direction == USB_D2H)
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	db83      	blt.n	800fcde <USBH_Get_CfgDesc+0x182>
            phost->Control.state = CTRL_STATUS_IN;
 800fdd6:	2307      	movs	r3, #7
 800fdd8:	2001      	movs	r0, #1
 800fdda:	762b      	strb	r3, [r5, #24]
 800fddc:	e6ca      	b.n	800fb74 <USBH_Get_CfgDesc+0x18>
        if (phost->Control.setup.b.wLength.w != 0U)
 800fdde:	8aea      	ldrh	r2, [r5, #22]
 800fde0:	f995 3010 	ldrsb.w	r3, [r5, #16]
 800fde4:	2a00      	cmp	r2, #0
 800fde6:	d0f4      	beq.n	800fdd2 <USBH_Get_CfgDesc+0x276>
          if (direction == USB_D2H)
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	db08      	blt.n	800fdfe <USBH_Get_CfgDesc+0x2a2>
            phost->Control.state = CTRL_DATA_OUT;
 800fdec:	2305      	movs	r3, #5
 800fdee:	2001      	movs	r0, #1
 800fdf0:	762b      	strb	r3, [r5, #24]
 800fdf2:	e6bf      	b.n	800fb74 <USBH_Get_CfgDesc+0x18>
        phost->Control.state = CTRL_SETUP;
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	7603      	strb	r3, [r0, #24]
        phost->RequestState = CMD_SEND;
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	70ab      	strb	r3, [r5, #2]
 800fdfc:	e6ba      	b.n	800fb74 <USBH_Get_CfgDesc+0x18>
            phost->Control.state = CTRL_DATA_IN;
 800fdfe:	2303      	movs	r3, #3
 800fe00:	762b      	strb	r3, [r5, #24]
 800fe02:	e6b7      	b.n	800fb74 <USBH_Get_CfgDesc+0x18>
 800fe04:	02000680 	.word	0x02000680

0800fe08 <USBH_Get_StringDesc>:
{
 800fe08:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (phost->RequestState == CMD_SEND)
 800fe0a:	7885      	ldrb	r5, [r0, #2]
{
 800fe0c:	b085      	sub	sp, #20
 800fe0e:	4604      	mov	r4, r0
                                   phost->device.Data, length)) == USBH_OK)
 800fe10:	f500 768e 	add.w	r6, r0, #284	; 0x11c
  if (phost->RequestState == CMD_SEND)
 800fe14:	2d01      	cmp	r5, #1
 800fe16:	d010      	beq.n	800fe3a <USBH_Get_StringDesc+0x32>
  switch (phost->RequestState)
 800fe18:	2d02      	cmp	r5, #2
 800fe1a:	d002      	beq.n	800fe22 <USBH_Get_StringDesc+0x1a>
  status = USBH_BUSY;
 800fe1c:	2001      	movs	r0, #1
}
 800fe1e:	b005      	add	sp, #20
 800fe20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (phost->Control.state)
 800fe22:	7e01      	ldrb	r1, [r0, #24]
 800fe24:	3901      	subs	r1, #1
 800fe26:	290a      	cmp	r1, #10
 800fe28:	d8f8      	bhi.n	800fe1c <USBH_Get_StringDesc+0x14>
 800fe2a:	e8df f001 	tbb	[pc, r1]
 800fe2e:	3e34      	.short	0x3e34
 800fe30:	74655a4d 	.word	0x74655a4d
 800fe34:	b5a69184 	.word	0xb5a69184
 800fe38:	19          	.byte	0x19
 800fe39:	00          	.byte	0x00
  if ((status = USBH_GetDescriptor(phost,
 800fe3a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    phost->Control.setup.b.wLength.w = length;
 800fe3e:	82c3      	strh	r3, [r0, #22]
      phost->Control.buff = buff;
 800fe40:	6086      	str	r6, [r0, #8]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fe42:	f44f 6cd0 	mov.w	ip, #1664	; 0x680
    phost->Control.setup.b.wValue.w = value_idx;
 800fe46:	8241      	strh	r1, [r0, #18]
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800fe48:	f240 4709 	movw	r7, #1033	; 0x409
      phost->Control.length = length;
 800fe4c:	8183      	strh	r3, [r0, #12]
      phost->RequestState = CMD_WAIT;
 800fe4e:	2202      	movs	r2, #2
      status = USBH_BUSY;
 800fe50:	4628      	mov	r0, r5
      phost->Control.state = CTRL_SETUP;
 800fe52:	7625      	strb	r5, [r4, #24]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fe54:	f8a4 c010 	strh.w	ip, [r4, #16]
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800fe58:	82a7      	strh	r7, [r4, #20]
      phost->RequestState = CMD_WAIT;
 800fe5a:	70a2      	strb	r2, [r4, #2]
}
 800fe5c:	b005      	add	sp, #20
 800fe5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fe60:	7e63      	ldrb	r3, [r4, #25]
 800fe62:	3301      	adds	r3, #1
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	2b02      	cmp	r3, #2
 800fe68:	7663      	strb	r3, [r4, #25]
 800fe6a:	f240 80d3 	bls.w	8010014 <USBH_Get_StringDesc+0x20c>
        phost->Control.errorcount = 0U;
 800fe6e:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fe70:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 800fe74:	2106      	movs	r1, #6
 800fe76:	4620      	mov	r0, r4
 800fe78:	4798      	blx	r3
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fe7a:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 800fe7c:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f000 fd14 	bl	80108ac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800fe84:	7921      	ldrb	r1, [r4, #4]
 800fe86:	4620      	mov	r0, r4
 800fe88:	f000 fd10 	bl	80108ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fe8c:	7025      	strb	r5, [r4, #0]
        phost->RequestState = CMD_SEND;
 800fe8e:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 800fe90:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 800fe92:	70a3      	strb	r3, [r4, #2]
 800fe94:	e7c3      	b.n	800fe1e <USBH_Get_StringDesc+0x16>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fe96:	7962      	ldrb	r2, [r4, #5]
 800fe98:	f104 0110 	add.w	r1, r4, #16
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	f000 fc59 	bl	8010754 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 800fea2:	2302      	movs	r3, #2
 800fea4:	2001      	movs	r0, #1
 800fea6:	7623      	strb	r3, [r4, #24]
 800fea8:	e7b9      	b.n	800fe1e <USBH_Get_StringDesc+0x16>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800feaa:	7961      	ldrb	r1, [r4, #5]
 800feac:	4620      	mov	r0, r4
 800feae:	f00e f91b 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800feb2:	2801      	cmp	r0, #1
 800feb4:	f000 80a3 	beq.w	800fffe <USBH_Get_StringDesc+0x1f6>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800feb8:	2804      	cmp	r0, #4
 800feba:	d001      	beq.n	800fec0 <USBH_Get_StringDesc+0xb8>
 800febc:	2802      	cmp	r0, #2
 800febe:	d1ad      	bne.n	800fe1c <USBH_Get_StringDesc+0x14>
          phost->Control.state = CTRL_ERROR;
 800fec0:	230b      	movs	r3, #11
 800fec2:	2001      	movs	r0, #1
 800fec4:	7623      	strb	r3, [r4, #24]
 800fec6:	e7aa      	b.n	800fe1e <USBH_Get_StringDesc+0x16>
      phost->Control.timer = (uint16_t)phost->Timer;
 800fec8:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fecc:	4620      	mov	r0, r4
 800fece:	7923      	ldrb	r3, [r4, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 800fed0:	81e2      	strh	r2, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fed2:	68a1      	ldr	r1, [r4, #8]
 800fed4:	89a2      	ldrh	r2, [r4, #12]
 800fed6:	f000 fc65 	bl	80107a4 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800feda:	2304      	movs	r3, #4
 800fedc:	2001      	movs	r0, #1
 800fede:	7623      	strb	r3, [r4, #24]
 800fee0:	e79d      	b.n	800fe1e <USBH_Get_StringDesc+0x16>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fee2:	7921      	ldrb	r1, [r4, #4]
 800fee4:	4620      	mov	r0, r4
 800fee6:	f00e f8ff 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800feea:	2801      	cmp	r0, #1
 800feec:	d060      	beq.n	800ffb0 <USBH_Get_StringDesc+0x1a8>
      if (URB_Status == USBH_URB_STALL)
 800feee:	2805      	cmp	r0, #5
 800fef0:	d03d      	beq.n	800ff6e <USBH_Get_StringDesc+0x166>
        if (URB_Status == USBH_URB_ERROR)
 800fef2:	2804      	cmp	r0, #4
 800fef4:	d192      	bne.n	800fe1c <USBH_Get_StringDesc+0x14>
 800fef6:	e7e3      	b.n	800fec0 <USBH_Get_StringDesc+0xb8>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fef8:	2501      	movs	r5, #1
 800fefa:	7963      	ldrb	r3, [r4, #5]
 800fefc:	89a2      	ldrh	r2, [r4, #12]
 800fefe:	4620      	mov	r0, r4
 800ff00:	68a1      	ldr	r1, [r4, #8]
 800ff02:	9500      	str	r5, [sp, #0]
 800ff04:	f000 fc36 	bl	8010774 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800ff08:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ff0c:	2306      	movs	r3, #6
 800ff0e:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 800ff10:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ff12:	7623      	strb	r3, [r4, #24]
 800ff14:	e783      	b.n	800fe1e <USBH_Get_StringDesc+0x16>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ff16:	7961      	ldrb	r1, [r4, #5]
 800ff18:	4620      	mov	r0, r4
 800ff1a:	f00e f8e5 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800ff1e:	2801      	cmp	r0, #1
 800ff20:	d069      	beq.n	800fff6 <USBH_Get_StringDesc+0x1ee>
      else if (URB_Status == USBH_URB_STALL)
 800ff22:	2805      	cmp	r0, #5
 800ff24:	d023      	beq.n	800ff6e <USBH_Get_StringDesc+0x166>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ff26:	2802      	cmp	r0, #2
 800ff28:	d070      	beq.n	801000c <USBH_Get_StringDesc+0x204>
        if (URB_Status == USBH_URB_ERROR)
 800ff2a:	2804      	cmp	r0, #4
 800ff2c:	f47f af76 	bne.w	800fe1c <USBH_Get_StringDesc+0x14>
          phost->Control.state = CTRL_ERROR;
 800ff30:	230b      	movs	r3, #11
 800ff32:	7623      	strb	r3, [r4, #24]
 800ff34:	e7ab      	b.n	800fe8e <USBH_Get_StringDesc+0x86>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ff36:	2200      	movs	r2, #0
 800ff38:	7923      	ldrb	r3, [r4, #4]
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	4611      	mov	r1, r2
 800ff3e:	f000 fc31 	bl	80107a4 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800ff42:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ff46:	2308      	movs	r3, #8
 800ff48:	2001      	movs	r0, #1
      phost->Control.timer = (uint16_t)phost->Timer;
 800ff4a:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ff4c:	7623      	strb	r3, [r4, #24]
 800ff4e:	e766      	b.n	800fe1e <USBH_Get_StringDesc+0x16>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ff50:	7921      	ldrb	r1, [r4, #4]
 800ff52:	4620      	mov	r0, r4
 800ff54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff58:	f00e f8c6 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800ff5c:	2801      	cmp	r0, #1
 800ff5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff62:	d029      	beq.n	800ffb8 <USBH_Get_StringDesc+0x1b0>
      else if (URB_Status == USBH_URB_ERROR)
 800ff64:	2804      	cmp	r0, #4
 800ff66:	d0ab      	beq.n	800fec0 <USBH_Get_StringDesc+0xb8>
        if (URB_Status == USBH_URB_STALL)
 800ff68:	2805      	cmp	r0, #5
 800ff6a:	f47f af57 	bne.w	800fe1c <USBH_Get_StringDesc+0x14>
        phost->RequestState = CMD_SEND;
 800ff6e:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 800ff70:	2300      	movs	r3, #0
        status = USBH_NOT_SUPPORTED;
 800ff72:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 800ff74:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 800ff76:	7623      	strb	r3, [r4, #24]
 800ff78:	e751      	b.n	800fe1e <USBH_Get_StringDesc+0x16>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	2501      	movs	r5, #1
 800ff7e:	7963      	ldrb	r3, [r4, #5]
 800ff80:	4620      	mov	r0, r4
 800ff82:	4611      	mov	r1, r2
 800ff84:	9500      	str	r5, [sp, #0]
 800ff86:	f000 fbf5 	bl	8010774 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800ff8a:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ff8e:	230a      	movs	r3, #10
 800ff90:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 800ff92:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ff94:	7623      	strb	r3, [r4, #24]
 800ff96:	e742      	b.n	800fe1e <USBH_Get_StringDesc+0x16>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ff98:	7961      	ldrb	r1, [r4, #5]
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ffa0:	f00e f8a2 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800ffa4:	2801      	cmp	r0, #1
 800ffa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffaa:	d005      	beq.n	800ffb8 <USBH_Get_StringDesc+0x1b0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ffac:	2802      	cmp	r0, #2
 800ffae:	d1a0      	bne.n	800fef2 <USBH_Get_StringDesc+0xea>
            phost->Control.state = CTRL_STATUS_OUT;
 800ffb0:	2309      	movs	r3, #9
 800ffb2:	2001      	movs	r0, #1
 800ffb4:	7623      	strb	r3, [r4, #24]
 800ffb6:	e732      	b.n	800fe1e <USBH_Get_StringDesc+0x16>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ffb8:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
        phost->RequestState = CMD_SEND;
 800ffbc:	2501      	movs	r5, #1
        phost->Control.state = CTRL_IDLE;
 800ffbe:	2000      	movs	r0, #0
  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ffc0:	2903      	cmp	r1, #3
        phost->RequestState = CMD_SEND;
 800ffc2:	70a5      	strb	r5, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 800ffc4:	7620      	strb	r0, [r4, #24]
  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ffc6:	f47f af2a 	bne.w	800fe1e <USBH_Get_StringDesc+0x16>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ffca:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
 800ffce:	3902      	subs	r1, #2
 800ffd0:	428b      	cmp	r3, r1
 800ffd2:	bf28      	it	cs
 800ffd4:	460b      	movcs	r3, r1
 800ffd6:	b299      	uxth	r1, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 800ffd8:	b13b      	cbz	r3, 800ffea <USBH_Get_StringDesc+0x1e2>
      *pdest =  psrc[idx];
 800ffda:	1833      	adds	r3, r6, r0
    for (idx = 0U; idx < strlength; idx += 2U)
 800ffdc:	3002      	adds	r0, #2
 800ffde:	b280      	uxth	r0, r0
      *pdest =  psrc[idx];
 800ffe0:	789b      	ldrb	r3, [r3, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ffe2:	4281      	cmp	r1, r0
      *pdest =  psrc[idx];
 800ffe4:	f802 3b01 	strb.w	r3, [r2], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 800ffe8:	d8f7      	bhi.n	800ffda <USBH_Get_StringDesc+0x1d2>
    *pdest = 0U; /* mark end of string */
 800ffea:	2000      	movs	r0, #0
 800ffec:	7010      	strb	r0, [r2, #0]
}
 800ffee:	b005      	add	sp, #20
 800fff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (direction == USB_D2H)
 800fff2:	2a00      	cmp	r2, #0
 800fff4:	dbdc      	blt.n	800ffb0 <USBH_Get_StringDesc+0x1a8>
            phost->Control.state = CTRL_STATUS_IN;
 800fff6:	2307      	movs	r3, #7
 800fff8:	2001      	movs	r0, #1
 800fffa:	7623      	strb	r3, [r4, #24]
 800fffc:	e70f      	b.n	800fe1e <USBH_Get_StringDesc+0x16>
        if (phost->Control.setup.b.wLength.w != 0U)
 800fffe:	8ae3      	ldrh	r3, [r4, #22]
 8010000:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d0f4      	beq.n	800fff2 <USBH_Get_StringDesc+0x1ea>
          if (direction == USB_D2H)
 8010008:	2a00      	cmp	r2, #0
 801000a:	db08      	blt.n	801001e <USBH_Get_StringDesc+0x216>
            phost->Control.state = CTRL_DATA_OUT;
 801000c:	2305      	movs	r3, #5
 801000e:	2001      	movs	r0, #1
 8010010:	7623      	strb	r3, [r4, #24]
 8010012:	e704      	b.n	800fe1e <USBH_Get_StringDesc+0x16>
        phost->Control.state = CTRL_SETUP;
 8010014:	2301      	movs	r3, #1
 8010016:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8010018:	4618      	mov	r0, r3
 801001a:	70a3      	strb	r3, [r4, #2]
 801001c:	e6ff      	b.n	800fe1e <USBH_Get_StringDesc+0x16>
            phost->Control.state = CTRL_DATA_IN;
 801001e:	2303      	movs	r3, #3
 8010020:	7623      	strb	r3, [r4, #24]
 8010022:	e6fc      	b.n	800fe1e <USBH_Get_StringDesc+0x16>

08010024 <USBH_SetAddress>:
{
 8010024:	b530      	push	{r4, r5, lr}
 8010026:	4603      	mov	r3, r0
  if (phost->RequestState == CMD_SEND)
 8010028:	7880      	ldrb	r0, [r0, #2]
{
 801002a:	b083      	sub	sp, #12
  if (phost->RequestState == CMD_SEND)
 801002c:	2801      	cmp	r0, #1
 801002e:	d011      	beq.n	8010054 <USBH_SetAddress+0x30>
  switch (phost->RequestState)
 8010030:	2802      	cmp	r0, #2
 8010032:	d002      	beq.n	801003a <USBH_SetAddress+0x16>
  status = USBH_BUSY;
 8010034:	2001      	movs	r0, #1
}
 8010036:	b003      	add	sp, #12
 8010038:	bd30      	pop	{r4, r5, pc}
 801003a:	461c      	mov	r4, r3
  switch (phost->Control.state)
 801003c:	7e1b      	ldrb	r3, [r3, #24]
 801003e:	3b01      	subs	r3, #1
 8010040:	2b0a      	cmp	r3, #10
 8010042:	d8f7      	bhi.n	8010034 <USBH_SetAddress+0x10>
 8010044:	e8df f003 	tbb	[pc, r3]
 8010048:	5447382e 	.word	0x5447382e
 801004c:	8b7e6e5f 	.word	0x8b7e6e5f
 8010050:	ac9d      	.short	0xac9d
 8010052:	13          	.byte	0x13
 8010053:	00          	.byte	0x00
    phost->Control.setup.b.wIndex.w = 0U;
 8010054:	2200      	movs	r2, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010056:	f44f 65a0 	mov.w	r5, #1280	; 0x500
      phost->RequestState = CMD_WAIT;
 801005a:	2402      	movs	r4, #2
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801005c:	8259      	strh	r1, [r3, #18]
      phost->Control.state = CTRL_SETUP;
 801005e:	7618      	strb	r0, [r3, #24]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010060:	821d      	strh	r5, [r3, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8010062:	615a      	str	r2, [r3, #20]
      phost->Control.buff = buff;
 8010064:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010066:	819a      	strh	r2, [r3, #12]
      phost->RequestState = CMD_WAIT;
 8010068:	709c      	strb	r4, [r3, #2]
}
 801006a:	b003      	add	sp, #12
 801006c:	bd30      	pop	{r4, r5, pc}
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801006e:	7e63      	ldrb	r3, [r4, #25]
 8010070:	3301      	adds	r3, #1
 8010072:	b2db      	uxtb	r3, r3
 8010074:	2b02      	cmp	r3, #2
 8010076:	7663      	strb	r3, [r4, #25]
 8010078:	f240 80b1 	bls.w	80101de <USBH_SetAddress+0x1ba>
        phost->Control.errorcount = 0U;
 801007c:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801007e:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 8010082:	2106      	movs	r1, #6
 8010084:	4620      	mov	r0, r4
 8010086:	4798      	blx	r3
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010088:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 801008a:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801008c:	4620      	mov	r0, r4
 801008e:	f000 fc0d 	bl	80108ac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8010092:	7921      	ldrb	r1, [r4, #4]
 8010094:	4620      	mov	r0, r4
 8010096:	f000 fc09 	bl	80108ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801009a:	7025      	strb	r5, [r4, #0]
        phost->RequestState = CMD_SEND;
 801009c:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 801009e:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 80100a0:	70a3      	strb	r3, [r4, #2]
 80100a2:	e7c8      	b.n	8010036 <USBH_SetAddress+0x12>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80100a4:	7962      	ldrb	r2, [r4, #5]
 80100a6:	f104 0110 	add.w	r1, r4, #16
 80100aa:	4620      	mov	r0, r4
 80100ac:	f000 fb52 	bl	8010754 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 80100b0:	2302      	movs	r3, #2
 80100b2:	2001      	movs	r0, #1
 80100b4:	7623      	strb	r3, [r4, #24]
 80100b6:	e7be      	b.n	8010036 <USBH_SetAddress+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80100b8:	7961      	ldrb	r1, [r4, #5]
 80100ba:	4620      	mov	r0, r4
 80100bc:	f00e f814 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80100c0:	2801      	cmp	r0, #1
 80100c2:	f000 8081 	beq.w	80101c8 <USBH_SetAddress+0x1a4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80100c6:	2804      	cmp	r0, #4
 80100c8:	d001      	beq.n	80100ce <USBH_SetAddress+0xaa>
 80100ca:	2802      	cmp	r0, #2
 80100cc:	d1b2      	bne.n	8010034 <USBH_SetAddress+0x10>
          phost->Control.state = CTRL_ERROR;
 80100ce:	230b      	movs	r3, #11
 80100d0:	2001      	movs	r0, #1
 80100d2:	7623      	strb	r3, [r4, #24]
 80100d4:	e7af      	b.n	8010036 <USBH_SetAddress+0x12>
      phost->Control.timer = (uint16_t)phost->Timer;
 80100d6:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80100da:	4620      	mov	r0, r4
 80100dc:	7923      	ldrb	r3, [r4, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 80100de:	81e2      	strh	r2, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80100e0:	68a1      	ldr	r1, [r4, #8]
 80100e2:	89a2      	ldrh	r2, [r4, #12]
 80100e4:	f000 fb5e 	bl	80107a4 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 80100e8:	2304      	movs	r3, #4
 80100ea:	2001      	movs	r0, #1
 80100ec:	7623      	strb	r3, [r4, #24]
 80100ee:	e7a2      	b.n	8010036 <USBH_SetAddress+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80100f0:	7921      	ldrb	r1, [r4, #4]
 80100f2:	4620      	mov	r0, r4
 80100f4:	f00d fff8 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80100f8:	2801      	cmp	r0, #1
 80100fa:	d059      	beq.n	80101b0 <USBH_SetAddress+0x18c>
      if (URB_Status == USBH_URB_STALL)
 80100fc:	2805      	cmp	r0, #5
 80100fe:	d039      	beq.n	8010174 <USBH_SetAddress+0x150>
        if (URB_Status == USBH_URB_ERROR)
 8010100:	2804      	cmp	r0, #4
 8010102:	d197      	bne.n	8010034 <USBH_SetAddress+0x10>
 8010104:	e7e3      	b.n	80100ce <USBH_SetAddress+0xaa>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010106:	2501      	movs	r5, #1
 8010108:	7963      	ldrb	r3, [r4, #5]
 801010a:	89a2      	ldrh	r2, [r4, #12]
 801010c:	4620      	mov	r0, r4
 801010e:	68a1      	ldr	r1, [r4, #8]
 8010110:	9500      	str	r5, [sp, #0]
 8010112:	f000 fb2f 	bl	8010774 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8010116:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801011a:	2306      	movs	r3, #6
 801011c:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 801011e:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010120:	7623      	strb	r3, [r4, #24]
 8010122:	e788      	b.n	8010036 <USBH_SetAddress+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010124:	7961      	ldrb	r1, [r4, #5]
 8010126:	4620      	mov	r0, r4
 8010128:	f00d ffde 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 801012c:	2801      	cmp	r0, #1
 801012e:	d047      	beq.n	80101c0 <USBH_SetAddress+0x19c>
      else if (URB_Status == USBH_URB_STALL)
 8010130:	2805      	cmp	r0, #5
 8010132:	d01f      	beq.n	8010174 <USBH_SetAddress+0x150>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010134:	2802      	cmp	r0, #2
 8010136:	d04e      	beq.n	80101d6 <USBH_SetAddress+0x1b2>
        if (URB_Status == USBH_URB_ERROR)
 8010138:	2804      	cmp	r0, #4
 801013a:	f47f af7b 	bne.w	8010034 <USBH_SetAddress+0x10>
          phost->Control.state = CTRL_ERROR;
 801013e:	230b      	movs	r3, #11
 8010140:	7623      	strb	r3, [r4, #24]
 8010142:	e7ab      	b.n	801009c <USBH_SetAddress+0x78>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8010144:	2200      	movs	r2, #0
 8010146:	7923      	ldrb	r3, [r4, #4]
 8010148:	4620      	mov	r0, r4
 801014a:	4611      	mov	r1, r2
 801014c:	f000 fb2a 	bl	80107a4 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8010150:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010154:	2308      	movs	r3, #8
 8010156:	2001      	movs	r0, #1
      phost->Control.timer = (uint16_t)phost->Timer;
 8010158:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801015a:	7623      	strb	r3, [r4, #24]
 801015c:	e76b      	b.n	8010036 <USBH_SetAddress+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801015e:	7921      	ldrb	r1, [r4, #4]
 8010160:	4620      	mov	r0, r4
 8010162:	f00d ffc1 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010166:	2801      	cmp	r0, #1
 8010168:	d026      	beq.n	80101b8 <USBH_SetAddress+0x194>
      else if (URB_Status == USBH_URB_ERROR)
 801016a:	2804      	cmp	r0, #4
 801016c:	d0af      	beq.n	80100ce <USBH_SetAddress+0xaa>
        if (URB_Status == USBH_URB_STALL)
 801016e:	2805      	cmp	r0, #5
 8010170:	f47f af60 	bne.w	8010034 <USBH_SetAddress+0x10>
        status = USBH_NOT_SUPPORTED;
 8010174:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 8010176:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 8010178:	2300      	movs	r3, #0
        phost->RequestState = CMD_SEND;
 801017a:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 801017c:	7623      	strb	r3, [r4, #24]
}
 801017e:	b003      	add	sp, #12
 8010180:	bd30      	pop	{r4, r5, pc}
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8010182:	2200      	movs	r2, #0
 8010184:	2501      	movs	r5, #1
 8010186:	7963      	ldrb	r3, [r4, #5]
 8010188:	4620      	mov	r0, r4
 801018a:	4611      	mov	r1, r2
 801018c:	9500      	str	r5, [sp, #0]
 801018e:	f000 faf1 	bl	8010774 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8010192:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010196:	230a      	movs	r3, #10
 8010198:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 801019a:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801019c:	7623      	strb	r3, [r4, #24]
 801019e:	e74a      	b.n	8010036 <USBH_SetAddress+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80101a0:	7961      	ldrb	r1, [r4, #5]
 80101a2:	4620      	mov	r0, r4
 80101a4:	f00d ffa0 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80101a8:	2801      	cmp	r0, #1
 80101aa:	d005      	beq.n	80101b8 <USBH_SetAddress+0x194>
      else if (URB_Status == USBH_URB_NOTREADY)
 80101ac:	2802      	cmp	r0, #2
 80101ae:	d1a7      	bne.n	8010100 <USBH_SetAddress+0xdc>
            phost->Control.state = CTRL_STATUS_OUT;
 80101b0:	2309      	movs	r3, #9
 80101b2:	2001      	movs	r0, #1
 80101b4:	7623      	strb	r3, [r4, #24]
 80101b6:	e73e      	b.n	8010036 <USBH_SetAddress+0x12>
        status = USBH_OK;
 80101b8:	2000      	movs	r0, #0
 80101ba:	e7dc      	b.n	8010176 <USBH_SetAddress+0x152>
          if (direction == USB_D2H)
 80101bc:	2a00      	cmp	r2, #0
 80101be:	dbf7      	blt.n	80101b0 <USBH_SetAddress+0x18c>
            phost->Control.state = CTRL_STATUS_IN;
 80101c0:	2307      	movs	r3, #7
 80101c2:	2001      	movs	r0, #1
 80101c4:	7623      	strb	r3, [r4, #24]
 80101c6:	e736      	b.n	8010036 <USBH_SetAddress+0x12>
        if (phost->Control.setup.b.wLength.w != 0U)
 80101c8:	8ae3      	ldrh	r3, [r4, #22]
 80101ca:	f994 2010 	ldrsb.w	r2, [r4, #16]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d0f4      	beq.n	80101bc <USBH_SetAddress+0x198>
          if (direction == USB_D2H)
 80101d2:	2a00      	cmp	r2, #0
 80101d4:	db08      	blt.n	80101e8 <USBH_SetAddress+0x1c4>
            phost->Control.state = CTRL_DATA_OUT;
 80101d6:	2305      	movs	r3, #5
 80101d8:	2001      	movs	r0, #1
 80101da:	7623      	strb	r3, [r4, #24]
 80101dc:	e72b      	b.n	8010036 <USBH_SetAddress+0x12>
        phost->Control.state = CTRL_SETUP;
 80101de:	2301      	movs	r3, #1
 80101e0:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 80101e2:	4618      	mov	r0, r3
 80101e4:	70a3      	strb	r3, [r4, #2]
 80101e6:	e726      	b.n	8010036 <USBH_SetAddress+0x12>
            phost->Control.state = CTRL_DATA_IN;
 80101e8:	2303      	movs	r3, #3
 80101ea:	7623      	strb	r3, [r4, #24]
 80101ec:	e723      	b.n	8010036 <USBH_SetAddress+0x12>
 80101ee:	bf00      	nop

080101f0 <USBH_SetCfg>:
{
 80101f0:	b530      	push	{r4, r5, lr}
 80101f2:	4603      	mov	r3, r0
  if (phost->RequestState == CMD_SEND)
 80101f4:	7880      	ldrb	r0, [r0, #2]
{
 80101f6:	b083      	sub	sp, #12
  if (phost->RequestState == CMD_SEND)
 80101f8:	2801      	cmp	r0, #1
 80101fa:	d011      	beq.n	8010220 <USBH_SetCfg+0x30>
  switch (phost->RequestState)
 80101fc:	2802      	cmp	r0, #2
 80101fe:	d002      	beq.n	8010206 <USBH_SetCfg+0x16>
  status = USBH_BUSY;
 8010200:	2001      	movs	r0, #1
}
 8010202:	b003      	add	sp, #12
 8010204:	bd30      	pop	{r4, r5, pc}
 8010206:	461c      	mov	r4, r3
  switch (phost->Control.state)
 8010208:	7e1b      	ldrb	r3, [r3, #24]
 801020a:	3b01      	subs	r3, #1
 801020c:	2b0a      	cmp	r3, #10
 801020e:	d8f7      	bhi.n	8010200 <USBH_SetCfg+0x10>
 8010210:	e8df f003 	tbb	[pc, r3]
 8010214:	5447382e 	.word	0x5447382e
 8010218:	8b7e6e5f 	.word	0x8b7e6e5f
 801021c:	ac9d      	.short	0xac9d
 801021e:	13          	.byte	0x13
 801021f:	00          	.byte	0x00
    phost->Control.setup.b.wIndex.w = 0U;
 8010220:	2200      	movs	r2, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010222:	f44f 6510 	mov.w	r5, #2304	; 0x900
      phost->RequestState = CMD_WAIT;
 8010226:	2402      	movs	r4, #2
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010228:	8259      	strh	r1, [r3, #18]
      phost->Control.state = CTRL_SETUP;
 801022a:	7618      	strb	r0, [r3, #24]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801022c:	821d      	strh	r5, [r3, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 801022e:	615a      	str	r2, [r3, #20]
      phost->Control.buff = buff;
 8010230:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010232:	819a      	strh	r2, [r3, #12]
      phost->RequestState = CMD_WAIT;
 8010234:	709c      	strb	r4, [r3, #2]
}
 8010236:	b003      	add	sp, #12
 8010238:	bd30      	pop	{r4, r5, pc}
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801023a:	7e63      	ldrb	r3, [r4, #25]
 801023c:	3301      	adds	r3, #1
 801023e:	b2db      	uxtb	r3, r3
 8010240:	2b02      	cmp	r3, #2
 8010242:	7663      	strb	r3, [r4, #25]
 8010244:	f240 80b1 	bls.w	80103aa <USBH_SetCfg+0x1ba>
        phost->Control.errorcount = 0U;
 8010248:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801024a:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 801024e:	2106      	movs	r1, #6
 8010250:	4620      	mov	r0, r4
 8010252:	4798      	blx	r3
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010254:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 8010256:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010258:	4620      	mov	r0, r4
 801025a:	f000 fb27 	bl	80108ac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 801025e:	7921      	ldrb	r1, [r4, #4]
 8010260:	4620      	mov	r0, r4
 8010262:	f000 fb23 	bl	80108ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010266:	7025      	strb	r5, [r4, #0]
        phost->RequestState = CMD_SEND;
 8010268:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 801026a:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 801026c:	70a3      	strb	r3, [r4, #2]
 801026e:	e7c8      	b.n	8010202 <USBH_SetCfg+0x12>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010270:	7962      	ldrb	r2, [r4, #5]
 8010272:	f104 0110 	add.w	r1, r4, #16
 8010276:	4620      	mov	r0, r4
 8010278:	f000 fa6c 	bl	8010754 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 801027c:	2302      	movs	r3, #2
 801027e:	2001      	movs	r0, #1
 8010280:	7623      	strb	r3, [r4, #24]
 8010282:	e7be      	b.n	8010202 <USBH_SetCfg+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010284:	7961      	ldrb	r1, [r4, #5]
 8010286:	4620      	mov	r0, r4
 8010288:	f00d ff2e 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 801028c:	2801      	cmp	r0, #1
 801028e:	f000 8081 	beq.w	8010394 <USBH_SetCfg+0x1a4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010292:	2804      	cmp	r0, #4
 8010294:	d001      	beq.n	801029a <USBH_SetCfg+0xaa>
 8010296:	2802      	cmp	r0, #2
 8010298:	d1b2      	bne.n	8010200 <USBH_SetCfg+0x10>
          phost->Control.state = CTRL_ERROR;
 801029a:	230b      	movs	r3, #11
 801029c:	2001      	movs	r0, #1
 801029e:	7623      	strb	r3, [r4, #24]
 80102a0:	e7af      	b.n	8010202 <USBH_SetCfg+0x12>
      phost->Control.timer = (uint16_t)phost->Timer;
 80102a2:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80102a6:	4620      	mov	r0, r4
 80102a8:	7923      	ldrb	r3, [r4, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 80102aa:	81e2      	strh	r2, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80102ac:	68a1      	ldr	r1, [r4, #8]
 80102ae:	89a2      	ldrh	r2, [r4, #12]
 80102b0:	f000 fa78 	bl	80107a4 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 80102b4:	2304      	movs	r3, #4
 80102b6:	2001      	movs	r0, #1
 80102b8:	7623      	strb	r3, [r4, #24]
 80102ba:	e7a2      	b.n	8010202 <USBH_SetCfg+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80102bc:	7921      	ldrb	r1, [r4, #4]
 80102be:	4620      	mov	r0, r4
 80102c0:	f00d ff12 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80102c4:	2801      	cmp	r0, #1
 80102c6:	d059      	beq.n	801037c <USBH_SetCfg+0x18c>
      if (URB_Status == USBH_URB_STALL)
 80102c8:	2805      	cmp	r0, #5
 80102ca:	d039      	beq.n	8010340 <USBH_SetCfg+0x150>
        if (URB_Status == USBH_URB_ERROR)
 80102cc:	2804      	cmp	r0, #4
 80102ce:	d197      	bne.n	8010200 <USBH_SetCfg+0x10>
 80102d0:	e7e3      	b.n	801029a <USBH_SetCfg+0xaa>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80102d2:	2501      	movs	r5, #1
 80102d4:	7963      	ldrb	r3, [r4, #5]
 80102d6:	89a2      	ldrh	r2, [r4, #12]
 80102d8:	4620      	mov	r0, r4
 80102da:	68a1      	ldr	r1, [r4, #8]
 80102dc:	9500      	str	r5, [sp, #0]
 80102de:	f000 fa49 	bl	8010774 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80102e2:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80102e6:	2306      	movs	r3, #6
 80102e8:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 80102ea:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80102ec:	7623      	strb	r3, [r4, #24]
 80102ee:	e788      	b.n	8010202 <USBH_SetCfg+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80102f0:	7961      	ldrb	r1, [r4, #5]
 80102f2:	4620      	mov	r0, r4
 80102f4:	f00d fef8 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80102f8:	2801      	cmp	r0, #1
 80102fa:	d047      	beq.n	801038c <USBH_SetCfg+0x19c>
      else if (URB_Status == USBH_URB_STALL)
 80102fc:	2805      	cmp	r0, #5
 80102fe:	d01f      	beq.n	8010340 <USBH_SetCfg+0x150>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010300:	2802      	cmp	r0, #2
 8010302:	d04e      	beq.n	80103a2 <USBH_SetCfg+0x1b2>
        if (URB_Status == USBH_URB_ERROR)
 8010304:	2804      	cmp	r0, #4
 8010306:	f47f af7b 	bne.w	8010200 <USBH_SetCfg+0x10>
          phost->Control.state = CTRL_ERROR;
 801030a:	230b      	movs	r3, #11
 801030c:	7623      	strb	r3, [r4, #24]
 801030e:	e7ab      	b.n	8010268 <USBH_SetCfg+0x78>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8010310:	2200      	movs	r2, #0
 8010312:	7923      	ldrb	r3, [r4, #4]
 8010314:	4620      	mov	r0, r4
 8010316:	4611      	mov	r1, r2
 8010318:	f000 fa44 	bl	80107a4 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 801031c:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010320:	2308      	movs	r3, #8
 8010322:	2001      	movs	r0, #1
      phost->Control.timer = (uint16_t)phost->Timer;
 8010324:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010326:	7623      	strb	r3, [r4, #24]
 8010328:	e76b      	b.n	8010202 <USBH_SetCfg+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801032a:	7921      	ldrb	r1, [r4, #4]
 801032c:	4620      	mov	r0, r4
 801032e:	f00d fedb 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010332:	2801      	cmp	r0, #1
 8010334:	d026      	beq.n	8010384 <USBH_SetCfg+0x194>
      else if (URB_Status == USBH_URB_ERROR)
 8010336:	2804      	cmp	r0, #4
 8010338:	d0af      	beq.n	801029a <USBH_SetCfg+0xaa>
        if (URB_Status == USBH_URB_STALL)
 801033a:	2805      	cmp	r0, #5
 801033c:	f47f af60 	bne.w	8010200 <USBH_SetCfg+0x10>
        status = USBH_NOT_SUPPORTED;
 8010340:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 8010342:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 8010344:	2300      	movs	r3, #0
        phost->RequestState = CMD_SEND;
 8010346:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8010348:	7623      	strb	r3, [r4, #24]
}
 801034a:	b003      	add	sp, #12
 801034c:	bd30      	pop	{r4, r5, pc}
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801034e:	2200      	movs	r2, #0
 8010350:	2501      	movs	r5, #1
 8010352:	7963      	ldrb	r3, [r4, #5]
 8010354:	4620      	mov	r0, r4
 8010356:	4611      	mov	r1, r2
 8010358:	9500      	str	r5, [sp, #0]
 801035a:	f000 fa0b 	bl	8010774 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 801035e:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010362:	230a      	movs	r3, #10
 8010364:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 8010366:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010368:	7623      	strb	r3, [r4, #24]
 801036a:	e74a      	b.n	8010202 <USBH_SetCfg+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801036c:	7961      	ldrb	r1, [r4, #5]
 801036e:	4620      	mov	r0, r4
 8010370:	f00d feba 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010374:	2801      	cmp	r0, #1
 8010376:	d005      	beq.n	8010384 <USBH_SetCfg+0x194>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010378:	2802      	cmp	r0, #2
 801037a:	d1a7      	bne.n	80102cc <USBH_SetCfg+0xdc>
            phost->Control.state = CTRL_STATUS_OUT;
 801037c:	2309      	movs	r3, #9
 801037e:	2001      	movs	r0, #1
 8010380:	7623      	strb	r3, [r4, #24]
 8010382:	e73e      	b.n	8010202 <USBH_SetCfg+0x12>
        status = USBH_OK;
 8010384:	2000      	movs	r0, #0
 8010386:	e7dc      	b.n	8010342 <USBH_SetCfg+0x152>
          if (direction == USB_D2H)
 8010388:	2a00      	cmp	r2, #0
 801038a:	dbf7      	blt.n	801037c <USBH_SetCfg+0x18c>
            phost->Control.state = CTRL_STATUS_IN;
 801038c:	2307      	movs	r3, #7
 801038e:	2001      	movs	r0, #1
 8010390:	7623      	strb	r3, [r4, #24]
 8010392:	e736      	b.n	8010202 <USBH_SetCfg+0x12>
        if (phost->Control.setup.b.wLength.w != 0U)
 8010394:	8ae3      	ldrh	r3, [r4, #22]
 8010396:	f994 2010 	ldrsb.w	r2, [r4, #16]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d0f4      	beq.n	8010388 <USBH_SetCfg+0x198>
          if (direction == USB_D2H)
 801039e:	2a00      	cmp	r2, #0
 80103a0:	db08      	blt.n	80103b4 <USBH_SetCfg+0x1c4>
            phost->Control.state = CTRL_DATA_OUT;
 80103a2:	2305      	movs	r3, #5
 80103a4:	2001      	movs	r0, #1
 80103a6:	7623      	strb	r3, [r4, #24]
 80103a8:	e72b      	b.n	8010202 <USBH_SetCfg+0x12>
        phost->Control.state = CTRL_SETUP;
 80103aa:	2301      	movs	r3, #1
 80103ac:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 80103ae:	4618      	mov	r0, r3
 80103b0:	70a3      	strb	r3, [r4, #2]
 80103b2:	e726      	b.n	8010202 <USBH_SetCfg+0x12>
            phost->Control.state = CTRL_DATA_IN;
 80103b4:	2303      	movs	r3, #3
 80103b6:	7623      	strb	r3, [r4, #24]
 80103b8:	e723      	b.n	8010202 <USBH_SetCfg+0x12>
 80103ba:	bf00      	nop

080103bc <USBH_SetFeature>:
{
 80103bc:	b530      	push	{r4, r5, lr}
 80103be:	4603      	mov	r3, r0
  if (phost->RequestState == CMD_SEND)
 80103c0:	7880      	ldrb	r0, [r0, #2]
{
 80103c2:	b083      	sub	sp, #12
  if (phost->RequestState == CMD_SEND)
 80103c4:	2801      	cmp	r0, #1
 80103c6:	d011      	beq.n	80103ec <USBH_SetFeature+0x30>
  switch (phost->RequestState)
 80103c8:	2802      	cmp	r0, #2
 80103ca:	d002      	beq.n	80103d2 <USBH_SetFeature+0x16>
  status = USBH_BUSY;
 80103cc:	2001      	movs	r0, #1
}
 80103ce:	b003      	add	sp, #12
 80103d0:	bd30      	pop	{r4, r5, pc}
 80103d2:	461c      	mov	r4, r3
  switch (phost->Control.state)
 80103d4:	7e1b      	ldrb	r3, [r3, #24]
 80103d6:	3b01      	subs	r3, #1
 80103d8:	2b0a      	cmp	r3, #10
 80103da:	d8f7      	bhi.n	80103cc <USBH_SetFeature+0x10>
 80103dc:	e8df f003 	tbb	[pc, r3]
 80103e0:	5447382e 	.word	0x5447382e
 80103e4:	8b7e6e5f 	.word	0x8b7e6e5f
 80103e8:	ac9d      	.short	0xac9d
 80103ea:	13          	.byte	0x13
 80103eb:	00          	.byte	0x00
    phost->Control.setup.b.wIndex.w = 0U;
 80103ec:	2200      	movs	r2, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80103ee:	f44f 7540 	mov.w	r5, #768	; 0x300
      phost->RequestState = CMD_WAIT;
 80103f2:	2402      	movs	r4, #2
    phost->Control.setup.b.wValue.w = wValue;
 80103f4:	8259      	strh	r1, [r3, #18]
      phost->Control.state = CTRL_SETUP;
 80103f6:	7618      	strb	r0, [r3, #24]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80103f8:	821d      	strh	r5, [r3, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 80103fa:	615a      	str	r2, [r3, #20]
      phost->Control.buff = buff;
 80103fc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80103fe:	819a      	strh	r2, [r3, #12]
      phost->RequestState = CMD_WAIT;
 8010400:	709c      	strb	r4, [r3, #2]
}
 8010402:	b003      	add	sp, #12
 8010404:	bd30      	pop	{r4, r5, pc}
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010406:	7e63      	ldrb	r3, [r4, #25]
 8010408:	3301      	adds	r3, #1
 801040a:	b2db      	uxtb	r3, r3
 801040c:	2b02      	cmp	r3, #2
 801040e:	7663      	strb	r3, [r4, #25]
 8010410:	f240 80b1 	bls.w	8010576 <USBH_SetFeature+0x1ba>
        phost->Control.errorcount = 0U;
 8010414:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010416:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 801041a:	2106      	movs	r1, #6
 801041c:	4620      	mov	r0, r4
 801041e:	4798      	blx	r3
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010420:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 8010422:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010424:	4620      	mov	r0, r4
 8010426:	f000 fa41 	bl	80108ac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 801042a:	7921      	ldrb	r1, [r4, #4]
 801042c:	4620      	mov	r0, r4
 801042e:	f000 fa3d 	bl	80108ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010432:	7025      	strb	r5, [r4, #0]
        phost->RequestState = CMD_SEND;
 8010434:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 8010436:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 8010438:	70a3      	strb	r3, [r4, #2]
 801043a:	e7c8      	b.n	80103ce <USBH_SetFeature+0x12>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801043c:	7962      	ldrb	r2, [r4, #5]
 801043e:	f104 0110 	add.w	r1, r4, #16
 8010442:	4620      	mov	r0, r4
 8010444:	f000 f986 	bl	8010754 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 8010448:	2302      	movs	r3, #2
 801044a:	2001      	movs	r0, #1
 801044c:	7623      	strb	r3, [r4, #24]
 801044e:	e7be      	b.n	80103ce <USBH_SetFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010450:	7961      	ldrb	r1, [r4, #5]
 8010452:	4620      	mov	r0, r4
 8010454:	f00d fe48 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010458:	2801      	cmp	r0, #1
 801045a:	f000 8081 	beq.w	8010560 <USBH_SetFeature+0x1a4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801045e:	2804      	cmp	r0, #4
 8010460:	d001      	beq.n	8010466 <USBH_SetFeature+0xaa>
 8010462:	2802      	cmp	r0, #2
 8010464:	d1b2      	bne.n	80103cc <USBH_SetFeature+0x10>
          phost->Control.state = CTRL_ERROR;
 8010466:	230b      	movs	r3, #11
 8010468:	2001      	movs	r0, #1
 801046a:	7623      	strb	r3, [r4, #24]
 801046c:	e7af      	b.n	80103ce <USBH_SetFeature+0x12>
      phost->Control.timer = (uint16_t)phost->Timer;
 801046e:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8010472:	4620      	mov	r0, r4
 8010474:	7923      	ldrb	r3, [r4, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 8010476:	81e2      	strh	r2, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8010478:	68a1      	ldr	r1, [r4, #8]
 801047a:	89a2      	ldrh	r2, [r4, #12]
 801047c:	f000 f992 	bl	80107a4 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010480:	2304      	movs	r3, #4
 8010482:	2001      	movs	r0, #1
 8010484:	7623      	strb	r3, [r4, #24]
 8010486:	e7a2      	b.n	80103ce <USBH_SetFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010488:	7921      	ldrb	r1, [r4, #4]
 801048a:	4620      	mov	r0, r4
 801048c:	f00d fe2c 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010490:	2801      	cmp	r0, #1
 8010492:	d059      	beq.n	8010548 <USBH_SetFeature+0x18c>
      if (URB_Status == USBH_URB_STALL)
 8010494:	2805      	cmp	r0, #5
 8010496:	d039      	beq.n	801050c <USBH_SetFeature+0x150>
        if (URB_Status == USBH_URB_ERROR)
 8010498:	2804      	cmp	r0, #4
 801049a:	d197      	bne.n	80103cc <USBH_SetFeature+0x10>
 801049c:	e7e3      	b.n	8010466 <USBH_SetFeature+0xaa>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801049e:	2501      	movs	r5, #1
 80104a0:	7963      	ldrb	r3, [r4, #5]
 80104a2:	89a2      	ldrh	r2, [r4, #12]
 80104a4:	4620      	mov	r0, r4
 80104a6:	68a1      	ldr	r1, [r4, #8]
 80104a8:	9500      	str	r5, [sp, #0]
 80104aa:	f000 f963 	bl	8010774 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80104ae:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80104b2:	2306      	movs	r3, #6
 80104b4:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 80104b6:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80104b8:	7623      	strb	r3, [r4, #24]
 80104ba:	e788      	b.n	80103ce <USBH_SetFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80104bc:	7961      	ldrb	r1, [r4, #5]
 80104be:	4620      	mov	r0, r4
 80104c0:	f00d fe12 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80104c4:	2801      	cmp	r0, #1
 80104c6:	d047      	beq.n	8010558 <USBH_SetFeature+0x19c>
      else if (URB_Status == USBH_URB_STALL)
 80104c8:	2805      	cmp	r0, #5
 80104ca:	d01f      	beq.n	801050c <USBH_SetFeature+0x150>
      else if (URB_Status == USBH_URB_NOTREADY)
 80104cc:	2802      	cmp	r0, #2
 80104ce:	d04e      	beq.n	801056e <USBH_SetFeature+0x1b2>
        if (URB_Status == USBH_URB_ERROR)
 80104d0:	2804      	cmp	r0, #4
 80104d2:	f47f af7b 	bne.w	80103cc <USBH_SetFeature+0x10>
          phost->Control.state = CTRL_ERROR;
 80104d6:	230b      	movs	r3, #11
 80104d8:	7623      	strb	r3, [r4, #24]
 80104da:	e7ab      	b.n	8010434 <USBH_SetFeature+0x78>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80104dc:	2200      	movs	r2, #0
 80104de:	7923      	ldrb	r3, [r4, #4]
 80104e0:	4620      	mov	r0, r4
 80104e2:	4611      	mov	r1, r2
 80104e4:	f000 f95e 	bl	80107a4 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80104e8:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80104ec:	2308      	movs	r3, #8
 80104ee:	2001      	movs	r0, #1
      phost->Control.timer = (uint16_t)phost->Timer;
 80104f0:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80104f2:	7623      	strb	r3, [r4, #24]
 80104f4:	e76b      	b.n	80103ce <USBH_SetFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80104f6:	7921      	ldrb	r1, [r4, #4]
 80104f8:	4620      	mov	r0, r4
 80104fa:	f00d fdf5 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80104fe:	2801      	cmp	r0, #1
 8010500:	d026      	beq.n	8010550 <USBH_SetFeature+0x194>
      else if (URB_Status == USBH_URB_ERROR)
 8010502:	2804      	cmp	r0, #4
 8010504:	d0af      	beq.n	8010466 <USBH_SetFeature+0xaa>
        if (URB_Status == USBH_URB_STALL)
 8010506:	2805      	cmp	r0, #5
 8010508:	f47f af60 	bne.w	80103cc <USBH_SetFeature+0x10>
        status = USBH_NOT_SUPPORTED;
 801050c:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 801050e:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 8010510:	2300      	movs	r3, #0
        phost->RequestState = CMD_SEND;
 8010512:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8010514:	7623      	strb	r3, [r4, #24]
}
 8010516:	b003      	add	sp, #12
 8010518:	bd30      	pop	{r4, r5, pc}
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801051a:	2200      	movs	r2, #0
 801051c:	2501      	movs	r5, #1
 801051e:	7963      	ldrb	r3, [r4, #5]
 8010520:	4620      	mov	r0, r4
 8010522:	4611      	mov	r1, r2
 8010524:	9500      	str	r5, [sp, #0]
 8010526:	f000 f925 	bl	8010774 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 801052a:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801052e:	230a      	movs	r3, #10
 8010530:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 8010532:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010534:	7623      	strb	r3, [r4, #24]
 8010536:	e74a      	b.n	80103ce <USBH_SetFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010538:	7961      	ldrb	r1, [r4, #5]
 801053a:	4620      	mov	r0, r4
 801053c:	f00d fdd4 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010540:	2801      	cmp	r0, #1
 8010542:	d005      	beq.n	8010550 <USBH_SetFeature+0x194>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010544:	2802      	cmp	r0, #2
 8010546:	d1a7      	bne.n	8010498 <USBH_SetFeature+0xdc>
            phost->Control.state = CTRL_STATUS_OUT;
 8010548:	2309      	movs	r3, #9
 801054a:	2001      	movs	r0, #1
 801054c:	7623      	strb	r3, [r4, #24]
 801054e:	e73e      	b.n	80103ce <USBH_SetFeature+0x12>
        status = USBH_OK;
 8010550:	2000      	movs	r0, #0
 8010552:	e7dc      	b.n	801050e <USBH_SetFeature+0x152>
          if (direction == USB_D2H)
 8010554:	2a00      	cmp	r2, #0
 8010556:	dbf7      	blt.n	8010548 <USBH_SetFeature+0x18c>
            phost->Control.state = CTRL_STATUS_IN;
 8010558:	2307      	movs	r3, #7
 801055a:	2001      	movs	r0, #1
 801055c:	7623      	strb	r3, [r4, #24]
 801055e:	e736      	b.n	80103ce <USBH_SetFeature+0x12>
        if (phost->Control.setup.b.wLength.w != 0U)
 8010560:	8ae3      	ldrh	r3, [r4, #22]
 8010562:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d0f4      	beq.n	8010554 <USBH_SetFeature+0x198>
          if (direction == USB_D2H)
 801056a:	2a00      	cmp	r2, #0
 801056c:	db08      	blt.n	8010580 <USBH_SetFeature+0x1c4>
            phost->Control.state = CTRL_DATA_OUT;
 801056e:	2305      	movs	r3, #5
 8010570:	2001      	movs	r0, #1
 8010572:	7623      	strb	r3, [r4, #24]
 8010574:	e72b      	b.n	80103ce <USBH_SetFeature+0x12>
        phost->Control.state = CTRL_SETUP;
 8010576:	2301      	movs	r3, #1
 8010578:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 801057a:	4618      	mov	r0, r3
 801057c:	70a3      	strb	r3, [r4, #2]
 801057e:	e726      	b.n	80103ce <USBH_SetFeature+0x12>
            phost->Control.state = CTRL_DATA_IN;
 8010580:	2303      	movs	r3, #3
 8010582:	7623      	strb	r3, [r4, #24]
 8010584:	e723      	b.n	80103ce <USBH_SetFeature+0x12>
 8010586:	bf00      	nop

08010588 <USBH_ClrFeature>:
{
 8010588:	b530      	push	{r4, r5, lr}
 801058a:	4603      	mov	r3, r0
  if (phost->RequestState == CMD_SEND)
 801058c:	7880      	ldrb	r0, [r0, #2]
{
 801058e:	b083      	sub	sp, #12
  if (phost->RequestState == CMD_SEND)
 8010590:	2801      	cmp	r0, #1
 8010592:	d011      	beq.n	80105b8 <USBH_ClrFeature+0x30>
  switch (phost->RequestState)
 8010594:	2802      	cmp	r0, #2
 8010596:	d002      	beq.n	801059e <USBH_ClrFeature+0x16>
  status = USBH_BUSY;
 8010598:	2001      	movs	r0, #1
}
 801059a:	b003      	add	sp, #12
 801059c:	bd30      	pop	{r4, r5, pc}
 801059e:	461c      	mov	r4, r3
  switch (phost->Control.state)
 80105a0:	7e1b      	ldrb	r3, [r3, #24]
 80105a2:	3b01      	subs	r3, #1
 80105a4:	2b0a      	cmp	r3, #10
 80105a6:	d8f7      	bhi.n	8010598 <USBH_ClrFeature+0x10>
 80105a8:	e8df f003 	tbb	[pc, r3]
 80105ac:	5447382e 	.word	0x5447382e
 80105b0:	8b7e6e5f 	.word	0x8b7e6e5f
 80105b4:	ac9d      	.short	0xac9d
 80105b6:	13          	.byte	0x13
 80105b7:	00          	.byte	0x00
    phost->Control.setup.b.wLength.w = 0U;
 80105b8:	2200      	movs	r2, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80105ba:	f44f 7581 	mov.w	r5, #258	; 0x102
      phost->RequestState = CMD_WAIT;
 80105be:	2402      	movs	r4, #2
    phost->Control.setup.b.wIndex.w = ep_num;
 80105c0:	8299      	strh	r1, [r3, #20]
      phost->Control.state = CTRL_SETUP;
 80105c2:	7618      	strb	r0, [r3, #24]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80105c4:	611d      	str	r5, [r3, #16]
    phost->Control.setup.b.wLength.w = 0U;
 80105c6:	82da      	strh	r2, [r3, #22]
      phost->Control.buff = buff;
 80105c8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80105ca:	819a      	strh	r2, [r3, #12]
      phost->RequestState = CMD_WAIT;
 80105cc:	709c      	strb	r4, [r3, #2]
}
 80105ce:	b003      	add	sp, #12
 80105d0:	bd30      	pop	{r4, r5, pc}
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80105d2:	7e63      	ldrb	r3, [r4, #25]
 80105d4:	3301      	adds	r3, #1
 80105d6:	b2db      	uxtb	r3, r3
 80105d8:	2b02      	cmp	r3, #2
 80105da:	7663      	strb	r3, [r4, #25]
 80105dc:	f240 80b1 	bls.w	8010742 <USBH_ClrFeature+0x1ba>
        phost->Control.errorcount = 0U;
 80105e0:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80105e2:	f8d4 3544 	ldr.w	r3, [r4, #1348]	; 0x544
 80105e6:	2106      	movs	r1, #6
 80105e8:	4620      	mov	r0, r4
 80105ea:	4798      	blx	r3
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80105ec:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 80105ee:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80105f0:	4620      	mov	r0, r4
 80105f2:	f000 f95b 	bl	80108ac <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80105f6:	7921      	ldrb	r1, [r4, #4]
 80105f8:	4620      	mov	r0, r4
 80105fa:	f000 f957 	bl	80108ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80105fe:	7025      	strb	r5, [r4, #0]
        phost->RequestState = CMD_SEND;
 8010600:	2301      	movs	r3, #1
      status = USBH_HandleControl(phost);
 8010602:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 8010604:	70a3      	strb	r3, [r4, #2]
 8010606:	e7c8      	b.n	801059a <USBH_ClrFeature+0x12>
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010608:	7962      	ldrb	r2, [r4, #5]
 801060a:	f104 0110 	add.w	r1, r4, #16
 801060e:	4620      	mov	r0, r4
 8010610:	f000 f8a0 	bl	8010754 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 8010614:	2302      	movs	r3, #2
 8010616:	2001      	movs	r0, #1
 8010618:	7623      	strb	r3, [r4, #24]
 801061a:	e7be      	b.n	801059a <USBH_ClrFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801061c:	7961      	ldrb	r1, [r4, #5]
 801061e:	4620      	mov	r0, r4
 8010620:	f00d fd62 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010624:	2801      	cmp	r0, #1
 8010626:	f000 8081 	beq.w	801072c <USBH_ClrFeature+0x1a4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801062a:	2804      	cmp	r0, #4
 801062c:	d001      	beq.n	8010632 <USBH_ClrFeature+0xaa>
 801062e:	2802      	cmp	r0, #2
 8010630:	d1b2      	bne.n	8010598 <USBH_ClrFeature+0x10>
          phost->Control.state = CTRL_ERROR;
 8010632:	230b      	movs	r3, #11
 8010634:	2001      	movs	r0, #1
 8010636:	7623      	strb	r3, [r4, #24]
 8010638:	e7af      	b.n	801059a <USBH_ClrFeature+0x12>
      phost->Control.timer = (uint16_t)phost->Timer;
 801063a:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 801063e:	4620      	mov	r0, r4
 8010640:	7923      	ldrb	r3, [r4, #4]
      phost->Control.timer = (uint16_t)phost->Timer;
 8010642:	81e2      	strh	r2, [r4, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8010644:	68a1      	ldr	r1, [r4, #8]
 8010646:	89a2      	ldrh	r2, [r4, #12]
 8010648:	f000 f8ac 	bl	80107a4 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 801064c:	2304      	movs	r3, #4
 801064e:	2001      	movs	r0, #1
 8010650:	7623      	strb	r3, [r4, #24]
 8010652:	e7a2      	b.n	801059a <USBH_ClrFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010654:	7921      	ldrb	r1, [r4, #4]
 8010656:	4620      	mov	r0, r4
 8010658:	f00d fd46 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 801065c:	2801      	cmp	r0, #1
 801065e:	d059      	beq.n	8010714 <USBH_ClrFeature+0x18c>
      if (URB_Status == USBH_URB_STALL)
 8010660:	2805      	cmp	r0, #5
 8010662:	d039      	beq.n	80106d8 <USBH_ClrFeature+0x150>
        if (URB_Status == USBH_URB_ERROR)
 8010664:	2804      	cmp	r0, #4
 8010666:	d197      	bne.n	8010598 <USBH_ClrFeature+0x10>
 8010668:	e7e3      	b.n	8010632 <USBH_ClrFeature+0xaa>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801066a:	2501      	movs	r5, #1
 801066c:	7963      	ldrb	r3, [r4, #5]
 801066e:	89a2      	ldrh	r2, [r4, #12]
 8010670:	4620      	mov	r0, r4
 8010672:	68a1      	ldr	r1, [r4, #8]
 8010674:	9500      	str	r5, [sp, #0]
 8010676:	f000 f87d 	bl	8010774 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 801067a:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801067e:	2306      	movs	r3, #6
 8010680:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 8010682:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010684:	7623      	strb	r3, [r4, #24]
 8010686:	e788      	b.n	801059a <USBH_ClrFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010688:	7961      	ldrb	r1, [r4, #5]
 801068a:	4620      	mov	r0, r4
 801068c:	f00d fd2c 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8010690:	2801      	cmp	r0, #1
 8010692:	d047      	beq.n	8010724 <USBH_ClrFeature+0x19c>
      else if (URB_Status == USBH_URB_STALL)
 8010694:	2805      	cmp	r0, #5
 8010696:	d01f      	beq.n	80106d8 <USBH_ClrFeature+0x150>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010698:	2802      	cmp	r0, #2
 801069a:	d04e      	beq.n	801073a <USBH_ClrFeature+0x1b2>
        if (URB_Status == USBH_URB_ERROR)
 801069c:	2804      	cmp	r0, #4
 801069e:	f47f af7b 	bne.w	8010598 <USBH_ClrFeature+0x10>
          phost->Control.state = CTRL_ERROR;
 80106a2:	230b      	movs	r3, #11
 80106a4:	7623      	strb	r3, [r4, #24]
 80106a6:	e7ab      	b.n	8010600 <USBH_ClrFeature+0x78>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80106a8:	2200      	movs	r2, #0
 80106aa:	7923      	ldrb	r3, [r4, #4]
 80106ac:	4620      	mov	r0, r4
 80106ae:	4611      	mov	r1, r2
 80106b0:	f000 f878 	bl	80107a4 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80106b4:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80106b8:	2308      	movs	r3, #8
 80106ba:	2001      	movs	r0, #1
      phost->Control.timer = (uint16_t)phost->Timer;
 80106bc:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80106be:	7623      	strb	r3, [r4, #24]
 80106c0:	e76b      	b.n	801059a <USBH_ClrFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80106c2:	7921      	ldrb	r1, [r4, #4]
 80106c4:	4620      	mov	r0, r4
 80106c6:	f00d fd0f 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80106ca:	2801      	cmp	r0, #1
 80106cc:	d026      	beq.n	801071c <USBH_ClrFeature+0x194>
      else if (URB_Status == USBH_URB_ERROR)
 80106ce:	2804      	cmp	r0, #4
 80106d0:	d0af      	beq.n	8010632 <USBH_ClrFeature+0xaa>
        if (URB_Status == USBH_URB_STALL)
 80106d2:	2805      	cmp	r0, #5
 80106d4:	f47f af60 	bne.w	8010598 <USBH_ClrFeature+0x10>
        status = USBH_NOT_SUPPORTED;
 80106d8:	2003      	movs	r0, #3
        phost->RequestState = CMD_SEND;
 80106da:	2201      	movs	r2, #1
        phost->Control.state = CTRL_IDLE;
 80106dc:	2300      	movs	r3, #0
        phost->RequestState = CMD_SEND;
 80106de:	70a2      	strb	r2, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 80106e0:	7623      	strb	r3, [r4, #24]
}
 80106e2:	b003      	add	sp, #12
 80106e4:	bd30      	pop	{r4, r5, pc}
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80106e6:	2200      	movs	r2, #0
 80106e8:	2501      	movs	r5, #1
 80106ea:	7963      	ldrb	r3, [r4, #5]
 80106ec:	4620      	mov	r0, r4
 80106ee:	4611      	mov	r1, r2
 80106f0:	9500      	str	r5, [sp, #0]
 80106f2:	f000 f83f 	bl	8010774 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80106f6:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80106fa:	230a      	movs	r3, #10
 80106fc:	4628      	mov	r0, r5
      phost->Control.timer = (uint16_t)phost->Timer;
 80106fe:	81e2      	strh	r2, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010700:	7623      	strb	r3, [r4, #24]
 8010702:	e74a      	b.n	801059a <USBH_ClrFeature+0x12>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010704:	7961      	ldrb	r1, [r4, #5]
 8010706:	4620      	mov	r0, r4
 8010708:	f00d fcee 	bl	801e0e8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 801070c:	2801      	cmp	r0, #1
 801070e:	d005      	beq.n	801071c <USBH_ClrFeature+0x194>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010710:	2802      	cmp	r0, #2
 8010712:	d1a7      	bne.n	8010664 <USBH_ClrFeature+0xdc>
            phost->Control.state = CTRL_STATUS_OUT;
 8010714:	2309      	movs	r3, #9
 8010716:	2001      	movs	r0, #1
 8010718:	7623      	strb	r3, [r4, #24]
 801071a:	e73e      	b.n	801059a <USBH_ClrFeature+0x12>
        status = USBH_OK;
 801071c:	2000      	movs	r0, #0
 801071e:	e7dc      	b.n	80106da <USBH_ClrFeature+0x152>
          if (direction == USB_D2H)
 8010720:	2a00      	cmp	r2, #0
 8010722:	dbf7      	blt.n	8010714 <USBH_ClrFeature+0x18c>
            phost->Control.state = CTRL_STATUS_IN;
 8010724:	2307      	movs	r3, #7
 8010726:	2001      	movs	r0, #1
 8010728:	7623      	strb	r3, [r4, #24]
 801072a:	e736      	b.n	801059a <USBH_ClrFeature+0x12>
        if (phost->Control.setup.b.wLength.w != 0U)
 801072c:	8ae3      	ldrh	r3, [r4, #22]
 801072e:	f994 2010 	ldrsb.w	r2, [r4, #16]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d0f4      	beq.n	8010720 <USBH_ClrFeature+0x198>
          if (direction == USB_D2H)
 8010736:	2a00      	cmp	r2, #0
 8010738:	db08      	blt.n	801074c <USBH_ClrFeature+0x1c4>
            phost->Control.state = CTRL_DATA_OUT;
 801073a:	2305      	movs	r3, #5
 801073c:	2001      	movs	r0, #1
 801073e:	7623      	strb	r3, [r4, #24]
 8010740:	e72b      	b.n	801059a <USBH_ClrFeature+0x12>
        phost->Control.state = CTRL_SETUP;
 8010742:	2301      	movs	r3, #1
 8010744:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8010746:	4618      	mov	r0, r3
 8010748:	70a3      	strb	r3, [r4, #2]
 801074a:	e726      	b.n	801059a <USBH_ClrFeature+0x12>
            phost->Control.state = CTRL_DATA_IN;
 801074c:	2303      	movs	r3, #3
 801074e:	7623      	strb	r3, [r4, #24]
 8010750:	e723      	b.n	801059a <USBH_ClrFeature+0x12>
 8010752:	bf00      	nop

08010754 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010754:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010756:	2400      	movs	r4, #0
{
 8010758:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801075a:	2508      	movs	r5, #8
 801075c:	9101      	str	r1, [sp, #4]
 801075e:	4623      	mov	r3, r4
 8010760:	4611      	mov	r1, r2
 8010762:	9403      	str	r4, [sp, #12]
 8010764:	9400      	str	r4, [sp, #0]
 8010766:	4622      	mov	r2, r4
 8010768:	9502      	str	r5, [sp, #8]
 801076a:	f00d fca1 	bl	801e0b0 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 801076e:	4620      	mov	r0, r4
 8010770:	b005      	add	sp, #20
 8010772:	bd30      	pop	{r4, r5, pc}

08010774 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010774:	b570      	push	{r4, r5, r6, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010776:	f890 631d 	ldrb.w	r6, [r0, #797]	; 0x31d
{
 801077a:	b084      	sub	sp, #16
 801077c:	461d      	mov	r5, r3
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801077e:	2300      	movs	r3, #0
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010780:	2e00      	cmp	r6, #0
{
 8010782:	f89d 4020 	ldrb.w	r4, [sp, #32]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010786:	f04f 0601 	mov.w	r6, #1
 801078a:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 801078c:	bf18      	it	ne
 801078e:	461c      	movne	r4, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010790:	461a      	mov	r2, r3
 8010792:	e9cd 6100 	strd	r6, r1, [sp]
 8010796:	9403      	str	r4, [sp, #12]
 8010798:	4629      	mov	r1, r5
 801079a:	f00d fc89 	bl	801e0b0 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 801079e:	2000      	movs	r0, #0
 80107a0:	b004      	add	sp, #16
 80107a2:	bd70      	pop	{r4, r5, r6, pc}

080107a4 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80107a4:	b570      	push	{r4, r5, r6, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80107a6:	2400      	movs	r4, #0
{
 80107a8:	b084      	sub	sp, #16
 80107aa:	461e      	mov	r6, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80107ac:	2501      	movs	r5, #1
 80107ae:	4623      	mov	r3, r4
 80107b0:	9403      	str	r4, [sp, #12]
 80107b2:	9500      	str	r5, [sp, #0]
 80107b4:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80107b8:	4631      	mov	r1, r6
 80107ba:	462a      	mov	r2, r5
 80107bc:	f00d fc78 	bl	801e0b0 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 80107c0:	4620      	mov	r0, r4
 80107c2:	b004      	add	sp, #16
 80107c4:	bd70      	pop	{r4, r5, r6, pc}
 80107c6:	bf00      	nop

080107c8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80107c8:	b570      	push	{r4, r5, r6, lr}
 80107ca:	461e      	mov	r6, r3
 80107cc:	b084      	sub	sp, #16
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80107ce:	2400      	movs	r4, #0
 80107d0:	2501      	movs	r5, #1
 80107d2:	2302      	movs	r3, #2
 80107d4:	9403      	str	r4, [sp, #12]
 80107d6:	9500      	str	r5, [sp, #0]
 80107d8:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80107dc:	4631      	mov	r1, r6
 80107de:	462a      	mov	r2, r5
 80107e0:	f00d fc66 	bl	801e0b0 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 80107e4:	4620      	mov	r0, r4
 80107e6:	b004      	add	sp, #16
 80107e8:	bd70      	pop	{r4, r5, r6, pc}
 80107ea:	bf00      	nop

080107ec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80107ec:	b530      	push	{r4, r5, lr}
 80107ee:	b085      	sub	sp, #20
 80107f0:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80107f4:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80107f8:	9400      	str	r4, [sp, #0]
{
 80107fa:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80107fe:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8010802:	f00d fc2d 	bl	801e060 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 8010806:	2000      	movs	r0, #0
 8010808:	b005      	add	sp, #20
 801080a:	bd30      	pop	{r4, r5, pc}

0801080c <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801080c:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 801080e:	f00d fc41 	bl	801e094 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 8010812:	2000      	movs	r0, #0
 8010814:	bd08      	pop	{r3, pc}
 8010816:	bf00      	nop

08010818 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010818:	4603      	mov	r3, r0
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801081a:	f8d0 04f4 	ldr.w	r0, [r0, #1268]	; 0x4f4
 801081e:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8010822:	d02a      	beq.n	801087a <USBH_AllocPipe+0x62>
 8010824:	f8d3 24f8 	ldr.w	r2, [r3, #1272]	; 0x4f8
 8010828:	0410      	lsls	r0, r2, #16
 801082a:	d52d      	bpl.n	8010888 <USBH_AllocPipe+0x70>
 801082c:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8010830:	0412      	lsls	r2, r2, #16
 8010832:	d52b      	bpl.n	801088c <USBH_AllocPipe+0x74>
 8010834:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8010838:	0410      	lsls	r0, r2, #16
 801083a:	d529      	bpl.n	8010890 <USBH_AllocPipe+0x78>
 801083c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8010840:	0412      	lsls	r2, r2, #16
 8010842:	d527      	bpl.n	8010894 <USBH_AllocPipe+0x7c>
 8010844:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010848:	0410      	lsls	r0, r2, #16
 801084a:	d525      	bpl.n	8010898 <USBH_AllocPipe+0x80>
 801084c:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
 8010850:	0412      	lsls	r2, r2, #16
 8010852:	d525      	bpl.n	80108a0 <USBH_AllocPipe+0x88>
 8010854:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
 8010858:	0410      	lsls	r0, r2, #16
 801085a:	d523      	bpl.n	80108a4 <USBH_AllocPipe+0x8c>
 801085c:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
 8010860:	0412      	lsls	r2, r2, #16
 8010862:	d51b      	bpl.n	801089c <USBH_AllocPipe+0x84>
 8010864:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
 8010868:	0410      	lsls	r0, r2, #16
 801086a:	d505      	bpl.n	8010878 <USBH_AllocPipe+0x60>
 801086c:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
 8010870:	0412      	lsls	r2, r2, #16
 8010872:	d519      	bpl.n	80108a8 <USBH_AllocPipe+0x90>
 8010874:	20ff      	movs	r0, #255	; 0xff
}
 8010876:	4770      	bx	lr
  for (idx = 0U ; idx < 11U ; idx++)
 8010878:	2009      	movs	r0, #9
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801087a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801087e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8010882:	f8c3 14f4 	str.w	r1, [r3, #1268]	; 0x4f4
 8010886:	4770      	bx	lr
  for (idx = 0U ; idx < 11U ; idx++)
 8010888:	2001      	movs	r0, #1
 801088a:	e7f6      	b.n	801087a <USBH_AllocPipe+0x62>
 801088c:	2002      	movs	r0, #2
 801088e:	e7f4      	b.n	801087a <USBH_AllocPipe+0x62>
 8010890:	2003      	movs	r0, #3
 8010892:	e7f2      	b.n	801087a <USBH_AllocPipe+0x62>
 8010894:	2004      	movs	r0, #4
 8010896:	e7f0      	b.n	801087a <USBH_AllocPipe+0x62>
 8010898:	2005      	movs	r0, #5
 801089a:	e7ee      	b.n	801087a <USBH_AllocPipe+0x62>
 801089c:	2008      	movs	r0, #8
 801089e:	e7ec      	b.n	801087a <USBH_AllocPipe+0x62>
 80108a0:	2006      	movs	r0, #6
 80108a2:	e7ea      	b.n	801087a <USBH_AllocPipe+0x62>
 80108a4:	2007      	movs	r0, #7
 80108a6:	e7e8      	b.n	801087a <USBH_AllocPipe+0x62>
 80108a8:	200a      	movs	r0, #10
 80108aa:	e7e6      	b.n	801087a <USBH_AllocPipe+0x62>

080108ac <USBH_FreePipe>:
  if (idx < 11U)
 80108ac:	290a      	cmp	r1, #10
 80108ae:	d807      	bhi.n	80108c0 <USBH_FreePipe+0x14>
 80108b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    phost->Pipes[idx] &= 0x7FFFU;
 80108b4:	f8d0 34f4 	ldr.w	r3, [r0, #1268]	; 0x4f4
 80108b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80108bc:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
}
 80108c0:	2000      	movs	r0, #0
 80108c2:	4770      	bx	lr

080108c4 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80108c4:	4b11      	ldr	r3, [pc, #68]	; (801090c <FATFS_LinkDriver+0x48>)
 80108c6:	7a5a      	ldrb	r2, [r3, #9]
 80108c8:	b10a      	cbz	r2, 80108ce <FATFS_LinkDriver+0xa>
  uint8_t ret = 1;
 80108ca:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 80108cc:	4770      	bx	lr
{
 80108ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108d0:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    disk.is_initialized[disk.nbr] = 0;
 80108d4:	f893 e009 	ldrb.w	lr, [r3, #9]
    disk.drv[disk.nbr] = drv;
 80108d8:	7a5e      	ldrb	r6, [r3, #9]
    path[1] = ':';
 80108da:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 80108de:	7a5d      	ldrb	r5, [r3, #9]
    path[2] = '/';
 80108e0:	272f      	movs	r7, #47	; 0x2f
    DiskNum = disk.nbr++;
 80108e2:	7a5a      	ldrb	r2, [r3, #9]
    disk.drv[disk.nbr] = drv;
 80108e4:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 80108e8:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 80108ea:	f803 400e 	strb.w	r4, [r3, lr]
    DiskNum = disk.nbr++;
 80108ee:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 80108f0:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 80108f2:	722c      	strb	r4, [r5, #8]
    DiskNum = disk.nbr++;
 80108f4:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 80108f6:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 80108f8:	b2c0      	uxtb	r0, r0
 80108fa:	7258      	strb	r0, [r3, #9]
    path[3] = 0;
 80108fc:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 80108fe:	700a      	strb	r2, [r1, #0]
    path[3] = 0;
 8010900:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 8010902:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 8010906:	708f      	strb	r7, [r1, #2]
}
 8010908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801090a:	bf00      	nop
 801090c:	200004d8 	.word	0x200004d8

08010910 <MIDI_Application>:
 * @brief  Main routine for MIDI application, looped in main.c
 * @param  None
 * @retval none
 */
void MIDI_Application(void)
{
 8010910:	b510      	push	{r4, lr}
	if(Appli_state == APPLICATION_READY)
 8010912:	4c15      	ldr	r4, [pc, #84]	; (8010968 <MIDI_Application+0x58>)
 8010914:	7823      	ldrb	r3, [r4, #0]
 8010916:	2b02      	cmp	r3, #2
 8010918:	d016      	beq.n	8010948 <MIDI_Application+0x38>
	if(Appli_state == APPLICATION_RUNNING)
	{
			//....pffff......grrrrr......
	}

	if(Appli_state == APPLICATION_DISCONNECT)
 801091a:	2b04      	cmp	r3, #4
 801091c:	d000      	beq.n	8010920 <MIDI_Application+0x10>
		HAL_Delay(10);
		MX_USB_HOST_Init();

	}

}
 801091e:	bd10      	pop	{r4, pc}
		Appli_state = APPLICATION_IDLE;
 8010920:	2300      	movs	r3, #0
		setLED_USB(0);
 8010922:	4618      	mov	r0, r3
		Appli_state = APPLICATION_IDLE;
 8010924:	7023      	strb	r3, [r4, #0]
		setLED_USB(0);
 8010926:	f003 f81d 	bl	8013964 <setLED_USB>
		USBH_MIDI_Stop(&hUsbHostFS);
 801092a:	4810      	ldr	r0, [pc, #64]	; (801096c <MIDI_Application+0x5c>)
 801092c:	f00d faac 	bl	801de88 <USBH_MIDI_Stop>
		HAL_Delay(10);
 8010930:	200a      	movs	r0, #10
 8010932:	f7f0 f87b 	bl	8000a2c <HAL_Delay>
		MX_USB_HOST_DeInit();
 8010936:	f00d f93d 	bl	801dbb4 <MX_USB_HOST_DeInit>
		HAL_Delay(10);
 801093a:	200a      	movs	r0, #10
 801093c:	f7f0 f876 	bl	8000a2c <HAL_Delay>
}
 8010940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		MX_USB_HOST_Init();
 8010944:	f00d b914 	b.w	801db70 <MX_USB_HOST_Init>
		USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer[MIDI_write_buffer], RX_BUFF_SIZE); // just once at the beginning, start the first reception
 8010948:	4909      	ldr	r1, [pc, #36]	; (8010970 <MIDI_Application+0x60>)
 801094a:	2240      	movs	r2, #64	; 0x40
 801094c:	4b09      	ldr	r3, [pc, #36]	; (8010974 <MIDI_Application+0x64>)
 801094e:	7809      	ldrb	r1, [r1, #0]
 8010950:	4806      	ldr	r0, [pc, #24]	; (801096c <MIDI_Application+0x5c>)
 8010952:	eb03 1181 	add.w	r1, r3, r1, lsl #6
 8010956:	f00d faad 	bl	801deb4 <USBH_MIDI_Receive>
		Appli_state = APPLICATION_RUNNING;
 801095a:	2303      	movs	r3, #3
		setLED_USB(1);
 801095c:	2001      	movs	r0, #1
		Appli_state = APPLICATION_RUNNING;
 801095e:	7023      	strb	r3, [r4, #0]
		setLED_USB(1);
 8010960:	f003 f800 	bl	8013964 <setLED_USB>
 8010964:	7823      	ldrb	r3, [r4, #0]
 8010966:	e7d8      	b.n	801091a <MIDI_Application+0xa>
 8010968:	20000697 	.word	0x20000697
 801096c:	300010a0 	.word	0x300010a0
 8010970:	20000008 	.word	0x20000008
 8010974:	30000000 	.word	0x30000000

08010978 <ProcessReceivedMidiDatas>:

}
volatile testInt = 0;
/*-----------------------------------------------------------------------------*/
void ProcessReceivedMidiDatas(void)
{
 8010978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t miniBufferPosition = 0;
	uint8_t processed = 0;
 801097c:	2500      	movs	r5, #0
 801097e:	4c3a      	ldr	r4, [pc, #232]	; (8010a68 <ProcessReceivedMidiDatas+0xf0>)
 8010980:	4f3a      	ldr	r7, [pc, #232]	; (8010a6c <ProcessReceivedMidiDatas+0xf4>)
	while (((myUSB_FIFO_writePointer > myUSB_FIFO_readPointer) || (myUSB_FIFO_overflowBit)) &&
 8010982:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8010a8c <ProcessReceivedMidiDatas+0x114>
			(processed < 32)) // maximum notes to process in a frame * 4
	{

		miniBufferPosition = (myUSB_FIFO_readPointer % 4);
		USB_message[miniBufferPosition] = myUSB_FIFO[myUSB_FIFO_readPointer];
 8010986:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010a90 <ProcessReceivedMidiDatas+0x118>
 801098a:	4e39      	ldr	r6, [pc, #228]	; (8010a70 <ProcessReceivedMidiDatas+0xf8>)
	while (((myUSB_FIFO_writePointer > myUSB_FIFO_readPointer) || (myUSB_FIFO_overflowBit)) &&
 801098c:	e008      	b.n	80109a0 <ProcessReceivedMidiDatas+0x28>
		myUSB_FIFO_readPointer++;
		if (miniBufferPosition == 3) //we must have reached the end of a 4-byte message
		{
			parse_MIDI_Message();
		}
		if (myUSB_FIFO_readPointer >= USB_FIFO_SIZE)
 801098e:	8823      	ldrh	r3, [r4, #0]
 8010990:	2bff      	cmp	r3, #255	; 0xff
 8010992:	d903      	bls.n	801099c <ProcessReceivedMidiDatas+0x24>
		{
			myUSB_FIFO_overflowBit = 0;
 8010994:	2300      	movs	r3, #0
 8010996:	f888 3000 	strb.w	r3, [r8]
			myUSB_FIFO_readPointer = 0;
 801099a:	8023      	strh	r3, [r4, #0]
		}
		processed++;
 801099c:	3501      	adds	r5, #1
 801099e:	b2ed      	uxtb	r5, r5
	while (((myUSB_FIFO_writePointer > myUSB_FIFO_readPointer) || (myUSB_FIFO_overflowBit)) &&
 80109a0:	883b      	ldrh	r3, [r7, #0]
 80109a2:	8822      	ldrh	r2, [r4, #0]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d303      	bcc.n	80109b0 <ProcessReceivedMidiDatas+0x38>
 80109a8:	f898 3000 	ldrb.w	r3, [r8]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d04c      	beq.n	8010a4a <ProcessReceivedMidiDatas+0xd2>
 80109b0:	2d20      	cmp	r5, #32
 80109b2:	d04e      	beq.n	8010a52 <ProcessReceivedMidiDatas+0xda>
		miniBufferPosition = (myUSB_FIFO_readPointer % 4);
 80109b4:	8822      	ldrh	r2, [r4, #0]
		USB_message[miniBufferPosition] = myUSB_FIFO[myUSB_FIFO_readPointer];
 80109b6:	8823      	ldrh	r3, [r4, #0]
		miniBufferPosition = (myUSB_FIFO_readPointer % 4);
 80109b8:	f002 0203 	and.w	r2, r2, #3
		USB_message[miniBufferPosition] = myUSB_FIFO[myUSB_FIFO_readPointer];
 80109bc:	b29b      	uxth	r3, r3
		if (miniBufferPosition == 3) //we must have reached the end of a 4-byte message
 80109be:	2a03      	cmp	r2, #3
		USB_message[miniBufferPosition] = myUSB_FIFO[myUSB_FIFO_readPointer];
 80109c0:	f819 1003 	ldrb.w	r1, [r9, r3]
		myUSB_FIFO_readPointer++;
 80109c4:	8823      	ldrh	r3, [r4, #0]
		USB_message[miniBufferPosition] = myUSB_FIFO[myUSB_FIFO_readPointer];
 80109c6:	54b1      	strb	r1, [r6, r2]
		myUSB_FIFO_readPointer++;
 80109c8:	f103 0301 	add.w	r3, r3, #1
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	8023      	strh	r3, [r4, #0]
		if (miniBufferPosition == 3) //we must have reached the end of a 4-byte message
 80109d0:	d1dd      	bne.n	801098e <ProcessReceivedMidiDatas+0x16>
	switch(USB_message[1])
 80109d2:	7873      	ldrb	r3, [r6, #1]
 80109d4:	2b90      	cmp	r3, #144	; 0x90
 80109d6:	d01a      	beq.n	8010a0e <ProcessReceivedMidiDatas+0x96>
 80109d8:	d90a      	bls.n	80109f0 <ProcessReceivedMidiDatas+0x78>
 80109da:	2bb0      	cmp	r3, #176	; 0xb0
 80109dc:	d024      	beq.n	8010a28 <ProcessReceivedMidiDatas+0xb0>
 80109de:	2be0      	cmp	r3, #224	; 0xe0
 80109e0:	d1d5      	bne.n	801098e <ProcessReceivedMidiDatas+0x16>
			pitchBend((USB_message[2]) + (USB_message[3] << 7));
 80109e2:	78f0      	ldrb	r0, [r6, #3]
 80109e4:	78b3      	ldrb	r3, [r6, #2]
 80109e6:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
 80109ea:	f00a ff97 	bl	801b91c <pitchBend>
 80109ee:	e7ce      	b.n	801098e <ProcessReceivedMidiDatas+0x16>
	switch(USB_message[1])
 80109f0:	2b80      	cmp	r3, #128	; 0x80
 80109f2:	d1cc      	bne.n	801098e <ProcessReceivedMidiDatas+0x16>
			key = USB_message[2];
 80109f4:	78b2      	ldrb	r2, [r6, #2]
			velocity = USB_message[3];
 80109f6:	78f3      	ldrb	r3, [r6, #3]
			key = USB_message[2];
 80109f8:	491e      	ldr	r1, [pc, #120]	; (8010a74 <ProcessReceivedMidiDatas+0xfc>)
			noteOff(key, velocity);
 80109fa:	4610      	mov	r0, r2
			velocity = USB_message[3];
 80109fc:	f8df c094 	ldr.w	ip, [pc, #148]	; 8010a94 <ProcessReceivedMidiDatas+0x11c>
			key = USB_message[2];
 8010a00:	700a      	strb	r2, [r1, #0]
			noteOff(key, velocity);
 8010a02:	4619      	mov	r1, r3
			velocity = USB_message[3];
 8010a04:	f88c 3000 	strb.w	r3, [ip]
			noteOff(key, velocity);
 8010a08:	f00a fdbe 	bl	801b588 <noteOff>
 8010a0c:	e7bf      	b.n	801098e <ProcessReceivedMidiDatas+0x16>
			key = USB_message[2];
 8010a0e:	78b2      	ldrb	r2, [r6, #2]
			velocity = USB_message[3];
 8010a10:	78f3      	ldrb	r3, [r6, #3]
			key = USB_message[2];
 8010a12:	4918      	ldr	r1, [pc, #96]	; (8010a74 <ProcessReceivedMidiDatas+0xfc>)
			noteOn(key, velocity);
 8010a14:	4610      	mov	r0, r2
			velocity = USB_message[3];
 8010a16:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010a94 <ProcessReceivedMidiDatas+0x11c>
			key = USB_message[2];
 8010a1a:	700a      	strb	r2, [r1, #0]
			noteOn(key, velocity);
 8010a1c:	4619      	mov	r1, r3
			velocity = USB_message[3];
 8010a1e:	f88c 3000 	strb.w	r3, [ip]
			noteOn(key, velocity);
 8010a22:	f00a fe69 	bl	801b6f8 <noteOn>
 8010a26:	e7b2      	b.n	801098e <ProcessReceivedMidiDatas+0x16>
			ctrl = USB_message[2];
 8010a28:	78b3      	ldrb	r3, [r6, #2]
 8010a2a:	4913      	ldr	r1, [pc, #76]	; (8010a78 <ProcessReceivedMidiDatas+0x100>)
			data = USB_message[3];
 8010a2c:	78f2      	ldrb	r2, [r6, #3]
			switch(ctrl)
 8010a2e:	2b40      	cmp	r3, #64	; 0x40
			ctrl = USB_message[2];
 8010a30:	700b      	strb	r3, [r1, #0]
			CCs[ctrl] = data;
 8010a32:	4812      	ldr	r0, [pc, #72]	; (8010a7c <ProcessReceivedMidiDatas+0x104>)
			data = USB_message[3];
 8010a34:	4912      	ldr	r1, [pc, #72]	; (8010a80 <ProcessReceivedMidiDatas+0x108>)
			CCs[ctrl] = data;
 8010a36:	54c2      	strb	r2, [r0, r3]
			data = USB_message[3];
 8010a38:	700a      	strb	r2, [r1, #0]
			switch(ctrl)
 8010a3a:	d1a8      	bne.n	801098e <ProcessReceivedMidiDatas+0x16>
 8010a3c:	4b11      	ldr	r3, [pc, #68]	; (8010a84 <ProcessReceivedMidiDatas+0x10c>)
 8010a3e:	781b      	ldrb	r3, [r3, #0]
					if (data)
 8010a40:	b162      	cbz	r2, 8010a5c <ProcessReceivedMidiDatas+0xe4>
						if (sustainInverted) 	sustainOff();
 8010a42:	b16b      	cbz	r3, 8010a60 <ProcessReceivedMidiDatas+0xe8>
 8010a44:	f00a ff76 	bl	801b934 <sustainOff>
 8010a48:	e7a1      	b.n	801098e <ProcessReceivedMidiDatas+0x16>
	}
	if (processed >= 32)
 8010a4a:	2d20      	cmp	r5, #32
 8010a4c:	d001      	beq.n	8010a52 <ProcessReceivedMidiDatas+0xda>
	{
		testInt = 1;
	}
}
 8010a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		testInt = 1;
 8010a52:	4b0d      	ldr	r3, [pc, #52]	; (8010a88 <ProcessReceivedMidiDatas+0x110>)
 8010a54:	2201      	movs	r2, #1
 8010a56:	601a      	str	r2, [r3, #0]
}
 8010a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						if (sustainInverted) 	sustainOn();
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d0f1      	beq.n	8010a44 <ProcessReceivedMidiDatas+0xcc>
						else					sustainOn();
 8010a60:	f00a ff6a 	bl	801b938 <sustainOn>
 8010a64:	e793      	b.n	801098e <ProcessReceivedMidiDatas+0x16>
 8010a66:	bf00      	nop
 8010a68:	2000069c 	.word	0x2000069c
 8010a6c:	20000698 	.word	0x20000698
 8010a70:	20000748 	.word	0x20000748
 8010a74:	2000074c 	.word	0x2000074c
 8010a78:	200006c1 	.word	0x200006c1
 8010a7c:	200006c4 	.word	0x200006c4
 8010a80:	20000745 	.word	0x20000745
 8010a84:	200006c0 	.word	0x200006c0
 8010a88:	200004e4 	.word	0x200004e4
 8010a8c:	2000069a 	.word	0x2000069a
 8010a90:	2001911c 	.word	0x2001911c
 8010a94:	20000744 	.word	0x20000744

08010a98 <MX_ADC1_Init>:
  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8010a98:	4b49      	ldr	r3, [pc, #292]	; (8010bc0 <MX_ADC1_Init+0x128>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8010a9a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  hadc1.Instance = ADC1;
 8010a9e:	4949      	ldr	r1, [pc, #292]	; (8010bc4 <MX_ADC1_Init+0x12c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8010aa0:	2208      	movs	r2, #8
{
 8010aa2:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8010aa4:	6019      	str	r1, [r3, #0]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = 64;
 8010aa6:	2140      	movs	r1, #64	; 0x40
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8010aa8:	6058      	str	r0, [r3, #4]
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8010aaa:	20c0      	movs	r0, #192	; 0xc0
{
 8010aac:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Init.NbrOfConversion = 6;
 8010aae:	2506      	movs	r5, #6
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8010ab0:	2403      	movs	r4, #3
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8010ab2:	611a      	str	r2, [r3, #16]
  hadc1.Init.Oversampling.Ratio = 64;
 8010ab4:	63d9      	str	r1, [r3, #60]	; 0x3c
  ADC_MultiModeTypeDef multimode = {0};
 8010ab6:	2200      	movs	r2, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8010ab8:	2101      	movs	r1, #1
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8010aba:	6418      	str	r0, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8010abc:	4618      	mov	r0, r3
  hadc1.Init.NbrOfConversion = 6;
 8010abe:	619d      	str	r5, [r3, #24]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8010ac0:	62dc      	str	r4, [r3, #44]	; 0x2c
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8010ac2:	609a      	str	r2, [r3, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8010ac4:	9200      	str	r2, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8010ac6:	9203      	str	r2, [sp, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8010ac8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8010aca:	771a      	strb	r2, [r3, #28]
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8010acc:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8010ace:	60d9      	str	r1, [r3, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8010ad0:	7559      	strb	r1, [r3, #21]
  hadc1.Init.OversamplingMode = ENABLE;
 8010ad2:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8010ad6:	6499      	str	r1, [r3, #72]	; 0x48
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8010ad8:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8010adc:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  ADC_MultiModeTypeDef multimode = {0};
 8010ae0:	e9cd 2201 	strd	r2, r2, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8010ae4:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8010ae8:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8010aec:	e9cd 2208 	strd	r2, r2, [sp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8010af0:	f7f1 f80a 	bl	8001b08 <HAL_ADC_Init>
 8010af4:	2800      	cmp	r0, #0
 8010af6:	d160      	bne.n	8010bba <MX_ADC1_Init+0x122>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8010af8:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8010afa:	4669      	mov	r1, sp
 8010afc:	4830      	ldr	r0, [pc, #192]	; (8010bc0 <MX_ADC1_Init+0x128>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8010afe:	9300      	str	r3, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8010b00:	f7f1 fb1c 	bl	800213c <HAL_ADCEx_MultiModeConfigChannel>
 8010b04:	2800      	cmp	r0, #0
 8010b06:	d155      	bne.n	8010bb4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8010b08:	4b2f      	ldr	r3, [pc, #188]	; (8010bc8 <MX_ADC1_Init+0x130>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8010b0a:	2106      	movs	r1, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8010b0c:	2005      	movs	r0, #5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8010b0e:	f240 74ff 	movw	r4, #2047	; 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8010b12:	2204      	movs	r2, #4
  sConfig.Channel = ADC_CHANNEL_7;
 8010b14:	9303      	str	r3, [sp, #12]
  sConfig.Offset = 0;
 8010b16:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8010b18:	9104      	str	r1, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8010b1a:	9005      	str	r0, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b1c:	a903      	add	r1, sp, #12
 8010b1e:	4828      	ldr	r0, [pc, #160]	; (8010bc0 <MX_ADC1_Init+0x128>)
  sConfig.Offset = 0;
 8010b20:	9308      	str	r3, [sp, #32]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8010b22:	e9cd 4206 	strd	r4, r2, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b26:	f7f0 fa5b 	bl	8000fe0 <HAL_ADC_ConfigChannel>
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	d13f      	bne.n	8010bae <MX_ADC1_Init+0x116>
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_19;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8010b2e:	230c      	movs	r3, #12
  sConfig.Channel = ADC_CHANNEL_19;
 8010b30:	4a26      	ldr	r2, [pc, #152]	; (8010bcc <MX_ADC1_Init+0x134>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b32:	4823      	ldr	r0, [pc, #140]	; (8010bc0 <MX_ADC1_Init+0x128>)
 8010b34:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8010b38:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b3c:	f7f0 fa50 	bl	8000fe0 <HAL_ADC_ConfigChannel>
 8010b40:	bb90      	cbnz	r0, 8010ba8 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8010b42:	4a23      	ldr	r2, [pc, #140]	; (8010bd0 <MX_ADC1_Init+0x138>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8010b44:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b46:	a903      	add	r1, sp, #12
 8010b48:	481d      	ldr	r0, [pc, #116]	; (8010bc0 <MX_ADC1_Init+0x128>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8010b4a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b4e:	f7f0 fa47 	bl	8000fe0 <HAL_ADC_ConfigChannel>
 8010b52:	bb30      	cbnz	r0, 8010ba2 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8010b54:	4a1f      	ldr	r2, [pc, #124]	; (8010bd4 <MX_ADC1_Init+0x13c>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8010b56:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b58:	a903      	add	r1, sp, #12
 8010b5a:	4819      	ldr	r0, [pc, #100]	; (8010bc0 <MX_ADC1_Init+0x128>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8010b5c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b60:	f7f0 fa3e 	bl	8000fe0 <HAL_ADC_ConfigChannel>
 8010b64:	b9d0      	cbnz	r0, 8010b9c <MX_ADC1_Init+0x104>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8010b66:	4a1c      	ldr	r2, [pc, #112]	; (8010bd8 <MX_ADC1_Init+0x140>)
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8010b68:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b6c:	a903      	add	r1, sp, #12
 8010b6e:	4814      	ldr	r0, [pc, #80]	; (8010bc0 <MX_ADC1_Init+0x128>)
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8010b70:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b74:	f7f0 fa34 	bl	8000fe0 <HAL_ADC_ConfigChannel>
 8010b78:	b968      	cbnz	r0, 8010b96 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8010b7a:	4a18      	ldr	r2, [pc, #96]	; (8010bdc <MX_ADC1_Init+0x144>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8010b7c:	f44f 7383 	mov.w	r3, #262	; 0x106
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b80:	a903      	add	r1, sp, #12
 8010b82:	480f      	ldr	r0, [pc, #60]	; (8010bc0 <MX_ADC1_Init+0x128>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8010b84:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010b88:	f7f0 fa2a 	bl	8000fe0 <HAL_ADC_ConfigChannel>
 8010b8c:	b108      	cbz	r0, 8010b92 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8010b8e:	f002 fed7 	bl	8013940 <Error_Handler>
  }

}
 8010b92:	b00b      	add	sp, #44	; 0x2c
 8010b94:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8010b96:	f002 fed3 	bl	8013940 <Error_Handler>
 8010b9a:	e7ee      	b.n	8010b7a <MX_ADC1_Init+0xe2>
    Error_Handler();
 8010b9c:	f002 fed0 	bl	8013940 <Error_Handler>
 8010ba0:	e7e1      	b.n	8010b66 <MX_ADC1_Init+0xce>
    Error_Handler();
 8010ba2:	f002 fecd 	bl	8013940 <Error_Handler>
 8010ba6:	e7d5      	b.n	8010b54 <MX_ADC1_Init+0xbc>
    Error_Handler();
 8010ba8:	f002 feca 	bl	8013940 <Error_Handler>
 8010bac:	e7c9      	b.n	8010b42 <MX_ADC1_Init+0xaa>
    Error_Handler();
 8010bae:	f002 fec7 	bl	8013940 <Error_Handler>
 8010bb2:	e7bc      	b.n	8010b2e <MX_ADC1_Init+0x96>
    Error_Handler();
 8010bb4:	f002 fec4 	bl	8013940 <Error_Handler>
 8010bb8:	e7a6      	b.n	8010b08 <MX_ADC1_Init+0x70>
    Error_Handler();
 8010bba:	f002 fec1 	bl	8013940 <Error_Handler>
 8010bbe:	e79b      	b.n	8010af8 <MX_ADC1_Init+0x60>
 8010bc0:	20000750 	.word	0x20000750
 8010bc4:	40022000 	.word	0x40022000
 8010bc8:	1d500080 	.word	0x1d500080
 8010bcc:	4fb80000 	.word	0x4fb80000
 8010bd0:	3ac04000 	.word	0x3ac04000
 8010bd4:	43210000 	.word	0x43210000
 8010bd8:	3ef08000 	.word	0x3ef08000
 8010bdc:	21800100 	.word	0x21800100

08010be0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8010be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
  if(adcHandle->Instance==ADC1)
 8010be4:	4b46      	ldr	r3, [pc, #280]	; (8010d00 <HAL_ADC_MspInit+0x120>)
{
 8010be6:	b08f      	sub	sp, #60	; 0x3c
  if(adcHandle->Instance==ADC1)
 8010be8:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010bea:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8010bec:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010bee:	940d      	str	r4, [sp, #52]	; 0x34
 8010bf0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8010bf4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8010bf8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8010bfc:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(adcHandle->Instance==ADC1)
 8010c00:	d002      	beq.n	8010c08 <HAL_ADC_MspInit+0x28>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8010c02:	b00f      	add	sp, #60	; 0x3c
 8010c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8010c08:	4b3e      	ldr	r3, [pc, #248]	; (8010d04 <HAL_ADC_MspInit+0x124>)
 8010c0a:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8010c0c:	2022      	movs	r0, #34	; 0x22
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010c0e:	2703      	movs	r7, #3
    __HAL_RCC_ADC12_CLK_ENABLE();
 8010c10:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010c14:	a909      	add	r1, sp, #36	; 0x24
    hdma_adc1.Instance = DMA2_Stream0;
 8010c16:	4d3c      	ldr	r5, [pc, #240]	; (8010d08 <HAL_ADC_MspInit+0x128>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8010c18:	f042 0220 	orr.w	r2, r2, #32
 8010c1c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8010c20:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8010c24:	f002 0220 	and.w	r2, r2, #32
 8010c28:	9201      	str	r2, [sp, #4]
 8010c2a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010c2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010c30:	f042 0204 	orr.w	r2, r2, #4
 8010c34:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8010c38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010c3c:	f002 0204 	and.w	r2, r2, #4
 8010c40:	9202      	str	r2, [sp, #8]
 8010c42:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010c48:	f042 0201 	orr.w	r2, r2, #1
 8010c4c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8010c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8010c54:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c56:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010c5a:	482c      	ldr	r0, [pc, #176]	; (8010d0c <HAL_ADC_MspInit+0x12c>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010c5c:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c5e:	9303      	str	r3, [sp, #12]
 8010c60:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010c62:	f7f4 faa9 	bl	80051b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5 
 8010c66:	23ad      	movs	r3, #173	; 0xad
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c68:	a909      	add	r1, sp, #36	; 0x24
 8010c6a:	4829      	ldr	r0, [pc, #164]	; (8010d10 <HAL_ADC_MspInit+0x130>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5 
 8010c6c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c6e:	e9cd 740a 	strd	r7, r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c72:	f7f4 faa1 	bl	80051b8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8010c76:	4b27      	ldr	r3, [pc, #156]	; (8010d14 <HAL_ADC_MspInit+0x134>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8010c78:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8010c7c:	f04f 0e09 	mov.w	lr, #9
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010c80:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010c84:	f44f 5700 	mov.w	r7, #8192	; 0x2000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8010c88:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8010c8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_adc1.Instance = DMA2_Stream0;
 8010c90:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8010c92:	2304      	movs	r3, #4
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8010c94:	6128      	str	r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8010c96:	4628      	mov	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010c98:	60ac      	str	r4, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8010c9a:	60ec      	str	r4, [r5, #12]
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8010c9c:	632c      	str	r4, [r5, #48]	; 0x30
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8010c9e:	f8c5 e004 	str.w	lr, [r5, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8010ca2:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8010ca4:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010ca8:	e9c5 c705 	strd	ip, r7, [r5, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8010cac:	e9c5 1207 	strd	r1, r2, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8010cb0:	f7f1 fcea 	bl	8002688 <HAL_DMA_Init>
 8010cb4:	b9f0      	cbnz	r0, 8010cf4 <HAL_ADC_MspInit+0x114>
    pSyncConfig.EventEnable = ENABLE;
 8010cb6:	2301      	movs	r3, #1
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8010cb8:	f04f 0806 	mov.w	r8, #6
 8010cbc:	f44f 3900 	mov.w	r9, #131072	; 0x20000
    pSyncConfig.SyncEnable = DISABLE;
 8010cc0:	2200      	movs	r2, #0
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc1, &pSyncConfig) != HAL_OK)
 8010cc2:	a904      	add	r1, sp, #16
 8010cc4:	4810      	ldr	r0, [pc, #64]	; (8010d08 <HAL_ADC_MspInit+0x128>)
    pSyncConfig.SyncEnable = DISABLE;
 8010cc6:	f88d 2018 	strb.w	r2, [sp, #24]
    pSyncConfig.EventEnable = ENABLE;
 8010cca:	f88d 3019 	strb.w	r3, [sp, #25]
    pSyncConfig.RequestNumber = 1;
 8010cce:	9307      	str	r3, [sp, #28]
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8010cd0:	e9cd 8904 	strd	r8, r9, [sp, #16]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc1, &pSyncConfig) != HAL_OK)
 8010cd4:	f7f3 fde8 	bl	80048a8 <HAL_DMAEx_ConfigMuxSync>
 8010cd8:	b978      	cbnz	r0, 8010cfa <HAL_ADC_MspInit+0x11a>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8010cda:	2200      	movs	r2, #0
 8010cdc:	2105      	movs	r1, #5
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8010cde:	64f5      	str	r5, [r6, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8010ce0:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8010ce2:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8010ce4:	f7f1 fb04 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8010ce8:	2012      	movs	r0, #18
 8010cea:	f7f1 fb47 	bl	800237c <HAL_NVIC_EnableIRQ>
}
 8010cee:	b00f      	add	sp, #60	; 0x3c
 8010cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8010cf4:	f002 fe24 	bl	8013940 <Error_Handler>
 8010cf8:	e7dd      	b.n	8010cb6 <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 8010cfa:	f002 fe21 	bl	8013940 <Error_Handler>
 8010cfe:	e7ec      	b.n	8010cda <HAL_ADC_MspInit+0xfa>
 8010d00:	40022000 	.word	0x40022000
 8010d04:	58024400 	.word	0x58024400
 8010d08:	200007b4 	.word	0x200007b4
 8010d0c:	58020800 	.word	0x58020800
 8010d10:	58020000 	.word	0x58020000
 8010d14:	40020410 	.word	0x40020410

08010d18 <audioFrame>:
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

void audioFrame(uint16_t buffer_offset)
{
 8010d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d1c:	ed2d 8b04 	vpush	{d8-d9}
 8010d20:	b087      	sub	sp, #28
 8010d22:	4681      	mov	r9, r0
	//int32_t current_sample;
	uint32_t clipCatcher = 0;

	//tempCount5 = DWT->CYCCNT;

	buttonCheck();
 8010d24:	f00b fef0 	bl	801cb08 <buttonCheck>

	adcCheck();
 8010d28:	f00c fa3a 	bl	801d1a0 <adcCheck>

	// if the USB write pointer has advanced (indicating unread data is in the buffer),
	// or the overflow bit is set, meaning that the write pointer wrapped around and the read pointer hasn't caught up to it yet
	// then process that new data this frame
	if ((myUSB_FIFO_overflowBit) || (myUSB_FIFO_writePointer > myUSB_FIFO_readPointer))
 8010d2c:	4bbb      	ldr	r3, [pc, #748]	; (801101c <audioFrame+0x304>)
 8010d2e:	781b      	ldrb	r3, [r3, #0]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	f040 816f 	bne.w	8011014 <audioFrame+0x2fc>
 8010d36:	4bba      	ldr	r3, [pc, #744]	; (8011020 <audioFrame+0x308>)
 8010d38:	4aba      	ldr	r2, [pc, #744]	; (8011024 <audioFrame+0x30c>)
 8010d3a:	881b      	ldrh	r3, [r3, #0]
 8010d3c:	8812      	ldrh	r2, [r2, #0]
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	f0c0 8168 	bcc.w	8011014 <audioFrame+0x2fc>
	{
		ProcessReceivedMidiDatas();
	}


	if (!loadingPreset)
 8010d44:	4bb8      	ldr	r3, [pc, #736]	; (8011028 <audioFrame+0x310>)
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d154      	bne.n	8010df6 <audioFrame+0xde>
 8010d4c:	4cb7      	ldr	r4, [pc, #732]	; (801102c <audioFrame+0x314>)
 8010d4e:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8011074 <audioFrame+0x35c>
 8010d52:	4627      	mov	r7, r4
 8010d54:	f104 0518 	add.w	r5, r4, #24
 8010d58:	f8df b31c 	ldr.w	fp, [pc, #796]	; 8011078 <audioFrame+0x360>
 8010d5c:	4eb4      	ldr	r6, [pc, #720]	; (8011030 <audioFrame+0x318>)
	{

		for (int i = 0; i < NUM_ADC_CHANNELS; i++)
		{
			smoothedADC[i] = tExpSmooth_tick(&adc[i]);
 8010d5e:	4640      	mov	r0, r8
 8010d60:	f108 0804 	add.w	r8, r8, #4
 8010d64:	f011 fb46 	bl	80223f4 <tExpSmooth_tick>
			for (int i = 0; i < KNOB_PAGE_SIZE; i++)
			{
				presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)] = smoothedADC[i];
 8010d68:	4bb2      	ldr	r3, [pc, #712]	; (8011034 <audioFrame+0x31c>)
			smoothedADC[i] = tExpSmooth_tick(&adc[i]);
 8010d6a:	eca7 0a01 	vstmia	r7!, {s0}
		for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 8010d6e:	42bd      	cmp	r5, r7
				presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)] = smoothedADC[i];
 8010d70:	f893 a000 	ldrb.w	sl, [r3]
 8010d74:	f89b 3000 	ldrb.w	r3, [fp]
 8010d78:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
 8010d7c:	ed94 7a00 	vldr	s14, [r4]
 8010d80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010d84:	edd4 7a01 	vldr	s15, [r4, #4]
 8010d88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8010d8c:	f103 0c01 	add.w	ip, r3, #1
 8010d90:	f103 0002 	add.w	r0, r3, #2
 8010d94:	eb02 0e03 	add.w	lr, r2, r3
 8010d98:	f103 0103 	add.w	r1, r3, #3
 8010d9c:	4494      	add	ip, r2
 8010d9e:	f103 0304 	add.w	r3, r3, #4
 8010da2:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
 8010da6:	4410      	add	r0, r2
 8010da8:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
 8010dac:	4411      	add	r1, r2
 8010dae:	ed8e 7a00 	vstr	s14, [lr]
 8010db2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8010db6:	4413      	add	r3, r2
 8010db8:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8010dbc:	edcc 7a00 	vstr	s15, [ip]
 8010dc0:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8010dc4:	f8c0 e000 	str.w	lr, [r0]
 8010dc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010dcc:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8010dd0:	6920      	ldr	r0, [r4, #16]
 8010dd2:	f8c1 c000 	str.w	ip, [r1]
 8010dd6:	6018      	str	r0, [r3, #0]
		for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 8010dd8:	d1c1      	bne.n	8010d5e <audioFrame+0x46>
			}
		}


		if (cvAddParam[currentPreset] >= 0)
 8010dda:	4b97      	ldr	r3, [pc, #604]	; (8011038 <audioFrame+0x320>)
 8010ddc:	f913 300a 	ldrsb.w	r3, [r3, sl]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	db04      	blt.n	8010dee <audioFrame+0xd6>
		{
			presetKnobValues[currentPreset][cvAddParam[currentPreset]] = smoothedADC[5];
 8010de4:	441a      	add	r2, r3
 8010de6:	6963      	ldr	r3, [r4, #20]
 8010de8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8010dec:	6013      	str	r3, [r2, #0]
		}

		frameFunctions[currentPreset]();
 8010dee:	4b93      	ldr	r3, [pc, #588]	; (801103c <audioFrame+0x324>)
 8010df0:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 8010df4:	4798      	blx	r3
	//if the codec isn't ready, keep the buffer as all zeros
	//otherwise, start computing audio!

	bufferCleared = TRUE;

	if (codecReady)
 8010df6:	4b92      	ldr	r3, [pc, #584]	; (8011040 <audioFrame+0x328>)
	bufferCleared = TRUE;
 8010df8:	2201      	movs	r2, #1
 8010dfa:	4992      	ldr	r1, [pc, #584]	; (8011044 <audioFrame+0x32c>)
	if (codecReady)
 8010dfc:	781b      	ldrb	r3, [r3, #0]
	bufferCleared = TRUE;
 8010dfe:	700a      	strb	r2, [r1, #0]
	if (codecReady)
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	f000 813f 	beq.w	8011084 <audioFrame+0x36c>
 8010e06:	eb09 0402 	add.w	r4, r9, r2
	uint32_t clipCatcher = 0;
 8010e0a:	2500      	movs	r5, #0
 8010e0c:	f8df 826c 	ldr.w	r8, [pc, #620]	; 801107c <audioFrame+0x364>
 8010e10:	4b85      	ldr	r3, [pc, #532]	; (8011028 <audioFrame+0x310>)
 8010e12:	00a4      	lsls	r4, r4, #2
 8010e14:	9501      	str	r5, [sp, #4]
 8010e16:	f508 6b00 	add.w	fp, r8, #2048	; 0x800
 8010e1a:	7819      	ldrb	r1, [r3, #0]
	{

		for (i = 0; i < (HALF_BUFFER_SIZE); i += 2)
		{
			float theSamples[2];
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8010e1c:	ed9f 8a8a 	vldr	s16, [pc, #552]	; 8011048 <audioFrame+0x330>
	//uint32_t tempCount5 = DWT->CYCCNT;

	//cycleCountVals[1][2] = 0;


	if ((samples[1] >= 0.999999f) || (samples[1] <= -0.999999f))
 8010e20:	eddf 9a8a 	vldr	s19, [pc, #552]	; 801104c <audioFrame+0x334>
 8010e24:	ed9f 9a8a 	vldr	s18, [pc, #552]	; 8011050 <audioFrame+0x338>
	{
		clips |= 2;
	}


	uint16_t current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[0], LEAF_clip(-1.0f, samples[1], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8010e28:	eddf 8a8a 	vldr	s17, [pc, #552]	; 8011054 <audioFrame+0x33c>
 8010e2c:	e00b      	b.n	8010e46 <audioFrame+0x12e>
	if (loadingPreset)
 8010e2e:	2300      	movs	r3, #0
 8010e30:	461a      	mov	r2, r3
		for (i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 8010e32:	3502      	adds	r5, #2
			audioOutBuffer[buffer_offset + i] = (int32_t)(theSamples[1] * TWO_TO_23);
 8010e34:	f84b 2026 	str.w	r2, [fp, r6, lsl #2]
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(theSamples[0] * TWO_TO_23);
 8010e38:	f84b 3004 	str.w	r3, [fp, r4]
 8010e3c:	3408      	adds	r4, #8
		for (i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 8010e3e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8010e42:	f000 8167 	beq.w	8011114 <audioFrame+0x3fc>
 8010e46:	eb05 0609 	add.w	r6, r5, r9
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8010e4a:	f858 2004 	ldr.w	r2, [r8, r4]
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8010e4e:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8010e52:	0212      	lsls	r2, r2, #8
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8010e54:	021b      	lsls	r3, r3, #8
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8010e56:	ee00 2a90 	vmov	s1, r2
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8010e5a:	ee07 3a90 	vmov	s15, r3
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8010e5e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8010e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8010e66:	ee60 0a88 	vmul.f32	s1, s1, s16
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8010e6a:	ee67 7a88 	vmul.f32	s15, s15, s16
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 8010e6e:	edcd 0a05 	vstr	s1, [sp, #20]
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 8010e72:	edcd 7a04 	vstr	s15, [sp, #16]
	if (loadingPreset)
 8010e76:	2900      	cmp	r1, #0
 8010e78:	d1d9      	bne.n	8010e2e <audioFrame+0x116>
	if ((samples[1] >= 0.999999f) || (samples[1] <= -0.999999f))
 8010e7a:	eef4 0ae9 	vcmpe.f32	s1, s19
 8010e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e82:	eef4 0ac9 	vcmpe.f32	s1, s18
 8010e86:	bf94      	ite	ls
 8010e88:	2201      	movls	r2, #1
 8010e8a:	2200      	movhi	r2, #0
 8010e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if ((samples[0] >= 0.999999f) || (samples[0] <= -0.999999f))
 8010e90:	eef4 7ac9 	vcmpe.f32	s15, s18
	uint32_t clips = 0;
 8010e94:	bfa8      	it	ge
 8010e96:	f042 0201 	orrge.w	r2, r2, #1
	if ((samples[0] >= 0.999999f) || (samples[0] <= -0.999999f))
 8010e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e9e:	da04      	bge.n	8010eaa <audioFrame+0x192>
 8010ea0:	eef4 7a69 	vcmp.f32	s15, s19
 8010ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea8:	d801      	bhi.n	8010eae <audioFrame+0x196>
		clips |= 2;
 8010eaa:	f042 0202 	orr.w	r2, r2, #2
	uint16_t current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[0], LEAF_clip(-1.0f, samples[1], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8010eae:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8010eb2:	9203      	str	r2, [sp, #12]
 8010eb4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8010eb8:	4f67      	ldr	r7, [pc, #412]	; (8011058 <audioFrame+0x340>)
 8010eba:	f012 ff25 	bl	8023d08 <LEAF_clip>
 8010ebe:	4867      	ldr	r0, [pc, #412]	; (801105c <audioFrame+0x344>)
 8010ec0:	f00d fc52 	bl	801e768 <tEnvelopeFollower_tick>
 8010ec4:	ee20 0a28 	vmul.f32	s0, s0, s17
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, current_env);
 8010ec8:	4865      	ldr	r0, [pc, #404]	; (8011060 <audioFrame+0x348>)
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[2], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8010eca:	a904      	add	r1, sp, #16
 8010ecc:	eddd 0a04 	vldr	s1, [sp, #16]
 8010ed0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	uint16_t current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[0], LEAF_clip(-1.0f, samples[1], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8010ed4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, current_env);
 8010ed8:	6800      	ldr	r0, [r0, #0]
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[2], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8010eda:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8010ede:	9102      	str	r1, [sp, #8]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, current_env);
 8010ee0:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8011080 <audioFrame+0x368>
	uint16_t current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[0], LEAF_clip(-1.0f, samples[1], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8010ee4:	ee17 3a90 	vmov	r3, s15
 8010ee8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010eec:	edd3 7a00 	vldr	s15, [r3]
 8010ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, current_env);
 8010ef4:	ee17 3a90 	vmov	r3, s15
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	6383      	str	r3, [r0, #56]	; 0x38
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[2], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8010efc:	f012 ff04 	bl	8023d08 <LEAF_clip>
 8010f00:	4858      	ldr	r0, [pc, #352]	; (8011064 <audioFrame+0x34c>)
 8010f02:	f00d fc31 	bl	801e768 <tEnvelopeFollower_tick>
 8010f06:	ee20 0a28 	vmul.f32	s0, s0, s17

	tickFunctions[currentPreset](samples);
 8010f0a:	9902      	ldr	r1, [sp, #8]
 8010f0c:	4b49      	ldr	r3, [pc, #292]	; (8011034 <audioFrame+0x31c>)
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[2], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8010f0e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
	tickFunctions[currentPreset](samples);
 8010f12:	4608      	mov	r0, r1
 8010f14:	f893 e000 	ldrb.w	lr, [r3]
 8010f18:	4b53      	ldr	r3, [pc, #332]	; (8011068 <audioFrame+0x350>)
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[2], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8010f1a:	ee17 1a90 	vmov	r1, s15
 8010f1e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8010f22:	edd1 7a00 	vldr	s15, [r1]
 8010f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, current_env);
 8010f2a:	ee17 2a90 	vmov	r2, s15
 8010f2e:	b291      	uxth	r1, r2
 8010f30:	f8da 2000 	ldr.w	r2, [sl]
 8010f34:	6391      	str	r1, [r2, #56]	; 0x38
	tickFunctions[currentPreset](samples);
 8010f36:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 8010f3a:	4798      	blx	r3

	//now the samples array is output
	if ((samples[1] >= 0.999999f) || (samples[1] <= -0.999999f))
 8010f3c:	eddd 0a05 	vldr	s1, [sp, #20]
 8010f40:	9a03      	ldr	r2, [sp, #12]
 8010f42:	eef4 0ac9 	vcmpe.f32	s1, s18
 8010f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4a:	da04      	bge.n	8010f56 <audioFrame+0x23e>
 8010f4c:	eef4 0a69 	vcmp.f32	s1, s19
 8010f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f54:	d801      	bhi.n	8010f5a <audioFrame+0x242>
	{
		clips |= 4;
 8010f56:	f042 0204 	orr.w	r2, r2, #4
	}

	if ((samples[0] >= 0.999999f) || (samples[0] <= -0.999999f))
 8010f5a:	eddd 7a04 	vldr	s15, [sp, #16]
 8010f5e:	eef4 7ae9 	vcmpe.f32	s15, s19
 8010f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f66:	d904      	bls.n	8010f72 <audioFrame+0x25a>
 8010f68:	eef4 7a49 	vcmp.f32	s15, s18
 8010f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f70:	db01      	blt.n	8010f76 <audioFrame+0x25e>
	{
		clips |= 8;
 8010f72:	f042 0208 	orr.w	r2, r2, #8
 8010f76:	9b01      	ldr	r3, [sp, #4]
	}
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[1], LEAF_clip(-1.0f, samples[1], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8010f78:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8010f7c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8010f80:	4313      	orrs	r3, r2
 8010f82:	9301      	str	r3, [sp, #4]
 8010f84:	f012 fec0 	bl	8023d08 <LEAF_clip>
 8010f88:	4838      	ldr	r0, [pc, #224]	; (801106c <audioFrame+0x354>)
 8010f8a:	f00d fbed 	bl	801e768 <tEnvelopeFollower_tick>
 8010f8e:	ee60 7a28 	vmul.f32	s15, s0, s17
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, current_env);
 8010f92:	f8da 3000 	ldr.w	r3, [sl]
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[3], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8010f96:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8010f9a:	eddd 0a04 	vldr	s1, [sp, #16]
 8010f9e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[1], LEAF_clip(-1.0f, samples[1], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8010fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fa6:	ee17 2a90 	vmov	r2, s15
 8010faa:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8010fae:	edd2 7a00 	vldr	s15, [r2]
 8010fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, current_env);
 8010fb6:	ee17 2a90 	vmov	r2, s15
 8010fba:	b292      	uxth	r2, r2
 8010fbc:	63da      	str	r2, [r3, #60]	; 0x3c
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[3], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8010fbe:	f012 fea3 	bl	8023d08 <LEAF_clip>
 8010fc2:	482b      	ldr	r0, [pc, #172]	; (8011070 <audioFrame+0x358>)
 8010fc4:	f00d fbd0 	bl	801e768 <tEnvelopeFollower_tick>
 8010fc8:	ee20 0a28 	vmul.f32	s0, s0, s17
 8010fcc:	4b16      	ldr	r3, [pc, #88]	; (8011028 <audioFrame+0x310>)
 8010fce:	ed9d 7a05 	vldr	s14, [sp, #20]
 8010fd2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8010fd6:	7819      	ldrb	r1, [r3, #0]
 8010fd8:	eddd 7a04 	vldr	s15, [sp, #16]
 8010fdc:	eef0 6a47 	vmov.f32	s13, s14
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, current_env);
 8010fe0:	f8da c000 	ldr.w	ip, [sl]
	current_env = atodbTable[(uint32_t)(tEnvelopeFollower_tick(&LED_envelope[3], LEAF_clip(-1.0f, samples[0], 1.0f)) * ATODB_TABLE_SIZE_MINUS_ONE)];
 8010fe4:	ee10 3a10 	vmov	r3, s0
 8010fe8:	eeb0 7a67 	vmov.f32	s14, s15
 8010fec:	eefe 6ae4 	vcvt.s32.f32	s13, s13, #23
 8010ff0:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8010ff4:	eebe 7ae4 	vcvt.s32.f32	s14, s14, #23
 8010ff8:	edd7 7a00 	vldr	s15, [r7]
 8010ffc:	ee16 2a90 	vmov	r2, s13
 8011000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011004:	ee17 3a10 	vmov	r3, s14
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, current_env);
 8011008:	ee17 0a90 	vmov	r0, s15
 801100c:	b280      	uxth	r0, r0
 801100e:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
 8011012:	e70e      	b.n	8010e32 <audioFrame+0x11a>
		ProcessReceivedMidiDatas();
 8011014:	f7ff fcb0 	bl	8010978 <ProcessReceivedMidiDatas>
 8011018:	e694      	b.n	8010d44 <audioFrame+0x2c>
 801101a:	bf00      	nop
 801101c:	2000069a 	.word	0x2000069a
 8011020:	20000698 	.word	0x20000698
 8011024:	2000069c 	.word	0x2000069c
 8011028:	20000695 	.word	0x20000695
 801102c:	20018864 	.word	0x20018864
 8011030:	20002d50 	.word	0x20002d50
 8011034:	20000694 	.word	0x20000694
 8011038:	20018978 	.word	0x20018978
 801103c:	20000918 	.word	0x20000918
 8011040:	200004ec 	.word	0x200004ec
 8011044:	2000000c 	.word	0x2000000c
 8011048:	2ffffff6 	.word	0x2ffffff6
 801104c:	bf7fffef 	.word	0xbf7fffef
 8011050:	3f7fffef 	.word	0x3f7fffef
 8011054:	43ff8000 	.word	0x43ff8000
 8011058:	20000970 	.word	0x20000970
 801105c:	20000960 	.word	0x20000960
 8011060:	200186c0 	.word	0x200186c0
 8011064:	20000968 	.word	0x20000968
 8011068:	20000834 	.word	0x20000834
 801106c:	20000964 	.word	0x20000964
 8011070:	2000096c 	.word	0x2000096c
 8011074:	20018838 	.word	0x20018838
 8011078:	20000696 	.word	0x20000696
 801107c:	30000080 	.word	0x30000080
 8011080:	20018680 	.word	0x20018680
	uint32_t clipCatcher = 0;
 8011084:	9301      	str	r3, [sp, #4]
		numBuffersCleared++;
 8011086:	494b      	ldr	r1, [pc, #300]	; (80111b4 <audioFrame+0x49c>)
		if (numBuffersCleared >= numBuffersToClearOnLoad)
 8011088:	4a4b      	ldr	r2, [pc, #300]	; (80111b8 <audioFrame+0x4a0>)
		numBuffersCleared++;
 801108a:	684b      	ldr	r3, [r1, #4]
		if (numBuffersCleared >= numBuffersToClearOnLoad)
 801108c:	6852      	ldr	r2, [r2, #4]
		numBuffersCleared++;
 801108e:	3301      	adds	r3, #1
		if (numBuffersCleared >= numBuffersToClearOnLoad)
 8011090:	4293      	cmp	r3, r2
		numBuffersCleared++;
 8011092:	604b      	str	r3, [r1, #4]
		if (numBuffersCleared >= numBuffersToClearOnLoad)
 8011094:	da48      	bge.n	8011128 <audioFrame+0x410>
 8011096:	4d49      	ldr	r5, [pc, #292]	; (80111bc <audioFrame+0x4a4>)
	uint32_t clipCatcher = 0;
 8011098:	2400      	movs	r4, #0
			clipCounter[i] = 80;
 801109a:	2750      	movs	r7, #80	; 0x50
			clipHappened[i] = 0;
 801109c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80110a0:	f105 0810 	add.w	r8, r5, #16
 80110a4:	f105 0614 	add.w	r6, r5, #20
		if ((clipCatcher >> i) & 1)
 80110a8:	fa29 f304 	lsr.w	r3, r9, r4
 80110ac:	07db      	lsls	r3, r3, #31
 80110ae:	d51c      	bpl.n	80110ea <audioFrame+0x3d2>
			switch (i)
 80110b0:	2c02      	cmp	r4, #2
 80110b2:	d06f      	beq.n	8011194 <audioFrame+0x47c>
 80110b4:	2c03      	cmp	r4, #3
 80110b6:	d069      	beq.n	801118c <audioFrame+0x474>
 80110b8:	2c01      	cmp	r4, #1
 80110ba:	d063      	beq.n	8011184 <audioFrame+0x46c>
					setLED_leftin_clip(1);
 80110bc:	2001      	movs	r0, #1
 80110be:	f002 fcc7 	bl	8013a50 <setLED_leftin_clip>
			clipped[i] = 1;
 80110c2:	2101      	movs	r1, #1
			clipHappened[i] = 0;
 80110c4:	2200      	movs	r2, #0
 80110c6:	00a3      	lsls	r3, r4, #2
		if ((clipCounter[i] > 0) && (clipped[i] == 1))
 80110c8:	2050      	movs	r0, #80	; 0x50
			clipCounter[i] = 80;
 80110ca:	f845 7024 	str.w	r7, [r5, r4, lsl #2]
			clipped[i] = 1;
 80110ce:	f808 1004 	strb.w	r1, [r8, r4]
			clipHappened[i] = 0;
 80110d2:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
			clipCounter[i]--;
 80110d6:	3801      	subs	r0, #1
 80110d8:	50e8      	str	r0, [r5, r3]
	for (int i = 0; i < 4; i++)
 80110da:	3401      	adds	r4, #1
 80110dc:	2c04      	cmp	r4, #4
 80110de:	d1e3      	bne.n	80110a8 <audioFrame+0x390>
}
 80110e0:	b007      	add	sp, #28
 80110e2:	ecbd 8b04 	vpop	{d8-d9}
 80110e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((clipCounter[i] > 0) && (clipped[i] == 1))
 80110ea:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80110ee:	00a3      	lsls	r3, r4, #2
 80110f0:	f818 2004 	ldrb.w	r2, [r8, r4]
 80110f4:	2800      	cmp	r0, #0
 80110f6:	d15a      	bne.n	80111ae <audioFrame+0x496>
		else if ((clipCounter[i] == 0) && (clipped[i] == 1))
 80110f8:	2a01      	cmp	r2, #1
 80110fa:	d1ee      	bne.n	80110da <audioFrame+0x3c2>
			switch (i)
 80110fc:	2c02      	cmp	r4, #2
 80110fe:	d04d      	beq.n	801119c <audioFrame+0x484>
 8011100:	2c03      	cmp	r4, #3
 8011102:	d051      	beq.n	80111a8 <audioFrame+0x490>
 8011104:	2c01      	cmp	r4, #1
 8011106:	d04c      	beq.n	80111a2 <audioFrame+0x48a>
					setLED_leftin_clip(0);
 8011108:	f002 fca2 	bl	8013a50 <setLED_leftin_clip>
			clipped[i] = 0;
 801110c:	2300      	movs	r3, #0
 801110e:	f808 3004 	strb.w	r3, [r8, r4]
 8011112:	e7e2      	b.n	80110da <audioFrame+0x3c2>
			bufferCleared = 0;
 8011114:	4b28      	ldr	r3, [pc, #160]	; (80111b8 <audioFrame+0x4a0>)
		if (!loadingPreset)
 8011116:	2900      	cmp	r1, #0
 8011118:	d032      	beq.n	8011180 <audioFrame+0x468>
	if (bufferCleared)
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d1b2      	bne.n	8011086 <audioFrame+0x36e>
	else numBuffersCleared = 0;
 8011120:	2300      	movs	r3, #0
 8011122:	4a24      	ldr	r2, [pc, #144]	; (80111b4 <audioFrame+0x49c>)
 8011124:	6053      	str	r3, [r2, #4]
 8011126:	e7b6      	b.n	8011096 <audioFrame+0x37e>
			if (loadingPreset)
 8011128:	4b25      	ldr	r3, [pc, #148]	; (80111c0 <audioFrame+0x4a8>)
			numBuffersCleared = numBuffersToClearOnLoad;
 801112a:	604a      	str	r2, [r1, #4]
			if (loadingPreset)
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d0b1      	beq.n	8011096 <audioFrame+0x37e>
				if (previousPreset != PresetNil)
 8011132:	4b24      	ldr	r3, [pc, #144]	; (80111c4 <audioFrame+0x4ac>)
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	2b12      	cmp	r3, #18
 8011138:	d003      	beq.n	8011142 <audioFrame+0x42a>
					freeFunctions[previousPreset]();
 801113a:	4a23      	ldr	r2, [pc, #140]	; (80111c8 <audioFrame+0x4b0>)
 801113c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011140:	4798      	blx	r3
				setLED_A(0);
 8011142:	2000      	movs	r0, #0
				knobPage = 0;
 8011144:	4604      	mov	r4, r0
				setLED_A(0);
 8011146:	f002 fc3b 	bl	80139c0 <setLED_A>
				setLED_B(0);
 801114a:	4620      	mov	r0, r4
 801114c:	f002 fc46 	bl	80139dc <setLED_B>
				setLED_C(0);
 8011150:	4620      	mov	r0, r4
 8011152:	f002 fc51 	bl	80139f8 <setLED_C>
				setLED_Edit(0);
 8011156:	4620      	mov	r0, r4
 8011158:	f002 fbf6 	bl	8013948 <setLED_Edit>
				setLED_1(0);
 801115c:	4620      	mov	r0, r4
 801115e:	f002 fc0f 	bl	8013980 <setLED_1>
				knobPage = 0;
 8011162:	4b1a      	ldr	r3, [pc, #104]	; (80111cc <audioFrame+0x4b4>)
 8011164:	701c      	strb	r4, [r3, #0]
				resetKnobValues();
 8011166:	f00c f913 	bl	801d390 <resetKnobValues>
				allocFunctions[currentPreset]();
 801116a:	4b19      	ldr	r3, [pc, #100]	; (80111d0 <audioFrame+0x4b8>)
				leaf.clearOnAllocation = 0;
 801116c:	4919      	ldr	r1, [pc, #100]	; (80111d4 <audioFrame+0x4bc>)
				allocFunctions[currentPreset]();
 801116e:	781a      	ldrb	r2, [r3, #0]
 8011170:	4b19      	ldr	r3, [pc, #100]	; (80111d8 <audioFrame+0x4c0>)
				leaf.clearOnAllocation = 0;
 8011172:	614c      	str	r4, [r1, #20]
				allocFunctions[currentPreset]();
 8011174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011178:	4798      	blx	r3
				loadingPreset = 0;
 801117a:	4b11      	ldr	r3, [pc, #68]	; (80111c0 <audioFrame+0x4a8>)
 801117c:	701c      	strb	r4, [r3, #0]
 801117e:	e78a      	b.n	8011096 <audioFrame+0x37e>
			bufferCleared = 0;
 8011180:	7019      	strb	r1, [r3, #0]
 8011182:	e7cd      	b.n	8011120 <audioFrame+0x408>
					setLED_rightin_clip(1);
 8011184:	4620      	mov	r0, r4
 8011186:	f002 fc71 	bl	8013a6c <setLED_rightin_clip>
					break;
 801118a:	e79a      	b.n	80110c2 <audioFrame+0x3aa>
					setLED_rightout_clip(1);
 801118c:	2001      	movs	r0, #1
 801118e:	f002 fc51 	bl	8013a34 <setLED_rightout_clip>
					break;
 8011192:	e796      	b.n	80110c2 <audioFrame+0x3aa>
					setLED_leftout_clip(1);
 8011194:	2001      	movs	r0, #1
 8011196:	f002 fc3f 	bl	8013a18 <setLED_leftout_clip>
					break;
 801119a:	e792      	b.n	80110c2 <audioFrame+0x3aa>
					setLED_leftout_clip(0);
 801119c:	f002 fc3c 	bl	8013a18 <setLED_leftout_clip>
					break;
 80111a0:	e7b4      	b.n	801110c <audioFrame+0x3f4>
					setLED_rightin_clip(0);
 80111a2:	f002 fc63 	bl	8013a6c <setLED_rightin_clip>
					break;
 80111a6:	e7b1      	b.n	801110c <audioFrame+0x3f4>
					setLED_rightout_clip(0);
 80111a8:	f002 fc44 	bl	8013a34 <setLED_rightout_clip>
					break;
 80111ac:	e7ae      	b.n	801110c <audioFrame+0x3f4>
		if ((clipCounter[i] > 0) && (clipped[i] == 1))
 80111ae:	2a01      	cmp	r2, #1
 80111b0:	d193      	bne.n	80110da <audioFrame+0x3c2>
 80111b2:	e790      	b.n	80110d6 <audioFrame+0x3be>
 80111b4:	200004ec 	.word	0x200004ec
 80111b8:	2000000c 	.word	0x2000000c
 80111bc:	200004f4 	.word	0x200004f4
 80111c0:	20000695 	.word	0x20000695
 80111c4:	200002dc 	.word	0x200002dc
 80111c8:	20000880 	.word	0x20000880
 80111cc:	20000696 	.word	0x20000696
 80111d0:	20000694 	.word	0x20000694
 80111d4:	200194e0 	.word	0x200194e0
 80111d8:	200008cc 	.word	0x200008cc

080111dc <initFunctionPointers>:
}

*/

void initFunctionPointers(void)
{
 80111dc:	b430      	push	{r4, r5}
	allocFunctions[Vocoder] = SFXVocoderAlloc;
 80111de:	484b      	ldr	r0, [pc, #300]	; (801130c <initFunctionPointers+0x130>)
 80111e0:	4c4b      	ldr	r4, [pc, #300]	; (8011310 <initFunctionPointers+0x134>)
	frameFunctions[Vocoder] = SFXVocoderFrame;
	tickFunctions[Vocoder] = SFXVocoderTick;
	freeFunctions[Vocoder] = SFXVocoderFree;

	allocFunctions[VocoderCh] = SFXVocoderChAlloc;
 80111e2:	4d4c      	ldr	r5, [pc, #304]	; (8011314 <initFunctionPointers+0x138>)
	allocFunctions[Vocoder] = SFXVocoderAlloc;
 80111e4:	6004      	str	r4, [r0, #0]
	frameFunctions[VocoderCh] = SFXVocoderChFrame;
	tickFunctions[VocoderCh] = SFXVocoderChTick;
	freeFunctions[VocoderCh] = SFXVocoderChFree;

	allocFunctions[Pitchshift] = SFXPitchShiftAlloc;
 80111e6:	4b4c      	ldr	r3, [pc, #304]	; (8011318 <initFunctionPointers+0x13c>)
	frameFunctions[Pitchshift] = SFXPitchShiftFrame;
	tickFunctions[Pitchshift] = SFXPitchShiftTick;
	freeFunctions[Pitchshift] = SFXPitchShiftFree;

	allocFunctions[AutotuneMono] = SFXNeartuneAlloc;
 80111e8:	494c      	ldr	r1, [pc, #304]	; (801131c <initFunctionPointers+0x140>)
	frameFunctions[AutotuneMono] = SFXNeartuneFrame;
	tickFunctions[AutotuneMono] = SFXNeartuneTick;
	freeFunctions[AutotuneMono] = SFXNeartuneFree;

	allocFunctions[AutotunePoly] = SFXAutotuneAlloc;
 80111ea:	4a4d      	ldr	r2, [pc, #308]	; (8011320 <initFunctionPointers+0x144>)
	frameFunctions[AutotunePoly] = SFXAutotuneFrame;
	tickFunctions[AutotunePoly] = SFXAutotuneTick;
	freeFunctions[AutotunePoly] = SFXAutotuneFree;

	allocFunctions[SamplerButtonPress] = SFXSamplerBPAlloc;
 80111ec:	4c4d      	ldr	r4, [pc, #308]	; (8011324 <initFunctionPointers+0x148>)
	allocFunctions[VocoderCh] = SFXVocoderChAlloc;
 80111ee:	6045      	str	r5, [r0, #4]
	allocFunctions[Pitchshift] = SFXPitchShiftAlloc;
 80111f0:	6083      	str	r3, [r0, #8]
	allocFunctions[AutotuneMono] = SFXNeartuneAlloc;
 80111f2:	60c1      	str	r1, [r0, #12]
	allocFunctions[AutotunePoly] = SFXAutotuneAlloc;
 80111f4:	6102      	str	r2, [r0, #16]
	frameFunctions[Vocoder] = SFXVocoderFrame;
 80111f6:	494c      	ldr	r1, [pc, #304]	; (8011328 <initFunctionPointers+0x14c>)
	allocFunctions[SamplerButtonPress] = SFXSamplerBPAlloc;
 80111f8:	6144      	str	r4, [r0, #20]
	frameFunctions[SamplerButtonPress] = SFXSamplerBPFrame;
	tickFunctions[SamplerButtonPress] = SFXSamplerBPTick;
	freeFunctions[SamplerButtonPress] = SFXSamplerBPFree;

	allocFunctions[SamplerKeyboard] = SFXSamplerKAlloc;
 80111fa:	4d4c      	ldr	r5, [pc, #304]	; (801132c <initFunctionPointers+0x150>)
	frameFunctions[SamplerKeyboard] = SFXSamplerKFrame;
	tickFunctions[SamplerKeyboard] = SFXSamplerKTick;
	freeFunctions[SamplerKeyboard] = SFXSamplerKFree;

	allocFunctions[SamplerAutoGrab] = SFXSamplerAutoAlloc;
 80111fc:	4b4c      	ldr	r3, [pc, #304]	; (8011330 <initFunctionPointers+0x154>)
	frameFunctions[Vocoder] = SFXVocoderFrame;
 80111fe:	4a4d      	ldr	r2, [pc, #308]	; (8011334 <initFunctionPointers+0x158>)
	frameFunctions[VocoderCh] = SFXVocoderChFrame;
 8011200:	4c4d      	ldr	r4, [pc, #308]	; (8011338 <initFunctionPointers+0x15c>)
	allocFunctions[SamplerKeyboard] = SFXSamplerKAlloc;
 8011202:	6185      	str	r5, [r0, #24]
	allocFunctions[SamplerAutoGrab] = SFXSamplerAutoAlloc;
 8011204:	61c3      	str	r3, [r0, #28]
	frameFunctions[Pitchshift] = SFXPitchShiftFrame;
 8011206:	4d4d      	ldr	r5, [pc, #308]	; (801133c <initFunctionPointers+0x160>)
	frameFunctions[AutotuneMono] = SFXNeartuneFrame;
 8011208:	4b4d      	ldr	r3, [pc, #308]	; (8011340 <initFunctionPointers+0x164>)
	frameFunctions[Vocoder] = SFXVocoderFrame;
 801120a:	600a      	str	r2, [r1, #0]
	frameFunctions[VocoderCh] = SFXVocoderChFrame;
 801120c:	604c      	str	r4, [r1, #4]
	frameFunctions[AutotunePoly] = SFXAutotuneFrame;
 801120e:	4a4d      	ldr	r2, [pc, #308]	; (8011344 <initFunctionPointers+0x168>)
	frameFunctions[SamplerButtonPress] = SFXSamplerBPFrame;
 8011210:	4c4d      	ldr	r4, [pc, #308]	; (8011348 <initFunctionPointers+0x16c>)
	frameFunctions[Pitchshift] = SFXPitchShiftFrame;
 8011212:	608d      	str	r5, [r1, #8]
	frameFunctions[AutotuneMono] = SFXNeartuneFrame;
 8011214:	60cb      	str	r3, [r1, #12]
	frameFunctions[SamplerKeyboard] = SFXSamplerKFrame;
 8011216:	4d4d      	ldr	r5, [pc, #308]	; (801134c <initFunctionPointers+0x170>)
	frameFunctions[SamplerAutoGrab] = SFXSamplerAutoFrame;
 8011218:	4b4d      	ldr	r3, [pc, #308]	; (8011350 <initFunctionPointers+0x174>)
	frameFunctions[AutotunePoly] = SFXAutotuneFrame;
 801121a:	610a      	str	r2, [r1, #16]
	frameFunctions[SamplerButtonPress] = SFXSamplerBPFrame;
 801121c:	614c      	str	r4, [r1, #20]
	tickFunctions[Vocoder] = SFXVocoderTick;
 801121e:	4a4d      	ldr	r2, [pc, #308]	; (8011354 <initFunctionPointers+0x178>)
 8011220:	4c4d      	ldr	r4, [pc, #308]	; (8011358 <initFunctionPointers+0x17c>)
	frameFunctions[SamplerKeyboard] = SFXSamplerKFrame;
 8011222:	618d      	str	r5, [r1, #24]
	frameFunctions[SamplerAutoGrab] = SFXSamplerAutoFrame;
 8011224:	61cb      	str	r3, [r1, #28]
	tickFunctions[VocoderCh] = SFXVocoderChTick;
 8011226:	4d4d      	ldr	r5, [pc, #308]	; (801135c <initFunctionPointers+0x180>)
	tickFunctions[Pitchshift] = SFXPitchShiftTick;
 8011228:	4b4d      	ldr	r3, [pc, #308]	; (8011360 <initFunctionPointers+0x184>)
	tickFunctions[Vocoder] = SFXVocoderTick;
 801122a:	6014      	str	r4, [r2, #0]
	tickFunctions[AutotuneMono] = SFXNeartuneTick;
 801122c:	4c4d      	ldr	r4, [pc, #308]	; (8011364 <initFunctionPointers+0x188>)
	tickFunctions[VocoderCh] = SFXVocoderChTick;
 801122e:	6055      	str	r5, [r2, #4]
	tickFunctions[Pitchshift] = SFXPitchShiftTick;
 8011230:	6093      	str	r3, [r2, #8]
	tickFunctions[AutotunePoly] = SFXAutotuneTick;
 8011232:	4d4d      	ldr	r5, [pc, #308]	; (8011368 <initFunctionPointers+0x18c>)
	tickFunctions[SamplerButtonPress] = SFXSamplerBPTick;
 8011234:	4b4d      	ldr	r3, [pc, #308]	; (801136c <initFunctionPointers+0x190>)
	tickFunctions[AutotuneMono] = SFXNeartuneTick;
 8011236:	60d4      	str	r4, [r2, #12]
	tickFunctions[SamplerKeyboard] = SFXSamplerKTick;
 8011238:	4c4d      	ldr	r4, [pc, #308]	; (8011370 <initFunctionPointers+0x194>)
	tickFunctions[AutotunePoly] = SFXAutotuneTick;
 801123a:	6115      	str	r5, [r2, #16]
	tickFunctions[SamplerButtonPress] = SFXSamplerBPTick;
 801123c:	6153      	str	r3, [r2, #20]
	tickFunctions[SamplerAutoGrab] = SFXSamplerAutoTick;
 801123e:	4d4d      	ldr	r5, [pc, #308]	; (8011374 <initFunctionPointers+0x198>)
	freeFunctions[Vocoder] = SFXVocoderFree;
 8011240:	4b4d      	ldr	r3, [pc, #308]	; (8011378 <initFunctionPointers+0x19c>)
	tickFunctions[SamplerKeyboard] = SFXSamplerKTick;
 8011242:	6194      	str	r4, [r2, #24]
	freeFunctions[Vocoder] = SFXVocoderFree;
 8011244:	4c4d      	ldr	r4, [pc, #308]	; (801137c <initFunctionPointers+0x1a0>)
	tickFunctions[SamplerAutoGrab] = SFXSamplerAutoTick;
 8011246:	61d5      	str	r5, [r2, #28]
	freeFunctions[Vocoder] = SFXVocoderFree;
 8011248:	601c      	str	r4, [r3, #0]
	freeFunctions[VocoderCh] = SFXVocoderChFree;
 801124a:	4d4d      	ldr	r5, [pc, #308]	; (8011380 <initFunctionPointers+0x1a4>)
	freeFunctions[Pitchshift] = SFXPitchShiftFree;
 801124c:	4c4d      	ldr	r4, [pc, #308]	; (8011384 <initFunctionPointers+0x1a8>)
	freeFunctions[VocoderCh] = SFXVocoderChFree;
 801124e:	605d      	str	r5, [r3, #4]
	freeFunctions[Pitchshift] = SFXPitchShiftFree;
 8011250:	609c      	str	r4, [r3, #8]
	freeFunctions[AutotuneMono] = SFXNeartuneFree;
 8011252:	4d4d      	ldr	r5, [pc, #308]	; (8011388 <initFunctionPointers+0x1ac>)
	freeFunctions[AutotunePoly] = SFXAutotuneFree;
 8011254:	4c4d      	ldr	r4, [pc, #308]	; (801138c <initFunctionPointers+0x1b0>)
	freeFunctions[AutotuneMono] = SFXNeartuneFree;
 8011256:	60dd      	str	r5, [r3, #12]
	freeFunctions[AutotunePoly] = SFXAutotuneFree;
 8011258:	611c      	str	r4, [r3, #16]
	freeFunctions[SamplerButtonPress] = SFXSamplerBPFree;
 801125a:	4d4d      	ldr	r5, [pc, #308]	; (8011390 <initFunctionPointers+0x1b4>)
	freeFunctions[SamplerKeyboard] = SFXSamplerKFree;
 801125c:	4c4d      	ldr	r4, [pc, #308]	; (8011394 <initFunctionPointers+0x1b8>)
	freeFunctions[SamplerButtonPress] = SFXSamplerBPFree;
 801125e:	615d      	str	r5, [r3, #20]
	freeFunctions[SamplerKeyboard] = SFXSamplerKFree;
 8011260:	619c      	str	r4, [r3, #24]
	freeFunctions[SamplerAutoGrab] = SFXSamplerAutoFree;
 8011262:	4d4d      	ldr	r5, [pc, #308]	; (8011398 <initFunctionPointers+0x1bc>)

	allocFunctions[Distortion] = SFXDistortionAlloc;
 8011264:	4c4d      	ldr	r4, [pc, #308]	; (801139c <initFunctionPointers+0x1c0>)
	freeFunctions[SamplerAutoGrab] = SFXSamplerAutoFree;
 8011266:	61dd      	str	r5, [r3, #28]
	allocFunctions[Distortion] = SFXDistortionAlloc;
 8011268:	6204      	str	r4, [r0, #32]
	frameFunctions[Distortion] = SFXDistortionFrame;
 801126a:	4d4d      	ldr	r5, [pc, #308]	; (80113a0 <initFunctionPointers+0x1c4>)
	tickFunctions[Distortion] = SFXDistortionTick;
 801126c:	4c4d      	ldr	r4, [pc, #308]	; (80113a4 <initFunctionPointers+0x1c8>)
	frameFunctions[Distortion] = SFXDistortionFrame;
 801126e:	620d      	str	r5, [r1, #32]
	tickFunctions[Distortion] = SFXDistortionTick;
 8011270:	6214      	str	r4, [r2, #32]
	freeFunctions[Distortion] = SFXDistortionFree;
 8011272:	4d4d      	ldr	r5, [pc, #308]	; (80113a8 <initFunctionPointers+0x1cc>)

	allocFunctions[Wavefolder] = SFXWaveFolderAlloc;
 8011274:	4c4d      	ldr	r4, [pc, #308]	; (80113ac <initFunctionPointers+0x1d0>)
	freeFunctions[Distortion] = SFXDistortionFree;
 8011276:	621d      	str	r5, [r3, #32]
	allocFunctions[Wavefolder] = SFXWaveFolderAlloc;
 8011278:	6244      	str	r4, [r0, #36]	; 0x24
	frameFunctions[Wavefolder] = SFXWaveFolderFrame;
 801127a:	4d4d      	ldr	r5, [pc, #308]	; (80113b0 <initFunctionPointers+0x1d4>)
	tickFunctions[Wavefolder] = SFXWaveFolderTick;
 801127c:	4c4d      	ldr	r4, [pc, #308]	; (80113b4 <initFunctionPointers+0x1d8>)
	frameFunctions[Wavefolder] = SFXWaveFolderFrame;
 801127e:	624d      	str	r5, [r1, #36]	; 0x24
	tickFunctions[Wavefolder] = SFXWaveFolderTick;
 8011280:	6254      	str	r4, [r2, #36]	; 0x24
	freeFunctions[Wavefolder] = SFXWaveFolderFree;
 8011282:	4d4d      	ldr	r5, [pc, #308]	; (80113b8 <initFunctionPointers+0x1dc>)

	allocFunctions[BitCrusher] = SFXBitcrusherAlloc;
 8011284:	4c4d      	ldr	r4, [pc, #308]	; (80113bc <initFunctionPointers+0x1e0>)
	freeFunctions[Wavefolder] = SFXWaveFolderFree;
 8011286:	625d      	str	r5, [r3, #36]	; 0x24
	allocFunctions[BitCrusher] = SFXBitcrusherAlloc;
 8011288:	6284      	str	r4, [r0, #40]	; 0x28
	frameFunctions[BitCrusher] = SFXBitcrusherFrame;
 801128a:	4d4d      	ldr	r5, [pc, #308]	; (80113c0 <initFunctionPointers+0x1e4>)
	tickFunctions[BitCrusher] = SFXBitcrusherTick;
 801128c:	4c4d      	ldr	r4, [pc, #308]	; (80113c4 <initFunctionPointers+0x1e8>)
	frameFunctions[BitCrusher] = SFXBitcrusherFrame;
 801128e:	628d      	str	r5, [r1, #40]	; 0x28
	tickFunctions[BitCrusher] = SFXBitcrusherTick;
 8011290:	6294      	str	r4, [r2, #40]	; 0x28
	freeFunctions[BitCrusher] = SFXBitcrusherFree;
 8011292:	4d4d      	ldr	r5, [pc, #308]	; (80113c8 <initFunctionPointers+0x1ec>)

	allocFunctions[Delay] = SFXDelayAlloc;
 8011294:	4c4d      	ldr	r4, [pc, #308]	; (80113cc <initFunctionPointers+0x1f0>)
	freeFunctions[BitCrusher] = SFXBitcrusherFree;
 8011296:	629d      	str	r5, [r3, #40]	; 0x28
	allocFunctions[Delay] = SFXDelayAlloc;
 8011298:	62c4      	str	r4, [r0, #44]	; 0x2c
	frameFunctions[Delay] = SFXDelayFrame;
 801129a:	4d4d      	ldr	r5, [pc, #308]	; (80113d0 <initFunctionPointers+0x1f4>)
	tickFunctions[Delay] = SFXDelayTick;
 801129c:	4c4d      	ldr	r4, [pc, #308]	; (80113d4 <initFunctionPointers+0x1f8>)
	frameFunctions[Delay] = SFXDelayFrame;
 801129e:	62cd      	str	r5, [r1, #44]	; 0x2c
	tickFunctions[Delay] = SFXDelayTick;
 80112a0:	62d4      	str	r4, [r2, #44]	; 0x2c
	freeFunctions[Delay] = SFXDelayFree;
 80112a2:	4d4d      	ldr	r5, [pc, #308]	; (80113d8 <initFunctionPointers+0x1fc>)

	allocFunctions[Reverb] = SFXReverbAlloc;
 80112a4:	4c4d      	ldr	r4, [pc, #308]	; (80113dc <initFunctionPointers+0x200>)
	freeFunctions[Delay] = SFXDelayFree;
 80112a6:	62dd      	str	r5, [r3, #44]	; 0x2c
	allocFunctions[Reverb] = SFXReverbAlloc;
 80112a8:	6304      	str	r4, [r0, #48]	; 0x30
	frameFunctions[Reverb] = SFXReverbFrame;
 80112aa:	4d4d      	ldr	r5, [pc, #308]	; (80113e0 <initFunctionPointers+0x204>)
	tickFunctions[Reverb] = SFXReverbTick;
 80112ac:	4c4d      	ldr	r4, [pc, #308]	; (80113e4 <initFunctionPointers+0x208>)
	frameFunctions[Reverb] = SFXReverbFrame;
 80112ae:	630d      	str	r5, [r1, #48]	; 0x30
	tickFunctions[Reverb] = SFXReverbTick;
 80112b0:	6314      	str	r4, [r2, #48]	; 0x30
	freeFunctions[Reverb] = SFXReverbFree;
 80112b2:	4d4d      	ldr	r5, [pc, #308]	; (80113e8 <initFunctionPointers+0x20c>)

	allocFunctions[Reverb2] = SFXReverb2Alloc;
 80112b4:	4c4d      	ldr	r4, [pc, #308]	; (80113ec <initFunctionPointers+0x210>)
	freeFunctions[Reverb] = SFXReverbFree;
 80112b6:	631d      	str	r5, [r3, #48]	; 0x30
	allocFunctions[Reverb2] = SFXReverb2Alloc;
 80112b8:	6344      	str	r4, [r0, #52]	; 0x34
	frameFunctions[Reverb2] = SFXReverb2Frame;
 80112ba:	4d4d      	ldr	r5, [pc, #308]	; (80113f0 <initFunctionPointers+0x214>)
	tickFunctions[Reverb2] = SFXReverb2Tick;
 80112bc:	4c4d      	ldr	r4, [pc, #308]	; (80113f4 <initFunctionPointers+0x218>)
	frameFunctions[Reverb2] = SFXReverb2Frame;
 80112be:	634d      	str	r5, [r1, #52]	; 0x34
	tickFunctions[Reverb2] = SFXReverb2Tick;
 80112c0:	6354      	str	r4, [r2, #52]	; 0x34
	freeFunctions[Reverb2] = SFXReverb2Free;
 80112c2:	4d4d      	ldr	r5, [pc, #308]	; (80113f8 <initFunctionPointers+0x21c>)

	allocFunctions[LivingString] = SFXLivingStringAlloc;
 80112c4:	4c4d      	ldr	r4, [pc, #308]	; (80113fc <initFunctionPointers+0x220>)
	freeFunctions[Reverb2] = SFXReverb2Free;
 80112c6:	635d      	str	r5, [r3, #52]	; 0x34
	allocFunctions[LivingString] = SFXLivingStringAlloc;
 80112c8:	6384      	str	r4, [r0, #56]	; 0x38
	frameFunctions[LivingString] = SFXLivingStringFrame;
 80112ca:	4d4d      	ldr	r5, [pc, #308]	; (8011400 <initFunctionPointers+0x224>)
	tickFunctions[LivingString] = SFXLivingStringTick;
 80112cc:	4c4d      	ldr	r4, [pc, #308]	; (8011404 <initFunctionPointers+0x228>)
	frameFunctions[LivingString] = SFXLivingStringFrame;
 80112ce:	638d      	str	r5, [r1, #56]	; 0x38
	tickFunctions[LivingString] = SFXLivingStringTick;
 80112d0:	6394      	str	r4, [r2, #56]	; 0x38
	freeFunctions[LivingString] = SFXLivingStringFree;
 80112d2:	4d4d      	ldr	r5, [pc, #308]	; (8011408 <initFunctionPointers+0x22c>)

	allocFunctions[LivingStringSynth] = SFXLivingStringSynthAlloc;
 80112d4:	4c4d      	ldr	r4, [pc, #308]	; (801140c <initFunctionPointers+0x230>)
	freeFunctions[LivingString] = SFXLivingStringFree;
 80112d6:	639d      	str	r5, [r3, #56]	; 0x38
	allocFunctions[LivingStringSynth] = SFXLivingStringSynthAlloc;
 80112d8:	63c4      	str	r4, [r0, #60]	; 0x3c
	frameFunctions[LivingStringSynth] = SFXLivingStringSynthFrame;
 80112da:	4d4d      	ldr	r5, [pc, #308]	; (8011410 <initFunctionPointers+0x234>)
	tickFunctions[LivingStringSynth] = SFXLivingStringSynthTick;
 80112dc:	4c4d      	ldr	r4, [pc, #308]	; (8011414 <initFunctionPointers+0x238>)
	frameFunctions[LivingStringSynth] = SFXLivingStringSynthFrame;
 80112de:	63cd      	str	r5, [r1, #60]	; 0x3c
	tickFunctions[LivingStringSynth] = SFXLivingStringSynthTick;
 80112e0:	63d4      	str	r4, [r2, #60]	; 0x3c
	freeFunctions[LivingStringSynth] = SFXLivingStringSynthFree;
 80112e2:	4d4d      	ldr	r5, [pc, #308]	; (8011418 <initFunctionPointers+0x23c>)

	allocFunctions[ClassicSynth] = SFXClassicSynthAlloc;
 80112e4:	4c4d      	ldr	r4, [pc, #308]	; (801141c <initFunctionPointers+0x240>)
	freeFunctions[LivingStringSynth] = SFXLivingStringSynthFree;
 80112e6:	63dd      	str	r5, [r3, #60]	; 0x3c
	allocFunctions[ClassicSynth] = SFXClassicSynthAlloc;
 80112e8:	6404      	str	r4, [r0, #64]	; 0x40
	frameFunctions[ClassicSynth] = SFXClassicSynthFrame;
 80112ea:	4d4d      	ldr	r5, [pc, #308]	; (8011420 <initFunctionPointers+0x244>)
	tickFunctions[ClassicSynth] = SFXClassicSynthTick;
 80112ec:	4c4d      	ldr	r4, [pc, #308]	; (8011424 <initFunctionPointers+0x248>)
	frameFunctions[ClassicSynth] = SFXClassicSynthFrame;
 80112ee:	640d      	str	r5, [r1, #64]	; 0x40
	tickFunctions[ClassicSynth] = SFXClassicSynthTick;
 80112f0:	6414      	str	r4, [r2, #64]	; 0x40
	freeFunctions[ClassicSynth] = SFXClassicSynthFree;
 80112f2:	4d4d      	ldr	r5, [pc, #308]	; (8011428 <initFunctionPointers+0x24c>)

	allocFunctions[Rhodes] = SFXRhodesAlloc;
 80112f4:	4c4d      	ldr	r4, [pc, #308]	; (801142c <initFunctionPointers+0x250>)
	freeFunctions[ClassicSynth] = SFXClassicSynthFree;
 80112f6:	641d      	str	r5, [r3, #64]	; 0x40
	allocFunctions[Rhodes] = SFXRhodesAlloc;
 80112f8:	6444      	str	r4, [r0, #68]	; 0x44
	frameFunctions[Rhodes] = SFXRhodesFrame;
 80112fa:	4d4d      	ldr	r5, [pc, #308]	; (8011430 <initFunctionPointers+0x254>)
	tickFunctions[Rhodes] = SFXRhodesTick;
 80112fc:	4c4d      	ldr	r4, [pc, #308]	; (8011434 <initFunctionPointers+0x258>)
	freeFunctions[Rhodes] = SFXRhodesFree;
 80112fe:	484e      	ldr	r0, [pc, #312]	; (8011438 <initFunctionPointers+0x25c>)
	frameFunctions[Rhodes] = SFXRhodesFrame;
 8011300:	644d      	str	r5, [r1, #68]	; 0x44
	tickFunctions[Rhodes] = SFXRhodesTick;
 8011302:	6454      	str	r4, [r2, #68]	; 0x44
	freeFunctions[Rhodes] = SFXRhodesFree;
 8011304:	6458      	str	r0, [r3, #68]	; 0x44
}
 8011306:	bc30      	pop	{r4, r5}
 8011308:	4770      	bx	lr
 801130a:	bf00      	nop
 801130c:	200008cc 	.word	0x200008cc
 8011310:	08014d1d 	.word	0x08014d1d
 8011314:	08015311 	.word	0x08015311
 8011318:	08016089 	.word	0x08016089
 801131c:	0801635d 	.word	0x0801635d
 8011320:	0801650d 	.word	0x0801650d
 8011324:	08016705 	.word	0x08016705
 8011328:	20000918 	.word	0x20000918
 801132c:	08016a51 	.word	0x08016a51
 8011330:	08017541 	.word	0x08017541
 8011334:	08014e61 	.word	0x08014e61
 8011338:	0801571d 	.word	0x0801571d
 801133c:	08016145 	.word	0x08016145
 8011340:	08016435 	.word	0x08016435
 8011344:	08016535 	.word	0x08016535
 8011348:	080167ad 	.word	0x080167ad
 801134c:	08016bb9 	.word	0x08016bb9
 8011350:	0801765d 	.word	0x0801765d
 8011354:	20000834 	.word	0x20000834
 8011358:	080150cd 	.word	0x080150cd
 801135c:	08015cf9 	.word	0x08015cf9
 8011360:	08016149 	.word	0x08016149
 8011364:	0801b381 	.word	0x0801b381
 8011368:	08016635 	.word	0x08016635
 801136c:	080167b1 	.word	0x080167b1
 8011370:	08016e99 	.word	0x08016e99
 8011374:	08017689 	.word	0x08017689
 8011378:	20000880 	.word	0x20000880
 801137c:	0801529d 	.word	0x0801529d
 8011380:	08015fd5 	.word	0x08015fd5
 8011384:	08016311 	.word	0x08016311
 8011388:	080164e9 	.word	0x080164e9
 801138c:	080166f9 	.word	0x080166f9
 8011390:	08016a21 	.word	0x08016a21
 8011394:	08017511 	.word	0x08017511
 8011398:	08017b81 	.word	0x08017b81
 801139c:	08017bc1 	.word	0x08017bc1
 80113a0:	08017ca1 	.word	0x08017ca1
 80113a4:	08017d6d 	.word	0x08017d6d
 80113a8:	08017e5d 	.word	0x08017e5d
 80113ac:	08017e8d 	.word	0x08017e8d
 80113b0:	08017eed 	.word	0x08017eed
 80113b4:	08017f19 	.word	0x08017f19
 80113b8:	08018031 	.word	0x08018031
 80113bc:	08018061 	.word	0x08018061
 80113c0:	08018095 	.word	0x08018095
 80113c4:	080180c1 	.word	0x080180c1
 80113c8:	0801822d 	.word	0x0801822d
 80113cc:	08018249 	.word	0x08018249
 80113d0:	08018335 	.word	0x08018335
 80113d4:	0801839d 	.word	0x0801839d
 80113d8:	08018615 	.word	0x08018615
 80113dc:	0801866d 	.word	0x0801866d
 80113e0:	080186b9 	.word	0x080186b9
 80113e4:	0801874d 	.word	0x0801874d
 80113e8:	0801884d 	.word	0x0801884d
 80113ec:	08018869 	.word	0x08018869
 80113f0:	08018939 	.word	0x08018939
 80113f4:	0801893d 	.word	0x0801893d
 80113f8:	08018af9 	.word	0x08018af9
 80113fc:	08018b45 	.word	0x08018b45
 8011400:	08018c41 	.word	0x08018c41
 8011404:	0801909d 	.word	0x0801909d
 8011408:	080190f5 	.word	0x080190f5
 801140c:	08019119 	.word	0x08019119
 8011410:	08019289 	.word	0x08019289
 8011414:	080195ed 	.word	0x080195ed
 8011418:	080196b5 	.word	0x080196b5
 801141c:	0801970d 	.word	0x0801970d
 8011420:	08019a05 	.word	0x08019a05
 8011424:	0801a099 	.word	0x0801a099
 8011428:	0801a1cd 	.word	0x0801a1cd
 801142c:	0801a24d 	.word	0x0801a24d
 8011430:	0801a3b1 	.word	0x0801a3b1
 8011434:	0801ad69 	.word	0x0801ad69
 8011438:	0801b09d 	.word	0x0801b09d

0801143c <audioInit>:
{
 801143c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, medium_memory, MED_MEM_SIZE, &randomNumber);
 8011440:	4b47      	ldr	r3, [pc, #284]	; (8011560 <audioInit+0x124>)
{
 8011442:	4606      	mov	r6, r0
	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, medium_memory, MED_MEM_SIZE, &randomNumber);
 8011444:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8011564 <audioInit+0x128>
 8011448:	2080      	movs	r0, #128	; 0x80
{
 801144a:	4688      	mov	r8, r1
 801144c:	4617      	mov	r7, r2
	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, medium_memory, MED_MEM_SIZE, &randomNumber);
 801144e:	4946      	ldr	r1, [pc, #280]	; (8011568 <audioInit+0x12c>)
 8011450:	4a46      	ldr	r2, [pc, #280]	; (801156c <audioInit+0x130>)
 8011452:	4c47      	ldr	r4, [pc, #284]	; (8011570 <audioInit+0x134>)
{
 8011454:	ed2d 8b02 	vpush	{d8}
 8011458:	b086      	sub	sp, #24
		tExpSmooth_init(&adc[i], 0.0f, 0.2f);
 801145a:	eddf 8a46 	vldr	s17, [pc, #280]	; 8011574 <audioInit+0x138>
	LEAF_init(SAMPLE_RATE, AUDIO_FRAME_SIZE, medium_memory, MED_MEM_SIZE, &randomNumber);
 801145e:	f015 fcb5 	bl	8026dcc <LEAF_init>
	tMempool_init (&smallPool, small_memory, SMALL_MEM_SIZE);
 8011462:	4a45      	ldr	r2, [pc, #276]	; (8011578 <audioInit+0x13c>)
 8011464:	4945      	ldr	r1, [pc, #276]	; (801157c <audioInit+0x140>)
 8011466:	f104 0518 	add.w	r5, r4, #24
 801146a:	4845      	ldr	r0, [pc, #276]	; (8011580 <audioInit+0x144>)
 801146c:	f012 ff60 	bl	8024330 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE);
 8011470:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011474:	4943      	ldr	r1, [pc, #268]	; (8011584 <audioInit+0x148>)
 8011476:	4844      	ldr	r0, [pc, #272]	; (8011588 <audioInit+0x14c>)
		tExpSmooth_init(&adc[i], 0.0f, 0.2f);
 8011478:	ed9f 8a44 	vldr	s16, [pc, #272]	; 801158c <audioInit+0x150>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE);
 801147c:	f012 ff58 	bl	8024330 <tMempool_init>
	initFunctionPointers();
 8011480:	f7ff feac 	bl	80111dc <initFunctionPointers>
		tExpSmooth_init(&adc[i], 0.0f, 0.2f);
 8011484:	4620      	mov	r0, r4
 8011486:	3404      	adds	r4, #4
 8011488:	eef0 0a68 	vmov.f32	s1, s17
 801148c:	eeb0 0a48 	vmov.f32	s0, s16
 8011490:	f010 ff40 	bl	8022314 <tExpSmooth_init>
	for (int i = 0; i < 6; i++)
 8011494:	42ac      	cmp	r4, r5
 8011496:	d1f5      	bne.n	8011484 <audioInit+0x48>
		tEnvelopeFollower_init(&LED_envelope[i], 0.0001f, .9995f);
 8011498:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8011590 <audioInit+0x154>
	loadingPreset = 1;
 801149c:	2401      	movs	r4, #1
		tEnvelopeFollower_init(&LED_envelope[i], 0.0001f, .9995f);
 801149e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8011594 <audioInit+0x158>
 80114a2:	483d      	ldr	r0, [pc, #244]	; (8011598 <audioInit+0x15c>)
 80114a4:	f00d f928 	bl	801e6f8 <tEnvelopeFollower_init>
 80114a8:	eddf 0a39 	vldr	s1, [pc, #228]	; 8011590 <audioInit+0x154>
 80114ac:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8011594 <audioInit+0x158>
 80114b0:	483a      	ldr	r0, [pc, #232]	; (801159c <audioInit+0x160>)
 80114b2:	f00d f921 	bl	801e6f8 <tEnvelopeFollower_init>
 80114b6:	eddf 0a36 	vldr	s1, [pc, #216]	; 8011590 <audioInit+0x154>
 80114ba:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8011594 <audioInit+0x158>
 80114be:	4838      	ldr	r0, [pc, #224]	; (80115a0 <audioInit+0x164>)
 80114c0:	f00d f91a 	bl	801e6f8 <tEnvelopeFollower_init>
 80114c4:	eddf 0a32 	vldr	s1, [pc, #200]	; 8011590 <audioInit+0x154>
 80114c8:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8011594 <audioInit+0x158>
 80114cc:	4835      	ldr	r0, [pc, #212]	; (80115a4 <audioInit+0x168>)
 80114ce:	f00d f913 	bl	801e6f8 <tEnvelopeFollower_init>
	LEAF_generate_atodbPositiveClipped(atodbTable, -120.0f, 380.f, ATODB_TABLE_SIZE);
 80114d2:	eddf 0a35 	vldr	s1, [pc, #212]	; 80115a8 <audioInit+0x16c>
 80114d6:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80115ac <audioInit+0x170>
 80114da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80114de:	4834      	ldr	r0, [pc, #208]	; (80115b0 <audioInit+0x174>)
 80114e0:	f012 fcae 	bl	8023e40 <LEAF_generate_atodbPositiveClipped>
	initGlobalSFXObjects();
 80114e4:	f003 f960 	bl	80147a8 <initGlobalSFXObjects>
	previousPreset = PresetNil;
 80114e8:	4b32      	ldr	r3, [pc, #200]	; (80115b4 <audioInit+0x178>)
	loadingPreset = 1;
 80114ea:	4933      	ldr	r1, [pc, #204]	; (80115b8 <audioInit+0x17c>)
	previousPreset = PresetNil;
 80114ec:	2212      	movs	r2, #18
	HAL_Delay(10);
 80114ee:	200a      	movs	r0, #10
	previousPreset = PresetNil;
 80114f0:	701a      	strb	r2, [r3, #0]
	loadingPreset = 1;
 80114f2:	700c      	strb	r4, [r1, #0]
	HAL_Delay(10);
 80114f4:	f7ef fa9a 	bl	8000a2c <HAL_Delay>
 80114f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80114fc:	2100      	movs	r1, #0
 80114fe:	482f      	ldr	r0, [pc, #188]	; (80115bc <audioInit+0x180>)
 8011500:	f015 fcdb 	bl	8026eba <memset>
	HAL_Delay(1);
 8011504:	4620      	mov	r0, r4
 8011506:	f7ef fa91 	bl	8000a2c <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 801150a:	4640      	mov	r0, r8
 801150c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011510:	492a      	ldr	r1, [pc, #168]	; (80115bc <audioInit+0x180>)
 8011512:	f7f9 fca3 	bl	800ae5c <HAL_SAI_Transmit_DMA>
 8011516:	4b2a      	ldr	r3, [pc, #168]	; (80115c0 <audioInit+0x184>)
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8011518:	f44f 7200 	mov.w	r2, #512	; 0x200
 801151c:	4929      	ldr	r1, [pc, #164]	; (80115c4 <audioInit+0x188>)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 801151e:	7018      	strb	r0, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8011520:	4638      	mov	r0, r7
 8011522:	f7f9 fd2b 	bl	800af7c <HAL_SAI_Receive_DMA>
 8011526:	4b28      	ldr	r3, [pc, #160]	; (80115c8 <audioInit+0x18c>)
 8011528:	7018      	strb	r0, [r3, #0]
	AudioCodec_init(hi2c);
 801152a:	4630      	mov	r0, r6
 801152c:	f000 f8e0 	bl	80116f0 <AudioCodec_init>
	HAL_Delay(1);
 8011530:	4620      	mov	r0, r4
 8011532:	f7ef fa7b 	bl	8000a2c <HAL_Delay>
	HAL_I2C_MspDeInit(hi2c);
 8011536:	4630      	mov	r0, r6
 8011538:	f001 ff30 	bl	801339c <HAL_I2C_MspDeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801153c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801153e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011542:	a901      	add	r1, sp, #4
 8011544:	4821      	ldr	r0, [pc, #132]	; (80115cc <audioInit+0x190>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011546:	9302      	str	r3, [sp, #8]
 8011548:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801154a:	9201      	str	r2, [sp, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801154c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011550:	f7f3 fe32 	bl	80051b8 <HAL_GPIO_Init>
}
 8011554:	b006      	add	sp, #24
 8011556:	ecbd 8b02 	vpop	{d8}
 801155a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801155e:	bf00      	nop
 8011560:	0801366d 	.word	0x0801366d
 8011564:	473b8000 	.word	0x473b8000
 8011568:	24000000 	.word	0x24000000
 801156c:	0007eb58 	.word	0x0007eb58
 8011570:	20018838 	.word	0x20018838
 8011574:	3e4ccccd 	.word	0x3e4ccccd
 8011578:	000139c8 	.word	0x000139c8
 801157c:	2000369c 	.word	0x2000369c
 8011580:	20018338 	.word	0x20018338
 8011584:	60000000 	.word	0x60000000
 8011588:	20017550 	.word	0x20017550
 801158c:	00000000 	.word	0x00000000
 8011590:	3f7fdf3b 	.word	0x3f7fdf3b
 8011594:	38d1b717 	.word	0x38d1b717
 8011598:	20000960 	.word	0x20000960
 801159c:	20000964 	.word	0x20000964
 80115a0:	20000968 	.word	0x20000968
 80115a4:	2000096c 	.word	0x2000096c
 80115a8:	43be0000 	.word	0x43be0000
 80115ac:	c2f00000 	.word	0xc2f00000
 80115b0:	20000970 	.word	0x20000970
 80115b4:	200002dc 	.word	0x200002dc
 80115b8:	20000695 	.word	0x20000695
 80115bc:	30000880 	.word	0x30000880
 80115c0:	2000087c 	.word	0x2000087c
 80115c4:	30000080 	.word	0x30000080
 80115c8:	20000914 	.word	0x20000914
 80115cc:	58020400 	.word	0x58020400

080115d0 <HAL_SAI_ErrorCallback>:



void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
	setLED_Edit(1);
 80115d0:	2001      	movs	r0, #1
 80115d2:	f002 b9b9 	b.w	8013948 <setLED_Edit>
 80115d6:	bf00      	nop

080115d8 <HAL_SAI_TxCpltCallback>:
 80115d8:	4770      	bx	lr
 80115da:	bf00      	nop

080115dc <HAL_SAI_TxHalfCpltCallback>:
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{

}
 80115dc:	4770      	bx	lr
 80115de:	bf00      	nop

080115e0 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
	audioFrame(HALF_BUFFER_SIZE);
 80115e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80115e4:	f7ff bb98 	b.w	8010d18 <audioFrame>

080115e8 <HAL_SAI_RxHalfCpltCallback>:
}

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
	audioFrame(0);
 80115e8:	2000      	movs	r0, #0
 80115ea:	f7ff bb95 	b.w	8010d18 <audioFrame>
 80115ee:	bf00      	nop

080115f0 <MX_BDMA_Init>:
  */
void MX_BDMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80115f0:	4b10      	ldr	r3, [pc, #64]	; (8011634 <MX_BDMA_Init+0x44>)

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 80115f2:	2200      	movs	r2, #0
 80115f4:	2081      	movs	r0, #129	; 0x81
 80115f6:	4611      	mov	r1, r2
{
 80115f8:	b510      	push	{r4, lr}
  __HAL_RCC_BDMA_CLK_ENABLE();
 80115fa:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
{
 80115fe:	b082      	sub	sp, #8
  __HAL_RCC_BDMA_CLK_ENABLE();
 8011600:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 8011604:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8011608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011610:	9301      	str	r3, [sp, #4]
 8011612:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8011614:	f7f0 fe6c 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8011618:	2081      	movs	r0, #129	; 0x81
 801161a:	f7f0 feaf 	bl	800237c <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 801161e:	2200      	movs	r2, #0
 8011620:	2082      	movs	r0, #130	; 0x82
 8011622:	4611      	mov	r1, r2
 8011624:	f7f0 fe64 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8011628:	2082      	movs	r0, #130	; 0x82

}
 801162a:	b002      	add	sp, #8
 801162c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8011630:	f7f0 bea4 	b.w	800237c <HAL_NVIC_EnableIRQ>
 8011634:	58024400 	.word	0x58024400

08011638 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011638:	b500      	push	{lr}
 801163a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801163c:	9300      	str	r3, [sp, #0]
 801163e:	4613      	mov	r3, r2
 8011640:	460a      	mov	r2, r1
 8011642:	4601      	mov	r1, r0
 8011644:	4804      	ldr	r0, [pc, #16]	; (8011658 <BSP_SD_ReadBlocks+0x20>)
 8011646:	f7f9 ff1d 	bl	800b484 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 801164a:	3000      	adds	r0, #0
 801164c:	bf18      	it	ne
 801164e:	2001      	movne	r0, #1
 8011650:	b003      	add	sp, #12
 8011652:	f85d fb04 	ldr.w	pc, [sp], #4
 8011656:	bf00      	nop
 8011658:	20001f08 	.word	0x20001f08

0801165c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 801165c:	b500      	push	{lr}
 801165e:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8011660:	9300      	str	r3, [sp, #0]
 8011662:	4613      	mov	r3, r2
 8011664:	460a      	mov	r2, r1
 8011666:	4601      	mov	r1, r0
 8011668:	4804      	ldr	r0, [pc, #16]	; (801167c <BSP_SD_WriteBlocks+0x20>)
 801166a:	f7fa f80d 	bl	800b688 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 801166e:	3000      	adds	r0, #0
 8011670:	bf18      	it	ne
 8011672:	2001      	movne	r0, #1
 8011674:	b003      	add	sp, #12
 8011676:	f85d fb04 	ldr.w	pc, [sp], #4
 801167a:	bf00      	nop
 801167c:	20001f08 	.word	0x20001f08

08011680 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011680:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011682:	4803      	ldr	r0, [pc, #12]	; (8011690 <BSP_SD_GetCardState+0x10>)
 8011684:	f7fa fd9e 	bl	800c1c4 <HAL_SD_GetCardState>
}
 8011688:	3804      	subs	r0, #4
 801168a:	bf18      	it	ne
 801168c:	2001      	movne	r0, #1
 801168e:	bd08      	pop	{r3, pc}
 8011690:	20001f08 	.word	0x20001f08

08011694 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011694:	4601      	mov	r1, r0
 8011696:	4801      	ldr	r0, [pc, #4]	; (801169c <BSP_SD_GetCardInfo+0x8>)
 8011698:	f7fa bc0a 	b.w	800beb0 <HAL_SD_GetCardInfo>
 801169c:	20001f08 	.word	0x20001f08

080116a0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80116a0:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 80116a2:	2301      	movs	r3, #1
{
 80116a4:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 80116a6:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80116aa:	f000 fc5b 	bl	8011f64 <BSP_PlatformIsDetected>
 80116ae:	b908      	cbnz	r0, 80116b4 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 80116b0:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 80116b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80116b8:	b003      	add	sp, #12
 80116ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80116be:	bf00      	nop

080116c0 <BSP_SD_Init>:
{
 80116c0:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80116c2:	f7ff ffed 	bl	80116a0 <BSP_SD_IsDetected>
 80116c6:	2801      	cmp	r0, #1
 80116c8:	d001      	beq.n	80116ce <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 80116ca:	2002      	movs	r0, #2
}
 80116cc:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 80116ce:	4807      	ldr	r0, [pc, #28]	; (80116ec <BSP_SD_Init+0x2c>)
 80116d0:	f7fa fcb2 	bl	800c038 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80116d4:	2800      	cmp	r0, #0
 80116d6:	d1f9      	bne.n	80116cc <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80116d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80116dc:	4803      	ldr	r0, [pc, #12]	; (80116ec <BSP_SD_Init+0x2c>)
 80116de:	f7fa fbfb 	bl	800bed8 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 80116e2:	3000      	adds	r0, #0
 80116e4:	bf18      	it	ne
 80116e6:	2001      	movne	r0, #1
}
 80116e8:	bd08      	pop	{r3, pc}
 80116ea:	bf00      	nop
 80116ec:	20001f08 	.word	0x20001f08

080116f0 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 80116f0:	b5f0      	push	{r4, r5, r6, r7, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80116f2:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 80116f4:	b083      	sub	sp, #12

	HAL_Delay(2);
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80116f6:	4d3b      	ldr	r5, [pc, #236]	; (80117e4 <AudioCodec_init+0xf4>)
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 80116f8:	4606      	mov	r6, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80116fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80116fe:	483a      	ldr	r0, [pc, #232]	; (80117e8 <AudioCodec_init+0xf8>)
 8011700:	f7f4 f894 	bl	800582c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8011704:	2002      	movs	r0, #2
	myI2cData[0] = 0x07;
 8011706:	4c39      	ldr	r4, [pc, #228]	; (80117ec <AudioCodec_init+0xfc>)
	HAL_Delay(2);
 8011708:	f7ef f990 	bl	8000a2c <HAL_Delay>
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801170c:	686a      	ldr	r2, [r5, #4]
	myI2cData[0] = 0x07;
 801170e:	f240 3707 	movw	r7, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011712:	882b      	ldrh	r3, [r5, #0]
 8011714:	4630      	mov	r0, r6
 8011716:	9200      	str	r2, [sp, #0]
 8011718:	2120      	movs	r1, #32
 801171a:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 801171c:	8027      	strh	r7, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801171e:	f7f4 ff3d 	bl	800659c <HAL_I2C_Master_Transmit>
 8011722:	4f33      	ldr	r7, [pc, #204]	; (80117f0 <AudioCodec_init+0x100>)
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011724:	6869      	ldr	r1, [r5, #4]
	myI2cData[0] = 0x01;
 8011726:	f244 1c01 	movw	ip, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801172a:	7038      	strb	r0, [r7, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801172c:	4622      	mov	r2, r4
 801172e:	882b      	ldrh	r3, [r5, #0]
 8011730:	4630      	mov	r0, r6
 8011732:	9100      	str	r1, [sp, #0]
 8011734:	2120      	movs	r1, #32
	myI2cData[0] = 0x01;
 8011736:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801173a:	f7f4 ff2f 	bl	800659c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801173e:	686a      	ldr	r2, [r5, #4]
	myI2cData[0] = 0x02;
 8011740:	f04f 0c02 	mov.w	ip, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011744:	7038      	strb	r0, [r7, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011746:	2120      	movs	r1, #32
 8011748:	882b      	ldrh	r3, [r5, #0]
 801174a:	4630      	mov	r0, r6
 801174c:	9200      	str	r2, [sp, #0]
 801174e:	4622      	mov	r2, r4
	myI2cData[0] = 0x02;
 8011750:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011754:	f7f4 ff22 	bl	800659c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011758:	6869      	ldr	r1, [r5, #4]
	myI2cData[0] = 0x03;
 801175a:	f647 1c03 	movw	ip, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801175e:	7038      	strb	r0, [r7, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011760:	4622      	mov	r2, r4
 8011762:	882b      	ldrh	r3, [r5, #0]
 8011764:	4630      	mov	r0, r6
 8011766:	9100      	str	r1, [sp, #0]
 8011768:	2120      	movs	r1, #32
	myI2cData[0] = 0x03;
 801176a:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801176e:	f7f4 ff15 	bl	800659c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011772:	686a      	ldr	r2, [r5, #4]
	myI2cData[0] = 0x04;
 8011774:	f44f 7c82 	mov.w	ip, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011778:	7038      	strb	r0, [r7, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801177a:	2120      	movs	r1, #32
 801177c:	882b      	ldrh	r3, [r5, #0]
 801177e:	4630      	mov	r0, r6
 8011780:	9200      	str	r2, [sp, #0]
 8011782:	4622      	mov	r2, r4
	myI2cData[0] = 0x04;
 8011784:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011788:	f7f4 ff08 	bl	800659c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 801178c:	6869      	ldr	r1, [r5, #4]
	myI2cData[0] = 0x05;
 801178e:	f240 1c05 	movw	ip, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011792:	7038      	strb	r0, [r7, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8011794:	4622      	mov	r2, r4
 8011796:	882b      	ldrh	r3, [r5, #0]
 8011798:	4630      	mov	r0, r6
 801179a:	9100      	str	r1, [sp, #0]
 801179c:	2120      	movs	r1, #32
	myI2cData[0] = 0x05;
 801179e:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80117a2:	f7f4 fefb 	bl	800659c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80117a6:	686a      	ldr	r2, [r5, #4]
	myI2cData[0] = 0x06;
 80117a8:	f241 0c06 	movw	ip, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80117ac:	7038      	strb	r0, [r7, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80117ae:	2120      	movs	r1, #32
 80117b0:	882b      	ldrh	r3, [r5, #0]
 80117b2:	4630      	mov	r0, r6
 80117b4:	9200      	str	r2, [sp, #0]
 80117b6:	4622      	mov	r2, r4
	myI2cData[0] = 0x06;
 80117b8:	f8a4 c000 	strh.w	ip, [r4]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80117bc:	f7f4 feee 	bl	800659c <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80117c0:	6869      	ldr	r1, [r5, #4]
	myI2cData[0] = 0x07;
 80117c2:	f240 2c07 	movw	ip, #519	; 0x207
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80117c6:	7038      	strb	r0, [r7, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80117c8:	4622      	mov	r2, r4
 80117ca:	882b      	ldrh	r3, [r5, #0]
 80117cc:	4630      	mov	r0, r6
 80117ce:	9100      	str	r1, [sp, #0]
 80117d0:	2120      	movs	r1, #32
	myI2cData[0] = 0x07;
 80117d2:	f8a4 c000 	strh.w	ip, [r4]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80117d6:	f7f4 fee1 	bl	800659c <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 80117da:	4b06      	ldr	r3, [pc, #24]	; (80117f4 <AudioCodec_init+0x104>)
 80117dc:	2201      	movs	r2, #1
 80117de:	701a      	strb	r2, [r3, #0]

}
 80117e0:	b003      	add	sp, #12
 80117e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117e4:	20000014 	.word	0x20000014
 80117e8:	58020800 	.word	0x58020800
 80117ec:	2000051c 	.word	0x2000051c
 80117f0:	20001170 	.word	0x20001170
 80117f4:	200004ec 	.word	0x200004ec

080117f8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80117f8:	4b1e      	ldr	r3, [pc, #120]	; (8011874 <MX_DMA_Init+0x7c>)
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 3, 0);
 80117fa:	2200      	movs	r2, #0
 80117fc:	2103      	movs	r1, #3
 80117fe:	200c      	movs	r0, #12
{
 8011800:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 8011802:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8011806:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8011808:	f044 0402 	orr.w	r4, r4, #2
 801180c:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8011810:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 8011814:	f004 0402 	and.w	r4, r4, #2
 8011818:	9400      	str	r4, [sp, #0]
 801181a:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 801181c:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 8011820:	f044 0401 	orr.w	r4, r4, #1
 8011824:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8011828:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801182c:	f003 0301 	and.w	r3, r3, #1
 8011830:	9301      	str	r3, [sp, #4]
 8011832:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 3, 0);
 8011834:	f7f0 fd5c 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8011838:	200c      	movs	r0, #12
 801183a:	f7f0 fd9f 	bl	800237c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
 801183e:	2200      	movs	r2, #0
 8011840:	2103      	movs	r1, #3
 8011842:	200d      	movs	r0, #13
 8011844:	f7f0 fd54 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8011848:	200d      	movs	r0, #13
 801184a:	f7f0 fd97 	bl	800237c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 4, 0);
 801184e:	2200      	movs	r2, #0
 8011850:	2104      	movs	r1, #4
 8011852:	2038      	movs	r0, #56	; 0x38
 8011854:	f7f0 fd4c 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8011858:	2038      	movs	r0, #56	; 0x38
 801185a:	f7f0 fd8f 	bl	800237c <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 801185e:	2200      	movs	r2, #0
 8011860:	2066      	movs	r0, #102	; 0x66
 8011862:	4611      	mov	r1, r2
 8011864:	f7f0 fd44 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8011868:	2066      	movs	r0, #102	; 0x66

}
 801186a:	b002      	add	sp, #8
 801186c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8011870:	f7f0 bd84 	b.w	800237c <HAL_NVIC_EnableIRQ>
 8011874:	58024400 	.word	0x58024400

08011878 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8011878:	b510      	push	{r4, lr}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGE0;
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;

  uint32_t data32[8] = {Data};
 801187a:	2300      	movs	r3, #0
{
 801187c:	b090      	sub	sp, #64	; 0x40
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801187e:	4c25      	ldr	r4, [pc, #148]	; (8011914 <EE_VerifyPageFullWriteVariable+0x9c>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011880:	4a25      	ldr	r2, [pc, #148]	; (8011918 <EE_VerifyPageFullWriteVariable+0xa0>)
  uint32_t data32[8] = {Data};
 8011882:	9100      	str	r1, [sp, #0]
  uint32_t VirtAddress1[8] = {VirtAddress};
 8011884:	9008      	str	r0, [sp, #32]
  uint32_t data32[8] = {Data};
 8011886:	9307      	str	r3, [sp, #28]
  uint32_t VirtAddress1[8] = {VirtAddress};
 8011888:	930f      	str	r3, [sp, #60]	; 0x3c
  uint32_t data32[8] = {Data};
 801188a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801188e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8011892:	e9cd 3305 	strd	r3, r3, [sp, #20]
  uint32_t VirtAddress1[8] = {VirtAddress};
 8011896:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 801189a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 801189e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80118a2:	8823      	ldrh	r3, [r4, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80118a4:	8812      	ldrh	r2, [r2, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80118a6:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80118a8:	b292      	uxth	r2, r2
      if (PageStatus1 == VALID_PAGE)
 80118aa:	b9ea      	cbnz	r2, 80118e8 <EE_VerifyPageFullWriteVariable+0x70>
        if (PageStatus0 == RECEIVE_DATA)
 80118ac:	f64e 62ee 	movw	r2, #61166	; 0xeeee
          return PAGE0;         /* Page0 valid */
 80118b0:	1a9b      	subs	r3, r3, r2
 80118b2:	bf18      	it	ne
 80118b4:	2301      	movne	r3, #1
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80118b6:	f203 440e 	addw	r4, r3, #1038	; 0x40e

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 80118ba:	4a18      	ldr	r2, [pc, #96]	; (801191c <EE_VerifyPageFullWriteVariable+0xa4>)
 80118bc:	3301      	adds	r3, #1
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80118be:	0464      	lsls	r4, r4, #17
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 80118c0:	eb02 4243 	add.w	r2, r2, r3, lsl #17

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 80118c4:	4294      	cmp	r4, r2
 80118c6:	d303      	bcc.n	80118d0 <EE_VerifyPageFullWriteVariable+0x58>
 80118c8:	e016      	b.n	80118f8 <EE_VerifyPageFullWriteVariable+0x80>
     return FlashStatus;
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 80118ca:	3440      	adds	r4, #64	; 0x40
  while (Address < PageEndAddress)
 80118cc:	42a2      	cmp	r2, r4
 80118ce:	d913      	bls.n	80118f8 <EE_VerifyPageFullWriteVariable+0x80>
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80118d0:	6823      	ldr	r3, [r4, #0]
 80118d2:	3301      	adds	r3, #1
 80118d4:	d1f9      	bne.n	80118ca <EE_VerifyPageFullWriteVariable+0x52>
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 80118d6:	466a      	mov	r2, sp
 80118d8:	4621      	mov	r1, r4
 80118da:	2001      	movs	r0, #1
 80118dc:	f7f3 f9e8 	bl	8004cb0 <HAL_FLASH_Program>
      if (FlashStatus != HAL_OK)
 80118e0:	b180      	cbz	r0, 8011904 <EE_VerifyPageFullWriteVariable+0x8c>
     return FlashStatus;
 80118e2:	b280      	uxth	r0, r0
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
}
 80118e4:	b010      	add	sp, #64	; 0x40
 80118e6:	bd10      	pop	{r4, pc}
      else if (PageStatus0 == VALID_PAGE)
 80118e8:	b94b      	cbnz	r3, 80118fe <EE_VerifyPageFullWriteVariable+0x86>
        if (PageStatus1 == RECEIVE_DATA)
 80118ea:	f64e 63ee 	movw	r3, #61166	; 0xeeee
          return PAGE0;         /* Page0 valid */
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	fab3 f383 	clz	r3, r3
 80118f4:	095b      	lsrs	r3, r3, #5
 80118f6:	e7de      	b.n	80118b6 <EE_VerifyPageFullWriteVariable+0x3e>
  return PAGE_FULL;
 80118f8:	2080      	movs	r0, #128	; 0x80
}
 80118fa:	b010      	add	sp, #64	; 0x40
 80118fc:	bd10      	pop	{r4, pc}
    return  NO_VALID_PAGE;
 80118fe:	20ab      	movs	r0, #171	; 0xab
}
 8011900:	b010      	add	sp, #64	; 0x40
 8011902:	bd10      	pop	{r4, pc}
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8011904:	f104 0120 	add.w	r1, r4, #32
 8011908:	aa08      	add	r2, sp, #32
 801190a:	2001      	movs	r0, #1
 801190c:	f7f3 f9d0 	bl	8004cb0 <HAL_FLASH_Program>
 8011910:	e7e7      	b.n	80118e2 <EE_VerifyPageFullWriteVariable+0x6a>
 8011912:	bf00      	nop
 8011914:	081c0000 	.word	0x081c0000
 8011918:	081e0000 	.word	0x081e0000
 801191c:	081bffff 	.word	0x081bffff

08011920 <EE_Init>:
{
 8011920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t SectorError = 0;
 8011924:	f04f 0800 	mov.w	r8, #0
{
 8011928:	b09f      	sub	sp, #124	; 0x7c
  uint32_t valid[8] = {0x0000};
 801192a:	f04f 0920 	mov.w	r9, #32
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801192e:	4cb3      	ldr	r4, [pc, #716]	; (8011bfc <EE_Init+0x2dc>)
  uint32_t valid[8] = {0x0000};
 8011930:	4641      	mov	r1, r8
 8011932:	a80e      	add	r0, sp, #56	; 0x38
 8011934:	464a      	mov	r2, r9
  uint32_t SectorError = 0;
 8011936:	f8cd 8008 	str.w	r8, [sp, #8]
  uint32_t valid[8] = {0x0000};
 801193a:	f015 fabe 	bl	8026eba <memset>
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801193e:	8825      	ldrh	r5, [r4, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011940:	4eaf      	ldr	r6, [pc, #700]	; (8011c00 <EE_Init+0x2e0>)
  switch (PageStatus0)
 8011942:	f64e 62ee 	movw	r2, #61166	; 0xeeee
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011946:	b2ad      	uxth	r5, r5
  pEraseInit.Banks = FLASH_BANK_2 ;
 8011948:	2302      	movs	r3, #2
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801194a:	8830      	ldrh	r0, [r6, #0]
  pEraseInit.Sector = PAGE0_ID;
 801194c:	f04f 0b06 	mov.w	fp, #6
  pEraseInit.NbSectors = 1;
 8011950:	f04f 0a01 	mov.w	sl, #1
  switch (PageStatus0)
 8011954:	4295      	cmp	r5, r2
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011956:	b287      	uxth	r7, r0
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8011958:	f8cd 8010 	str.w	r8, [sp, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801195c:	f8cd 9020 	str.w	r9, [sp, #32]
  pEraseInit.NbSectors = 1;
 8011960:	f8cd a01c 	str.w	sl, [sp, #28]
  pEraseInit.Sector = PAGE0_ID;
 8011964:	e9cd 3b05 	strd	r3, fp, [sp, #20]
  switch (PageStatus0)
 8011968:	f000 80bf 	beq.w	8011aea <EE_Init+0x1ca>
 801196c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011970:	428d      	cmp	r5, r1
 8011972:	f000 808e 	beq.w	8011a92 <EE_Init+0x172>
 8011976:	b35d      	cbz	r5, 80119d0 <EE_Init+0xb0>
 8011978:	9301      	str	r3, [sp, #4]
  uint32_t valid[8] = {0x0000};
 801197a:	ab16      	add	r3, sp, #88	; 0x58
 801197c:	464a      	mov	r2, r9
 801197e:	4641      	mov	r1, r8
 8011980:	4618      	mov	r0, r3
 8011982:	9300      	str	r3, [sp, #0]
  uint32_t SectorError = 0;
 8011984:	f8cd 800c 	str.w	r8, [sp, #12]
  uint32_t valid[8] = {0x0000};
 8011988:	f015 fa97 	bl	8026eba <memset>
  pEraseInit.Banks = FLASH_BANK_2 ;
 801198c:	9b01      	ldr	r3, [sp, #4]
    if (AddressValue != ERASED)
 801198e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8011992:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8011996:	e9cd 3b0a 	strd	r3, fp, [sp, #40]	; 0x28
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801199a:	e9cd a90c 	strd	sl, r9, [sp, #48]	; 0x30
 801199e:	e001      	b.n	80119a4 <EE_Init+0x84>
  while (Address <= PAGE0_END_ADDRESS)
 80119a0:	42b4      	cmp	r4, r6
 80119a2:	d009      	beq.n	80119b8 <EE_Init+0x98>
    AddressValue = (*(__IO uint16_t*)Address);
 80119a4:	8823      	ldrh	r3, [r4, #0]
    Address = Address + 4;
 80119a6:	3404      	adds	r4, #4
    if (AddressValue != ERASED)
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d0f9      	beq.n	80119a0 <EE_Init+0x80>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80119ac:	a903      	add	r1, sp, #12
 80119ae:	a809      	add	r0, sp, #36	; 0x24
 80119b0:	f7f3 faf8 	bl	8004fa4 <HAL_FLASHEx_Erase>
    if (FlashStatus != HAL_OK)
 80119b4:	2800      	cmp	r0, #0
 80119b6:	d167      	bne.n	8011a88 <EE_Init+0x168>
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80119b8:	9a00      	ldr	r2, [sp, #0]
 80119ba:	2001      	movs	r0, #1
 80119bc:	498f      	ldr	r1, [pc, #572]	; (8011bfc <EE_Init+0x2dc>)
 80119be:	f7f3 f977 	bl	8004cb0 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d160      	bne.n	8011a88 <EE_Init+0x168>
  return HAL_OK;
 80119c6:	2700      	movs	r7, #0
}
 80119c8:	4638      	mov	r0, r7
 80119ca:	b01f      	add	sp, #124	; 0x7c
 80119cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80119d0:	2f00      	cmp	r7, #0
 80119d2:	f000 8101 	beq.w	8011bd8 <EE_Init+0x2b8>
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80119d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80119da:	429f      	cmp	r7, r3
 80119dc:	d0f3      	beq.n	80119c6 <EE_Init+0xa6>
  int16_t x = -1;
 80119de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80119e2:	4e88      	ldr	r6, [pc, #544]	; (8011c04 <EE_Init+0x2e4>)
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80119e4:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8011c14 <EE_Init+0x2f4>
      if (PageStatus0 == VALID_PAGE)
 80119e8:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011c18 <EE_Init+0x2f8>
 80119ec:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8011c1c <EE_Init+0x2fc>
 80119f0:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8011c20 <EE_Init+0x300>
      else if (PageStatus1 == VALID_PAGE)
 80119f4:	4a84      	ldr	r2, [pc, #528]	; (8011c08 <EE_Init+0x2e8>)
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80119f6:	f8b8 3000 	ldrh.w	r3, [r8]
 80119fa:	f836 0015 	ldrh.w	r0, [r6, r5, lsl #1]
 80119fe:	4298      	cmp	r0, r3
            x = VarIdx;
 8011a00:	bf08      	it	eq
 8011a02:	b22c      	sxtheq	r4, r5
          if (VarIdx != x)
 8011a04:	42a5      	cmp	r5, r4
 8011a06:	d01d      	beq.n	8011a44 <EE_Init+0x124>
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011a08:	4b7c      	ldr	r3, [pc, #496]	; (8011bfc <EE_Init+0x2dc>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011a0a:	497d      	ldr	r1, [pc, #500]	; (8011c00 <EE_Init+0x2e0>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011a0c:	881b      	ldrh	r3, [r3, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011a0e:	8809      	ldrh	r1, [r1, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011a10:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011a12:	b289      	uxth	r1, r1
      if (PageStatus0 == VALID_PAGE)
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	f000 8122 	beq.w	8011c5e <EE_Init+0x33e>
      else if (PageStatus1 == VALID_PAGE)
 8011a1a:	2900      	cmp	r1, #0
 8011a1c:	f040 8151 	bne.w	8011cc2 <EE_Init+0x3a2>
 8011a20:	497a      	ldr	r1, [pc, #488]	; (8011c0c <EE_Init+0x2ec>)
 8011a22:	4694      	mov	ip, r2
 8011a24:	4f7a      	ldr	r7, [pc, #488]	; (8011c10 <EE_Init+0x2f0>)
 8011a26:	460b      	mov	r3, r1
    AddressValue = (*(__IO uint16_t*)Address);
 8011a28:	8809      	ldrh	r1, [r1, #0]
    if (AddressValue == VirtAddress)
 8011a2a:	4288      	cmp	r0, r1
 8011a2c:	d106      	bne.n	8011a3c <EE_Init+0x11c>
 8011a2e:	e12c      	b.n	8011c8a <EE_Init+0x36a>
    AddressValue = (*(__IO uint16_t*)Address);
 8011a30:	f833 7c20 	ldrh.w	r7, [r3, #-32]
    if (AddressValue == VirtAddress)
 8011a34:	42b8      	cmp	r0, r7
 8011a36:	f000 8126 	beq.w	8011c86 <EE_Init+0x366>
 8011a3a:	460b      	mov	r3, r1
      Address = Address - 32;
 8011a3c:	f1a3 0120 	sub.w	r1, r3, #32
  while (Address > (PageStartAddress + 32))
 8011a40:	458c      	cmp	ip, r1
 8011a42:	d3f5      	bcc.n	8011a30 <EE_Init+0x110>
 8011a44:	3501      	adds	r5, #1
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8011a46:	2d03      	cmp	r5, #3
 8011a48:	d1d5      	bne.n	80119f6 <EE_Init+0xd6>
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8011a4a:	aa0e      	add	r2, sp, #56	; 0x38
 8011a4c:	496c      	ldr	r1, [pc, #432]	; (8011c00 <EE_Init+0x2e0>)
 8011a4e:	2001      	movs	r0, #1
 8011a50:	f7f3 f92e 	bl	8004cb0 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 8011a54:	b9c0      	cbnz	r0, 8011a88 <EE_Init+0x168>
        pEraseInit.Sector = PAGE0_ID;
 8011a56:	2006      	movs	r0, #6
        pEraseInit.Banks = FLASH_BANK_2 ;
 8011a58:	2502      	movs	r5, #2
        pEraseInit.NbSectors = 1;
 8011a5a:	2401      	movs	r4, #1
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011a5c:	2220      	movs	r2, #32
        pEraseInit.Sector = PAGE0_ID;
 8011a5e:	9006      	str	r0, [sp, #24]
    if (AddressValue != ERASED)
 8011a60:	f64f 71ff 	movw	r1, #65535	; 0xffff
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011a64:	4b65      	ldr	r3, [pc, #404]	; (8011bfc <EE_Init+0x2dc>)
  while (Address <= PAGE0_END_ADDRESS)
 8011a66:	4866      	ldr	r0, [pc, #408]	; (8011c00 <EE_Init+0x2e0>)
        pEraseInit.Banks = FLASH_BANK_2 ;
 8011a68:	9505      	str	r5, [sp, #20]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011a6a:	e9cd 4207 	strd	r4, r2, [sp, #28]
 8011a6e:	e001      	b.n	8011a74 <EE_Init+0x154>
  while (Address <= PAGE0_END_ADDRESS)
 8011a70:	4283      	cmp	r3, r0
 8011a72:	d0a8      	beq.n	80119c6 <EE_Init+0xa6>
    AddressValue = (*(__IO uint16_t*)Address);
 8011a74:	881a      	ldrh	r2, [r3, #0]
    Address = Address + 4;
 8011a76:	3304      	adds	r3, #4
    if (AddressValue != ERASED)
 8011a78:	4291      	cmp	r1, r2
 8011a7a:	d0f9      	beq.n	8011a70 <EE_Init+0x150>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011a7c:	a902      	add	r1, sp, #8
 8011a7e:	a804      	add	r0, sp, #16
 8011a80:	f7f3 fa90 	bl	8004fa4 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 8011a84:	2800      	cmp	r0, #0
 8011a86:	d09e      	beq.n	80119c6 <EE_Init+0xa6>
        return FlashStatus;
 8011a88:	b287      	uxth	r7, r0
}
 8011a8a:	4638      	mov	r0, r7
 8011a8c:	b01f      	add	sp, #124	; 0x7c
 8011a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8011a92:	b1ff      	cbz	r7, 8011ad4 <EE_Init+0x1b4>
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8011a94:	4297      	cmp	r7, r2
 8011a96:	f000 808b 	beq.w	8011bb0 <EE_Init+0x290>
 8011a9a:	9301      	str	r3, [sp, #4]
  uint32_t valid[8] = {0x0000};
 8011a9c:	ab16      	add	r3, sp, #88	; 0x58
 8011a9e:	464a      	mov	r2, r9
 8011aa0:	4641      	mov	r1, r8
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	9300      	str	r3, [sp, #0]
  uint32_t SectorError = 0;
 8011aa6:	f8cd 800c 	str.w	r8, [sp, #12]
  uint32_t valid[8] = {0x0000};
 8011aaa:	f015 fa06 	bl	8026eba <memset>
  pEraseInit.Banks = FLASH_BANK_2 ;
 8011aae:	9b01      	ldr	r3, [sp, #4]
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8011ab0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8011ab4:	e9cd 3b0a 	strd	r3, fp, [sp, #40]	; 0x28
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011ab8:	e9cd a90c 	strd	sl, r9, [sp, #48]	; 0x30
 8011abc:	e002      	b.n	8011ac4 <EE_Init+0x1a4>
  while (Address <= PAGE0_END_ADDRESS)
 8011abe:	42b4      	cmp	r4, r6
 8011ac0:	f43f af7a 	beq.w	80119b8 <EE_Init+0x98>
    AddressValue = (*(__IO uint16_t*)Address);
 8011ac4:	8823      	ldrh	r3, [r4, #0]
    Address = Address + 4;
 8011ac6:	3404      	adds	r4, #4
    if (AddressValue != ERASED)
 8011ac8:	429d      	cmp	r5, r3
 8011aca:	d0f8      	beq.n	8011abe <EE_Init+0x19e>
 8011acc:	e76e      	b.n	80119ac <EE_Init+0x8c>
  while (Address <= PAGE0_END_ADDRESS)
 8011ace:	42b4      	cmp	r4, r6
 8011ad0:	f43f af79 	beq.w	80119c6 <EE_Init+0xa6>
    AddressValue = (*(__IO uint16_t*)Address);
 8011ad4:	8823      	ldrh	r3, [r4, #0]
    Address = Address + 4;
 8011ad6:	3404      	adds	r4, #4
    if (AddressValue != ERASED)
 8011ad8:	429d      	cmp	r5, r3
 8011ada:	d0f8      	beq.n	8011ace <EE_Init+0x1ae>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011adc:	a902      	add	r1, sp, #8
 8011ade:	a804      	add	r0, sp, #16
 8011ae0:	f7f3 fa60 	bl	8004fa4 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	d1cf      	bne.n	8011a88 <EE_Init+0x168>
 8011ae8:	e76d      	b.n	80119c6 <EE_Init+0xa6>
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8011aea:	2f00      	cmp	r7, #0
 8011aec:	d13f      	bne.n	8011b6e <EE_Init+0x24e>
 8011aee:	463c      	mov	r4, r7
  int16_t x = -1;
 8011af0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011af4:	4e43      	ldr	r6, [pc, #268]	; (8011c04 <EE_Init+0x2e4>)
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011af6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8011c24 <EE_Init+0x304>
      if (PageStatus0 == VALID_PAGE)
 8011afa:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8011c18 <EE_Init+0x2f8>
 8011afe:	f8df a120 	ldr.w	sl, [pc, #288]	; 8011c20 <EE_Init+0x300>
 8011b02:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8011c1c <EE_Init+0x2fc>
      else if (PageStatus1 == VALID_PAGE)
 8011b06:	4a40      	ldr	r2, [pc, #256]	; (8011c08 <EE_Init+0x2e8>)
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011b08:	f8b8 3000 	ldrh.w	r3, [r8]
 8011b0c:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 8011b10:	4298      	cmp	r0, r3
            x = VarIdx;
 8011b12:	bf08      	it	eq
 8011b14:	b225      	sxtheq	r5, r4
          if (VarIdx != x)
 8011b16:	42ac      	cmp	r4, r5
 8011b18:	d01d      	beq.n	8011b56 <EE_Init+0x236>
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011b1a:	4b38      	ldr	r3, [pc, #224]	; (8011bfc <EE_Init+0x2dc>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011b1c:	4938      	ldr	r1, [pc, #224]	; (8011c00 <EE_Init+0x2e0>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011b1e:	881b      	ldrh	r3, [r3, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011b20:	8809      	ldrh	r1, [r1, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011b22:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011b24:	b289      	uxth	r1, r1
      if (PageStatus0 == VALID_PAGE)
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	f000 8094 	beq.w	8011c54 <EE_Init+0x334>
      else if (PageStatus1 == VALID_PAGE)
 8011b2c:	2900      	cmp	r1, #0
 8011b2e:	f040 80c5 	bne.w	8011cbc <EE_Init+0x39c>
 8011b32:	4936      	ldr	r1, [pc, #216]	; (8011c0c <EE_Init+0x2ec>)
 8011b34:	4694      	mov	ip, r2
 8011b36:	4f36      	ldr	r7, [pc, #216]	; (8011c10 <EE_Init+0x2f0>)
 8011b38:	460b      	mov	r3, r1
    AddressValue = (*(__IO uint16_t*)Address);
 8011b3a:	8809      	ldrh	r1, [r1, #0]
    if (AddressValue == VirtAddress)
 8011b3c:	4288      	cmp	r0, r1
 8011b3e:	d106      	bne.n	8011b4e <EE_Init+0x22e>
 8011b40:	e094      	b.n	8011c6c <EE_Init+0x34c>
    AddressValue = (*(__IO uint16_t*)Address);
 8011b42:	f833 7c20 	ldrh.w	r7, [r3, #-32]
    if (AddressValue == VirtAddress)
 8011b46:	42b8      	cmp	r0, r7
 8011b48:	f000 808e 	beq.w	8011c68 <EE_Init+0x348>
 8011b4c:	460b      	mov	r3, r1
      Address = Address - 32;
 8011b4e:	f1a3 0120 	sub.w	r1, r3, #32
  while (Address > (PageStartAddress + 32))
 8011b52:	4561      	cmp	r1, ip
 8011b54:	d8f5      	bhi.n	8011b42 <EE_Init+0x222>
 8011b56:	3401      	adds	r4, #1
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8011b58:	2c03      	cmp	r4, #3
 8011b5a:	d1d5      	bne.n	8011b08 <EE_Init+0x1e8>
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8011b5c:	aa0e      	add	r2, sp, #56	; 0x38
 8011b5e:	4927      	ldr	r1, [pc, #156]	; (8011bfc <EE_Init+0x2dc>)
 8011b60:	2001      	movs	r0, #1
 8011b62:	f7f3 f8a5 	bl	8004cb0 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 8011b66:	2800      	cmp	r0, #0
 8011b68:	f43f af2d 	beq.w	80119c6 <EE_Init+0xa6>
 8011b6c:	e78c      	b.n	8011a88 <EE_Init+0x168>
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8011b6e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8011b72:	42af      	cmp	r7, r5
 8011b74:	f000 8096 	beq.w	8011ca4 <EE_Init+0x384>
 8011b78:	9301      	str	r3, [sp, #4]
  uint32_t valid[8] = {0x0000};
 8011b7a:	ab16      	add	r3, sp, #88	; 0x58
 8011b7c:	464a      	mov	r2, r9
 8011b7e:	4641      	mov	r1, r8
 8011b80:	4618      	mov	r0, r3
 8011b82:	9300      	str	r3, [sp, #0]
  uint32_t SectorError = 0;
 8011b84:	f8cd 800c 	str.w	r8, [sp, #12]
  uint32_t valid[8] = {0x0000};
 8011b88:	f015 f997 	bl	8026eba <memset>
  pEraseInit.Banks = FLASH_BANK_2 ;
 8011b8c:	9b01      	ldr	r3, [sp, #4]
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8011b8e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8011b92:	e9cd 3b0a 	strd	r3, fp, [sp, #40]	; 0x28
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011b96:	e9cd a90c 	strd	sl, r9, [sp, #48]	; 0x30
 8011b9a:	e002      	b.n	8011ba2 <EE_Init+0x282>
  while (Address <= PAGE0_END_ADDRESS)
 8011b9c:	42b4      	cmp	r4, r6
 8011b9e:	f43f af0b 	beq.w	80119b8 <EE_Init+0x98>
    AddressValue = (*(__IO uint16_t*)Address);
 8011ba2:	8823      	ldrh	r3, [r4, #0]
    Address = Address + 4;
 8011ba4:	3404      	adds	r4, #4
    if (AddressValue != ERASED)
 8011ba6:	429d      	cmp	r5, r3
 8011ba8:	d0f8      	beq.n	8011b9c <EE_Init+0x27c>
 8011baa:	e6ff      	b.n	80119ac <EE_Init+0x8c>
  while (Address <= PAGE0_END_ADDRESS)
 8011bac:	42b4      	cmp	r4, r6
 8011bae:	d00a      	beq.n	8011bc6 <EE_Init+0x2a6>
    AddressValue = (*(__IO uint16_t*)Address);
 8011bb0:	8823      	ldrh	r3, [r4, #0]
    Address = Address + 4;
 8011bb2:	3404      	adds	r4, #4
    if (AddressValue != ERASED)
 8011bb4:	429d      	cmp	r5, r3
 8011bb6:	d0f9      	beq.n	8011bac <EE_Init+0x28c>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011bb8:	a902      	add	r1, sp, #8
 8011bba:	a804      	add	r0, sp, #16
 8011bbc:	f7f3 f9f2 	bl	8004fa4 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	f47f af61 	bne.w	8011a88 <EE_Init+0x168>
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8011bc6:	aa0e      	add	r2, sp, #56	; 0x38
 8011bc8:	490d      	ldr	r1, [pc, #52]	; (8011c00 <EE_Init+0x2e0>)
 8011bca:	2001      	movs	r0, #1
 8011bcc:	f7f3 f870 	bl	8004cb0 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	f43f aef8 	beq.w	80119c6 <EE_Init+0xa6>
 8011bd6:	e757      	b.n	8011a88 <EE_Init+0x168>
 8011bd8:	9301      	str	r3, [sp, #4]
  uint32_t valid[8] = {0x0000};
 8011bda:	ab16      	add	r3, sp, #88	; 0x58
 8011bdc:	464a      	mov	r2, r9
 8011bde:	4639      	mov	r1, r7
 8011be0:	4618      	mov	r0, r3
 8011be2:	9300      	str	r3, [sp, #0]
  uint32_t SectorError = 0;
 8011be4:	9703      	str	r7, [sp, #12]
  uint32_t valid[8] = {0x0000};
 8011be6:	f015 f968 	bl	8026eba <memset>
  pEraseInit.Banks = FLASH_BANK_2 ;
 8011bea:	9b01      	ldr	r3, [sp, #4]
    if (AddressValue != ERASED)
 8011bec:	f64f 72ff 	movw	r2, #65535	; 0xffff
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8011bf0:	9709      	str	r7, [sp, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8011bf2:	e9cd 3b0a 	strd	r3, fp, [sp, #40]	; 0x28
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011bf6:	e9cd a90c 	strd	sl, r9, [sp, #48]	; 0x30
 8011bfa:	e017      	b.n	8011c2c <EE_Init+0x30c>
 8011bfc:	081c0000 	.word	0x081c0000
 8011c00:	081e0000 	.word	0x081e0000
 8011c04:	2000001c 	.word	0x2000001c
 8011c08:	081e0020 	.word	0x081e0020
 8011c0c:	081fffe0 	.word	0x081fffe0
 8011c10:	081fffc0 	.word	0x081fffc0
 8011c14:	081e0006 	.word	0x081e0006
 8011c18:	081dffc0 	.word	0x081dffc0
 8011c1c:	081dffe0 	.word	0x081dffe0
 8011c20:	081c0020 	.word	0x081c0020
 8011c24:	081c0006 	.word	0x081c0006
  while (Address <= PAGE0_END_ADDRESS)
 8011c28:	42b4      	cmp	r4, r6
 8011c2a:	d00a      	beq.n	8011c42 <EE_Init+0x322>
    AddressValue = (*(__IO uint16_t*)Address);
 8011c2c:	8823      	ldrh	r3, [r4, #0]
    Address = Address + 4;
 8011c2e:	3404      	adds	r4, #4
    if (AddressValue != ERASED)
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d0f9      	beq.n	8011c28 <EE_Init+0x308>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011c34:	a903      	add	r1, sp, #12
 8011c36:	a809      	add	r0, sp, #36	; 0x24
 8011c38:	f7f3 f9b4 	bl	8004fa4 <HAL_FLASHEx_Erase>
    if (FlashStatus != HAL_OK)
 8011c3c:	2800      	cmp	r0, #0
 8011c3e:	f47f af23 	bne.w	8011a88 <EE_Init+0x168>
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 8011c42:	9a00      	ldr	r2, [sp, #0]
 8011c44:	2001      	movs	r0, #1
 8011c46:	4920      	ldr	r1, [pc, #128]	; (8011cc8 <EE_Init+0x3a8>)
 8011c48:	f7f3 f832 	bl	8004cb0 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 8011c4c:	2800      	cmp	r0, #0
 8011c4e:	f43f aebb 	beq.w	80119c8 <EE_Init+0xa8>
 8011c52:	e719      	b.n	8011a88 <EE_Init+0x168>
      if (PageStatus0 == VALID_PAGE)
 8011c54:	465f      	mov	r7, fp
 8011c56:	46d4      	mov	ip, sl
 8011c58:	4649      	mov	r1, r9
 8011c5a:	464b      	mov	r3, r9
 8011c5c:	e76d      	b.n	8011b3a <EE_Init+0x21a>
 8011c5e:	465f      	mov	r7, fp
 8011c60:	4649      	mov	r1, r9
 8011c62:	464b      	mov	r3, r9
 8011c64:	46d4      	mov	ip, sl
 8011c66:	e6df      	b.n	8011a28 <EE_Init+0x108>
 8011c68:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
      *Data = (*(__IO uint16_t*)(Address - 32));
 8011c6c:	8839      	ldrh	r1, [r7, #0]
 8011c6e:	4b17      	ldr	r3, [pc, #92]	; (8011ccc <EE_Init+0x3ac>)
 8011c70:	b289      	uxth	r1, r1
 8011c72:	8019      	strh	r1, [r3, #0]
 8011c74:	9200      	str	r2, [sp, #0]
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8011c76:	f7ff fdff 	bl	8011878 <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 8011c7a:	9a00      	ldr	r2, [sp, #0]
 8011c7c:	4607      	mov	r7, r0
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	f43f af69 	beq.w	8011b56 <EE_Init+0x236>
 8011c84:	e6a0      	b.n	80119c8 <EE_Init+0xa8>
 8011c86:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
      *Data = (*(__IO uint16_t*)(Address - 32));
 8011c8a:	8839      	ldrh	r1, [r7, #0]
 8011c8c:	4b0f      	ldr	r3, [pc, #60]	; (8011ccc <EE_Init+0x3ac>)
 8011c8e:	b289      	uxth	r1, r1
 8011c90:	8019      	strh	r1, [r3, #0]
 8011c92:	9200      	str	r2, [sp, #0]
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8011c94:	f7ff fdf0 	bl	8011878 <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 8011c98:	9a00      	ldr	r2, [sp, #0]
 8011c9a:	4607      	mov	r7, r0
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	f43f aed1 	beq.w	8011a44 <EE_Init+0x124>
 8011ca2:	e691      	b.n	80119c8 <EE_Init+0xa8>
        pEraseInit.Sector = PAGE1_ID;
 8011ca4:	2307      	movs	r3, #7
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8011ca6:	aa0e      	add	r2, sp, #56	; 0x38
 8011ca8:	4621      	mov	r1, r4
 8011caa:	4650      	mov	r0, sl
        pEraseInit.Sector = PAGE1_ID;
 8011cac:	e9cd a305 	strd	sl, r3, [sp, #20]
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8011cb0:	f7f2 fffe 	bl	8004cb0 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	f43f ae86 	beq.w	80119c6 <EE_Init+0xa6>
 8011cba:	e6e5      	b.n	8011a88 <EE_Init+0x168>
 8011cbc:	4b03      	ldr	r3, [pc, #12]	; (8011ccc <EE_Init+0x3ac>)
 8011cbe:	8819      	ldrh	r1, [r3, #0]
 8011cc0:	e7d8      	b.n	8011c74 <EE_Init+0x354>
 8011cc2:	4b02      	ldr	r3, [pc, #8]	; (8011ccc <EE_Init+0x3ac>)
 8011cc4:	8819      	ldrh	r1, [r3, #0]
 8011cc6:	e7e4      	b.n	8011c92 <EE_Init+0x372>
 8011cc8:	081c0000 	.word	0x081c0000
 8011ccc:	20000524 	.word	0x20000524

08011cd0 <EE_ReadVariable>:
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011cd0:	4b15      	ldr	r3, [pc, #84]	; (8011d28 <EE_ReadVariable+0x58>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011cd2:	4a16      	ldr	r2, [pc, #88]	; (8011d2c <EE_ReadVariable+0x5c>)
{
 8011cd4:	b430      	push	{r4, r5}
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011cd6:	881b      	ldrh	r3, [r3, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011cd8:	8812      	ldrh	r2, [r2, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011cda:	b29b      	uxth	r3, r3
      if (PageStatus0 == VALID_PAGE)
 8011cdc:	b133      	cbz	r3, 8011cec <EE_ReadVariable+0x1c>
 8011cde:	b292      	uxth	r2, r2
      else if (PageStatus1 == VALID_PAGE)
 8011ce0:	b9fa      	cbnz	r2, 8011d22 <EE_ReadVariable+0x52>
 8011ce2:	4b13      	ldr	r3, [pc, #76]	; (8011d30 <EE_ReadVariable+0x60>)
 8011ce4:	4c13      	ldr	r4, [pc, #76]	; (8011d34 <EE_ReadVariable+0x64>)
 8011ce6:	461a      	mov	r2, r3
 8011ce8:	4d13      	ldr	r5, [pc, #76]	; (8011d38 <EE_ReadVariable+0x68>)
 8011cea:	e003      	b.n	8011cf4 <EE_ReadVariable+0x24>
      if (PageStatus0 == VALID_PAGE)
 8011cec:	4b13      	ldr	r3, [pc, #76]	; (8011d3c <EE_ReadVariable+0x6c>)
 8011cee:	4c14      	ldr	r4, [pc, #80]	; (8011d40 <EE_ReadVariable+0x70>)
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	4d14      	ldr	r5, [pc, #80]	; (8011d44 <EE_ReadVariable+0x74>)
    AddressValue = (*(__IO uint16_t*)Address);
 8011cf4:	8812      	ldrh	r2, [r2, #0]
    if (AddressValue == VirtAddress)
 8011cf6:	4290      	cmp	r0, r2
 8011cf8:	d105      	bne.n	8011d06 <EE_ReadVariable+0x36>
 8011cfa:	e00d      	b.n	8011d18 <EE_ReadVariable+0x48>
    AddressValue = (*(__IO uint16_t*)Address);
 8011cfc:	f833 4c20 	ldrh.w	r4, [r3, #-32]
    if (AddressValue == VirtAddress)
 8011d00:	42a0      	cmp	r0, r4
 8011d02:	d007      	beq.n	8011d14 <EE_ReadVariable+0x44>
 8011d04:	4613      	mov	r3, r2
      Address = Address - 32;
 8011d06:	f1a3 0220 	sub.w	r2, r3, #32
  while (Address > (PageStartAddress + 32))
 8011d0a:	42aa      	cmp	r2, r5
 8011d0c:	d8f6      	bhi.n	8011cfc <EE_ReadVariable+0x2c>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8011d0e:	2001      	movs	r0, #1
}
 8011d10:	bc30      	pop	{r4, r5}
 8011d12:	4770      	bx	lr
 8011d14:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
      *Data = (*(__IO uint16_t*)(Address - 32));
 8011d18:	8823      	ldrh	r3, [r4, #0]
      ReadStatus = 0;
 8011d1a:	2000      	movs	r0, #0
      *Data = (*(__IO uint16_t*)(Address - 32));
 8011d1c:	800b      	strh	r3, [r1, #0]
}
 8011d1e:	bc30      	pop	{r4, r5}
 8011d20:	4770      	bx	lr
    return  NO_VALID_PAGE;
 8011d22:	20ab      	movs	r0, #171	; 0xab
}
 8011d24:	bc30      	pop	{r4, r5}
 8011d26:	4770      	bx	lr
 8011d28:	081c0000 	.word	0x081c0000
 8011d2c:	081e0000 	.word	0x081e0000
 8011d30:	081fffe0 	.word	0x081fffe0
 8011d34:	081fffc0 	.word	0x081fffc0
 8011d38:	081e0020 	.word	0x081e0020
 8011d3c:	081dffe0 	.word	0x081dffe0
 8011d40:	081dffc0 	.word	0x081dffc0
 8011d44:	081c0020 	.word	0x081c0020

08011d48 <EE_WriteVariable>:
{
 8011d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t data32[8] = {Data};
 8011d4c:	2300      	movs	r3, #0
{
 8011d4e:	b099      	sub	sp, #100	; 0x64
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011d50:	4c71      	ldr	r4, [pc, #452]	; (8011f18 <EE_WriteVariable+0x1d0>)
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011d52:	4a72      	ldr	r2, [pc, #456]	; (8011f1c <EE_WriteVariable+0x1d4>)
  uint32_t VirtAddress1[8] = {VirtAddress};
 8011d54:	9010      	str	r0, [sp, #64]	; 0x40
  uint32_t data32[8] = {Data};
 8011d56:	9108      	str	r1, [sp, #32]
 8011d58:	930f      	str	r3, [sp, #60]	; 0x3c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8011d5a:	9317      	str	r3, [sp, #92]	; 0x5c
  uint32_t data32[8] = {Data};
 8011d5c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8011d60:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8011d64:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  uint32_t VirtAddress1[8] = {VirtAddress};
 8011d68:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8011d6c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 8011d70:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011d74:	8823      	ldrh	r3, [r4, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011d76:	8812      	ldrh	r2, [r2, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011d78:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011d7a:	b292      	uxth	r2, r2
      if (PageStatus1 == VALID_PAGE)
 8011d7c:	bb2a      	cbnz	r2, 8011dca <EE_WriteVariable+0x82>
        if (PageStatus0 == RECEIVE_DATA)
 8011d7e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
          return PAGE1;         /* Page1 valid */
 8011d82:	1a9b      	subs	r3, r3, r2
 8011d84:	bf18      	it	ne
 8011d86:	2301      	movne	r3, #1
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8011d88:	f203 470e 	addw	r7, r3, #1038	; 0x40e
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8011d8c:	4a64      	ldr	r2, [pc, #400]	; (8011f20 <EE_WriteVariable+0x1d8>)
 8011d8e:	3301      	adds	r3, #1
 8011d90:	4688      	mov	r8, r1
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8011d92:	047f      	lsls	r7, r7, #17
 8011d94:	4604      	mov	r4, r0
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8011d96:	eb02 4243 	add.w	r2, r2, r3, lsl #17
  while (Address < PageEndAddress)
 8011d9a:	4297      	cmp	r7, r2
 8011d9c:	d303      	bcc.n	8011da6 <EE_WriteVariable+0x5e>
 8011d9e:	e021      	b.n	8011de4 <EE_WriteVariable+0x9c>
      Address = Address + 64;
 8011da0:	3740      	adds	r7, #64	; 0x40
  while (Address < PageEndAddress)
 8011da2:	42ba      	cmp	r2, r7
 8011da4:	d91e      	bls.n	8011de4 <EE_WriteVariable+0x9c>
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	3301      	adds	r3, #1
 8011daa:	d1f9      	bne.n	8011da0 <EE_WriteVariable+0x58>
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8011dac:	ae08      	add	r6, sp, #32
 8011dae:	4639      	mov	r1, r7
 8011db0:	2001      	movs	r0, #1
 8011db2:	4632      	mov	r2, r6
 8011db4:	f7f2 ff7c 	bl	8004cb0 <HAL_FLASH_Program>
      if (FlashStatus != HAL_OK)
 8011db8:	2800      	cmp	r0, #0
 8011dba:	d03f      	beq.n	8011e3c <EE_WriteVariable+0xf4>
     return FlashStatus;
 8011dbc:	b285      	uxth	r5, r0
  if (Status == PAGE_FULL)
 8011dbe:	2d80      	cmp	r5, #128	; 0x80
 8011dc0:	d011      	beq.n	8011de6 <EE_WriteVariable+0x9e>
}
 8011dc2:	4628      	mov	r0, r5
 8011dc4:	b019      	add	sp, #100	; 0x64
 8011dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (PageStatus0 == VALID_PAGE)
 8011dca:	b933      	cbnz	r3, 8011dda <EE_WriteVariable+0x92>
        if (PageStatus1 == RECEIVE_DATA)
 8011dcc:	f64e 63ee 	movw	r3, #61166	; 0xeeee
          return PAGE1;         /* Page1 valid */
 8011dd0:	1ad3      	subs	r3, r2, r3
 8011dd2:	fab3 f383 	clz	r3, r3
 8011dd6:	095b      	lsrs	r3, r3, #5
 8011dd8:	e7d6      	b.n	8011d88 <EE_WriteVariable+0x40>
    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8011dda:	25ab      	movs	r5, #171	; 0xab
}
 8011ddc:	4628      	mov	r0, r5
 8011dde:	b019      	add	sp, #100	; 0x64
 8011de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011de4:	ae08      	add	r6, sp, #32
  uint32_t SectorError = 0;
 8011de6:	2500      	movs	r5, #0
  uint32_t valid[8] = {0x0000};
 8011de8:	2220      	movs	r2, #32
 8011dea:	4630      	mov	r0, r6
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011dec:	4f4b      	ldr	r7, [pc, #300]	; (8011f1c <EE_WriteVariable+0x1d4>)
  uint32_t valid[8] = {0x0000};
 8011dee:	4629      	mov	r1, r5
  uint32_t SectorError = 0;
 8011df0:	9502      	str	r5, [sp, #8]
  uint32_t valid[8] = {0x0000};
 8011df2:	f015 f862 	bl	8026eba <memset>
  uint32_t receive[8] = {0xEEEE};
 8011df6:	f64e 63ee 	movw	r3, #61166	; 0xeeee
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011dfa:	4947      	ldr	r1, [pc, #284]	; (8011f18 <EE_WriteVariable+0x1d0>)
  uint32_t receive[8] = {0xEEEE};
 8011dfc:	9517      	str	r5, [sp, #92]	; 0x5c
 8011dfe:	9310      	str	r3, [sp, #64]	; 0x40
 8011e00:	e9cd 5511 	strd	r5, r5, [sp, #68]	; 0x44
 8011e04:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
 8011e08:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011e0c:	880b      	ldrh	r3, [r1, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011e0e:	883a      	ldrh	r2, [r7, #0]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011e10:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011e12:	b292      	uxth	r2, r2
      if (PageStatus0 == VALID_PAGE)
 8011e14:	b17b      	cbz	r3, 8011e36 <EE_WriteVariable+0xee>
      else if (PageStatus1 == VALID_PAGE)
 8011e16:	2a00      	cmp	r2, #0
 8011e18:	d1df      	bne.n	8011dda <EE_WriteVariable+0x92>
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8011e1a:	460f      	mov	r7, r1
      else if (PageStatus1 == VALID_PAGE)
 8011e1c:	f04f 0907 	mov.w	r9, #7
  }

  /* Set the new Page status to RECEIVE_DATA status */

  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8011e20:	aa10      	add	r2, sp, #64	; 0x40
 8011e22:	4639      	mov	r1, r7
 8011e24:	2001      	movs	r0, #1
 8011e26:	f7f2 ff43 	bl	8004cb0 <HAL_FLASH_Program>

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8011e2a:	b170      	cbz	r0, 8011e4a <EE_WriteVariable+0x102>
  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
  {
    return FlashStatus;
 8011e2c:	b285      	uxth	r5, r0
}
 8011e2e:	4628      	mov	r0, r5
 8011e30:	b019      	add	sp, #100	; 0x64
 8011e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (PageStatus0 == VALID_PAGE)
 8011e36:	f04f 0906 	mov.w	r9, #6
 8011e3a:	e7f1      	b.n	8011e20 <EE_WriteVariable+0xd8>
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8011e3c:	f107 0120 	add.w	r1, r7, #32
 8011e40:	aa10      	add	r2, sp, #64	; 0x40
 8011e42:	2001      	movs	r0, #1
 8011e44:	f7f2 ff34 	bl	8004cb0 <HAL_FLASH_Program>
 8011e48:	e7b8      	b.n	8011dbc <EE_WriteVariable+0x74>
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8011e4a:	4641      	mov	r1, r8
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	f7ff fd13 	bl	8011878 <EE_VerifyPageFullWriteVariable>
  if (EepromStatus != HAL_OK)
 8011e52:	4605      	mov	r5, r0
 8011e54:	2800      	cmp	r0, #0
 8011e56:	d1b4      	bne.n	8011dc2 <EE_WriteVariable+0x7a>
 8011e58:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8011f30 <EE_WriteVariable+0x1e8>
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011e5c:	4a2e      	ldr	r2, [pc, #184]	; (8011f18 <EE_WriteVariable+0x1d0>)
 8011e5e:	f108 0a06 	add.w	sl, r8, #6
      if (PageStatus0 == VALID_PAGE)
 8011e62:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8011f34 <EE_WriteVariable+0x1ec>
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8011e66:	f838 0b02 	ldrh.w	r0, [r8], #2
 8011e6a:	4284      	cmp	r4, r0
 8011e6c:	d01b      	beq.n	8011ea6 <EE_WriteVariable+0x15e>
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011e6e:	8813      	ldrh	r3, [r2, #0]
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011e70:	492a      	ldr	r1, [pc, #168]	; (8011f1c <EE_WriteVariable+0x1d4>)
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011e72:	b29b      	uxth	r3, r3
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011e74:	8809      	ldrh	r1, [r1, #0]
 8011e76:	b289      	uxth	r1, r1
      if (PageStatus0 == VALID_PAGE)
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d034      	beq.n	8011ee6 <EE_WriteVariable+0x19e>
      else if (PageStatus1 == VALID_PAGE)
 8011e7c:	2900      	cmp	r1, #0
 8011e7e:	d148      	bne.n	8011f12 <EE_WriteVariable+0x1ca>
 8011e80:	4928      	ldr	r1, [pc, #160]	; (8011f24 <EE_WriteVariable+0x1dc>)
 8011e82:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8011f38 <EE_WriteVariable+0x1f0>
 8011e86:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8011f3c <EE_WriteVariable+0x1f4>
 8011e8a:	460b      	mov	r3, r1
    AddressValue = (*(__IO uint16_t*)Address);
 8011e8c:	8809      	ldrh	r1, [r1, #0]
    if (AddressValue == VirtAddress)
 8011e8e:	4288      	cmp	r0, r1
 8011e90:	d105      	bne.n	8011e9e <EE_WriteVariable+0x156>
 8011e92:	e031      	b.n	8011ef8 <EE_WriteVariable+0x1b0>
    AddressValue = (*(__IO uint16_t*)Address);
 8011e94:	f833 cc20 	ldrh.w	ip, [r3, #-32]
    if (AddressValue == VirtAddress)
 8011e98:	4560      	cmp	r0, ip
 8011e9a:	d02b      	beq.n	8011ef4 <EE_WriteVariable+0x1ac>
 8011e9c:	460b      	mov	r3, r1
      Address = Address - 32;
 8011e9e:	f1a3 0120 	sub.w	r1, r3, #32
  while (Address > (PageStartAddress + 32))
 8011ea2:	458e      	cmp	lr, r1
 8011ea4:	d3f6      	bcc.n	8011e94 <EE_WriteVariable+0x14c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8011ea6:	45d0      	cmp	r8, sl
 8011ea8:	d1dd      	bne.n	8011e66 <EE_WriteVariable+0x11e>
  HAL_FLASH_Unlock();
 8011eaa:	f7f2 ff77 	bl	8004d9c <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8011eae:	4b1e      	ldr	r3, [pc, #120]	; (8011f28 <EE_WriteVariable+0x1e0>)
 8011eb0:	f44f 008e 	mov.w	r0, #4653056	; 0x470000
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8011eb4:	2100      	movs	r1, #0
  pEraseInit.Banks = FLASH_BANK_2 ;
 8011eb6:	2202      	movs	r2, #2
  pEraseInit.NbSectors = 1;
 8011eb8:	2401      	movs	r4, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8011eba:	6158      	str	r0, [r3, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011ebc:	2320      	movs	r3, #32
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8011ebe:	9103      	str	r1, [sp, #12]
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011ec0:	a803      	add	r0, sp, #12
 8011ec2:	a902      	add	r1, sp, #8
  pEraseInit.Sector = OldPageId;
 8011ec4:	f8cd 9014 	str.w	r9, [sp, #20]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8011ec8:	9204      	str	r2, [sp, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8011eca:	e9cd 4306 	strd	r4, r3, [sp, #24]
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8011ece:	f7f3 f869 	bl	8004fa4 <HAL_FLASHEx_Erase>
  if (FlashStatus != HAL_OK)
 8011ed2:	2800      	cmp	r0, #0
 8011ed4:	d1aa      	bne.n	8011e2c <EE_WriteVariable+0xe4>
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8011ed6:	4632      	mov	r2, r6
 8011ed8:	4639      	mov	r1, r7
 8011eda:	4620      	mov	r0, r4
 8011edc:	f7f2 fee8 	bl	8004cb0 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 8011ee0:	2800      	cmp	r0, #0
 8011ee2:	d1a3      	bne.n	8011e2c <EE_WriteVariable+0xe4>
 8011ee4:	e76d      	b.n	8011dc2 <EE_WriteVariable+0x7a>
      if (PageStatus0 == VALID_PAGE)
 8011ee6:	f8df c058 	ldr.w	ip, [pc, #88]	; 8011f40 <EE_WriteVariable+0x1f8>
 8011eea:	4659      	mov	r1, fp
 8011eec:	465b      	mov	r3, fp
 8011eee:	f8df e054 	ldr.w	lr, [pc, #84]	; 8011f44 <EE_WriteVariable+0x1fc>
 8011ef2:	e7cb      	b.n	8011e8c <EE_WriteVariable+0x144>
 8011ef4:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
      *Data = (*(__IO uint16_t*)(Address - 32));
 8011ef8:	f8bc 1000 	ldrh.w	r1, [ip]
 8011efc:	4b0b      	ldr	r3, [pc, #44]	; (8011f2c <EE_WriteVariable+0x1e4>)
 8011efe:	b289      	uxth	r1, r1
 8011f00:	8019      	strh	r1, [r3, #0]
 8011f02:	9201      	str	r2, [sp, #4]
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8011f04:	f7ff fcb8 	bl	8011878 <EE_VerifyPageFullWriteVariable>
        if (EepromStatus != HAL_OK)
 8011f08:	9a01      	ldr	r2, [sp, #4]
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	d0cb      	beq.n	8011ea6 <EE_WriteVariable+0x15e>
 8011f0e:	4605      	mov	r5, r0
  return Status;
 8011f10:	e757      	b.n	8011dc2 <EE_WriteVariable+0x7a>
 8011f12:	4b06      	ldr	r3, [pc, #24]	; (8011f2c <EE_WriteVariable+0x1e4>)
 8011f14:	8819      	ldrh	r1, [r3, #0]
 8011f16:	e7f4      	b.n	8011f02 <EE_WriteVariable+0x1ba>
 8011f18:	081c0000 	.word	0x081c0000
 8011f1c:	081e0000 	.word	0x081e0000
 8011f20:	081bffff 	.word	0x081bffff
 8011f24:	081fffe0 	.word	0x081fffe0
 8011f28:	52002000 	.word	0x52002000
 8011f2c:	20000524 	.word	0x20000524
 8011f30:	2000001c 	.word	0x2000001c
 8011f34:	081dffe0 	.word	0x081dffe0
 8011f38:	081e0020 	.word	0x081e0020
 8011f3c:	081fffc0 	.word	0x081fffc0
 8011f40:	081dffc0 	.word	0x081dffc0
 8011f44:	081c0020 	.word	0x081c0020

08011f48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8011f48:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011f4a:	4903      	ldr	r1, [pc, #12]	; (8011f58 <MX_FATFS_Init+0x10>)
 8011f4c:	4803      	ldr	r0, [pc, #12]	; (8011f5c <MX_FATFS_Init+0x14>)
 8011f4e:	f7fe fcb9 	bl	80108c4 <FATFS_LinkDriver>
 8011f52:	4b03      	ldr	r3, [pc, #12]	; (8011f60 <MX_FATFS_Init+0x18>)
 8011f54:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8011f56:	bd08      	pop	{r3, pc}
 8011f58:	20001178 	.word	0x20001178
 8011f5c:	0802ae10 	.word	0x0802ae10
 8011f60:	20001174 	.word	0x20001174

08011f64 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011f64:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011f66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011f6a:	4803      	ldr	r0, [pc, #12]	; (8011f78 <BSP_PlatformIsDetected+0x14>)
 8011f6c:	f7f3 fc4c 	bl	8005808 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 8011f70:	fab0 f080 	clz	r0, r0
 8011f74:	0940      	lsrs	r0, r0, #5
 8011f76:	bd08      	pop	{r3, pc}
 8011f78:	58020800 	.word	0x58020800

08011f7c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8011f7c:	b570      	push	{r4, r5, r6, lr}
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8011f7e:	4b18      	ldr	r3, [pc, #96]	; (8011fe0 <MX_FMC_Init+0x64>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8011f80:	2001      	movs	r0, #1
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8011f82:	4d18      	ldr	r5, [pc, #96]	; (8011fe4 <MX_FMC_Init+0x68>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8011f84:	2108      	movs	r1, #8
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8011f86:	2410      	movs	r4, #16
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8011f88:	2240      	movs	r2, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8011f8a:	601d      	str	r5, [r3, #0]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8011f8c:	f44f 7580 	mov.w	r5, #256	; 0x100
{
 8011f90:	b088      	sub	sp, #32
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
 8011f92:	2604      	movs	r6, #4
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8011f94:	6098      	str	r0, [r3, #8]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8011f96:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8011f9a:	60d9      	str	r1, [r3, #12]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8011f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8011fa0:	611c      	str	r4, [r3, #16]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8011fa2:	2400      	movs	r4, #0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8011fa4:	615a      	str	r2, [r3, #20]
  SdramTiming.LoadToActiveDelay = 2;
 8011fa6:	2202      	movs	r2, #2
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8011fa8:	619d      	str	r5, [r3, #24]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8011faa:	2506      	movs	r5, #6
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8011fac:	6218      	str	r0, [r3, #32]
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8011fae:	4618      	mov	r0, r3
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8011fb0:	6259      	str	r1, [r3, #36]	; 0x24
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8011fb2:	eb0d 0106 	add.w	r1, sp, r6
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8011fb6:	605c      	str	r4, [r3, #4]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8011fb8:	61dc      	str	r4, [r3, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8011fba:	629c      	str	r4, [r3, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8011fbc:	9201      	str	r2, [sp, #4]
  SdramTiming.RCDDelay = 2;
 8011fbe:	9207      	str	r2, [sp, #28]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8011fc0:	9502      	str	r5, [sp, #8]
  SdramTiming.RPDelay = 2;
 8011fc2:	e9cd 2205 	strd	r2, r2, [sp, #20]
  SdramTiming.SelfRefreshTime = 4;
 8011fc6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8011fca:	f7fa f90f 	bl	800c1ec <HAL_SDRAM_Init>
 8011fce:	b108      	cbz	r0, 8011fd4 <MX_FMC_Init+0x58>
  {
    Error_Handler( );
 8011fd0:	f001 fcb6 	bl	8013940 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8011fd4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8011fd8:	f7ee fd40 	bl	8000a5c <HAL_SetFMCMemorySwappingConfig>

}
 8011fdc:	b008      	add	sp, #32
 8011fde:	bd70      	pop	{r4, r5, r6, pc}
 8011fe0:	200015dc 	.word	0x200015dc
 8011fe4:	52004140 	.word	0x52004140

08011fe8 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8011fe8:	4a2a      	ldr	r2, [pc, #168]	; (8012094 <HAL_SDRAM_MspInit+0xac>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011fea:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8011fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fee:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8011ff0:	6814      	ldr	r4, [r2, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ff2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8011ff6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8011ffa:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8011ffc:	b10c      	cbz	r4, 8012002 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8011ffe:	b007      	add	sp, #28
 8012000:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_RCC_FMC_CLK_ENABLE();
 8012002:	4b25      	ldr	r3, [pc, #148]	; (8012098 <HAL_SDRAM_MspInit+0xb0>)
  FMC_Initialized = 1;
 8012004:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8012006:	f64f 003f 	movw	r0, #63551	; 0xf83f
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801200a:	2702      	movs	r7, #2
  FMC_Initialized = 1;
 801200c:	6011      	str	r1, [r2, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801200e:	2603      	movs	r6, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8012010:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8012014:	250c      	movs	r5, #12
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012016:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8012018:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801201c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8012020:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8012024:	9001      	str	r0, [sp, #4]
  __HAL_RCC_FMC_CLK_ENABLE();
 8012026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801202a:	481c      	ldr	r0, [pc, #112]	; (801209c <HAL_SDRAM_MspInit+0xb4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801202c:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 801202e:	9300      	str	r3, [sp, #0]
 8012030:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8012032:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012036:	f7f3 f8bf 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 801203a:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801203c:	a901      	add	r1, sp, #4
 801203e:	4818      	ldr	r0, [pc, #96]	; (80120a0 <HAL_SDRAM_MspInit+0xb8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8012040:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012042:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012044:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8012046:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801204a:	f7f3 f8b5 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 801204e:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012052:	a901      	add	r1, sp, #4
 8012054:	4813      	ldr	r0, [pc, #76]	; (80120a4 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8012056:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012058:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801205a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801205c:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012060:	f7f3 f8aa 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8012064:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012068:	a901      	add	r1, sp, #4
 801206a:	480f      	ldr	r0, [pc, #60]	; (80120a8 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 801206c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801206e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012070:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8012072:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012076:	f7f3 f89f 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 801207a:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801207e:	a901      	add	r1, sp, #4
 8012080:	480a      	ldr	r0, [pc, #40]	; (80120ac <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012082:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012084:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8012086:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8012088:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801208c:	f7f3 f894 	bl	80051b8 <HAL_GPIO_Init>
}
 8012090:	b007      	add	sp, #28
 8012092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012094:	2000052c 	.word	0x2000052c
 8012098:	58024400 	.word	0x58024400
 801209c:	58021400 	.word	0x58021400
 80120a0:	58020800 	.word	0x58020800
 80120a4:	58021800 	.word	0x58021800
 80120a8:	58021000 	.word	0x58021000
 80120ac:	58020c00 	.word	0x58020c00

080120b0 <GFXdrawPixel.part.0>:
void GFXstartWrite(GFX* myGFX){
    // Overwrite in subclasses if desired!
}

// the most basic function, set a single pixel
void GFXdrawPixel(GFX* myGFX, int16_t x, int16_t y, uint16_t color) {
 80120b0:	b430      	push	{r4, r5}
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
    return;

  // check rotation, move pixel around if necessary
  switch (GFXgetRotation(myGFX)) {
 80120b2:	7a04      	ldrb	r4, [r0, #8]
 80120b4:	2c02      	cmp	r4, #2
 80120b6:	d050      	beq.n	801215a <GFXdrawPixel.part.0+0xaa>
 80120b8:	2c03      	cmp	r4, #3
 80120ba:	d048      	beq.n	801214e <GFXdrawPixel.part.0+0x9e>
 80120bc:	2c01      	cmp	r4, #1
 80120be:	d018      	beq.n	80120f2 <GFXdrawPixel.part.0+0x42>
    y = myGFX->HEIGHT - y - 1;
    break;
  }

  // x is which column
    switch (color)
 80120c0:	2b01      	cmp	r3, #1
 80120c2:	d01e      	beq.n	8012102 <GFXdrawPixel.part.0+0x52>
 80120c4:	d32f      	bcc.n	8012126 <GFXdrawPixel.part.0+0x76>
 80120c6:	2b02      	cmp	r3, #2
 80120c8:	d111      	bne.n	80120ee <GFXdrawPixel.part.0+0x3e>
    {
      case WHITE:   buffer[x+ (y/8)*myGFX->WIDTH] |=  (1 << (y&7)); break;
      case BLACK:   buffer[x+ (y/8)*myGFX->WIDTH] &= ~(1 << (y&7)); break;
      case INVERSE: buffer[x+ (y/8)*myGFX->WIDTH] ^=  (1 << (y&7)); break;
 80120ca:	2a00      	cmp	r2, #0
 80120cc:	4613      	mov	r3, r2
 80120ce:	8804      	ldrh	r4, [r0, #0]
 80120d0:	f04f 0001 	mov.w	r0, #1
 80120d4:	bfb8      	it	lt
 80120d6:	1dd3      	addlt	r3, r2, #7
 80120d8:	f002 0207 	and.w	r2, r2, #7
 80120dc:	10db      	asrs	r3, r3, #3
 80120de:	fa00 f202 	lsl.w	r2, r0, r2
 80120e2:	fb13 1104 	smlabb	r1, r3, r4, r1
 80120e6:	4b21      	ldr	r3, [pc, #132]	; (801216c <GFXdrawPixel.part.0+0xbc>)
 80120e8:	5c58      	ldrb	r0, [r3, r1]
 80120ea:	4042      	eors	r2, r0
 80120ec:	545a      	strb	r2, [r3, r1]
    }

}
 80120ee:	bc30      	pop	{r4, r5}
 80120f0:	4770      	bx	lr
    x = myGFX->WIDTH - x - 1;
 80120f2:	43d4      	mvns	r4, r2
 80120f4:	8805      	ldrh	r5, [r0, #0]
    _swap_int16_t(x, y);
 80120f6:	460a      	mov	r2, r1
    switch (color)
 80120f8:	2b01      	cmp	r3, #1
    x = myGFX->WIDTH - x - 1;
 80120fa:	eb04 0105 	add.w	r1, r4, r5
 80120fe:	b209      	sxth	r1, r1
    switch (color)
 8012100:	d1e0      	bne.n	80120c4 <GFXdrawPixel.part.0+0x14>
      case WHITE:   buffer[x+ (y/8)*myGFX->WIDTH] |=  (1 << (y&7)); break;
 8012102:	2a00      	cmp	r2, #0
 8012104:	4613      	mov	r3, r2
 8012106:	8804      	ldrh	r4, [r0, #0]
 8012108:	f002 0007 	and.w	r0, r2, #7
 801210c:	bfb8      	it	lt
 801210e:	1dd3      	addlt	r3, r2, #7
 8012110:	2201      	movs	r2, #1
 8012112:	10db      	asrs	r3, r3, #3
 8012114:	4082      	lsls	r2, r0
 8012116:	fb13 1104 	smlabb	r1, r3, r4, r1
 801211a:	4b14      	ldr	r3, [pc, #80]	; (801216c <GFXdrawPixel.part.0+0xbc>)
 801211c:	5c58      	ldrb	r0, [r3, r1]
 801211e:	4302      	orrs	r2, r0
 8012120:	545a      	strb	r2, [r3, r1]
}
 8012122:	bc30      	pop	{r4, r5}
 8012124:	4770      	bx	lr
      case BLACK:   buffer[x+ (y/8)*myGFX->WIDTH] &= ~(1 << (y&7)); break;
 8012126:	2a00      	cmp	r2, #0
 8012128:	4613      	mov	r3, r2
 801212a:	8800      	ldrh	r0, [r0, #0]
 801212c:	f002 0407 	and.w	r4, r2, #7
 8012130:	bfb8      	it	lt
 8012132:	1dd3      	addlt	r3, r2, #7
 8012134:	2201      	movs	r2, #1
 8012136:	10db      	asrs	r3, r3, #3
 8012138:	fb13 1100 	smlabb	r1, r3, r0, r1
 801213c:	480b      	ldr	r0, [pc, #44]	; (801216c <GFXdrawPixel.part.0+0xbc>)
 801213e:	fa02 f304 	lsl.w	r3, r2, r4
 8012142:	5c42      	ldrb	r2, [r0, r1]
 8012144:	ea22 0203 	bic.w	r2, r2, r3
 8012148:	5442      	strb	r2, [r0, r1]
}
 801214a:	bc30      	pop	{r4, r5}
 801214c:	4770      	bx	lr
    y = myGFX->HEIGHT - y - 1;
 801214e:	43cc      	mvns	r4, r1
 8012150:	8845      	ldrh	r5, [r0, #2]
	_swap_int16_t(x, y);
 8012152:	4611      	mov	r1, r2
    y = myGFX->HEIGHT - y - 1;
 8012154:	1962      	adds	r2, r4, r5
 8012156:	b212      	sxth	r2, r2
 8012158:	e7b2      	b.n	80120c0 <GFXdrawPixel.part.0+0x10>
    x = myGFX->WIDTH - x - 1;
 801215a:	43c9      	mvns	r1, r1
    y = myGFX->HEIGHT - y - 1;
 801215c:	43d2      	mvns	r2, r2
    x = myGFX->WIDTH - x - 1;
 801215e:	8805      	ldrh	r5, [r0, #0]
    y = myGFX->HEIGHT - y - 1;
 8012160:	8844      	ldrh	r4, [r0, #2]
    x = myGFX->WIDTH - x - 1;
 8012162:	4429      	add	r1, r5
    y = myGFX->HEIGHT - y - 1;
 8012164:	4422      	add	r2, r4
    x = myGFX->WIDTH - x - 1;
 8012166:	b209      	sxth	r1, r1
    y = myGFX->HEIGHT - y - 1;
 8012168:	b212      	sxth	r2, r2
 801216a:	e7a9      	b.n	80120c0 <GFXdrawPixel.part.0+0x10>
 801216c:	20018474 	.word	0x20018474

08012170 <GFXinit>:
	myGfx->WIDTH = w;
 8012170:	2300      	movs	r3, #0
	myGfx->_width    = w;
 8012172:	8081      	strh	r1, [r0, #4]
	myGfx->_height   = h;
 8012174:	80c2      	strh	r2, [r0, #6]
	myGfx->WIDTH = w;
 8012176:	f361 030f 	bfi	r3, r1, #0, #16
	myGfx->rotation  = 0;
 801217a:	2101      	movs	r1, #1
	myGfx->WIDTH = w;
 801217c:	f362 431f 	bfi	r3, r2, #16, #16
	myGfx->fontHeight = 8;
 8012180:	2208      	movs	r2, #8
	myGfx->rotation  = 0;
 8012182:	6141      	str	r1, [r0, #20]
	myGfx->WIDTH = w;
 8012184:	6003      	str	r3, [r0, #0]
	myGfx->rotation  = 0;
 8012186:	2300      	movs	r3, #0
	myGfx->fontHeight = 8;
 8012188:	61c2      	str	r2, [r0, #28]
	myGfx->rotation  = 0;
 801218a:	6083      	str	r3, [r0, #8]
	myGfx->gfxFont   = NULL;
 801218c:	6183      	str	r3, [r0, #24]
{
 801218e:	b430      	push	{r4, r5}
	myGfx->rotation  = 0;
 8012190:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8012194:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012198:	e9c0 5403 	strd	r5, r4, [r0, #12]
}
 801219c:	bc30      	pop	{r4, r5}
 801219e:	4770      	bx	lr

080121a0 <GFXwriteLine>:
        uint16_t color) {
 80121a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a4:	b083      	sub	sp, #12
 80121a6:	461e      	mov	r6, r3
 80121a8:	4617      	mov	r7, r2
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80121aa:	4694      	mov	ip, r2
        uint16_t color) {
 80121ac:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
 80121b0:	4682      	mov	sl, r0
 80121b2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80121b6:	1aab      	subs	r3, r5, r2
 80121b8:	1a72      	subs	r2, r6, r1
        uint16_t color) {
 80121ba:	9001      	str	r0, [sp, #4]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80121bc:	2b00      	cmp	r3, #0
 80121be:	bfb8      	it	lt
 80121c0:	425b      	neglt	r3, r3
 80121c2:	2a00      	cmp	r2, #0
 80121c4:	bfb8      	it	lt
 80121c6:	4252      	neglt	r2, r2
    if (steep) {
 80121c8:	4293      	cmp	r3, r2
 80121ca:	dc7d      	bgt.n	80122c8 <GFXwriteLine+0x128>
 80121cc:	46ae      	mov	lr, r5
 80121ce:	462c      	mov	r4, r5
 80121d0:	46bb      	mov	fp, r7
 80121d2:	4635      	mov	r5, r6
 80121d4:	460f      	mov	r7, r1
 80121d6:	4676      	mov	r6, lr
 80121d8:	4661      	mov	r1, ip
 80121da:	4698      	mov	r8, r3
    if (x0 > x1) {
 80121dc:	42af      	cmp	r7, r5
 80121de:	dd5f      	ble.n	80122a0 <GFXwriteLine+0x100>
    dx = x1 - x0;
 80121e0:	eba7 0905 	sub.w	r9, r7, r5
 80121e4:	ebab 0004 	sub.w	r0, fp, r4
    if (y0 < y1) {
 80121e8:	f64f 7bff 	movw	fp, #65535	; 0xffff
    dx = x1 - x0;
 80121ec:	fa1f f989 	uxth.w	r9, r9
 80121f0:	ea80 78e0 	eor.w	r8, r0, r0, asr #31
    int16_t err = dx / 2;
 80121f4:	fa0f f489 	sxth.w	r4, r9
 80121f8:	eba8 78e0 	sub.w	r8, r8, r0, asr #31
 80121fc:	2c00      	cmp	r4, #0
 80121fe:	bfb8      	it	lt
 8012200:	3401      	addlt	r4, #1
    if (y0 < y1) {
 8012202:	42b1      	cmp	r1, r6
 8012204:	bfc8      	it	gt
 8012206:	f04f 0b01 	movgt.w	fp, #1
    int16_t err = dx / 2;
 801220a:	1064      	asrs	r4, r4, #1
 801220c:	4293      	cmp	r3, r2
 801220e:	fa1f f888 	uxth.w	r8, r8
 8012212:	dc3c      	bgt.n	801228e <GFXwriteLine+0xee>
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 8012214:	2d00      	cmp	r5, #0
 8012216:	db0f      	blt.n	8012238 <GFXwriteLine+0x98>
 8012218:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 801221c:	42ab      	cmp	r3, r5
 801221e:	dd0b      	ble.n	8012238 <GFXwriteLine+0x98>
 8012220:	0432      	lsls	r2, r6, #16
 8012222:	d409      	bmi.n	8012238 <GFXwriteLine+0x98>
 8012224:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8012228:	4632      	mov	r2, r6
 801222a:	4629      	mov	r1, r5
 801222c:	9b01      	ldr	r3, [sp, #4]
 801222e:	42b0      	cmp	r0, r6
 8012230:	4650      	mov	r0, sl
 8012232:	dd01      	ble.n	8012238 <GFXwriteLine+0x98>
 8012234:	f7ff ff3c 	bl	80120b0 <GFXdrawPixel.part.0>
        err -= dy;
 8012238:	eba4 0408 	sub.w	r4, r4, r8
 801223c:	3501      	adds	r5, #1
 801223e:	b2a3      	uxth	r3, r4
 8012240:	b22d      	sxth	r5, r5
 8012242:	b21c      	sxth	r4, r3
        if (err < 0) {
 8012244:	2c00      	cmp	r4, #0
 8012246:	da04      	bge.n	8012252 <GFXwriteLine+0xb2>
            y0 += ystep;
 8012248:	445e      	add	r6, fp
            err += dx;
 801224a:	eb09 0403 	add.w	r4, r9, r3
            y0 += ystep;
 801224e:	b236      	sxth	r6, r6
            err += dx;
 8012250:	b224      	sxth	r4, r4
    for (; x0<=x1; x0++) {
 8012252:	42af      	cmp	r7, r5
 8012254:	dade      	bge.n	8012214 <GFXwriteLine+0x74>
}
 8012256:	b003      	add	sp, #12
 8012258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 801225c:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8012260:	462a      	mov	r2, r5
 8012262:	4631      	mov	r1, r6
 8012264:	9b01      	ldr	r3, [sp, #4]
 8012266:	4285      	cmp	r5, r0
 8012268:	4650      	mov	r0, sl
 801226a:	da01      	bge.n	8012270 <GFXwriteLine+0xd0>
 801226c:	f7ff ff20 	bl	80120b0 <GFXdrawPixel.part.0>
        err -= dy;
 8012270:	eba4 0408 	sub.w	r4, r4, r8
 8012274:	3501      	adds	r5, #1
 8012276:	b2a3      	uxth	r3, r4
 8012278:	b22d      	sxth	r5, r5
 801227a:	b21c      	sxth	r4, r3
        if (err < 0) {
 801227c:	2c00      	cmp	r4, #0
 801227e:	da04      	bge.n	801228a <GFXwriteLine+0xea>
            y0 += ystep;
 8012280:	445e      	add	r6, fp
            err += dx;
 8012282:	eb03 0409 	add.w	r4, r3, r9
            y0 += ystep;
 8012286:	b236      	sxth	r6, r6
            err += dx;
 8012288:	b224      	sxth	r4, r4
    for (; x0<=x1; x0++) {
 801228a:	42af      	cmp	r7, r5
 801228c:	dbe3      	blt.n	8012256 <GFXwriteLine+0xb6>
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 801228e:	2e00      	cmp	r6, #0
 8012290:	dbee      	blt.n	8012270 <GFXwriteLine+0xd0>
 8012292:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8012296:	429e      	cmp	r6, r3
 8012298:	daea      	bge.n	8012270 <GFXwriteLine+0xd0>
 801229a:	042b      	lsls	r3, r5, #16
 801229c:	d4e8      	bmi.n	8012270 <GFXwriteLine+0xd0>
 801229e:	e7dd      	b.n	801225c <GFXwriteLine+0xbc>
    dx = x1 - x0;
 80122a0:	eba5 0907 	sub.w	r9, r5, r7
    if (y0 < y1) {
 80122a4:	4628      	mov	r0, r5
 80122a6:	463d      	mov	r5, r7
    dx = x1 - x0;
 80122a8:	fa1f f989 	uxth.w	r9, r9
    int16_t err = dx / 2;
 80122ac:	fa0f f489 	sxth.w	r4, r9
 80122b0:	2c00      	cmp	r4, #0
 80122b2:	bfb8      	it	lt
 80122b4:	3401      	addlt	r4, #1
    if (y0 < y1) {
 80122b6:	42b1      	cmp	r1, r6
 80122b8:	460e      	mov	r6, r1
    int16_t err = dx / 2;
 80122ba:	ea4f 0464 	mov.w	r4, r4, asr #1
    if (y0 < y1) {
 80122be:	da07      	bge.n	80122d0 <GFXwriteLine+0x130>
 80122c0:	f04f 0b01 	mov.w	fp, #1
 80122c4:	4607      	mov	r7, r0
 80122c6:	e7a1      	b.n	801220c <GFXwriteLine+0x6c>
 80122c8:	4634      	mov	r4, r6
 80122ca:	468b      	mov	fp, r1
 80122cc:	4690      	mov	r8, r2
 80122ce:	e785      	b.n	80121dc <GFXwriteLine+0x3c>
 80122d0:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80122d4:	4607      	mov	r7, r0
 80122d6:	e799      	b.n	801220c <GFXwriteLine+0x6c>

080122d8 <GFXdrawPixel>:
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 80122d8:	2900      	cmp	r1, #0
 80122da:	db28      	blt.n	801232e <GFXdrawPixel+0x56>
void GFXdrawPixel(GFX* myGFX, int16_t x, int16_t y, uint16_t color) {
 80122dc:	b430      	push	{r4, r5}
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 80122de:	8884      	ldrh	r4, [r0, #4]
 80122e0:	42a1      	cmp	r1, r4
 80122e2:	da22      	bge.n	801232a <GFXdrawPixel+0x52>
 80122e4:	2a00      	cmp	r2, #0
 80122e6:	db20      	blt.n	801232a <GFXdrawPixel+0x52>
 80122e8:	88c4      	ldrh	r4, [r0, #6]
 80122ea:	42a2      	cmp	r2, r4
 80122ec:	da1d      	bge.n	801232a <GFXdrawPixel+0x52>
  switch (GFXgetRotation(myGFX)) {
 80122ee:	7a04      	ldrb	r4, [r0, #8]
 80122f0:	2c02      	cmp	r4, #2
 80122f2:	d04e      	beq.n	8012392 <GFXdrawPixel+0xba>
 80122f4:	2c03      	cmp	r4, #3
 80122f6:	d046      	beq.n	8012386 <GFXdrawPixel+0xae>
 80122f8:	2c01      	cmp	r4, #1
 80122fa:	d019      	beq.n	8012330 <GFXdrawPixel+0x58>
    switch (color)
 80122fc:	2b01      	cmp	r3, #1
 80122fe:	d02f      	beq.n	8012360 <GFXdrawPixel+0x88>
 8012300:	d31c      	bcc.n	801233c <GFXdrawPixel+0x64>
 8012302:	2b02      	cmp	r3, #2
 8012304:	d111      	bne.n	801232a <GFXdrawPixel+0x52>
      case INVERSE: buffer[x+ (y/8)*myGFX->WIDTH] ^=  (1 << (y&7)); break;
 8012306:	2a00      	cmp	r2, #0
 8012308:	4613      	mov	r3, r2
 801230a:	8804      	ldrh	r4, [r0, #0]
 801230c:	f04f 0001 	mov.w	r0, #1
 8012310:	bfb8      	it	lt
 8012312:	1dd3      	addlt	r3, r2, #7
 8012314:	f002 0207 	and.w	r2, r2, #7
 8012318:	10db      	asrs	r3, r3, #3
 801231a:	fa00 f202 	lsl.w	r2, r0, r2
 801231e:	fb13 1104 	smlabb	r1, r3, r4, r1
 8012322:	4b20      	ldr	r3, [pc, #128]	; (80123a4 <GFXdrawPixel+0xcc>)
 8012324:	5c58      	ldrb	r0, [r3, r1]
 8012326:	4042      	eors	r2, r0
 8012328:	545a      	strb	r2, [r3, r1]
}
 801232a:	bc30      	pop	{r4, r5}
 801232c:	4770      	bx	lr
 801232e:	4770      	bx	lr
    x = myGFX->WIDTH - x - 1;
 8012330:	43d4      	mvns	r4, r2
 8012332:	8805      	ldrh	r5, [r0, #0]
 8012334:	460a      	mov	r2, r1
 8012336:	1961      	adds	r1, r4, r5
 8012338:	b209      	sxth	r1, r1
 801233a:	e7df      	b.n	80122fc <GFXdrawPixel+0x24>
      case BLACK:   buffer[x+ (y/8)*myGFX->WIDTH] &= ~(1 << (y&7)); break;
 801233c:	2a00      	cmp	r2, #0
 801233e:	4613      	mov	r3, r2
 8012340:	8800      	ldrh	r0, [r0, #0]
 8012342:	f002 0407 	and.w	r4, r2, #7
 8012346:	bfb8      	it	lt
 8012348:	1dd3      	addlt	r3, r2, #7
 801234a:	2201      	movs	r2, #1
 801234c:	10db      	asrs	r3, r3, #3
 801234e:	40a2      	lsls	r2, r4
 8012350:	fb13 1100 	smlabb	r1, r3, r0, r1
 8012354:	4813      	ldr	r0, [pc, #76]	; (80123a4 <GFXdrawPixel+0xcc>)
 8012356:	5c43      	ldrb	r3, [r0, r1]
 8012358:	ea23 0302 	bic.w	r3, r3, r2
 801235c:	5443      	strb	r3, [r0, r1]
 801235e:	e7e4      	b.n	801232a <GFXdrawPixel+0x52>
      case WHITE:   buffer[x+ (y/8)*myGFX->WIDTH] |=  (1 << (y&7)); break;
 8012360:	2a00      	cmp	r2, #0
 8012362:	4613      	mov	r3, r2
 8012364:	8804      	ldrh	r4, [r0, #0]
 8012366:	f04f 0001 	mov.w	r0, #1
 801236a:	bfb8      	it	lt
 801236c:	1dd3      	addlt	r3, r2, #7
 801236e:	f002 0207 	and.w	r2, r2, #7
 8012372:	10db      	asrs	r3, r3, #3
 8012374:	fb13 1104 	smlabb	r1, r3, r4, r1
 8012378:	4c0a      	ldr	r4, [pc, #40]	; (80123a4 <GFXdrawPixel+0xcc>)
 801237a:	fa00 f302 	lsl.w	r3, r0, r2
 801237e:	5c62      	ldrb	r2, [r4, r1]
 8012380:	4313      	orrs	r3, r2
 8012382:	5463      	strb	r3, [r4, r1]
 8012384:	e7d1      	b.n	801232a <GFXdrawPixel+0x52>
    y = myGFX->HEIGHT - y - 1;
 8012386:	8844      	ldrh	r4, [r0, #2]
 8012388:	3c01      	subs	r4, #1
 801238a:	1a64      	subs	r4, r4, r1
 801238c:	4611      	mov	r1, r2
 801238e:	b222      	sxth	r2, r4
 8012390:	e7b4      	b.n	80122fc <GFXdrawPixel+0x24>
    x = myGFX->WIDTH - x - 1;
 8012392:	8804      	ldrh	r4, [r0, #0]
    y = myGFX->HEIGHT - y - 1;
 8012394:	43d2      	mvns	r2, r2
 8012396:	8845      	ldrh	r5, [r0, #2]
    x = myGFX->WIDTH - x - 1;
 8012398:	3c01      	subs	r4, #1
    y = myGFX->HEIGHT - y - 1;
 801239a:	442a      	add	r2, r5
    x = myGFX->WIDTH - x - 1;
 801239c:	1a61      	subs	r1, r4, r1
    y = myGFX->HEIGHT - y - 1;
 801239e:	b212      	sxth	r2, r2
    x = myGFX->WIDTH - x - 1;
 80123a0:	b209      	sxth	r1, r1
 80123a2:	e7ab      	b.n	80122fc <GFXdrawPixel+0x24>
 80123a4:	20018474 	.word	0x20018474

080123a8 <GFXfillRect>:
 80123a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ac:	440b      	add	r3, r1
 80123ae:	b089      	sub	sp, #36	; 0x24
 80123b0:	428b      	cmp	r3, r1
 80123b2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80123b6:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 80123ba:	9502      	str	r5, [sp, #8]
 80123bc:	f340 80b5 	ble.w	801252a <GFXfillRect+0x182>
 80123c0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 80123c4:	4494      	add	ip, r2
 80123c6:	fa0f fc8c 	sxth.w	ip, ip
 80123ca:	4562      	cmp	r2, ip
 80123cc:	bfcb      	itete	gt
 80123ce:	4615      	movgt	r5, r2
 80123d0:	4665      	movle	r5, ip
 80123d2:	4664      	movgt	r4, ip
 80123d4:	4614      	movle	r4, r2
 80123d6:	9504      	str	r5, [sp, #16]
 80123d8:	9403      	str	r4, [sp, #12]
 80123da:	1b2c      	subs	r4, r5, r4
 80123dc:	b2a4      	uxth	r4, r4
 80123de:	b225      	sxth	r5, r4
 80123e0:	9407      	str	r4, [sp, #28]
 80123e2:	ebac 0402 	sub.w	r4, ip, r2
 80123e6:	2d00      	cmp	r5, #0
 80123e8:	bfb8      	it	lt
 80123ea:	3501      	addlt	r5, #1
 80123ec:	2c00      	cmp	r4, #0
 80123ee:	ea4f 0565 	mov.w	r5, r5, asr #1
 80123f2:	bfb8      	it	lt
 80123f4:	4264      	neglt	r4, r4
 80123f6:	9506      	str	r5, [sp, #24]
 80123f8:	9405      	str	r4, [sp, #20]
 80123fa:	4562      	cmp	r2, ip
 80123fc:	f040 8098 	bne.w	8012530 <GFXfillRect+0x188>
 8012400:	2600      	movs	r6, #0
 8012402:	460c      	mov	r4, r1
 8012404:	4688      	mov	r8, r1
 8012406:	f8dd e014 	ldr.w	lr, [sp, #20]
 801240a:	46b2      	mov	sl, r6
 801240c:	4617      	mov	r7, r2
 801240e:	fa1f fe8e 	uxth.w	lr, lr
 8012412:	9301      	str	r3, [sp, #4]
 8012414:	e046      	b.n	80124a4 <GFXfillRect+0xfc>
 8012416:	2f00      	cmp	r7, #0
 8012418:	db35      	blt.n	8012486 <GFXfillRect+0xde>
 801241a:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 801241e:	454f      	cmp	r7, r9
 8012420:	da31      	bge.n	8012486 <GFXfillRect+0xde>
 8012422:	0beb      	lsrs	r3, r5, #15
 8012424:	d12f      	bne.n	8012486 <GFXfillRect+0xde>
 8012426:	f8b0 9006 	ldrh.w	r9, [r0, #6]
 801242a:	454c      	cmp	r4, r9
 801242c:	da2b      	bge.n	8012486 <GFXfillRect+0xde>
 801242e:	f890 9008 	ldrb.w	r9, [r0, #8]
 8012432:	f1b9 0f02 	cmp.w	r9, #2
 8012436:	f000 80df 	beq.w	80125f8 <GFXfillRect+0x250>
 801243a:	f1b9 0f03 	cmp.w	r9, #3
 801243e:	f000 80d3 	beq.w	80125e8 <GFXfillRect+0x240>
 8012442:	f1b9 0f01 	cmp.w	r9, #1
 8012446:	f000 80c5 	beq.w	80125d4 <GFXfillRect+0x22c>
 801244a:	46b9      	mov	r9, r7
 801244c:	9b02      	ldr	r3, [sp, #8]
 801244e:	2b01      	cmp	r3, #1
 8012450:	f000 80a9 	beq.w	80125a6 <GFXfillRect+0x1fe>
 8012454:	d378      	bcc.n	8012548 <GFXfillRect+0x1a0>
 8012456:	2b02      	cmp	r3, #2
 8012458:	d115      	bne.n	8012486 <GFXfillRect+0xde>
 801245a:	2c00      	cmp	r4, #0
 801245c:	46a3      	mov	fp, r4
 801245e:	8803      	ldrh	r3, [r0, #0]
 8012460:	bfb8      	it	lt
 8012462:	f104 0b07 	addlt.w	fp, r4, #7
 8012466:	f004 0407 	and.w	r4, r4, #7
 801246a:	ea4f 0beb 	mov.w	fp, fp, asr #3
 801246e:	fb1b 9903 	smlabb	r9, fp, r3, r9
 8012472:	2301      	movs	r3, #1
 8012474:	fa03 f404 	lsl.w	r4, r3, r4
 8012478:	4b81      	ldr	r3, [pc, #516]	; (8012680 <GFXfillRect+0x2d8>)
 801247a:	f813 b009 	ldrb.w	fp, [r3, r9]
 801247e:	ea84 040b 	eor.w	r4, r4, fp
 8012482:	f803 4009 	strb.w	r4, [r3, r9]
 8012486:	eba6 060e 	sub.w	r6, r6, lr
 801248a:	b2b4      	uxth	r4, r6
 801248c:	b226      	sxth	r6, r4
 801248e:	2e00      	cmp	r6, #0
 8012490:	da04      	bge.n	801249c <GFXfillRect+0xf4>
 8012492:	3f01      	subs	r7, #1
 8012494:	eb04 060a 	add.w	r6, r4, sl
 8012498:	b23f      	sxth	r7, r7
 801249a:	b236      	sxth	r6, r6
 801249c:	1c6c      	adds	r4, r5, #1
 801249e:	b224      	sxth	r4, r4
 80124a0:	4544      	cmp	r4, r8
 80124a2:	dc3c      	bgt.n	801251e <GFXfillRect+0x176>
 80124a4:	4562      	cmp	r2, ip
 80124a6:	b2a5      	uxth	r5, r4
 80124a8:	d1b5      	bne.n	8012416 <GFXfillRect+0x6e>
 80124aa:	2c00      	cmp	r4, #0
 80124ac:	dbeb      	blt.n	8012486 <GFXfillRect+0xde>
 80124ae:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 80124b2:	454c      	cmp	r4, r9
 80124b4:	dae7      	bge.n	8012486 <GFXfillRect+0xde>
 80124b6:	043b      	lsls	r3, r7, #16
 80124b8:	d4e5      	bmi.n	8012486 <GFXfillRect+0xde>
 80124ba:	f8b0 9006 	ldrh.w	r9, [r0, #6]
 80124be:	454f      	cmp	r7, r9
 80124c0:	dae1      	bge.n	8012486 <GFXfillRect+0xde>
 80124c2:	f890 9008 	ldrb.w	r9, [r0, #8]
 80124c6:	f1b9 0f02 	cmp.w	r9, #2
 80124ca:	f000 80cc 	beq.w	8012666 <GFXfillRect+0x2be>
 80124ce:	f1b9 0f03 	cmp.w	r9, #3
 80124d2:	f000 80be 	beq.w	8012652 <GFXfillRect+0x2aa>
 80124d6:	f1b9 0f01 	cmp.w	r9, #1
 80124da:	f000 80b2 	beq.w	8012642 <GFXfillRect+0x29a>
 80124de:	46b9      	mov	r9, r7
 80124e0:	9b02      	ldr	r3, [sp, #8]
 80124e2:	2b01      	cmp	r3, #1
 80124e4:	f000 8095 	beq.w	8012612 <GFXfillRect+0x26a>
 80124e8:	d345      	bcc.n	8012576 <GFXfillRect+0x1ce>
 80124ea:	2b02      	cmp	r3, #2
 80124ec:	d1cb      	bne.n	8012486 <GFXfillRect+0xde>
 80124ee:	f1b9 0f00 	cmp.w	r9, #0
 80124f2:	46cb      	mov	fp, r9
 80124f4:	8803      	ldrh	r3, [r0, #0]
 80124f6:	bfb8      	it	lt
 80124f8:	f109 0b07 	addlt.w	fp, r9, #7
 80124fc:	f009 0907 	and.w	r9, r9, #7
 8012500:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8012504:	fb1b 4b03 	smlabb	fp, fp, r3, r4
 8012508:	2301      	movs	r3, #1
 801250a:	fa03 f909 	lsl.w	r9, r3, r9
 801250e:	4b5c      	ldr	r3, [pc, #368]	; (8012680 <GFXfillRect+0x2d8>)
 8012510:	f813 400b 	ldrb.w	r4, [r3, fp]
 8012514:	ea89 0404 	eor.w	r4, r9, r4
 8012518:	f803 400b 	strb.w	r4, [r3, fp]
 801251c:	e7b3      	b.n	8012486 <GFXfillRect+0xde>
 801251e:	9b01      	ldr	r3, [sp, #4]
 8012520:	3101      	adds	r1, #1
 8012522:	b209      	sxth	r1, r1
 8012524:	4299      	cmp	r1, r3
 8012526:	f6ff af68 	blt.w	80123fa <GFXfillRect+0x52>
 801252a:	b009      	add	sp, #36	; 0x24
 801252c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012530:	9c03      	ldr	r4, [sp, #12]
 8012532:	9e04      	ldr	r6, [sp, #16]
 8012534:	42b4      	cmp	r4, r6
 8012536:	dcf3      	bgt.n	8012520 <GFXfillRect+0x178>
 8012538:	46b0      	mov	r8, r6
 801253a:	460f      	mov	r7, r1
 801253c:	9e06      	ldr	r6, [sp, #24]
 801253e:	f04f 0e00 	mov.w	lr, #0
 8012542:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012546:	e762      	b.n	801240e <GFXfillRect+0x66>
 8012548:	2c00      	cmp	r4, #0
 801254a:	46a3      	mov	fp, r4
 801254c:	8803      	ldrh	r3, [r0, #0]
 801254e:	bfb8      	it	lt
 8012550:	f104 0b07 	addlt.w	fp, r4, #7
 8012554:	f004 0407 	and.w	r4, r4, #7
 8012558:	ea4f 0beb 	mov.w	fp, fp, asr #3
 801255c:	fb1b 9903 	smlabb	r9, fp, r3, r9
 8012560:	2301      	movs	r3, #1
 8012562:	fa03 f404 	lsl.w	r4, r3, r4
 8012566:	4b46      	ldr	r3, [pc, #280]	; (8012680 <GFXfillRect+0x2d8>)
 8012568:	f813 b009 	ldrb.w	fp, [r3, r9]
 801256c:	ea2b 0404 	bic.w	r4, fp, r4
 8012570:	f803 4009 	strb.w	r4, [r3, r9]
 8012574:	e787      	b.n	8012486 <GFXfillRect+0xde>
 8012576:	f1b9 0f00 	cmp.w	r9, #0
 801257a:	46cb      	mov	fp, r9
 801257c:	8803      	ldrh	r3, [r0, #0]
 801257e:	bfb8      	it	lt
 8012580:	f109 0b07 	addlt.w	fp, r9, #7
 8012584:	f009 0907 	and.w	r9, r9, #7
 8012588:	ea4f 0beb 	mov.w	fp, fp, asr #3
 801258c:	fb1b 4b03 	smlabb	fp, fp, r3, r4
 8012590:	2301      	movs	r3, #1
 8012592:	fa03 f909 	lsl.w	r9, r3, r9
 8012596:	4b3a      	ldr	r3, [pc, #232]	; (8012680 <GFXfillRect+0x2d8>)
 8012598:	f813 400b 	ldrb.w	r4, [r3, fp]
 801259c:	ea24 0409 	bic.w	r4, r4, r9
 80125a0:	f803 400b 	strb.w	r4, [r3, fp]
 80125a4:	e76f      	b.n	8012486 <GFXfillRect+0xde>
 80125a6:	2c00      	cmp	r4, #0
 80125a8:	46a3      	mov	fp, r4
 80125aa:	8803      	ldrh	r3, [r0, #0]
 80125ac:	bfb8      	it	lt
 80125ae:	f104 0b07 	addlt.w	fp, r4, #7
 80125b2:	f004 0407 	and.w	r4, r4, #7
 80125b6:	ea4f 0beb 	mov.w	fp, fp, asr #3
 80125ba:	fb1b 9903 	smlabb	r9, fp, r3, r9
 80125be:	2301      	movs	r3, #1
 80125c0:	fa03 f404 	lsl.w	r4, r3, r4
 80125c4:	4b2e      	ldr	r3, [pc, #184]	; (8012680 <GFXfillRect+0x2d8>)
 80125c6:	f813 b009 	ldrb.w	fp, [r3, r9]
 80125ca:	ea44 040b 	orr.w	r4, r4, fp
 80125ce:	f803 4009 	strb.w	r4, [r3, r9]
 80125d2:	e758      	b.n	8012486 <GFXfillRect+0xde>
 80125d4:	f8b0 9000 	ldrh.w	r9, [r0]
 80125d8:	463c      	mov	r4, r7
 80125da:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80125de:	eba9 0905 	sub.w	r9, r9, r5
 80125e2:	fa0f f989 	sxth.w	r9, r9
 80125e6:	e731      	b.n	801244c <GFXfillRect+0xa4>
 80125e8:	f8b0 b002 	ldrh.w	fp, [r0, #2]
 80125ec:	46a1      	mov	r9, r4
 80125ee:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
 80125f2:	1be4      	subs	r4, r4, r7
 80125f4:	b224      	sxth	r4, r4
 80125f6:	e729      	b.n	801244c <GFXfillRect+0xa4>
 80125f8:	f8b0 9000 	ldrh.w	r9, [r0]
 80125fc:	8844      	ldrh	r4, [r0, #2]
 80125fe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8012602:	3c01      	subs	r4, #1
 8012604:	eba9 0907 	sub.w	r9, r9, r7
 8012608:	1b64      	subs	r4, r4, r5
 801260a:	fa0f f989 	sxth.w	r9, r9
 801260e:	b224      	sxth	r4, r4
 8012610:	e71c      	b.n	801244c <GFXfillRect+0xa4>
 8012612:	f1b9 0f00 	cmp.w	r9, #0
 8012616:	46cb      	mov	fp, r9
 8012618:	8803      	ldrh	r3, [r0, #0]
 801261a:	bfb8      	it	lt
 801261c:	f109 0b07 	addlt.w	fp, r9, #7
 8012620:	f009 0907 	and.w	r9, r9, #7
 8012624:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8012628:	fb1b 4b03 	smlabb	fp, fp, r3, r4
 801262c:	2301      	movs	r3, #1
 801262e:	fa03 f909 	lsl.w	r9, r3, r9
 8012632:	4b13      	ldr	r3, [pc, #76]	; (8012680 <GFXfillRect+0x2d8>)
 8012634:	f813 400b 	ldrb.w	r4, [r3, fp]
 8012638:	ea49 0404 	orr.w	r4, r9, r4
 801263c:	f803 400b 	strb.w	r4, [r3, fp]
 8012640:	e721      	b.n	8012486 <GFXfillRect+0xde>
 8012642:	f8b0 b000 	ldrh.w	fp, [r0]
 8012646:	46a1      	mov	r9, r4
 8012648:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
 801264c:	1be4      	subs	r4, r4, r7
 801264e:	b224      	sxth	r4, r4
 8012650:	e746      	b.n	80124e0 <GFXfillRect+0x138>
 8012652:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 8012656:	463c      	mov	r4, r7
 8012658:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801265c:	eba9 0905 	sub.w	r9, r9, r5
 8012660:	fa0f f989 	sxth.w	r9, r9
 8012664:	e73c      	b.n	80124e0 <GFXfillRect+0x138>
 8012666:	8804      	ldrh	r4, [r0, #0]
 8012668:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 801266c:	3c01      	subs	r4, #1
 801266e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8012672:	1b64      	subs	r4, r4, r5
 8012674:	eba9 0907 	sub.w	r9, r9, r7
 8012678:	b224      	sxth	r4, r4
 801267a:	fa0f f989 	sxth.w	r9, r9
 801267e:	e72f      	b.n	80124e0 <GFXfillRect+0x138>
 8012680:	20018474 	.word	0x20018474

08012684 <GFXdrawChar>:

// TEXT- AND CHARACTER-HANDLING FUNCTIONS ----------------------------------

// Draw a character
void GFXdrawChar(GFX* myGFX, int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
 8012684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012688:	b09b      	sub	sp, #108	; 0x6c
 801268a:	4682      	mov	sl, r0

    if(!myGFX->gfxFont) { // 'Classic' built-in font
 801268c:	6980      	ldr	r0, [r0, #24]
  uint16_t color, uint16_t bg, uint8_t size) {
 801268e:	9204      	str	r2, [sp, #16]
 8012690:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8012694:	920b      	str	r2, [sp, #44]	; 0x2c
 8012696:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 801269a:	9202      	str	r2, [sp, #8]
 801269c:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
 80126a0:	920d      	str	r2, [sp, #52]	; 0x34
    if(!myGFX->gfxFont) { // 'Classic' built-in font
 80126a2:	2800      	cmp	r0, #0
 80126a4:	f000 811e 	beq.w	80128e4 <GFXdrawChar+0x260>

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&myGFX->gfxFont->first);
 80126a8:	7a04      	ldrb	r4, [r0, #8]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&myGFX->gfxFont->glyph))[c]);
 80126aa:	6842      	ldr	r2, [r0, #4]
        c -= (uint8_t)pgm_read_byte(&myGFX->gfxFont->first);
 80126ac:	1b1b      	subs	r3, r3, r4
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&myGFX->gfxFont->bitmap);
 80126ae:	6800      	ldr	r0, [r0, #0]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&myGFX->gfxFont->glyph))[c]);
 80126b0:	b2db      	uxtb	r3, r3
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&myGFX->gfxFont->bitmap);
 80126b2:	9010      	str	r0, [sp, #64]	; 0x40
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&myGFX->gfxFont->glyph))[c]);
 80126b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80126b8:	881a      	ldrh	r2, [r3, #0]
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
 80126ba:	f993 0006 	ldrsb.w	r0, [r3, #6]
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80126be:	920c      	str	r2, [sp, #48]	; 0x30
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80126c0:	789a      	ldrb	r2, [r3, #2]
                 yo = pgm_read_byte(&glyph->yOffset);
 80126c2:	9019      	str	r0, [sp, #100]	; 0x64
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80126c4:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
 80126c6:	78da      	ldrb	r2, [r3, #3]
 80126c8:	9214      	str	r2, [sp, #80]	; 0x50
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 80126ca:	f993 2005 	ldrsb.w	r2, [r3, #5]
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size > 1) {
 80126ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	f240 80a7 	bls.w	8012824 <GFXdrawChar+0x1a0>
            xo16 = xo;
            yo16 = yo;
 80126d6:	b200      	sxth	r0, r0
            xo16 = xo;
 80126d8:	b213      	sxth	r3, r2
            yo16 = yo;
 80126da:	9015      	str	r0, [sp, #84]	; 0x54
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        //startWrite();
        for(yy=0; yy<h; yy++) {
 80126dc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80126de:	2800      	cmp	r0, #0
 80126e0:	f000 80a6 	beq.w	8012830 <GFXdrawChar+0x1ac>
 80126e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80126e6:	2800      	cmp	r0, #0
 80126e8:	f000 80a2 	beq.w	8012830 <GFXdrawChar+0x1ac>
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        GFXwritePixel(myGFX,x+xo+xx, y+yo+yy, color);
                    } else {
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 80126ec:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80126f0:	b289      	uxth	r1, r1
        uint8_t  xx, yy, bits = 0, bit = 0;
 80126f2:	2000      	movs	r0, #0
                        GFXwritePixel(myGFX,x+xo+xx, y+yo+yy, color);
 80126f4:	188a      	adds	r2, r1, r2
 80126f6:	fb03 1104 	mla	r1, r3, r4, r1
 80126fa:	1e63      	subs	r3, r4, #1
        uint8_t  xx, yy, bits = 0, bit = 0;
 80126fc:	9007      	str	r0, [sp, #28]
                        GFXwritePixel(myGFX,x+xo+xx, y+yo+yy, color);
 80126fe:	9218      	str	r2, [sp, #96]	; 0x60
 8012700:	9317      	str	r3, [sp, #92]	; 0x5c
 8012702:	b28b      	uxth	r3, r1
 8012704:	f8bd 2010 	ldrh.w	r2, [sp, #16]
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 8012708:	940a      	str	r4, [sp, #40]	; 0x28
 801270a:	9213      	str	r2, [sp, #76]	; 0x4c
        uint8_t  xx, yy, bits = 0, bit = 0;
 801270c:	9002      	str	r0, [sp, #8]
        for(yy=0; yy<h; yy++) {
 801270e:	900f      	str	r0, [sp, #60]	; 0x3c
 8012710:	9316      	str	r3, [sp, #88]	; 0x58
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 8012712:	9a15      	ldr	r2, [sp, #84]	; 0x54
    int16_t err = dx / 2;
 8012714:	2700      	movs	r7, #0
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 8012716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012718:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801271a:	4413      	add	r3, r2
 801271c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801271e:	fb03 1302 	mla	r3, r3, r2, r1
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012722:	9a17      	ldr	r2, [sp, #92]	; 0x5c
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 8012724:	b29b      	uxth	r3, r3
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012726:	189a      	adds	r2, r3, r2
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 8012728:	b21b      	sxth	r3, r3
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 801272a:	b211      	sxth	r1, r2
 801272c:	461a      	mov	r2, r3
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 801272e:	9311      	str	r3, [sp, #68]	; 0x44
 8012730:	428b      	cmp	r3, r1
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012732:	9104      	str	r1, [sp, #16]
 8012734:	bfa8      	it	ge
 8012736:	460a      	movge	r2, r1
 8012738:	428b      	cmp	r3, r1
 801273a:	bfb8      	it	lt
 801273c:	460b      	movlt	r3, r1
 801273e:	9208      	str	r2, [sp, #32]
 8012740:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012742:	4699      	mov	r9, r3
    dx = x1 - x0;
 8012744:	1a9b      	subs	r3, r3, r2
 8012746:	9a04      	ldr	r2, [sp, #16]
 8012748:	b29b      	uxth	r3, r3
 801274a:	eba2 0801 	sub.w	r8, r2, r1
 801274e:	9306      	str	r3, [sp, #24]
    int16_t err = dx / 2;
 8012750:	b21b      	sxth	r3, r3
 8012752:	2b00      	cmp	r3, #0
 8012754:	bfb8      	it	lt
 8012756:	3301      	addlt	r3, #1
 8012758:	f1b8 0f00 	cmp.w	r8, #0
 801275c:	ea4f 0363 	mov.w	r3, r3, asr #1
 8012760:	bfb8      	it	lt
 8012762:	f1c8 0800 	rsblt	r8, r8, #0
 8012766:	930e      	str	r3, [sp, #56]	; 0x38
 8012768:	fa1f f888 	uxth.w	r8, r8
 801276c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801276e:	9303      	str	r3, [sp, #12]
 8012770:	e00e      	b.n	8012790 <GFXdrawChar+0x10c>
                          size, size, color);
                    }
                }
                bits <<= 1;
 8012772:	9b02      	ldr	r3, [sp, #8]
 8012774:	3701      	adds	r7, #1
 8012776:	9a03      	ldr	r2, [sp, #12]
 8012778:	990a      	ldr	r1, [sp, #40]	; 0x28
 801277a:	005b      	lsls	r3, r3, #1
 801277c:	b2bf      	uxth	r7, r7
 801277e:	440a      	add	r2, r1
 8012780:	b2db      	uxtb	r3, r3
 8012782:	b292      	uxth	r2, r2
 8012784:	9302      	str	r3, [sp, #8]
            for(xx=0; xx<w; xx++) {
 8012786:	b2fb      	uxtb	r3, r7
 8012788:	9203      	str	r2, [sp, #12]
 801278a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801278c:	429a      	cmp	r2, r3
 801278e:	d97b      	bls.n	8012888 <GFXdrawChar+0x204>
                if(!(bit++ & 7)) {
 8012790:	9b07      	ldr	r3, [sp, #28]
 8012792:	443b      	add	r3, r7
 8012794:	0759      	lsls	r1, r3, #29
 8012796:	d106      	bne.n	80127a6 <GFXdrawChar+0x122>
                    bits = pgm_read_byte(&bitmap[bo++]);
 8012798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801279a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801279c:	1c53      	adds	r3, r2, #1
 801279e:	5c8a      	ldrb	r2, [r1, r2]
 80127a0:	b29b      	uxth	r3, r3
 80127a2:	9202      	str	r2, [sp, #8]
 80127a4:	930c      	str	r3, [sp, #48]	; 0x30
                if(bits & 0x80) {
 80127a6:	9b02      	ldr	r3, [sp, #8]
 80127a8:	061a      	lsls	r2, r3, #24
 80127aa:	d5e2      	bpl.n	8012772 <GFXdrawChar+0xee>
                    if(size == 1) {
 80127ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127ae:	2b01      	cmp	r3, #1
 80127b0:	d07a      	beq.n	80128a8 <GFXdrawChar+0x224>
                    	GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 80127b2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
    for (int16_t i=x; i<x+w; i++) {
 80127b6:	4433      	add	r3, r6
 80127b8:	42b3      	cmp	r3, r6
 80127ba:	9305      	str	r3, [sp, #20]
 80127bc:	ddd9      	ble.n	8012772 <GFXdrawChar+0xee>
 80127be:	9712      	str	r7, [sp, #72]	; 0x48
 80127c0:	9f11      	ldr	r7, [sp, #68]	; 0x44
    if (steep) {
 80127c2:	9b04      	ldr	r3, [sp, #16]
 80127c4:	429f      	cmp	r7, r3
 80127c6:	d036      	beq.n	8012836 <GFXdrawChar+0x1b2>
    for (; x0<=x1; x0++) {
 80127c8:	9b08      	ldr	r3, [sp, #32]
 80127ca:	454b      	cmp	r3, r9
 80127cc:	dc23      	bgt.n	8012816 <GFXdrawChar+0x192>
 80127ce:	461c      	mov	r4, r3
 80127d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80127d2:	46b3      	mov	fp, r6
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 80127d4:	f1bb 0f00 	cmp.w	fp, #0
 80127d8:	db0f      	blt.n	80127fa <GFXdrawChar+0x176>
 80127da:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80127de:	459b      	cmp	fp, r3
 80127e0:	da0b      	bge.n	80127fa <GFXdrawChar+0x176>
 80127e2:	0423      	lsls	r3, r4, #16
 80127e4:	d409      	bmi.n	80127fa <GFXdrawChar+0x176>
 80127e6:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80127ea:	4622      	mov	r2, r4
 80127ec:	4659      	mov	r1, fp
 80127ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127f0:	4284      	cmp	r4, r0
 80127f2:	4650      	mov	r0, sl
 80127f4:	da01      	bge.n	80127fa <GFXdrawChar+0x176>
 80127f6:	f7ff fc5b 	bl	80120b0 <GFXdrawPixel.part.0>
 80127fa:	3401      	adds	r4, #1
        if (err < 0) {
 80127fc:	2d00      	cmp	r5, #0
        err -= dy;
 80127fe:	b2ab      	uxth	r3, r5
 8012800:	b224      	sxth	r4, r4
        if (err < 0) {
 8012802:	da06      	bge.n	8012812 <GFXdrawChar+0x18e>
            err += dx;
 8012804:	9a06      	ldr	r2, [sp, #24]
            y0 += ystep;
 8012806:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
            err += dx;
 801280a:	18d5      	adds	r5, r2, r3
            y0 += ystep;
 801280c:	fa0f fb8b 	sxth.w	fp, fp
            err += dx;
 8012810:	b22d      	sxth	r5, r5
    for (; x0<=x1; x0++) {
 8012812:	45a1      	cmp	r9, r4
 8012814:	dade      	bge.n	80127d4 <GFXdrawChar+0x150>
 8012816:	3601      	adds	r6, #1
    for (int16_t i=x; i<x+w; i++) {
 8012818:	9b05      	ldr	r3, [sp, #20]
 801281a:	b236      	sxth	r6, r6
 801281c:	429e      	cmp	r6, r3
 801281e:	dbd0      	blt.n	80127c2 <GFXdrawChar+0x13e>
 8012820:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8012822:	e7a6      	b.n	8012772 <GFXdrawChar+0xee>
        int16_t  xo16 = 0, yo16 = 0;
 8012824:	2300      	movs	r3, #0
        for(yy=0; yy<h; yy++) {
 8012826:	9814      	ldr	r0, [sp, #80]	; 0x50
        int16_t  xo16 = 0, yo16 = 0;
 8012828:	9315      	str	r3, [sp, #84]	; 0x54
        for(yy=0; yy<h; yy++) {
 801282a:	2800      	cmp	r0, #0
 801282c:	f47f af5a 	bne.w	80126e4 <GFXdrawChar+0x60>
            }
        }
        //endWrite();

    } // End classic vs custom font
}
 8012830:	b01b      	add	sp, #108	; 0x6c
 8012832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (steep) {
 8012836:	4634      	mov	r4, r6
 8012838:	46bb      	mov	fp, r7
    int16_t err = dx / 2;
 801283a:	2500      	movs	r5, #0
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 801283c:	2c00      	cmp	r4, #0
 801283e:	db10      	blt.n	8012862 <GFXdrawChar+0x1de>
 8012840:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8012844:	42a3      	cmp	r3, r4
 8012846:	dd0c      	ble.n	8012862 <GFXdrawChar+0x1de>
 8012848:	f1bb 0f00 	cmp.w	fp, #0
 801284c:	db09      	blt.n	8012862 <GFXdrawChar+0x1de>
 801284e:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8012852:	465a      	mov	r2, fp
 8012854:	4621      	mov	r1, r4
 8012856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012858:	4558      	cmp	r0, fp
 801285a:	4650      	mov	r0, sl
 801285c:	dd01      	ble.n	8012862 <GFXdrawChar+0x1de>
 801285e:	f7ff fc27 	bl	80120b0 <GFXdrawPixel.part.0>
        err -= dy;
 8012862:	eba5 0508 	sub.w	r5, r5, r8
 8012866:	3401      	adds	r4, #1
 8012868:	b22d      	sxth	r5, r5
 801286a:	b224      	sxth	r4, r4
        if (err < 0) {
 801286c:	2d00      	cmp	r5, #0
 801286e:	da03      	bge.n	8012878 <GFXdrawChar+0x1f4>
            y0 += ystep;
 8012870:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012874:	fa0f fb8b 	sxth.w	fp, fp
    for (; x0<=x1; x0++) {
 8012878:	42a6      	cmp	r6, r4
 801287a:	dadf      	bge.n	801283c <GFXdrawChar+0x1b8>
 801287c:	3601      	adds	r6, #1
    for (int16_t i=x; i<x+w; i++) {
 801287e:	9b05      	ldr	r3, [sp, #20]
 8012880:	b236      	sxth	r6, r6
 8012882:	429e      	cmp	r6, r3
 8012884:	db9d      	blt.n	80127c2 <GFXdrawChar+0x13e>
 8012886:	e7cb      	b.n	8012820 <GFXdrawChar+0x19c>
 8012888:	4611      	mov	r1, r2
 801288a:	9b07      	ldr	r3, [sp, #28]
        for(yy=0; yy<h; yy++) {
 801288c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801288e:	440b      	add	r3, r1
 8012890:	3201      	adds	r2, #1
 8012892:	b2db      	uxtb	r3, r3
 8012894:	b2d2      	uxtb	r2, r2
 8012896:	9307      	str	r3, [sp, #28]
 8012898:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801289a:	920f      	str	r2, [sp, #60]	; 0x3c
 801289c:	4293      	cmp	r3, r2
 801289e:	f63f af38 	bhi.w	8012712 <GFXdrawChar+0x8e>
}
 80128a2:	b01b      	add	sp, #108	; 0x6c
 80128a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80128aa:	18f9      	adds	r1, r7, r3
 80128ac:	b209      	sxth	r1, r1
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 80128ae:	2900      	cmp	r1, #0
 80128b0:	f6ff af5f 	blt.w	8012772 <GFXdrawChar+0xee>
                        GFXwritePixel(myGFX,x+xo+xx, y+yo+yy, color);
 80128b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80128b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80128b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80128ba:	189a      	adds	r2, r3, r2
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 80128bc:	f8ba 3004 	ldrh.w	r3, [sl, #4]
                        GFXwritePixel(myGFX,x+xo+xx, y+yo+yy, color);
 80128c0:	4402      	add	r2, r0
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 80128c2:	4299      	cmp	r1, r3
                        GFXwritePixel(myGFX,x+xo+xx, y+yo+yy, color);
 80128c4:	b212      	sxth	r2, r2
  if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 80128c6:	f6bf af54 	bge.w	8012772 <GFXdrawChar+0xee>
 80128ca:	2a00      	cmp	r2, #0
 80128cc:	f6ff af51 	blt.w	8012772 <GFXdrawChar+0xee>
 80128d0:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	f6bf af4c 	bge.w	8012772 <GFXdrawChar+0xee>
 80128da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128dc:	4650      	mov	r0, sl
 80128de:	f7ff fbe7 	bl	80120b0 <GFXdrawPixel.part.0>
 80128e2:	e746      	b.n	8012772 <GFXdrawChar+0xee>
        if((x >= myGFX->_width)            || // Clip right
 80128e4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80128e8:	4291      	cmp	r1, r2
 80128ea:	daa1      	bge.n	8012830 <GFXdrawChar+0x1ac>
           (y >= myGFX->_height)           || // Clip bottom
 80128ec:	f8ba 2006 	ldrh.w	r2, [sl, #6]
        if((x >= myGFX->_width)            || // Clip right
 80128f0:	9c04      	ldr	r4, [sp, #16]
 80128f2:	4294      	cmp	r4, r2
 80128f4:	da9c      	bge.n	8012830 <GFXdrawChar+0x1ac>
           ((x + 6 * size - 1) < 0) || // Clip left
 80128f6:	2206      	movs	r2, #6
 80128f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80128fa:	fb12 1205 	smlabb	r2, r2, r5, r1
           (y >= myGFX->_height)           || // Clip bottom
 80128fe:	2a00      	cmp	r2, #0
 8012900:	dd96      	ble.n	8012830 <GFXdrawChar+0x1ac>
           ((y + 8 * size - 1) < 0))   // Clip top
 8012902:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
           ((x + 6 * size - 1) < 0) || // Clip left
 8012906:	2a00      	cmp	r2, #0
 8012908:	dd92      	ble.n	8012830 <GFXdrawChar+0x1ac>
        if(!myGFX->_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 801290a:	f8ba 2016 	ldrh.w	r2, [sl, #22]
 801290e:	b91a      	cbnz	r2, 8012918 <GFXdrawChar+0x294>
 8012910:	2baf      	cmp	r3, #175	; 0xaf
 8012912:	d901      	bls.n	8012918 <GFXdrawChar+0x294>
 8012914:	3301      	adds	r3, #1
 8012916:	b2db      	uxtb	r3, r3
            uint8_t line = pgm_read_byte(&myGFX->gfxFont[c * 5 + i]);
 8012918:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801291c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8012920:	b289      	uxth	r1, r1
 8012922:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012926:	9403      	str	r4, [sp, #12]
 8012928:	1d4a      	adds	r2, r1, #5
 801292a:	910f      	str	r1, [sp, #60]	; 0x3c
 801292c:	009b      	lsls	r3, r3, #2
 801292e:	9106      	str	r1, [sp, #24]
 8012930:	b292      	uxth	r2, r2
 8012932:	9107      	str	r1, [sp, #28]
 8012934:	9308      	str	r3, [sp, #32]
 8012936:	1e63      	subs	r3, r4, #1
 8012938:	920c      	str	r2, [sp, #48]	; 0x30
 801293a:	9309      	str	r3, [sp, #36]	; 0x24
 801293c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8012940:	9a08      	ldr	r2, [sp, #32]
 8012942:	461d      	mov	r5, r3
 8012944:	9313      	str	r3, [sp, #76]	; 0x4c
                    	GFXwriteFillRect(myGFX,x+i*size, y+j*size, size, size, bg);
 8012946:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
    for (int16_t i=x; i<x+w; i++) {
 801294a:	2700      	movs	r7, #0
            uint8_t line = pgm_read_byte(&myGFX->gfxFont[c * 5 + i]);
 801294c:	f810 9002 	ldrb.w	r9, [r0, r2]
    for (int16_t i=x; i<x+w; i++) {
 8012950:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    GFXdrawPixel(myGFX, x, y, color);
 8012952:	46b8      	mov	r8, r7
                    	GFXwriteFillRect(myGFX,x+i*size, y+j*size, size, size, bg);
 8012954:	9305      	str	r3, [sp, #20]
    for (int16_t i=x; i<x+w; i++) {
 8012956:	189e      	adds	r6, r3, r2
    GFXdrawPixel(myGFX, x, y, color);
 8012958:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801295c:	930e      	str	r3, [sp, #56]	; 0x38
                if(line & 1) {
 801295e:	f019 0f01 	tst.w	r9, #1
 8012962:	d037      	beq.n	80129d4 <GFXdrawChar+0x350>
                    if(size == 1)
 8012964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012966:	2b01      	cmp	r3, #1
 8012968:	d057      	beq.n	8012a1a <GFXdrawChar+0x396>
    for (int16_t i=x; i<x+w; i++) {
 801296a:	9c05      	ldr	r4, [sp, #20]
                    	GFXwriteFillRect(myGFX,x+i*size, y+j*size, size, size, color);
 801296c:	fa0f fb85 	sxth.w	fp, r5
    for (int16_t i=x; i<x+w; i++) {
 8012970:	42b4      	cmp	r4, r6
 8012972:	da11      	bge.n	8012998 <GFXdrawChar+0x314>
 8012974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012976:	950a      	str	r5, [sp, #40]	; 0x28
 8012978:	18ef      	adds	r7, r5, r3
 801297a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801297c:	b23f      	sxth	r7, r7
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 801297e:	4623      	mov	r3, r4
 8012980:	4621      	mov	r1, r4
 8012982:	3401      	adds	r4, #1
 8012984:	9501      	str	r5, [sp, #4]
 8012986:	9700      	str	r7, [sp, #0]
 8012988:	465a      	mov	r2, fp
 801298a:	b224      	sxth	r4, r4
 801298c:	4650      	mov	r0, sl
 801298e:	f7ff fc07 	bl	80121a0 <GFXwriteLine>
    for (int16_t i=x; i<x+w; i++) {
 8012992:	42b4      	cmp	r4, r6
 8012994:	dbf3      	blt.n	801297e <GFXdrawChar+0x2fa>
 8012996:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012998:	9b03      	ldr	r3, [sp, #12]
 801299a:	f108 0801 	add.w	r8, r8, #1
            for(int8_t j=0; j<8; j++, line >>= 1) {
 801299e:	ea4f 0959 	mov.w	r9, r9, lsr #1
 80129a2:	441d      	add	r5, r3
 80129a4:	f1b8 0f08 	cmp.w	r8, #8
 80129a8:	b2ad      	uxth	r5, r5
 80129aa:	d1d8      	bne.n	801295e <GFXdrawChar+0x2da>
 80129ac:	4619      	mov	r1, r3
 80129ae:	9b07      	ldr	r3, [sp, #28]
 80129b0:	9a06      	ldr	r2, [sp, #24]
 80129b2:	440b      	add	r3, r1
 80129b4:	9908      	ldr	r1, [sp, #32]
 80129b6:	3201      	adds	r2, #1
 80129b8:	b29b      	uxth	r3, r3
 80129ba:	310c      	adds	r1, #12
 80129bc:	b292      	uxth	r2, r2
 80129be:	9307      	str	r3, [sp, #28]
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80129c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129c2:	9108      	str	r1, [sp, #32]
 80129c4:	4293      	cmp	r3, r2
 80129c6:	9206      	str	r2, [sp, #24]
 80129c8:	d03b      	beq.n	8012a42 <GFXdrawChar+0x3be>
 80129ca:	f8da 0018 	ldr.w	r0, [sl, #24]
 80129ce:	460a      	mov	r2, r1
 80129d0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80129d2:	e7b8      	b.n	8012946 <GFXdrawChar+0x2c2>
                } else if(bg != color) {
 80129d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129d6:	9a02      	ldr	r2, [sp, #8]
 80129d8:	4293      	cmp	r3, r2
 80129da:	d0dd      	beq.n	8012998 <GFXdrawChar+0x314>
                    if(size == 1)
 80129dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129de:	2b01      	cmp	r3, #1
 80129e0:	d025      	beq.n	8012a2e <GFXdrawChar+0x3aa>
    for (int16_t i=x; i<x+w; i++) {
 80129e2:	9c05      	ldr	r4, [sp, #20]
                    	GFXwriteFillRect(myGFX,x+i*size, y+j*size, size, size, bg);
 80129e4:	fa0f fb85 	sxth.w	fp, r5
    for (int16_t i=x; i<x+w; i++) {
 80129e8:	42b4      	cmp	r4, r6
 80129ea:	dad5      	bge.n	8012998 <GFXdrawChar+0x314>
 80129ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129ee:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80129f2:	46a9      	mov	r9, r5
 80129f4:	18ef      	adds	r7, r5, r3
 80129f6:	9d02      	ldr	r5, [sp, #8]
 80129f8:	b23f      	sxth	r7, r7
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 80129fa:	4623      	mov	r3, r4
 80129fc:	4621      	mov	r1, r4
 80129fe:	3401      	adds	r4, #1
 8012a00:	9501      	str	r5, [sp, #4]
 8012a02:	9700      	str	r7, [sp, #0]
 8012a04:	465a      	mov	r2, fp
 8012a06:	b224      	sxth	r4, r4
 8012a08:	4650      	mov	r0, sl
 8012a0a:	f7ff fbc9 	bl	80121a0 <GFXwriteLine>
    for (int16_t i=x; i<x+w; i++) {
 8012a0e:	42b4      	cmp	r4, r6
 8012a10:	dbf3      	blt.n	80129fa <GFXdrawChar+0x376>
 8012a12:	464d      	mov	r5, r9
 8012a14:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8012a18:	e7be      	b.n	8012998 <GFXdrawChar+0x314>
    GFXdrawPixel(myGFX, x, y, color);
 8012a1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012a1c:	4650      	mov	r0, sl
 8012a1e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012a20:	eb03 0208 	add.w	r2, r3, r8
 8012a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a26:	b212      	sxth	r2, r2
 8012a28:	f7ff fc56 	bl	80122d8 <GFXdrawPixel>
 8012a2c:	e7b4      	b.n	8012998 <GFXdrawChar+0x314>
 8012a2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012a30:	4650      	mov	r0, sl
 8012a32:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012a34:	eb03 0208 	add.w	r2, r3, r8
 8012a38:	9b02      	ldr	r3, [sp, #8]
 8012a3a:	b212      	sxth	r2, r2
 8012a3c:	f7ff fc4c 	bl	80122d8 <GFXdrawPixel>
 8012a40:	e7aa      	b.n	8012998 <GFXdrawChar+0x314>
        if(bg != color) { // If opaque, draw vertical line for last column
 8012a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a44:	9a02      	ldr	r2, [sp, #8]
 8012a46:	4293      	cmp	r3, r2
 8012a48:	f43f aef2 	beq.w	8012830 <GFXdrawChar+0x1ac>
            if(size == 1) GFXwriteFastVLine(myGFX,x+5, y, 8, bg);
 8012a4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a4e:	2b01      	cmp	r3, #1
 8012a50:	d01e      	beq.n	8012a90 <GFXdrawChar+0x40c>
            else          GFXwriteFillRect(myGFX,x+5*size, y, size, 8*size, bg);
 8012a52:	9b03      	ldr	r3, [sp, #12]
 8012a54:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8012a58:	00dc      	lsls	r4, r3, #3
 8012a5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a5c:	442b      	add	r3, r5
 8012a5e:	b21d      	sxth	r5, r3
    for (int16_t i=x; i<x+w; i++) {
 8012a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a62:	442b      	add	r3, r5
 8012a64:	42ab      	cmp	r3, r5
 8012a66:	461e      	mov	r6, r3
 8012a68:	f77f aee2 	ble.w	8012830 <GFXdrawChar+0x1ac>
 8012a6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012a6e:	3b01      	subs	r3, #1
 8012a70:	441c      	add	r4, r3
 8012a72:	b224      	sxth	r4, r4
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012a74:	9b02      	ldr	r3, [sp, #8]
 8012a76:	4629      	mov	r1, r5
 8012a78:	9400      	str	r4, [sp, #0]
 8012a7a:	4650      	mov	r0, sl
 8012a7c:	9301      	str	r3, [sp, #4]
 8012a7e:	462b      	mov	r3, r5
 8012a80:	3501      	adds	r5, #1
 8012a82:	9a04      	ldr	r2, [sp, #16]
 8012a84:	f7ff fb8c 	bl	80121a0 <GFXwriteLine>
 8012a88:	b22d      	sxth	r5, r5
    for (int16_t i=x; i<x+w; i++) {
 8012a8a:	42ae      	cmp	r6, r5
 8012a8c:	dcf2      	bgt.n	8012a74 <GFXdrawChar+0x3f0>
 8012a8e:	e6cf      	b.n	8012830 <GFXdrawChar+0x1ac>
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012a90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012a92:	4650      	mov	r0, sl
            if(size == 1) GFXwriteFastVLine(myGFX,x+5, y, 8, bg);
 8012a94:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012a98:	3407      	adds	r4, #7
 8012a9a:	9225      	str	r2, [sp, #148]	; 0x94
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	9a04      	ldr	r2, [sp, #16]
 8012aa0:	b224      	sxth	r4, r4
 8012aa2:	9424      	str	r4, [sp, #144]	; 0x90
}
 8012aa4:	b01b      	add	sp, #108	; 0x6c
 8012aa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 8012aaa:	f7ff bb79 	b.w	80121a0 <GFXwriteLine>
 8012aae:	bf00      	nop

08012ab0 <GFXwrite>:
        }
  }
}


void GFXwrite(GFX* myGFX, uint8_t c) {
 8012ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!myGFX->gfxFont) { // 'Classic' built-in font
 8012ab2:	6983      	ldr	r3, [r0, #24]
void GFXwrite(GFX* myGFX, uint8_t c) {
 8012ab4:	b085      	sub	sp, #20
 8012ab6:	4604      	mov	r4, r0
	if(!myGFX->gfxFont) { // 'Classic' built-in font
 8012ab8:	b32b      	cbz	r3, 8012b06 <GFXwrite+0x56>
			myGFX->cursor_x += myGFX->textsize * 6;          // Advance x one char
		}

	} else { // Custom font

		if(c == '\n') {
 8012aba:	290a      	cmp	r1, #10
 8012abc:	d018      	beq.n	8012af0 <GFXwrite+0x40>
			myGFX->cursor_x  = 0;
			myGFX->cursor_y += (int16_t)myGFX->textsize *
						(uint8_t)pgm_read_byte(&myGFX->gfxFont->yAdvance);
		} else if(c != '\r') {
 8012abe:	290d      	cmp	r1, #13
 8012ac0:	d01f      	beq.n	8012b02 <GFXwrite+0x52>
			uint8_t first = pgm_read_byte(&myGFX->gfxFont->first);
 8012ac2:	7a1a      	ldrb	r2, [r3, #8]
			if((c >= first) && (c <= (uint8_t)pgm_read_byte(&myGFX->gfxFont->last))) {
 8012ac4:	4291      	cmp	r1, r2
 8012ac6:	d31c      	bcc.n	8012b02 <GFXwrite+0x52>
 8012ac8:	7a58      	ldrb	r0, [r3, #9]
 8012aca:	4288      	cmp	r0, r1
 8012acc:	d319      	bcc.n	8012b02 <GFXwrite+0x52>
				GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
				  &myGFX->gfxFont->glyph))[c - first]);
 8012ace:	685d      	ldr	r5, [r3, #4]
 8012ad0:	1a8a      	subs	r2, r1, r2
 8012ad2:	89e0      	ldrh	r0, [r4, #14]
 8012ad4:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
				uint8_t   w     = pgm_read_byte(&glyph->width),
						  h     = pgm_read_byte(&glyph->height);
				if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8012ad8:	78eb      	ldrb	r3, [r5, #3]
				uint8_t   w     = pgm_read_byte(&glyph->width),
 8012ada:	78ae      	ldrb	r6, [r5, #2]
				if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8012adc:	b10b      	cbz	r3, 8012ae2 <GFXwrite+0x32>
 8012ade:	2e00      	cmp	r6, #0
 8012ae0:	d158      	bne.n	8012b94 <GFXwrite+0xe4>
					//     cursor_y += (int16_t)textsize *
					//       (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
					// }
					GFXdrawChar(myGFX, myGFX->cursor_x, myGFX->cursor_y, c, myGFX->textcolor, myGFX->textbgcolor, myGFX->textsize);
				}
				myGFX->cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)myGFX->textsize;
 8012ae2:	792b      	ldrb	r3, [r5, #4]
 8012ae4:	89a2      	ldrh	r2, [r4, #12]
 8012ae6:	fb13 f300 	smulbb	r3, r3, r0
 8012aea:	4413      	add	r3, r2
 8012aec:	81a3      	strh	r3, [r4, #12]
			}
		}

	}
}
 8012aee:	e008      	b.n	8012b02 <GFXwrite+0x52>
			myGFX->cursor_x  = 0;
 8012af0:	2000      	movs	r0, #0
			myGFX->cursor_y += (int16_t)myGFX->textsize *
 8012af2:	8962      	ldrh	r2, [r4, #10]
 8012af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
			myGFX->cursor_x  = 0;
 8012af8:	81a0      	strh	r0, [r4, #12]
			myGFX->cursor_y += (int16_t)myGFX->textsize *
 8012afa:	7a9b      	ldrb	r3, [r3, #10]
 8012afc:	fb01 2303 	mla	r3, r1, r3, r2
 8012b00:	8163      	strh	r3, [r4, #10]
}
 8012b02:	b005      	add	sp, #20
 8012b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(c == '\n') {                        // Newline?
 8012b06:	290a      	cmp	r1, #10
 8012b08:	d03c      	beq.n	8012b84 <GFXwrite+0xd4>
		} else if(c != '\r') {                 // Ignore carriage returns
 8012b0a:	290d      	cmp	r1, #13
 8012b0c:	d0f9      	beq.n	8012b02 <GFXwrite+0x52>
    if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off edge?
 8012b0e:	8a85      	ldrh	r5, [r0, #20]
 8012b10:	8962      	ldrh	r2, [r4, #10]
			GFXcheckScrollWrap(myGFX, myGFX->textsize * 6 - myGFX->textsize * 2);
 8012b12:	89c0      	ldrh	r0, [r0, #14]
    if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off edge?
 8012b14:	b135      	cbz	r5, 8012b24 <GFXwrite+0x74>
 8012b16:	89a7      	ldrh	r7, [r4, #12]
			GFXcheckScrollWrap(myGFX, myGFX->textsize * 6 - myGFX->textsize * 2);
 8012b18:	0085      	lsls	r5, r0, #2
    if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off edge?
 8012b1a:	88a6      	ldrh	r6, [r4, #4]
 8012b1c:	fa07 f585 	sxtah	r5, r7, r5
 8012b20:	42b5      	cmp	r5, r6
 8012b22:	da6c      	bge.n	8012bfe <GFXwrite+0x14e>
    if (myGFX->autoscroll) {
 8012b24:	8c23      	ldrh	r3, [r4, #32]
 8012b26:	b1b3      	cbz	r3, 8012b56 <GFXwrite+0xa6>
            fontOffset = (myGFX->fontHeight * myGFX->textsize)-1; // cursor defines upper left corner of char
 8012b28:	8ba3      	ldrh	r3, [r4, #28]
        uint16_t cursor = myGFX->cursor_y + fontOffset + myGFX->fontDesc * myGFX->textsize;
 8012b2a:	8be5      	ldrh	r5, [r4, #30]
            fontOffset = (myGFX->fontHeight * myGFX->textsize)-1; // cursor defines upper left corner of char
 8012b2c:	fb13 f300 	smulbb	r3, r3, r0
        if (cursor >= myGFX->_height) {
 8012b30:	88e7      	ldrh	r7, [r4, #6]
        uint16_t cursor = myGFX->cursor_y + fontOffset + myGFX->fontDesc * myGFX->textsize;
 8012b32:	fb15 f500 	smulbb	r5, r5, r0
            fontOffset = (myGFX->fontHeight * myGFX->textsize)-1; // cursor defines upper left corner of char
 8012b36:	3b01      	subs	r3, #1
        uint16_t cursor = myGFX->cursor_y + fontOffset + myGFX->fontDesc * myGFX->textsize;
 8012b38:	b2ad      	uxth	r5, r5
            fontOffset = (myGFX->fontHeight * myGFX->textsize)-1; // cursor defines upper left corner of char
 8012b3a:	b29b      	uxth	r3, r3
        uint16_t cursor = myGFX->cursor_y + fontOffset + myGFX->fontDesc * myGFX->textsize;
 8012b3c:	195e      	adds	r6, r3, r5
 8012b3e:	4416      	add	r6, r2
        if (cursor >= myGFX->_height) {
 8012b40:	b2b6      	uxth	r6, r6
 8012b42:	42be      	cmp	r6, r7
 8012b44:	d307      	bcc.n	8012b56 <GFXwrite+0xa6>
            myGFX->cursor_y = myGFX->_height - fontOffset-1 - myGFX->fontDesc * myGFX->textsize;
 8012b46:	43ed      	mvns	r5, r5
            myGFX->cursor_x  = 0;
 8012b48:	2600      	movs	r6, #0
            myGFX->cursor_y = myGFX->_height - fontOffset-1 - myGFX->fontDesc * myGFX->textsize;
 8012b4a:	443d      	add	r5, r7
            myGFX->cursor_x  = 0;
 8012b4c:	81a6      	strh	r6, [r4, #12]
            myGFX->cursor_y = myGFX->_height - fontOffset-1 - myGFX->fontDesc * myGFX->textsize;
 8012b4e:	1aeb      	subs	r3, r5, r3
 8012b50:	b29a      	uxth	r2, r3
 8012b52:	8162      	strh	r2, [r4, #10]
 8012b54:	e001      	b.n	8012b5a <GFXwrite+0xaa>
 8012b56:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
			GFXdrawChar(myGFX, myGFX->cursor_x, myGFX->cursor_y, c, myGFX->textcolor, myGFX->textbgcolor, myGFX->textsize);
 8012b5a:	8a67      	ldrh	r7, [r4, #18]
 8012b5c:	b2c0      	uxtb	r0, r0
 8012b5e:	8a25      	ldrh	r5, [r4, #16]
 8012b60:	460b      	mov	r3, r1
 8012b62:	9002      	str	r0, [sp, #8]
 8012b64:	b212      	sxth	r2, r2
 8012b66:	4631      	mov	r1, r6
 8012b68:	4620      	mov	r0, r4
 8012b6a:	e9cd 5700 	strd	r5, r7, [sp]
 8012b6e:	f7ff fd89 	bl	8012684 <GFXdrawChar>
			myGFX->cursor_x += myGFX->textsize * 6;          // Advance x one char
 8012b72:	89e3      	ldrh	r3, [r4, #14]
 8012b74:	89a2      	ldrh	r2, [r4, #12]
 8012b76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012b7a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8012b7e:	81a3      	strh	r3, [r4, #12]
}
 8012b80:	b005      	add	sp, #20
 8012b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
			myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize;
 8012b84:	8b82      	ldrh	r2, [r0, #28]
 8012b86:	8961      	ldrh	r1, [r4, #10]
 8012b88:	89c0      	ldrh	r0, [r0, #14]
			myGFX->cursor_x  = 0;                     // Reset x to zero,
 8012b8a:	81a3      	strh	r3, [r4, #12]
			myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize;
 8012b8c:	fb12 1300 	smlabb	r3, r2, r0, r1
 8012b90:	8163      	strh	r3, [r4, #10]
 8012b92:	e7b6      	b.n	8012b02 <GFXwrite+0x52>
    if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off edge?
 8012b94:	8aa3      	ldrh	r3, [r4, #20]
 8012b96:	8962      	ldrh	r2, [r4, #10]
 8012b98:	b18b      	cbz	r3, 8012bbe <GFXwrite+0x10e>
					GFXcheckScrollWrap(myGFX, myGFX->textsize * (xo + w));
 8012b9a:	f995 3005 	ldrsb.w	r3, [r5, #5]
    if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off edge?
 8012b9e:	89a7      	ldrh	r7, [r4, #12]
					GFXcheckScrollWrap(myGFX, myGFX->textsize * (xo + w));
 8012ba0:	4433      	add	r3, r6
    if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off edge?
 8012ba2:	88a6      	ldrh	r6, [r4, #4]
					GFXcheckScrollWrap(myGFX, myGFX->textsize * (xo + w));
 8012ba4:	fb13 f300 	smulbb	r3, r3, r0
    if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off edge?
 8012ba8:	fa07 f383 	sxtah	r3, r7, r3
 8012bac:	42b3      	cmp	r3, r6
 8012bae:	db06      	blt.n	8012bbe <GFXwrite+0x10e>
    	myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize; // Advance y one line
 8012bb0:	8ba3      	ldrh	r3, [r4, #28]
    	myGFX->cursor_x  = 0;            // Reset x to zero
 8012bb2:	2600      	movs	r6, #0
    	myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize; // Advance y one line
 8012bb4:	fb13 2200 	smlabb	r2, r3, r0, r2
    	myGFX->cursor_x  = 0;            // Reset x to zero
 8012bb8:	81a6      	strh	r6, [r4, #12]
    	myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize; // Advance y one line
 8012bba:	b292      	uxth	r2, r2
 8012bbc:	8162      	strh	r2, [r4, #10]
    if (myGFX->autoscroll) {
 8012bbe:	8c23      	ldrh	r3, [r4, #32]
 8012bc0:	b323      	cbz	r3, 8012c0c <GFXwrite+0x15c>
        uint16_t cursor = myGFX->cursor_y + fontOffset + myGFX->fontDesc * myGFX->textsize;
 8012bc2:	8be3      	ldrh	r3, [r4, #30]
        if (cursor >= myGFX->_height) {
 8012bc4:	88e6      	ldrh	r6, [r4, #6]
        uint16_t cursor = myGFX->cursor_y + fontOffset + myGFX->fontDesc * myGFX->textsize;
 8012bc6:	fb13 f300 	smulbb	r3, r3, r0
 8012bca:	b29b      	uxth	r3, r3
 8012bcc:	18d7      	adds	r7, r2, r3
        if (cursor >= myGFX->_height) {
 8012bce:	b2bf      	uxth	r7, r7
 8012bd0:	42b7      	cmp	r7, r6
 8012bd2:	d31b      	bcc.n	8012c0c <GFXwrite+0x15c>
            myGFX->cursor_y = myGFX->_height - fontOffset-1 - myGFX->fontDesc * myGFX->textsize;
 8012bd4:	1e72      	subs	r2, r6, #1
            myGFX->cursor_x  = 0;
 8012bd6:	2600      	movs	r6, #0
            myGFX->cursor_y = myGFX->_height - fontOffset-1 - myGFX->fontDesc * myGFX->textsize;
 8012bd8:	1ad3      	subs	r3, r2, r3
 8012bda:	46b4      	mov	ip, r6
            myGFX->cursor_x  = 0;
 8012bdc:	81a6      	strh	r6, [r4, #12]
            myGFX->cursor_y = myGFX->_height - fontOffset-1 - myGFX->fontDesc * myGFX->textsize;
 8012bde:	b29a      	uxth	r2, r3
 8012be0:	8162      	strh	r2, [r4, #10]
					GFXdrawChar(myGFX, myGFX->cursor_x, myGFX->cursor_y, c, myGFX->textcolor, myGFX->textbgcolor, myGFX->textsize);
 8012be2:	8a67      	ldrh	r7, [r4, #18]
 8012be4:	b2c0      	uxtb	r0, r0
 8012be6:	8a26      	ldrh	r6, [r4, #16]
 8012be8:	460b      	mov	r3, r1
 8012bea:	9002      	str	r0, [sp, #8]
 8012bec:	b212      	sxth	r2, r2
 8012bee:	4620      	mov	r0, r4
 8012bf0:	4661      	mov	r1, ip
 8012bf2:	e9cd 6700 	strd	r6, r7, [sp]
 8012bf6:	f7ff fd45 	bl	8012684 <GFXdrawChar>
 8012bfa:	89e0      	ldrh	r0, [r4, #14]
 8012bfc:	e771      	b.n	8012ae2 <GFXwrite+0x32>
    	myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize; // Advance y one line
 8012bfe:	8ba5      	ldrh	r5, [r4, #28]
    	myGFX->cursor_x  = 0;            // Reset x to zero
 8012c00:	81a3      	strh	r3, [r4, #12]
    	myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize; // Advance y one line
 8012c02:	fb15 2200 	smlabb	r2, r5, r0, r2
 8012c06:	b292      	uxth	r2, r2
 8012c08:	8162      	strh	r2, [r4, #10]
 8012c0a:	e78b      	b.n	8012b24 <GFXwrite+0x74>
 8012c0c:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8012c10:	e7e7      	b.n	8012be2 <GFXwrite+0x132>
 8012c12:	bf00      	nop

08012c14 <GFXsetCursor>:

void GFXsetCursor(GFX* myGFX, int16_t x, int16_t y) {
	myGFX->cursor_x = x;
 8012c14:	8181      	strh	r1, [r0, #12]
	myGFX->cursor_y = y;
 8012c16:	8142      	strh	r2, [r0, #10]
}
 8012c18:	4770      	bx	lr
 8012c1a:	bf00      	nop

08012c1c <GFXgetCursorX>:

int16_t GFXgetCursorX(GFX* myGFX)
{
    return myGFX->cursor_x;
}
 8012c1c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8012c20:	4770      	bx	lr
 8012c22:	bf00      	nop

08012c24 <GFXsetTextSize>:
{
    return myGFX->cursor_y;
}

void GFXsetTextSize(GFX* myGFX, uint8_t s) {
	myGFX->textsize = (s > 0) ? s : 1;
 8012c24:	2900      	cmp	r1, #0
 8012c26:	bf08      	it	eq
 8012c28:	2101      	moveq	r1, #1
 8012c2a:	81c1      	strh	r1, [r0, #14]
}
 8012c2c:	4770      	bx	lr
 8012c2e:	bf00      	nop

08012c30 <GFXsetTextColor>:

void GFXsetTextColor(GFX* myGFX, uint16_t c, uint16_t b) {
	myGFX->textcolor   = c;
 8012c30:	8201      	strh	r1, [r0, #16]
	myGFX->textbgcolor = b;
 8012c32:	8242      	strh	r2, [r0, #18]
}
 8012c34:	4770      	bx	lr
 8012c36:	bf00      	nop

08012c38 <GFXsetFont>:
// to this function to use correct CP437 character values in your code.
void GFXcp437(GFX* myGFX, uint8_t x) {
	myGFX->_cp437 = x;
}

void GFXsetFont(GFX* myGFX, const GFXfont *f) {
 8012c38:	6983      	ldr	r3, [r0, #24]

	if(f)
 8012c3a:	b139      	cbz	r1, 8012c4c <GFXsetFont+0x14>
    {            // Font struct pointer passed in?
        if(!myGFX->gfxFont) { // And no current font struct?
 8012c3c:	b10b      	cbz	r3, 8012c42 <GFXsetFont+0xa>
		}

		myGFX->fontHeight = 8;
		myGFX->fontDesc = 0;
	}
    myGFX->gfxFont = (GFXfont *)f;
 8012c3e:	6181      	str	r1, [r0, #24]
}
 8012c40:	4770      	bx	lr
        	myGFX->cursor_y += 6;
 8012c42:	8943      	ldrh	r3, [r0, #10]
    myGFX->gfxFont = (GFXfont *)f;
 8012c44:	6181      	str	r1, [r0, #24]
        	myGFX->cursor_y += 6;
 8012c46:	3306      	adds	r3, #6
 8012c48:	8143      	strh	r3, [r0, #10]
}
 8012c4a:	4770      	bx	lr
	else if(myGFX->gfxFont)
 8012c4c:	b113      	cbz	r3, 8012c54 <GFXsetFont+0x1c>
		myGFX->fontDesc = 0;
 8012c4e:	83c1      	strh	r1, [r0, #30]
		uint8_t first  = (uint8_t) pgm_read_byte(&f->first);
 8012c50:	7a0b      	ldrb	r3, [r1, #8]
 8012c52:	deff      	udf	#255	; 0xff
		myGFX->fontHeight = 8;
 8012c54:	2308      	movs	r3, #8
 8012c56:	61c3      	str	r3, [r0, #28]
 8012c58:	e7f1      	b.n	8012c3e <GFXsetFont+0x6>
 8012c5a:	bf00      	nop

08012c5c <OLEDparseInt>:
	'A', '#',
	'B', ' '
};

int OLEDparseInt(char* buffer, uint32_t myNumber, uint8_t numDigits)
{
 8012c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int i = 0; i < numDigits; i++)
 8012c5e:	4617      	mov	r7, r2
 8012c60:	b1ca      	cbz	r2, 8012c96 <OLEDparseInt+0x3a>
 8012c62:	460d      	mov	r5, r1
 8012c64:	4606      	mov	r6, r0
 8012c66:	1e54      	subs	r4, r2, #1
	{
		int whichPlace = (uint32_t)(powf(10.0f,(numDigits - 1) - i));
 8012c68:	ee07 4a90 	vmov	s15, r4
 8012c6c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8012c70:	3c01      	subs	r4, #1
 8012c72:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8012c76:	f014 fbef 	bl	8027458 <powf>
 8012c7a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012c7e:	ee17 3a90 	vmov	r3, s15
		int thisDigit = (myNumber / whichPlace);
 8012c82:	fbb5 f2f3 	udiv	r2, r5, r3
		buffer[i] = thisDigit + 48;
 8012c86:	f102 0130 	add.w	r1, r2, #48	; 0x30
		myNumber -= thisDigit * whichPlace;
 8012c8a:	fb02 5513 	mls	r5, r2, r3, r5
	for (int i = 0; i < numDigits; i++)
 8012c8e:	1c63      	adds	r3, r4, #1
		buffer[i] = thisDigit + 48;
 8012c90:	f806 1b01 	strb.w	r1, [r6], #1
	for (int i = 0; i < numDigits; i++)
 8012c94:	d1e8      	bne.n	8012c68 <OLEDparseInt+0xc>
	}

	return numDigits;
}
 8012c96:	4638      	mov	r0, r7
 8012c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c9a:	bf00      	nop

08012c9c <OLEDparsePitch>:

int OLEDparsePitch(char* buffer, float midi, uint8_t showCents)
{
	int pclass, octave, note, neg = 0; float offset;

	note = (int)midi;
 8012c9c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	offset = midi - note;

	if ((midi + 0.5f) > (note+1))
 8012ca0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	note = (int)midi;
 8012ca4:	ee17 3a10 	vmov	r3, s14
	offset = midi - note;
 8012ca8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	if ((midi + 0.5f) > (note+1))
 8012cac:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012cb0:	1c5a      	adds	r2, r3, #1
	offset = midi - note;
 8012cb2:	ee30 0a66 	vsub.f32	s0, s0, s13
	if ((midi + 0.5f) > (note+1))
 8012cb6:	ee07 2a10 	vmov	s14, r2
 8012cba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
{
 8012cbe:	b470      	push	{r4, r5, r6}
	if ((midi + 0.5f) > (note+1))
 8012cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cc8:	dd3a      	ble.n	8012d40 <OLEDparsePitch+0xa4>
	{
		note += 1;
		offset = (1.0f - offset) + 0.01f;
 8012cca:	eddf 7a20 	vldr	s15, [pc, #128]	; 8012d4c <OLEDparsePitch+0xb0>
		note += 1;
 8012cce:	4613      	mov	r3, r2
		neg = 1;
 8012cd0:	2601      	movs	r6, #1
		offset = (1.0f - offset) + 0.01f;
 8012cd2:	ee37 0ac0 	vsub.f32	s0, s15, s0
	}

	pclass = (note % 12);
 8012cd6:	4d1e      	ldr	r5, [pc, #120]	; (8012d50 <OLEDparsePitch+0xb4>)
 8012cd8:	17da      	asrs	r2, r3, #31
	octave = (int)(note / 12) - 1;

	int idx = 0;

	buffer[idx++] = pitches[pclass*2];
 8012cda:	4c1e      	ldr	r4, [pc, #120]	; (8012d54 <OLEDparsePitch+0xb8>)
	pclass = (note % 12);
 8012cdc:	fb85 c503 	smull	ip, r5, r5, r3
 8012ce0:	ebc2 0265 	rsb	r2, r2, r5, asr #1
 8012ce4:	eb02 0542 	add.w	r5, r2, r2, lsl #1
		buffer[i] = thisDigit + 48;
 8012ce8:	322f      	adds	r2, #47	; 0x2f
	pclass = (note % 12);
 8012cea:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
	buffer[idx++] = pitches[pclass*2];
 8012cee:	f814 5013 	ldrb.w	r5, [r4, r3, lsl #1]
	buffer[idx++] = pitches[pclass*2+1];
 8012cf2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	buffer[idx++] = pitches[pclass*2];
 8012cf6:	7005      	strb	r5, [r0, #0]
	buffer[idx++] = pitches[pclass*2+1];
 8012cf8:	785b      	ldrb	r3, [r3, #1]
		buffer[i] = thisDigit + 48;
 8012cfa:	7082      	strb	r2, [r0, #2]
	buffer[idx++] = pitches[pclass*2+1];
 8012cfc:	7043      	strb	r3, [r0, #1]

	OLEDparseInt(&buffer[idx++], octave, 1);

	if (showCents)
 8012cfe:	b309      	cbz	r1, 8012d44 <OLEDparsePitch+0xa8>
		if (neg == 1)
			buffer[idx++] = '-';
		else
			buffer[idx++] = '+';

		OLEDparseInt(&buffer[idx], (uint32_t) (offset * 100.0f), 2);
 8012d00:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012d58 <OLEDparsePitch+0xbc>
		if (neg == 1)
 8012d04:	2e01      	cmp	r6, #1
		int thisDigit = (myNumber / whichPlace);
 8012d06:	4a15      	ldr	r2, [pc, #84]	; (8012d5c <OLEDparsePitch+0xc0>)
		buffer[idx++] = ' ';
 8012d08:	f04f 0120 	mov.w	r1, #32
		OLEDparseInt(&buffer[idx], (uint32_t) (offset * 100.0f), 2);
 8012d0c:	ee20 0a27 	vmul.f32	s0, s0, s15
			buffer[idx++] = '+';
 8012d10:	bf0c      	ite	eq
 8012d12:	232d      	moveq	r3, #45	; 0x2d
 8012d14:	232b      	movne	r3, #43	; 0x2b
		buffer[idx++] = ' ';
 8012d16:	70c1      	strb	r1, [r0, #3]
		idx += 2;
 8012d18:	2107      	movs	r1, #7
		OLEDparseInt(&buffer[idx], (uint32_t) (offset * 100.0f), 2);
 8012d1a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012d1e:	7103      	strb	r3, [r0, #4]
 8012d20:	ee17 3a90 	vmov	r3, s15
		int thisDigit = (myNumber / whichPlace);
 8012d24:	fba2 4203 	umull	r4, r2, r2, r3
 8012d28:	08d2      	lsrs	r2, r2, #3
		myNumber -= thisDigit * whichPlace;
 8012d2a:	eb02 0482 	add.w	r4, r2, r2, lsl #2
		buffer[i] = thisDigit + 48;
 8012d2e:	3230      	adds	r2, #48	; 0x30
		myNumber -= thisDigit * whichPlace;
 8012d30:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
		buffer[i] = thisDigit + 48;
 8012d34:	7142      	strb	r2, [r0, #5]
 8012d36:	3330      	adds	r3, #48	; 0x30
 8012d38:	7183      	strb	r3, [r0, #6]
	}

	return idx;
}
 8012d3a:	4608      	mov	r0, r1
 8012d3c:	bc70      	pop	{r4, r5, r6}
 8012d3e:	4770      	bx	lr
	int pclass, octave, note, neg = 0; float offset;
 8012d40:	2600      	movs	r6, #0
 8012d42:	e7c8      	b.n	8012cd6 <OLEDparsePitch+0x3a>
	OLEDparseInt(&buffer[idx++], octave, 1);
 8012d44:	2103      	movs	r1, #3
}
 8012d46:	bc70      	pop	{r4, r5, r6}
 8012d48:	4608      	mov	r0, r1
 8012d4a:	4770      	bx	lr
 8012d4c:	3f8147ae 	.word	0x3f8147ae
 8012d50:	2aaaaaab 	.word	0x2aaaaaab
 8012d54:	20000024 	.word	0x20000024
 8012d58:	42c80000 	.word	0x42c80000
 8012d5c:	cccccccd 	.word	0xcccccccd

08012d60 <OLEDparsePitchClass>:
int OLEDparsePitchClass(char* buffer, float midi)
{
	int pclass, note;
	float offset;

	note = (int)midi;
 8012d60:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	{
		note += 1;
		offset = (1.0f - offset) + 0.01f;
	}

	pclass = (note % 12);
 8012d64:	4a13      	ldr	r2, [pc, #76]	; (8012db4 <OLEDparsePitchClass+0x54>)
	if ((midi + 0.5f) > (note+1))
 8012d66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5

	int idx = 0;

	buffer[idx++] = pitches[pclass*2];
 8012d6a:	4913      	ldr	r1, [pc, #76]	; (8012db8 <OLEDparsePitchClass+0x58>)
	note = (int)midi;
 8012d6c:	ee17 3a10 	vmov	r3, s14
	if ((midi + 0.5f) > (note+1))
 8012d70:	ee30 0a27 	vadd.f32	s0, s0, s15
{
 8012d74:	b430      	push	{r4, r5}
	if ((midi + 0.5f) > (note+1))
 8012d76:	1c5c      	adds	r4, r3, #1
{
 8012d78:	4605      	mov	r5, r0
	buffer[idx++] = pitches[pclass*2+1];

	return idx;
}
 8012d7a:	2002      	movs	r0, #2
	if ((midi + 0.5f) > (note+1))
 8012d7c:	ee07 4a90 	vmov	s15, r4
 8012d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		note += 1;
 8012d84:	eeb4 0a67 	vcmp.f32	s0, s15
 8012d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d8c:	bfc8      	it	gt
 8012d8e:	4623      	movgt	r3, r4
	pclass = (note % 12);
 8012d90:	fb82 2403 	smull	r2, r4, r2, r3
 8012d94:	17da      	asrs	r2, r3, #31
 8012d96:	ebc2 0264 	rsb	r2, r2, r4, asr #1
 8012d9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012d9e:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
	buffer[idx++] = pitches[pclass*2];
 8012da2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
	buffer[idx++] = pitches[pclass*2+1];
 8012da6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
	buffer[idx++] = pitches[pclass*2];
 8012daa:	702a      	strb	r2, [r5, #0]
	buffer[idx++] = pitches[pclass*2+1];
 8012dac:	785b      	ldrb	r3, [r3, #1]
 8012dae:	706b      	strb	r3, [r5, #1]
}
 8012db0:	bc30      	pop	{r4, r5}
 8012db2:	4770      	bx	lr
 8012db4:	2aaaaaab 	.word	0x2aaaaaab
 8012db8:	20000024 	.word	0x20000024

08012dbc <OLEDparseFixedFloat>:

int OLEDparseFixedFloat(char* buffer, float input, uint8_t numDigits, uint8_t numDecimal)
{
	float power = powf(10.0f, numDecimal);
 8012dbc:	ee07 2a90 	vmov	s15, r2
{
 8012dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc4:	ed2d 8b02 	vpush	{d8}
 8012dc8:	b085      	sub	sp, #20
 8012dca:	eeb0 8a40 	vmov.f32	s16, s0
	float power = powf(10.0f, numDecimal);
 8012dce:	eef8 0a67 	vcvt.f32.u32	s1, s15
{
 8012dd2:	4680      	mov	r8, r0
	float power = powf(10.0f, numDecimal);
 8012dd4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
{
 8012dd8:	9201      	str	r2, [sp, #4]
 8012dda:	9102      	str	r1, [sp, #8]
	float power = powf(10.0f, numDecimal);
 8012ddc:	f014 fb3c 	bl	8027458 <powf>
	float f = ((float)(int)(input * power + 0.5f)) / power;
 8012de0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012de4:	eee0 7a08 	vfma.f32	s15, s0, s16
 8012de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012df0:	ee87 7a80 	vdiv.f32	s14, s15, s0

	int nonzeroHasHappened = 0, decimalHasHappened = 0;

	int myNumber = (int)(f * power);
 8012df4:	ee27 0a00 	vmul.f32	s0, s14, s0
 8012df8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012dfc:	ee17 5a90 	vmov	r5, s15

	int idx = 0, i = 0;

	if (myNumber < 0)
 8012e00:	2d00      	cmp	r5, #0
 8012e02:	f2c0 8082 	blt.w	8012f0a <OLEDparseFixedFloat+0x14e>
	int idx = 0, i = 0;
 8012e06:	2600      	movs	r6, #0
		myNumber *= -1;
		buffer[idx++] = '-';
		i++;
	}

	while (i < numDigits)
 8012e08:	9b02      	ldr	r3, [sp, #8]
 8012e0a:	429e      	cmp	r6, r3
 8012e0c:	da3e      	bge.n	8012e8c <OLEDparseFixedFloat+0xd0>
 8012e0e:	2400      	movs	r4, #0
 8012e10:	1b9f      	subs	r7, r3, r6
 8012e12:	9603      	str	r6, [sp, #12]
		if ((decimalHasHappened == 0) && ((numDigits-i) == numDecimal))
		{
			if (nonzeroHasHappened == 0)
			{
				idx++; //get past the negative if there is one - this is hacky should figure out how to do it right
				buffer[idx-1] = '0';
 8012e14:	46a9      	mov	r9, r5
			decimalHasHappened = 1;
		}
		else
		{

			int whichPlace = (uint32_t) powf(10.0f,(numDigits - 1 - i));
 8012e16:	f107 3aff 	add.w	sl, r7, #4294967295	; 0xffffffff
	while (i < numDigits)
 8012e1a:	9400      	str	r4, [sp, #0]
				buffer[idx-1] = '0';
 8012e1c:	46a3      	mov	fp, r4
 8012e1e:	e00d      	b.n	8012e3c <OLEDparseFixedFloat+0x80>
			int thisDigit = (myNumber / whichPlace);

			if (nonzeroHasHappened == 0)
			{
				if (thisDigit > 0)
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	dd63      	ble.n	8012eec <OLEDparseFixedFloat+0x130>
				{
					buffer[idx++] = thisDigit + 48;
 8012e24:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 8012e28:	462e      	mov	r6, r5
					nonzeroHasHappened = 1;
 8012e2a:	f04f 0b01 	mov.w	fp, #1
					buffer[idx++] = thisDigit + 48;
 8012e2e:	f88c e000 	strb.w	lr, [ip]
 8012e32:	3401      	adds	r4, #1
 8012e34:	fb02 9913 	mls	r9, r2, r3, r9
	while (i < numDigits)
 8012e38:	42bc      	cmp	r4, r7
 8012e3a:	d027      	beq.n	8012e8c <OLEDparseFixedFloat+0xd0>
		if ((decimalHasHappened == 0) && ((numDigits-i) == numDecimal))
 8012e3c:	9b00      	ldr	r3, [sp, #0]
 8012e3e:	1c75      	adds	r5, r6, #1
 8012e40:	b91b      	cbnz	r3, 8012e4a <OLEDparseFixedFloat+0x8e>
 8012e42:	1b3b      	subs	r3, r7, r4
 8012e44:	9a01      	ldr	r2, [sp, #4]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d026      	beq.n	8012e98 <OLEDparseFixedFloat+0xdc>
			int whichPlace = (uint32_t) powf(10.0f,(numDigits - 1 - i));
 8012e4a:	ebaa 0304 	sub.w	r3, sl, r4
 8012e4e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8012e52:	ee07 3a90 	vmov	s15, r3
 8012e56:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8012e5a:	f014 fafd 	bl	8027458 <powf>
 8012e5e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012e62:	eb08 0c06 	add.w	ip, r8, r6
 8012e66:	ee17 2a90 	vmov	r2, s15
			int thisDigit = (myNumber / whichPlace);
 8012e6a:	fb99 f3f2 	sdiv	r3, r9, r2
			if (nonzeroHasHappened == 0)
 8012e6e:	f1bb 0f00 	cmp.w	fp, #0
 8012e72:	d0d5      	beq.n	8012e20 <OLEDparseFixedFloat+0x64>
					buffer[idx++] = ' ';
				}
			}
			else
			{
				buffer[idx++] = thisDigit + 48;
 8012e74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e78:	462e      	mov	r6, r5
 8012e7a:	f04f 0b01 	mov.w	fp, #1
 8012e7e:	f88c 1000 	strb.w	r1, [ip]
 8012e82:	3401      	adds	r4, #1
 8012e84:	fb02 9913 	mls	r9, r2, r3, r9
	while (i < numDigits)
 8012e88:	42bc      	cmp	r4, r7
 8012e8a:	d1d7      	bne.n	8012e3c <OLEDparseFixedFloat+0x80>
			i++;
		}
	}

	return idx;
}
 8012e8c:	4630      	mov	r0, r6
 8012e8e:	b005      	add	sp, #20
 8012e90:	ecbd 8b02 	vpop	{d8}
 8012e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (nonzeroHasHappened == 0)
 8012e98:	f1bb 0f00 	cmp.w	fp, #0
 8012e9c:	d02c      	beq.n	8012ef8 <OLEDparseFixedFloat+0x13c>
 8012e9e:	4632      	mov	r2, r6
	while (i < numDigits)
 8012ea0:	9b03      	ldr	r3, [sp, #12]
			buffer[idx++] = '.';
 8012ea2:	f04f 012e 	mov.w	r1, #46	; 0x2e
	while (i < numDigits)
 8012ea6:	4423      	add	r3, r4
			buffer[idx++] = '.';
 8012ea8:	f808 1002 	strb.w	r1, [r8, r2]
	while (i < numDigits)
 8012eac:	9a02      	ldr	r2, [sp, #8]
 8012eae:	4293      	cmp	r3, r2
 8012eb0:	da31      	bge.n	8012f16 <OLEDparseFixedFloat+0x15a>
			int whichPlace = (uint32_t) powf(10.0f,(numDigits - 1 - i));
 8012eb2:	ebaa 0304 	sub.w	r3, sl, r4
			decimalHasHappened = 1;
 8012eb6:	2201      	movs	r2, #1
			int whichPlace = (uint32_t) powf(10.0f,(numDigits - 1 - i));
 8012eb8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
				buffer[idx++] = thisDigit + 48;
 8012ebc:	f04f 0b01 	mov.w	fp, #1
			int whichPlace = (uint32_t) powf(10.0f,(numDigits - 1 - i));
 8012ec0:	ee07 3a90 	vmov	s15, r3
			decimalHasHappened = 1;
 8012ec4:	9200      	str	r2, [sp, #0]
			int whichPlace = (uint32_t) powf(10.0f,(numDigits - 1 - i));
 8012ec6:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8012eca:	f014 fac5 	bl	8027458 <powf>
 8012ece:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012ed2:	eb08 0c05 	add.w	ip, r8, r5
 8012ed6:	3501      	adds	r5, #1
 8012ed8:	ee17 2a90 	vmov	r2, s15
				buffer[idx++] = thisDigit + 48;
 8012edc:	462e      	mov	r6, r5
			int thisDigit = (myNumber / whichPlace);
 8012ede:	fb99 f3f2 	sdiv	r3, r9, r2
				buffer[idx++] = thisDigit + 48;
 8012ee2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ee6:	f88c 1000 	strb.w	r1, [ip]
 8012eea:	e7ca      	b.n	8012e82 <OLEDparseFixedFloat+0xc6>
					buffer[idx++] = ' ';
 8012eec:	f04f 0120 	mov.w	r1, #32
 8012ef0:	462e      	mov	r6, r5
 8012ef2:	f88c 1000 	strb.w	r1, [ip]
 8012ef6:	e79c      	b.n	8012e32 <OLEDparseFixedFloat+0x76>
				buffer[idx-1] = '0';
 8012ef8:	eb08 0305 	add.w	r3, r8, r5
 8012efc:	f04f 0130 	mov.w	r1, #48	; 0x30
 8012f00:	462a      	mov	r2, r5
 8012f02:	1cb5      	adds	r5, r6, #2
 8012f04:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012f08:	e7ca      	b.n	8012ea0 <OLEDparseFixedFloat+0xe4>
		buffer[idx++] = '-';
 8012f0a:	232d      	movs	r3, #45	; 0x2d
		myNumber *= -1;
 8012f0c:	426d      	negs	r5, r5
		buffer[idx++] = '-';
 8012f0e:	2601      	movs	r6, #1
 8012f10:	f888 3000 	strb.w	r3, [r8]
 8012f14:	e778      	b.n	8012e08 <OLEDparseFixedFloat+0x4c>
			buffer[idx++] = '.';
 8012f16:	462e      	mov	r6, r5
}
 8012f18:	4630      	mov	r0, r6
 8012f1a:	b005      	add	sp, #20
 8012f1c:	ecbd 8b02 	vpop	{d8}
 8012f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012f24 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8012f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012f28:	4b8d      	ldr	r3, [pc, #564]	; (8013160 <MX_GPIO_Init+0x23c>)
{
 8012f2a:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f2c:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PC14 PC4 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012f2e:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8012f30:	f8df 8238 	ldr.w	r8, [pc, #568]	; 801316c <MX_GPIO_Init+0x248>
 8012f34:	f244 01d0 	movw	r1, #16592	; 0x40d0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f38:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8012f3a:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f3c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8012f3e:	4640      	mov	r0, r8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f40:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8012f42:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8013170 <MX_GPIO_Init+0x24c>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9 
 8012f46:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8013174 <MX_GPIO_Init+0x250>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 8012f4a:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8013178 <MX_GPIO_Init+0x254>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f4e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012f52:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 8012f56:	f046 0610 	orr.w	r6, r6, #16
 8012f5a:	f8c3 60e0 	str.w	r6, [r3, #224]	; 0xe0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pins : PF7 PF8 PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012f5e:	2603      	movs	r6, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012f60:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8012f64:	f007 0710 	and.w	r7, r7, #16
 8012f68:	9701      	str	r7, [sp, #4]
 8012f6a:	9f01      	ldr	r7, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012f6c:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8012f70:	f047 0704 	orr.w	r7, r7, #4
 8012f74:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8012f78:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8012f7c:	f007 0704 	and.w	r7, r7, #4
 8012f80:	9702      	str	r7, [sp, #8]
 8012f82:	9f02      	ldr	r7, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012f84:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8012f88:	f047 0720 	orr.w	r7, r7, #32
 8012f8c:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8012f90:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8012f94:	f007 0720 	and.w	r7, r7, #32
 8012f98:	9703      	str	r7, [sp, #12]
 8012f9a:	9f03      	ldr	r7, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012f9c:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8012fa0:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8012fa4:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8012fa8:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8012fac:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8012fb0:	9704      	str	r7, [sp, #16]
 8012fb2:	9f04      	ldr	r7, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012fb4:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8012fb8:	432f      	orrs	r7, r5
 8012fba:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8012fbe:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8012fc2:	402f      	ands	r7, r5
 8012fc4:	9705      	str	r7, [sp, #20]
 8012fc6:	9f05      	ldr	r7, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012fc8:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8012fcc:	f047 0702 	orr.w	r7, r7, #2
 8012fd0:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8012fd4:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8012fd8:	f007 0702 	and.w	r7, r7, #2
 8012fdc:	9706      	str	r7, [sp, #24]
 8012fde:	9f06      	ldr	r7, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012fe0:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8012fe4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8012fe8:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8012fec:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8012ff0:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8012ff4:	9707      	str	r7, [sp, #28]
 8012ff6:	9f07      	ldr	r7, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012ff8:	f8d3 70e0 	ldr.w	r7, [r3, #224]	; 0xe0
 8012ffc:	f047 0708 	orr.w	r7, r7, #8
 8013000:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
 8013004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 8013008:	4f56      	ldr	r7, [pc, #344]	; (8013164 <MX_GPIO_Init+0x240>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801300a:	f003 0308 	and.w	r3, r3, #8
 801300e:	9308      	str	r3, [sp, #32]
 8013010:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8013012:	f7f2 fc0b 	bl	800582c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8013016:	4622      	mov	r2, r4
 8013018:	4650      	mov	r0, sl
 801301a:	2140      	movs	r1, #64	; 0x40
 801301c:	f7f2 fc06 	bl	800582c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9 
 8013020:	4622      	mov	r2, r4
 8013022:	4648      	mov	r0, r9
 8013024:	f44f 61ea 	mov.w	r1, #1872	; 0x750
 8013028:	f7f2 fc00 	bl	800582c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 801302c:	4622      	mov	r2, r4
 801302e:	4658      	mov	r0, fp
 8013030:	2111      	movs	r1, #17
 8013032:	f7f2 fbfb 	bl	800582c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 8013036:	4622      	mov	r2, r4
 8013038:	4638      	mov	r0, r7
 801303a:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 801303e:	f7f2 fbf5 	bl	800582c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8013042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013046:	a909      	add	r1, sp, #36	; 0x24
 8013048:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 801304a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801304c:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013050:	f7f2 f8b2 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8013054:	f244 03d0 	movw	r3, #16592	; 0x40d0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013058:	a909      	add	r1, sp, #36	; 0x24
 801305a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801305c:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013060:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013064:	f7f2 f8a8 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8013068:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801306c:	4b3e      	ldr	r3, [pc, #248]	; (8013168 <MX_GPIO_Init+0x244>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801306e:	4640      	mov	r0, r8
 8013070:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013072:	940b      	str	r4, [sp, #44]	; 0x2c

  /*Configure GPIO pins : PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013074:	f508 6880 	add.w	r8, r8, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8013078:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801307c:	f7f2 f89c 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8013080:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013082:	a909      	add	r1, sp, #36	; 0x24
 8013084:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8013086:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013088:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801308a:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801308e:	f7f2 f893 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8013092:	f44f 63f0 	mov.w	r3, #1920	; 0x780
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013096:	4650      	mov	r0, sl
 8013098:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801309a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801309c:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80130a0:	f7f2 f88a 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80130a4:	f248 0302 	movw	r3, #32770	; 0x8002
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80130a8:	a909      	add	r1, sp, #36	; 0x24
 80130aa:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80130ac:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130ae:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80130b2:	f7f2 f881 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9 
 80130b6:	f44f 63ea 	mov.w	r3, #1872	; 0x750
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80130ba:	4648      	mov	r0, r9
 80130bc:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9 
 80130be:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80130c0:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130c2:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80130c6:	f7f2 f877 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80130ca:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80130cc:	a909      	add	r1, sp, #36	; 0x24
 80130ce:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80130d0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80130d2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130d4:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80130d8:	f7f2 f86e 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 80130dc:	f24f 0302 	movw	r3, #61442	; 0xf002
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80130e0:	a909      	add	r1, sp, #36	; 0x24
 80130e2:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 80130e4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80130e6:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80130ea:	f7f2 f865 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 80130ee:	f44f 7301 	mov.w	r3, #516	; 0x204
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80130f2:	4658      	mov	r0, fp
 80130f4:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 80130f6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130f8:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80130fc:	f7f2 f85c 	bl	80051b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_7;
 8013100:	f44f 6308 	mov.w	r3, #2176	; 0x880
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013104:	a909      	add	r1, sp, #36	; 0x24
 8013106:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_7;
 8013108:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801310a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801310e:	f7f2 f853 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG9 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_14;
 8013112:	f246 2308 	movw	r3, #25096	; 0x6208
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013116:	a909      	add	r1, sp, #36	; 0x24
 8013118:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_14;
 801311a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801311c:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013120:	f7f2 f84a 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8013124:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013128:	a909      	add	r1, sp, #36	; 0x24
 801312a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 801312c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801312e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013130:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013134:	f7f2 f840 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8013138:	2378      	movs	r3, #120	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801313a:	4640      	mov	r0, r8
 801313c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 801313e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013140:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013144:	f7f2 f838 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013148:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801314c:	a909      	add	r1, sp, #36	; 0x24
 801314e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013150:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013152:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013156:	f7f2 f82f 	bl	80051b8 <HAL_GPIO_Init>

}
 801315a:	b00f      	add	sp, #60	; 0x3c
 801315c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013160:	58024400 	.word	0x58024400
 8013164:	58021800 	.word	0x58021800
 8013168:	11110000 	.word	0x11110000
 801316c:	58020800 	.word	0x58020800
 8013170:	58021400 	.word	0x58021400
 8013174:	58020000 	.word	0x58020000
 8013178:	58020400 	.word	0x58020400

0801317c <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 801317c:	b538      	push	{r3, r4, r5, lr}

  hi2c2.Instance = I2C2;
 801317e:	4b13      	ldr	r3, [pc, #76]	; (80131cc <MX_I2C2_Init+0x50>)
  hi2c2.Init.Timing = 0x505097F4;
  hi2c2.Init.OwnAddress1 = 0;
 8013180:	2200      	movs	r2, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013182:	2101      	movs	r1, #1
  hi2c2.Instance = I2C2;
 8013184:	4d12      	ldr	r5, [pc, #72]	; (80131d0 <MX_I2C2_Init+0x54>)
  hi2c2.Init.Timing = 0x505097F4;
 8013186:	4c13      	ldr	r4, [pc, #76]	; (80131d4 <MX_I2C2_Init+0x58>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8013188:	4618      	mov	r0, r3
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801318a:	621a      	str	r2, [r3, #32]
  hi2c2.Init.Timing = 0x505097F4;
 801318c:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c2.Init.OwnAddress1 = 0;
 8013190:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c2.Init.OwnAddress2 = 0;
 8013194:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013198:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 801319c:	f7f3 f910 	bl	80063c0 <HAL_I2C_Init>
 80131a0:	b988      	cbnz	r0, 80131c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80131a2:	2100      	movs	r1, #0
 80131a4:	4809      	ldr	r0, [pc, #36]	; (80131cc <MX_I2C2_Init+0x50>)
 80131a6:	f7f4 fe17 	bl	8007dd8 <HAL_I2CEx_ConfigAnalogFilter>
 80131aa:	b948      	cbnz	r0, 80131c0 <MX_I2C2_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80131ac:	2100      	movs	r1, #0
 80131ae:	4807      	ldr	r0, [pc, #28]	; (80131cc <MX_I2C2_Init+0x50>)
 80131b0:	f7f4 fe6a 	bl	8007e88 <HAL_I2CEx_ConfigDigitalFilter>
 80131b4:	b900      	cbnz	r0, 80131b8 <MX_I2C2_Init+0x3c>
  {
    Error_Handler();
  }

}
 80131b6:	bd38      	pop	{r3, r4, r5, pc}
 80131b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80131bc:	f000 bbc0 	b.w	8013940 <Error_Handler>
    Error_Handler();
 80131c0:	f000 fbbe 	bl	8013940 <Error_Handler>
 80131c4:	e7f2      	b.n	80131ac <MX_I2C2_Init+0x30>
    Error_Handler();
 80131c6:	f000 fbbb 	bl	8013940 <Error_Handler>
 80131ca:	e7ea      	b.n	80131a2 <MX_I2C2_Init+0x26>
 80131cc:	200016d4 	.word	0x200016d4
 80131d0:	40005800 	.word	0x40005800
 80131d4:	505097f4 	.word	0x505097f4

080131d8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80131d8:	b538      	push	{r3, r4, r5, lr}

  hi2c4.Instance = I2C4;
 80131da:	4b13      	ldr	r3, [pc, #76]	; (8013228 <MX_I2C4_Init+0x50>)
  hi2c4.Init.Timing = 0x307075B1;
  hi2c4.Init.OwnAddress1 = 0;
 80131dc:	2200      	movs	r2, #0
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80131de:	2101      	movs	r1, #1
  hi2c4.Instance = I2C4;
 80131e0:	4d12      	ldr	r5, [pc, #72]	; (801322c <MX_I2C4_Init+0x54>)
  hi2c4.Init.Timing = 0x307075B1;
 80131e2:	4c13      	ldr	r4, [pc, #76]	; (8013230 <MX_I2C4_Init+0x58>)
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c4.Init.OwnAddress2 = 0;
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80131e4:	4618      	mov	r0, r3
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80131e6:	621a      	str	r2, [r3, #32]
  hi2c4.Init.Timing = 0x307075B1;
 80131e8:	e9c3 5400 	strd	r5, r4, [r3]
  hi2c4.Init.OwnAddress1 = 0;
 80131ec:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hi2c4.Init.OwnAddress2 = 0;
 80131f0:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80131f4:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80131f8:	f7f3 f8e2 	bl	80063c0 <HAL_I2C_Init>
 80131fc:	b988      	cbnz	r0, 8013222 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80131fe:	2100      	movs	r1, #0
 8013200:	4809      	ldr	r0, [pc, #36]	; (8013228 <MX_I2C4_Init+0x50>)
 8013202:	f7f4 fde9 	bl	8007dd8 <HAL_I2CEx_ConfigAnalogFilter>
 8013206:	b948      	cbnz	r0, 801321c <MX_I2C4_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8013208:	2100      	movs	r1, #0
 801320a:	4807      	ldr	r0, [pc, #28]	; (8013228 <MX_I2C4_Init+0x50>)
 801320c:	f7f4 fe3c 	bl	8007e88 <HAL_I2CEx_ConfigDigitalFilter>
 8013210:	b900      	cbnz	r0, 8013214 <MX_I2C4_Init+0x3c>
  {
    Error_Handler();
  }

}
 8013212:	bd38      	pop	{r3, r4, r5, pc}
 8013214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8013218:	f000 bb92 	b.w	8013940 <Error_Handler>
    Error_Handler();
 801321c:	f000 fb90 	bl	8013940 <Error_Handler>
 8013220:	e7f2      	b.n	8013208 <MX_I2C4_Init+0x30>
    Error_Handler();
 8013222:	f000 fb8d 	bl	8013940 <Error_Handler>
 8013226:	e7ea      	b.n	80131fe <MX_I2C4_Init+0x26>
 8013228:	20001688 	.word	0x20001688
 801322c:	58001c00 	.word	0x58001c00
 8013230:	307075b1 	.word	0x307075b1

08013234 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8013234:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C2)
 8013236:	4a50      	ldr	r2, [pc, #320]	; (8013378 <HAL_I2C_MspInit+0x144>)
{
 8013238:	b08b      	sub	sp, #44	; 0x2c
  if(i2cHandle->Instance==I2C2)
 801323a:	6803      	ldr	r3, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801323c:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C2)
 801323e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013240:	9409      	str	r4, [sp, #36]	; 0x24
 8013242:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8013246:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 801324a:	d069      	beq.n	8013320 <HAL_I2C_MspInit+0xec>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C4)
 801324c:	4a4b      	ldr	r2, [pc, #300]	; (801337c <HAL_I2C_MspInit+0x148>)
 801324e:	4293      	cmp	r3, r2
 8013250:	d001      	beq.n	8013256 <HAL_I2C_MspInit+0x22>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8013252:	b00b      	add	sp, #44	; 0x2c
 8013254:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013256:	4f4a      	ldr	r7, [pc, #296]	; (8013380 <HAL_I2C_MspInit+0x14c>)
 8013258:	4605      	mov	r5, r0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 801325a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801325e:	2212      	movs	r2, #18
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013264:	a905      	add	r1, sp, #20
    hdma_i2c4_rx.Instance = BDMA_Channel0;
 8013266:	4e47      	ldr	r6, [pc, #284]	; (8013384 <HAL_I2C_MspInit+0x150>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013268:	f043 0308 	orr.w	r3, r3, #8
 801326c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8013274:	9005      	str	r0, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8013276:	2001      	movs	r0, #1
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013278:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801327c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 801327e:	2204      	movs	r2, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8013280:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013282:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013284:	4840      	ldr	r0, [pc, #256]	; (8013388 <HAL_I2C_MspInit+0x154>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013286:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8013288:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801328a:	f7f1 ff95 	bl	80051b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 801328e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    hdma_i2c4_rx.Init.Request = BDMA_REQUEST_I2C4_RX;
 8013292:	210d      	movs	r1, #13
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013294:	60b4      	str	r4, [r6, #8]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013296:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_I2C4_CLK_ENABLE();
 801329a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 801329e:	4630      	mov	r0, r6
    __HAL_RCC_I2C4_CLK_ENABLE();
 80132a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80132a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80132a8:	60f4      	str	r4, [r6, #12]
    __HAL_RCC_I2C4_CLK_ENABLE();
 80132aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80132ae:	6132      	str	r2, [r6, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
 80132b0:	9304      	str	r3, [sp, #16]
 80132b2:	9b04      	ldr	r3, [sp, #16]
    hdma_i2c4_rx.Instance = BDMA_Channel0;
 80132b4:	4b35      	ldr	r3, [pc, #212]	; (801338c <HAL_I2C_MspInit+0x158>)
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80132b6:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80132ba:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_i2c4_rx.Instance = BDMA_Channel0;
 80132be:	e9c6 3100 	strd	r3, r1, [r6]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 80132c2:	f7ef f9e1 	bl	8002688 <HAL_DMA_Init>
 80132c6:	2800      	cmp	r0, #0
 80132c8:	d153      	bne.n	8013372 <HAL_I2C_MspInit+0x13e>
    hdma_i2c4_tx.Instance = BDMA_Channel1;
 80132ca:	4c31      	ldr	r4, [pc, #196]	; (8013390 <HAL_I2C_MspInit+0x15c>)
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80132cc:	2300      	movs	r3, #0
    hdma_i2c4_tx.Instance = BDMA_Channel1;
 80132ce:	4831      	ldr	r0, [pc, #196]	; (8013394 <HAL_I2C_MspInit+0x160>)
    hdma_i2c4_tx.Init.Request = BDMA_REQUEST_I2C4_TX;
 80132d0:	270e      	movs	r7, #14
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80132d2:	2140      	movs	r1, #64	; 0x40
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80132d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c4_tx.Instance = BDMA_Channel1;
 80132d8:	6020      	str	r0, [r4, #0]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 80132da:	4620      	mov	r0, r4
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 80132dc:	63ee      	str	r6, [r5, #60]	; 0x3c
 80132de:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80132e0:	e9c4 7101 	strd	r7, r1, [r4, #4]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80132e4:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80132e8:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80132ec:	e9c4 3307 	strd	r3, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 80132f0:	f7ef f9ca 	bl	8002688 <HAL_DMA_Init>
 80132f4:	2800      	cmp	r0, #0
 80132f6:	d139      	bne.n	801336c <HAL_I2C_MspInit+0x138>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 80132f8:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 7, 0);
 80132fa:	2200      	movs	r2, #0
 80132fc:	2107      	movs	r1, #7
 80132fe:	205f      	movs	r0, #95	; 0x5f
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8013300:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 7, 0);
 8013302:	f7ee fff5 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8013306:	205f      	movs	r0, #95	; 0x5f
 8013308:	f7ef f838 	bl	800237c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 7, 0);
 801330c:	2200      	movs	r2, #0
 801330e:	2107      	movs	r1, #7
 8013310:	2060      	movs	r0, #96	; 0x60
 8013312:	f7ee ffed 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8013316:	2060      	movs	r0, #96	; 0x60
 8013318:	f7ef f830 	bl	800237c <HAL_NVIC_EnableIRQ>
}
 801331c:	b00b      	add	sp, #44	; 0x2c
 801331e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013320:	4c17      	ldr	r4, [pc, #92]	; (8013380 <HAL_I2C_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8013322:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8013324:	f44f 6640 	mov.w	r6, #3072	; 0xc00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013328:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801332a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801332e:	a905      	add	r1, sp, #20
 8013330:	4819      	ldr	r0, [pc, #100]	; (8013398 <HAL_I2C_MspInit+0x164>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013332:	f043 0302 	orr.w	r3, r3, #2
 8013336:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 801333a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801333e:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013340:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013344:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8013346:	9209      	str	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013348:	9301      	str	r3, [sp, #4]
 801334a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801334c:	f7f1 ff34 	bl	80051b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8013350:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8013354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013358:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 801335c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8013360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013364:	9302      	str	r3, [sp, #8]
 8013366:	9b02      	ldr	r3, [sp, #8]
}
 8013368:	b00b      	add	sp, #44	; 0x2c
 801336a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 801336c:	f000 fae8 	bl	8013940 <Error_Handler>
 8013370:	e7c2      	b.n	80132f8 <HAL_I2C_MspInit+0xc4>
      Error_Handler();
 8013372:	f000 fae5 	bl	8013940 <Error_Handler>
 8013376:	e7a8      	b.n	80132ca <HAL_I2C_MspInit+0x96>
 8013378:	40005800 	.word	0x40005800
 801337c:	58001c00 	.word	0x58001c00
 8013380:	58024400 	.word	0x58024400
 8013384:	20001720 	.word	0x20001720
 8013388:	58020c00 	.word	0x58020c00
 801338c:	58025408 	.word	0x58025408
 8013390:	20001610 	.word	0x20001610
 8013394:	5802541c 	.word	0x5802541c
 8013398:	58020400 	.word	0x58020400

0801339c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C2)
 801339c:	4a18      	ldr	r2, [pc, #96]	; (8013400 <HAL_I2C_MspDeInit+0x64>)
 801339e:	6803      	ldr	r3, [r0, #0]
 80133a0:	4293      	cmp	r3, r2
 80133a2:	d020      	beq.n	80133e6 <HAL_I2C_MspDeInit+0x4a>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
  else if(i2cHandle->Instance==I2C4)
 80133a4:	4a17      	ldr	r2, [pc, #92]	; (8013404 <HAL_I2C_MspDeInit+0x68>)
 80133a6:	4293      	cmp	r3, r2
 80133a8:	d000      	beq.n	80133ac <HAL_I2C_MspDeInit+0x10>
 80133aa:	4770      	bx	lr
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 80133ac:	f502 320a 	add.w	r2, r2, #141312	; 0x22800
  
    /**I2C4 GPIO Configuration    
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA 
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13);
 80133b0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
{
 80133b4:	b510      	push	{r4, lr}
    __HAL_RCC_I2C4_CLK_DISABLE();
 80133b6:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 80133ba:	4604      	mov	r4, r0
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13);
 80133bc:	4812      	ldr	r0, [pc, #72]	; (8013408 <HAL_I2C_MspDeInit+0x6c>)
    __HAL_RCC_I2C4_CLK_DISABLE();
 80133be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80133c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13);
 80133c6:	f7f2 f901 	bl	80055cc <HAL_GPIO_DeInit>

    /* I2C4 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 80133ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80133cc:	f7ef fd8c 	bl	8002ee8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 80133d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80133d2:	f7ef fd89 	bl	8002ee8 <HAL_DMA_DeInit>

    /* I2C4 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 80133d6:	205f      	movs	r0, #95	; 0x5f
 80133d8:	f7ee ffe4 	bl	80023a4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 80133dc:	2060      	movs	r0, #96	; 0x60
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }
} 
 80133de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 80133e2:	f7ee bfdf 	b.w	80023a4 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80133e6:	4a09      	ldr	r2, [pc, #36]	; (801340c <HAL_I2C_MspDeInit+0x70>)
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80133e8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80133ec:	4808      	ldr	r0, [pc, #32]	; (8013410 <HAL_I2C_MspDeInit+0x74>)
    __HAL_RCC_I2C2_CLK_DISABLE();
 80133ee:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 80133f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80133f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80133fa:	f7f2 b8e7 	b.w	80055cc <HAL_GPIO_DeInit>
 80133fe:	bf00      	nop
 8013400:	40005800 	.word	0x40005800
 8013404:	58001c00 	.word	0x58001c00
 8013408:	58020c00 	.word	0x58020c00
 801340c:	58024400 	.word	0x58024400
 8013410:	58020400 	.word	0x58020400

08013414 <SCB_EnableDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8013414:	4816      	ldr	r0, [pc, #88]	; (8013470 <SCB_EnableDCache+0x5c>)
 8013416:	2300      	movs	r3, #0
{
 8013418:	b4f0      	push	{r4, r5, r6, r7}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 801341a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 801341e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8013422:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013426:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801342a:	f3c5 06c9 	ubfx	r6, r5, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801342e:	f3c5 354e 	ubfx	r5, r5, #13, #15
 8013432:	07b7      	lsls	r7, r6, #30
 8013434:	016d      	lsls	r5, r5, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013436:	ea05 040c 	and.w	r4, r5, ip
 801343a:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801343c:	4632      	mov	r2, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801343e:	ea44 0301 	orr.w	r3, r4, r1
      } while (ways-- != 0U);
 8013442:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013444:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8013448:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 801344c:	1c53      	adds	r3, r2, #1
 801344e:	d1f6      	bne.n	801343e <SCB_EnableDCache+0x2a>
 8013450:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
 8013452:	f115 0f20 	cmn.w	r5, #32
 8013456:	d1ee      	bne.n	8013436 <SCB_EnableDCache+0x22>
 8013458:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 801345c:	6943      	ldr	r3, [r0, #20]
 801345e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013462:	6143      	str	r3, [r0, #20]
 8013464:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013468:	f3bf 8f6f 	isb	sy
}
 801346c:	bcf0      	pop	{r4, r5, r6, r7}
 801346e:	4770      	bx	lr
 8013470:	e000ed00 	.word	0xe000ed00

08013474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8013474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013478:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801347a:	224c      	movs	r2, #76	; 0x4c
 801347c:	2100      	movs	r1, #0
 801347e:	a80a      	add	r0, sp, #40	; 0x28
 8013480:	f013 fd1b 	bl	8026eba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013484:	2220      	movs	r2, #32
 8013486:	2100      	movs	r1, #0
 8013488:	a802      	add	r0, sp, #8
 801348a:	f013 fd16 	bl	8026eba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801348e:	22bc      	movs	r2, #188	; 0xbc
 8013490:	2100      	movs	r1, #0
 8013492:	a81d      	add	r0, sp, #116	; 0x74
 8013494:	f013 fd11 	bl	8026eba <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8013498:	2002      	movs	r0, #2
 801349a:	f7f4 fd4b 	bl	8007f34 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 801349e:	4b3f      	ldr	r3, [pc, #252]	; (801359c <SystemClock_Config+0x128>)
 80134a0:	2100      	movs	r1, #0
 80134a2:	4a3f      	ldr	r2, [pc, #252]	; (80135a0 <SystemClock_Config+0x12c>)

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80134a4:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80134a6:	9101      	str	r1, [sp, #4]
 80134a8:	6999      	ldr	r1, [r3, #24]
 80134aa:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80134ae:	6199      	str	r1, [r3, #24]
 80134b0:	699b      	ldr	r3, [r3, #24]
 80134b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80134b6:	9301      	str	r3, [sp, #4]
 80134b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80134ba:	f043 0301 	orr.w	r3, r3, #1
 80134be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80134c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80134c2:	f003 0301 	and.w	r3, r3, #1
 80134c6:	9301      	str	r3, [sp, #4]
 80134c8:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80134ca:	6983      	ldr	r3, [r0, #24]
 80134cc:	049b      	lsls	r3, r3, #18
 80134ce:	d5fc      	bpl.n	80134ca <SystemClock_Config+0x56>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80134d0:	4a34      	ldr	r2, [pc, #208]	; (80135a4 <SystemClock_Config+0x130>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80134d2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80134d4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80134d8:	f04f 0c21 	mov.w	ip, #33	; 0x21
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80134dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80134de:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 10;
 80134e0:	210a      	movs	r1, #10
  RCC_OscInitStruct.PLL.PLLN = 384;
 80134e2:	f44f 76c0 	mov.w	r6, #384	; 0x180
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80134e6:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80134ea:	2703      	movs	r7, #3
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80134ec:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80134f0:	4323      	orrs	r3, r4
 80134f2:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80134f4:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80134f6:	900b      	str	r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80134f8:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80134fa:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80134fe:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 2;
 8013500:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8013502:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8013504:	9718      	str	r7, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8013506:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013508:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 384;
 801350c:	e9cd 1615 	strd	r1, r6, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8013510:	e9cd 831a 	strd	r8, r3, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013514:	f7f4 fd4e 	bl	8007fb4 <HAL_RCC_OscConfig>
 8013518:	b100      	cbz	r0, 801351c <SystemClock_Config+0xa8>
 801351a:	e7fe      	b.n	801351a <SystemClock_Config+0xa6>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801351c:	223f      	movs	r2, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801351e:	9703      	str	r7, [sp, #12]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8013520:	2708      	movs	r7, #8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8013522:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013524:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8013526:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 801352a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 801352c:	4641      	mov	r1, r8
 801352e:	eb0d 0007 	add.w	r0, sp, r7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8013532:	9705      	str	r7, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8013534:	e9cd 3306 	strd	r3, r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8013538:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 801353c:	f7f5 f960 	bl	8008800 <HAL_RCC_ClockConfig>
 8013540:	4603      	mov	r3, r0
 8013542:	b100      	cbz	r0, 8013546 <SystemClock_Config+0xd2>
 8013544:	e7fe      	b.n	8013544 <SystemClock_Config+0xd0>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8013546:	2219      	movs	r2, #25
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_SAI1
 8013548:	f8df e05c 	ldr.w	lr, [pc, #92]	; 80135a8 <SystemClock_Config+0x134>
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 801354c:	f44f 7cac 	mov.w	ip, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2R = 1;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.PLL3.PLL3M = 25;
  PeriphClkInitStruct.PLL3.PLL3N = 384;
 8013550:	9627      	str	r6, [sp, #156]	; 0x9c
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8013552:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8013556:	2607      	movs	r6, #7
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013558:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 801355a:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 801355c:	9522      	str	r5, [sp, #136]	; 0x88
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 801355e:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8013560:	932e      	str	r3, [sp, #184]	; 0xb8
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8013562:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8013564:	9532      	str	r5, [sp, #200]	; 0xc8
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8013566:	9342      	str	r3, [sp, #264]	; 0x108
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8013568:	9345      	str	r3, [sp, #276]	; 0x114
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 801356a:	9226      	str	r2, [sp, #152]	; 0x98
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 801356c:	913e      	str	r1, [sp, #248]	; 0xf8
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 801356e:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
 8013572:	e9cd 4728 	strd	r4, r7, [sp, #160]	; 0xa0
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8013576:	e9cd 432a 	strd	r4, r3, [sp, #168]	; 0xa8
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 801357a:	e9cd 332c 	strd	r3, r3, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 801357e:	e9cd 333c 	strd	r3, r3, [sp, #240]	; 0xf0
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8013582:	e9cd e21d 	strd	lr, r2, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8013586:	e9cd c61f 	strd	ip, r6, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801358a:	f7f5 fdd1 	bl	8009130 <HAL_RCCEx_PeriphCLKConfig>
 801358e:	b100      	cbz	r0, 8013592 <SystemClock_Config+0x11e>
 8013590:	e7fe      	b.n	8013590 <SystemClock_Config+0x11c>
  {
    Error_Handler();
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8013592:	f7f4 fcff 	bl	8007f94 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8013596:	b04c      	add	sp, #304	; 0x130
 8013598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801359c:	58024800 	.word	0x58024800
 80135a0:	58000400 	.word	0x58000400
 80135a4:	58024400 	.word	0x58024400
 80135a8:	010f0118 	.word	0x010f0118

080135ac <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
	//HAL_MDMA_Start_IT(&hmdma_mdma_channel40_dma1_stream0_tc_0, (uint32_t)&ADC_valuesDMA, (uint32_t)&ADC_values, 10, 1);
}
 80135ac:	4770      	bx	lr
 80135ae:	bf00      	nop

080135b0 <HAL_ADC_ConvHalfCpltCallback>:
 80135b0:	4770      	bx	lr
 80135b2:	bf00      	nop

080135b4 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 80135b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 1;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80135b8:	4c2b      	ldr	r4, [pc, #172]	; (8013668 <SDRAM_Initialization_sequence+0xb4>)
{
 80135ba:	b087      	sub	sp, #28
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80135bc:	2501      	movs	r5, #1
    __IO uint32_t tmpmrd = 0;
 80135be:	2600      	movs	r6, #0
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80135c0:	2710      	movs	r7, #16
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80135c2:	a902      	add	r1, sp, #8
 80135c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135c8:	4620      	mov	r0, r4
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
 80135ca:	f04f 0808 	mov.w	r8, #8
    __IO uint32_t tmpmrd = 0;
 80135ce:	9601      	str	r6, [sp, #4]
    Command.ModeRegisterDefinition = 0;
 80135d0:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80135d2:	f04f 0903 	mov.w	r9, #3
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80135d6:	9502      	str	r5, [sp, #8]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80135d8:	e9cd 7503 	strd	r7, r5, [sp, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80135dc:	f7f8 fe2e 	bl	800c23c <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 80135e0:	4628      	mov	r0, r5
 80135e2:	f7ed fa23 	bl	8000a2c <HAL_Delay>
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 80135e6:	2302      	movs	r3, #2
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80135e8:	eb0d 0108 	add.w	r1, sp, r8
 80135ec:	4620      	mov	r0, r4
 80135ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 80135f2:	9302      	str	r3, [sp, #8]
    Command.ModeRegisterDefinition = 0;
 80135f4:	9605      	str	r6, [sp, #20]
    Command.AutoRefreshNumber = 1;
 80135f6:	e9cd 7503 	strd	r7, r5, [sp, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80135fa:	f7f8 fe1f 	bl	800c23c <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 80135fe:	f240 2222 	movw	r2, #546	; 0x222
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8013602:	2304      	movs	r3, #4
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013604:	eb0d 0108 	add.w	r1, sp, r8
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 8013608:	9201      	str	r2, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801360a:	4620      	mov	r0, r4
    Command.ModeRegisterDefinition = tmpmrd;
 801360c:	f8dd c004 	ldr.w	ip, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013610:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8013614:	9302      	str	r3, [sp, #8]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8013616:	9703      	str	r7, [sp, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 8013618:	e9cd 5c04 	strd	r5, ip, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801361c:	f7f8 fe0e 	bl	800c23c <HAL_SDRAM_SendCommand>
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013620:	eb0d 0108 	add.w	r1, sp, r8
 8013624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013628:	4620      	mov	r0, r4
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801362a:	9703      	str	r7, [sp, #12]
    Command.ModeRegisterDefinition = 0;
 801362c:	9605      	str	r6, [sp, #20]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 801362e:	f8cd 9008 	str.w	r9, [sp, #8]
    Command.AutoRefreshNumber = 8;
 8013632:	f8cd 8010 	str.w	r8, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013636:	f7f8 fe01 	bl	800c23c <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 801363a:	4628      	mov	r0, r5
 801363c:	f7ed f9f6 	bl	8000a2c <HAL_Delay>
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013640:	eb0d 0108 	add.w	r1, sp, r8
 8013644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013648:	4620      	mov	r0, r4
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801364a:	e9cd 9702 	strd	r9, r7, [sp, #8]
    Command.ModeRegisterDefinition = 0;
 801364e:	e9cd 8604 	strd	r8, r6, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8013652:	f7f8 fdf3 	bl	800c23c <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 8013656:	f240 5169 	movw	r1, #1385	; 0x569
 801365a:	4620      	mov	r0, r4
 801365c:	f7f8 fe10 	bl	800c280 <HAL_SDRAM_ProgramRefreshRate>
}
 8013660:	b007      	add	sp, #28
 8013662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013666:	bf00      	nop
 8013668:	200015dc 	.word	0x200015dc

0801366c <randomNumber>:

float randomNumber(void) {
 801366c:	b500      	push	{lr}
 801366e:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8013670:	4807      	ldr	r0, [pc, #28]	; (8013690 <randomNumber+0x24>)
 8013672:	a901      	add	r1, sp, #4
 8013674:	f7f6 fef2 	bl	800a45c <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8013678:	eddd 7a01 	vldr	s15, [sp, #4]
 801367c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8013694 <randomNumber+0x28>
 8013680:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 8013684:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013688:	b003      	add	sp, #12
 801368a:	f85d fb04 	ldr.w	pc, [sp], #4
 801368e:	bf00      	nop
 8013690:	20001cd4 	.word	0x20001cd4
 8013694:	2f80000d 	.word	0x2f80000d

08013698 <MPU_Conf>:


void MPU_Conf(void)
{
 8013698:	b510      	push	{r4, lr}
 801369a:	b084      	sub	sp, #16
  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 801369c:	2400      	movs	r4, #0
	HAL_MPU_Disable();
 801369e:	f7ee feb3 	bl	8002408 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x30000000;
 80136a2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80136a6:	f240 1201 	movw	r2, #257	; 0x101
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80136aa:	4b0d      	ldr	r3, [pc, #52]	; (80136e0 <MPU_Conf+0x48>)


  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80136ac:	4668      	mov	r0, sp
  MPU_InitStruct.BaseAddress = 0x30000000;
 80136ae:	9101      	str	r1, [sp, #4]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80136b0:	f8ad 2000 	strh.w	r2, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80136b4:	e9cd 3402 	strd	r3, r4, [sp, #8]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80136b8:	f7ee fec8 	bl	800244c <HAL_MPU_ConfigRegion>
  //now set up D3 domain RAM

  MPU_InitStruct.Enable = MPU_REGION_ENABLE;

  //D3 Domain�SRAM1
  MPU_InitStruct.BaseAddress = 0x38000000;
 80136bc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80136c0:	f240 2201 	movw	r2, #513	; 0x201


  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80136c4:	4b07      	ldr	r3, [pc, #28]	; (80136e4 <MPU_Conf+0x4c>)


  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80136c6:	4668      	mov	r0, sp
  MPU_InitStruct.BaseAddress = 0x38000000;
 80136c8:	9101      	str	r1, [sp, #4]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80136ca:	f8ad 2000 	strh.w	r2, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80136ce:	9302      	str	r3, [sp, #8]
 80136d0:	9403      	str	r4, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80136d2:	f7ee febb 	bl	800244c <HAL_MPU_ConfigRegion>
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  */



  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80136d6:	2004      	movs	r0, #4
 80136d8:	f7ee fea6 	bl	8002428 <HAL_MPU_Enable>
}
 80136dc:	b004      	add	sp, #16
 80136de:	bd10      	pop	{r4, pc}
 80136e0:	03010011 	.word	0x03010011
 80136e4:	0301000f 	.word	0x0301000f

080136e8 <main>:
{
 80136e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MPU_Conf();
 80136ea:	f7ff ffd5 	bl	8013698 <MPU_Conf>
  __ASM volatile ("dsb 0xF":::"memory");
 80136ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80136f2:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80136f6:	4c7e      	ldr	r4, [pc, #504]	; (80138f0 <main+0x208>)
 80136f8:	2500      	movs	r5, #0
 80136fa:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80136fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013702:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8013706:	6963      	ldr	r3, [r4, #20]
 8013708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801370c:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801370e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013712:	f3bf 8f6f 	isb	sy
  SCB_EnableDCache();
 8013716:	f7ff fe7d 	bl	8013414 <SCB_EnableDCache>
  HAL_Init();
 801371a:	f7ed f943 	bl	80009a4 <HAL_Init>
  __ASM volatile ("dsb 0xF":::"memory");
 801371e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013722:	f3bf 8f6f 	isb	sy
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8013726:	6963      	ldr	r3, [r4, #20]
 8013728:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801372c:	6163      	str	r3, [r4, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 801372e:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8013732:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013736:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 801373a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801373e:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8013742:	6963      	ldr	r3, [r4, #20]
 8013744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013748:	6163      	str	r3, [r4, #20]
 801374a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 801374e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8013752:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8013756:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801375a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 801375e:	07b7      	lsls	r7, r6, #30
 8013760:	0158      	lsls	r0, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8013762:	ea00 050c 	and.w	r5, r0, ip
 8013766:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8013768:	4632      	mov	r2, r6
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801376a:	ea41 0305 	orr.w	r3, r1, r5
      } while (ways-- != 0U);
 801376e:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8013770:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8013774:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 8013778:	1c53      	adds	r3, r2, #1
 801377a:	d1f6      	bne.n	801376a <main+0x82>
 801377c:	3820      	subs	r0, #32
    } while(sets-- != 0U);
 801377e:	f110 0f20 	cmn.w	r0, #32
 8013782:	d1ee      	bne.n	8013762 <main+0x7a>
 8013784:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013788:	f3bf 8f6f 	isb	sy
  SystemClock_Config();
 801378c:	f7ff fe72 	bl	8013474 <SystemClock_Config>
  MX_GPIO_Init();
 8013790:	f7ff fbc8 	bl	8012f24 <MX_GPIO_Init>
  MX_BDMA_Init();
 8013794:	f7fd ff2c 	bl	80115f0 <MX_BDMA_Init>
  MX_DMA_Init();
 8013798:	f7fe f82e 	bl	80117f8 <MX_DMA_Init>
  MX_FMC_Init();
 801379c:	f7fe fbee 	bl	8011f7c <MX_FMC_Init>
  MX_ADC1_Init();
 80137a0:	f7fd f97a 	bl	8010a98 <MX_ADC1_Init>
  MX_I2C2_Init();
 80137a4:	f7ff fcea 	bl	801317c <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 80137a8:	f000 ff80 	bl	80146ac <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80137ac:	f7fe fbcc 	bl	8011f48 <MX_FATFS_Init>
  MX_SAI1_Init();
 80137b0:	f000 fdf4 	bl	801439c <MX_SAI1_Init>
  MX_RNG_Init();
 80137b4:	f000 fdc4 	bl	8014340 <MX_RNG_Init>
  MX_I2C4_Init();
 80137b8:	f7ff fd0e 	bl	80131d8 <MX_I2C4_Init>
  MX_USB_HOST_Init();
 80137bc:	f00a f9d8 	bl	801db70 <MX_USB_HOST_Init>
  MX_TIM3_Init();
 80137c0:	f008 fc18 	bl	801bff4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80137c4:	f008 fc94 	bl	801c0f0 <MX_TIM4_Init>
  __ASM volatile ("dsb 0xF":::"memory");
 80137c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80137cc:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80137d0:	2500      	movs	r5, #0
 80137d2:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80137d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80137da:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80137de:	6963      	ldr	r3, [r4, #20]
 80137e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80137e4:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80137e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80137ea:	f3bf 8f6f 	isb	sy
  SCB_EnableDCache();
 80137ee:	f7ff fe11 	bl	8013414 <SCB_EnableDCache>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80137f2:	2104      	movs	r1, #4
 80137f4:	483f      	ldr	r0, [pc, #252]	; (80138f4 <main+0x20c>)
 80137f6:	f7f9 f883 	bl	800c900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80137fa:	4629      	mov	r1, r5
 80137fc:	483e      	ldr	r0, [pc, #248]	; (80138f8 <main+0x210>)
 80137fe:	f7f9 f87f 	bl	800c900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8013802:	2104      	movs	r1, #4
 8013804:	483c      	ldr	r0, [pc, #240]	; (80138f8 <main+0x210>)
 8013806:	f7f9 f87b 	bl	800c900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 801380a:	2108      	movs	r1, #8
 801380c:	483a      	ldr	r0, [pc, #232]	; (80138f8 <main+0x210>)
 801380e:	f7f9 f877 	bl	800c900 <HAL_TIM_PWM_Start>
  HAL_FLASH_Unlock();
 8013812:	f7f1 fac3 	bl	8004d9c <HAL_FLASH_Unlock>
  if( EE_Init() != EE_OK)
 8013816:	f7fe f883 	bl	8011920 <EE_Init>
 801381a:	4605      	mov	r5, r0
 801381c:	b100      	cbz	r0, 8013820 <main+0x138>
 801381e:	e7fe      	b.n	801381e <main+0x136>
  if((EE_ReadVariable(VirtAddVarTab[0],  &VarDataTab)) != HAL_OK) // read what the preset was before last power-off
 8013820:	4c36      	ldr	r4, [pc, #216]	; (80138fc <main+0x214>)
 8013822:	4937      	ldr	r1, [pc, #220]	; (8013900 <main+0x218>)
 8013824:	8820      	ldrh	r0, [r4, #0]
 8013826:	f7fe fa53 	bl	8011cd0 <EE_ReadVariable>
 801382a:	2800      	cmp	r0, #0
 801382c:	d13e      	bne.n	80138ac <main+0x1c4>
  if (VarDataTab < PresetNil) //make sure the stored data is a number not past the number of available presets
 801382e:	4b34      	ldr	r3, [pc, #208]	; (8013900 <main+0x218>)

// helper function to initialize measuring unit (cycle counter) */
static void CycleCounterInit( void )
{
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8013830:	4a34      	ldr	r2, [pc, #208]	; (8013904 <main+0x21c>)
  if (VarDataTab < PresetNil) //make sure the stored data is a number not past the number of available presets
 8013832:	881b      	ldrh	r3, [r3, #0]
 8013834:	4834      	ldr	r0, [pc, #208]	; (8013908 <main+0x220>)
 8013836:	2b12      	cmp	r3, #18

  /* Unlock DWT registers */
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8013838:	4934      	ldr	r1, [pc, #208]	; (801390c <main+0x224>)
  if (VarDataTab < PresetNil) //make sure the stored data is a number not past the number of available presets
 801383a:	bf28      	it	cs
 801383c:	2300      	movcs	r3, #0
 801383e:	7003      	strb	r3, [r0, #0]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8013840:	68d3      	ldr	r3, [r2, #12]
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8013842:	6809      	ldr	r1, [r1, #0]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8013844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013848:	60d3      	str	r3, [r2, #12]
  if ((*(uint32_t*)0xE0001FB4) & 1)
 801384a:	07cb      	lsls	r3, r1, #31
 801384c:	d502      	bpl.n	8013854 <main+0x16c>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 801384e:	4b30      	ldr	r3, [pc, #192]	; (8013910 <main+0x228>)
 8013850:	4a30      	ldr	r2, [pc, #192]	; (8013914 <main+0x22c>)
 8013852:	601a      	str	r2, [r3, #0]

  /* clear the cycle counter */
  DWT->CYCCNT = 0;
 8013854:	4830      	ldr	r0, [pc, #192]	; (8013918 <main+0x230>)
 8013856:	2500      	movs	r5, #0

  /* start the cycle counter */
  DWT->CTRL = 0x40000001;
 8013858:	4c30      	ldr	r4, [pc, #192]	; (801391c <main+0x234>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 801385a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  DWT->CYCCNT = 0;
 801385e:	6045      	str	r5, [r0, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8013860:	462a      	mov	r2, r5
  DWT->CTRL = 0x40000001;
 8013862:	6004      	str	r4, [r0, #0]

  for (int i = 0; i < 4; i++)
  {
	  cycleCountAverages[i][0] = 0.0f;
 8013864:	2400      	movs	r4, #0
 8013866:	4b2e      	ldr	r3, [pc, #184]	; (8013920 <main+0x238>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8013868:	482e      	ldr	r0, [pc, #184]	; (8013924 <main+0x23c>)
	  cycleCountAverages[i][0] = 0.0f;
 801386a:	601c      	str	r4, [r3, #0]
	  cycleCountAverages[i][1] = 0.0f;
 801386c:	605c      	str	r4, [r3, #4]
	  cycleCountAverages[i][2] = 0.0f;
 801386e:	609c      	str	r4, [r3, #8]
	  cycleCountAverages[i][0] = 0.0f;
 8013870:	60dc      	str	r4, [r3, #12]
	  cycleCountAverages[i][1] = 0.0f;
 8013872:	611c      	str	r4, [r3, #16]
	  cycleCountAverages[i][2] = 0.0f;
 8013874:	615c      	str	r4, [r3, #20]
	  cycleCountAverages[i][0] = 0.0f;
 8013876:	619c      	str	r4, [r3, #24]
	  cycleCountAverages[i][1] = 0.0f;
 8013878:	61dc      	str	r4, [r3, #28]
	  cycleCountAverages[i][2] = 0.0f;
 801387a:	621c      	str	r4, [r3, #32]
	  cycleCountAverages[i][0] = 0.0f;
 801387c:	625c      	str	r4, [r3, #36]	; 0x24
	  cycleCountAverages[i][1] = 0.0f;
 801387e:	629c      	str	r4, [r3, #40]	; 0x28
	  cycleCountAverages[i][2] = 0.0f;
 8013880:	62dc      	str	r4, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8013882:	f7f1 ffd3 	bl	800582c <HAL_GPIO_WritePin>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8013886:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 801388a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 801388e:	eee1 3a10 	vmsr	fpscr, r3
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8013892:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013896:	4629      	mov	r1, r5
 8013898:	4823      	ldr	r0, [pc, #140]	; (8013928 <main+0x240>)
 801389a:	f7ee fbc7 	bl	800202c <HAL_ADCEx_Calibration_Start>
  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values, NUM_ADC_CHANNELS) != HAL_OK)
 801389e:	2206      	movs	r2, #6
 80138a0:	4922      	ldr	r1, [pc, #136]	; (801392c <main+0x244>)
 80138a2:	4821      	ldr	r0, [pc, #132]	; (8013928 <main+0x240>)
 80138a4:	f7ed f8f4 	bl	8000a90 <HAL_ADC_Start_DMA>
 80138a8:	b138      	cbz	r0, 80138ba <main+0x1d2>
 80138aa:	e7fe      	b.n	80138aa <main+0x1c2>
	  if((EE_WriteVariable(VirtAddVarTab[0],  0)) != HAL_OK)
 80138ac:	4629      	mov	r1, r5
 80138ae:	8820      	ldrh	r0, [r4, #0]
 80138b0:	f7fe fa4a 	bl	8011d48 <EE_WriteVariable>
 80138b4:	2800      	cmp	r0, #0
 80138b6:	d0ba      	beq.n	801382e <main+0x146>
 80138b8:	e7fe      	b.n	80138b8 <main+0x1d0>
 80138ba:	4c1d      	ldr	r4, [pc, #116]	; (8013930 <main+0x248>)
  HAL_Delay(10);
 80138bc:	200a      	movs	r0, #10
 80138be:	f7ed f8b5 	bl	8000a2c <HAL_Delay>
  OLED_init(&hi2c4);
 80138c2:	4620      	mov	r0, r4
 80138c4:	f000 f95a 	bl	8013b7c <OLED_init>
  SDRAM_Initialization_sequence();
 80138c8:	f7ff fe74 	bl	80135b4 <SDRAM_Initialization_sequence>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 80138cc:	4a19      	ldr	r2, [pc, #100]	; (8013934 <main+0x24c>)
 80138ce:	491a      	ldr	r1, [pc, #104]	; (8013938 <main+0x250>)
 80138d0:	481a      	ldr	r0, [pc, #104]	; (801393c <main+0x254>)
 80138d2:	f7fd fdb3 	bl	801143c <audioInit>
  OLED_writePreset();
 80138d6:	f000 f8d7 	bl	8013a88 <OLED_writePreset>
    MX_USB_HOST_Process();
 80138da:	f00a f97f 	bl	801dbdc <MX_USB_HOST_Process>
    OLED_process(); // process what to write to the screen but don't actually draw
 80138de:	f000 fcbd 	bl	801425c <OLED_process>
 	if (hi2c4.State == HAL_I2C_STATE_READY)
 80138e2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80138e6:	2b20      	cmp	r3, #32
 80138e8:	d1f7      	bne.n	80138da <main+0x1f2>
	  OLED_draw();
 80138ea:	f000 fa91 	bl	8013e10 <OLED_draw>
 80138ee:	e7f4      	b.n	80138da <main+0x1f2>
 80138f0:	e000ed00 	.word	0xe000ed00
 80138f4:	200186c0 	.word	0x200186c0
 80138f8:	20018680 	.word	0x20018680
 80138fc:	2000001c 	.word	0x2000001c
 8013900:	20000534 	.word	0x20000534
 8013904:	e000edf0 	.word	0xe000edf0
 8013908:	20000694 	.word	0x20000694
 801390c:	e0001fb4 	.word	0xe0001fb4
 8013910:	e0001fb0 	.word	0xe0001fb0
 8013914:	c5acce55 	.word	0xc5acce55
 8013918:	e0001000 	.word	0xe0001000
 801391c:	40000001 	.word	0x40000001
 8013920:	20001ba0 	.word	0x20001ba0
 8013924:	58020800 	.word	0x58020800
 8013928:	20000750 	.word	0x20000750
 801392c:	30001080 	.word	0x30001080
 8013930:	20001688 	.word	0x20001688
 8013934:	20001ce8 	.word	0x20001ce8
 8013938:	20001e70 	.word	0x20001e70
 801393c:	200016d4 	.word	0x200016d4

08013940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013940:	e7fe      	b.n	8013940 <Error_Handler>
 8013942:	bf00      	nop

08013944 <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8013944:	4770      	bx	lr
 8013946:	bf00      	nop

08013948 <setLED_Edit>:
	buttonActionFunctions[Rhodes] = UIRhodesButtons;
}

void setLED_Edit(uint8_t onOff)
{
	if (onOff)
 8013948:	b920      	cbnz	r0, 8013954 <setLED_Edit+0xc>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 801394a:	4602      	mov	r2, r0
 801394c:	2180      	movs	r1, #128	; 0x80
 801394e:	4804      	ldr	r0, [pc, #16]	; (8013960 <setLED_Edit+0x18>)
 8013950:	f7f1 bf6c 	b.w	800582c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8013954:	2201      	movs	r2, #1
 8013956:	2180      	movs	r1, #128	; 0x80
 8013958:	4801      	ldr	r0, [pc, #4]	; (8013960 <setLED_Edit+0x18>)
 801395a:	f7f1 bf67 	b.w	800582c <HAL_GPIO_WritePin>
 801395e:	bf00      	nop
 8013960:	58020800 	.word	0x58020800

08013964 <setLED_USB>:
}


void setLED_USB(uint8_t onOff)
{
	if (onOff)
 8013964:	b920      	cbnz	r0, 8013970 <setLED_USB+0xc>
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8013966:	4602      	mov	r2, r0
 8013968:	2140      	movs	r1, #64	; 0x40
 801396a:	4804      	ldr	r0, [pc, #16]	; (801397c <setLED_USB+0x18>)
 801396c:	f7f1 bf5e 	b.w	800582c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8013970:	2201      	movs	r2, #1
 8013972:	2140      	movs	r1, #64	; 0x40
 8013974:	4801      	ldr	r0, [pc, #4]	; (801397c <setLED_USB+0x18>)
 8013976:	f7f1 bf59 	b.w	800582c <HAL_GPIO_WritePin>
 801397a:	bf00      	nop
 801397c:	58021800 	.word	0x58021800

08013980 <setLED_1>:
}


void setLED_1(uint8_t onOff)
{
	if (onOff)
 8013980:	b928      	cbnz	r0, 801398e <setLED_1+0xe>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8013982:	4602      	mov	r2, r0
 8013984:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013988:	4804      	ldr	r0, [pc, #16]	; (801399c <setLED_1+0x1c>)
 801398a:	f7f1 bf4f 	b.w	800582c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 801398e:	2201      	movs	r2, #1
 8013990:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013994:	4801      	ldr	r0, [pc, #4]	; (801399c <setLED_1+0x1c>)
 8013996:	f7f1 bf49 	b.w	800582c <HAL_GPIO_WritePin>
 801399a:	bf00      	nop
 801399c:	58020000 	.word	0x58020000

080139a0 <setLED_2>:
	}
}

void setLED_2(uint8_t onOff)
{
	if (onOff)
 80139a0:	b928      	cbnz	r0, 80139ae <setLED_2+0xe>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80139a2:	4602      	mov	r2, r0
 80139a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80139a8:	4804      	ldr	r0, [pc, #16]	; (80139bc <setLED_2+0x1c>)
 80139aa:	f7f1 bf3f 	b.w	800582c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80139ae:	2201      	movs	r2, #1
 80139b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80139b4:	4801      	ldr	r0, [pc, #4]	; (80139bc <setLED_2+0x1c>)
 80139b6:	f7f1 bf39 	b.w	800582c <HAL_GPIO_WritePin>
 80139ba:	bf00      	nop
 80139bc:	58020000 	.word	0x58020000

080139c0 <setLED_A>:
}


void setLED_A(uint8_t onOff)
{
	if (onOff)
 80139c0:	b920      	cbnz	r0, 80139cc <setLED_A+0xc>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80139c2:	4602      	mov	r2, r0
 80139c4:	2140      	movs	r1, #64	; 0x40
 80139c6:	4804      	ldr	r0, [pc, #16]	; (80139d8 <setLED_A+0x18>)
 80139c8:	f7f1 bf30 	b.w	800582c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80139cc:	2201      	movs	r2, #1
 80139ce:	2140      	movs	r1, #64	; 0x40
 80139d0:	4801      	ldr	r0, [pc, #4]	; (80139d8 <setLED_A+0x18>)
 80139d2:	f7f1 bf2b 	b.w	800582c <HAL_GPIO_WritePin>
 80139d6:	bf00      	nop
 80139d8:	58020800 	.word	0x58020800

080139dc <setLED_B>:
	}
}

void setLED_B(uint8_t onOff)
{
	if (onOff)
 80139dc:	b920      	cbnz	r0, 80139e8 <setLED_B+0xc>
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 80139de:	4602      	mov	r2, r0
 80139e0:	2180      	movs	r1, #128	; 0x80
 80139e2:	4804      	ldr	r0, [pc, #16]	; (80139f4 <setLED_B+0x18>)
 80139e4:	f7f1 bf22 	b.w	800582c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);
 80139e8:	2201      	movs	r2, #1
 80139ea:	2180      	movs	r1, #128	; 0x80
 80139ec:	4801      	ldr	r0, [pc, #4]	; (80139f4 <setLED_B+0x18>)
 80139ee:	f7f1 bf1d 	b.w	800582c <HAL_GPIO_WritePin>
 80139f2:	bf00      	nop
 80139f4:	58021800 	.word	0x58021800

080139f8 <setLED_C>:
	}
}

void setLED_C(uint8_t onOff)
{
	if (onOff)
 80139f8:	b928      	cbnz	r0, 8013a06 <setLED_C+0xe>
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 80139fa:	4602      	mov	r2, r0
 80139fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013a00:	4804      	ldr	r0, [pc, #16]	; (8013a14 <setLED_C+0x1c>)
 8013a02:	f7f1 bf13 	b.w	800582c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
 8013a06:	2201      	movs	r2, #1
 8013a08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013a0c:	4801      	ldr	r0, [pc, #4]	; (8013a14 <setLED_C+0x1c>)
 8013a0e:	f7f1 bf0d 	b.w	800582c <HAL_GPIO_WritePin>
 8013a12:	bf00      	nop
 8013a14:	58021800 	.word	0x58021800

08013a18 <setLED_leftout_clip>:
	}
}

void setLED_leftout_clip(uint8_t onOff)
{
	if (onOff)
 8013a18:	b920      	cbnz	r0, 8013a24 <setLED_leftout_clip+0xc>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8013a1a:	4602      	mov	r2, r0
 8013a1c:	2110      	movs	r1, #16
 8013a1e:	4804      	ldr	r0, [pc, #16]	; (8013a30 <setLED_leftout_clip+0x18>)
 8013a20:	f7f1 bf04 	b.w	800582c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8013a24:	2201      	movs	r2, #1
 8013a26:	2110      	movs	r1, #16
 8013a28:	4801      	ldr	r0, [pc, #4]	; (8013a30 <setLED_leftout_clip+0x18>)
 8013a2a:	f7f1 beff 	b.w	800582c <HAL_GPIO_WritePin>
 8013a2e:	bf00      	nop
 8013a30:	58020000 	.word	0x58020000

08013a34 <setLED_rightout_clip>:
	}
}

void setLED_rightout_clip(uint8_t onOff)
{
	if (onOff)
 8013a34:	b920      	cbnz	r0, 8013a40 <setLED_rightout_clip+0xc>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8013a36:	4602      	mov	r2, r0
 8013a38:	2140      	movs	r1, #64	; 0x40
 8013a3a:	4804      	ldr	r0, [pc, #16]	; (8013a4c <setLED_rightout_clip+0x18>)
 8013a3c:	f7f1 bef6 	b.w	800582c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8013a40:	2201      	movs	r2, #1
 8013a42:	2140      	movs	r1, #64	; 0x40
 8013a44:	4801      	ldr	r0, [pc, #4]	; (8013a4c <setLED_rightout_clip+0x18>)
 8013a46:	f7f1 bef1 	b.w	800582c <HAL_GPIO_WritePin>
 8013a4a:	bf00      	nop
 8013a4c:	58020000 	.word	0x58020000

08013a50 <setLED_leftin_clip>:
	}
}

void setLED_leftin_clip(uint8_t onOff)
{
	if (onOff)
 8013a50:	b920      	cbnz	r0, 8013a5c <setLED_leftin_clip+0xc>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8013a52:	4602      	mov	r2, r0
 8013a54:	2110      	movs	r1, #16
 8013a56:	4804      	ldr	r0, [pc, #16]	; (8013a68 <setLED_leftin_clip+0x18>)
 8013a58:	f7f1 bee8 	b.w	800582c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	2110      	movs	r1, #16
 8013a60:	4801      	ldr	r0, [pc, #4]	; (8013a68 <setLED_leftin_clip+0x18>)
 8013a62:	f7f1 bee3 	b.w	800582c <HAL_GPIO_WritePin>
 8013a66:	bf00      	nop
 8013a68:	58020800 	.word	0x58020800

08013a6c <setLED_rightin_clip>:
	}
}

void setLED_rightin_clip(uint8_t onOff)
{
	if (onOff)
 8013a6c:	b920      	cbnz	r0, 8013a78 <setLED_rightin_clip+0xc>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8013a6e:	4602      	mov	r2, r0
 8013a70:	2101      	movs	r1, #1
 8013a72:	4804      	ldr	r0, [pc, #16]	; (8013a84 <setLED_rightin_clip+0x18>)
 8013a74:	f7f1 beda 	b.w	800582c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8013a78:	2201      	movs	r2, #1
 8013a7a:	4802      	ldr	r0, [pc, #8]	; (8013a84 <setLED_rightin_clip+0x18>)
 8013a7c:	4611      	mov	r1, r2
 8013a7e:	f7f1 bed5 	b.w	800582c <HAL_GPIO_WritePin>
 8013a82:	bf00      	nop
 8013a84:	58020400 	.word	0x58020400

08013a88 <OLED_writePreset>:
	}
//	OLED_draw();
}

void OLED_writePreset()
{
 8013a88:	b5f0      	push	{r4, r5, r6, r7, lr}
	GFXsetFont(&theGFX, &EuphemiaCAS8pt7b);
 8013a8a:	4935      	ldr	r1, [pc, #212]	; (8013b60 <OLED_writePreset+0xd8>)
{
 8013a8c:	b089      	sub	sp, #36	; 0x24
	GFXsetFont(&theGFX, &EuphemiaCAS8pt7b);
 8013a8e:	4835      	ldr	r0, [pc, #212]	; (8013b64 <OLED_writePreset+0xdc>)
}


void OLEDclear()
{
	GFXfillRect(&theGFX, 0, 0, 128, 32, 0);
 8013a90:	2600      	movs	r6, #0
	GFXsetFont(&theGFX, &EuphemiaCAS8pt7b);
 8013a92:	f7ff f8d1 	bl	8012c38 <GFXsetFont>
	GFXfillRect(&theGFX, 0, 0, 128, 32, 0);
 8013a96:	2320      	movs	r3, #32
	itoa((currentPreset+1), tempString, 10);
 8013a98:	4f33      	ldr	r7, [pc, #204]	; (8013b68 <OLED_writePreset+0xe0>)
	GFXfillRect(&theGFX, 0, 0, 128, 32, 0);
 8013a9a:	4632      	mov	r2, r6
 8013a9c:	4631      	mov	r1, r6
 8013a9e:	9300      	str	r3, [sp, #0]
 8013aa0:	4830      	ldr	r0, [pc, #192]	; (8013b64 <OLED_writePreset+0xdc>)
 8013aa2:	2380      	movs	r3, #128	; 0x80
 8013aa4:	9601      	str	r6, [sp, #4]
	itoa((currentPreset+1), tempString, 10);
 8013aa6:	ac02      	add	r4, sp, #8
	GFXfillRect(&theGFX, 0, 0, 128, 32, 0);
 8013aa8:	f7fe fc7e 	bl	80123a8 <GFXfillRect>
	itoa((currentPreset+1), tempString, 10);
 8013aac:	7838      	ldrb	r0, [r7, #0]
 8013aae:	4621      	mov	r1, r4
 8013ab0:	220a      	movs	r2, #10
 8013ab2:	3001      	adds	r0, #1
 8013ab4:	f013 f9f4 	bl	8026ea0 <itoa>
	strcat(tempString, ":");
 8013ab8:	4620      	mov	r0, r4
 8013aba:	f7ec fc0d 	bl	80002d8 <strlen>
 8013abe:	4a2b      	ldr	r2, [pc, #172]	; (8013b6c <OLED_writePreset+0xe4>)
 8013ac0:	4603      	mov	r3, r0
	strcat(tempString, modeNames[currentPreset]);
 8013ac2:	783d      	ldrb	r5, [r7, #0]
	strcat(tempString, ":");
 8013ac4:	8812      	ldrh	r2, [r2, #0]
 8013ac6:	3001      	adds	r0, #1
	strcat(tempString, modeNames[currentPreset]);
 8013ac8:	4929      	ldr	r1, [pc, #164]	; (8013b70 <OLED_writePreset+0xe8>)
	strcat(tempString, ":");
 8013aca:	52e2      	strh	r2, [r4, r3]
	strcat(tempString, modeNames[currentPreset]);
 8013acc:	4420      	add	r0, r4
 8013ace:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8013ad2:	f013 f9fa 	bl	8026eca <stpcpy>
	int myLength = strlen(tempString);
 8013ad6:	1b05      	subs	r5, r0, r4

void OLEDwriteString(const char* myCharArray, uint8_t arrayLength, uint8_t startCursor, OLEDLine line)
{
	uint8_t cursorX = startCursor;
	uint8_t cursorY = 12 + (16 * (line%2));
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013ad8:	4631      	mov	r1, r6
 8013ada:	220c      	movs	r2, #12

	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013adc:	b2ed      	uxtb	r5, r5
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013ade:	4821      	ldr	r0, [pc, #132]	; (8013b64 <OLED_writePreset+0xdc>)
 8013ae0:	f7ff f898 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013ae4:	2010      	movs	r0, #16
 8013ae6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8013aea:	9601      	str	r6, [sp, #4]
 8013aec:	9000      	str	r0, [sp, #0]
 8013aee:	4632      	mov	r2, r6
 8013af0:	4631      	mov	r1, r6
 8013af2:	009b      	lsls	r3, r3, #2
 8013af4:	481b      	ldr	r0, [pc, #108]	; (8013b64 <OLED_writePreset+0xdc>)
 8013af6:	f7fe fc57 	bl	80123a8 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 8013afa:	b145      	cbz	r5, 8013b0e <OLED_writePreset+0x86>
	{
		GFXwrite(&theGFX, myCharArray[i]);
 8013afc:	4e19      	ldr	r6, [pc, #100]	; (8013b64 <OLED_writePreset+0xdc>)
 8013afe:	4425      	add	r5, r4
 8013b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b04:	4630      	mov	r0, r6
 8013b06:	f7fe ffd3 	bl	8012ab0 <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8013b0a:	42a5      	cmp	r5, r4
 8013b0c:	d1f8      	bne.n	8013b00 <OLED_writePreset+0x78>
	GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 8013b0e:	4919      	ldr	r1, [pc, #100]	; (8013b74 <OLED_writePreset+0xec>)
 8013b10:	4814      	ldr	r0, [pc, #80]	; (8013b64 <OLED_writePreset+0xdc>)
 8013b12:	f7ff f891 	bl	8012c38 <GFXsetFont>
	OLEDwriteString(modeNamesDetails[currentPreset], strlen(modeNamesDetails[currentPreset]), 0, SecondLine);
 8013b16:	783a      	ldrb	r2, [r7, #0]
 8013b18:	4b17      	ldr	r3, [pc, #92]	; (8013b78 <OLED_writePreset+0xf0>)
 8013b1a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8013b1e:	4620      	mov	r0, r4
 8013b20:	f7ec fbda 	bl	80002d8 <strlen>
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013b24:	221c      	movs	r2, #28
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013b26:	b2c5      	uxtb	r5, r0
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013b28:	2100      	movs	r1, #0
 8013b2a:	480e      	ldr	r0, [pc, #56]	; (8013b64 <OLED_writePreset+0xdc>)
 8013b2c:	f7ff f872 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013b30:	2220      	movs	r2, #32
 8013b32:	2100      	movs	r1, #0
 8013b34:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8013b38:	9200      	str	r2, [sp, #0]
 8013b3a:	2210      	movs	r2, #16
 8013b3c:	9101      	str	r1, [sp, #4]
 8013b3e:	009b      	lsls	r3, r3, #2
 8013b40:	4808      	ldr	r0, [pc, #32]	; (8013b64 <OLED_writePreset+0xdc>)
 8013b42:	f7fe fc31 	bl	80123a8 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 8013b46:	b14d      	cbz	r5, 8013b5c <OLED_writePreset+0xd4>
 8013b48:	3c01      	subs	r4, #1
		GFXwrite(&theGFX, myCharArray[i]);
 8013b4a:	4e06      	ldr	r6, [pc, #24]	; (8013b64 <OLED_writePreset+0xdc>)
 8013b4c:	4425      	add	r5, r4
 8013b4e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013b52:	4630      	mov	r0, r6
 8013b54:	f7fe ffac 	bl	8012ab0 <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8013b58:	42ac      	cmp	r4, r5
 8013b5a:	d1f8      	bne.n	8013b4e <OLED_writePreset+0xc6>
}
 8013b5c:	b009      	add	sp, #36	; 0x24
 8013b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b60:	08029a90 	.word	0x08029a90
 8013b64:	20001cb0 	.word	0x20001cb0
 8013b68:	20000694 	.word	0x20000694
 8013b6c:	08145184 	.word	0x08145184
 8013b70:	20018750 	.word	0x20018750
 8013b74:	08029a9c 	.word	0x08029a9c
 8013b78:	20018930 	.word	0x20018930

08013b7c <OLED_init>:
{
 8013b7c:	b530      	push	{r4, r5, lr}
	  ssd1306_begin(hi2c, SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
 8013b7e:	2278      	movs	r2, #120	; 0x78
{
 8013b80:	b083      	sub	sp, #12
	  ssd1306_begin(hi2c, SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
 8013b82:	2102      	movs	r1, #2
	buttonActionFunctions[Pitchshift] = UIPitchShiftButtons;
 8013b84:	4d28      	ldr	r5, [pc, #160]	; (8013c28 <OLED_init+0xac>)
	  ssd1306_begin(hi2c, SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
 8013b86:	f007 fed9 	bl	801b93c <ssd1306_begin>
 8013b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013b8e:	2100      	movs	r1, #0
 8013b90:	4826      	ldr	r0, [pc, #152]	; (8013c2c <OLED_init+0xb0>)
 8013b92:	f013 f992 	bl	8026eba <memset>
	buttonActionFunctions[Vocoder] = UIVocoderButtons;
 8013b96:	4b26      	ldr	r3, [pc, #152]	; (8013c30 <OLED_init+0xb4>)
 8013b98:	4926      	ldr	r1, [pc, #152]	; (8013c34 <OLED_init+0xb8>)
	buttonActionFunctions[VocoderCh] = UIVocoderChButtons;
 8013b9a:	4a27      	ldr	r2, [pc, #156]	; (8013c38 <OLED_init+0xbc>)
	buttonActionFunctions[Vocoder] = UIVocoderButtons;
 8013b9c:	6019      	str	r1, [r3, #0]
	buttonActionFunctions[VocoderCh] = UIVocoderChButtons;
 8013b9e:	605a      	str	r2, [r3, #4]
	buttonActionFunctions[AutotuneMono] = UINeartuneButtons;
 8013ba0:	4826      	ldr	r0, [pc, #152]	; (8013c3c <OLED_init+0xc0>)
	buttonActionFunctions[AutotunePoly] = UIAutotuneButtons;
 8013ba2:	4927      	ldr	r1, [pc, #156]	; (8013c40 <OLED_init+0xc4>)
	buttonActionFunctions[SamplerButtonPress] = UISamplerBPButtons;
 8013ba4:	4a27      	ldr	r2, [pc, #156]	; (8013c44 <OLED_init+0xc8>)
	buttonActionFunctions[Pitchshift] = UIPitchShiftButtons;
 8013ba6:	609d      	str	r5, [r3, #8]
	buttonActionFunctions[AutotuneMono] = UINeartuneButtons;
 8013ba8:	60d8      	str	r0, [r3, #12]
	buttonActionFunctions[AutotunePoly] = UIAutotuneButtons;
 8013baa:	6119      	str	r1, [r3, #16]
	buttonActionFunctions[SamplerButtonPress] = UISamplerBPButtons;
 8013bac:	615a      	str	r2, [r3, #20]
	buttonActionFunctions[SamplerKeyboard] = UISamplerKButtons;
 8013bae:	4d26      	ldr	r5, [pc, #152]	; (8013c48 <OLED_init+0xcc>)
	buttonActionFunctions[SamplerAutoGrab] = UISamplerAutoButtons;
 8013bb0:	4826      	ldr	r0, [pc, #152]	; (8013c4c <OLED_init+0xd0>)
	buttonActionFunctions[Distortion] = UIDistortionButtons;
 8013bb2:	4927      	ldr	r1, [pc, #156]	; (8013c50 <OLED_init+0xd4>)
	buttonActionFunctions[Wavefolder] = UIWaveFolderButtons;
 8013bb4:	4a27      	ldr	r2, [pc, #156]	; (8013c54 <OLED_init+0xd8>)
	buttonActionFunctions[SamplerKeyboard] = UISamplerKButtons;
 8013bb6:	619d      	str	r5, [r3, #24]
	buttonActionFunctions[SamplerAutoGrab] = UISamplerAutoButtons;
 8013bb8:	61d8      	str	r0, [r3, #28]
	buttonActionFunctions[Distortion] = UIDistortionButtons;
 8013bba:	6219      	str	r1, [r3, #32]
	buttonActionFunctions[Wavefolder] = UIWaveFolderButtons;
 8013bbc:	625a      	str	r2, [r3, #36]	; 0x24
	buttonActionFunctions[BitCrusher] = UIBitcrusherButtons;
 8013bbe:	4d26      	ldr	r5, [pc, #152]	; (8013c58 <OLED_init+0xdc>)
	buttonActionFunctions[Delay] = UIDelayButtons;
 8013bc0:	4826      	ldr	r0, [pc, #152]	; (8013c5c <OLED_init+0xe0>)
	buttonActionFunctions[Reverb] = UIReverbButtons;
 8013bc2:	4927      	ldr	r1, [pc, #156]	; (8013c60 <OLED_init+0xe4>)
	buttonActionFunctions[Reverb2] = UIReverb2Buttons;
 8013bc4:	4a27      	ldr	r2, [pc, #156]	; (8013c64 <OLED_init+0xe8>)
	buttonActionFunctions[BitCrusher] = UIBitcrusherButtons;
 8013bc6:	629d      	str	r5, [r3, #40]	; 0x28
	buttonActionFunctions[Delay] = UIDelayButtons;
 8013bc8:	62d8      	str	r0, [r3, #44]	; 0x2c
	buttonActionFunctions[Reverb] = UIReverbButtons;
 8013bca:	6319      	str	r1, [r3, #48]	; 0x30
	buttonActionFunctions[Reverb2] = UIReverb2Buttons;
 8013bcc:	635a      	str	r2, [r3, #52]	; 0x34
	  GFXinit(&theGFX, 128, 32);
 8013bce:	4c26      	ldr	r4, [pc, #152]	; (8013c68 <OLED_init+0xec>)
	buttonActionFunctions[LivingStringSynth] = UILivingStringSynthButtons;
 8013bd0:	4826      	ldr	r0, [pc, #152]	; (8013c6c <OLED_init+0xf0>)
	buttonActionFunctions[ClassicSynth] = UIClassicSynthButtons;
 8013bd2:	4927      	ldr	r1, [pc, #156]	; (8013c70 <OLED_init+0xf4>)
	buttonActionFunctions[Rhodes] = UIRhodesButtons;
 8013bd4:	4a27      	ldr	r2, [pc, #156]	; (8013c74 <OLED_init+0xf8>)
	buttonActionFunctions[LivingString] = UILivingStringButtons;
 8013bd6:	4d28      	ldr	r5, [pc, #160]	; (8013c78 <OLED_init+0xfc>)
	buttonActionFunctions[Rhodes] = UIRhodesButtons;
 8013bd8:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40
	buttonActionFunctions[LivingStringSynth] = UILivingStringSynthButtons;
 8013bdc:	e9c3 500e 	strd	r5, r0, [r3, #56]	; 0x38
	  initModeNames();
 8013be0:	f008 fb62 	bl	801c2a8 <initModeNames>
	  GFXinit(&theGFX, 128, 32);
 8013be4:	4620      	mov	r0, r4
 8013be6:	2220      	movs	r2, #32
 8013be8:	2180      	movs	r1, #128	; 0x80
 8013bea:	f7fe fac1 	bl	8012170 <GFXinit>
	  GFXsetFont(&theGFX, &EuphemiaCAS8pt7b); //this one is elegant but definitely not monospaced can fit 9 Ms
 8013bee:	4620      	mov	r0, r4
 8013bf0:	4922      	ldr	r1, [pc, #136]	; (8013c7c <OLED_init+0x100>)
 8013bf2:	f7ff f821 	bl	8012c38 <GFXsetFont>
	  GFXsetTextColor(&theGFX, 1, 0);
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	2101      	movs	r1, #1
 8013bfc:	f7ff f818 	bl	8012c30 <GFXsetTextColor>
	  GFXsetTextSize(&theGFX, 1);
 8013c00:	4620      	mov	r0, r4
 8013c02:	2101      	movs	r1, #1
 8013c04:	f7ff f80e 	bl	8012c24 <GFXsetTextSize>
	GFXfillRect(&theGFX, 0, 0, 128, 32, 0);
 8013c08:	2200      	movs	r2, #0
 8013c0a:	2320      	movs	r3, #32
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	4611      	mov	r1, r2
 8013c10:	9201      	str	r2, [sp, #4]
 8013c12:	9300      	str	r3, [sp, #0]
 8013c14:	2380      	movs	r3, #128	; 0x80
 8013c16:	f7fe fbc7 	bl	80123a8 <GFXfillRect>
	  OLED_writePreset();
 8013c1a:	f7ff ff35 	bl	8013a88 <OLED_writePreset>
}
 8013c1e:	b003      	add	sp, #12
 8013c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	ssd1306_display_full_buffer();
 8013c24:	f007 bfe8 	b.w	801bbf8 <ssd1306_display_full_buffer>
 8013c28:	0801d545 	.word	0x0801d545
 8013c2c:	20018474 	.word	0x20018474
 8013c30:	200190b8 	.word	0x200190b8
 8013c34:	0801d43d 	.word	0x0801d43d
 8013c38:	0801d4c1 	.word	0x0801d4c1
 8013c3c:	0801d54d 	.word	0x0801d54d
 8013c40:	0801d5a9 	.word	0x0801d5a9
 8013c44:	0801d5b1 	.word	0x0801d5b1
 8013c48:	0801d6a1 	.word	0x0801d6a1
 8013c4c:	0801d735 	.word	0x0801d735
 8013c50:	0801d7b9 	.word	0x0801d7b9
 8013c54:	0801d7f1 	.word	0x0801d7f1
 8013c58:	0801d829 	.word	0x0801d829
 8013c5c:	0801d861 	.word	0x0801d861
 8013c60:	0801d8bd 	.word	0x0801d8bd
 8013c64:	0801d919 	.word	0x0801d919
 8013c68:	20001cb0 	.word	0x20001cb0
 8013c6c:	0801d9d5 	.word	0x0801d9d5
 8013c70:	0801da59 	.word	0x0801da59
 8013c74:	0801daa5 	.word	0x0801daa5
 8013c78:	0801d951 	.word	0x0801d951
 8013c7c:	08029a90 	.word	0x08029a90

08013c80 <OLED_writeEditScreen>:
{
 8013c80:	b570      	push	{r4, r5, r6, lr}
	GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 8013c82:	4921      	ldr	r1, [pc, #132]	; (8013d08 <OLED_writeEditScreen+0x88>)
{
 8013c84:	b082      	sub	sp, #8
	GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 8013c86:	4821      	ldr	r0, [pc, #132]	; (8013d0c <OLED_writeEditScreen+0x8c>)
	GFXfillRect(&theGFX, 0, 0, 128, 32, 0);
 8013c88:	2500      	movs	r5, #0
	GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 8013c8a:	f7fe ffd5 	bl	8012c38 <GFXsetFont>
	GFXfillRect(&theGFX, 0, 0, 128, 32, 0);
 8013c8e:	2320      	movs	r3, #32
 8013c90:	462a      	mov	r2, r5
 8013c92:	4629      	mov	r1, r5
 8013c94:	9501      	str	r5, [sp, #4]
 8013c96:	9300      	str	r3, [sp, #0]
 8013c98:	2380      	movs	r3, #128	; 0x80
 8013c9a:	481c      	ldr	r0, [pc, #112]	; (8013d0c <OLED_writeEditScreen+0x8c>)
 8013c9c:	f7fe fb84 	bl	80123a8 <GFXfillRect>
 8013ca0:	4c1b      	ldr	r4, [pc, #108]	; (8013d10 <OLED_writeEditScreen+0x90>)
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013ca2:	4629      	mov	r1, r5
 8013ca4:	220c      	movs	r2, #12
 8013ca6:	4819      	ldr	r0, [pc, #100]	; (8013d0c <OLED_writeEditScreen+0x8c>)
 8013ca8:	f104 060f 	add.w	r6, r4, #15
 8013cac:	f7fe ffb2 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013cb0:	2310      	movs	r3, #16
 8013cb2:	9501      	str	r5, [sp, #4]
 8013cb4:	462a      	mov	r2, r5
 8013cb6:	4629      	mov	r1, r5
		GFXwrite(&theGFX, myCharArray[i]);
 8013cb8:	4d14      	ldr	r5, [pc, #80]	; (8013d0c <OLED_writeEditScreen+0x8c>)
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013cba:	9300      	str	r3, [sp, #0]
 8013cbc:	23b4      	movs	r3, #180	; 0xb4
 8013cbe:	4813      	ldr	r0, [pc, #76]	; (8013d0c <OLED_writeEditScreen+0x8c>)
 8013cc0:	f7fe fb72 	bl	80123a8 <GFXfillRect>
		GFXwrite(&theGFX, myCharArray[i]);
 8013cc4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013cc8:	4628      	mov	r0, r5
 8013cca:	f7fe fef1 	bl	8012ab0 <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8013cce:	42a6      	cmp	r6, r4
 8013cd0:	d1f8      	bne.n	8013cc4 <OLED_writeEditScreen+0x44>
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013cd2:	221c      	movs	r2, #28
 8013cd4:	2100      	movs	r1, #0
 8013cd6:	480d      	ldr	r0, [pc, #52]	; (8013d0c <OLED_writeEditScreen+0x8c>)
 8013cd8:	4c0e      	ldr	r4, [pc, #56]	; (8013d14 <OLED_writeEditScreen+0x94>)
 8013cda:	f7fe ff9b 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013cde:	2100      	movs	r1, #0
 8013ce0:	2220      	movs	r2, #32
 8013ce2:	f104 0610 	add.w	r6, r4, #16
		GFXwrite(&theGFX, myCharArray[i]);
 8013ce6:	4d09      	ldr	r5, [pc, #36]	; (8013d0c <OLED_writeEditScreen+0x8c>)
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013ce8:	23c0      	movs	r3, #192	; 0xc0
 8013cea:	4808      	ldr	r0, [pc, #32]	; (8013d0c <OLED_writeEditScreen+0x8c>)
 8013cec:	e9cd 2100 	strd	r2, r1, [sp]
 8013cf0:	2210      	movs	r2, #16
 8013cf2:	f7fe fb59 	bl	80123a8 <GFXfillRect>
		GFXwrite(&theGFX, myCharArray[i]);
 8013cf6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013cfa:	4628      	mov	r0, r5
 8013cfc:	f7fe fed8 	bl	8012ab0 <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8013d00:	42b4      	cmp	r4, r6
 8013d02:	d1f8      	bne.n	8013cf6 <OLED_writeEditScreen+0x76>
}
 8013d04:	b002      	add	sp, #8
 8013d06:	bd70      	pop	{r4, r5, r6, pc}
 8013d08:	08029a9c 	.word	0x08029a9c
 8013d0c:	20001cb0 	.word	0x20001cb0
 8013d10:	08145187 	.word	0x08145187
 8013d14:	08145197 	.word	0x08145197

08013d18 <OLED_writeTuning>:
{
 8013d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8013d1c:	2600      	movs	r6, #0
{
 8013d1e:	b083      	sub	sp, #12
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8013d20:	2710      	movs	r7, #16
	GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 8013d22:	4936      	ldr	r1, [pc, #216]	; (8013dfc <OLED_writeTuning+0xe4>)
 8013d24:	4836      	ldr	r0, [pc, #216]	; (8013e00 <OLED_writeTuning+0xe8>)
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013d26:	f04f 0920 	mov.w	r9, #32
	GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 8013d2a:	f7fe ff85 	bl	8012c38 <GFXsetFont>
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8013d2e:	2380      	movs	r3, #128	; 0x80
 8013d30:	4631      	mov	r1, r6
 8013d32:	463a      	mov	r2, r7
 8013d34:	4832      	ldr	r0, [pc, #200]	; (8013e00 <OLED_writeTuning+0xe8>)
 8013d36:	9601      	str	r6, [sp, #4]
 8013d38:	9700      	str	r7, [sp, #0]
 8013d3a:	f7fe fb35 	bl	80123a8 <GFXfillRect>
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013d3e:	4631      	mov	r1, r6
 8013d40:	221c      	movs	r2, #28
 8013d42:	482f      	ldr	r0, [pc, #188]	; (8013e00 <OLED_writeTuning+0xe8>)
 8013d44:	f7fe ff66 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013d48:	2318      	movs	r3, #24
 8013d4a:	463a      	mov	r2, r7
 8013d4c:	4631      	mov	r1, r6
 8013d4e:	482c      	ldr	r0, [pc, #176]	; (8013e00 <OLED_writeTuning+0xe8>)
 8013d50:	9601      	str	r6, [sp, #4]
 8013d52:	f8cd 9000 	str.w	r9, [sp]
 8013d56:	f7fe fb27 	bl	80123a8 <GFXfillRect>
	OLEDwriteInt(currentTuning, 2, 12, SecondLine);
 8013d5a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013e0c <OLED_writeTuning+0xf4>
		GFXwrite(&theGFX, myCharArray[i]);
 8013d5e:	2154      	movs	r1, #84	; 0x54
 8013d60:	4827      	ldr	r0, [pc, #156]	; (8013e00 <OLED_writeTuning+0xe8>)
	}
}

void OLEDwriteInt(uint32_t myNumber, uint8_t numDigits, uint8_t startCursor, OLEDLine line)
{
	int len = OLEDparseInt(oled_buffer, myNumber, numDigits);
 8013d62:	4c28      	ldr	r4, [pc, #160]	; (8013e04 <OLED_writeTuning+0xec>)
		GFXwrite(&theGFX, myCharArray[i]);
 8013d64:	f7fe fea4 	bl	8012ab0 <GFXwrite>
 8013d68:	4631      	mov	r1, r6
 8013d6a:	4825      	ldr	r0, [pc, #148]	; (8013e00 <OLED_writeTuning+0xe8>)
 8013d6c:	f7fe fea0 	bl	8012ab0 <GFXwrite>
	int len = OLEDparseInt(oled_buffer, myNumber, numDigits);
 8013d70:	f8d8 1000 	ldr.w	r1, [r8]
 8013d74:	2202      	movs	r2, #2
 8013d76:	4620      	mov	r0, r4
 8013d78:	f7fe ff70 	bl	8012c5c <OLEDparseInt>
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013d7c:	221c      	movs	r2, #28
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013d7e:	b2c5      	uxtb	r5, r0
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013d80:	210c      	movs	r1, #12
 8013d82:	481f      	ldr	r0, [pc, #124]	; (8013e00 <OLED_writeTuning+0xe8>)
 8013d84:	f7fe ff46 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013d88:	f8cd 9000 	str.w	r9, [sp]
 8013d8c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8013d90:	9601      	str	r6, [sp, #4]
 8013d92:	463a      	mov	r2, r7
 8013d94:	210c      	movs	r1, #12
 8013d96:	009b      	lsls	r3, r3, #2
 8013d98:	4819      	ldr	r0, [pc, #100]	; (8013e00 <OLED_writeTuning+0xe8>)
 8013d9a:	f7fe fb05 	bl	80123a8 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 8013d9e:	b145      	cbz	r5, 8013db2 <OLED_writeTuning+0x9a>
		GFXwrite(&theGFX, myCharArray[i]);
 8013da0:	4e17      	ldr	r6, [pc, #92]	; (8013e00 <OLED_writeTuning+0xe8>)
 8013da2:	4425      	add	r5, r4
 8013da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013da8:	4630      	mov	r0, r6
 8013daa:	f7fe fe81 	bl	8012ab0 <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8013dae:	42ac      	cmp	r4, r5
 8013db0:	d1f8      	bne.n	8013da4 <OLED_writeTuning+0x8c>
	OLEDwriteString(tuningNames[currentTuning], 12, 36, SecondLine);
 8013db2:	f8d8 3000 	ldr.w	r3, [r8]
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013db6:	221c      	movs	r2, #28
 8013db8:	4811      	ldr	r0, [pc, #68]	; (8013e00 <OLED_writeTuning+0xe8>)
 8013dba:	2124      	movs	r1, #36	; 0x24
	OLEDwriteString(tuningNames[currentTuning], 12, 36, SecondLine);
 8013dbc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8013dc0:	4c11      	ldr	r4, [pc, #68]	; (8013e08 <OLED_writeTuning+0xf0>)
		GFXwrite(&theGFX, myCharArray[i]);
 8013dc2:	4606      	mov	r6, r0
	OLEDwriteString(tuningNames[currentTuning], 12, 36, SecondLine);
 8013dc4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013dc8:	f7fe ff24 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013dcc:	2300      	movs	r3, #0
 8013dce:	2220      	movs	r2, #32
	OLEDwriteString(tuningNames[currentTuning], 12, 36, SecondLine);
 8013dd0:	4425      	add	r5, r4
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013dd2:	9301      	str	r3, [sp, #4]
 8013dd4:	2124      	movs	r1, #36	; 0x24
 8013dd6:	9200      	str	r2, [sp, #0]
 8013dd8:	2390      	movs	r3, #144	; 0x90
 8013dda:	2210      	movs	r2, #16
 8013ddc:	4630      	mov	r0, r6
 8013dde:	1e6c      	subs	r4, r5, #1
 8013de0:	350b      	adds	r5, #11
 8013de2:	f7fe fae1 	bl	80123a8 <GFXfillRect>
		GFXwrite(&theGFX, myCharArray[i]);
 8013de6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013dea:	4630      	mov	r0, r6
 8013dec:	f7fe fe60 	bl	8012ab0 <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8013df0:	42a5      	cmp	r5, r4
 8013df2:	d1f8      	bne.n	8013de6 <OLED_writeTuning+0xce>
}
 8013df4:	b003      	add	sp, #12
 8013df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013dfa:	bf00      	nop
 8013dfc:	08029a9c 	.word	0x08029a9c
 8013e00:	20001cb0 	.word	0x20001cb0
 8013e04:	20001c90 	.word	0x20001c90
 8013e08:	0802ba04 	.word	0x0802ba04
 8013e0c:	20000660 	.word	0x20000660

08013e10 <OLED_draw>:
	ssd1306_display_full_buffer();
 8013e10:	f007 bef2 	b.w	801bbf8 <ssd1306_display_full_buffer>

08013e14 <OLEDclearLine>:
{
 8013e14:	4602      	mov	r2, r0
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8013e16:	2100      	movs	r1, #0
 8013e18:	2380      	movs	r3, #128	; 0x80
 8013e1a:	4807      	ldr	r0, [pc, #28]	; (8013e38 <OLEDclearLine+0x24>)
{
 8013e1c:	b510      	push	{r4, lr}
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8013e1e:	0854      	lsrs	r4, r2, #1
 8013e20:	f002 0201 	and.w	r2, r2, #1
{
 8013e24:	b082      	sub	sp, #8
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8013e26:	3401      	adds	r4, #1
 8013e28:	0112      	lsls	r2, r2, #4
 8013e2a:	9101      	str	r1, [sp, #4]
 8013e2c:	0124      	lsls	r4, r4, #4
 8013e2e:	9400      	str	r4, [sp, #0]
 8013e30:	f7fe faba 	bl	80123a8 <GFXfillRect>
}
 8013e34:	b002      	add	sp, #8
 8013e36:	bd10      	pop	{r4, pc}
 8013e38:	20001cb0 	.word	0x20001cb0

08013e3c <OLEDwriteString>:
{
 8013e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013e3e:	4617      	mov	r7, r2
	uint8_t cursorY = 12 + (16 * (line%2));
 8013e40:	f003 0201 	and.w	r2, r3, #1
{
 8013e44:	461e      	mov	r6, r3
 8013e46:	b083      	sub	sp, #12
	uint8_t cursorY = 12 + (16 * (line%2));
 8013e48:	0112      	lsls	r2, r2, #4
{
 8013e4a:	460d      	mov	r5, r1
 8013e4c:	4604      	mov	r4, r0
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013e4e:	4639      	mov	r1, r7
 8013e50:	480e      	ldr	r0, [pc, #56]	; (8013e8c <OLEDwriteString+0x50>)
 8013e52:	320c      	adds	r2, #12
 8013e54:	f7fe fede 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013e58:	1c70      	adds	r0, r6, #1
 8013e5a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8013e5e:	f04f 0c00 	mov.w	ip, #0
 8013e62:	0100      	lsls	r0, r0, #4
 8013e64:	4639      	mov	r1, r7
 8013e66:	0132      	lsls	r2, r6, #4
 8013e68:	009b      	lsls	r3, r3, #2
 8013e6a:	e9cd 0c00 	strd	r0, ip, [sp]
 8013e6e:	4807      	ldr	r0, [pc, #28]	; (8013e8c <OLEDwriteString+0x50>)
 8013e70:	f7fe fa9a 	bl	80123a8 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 8013e74:	b145      	cbz	r5, 8013e88 <OLEDwriteString+0x4c>
		GFXwrite(&theGFX, myCharArray[i]);
 8013e76:	4e05      	ldr	r6, [pc, #20]	; (8013e8c <OLEDwriteString+0x50>)
 8013e78:	4425      	add	r5, r4
 8013e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e7e:	4630      	mov	r0, r6
 8013e80:	f7fe fe16 	bl	8012ab0 <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8013e84:	42a5      	cmp	r5, r4
 8013e86:	d1f8      	bne.n	8013e7a <OLEDwriteString+0x3e>
}
 8013e88:	b003      	add	sp, #12
 8013e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e8c:	20001cb0 	.word	0x20001cb0

08013e90 <OLEDwriteInt>:
{
 8013e90:	b5f0      	push	{r4, r5, r6, r7, lr}
	int len = OLEDparseInt(oled_buffer, myNumber, numDigits);
 8013e92:	4c16      	ldr	r4, [pc, #88]	; (8013eec <OLEDwriteInt+0x5c>)
{
 8013e94:	461f      	mov	r7, r3
 8013e96:	b083      	sub	sp, #12
 8013e98:	4616      	mov	r6, r2
	int len = OLEDparseInt(oled_buffer, myNumber, numDigits);
 8013e9a:	460a      	mov	r2, r1
 8013e9c:	4601      	mov	r1, r0
 8013e9e:	4620      	mov	r0, r4
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013ea0:	b236      	sxth	r6, r6
	int len = OLEDparseInt(oled_buffer, myNumber, numDigits);
 8013ea2:	f7fe fedb 	bl	8012c5c <OLEDparseInt>
	uint8_t cursorY = 12 + (16 * (line%2));
 8013ea6:	f007 0201 	and.w	r2, r7, #1
	int len = OLEDparseInt(oled_buffer, myNumber, numDigits);
 8013eaa:	4605      	mov	r5, r0
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013eac:	4631      	mov	r1, r6
	uint8_t cursorY = 12 + (16 * (line%2));
 8013eae:	0112      	lsls	r2, r2, #4
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013eb0:	480f      	ldr	r0, [pc, #60]	; (8013ef0 <OLEDwriteInt+0x60>)
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013eb2:	b2ed      	uxtb	r5, r5
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013eb4:	320c      	adds	r2, #12
 8013eb6:	f7fe fead 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013eba:	1c7a      	adds	r2, r7, #1
 8013ebc:	2000      	movs	r0, #0
 8013ebe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8013ec2:	0112      	lsls	r2, r2, #4
 8013ec4:	4631      	mov	r1, r6
 8013ec6:	009b      	lsls	r3, r3, #2
 8013ec8:	e9cd 2000 	strd	r2, r0, [sp]
 8013ecc:	013a      	lsls	r2, r7, #4
 8013ece:	4808      	ldr	r0, [pc, #32]	; (8013ef0 <OLEDwriteInt+0x60>)
 8013ed0:	f7fe fa6a 	bl	80123a8 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 8013ed4:	b145      	cbz	r5, 8013ee8 <OLEDwriteInt+0x58>
		GFXwrite(&theGFX, myCharArray[i]);
 8013ed6:	4e06      	ldr	r6, [pc, #24]	; (8013ef0 <OLEDwriteInt+0x60>)
 8013ed8:	4425      	add	r5, r4
 8013eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ede:	4630      	mov	r0, r6
 8013ee0:	f7fe fde6 	bl	8012ab0 <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8013ee4:	42a5      	cmp	r5, r4
 8013ee6:	d1f8      	bne.n	8013eda <OLEDwriteInt+0x4a>

	OLEDwriteString(oled_buffer, len, startCursor, line);
}
 8013ee8:	b003      	add	sp, #12
 8013eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eec:	20001c90 	.word	0x20001c90
 8013ef0:	20001cb0 	.word	0x20001cb0

08013ef4 <OLEDwritePitch>:

	OLEDwriteLine(oled_buffer, len, line);
}

void OLEDwritePitch(float midi, uint8_t startCursor, OLEDLine line, uint8_t showCents)
{
 8013ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int len = OLEDparsePitch(oled_buffer, midi, showCents);
 8013ef6:	4c16      	ldr	r4, [pc, #88]	; (8013f50 <OLEDwritePitch+0x5c>)
{
 8013ef8:	460f      	mov	r7, r1
 8013efa:	b083      	sub	sp, #12
	int len = OLEDparsePitch(oled_buffer, midi, showCents);
 8013efc:	4611      	mov	r1, r2
{
 8013efe:	4606      	mov	r6, r0
	int len = OLEDparsePitch(oled_buffer, midi, showCents);
 8013f00:	4620      	mov	r0, r4
 8013f02:	f7fe fecb 	bl	8012c9c <OLEDparsePitch>
	uint8_t cursorY = 12 + (16 * (line%2));
 8013f06:	f007 0201 	and.w	r2, r7, #1
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013f0a:	b236      	sxth	r6, r6
	int len = OLEDparsePitch(oled_buffer, midi, showCents);
 8013f0c:	4605      	mov	r5, r0
	uint8_t cursorY = 12 + (16 * (line%2));
 8013f0e:	0112      	lsls	r2, r2, #4
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013f10:	4810      	ldr	r0, [pc, #64]	; (8013f54 <OLEDwritePitch+0x60>)
 8013f12:	4631      	mov	r1, r6
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013f14:	b2ed      	uxtb	r5, r5
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013f16:	320c      	adds	r2, #12
 8013f18:	f7fe fe7c 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013f1c:	1c7a      	adds	r2, r7, #1
 8013f1e:	2000      	movs	r0, #0
 8013f20:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8013f24:	0112      	lsls	r2, r2, #4
 8013f26:	4631      	mov	r1, r6
 8013f28:	009b      	lsls	r3, r3, #2
 8013f2a:	e9cd 2000 	strd	r2, r0, [sp]
 8013f2e:	013a      	lsls	r2, r7, #4
 8013f30:	4808      	ldr	r0, [pc, #32]	; (8013f54 <OLEDwritePitch+0x60>)
 8013f32:	f7fe fa39 	bl	80123a8 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 8013f36:	b145      	cbz	r5, 8013f4a <OLEDwritePitch+0x56>
		GFXwrite(&theGFX, myCharArray[i]);
 8013f38:	4e06      	ldr	r6, [pc, #24]	; (8013f54 <OLEDwritePitch+0x60>)
 8013f3a:	4425      	add	r5, r4
 8013f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f40:	4630      	mov	r0, r6
 8013f42:	f7fe fdb5 	bl	8012ab0 <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8013f46:	42a5      	cmp	r5, r4
 8013f48:	d1f8      	bne.n	8013f3c <OLEDwritePitch+0x48>

	OLEDwriteString(oled_buffer, len, startCursor, line);
}
 8013f4a:	b003      	add	sp, #12
 8013f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f4e:	bf00      	nop
 8013f50:	20001c90 	.word	0x20001c90
 8013f54:	20001cb0 	.word	0x20001cb0

08013f58 <OLEDwritePitchClass>:

void OLEDwritePitchClass(float midi, uint8_t startCursor, OLEDLine line)
{
 8013f58:	b5f0      	push	{r4, r5, r6, r7, lr}
	int len = OLEDparsePitchClass(oled_buffer, midi);
 8013f5a:	4c15      	ldr	r4, [pc, #84]	; (8013fb0 <OLEDwritePitchClass+0x58>)
{
 8013f5c:	460f      	mov	r7, r1
 8013f5e:	b083      	sub	sp, #12
 8013f60:	4606      	mov	r6, r0
	int len = OLEDparsePitchClass(oled_buffer, midi);
 8013f62:	4620      	mov	r0, r4
 8013f64:	f7fe fefc 	bl	8012d60 <OLEDparsePitchClass>
	uint8_t cursorY = 12 + (16 * (line%2));
 8013f68:	f007 0201 	and.w	r2, r7, #1
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013f6c:	b236      	sxth	r6, r6
	int len = OLEDparsePitchClass(oled_buffer, midi);
 8013f6e:	4605      	mov	r5, r0
	uint8_t cursorY = 12 + (16 * (line%2));
 8013f70:	0112      	lsls	r2, r2, #4
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013f72:	4810      	ldr	r0, [pc, #64]	; (8013fb4 <OLEDwritePitchClass+0x5c>)
 8013f74:	4631      	mov	r1, r6
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013f76:	b2ed      	uxtb	r5, r5
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013f78:	320c      	adds	r2, #12
 8013f7a:	f7fe fe4b 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8013f7e:	1c7a      	adds	r2, r7, #1
 8013f80:	2000      	movs	r0, #0
 8013f82:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8013f86:	0112      	lsls	r2, r2, #4
 8013f88:	4631      	mov	r1, r6
 8013f8a:	009b      	lsls	r3, r3, #2
 8013f8c:	e9cd 2000 	strd	r2, r0, [sp]
 8013f90:	013a      	lsls	r2, r7, #4
 8013f92:	4808      	ldr	r0, [pc, #32]	; (8013fb4 <OLEDwritePitchClass+0x5c>)
 8013f94:	f7fe fa08 	bl	80123a8 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 8013f98:	b145      	cbz	r5, 8013fac <OLEDwritePitchClass+0x54>
		GFXwrite(&theGFX, myCharArray[i]);
 8013f9a:	4e06      	ldr	r6, [pc, #24]	; (8013fb4 <OLEDwritePitchClass+0x5c>)
 8013f9c:	4425      	add	r5, r4
 8013f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fa2:	4630      	mov	r0, r6
 8013fa4:	f7fe fd84 	bl	8012ab0 <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8013fa8:	42a5      	cmp	r5, r4
 8013faa:	d1f8      	bne.n	8013f9e <OLEDwritePitchClass+0x46>

	OLEDwriteString(oled_buffer, len, startCursor, line);
}
 8013fac:	b003      	add	sp, #12
 8013fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fb0:	20001c90 	.word	0x20001c90
 8013fb4:	20001cb0 	.word	0x20001cb0

08013fb8 <OLEDwriteFloat>:
	OLEDwriteLine(oled_buffer, len, line);
}


void OLEDwriteFloat(float input, uint8_t startCursor, OLEDLine line)
{
 8013fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fba:	ed2d 8b02 	vpush	{d8}
 8013fbe:	b083      	sub	sp, #12
 8013fc0:	4606      	mov	r6, r0
 8013fc2:	460f      	mov	r7, r1
 8013fc4:	eeb0 8a40 	vmov.f32	s16, s0
	int numDigits = 5;
	int numDecimal = 1;

	if (fastabsf(input)<1.0f)
 8013fc8:	f00f fdc4 	bl	8023b54 <fastabsf>
 8013fcc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013fd0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fd8:	d438      	bmi.n	801404c <OLEDwriteFloat+0x94>
	{
		numDigits = 3;
		numDecimal = 2;
	}

	else if (fastabsf(input)<10.0f)
 8013fda:	eeb0 0a48 	vmov.f32	s0, s16
 8013fde:	f00f fdb9 	bl	8023b54 <fastabsf>
 8013fe2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013fe6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fee:	d530      	bpl.n	8014052 <OLEDwriteFloat+0x9a>
 8013ff0:	2202      	movs	r2, #2
 8013ff2:	2104      	movs	r1, #4
	{
		numDigits = 8;
		numDecimal = 0;
	}

	int len = OLEDparseFixedFloat(oled_buffer, input, numDigits, numDecimal);
 8013ff4:	4c41      	ldr	r4, [pc, #260]	; (80140fc <OLEDwriteFloat+0x144>)
 8013ff6:	eeb0 0a48 	vmov.f32	s0, s16
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8013ffa:	b236      	sxth	r6, r6
	int len = OLEDparseFixedFloat(oled_buffer, input, numDigits, numDecimal);
 8013ffc:	4620      	mov	r0, r4
 8013ffe:	f7fe fedd 	bl	8012dbc <OLEDparseFixedFloat>
	uint8_t cursorY = 12 + (16 * (line%2));
 8014002:	f007 0201 	and.w	r2, r7, #1
	int len = OLEDparseFixedFloat(oled_buffer, input, numDigits, numDecimal);
 8014006:	4605      	mov	r5, r0
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014008:	4631      	mov	r1, r6
	uint8_t cursorY = 12 + (16 * (line%2));
 801400a:	0112      	lsls	r2, r2, #4
	GFXsetCursor(&theGFX, cursorX, cursorY);
 801400c:	483c      	ldr	r0, [pc, #240]	; (8014100 <OLEDwriteFloat+0x148>)
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 801400e:	b2ed      	uxtb	r5, r5
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014010:	320c      	adds	r2, #12
 8014012:	f7fe fdff 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 8014016:	1c7a      	adds	r2, r7, #1
 8014018:	2000      	movs	r0, #0
 801401a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801401e:	0112      	lsls	r2, r2, #4
 8014020:	4631      	mov	r1, r6
 8014022:	009b      	lsls	r3, r3, #2
 8014024:	e9cd 2000 	strd	r2, r0, [sp]
 8014028:	013a      	lsls	r2, r7, #4
 801402a:	4835      	ldr	r0, [pc, #212]	; (8014100 <OLEDwriteFloat+0x148>)
 801402c:	f7fe f9bc 	bl	80123a8 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 8014030:	b145      	cbz	r5, 8014044 <OLEDwriteFloat+0x8c>
		GFXwrite(&theGFX, myCharArray[i]);
 8014032:	4e33      	ldr	r6, [pc, #204]	; (8014100 <OLEDwriteFloat+0x148>)
 8014034:	4425      	add	r5, r4
 8014036:	f814 1b01 	ldrb.w	r1, [r4], #1
 801403a:	4630      	mov	r0, r6
 801403c:	f7fe fd38 	bl	8012ab0 <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 8014040:	42ac      	cmp	r4, r5
 8014042:	d1f8      	bne.n	8014036 <OLEDwriteFloat+0x7e>

	OLEDwriteString(oled_buffer, len, startCursor, line);
}
 8014044:	b003      	add	sp, #12
 8014046:	ecbd 8b02 	vpop	{d8}
 801404a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801404c:	2202      	movs	r2, #2
 801404e:	2103      	movs	r1, #3
 8014050:	e7d0      	b.n	8013ff4 <OLEDwriteFloat+0x3c>
	else if (fastabsf(input)<100.0f)
 8014052:	eeb0 0a48 	vmov.f32	s0, s16
 8014056:	f00f fd7d 	bl	8023b54 <fastabsf>
 801405a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8014104 <OLEDwriteFloat+0x14c>
 801405e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014066:	d502      	bpl.n	801406e <OLEDwriteFloat+0xb6>
 8014068:	2202      	movs	r2, #2
 801406a:	2105      	movs	r1, #5
 801406c:	e7c2      	b.n	8013ff4 <OLEDwriteFloat+0x3c>
	else if (fastabsf(input)<1000.0f)
 801406e:	eeb0 0a48 	vmov.f32	s0, s16
 8014072:	f00f fd6f 	bl	8023b54 <fastabsf>
 8014076:	eddf 7a24 	vldr	s15, [pc, #144]	; 8014108 <OLEDwriteFloat+0x150>
 801407a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801407e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014082:	d502      	bpl.n	801408a <OLEDwriteFloat+0xd2>
 8014084:	2201      	movs	r2, #1
 8014086:	2105      	movs	r1, #5
 8014088:	e7b4      	b.n	8013ff4 <OLEDwriteFloat+0x3c>
	else if (fastabsf(input)<10000.0f)
 801408a:	eeb0 0a48 	vmov.f32	s0, s16
 801408e:	f00f fd61 	bl	8023b54 <fastabsf>
 8014092:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801410c <OLEDwriteFloat+0x154>
 8014096:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801409a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801409e:	d502      	bpl.n	80140a6 <OLEDwriteFloat+0xee>
 80140a0:	2200      	movs	r2, #0
 80140a2:	2105      	movs	r1, #5
 80140a4:	e7a6      	b.n	8013ff4 <OLEDwriteFloat+0x3c>
	else if (fastabsf(input)<100000.0f)
 80140a6:	eeb0 0a48 	vmov.f32	s0, s16
 80140aa:	f00f fd53 	bl	8023b54 <fastabsf>
 80140ae:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014110 <OLEDwriteFloat+0x158>
 80140b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80140b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ba:	d502      	bpl.n	80140c2 <OLEDwriteFloat+0x10a>
 80140bc:	2200      	movs	r2, #0
 80140be:	2106      	movs	r1, #6
 80140c0:	e798      	b.n	8013ff4 <OLEDwriteFloat+0x3c>
	else if (fastabsf(input)<1000000.0f)
 80140c2:	eeb0 0a48 	vmov.f32	s0, s16
 80140c6:	f00f fd45 	bl	8023b54 <fastabsf>
 80140ca:	eddf 7a12 	vldr	s15, [pc, #72]	; 8014114 <OLEDwriteFloat+0x15c>
 80140ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80140d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140d6:	d502      	bpl.n	80140de <OLEDwriteFloat+0x126>
 80140d8:	2200      	movs	r2, #0
 80140da:	2107      	movs	r1, #7
 80140dc:	e78a      	b.n	8013ff4 <OLEDwriteFloat+0x3c>
	else if (fastabsf(input)<10000000.0f)
 80140de:	eeb0 0a48 	vmov.f32	s0, s16
 80140e2:	f00f fd37 	bl	8023b54 <fastabsf>
 80140e6:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8014118 <OLEDwriteFloat+0x160>
 80140ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80140ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140f2:	d5c7      	bpl.n	8014084 <OLEDwriteFloat+0xcc>
 80140f4:	2200      	movs	r2, #0
 80140f6:	2108      	movs	r1, #8
 80140f8:	e77c      	b.n	8013ff4 <OLEDwriteFloat+0x3c>
 80140fa:	bf00      	nop
 80140fc:	20001c90 	.word	0x20001c90
 8014100:	20001cb0 	.word	0x20001cb0
 8014104:	42c80000 	.word	0x42c80000
 8014108:	447a0000 	.word	0x447a0000
 801410c:	461c4000 	.word	0x461c4000
 8014110:	47c35000 	.word	0x47c35000
 8014114:	49742400 	.word	0x49742400
 8014118:	4b189680 	.word	0x4b189680

0801411c <OLED_writeKnobParameter.part.0>:
void OLED_writeKnobParameter(uint8_t whichKnob)
 801411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		int len = strlen(knobParamNames[currentPreset][whichParam]);
 8014120:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8014254 <OLED_writeKnobParameter.part.0+0x138>
void OLED_writeKnobParameter(uint8_t whichKnob)
 8014124:	4606      	mov	r6, r0
		int whichParam = whichKnob + (knobPage * KNOB_PAGE_SIZE);
 8014126:	4f45      	ldr	r7, [pc, #276]	; (801423c <OLED_writeKnobParameter.part.0+0x120>)
 8014128:	2405      	movs	r4, #5
		int len = strlen(knobParamNames[currentPreset][whichParam]);
 801412a:	f899 3000 	ldrb.w	r3, [r9]
		floatADCUI[whichKnob] = smoothedADC[whichKnob];
 801412e:	0080      	lsls	r0, r0, #2
 8014130:	4943      	ldr	r1, [pc, #268]	; (8014240 <OLED_writeKnobParameter.part.0+0x124>)
		int len = strlen(knobParamNames[currentPreset][whichParam]);
 8014132:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014136:	f8df b120 	ldr.w	fp, [pc, #288]	; 8014258 <OLED_writeKnobParameter.part.0+0x13c>
		floatADCUI[whichKnob] = smoothedADC[whichKnob];
 801413a:	4401      	add	r1, r0
		int len = strlen(knobParamNames[currentPreset][whichParam]);
 801413c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
void OLED_writeKnobParameter(uint8_t whichKnob)
 8014140:	ed2d 8b02 	vpush	{d8}
		int whichParam = whichKnob + (knobPage * KNOB_PAGE_SIZE);
 8014144:	783a      	ldrb	r2, [r7, #0]
void OLED_writeKnobParameter(uint8_t whichKnob)
 8014146:	b083      	sub	sp, #12
		floatADCUI[whichKnob] = smoothedADC[whichKnob];
 8014148:	6809      	ldr	r1, [r1, #0]
		int whichParam = whichKnob + (knobPage * KNOB_PAGE_SIZE);
 801414a:	fb14 6402 	smlabb	r4, r4, r2, r6
		floatADCUI[whichKnob] = smoothedADC[whichKnob];
 801414e:	4a3d      	ldr	r2, [pc, #244]	; (8014244 <OLED_writeKnobParameter.part.0+0x128>)
		int len = strlen(knobParamNames[currentPreset][whichParam]);
 8014150:	4423      	add	r3, r4
		floatADCUI[whichKnob] = smoothedADC[whichKnob];
 8014152:	4402      	add	r2, r0
		int len = strlen(knobParamNames[currentPreset][whichParam]);
 8014154:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
		floatADCUI[whichKnob] = smoothedADC[whichKnob];
 8014158:	6011      	str	r1, [r2, #0]
		int len = strlen(knobParamNames[currentPreset][whichParam]);
 801415a:	f7ec f8bd 	bl	80002d8 <strlen>
		if (len > 0)
 801415e:	2800      	cmp	r0, #0
 8014160:	d066      	beq.n	8014230 <OLED_writeKnobParameter.part.0+0x114>
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8014162:	f04f 0800 	mov.w	r8, #0
 8014166:	f04f 0a10 	mov.w	sl, #16
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 801416a:	b2c5      	uxtb	r5, r0
			GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 801416c:	4936      	ldr	r1, [pc, #216]	; (8014248 <OLED_writeKnobParameter.part.0+0x12c>)
 801416e:	4837      	ldr	r0, [pc, #220]	; (801424c <OLED_writeKnobParameter.part.0+0x130>)
 8014170:	f7fe fd62 	bl	8012c38 <GFXsetFont>
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 8014174:	4641      	mov	r1, r8
 8014176:	4652      	mov	r2, sl
 8014178:	2380      	movs	r3, #128	; 0x80
 801417a:	4834      	ldr	r0, [pc, #208]	; (801424c <OLED_writeKnobParameter.part.0+0x130>)
 801417c:	f8cd 8004 	str.w	r8, [sp, #4]
 8014180:	f8cd a000 	str.w	sl, [sp]
 8014184:	f7fe f910 	bl	80123a8 <GFXfillRect>
			OLEDwriteString(knobParamNames[currentPreset][whichParam], len, 0, SecondLine);
 8014188:	f899 3000 	ldrb.w	r3, [r9]
	GFXsetCursor(&theGFX, cursorX, cursorY);
 801418c:	4641      	mov	r1, r8
 801418e:	221c      	movs	r2, #28
			OLEDwriteString(knobParamNames[currentPreset][whichParam], len, 0, SecondLine);
 8014190:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	GFXsetCursor(&theGFX, cursorX, cursorY);
 8014194:	482d      	ldr	r0, [pc, #180]	; (801424c <OLED_writeKnobParameter.part.0+0x130>)
			OLEDwriteString(knobParamNames[currentPreset][whichParam], len, 0, SecondLine);
 8014196:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801419a:	441c      	add	r4, r3
 801419c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
	GFXsetCursor(&theGFX, cursorX, cursorY);
 80141a0:	f7fe fd38 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 80141a4:	2020      	movs	r0, #32
 80141a6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80141aa:	f8cd 8004 	str.w	r8, [sp, #4]
 80141ae:	4652      	mov	r2, sl
 80141b0:	9000      	str	r0, [sp, #0]
 80141b2:	4641      	mov	r1, r8
 80141b4:	009b      	lsls	r3, r3, #2
 80141b6:	4825      	ldr	r0, [pc, #148]	; (801424c <OLED_writeKnobParameter.part.0+0x130>)
 80141b8:	f7fe f8f6 	bl	80123a8 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 80141bc:	b155      	cbz	r5, 80141d4 <OLED_writeKnobParameter.part.0+0xb8>
 80141be:	3c01      	subs	r4, #1
		GFXwrite(&theGFX, myCharArray[i]);
 80141c0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 801424c <OLED_writeKnobParameter.part.0+0x130>
 80141c4:	4425      	add	r5, r4
 80141c6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80141ca:	4640      	mov	r0, r8
 80141cc:	f7fe fc70 	bl	8012ab0 <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 80141d0:	42ac      	cmp	r4, r5
 80141d2:	d1f8      	bne.n	80141c6 <OLED_writeKnobParameter.part.0+0xaa>
	return GFXgetCursorX(&theGFX);
 80141d4:	481d      	ldr	r0, [pc, #116]	; (801424c <OLED_writeKnobParameter.part.0+0x130>)
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 80141d6:	2420      	movs	r4, #32
	return GFXgetCursorX(&theGFX);
 80141d8:	f7fe fd20 	bl	8012c1c <GFXgetCursorX>
	GFXsetCursor(&theGFX, cursorX, cursorY);
 80141dc:	221c      	movs	r2, #28
 80141de:	b2c5      	uxtb	r5, r0
 80141e0:	481a      	ldr	r0, [pc, #104]	; (801424c <OLED_writeKnobParameter.part.0+0x130>)
 80141e2:	4629      	mov	r1, r5
 80141e4:	f7fe fd16 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 80141e8:	2300      	movs	r3, #0
 80141ea:	4629      	mov	r1, r5
 80141ec:	2210      	movs	r2, #16
 80141ee:	4817      	ldr	r0, [pc, #92]	; (801424c <OLED_writeKnobParameter.part.0+0x130>)
 80141f0:	e9cd 4300 	strd	r4, r3, [sp]
 80141f4:	230c      	movs	r3, #12
 80141f6:	f7fe f8d7 	bl	80123a8 <GFXfillRect>
		GFXwrite(&theGFX, myCharArray[i]);
 80141fa:	4621      	mov	r1, r4
 80141fc:	4813      	ldr	r0, [pc, #76]	; (801424c <OLED_writeKnobParameter.part.0+0x130>)
 80141fe:	f7fe fc57 	bl	8012ab0 <GFXwrite>
			OLEDwriteFloat(displayValues[whichKnob + (knobPage * KNOB_PAGE_SIZE)], getCursorX(), SecondLine);
 8014202:	7839      	ldrb	r1, [r7, #0]
 8014204:	2205      	movs	r2, #5
 8014206:	4b12      	ldr	r3, [pc, #72]	; (8014250 <OLED_writeKnobParameter.part.0+0x134>)
	return GFXgetCursorX(&theGFX);
 8014208:	4810      	ldr	r0, [pc, #64]	; (801424c <OLED_writeKnobParameter.part.0+0x130>)
			OLEDwriteFloat(displayValues[whichKnob + (knobPage * KNOB_PAGE_SIZE)], getCursorX(), SecondLine);
 801420a:	fb12 6601 	smlabb	r6, r2, r1, r6
 801420e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8014212:	ed96 8a00 	vldr	s16, [r6]
	return GFXgetCursorX(&theGFX);
 8014216:	f7fe fd01 	bl	8012c1c <GFXgetCursorX>
			OLEDwriteFloat(displayValues[whichKnob + (knobPage * KNOB_PAGE_SIZE)], getCursorX(), SecondLine);
 801421a:	2101      	movs	r1, #1
 801421c:	b2c0      	uxtb	r0, r0
 801421e:	eeb0 0a48 	vmov.f32	s0, s16
}
 8014222:	b003      	add	sp, #12
 8014224:	ecbd 8b02 	vpop	{d8}
 8014228:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			OLEDwriteFloat(displayValues[whichKnob + (knobPage * KNOB_PAGE_SIZE)], getCursorX(), SecondLine);
 801422c:	f7ff bec4 	b.w	8013fb8 <OLEDwriteFloat>
}
 8014230:	b003      	add	sp, #12
 8014232:	ecbd 8b02 	vpop	{d8}
 8014236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801423a:	bf00      	nop
 801423c:	20000696 	.word	0x20000696
 8014240:	20018864 	.word	0x20018864
 8014244:	2001887c 	.word	0x2001887c
 8014248:	08029a9c 	.word	0x08029a9c
 801424c:	20001cb0 	.word	0x20001cb0
 8014250:	200187d4 	.word	0x200187d4
 8014254:	20000694 	.word	0x20000694
 8014258:	200189a4 	.word	0x200189a4

0801425c <OLED_process>:
{
 801425c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (writeKnobFlag >= 0)
 8014260:	4c2d      	ldr	r4, [pc, #180]	; (8014318 <OLED_process+0xbc>)
{
 8014262:	b083      	sub	sp, #12
	if (writeKnobFlag >= 0)
 8014264:	f994 0000 	ldrsb.w	r0, [r4]
 8014268:	2800      	cmp	r0, #0
 801426a:	db03      	blt.n	8014274 <OLED_process+0x18>
	if (whichKnob < KNOB_PAGE_SIZE)
 801426c:	2804      	cmp	r0, #4
 801426e:	dd4e      	ble.n	801430e <OLED_process+0xb2>
		writeKnobFlag = -1;
 8014270:	23ff      	movs	r3, #255	; 0xff
 8014272:	7023      	strb	r3, [r4, #0]
	if (writeButtonFlag >= 0 && writeActionFlag >= 0) //These should always be set together
 8014274:	4e29      	ldr	r6, [pc, #164]	; (801431c <OLED_process+0xc0>)
 8014276:	f996 0000 	ldrsb.w	r0, [r6]
 801427a:	2800      	cmp	r0, #0
 801427c:	db44      	blt.n	8014308 <OLED_process+0xac>
 801427e:	4f28      	ldr	r7, [pc, #160]	; (8014320 <OLED_process+0xc4>)
 8014280:	f997 1000 	ldrsb.w	r1, [r7]
 8014284:	2900      	cmp	r1, #0
 8014286:	db3f      	blt.n	8014308 <OLED_process+0xac>
	char* str = buttonActionFunctions[currentPreset](whichButton, whichAction);
 8014288:	4a26      	ldr	r2, [pc, #152]	; (8014324 <OLED_process+0xc8>)
 801428a:	b2c9      	uxtb	r1, r1
 801428c:	4b26      	ldr	r3, [pc, #152]	; (8014328 <OLED_process+0xcc>)
 801428e:	b2c0      	uxtb	r0, r0
 8014290:	7812      	ldrb	r2, [r2, #0]
 8014292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014296:	4798      	blx	r3
 8014298:	4604      	mov	r4, r0
	int len = strlen(str);
 801429a:	f7ec f81d 	bl	80002d8 <strlen>
	if (len > 0)
 801429e:	b380      	cbz	r0, 8014302 <OLED_process+0xa6>
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 80142a0:	f04f 0800 	mov.w	r8, #0
 80142a4:	f04f 0910 	mov.w	r9, #16
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 80142a8:	b2c5      	uxtb	r5, r0
		GFXsetFont(&theGFX, &EuphemiaCAS7pt7b);
 80142aa:	4920      	ldr	r1, [pc, #128]	; (801432c <OLED_process+0xd0>)
 80142ac:	4820      	ldr	r0, [pc, #128]	; (8014330 <OLED_process+0xd4>)
 80142ae:	f7fe fcc3 	bl	8012c38 <GFXsetFont>
	GFXfillRect(&theGFX, 0, (line%2)*16, 128, 16*((line/2)+1), 0);
 80142b2:	2380      	movs	r3, #128	; 0x80
 80142b4:	4641      	mov	r1, r8
 80142b6:	464a      	mov	r2, r9
 80142b8:	481d      	ldr	r0, [pc, #116]	; (8014330 <OLED_process+0xd4>)
 80142ba:	f8cd 8004 	str.w	r8, [sp, #4]
 80142be:	f8cd 9000 	str.w	r9, [sp]
 80142c2:	f7fe f871 	bl	80123a8 <GFXfillRect>
	GFXsetCursor(&theGFX, cursorX, cursorY);
 80142c6:	4641      	mov	r1, r8
 80142c8:	221c      	movs	r2, #28
 80142ca:	4819      	ldr	r0, [pc, #100]	; (8014330 <OLED_process+0xd4>)
 80142cc:	f7fe fca2 	bl	8012c14 <GFXsetCursor>
	GFXfillRect(&theGFX, startCursor, line*16, arrayLength*12, (line*16)+16, 0);
 80142d0:	2020      	movs	r0, #32
 80142d2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80142d6:	f8cd 8004 	str.w	r8, [sp, #4]
 80142da:	9000      	str	r0, [sp, #0]
 80142dc:	464a      	mov	r2, r9
 80142de:	4641      	mov	r1, r8
 80142e0:	009b      	lsls	r3, r3, #2
 80142e2:	4813      	ldr	r0, [pc, #76]	; (8014330 <OLED_process+0xd4>)
 80142e4:	f7fe f860 	bl	80123a8 <GFXfillRect>
	for (int i = 0; i < arrayLength; ++i)
 80142e8:	b15d      	cbz	r5, 8014302 <OLED_process+0xa6>
 80142ea:	4425      	add	r5, r4
		GFXwrite(&theGFX, myCharArray[i]);
 80142ec:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8014330 <OLED_process+0xd4>
 80142f0:	3c01      	subs	r4, #1
 80142f2:	3d01      	subs	r5, #1
 80142f4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80142f8:	4640      	mov	r0, r8
 80142fa:	f7fe fbd9 	bl	8012ab0 <GFXwrite>
	for (int i = 0; i < arrayLength; ++i)
 80142fe:	42ac      	cmp	r4, r5
 8014300:	d1f8      	bne.n	80142f4 <OLED_process+0x98>
		writeButtonFlag = -1;
 8014302:	23ff      	movs	r3, #255	; 0xff
 8014304:	7033      	strb	r3, [r6, #0]
		writeActionFlag = -1;
 8014306:	703b      	strb	r3, [r7, #0]
}
 8014308:	b003      	add	sp, #12
 801430a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801430e:	b2c0      	uxtb	r0, r0
 8014310:	f7ff ff04 	bl	801411c <OLED_writeKnobParameter.part.0>
 8014314:	e7ac      	b.n	8014270 <OLED_process+0x14>
 8014316:	bf00      	nop
 8014318:	200002e8 	.word	0x200002e8
 801431c:	200002d0 	.word	0x200002d0
 8014320:	200002d1 	.word	0x200002d1
 8014324:	20000694 	.word	0x20000694
 8014328:	200190b8 	.word	0x200190b8
 801432c:	08029a9c 	.word	0x08029a9c
 8014330:	20001cb0 	.word	0x20001cb0

08014334 <OLEDgetCursor>:
	}
}

int16_t OLEDgetCursor()
{
	return GFXgetCursorX(&theGFX);
 8014334:	4801      	ldr	r0, [pc, #4]	; (801433c <OLEDgetCursor+0x8>)
 8014336:	f7fe bc71 	b.w	8012c1c <GFXgetCursorX>
 801433a:	bf00      	nop
 801433c:	20001cb0 	.word	0x20001cb0

08014340 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8014340:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 8014342:	4b07      	ldr	r3, [pc, #28]	; (8014360 <MX_RNG_Init+0x20>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8014344:	2100      	movs	r1, #0
  hrng.Instance = RNG;
 8014346:	4a07      	ldr	r2, [pc, #28]	; (8014364 <MX_RNG_Init+0x24>)
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8014348:	4618      	mov	r0, r3
  hrng.Instance = RNG;
 801434a:	e9c3 2100 	strd	r2, r1, [r3]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 801434e:	f7f6 f82d 	bl	800a3ac <HAL_RNG_Init>
 8014352:	b900      	cbnz	r0, 8014356 <MX_RNG_Init+0x16>
  {
    Error_Handler();
  }

}
 8014354:	bd08      	pop	{r3, pc}
 8014356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 801435a:	f7ff baf1 	b.w	8013940 <Error_Handler>
 801435e:	bf00      	nop
 8014360:	20001cd4 	.word	0x20001cd4
 8014364:	48021800 	.word	0x48021800

08014368 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 8014368:	6802      	ldr	r2, [r0, #0]
 801436a:	4b0a      	ldr	r3, [pc, #40]	; (8014394 <HAL_RNG_MspInit+0x2c>)
 801436c:	429a      	cmp	r2, r3
 801436e:	d000      	beq.n	8014372 <HAL_RNG_MspInit+0xa>
 8014370:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8014372:	4b09      	ldr	r3, [pc, #36]	; (8014398 <HAL_RNG_MspInit+0x30>)
{
 8014374:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8014376:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 801437a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801437e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8014382:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8014386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801438a:	9301      	str	r3, [sp, #4]
 801438c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 801438e:	b002      	add	sp, #8
 8014390:	4770      	bx	lr
 8014392:	bf00      	nop
 8014394:	48021800 	.word	0x48021800
 8014398:	58024400 	.word	0x58024400

0801439c <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 801439c:	b570      	push	{r4, r5, r6, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 801439e:	481a      	ldr	r0, [pc, #104]	; (8014408 <MX_SAI1_Init+0x6c>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80143a0:	2500      	movs	r5, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 80143a2:	4c1a      	ldr	r4, [pc, #104]	; (801440c <MX_SAI1_Init+0x70>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80143a4:	2101      	movs	r1, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80143a6:	f64b 3280 	movw	r2, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80143aa:	2302      	movs	r3, #2
  hsai_BlockA1.Instance = SAI1_Block_A;
 80143ac:	6020      	str	r0, [r4, #0]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80143ae:	4620      	mov	r0, r4
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80143b0:	61e1      	str	r1, [r4, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80143b2:	4629      	mov	r1, r5
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80143b4:	6222      	str	r2, [r4, #32]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80143b6:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80143b8:	60e5      	str	r5, [r4, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80143ba:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80143bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80143c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80143c4:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80143c8:	f7f6 f878 	bl	800a4bc <HAL_SAI_InitProtocol>
 80143cc:	b9c8      	cbnz	r0, 8014402 <MX_SAI1_Init+0x66>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80143ce:	4c10      	ldr	r4, [pc, #64]	; (8014410 <MX_SAI1_Init+0x74>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80143d0:	2500      	movs	r5, #0
  hsai_BlockB1.Instance = SAI1_Block_B;
 80143d2:	4910      	ldr	r1, [pc, #64]	; (8014414 <MX_SAI1_Init+0x78>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80143d4:	2203      	movs	r2, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80143d6:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80143d8:	2601      	movs	r6, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 80143da:	6021      	str	r1, [r4, #0]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80143dc:	4620      	mov	r0, r4
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80143de:	6062      	str	r2, [r4, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80143e0:	4629      	mov	r1, r5
 80143e2:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80143e4:	60a6      	str	r6, [r4, #8]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80143e6:	61e6      	str	r6, [r4, #28]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80143e8:	6165      	str	r5, [r4, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80143ea:	60e5      	str	r5, [r4, #12]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80143ec:	6365      	str	r5, [r4, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80143ee:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80143f2:	f7f6 f863 	bl	800a4bc <HAL_SAI_InitProtocol>
 80143f6:	b900      	cbnz	r0, 80143fa <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
  }

}
 80143f8:	bd70      	pop	{r4, r5, r6, pc}
 80143fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 80143fe:	f7ff ba9f 	b.w	8013940 <Error_Handler>
    Error_Handler();
 8014402:	f7ff fa9d 	bl	8013940 <Error_Handler>
 8014406:	e7e2      	b.n	80143ce <MX_SAI1_Init+0x32>
 8014408:	40015804 	.word	0x40015804
 801440c:	20001e70 	.word	0x20001e70
 8014410:	20001ce8 	.word	0x20001ce8
 8014414:	40015824 	.word	0x40015824

08014418 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8014418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 801441c:	4a5e      	ldr	r2, [pc, #376]	; (8014598 <HAL_SAI_MspInit+0x180>)
{
 801441e:	b088      	sub	sp, #32
    if(hsai->Instance==SAI1_Block_A)
 8014420:	6803      	ldr	r3, [r0, #0]
{
 8014422:	4605      	mov	r5, r0
    if(hsai->Instance==SAI1_Block_A)
 8014424:	4293      	cmp	r3, r2
 8014426:	d040      	beq.n	80144aa <HAL_SAI_MspInit+0x92>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 8014428:	4a5c      	ldr	r2, [pc, #368]	; (801459c <HAL_SAI_MspInit+0x184>)
 801442a:	4293      	cmp	r3, r2
 801442c:	d002      	beq.n	8014434 <HAL_SAI_MspInit+0x1c>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 801442e:	b008      	add	sp, #32
 8014430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (SAI1_client == 0)
 8014434:	4c5a      	ldr	r4, [pc, #360]	; (80145a0 <HAL_SAI_MspInit+0x188>)
 8014436:	6822      	ldr	r2, [r4, #0]
 8014438:	2a00      	cmp	r2, #0
 801443a:	d07b      	beq.n	8014534 <HAL_SAI_MspInit+0x11c>
    SAI1_client ++;
 801443c:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 801443e:	2008      	movs	r0, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014440:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014442:	2302      	movs	r3, #2
    SAI1_client ++;
 8014444:	6022      	str	r2, [r4, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8014446:	2206      	movs	r2, #6
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014448:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 801444a:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801444c:	4855      	ldr	r0, [pc, #340]	; (80145a4 <HAL_SAI_MspInit+0x18c>)
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801444e:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai1_b.Instance = DMA1_Stream2;
 8014452:	4c55      	ldr	r4, [pc, #340]	; (80145a8 <HAL_SAI_MspInit+0x190>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014454:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8014456:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8014458:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801445a:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801445c:	f7f0 feac 	bl	80051b8 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8014460:	4a52      	ldr	r2, [pc, #328]	; (80145ac <HAL_SAI_MspInit+0x194>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8014462:	2358      	movs	r3, #88	; 0x58
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8014464:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8014468:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 801446c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_b.Instance = DMA1_Stream2;
 8014470:	6022      	str	r2, [r4, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8014472:	6063      	str	r3, [r4, #4]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8014474:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8014478:	2304      	movs	r3, #4
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801447a:	60a6      	str	r6, [r4, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 801447c:	60e6      	str	r6, [r4, #12]
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 801447e:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8014480:	e9c4 c004 	strd	ip, r0, [r4, #16]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8014484:	4620      	mov	r0, r4
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8014486:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 801448a:	e9c4 7106 	strd	r7, r1, [r4, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 801448e:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8014492:	f7ee f8f9 	bl	8002688 <HAL_DMA_Init>
 8014496:	2800      	cmp	r0, #0
 8014498:	d162      	bne.n	8014560 <HAL_SAI_MspInit+0x148>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 801449a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
 801449e:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80144a0:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
}
 80144a4:	b008      	add	sp, #32
 80144a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SAI1_client == 0)
 80144aa:	4c3d      	ldr	r4, [pc, #244]	; (80145a0 <HAL_SAI_MspInit+0x188>)
 80144ac:	6822      	ldr	r2, [r4, #0]
 80144ae:	2a00      	cmp	r2, #0
 80144b0:	d05c      	beq.n	801456c <HAL_SAI_MspInit+0x154>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80144b2:	2024      	movs	r0, #36	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144b4:	2600      	movs	r6, #0
    SAI1_client ++;
 80144b6:	3201      	adds	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144b8:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144ba:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80144bc:	f04f 0806 	mov.w	r8, #6
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80144c0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80144c2:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80144c4:	4837      	ldr	r0, [pc, #220]	; (80145a4 <HAL_SAI_MspInit+0x18c>)
    SAI1_client ++;
 80144c6:	6022      	str	r2, [r4, #0]
    hdma_sai1_a.Instance = DMA1_Stream1;
 80144c8:	4c39      	ldr	r4, [pc, #228]	; (80145b0 <HAL_SAI_MspInit+0x198>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80144ca:	e9cd 3806 	strd	r3, r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144ce:	e9cd 7604 	strd	r7, r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80144d2:	f7f0 fe71 	bl	80051b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80144d6:	2350      	movs	r3, #80	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80144d8:	a903      	add	r1, sp, #12
 80144da:	4832      	ldr	r0, [pc, #200]	; (80145a4 <HAL_SAI_MspInit+0x18c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80144dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80144de:	e9cd 7806 	strd	r7, r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144e2:	e9cd 7604 	strd	r7, r6, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80144e6:	f7f0 fe67 	bl	80051b8 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 80144ea:	4b32      	ldr	r3, [pc, #200]	; (80145b4 <HAL_SAI_MspInit+0x19c>)
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80144ec:	2040      	movs	r0, #64	; 0x40
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80144ee:	f04f 0857 	mov.w	r8, #87	; 0x57
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80144f2:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80144f6:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80144fa:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80144fe:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8014502:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_sai1_a.Instance = DMA1_Stream1;
 8014506:	6023      	str	r3, [r4, #0]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8014508:	2304      	movs	r3, #4
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 801450a:	60e6      	str	r6, [r4, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 801450c:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 801450e:	62e6      	str	r6, [r4, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8014510:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8014512:	e9c4 8001 	strd	r8, r0, [r4, #4]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8014516:	4620      	mov	r0, r4
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8014518:	e9c4 ec04 	strd	lr, ip, [r4, #16]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 801451c:	e9c4 7106 	strd	r7, r1, [r4, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8014520:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8014524:	f7ee f8b0 	bl	8002688 <HAL_DMA_Init>
 8014528:	b9e8      	cbnz	r0, 8014566 <HAL_SAI_MspInit+0x14e>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 801452a:	63a5      	str	r5, [r4, #56]	; 0x38
 801452c:	682b      	ldr	r3, [r5, #0]
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 801452e:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
 8014532:	e779      	b.n	8014428 <HAL_SAI_MspInit+0x10>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8014534:	4b20      	ldr	r3, [pc, #128]	; (80145b8 <HAL_SAI_MspInit+0x1a0>)
      HAL_NVIC_SetPriority(SAI1_IRQn, 2, 0);
 8014536:	2102      	movs	r1, #2
 8014538:	2057      	movs	r0, #87	; 0x57
       __HAL_RCC_SAI1_CLK_ENABLE();
 801453a:	f8d3 60f0 	ldr.w	r6, [r3, #240]	; 0xf0
 801453e:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
 8014542:	f8c3 60f0 	str.w	r6, [r3, #240]	; 0xf0
 8014546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801454a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801454e:	9302      	str	r3, [sp, #8]
 8014550:	9b02      	ldr	r3, [sp, #8]
      HAL_NVIC_SetPriority(SAI1_IRQn, 2, 0);
 8014552:	f7ed fecd 	bl	80022f0 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8014556:	2057      	movs	r0, #87	; 0x57
 8014558:	f7ed ff10 	bl	800237c <HAL_NVIC_EnableIRQ>
 801455c:	6822      	ldr	r2, [r4, #0]
 801455e:	e76d      	b.n	801443c <HAL_SAI_MspInit+0x24>
      Error_Handler();
 8014560:	f7ff f9ee 	bl	8013940 <Error_Handler>
 8014564:	e799      	b.n	801449a <HAL_SAI_MspInit+0x82>
      Error_Handler();
 8014566:	f7ff f9eb 	bl	8013940 <Error_Handler>
 801456a:	e7de      	b.n	801452a <HAL_SAI_MspInit+0x112>
       __HAL_RCC_SAI1_CLK_ENABLE();
 801456c:	4b12      	ldr	r3, [pc, #72]	; (80145b8 <HAL_SAI_MspInit+0x1a0>)
    HAL_NVIC_SetPriority(SAI1_IRQn, 2, 0);
 801456e:	2102      	movs	r1, #2
 8014570:	2057      	movs	r0, #87	; 0x57
       __HAL_RCC_SAI1_CLK_ENABLE();
 8014572:	f8d3 60f0 	ldr.w	r6, [r3, #240]	; 0xf0
 8014576:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
 801457a:	f8c3 60f0 	str.w	r6, [r3, #240]	; 0xf0
 801457e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014586:	9301      	str	r3, [sp, #4]
 8014588:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(SAI1_IRQn, 2, 0);
 801458a:	f7ed feb1 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 801458e:	2057      	movs	r0, #87	; 0x57
 8014590:	f7ed fef4 	bl	800237c <HAL_NVIC_EnableIRQ>
 8014594:	6822      	ldr	r2, [r4, #0]
 8014596:	e78c      	b.n	80144b2 <HAL_SAI_MspInit+0x9a>
 8014598:	40015804 	.word	0x40015804
 801459c:	40015824 	.word	0x40015824
 80145a0:	20000544 	.word	0x20000544
 80145a4:	58021000 	.word	0x58021000
 80145a8:	20001df8 	.word	0x20001df8
 80145ac:	40020040 	.word	0x40020040
 80145b0:	20001d80 	.word	0x20001d80
 80145b4:	40020028 	.word	0x40020028
 80145b8:	58024400 	.word	0x58024400

080145bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80145bc:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;  
 80145be:	4c0a      	ldr	r4, [pc, #40]	; (80145e8 <SD_initialize+0x2c>)
 80145c0:	2501      	movs	r5, #1
 80145c2:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80145c4:	f7fd f87c 	bl	80116c0 <BSP_SD_Init>
 80145c8:	b108      	cbz	r0, 80145ce <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80145ca:	7820      	ldrb	r0, [r4, #0]
}
 80145cc:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 80145ce:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80145d0:	f7fd f856 	bl	8011680 <BSP_SD_GetCardState>
 80145d4:	b918      	cbnz	r0, 80145de <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 80145d6:	7823      	ldrb	r3, [r4, #0]
 80145d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80145dc:	7023      	strb	r3, [r4, #0]
  return Stat;
 80145de:	7823      	ldrb	r3, [r4, #0]
 80145e0:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 80145e2:	7023      	strb	r3, [r4, #0]
  return Stat;
 80145e4:	7820      	ldrb	r0, [r4, #0]
}
 80145e6:	bd38      	pop	{r3, r4, r5, pc}
 80145e8:	2000003c 	.word	0x2000003c

080145ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80145ec:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80145ee:	2301      	movs	r3, #1
 80145f0:	4c05      	ldr	r4, [pc, #20]	; (8014608 <SD_status+0x1c>)
 80145f2:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80145f4:	f7fd f844 	bl	8011680 <BSP_SD_GetCardState>
 80145f8:	b918      	cbnz	r0, 8014602 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 80145fa:	7823      	ldrb	r3, [r4, #0]
 80145fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8014600:	7023      	strb	r3, [r4, #0]
  return Stat;
 8014602:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8014604:	bd10      	pop	{r4, pc}
 8014606:	bf00      	nop
 8014608:	2000003c 	.word	0x2000003c

0801460c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801460c:	b508      	push	{r3, lr}
 801460e:	4608      	mov	r0, r1
 8014610:	4611      	mov	r1, r2
 8014612:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8014614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014618:	f7fd f80e 	bl	8011638 <BSP_SD_ReadBlocks>
 801461c:	b920      	cbnz	r0, 8014628 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 801461e:	f7fd f82f 	bl	8011680 <BSP_SD_GetCardState>
 8014622:	2800      	cmp	r0, #0
 8014624:	d1fb      	bne.n	801461e <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8014626:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8014628:	2001      	movs	r0, #1
}
 801462a:	bd08      	pop	{r3, pc}

0801462c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801462c:	4b16      	ldr	r3, [pc, #88]	; (8014688 <SD_ioctl+0x5c>)
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	07db      	lsls	r3, r3, #31
 8014632:	d408      	bmi.n	8014646 <SD_ioctl+0x1a>
{
 8014634:	b510      	push	{r4, lr}
 8014636:	4614      	mov	r4, r2
 8014638:	b08a      	sub	sp, #40	; 0x28

  switch (cmd)
 801463a:	2903      	cmp	r1, #3
 801463c:	d821      	bhi.n	8014682 <SD_ioctl+0x56>
 801463e:	e8df f001 	tbb	[pc, r1]
 8014642:	0704      	.short	0x0704
 8014644:	170f      	.short	0x170f
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014646:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8014648:	4770      	bx	lr
    res = RES_OK;
 801464a:	2000      	movs	r0, #0
}
 801464c:	b00a      	add	sp, #40	; 0x28
 801464e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8014650:	a801      	add	r0, sp, #4
 8014652:	f7fd f81f 	bl	8011694 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014656:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 8014658:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801465a:	6023      	str	r3, [r4, #0]
}
 801465c:	b00a      	add	sp, #40	; 0x28
 801465e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8014660:	a801      	add	r0, sp, #4
 8014662:	f7fd f817 	bl	8011694 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014666:	9b08      	ldr	r3, [sp, #32]
    res = RES_OK;
 8014668:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 801466a:	8023      	strh	r3, [r4, #0]
}
 801466c:	b00a      	add	sp, #40	; 0x28
 801466e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8014670:	a801      	add	r0, sp, #4
 8014672:	f7fd f80f 	bl	8011694 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014676:	9b08      	ldr	r3, [sp, #32]
 8014678:	2000      	movs	r0, #0
 801467a:	0a5b      	lsrs	r3, r3, #9
 801467c:	6023      	str	r3, [r4, #0]
}
 801467e:	b00a      	add	sp, #40	; 0x28
 8014680:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 8014682:	2004      	movs	r0, #4
}
 8014684:	b00a      	add	sp, #40	; 0x28
 8014686:	bd10      	pop	{r4, pc}
 8014688:	2000003c 	.word	0x2000003c

0801468c <SD_write>:
{
 801468c:	b508      	push	{r3, lr}
 801468e:	4608      	mov	r0, r1
 8014690:	4611      	mov	r1, r2
 8014692:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8014694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014698:	f7fc ffe0 	bl	801165c <BSP_SD_WriteBlocks>
 801469c:	b920      	cbnz	r0, 80146a8 <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 801469e:	f7fc ffef 	bl	8011680 <BSP_SD_GetCardState>
 80146a2:	2800      	cmp	r0, #0
 80146a4:	d1fb      	bne.n	801469e <SD_write+0x12>
}
 80146a6:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80146a8:	2001      	movs	r0, #1
}
 80146aa:	bd08      	pop	{r3, pc}

080146ac <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80146ac:	b410      	push	{r4}

  hsd1.Instance = SDMMC1;
 80146ae:	4b08      	ldr	r3, [pc, #32]	; (80146d0 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80146b0:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hsd1.Instance = SDMMC1;
 80146b4:	4807      	ldr	r0, [pc, #28]	; (80146d4 <MX_SDMMC1_SD_Init+0x28>)
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 0;
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80146b6:	2101      	movs	r1, #1
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80146b8:	2200      	movs	r2, #0
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80146ba:	60dc      	str	r4, [r3, #12]
  hsd1.Instance = SDMMC1;
 80146bc:	6018      	str	r0, [r3, #0]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80146be:	6199      	str	r1, [r3, #24]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80146c0:	e9c3 2201 	strd	r2, r2, [r3, #4]
  hsd1.Init.ClockDiv = 0;
 80146c4:	e9c3 2204 	strd	r2, r2, [r3, #16]

}
 80146c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146cc:	4770      	bx	lr
 80146ce:	bf00      	nop
 80146d0:	20001f08 	.word	0x20001f08
 80146d4:	52007000 	.word	0x52007000

080146d8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80146d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 80146dc:	4b2e      	ldr	r3, [pc, #184]	; (8014798 <HAL_SD_MspInit+0xc0>)
{
 80146de:	b088      	sub	sp, #32
  if(sdHandle->Instance==SDMMC1)
 80146e0:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80146e2:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 80146e4:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80146e6:	9407      	str	r4, [sp, #28]
 80146e8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80146ec:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(sdHandle->Instance==SDMMC1)
 80146f0:	d002      	beq.n	80146f8 <HAL_SD_MspInit+0x20>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80146f2:	b008      	add	sp, #32
 80146f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80146f8:	4b28      	ldr	r3, [pc, #160]	; (801479c <HAL_SD_MspInit+0xc4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80146fa:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80146fc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014700:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8014702:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014706:	2603      	movs	r6, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014708:	f04f 0801 	mov.w	r8, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801470c:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8014710:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8014714:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8014718:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 801471c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8014720:	9200      	str	r2, [sp, #0]
 8014722:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014724:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014728:	f042 0204 	orr.w	r2, r2, #4
 801472c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8014730:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014734:	f002 0204 	and.w	r2, r2, #4
 8014738:	9201      	str	r2, [sp, #4]
 801473a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801473c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014740:	f042 0208 	orr.w	r2, r2, #8
 8014744:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8014748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 801474c:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801474e:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014752:	4813      	ldr	r0, [pc, #76]	; (80147a0 <HAL_SD_MspInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014754:	9704      	str	r7, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014756:	9302      	str	r3, [sp, #8]
 8014758:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 801475a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801475c:	e9cd 8605 	strd	r8, r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014760:	f7f0 fd2a 	bl	80051b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8014764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014768:	eb0d 0105 	add.w	r1, sp, r5
 801476c:	480c      	ldr	r0, [pc, #48]	; (80147a0 <HAL_SD_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801476e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014770:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014772:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8014774:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014778:	f7f0 fd1e 	bl	80051b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801477c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801477e:	eb0d 0105 	add.w	r1, sp, r5
 8014782:	4808      	ldr	r0, [pc, #32]	; (80147a4 <HAL_SD_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8014784:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014786:	e9cd 7804 	strd	r7, r8, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 801478a:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801478e:	f7f0 fd13 	bl	80051b8 <HAL_GPIO_Init>
}
 8014792:	b008      	add	sp, #32
 8014794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014798:	52007000 	.word	0x52007000
 801479c:	58024400 	.word	0x58024400
 80147a0:	58020800 	.word	0x58020800
 80147a4:	58020c00 	.word	0x58020c00

080147a8 <initGlobalSFXObjects>:
        float oversamplerArray[MAX_OVERSAMPLER_RATIO];



        void initGlobalSFXObjects()
        {
 80147a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void calculateNoteArray()
        {
            for (int i = 0; i < 128; i++)
            {
                float tempNote = i;
                float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 80147ac:	4beb      	ldr	r3, [pc, #940]	; (8014b5c <initGlobalSFXObjects+0x3b4>)
            for (int i = 0; i < 128; i++)
 80147ae:	2000      	movs	r0, #0
 80147b0:	4ceb      	ldr	r4, [pc, #940]	; (8014b60 <initGlobalSFXObjects+0x3b8>)
                float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 80147b2:	781f      	ldrb	r7, [r3, #0]
 80147b4:	4eeb      	ldr	r6, [pc, #940]	; (8014b64 <initGlobalSFXObjects+0x3bc>)
 80147b6:	4dec      	ldr	r5, [pc, #944]	; (8014b68 <initGlobalSFXObjects+0x3c0>)
                float tempNote = i;
 80147b8:	ee07 0a90 	vmov	s15, r0
            for (int i = 0; i < 128; i++)
 80147bc:	3001      	adds	r0, #1
                float tempNote = i;
 80147be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
            for (int i = 0; i < 128; i++)
 80147c2:	2880      	cmp	r0, #128	; 0x80
                float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 80147c4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80147c8:	ee17 3a90 	vmov	r3, s15
 80147cc:	eba3 0307 	sub.w	r3, r3, r7
 80147d0:	fb85 2103 	smull	r2, r1, r5, r3
 80147d4:	ea4f 72e3 	mov.w	r2, r3, asr #31
 80147d8:	ebc2 0261 	rsb	r2, r2, r1, asr #1
 80147dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80147e0:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80147e4:	ee07 3a90 	vmov	s15, r3
 80147e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 80147ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147f0:	ee17 3a90 	vmov	r3, s15
 80147f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80147f8:	edd3 7a00 	vldr	s15, [r3]
 80147fc:	ee37 7a87 	vadd.f32	s14, s15, s14
                notes[i] = tunedNote;
 8014800:	eca4 7a01 	vstmia	r4!, {s14}
            for (int i = 0; i < 128; i++)
 8014804:	d1d8      	bne.n	80147b8 <initGlobalSFXObjects+0x10>
 8014806:	4cd9      	ldr	r4, [pc, #868]	; (8014b6c <initGlobalSFXObjects+0x3c4>)
                tExpSmooth_initToPool(&polyRamp[i], 0.0f, 0.02f, &smallPool);
 8014808:	2600      	movs	r6, #0
 801480a:	f8df a3b4 	ldr.w	sl, [pc, #948]	; 8014bc0 <initGlobalSFXObjects+0x418>
            tSimplePoly_initToPool(&poly, NUM_VOC_VOICES, &smallPool);
 801480e:	2108      	movs	r1, #8
 8014810:	f104 0720 	add.w	r7, r4, #32
                tExpSmooth_initToPool(&polyRamp[i], 0.0f, 0.02f, &smallPool);
 8014814:	4dd6      	ldr	r5, [pc, #856]	; (8014b70 <initGlobalSFXObjects+0x3c8>)
            tSimplePoly_initToPool(&poly, NUM_VOC_VOICES, &smallPool);
 8014816:	4ad6      	ldr	r2, [pc, #856]	; (8014b70 <initGlobalSFXObjects+0x3c8>)
 8014818:	48d6      	ldr	r0, [pc, #856]	; (8014b74 <initGlobalSFXObjects+0x3cc>)
 801481a:	f00f fe03 	bl	8024424 <tSimplePoly_initToPool>
                tExpSmooth_initToPool(&polyRamp[i], 0.0f, 0.02f, &smallPool);
 801481e:	4620      	mov	r0, r4
 8014820:	3404      	adds	r4, #4
 8014822:	4629      	mov	r1, r5
 8014824:	eddf 0ad4 	vldr	s1, [pc, #848]	; 8014b78 <initGlobalSFXObjects+0x3d0>
 8014828:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 8014b7c <initGlobalSFXObjects+0x3d4>
 801482c:	f00d fd9c 	bl	8022368 <tExpSmooth_initToPool>
            for (int i = 0; i < NUM_VOC_VOICES; i++)
 8014830:	42a7      	cmp	r7, r4
 8014832:	d1f4      	bne.n	801481e <initGlobalSFXObjects+0x76>
            tExpSmooth_init(&comp, 1.0f, 0.01f);
 8014834:	eddf 0ad2 	vldr	s1, [pc, #840]	; 8014b80 <initGlobalSFXObjects+0x3d8>
 8014838:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801483c:	48d1      	ldr	r0, [pc, #836]	; (8014b84 <initGlobalSFXObjects+0x3dc>)
            defaultPresetKnobValues[VocoderCh][2] = 1.0f; // quality
 801483e:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
            tExpSmooth_init(&comp, 1.0f, 0.01f);
 8014842:	f00d fd67 	bl	8022314 <tExpSmooth_init>
            LEAF_generate_exp(expBuffer, 1000.0f, -1.0f, 0.0f, -0.0008f, EXP_BUFFER_SIZE); //exponential buffer rising from 0 to 1
 8014846:	2180      	movs	r1, #128	; 0x80
 8014848:	eddf 1acf 	vldr	s3, [pc, #828]	; 8014b88 <initGlobalSFXObjects+0x3e0>
 801484c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8014850:	ed9f 1aca 	vldr	s2, [pc, #808]	; 8014b7c <initGlobalSFXObjects+0x3d4>
 8014854:	ed9f 0acd 	vldr	s0, [pc, #820]	; 8014b8c <initGlobalSFXObjects+0x3e4>
 8014858:	48cd      	ldr	r0, [pc, #820]	; (8014b90 <initGlobalSFXObjects+0x3e8>)
 801485a:	f00f fac9 	bl	8023df0 <LEAF_generate_exp>
            LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 801485e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014862:	48cc      	ldr	r0, [pc, #816]	; (8014b94 <initGlobalSFXObjects+0x3ec>)
 8014864:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8014868:	eddf 1ac7 	vldr	s3, [pc, #796]	; 8014b88 <initGlobalSFXObjects+0x3e0>
 801486c:	eddf 0ac3 	vldr	s1, [pc, #780]	; 8014b7c <initGlobalSFXObjects+0x3d4>
 8014870:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 8014b98 <initGlobalSFXObjects+0x3f0>
 8014874:	f00f fabc 	bl	8023df0 <LEAF_generate_exp>
            defaultPresetKnobValues[Vocoder][0] = 0.4f; // volume
 8014878:	4bc8      	ldr	r3, [pc, #800]	; (8014b9c <initGlobalSFXObjects+0x3f4>)
            defaultPresetKnobValues[VocoderCh][9] = 0.66f; // envelope speed
 801487a:	48c9      	ldr	r0, [pc, #804]	; (8014ba0 <initGlobalSFXObjects+0x3f8>)
            defaultPresetKnobValues[Vocoder][1] = 0.5f; // warp factor
 801487c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
            defaultPresetKnobValues[Pitchshift][5] = 0.25f; //offset
 8014880:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
            defaultPresetKnobValues[Vocoder][0] = 0.4f; // volume
 8014884:	4fc7      	ldr	r7, [pc, #796]	; (8014ba4 <initGlobalSFXObjects+0x3fc>)
            defaultPresetKnobValues[Vocoder][4] = 0.2f; // noise threshold
 8014886:	f8df c33c 	ldr.w	ip, [pc, #828]	; 8014bc4 <initGlobalSFXObjects+0x41c>
            defaultPresetKnobValues[SamplerButtonPress][2] = 0.75f; // speed
 801488a:	f04f 5e7d 	mov.w	lr, #1061158912	; 0x3f400000
            defaultPresetKnobValues[Vocoder][2] = 0.85f; // quality
 801488e:	f8df 8338 	ldr.w	r8, [pc, #824]	; 8014bc8 <initGlobalSFXObjects+0x420>
            defaultPresetKnobValues[Delay][0] = 0.25f; // delayL
 8014892:	f203 494c 	addw	r9, r3, #1100	; 0x44c
            defaultPresetKnobValues[VocoderCh][9] = 0.66f; // envelope speed
 8014896:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
            defaultPresetKnobValues[Delay][1] = 0.25f; // delayR
 801489a:	f503 6b8a 	add.w	fp, r3, #1104	; 0x450
            defaultPresetKnobValues[SamplerAutoGrab][0] = 0.95f; // thresh
 801489e:	48c2      	ldr	r0, [pc, #776]	; (8014ba8 <initGlobalSFXObjects+0x400>)
            defaultPresetKnobValues[Vocoder][5] = 0.02f; // breathiness
 80148a0:	f8c3 a014 	str.w	sl, [r3, #20]
            defaultPresetKnobValues[Delay][3] = 1.0f; // lowpass
 80148a4:	f503 6a8b 	add.w	sl, r3, #1112	; 0x458
            defaultPresetKnobValues[Vocoder][0] = 0.4f; // volume
 80148a8:	601f      	str	r7, [r3, #0]
            defaultPresetKnobValues[VocoderCh][0] = 0.4f; // volume
 80148aa:	665f      	str	r7, [r3, #100]	; 0x64
            defaultPresetKnobValues[Vocoder][2] = 0.85f; // quality
 80148ac:	f8c3 8008 	str.w	r8, [r3, #8]
            defaultPresetKnobValues[Vocoder][4] = 0.2f; // noise threshold
 80148b0:	f8c3 c010 	str.w	ip, [r3, #16]
            defaultPresetKnobValues[VocoderCh][4] = 0.2f; //noise thresh
 80148b4:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
            defaultPresetKnobValues[VocoderCh][2] = 1.0f; // quality
 80148b8:	66dc      	str	r4, [r3, #108]	; 0x6c
            defaultPresetKnobValues[Pitchshift][5] = 0.25f; //offset
 80148ba:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
            defaultPresetKnobValues[Pitchshift][6] = 0.25f;
 80148be:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
            defaultPresetKnobValues[Vocoder][3] = 0.0f; // sawToPulse
 80148c2:	60de      	str	r6, [r3, #12]
            defaultPresetKnobValues[Vocoder][9] = 0.0f;
 80148c4:	625e      	str	r6, [r3, #36]	; 0x24
            defaultPresetKnobValues[VocoderCh][5] = 0.0f;// saw->pulse fade
 80148c6:	679e      	str	r6, [r3, #120]	; 0x78
            defaultPresetKnobValues[VocoderCh][8] = 0.0f; // breathiness
 80148c8:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
            defaultPresetKnobValues[VocoderCh][13] = 0.0f; // stereo
 80148cc:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
            defaultPresetKnobValues[VocoderCh][14] = 0.0f; // barkpull
 80148d0:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
            defaultPresetKnobValues[Pitchshift][2] = 0.0f; // f amount
 80148d4:	f8c3 60d0 	str.w	r6, [r3, #208]	; 0xd0
            defaultPresetKnobValues[Vocoder][1] = 0.5f; // warp factor
 80148d8:	605a      	str	r2, [r3, #4]
            defaultPresetKnobValues[Vocoder][6] = 0.5f; // tilt
 80148da:	619a      	str	r2, [r3, #24]
            defaultPresetKnobValues[Vocoder][7] = 0.5f; // pulse width
 80148dc:	61da      	str	r2, [r3, #28]
            defaultPresetKnobValues[Vocoder][8] = 0.5f; // pulse shape
 80148de:	621a      	str	r2, [r3, #32]
            defaultPresetKnobValues[VocoderCh][1] = 0.5f; // warp factor
 80148e0:	669a      	str	r2, [r3, #104]	; 0x68
            defaultPresetKnobValues[VocoderCh][3] = 0.5f; //band width
 80148e2:	671a      	str	r2, [r3, #112]	; 0x70
            defaultPresetKnobValues[VocoderCh][6] = 0.5f; // pulse length
 80148e4:	67da      	str	r2, [r3, #124]	; 0x7c
            defaultPresetKnobValues[VocoderCh][7] = 0.5f; // pulse width
 80148e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            defaultPresetKnobValues[VocoderCh][10] = 0.5f;// squish
 80148ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            defaultPresetKnobValues[VocoderCh][11] = 0.5f; // offset
 80148ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            defaultPresetKnobValues[VocoderCh][12] = 0.5f; // tilt
 80148f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            defaultPresetKnobValues[Pitchshift][0] = 0.5f; // pitch
 80148f6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
            defaultPresetKnobValues[Pitchshift][1] = 0.5f; // fine pitch
 80148fa:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            defaultPresetKnobValues[Pitchshift][3] = 0.5f; // formant
 80148fe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
            defaultPresetKnobValues[Pitchshift][4] = 0.5f; //range
 8014902:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            defaultPresetKnobValues[Pitchshift][7] = 0.25f;
 8014906:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
            defaultPresetKnobValues[SamplerAutoGrab][0] = 0.95f; // thresh
 801490a:	f8c3 02bc 	str.w	r0, [r3, #700]	; 0x2bc
            defaultPresetKnobValues[AutotunePoly][2] = 0.1f;
 801490e:	48a7      	ldr	r0, [pc, #668]	; (8014bac <initGlobalSFXObjects+0x404>)
            defaultPresetKnobValues[Pitchshift][8] = 0.25f;
 8014910:	f8c3 10e8 	str.w	r1, [r3, #232]	; 0xe8
            defaultPresetKnobValues[Pitchshift][9] = 0.25f;
 8014914:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
            defaultPresetKnobValues[AutotuneMono][1] = 1.0f; // amount
 8014918:	f8c3 4130 	str.w	r4, [r3, #304]	; 0x130
            defaultPresetKnobValues[AutotuneMono][3] = 1.0f; // leap allow
 801491c:	f8c3 4138 	str.w	r4, [r3, #312]	; 0x138
            defaultPresetKnobValues[AutotuneMono][4] = 0.25f; // hysteresis
 8014920:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
            defaultPresetKnobValues[AutotunePoly][0] = 1.0f; // fidelity thresh
 8014924:	f8c3 4190 	str.w	r4, [r3, #400]	; 0x190
            defaultPresetKnobValues[SamplerButtonPress][1] = 1.0f; // end
 8014928:	f8c3 41f8 	str.w	r4, [r3, #504]	; 0x1f8
            defaultPresetKnobValues[SamplerButtonPress][4] = 0.4f;//crossfade
 801492c:	f8c3 7204 	str.w	r7, [r3, #516]	; 0x204
            defaultPresetKnobValues[SamplerKeyboard][1] = 1.0f; // end
 8014930:	f8c3 425c 	str.w	r4, [r3, #604]	; 0x25c
            defaultPresetKnobValues[SamplerKeyboard][5] = 0.4f;//crossfade
 8014934:	f8c3 726c 	str.w	r7, [r3, #620]	; 0x26c
            defaultPresetKnobValues[SamplerAutoGrab][3] = 0.25f; // crossfade
 8014938:	f8c3 12c8 	str.w	r1, [r3, #712]	; 0x2c8
            defaultPresetKnobValues[SamplerButtonPress][2] = 0.75f; // speed
 801493c:	f8c3 e1fc 	str.w	lr, [r3, #508]	; 0x1fc
            defaultPresetKnobValues[AutotunePoly][2] = 0.1f;
 8014940:	f8c3 0198 	str.w	r0, [r3, #408]	; 0x198
            defaultPresetKnobValues[SamplerKeyboard][2] = 0.75f; // speed
 8014944:	f8c3 e260 	str.w	lr, [r3, #608]	; 0x260
            defaultPresetKnobValues[SamplerAutoGrab][2] = 0.75f; // speed
 8014948:	f8c3 e2c4 	str.w	lr, [r3, #708]	; 0x2c4
            defaultPresetKnobValues[AutotuneMono][0] = 0.0f; // pickiness
 801494c:	f8c3 612c 	str.w	r6, [r3, #300]	; 0x12c
            defaultPresetKnobValues[AutotuneMono][2] = 0.5f; // speed
 8014950:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            defaultPresetKnobValues[AutotunePoly][1] = 0.5f;
 8014954:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
            defaultPresetKnobValues[AutotunePoly][3] = 0.0f;
 8014958:	f8c3 619c 	str.w	r6, [r3, #412]	; 0x19c
            defaultPresetKnobValues[AutotunePoly][4] = 0.0f;
 801495c:	f8c3 61a0 	str.w	r6, [r3, #416]	; 0x1a0
            defaultPresetKnobValues[SamplerButtonPress][0] = 0.0f; // start
 8014960:	f8c3 61f4 	str.w	r6, [r3, #500]	; 0x1f4
            defaultPresetKnobValues[SamplerButtonPress][3] = 0.5f; // speed mult
 8014964:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
            defaultPresetKnobValues[SamplerKeyboard][0] = 0.0f; // start
 8014968:	f8c3 6258 	str.w	r6, [r3, #600]	; 0x258
            defaultPresetKnobValues[SamplerKeyboard][3] = 0.5f; // speed mult
 801496c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
            defaultPresetKnobValues[SamplerKeyboard][4] = 0.0f; //looping on
 8014970:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
            defaultPresetKnobValues[SamplerKeyboard][6] = 0.0f;//velocity sensitivity
 8014974:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
            defaultPresetKnobValues[SamplerAutoGrab][1] = 0.5f; // window
 8014978:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
            defaultPresetKnobValues[SamplerAutoGrab][4] = 0.0f;
 801497c:	f8c3 62cc 	str.w	r6, [r3, #716]	; 0x2cc
            defaultPresetKnobValues[SamplerAutoGrab][5] = 0.0f; // len rand
 8014980:	f8c3 62d0 	str.w	r6, [r3, #720]	; 0x2d0
            defaultPresetKnobValues[SamplerAutoGrab][6] = 0.0f; // speed rand
 8014984:	f8c3 62d4 	str.w	r6, [r3, #724]	; 0x2d4
            defaultPresetKnobValues[SamplerAutoGrab][7] = 0.0f;
 8014988:	f8c3 62d8 	str.w	r6, [r3, #728]	; 0x2d8
            defaultPresetKnobValues[SamplerAutoGrab][8] = 0.0f;
 801498c:	f8c3 62dc 	str.w	r6, [r3, #732]	; 0x2dc
            defaultPresetKnobValues[Delay][0] = 0.25f; // delayL
 8014990:	f8c9 1000 	str.w	r1, [r9]
            defaultPresetKnobValues[Delay][4] = 0.5f; // feedback
 8014994:	f203 495c 	addw	r9, r3, #1116	; 0x45c
            defaultPresetKnobValues[Delay][3] = 1.0f; // lowpass
 8014998:	f8ca 4000 	str.w	r4, [sl]
            defaultPresetKnobValues[Reverb][1] = 0.5f; // in lowpass
 801499c:	f203 4ab4 	addw	sl, r3, #1204	; 0x4b4
            defaultPresetKnobValues[Wavefolder][3] = 0.75f; // post gain
 80149a0:	f8c3 e390 	str.w	lr, [r3, #912]	; 0x390
            defaultPresetKnobValues[Delay][5] = 1.0f; // post gain
 80149a4:	f503 6e8c 	add.w	lr, r3, #1120	; 0x460
            defaultPresetKnobValues[Delay][1] = 0.25f; // delayR
 80149a8:	f8cb 1000 	str.w	r1, [fp]
            defaultPresetKnobValues[Reverb][0] = 0.5f; // size
 80149ac:	f503 6b96 	add.w	fp, r3, #1200	; 0x4b0
            defaultPresetKnobValues[Delay][5] = 1.0f; // post gain
 80149b0:	f8ce 4000 	str.w	r4, [lr]
            defaultPresetKnobValues[Reverb][3] = 0.5f; // fb lowpass
 80149b4:	f203 4ebc 	addw	lr, r3, #1212	; 0x4bc
            defaultPresetKnobValues[Delay][4] = 0.5f; // feedback
 80149b8:	f8c9 2000 	str.w	r2, [r9]
            defaultPresetKnobValues[Reverb][2] = 0.5f; // in highpass
 80149bc:	f503 6997 	add.w	r9, r3, #1208	; 0x4b8
            defaultPresetKnobValues[Reverb][1] = 0.5f; // in lowpass
 80149c0:	f8ca 2000 	str.w	r2, [sl]
            defaultPresetKnobValues[Reverb2][0] = 0.2f; // size
 80149c4:	f203 5a14 	addw	sl, r3, #1300	; 0x514
            defaultPresetKnobValues[Reverb][0] = 0.5f; // size
 80149c8:	f8cb 2000 	str.w	r2, [fp]
            defaultPresetKnobValues[Reverb][4] = 0.5f; // fb gain
 80149cc:	f503 6b98 	add.w	fp, r3, #1216	; 0x4c0
            defaultPresetKnobValues[Reverb2][0] = 0.2f; // size
 80149d0:	f8ca c000 	str.w	ip, [sl]
            defaultPresetKnobValues[Delay][2] = 0.0f; // highpass
 80149d4:	f203 4a54 	addw	sl, r3, #1108	; 0x454
            defaultPresetKnobValues[Reverb][2] = 0.5f; // in highpass
 80149d8:	f8c9 2000 	str.w	r2, [r9]
            defaultPresetKnobValues[Reverb2][1] = 0.5f; // lowpass
 80149dc:	f503 69a3 	add.w	r9, r3, #1304	; 0x518
            defaultPresetKnobValues[Reverb][3] = 0.5f; // fb lowpass
 80149e0:	f8ce 2000 	str.w	r2, [lr]
            defaultPresetKnobValues[Reverb2][2] = 0.5f; // highpass
 80149e4:	f203 5e1c 	addw	lr, r3, #1308	; 0x51c
            defaultPresetKnobValues[Reverb][4] = 0.5f; // fb gain
 80149e8:	f8cb 2000 	str.w	r2, [fp]
            defaultPresetKnobValues[Reverb2][3] = 0.5f; // peak freq
 80149ec:	f503 6ba4 	add.w	fp, r3, #1312	; 0x520
            defaultPresetKnobValues[Reverb2][1] = 0.5f; // lowpass
 80149f0:	f8c9 2000 	str.w	r2, [r9]
            defaultPresetKnobValues[Reverb2][4] = 0.5f; // peak gain
 80149f4:	f203 5924 	addw	r9, r3, #1316	; 0x524
            defaultPresetKnobValues[Reverb2][2] = 0.5f; // highpass
 80149f8:	f8ce 2000 	str.w	r2, [lr]
            defaultPresetKnobValues[LivingString][1] = 0.1f; // detune
 80149fc:	f203 5e7c 	addw	lr, r3, #1404	; 0x57c
            defaultPresetKnobValues[Delay][2] = 0.0f; // highpass
 8014a00:	f8ca 6000 	str.w	r6, [sl]
            defaultPresetKnobValues[LivingString][5] = 0.25f; // prep pos
 8014a04:	f203 5a8c 	addw	sl, r3, #1420	; 0x58c
            defaultPresetKnobValues[Distortion][0] = .25f; // pre gain
 8014a08:	f8c3 1320 	str.w	r1, [r3, #800]	; 0x320
            defaultPresetKnobValues[Distortion][4] = 0.25f; //post gain
 8014a0c:	f8c3 1330 	str.w	r1, [r3, #816]	; 0x330
            defaultPresetKnobValues[Wavefolder][0] = 0.4f; // gain
 8014a10:	f8c3 7384 	str.w	r7, [r3, #900]	; 0x384
            defaultPresetKnobValues[BitCrusher][0] = 0.1f; // quality
 8014a14:	f8c3 03e8 	str.w	r0, [r3, #1000]	; 0x3e8
            defaultPresetKnobValues[SamplerAutoGrab][9] = 0.0f;
 8014a18:	f8c3 62e0 	str.w	r6, [r3, #736]	; 0x2e0
            defaultPresetKnobValues[Distortion][1] = 0.5f; // tilt (low and high shelves, opposing gains)
 8014a1c:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
            defaultPresetKnobValues[Distortion][2] = 0.5f; // mid gain
 8014a20:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
            defaultPresetKnobValues[Distortion][3] = 0.5f; // mid freq
 8014a24:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
            defaultPresetKnobValues[Wavefolder][1] = 0.5f; // offset1
 8014a28:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
            defaultPresetKnobValues[Wavefolder][2] = 0.5f; // offset2
 8014a2c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
            defaultPresetKnobValues[Wavefolder][4] = 0.0f;
 8014a30:	f8c3 6394 	str.w	r6, [r3, #916]	; 0x394
            defaultPresetKnobValues[BitCrusher][1] = 0.5f; // samp ratio
 8014a34:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
            defaultPresetKnobValues[BitCrusher][2] = 0.0f; // rounding
 8014a38:	f8c3 63f0 	str.w	r6, [r3, #1008]	; 0x3f0
            defaultPresetKnobValues[BitCrusher][3] = 0.0f; // operation
 8014a3c:	f8c3 63f4 	str.w	r6, [r3, #1012]	; 0x3f4
            defaultPresetKnobValues[BitCrusher][4] = 0.5f; // post gain
 8014a40:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
            defaultPresetKnobValues[BitCrusher][5] = 0.0f; // pre gain
 8014a44:	f8c3 63fc 	str.w	r6, [r3, #1020]	; 0x3fc
            defaultPresetKnobValues[Reverb2][3] = 0.5f; // peak freq
 8014a48:	f8cb 2000 	str.w	r2, [fp]
            defaultPresetKnobValues[LivingString][4] = 0.5f; // pick pos
 8014a4c:	f503 6bb1 	add.w	fp, r3, #1416	; 0x588
            defaultPresetKnobValues[Reverb2][4] = 0.5f; // peak gain
 8014a50:	f8c9 2000 	str.w	r2, [r9]
            defaultPresetKnobValues[LivingString][9] = 0.5f;
 8014a54:	f203 599c 	addw	r9, r3, #1436	; 0x59c
            defaultPresetKnobValues[LivingString][1] = 0.1f; // detune
 8014a58:	f8ce 0000 	str.w	r0, [lr]
            defaultPresetKnobValues[LivingStringSynth][0] = 0.5f;
 8014a5c:	f203 5edc 	addw	lr, r3, #1500	; 0x5dc
            defaultPresetKnobValues[LivingString][5] = 0.25f; // prep pos
 8014a60:	f8ca 1000 	str.w	r1, [sl]
            defaultPresetKnobValues[LivingStringSynth][2] = .85f; // decay
 8014a64:	f203 5ae4 	addw	sl, r3, #1508	; 0x5e4
            defaultPresetKnobValues[LivingStringSynth][0] = 0.5f;
 8014a68:	f8ce 2000 	str.w	r2, [lr]
            defaultPresetKnobValues[LivingStringSynth][3] = 1.0f; // damping
 8014a6c:	f503 6ebd 	add.w	lr, r3, #1512	; 0x5e8
            defaultPresetKnobValues[LivingStringSynth][2] = .85f; // decay
 8014a70:	f8ca 8000 	str.w	r8, [sl]
            defaultPresetKnobValues[LivingStringSynth][5] = 0.25f; // prep pos
 8014a74:	f503 6abe 	add.w	sl, r3, #1520	; 0x5f0
            defaultPresetKnobValues[LivingString][9] = 0.5f;
 8014a78:	f8c9 2000 	str.w	r2, [r9]
            defaultPresetKnobValues[LivingStringSynth][4] = 0.4f; // pick pos
 8014a7c:	f203 59ec 	addw	r9, r3, #1516	; 0x5ec
            defaultPresetKnobValues[LivingStringSynth][3] = 1.0f; // damping
 8014a80:	f8ce 4000 	str.w	r4, [lr]
            defaultPresetKnobValues[LivingStringSynth][9] = 0.4f; // release time
 8014a84:	f503 64c0 	add.w	r4, r3, #1536	; 0x600
            defaultPresetKnobValues[LivingStringSynth][5] = 0.25f; // prep pos
 8014a88:	f8ca 1000 	str.w	r1, [sl]
            defaultPresetKnobValues[ClassicSynth][0] = 0.5f; // volume
 8014a8c:	f503 6ec8 	add.w	lr, r3, #1600	; 0x640
            defaultPresetKnobValues[ClassicSynth][2] = 0.2f; // detune
 8014a90:	f503 6ac9 	add.w	sl, r3, #1608	; 0x648
            defaultPresetKnobValues[LivingStringSynth][4] = 0.4f; // pick pos
 8014a94:	f8c9 7000 	str.w	r7, [r9]
            defaultPresetKnobValues[ClassicSynth][0] = 0.5f; // volume
 8014a98:	f8ce 2000 	str.w	r2, [lr]
            defaultPresetKnobValues[ClassicSynth][1] = 0.5f; // lowpass
 8014a9c:	f203 6844 	addw	r8, r3, #1604	; 0x644
            defaultPresetKnobValues[ClassicSynth][2] = 0.2f; // detune
 8014aa0:	f8ca c000 	str.w	ip, [sl]
            defaultPresetKnobValues[LivingString][0] = 0.3f; // freq 1
 8014aa4:	f503 69af 	add.w	r9, r3, #1400	; 0x578
            defaultPresetKnobValues[LivingStringSynth][9] = 0.4f; // release time
 8014aa8:	6027      	str	r7, [r4, #0]
            defaultPresetKnobValues[LivingString][2] = 0.3f; // decay
 8014aaa:	f503 6eb0 	add.w	lr, r3, #1408	; 0x580
            defaultPresetKnobValues[LivingString][0] = 0.3f; // freq 1
 8014aae:	4c40      	ldr	r4, [pc, #256]	; (8014bb0 <initGlobalSFXObjects+0x408>)
            defaultPresetKnobValues[LivingString][11] = 0.3f;// freq 3
 8014ab0:	f203 5ca4 	addw	ip, r3, #1444	; 0x5a4
            defaultPresetKnobValues[LivingString][12] = 0.3f;// freq 4
 8014ab4:	f503 67b5 	add.w	r7, r3, #1448	; 0x5a8
            defaultPresetKnobValues[ClassicSynth][1] = 0.5f; // lowpass
 8014ab8:	f8c8 2000 	str.w	r2, [r8]
            defaultPresetKnobValues[LivingString][0] = 0.3f; // freq 1
 8014abc:	f8c9 4000 	str.w	r4, [r9]
            defaultPresetKnobValues[LivingString][10] = 0.3f;// freq 2
 8014ac0:	f503 68b4 	add.w	r8, r3, #1440	; 0x5a0
            defaultPresetKnobValues[LivingString][2] = 0.3f; // decay
 8014ac4:	f8ce 4000 	str.w	r4, [lr]
            defaultPresetKnobValues[LivingString][13] = 0.3f;// freq 5
 8014ac8:	f203 59ac 	addw	r9, r3, #1452	; 0x5ac
            defaultPresetKnobValues[LivingString][11] = 0.3f;// freq 3
 8014acc:	f8cc 4000 	str.w	r4, [ip]
            defaultPresetKnobValues[LivingString][14] = 0.3f;// freq 6
 8014ad0:	f503 6eb6 	add.w	lr, r3, #1456	; 0x5b0
            defaultPresetKnobValues[LivingStringSynth][8] = 0.3f; // feedback volume
 8014ad4:	f203 5afc 	addw	sl, r3, #1532	; 0x5fc
            defaultPresetKnobValues[LivingString][3] = 0.9f; // damping
 8014ad8:	f203 5c84 	addw	ip, r3, #1412	; 0x584
            defaultPresetKnobValues[LivingString][12] = 0.3f;// freq 4
 8014adc:	603c      	str	r4, [r7, #0]
            defaultPresetKnobValues[LivingString][3] = 0.9f; // damping
 8014ade:	4f35      	ldr	r7, [pc, #212]	; (8014bb4 <initGlobalSFXObjects+0x40c>)
            defaultPresetKnobValues[LivingString][10] = 0.3f;// freq 2
 8014ae0:	f8c8 4000 	str.w	r4, [r8]
            defaultPresetKnobValues[LivingString][6] = 0.0f; // prep index
 8014ae4:	f503 68b2 	add.w	r8, r3, #1424	; 0x590
            defaultPresetKnobValues[LivingString][13] = 0.3f;// freq 5
 8014ae8:	f8c9 4000 	str.w	r4, [r9]
            defaultPresetKnobValues[LivingString][7] = 0.0f; // let ring
 8014aec:	f203 5994 	addw	r9, r3, #1428	; 0x594
            defaultPresetKnobValues[LivingString][4] = 0.5f; // pick pos
 8014af0:	f8cb 2000 	str.w	r2, [fp]
            defaultPresetKnobValues[LivingStringSynth][1] = 0.5f;
 8014af4:	f503 6bbc 	add.w	fp, r3, #1504	; 0x5e0
            defaultPresetKnobValues[LivingString][14] = 0.3f;// freq 6
 8014af8:	f8ce 4000 	str.w	r4, [lr]
            defaultPresetKnobValues[LivingString][8] = 0.8f;
 8014afc:	f503 6eb3 	add.w	lr, r3, #1432	; 0x598
            defaultPresetKnobValues[LivingStringSynth][8] = 0.3f; // feedback volume
 8014b00:	f8ca 4000 	str.w	r4, [sl]
            defaultPresetKnobValues[ClassicSynth][5] = 0.0f;
 8014b04:	f203 6454 	addw	r4, r3, #1620	; 0x654
            defaultPresetKnobValues[LivingString][3] = 0.9f; // damping
 8014b08:	f8cc 7000 	str.w	r7, [ip]
            defaultPresetKnobValues[LivingStringSynth][7] = 0.0f; // let ring
 8014b0c:	f503 6cbf 	add.w	ip, r3, #1528	; 0x5f8
            defaultPresetKnobValues[LivingString][8] = 0.8f;
 8014b10:	eddf 7a29 	vldr	s15, [pc, #164]	; 8014bb8 <initGlobalSFXObjects+0x410>
            defaultPresetKnobValues[LivingStringSynth][6] = 0.0f; // prep index
 8014b14:	f203 5af4 	addw	sl, r3, #1524	; 0x5f4
            defaultPresetKnobValues[LivingStringSynth][1] = 0.5f;
 8014b18:	f8cb 2000 	str.w	r2, [fp]
            defaultPresetKnobValues[ClassicSynth][6] = 0.06f;
 8014b1c:	f503 6bcb 	add.w	fp, r3, #1624	; 0x658
            defaultPresetKnobValues[LivingString][6] = 0.0f; // prep index
 8014b20:	f8c8 6000 	str.w	r6, [r8]
            defaultPresetKnobValues[ClassicSynth][3] = 0.0f;
 8014b24:	f203 684c 	addw	r8, r3, #1612	; 0x64c
            defaultPresetKnobValues[LivingString][7] = 0.0f; // let ring
 8014b28:	f8c9 6000 	str.w	r6, [r9]
            defaultPresetKnobValues[ClassicSynth][4] = 0.0f;
 8014b2c:	f503 69ca 	add.w	r9, r3, #1616	; 0x650
            defaultPresetKnobValues[LivingString][8] = 0.8f;
 8014b30:	edce 7a00 	vstr	s15, [lr]
            defaultPresetKnobValues[ClassicSynth][7] = 0.9f;
 8014b34:	f203 6e5c 	addw	lr, r3, #1628	; 0x65c
            defaultPresetKnobValues[LivingStringSynth][7] = 0.0f; // let ring
 8014b38:	f8cc 6000 	str.w	r6, [ip]
            defaultPresetKnobValues[ClassicSynth][8] = 0.1f;
 8014b3c:	f503 6ccc 	add.w	ip, r3, #1632	; 0x660
            defaultPresetKnobValues[ClassicSynth][5] = 0.0f;
 8014b40:	6026      	str	r6, [r4, #0]
            defaultPresetKnobValues[ClassicSynth][6] = 0.06f;
 8014b42:	4c1e      	ldr	r4, [pc, #120]	; (8014bbc <initGlobalSFXObjects+0x414>)
            defaultPresetKnobValues[LivingStringSynth][6] = 0.0f; // prep index
 8014b44:	f8ca 6000 	str.w	r6, [sl]
            defaultPresetKnobValues[ClassicSynth][11] = 0.06f;
 8014b48:	f203 6a6c 	addw	sl, r3, #1644	; 0x66c
            defaultPresetKnobValues[ClassicSynth][6] = 0.06f;
 8014b4c:	f8cb 4000 	str.w	r4, [fp]
            defaultPresetKnobValues[ClassicSynth][3] = 0.0f;
 8014b50:	f8c8 6000 	str.w	r6, [r8]
            defaultPresetKnobValues[ClassicSynth][9] = 0.1f;
 8014b54:	f203 6864 	addw	r8, r3, #1636	; 0x664
 8014b58:	e038      	b.n	8014bcc <initGlobalSFXObjects+0x424>
 8014b5a:	bf00      	nop
 8014b5c:	2000065c 	.word	0x2000065c
 8014b60:	20002a88 	.word	0x20002a88
 8014b64:	20000664 	.word	0x20000664
 8014b68:	2aaaaaab 	.word	0x2aaaaaab
 8014b6c:	2001795c 	.word	0x2001795c
 8014b70:	20018338 	.word	0x20018338
 8014b74:	20017560 	.word	0x20017560
 8014b78:	3ca3d70a 	.word	0x3ca3d70a
 8014b7c:	00000000 	.word	0x00000000
 8014b80:	3c23d70a 	.word	0x3c23d70a
 8014b84:	2001729c 	.word	0x2001729c
 8014b88:	ba51b717 	.word	0xba51b717
 8014b8c:	447a0000 	.word	0x447a0000
 8014b90:	20017084 	.word	0x20017084
 8014b94:	2001797c 	.word	0x2001797c
 8014b98:	3a83126f 	.word	0x3a83126f
 8014b9c:	20001fa8 	.word	0x20001fa8
 8014ba0:	3f28f5c3 	.word	0x3f28f5c3
 8014ba4:	3ecccccd 	.word	0x3ecccccd
 8014ba8:	3f733333 	.word	0x3f733333
 8014bac:	3dcccccd 	.word	0x3dcccccd
 8014bb0:	3e99999a 	.word	0x3e99999a
 8014bb4:	3f666666 	.word	0x3f666666
 8014bb8:	3f4ccccd 	.word	0x3f4ccccd
 8014bbc:	3d75c28f 	.word	0x3d75c28f
 8014bc0:	3ca3d70a 	.word	0x3ca3d70a
 8014bc4:	3e4ccccd 	.word	0x3e4ccccd
 8014bc8:	3f59999a 	.word	0x3f59999a
            defaultPresetKnobValues[ClassicSynth][4] = 0.0f;
 8014bcc:	f8c9 6000 	str.w	r6, [r9]
            defaultPresetKnobValues[ClassicSynth][12] = 0.9f;
 8014bd0:	f503 69ce 	add.w	r9, r3, #1648	; 0x670
            defaultPresetKnobValues[ClassicSynth][7] = 0.9f;
 8014bd4:	f8ce 7000 	str.w	r7, [lr]
            defaultPresetKnobValues[ClassicSynth][13] = 0.1f;
 8014bd8:	f203 6e74 	addw	lr, r3, #1652	; 0x674
            defaultPresetKnobValues[ClassicSynth][8] = 0.1f;
 8014bdc:	f8cc 0000 	str.w	r0, [ip]
            defaultPresetKnobValues[ClassicSynth][14] = 0.1f;
 8014be0:	f503 6ccf 	add.w	ip, r3, #1656	; 0x678
            defaultPresetKnobValues[ClassicSynth][9] = 0.1f;
 8014be4:	f8c8 0000 	str.w	r0, [r8]
            defaultPresetKnobValues[ClassicSynth][16] = 0.06f;
 8014be8:	f503 68d0 	add.w	r8, r3, #1664	; 0x680
            defaultPresetKnobValues[ClassicSynth][13] = 0.1f;
 8014bec:	f8ce 0000 	str.w	r0, [lr]
            defaultPresetKnobValues[ClassicSynth][18] = 0.1f;
 8014bf0:	f503 6ed1 	add.w	lr, r3, #1672	; 0x688
            defaultPresetKnobValues[ClassicSynth][14] = 0.1f;
 8014bf4:	f8cc 0000 	str.w	r0, [ip]
            defaultPresetKnobValues[ClassicSynth][19] = 0.1f;
 8014bf8:	f203 6c8c 	addw	ip, r3, #1676	; 0x68c
            defaultPresetKnobValues[ClassicSynth][16] = 0.06f;
 8014bfc:	f8c8 4000 	str.w	r4, [r8]
            defaultPresetKnobValues[Rhodes][0] = 0.25f;
 8014c00:	f203 68a4 	addw	r8, r3, #1700	; 0x6a4
            defaultPresetKnobValues[ClassicSynth][18] = 0.1f;
 8014c04:	f8ce 0000 	str.w	r0, [lr]
            defaultPresetKnobValues[Rhodes][2] = 0.25f;
 8014c08:	f203 6eac 	addw	lr, r3, #1708	; 0x6ac
            defaultPresetKnobValues[ClassicSynth][19] = 0.1f;
 8014c0c:	f8cc 0000 	str.w	r0, [ip]
            defaultPresetKnobValues[Rhodes][3] = 0.5f;
 8014c10:	f503 6cd6 	add.w	ip, r3, #1712	; 0x6b0
            defaultPresetKnobValues[ClassicSynth][11] = 0.06f;
 8014c14:	f8ca 4000 	str.w	r4, [sl]
            defaultPresetKnobValues[Rhodes][7] = 0.9f;
 8014c18:	f503 60d8 	add.w	r0, r3, #1728	; 0x6c0
            defaultPresetKnobValues[Rhodes][1] = 0.25f;
 8014c1c:	f503 64d5 	add.w	r4, r3, #1704	; 0x6a8
            defaultPresetKnobValues[ClassicSynth][12] = 0.9f;
 8014c20:	f8c9 7000 	str.w	r7, [r9]
            defaultPresetKnobValues[Rhodes][0] = 0.25f;
 8014c24:	f8c8 1000 	str.w	r1, [r8]
            defaultPresetKnobValues[ClassicSynth][17] = 0.9f;
 8014c28:	f203 6984 	addw	r9, r3, #1668	; 0x684
            defaultPresetKnobValues[Rhodes][1] = 0.25f;
 8014c2c:	6021      	str	r1, [r4, #0]
            defaultPresetKnobValues[Rhodes][9] = 0.5f;
 8014c2e:	f503 68d9 	add.w	r8, r3, #1736	; 0x6c8
            defaultPresetKnobValues[Rhodes][2] = 0.25f;
 8014c32:	f8ce 1000 	str.w	r1, [lr]
            defaultPresetKnobValues[Rhodes][12] = 0.9f;
 8014c36:	f203 64d4 	addw	r4, r3, #1748	; 0x6d4
            defaultPresetKnobValues[Rhodes][7] = 0.9f;
 8014c3a:	6007      	str	r7, [r0, #0]
            defaultPresetKnobValues[Rhodes][14] = 0.5f;
 8014c3c:	f203 6edc 	addw	lr, r3, #1756	; 0x6dc
            defaultPresetKnobValues[Rhodes][3] = 0.5f;
 8014c40:	f8cc 2000 	str.w	r2, [ip]
            defaultPresetKnobValues[Rhodes][15] = 0.8f;
 8014c44:	f503 61dc 	add.w	r1, r3, #1760	; 0x6e0
            defaultPresetKnobValues[Rhodes][18] = 0.5f;
 8014c48:	f203 6cec 	addw	ip, r3, #1772	; 0x6ec
            defaultPresetKnobValues[Rhodes][19] = 0.5f;
 8014c4c:	f503 60de 	add.w	r0, r3, #1776	; 0x6f0
            defaultPresetKnobValues[ClassicSynth][17] = 0.9f;
 8014c50:	f8c9 7000 	str.w	r7, [r9]
            defaultPresetKnobValues[Rhodes][8] = 0.1007f;
 8014c54:	f203 6ac4 	addw	sl, r3, #1732	; 0x6c4
            defaultPresetKnobValues[Rhodes][12] = 0.9f;
 8014c58:	6027      	str	r7, [r4, #0]
            defaultPresetKnobValues[ClassicSynth][15] = 0.0f;
 8014c5a:	f203 647c 	addw	r4, r3, #1660	; 0x67c
            defaultPresetKnobValues[Rhodes][9] = 0.5f;
 8014c5e:	f8c8 2000 	str.w	r2, [r8]
            defaultPresetKnobValues[Rhodes][4] = 0.0f; //stereo spread
 8014c62:	f203 67b4 	addw	r7, r3, #1716	; 0x6b4
            defaultPresetKnobValues[Rhodes][14] = 0.5f;
 8014c66:	f8ce 2000 	str.w	r2, [lr]
            defaultPresetKnobValues[Rhodes][5] = 0.05f;
 8014c6a:	f503 68d7 	add.w	r8, r3, #1720	; 0x6b8
            defaultPresetKnobValues[Rhodes][6] = 0.05f;
 8014c6e:	f203 6ebc 	addw	lr, r3, #1724	; 0x6bc
            defaultPresetKnobValues[Rhodes][18] = 0.5f;
 8014c72:	f8cc 2000 	str.w	r2, [ip]
            defaultPresetKnobValues[Rhodes][19] = 0.5f;
 8014c76:	6002      	str	r2, [r0, #0]
            defaultPresetKnobValues[Rhodes][10] = 0.05f;
 8014c78:	f203 6ccc 	addw	ip, r3, #1740	; 0x6cc
            defaultPresetKnobValues[Rhodes][11] = 0.05f;
 8014c7c:	f503 60da 	add.w	r0, r3, #1744	; 0x6d0
            defaultPresetKnobValues[Rhodes][15] = 0.8f;
 8014c80:	edc1 7a00 	vstr	s15, [r1]
            defaultPresetKnobValues[Rhodes][5] = 0.05f;
 8014c84:	4920      	ldr	r1, [pc, #128]	; (8014d08 <initGlobalSFXObjects+0x560>)
            defaultPresetKnobValues[ClassicSynth][10] = 0.0f;
 8014c86:	f503 69cd 	add.w	r9, r3, #1640	; 0x668
            defaultPresetKnobValues[ClassicSynth][15] = 0.0f;
 8014c8a:	6026      	str	r6, [r4, #0]
            defaultPresetKnobValues[Rhodes][13] = 0.1007f;
 8014c8c:	f503 64db 	add.w	r4, r3, #1752	; 0x6d8
            defaultPresetKnobValues[Rhodes][4] = 0.0f; //stereo spread
 8014c90:	603e      	str	r6, [r7, #0]
            defaultPresetKnobValues[Rhodes][16] = 0.6f;
 8014c92:	f203 67e4 	addw	r7, r3, #1764	; 0x6e4
            defaultPresetKnobValues[Rhodes][5] = 0.05f;
 8014c96:	f8c8 1000 	str.w	r1, [r8]
            defaultPresetKnobValues[Rhodes][20] = 0.5f;
 8014c9a:	f203 68f4 	addw	r8, r3, #1780	; 0x6f4
            defaultPresetKnobValues[Rhodes][6] = 0.05f;
 8014c9e:	f8ce 1000 	str.w	r1, [lr]
            defaultPresetKnobValues[Rhodes][21] = 0.0f;
 8014ca2:	f503 6edf 	add.w	lr, r3, #1784	; 0x6f8
            defaultPresetKnobValues[Rhodes][10] = 0.05f;
 8014ca6:	f8cc 1000 	str.w	r1, [ip]
            defaultPresetKnobValues[Rhodes][22] = 0.00f;
 8014caa:	f203 6cfc 	addw	ip, r3, #1788	; 0x6fc
            defaultPresetKnobValues[Rhodes][11] = 0.05f;
 8014cae:	6001      	str	r1, [r0, #0]
            defaultPresetKnobValues[Rhodes][23] = 0.00f;
 8014cb0:	f503 60e0 	add.w	r0, r3, #1792	; 0x700
            defaultPresetKnobValues[Rhodes][8] = 0.1007f;
 8014cb4:	4915      	ldr	r1, [pc, #84]	; (8014d0c <initGlobalSFXObjects+0x564>)
 8014cb6:	4d16      	ldr	r5, [pc, #88]	; (8014d10 <initGlobalSFXObjects+0x568>)
            defaultPresetKnobValues[Rhodes][16] = 0.6f;
 8014cb8:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8014d18 <initGlobalSFXObjects+0x570>
            defaultPresetKnobValues[ClassicSynth][10] = 0.0f;
 8014cbc:	f8c9 6000 	str.w	r6, [r9]
            defaultPresetKnobValues[Rhodes][17] = 0.7f;
 8014cc0:	f503 69dd 	add.w	r9, r3, #1768	; 0x6e8
            defaultPresetKnobValues[Rhodes][13] = 0.1007f;
 8014cc4:	6021      	str	r1, [r4, #0]
 8014cc6:	461c      	mov	r4, r3
            defaultPresetKnobValues[Rhodes][8] = 0.1007f;
 8014cc8:	f8ca 1000 	str.w	r1, [sl]
            defaultPresetKnobValues[Rhodes][24] = 0.00f;
 8014ccc:	f203 7104 	addw	r1, r3, #1796	; 0x704
            defaultPresetKnobValues[Rhodes][16] = 0.6f;
 8014cd0:	f8c7 b000 	str.w	fp, [r7]
 8014cd4:	f505 67e1 	add.w	r7, r5, #1800	; 0x708
            defaultPresetKnobValues[Rhodes][17] = 0.7f;
 8014cd8:	4b0e      	ldr	r3, [pc, #56]	; (8014d14 <initGlobalSFXObjects+0x56c>)
 8014cda:	f8c9 3000 	str.w	r3, [r9]
            defaultPresetKnobValues[Rhodes][20] = 0.5f;
 8014cde:	f8c8 2000 	str.w	r2, [r8]
            defaultPresetKnobValues[Rhodes][21] = 0.0f;
 8014ce2:	f8ce 6000 	str.w	r6, [lr]
            defaultPresetKnobValues[Rhodes][22] = 0.00f;
 8014ce6:	f8cc 6000 	str.w	r6, [ip]
            defaultPresetKnobValues[Rhodes][23] = 0.00f;
 8014cea:	6006      	str	r6, [r0, #0]
            defaultPresetKnobValues[Rhodes][24] = 0.00f;
 8014cec:	600e      	str	r6, [r1, #0]
 8014cee:	4628      	mov	r0, r5
 8014cf0:	3564      	adds	r5, #100	; 0x64
 8014cf2:	4621      	mov	r1, r4
 8014cf4:	2264      	movs	r2, #100	; 0x64
 8014cf6:	f012 f8d5 	bl	8026ea4 <memcpy>
            for (int p = 0; p < PresetNil; p++)
 8014cfa:	42af      	cmp	r7, r5
 8014cfc:	f104 0464 	add.w	r4, r4, #100	; 0x64
 8014d00:	d1f5      	bne.n	8014cee <initGlobalSFXObjects+0x546>
        }
 8014d02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d06:	bf00      	nop
 8014d08:	3d4ccccd 	.word	0x3d4ccccd
 8014d0c:	3dce3bcd 	.word	0x3dce3bcd
 8014d10:	20002d50 	.word	0x20002d50
 8014d14:	3f333333 	.word	0x3f333333
 8014d18:	3f19999a 	.word	0x3f19999a

08014d1c <SFXVocoderAlloc>:
        {
 8014d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            tTalkboxFloat_initToPool(&vocoder, 1024,  &smallPool);
 8014d20:	4a3a      	ldr	r2, [pc, #232]	; (8014e0c <SFXVocoderAlloc+0xf0>)
 8014d22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014d26:	483a      	ldr	r0, [pc, #232]	; (8014e10 <SFXVocoderAlloc+0xf4>)
            tHighpass_initToPool(&noiseHP, 4500.0f, &smallPool);
 8014d28:	2400      	movs	r4, #0
            tSimplePoly_setNumVoices(&poly, numVoices);
 8014d2a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8014e58 <SFXVocoderAlloc+0x13c>
 8014d2e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8014e5c <SFXVocoderAlloc+0x140>
 8014d32:	4f38      	ldr	r7, [pc, #224]	; (8014e14 <SFXVocoderAlloc+0xf8>)
                tSawtooth_initToPool(&osc[i], &smallPool);
 8014d34:	4e35      	ldr	r6, [pc, #212]	; (8014e0c <SFXVocoderAlloc+0xf0>)
        {
 8014d36:	ed2d 8b02 	vpush	{d8}
            tTalkboxFloat_initToPool(&vocoder, 1024,  &smallPool);
 8014d3a:	f00b fadb 	bl	80202f4 <tTalkboxFloat_initToPool>
            tTalkboxFloat_setWarpOn(&vocoder, 1);
 8014d3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014d42:	4833      	ldr	r0, [pc, #204]	; (8014e10 <SFXVocoderAlloc+0xf4>)
 8014d44:	f00b fd8a 	bl	802085c <tTalkboxFloat_setWarpOn>
            tNoise_initToPool(&vocoderNoise, WhiteNoise, &smallPool);
 8014d48:	4a30      	ldr	r2, [pc, #192]	; (8014e0c <SFXVocoderAlloc+0xf0>)
 8014d4a:	4621      	mov	r1, r4
 8014d4c:	4832      	ldr	r0, [pc, #200]	; (8014e18 <SFXVocoderAlloc+0xfc>)
 8014d4e:	f00f ffaf 	bl	8024cb0 <tNoise_initToPool>
            tZeroCrossing_initToPool(&zerox, 16, &smallPool);
 8014d52:	4a2e      	ldr	r2, [pc, #184]	; (8014e0c <SFXVocoderAlloc+0xf0>)
 8014d54:	2110      	movs	r1, #16
 8014d56:	4831      	ldr	r0, [pc, #196]	; (8014e1c <SFXVocoderAlloc+0x100>)
 8014d58:	f009 fd38 	bl	801e7cc <tZeroCrossing_initToPool>
            tSimplePoly_setNumVoices(&poly, numVoices);
 8014d5c:	f899 1000 	ldrb.w	r1, [r9]
 8014d60:	482f      	ldr	r0, [pc, #188]	; (8014e20 <SFXVocoderAlloc+0x104>)
 8014d62:	f00f fe31 	bl	80249c8 <tSimplePoly_setNumVoices>
            tExpSmooth_initToPool(&noiseRamp, 0.0f, 0.005f, &smallPool);
 8014d66:	4929      	ldr	r1, [pc, #164]	; (8014e0c <SFXVocoderAlloc+0xf0>)
 8014d68:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8014e24 <SFXVocoderAlloc+0x108>
 8014d6c:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8014e28 <SFXVocoderAlloc+0x10c>
 8014d70:	482e      	ldr	r0, [pc, #184]	; (8014e2c <SFXVocoderAlloc+0x110>)
 8014d72:	f00d faf9 	bl	8022368 <tExpSmooth_initToPool>
            tVZFilter_initToPool(&shelf1, Lowshelf, 80.0f, 6.0f, &smallPool);
 8014d76:	4a25      	ldr	r2, [pc, #148]	; (8014e0c <SFXVocoderAlloc+0xf0>)
 8014d78:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8014d7c:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8014e30 <SFXVocoderAlloc+0x114>
 8014d80:	2106      	movs	r1, #6
 8014d82:	482c      	ldr	r0, [pc, #176]	; (8014e34 <SFXVocoderAlloc+0x118>)
 8014d84:	f00d fe7e 	bl	8022a84 <tVZFilter_initToPool>
            tVZFilter_initToPool(&shelf2, Highshelf, 12000.0f, 6.0f, &smallPool);
 8014d88:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8014d8c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8014e38 <SFXVocoderAlloc+0x11c>
 8014d90:	2107      	movs	r1, #7
 8014d92:	4a1e      	ldr	r2, [pc, #120]	; (8014e0c <SFXVocoderAlloc+0xf0>)
 8014d94:	4829      	ldr	r0, [pc, #164]	; (8014e3c <SFXVocoderAlloc+0x120>)
 8014d96:	f00d fe75 	bl	8022a84 <tVZFilter_initToPool>
                tRosenbergGlottalPulse_setOpenLengthAndPulseLength(&glottal[i], 0.3f, 0.4f);
 8014d9a:	eddf 8a29 	vldr	s17, [pc, #164]	; 8014e40 <SFXVocoderAlloc+0x124>
            tNoise_initToPool(&breathNoise, WhiteNoise, &smallPool);
 8014d9e:	4a1b      	ldr	r2, [pc, #108]	; (8014e0c <SFXVocoderAlloc+0xf0>)
 8014da0:	4621      	mov	r1, r4
 8014da2:	4828      	ldr	r0, [pc, #160]	; (8014e44 <SFXVocoderAlloc+0x128>)
                tRosenbergGlottalPulse_setOpenLengthAndPulseLength(&glottal[i], 0.3f, 0.4f);
 8014da4:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8014e48 <SFXVocoderAlloc+0x12c>
            tNoise_initToPool(&breathNoise, WhiteNoise, &smallPool);
 8014da8:	f00f ff82 	bl	8024cb0 <tNoise_initToPool>
            tHighpass_initToPool(&noiseHP, 4500.0f, &smallPool);
 8014dac:	4917      	ldr	r1, [pc, #92]	; (8014e0c <SFXVocoderAlloc+0xf0>)
 8014dae:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8014e4c <SFXVocoderAlloc+0x130>
 8014db2:	4827      	ldr	r0, [pc, #156]	; (8014e50 <SFXVocoderAlloc+0x134>)
 8014db4:	f00d fe22 	bl	80229fc <tHighpass_initToPool>
 8014db8:	193d      	adds	r5, r7, r4
                tSawtooth_initToPool(&osc[i], &smallPool);
 8014dba:	eb08 0004 	add.w	r0, r8, r4
 8014dbe:	4631      	mov	r1, r6
 8014dc0:	3404      	adds	r4, #4
 8014dc2:	f00f febf 	bl	8024b44 <tSawtooth_initToPool>
                tRosenbergGlottalPulse_initToPool(&glottal[i], &smallPool);
 8014dc6:	4628      	mov	r0, r5
 8014dc8:	4631      	mov	r1, r6
 8014dca:	f00b fd53 	bl	8020874 <tRosenbergGlottalPulse_initToPool>
                tRosenbergGlottalPulse_setOpenLengthAndPulseLength(&glottal[i], 0.3f, 0.4f);
 8014dce:	eef0 0a68 	vmov.f32	s1, s17
 8014dd2:	eeb0 0a48 	vmov.f32	s0, s16
 8014dd6:	4628      	mov	r0, r5
 8014dd8:	f00b fe66 	bl	8020aa8 <tRosenbergGlottalPulse_setOpenLengthAndPulseLength>
            for (int i = 0; i < NUM_VOC_VOICES; i++)
 8014ddc:	2c20      	cmp	r4, #32
 8014dde:	d1eb      	bne.n	8014db8 <SFXVocoderAlloc+0x9c>
            setLED_A(numVoices == 1);
 8014de0:	f899 0000 	ldrb.w	r0, [r9]
            setLED_B(internalExternal);
 8014de4:	4c1b      	ldr	r4, [pc, #108]	; (8014e54 <SFXVocoderAlloc+0x138>)
            setLED_A(numVoices == 1);
 8014de6:	f1a0 0001 	sub.w	r0, r0, #1
 8014dea:	fab0 f080 	clz	r0, r0
 8014dee:	0940      	lsrs	r0, r0, #5
 8014df0:	f7fe fde6 	bl	80139c0 <setLED_A>
            setLED_B(internalExternal);
 8014df4:	7820      	ldrb	r0, [r4, #0]
 8014df6:	f7fe fdf1 	bl	80139dc <setLED_B>
            vocFreezeLPC = 0;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	6063      	str	r3, [r4, #4]
            setLED_C(vocFreezeLPC);
 8014dfe:	4618      	mov	r0, r3
        }
 8014e00:	ecbd 8b02 	vpop	{d8}
 8014e04:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            setLED_C(vocFreezeLPC);
 8014e08:	f7fe bdf6 	b.w	80139f8 <setLED_C>
 8014e0c:	20018338 	.word	0x20018338
 8014e10:	20018180 	.word	0x20018180
 8014e14:	20002888 	.word	0x20002888
 8014e18:	200034a4 	.word	0x200034a4
 8014e1c:	200176d0 	.word	0x200176d0
 8014e20:	20017560 	.word	0x20017560
 8014e24:	3ba3d70a 	.word	0x3ba3d70a
 8014e28:	00000000 	.word	0x00000000
 8014e2c:	20018268 	.word	0x20018268
 8014e30:	42a00000 	.word	0x42a00000
 8014e34:	2001753c 	.word	0x2001753c
 8014e38:	463b8000 	.word	0x463b8000
 8014e3c:	20017464 	.word	0x20017464
 8014e40:	3ecccccd 	.word	0x3ecccccd
 8014e44:	20002858 	.word	0x20002858
 8014e48:	3e99999a 	.word	0x3e99999a
 8014e4c:	458ca000 	.word	0x458ca000
 8014e50:	2000349c 	.word	0x2000349c
 8014e54:	20000548 	.word	0x20000548
 8014e58:	20000040 	.word	0x20000040
 8014e5c:	2001731c 	.word	0x2001731c

08014e60 <SFXVocoderFrame>:
        {
 8014e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8014e64:	4c84      	ldr	r4, [pc, #528]	; (8015078 <SFXVocoderFrame+0x218>)
        {
 8014e66:	ed2d 8b02 	vpush	{d8}
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8014e6a:	7d23      	ldrb	r3, [r4, #20]
 8014e6c:	2b01      	cmp	r3, #1
 8014e6e:	d113      	bne.n	8014e98 <SFXVocoderFrame+0x38>
                numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8014e70:	4d82      	ldr	r5, [pc, #520]	; (801507c <SFXVocoderFrame+0x21c>)
                tSimplePoly_setNumVoices(&poly, numVoices);
 8014e72:	4883      	ldr	r0, [pc, #524]	; (8015080 <SFXVocoderFrame+0x220>)
                numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8014e74:	782a      	ldrb	r2, [r5, #0]
 8014e76:	2a01      	cmp	r2, #1
 8014e78:	bf98      	it	ls
 8014e7a:	2308      	movls	r3, #8
                tSimplePoly_setNumVoices(&poly, numVoices);
 8014e7c:	4619      	mov	r1, r3
                numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8014e7e:	702b      	strb	r3, [r5, #0]
                tSimplePoly_setNumVoices(&poly, numVoices);
 8014e80:	f00f fda2 	bl	80249c8 <tSimplePoly_setNumVoices>
                setLED_A(numVoices == 1);
 8014e84:	7828      	ldrb	r0, [r5, #0]
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8014e86:	2300      	movs	r3, #0
                setLED_A(numVoices == 1);
 8014e88:	f1a0 0001 	sub.w	r0, r0, #1
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8014e8c:	7523      	strb	r3, [r4, #20]
                setLED_A(numVoices == 1);
 8014e8e:	fab0 f080 	clz	r0, r0
 8014e92:	0940      	lsrs	r0, r0, #5
 8014e94:	f7fe fd94 	bl	80139c0 <setLED_A>
            if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 8014e98:	7e23      	ldrb	r3, [r4, #24]
 8014e9a:	2b01      	cmp	r3, #1
 8014e9c:	f000 80e0 	beq.w	8015060 <SFXVocoderFrame+0x200>
            if (buttonActionsSFX[ButtonC][ActionPress] == 1)
 8014ea0:	7f23      	ldrb	r3, [r4, #28]
 8014ea2:	2b01      	cmp	r3, #1
 8014ea4:	f000 80c9 	beq.w	801503a <SFXVocoderFrame+0x1da>
            displayValues[0] = presetKnobValues[Vocoder][0]; //vocoder volume
 8014ea8:	4b76      	ldr	r3, [pc, #472]	; (8015084 <SFXVocoderFrame+0x224>)
            displayValues[6] = (presetKnobValues[Vocoder][6] * 30.0f) - 15.0f;; //tilt filter
 8014eaa:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
            displayValues[1] = (presetKnobValues[Vocoder][1] * 0.4f) - 0.2f; //warp factor
 8014eae:	eddf 6a76 	vldr	s13, [pc, #472]	; 8015088 <SFXVocoderFrame+0x228>
            displayValues[6] = (presetKnobValues[Vocoder][6] * 30.0f) - 15.0f;; //tilt filter
 8014eb2:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
            displayValues[1] = (presetKnobValues[Vocoder][1] * 0.4f) - 0.2f; //warp factor
 8014eb6:	ed93 5a01 	vldr	s10, [r3, #4]
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8014eba:	2400      	movs	r4, #0
            displayValues[1] = (presetKnobValues[Vocoder][1] * 0.4f) - 0.2f; //warp factor
 8014ebc:	eddf 7a73 	vldr	s15, [pc, #460]	; 801508c <SFXVocoderFrame+0x22c>
            displayValues[6] = (presetKnobValues[Vocoder][6] * 30.0f) - 15.0f;; //tilt filter
 8014ec0:	edd3 5a06 	vldr	s11, [r3, #24]
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8014ec4:	46a1      	mov	r9, r4
            displayValues[1] = (presetKnobValues[Vocoder][1] * 0.4f) - 0.2f; //warp factor
 8014ec6:	eee5 7a26 	vfma.f32	s15, s10, s13
            displayValues[2] = presetKnobValues[Vocoder][2] * 1.1f; //quality
 8014eca:	edd3 6a02 	vldr	s13, [r3, #8]
            displayValues[6] = (presetKnobValues[Vocoder][6] * 30.0f) - 15.0f;; //tilt filter
 8014ece:	eea5 7a86 	vfma.f32	s14, s11, s12
            displayValues[2] = presetKnobValues[Vocoder][2] * 1.1f; //quality
 8014ed2:	ed9f 6a6f 	vldr	s12, [pc, #444]	; 8015090 <SFXVocoderFrame+0x230>
            displayValues[0] = presetKnobValues[Vocoder][0]; //vocoder volume
 8014ed6:	4d6f      	ldr	r5, [pc, #444]	; (8015094 <SFXVocoderFrame+0x234>)
 8014ed8:	6819      	ldr	r1, [r3, #0]
            displayValues[2] = presetKnobValues[Vocoder][2] * 1.1f; //quality
 8014eda:	ee66 6a86 	vmul.f32	s13, s13, s12
            displayValues[3] = presetKnobValues[Vocoder][3]; //crossfade between sawtooth and glottal pulse
 8014ede:	68da      	ldr	r2, [r3, #12]
            displayValues[4] = presetKnobValues[Vocoder][4]; //noise thresh
 8014ee0:	6918      	ldr	r0, [r3, #16]
            displayValues[0] = presetKnobValues[Vocoder][0]; //vocoder volume
 8014ee2:	6029      	str	r1, [r5, #0]
            tTalkboxFloat_setWarpFactor(&vocoder, displayValues[1]);
 8014ee4:	eeb0 0a67 	vmov.f32	s0, s15
            displayValues[5] = presetKnobValues[Vocoder][5]; //breathy
 8014ee8:	6959      	ldr	r1, [r3, #20]
            displayValues[3] = presetKnobValues[Vocoder][3]; //crossfade between sawtooth and glottal pulse
 8014eea:	60ea      	str	r2, [r5, #12]
            displayValues[7] = presetKnobValues[Vocoder][7]; //pulse length
 8014eec:	69da      	ldr	r2, [r3, #28]
            displayValues[8] = presetKnobValues[Vocoder][8]; //open length
 8014eee:	6a1b      	ldr	r3, [r3, #32]
            displayValues[4] = presetKnobValues[Vocoder][4]; //noise thresh
 8014ef0:	6128      	str	r0, [r5, #16]
            tTalkboxFloat_setWarpFactor(&vocoder, displayValues[1]);
 8014ef2:	4869      	ldr	r0, [pc, #420]	; (8015098 <SFXVocoderFrame+0x238>)
            displayValues[1] = (presetKnobValues[Vocoder][1] * 0.4f) - 0.2f; //warp factor
 8014ef4:	edc5 7a01 	vstr	s15, [r5, #4]
            displayValues[2] = presetKnobValues[Vocoder][2] * 1.1f; //quality
 8014ef8:	edc5 6a02 	vstr	s13, [r5, #8]
            displayValues[5] = presetKnobValues[Vocoder][5]; //breathy
 8014efc:	6169      	str	r1, [r5, #20]
            displayValues[6] = (presetKnobValues[Vocoder][6] * 30.0f) - 15.0f;; //tilt filter
 8014efe:	ed85 7a06 	vstr	s14, [r5, #24]
            displayValues[7] = presetKnobValues[Vocoder][7]; //pulse length
 8014f02:	61ea      	str	r2, [r5, #28]
            displayValues[8] = presetKnobValues[Vocoder][8]; //open length
 8014f04:	622b      	str	r3, [r5, #32]
            tTalkboxFloat_setWarpFactor(&vocoder, displayValues[1]);
 8014f06:	f00b fca5 	bl	8020854 <tTalkboxFloat_setWarpFactor>
            tTalkboxFloat_setQuality(&vocoder, displayValues[2]);
 8014f0a:	ed95 0a02 	vldr	s0, [r5, #8]
 8014f0e:	4862      	ldr	r0, [pc, #392]	; (8015098 <SFXVocoderFrame+0x238>)
 8014f10:	f00b fc82 	bl	8020818 <tTalkboxFloat_setQuality>
 8014f14:	4f61      	ldr	r7, [pc, #388]	; (801509c <SFXVocoderFrame+0x23c>)
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8014f16:	4e5a      	ldr	r6, [pc, #360]	; (8015080 <SFXVocoderFrame+0x220>)
                tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 8014f18:	ed9f 8a61 	vldr	s16, [pc, #388]	; 80150a0 <SFXVocoderFrame+0x240>
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8014f1c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80150c8 <SFXVocoderFrame+0x268>
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8014f20:	e04f      	b.n	8014fc2 <SFXVocoderFrame+0x162>
                tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 8014f22:	f00f fd81 	bl	8024a28 <tSimplePoly_getVelocity>
 8014f26:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014f2a:	2800      	cmp	r0, #0
 8014f2c:	4658      	mov	r0, fp
 8014f2e:	fe30 0a08 	vselgt.f32	s0, s0, s16
 8014f32:	f00d fa55 	bl	80223e0 <tExpSmooth_setDest>
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8014f36:	4651      	mov	r1, sl
 8014f38:	4630      	mov	r0, r6
 8014f3a:	f00f fd69 	bl	8024a10 <tSimplePoly_getPitch>
 8014f3e:	ee07 0a90 	vmov	s15, r0
 8014f42:	4a58      	ldr	r2, [pc, #352]	; (80150a4 <SFXVocoderFrame+0x244>)
 8014f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8014f48:	4b57      	ldr	r3, [pc, #348]	; (80150a8 <SFXVocoderFrame+0x248>)
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8014f4a:	ed92 0a02 	vldr	s0, [r2, #8]
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8014f4e:	781a      	ldrb	r2, [r3, #0]
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8014f50:	ee37 7a00 	vadd.f32	s14, s14, s0
            float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8014f54:	4955      	ldr	r1, [pc, #340]	; (80150ac <SFXVocoderFrame+0x24c>)
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8014f56:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8014f5a:	ee17 3a90 	vmov	r3, s15
 8014f5e:	1a9b      	subs	r3, r3, r2
 8014f60:	fb88 2003 	smull	r2, r0, r8, r3
 8014f64:	17da      	asrs	r2, r3, #31
 8014f66:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 8014f6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014f6e:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8014f72:	ee07 3a90 	vmov	s15, r3
 8014f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8014f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f7e:	ee17 3a90 	vmov	r3, s15
 8014f82:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014f86:	ed93 0a00 	vldr	s0, [r3]
            freq[voice] = LEAF_midiToFrequency(tunedNote);
 8014f8a:	ee37 0a00 	vadd.f32	s0, s14, s0
 8014f8e:	f00e ffa5 	bl	8023edc <LEAF_midiToFrequency>
                tSawtooth_setFreq(&osc[i], freq[i]);
 8014f92:	4847      	ldr	r0, [pc, #284]	; (80150b0 <SFXVocoderFrame+0x250>)
            freq[voice] = LEAF_midiToFrequency(tunedNote);
 8014f94:	ed87 0a00 	vstr	s0, [r7]
                tSawtooth_setFreq(&osc[i], freq[i]);
 8014f98:	4420      	add	r0, r4
 8014f9a:	f00f fdfb 	bl	8024b94 <tSawtooth_setFreq>
 8014f9e:	4b45      	ldr	r3, [pc, #276]	; (80150b4 <SFXVocoderFrame+0x254>)
                tRosenbergGlottalPulse_setFreq(&glottal[i], freq[i]);
 8014fa0:	ecb7 0a01 	vldmia	r7!, {s0}
 8014fa4:	eb04 0a03 	add.w	sl, r4, r3
 8014fa8:	3404      	adds	r4, #4
 8014faa:	4650      	mov	r0, sl
 8014fac:	f00b fd52 	bl	8020a54 <tRosenbergGlottalPulse_setFreq>
                tRosenbergGlottalPulse_setOpenLengthAndPulseLength(&glottal[i], displayValues[8] * displayValues[7], displayValues[7]);
 8014fb0:	edd5 0a07 	vldr	s1, [r5, #28]
 8014fb4:	ed95 0a08 	vldr	s0, [r5, #32]
 8014fb8:	4650      	mov	r0, sl
 8014fba:	ee20 0a80 	vmul.f32	s0, s1, s0
 8014fbe:	f00b fd73 	bl	8020aa8 <tRosenbergGlottalPulse_setOpenLengthAndPulseLength>
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8014fc2:	4630      	mov	r0, r6
                tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 8014fc4:	fa5f fa89 	uxtb.w	sl, r9
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8014fc8:	f00f fd06 	bl	80249d8 <tSimplePoly_getNumVoices>
 8014fcc:	4b3a      	ldr	r3, [pc, #232]	; (80150b8 <SFXVocoderFrame+0x258>)
 8014fce:	4548      	cmp	r0, r9
                tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 8014fd0:	4651      	mov	r1, sl
 8014fd2:	4630      	mov	r0, r6
 8014fd4:	eb04 0b03 	add.w	fp, r4, r3
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8014fd8:	f109 0901 	add.w	r9, r9, #1
 8014fdc:	dca1      	bgt.n	8014f22 <SFXVocoderFrame+0xc2>
            if (tSimplePoly_getNumActiveVoices(&poly) != 0)
 8014fde:	4828      	ldr	r0, [pc, #160]	; (8015080 <SFXVocoderFrame+0x220>)
 8014fe0:	f00f fcfe 	bl	80249e0 <tSimplePoly_getNumActiveVoices>
 8014fe4:	b9c0      	cbnz	r0, 8015018 <SFXVocoderFrame+0x1b8>
                tExpSmooth_setDest(&comp, 0.0f);
 8014fe6:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80150a0 <SFXVocoderFrame+0x240>
 8014fea:	4834      	ldr	r0, [pc, #208]	; (80150bc <SFXVocoderFrame+0x25c>)
 8014fec:	f00d f9f8 	bl	80223e0 <tExpSmooth_setDest>
            tVZFilter_setGain(&shelf1, fasterdbtoa(-1.0f * displayValues[6]));
 8014ff0:	ed95 0a06 	vldr	s0, [r5, #24]
 8014ff4:	eeb1 0a40 	vneg.f32	s0, s0
 8014ff8:	f00f f84c 	bl	8024094 <fasterdbtoa>
 8014ffc:	4830      	ldr	r0, [pc, #192]	; (80150c0 <SFXVocoderFrame+0x260>)
 8014ffe:	f00e fb7b 	bl	80236f8 <tVZFilter_setGain>
            tVZFilter_setGain(&shelf2, fastdbtoa(displayValues[6]));
 8015002:	ed95 0a06 	vldr	s0, [r5, #24]
 8015006:	f00f f83d 	bl	8024084 <fastdbtoa>
 801500a:	482e      	ldr	r0, [pc, #184]	; (80150c4 <SFXVocoderFrame+0x264>)
        }
 801500c:	ecbd 8b02 	vpop	{d8}
 8015010:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            tVZFilter_setGain(&shelf2, fastdbtoa(displayValues[6]));
 8015014:	f00e bb70 	b.w	80236f8 <tVZFilter_setGain>
                tExpSmooth_setDest(&comp, sqrtf(1.0f / tSimplePoly_getNumActiveVoices(&poly)));
 8015018:	4819      	ldr	r0, [pc, #100]	; (8015080 <SFXVocoderFrame+0x220>)
 801501a:	f00f fce1 	bl	80249e0 <tSimplePoly_getNumActiveVoices>
 801501e:	ee07 0a90 	vmov	s15, r0
 8015022:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015026:	4825      	ldr	r0, [pc, #148]	; (80150bc <SFXVocoderFrame+0x25c>)
 8015028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801502c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015030:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015034:	f00d f9d4 	bl	80223e0 <tExpSmooth_setDest>
 8015038:	e7da      	b.n	8014ff0 <SFXVocoderFrame+0x190>
                vocFreezeLPC = !vocFreezeLPC;
 801503a:	4d1a      	ldr	r5, [pc, #104]	; (80150a4 <SFXVocoderFrame+0x244>)
                tTalkboxFloat_setFreeze(&vocoder, vocFreezeLPC);
 801503c:	4816      	ldr	r0, [pc, #88]	; (8015098 <SFXVocoderFrame+0x238>)
                vocFreezeLPC = !vocFreezeLPC;
 801503e:	686b      	ldr	r3, [r5, #4]
 8015040:	fab3 f383 	clz	r3, r3
 8015044:	095b      	lsrs	r3, r3, #5
                tTalkboxFloat_setFreeze(&vocoder, vocFreezeLPC);
 8015046:	ee07 3a90 	vmov	s15, r3
                vocFreezeLPC = !vocFreezeLPC;
 801504a:	606b      	str	r3, [r5, #4]
                tTalkboxFloat_setFreeze(&vocoder, vocFreezeLPC);
 801504c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8015050:	f00b fc0a 	bl	8020868 <tTalkboxFloat_setFreeze>
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8015054:	2300      	movs	r3, #0
                setLED_C(vocFreezeLPC);
 8015056:	7928      	ldrb	r0, [r5, #4]
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8015058:	7723      	strb	r3, [r4, #28]
                setLED_C(vocFreezeLPC);
 801505a:	f7fe fccd 	bl	80139f8 <setLED_C>
 801505e:	e723      	b.n	8014ea8 <SFXVocoderFrame+0x48>
                internalExternal = !internalExternal;
 8015060:	4a10      	ldr	r2, [pc, #64]	; (80150a4 <SFXVocoderFrame+0x244>)
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8015062:	2100      	movs	r1, #0
                internalExternal = !internalExternal;
 8015064:	7813      	ldrb	r3, [r2, #0]
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8015066:	7621      	strb	r1, [r4, #24]
                internalExternal = !internalExternal;
 8015068:	fab3 f383 	clz	r3, r3
 801506c:	095b      	lsrs	r3, r3, #5
                setLED_B(internalExternal);
 801506e:	4618      	mov	r0, r3
                internalExternal = !internalExternal;
 8015070:	7013      	strb	r3, [r2, #0]
                setLED_B(internalExternal);
 8015072:	f7fe fcb3 	bl	80139dc <setLED_B>
 8015076:	e713      	b.n	8014ea0 <SFXVocoderFrame+0x40>
 8015078:	20018724 	.word	0x20018724
 801507c:	20000040 	.word	0x20000040
 8015080:	20017560 	.word	0x20017560
 8015084:	20002d50 	.word	0x20002d50
 8015088:	3ecccccd 	.word	0x3ecccccd
 801508c:	be4ccccd 	.word	0xbe4ccccd
 8015090:	3f8ccccd 	.word	0x3f8ccccd
 8015094:	200187d4 	.word	0x200187d4
 8015098:	20018180 	.word	0x20018180
 801509c:	2000347c 	.word	0x2000347c
 80150a0:	00000000 	.word	0x00000000
 80150a4:	20000548 	.word	0x20000548
 80150a8:	2000065c 	.word	0x2000065c
 80150ac:	20000664 	.word	0x20000664
 80150b0:	2001731c 	.word	0x2001731c
 80150b4:	20002888 	.word	0x20002888
 80150b8:	2001795c 	.word	0x2001795c
 80150bc:	2001729c 	.word	0x2001729c
 80150c0:	2001753c 	.word	0x2001753c
 80150c4:	20017464 	.word	0x20017464
 80150c8:	2aaaaaab 	.word	0x2aaaaaab

080150cc <SFXVocoderTick>:
        {
 80150cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            if (internalExternal == 1)
 80150d0:	4c5e      	ldr	r4, [pc, #376]	; (801524c <SFXVocoderTick+0x180>)
        {
 80150d2:	4680      	mov	r8, r0
 80150d4:	ed2d 8b08 	vpush	{d8-d11}
            if (internalExternal == 1)
 80150d8:	7823      	ldrb	r3, [r4, #0]
 80150da:	ed90 8a01 	vldr	s16, [r0, #4]
 80150de:	2b01      	cmp	r3, #1
 80150e0:	f000 80b0 	beq.w	8015244 <SFXVocoderTick+0x178>
                zerocross = tZeroCrossing_tick(&zerox, input[1]);
 80150e4:	eeb0 0a48 	vmov.f32	s0, s16
 80150e8:	4859      	ldr	r0, [pc, #356]	; (8015250 <SFXVocoderTick+0x184>)
 80150ea:	f009 fba5 	bl	801e838 <tZeroCrossing_tick>
                if (!vocChFreeze)
 80150ee:	68e3      	ldr	r3, [r4, #12]
                    tExpSmooth_setDest(&noiseRamp,zerocross > ((displayValues[4])-0.1f));
 80150f0:	4f58      	ldr	r7, [pc, #352]	; (8015254 <SFXVocoderTick+0x188>)
                if (!vocChFreeze)
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	f000 808f 	beq.w	8015216 <SFXVocoderTick+0x14a>
                noiseRampVal = tExpSmooth_tick(&noiseRamp);
 80150f8:	4857      	ldr	r0, [pc, #348]	; (8015258 <SFXVocoderTick+0x18c>)
                for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 80150fa:	2400      	movs	r4, #0
                noiseRampVal = tExpSmooth_tick(&noiseRamp);
 80150fc:	f00d f97a 	bl	80223f4 <tExpSmooth_tick>
 8015100:	eeb0 ba40 	vmov.f32	s22, s0
                float noiseSample = tNoise_tick(&vocoderNoise) * noiseRampVal * 0.6f;
 8015104:	4855      	ldr	r0, [pc, #340]	; (801525c <SFXVocoderTick+0x190>)
                for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015106:	4626      	mov	r6, r4
                float noiseSample = tNoise_tick(&vocoderNoise) * noiseRampVal * 0.6f;
 8015108:	f00f fde8 	bl	8024cdc <tNoise_tick>
 801510c:	eddf 7a54 	vldr	s15, [pc, #336]	; 8015260 <SFXVocoderTick+0x194>
 8015110:	ee20 0a0b 	vmul.f32	s0, s0, s22
            float sample = 0.0f;
 8015114:	ed9f 9a53 	vldr	s18, [pc, #332]	; 8015264 <SFXVocoderTick+0x198>
                for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015118:	f8df a178 	ldr.w	sl, [pc, #376]	; 8015294 <SFXVocoderTick+0x1c8>
                    sample += tSawtooth_tick(&osc[i]) * tExpSmooth_tick(&polyRamp[i]) * (1.0f - displayValues[3]);
 801511c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015298 <SFXVocoderTick+0x1cc>
                float noiseSample = tNoise_tick(&vocoderNoise) * noiseRampVal * 0.6f;
 8015120:	ee20 aa27 	vmul.f32	s20, s0, s15
                    sample += tRosenbergGlottalPulse_tickHQ(&glottal[i]) * tExpSmooth_tick(&polyRamp[i]) * 1.9f * displayValues[3];
 8015124:	eddf aa50 	vldr	s21, [pc, #320]	; 8015268 <SFXVocoderTick+0x19c>
                for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015128:	e026      	b.n	8015178 <SFXVocoderTick+0xac>
 801512a:	4d50      	ldr	r5, [pc, #320]	; (801526c <SFXVocoderTick+0x1a0>)
                    sample += tSawtooth_tick(&osc[i]) * tExpSmooth_tick(&polyRamp[i]) * (1.0f - displayValues[3]);
 801512c:	f00f fd64 	bl	8024bf8 <tSawtooth_tick>
 8015130:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8015134:	4425      	add	r5, r4
 8015136:	eef0 8a40 	vmov.f32	s17, s0
 801513a:	4628      	mov	r0, r5
 801513c:	f00d f95a 	bl	80223f4 <tExpSmooth_tick>
                    sample += tRosenbergGlottalPulse_tickHQ(&glottal[i]) * tExpSmooth_tick(&polyRamp[i]) * 1.9f * displayValues[3];
 8015140:	484b      	ldr	r0, [pc, #300]	; (8015270 <SFXVocoderTick+0x1a4>)
                    sample += tSawtooth_tick(&osc[i]) * tExpSmooth_tick(&polyRamp[i]) * (1.0f - displayValues[3]);
 8015142:	edd7 7a03 	vldr	s15, [r7, #12]
 8015146:	ee68 8a80 	vmul.f32	s17, s17, s0
                    sample += tRosenbergGlottalPulse_tickHQ(&glottal[i]) * tExpSmooth_tick(&polyRamp[i]) * 1.9f * displayValues[3];
 801514a:	4420      	add	r0, r4
 801514c:	3404      	adds	r4, #4
                    sample += tSawtooth_tick(&osc[i]) * tExpSmooth_tick(&polyRamp[i]) * (1.0f - displayValues[3]);
 801514e:	ee38 8a67 	vsub.f32	s16, s16, s15
                    sample += tRosenbergGlottalPulse_tickHQ(&glottal[i]) * tExpSmooth_tick(&polyRamp[i]) * 1.9f * displayValues[3];
 8015152:	f00b fc0f 	bl	8020974 <tRosenbergGlottalPulse_tickHQ>
 8015156:	4628      	mov	r0, r5
 8015158:	eef0 9a40 	vmov.f32	s19, s0
 801515c:	f00d f94a 	bl	80223f4 <tExpSmooth_tick>
 8015160:	edd7 7a03 	vldr	s15, [r7, #12]
 8015164:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8015168:	ee67 7aa9 	vmul.f32	s15, s15, s19
 801516c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015170:	eea8 0a88 	vfma.f32	s0, s17, s16
 8015174:	ee39 9a00 	vadd.f32	s18, s18, s0
                for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015178:	4650      	mov	r0, sl
 801517a:	f00f fc2d 	bl	80249d8 <tSimplePoly_getNumVoices>
 801517e:	42b0      	cmp	r0, r6
                    sample += tSawtooth_tick(&osc[i]) * tExpSmooth_tick(&polyRamp[i]) * (1.0f - displayValues[3]);
 8015180:	eb09 0004 	add.w	r0, r9, r4
                for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015184:	f106 0601 	add.w	r6, r6, #1
 8015188:	dccf      	bgt.n	801512a <SFXVocoderTick+0x5e>
                sample = (sample * (1.0f - (0.3f * displayValues[5])) * (1.0f-noiseRampVal)) + noiseSample;
 801518a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801518e:	ed97 7a05 	vldr	s14, [r7, #20]
 8015192:	eddf 7a38 	vldr	s15, [pc, #224]	; 8015274 <SFXVocoderTick+0x1a8>
                sample += (tHighpass_tick(&noiseHP, tNoise_tick(&breathNoise)) * displayValues[5] * 1.5f);
 8015196:	4838      	ldr	r0, [pc, #224]	; (8015278 <SFXVocoderTick+0x1ac>)
                sample = (sample * (1.0f - (0.3f * displayValues[5])) * (1.0f-noiseRampVal)) + noiseSample;
 8015198:	eeb0 8a40 	vmov.f32	s16, s0
 801519c:	ee30 0a4b 	vsub.f32	s0, s0, s22
 80151a0:	eea7 8a67 	vfms.f32	s16, s14, s15
 80151a4:	ee28 8a00 	vmul.f32	s16, s16, s0
                sample += (tHighpass_tick(&noiseHP, tNoise_tick(&breathNoise)) * displayValues[5] * 1.5f);
 80151a8:	f00f fd98 	bl	8024cdc <tNoise_tick>
 80151ac:	4833      	ldr	r0, [pc, #204]	; (801527c <SFXVocoderTick+0x1b0>)
 80151ae:	f00d fc59 	bl	8022a64 <tHighpass_tick>
 80151b2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80151b6:	edd7 7a05 	vldr	s15, [r7, #20]
                sample *= tExpSmooth_tick(&comp);
 80151ba:	4831      	ldr	r0, [pc, #196]	; (8015280 <SFXVocoderTick+0x1b4>)
                sample += (tHighpass_tick(&noiseHP, tNoise_tick(&breathNoise)) * displayValues[5] * 1.5f);
 80151bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151c0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80151c4:	eea9 0a08 	vfma.f32	s0, s18, s16
 80151c8:	ee3a aa00 	vadd.f32	s20, s20, s0
                sample *= tExpSmooth_tick(&comp);
 80151cc:	f00d f912 	bl	80223f4 <tExpSmooth_tick>
 80151d0:	ed98 8a01 	vldr	s16, [r8, #4]
 80151d4:	ee2a 0a00 	vmul.f32	s0, s20, s0
            sample = tanhf(sample);
 80151d8:	f012 faa4 	bl	8027724 <tanhf>
            sample = tTalkboxFloat_tick(&vocoder, sample, input[1]);
 80151dc:	eef0 0a48 	vmov.f32	s1, s16
 80151e0:	4828      	ldr	r0, [pc, #160]	; (8015284 <SFXVocoderTick+0x1b8>)
 80151e2:	f00b fa49 	bl	8020678 <tTalkboxFloat_tick>
            sample = tVZFilter_tick(&shelf1, sample); //put it through the low shelf
 80151e6:	4828      	ldr	r0, [pc, #160]	; (8015288 <SFXVocoderTick+0x1bc>)
 80151e8:	f00d fe4c 	bl	8022e84 <tVZFilter_tick>
            sample = tVZFilter_tick(&shelf2, sample); // now put that result through the high shelf
 80151ec:	4827      	ldr	r0, [pc, #156]	; (801528c <SFXVocoderTick+0x1c0>)
 80151ee:	f00d fe49 	bl	8022e84 <tVZFilter_tick>
            sample *= displayValues[0] * 0.6f;
 80151f2:	edd7 7a00 	vldr	s15, [r7]
 80151f6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8015260 <SFXVocoderTick+0x194>
 80151fa:	ee67 7a87 	vmul.f32	s15, s15, s14
            sample = tanhf(sample);
 80151fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015202:	f012 fa8f 	bl	8027724 <tanhf>
            input[0] = sample;
 8015206:	ed88 0a00 	vstr	s0, [r8]
            input[1] = sample;
 801520a:	ed88 0a01 	vstr	s0, [r8, #4]
        }
 801520e:	ecbd 8b08 	vpop	{d8-d11}
 8015212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    tExpSmooth_setDest(&noiseRamp,zerocross > ((displayValues[4])-0.1f));
 8015216:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8015290 <SFXVocoderTick+0x1c4>
 801521a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801521e:	edd7 7a04 	vldr	s15, [r7, #16]
 8015222:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8015264 <SFXVocoderTick+0x198>
 8015226:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801522a:	480b      	ldr	r0, [pc, #44]	; (8015258 <SFXVocoderTick+0x18c>)
 801522c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8015230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015234:	bf54      	ite	pl
 8015236:	eeb0 0a47 	vmovpl.f32	s0, s14
 801523a:	eeb0 0a66 	vmovmi.f32	s0, s13
 801523e:	f00d f8cf 	bl	80223e0 <tExpSmooth_setDest>
 8015242:	e759      	b.n	80150f8 <SFXVocoderTick+0x2c>
                sample = input[0];
 8015244:	ed90 0a00 	vldr	s0, [r0]
 8015248:	4f02      	ldr	r7, [pc, #8]	; (8015254 <SFXVocoderTick+0x188>)
 801524a:	e7c5      	b.n	80151d8 <SFXVocoderTick+0x10c>
 801524c:	20000548 	.word	0x20000548
 8015250:	200176d0 	.word	0x200176d0
 8015254:	200187d4 	.word	0x200187d4
 8015258:	20018268 	.word	0x20018268
 801525c:	200034a4 	.word	0x200034a4
 8015260:	3f19999a 	.word	0x3f19999a
 8015264:	00000000 	.word	0x00000000
 8015268:	3ff33333 	.word	0x3ff33333
 801526c:	2001795c 	.word	0x2001795c
 8015270:	20002888 	.word	0x20002888
 8015274:	3e99999a 	.word	0x3e99999a
 8015278:	20002858 	.word	0x20002858
 801527c:	2000349c 	.word	0x2000349c
 8015280:	2001729c 	.word	0x2001729c
 8015284:	20018180 	.word	0x20018180
 8015288:	2001753c 	.word	0x2001753c
 801528c:	20017464 	.word	0x20017464
 8015290:	3dcccccd 	.word	0x3dcccccd
 8015294:	20017560 	.word	0x20017560
 8015298:	2001731c 	.word	0x2001731c

0801529c <SFXVocoderFree>:
        {
 801529c:	b570      	push	{r4, r5, r6, lr}
            tTalkboxFloat_free(&vocoder);
 801529e:	4812      	ldr	r0, [pc, #72]	; (80152e8 <SFXVocoderFree+0x4c>)
            tVZFilter_free(&shelf2);
 80152a0:	2400      	movs	r4, #0
            tTalkboxFloat_free(&vocoder);
 80152a2:	f00a ff83 	bl	80201ac <tTalkboxFloat_free>
            tNoise_free(&vocoderNoise);
 80152a6:	4811      	ldr	r0, [pc, #68]	; (80152ec <SFXVocoderFree+0x50>)
 80152a8:	f00f fd14 	bl	8024cd4 <tNoise_free>
            tZeroCrossing_free(&zerox);
 80152ac:	4810      	ldr	r0, [pc, #64]	; (80152f0 <SFXVocoderFree+0x54>)
 80152ae:	f009 fab3 	bl	801e818 <tZeroCrossing_free>
            tExpSmooth_free(&noiseRamp);
 80152b2:	4810      	ldr	r0, [pc, #64]	; (80152f4 <SFXVocoderFree+0x58>)
 80152b4:	f00d f87e 	bl	80223b4 <tExpSmooth_free>
            tNoise_free(&breathNoise);
 80152b8:	480f      	ldr	r0, [pc, #60]	; (80152f8 <SFXVocoderFree+0x5c>)
 80152ba:	f00f fd0b 	bl	8024cd4 <tNoise_free>
            tHighpass_free(&noiseHP);
 80152be:	480f      	ldr	r0, [pc, #60]	; (80152fc <SFXVocoderFree+0x60>)
 80152c0:	f00d fbbc 	bl	8022a3c <tHighpass_free>
            tVZFilter_free(&shelf1);
 80152c4:	480e      	ldr	r0, [pc, #56]	; (8015300 <SFXVocoderFree+0x64>)
 80152c6:	f00d fdcf 	bl	8022e68 <tVZFilter_free>
            tVZFilter_free(&shelf2);
 80152ca:	480e      	ldr	r0, [pc, #56]	; (8015304 <SFXVocoderFree+0x68>)
 80152cc:	4e0e      	ldr	r6, [pc, #56]	; (8015308 <SFXVocoderFree+0x6c>)
 80152ce:	4d0f      	ldr	r5, [pc, #60]	; (801530c <SFXVocoderFree+0x70>)
 80152d0:	f00d fdca 	bl	8022e68 <tVZFilter_free>
                tSawtooth_free(&osc[i]);
 80152d4:	1930      	adds	r0, r6, r4
 80152d6:	f00f fc59 	bl	8024b8c <tSawtooth_free>
                tRosenbergGlottalPulse_free(&glottal[i]);
 80152da:	1928      	adds	r0, r5, r4
 80152dc:	3404      	adds	r4, #4
 80152de:	f00b fad9 	bl	8020894 <tRosenbergGlottalPulse_free>
            for (int i = 0; i < NUM_VOC_VOICES; i++)
 80152e2:	2c20      	cmp	r4, #32
 80152e4:	d1f6      	bne.n	80152d4 <SFXVocoderFree+0x38>
        }
 80152e6:	bd70      	pop	{r4, r5, r6, pc}
 80152e8:	20018180 	.word	0x20018180
 80152ec:	200034a4 	.word	0x200034a4
 80152f0:	200176d0 	.word	0x200176d0
 80152f4:	20018268 	.word	0x20018268
 80152f8:	20002858 	.word	0x20002858
 80152fc:	2000349c 	.word	0x2000349c
 8015300:	2001753c 	.word	0x2001753c
 8015304:	20017464 	.word	0x20017464
 8015308:	2001731c 	.word	0x2001731c
 801530c:	20002888 	.word	0x20002888

08015310 <SFXVocoderChAlloc>:
            invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015310:	4bd6      	ldr	r3, [pc, #856]	; (801566c <SFXVocoderChAlloc+0x35c>)
 8015312:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015316:	ed9f 6ad6 	vldr	s12, [pc, #856]	; 8015670 <SFXVocoderChAlloc+0x360>
            displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 801531a:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 801531e:	eddf 6ad5 	vldr	s13, [pc, #852]	; 8015674 <SFXVocoderChAlloc+0x364>
            displayValues[12] = (presetKnobValues[VocoderCh][12] * 2.0f) - 1.0f; //tilt
 8015322:	eebf 5a00 	vmov.f32	s10, #240	; 0xbf800000 -1.0
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015326:	eef2 2a00 	vmov.f32	s5, #32	; 0x41000000  8.0
            displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 801532a:	ed9f 2ad3 	vldr	s4, [pc, #844]	; 8015678 <SFXVocoderChAlloc+0x368>
 801532e:	ed9f 4ad3 	vldr	s8, [pc, #844]	; 801567c <SFXVocoderChAlloc+0x36c>
            tVZFilter_initToPool(&vocodec_highshelf, Highshelf, 6000.0f, 3.0f, &smallPool);
 8015332:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8015336:	2107      	movs	r1, #7
 8015338:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8015680 <SFXVocoderChAlloc+0x370>
        {
 801533c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015340:	ed2d 8b04 	vpush	{d8-d9}
            invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015344:	785a      	ldrb	r2, [r3, #1]
        {
 8015346:	b083      	sub	sp, #12
            displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 8015348:	4bce      	ldr	r3, [pc, #824]	; (8015684 <SFXVocoderChAlloc+0x374>)
            tVZFilter_setGain(&vocodec_highshelf, 4.0f);
 801534a:	2400      	movs	r4, #0
            invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 801534c:	ee07 2a10 	vmov	s14, r2
            displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 8015350:	4acd      	ldr	r2, [pc, #820]	; (8015688 <SFXVocoderChAlloc+0x378>)
            bandWidthInSemitones = 99.0f * invNumberOfVocoderBands;
 8015352:	f8df a3b8 	ldr.w	sl, [pc, #952]	; 801570c <SFXVocoderChAlloc+0x3fc>
            tVZFilter_setGain(&vocodec_highshelf, 4.0f);
 8015356:	f04f 0801 	mov.w	r8, #1
            invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 801535a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 801535e:	edd2 4a1b 	vldr	s9, [r2, #108]	; 0x6c
            displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 8015362:	edd2 5a1c 	vldr	s11, [r2, #112]	; 0x70
            tVZFilter_setGain(&vocodec_highshelf, 4.0f);
 8015366:	4625      	mov	r5, r4
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015368:	ee64 4aa6 	vmul.f32	s9, s9, s13
            bandWidthInSemitones = 99.0f * invNumberOfVocoderBands;
 801536c:	eddf 6ac7 	vldr	s13, [pc, #796]	; 801568c <SFXVocoderChAlloc+0x37c>
            invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015370:	ee37 7a46 	vsub.f32	s14, s14, s12
            displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 8015374:	ed9f 6ac6 	vldr	s12, [pc, #792]	; 8015690 <SFXVocoderChAlloc+0x380>
            displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 8015378:	edd2 1a1a 	vldr	s3, [r2, #104]	; 0x68
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 801537c:	eefc 4ae4 	vcvt.u32.f32	s9, s9
            displayValues[4] = presetKnobValues[VocoderCh][4]; //noise thresh
 8015380:	f8d2 e074 	ldr.w	lr, [r2, #116]	; 0x74
            invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015384:	eec7 3a87 	vdiv.f32	s7, s15, s14
            displayValues[12] = (presetKnobValues[VocoderCh][12] * 2.0f) - 1.0f; //tilt
 8015388:	edd2 7a25 	vldr	s15, [r2, #148]	; 0x94
            bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 801538c:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8015694 <SFXVocoderChAlloc+0x384>
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015390:	edcd 4a01 	vstr	s9, [sp, #4]
 8015394:	f89d 0004 	ldrb.w	r0, [sp, #4]
            displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 8015398:	edd2 4a24 	vldr	s9, [r2, #144]	; 0x90
            displayValues[12] = (presetKnobValues[VocoderCh][12] * 2.0f) - 1.0f; //tilt
 801539c:	eea7 5a83 	vfma.f32	s10, s15, s6
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 80153a0:	ee07 0a90 	vmov	s15, r0
            displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 80153a4:	eea5 6a83 	vfma.f32	s12, s11, s6
            displayValues[10] = presetKnobValues[VocoderCh][10] * 2.0f; //bandsquish
 80153a8:	edd2 5a23 	vldr	s11, [r2, #140]	; 0x8c
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 80153ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 80153b0:	6e50      	ldr	r0, [r2, #100]	; 0x64
            displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 80153b2:	eea1 4a82 	vfma.f32	s8, s3, s4
            displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 80153b6:	ed9f 2ab8 	vldr	s4, [pc, #736]	; 8015698 <SFXVocoderChAlloc+0x388>
            displayValues[5] = presetKnobValues[VocoderCh][5]; //crossfade between sawtooth and glottal pulse
 80153ba:	f8d2 c078 	ldr.w	ip, [r2, #120]	; 0x78
            displayValues[10] = presetKnobValues[VocoderCh][10] * 2.0f; //bandsquish
 80153be:	ee75 5aa5 	vadd.f32	s11, s11, s11
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 80153c2:	ee77 7aa2 	vadd.f32	s15, s15, s5
            displayValues[6] = presetKnobValues[VocoderCh][6]; //pulse width
 80153c6:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
            displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 80153c8:	ee64 4a82 	vmul.f32	s9, s9, s4
            displayValues[7] = presetKnobValues[VocoderCh][7]; //pulse shape
 80153cc:	f8d2 7080 	ldr.w	r7, [r2, #128]	; 0x80
            displayValues[8] = presetKnobValues[VocoderCh][8]; //breathiness
 80153d0:	f8d2 9084 	ldr.w	r9, [r2, #132]	; 0x84
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 80153d4:	edc3 7a02 	vstr	s15, [r3, #8]
            displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 80153d8:	6018      	str	r0, [r3, #0]
            displayValues[4] = presetKnobValues[VocoderCh][4]; //noise thresh
 80153da:	f8c3 e010 	str.w	lr, [r3, #16]
            bandWidthInSemitones = 99.0f * invNumberOfVocoderBands;
 80153de:	ee63 6aa6 	vmul.f32	s13, s7, s13
            displayValues[13] = presetKnobValues[VocoderCh][13]; //stereo
 80153e2:	f8d2 e098 	ldr.w	lr, [r2, #152]	; 0x98
            displayValues[9] = presetKnobValues[VocoderCh][9]; //speed
 80153e6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
            displayValues[5] = presetKnobValues[VocoderCh][5]; //crossfade between sawtooth and glottal pulse
 80153ea:	f8c3 c014 	str.w	ip, [r3, #20]
            bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 80153ee:	ee66 7a87 	vmul.f32	s15, s13, s14
            displayValues[14] = presetKnobValues[VocoderCh][14]; //odd/even
 80153f2:	f8d2 c09c 	ldr.w	ip, [r2, #156]	; 0x9c
            displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 80153f6:	ed83 4a01 	vstr	s8, [r3, #4]
            displayValues[10] = presetKnobValues[VocoderCh][10] * 2.0f; //bandsquish
 80153fa:	edc3 5a0a 	vstr	s11, [r3, #40]	; 0x28
            thisBandwidth = bandWidthInOctaves * myQ;
 80153fe:	ee26 7a27 	vmul.f32	s14, s12, s15
            displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 8015402:	edc3 4a0b 	vstr	s9, [r3, #44]	; 0x2c
            displayValues[12] = (presetKnobValues[VocoderCh][12] * 2.0f) - 1.0f; //tilt
 8015406:	ed83 5a0c 	vstr	s10, [r3, #48]	; 0x30
            displayValues[6] = presetKnobValues[VocoderCh][6]; //pulse width
 801540a:	619e      	str	r6, [r3, #24]
            displayValues[7] = presetKnobValues[VocoderCh][7]; //pulse shape
 801540c:	61df      	str	r7, [r3, #28]
            displayValues[8] = presetKnobValues[VocoderCh][8]; //breathiness
 801540e:	f8c3 9020 	str.w	r9, [r3, #32]
            displayValues[9] = presetKnobValues[VocoderCh][9]; //speed
 8015412:	6258      	str	r0, [r3, #36]	; 0x24
            bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 8015414:	4fa1      	ldr	r7, [pc, #644]	; (801569c <SFXVocoderChAlloc+0x38c>)
            displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 8015416:	ed83 6a03 	vstr	s12, [r3, #12]
            thisBandwidth = bandWidthInOctaves * myQ;
 801541a:	4ea1      	ldr	r6, [pc, #644]	; (80156a0 <SFXVocoderChAlloc+0x390>)
            displayValues[13] = presetKnobValues[VocoderCh][13]; //stereo
 801541c:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
            displayValues[14] = presetKnobValues[VocoderCh][14]; //odd/even
 8015420:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
            invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015424:	4b91      	ldr	r3, [pc, #580]	; (801566c <SFXVocoderChAlloc+0x35c>)
            tVZFilter_initToPool(&vocodec_highshelf, Highshelf, 6000.0f, 3.0f, &smallPool);
 8015426:	4a9f      	ldr	r2, [pc, #636]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 8015428:	489f      	ldr	r0, [pc, #636]	; (80156a8 <SFXVocoderChAlloc+0x398>)
            bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 801542a:	edc7 7a00 	vstr	s15, [r7]
            invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 801542e:	edc3 3a01 	vstr	s7, [r3, #4]
            bandWidthInSemitones = 99.0f * invNumberOfVocoderBands;
 8015432:	edca 6a00 	vstr	s13, [sl]
            thisBandwidth = bandWidthInOctaves * myQ;
 8015436:	ed86 7a00 	vstr	s14, [r6]
            tVZFilter_initToPool(&vocodec_highshelf, Highshelf, 6000.0f, 3.0f, &smallPool);
 801543a:	f00d fb23 	bl	8022a84 <tVZFilter_initToPool>
            tVZFilter_setGain(&vocodec_highshelf, 4.0f);
 801543e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8015442:	4899      	ldr	r0, [pc, #612]	; (80156a8 <SFXVocoderChAlloc+0x398>)
 8015444:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 8015710 <SFXVocoderChAlloc+0x400>
 8015448:	f00e f956 	bl	80236f8 <tVZFilter_setGain>
 801544c:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8015714 <SFXVocoderChAlloc+0x404>
 8015450:	4f96      	ldr	r7, [pc, #600]	; (80156ac <SFXVocoderChAlloc+0x39c>)
                tExpSmooth_initToPool(&envFollowers[i], 0.0f, 0.001f, &smallPool); // factor of .001 is 10 ms?
 8015452:	ed9f 9a97 	vldr	s18, [pc, #604]	; 80156b0 <SFXVocoderChAlloc+0x3a0>
 8015456:	eddf 8a97 	vldr	s17, [pc, #604]	; 80156b4 <SFXVocoderChAlloc+0x3a4>
 801545a:	e004      	b.n	8015466 <SFXVocoderChAlloc+0x156>
 801545c:	3501      	adds	r5, #1
 801545e:	f108 0801 	add.w	r8, r8, #1
 8015462:	3704      	adds	r7, #4
 8015464:	3408      	adds	r4, #8
                float bandFreq = faster_mtof((i * bandWidthInSemitones) + 30.0f); //midinote 28 (41Hz) to midinote 134 (18814Hz) is 106 midinotes, divide that by how many bands to find out how far apart to put the bands
 8015466:	ee07 5a90 	vmov	s15, r5
 801546a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 801546e:	ed9a 7a00 	vldr	s14, [sl]
 8015472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015476:	eea7 0a87 	vfma.f32	s0, s15, s14
 801547a:	f00e fdb3 	bl	8023fe4 <faster_mtof>
                bandGains[i] = 1.0f;
 801547e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
                float bandFreq = faster_mtof((i * bandWidthInSemitones) + 30.0f); //midinote 28 (41Hz) to midinote 134 (18814Hz) is 106 midinotes, divide that by how many bands to find out how far apart to put the bands
 8015482:	eeb0 8a40 	vmov.f32	s16, s0
                    tVZFilter_initToPool(&analysisBands[i][0], BandpassPeak, bandFreq, thisBandwidth, &smallPool);
 8015486:	eb0b 0004 	add.w	r0, fp, r4
 801548a:	4a86      	ldr	r2, [pc, #536]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 801548c:	2103      	movs	r1, #3
                bandGains[i] = 1.0f;
 801548e:	f849 3b04 	str.w	r3, [r9], #4
                if (i == 0)
 8015492:	2d00      	cmp	r5, #0
 8015494:	f000 80bf 	beq.w	8015616 <SFXVocoderChAlloc+0x306>
 8015498:	edd6 7a00 	vldr	s15, [r6]
                else if (i == (MAX_NUM_VOCODER_BANDS-1))
 801549c:	2d17      	cmp	r5, #23
                    tVZFilter_initToPool(&analysisBands[i][0], BandpassPeak, bandFreq, thisBandwidth, &smallPool);
 801549e:	eef0 0a67 	vmov.f32	s1, s15
                else if (i == (MAX_NUM_VOCODER_BANDS-1))
 80154a2:	f000 808f 	beq.w	80155c4 <SFXVocoderChAlloc+0x2b4>
                    tVZFilter_initToPool(&analysisBands[i][0], BandpassPeak, bandFreq, thisBandwidth, &smallPool);
 80154a6:	f00d faed 	bl	8022a84 <tVZFilter_initToPool>
                    tVZFilter_initToPool(&analysisBands[i][1], BandpassPeak, bandFreq, thisBandwidth, &smallPool);
 80154aa:	4b83      	ldr	r3, [pc, #524]	; (80156b8 <SFXVocoderChAlloc+0x3a8>)
 80154ac:	4a7d      	ldr	r2, [pc, #500]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 80154ae:	eeb0 0a48 	vmov.f32	s0, s16
 80154b2:	1918      	adds	r0, r3, r4
 80154b4:	edd6 0a00 	vldr	s1, [r6]
 80154b8:	2103      	movs	r1, #3
 80154ba:	f00d fae3 	bl	8022a84 <tVZFilter_initToPool>
                    tVZFilter_initToPool(&synthesisBands[i][0], BandpassPeak, bandFreq, thisBandwidth, &smallPool);
 80154be:	4b7f      	ldr	r3, [pc, #508]	; (80156bc <SFXVocoderChAlloc+0x3ac>)
 80154c0:	4a78      	ldr	r2, [pc, #480]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 80154c2:	eeb0 0a48 	vmov.f32	s0, s16
 80154c6:	1918      	adds	r0, r3, r4
 80154c8:	edd6 0a00 	vldr	s1, [r6]
 80154cc:	2103      	movs	r1, #3
 80154ce:	f00d fad9 	bl	8022a84 <tVZFilter_initToPool>
                    tVZFilter_initToPool(&synthesisBands[i][1], BandpassPeak, bandFreq, thisBandwidth, &smallPool);
 80154d2:	4b7b      	ldr	r3, [pc, #492]	; (80156c0 <SFXVocoderChAlloc+0x3b0>)
 80154d4:	eeb0 0a48 	vmov.f32	s0, s16
 80154d8:	4a72      	ldr	r2, [pc, #456]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 80154da:	1918      	adds	r0, r3, r4
 80154dc:	2103      	movs	r1, #3
 80154de:	edd6 0a00 	vldr	s1, [r6]
 80154e2:	f00d facf 	bl	8022a84 <tVZFilter_initToPool>
                tExpSmooth_initToPool(&envFollowers[i], 0.0f, 0.001f, &smallPool); // factor of .001 is 10 ms?
 80154e6:	496f      	ldr	r1, [pc, #444]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 80154e8:	eef0 0a49 	vmov.f32	s1, s18
 80154ec:	4638      	mov	r0, r7
 80154ee:	eeb0 0a68 	vmov.f32	s0, s17
 80154f2:	f00c ff39 	bl	8022368 <tExpSmooth_initToPool>
            for (int i = 0; i < MAX_NUM_VOCODER_BANDS; i++)
 80154f6:	f1b8 0f18 	cmp.w	r8, #24
 80154fa:	d1af      	bne.n	801545c <SFXVocoderChAlloc+0x14c>
            tNoise_initToPool(&breathNoise, WhiteNoise, &smallPool);
 80154fc:	2100      	movs	r1, #0
 80154fe:	4a69      	ldr	r2, [pc, #420]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 8015500:	4870      	ldr	r0, [pc, #448]	; (80156c4 <SFXVocoderChAlloc+0x3b4>)
            tHighpass_initToPool(&chVocFinalHP2, 20.0f, &smallPool);
 8015502:	460c      	mov	r4, r1
            tNoise_initToPool(&breathNoise, WhiteNoise, &smallPool);
 8015504:	f00f fbd4 	bl	8024cb0 <tNoise_initToPool>
            tNoise_initToPool(&vocoderNoise, WhiteNoise, &smallPool);
 8015508:	4a66      	ldr	r2, [pc, #408]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 801550a:	4621      	mov	r1, r4
 801550c:	486e      	ldr	r0, [pc, #440]	; (80156c8 <SFXVocoderChAlloc+0x3b8>)
 801550e:	f00f fbcf 	bl	8024cb0 <tNoise_initToPool>
            tZeroCrossing_initToPool(&zerox, 256, &smallPool);
 8015512:	4a64      	ldr	r2, [pc, #400]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 8015514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015518:	486c      	ldr	r0, [pc, #432]	; (80156cc <SFXVocoderChAlloc+0x3bc>)
 801551a:	f009 f957 	bl	801e7cc <tZeroCrossing_initToPool>
            tSimplePoly_setNumVoices(&poly, numVoices);
 801551e:	4b53      	ldr	r3, [pc, #332]	; (801566c <SFXVocoderChAlloc+0x35c>)
 8015520:	486b      	ldr	r0, [pc, #428]	; (80156d0 <SFXVocoderChAlloc+0x3c0>)
 8015522:	7819      	ldrb	r1, [r3, #0]
 8015524:	f00f fa50 	bl	80249c8 <tSimplePoly_setNumVoices>
            tExpSmooth_initToPool(&noiseRamp, 0.0f, 0.05f, &smallPool);
 8015528:	eddf 0a6a 	vldr	s1, [pc, #424]	; 80156d4 <SFXVocoderChAlloc+0x3c4>
 801552c:	495d      	ldr	r1, [pc, #372]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 801552e:	ed9f 0a61 	vldr	s0, [pc, #388]	; 80156b4 <SFXVocoderChAlloc+0x3a4>
 8015532:	4869      	ldr	r0, [pc, #420]	; (80156d8 <SFXVocoderChAlloc+0x3c8>)
 8015534:	f00c ff18 	bl	8022368 <tExpSmooth_initToPool>
            tHighpass_initToPool(&noiseHP, 5000.0f, &smallPool);
 8015538:	495a      	ldr	r1, [pc, #360]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 801553a:	ed9f 0a68 	vldr	s0, [pc, #416]	; 80156dc <SFXVocoderChAlloc+0x3cc>
 801553e:	4868      	ldr	r0, [pc, #416]	; (80156e0 <SFXVocoderChAlloc+0x3d0>)
 8015540:	f00d fa5c 	bl	80229fc <tHighpass_initToPool>
 8015544:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8015718 <SFXVocoderChAlloc+0x408>
            tHighpass_initToPool(&chVocFinalHP1, 20.0f, &smallPool);
 8015548:	4956      	ldr	r1, [pc, #344]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 801554a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801554e:	4865      	ldr	r0, [pc, #404]	; (80156e4 <SFXVocoderChAlloc+0x3d4>)
                tRosenbergGlottalPulse_setOpenLength(&glottal[i], 0.3f);
 8015550:	eddf 8a65 	vldr	s17, [pc, #404]	; 80156e8 <SFXVocoderChAlloc+0x3d8>
            tHighpass_initToPool(&chVocFinalHP1, 20.0f, &smallPool);
 8015554:	f00d fa52 	bl	80229fc <tHighpass_initToPool>
                tRosenbergGlottalPulse_setPulseLength(&glottal[i], 0.4f);
 8015558:	ed9f 8a64 	vldr	s16, [pc, #400]	; 80156ec <SFXVocoderChAlloc+0x3dc>
            tHighpass_initToPool(&chVocFinalHP2, 20.0f, &smallPool);
 801555c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8015560:	4f63      	ldr	r7, [pc, #396]	; (80156f0 <SFXVocoderChAlloc+0x3e0>)
                tSawtooth_initToPool(&osc[i], &smallPool);
 8015562:	4e50      	ldr	r6, [pc, #320]	; (80156a4 <SFXVocoderChAlloc+0x394>)
            tHighpass_initToPool(&chVocFinalHP2, 20.0f, &smallPool);
 8015564:	494f      	ldr	r1, [pc, #316]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 8015566:	4863      	ldr	r0, [pc, #396]	; (80156f4 <SFXVocoderChAlloc+0x3e4>)
 8015568:	f00d fa48 	bl	80229fc <tHighpass_initToPool>
 801556c:	193d      	adds	r5, r7, r4
                tSawtooth_initToPool(&osc[i], &smallPool);
 801556e:	eb08 0004 	add.w	r0, r8, r4
 8015572:	4631      	mov	r1, r6
 8015574:	3404      	adds	r4, #4
 8015576:	f00f fae5 	bl	8024b44 <tSawtooth_initToPool>
                tRosenbergGlottalPulse_initToPool(&glottal[i], &smallPool);
 801557a:	4631      	mov	r1, r6
 801557c:	4628      	mov	r0, r5
 801557e:	f00b f979 	bl	8020874 <tRosenbergGlottalPulse_initToPool>
                tRosenbergGlottalPulse_setOpenLength(&glottal[i], 0.3f);
 8015582:	eeb0 0a68 	vmov.f32	s0, s17
 8015586:	4628      	mov	r0, r5
 8015588:	f00b fa72 	bl	8020a70 <tRosenbergGlottalPulse_setOpenLength>
                tRosenbergGlottalPulse_setPulseLength(&glottal[i], 0.4f);
 801558c:	eeb0 0a48 	vmov.f32	s0, s16
 8015590:	4628      	mov	r0, r5
 8015592:	f00b fa7b 	bl	8020a8c <tRosenbergGlottalPulse_setPulseLength>
            for (int i = 0; i < NUM_VOC_VOICES; i++)
 8015596:	2c20      	cmp	r4, #32
 8015598:	d1e8      	bne.n	801556c <SFXVocoderChAlloc+0x25c>
            setLED_A(numVoices == 1);
 801559a:	4b34      	ldr	r3, [pc, #208]	; (801566c <SFXVocoderChAlloc+0x35c>)
            setLED_B(internalExternal);
 801559c:	4c56      	ldr	r4, [pc, #344]	; (80156f8 <SFXVocoderChAlloc+0x3e8>)
            setLED_A(numVoices == 1);
 801559e:	7818      	ldrb	r0, [r3, #0]
 80155a0:	f1a0 0001 	sub.w	r0, r0, #1
 80155a4:	fab0 f080 	clz	r0, r0
 80155a8:	0940      	lsrs	r0, r0, #5
 80155aa:	f7fe fa09 	bl	80139c0 <setLED_A>
            setLED_B(internalExternal);
 80155ae:	7820      	ldrb	r0, [r4, #0]
 80155b0:	f7fe fa14 	bl	80139dc <setLED_B>
            setLED_C(vocChFreeze);
 80155b4:	7b20      	ldrb	r0, [r4, #12]
        }
 80155b6:	b003      	add	sp, #12
 80155b8:	ecbd 8b04 	vpop	{d8-d9}
 80155bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            setLED_C(vocChFreeze);
 80155c0:	f7fe ba1a 	b.w	80139f8 <setLED_C>
                    tVZFilter_initToPool(&analysisBands[i][0], Highpass, bandFreq, thisBandwidth, &smallPool);
 80155c4:	4a37      	ldr	r2, [pc, #220]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 80155c6:	2100      	movs	r1, #0
 80155c8:	484c      	ldr	r0, [pc, #304]	; (80156fc <SFXVocoderChAlloc+0x3ec>)
 80155ca:	f00d fa5b 	bl	8022a84 <tVZFilter_initToPool>
                    tVZFilter_initToPool(&analysisBands[i][1], Highpass, bandFreq, thisBandwidth, &smallPool);
 80155ce:	edd6 0a00 	vldr	s1, [r6]
 80155d2:	eeb0 0a48 	vmov.f32	s0, s16
 80155d6:	4a33      	ldr	r2, [pc, #204]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 80155d8:	2100      	movs	r1, #0
 80155da:	4849      	ldr	r0, [pc, #292]	; (8015700 <SFXVocoderChAlloc+0x3f0>)
 80155dc:	f00d fa52 	bl	8022a84 <tVZFilter_initToPool>
                    tVZFilter_initToPool(&synthesisBands[i][0], Highpass, bandFreq, thisBandwidth, &smallPool);
 80155e0:	edd6 0a00 	vldr	s1, [r6]
 80155e4:	eeb0 0a48 	vmov.f32	s0, s16
 80155e8:	4a2e      	ldr	r2, [pc, #184]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 80155ea:	2100      	movs	r1, #0
 80155ec:	4845      	ldr	r0, [pc, #276]	; (8015704 <SFXVocoderChAlloc+0x3f4>)
 80155ee:	f00d fa49 	bl	8022a84 <tVZFilter_initToPool>
                    tVZFilter_initToPool(&synthesisBands[i][1], Highpass, bandFreq, thisBandwidth, &smallPool);
 80155f2:	eeb0 0a48 	vmov.f32	s0, s16
 80155f6:	edd6 0a00 	vldr	s1, [r6]
 80155fa:	2100      	movs	r1, #0
 80155fc:	4a29      	ldr	r2, [pc, #164]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 80155fe:	4842      	ldr	r0, [pc, #264]	; (8015708 <SFXVocoderChAlloc+0x3f8>)
 8015600:	f00d fa40 	bl	8022a84 <tVZFilter_initToPool>
                tExpSmooth_initToPool(&envFollowers[i], 0.0f, 0.001f, &smallPool); // factor of .001 is 10 ms?
 8015604:	4638      	mov	r0, r7
 8015606:	4927      	ldr	r1, [pc, #156]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 8015608:	eddf 0a29 	vldr	s1, [pc, #164]	; 80156b0 <SFXVocoderChAlloc+0x3a0>
 801560c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80156b4 <SFXVocoderChAlloc+0x3a4>
 8015610:	f00c feaa 	bl	8022368 <tExpSmooth_initToPool>
 8015614:	e772      	b.n	80154fc <SFXVocoderChAlloc+0x1ec>
                    tVZFilter_initToPool(&analysisBands[i][0], Lowpass, bandFreq, thisBandwidth, &smallPool);
 8015616:	edd6 0a00 	vldr	s1, [r6]
 801561a:	4658      	mov	r0, fp
 801561c:	2101      	movs	r1, #1
 801561e:	f00d fa31 	bl	8022a84 <tVZFilter_initToPool>
                    tVZFilter_initToPool(&analysisBands[i][1], Lowpass, bandFreq, thisBandwidth, &smallPool);
 8015622:	edd6 0a00 	vldr	s1, [r6]
 8015626:	eeb0 0a48 	vmov.f32	s0, s16
 801562a:	4a1e      	ldr	r2, [pc, #120]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 801562c:	2101      	movs	r1, #1
 801562e:	4822      	ldr	r0, [pc, #136]	; (80156b8 <SFXVocoderChAlloc+0x3a8>)
 8015630:	f00d fa28 	bl	8022a84 <tVZFilter_initToPool>
                    tVZFilter_initToPool(&synthesisBands[i][0], Lowpass, bandFreq,thisBandwidth, &smallPool);
 8015634:	edd6 0a00 	vldr	s1, [r6]
 8015638:	eeb0 0a48 	vmov.f32	s0, s16
 801563c:	4a19      	ldr	r2, [pc, #100]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 801563e:	2101      	movs	r1, #1
 8015640:	481e      	ldr	r0, [pc, #120]	; (80156bc <SFXVocoderChAlloc+0x3ac>)
 8015642:	f00d fa1f 	bl	8022a84 <tVZFilter_initToPool>
                    tVZFilter_initToPool(&synthesisBands[i][1], Lowpass, bandFreq,thisBandwidth, &smallPool);
 8015646:	eeb0 0a48 	vmov.f32	s0, s16
 801564a:	edd6 0a00 	vldr	s1, [r6]
 801564e:	2101      	movs	r1, #1
 8015650:	4a14      	ldr	r2, [pc, #80]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 8015652:	481b      	ldr	r0, [pc, #108]	; (80156c0 <SFXVocoderChAlloc+0x3b0>)
 8015654:	f00d fa16 	bl	8022a84 <tVZFilter_initToPool>
                tExpSmooth_initToPool(&envFollowers[i], 0.0f, 0.001f, &smallPool); // factor of .001 is 10 ms?
 8015658:	4912      	ldr	r1, [pc, #72]	; (80156a4 <SFXVocoderChAlloc+0x394>)
 801565a:	eef0 0a49 	vmov.f32	s1, s18
 801565e:	4638      	mov	r0, r7
 8015660:	eeb0 0a68 	vmov.f32	s0, s17
 8015664:	f00c fe80 	bl	8022368 <tExpSmooth_initToPool>
 8015668:	e6f8      	b.n	801545c <SFXVocoderChAlloc+0x14c>
 801566a:	bf00      	nop
 801566c:	20000040 	.word	0x20000040
 8015670:	3f7d70a4 	.word	0x3f7d70a4
 8015674:	41873333 	.word	0x41873333
 8015678:	3f4ccccd 	.word	0x3f4ccccd
 801567c:	becccccd 	.word	0xbecccccd
 8015680:	45bb8000 	.word	0x45bb8000
 8015684:	200187d4 	.word	0x200187d4
 8015688:	20002d50 	.word	0x20002d50
 801568c:	42c60000 	.word	0x42c60000
 8015690:	3dcccccd 	.word	0x3dcccccd
 8015694:	3daaaaab 	.word	0x3daaaaab
 8015698:	42700000 	.word	0x42700000
 801569c:	200034a8 	.word	0x200034a8
 80156a0:	20002880 	.word	0x20002880
 80156a4:	20018338 	.word	0x20018338
 80156a8:	20017630 	.word	0x20017630
 80156ac:	2001766c 	.word	0x2001766c
 80156b0:	3a83126f 	.word	0x3a83126f
 80156b4:	00000000 	.word	0x00000000
 80156b8:	2001827c 	.word	0x2001827c
 80156bc:	20017468 	.word	0x20017468
 80156c0:	2001746c 	.word	0x2001746c
 80156c4:	20002858 	.word	0x20002858
 80156c8:	200034a4 	.word	0x200034a4
 80156cc:	200176d0 	.word	0x200176d0
 80156d0:	20017560 	.word	0x20017560
 80156d4:	3d4ccccd 	.word	0x3d4ccccd
 80156d8:	20018268 	.word	0x20018268
 80156dc:	459c4000 	.word	0x459c4000
 80156e0:	2000349c 	.word	0x2000349c
 80156e4:	2000287c 	.word	0x2000287c
 80156e8:	3e99999a 	.word	0x3e99999a
 80156ec:	3ecccccd 	.word	0x3ecccccd
 80156f0:	20002888 	.word	0x20002888
 80156f4:	2001826c 	.word	0x2001826c
 80156f8:	20000548 	.word	0x20000548
 80156fc:	20018330 	.word	0x20018330
 8015700:	20018334 	.word	0x20018334
 8015704:	20017520 	.word	0x20017520
 8015708:	20017524 	.word	0x20017524
 801570c:	20017554 	.word	0x20017554
 8015710:	20018278 	.word	0x20018278
 8015714:	200172b8 	.word	0x200172b8
 8015718:	2001731c 	.word	0x2001731c

0801571c <SFXVocoderChFrame>:
        {
 801571c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8015720:	4c4c      	ldr	r4, [pc, #304]	; (8015854 <SFXVocoderChFrame+0x138>)
                numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8015722:	4d4d      	ldr	r5, [pc, #308]	; (8015858 <SFXVocoderChFrame+0x13c>)
        {
 8015724:	ed2d 8b08 	vpush	{d8-d11}
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8015728:	7d23      	ldrb	r3, [r4, #20]
        {
 801572a:	b083      	sub	sp, #12
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 801572c:	2b01      	cmp	r3, #1
 801572e:	d112      	bne.n	8015756 <SFXVocoderChFrame+0x3a>
                numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8015730:	782a      	ldrb	r2, [r5, #0]
                tSimplePoly_setNumVoices(&poly, numVoices);
 8015732:	484a      	ldr	r0, [pc, #296]	; (801585c <SFXVocoderChFrame+0x140>)
                numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8015734:	2a01      	cmp	r2, #1
 8015736:	bf98      	it	ls
 8015738:	2308      	movls	r3, #8
                tSimplePoly_setNumVoices(&poly, numVoices);
 801573a:	4619      	mov	r1, r3
                numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 801573c:	702b      	strb	r3, [r5, #0]
                tSimplePoly_setNumVoices(&poly, numVoices);
 801573e:	f00f f943 	bl	80249c8 <tSimplePoly_setNumVoices>
                setLED_A(numVoices == 1);
 8015742:	7828      	ldrb	r0, [r5, #0]
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8015744:	2300      	movs	r3, #0
                setLED_A(numVoices == 1);
 8015746:	f1a0 0001 	sub.w	r0, r0, #1
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 801574a:	7523      	strb	r3, [r4, #20]
                setLED_A(numVoices == 1);
 801574c:	fab0 f080 	clz	r0, r0
 8015750:	0940      	lsrs	r0, r0, #5
 8015752:	f7fe f935 	bl	80139c0 <setLED_A>
            if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 8015756:	7e23      	ldrb	r3, [r4, #24]
                internalExternal = !internalExternal;
 8015758:	4e41      	ldr	r6, [pc, #260]	; (8015860 <SFXVocoderChFrame+0x144>)
            if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 801575a:	2b01      	cmp	r3, #1
 801575c:	f000 822c 	beq.w	8015bb8 <SFXVocoderChFrame+0x49c>
            if (buttonActionsSFX[ButtonC][ActionPress] == 1)
 8015760:	7f23      	ldrb	r3, [r4, #28]
 8015762:	2b01      	cmp	r3, #1
 8015764:	f000 8236 	beq.w	8015bd4 <SFXVocoderChFrame+0x4b8>
            displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 8015768:	4b3e      	ldr	r3, [pc, #248]	; (8015864 <SFXVocoderChFrame+0x148>)
            displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 801576a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 801576e:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8015868 <SFXVocoderChFrame+0x14c>
            displayValues[12] = (presetKnobValues[VocoderCh][12] * 4.0f) - 2.0f; //tilt
 8015772:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015776:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
            displayValues[12] = (presetKnobValues[VocoderCh][12] * 4.0f) - 2.0f; //tilt
 801577a:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
            displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 801577e:	ed93 5a1c 	vldr	s10, [r3, #112]	; 0x70
            displayValues[10] = presetKnobValues[VocoderCh][10] + 0.5f; //bandsquish
 8015782:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015786:	ee27 7a26 	vmul.f32	s14, s14, s13
            displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 801578a:	eddf 4a38 	vldr	s9, [pc, #224]	; 801586c <SFXVocoderChFrame+0x150>
            displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 801578e:	ed93 2a1a 	vldr	s4, [r3, #104]	; 0x68
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015792:	eef2 2a00 	vmov.f32	s5, #32	; 0x41000000  8.0
            displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 8015796:	eee5 4a27 	vfma.f32	s9, s10, s15
            displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 801579a:	ed9f 3a35 	vldr	s6, [pc, #212]	; 8015870 <SFXVocoderChFrame+0x154>
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 801579e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
            displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 80157a2:	ed9f 4a34 	vldr	s8, [pc, #208]	; 8015874 <SFXVocoderChFrame+0x158>
            displayValues[10] = presetKnobValues[VocoderCh][10] + 0.5f; //bandsquish
 80157a6:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
            chVocOutputGain = 9.0f * displayValues[0];
 80157aa:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
            displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 80157ae:	eea2 4a03 	vfma.f32	s8, s4, s6
            displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 80157b2:	ed93 3a19 	vldr	s6, [r3, #100]	; 0x64
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 80157b6:	ed8d 7a01 	vstr	s14, [sp, #4]
            displayValues[10] = presetKnobValues[VocoderCh][10] + 0.5f; //bandsquish
 80157ba:	ee35 5a23 	vadd.f32	s10, s10, s7
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 80157be:	f89d 2004 	ldrb.w	r2, [sp, #4]
            chVocOutputGain = 9.0f * displayValues[0];
 80157c2:	ee63 6a26 	vmul.f32	s13, s6, s13
            displayValues[12] = (presetKnobValues[VocoderCh][12] * 4.0f) - 2.0f; //tilt
 80157c6:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 80157ca:	2700      	movs	r7, #0
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 80157cc:	ee07 2a90 	vmov	s15, r2
            displayValues[13] = presetKnobValues[VocoderCh][13]; //stereo
 80157d0:	edd3 3a26 	vldr	s7, [r3, #152]	; 0x98
            displayValues[12] = (presetKnobValues[VocoderCh][12] * 4.0f) - 2.0f; //tilt
 80157d4:	eea7 6a25 	vfma.f32	s12, s14, s11
            displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 80157d8:	ed9f 2a27 	vldr	s4, [pc, #156]	; 8015878 <SFXVocoderChFrame+0x15c>
            oneMinusStereo = 1.0f - displayValues[13];
 80157dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 80157e0:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 80157e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 80157e8:	4c24      	ldr	r4, [pc, #144]	; (801587c <SFXVocoderChFrame+0x160>)
            displayValues[5] = presetKnobValues[VocoderCh][5]; //crossfade between sawtooth and glottal pulse
 80157ea:	6f98      	ldr	r0, [r3, #120]	; 0x78
            displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 80157ec:	ee65 5a82 	vmul.f32	s11, s11, s4
            displayValues[6] = presetKnobValues[VocoderCh][6]; //pulse width
 80157f0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
            oneMinusStereo = 1.0f - displayValues[13];
 80157f2:	ee37 7a63 	vsub.f32	s14, s14, s7
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 80157f6:	ee77 7aa2 	vadd.f32	s15, s15, s5
            displayValues[4] = presetKnobValues[VocoderCh][4]; //noise thresh
 80157fa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
            displayValues[7] = presetKnobValues[VocoderCh][7]; //pulse shape
 80157fc:	f8d3 c080 	ldr.w	ip, [r3, #128]	; 0x80
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015800:	46ba      	mov	sl, r7
            displayValues[5] = presetKnobValues[VocoderCh][5]; //crossfade between sawtooth and glottal pulse
 8015802:	6160      	str	r0, [r4, #20]
            displayValues[6] = presetKnobValues[VocoderCh][6]; //pulse width
 8015804:	61a1      	str	r1, [r4, #24]
            displayValues[8] = presetKnobValues[VocoderCh][8]; //breathiness
 8015806:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
            displayValues[9] = presetKnobValues[VocoderCh][9]; //speed
 801580a:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
            displayValues[14] = presetKnobValues[VocoderCh][14]; //snap to bark scale
 801580e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
            displayValues[2] = (uint8_t)(presetKnobValues[VocoderCh][2] * 16.9f) + 8.0f; //quality
 8015812:	edc4 7a02 	vstr	s15, [r4, #8]
            displayValues[1] = (presetKnobValues[VocoderCh][1] * 0.8f) - 0.4f; //warp factor
 8015816:	ed84 4a01 	vstr	s8, [r4, #4]
            displayValues[3] = (presetKnobValues[VocoderCh][3]* 2.0f) + 0.1f; //band width
 801581a:	edc4 4a03 	vstr	s9, [r4, #12]
            displayValues[4] = presetKnobValues[VocoderCh][4]; //noise thresh
 801581e:	6122      	str	r2, [r4, #16]
            displayValues[7] = presetKnobValues[VocoderCh][7]; //pulse shape
 8015820:	f8c4 c01c 	str.w	ip, [r4, #28]
            displayValues[8] = presetKnobValues[VocoderCh][8]; //breathiness
 8015824:	6220      	str	r0, [r4, #32]
            displayValues[9] = presetKnobValues[VocoderCh][9]; //speed
 8015826:	6261      	str	r1, [r4, #36]	; 0x24
            displayValues[10] = presetKnobValues[VocoderCh][10] + 0.5f; //bandsquish
 8015828:	ed84 5a0a 	vstr	s10, [r4, #40]	; 0x28
            displayValues[11] = presetKnobValues[VocoderCh][11] * 60.0f; //bandoffset
 801582c:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
            displayValues[12] = (presetKnobValues[VocoderCh][12] * 4.0f) - 2.0f; //tilt
 8015830:	ed84 6a0c 	vstr	s12, [r4, #48]	; 0x30
            displayValues[14] = presetKnobValues[VocoderCh][14]; //snap to bark scale
 8015834:	63a3      	str	r3, [r4, #56]	; 0x38
            displayValues[0] = presetKnobValues[VocoderCh][0]; //vocoder volume
 8015836:	ed84 3a00 	vstr	s6, [r4]
            chVocOutputGain = 9.0f * displayValues[0];
 801583a:	edc5 6a03 	vstr	s13, [r5, #12]
 801583e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8015884 <SFXVocoderChFrame+0x168>
            displayValues[13] = presetKnobValues[VocoderCh][13]; //stereo
 8015842:	edc4 3a0d 	vstr	s7, [r4, #52]	; 0x34
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015846:	f8df 8014 	ldr.w	r8, [pc, #20]	; 801585c <SFXVocoderChFrame+0x140>
            oneMinusStereo = 1.0f - displayValues[13];
 801584a:	ed85 7a02 	vstr	s14, [r5, #8]
                tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 801584e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8015880 <SFXVocoderChFrame+0x164>
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015852:	e06b      	b.n	801592c <SFXVocoderChFrame+0x210>
 8015854:	20018724 	.word	0x20018724
 8015858:	20000040 	.word	0x20000040
 801585c:	20017560 	.word	0x20017560
 8015860:	20000548 	.word	0x20000548
 8015864:	20002d50 	.word	0x20002d50
 8015868:	41873333 	.word	0x41873333
 801586c:	3dcccccd 	.word	0x3dcccccd
 8015870:	3f4ccccd 	.word	0x3f4ccccd
 8015874:	becccccd 	.word	0xbecccccd
 8015878:	42700000 	.word	0x42700000
 801587c:	200187d4 	.word	0x200187d4
 8015880:	00000000 	.word	0x00000000
 8015884:	2000347c 	.word	0x2000347c
 8015888:	9301      	str	r3, [sp, #4]
                tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 801588a:	f00f f8cd 	bl	8024a28 <tSimplePoly_getVelocity>
 801588e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015892:	2800      	cmp	r0, #0
 8015894:	9b01      	ldr	r3, [sp, #4]
 8015896:	fe30 0a08 	vselgt.f32	s0, s0, s16
 801589a:	4618      	mov	r0, r3
 801589c:	f00c fda0 	bl	80223e0 <tExpSmooth_setDest>
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 80158a0:	4659      	mov	r1, fp
 80158a2:	4640      	mov	r0, r8
 80158a4:	f00f f8b4 	bl	8024a10 <tSimplePoly_getPitch>
 80158a8:	ee07 0a90 	vmov	s15, r0
 80158ac:	ed96 0a02 	vldr	s0, [r6, #8]
 80158b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 80158b4:	4bcd      	ldr	r3, [pc, #820]	; (8015bec <SFXVocoderChFrame+0x4d0>)
 80158b6:	4ace      	ldr	r2, [pc, #824]	; (8015bf0 <SFXVocoderChFrame+0x4d4>)
 80158b8:	7819      	ldrb	r1, [r3, #0]
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 80158ba:	ee37 7a00 	vadd.f32	s14, s14, s0
            float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 80158be:	48cd      	ldr	r0, [pc, #820]	; (8015bf4 <SFXVocoderChFrame+0x4d8>)
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 80158c0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80158c4:	ee17 3a90 	vmov	r3, s15
 80158c8:	1a5b      	subs	r3, r3, r1
 80158ca:	fb82 2c03 	smull	r2, ip, r2, r3
 80158ce:	17d9      	asrs	r1, r3, #31
 80158d0:	ebc1 016c 	rsb	r1, r1, ip, asr #1
 80158d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80158d8:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
 80158dc:	ee07 3a90 	vmov	s15, r3
 80158e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 80158e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80158e8:	ee17 3a90 	vmov	r3, s15
 80158ec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80158f0:	ed90 0a00 	vldr	s0, [r0]
            freq[voice] = LEAF_midiToFrequency(tunedNote);
 80158f4:	ee37 0a00 	vadd.f32	s0, s14, s0
 80158f8:	f00e faf0 	bl	8023edc <LEAF_midiToFrequency>
                tSawtooth_setFreq(&osc[i], freq[i]);
 80158fc:	48be      	ldr	r0, [pc, #760]	; (8015bf8 <SFXVocoderChFrame+0x4dc>)
            freq[voice] = LEAF_midiToFrequency(tunedNote);
 80158fe:	ed89 0a00 	vstr	s0, [r9]
                tSawtooth_setFreq(&osc[i], freq[i]);
 8015902:	4438      	add	r0, r7
 8015904:	f00f f946 	bl	8024b94 <tSawtooth_setFreq>
 8015908:	4bbc      	ldr	r3, [pc, #752]	; (8015bfc <SFXVocoderChFrame+0x4e0>)
                tRosenbergGlottalPulse_setFreq(&glottal[i], freq[i]);
 801590a:	ecb9 0a01 	vldmia	r9!, {s0}
 801590e:	eb07 0b03 	add.w	fp, r7, r3
 8015912:	3704      	adds	r7, #4
 8015914:	4658      	mov	r0, fp
 8015916:	f00b f89d 	bl	8020a54 <tRosenbergGlottalPulse_setFreq>
                tRosenbergGlottalPulse_setOpenLengthAndPulseLength(&glottal[i], displayValues[6] * displayValues[7], displayValues[6]);
 801591a:	edd4 0a06 	vldr	s1, [r4, #24]
 801591e:	ed94 0a07 	vldr	s0, [r4, #28]
 8015922:	4658      	mov	r0, fp
 8015924:	ee20 0a80 	vmul.f32	s0, s1, s0
 8015928:	f00b f8be 	bl	8020aa8 <tRosenbergGlottalPulse_setOpenLengthAndPulseLength>
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801592c:	4640      	mov	r0, r8
                tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 801592e:	fa5f fb8a 	uxtb.w	fp, sl
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015932:	f00f f851 	bl	80249d8 <tSimplePoly_getNumVoices>
 8015936:	4bb2      	ldr	r3, [pc, #712]	; (8015c00 <SFXVocoderChFrame+0x4e4>)
 8015938:	4550      	cmp	r0, sl
                tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 801593a:	4659      	mov	r1, fp
 801593c:	4640      	mov	r0, r8
 801593e:	443b      	add	r3, r7
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015940:	f10a 0a01 	add.w	sl, sl, #1
 8015944:	dca0      	bgt.n	8015888 <SFXVocoderChFrame+0x16c>
            numberOfVocoderBands = displayValues[2];
 8015946:	ed94 7a02 	vldr	s14, [r4, #8]
            float warpFactor = 1.0f + displayValues[1];
 801594a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            if ((numberOfVocoderBands != prevNumberOfVocoderBands) || (myQ != prevMyQ) || (warpFactor != prevWarpFactor) || (bandSquish != prevBandSquish) || (bandOffset != prevBandOffset) || (myTilt != prevMyTilt) || (barkPull != prevBarkPull))
 801594e:	7c2a      	ldrb	r2, [r5, #16]
            numberOfVocoderBands = displayValues[2];
 8015950:	eebc 7ac7 	vcvt.u32.f32	s14, s14
            float warpFactor = 1.0f + displayValues[1];
 8015954:	edd4 8a01 	vldr	s17, [r4, #4]
            float myQ = displayValues[3];
 8015958:	ed94 8a03 	vldr	s16, [r4, #12]
            float warpFactor = 1.0f + displayValues[1];
 801595c:	ee78 8aa7 	vadd.f32	s17, s17, s15
            float bandSquish = displayValues[10];
 8015960:	ed94 9a0a 	vldr	s18, [r4, #40]	; 0x28
            numberOfVocoderBands = displayValues[2];
 8015964:	ed8d 7a01 	vstr	s14, [sp, #4]
 8015968:	f89d 3004 	ldrb.w	r3, [sp, #4]
            float bandOffset = displayValues[11];
 801596c:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
            if ((numberOfVocoderBands != prevNumberOfVocoderBands) || (myQ != prevMyQ) || (warpFactor != prevWarpFactor) || (bandSquish != prevBandSquish) || (bandOffset != prevBandOffset) || (myTilt != prevMyTilt) || (barkPull != prevBarkPull))
 8015970:	429a      	cmp	r2, r3
            float myTilt = displayValues[12];
 8015972:	edd4 aa0c 	vldr	s21, [r4, #48]	; 0x30
            numberOfVocoderBands = displayValues[2];
 8015976:	706b      	strb	r3, [r5, #1]
            float barkPull = displayValues[14];
 8015978:	edd4 9a0e 	vldr	s19, [r4, #56]	; 0x38
            if ((numberOfVocoderBands != prevNumberOfVocoderBands) || (myQ != prevMyQ) || (warpFactor != prevWarpFactor) || (bandSquish != prevBandSquish) || (bandOffset != prevBandOffset) || (myTilt != prevMyTilt) || (barkPull != prevBarkPull))
 801597c:	f000 80e4 	beq.w	8015b48 <SFXVocoderChFrame+0x42c>
                invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015980:	ee07 3a90 	vmov	s15, r3
 8015984:	ed9f 6a9f 	vldr	s12, [pc, #636]	; 8015c04 <SFXVocoderChFrame+0x4e8>
 8015988:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
                bandWidthInSemitones = 94.0f * bandSquish * invNumberOfVocoderBands; //was 90
 801598c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8015c08 <SFXVocoderChFrame+0x4ec>
                invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 8015990:	eef8 7a67 	vcvt.f32.u32	s15, s15
                bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 8015994:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8015c0c <SFXVocoderChFrame+0x4f0>
                alteringBands = 1;
 8015998:	2301      	movs	r3, #1
                bandWidthInSemitones = 94.0f * bandSquish * invNumberOfVocoderBands; //was 90
 801599a:	4a9d      	ldr	r2, [pc, #628]	; (8015c10 <SFXVocoderChFrame+0x4f4>)
                invMyQ = 1.0f / myQ;
 801599c:	ee85 5a88 	vdiv.f32	s10, s11, s16
                thisBandwidth = bandWidthInOctaves * myQ;
 80159a0:	4f9c      	ldr	r7, [pc, #624]	; (8015c14 <SFXVocoderChFrame+0x4f8>)
                alteringBands = 1;
 80159a2:	61b3      	str	r3, [r6, #24]
                bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 80159a4:	4b9c      	ldr	r3, [pc, #624]	; (8015c18 <SFXVocoderChFrame+0x4fc>)
                invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 80159a6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80159aa:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                bandWidthInSemitones = 94.0f * bandSquish * invNumberOfVocoderBands; //was 90
 80159ae:	ee69 7a07 	vmul.f32	s15, s18, s14
                invMyQ = 1.0f / myQ;
 80159b2:	ed85 5a09 	vstr	s10, [r5, #36]	; 0x24
                bandWidthInSemitones = 94.0f * bandSquish * invNumberOfVocoderBands; //was 90
 80159b6:	ee67 7a86 	vmul.f32	s15, s15, s12
                invNumberOfVocoderBands = 1.0f / ((float)numberOfVocoderBands-0.99f);
 80159ba:	ed85 6a01 	vstr	s12, [r5, #4]
                bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 80159be:	ee27 7aa6 	vmul.f32	s14, s15, s13
                bandWidthInSemitones = 94.0f * bandSquish * invNumberOfVocoderBands; //was 90
 80159c2:	edc2 7a00 	vstr	s15, [r2]
                thisBandwidth = bandWidthInOctaves * myQ;
 80159c6:	ee67 6a08 	vmul.f32	s13, s14, s16
                bandWidthInOctaves = bandWidthInSemitones * 0.083333333333333f;  // divide by 12
 80159ca:	ed83 7a00 	vstr	s14, [r3]
                thisBandwidth = bandWidthInOctaves * myQ;
 80159ce:	edc7 6a00 	vstr	s13, [r7]
                float bandFreq = faster_mtof((currentBandToAlter * bandWidthInSemitones) + bandOffset); //midinote 28 (41Hz) to midinote 134 (18814Hz) is 106 midinotes, divide that by how many bands to find out how far apart to put the bands
 80159d2:	ed96 7a07 	vldr	s14, [r6, #28]
 80159d6:	eeb0 0a4a 	vmov.f32	s0, s20
            float oneMinusBarkPull = 1.0f - barkPull;
 80159da:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
                float bandFreq = faster_mtof((currentBandToAlter * bandWidthInSemitones) + bandOffset); //midinote 28 (41Hz) to midinote 134 (18814Hz) is 106 midinotes, divide that by how many bands to find out how far apart to put the bands
 80159de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            float oneMinusBarkPull = 1.0f - barkPull;
 80159e2:	ee7b ba69 	vsub.f32	s23, s22, s19
                float bandFreq = faster_mtof((currentBandToAlter * bandWidthInSemitones) + bandOffset); //midinote 28 (41Hz) to midinote 134 (18814Hz) is 106 midinotes, divide that by how many bands to find out how far apart to put the bands
 80159e6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80159ea:	f00e fafb 	bl	8023fe4 <faster_mtof>
                bandFreq = (bandFreq * oneMinusBarkPull) + (barkBandFreqs[currentBandToAlter] * barkPull);
 80159ee:	69f0      	ldr	r0, [r6, #28]
                float tiltY = displayValues[12] * myHeight + tiltOffset;
 80159f0:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80159f4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
                bandFreq = (bandFreq * oneMinusBarkPull) + (barkBandFreqs[currentBandToAlter] * barkPull);
 80159f8:	0081      	lsls	r1, r0, #2
                float tiltY = displayValues[12] * myHeight + tiltOffset;
 80159fa:	edd5 6a01 	vldr	s13, [r5, #4]
                float myHeight = currentBandToAlter * invNumberOfVocoderBands; //x value
 80159fe:	ee06 0a10 	vmov	s12, r0
                float tiltOffset = (1.0f - ((myTilt * 0.5f) + 0.5f)) + 0.5f;
 8015a02:	ee3a 4a8b 	vadd.f32	s8, s21, s22
                bandFreq = (bandFreq * oneMinusBarkPull) + (barkBandFreqs[currentBandToAlter] * barkPull);
 8015a06:	186b      	adds	r3, r5, r1
                float tiltY = displayValues[12] * myHeight + tiltOffset;
 8015a08:	ee66 6aa7 	vmul.f32	s13, s13, s15
                float myHeight = currentBandToAlter * invNumberOfVocoderBands; //x value
 8015a0c:	eef8 5ac6 	vcvt.f32.s32	s11, s12
                if (bandFreq > 5000.0f) // a way to keep the upper bands fixed so consonants are not stretched even though vowels are
 8015a10:	ed9f 5a82 	vldr	s10, [pc, #520]	; 8015c1c <SFXVocoderChFrame+0x500>
                bandFreq = (bandFreq * oneMinusBarkPull) + (barkBandFreqs[currentBandToAlter] * barkPull);
 8015a14:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
                float tiltY = displayValues[12] * myHeight + tiltOffset;
 8015a18:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
                float bandBandwidth = (thisBandwidth * oneMinusBarkPull) + (barkBandWidths[currentBandToAlter] *  barkPull * myQ);
 8015a1c:	edd3 0a22 	vldr	s1, [r3, #136]	; 0x88
 8015a20:	00c0      	lsls	r0, r0, #3
                bandFreq = (bandFreq * oneMinusBarkPull) + (barkBandFreqs[currentBandToAlter] * barkPull);
 8015a22:	ee69 7aa7 	vmul.f32	s15, s19, s15
                bandGains[currentBandToAlter] = invMyQ * tiltY;
 8015a26:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
                float tiltY = displayValues[12] * myHeight + tiltOffset;
 8015a2a:	eea5 7aa6 	vfma.f32	s14, s11, s13
                bandGains[currentBandToAlter] = invMyQ * tiltY;
 8015a2e:	4b7c      	ldr	r3, [pc, #496]	; (8015c20 <SFXVocoderChFrame+0x504>)
                float bandBandwidth = (thisBandwidth * oneMinusBarkPull) + (barkBandWidths[currentBandToAlter] *  barkPull * myQ);
 8015a30:	ee68 6a29 	vmul.f32	s13, s16, s19
 8015a34:	eddf 5a7b 	vldr	s11, [pc, #492]	; 8015c24 <SFXVocoderChFrame+0x508>
                bandFreq = (bandFreq * oneMinusBarkPull) + (barkBandFreqs[currentBandToAlter] * barkPull);
 8015a38:	eeeb 7a80 	vfma.f32	s15, s23, s0
                bandGains[currentBandToAlter] = invMyQ * tiltY;
 8015a3c:	440b      	add	r3, r1
                if (analysisOrSynthesis == 0)
 8015a3e:	6a32      	ldr	r2, [r6, #32]
                float bandBandwidth = (thisBandwidth * oneMinusBarkPull) + (barkBandWidths[currentBandToAlter] *  barkPull * myQ);
 8015a40:	ee66 0aa0 	vmul.f32	s1, s13, s1
                float tiltY = displayValues[12] * myHeight + tiltOffset;
 8015a44:	eea4 7a64 	vfms.f32	s14, s8, s9
                bandFreq = (bandFreq * oneMinusBarkPull) + (barkBandFreqs[currentBandToAlter] * barkPull);
 8015a48:	eeb0 0a67 	vmov.f32	s0, s15
                float bandBandwidth = (thisBandwidth * oneMinusBarkPull) + (barkBandWidths[currentBandToAlter] *  barkPull * myQ);
 8015a4c:	edd7 7a00 	vldr	s15, [r7]
 8015a50:	eee7 0aab 	vfma.f32	s1, s15, s23
                float tempWarpFactor = warpFactor;
 8015a54:	eeb4 0ac5 	vcmpe.f32	s0, s10
 8015a58:	fe80 0a65 	vminnm.f32	s0, s0, s11
                bandGains[currentBandToAlter] = invMyQ * tiltY;
 8015a5c:	ee27 7a06 	vmul.f32	s14, s14, s12
                float tempWarpFactor = warpFactor;
 8015a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                bandGains[currentBandToAlter] = invMyQ * tiltY;
 8015a64:	ed83 7a00 	vstr	s14, [r3]
                float tempWarpFactor = warpFactor;
 8015a68:	bf98      	it	ls
 8015a6a:	eeb0 ba68 	vmovls.f32	s22, s17
                if (analysisOrSynthesis == 0)
 8015a6e:	2a00      	cmp	r2, #0
 8015a70:	f040 80e8 	bne.w	8015c44 <SFXVocoderChFrame+0x528>
                    tVZFilter_setFreqAndBandwidth(&analysisBands[currentBandToAlter][0], bandFreq, bandBandwidth);
 8015a74:	4f6c      	ldr	r7, [pc, #432]	; (8015c28 <SFXVocoderChFrame+0x50c>)
 8015a76:	4438      	add	r0, r7
 8015a78:	f00d fc52 	bl	8023320 <tVZFilter_setFreqAndBandwidth>
                    analysisBands[currentBandToAlter][1]->B = analysisBands[currentBandToAlter][0]->B;
 8015a7c:	69f2      	ldr	r2, [r6, #28]
 8015a7e:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 8015a82:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
 8015a86:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8015a88:	6859      	ldr	r1, [r3, #4]
 8015a8a:	6348      	str	r0, [r1, #52]	; 0x34
                    analysisBands[currentBandToAlter][1]->fc = analysisBands[currentBandToAlter][0]->fc;
 8015a8c:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 8015a90:	6859      	ldr	r1, [r3, #4]
 8015a92:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015a94:	6288      	str	r0, [r1, #40]	; 0x28
                    analysisBands[currentBandToAlter][1]->R2 = analysisBands[currentBandToAlter][0]->R2;
 8015a96:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 8015a9a:	6859      	ldr	r1, [r3, #4]
 8015a9c:	6940      	ldr	r0, [r0, #20]
 8015a9e:	6148      	str	r0, [r1, #20]
                    analysisBands[currentBandToAlter][1]->cL = analysisBands[currentBandToAlter][0]->cL;
 8015aa0:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 8015aa4:	6859      	ldr	r1, [r3, #4]
 8015aa6:	69c0      	ldr	r0, [r0, #28]
 8015aa8:	61c8      	str	r0, [r1, #28]
                    analysisBands[currentBandToAlter][1]->cB = analysisBands[currentBandToAlter][0]->cB;
 8015aaa:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 8015aae:	6859      	ldr	r1, [r3, #4]
 8015ab0:	6a00      	ldr	r0, [r0, #32]
 8015ab2:	6208      	str	r0, [r1, #32]
                    analysisBands[currentBandToAlter][1]->cH = analysisBands[currentBandToAlter][0]->cH;
 8015ab4:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 8015ab8:	6859      	ldr	r1, [r3, #4]
 8015aba:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8015abc:	6248      	str	r0, [r1, #36]	; 0x24
                    analysisBands[currentBandToAlter][1]->h = analysisBands[currentBandToAlter][0]->h;
 8015abe:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 8015ac2:	6859      	ldr	r1, [r3, #4]
 8015ac4:	6980      	ldr	r0, [r0, #24]
 8015ac6:	6188      	str	r0, [r1, #24]
                    analysisBands[currentBandToAlter][1]->g = analysisBands[currentBandToAlter][0]->g;
 8015ac8:	f857 1032 	ldr.w	r1, [r7, r2, lsl #3]
 8015acc:	685b      	ldr	r3, [r3, #4]
 8015ace:	6909      	ldr	r1, [r1, #16]
 8015ad0:	6119      	str	r1, [r3, #16]
                    analysisOrSynthesis++;
 8015ad2:	6a31      	ldr	r1, [r6, #32]
                if ((currentBandToAlter >= numberOfVocoderBands) && (analysisOrSynthesis == 0))
 8015ad4:	786b      	ldrb	r3, [r5, #1]
                    analysisOrSynthesis++;
 8015ad6:	3101      	adds	r1, #1
                if ((currentBandToAlter >= numberOfVocoderBands) && (analysisOrSynthesis == 0))
 8015ad8:	429a      	cmp	r2, r3
                    analysisOrSynthesis++;
 8015ada:	6231      	str	r1, [r6, #32]
                if ((currentBandToAlter >= numberOfVocoderBands) && (analysisOrSynthesis == 0))
 8015adc:	db02      	blt.n	8015ae4 <SFXVocoderChFrame+0x3c8>
 8015ade:	2900      	cmp	r1, #0
 8015ae0:	f000 80eb 	beq.w	8015cba <SFXVocoderChFrame+0x59e>
            prevNumberOfVocoderBands = numberOfVocoderBands;
 8015ae4:	742b      	strb	r3, [r5, #16]
            prevMyQ = myQ;
 8015ae6:	ed85 8a05 	vstr	s16, [r5, #20]
            prevWarpFactor = warpFactor;
 8015aea:	edc5 8a06 	vstr	s17, [r5, #24]
            prevBandSquish = bandSquish;
 8015aee:	ed85 9a07 	vstr	s18, [r5, #28]
            prevBandOffset = bandOffset;
 8015af2:	ed85 aa08 	vstr	s20, [r5, #32]
            prevMyTilt = myTilt;
 8015af6:	edc6 aa04 	vstr	s21, [r6, #16]
            prevBarkPull = barkPull;
 8015afa:	edc6 9a05 	vstr	s19, [r6, #20]
            for (int i = 0; i < numberOfVocoderBands; i++)
 8015afe:	b19b      	cbz	r3, 8015b28 <SFXVocoderChFrame+0x40c>
 8015b00:	4f4a      	ldr	r7, [pc, #296]	; (8015c2c <SFXVocoderChFrame+0x510>)
 8015b02:	2600      	movs	r6, #0
                tExpSmooth_setFactor(&envFollowers[i], (displayValues[9] * 0.0015f) + 0.0001f);
 8015b04:	eddf 8a4a 	vldr	s17, [pc, #296]	; 8015c30 <SFXVocoderChFrame+0x514>
 8015b08:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 8015c34 <SFXVocoderChFrame+0x518>
 8015b0c:	eeb0 0a48 	vmov.f32	s0, s16
 8015b10:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8015b14:	4638      	mov	r0, r7
            for (int i = 0; i < numberOfVocoderBands; i++)
 8015b16:	3601      	adds	r6, #1
 8015b18:	3704      	adds	r7, #4
                tExpSmooth_setFactor(&envFollowers[i], (displayValues[9] * 0.0015f) + 0.0001f);
 8015b1a:	eea7 0aa8 	vfma.f32	s0, s15, s17
 8015b1e:	f00c fc4d 	bl	80223bc <tExpSmooth_setFactor>
            for (int i = 0; i < numberOfVocoderBands; i++)
 8015b22:	786b      	ldrb	r3, [r5, #1]
 8015b24:	42b3      	cmp	r3, r6
 8015b26:	dcf1      	bgt.n	8015b0c <SFXVocoderChFrame+0x3f0>
            if (tSimplePoly_getNumActiveVoices(&poly) != 0)
 8015b28:	4843      	ldr	r0, [pc, #268]	; (8015c38 <SFXVocoderChFrame+0x51c>)
 8015b2a:	f00e ff59 	bl	80249e0 <tSimplePoly_getNumActiveVoices>
 8015b2e:	2800      	cmp	r0, #0
 8015b30:	f040 80c7 	bne.w	8015cc2 <SFXVocoderChFrame+0x5a6>
                tExpSmooth_setDest(&comp, 0.0f);
 8015b34:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8015c3c <SFXVocoderChFrame+0x520>
 8015b38:	4841      	ldr	r0, [pc, #260]	; (8015c40 <SFXVocoderChFrame+0x524>)
        }
 8015b3a:	b003      	add	sp, #12
 8015b3c:	ecbd 8b08 	vpop	{d8-d11}
 8015b40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                tExpSmooth_setDest(&comp, 0.0f);
 8015b44:	f00c bc4c 	b.w	80223e0 <tExpSmooth_setDest>
            if ((numberOfVocoderBands != prevNumberOfVocoderBands) || (myQ != prevMyQ) || (warpFactor != prevWarpFactor) || (bandSquish != prevBandSquish) || (bandOffset != prevBandOffset) || (myTilt != prevMyTilt) || (barkPull != prevBarkPull))
 8015b48:	edd5 7a05 	vldr	s15, [r5, #20]
 8015b4c:	eef4 7a48 	vcmp.f32	s15, s16
 8015b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b54:	f47f af14 	bne.w	8015980 <SFXVocoderChFrame+0x264>
 8015b58:	edd5 7a06 	vldr	s15, [r5, #24]
 8015b5c:	eef4 7a68 	vcmp.f32	s15, s17
 8015b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b64:	f47f af0c 	bne.w	8015980 <SFXVocoderChFrame+0x264>
 8015b68:	edd5 7a07 	vldr	s15, [r5, #28]
 8015b6c:	eef4 7a49 	vcmp.f32	s15, s18
 8015b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b74:	f47f af04 	bne.w	8015980 <SFXVocoderChFrame+0x264>
 8015b78:	edd5 7a08 	vldr	s15, [r5, #32]
 8015b7c:	eef4 7a4a 	vcmp.f32	s15, s20
 8015b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b84:	f47f aefc 	bne.w	8015980 <SFXVocoderChFrame+0x264>
 8015b88:	edd6 7a04 	vldr	s15, [r6, #16]
 8015b8c:	eef4 7a6a 	vcmp.f32	s15, s21
 8015b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b94:	f47f aef4 	bne.w	8015980 <SFXVocoderChFrame+0x264>
 8015b98:	edd6 7a05 	vldr	s15, [r6, #20]
 8015b9c:	eef4 7a69 	vcmp.f32	s15, s19
 8015ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ba4:	f47f aeec 	bne.w	8015980 <SFXVocoderChFrame+0x264>
            if (alteringBands)
 8015ba8:	69b2      	ldr	r2, [r6, #24]
 8015baa:	2a00      	cmp	r2, #0
 8015bac:	d09a      	beq.n	8015ae4 <SFXVocoderChFrame+0x3c8>
 8015bae:	4b18      	ldr	r3, [pc, #96]	; (8015c10 <SFXVocoderChFrame+0x4f4>)
 8015bb0:	4f18      	ldr	r7, [pc, #96]	; (8015c14 <SFXVocoderChFrame+0x4f8>)
 8015bb2:	edd3 7a00 	vldr	s15, [r3]
 8015bb6:	e70c      	b.n	80159d2 <SFXVocoderChFrame+0x2b6>
                internalExternal = !internalExternal;
 8015bb8:	7833      	ldrb	r3, [r6, #0]
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8015bba:	2200      	movs	r2, #0
                internalExternal = !internalExternal;
 8015bbc:	fab3 f383 	clz	r3, r3
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8015bc0:	7622      	strb	r2, [r4, #24]
                internalExternal = !internalExternal;
 8015bc2:	095b      	lsrs	r3, r3, #5
                setLED_B(internalExternal);
 8015bc4:	4618      	mov	r0, r3
                internalExternal = !internalExternal;
 8015bc6:	7033      	strb	r3, [r6, #0]
                setLED_B(internalExternal);
 8015bc8:	f7fd ff08 	bl	80139dc <setLED_B>
            if (buttonActionsSFX[ButtonC][ActionPress] == 1)
 8015bcc:	7f23      	ldrb	r3, [r4, #28]
 8015bce:	2b01      	cmp	r3, #1
 8015bd0:	f47f adca 	bne.w	8015768 <SFXVocoderChFrame+0x4c>
                vocChFreeze = !vocChFreeze;
 8015bd4:	68f3      	ldr	r3, [r6, #12]
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8015bd6:	2200      	movs	r2, #0
                vocChFreeze = !vocChFreeze;
 8015bd8:	fab3 f383 	clz	r3, r3
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8015bdc:	7722      	strb	r2, [r4, #28]
                vocChFreeze = !vocChFreeze;
 8015bde:	095b      	lsrs	r3, r3, #5
                setLED_C(vocChFreeze);
 8015be0:	4618      	mov	r0, r3
                vocChFreeze = !vocChFreeze;
 8015be2:	60f3      	str	r3, [r6, #12]
                setLED_C(vocChFreeze);
 8015be4:	f7fd ff08 	bl	80139f8 <setLED_C>
 8015be8:	e5be      	b.n	8015768 <SFXVocoderChFrame+0x4c>
 8015bea:	bf00      	nop
 8015bec:	2000065c 	.word	0x2000065c
 8015bf0:	2aaaaaab 	.word	0x2aaaaaab
 8015bf4:	20000664 	.word	0x20000664
 8015bf8:	2001731c 	.word	0x2001731c
 8015bfc:	20002888 	.word	0x20002888
 8015c00:	2001795c 	.word	0x2001795c
 8015c04:	3f7d70a4 	.word	0x3f7d70a4
 8015c08:	42bc0000 	.word	0x42bc0000
 8015c0c:	3daaaaab 	.word	0x3daaaaab
 8015c10:	20017554 	.word	0x20017554
 8015c14:	20002880 	.word	0x20002880
 8015c18:	200034a8 	.word	0x200034a8
 8015c1c:	459c4000 	.word	0x459c4000
 8015c20:	200172b8 	.word	0x200172b8
 8015c24:	467a0000 	.word	0x467a0000
 8015c28:	20018278 	.word	0x20018278
 8015c2c:	2001766c 	.word	0x2001766c
 8015c30:	3ac49ba6 	.word	0x3ac49ba6
 8015c34:	38d1b717 	.word	0x38d1b717
 8015c38:	20017560 	.word	0x20017560
 8015c3c:	00000000 	.word	0x00000000
 8015c40:	2001729c 	.word	0x2001729c
                    tVZFilter_setFreqAndBandwidth(&synthesisBands[currentBandToAlter][0], bandFreq * tempWarpFactor, bandBandwidth);
 8015c44:	4f29      	ldr	r7, [pc, #164]	; (8015cec <SFXVocoderChFrame+0x5d0>)
 8015c46:	ee2b 0a00 	vmul.f32	s0, s22, s0
 8015c4a:	4438      	add	r0, r7
 8015c4c:	f00d fb68 	bl	8023320 <tVZFilter_setFreqAndBandwidth>
                    synthesisBands[currentBandToAlter][1]->B = synthesisBands[currentBandToAlter][0]->B;
 8015c50:	69f3      	ldr	r3, [r6, #28]
                    analysisOrSynthesis = 0;
 8015c52:	f04f 0e00 	mov.w	lr, #0
                    synthesisBands[currentBandToAlter][1]->B = synthesisBands[currentBandToAlter][0]->B;
 8015c56:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015c5a:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
                    currentBandToAlter++;
 8015c5e:	f103 0c01 	add.w	ip, r3, #1
                    synthesisBands[currentBandToAlter][1]->B = synthesisBands[currentBandToAlter][0]->B;
 8015c62:	6851      	ldr	r1, [r2, #4]
 8015c64:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8015c66:	6348      	str	r0, [r1, #52]	; 0x34
                    synthesisBands[currentBandToAlter][1]->fc = synthesisBands[currentBandToAlter][0]->fc;
 8015c68:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015c6c:	6851      	ldr	r1, [r2, #4]
 8015c6e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015c70:	6288      	str	r0, [r1, #40]	; 0x28
                    synthesisBands[currentBandToAlter][1]->R2 = synthesisBands[currentBandToAlter][0]->R2;
 8015c72:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015c76:	6851      	ldr	r1, [r2, #4]
 8015c78:	6940      	ldr	r0, [r0, #20]
 8015c7a:	6148      	str	r0, [r1, #20]
                    synthesisBands[currentBandToAlter][1]->cL = synthesisBands[currentBandToAlter][0]->cL;
 8015c7c:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015c80:	6851      	ldr	r1, [r2, #4]
 8015c82:	69c0      	ldr	r0, [r0, #28]
 8015c84:	61c8      	str	r0, [r1, #28]
                    synthesisBands[currentBandToAlter][1]->cB = synthesisBands[currentBandToAlter][0]->cB;
 8015c86:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015c8a:	6851      	ldr	r1, [r2, #4]
 8015c8c:	6a00      	ldr	r0, [r0, #32]
 8015c8e:	6208      	str	r0, [r1, #32]
                    synthesisBands[currentBandToAlter][1]->cH = synthesisBands[currentBandToAlter][0]->cH;
 8015c90:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015c94:	6851      	ldr	r1, [r2, #4]
 8015c96:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8015c98:	6248      	str	r0, [r1, #36]	; 0x24
                    synthesisBands[currentBandToAlter][1]->h = synthesisBands[currentBandToAlter][0]->h;
 8015c9a:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 8015c9e:	6851      	ldr	r1, [r2, #4]
 8015ca0:	6980      	ldr	r0, [r0, #24]
 8015ca2:	6188      	str	r0, [r1, #24]
                    synthesisBands[currentBandToAlter][1]->g = synthesisBands[currentBandToAlter][0]->g;
 8015ca4:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8015ca8:	6853      	ldr	r3, [r2, #4]
 8015caa:	690a      	ldr	r2, [r1, #16]
 8015cac:	611a      	str	r2, [r3, #16]
                if ((currentBandToAlter >= numberOfVocoderBands) && (analysisOrSynthesis == 0))
 8015cae:	786b      	ldrb	r3, [r5, #1]
 8015cb0:	459c      	cmp	ip, r3
                    analysisOrSynthesis = 0;
 8015cb2:	e9c6 ce07 	strd	ip, lr, [r6, #28]
                if ((currentBandToAlter >= numberOfVocoderBands) && (analysisOrSynthesis == 0))
 8015cb6:	f6ff af15 	blt.w	8015ae4 <SFXVocoderChFrame+0x3c8>
                    alteringBands = 0;
 8015cba:	2200      	movs	r2, #0
                    currentBandToAlter = 0;
 8015cbc:	e9c6 2206 	strd	r2, r2, [r6, #24]
 8015cc0:	e710      	b.n	8015ae4 <SFXVocoderChFrame+0x3c8>
                tExpSmooth_setDest(&comp, sqrtf(1.0f / tSimplePoly_getNumActiveVoices(&poly)));
 8015cc2:	480b      	ldr	r0, [pc, #44]	; (8015cf0 <SFXVocoderChFrame+0x5d4>)
 8015cc4:	f00e fe8c 	bl	80249e0 <tSimplePoly_getNumActiveVoices>
 8015cc8:	ee07 0a90 	vmov	s15, r0
 8015ccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015cd0:	4808      	ldr	r0, [pc, #32]	; (8015cf4 <SFXVocoderChFrame+0x5d8>)
 8015cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015cd6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015cda:	eeb1 0ac0 	vsqrt.f32	s0, s0
        }
 8015cde:	b003      	add	sp, #12
 8015ce0:	ecbd 8b08 	vpop	{d8-d11}
 8015ce4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                tExpSmooth_setDest(&comp, 0.0f);
 8015ce8:	f00c bb7a 	b.w	80223e0 <tExpSmooth_setDest>
 8015cec:	20017468 	.word	0x20017468
 8015cf0:	20017560 	.word	0x20017560
 8015cf4:	2001729c 	.word	0x2001729c

08015cf8 <SFXVocoderChTick>:
        {
 8015cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cfc:	4605      	mov	r5, r0
            if (internalExternal == 1)
 8015cfe:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8015fc8 <SFXVocoderChTick+0x2d0>
            input[1] = tVZFilter_tick(&vocodec_highshelf, input[1]);
 8015d02:	4899      	ldr	r0, [pc, #612]	; (8015f68 <SFXVocoderChTick+0x270>)
        {
 8015d04:	ed2d 8b06 	vpush	{d8-d10}
 8015d08:	b083      	sub	sp, #12
            input[1] = tVZFilter_tick(&vocodec_highshelf, input[1]);
 8015d0a:	ed95 0a01 	vldr	s0, [r5, #4]
 8015d0e:	f00d f8b9 	bl	8022e84 <tVZFilter_tick>
            if (internalExternal == 1)
 8015d12:	f898 3000 	ldrb.w	r3, [r8]
            input[1] = tVZFilter_tick(&vocodec_highshelf, input[1]);
 8015d16:	ed85 0a01 	vstr	s0, [r5, #4]
            if (internalExternal == 1)
 8015d1a:	2b01      	cmp	r3, #1
 8015d1c:	f040 80a4 	bne.w	8015e68 <SFXVocoderChTick+0x170>
                sample = input[0];
 8015d20:	ed95 0a00 	vldr	s0, [r5]
 8015d24:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8015fcc <SFXVocoderChTick+0x2d4>
            sample = LEAF_tanh(sample);
 8015d28:	f00e f83e 	bl	8023da8 <LEAF_tanh>
            input[1] = input[1] * (displayValues[0] * 30.0f);
 8015d2c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
            sample = LEAF_tanh(sample);
 8015d30:	eeb0 9a40 	vmov.f32	s18, s0
            input[1] = input[1] * (displayValues[0] * 30.0f);
 8015d34:	ed99 0a00 	vldr	s0, [r9]
 8015d38:	edd5 7a01 	vldr	s15, [r5, #4]
 8015d3c:	ee20 0a07 	vmul.f32	s0, s0, s14
            for (int i = 0; i < numberOfVocoderBands; i++)
 8015d40:	4f8a      	ldr	r7, [pc, #552]	; (8015f6c <SFXVocoderChTick+0x274>)
            float output[2] = {0.0f, 0.0f};
 8015d42:	ed9f 8a8b 	vldr	s16, [pc, #556]	; 8015f70 <SFXVocoderChTick+0x278>
            for (int i = 0; i < numberOfVocoderBands; i++)
 8015d46:	787b      	ldrb	r3, [r7, #1]
            input[1] = input[1] * (displayValues[0] * 30.0f);
 8015d48:	ee20 0a27 	vmul.f32	s0, s0, s15
            float output[2] = {0.0f, 0.0f};
 8015d4c:	ed8d 8a00 	vstr	s16, [sp]
 8015d50:	ed8d 8a01 	vstr	s16, [sp, #4]
            input[1] = input[1] * (displayValues[0] * 30.0f);
 8015d54:	ed85 0a01 	vstr	s0, [r5, #4]
            for (int i = 0; i < numberOfVocoderBands; i++)
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	f000 8102 	beq.w	8015f62 <SFXVocoderChTick+0x26a>
 8015d5e:	f04f 0b00 	mov.w	fp, #0
                tempSamp = LEAF_clip(0.0f, tempSamp, 2.0f);
 8015d62:	eef0 9a48 	vmov.f32	s19, s16
 8015d66:	4e83      	ldr	r6, [pc, #524]	; (8015f74 <SFXVocoderChTick+0x27c>)
 8015d68:	46da      	mov	sl, fp
 8015d6a:	e02f      	b.n	8015dcc <SFXVocoderChTick+0xd4>
                tempSamp = tExpSmooth_tick(&envFollowers[i]);
 8015d6c:	4648      	mov	r0, r9
            for (int i = 0; i < numberOfVocoderBands; i++)
 8015d6e:	f10b 0b01 	add.w	fp, fp, #1
                tempSamp = tExpSmooth_tick(&envFollowers[i]);
 8015d72:	f00c fb3f 	bl	80223f4 <tExpSmooth_tick>
                tempSamp = LEAF_clip(0.0f, tempSamp, 2.0f);
 8015d76:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8015d7a:	eef0 0a40 	vmov.f32	s1, s0
 8015d7e:	eeb0 0a69 	vmov.f32	s0, s19
 8015d82:	f00d ffc1 	bl	8023d08 <LEAF_clip>
                tempSynth = tVZFilter_tickEfficient(&synthesisBands[i][0], tempSynth);
 8015d86:	4b7c      	ldr	r3, [pc, #496]	; (8015f78 <SFXVocoderChTick+0x280>)
                tempSamp = LEAF_clip(0.0f, tempSamp, 2.0f);
 8015d88:	eef0 8a40 	vmov.f32	s17, s0
                tempSynth = tVZFilter_tickEfficient(&synthesisBands[i][0], tempSynth);
 8015d8c:	1918      	adds	r0, r3, r4
 8015d8e:	eeb0 0a49 	vmov.f32	s0, s18
 8015d92:	f00d f8b5 	bl	8022f00 <tVZFilter_tickEfficient>
                tempSynth = tVZFilter_tickEfficient(&synthesisBands[i][1], tempSynth);
 8015d96:	4b79      	ldr	r3, [pc, #484]	; (8015f7c <SFXVocoderChTick+0x284>)
 8015d98:	1918      	adds	r0, r3, r4
 8015d9a:	f00d f8b1 	bl	8022f00 <tVZFilter_tickEfficient>
                output[oddEven] += tempSynth * tempSamp * bandGains[i];
 8015d9e:	ee28 0a80 	vmul.f32	s0, s17, s0
 8015da2:	ecf6 7a01 	vldmia	r6!, {s15}
 8015da6:	ab02      	add	r3, sp, #8
 8015da8:	a902      	add	r1, sp, #8
 8015daa:	eea0 8a27 	vfma.f32	s16, s0, s15
 8015dae:	eb03 028a 	add.w	r2, r3, sl, lsl #2
            for (int i = 0; i < numberOfVocoderBands; i++)
 8015db2:	787b      	ldrb	r3, [r7, #1]
 8015db4:	f00b 0a01 	and.w	sl, fp, #1
 8015db8:	455b      	cmp	r3, fp
 8015dba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
                output[oddEven] += tempSynth * tempSamp * bandGains[i];
 8015dbe:	ed02 8a02 	vstr	s16, [r2, #-8]
            for (int i = 0; i < numberOfVocoderBands; i++)
 8015dc2:	dd1a      	ble.n	8015dfa <SFXVocoderChTick+0x102>
 8015dc4:	ed11 8a02 	vldr	s16, [r1, #-8]
 8015dc8:	ed95 0a01 	vldr	s0, [r5, #4]
 8015dcc:	4a6c      	ldr	r2, [pc, #432]	; (8015f80 <SFXVocoderChTick+0x288>)
 8015dce:	ea4f 04cb 	mov.w	r4, fp, lsl #3
                if (!vocChFreeze)
 8015dd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015dd6:	eb02 098b 	add.w	r9, r2, fp, lsl #2
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d1c6      	bne.n	8015d6c <SFXVocoderChTick+0x74>
                    tempSamp = tVZFilter_tickEfficient(&analysisBands[i][0], tempSamp);
 8015dde:	4b69      	ldr	r3, [pc, #420]	; (8015f84 <SFXVocoderChTick+0x28c>)
 8015de0:	1918      	adds	r0, r3, r4
 8015de2:	f00d f88d 	bl	8022f00 <tVZFilter_tickEfficient>
                    tempSamp = tVZFilter_tickEfficient(&analysisBands[i][1], tempSamp);
 8015de6:	4b68      	ldr	r3, [pc, #416]	; (8015f88 <SFXVocoderChTick+0x290>)
 8015de8:	1918      	adds	r0, r3, r4
 8015dea:	f00d f889 	bl	8022f00 <tVZFilter_tickEfficient>
                    tExpSmooth_setDest(&envFollowers[i], fabsf(tempSamp));
 8015dee:	4648      	mov	r0, r9
 8015df0:	eeb0 0ac0 	vabs.f32	s0, s0
 8015df4:	f00c faf4 	bl	80223e0 <tExpSmooth_setDest>
 8015df8:	e7b8      	b.n	8015d6c <SFXVocoderChTick+0x74>
 8015dfa:	ed9d 9a00 	vldr	s18, [sp]
 8015dfe:	ed9d 8a01 	vldr	s16, [sp, #4]
            float finalSample1 = tHighpass_tick(&chVocFinalHP1, (output[0] + (output[1] * oneMinusStereo)) * chVocOutputGain);
 8015e02:	eeb0 0a49 	vmov.f32	s0, s18
 8015e06:	ed97 7a02 	vldr	s14, [r7, #8]
 8015e0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8015e0e:	485f      	ldr	r0, [pc, #380]	; (8015f8c <SFXVocoderChTick+0x294>)
 8015e10:	eea7 0a08 	vfma.f32	s0, s14, s16
            input[0] = 0.98f * tanhf(finalSample1);
 8015e14:	eddf 8a5e 	vldr	s17, [pc, #376]	; 8015f90 <SFXVocoderChTick+0x298>
            float finalSample1 = tHighpass_tick(&chVocFinalHP1, (output[0] + (output[1] * oneMinusStereo)) * chVocOutputGain);
 8015e18:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015e1c:	f00c fe22 	bl	8022a64 <tHighpass_tick>
            float finalSample2 = tHighpass_tick(&chVocFinalHP2, (output[1] + (output[0] * oneMinusStereo)) * chVocOutputGain);
 8015e20:	edd7 7a02 	vldr	s15, [r7, #8]
            float finalSample1 = tHighpass_tick(&chVocFinalHP1, (output[0] + (output[1] * oneMinusStereo)) * chVocOutputGain);
 8015e24:	eef0 9a40 	vmov.f32	s19, s0
            float finalSample2 = tHighpass_tick(&chVocFinalHP2, (output[1] + (output[0] * oneMinusStereo)) * chVocOutputGain);
 8015e28:	ed97 0a03 	vldr	s0, [r7, #12]
 8015e2c:	eea7 8a89 	vfma.f32	s16, s15, s18
 8015e30:	4858      	ldr	r0, [pc, #352]	; (8015f94 <SFXVocoderChTick+0x29c>)
 8015e32:	ee28 0a00 	vmul.f32	s0, s16, s0
 8015e36:	f00c fe15 	bl	8022a64 <tHighpass_tick>
 8015e3a:	eeb0 8a40 	vmov.f32	s16, s0
            input[0] = 0.98f * tanhf(finalSample1);
 8015e3e:	eeb0 0a69 	vmov.f32	s0, s19
 8015e42:	f011 fc6f 	bl	8027724 <tanhf>
 8015e46:	ee60 7a28 	vmul.f32	s15, s0, s17
            input[1] = 0.98f * tanhf(finalSample2);
 8015e4a:	eeb0 0a48 	vmov.f32	s0, s16
            input[0] = 0.98f * tanhf(finalSample1);
 8015e4e:	edc5 7a00 	vstr	s15, [r5]
            input[1] = 0.98f * tanhf(finalSample2);
 8015e52:	f011 fc67 	bl	8027724 <tanhf>
 8015e56:	ee20 0a28 	vmul.f32	s0, s0, s17
 8015e5a:	ed85 0a01 	vstr	s0, [r5, #4]
        }
 8015e5e:	b003      	add	sp, #12
 8015e60:	ecbd 8b06 	vpop	{d8-d10}
 8015e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                float zerocross = tZeroCrossing_tick(&zerox, input[1]);
 8015e68:	484b      	ldr	r0, [pc, #300]	; (8015f98 <SFXVocoderChTick+0x2a0>)
 8015e6a:	f008 fce5 	bl	801e838 <tZeroCrossing_tick>
                if (!vocChFreeze)
 8015e6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
                    tExpSmooth_setDest(&noiseRamp,zerocross > ((displayValues[4])-0.1f));
 8015e72:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8015fcc <SFXVocoderChTick+0x2d4>
                if (!vocChFreeze)
 8015e76:	b9ab      	cbnz	r3, 8015ea4 <SFXVocoderChTick+0x1ac>
                    tExpSmooth_setDest(&noiseRamp,zerocross > ((displayValues[4])-0.1f));
 8015e78:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8015f9c <SFXVocoderChTick+0x2a4>
 8015e7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015e80:	edd9 7a04 	vldr	s15, [r9, #16]
 8015e84:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8015f70 <SFXVocoderChTick+0x278>
 8015e88:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015e8c:	4844      	ldr	r0, [pc, #272]	; (8015fa0 <SFXVocoderChTick+0x2a8>)
 8015e8e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8015e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e96:	bf54      	ite	pl
 8015e98:	eeb0 0a47 	vmovpl.f32	s0, s14
 8015e9c:	eeb0 0a66 	vmovmi.f32	s0, s13
 8015ea0:	f00c fa9e 	bl	80223e0 <tExpSmooth_setDest>
                float noiseRampVal = tExpSmooth_tick(&noiseRamp);
 8015ea4:	483e      	ldr	r0, [pc, #248]	; (8015fa0 <SFXVocoderChTick+0x2a8>)
                for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015ea6:	2400      	movs	r4, #0
                float noiseRampVal = tExpSmooth_tick(&noiseRamp);
 8015ea8:	f00c faa4 	bl	80223f4 <tExpSmooth_tick>
 8015eac:	eeb0 aa40 	vmov.f32	s20, s0
                float noiseSample = tNoise_tick(&vocoderNoise) * noiseRampVal;
 8015eb0:	483c      	ldr	r0, [pc, #240]	; (8015fa4 <SFXVocoderChTick+0x2ac>)
 8015eb2:	f00e ff13 	bl	8024cdc <tNoise_tick>
            float sample = 0.0f;
 8015eb6:	ed9f 9a2e 	vldr	s18, [pc, #184]	; 8015f70 <SFXVocoderChTick+0x278>
                float noiseSample = tNoise_tick(&vocoderNoise) * noiseRampVal;
 8015eba:	ee60 8a0a 	vmul.f32	s17, s0, s20
                for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015ebe:	f8df a110 	ldr.w	sl, [pc, #272]	; 8015fd0 <SFXVocoderChTick+0x2d8>
                    float tempRamp = tExpSmooth_tick(&polyRamp[i]);
 8015ec2:	4f39      	ldr	r7, [pc, #228]	; (8015fa8 <SFXVocoderChTick+0x2b0>)
                    if (tempRamp > 0.0001f)
 8015ec4:	eddf 9a39 	vldr	s19, [pc, #228]	; 8015fac <SFXVocoderChTick+0x2b4>
                for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015ec8:	e005      	b.n	8015ed6 <SFXVocoderChTick+0x1de>
                            sample += tSawtooth_tick(&osc[i]) * tempRamp;
 8015eca:	1998      	adds	r0, r3, r6
 8015ecc:	f00e fe94 	bl	8024bf8 <tSawtooth_tick>
 8015ed0:	eea0 9a08 	vfma.f32	s18, s0, s16
                for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015ed4:	3401      	adds	r4, #1
 8015ed6:	4650      	mov	r0, sl
 8015ed8:	00a6      	lsls	r6, r4, #2
 8015eda:	f00e fd7d 	bl	80249d8 <tSimplePoly_getNumVoices>
 8015ede:	42a0      	cmp	r0, r4
                    float tempRamp = tExpSmooth_tick(&polyRamp[i]);
 8015ee0:	eb07 0006 	add.w	r0, r7, r6
                for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8015ee4:	dd19      	ble.n	8015f1a <SFXVocoderChTick+0x222>
                    float tempRamp = tExpSmooth_tick(&polyRamp[i]);
 8015ee6:	f00c fa85 	bl	80223f4 <tExpSmooth_tick>
                    if (tempRamp > 0.0001f)
 8015eea:	eeb4 0ae9 	vcmpe.f32	s0, s19
                    float tempRamp = tExpSmooth_tick(&polyRamp[i]);
 8015eee:	eeb0 8a40 	vmov.f32	s16, s0
                        if (displayValues[5] < 0.5f)
 8015ef2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                    if (tempRamp > 0.0001f)
 8015ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015efa:	ddeb      	ble.n	8015ed4 <SFXVocoderChTick+0x1dc>
                        if (displayValues[5] < 0.5f)
 8015efc:	ed99 7a05 	vldr	s14, [r9, #20]
                            sample += tRosenbergGlottalPulse_tick(&glottal[i]) * tempRamp;
 8015f00:	482b      	ldr	r0, [pc, #172]	; (8015fb0 <SFXVocoderChTick+0x2b8>)
                        if (displayValues[5] < 0.5f)
 8015f02:	eeb4 7ae7 	vcmpe.f32	s14, s15
                            sample += tSawtooth_tick(&osc[i]) * tempRamp;
 8015f06:	4b2b      	ldr	r3, [pc, #172]	; (8015fb4 <SFXVocoderChTick+0x2bc>)
                            sample += tRosenbergGlottalPulse_tick(&glottal[i]) * tempRamp;
 8015f08:	4430      	add	r0, r6
                        if (displayValues[5] < 0.5f)
 8015f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f0e:	d4dc      	bmi.n	8015eca <SFXVocoderChTick+0x1d2>
                            sample += tRosenbergGlottalPulse_tick(&glottal[i]) * tempRamp;
 8015f10:	f00a fcc4 	bl	802089c <tRosenbergGlottalPulse_tick>
 8015f14:	eea0 9a08 	vfma.f32	s18, s0, s16
 8015f18:	e7dc      	b.n	8015ed4 <SFXVocoderChTick+0x1dc>
                sample = (sample * (1.0f - (0.3f * displayValues[8])) * (1.0f-noiseRampVal)) + noiseSample;
 8015f1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015f1e:	edd9 6a08 	vldr	s13, [r9, #32]
 8015f22:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8015fb8 <SFXVocoderChTick+0x2c0>
                sample += (tHighpass_tick(&noiseHP, tNoise_tick(&breathNoise)) * displayValues[8] * 2.0f);
 8015f26:	4825      	ldr	r0, [pc, #148]	; (8015fbc <SFXVocoderChTick+0x2c4>)
                sample = (sample * (1.0f - (0.3f * displayValues[8])) * (1.0f-noiseRampVal)) + noiseSample;
 8015f28:	eeb0 8a67 	vmov.f32	s16, s15
 8015f2c:	ee77 7aca 	vsub.f32	s15, s15, s20
 8015f30:	eea6 8ac7 	vfms.f32	s16, s13, s14
 8015f34:	ee28 8a27 	vmul.f32	s16, s16, s15
                sample += (tHighpass_tick(&noiseHP, tNoise_tick(&breathNoise)) * displayValues[8] * 2.0f);
 8015f38:	f00e fed0 	bl	8024cdc <tNoise_tick>
 8015f3c:	4820      	ldr	r0, [pc, #128]	; (8015fc0 <SFXVocoderChTick+0x2c8>)
 8015f3e:	f00c fd91 	bl	8022a64 <tHighpass_tick>
 8015f42:	edd9 7a08 	vldr	s15, [r9, #32]
                sample *= tExpSmooth_tick(&comp);
 8015f46:	481f      	ldr	r0, [pc, #124]	; (8015fc4 <SFXVocoderChTick+0x2cc>)
                sample += (tHighpass_tick(&noiseHP, tNoise_tick(&breathNoise)) * displayValues[8] * 2.0f);
 8015f48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015f4c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015f50:	eee9 7a08 	vfma.f32	s15, s18, s16
 8015f54:	ee78 8aa7 	vadd.f32	s17, s17, s15
                sample *= tExpSmooth_tick(&comp);
 8015f58:	f00c fa4c 	bl	80223f4 <tExpSmooth_tick>
 8015f5c:	ee28 0a80 	vmul.f32	s0, s17, s0
 8015f60:	e6e2      	b.n	8015d28 <SFXVocoderChTick+0x30>
            for (int i = 0; i < numberOfVocoderBands; i++)
 8015f62:	eeb0 9a48 	vmov.f32	s18, s16
 8015f66:	e74c      	b.n	8015e02 <SFXVocoderChTick+0x10a>
 8015f68:	20017630 	.word	0x20017630
 8015f6c:	20000040 	.word	0x20000040
 8015f70:	00000000 	.word	0x00000000
 8015f74:	200172b8 	.word	0x200172b8
 8015f78:	20017468 	.word	0x20017468
 8015f7c:	2001746c 	.word	0x2001746c
 8015f80:	2001766c 	.word	0x2001766c
 8015f84:	20018278 	.word	0x20018278
 8015f88:	2001827c 	.word	0x2001827c
 8015f8c:	2000287c 	.word	0x2000287c
 8015f90:	3f7ae148 	.word	0x3f7ae148
 8015f94:	2001826c 	.word	0x2001826c
 8015f98:	200176d0 	.word	0x200176d0
 8015f9c:	3dcccccd 	.word	0x3dcccccd
 8015fa0:	20018268 	.word	0x20018268
 8015fa4:	200034a4 	.word	0x200034a4
 8015fa8:	2001795c 	.word	0x2001795c
 8015fac:	38d1b717 	.word	0x38d1b717
 8015fb0:	20002888 	.word	0x20002888
 8015fb4:	2001731c 	.word	0x2001731c
 8015fb8:	3e99999a 	.word	0x3e99999a
 8015fbc:	20002858 	.word	0x20002858
 8015fc0:	2000349c 	.word	0x2000349c
 8015fc4:	2001729c 	.word	0x2001729c
 8015fc8:	20000548 	.word	0x20000548
 8015fcc:	200187d4 	.word	0x200187d4
 8015fd0:	20017560 	.word	0x20017560

08015fd4 <SFXVocoderChFree>:
        {
 8015fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fd6:	4c1f      	ldr	r4, [pc, #124]	; (8016054 <SFXVocoderChFree+0x80>)
 8015fd8:	4d1f      	ldr	r5, [pc, #124]	; (8016058 <SFXVocoderChFree+0x84>)
 8015fda:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 8015fde:	4e1f      	ldr	r6, [pc, #124]	; (801605c <SFXVocoderChFree+0x88>)
                tVZFilter_free(&analysisBands[i][0]);
 8015fe0:	4620      	mov	r0, r4
 8015fe2:	f00c ff41 	bl	8022e68 <tVZFilter_free>
                tVZFilter_free(&analysisBands[i][1]);
 8015fe6:	1d20      	adds	r0, r4, #4
 8015fe8:	f00c ff3e 	bl	8022e68 <tVZFilter_free>
                tVZFilter_free(&synthesisBands[i][0]);
 8015fec:	1f28      	subs	r0, r5, #4
 8015fee:	f00c ff3b 	bl	8022e68 <tVZFilter_free>
 8015ff2:	3408      	adds	r4, #8
                tVZFilter_free(&synthesisBands[i][1]);
 8015ff4:	4628      	mov	r0, r5
 8015ff6:	3508      	adds	r5, #8
 8015ff8:	f00c ff36 	bl	8022e68 <tVZFilter_free>
                tExpSmooth_free(&envFollowers[i]);
 8015ffc:	4630      	mov	r0, r6
 8015ffe:	f00c f9d9 	bl	80223b4 <tExpSmooth_free>
            for (int i = 0; i < MAX_NUM_VOCODER_BANDS; i++)
 8016002:	42a7      	cmp	r7, r4
 8016004:	f106 0604 	add.w	r6, r6, #4
 8016008:	d1ea      	bne.n	8015fe0 <SFXVocoderChFree+0xc>
            tNoise_free(&breathNoise);
 801600a:	4815      	ldr	r0, [pc, #84]	; (8016060 <SFXVocoderChFree+0x8c>)
            tHighpass_free(&chVocFinalHP2);
 801600c:	2400      	movs	r4, #0
            tNoise_free(&breathNoise);
 801600e:	f00e fe61 	bl	8024cd4 <tNoise_free>
            tNoise_free(&vocoderNoise);
 8016012:	4814      	ldr	r0, [pc, #80]	; (8016064 <SFXVocoderChFree+0x90>)
 8016014:	f00e fe5e 	bl	8024cd4 <tNoise_free>
            tZeroCrossing_free(&zerox);
 8016018:	4813      	ldr	r0, [pc, #76]	; (8016068 <SFXVocoderChFree+0x94>)
 801601a:	f008 fbfd 	bl	801e818 <tZeroCrossing_free>
            tExpSmooth_free(&noiseRamp);
 801601e:	4813      	ldr	r0, [pc, #76]	; (801606c <SFXVocoderChFree+0x98>)
 8016020:	f00c f9c8 	bl	80223b4 <tExpSmooth_free>
            tHighpass_free(&noiseHP);
 8016024:	4812      	ldr	r0, [pc, #72]	; (8016070 <SFXVocoderChFree+0x9c>)
 8016026:	f00c fd09 	bl	8022a3c <tHighpass_free>
            tVZFilter_free(&vocodec_highshelf);
 801602a:	4812      	ldr	r0, [pc, #72]	; (8016074 <SFXVocoderChFree+0xa0>)
 801602c:	f00c ff1c 	bl	8022e68 <tVZFilter_free>
            tHighpass_free(&chVocFinalHP1);
 8016030:	4811      	ldr	r0, [pc, #68]	; (8016078 <SFXVocoderChFree+0xa4>)
 8016032:	f00c fd03 	bl	8022a3c <tHighpass_free>
            tHighpass_free(&chVocFinalHP2);
 8016036:	4811      	ldr	r0, [pc, #68]	; (801607c <SFXVocoderChFree+0xa8>)
 8016038:	4e11      	ldr	r6, [pc, #68]	; (8016080 <SFXVocoderChFree+0xac>)
 801603a:	4d12      	ldr	r5, [pc, #72]	; (8016084 <SFXVocoderChFree+0xb0>)
 801603c:	f00c fcfe 	bl	8022a3c <tHighpass_free>
                tSawtooth_free(&osc[i]);
 8016040:	1930      	adds	r0, r6, r4
 8016042:	f00e fda3 	bl	8024b8c <tSawtooth_free>
                tRosenbergGlottalPulse_free(&glottal[i]);
 8016046:	1928      	adds	r0, r5, r4
 8016048:	3404      	adds	r4, #4
 801604a:	f00a fc23 	bl	8020894 <tRosenbergGlottalPulse_free>
            for (int i = 0; i < NUM_VOC_VOICES; i++)
 801604e:	2c20      	cmp	r4, #32
 8016050:	d1f6      	bne.n	8016040 <SFXVocoderChFree+0x6c>
        }
 8016052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016054:	20018278 	.word	0x20018278
 8016058:	2001746c 	.word	0x2001746c
 801605c:	2001766c 	.word	0x2001766c
 8016060:	20002858 	.word	0x20002858
 8016064:	200034a4 	.word	0x200034a4
 8016068:	200176d0 	.word	0x200176d0
 801606c:	20018268 	.word	0x20018268
 8016070:	2000349c 	.word	0x2000349c
 8016074:	20017630 	.word	0x20017630
 8016078:	2000287c 	.word	0x2000287c
 801607c:	2001826c 	.word	0x2001826c
 8016080:	2001731c 	.word	0x2001731c
 8016084:	20002888 	.word	0x20002888

08016088 <SFXPitchShiftAlloc>:
        {
 8016088:	b510      	push	{r4, lr}
            tFormantShifter_initToPool(&fs, 7, &smallPool);
 801608a:	4a22      	ldr	r2, [pc, #136]	; (8016114 <SFXPitchShiftAlloc+0x8c>)
 801608c:	2107      	movs	r1, #7
 801608e:	4822      	ldr	r0, [pc, #136]	; (8016118 <SFXPitchShiftAlloc+0x90>)
            tRamp_init(&pitchshiftRamp, 100.0f, 1);
 8016090:	4c22      	ldr	r4, [pc, #136]	; (801611c <SFXPitchShiftAlloc+0x94>)
        {
 8016092:	ed2d 8b02 	vpush	{d8}
            tFormantShifter_initToPool(&fs, 7, &smallPool);
 8016096:	f00b fadf 	bl	8021658 <tFormantShifter_initToPool>
            tRetune_init(&retune, NUM_RETUNE, 1024, 512);
 801609a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801609e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80160a2:	2101      	movs	r1, #1
 80160a4:	481e      	ldr	r0, [pc, #120]	; (8016120 <SFXPitchShiftAlloc+0x98>)
 80160a6:	f00a ff65 	bl	8020f74 <tRetune_init>
            tRetune_init(&retune2, NUM_RETUNE, 1024, 512);
 80160aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80160ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80160b2:	2101      	movs	r1, #1
 80160b4:	481b      	ldr	r0, [pc, #108]	; (8016124 <SFXPitchShiftAlloc+0x9c>)
 80160b6:	f00a ff5d 	bl	8020f74 <tRetune_init>
            tRamp_init(&pitchshiftRamp, 100.0f, 1);
 80160ba:	4620      	mov	r0, r4
 80160bc:	2101      	movs	r1, #1
 80160be:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8016128 <SFXPitchShiftAlloc+0xa0>
 80160c2:	f00c f873 	bl	80221ac <tRamp_init>
            tExpSmooth_init(&smoother1, 0.0f, 0.01f);
 80160c6:	eddf 8a19 	vldr	s17, [pc, #100]	; 801612c <SFXPitchShiftAlloc+0xa4>
 80160ca:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8016130 <SFXPitchShiftAlloc+0xa8>
            tRamp_setVal(&pitchshiftRamp, 1.0f);
 80160ce:	4620      	mov	r0, r4
 80160d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80160d4:	f00c f8e4 	bl	80222a0 <tRamp_setVal>
            tSimplePoly_setNumVoices(&poly, 1);
 80160d8:	2101      	movs	r1, #1
 80160da:	4816      	ldr	r0, [pc, #88]	; (8016134 <SFXPitchShiftAlloc+0xac>)
 80160dc:	f00e fc74 	bl	80249c8 <tSimplePoly_setNumVoices>
            tExpSmooth_init(&smoother1, 0.0f, 0.01f);
 80160e0:	eef0 0a68 	vmov.f32	s1, s17
 80160e4:	eeb0 0a48 	vmov.f32	s0, s16
 80160e8:	4813      	ldr	r0, [pc, #76]	; (8016138 <SFXPitchShiftAlloc+0xb0>)
 80160ea:	f00c f913 	bl	8022314 <tExpSmooth_init>
            tExpSmooth_init(&smoother2, 0.0f, 0.01f);
 80160ee:	eef0 0a68 	vmov.f32	s1, s17
 80160f2:	eeb0 0a48 	vmov.f32	s0, s16
 80160f6:	4811      	ldr	r0, [pc, #68]	; (801613c <SFXPitchShiftAlloc+0xb4>)
 80160f8:	f00c f90c 	bl	8022314 <tExpSmooth_init>
            tExpSmooth_init(&smoother3, 0.0f, 0.01f);
 80160fc:	eef0 0a68 	vmov.f32	s1, s17
 8016100:	eeb0 0a48 	vmov.f32	s0, s16
 8016104:	480e      	ldr	r0, [pc, #56]	; (8016140 <SFXPitchShiftAlloc+0xb8>)
        }
 8016106:	ecbd 8b02 	vpop	{d8}
 801610a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            tExpSmooth_init(&smoother3, 0.0f, 0.01f);
 801610e:	f00c b901 	b.w	8022314 <tExpSmooth_init>
 8016112:	bf00      	nop
 8016114:	20018338 	.word	0x20018338
 8016118:	200029a4 	.word	0x200029a4
 801611c:	200176d4 	.word	0x200176d4
 8016120:	200026c8 	.word	0x200026c8
 8016124:	2001788c 	.word	0x2001788c
 8016128:	42c80000 	.word	0x42c80000
 801612c:	3c23d70a 	.word	0x3c23d70a
 8016130:	00000000 	.word	0x00000000
 8016134:	20017560 	.word	0x20017560
 8016138:	20002884 	.word	0x20002884
 801613c:	20017080 	.word	0x20017080
 8016140:	200177c0 	.word	0x200177c0

08016144 <SFXPitchShiftFrame>:
        }
 8016144:	4770      	bx	lr
 8016146:	bf00      	nop

08016148 <SFXPitchShiftTick>:
        {
 8016148:	b570      	push	{r4, r5, r6, lr}
 801614a:	ed2d 8b04 	vpush	{d8-d9}
            float myPitchFactorFine = ((presetKnobValues[Pitchshift][1]*2.0f) - 1.0f) * 0.1f;
 801614e:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 8016152:	4e60      	ldr	r6, [pc, #384]	; (80162d4 <SFXPitchShiftTick+0x18c>)
 8016154:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
            float myPitchFactorCombined = myPitchFactorFine + myPitchFactorCoarse;
 8016158:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80162d8 <SFXPitchShiftTick+0x190>
            float myPitchFactorFine = ((presetKnobValues[Pitchshift][1]*2.0f) - 1.0f) * 0.1f;
 801615c:	edd6 6a33 	vldr	s13, [r6, #204]	; 0xcc
        {
 8016160:	b082      	sub	sp, #8
            float myPitchFactorFine = ((presetKnobValues[Pitchshift][1]*2.0f) - 1.0f) * 0.1f;
 8016162:	eef0 5a48 	vmov.f32	s11, s16
            float myPitchFactorCoarse = (presetKnobValues[Pitchshift][0]*2.0f) - 1.0f;
 8016166:	ed96 6a32 	vldr	s12, [r6, #200]	; 0xc8
            displayValues[0] = myPitchFactorCombined;
 801616a:	4c5c      	ldr	r4, [pc, #368]	; (80162dc <SFXPitchShiftTick+0x194>)
        {
 801616c:	4605      	mov	r5, r0
            float myPitchFactorCoarse = (presetKnobValues[Pitchshift][0]*2.0f) - 1.0f;
 801616e:	eea6 8a27 	vfma.f32	s16, s12, s15
            float keyPitch = tSimplePoly_getPitchAndCheckActive(&poly, 0);
 8016172:	2100      	movs	r1, #0
            float myPitchFactorFine = ((presetKnobValues[Pitchshift][1]*2.0f) - 1.0f) * 0.1f;
 8016174:	eee6 5aa7 	vfma.f32	s11, s13, s15
            float keyPitch = tSimplePoly_getPitchAndCheckActive(&poly, 0);
 8016178:	4859      	ldr	r0, [pc, #356]	; (80162e0 <SFXPitchShiftTick+0x198>)
            float myPitchFactorCombined = myPitchFactorFine + myPitchFactorCoarse;
 801617a:	eea5 8a87 	vfma.f32	s16, s11, s14
            displayValues[0] = myPitchFactorCombined;
 801617e:	ed84 8a00 	vstr	s16, [r4]
            displayValues[1] = myPitchFactorCombined;
 8016182:	ed84 8a01 	vstr	s16, [r4, #4]
            float keyPitch = tSimplePoly_getPitchAndCheckActive(&poly, 0);
 8016186:	f00e fc49 	bl	8024a1c <tSimplePoly_getPitchAndCheckActive>
 801618a:	ee07 0a90 	vmov	s15, r0
 801618e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
            if (keyPitch >= 0)
 8016192:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801619a:	f280 8094 	bge.w	80162c6 <SFXPitchShiftTick+0x17e>
                keyPitch = 1.0f;
 801619e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            float myPitchFactor = fastexp2f(myPitchFactorCombined);
 80161a2:	eeb0 0a48 	vmov.f32	s0, s16
 80161a6:	f00d fcdd 	bl	8023b64 <fastexp2f>
            myPitchFactor *= keyPitch;
 80161aa:	ee68 8a80 	vmul.f32	s17, s17, s0
            tRetune_setPitchFactor(&retune, myPitchFactor, 0);
 80161ae:	2100      	movs	r1, #0
 80161b0:	484c      	ldr	r0, [pc, #304]	; (80162e4 <SFXPitchShiftTick+0x19c>)
            displayValues[3] = fastexp2f((presetKnobValues[Pitchshift][3]*2.0f) - 1.0f);
 80161b2:	eebf 9a00 	vmov.f32	s18, #240	; 0xbf800000 -1.0
            tRetune_setPitchFactor(&retune, myPitchFactor, 0);
 80161b6:	eeb0 0a68 	vmov.f32	s0, s17
 80161ba:	f00a fffb 	bl	80211b4 <tRetune_setPitchFactor>
            tRetune_setPitchFactor(&retune2, myPitchFactor, 0);
 80161be:	2100      	movs	r1, #0
 80161c0:	4849      	ldr	r0, [pc, #292]	; (80162e8 <SFXPitchShiftTick+0x1a0>)
 80161c2:	eeb0 0a68 	vmov.f32	s0, s17
 80161c6:	f00a fff5 	bl	80211b4 <tRetune_setPitchFactor>
            displayValues[2] = LEAF_clip( 0.0f,((presetKnobValues[Pitchshift][2]) * 3.0f) - 0.2f,3.0f);
 80161ca:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 80161ce:	edd6 7a34 	vldr	s15, [r6, #208]	; 0xd0
 80161d2:	eddf 0a46 	vldr	s1, [pc, #280]	; 80162ec <SFXPitchShiftTick+0x1a4>
 80161d6:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80162f0 <SFXPitchShiftTick+0x1a8>
 80161da:	eee7 0a81 	vfma.f32	s1, s15, s2
 80161de:	f00d fd93 	bl	8023d08 <LEAF_clip>
            displayValues[3] = fastexp2f((presetKnobValues[Pitchshift][3]*2.0f) - 1.0f);
 80161e2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
            displayValues[2] = LEAF_clip( 0.0f,((presetKnobValues[Pitchshift][2]) * 3.0f) - 0.2f,3.0f);
 80161e6:	ed84 0a02 	vstr	s0, [r4, #8]
            displayValues[3] = fastexp2f((presetKnobValues[Pitchshift][3]*2.0f) - 1.0f);
 80161ea:	eeb0 0a49 	vmov.f32	s0, s18
 80161ee:	ed96 7a35 	vldr	s14, [r6, #212]	; 0xd4
 80161f2:	eea7 0a27 	vfma.f32	s0, s14, s15
 80161f6:	f00d fcb5 	bl	8023b64 <fastexp2f>
            tExpSmooth_setDest(&smoother3, displayValues[2]);
 80161fa:	483e      	ldr	r0, [pc, #248]	; (80162f4 <SFXPitchShiftTick+0x1ac>)
            displayValues[3] = fastexp2f((presetKnobValues[Pitchshift][3]*2.0f) - 1.0f);
 80161fc:	ed84 0a03 	vstr	s0, [r4, #12]
            tExpSmooth_setDest(&smoother3, displayValues[2]);
 8016200:	ed94 0a02 	vldr	s0, [r4, #8]
 8016204:	f00c f8ec 	bl	80223e0 <tExpSmooth_setDest>
            tFormantShifter_setIntensity(&fs, tExpSmooth_tick(&smoother3)+.1f);
 8016208:	483a      	ldr	r0, [pc, #232]	; (80162f4 <SFXPitchShiftTick+0x1ac>)
 801620a:	f00c f8f3 	bl	80223f4 <tExpSmooth_tick>
 801620e:	eddf 7a32 	vldr	s15, [pc, #200]	; 80162d8 <SFXPitchShiftTick+0x190>
 8016212:	4839      	ldr	r0, [pc, #228]	; (80162f8 <SFXPitchShiftTick+0x1b0>)
 8016214:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016218:	f00b fcce 	bl	8021bb8 <tFormantShifter_setIntensity>
            tFormantShifter_setShiftFactor(&fs, displayValues[3]);
 801621c:	ed94 0a03 	vldr	s0, [r4, #12]
 8016220:	4835      	ldr	r0, [pc, #212]	; (80162f8 <SFXPitchShiftTick+0x1b0>)
 8016222:	f00b fcc5 	bl	8021bb0 <tFormantShifter_setShiftFactor>
            if (displayValues[2] > 0.01f)
 8016226:	eddf 7a35 	vldr	s15, [pc, #212]	; 80162fc <SFXPitchShiftTick+0x1b4>
 801622a:	ed94 7a02 	vldr	s14, [r4, #8]
                tRamp_setDest(&pitchshiftRamp, 1.0f);
 801622e:	4834      	ldr	r0, [pc, #208]	; (8016300 <SFXPitchShiftTick+0x1b8>)
            if (displayValues[2] > 0.01f)
 8016230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                tRamp_setDest(&pitchshiftRamp, -1.0f);
 8016238:	bfcc      	ite	gt
 801623a:	eeb0 0a49 	vmovgt.f32	s0, s18
                tRamp_setDest(&pitchshiftRamp, 1.0f);
 801623e:	eeb7 0a00 	vmovle.f32	s0, #112	; 0x3f800000  1.0
 8016242:	f00c f81f 	bl	8022284 <tRamp_setDest>
            float crossfadeVal = tRamp_tick(&pitchshiftRamp);
 8016246:	482e      	ldr	r0, [pc, #184]	; (8016300 <SFXPitchShiftTick+0x1b8>)
 8016248:	f00c f838 	bl	80222bc <tRamp_tick>
            LEAF_crossfade(crossfadeVal, myGains);
 801624c:	4668      	mov	r0, sp
 801624e:	f00d fcd7 	bl	8023c00 <LEAF_crossfade>
            tExpSmooth_setDest(&smoother1, myGains[0]);
 8016252:	ed9d 0a00 	vldr	s0, [sp]
 8016256:	482b      	ldr	r0, [pc, #172]	; (8016304 <SFXPitchShiftTick+0x1bc>)
 8016258:	f00c f8c2 	bl	80223e0 <tExpSmooth_setDest>
            tExpSmooth_setDest(&smoother2, myGains[1]);
 801625c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8016260:	4829      	ldr	r0, [pc, #164]	; (8016308 <SFXPitchShiftTick+0x1c0>)
 8016262:	f00c f8bd 	bl	80223e0 <tExpSmooth_setDest>
            float formantsample = tanhf(tFormantShifter_remove(&fs, input[1]));
 8016266:	4824      	ldr	r0, [pc, #144]	; (80162f8 <SFXPitchShiftTick+0x1b0>)
 8016268:	ed95 0a01 	vldr	s0, [r5, #4]
 801626c:	f00b faec 	bl	8021848 <tFormantShifter_remove>
 8016270:	f011 fa58 	bl	8027724 <tanhf>
            float* samples = tRetune_tick(&retune2, formantsample);
 8016274:	481c      	ldr	r0, [pc, #112]	; (80162e8 <SFXPitchShiftTick+0x1a0>)
 8016276:	f00a fec9 	bl	802100c <tRetune_tick>
            formantsample = samples[0];
 801627a:	ed90 8a00 	vldr	s16, [r0]
            samples = tRetune_tick(&retune, sample);
 801627e:	ed95 0a01 	vldr	s0, [r5, #4]
 8016282:	4818      	ldr	r0, [pc, #96]	; (80162e4 <SFXPitchShiftTick+0x19c>)
 8016284:	f00a fec2 	bl	802100c <tRetune_tick>
            formantsample = tanhf(tFormantShifter_add(&fs, formantsample)) * tExpSmooth_tick(&smoother2) ;
 8016288:	eeb0 0a48 	vmov.f32	s0, s16
            sample = samples[0];
 801628c:	ed90 8a00 	vldr	s16, [r0]
            formantsample = tanhf(tFormantShifter_add(&fs, formantsample)) * tExpSmooth_tick(&smoother2) ;
 8016290:	4819      	ldr	r0, [pc, #100]	; (80162f8 <SFXPitchShiftTick+0x1b0>)
 8016292:	f00b fb57 	bl	8021944 <tFormantShifter_add>
 8016296:	f011 fa45 	bl	8027724 <tanhf>
 801629a:	481b      	ldr	r0, [pc, #108]	; (8016308 <SFXPitchShiftTick+0x1c0>)
 801629c:	eeb0 9a40 	vmov.f32	s18, s0
 80162a0:	f00c f8a8 	bl	80223f4 <tExpSmooth_tick>
            sample = (sample * (tExpSmooth_tick(&smoother1))) +  formantsample;
 80162a4:	4817      	ldr	r0, [pc, #92]	; (8016304 <SFXPitchShiftTick+0x1bc>)
            formantsample = tanhf(tFormantShifter_add(&fs, formantsample)) * tExpSmooth_tick(&smoother2) ;
 80162a6:	eef0 8a40 	vmov.f32	s17, s0
            sample = (sample * (tExpSmooth_tick(&smoother1))) +  formantsample;
 80162aa:	f00c f8a3 	bl	80223f4 <tExpSmooth_tick>
 80162ae:	ee20 0a08 	vmul.f32	s0, s0, s16
 80162b2:	eea9 0a28 	vfma.f32	s0, s18, s17
            input[0] = sample;
 80162b6:	ed85 0a00 	vstr	s0, [r5]
            input[1] = sample;
 80162ba:	ed85 0a01 	vstr	s0, [r5, #4]
        }
 80162be:	b002      	add	sp, #8
 80162c0:	ecbd 8b04 	vpop	{d8-d9}
 80162c4:	bd70      	pop	{r4, r5, r6, pc}
                keyPitch = LEAF_midiToFrequency(keyPitch) * 0.003822629969419f ;
 80162c6:	eddf 8a11 	vldr	s17, [pc, #68]	; 801630c <SFXPitchShiftTick+0x1c4>
 80162ca:	f00d fe07 	bl	8023edc <LEAF_midiToFrequency>
 80162ce:	ee60 8a28 	vmul.f32	s17, s0, s17
 80162d2:	e766      	b.n	80161a2 <SFXPitchShiftTick+0x5a>
 80162d4:	20002d50 	.word	0x20002d50
 80162d8:	3dcccccd 	.word	0x3dcccccd
 80162dc:	200187d4 	.word	0x200187d4
 80162e0:	20017560 	.word	0x20017560
 80162e4:	200026c8 	.word	0x200026c8
 80162e8:	2001788c 	.word	0x2001788c
 80162ec:	be4ccccd 	.word	0xbe4ccccd
 80162f0:	00000000 	.word	0x00000000
 80162f4:	200177c0 	.word	0x200177c0
 80162f8:	200029a4 	.word	0x200029a4
 80162fc:	3c23d70a 	.word	0x3c23d70a
 8016300:	200176d4 	.word	0x200176d4
 8016304:	20002884 	.word	0x20002884
 8016308:	20017080 	.word	0x20017080
 801630c:	3b7a8517 	.word	0x3b7a8517

08016310 <SFXPitchShiftFree>:
        {
 8016310:	b508      	push	{r3, lr}
            tFormantShifter_free(&fs);
 8016312:	480b      	ldr	r0, [pc, #44]	; (8016340 <SFXPitchShiftFree+0x30>)
 8016314:	f00b fa5c 	bl	80217d0 <tFormantShifter_free>
            tRetune_free(&retune);
 8016318:	480a      	ldr	r0, [pc, #40]	; (8016344 <SFXPitchShiftFree+0x34>)
 801631a:	f00a fe35 	bl	8020f88 <tRetune_free>
            tRetune_free(&retune2);
 801631e:	480a      	ldr	r0, [pc, #40]	; (8016348 <SFXPitchShiftFree+0x38>)
 8016320:	f00a fe32 	bl	8020f88 <tRetune_free>
            tRamp_free(&pitchshiftRamp);
 8016324:	4809      	ldr	r0, [pc, #36]	; (801634c <SFXPitchShiftFree+0x3c>)
 8016326:	f00b ffa9 	bl	802227c <tRamp_free>
            tExpSmooth_free(&smoother1);
 801632a:	4809      	ldr	r0, [pc, #36]	; (8016350 <SFXPitchShiftFree+0x40>)
 801632c:	f00c f842 	bl	80223b4 <tExpSmooth_free>
            tExpSmooth_free(&smoother2);
 8016330:	4808      	ldr	r0, [pc, #32]	; (8016354 <SFXPitchShiftFree+0x44>)
 8016332:	f00c f83f 	bl	80223b4 <tExpSmooth_free>
            tExpSmooth_free(&smoother3);
 8016336:	4808      	ldr	r0, [pc, #32]	; (8016358 <SFXPitchShiftFree+0x48>)
        }
 8016338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            tExpSmooth_free(&smoother3);
 801633c:	f00c b83a 	b.w	80223b4 <tExpSmooth_free>
 8016340:	200029a4 	.word	0x200029a4
 8016344:	200026c8 	.word	0x200026c8
 8016348:	2001788c 	.word	0x2001788c
 801634c:	200176d4 	.word	0x200176d4
 8016350:	20002884 	.word	0x20002884
 8016354:	20017080 	.word	0x20017080
 8016358:	200177c0 	.word	0x200177c0

0801635c <SFXNeartuneAlloc>:
        {
 801635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            leaf.clearOnAllocation = 1;
 801635e:	2401      	movs	r4, #1
 8016360:	4d29      	ldr	r5, [pc, #164]	; (8016408 <SFXNeartuneAlloc+0xac>)
            tRetune_init(&autotuneMono, 1, 512, 256);
 8016362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016366:	4829      	ldr	r0, [pc, #164]	; (801640c <SFXNeartuneAlloc+0xb0>)
 8016368:	4621      	mov	r1, r4
 801636a:	f44f 7200 	mov.w	r2, #512	; 0x200
            leaf.clearOnAllocation = 1;
 801636e:	616c      	str	r4, [r5, #20]
            tRetune_init(&autotuneMono, 1, 512, 256);
 8016370:	f00a fe00 	bl	8020f74 <tRetune_init>
                float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8016374:	4b26      	ldr	r3, [pc, #152]	; (8016410 <SFXNeartuneAlloc+0xb4>)
            for (int i = 0; i < 128; i++)
 8016376:	2100      	movs	r1, #0
 8016378:	4826      	ldr	r0, [pc, #152]	; (8016414 <SFXNeartuneAlloc+0xb8>)
                float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801637a:	781f      	ldrb	r7, [r3, #0]
 801637c:	4e26      	ldr	r6, [pc, #152]	; (8016418 <SFXNeartuneAlloc+0xbc>)
 801637e:	4d27      	ldr	r5, [pc, #156]	; (801641c <SFXNeartuneAlloc+0xc0>)
                float tempNote = i;
 8016380:	ee07 1a90 	vmov	s15, r1
            for (int i = 0; i < 128; i++)
 8016384:	3101      	adds	r1, #1
                float tempNote = i;
 8016386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
            for (int i = 0; i < 128; i++)
 801638a:	2980      	cmp	r1, #128	; 0x80
                float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801638c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8016390:	ee17 3a90 	vmov	r3, s15
 8016394:	eba3 0307 	sub.w	r3, r3, r7
 8016398:	fb85 2403 	smull	r2, r4, r5, r3
 801639c:	ea4f 72e3 	mov.w	r2, r3, asr #31
 80163a0:	ebc2 0264 	rsb	r2, r2, r4, asr #1
 80163a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80163a8:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80163ac:	ee07 3a90 	vmov	s15, r3
 80163b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 80163b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80163b8:	ee17 3a90 	vmov	r3, s15
 80163bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80163c0:	edd3 7a00 	vldr	s15, [r3]
 80163c4:	ee77 7a87 	vadd.f32	s15, s15, s14
                notes[i] = tunedNote;
 80163c8:	ece0 7a01 	vstmia	r0!, {s15}
            for (int i = 0; i < 128; i++)
 80163cc:	d1d8      	bne.n	8016380 <SFXNeartuneAlloc+0x24>
            tExpSmooth_init(&neartune_smoother, 1.0f, .007f);
 80163ce:	eddf 0a14 	vldr	s1, [pc, #80]	; 8016420 <SFXNeartuneAlloc+0xc4>
 80163d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80163d6:	4813      	ldr	r0, [pc, #76]	; (8016424 <SFXNeartuneAlloc+0xc8>)
            setLED_A(autotuneChromatic);
 80163d8:	4c13      	ldr	r4, [pc, #76]	; (8016428 <SFXNeartuneAlloc+0xcc>)
            tExpSmooth_init(&neartune_smoother, 1.0f, .007f);
 80163da:	f00b ff9b 	bl	8022314 <tExpSmooth_init>
            tRamp_init(&nearWetRamp, 20.0f, 1);
 80163de:	2101      	movs	r1, #1
 80163e0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80163e4:	4811      	ldr	r0, [pc, #68]	; (801642c <SFXNeartuneAlloc+0xd0>)
 80163e6:	f00b fee1 	bl	80221ac <tRamp_init>
            setLED_A(autotuneChromatic);
 80163ea:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80163ee:	f7fd fae7 	bl	80139c0 <setLED_A>
            setLED_C(autotuneLock);
 80163f2:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80163f6:	f7fd faff 	bl	80139f8 <setLED_C>
            lastSnap = 1.0f;
 80163fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80163fe:	4b0c      	ldr	r3, [pc, #48]	; (8016430 <SFXNeartuneAlloc+0xd4>)
 8016400:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
        }
 8016404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016406:	bf00      	nop
 8016408:	200194e0 	.word	0x200194e0
 801640c:	20017558 	.word	0x20017558
 8016410:	2000065c 	.word	0x2000065c
 8016414:	20002a88 	.word	0x20002a88
 8016418:	20000664 	.word	0x20000664
 801641c:	2aaaaaab 	.word	0x2aaaaaab
 8016420:	3be56042 	.word	0x3be56042
 8016424:	20017628 	.word	0x20017628
 8016428:	20000548 	.word	0x20000548
 801642c:	200183a4 	.word	0x200183a4
 8016430:	20000040 	.word	0x20000040

08016434 <SFXNeartuneFrame>:
        {
 8016434:	b538      	push	{r3, r4, r5, lr}
            if ((tSimplePoly_getNumActiveVoices(&poly) != 0) || (autotuneChromatic == 1) || (autotuneLock == 1))
 8016436:	4828      	ldr	r0, [pc, #160]	; (80164d8 <SFXNeartuneFrame+0xa4>)
 8016438:	f00e fad2 	bl	80249e0 <tSimplePoly_getNumActiveVoices>
 801643c:	b9f8      	cbnz	r0, 801647e <SFXNeartuneFrame+0x4a>
 801643e:	4b27      	ldr	r3, [pc, #156]	; (80164dc <SFXNeartuneFrame+0xa8>)
 8016440:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8016444:	2a01      	cmp	r2, #1
 8016446:	d01a      	beq.n	801647e <SFXNeartuneFrame+0x4a>
 8016448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801644a:	2b01      	cmp	r3, #1
 801644c:	d017      	beq.n	801647e <SFXNeartuneFrame+0x4a>
            if (buttonActionsSFX[ButtonA][ActionPress])
 801644e:	4d24      	ldr	r5, [pc, #144]	; (80164e0 <SFXNeartuneFrame+0xac>)
                tRamp_setDest(&nearWetRamp, -1.0f);
 8016450:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016454:	4823      	ldr	r0, [pc, #140]	; (80164e4 <SFXNeartuneFrame+0xb0>)
 8016456:	f00b ff15 	bl	8022284 <tRamp_setDest>
            if (buttonActionsSFX[ButtonA][ActionPress])
 801645a:	7d2b      	ldrb	r3, [r5, #20]
 801645c:	b1c3      	cbz	r3, 8016490 <SFXNeartuneFrame+0x5c>
                autotuneChromatic = !autotuneChromatic;
 801645e:	4a1f      	ldr	r2, [pc, #124]	; (80164dc <SFXNeartuneFrame+0xa8>)
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8016460:	2100      	movs	r1, #0
                autotuneChromatic = !autotuneChromatic;
 8016462:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8016466:	7529      	strb	r1, [r5, #20]
                autotuneChromatic = !autotuneChromatic;
 8016468:	fab3 f383 	clz	r3, r3
 801646c:	095b      	lsrs	r3, r3, #5
                setLED_A(autotuneChromatic);
 801646e:	4618      	mov	r0, r3
                autotuneChromatic = !autotuneChromatic;
 8016470:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
                setLED_A(autotuneChromatic);
 8016474:	f7fd faa4 	bl	80139c0 <setLED_A>
            if (buttonActionsSFX[ButtonC][ActionPress])
 8016478:	7f2b      	ldrb	r3, [r5, #28]
 801647a:	b963      	cbnz	r3, 8016496 <SFXNeartuneFrame+0x62>
        }
 801647c:	bd38      	pop	{r3, r4, r5, pc}
            if (buttonActionsSFX[ButtonA][ActionPress])
 801647e:	4d18      	ldr	r5, [pc, #96]	; (80164e0 <SFXNeartuneFrame+0xac>)
                tRamp_setDest(&nearWetRamp, 1.0f);
 8016480:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016484:	4817      	ldr	r0, [pc, #92]	; (80164e4 <SFXNeartuneFrame+0xb0>)
 8016486:	f00b fefd 	bl	8022284 <tRamp_setDest>
            if (buttonActionsSFX[ButtonA][ActionPress])
 801648a:	7d2b      	ldrb	r3, [r5, #20]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d1e6      	bne.n	801645e <SFXNeartuneFrame+0x2a>
            if (buttonActionsSFX[ButtonC][ActionPress])
 8016490:	7f2b      	ldrb	r3, [r5, #28]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d0f2      	beq.n	801647c <SFXNeartuneFrame+0x48>
                autotuneLock = !autotuneLock;
 8016496:	4c11      	ldr	r4, [pc, #68]	; (80164dc <SFXNeartuneFrame+0xa8>)
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8016498:	2200      	movs	r2, #0
                autotuneLock = !autotuneLock;
 801649a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 801649c:	772a      	strb	r2, [r5, #28]
                autotuneLock = !autotuneLock;
 801649e:	fab3 f383 	clz	r3, r3
 80164a2:	095b      	lsrs	r3, r3, #5
                setLED_C(autotuneLock);
 80164a4:	4618      	mov	r0, r3
                autotuneLock = !autotuneLock;
 80164a6:	62a3      	str	r3, [r4, #40]	; 0x28
                setLED_C(autotuneLock);
 80164a8:	f7fd faa6 	bl	80139f8 <setLED_C>
                if (autotuneLock)
 80164ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80164ae:	b159      	cbz	r1, 80164c8 <SFXNeartuneFrame+0x94>
 80164b0:	f104 055c 	add.w	r5, r4, #92	; 0x5c
 80164b4:	342c      	adds	r4, #44	; 0x2c
 80164b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80164b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80164bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80164c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        }
 80164c6:	bd38      	pop	{r3, r4, r5, pc}
 80164c8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80164cc:	2230      	movs	r2, #48	; 0x30
 80164ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80164d2:	f010 bcf2 	b.w	8026eba <memset>
 80164d6:	bf00      	nop
 80164d8:	20017560 	.word	0x20017560
 80164dc:	20000548 	.word	0x20000548
 80164e0:	20018724 	.word	0x20018724
 80164e4:	200183a4 	.word	0x200183a4

080164e8 <SFXNeartuneFree>:
        {
 80164e8:	b508      	push	{r3, lr}
            tRetune_free(&autotuneMono);
 80164ea:	4805      	ldr	r0, [pc, #20]	; (8016500 <SFXNeartuneFree+0x18>)
 80164ec:	f00a fd4c 	bl	8020f88 <tRetune_free>
            tExpSmooth_free(&neartune_smoother);
 80164f0:	4804      	ldr	r0, [pc, #16]	; (8016504 <SFXNeartuneFree+0x1c>)
 80164f2:	f00b ff5f 	bl	80223b4 <tExpSmooth_free>
            tRamp_free(&nearWetRamp);
 80164f6:	4804      	ldr	r0, [pc, #16]	; (8016508 <SFXNeartuneFree+0x20>)
        }
 80164f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            tRamp_free(&nearWetRamp);
 80164fc:	f00b bebe 	b.w	802227c <tRamp_free>
 8016500:	20017558 	.word	0x20017558
 8016504:	20017628 	.word	0x20017628
 8016508:	200183a4 	.word	0x200183a4

0801650c <SFXAutotuneAlloc>:
        {
 801650c:	b508      	push	{r3, lr}
            tAutotune_init(&autotunePoly, NUM_AUTOTUNE, 1024, 512);
 801650e:	2104      	movs	r1, #4
 8016510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016514:	4805      	ldr	r0, [pc, #20]	; (801652c <SFXAutotuneAlloc+0x20>)
 8016516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801651a:	f00a ff49 	bl	80213b0 <tAutotune_init>
            tSimplePoly_setNumVoices(&poly, NUM_AUTOTUNE);
 801651e:	2104      	movs	r1, #4
 8016520:	4803      	ldr	r0, [pc, #12]	; (8016530 <SFXAutotuneAlloc+0x24>)
        }
 8016522:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            tSimplePoly_setNumVoices(&poly, NUM_AUTOTUNE);
 8016526:	f00e ba4f 	b.w	80249c8 <tSimplePoly_setNumVoices>
 801652a:	bf00      	nop
 801652c:	20003478 	.word	0x20003478
 8016530:	20017560 	.word	0x20017560

08016534 <SFXAutotuneFrame>:
        {
 8016534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016538:	4f35      	ldr	r7, [pc, #212]	; (8016610 <SFXAutotuneFrame+0xdc>)
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 801653a:	2400      	movs	r4, #0
 801653c:	4d35      	ldr	r5, [pc, #212]	; (8016614 <SFXAutotuneFrame+0xe0>)
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801653e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8016630 <SFXAutotuneFrame+0xfc>
        {
 8016542:	ed2d 8b02 	vpush	{d8}
                tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 8016546:	ed9f 8a34 	vldr	s16, [pc, #208]	; 8016618 <SFXAutotuneFrame+0xe4>
        {
 801654a:	b082      	sub	sp, #8
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 801654c:	e03e      	b.n	80165cc <SFXAutotuneFrame+0x98>
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801654e:	f00e fa5f 	bl	8024a10 <tSimplePoly_getPitch>
 8016552:	ee07 0a90 	vmov	s15, r0
 8016556:	4a31      	ldr	r2, [pc, #196]	; (801661c <SFXAutotuneFrame+0xe8>)
 8016558:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801655c:	4b30      	ldr	r3, [pc, #192]	; (8016620 <SFXAutotuneFrame+0xec>)
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801655e:	ed92 0a02 	vldr	s0, [r2, #8]
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8016562:	781a      	ldrb	r2, [r3, #0]
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8016564:	ee37 7a00 	vadd.f32	s14, s14, s0
            float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8016568:	492e      	ldr	r1, [pc, #184]	; (8016624 <SFXAutotuneFrame+0xf0>)
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801656a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801656e:	ee17 3a90 	vmov	r3, s15
 8016572:	1a9b      	subs	r3, r3, r2
 8016574:	fb88 2003 	smull	r2, r0, r8, r3
 8016578:	17da      	asrs	r2, r3, #31
 801657a:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 801657e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016582:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8016586:	ee07 3a90 	vmov	s15, r3
 801658a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 801658e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016592:	ee17 3a90 	vmov	r3, s15
 8016596:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801659a:	ed93 0a00 	vldr	s0, [r3]
            freq[voice] = LEAF_midiToFrequency(tunedNote);
 801659e:	ee37 0a00 	vadd.f32	s0, s14, s0
 80165a2:	f00d fc9b 	bl	8023edc <LEAF_midiToFrequency>
 80165a6:	4b20      	ldr	r3, [pc, #128]	; (8016628 <SFXAutotuneFrame+0xf4>)
                tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 80165a8:	4631      	mov	r1, r6
            freq[voice] = LEAF_midiToFrequency(tunedNote);
 80165aa:	eca7 0a01 	vstmia	r7!, {s0}
                tExpSmooth_setDest(&polyRamp[i], (tSimplePoly_getVelocity(&poly, i) > 0));
 80165ae:	4628      	mov	r0, r5
 80165b0:	eb03 0684 	add.w	r6, r3, r4, lsl #2
 80165b4:	f00e fa38 	bl	8024a28 <tSimplePoly_getVelocity>
 80165b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80165bc:	2800      	cmp	r0, #0
 80165be:	4630      	mov	r0, r6
 80165c0:	f104 0401 	add.w	r4, r4, #1
 80165c4:	fe30 0a08 	vselgt.f32	s0, s0, s16
 80165c8:	f00b ff0a 	bl	80223e0 <tExpSmooth_setDest>
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 80165cc:	4628      	mov	r0, r5
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 80165ce:	b2e6      	uxtb	r6, r4
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 80165d0:	f00e fa02 	bl	80249d8 <tSimplePoly_getNumVoices>
 80165d4:	42a0      	cmp	r0, r4
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 80165d6:	4631      	mov	r1, r6
 80165d8:	4628      	mov	r0, r5
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 80165da:	dcb8      	bgt.n	801654e <SFXAutotuneFrame+0x1a>
            int tempNumVoices = tSimplePoly_getNumActiveVoices(&poly);
 80165dc:	480d      	ldr	r0, [pc, #52]	; (8016614 <SFXAutotuneFrame+0xe0>)
 80165de:	f00e f9ff 	bl	80249e0 <tSimplePoly_getNumActiveVoices>
            if (tempNumVoices != 0) tExpSmooth_setDest(&comp, 1.0f / (float)tempNumVoices);
 80165e2:	9001      	str	r0, [sp, #4]
 80165e4:	b920      	cbnz	r0, 80165f0 <SFXAutotuneFrame+0xbc>
        }
 80165e6:	b002      	add	sp, #8
 80165e8:	ecbd 8b02 	vpop	{d8}
 80165ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (tempNumVoices != 0) tExpSmooth_setDest(&comp, 1.0f / (float)tempNumVoices);
 80165f0:	ee07 0a90 	vmov	s15, r0
 80165f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80165f8:	480c      	ldr	r0, [pc, #48]	; (801662c <SFXAutotuneFrame+0xf8>)
 80165fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165fe:	ee80 0a27 	vdiv.f32	s0, s0, s15
        }
 8016602:	b002      	add	sp, #8
 8016604:	ecbd 8b02 	vpop	{d8}
 8016608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            if (tempNumVoices != 0) tExpSmooth_setDest(&comp, 1.0f / (float)tempNumVoices);
 801660c:	f00b bee8 	b.w	80223e0 <tExpSmooth_setDest>
 8016610:	2000347c 	.word	0x2000347c
 8016614:	20017560 	.word	0x20017560
 8016618:	00000000 	.word	0x00000000
 801661c:	20000548 	.word	0x20000548
 8016620:	2000065c 	.word	0x2000065c
 8016624:	20000664 	.word	0x20000664
 8016628:	2001795c 	.word	0x2001795c
 801662c:	2001729c 	.word	0x2001729c
 8016630:	2aaaaaab 	.word	0x2aaaaaab

08016634 <SFXAutotuneTick>:
            displayValues[0] = 0.5f + (presetKnobValues[AutotunePoly][0] * 0.47f);
 8016634:	4b27      	ldr	r3, [pc, #156]	; (80166d4 <SFXAutotuneTick+0xa0>)
 8016636:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801663a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80166d8 <SFXAutotuneTick+0xa4>
        {
 801663e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016642:	ed2d 8b02 	vpush	{d8}
            displayValues[0] = 0.5f + (presetKnobValues[AutotunePoly][0] * 0.47f);
 8016646:	edd3 6a64 	vldr	s13, [r3, #400]	; 0x190
        {
 801664a:	4680      	mov	r8, r0
            displayValues[0] = 0.5f + (presetKnobValues[AutotunePoly][0] * 0.47f);
 801664c:	4b23      	ldr	r3, [pc, #140]	; (80166dc <SFXAutotuneTick+0xa8>)
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 801664e:	2400      	movs	r4, #0
            displayValues[0] = 0.5f + (presetKnobValues[AutotunePoly][0] * 0.47f);
 8016650:	eee6 7a87 	vfma.f32	s15, s13, s14
            tAutotune_setFidelityThreshold(&autotunePoly, displayValues[0]);
 8016654:	4822      	ldr	r0, [pc, #136]	; (80166e0 <SFXAutotuneTick+0xac>)
 8016656:	4d23      	ldr	r5, [pc, #140]	; (80166e4 <SFXAutotuneTick+0xb0>)
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016658:	4f23      	ldr	r7, [pc, #140]	; (80166e8 <SFXAutotuneTick+0xb4>)
                tAutotune_setFreq(&autotunePoly, freq[i], i);
 801665a:	4606      	mov	r6, r0
            tAutotune_setFidelityThreshold(&autotunePoly, displayValues[0]);
 801665c:	eeb0 0a67 	vmov.f32	s0, s15
            displayValues[0] = 0.5f + (presetKnobValues[AutotunePoly][0] * 0.47f);
 8016660:	edc3 7a00 	vstr	s15, [r3]
            tAutotune_setFidelityThreshold(&autotunePoly, displayValues[0]);
 8016664:	f00a fff4 	bl	8021650 <tAutotune_setFidelityThreshold>
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016668:	e003      	b.n	8016672 <SFXAutotuneTick+0x3e>
                tAutotune_setFreq(&autotunePoly, freq[i], i);
 801666a:	ecb5 0a01 	vldmia	r5!, {s0}
 801666e:	f00a ffe7 	bl	8021640 <tAutotune_setFreq>
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016672:	4638      	mov	r0, r7
 8016674:	f00e f9b0 	bl	80249d8 <tSimplePoly_getNumVoices>
 8016678:	42a0      	cmp	r0, r4
                tAutotune_setFreq(&autotunePoly, freq[i], i);
 801667a:	4621      	mov	r1, r4
 801667c:	4630      	mov	r0, r6
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 801667e:	f104 0401 	add.w	r4, r4, #1
 8016682:	dcf2      	bgt.n	801666a <SFXAutotuneTick+0x36>
            float* samples = tAutotune_tick(&autotunePoly, input[1]);
 8016684:	ed98 0a01 	vldr	s0, [r8, #4]
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016688:	2400      	movs	r4, #0
            float* samples = tAutotune_tick(&autotunePoly, input[1]);
 801668a:	4815      	ldr	r0, [pc, #84]	; (80166e0 <SFXAutotuneTick+0xac>)
 801668c:	f00a fedc 	bl	8021448 <tAutotune_tick>
            float sample = 0.0f;
 8016690:	ed9f 8a16 	vldr	s16, [pc, #88]	; 80166ec <SFXAutotuneTick+0xb8>
            float* samples = tAutotune_tick(&autotunePoly, input[1]);
 8016694:	4605      	mov	r5, r0
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 8016696:	4f14      	ldr	r7, [pc, #80]	; (80166e8 <SFXAutotuneTick+0xb4>)
                sample += samples[i] * tExpSmooth_tick(&polyRamp[i]);
 8016698:	4e15      	ldr	r6, [pc, #84]	; (80166f0 <SFXAutotuneTick+0xbc>)
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 801669a:	e005      	b.n	80166a8 <SFXAutotuneTick+0x74>
                sample += samples[i] * tExpSmooth_tick(&polyRamp[i]);
 801669c:	ecf5 8a01 	vldmia	r5!, {s17}
 80166a0:	f00b fea8 	bl	80223f4 <tExpSmooth_tick>
 80166a4:	eea8 8a80 	vfma.f32	s16, s17, s0
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 80166a8:	4638      	mov	r0, r7
 80166aa:	f00e f995 	bl	80249d8 <tSimplePoly_getNumVoices>
 80166ae:	42a0      	cmp	r0, r4
                sample += samples[i] * tExpSmooth_tick(&polyRamp[i]);
 80166b0:	eb06 0084 	add.w	r0, r6, r4, lsl #2
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); ++i)
 80166b4:	f104 0401 	add.w	r4, r4, #1
 80166b8:	dcf0      	bgt.n	801669c <SFXAutotuneTick+0x68>
            sample *= tExpSmooth_tick(&comp);
 80166ba:	480e      	ldr	r0, [pc, #56]	; (80166f4 <SFXAutotuneTick+0xc0>)
 80166bc:	f00b fe9a 	bl	80223f4 <tExpSmooth_tick>
 80166c0:	ee28 0a00 	vmul.f32	s0, s16, s0
            input[0] = sample;
 80166c4:	ed88 0a00 	vstr	s0, [r8]
            input[1] = sample;
 80166c8:	ed88 0a01 	vstr	s0, [r8, #4]
        }
 80166cc:	ecbd 8b02 	vpop	{d8}
 80166d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166d4:	20002d50 	.word	0x20002d50
 80166d8:	3ef0a3d7 	.word	0x3ef0a3d7
 80166dc:	200187d4 	.word	0x200187d4
 80166e0:	20003478 	.word	0x20003478
 80166e4:	2000347c 	.word	0x2000347c
 80166e8:	20017560 	.word	0x20017560
 80166ec:	00000000 	.word	0x00000000
 80166f0:	2001795c 	.word	0x2001795c
 80166f4:	2001729c 	.word	0x2001729c

080166f8 <SFXAutotuneFree>:
            tAutotune_free(&autotunePoly);
 80166f8:	4801      	ldr	r0, [pc, #4]	; (8016700 <SFXAutotuneFree+0x8>)
 80166fa:	f00a be63 	b.w	80213c4 <tAutotune_free>
 80166fe:	bf00      	nop
 8016700:	20003478 	.word	0x20003478

08016704 <SFXSamplerBPAlloc>:
            tBuffer_initToPool(&buff, leaf.sampleRate * 172.0f, &largePool);
 8016704:	4b1e      	ldr	r3, [pc, #120]	; (8016780 <SFXSamplerBPAlloc+0x7c>)
 8016706:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8016784 <SFXSamplerBPAlloc+0x80>
 801670a:	4a1f      	ldr	r2, [pc, #124]	; (8016788 <SFXSamplerBPAlloc+0x84>)
        {
 801670c:	b570      	push	{r4, r5, r6, lr}
 801670e:	ed2d 8b02 	vpush	{d8}
            tBuffer_initToPool(&buff, leaf.sampleRate * 172.0f, &largePool);
 8016712:	edd3 7a00 	vldr	s15, [r3]
 8016716:	4c1d      	ldr	r4, [pc, #116]	; (801678c <SFXSamplerBPAlloc+0x88>)
 8016718:	ee67 7a87 	vmul.f32	s15, s15, s14
            tSampler_init(&sampler, &buff);
 801671c:	4e1c      	ldr	r6, [pc, #112]	; (8016790 <SFXSamplerBPAlloc+0x8c>)
            tBuffer_initToPool(&buff, leaf.sampleRate * 172.0f, &largePool);
 801671e:	4620      	mov	r0, r4
            tExpSmooth_initToPool(&startSmooth, 0.0f, 0.01f, &smallPool);
 8016720:	eddf 8a1c 	vldr	s17, [pc, #112]	; 8016794 <SFXSamplerBPAlloc+0x90>
 8016724:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8016798 <SFXSamplerBPAlloc+0x94>
            tBuffer_initToPool(&buff, leaf.sampleRate * 172.0f, &largePool);
 8016728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            tExpSmooth_initToPool(&startSmooth, 0.0f, 0.01f, &smallPool);
 801672c:	4d1b      	ldr	r5, [pc, #108]	; (801679c <SFXSamplerBPAlloc+0x98>)
            tBuffer_initToPool(&buff, leaf.sampleRate * 172.0f, &largePool);
 801672e:	ee17 1a90 	vmov	r1, s15
 8016732:	f00f fcf9 	bl	8026128 <tBuffer_initToPool>
            tBuffer_setRecordMode(&buff, RecordOneShot);
 8016736:	4620      	mov	r0, r4
 8016738:	2100      	movs	r1, #0
 801673a:	f00f fd5b 	bl	80261f4 <tBuffer_setRecordMode>
            tSampler_init(&sampler, &buff);
 801673e:	4621      	mov	r1, r4
 8016740:	4630      	mov	r0, r6
 8016742:	f00f fd67 	bl	8026214 <tSampler_init>
            tSampler_setMode(&sampler, (PlayMode)(bpMode + 1));
 8016746:	4b16      	ldr	r3, [pc, #88]	; (80167a0 <SFXSamplerBPAlloc+0x9c>)
 8016748:	4630      	mov	r0, r6
 801674a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 801674e:	3101      	adds	r1, #1
 8016750:	b2c9      	uxtb	r1, r1
 8016752:	f00f fe07 	bl	8026364 <tSampler_setMode>
            tExpSmooth_initToPool(&startSmooth, 0.0f, 0.01f, &smallPool);
 8016756:	4629      	mov	r1, r5
 8016758:	eef0 0a68 	vmov.f32	s1, s17
 801675c:	4811      	ldr	r0, [pc, #68]	; (80167a4 <SFXSamplerBPAlloc+0xa0>)
 801675e:	eeb0 0a48 	vmov.f32	s0, s16
 8016762:	f00b fe01 	bl	8022368 <tExpSmooth_initToPool>
            tExpSmooth_initToPool(&lengthSmooth, 0.0f, 0.01f, &smallPool);
 8016766:	eef0 0a68 	vmov.f32	s1, s17
 801676a:	eeb0 0a48 	vmov.f32	s0, s16
 801676e:	4629      	mov	r1, r5
 8016770:	480d      	ldr	r0, [pc, #52]	; (80167a8 <SFXSamplerBPAlloc+0xa4>)
        }
 8016772:	ecbd 8b02 	vpop	{d8}
 8016776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            tExpSmooth_initToPool(&lengthSmooth, 0.0f, 0.01f, &smallPool);
 801677a:	f00b bdf5 	b.w	8022368 <tExpSmooth_initToPool>
 801677e:	bf00      	nop
 8016780:	200194e0 	.word	0x200194e0
 8016784:	432c0000 	.word	0x432c0000
 8016788:	20017550 	.word	0x20017550
 801678c:	20003630 	.word	0x20003630
 8016790:	20017294 	.word	0x20017294
 8016794:	3c23d70a 	.word	0x3c23d70a
 8016798:	00000000 	.word	0x00000000
 801679c:	20018338 	.word	0x20018338
 80167a0:	20000548 	.word	0x20000548
 80167a4:	200177c4 	.word	0x200177c4
 80167a8:	20017064 	.word	0x20017064

080167ac <SFXSamplerBPFrame>:
 80167ac:	4770      	bx	lr
 80167ae:	bf00      	nop

080167b0 <SFXSamplerBPTick>:
        {
 80167b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            if (buttonActionsSFX[ButtonC][ActionPress])
 80167b4:	4f8e      	ldr	r7, [pc, #568]	; (80169f0 <SFXSamplerBPTick+0x240>)
        {
 80167b6:	4681      	mov	r9, r0
            int recordPosition = tBuffer_getRecordPosition(&buff);
 80167b8:	488e      	ldr	r0, [pc, #568]	; (80169f4 <SFXSamplerBPTick+0x244>)
                if (samplePlaying)
 80167ba:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8016a1c <SFXSamplerBPTick+0x26c>
        {
 80167be:	ed2d 8b02 	vpush	{d8}
            int recordPosition = tBuffer_getRecordPosition(&buff);
 80167c2:	f00f fd0f 	bl	80261e4 <tBuffer_getRecordPosition>
            if (buttonActionsSFX[ButtonC][ActionPress])
 80167c6:	7f3b      	ldrb	r3, [r7, #28]
            int recordPosition = tBuffer_getRecordPosition(&buff);
 80167c8:	ee08 0a10 	vmov	s16, r0
            if (buttonActionsSFX[ButtonC][ActionPress])
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	f040 80a2 	bne.w	8016916 <SFXSamplerBPTick+0x166>
            if (buttonActionsSFX[ButtonB][ActionPress])
 80167d2:	7e3b      	ldrb	r3, [r7, #24]
 80167d4:	4c88      	ldr	r4, [pc, #544]	; (80169f8 <SFXSamplerBPTick+0x248>)
 80167d6:	4d89      	ldr	r5, [pc, #548]	; (80169fc <SFXSamplerBPTick+0x24c>)
 80167d8:	4e89      	ldr	r6, [pc, #548]	; (8016a00 <SFXSamplerBPTick+0x250>)
 80167da:	2b00      	cmp	r3, #0
 80167dc:	f040 80ae 	bne.w	801693c <SFXSamplerBPTick+0x18c>
            if (buttonActionsSFX[ButtonA][ActionPress])
 80167e0:	7d3b      	ldrb	r3, [r7, #20]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	f040 80bf 	bne.w	8016966 <SFXSamplerBPTick+0x1b6>
            if (buttonActionsSFX[ButtonA][ActionRelease])
 80167e8:	7d7b      	ldrb	r3, [r7, #21]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	f040 80ca 	bne.w	8016984 <SFXSamplerBPTick+0x1d4>
            sampleLength = recordPosition * leaf.invSampleRate;
 80167f0:	4b84      	ldr	r3, [pc, #528]	; (8016a04 <SFXSamplerBPTick+0x254>)
 80167f2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
            displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 80167f6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            displayValues[0] = knobs[0] * sampleLength;
 80167fa:	ed95 7a7d 	vldr	s14, [r5, #500]	; 0x1f4
            sampleLength = recordPosition * leaf.invSampleRate;
 80167fe:	edd3 7a01 	vldr	s15, [r3, #4]
            displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8016802:	edd5 0a7e 	vldr	s1, [r5, #504]	; 0x1f8
            sampleLength = recordPosition * leaf.invSampleRate;
 8016806:	ee68 7a27 	vmul.f32	s15, s16, s15
            displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 801680a:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8016a08 <SFXSamplerBPTick+0x258>
 801680e:	ee38 1ac7 	vsub.f32	s2, s17, s14
            displayValues[0] = knobs[0] * sampleLength;
 8016812:	ee27 7a87 	vmul.f32	s14, s15, s14
            sampleLength = recordPosition * leaf.invSampleRate;
 8016816:	edc4 7a24 	vstr	s15, [r4, #144]	; 0x90
            displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 801681a:	ee21 1a27 	vmul.f32	s2, s2, s15
 801681e:	ee67 0aa0 	vmul.f32	s1, s15, s1
            displayValues[0] = knobs[0] * sampleLength;
 8016822:	ed86 7a00 	vstr	s14, [r6]
            displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8016826:	f00d fa6f 	bl	8023d08 <LEAF_clip>
            displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 801682a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801682e:	edd5 6a7f 	vldr	s13, [r5, #508]	; 0x1fc
            float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8016832:	ed95 7a80 	vldr	s14, [r5, #512]	; 0x200
 8016836:	eeb2 6a0c 	vmov.f32	s12, #44	; 0x41600000  14.0
            displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 801683a:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
            displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 801683e:	ed86 0a01 	vstr	s0, [r6, #4]
            displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 8016842:	ee76 6ae7 	vsub.f32	s13, s13, s15
            float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8016846:	ee77 7a67 	vsub.f32	s15, s14, s15
            displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 801684a:	ee66 6aa5 	vmul.f32	s13, s13, s11
            float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 801684e:	ee67 7a86 	vmul.f32	s15, s15, s12
            displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 8016852:	edc6 6a02 	vstr	s13, [r6, #8]
            float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8016856:	fef8 7a67 	vrinta.f32	s15, s15
            if (rate < 0.0f)
 801685a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801685e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016862:	f100 80b9 	bmi.w	80169d8 <SFXSamplerBPTick+0x228>
                rate += 1.0f;
 8016866:	ee77 7aa8 	vadd.f32	s15, s15, s17
            displayValues[4] = knobs[4] * 4000.0f;
 801686a:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8016a0c <SFXSamplerBPTick+0x25c>
            samplerRate = displayValues[3] * displayValues[2];
 801686e:	ee66 6aa7 	vmul.f32	s13, s13, s15
            displayValues[4] = knobs[4] * 4000.0f;
 8016872:	ed95 7a81 	vldr	s14, [r5, #516]	; 0x204
            tExpSmooth_setDest(&startSmooth, knobs[0] * recordPosition);
 8016876:	ed95 0a7d 	vldr	s0, [r5, #500]	; 0x1f4
            displayValues[4] = knobs[4] * 4000.0f;
 801687a:	ee27 7a06 	vmul.f32	s14, s14, s12
            tExpSmooth_setDest(&startSmooth, knobs[0] * recordPosition);
 801687e:	4864      	ldr	r0, [pc, #400]	; (8016a10 <SFXSamplerBPTick+0x260>)
 8016880:	ee28 0a00 	vmul.f32	s0, s16, s0
            samplerRate = displayValues[3] * displayValues[2];
 8016884:	edc8 6a3c 	vstr	s13, [r8, #240]	; 0xf0
            displayValues[3] = rate;
 8016888:	edc6 7a03 	vstr	s15, [r6, #12]
            displayValues[4] = knobs[4] * 4000.0f;
 801688c:	ed86 7a04 	vstr	s14, [r6, #16]
            tExpSmooth_setDest(&startSmooth, knobs[0] * recordPosition);
 8016890:	f00b fda6 	bl	80223e0 <tExpSmooth_setDest>
            tExpSmooth_setDest(&lengthSmooth, knobs[1] * recordPosition);
 8016894:	ed95 0a7e 	vldr	s0, [r5, #504]	; 0x1f8
 8016898:	485e      	ldr	r0, [pc, #376]	; (8016a14 <SFXSamplerBPTick+0x264>)
 801689a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801689e:	f00b fd9f 	bl	80223e0 <tExpSmooth_setDest>
            samplePlayStart = tExpSmooth_tick(&startSmooth);
 80168a2:	485b      	ldr	r0, [pc, #364]	; (8016a10 <SFXSamplerBPTick+0x260>)
 80168a4:	f00b fda6 	bl	80223f4 <tExpSmooth_tick>
 80168a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
            samplePlayLength = tExpSmooth_tick(&lengthSmooth);
 80168ac:	4859      	ldr	r0, [pc, #356]	; (8016a14 <SFXSamplerBPTick+0x264>)
            samplePlayStart = tExpSmooth_tick(&startSmooth);
 80168ae:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
            samplePlayLength = tExpSmooth_tick(&lengthSmooth);
 80168b2:	f00b fd9f 	bl	80223f4 <tExpSmooth_tick>
            crossfadeLength = displayValues[4];
 80168b6:	edd6 7a04 	vldr	s15, [r6, #16]
            samplePlayLength = tExpSmooth_tick(&lengthSmooth);
 80168ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
            tSampler_setStart(&sampler, samplePlayStart);
 80168be:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
            crossfadeLength = displayValues[4];
 80168c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            tSampler_setStart(&sampler, samplePlayStart);
 80168c6:	4854      	ldr	r0, [pc, #336]	; (8016a18 <SFXSamplerBPTick+0x268>)
            samplePlayLength = tExpSmooth_tick(&lengthSmooth);
 80168c8:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
            crossfadeLength = displayValues[4];
 80168cc:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
            tSampler_setStart(&sampler, samplePlayStart);
 80168d0:	f00f fdbe 	bl	8026450 <tSampler_setStart>
            tSampler_setLength(&sampler, samplePlayLength);
 80168d4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80168d8:	484f      	ldr	r0, [pc, #316]	; (8016a18 <SFXSamplerBPTick+0x268>)
 80168da:	f010 f9c7 	bl	8026c6c <tSampler_setLength>
            tSampler_setRate(&sampler, samplerRate);
 80168de:	ed98 0a3c 	vldr	s0, [r8, #240]	; 0xf0
 80168e2:	484d      	ldr	r0, [pc, #308]	; (8016a18 <SFXSamplerBPTick+0x268>)
 80168e4:	f010 fa5c 	bl	8026da0 <tSampler_setRate>
            tSampler_setCrossfadeLength(&sampler, crossfadeLength);
 80168e8:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80168ec:	484a      	ldr	r0, [pc, #296]	; (8016a18 <SFXSamplerBPTick+0x268>)
 80168ee:	f00f fd3d 	bl	802636c <tSampler_setCrossfadeLength>
            tBuffer_tick(&buff, input[1]);
 80168f2:	ed99 0a01 	vldr	s0, [r9, #4]
 80168f6:	483f      	ldr	r0, [pc, #252]	; (80169f4 <SFXSamplerBPTick+0x244>)
 80168f8:	f00f fc3a 	bl	8026170 <tBuffer_tick>
            sample = tanhf(tSampler_tick(&sampler));
 80168fc:	4846      	ldr	r0, [pc, #280]	; (8016a18 <SFXSamplerBPTick+0x268>)
 80168fe:	f00f fed3 	bl	80266a8 <tSampler_tick>
 8016902:	f010 ff0f 	bl	8027724 <tanhf>
            input[0] = sample;
 8016906:	ed89 0a00 	vstr	s0, [r9]
            input[1] = sample;
 801690a:	ed89 0a01 	vstr	s0, [r9, #4]
        }
 801690e:	ecbd 8b02 	vpop	{d8}
 8016912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (samplePlaying)
 8016916:	f898 30ec 	ldrb.w	r3, [r8, #236]	; 0xec
 801691a:	2b00      	cmp	r3, #0
 801691c:	d13e      	bne.n	801699c <SFXSamplerBPTick+0x1ec>
                    samplePlaying = 1;
 801691e:	2301      	movs	r3, #1
                    tSampler_play(&sampler);
 8016920:	483d      	ldr	r0, [pc, #244]	; (8016a18 <SFXSamplerBPTick+0x268>)
 8016922:	4c35      	ldr	r4, [pc, #212]	; (80169f8 <SFXSamplerBPTick+0x248>)
 8016924:	4d35      	ldr	r5, [pc, #212]	; (80169fc <SFXSamplerBPTick+0x24c>)
 8016926:	4e36      	ldr	r6, [pc, #216]	; (8016a00 <SFXSamplerBPTick+0x250>)
                    samplePlaying = 1;
 8016928:	f888 30ec 	strb.w	r3, [r8, #236]	; 0xec
                    tSampler_play(&sampler);
 801692c:	f00f fd34 	bl	8026398 <tSampler_play>
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8016930:	2300      	movs	r3, #0
 8016932:	773b      	strb	r3, [r7, #28]
            if (buttonActionsSFX[ButtonB][ActionPress])
 8016934:	7e3b      	ldrb	r3, [r7, #24]
 8016936:	2b00      	cmp	r3, #0
 8016938:	f43f af52 	beq.w	80167e0 <SFXSamplerBPTick+0x30>
                bpMode = !bpMode;
 801693c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
                tSampler_setMode(&sampler, (PlayMode)(bpMode + 1));
 8016940:	4835      	ldr	r0, [pc, #212]	; (8016a18 <SFXSamplerBPTick+0x268>)
                bpMode = !bpMode;
 8016942:	fab3 f383 	clz	r3, r3
 8016946:	095b      	lsrs	r3, r3, #5
                tSampler_setMode(&sampler, (PlayMode)(bpMode + 1));
 8016948:	1c59      	adds	r1, r3, #1
                bpMode = !bpMode;
 801694a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
                tSampler_setMode(&sampler, (PlayMode)(bpMode + 1));
 801694e:	f00f fd09 	bl	8026364 <tSampler_setMode>
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8016952:	2300      	movs	r3, #0
                setLED_B(bpMode);
 8016954:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8016958:	763b      	strb	r3, [r7, #24]
                setLED_B(bpMode);
 801695a:	f7fd f83f 	bl	80139dc <setLED_B>
            if (buttonActionsSFX[ButtonA][ActionPress])
 801695e:	7d3b      	ldrb	r3, [r7, #20]
 8016960:	2b00      	cmp	r3, #0
 8016962:	f43f af41 	beq.w	80167e8 <SFXSamplerBPTick+0x38>
                tSampler_stop(&sampler);
 8016966:	482c      	ldr	r0, [pc, #176]	; (8016a18 <SFXSamplerBPTick+0x268>)
 8016968:	f00f fd66 	bl	8026438 <tSampler_stop>
                tBuffer_record(&buff);
 801696c:	4821      	ldr	r0, [pc, #132]	; (80169f4 <SFXSamplerBPTick+0x244>)
 801696e:	f00f fc2f 	bl	80261d0 <tBuffer_record>
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8016972:	2300      	movs	r3, #0
                setLED_A(1);
 8016974:	2001      	movs	r0, #1
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8016976:	753b      	strb	r3, [r7, #20]
                setLED_A(1);
 8016978:	f7fd f822 	bl	80139c0 <setLED_A>
            if (buttonActionsSFX[ButtonA][ActionRelease])
 801697c:	7d7b      	ldrb	r3, [r7, #21]
 801697e:	2b00      	cmp	r3, #0
 8016980:	f43f af36 	beq.w	80167f0 <SFXSamplerBPTick+0x40>
                tBuffer_stop(&buff);
 8016984:	481b      	ldr	r0, [pc, #108]	; (80169f4 <SFXSamplerBPTick+0x244>)
 8016986:	f00f fc29 	bl	80261dc <tBuffer_stop>
                if (samplePlaying) tSampler_play(&sampler);
 801698a:	f898 30ec 	ldrb.w	r3, [r8, #236]	; 0xec
 801698e:	bb53      	cbnz	r3, 80169e6 <SFXSamplerBPTick+0x236>
                buttonActionsSFX[ButtonA][ActionRelease] = 0;
 8016990:	2300      	movs	r3, #0
                setLED_A(0);
 8016992:	4618      	mov	r0, r3
                buttonActionsSFX[ButtonA][ActionRelease] = 0;
 8016994:	757b      	strb	r3, [r7, #21]
                setLED_A(0);
 8016996:	f7fd f813 	bl	80139c0 <setLED_A>
 801699a:	e729      	b.n	80167f0 <SFXSamplerBPTick+0x40>
                    samplePlaying = 0;
 801699c:	2300      	movs	r3, #0
                    tSampler_stop(&sampler);
 801699e:	481e      	ldr	r0, [pc, #120]	; (8016a18 <SFXSamplerBPTick+0x268>)
                    displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 80169a0:	4d16      	ldr	r5, [pc, #88]	; (80169fc <SFXSamplerBPTick+0x24c>)
                    samplePlaying = 0;
 80169a2:	f888 30ec 	strb.w	r3, [r8, #236]	; 0xec
                    tSampler_stop(&sampler);
 80169a6:	f00f fd47 	bl	8026438 <tSampler_stop>
                    displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 80169aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80169ae:	ed95 1a7d 	vldr	s2, [r5, #500]	; 0x1f4
 80169b2:	4c11      	ldr	r4, [pc, #68]	; (80169f8 <SFXSamplerBPTick+0x248>)
 80169b4:	edd5 0a7e 	vldr	s1, [r5, #504]	; 0x1f8
 80169b8:	ee77 7ac1 	vsub.f32	s15, s15, s2
 80169bc:	ed94 1a24 	vldr	s2, [r4, #144]	; 0x90
 80169c0:	4e0f      	ldr	r6, [pc, #60]	; (8016a00 <SFXSamplerBPTick+0x250>)
 80169c2:	ee61 0a20 	vmul.f32	s1, s2, s1
 80169c6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8016a08 <SFXSamplerBPTick+0x258>
 80169ca:	ee27 1a81 	vmul.f32	s2, s15, s2
 80169ce:	f00d f99b 	bl	8023d08 <LEAF_clip>
 80169d2:	ed86 0a01 	vstr	s0, [r6, #4]
 80169d6:	e7ab      	b.n	8016930 <SFXSamplerBPTick+0x180>
                (rate = 1.0f / fabsf(rate-1.0f));
 80169d8:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80169dc:	eeb0 7ae7 	vabs.f32	s14, s15
 80169e0:	eec8 7a87 	vdiv.f32	s15, s17, s14
 80169e4:	e741      	b.n	801686a <SFXSamplerBPTick+0xba>
                if (samplePlaying) tSampler_play(&sampler);
 80169e6:	480c      	ldr	r0, [pc, #48]	; (8016a18 <SFXSamplerBPTick+0x268>)
 80169e8:	f00f fcd6 	bl	8026398 <tSampler_play>
 80169ec:	e7d0      	b.n	8016990 <SFXSamplerBPTick+0x1e0>
 80169ee:	bf00      	nop
 80169f0:	20018724 	.word	0x20018724
 80169f4:	20003630 	.word	0x20003630
 80169f8:	20000548 	.word	0x20000548
 80169fc:	20002d50 	.word	0x20002d50
 8016a00:	200187d4 	.word	0x200187d4
 8016a04:	200194e0 	.word	0x200194e0
 8016a08:	00000000 	.word	0x00000000
 8016a0c:	457a0000 	.word	0x457a0000
 8016a10:	200177c4 	.word	0x200177c4
 8016a14:	20017064 	.word	0x20017064
 8016a18:	20017294 	.word	0x20017294
 8016a1c:	20000040 	.word	0x20000040

08016a20 <SFXSamplerBPFree>:
        {
 8016a20:	b508      	push	{r3, lr}
            tBuffer_free(&buff);
 8016a22:	4807      	ldr	r0, [pc, #28]	; (8016a40 <SFXSamplerBPFree+0x20>)
 8016a24:	f00f fb98 	bl	8026158 <tBuffer_free>
            tSampler_free(&sampler);
 8016a28:	4806      	ldr	r0, [pc, #24]	; (8016a44 <SFXSamplerBPFree+0x24>)
 8016a2a:	f00f fc8f 	bl	802634c <tSampler_free>
            tExpSmooth_free(&startSmooth);
 8016a2e:	4806      	ldr	r0, [pc, #24]	; (8016a48 <SFXSamplerBPFree+0x28>)
 8016a30:	f00b fcc0 	bl	80223b4 <tExpSmooth_free>
            tExpSmooth_free(&lengthSmooth);
 8016a34:	4805      	ldr	r0, [pc, #20]	; (8016a4c <SFXSamplerBPFree+0x2c>)
        }
 8016a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            tExpSmooth_free(&lengthSmooth);
 8016a3a:	f00b bcbb 	b.w	80223b4 <tExpSmooth_free>
 8016a3e:	bf00      	nop
 8016a40:	20003630 	.word	0x20003630
 8016a44:	20017294 	.word	0x20017294
 8016a48:	200177c4 	.word	0x200177c4
 8016a4c:	20017064 	.word	0x20017064

08016a50 <SFXSamplerKAlloc>:
        {
 8016a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a54:	4b42      	ldr	r3, [pc, #264]	; (8016b60 <SFXSamplerKAlloc+0x110>)
            leaf.clearOnAllocation = 0; //needs this in case the box loads on this one first
 8016a56:	2200      	movs	r2, #0
 8016a58:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8016ba8 <SFXSamplerKAlloc+0x158>
            currentSamplerKeyGlobal = 60 - LOWEST_SAMPLER_KEY;
 8016a5c:	2018      	movs	r0, #24
 8016a5e:	4941      	ldr	r1, [pc, #260]	; (8016b64 <SFXSamplerKAlloc+0x114>)
 8016a60:	4614      	mov	r4, r2
 8016a62:	f8df a148 	ldr.w	sl, [pc, #328]	; 8016bac <SFXSamplerKAlloc+0x15c>
 8016a66:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8016bb0 <SFXSamplerKAlloc+0x160>
 8016a6a:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8016bb4 <SFXSamplerKAlloc+0x164>
                tSampler_initToPool(&keySampler[i], &keyBuff[i], &smallPool);
 8016a6e:	4f3e      	ldr	r7, [pc, #248]	; (8016b68 <SFXSamplerKAlloc+0x118>)
            leaf.clearOnAllocation = 0; //needs this in case the box loads on this one first
 8016a70:	f8cb 2014 	str.w	r2, [fp, #20]
        {
 8016a74:	ed2d 8b04 	vpush	{d8-d9}
 8016a78:	b085      	sub	sp, #20
                tExpSmooth_initToPool(&kSamplerGains[i], 0.0f, 0.04f, &smallPool);
 8016a7a:	ed9f 9a3c 	vldr	s18, [pc, #240]	; 8016b6c <SFXSamplerKAlloc+0x11c>
                samplePlayStarts[i] = 0;
 8016a7e:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 8016b70 <SFXSamplerKAlloc+0x120>
 8016a82:	9303      	str	r3, [sp, #12]
 8016a84:	4b3b      	ldr	r3, [pc, #236]	; (8016b74 <SFXSamplerKAlloc+0x124>)
                crossfadeLengths[i] = 1000;
 8016a86:	eddf 8a3c 	vldr	s17, [pc, #240]	; 8016b78 <SFXSamplerKAlloc+0x128>
 8016a8a:	9300      	str	r3, [sp, #0]
 8016a8c:	4b3b      	ldr	r3, [pc, #236]	; (8016b7c <SFXSamplerKAlloc+0x12c>)
            currentSamplerKeyGlobal = 60 - LOWEST_SAMPLER_KEY;
 8016a8e:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
 8016a92:	9302      	str	r3, [sp, #8]
 8016a94:	4b3a      	ldr	r3, [pc, #232]	; (8016b80 <SFXSamplerKAlloc+0x130>)
 8016a96:	9301      	str	r3, [sp, #4]
                tBuffer_initToPool(&keyBuff[i], leaf.sampleRate * 3.5f, &largePool);
 8016a98:	eef0 7a0c 	vmov.f32	s15, #12	; 0x40600000  3.5
 8016a9c:	ed9b 7a00 	vldr	s14, [fp]
 8016aa0:	4b38      	ldr	r3, [pc, #224]	; (8016b84 <SFXSamplerKAlloc+0x134>)
 8016aa2:	4a39      	ldr	r2, [pc, #228]	; (8016b88 <SFXSamplerKAlloc+0x138>)
 8016aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016aa8:	191d      	adds	r5, r3, r4
 8016aaa:	4b38      	ldr	r3, [pc, #224]	; (8016b8c <SFXSamplerKAlloc+0x13c>)
 8016aac:	4628      	mov	r0, r5
 8016aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016ab2:	191e      	adds	r6, r3, r4
 8016ab4:	ee17 1a90 	vmov	r1, s15
 8016ab8:	f00f fb36 	bl	8026128 <tBuffer_initToPool>
                tBuffer_setRecordMode(&keyBuff[i], RecordOneShot);
 8016abc:	4628      	mov	r0, r5
 8016abe:	2100      	movs	r1, #0
 8016ac0:	f00f fb98 	bl	80261f4 <tBuffer_setRecordMode>
                tSampler_initToPool(&keySampler[i], &keyBuff[i], &smallPool);
 8016ac4:	463a      	mov	r2, r7
 8016ac6:	4629      	mov	r1, r5
 8016ac8:	4630      	mov	r0, r6
 8016aca:	f00f fbf3 	bl	80262b4 <tSampler_initToPool>
                tSampler_setMode(&keySampler[i], PlayLoop);
 8016ace:	4630      	mov	r0, r6
 8016ad0:	2101      	movs	r1, #1
 8016ad2:	f00f fc47 	bl	8026364 <tSampler_setMode>
                tExpSmooth_initToPool(&kSamplerGains[i], 0.0f, 0.04f, &smallPool);
 8016ad6:	4b2e      	ldr	r3, [pc, #184]	; (8016b90 <SFXSamplerKAlloc+0x140>)
 8016ad8:	4639      	mov	r1, r7
 8016ada:	eef0 0a49 	vmov.f32	s1, s18
 8016ade:	1918      	adds	r0, r3, r4
                samplePlayStarts[i] = 0;
 8016ae0:	9b03      	ldr	r3, [sp, #12]
                tExpSmooth_initToPool(&kSamplerGains[i], 0.0f, 0.04f, &smallPool);
 8016ae2:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8016b70 <SFXSamplerKAlloc+0x120>
                samplePlayStarts[i] = 0;
 8016ae6:	eca3 8a01 	vstmia	r3!, {s16}
 8016aea:	9303      	str	r3, [sp, #12]
                samplePlayLengths[i] = 0;
 8016aec:	9b00      	ldr	r3, [sp, #0]
 8016aee:	eca3 8a01 	vstmia	r3!, {s16}
 8016af2:	9300      	str	r3, [sp, #0]
                detectedAttackPos[i] = 0;
 8016af4:	9b02      	ldr	r3, [sp, #8]
 8016af6:	461a      	mov	r2, r3
 8016af8:	2300      	movs	r3, #0
 8016afa:	f842 3f04 	str.w	r3, [r2, #4]!
                crossfadeLengths[i] = 1000;
 8016afe:	9b01      	ldr	r3, [sp, #4]
                detectedAttackPos[i] = 0;
 8016b00:	9202      	str	r2, [sp, #8]
                crossfadeLengths[i] = 1000;
 8016b02:	ece3 8a01 	vstmia	r3!, {s17}
 8016b06:	9301      	str	r3, [sp, #4]
                samplerKeyHeld[i] = 0;
 8016b08:	f04f 0300 	mov.w	r3, #0
 8016b0c:	f80a 3f01 	strb.w	r3, [sl, #1]!
                tExpSmooth_initToPool(&kSamplerGains[i], 0.0f, 0.04f, &smallPool);
 8016b10:	f00b fc2a 	bl	8022368 <tExpSmooth_initToPool>
                loopOns[i] = 1;
 8016b14:	2101      	movs	r1, #1
 8016b16:	4b1f      	ldr	r3, [pc, #124]	; (8016b94 <SFXSamplerKAlloc+0x144>)
                sampleRates[i] = 1.0f;
 8016b18:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                loopOns[i] = 1;
 8016b1c:	5119      	str	r1, [r3, r4]
 8016b1e:	3404      	adds	r4, #4
                sampleRates[i] = 1.0f;
 8016b20:	f849 2b04 	str.w	r2, [r9], #4
            for (int i = 0; i < NUM_SAMPLER_KEYS; i++)
 8016b24:	2cc4      	cmp	r4, #196	; 0xc4
                sampleRatesMult[i] = 1.0f;
 8016b26:	f848 2b04 	str.w	r2, [r8], #4
            for (int i = 0; i < NUM_SAMPLER_KEYS; i++)
 8016b2a:	d1b5      	bne.n	8016a98 <SFXSamplerKAlloc+0x48>
            tSimplePoly_setNumVoices(&poly, NUM_SAMPLER_VOICES);
 8016b2c:	2106      	movs	r1, #6
            setLED_B(controlAllKeys);
 8016b2e:	4c1a      	ldr	r4, [pc, #104]	; (8016b98 <SFXSamplerKAlloc+0x148>)
            tSimplePoly_setNumVoices(&poly, NUM_SAMPLER_VOICES);
 8016b30:	481a      	ldr	r0, [pc, #104]	; (8016b9c <SFXSamplerKAlloc+0x14c>)
 8016b32:	f00d ff49 	bl	80249c8 <tSimplePoly_setNumVoices>
                waitingForDeactivation[i] = -1;
 8016b36:	4b1a      	ldr	r3, [pc, #104]	; (8016ba0 <SFXSamplerKAlloc+0x150>)
 8016b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            setLED_B(controlAllKeys);
 8016b3c:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
                waitingForDeactivation[i] = -1;
 8016b40:	e9c3 2200 	strd	r2, r2, [r3]
 8016b44:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8016b48:	e9c3 2204 	strd	r2, r2, [r3, #16]
            setLED_B(controlAllKeys);
 8016b4c:	f7fc ff46 	bl	80139dc <setLED_B>
            samp_thresh = 0.0002f;
 8016b50:	4b14      	ldr	r3, [pc, #80]	; (8016ba4 <SFXSamplerKAlloc+0x154>)
 8016b52:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        }
 8016b56:	b005      	add	sp, #20
 8016b58:	ecbd 8b04 	vpop	{d8-d9}
 8016b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b60:	20017384 	.word	0x20017384
 8016b64:	20000040 	.word	0x20000040
 8016b68:	20018338 	.word	0x20018338
 8016b6c:	3d23d70a 	.word	0x3d23d70a
 8016b70:	00000000 	.word	0x00000000
 8016b74:	200028c0 	.word	0x200028c0
 8016b78:	447a0000 	.word	0x447a0000
 8016b7c:	200183ac 	.word	0x200183ac
 8016b80:	200177c8 	.word	0x200177c8
 8016b84:	200181a4 	.word	0x200181a4
 8016b88:	20017550 	.word	0x20017550
 8016b8c:	2000356c 	.word	0x2000356c
 8016b90:	200026cc 	.word	0x200026cc
 8016b94:	20002c8c 	.word	0x20002c8c
 8016b98:	20000548 	.word	0x20000548
 8016b9c:	20017560 	.word	0x20017560
 8016ba0:	20017654 	.word	0x20017654
 8016ba4:	3951b717 	.word	0x3951b717
 8016ba8:	200194e0 	.word	0x200194e0
 8016bac:	20017777 	.word	0x20017777
 8016bb0:	200029a8 	.word	0x200029a8
 8016bb4:	20017890 	.word	0x20017890

08016bb8 <SFXSamplerKFrame>:
        {
 8016bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            int currentSamplerKey = currentSamplerKeyGlobal;
 8016bbc:	4da5      	ldr	r5, [pc, #660]	; (8016e54 <SFXSamplerKFrame+0x29c>)
            if (samplerKeyHeld[currentSamplerKey])
 8016bbe:	4ba6      	ldr	r3, [pc, #664]	; (8016e58 <SFXSamplerKFrame+0x2a0>)
        {
 8016bc0:	ed2d 8b04 	vpush	{d8-d9}
            int currentSamplerKey = currentSamplerKeyGlobal;
 8016bc4:	f8d5 40f4 	ldr.w	r4, [r5, #244]	; 0xf4
        {
 8016bc8:	b083      	sub	sp, #12
            if (samplerKeyHeld[currentSamplerKey])
 8016bca:	5d1b      	ldrb	r3, [r3, r4]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	f040 8100 	bne.w	8016dd2 <SFXSamplerKFrame+0x21a>
            if (buttonActionsSFX[ButtonA][ActionPress])
 8016bd2:	4da2      	ldr	r5, [pc, #648]	; (8016e5c <SFXSamplerKFrame+0x2a4>)
 8016bd4:	7d2b      	ldrb	r3, [r5, #20]
 8016bd6:	b163      	cbz	r3, 8016bf2 <SFXSamplerKFrame+0x3a>
                tBuffer_setRecordPosition(&keyBuff[currentSamplerKey],0);
 8016bd8:	48a1      	ldr	r0, [pc, #644]	; (8016e60 <SFXSamplerKFrame+0x2a8>)
 8016bda:	2100      	movs	r1, #0
 8016bdc:	eb00 0684 	add.w	r6, r0, r4, lsl #2
 8016be0:	4630      	mov	r0, r6
 8016be2:	f00f fb03 	bl	80261ec <tBuffer_setRecordPosition>
                tBuffer_setRecordedLength(&keyBuff[currentSamplerKey],0);
 8016be6:	4630      	mov	r0, r6
 8016be8:	2100      	movs	r1, #0
 8016bea:	f00f fb0b 	bl	8026204 <tBuffer_setRecordedLength>
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8016bee:	2300      	movs	r3, #0
 8016bf0:	752b      	strb	r3, [r5, #20]
            if (buttonActionsSFX[ButtonB][ActionPress])
 8016bf2:	7e2b      	ldrb	r3, [r5, #24]
 8016bf4:	b163      	cbz	r3, 8016c10 <SFXSamplerKFrame+0x58>
                controlAllKeys = !controlAllKeys;
 8016bf6:	4a9b      	ldr	r2, [pc, #620]	; (8016e64 <SFXSamplerKFrame+0x2ac>)
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8016bf8:	2100      	movs	r1, #0
                controlAllKeys = !controlAllKeys;
 8016bfa:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8016bfe:	7629      	strb	r1, [r5, #24]
                controlAllKeys = !controlAllKeys;
 8016c00:	fab3 f383 	clz	r3, r3
 8016c04:	095b      	lsrs	r3, r3, #5
                setLED_B(controlAllKeys);
 8016c06:	4618      	mov	r0, r3
                controlAllKeys = !controlAllKeys;
 8016c08:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
                setLED_B(controlAllKeys);
 8016c0c:	f7fc fee6 	bl	80139dc <setLED_B>
            if (buttonActionsSFX[ButtonC][ActionPress])
 8016c10:	7f2b      	ldrb	r3, [r5, #28]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	f000 80bf 	beq.w	8016d96 <SFXSamplerKFrame+0x1de>
                if (!controlAllKeys)
 8016c18:	4f92      	ldr	r7, [pc, #584]	; (8016e64 <SFXSamplerKFrame+0x2ac>)
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8016c1a:	2300      	movs	r3, #0
                if (!controlAllKeys)
 8016c1c:	f8d7 a0a0 	ldr.w	sl, [r7, #160]	; 0xa0
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8016c20:	772b      	strb	r3, [r5, #28]
                if (!controlAllKeys)
 8016c22:	f1ba 0f00 	cmp.w	sl, #0
 8016c26:	d051      	beq.n	8016ccc <SFXSamplerKFrame+0x114>
 8016c28:	2306      	movs	r3, #6
 8016c2a:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8016e90 <SFXSamplerKFrame+0x2d8>
                                    if ((currentPower > samp_thresh) && (currentPower > (previousPower + 0.0005f)))
 8016c2e:	eddf 8a8e 	vldr	s17, [pc, #568]	; 8016e68 <SFXSamplerKFrame+0x2b0>
                                float previousPower = 0.0f;
 8016c32:	ed9f 9a8e 	vldr	s18, [pc, #568]	; 8016e6c <SFXSamplerKFrame+0x2b4>
 8016c36:	9301      	str	r3, [sp, #4]
 8016c38:	4e89      	ldr	r6, [pc, #548]	; (8016e60 <SFXSamplerKFrame+0x2a8>)
 8016c3a:	4d8d      	ldr	r5, [pc, #564]	; (8016e70 <SFXSamplerKFrame+0x2b8>)
 8016c3c:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8016e74 <SFXSamplerKFrame+0x2bc>
 8016c40:	e01c      	b.n	8016c7c <SFXSamplerKFrame+0xc4>
                                    if ((currentPower > samp_thresh) && (currentPower > (previousPower + 0.0005f)))
 8016c42:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8016c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c4a:	d539      	bpl.n	8016cc0 <SFXSamplerKFrame+0x108>
                                        int thePos = (i + detectedAttackPos[key] - 480) % buffLength;
 8016c4c:	682b      	ldr	r3, [r5, #0]
 8016c4e:	449b      	add	fp, r3
 8016c50:	f5ab 7bf0 	sub.w	fp, fp, #480	; 0x1e0
 8016c54:	fb9b f3f4 	sdiv	r3, fp, r4
 8016c58:	fb04 b413 	mls	r4, r4, r3, fp
 8016c5c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
                                        samplePlayStarts[key] = thePos;
 8016c60:	ee07 4a90 	vmov	s15, r4
                                        detectedAttackPos[key] = thePos;
 8016c64:	602c      	str	r4, [r5, #0]
                                        samplePlayStarts[key] = thePos;
 8016c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c6a:	edc8 7a00 	vstr	s15, [r8]
 8016c6e:	3504      	adds	r5, #4
 8016c70:	3604      	adds	r6, #4
 8016c72:	f108 0804 	add.w	r8, r8, #4
                        for (int key = 0; key < NUM_SAMPLER_KEYS; key++)
 8016c76:	45a9      	cmp	r9, r5
 8016c78:	f000 80a1 	beq.w	8016dbe <SFXSamplerKFrame+0x206>
                            int buffLength = tBuffer_getRecordedLength(&keyBuff[key]);
 8016c7c:	4630      	mov	r0, r6
 8016c7e:	f00f fabd 	bl	80261fc <tBuffer_getRecordedLength>
                            if (buffLength > 0)
 8016c82:	1e04      	subs	r4, r0, #0
 8016c84:	ddf3      	ble.n	8016c6e <SFXSamplerKFrame+0xb6>
                                if (detectedAttackPos[key] > 0)
 8016c86:	682b      	ldr	r3, [r5, #0]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	f300 8089 	bgt.w	8016da0 <SFXSamplerKFrame+0x1e8>
                                float previousPower = 0.0f;
 8016c8e:	eeb0 0a49 	vmov.f32	s0, s18
                                    if ((currentPower > samp_thresh) && (currentPower > (previousPower + 0.0005f)))
 8016c92:	ee30 8a28 	vadd.f32	s16, s0, s17
        {
 8016c96:	f04f 0a01 	mov.w	sl, #1
 8016c9a:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
                                    float testSample = tBuffer_get(&keyBuff[key], (i + detectedAttackPos[key]) % buffLength);
 8016c9e:	4630      	mov	r0, r6
 8016ca0:	445b      	add	r3, fp
 8016ca2:	fb93 f1f4 	sdiv	r1, r3, r4
 8016ca6:	fb04 3111 	mls	r1, r4, r1, r3
 8016caa:	f00f fa7f 	bl	80261ac <tBuffer_get>
                                    currentPower = testSample*testSample;
 8016cae:	ee20 0a00 	vmul.f32	s0, s0, s0
                                    if ((currentPower > samp_thresh) && (currentPower > (previousPower + 0.0005f)))
 8016cb2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8016cb6:	eef4 7ac0 	vcmpe.f32	s15, s0
 8016cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cbe:	d4c0      	bmi.n	8016c42 <SFXSamplerKFrame+0x8a>
                                    if (i >= buffLength)
 8016cc0:	4554      	cmp	r4, sl
 8016cc2:	ddd4      	ble.n	8016c6e <SFXSamplerKFrame+0xb6>
 8016cc4:	f10a 0a01 	add.w	sl, sl, #1
 8016cc8:	682b      	ldr	r3, [r5, #0]
 8016cca:	e7e6      	b.n	8016c9a <SFXSamplerKFrame+0xe2>
                    int buffLength = tBuffer_getRecordedLength(&keyBuff[currentSamplerKey]);
 8016ccc:	4b64      	ldr	r3, [pc, #400]	; (8016e60 <SFXSamplerKFrame+0x2a8>)
 8016cce:	ea4f 0984 	mov.w	r9, r4, lsl #2
                    if (detectedAttackPos[currentSamplerKey] > 0)
 8016cd2:	4e67      	ldr	r6, [pc, #412]	; (8016e70 <SFXSamplerKFrame+0x2b8>)
                    int buffLength = tBuffer_getRecordedLength(&keyBuff[currentSamplerKey]);
 8016cd4:	eb03 0809 	add.w	r8, r3, r9
 8016cd8:	4640      	mov	r0, r8
 8016cda:	f00f fa8f 	bl	80261fc <tBuffer_getRecordedLength>
                    if (detectedAttackPos[currentSamplerKey] > 0)
 8016cde:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
                    int buffLength = tBuffer_getRecordedLength(&keyBuff[currentSamplerKey]);
 8016ce2:	4605      	mov	r5, r0
                    if (detectedAttackPos[currentSamplerKey] > 0)
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	f300 80a3 	bgt.w	8016e30 <SFXSamplerKFrame+0x278>
                    float previousPower = 0.0f;
 8016cea:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8016e6c <SFXSamplerKFrame+0x2b4>
                        if ((currentPower > samp_thresh) && (currentPower > (previousPower + 0.0005f)))
 8016cee:	ed9f 8a5e 	vldr	s16, [pc, #376]	; 8016e68 <SFXSamplerKFrame+0x2b0>
 8016cf2:	ee30 8a08 	vadd.f32	s16, s0, s16
                        float testSample = tBuffer_get(&keyBuff[currentSamplerKey], (i + detectedAttackPos[currentSamplerKey]) % buffLength);
 8016cf6:	4453      	add	r3, sl
 8016cf8:	4640      	mov	r0, r8
 8016cfa:	f10a 0b01 	add.w	fp, sl, #1
 8016cfe:	fb93 f1f5 	sdiv	r1, r3, r5
 8016d02:	fb05 3111 	mls	r1, r5, r1, r3
 8016d06:	f00f fa51 	bl	80261ac <tBuffer_get>
                        currentPower = testSample*testSample;
 8016d0a:	ee20 0a00 	vmul.f32	s0, s0, s0
                        if ((currentPower > samp_thresh) && (currentPower > (previousPower + 0.0005f)))
 8016d0e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8016d12:	eef4 7ac0 	vcmpe.f32	s15, s0
 8016d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d1a:	f140 8083 	bpl.w	8016e24 <SFXSamplerKFrame+0x26c>
 8016d1e:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8016d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d26:	d57d      	bpl.n	8016e24 <SFXSamplerKFrame+0x26c>
                            int thePos = (i + detectedAttackPos[currentSamplerKey] - 480) % buffLength;
 8016d28:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
                            OLEDclearLine(SecondLine);
 8016d2c:	2001      	movs	r0, #1
                            samplePlayStarts[currentSamplerKey] = thePos;
 8016d2e:	4a51      	ldr	r2, [pc, #324]	; (8016e74 <SFXSamplerKFrame+0x2bc>)
                            int thePos = (i + detectedAttackPos[currentSamplerKey] - 480) % buffLength;
 8016d30:	4453      	add	r3, sl
                            samplePlayStarts[currentSamplerKey] = thePos;
 8016d32:	4491      	add	r9, r2
                            int thePos = (i + detectedAttackPos[currentSamplerKey] - 480) % buffLength;
 8016d34:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8016d38:	fb92 f3f5 	sdiv	r3, r2, r5
 8016d3c:	fb05 2313 	mls	r3, r5, r3, r2
 8016d40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
                            samplePlayStarts[currentSamplerKey] = thePos;
 8016d44:	ee07 3a90 	vmov	s15, r3
                            detectedAttackPos[currentSamplerKey] = thePos;
 8016d48:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
                            samplePlayStarts[currentSamplerKey] = thePos;
 8016d4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d50:	edc9 7a00 	vstr	s15, [r9]
                            OLEDclearLine(SecondLine);
 8016d54:	f7fd f85e 	bl	8013e14 <OLEDclearLine>
                            OLEDwriteString("ATKDETECT ", 10, 0, SecondLine);
 8016d58:	2200      	movs	r2, #0
 8016d5a:	210a      	movs	r1, #10
 8016d5c:	2301      	movs	r3, #1
 8016d5e:	4846      	ldr	r0, [pc, #280]	; (8016e78 <SFXSamplerKFrame+0x2c0>)
 8016d60:	f7fd f86c 	bl	8013e3c <OLEDwriteString>
                            OLEDwriteFloat((samplePlayStarts[currentSamplerKey] / (float)buffLength) * (buffLength * leaf.invSampleRate), OLEDgetCursor(), SecondLine);
 8016d64:	ee07 5a90 	vmov	s15, r5
 8016d68:	ed99 7a00 	vldr	s14, [r9]
 8016d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d70:	4b42      	ldr	r3, [pc, #264]	; (8016e7c <SFXSamplerKFrame+0x2c4>)
 8016d72:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8016d76:	ed93 7a01 	vldr	s14, [r3, #4]
 8016d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016d7e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016d82:	f7fd fad7 	bl	8014334 <OLEDgetCursor>
 8016d86:	2101      	movs	r1, #1
 8016d88:	b2c0      	uxtb	r0, r0
 8016d8a:	eeb0 0a48 	vmov.f32	s0, s16
 8016d8e:	f7fd f913 	bl	8013fb8 <OLEDwriteFloat>
                        if (i >= buffLength)
 8016d92:	455d      	cmp	r5, fp
 8016d94:	dd35      	ble.n	8016e02 <SFXSamplerKFrame+0x24a>
        }
 8016d96:	b003      	add	sp, #12
 8016d98:	ecbd 8b04 	vpop	{d8-d9}
 8016d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                    previousPower = tBuffer_get(&keyBuff[key], (detectedAttackPos[key] -1) % buffLength);
 8016da0:	f241 22bf 	movw	r2, #4799	; 0x12bf
                                    detectedAttackPos[key] += 4800;
 8016da4:	f503 5196 	add.w	r1, r3, #4800	; 0x12c0
                                    previousPower = tBuffer_get(&keyBuff[key], (detectedAttackPos[key] -1) % buffLength);
 8016da8:	4630      	mov	r0, r6
 8016daa:	441a      	add	r2, r3
                                    detectedAttackPos[key] += 4800;
 8016dac:	6029      	str	r1, [r5, #0]
                                    previousPower = tBuffer_get(&keyBuff[key], (detectedAttackPos[key] -1) % buffLength);
 8016dae:	fb92 f1f4 	sdiv	r1, r2, r4
 8016db2:	fb04 2111 	mls	r1, r4, r1, r2
 8016db6:	f00f f9f9 	bl	80261ac <tBuffer_get>
 8016dba:	682b      	ldr	r3, [r5, #0]
 8016dbc:	e769      	b.n	8016c92 <SFXSamplerKFrame+0xda>
                    for (int i = 0; i < NUM_SAMPLER_VOICES; i++)
 8016dbe:	9b01      	ldr	r3, [sp, #4]
 8016dc0:	3b01      	subs	r3, #1
 8016dc2:	9301      	str	r3, [sp, #4]
 8016dc4:	f47f af38 	bne.w	8016c38 <SFXSamplerKFrame+0x80>
        }
 8016dc8:	b003      	add	sp, #12
 8016dca:	ecbd 8b04 	vpop	{d8-d9}
 8016dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if ((tBuffer_isActive(&keyBuff[currentSamplerKey])) || (currentSamplerKey != prevSamplerKey)) //only write if recording
 8016dd2:	4823      	ldr	r0, [pc, #140]	; (8016e60 <SFXSamplerKFrame+0x2a8>)
 8016dd4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8016dd8:	f00f fa18 	bl	802620c <tBuffer_isActive>
 8016ddc:	b160      	cbz	r0, 8016df8 <SFXSamplerKFrame+0x240>
                    buttonActionsUI[ExtraMessage][ActionHoldContinuous] = 1;
 8016dde:	4b28      	ldr	r3, [pc, #160]	; (8016e80 <SFXSamplerKFrame+0x2c8>)
 8016de0:	2201      	movs	r2, #1
                    writeButtonFlag = ExtraMessage;
 8016de2:	4928      	ldr	r1, [pc, #160]	; (8016e84 <SFXSamplerKFrame+0x2cc>)
 8016de4:	200a      	movs	r0, #10
                    buttonActionsUI[ExtraMessage][ActionHoldContinuous] = 1;
 8016de6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                    writeActionFlag = ActionHoldContinuous;
 8016dea:	2203      	movs	r2, #3
 8016dec:	4b26      	ldr	r3, [pc, #152]	; (8016e88 <SFXSamplerKFrame+0x2d0>)
                    writeButtonFlag = ExtraMessage;
 8016dee:	7008      	strb	r0, [r1, #0]
                    writeActionFlag = ActionHoldContinuous;
 8016df0:	701a      	strb	r2, [r3, #0]
                prevSamplerKey = currentSamplerKey;
 8016df2:	f8c5 40f8 	str.w	r4, [r5, #248]	; 0xf8
 8016df6:	e6ec      	b.n	8016bd2 <SFXSamplerKFrame+0x1a>
                if ((tBuffer_isActive(&keyBuff[currentSamplerKey])) || (currentSamplerKey != prevSamplerKey)) //only write if recording
 8016df8:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
 8016dfc:	42a3      	cmp	r3, r4
 8016dfe:	d1ee      	bne.n	8016dde <SFXSamplerKFrame+0x226>
 8016e00:	e7f7      	b.n	8016df2 <SFXSamplerKFrame+0x23a>
                            detectedAttackPos[currentSamplerKey] = 0;
 8016e02:	2500      	movs	r5, #0
                            OLEDclearLine(SecondLine);
 8016e04:	2001      	movs	r0, #1
                            detectedAttackPos[currentSamplerKey] = 0;
 8016e06:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
                            OLEDclearLine(SecondLine);
 8016e0a:	f7fd f803 	bl	8013e14 <OLEDclearLine>
                            OLEDwriteString("NO ATK FOUND ", 10, 0, SecondLine);
 8016e0e:	462a      	mov	r2, r5
 8016e10:	2301      	movs	r3, #1
 8016e12:	210a      	movs	r1, #10
 8016e14:	481d      	ldr	r0, [pc, #116]	; (8016e8c <SFXSamplerKFrame+0x2d4>)
        }
 8016e16:	b003      	add	sp, #12
 8016e18:	ecbd 8b04 	vpop	{d8-d9}
 8016e1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                            OLEDwriteString("NO ATK FOUND ", 10, 0, SecondLine);
 8016e20:	f7fd b80c 	b.w	8013e3c <OLEDwriteString>
                        if (i >= buffLength)
 8016e24:	455d      	cmp	r5, fp
 8016e26:	ddec      	ble.n	8016e02 <SFXSamplerKFrame+0x24a>
        {
 8016e28:	46da      	mov	sl, fp
 8016e2a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8016e2e:	e762      	b.n	8016cf6 <SFXSamplerKFrame+0x13e>
                        previousPower = tBuffer_get(&keyBuff[currentSamplerKey], (detectedAttackPos[currentSamplerKey] -1) % buffLength);
 8016e30:	f241 22bf 	movw	r2, #4799	; 0x12bf
                        detectedAttackPos[currentSamplerKey] += 4800;
 8016e34:	f503 5196 	add.w	r1, r3, #4800	; 0x12c0
                        previousPower = tBuffer_get(&keyBuff[currentSamplerKey], (detectedAttackPos[currentSamplerKey] -1) % buffLength);
 8016e38:	4640      	mov	r0, r8
 8016e3a:	441a      	add	r2, r3
                        detectedAttackPos[currentSamplerKey] += 4800;
 8016e3c:	f846 1024 	str.w	r1, [r6, r4, lsl #2]
                        previousPower = tBuffer_get(&keyBuff[currentSamplerKey], (detectedAttackPos[currentSamplerKey] -1) % buffLength);
 8016e40:	fb92 f1f5 	sdiv	r1, r2, r5
 8016e44:	fb05 2111 	mls	r1, r5, r1, r2
 8016e48:	f00f f9b0 	bl	80261ac <tBuffer_get>
 8016e4c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8016e50:	e74d      	b.n	8016cee <SFXSamplerKFrame+0x136>
 8016e52:	bf00      	nop
 8016e54:	20000040 	.word	0x20000040
 8016e58:	20017778 	.word	0x20017778
 8016e5c:	20018724 	.word	0x20018724
 8016e60:	200181a4 	.word	0x200181a4
 8016e64:	20000548 	.word	0x20000548
 8016e68:	3a03126f 	.word	0x3a03126f
 8016e6c:	00000000 	.word	0x00000000
 8016e70:	200183b0 	.word	0x200183b0
 8016e74:	20017384 	.word	0x20017384
 8016e78:	081451bc 	.word	0x081451bc
 8016e7c:	200194e0 	.word	0x200194e0
 8016e80:	20018894 	.word	0x20018894
 8016e84:	200002d0 	.word	0x200002d0
 8016e88:	200002d1 	.word	0x200002d1
 8016e8c:	081451ac 	.word	0x081451ac
 8016e90:	20018474 	.word	0x20018474
 8016e94:	00000000 	.word	0x00000000

08016e98 <SFXSamplerKTick>:
            if (!controlAllKeys)
 8016e98:	4bd5      	ldr	r3, [pc, #852]	; (80171f0 <SFXSamplerKTick+0x358>)
        {
 8016e9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e9e:	ed2d 8b04 	vpush	{d8-d9}
 8016ea2:	b087      	sub	sp, #28
            if (!controlAllKeys)
 8016ea4:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
        {
 8016ea8:	9000      	str	r0, [sp, #0]
            if (!controlAllKeys)
 8016eaa:	2e00      	cmp	r6, #0
 8016eac:	f000 81ca 	beq.w	8017244 <SFXSamplerKTick+0x3ac>
                for (int i = 0; i < NUM_SAMPLER_VOICES; i++)
 8016eb0:	f04f 0900 	mov.w	r9, #0
 8016eb4:	4ccf      	ldr	r4, [pc, #828]	; (80171f4 <SFXSamplerKTick+0x35c>)
 8016eb6:	4dd0      	ldr	r5, [pc, #832]	; (80171f8 <SFXSamplerKTick+0x360>)
 8016eb8:	f8df a380 	ldr.w	sl, [pc, #896]	; 801723c <SFXSamplerKTick+0x3a4>
                    displayValues[1] = LEAF_clip(0.0f, knobs[1], (1.0f - knobs[0]));
 8016ebc:	eddf 8acf 	vldr	s17, [pc, #828]	; 80171fc <SFXSamplerKTick+0x364>
                    displayValues[5] = knobs[5] * 4000.0f;
 8016ec0:	ed9f 8acf 	vldr	s16, [pc, #828]	; 8017200 <SFXSamplerKTick+0x368>
                    if (tSimplePoly_isOn(&poly, i) > 0)
 8016ec4:	f8df b370 	ldr.w	fp, [pc, #880]	; 8017238 <SFXSamplerKTick+0x3a0>
 8016ec8:	e005      	b.n	8016ed6 <SFXSamplerKTick+0x3e>
                for (int i = 0; i < NUM_SAMPLER_VOICES; i++)
 8016eca:	f109 0901 	add.w	r9, r9, #1
 8016ece:	f1b9 0f06 	cmp.w	r9, #6
 8016ed2:	f000 80f5 	beq.w	80170c0 <SFXSamplerKTick+0x228>
                    displayValues[1] = LEAF_clip(0.0f, knobs[1], (1.0f - knobs[0]));
 8016ed6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
                    displayValues[0] = knobs[0];
 8016eda:	ed94 1a96 	vldr	s2, [r4, #600]	; 0x258
                    displayValues[1] = LEAF_clip(0.0f, knobs[1], (1.0f - knobs[0]));
 8016ede:	edd4 0a97 	vldr	s1, [r4, #604]	; 0x25c
 8016ee2:	eeb0 0a68 	vmov.f32	s0, s17
                    displayValues[0] = knobs[0];
 8016ee6:	ed85 1a00 	vstr	s2, [r5]
                    displayValues[1] = LEAF_clip(0.0f, knobs[1], (1.0f - knobs[0]));
 8016eea:	ee39 1a41 	vsub.f32	s2, s18, s2
 8016eee:	f00c ff0b 	bl	8023d08 <LEAF_clip>
                    displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 8016ef2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016ef6:	edd4 5a98 	vldr	s11, [r4, #608]	; 0x260
                    float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8016efa:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8016efe:	edd4 6a99 	vldr	s13, [r4, #612]	; 0x264
                    displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 8016f02:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8016f06:	ee75 5ae7 	vsub.f32	s11, s11, s15
                    displayValues[1] = LEAF_clip(0.0f, knobs[1], (1.0f - knobs[0]));
 8016f0a:	ed85 0a01 	vstr	s0, [r5, #4]
                    float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8016f0e:	ee76 7ae7 	vsub.f32	s15, s13, s15
                    displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 8016f12:	ee25 6a86 	vmul.f32	s12, s11, s12
                    float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8016f16:	ee67 7a87 	vmul.f32	s15, s15, s14
                    displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 8016f1a:	ed85 6a02 	vstr	s12, [r5, #8]
                    float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 8016f1e:	fef8 7a67 	vrinta.f32	s15, s15
                    if (rate < 0.0f)
 8016f22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f2a:	f100 811e 	bmi.w	801716a <SFXSamplerKTick+0x2d2>
                        rate += 1.0f;
 8016f2e:	ee77 7a89 	vadd.f32	s15, s15, s18
                    displayValues[5] = knobs[5] * 4000.0f;
 8016f32:	edd4 6a9b 	vldr	s13, [r4, #620]	; 0x26c
                    if (tSimplePoly_isOn(&poly, i) > 0)
 8016f36:	fa5f f689 	uxtb.w	r6, r9
                    displayValues[4] = roundf(knobs[4]);
 8016f3a:	ed94 7a9a 	vldr	s14, [r4, #616]	; 0x268
                    if (tSimplePoly_isOn(&poly, i) > 0)
 8016f3e:	4658      	mov	r0, fp
                    displayValues[5] = knobs[5] * 4000.0f;
 8016f40:	ee66 6a88 	vmul.f32	s13, s13, s16
                    displayValues[6] = knobs[6];
 8016f44:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
                    if (tSimplePoly_isOn(&poly, i) > 0)
 8016f48:	4631      	mov	r1, r6
                    displayValues[3] = rate;
 8016f4a:	edc5 7a03 	vstr	s15, [r5, #12]
                    displayValues[6] = knobs[6];
 8016f4e:	61ab      	str	r3, [r5, #24]
                    displayValues[4] = roundf(knobs[4]);
 8016f50:	fef8 7a47 	vrinta.f32	s15, s14
                    displayValues[5] = knobs[5] * 4000.0f;
 8016f54:	edc5 6a05 	vstr	s13, [r5, #20]
                    displayValues[4] = roundf(knobs[4]);
 8016f58:	edc5 7a04 	vstr	s15, [r5, #16]
                    if (tSimplePoly_isOn(&poly, i) > 0)
 8016f5c:	f00d fd6a 	bl	8024a34 <tSimplePoly_isOn>
 8016f60:	2800      	cmp	r0, #0
 8016f62:	ddb2      	ble.n	8016eca <SFXSamplerKTick+0x32>
                        int key = tSimplePoly_getPitch(&poly, i) - LOWEST_SAMPLER_KEY;
 8016f64:	4631      	mov	r1, r6
 8016f66:	4658      	mov	r0, fp
 8016f68:	f00d fd52 	bl	8024a10 <tSimplePoly_getPitch>
 8016f6c:	f1a0 0624 	sub.w	r6, r0, #36	; 0x24
                        if ((0 <= key) && (key < NUM_SAMPLER_KEYS))
 8016f70:	2e30      	cmp	r6, #48	; 0x30
 8016f72:	d8aa      	bhi.n	8016eca <SFXSamplerKTick+0x32>
                            tBuffer_tick(&keyBuff[key], input[1]);
 8016f74:	4ba3      	ldr	r3, [pc, #652]	; (8017204 <SFXSamplerKTick+0x36c>)
 8016f76:	00b7      	lsls	r7, r6, #2
 8016f78:	9a00      	ldr	r2, [sp, #0]
 8016f7a:	eb03 0807 	add.w	r8, r3, r7
 8016f7e:	ed92 0a01 	vldr	s0, [r2, #4]
 8016f82:	4640      	mov	r0, r8
 8016f84:	f00f f8f4 	bl	8026170 <tBuffer_tick>
                            int recordedLength = tBuffer_getRecordedLength(&keyBuff[key]);
 8016f88:	4640      	mov	r0, r8
 8016f8a:	f00f f937 	bl	80261fc <tBuffer_getRecordedLength>
                            if (knobs[0] != prevKnobs[0])
 8016f8e:	ed94 7a96 	vldr	s14, [r4, #600]	; 0x258
                            sampleLength = recordedLength * leaf.invSampleRate;
 8016f92:	ee07 0a90 	vmov	s15, r0
                            if (knobs[0] != prevKnobs[0])
 8016f96:	ed9a 6a00 	vldr	s12, [sl]
                            sampleLength = recordedLength * leaf.invSampleRate;
 8016f9a:	4b9b      	ldr	r3, [pc, #620]	; (8017208 <SFXSamplerKTick+0x370>)
 8016f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                            if (knobs[0] != prevKnobs[0])
 8016fa0:	eeb4 7a46 	vcmp.f32	s14, s12
                            sampleLength = recordedLength * leaf.invSampleRate;
 8016fa4:	edd3 6a01 	vldr	s13, [r3, #4]
 8016fa8:	4b91      	ldr	r3, [pc, #580]	; (80171f0 <SFXSamplerKTick+0x358>)
 8016faa:	ee66 6aa7 	vmul.f32	s13, s13, s15
                            if (knobs[0] != prevKnobs[0])
 8016fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                            sampleLength = recordedLength * leaf.invSampleRate;
 8016fb2:	edc3 6a24 	vstr	s13, [r3, #144]	; 0x90
                                samplePlayStarts[key]= (knobs[0] * recordedLength);
 8016fb6:	4b95      	ldr	r3, [pc, #596]	; (801720c <SFXSamplerKTick+0x374>)
                            if (knobs[0] != prevKnobs[0])
 8016fb8:	f040 810e 	bne.w	80171d8 <SFXSamplerKTick+0x340>
 8016fbc:	443b      	add	r3, r7
 8016fbe:	edd3 6a00 	vldr	s13, [r3]
                            if (knobs[1] != prevKnobs[1])
 8016fc2:	ed94 7a97 	vldr	s14, [r4, #604]	; 0x25c
 8016fc6:	ed9a 6a01 	vldr	s12, [sl, #4]
                                samplePlayLengths[key] = (knobs[1] * recordedLength);
 8016fca:	4a91      	ldr	r2, [pc, #580]	; (8017210 <SFXSamplerKTick+0x378>)
                            if (knobs[1] != prevKnobs[1])
 8016fcc:	eeb4 7a46 	vcmp.f32	s14, s12
 8016fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fd4:	d004      	beq.n	8016fe0 <SFXSamplerKTick+0x148>
                                samplePlayLengths[key] = (knobs[1] * recordedLength);
 8016fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016fda:	19d3      	adds	r3, r2, r7
 8016fdc:	edc3 7a00 	vstr	s15, [r3]
                            if (knobs[2] != prevKnobs[2])
 8016fe0:	ed94 7a98 	vldr	s14, [r4, #608]	; 0x260
 8016fe4:	edda 7a02 	vldr	s15, [sl, #8]
                                sampleRates[key] = displayValues[2];
 8016fe8:	4b8a      	ldr	r3, [pc, #552]	; (8017214 <SFXSamplerKTick+0x37c>)
                            if (knobs[2] != prevKnobs[2])
 8016fea:	eeb4 7a67 	vcmp.f32	s14, s15
                                sampleRates[key] = displayValues[2];
 8016fee:	9305      	str	r3, [sp, #20]
                            if (knobs[2] != prevKnobs[2])
 8016ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ff4:	d002      	beq.n	8016ffc <SFXSamplerKTick+0x164>
                                sampleRates[key] = displayValues[2];
 8016ff6:	68a9      	ldr	r1, [r5, #8]
 8016ff8:	443b      	add	r3, r7
 8016ffa:	6019      	str	r1, [r3, #0]
                            if (knobs[3] != prevKnobs[3])
 8016ffc:	ed94 7a99 	vldr	s14, [r4, #612]	; 0x264
 8017000:	edda 7a03 	vldr	s15, [sl, #12]
                                sampleRatesMult[key] = displayValues[3];
 8017004:	4b84      	ldr	r3, [pc, #528]	; (8017218 <SFXSamplerKTick+0x380>)
                            if (knobs[3] != prevKnobs[3])
 8017006:	eeb4 7a67 	vcmp.f32	s14, s15
                                sampleRatesMult[key] = displayValues[3];
 801700a:	9304      	str	r3, [sp, #16]
                            if (knobs[3] != prevKnobs[3])
 801700c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017010:	d002      	beq.n	8017018 <SFXSamplerKTick+0x180>
                                sampleRatesMult[key] = displayValues[3];
 8017012:	68e9      	ldr	r1, [r5, #12]
 8017014:	443b      	add	r3, r7
 8017016:	6019      	str	r1, [r3, #0]
                            if (knobs[4] != prevKnobs[4])
 8017018:	edd4 7a9a 	vldr	s15, [r4, #616]	; 0x268
 801701c:	ed9a 7a04 	vldr	s14, [sl, #16]
 8017020:	eef4 7a47 	vcmp.f32	s15, s14
 8017024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017028:	f040 8233 	bne.w	8017492 <SFXSamplerKTick+0x5fa>
 801702c:	4b7b      	ldr	r3, [pc, #492]	; (801721c <SFXSamplerKTick+0x384>)
 801702e:	9303      	str	r3, [sp, #12]
                            if (knobs[5] != prevKnobs[5])
 8017030:	ed94 7a9b 	vldr	s14, [r4, #620]	; 0x26c
 8017034:	edda 7a05 	vldr	s15, [sl, #20]
                                crossfadeLengths[key] = displayValues[5];
 8017038:	4b79      	ldr	r3, [pc, #484]	; (8017220 <SFXSamplerKTick+0x388>)
                            if (knobs[5] != prevKnobs[5])
 801703a:	eeb4 7a67 	vcmp.f32	s14, s15
 801703e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017042:	d002      	beq.n	801704a <SFXSamplerKTick+0x1b2>
                                crossfadeLengths[key] = displayValues[5];
 8017044:	6968      	ldr	r0, [r5, #20]
 8017046:	19d9      	adds	r1, r3, r7
 8017048:	6008      	str	r0, [r1, #0]
                            tSampler_setStart(&keySampler[key], samplePlayStarts[key]);
 801704a:	4876      	ldr	r0, [pc, #472]	; (8017224 <SFXSamplerKTick+0x38c>)
 801704c:	eefd 7ae6 	vcvt.s32.f32	s15, s13
                for (int i = 0; i < NUM_SAMPLER_VOICES; i++)
 8017050:	f109 0901 	add.w	r9, r9, #1
                            tSampler_setStart(&keySampler[key], samplePlayStarts[key]);
 8017054:	eb00 0807 	add.w	r8, r0, r7
 8017058:	ee17 1a90 	vmov	r1, s15
 801705c:	4640      	mov	r0, r8
 801705e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8017062:	f00f f9f5 	bl	8026450 <tSampler_setStart>
                            tSampler_setLength(&keySampler[key], samplePlayLengths[key]);
 8017066:	9a02      	ldr	r2, [sp, #8]
 8017068:	4640      	mov	r0, r8
 801706a:	443a      	add	r2, r7
 801706c:	edd2 7a00 	vldr	s15, [r2]
 8017070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017074:	ee17 1a90 	vmov	r1, s15
 8017078:	f00f fdf8 	bl	8026c6c <tSampler_setLength>
                            tSampler_setCrossfadeLength(&keySampler[key], crossfadeLengths[key]);
 801707c:	9b01      	ldr	r3, [sp, #4]
 801707e:	4640      	mov	r0, r8
 8017080:	443b      	add	r3, r7
 8017082:	edd3 7a00 	vldr	s15, [r3]
 8017086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801708a:	ee17 1a90 	vmov	r1, s15
 801708e:	f00f f96d 	bl	802636c <tSampler_setCrossfadeLength>
                            tSampler_setRate(&keySampler[key], sampleRates[key] * sampleRatesMult[key]);
 8017092:	9b05      	ldr	r3, [sp, #20]
 8017094:	9a04      	ldr	r2, [sp, #16]
 8017096:	4640      	mov	r0, r8
 8017098:	443b      	add	r3, r7
 801709a:	443a      	add	r2, r7
 801709c:	ed93 0a00 	vldr	s0, [r3]
 80170a0:	edd2 7a00 	vldr	s15, [r2]
 80170a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80170a8:	f00f fe7a 	bl	8026da0 <tSampler_setRate>
                            tSampler_setMode(&keySampler[key], (PlayMode)loopOns[key]);
 80170ac:	9b03      	ldr	r3, [sp, #12]
 80170ae:	4640      	mov	r0, r8
 80170b0:	f813 1026 	ldrb.w	r1, [r3, r6, lsl #2]
 80170b4:	f00f f956 	bl	8026364 <tSampler_setMode>
                for (int i = 0; i < NUM_SAMPLER_VOICES; i++)
 80170b8:	f1b9 0f06 	cmp.w	r9, #6
 80170bc:	f47f af0b 	bne.w	8016ed6 <SFXSamplerKTick+0x3e>
 80170c0:	f8df e17c 	ldr.w	lr, [pc, #380]	; 8017240 <SFXSamplerKTick+0x3a8>
 80170c4:	2424      	movs	r4, #36	; 0x24
 80170c6:	f8df c174 	ldr.w	ip, [pc, #372]	; 801723c <SFXSamplerKTick+0x3a4>
            float sample = 0.0f;
 80170ca:	ed9f 9a4c 	vldr	s18, [pc, #304]	; 80171fc <SFXSamplerKTick+0x364>
                if ( tempGain > 0.001f)
 80170ce:	eddf 8a56 	vldr	s17, [pc, #344]	; 8017228 <SFXSamplerKTick+0x390>
 80170d2:	4e56      	ldr	r6, [pc, #344]	; (801722c <SFXSamplerKTick+0x394>)
                    sample += tSampler_tick(&keySampler[i]) * tempGain;
 80170d4:	4f56      	ldr	r7, [pc, #344]	; (8017230 <SFXSamplerKTick+0x398>)
                        if (waitingForDeactivation[j] == (i + LOWEST_SAMPLER_KEY))
 80170d6:	4d57      	ldr	r5, [pc, #348]	; (8017234 <SFXSamplerKTick+0x39c>)
 80170d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80170dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170e0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80170e4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80170e8:	e015      	b.n	8017116 <SFXSamplerKTick+0x27e>
 80170ea:	682b      	ldr	r3, [r5, #0]
 80170ec:	42a3      	cmp	r3, r4
 80170ee:	d06b      	beq.n	80171c8 <SFXSamplerKTick+0x330>
 80170f0:	686b      	ldr	r3, [r5, #4]
 80170f2:	429c      	cmp	r4, r3
 80170f4:	d060      	beq.n	80171b8 <SFXSamplerKTick+0x320>
 80170f6:	68ab      	ldr	r3, [r5, #8]
 80170f8:	429c      	cmp	r4, r3
 80170fa:	d055      	beq.n	80171a8 <SFXSamplerKTick+0x310>
 80170fc:	68eb      	ldr	r3, [r5, #12]
 80170fe:	429c      	cmp	r4, r3
 8017100:	d04a      	beq.n	8017198 <SFXSamplerKTick+0x300>
 8017102:	692b      	ldr	r3, [r5, #16]
 8017104:	429c      	cmp	r4, r3
 8017106:	d03f      	beq.n	8017188 <SFXSamplerKTick+0x2f0>
 8017108:	696b      	ldr	r3, [r5, #20]
 801710a:	429c      	cmp	r4, r3
 801710c:	d034      	beq.n	8017178 <SFXSamplerKTick+0x2e0>
 801710e:	3401      	adds	r4, #1
 8017110:	3604      	adds	r6, #4
            for (int i = 0; i < NUM_SAMPLER_KEYS; i++)
 8017112:	2c55      	cmp	r4, #85	; 0x55
 8017114:	d013      	beq.n	801713e <SFXSamplerKTick+0x2a6>
                float tempGain = tExpSmooth_tick(&kSamplerGains[i]);
 8017116:	4630      	mov	r0, r6
 8017118:	f00b f96c 	bl	80223f4 <tExpSmooth_tick>
                if ( tempGain > 0.001f)
 801711c:	eeb4 0ae8 	vcmpe.f32	s0, s17
                float tempGain = tExpSmooth_tick(&kSamplerGains[i]);
 8017120:	eeb0 8a40 	vmov.f32	s16, s0
                if ( tempGain > 0.001f)
 8017124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017128:	dddf      	ble.n	80170ea <SFXSamplerKTick+0x252>
                    sample += tSampler_tick(&keySampler[i]) * tempGain;
 801712a:	eb07 0084 	add.w	r0, r7, r4, lsl #2
 801712e:	3401      	adds	r4, #1
 8017130:	f00f faba 	bl	80266a8 <tSampler_tick>
 8017134:	3604      	adds	r6, #4
            for (int i = 0; i < NUM_SAMPLER_KEYS; i++)
 8017136:	2c55      	cmp	r4, #85	; 0x55
                    sample += tSampler_tick(&keySampler[i]) * tempGain;
 8017138:	eea0 9a08 	vfma.f32	s18, s0, s16
            for (int i = 0; i < NUM_SAMPLER_KEYS; i++)
 801713c:	d1eb      	bne.n	8017116 <SFXSamplerKTick+0x27e>
            sample = tanhf(sample) * 0.98;
 801713e:	eeb0 0a49 	vmov.f32	s0, s18
 8017142:	f010 faef 	bl	8027724 <tanhf>
 8017146:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
            input[0] = sample;
 801714a:	9b00      	ldr	r3, [sp, #0]
            sample = tanhf(sample) * 0.98;
 801714c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 80171e8 <SFXSamplerKTick+0x350>
 8017150:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017154:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
            input[0] = sample;
 8017158:	ed83 7a00 	vstr	s14, [r3]
            input[1] = sample;
 801715c:	ed83 7a01 	vstr	s14, [r3, #4]
        }
 8017160:	b007      	add	sp, #28
 8017162:	ecbd 8b04 	vpop	{d8-d9}
 8017166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        (rate = 1.0f / fabsf(rate-1.0f));
 801716a:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801716e:	eeb0 7ae7 	vabs.f32	s14, s15
 8017172:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8017176:	e6dc      	b.n	8016f32 <SFXSamplerKTick+0x9a>
                            tSimplePoly_deactivateVoice(&poly, j);
 8017178:	2105      	movs	r1, #5
 801717a:	482f      	ldr	r0, [pc, #188]	; (8017238 <SFXSamplerKTick+0x3a0>)
 801717c:	f00d fb6e 	bl	802485c <tSimplePoly_deactivateVoice>
                            waitingForDeactivation[j] = -1;
 8017180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017184:	616b      	str	r3, [r5, #20]
 8017186:	e7c2      	b.n	801710e <SFXSamplerKTick+0x276>
                            tSimplePoly_deactivateVoice(&poly, j);
 8017188:	2104      	movs	r1, #4
 801718a:	482b      	ldr	r0, [pc, #172]	; (8017238 <SFXSamplerKTick+0x3a0>)
 801718c:	f00d fb66 	bl	802485c <tSimplePoly_deactivateVoice>
                            waitingForDeactivation[j] = -1;
 8017190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017194:	612b      	str	r3, [r5, #16]
 8017196:	e7b7      	b.n	8017108 <SFXSamplerKTick+0x270>
                            tSimplePoly_deactivateVoice(&poly, j);
 8017198:	2103      	movs	r1, #3
 801719a:	4827      	ldr	r0, [pc, #156]	; (8017238 <SFXSamplerKTick+0x3a0>)
 801719c:	f00d fb5e 	bl	802485c <tSimplePoly_deactivateVoice>
                            waitingForDeactivation[j] = -1;
 80171a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80171a4:	60eb      	str	r3, [r5, #12]
 80171a6:	e7ac      	b.n	8017102 <SFXSamplerKTick+0x26a>
                            tSimplePoly_deactivateVoice(&poly, j);
 80171a8:	2102      	movs	r1, #2
 80171aa:	4823      	ldr	r0, [pc, #140]	; (8017238 <SFXSamplerKTick+0x3a0>)
 80171ac:	f00d fb56 	bl	802485c <tSimplePoly_deactivateVoice>
                            waitingForDeactivation[j] = -1;
 80171b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80171b4:	60ab      	str	r3, [r5, #8]
 80171b6:	e7a1      	b.n	80170fc <SFXSamplerKTick+0x264>
                            tSimplePoly_deactivateVoice(&poly, j);
 80171b8:	2101      	movs	r1, #1
 80171ba:	481f      	ldr	r0, [pc, #124]	; (8017238 <SFXSamplerKTick+0x3a0>)
 80171bc:	f00d fb4e 	bl	802485c <tSimplePoly_deactivateVoice>
                            waitingForDeactivation[j] = -1;
 80171c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80171c4:	606b      	str	r3, [r5, #4]
 80171c6:	e796      	b.n	80170f6 <SFXSamplerKTick+0x25e>
                            tSimplePoly_deactivateVoice(&poly, j);
 80171c8:	2100      	movs	r1, #0
 80171ca:	481b      	ldr	r0, [pc, #108]	; (8017238 <SFXSamplerKTick+0x3a0>)
 80171cc:	f00d fb46 	bl	802485c <tSimplePoly_deactivateVoice>
                            waitingForDeactivation[j] = -1;
 80171d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80171d4:	602b      	str	r3, [r5, #0]
 80171d6:	e78b      	b.n	80170f0 <SFXSamplerKTick+0x258>
                                samplePlayStarts[key]= (knobs[0] * recordedLength);
 80171d8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80171dc:	443b      	add	r3, r7
 80171de:	edc3 6a00 	vstr	s13, [r3]
 80171e2:	e6ee      	b.n	8016fc2 <SFXSamplerKTick+0x12a>
 80171e4:	f3af 8000 	nop.w
 80171e8:	f5c28f5c 	.word	0xf5c28f5c
 80171ec:	3fef5c28 	.word	0x3fef5c28
 80171f0:	20000548 	.word	0x20000548
 80171f4:	20002d50 	.word	0x20002d50
 80171f8:	200187d4 	.word	0x200187d4
 80171fc:	00000000 	.word	0x00000000
 8017200:	457a0000 	.word	0x457a0000
 8017204:	200181a4 	.word	0x200181a4
 8017208:	200194e0 	.word	0x200194e0
 801720c:	20017384 	.word	0x20017384
 8017210:	200028c0 	.word	0x200028c0
 8017214:	200029a8 	.word	0x200029a8
 8017218:	20017890 	.word	0x20017890
 801721c:	20002c8c 	.word	0x20002c8c
 8017220:	200177c8 	.word	0x200177c8
 8017224:	2000356c 	.word	0x2000356c
 8017228:	3a83126f 	.word	0x3a83126f
 801722c:	200026cc 	.word	0x200026cc
 8017230:	200034dc 	.word	0x200034dc
 8017234:	20017654 	.word	0x20017654
 8017238:	20017560 	.word	0x20017560
 801723c:	2001818c 	.word	0x2001818c
 8017240:	20002fa8 	.word	0x20002fa8
            int currentSamplerKey = currentSamplerKeyGlobal;
 8017244:	4ba0      	ldr	r3, [pc, #640]	; (80174c8 <SFXSamplerKTick+0x630>)
                displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8017246:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
                displayValues[0] = knobs[0] * sampleLength;
 801724a:	4ca0      	ldr	r4, [pc, #640]	; (80174cc <SFXSamplerKTick+0x634>)
            int currentSamplerKey = currentSamplerKeyGlobal;
 801724c:	f8d3 80f4 	ldr.w	r8, [r3, #244]	; 0xf4
                int recordedLength = tBuffer_getRecordedLength(&keyBuff[currentSamplerKey]);
 8017250:	4b9f      	ldr	r3, [pc, #636]	; (80174d0 <SFXSamplerKTick+0x638>)
 8017252:	ea4f 0788 	mov.w	r7, r8, lsl #2
                displayValues[0] = knobs[0] * sampleLength;
 8017256:	4d9f      	ldr	r5, [pc, #636]	; (80174d4 <SFXSamplerKTick+0x63c>)
                int recordedLength = tBuffer_getRecordedLength(&keyBuff[currentSamplerKey]);
 8017258:	19d8      	adds	r0, r3, r7
 801725a:	f00e ffcf 	bl	80261fc <tBuffer_getRecordedLength>
                sampleLength = recordedLength * leaf.invSampleRate;
 801725e:	ee07 0a90 	vmov	s15, r0
 8017262:	4b9d      	ldr	r3, [pc, #628]	; (80174d8 <SFXSamplerKTick+0x640>)
 8017264:	eef8 8ae7 	vcvt.f32.s32	s17, s15
                displayValues[0] = knobs[0] * sampleLength;
 8017268:	ed94 7a96 	vldr	s14, [r4, #600]	; 0x258
                sampleLength = recordedLength * leaf.invSampleRate;
 801726c:	edd3 7a01 	vldr	s15, [r3, #4]
                displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8017270:	ee38 1a47 	vsub.f32	s2, s16, s14
 8017274:	edd4 0a97 	vldr	s1, [r4, #604]	; 0x25c
                sampleLength = recordedLength * leaf.invSampleRate;
 8017278:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801727c:	4b97      	ldr	r3, [pc, #604]	; (80174dc <SFXSamplerKTick+0x644>)
                displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 801727e:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80174e0 <SFXSamplerKTick+0x648>
                displayValues[0] = knobs[0] * sampleLength;
 8017282:	ee27 7a87 	vmul.f32	s14, s15, s14
                sampleLength = recordedLength * leaf.invSampleRate;
 8017286:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
                displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 801728a:	ee21 1a27 	vmul.f32	s2, s2, s15
 801728e:	ee67 0aa0 	vmul.f32	s1, s15, s1
                displayValues[0] = knobs[0] * sampleLength;
 8017292:	ed85 7a00 	vstr	s14, [r5]
                displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 8017296:	f00c fd37 	bl	8023d08 <LEAF_clip>
                displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 801729a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801729e:	edd4 5a98 	vldr	s11, [r4, #608]	; 0x260
                float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 80172a2:	ed94 6a99 	vldr	s12, [r4, #612]	; 0x264
 80172a6:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
                displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 80172aa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
                displayValues[1] = LEAF_clip(0.0f, knobs[1] * sampleLength, sampleLength * (1.0f - knobs[0]));
 80172ae:	ed85 0a01 	vstr	s0, [r5, #4]
                displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 80172b2:	ee75 3ae7 	vsub.f32	s7, s11, s15
                float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 80172b6:	ee76 7a67 	vsub.f32	s15, s12, s15
                displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 80172ba:	ee63 3aa6 	vmul.f32	s7, s7, s13
                float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 80172be:	ee67 7a87 	vmul.f32	s15, s15, s14
                displayValues[2] = (knobs[2] - 0.5f) * 4.0f;
 80172c2:	edc5 3a02 	vstr	s7, [r5, #8]
                float rate = roundf((knobs[3] - 0.5f) * 14.0f);
 80172c6:	fef8 7a67 	vrinta.f32	s15, s15
                if (rate < 0.0f)
 80172ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80172ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172d2:	f100 80f1 	bmi.w	80174b8 <SFXSamplerKTick+0x620>
                    rate += 1.0f;
 80172d6:	ee37 3a88 	vadd.f32	s6, s15, s16
                if (fabsf(knobs[0]-prevKnobs[0]) > 0.0001f)
 80172da:	f8df a224 	ldr.w	sl, [pc, #548]	; 8017500 <SFXSamplerKTick+0x668>
 80172de:	edd4 7a96 	vldr	s15, [r4, #600]	; 0x258
 80172e2:	edda 4a00 	vldr	s9, [sl]
 80172e6:	ed9f 5a7f 	vldr	s10, [pc, #508]	; 80174e4 <SFXSamplerKTick+0x64c>
 80172ea:	ee77 4ae4 	vsub.f32	s9, s15, s9
                displayValues[5] = knobs[5] * 4000.0f;
 80172ee:	ed94 7a9b 	vldr	s14, [r4, #620]	; 0x26c
 80172f2:	eddf 2a7d 	vldr	s5, [pc, #500]	; 80174e8 <SFXSamplerKTick+0x650>
                displayValues[6] = knobs[6];
 80172f6:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
                if (fabsf(knobs[0]-prevKnobs[0]) > 0.0001f)
 80172fa:	eef0 4ae4 	vabs.f32	s9, s9
                displayValues[4] = roundf(knobs[4]);
 80172fe:	edd4 6a9a 	vldr	s13, [r4, #616]	; 0x268
                displayValues[5] = knobs[5] * 4000.0f;
 8017302:	ee67 2a22 	vmul.f32	s5, s14, s5
                displayValues[6] = knobs[6];
 8017306:	61ab      	str	r3, [r5, #24]
                displayValues[4] = roundf(knobs[4]);
 8017308:	feb8 4a66 	vrinta.f32	s8, s13
                displayValues[3] = rate;
 801730c:	ed85 3a03 	vstr	s6, [r5, #12]
                if (fabsf(knobs[0]-prevKnobs[0]) > 0.0001f)
 8017310:	eef4 4ac5 	vcmpe.f32	s9, s10
                displayValues[4] = roundf(knobs[4]);
 8017314:	ed85 4a04 	vstr	s8, [r5, #16]
                displayValues[5] = knobs[5] * 4000.0f;
 8017318:	edc5 2a05 	vstr	s5, [r5, #20]
                    samplePlayStarts[currentSamplerKey]= (knobs[0] * recordedLength);// + detectedAttackPos[currentSamplerKey];
 801731c:	4b73      	ldr	r3, [pc, #460]	; (80174ec <SFXSamplerKTick+0x654>)
                if (fabsf(knobs[0]-prevKnobs[0]) > 0.0001f)
 801731e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017322:	f300 80c1 	bgt.w	80174a8 <SFXSamplerKTick+0x610>
 8017326:	443b      	add	r3, r7
 8017328:	edd3 7a00 	vldr	s15, [r3]
                if (fabsf(knobs[1]-prevKnobs[1])  > 0.0001f)
 801732c:	ed94 5a97 	vldr	s10, [r4, #604]	; 0x25c
 8017330:	edda 4a01 	vldr	s9, [sl, #4]
 8017334:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 80174e4 <SFXSamplerKTick+0x64c>
 8017338:	ee75 4a64 	vsub.f32	s9, s10, s9
                    samplePlayLengths[currentSamplerKey] = (knobs[1] * recordedLength);// - detectedAttackPos[currentSamplerKey];
 801733c:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 8017504 <SFXSamplerKTick+0x66c>
                if (fabsf(knobs[1]-prevKnobs[1])  > 0.0001f)
 8017340:	eef0 4ae4 	vabs.f32	s9, s9
 8017344:	eef4 4ac2 	vcmpe.f32	s9, s4
 8017348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801734c:	dd05      	ble.n	801735a <SFXSamplerKTick+0x4c2>
                    samplePlayLengths[currentSamplerKey] = (knobs[1] * recordedLength);// - detectedAttackPos[currentSamplerKey];
 801734e:	ee28 5a85 	vmul.f32	s10, s17, s10
 8017352:	eb0b 0307 	add.w	r3, fp, r7
 8017356:	ed83 5a00 	vstr	s10, [r3]
                if (fabsf(knobs[2]-prevKnobs[2])  > 0.0001f)
 801735a:	edda 4a02 	vldr	s9, [sl, #8]
 801735e:	ed9f 5a61 	vldr	s10, [pc, #388]	; 80174e4 <SFXSamplerKTick+0x64c>
 8017362:	ee75 5ae4 	vsub.f32	s11, s11, s9
                    sampleRates[currentSamplerKey] = displayValues[2];
 8017366:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8017508 <SFXSamplerKTick+0x670>
                if (fabsf(knobs[2]-prevKnobs[2])  > 0.0001f)
 801736a:	eef0 5ae5 	vabs.f32	s11, s11
 801736e:	eef4 5ac5 	vcmpe.f32	s11, s10
                if (fabsf(knobs[3]-prevKnobs[3])  > 0.0001f)
 8017372:	ed9a 5a03 	vldr	s10, [sl, #12]
 8017376:	eddf 5a5b 	vldr	s11, [pc, #364]	; 80174e4 <SFXSamplerKTick+0x64c>
 801737a:	ee36 6a45 	vsub.f32	s12, s12, s10
                if (fabsf(knobs[2]-prevKnobs[2])  > 0.0001f)
 801737e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                if (fabsf(knobs[3]-prevKnobs[3])  > 0.0001f)
 8017382:	eeb0 6ac6 	vabs.f32	s12, s12
                    sampleRates[currentSamplerKey] = displayValues[2];
 8017386:	bfc8      	it	gt
 8017388:	eb09 0307 	addgt.w	r3, r9, r7
                if (fabsf(knobs[3]-prevKnobs[3])  > 0.0001f)
 801738c:	eeb4 6ae5 	vcmpe.f32	s12, s11
                if (fabsf(knobs[4]-prevKnobs[4]) > 0.0001f)
 8017390:	edda 5a04 	vldr	s11, [sl, #16]
                    sampleRates[currentSamplerKey] = displayValues[2];
 8017394:	bfc8      	it	gt
 8017396:	edc3 3a00 	vstrgt	s7, [r3]
                if (fabsf(knobs[4]-prevKnobs[4]) > 0.0001f)
 801739a:	ee76 6ae5 	vsub.f32	s13, s13, s11
 801739e:	ed9f 6a51 	vldr	s12, [pc, #324]	; 80174e4 <SFXSamplerKTick+0x64c>
                if (fabsf(knobs[3]-prevKnobs[3])  > 0.0001f)
 80173a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    sampleRatesMult[currentSamplerKey] = displayValues[3];
 80173a6:	4b52      	ldr	r3, [pc, #328]	; (80174f0 <SFXSamplerKTick+0x658>)
                if (fabsf(knobs[4]-prevKnobs[4]) > 0.0001f)
 80173a8:	eef0 6ae6 	vabs.f32	s13, s13
                    sampleRatesMult[currentSamplerKey] = displayValues[3];
 80173ac:	9301      	str	r3, [sp, #4]
 80173ae:	bfc8      	it	gt
 80173b0:	19db      	addgt	r3, r3, r7
                if (fabsf(knobs[4]-prevKnobs[4]) > 0.0001f)
 80173b2:	eef4 6ac6 	vcmpe.f32	s13, s12
                    sampleRatesMult[currentSamplerKey] = displayValues[3];
 80173b6:	bfc8      	it	gt
 80173b8:	ed83 3a00 	vstrgt	s6, [r3]
                if (fabsf(knobs[4]-prevKnobs[4]) > 0.0001f)
 80173bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173c0:	dd78      	ble.n	80174b4 <SFXSamplerKTick+0x61c>
                    loopOns[currentSamplerKey] = roundf(knobs[4]);
 80173c2:	eebd 4ac4 	vcvt.s32.f32	s8, s8
 80173c6:	4b4b      	ldr	r3, [pc, #300]	; (80174f4 <SFXSamplerKTick+0x65c>)
 80173c8:	ee14 2a10 	vmov	r2, s8
 80173cc:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
                if (fabsf(knobs[5]-prevKnobs[5])> 0.0001f)
 80173d0:	ed9a 6a05 	vldr	s12, [sl, #20]
                tSampler_setStart(&keySampler[currentSamplerKey], samplePlayStarts[currentSamplerKey]);
 80173d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                if (fabsf(knobs[5]-prevKnobs[5])> 0.0001f)
 80173d8:	eddf 6a42 	vldr	s13, [pc, #264]	; 80174e4 <SFXSamplerKTick+0x64c>
                tSampler_setLength(&keySampler[currentSamplerKey], samplePlayLengths[currentSamplerKey]);
 80173dc:	44bb      	add	fp, r7
                if (fabsf(knobs[5]-prevKnobs[5])> 0.0001f)
 80173de:	ee37 7a46 	vsub.f32	s14, s14, s12
                    crossfadeLengths[currentSamplerKey] = displayValues[5];
 80173e2:	f8df a128 	ldr.w	sl, [pc, #296]	; 801750c <SFXSamplerKTick+0x674>
                tSampler_setStart(&keySampler[currentSamplerKey], samplePlayStarts[currentSamplerKey]);
 80173e6:	4d44      	ldr	r5, [pc, #272]	; (80174f8 <SFXSamplerKTick+0x660>)
                tSampler_setRate(&keySampler[currentSamplerKey], sampleRates[currentSamplerKey] * sampleRatesMult[currentSamplerKey]);
 80173e8:	44b9      	add	r9, r7
 80173ea:	9302      	str	r3, [sp, #8]
                if (fabsf(knobs[5]-prevKnobs[5])> 0.0001f)
 80173ec:	eeb0 7ac7 	vabs.f32	s14, s14
                tSampler_setStart(&keySampler[currentSamplerKey], samplePlayStarts[currentSamplerKey]);
 80173f0:	443d      	add	r5, r7
                    if (tSimplePoly_isOn(&poly, i) > 0)
 80173f2:	4c42      	ldr	r4, [pc, #264]	; (80174fc <SFXSamplerKTick+0x664>)
                tSampler_setStart(&keySampler[currentSamplerKey], samplePlayStarts[currentSamplerKey]);
 80173f4:	4628      	mov	r0, r5
                if (fabsf(knobs[5]-prevKnobs[5])> 0.0001f)
 80173f6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80173fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    crossfadeLengths[currentSamplerKey] = displayValues[5];
 80173fe:	bfc4      	itt	gt
 8017400:	eb0a 0107 	addgt.w	r1, sl, r7
 8017404:	edc1 2a00 	vstrgt	s5, [r1]
                tSampler_setStart(&keySampler[currentSamplerKey], samplePlayStarts[currentSamplerKey]);
 8017408:	ee17 1a90 	vmov	r1, s15
 801740c:	f00f f820 	bl	8026450 <tSampler_setStart>
                tSampler_setLength(&keySampler[currentSamplerKey], samplePlayLengths[currentSamplerKey]);
 8017410:	eddb 7a00 	vldr	s15, [fp]
 8017414:	4628      	mov	r0, r5
 8017416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801741a:	ee17 1a90 	vmov	r1, s15
 801741e:	f00f fc25 	bl	8026c6c <tSampler_setLength>
                tSampler_setCrossfadeLength(&keySampler[currentSamplerKey], crossfadeLengths[currentSamplerKey]);
 8017422:	eb0a 0207 	add.w	r2, sl, r7
 8017426:	4628      	mov	r0, r5
 8017428:	edd2 7a00 	vldr	s15, [r2]
 801742c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017430:	ee17 1a90 	vmov	r1, s15
 8017434:	f00e ff9a 	bl	802636c <tSampler_setCrossfadeLength>
                tSampler_setRate(&keySampler[currentSamplerKey], sampleRates[currentSamplerKey] * sampleRatesMult[currentSamplerKey]);
 8017438:	9b01      	ldr	r3, [sp, #4]
 801743a:	ed99 0a00 	vldr	s0, [r9]
 801743e:	4628      	mov	r0, r5
 8017440:	443b      	add	r3, r7
 8017442:	edd3 7a00 	vldr	s15, [r3]
 8017446:	ee20 0a27 	vmul.f32	s0, s0, s15
 801744a:	f00f fca9 	bl	8026da0 <tSampler_setRate>
                tSampler_setMode(&keySampler[currentSamplerKey], (PlayMode)loopOns[currentSamplerKey]);
 801744e:	9b02      	ldr	r3, [sp, #8]
 8017450:	4628      	mov	r0, r5
 8017452:	f813 1028 	ldrb.w	r1, [r3, r8, lsl #2]
 8017456:	f00e ff85 	bl	8026364 <tSampler_setMode>
 801745a:	e002      	b.n	8017462 <SFXSamplerKTick+0x5ca>
                for (int i = 0; i < NUM_SAMPLER_VOICES; ++i)
 801745c:	2e06      	cmp	r6, #6
 801745e:	f43f ae2f 	beq.w	80170c0 <SFXSamplerKTick+0x228>
                    if (tSimplePoly_isOn(&poly, i) > 0)
 8017462:	b2f5      	uxtb	r5, r6
 8017464:	4620      	mov	r0, r4
 8017466:	3601      	adds	r6, #1
 8017468:	4629      	mov	r1, r5
 801746a:	f00d fae3 	bl	8024a34 <tSimplePoly_isOn>
 801746e:	2800      	cmp	r0, #0
                        int key = tSimplePoly_getPitch(&poly, i) - LOWEST_SAMPLER_KEY;
 8017470:	4629      	mov	r1, r5
 8017472:	4620      	mov	r0, r4
                    if (tSimplePoly_isOn(&poly, i) > 0)
 8017474:	ddf2      	ble.n	801745c <SFXSamplerKTick+0x5c4>
                        int key = tSimplePoly_getPitch(&poly, i) - LOWEST_SAMPLER_KEY;
 8017476:	f00d facb 	bl	8024a10 <tSimplePoly_getPitch>
 801747a:	3824      	subs	r0, #36	; 0x24
                        if ((0 <= key) && (key < NUM_SAMPLER_KEYS))
 801747c:	2830      	cmp	r0, #48	; 0x30
 801747e:	d8ed      	bhi.n	801745c <SFXSamplerKTick+0x5c4>
                            tBuffer_tick(&keyBuff[key], input[1]);
 8017480:	4b13      	ldr	r3, [pc, #76]	; (80174d0 <SFXSamplerKTick+0x638>)
 8017482:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017486:	9b00      	ldr	r3, [sp, #0]
 8017488:	ed93 0a01 	vldr	s0, [r3, #4]
 801748c:	f00e fe70 	bl	8026170 <tBuffer_tick>
 8017490:	e7e4      	b.n	801745c <SFXSamplerKTick+0x5c4>
                                loopOns[key] = roundf(knobs[4]);
 8017492:	fef8 7a67 	vrinta.f32	s15, s15
 8017496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801749a:	4b16      	ldr	r3, [pc, #88]	; (80174f4 <SFXSamplerKTick+0x65c>)
 801749c:	ee17 1a90 	vmov	r1, s15
 80174a0:	9303      	str	r3, [sp, #12]
 80174a2:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
 80174a6:	e5c3      	b.n	8017030 <SFXSamplerKTick+0x198>
                    samplePlayStarts[currentSamplerKey]= (knobs[0] * recordedLength);// + detectedAttackPos[currentSamplerKey];
 80174a8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80174ac:	443b      	add	r3, r7
 80174ae:	edc3 7a00 	vstr	s15, [r3]
 80174b2:	e73b      	b.n	801732c <SFXSamplerKTick+0x494>
 80174b4:	4b0f      	ldr	r3, [pc, #60]	; (80174f4 <SFXSamplerKTick+0x65c>)
 80174b6:	e78b      	b.n	80173d0 <SFXSamplerKTick+0x538>
                    (rate = 1.0f / fabsf(rate-1.0f));
 80174b8:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80174bc:	eef0 7ae7 	vabs.f32	s15, s15
 80174c0:	ee88 3a27 	vdiv.f32	s6, s16, s15
 80174c4:	e709      	b.n	80172da <SFXSamplerKTick+0x442>
 80174c6:	bf00      	nop
 80174c8:	20000040 	.word	0x20000040
 80174cc:	20002d50 	.word	0x20002d50
 80174d0:	200181a4 	.word	0x200181a4
 80174d4:	200187d4 	.word	0x200187d4
 80174d8:	200194e0 	.word	0x200194e0
 80174dc:	20000548 	.word	0x20000548
 80174e0:	00000000 	.word	0x00000000
 80174e4:	38d1b717 	.word	0x38d1b717
 80174e8:	457a0000 	.word	0x457a0000
 80174ec:	20017384 	.word	0x20017384
 80174f0:	20017890 	.word	0x20017890
 80174f4:	20002c8c 	.word	0x20002c8c
 80174f8:	2000356c 	.word	0x2000356c
 80174fc:	20017560 	.word	0x20017560
 8017500:	2001818c 	.word	0x2001818c
 8017504:	200028c0 	.word	0x200028c0
 8017508:	200029a8 	.word	0x200029a8
 801750c:	200177c8 	.word	0x200177c8

08017510 <SFXSamplerKFree>:
        {
 8017510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017512:	2400      	movs	r4, #0
 8017514:	4f07      	ldr	r7, [pc, #28]	; (8017534 <SFXSamplerKFree+0x24>)
 8017516:	4e08      	ldr	r6, [pc, #32]	; (8017538 <SFXSamplerKFree+0x28>)
 8017518:	4d08      	ldr	r5, [pc, #32]	; (801753c <SFXSamplerKFree+0x2c>)
                tBuffer_free(&keyBuff[i]);
 801751a:	1938      	adds	r0, r7, r4
 801751c:	f00e fe1c 	bl	8026158 <tBuffer_free>
                tSampler_free(&keySampler[i]);
 8017520:	1930      	adds	r0, r6, r4
 8017522:	f00e ff13 	bl	802634c <tSampler_free>
                tExpSmooth_free(&kSamplerGains[i]);
 8017526:	1928      	adds	r0, r5, r4
 8017528:	3404      	adds	r4, #4
 801752a:	f00a ff43 	bl	80223b4 <tExpSmooth_free>
            for (int i = 0; i < NUM_SAMPLER_KEYS; i++)
 801752e:	2cc4      	cmp	r4, #196	; 0xc4
 8017530:	d1f3      	bne.n	801751a <SFXSamplerKFree+0xa>
        }
 8017532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017534:	200181a4 	.word	0x200181a4
 8017538:	2000356c 	.word	0x2000356c
 801753c:	200026cc 	.word	0x200026cc

08017540 <SFXSamplerAutoAlloc>:
        {
 8017540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            tBuffer_initToPool(&asBuff[0], MAX_AUTOSAMP_LENGTH, &largePool);
 8017544:	4c36      	ldr	r4, [pc, #216]	; (8017620 <SFXSamplerAutoAlloc+0xe0>)
 8017546:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8017658 <SFXSamplerAutoAlloc+0x118>
 801754a:	4f36      	ldr	r7, [pc, #216]	; (8017624 <SFXSamplerAutoAlloc+0xe4>)
            tBuffer_initToPool(&asBuff[1], MAX_AUTOSAMP_LENGTH, &largePool);
 801754c:	1d26      	adds	r6, r4, #4
            tBuffer_initToPool(&asBuff[0], MAX_AUTOSAMP_LENGTH, &largePool);
 801754e:	4642      	mov	r2, r8
 8017550:	4620      	mov	r0, r4
 8017552:	4639      	mov	r1, r7
            tSampler_initToPool(&asSampler[0], &asBuff[0], &smallPool);
 8017554:	4d34      	ldr	r5, [pc, #208]	; (8017628 <SFXSamplerAutoAlloc+0xe8>)
            tBuffer_initToPool(&asBuff[0], MAX_AUTOSAMP_LENGTH, &largePool);
 8017556:	f00e fde7 	bl	8026128 <tBuffer_initToPool>
            tBuffer_setRecordMode(&asBuff[0], RecordOneShot);
 801755a:	4620      	mov	r0, r4
 801755c:	2100      	movs	r1, #0
 801755e:	f00e fe49 	bl	80261f4 <tBuffer_setRecordMode>
            tBuffer_initToPool(&asBuff[1], MAX_AUTOSAMP_LENGTH, &largePool);
 8017562:	4642      	mov	r2, r8
 8017564:	4639      	mov	r1, r7
 8017566:	4630      	mov	r0, r6
            tSampler_initToPool(&asSampler[0], &asBuff[0], &smallPool);
 8017568:	4f30      	ldr	r7, [pc, #192]	; (801762c <SFXSamplerAutoAlloc+0xec>)
            tBuffer_initToPool(&asBuff[1], MAX_AUTOSAMP_LENGTH, &largePool);
 801756a:	f00e fddd 	bl	8026128 <tBuffer_initToPool>
            tBuffer_setRecordMode(&asBuff[1], RecordOneShot);
 801756e:	4630      	mov	r0, r6
 8017570:	2100      	movs	r1, #0
 8017572:	f00e fe3f 	bl	80261f4 <tBuffer_setRecordMode>
            tSampler_initToPool(&asSampler[0], &asBuff[0], &smallPool);
 8017576:	462a      	mov	r2, r5
 8017578:	4621      	mov	r1, r4
 801757a:	4638      	mov	r0, r7
            tSampler_initToPool(&asSampler[1], &asBuff[1], &smallPool);
 801757c:	1d3c      	adds	r4, r7, #4
            tSampler_initToPool(&asSampler[0], &asBuff[0], &smallPool);
 801757e:	f00e fe99 	bl	80262b4 <tSampler_initToPool>
            tSampler_setMode(&asSampler[0], PlayLoop);
 8017582:	4638      	mov	r0, r7
 8017584:	2101      	movs	r1, #1
 8017586:	f00e feed 	bl	8026364 <tSampler_setMode>
            tSampler_initToPool(&asSampler[1], &asBuff[1], &smallPool);
 801758a:	462a      	mov	r2, r5
 801758c:	4631      	mov	r1, r6
 801758e:	4620      	mov	r0, r4
 8017590:	f00e fe90 	bl	80262b4 <tSampler_initToPool>
            tSampler_setMode(&asSampler[1], PlayLoop);
 8017594:	4620      	mov	r0, r4
 8017596:	2101      	movs	r1, #1
            setLED_B(triggerChannel);
 8017598:	4c25      	ldr	r4, [pc, #148]	; (8017630 <SFXSamplerAutoAlloc+0xf0>)
            tSampler_setMode(&asSampler[1], PlayLoop);
 801759a:	f00e fee3 	bl	8026364 <tSampler_setMode>
            tEnvelopeFollower_initToPool(&envfollow, 0.00001f, 0.9999f, &smallPool);
 801759e:	4629      	mov	r1, r5
 80175a0:	eddf 0a24 	vldr	s1, [pc, #144]	; 8017634 <SFXSamplerAutoAlloc+0xf4>
 80175a4:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8017638 <SFXSamplerAutoAlloc+0xf8>
 80175a8:	4824      	ldr	r0, [pc, #144]	; (801763c <SFXSamplerAutoAlloc+0xfc>)
 80175aa:	f007 f8c1 	bl	801e730 <tEnvelopeFollower_initToPool>
            tExpSmooth_initToPool(&cfxSmooth, 0.0f, 0.01f, &smallPool);
 80175ae:	4629      	mov	r1, r5
 80175b0:	eddf 0a23 	vldr	s1, [pc, #140]	; 8017640 <SFXSamplerAutoAlloc+0x100>
 80175b4:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8017644 <SFXSamplerAutoAlloc+0x104>
 80175b8:	4823      	ldr	r0, [pc, #140]	; (8017648 <SFXSamplerAutoAlloc+0x108>)
 80175ba:	f00a fed5 	bl	8022368 <tExpSmooth_initToPool>
            setLED_A(samplerMode == PlayBackAndForth);
 80175be:	4b23      	ldr	r3, [pc, #140]	; (801764c <SFXSamplerAutoAlloc+0x10c>)
            randLengthVal = leaf.random() * 10000.0f;
 80175c0:	4d23      	ldr	r5, [pc, #140]	; (8017650 <SFXSamplerAutoAlloc+0x110>)
            setLED_A(samplerMode == PlayBackAndForth);
 80175c2:	f893 00fc 	ldrb.w	r0, [r3, #252]	; 0xfc
 80175c6:	f1a0 0002 	sub.w	r0, r0, #2
 80175ca:	fab0 f080 	clz	r0, r0
 80175ce:	0940      	lsrs	r0, r0, #5
 80175d0:	f7fc f9f6 	bl	80139c0 <setLED_A>
            setLED_B(triggerChannel);
 80175d4:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
 80175d8:	f7fc fa00 	bl	80139dc <setLED_B>
            currentSampler = 1;
 80175dc:	2101      	movs	r1, #1
            sample_countdown = 0;
 80175de:	2200      	movs	r2, #0
            randLengthVal = leaf.random() * 10000.0f;
 80175e0:	692b      	ldr	r3, [r5, #16]
            currentSampler = 1;
 80175e2:	f884 10a9 	strb.w	r1, [r4, #169]	; 0xa9
            sample_countdown = 0;
 80175e6:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
            randLengthVal = leaf.random() * 10000.0f;
 80175ea:	4798      	blx	r3
 80175ec:	eddf 7a19 	vldr	s15, [pc, #100]	; 8017654 <SFXSamplerAutoAlloc+0x114>
            randRateVal = (leaf.random() - 0.5f) * 4.0f;
 80175f0:	692b      	ldr	r3, [r5, #16]
            randLengthVal = leaf.random() * 10000.0f;
 80175f2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80175f6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80175fa:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
            randRateVal = (leaf.random() - 0.5f) * 4.0f;
 80175fe:	4798      	blx	r3
 8017600:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017604:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
            setLED_C(pitchQuantization);
 8017608:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
            randRateVal = (leaf.random() - 0.5f) * 4.0f;
 801760c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017610:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017614:	ed84 0a2d 	vstr	s0, [r4, #180]	; 0xb4
        }
 8017618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            setLED_C(pitchQuantization);
 801761c:	f7fc b9ec 	b.w	80139f8 <setLED_C>
 8017620:	20017540 	.word	0x20017540
 8017624:	0002ee00 	.word	0x0002ee00
 8017628:	20018338 	.word	0x20018338
 801762c:	200177b4 	.word	0x200177b4
 8017630:	20000548 	.word	0x20000548
 8017634:	3f7ff972 	.word	0x3f7ff972
 8017638:	3727c5ac 	.word	0x3727c5ac
 801763c:	200183a8 	.word	0x200183a8
 8017640:	3c23d70a 	.word	0x3c23d70a
 8017644:	00000000 	.word	0x00000000
 8017648:	20017298 	.word	0x20017298
 801764c:	20000040 	.word	0x20000040
 8017650:	200194e0 	.word	0x200194e0
 8017654:	461c4000 	.word	0x461c4000
 8017658:	20017550 	.word	0x20017550

0801765c <SFXSamplerAutoFrame>:
            if (buttonActionsSFX[ButtonC][ActionPress] == 1)
 801765c:	4b08      	ldr	r3, [pc, #32]	; (8017680 <SFXSamplerAutoFrame+0x24>)
 801765e:	7f1a      	ldrb	r2, [r3, #28]
 8017660:	2a01      	cmp	r2, #1
 8017662:	d000      	beq.n	8017666 <SFXSamplerAutoFrame+0xa>
        }
 8017664:	4770      	bx	lr
                pitchQuantization = !pitchQuantization;
 8017666:	4907      	ldr	r1, [pc, #28]	; (8017684 <SFXSamplerAutoFrame+0x28>)
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8017668:	2000      	movs	r0, #0
                pitchQuantization = !pitchQuantization;
 801766a:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 801766e:	7718      	strb	r0, [r3, #28]
                pitchQuantization = !pitchQuantization;
 8017670:	fab2 f282 	clz	r2, r2
 8017674:	0952      	lsrs	r2, r2, #5
                setLED_C(pitchQuantization);
 8017676:	4610      	mov	r0, r2
                pitchQuantization = !pitchQuantization;
 8017678:	f8c1 20b8 	str.w	r2, [r1, #184]	; 0xb8
                setLED_C(pitchQuantization);
 801767c:	f7fc b9bc 	b.w	80139f8 <setLED_C>
 8017680:	20018724 	.word	0x20018724
 8017684:	20000548 	.word	0x20000548

08017688 <SFXSamplerAutoTick>:
        {
 8017688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            if (triggerChannel > 0)
 801768c:	4ce0      	ldr	r4, [pc, #896]	; (8017a10 <SFXSamplerAutoTick+0x388>)
        {
 801768e:	4605      	mov	r5, r0
            if (triggerChannel > 0)
 8017690:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
        {
 8017694:	ed2d 8b06 	vpush	{d8-d10}
 8017698:	b082      	sub	sp, #8
            if (triggerChannel > 0)
 801769a:	2b00      	cmp	r3, #0
 801769c:	d06e      	beq.n	801777c <SFXSamplerAutoTick+0xf4>
                currentPower = tEnvelopeFollower_tick(&envfollow, input[0]);
 801769e:	ed90 0a00 	vldr	s0, [r0]
 80176a2:	48dc      	ldr	r0, [pc, #880]	; (8017a14 <SFXSamplerAutoTick+0x38c>)
 80176a4:	f007 f860 	bl	801e768 <tEnvelopeFollower_tick>
 80176a8:	ed84 0a2f 	vstr	s0, [r4, #188]	; 0xbc
            samp_thresh = 1.0f - knobs[0];
 80176ac:	4ada      	ldr	r2, [pc, #872]	; (8017a18 <SFXSamplerAutoTick+0x390>)
 80176ae:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
            int window_size = expBuffer[(int)(knobs[1] * expBufferSizeMinusOne)] * MAX_AUTOSAMP_LENGTH;
 80176b2:	4eda      	ldr	r6, [pc, #872]	; (8017a1c <SFXSamplerAutoTick+0x394>)
 80176b4:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 80176b8:	edd2 6ab0 	vldr	s13, [r2, #704]	; 0x2c0
 80176bc:	edd6 7a40 	vldr	s15, [r6, #256]	; 0x100
 80176c0:	49d7      	ldr	r1, [pc, #860]	; (8017a20 <SFXSamplerAutoTick+0x398>)
 80176c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80176c6:	ed9f 5ad7 	vldr	s10, [pc, #860]	; 8017a24 <SFXSamplerAutoTick+0x39c>
 80176ca:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 8017a28 <SFXSamplerAutoTick+0x3a0>
 80176ce:	edd2 7ab2 	vldr	s15, [r2, #712]	; 0x2c8
 80176d2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
            samp_thresh = 1.0f - knobs[0];
 80176d6:	ed92 6aaf 	vldr	s12, [r2, #700]	; 0x2bc
 80176da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80176de:	ed92 9ab4 	vldr	s18, [r2, #720]	; 0x2d0
 80176e2:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80176e6:	ed92 7ab1 	vldr	s14, [r2, #708]	; 0x2c4
            int window_size = expBuffer[(int)(knobs[1] * expBufferSizeMinusOne)] * MAX_AUTOSAMP_LENGTH;
 80176ea:	ee16 3a90 	vmov	r3, s13
 80176ee:	eddf 6acf 	vldr	s13, [pc, #828]	; 8017a2c <SFXSamplerAutoTick+0x3a4>
 80176f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80176f6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
            displayValues[0] = samp_thresh;
 80176fa:	4bcd      	ldr	r3, [pc, #820]	; (8017a30 <SFXSamplerAutoTick+0x3a8>)
            samp_thresh = 1.0f - knobs[0];
 80176fc:	ed84 6a29 	vstr	s12, [r4, #164]	; 0xa4
 8017700:	ee29 9a26 	vmul.f32	s18, s18, s13
            int window_size = expBuffer[(int)(knobs[1] * expBufferSizeMinusOne)] * MAX_AUTOSAMP_LENGTH;
 8017704:	edd1 0a00 	vldr	s1, [r1]
 8017708:	ee37 7a64 	vsub.f32	s14, s14, s9
            displayValues[0] = samp_thresh;
 801770c:	ed83 6a00 	vstr	s12, [r3]
 8017710:	eef8 6ae7 	vcvt.f32.s32	s13, s15
            int window_size = expBuffer[(int)(knobs[1] * expBufferSizeMinusOne)] * MAX_AUTOSAMP_LENGTH;
 8017714:	ee60 0a85 	vmul.f32	s1, s1, s10
            if (pitchQuantization)
 8017718:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
            int window_size = expBuffer[(int)(knobs[1] * expBufferSizeMinusOne)] * MAX_AUTOSAMP_LENGTH;
 801771c:	eefd 8ae0 	vcvt.s32.f32	s17, s1
            displayValues[1] = window_size;
 8017720:	eeb8 6ae8 	vcvt.f32.s32	s12, s17
 8017724:	ed83 6a01 	vstr	s12, [r3, #4]
            if (pitchQuantization)
 8017728:	b381      	cbz	r1, 801778c <SFXSamplerAutoTick+0x104>
                rate = roundf((knobs[2] - 0.5f) * 14.0f);
 801772a:	eeb2 5a0c 	vmov.f32	s10, #44	; 0x41600000  14.0
                if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801772e:	ed9f 6ac1 	vldr	s12, [pc, #772]	; 8017a34 <SFXSamplerAutoTick+0x3ac>
                rate = roundf((knobs[2] - 0.5f) * 14.0f);
 8017732:	ee27 7a05 	vmul.f32	s14, s14, s10
 8017736:	feb8 7a47 	vrinta.f32	s14, s14
                if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801773a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801773e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017742:	f100 8146 	bmi.w	80179d2 <SFXSamplerAutoTick+0x34a>
                else rate += 1.0f;
 8017746:	ee77 9a25 	vadd.f32	s19, s14, s11
            crossfadeLength = knobs[3] * 1000.0f;
 801774a:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
            if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 801774e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
            displayValues[3] = crossfadeLength;
 8017752:	edc3 6a03 	vstr	s13, [r3, #12]
            displayValues[2] = rate;
 8017756:	edc3 9a02 	vstr	s19, [r3, #8]
            if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 801775a:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801775e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017762:	f100 814c 	bmi.w	80179fe <SFXSamplerAutoTick+0x376>
            displayValues[5] = randLengthAmount;
 8017766:	ed83 9a05 	vstr	s18, [r3, #20]
                randRateAmount = roundf(knobs[6] * 8.0f);
 801776a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801776e:	ed92 8ab5 	vldr	s16, [r2, #724]	; 0x2d4
 8017772:	ee28 8a00 	vmul.f32	s16, s16, s0
 8017776:	feb8 8a48 	vrinta.f32	s16, s16
 801777a:	e02c      	b.n	80177d6 <SFXSamplerAutoTick+0x14e>
                currentPower = tEnvelopeFollower_tick(&envfollow, input[1]);
 801777c:	ed90 0a01 	vldr	s0, [r0, #4]
 8017780:	48a4      	ldr	r0, [pc, #656]	; (8017a14 <SFXSamplerAutoTick+0x38c>)
 8017782:	f006 fff1 	bl	801e768 <tEnvelopeFollower_tick>
 8017786:	ed84 0a2f 	vstr	s0, [r4, #188]	; 0xbc
 801778a:	e78f      	b.n	80176ac <SFXSamplerAutoTick+0x24>
            if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 801778c:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
            crossfadeLength = knobs[3] * 1000.0f;
 8017790:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
                rate = (knobs[2] - 0.5f) * 4.0f;
 8017794:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
            displayValues[3] = crossfadeLength;
 8017798:	edc3 6a03 	vstr	s13, [r3, #12]
            if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 801779c:	eeb4 9ac6 	vcmpe.f32	s18, s12
                rate = (knobs[2] - 0.5f) * 4.0f;
 80177a0:	ee67 9a29 	vmul.f32	s19, s14, s19
            if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 80177a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            displayValues[2] = rate;
 80177a8:	edc3 9a02 	vstr	s19, [r3, #8]
            if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 80177ac:	f100 80d1 	bmi.w	8017952 <SFXSamplerAutoTick+0x2ca>
            displayValues[5] = randLengthAmount;
 80177b0:	ed83 9a05 	vstr	s18, [r3, #20]
                randRateAmount = knobs[6] * 2.0f;
 80177b4:	ed92 8ab5 	vldr	s16, [r2, #724]	; 0x2d4
                if (randRateAmount < 0.01) randRateAmount = 0.0f;
 80177b8:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8017a34 <SFXSamplerAutoTick+0x3ac>
                randRateAmount = knobs[6] * 2.0f;
 80177bc:	ee38 8a08 	vadd.f32	s16, s16, s16
                if (randRateAmount < 0.01) randRateAmount = 0.0f;
 80177c0:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8017a08 <SFXSamplerAutoTick+0x380>
 80177c4:	eeb7 5ac8 	vcvt.f64.f32	d5, s16
 80177c8:	eeb4 5b46 	vcmp.f64	d5, d6
 80177cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177d0:	bf48      	it	mi
 80177d2:	eeb0 8a47 	vmovmi.f32	s16, s14
            tSampler_setCrossfadeLength(&asSampler[0], crossfadeLength);
 80177d6:	ee17 1a90 	vmov	r1, s15
 80177da:	4897      	ldr	r0, [pc, #604]	; (8017a38 <SFXSamplerAutoTick+0x3b0>)
            displayValues[6] = randRateAmount;
 80177dc:	ed83 8a06 	vstr	s16, [r3, #24]
            tSampler_setCrossfadeLength(&asSampler[0], crossfadeLength);
 80177e0:	f00e fdc4 	bl	802636c <tSampler_setCrossfadeLength>
            tSampler_setCrossfadeLength(&asSampler[1], crossfadeLength);
 80177e4:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80177e8:	4894      	ldr	r0, [pc, #592]	; (8017a3c <SFXSamplerAutoTick+0x3b4>)
 80177ea:	f00e fdbf 	bl	802636c <tSampler_setCrossfadeLength>
            if ((currentPower > (samp_thresh)) && (currentPower > (previousPower + 0.001f)) && (samp_triggered == 0) && (sample_countdown == 0) && (fadeDone == 1))
 80177ee:	ed94 7a2f 	vldr	s14, [r4, #188]	; 0xbc
 80177f2:	edd4 7a29 	vldr	s15, [r4, #164]	; 0xa4
 80177f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80177fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177fe:	dd11      	ble.n	8017824 <SFXSamplerAutoTick+0x19c>
 8017800:	edd4 7a30 	vldr	s15, [r4, #192]	; 0xc0
 8017804:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8017a40 <SFXSamplerAutoTick+0x3b8>
 8017808:	ed94 7a2f 	vldr	s14, [r4, #188]	; 0xbc
 801780c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017818:	d504      	bpl.n	8017824 <SFXSamplerAutoTick+0x19c>
 801781a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 801781e:	2b00      	cmp	r3, #0
 8017820:	f000 811c 	beq.w	8017a5c <SFXSamplerAutoTick+0x3d4>
 8017824:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8017a38 <SFXSamplerAutoTick+0x3b0>
            tBuffer_tick(&asBuff[0], input[1]);
 8017828:	ed95 0a01 	vldr	s0, [r5, #4]
 801782c:	4885      	ldr	r0, [pc, #532]	; (8017a44 <SFXSamplerAutoTick+0x3bc>)
 801782e:	f00e fc9f 	bl	8026170 <tBuffer_tick>
            tBuffer_tick(&asBuff[1], input[1]);
 8017832:	ed95 0a01 	vldr	s0, [r5, #4]
 8017836:	4884      	ldr	r0, [pc, #528]	; (8017a48 <SFXSamplerAutoTick+0x3c0>)
 8017838:	f00e fc9a 	bl	8026170 <tBuffer_tick>
            if (sample_countdown > 0)
 801783c:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 8017840:	2f00      	cmp	r7, #0
 8017842:	f000 8098 	beq.w	8017976 <SFXSamplerAutoTick+0x2ee>
                sample_countdown--;
 8017846:	3f01      	subs	r7, #1
 8017848:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
            if (pitchQuantization)
 801784c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8017850:	ed94 0a2d 	vldr	s0, [r4, #180]	; 0xb4
 8017854:	2b00      	cmp	r3, #0
 8017856:	f000 8081 	beq.w	801795c <SFXSamplerAutoTick+0x2d4>
                tSampler_setRate(&asSampler[0], rate * randRateVal);
 801785a:	ee29 0a80 	vmul.f32	s0, s19, s0
 801785e:	4876      	ldr	r0, [pc, #472]	; (8017a38 <SFXSamplerAutoTick+0x3b0>)
 8017860:	f00f fa9e 	bl	8026da0 <tSampler_setRate>
                tSampler_setRate(&asSampler[1], rate * randRateVal);
 8017864:	ed94 0a2d 	vldr	s0, [r4, #180]	; 0xb4
 8017868:	4874      	ldr	r0, [pc, #464]	; (8017a3c <SFXSamplerAutoTick+0x3b4>)
 801786a:	ee29 0a80 	vmul.f32	s0, s19, s0
 801786e:	f00f fa97 	bl	8026da0 <tSampler_setRate>
            finalWindowSize = LEAF_clip(4, window_size + randLengthVal, MAX_AUTOSAMP_LENGTH);
 8017872:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8017876:	ee18 2a90 	vmov	r2, s17
 801787a:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8017a24 <SFXSamplerAutoTick+0x39c>
 801787e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8017882:	441a      	add	r2, r3
            if (buttonActionsSFX[ButtonA][ActionPress])
 8017884:	4f71      	ldr	r7, [pc, #452]	; (8017a4c <SFXSamplerAutoTick+0x3c4>)
            finalWindowSize = LEAF_clip(4, window_size + randLengthVal, MAX_AUTOSAMP_LENGTH);
 8017886:	ee00 2a90 	vmov	s1, r2
 801788a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801788e:	f00c fa3b 	bl	8023d08 <LEAF_clip>
 8017892:	eefd 7ac0 	vcvt.s32.f32	s15, s0
            tSampler_setEnd(&asSampler[0], finalWindowSize);
 8017896:	4868      	ldr	r0, [pc, #416]	; (8017a38 <SFXSamplerAutoTick+0x3b0>)
            finalWindowSize = LEAF_clip(4, window_size + randLengthVal, MAX_AUTOSAMP_LENGTH);
 8017898:	ee17 1a90 	vmov	r1, s15
 801789c:	edc6 7a41 	vstr	s15, [r6, #260]	; 0x104
            tSampler_setEnd(&asSampler[0], finalWindowSize);
 80178a0:	f00e fe6c 	bl	802657c <tSampler_setEnd>
            tSampler_setEnd(&asSampler[1], finalWindowSize);
 80178a4:	f8d6 1104 	ldr.w	r1, [r6, #260]	; 0x104
 80178a8:	4864      	ldr	r0, [pc, #400]	; (8017a3c <SFXSamplerAutoTick+0x3b4>)
 80178aa:	f00e fe67 	bl	802657c <tSampler_setEnd>
            if (buttonActionsSFX[ButtonA][ActionPress])
 80178ae:	7d3b      	ldrb	r3, [r7, #20]
 80178b0:	b14b      	cbz	r3, 80178c6 <SFXSamplerAutoTick+0x23e>
                if (samplerMode == PlayLoop)
 80178b2:	f896 80fc 	ldrb.w	r8, [r6, #252]	; 0xfc
 80178b6:	f1b8 0f01 	cmp.w	r8, #1
 80178ba:	f000 8129 	beq.w	8017b10 <SFXSamplerAutoTick+0x488>
                else if (samplerMode == PlayBackAndForth)
 80178be:	f1b8 0f02 	cmp.w	r8, #2
 80178c2:	f000 8136 	beq.w	8017b32 <SFXSamplerAutoTick+0x4aa>
            if (buttonActionsSFX[ButtonB][ActionPress])
 80178c6:	7e3b      	ldrb	r3, [r7, #24]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d175      	bne.n	80179b8 <SFXSamplerAutoTick+0x330>
            float fade = tExpSmooth_tick(&cfxSmooth);
 80178cc:	4e60      	ldr	r6, [pc, #384]	; (8017a50 <SFXSamplerAutoTick+0x3c8>)
 80178ce:	4630      	mov	r0, r6
 80178d0:	f00a fd90 	bl	80223f4 <tExpSmooth_tick>
            if (fabsf(cfxSmooth->curr - cfxSmooth->dest) < 0.00001f)
 80178d4:	6833      	ldr	r3, [r6, #0]
 80178d6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8017a54 <SFXSamplerAutoTick+0x3cc>
 80178da:	edd3 7a03 	vldr	s15, [r3, #12]
 80178de:	edd3 6a04 	vldr	s13, [r3, #16]
 80178e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80178e6:	eef0 7ae7 	vabs.f32	s15, s15
 80178ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80178ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178f2:	d502      	bpl.n	80178fa <SFXSamplerAutoTick+0x272>
                fadeDone = 1;
 80178f4:	2301      	movs	r3, #1
 80178f6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
            LEAF_crossfade((fade * 2.0f) - 1.0f, volumes);
 80178fa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80178fe:	4668      	mov	r0, sp
 8017900:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017904:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017908:	eeb0 0a67 	vmov.f32	s0, s15
 801790c:	f00c f978 	bl	8023c00 <LEAF_crossfade>
            sample = (tSampler_tick(&asSampler[0]) * volumes[1]) + (tSampler_tick(&asSampler[1]) * volumes[0]);
 8017910:	4849      	ldr	r0, [pc, #292]	; (8017a38 <SFXSamplerAutoTick+0x3b0>)
 8017912:	f00e fec9 	bl	80266a8 <tSampler_tick>
 8017916:	4849      	ldr	r0, [pc, #292]	; (8017a3c <SFXSamplerAutoTick+0x3b4>)
 8017918:	eef0 8a40 	vmov.f32	s17, s0
 801791c:	ed9d 8a01 	vldr	s16, [sp, #4]
 8017920:	f00e fec2 	bl	80266a8 <tSampler_tick>
 8017924:	eddd 7a00 	vldr	s15, [sp]
            input[0] = sample * 0.99f;
 8017928:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8017a58 <SFXSamplerAutoTick+0x3d0>
            sample = (tSampler_tick(&asSampler[0]) * volumes[1]) + (tSampler_tick(&asSampler[1]) * volumes[0]);
 801792c:	ee20 0a27 	vmul.f32	s0, s0, s15
            previousPower = currentPower;
 8017930:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8017934:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
            sample = (tSampler_tick(&asSampler[0]) * volumes[1]) + (tSampler_tick(&asSampler[1]) * volumes[0]);
 8017938:	eea8 0a88 	vfma.f32	s0, s17, s16
            input[0] = sample * 0.99f;
 801793c:	ee20 0a07 	vmul.f32	s0, s0, s14
            input[1] = sample * 0.99f;
 8017940:	ed85 0a01 	vstr	s0, [r5, #4]
            input[0] = sample * 0.99f;
 8017944:	ed85 0a00 	vstr	s0, [r5]
        }
 8017948:	b002      	add	sp, #8
 801794a:	ecbd 8b06 	vpop	{d8-d10}
 801794e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            displayValues[5] = randLengthAmount;
 8017952:	ed9f 9a38 	vldr	s18, [pc, #224]	; 8017a34 <SFXSamplerAutoTick+0x3ac>
 8017956:	ed83 9a05 	vstr	s18, [r3, #20]
 801795a:	e72b      	b.n	80177b4 <SFXSamplerAutoTick+0x12c>
                tSampler_setRate(&asSampler[0], rate + randRateVal);
 801795c:	ee39 0a80 	vadd.f32	s0, s19, s0
 8017960:	4835      	ldr	r0, [pc, #212]	; (8017a38 <SFXSamplerAutoTick+0x3b0>)
 8017962:	f00f fa1d 	bl	8026da0 <tSampler_setRate>
                tSampler_setRate(&asSampler[1], rate + randRateVal);
 8017966:	ed94 0a2d 	vldr	s0, [r4, #180]	; 0xb4
 801796a:	4834      	ldr	r0, [pc, #208]	; (8017a3c <SFXSamplerAutoTick+0x3b4>)
 801796c:	ee39 0a80 	vadd.f32	s0, s19, s0
 8017970:	f00f fa16 	bl	8026da0 <tSampler_setRate>
 8017974:	e77d      	b.n	8017872 <SFXSamplerAutoTick+0x1ea>
            else if (samp_triggered == 1)
 8017976:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 801797a:	2b01      	cmp	r3, #1
 801797c:	f47f af66 	bne.w	801784c <SFXSamplerAutoTick+0x1c4>
                setLED_1(0);
 8017980:	4638      	mov	r0, r7
 8017982:	f7fb fffd 	bl	8013980 <setLED_1>
                currentSampler = !currentSampler;
 8017986:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 801798a:	fab3 f383 	clz	r3, r3
 801798e:	095b      	lsrs	r3, r3, #5
                tSampler_play(&asSampler[currentSampler]);
 8017990:	eb08 0083 	add.w	r0, r8, r3, lsl #2
                currentSampler = !currentSampler;
 8017994:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
                tSampler_play(&asSampler[currentSampler]);
 8017998:	f00e fcfe 	bl	8026398 <tSampler_play>
                tExpSmooth_setDest(&cfxSmooth,(float)currentSampler);
 801799c:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 80179a0:	482b      	ldr	r0, [pc, #172]	; (8017a50 <SFXSamplerAutoTick+0x3c8>)
 80179a2:	ee00 3a10 	vmov	s0, r3
 80179a6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80179aa:	f00a fd19 	bl	80223e0 <tExpSmooth_setDest>
                samp_triggered = 0;
 80179ae:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
                fadeDone = 0;
 80179b2:	f8c4 70c8 	str.w	r7, [r4, #200]	; 0xc8
 80179b6:	e749      	b.n	801784c <SFXSamplerAutoTick+0x1c4>
                triggerChannel = (triggerChannel > 0) ? 0 : 1;
 80179b8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 80179bc:	2200      	movs	r2, #0
                triggerChannel = (triggerChannel > 0) ? 0 : 1;
 80179be:	fab3 f383 	clz	r3, r3
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 80179c2:	763a      	strb	r2, [r7, #24]
                triggerChannel = (triggerChannel > 0) ? 0 : 1;
 80179c4:	095b      	lsrs	r3, r3, #5
                setLED_B(triggerChannel);
 80179c6:	4618      	mov	r0, r3
                triggerChannel = (triggerChannel > 0) ? 0 : 1;
 80179c8:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
                setLED_B(triggerChannel);
 80179cc:	f7fc f806 	bl	80139dc <setLED_B>
 80179d0:	e77c      	b.n	80178cc <SFXSamplerAutoTick+0x244>
                if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 80179d2:	ee37 7a65 	vsub.f32	s14, s14, s11
            crossfadeLength = knobs[3] * 1000.0f;
 80179d6:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
            if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 80179da:	eeb3 5a04 	vmov.f32	s10, #52	; 0x41a00000  20.0
            displayValues[3] = crossfadeLength;
 80179de:	edc3 6a03 	vstr	s13, [r3, #12]
                if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 80179e2:	eeb0 7ac7 	vabs.f32	s14, s14
            if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 80179e6:	eeb4 9a45 	vcmp.f32	s18, s10
                if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 80179ea:	eec5 9a87 	vdiv.f32	s19, s11, s14
            if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 80179ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179f2:	bf48      	it	mi
 80179f4:	eeb0 9a46 	vmovmi.f32	s18, s12
            displayValues[2] = rate;
 80179f8:	edc3 9a02 	vstr	s19, [r3, #8]
 80179fc:	e6b3      	b.n	8017766 <SFXSamplerAutoTick+0xde>
            displayValues[5] = randLengthAmount;
 80179fe:	ed83 6a05 	vstr	s12, [r3, #20]
            if (randLengthAmount < 20.0f) randLengthAmount = 0.0f;
 8017a02:	eeb0 9a46 	vmov.f32	s18, s12
 8017a06:	e6b0      	b.n	801776a <SFXSamplerAutoTick+0xe2>
 8017a08:	47ae147b 	.word	0x47ae147b
 8017a0c:	3f847ae1 	.word	0x3f847ae1
 8017a10:	20000548 	.word	0x20000548
 8017a14:	200183a8 	.word	0x200183a8
 8017a18:	20002d50 	.word	0x20002d50
 8017a1c:	20000040 	.word	0x20000040
 8017a20:	20017084 	.word	0x20017084
 8017a24:	483b8000 	.word	0x483b8000
 8017a28:	447a0000 	.word	0x447a0000
 8017a2c:	459c4000 	.word	0x459c4000
 8017a30:	200187d4 	.word	0x200187d4
 8017a34:	00000000 	.word	0x00000000
 8017a38:	200177b4 	.word	0x200177b4
 8017a3c:	200177b8 	.word	0x200177b8
 8017a40:	3a83126f 	.word	0x3a83126f
 8017a44:	20017540 	.word	0x20017540
 8017a48:	20017544 	.word	0x20017544
 8017a4c:	20018724 	.word	0x20018724
 8017a50:	20017298 	.word	0x20017298
 8017a54:	3727c5ac 	.word	0x3727c5ac
 8017a58:	3f7d70a4 	.word	0x3f7d70a4
            if ((currentPower > (samp_thresh)) && (currentPower > (previousPower + 0.001f)) && (samp_triggered == 0) && (sample_countdown == 0) && (fadeDone == 1))
 8017a5c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	f47f aedf 	bne.w	8017824 <SFXSamplerAutoTick+0x19c>
 8017a66:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8017a6a:	2b01      	cmp	r3, #1
 8017a6c:	f47f aeda 	bne.w	8017824 <SFXSamplerAutoTick+0x19c>
                randLengthVal = (leaf.random() - 0.5f) * randLengthAmount * 2.0f;
 8017a70:	4f3e      	ldr	r7, [pc, #248]	; (8017b6c <SFXSamplerAutoTick+0x4e4>)
 8017a72:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8017a76:	ee39 9a09 	vadd.f32	s18, s18, s18
 8017a7a:	693b      	ldr	r3, [r7, #16]
 8017a7c:	4798      	blx	r3
 8017a7e:	ee30 0a4a 	vsub.f32	s0, s0, s20
                if (pitchQuantization) randRateVal = roundf(leaf.random() * randRateAmount) + 1.0f;
 8017a82:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
                randLengthVal = (leaf.random() - 0.5f) * randLengthAmount * 2.0f;
 8017a86:	ee20 0a09 	vmul.f32	s0, s0, s18
 8017a8a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017a8e:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
                if (pitchQuantization) randRateVal = roundf(leaf.random() * randRateAmount) + 1.0f;
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d05e      	beq.n	8017b54 <SFXSamplerAutoTick+0x4cc>
 8017a96:	693b      	ldr	r3, [r7, #16]
 8017a98:	4798      	blx	r3
 8017a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017a9e:	ee60 7a08 	vmul.f32	s15, s0, s16
 8017aa2:	fef8 7a67 	vrinta.f32	s15, s15
 8017aa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017aaa:	edc4 7a2d 	vstr	s15, [r4, #180]	; 0xb4
                samp_triggered = 1;
 8017aae:	2301      	movs	r3, #1
                tSampler_stop(&asSampler[!currentSampler]);
 8017ab0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8017b78 <SFXSamplerAutoTick+0x4f0>
                setLED_1(1);
 8017ab4:	4618      	mov	r0, r3
                samp_triggered = 1;
 8017ab6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
                setLED_1(1);
 8017aba:	f7fb ff61 	bl	8013980 <setLED_1>
                finalWindowSize = LEAF_clip(4, window_size + randLengthVal, MAX_AUTOSAMP_LENGTH);
 8017abe:	ee18 2a90 	vmov	r2, s17
 8017ac2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8017ac6:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8017aca:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8017b70 <SFXSamplerAutoTick+0x4e8>
 8017ace:	18d3      	adds	r3, r2, r3
 8017ad0:	ee00 3a90 	vmov	s1, r3
 8017ad4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8017ad8:	f00c f916 	bl	8023d08 <LEAF_clip>
                tSampler_stop(&asSampler[!currentSampler]);
 8017adc:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
                finalWindowSize = LEAF_clip(4, window_size + randLengthVal, MAX_AUTOSAMP_LENGTH);
 8017ae0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
                tSampler_stop(&asSampler[!currentSampler]);
 8017ae4:	fab0 f080 	clz	r0, r0
 8017ae8:	0940      	lsrs	r0, r0, #5
                finalWindowSize = LEAF_clip(4, window_size + randLengthVal, MAX_AUTOSAMP_LENGTH);
 8017aea:	edc6 7a41 	vstr	s15, [r6, #260]	; 0x104
                sample_countdown = finalWindowSize;
 8017aee:	edc4 7a2b 	vstr	s15, [r4, #172]	; 0xac
                tSampler_stop(&asSampler[!currentSampler]);
 8017af2:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8017af6:	f00e fc9f 	bl	8026438 <tSampler_stop>
                tBuffer_record(&asBuff[!currentSampler]);
 8017afa:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 8017afe:	481d      	ldr	r0, [pc, #116]	; (8017b74 <SFXSamplerAutoTick+0x4ec>)
 8017b00:	fab3 f383 	clz	r3, r3
 8017b04:	095b      	lsrs	r3, r3, #5
 8017b06:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8017b0a:	f00e fb61 	bl	80261d0 <tBuffer_record>
 8017b0e:	e68b      	b.n	8017828 <SFXSamplerAutoTick+0x1a0>
                    tSampler_setMode(&asSampler[0], PlayBackAndForth);
 8017b10:	2102      	movs	r1, #2
 8017b12:	4819      	ldr	r0, [pc, #100]	; (8017b78 <SFXSamplerAutoTick+0x4f0>)
 8017b14:	f00e fc26 	bl	8026364 <tSampler_setMode>
                    tSampler_setMode(&asSampler[1], PlayBackAndForth);
 8017b18:	2102      	movs	r1, #2
 8017b1a:	4818      	ldr	r0, [pc, #96]	; (8017b7c <SFXSamplerAutoTick+0x4f4>)
 8017b1c:	f00e fc22 	bl	8026364 <tSampler_setMode>
                    samplerMode = PlayBackAndForth;
 8017b20:	2302      	movs	r3, #2
                    setLED_A(1);
 8017b22:	4640      	mov	r0, r8
                    samplerMode = PlayBackAndForth;
 8017b24:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
                    setLED_A(1);
 8017b28:	f7fb ff4a 	bl	80139c0 <setLED_A>
                    buttonActionsSFX[ButtonA][ActionPress] = 0;
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	753b      	strb	r3, [r7, #20]
 8017b30:	e6c9      	b.n	80178c6 <SFXSamplerAutoTick+0x23e>
                    tSampler_setMode(&asSampler[0], PlayLoop);
 8017b32:	2101      	movs	r1, #1
 8017b34:	4810      	ldr	r0, [pc, #64]	; (8017b78 <SFXSamplerAutoTick+0x4f0>)
 8017b36:	f00e fc15 	bl	8026364 <tSampler_setMode>
                    tSampler_setMode(&asSampler[1], PlayLoop);
 8017b3a:	2101      	movs	r1, #1
 8017b3c:	480f      	ldr	r0, [pc, #60]	; (8017b7c <SFXSamplerAutoTick+0x4f4>)
 8017b3e:	f00e fc11 	bl	8026364 <tSampler_setMode>
                    samplerMode = PlayLoop;
 8017b42:	2301      	movs	r3, #1
                    setLED_A(0);
 8017b44:	2000      	movs	r0, #0
                    samplerMode = PlayLoop;
 8017b46:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
                    setLED_A(0);
 8017b4a:	f7fb ff39 	bl	80139c0 <setLED_A>
                    buttonActionsSFX[ButtonA][ActionPress] = 0;
 8017b4e:	2300      	movs	r3, #0
 8017b50:	753b      	strb	r3, [r7, #20]
 8017b52:	e6b8      	b.n	80178c6 <SFXSamplerAutoTick+0x23e>
                else randRateVal = (leaf.random() - 0.5f) * randRateAmount * 2.0f;
 8017b54:	693b      	ldr	r3, [r7, #16]
 8017b56:	ee38 8a08 	vadd.f32	s16, s16, s16
 8017b5a:	4798      	blx	r3
 8017b5c:	ee30 0a4a 	vsub.f32	s0, s0, s20
 8017b60:	ee20 8a08 	vmul.f32	s16, s0, s16
 8017b64:	ed84 8a2d 	vstr	s16, [r4, #180]	; 0xb4
 8017b68:	e7a1      	b.n	8017aae <SFXSamplerAutoTick+0x426>
 8017b6a:	bf00      	nop
 8017b6c:	200194e0 	.word	0x200194e0
 8017b70:	483b8000 	.word	0x483b8000
 8017b74:	20017540 	.word	0x20017540
 8017b78:	200177b4 	.word	0x200177b4
 8017b7c:	200177b8 	.word	0x200177b8

08017b80 <SFXSamplerAutoFree>:
        {
 8017b80:	b538      	push	{r3, r4, r5, lr}
            tBuffer_free(&asBuff[0]);
 8017b82:	4d0b      	ldr	r5, [pc, #44]	; (8017bb0 <SFXSamplerAutoFree+0x30>)
            tSampler_free(&asSampler[0]);
 8017b84:	4c0b      	ldr	r4, [pc, #44]	; (8017bb4 <SFXSamplerAutoFree+0x34>)
            tBuffer_free(&asBuff[0]);
 8017b86:	4628      	mov	r0, r5
 8017b88:	f00e fae6 	bl	8026158 <tBuffer_free>
            tBuffer_free(&asBuff[1]);
 8017b8c:	1d28      	adds	r0, r5, #4
 8017b8e:	f00e fae3 	bl	8026158 <tBuffer_free>
            tSampler_free(&asSampler[0]);
 8017b92:	4620      	mov	r0, r4
 8017b94:	f00e fbda 	bl	802634c <tSampler_free>
            tSampler_free(&asSampler[1]);
 8017b98:	1d20      	adds	r0, r4, #4
 8017b9a:	f00e fbd7 	bl	802634c <tSampler_free>
            tEnvelopeFollower_free(&envfollow);
 8017b9e:	4806      	ldr	r0, [pc, #24]	; (8017bb8 <SFXSamplerAutoFree+0x38>)
 8017ba0:	f006 fdde 	bl	801e760 <tEnvelopeFollower_free>
            tExpSmooth_free(&cfxSmooth);
 8017ba4:	4805      	ldr	r0, [pc, #20]	; (8017bbc <SFXSamplerAutoFree+0x3c>)
        }
 8017ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            tExpSmooth_free(&cfxSmooth);
 8017baa:	f00a bc03 	b.w	80223b4 <tExpSmooth_free>
 8017bae:	bf00      	nop
 8017bb0:	20017540 	.word	0x20017540
 8017bb4:	200177b4 	.word	0x200177b4
 8017bb8:	200183a8 	.word	0x200183a8
 8017bbc:	20017298 	.word	0x20017298

08017bc0 <SFXDistortionAlloc>:
        {
 8017bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            tOversampler_initToPool(&oversampler, distOS_ratio, FALSE, &smallPool);
 8017bc4:	4e2a      	ldr	r6, [pc, #168]	; (8017c70 <SFXDistortionAlloc+0xb0>)
            leaf.clearOnAllocation = 1;
 8017bc6:	2701      	movs	r7, #1
            tOversampler_initToPool(&oversampler, distOS_ratio, FALSE, &smallPool);
 8017bc8:	4d2a      	ldr	r5, [pc, #168]	; (8017c74 <SFXDistortionAlloc+0xb4>)
 8017bca:	2200      	movs	r2, #0
            leaf.clearOnAllocation = 1;
 8017bcc:	4c2a      	ldr	r4, [pc, #168]	; (8017c78 <SFXDistortionAlloc+0xb8>)
            tOversampler_initToPool(&oversampler, distOS_ratio, FALSE, &smallPool);
 8017bce:	4633      	mov	r3, r6
            tVZFilter_initToPool(&shelf1, Lowshelf, 80.0f, 6.0f, &smallPool);
 8017bd0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8017c98 <SFXDistortionAlloc+0xd8>
            tOversampler_initToPool(&oversampler, distOS_ratio, FALSE, &smallPool);
 8017bd4:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
 8017bd8:	4828      	ldr	r0, [pc, #160]	; (8017c7c <SFXDistortionAlloc+0xbc>)
            tVZFilter_initToPool(&shelf2, Highshelf, 12000.0f, 6.0f, &smallPool);
 8017bda:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8017c9c <SFXDistortionAlloc+0xdc>
            leaf.clearOnAllocation = 1;
 8017bde:	6167      	str	r7, [r4, #20]
            tOversampler_initToPool(&oversampler, distOS_ratio, FALSE, &smallPool);
 8017be0:	f007 fdea 	bl	801f7b8 <tOversampler_initToPool>
            tVZFilter_initToPool(&bell1, Bell, 1000.0f, 1.9f, &smallPool);
 8017be4:	4f26      	ldr	r7, [pc, #152]	; (8017c80 <SFXDistortionAlloc+0xc0>)
            tVZFilter_initToPool(&shelf1, Lowshelf, 80.0f, 6.0f, &smallPool);
 8017be6:	4632      	mov	r2, r6
 8017be8:	4648      	mov	r0, r9
 8017bea:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8017bee:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8017c84 <SFXDistortionAlloc+0xc4>
 8017bf2:	2106      	movs	r1, #6
 8017bf4:	f00a ff46 	bl	8022a84 <tVZFilter_initToPool>
            tVZFilter_initToPool(&shelf2, Highshelf, 12000.0f, 6.0f, &smallPool);
 8017bf8:	4632      	mov	r2, r6
 8017bfa:	4640      	mov	r0, r8
 8017bfc:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8017c00:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8017c88 <SFXDistortionAlloc+0xc8>
 8017c04:	2107      	movs	r1, #7
 8017c06:	f00a ff3d 	bl	8022a84 <tVZFilter_initToPool>
            tVZFilter_initToPool(&bell1, Bell, 1000.0f, 1.9f, &smallPool);
 8017c0a:	4632      	mov	r2, r6
 8017c0c:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8017c8c <SFXDistortionAlloc+0xcc>
 8017c10:	2105      	movs	r1, #5
 8017c12:	4638      	mov	r0, r7
 8017c14:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8017c90 <SFXDistortionAlloc+0xd0>
 8017c18:	f00a ff34 	bl	8022a84 <tVZFilter_initToPool>
            tVZFilter_setSampleRate(&shelf1, leaf.sampleRate * distOS_ratio);
 8017c1c:	edd5 7a42 	vldr	s15, [r5, #264]	; 0x108
 8017c20:	ed94 0a00 	vldr	s0, [r4]
 8017c24:	4648      	mov	r0, r9
 8017c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c2a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017c2e:	f00b f91f 	bl	8022e70 <tVZFilter_setSampleRate>
            tVZFilter_setSampleRate(&shelf2, leaf.sampleRate * distOS_ratio);
 8017c32:	edd5 7a42 	vldr	s15, [r5, #264]	; 0x108
 8017c36:	ed94 0a00 	vldr	s0, [r4]
 8017c3a:	4640      	mov	r0, r8
 8017c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c40:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017c44:	f00b f914 	bl	8022e70 <tVZFilter_setSampleRate>
            tVZFilter_setSampleRate(&bell1, leaf.sampleRate * distOS_ratio);
 8017c48:	ed95 0a42 	vldr	s0, [r5, #264]	; 0x108
 8017c4c:	edd4 7a00 	vldr	s15, [r4]
 8017c50:	4638      	mov	r0, r7
 8017c52:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8017c56:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017c5a:	f00b f909 	bl	8022e70 <tVZFilter_setSampleRate>
            setLED_A(distortionMode);
 8017c5e:	4b0d      	ldr	r3, [pc, #52]	; (8017c94 <SFXDistortionAlloc+0xd4>)
 8017c60:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
 8017c64:	f7fb feac 	bl	80139c0 <setLED_A>
            leaf.clearOnAllocation = 0;
 8017c68:	2300      	movs	r3, #0
 8017c6a:	6163      	str	r3, [r4, #20]
        }
 8017c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c70:	20018338 	.word	0x20018338
 8017c74:	20000040 	.word	0x20000040
 8017c78:	200194e0 	.word	0x200194e0
 8017c7c:	20018188 	.word	0x20018188
 8017c80:	2001737c 	.word	0x2001737c
 8017c84:	42a00000 	.word	0x42a00000
 8017c88:	463b8000 	.word	0x463b8000
 8017c8c:	3ff33333 	.word	0x3ff33333
 8017c90:	447a0000 	.word	0x447a0000
 8017c94:	20000548 	.word	0x20000548
 8017c98:	2001753c 	.word	0x2001753c
 8017c9c:	20017464 	.word	0x20017464

08017ca0 <SFXDistortionFrame>:
            if (buttonActionsSFX[ButtonA][ActionPress])
 8017ca0:	4a28      	ldr	r2, [pc, #160]	; (8017d44 <SFXDistortionFrame+0xa4>)
        {
 8017ca2:	b510      	push	{r4, lr}
            if (buttonActionsSFX[ButtonA][ActionPress])
 8017ca4:	7d13      	ldrb	r3, [r2, #20]
 8017ca6:	b163      	cbz	r3, 8017cc2 <SFXDistortionFrame+0x22>
                distortionMode = !distortionMode;
 8017ca8:	4927      	ldr	r1, [pc, #156]	; (8017d48 <SFXDistortionFrame+0xa8>)
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8017caa:	2000      	movs	r0, #0
                distortionMode = !distortionMode;
 8017cac:	f891 30cc 	ldrb.w	r3, [r1, #204]	; 0xcc
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8017cb0:	7510      	strb	r0, [r2, #20]
                distortionMode = !distortionMode;
 8017cb2:	fab3 f383 	clz	r3, r3
 8017cb6:	095b      	lsrs	r3, r3, #5
                setLED_A(distortionMode);
 8017cb8:	4618      	mov	r0, r3
                distortionMode = !distortionMode;
 8017cba:	f881 30cc 	strb.w	r3, [r1, #204]	; 0xcc
                setLED_A(distortionMode);
 8017cbe:	f7fb fe7f 	bl	80139c0 <setLED_A>
            displayValues[1] = (presetKnobValues[Distortion][1] * 30.0f) - 15.0f;
 8017cc2:	4b22      	ldr	r3, [pc, #136]	; (8017d4c <SFXDistortionFrame+0xac>)
 8017cc4:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 8017cc8:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
            displayValues[2] = (presetKnobValues[Distortion][2] * 34.0f) - 17.0f;
 8017ccc:	eddf 6a20 	vldr	s13, [pc, #128]	; 8017d50 <SFXDistortionFrame+0xb0>
 8017cd0:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
            displayValues[1] = (presetKnobValues[Distortion][1] * 30.0f) - 15.0f;
 8017cd4:	ed93 5ac9 	vldr	s10, [r3, #804]	; 0x324
            displayValues[2] = (presetKnobValues[Distortion][2] * 34.0f) - 17.0f;
 8017cd8:	edd3 5aca 	vldr	s11, [r3, #808]	; 0x328
            displayValues[1] = (presetKnobValues[Distortion][1] * 30.0f) - 15.0f;
 8017cdc:	eea5 7a06 	vfma.f32	s14, s10, s12
            displayValues[3] = faster_mtof(presetKnobValues[Distortion][3] * 77.0f + 42.0f);
 8017ce0:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8017d54 <SFXDistortionFrame+0xb4>
            displayValues[2] = (presetKnobValues[Distortion][2] * 34.0f) - 17.0f;
 8017ce4:	eee5 7aa6 	vfma.f32	s15, s11, s13
            displayValues[3] = faster_mtof(presetKnobValues[Distortion][3] * 77.0f + 42.0f);
 8017ce8:	ed93 6acb 	vldr	s12, [r3, #812]	; 0x32c
 8017cec:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8017d58 <SFXDistortionFrame+0xb8>
            displayValues[1] = (presetKnobValues[Distortion][1] * 30.0f) - 15.0f;
 8017cf0:	4c1a      	ldr	r4, [pc, #104]	; (8017d5c <SFXDistortionFrame+0xbc>)
            displayValues[3] = faster_mtof(presetKnobValues[Distortion][3] * 77.0f + 42.0f);
 8017cf2:	eea6 0a26 	vfma.f32	s0, s12, s13
            displayValues[1] = (presetKnobValues[Distortion][1] * 30.0f) - 15.0f;
 8017cf6:	ed84 7a01 	vstr	s14, [r4, #4]
            displayValues[2] = (presetKnobValues[Distortion][2] * 34.0f) - 17.0f;
 8017cfa:	edc4 7a02 	vstr	s15, [r4, #8]
            displayValues[3] = faster_mtof(presetKnobValues[Distortion][3] * 77.0f + 42.0f);
 8017cfe:	f00c f971 	bl	8023fe4 <faster_mtof>
            tVZFilter_setGain(&shelf1, fastdbtoa(-1.0f * displayValues[1]));
 8017d02:	edd4 7a01 	vldr	s15, [r4, #4]
            displayValues[3] = faster_mtof(presetKnobValues[Distortion][3] * 77.0f + 42.0f);
 8017d06:	ed84 0a03 	vstr	s0, [r4, #12]
            tVZFilter_setGain(&shelf1, fastdbtoa(-1.0f * displayValues[1]));
 8017d0a:	eeb1 0a67 	vneg.f32	s0, s15
 8017d0e:	f00c f9b9 	bl	8024084 <fastdbtoa>
 8017d12:	4813      	ldr	r0, [pc, #76]	; (8017d60 <SFXDistortionFrame+0xc0>)
 8017d14:	f00b fcf0 	bl	80236f8 <tVZFilter_setGain>
            tVZFilter_setGain(&shelf2, fastdbtoa(displayValues[1]));
 8017d18:	ed94 0a01 	vldr	s0, [r4, #4]
 8017d1c:	f00c f9b2 	bl	8024084 <fastdbtoa>
 8017d20:	4810      	ldr	r0, [pc, #64]	; (8017d64 <SFXDistortionFrame+0xc4>)
 8017d22:	f00b fce9 	bl	80236f8 <tVZFilter_setGain>
            tVZFilter_setFreq(&bell1, displayValues[3]);
 8017d26:	ed94 0a03 	vldr	s0, [r4, #12]
 8017d2a:	480f      	ldr	r0, [pc, #60]	; (8017d68 <SFXDistortionFrame+0xc8>)
 8017d2c:	f00b f91a 	bl	8022f64 <tVZFilter_setFreq>
            tVZFilter_setGain(&bell1, fastdbtoa(displayValues[2]));
 8017d30:	ed94 0a02 	vldr	s0, [r4, #8]
 8017d34:	f00c f9a6 	bl	8024084 <fastdbtoa>
 8017d38:	480b      	ldr	r0, [pc, #44]	; (8017d68 <SFXDistortionFrame+0xc8>)
        }
 8017d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            tVZFilter_setGain(&bell1, fastdbtoa(displayValues[2]));
 8017d3e:	f00b bcdb 	b.w	80236f8 <tVZFilter_setGain>
 8017d42:	bf00      	nop
 8017d44:	20018724 	.word	0x20018724
 8017d48:	20000548 	.word	0x20000548
 8017d4c:	20002d50 	.word	0x20002d50
 8017d50:	42080000 	.word	0x42080000
 8017d54:	42280000 	.word	0x42280000
 8017d58:	429a0000 	.word	0x429a0000
 8017d5c:	200187d4 	.word	0x200187d4
 8017d60:	2001753c 	.word	0x2001753c
 8017d64:	20017464 	.word	0x20017464
 8017d68:	2001737c 	.word	0x2001737c

08017d6c <SFXDistortionTick>:
        {
 8017d6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            displayValues[0] = ((presetKnobValues[Distortion][0] * 20.0f) + 1.0f); // 15.0f
 8017d70:	4e30      	ldr	r6, [pc, #192]	; (8017e34 <SFXDistortionTick+0xc8>)
 8017d72:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8017d76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017d7a:	4b2f      	ldr	r3, [pc, #188]	; (8017e38 <SFXDistortionTick+0xcc>)
 8017d7c:	edd6 6ac8 	vldr	s13, [r6, #800]	; 0x320
        {
 8017d80:	4683      	mov	fp, r0
            displayValues[4] = presetKnobValues[Distortion][4]; // 15.0f
 8017d82:	f8d6 2330 	ldr.w	r2, [r6, #816]	; 0x330
            displayValues[0] = ((presetKnobValues[Distortion][0] * 20.0f) + 1.0f); // 15.0f
 8017d86:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (int i = 0; i < distOS_ratio; i++)
 8017d8a:	4f2c      	ldr	r7, [pc, #176]	; (8017e3c <SFXDistortionTick+0xd0>)
            tOversampler_upsample(&oversampler, sample, oversamplerArray);
 8017d8c:	492c      	ldr	r1, [pc, #176]	; (8017e40 <SFXDistortionTick+0xd4>)
        {
 8017d8e:	ed2d 8b02 	vpush	{d8}
            float sample = input[1];
 8017d92:	ed90 0a01 	vldr	s0, [r0, #4]
            tOversampler_upsample(&oversampler, sample, oversamplerArray);
 8017d96:	482b      	ldr	r0, [pc, #172]	; (8017e44 <SFXDistortionTick+0xd8>)
 8017d98:	ee27 0a80 	vmul.f32	s0, s15, s0
            displayValues[4] = presetKnobValues[Distortion][4]; // 15.0f
 8017d9c:	611a      	str	r2, [r3, #16]
            displayValues[0] = ((presetKnobValues[Distortion][0] * 20.0f) + 1.0f); // 15.0f
 8017d9e:	edc3 7a00 	vstr	s15, [r3]
            tOversampler_upsample(&oversampler, sample, oversamplerArray);
 8017da2:	f007 fdf3 	bl	801f98c <tOversampler_upsample>
            for (int i = 0; i < distOS_ratio; i++)
 8017da6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	dd2e      	ble.n	8017e0c <SFXDistortionTick+0xa0>
 8017dae:	4c24      	ldr	r4, [pc, #144]	; (8017e40 <SFXDistortionTick+0xd4>)
 8017db0:	2500      	movs	r5, #0
 8017db2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8017e50 <SFXDistortionTick+0xe4>
                oversamplerArray[i] = tVZFilter_tick(&shelf1, oversamplerArray[i]); //put it through the low shelf
 8017db6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8017e54 <SFXDistortionTick+0xe8>
                oversamplerArray[i] = tVZFilter_tick(&shelf2, oversamplerArray[i]); // now put that result through the high shelf
 8017dba:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8017e58 <SFXDistortionTick+0xec>
                oversamplerArray[i] = tanhf(oversamplerArray[i] * presetKnobValues[Distortion][4]) * 0.95f;
 8017dbe:	ed9f 8a22 	vldr	s16, [pc, #136]	; 8017e48 <SFXDistortionTick+0xdc>
                if (distortionMode > 0) oversamplerArray[i] = LEAF_shaper(oversamplerArray[i], 1.0f);
 8017dc2:	f89a 30cc 	ldrb.w	r3, [sl, #204]	; 0xcc
 8017dc6:	ecb4 0a01 	vldmia	r4!, {s0}
 8017dca:	bb5b      	cbnz	r3, 8017e24 <SFXDistortionTick+0xb8>
                else oversamplerArray[i] = tanhf(oversamplerArray[i]);
 8017dcc:	f00f fcaa 	bl	8027724 <tanhf>
 8017dd0:	ed04 0a01 	vstr	s0, [r4, #-4]
                oversamplerArray[i] = tVZFilter_tick(&shelf1, oversamplerArray[i]); //put it through the low shelf
 8017dd4:	4648      	mov	r0, r9
            for (int i = 0; i < distOS_ratio; i++)
 8017dd6:	3501      	adds	r5, #1
                oversamplerArray[i] = tVZFilter_tick(&shelf1, oversamplerArray[i]); //put it through the low shelf
 8017dd8:	f00b f854 	bl	8022e84 <tVZFilter_tick>
                oversamplerArray[i] = tVZFilter_tick(&shelf2, oversamplerArray[i]); // now put that result through the high shelf
 8017ddc:	4640      	mov	r0, r8
                oversamplerArray[i] = tVZFilter_tick(&shelf1, oversamplerArray[i]); //put it through the low shelf
 8017dde:	ed04 0a01 	vstr	s0, [r4, #-4]
                oversamplerArray[i] = tVZFilter_tick(&shelf2, oversamplerArray[i]); // now put that result through the high shelf
 8017de2:	f00b f84f 	bl	8022e84 <tVZFilter_tick>
                oversamplerArray[i] = tVZFilter_tick(&bell1, oversamplerArray[i]); // now add a bell (or peaking eq) filter
 8017de6:	4819      	ldr	r0, [pc, #100]	; (8017e4c <SFXDistortionTick+0xe0>)
                oversamplerArray[i] = tVZFilter_tick(&shelf2, oversamplerArray[i]); // now put that result through the high shelf
 8017de8:	ed04 0a01 	vstr	s0, [r4, #-4]
                oversamplerArray[i] = tVZFilter_tick(&bell1, oversamplerArray[i]); // now add a bell (or peaking eq) filter
 8017dec:	f00b f84a 	bl	8022e84 <tVZFilter_tick>
                oversamplerArray[i] = tanhf(oversamplerArray[i] * presetKnobValues[Distortion][4]) * 0.95f;
 8017df0:	edd6 7acc 	vldr	s15, [r6, #816]	; 0x330
 8017df4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017df8:	f00f fc94 	bl	8027724 <tanhf>
            for (int i = 0; i < distOS_ratio; i++)
 8017dfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
                oversamplerArray[i] = tanhf(oversamplerArray[i] * presetKnobValues[Distortion][4]) * 0.95f;
 8017e00:	ee20 0a08 	vmul.f32	s0, s0, s16
            for (int i = 0; i < distOS_ratio; i++)
 8017e04:	42ab      	cmp	r3, r5
                oversamplerArray[i] = tanhf(oversamplerArray[i] * presetKnobValues[Distortion][4]) * 0.95f;
 8017e06:	ed04 0a01 	vstr	s0, [r4, #-4]
            for (int i = 0; i < distOS_ratio; i++)
 8017e0a:	dcda      	bgt.n	8017dc2 <SFXDistortionTick+0x56>
            sample = tOversampler_downsample(&oversampler, oversamplerArray);
 8017e0c:	490c      	ldr	r1, [pc, #48]	; (8017e40 <SFXDistortionTick+0xd4>)
 8017e0e:	480d      	ldr	r0, [pc, #52]	; (8017e44 <SFXDistortionTick+0xd8>)
 8017e10:	f007 fe06 	bl	801fa20 <tOversampler_downsample>
            input[0] = sample;
 8017e14:	ed8b 0a00 	vstr	s0, [fp]
            input[1] = sample;
 8017e18:	ed8b 0a01 	vstr	s0, [fp, #4]
        }
 8017e1c:	ecbd 8b02 	vpop	{d8}
 8017e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (distortionMode > 0) oversamplerArray[i] = LEAF_shaper(oversamplerArray[i], 1.0f);
 8017e24:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8017e28:	f00b ff14 	bl	8023c54 <LEAF_shaper>
 8017e2c:	ed04 0a01 	vstr	s0, [r4, #-4]
 8017e30:	e7d0      	b.n	8017dd4 <SFXDistortionTick+0x68>
 8017e32:	bf00      	nop
 8017e34:	20002d50 	.word	0x20002d50
 8017e38:	200187d4 	.word	0x200187d4
 8017e3c:	20000040 	.word	0x20000040
 8017e40:	200172a8 	.word	0x200172a8
 8017e44:	20018188 	.word	0x20018188
 8017e48:	3f733333 	.word	0x3f733333
 8017e4c:	2001737c 	.word	0x2001737c
 8017e50:	20000548 	.word	0x20000548
 8017e54:	2001753c 	.word	0x2001753c
 8017e58:	20017464 	.word	0x20017464

08017e5c <SFXDistortionFree>:
        {
 8017e5c:	b508      	push	{r3, lr}
            tOversampler_free(&oversampler);
 8017e5e:	4807      	ldr	r0, [pc, #28]	; (8017e7c <SFXDistortionFree+0x20>)
 8017e60:	f007 fcfa 	bl	801f858 <tOversampler_free>
            tVZFilter_free(&shelf1);
 8017e64:	4806      	ldr	r0, [pc, #24]	; (8017e80 <SFXDistortionFree+0x24>)
 8017e66:	f00a ffff 	bl	8022e68 <tVZFilter_free>
            tVZFilter_free(&shelf2);
 8017e6a:	4806      	ldr	r0, [pc, #24]	; (8017e84 <SFXDistortionFree+0x28>)
 8017e6c:	f00a fffc 	bl	8022e68 <tVZFilter_free>
            tVZFilter_free(&bell1);
 8017e70:	4805      	ldr	r0, [pc, #20]	; (8017e88 <SFXDistortionFree+0x2c>)
        }
 8017e72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            tVZFilter_free(&bell1);
 8017e76:	f00a bff7 	b.w	8022e68 <tVZFilter_free>
 8017e7a:	bf00      	nop
 8017e7c:	20018188 	.word	0x20018188
 8017e80:	2001753c 	.word	0x2001753c
 8017e84:	20017464 	.word	0x20017464
 8017e88:	2001737c 	.word	0x2001737c

08017e8c <SFXWaveFolderAlloc>:
        {
 8017e8c:	b538      	push	{r3, r4, r5, lr}
            tLockhartWavefolder_initToPool(&wavefolder1, &smallPool);
 8017e8e:	4c10      	ldr	r4, [pc, #64]	; (8017ed0 <SFXWaveFolderAlloc+0x44>)
            leaf.clearOnAllocation = 1;
 8017e90:	2301      	movs	r3, #1
 8017e92:	4d10      	ldr	r5, [pc, #64]	; (8017ed4 <SFXWaveFolderAlloc+0x48>)
            tLockhartWavefolder_initToPool(&wavefolder1, &smallPool);
 8017e94:	4621      	mov	r1, r4
 8017e96:	4810      	ldr	r0, [pc, #64]	; (8017ed8 <SFXWaveFolderAlloc+0x4c>)
            leaf.clearOnAllocation = 1;
 8017e98:	616b      	str	r3, [r5, #20]
            tLockhartWavefolder_initToPool(&wavefolder1, &smallPool);
 8017e9a:	f007 fdf1 	bl	801fa80 <tLockhartWavefolder_initToPool>
            tLockhartWavefolder_initToPool(&wavefolder2, &smallPool);
 8017e9e:	4621      	mov	r1, r4
 8017ea0:	480e      	ldr	r0, [pc, #56]	; (8017edc <SFXWaveFolderAlloc+0x50>)
 8017ea2:	f007 fded 	bl	801fa80 <tLockhartWavefolder_initToPool>
            tHighpass_initToPool(&wfHP, 10.0f, &smallPool);
 8017ea6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8017eaa:	4621      	mov	r1, r4
 8017eac:	480c      	ldr	r0, [pc, #48]	; (8017ee0 <SFXWaveFolderAlloc+0x54>)
 8017eae:	f00a fda5 	bl	80229fc <tHighpass_initToPool>
            tOversampler_initToPool(&oversampler, 2, FALSE, &smallPool);
 8017eb2:	4623      	mov	r3, r4
 8017eb4:	2200      	movs	r2, #0
 8017eb6:	2102      	movs	r1, #2
 8017eb8:	480a      	ldr	r0, [pc, #40]	; (8017ee4 <SFXWaveFolderAlloc+0x58>)
 8017eba:	f007 fc7d 	bl	801f7b8 <tOversampler_initToPool>
            setLED_A(foldMode);
 8017ebe:	4b0a      	ldr	r3, [pc, #40]	; (8017ee8 <SFXWaveFolderAlloc+0x5c>)
 8017ec0:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
 8017ec4:	f7fb fd7c 	bl	80139c0 <setLED_A>
            leaf.clearOnAllocation = 0;
 8017ec8:	2300      	movs	r3, #0
 8017eca:	616b      	str	r3, [r5, #20]
        }
 8017ecc:	bd38      	pop	{r3, r4, r5, pc}
 8017ece:	bf00      	nop
 8017ed0:	20018338 	.word	0x20018338
 8017ed4:	200194e0 	.word	0x200194e0
 8017ed8:	20002790 	.word	0x20002790
 8017edc:	20017460 	.word	0x20017460
 8017ee0:	200172a4 	.word	0x200172a4
 8017ee4:	20018188 	.word	0x20018188
 8017ee8:	20000548 	.word	0x20000548

08017eec <SFXWaveFolderFrame>:
            if (buttonActionsSFX[ButtonA][ActionPress])
 8017eec:	4a08      	ldr	r2, [pc, #32]	; (8017f10 <SFXWaveFolderFrame+0x24>)
 8017eee:	7d13      	ldrb	r3, [r2, #20]
 8017ef0:	b903      	cbnz	r3, 8017ef4 <SFXWaveFolderFrame+0x8>
        }
 8017ef2:	4770      	bx	lr
                foldMode = !foldMode;
 8017ef4:	4907      	ldr	r1, [pc, #28]	; (8017f14 <SFXWaveFolderFrame+0x28>)
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8017ef6:	2000      	movs	r0, #0
                foldMode = !foldMode;
 8017ef8:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8017efc:	7510      	strb	r0, [r2, #20]
                foldMode = !foldMode;
 8017efe:	fab3 f383 	clz	r3, r3
 8017f02:	095b      	lsrs	r3, r3, #5
                setLED_A(foldMode);
 8017f04:	4618      	mov	r0, r3
                foldMode = !foldMode;
 8017f06:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
                setLED_A(foldMode);
 8017f0a:	f7fb bd59 	b.w	80139c0 <setLED_A>
 8017f0e:	bf00      	nop
 8017f10:	20018724 	.word	0x20018724
 8017f14:	20000548 	.word	0x20000548

08017f18 <SFXWaveFolderTick>:
            displayValues[0] = (presetKnobValues[Wavefolder][0] * 4.0f);
 8017f18:	4b3b      	ldr	r3, [pc, #236]	; (8018008 <SFXWaveFolderTick+0xf0>)
            displayValues[1] = presetKnobValues[Wavefolder][1] - 0.5f;
 8017f1a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
            displayValues[0] = (presetKnobValues[Wavefolder][0] * 4.0f);
 8017f1e:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
            if (foldMode == 0)
 8017f22:	493a      	ldr	r1, [pc, #232]	; (801800c <SFXWaveFolderTick+0xf4>)
        {
 8017f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f28:	ed2d 8b02 	vpush	{d8}
            displayValues[0] = (presetKnobValues[Wavefolder][0] * 4.0f);
 8017f2c:	ed93 0ae1 	vldr	s0, [r3, #900]	; 0x384
        {
 8017f30:	4606      	mov	r6, r0
            displayValues[2] = presetKnobValues[Wavefolder][2] - 0.5f;
 8017f32:	ed93 7ae3 	vldr	s14, [r3, #908]	; 0x38c
            displayValues[1] = presetKnobValues[Wavefolder][1] - 0.5f;
 8017f36:	edd3 7ae2 	vldr	s15, [r3, #904]	; 0x388
            displayValues[0] = (presetKnobValues[Wavefolder][0] * 4.0f);
 8017f3a:	ee20 0a06 	vmul.f32	s0, s0, s12
            displayValues[2] = presetKnobValues[Wavefolder][2] - 0.5f;
 8017f3e:	ee37 7a66 	vsub.f32	s14, s14, s13
            float sample = input[1];
 8017f42:	ed90 8a01 	vldr	s16, [r0, #4]
            displayValues[1] = presetKnobValues[Wavefolder][1] - 0.5f;
 8017f46:	ee77 7ae6 	vsub.f32	s15, s15, s13
            displayValues[0] = (presetKnobValues[Wavefolder][0] * 4.0f);
 8017f4a:	4c31      	ldr	r4, [pc, #196]	; (8018010 <SFXWaveFolderTick+0xf8>)
            displayValues[3] = presetKnobValues[Wavefolder][3];
 8017f4c:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
            sample = sample * gain;
 8017f50:	ee20 8a08 	vmul.f32	s16, s0, s16
            if (foldMode == 0)
 8017f54:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
            displayValues[0] = (presetKnobValues[Wavefolder][0] * 4.0f);
 8017f58:	ed84 0a00 	vstr	s0, [r4]
            displayValues[2] = presetKnobValues[Wavefolder][2] - 0.5f;
 8017f5c:	ed84 7a02 	vstr	s14, [r4, #8]
            displayValues[1] = presetKnobValues[Wavefolder][1] - 0.5f;
 8017f60:	edc4 7a01 	vstr	s15, [r4, #4]
            displayValues[3] = presetKnobValues[Wavefolder][3];
 8017f64:	60e2      	str	r2, [r4, #12]
            if (foldMode == 0)
 8017f66:	bb93      	cbnz	r3, 8017fce <SFXWaveFolderTick+0xb6>
 8017f68:	4d2a      	ldr	r5, [pc, #168]	; (8018014 <SFXWaveFolderTick+0xfc>)
                tOversampler_upsample(&oversampler, sample, oversamplerArray);
 8017f6a:	eeb0 0a48 	vmov.f32	s0, s16
 8017f6e:	482a      	ldr	r0, [pc, #168]	; (8018018 <SFXWaveFolderTick+0x100>)
 8017f70:	4629      	mov	r1, r5
                    oversamplerArray[i] = tLockhartWavefolder_tick(&wavefolder1, oversamplerArray[i]);
 8017f72:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8018020 <SFXWaveFolderTick+0x108>
 8017f76:	f105 0708 	add.w	r7, r5, #8
                tOversampler_upsample(&oversampler, sample, oversamplerArray);
 8017f7a:	f007 fd07 	bl	801f98c <tOversampler_upsample>
                    oversamplerArray[i] = sample + displayValues[1];
 8017f7e:	edd4 7a01 	vldr	s15, [r4, #4]
                    oversamplerArray[i] *= displayValues[0];
 8017f82:	ed94 0a00 	vldr	s0, [r4]
                    oversamplerArray[i] = sample + displayValues[1];
 8017f86:	ee78 7a27 	vadd.f32	s15, s16, s15
                    oversamplerArray[i] = tanhf(oversamplerArray[i]);
 8017f8a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017f8e:	f00f fbc9 	bl	8027724 <tanhf>
                    oversamplerArray[i] = tLockhartWavefolder_tick(&wavefolder1, oversamplerArray[i]);
 8017f92:	4640      	mov	r0, r8
                    oversamplerArray[i] = tanhf(oversamplerArray[i]);
 8017f94:	ed85 0a00 	vstr	s0, [r5]
                    oversamplerArray[i] = tLockhartWavefolder_tick(&wavefolder1, oversamplerArray[i]);
 8017f98:	f007 fdfe 	bl	801fb98 <tLockhartWavefolder_tick>
                    oversamplerArray[i] = tanhf(oversamplerArray[i]);
 8017f9c:	f00f fbc2 	bl	8027724 <tanhf>
 8017fa0:	eca5 0a01 	vstmia	r5!, {s0}
                for (int i = 0; i < 2; i++)
 8017fa4:	42bd      	cmp	r5, r7
 8017fa6:	d1ea      	bne.n	8017f7e <SFXWaveFolderTick+0x66>
                sample = tHighpass_tick(&wfHP, tOversampler_downsample(&oversampler, oversamplerArray)) * displayValues[3];
 8017fa8:	491a      	ldr	r1, [pc, #104]	; (8018014 <SFXWaveFolderTick+0xfc>)
 8017faa:	481b      	ldr	r0, [pc, #108]	; (8018018 <SFXWaveFolderTick+0x100>)
 8017fac:	f007 fd38 	bl	801fa20 <tOversampler_downsample>
                sample = tHighpass_tick(&wfHP, sample) * displayValues[3];
 8017fb0:	481a      	ldr	r0, [pc, #104]	; (801801c <SFXWaveFolderTick+0x104>)
 8017fb2:	f00a fd57 	bl	8022a64 <tHighpass_tick>
 8017fb6:	edd4 7a03 	vldr	s15, [r4, #12]
 8017fba:	ee20 0a27 	vmul.f32	s0, s0, s15
                input[0] = sample;
 8017fbe:	ed86 0a00 	vstr	s0, [r6]
                input[1] = sample;
 8017fc2:	ed86 0a01 	vstr	s0, [r6, #4]
        }
 8017fc6:	ecbd 8b02 	vpop	{d8}
 8017fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                sample = sample + displayValues[1];
 8017fce:	ee77 7a88 	vadd.f32	s15, s15, s16
                sample = LEAF_tanh(sample);
 8017fd2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017fd6:	f00b fee7 	bl	8023da8 <LEAF_tanh>
                sample = tLockhartWavefolder_tick(&wavefolder1, sample);
 8017fda:	4811      	ldr	r0, [pc, #68]	; (8018020 <SFXWaveFolderTick+0x108>)
 8017fdc:	f007 fddc 	bl	801fb98 <tLockhartWavefolder_tick>
                sample = sample + displayValues[2];
 8017fe0:	edd4 7a02 	vldr	s15, [r4, #8]
                sample *= displayValues[0];
 8017fe4:	ed94 7a00 	vldr	s14, [r4]
                sample = sample + displayValues[2];
 8017fe8:	ee30 0a27 	vadd.f32	s0, s0, s15
                sample = LEAF_tanh(sample);
 8017fec:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017ff0:	f00b feda 	bl	8023da8 <LEAF_tanh>
                sample = tLockhartWavefolder_tick(&wavefolder2, sample);
 8017ff4:	480b      	ldr	r0, [pc, #44]	; (8018024 <SFXWaveFolderTick+0x10c>)
 8017ff6:	f007 fdcf 	bl	801fb98 <tLockhartWavefolder_tick>
                sample = tOversampler_tick(&oversampler, sample, oversampleBuf, &LEAF_tanh);
 8017ffa:	4a0b      	ldr	r2, [pc, #44]	; (8018028 <SFXWaveFolderTick+0x110>)
 8017ffc:	490b      	ldr	r1, [pc, #44]	; (801802c <SFXWaveFolderTick+0x114>)
 8017ffe:	4806      	ldr	r0, [pc, #24]	; (8018018 <SFXWaveFolderTick+0x100>)
 8018000:	f007 fc3a 	bl	801f878 <tOversampler_tick>
 8018004:	e7d4      	b.n	8017fb0 <SFXWaveFolderTick+0x98>
 8018006:	bf00      	nop
 8018008:	20002d50 	.word	0x20002d50
 801800c:	20000548 	.word	0x20000548
 8018010:	200187d4 	.word	0x200187d4
 8018014:	200172a8 	.word	0x200172a8
 8018018:	20018188 	.word	0x20018188
 801801c:	200172a4 	.word	0x200172a4
 8018020:	20002790 	.word	0x20002790
 8018024:	20017460 	.word	0x20017460
 8018028:	08023da9 	.word	0x08023da9
 801802c:	2001833c 	.word	0x2001833c

08018030 <SFXWaveFolderFree>:
        {
 8018030:	b508      	push	{r3, lr}
            tLockhartWavefolder_free(&wavefolder1);
 8018032:	4807      	ldr	r0, [pc, #28]	; (8018050 <SFXWaveFolderFree+0x20>)
 8018034:	f007 fdac 	bl	801fb90 <tLockhartWavefolder_free>
            tLockhartWavefolder_free(&wavefolder2);
 8018038:	4806      	ldr	r0, [pc, #24]	; (8018054 <SFXWaveFolderFree+0x24>)
 801803a:	f007 fda9 	bl	801fb90 <tLockhartWavefolder_free>
            tHighpass_free(&wfHP);
 801803e:	4806      	ldr	r0, [pc, #24]	; (8018058 <SFXWaveFolderFree+0x28>)
 8018040:	f00a fcfc 	bl	8022a3c <tHighpass_free>
            tOversampler_free(&oversampler);
 8018044:	4805      	ldr	r0, [pc, #20]	; (801805c <SFXWaveFolderFree+0x2c>)
        }
 8018046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            tOversampler_free(&oversampler);
 801804a:	f007 bc05 	b.w	801f858 <tOversampler_free>
 801804e:	bf00      	nop
 8018050:	20002790 	.word	0x20002790
 8018054:	20017460 	.word	0x20017460
 8018058:	200172a4 	.word	0x200172a4
 801805c:	20018188 	.word	0x20018188

08018060 <SFXBitcrusherAlloc>:
        {
 8018060:	b510      	push	{r4, lr}
            tCrusher_initToPool(&crush, &smallPool);
 8018062:	4c08      	ldr	r4, [pc, #32]	; (8018084 <SFXBitcrusherAlloc+0x24>)
 8018064:	4808      	ldr	r0, [pc, #32]	; (8018088 <SFXBitcrusherAlloc+0x28>)
 8018066:	4621      	mov	r1, r4
 8018068:	f007 feae 	bl	801fdc8 <tCrusher_initToPool>
            tCrusher_initToPool(&crush2, &smallPool);
 801806c:	4621      	mov	r1, r4
 801806e:	4807      	ldr	r0, [pc, #28]	; (801808c <SFXBitcrusherAlloc+0x2c>)
 8018070:	f007 feaa 	bl	801fdc8 <tCrusher_initToPool>
            setLED_A(crusherStereo);
 8018074:	4b06      	ldr	r3, [pc, #24]	; (8018090 <SFXBitcrusherAlloc+0x30>)
        }
 8018076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            setLED_A(crusherStereo);
 801807a:	f893 00d4 	ldrb.w	r0, [r3, #212]	; 0xd4
 801807e:	f7fb bc9f 	b.w	80139c0 <setLED_A>
 8018082:	bf00      	nop
 8018084:	20018338 	.word	0x20018338
 8018088:	200034a0 	.word	0x200034a0
 801808c:	20002a6c 	.word	0x20002a6c
 8018090:	20000548 	.word	0x20000548

08018094 <SFXBitcrusherFrame>:
            if (buttonActionsSFX[ButtonA][ActionPress])
 8018094:	4a08      	ldr	r2, [pc, #32]	; (80180b8 <SFXBitcrusherFrame+0x24>)
 8018096:	7d13      	ldrb	r3, [r2, #20]
 8018098:	b903      	cbnz	r3, 801809c <SFXBitcrusherFrame+0x8>
        }
 801809a:	4770      	bx	lr
                crusherStereo = !crusherStereo;
 801809c:	4907      	ldr	r1, [pc, #28]	; (80180bc <SFXBitcrusherFrame+0x28>)
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 801809e:	2000      	movs	r0, #0
                crusherStereo = !crusherStereo;
 80180a0:	f8d1 30d4 	ldr.w	r3, [r1, #212]	; 0xd4
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 80180a4:	7510      	strb	r0, [r2, #20]
                crusherStereo = !crusherStereo;
 80180a6:	fab3 f383 	clz	r3, r3
 80180aa:	095b      	lsrs	r3, r3, #5
                setLED_A(crusherStereo);
 80180ac:	4618      	mov	r0, r3
                crusherStereo = !crusherStereo;
 80180ae:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
                setLED_A(crusherStereo);
 80180b2:	f7fb bc85 	b.w	80139c0 <setLED_A>
 80180b6:	bf00      	nop
 80180b8:	20018724 	.word	0x20018724
 80180bc:	20000548 	.word	0x20000548

080180c0 <SFXBitcrusherTick>:
        {
 80180c0:	b570      	push	{r4, r5, r6, lr}
            displayValues[0] = (presetKnobValues[BitCrusher][0] * 0.99f )+ 0.01f;
 80180c2:	4d52      	ldr	r5, [pc, #328]	; (801820c <SFXBitcrusherTick+0x14c>)
        {
 80180c4:	4606      	mov	r6, r0
            displayValues[0] = (presetKnobValues[BitCrusher][0] * 0.99f )+ 0.01f;
 80180c6:	eddf 6a52 	vldr	s13, [pc, #328]	; 8018210 <SFXBitcrusherTick+0x150>
 80180ca:	ed95 7afa 	vldr	s14, [r5, #1000]	; 0x3e8
 80180ce:	eddf 7a51 	vldr	s15, [pc, #324]	; 8018214 <SFXBitcrusherTick+0x154>
 80180d2:	4c51      	ldr	r4, [pc, #324]	; (8018218 <SFXBitcrusherTick+0x158>)
            tCrusher_setQuality (&crush, presetKnobValues[BitCrusher][0]);
 80180d4:	eeb0 0a47 	vmov.f32	s0, s14
            displayValues[0] = (presetKnobValues[BitCrusher][0] * 0.99f )+ 0.01f;
 80180d8:	eee7 7a26 	vfma.f32	s15, s14, s13
            tCrusher_setQuality (&crush, presetKnobValues[BitCrusher][0]);
 80180dc:	484f      	ldr	r0, [pc, #316]	; (801821c <SFXBitcrusherTick+0x15c>)
        {
 80180de:	ed2d 8b02 	vpush	{d8}
            tCrusher_setSamplingRatio (&crush, presetKnobValues[BitCrusher][1] * 0.5f);
 80180e2:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
            displayValues[2] = presetKnobValues[BitCrusher][2] * 0.1f;
 80180e6:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 8018220 <SFXBitcrusherTick+0x160>
            displayValues[0] = (presetKnobValues[BitCrusher][0] * 0.99f )+ 0.01f;
 80180ea:	edc4 7a00 	vstr	s15, [r4]
            tCrusher_setQuality (&crush, presetKnobValues[BitCrusher][0]);
 80180ee:	f007 fef3 	bl	801fed8 <tCrusher_setQuality>
            tCrusher_setQuality (&crush2, presetKnobValues[BitCrusher][0]);
 80180f2:	ed95 0afa 	vldr	s0, [r5, #1000]	; 0x3e8
 80180f6:	484b      	ldr	r0, [pc, #300]	; (8018224 <SFXBitcrusherTick+0x164>)
 80180f8:	f007 feee 	bl	801fed8 <tCrusher_setQuality>
            displayValues[1] = presetKnobValues[BitCrusher][1];
 80180fc:	edd5 7afb 	vldr	s15, [r5, #1004]	; 0x3ec
            tCrusher_setSamplingRatio (&crush, presetKnobValues[BitCrusher][1] * 0.5f);
 8018100:	4846      	ldr	r0, [pc, #280]	; (801821c <SFXBitcrusherTick+0x15c>)
 8018102:	ee27 0aa8 	vmul.f32	s0, s15, s17
            displayValues[1] = presetKnobValues[BitCrusher][1];
 8018106:	edc4 7a01 	vstr	s15, [r4, #4]
            tCrusher_setSamplingRatio (&crush, presetKnobValues[BitCrusher][1] * 0.5f);
 801810a:	f007 ff11 	bl	801ff30 <tCrusher_setSamplingRatio>
            tCrusher_setSamplingRatio (&crush2, presetKnobValues[BitCrusher][1] * 0.5f);
 801810e:	ed95 0afb 	vldr	s0, [r5, #1004]	; 0x3ec
 8018112:	4844      	ldr	r0, [pc, #272]	; (8018224 <SFXBitcrusherTick+0x164>)
 8018114:	ee20 0a28 	vmul.f32	s0, s0, s17
 8018118:	f007 ff0a 	bl	801ff30 <tCrusher_setSamplingRatio>
            displayValues[2] = presetKnobValues[BitCrusher][2] * 0.1f;
 801811c:	edd5 7afc 	vldr	s15, [r5, #1008]	; 0x3f0
            tCrusher_setRound (&crush, displayValues[2]);
 8018120:	483e      	ldr	r0, [pc, #248]	; (801821c <SFXBitcrusherTick+0x15c>)
            displayValues[2] = presetKnobValues[BitCrusher][2] * 0.1f;
 8018122:	ee67 7a88 	vmul.f32	s15, s15, s16
            tCrusher_setRound (&crush, displayValues[2]);
 8018126:	eeb0 0a67 	vmov.f32	s0, s15
            displayValues[2] = presetKnobValues[BitCrusher][2] * 0.1f;
 801812a:	edc4 7a02 	vstr	s15, [r4, #8]
            tCrusher_setRound (&crush, displayValues[2]);
 801812e:	f007 fef9 	bl	801ff24 <tCrusher_setRound>
            tCrusher_setRound (&crush2, displayValues[2]);
 8018132:	ed94 0a02 	vldr	s0, [r4, #8]
 8018136:	483b      	ldr	r0, [pc, #236]	; (8018224 <SFXBitcrusherTick+0x164>)
 8018138:	f007 fef4 	bl	801ff24 <tCrusher_setRound>
            displayValues[3] = (uint32_t) (presetKnobValues[BitCrusher][3] * 8.0f);
 801813c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8018140:	ed95 0afd 	vldr	s0, [r5, #1012]	; 0x3f4
            tCrusher_setOperation (&crush, presetKnobValues[BitCrusher][3]);
 8018144:	4835      	ldr	r0, [pc, #212]	; (801821c <SFXBitcrusherTick+0x15c>)
            displayValues[3] = (uint32_t) (presetKnobValues[BitCrusher][3] * 8.0f);
 8018146:	ee60 7a27 	vmul.f32	s15, s0, s15
 801814a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801814e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018152:	edc4 7a03 	vstr	s15, [r4, #12]
            tCrusher_setOperation (&crush, presetKnobValues[BitCrusher][3]);
 8018156:	f007 feb5 	bl	801fec4 <tCrusher_setOperation>
            tCrusher_setOperation (&crush2, presetKnobValues[BitCrusher][3]);
 801815a:	ed95 0afd 	vldr	s0, [r5, #1012]	; 0x3f4
 801815e:	4831      	ldr	r0, [pc, #196]	; (8018224 <SFXBitcrusherTick+0x164>)
 8018160:	f007 feb0 	bl	801fec4 <tCrusher_setOperation>
            displayValues[5] = (presetKnobValues[BitCrusher][5] * 5.0f) + 1.0f;
 8018164:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018168:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801816c:	ed95 6aff 	vldr	s12, [r5, #1020]	; 0x3fc
            if (displayValues[0] < 0.1f)
 8018170:	edd4 6a00 	vldr	s13, [r4]
            displayValues[5] = (presetKnobValues[BitCrusher][5] * 5.0f) + 1.0f;
 8018174:	eef0 5a67 	vmov.f32	s11, s15
            displayValues[4] = presetKnobValues[BitCrusher][4];
 8018178:	f8d5 33f8 	ldr.w	r3, [r5, #1016]	; 0x3f8
            if (displayValues[0] < 0.1f)
 801817c:	eef4 6ac8 	vcmpe.f32	s13, s16
            displayValues[4] = presetKnobValues[BitCrusher][4];
 8018180:	6123      	str	r3, [r4, #16]
            displayValues[5] = (presetKnobValues[BitCrusher][5] * 5.0f) + 1.0f;
 8018182:	eee6 5a07 	vfma.f32	s11, s12, s14
            if (displayValues[0] < 0.1f)
 8018186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            displayValues[5] = (presetKnobValues[BitCrusher][5] * 5.0f) + 1.0f;
 801818a:	eeb0 7a65 	vmov.f32	s14, s11
 801818e:	edc4 5a05 	vstr	s11, [r4, #20]
            if (displayValues[0] < 0.1f)
 8018192:	d41f      	bmi.n	80181d4 <SFXBitcrusherTick+0x114>
                volumeComp = (1.0f / (displayValues[3] + 1.0f));
 8018194:	edd4 6a03 	vldr	s13, [r4, #12]
 8018198:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801819c:	eec7 8aa6 	vdiv.f32	s17, s15, s13
            sample = tanhf(tCrusher_tick(&crush, input[1] * displayValues[5])) * displayValues[4] * volumeComp;
 80181a0:	ed96 0a01 	vldr	s0, [r6, #4]
 80181a4:	481d      	ldr	r0, [pc, #116]	; (801821c <SFXBitcrusherTick+0x15c>)
 80181a6:	ee27 0a00 	vmul.f32	s0, s14, s0
 80181aa:	f007 fe4b 	bl	801fe44 <tCrusher_tick>
 80181ae:	f00f fab9 	bl	8027724 <tanhf>
            if (crusherStereo)
 80181b2:	4b1d      	ldr	r3, [pc, #116]	; (8018228 <SFXBitcrusherTick+0x168>)
            sample = tanhf(tCrusher_tick(&crush, input[1] * displayValues[5])) * displayValues[4] * volumeComp;
 80181b4:	ee20 0a28 	vmul.f32	s0, s0, s17
 80181b8:	ed94 8a04 	vldr	s16, [r4, #16]
            if (crusherStereo)
 80181bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            sample = tanhf(tCrusher_tick(&crush, input[1] * displayValues[5])) * displayValues[4] * volumeComp;
 80181c0:	ee20 8a08 	vmul.f32	s16, s0, s16
            if (crusherStereo)
 80181c4:	b94b      	cbnz	r3, 80181da <SFXBitcrusherTick+0x11a>
                input[1] = sample;
 80181c6:	ed86 8a01 	vstr	s16, [r6, #4]
            input[0] = sample;
 80181ca:	ed86 8a00 	vstr	s16, [r6]
        }
 80181ce:	ecbd 8b02 	vpop	{d8}
 80181d2:	bd70      	pop	{r4, r5, r6, pc}
                volumeComp = 1.0f;
 80181d4:	eef0 8a67 	vmov.f32	s17, s15
 80181d8:	e7e2      	b.n	80181a0 <SFXBitcrusherTick+0xe0>
                input[1] = tanhf(tCrusher_tick(&crush2, input[0] * displayValues[5])) * displayValues[4] * volumeComp;
 80181da:	edd4 7a05 	vldr	s15, [r4, #20]
 80181de:	ed96 0a00 	vldr	s0, [r6]
 80181e2:	4810      	ldr	r0, [pc, #64]	; (8018224 <SFXBitcrusherTick+0x164>)
 80181e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80181e8:	f007 fe2c 	bl	801fe44 <tCrusher_tick>
 80181ec:	f00f fa9a 	bl	8027724 <tanhf>
 80181f0:	edd4 7a04 	vldr	s15, [r4, #16]
            input[0] = sample;
 80181f4:	ed86 8a00 	vstr	s16, [r6]
                input[1] = tanhf(tCrusher_tick(&crush2, input[0] * displayValues[5])) * displayValues[4] * volumeComp;
 80181f8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80181fc:	ee68 8a80 	vmul.f32	s17, s17, s0
 8018200:	edc6 8a01 	vstr	s17, [r6, #4]
        }
 8018204:	ecbd 8b02 	vpop	{d8}
 8018208:	bd70      	pop	{r4, r5, r6, pc}
 801820a:	bf00      	nop
 801820c:	20002d50 	.word	0x20002d50
 8018210:	3f7d70a4 	.word	0x3f7d70a4
 8018214:	3c23d70a 	.word	0x3c23d70a
 8018218:	200187d4 	.word	0x200187d4
 801821c:	200034a0 	.word	0x200034a0
 8018220:	3dcccccd 	.word	0x3dcccccd
 8018224:	20002a6c 	.word	0x20002a6c
 8018228:	20000548 	.word	0x20000548

0801822c <SFXBitcrusherFree>:
        {
 801822c:	b508      	push	{r3, lr}
            tCrusher_free(&crush);
 801822e:	4804      	ldr	r0, [pc, #16]	; (8018240 <SFXBitcrusherFree+0x14>)
 8018230:	f007 fdfc 	bl	801fe2c <tCrusher_free>
            tCrusher_free(&crush2);
 8018234:	4803      	ldr	r0, [pc, #12]	; (8018244 <SFXBitcrusherFree+0x18>)
        }
 8018236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            tCrusher_free(&crush2);
 801823a:	f007 bdf7 	b.w	801fe2c <tCrusher_free>
 801823e:	bf00      	nop
 8018240:	200034a0 	.word	0x200034a0
 8018244:	20002a6c 	.word	0x20002a6c

08018248 <SFXDelayAlloc>:
        {
 8018248:	b570      	push	{r4, r5, r6, lr}
 801824a:	ed2d 8b04 	vpush	{d8-d9}
            tTapeDelay_init(&delay, 2000, 30000);
 801824e:	ed9f 9a2a 	vldr	s18, [pc, #168]	; 80182f8 <SFXDelayAlloc+0xb0>
            leaf.clearOnAllocation = 1;
 8018252:	2501      	movs	r5, #1
 8018254:	4e29      	ldr	r6, [pc, #164]	; (80182fc <SFXDelayAlloc+0xb4>)
            tTapeDelay_init(&delay, 2000, 30000);
 8018256:	f247 5130 	movw	r1, #30000	; 0x7530
            tSVF_init(&delayLP, SVFTypeLowpass, 16000.f, .7f);
 801825a:	ed9f 8a29 	vldr	s16, [pc, #164]	; 8018300 <SFXDelayAlloc+0xb8>
            tTapeDelay_init(&delay, 2000, 30000);
 801825e:	eeb0 0a49 	vmov.f32	s0, s18
            tSVF_init(&delayLP, SVFTypeLowpass, 16000.f, .7f);
 8018262:	eddf 8a28 	vldr	s17, [pc, #160]	; 8018304 <SFXDelayAlloc+0xbc>
            delayShaper = 0;
 8018266:	2400      	movs	r4, #0
            tTapeDelay_init(&delay, 2000, 30000);
 8018268:	4827      	ldr	r0, [pc, #156]	; (8018308 <SFXDelayAlloc+0xc0>)
            leaf.clearOnAllocation = 1;
 801826a:	6175      	str	r5, [r6, #20]
            tTapeDelay_init(&delay, 2000, 30000);
 801826c:	f007 f962 	bl	801f534 <tTapeDelay_init>
            tTapeDelay_init(&delay2, 2000, 30000);
 8018270:	eeb0 0a49 	vmov.f32	s0, s18
 8018274:	f247 5130 	movw	r1, #30000	; 0x7530
 8018278:	4824      	ldr	r0, [pc, #144]	; (801830c <SFXDelayAlloc+0xc4>)
 801827a:	f007 f95b 	bl	801f534 <tTapeDelay_init>
            tSVF_init(&delayLP, SVFTypeLowpass, 16000.f, .7f);
 801827e:	eef0 0a48 	vmov.f32	s1, s16
 8018282:	eeb0 0a68 	vmov.f32	s0, s17
 8018286:	4629      	mov	r1, r5
 8018288:	4821      	ldr	r0, [pc, #132]	; (8018310 <SFXDelayAlloc+0xc8>)
 801828a:	f00a f9e7 	bl	802265c <tSVF_init>
            tSVF_init(&delayHP, SVFTypeHighpass, 20.f, .7f);
 801828e:	eef0 0a48 	vmov.f32	s1, s16
 8018292:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8018296:	4621      	mov	r1, r4
 8018298:	481e      	ldr	r0, [pc, #120]	; (8018314 <SFXDelayAlloc+0xcc>)
 801829a:	f00a f9df 	bl	802265c <tSVF_init>
            tSVF_init(&delayLP2, SVFTypeLowpass, 16000.f, .7f);
 801829e:	eef0 0a48 	vmov.f32	s1, s16
 80182a2:	eeb0 0a68 	vmov.f32	s0, s17
 80182a6:	4629      	mov	r1, r5
 80182a8:	481b      	ldr	r0, [pc, #108]	; (8018318 <SFXDelayAlloc+0xd0>)
 80182aa:	f00a f9d7 	bl	802265c <tSVF_init>
            tSVF_init(&delayHP2, SVFTypeHighpass, 20.f, .7f);
 80182ae:	eef0 0a48 	vmov.f32	s1, s16
 80182b2:	4621      	mov	r1, r4
 80182b4:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80182b8:	4818      	ldr	r0, [pc, #96]	; (801831c <SFXDelayAlloc+0xd4>)
 80182ba:	f00a f9cf 	bl	802265c <tSVF_init>
            tHighpass_init(&delayShaperHp, 20.0f);
 80182be:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80182c2:	4817      	ldr	r0, [pc, #92]	; (8018320 <SFXDelayAlloc+0xd8>)
 80182c4:	f00a fb7a 	bl	80229bc <tHighpass_init>
            tFeedbackLeveler_init(&feedbackControl, .99f, 0.01, 0.125f, 0);
 80182c8:	4621      	mov	r1, r4
 80182ca:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 80182ce:	eddf 0a15 	vldr	s1, [pc, #84]	; 8018324 <SFXDelayAlloc+0xdc>
 80182d2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8018328 <SFXDelayAlloc+0xe0>
 80182d6:	4815      	ldr	r0, [pc, #84]	; (801832c <SFXDelayAlloc+0xe4>)
 80182d8:	f007 fe40 	bl	801ff5c <tFeedbackLeveler_init>
            delayShaper = 0;
 80182dc:	4b14      	ldr	r3, [pc, #80]	; (8018330 <SFXDelayAlloc+0xe8>)
            setLED_A(delayShaper);
 80182de:	4620      	mov	r0, r4
            capFeedback = 1;
 80182e0:	f883 50dc 	strb.w	r5, [r3, #220]	; 0xdc
            delayShaper = 0;
 80182e4:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
            freeze = 0;
 80182e8:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
            setLED_A(delayShaper);
 80182ec:	f7fb fb68 	bl	80139c0 <setLED_A>
            leaf.clearOnAllocation = 0;
 80182f0:	6174      	str	r4, [r6, #20]
        }
 80182f2:	ecbd 8b04 	vpop	{d8-d9}
 80182f6:	bd70      	pop	{r4, r5, r6, pc}
 80182f8:	44fa0000 	.word	0x44fa0000
 80182fc:	200194e0 	.word	0x200194e0
 8018300:	3f333333 	.word	0x3f333333
 8018304:	467a0000 	.word	0x467a0000
 8018308:	200177bc 	.word	0x200177bc
 801830c:	20003698 	.word	0x20003698
 8018310:	200176d8 	.word	0x200176d8
 8018314:	20017318 	.word	0x20017318
 8018318:	20017650 	.word	0x20017650
 801831c:	20017564 	.word	0x20017564
 8018320:	20017548 	.word	0x20017548
 8018324:	3c23d70a 	.word	0x3c23d70a
 8018328:	3f7d70a4 	.word	0x3f7d70a4
 801832c:	20017380 	.word	0x20017380
 8018330:	20000548 	.word	0x20000548

08018334 <SFXDelayFrame>:
        {
 8018334:	b510      	push	{r4, lr}
            if (buttonActionsSFX[ButtonA][ActionPress])
 8018336:	4c17      	ldr	r4, [pc, #92]	; (8018394 <SFXDelayFrame+0x60>)
 8018338:	7d23      	ldrb	r3, [r4, #20]
 801833a:	b9eb      	cbnz	r3, 8018378 <SFXDelayFrame+0x44>
            if (buttonActionsSFX[ButtonB][ActionPress])
 801833c:	7e23      	ldrb	r3, [r4, #24]
 801833e:	b14b      	cbz	r3, 8018354 <SFXDelayFrame+0x20>
                capFeedback = !capFeedback;
 8018340:	4a15      	ldr	r2, [pc, #84]	; (8018398 <SFXDelayFrame+0x64>)
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8018342:	2100      	movs	r1, #0
                capFeedback = !capFeedback;
 8018344:	f892 30dc 	ldrb.w	r3, [r2, #220]	; 0xdc
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8018348:	7621      	strb	r1, [r4, #24]
                capFeedback = !capFeedback;
 801834a:	fab3 f383 	clz	r3, r3
 801834e:	095b      	lsrs	r3, r3, #5
 8018350:	f882 30dc 	strb.w	r3, [r2, #220]	; 0xdc
            if (buttonActionsSFX[ButtonC][ActionPress])
 8018354:	7f23      	ldrb	r3, [r4, #28]
 8018356:	b903      	cbnz	r3, 801835a <SFXDelayFrame+0x26>
        }
 8018358:	bd10      	pop	{r4, pc}
                freeze = !freeze;
 801835a:	4a0f      	ldr	r2, [pc, #60]	; (8018398 <SFXDelayFrame+0x64>)
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 801835c:	2100      	movs	r1, #0
                freeze = !freeze;
 801835e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8018362:	7721      	strb	r1, [r4, #28]
                freeze = !freeze;
 8018364:	fab3 f383 	clz	r3, r3
 8018368:	095b      	lsrs	r3, r3, #5
 801836a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                setLED_C(freeze);
 801836e:	4618      	mov	r0, r3
        }
 8018370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                setLED_C(freeze);
 8018374:	f7fb bb40 	b.w	80139f8 <setLED_C>
                delayShaper = !delayShaper;
 8018378:	4a07      	ldr	r2, [pc, #28]	; (8018398 <SFXDelayFrame+0x64>)
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 801837a:	2100      	movs	r1, #0
                delayShaper = !delayShaper;
 801837c:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8018380:	7521      	strb	r1, [r4, #20]
                delayShaper = !delayShaper;
 8018382:	fab3 f383 	clz	r3, r3
 8018386:	095b      	lsrs	r3, r3, #5
                setLED_A(delayShaper);
 8018388:	4618      	mov	r0, r3
                delayShaper = !delayShaper;
 801838a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
                setLED_A(delayShaper);
 801838e:	f7fb fb17 	bl	80139c0 <setLED_A>
 8018392:	e7d3      	b.n	801833c <SFXDelayFrame+0x8>
 8018394:	20018724 	.word	0x20018724
 8018398:	20000548 	.word	0x20000548

0801839c <SFXDelayTick>:
        {
 801839c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            displayValues[0] = presetKnobValues[Delay][0] * 30000.0f;
 80183a0:	4d89      	ldr	r5, [pc, #548]	; (80185c8 <SFXDelayTick+0x22c>)
        {
 80183a2:	4607      	mov	r7, r0
            displayValues[0] = presetKnobValues[Delay][0] * 30000.0f;
 80183a4:	eddf 6a89 	vldr	s13, [pc, #548]	; 80185cc <SFXDelayTick+0x230>
 80183a8:	462b      	mov	r3, r5
 80183aa:	4c89      	ldr	r4, [pc, #548]	; (80185d0 <SFXDelayTick+0x234>)
            displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Delay][4] * 1.1f, 0.9f) : presetKnobValues[Delay][4] * 1.1f;
 80183ac:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8018610 <SFXDelayTick+0x274>
        {
 80183b0:	ed2d 8b02 	vpush	{d8}
            displayValues[2] = faster_mtof((presetKnobValues[Delay][2] * 128) + 10.0f);
 80183b4:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
            displayValues[0] = presetKnobValues[Delay][0] * 30000.0f;
 80183b8:	ecb3 7a01 	vldmia	r3!, {s14}
            displayValues[2] = faster_mtof((presetKnobValues[Delay][2] * 128) + 10.0f);
 80183bc:	edd5 7a02 	vldr	s15, [r5, #8]
 80183c0:	eddf 8a84 	vldr	s17, [pc, #528]	; 80185d4 <SFXDelayTick+0x238>
            displayValues[0] = presetKnobValues[Delay][0] * 30000.0f;
 80183c4:	ee27 7a26 	vmul.f32	s14, s14, s13
            displayValues[2] = faster_mtof((presetKnobValues[Delay][2] * 128) + 10.0f);
 80183c8:	eeb0 0a48 	vmov.f32	s0, s16
            displayValues[0] = presetKnobValues[Delay][0] * 30000.0f;
 80183cc:	ed84 7a00 	vstr	s14, [r4]
            displayValues[2] = faster_mtof((presetKnobValues[Delay][2] * 128) + 10.0f);
 80183d0:	eea7 0aa8 	vfma.f32	s0, s15, s17
            displayValues[1] = presetKnobValues[Delay][1] * 30000.0f;
 80183d4:	edd3 7a00 	vldr	s15, [r3]
 80183d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80183dc:	edc4 7a01 	vstr	s15, [r4, #4]
            displayValues[2] = faster_mtof((presetKnobValues[Delay][2] * 128) + 10.0f);
 80183e0:	f00b fe00 	bl	8023fe4 <faster_mtof>
 80183e4:	ed84 0a02 	vstr	s0, [r4, #8]
            displayValues[3] = faster_mtof((presetKnobValues[Delay][3] * 128) + 10.0f);
 80183e8:	eeb0 0a48 	vmov.f32	s0, s16
 80183ec:	edd5 7a03 	vldr	s15, [r5, #12]
 80183f0:	eea7 0aa8 	vfma.f32	s0, s15, s17
 80183f4:	f00b fdf6 	bl	8023fe4 <faster_mtof>
            displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Delay][4] * 1.1f, 0.9f) : presetKnobValues[Delay][4] * 1.1f;
 80183f8:	f898 30dc 	ldrb.w	r3, [r8, #220]	; 0xdc
            displayValues[3] = faster_mtof((presetKnobValues[Delay][3] * 128) + 10.0f);
 80183fc:	ed84 0a03 	vstr	s0, [r4, #12]
            displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Delay][4] * 1.1f, 0.9f) : presetKnobValues[Delay][4] * 1.1f;
 8018400:	2b00      	cmp	r3, #0
 8018402:	f040 80d2 	bne.w	80185aa <SFXDelayTick+0x20e>
 8018406:	edd5 7a04 	vldr	s15, [r5, #16]
 801840a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80185d8 <SFXDelayTick+0x23c>
 801840e:	ee67 7a87 	vmul.f32	s15, s15, s14
            displayValues[5] = presetKnobValues[Delay][5];
 8018412:	4b72      	ldr	r3, [pc, #456]	; (80185dc <SFXDelayTick+0x240>)
            tSVF_setFreq(&delayHP, displayValues[2]);
 8018414:	ed94 0a02 	vldr	s0, [r4, #8]
            displayValues[5] = presetKnobValues[Delay][5];
 8018418:	681b      	ldr	r3, [r3, #0]
            tSVF_setFreq(&delayHP, displayValues[2]);
 801841a:	4871      	ldr	r0, [pc, #452]	; (80185e0 <SFXDelayTick+0x244>)
            displayValues[5] = presetKnobValues[Delay][5];
 801841c:	6163      	str	r3, [r4, #20]
            displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Delay][4] * 1.1f, 0.9f) : presetKnobValues[Delay][4] * 1.1f;
 801841e:	edc4 7a04 	vstr	s15, [r4, #16]
            tSVF_setFreq(&delayHP, displayValues[2]);
 8018422:	f00a f9cf 	bl	80227c4 <tSVF_setFreq>
            tSVF_setFreq(&delayHP2, displayValues[2]);
 8018426:	ed94 0a02 	vldr	s0, [r4, #8]
 801842a:	486e      	ldr	r0, [pc, #440]	; (80185e4 <SFXDelayTick+0x248>)
 801842c:	f00a f9ca 	bl	80227c4 <tSVF_setFreq>
            tSVF_setFreq(&delayLP, displayValues[3]);
 8018430:	ed94 0a03 	vldr	s0, [r4, #12]
 8018434:	486c      	ldr	r0, [pc, #432]	; (80185e8 <SFXDelayTick+0x24c>)
 8018436:	f00a f9c5 	bl	80227c4 <tSVF_setFreq>
            tSVF_setFreq(&delayLP2, displayValues[3]);
 801843a:	ed94 0a03 	vldr	s0, [r4, #12]
 801843e:	486b      	ldr	r0, [pc, #428]	; (80185ec <SFXDelayTick+0x250>)
 8018440:	f00a f9c0 	bl	80227c4 <tSVF_setFreq>
            if (delayShaper == 0)
 8018444:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
                input1 = tFeedbackLeveler_tick(&feedbackControl, tanhf(input[1] + (delayFB1 * displayValues[4])));
 8018448:	4e69      	ldr	r6, [pc, #420]	; (80185f0 <SFXDelayTick+0x254>)
            if (delayShaper == 0)
 801844a:	2b00      	cmp	r3, #0
 801844c:	d16e      	bne.n	801852c <SFXDelayTick+0x190>
                input1 = tFeedbackLeveler_tick(&feedbackControl, tanhf(input[1] + (delayFB1 * displayValues[4])));
 801844e:	ed94 7a04 	vldr	s14, [r4, #16]
 8018452:	edd6 7a00 	vldr	s15, [r6]
 8018456:	ed97 0a01 	vldr	s0, [r7, #4]
                input2 = tFeedbackLeveler_tick(&feedbackControl, tanhf(input[1] + (delayFB2 * displayValues[4])));
 801845a:	4d66      	ldr	r5, [pc, #408]	; (80185f4 <SFXDelayTick+0x258>)
                input1 = tFeedbackLeveler_tick(&feedbackControl, tanhf(input[1] + (delayFB1 * displayValues[4])));
 801845c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8018460:	f00f f960 	bl	8027724 <tanhf>
 8018464:	4864      	ldr	r0, [pc, #400]	; (80185f8 <SFXDelayTick+0x25c>)
 8018466:	f007 fddb 	bl	8020020 <tFeedbackLeveler_tick>
                input2 = tFeedbackLeveler_tick(&feedbackControl, tanhf(input[1] + (delayFB2 * displayValues[4])));
 801846a:	edd5 7a00 	vldr	s15, [r5]
 801846e:	ed94 7a04 	vldr	s14, [r4, #16]
                input1 = tFeedbackLeveler_tick(&feedbackControl, tanhf(input[1] + (delayFB1 * displayValues[4])));
 8018472:	eef0 8a40 	vmov.f32	s17, s0
                input2 = tFeedbackLeveler_tick(&feedbackControl, tanhf(input[1] + (delayFB2 * displayValues[4])));
 8018476:	ed97 0a01 	vldr	s0, [r7, #4]
 801847a:	eea7 0a27 	vfma.f32	s0, s14, s15
 801847e:	f00f f951 	bl	8027724 <tanhf>
 8018482:	485d      	ldr	r0, [pc, #372]	; (80185f8 <SFXDelayTick+0x25c>)
 8018484:	f007 fdcc 	bl	8020020 <tFeedbackLeveler_tick>
 8018488:	eeb0 8a40 	vmov.f32	s16, s0
            tTapeDelay_setDelay(&delay, displayValues[0]);
 801848c:	ed94 0a00 	vldr	s0, [r4]
 8018490:	485a      	ldr	r0, [pc, #360]	; (80185fc <SFXDelayTick+0x260>)
 8018492:	f007 f937 	bl	801f704 <tTapeDelay_setDelay>
            tTapeDelay_setDelay(&delay2, displayValues[1]);
 8018496:	ed94 0a01 	vldr	s0, [r4, #4]
 801849a:	4859      	ldr	r0, [pc, #356]	; (8018600 <SFXDelayTick+0x264>)
 801849c:	f007 f932 	bl	801f704 <tTapeDelay_setDelay>
            if (!freeze)
 80184a0:	f8d8 30e0 	ldr.w	r3, [r8, #224]	; 0xe0
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d071      	beq.n	801858c <SFXDelayTick+0x1f0>
                delayFB1 = tTapeDelay_tick(&delay, delayFB1);
 80184a8:	4854      	ldr	r0, [pc, #336]	; (80185fc <SFXDelayTick+0x260>)
 80184aa:	ed96 0a00 	vldr	s0, [r6]
 80184ae:	f007 f8b3 	bl	801f618 <tTapeDelay_tick>
                delayFB2 = tTapeDelay_tick(&delay2, delayFB2);
 80184b2:	4853      	ldr	r0, [pc, #332]	; (8018600 <SFXDelayTick+0x264>)
                delayFB1 = tTapeDelay_tick(&delay, delayFB1);
 80184b4:	ed86 0a00 	vstr	s0, [r6]
                delayFB2 = tTapeDelay_tick(&delay2, delayFB2);
 80184b8:	ed95 0a00 	vldr	s0, [r5]
 80184bc:	f007 f8ac 	bl	801f618 <tTapeDelay_tick>
 80184c0:	ed85 0a00 	vstr	s0, [r5]
            delayFB1 = tSVF_tick(&delayLP, delayFB1);
 80184c4:	4848      	ldr	r0, [pc, #288]	; (80185e8 <SFXDelayTick+0x24c>)
 80184c6:	ed96 0a00 	vldr	s0, [r6]
 80184ca:	f00a f945 	bl	8022758 <tSVF_tick>
            delayFB2 = tSVF_tick(&delayLP2, delayFB2);
 80184ce:	4847      	ldr	r0, [pc, #284]	; (80185ec <SFXDelayTick+0x250>)
            delayFB1 = tSVF_tick(&delayLP, delayFB1);
 80184d0:	ed86 0a00 	vstr	s0, [r6]
            delayFB2 = tSVF_tick(&delayLP2, delayFB2);
 80184d4:	ed95 0a00 	vldr	s0, [r5]
 80184d8:	f00a f93e 	bl	8022758 <tSVF_tick>
            delayFB1 = tanhf(tSVF_tick(&delayHP, delayFB1));
 80184dc:	4840      	ldr	r0, [pc, #256]	; (80185e0 <SFXDelayTick+0x244>)
            delayFB2 = tSVF_tick(&delayLP2, delayFB2);
 80184de:	ed85 0a00 	vstr	s0, [r5]
            delayFB1 = tanhf(tSVF_tick(&delayHP, delayFB1));
 80184e2:	ed96 0a00 	vldr	s0, [r6]
 80184e6:	f00a f937 	bl	8022758 <tSVF_tick>
 80184ea:	f00f f91b 	bl	8027724 <tanhf>
            delayFB2 = tanhf(tSVF_tick(&delayHP2, delayFB2));
 80184ee:	483d      	ldr	r0, [pc, #244]	; (80185e4 <SFXDelayTick+0x248>)
            delayFB1 = tanhf(tSVF_tick(&delayHP, delayFB1));
 80184f0:	ed86 0a00 	vstr	s0, [r6]
            delayFB2 = tanhf(tSVF_tick(&delayHP2, delayFB2));
 80184f4:	ed95 0a00 	vldr	s0, [r5]
 80184f8:	f00a f92e 	bl	8022758 <tSVF_tick>
 80184fc:	f00f f912 	bl	8027724 <tanhf>
            input[0] = delayFB1 * displayValues[5];
 8018500:	edd4 7a05 	vldr	s15, [r4, #20]
 8018504:	ed96 7a00 	vldr	s14, [r6]
            delayFB2 = tanhf(tSVF_tick(&delayHP2, delayFB2));
 8018508:	ed85 0a00 	vstr	s0, [r5]
            input[0] = delayFB1 * displayValues[5];
 801850c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018510:	edc7 7a00 	vstr	s15, [r7]
            input[1] = delayFB2 * displayValues[5];
 8018514:	edd4 7a05 	vldr	s15, [r4, #20]
 8018518:	ed95 7a00 	vldr	s14, [r5]
 801851c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018520:	edc7 7a01 	vstr	s15, [r7, #4]
        }
 8018524:	ecbd 8b02 	vpop	{d8}
 8018528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                input1 = tFeedbackLeveler_tick(&feedbackControl, tHighpass_tick(&delayShaperHp, LEAF_shaper(input[1] + (delayFB1 * displayValues[4] * 0.5f), 0.5f)));
 801852c:	ed96 7a00 	vldr	s14, [r6]
 8018530:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8018534:	edd4 7a04 	vldr	s15, [r4, #16]
 8018538:	ed97 0a01 	vldr	s0, [r7, #4]
 801853c:	ee67 7a87 	vmul.f32	s15, s15, s14
                input2 = tFeedbackLeveler_tick(&feedbackControl, tHighpass_tick(&delayShaperHp, LEAF_shaper(input[1] + (delayFB2 * displayValues[4] * 0.5f), 0.5f)));
 8018540:	4d2c      	ldr	r5, [pc, #176]	; (80185f4 <SFXDelayTick+0x258>)
                input1 = tFeedbackLeveler_tick(&feedbackControl, tHighpass_tick(&delayShaperHp, LEAF_shaper(input[1] + (delayFB1 * displayValues[4] * 0.5f), 0.5f)));
 8018542:	eef0 0a48 	vmov.f32	s1, s16
 8018546:	eea7 0a88 	vfma.f32	s0, s15, s16
 801854a:	f00b fb83 	bl	8023c54 <LEAF_shaper>
 801854e:	482d      	ldr	r0, [pc, #180]	; (8018604 <SFXDelayTick+0x268>)
 8018550:	f00a fa88 	bl	8022a64 <tHighpass_tick>
 8018554:	4828      	ldr	r0, [pc, #160]	; (80185f8 <SFXDelayTick+0x25c>)
 8018556:	f007 fd63 	bl	8020020 <tFeedbackLeveler_tick>
                input2 = tFeedbackLeveler_tick(&feedbackControl, tHighpass_tick(&delayShaperHp, LEAF_shaper(input[1] + (delayFB2 * displayValues[4] * 0.5f), 0.5f)));
 801855a:	ed95 7a00 	vldr	s14, [r5]
 801855e:	edd4 7a04 	vldr	s15, [r4, #16]
                input1 = tFeedbackLeveler_tick(&feedbackControl, tHighpass_tick(&delayShaperHp, LEAF_shaper(input[1] + (delayFB1 * displayValues[4] * 0.5f), 0.5f)));
 8018562:	eef0 8a40 	vmov.f32	s17, s0
                input2 = tFeedbackLeveler_tick(&feedbackControl, tHighpass_tick(&delayShaperHp, LEAF_shaper(input[1] + (delayFB2 * displayValues[4] * 0.5f), 0.5f)));
 8018566:	ed97 0a01 	vldr	s0, [r7, #4]
 801856a:	eef0 0a48 	vmov.f32	s1, s16
 801856e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018572:	eea7 0a88 	vfma.f32	s0, s15, s16
 8018576:	f00b fb6d 	bl	8023c54 <LEAF_shaper>
 801857a:	4822      	ldr	r0, [pc, #136]	; (8018604 <SFXDelayTick+0x268>)
 801857c:	f00a fa72 	bl	8022a64 <tHighpass_tick>
 8018580:	481d      	ldr	r0, [pc, #116]	; (80185f8 <SFXDelayTick+0x25c>)
 8018582:	f007 fd4d 	bl	8020020 <tFeedbackLeveler_tick>
 8018586:	eeb0 8a40 	vmov.f32	s16, s0
 801858a:	e77f      	b.n	801848c <SFXDelayTick+0xf0>
                delayFB1 = tTapeDelay_tick(&delay, input1);
 801858c:	481b      	ldr	r0, [pc, #108]	; (80185fc <SFXDelayTick+0x260>)
 801858e:	eeb0 0a68 	vmov.f32	s0, s17
 8018592:	f007 f841 	bl	801f618 <tTapeDelay_tick>
                delayFB2 = tTapeDelay_tick(&delay2, input2);
 8018596:	481a      	ldr	r0, [pc, #104]	; (8018600 <SFXDelayTick+0x264>)
                delayFB1 = tTapeDelay_tick(&delay, input1);
 8018598:	ed86 0a00 	vstr	s0, [r6]
                delayFB2 = tTapeDelay_tick(&delay2, input2);
 801859c:	eeb0 0a48 	vmov.f32	s0, s16
 80185a0:	f007 f83a 	bl	801f618 <tTapeDelay_tick>
 80185a4:	ed85 0a00 	vstr	s0, [r5]
 80185a8:	e78c      	b.n	80184c4 <SFXDelayTick+0x128>
            displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Delay][4] * 1.1f, 0.9f) : presetKnobValues[Delay][4] * 1.1f;
 80185aa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80185d8 <SFXDelayTick+0x23c>
 80185ae:	edd5 0a04 	vldr	s1, [r5, #16]
 80185b2:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8018608 <SFXDelayTick+0x26c>
 80185b6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80185ba:	ed9f 0a14 	vldr	s0, [pc, #80]	; 801860c <SFXDelayTick+0x270>
 80185be:	f00b fba3 	bl	8023d08 <LEAF_clip>
 80185c2:	eef0 7a40 	vmov.f32	s15, s0
 80185c6:	e724      	b.n	8018412 <SFXDelayTick+0x76>
 80185c8:	2000319c 	.word	0x2000319c
 80185cc:	46ea6000 	.word	0x46ea6000
 80185d0:	200187d4 	.word	0x200187d4
 80185d4:	43000000 	.word	0x43000000
 80185d8:	3f8ccccd 	.word	0x3f8ccccd
 80185dc:	200031b0 	.word	0x200031b0
 80185e0:	20017318 	.word	0x20017318
 80185e4:	20017564 	.word	0x20017564
 80185e8:	200176d8 	.word	0x200176d8
 80185ec:	20017650 	.word	0x20017650
 80185f0:	2001755c 	.word	0x2001755c
 80185f4:	20018270 	.word	0x20018270
 80185f8:	20017380 	.word	0x20017380
 80185fc:	200177bc 	.word	0x200177bc
 8018600:	20003698 	.word	0x20003698
 8018604:	20017548 	.word	0x20017548
 8018608:	3f666666 	.word	0x3f666666
 801860c:	00000000 	.word	0x00000000
 8018610:	20000548 	.word	0x20000548

08018614 <SFXDelayFree>:
        {
 8018614:	b508      	push	{r3, lr}
            tTapeDelay_free(&delay);
 8018616:	480d      	ldr	r0, [pc, #52]	; (801864c <SFXDelayFree+0x38>)
 8018618:	f006 fff2 	bl	801f600 <tTapeDelay_free>
            tTapeDelay_free(&delay2);
 801861c:	480c      	ldr	r0, [pc, #48]	; (8018650 <SFXDelayFree+0x3c>)
 801861e:	f006 ffef 	bl	801f600 <tTapeDelay_free>
            tSVF_free(&delayLP);
 8018622:	480c      	ldr	r0, [pc, #48]	; (8018654 <SFXDelayFree+0x40>)
 8018624:	f00a f894 	bl	8022750 <tSVF_free>
            tSVF_free(&delayHP);
 8018628:	480b      	ldr	r0, [pc, #44]	; (8018658 <SFXDelayFree+0x44>)
 801862a:	f00a f891 	bl	8022750 <tSVF_free>
            tSVF_free(&delayLP2);
 801862e:	480b      	ldr	r0, [pc, #44]	; (801865c <SFXDelayFree+0x48>)
 8018630:	f00a f88e 	bl	8022750 <tSVF_free>
            tSVF_free(&delayHP2);
 8018634:	480a      	ldr	r0, [pc, #40]	; (8018660 <SFXDelayFree+0x4c>)
 8018636:	f00a f88b 	bl	8022750 <tSVF_free>
            tHighpass_free(&delayShaperHp);
 801863a:	480a      	ldr	r0, [pc, #40]	; (8018664 <SFXDelayFree+0x50>)
 801863c:	f00a f9fe 	bl	8022a3c <tHighpass_free>
            tFeedbackLeveler_free(&feedbackControl);
 8018640:	4809      	ldr	r0, [pc, #36]	; (8018668 <SFXDelayFree+0x54>)
        }
 8018642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            tFeedbackLeveler_free(&feedbackControl);
 8018646:	f007 bcdb 	b.w	8020000 <tFeedbackLeveler_free>
 801864a:	bf00      	nop
 801864c:	200177bc 	.word	0x200177bc
 8018650:	20003698 	.word	0x20003698
 8018654:	200176d8 	.word	0x200176d8
 8018658:	20017318 	.word	0x20017318
 801865c:	20017650 	.word	0x20017650
 8018660:	20017564 	.word	0x20017564
 8018664:	20017548 	.word	0x20017548
 8018668:	20017380 	.word	0x20017380

0801866c <SFXReverbAlloc>:
        {
 801866c:	b570      	push	{r4, r5, r6, lr}
            tDattorroReverb_init(&reverb);
 801866e:	4e0d      	ldr	r6, [pc, #52]	; (80186a4 <SFXReverbAlloc+0x38>)
            leaf.clearOnAllocation = 1;
 8018670:	2501      	movs	r5, #1
 8018672:	4c0d      	ldr	r4, [pc, #52]	; (80186a8 <SFXReverbAlloc+0x3c>)
            tDattorroReverb_init(&reverb);
 8018674:	4630      	mov	r0, r6
            leaf.clearOnAllocation = 1;
 8018676:	6165      	str	r5, [r4, #20]
            tDattorroReverb_init(&reverb);
 8018678:	f00d fa48 	bl	8025b0c <tDattorroReverb_init>
            tExpSmooth_init(&sizeSmoother, 0.5f, 0.001f);
 801867c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80186ac <SFXReverbAlloc+0x40>
 8018680:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8018684:	480a      	ldr	r0, [pc, #40]	; (80186b0 <SFXReverbAlloc+0x44>)
 8018686:	f009 fe45 	bl	8022314 <tExpSmooth_init>
            tDattorroReverb_setMix(&reverb, 1.0f);
 801868a:	4630      	mov	r0, r6
 801868c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8018690:	f00d fc42 	bl	8025f18 <tDattorroReverb_setMix>
            freeze = 0;
 8018694:	4a07      	ldr	r2, [pc, #28]	; (80186b4 <SFXReverbAlloc+0x48>)
 8018696:	2300      	movs	r3, #0
            capFeedback = 1;
 8018698:	f882 50dc 	strb.w	r5, [r2, #220]	; 0xdc
            freeze = 0;
 801869c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            leaf.clearOnAllocation = 0;
 80186a0:	6163      	str	r3, [r4, #20]
        }
 80186a2:	bd70      	pop	{r4, r5, r6, pc}
 80186a4:	20002c88 	.word	0x20002c88
 80186a8:	200194e0 	.word	0x200194e0
 80186ac:	3a83126f 	.word	0x3a83126f
 80186b0:	2001817c 	.word	0x2001817c
 80186b4:	20000548 	.word	0x20000548

080186b8 <SFXReverbFrame>:
            if (buttonActionsSFX[ButtonB][ActionPress])
 80186b8:	4a1d      	ldr	r2, [pc, #116]	; (8018730 <SFXReverbFrame+0x78>)
        {
 80186ba:	b570      	push	{r4, r5, r6, lr}
 80186bc:	ed2d 8b02 	vpush	{d8}
            if (buttonActionsSFX[ButtonB][ActionPress])
 80186c0:	7e13      	ldrb	r3, [r2, #24]
 80186c2:	b14b      	cbz	r3, 80186d8 <SFXReverbFrame+0x20>
                capFeedback = !capFeedback;
 80186c4:	491b      	ldr	r1, [pc, #108]	; (8018734 <SFXReverbFrame+0x7c>)
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 80186c6:	2000      	movs	r0, #0
                capFeedback = !capFeedback;
 80186c8:	f891 30dc 	ldrb.w	r3, [r1, #220]	; 0xdc
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 80186cc:	7610      	strb	r0, [r2, #24]
                capFeedback = !capFeedback;
 80186ce:	fab3 f383 	clz	r3, r3
 80186d2:	095b      	lsrs	r3, r3, #5
 80186d4:	f881 30dc 	strb.w	r3, [r1, #220]	; 0xdc
            displayValues[1] = faster_mtof(presetKnobValues[Reverb][1]*129.0f);
 80186d8:	4e17      	ldr	r6, [pc, #92]	; (8018738 <SFXReverbFrame+0x80>)
 80186da:	ed9f 8a18 	vldr	s16, [pc, #96]	; 801873c <SFXReverbFrame+0x84>
 80186de:	4635      	mov	r5, r6
 80186e0:	4c17      	ldr	r4, [pc, #92]	; (8018740 <SFXReverbFrame+0x88>)
 80186e2:	ecb5 0a01 	vldmia	r5!, {s0}
 80186e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80186ea:	f00b fc7b 	bl	8023fe4 <faster_mtof>
            tDattorroReverb_setFeedbackFilter(&reverb, displayValues[1]);
 80186ee:	4815      	ldr	r0, [pc, #84]	; (8018744 <SFXReverbFrame+0x8c>)
            displayValues[1] = faster_mtof(presetKnobValues[Reverb][1]*129.0f);
 80186f0:	ed84 0a01 	vstr	s0, [r4, #4]
            tDattorroReverb_setFeedbackFilter(&reverb, displayValues[1]);
 80186f4:	f00d fcf8 	bl	80260e8 <tDattorroReverb_setFeedbackFilter>
            displayValues[2] =  faster_mtof(presetKnobValues[Reverb][2]*123.0f);
 80186f8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8018748 <SFXReverbFrame+0x90>
 80186fc:	ed95 0a00 	vldr	s0, [r5]
 8018700:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018704:	f00b fc6e 	bl	8023fe4 <faster_mtof>
            tDattorroReverb_setHP(&reverb, displayValues[2]);
 8018708:	480e      	ldr	r0, [pc, #56]	; (8018744 <SFXReverbFrame+0x8c>)
            displayValues[2] =  faster_mtof(presetKnobValues[Reverb][2]*123.0f);
 801870a:	ed84 0a02 	vstr	s0, [r4, #8]
            tDattorroReverb_setHP(&reverb, displayValues[2]);
 801870e:	f00d fc51 	bl	8025fb4 <tDattorroReverb_setHP>
            displayValues[3] = faster_mtof(presetKnobValues[Reverb][3]*129.0f);
 8018712:	ed96 0a02 	vldr	s0, [r6, #8]
 8018716:	ee20 0a08 	vmul.f32	s0, s0, s16
 801871a:	f00b fc63 	bl	8023fe4 <faster_mtof>
            tDattorroReverb_setInputFilter(&reverb, displayValues[3]);
 801871e:	4809      	ldr	r0, [pc, #36]	; (8018744 <SFXReverbFrame+0x8c>)
            displayValues[3] = faster_mtof(presetKnobValues[Reverb][3]*129.0f);
 8018720:	ed84 0a03 	vstr	s0, [r4, #12]
        }
 8018724:	ecbd 8b02 	vpop	{d8}
 8018728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            tDattorroReverb_setInputFilter(&reverb, displayValues[3]);
 801872c:	f00d bcc6 	b.w	80260bc <tDattorroReverb_setInputFilter>
 8018730:	20018724 	.word	0x20018724
 8018734:	20000548 	.word	0x20000548
 8018738:	20003204 	.word	0x20003204
 801873c:	43010000 	.word	0x43010000
 8018740:	200187d4 	.word	0x200187d4
 8018744:	20002c88 	.word	0x20002c88
 8018748:	42f60000 	.word	0x42f60000

0801874c <SFXReverbTick>:
            if (buttonActionsSFX[ButtonC][ActionPress])
 801874c:	4b35      	ldr	r3, [pc, #212]	; (8018824 <SFXReverbTick+0xd8>)
        {
 801874e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018750:	ed2d 8b02 	vpush	{d8}
            if (buttonActionsSFX[ButtonC][ActionPress])
 8018754:	7f1a      	ldrb	r2, [r3, #28]
        {
 8018756:	b083      	sub	sp, #12
 8018758:	4604      	mov	r4, r0
                freeze = !freeze;
 801875a:	4f33      	ldr	r7, [pc, #204]	; (8018828 <SFXReverbTick+0xdc>)
            if (buttonActionsSFX[ButtonC][ActionPress])
 801875c:	2a00      	cmp	r2, #0
 801875e:	d144      	bne.n	80187ea <SFXReverbTick+0x9e>
            input[1] *= 4.0f;
 8018760:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8018764:	edd4 7a01 	vldr	s15, [r4, #4]
            displayValues[0] = presetKnobValues[Reverb][0];
 8018768:	4e30      	ldr	r6, [pc, #192]	; (801882c <SFXReverbTick+0xe0>)
            tExpSmooth_setDest(&sizeSmoother, (displayValues[0] * 0.9f) + 0.1f);
 801876a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8018830 <SFXReverbTick+0xe4>
            input[1] *= 4.0f;
 801876e:	ee67 7aa6 	vmul.f32	s15, s15, s13
            tExpSmooth_setDest(&sizeSmoother, (displayValues[0] * 0.9f) + 0.1f);
 8018772:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8018834 <SFXReverbTick+0xe8>
            displayValues[0] = presetKnobValues[Reverb][0];
 8018776:	4d30      	ldr	r5, [pc, #192]	; (8018838 <SFXReverbTick+0xec>)
            tExpSmooth_setDest(&sizeSmoother, (displayValues[0] * 0.9f) + 0.1f);
 8018778:	4830      	ldr	r0, [pc, #192]	; (801883c <SFXReverbTick+0xf0>)
            input[1] *= 4.0f;
 801877a:	edc4 7a01 	vstr	s15, [r4, #4]
            displayValues[0] = presetKnobValues[Reverb][0];
 801877e:	edd6 7a00 	vldr	s15, [r6]
            tExpSmooth_setDest(&sizeSmoother, (displayValues[0] * 0.9f) + 0.1f);
 8018782:	eea7 0a87 	vfma.f32	s0, s15, s14
            displayValues[0] = presetKnobValues[Reverb][0];
 8018786:	edc5 7a00 	vstr	s15, [r5]
            tExpSmooth_setDest(&sizeSmoother, (displayValues[0] * 0.9f) + 0.1f);
 801878a:	f009 fe29 	bl	80223e0 <tExpSmooth_setDest>
            float tempSize = tExpSmooth_tick(&sizeSmoother);
 801878e:	482b      	ldr	r0, [pc, #172]	; (801883c <SFXReverbTick+0xf0>)
 8018790:	f009 fe30 	bl	80223f4 <tExpSmooth_tick>
            tDattorroReverb_setSize(&reverb, tempSize);
 8018794:	482a      	ldr	r0, [pc, #168]	; (8018840 <SFXReverbTick+0xf4>)
 8018796:	f00d fc2b 	bl	8025ff0 <tDattorroReverb_setSize>
            displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Reverb][4], 0.5f) : presetKnobValues[Reverb][4];
 801879a:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 801879e:	bbb3      	cbnz	r3, 801880e <SFXReverbTick+0xc2>
 80187a0:	edd6 7a04 	vldr	s15, [r6, #16]
            tDattorroReverb_setFeedbackGain(&reverb, displayValues[4]);
 80187a4:	eeb0 0a67 	vmov.f32	s0, s15
 80187a8:	4825      	ldr	r0, [pc, #148]	; (8018840 <SFXReverbTick+0xf4>)
            displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Reverb][4], 0.5f) : presetKnobValues[Reverb][4];
 80187aa:	edc5 7a04 	vstr	s15, [r5, #16]
            tDattorroReverb_setFeedbackGain(&reverb, displayValues[4]);
 80187ae:	f00d fcb7 	bl	8026120 <tDattorroReverb_setFeedbackGain>
            sample = tanhf(stereo[0]) * 0.99f;
 80187b2:	ed9f 8a24 	vldr	s16, [pc, #144]	; 8018844 <SFXReverbTick+0xf8>
            tDattorroReverb_tickStereo(&reverb, input[1], stereo);
 80187b6:	4669      	mov	r1, sp
 80187b8:	4821      	ldr	r0, [pc, #132]	; (8018840 <SFXReverbTick+0xf4>)
 80187ba:	ed94 0a01 	vldr	s0, [r4, #4]
 80187be:	f00d fa03 	bl	8025bc8 <tDattorroReverb_tickStereo>
            sample = tanhf(stereo[0]) * 0.99f;
 80187c2:	ed9d 0a00 	vldr	s0, [sp]
 80187c6:	f00e ffad 	bl	8027724 <tanhf>
 80187ca:	ee60 7a08 	vmul.f32	s15, s0, s16
            input[1] = tanhf(stereo[1]) * 0.99f;
 80187ce:	ed9d 0a01 	vldr	s0, [sp, #4]
            input[0] = sample;
 80187d2:	edc4 7a00 	vstr	s15, [r4]
            input[1] = tanhf(stereo[1]) * 0.99f;
 80187d6:	f00e ffa5 	bl	8027724 <tanhf>
 80187da:	ee20 0a08 	vmul.f32	s0, s0, s16
 80187de:	ed84 0a01 	vstr	s0, [r4, #4]
        }
 80187e2:	b003      	add	sp, #12
 80187e4:	ecbd 8b02 	vpop	{d8}
 80187e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                freeze = !freeze;
 80187ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 80187ee:	2100      	movs	r1, #0
                tDattorroReverb_setFreeze(&reverb, freeze);
 80187f0:	4813      	ldr	r0, [pc, #76]	; (8018840 <SFXReverbTick+0xf4>)
                freeze = !freeze;
 80187f2:	fab2 f282 	clz	r2, r2
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 80187f6:	7719      	strb	r1, [r3, #28]
                freeze = !freeze;
 80187f8:	0952      	lsrs	r2, r2, #5
                tDattorroReverb_setFreeze(&reverb, freeze);
 80187fa:	4611      	mov	r1, r2
                freeze = !freeze;
 80187fc:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
                tDattorroReverb_setFreeze(&reverb, freeze);
 8018800:	f00d fb9a 	bl	8025f38 <tDattorroReverb_setFreeze>
                setLED_C(freeze);
 8018804:	f897 00e0 	ldrb.w	r0, [r7, #224]	; 0xe0
 8018808:	f7fb f8f6 	bl	80139f8 <setLED_C>
 801880c:	e7a8      	b.n	8018760 <SFXReverbTick+0x14>
            displayValues[4] = capFeedback ? LEAF_clip(0.0f, presetKnobValues[Reverb][4], 0.5f) : presetKnobValues[Reverb][4];
 801880e:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8018812:	edd6 0a04 	vldr	s1, [r6, #16]
 8018816:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8018848 <SFXReverbTick+0xfc>
 801881a:	f00b fa75 	bl	8023d08 <LEAF_clip>
 801881e:	eef0 7a40 	vmov.f32	s15, s0
 8018822:	e7bf      	b.n	80187a4 <SFXReverbTick+0x58>
 8018824:	20018724 	.word	0x20018724
 8018828:	20000548 	.word	0x20000548
 801882c:	20003200 	.word	0x20003200
 8018830:	3f666666 	.word	0x3f666666
 8018834:	3dcccccd 	.word	0x3dcccccd
 8018838:	200187d4 	.word	0x200187d4
 801883c:	2001817c 	.word	0x2001817c
 8018840:	20002c88 	.word	0x20002c88
 8018844:	3f7d70a4 	.word	0x3f7d70a4
 8018848:	00000000 	.word	0x00000000

0801884c <SFXReverbFree>:
        {
 801884c:	b508      	push	{r3, lr}
            tDattorroReverb_free(&reverb);
 801884e:	4804      	ldr	r0, [pc, #16]	; (8018860 <SFXReverbFree+0x14>)
 8018850:	f00d f962 	bl	8025b18 <tDattorroReverb_free>
            tExpSmooth_free(&sizeSmoother);
 8018854:	4803      	ldr	r0, [pc, #12]	; (8018864 <SFXReverbFree+0x18>)
        }
 8018856:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            tExpSmooth_free(&sizeSmoother);
 801885a:	f009 bdab 	b.w	80223b4 <tExpSmooth_free>
 801885e:	bf00      	nop
 8018860:	20002c88 	.word	0x20002c88
 8018864:	2001817c 	.word	0x2001817c

08018868 <SFXReverb2Alloc>:
        {
 8018868:	b570      	push	{r4, r5, r6, lr}
            tNReverb_init(&reverb2, 1.0f);
 801886a:	4e27      	ldr	r6, [pc, #156]	; (8018908 <SFXReverb2Alloc+0xa0>)
            leaf.clearOnAllocation = 1;
 801886c:	2401      	movs	r4, #1
 801886e:	4d27      	ldr	r5, [pc, #156]	; (801890c <SFXReverb2Alloc+0xa4>)
            tNReverb_init(&reverb2, 1.0f);
 8018870:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8018874:	4630      	mov	r0, r6
            leaf.clearOnAllocation = 1;
 8018876:	616c      	str	r4, [r5, #20]
        {
 8018878:	ed2d 8b04 	vpush	{d8-d9}
            tSVF_init(&lowpass, SVFTypeLowpass, 18000.0f, 0.75f);
 801887c:	ed9f 9a24 	vldr	s18, [pc, #144]	; 8018910 <SFXReverb2Alloc+0xa8>
            tNReverb_init(&reverb2, 1.0f);
 8018880:	f00c fe72 	bl	8025568 <tNReverb_init>
            tSVF_init(&highpass, SVFTypeHighpass, 40.0f, 0.75f);
 8018884:	eddf 8a23 	vldr	s17, [pc, #140]	; 8018914 <SFXReverb2Alloc+0xac>
            tNReverb_setMix(&reverb2, 1.0f);
 8018888:	4630      	mov	r0, r6
 801888a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
            tSVF_init(&bandpass, SVFTypeBandpass, 2000.0f, 1.0f);
 801888e:	ed9f 8a22 	vldr	s16, [pc, #136]	; 8018918 <SFXReverb2Alloc+0xb0>
            tNReverb_setMix(&reverb2, 1.0f);
 8018892:	f00c fed1 	bl	8025638 <tNReverb_setMix>
            tSVF_init(&lowpass, SVFTypeLowpass, 18000.0f, 0.75f);
 8018896:	eeb0 0a49 	vmov.f32	s0, s18
 801889a:	4621      	mov	r1, r4
 801889c:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 80188a0:	481e      	ldr	r0, [pc, #120]	; (801891c <SFXReverb2Alloc+0xb4>)
 80188a2:	f009 fedb 	bl	802265c <tSVF_init>
            tSVF_init(&highpass, SVFTypeHighpass, 40.0f, 0.75f);
 80188a6:	eeb0 0a68 	vmov.f32	s0, s17
 80188aa:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 80188ae:	2100      	movs	r1, #0
 80188b0:	481b      	ldr	r0, [pc, #108]	; (8018920 <SFXReverb2Alloc+0xb8>)
 80188b2:	f009 fed3 	bl	802265c <tSVF_init>
            tSVF_init(&bandpass, SVFTypeBandpass, 2000.0f, 1.0f);
 80188b6:	eeb0 0a48 	vmov.f32	s0, s16
 80188ba:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80188be:	2102      	movs	r1, #2
 80188c0:	4818      	ldr	r0, [pc, #96]	; (8018924 <SFXReverb2Alloc+0xbc>)
 80188c2:	f009 fecb 	bl	802265c <tSVF_init>
            tSVF_init(&lowpass2, SVFTypeLowpass, 18000.0f, 0.75f);
 80188c6:	eeb0 0a49 	vmov.f32	s0, s18
 80188ca:	4621      	mov	r1, r4
 80188cc:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 80188d0:	4815      	ldr	r0, [pc, #84]	; (8018928 <SFXReverb2Alloc+0xc0>)
 80188d2:	f009 fec3 	bl	802265c <tSVF_init>
            tSVF_init(&highpass2, SVFTypeHighpass, 40.0f, 0.75f);
 80188d6:	eeb0 0a68 	vmov.f32	s0, s17
 80188da:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 80188de:	2100      	movs	r1, #0
 80188e0:	4812      	ldr	r0, [pc, #72]	; (801892c <SFXReverb2Alloc+0xc4>)
 80188e2:	f009 febb 	bl	802265c <tSVF_init>
            tSVF_init(&bandpass2, SVFTypeBandpass, 2000.0f, 1.0f);
 80188e6:	eeb0 0a48 	vmov.f32	s0, s16
 80188ea:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80188ee:	2102      	movs	r1, #2
 80188f0:	480f      	ldr	r0, [pc, #60]	; (8018930 <SFXReverb2Alloc+0xc8>)
 80188f2:	f009 feb3 	bl	802265c <tSVF_init>
            freeze = 0;
 80188f6:	2300      	movs	r3, #0
 80188f8:	4a0e      	ldr	r2, [pc, #56]	; (8018934 <SFXReverb2Alloc+0xcc>)
            leaf.clearOnAllocation = 0;
 80188fa:	616b      	str	r3, [r5, #20]
            freeze = 0;
 80188fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
        }
 8018900:	ecbd 8b04 	vpop	{d8-d9}
 8018904:	bd70      	pop	{r4, r5, r6, pc}
 8018906:	bf00      	nop
 8018908:	20018274 	.word	0x20018274
 801890c:	200194e0 	.word	0x200194e0
 8018910:	468ca000 	.word	0x468ca000
 8018914:	42200000 	.word	0x42200000
 8018918:	44fa0000 	.word	0x44fa0000
 801891c:	20002988 	.word	0x20002988
 8018920:	20018184 	.word	0x20018184
 8018924:	2001764c 	.word	0x2001764c
 8018928:	200172a0 	.word	0x200172a0
 801892c:	2001754c 	.word	0x2001754c
 8018930:	2001762c 	.word	0x2001762c
 8018934:	20000548 	.word	0x20000548

08018938 <SFXReverb2Frame>:
 8018938:	4770      	bx	lr
 801893a:	bf00      	nop

0801893c <SFXReverb2Tick>:
            displayValues[0] = presetKnobValues[Reverb2][0] * 4.0f;
 801893c:	4b5f      	ldr	r3, [pc, #380]	; (8018abc <SFXReverb2Tick+0x180>)
 801893e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
        {
 8018942:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018946:	ed2d 8b02 	vpush	{d8}
            displayValues[0] = presetKnobValues[Reverb2][0] * 4.0f;
 801894a:	ed93 0a00 	vldr	s0, [r3]
        {
 801894e:	b083      	sub	sp, #12
            if (!freeze)
 8018950:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8018af0 <SFXReverb2Tick+0x1b4>
        {
 8018954:	4605      	mov	r5, r0
            displayValues[0] = presetKnobValues[Reverb2][0] * 4.0f;
 8018956:	ee20 0a27 	vmul.f32	s0, s0, s15
 801895a:	4c59      	ldr	r4, [pc, #356]	; (8018ac0 <SFXReverb2Tick+0x184>)
            if (!freeze)
 801895c:	f8d9 30e0 	ldr.w	r3, [r9, #224]	; 0xe0
            displayValues[0] = presetKnobValues[Reverb2][0] * 4.0f;
 8018960:	ed84 0a00 	vstr	s0, [r4]
            if (!freeze)
 8018964:	2b00      	cmp	r3, #0
 8018966:	f040 8092 	bne.w	8018a8e <SFXReverb2Tick+0x152>
                tNReverb_setT60(&reverb2, displayValues[0]);
 801896a:	4856      	ldr	r0, [pc, #344]	; (8018ac4 <SFXReverb2Tick+0x188>)
 801896c:	f00c fe20 	bl	80255b0 <tNReverb_setT60>
            displayValues[1] = faster_mtof(presetKnobValues[Reverb2][1]*135.0f);
 8018970:	4e55      	ldr	r6, [pc, #340]	; (8018ac8 <SFXReverb2Tick+0x18c>)
 8018972:	eddf 7a56 	vldr	s15, [pc, #344]	; 8018acc <SFXReverb2Tick+0x190>
 8018976:	4637      	mov	r7, r6
            displayValues[2] = faster_mtof(presetKnobValues[Reverb2][2]*128.0f);
 8018978:	ed9f 8a55 	vldr	s16, [pc, #340]	; 8018ad0 <SFXReverb2Tick+0x194>
            if (buttonActionsSFX[ButtonC][ActionPress])
 801897c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8018af4 <SFXReverb2Tick+0x1b8>
            displayValues[1] = faster_mtof(presetKnobValues[Reverb2][1]*135.0f);
 8018980:	ecb7 0a01 	vldmia	r7!, {s0}
 8018984:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018988:	f00b fb2c 	bl	8023fe4 <faster_mtof>
            tSVF_setFreq(&lowpass, displayValues[1]);
 801898c:	4851      	ldr	r0, [pc, #324]	; (8018ad4 <SFXReverb2Tick+0x198>)
            displayValues[1] = faster_mtof(presetKnobValues[Reverb2][1]*135.0f);
 801898e:	ed84 0a01 	vstr	s0, [r4, #4]
            tSVF_setFreq(&lowpass, displayValues[1]);
 8018992:	f009 ff17 	bl	80227c4 <tSVF_setFreq>
            tSVF_setFreq(&lowpass2, displayValues[1]);
 8018996:	4850      	ldr	r0, [pc, #320]	; (8018ad8 <SFXReverb2Tick+0x19c>)
 8018998:	ed94 0a01 	vldr	s0, [r4, #4]
 801899c:	f009 ff12 	bl	80227c4 <tSVF_setFreq>
            displayValues[2] = faster_mtof(presetKnobValues[Reverb2][2]*128.0f);
 80189a0:	ed97 0a00 	vldr	s0, [r7]
 80189a4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80189a8:	f00b fb1c 	bl	8023fe4 <faster_mtof>
            tSVF_setFreq(&highpass, displayValues[2]);
 80189ac:	484b      	ldr	r0, [pc, #300]	; (8018adc <SFXReverb2Tick+0x1a0>)
            displayValues[2] = faster_mtof(presetKnobValues[Reverb2][2]*128.0f);
 80189ae:	ed84 0a02 	vstr	s0, [r4, #8]
            tSVF_setFreq(&highpass, displayValues[2]);
 80189b2:	f009 ff07 	bl	80227c4 <tSVF_setFreq>
            tSVF_setFreq(&highpass2, displayValues[2]);
 80189b6:	484a      	ldr	r0, [pc, #296]	; (8018ae0 <SFXReverb2Tick+0x1a4>)
 80189b8:	ed94 0a02 	vldr	s0, [r4, #8]
 80189bc:	f009 ff02 	bl	80227c4 <tSVF_setFreq>
            displayValues[3] = faster_mtof(presetKnobValues[Reverb2][3]*128.0f);
 80189c0:	ed96 0a02 	vldr	s0, [r6, #8]
 80189c4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80189c8:	f00b fb0c 	bl	8023fe4 <faster_mtof>
            tSVF_setFreq(&bandpass, displayValues[3]);
 80189cc:	4845      	ldr	r0, [pc, #276]	; (8018ae4 <SFXReverb2Tick+0x1a8>)
            displayValues[3] = faster_mtof(presetKnobValues[Reverb2][3]*128.0f);
 80189ce:	ed84 0a03 	vstr	s0, [r4, #12]
            tSVF_setFreq(&bandpass, displayValues[3]);
 80189d2:	f009 fef7 	bl	80227c4 <tSVF_setFreq>
            tSVF_setFreq(&bandpass2, displayValues[3]);
 80189d6:	ed94 0a03 	vldr	s0, [r4, #12]
 80189da:	4843      	ldr	r0, [pc, #268]	; (8018ae8 <SFXReverb2Tick+0x1ac>)
 80189dc:	f009 fef2 	bl	80227c4 <tSVF_setFreq>
            displayValues[4] = (presetKnobValues[Reverb2][4] * 4.0f) - 2.0f;
 80189e0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80189e4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80189e8:	edd6 6a03 	vldr	s13, [r6, #12]
            if (buttonActionsSFX[ButtonC][ActionPress])
 80189ec:	f898 301c 	ldrb.w	r3, [r8, #28]
            displayValues[4] = (presetKnobValues[Reverb2][4] * 4.0f) - 2.0f;
 80189f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80189f4:	edc4 7a04 	vstr	s15, [r4, #16]
            if (buttonActionsSFX[ButtonC][ActionPress])
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d150      	bne.n	8018a9e <SFXReverb2Tick+0x162>
            if (buttonActionsSFX[ButtonA][ActionPress])
 80189fc:	f898 3014 	ldrb.w	r3, [r8, #20]
 8018a00:	b163      	cbz	r3, 8018a1c <SFXReverb2Tick+0xe0>
                freeze = !freeze;
 8018a02:	f8d9 30e0 	ldr.w	r3, [r9, #224]	; 0xe0
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8018a06:	2200      	movs	r2, #0
                freeze = !freeze;
 8018a08:	fab3 f383 	clz	r3, r3
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8018a0c:	f888 2014 	strb.w	r2, [r8, #20]
                freeze = !freeze;
 8018a10:	095b      	lsrs	r3, r3, #5
                setLED_C(freeze);
 8018a12:	4618      	mov	r0, r3
                freeze = !freeze;
 8018a14:	f8c9 30e0 	str.w	r3, [r9, #224]	; 0xe0
                setLED_C(freeze);
 8018a18:	f7fa ffee 	bl	80139f8 <setLED_C>
            tNReverb_tickStereo(&reverb2, input[1], stereoOuts);
 8018a1c:	4669      	mov	r1, sp
 8018a1e:	ed95 0a01 	vldr	s0, [r5, #4]
 8018a22:	4828      	ldr	r0, [pc, #160]	; (8018ac4 <SFXReverb2Tick+0x188>)
 8018a24:	f00c fe0c 	bl	8025640 <tNReverb_tickStereo>
            float leftOut = tSVF_tick(&lowpass, stereoOuts[0]);
 8018a28:	ed9d 0a00 	vldr	s0, [sp]
 8018a2c:	4829      	ldr	r0, [pc, #164]	; (8018ad4 <SFXReverb2Tick+0x198>)
 8018a2e:	f009 fe93 	bl	8022758 <tSVF_tick>
            leftOut = tSVF_tick(&highpass, leftOut);
 8018a32:	482a      	ldr	r0, [pc, #168]	; (8018adc <SFXReverb2Tick+0x1a0>)
 8018a34:	f009 fe90 	bl	8022758 <tSVF_tick>
            leftOut += tSVF_tick(&bandpass, leftOut) * displayValues[4];
 8018a38:	482a      	ldr	r0, [pc, #168]	; (8018ae4 <SFXReverb2Tick+0x1a8>)
            leftOut = tSVF_tick(&highpass, leftOut);
 8018a3a:	eef0 8a40 	vmov.f32	s17, s0
            leftOut += tSVF_tick(&bandpass, leftOut) * displayValues[4];
 8018a3e:	f009 fe8b 	bl	8022758 <tSVF_tick>
 8018a42:	edd4 7a04 	vldr	s15, [r4, #16]
            float rightOutTemp = tSVF_tick(&lowpass2, stereoOuts[1]);
 8018a46:	4824      	ldr	r0, [pc, #144]	; (8018ad8 <SFXReverb2Tick+0x19c>)
            leftOut += tSVF_tick(&bandpass, leftOut) * displayValues[4];
 8018a48:	eee0 8a27 	vfma.f32	s17, s0, s15
            float rightOutTemp = tSVF_tick(&lowpass2, stereoOuts[1]);
 8018a4c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8018a50:	f009 fe82 	bl	8022758 <tSVF_tick>
            rightOutTemp = tSVF_tick(&highpass2, rightOutTemp);
 8018a54:	4822      	ldr	r0, [pc, #136]	; (8018ae0 <SFXReverb2Tick+0x1a4>)
 8018a56:	f009 fe7f 	bl	8022758 <tSVF_tick>
            rightOutTemp += tSVF_tick(&bandpass, rightOutTemp) * displayValues[4];
 8018a5a:	4822      	ldr	r0, [pc, #136]	; (8018ae4 <SFXReverb2Tick+0x1a8>)
            rightOutTemp = tSVF_tick(&highpass2, rightOutTemp);
 8018a5c:	eeb0 8a40 	vmov.f32	s16, s0
            rightOutTemp += tSVF_tick(&bandpass, rightOutTemp) * displayValues[4];
 8018a60:	f009 fe7a 	bl	8022758 <tSVF_tick>
 8018a64:	edd4 7a04 	vldr	s15, [r4, #16]
 8018a68:	eea0 8a27 	vfma.f32	s16, s0, s15
            sample = tanhf(leftOut);
 8018a6c:	eeb0 0a68 	vmov.f32	s0, s17
 8018a70:	f00e fe58 	bl	8027724 <tanhf>
            input[0] = sample;
 8018a74:	ed85 0a00 	vstr	s0, [r5]
            input[1] = tanhf(rightOutTemp);
 8018a78:	eeb0 0a48 	vmov.f32	s0, s16
 8018a7c:	f00e fe52 	bl	8027724 <tanhf>
 8018a80:	ed85 0a01 	vstr	s0, [r5, #4]
        }
 8018a84:	b003      	add	sp, #12
 8018a86:	ecbd 8b02 	vpop	{d8}
 8018a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                tNReverb_setT60(&reverb2, 1000.0f);
 8018a8e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8018aec <SFXReverb2Tick+0x1b0>
 8018a92:	480c      	ldr	r0, [pc, #48]	; (8018ac4 <SFXReverb2Tick+0x188>)
 8018a94:	f00c fd8c 	bl	80255b0 <tNReverb_setT60>
                input[1] = 0.0f;
 8018a98:	2300      	movs	r3, #0
 8018a9a:	606b      	str	r3, [r5, #4]
 8018a9c:	e768      	b.n	8018970 <SFXReverb2Tick+0x34>
                freeze = !freeze;
 8018a9e:	f8d9 30e0 	ldr.w	r3, [r9, #224]	; 0xe0
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8018aa2:	2200      	movs	r2, #0
                freeze = !freeze;
 8018aa4:	fab3 f383 	clz	r3, r3
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8018aa8:	f888 201c 	strb.w	r2, [r8, #28]
                freeze = !freeze;
 8018aac:	095b      	lsrs	r3, r3, #5
                setLED_C(freeze);
 8018aae:	4618      	mov	r0, r3
                freeze = !freeze;
 8018ab0:	f8c9 30e0 	str.w	r3, [r9, #224]	; 0xe0
                setLED_C(freeze);
 8018ab4:	f7fa ffa0 	bl	80139f8 <setLED_C>
 8018ab8:	e7a0      	b.n	80189fc <SFXReverb2Tick+0xc0>
 8018aba:	bf00      	nop
 8018abc:	20003264 	.word	0x20003264
 8018ac0:	200187d4 	.word	0x200187d4
 8018ac4:	20018274 	.word	0x20018274
 8018ac8:	20003268 	.word	0x20003268
 8018acc:	43070000 	.word	0x43070000
 8018ad0:	43000000 	.word	0x43000000
 8018ad4:	20002988 	.word	0x20002988
 8018ad8:	200172a0 	.word	0x200172a0
 8018adc:	20018184 	.word	0x20018184
 8018ae0:	2001754c 	.word	0x2001754c
 8018ae4:	2001764c 	.word	0x2001764c
 8018ae8:	2001762c 	.word	0x2001762c
 8018aec:	447a0000 	.word	0x447a0000
 8018af0:	20000548 	.word	0x20000548
 8018af4:	20018724 	.word	0x20018724

08018af8 <SFXReverb2Free>:
        {
 8018af8:	b508      	push	{r3, lr}
            tNReverb_free(&reverb2);
 8018afa:	480b      	ldr	r0, [pc, #44]	; (8018b28 <SFXReverb2Free+0x30>)
 8018afc:	f00c fd3a 	bl	8025574 <tNReverb_free>
            tSVF_free(&lowpass);
 8018b00:	480a      	ldr	r0, [pc, #40]	; (8018b2c <SFXReverb2Free+0x34>)
 8018b02:	f009 fe25 	bl	8022750 <tSVF_free>
            tSVF_free(&highpass);
 8018b06:	480a      	ldr	r0, [pc, #40]	; (8018b30 <SFXReverb2Free+0x38>)
 8018b08:	f009 fe22 	bl	8022750 <tSVF_free>
            tSVF_free(&bandpass);
 8018b0c:	4809      	ldr	r0, [pc, #36]	; (8018b34 <SFXReverb2Free+0x3c>)
 8018b0e:	f009 fe1f 	bl	8022750 <tSVF_free>
            tSVF_free(&lowpass2);
 8018b12:	4809      	ldr	r0, [pc, #36]	; (8018b38 <SFXReverb2Free+0x40>)
 8018b14:	f009 fe1c 	bl	8022750 <tSVF_free>
            tSVF_free(&highpass2);
 8018b18:	4808      	ldr	r0, [pc, #32]	; (8018b3c <SFXReverb2Free+0x44>)
 8018b1a:	f009 fe19 	bl	8022750 <tSVF_free>
            tSVF_free(&bandpass2);
 8018b1e:	4808      	ldr	r0, [pc, #32]	; (8018b40 <SFXReverb2Free+0x48>)
        }
 8018b20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            tSVF_free(&bandpass2);
 8018b24:	f009 be14 	b.w	8022750 <tSVF_free>
 8018b28:	20018274 	.word	0x20018274
 8018b2c:	20002988 	.word	0x20002988
 8018b30:	20018184 	.word	0x20018184
 8018b34:	2001764c 	.word	0x2001764c
 8018b38:	200172a0 	.word	0x200172a0
 8018b3c:	2001754c 	.word	0x2001754c
 8018b40:	2001762c 	.word	0x2001762c

08018b44 <SFXLivingStringAlloc>:
        {
 8018b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            levMode = 0;
 8018b48:	2300      	movs	r3, #0
 8018b4a:	4e2d      	ldr	r6, [pc, #180]	; (8018c00 <SFXLivingStringAlloc+0xbc>)
 8018b4c:	4d2d      	ldr	r5, [pc, #180]	; (8018c04 <SFXLivingStringAlloc+0xc0>)
            tSimplePoly_setNumVoices(&poly, NUM_STRINGS);
 8018b4e:	2106      	movs	r1, #6
 8018b50:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8018c34 <SFXLivingStringAlloc+0xf0>
 8018b54:	461c      	mov	r4, r3
 8018b56:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8018c38 <SFXLivingStringAlloc+0xf4>
 8018b5a:	4f2b      	ldr	r7, [pc, #172]	; (8018c08 <SFXLivingStringAlloc+0xc4>)
 8018b5c:	482b      	ldr	r0, [pc, #172]	; (8018c0c <SFXLivingStringAlloc+0xc8>)
            levMode = 0;
 8018b5e:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
        {
 8018b62:	ed2d 8b06 	vpush	{d8-d10}
                myDetune[i] = (leaf.random() * 0.3f) - 0.15f;
 8018b66:	eddf aa2a 	vldr	s21, [pc, #168]	; 8018c10 <SFXLivingStringAlloc+0xcc>
            tSimplePoly_setNumVoices(&poly, NUM_STRINGS);
 8018b6a:	f00b ff2d 	bl	80249c8 <tSimplePoly_setNumVoices>
                myDetune[i] = (leaf.random() * 0.3f) - 0.15f;
 8018b6e:	ed9f aa29 	vldr	s20, [pc, #164]	; 8018c14 <SFXLivingStringAlloc+0xd0>
                tComplexLivingString_init(&theString[i], 440.f, 0.8f, 0.3f, 0.f, 9000.f, 1.0f, 0.3f, 0.01f, 0.125f, levMode);
 8018b72:	eddf 9a29 	vldr	s19, [pc, #164]	; 8018c18 <SFXLivingStringAlloc+0xd4>
 8018b76:	ed9f 9a29 	vldr	s18, [pc, #164]	; 8018c1c <SFXLivingStringAlloc+0xd8>
 8018b7a:	ed9f 8a29 	vldr	s16, [pc, #164]	; 8018c20 <SFXLivingStringAlloc+0xdc>
 8018b7e:	eddf 8a29 	vldr	s17, [pc, #164]	; 8018c24 <SFXLivingStringAlloc+0xe0>
                myDetune[i] = (leaf.random() * 0.3f) - 0.15f;
 8018b82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018b86:	4798      	blx	r3
 8018b88:	eef0 7a4a 	vmov.f32	s15, s20
                tComplexLivingString_init(&theString[i], 440.f, 0.8f, 0.3f, 0.f, 9000.f, 1.0f, 0.3f, 0.01f, 0.125f, levMode);
 8018b8c:	ed9f 3a20 	vldr	s6, [pc, #128]	; 8018c10 <SFXLivingStringAlloc+0xcc>
 8018b90:	eb08 0004 	add.w	r0, r8, r4
 8018b94:	eeb4 4a00 	vmov.f32	s8, #64	; 0x3e000000  0.125
 8018b98:	f8d6 10e4 	ldr.w	r1, [r6, #228]	; 0xe4
                myDetune[i] = (leaf.random() * 0.3f) - 0.15f;
 8018b9c:	eee0 7a2a 	vfma.f32	s15, s0, s21
                tComplexLivingString_init(&theString[i], 440.f, 0.8f, 0.3f, 0.f, 9000.f, 1.0f, 0.3f, 0.01f, 0.125f, levMode);
 8018ba0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8018c28 <SFXLivingStringAlloc+0xe4>
 8018ba4:	eef0 3a69 	vmov.f32	s7, s19
 8018ba8:	eeb0 1a43 	vmov.f32	s2, s6
 8018bac:	eeb0 2a49 	vmov.f32	s4, s18
 8018bb0:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8018bb4:	eef0 1a48 	vmov.f32	s3, s16
 8018bb8:	eef0 0a68 	vmov.f32	s1, s17
                myDetune[i] = (leaf.random() * 0.3f) - 0.15f;
 8018bbc:	ece5 7a01 	vstmia	r5!, {s15}
                tComplexLivingString_init(&theString[i], 440.f, 0.8f, 0.3f, 0.f, 9000.f, 1.0f, 0.3f, 0.01f, 0.125f, levMode);
 8018bc0:	f00c fa04 	bl	8024fcc <tComplexLivingString_init>
                tExpSmooth_initToPool(&stringGains[i], 0.0f, 0.002f, &smallPool);
 8018bc4:	1938      	adds	r0, r7, r4
 8018bc6:	3404      	adds	r4, #4
 8018bc8:	4918      	ldr	r1, [pc, #96]	; (8018c2c <SFXLivingStringAlloc+0xe8>)
 8018bca:	eddf 0a19 	vldr	s1, [pc, #100]	; 8018c30 <SFXLivingStringAlloc+0xec>
 8018bce:	eeb0 0a48 	vmov.f32	s0, s16
 8018bd2:	f009 fbc9 	bl	8022368 <tExpSmooth_initToPool>
            for (int i = 0; i < NUM_STRINGS; i++)
 8018bd6:	2c18      	cmp	r4, #24
 8018bd8:	d1d3      	bne.n	8018b82 <SFXLivingStringAlloc+0x3e>
            ignoreFreqKnobs = 0;
 8018bda:	2300      	movs	r3, #0
            setLED_A(ignoreFreqKnobs);
 8018bdc:	4618      	mov	r0, r3
            ignoreFreqKnobs = 0;
 8018bde:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
            setLED_A(ignoreFreqKnobs);
 8018be2:	f7fa feed 	bl	80139c0 <setLED_A>
            setLED_B(independentStrings);
 8018be6:	f896 00ec 	ldrb.w	r0, [r6, #236]	; 0xec
 8018bea:	f7fa fef7 	bl	80139dc <setLED_B>
            setLED_C(levMode);
 8018bee:	f896 00e4 	ldrb.w	r0, [r6, #228]	; 0xe4
        }
 8018bf2:	ecbd 8b06 	vpop	{d8-d10}
 8018bf6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            setLED_C(levMode);
 8018bfa:	f7fa befd 	b.w	80139f8 <setLED_C>
 8018bfe:	bf00      	nop
 8018c00:	20000548 	.word	0x20000548
 8018c04:	200028a8 	.word	0x200028a8
 8018c08:	20017068 	.word	0x20017068
 8018c0c:	20017560 	.word	0x20017560
 8018c10:	3e99999a 	.word	0x3e99999a
 8018c14:	be19999a 	.word	0xbe19999a
 8018c18:	3c23d70a 	.word	0x3c23d70a
 8018c1c:	460ca000 	.word	0x460ca000
 8018c20:	00000000 	.word	0x00000000
 8018c24:	3f4ccccd 	.word	0x3f4ccccd
 8018c28:	43dc0000 	.word	0x43dc0000
 8018c2c:	20018338 	.word	0x20018338
 8018c30:	3b03126f 	.word	0x3b03126f
 8018c34:	200194e0 	.word	0x200194e0
 8018c38:	200026b0 	.word	0x200026b0
 8018c3c:	00000000 	.word	0x00000000

08018c40 <SFXLivingStringFrame>:
        {
 8018c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8018c44:	4dbe      	ldr	r5, [pc, #760]	; (8018f40 <SFXLivingStringFrame+0x300>)
                ignoreFreqKnobs = !ignoreFreqKnobs;
 8018c46:	4fbf      	ldr	r7, [pc, #764]	; (8018f44 <SFXLivingStringFrame+0x304>)
        {
 8018c48:	ed2d 8b04 	vpush	{d8-d9}
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8018c4c:	7d2b      	ldrb	r3, [r5, #20]
        {
 8018c4e:	b083      	sub	sp, #12
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8018c50:	2b01      	cmp	r3, #1
 8018c52:	f000 820a 	beq.w	801906a <SFXLivingStringFrame+0x42a>
            if (buttonActionsSFX[ButtonC][ActionPress] == 1)
 8018c56:	7f2b      	ldrb	r3, [r5, #28]
 8018c58:	2b01      	cmp	r3, #1
 8018c5a:	f000 813b 	beq.w	8018ed4 <SFXLivingStringFrame+0x294>
            if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 8018c5e:	7e2b      	ldrb	r3, [r5, #24]
 8018c60:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8018f70 <SFXLivingStringFrame+0x330>
 8018c64:	2b01      	cmp	r3, #1
 8018c66:	f000 8154 	beq.w	8018f12 <SFXLivingStringFrame+0x2d2>
            displayValues[0] = LEAF_midiToFrequency((presetKnobValues[LivingString][0] * 90.0f)); //freq
 8018c6a:	f8df b308 	ldr.w	fp, [pc, #776]	; 8018f74 <SFXLivingStringFrame+0x334>
            displayValues[6] = ((tanhf((presetKnobValues[LivingString][6] * 8.0f) - 4.0f)) * 0.5f) + 0.5f;//prep Index
 8018c6e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            displayValues[0] = LEAF_midiToFrequency((presetKnobValues[LivingString][0] * 90.0f)); //freq
 8018c72:	eddf 8ab5 	vldr	s17, [pc, #724]	; 8018f48 <SFXLivingStringFrame+0x308>
 8018c76:	465d      	mov	r5, fp
 8018c78:	4cb4      	ldr	r4, [pc, #720]	; (8018f4c <SFXLivingStringFrame+0x30c>)
 8018c7a:	ecb5 0a01 	vldmia	r5!, {s0}
 8018c7e:	ee20 0a28 	vmul.f32	s0, s0, s17
 8018c82:	f00b f92b 	bl	8023edc <LEAF_midiToFrequency>
            displayValues[3] = mtof((presetKnobValues[LivingString][3] * 130.0f)+12.0f); //lowpass
 8018c86:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 8018c8a:	eddb 6a03 	vldr	s13, [fp, #12]
 8018c8e:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8018f50 <SFXLivingStringFrame+0x310>
            displayValues[2] = presetKnobValues[LivingString][2]; //decay
 8018c92:	f8db 2008 	ldr.w	r2, [fp, #8]
            displayValues[3] = mtof((presetKnobValues[LivingString][3] * 130.0f)+12.0f); //lowpass
 8018c96:	eee6 7a87 	vfma.f32	s15, s13, s14
            displayValues[1] = presetKnobValues[LivingString][1]; //detune
 8018c9a:	6829      	ldr	r1, [r5, #0]
            displayValues[0] = LEAF_midiToFrequency((presetKnobValues[LivingString][0] * 90.0f)); //freq
 8018c9c:	ed84 0a00 	vstr	s0, [r4]
            displayValues[2] = presetKnobValues[LivingString][2]; //decay
 8018ca0:	60a2      	str	r2, [r4, #8]
            displayValues[1] = presetKnobValues[LivingString][1]; //detune
 8018ca2:	6061      	str	r1, [r4, #4]
            displayValues[3] = mtof((presetKnobValues[LivingString][3] * 130.0f)+12.0f); //lowpass
 8018ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8018ca8:	f00b f978 	bl	8023f9c <mtof>
            displayValues[4] = (presetKnobValues[LivingString][4] * 0.48) + 0.5f;//pickPos
 8018cac:	ed9b 4a04 	vldr	s8, [fp, #16]
            displayValues[5] = (presetKnobValues[LivingString][5] * 0.48) + 0.02f;//prepPos
 8018cb0:	ed9b 5a05 	vldr	s10, [fp, #20]
            displayValues[4] = (presetKnobValues[LivingString][4] * 0.48) + 0.5f;//pickPos
 8018cb4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8018cb8:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
            displayValues[3] = mtof((presetKnobValues[LivingString][3] * 130.0f)+12.0f); //lowpass
 8018cbc:	ed84 0a03 	vstr	s0, [r4, #12]
            displayValues[5] = (presetKnobValues[LivingString][5] * 0.48) + 0.02f;//prepPos
 8018cc0:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
            displayValues[6] = ((tanhf((presetKnobValues[LivingString][6] * 8.0f) - 4.0f)) * 0.5f) + 0.5f;//prep Index
 8018cc4:	ed9b 2a06 	vldr	s4, [fp, #24]
 8018cc8:	eef2 2a00 	vmov.f32	s5, #32	; 0x41000000  8.0
 8018ccc:	eeb9 0a00 	vmov.f32	s0, #144	; 0xc0800000 -4.0
            displayValues[4] = (presetKnobValues[LivingString][4] * 0.48) + 0.5f;//pickPos
 8018cd0:	ed9f 3b97 	vldr	d3, [pc, #604]	; 8018f30 <SFXLivingStringFrame+0x2f0>
            displayValues[5] = (presetKnobValues[LivingString][5] * 0.48) + 0.02f;//prepPos
 8018cd4:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8018f38 <SFXLivingStringFrame+0x2f8>
            displayValues[6] = ((tanhf((presetKnobValues[LivingString][6] * 8.0f) - 4.0f)) * 0.5f) + 0.5f;//prep Index
 8018cd8:	eea2 0a22 	vfma.f32	s0, s4, s5
            displayValues[4] = (presetKnobValues[LivingString][4] * 0.48) + 0.5f;//pickPos
 8018cdc:	eea4 6b03 	vfma.f64	d6, d4, d3
            displayValues[5] = (presetKnobValues[LivingString][5] * 0.48) + 0.02f;//prepPos
 8018ce0:	eea5 7b03 	vfma.f64	d7, d5, d3
            displayValues[4] = (presetKnobValues[LivingString][4] * 0.48) + 0.5f;//pickPos
 8018ce4:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8018ce8:	ed84 6a04 	vstr	s12, [r4, #16]
            displayValues[5] = (presetKnobValues[LivingString][5] * 0.48) + 0.02f;//prepPos
 8018cec:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8018cf0:	ed84 7a05 	vstr	s14, [r4, #20]
            displayValues[6] = ((tanhf((presetKnobValues[LivingString][6] * 8.0f) - 4.0f)) * 0.5f) + 0.5f;//prep Index
 8018cf4:	f00e fd16 	bl	8027724 <tanhf>
 8018cf8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
            displayValues[7] = presetKnobValues[LivingString][7];// let ring
 8018cfc:	f8db 201c 	ldr.w	r2, [fp, #28]
            displayValues[6] = ((tanhf((presetKnobValues[LivingString][6] * 8.0f) - 4.0f)) * 0.5f) + 0.5f;//prep Index
 8018d00:	ee30 0a08 	vadd.f32	s0, s0, s16
            if (!independentStrings)
 8018d04:	f8d7 60ec 	ldr.w	r6, [r7, #236]	; 0xec
            displayValues[7] = presetKnobValues[LivingString][7];// let ring
 8018d08:	61e2      	str	r2, [r4, #28]
            displayValues[6] = ((tanhf((presetKnobValues[LivingString][6] * 8.0f) - 4.0f)) * 0.5f) + 0.5f;//prep Index
 8018d0a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018d0e:	ed84 0a06 	vstr	s0, [r4, #24]
            if (!independentStrings)
 8018d12:	2e00      	cmp	r6, #0
 8018d14:	f040 8134 	bne.w	8018f80 <SFXLivingStringFrame+0x340>
                if (!ignoreFreqKnobs)
 8018d18:	f8d7 a0e8 	ldr.w	sl, [r7, #232]	; 0xe8
 8018d1c:	f1ba 0f00 	cmp.w	sl, #0
 8018d20:	f000 808b 	beq.w	8018e3a <SFXLivingStringFrame+0x1fa>
 8018d24:	f8df 9250 	ldr.w	r9, [pc, #592]	; 8018f78 <SFXLivingStringFrame+0x338>
 8018d28:	46b2      	mov	sl, r6
 8018d2a:	4b8a      	ldr	r3, [pc, #552]	; (8018f54 <SFXLivingStringFrame+0x314>)
                        tComplexLivingString_setDecay(&theString[i], (displayValues[2] * 0.015f) + 0.995f);
 8018d2c:	f8cd 9000 	str.w	r9, [sp]
 8018d30:	46b1      	mov	r9, r6
 8018d32:	f8cd 8004 	str.w	r8, [sp, #4]
 8018d36:	46b8      	mov	r8, r7
 8018d38:	f8df b240 	ldr.w	fp, [pc, #576]	; 8018f7c <SFXLivingStringFrame+0x33c>
 8018d3c:	461f      	mov	r7, r3
 8018d3e:	ed9f 9a86 	vldr	s18, [pc, #536]	; 8018f58 <SFXLivingStringFrame+0x318>
 8018d42:	eddf 8a86 	vldr	s17, [pc, #536]	; 8018f5c <SFXLivingStringFrame+0x31c>
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8018d46:	fa5f f689 	uxtb.w	r6, r9
 8018d4a:	9b01      	ldr	r3, [sp, #4]
 8018d4c:	4884      	ldr	r0, [pc, #528]	; (8018f60 <SFXLivingStringFrame+0x320>)
 8018d4e:	4631      	mov	r1, r6
 8018d50:	eb03 050a 	add.w	r5, r3, sl
 8018d54:	f00b fe5c 	bl	8024a10 <tSimplePoly_getPitch>
 8018d58:	ee07 0a90 	vmov	s15, r0
 8018d5c:	ed98 0a02 	vldr	s0, [r8, #8]
 8018d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8018d64:	4b7f      	ldr	r3, [pc, #508]	; (8018f64 <SFXLivingStringFrame+0x324>)
 8018d66:	7818      	ldrb	r0, [r3, #0]
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8018d68:	ee37 7a00 	vadd.f32	s14, s14, s0
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8018d6c:	4b7e      	ldr	r3, [pc, #504]	; (8018f68 <SFXLivingStringFrame+0x328>)
 8018d6e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8018d72:	ee17 1a90 	vmov	r1, s15
 8018d76:	1a09      	subs	r1, r1, r0
 8018d78:	fb83 3c01 	smull	r3, ip, r3, r1
 8018d7c:	17c8      	asrs	r0, r1, #31
            float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8018d7e:	4b7b      	ldr	r3, [pc, #492]	; (8018f6c <SFXLivingStringFrame+0x32c>)
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8018d80:	ebc0 006c 	rsb	r0, r0, ip, asr #1
 8018d84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018d88:	eba1 0080 	sub.w	r0, r1, r0, lsl #2
 8018d8c:	ee07 0a90 	vmov	s15, r0
 8018d90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8018d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018d98:	ee17 1a90 	vmov	r1, s15
 8018d9c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8018da0:	ed91 0a00 	vldr	s0, [r1]
            freq[voice] = LEAF_midiToFrequency(tunedNote);
 8018da4:	ee37 0a00 	vadd.f32	s0, s14, s0
 8018da8:	f00b f898 	bl	8023edc <LEAF_midiToFrequency>
                        tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 8018dac:	eef0 6a48 	vmov.f32	s13, s16
 8018db0:	ecb7 7a01 	vldmia	r7!, {s14}
 8018db4:	4628      	mov	r0, r5
 8018db6:	edd4 7a01 	vldr	s15, [r4, #4]
            freq[voice] = LEAF_midiToFrequency(tunedNote);
 8018dba:	ecab 0a01 	vstmia	fp!, {s0}
                        tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 8018dbe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018dc2:	ee26 0a80 	vmul.f32	s0, s13, s0
 8018dc6:	f00c f953 	bl	8025070 <tComplexLivingString_setFreq>
                        tComplexLivingString_setDecay(&theString[i], (displayValues[2] * 0.015f) + 0.995f);
 8018dca:	eeb0 0a68 	vmov.f32	s0, s17
 8018dce:	edd4 7a02 	vldr	s15, [r4, #8]
 8018dd2:	4628      	mov	r0, r5
 8018dd4:	eea7 0a89 	vfma.f32	s0, s15, s18
 8018dd8:	f00c f9b2 	bl	8025140 <tComplexLivingString_setDecay>
                        tComplexLivingString_setDampFreq(&theString[i], displayValues[3]);
 8018ddc:	4628      	mov	r0, r5
 8018dde:	ed94 0a03 	vldr	s0, [r4, #12]
 8018de2:	f00c f98d 	bl	8025100 <tComplexLivingString_setDampFreq>
                        tComplexLivingString_setPickPos(&theString[i], displayValues[4]);
 8018de6:	4628      	mov	r0, r5
 8018de8:	ed94 0a04 	vldr	s0, [r4, #16]
 8018dec:	f00c f958 	bl	80250a0 <tComplexLivingString_setPickPos>
                        tComplexLivingString_setPrepPos(&theString[i], displayValues[5]);
 8018df0:	4628      	mov	r0, r5
 8018df2:	ed94 0a05 	vldr	s0, [r4, #20]
 8018df6:	f00c f963 	bl	80250c0 <tComplexLivingString_setPrepPos>
                        tComplexLivingString_setPrepIndex(&theString[i], displayValues[6]);
 8018dfa:	ed94 0a06 	vldr	s0, [r4, #24]
 8018dfe:	4628      	mov	r0, r5
 8018e00:	f00c f970 	bl	80250e4 <tComplexLivingString_setPrepIndex>
                        if (tSimplePoly_isOn(&poly, i))
 8018e04:	4631      	mov	r1, r6
 8018e06:	4856      	ldr	r0, [pc, #344]	; (8018f60 <SFXLivingStringFrame+0x320>)
 8018e08:	f00b fe14 	bl	8024a34 <tSimplePoly_isOn>
 8018e0c:	9b00      	ldr	r3, [sp, #0]
                            tExpSmooth_setDest(&stringGains[i], 1.0f);
 8018e0e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8018e12:	eb03 010a 	add.w	r1, r3, sl
                        if (tSimplePoly_isOn(&poly, i))
 8018e16:	b908      	cbnz	r0, 8018e1c <SFXLivingStringFrame+0x1dc>
                            tExpSmooth_setDest(&stringGains[i], displayValues[7]);
 8018e18:	ed94 0a07 	vldr	s0, [r4, #28]
                    for (int i = 0; i < NUM_STRINGS; i++)
 8018e1c:	f109 0901 	add.w	r9, r9, #1
                            tExpSmooth_setDest(&stringGains[i], displayValues[7]);
 8018e20:	4608      	mov	r0, r1
 8018e22:	f009 fadd 	bl	80223e0 <tExpSmooth_setDest>
 8018e26:	f10a 0a04 	add.w	sl, sl, #4
                    for (int i = 0; i < NUM_STRINGS; i++)
 8018e2a:	f1b9 0f06 	cmp.w	r9, #6
 8018e2e:	d18a      	bne.n	8018d46 <SFXLivingStringFrame+0x106>
        }
 8018e30:	b003      	add	sp, #12
 8018e32:	ecbd 8b04 	vpop	{d8-d9}
 8018e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e3a:	4f46      	ldr	r7, [pc, #280]	; (8018f54 <SFXLivingStringFrame+0x314>)
                if (!ignoreFreqKnobs)
 8018e3c:	4656      	mov	r6, sl
 8018e3e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8018f78 <SFXLivingStringFrame+0x338>
                        tComplexLivingString_setDecay(&theString[i], (displayValues[2] * 0.015f) + 0.995f);
 8018e42:	ed9f 9a45 	vldr	s18, [pc, #276]	; 8018f58 <SFXLivingStringFrame+0x318>
 8018e46:	eddf 8a45 	vldr	s17, [pc, #276]	; 8018f5c <SFXLivingStringFrame+0x31c>
                        float freqVal = displayValues[0] * (i+1);
 8018e4a:	f10a 0a01 	add.w	sl, sl, #1
                        tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 8018e4e:	eeb0 0a48 	vmov.f32	s0, s16
 8018e52:	ecb7 6a01 	vldmia	r7!, {s12}
 8018e56:	eb08 0506 	add.w	r5, r8, r6
 8018e5a:	edd4 6a01 	vldr	s13, [r4, #4]
                        float freqVal = displayValues[0] * (i+1);
 8018e5e:	ee07 aa90 	vmov	s15, sl
                        tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 8018e62:	4628      	mov	r0, r5
                        float freqVal = displayValues[0] * (i+1);
 8018e64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018e68:	edd4 7a00 	vldr	s15, [r4]
                        tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 8018e6c:	eea6 0a26 	vfma.f32	s0, s12, s13
                        float freqVal = displayValues[0] * (i+1);
 8018e70:	ee67 7a27 	vmul.f32	s15, s14, s15
                        tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 8018e74:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018e78:	f00c f8fa 	bl	8025070 <tComplexLivingString_setFreq>
                        tComplexLivingString_setDecay(&theString[i], (displayValues[2] * 0.015f) + 0.995f);
 8018e7c:	eeb0 0a68 	vmov.f32	s0, s17
 8018e80:	edd4 7a02 	vldr	s15, [r4, #8]
 8018e84:	4628      	mov	r0, r5
 8018e86:	eea7 0a89 	vfma.f32	s0, s15, s18
 8018e8a:	f00c f959 	bl	8025140 <tComplexLivingString_setDecay>
                        tComplexLivingString_setDampFreq(&theString[i], displayValues[3]);
 8018e8e:	4628      	mov	r0, r5
 8018e90:	ed94 0a03 	vldr	s0, [r4, #12]
 8018e94:	f00c f934 	bl	8025100 <tComplexLivingString_setDampFreq>
                        tComplexLivingString_setPickPos(&theString[i], displayValues[4]);
 8018e98:	4628      	mov	r0, r5
 8018e9a:	ed94 0a04 	vldr	s0, [r4, #16]
 8018e9e:	f00c f8ff 	bl	80250a0 <tComplexLivingString_setPickPos>
                        tComplexLivingString_setPrepPos(&theString[i], displayValues[5]);
 8018ea2:	4628      	mov	r0, r5
 8018ea4:	ed94 0a05 	vldr	s0, [r4, #20]
 8018ea8:	f00c f90a 	bl	80250c0 <tComplexLivingString_setPrepPos>
                        tComplexLivingString_setPrepIndex(&theString[i], displayValues[6]);
 8018eac:	4628      	mov	r0, r5
 8018eae:	ed94 0a06 	vldr	s0, [r4, #24]
 8018eb2:	f00c f917 	bl	80250e4 <tComplexLivingString_setPrepIndex>
                        tExpSmooth_setDest(&stringGains[i], 1.0f);
 8018eb6:	eb09 0006 	add.w	r0, r9, r6
 8018eba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8018ebe:	3604      	adds	r6, #4
 8018ec0:	f009 fa8e 	bl	80223e0 <tExpSmooth_setDest>
                    for (int i = 0; i < NUM_STRINGS; i++)
 8018ec4:	f1ba 0f06 	cmp.w	sl, #6
 8018ec8:	d1bf      	bne.n	8018e4a <SFXLivingStringFrame+0x20a>
        }
 8018eca:	b003      	add	sp, #12
 8018ecc:	ecbd 8b04 	vpop	{d8-d9}
 8018ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                levMode = !levMode;
 8018ed4:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8018ed8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8018f70 <SFXLivingStringFrame+0x330>
 8018edc:	fab1 f181 	clz	r1, r1
 8018ee0:	4644      	mov	r4, r8
 8018ee2:	f108 0618 	add.w	r6, r8, #24
 8018ee6:	0949      	lsrs	r1, r1, #5
 8018ee8:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8018eec:	e001      	b.n	8018ef2 <SFXLivingStringFrame+0x2b2>
 8018eee:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
                    tComplexLivingString_setLevMode(&theString[i], levMode);
 8018ef2:	4620      	mov	r0, r4
 8018ef4:	3404      	adds	r4, #4
 8018ef6:	f00c f93b 	bl	8025170 <tComplexLivingString_setLevMode>
                for (int i = 0; i < NUM_STRINGS; i++)
 8018efa:	42b4      	cmp	r4, r6
 8018efc:	d1f7      	bne.n	8018eee <SFXLivingStringFrame+0x2ae>
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8018efe:	2300      	movs	r3, #0
                setLED_C(levMode);
 8018f00:	f897 00e4 	ldrb.w	r0, [r7, #228]	; 0xe4
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8018f04:	772b      	strb	r3, [r5, #28]
                setLED_C(levMode);
 8018f06:	f7fa fd77 	bl	80139f8 <setLED_C>
            if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 8018f0a:	7e2b      	ldrb	r3, [r5, #24]
 8018f0c:	2b01      	cmp	r3, #1
 8018f0e:	f47f aeac 	bne.w	8018c6a <SFXLivingStringFrame+0x2a>
                independentStrings = !independentStrings;
 8018f12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8018f16:	2200      	movs	r2, #0
                independentStrings = !independentStrings;
 8018f18:	fab3 f383 	clz	r3, r3
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8018f1c:	762a      	strb	r2, [r5, #24]
                independentStrings = !independentStrings;
 8018f1e:	095b      	lsrs	r3, r3, #5
                setLED_B(independentStrings);
 8018f20:	4618      	mov	r0, r3
                independentStrings = !independentStrings;
 8018f22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                setLED_B(independentStrings);
 8018f26:	f7fa fd59 	bl	80139dc <setLED_B>
 8018f2a:	e69e      	b.n	8018c6a <SFXLivingStringFrame+0x2a>
 8018f2c:	f3af 8000 	nop.w
 8018f30:	eb851eb8 	.word	0xeb851eb8
 8018f34:	3fdeb851 	.word	0x3fdeb851
 8018f38:	40000000 	.word	0x40000000
 8018f3c:	3f947ae1 	.word	0x3f947ae1
 8018f40:	20018724 	.word	0x20018724
 8018f44:	20000548 	.word	0x20000548
 8018f48:	42b40000 	.word	0x42b40000
 8018f4c:	200187d4 	.word	0x200187d4
 8018f50:	43020000 	.word	0x43020000
 8018f54:	200028a8 	.word	0x200028a8
 8018f58:	3c75c28f 	.word	0x3c75c28f
 8018f5c:	3f7eb852 	.word	0x3f7eb852
 8018f60:	20017560 	.word	0x20017560
 8018f64:	2000065c 	.word	0x2000065c
 8018f68:	2aaaaaab 	.word	0x2aaaaaab
 8018f6c:	20000664 	.word	0x20000664
 8018f70:	200026b0 	.word	0x200026b0
 8018f74:	200032c8 	.word	0x200032c8
 8018f78:	20017068 	.word	0x20017068
 8018f7c:	2000347c 	.word	0x2000347c
                displayValues[10] = LEAF_midiToFrequency((presetKnobValues[LivingString][10] * 90.0f)); //freq
 8018f80:	ed9b 0a0a 	vldr	s0, [fp, #40]	; 0x28
                displayValues[14] = LEAF_midiToFrequency((presetKnobValues[LivingString][14] * 90.0f)); //freq
 8018f84:	2600      	movs	r6, #0
 8018f86:	4d41      	ldr	r5, [pc, #260]	; (801908c <SFXLivingStringFrame+0x44c>)
 8018f88:	f104 0a24 	add.w	sl, r4, #36	; 0x24
                displayValues[10] = LEAF_midiToFrequency((presetKnobValues[LivingString][10] * 90.0f)); //freq
 8018f8c:	ee20 0a28 	vmul.f32	s0, s0, s17
                for (int i = 0; i < NUM_STRINGS; i++)
 8018f90:	4637      	mov	r7, r6
                displayValues[10] = LEAF_midiToFrequency((presetKnobValues[LivingString][10] * 90.0f)); //freq
 8018f92:	f00a ffa3 	bl	8023edc <LEAF_midiToFrequency>
                displayValues[11] = LEAF_midiToFrequency((presetKnobValues[LivingString][11] * 90.0f)); //freq
 8018f96:	eddb 7a0b 	vldr	s15, [fp, #44]	; 0x2c
                displayValues[10] = LEAF_midiToFrequency((presetKnobValues[LivingString][10] * 90.0f)); //freq
 8018f9a:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
                displayValues[11] = LEAF_midiToFrequency((presetKnobValues[LivingString][11] * 90.0f)); //freq
 8018f9e:	ee27 0aa8 	vmul.f32	s0, s15, s17
                    tComplexLivingString_setDecay(&theString[i], (displayValues[2] * 0.015f) + 0.995f);
 8018fa2:	eddf 9a3b 	vldr	s19, [pc, #236]	; 8019090 <SFXLivingStringFrame+0x450>
                displayValues[11] = LEAF_midiToFrequency((presetKnobValues[LivingString][11] * 90.0f)); //freq
 8018fa6:	f00a ff99 	bl	8023edc <LEAF_midiToFrequency>
                displayValues[12] = LEAF_midiToFrequency((presetKnobValues[LivingString][12] * 90.0f)); //freq
 8018faa:	eddb 7a0c 	vldr	s15, [fp, #48]	; 0x30
                displayValues[11] = LEAF_midiToFrequency((presetKnobValues[LivingString][11] * 90.0f)); //freq
 8018fae:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
                displayValues[12] = LEAF_midiToFrequency((presetKnobValues[LivingString][12] * 90.0f)); //freq
 8018fb2:	ee27 0aa8 	vmul.f32	s0, s15, s17
                    tComplexLivingString_setDecay(&theString[i], (displayValues[2] * 0.015f) + 0.995f);
 8018fb6:	ed9f 9a37 	vldr	s18, [pc, #220]	; 8019094 <SFXLivingStringFrame+0x454>
                displayValues[12] = LEAF_midiToFrequency((presetKnobValues[LivingString][12] * 90.0f)); //freq
 8018fba:	f00a ff8f 	bl	8023edc <LEAF_midiToFrequency>
                displayValues[13] = LEAF_midiToFrequency((presetKnobValues[LivingString][13] * 90.0f)); //freq
 8018fbe:	eddb 7a0d 	vldr	s15, [fp, #52]	; 0x34
                displayValues[12] = LEAF_midiToFrequency((presetKnobValues[LivingString][12] * 90.0f)); //freq
 8018fc2:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
                displayValues[13] = LEAF_midiToFrequency((presetKnobValues[LivingString][13] * 90.0f)); //freq
 8018fc6:	ee27 0aa8 	vmul.f32	s0, s15, s17
 8018fca:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8019098 <SFXLivingStringFrame+0x458>
 8018fce:	f00a ff85 	bl	8023edc <LEAF_midiToFrequency>
                displayValues[14] = LEAF_midiToFrequency((presetKnobValues[LivingString][14] * 90.0f)); //freq
 8018fd2:	eddb 7a0e 	vldr	s15, [fp, #56]	; 0x38
 8018fd6:	46ab      	mov	fp, r5
                displayValues[13] = LEAF_midiToFrequency((presetKnobValues[LivingString][13] * 90.0f)); //freq
 8018fd8:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
                displayValues[14] = LEAF_midiToFrequency((presetKnobValues[LivingString][14] * 90.0f)); //freq
 8018fdc:	ee27 0aa8 	vmul.f32	s0, s15, s17
 8018fe0:	f00a ff7c 	bl	8023edc <LEAF_midiToFrequency>
 8018fe4:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
                    float freqVal = i == 0 ? displayValues[0] : displayValues[9+i];
 8018fe8:	2f00      	cmp	r7, #0
 8018fea:	d04b      	beq.n	8019084 <SFXLivingStringFrame+0x444>
 8018fec:	edda 7a00 	vldr	s15, [sl]
                    tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 8018ff0:	eeb0 0a48 	vmov.f32	s0, s16
 8018ff4:	ecfb 6a01 	vldmia	fp!, {s13}
 8018ff8:	ed94 7a01 	vldr	s14, [r4, #4]
 8018ffc:	eb08 0506 	add.w	r5, r8, r6
                for (int i = 0; i < NUM_STRINGS; i++)
 8019000:	3701      	adds	r7, #1
 8019002:	f10a 0a04 	add.w	sl, sl, #4
                    tComplexLivingString_setFreq(&theString[i], (1.0f + (myDetune[i] * displayValues[1])) * freqVal);
 8019006:	eea6 0a87 	vfma.f32	s0, s13, s14
 801900a:	4628      	mov	r0, r5
 801900c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019010:	f00c f82e 	bl	8025070 <tComplexLivingString_setFreq>
                    tComplexLivingString_setDecay(&theString[i], (displayValues[2] * 0.015f) + 0.995f);
 8019014:	eeb0 0a49 	vmov.f32	s0, s18
 8019018:	edd4 7a02 	vldr	s15, [r4, #8]
 801901c:	4628      	mov	r0, r5
 801901e:	eea7 0aa9 	vfma.f32	s0, s15, s19
 8019022:	f00c f88d 	bl	8025140 <tComplexLivingString_setDecay>
                    tComplexLivingString_setDampFreq(&theString[i], displayValues[3]);
 8019026:	4628      	mov	r0, r5
 8019028:	ed94 0a03 	vldr	s0, [r4, #12]
 801902c:	f00c f868 	bl	8025100 <tComplexLivingString_setDampFreq>
                    tComplexLivingString_setPickPos(&theString[i], displayValues[4]);
 8019030:	4628      	mov	r0, r5
 8019032:	ed94 0a04 	vldr	s0, [r4, #16]
 8019036:	f00c f833 	bl	80250a0 <tComplexLivingString_setPickPos>
                    tComplexLivingString_setPrepPos(&theString[i], displayValues[5]);
 801903a:	4628      	mov	r0, r5
 801903c:	ed94 0a05 	vldr	s0, [r4, #20]
 8019040:	f00c f83e 	bl	80250c0 <tComplexLivingString_setPrepPos>
                    tComplexLivingString_setPrepIndex(&theString[i], displayValues[6]);
 8019044:	4628      	mov	r0, r5
 8019046:	ed94 0a06 	vldr	s0, [r4, #24]
 801904a:	f00c f84b 	bl	80250e4 <tComplexLivingString_setPrepIndex>
                    tExpSmooth_setDest(&stringGains[i], 1.0f);
 801904e:	eb09 0006 	add.w	r0, r9, r6
 8019052:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019056:	3604      	adds	r6, #4
 8019058:	f009 f9c2 	bl	80223e0 <tExpSmooth_setDest>
                for (int i = 0; i < NUM_STRINGS; i++)
 801905c:	2f06      	cmp	r7, #6
 801905e:	d1c3      	bne.n	8018fe8 <SFXLivingStringFrame+0x3a8>
        }
 8019060:	b003      	add	sp, #12
 8019062:	ecbd 8b04 	vpop	{d8-d9}
 8019066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                ignoreFreqKnobs = !ignoreFreqKnobs;
 801906a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 801906e:	2200      	movs	r2, #0
                ignoreFreqKnobs = !ignoreFreqKnobs;
 8019070:	fab3 f383 	clz	r3, r3
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8019074:	752a      	strb	r2, [r5, #20]
                ignoreFreqKnobs = !ignoreFreqKnobs;
 8019076:	095b      	lsrs	r3, r3, #5
                setLED_A(ignoreFreqKnobs);
 8019078:	4618      	mov	r0, r3
                ignoreFreqKnobs = !ignoreFreqKnobs;
 801907a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                setLED_A(ignoreFreqKnobs);
 801907e:	f7fa fc9f 	bl	80139c0 <setLED_A>
 8019082:	e5e8      	b.n	8018c56 <SFXLivingStringFrame+0x16>
                    float freqVal = i == 0 ? displayValues[0] : displayValues[9+i];
 8019084:	edd4 7a00 	vldr	s15, [r4]
 8019088:	e7b2      	b.n	8018ff0 <SFXLivingStringFrame+0x3b0>
 801908a:	bf00      	nop
 801908c:	200028a8 	.word	0x200028a8
 8019090:	3c75c28f 	.word	0x3c75c28f
 8019094:	3f7eb852 	.word	0x3f7eb852
 8019098:	20017068 	.word	0x20017068

0801909c <SFXLivingStringTick>:
        {
 801909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801909e:	4605      	mov	r5, r0
 80190a0:	2400      	movs	r4, #0
 80190a2:	4f10      	ldr	r7, [pc, #64]	; (80190e4 <SFXLivingStringTick+0x48>)
 80190a4:	4e10      	ldr	r6, [pc, #64]	; (80190e8 <SFXLivingStringTick+0x4c>)
 80190a6:	ed2d 8b02 	vpush	{d8}
            float sample = 0.0f;
 80190aa:	ed9f 8a10 	vldr	s16, [pc, #64]	; 80190ec <SFXLivingStringTick+0x50>
                float tick = tComplexLivingString_tick(&theString[i], input[1]);
 80190ae:	1938      	adds	r0, r7, r4
 80190b0:	ed95 0a01 	vldr	s0, [r5, #4]
 80190b4:	f00c f872 	bl	802519c <tComplexLivingString_tick>
                sample += tick * tExpSmooth_tick(&stringGains[i]);
 80190b8:	1930      	adds	r0, r6, r4
 80190ba:	3404      	adds	r4, #4
                float tick = tComplexLivingString_tick(&theString[i], input[1]);
 80190bc:	eef0 8a40 	vmov.f32	s17, s0
                sample += tick * tExpSmooth_tick(&stringGains[i]);
 80190c0:	f009 f998 	bl	80223f4 <tExpSmooth_tick>
            for (int i = 0; i < NUM_STRINGS; i++)
 80190c4:	2c18      	cmp	r4, #24
                sample += tick * tExpSmooth_tick(&stringGains[i]);
 80190c6:	eea0 8a28 	vfma.f32	s16, s0, s17
            for (int i = 0; i < NUM_STRINGS; i++)
 80190ca:	d1f0      	bne.n	80190ae <SFXLivingStringTick+0x12>
            sample *= 0.1625f;
 80190cc:	eddf 7a08 	vldr	s15, [pc, #32]	; 80190f0 <SFXLivingStringTick+0x54>
 80190d0:	ee28 8a27 	vmul.f32	s16, s16, s15
            input[0] = sample;
 80190d4:	ed85 8a00 	vstr	s16, [r5]
            input[1] = sample;
 80190d8:	ed85 8a01 	vstr	s16, [r5, #4]
        }
 80190dc:	ecbd 8b02 	vpop	{d8}
 80190e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190e2:	bf00      	nop
 80190e4:	200026b0 	.word	0x200026b0
 80190e8:	20017068 	.word	0x20017068
 80190ec:	00000000 	.word	0x00000000
 80190f0:	3e266666 	.word	0x3e266666

080190f4 <SFXLivingStringFree>:
        {
 80190f4:	b570      	push	{r4, r5, r6, lr}
 80190f6:	2400      	movs	r4, #0
 80190f8:	4e05      	ldr	r6, [pc, #20]	; (8019110 <SFXLivingStringFree+0x1c>)
 80190fa:	4d06      	ldr	r5, [pc, #24]	; (8019114 <SFXLivingStringFree+0x20>)
                tComplexLivingString_free(&theString[i]);
 80190fc:	1930      	adds	r0, r6, r4
 80190fe:	f00b ff6b 	bl	8024fd8 <tComplexLivingString_free>
                tExpSmooth_free(&stringGains[i]);
 8019102:	1928      	adds	r0, r5, r4
 8019104:	3404      	adds	r4, #4
 8019106:	f009 f955 	bl	80223b4 <tExpSmooth_free>
            for (int i = 0; i < NUM_STRINGS; i++)
 801910a:	2c18      	cmp	r4, #24
 801910c:	d1f6      	bne.n	80190fc <SFXLivingStringFree+0x8>
        }
 801910e:	bd70      	pop	{r4, r5, r6, pc}
 8019110:	200026b0 	.word	0x200026b0
 8019114:	20017068 	.word	0x20017068

08019118 <SFXLivingStringSynthAlloc>:
        {
 8019118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            levMode = 1;
 801911c:	2201      	movs	r2, #1
            leaf.clearOnAllocation = 0;
 801911e:	2300      	movs	r3, #0
 8019120:	f8df b154 	ldr.w	fp, [pc, #340]	; 8019278 <SFXLivingStringSynthAlloc+0x160>
            tSimplePoly_setNumVoices(&poly, NUM_STRINGS);
 8019124:	2106      	movs	r1, #6
            levMode = 1;
 8019126:	4e42      	ldr	r6, [pc, #264]	; (8019230 <SFXLivingStringSynthAlloc+0x118>)
            tSimplePoly_setNumVoices(&poly, NUM_STRINGS);
 8019128:	461c      	mov	r4, r3
 801912a:	f8df a150 	ldr.w	sl, [pc, #336]	; 801927c <SFXLivingStringSynthAlloc+0x164>
 801912e:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8019280 <SFXLivingStringSynthAlloc+0x168>
 8019132:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8019284 <SFXLivingStringSynthAlloc+0x16c>
 8019136:	4f3f      	ldr	r7, [pc, #252]	; (8019234 <SFXLivingStringSynthAlloc+0x11c>)
                tSlide_initToPool(&stringOutEnvs[i], 10.0f, 1000.0f, &smallPool);
 8019138:	4d3f      	ldr	r5, [pc, #252]	; (8019238 <SFXLivingStringSynthAlloc+0x120>)
            tSimplePoly_setNumVoices(&poly, NUM_STRINGS);
 801913a:	4840      	ldr	r0, [pc, #256]	; (801923c <SFXLivingStringSynthAlloc+0x124>)
            leaf.clearOnAllocation = 0;
 801913c:	f8cb 3014 	str.w	r3, [fp, #20]
            levMode = 1;
 8019140:	f8c6 20e4 	str.w	r2, [r6, #228]	; 0xe4
        {
 8019144:	ed2d 8b06 	vpush	{d8-d10}
                tComplexLivingString_init(&theString[i], 440.f, 0.2f, 0.3f, 0.f, 9000.f, 1.0f, 0.0f, 0.01f, 0.125f, levModeStr);
 8019148:	ed9f aa3d 	vldr	s20, [pc, #244]	; 8019240 <SFXLivingStringSynthAlloc+0x128>
            tSimplePoly_setNumVoices(&poly, NUM_STRINGS);
 801914c:	f00b fc3c 	bl	80249c8 <tSimplePoly_setNumVoices>
                tComplexLivingString_init(&theString[i], 440.f, 0.2f, 0.3f, 0.f, 9000.f, 1.0f, 0.0f, 0.01f, 0.125f, levModeStr);
 8019150:	eddf 8a3c 	vldr	s17, [pc, #240]	; 8019244 <SFXLivingStringSynthAlloc+0x12c>
 8019154:	eddf 9a3c 	vldr	s19, [pc, #240]	; 8019248 <SFXLivingStringSynthAlloc+0x130>
 8019158:	ed9f 9a3c 	vldr	s18, [pc, #240]	; 801924c <SFXLivingStringSynthAlloc+0x134>
                tSlide_initToPool(&stringOutEnvs[i], 10.0f, 1000.0f, &smallPool);
 801915c:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 8019250 <SFXLivingStringSynthAlloc+0x138>
                tComplexLivingString_init(&theString[i], 440.f, 0.2f, 0.3f, 0.f, 9000.f, 1.0f, 0.0f, 0.01f, 0.125f, levModeStr);
 8019160:	eeb4 4a00 	vmov.f32	s8, #64	; 0x3e000000  0.125
 8019164:	eddf 1a37 	vldr	s3, [pc, #220]	; 8019244 <SFXLivingStringSynthAlloc+0x12c>
 8019168:	eef0 3a4a 	vmov.f32	s7, s20
 801916c:	eb0a 0004 	add.w	r0, sl, r4
 8019170:	eeb0 3a68 	vmov.f32	s6, s17
 8019174:	f8d6 10f0 	ldr.w	r1, [r6, #240]	; 0xf0
 8019178:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 801917c:	eddf 0a35 	vldr	s1, [pc, #212]	; 8019254 <SFXLivingStringSynthAlloc+0x13c>
 8019180:	eeb0 2a69 	vmov.f32	s4, s19
 8019184:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8019258 <SFXLivingStringSynthAlloc+0x140>
 8019188:	eeb0 1a49 	vmov.f32	s2, s18
 801918c:	f00b ff1e 	bl	8024fcc <tComplexLivingString_init>
                tSlide_initToPool(&stringOutEnvs[i], 10.0f, 1000.0f, &smallPool);
 8019190:	eb09 0004 	add.w	r0, r9, r4
 8019194:	4629      	mov	r1, r5
 8019196:	eef0 0a48 	vmov.f32	s1, s16
 801919a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801919e:	f009 f939 	bl	8022414 <tSlide_initToPool>
                tSlide_initToPool(&stringInEnvs[i], 12.0f, 1000.0f, &smallPool);
 80191a2:	eb08 0004 	add.w	r0, r8, r4
 80191a6:	4629      	mov	r1, r5
 80191a8:	eef0 0a48 	vmov.f32	s1, s16
 80191ac:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 80191b0:	f009 f930 	bl	8022414 <tSlide_initToPool>
                tADSR4_initToPool(&pluckEnvs[i], 4.0f, 70.0f, 0.0f, 5.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &smallPool);
 80191b4:	1938      	adds	r0, r7, r4
 80191b6:	3404      	adds	r4, #4
 80191b8:	462b      	mov	r3, r5
 80191ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80191be:	4927      	ldr	r1, [pc, #156]	; (801925c <SFXLivingStringSynthAlloc+0x144>)
 80191c0:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80191c4:	eddf 0a26 	vldr	s1, [pc, #152]	; 8019260 <SFXLivingStringSynthAlloc+0x148>
 80191c8:	eeb0 1a68 	vmov.f32	s2, s17
 80191cc:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80191d0:	f008 fd12 	bl	8021bf8 <tADSR4_initToPool>
            for (int i = 0; i < NUM_STRINGS; i++)
 80191d4:	2c18      	cmp	r4, #24
 80191d6:	d1c3      	bne.n	8019160 <SFXLivingStringSynthAlloc+0x48>
            tVZFilter_initToPool(&pluckFilt, BandpassPeak, 2000.0f, 4.0f, &smallPool);
 80191d8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80191dc:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8019264 <SFXLivingStringSynthAlloc+0x14c>
 80191e0:	4a15      	ldr	r2, [pc, #84]	; (8019238 <SFXLivingStringSynthAlloc+0x120>)
 80191e2:	2103      	movs	r1, #3
 80191e4:	4820      	ldr	r0, [pc, #128]	; (8019268 <SFXLivingStringSynthAlloc+0x150>)
            setLED_A(numVoices == 1);
 80191e6:	4c21      	ldr	r4, [pc, #132]	; (801926c <SFXLivingStringSynthAlloc+0x154>)
            tVZFilter_initToPool(&pluckFilt, BandpassPeak, 2000.0f, 4.0f, &smallPool);
 80191e8:	f009 fc4c 	bl	8022a84 <tVZFilter_initToPool>
            tNoise_initToPool(&stringPluckNoise, WhiteNoise, &smallPool);
 80191ec:	4a12      	ldr	r2, [pc, #72]	; (8019238 <SFXLivingStringSynthAlloc+0x120>)
 80191ee:	2100      	movs	r1, #0
 80191f0:	481f      	ldr	r0, [pc, #124]	; (8019270 <SFXLivingStringSynthAlloc+0x158>)
 80191f2:	f00b fd5d 	bl	8024cb0 <tNoise_initToPool>
            setLED_A(numVoices == 1);
 80191f6:	7820      	ldrb	r0, [r4, #0]
 80191f8:	f1a0 0001 	sub.w	r0, r0, #1
 80191fc:	fab0 f080 	clz	r0, r0
 8019200:	0940      	lsrs	r0, r0, #5
 8019202:	f7fa fbdd 	bl	80139c0 <setLED_A>
            setLED_B(voicePluck);
 8019206:	f896 00f4 	ldrb.w	r0, [r6, #244]	; 0xf4
 801920a:	f7fa fbe7 	bl	80139dc <setLED_B>
            setLED_C(levModeStr);
 801920e:	f896 00f0 	ldrb.w	r0, [r6, #240]	; 0xf0
 8019212:	f7fa fbf1 	bl	80139f8 <setLED_C>
            samplesPerMs = leaf.sampleRate / 1000.0f;
 8019216:	eddb 7a00 	vldr	s15, [fp]
 801921a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8019274 <SFXLivingStringSynthAlloc+0x15c>
 801921e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019222:	edc4 7a43 	vstr	s15, [r4, #268]	; 0x10c
        }
 8019226:	ecbd 8b06 	vpop	{d8-d10}
 801922a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801922e:	bf00      	nop
 8019230:	20000548 	.word	0x20000548
 8019234:	20017448 	.word	0x20017448
 8019238:	20018338 	.word	0x20018338
 801923c:	20017560 	.word	0x20017560
 8019240:	3c23d70a 	.word	0x3c23d70a
 8019244:	00000000 	.word	0x00000000
 8019248:	460ca000 	.word	0x460ca000
 801924c:	3e99999a 	.word	0x3e99999a
 8019250:	447a0000 	.word	0x447a0000
 8019254:	3e4ccccd 	.word	0x3e4ccccd
 8019258:	43dc0000 	.word	0x43dc0000
 801925c:	2001797c 	.word	0x2001797c
 8019260:	428c0000 	.word	0x428c0000
 8019264:	44fa0000 	.word	0x44fa0000
 8019268:	200183ac 	.word	0x200183ac
 801926c:	20000040 	.word	0x20000040
 8019270:	20002984 	.word	0x20002984
 8019274:	3a83126f 	.word	0x3a83126f
 8019278:	200194e0 	.word	0x200194e0
 801927c:	200026b0 	.word	0x200026b0
 8019280:	20017634 	.word	0x20017634
 8019284:	200176fc 	.word	0x200176fc

08019288 <SFXLivingStringSynthFrame>:
        {
 8019288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 801928c:	4dc2      	ldr	r5, [pc, #776]	; (8019598 <SFXLivingStringSynthFrame+0x310>)
                numVoices = (numVoices > 1) ? 1 : NUM_STRINGS;
 801928e:	4fc3      	ldr	r7, [pc, #780]	; (801959c <SFXLivingStringSynthFrame+0x314>)
        {
 8019290:	ed2d 8b02 	vpush	{d8}
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8019294:	7d2b      	ldrb	r3, [r5, #20]
        {
 8019296:	b083      	sub	sp, #12
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8019298:	2b01      	cmp	r3, #1
 801929a:	d112      	bne.n	80192c2 <SFXLivingStringSynthFrame+0x3a>
                numVoices = (numVoices > 1) ? 1 : NUM_STRINGS;
 801929c:	783a      	ldrb	r2, [r7, #0]
                tSimplePoly_setNumVoices(&poly, numVoices);
 801929e:	48c0      	ldr	r0, [pc, #768]	; (80195a0 <SFXLivingStringSynthFrame+0x318>)
                numVoices = (numVoices > 1) ? 1 : NUM_STRINGS;
 80192a0:	2a01      	cmp	r2, #1
 80192a2:	bf98      	it	ls
 80192a4:	2306      	movls	r3, #6
                tSimplePoly_setNumVoices(&poly, numVoices);
 80192a6:	4619      	mov	r1, r3
                numVoices = (numVoices > 1) ? 1 : NUM_STRINGS;
 80192a8:	703b      	strb	r3, [r7, #0]
                tSimplePoly_setNumVoices(&poly, numVoices);
 80192aa:	f00b fb8d 	bl	80249c8 <tSimplePoly_setNumVoices>
                setLED_A(numVoices == 1);
 80192ae:	7838      	ldrb	r0, [r7, #0]
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 80192b0:	2300      	movs	r3, #0
                setLED_A(numVoices == 1);
 80192b2:	f1a0 0001 	sub.w	r0, r0, #1
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 80192b6:	752b      	strb	r3, [r5, #20]
                setLED_A(numVoices == 1);
 80192b8:	fab0 f080 	clz	r0, r0
 80192bc:	0940      	lsrs	r0, r0, #5
 80192be:	f7fa fb7f 	bl	80139c0 <setLED_A>
            if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 80192c2:	7e2b      	ldrb	r3, [r5, #24]
 80192c4:	2b01      	cmp	r3, #1
 80192c6:	f000 814b 	beq.w	8019560 <SFXLivingStringSynthFrame+0x2d8>
            if (buttonActionsSFX[ButtonC][ActionPress] == 1)
 80192ca:	7f2b      	ldrb	r3, [r5, #28]
 80192cc:	2b01      	cmp	r3, #1
 80192ce:	f000 812a 	beq.w	8019526 <SFXLivingStringSynthFrame+0x29e>
 80192d2:	f8df b314 	ldr.w	fp, [pc, #788]	; 80195e8 <SFXLivingStringSynthFrame+0x360>
            displayValues[0] = presetKnobValues[LivingStringSynth][0] * 10.0f; //pluck volume
 80192d6:	4db3      	ldr	r5, [pc, #716]	; (80195a4 <SFXLivingStringSynthFrame+0x31c>)
 80192d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
            displayValues[3] = faster_mtof((presetKnobValues[LivingStringSynth][3] * 119.0f)+20.0f); //lowpass
 80192dc:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80192e0:	eddf 6ab1 	vldr	s13, [pc, #708]	; 80195a8 <SFXLivingStringSynthFrame+0x320>
            displayValues[0] = presetKnobValues[LivingStringSynth][0] * 10.0f; //pluck volume
 80192e4:	462b      	mov	r3, r5
            displayValues[3] = faster_mtof((presetKnobValues[LivingStringSynth][3] * 119.0f)+20.0f); //lowpass
 80192e6:	ed95 6a03 	vldr	s12, [r5, #12]
            displayValues[0] = presetKnobValues[LivingStringSynth][0] * 10.0f; //pluck volume
 80192ea:	4cb0      	ldr	r4, [pc, #704]	; (80195ac <SFXLivingStringSynthFrame+0x324>)
            displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 80192ec:	2600      	movs	r6, #0
            displayValues[0] = presetKnobValues[LivingStringSynth][0] * 10.0f; //pluck volume
 80192ee:	ecf3 7a01 	vldmia	r3!, {s15}
            displayValues[3] = faster_mtof((presetKnobValues[LivingStringSynth][3] * 119.0f)+20.0f); //lowpass
 80192f2:	eea6 0a26 	vfma.f32	s0, s12, s13
                tComplexLivingString_setDecay(&theString[i], ((displayValues[2]  * 0.02f) + 0.98f));
 80192f6:	eddf 8aae 	vldr	s17, [pc, #696]	; 80195b0 <SFXLivingStringSynthFrame+0x328>
            displayValues[0] = presetKnobValues[LivingStringSynth][0] * 10.0f; //pluck volume
 80192fa:	ee67 7a87 	vmul.f32	s15, s15, s14
            displayValues[1] = presetKnobValues[LivingStringSynth][1]; //lowpass
 80192fe:	681a      	ldr	r2, [r3, #0]
            displayValues[2] = presetKnobValues[LivingStringSynth][2]; //decay
 8019300:	68ab      	ldr	r3, [r5, #8]
            displayValues[1] = presetKnobValues[LivingStringSynth][1]; //lowpass
 8019302:	6062      	str	r2, [r4, #4]
            displayValues[2] = presetKnobValues[LivingStringSynth][2]; //decay
 8019304:	60a3      	str	r3, [r4, #8]
            displayValues[0] = presetKnobValues[LivingStringSynth][0] * 10.0f; //pluck volume
 8019306:	edc4 7a00 	vstr	s15, [r4]
            displayValues[3] = faster_mtof((presetKnobValues[LivingStringSynth][3] * 119.0f)+20.0f); //lowpass
 801930a:	f00a fe6b 	bl	8023fe4 <faster_mtof>
            displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 801930e:	eeb2 7a01 	vmov.f32	s14, #33	; 0x41080000  8.5
 8019312:	edd5 6a06 	vldr	s13, [r5, #24]
 8019316:	eef9 7a01 	vmov.f32	s15, #145	; 0xc0880000 -4.250
            displayValues[4] = (presetKnobValues[LivingStringSynth][4] * 0.44) + 0.52f;//pick Pos
 801931a:	ed95 4a04 	vldr	s8, [r5, #16]
            displayValues[5] = (presetKnobValues[LivingStringSynth][5] * 0.44) + 0.04f;//prep Pos
 801931e:	ed95 5a05 	vldr	s10, [r5, #20]
            displayValues[4] = (presetKnobValues[LivingStringSynth][4] * 0.44) + 0.52f;//pick Pos
 8019322:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
            displayValues[3] = faster_mtof((presetKnobValues[LivingStringSynth][3] * 119.0f)+20.0f); //lowpass
 8019326:	ed84 0a03 	vstr	s0, [r4, #12]
            displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 801932a:	eee6 7a87 	vfma.f32	s15, s13, s14
                tComplexLivingString_setDecay(&theString[i], ((displayValues[2]  * 0.02f) + 0.98f));
 801932e:	ed9f 8aa1 	vldr	s16, [pc, #644]	; 80195b4 <SFXLivingStringSynthFrame+0x32c>
            displayValues[5] = (presetKnobValues[LivingStringSynth][5] * 0.44) + 0.04f;//prep Pos
 8019332:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
            displayValues[4] = (presetKnobValues[LivingStringSynth][4] * 0.44) + 0.52f;//pick Pos
 8019336:	ed9f 3b92 	vldr	d3, [pc, #584]	; 8019580 <SFXLivingStringSynthFrame+0x2f8>
 801933a:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8019588 <SFXLivingStringSynthFrame+0x300>
            displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 801933e:	eeb0 0a67 	vmov.f32	s0, s15
            displayValues[4] = (presetKnobValues[LivingStringSynth][4] * 0.44) + 0.52f;//pick Pos
 8019342:	eea4 6b03 	vfma.f64	d6, d4, d3
            displayValues[5] = (presetKnobValues[LivingStringSynth][5] * 0.44) + 0.04f;//prep Pos
 8019346:	ed9f 7b92 	vldr	d7, [pc, #584]	; 8019590 <SFXLivingStringSynthFrame+0x308>
 801934a:	eea5 7b03 	vfma.f64	d7, d5, d3
            displayValues[4] = (presetKnobValues[LivingStringSynth][4] * 0.44) + 0.52f;//pick Pos
 801934e:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8019352:	ed84 6a04 	vstr	s12, [r4, #16]
            displayValues[5] = (presetKnobValues[LivingStringSynth][5] * 0.44) + 0.04f;//prep Pos
 8019356:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 801935a:	ed84 7a05 	vstr	s14, [r4, #20]
            displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 801935e:	f00a fd23 	bl	8023da8 <LEAF_tanh>
            displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 8019362:	ed95 7a09 	vldr	s14, [r5, #36]	; 0x24
            displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 8019366:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 801936a:	edd7 5a40 	vldr	s11, [r7, #256]	; 0x100
            displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 801936e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
            displayValues[8] = presetKnobValues[LivingStringSynth][8];//feedback level
 8019372:	6a2a      	ldr	r2, [r5, #32]
            displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 8019374:	ee27 7a25 	vmul.f32	s14, s14, s11
 8019378:	4b8f      	ldr	r3, [pc, #572]	; (80195b8 <SFXLivingStringSynthFrame+0x330>)
            displayValues[8] = presetKnobValues[LivingStringSynth][8];//feedback level
 801937a:	6222      	str	r2, [r4, #32]
            displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 801937c:	ee30 0a27 	vadd.f32	s0, s0, s15
            displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 8019380:	eddf 6a8e 	vldr	s13, [pc, #568]	; 80195bc <SFXLivingStringSynthFrame+0x334>
 8019384:	eebd 7ac7 	vcvt.s32.f32	s14, s14
            displayValues[7] = presetKnobValues[LivingStringSynth][7];//let Ring
 8019388:	69e9      	ldr	r1, [r5, #28]
            displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 801938a:	ee20 0a06 	vmul.f32	s0, s0, s12
            displayValues[7] = presetKnobValues[LivingStringSynth][7];//let Ring
 801938e:	61e1      	str	r1, [r4, #28]
            displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 8019390:	ee17 2a10 	vmov	r2, s14
            displayValues[6] = ((LEAF_tanh((presetKnobValues[LivingStringSynth][6] * 8.5f) - 4.25f)) * 0.5f) + 0.5f;//prep Index
 8019394:	ed84 0a06 	vstr	s0, [r4, #24]
            displayValues[9] = expBuffer[(int)(presetKnobValues[LivingStringSynth][9] * expBufferSizeMinusOne)] * 8192.0f;//release time
 8019398:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801939c:	edd3 7a00 	vldr	s15, [r3]
 80193a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80193a4:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
                tComplexLivingString_setDecay(&theString[i], ((displayValues[2]  * 0.02f) + 0.98f));
 80193a8:	eeb0 0a48 	vmov.f32	s0, s16
 80193ac:	edd4 7a02 	vldr	s15, [r4, #8]
 80193b0:	eb0b 0506 	add.w	r5, fp, r6
 80193b4:	eea7 0aa8 	vfma.f32	s0, s15, s17
 80193b8:	4628      	mov	r0, r5
 80193ba:	f00b fec1 	bl	8025140 <tComplexLivingString_setDecay>
                tComplexLivingString_setDampFreq(&theString[i], displayValues[3]);
 80193be:	4628      	mov	r0, r5
 80193c0:	ed94 0a03 	vldr	s0, [r4, #12]
 80193c4:	f00b fe9c 	bl	8025100 <tComplexLivingString_setDampFreq>
                tComplexLivingString_setPickPos(&theString[i], displayValues[4]);
 80193c8:	4628      	mov	r0, r5
 80193ca:	ed94 0a04 	vldr	s0, [r4, #16]
 80193ce:	f00b fe67 	bl	80250a0 <tComplexLivingString_setPickPos>
                tComplexLivingString_setPrepPos(&theString[i], displayValues[5]);
 80193d2:	4628      	mov	r0, r5
 80193d4:	ed94 0a05 	vldr	s0, [r4, #20]
 80193d8:	f00b fe72 	bl	80250c0 <tComplexLivingString_setPrepPos>
                tComplexLivingString_setPrepIndex(&theString[i], displayValues[6]);
 80193dc:	4628      	mov	r0, r5
 80193de:	ed94 0a06 	vldr	s0, [r4, #24]
 80193e2:	f00b fe7f 	bl	80250e4 <tComplexLivingString_setPrepIndex>
                tSlide_setDownSlide(&stringOutEnvs[i], displayValues[9] * samplesPerMs);
 80193e6:	4b76      	ldr	r3, [pc, #472]	; (80195c0 <SFXLivingStringSynthFrame+0x338>)
 80193e8:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 80193ec:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 80193f0:	1998      	adds	r0, r3, r6
 80193f2:	3604      	adds	r6, #4
 80193f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80193f8:	f009 f836 	bl	8022468 <tSlide_setDownSlide>
            for (int i = 0; i < NUM_STRINGS; i++)
 80193fc:	2e18      	cmp	r6, #24
 80193fe:	d1d3      	bne.n	80193a8 <SFXLivingStringSynthFrame+0x120>
            tVZFilter_setFreq(&pluckFilt, faster_mtof((displayValues[1] * 100.0f)+20.0f));
 8019400:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8019404:	ed94 7a01 	vldr	s14, [r4, #4]
 8019408:	eddf 7a6e 	vldr	s15, [pc, #440]	; 80195c4 <SFXLivingStringSynthFrame+0x33c>
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801940c:	2500      	movs	r5, #0
 801940e:	4f6e      	ldr	r7, [pc, #440]	; (80195c8 <SFXLivingStringSynthFrame+0x340>)
            tVZFilter_setFreq(&pluckFilt, faster_mtof((displayValues[1] * 100.0f)+20.0f));
 8019410:	eea7 0a27 	vfma.f32	s0, s14, s15
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8019414:	462e      	mov	r6, r5
            tVZFilter_setFreq(&pluckFilt, faster_mtof((displayValues[1] * 100.0f)+20.0f));
 8019416:	f00a fde5 	bl	8023fe4 <faster_mtof>
 801941a:	486c      	ldr	r0, [pc, #432]	; (80195cc <SFXLivingStringSynthFrame+0x344>)
 801941c:	f009 fda2 	bl	8022f64 <tVZFilter_setFreq>
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8019420:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80195a0 <SFXLivingStringSynthFrame+0x318>
 8019424:	f8cd b004 	str.w	fp, [sp, #4]
 8019428:	46bb      	mov	fp, r7
                float voiceOn = (tSimplePoly_getVelocity(&poly, i) > 0);
 801942a:	eddf 8a69 	vldr	s17, [pc, #420]	; 80195d0 <SFXLivingStringSynthFrame+0x348>
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801942e:	e01a      	b.n	8019466 <SFXLivingStringSynthFrame+0x1de>
                    tComplexLivingString_setTargetLev(&theString[i],voiceOn * displayValues[8]);
 8019430:	ed94 0a08 	vldr	s0, [r4, #32]
 8019434:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019438:	f00b fe86 	bl	8025148 <tComplexLivingString_setTargetLev>
                if (voiceOn)
 801943c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019440:	4b5f      	ldr	r3, [pc, #380]	; (80195c0 <SFXLivingStringSynthFrame+0x338>)
 8019442:	4f64      	ldr	r7, [pc, #400]	; (80195d4 <SFXLivingStringSynthFrame+0x34c>)
                    tSlide_setDest(&stringOutEnvs[i], 1.0f);
 8019444:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019448:	442b      	add	r3, r5
                if (voiceOn)
 801944a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801944e:	442f      	add	r7, r5
                    tSlide_setDest(&stringOutEnvs[i], 1.0f);
 8019450:	4618      	mov	r0, r3
                if (voiceOn)
 8019452:	d059      	beq.n	8019508 <SFXLivingStringSynthFrame+0x280>
                    tSlide_setDest(&stringOutEnvs[i], 1.0f);
 8019454:	f009 f810 	bl	8022478 <tSlide_setDest>
                    tSlide_setDest(&stringInEnvs[i], 1.0f);
 8019458:	4638      	mov	r0, r7
 801945a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801945e:	f009 f80b 	bl	8022478 <tSlide_setDest>
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8019462:	3601      	adds	r6, #1
 8019464:	3504      	adds	r5, #4
 8019466:	9b01      	ldr	r3, [sp, #4]
 8019468:	4640      	mov	r0, r8
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801946a:	fa5f f986 	uxtb.w	r9, r6
 801946e:	f8df a174 	ldr.w	sl, [pc, #372]	; 80195e4 <SFXLivingStringSynthFrame+0x35c>
 8019472:	195f      	adds	r7, r3, r5
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 8019474:	f00b fab0 	bl	80249d8 <tSimplePoly_getNumVoices>
 8019478:	42b0      	cmp	r0, r6
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801947a:	4649      	mov	r1, r9
 801947c:	4640      	mov	r0, r8
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801947e:	dd4d      	ble.n	801951c <SFXLivingStringSynthFrame+0x294>
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8019480:	f00b fac6 	bl	8024a10 <tSimplePoly_getPitch>
 8019484:	ee07 0a90 	vmov	s15, r0
 8019488:	ed9a 0a02 	vldr	s0, [sl, #8]
                float voiceOn = (tSimplePoly_getVelocity(&poly, i) > 0);
 801948c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8019490:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8019494:	4b50      	ldr	r3, [pc, #320]	; (80195d8 <SFXLivingStringSynthFrame+0x350>)
            float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8019496:	4951      	ldr	r1, [pc, #324]	; (80195dc <SFXLivingStringSynthFrame+0x354>)
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8019498:	781a      	ldrb	r2, [r3, #0]
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801949a:	ee37 7a00 	vadd.f32	s14, s14, s0
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801949e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80194a2:	ee17 3a90 	vmov	r3, s15
 80194a6:	1a9b      	subs	r3, r3, r2
 80194a8:	4a4d      	ldr	r2, [pc, #308]	; (80195e0 <SFXLivingStringSynthFrame+0x358>)
 80194aa:	fb82 2003 	smull	r2, r0, r2, r3
 80194ae:	17da      	asrs	r2, r3, #31
 80194b0:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 80194b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80194b8:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80194bc:	ee07 3a90 	vmov	s15, r3
 80194c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 80194c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80194c8:	ee17 3a90 	vmov	r3, s15
 80194cc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80194d0:	ed91 0a00 	vldr	s0, [r1]
            freq[voice] = LEAF_midiToFrequency(tunedNote);
 80194d4:	ee37 0a00 	vadd.f32	s0, s14, s0
 80194d8:	f00a fd00 	bl	8023edc <LEAF_midiToFrequency>
                tComplexLivingString_setFreq(&theString[i], freq[i]);
 80194dc:	4638      	mov	r0, r7
            freq[voice] = LEAF_midiToFrequency(tunedNote);
 80194de:	ecab 0a01 	vstmia	fp!, {s0}
                tComplexLivingString_setFreq(&theString[i], freq[i]);
 80194e2:	f00b fdc5 	bl	8025070 <tComplexLivingString_setFreq>
                float voiceOn = (tSimplePoly_getVelocity(&poly, i) > 0);
 80194e6:	4649      	mov	r1, r9
 80194e8:	4640      	mov	r0, r8
 80194ea:	f00b fa9d 	bl	8024a28 <tSimplePoly_getVelocity>
                if (levModeStr)
 80194ee:	f8da 30f0 	ldr.w	r3, [sl, #240]	; 0xf0
                float voiceOn = (tSimplePoly_getVelocity(&poly, i) > 0);
 80194f2:	2800      	cmp	r0, #0
                    tComplexLivingString_setTargetLev(&theString[i],1.0f);
 80194f4:	eeb0 0a48 	vmov.f32	s0, s16
 80194f8:	4638      	mov	r0, r7
                float voiceOn = (tSimplePoly_getVelocity(&poly, i) > 0);
 80194fa:	fe38 8a28 	vselgt.f32	s16, s16, s17
                if (levModeStr)
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d196      	bne.n	8019430 <SFXLivingStringSynthFrame+0x1a8>
                    tComplexLivingString_setTargetLev(&theString[i],1.0f);
 8019502:	f00b fe21 	bl	8025148 <tComplexLivingString_setTargetLev>
 8019506:	e799      	b.n	801943c <SFXLivingStringSynthFrame+0x1b4>
                    tSlide_setDest(&stringOutEnvs[i], displayValues[7]);
 8019508:	ed94 0a07 	vldr	s0, [r4, #28]
 801950c:	f008 ffb4 	bl	8022478 <tSlide_setDest>
                    tSlide_setDest(&stringInEnvs[i], 0.0f);
 8019510:	eeb0 0a68 	vmov.f32	s0, s17
 8019514:	4638      	mov	r0, r7
 8019516:	f008 ffaf 	bl	8022478 <tSlide_setDest>
 801951a:	e7a2      	b.n	8019462 <SFXLivingStringSynthFrame+0x1da>
        }
 801951c:	b003      	add	sp, #12
 801951e:	ecbd 8b02 	vpop	{d8}
 8019522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                levModeStr = !levModeStr;
 8019526:	4e2f      	ldr	r6, [pc, #188]	; (80195e4 <SFXLivingStringSynthFrame+0x35c>)
 8019528:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 80195e8 <SFXLivingStringSynthFrame+0x360>
 801952c:	f8d6 10f0 	ldr.w	r1, [r6, #240]	; 0xf0
 8019530:	465c      	mov	r4, fp
 8019532:	f10b 0818 	add.w	r8, fp, #24
 8019536:	fab1 f181 	clz	r1, r1
 801953a:	0949      	lsrs	r1, r1, #5
 801953c:	f8c6 10f0 	str.w	r1, [r6, #240]	; 0xf0
 8019540:	e001      	b.n	8019546 <SFXLivingStringSynthFrame+0x2be>
 8019542:	f8d6 10f0 	ldr.w	r1, [r6, #240]	; 0xf0
                    tComplexLivingString_setLevMode(&theString[i], levModeStr);
 8019546:	4620      	mov	r0, r4
 8019548:	3404      	adds	r4, #4
 801954a:	f00b fe11 	bl	8025170 <tComplexLivingString_setLevMode>
                for (int i = 0; i < NUM_STRINGS; i++)
 801954e:	45a0      	cmp	r8, r4
 8019550:	d1f7      	bne.n	8019542 <SFXLivingStringSynthFrame+0x2ba>
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8019552:	2300      	movs	r3, #0
                setLED_C(levModeStr);
 8019554:	f896 00f0 	ldrb.w	r0, [r6, #240]	; 0xf0
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 8019558:	772b      	strb	r3, [r5, #28]
                setLED_C(levModeStr);
 801955a:	f7fa fa4d 	bl	80139f8 <setLED_C>
 801955e:	e6ba      	b.n	80192d6 <SFXLivingStringSynthFrame+0x4e>
                voicePluck = !voicePluck;
 8019560:	4a20      	ldr	r2, [pc, #128]	; (80195e4 <SFXLivingStringSynthFrame+0x35c>)
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8019562:	2100      	movs	r1, #0
                voicePluck = !voicePluck;
 8019564:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8019568:	7629      	strb	r1, [r5, #24]
                voicePluck = !voicePluck;
 801956a:	fab3 f383 	clz	r3, r3
 801956e:	095b      	lsrs	r3, r3, #5
                setLED_B(voicePluck);
 8019570:	4618      	mov	r0, r3
                voicePluck = !voicePluck;
 8019572:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
                setLED_B(voicePluck);
 8019576:	f7fa fa31 	bl	80139dc <setLED_B>
 801957a:	e6a6      	b.n	80192ca <SFXLivingStringSynthFrame+0x42>
 801957c:	f3af 8000 	nop.w
 8019580:	c28f5c29 	.word	0xc28f5c29
 8019584:	3fdc28f5 	.word	0x3fdc28f5
 8019588:	00000000 	.word	0x00000000
 801958c:	3fe0a3d7 	.word	0x3fe0a3d7
 8019590:	40000000 	.word	0x40000000
 8019594:	3fa47ae1 	.word	0x3fa47ae1
 8019598:	20018724 	.word	0x20018724
 801959c:	20000040 	.word	0x20000040
 80195a0:	20017560 	.word	0x20017560
 80195a4:	2000332c 	.word	0x2000332c
 80195a8:	42ee0000 	.word	0x42ee0000
 80195ac:	200187d4 	.word	0x200187d4
 80195b0:	3ca3d70a 	.word	0x3ca3d70a
 80195b4:	3f7ae148 	.word	0x3f7ae148
 80195b8:	20017084 	.word	0x20017084
 80195bc:	46000000 	.word	0x46000000
 80195c0:	20017634 	.word	0x20017634
 80195c4:	42c80000 	.word	0x42c80000
 80195c8:	2000347c 	.word	0x2000347c
 80195cc:	200183ac 	.word	0x200183ac
 80195d0:	00000000 	.word	0x00000000
 80195d4:	200176fc 	.word	0x200176fc
 80195d8:	2000065c 	.word	0x2000065c
 80195dc:	20000664 	.word	0x20000664
 80195e0:	2aaaaaab 	.word	0x2aaaaaab
 80195e4:	20000548 	.word	0x20000548
 80195e8:	200026b0 	.word	0x200026b0

080195ec <SFXLivingStringSynthTick>:
            float pluck = displayValues[0] * tNoise_tick(&stringPluckNoise);
 80195ec:	4b27      	ldr	r3, [pc, #156]	; (801968c <SFXLivingStringSynthTick+0xa0>)
        {
 80195ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195f2:	ed2d 8b06 	vpush	{d8-d10}
            float pluck = displayValues[0] * tNoise_tick(&stringPluckNoise);
 80195f6:	ed93 8a00 	vldr	s16, [r3]
        {
 80195fa:	4606      	mov	r6, r0
            float pluck = displayValues[0] * tNoise_tick(&stringPluckNoise);
 80195fc:	4824      	ldr	r0, [pc, #144]	; (8019690 <SFXLivingStringSynthTick+0xa4>)
            pluck = tVZFilter_tick(&pluckFilt, pluck);
 80195fe:	2400      	movs	r4, #0
            float pluck = displayValues[0] * tNoise_tick(&stringPluckNoise);
 8019600:	f00b fb6c 	bl	8024cdc <tNoise_tick>
            pluck = tVZFilter_tick(&pluckFilt, pluck);
 8019604:	4823      	ldr	r0, [pc, #140]	; (8019694 <SFXLivingStringSynthTick+0xa8>)
 8019606:	ee28 0a00 	vmul.f32	s0, s16, s0
            float sample = 0.0f;
 801960a:	ed9f 9a23 	vldr	s18, [pc, #140]	; 8019698 <SFXLivingStringSynthTick+0xac>
            pluck = tVZFilter_tick(&pluckFilt, pluck);
 801960e:	f009 fc39 	bl	8022e84 <tVZFilter_tick>
 8019612:	eeb0 aa40 	vmov.f32	s20, s0
 8019616:	f8df a090 	ldr.w	sl, [pc, #144]	; 80196a8 <SFXLivingStringSynthTick+0xbc>
 801961a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80196ac <SFXLivingStringSynthTick+0xc0>
 801961e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80196b0 <SFXLivingStringSynthTick+0xc4>
 8019622:	4f1e      	ldr	r7, [pc, #120]	; (801969c <SFXLivingStringSynthTick+0xb0>)
                inputSample = (input[1] * voicePluck) + (pluck * tADSR4_tick(&pluckEnvs[i]));
 8019624:	edda 7a3d 	vldr	s15, [sl, #244]	; 0xf4
 8019628:	eb09 0004 	add.w	r0, r9, r4
 801962c:	edd6 9a01 	vldr	s19, [r6, #4]
 8019630:	eb08 0504 	add.w	r5, r8, r4
 8019634:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8019638:	f008 fb9a 	bl	8021d70 <tADSR4_tick>
 801963c:	ee20 8a0a 	vmul.f32	s16, s0, s20
                sample += tComplexLivingString_tick(&theString[i], (inputSample * tSlide_tickNoInput(&stringOutEnvs[i]))) * tSlide_tickNoInput(&stringOutEnvs[i]);
 8019640:	4628      	mov	r0, r5
 8019642:	f008 ff1d 	bl	8022480 <tSlide_tickNoInput>
 8019646:	1938      	adds	r0, r7, r4
 8019648:	3404      	adds	r4, #4
                inputSample = (input[1] * voicePluck) + (pluck * tADSR4_tick(&pluckEnvs[i]));
 801964a:	eea9 8aa8 	vfma.f32	s16, s19, s17
                sample += tComplexLivingString_tick(&theString[i], (inputSample * tSlide_tickNoInput(&stringOutEnvs[i]))) * tSlide_tickNoInput(&stringOutEnvs[i]);
 801964e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019652:	f00b fda3 	bl	802519c <tComplexLivingString_tick>
 8019656:	4628      	mov	r0, r5
 8019658:	eeb0 8a40 	vmov.f32	s16, s0
 801965c:	f008 ff10 	bl	8022480 <tSlide_tickNoInput>
            for (int i = 0; i < NUM_STRINGS; i++)
 8019660:	2c18      	cmp	r4, #24
                sample += tComplexLivingString_tick(&theString[i], (inputSample * tSlide_tickNoInput(&stringOutEnvs[i]))) * tSlide_tickNoInput(&stringOutEnvs[i]);
 8019662:	eea8 9a00 	vfma.f32	s18, s16, s0
            for (int i = 0; i < NUM_STRINGS; i++)
 8019666:	d1dd      	bne.n	8019624 <SFXLivingStringSynthTick+0x38>
            sample *= 0.1625f;
 8019668:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80196a0 <SFXLivingStringSynthTick+0xb4>
            sample = LEAF_tanh(sample) * 0.98f;
 801966c:	ee29 0a00 	vmul.f32	s0, s18, s0
 8019670:	f00a fb9a 	bl	8023da8 <LEAF_tanh>
 8019674:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80196a4 <SFXLivingStringSynthTick+0xb8>
 8019678:	ee20 0a27 	vmul.f32	s0, s0, s15
            input[0] = sample;
 801967c:	ed86 0a00 	vstr	s0, [r6]
            input[1] = sample;
 8019680:	ed86 0a01 	vstr	s0, [r6, #4]
        }
 8019684:	ecbd 8b06 	vpop	{d8-d10}
 8019688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801968c:	200187d4 	.word	0x200187d4
 8019690:	20002984 	.word	0x20002984
 8019694:	200183ac 	.word	0x200183ac
 8019698:	00000000 	.word	0x00000000
 801969c:	200026b0 	.word	0x200026b0
 80196a0:	3e266666 	.word	0x3e266666
 80196a4:	3f7ae148 	.word	0x3f7ae148
 80196a8:	20000548 	.word	0x20000548
 80196ac:	20017448 	.word	0x20017448
 80196b0:	20017634 	.word	0x20017634

080196b4 <SFXLivingStringSynthFree>:
        {
 80196b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196b8:	2400      	movs	r4, #0
 80196ba:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8019708 <SFXLivingStringSynthFree+0x54>
 80196be:	4f0d      	ldr	r7, [pc, #52]	; (80196f4 <SFXLivingStringSynthFree+0x40>)
 80196c0:	4e0d      	ldr	r6, [pc, #52]	; (80196f8 <SFXLivingStringSynthFree+0x44>)
 80196c2:	4d0e      	ldr	r5, [pc, #56]	; (80196fc <SFXLivingStringSynthFree+0x48>)
                tComplexLivingString_free(&theString[i]);
 80196c4:	eb08 0004 	add.w	r0, r8, r4
 80196c8:	f00b fc86 	bl	8024fd8 <tComplexLivingString_free>
                tSlide_free(&stringInEnvs[i]);
 80196cc:	1938      	adds	r0, r7, r4
 80196ce:	f008 fec7 	bl	8022460 <tSlide_free>
                tSlide_free(&stringOutEnvs[i]);
 80196d2:	1930      	adds	r0, r6, r4
 80196d4:	f008 fec4 	bl	8022460 <tSlide_free>
                tADSR4_free(&pluckEnvs[i]);
 80196d8:	1928      	adds	r0, r5, r4
 80196da:	3404      	adds	r4, #4
 80196dc:	f008 fae6 	bl	8021cac <tADSR4_free>
            for (int i = 0; i < NUM_STRINGS; i++)
 80196e0:	2c18      	cmp	r4, #24
 80196e2:	d1ef      	bne.n	80196c4 <SFXLivingStringSynthFree+0x10>
            tVZFilter_free(&pluckFilt);
 80196e4:	4806      	ldr	r0, [pc, #24]	; (8019700 <SFXLivingStringSynthFree+0x4c>)
 80196e6:	f009 fbbf 	bl	8022e68 <tVZFilter_free>
            tNoise_free(&stringPluckNoise);
 80196ea:	4806      	ldr	r0, [pc, #24]	; (8019704 <SFXLivingStringSynthFree+0x50>)
        }
 80196ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            tNoise_free(&stringPluckNoise);
 80196f0:	f00b baf0 	b.w	8024cd4 <tNoise_free>
 80196f4:	200176fc 	.word	0x200176fc
 80196f8:	20017634 	.word	0x20017634
 80196fc:	20017448 	.word	0x20017448
 8019700:	200183ac 	.word	0x200183ac
 8019704:	20002984 	.word	0x20002984
 8019708:	200026b0 	.word	0x200026b0

0801970c <SFXClassicSynthAlloc>:
        {
 801970c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            tSimplePoly_setNumVoices(&poly, numVoices);
 8019710:	4da1      	ldr	r5, [pc, #644]	; (8019998 <SFXClassicSynthAlloc+0x28c>)
            leaf.clearOnAllocation = 1;
 8019712:	2301      	movs	r3, #1
 8019714:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 8019a00 <SFXClassicSynthAlloc+0x2f4>
            displayValues[16] = knobs[16];  // fade between sawtooth and glottal pulse
 8019718:	f04f 0800 	mov.w	r8, #0
            tSimplePoly_setNumVoices(&poly, numVoices);
 801971c:	489f      	ldr	r0, [pc, #636]	; (801999c <SFXClassicSynthAlloc+0x290>)
            leaf.clearOnAllocation = 1;
 801971e:	f8ca 3014 	str.w	r3, [sl, #20]
            displayValues[16] = knobs[16];  // fade between sawtooth and glottal pulse
 8019722:	4644      	mov	r4, r8
        {
 8019724:	ed2d 8b08 	vpush	{d8-d11}
            tSimplePoly_setNumVoices(&poly, numVoices);
 8019728:	7829      	ldrb	r1, [r5, #0]
 801972a:	f00b f94d 	bl	80249c8 <tSimplePoly_setNumVoices>
            displayValues[0] = knobs[0]; //synth volume
 801972e:	4b9c      	ldr	r3, [pc, #624]	; (80199a0 <SFXClassicSynthAlloc+0x294>)
            displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019730:	edd5 7a40 	vldr	s15, [r5, #256]	; 0x100
            displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 8019734:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
            displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019738:	ed93 5a05 	vldr	s10, [r3, #20]
            displayValues[0] = knobs[0]; //synth volume
 801973c:	461f      	mov	r7, r3
            displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 801973e:	edd3 5a06 	vldr	s11, [r3, #24]
            displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019742:	ed93 6a08 	vldr	s12, [r3, #32]
            displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019746:	ee27 5a85 	vmul.f32	s10, s15, s10
            displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 801974a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
            displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 801974e:	ee67 5aa5 	vmul.f32	s11, s15, s11
            displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019752:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
            displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019756:	ee27 6a86 	vmul.f32	s12, s15, s12
            displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 801975a:	ee67 6aa6 	vmul.f32	s13, s15, s13
            displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 801975e:	eddf 8a91 	vldr	s17, [pc, #580]	; 80199a4 <SFXClassicSynthAlloc+0x298>
            displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019762:	ee27 7a87 	vmul.f32	s14, s15, s14
            displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019766:	4a90      	ldr	r2, [pc, #576]	; (80199a8 <SFXClassicSynthAlloc+0x29c>)
 8019768:	eebd 5ac5 	vcvt.s32.f32	s10, s10
            displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 801976c:	ed93 4a04 	vldr	s8, [r3, #16]
            displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019770:	eefd 5ae5 	vcvt.s32.f32	s11, s11
            displayValues[0] = knobs[0]; //synth volume
 8019774:	f857 eb04 	ldr.w	lr, [r7], #4
            displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019778:	eebd 6ac6 	vcvt.s32.f32	s12, s12
                    synthDetune[i][j] = ((leaf.random() * 0.0264f) - 0.0132f);
 801977c:	ed9f aa8b 	vldr	s20, [pc, #556]	; 80199ac <SFXClassicSynthAlloc+0x2a0>
            displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019780:	eefd 6ae6 	vcvt.s32.f32	s13, s13
            displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019784:	ee15 ca10 	vmov	ip, s10
            displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019788:	eebd 7ac7 	vcvt.s32.f32	s14, s14
            displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 801978c:	ee15 6a90 	vmov	r6, s11
            displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 8019790:	eef0 3a68 	vmov.f32	s7, s17
            displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019794:	ee16 5a10 	vmov	r5, s12
            displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019798:	ee16 0a90 	vmov	r0, s13
            displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 801979c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
            displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 80197a0:	ee17 1a10 	vmov	r1, s14
            displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 80197a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
            displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 80197a8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
            displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 80197ac:	eee4 3a24 	vfma.f32	s7, s8, s9
            displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 80197b0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
            displayValues[1] = knobs[1] * 4096.0f; //lowpass cutoff
 80197b4:	edd7 4a00 	vldr	s9, [r7]
            displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 80197b8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
            displayValues[1] = knobs[1] * 4096.0f; //lowpass cutoff
 80197bc:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80199b0 <SFXClassicSynthAlloc+0x2a4>
            displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 80197c0:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 80199b4 <SFXClassicSynthAlloc+0x2a8>
            displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 80197c4:	edd5 5a00 	vldr	s11, [r5]
            displayValues[1] = knobs[1] * 4096.0f; //lowpass cutoff
 80197c8:	ee64 4a87 	vmul.f32	s9, s9, s14
            displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 80197cc:	ed9c 4a00 	vldr	s8, [ip]
            displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 80197d0:	ed96 5a00 	vldr	s10, [r6]
            displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 80197d4:	ee65 5a86 	vmul.f32	s11, s11, s12
            displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 80197d8:	edd0 6a00 	vldr	s13, [r0]
            displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 80197dc:	ee24 4a06 	vmul.f32	s8, s8, s12
            displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 80197e0:	ed91 7a00 	vldr	s14, [r1]
            displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 80197e4:	ee25 5a06 	vmul.f32	s10, s10, s12
            displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 80197e8:	ee66 6a86 	vmul.f32	s13, s13, s12
            displayValues[0] = knobs[0]; //synth volume
 80197ec:	4d72      	ldr	r5, [pc, #456]	; (80199b8 <SFXClassicSynthAlloc+0x2ac>)
            displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 80197ee:	ee27 7a06 	vmul.f32	s14, s14, s12
            displayValues[7] = knobs[7]; //sus
 80197f2:	69de      	ldr	r6, [r3, #28]
            displayValues[12] = knobs[12]; //sus
 80197f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
            displayValues[2] = knobs[2]; //keyfollow filter cutoff
 80197f6:	f8d3 c008 	ldr.w	ip, [r3, #8]
            displayValues[3] = knobs[3]; //detune
 80197fa:	68df      	ldr	r7, [r3, #12]
            displayValues[9] = knobs[9]; //leak
 80197fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
            displayValues[7] = knobs[7]; //sus
 80197fe:	61ee      	str	r6, [r5, #28]
            displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019800:	edc5 6a0a 	vstr	s13, [r5, #40]	; 0x28
            displayValues[12] = knobs[12]; //sus
 8019804:	6329      	str	r1, [r5, #48]	; 0x30
            displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019806:	ed85 4a05 	vstr	s8, [r5, #20]
            displayValues[0] = knobs[0]; //synth volume
 801980a:	f8c5 e000 	str.w	lr, [r5]
            displayValues[1] = knobs[1] * 4096.0f; //lowpass cutoff
 801980e:	edc5 4a01 	vstr	s9, [r5, #4]
            displayValues[2] = knobs[2]; //keyfollow filter cutoff
 8019812:	f8c5 c008 	str.w	ip, [r5, #8]
            displayValues[3] = knobs[3]; //detune
 8019816:	60ef      	str	r7, [r5, #12]
            displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 8019818:	edc5 3a04 	vstr	s7, [r5, #16]
            displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 801981c:	ed85 5a06 	vstr	s10, [r5, #24]
            displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019820:	edc5 5a08 	vstr	s11, [r5, #32]
            displayValues[9] = knobs[9]; //leak
 8019824:	6268      	str	r0, [r5, #36]	; 0x24
            displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019826:	ed85 7a0b 	vstr	s14, [r5, #44]	; 0x2c
            displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 801982a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
            displayValues[14] = knobs[14]; //leak
 801982e:	6b99      	ldr	r1, [r3, #56]	; 0x38
            displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019830:	ee67 7a87 	vmul.f32	s15, s15, s14
            displayValues[15] = knobs[15] * 4095.0f;  // filter envelope amount
 8019834:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
            displayValues[16] = knobs[16];  // fade between sawtooth and glottal pulse
 8019838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            displayValues[15] = knobs[15] * 4095.0f;  // filter envelope amount
 801983a:	eddf 6a60 	vldr	s13, [pc, #384]	; 80199bc <SFXClassicSynthAlloc+0x2b0>
            displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 801983e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            displayValues[16] = knobs[16];  // fade between sawtooth and glottal pulse
 8019842:	642b      	str	r3, [r5, #64]	; 0x40
            displayValues[15] = knobs[15] * 4095.0f;  // filter envelope amount
 8019844:	ee27 7a26 	vmul.f32	s14, s14, s13
                    tSawtooth_initToPool(&osc[(i * NUM_OSC_PER_VOICE) + j], &smallPool);
 8019848:	4e5d      	ldr	r6, [pc, #372]	; (80199c0 <SFXClassicSynthAlloc+0x2b4>)
                    synthDetune[i][j] = ((leaf.random() * 0.0264f) - 0.0132f);
 801984a:	eddf 9a5e 	vldr	s19, [pc, #376]	; 80199c4 <SFXClassicSynthAlloc+0x2b8>
            displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 801984e:	ee17 3a90 	vmov	r3, s15
                    tRosenbergGlottalPulse_setOpenLength(&glottal[(i * NUM_OSC_PER_VOICE) + j], 0.3f);
 8019852:	ed9f 9a5d 	vldr	s18, [pc, #372]	; 80199c8 <SFXClassicSynthAlloc+0x2bc>
            displayValues[14] = knobs[14]; //leak
 8019856:	63a9      	str	r1, [r5, #56]	; 0x38
            displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019858:	eb02 0283 	add.w	r2, r2, r3, lsl #2
            displayValues[15] = knobs[15] * 4095.0f;  // filter envelope amount
 801985c:	ed85 7a0f 	vstr	s14, [r5, #60]	; 0x3c
            displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019860:	edd2 7a00 	vldr	s15, [r2]
 8019864:	ee27 6a86 	vmul.f32	s12, s15, s12
 8019868:	ed85 6a0d 	vstr	s12, [r5, #52]	; 0x34
 801986c:	4b57      	ldr	r3, [pc, #348]	; (80199cc <SFXClassicSynthAlloc+0x2c0>)
 801986e:	f104 0b0c 	add.w	fp, r4, #12
 8019872:	eb03 0904 	add.w	r9, r3, r4
                    tSawtooth_initToPool(&osc[(i * NUM_OSC_PER_VOICE) + j], &smallPool);
 8019876:	4b56      	ldr	r3, [pc, #344]	; (80199d0 <SFXClassicSynthAlloc+0x2c4>)
 8019878:	4631      	mov	r1, r6
 801987a:	1918      	adds	r0, r3, r4
 801987c:	f00b f962 	bl	8024b44 <tSawtooth_initToPool>
                    synthDetune[i][j] = ((leaf.random() * 0.0264f) - 0.0132f);
 8019880:	f8da 3010 	ldr.w	r3, [sl, #16]
 8019884:	4798      	blx	r3
 8019886:	eef0 7a69 	vmov.f32	s15, s19
 801988a:	4b52      	ldr	r3, [pc, #328]	; (80199d4 <SFXClassicSynthAlloc+0x2c8>)
                    tRosenbergGlottalPulse_initToPool(&glottal[(i * NUM_OSC_PER_VOICE) + j], &smallPool);
 801988c:	4631      	mov	r1, r6
                    synthDetune[i][j] = ((leaf.random() * 0.0264f) - 0.0132f);
 801988e:	eee0 7a0a 	vfma.f32	s15, s0, s20
 8019892:	191f      	adds	r7, r3, r4
 8019894:	3404      	adds	r4, #4
                    tRosenbergGlottalPulse_initToPool(&glottal[(i * NUM_OSC_PER_VOICE) + j], &smallPool);
 8019896:	4638      	mov	r0, r7
                    synthDetune[i][j] = ((leaf.random() * 0.0264f) - 0.0132f);
 8019898:	ece9 7a01 	vstmia	r9!, {s15}
                    tRosenbergGlottalPulse_initToPool(&glottal[(i * NUM_OSC_PER_VOICE) + j], &smallPool);
 801989c:	f006 ffea 	bl	8020874 <tRosenbergGlottalPulse_initToPool>
                    tRosenbergGlottalPulse_setOpenLength(&glottal[(i * NUM_OSC_PER_VOICE) + j], 0.3f);
 80198a0:	eeb0 0a49 	vmov.f32	s0, s18
 80198a4:	4638      	mov	r0, r7
 80198a6:	f007 f8e3 	bl	8020a70 <tRosenbergGlottalPulse_setOpenLength>
                    tRosenbergGlottalPulse_setPulseLength(&glottal[(i * NUM_OSC_PER_VOICE) + j], 0.4f);
 80198aa:	eeb0 0a68 	vmov.f32	s0, s17
 80198ae:	4638      	mov	r0, r7
 80198b0:	f007 f8ec 	bl	8020a8c <tRosenbergGlottalPulse_setPulseLength>
                for (int j = 0; j < NUM_OSC_PER_VOICE; j++)
 80198b4:	455c      	cmp	r4, fp
 80198b6:	d1de      	bne.n	8019876 <SFXClassicSynthAlloc+0x16a>
 80198b8:	4b47      	ldr	r3, [pc, #284]	; (80199d8 <SFXClassicSynthAlloc+0x2cc>)
                tEfficientSVF_initToPool(&synthLP[i], SVFTypeLowpass, 6000.0f, displayValues[4], &smallPool);
 80198ba:	f241 7270 	movw	r2, #6000	; 0x1770
 80198be:	4847      	ldr	r0, [pc, #284]	; (80199dc <SFXClassicSynthAlloc+0x2d0>)
 80198c0:	2101      	movs	r1, #1
 80198c2:	eb03 0908 	add.w	r9, r3, r8
 80198c6:	ed95 0a04 	vldr	s0, [r5, #16]
 80198ca:	4440      	add	r0, r8
 80198cc:	4633      	mov	r3, r6
 80198ce:	f008 ffa7 	bl	8022820 <tEfficientSVF_initToPool>
                tADSR4_setLeakFactor(&polyEnvs[i],((1.0f - displayValues[9]) * 0.00005f) + 0.99995f);
 80198d2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
                tADSR4_initToPool(&polyEnvs[i], displayValues[5], displayValues[6], displayValues[7], displayValues[8], decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &smallPool);
 80198d6:	4633      	mov	r3, r6
 80198d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80198dc:	4940      	ldr	r1, [pc, #256]	; (80199e0 <SFXClassicSynthAlloc+0x2d4>)
 80198de:	4648      	mov	r0, r9
 80198e0:	edd5 1a08 	vldr	s3, [r5, #32]
 80198e4:	ed95 1a07 	vldr	s2, [r5, #28]
 80198e8:	edd5 0a06 	vldr	s1, [r5, #24]
 80198ec:	ed95 0a05 	vldr	s0, [r5, #20]
 80198f0:	f008 f982 	bl	8021bf8 <tADSR4_initToPool>
                tADSR4_setLeakFactor(&polyEnvs[i],((1.0f - displayValues[9]) * 0.00005f) + 0.99995f);
 80198f4:	eddf aa3b 	vldr	s21, [pc, #236]	; 80199e4 <SFXClassicSynthAlloc+0x2d8>
 80198f8:	edd5 7a09 	vldr	s15, [r5, #36]	; 0x24
 80198fc:	4648      	mov	r0, r9
 80198fe:	4f3a      	ldr	r7, [pc, #232]	; (80199e8 <SFXClassicSynthAlloc+0x2dc>)
 8019900:	eeb0 0a6a 	vmov.f32	s0, s21
 8019904:	ee78 7a67 	vsub.f32	s15, s16, s15
 8019908:	ed9f ba38 	vldr	s22, [pc, #224]	; 80199ec <SFXClassicSynthAlloc+0x2e0>
 801990c:	4447      	add	r7, r8
 801990e:	f108 0804 	add.w	r8, r8, #4
 8019912:	eea7 0a8b 	vfma.f32	s0, s15, s22
 8019916:	f008 fa0d 	bl	8021d34 <tADSR4_setLeakFactor>
                tADSR4_initToPool(&polyFiltEnvs[i], displayValues[10], displayValues[11], displayValues[12], displayValues[13], decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &smallPool);
 801991a:	4638      	mov	r0, r7
 801991c:	4633      	mov	r3, r6
 801991e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019922:	492f      	ldr	r1, [pc, #188]	; (80199e0 <SFXClassicSynthAlloc+0x2d4>)
 8019924:	edd5 1a0d 	vldr	s3, [r5, #52]	; 0x34
 8019928:	ed95 1a0c 	vldr	s2, [r5, #48]	; 0x30
 801992c:	edd5 0a0b 	vldr	s1, [r5, #44]	; 0x2c
 8019930:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
 8019934:	f008 f960 	bl	8021bf8 <tADSR4_initToPool>
                tADSR4_setLeakFactor(&polyFiltEnvs[i], ((1.0f - displayValues[14]) * 0.00005f) + 0.99995f);
 8019938:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801993c:	eeb0 0a6a 	vmov.f32	s0, s21
 8019940:	4638      	mov	r0, r7
 8019942:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019946:	eea8 0a0b 	vfma.f32	s0, s16, s22
 801994a:	f008 f9f3 	bl	8021d34 <tADSR4_setLeakFactor>
            for (int i = 0; i < NUM_VOC_VOICES; i++)
 801994e:	f1b8 0f20 	cmp.w	r8, #32
 8019952:	d18b      	bne.n	801986c <SFXClassicSynthAlloc+0x160>
            tCycle_initToPool(&pwmLFO1, &smallPool);
 8019954:	491a      	ldr	r1, [pc, #104]	; (80199c0 <SFXClassicSynthAlloc+0x2b4>)
 8019956:	4826      	ldr	r0, [pc, #152]	; (80199f0 <SFXClassicSynthAlloc+0x2e4>)
 8019958:	f00b f876 	bl	8024a48 <tCycle_initToPool>
            tCycle_initToPool(&pwmLFO2, &smallPool);
 801995c:	4918      	ldr	r1, [pc, #96]	; (80199c0 <SFXClassicSynthAlloc+0x2b4>)
 801995e:	4825      	ldr	r0, [pc, #148]	; (80199f4 <SFXClassicSynthAlloc+0x2e8>)
 8019960:	f00b f872 	bl	8024a48 <tCycle_initToPool>
            tCycle_setFreq(&pwmLFO1, 63.0f);
 8019964:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80199f8 <SFXClassicSynthAlloc+0x2ec>
 8019968:	4821      	ldr	r0, [pc, #132]	; (80199f0 <SFXClassicSynthAlloc+0x2e4>)
 801996a:	f00b f87f 	bl	8024a6c <tCycle_setFreq>
            tCycle_setFreq(&pwmLFO2, 72.11f);
 801996e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80199fc <SFXClassicSynthAlloc+0x2f0>
 8019972:	4820      	ldr	r0, [pc, #128]	; (80199f4 <SFXClassicSynthAlloc+0x2e8>)
 8019974:	f00b f87a 	bl	8024a6c <tCycle_setFreq>
            setLED_A(numVoices == 1);
 8019978:	4b07      	ldr	r3, [pc, #28]	; (8019998 <SFXClassicSynthAlloc+0x28c>)
 801997a:	7818      	ldrb	r0, [r3, #0]
 801997c:	f1a0 0001 	sub.w	r0, r0, #1
 8019980:	fab0 f080 	clz	r0, r0
 8019984:	0940      	lsrs	r0, r0, #5
 8019986:	f7fa f81b 	bl	80139c0 <setLED_A>
            leaf.clearOnAllocation = 0;
 801998a:	2300      	movs	r3, #0
        }
 801998c:	ecbd 8b08 	vpop	{d8-d11}
            leaf.clearOnAllocation = 0;
 8019990:	f8ca 3014 	str.w	r3, [sl, #20]
        }
 8019994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019998:	20000040 	.word	0x20000040
 801999c:	20017560 	.word	0x20017560
 80199a0:	20003390 	.word	0x20003390
 80199a4:	3ecccccd 	.word	0x3ecccccd
 80199a8:	20017084 	.word	0x20017084
 80199ac:	3cd844d0 	.word	0x3cd844d0
 80199b0:	45800000 	.word	0x45800000
 80199b4:	46000000 	.word	0x46000000
 80199b8:	200187d4 	.word	0x200187d4
 80199bc:	457ff000 	.word	0x457ff000
 80199c0:	20018338 	.word	0x20018338
 80199c4:	bc5844d0 	.word	0xbc5844d0
 80199c8:	3e99999a 	.word	0x3e99999a
 80199cc:	20018344 	.word	0x20018344
 80199d0:	2001731c 	.word	0x2001731c
 80199d4:	20002888 	.word	0x20002888
 80199d8:	200176dc 	.word	0x200176dc
 80199dc:	20003458 	.word	0x20003458
 80199e0:	2001797c 	.word	0x2001797c
 80199e4:	3f7ffcb9 	.word	0x3f7ffcb9
 80199e8:	20001f88 	.word	0x20001f88
 80199ec:	3851b717 	.word	0x3851b717
 80199f0:	200176cc 	.word	0x200176cc
 80199f4:	200177b0 	.word	0x200177b0
 80199f8:	427c0000 	.word	0x427c0000
 80199fc:	42903852 	.word	0x42903852
 8019a00:	200194e0 	.word	0x200194e0

08019a04 <SFXClassicSynthFrame>:
        {
 8019a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8019a08:	4cbd      	ldr	r4, [pc, #756]	; (8019d00 <SFXClassicSynthFrame+0x2fc>)
        {
 8019a0a:	ed2d 8b08 	vpush	{d8-d11}
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8019a0e:	7d23      	ldrb	r3, [r4, #20]
        {
 8019a10:	b085      	sub	sp, #20
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 8019a12:	2b01      	cmp	r3, #1
 8019a14:	f000 80f5 	beq.w	8019c02 <SFXClassicSynthFrame+0x1fe>
 8019a18:	4bba      	ldr	r3, [pc, #744]	; (8019d04 <SFXClassicSynthFrame+0x300>)
 8019a1a:	9302      	str	r3, [sp, #8]
            if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 8019a1c:	7e23      	ldrb	r3, [r4, #24]
 8019a1e:	2b01      	cmp	r3, #1
 8019a20:	f000 8108 	beq.w	8019c34 <SFXClassicSynthFrame+0x230>
            if (writeKnobFlag != -1)
 8019a24:	4bb8      	ldr	r3, [pc, #736]	; (8019d08 <SFXClassicSynthFrame+0x304>)
 8019a26:	f993 2000 	ldrsb.w	r2, [r3]
 8019a2a:	1c53      	adds	r3, r2, #1
 8019a2c:	d01d      	beq.n	8019a6a <SFXClassicSynthFrame+0x66>
                switch(writeKnobFlag + (knobPage * KNOB_PAGE_SIZE))
 8019a2e:	49b7      	ldr	r1, [pc, #732]	; (8019d0c <SFXClassicSynthFrame+0x308>)
 8019a30:	2305      	movs	r3, #5
 8019a32:	7809      	ldrb	r1, [r1, #0]
 8019a34:	fb13 2301 	smlabb	r3, r3, r1, r2
 8019a38:	2b10      	cmp	r3, #16
 8019a3a:	d816      	bhi.n	8019a6a <SFXClassicSynthFrame+0x66>
 8019a3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019a40:	02f50011 	.word	0x02f50011
 8019a44:	02eb02f0 	.word	0x02eb02f0
 8019a48:	02a102cc 	.word	0x02a102cc
 8019a4c:	025d0276 	.word	0x025d0276
 8019a50:	020d0232 	.word	0x020d0232
 8019a54:	01b701e2 	.word	0x01b701e2
 8019a58:	0135019e 	.word	0x0135019e
 8019a5c:	01050110 	.word	0x01050110
 8019a60:	0100      	.short	0x0100
                        displayValues[0] = knobs[0]; //synth volume
 8019a62:	4bab      	ldr	r3, [pc, #684]	; (8019d10 <SFXClassicSynthFrame+0x30c>)
 8019a64:	4eab      	ldr	r6, [pc, #684]	; (8019d14 <SFXClassicSynthFrame+0x310>)
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	6033      	str	r3, [r6, #0]
            float tempLFO1 = (tCycle_tick(&pwmLFO1) * 0.25f) + 0.5f; // pulse length
 8019a6a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8019a6e:	48aa      	ldr	r0, [pc, #680]	; (8019d18 <SFXClassicSynthFrame+0x314>)
 8019a70:	eeb5 8a00 	vmov.f32	s16, #80	; 0x3e800000  0.250
 8019a74:	f00b f808 	bl	8024a88 <tCycle_tick>
            float tempLFO2 = ((tCycle_tick(&pwmLFO2) * 0.25f) + 0.5f) * tempLFO1; // open length
 8019a78:	48a8      	ldr	r0, [pc, #672]	; (8019d1c <SFXClassicSynthFrame+0x318>)
            float tempLFO1 = (tCycle_tick(&pwmLFO1) * 0.25f) + 0.5f; // pulse length
 8019a7a:	eef0 9a68 	vmov.f32	s19, s17
 8019a7e:	eee0 9a08 	vfma.f32	s19, s0, s16
            float tempLFO2 = ((tCycle_tick(&pwmLFO2) * 0.25f) + 0.5f) * tempLFO1; // open length
 8019a82:	f00b f801 	bl	8024a88 <tCycle_tick>
 8019a86:	eee0 8a08 	vfma.f32	s17, s0, s16
            for (int i = 0; i < numVoices; i++)
 8019a8a:	9b02      	ldr	r3, [sp, #8]
 8019a8c:	781b      	ldrb	r3, [r3, #0]
            float tempLFO2 = ((tCycle_tick(&pwmLFO2) * 0.25f) + 0.5f) * tempLFO1; // open length
 8019a8e:	ee68 8aa9 	vmul.f32	s17, s17, s19
            for (int i = 0; i < numVoices; i++)
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	f000 80a3 	beq.w	8019bde <SFXClassicSynthFrame+0x1da>
 8019a98:	f04f 0a00 	mov.w	sl, #0
 8019a9c:	4ba0      	ldr	r3, [pc, #640]	; (8019d20 <SFXClassicSynthFrame+0x31c>)
 8019a9e:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 8019d78 <SFXClassicSynthFrame+0x374>
 8019aa2:	4657      	mov	r7, sl
 8019aa4:	4e9b      	ldr	r6, [pc, #620]	; (8019d14 <SFXClassicSynthFrame+0x310>)
                float myMidiNote = tSimplePoly_getPitch(&poly, i);
 8019aa6:	f8df b2a8 	ldr.w	fp, [pc, #680]	; 8019d50 <SFXClassicSynthFrame+0x34c>
                float tempFreq2 = displayValues[1] +  keyFollowFilt;
 8019aaa:	eddf ba9e 	vldr	s23, [pc, #632]	; 8019d24 <SFXClassicSynthFrame+0x320>
                tempFreq2 = LEAF_clip(0.0f, tempFreq2, 4095.0f);
 8019aae:	ed9f ba9e 	vldr	s22, [pc, #632]	; 8019d28 <SFXClassicSynthFrame+0x324>
 8019ab2:	eddf aa9e 	vldr	s21, [pc, #632]	; 8019d2c <SFXClassicSynthFrame+0x328>
 8019ab6:	9301      	str	r3, [sp, #4]
                float myMidiNote = tSimplePoly_getPitch(&poly, i);
 8019ab8:	b2fb      	uxtb	r3, r7
 8019aba:	4a9d      	ldr	r2, [pc, #628]	; (8019d30 <SFXClassicSynthFrame+0x32c>)
 8019abc:	4658      	mov	r0, fp
                    float tempFreq = freq[i] * (1.0f + (synthDetune[i][j] * displayValues[3]));
 8019abe:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
                float myMidiNote = tSimplePoly_getPitch(&poly, i);
 8019ac2:	461c      	mov	r4, r3
 8019ac4:	4619      	mov	r1, r3
 8019ac6:	9303      	str	r3, [sp, #12]
 8019ac8:	eb02 050a 	add.w	r5, r2, sl
 8019acc:	f00a ffa0 	bl	8024a10 <tSimplePoly_getPitch>
 8019ad0:	ee07 0a90 	vmov	s15, r0
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8019ad4:	4621      	mov	r1, r4
 8019ad6:	4658      	mov	r0, fp
                float myMidiNote = tSimplePoly_getPitch(&poly, i);
 8019ad8:	eeb8 aae7 	vcvt.f32.s32	s20, s15
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8019adc:	f00a ff98 	bl	8024a10 <tSimplePoly_getPitch>
 8019ae0:	ee07 0a90 	vmov	s15, r0
 8019ae4:	4b93      	ldr	r3, [pc, #588]	; (8019d34 <SFXClassicSynthFrame+0x330>)
 8019ae6:	f10a 090c 	add.w	r9, sl, #12
 8019aea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019aee:	ed93 0a02 	vldr	s0, [r3, #8]
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8019af2:	4b91      	ldr	r3, [pc, #580]	; (8019d38 <SFXClassicSynthFrame+0x334>)
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 8019af4:	ee37 7a00 	vadd.f32	s14, s14, s0
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8019af8:	7818      	ldrb	r0, [r3, #0]
 8019afa:	4b90      	ldr	r3, [pc, #576]	; (8019d3c <SFXClassicSynthFrame+0x338>)
 8019afc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019b00:	ee17 1a90 	vmov	r1, s15
 8019b04:	1a09      	subs	r1, r1, r0
 8019b06:	fb83 3401 	smull	r3, r4, r3, r1
 8019b0a:	17c8      	asrs	r0, r1, #31
            float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8019b0c:	4b8c      	ldr	r3, [pc, #560]	; (8019d40 <SFXClassicSynthFrame+0x33c>)
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 8019b0e:	ebc0 0064 	rsb	r0, r0, r4, asr #1
 8019b12:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019b16:	eba1 0080 	sub.w	r0, r1, r0, lsl #2
 8019b1a:	ee07 0a90 	vmov	s15, r0
 8019b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 8019b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b26:	ee17 1a90 	vmov	r1, s15
 8019b2a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8019b2e:	ed91 0a00 	vldr	s0, [r1]
            freq[voice] = LEAF_midiToFrequency(tunedNote);
 8019b32:	ee37 0a00 	vadd.f32	s0, s14, s0
 8019b36:	f00a f9d1 	bl	8023edc <LEAF_midiToFrequency>
 8019b3a:	eca8 0a01 	vstmia	r8!, {s0}
                    float tempFreq = freq[i] * (1.0f + (synthDetune[i][j] * displayValues[3]));
 8019b3e:	eeb0 8a49 	vmov.f32	s16, s18
 8019b42:	ecb5 7a01 	vldmia	r5!, {s14}
 8019b46:	edd6 7a03 	vldr	s15, [r6, #12]
 8019b4a:	4b7e      	ldr	r3, [pc, #504]	; (8019d44 <SFXClassicSynthFrame+0x340>)
 8019b4c:	eea7 8a27 	vfma.f32	s16, s14, s15
 8019b50:	eb03 040a 	add.w	r4, r3, sl
                    tSawtooth_setFreq(&osc[(i * NUM_OSC_PER_VOICE) + j], tempFreq);
 8019b54:	4b7c      	ldr	r3, [pc, #496]	; (8019d48 <SFXClassicSynthFrame+0x344>)
 8019b56:	eb03 000a 	add.w	r0, r3, sl
 8019b5a:	f10a 0a04 	add.w	sl, sl, #4
                    float tempFreq = freq[i] * (1.0f + (synthDetune[i][j] * displayValues[3]));
 8019b5e:	ee28 8a00 	vmul.f32	s16, s16, s0
                    tSawtooth_setFreq(&osc[(i * NUM_OSC_PER_VOICE) + j], tempFreq);
 8019b62:	eeb0 0a48 	vmov.f32	s0, s16
 8019b66:	f00b f815 	bl	8024b94 <tSawtooth_setFreq>
                    tRosenbergGlottalPulse_setFreq(&glottal[(i * NUM_OSC_PER_VOICE) + j], tempFreq);
 8019b6a:	eeb0 0a48 	vmov.f32	s0, s16
 8019b6e:	4620      	mov	r0, r4
 8019b70:	f006 ff70 	bl	8020a54 <tRosenbergGlottalPulse_setFreq>
                    tRosenbergGlottalPulse_setPulseLength(&glottal[(i * NUM_OSC_PER_VOICE) + j], tempLFO1);
 8019b74:	eeb0 0a69 	vmov.f32	s0, s19
 8019b78:	4620      	mov	r0, r4
 8019b7a:	f006 ff87 	bl	8020a8c <tRosenbergGlottalPulse_setPulseLength>
                    tRosenbergGlottalPulse_setOpenLength(&glottal[(i * NUM_OSC_PER_VOICE) + j], tempLFO2);
 8019b7e:	eeb0 0a68 	vmov.f32	s0, s17
 8019b82:	4620      	mov	r0, r4
 8019b84:	f006 ff74 	bl	8020a70 <tRosenbergGlottalPulse_setOpenLength>
                for (int j = 0; j < NUM_OSC_PER_VOICE; j++)
 8019b88:	45ca      	cmp	sl, r9
 8019b8a:	d002      	beq.n	8019b92 <SFXClassicSynthFrame+0x18e>
 8019b8c:	ed18 0a01 	vldr	s0, [r8, #-4]
 8019b90:	e7d5      	b.n	8019b3e <SFXClassicSynthFrame+0x13a>
                float tempFreq2 = displayValues[1] +  keyFollowFilt;
 8019b92:	edd6 7a02 	vldr	s15, [r6, #8]
                tempFreq2 = LEAF_clip(0.0f, tempFreq2, 4095.0f);
 8019b96:	eeb0 1a4b 	vmov.f32	s2, s22
                float tempFreq2 = displayValues[1] +  keyFollowFilt;
 8019b9a:	edd6 0a01 	vldr	s1, [r6, #4]
                tempFreq2 = LEAF_clip(0.0f, tempFreq2, 4095.0f);
 8019b9e:	eeb0 0a6a 	vmov.f32	s0, s21
                float tempFreq2 = displayValues[1] +  keyFollowFilt;
 8019ba2:	ee67 7aab 	vmul.f32	s15, s15, s23
                tempFreq2 = LEAF_clip(0.0f, tempFreq2, 4095.0f);
 8019ba6:	eeea 0a27 	vfma.f32	s1, s20, s15
 8019baa:	f00a f8ad 	bl	8023d08 <LEAF_clip>
                if (numVoices > 1)
 8019bae:	9b02      	ldr	r3, [sp, #8]
                filtFreqs[i] = (uint16_t) tempFreq2;
 8019bb0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
                if (numVoices > 1)
 8019bb4:	7819      	ldrb	r1, [r3, #0]
                filtFreqs[i] = (uint16_t) tempFreq2;
 8019bb6:	9b01      	ldr	r3, [sp, #4]
 8019bb8:	ee10 2a10 	vmov	r2, s0
                if (numVoices > 1)
 8019bbc:	2901      	cmp	r1, #1
                filtFreqs[i] = (uint16_t) tempFreq2;
 8019bbe:	f823 2f02 	strh.w	r2, [r3, #2]!
 8019bc2:	9301      	str	r3, [sp, #4]
                if (numVoices > 1)
 8019bc4:	d907      	bls.n	8019bd6 <SFXClassicSynthFrame+0x1d2>
                    if (poly->voices[i][0] == -2)
 8019bc6:	f8db 0000 	ldr.w	r0, [fp]
 8019bca:	6900      	ldr	r0, [r0, #16]
 8019bcc:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 8019bd0:	6800      	ldr	r0, [r0, #0]
 8019bd2:	3002      	adds	r0, #2
 8019bd4:	d008      	beq.n	8019be8 <SFXClassicSynthFrame+0x1e4>
            for (int i = 0; i < numVoices; i++)
 8019bd6:	3701      	adds	r7, #1
 8019bd8:	42b9      	cmp	r1, r7
 8019bda:	f73f af6d 	bgt.w	8019ab8 <SFXClassicSynthFrame+0xb4>
        }
 8019bde:	b005      	add	sp, #20
 8019be0:	ecbd 8b08 	vpop	{d8-d11}
 8019be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        if (polyEnvs[i]->whichStage == env_idle)
 8019be8:	4b58      	ldr	r3, [pc, #352]	; (8019d4c <SFXClassicSynthFrame+0x348>)
 8019bea:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8019bee:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019bf0:	2800      	cmp	r0, #0
 8019bf2:	d1f0      	bne.n	8019bd6 <SFXClassicSynthFrame+0x1d2>
                            tSimplePoly_deactivateVoice(&poly, i);
 8019bf4:	9903      	ldr	r1, [sp, #12]
 8019bf6:	4658      	mov	r0, fp
 8019bf8:	f00a fe30 	bl	802485c <tSimplePoly_deactivateVoice>
 8019bfc:	9b02      	ldr	r3, [sp, #8]
 8019bfe:	7819      	ldrb	r1, [r3, #0]
 8019c00:	e7e9      	b.n	8019bd6 <SFXClassicSynthFrame+0x1d2>
                numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8019c02:	4d40      	ldr	r5, [pc, #256]	; (8019d04 <SFXClassicSynthFrame+0x300>)
                tSimplePoly_setNumVoices(&poly, numVoices);
 8019c04:	4852      	ldr	r0, [pc, #328]	; (8019d50 <SFXClassicSynthFrame+0x34c>)
                numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8019c06:	782a      	ldrb	r2, [r5, #0]
 8019c08:	9502      	str	r5, [sp, #8]
 8019c0a:	2a01      	cmp	r2, #1
 8019c0c:	bf98      	it	ls
 8019c0e:	2308      	movls	r3, #8
                tSimplePoly_setNumVoices(&poly, numVoices);
 8019c10:	4619      	mov	r1, r3
                numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 8019c12:	702b      	strb	r3, [r5, #0]
                tSimplePoly_setNumVoices(&poly, numVoices);
 8019c14:	f00a fed8 	bl	80249c8 <tSimplePoly_setNumVoices>
                setLED_A(numVoices == 1);
 8019c18:	7828      	ldrb	r0, [r5, #0]
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8019c1a:	2300      	movs	r3, #0
                setLED_A(numVoices == 1);
 8019c1c:	f1a0 0001 	sub.w	r0, r0, #1
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 8019c20:	7523      	strb	r3, [r4, #20]
                setLED_A(numVoices == 1);
 8019c22:	fab0 f080 	clz	r0, r0
 8019c26:	0940      	lsrs	r0, r0, #5
 8019c28:	f7f9 feca 	bl	80139c0 <setLED_A>
            if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 8019c2c:	7e23      	ldrb	r3, [r4, #24]
 8019c2e:	2b01      	cmp	r3, #1
 8019c30:	f47f aef8 	bne.w	8019a24 <SFXClassicSynthFrame+0x20>
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8019c34:	2300      	movs	r3, #0
                setLED_Edit(0);
 8019c36:	4618      	mov	r0, r3
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 8019c38:	7623      	strb	r3, [r4, #24]
                setLED_Edit(0);
 8019c3a:	f7f9 fe85 	bl	8013948 <setLED_Edit>
 8019c3e:	e6f1      	b.n	8019a24 <SFXClassicSynthFrame+0x20>
                        displayValues[16] = knobs[16];  // fade between sawtooth and glottal pulse
 8019c40:	4b44      	ldr	r3, [pc, #272]	; (8019d54 <SFXClassicSynthFrame+0x350>)
 8019c42:	4e34      	ldr	r6, [pc, #208]	; (8019d14 <SFXClassicSynthFrame+0x310>)
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	6433      	str	r3, [r6, #64]	; 0x40
                        break;
 8019c48:	e70f      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
                        displayValues[15] = knobs[15] * 4095.0f;  // filter envelope amount
 8019c4a:	4b43      	ldr	r3, [pc, #268]	; (8019d58 <SFXClassicSynthFrame+0x354>)
 8019c4c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8019d28 <SFXClassicSynthFrame+0x324>
 8019c50:	edd3 7a00 	vldr	s15, [r3]
 8019c54:	4e2f      	ldr	r6, [pc, #188]	; (8019d14 <SFXClassicSynthFrame+0x310>)
 8019c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019c5a:	edc6 7a0f 	vstr	s15, [r6, #60]	; 0x3c
                        break;
 8019c5e:	e704      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
                        displayValues[14] = knobs[14]; //leak
 8019c60:	4b3e      	ldr	r3, [pc, #248]	; (8019d5c <SFXClassicSynthFrame+0x358>)
                        for (int i = 0; i < numVoices; i++)
 8019c62:	9f02      	ldr	r7, [sp, #8]
                        displayValues[14] = knobs[14]; //leak
 8019c64:	edd3 7a00 	vldr	s15, [r3]
 8019c68:	4e2a      	ldr	r6, [pc, #168]	; (8019d14 <SFXClassicSynthFrame+0x310>)
                        for (int i = 0; i < numVoices; i++)
 8019c6a:	783b      	ldrb	r3, [r7, #0]
                        displayValues[14] = knobs[14]; //leak
 8019c6c:	edc6 7a0e 	vstr	s15, [r6, #56]	; 0x38
                        for (int i = 0; i < numVoices; i++)
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	f43f aefa 	beq.w	8019a6a <SFXClassicSynthFrame+0x66>
                            tADSR4_setLeakFactor(&polyFiltEnvs[i], ((1.0f - displayValues[14]) * 0.00005f) + 0.99995f);
 8019c76:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8019c7a:	4d39      	ldr	r5, [pc, #228]	; (8019d60 <SFXClassicSynthFrame+0x35c>)
                        for (int i = 0; i < numVoices; i++)
 8019c7c:	2400      	movs	r4, #0
                            tADSR4_setLeakFactor(&polyFiltEnvs[i], ((1.0f - displayValues[14]) * 0.00005f) + 0.99995f);
 8019c7e:	eddf 8a39 	vldr	s17, [pc, #228]	; 8019d64 <SFXClassicSynthFrame+0x360>
 8019c82:	ed9f 8a39 	vldr	s16, [pc, #228]	; 8019d68 <SFXClassicSynthFrame+0x364>
 8019c86:	e001      	b.n	8019c8c <SFXClassicSynthFrame+0x288>
 8019c88:	edd6 7a0e 	vldr	s15, [r6, #56]	; 0x38
 8019c8c:	ee79 7a67 	vsub.f32	s15, s18, s15
 8019c90:	4628      	mov	r0, r5
 8019c92:	eeb0 0a48 	vmov.f32	s0, s16
                        for (int i = 0; i < numVoices; i++)
 8019c96:	3401      	adds	r4, #1
 8019c98:	3504      	adds	r5, #4
                            tADSR4_setLeakFactor(&polyFiltEnvs[i], ((1.0f - displayValues[14]) * 0.00005f) + 0.99995f);
 8019c9a:	eea7 0aa8 	vfma.f32	s0, s15, s17
 8019c9e:	f008 f849 	bl	8021d34 <tADSR4_setLeakFactor>
                        for (int i = 0; i < numVoices; i++)
 8019ca2:	783b      	ldrb	r3, [r7, #0]
 8019ca4:	42a3      	cmp	r3, r4
 8019ca6:	dcef      	bgt.n	8019c88 <SFXClassicSynthFrame+0x284>
 8019ca8:	e6df      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
                        displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019caa:	9a02      	ldr	r2, [sp, #8]
 8019cac:	4b2f      	ldr	r3, [pc, #188]	; (8019d6c <SFXClassicSynthFrame+0x368>)
 8019cae:	ed92 7a40 	vldr	s14, [r2, #256]	; 0x100
 8019cb2:	4617      	mov	r7, r2
 8019cb4:	edd3 7a00 	vldr	s15, [r3]
 8019cb8:	4b2d      	ldr	r3, [pc, #180]	; (8019d70 <SFXClassicSynthFrame+0x36c>)
 8019cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019cbe:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8019d74 <SFXClassicSynthFrame+0x370>
 8019cc2:	4e14      	ldr	r6, [pc, #80]	; (8019d14 <SFXClassicSynthFrame+0x310>)
                        for (int i = 0; i < numVoices; i++)
 8019cc4:	7812      	ldrb	r2, [r2, #0]
                        displayValues[13] = expBuffer[(int)(knobs[13] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019cc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019cca:	ee17 1a90 	vmov	r1, s15
 8019cce:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019cd2:	ed93 0a00 	vldr	s0, [r3]
 8019cd6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019cda:	ed86 0a0d 	vstr	s0, [r6, #52]	; 0x34
                        for (int i = 0; i < numVoices; i++)
 8019cde:	2a00      	cmp	r2, #0
 8019ce0:	f43f aec3 	beq.w	8019a6a <SFXClassicSynthFrame+0x66>
 8019ce4:	4d1e      	ldr	r5, [pc, #120]	; (8019d60 <SFXClassicSynthFrame+0x35c>)
 8019ce6:	2400      	movs	r4, #0
 8019ce8:	e001      	b.n	8019cee <SFXClassicSynthFrame+0x2ea>
 8019cea:	ed96 0a0d 	vldr	s0, [r6, #52]	; 0x34
                            tADSR4_setRelease(&polyFiltEnvs[i], displayValues[13]);
 8019cee:	4628      	mov	r0, r5
                        for (int i = 0; i < numVoices; i++)
 8019cf0:	3401      	adds	r4, #1
                            tADSR4_setRelease(&polyFiltEnvs[i], displayValues[13]);
 8019cf2:	f008 f811 	bl	8021d18 <tADSR4_setRelease>
                        for (int i = 0; i < numVoices; i++)
 8019cf6:	783b      	ldrb	r3, [r7, #0]
 8019cf8:	3504      	adds	r5, #4
 8019cfa:	42a3      	cmp	r3, r4
 8019cfc:	dcf5      	bgt.n	8019cea <SFXClassicSynthFrame+0x2e6>
 8019cfe:	e6b4      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
 8019d00:	20018724 	.word	0x20018724
 8019d04:	20000040 	.word	0x20000040
 8019d08:	200002e8 	.word	0x200002e8
 8019d0c:	20000696 	.word	0x20000696
 8019d10:	20003390 	.word	0x20003390
 8019d14:	200187d4 	.word	0x200187d4
 8019d18:	200176cc 	.word	0x200176cc
 8019d1c:	200177b0 	.word	0x200177b0
 8019d20:	20017282 	.word	0x20017282
 8019d24:	42800000 	.word	0x42800000
 8019d28:	457ff000 	.word	0x457ff000
 8019d2c:	00000000 	.word	0x00000000
 8019d30:	20018344 	.word	0x20018344
 8019d34:	20000548 	.word	0x20000548
 8019d38:	2000065c 	.word	0x2000065c
 8019d3c:	2aaaaaab 	.word	0x2aaaaaab
 8019d40:	20000664 	.word	0x20000664
 8019d44:	20002888 	.word	0x20002888
 8019d48:	2001731c 	.word	0x2001731c
 8019d4c:	200176dc 	.word	0x200176dc
 8019d50:	20017560 	.word	0x20017560
 8019d54:	200033d0 	.word	0x200033d0
 8019d58:	200033cc 	.word	0x200033cc
 8019d5c:	200033c8 	.word	0x200033c8
 8019d60:	20001f88 	.word	0x20001f88
 8019d64:	3851b717 	.word	0x3851b717
 8019d68:	3f7ffcb9 	.word	0x3f7ffcb9
 8019d6c:	200033c4 	.word	0x200033c4
 8019d70:	20017084 	.word	0x20017084
 8019d74:	46000000 	.word	0x46000000
 8019d78:	2000347c 	.word	0x2000347c
                        displayValues[12] = knobs[12]; //sus
 8019d7c:	4bb0      	ldr	r3, [pc, #704]	; (801a040 <SFXClassicSynthFrame+0x63c>)
                        for (int i = 0; i < numVoices; i++)
 8019d7e:	9f02      	ldr	r7, [sp, #8]
                        displayValues[12] = knobs[12]; //sus
 8019d80:	ed93 0a00 	vldr	s0, [r3]
 8019d84:	4eaf      	ldr	r6, [pc, #700]	; (801a044 <SFXClassicSynthFrame+0x640>)
                        for (int i = 0; i < numVoices; i++)
 8019d86:	783b      	ldrb	r3, [r7, #0]
                        displayValues[12] = knobs[12]; //sus
 8019d88:	ed86 0a0c 	vstr	s0, [r6, #48]	; 0x30
                        for (int i = 0; i < numVoices; i++)
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	f43f ae6c 	beq.w	8019a6a <SFXClassicSynthFrame+0x66>
 8019d92:	4dad      	ldr	r5, [pc, #692]	; (801a048 <SFXClassicSynthFrame+0x644>)
 8019d94:	2400      	movs	r4, #0
 8019d96:	e001      	b.n	8019d9c <SFXClassicSynthFrame+0x398>
 8019d98:	ed96 0a0c 	vldr	s0, [r6, #48]	; 0x30
                            tADSR4_setSustain(&polyFiltEnvs[i], displayValues[12]);
 8019d9c:	4628      	mov	r0, r5
                        for (int i = 0; i < numVoices; i++)
 8019d9e:	3401      	adds	r4, #1
                            tADSR4_setSustain(&polyFiltEnvs[i], displayValues[12]);
 8019da0:	f007 ffa4 	bl	8021cec <tADSR4_setSustain>
                        for (int i = 0; i < numVoices; i++)
 8019da4:	783b      	ldrb	r3, [r7, #0]
 8019da6:	3504      	adds	r5, #4
 8019da8:	42a3      	cmp	r3, r4
 8019daa:	dcf5      	bgt.n	8019d98 <SFXClassicSynthFrame+0x394>
 8019dac:	e65d      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
                        displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019dae:	9a02      	ldr	r2, [sp, #8]
 8019db0:	4ba6      	ldr	r3, [pc, #664]	; (801a04c <SFXClassicSynthFrame+0x648>)
 8019db2:	ed92 7a40 	vldr	s14, [r2, #256]	; 0x100
 8019db6:	4617      	mov	r7, r2
 8019db8:	edd3 7a00 	vldr	s15, [r3]
 8019dbc:	4ba4      	ldr	r3, [pc, #656]	; (801a050 <SFXClassicSynthFrame+0x64c>)
 8019dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019dc2:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 801a054 <SFXClassicSynthFrame+0x650>
 8019dc6:	4e9f      	ldr	r6, [pc, #636]	; (801a044 <SFXClassicSynthFrame+0x640>)
                        for (int i = 0; i < numVoices; i++)
 8019dc8:	7812      	ldrb	r2, [r2, #0]
                        displayValues[11] = expBuffer[(int)(knobs[11] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019dce:	ee17 1a90 	vmov	r1, s15
 8019dd2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019dd6:	ed93 0a00 	vldr	s0, [r3]
 8019dda:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019dde:	ed86 0a0b 	vstr	s0, [r6, #44]	; 0x2c
                        for (int i = 0; i < numVoices; i++)
 8019de2:	2a00      	cmp	r2, #0
 8019de4:	f43f ae41 	beq.w	8019a6a <SFXClassicSynthFrame+0x66>
 8019de8:	4d97      	ldr	r5, [pc, #604]	; (801a048 <SFXClassicSynthFrame+0x644>)
 8019dea:	2400      	movs	r4, #0
 8019dec:	e001      	b.n	8019df2 <SFXClassicSynthFrame+0x3ee>
 8019dee:	ed96 0a0b 	vldr	s0, [r6, #44]	; 0x2c
                            tADSR4_setDecay(&polyFiltEnvs[i], displayValues[11]);
 8019df2:	4628      	mov	r0, r5
                        for (int i = 0; i < numVoices; i++)
 8019df4:	3401      	adds	r4, #1
                            tADSR4_setDecay(&polyFiltEnvs[i], displayValues[11]);
 8019df6:	f007 ff6b 	bl	8021cd0 <tADSR4_setDecay>
                        for (int i = 0; i < numVoices; i++)
 8019dfa:	783b      	ldrb	r3, [r7, #0]
 8019dfc:	3504      	adds	r5, #4
 8019dfe:	42a3      	cmp	r3, r4
 8019e00:	dcf5      	bgt.n	8019dee <SFXClassicSynthFrame+0x3ea>
 8019e02:	e632      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
                        displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019e04:	9a02      	ldr	r2, [sp, #8]
 8019e06:	4b94      	ldr	r3, [pc, #592]	; (801a058 <SFXClassicSynthFrame+0x654>)
 8019e08:	ed92 7a40 	vldr	s14, [r2, #256]	; 0x100
 8019e0c:	4617      	mov	r7, r2
 8019e0e:	edd3 7a00 	vldr	s15, [r3]
 8019e12:	4b8f      	ldr	r3, [pc, #572]	; (801a050 <SFXClassicSynthFrame+0x64c>)
 8019e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019e18:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 801a054 <SFXClassicSynthFrame+0x650>
 8019e1c:	4e89      	ldr	r6, [pc, #548]	; (801a044 <SFXClassicSynthFrame+0x640>)
                        for (int i = 0; i < numVoices; i++)
 8019e1e:	7812      	ldrb	r2, [r2, #0]
                        displayValues[10] = expBuffer[(int)(knobs[10] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e24:	ee17 1a90 	vmov	r1, s15
 8019e28:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019e2c:	ed93 0a00 	vldr	s0, [r3]
 8019e30:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019e34:	ed86 0a0a 	vstr	s0, [r6, #40]	; 0x28
                        for (int i = 0; i < numVoices; i++)
 8019e38:	2a00      	cmp	r2, #0
 8019e3a:	f43f ae16 	beq.w	8019a6a <SFXClassicSynthFrame+0x66>
 8019e3e:	4d82      	ldr	r5, [pc, #520]	; (801a048 <SFXClassicSynthFrame+0x644>)
 8019e40:	2400      	movs	r4, #0
 8019e42:	e001      	b.n	8019e48 <SFXClassicSynthFrame+0x444>
 8019e44:	ed96 0a0a 	vldr	s0, [r6, #40]	; 0x28
                            tADSR4_setAttack(&polyFiltEnvs[i], displayValues[10]);
 8019e48:	4628      	mov	r0, r5
                        for (int i = 0; i < numVoices; i++)
 8019e4a:	3401      	adds	r4, #1
                            tADSR4_setAttack(&polyFiltEnvs[i], displayValues[10]);
 8019e4c:	f007 ff32 	bl	8021cb4 <tADSR4_setAttack>
                        for (int i = 0; i < numVoices; i++)
 8019e50:	783b      	ldrb	r3, [r7, #0]
 8019e52:	3504      	adds	r5, #4
 8019e54:	42a3      	cmp	r3, r4
 8019e56:	dcf5      	bgt.n	8019e44 <SFXClassicSynthFrame+0x440>
 8019e58:	e607      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
                        displayValues[9] = knobs[9]; //leak
 8019e5a:	4b80      	ldr	r3, [pc, #512]	; (801a05c <SFXClassicSynthFrame+0x658>)
                        for (int i = 0; i < numVoices; i++)
 8019e5c:	9f02      	ldr	r7, [sp, #8]
                        displayValues[9] = knobs[9]; //leak
 8019e5e:	edd3 7a00 	vldr	s15, [r3]
 8019e62:	4e78      	ldr	r6, [pc, #480]	; (801a044 <SFXClassicSynthFrame+0x640>)
                        for (int i = 0; i < numVoices; i++)
 8019e64:	783b      	ldrb	r3, [r7, #0]
                        displayValues[9] = knobs[9]; //leak
 8019e66:	edc6 7a09 	vstr	s15, [r6, #36]	; 0x24
                        for (int i = 0; i < numVoices; i++)
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	f43f adfd 	beq.w	8019a6a <SFXClassicSynthFrame+0x66>
                            tADSR4_setLeakFactor(&polyEnvs[i], ((1.0f - displayValues[9]) * 0.00005f) + 0.99995f);
 8019e70:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8019e74:	4d7a      	ldr	r5, [pc, #488]	; (801a060 <SFXClassicSynthFrame+0x65c>)
                        for (int i = 0; i < numVoices; i++)
 8019e76:	2400      	movs	r4, #0
                            tADSR4_setLeakFactor(&polyEnvs[i], ((1.0f - displayValues[9]) * 0.00005f) + 0.99995f);
 8019e78:	eddf 8a7a 	vldr	s17, [pc, #488]	; 801a064 <SFXClassicSynthFrame+0x660>
 8019e7c:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 801a068 <SFXClassicSynthFrame+0x664>
 8019e80:	e001      	b.n	8019e86 <SFXClassicSynthFrame+0x482>
 8019e82:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
 8019e86:	ee79 7a67 	vsub.f32	s15, s18, s15
 8019e8a:	4628      	mov	r0, r5
 8019e8c:	eeb0 0a48 	vmov.f32	s0, s16
                        for (int i = 0; i < numVoices; i++)
 8019e90:	3401      	adds	r4, #1
 8019e92:	3504      	adds	r5, #4
                            tADSR4_setLeakFactor(&polyEnvs[i], ((1.0f - displayValues[9]) * 0.00005f) + 0.99995f);
 8019e94:	eea7 0aa8 	vfma.f32	s0, s15, s17
 8019e98:	f007 ff4c 	bl	8021d34 <tADSR4_setLeakFactor>
                        for (int i = 0; i < numVoices; i++)
 8019e9c:	783b      	ldrb	r3, [r7, #0]
 8019e9e:	42a3      	cmp	r3, r4
 8019ea0:	dcef      	bgt.n	8019e82 <SFXClassicSynthFrame+0x47e>
 8019ea2:	e5e2      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
                        displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019ea4:	9a02      	ldr	r2, [sp, #8]
 8019ea6:	4b71      	ldr	r3, [pc, #452]	; (801a06c <SFXClassicSynthFrame+0x668>)
 8019ea8:	ed92 7a40 	vldr	s14, [r2, #256]	; 0x100
 8019eac:	4617      	mov	r7, r2
 8019eae:	edd3 7a00 	vldr	s15, [r3]
 8019eb2:	4b67      	ldr	r3, [pc, #412]	; (801a050 <SFXClassicSynthFrame+0x64c>)
 8019eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019eb8:	ed9f 7a66 	vldr	s14, [pc, #408]	; 801a054 <SFXClassicSynthFrame+0x650>
 8019ebc:	4e61      	ldr	r6, [pc, #388]	; (801a044 <SFXClassicSynthFrame+0x640>)
                        for (int i = 0; i < numVoices; i++)
 8019ebe:	7812      	ldrb	r2, [r2, #0]
                        displayValues[8] = expBuffer[(int)(knobs[8] * expBufferSizeMinusOne)] * 8192.0f; //rel
 8019ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019ec4:	ee17 1a90 	vmov	r1, s15
 8019ec8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019ecc:	ed93 0a00 	vldr	s0, [r3]
 8019ed0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019ed4:	ed86 0a08 	vstr	s0, [r6, #32]
                        for (int i = 0; i < numVoices; i++)
 8019ed8:	2a00      	cmp	r2, #0
 8019eda:	f43f adc6 	beq.w	8019a6a <SFXClassicSynthFrame+0x66>
 8019ede:	4d60      	ldr	r5, [pc, #384]	; (801a060 <SFXClassicSynthFrame+0x65c>)
 8019ee0:	2400      	movs	r4, #0
 8019ee2:	e001      	b.n	8019ee8 <SFXClassicSynthFrame+0x4e4>
 8019ee4:	ed96 0a08 	vldr	s0, [r6, #32]
                            tADSR4_setRelease(&polyEnvs[i], displayValues[8]);
 8019ee8:	4628      	mov	r0, r5
                        for (int i = 0; i < numVoices; i++)
 8019eea:	3401      	adds	r4, #1
                            tADSR4_setRelease(&polyEnvs[i], displayValues[8]);
 8019eec:	f007 ff14 	bl	8021d18 <tADSR4_setRelease>
                        for (int i = 0; i < numVoices; i++)
 8019ef0:	783b      	ldrb	r3, [r7, #0]
 8019ef2:	3504      	adds	r5, #4
 8019ef4:	42a3      	cmp	r3, r4
 8019ef6:	dcf5      	bgt.n	8019ee4 <SFXClassicSynthFrame+0x4e0>
 8019ef8:	e5b7      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
                        displayValues[7] = knobs[7]; //sus
 8019efa:	4b5d      	ldr	r3, [pc, #372]	; (801a070 <SFXClassicSynthFrame+0x66c>)
                        for (int i = 0; i < numVoices; i++)
 8019efc:	9f02      	ldr	r7, [sp, #8]
                        displayValues[7] = knobs[7]; //sus
 8019efe:	ed93 0a00 	vldr	s0, [r3]
 8019f02:	4e50      	ldr	r6, [pc, #320]	; (801a044 <SFXClassicSynthFrame+0x640>)
                        for (int i = 0; i < numVoices; i++)
 8019f04:	783b      	ldrb	r3, [r7, #0]
                        displayValues[7] = knobs[7]; //sus
 8019f06:	ed86 0a07 	vstr	s0, [r6, #28]
                        for (int i = 0; i < numVoices; i++)
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	f43f adad 	beq.w	8019a6a <SFXClassicSynthFrame+0x66>
 8019f10:	4d53      	ldr	r5, [pc, #332]	; (801a060 <SFXClassicSynthFrame+0x65c>)
 8019f12:	2400      	movs	r4, #0
 8019f14:	e001      	b.n	8019f1a <SFXClassicSynthFrame+0x516>
 8019f16:	ed96 0a07 	vldr	s0, [r6, #28]
                            tADSR4_setSustain(&polyEnvs[i], displayValues[7]);
 8019f1a:	4628      	mov	r0, r5
                        for (int i = 0; i < numVoices; i++)
 8019f1c:	3401      	adds	r4, #1
                            tADSR4_setSustain(&polyEnvs[i], displayValues[7]);
 8019f1e:	f007 fee5 	bl	8021cec <tADSR4_setSustain>
                        for (int i = 0; i < numVoices; i++)
 8019f22:	783b      	ldrb	r3, [r7, #0]
 8019f24:	3504      	adds	r5, #4
 8019f26:	42a3      	cmp	r3, r4
 8019f28:	dcf5      	bgt.n	8019f16 <SFXClassicSynthFrame+0x512>
 8019f2a:	e59e      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
                        displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019f2c:	9a02      	ldr	r2, [sp, #8]
 8019f2e:	4b51      	ldr	r3, [pc, #324]	; (801a074 <SFXClassicSynthFrame+0x670>)
 8019f30:	ed92 7a40 	vldr	s14, [r2, #256]	; 0x100
 8019f34:	4617      	mov	r7, r2
 8019f36:	edd3 7a00 	vldr	s15, [r3]
 8019f3a:	4b45      	ldr	r3, [pc, #276]	; (801a050 <SFXClassicSynthFrame+0x64c>)
 8019f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019f40:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801a054 <SFXClassicSynthFrame+0x650>
 8019f44:	4e3f      	ldr	r6, [pc, #252]	; (801a044 <SFXClassicSynthFrame+0x640>)
                        for (int i = 0; i < numVoices; i++)
 8019f46:	7812      	ldrb	r2, [r2, #0]
                        displayValues[6] = expBuffer[(int)(knobs[6] * expBufferSizeMinusOne)] * 8192.0f; //dec
 8019f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f4c:	ee17 1a90 	vmov	r1, s15
 8019f50:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019f54:	ed93 0a00 	vldr	s0, [r3]
 8019f58:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019f5c:	ed86 0a06 	vstr	s0, [r6, #24]
                        for (int i = 0; i < numVoices; i++)
 8019f60:	2a00      	cmp	r2, #0
 8019f62:	f43f ad82 	beq.w	8019a6a <SFXClassicSynthFrame+0x66>
 8019f66:	4d3e      	ldr	r5, [pc, #248]	; (801a060 <SFXClassicSynthFrame+0x65c>)
 8019f68:	2400      	movs	r4, #0
 8019f6a:	e001      	b.n	8019f70 <SFXClassicSynthFrame+0x56c>
 8019f6c:	ed96 0a06 	vldr	s0, [r6, #24]
                            tADSR4_setDecay(&polyEnvs[i], displayValues[6]);
 8019f70:	4628      	mov	r0, r5
                        for (int i = 0; i < numVoices; i++)
 8019f72:	3401      	adds	r4, #1
                            tADSR4_setDecay(&polyEnvs[i], displayValues[6]);
 8019f74:	f007 feac 	bl	8021cd0 <tADSR4_setDecay>
                        for (int i = 0; i < numVoices; i++)
 8019f78:	783b      	ldrb	r3, [r7, #0]
 8019f7a:	3504      	adds	r5, #4
 8019f7c:	42a3      	cmp	r3, r4
 8019f7e:	dcf5      	bgt.n	8019f6c <SFXClassicSynthFrame+0x568>
 8019f80:	e573      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
                        displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019f82:	9a02      	ldr	r2, [sp, #8]
 8019f84:	4b3c      	ldr	r3, [pc, #240]	; (801a078 <SFXClassicSynthFrame+0x674>)
 8019f86:	ed92 7a40 	vldr	s14, [r2, #256]	; 0x100
 8019f8a:	4617      	mov	r7, r2
 8019f8c:	edd3 7a00 	vldr	s15, [r3]
 8019f90:	4b2f      	ldr	r3, [pc, #188]	; (801a050 <SFXClassicSynthFrame+0x64c>)
 8019f92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019f96:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801a054 <SFXClassicSynthFrame+0x650>
 8019f9a:	4e2a      	ldr	r6, [pc, #168]	; (801a044 <SFXClassicSynthFrame+0x640>)
                        for (int i = 0; i < numVoices; i++)
 8019f9c:	7812      	ldrb	r2, [r2, #0]
                        displayValues[5] = expBuffer[(int)(knobs[5] * expBufferSizeMinusOne)] * 8192.0f; //att
 8019f9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019fa2:	ee17 1a90 	vmov	r1, s15
 8019fa6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019faa:	ed93 0a00 	vldr	s0, [r3]
 8019fae:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019fb2:	ed86 0a05 	vstr	s0, [r6, #20]
                        for (int i = 0; i < numVoices; i++)
 8019fb6:	2a00      	cmp	r2, #0
 8019fb8:	f43f ad57 	beq.w	8019a6a <SFXClassicSynthFrame+0x66>
 8019fbc:	4d28      	ldr	r5, [pc, #160]	; (801a060 <SFXClassicSynthFrame+0x65c>)
 8019fbe:	2400      	movs	r4, #0
 8019fc0:	e001      	b.n	8019fc6 <SFXClassicSynthFrame+0x5c2>
 8019fc2:	ed96 0a05 	vldr	s0, [r6, #20]
                            tADSR4_setAttack(&polyEnvs[i], displayValues[5]);
 8019fc6:	4628      	mov	r0, r5
                        for (int i = 0; i < numVoices; i++)
 8019fc8:	3401      	adds	r4, #1
                            tADSR4_setAttack(&polyEnvs[i], displayValues[5]);
 8019fca:	f007 fe73 	bl	8021cb4 <tADSR4_setAttack>
                        for (int i = 0; i < numVoices; i++)
 8019fce:	783b      	ldrb	r3, [r7, #0]
 8019fd0:	3504      	adds	r5, #4
 8019fd2:	42a3      	cmp	r3, r4
 8019fd4:	dcf5      	bgt.n	8019fc2 <SFXClassicSynthFrame+0x5be>
 8019fd6:	e548      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
                        displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 8019fd8:	4b28      	ldr	r3, [pc, #160]	; (801a07c <SFXClassicSynthFrame+0x678>)
 8019fda:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8019fde:	ed9f 0a28 	vldr	s0, [pc, #160]	; 801a080 <SFXClassicSynthFrame+0x67c>
 8019fe2:	ed93 7a00 	vldr	s14, [r3]
                        for (int i = 0; i < numVoices; i++)
 8019fe6:	9f02      	ldr	r7, [sp, #8]
                        displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 8019fe8:	eea7 0a27 	vfma.f32	s0, s14, s15
 8019fec:	4e15      	ldr	r6, [pc, #84]	; (801a044 <SFXClassicSynthFrame+0x640>)
                        for (int i = 0; i < numVoices; i++)
 8019fee:	783b      	ldrb	r3, [r7, #0]
                        displayValues[4] = (knobs[4] * 2.0f) + 0.4f; //filter Q
 8019ff0:	ed86 0a04 	vstr	s0, [r6, #16]
                        for (int i = 0; i < numVoices; i++)
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	f43f ad38 	beq.w	8019a6a <SFXClassicSynthFrame+0x66>
 8019ffa:	4d22      	ldr	r5, [pc, #136]	; (801a084 <SFXClassicSynthFrame+0x680>)
 8019ffc:	2400      	movs	r4, #0
 8019ffe:	e001      	b.n	801a004 <SFXClassicSynthFrame+0x600>
 801a000:	ed96 0a04 	vldr	s0, [r6, #16]
                            tEfficientSVF_setQ(&synthLP[i],displayValues[4]);
 801a004:	4628      	mov	r0, r5
                        for (int i = 0; i < numVoices; i++)
 801a006:	3401      	adds	r4, #1
                            tEfficientSVF_setQ(&synthLP[i],displayValues[4]);
 801a008:	f008 fcbc 	bl	8022984 <tEfficientSVF_setQ>
                        for (int i = 0; i < numVoices; i++)
 801a00c:	783b      	ldrb	r3, [r7, #0]
 801a00e:	3504      	adds	r5, #4
 801a010:	42a3      	cmp	r3, r4
 801a012:	dcf5      	bgt.n	801a000 <SFXClassicSynthFrame+0x5fc>
 801a014:	e529      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
                        displayValues[3] = knobs[3]; //detune
 801a016:	4b1c      	ldr	r3, [pc, #112]	; (801a088 <SFXClassicSynthFrame+0x684>)
 801a018:	4e0a      	ldr	r6, [pc, #40]	; (801a044 <SFXClassicSynthFrame+0x640>)
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	60f3      	str	r3, [r6, #12]
                        break;
 801a01e:	e524      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
                        displayValues[2] = knobs[2]; //keyfollow filter cutoff
 801a020:	4b1a      	ldr	r3, [pc, #104]	; (801a08c <SFXClassicSynthFrame+0x688>)
 801a022:	4e08      	ldr	r6, [pc, #32]	; (801a044 <SFXClassicSynthFrame+0x640>)
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	60b3      	str	r3, [r6, #8]
                        break;
 801a028:	e51f      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
                        displayValues[1] = knobs[1] * 4096.0f; //lowpass cutoff
 801a02a:	4b19      	ldr	r3, [pc, #100]	; (801a090 <SFXClassicSynthFrame+0x68c>)
 801a02c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801a094 <SFXClassicSynthFrame+0x690>
 801a030:	edd3 7a00 	vldr	s15, [r3]
 801a034:	4e03      	ldr	r6, [pc, #12]	; (801a044 <SFXClassicSynthFrame+0x640>)
 801a036:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a03a:	edc6 7a01 	vstr	s15, [r6, #4]
                        break;
 801a03e:	e514      	b.n	8019a6a <SFXClassicSynthFrame+0x66>
 801a040:	200033c0 	.word	0x200033c0
 801a044:	200187d4 	.word	0x200187d4
 801a048:	20001f88 	.word	0x20001f88
 801a04c:	200033bc 	.word	0x200033bc
 801a050:	20017084 	.word	0x20017084
 801a054:	46000000 	.word	0x46000000
 801a058:	200033b8 	.word	0x200033b8
 801a05c:	200033b4 	.word	0x200033b4
 801a060:	200176dc 	.word	0x200176dc
 801a064:	3851b717 	.word	0x3851b717
 801a068:	3f7ffcb9 	.word	0x3f7ffcb9
 801a06c:	200033b0 	.word	0x200033b0
 801a070:	200033ac 	.word	0x200033ac
 801a074:	200033a8 	.word	0x200033a8
 801a078:	200033a4 	.word	0x200033a4
 801a07c:	200033a0 	.word	0x200033a0
 801a080:	3ecccccd 	.word	0x3ecccccd
 801a084:	20003458 	.word	0x20003458
 801a088:	2000339c 	.word	0x2000339c
 801a08c:	20003398 	.word	0x20003398
 801a090:	20003394 	.word	0x20003394
 801a094:	45800000 	.word	0x45800000

0801a098 <SFXClassicSynthTick>:
        {
 801a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801a09c:	2500      	movs	r5, #0
 801a09e:	f8df a124 	ldr.w	sl, [pc, #292]	; 801a1c4 <SFXClassicSynthTick+0x12c>
 801a0a2:	260c      	movs	r6, #12
 801a0a4:	4c3e      	ldr	r4, [pc, #248]	; (801a1a0 <SFXClassicSynthTick+0x108>)
 801a0a6:	46a9      	mov	r9, r5
        {
 801a0a8:	ed2d 8b08 	vpush	{d8-d11}
 801a0ac:	b083      	sub	sp, #12
            float sample = 0.0f;
 801a0ae:	eddf aa3d 	vldr	s21, [pc, #244]	; 801a1a4 <SFXClassicSynthTick+0x10c>
                tEfficientSVF_setFreq(&synthLP[i], LEAF_clip(0.0f, (filtFreqs[i] + (displayValues[15] * tADSR4_tick(&polyFiltEnvs[i]))), 4095.0f));
 801a0b2:	ed9f ba3d 	vldr	s22, [pc, #244]	; 801a1a8 <SFXClassicSynthTick+0x110>
        {
 801a0b6:	9001      	str	r0, [sp, #4]
                tEfficientSVF_setFreq(&synthLP[i], LEAF_clip(0.0f, (filtFreqs[i] + (displayValues[15] * tADSR4_tick(&polyFiltEnvs[i]))), 4095.0f));
 801a0b8:	eef0 ba6a 	vmov.f32	s23, s21
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801a0bc:	483b      	ldr	r0, [pc, #236]	; (801a1ac <SFXClassicSynthTick+0x114>)
 801a0be:	f00a fc8b 	bl	80249d8 <tSimplePoly_getNumVoices>
 801a0c2:	4548      	cmp	r0, r9
 801a0c4:	dd58      	ble.n	801a178 <SFXClassicSynthTick+0xe0>
                float env = tADSR4_tick(&polyEnvs[i]);
 801a0c6:	483a      	ldr	r0, [pc, #232]	; (801a1b0 <SFXClassicSynthTick+0x118>)
                    tempSample += tSawtooth_tick(&osc[(i * NUM_OSC_PER_VOICE) + j]) * env * (1.0f-displayValues[16]);
 801a0c8:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 801a0cc:	eb05 0b45 	add.w	fp, r5, r5, lsl #1
                float tempSample = 0.0f;
 801a0d0:	eddf 8a34 	vldr	s17, [pc, #208]	; 801a1a4 <SFXClassicSynthTick+0x10c>
                float env = tADSR4_tick(&polyEnvs[i]);
 801a0d4:	4428      	add	r0, r5
 801a0d6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 801a1c8 <SFXClassicSynthTick+0x130>
 801a0da:	f007 fe49 	bl	8021d70 <tADSR4_tick>
 801a0de:	eef0 9a40 	vmov.f32	s19, s0
 801a0e2:	4f34      	ldr	r7, [pc, #208]	; (801a1b4 <SFXClassicSynthTick+0x11c>)
                    tempSample += tSawtooth_tick(&osc[(i * NUM_OSC_PER_VOICE) + j]) * env * (1.0f-displayValues[16]);
 801a0e4:	eb08 000b 	add.w	r0, r8, fp
 801a0e8:	f00a fd86 	bl	8024bf8 <tSawtooth_tick>
                    tempSample += tRosenbergGlottalPulse_tick(&glottal[(i * NUM_OSC_PER_VOICE) + j]) * env * (displayValues[16]);
 801a0ec:	eb07 000b 	add.w	r0, r7, fp
                    tempSample += tSawtooth_tick(&osc[(i * NUM_OSC_PER_VOICE) + j]) * env * (1.0f-displayValues[16]);
 801a0f0:	eeb0 9a40 	vmov.f32	s18, s0
 801a0f4:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
                    tempSample += tRosenbergGlottalPulse_tick(&glottal[(i * NUM_OSC_PER_VOICE) + j]) * env * (displayValues[16]);
 801a0f8:	f006 fbd0 	bl	802089c <tRosenbergGlottalPulse_tick>
 801a0fc:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
                    tempSample += tSawtooth_tick(&osc[(i * NUM_OSC_PER_VOICE) + j]) * env * (1.0f-displayValues[16]);
 801a100:	ee3a 8a48 	vsub.f32	s16, s20, s16
 801a104:	f10b 0b04 	add.w	fp, fp, #4
                    tempSample += tRosenbergGlottalPulse_tick(&glottal[(i * NUM_OSC_PER_VOICE) + j]) * env * (displayValues[16]);
 801a108:	ee20 0a27 	vmul.f32	s0, s0, s15
                for (int j = 0; j < NUM_OSC_PER_VOICE; j++)
 801a10c:	45b3      	cmp	fp, r6
                    tempSample += tRosenbergGlottalPulse_tick(&glottal[(i * NUM_OSC_PER_VOICE) + j]) * env * (displayValues[16]);
 801a10e:	eea9 0a08 	vfma.f32	s0, s18, s16
 801a112:	eee9 8a80 	vfma.f32	s17, s19, s0
                for (int j = 0; j < NUM_OSC_PER_VOICE; j++)
 801a116:	d1e5      	bne.n	801a0e4 <SFXClassicSynthTick+0x4c>
                tEfficientSVF_setFreq(&synthLP[i], LEAF_clip(0.0f, (filtFreqs[i] + (displayValues[15] * tADSR4_tick(&polyFiltEnvs[i]))), 4095.0f));
 801a118:	f83a 3f02 	ldrh.w	r3, [sl, #2]!
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801a11c:	f109 0901 	add.w	r9, r9, #1
                tEfficientSVF_setFreq(&synthLP[i], LEAF_clip(0.0f, (filtFreqs[i] + (displayValues[15] * tADSR4_tick(&polyFiltEnvs[i]))), 4095.0f));
 801a120:	4825      	ldr	r0, [pc, #148]	; (801a1b8 <SFXClassicSynthTick+0x120>)
 801a122:	360c      	adds	r6, #12
 801a124:	ee08 3a10 	vmov	s16, r3
 801a128:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
 801a12c:	4428      	add	r0, r5
 801a12e:	4f23      	ldr	r7, [pc, #140]	; (801a1bc <SFXClassicSynthTick+0x124>)
 801a130:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801a134:	f007 fe1c 	bl	8021d70 <tADSR4_tick>
 801a138:	eeb0 1a4b 	vmov.f32	s2, s22
 801a13c:	442f      	add	r7, r5
 801a13e:	3504      	adds	r5, #4
 801a140:	eef0 0a48 	vmov.f32	s1, s16
 801a144:	eee9 0a00 	vfma.f32	s1, s18, s0
 801a148:	eeb0 0a6b 	vmov.f32	s0, s23
 801a14c:	f009 fddc 	bl	8023d08 <LEAF_clip>
 801a150:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801a154:	4638      	mov	r0, r7
 801a156:	ee10 3a10 	vmov	r3, s0
 801a15a:	b299      	uxth	r1, r3
 801a15c:	f008 fbee 	bl	802293c <tEfficientSVF_setFreq>
                sample += tEfficientSVF_tick(&synthLP[i], tempSample);
 801a160:	4638      	mov	r0, r7
 801a162:	eeb0 0a68 	vmov.f32	s0, s17
 801a166:	f008 fb99 	bl	802289c <tEfficientSVF_tick>
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801a16a:	4810      	ldr	r0, [pc, #64]	; (801a1ac <SFXClassicSynthTick+0x114>)
                sample += tEfficientSVF_tick(&synthLP[i], tempSample);
 801a16c:	ee7a aa80 	vadd.f32	s21, s21, s0
            for (int i = 0; i < tSimplePoly_getNumVoices(&poly); i++)
 801a170:	f00a fc32 	bl	80249d8 <tSimplePoly_getNumVoices>
 801a174:	4548      	cmp	r0, r9
 801a176:	dca6      	bgt.n	801a0c6 <SFXClassicSynthTick+0x2e>
            sample *= INV_NUM_OSC_PER_VOICE * displayValues[0];
 801a178:	ed94 0a00 	vldr	s0, [r4]
 801a17c:	eddf 7a10 	vldr	s15, [pc, #64]	; 801a1c0 <SFXClassicSynthTick+0x128>
 801a180:	ee20 0a27 	vmul.f32	s0, s0, s15
            sample = tanhf(sample);
 801a184:	ee20 0a2a 	vmul.f32	s0, s0, s21
 801a188:	f00d facc 	bl	8027724 <tanhf>
            input[0] = sample;
 801a18c:	9b01      	ldr	r3, [sp, #4]
 801a18e:	ed83 0a00 	vstr	s0, [r3]
            input[1] = sample;
 801a192:	ed83 0a01 	vstr	s0, [r3, #4]
        }
 801a196:	b003      	add	sp, #12
 801a198:	ecbd 8b08 	vpop	{d8-d11}
 801a19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1a0:	200187d4 	.word	0x200187d4
 801a1a4:	00000000 	.word	0x00000000
 801a1a8:	457ff000 	.word	0x457ff000
 801a1ac:	20017560 	.word	0x20017560
 801a1b0:	200176dc 	.word	0x200176dc
 801a1b4:	20002888 	.word	0x20002888
 801a1b8:	20001f88 	.word	0x20001f88
 801a1bc:	20003458 	.word	0x20003458
 801a1c0:	3ea8f5c3 	.word	0x3ea8f5c3
 801a1c4:	20017282 	.word	0x20017282
 801a1c8:	2001731c 	.word	0x2001731c

0801a1cc <SFXClassicSynthFree>:
        {
 801a1cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1d0:	2500      	movs	r5, #0
 801a1d2:	260c      	movs	r6, #12
 801a1d4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 801a23c <SFXClassicSynthFree+0x70>
 801a1d8:	4f15      	ldr	r7, [pc, #84]	; (801a230 <SFXClassicSynthFree+0x64>)
 801a1da:	f8df b064 	ldr.w	fp, [pc, #100]	; 801a240 <SFXClassicSynthFree+0x74>
 801a1de:	f8df a064 	ldr.w	sl, [pc, #100]	; 801a244 <SFXClassicSynthFree+0x78>
 801a1e2:	f8df 9064 	ldr.w	r9, [pc, #100]	; 801a248 <SFXClassicSynthFree+0x7c>
 801a1e6:	eb05 0445 	add.w	r4, r5, r5, lsl #1
                    tSawtooth_free(&osc[(i * NUM_OSC_PER_VOICE) + j]);
 801a1ea:	eb08 0004 	add.w	r0, r8, r4
 801a1ee:	f00a fccd 	bl	8024b8c <tSawtooth_free>
                    tRosenbergGlottalPulse_free(&glottal[(i * NUM_OSC_PER_VOICE) + j]);
 801a1f2:	1938      	adds	r0, r7, r4
 801a1f4:	3404      	adds	r4, #4
 801a1f6:	f006 fb4d 	bl	8020894 <tRosenbergGlottalPulse_free>
                for (int j = 0; j < NUM_OSC_PER_VOICE; j++)
 801a1fa:	42b4      	cmp	r4, r6
 801a1fc:	d1f5      	bne.n	801a1ea <SFXClassicSynthFree+0x1e>
                tEfficientSVF_free(&synthLP[i]);
 801a1fe:	eb0b 0005 	add.w	r0, fp, r5
 801a202:	f104 060c 	add.w	r6, r4, #12
 801a206:	f008 fb45 	bl	8022894 <tEfficientSVF_free>
                tADSR4_free(&polyEnvs[i]);
 801a20a:	eb0a 0005 	add.w	r0, sl, r5
 801a20e:	f007 fd4d 	bl	8021cac <tADSR4_free>
                tADSR4_free(&polyFiltEnvs[i]);
 801a212:	eb09 0005 	add.w	r0, r9, r5
 801a216:	3504      	adds	r5, #4
 801a218:	f007 fd48 	bl	8021cac <tADSR4_free>
            for (int i = 0; i < NUM_VOC_VOICES; i++)
 801a21c:	2d20      	cmp	r5, #32
 801a21e:	d1e2      	bne.n	801a1e6 <SFXClassicSynthFree+0x1a>
            tCycle_free(&pwmLFO1);
 801a220:	4804      	ldr	r0, [pc, #16]	; (801a234 <SFXClassicSynthFree+0x68>)
 801a222:	f00a fc1f 	bl	8024a64 <tCycle_free>
            tCycle_free(&pwmLFO2);
 801a226:	4804      	ldr	r0, [pc, #16]	; (801a238 <SFXClassicSynthFree+0x6c>)
        }
 801a228:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            tCycle_free(&pwmLFO2);
 801a22c:	f00a bc1a 	b.w	8024a64 <tCycle_free>
 801a230:	20002888 	.word	0x20002888
 801a234:	200176cc 	.word	0x200176cc
 801a238:	200177b0 	.word	0x200177b0
 801a23c:	2001731c 	.word	0x2001731c
 801a240:	20003458 	.word	0x20003458
 801a244:	200176dc 	.word	0x200176dc
 801a248:	20001f88 	.word	0x20001f88

0801a24c <SFXRhodesAlloc>:
        {
 801a24c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            leaf.clearOnAllocation = 1;
 801a250:	2101      	movs	r1, #1
            soundNames[0] = "DARK  ";
 801a252:	f8df b150 	ldr.w	fp, [pc, #336]	; 801a3a4 <SFXRhodesAlloc+0x158>
 801a256:	4a42      	ldr	r2, [pc, #264]	; (801a360 <SFXRhodesAlloc+0x114>)
            soundNames[4] = "CUSTOM";
 801a258:	2400      	movs	r4, #0
            soundNames[1] = "LIGHT ";
 801a25a:	4b42      	ldr	r3, [pc, #264]	; (801a364 <SFXRhodesAlloc+0x118>)
            leaf.clearOnAllocation = 1;
 801a25c:	4842      	ldr	r0, [pc, #264]	; (801a368 <SFXRhodesAlloc+0x11c>)
            soundNames[0] = "DARK  ";
 801a25e:	f8cb 2000 	str.w	r2, [fp]
            soundNames[1] = "LIGHT ";
 801a262:	f8cb 3004 	str.w	r3, [fp, #4]
            soundNames[3] = "PAD   ";
 801a266:	4a41      	ldr	r2, [pc, #260]	; (801a36c <SFXRhodesAlloc+0x120>)
            soundNames[4] = "CUSTOM";
 801a268:	4b41      	ldr	r3, [pc, #260]	; (801a370 <SFXRhodesAlloc+0x124>)
 801a26a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 801a3a8 <SFXRhodesAlloc+0x15c>
 801a26e:	f8df 913c 	ldr.w	r9, [pc, #316]	; 801a3ac <SFXRhodesAlloc+0x160>
 801a272:	f8cb 3010 	str.w	r3, [fp, #16]
        {
 801a276:	ed2d 8b04 	vpush	{d8-d9}
            leaf.clearOnAllocation = 1;
 801a27a:	6141      	str	r1, [r0, #20]
                    tADSR4_initToPool(&FM_envs[i][j], 10, 1000, 0.5f, 100.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &smallPool);
 801a27c:	ed9f 9a3d 	vldr	s18, [pc, #244]	; 801a374 <SFXRhodesAlloc+0x128>
            soundNames[2] = "BASS  ";
 801a280:	493d      	ldr	r1, [pc, #244]	; (801a378 <SFXRhodesAlloc+0x12c>)
                    tADSR4_initToPool(&FM_envs[i][j], 10, 1000, 0.5f, 100.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &smallPool);
 801a282:	eddf 8a3e 	vldr	s17, [pc, #248]	; 801a37c <SFXRhodesAlloc+0x130>
                    tADSR4_setLeakFactor(&FM_envs[i][j], 0.99998f);
 801a286:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 801a380 <SFXRhodesAlloc+0x134>
            soundNames[3] = "PAD   ";
 801a28a:	e9cb 1202 	strd	r1, r2, [fp, #8]
 801a28e:	f104 0818 	add.w	r8, r4, #24
                    tCycle_initToPool(&FM_sines[i][j], &smallPool);
 801a292:	4e3c      	ldr	r6, [pc, #240]	; (801a384 <SFXRhodesAlloc+0x138>)
                    tADSR4_initToPool(&FM_envs[i][j], 10, 1000, 0.5f, 100.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &smallPool);
 801a294:	4f3c      	ldr	r7, [pc, #240]	; (801a388 <SFXRhodesAlloc+0x13c>)
 801a296:	eb09 0504 	add.w	r5, r9, r4
                    tCycle_initToPool(&FM_sines[i][j], &smallPool);
 801a29a:	eb0a 0004 	add.w	r0, sl, r4
 801a29e:	4631      	mov	r1, r6
 801a2a0:	3404      	adds	r4, #4
 801a2a2:	f00a fbd1 	bl	8024a48 <tCycle_initToPool>
                    tADSR4_initToPool(&FM_envs[i][j], 10, 1000, 0.5f, 100.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &smallPool);
 801a2a6:	4628      	mov	r0, r5
 801a2a8:	4633      	mov	r3, r6
 801a2aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a2ae:	4639      	mov	r1, r7
 801a2b0:	eef0 1a49 	vmov.f32	s3, s18
 801a2b4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 801a2b8:	eef0 0a68 	vmov.f32	s1, s17
 801a2bc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801a2c0:	f007 fc9a 	bl	8021bf8 <tADSR4_initToPool>
                    tADSR4_setLeakFactor(&FM_envs[i][j], 0.99998f);
 801a2c4:	eeb0 0a48 	vmov.f32	s0, s16
 801a2c8:	4628      	mov	r0, r5
 801a2ca:	f007 fd33 	bl	8021d34 <tADSR4_setLeakFactor>
                for (int j = 0; j < 6; j++)
 801a2ce:	4544      	cmp	r4, r8
 801a2d0:	d1e1      	bne.n	801a296 <SFXRhodesAlloc+0x4a>
            for (int i = 0; i < NUM_VOC_VOICES; i++)
 801a2d2:	2cc0      	cmp	r4, #192	; 0xc0
 801a2d4:	d1db      	bne.n	801a28e <SFXRhodesAlloc+0x42>
 801a2d6:	4c2d      	ldr	r4, [pc, #180]	; (801a38c <SFXRhodesAlloc+0x140>)
                tExpSmooth_initToPool(&susSmoothers[i], 1.0f, 0.01f, &smallPool);
 801a2d8:	4e2a      	ldr	r6, [pc, #168]	; (801a384 <SFXRhodesAlloc+0x138>)
 801a2da:	f104 0518 	add.w	r5, r4, #24
 801a2de:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 801a390 <SFXRhodesAlloc+0x144>
 801a2e2:	4620      	mov	r0, r4
 801a2e4:	3404      	adds	r4, #4
 801a2e6:	4631      	mov	r1, r6
 801a2e8:	eef0 0a48 	vmov.f32	s1, s16
 801a2ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a2f0:	f008 f83a 	bl	8022368 <tExpSmooth_initToPool>
            for (int i = 0; i < 6; i++)
 801a2f4:	42a5      	cmp	r5, r4
 801a2f6:	d1f4      	bne.n	801a2e2 <SFXRhodesAlloc+0x96>
            tCycle_initToPool(&tremolo, &smallPool);
 801a2f8:	4922      	ldr	r1, [pc, #136]	; (801a384 <SFXRhodesAlloc+0x138>)
 801a2fa:	4826      	ldr	r0, [pc, #152]	; (801a394 <SFXRhodesAlloc+0x148>)
 801a2fc:	f00a fba4 	bl	8024a48 <tCycle_initToPool>
            tCycle_setFreq(&tremolo, 3.0f);
 801a300:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 801a304:	4823      	ldr	r0, [pc, #140]	; (801a394 <SFXRhodesAlloc+0x148>)
 801a306:	f00a fbb1 	bl	8024a6c <tCycle_setFreq>
            tSimplePoly_setNumVoices(&poly, NUM_VOC_VOICES);
 801a30a:	2108      	movs	r1, #8
 801a30c:	4822      	ldr	r0, [pc, #136]	; (801a398 <SFXRhodesAlloc+0x14c>)
 801a30e:	f00a fb5b 	bl	80249c8 <tSimplePoly_setNumVoices>
            setLED_A(numVoices == 1);
 801a312:	4b22      	ldr	r3, [pc, #136]	; (801a39c <SFXRhodesAlloc+0x150>)
            setLED_C(tremoloStereo == 1);
 801a314:	4c22      	ldr	r4, [pc, #136]	; (801a3a0 <SFXRhodesAlloc+0x154>)
            setLED_A(numVoices == 1);
 801a316:	7818      	ldrb	r0, [r3, #0]
 801a318:	f1a0 0001 	sub.w	r0, r0, #1
 801a31c:	fab0 f080 	clz	r0, r0
 801a320:	0940      	lsrs	r0, r0, #5
 801a322:	f7f9 fb4d 	bl	80139c0 <setLED_A>
            setLED_C(tremoloStereo == 1);
 801a326:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
 801a32a:	f1a0 0001 	sub.w	r0, r0, #1
 801a32e:	fab0 f080 	clz	r0, r0
 801a332:	0940      	lsrs	r0, r0, #5
 801a334:	f7f9 fb60 	bl	80139f8 <setLED_C>
            OLEDclearLine(SecondLine);
 801a338:	2001      	movs	r0, #1
 801a33a:	f7f9 fd6b 	bl	8013e14 <OLEDclearLine>
            OLEDwriteString(soundNames[Rsound], 6, 0, SecondLine);
 801a33e:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
 801a342:	2301      	movs	r3, #1
 801a344:	2200      	movs	r2, #0
 801a346:	f85b 0021 	ldr.w	r0, [fp, r1, lsl #2]
 801a34a:	2106      	movs	r1, #6
 801a34c:	f7f9 fd76 	bl	8013e3c <OLEDwriteString>
            leaf.clearOnAllocation = 0;
 801a350:	2300      	movs	r3, #0
 801a352:	4a05      	ldr	r2, [pc, #20]	; (801a368 <SFXRhodesAlloc+0x11c>)
 801a354:	6153      	str	r3, [r2, #20]
        }
 801a356:	ecbd 8b04 	vpop	{d8-d9}
 801a35a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a35e:	bf00      	nop
 801a360:	081451c8 	.word	0x081451c8
 801a364:	081451d0 	.word	0x081451d0
 801a368:	200194e0 	.word	0x200194e0
 801a36c:	081451e0 	.word	0x081451e0
 801a370:	081451e8 	.word	0x081451e8
 801a374:	42c80000 	.word	0x42c80000
 801a378:	081451d8 	.word	0x081451d8
 801a37c:	447a0000 	.word	0x447a0000
 801a380:	3f7ffeb0 	.word	0x3f7ffeb0
 801a384:	20018338 	.word	0x20018338
 801a388:	2001797c 	.word	0x2001797c
 801a38c:	20002a70 	.word	0x20002a70
 801a390:	3c23d70a 	.word	0x3c23d70a
 801a394:	200177ac 	.word	0x200177ac
 801a398:	20017560 	.word	0x20017560
 801a39c:	20000040 	.word	0x20000040
 801a3a0:	20000548 	.word	0x20000548
 801a3a4:	20017528 	.word	0x20017528
 801a3a8:	200034ac 	.word	0x200034ac
 801a3ac:	20017568 	.word	0x20017568

0801a3b0 <SFXRhodesFrame>:
        {
 801a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 801a3b4:	4ce7      	ldr	r4, [pc, #924]	; (801a754 <SFXRhodesFrame+0x3a4>)
                numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 801a3b6:	f8df b3e0 	ldr.w	fp, [pc, #992]	; 801a798 <SFXRhodesFrame+0x3e8>
        {
 801a3ba:	ed2d 8b04 	vpush	{d8-d9}
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 801a3be:	7d23      	ldrb	r3, [r4, #20]
        {
 801a3c0:	b083      	sub	sp, #12
            if (buttonActionsSFX[ButtonA][ActionPress] == 1)
 801a3c2:	2b01      	cmp	r3, #1
 801a3c4:	d115      	bne.n	801a3f2 <SFXRhodesFrame+0x42>
                numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 801a3c6:	f89b 2000 	ldrb.w	r2, [fp]
                tSimplePoly_setNumVoices(&poly, numVoices);
 801a3ca:	48e3      	ldr	r0, [pc, #908]	; (801a758 <SFXRhodesFrame+0x3a8>)
                numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 801a3cc:	2a01      	cmp	r2, #1
 801a3ce:	bf98      	it	ls
 801a3d0:	2308      	movls	r3, #8
                tSimplePoly_setNumVoices(&poly, numVoices);
 801a3d2:	4619      	mov	r1, r3
                numVoices = (numVoices > 1) ? 1 : NUM_VOC_VOICES;
 801a3d4:	f88b 3000 	strb.w	r3, [fp]
                tSimplePoly_setNumVoices(&poly, numVoices);
 801a3d8:	f00a faf6 	bl	80249c8 <tSimplePoly_setNumVoices>
                setLED_A(numVoices == 1);
 801a3dc:	f89b 0000 	ldrb.w	r0, [fp]
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 801a3e0:	2300      	movs	r3, #0
                setLED_A(numVoices == 1);
 801a3e2:	f1a0 0001 	sub.w	r0, r0, #1
                buttonActionsSFX[ButtonA][ActionPress] = 0;
 801a3e6:	7523      	strb	r3, [r4, #20]
                setLED_A(numVoices == 1);
 801a3e8:	fab0 f080 	clz	r0, r0
 801a3ec:	0940      	lsrs	r0, r0, #5
 801a3ee:	f7f9 fae7 	bl	80139c0 <setLED_A>
            if (buttonActionsSFX[ButtonB][ActionPress] == 1)
 801a3f2:	7e23      	ldrb	r3, [r4, #24]
 801a3f4:	2b01      	cmp	r3, #1
 801a3f6:	d110      	bne.n	801a41a <SFXRhodesFrame+0x6a>
                Rsound = (Rsound + 1 ) % 5; // switch to another rhodes preset sound
 801a3f8:	4ed8      	ldr	r6, [pc, #864]	; (801a75c <SFXRhodesFrame+0x3ac>)
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 801a3fa:	2100      	movs	r1, #0
                Rsound = (Rsound + 1 ) % 5; // switch to another rhodes preset sound
 801a3fc:	4ad8      	ldr	r2, [pc, #864]	; (801a760 <SFXRhodesFrame+0x3b0>)
 801a3fe:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
                buttonActionsSFX[ButtonB][ActionPress] = 0;
 801a402:	7621      	strb	r1, [r4, #24]
                Rsound = (Rsound + 1 ) % 5; // switch to another rhodes preset sound
 801a404:	3301      	adds	r3, #1
 801a406:	fb82 2103 	smull	r2, r1, r2, r3
 801a40a:	17da      	asrs	r2, r3, #31
 801a40c:	ebc2 0261 	rsb	r2, r2, r1, asr #1
 801a410:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a414:	1a9b      	subs	r3, r3, r2
 801a416:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
            if (buttonActionsSFX[ButtonC][ActionPress] == 1)
 801a41a:	7f23      	ldrb	r3, [r4, #28]
 801a41c:	2b01      	cmp	r3, #1
 801a41e:	f000 840d 	beq.w	801ac3c <SFXRhodesFrame+0x88c>
            displayValues[0] = presetKnobValues[Rhodes][0] * 4.0f; // brightness
 801a422:	4dd0      	ldr	r5, [pc, #832]	; (801a764 <SFXRhodesFrame+0x3b4>)
 801a424:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
            displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a428:	eddb 6a40 	vldr	s13, [fp, #256]	; 0x100
            displayValues[2] = presetKnobValues[Rhodes][2] * 10.0f; //tremelo rate
 801a42c:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
            displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a430:	ed95 6a08 	vldr	s12, [r5, #32]
            displayValues[0] = presetKnobValues[Rhodes][0] * 4.0f; // brightness
 801a434:	4628      	mov	r0, r5
            displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a436:	ed95 7a05 	vldr	s14, [r5, #20]
            FM_indices[4][5] = displayValues[21] = LEAF_clip(0.0f, ((presetKnobValues[Rhodes][21] * 1000.0f) - 10.0f), 1000.0f); // feedback
 801a43a:	eefa 0a04 	vmov.f32	s1, #164	; 0xc1200000 -10.0
            displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a43e:	edd5 7a06 	vldr	s15, [r5, #24]
            displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a442:	ee26 7a87 	vmul.f32	s14, s13, s14
 801a446:	49c8      	ldr	r1, [pc, #800]	; (801a768 <SFXRhodesFrame+0x3b8>)
            displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a448:	ee66 7aa7 	vmul.f32	s15, s13, s15
            displayValues[0] = presetKnobValues[Rhodes][0] * 4.0f; // brightness
 801a44c:	ecf0 3a01 	vldmia	r0!, {s7}
            displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a450:	ee66 6a86 	vmul.f32	s13, s13, s12
            displayValues[3] = presetKnobValues[Rhodes][3] * 1.3f; //drive
 801a454:	edd5 4a03 	vldr	s9, [r5, #12]
            displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a458:	eebd 7ac7 	vcvt.s32.f32	s14, s14
            FM_indices[4][0] = displayValues[10] = presetKnobValues[Rhodes][10] * 1000.0f;
 801a45c:	ed9f 1ac3 	vldr	s2, [pc, #780]	; 801a76c <SFXRhodesFrame+0x3bc>
            displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a464:	eddf 2ac2 	vldr	s5, [pc, #776]	; 801a770 <SFXRhodesFrame+0x3c0>
            displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a468:	eefd 6ae6 	vcvt.s32.f32	s13, s13
            FM_indices[4][0] = displayValues[10] = presetKnobValues[Rhodes][10] * 1000.0f;
 801a46c:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
            displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a470:	ee17 2a10 	vmov	r2, s14
            displayValues[0] = presetKnobValues[Rhodes][0] * 4.0f; // brightness
 801a474:	ee63 3aa5 	vmul.f32	s7, s7, s11
            displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a478:	ee17 3a90 	vmov	r3, s15
            displayValues[3] = presetKnobValues[Rhodes][3] * 1.3f; //drive
 801a47c:	eddf 7abd 	vldr	s15, [pc, #756]	; 801a774 <SFXRhodesFrame+0x3c4>
            displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a480:	ee16 4a90 	vmov	r4, s13
            displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a484:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a488:	eb01 0383 	add.w	r3, r1, r3, lsl #2
            displayValues[3] = presetKnobValues[Rhodes][3] * 1.3f; //drive
 801a48c:	ee64 4aa7 	vmul.f32	s9, s9, s15
            displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a490:	eb01 0184 	add.w	r1, r1, r4, lsl #2
            displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a494:	ed92 3a00 	vldr	s6, [r2]
            displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a498:	ed93 5a00 	vldr	s10, [r3]
            FM_indices[4][0] = displayValues[10] = presetKnobValues[Rhodes][10] * 1000.0f;
 801a49c:	ee66 6a01 	vmul.f32	s13, s12, s2
            displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a4a0:	edd1 5a00 	vldr	s11, [r1]
            displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a4a4:	ee23 3a22 	vmul.f32	s6, s6, s5
            displayValues[2] = presetKnobValues[Rhodes][2] * 10.0f; //tremelo rate
 801a4a8:	ed95 4a02 	vldr	s8, [r5, #8]
            displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a4ac:	ee25 5a22 	vmul.f32	s10, s10, s5
            FM_indices[4][1] = displayValues[11] = presetKnobValues[Rhodes][11] * 1000.0f;
 801a4b0:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
            displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a4b4:	ee65 5aa2 	vmul.f32	s11, s11, s5
            FM_indices[4][2] = displayValues[12] = presetKnobValues[Rhodes][12] * 1000.0f;
 801a4b8:	edd5 7a0c 	vldr	s15, [r5, #48]	; 0x30
            displayValues[2] = presetKnobValues[Rhodes][2] * 10.0f; //tremelo rate
 801a4bc:	ee24 4a02 	vmul.f32	s8, s8, s4
            FM_indices[4][1] = displayValues[11] = presetKnobValues[Rhodes][11] * 1000.0f;
 801a4c0:	ee27 7a01 	vmul.f32	s14, s14, s2
            displayValues[0] = presetKnobValues[Rhodes][0] * 4.0f; // brightness
 801a4c4:	4cac      	ldr	r4, [pc, #688]	; (801a778 <SFXRhodesFrame+0x3c8>)
            FM_indices[4][2] = displayValues[12] = presetKnobValues[Rhodes][12] * 1000.0f;
 801a4c6:	ee67 7a81 	vmul.f32	s15, s15, s2
            displayValues[1] = presetKnobValues[Rhodes][1]; // tremelo amount
 801a4ca:	6800      	ldr	r0, [r0, #0]
            displayValues[4] = presetKnobValues[Rhodes][4]; //pan spread
 801a4cc:	6929      	ldr	r1, [r5, #16]
            displayValues[7] = presetKnobValues[Rhodes][7];
 801a4ce:	69ea      	ldr	r2, [r5, #28]
            displayValues[9] = presetKnobValues[Rhodes][9];
 801a4d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            displayValues[2] = presetKnobValues[Rhodes][2] * 10.0f; //tremelo rate
 801a4d2:	ed84 4a02 	vstr	s8, [r4, #8]
            displayValues[8] = expBuffer[(int)(presetKnobValues[Rhodes][8] * expBufferSizeMinusOne)] * 8192.0f;
 801a4d6:	edc4 5a08 	vstr	s11, [r4, #32]
            displayValues[5] = expBuffer[(int)(presetKnobValues[Rhodes][5] * expBufferSizeMinusOne)] * 8192.0f;
 801a4da:	ed84 3a05 	vstr	s6, [r4, #20]
            displayValues[1] = presetKnobValues[Rhodes][1]; // tremelo amount
 801a4de:	6060      	str	r0, [r4, #4]
            displayValues[0] = presetKnobValues[Rhodes][0] * 4.0f; // brightness
 801a4e0:	edc4 3a00 	vstr	s7, [r4]
            displayValues[3] = presetKnobValues[Rhodes][3] * 1.3f; //drive
 801a4e4:	edc4 4a03 	vstr	s9, [r4, #12]
            displayValues[4] = presetKnobValues[Rhodes][4]; //pan spread
 801a4e8:	6121      	str	r1, [r4, #16]
            displayValues[6] = expBuffer[(int)(presetKnobValues[Rhodes][6] * expBufferSizeMinusOne)] * 8192.0f;
 801a4ea:	ed84 5a06 	vstr	s10, [r4, #24]
            displayValues[7] = presetKnobValues[Rhodes][7];
 801a4ee:	61e2      	str	r2, [r4, #28]
            displayValues[9] = presetKnobValues[Rhodes][9];
 801a4f0:	6263      	str	r3, [r4, #36]	; 0x24
            FM_indices[4][0] = displayValues[10] = presetKnobValues[Rhodes][10] * 1000.0f;
 801a4f2:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
 801a4f6:	edcb 6a5c 	vstr	s13, [fp, #368]	; 0x170
            FM_indices[4][1] = displayValues[11] = presetKnobValues[Rhodes][11] * 1000.0f;
 801a4fa:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 801a4fe:	ed8b 7a5d 	vstr	s14, [fp, #372]	; 0x174
            FM_indices[4][2] = displayValues[12] = presetKnobValues[Rhodes][12] * 1000.0f;
 801a502:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
 801a506:	edcb 7a5e 	vstr	s15, [fp, #376]	; 0x178
            FM_indices[4][3] = displayValues[13] = presetKnobValues[Rhodes][13] * 1000.0f;
 801a50a:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
            FM_indices[4][4] = displayValues[14] = presetKnobValues[Rhodes][14] * 1000.0f;
 801a50e:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
            FM_indices[4][3] = displayValues[13] = presetKnobValues[Rhodes][13] * 1000.0f;
 801a512:	ee27 7a01 	vmul.f32	s14, s14, s2
            FM_indices[4][5] = displayValues[21] = LEAF_clip(0.0f, ((presetKnobValues[Rhodes][21] * 1000.0f) - 10.0f), 1000.0f); // feedback
 801a516:	edd5 6a15 	vldr	s13, [r5, #84]	; 0x54
            FM_indices[4][4] = displayValues[14] = presetKnobValues[Rhodes][14] * 1000.0f;
 801a51a:	ee67 7a81 	vmul.f32	s15, s15, s2
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a51e:	f8df 827c 	ldr.w	r8, [pc, #636]	; 801a79c <SFXRhodesFrame+0x3ec>
            FM_indices[4][5] = displayValues[21] = LEAF_clip(0.0f, ((presetKnobValues[Rhodes][21] * 1000.0f) - 10.0f), 1000.0f); // feedback
 801a522:	eee6 0a81 	vfma.f32	s1, s13, s2
 801a526:	ed9f 0a95 	vldr	s0, [pc, #596]	; 801a77c <SFXRhodesFrame+0x3cc>
            FM_indices[4][3] = displayValues[13] = presetKnobValues[Rhodes][13] * 1000.0f;
 801a52a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801a52e:	ed8b 7a5f 	vstr	s14, [fp, #380]	; 0x17c
            FM_indices[4][4] = displayValues[14] = presetKnobValues[Rhodes][14] * 1000.0f;
 801a532:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801a536:	edcb 7a60 	vstr	s15, [fp, #384]	; 0x180
            FM_indices[4][5] = displayValues[21] = LEAF_clip(0.0f, ((presetKnobValues[Rhodes][21] * 1000.0f) - 10.0f), 1000.0f); // feedback
 801a53a:	f009 fbe5 	bl	8023d08 <LEAF_clip>
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a53e:	ed95 4a0f 	vldr	s8, [r5, #60]	; 0x3c
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a542:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a546:	edd8 6a0f 	vldr	s13, [r8, #60]	; 0x3c
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a54a:	ed9b 7a62 	vldr	s14, [fp, #392]	; 0x188
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a54e:	eef4 6a44 	vcmp.f32	s13, s8
            FM_indices[4][5] = displayValues[21] = LEAF_clip(0.0f, ((presetKnobValues[Rhodes][21] * 1000.0f) - 10.0f), 1000.0f); // feedback
 801a552:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
 801a556:	ed8b 0a61 	vstr	s0, [fp, #388]	; 0x184
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a55a:	ee75 7ac7 	vsub.f32	s15, s11, s14
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a55e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a562:	d019      	beq.n	801a598 <SFXRhodesFrame+0x1e8>
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a564:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801a568:	eeb2 6a0c 	vmov.f32	s12, #44	; 0x41600000  14.0
 801a56c:	ee74 6a66 	vsub.f32	s13, s8, s13
 801a570:	ee66 6a86 	vmul.f32	s13, s13, s12
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a574:	ee27 6aa6 	vmul.f32	s12, s15, s13
                    float snapRate = roundf(rawRate);
 801a578:	fef8 6a66 	vrinta.f32	s13, s13
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a57c:	eea7 6a26 	vfma.f32	s12, s14, s13
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a580:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801a584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a588:	f100 83b2 	bmi.w	801acf0 <SFXRhodesFrame+0x940>
                    else rate += 1.0f;
 801a58c:	ee36 6a25 	vadd.f32	s12, s12, s11
                    displayValues[k] = rate;
 801a590:	ed84 6a0f 	vstr	s12, [r4, #60]	; 0x3c
                    FM_freqRatios[4][k-15] = rate;
 801a594:	ed8b 6a7b 	vstr	s12, [fp, #492]	; 0x1ec
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a598:	4b79      	ldr	r3, [pc, #484]	; (801a780 <SFXRhodesFrame+0x3d0>)
 801a59a:	edd8 6a10 	vldr	s13, [r8, #64]	; 0x40
 801a59e:	edd3 4a00 	vldr	s9, [r3]
                prevKnobValues[k] = presetKnobValues[Rhodes][k];
 801a5a2:	ed88 4a0f 	vstr	s8, [r8, #60]	; 0x3c
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a5a6:	eef4 6a64 	vcmp.f32	s13, s9
 801a5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5ae:	d01d      	beq.n	801a5ec <SFXRhodesFrame+0x23c>
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a5b0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801a5b4:	eeb2 6a0c 	vmov.f32	s12, #44	; 0x41600000  14.0
 801a5b8:	ee74 6ae6 	vsub.f32	s13, s9, s13
 801a5bc:	ee66 6a86 	vmul.f32	s13, s13, s12
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a5c0:	ee27 6aa6 	vmul.f32	s12, s15, s13
                    float snapRate = roundf(rawRate);
 801a5c4:	fef8 6a66 	vrinta.f32	s13, s13
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a5c8:	eea7 6a26 	vfma.f32	s12, s14, s13
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a5cc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a5d0:	eef0 6a46 	vmov.f32	s13, s12
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5d8:	f100 8391 	bmi.w	801acfe <SFXRhodesFrame+0x94e>
                    else rate += 1.0f;
 801a5dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801a5e0:	ee36 6a86 	vadd.f32	s12, s13, s12
                    displayValues[k] = rate;
 801a5e4:	ed84 6a10 	vstr	s12, [r4, #64]	; 0x40
                    FM_freqRatios[4][k-15] = rate;
 801a5e8:	ed8b 6a7c 	vstr	s12, [fp, #496]	; 0x1f0
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a5ec:	4b65      	ldr	r3, [pc, #404]	; (801a784 <SFXRhodesFrame+0x3d4>)
 801a5ee:	edd8 6a11 	vldr	s13, [r8, #68]	; 0x44
 801a5f2:	ed93 5a00 	vldr	s10, [r3]
                prevKnobValues[k] = presetKnobValues[Rhodes][k];
 801a5f6:	edc8 4a10 	vstr	s9, [r8, #64]	; 0x40
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a5fa:	eef4 6a45 	vcmp.f32	s13, s10
 801a5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a602:	d01d      	beq.n	801a640 <SFXRhodesFrame+0x290>
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a604:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801a608:	eeb2 6a0c 	vmov.f32	s12, #44	; 0x41600000  14.0
 801a60c:	ee75 6a66 	vsub.f32	s13, s10, s13
 801a610:	ee66 6a86 	vmul.f32	s13, s13, s12
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a614:	ee27 6aa6 	vmul.f32	s12, s15, s13
                    float snapRate = roundf(rawRate);
 801a618:	fef8 6a66 	vrinta.f32	s13, s13
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a61c:	eea7 6a26 	vfma.f32	s12, s14, s13
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a620:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a624:	eef0 6a46 	vmov.f32	s13, s12
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a62c:	f100 8370 	bmi.w	801ad10 <SFXRhodesFrame+0x960>
                    else rate += 1.0f;
 801a630:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801a634:	ee36 6a86 	vadd.f32	s12, s13, s12
                    displayValues[k] = rate;
 801a638:	ed84 6a11 	vstr	s12, [r4, #68]	; 0x44
                    FM_freqRatios[4][k-15] = rate;
 801a63c:	ed8b 6a7d 	vstr	s12, [fp, #500]	; 0x1f4
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a640:	4b51      	ldr	r3, [pc, #324]	; (801a788 <SFXRhodesFrame+0x3d8>)
 801a642:	edd8 6a12 	vldr	s13, [r8, #72]	; 0x48
 801a646:	edd3 5a00 	vldr	s11, [r3]
                prevKnobValues[k] = presetKnobValues[Rhodes][k];
 801a64a:	ed88 5a11 	vstr	s10, [r8, #68]	; 0x44
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a64e:	eef4 6a65 	vcmp.f32	s13, s11
 801a652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a656:	d01d      	beq.n	801a694 <SFXRhodesFrame+0x2e4>
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a658:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801a65c:	eeb2 6a0c 	vmov.f32	s12, #44	; 0x41600000  14.0
 801a660:	ee75 6ae6 	vsub.f32	s13, s11, s13
 801a664:	ee66 6a86 	vmul.f32	s13, s13, s12
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a668:	ee27 6aa6 	vmul.f32	s12, s15, s13
                    float snapRate = roundf(rawRate);
 801a66c:	fef8 6a66 	vrinta.f32	s13, s13
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a670:	eea7 6a26 	vfma.f32	s12, s14, s13
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a674:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a678:	eef0 6a46 	vmov.f32	s13, s12
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a680:	f100 8316 	bmi.w	801acb0 <SFXRhodesFrame+0x900>
                    else rate += 1.0f;
 801a684:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801a688:	ee36 6a86 	vadd.f32	s12, s13, s12
                    displayValues[k] = rate;
 801a68c:	ed84 6a12 	vstr	s12, [r4, #72]	; 0x48
                    FM_freqRatios[4][k-15] = rate;
 801a690:	ed8b 6a7e 	vstr	s12, [fp, #504]	; 0x1f8
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a694:	4b3d      	ldr	r3, [pc, #244]	; (801a78c <SFXRhodesFrame+0x3dc>)
 801a696:	edd8 6a13 	vldr	s13, [r8, #76]	; 0x4c
 801a69a:	ed93 6a00 	vldr	s12, [r3]
                prevKnobValues[k] = presetKnobValues[Rhodes][k];
 801a69e:	edc8 5a12 	vstr	s11, [r8, #72]	; 0x48
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a6a2:	eef4 6a46 	vcmp.f32	s13, s12
 801a6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6aa:	d01d      	beq.n	801a6e8 <SFXRhodesFrame+0x338>
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a6ac:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801a6b0:	eef2 3a0c 	vmov.f32	s7, #44	; 0x41600000  14.0
 801a6b4:	ee76 6a66 	vsub.f32	s13, s12, s13
 801a6b8:	ee66 6aa3 	vmul.f32	s13, s13, s7
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a6bc:	ee67 3aa6 	vmul.f32	s7, s15, s13
                    float snapRate = roundf(rawRate);
 801a6c0:	fef8 6a66 	vrinta.f32	s13, s13
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a6c4:	eee7 3a26 	vfma.f32	s7, s14, s13
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a6c8:	eef5 3ac0 	vcmpe.f32	s7, #0.0
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a6cc:	eef0 6a63 	vmov.f32	s13, s7
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6d4:	f100 82f5 	bmi.w	801acc2 <SFXRhodesFrame+0x912>
                    else rate += 1.0f;
 801a6d8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 801a6dc:	ee76 3aa3 	vadd.f32	s7, s13, s7
                    displayValues[k] = rate;
 801a6e0:	edc4 3a13 	vstr	s7, [r4, #76]	; 0x4c
                    FM_freqRatios[4][k-15] = rate;
 801a6e4:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a6e8:	4b29      	ldr	r3, [pc, #164]	; (801a790 <SFXRhodesFrame+0x3e0>)
 801a6ea:	edd8 3a14 	vldr	s7, [r8, #80]	; 0x50
 801a6ee:	edd3 6a00 	vldr	s13, [r3]
                prevKnobValues[k] = presetKnobValues[Rhodes][k];
 801a6f2:	ed88 6a13 	vstr	s12, [r8, #76]	; 0x4c
                if (presetKnobValues[Rhodes][k] != prevKnobValues[k])
 801a6f6:	eef4 6a63 	vcmp.f32	s13, s7
 801a6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6fe:	d01b      	beq.n	801a738 <SFXRhodesFrame+0x388>
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a700:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 801a704:	eeb2 3a0c 	vmov.f32	s6, #44	; 0x41600000  14.0
 801a708:	ee76 3ae3 	vsub.f32	s7, s13, s7
 801a70c:	ee63 3a83 	vmul.f32	s7, s7, s6
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a710:	ee67 7aa3 	vmul.f32	s15, s15, s7
                    float snapRate = roundf(rawRate);
 801a714:	fef8 3a63 	vrinta.f32	s7, s7
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a718:	eee7 7a23 	vfma.f32	s15, s14, s7
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a71c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a720:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a728:	f100 82d4 	bmi.w	801acd4 <SFXRhodesFrame+0x924>
                    else rate += 1.0f;
 801a72c:	ee77 7a87 	vadd.f32	s15, s15, s14
                    displayValues[k] = rate;
 801a730:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
                    FM_freqRatios[4][k-15] = rate;
 801a734:	edcb 7a80 	vstr	s15, [fp, #512]	; 0x200
            if (presetKnobValues[Rhodes][22] != prevKnobValues[22])
 801a738:	4b16      	ldr	r3, [pc, #88]	; (801a794 <SFXRhodesFrame+0x3e4>)
 801a73a:	edd8 7a16 	vldr	s15, [r8, #88]	; 0x58
 801a73e:	ed93 7a00 	vldr	s14, [r3]
                prevKnobValues[k] = presetKnobValues[Rhodes][k];
 801a742:	edc8 6a14 	vstr	s13, [r8, #80]	; 0x50
            if (presetKnobValues[Rhodes][22] != prevKnobValues[22])
 801a746:	eeb4 7a67 	vcmp.f32	s14, s15
 801a74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a74e:	f000 80dd 	beq.w	801a90c <SFXRhodesFrame+0x55c>
 801a752:	e025      	b.n	801a7a0 <SFXRhodesFrame+0x3f0>
 801a754:	20018724 	.word	0x20018724
 801a758:	20017560 	.word	0x20017560
 801a75c:	20000548 	.word	0x20000548
 801a760:	66666667 	.word	0x66666667
 801a764:	200033f4 	.word	0x200033f4
 801a768:	20017084 	.word	0x20017084
 801a76c:	447a0000 	.word	0x447a0000
 801a770:	46000000 	.word	0x46000000
 801a774:	3fa66666 	.word	0x3fa66666
 801a778:	200187d4 	.word	0x200187d4
 801a77c:	00000000 	.word	0x00000000
 801a780:	20003434 	.word	0x20003434
 801a784:	20003438 	.word	0x20003438
 801a788:	2000343c 	.word	0x2000343c
 801a78c:	20003440 	.word	0x20003440
 801a790:	20003444 	.word	0x20003444
 801a794:	2000344c 	.word	0x2000344c
 801a798:	20000040 	.word	0x20000040
 801a79c:	20017714 	.word	0x20017714
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a7a0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                overtoneSnap = displayValues[22] = presetKnobValues[Rhodes][22];
 801a7a4:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a7a8:	eef2 3a0c 	vmov.f32	s7, #44	; 0x41600000  14.0
                overtoneSnap = displayValues[22] = presetKnobValues[Rhodes][22];
 801a7ac:	ed8b 7a62 	vstr	s14, [fp, #392]	; 0x188
 801a7b0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a7b4:	ee34 4a67 	vsub.f32	s8, s8, s15
 801a7b8:	ee73 7a47 	vsub.f32	s15, s6, s14
 801a7bc:	ee24 4a23 	vmul.f32	s8, s8, s7
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a7c0:	ee64 3a27 	vmul.f32	s7, s8, s15
                    float snapRate = roundf(rawRate);
 801a7c4:	feb8 4a44 	vrinta.f32	s8, s8
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a7c8:	eee7 3a04 	vfma.f32	s7, s14, s8
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a7cc:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 801a7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7d4:	f100 8285 	bmi.w	801ace2 <SFXRhodesFrame+0x932>
                    else rate += 1.0f;
 801a7d8:	ee33 4a83 	vadd.f32	s8, s7, s6
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a7dc:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
                    displayValues[k] = rate;
 801a7e0:	ed84 4a0f 	vstr	s8, [r4, #60]	; 0x3c
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a7e4:	eef2 3a0c 	vmov.f32	s7, #44	; 0x41600000  14.0
                    FM_freqRatios[4][k-15] = rate;
 801a7e8:	ed8b 4a7b 	vstr	s8, [fp, #492]	; 0x1ec
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a7ec:	ee74 4ac3 	vsub.f32	s9, s9, s6
 801a7f0:	ee64 4aa3 	vmul.f32	s9, s9, s7
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a7f4:	ee24 4aa7 	vmul.f32	s8, s9, s15
                    float snapRate = roundf(rawRate);
 801a7f8:	fef8 4a64 	vrinta.f32	s9, s9
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a7fc:	eea7 4a24 	vfma.f32	s8, s14, s9
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a800:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a804:	eef0 4a44 	vmov.f32	s9, s8
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a808:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 801a80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a810:	f100 82a3 	bmi.w	801ad5a <SFXRhodesFrame+0x9aa>
                    else rate += 1.0f;
 801a814:	ee74 4a84 	vadd.f32	s9, s9, s8
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a818:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
                    displayValues[k] = rate;
 801a81c:	edc4 4a10 	vstr	s9, [r4, #64]	; 0x40
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a820:	eeb2 4a0c 	vmov.f32	s8, #44	; 0x41600000  14.0
                    FM_freqRatios[4][k-15] = rate;
 801a824:	edcb 4a7c 	vstr	s9, [fp, #496]	; 0x1f0
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a828:	ee35 5a63 	vsub.f32	s10, s10, s7
 801a82c:	ee25 5a04 	vmul.f32	s10, s10, s8
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a830:	ee65 4a27 	vmul.f32	s9, s10, s15
                    float snapRate = roundf(rawRate);
 801a834:	feb8 5a45 	vrinta.f32	s10, s10
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a838:	eee7 4a05 	vfma.f32	s9, s14, s10
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a83c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a840:	eeb0 5a64 	vmov.f32	s10, s9
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a844:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 801a848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a84c:	f100 827e 	bmi.w	801ad4c <SFXRhodesFrame+0x99c>
                    else rate += 1.0f;
 801a850:	ee35 5a24 	vadd.f32	s10, s10, s9
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a854:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
                    displayValues[k] = rate;
 801a858:	ed84 5a11 	vstr	s10, [r4, #68]	; 0x44
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a85c:	eef2 4a0c 	vmov.f32	s9, #44	; 0x41600000  14.0
                    FM_freqRatios[4][k-15] = rate;
 801a860:	ed8b 5a7d 	vstr	s10, [fp, #500]	; 0x1f4
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a864:	ee75 5ac4 	vsub.f32	s11, s11, s8
 801a868:	ee65 5aa4 	vmul.f32	s11, s11, s9
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a86c:	ee25 5aa7 	vmul.f32	s10, s11, s15
                    float snapRate = roundf(rawRate);
 801a870:	fef8 5a65 	vrinta.f32	s11, s11
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a874:	eea7 5a25 	vfma.f32	s10, s14, s11
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a878:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a87c:	eef0 5a45 	vmov.f32	s11, s10
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a880:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801a884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a888:	f100 8259 	bmi.w	801ad3e <SFXRhodesFrame+0x98e>
                    else rate += 1.0f;
 801a88c:	ee75 5a85 	vadd.f32	s11, s11, s10
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a890:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
                    displayValues[k] = rate;
 801a894:	edc4 5a12 	vstr	s11, [r4, #72]	; 0x48
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a898:	eeb2 5a0c 	vmov.f32	s10, #44	; 0x41600000  14.0
                    FM_freqRatios[4][k-15] = rate;
 801a89c:	edcb 5a7e 	vstr	s11, [fp, #504]	; 0x1f8
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a8a0:	ee36 6a64 	vsub.f32	s12, s12, s9
 801a8a4:	ee26 6a05 	vmul.f32	s12, s12, s10
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a8a8:	ee66 5a27 	vmul.f32	s11, s12, s15
                    float snapRate = roundf(rawRate);
 801a8ac:	feb8 6a46 	vrinta.f32	s12, s12
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a8b0:	eee7 5a06 	vfma.f32	s11, s14, s12
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a8b4:	eef5 5ac0 	vcmpe.f32	s11, #0.0
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a8b8:	eeb0 6a65 	vmov.f32	s12, s11
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a8bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801a8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8c4:	f100 8234 	bmi.w	801ad30 <SFXRhodesFrame+0x980>
                    else rate += 1.0f;
 801a8c8:	ee36 6a25 	vadd.f32	s12, s12, s11
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a8cc:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
                    displayValues[k] = rate;
 801a8d0:	ed84 6a13 	vstr	s12, [r4, #76]	; 0x4c
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a8d4:	eef2 5a0c 	vmov.f32	s11, #44	; 0x41600000  14.0
                    FM_freqRatios[4][k-15] = rate;
 801a8d8:	ed8b 6a7f 	vstr	s12, [fp, #508]	; 0x1fc
                    float rawRate = (presetKnobValues[Rhodes][k] - 0.5f) * 14.0f;
 801a8dc:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801a8e0:	ee66 6aa5 	vmul.f32	s13, s13, s11
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a8e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
                    float snapRate = roundf(rawRate);
 801a8e8:	fef8 6a66 	vrinta.f32	s13, s13
                    float rate = (snapRate * overtoneSnap) + (rawRate * (1.0f - overtoneSnap));
 801a8ec:	eee7 7a26 	vfma.f32	s15, s14, s13
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801a8f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a8f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8fc:	f100 8211 	bmi.w	801ad22 <SFXRhodesFrame+0x972>
                    else rate += 1.0f;
 801a900:	ee77 7aa6 	vadd.f32	s15, s15, s13
                    displayValues[k] = rate;
 801a904:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
                    FM_freqRatios[4][k-15] = rate;
 801a908:	edcb 7a80 	vstr	s15, [fp, #512]	; 0x200
            displayValues[23] = presetKnobValues[Rhodes][23];
 801a90c:	4bd3      	ldr	r3, [pc, #844]	; (801ac5c <SFXRhodesFrame+0x8ac>)
            prevKnobValues[22] = presetKnobValues[Rhodes][22];
 801a90e:	ed88 7a16 	vstr	s14, [r8, #88]	; 0x58
            displayValues[23] = presetKnobValues[Rhodes][23];
 801a912:	edd3 7a00 	vldr	s15, [r3]
            if (prevDisplayValues[23] != displayValues[23])
 801a916:	4bd2      	ldr	r3, [pc, #840]	; (801ac60 <SFXRhodesFrame+0x8b0>)
            displayValues[23] = presetKnobValues[Rhodes][23];
 801a918:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
            if (prevDisplayValues[23] != displayValues[23])
 801a91c:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 801a920:	eef4 7a66 	vcmp.f32	s15, s13
 801a924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a928:	d03a      	beq.n	801a9a0 <SFXRhodesFrame+0x5f0>
 801a92a:	f8df 9378 	ldr.w	r9, [pc, #888]	; 801aca4 <SFXRhodesFrame+0x8f4>
                    randomDecays[i] = (1.0f - displayValues[23]) + (randomNumberDraw * displayValues[23]);
 801a92e:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
 801a932:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801a936:	4fcb      	ldr	r7, [pc, #812]	; (801ac64 <SFXRhodesFrame+0x8b4>)
 801a938:	f109 0518 	add.w	r5, r9, #24
            if (prevDisplayValues[23] != displayValues[23])
 801a93c:	464e      	mov	r6, r9
                    randomDecays[i] = (1.0f - displayValues[23]) + (randomNumberDraw * displayValues[23]);
 801a93e:	ed9f 8aca 	vldr	s16, [pc, #808]	; 801ac68 <SFXRhodesFrame+0x8b8>
                    float randomNumberDraw = (leaf.random() * 2.0f) + 0.08f;
 801a942:	693b      	ldr	r3, [r7, #16]
 801a944:	4798      	blx	r3
                    randomDecays[i] = (1.0f - displayValues[23]) + (randomNumberDraw * displayValues[23]);
 801a946:	eeb0 7a48 	vmov.f32	s14, s16
 801a94a:	eef0 6a68 	vmov.f32	s13, s17
 801a94e:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 801a952:	eea0 7a09 	vfma.f32	s14, s0, s18
 801a956:	eee7 6a27 	vfma.f32	s13, s14, s15
 801a95a:	ece6 6a01 	vstmia	r6!, {s13}
                for (int i = 0; i < 6; i++)
 801a95e:	42ae      	cmp	r6, r5
 801a960:	d1ef      	bne.n	801a942 <SFXRhodesFrame+0x592>
 801a962:	4fc2      	ldr	r7, [pc, #776]	; (801ac6c <SFXRhodesFrame+0x8bc>)
                        tADSR4_setDecay(&FM_envs[i][j],(LEAF_clip(10.0f, displayValues[6] * randomDecays[j], 20000.0f))); //FM_decays[Rsound][j] * displayValues[6]);
 801a964:	ed9f 8ac2 	vldr	s16, [pc, #776]	; 801ac70 <SFXRhodesFrame+0x8c0>
            if (prevDisplayValues[23] != displayValues[23])
 801a968:	46ba      	mov	sl, r7
 801a96a:	464d      	mov	r5, r9
                        tADSR4_setDecay(&FM_envs[i][j],(LEAF_clip(10.0f, displayValues[6] * randomDecays[j], 20000.0f))); //FM_decays[Rsound][j] * displayValues[6]);
 801a96c:	ecf5 0a01 	vldmia	r5!, {s1}
 801a970:	eeb0 1a48 	vmov.f32	s2, s16
 801a974:	edd4 7a06 	vldr	s15, [r4, #24]
 801a978:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801a97c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801a980:	f009 f9c2 	bl	8023d08 <LEAF_clip>
 801a984:	4650      	mov	r0, sl
 801a986:	f007 f9a3 	bl	8021cd0 <tADSR4_setDecay>
                    for (int j = 0; j < 6; j++)
 801a98a:	42b5      	cmp	r5, r6
 801a98c:	f10a 0a04 	add.w	sl, sl, #4
 801a990:	d1ec      	bne.n	801a96c <SFXRhodesFrame+0x5bc>
 801a992:	3718      	adds	r7, #24
                for (int i = 0; i < NUM_VOC_VOICES; i++)
 801a994:	4bb7      	ldr	r3, [pc, #732]	; (801ac74 <SFXRhodesFrame+0x8c4>)
 801a996:	429f      	cmp	r7, r3
 801a998:	d1e6      	bne.n	801a968 <SFXRhodesFrame+0x5b8>
 801a99a:	4bb0      	ldr	r3, [pc, #704]	; (801ac5c <SFXRhodesFrame+0x8ac>)
 801a99c:	edd3 6a00 	vldr	s13, [r3]
            displayValues[24] = presetKnobValues[Rhodes][24];
 801a9a0:	4bb5      	ldr	r3, [pc, #724]	; (801ac78 <SFXRhodesFrame+0x8c8>)
            if (prevDisplayValues[24] != displayValues[24])
 801a9a2:	4aaf      	ldr	r2, [pc, #700]	; (801ac60 <SFXRhodesFrame+0x8b0>)
            displayValues[24] = presetKnobValues[Rhodes][24];
 801a9a4:	ed93 7a00 	vldr	s14, [r3]
            if (prevDisplayValues[24] != displayValues[24])
 801a9a8:	edd2 7a18 	vldr	s15, [r2, #96]	; 0x60
            prevKnobValues[23] = presetKnobValues[Rhodes][23];
 801a9ac:	edc8 6a17 	vstr	s13, [r8, #92]	; 0x5c
            if (prevDisplayValues[24] != displayValues[24])
 801a9b0:	eeb4 7a67 	vcmp.f32	s14, s15
            displayValues[24] = presetKnobValues[Rhodes][24];
 801a9b4:	ed84 7a18 	vstr	s14, [r4, #96]	; 0x60
            if (prevDisplayValues[24] != displayValues[24])
 801a9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9bc:	d024      	beq.n	801aa08 <SFXRhodesFrame+0x658>
 801a9be:	4daf      	ldr	r5, [pc, #700]	; (801ac7c <SFXRhodesFrame+0x8cc>)
                    randomSustains[i] = (1.0f - displayValues[24]) + (randomNumberDraw * displayValues[24]);
 801a9c0:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
 801a9c4:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 801a9c8:	4ead      	ldr	r6, [pc, #692]	; (801ac80 <SFXRhodesFrame+0x8d0>)
 801a9ca:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801a9ce:	f105 0818 	add.w	r8, r5, #24
 801a9d2:	4fa4      	ldr	r7, [pc, #656]	; (801ac64 <SFXRhodesFrame+0x8b4>)
                    float randomNumberDraw = leaf.random() * 2.0f;
 801a9d4:	693b      	ldr	r3, [r7, #16]
 801a9d6:	4798      	blx	r3
                    randomSustains[i] = (1.0f - displayValues[24]) + (randomNumberDraw * displayValues[24]);
 801a9d8:	eeb0 7a68 	vmov.f32	s14, s17
 801a9dc:	eef0 6a48 	vmov.f32	s13, s16
 801a9e0:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
                    tExpSmooth_setDest(&susSmoothers[i], displayValues[7] * randomSustains[i]);
 801a9e4:	4630      	mov	r0, r6
 801a9e6:	3604      	adds	r6, #4
                    randomSustains[i] = (1.0f - displayValues[24]) + (randomNumberDraw * displayValues[24]);
 801a9e8:	eea0 7a09 	vfma.f32	s14, s0, s18
                    tExpSmooth_setDest(&susSmoothers[i], displayValues[7] * randomSustains[i]);
 801a9ec:	ed94 0a07 	vldr	s0, [r4, #28]
                    randomSustains[i] = (1.0f - displayValues[24]) + (randomNumberDraw * displayValues[24]);
 801a9f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 801a9f4:	ece5 6a01 	vstmia	r5!, {s13}
                    tExpSmooth_setDest(&susSmoothers[i], displayValues[7] * randomSustains[i]);
 801a9f8:	ee26 0a80 	vmul.f32	s0, s13, s0
 801a9fc:	f007 fcf0 	bl	80223e0 <tExpSmooth_setDest>
                for (int i = 0; i < 6; i++)
 801aa00:	4545      	cmp	r5, r8
 801aa02:	d1e7      	bne.n	801a9d4 <SFXRhodesFrame+0x624>
 801aa04:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
            prevDisplayValues[24] = displayValues[24];
 801aa08:	4b95      	ldr	r3, [pc, #596]	; (801ac60 <SFXRhodesFrame+0x8b0>)
 801aa0a:	f04f 0806 	mov.w	r8, #6
 801aa0e:	4e9b      	ldr	r6, [pc, #620]	; (801ac7c <SFXRhodesFrame+0x8cc>)
 801aa10:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 801aa14:	f103 0714 	add.w	r7, r3, #20
 801aa18:	4b9a      	ldr	r3, [pc, #616]	; (801ac84 <SFXRhodesFrame+0x8d4>)
                                    tADSR4_setDecay(&FM_envs[i][j],(LEAF_clip(7.0f, displayValues[6] * randomDecays[j], 20000.0f)));
 801aa1a:	ed9f 8a95 	vldr	s16, [pc, #596]	; 801ac70 <SFXRhodesFrame+0x8c0>
 801aa1e:	469a      	mov	sl, r3
 801aa20:	f8cd b004 	str.w	fp, [sp, #4]
                if (prevDisplayValues[k] != displayValues[k])
 801aa24:	ecb7 7a01 	vldmia	r7!, {s14}
 801aa28:	ecfa 7a01 	vldmia	sl!, {s15}
 801aa2c:	eeb4 7a67 	vcmp.f32	s14, s15
 801aa30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa34:	d01a      	beq.n	801aa6c <SFXRhodesFrame+0x6bc>
                    switch(k)
 801aa36:	f1a8 0307 	sub.w	r3, r8, #7
 801aa3a:	2b03      	cmp	r3, #3
 801aa3c:	d803      	bhi.n	801aa46 <SFXRhodesFrame+0x696>
 801aa3e:	e8df f003 	tbb	[pc, r3]
 801aa42:	a3ba      	.short	0xa3ba
 801aa44:	dc8d      	.short	0xdc8d
 801aa46:	f8df b224 	ldr.w	fp, [pc, #548]	; 801ac6c <SFXRhodesFrame+0x8bc>
 801aa4a:	f10b 09c0 	add.w	r9, fp, #192	; 0xc0
 801aa4e:	f10b 0518 	add.w	r5, fp, #24
                                    tADSR4_setAttack(&FM_envs[i][j], displayValues[5] );
 801aa52:	4658      	mov	r0, fp
 801aa54:	f10b 0b04 	add.w	fp, fp, #4
 801aa58:	ed94 0a05 	vldr	s0, [r4, #20]
 801aa5c:	f007 f92a 	bl	8021cb4 <tADSR4_setAttack>
                                for (int j = 0; j < 6; j++)
 801aa60:	455d      	cmp	r5, fp
 801aa62:	d1f6      	bne.n	801aa52 <SFXRhodesFrame+0x6a2>
                            for (int i = 0; i < NUM_VOC_VOICES; i++)
 801aa64:	454d      	cmp	r5, r9
 801aa66:	d1f2      	bne.n	801aa4e <SFXRhodesFrame+0x69e>
 801aa68:	ed5a 7a01 	vldr	s15, [sl, #-4]
            for (int k = 5; k < 10; k++)
 801aa6c:	f1b8 0f0a 	cmp.w	r8, #10
                prevDisplayValues[k] = displayValues[k];
 801aa70:	ed47 7a01 	vstr	s15, [r7, #-4]
            for (int k = 5; k < 10; k++)
 801aa74:	d002      	beq.n	801aa7c <SFXRhodesFrame+0x6cc>
 801aa76:	f108 0801 	add.w	r8, r8, #1
 801aa7a:	e7d3      	b.n	801aa24 <SFXRhodesFrame+0x674>
 801aa7c:	f8dd b004 	ldr.w	fp, [sp, #4]
            for (int i = 0; i < numVoices; i++)
 801aa80:	f89b 3000 	ldrb.w	r3, [fp]
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d05f      	beq.n	801ab48 <SFXRhodesFrame+0x798>
 801aa88:	f8df a21c 	ldr.w	sl, [pc, #540]	; 801aca8 <SFXRhodesFrame+0x8f8>
 801aa8c:	2500      	movs	r5, #0
 801aa8e:	f8df 821c 	ldr.w	r8, [pc, #540]	; 801acac <SFXRhodesFrame+0x8fc>
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801aa92:	4657      	mov	r7, sl
 801aa94:	4e7c      	ldr	r6, [pc, #496]	; (801ac88 <SFXRhodesFrame+0x8d8>)
 801aa96:	e002      	b.n	801aa9e <SFXRhodesFrame+0x6ee>
            for (int i = 0; i < numVoices; i++)
 801aa98:	3501      	adds	r5, #1
 801aa9a:	42ab      	cmp	r3, r5
 801aa9c:	dd54      	ble.n	801ab48 <SFXRhodesFrame+0x798>
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801aa9e:	fa5f f985 	uxtb.w	r9, r5
 801aaa2:	4638      	mov	r0, r7
 801aaa4:	4649      	mov	r1, r9
 801aaa6:	f009 ffb3 	bl	8024a10 <tSimplePoly_getPitch>
 801aaaa:	ee07 0a90 	vmov	s15, r0
 801aaae:	ed96 0a02 	vldr	s0, [r6, #8]
 801aab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801aab6:	4b75      	ldr	r3, [pc, #468]	; (801ac8c <SFXRhodesFrame+0x8dc>)
 801aab8:	781a      	ldrb	r2, [r3, #0]
            float tempNote = (float)tSimplePoly_getPitch(&poly, voice) + pitchBendValue;
 801aaba:	ee37 7a00 	vadd.f32	s14, s14, s0
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801aabe:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801aac2:	ee17 3a90 	vmov	r3, s15
 801aac6:	1a9b      	subs	r3, r3, r2
 801aac8:	4a71      	ldr	r2, [pc, #452]	; (801ac90 <SFXRhodesFrame+0x8e0>)
 801aaca:	fb82 2103 	smull	r2, r1, r2, r3
 801aace:	17da      	asrs	r2, r3, #31
 801aad0:	ebc2 0261 	rsb	r2, r2, r1, asr #1
 801aad4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801aad8:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
            float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 801aadc:	4a6d      	ldr	r2, [pc, #436]	; (801ac94 <SFXRhodesFrame+0x8e4>)
            float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801aade:	ee07 3a90 	vmov	s15, r3
 801aae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 801aae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aaea:	ee17 3a90 	vmov	r3, s15
 801aaee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801aaf2:	ed93 0a00 	vldr	s0, [r3]
            freq[voice] = LEAF_midiToFrequency(tunedNote);
 801aaf6:	ee37 0a00 	vadd.f32	s0, s14, s0
 801aafa:	f009 f9ef 	bl	8023edc <LEAF_midiToFrequency>
                if (numVoices > 1)
 801aafe:	f89b 3000 	ldrb.w	r3, [fp]
            freq[voice] = LEAF_midiToFrequency(tunedNote);
 801ab02:	eca8 0a01 	vstmia	r8!, {s0}
                if (numVoices > 1)
 801ab06:	2b01      	cmp	r3, #1
 801ab08:	d9c6      	bls.n	801aa98 <SFXRhodesFrame+0x6e8>
                    if (poly->voices[i][0] == -2)
 801ab0a:	f8da 2000 	ldr.w	r2, [sl]
 801ab0e:	6912      	ldr	r2, [r2, #16]
 801ab10:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801ab14:	6812      	ldr	r2, [r2, #0]
 801ab16:	3202      	adds	r2, #2
 801ab18:	d1be      	bne.n	801aa98 <SFXRhodesFrame+0x6e8>
 801ab1a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
                        if ((FM_envs[i][0]->whichStage == env_idle) && (FM_envs[i][2]->whichStage == env_idle))
 801ab1e:	4853      	ldr	r0, [pc, #332]	; (801ac6c <SFXRhodesFrame+0x8bc>)
 801ab20:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
 801ab24:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 801ab28:	6a89      	ldr	r1, [r1, #40]	; 0x28
 801ab2a:	2900      	cmp	r1, #0
 801ab2c:	d1b4      	bne.n	801aa98 <SFXRhodesFrame+0x6e8>
 801ab2e:	6892      	ldr	r2, [r2, #8]
 801ab30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801ab32:	2a00      	cmp	r2, #0
 801ab34:	d1b0      	bne.n	801aa98 <SFXRhodesFrame+0x6e8>
                            tSimplePoly_deactivateVoice(&poly, i);
 801ab36:	4649      	mov	r1, r9
 801ab38:	4638      	mov	r0, r7
 801ab3a:	f009 fe8f 	bl	802485c <tSimplePoly_deactivateVoice>
            for (int i = 0; i < numVoices; i++)
 801ab3e:	3501      	adds	r5, #1
 801ab40:	f89b 3000 	ldrb.w	r3, [fp]
 801ab44:	42ab      	cmp	r3, r5
 801ab46:	dcaa      	bgt.n	801aa9e <SFXRhodesFrame+0x6ee>
            tCycle_setFreq(&tremolo, displayValues[2]);
 801ab48:	ed94 0a02 	vldr	s0, [r4, #8]
 801ab4c:	4852      	ldr	r0, [pc, #328]	; (801ac98 <SFXRhodesFrame+0x8e8>)
        }
 801ab4e:	b003      	add	sp, #12
 801ab50:	ecbd 8b04 	vpop	{d8-d9}
 801ab54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            tCycle_setFreq(&tremolo, displayValues[2]);
 801ab58:	f009 bf88 	b.w	8024a6c <tCycle_setFreq>
 801ab5c:	f8df b10c 	ldr.w	fp, [pc, #268]	; 801ac6c <SFXRhodesFrame+0x8bc>
 801ab60:	f10b 09c0 	add.w	r9, fp, #192	; 0xc0
 801ab64:	f10b 0518 	add.w	r5, fp, #24
                                    tADSR4_setRelease(&FM_envs[i][j], displayValues[8]);
 801ab68:	4658      	mov	r0, fp
 801ab6a:	f10b 0b04 	add.w	fp, fp, #4
 801ab6e:	ed94 0a08 	vldr	s0, [r4, #32]
 801ab72:	f007 f8d1 	bl	8021d18 <tADSR4_setRelease>
                                for (int j = 0; j < 6; j++)
 801ab76:	455d      	cmp	r5, fp
 801ab78:	d1f6      	bne.n	801ab68 <SFXRhodesFrame+0x7b8>
                            for (int i = 0; i < NUM_VOC_VOICES; i++)
 801ab7a:	45d9      	cmp	r9, fp
 801ab7c:	d1f2      	bne.n	801ab64 <SFXRhodesFrame+0x7b4>
                prevDisplayValues[k] = displayValues[k];
 801ab7e:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 801ab82:	f847 3c04 	str.w	r3, [r7, #-4]
 801ab86:	e776      	b.n	801aa76 <SFXRhodesFrame+0x6c6>
 801ab88:	4d3c      	ldr	r5, [pc, #240]	; (801ac7c <SFXRhodesFrame+0x8cc>)
 801ab8a:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 801ac80 <SFXRhodesFrame+0x8d0>
 801ab8e:	f105 0918 	add.w	r9, r5, #24
                                tExpSmooth_setDest(&susSmoothers[i], displayValues[7] * randomSustains[i]);
 801ab92:	ecb5 0a01 	vldmia	r5!, {s0}
 801ab96:	4658      	mov	r0, fp
 801ab98:	edd4 7a07 	vldr	s15, [r4, #28]
 801ab9c:	f10b 0b04 	add.w	fp, fp, #4
 801aba0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801aba4:	f007 fc1c 	bl	80223e0 <tExpSmooth_setDest>
                            for (int i = 0; i < 6; i++)
 801aba8:	45a9      	cmp	r9, r5
 801abaa:	d1f2      	bne.n	801ab92 <SFXRhodesFrame+0x7e2>
                prevDisplayValues[k] = displayValues[k];
 801abac:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 801abb0:	f847 3c04 	str.w	r3, [r7, #-4]
 801abb4:	e75f      	b.n	801aa76 <SFXRhodesFrame+0x6c6>
 801abb6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801ac6c <SFXRhodesFrame+0x8bc>
 801abba:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 801aca4 <SFXRhodesFrame+0x8f4>
            prevDisplayValues[24] = displayValues[24];
 801abbe:	464d      	mov	r5, r9
                                    tADSR4_setDecay(&FM_envs[i][j],(LEAF_clip(7.0f, displayValues[6] * randomDecays[j], 20000.0f)));
 801abc0:	ecfb 0a01 	vldmia	fp!, {s1}
 801abc4:	eeb0 1a48 	vmov.f32	s2, s16
 801abc8:	edd4 7a06 	vldr	s15, [r4, #24]
 801abcc:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 801abd0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801abd4:	f009 f898 	bl	8023d08 <LEAF_clip>
 801abd8:	4628      	mov	r0, r5
 801abda:	f007 f879 	bl	8021cd0 <tADSR4_setDecay>
                                for (int j = 0; j < 6; j++)
 801abde:	455e      	cmp	r6, fp
 801abe0:	f105 0504 	add.w	r5, r5, #4
 801abe4:	d1ec      	bne.n	801abc0 <SFXRhodesFrame+0x810>
 801abe6:	f109 0918 	add.w	r9, r9, #24
                            for (int i = 0; i < NUM_VOC_VOICES; i++)
 801abea:	4b22      	ldr	r3, [pc, #136]	; (801ac74 <SFXRhodesFrame+0x8c4>)
 801abec:	454b      	cmp	r3, r9
 801abee:	d1e4      	bne.n	801abba <SFXRhodesFrame+0x80a>
                prevDisplayValues[k] = displayValues[k];
 801abf0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 801abf4:	f847 3c04 	str.w	r3, [r7, #-4]
 801abf8:	e73d      	b.n	801aa76 <SFXRhodesFrame+0x6c6>
 801abfa:	4d1c      	ldr	r5, [pc, #112]	; (801ac6c <SFXRhodesFrame+0x8bc>)
                                    tADSR4_setLeakFactor(&FM_envs[i][j], ((1.0f - displayValues[9])  * 0.00004f) + 0.99996f);
 801abfc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801ac00:	f8dd b004 	ldr.w	fp, [sp, #4]
 801ac04:	eddf 8a25 	vldr	s17, [pc, #148]	; 801ac9c <SFXRhodesFrame+0x8ec>
 801ac08:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
 801ac0c:	ed9f 8a24 	vldr	s16, [pc, #144]	; 801aca0 <SFXRhodesFrame+0x8f0>
 801ac10:	f105 0618 	add.w	r6, r5, #24
 801ac14:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 801ac18:	eeb0 0a48 	vmov.f32	s0, s16
 801ac1c:	4628      	mov	r0, r5
 801ac1e:	3504      	adds	r5, #4
 801ac20:	ee79 7a67 	vsub.f32	s15, s18, s15
 801ac24:	eea7 0aa8 	vfma.f32	s0, s15, s17
 801ac28:	f007 f884 	bl	8021d34 <tADSR4_setLeakFactor>
                                for (int j = 0; j < 6; j++)
 801ac2c:	42b5      	cmp	r5, r6
 801ac2e:	d1f1      	bne.n	801ac14 <SFXRhodesFrame+0x864>
                            for (int i = 0; i < NUM_VOC_VOICES; i++)
 801ac30:	42bd      	cmp	r5, r7
 801ac32:	d1ed      	bne.n	801ac10 <SFXRhodesFrame+0x860>
                prevDisplayValues[k] = displayValues[k];
 801ac34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ac36:	4a0a      	ldr	r2, [pc, #40]	; (801ac60 <SFXRhodesFrame+0x8b0>)
 801ac38:	6253      	str	r3, [r2, #36]	; 0x24
 801ac3a:	e721      	b.n	801aa80 <SFXRhodesFrame+0x6d0>
                tremoloStereo = !tremoloStereo;
 801ac3c:	4e12      	ldr	r6, [pc, #72]	; (801ac88 <SFXRhodesFrame+0x8d8>)
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 801ac3e:	2200      	movs	r2, #0
                tremoloStereo = !tremoloStereo;
 801ac40:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
                buttonActionsSFX[ButtonC][ActionPress] = 0;
 801ac44:	7722      	strb	r2, [r4, #28]
                tremoloStereo = !tremoloStereo;
 801ac46:	fab3 f383 	clz	r3, r3
 801ac4a:	095b      	lsrs	r3, r3, #5
                setLED_C(tremoloStereo == 1);
 801ac4c:	4618      	mov	r0, r3
                tremoloStereo = !tremoloStereo;
 801ac4e:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
                setLED_C(tremoloStereo == 1);
 801ac52:	f7f8 fed1 	bl	80139f8 <setLED_C>
 801ac56:	f7ff bbe4 	b.w	801a422 <SFXRhodesFrame+0x72>
 801ac5a:	bf00      	nop
 801ac5c:	20003450 	.word	0x20003450
 801ac60:	20003634 	.word	0x20003634
 801ac64:	200194e0 	.word	0x200194e0
 801ac68:	bf6b851f 	.word	0xbf6b851f
 801ac6c:	20017568 	.word	0x20017568
 801ac70:	469c4000 	.word	0x469c4000
 801ac74:	20017628 	.word	0x20017628
 801ac78:	20003454 	.word	0x20003454
 801ac7c:	2000025c 	.word	0x2000025c
 801ac80:	20002a70 	.word	0x20002a70
 801ac84:	200187e8 	.word	0x200187e8
 801ac88:	20000548 	.word	0x20000548
 801ac8c:	2000065c 	.word	0x2000065c
 801ac90:	2aaaaaab 	.word	0x2aaaaaab
 801ac94:	20000664 	.word	0x20000664
 801ac98:	200177ac 	.word	0x200177ac
 801ac9c:	3827c5ac 	.word	0x3827c5ac
 801aca0:	3f7ffd61 	.word	0x3f7ffd61
 801aca4:	20000244 	.word	0x20000244
 801aca8:	20017560 	.word	0x20017560
 801acac:	2000347c 	.word	0x2000347c
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801acb0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 801acb4:	ee76 6a63 	vsub.f32	s13, s12, s7
 801acb8:	eef0 6ae6 	vabs.f32	s13, s13
 801acbc:	ee83 6aa6 	vdiv.f32	s12, s7, s13
 801acc0:	e4e4      	b.n	801a68c <SFXRhodesFrame+0x2dc>
 801acc2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 801acc6:	ee73 6ac3 	vsub.f32	s13, s7, s6
 801acca:	eef0 6ae6 	vabs.f32	s13, s13
 801acce:	eec3 3a26 	vdiv.f32	s7, s6, s13
 801acd2:	e505      	b.n	801a6e0 <SFXRhodesFrame+0x330>
 801acd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801acd8:	eef0 3ae7 	vabs.f32	s7, s15
 801acdc:	eec7 7a23 	vdiv.f32	s15, s14, s7
 801ace0:	e526      	b.n	801a730 <SFXRhodesFrame+0x380>
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801ace2:	ee33 4ac3 	vsub.f32	s8, s7, s6
 801ace6:	eef0 3ac4 	vabs.f32	s7, s8
 801acea:	ee83 4a23 	vdiv.f32	s8, s6, s7
 801acee:	e575      	b.n	801a7dc <SFXRhodesFrame+0x42c>
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801acf0:	ee76 6a65 	vsub.f32	s13, s12, s11
 801acf4:	eef0 6ae6 	vabs.f32	s13, s13
 801acf8:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801acfc:	e448      	b.n	801a590 <SFXRhodesFrame+0x1e0>
 801acfe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801ad02:	ee76 6a65 	vsub.f32	s13, s12, s11
 801ad06:	eef0 6ae6 	vabs.f32	s13, s13
 801ad0a:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801ad0e:	e469      	b.n	801a5e4 <SFXRhodesFrame+0x234>
 801ad10:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801ad14:	ee76 6a65 	vsub.f32	s13, s12, s11
 801ad18:	eef0 6ae6 	vabs.f32	s13, s13
 801ad1c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801ad20:	e48a      	b.n	801a638 <SFXRhodesFrame+0x288>
                    if (rate < 0.0f) rate = 1.0f / fabsf(rate-1.0f);
 801ad22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ad26:	eeb0 6ae7 	vabs.f32	s12, s15
 801ad2a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801ad2e:	e5e9      	b.n	801a904 <SFXRhodesFrame+0x554>
 801ad30:	ee36 6a65 	vsub.f32	s12, s12, s11
 801ad34:	eeb0 5ac6 	vabs.f32	s10, s12
 801ad38:	ee85 6a85 	vdiv.f32	s12, s11, s10
 801ad3c:	e5c6      	b.n	801a8cc <SFXRhodesFrame+0x51c>
 801ad3e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801ad42:	eef0 4ae5 	vabs.f32	s9, s11
 801ad46:	eec5 5a24 	vdiv.f32	s11, s10, s9
 801ad4a:	e5a1      	b.n	801a890 <SFXRhodesFrame+0x4e0>
 801ad4c:	ee35 5a64 	vsub.f32	s10, s10, s9
 801ad50:	eeb0 4ac5 	vabs.f32	s8, s10
 801ad54:	ee84 5a84 	vdiv.f32	s10, s9, s8
 801ad58:	e57c      	b.n	801a854 <SFXRhodesFrame+0x4a4>
 801ad5a:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801ad5e:	eef0 3ae4 	vabs.f32	s7, s9
 801ad62:	eec4 4a23 	vdiv.f32	s9, s8, s7
 801ad66:	e557      	b.n	801a818 <SFXRhodesFrame+0x468>

0801ad68 <SFXRhodesTick>:
        {
 801ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad6c:	f8df 8320 	ldr.w	r8, [pc, #800]	; 801b090 <SFXRhodesTick+0x328>
 801ad70:	4cbb      	ldr	r4, [pc, #748]	; (801b060 <SFXRhodesTick+0x2f8>)
 801ad72:	f108 0518 	add.w	r5, r8, #24
 801ad76:	4646      	mov	r6, r8
 801ad78:	ed2d 8b08 	vpush	{d8-d11}
 801ad7c:	b08b      	sub	sp, #44	; 0x2c
 801ad7e:	9009      	str	r0, [sp, #36]	; 0x24
                sustainsFinal[i] = tExpSmooth_tick(&susSmoothers[i]);
 801ad80:	4620      	mov	r0, r4
 801ad82:	3404      	adds	r4, #4
 801ad84:	f007 fb36 	bl	80223f4 <tExpSmooth_tick>
 801ad88:	eca6 0a01 	vstmia	r6!, {s0}
            for (int i = 0; i < 6; i++)
 801ad8c:	42ae      	cmp	r6, r5
 801ad8e:	d1f7      	bne.n	801ad80 <SFXRhodesTick+0x18>
 801ad90:	4bb4      	ldr	r3, [pc, #720]	; (801b064 <SFXRhodesTick+0x2fc>)
 801ad92:	f103 09c0 	add.w	r9, r3, #192	; 0xc0
 801ad96:	461f      	mov	r7, r3
        {
 801ad98:	463d      	mov	r5, r7
 801ad9a:	4644      	mov	r4, r8
                    tADSR4_setSustain(&FM_envs[i][j], sustainsFinal[j]); //FM_sustains[Rsound][j] * displayValues[7]);
 801ad9c:	ecb4 0a01 	vldmia	r4!, {s0}
 801ada0:	4628      	mov	r0, r5
 801ada2:	f006 ffa3 	bl	8021cec <tADSR4_setSustain>
 801ada6:	3504      	adds	r5, #4
                for (int j = 0; j < 6; j++)
 801ada8:	42a6      	cmp	r6, r4
 801adaa:	d1f7      	bne.n	801ad9c <SFXRhodesTick+0x34>
 801adac:	3718      	adds	r7, #24
            for (int i = 0; i < NUM_VOC_VOICES; i++)
 801adae:	454f      	cmp	r7, r9
 801adb0:	d1f2      	bne.n	801ad98 <SFXRhodesTick+0x30>
            for (int i = 0; i < numVoices; i++)
 801adb2:	4dad      	ldr	r5, [pc, #692]	; (801b068 <SFXRhodesTick+0x300>)
 801adb4:	782b      	ldrb	r3, [r5, #0]
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	f000 8149 	beq.w	801b04e <SFXRhodesTick+0x2e6>
 801adbc:	4bab      	ldr	r3, [pc, #684]	; (801b06c <SFXRhodesTick+0x304>)
 801adbe:	2400      	movs	r4, #0
            float rightSample = 0.0f;
 801adc0:	ed9f 9aab 	vldr	s18, [pc, #684]	; 801b070 <SFXRhodesTick+0x308>
                leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801adc4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801adc8:	9300      	str	r3, [sp, #0]
 801adca:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 801adce:	4ba5      	ldr	r3, [pc, #660]	; (801b064 <SFXRhodesTick+0x2fc>)
            float leftSample = 0.0f;
 801add0:	eef0 9a49 	vmov.f32	s19, s18
 801add4:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 801b094 <SFXRhodesTick+0x32c>
            for (int i = 0; i < numVoices; i++)
 801add8:	4622      	mov	r2, r4
 801adda:	f103 0010 	add.w	r0, r3, #16
 801adde:	f103 0114 	add.w	r1, r3, #20
 801ade2:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 801b098 <SFXRhodesTick+0x330>
 801ade6:	46d9      	mov	r9, fp
 801ade8:	9007      	str	r0, [sp, #28]
 801adea:	f103 000c 	add.w	r0, r3, #12
 801adee:	9108      	str	r1, [sp, #32]
 801adf0:	9006      	str	r0, [sp, #24]
 801adf2:	1d18      	adds	r0, r3, #4
 801adf4:	499f      	ldr	r1, [pc, #636]	; (801b074 <SFXRhodesTick+0x30c>)
 801adf6:	3308      	adds	r3, #8
 801adf8:	9004      	str	r0, [sp, #16]
 801adfa:	9305      	str	r3, [sp, #20]
                tCycle_setFreq(&FM_sines[i][5], (myFrequency  * FM_freqRatios[Rsound][5]) + (FM_indices[Rsound][5] * feedback_output * displayValues[0]));
 801adfc:	f8d8 70fc 	ldr.w	r7, [r8, #252]	; 0xfc
            for (int i = 0; i < numVoices; i++)
 801ae00:	3201      	adds	r2, #1
 801ae02:	4b9d      	ldr	r3, [pc, #628]	; (801b078 <SFXRhodesTick+0x310>)
                tCycle_setFreq(&FM_sines[i][5], (myFrequency  * FM_freqRatios[Rsound][5]) + (FM_indices[Rsound][5] * feedback_output * displayValues[0]));
 801ae04:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ae08:	ed99 0a00 	vldr	s0, [r9]
 801ae0c:	191e      	adds	r6, r3, r4
 801ae0e:	3b04      	subs	r3, #4
 801ae10:	edd8 7a40 	vldr	s15, [r8, #256]	; 0x100
 801ae14:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 801ae18:	eb03 0b04 	add.w	fp, r3, r4
                float myFrequency = freq[i];
 801ae1c:	9b00      	ldr	r3, [sp, #0]
                tCycle_setFreq(&FM_sines[i][5], (myFrequency  * FM_freqRatios[Rsound][5]) + (FM_indices[Rsound][5] * feedback_output * displayValues[0]));
 801ae1e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ae22:	ed97 0a49 	vldr	s0, [r7, #292]	; 0x124
                float myFrequency = freq[i];
 801ae26:	ecf3 8a01 	vldmia	r3!, {s17}
                tCycle_setFreq(&FM_sines[i][5], (myFrequency  * FM_freqRatios[Rsound][5]) + (FM_indices[Rsound][5] * feedback_output * displayValues[0]));
 801ae2a:	4630      	mov	r0, r6
 801ae2c:	ed97 7a68 	vldr	s14, [r7, #416]	; 0x1a0
 801ae30:	ee27 0a80 	vmul.f32	s0, s15, s0
                float myFrequency = freq[i];
 801ae34:	9300      	str	r3, [sp, #0]
 801ae36:	4b91      	ldr	r3, [pc, #580]	; (801b07c <SFXRhodesTick+0x314>)
 801ae38:	9103      	str	r1, [sp, #12]
 801ae3a:	eb03 0a04 	add.w	sl, r3, r4
 801ae3e:	3b04      	subs	r3, #4
                tCycle_setFreq(&FM_sines[i][5], (myFrequency  * FM_freqRatios[Rsound][5]) + (FM_indices[Rsound][5] * feedback_output * displayValues[0]));
 801ae40:	eea7 0a28 	vfma.f32	s0, s14, s17
            for (int i = 0; i < numVoices; i++)
 801ae44:	9202      	str	r2, [sp, #8]
 801ae46:	191f      	adds	r7, r3, r4
                tCycle_setFreq(&FM_sines[i][5], (myFrequency  * FM_freqRatios[Rsound][5]) + (FM_indices[Rsound][5] * feedback_output * displayValues[0]));
 801ae48:	f009 fe10 	bl	8024a6c <tCycle_setFreq>
                feedback_output = tCycle_tick(&FM_sines[i][5]);
 801ae4c:	4630      	mov	r0, r6
 801ae4e:	f009 fe1b 	bl	8024a88 <tCycle_tick>
                tCycle_setFreq(&FM_sines[i][4], (myFrequency  * FM_freqRatios[Rsound][4]) + (FM_indices[Rsound][4] * feedback_output * displayValues[0] * tADSR4_tick(&FM_envs[i][5])));
 801ae52:	f8d8 60fc 	ldr.w	r6, [r8, #252]	; 0xfc
 801ae56:	edd9 7a00 	vldr	s15, [r9]
 801ae5a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ae5e:	9b08      	ldr	r3, [sp, #32]
                feedback_output = tCycle_tick(&FM_sines[i][5]);
 801ae60:	ed88 0a40 	vstr	s0, [r8, #256]	; 0x100
                tCycle_setFreq(&FM_sines[i][4], (myFrequency  * FM_freqRatios[Rsound][4]) + (FM_indices[Rsound][4] * feedback_output * displayValues[0] * tADSR4_tick(&FM_envs[i][5])));
 801ae64:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 801ae68:	1918      	adds	r0, r3, r4
 801ae6a:	4b85      	ldr	r3, [pc, #532]	; (801b080 <SFXRhodesTick+0x318>)
 801ae6c:	ed96 8a48 	vldr	s16, [r6, #288]	; 0x120
 801ae70:	4423      	add	r3, r4
 801ae72:	ed96 ba67 	vldr	s22, [r6, #412]	; 0x19c
 801ae76:	ee28 8a27 	vmul.f32	s16, s16, s15
 801ae7a:	9301      	str	r3, [sp, #4]
 801ae7c:	ee28 8a00 	vmul.f32	s16, s16, s0
 801ae80:	f006 ff76 	bl	8021d70 <tADSR4_tick>
 801ae84:	4a7f      	ldr	r2, [pc, #508]	; (801b084 <SFXRhodesTick+0x31c>)
 801ae86:	4658      	mov	r0, fp
 801ae88:	ee28 0a00 	vmul.f32	s0, s16, s0
 801ae8c:	1916      	adds	r6, r2, r4
 801ae8e:	eeab 0a28 	vfma.f32	s0, s22, s17
 801ae92:	f009 fdeb 	bl	8024a6c <tCycle_setFreq>
                tCycle_setFreq(&FM_sines[i][3], (myFrequency  * FM_freqRatios[Rsound][3]) + (FM_indices[Rsound][3] * displayValues[0] * tCycle_tick(&FM_sines[i][4]) * tADSR4_tickNoInterp(&FM_envs[i][4])));
 801ae96:	f8d8 30fc 	ldr.w	r3, [r8, #252]	; 0xfc
 801ae9a:	edd9 7a00 	vldr	s15, [r9]
 801ae9e:	4658      	mov	r0, fp
 801aea0:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 801aea4:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 801aea8:	ed9c 8a47 	vldr	s16, [ip, #284]	; 0x11c
 801aeac:	ed9c ba66 	vldr	s22, [ip, #408]	; 0x198
 801aeb0:	ee28 8a27 	vmul.f32	s16, s16, s15
 801aeb4:	f009 fde8 	bl	8024a88 <tCycle_tick>
 801aeb8:	9a07      	ldr	r2, [sp, #28]
 801aeba:	ee28 8a00 	vmul.f32	s16, s16, s0
 801aebe:	1910      	adds	r0, r2, r4
 801aec0:	f007 f8b4 	bl	802202c <tADSR4_tickNoInterp>
 801aec4:	4650      	mov	r0, sl
 801aec6:	ee28 0a00 	vmul.f32	s0, s16, s0
 801aeca:	eeab 0a28 	vfma.f32	s0, s22, s17
 801aece:	f009 fdcd 	bl	8024a6c <tCycle_setFreq>
                tCycle_setFreq(&FM_sines[i][2], (myFrequency  * FM_freqRatios[Rsound][2]) + (FM_indices[Rsound][2] * displayValues[0] * tCycle_tick(&FM_sines[i][3]) * tADSR4_tickNoInterp(&FM_envs[i][3])));
 801aed2:	f8d8 30fc 	ldr.w	r3, [r8, #252]	; 0xfc
 801aed6:	edd9 7a00 	vldr	s15, [r9]
 801aeda:	4650      	mov	r0, sl
 801aedc:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 801aee0:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 801aee4:	ed9c 8a46 	vldr	s16, [ip, #280]	; 0x118
 801aee8:	ed9c ba65 	vldr	s22, [ip, #404]	; 0x194
 801aeec:	ee28 8a27 	vmul.f32	s16, s16, s15
 801aef0:	f009 fdca 	bl	8024a88 <tCycle_tick>
 801aef4:	9a06      	ldr	r2, [sp, #24]
 801aef6:	ee28 8a00 	vmul.f32	s16, s16, s0
 801aefa:	1910      	adds	r0, r2, r4
 801aefc:	f007 f896 	bl	802202c <tADSR4_tickNoInterp>
 801af00:	4638      	mov	r0, r7
 801af02:	ee28 0a00 	vmul.f32	s0, s16, s0
 801af06:	eeab 0a28 	vfma.f32	s0, s22, s17
 801af0a:	f009 fdaf 	bl	8024a6c <tCycle_setFreq>
                tCycle_setFreq(&FM_sines[i][1], myFrequency  * FM_freqRatios[Rsound][1]);
 801af0e:	f8d8 00fc 	ldr.w	r0, [r8, #252]	; 0xfc
 801af12:	f8dd a004 	ldr.w	sl, [sp, #4]
 801af16:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 801af1a:	4650      	mov	r0, sl
 801af1c:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 801af20:	ed9c 0a64 	vldr	s0, [ip, #400]	; 0x190
 801af24:	ee28 0a80 	vmul.f32	s0, s17, s0
 801af28:	f009 fda0 	bl	8024a6c <tCycle_setFreq>
                tCycle_setFreq(&FM_sines[i][0],( myFrequency  * FM_freqRatios[Rsound][0]) + (FM_indices[Rsound][0] * displayValues[0] * tCycle_tick(&FM_sines[i][1]) * tADSR4_tickNoInterp(&FM_envs[i][1])));
 801af2c:	f8d8 30fc 	ldr.w	r3, [r8, #252]	; 0xfc
 801af30:	edd9 7a00 	vldr	s15, [r9]
 801af34:	4650      	mov	r0, sl
 801af36:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 801af3a:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 801af3e:	ed9c 8a44 	vldr	s16, [ip, #272]	; 0x110
 801af42:	ed9c ba63 	vldr	s22, [ip, #396]	; 0x18c
 801af46:	ee28 8a27 	vmul.f32	s16, s16, s15
 801af4a:	f009 fd9d 	bl	8024a88 <tCycle_tick>
 801af4e:	9b04      	ldr	r3, [sp, #16]
 801af50:	ee28 8a00 	vmul.f32	s16, s16, s0
 801af54:	1918      	adds	r0, r3, r4
 801af56:	f007 f869 	bl	802202c <tADSR4_tickNoInterp>
 801af5a:	4630      	mov	r0, r6
 801af5c:	ee28 0a00 	vmul.f32	s0, s16, s0
 801af60:	eeab 0a28 	vfma.f32	s0, s22, s17
 801af64:	f009 fd82 	bl	8024a6c <tCycle_setFreq>
                sample += (tCycle_tick(&FM_sines[i][2]) * tADSR4_tickNoInterp(&FM_envs[i][2]));
 801af68:	4638      	mov	r0, r7
 801af6a:	f009 fd8d 	bl	8024a88 <tCycle_tick>
 801af6e:	9b05      	ldr	r3, [sp, #20]
 801af70:	eeb0 ba40 	vmov.f32	s22, s0
 801af74:	1918      	adds	r0, r3, r4
 801af76:	f007 f859 	bl	802202c <tADSR4_tickNoInterp>
                sample += tCycle_tick(&FM_sines[i][0]) * tADSR4_tickNoInterp(&FM_envs[i][0]);
 801af7a:	4630      	mov	r0, r6
                sample += (tCycle_tick(&FM_sines[i][2]) * tADSR4_tickNoInterp(&FM_envs[i][2]));
 801af7c:	eef0 8a40 	vmov.f32	s17, s0
                sample += tCycle_tick(&FM_sines[i][0]) * tADSR4_tickNoInterp(&FM_envs[i][0]);
 801af80:	f009 fd82 	bl	8024a88 <tCycle_tick>
 801af84:	4b37      	ldr	r3, [pc, #220]	; (801b064 <SFXRhodesTick+0x2fc>)
 801af86:	eeb0 8a40 	vmov.f32	s16, s0
 801af8a:	1918      	adds	r0, r3, r4
 801af8c:	3418      	adds	r4, #24
 801af8e:	f007 f84d 	bl	802202c <tADSR4_tickNoInterp>
                leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801af92:	9903      	ldr	r1, [sp, #12]
 801af94:	edd9 7a04 	vldr	s15, [r9, #16]
                sample += tCycle_tick(&FM_sines[i][0]) * tADSR4_tickNoInterp(&FM_envs[i][0]);
 801af98:	ee28 0a00 	vmul.f32	s0, s16, s0
                leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801af9c:	ecf1 6a01 	vldmia	r1!, {s13}
 801afa0:	ee3a 6ae7 	vsub.f32	s12, s21, s15
            for (int i = 0; i < numVoices; i++)
 801afa4:	7828      	ldrb	r0, [r5, #0]
                leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801afa6:	ee3a 7ae6 	vsub.f32	s14, s21, s13
            for (int i = 0; i < numVoices; i++)
 801afaa:	9a02      	ldr	r2, [sp, #8]
                rightSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (panValues[i])));
 801afac:	ee67 6aa6 	vmul.f32	s13, s15, s13
                sample += tCycle_tick(&FM_sines[i][0]) * tADSR4_tickNoInterp(&FM_envs[i][0]);
 801afb0:	eeab 0a28 	vfma.f32	s0, s22, s17
            for (int i = 0; i < numVoices; i++)
 801afb4:	4290      	cmp	r0, r2
                leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801afb6:	ee67 7a27 	vmul.f32	s15, s14, s15
                rightSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (panValues[i])));
 801afba:	eee6 6a0a 	vfma.f32	s13, s12, s20
                leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801afbe:	eee6 7a0a 	vfma.f32	s15, s12, s20
                rightSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (panValues[i])));
 801afc2:	eea6 9a80 	vfma.f32	s18, s13, s0
                leftSample += sample*((0.5f * (1.0f - displayValues[4])) + (displayValues[4] * (1.0f - panValues[i])));
 801afc6:	eee7 9a80 	vfma.f32	s19, s15, s0
            for (int i = 0; i < numVoices; i++)
 801afca:	f73f af17 	bgt.w	801adfc <SFXRhodesTick+0x94>
 801afce:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801b088 <SFXRhodesTick+0x320>
 801afd2:	46cb      	mov	fp, r9
 801afd4:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801afd8:	ee29 9a27 	vmul.f32	s18, s18, s15
            float tremoloSignal = ((tCycle_tick(&tremolo) * 0.5f) + 0.5f) * displayValues[1];
 801afdc:	482b      	ldr	r0, [pc, #172]	; (801b08c <SFXRhodesTick+0x324>)
 801afde:	f009 fd53 	bl	8024a88 <tCycle_tick>
 801afe2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801afe6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801afea:	eddb 6a01 	vldr	s13, [fp, #4]
            if (tremoloStereo)
 801afee:	f898 30f8 	ldrb.w	r3, [r8, #248]	; 0xf8
            float tremoloSignal = ((tCycle_tick(&tremolo) * 0.5f) + 0.5f) * displayValues[1];
 801aff2:	ee30 0a27 	vadd.f32	s0, s0, s15
 801aff6:	ee26 7a87 	vmul.f32	s14, s13, s14
 801affa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801affe:	ee20 7a07 	vmul.f32	s14, s0, s14
 801b002:	ee37 0a87 	vadd.f32	s0, s15, s14
            if (tremoloStereo)
 801b006:	b9cb      	cbnz	r3, 801b03c <SFXRhodesTick+0x2d4>
                rightSample *= ((tremoloSignal) + (1.0f - displayValues[1]));
 801b008:	ee29 9a00 	vmul.f32	s18, s18, s0
            leftSample *= displayValues[3]; //drive
 801b00c:	ed9b 8a03 	vldr	s16, [fp, #12]
 801b010:	ee68 9a29 	vmul.f32	s19, s16, s19
            leftSample = tanhf(leftSample);
 801b014:	ee29 0a80 	vmul.f32	s0, s19, s0
 801b018:	f00c fb84 	bl	8027724 <tanhf>
 801b01c:	eef0 8a40 	vmov.f32	s17, s0
            rightSample = tanhf(rightSample);
 801b020:	ee28 0a09 	vmul.f32	s0, s16, s18
 801b024:	f00c fb7e 	bl	8027724 <tanhf>
            input[0] = leftSample;
 801b028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b02a:	edc3 8a00 	vstr	s17, [r3]
            input[1] = rightSample;
 801b02e:	ed83 0a01 	vstr	s0, [r3, #4]
        }
 801b032:	b00b      	add	sp, #44	; 0x2c
 801b034:	ecbd 8b08 	vpop	{d8-d11}
 801b038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                rightSample *= ((1.0f-tremoloSignal) + (1.0f - displayValues[1]));
 801b03c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801b040:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801b044:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801b048:	ee27 9a09 	vmul.f32	s18, s14, s18
 801b04c:	e7de      	b.n	801b00c <SFXRhodesTick+0x2a4>
            for (int i = 0; i < numVoices; i++)
 801b04e:	ed9f 9a08 	vldr	s18, [pc, #32]	; 801b070 <SFXRhodesTick+0x308>
 801b052:	f8df 8044 	ldr.w	r8, [pc, #68]	; 801b098 <SFXRhodesTick+0x330>
 801b056:	eef0 9a49 	vmov.f32	s19, s18
 801b05a:	f8df b038 	ldr.w	fp, [pc, #56]	; 801b094 <SFXRhodesTick+0x32c>
 801b05e:	e7bd      	b.n	801afdc <SFXRhodesTick+0x274>
 801b060:	20002a70 	.word	0x20002a70
 801b064:	20017568 	.word	0x20017568
 801b068:	20000040 	.word	0x20000040
 801b06c:	2000347c 	.word	0x2000347c
 801b070:	00000000 	.word	0x00000000
 801b074:	2000285c 	.word	0x2000285c
 801b078:	200034c0 	.word	0x200034c0
 801b07c:	200034b8 	.word	0x200034b8
 801b080:	200034b0 	.word	0x200034b0
 801b084:	200034ac 	.word	0x200034ac
 801b088:	3ecccccd 	.word	0x3ecccccd
 801b08c:	200177ac 	.word	0x200177ac
 801b090:	2000298c 	.word	0x2000298c
 801b094:	200187d4 	.word	0x200187d4
 801b098:	20000548 	.word	0x20000548

0801b09c <SFXRhodesFree>:
        {
 801b09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b09e:	2400      	movs	r4, #0
 801b0a0:	4f12      	ldr	r7, [pc, #72]	; (801b0ec <SFXRhodesFree+0x50>)
 801b0a2:	4e13      	ldr	r6, [pc, #76]	; (801b0f0 <SFXRhodesFree+0x54>)
 801b0a4:	f104 0518 	add.w	r5, r4, #24
                    tCycle_free(&FM_sines[i][j]);
 801b0a8:	1938      	adds	r0, r7, r4
 801b0aa:	f009 fcdb 	bl	8024a64 <tCycle_free>
                    tADSR4_free(&FM_envs[i][j]);
 801b0ae:	1930      	adds	r0, r6, r4
 801b0b0:	3404      	adds	r4, #4
 801b0b2:	f006 fdfb 	bl	8021cac <tADSR4_free>
                for (int j = 0; j < 6; j++)
 801b0b6:	42ac      	cmp	r4, r5
 801b0b8:	d1f6      	bne.n	801b0a8 <SFXRhodesFree+0xc>
            for (int i = 0; i < NUM_VOC_VOICES; i++)
 801b0ba:	2cc0      	cmp	r4, #192	; 0xc0
 801b0bc:	d1f2      	bne.n	801b0a4 <SFXRhodesFree+0x8>
                tExpSmooth_free(&susSmoothers[i]);
 801b0be:	480d      	ldr	r0, [pc, #52]	; (801b0f4 <SFXRhodesFree+0x58>)
 801b0c0:	f007 f978 	bl	80223b4 <tExpSmooth_free>
 801b0c4:	480c      	ldr	r0, [pc, #48]	; (801b0f8 <SFXRhodesFree+0x5c>)
 801b0c6:	f007 f975 	bl	80223b4 <tExpSmooth_free>
 801b0ca:	480c      	ldr	r0, [pc, #48]	; (801b0fc <SFXRhodesFree+0x60>)
 801b0cc:	f007 f972 	bl	80223b4 <tExpSmooth_free>
 801b0d0:	480b      	ldr	r0, [pc, #44]	; (801b100 <SFXRhodesFree+0x64>)
 801b0d2:	f007 f96f 	bl	80223b4 <tExpSmooth_free>
 801b0d6:	480b      	ldr	r0, [pc, #44]	; (801b104 <SFXRhodesFree+0x68>)
 801b0d8:	f007 f96c 	bl	80223b4 <tExpSmooth_free>
 801b0dc:	480a      	ldr	r0, [pc, #40]	; (801b108 <SFXRhodesFree+0x6c>)
 801b0de:	f007 f969 	bl	80223b4 <tExpSmooth_free>
            tCycle_free(&tremolo);
 801b0e2:	480a      	ldr	r0, [pc, #40]	; (801b10c <SFXRhodesFree+0x70>)
        }
 801b0e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            tCycle_free(&tremolo);
 801b0e8:	f009 bcbc 	b.w	8024a64 <tCycle_free>
 801b0ec:	200034ac 	.word	0x200034ac
 801b0f0:	20017568 	.word	0x20017568
 801b0f4:	20002a70 	.word	0x20002a70
 801b0f8:	20002a74 	.word	0x20002a74
 801b0fc:	20002a78 	.word	0x20002a78
 801b100:	20002a7c 	.word	0x20002a7c
 801b104:	20002a80 	.word	0x20002a80
 801b108:	20002a84 	.word	0x20002a84
 801b10c:	200177ac 	.word	0x200177ac

0801b110 <calculateNoteArray>:
                float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801b110:	4b17      	ldr	r3, [pc, #92]	; (801b170 <calculateNoteArray+0x60>)
            for (int i = 0; i < 128; i++)
 801b112:	2100      	movs	r1, #0
 801b114:	4817      	ldr	r0, [pc, #92]	; (801b174 <calculateNoteArray+0x64>)
        {
 801b116:	b4f0      	push	{r4, r5, r6, r7}
 801b118:	4e17      	ldr	r6, [pc, #92]	; (801b178 <calculateNoteArray+0x68>)
                float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801b11a:	781f      	ldrb	r7, [r3, #0]
 801b11c:	4d17      	ldr	r5, [pc, #92]	; (801b17c <calculateNoteArray+0x6c>)
                float tempNote = i;
 801b11e:	ee07 1a90 	vmov	s15, r1
            for (int i = 0; i < 128; i++)
 801b122:	3101      	adds	r1, #1
                float tempNote = i;
 801b124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
            for (int i = 0; i < 128; i++)
 801b128:	2980      	cmp	r1, #128	; 0x80
                float tempPitchClass = ((((int)tempNote) - keyCenter) % 12 );
 801b12a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801b12e:	ee17 3a90 	vmov	r3, s15
 801b132:	eba3 0307 	sub.w	r3, r3, r7
 801b136:	fb85 2403 	smull	r2, r4, r5, r3
 801b13a:	ea4f 72e3 	mov.w	r2, r3, asr #31
 801b13e:	ebc2 0264 	rsb	r2, r2, r4, asr #1
 801b142:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b146:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 801b14a:	ee07 3a90 	vmov	s15, r3
 801b14e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                float tunedNote = tempNote + centsDeviation[(int)tempPitchClass];
 801b152:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b156:	ee17 3a90 	vmov	r3, s15
 801b15a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b15e:	edd3 7a00 	vldr	s15, [r3]
 801b162:	ee77 7a87 	vadd.f32	s15, s15, s14
                notes[i] = tunedNote;
 801b166:	ece0 7a01 	vstmia	r0!, {s15}
            for (int i = 0; i < 128; i++)
 801b16a:	d1d8      	bne.n	801b11e <calculateNoteArray+0xe>
            }
        }
 801b16c:	bcf0      	pop	{r4, r5, r6, r7}
 801b16e:	4770      	bx	lr
 801b170:	2000065c 	.word	0x2000065c
 801b174:	20002a88 	.word	0x20002a88
 801b178:	20000664 	.word	0x20000664
 801b17c:	2aaaaaab 	.word	0x2aaaaaab

0801b180 <nearestNoteWithHysteresis>:

        int lastNearNote = -1;


        float nearestNoteWithHysteresis(float note, float hysteresis)
        {
 801b180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            float leastDifference = fastabsf(note - notes[0]);
 801b184:	4f76      	ldr	r7, [pc, #472]	; (801b360 <nearestNoteWithHysteresis+0x1e0>)
        {
 801b186:	ed2d 8b04 	vpush	{d8-d9}
 801b18a:	eef0 8a40 	vmov.f32	s17, s0
            float leastDifference = fastabsf(note - notes[0]);
 801b18e:	ed97 0a00 	vldr	s0, [r7]
        {
 801b192:	eeb0 9a60 	vmov.f32	s18, s1
            float leastDifference = fastabsf(note - notes[0]);
 801b196:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801b19a:	f008 fcdb 	bl	8023b54 <fastabsf>
            float difference;
            int nearIndex = 0;
            int* chord;
            float output = 0.0f;

            if (autotuneChromatic > 0)
 801b19e:	4b71      	ldr	r3, [pc, #452]	; (801b364 <nearestNoteWithHysteresis+0x1e4>)
            {
                chord = chromaticArray;
 801b1a0:	4971      	ldr	r1, [pc, #452]	; (801b368 <nearestNoteWithHysteresis+0x1e8>)
            float leastDifference = fastabsf(note - notes[0]);
 801b1a2:	eeb0 8a40 	vmov.f32	s16, s0
            if (autotuneChromatic > 0)
 801b1a6:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
                chord = chromaticArray;
 801b1aa:	f103 085c 	add.w	r8, r3, #92	; 0x5c
            }
            else
            {
                chord = chordArray;
            }
            if (autotuneLock > 0)
 801b1ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            {
                chord = lockArray;
 801b1b0:	332c      	adds	r3, #44	; 0x2c
                chord = chromaticArray;
 801b1b2:	2800      	cmp	r0, #0
 801b1b4:	bf18      	it	ne
 801b1b6:	4688      	movne	r8, r1
                chord = lockArray;
 801b1b8:	2a00      	cmp	r2, #0
 801b1ba:	bf18      	it	ne
 801b1bc:	4698      	movne	r8, r3
            }
            int hasNotes = 0;
            for (int i = 0; i < 12; i++)
            {
                if (chord[i] > 0)
 801b1be:	e9d8 3200 	ldrd	r3, r2, [r8]
 801b1c2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	bfcc      	ite	gt
 801b1ca:	2301      	movgt	r3, #1
 801b1cc:	2300      	movle	r3, #0
                {
                    hasNotes = 1;
 801b1ce:	2a00      	cmp	r2, #0
                if (chord[i] > 0)
 801b1d0:	e9d8 1203 	ldrd	r1, r2, [r8, #12]
                    hasNotes = 1;
 801b1d4:	bfc8      	it	gt
 801b1d6:	2301      	movgt	r3, #1
 801b1d8:	2800      	cmp	r0, #0
                if (chord[i] > 0)
 801b1da:	f8d8 0014 	ldr.w	r0, [r8, #20]
                    hasNotes = 1;
 801b1de:	bfc8      	it	gt
 801b1e0:	2301      	movgt	r3, #1
 801b1e2:	2900      	cmp	r1, #0
                if (chord[i] > 0)
 801b1e4:	f8d8 1018 	ldr.w	r1, [r8, #24]
                    hasNotes = 1;
 801b1e8:	bfc8      	it	gt
 801b1ea:	2301      	movgt	r3, #1
 801b1ec:	2a00      	cmp	r2, #0
                if (chord[i] > 0)
 801b1ee:	f8d8 201c 	ldr.w	r2, [r8, #28]
                    hasNotes = 1;
 801b1f2:	bfc8      	it	gt
 801b1f4:	2301      	movgt	r3, #1
 801b1f6:	2800      	cmp	r0, #0
                if (chord[i] > 0)
 801b1f8:	f8d8 0020 	ldr.w	r0, [r8, #32]
                    hasNotes = 1;
 801b1fc:	bfc8      	it	gt
 801b1fe:	2301      	movgt	r3, #1
 801b200:	2900      	cmp	r1, #0
                if (chord[i] > 0)
 801b202:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
                    hasNotes = 1;
 801b206:	bfc8      	it	gt
 801b208:	2301      	movgt	r3, #1
 801b20a:	2a00      	cmp	r2, #0
                if (chord[i] > 0)
 801b20c:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
                    hasNotes = 1;
 801b210:	bfc8      	it	gt
 801b212:	2301      	movgt	r3, #1
 801b214:	2800      	cmp	r0, #0
 801b216:	bfc8      	it	gt
 801b218:	2301      	movgt	r3, #1
 801b21a:	2900      	cmp	r1, #0
 801b21c:	bfc8      	it	gt
 801b21e:	2301      	movgt	r3, #1
                if (chord[i] > 0)
 801b220:	2a00      	cmp	r2, #0
 801b222:	f340 808f 	ble.w	801b344 <nearestNoteWithHysteresis+0x1c4>
 801b226:	4d51      	ldr	r5, [pc, #324]	; (801b36c <nearestNoteWithHysteresis+0x1ec>)

            }
            if (hasNotes)
            {

                for(int i = 1; i < 128; i++)
 801b228:	2401      	movs	r4, #1
            int nearIndex = 0;
 801b22a:	2600      	movs	r6, #0
                {
                    if (chord[i%12] > 0)
 801b22c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 801b374 <nearestNoteWithHysteresis+0x1f4>
 801b230:	e003      	b.n	801b23a <nearestNoteWithHysteresis+0xba>
                for(int i = 1; i < 128; i++)
 801b232:	3401      	adds	r4, #1
 801b234:	3504      	adds	r5, #4
 801b236:	2c80      	cmp	r4, #128	; 0x80
 801b238:	d01c      	beq.n	801b274 <nearestNoteWithHysteresis+0xf4>
                    if (chord[i%12] > 0)
 801b23a:	fba9 2304 	umull	r2, r3, r9, r4
 801b23e:	08db      	lsrs	r3, r3, #3
 801b240:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b244:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 801b248:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	ddf0      	ble.n	801b232 <nearestNoteWithHysteresis+0xb2>
                    {
                        difference = fastabsf(note - notes[i]);
 801b250:	ed95 0a00 	vldr	s0, [r5]
 801b254:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801b258:	f008 fc7c 	bl	8023b54 <fastabsf>
                        if(difference < leastDifference)
 801b25c:	eeb4 0ac8 	vcmpe.f32	s0, s16
 801b260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b264:	d5e5      	bpl.n	801b232 <nearestNoteWithHysteresis+0xb2>
 801b266:	4626      	mov	r6, r4
                for(int i = 1; i < 128; i++)
 801b268:	3401      	adds	r4, #1
                        {
                            leastDifference = difference;
 801b26a:	eeb0 8a40 	vmov.f32	s16, s0
 801b26e:	3504      	adds	r5, #4
                for(int i = 1; i < 128; i++)
 801b270:	2c80      	cmp	r4, #128	; 0x80
 801b272:	d1e2      	bne.n	801b23a <nearestNoteWithHysteresis+0xba>
                            nearIndex = i;
                        }
                    }
                }

                if (lastNearNote == -1)
 801b274:	483e      	ldr	r0, [pc, #248]	; (801b370 <nearestNoteWithHysteresis+0x1f0>)
 801b276:	f8d0 1264 	ldr.w	r1, [r0, #612]	; 0x264
 801b27a:	1c4b      	adds	r3, r1, #1
 801b27c:	d058      	beq.n	801b330 <nearestNoteWithHysteresis+0x1b0>
 801b27e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
                {
                    output = notes[nearIndex];
                    lastNearNote = nearIndex;
                    return output;
                }
                if (nearIndex != lastNearNote)
 801b282:	42b1      	cmp	r1, r6
 801b284:	ed93 0a00 	vldr	s0, [r3]
 801b288:	d058      	beq.n	801b33c <nearestNoteWithHysteresis+0x1bc>
 801b28a:	460b      	mov	r3, r1
                {
                    //check if it's beyond the hysteresis

                    //find closest note in chord upward from lastNearNote
                    int upNote = 0;
 801b28c:	2400      	movs	r4, #0
                    int downNote = 128;
                    int i = lastNearNote;
                    while ((i < 128) && (upNote == 0))
                    {
                        i++;
                        if (chord[i%12] > 0)
 801b28e:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 801b378 <nearestNoteWithHysteresis+0x1f8>
 801b292:	e00f      	b.n	801b2b4 <nearestNoteWithHysteresis+0x134>
 801b294:	ebc2 0265 	rsb	r2, r2, r5, asr #1
                    while ((i < 128) && (upNote == 0))
 801b298:	b9a4      	cbnz	r4, 801b2c4 <nearestNoteWithHysteresis+0x144>
                        if (chord[i%12] > 0)
 801b29a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b29e:	eba3 0282 	sub.w	r2, r3, r2, lsl #2
 801b2a2:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801b2a6:	2a00      	cmp	r2, #0
 801b2a8:	bfcc      	ite	gt
 801b2aa:	461c      	movgt	r4, r3
 801b2ac:	2400      	movle	r4, #0
                        {
                            upNote = i;
                        }
                        if (i == 128)
                        {
                            upNote = 128;
 801b2ae:	2b80      	cmp	r3, #128	; 0x80
 801b2b0:	bf08      	it	eq
 801b2b2:	461c      	moveq	r4, r3
                    while ((i < 128) && (upNote == 0))
 801b2b4:	2b7f      	cmp	r3, #127	; 0x7f
                        i++;
 801b2b6:	f103 0301 	add.w	r3, r3, #1
                        if (chord[i%12] > 0)
 801b2ba:	fb8c 2503 	smull	r2, r5, ip, r3
 801b2be:	ea4f 72e3 	mov.w	r2, r3, asr #31
                    while ((i < 128) && (upNote == 0))
 801b2c2:	dde7      	ble.n	801b294 <nearestNoteWithHysteresis+0x114>
                    int downNote = 128;
 801b2c4:	2280      	movs	r2, #128	; 0x80
                    }
                    i = lastNearNote;
                    while ((i > 0) && (downNote == 128))
                    {
                        i--;
                        if (chord[i%12] > 0)
 801b2c6:	4d2b      	ldr	r5, [pc, #172]	; (801b374 <nearestNoteWithHysteresis+0x1f4>)
 801b2c8:	e010      	b.n	801b2ec <nearestNoteWithHysteresis+0x16c>
                    while ((i > 0) && (downNote == 128))
 801b2ca:	2a80      	cmp	r2, #128	; 0x80
                        if (chord[i%12] > 0)
 801b2cc:	ea4f 03d3 	mov.w	r3, r3, lsr #3
                    while ((i > 0) && (downNote == 128))
 801b2d0:	d112      	bne.n	801b2f8 <nearestNoteWithHysteresis+0x178>
                        if (chord[i%12] > 0)
 801b2d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b2d6:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
 801b2da:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	bfcc      	ite	gt
 801b2e2:	460a      	movgt	r2, r1
 801b2e4:	2280      	movle	r2, #128	; 0x80
                        {
                            downNote = i;
                        }
                        if (i == 0)
                        {
                            downNote = 0;
 801b2e6:	2900      	cmp	r1, #0
 801b2e8:	bf08      	it	eq
 801b2ea:	460a      	moveq	r2, r1
                    while ((i > 0) && (downNote == 128))
 801b2ec:	2900      	cmp	r1, #0
                        i--;
 801b2ee:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
                        if (chord[i%12] > 0)
 801b2f2:	fba5 c301 	umull	ip, r3, r5, r1
                    while ((i > 0) && (downNote == 128))
 801b2f6:	dce8      	bgt.n	801b2ca <nearestNoteWithHysteresis+0x14a>
                        }
                    }
                    //now should have adjacent notes in array available
                    //calculate the differences that should be necessary to move away
                    float upperNearHyst = (notes[upNote] - notes[lastNearNote]) * hysteresis;
                    float lowerNearHyst = (notes[lastNearNote] - notes[downNote]) * -hysteresis;
 801b2f8:	eb07 0282 	add.w	r2, r7, r2, lsl #2

                    float theDifference = note - notes[lastNearNote];
 801b2fc:	ee78 8ac0 	vsub.f32	s17, s17, s0
                    float lowerNearHyst = (notes[lastNearNote] - notes[downNote]) * -hysteresis;
 801b300:	edd2 7a00 	vldr	s15, [r2]
 801b304:	ee70 7a67 	vsub.f32	s15, s0, s15
                    if ((theDifference > upperNearHyst) || (theDifference < lowerNearHyst))
 801b308:	ee69 7a67 	vnmul.f32	s15, s18, s15
 801b30c:	eef4 7ae8 	vcmpe.f32	s15, s17
 801b310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b314:	dc0c      	bgt.n	801b330 <nearestNoteWithHysteresis+0x1b0>
                    float upperNearHyst = (notes[upNote] - notes[lastNearNote]) * hysteresis;
 801b316:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801b31a:	edd4 7a00 	vldr	s15, [r4]
 801b31e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b322:	ee27 9a89 	vmul.f32	s18, s15, s18
                    if ((theDifference > upperNearHyst) || (theDifference < lowerNearHyst))
 801b326:	eeb4 9a68 	vcmp.f32	s18, s17
 801b32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b32e:	d505      	bpl.n	801b33c <nearestNoteWithHysteresis+0x1bc>
                    {
                        output = notes[nearIndex];
 801b330:	eb07 0786 	add.w	r7, r7, r6, lsl #2
                        lastNearNote = nearIndex;
 801b334:	f8c0 6264 	str.w	r6, [r0, #612]	; 0x264
                        output = notes[nearIndex];
 801b338:	ed97 0a00 	vldr	s0, [r7]
            else
            {
                output = -1.0f; //signal that there are no notes to snap to
            }
            return output;
        }
 801b33c:	ecbd 8b04 	vpop	{d8-d9}
 801b340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (chord[i] > 0)
 801b344:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801b348:	2a00      	cmp	r2, #0
 801b34a:	f73f af6c 	bgt.w	801b226 <nearestNoteWithHysteresis+0xa6>
            if (hasNotes)
 801b34e:	2b00      	cmp	r3, #0
 801b350:	f47f af69 	bne.w	801b226 <nearestNoteWithHysteresis+0xa6>
                output = -1.0f; //signal that there are no notes to snap to
 801b354:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
        }
 801b358:	ecbd 8b04 	vpop	{d8-d9}
 801b35c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b360:	20002a88 	.word	0x20002a88
 801b364:	20000548 	.word	0x20000548
 801b368:	20000274 	.word	0x20000274
 801b36c:	20002a8c 	.word	0x20002a8c
 801b370:	20000040 	.word	0x20000040
 801b374:	aaaaaaab 	.word	0xaaaaaaab
 801b378:	2aaaaaab 	.word	0x2aaaaaab
 801b37c:	00000000 	.word	0x00000000

0801b380 <SFXNeartuneTick>:
        {
 801b380:	b570      	push	{r4, r5, r6, lr}
 801b382:	ed2d 8b02 	vpush	{d8}
            displayValues[0] = 0.5f + (presetKnobValues[AutotuneMono][0] * 0.49f); //fidelity
 801b386:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801b38a:	4d73      	ldr	r5, [pc, #460]	; (801b558 <SFXNeartuneTick+0x1d8>)
 801b38c:	eddf 7a73 	vldr	s15, [pc, #460]	; 801b55c <SFXNeartuneTick+0x1dc>
        {
 801b390:	b082      	sub	sp, #8
            displayValues[0] = 0.5f + (presetKnobValues[AutotuneMono][0] * 0.49f); //fidelity
 801b392:	ed95 7a4b 	vldr	s14, [r5, #300]	; 0x12c
        {
 801b396:	4606      	mov	r6, r0
            displayValues[0] = 0.5f + (presetKnobValues[AutotuneMono][0] * 0.49f); //fidelity
 801b398:	eef0 6a48 	vmov.f32	s13, s16
 801b39c:	4c70      	ldr	r4, [pc, #448]	; (801b560 <SFXNeartuneTick+0x1e0>)
            tRetune_setFidelityThreshold(&autotuneMono, displayValues[0]);
 801b39e:	4871      	ldr	r0, [pc, #452]	; (801b564 <SFXNeartuneTick+0x1e4>)
            displayValues[0] = 0.5f + (presetKnobValues[AutotuneMono][0] * 0.49f); //fidelity
 801b3a0:	eee7 6a27 	vfma.f32	s13, s14, s15
            tRetune_setFidelityThreshold(&autotuneMono, displayValues[0]);
 801b3a4:	eeb0 0a66 	vmov.f32	s0, s13
            displayValues[0] = 0.5f + (presetKnobValues[AutotuneMono][0] * 0.49f); //fidelity
 801b3a8:	edc4 6a00 	vstr	s13, [r4]
            tRetune_setFidelityThreshold(&autotuneMono, displayValues[0]);
 801b3ac:	f005 ff14 	bl	80211d8 <tRetune_setFidelityThreshold>
            displayValues[1] = LEAF_clip(0.0f, presetKnobValues[AutotuneMono][1] * 1.1f, 1.0f); // amount of forcing to new pitch
 801b3b0:	eddf 7a6d 	vldr	s15, [pc, #436]	; 801b568 <SFXNeartuneTick+0x1e8>
 801b3b4:	edd5 0a4c 	vldr	s1, [r5, #304]	; 0x130
 801b3b8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801b3bc:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 801b56c <SFXNeartuneTick+0x1ec>
 801b3c0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801b3c4:	f008 fca0 	bl	8023d08 <LEAF_clip>
            displayValues[3] = presetKnobValues[AutotuneMono][3] * 12.0f;
 801b3c8:	eef2 5a08 	vmov.f32	s11, #40	; 0x41400000  12.0
 801b3cc:	edd5 7a4e 	vldr	s15, [r5, #312]	; 0x138
            displayValues[4] = (presetKnobValues[AutotuneMono][4] * 0.5f) + 0.5f;
 801b3d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
            displayValues[2] = presetKnobValues[AutotuneMono][2]; //speed to get to desired pitch shift
 801b3d4:	edd5 6a4d 	vldr	s13, [r5, #308]	; 0x134
            displayValues[3] = presetKnobValues[AutotuneMono][3] * 12.0f;
 801b3d8:	ee67 7aa5 	vmul.f32	s15, s15, s11
            displayValues[4] = (presetKnobValues[AutotuneMono][4] * 0.5f) + 0.5f;
 801b3dc:	ed95 7a4f 	vldr	s14, [r5, #316]	; 0x13c
            if (displayValues[2] > .90f)
 801b3e0:	eddf 5a63 	vldr	s11, [pc, #396]	; 801b570 <SFXNeartuneTick+0x1f0>
            displayValues[4] = (presetKnobValues[AutotuneMono][4] * 0.5f) + 0.5f;
 801b3e4:	ee37 7a06 	vadd.f32	s14, s14, s12
            displayValues[1] = LEAF_clip(0.0f, presetKnobValues[AutotuneMono][1] * 1.1f, 1.0f); // amount of forcing to new pitch
 801b3e8:	ed84 0a01 	vstr	s0, [r4, #4]
            if (displayValues[2] > .90f)
 801b3ec:	eef4 6ae5 	vcmpe.f32	s13, s11
            displayValues[2] = presetKnobValues[AutotuneMono][2]; //speed to get to desired pitch shift
 801b3f0:	edc4 6a02 	vstr	s13, [r4, #8]
            displayValues[3] = presetKnobValues[AutotuneMono][3] * 12.0f;
 801b3f4:	edc4 7a03 	vstr	s15, [r4, #12]
            displayValues[4] = (presetKnobValues[AutotuneMono][4] * 0.5f) + 0.5f;
 801b3f8:	ee27 7a08 	vmul.f32	s14, s14, s16
            if (displayValues[2] > .90f)
 801b3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            displayValues[4] = (presetKnobValues[AutotuneMono][4] * 0.5f) + 0.5f;
 801b400:	ed84 7a04 	vstr	s14, [r4, #16]
            if (displayValues[2] > .90f)
 801b404:	dc7e      	bgt.n	801b504 <SFXNeartuneTick+0x184>
 801b406:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801b40a:	ee67 7aa6 	vmul.f32	s15, s15, s13
            tExpSmooth_setFactor(&neartune_smoother, expBuffer[(int)(displayValues[2] * displayValues[2] * displayValues[2] * expBufferSizeMinusOne)]);
 801b40e:	4d59      	ldr	r5, [pc, #356]	; (801b574 <SFXNeartuneTick+0x1f4>)
 801b410:	4b59      	ldr	r3, [pc, #356]	; (801b578 <SFXNeartuneTick+0x1f8>)
 801b412:	ed95 7a40 	vldr	s14, [r5, #256]	; 0x100
 801b416:	4859      	ldr	r0, [pc, #356]	; (801b57c <SFXNeartuneTick+0x1fc>)
 801b418:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b41c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b420:	ee17 2a90 	vmov	r2, s15
 801b424:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801b428:	ed93 0a00 	vldr	s0, [r3]
 801b42c:	f006 ffc6 	bl	80223bc <tExpSmooth_setFactor>
            float destFactor = tExpSmooth_tick(&neartune_smoother);
 801b430:	4852      	ldr	r0, [pc, #328]	; (801b57c <SFXNeartuneTick+0x1fc>)
 801b432:	f006 ffdf 	bl	80223f4 <tExpSmooth_tick>
            float detectedPeriod = tRetune_getInputPeriod(&autotuneMono);
 801b436:	484b      	ldr	r0, [pc, #300]	; (801b564 <SFXNeartuneTick+0x1e4>)
            float destFactor = tExpSmooth_tick(&neartune_smoother);
 801b438:	eef0 8a40 	vmov.f32	s17, s0
            float detectedPeriod = tRetune_getInputPeriod(&autotuneMono);
 801b43c:	f005 fed0 	bl	80211e0 <tRetune_getInputPeriod>
            if (detectedPeriod > 0.0f)
 801b440:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b448:	dd36      	ble.n	801b4b8 <SFXNeartuneTick+0x138>
                detectedNote = LEAF_frequencyToMidi(1.0f / detectedPeriod);
 801b44a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801b44e:	ee88 0a00 	vdiv.f32	s0, s16, s0
 801b452:	f008 fbeb 	bl	8023c2c <LEAF_frequencyToMidi>
                desiredSnap = nearestNoteWithHysteresis(detectedNote, displayValues[4]);
 801b456:	edd4 0a04 	vldr	s1, [r4, #16]
                detectedNote = LEAF_frequencyToMidi(1.0f / detectedPeriod);
 801b45a:	ed85 0a9a 	vstr	s0, [r5, #616]	; 0x268
                desiredSnap = nearestNoteWithHysteresis(detectedNote, displayValues[4]);
 801b45e:	f7ff fe8f 	bl	801b180 <nearestNoteWithHysteresis>
 801b462:	ed85 0a9b 	vstr	s0, [r5, #620]	; 0x26c
                if (desiredSnap > 0.0f)
 801b466:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b46e:	dd66      	ble.n	801b53e <SFXNeartuneTick+0x1be>
                    destinationNote = (desiredSnap * displayValues[1]) + (detectedNote * (1.0f - displayValues[1]));
 801b470:	edd4 6a01 	vldr	s13, [r4, #4]
 801b474:	edd5 7a9a 	vldr	s15, [r5, #616]	; 0x268
 801b478:	ee38 8a66 	vsub.f32	s16, s16, s13
                    factorDiff = (fabsf(destinationNote-lastSnap));
 801b47c:	ed95 7a3a 	vldr	s14, [r5, #232]	; 0xe8
 801b480:	4b3f      	ldr	r3, [pc, #252]	; (801b580 <SFXNeartuneTick+0x200>)
                    destinationNote = (desiredSnap * displayValues[1]) + (detectedNote * (1.0f - displayValues[1]));
 801b482:	ee28 8a27 	vmul.f32	s16, s16, s15
                    if ((changeAmount < 11.9))
 801b486:	ed9f 5b32 	vldr	d5, [pc, #200]	; 801b550 <SFXNeartuneTick+0x1d0>
                    destinationNote = (desiredSnap * displayValues[1]) + (detectedNote * (1.0f - displayValues[1]));
 801b48a:	eea0 8a26 	vfma.f32	s16, s0, s13
                    changeAmount = (fabsf(destinationNote-detectedNote));
 801b48e:	ee78 7a67 	vsub.f32	s15, s16, s15
                    destinationNote = (desiredSnap * displayValues[1]) + (detectedNote * (1.0f - displayValues[1]));
 801b492:	ed85 8a9c 	vstr	s16, [r5, #624]	; 0x270
                    factorDiff = (fabsf(destinationNote-lastSnap));
 801b496:	ee38 7a47 	vsub.f32	s14, s16, s14
                    changeAmount = (fabsf(destinationNote-detectedNote));
 801b49a:	eef0 7ae7 	vabs.f32	s15, s15
                    factorDiff = (fabsf(destinationNote-lastSnap));
 801b49e:	eeb0 7ac7 	vabs.f32	s14, s14
                    if ((changeAmount < 11.9))
 801b4a2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
                    changeAmount = (fabsf(destinationNote-detectedNote));
 801b4a6:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
                    factorDiff = (fabsf(destinationNote-lastSnap));
 801b4aa:	ed83 7a41 	vstr	s14, [r3, #260]	; 0x104
                    if ((changeAmount < 11.9))
 801b4ae:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801b4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4b6:	d42a      	bmi.n	801b50e <SFXNeartuneTick+0x18e>
            tRetune_setPitchFactor(&autotuneMono, destFactor, 0);
 801b4b8:	2100      	movs	r1, #0
 801b4ba:	eeb0 0a68 	vmov.f32	s0, s17
 801b4be:	4829      	ldr	r0, [pc, #164]	; (801b564 <SFXNeartuneTick+0x1e4>)
 801b4c0:	f005 fe78 	bl	80211b4 <tRetune_setPitchFactor>
            float* samples = tRetune_tick(&autotuneMono, input[1]);
 801b4c4:	ed96 0a01 	vldr	s0, [r6, #4]
 801b4c8:	4826      	ldr	r0, [pc, #152]	; (801b564 <SFXNeartuneTick+0x1e4>)
 801b4ca:	f005 fd9f 	bl	802100c <tRetune_tick>
 801b4ce:	4604      	mov	r4, r0
            LEAF_crossfade(tRamp_tick(&nearWetRamp), fades);
 801b4d0:	482c      	ldr	r0, [pc, #176]	; (801b584 <SFXNeartuneTick+0x204>)
 801b4d2:	f006 fef3 	bl	80222bc <tRamp_tick>
 801b4d6:	4668      	mov	r0, sp
 801b4d8:	f008 fb92 	bl	8023c00 <LEAF_crossfade>
            sample += input[1] * fades[1]; // crossfade to dry signal if no notes held down.
 801b4dc:	edd6 7a01 	vldr	s15, [r6, #4]
 801b4e0:	ed9d 7a01 	vldr	s14, [sp, #4]
 801b4e4:	edd4 6a00 	vldr	s13, [r4]
 801b4e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b4ec:	ed9d 7a00 	vldr	s14, [sp]
 801b4f0:	eee6 7a87 	vfma.f32	s15, s13, s14
            input[0] = sample;
 801b4f4:	edc6 7a00 	vstr	s15, [r6]
            input[1] = sample;
 801b4f8:	edc6 7a01 	vstr	s15, [r6, #4]
        }
 801b4fc:	b002      	add	sp, #8
 801b4fe:	ecbd 8b02 	vpop	{d8}
 801b502:	bd70      	pop	{r4, r5, r6, pc}
                displayValues[2] = 1.0f;
 801b504:	eef0 7a46 	vmov.f32	s15, s12
 801b508:	ed84 6a02 	vstr	s12, [r4, #8]
 801b50c:	e77f      	b.n	801b40e <SFXNeartuneTick+0x8e>
                        destinationFactor = (LEAF_midiToFrequency(destinationNote) / LEAF_midiToFrequency(detectedNote));
 801b50e:	eeb0 0a48 	vmov.f32	s0, s16
 801b512:	f008 fce3 	bl	8023edc <LEAF_midiToFrequency>
 801b516:	eeb0 8a40 	vmov.f32	s16, s0
 801b51a:	ed95 0a9a 	vldr	s0, [r5, #616]	; 0x268
 801b51e:	f008 fcdd 	bl	8023edc <LEAF_midiToFrequency>
                        tExpSmooth_setDest(&neartune_smoother, destinationFactor);
 801b522:	4816      	ldr	r0, [pc, #88]	; (801b57c <SFXNeartuneTick+0x1fc>)
                        destinationFactor = (LEAF_midiToFrequency(destinationNote) / LEAF_midiToFrequency(detectedNote));
 801b524:	eec8 7a00 	vdiv.f32	s15, s16, s0
                        tExpSmooth_setDest(&neartune_smoother, destinationFactor);
 801b528:	eeb0 0a67 	vmov.f32	s0, s15
                        destinationFactor = (LEAF_midiToFrequency(destinationNote) / LEAF_midiToFrequency(detectedNote));
 801b52c:	edc5 7a9d 	vstr	s15, [r5, #628]	; 0x274
                        tExpSmooth_setDest(&neartune_smoother, destinationFactor);
 801b530:	f006 ff56 	bl	80223e0 <tExpSmooth_setDest>
                        lastSnap = destinationNote;
 801b534:	f8d5 3270 	ldr.w	r3, [r5, #624]	; 0x270
 801b538:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
 801b53c:	e7bc      	b.n	801b4b8 <SFXNeartuneTick+0x138>
                    tExpSmooth_setDest(&neartune_smoother, 1.0f);
 801b53e:	eeb0 0a48 	vmov.f32	s0, s16
 801b542:	480e      	ldr	r0, [pc, #56]	; (801b57c <SFXNeartuneTick+0x1fc>)
 801b544:	f006 ff4c 	bl	80223e0 <tExpSmooth_setDest>
 801b548:	e7b6      	b.n	801b4b8 <SFXNeartuneTick+0x138>
 801b54a:	bf00      	nop
 801b54c:	f3af 8000 	nop.w
 801b550:	cccccccd 	.word	0xcccccccd
 801b554:	4027cccc 	.word	0x4027cccc
 801b558:	20002d50 	.word	0x20002d50
 801b55c:	3efae148 	.word	0x3efae148
 801b560:	200187d4 	.word	0x200187d4
 801b564:	20017558 	.word	0x20017558
 801b568:	3f8ccccd 	.word	0x3f8ccccd
 801b56c:	00000000 	.word	0x00000000
 801b570:	3f666666 	.word	0x3f666666
 801b574:	20000040 	.word	0x20000040
 801b578:	20017084 	.word	0x20017084
 801b57c:	20017628 	.word	0x20017628
 801b580:	20000548 	.word	0x20000548
 801b584:	200183a4 	.word	0x200183a4

0801b588 <noteOff>:
            }
        }

        void noteOff(int key, int velocity)
        {
            if (chordArray[key%12] > 0) chordArray[key%12]--;
 801b588:	494d      	ldr	r1, [pc, #308]	; (801b6c0 <noteOff+0x138>)
 801b58a:	4a4e      	ldr	r2, [pc, #312]	; (801b6c4 <noteOff+0x13c>)
 801b58c:	fb81 3100 	smull	r3, r1, r1, r0
 801b590:	17c3      	asrs	r3, r0, #31
 801b592:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 801b596:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b59a:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
 801b59e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
        {
 801b5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            if (chordArray[key%12] > 0) chordArray[key%12]--;
 801b5a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
        {
 801b5a8:	4604      	mov	r4, r0
            if (chordArray[key%12] > 0) chordArray[key%12]--;
 801b5aa:	2a00      	cmp	r2, #0
 801b5ac:	dd01      	ble.n	801b5b2 <noteOff+0x2a>
 801b5ae:	3a01      	subs	r2, #1
 801b5b0:	65da      	str	r2, [r3, #92]	; 0x5c



            if (currentPreset == Rhodes)
 801b5b2:	4b45      	ldr	r3, [pc, #276]	; (801b6c8 <noteOff+0x140>)
 801b5b4:	781b      	ldrb	r3, [r3, #0]
 801b5b6:	2b11      	cmp	r3, #17
 801b5b8:	d03b      	beq.n	801b632 <noteOff+0xaa>
                        tADSR4_off(&FM_envs[voice][j]);
                    }
                }

            }
            else if (currentPreset == ClassicSynth)
 801b5ba:	2b10      	cmp	r3, #16
 801b5bc:	d056      	beq.n	801b66c <noteOff+0xe4>
                    tADSR4_off(&polyEnvs[voice]);
                    tADSR4_off(&polyFiltEnvs[voice]);
                }
            }

            else if (currentPreset == SamplerKeyboard)
 801b5be:	2b06      	cmp	r3, #6
 801b5c0:	d00c      	beq.n	801b5dc <noteOff+0x54>
                    UISamplerKButtons(ButtonC, ActionHoldContinuous);
                    tSampler_stop(&keySampler[key-LOWEST_SAMPLER_KEY]);
                    waitingForDeactivation[voice] = key;
                }
            }
            else if (currentPreset == LivingStringSynth)
 801b5c2:	2b0f      	cmp	r3, #15
 801b5c4:	b2e1      	uxtb	r1, r4
            {
                int voice;

                voice = tSimplePoly_noteOff(&poly, key); //if we're monophonic, we need to allow fast voice stealing and returning to previous stolen notes without regard for the release envelopes
 801b5c6:	4841      	ldr	r0, [pc, #260]	; (801b6cc <noteOff+0x144>)
            else if (currentPreset == LivingStringSynth)
 801b5c8:	d065      	beq.n	801b696 <noteOff+0x10e>
                    tADSR4_off(&pluckEnvs[voice]);
                }
            }
            else
            {
                tSimplePoly_noteOff(&poly, key);
 801b5ca:	f009 f8ad 	bl	8024728 <tSimplePoly_noteOff>
            }

            if (tSimplePoly_getNumActiveVoices(&poly) < 1)
 801b5ce:	483f      	ldr	r0, [pc, #252]	; (801b6cc <noteOff+0x144>)
 801b5d0:	f009 fa06 	bl	80249e0 <tSimplePoly_getNumActiveVoices>
 801b5d4:	2800      	cmp	r0, #0
 801b5d6:	dd27      	ble.n	801b628 <noteOff+0xa0>
            {
                setLED_2(0);
            }

        }
 801b5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (key >= LOWEST_SAMPLER_KEY && key < LOWEST_SAMPLER_KEY + NUM_SAMPLER_KEYS)
 801b5dc:	f1a4 0524 	sub.w	r5, r4, #36	; 0x24
 801b5e0:	2d30      	cmp	r5, #48	; 0x30
 801b5e2:	d8f4      	bhi.n	801b5ce <noteOff+0x46>
 801b5e4:	00af      	lsls	r7, r5, #2
                    if (tBuffer_isActive(&keyBuff[key-LOWEST_SAMPLER_KEY]) == 1)
 801b5e6:	4e3a      	ldr	r6, [pc, #232]	; (801b6d0 <noteOff+0x148>)
                    voice = tSimplePoly_markPendingNoteOff(&poly, key); //if we're polyphonic, we need to let release envelopes happen and not mark voices free when they are not
 801b5e8:	b2e1      	uxtb	r1, r4
 801b5ea:	4838      	ldr	r0, [pc, #224]	; (801b6cc <noteOff+0x144>)
                    if (tBuffer_isActive(&keyBuff[key-LOWEST_SAMPLER_KEY]) == 1)
 801b5ec:	443e      	add	r6, r7
                    voice = tSimplePoly_markPendingNoteOff(&poly, key); //if we're polyphonic, we need to let release envelopes happen and not mark voices free when they are not
 801b5ee:	f009 f97f 	bl	80248f0 <tSimplePoly_markPendingNoteOff>
 801b5f2:	4680      	mov	r8, r0
                    if (tBuffer_isActive(&keyBuff[key-LOWEST_SAMPLER_KEY]) == 1)
 801b5f4:	4630      	mov	r0, r6
 801b5f6:	f00a fe09 	bl	802620c <tBuffer_isActive>
 801b5fa:	2801      	cmp	r0, #1
 801b5fc:	d058      	beq.n	801b6b0 <noteOff+0x128>
                        tExpSmooth_setDest(&kSamplerGains[key-LOWEST_SAMPLER_KEY], 0.0f);
 801b5fe:	4835      	ldr	r0, [pc, #212]	; (801b6d4 <noteOff+0x14c>)
 801b600:	ed9f 0a35 	vldr	s0, [pc, #212]	; 801b6d8 <noteOff+0x150>
 801b604:	4438      	add	r0, r7
 801b606:	f006 feeb 	bl	80223e0 <tExpSmooth_setDest>
                    samplerKeyHeld[key-LOWEST_SAMPLER_KEY] = 0;
 801b60a:	4b34      	ldr	r3, [pc, #208]	; (801b6dc <noteOff+0x154>)
 801b60c:	2200      	movs	r2, #0
                    UISamplerKButtons(ButtonC, ActionHoldContinuous);
 801b60e:	2103      	movs	r1, #3
 801b610:	2007      	movs	r0, #7
                    samplerKeyHeld[key-LOWEST_SAMPLER_KEY] = 0;
 801b612:	555a      	strb	r2, [r3, r5]
                    UISamplerKButtons(ButtonC, ActionHoldContinuous);
 801b614:	f002 f844 	bl	801d6a0 <UISamplerKButtons>
                    tSampler_stop(&keySampler[key-LOWEST_SAMPLER_KEY]);
 801b618:	4831      	ldr	r0, [pc, #196]	; (801b6e0 <noteOff+0x158>)
 801b61a:	4438      	add	r0, r7
 801b61c:	f00a ff0c 	bl	8026438 <tSampler_stop>
                    waitingForDeactivation[voice] = key;
 801b620:	4b30      	ldr	r3, [pc, #192]	; (801b6e4 <noteOff+0x15c>)
 801b622:	f843 4028 	str.w	r4, [r3, r8, lsl #2]
 801b626:	e7d2      	b.n	801b5ce <noteOff+0x46>
                setLED_2(0);
 801b628:	2000      	movs	r0, #0
        }
 801b62a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                setLED_2(0);
 801b62e:	f7f8 b9b7 	b.w	80139a0 <setLED_2>
                if (tSimplePoly_getNumVoices(&poly) > 1)
 801b632:	4826      	ldr	r0, [pc, #152]	; (801b6cc <noteOff+0x144>)
 801b634:	f009 f9d0 	bl	80249d8 <tSimplePoly_getNumVoices>
 801b638:	2801      	cmp	r0, #1
 801b63a:	b2e1      	uxtb	r1, r4
                    voice = tSimplePoly_markPendingNoteOff(&poly, key); //if we're polyphonic, we need to let release envelopes happen and not mark voices free when they are not
 801b63c:	4823      	ldr	r0, [pc, #140]	; (801b6cc <noteOff+0x144>)
                if (tSimplePoly_getNumVoices(&poly) > 1)
 801b63e:	dd12      	ble.n	801b666 <noteOff+0xde>
                    voice = tSimplePoly_markPendingNoteOff(&poly, key); //if we're polyphonic, we need to let release envelopes happen and not mark voices free when they are not
 801b640:	f009 f956 	bl	80248f0 <tSimplePoly_markPendingNoteOff>
                if (voice >= 0)
 801b644:	2800      	cmp	r0, #0
 801b646:	dbc2      	blt.n	801b5ce <noteOff+0x46>
 801b648:	4c27      	ldr	r4, [pc, #156]	; (801b6e8 <noteOff+0x160>)
 801b64a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b64e:	f104 0518 	add.w	r5, r4, #24
 801b652:	00c0      	lsls	r0, r0, #3
 801b654:	4404      	add	r4, r0
 801b656:	4405      	add	r5, r0
                        tADSR4_off(&FM_envs[voice][j]);
 801b658:	4620      	mov	r0, r4
 801b65a:	3404      	adds	r4, #4
 801b65c:	f006 fb80 	bl	8021d60 <tADSR4_off>
                    for (int j = 0; j < 6; j++)
 801b660:	42a5      	cmp	r5, r4
 801b662:	d1f9      	bne.n	801b658 <noteOff+0xd0>
 801b664:	e7b3      	b.n	801b5ce <noteOff+0x46>
                    voice = tSimplePoly_noteOff(&poly, key); //if we're monophonic, we need to allow fast voice stealing and returning to previous stolen notes without regard for the release envelopes
 801b666:	f009 f85f 	bl	8024728 <tSimplePoly_noteOff>
 801b66a:	e7eb      	b.n	801b644 <noteOff+0xbc>
                if (tSimplePoly_getNumVoices(&poly) > 1)
 801b66c:	4817      	ldr	r0, [pc, #92]	; (801b6cc <noteOff+0x144>)
 801b66e:	f009 f9b3 	bl	80249d8 <tSimplePoly_getNumVoices>
 801b672:	2801      	cmp	r0, #1
 801b674:	b2e1      	uxtb	r1, r4
                    voice = tSimplePoly_markPendingNoteOff(&poly, key); //if we're polyphonic, we need to let release envelopes happen and not mark voices free when they are not
 801b676:	4815      	ldr	r0, [pc, #84]	; (801b6cc <noteOff+0x144>)
                if (tSimplePoly_getNumVoices(&poly) > 1)
 801b678:	dd17      	ble.n	801b6aa <noteOff+0x122>
                    voice = tSimplePoly_markPendingNoteOff(&poly, key); //if we're polyphonic, we need to let release envelopes happen and not mark voices free when they are not
 801b67a:	f009 f939 	bl	80248f0 <tSimplePoly_markPendingNoteOff>
                if (voice >= 0)
 801b67e:	2800      	cmp	r0, #0
 801b680:	dba5      	blt.n	801b5ce <noteOff+0x46>
 801b682:	0084      	lsls	r4, r0, #2
                    tADSR4_off(&polyEnvs[voice]);
 801b684:	4819      	ldr	r0, [pc, #100]	; (801b6ec <noteOff+0x164>)
 801b686:	4420      	add	r0, r4
 801b688:	f006 fb6a 	bl	8021d60 <tADSR4_off>
                    tADSR4_off(&polyFiltEnvs[voice]);
 801b68c:	4818      	ldr	r0, [pc, #96]	; (801b6f0 <noteOff+0x168>)
 801b68e:	4420      	add	r0, r4
 801b690:	f006 fb66 	bl	8021d60 <tADSR4_off>
 801b694:	e79b      	b.n	801b5ce <noteOff+0x46>
                voice = tSimplePoly_noteOff(&poly, key); //if we're monophonic, we need to allow fast voice stealing and returning to previous stolen notes without regard for the release envelopes
 801b696:	f009 f847 	bl	8024728 <tSimplePoly_noteOff>
                if (voice >= 0)
 801b69a:	2800      	cmp	r0, #0
 801b69c:	db97      	blt.n	801b5ce <noteOff+0x46>
                    tADSR4_off(&pluckEnvs[voice]);
 801b69e:	4b15      	ldr	r3, [pc, #84]	; (801b6f4 <noteOff+0x16c>)
 801b6a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b6a4:	f006 fb5c 	bl	8021d60 <tADSR4_off>
 801b6a8:	e791      	b.n	801b5ce <noteOff+0x46>
                    voice = tSimplePoly_noteOff(&poly, key); //if we're monophonic, we need to allow fast voice stealing and returning to previous stolen notes without regard for the release envelopes
 801b6aa:	f009 f83d 	bl	8024728 <tSimplePoly_noteOff>
 801b6ae:	e7e6      	b.n	801b67e <noteOff+0xf6>
                        tBuffer_stop(&keyBuff[key-LOWEST_SAMPLER_KEY]);
 801b6b0:	4630      	mov	r0, r6
 801b6b2:	f00a fd93 	bl	80261dc <tBuffer_stop>
                        UISamplerKButtons(ButtonUp, ActionPress);
 801b6b6:	2100      	movs	r1, #0
 801b6b8:	2004      	movs	r0, #4
 801b6ba:	f001 fff1 	bl	801d6a0 <UISamplerKButtons>
 801b6be:	e7a4      	b.n	801b60a <noteOff+0x82>
 801b6c0:	2aaaaaab 	.word	0x2aaaaaab
 801b6c4:	20000548 	.word	0x20000548
 801b6c8:	20000694 	.word	0x20000694
 801b6cc:	20017560 	.word	0x20017560
 801b6d0:	200181a4 	.word	0x200181a4
 801b6d4:	200026cc 	.word	0x200026cc
 801b6d8:	00000000 	.word	0x00000000
 801b6dc:	20017778 	.word	0x20017778
 801b6e0:	2000356c 	.word	0x2000356c
 801b6e4:	20017654 	.word	0x20017654
 801b6e8:	20017568 	.word	0x20017568
 801b6ec:	200176dc 	.word	0x200176dc
 801b6f0:	20001f88 	.word	0x20001f88
 801b6f4:	20017448 	.word	0x20017448

0801b6f8 <noteOn>:
            if (!velocity)
 801b6f8:	2900      	cmp	r1, #0
 801b6fa:	d037      	beq.n	801b76c <noteOn+0x74>
                chordArray[key%12]++;
 801b6fc:	4a75      	ldr	r2, [pc, #468]	; (801b8d4 <noteOn+0x1dc>)
        {
 801b6fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b700:	4604      	mov	r4, r0
 801b702:	460d      	mov	r5, r1
                chordArray[key%12]++;
 801b704:	17c3      	asrs	r3, r0, #31
 801b706:	4874      	ldr	r0, [pc, #464]	; (801b8d8 <noteOn+0x1e0>)
 801b708:	fb82 1204 	smull	r1, r2, r2, r4
                if (currentPreset == AutotuneMono)
 801b70c:	4973      	ldr	r1, [pc, #460]	; (801b8dc <noteOn+0x1e4>)
                chordArray[key%12]++;
 801b70e:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 801b712:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b716:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 801b71a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        {
 801b71e:	ed2d 8b02 	vpush	{d8}
                chordArray[key%12]++;
 801b722:	6dda      	ldr	r2, [r3, #92]	; 0x5c
                if (currentPreset == AutotuneMono)
 801b724:	7809      	ldrb	r1, [r1, #0]
                chordArray[key%12]++;
 801b726:	3201      	adds	r2, #1
                if (currentPreset == AutotuneMono)
 801b728:	2903      	cmp	r1, #3
                chordArray[key%12]++;
 801b72a:	65da      	str	r2, [r3, #92]	; 0x5c
                if (currentPreset == AutotuneMono)
 801b72c:	d010      	beq.n	801b750 <noteOn+0x58>
                if (currentPreset == Rhodes)
 801b72e:	2911      	cmp	r1, #17
 801b730:	d036      	beq.n	801b7a0 <noteOn+0xa8>
                else if (currentPreset == ClassicSynth)
 801b732:	2910      	cmp	r1, #16
 801b734:	d05b      	beq.n	801b7ee <noteOn+0xf6>
                else if (currentPreset == SamplerKeyboard)
 801b736:	2906      	cmp	r1, #6
 801b738:	d11f      	bne.n	801b77a <noteOn+0x82>
                    if ((key >= LOWEST_SAMPLER_KEY) && key < (LOWEST_SAMPLER_KEY + NUM_SAMPLER_KEYS))
 801b73a:	f1a4 0624 	sub.w	r6, r4, #36	; 0x24
 801b73e:	2e30      	cmp	r6, #48	; 0x30
 801b740:	d96e      	bls.n	801b820 <noteOn+0x128>
                setLED_2(1);
 801b742:	2001      	movs	r0, #1
        }
 801b744:	ecbd 8b02 	vpop	{d8}
 801b748:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                setLED_2(1);
 801b74c:	f7f8 b928 	b.w	80139a0 <setLED_2>
                    if (autotuneLock)
 801b750:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801b752:	b96a      	cbnz	r2, 801b770 <noteOn+0x78>
 801b754:	b2ea      	uxtb	r2, r5
                    tSimplePoly_noteOn(&poly, key, velocity);
 801b756:	4621      	mov	r1, r4
 801b758:	4861      	ldr	r0, [pc, #388]	; (801b8e0 <noteOn+0x1e8>)
 801b75a:	f008 feb9 	bl	80244d0 <tSimplePoly_noteOn>
                setLED_2(1);
 801b75e:	2001      	movs	r0, #1
        }
 801b760:	ecbd 8b02 	vpop	{d8}
 801b764:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                setLED_2(1);
 801b768:	f7f8 b91a 	b.w	80139a0 <setLED_2>
                noteOff(key, velocity);
 801b76c:	f7ff bf0c 	b.w	801b588 <noteOff>
                        lockArray[key%12]++;
 801b770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801b772:	b2ea      	uxtb	r2, r5
 801b774:	3101      	adds	r1, #1
 801b776:	62d9      	str	r1, [r3, #44]	; 0x2c
 801b778:	e7ed      	b.n	801b756 <noteOn+0x5e>
                else if (currentPreset == LivingStringSynth)
 801b77a:	290f      	cmp	r1, #15
 801b77c:	b2ea      	uxtb	r2, r5
 801b77e:	d1ea      	bne.n	801b756 <noteOn+0x5e>
                    int whichVoice = tSimplePoly_noteOn(&poly, key, velocity);
 801b780:	4621      	mov	r1, r4
 801b782:	4857      	ldr	r0, [pc, #348]	; (801b8e0 <noteOn+0x1e8>)
 801b784:	f008 fea4 	bl	80244d0 <tSimplePoly_noteOn>
                    if (whichVoice >= 0)
 801b788:	2800      	cmp	r0, #0
 801b78a:	dbda      	blt.n	801b742 <noteOn+0x4a>
                        tADSR4_on(&pluckEnvs[whichVoice], velocity * 0.0078125f);
 801b78c:	4b55      	ldr	r3, [pc, #340]	; (801b8e4 <noteOn+0x1ec>)
 801b78e:	ee00 5a10 	vmov	s0, r5
 801b792:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b796:	eeba 0aec 	vcvt.f32.s32	s0, s0, #7
 801b79a:	f006 facf 	bl	8021d3c <tADSR4_on>
 801b79e:	e7d0      	b.n	801b742 <noteOn+0x4a>
                    int whichVoice = tSimplePoly_noteOn(&poly, key, velocity);
 801b7a0:	b2ea      	uxtb	r2, r5
 801b7a2:	4621      	mov	r1, r4
 801b7a4:	484e      	ldr	r0, [pc, #312]	; (801b8e0 <noteOn+0x1e8>)
 801b7a6:	f008 fe93 	bl	80244d0 <tSimplePoly_noteOn>
                    if (whichVoice >= 0)
 801b7aa:	1e07      	subs	r7, r0, #0
 801b7ac:	dbc9      	blt.n	801b742 <noteOn+0x4a>
 801b7ae:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b7b2:	4b4d      	ldr	r3, [pc, #308]	; (801b8e8 <noteOn+0x1f0>)
                            tADSR4_on(&FM_envs[whichVoice][j], velocity * 0.0078125f);
 801b7b4:	ee08 5a10 	vmov	s16, r5
 801b7b8:	00f2      	lsls	r2, r6, #3
 801b7ba:	f103 0618 	add.w	r6, r3, #24
 801b7be:	eeba 8aec 	vcvt.f32.s32	s16, s16, #7
 801b7c2:	18d5      	adds	r5, r2, r3
 801b7c4:	4416      	add	r6, r2
 801b7c6:	4628      	mov	r0, r5
 801b7c8:	3504      	adds	r5, #4
 801b7ca:	eeb0 0a48 	vmov.f32	s0, s16
 801b7ce:	f006 fab5 	bl	8021d3c <tADSR4_on>
                        for (int j = 0; j < 6; j++)
 801b7d2:	42ae      	cmp	r6, r5
 801b7d4:	d1f7      	bne.n	801b7c6 <noteOn+0xce>
                        panValues[whichVoice] = key * 0.0078125; // divide by 128.0f
 801b7d6:	ee07 4a10 	vmov	s14, r4
 801b7da:	eeba 7bec 	vcvt.f64.s32	d7, d7, #7
 801b7de:	4b43      	ldr	r3, [pc, #268]	; (801b8ec <noteOn+0x1f4>)
 801b7e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b7e4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 801b7e8:	ed87 7a00 	vstr	s14, [r7]
 801b7ec:	e7a9      	b.n	801b742 <noteOn+0x4a>
                    int whichVoice = tSimplePoly_noteOn(&poly, key, velocity);
 801b7ee:	4621      	mov	r1, r4
 801b7f0:	b2ea      	uxtb	r2, r5
 801b7f2:	483b      	ldr	r0, [pc, #236]	; (801b8e0 <noteOn+0x1e8>)
 801b7f4:	f008 fe6c 	bl	80244d0 <tSimplePoly_noteOn>
                    if (whichVoice >= 0)
 801b7f8:	2800      	cmp	r0, #0
 801b7fa:	dba2      	blt.n	801b742 <noteOn+0x4a>
                        tADSR4_on(&polyEnvs[whichVoice], velocity * 0.0078125f);
 801b7fc:	ee08 5a10 	vmov	s16, r5
 801b800:	0084      	lsls	r4, r0, #2
 801b802:	483b      	ldr	r0, [pc, #236]	; (801b8f0 <noteOn+0x1f8>)
 801b804:	eeba 8aec 	vcvt.f32.s32	s16, s16, #7
 801b808:	4420      	add	r0, r4
 801b80a:	eeb0 0a48 	vmov.f32	s0, s16
 801b80e:	f006 fa95 	bl	8021d3c <tADSR4_on>
                        tADSR4_on(&polyFiltEnvs[whichVoice], velocity * 0.0078125f);
 801b812:	4838      	ldr	r0, [pc, #224]	; (801b8f4 <noteOn+0x1fc>)
 801b814:	eeb0 0a48 	vmov.f32	s0, s16
 801b818:	4420      	add	r0, r4
 801b81a:	f006 fa8f 	bl	8021d3c <tADSR4_on>
 801b81e:	e790      	b.n	801b742 <noteOn+0x4a>
                        int whichVoice = tSimplePoly_noteOn(&poly, key, velocity);
 801b820:	4621      	mov	r1, r4
 801b822:	b2ea      	uxtb	r2, r5
 801b824:	482e      	ldr	r0, [pc, #184]	; (801b8e0 <noteOn+0x1e8>)
 801b826:	f008 fe53 	bl	80244d0 <tSimplePoly_noteOn>
                        if (whichVoice >= 0)
 801b82a:	2800      	cmp	r0, #0
 801b82c:	db89      	blt.n	801b742 <noteOn+0x4a>
                            if (tBuffer_getRecordedLength(&keyBuff[currentSamplerKeyGlobal]) == 0)
 801b82e:	4f32      	ldr	r7, [pc, #200]	; (801b8f8 <noteOn+0x200>)
                            currentSamplerKeyGlobal = key - LOWEST_SAMPLER_KEY;
 801b830:	4c32      	ldr	r4, [pc, #200]	; (801b8fc <noteOn+0x204>)
                            if (tBuffer_getRecordedLength(&keyBuff[currentSamplerKeyGlobal]) == 0)
 801b832:	eb07 0086 	add.w	r0, r7, r6, lsl #2
                            currentSamplerKeyGlobal = key - LOWEST_SAMPLER_KEY;
 801b836:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
                            if (tBuffer_getRecordedLength(&keyBuff[currentSamplerKeyGlobal]) == 0)
 801b83a:	f00a fcdf 	bl	80261fc <tBuffer_getRecordedLength>
 801b83e:	b978      	cbnz	r0, 801b860 <noteOn+0x168>
                                tBuffer_record(&keyBuff[currentSamplerKeyGlobal]);
 801b840:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 801b844:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801b848:	f00a fcc2 	bl	80261d0 <tBuffer_record>
                                newBuffer[currentSamplerKeyGlobal] = 1;
 801b84c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 801b850:	4a2b      	ldr	r2, [pc, #172]	; (801b900 <noteOn+0x208>)
 801b852:	2101      	movs	r1, #1
 801b854:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                            samplerKeyHeld[currentSamplerKeyGlobal] = 1;
 801b858:	4a2a      	ldr	r2, [pc, #168]	; (801b904 <noteOn+0x20c>)
 801b85a:	2101      	movs	r1, #1
 801b85c:	54d1      	strb	r1, [r2, r3]
 801b85e:	e770      	b.n	801b742 <noteOn+0x4a>
                                tSampler_play(&keySampler[currentSamplerKeyGlobal]);
 801b860:	4b29      	ldr	r3, [pc, #164]	; (801b908 <noteOn+0x210>)
 801b862:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
                                if (newBuffer[currentSamplerKeyGlobal])
 801b866:	4e26      	ldr	r6, [pc, #152]	; (801b900 <noteOn+0x208>)
                                tSampler_play(&keySampler[currentSamplerKeyGlobal]);
 801b868:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b86c:	f00a fd94 	bl	8026398 <tSampler_play>
                                if (newBuffer[currentSamplerKeyGlobal])
 801b870:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 801b874:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 801b878:	b9c2      	cbnz	r2, 801b8ac <noteOn+0x1b4>
 801b87a:	009a      	lsls	r2, r3, #2
                                float tempGain = (velocity * 0.0078125f * displayValues[6]) + (1.0f - displayValues[6]);
 801b87c:	4b23      	ldr	r3, [pc, #140]	; (801b90c <noteOn+0x214>)
 801b87e:	ee07 5a90 	vmov	s15, r5
 801b882:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b886:	eddf 6a22 	vldr	s13, [pc, #136]	; 801b910 <noteOn+0x218>
 801b88a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b88e:	edd3 7a06 	vldr	s15, [r3, #24]
                                tExpSmooth_setDest(&kSamplerGains[currentSamplerKeyGlobal], tempGain);
 801b892:	4820      	ldr	r0, [pc, #128]	; (801b914 <noteOn+0x21c>)
                                float tempGain = (velocity * 0.0078125f * displayValues[6]) + (1.0f - displayValues[6]);
 801b894:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b898:	ee67 7aa6 	vmul.f32	s15, s15, s13
                                tExpSmooth_setDest(&kSamplerGains[currentSamplerKeyGlobal], tempGain);
 801b89c:	4410      	add	r0, r2
 801b89e:	eea7 0a27 	vfma.f32	s0, s14, s15
 801b8a2:	f006 fd9d 	bl	80223e0 <tExpSmooth_setDest>
 801b8a6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 801b8aa:	e7d5      	b.n	801b858 <noteOn+0x160>
                                    int recordLength = tBuffer_getRecordedLength(&keyBuff[currentSamplerKeyGlobal]);
 801b8ac:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 801b8b0:	f00a fca4 	bl	80261fc <tBuffer_getRecordedLength>
                                    samplePlayLengths[currentSamplerKeyGlobal] = recordLength;
 801b8b4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 801b8b8:	ee07 0a90 	vmov	s15, r0
 801b8bc:	4916      	ldr	r1, [pc, #88]	; (801b918 <noteOn+0x220>)
 801b8be:	009a      	lsls	r2, r3, #2
                                    newBuffer[currentSamplerKeyGlobal] = 0;
 801b8c0:	2000      	movs	r0, #0
                                    samplePlayLengths[currentSamplerKeyGlobal] = recordLength;
 801b8c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b8c6:	4411      	add	r1, r2
                                    newBuffer[currentSamplerKeyGlobal] = 0;
 801b8c8:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
                                    samplePlayLengths[currentSamplerKeyGlobal] = recordLength;
 801b8cc:	edc1 7a00 	vstr	s15, [r1]
 801b8d0:	e7d4      	b.n	801b87c <noteOn+0x184>
 801b8d2:	bf00      	nop
 801b8d4:	2aaaaaab 	.word	0x2aaaaaab
 801b8d8:	20000548 	.word	0x20000548
 801b8dc:	20000694 	.word	0x20000694
 801b8e0:	20017560 	.word	0x20017560
 801b8e4:	20017448 	.word	0x20017448
 801b8e8:	20017568 	.word	0x20017568
 801b8ec:	2000285c 	.word	0x2000285c
 801b8f0:	200176dc 	.word	0x200176dc
 801b8f4:	20001f88 	.word	0x20001f88
 801b8f8:	200181a4 	.word	0x200181a4
 801b8fc:	20000040 	.word	0x20000040
 801b900:	20002794 	.word	0x20002794
 801b904:	20017778 	.word	0x20017778
 801b908:	2000356c 	.word	0x2000356c
 801b90c:	200187d4 	.word	0x200187d4
 801b910:	3c000000 	.word	0x3c000000
 801b914:	200026cc 	.word	0x200026cc
 801b918:	200028c0 	.word	0x200028c0

0801b91c <pitchBend>:


        void pitchBend(int data)
        {
            pitchBendValue = (data - 8192) * 0.000244140625f;
 801b91c:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 801b920:	ee07 3a90 	vmov	s15, r3
 801b924:	4b02      	ldr	r3, [pc, #8]	; (801b930 <pitchBend+0x14>)
 801b926:	eefa 7aca 	vcvt.f32.s32	s15, s15, #12
 801b92a:	edc3 7a02 	vstr	s15, [r3, #8]
        }
 801b92e:	4770      	bx	lr
 801b930:	20000548 	.word	0x20000548

0801b934 <sustainOff>:
 801b934:	4770      	bx	lr
 801b936:	bf00      	nop

0801b938 <sustainOn>:
        }

        void sustainOn()
        {

        }
 801b938:	4770      	bx	lr
 801b93a:	bf00      	nop

0801b93c <ssd1306_begin>:
uint8_t OLED_i2c_address;
uint8_t OLED_externalVCC;
I2C_HandleTypeDef* OLED_i2c_handle;

void ssd1306_begin(I2C_HandleTypeDef* hi2c, uint8_t vccstate, uint8_t i2caddr)
{
 801b93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	OLED_i2c_address = i2caddr;
 801b940:	4ea9      	ldr	r6, [pc, #676]	; (801bbe8 <ssd1306_begin+0x2ac>)
{
 801b942:	4688      	mov	r8, r1
	OLED_externalVCC = vccstate;
	OLED_i2c_handle = hi2c;
 801b944:	4da9      	ldr	r5, [pc, #676]	; (801bbec <ssd1306_begin+0x2b0>)
{
 801b946:	b084      	sub	sp, #16
	OLED_externalVCC = vccstate;
 801b948:	4ba9      	ldr	r3, [pc, #676]	; (801bbf0 <ssd1306_begin+0x2b4>)

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //PULL RESET LINE HIGH
 801b94a:	f44f 7100 	mov.w	r1, #512	; 0x200
	OLED_i2c_address = i2caddr;
 801b94e:	7032      	strb	r2, [r6, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //PULL RESET LINE HIGH
 801b950:	2201      	movs	r2, #1
	OLED_i2c_handle = hi2c;
 801b952:	6028      	str	r0, [r5, #0]

void ssd1306_command(uint8_t c) {
	// I2C
	//	uint8_t control = 0x00;   // Co = 0, D/C = 0

	uint8_t i2c_message[2] = {0,0};
 801b954:	ac04      	add	r4, sp, #16
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //PULL RESET LINE HIGH
 801b956:	48a7      	ldr	r0, [pc, #668]	; (801bbf4 <ssd1306_begin+0x2b8>)
	i2c_message[1] = c;
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801b958:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	OLED_externalVCC = vccstate;
 801b95c:	f883 8000 	strb.w	r8, [r3]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //PULL RESET LINE HIGH
 801b960:	f7e9 ff64 	bl	800582c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 801b964:	2001      	movs	r0, #1
 801b966:	f7e5 f861 	bl	8000a2c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //PULL RESET LINE HIGH
 801b96a:	2200      	movs	r2, #0
 801b96c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b970:	48a0      	ldr	r0, [pc, #640]	; (801bbf4 <ssd1306_begin+0x2b8>)
 801b972:	f7e9 ff5b 	bl	800582c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 801b976:	200a      	movs	r0, #10
 801b978:	f7e5 f858 	bl	8000a2c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //PULL RESET LINE HIGH
 801b97c:	2201      	movs	r2, #1
 801b97e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b982:	489c      	ldr	r0, [pc, #624]	; (801bbf4 <ssd1306_begin+0x2b8>)
 801b984:	f7e9 ff52 	bl	800582c <HAL_GPIO_WritePin>
	uint8_t i2c_message[2] = {0,0};
 801b988:	f44f 432e 	mov.w	r3, #44544	; 0xae00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801b98c:	7831      	ldrb	r1, [r6, #0]
 801b98e:	6828      	ldr	r0, [r5, #0]
 801b990:	9700      	str	r7, [sp, #0]
	uint8_t i2c_message[2] = {0,0};
 801b992:	f824 3d04 	strh.w	r3, [r4, #-4]!
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801b996:	2302      	movs	r3, #2
 801b998:	4622      	mov	r2, r4
 801b99a:	f7ea fdff 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801b99e:	f44f 4c55 	mov.w	ip, #54528	; 0xd500
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801b9a2:	7831      	ldrb	r1, [r6, #0]
 801b9a4:	4622      	mov	r2, r4
 801b9a6:	6828      	ldr	r0, [r5, #0]
 801b9a8:	2302      	movs	r3, #2
 801b9aa:	9700      	str	r7, [sp, #0]
	uint8_t i2c_message[2] = {0,0};
 801b9ac:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801b9b0:	f7ea fdf4 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801b9b4:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801b9b8:	7831      	ldrb	r1, [r6, #0]
 801b9ba:	6828      	ldr	r0, [r5, #0]
 801b9bc:	4622      	mov	r2, r4
 801b9be:	9700      	str	r7, [sp, #0]
 801b9c0:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801b9c2:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801b9c6:	f7ea fde9 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801b9ca:	f44f 4c28 	mov.w	ip, #43008	; 0xa800
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801b9ce:	7831      	ldrb	r1, [r6, #0]
 801b9d0:	6828      	ldr	r0, [r5, #0]
 801b9d2:	4622      	mov	r2, r4
 801b9d4:	9700      	str	r7, [sp, #0]
 801b9d6:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801b9d8:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801b9dc:	f7ea fdde 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801b9e0:	f44f 5cf8 	mov.w	ip, #7936	; 0x1f00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801b9e4:	7831      	ldrb	r1, [r6, #0]
 801b9e6:	6828      	ldr	r0, [r5, #0]
 801b9e8:	4622      	mov	r2, r4
 801b9ea:	9700      	str	r7, [sp, #0]
 801b9ec:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801b9ee:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801b9f2:	f7ea fdd3 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801b9f6:	f44f 4c53 	mov.w	ip, #54016	; 0xd300
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801b9fa:	7831      	ldrb	r1, [r6, #0]
 801b9fc:	6828      	ldr	r0, [r5, #0]
 801b9fe:	4622      	mov	r2, r4
 801ba00:	9700      	str	r7, [sp, #0]
 801ba02:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801ba04:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801ba08:	f7ea fdc8 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801ba0c:	f04f 0c00 	mov.w	ip, #0
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801ba10:	7831      	ldrb	r1, [r6, #0]
 801ba12:	6828      	ldr	r0, [r5, #0]
 801ba14:	4622      	mov	r2, r4
 801ba16:	9700      	str	r7, [sp, #0]
 801ba18:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801ba1a:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801ba1e:	f7ea fdbd 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801ba22:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801ba26:	7831      	ldrb	r1, [r6, #0]
 801ba28:	6828      	ldr	r0, [r5, #0]
 801ba2a:	4622      	mov	r2, r4
 801ba2c:	9700      	str	r7, [sp, #0]
 801ba2e:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801ba30:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801ba34:	f7ea fdb2 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801ba38:	f44f 4c0d 	mov.w	ip, #36096	; 0x8d00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801ba3c:	7831      	ldrb	r1, [r6, #0]
 801ba3e:	6828      	ldr	r0, [r5, #0]
 801ba40:	4622      	mov	r2, r4
 801ba42:	9700      	str	r7, [sp, #0]
 801ba44:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801ba46:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801ba4a:	f7ea fda7 	bl	800659c <HAL_I2C_Master_Transmit>
	if (vccstate == SSD1306_EXTERNALVCC)
 801ba4e:	f1b8 0f01 	cmp.w	r8, #1
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801ba52:	6828      	ldr	r0, [r5, #0]
 801ba54:	7831      	ldrb	r1, [r6, #0]
 801ba56:	4622      	mov	r2, r4
	uint8_t i2c_message[2] = {0,0};
 801ba58:	bf0c      	ite	eq
 801ba5a:	f44f 5c80 	moveq.w	ip, #4096	; 0x1000
 801ba5e:	f44f 5ca0 	movne.w	ip, #5120	; 0x1400
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801ba62:	9700      	str	r7, [sp, #0]
 801ba64:	2302      	movs	r3, #2
 801ba66:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	uint8_t i2c_message[2] = {0,0};
 801ba6a:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801ba6e:	f7ea fd95 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801ba72:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801ba76:	7831      	ldrb	r1, [r6, #0]
 801ba78:	4622      	mov	r2, r4
 801ba7a:	6828      	ldr	r0, [r5, #0]
 801ba7c:	2302      	movs	r3, #2
 801ba7e:	9700      	str	r7, [sp, #0]
	uint8_t i2c_message[2] = {0,0};
 801ba80:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801ba84:	f7ea fd8a 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801ba88:	f04f 0c00 	mov.w	ip, #0
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801ba8c:	7831      	ldrb	r1, [r6, #0]
 801ba8e:	6828      	ldr	r0, [r5, #0]
 801ba90:	4622      	mov	r2, r4
 801ba92:	9700      	str	r7, [sp, #0]
 801ba94:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801ba96:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801ba9a:	f7ea fd7f 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801ba9e:	f44f 4c21 	mov.w	ip, #41216	; 0xa100
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801baa2:	7831      	ldrb	r1, [r6, #0]
 801baa4:	6828      	ldr	r0, [r5, #0]
 801baa6:	4622      	mov	r2, r4
 801baa8:	9700      	str	r7, [sp, #0]
 801baaa:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801baac:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bab0:	f7ea fd74 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bab4:	f44f 4c48 	mov.w	ip, #51200	; 0xc800
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bab8:	7831      	ldrb	r1, [r6, #0]
 801baba:	6828      	ldr	r0, [r5, #0]
 801babc:	4622      	mov	r2, r4
 801babe:	9700      	str	r7, [sp, #0]
 801bac0:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bac2:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bac6:	f7ea fd69 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801baca:	f44f 4c5a 	mov.w	ip, #55808	; 0xda00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bace:	7831      	ldrb	r1, [r6, #0]
 801bad0:	6828      	ldr	r0, [r5, #0]
 801bad2:	4622      	mov	r2, r4
 801bad4:	9700      	str	r7, [sp, #0]
 801bad6:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bad8:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801badc:	f7ea fd5e 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bae0:	f44f 7c00 	mov.w	ip, #512	; 0x200
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bae4:	7831      	ldrb	r1, [r6, #0]
 801bae6:	6828      	ldr	r0, [r5, #0]
 801bae8:	4622      	mov	r2, r4
 801baea:	9700      	str	r7, [sp, #0]
 801baec:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801baee:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801baf2:	f7ea fd53 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801baf6:	f44f 4c01 	mov.w	ip, #33024	; 0x8100
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bafa:	7831      	ldrb	r1, [r6, #0]
 801bafc:	6828      	ldr	r0, [r5, #0]
 801bafe:	4622      	mov	r2, r4
 801bb00:	9700      	str	r7, [sp, #0]
 801bb02:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bb04:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bb08:	f7ea fd48 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bb0c:	f44f 4c0f 	mov.w	ip, #36608	; 0x8f00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bb10:	7831      	ldrb	r1, [r6, #0]
 801bb12:	6828      	ldr	r0, [r5, #0]
 801bb14:	4622      	mov	r2, r4
 801bb16:	9700      	str	r7, [sp, #0]
 801bb18:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bb1a:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bb1e:	f7ea fd3d 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bb22:	f44f 4c59 	mov.w	ip, #55552	; 0xd900
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bb26:	7831      	ldrb	r1, [r6, #0]
 801bb28:	6828      	ldr	r0, [r5, #0]
 801bb2a:	4622      	mov	r2, r4
 801bb2c:	9700      	str	r7, [sp, #0]
 801bb2e:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bb30:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bb34:	f7ea fd32 	bl	800659c <HAL_I2C_Master_Transmit>
	if (vccstate == SSD1306_EXTERNALVCC)
 801bb38:	f1b8 0f01 	cmp.w	r8, #1
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bb3c:	6828      	ldr	r0, [r5, #0]
 801bb3e:	7831      	ldrb	r1, [r6, #0]
 801bb40:	4622      	mov	r2, r4
	uint8_t i2c_message[2] = {0,0};
 801bb42:	bf0c      	ite	eq
 801bb44:	f44f 5c08 	moveq.w	ip, #8704	; 0x2200
 801bb48:	f44f 4c71 	movne.w	ip, #61696	; 0xf100
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bb4c:	9700      	str	r7, [sp, #0]
 801bb4e:	2302      	movs	r3, #2
 801bb50:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	uint8_t i2c_message[2] = {0,0};
 801bb54:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bb58:	f7ea fd20 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bb5c:	f44f 4c5b 	mov.w	ip, #56064	; 0xdb00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bb60:	7831      	ldrb	r1, [r6, #0]
 801bb62:	4622      	mov	r2, r4
 801bb64:	6828      	ldr	r0, [r5, #0]
 801bb66:	2302      	movs	r3, #2
 801bb68:	9700      	str	r7, [sp, #0]
	uint8_t i2c_message[2] = {0,0};
 801bb6a:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bb6e:	f7ea fd15 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bb72:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bb76:	7831      	ldrb	r1, [r6, #0]
 801bb78:	6828      	ldr	r0, [r5, #0]
 801bb7a:	4622      	mov	r2, r4
 801bb7c:	9700      	str	r7, [sp, #0]
 801bb7e:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bb80:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bb84:	f7ea fd0a 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bb88:	f44f 4c24 	mov.w	ip, #41984	; 0xa400
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bb8c:	7831      	ldrb	r1, [r6, #0]
 801bb8e:	6828      	ldr	r0, [r5, #0]
 801bb90:	4622      	mov	r2, r4
 801bb92:	9700      	str	r7, [sp, #0]
 801bb94:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bb96:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bb9a:	f7ea fcff 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bb9e:	f44f 4c26 	mov.w	ip, #42496	; 0xa600
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bba2:	7831      	ldrb	r1, [r6, #0]
 801bba4:	6828      	ldr	r0, [r5, #0]
 801bba6:	4622      	mov	r2, r4
 801bba8:	9700      	str	r7, [sp, #0]
 801bbaa:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bbac:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bbb0:	f7ea fcf4 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bbb4:	f44f 5c38 	mov.w	ip, #11776	; 0x2e00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bbb8:	7831      	ldrb	r1, [r6, #0]
 801bbba:	6828      	ldr	r0, [r5, #0]
 801bbbc:	4622      	mov	r2, r4
 801bbbe:	9700      	str	r7, [sp, #0]
 801bbc0:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bbc2:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bbc6:	f7ea fce9 	bl	800659c <HAL_I2C_Master_Transmit>
 801bbca:	6828      	ldr	r0, [r5, #0]
 801bbcc:	4622      	mov	r2, r4
 801bbce:	7831      	ldrb	r1, [r6, #0]
	uint8_t i2c_message[2] = {0,0};
 801bbd0:	f44f 452f 	mov.w	r5, #44800	; 0xaf00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bbd4:	2302      	movs	r3, #2
 801bbd6:	9700      	str	r7, [sp, #0]
	uint8_t i2c_message[2] = {0,0};
 801bbd8:	f8ad 500c 	strh.w	r5, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bbdc:	f7ea fcde 	bl	800659c <HAL_I2C_Master_Transmit>
}
 801bbe0:	b004      	add	sp, #16
 801bbe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbe6:	bf00      	nop
 801bbe8:	2001867c 	.word	0x2001867c
 801bbec:	20018678 	.word	0x20018678
 801bbf0:	20018674 	.word	0x20018674
 801bbf4:	58020000 	.word	0x58020000

0801bbf8 <ssd1306_display_full_buffer>:
  ssd1306_command(contrast);
}



void ssd1306_display_full_buffer(void) {
 801bbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbfc:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bbfe:	4e2d      	ldr	r6, [pc, #180]	; (801bcb4 <ssd1306_display_full_buffer+0xbc>)
 801bc00:	4d2d      	ldr	r5, [pc, #180]	; (801bcb8 <ssd1306_display_full_buffer+0xc0>)
 801bc02:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	uint8_t i2c_message[2] = {0,0};
 801bc06:	ac04      	add	r4, sp, #16
 801bc08:	f44f 5204 	mov.w	r2, #8448	; 0x2100
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bc0c:	7831      	ldrb	r1, [r6, #0]
	uint8_t i2c_message[2] = {0,0};
 801bc0e:	f04f 0800 	mov.w	r8, #0
 801bc12:	f824 2d04 	strh.w	r2, [r4, #-4]!
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bc16:	2302      	movs	r3, #2
 801bc18:	4622      	mov	r2, r4
 801bc1a:	6828      	ldr	r0, [r5, #0]
 801bc1c:	9700      	str	r7, [sp, #0]
 801bc1e:	f7ea fcbd 	bl	800659c <HAL_I2C_Master_Transmit>
 801bc22:	7831      	ldrb	r1, [r6, #0]
 801bc24:	4622      	mov	r2, r4
 801bc26:	6828      	ldr	r0, [r5, #0]
 801bc28:	9700      	str	r7, [sp, #0]
 801bc2a:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bc2c:	f8ad 800c 	strh.w	r8, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bc30:	f7ea fcb4 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bc34:	f44f 4cfe 	mov.w	ip, #32512	; 0x7f00
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bc38:	7831      	ldrb	r1, [r6, #0]
 801bc3a:	4622      	mov	r2, r4
 801bc3c:	6828      	ldr	r0, [r5, #0]
 801bc3e:	9700      	str	r7, [sp, #0]
 801bc40:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bc42:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bc46:	f7ea fca9 	bl	800659c <HAL_I2C_Master_Transmit>
	uint8_t i2c_message[2] = {0,0};
 801bc4a:	f44f 5c08 	mov.w	ip, #8704	; 0x2200
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bc4e:	7831      	ldrb	r1, [r6, #0]
 801bc50:	4622      	mov	r2, r4
 801bc52:	6828      	ldr	r0, [r5, #0]
 801bc54:	9700      	str	r7, [sp, #0]
 801bc56:	2302      	movs	r3, #2
	uint8_t i2c_message[2] = {0,0};
 801bc58:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bc5c:	f7ea fc9e 	bl	800659c <HAL_I2C_Master_Transmit>
 801bc60:	7831      	ldrb	r1, [r6, #0]
 801bc62:	4622      	mov	r2, r4
 801bc64:	6828      	ldr	r0, [r5, #0]
 801bc66:	2302      	movs	r3, #2
 801bc68:	9700      	str	r7, [sp, #0]
	uint8_t i2c_message[2] = {0,0};
 801bc6a:	f8ad 800c 	strh.w	r8, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bc6e:	f7ea fc95 	bl	800659c <HAL_I2C_Master_Transmit>
//		HAL_I2C_Master_Transmit_DMA(OLED_i2c_handle, OLED_i2c_address, displayBufferChunk, 17);
////		HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, displayBufferChunk, 17, 2000);
////		HAL_Delay(1);
//		i--;
//	}
	displayBufferChunk[0] = 0x40;
 801bc72:	f8df 804c 	ldr.w	r8, [pc, #76]	; 801bcc0 <ssd1306_display_full_buffer+0xc8>
	uint8_t i2c_message[2] = {0,0};
 801bc76:	f44f 7c40 	mov.w	ip, #768	; 0x300
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bc7a:	7831      	ldrb	r1, [r6, #0]
 801bc7c:	4622      	mov	r2, r4
 801bc7e:	6828      	ldr	r0, [r5, #0]
 801bc80:	2302      	movs	r3, #2
 801bc82:	9700      	str	r7, [sp, #0]
	uint8_t i2c_message[2] = {0,0};
 801bc84:	f8ad c00c 	strh.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit(OLED_i2c_handle, OLED_i2c_address, i2c_message, 2, 2000);
 801bc88:	f7ea fc88 	bl	800659c <HAL_I2C_Master_Transmit>
	displayBufferChunk[0] = 0x40;
 801bc8c:	4640      	mov	r0, r8
 801bc8e:	2340      	movs	r3, #64	; 0x40
 801bc90:	f44f 7200 	mov.w	r2, #512	; 0x200
 801bc94:	4909      	ldr	r1, [pc, #36]	; (801bcbc <ssd1306_display_full_buffer+0xc4>)
 801bc96:	f800 3b01 	strb.w	r3, [r0], #1
 801bc9a:	f00b f903 	bl	8026ea4 <memcpy>
	for (int i = 0; i < 512; i++)
	{
		displayBufferChunk[i+1] = buffer[i];
	}
	HAL_I2C_Master_Transmit_DMA(OLED_i2c_handle, OLED_i2c_address, displayBufferChunk, 513);
 801bc9e:	4642      	mov	r2, r8
 801bca0:	7831      	ldrb	r1, [r6, #0]
 801bca2:	f240 2301 	movw	r3, #513	; 0x201
 801bca6:	6828      	ldr	r0, [r5, #0]
 801bca8:	f7ea fda2 	bl	80067f0 <HAL_I2C_Master_Transmit_DMA>
}
 801bcac:	b004      	add	sp, #16
 801bcae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcb2:	bf00      	nop
 801bcb4:	2001867c 	.word	0x2001867c
 801bcb8:	20018678 	.word	0x20018678
 801bcbc:	20018474 	.word	0x20018474
 801bcc0:	38000000 	.word	0x38000000

0801bcc4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bcc4:	4b07      	ldr	r3, [pc, #28]	; (801bce4 <HAL_MspInit+0x20>)
{
 801bcc6:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bcc8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 801bccc:	f042 0202 	orr.w	r2, r2, #2
 801bcd0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 801bcd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801bcd8:	f003 0302 	and.w	r3, r3, #2
 801bcdc:	9301      	str	r3, [sp, #4]
 801bcde:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801bce0:	b002      	add	sp, #8
 801bce2:	4770      	bx	lr
 801bce4:	58024400 	.word	0x58024400

0801bce8 <NMI_Handler>:
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bce8:	4b05      	ldr	r3, [pc, #20]	; (801bd00 <NMI_Handler+0x18>)
 801bcea:	2001      	movs	r0, #1
 801bcec:	2100      	movs	r1, #0
 801bcee:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801bcf2:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 801bcf6:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 801bcfa:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
	}
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 801bcfe:	4770      	bx	lr
 801bd00:	20001bd0 	.word	0x20001bd0

0801bd04 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bd04:	4b05      	ldr	r3, [pc, #20]	; (801bd1c <MemManage_Handler+0x18>)
 801bd06:	2001      	movs	r0, #1
 801bd08:	2100      	movs	r1, #0
 801bd0a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801bd0e:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 801bd12:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 801bd16:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
 801bd1a:	e7fe      	b.n	801bd1a <MemManage_Handler+0x16>
 801bd1c:	20001bd0 	.word	0x20001bd0

0801bd20 <BusFault_Handler>:
 801bd20:	b508      	push	{r3, lr}
 801bd22:	f7ff ffef 	bl	801bd04 <MemManage_Handler>
 801bd26:	bf00      	nop

0801bd28 <UsageFault_Handler>:
 801bd28:	b508      	push	{r3, lr}
 801bd2a:	f7ff ffeb 	bl	801bd04 <MemManage_Handler>
 801bd2e:	bf00      	nop

0801bd30 <SVC_Handler>:
 801bd30:	4b05      	ldr	r3, [pc, #20]	; (801bd48 <SVC_Handler+0x18>)
 801bd32:	2001      	movs	r0, #1
 801bd34:	2100      	movs	r1, #0
 801bd36:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801bd3a:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 801bd3e:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 801bd42:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
 801bd46:	4770      	bx	lr
 801bd48:	20001bd0 	.word	0x20001bd0

0801bd4c <DebugMon_Handler>:
 801bd4c:	4b05      	ldr	r3, [pc, #20]	; (801bd64 <DebugMon_Handler+0x18>)
 801bd4e:	2001      	movs	r0, #1
 801bd50:	2100      	movs	r1, #0
 801bd52:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801bd56:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 801bd5a:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 801bd5e:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
 801bd62:	4770      	bx	lr
 801bd64:	20001bd0 	.word	0x20001bd0

0801bd68 <PendSV_Handler>:
 801bd68:	4b05      	ldr	r3, [pc, #20]	; (801bd80 <PendSV_Handler+0x18>)
 801bd6a:	2001      	movs	r0, #1
 801bd6c:	2100      	movs	r1, #0
 801bd6e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801bd72:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 801bd76:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 801bd7a:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
 801bd7e:	4770      	bx	lr
 801bd80:	20001bd0 	.word	0x20001bd0

0801bd84 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bd84:	4b06      	ldr	r3, [pc, #24]	; (801bda0 <SysTick_Handler+0x1c>)
 801bd86:	2001      	movs	r0, #1
 801bd88:	2100      	movs	r1, #0
 801bd8a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801bd8e:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 801bd92:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 801bd96:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801bd9a:	f7e4 be35 	b.w	8000a08 <HAL_IncTick>
 801bd9e:	bf00      	nop
 801bda0:	20001bd0 	.word	0x20001bd0

0801bda4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 801bda4:	b430      	push	{r4, r5}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bda6:	4b07      	ldr	r3, [pc, #28]	; (801bdc4 <DMA1_Stream1_IRQHandler+0x20>)
 801bda8:	2401      	movs	r4, #1
 801bdaa:	2500      	movs	r5, #0
	}
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 801bdac:	4806      	ldr	r0, [pc, #24]	; (801bdc8 <DMA1_Stream1_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bdae:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801bdb2:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801bdb6:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801bdba:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 801bdbe:	bc30      	pop	{r4, r5}
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 801bdc0:	f7e8 b94e 	b.w	8004060 <HAL_DMA_IRQHandler>
 801bdc4:	20001bd0 	.word	0x20001bd0
 801bdc8:	20001d80 	.word	0x20001d80

0801bdcc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 801bdcc:	b430      	push	{r4, r5}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bdce:	4b07      	ldr	r3, [pc, #28]	; (801bdec <DMA1_Stream2_IRQHandler+0x20>)
 801bdd0:	2401      	movs	r4, #1
 801bdd2:	2500      	movs	r5, #0
	}
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 801bdd4:	4806      	ldr	r0, [pc, #24]	; (801bdf0 <DMA1_Stream2_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bdd6:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801bdda:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801bdde:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801bde2:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 801bde6:	bc30      	pop	{r4, r5}
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 801bde8:	f7e8 b93a 	b.w	8004060 <HAL_DMA_IRQHandler>
 801bdec:	20001bd0 	.word	0x20001bd0
 801bdf0:	20001df8 	.word	0x20001df8

0801bdf4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 801bdf4:	b430      	push	{r4, r5}
  /* USER CODE BEGIN ADC_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bdf6:	4b07      	ldr	r3, [pc, #28]	; (801be14 <ADC_IRQHandler+0x20>)
 801bdf8:	2401      	movs	r4, #1
 801bdfa:	2500      	movs	r5, #0
	}
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 801bdfc:	4806      	ldr	r0, [pc, #24]	; (801be18 <ADC_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bdfe:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801be02:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801be06:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801be0a:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 801be0e:	bc30      	pop	{r4, r5}
  HAL_ADC_IRQHandler(&hadc1);
 801be10:	f7e4 bf38 	b.w	8000c84 <HAL_ADC_IRQHandler>
 801be14:	20001bd0 	.word	0x20001bd0
 801be18:	20000750 	.word	0x20000750

0801be1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 801be1c:	b430      	push	{r4, r5}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801be1e:	4b07      	ldr	r3, [pc, #28]	; (801be3c <DMA2_Stream0_IRQHandler+0x20>)
 801be20:	2401      	movs	r4, #1
 801be22:	2500      	movs	r5, #0
	}
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 801be24:	4806      	ldr	r0, [pc, #24]	; (801be40 <DMA2_Stream0_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801be26:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801be2a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801be2e:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801be32:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 801be36:	bc30      	pop	{r4, r5}
  HAL_DMA_IRQHandler(&hdma_adc1);
 801be38:	f7e8 b912 	b.w	8004060 <HAL_DMA_IRQHandler>
 801be3c:	20001bd0 	.word	0x20001bd0
 801be40:	200007b4 	.word	0x200007b4

0801be44 <SAI1_IRQHandler>:
/**
  * @brief This function handles SAI1 global interrupt.
  */
uint8_t isItCalled = 0;
void SAI1_IRQHandler(void)
{
 801be44:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN SAI1_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
	}
	isItCalled = 1;
 801be46:	4a0b      	ldr	r2, [pc, #44]	; (801be74 <SAI1_IRQHandler+0x30>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801be48:	2401      	movs	r4, #1
 801be4a:	4b0b      	ldr	r3, [pc, #44]	; (801be78 <SAI1_IRQHandler+0x34>)
 801be4c:	2500      	movs	r5, #0
	isItCalled = 1;
 801be4e:	2101      	movs	r1, #1
  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 801be50:	480a      	ldr	r0, [pc, #40]	; (801be7c <SAI1_IRQHandler+0x38>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801be52:	e9c3 4504 	strd	r4, r5, [r3, #16]
	isItCalled = 1;
 801be56:	7011      	strb	r1, [r2, #0]
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801be58:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801be5c:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801be60:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 801be64:	f7ef f9a8 	bl	800b1b8 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 801be68:	4805      	ldr	r0, [pc, #20]	; (801be80 <SAI1_IRQHandler+0x3c>)
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 801be6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 801be6e:	f7ef b9a3 	b.w	800b1b8 <HAL_SAI_IRQHandler>
 801be72:	bf00      	nop
 801be74:	20000658 	.word	0x20000658
 801be78:	20001bd0 	.word	0x20001bd0
 801be7c:	20001e70 	.word	0x20001e70
 801be80:	20001ce8 	.word	0x20001ce8

0801be84 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 801be84:	b430      	push	{r4, r5}
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801be86:	4b07      	ldr	r3, [pc, #28]	; (801bea4 <I2C4_EV_IRQHandler+0x20>)
 801be88:	2401      	movs	r4, #1
 801be8a:	2500      	movs	r5, #0
	}
  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 801be8c:	4806      	ldr	r0, [pc, #24]	; (801bea8 <I2C4_EV_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801be8e:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801be92:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801be96:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801be9a:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 801be9e:	bc30      	pop	{r4, r5}
  HAL_I2C_EV_IRQHandler(&hi2c4);
 801bea0:	f7ea bda8 	b.w	80069f4 <HAL_I2C_EV_IRQHandler>
 801bea4:	20001bd0 	.word	0x20001bd0
 801bea8:	20001688 	.word	0x20001688

0801beac <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 801beac:	b430      	push	{r4, r5}
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801beae:	4b07      	ldr	r3, [pc, #28]	; (801becc <I2C4_ER_IRQHandler+0x20>)
 801beb0:	2401      	movs	r4, #1
 801beb2:	2500      	movs	r5, #0
	}
  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 801beb4:	4806      	ldr	r0, [pc, #24]	; (801bed0 <I2C4_ER_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801beb6:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801beba:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801bebe:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801bec2:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 801bec6:	bc30      	pop	{r4, r5}
  HAL_I2C_ER_IRQHandler(&hi2c4);
 801bec8:	f7eb bddc 	b.w	8007a84 <HAL_I2C_ER_IRQHandler>
 801becc:	20001bd0 	.word	0x20001bd0
 801bed0:	20001688 	.word	0x20001688

0801bed4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 801bed4:	b430      	push	{r4, r5}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bed6:	4b07      	ldr	r3, [pc, #28]	; (801bef4 <OTG_FS_IRQHandler+0x20>)
 801bed8:	2401      	movs	r4, #1
 801beda:	2500      	movs	r5, #0
	}
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 801bedc:	4806      	ldr	r0, [pc, #24]	; (801bef8 <OTG_FS_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bede:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801bee2:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801bee6:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801beea:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801beee:	bc30      	pop	{r4, r5}
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 801bef0:	f7e9 bdd4 	b.w	8005a9c <HAL_HCD_IRQHandler>
 801bef4:	20001bd0 	.word	0x20001bd0
 801bef8:	2001921c 	.word	0x2001921c

0801befc <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 801befc:	b430      	push	{r4, r5}
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801befe:	4b07      	ldr	r3, [pc, #28]	; (801bf1c <DMAMUX1_OVR_IRQHandler+0x20>)
 801bf00:	2401      	movs	r4, #1
 801bf02:	2500      	movs	r5, #0
	}
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA2_Stream0
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 801bf04:	4806      	ldr	r0, [pc, #24]	; (801bf20 <DMAMUX1_OVR_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bf06:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801bf0a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801bf0e:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801bf12:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 801bf16:	bc30      	pop	{r4, r5}
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 801bf18:	f7e8 be2e 	b.w	8004b78 <HAL_DMAEx_MUX_IRQHandler>
 801bf1c:	20001bd0 	.word	0x20001bd0
 801bf20:	200007b4 	.word	0x200007b4

0801bf24 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 801bf24:	b430      	push	{r4, r5}
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bf26:	4b07      	ldr	r3, [pc, #28]	; (801bf44 <BDMA_Channel0_IRQHandler+0x20>)
 801bf28:	2401      	movs	r4, #1
 801bf2a:	2500      	movs	r5, #0
	}
  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 801bf2c:	4806      	ldr	r0, [pc, #24]	; (801bf48 <BDMA_Channel0_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bf2e:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801bf32:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801bf36:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801bf3a:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 801bf3e:	bc30      	pop	{r4, r5}
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 801bf40:	f7e8 b88e 	b.w	8004060 <HAL_DMA_IRQHandler>
 801bf44:	20001bd0 	.word	0x20001bd0
 801bf48:	20001720 	.word	0x20001720

0801bf4c <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 801bf4c:	b430      	push	{r4, r5}
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */
	for (int i = 0; i < 4; i++)
	{
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bf4e:	4b07      	ldr	r3, [pc, #28]	; (801bf6c <BDMA_Channel1_IRQHandler+0x20>)
 801bf50:	2401      	movs	r4, #1
 801bf52:	2500      	movs	r5, #0
	}
  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 801bf54:	4806      	ldr	r0, [pc, #24]	; (801bf70 <BDMA_Channel1_IRQHandler+0x24>)
		cycleCountVals[i][2] = 1; //set these bits to make sure cycle counting that is happening is invalidated during a USB interrupt (so it's not counted toward the averaged and min max totals)
 801bf56:	e9c3 4504 	strd	r4, r5, [r3, #16]
 801bf5a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 801bf5e:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
 801bf62:	e9c3 4516 	strd	r4, r5, [r3, #88]	; 0x58
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 801bf66:	bc30      	pop	{r4, r5}
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 801bf68:	f7e8 b87a 	b.w	8004060 <HAL_DMA_IRQHandler>
 801bf6c:	20001bd0 	.word	0x20001bd0
 801bf70:	20001610 	.word	0x20001610

0801bf74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 801bf74:	b430      	push	{r4, r5}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801bf76:	4c19      	ldr	r4, [pc, #100]	; (801bfdc <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801bf78:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 801bf7a:	4b19      	ldr	r3, [pc, #100]	; (801bfe0 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801bf7c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 801bf80:	4818      	ldr	r0, [pc, #96]	; (801bfe4 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801bf82:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 801bf86:	4d18      	ldr	r5, [pc, #96]	; (801bfe8 <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801bf88:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 801bf8c:	681c      	ldr	r4, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 801bf8e:	4917      	ldr	r1, [pc, #92]	; (801bfec <SystemInit+0x78>)
  RCC->CR |= RCC_CR_HSION;
 801bf90:	f044 0401 	orr.w	r4, r4, #1
 801bf94:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 801bf96:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 801bf98:	681c      	ldr	r4, [r3, #0]
 801bf9a:	4020      	ands	r0, r4
 801bf9c:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 801bf9e:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 801bfa0:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 801bfa2:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 801bfa4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 801bfa6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 801bfa8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 801bfaa:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 801bfac:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 801bfae:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 801bfb0:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 801bfb2:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 801bfb4:	6818      	ldr	r0, [r3, #0]
 801bfb6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 801bfba:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 801bfbc:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 801bfbe:	682b      	ldr	r3, [r5, #0]
 801bfc0:	4019      	ands	r1, r3
 801bfc2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 801bfc6:	d202      	bcs.n	801bfce <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 801bfc8:	4b09      	ldr	r3, [pc, #36]	; (801bff0 <SystemInit+0x7c>)
 801bfca:	2201      	movs	r2, #1
 801bfcc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801bfce:	4b03      	ldr	r3, [pc, #12]	; (801bfdc <SystemInit+0x68>)
 801bfd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801bfd4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 801bfd6:	bc30      	pop	{r4, r5}
 801bfd8:	4770      	bx	lr
 801bfda:	bf00      	nop
 801bfdc:	e000ed00 	.word	0xe000ed00
 801bfe0:	58024400 	.word	0x58024400
 801bfe4:	eaf6ed7f 	.word	0xeaf6ed7f
 801bfe8:	5c001000 	.word	0x5c001000
 801bfec:	ffff0000 	.word	0xffff0000
 801bff0:	51008108 	.word	0x51008108

0801bff4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 801bff4:	b530      	push	{r4, r5, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  htim3.Instance = TIM3;
 801bff6:	4c39      	ldr	r4, [pc, #228]	; (801c0dc <MX_TIM3_Init+0xe8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801bff8:	2300      	movs	r3, #0
{
 801bffa:	b093      	sub	sp, #76	; 0x4c
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1024;
 801bffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  htim3.Instance = TIM3;
 801c000:	4937      	ldr	r1, [pc, #220]	; (801c0e0 <MX_TIM3_Init+0xec>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801c002:	4620      	mov	r0, r4
  htim3.Init.Period = 1024;
 801c004:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 801c006:	6021      	str	r1, [r4, #0]
  htim3.Init.Prescaler = 0;
 801c008:	6063      	str	r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801c00a:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801c00c:	930b      	str	r3, [sp, #44]	; 0x2c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801c00e:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801c010:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801c012:	61a3      	str	r3, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801c014:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801c018:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 801c01c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801c020:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801c024:	f7f0 fb56 	bl	800c6d4 <HAL_TIM_PWM_Init>
 801c028:	bb38      	cbnz	r0, 801c07a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801c02a:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801c02c:	a903      	add	r1, sp, #12
 801c02e:	482b      	ldr	r0, [pc, #172]	; (801c0dc <MX_TIM3_Init+0xe8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801c030:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801c032:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801c034:	f7f1 fb54 	bl	800d6e0 <HAL_TIMEx_MasterConfigSynchronization>
 801c038:	b9e0      	cbnz	r0, 801c074 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 801c03a:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801c03c:	2560      	movs	r5, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801c03e:	a90b      	add	r1, sp, #44	; 0x2c
 801c040:	2204      	movs	r2, #4
 801c042:	4826      	ldr	r0, [pc, #152]	; (801c0dc <MX_TIM3_Init+0xe8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801c044:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801c046:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.Pulse = 0;
 801c048:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801c04c:	f7f1 f8ba 	bl	800d1c4 <HAL_TIM_PWM_ConfigChannel>
 801c050:	b108      	cbz	r0, 801c056 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 801c052:	f7f7 fc75 	bl	8013940 <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM3)
 801c056:	6822      	ldr	r2, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c058:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM3)
 801c05a:	4921      	ldr	r1, [pc, #132]	; (801c0e0 <MX_TIM3_Init+0xec>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c05c:	930a      	str	r3, [sp, #40]	; 0x28
  if(timHandle->Instance==TIM3)
 801c05e:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c060:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801c064:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if(timHandle->Instance==TIM3)
 801c068:	d021      	beq.n	801c0ae <MX_TIM3_Init+0xba>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 801c06a:	4b1e      	ldr	r3, [pc, #120]	; (801c0e4 <MX_TIM3_Init+0xf0>)
 801c06c:	429a      	cmp	r2, r3
 801c06e:	d007      	beq.n	801c080 <MX_TIM3_Init+0x8c>
}
 801c070:	b013      	add	sp, #76	; 0x4c
 801c072:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 801c074:	f7f7 fc64 	bl	8013940 <Error_Handler>
 801c078:	e7df      	b.n	801c03a <MX_TIM3_Init+0x46>
    Error_Handler();
 801c07a:	f7f7 fc61 	bl	8013940 <Error_Handler>
 801c07e:	e7d4      	b.n	801c02a <MX_TIM3_Init+0x36>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c080:	4b19      	ldr	r3, [pc, #100]	; (801c0e8 <MX_TIM3_Init+0xf4>)
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c082:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 801c084:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c088:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c08a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c08e:	4817      	ldr	r0, [pc, #92]	; (801c0ec <MX_TIM3_Init+0xf8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c090:	4322      	orrs	r2, r4
 801c092:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 801c096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 801c09a:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c09c:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c09e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801c0a0:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c0a2:	9302      	str	r3, [sp, #8]
 801c0a4:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c0a6:	f7e9 f887 	bl	80051b8 <HAL_GPIO_Init>
}
 801c0aa:	b013      	add	sp, #76	; 0x4c
 801c0ac:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c0ae:	4b0e      	ldr	r3, [pc, #56]	; (801c0e8 <MX_TIM3_Init+0xf4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c0b0:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801c0b2:	2520      	movs	r5, #32
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c0b4:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c0b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c0ba:	480c      	ldr	r0, [pc, #48]	; (801c0ec <MX_TIM3_Init+0xf8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c0bc:	4322      	orrs	r2, r4
 801c0be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 801c0c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801c0c6:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c0c8:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c0ca:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801c0cc:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c0ce:	9301      	str	r3, [sp, #4]
 801c0d0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c0d2:	f7e9 f871 	bl	80051b8 <HAL_GPIO_Init>
}
 801c0d6:	b013      	add	sp, #76	; 0x4c
 801c0d8:	bd30      	pop	{r4, r5, pc}
 801c0da:	bf00      	nop
 801c0dc:	200186c0 	.word	0x200186c0
 801c0e0:	40000400 	.word	0x40000400
 801c0e4:	40000800 	.word	0x40000800
 801c0e8:	58024400 	.word	0x58024400
 801c0ec:	58020400 	.word	0x58020400

0801c0f0 <MX_TIM4_Init>:
{
 801c0f0:	b530      	push	{r4, r5, lr}
  htim4.Instance = TIM4;
 801c0f2:	4c4e      	ldr	r4, [pc, #312]	; (801c22c <MX_TIM4_Init+0x13c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801c0f4:	2300      	movs	r3, #0
{
 801c0f6:	b097      	sub	sp, #92	; 0x5c
  htim4.Init.Period = 1024;
 801c0f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  htim4.Instance = TIM4;
 801c0fc:	494c      	ldr	r1, [pc, #304]	; (801c230 <MX_TIM4_Init+0x140>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 801c0fe:	4620      	mov	r0, r4
  htim4.Init.Period = 1024;
 801c100:	60e2      	str	r2, [r4, #12]
  htim4.Instance = TIM4;
 801c102:	6021      	str	r1, [r4, #0]
  htim4.Init.Prescaler = 0;
 801c104:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801c106:	9306      	str	r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801c108:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801c10a:	930f      	str	r3, [sp, #60]	; 0x3c
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 801c10c:	60a3      	str	r3, [r4, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801c10e:	6123      	str	r3, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801c110:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801c112:	9309      	str	r3, [sp, #36]	; 0x24
 801c114:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801c118:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801c11c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801c120:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 801c124:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 801c128:	f7f0 f9be 	bl	800c4a8 <HAL_TIM_Base_Init>
 801c12c:	2800      	cmp	r0, #0
 801c12e:	d14d      	bne.n	801c1cc <MX_TIM4_Init+0xdc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801c130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 801c134:	a906      	add	r1, sp, #24
 801c136:	483d      	ldr	r0, [pc, #244]	; (801c22c <MX_TIM4_Init+0x13c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801c138:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 801c13a:	f7f0 fccb 	bl	800cad4 <HAL_TIM_ConfigClockSource>
 801c13e:	2800      	cmp	r0, #0
 801c140:	d141      	bne.n	801c1c6 <MX_TIM4_Init+0xd6>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 801c142:	483a      	ldr	r0, [pc, #232]	; (801c22c <MX_TIM4_Init+0x13c>)
 801c144:	f7f0 fac6 	bl	800c6d4 <HAL_TIM_PWM_Init>
 801c148:	2800      	cmp	r0, #0
 801c14a:	d139      	bne.n	801c1c0 <MX_TIM4_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801c14c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 801c14e:	a903      	add	r1, sp, #12
 801c150:	4836      	ldr	r0, [pc, #216]	; (801c22c <MX_TIM4_Init+0x13c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801c152:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801c154:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 801c156:	f7f1 fac3 	bl	800d6e0 <HAL_TIMEx_MasterConfigSynchronization>
 801c15a:	bb70      	cbnz	r0, 801c1ba <MX_TIM4_Init+0xca>
  sConfigOC.Pulse = 0;
 801c15c:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801c15e:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801c160:	a90f      	add	r1, sp, #60	; 0x3c
 801c162:	4832      	ldr	r0, [pc, #200]	; (801c22c <MX_TIM4_Init+0x13c>)
 801c164:	461a      	mov	r2, r3
  sConfigOC.Pulse = 0;
 801c166:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801c168:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801c16a:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801c16c:	950f      	str	r5, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801c16e:	f7f1 f829 	bl	800d1c4 <HAL_TIM_PWM_ConfigChannel>
 801c172:	b9f8      	cbnz	r0, 801c1b4 <MX_TIM4_Init+0xc4>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801c174:	2204      	movs	r2, #4
 801c176:	a90f      	add	r1, sp, #60	; 0x3c
 801c178:	482c      	ldr	r0, [pc, #176]	; (801c22c <MX_TIM4_Init+0x13c>)
 801c17a:	f7f1 f823 	bl	800d1c4 <HAL_TIM_PWM_ConfigChannel>
 801c17e:	b9b0      	cbnz	r0, 801c1ae <MX_TIM4_Init+0xbe>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801c180:	a90f      	add	r1, sp, #60	; 0x3c
 801c182:	2208      	movs	r2, #8
 801c184:	4829      	ldr	r0, [pc, #164]	; (801c22c <MX_TIM4_Init+0x13c>)
 801c186:	f7f1 f81d 	bl	800d1c4 <HAL_TIM_PWM_ConfigChannel>
 801c18a:	b108      	cbz	r0, 801c190 <MX_TIM4_Init+0xa0>
    Error_Handler();
 801c18c:	f7f7 fbd8 	bl	8013940 <Error_Handler>
  if(timHandle->Instance==TIM3)
 801c190:	6822      	ldr	r2, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c192:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM3)
 801c194:	4927      	ldr	r1, [pc, #156]	; (801c234 <MX_TIM4_Init+0x144>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c196:	930e      	str	r3, [sp, #56]	; 0x38
  if(timHandle->Instance==TIM3)
 801c198:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c19a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 801c19e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if(timHandle->Instance==TIM3)
 801c1a2:	d02d      	beq.n	801c200 <MX_TIM4_Init+0x110>
  else if(timHandle->Instance==TIM4)
 801c1a4:	4b22      	ldr	r3, [pc, #136]	; (801c230 <MX_TIM4_Init+0x140>)
 801c1a6:	429a      	cmp	r2, r3
 801c1a8:	d013      	beq.n	801c1d2 <MX_TIM4_Init+0xe2>
}
 801c1aa:	b017      	add	sp, #92	; 0x5c
 801c1ac:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 801c1ae:	f7f7 fbc7 	bl	8013940 <Error_Handler>
 801c1b2:	e7e5      	b.n	801c180 <MX_TIM4_Init+0x90>
    Error_Handler();
 801c1b4:	f7f7 fbc4 	bl	8013940 <Error_Handler>
 801c1b8:	e7dc      	b.n	801c174 <MX_TIM4_Init+0x84>
    Error_Handler();
 801c1ba:	f7f7 fbc1 	bl	8013940 <Error_Handler>
 801c1be:	e7cd      	b.n	801c15c <MX_TIM4_Init+0x6c>
    Error_Handler();
 801c1c0:	f7f7 fbbe 	bl	8013940 <Error_Handler>
 801c1c4:	e7c2      	b.n	801c14c <MX_TIM4_Init+0x5c>
    Error_Handler();
 801c1c6:	f7f7 fbbb 	bl	8013940 <Error_Handler>
 801c1ca:	e7ba      	b.n	801c142 <MX_TIM4_Init+0x52>
    Error_Handler();
 801c1cc:	f7f7 fbb8 	bl	8013940 <Error_Handler>
 801c1d0:	e7ae      	b.n	801c130 <MX_TIM4_Init+0x40>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c1d2:	4b19      	ldr	r3, [pc, #100]	; (801c238 <MX_TIM4_Init+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c1d4:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 801c1d6:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c1da:	a90a      	add	r1, sp, #40	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c1dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c1e0:	4816      	ldr	r0, [pc, #88]	; (801c23c <MX_TIM4_Init+0x14c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c1e2:	4322      	orrs	r2, r4
 801c1e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 801c1e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 801c1ec:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c1ee:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c1f0:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801c1f2:	940e      	str	r4, [sp, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c1f4:	9302      	str	r3, [sp, #8]
 801c1f6:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c1f8:	f7e8 ffde 	bl	80051b8 <HAL_GPIO_Init>
}
 801c1fc:	b017      	add	sp, #92	; 0x5c
 801c1fe:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c200:	4b0d      	ldr	r3, [pc, #52]	; (801c238 <MX_TIM4_Init+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c202:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801c204:	2520      	movs	r5, #32
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c206:	a90a      	add	r1, sp, #40	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c208:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c20c:	480b      	ldr	r0, [pc, #44]	; (801c23c <MX_TIM4_Init+0x14c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c20e:	4322      	orrs	r2, r4
 801c210:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 801c214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801c218:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c21a:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c21c:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801c21e:	940e      	str	r4, [sp, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c220:	9301      	str	r3, [sp, #4]
 801c222:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c224:	f7e8 ffc8 	bl	80051b8 <HAL_GPIO_Init>
}
 801c228:	b017      	add	sp, #92	; 0x5c
 801c22a:	bd30      	pop	{r4, r5, pc}
 801c22c:	20018680 	.word	0x20018680
 801c230:	40000800 	.word	0x40000800
 801c234:	40000400 	.word	0x40000400
 801c238:	58024400 	.word	0x58024400
 801c23c:	58020400 	.word	0x58020400

0801c240 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM3)
 801c240:	6802      	ldr	r2, [r0, #0]
 801c242:	4b0a      	ldr	r3, [pc, #40]	; (801c26c <HAL_TIM_PWM_MspInit+0x2c>)
 801c244:	429a      	cmp	r2, r3
 801c246:	d000      	beq.n	801c24a <HAL_TIM_PWM_MspInit+0xa>
 801c248:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 801c24a:	4b09      	ldr	r3, [pc, #36]	; (801c270 <HAL_TIM_PWM_MspInit+0x30>)
{
 801c24c:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 801c24e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 801c252:	f042 0202 	orr.w	r2, r2, #2
 801c256:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 801c25a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801c25e:	f003 0302 	and.w	r3, r3, #2
 801c262:	9301      	str	r3, [sp, #4]
 801c264:	9b01      	ldr	r3, [sp, #4]
}
 801c266:	b002      	add	sp, #8
 801c268:	4770      	bx	lr
 801c26a:	bf00      	nop
 801c26c:	40000400 	.word	0x40000400
 801c270:	58024400 	.word	0x58024400

0801c274 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM4)
 801c274:	6802      	ldr	r2, [r0, #0]
 801c276:	4b0a      	ldr	r3, [pc, #40]	; (801c2a0 <HAL_TIM_Base_MspInit+0x2c>)
 801c278:	429a      	cmp	r2, r3
 801c27a:	d000      	beq.n	801c27e <HAL_TIM_Base_MspInit+0xa>
 801c27c:	4770      	bx	lr
    __HAL_RCC_TIM4_CLK_ENABLE();
 801c27e:	4b09      	ldr	r3, [pc, #36]	; (801c2a4 <HAL_TIM_Base_MspInit+0x30>)
{
 801c280:	b082      	sub	sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 801c282:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 801c286:	f042 0204 	orr.w	r2, r2, #4
 801c28a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 801c28e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801c292:	f003 0304 	and.w	r3, r3, #4
 801c296:	9301      	str	r3, [sp, #4]
 801c298:	9b01      	ldr	r3, [sp, #4]
}
 801c29a:	b002      	add	sp, #8
 801c29c:	4770      	bx	lr
 801c29e:	bf00      	nop
 801c2a0:	40000800 	.word	0x40000800
 801c2a4:	58024400 	.word	0x58024400

0801c2a8 <initModeNames>:
        VocodecPresetType currentPreset = (VocodecPresetType)0;
        VocodecPresetType previousPreset = PresetNil;
        uint8_t loadingPreset = 0;

        void initModeNames(void)
        {
 801c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2ac:	4ad2      	ldr	r2, [pc, #840]	; (801c5f8 <initModeNames+0x350>)
 801c2ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
            for (int i = 0; i < NUM_ADC_CHANNELS; i++)
            {
                floatADCUI[i] = -1.0f;
                orderedParams[i] = i;
 801c2b2:	4cd2      	ldr	r4, [pc, #840]	; (801c5fc <initModeNames+0x354>)
            }
            orderedParams[6] = ButtonA;
            orderedParams[7] = ButtonB;
 801c2b4:	f04f 0906 	mov.w	r9, #6
                floatADCUI[i] = -1.0f;
 801c2b8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
                cvAddParam[i] = -1;
            }

            modeNames[Vocoder] = "VOCODER1";
            shortModeNames[Vocoder] = "VL";
            modeNamesDetails[Vocoder] = "LPC";
 801c2bc:	f8df b45c 	ldr.w	fp, [pc, #1116]	; 801c71c <initModeNames+0x474>
                floatADCUI[i] = -1.0f;
 801c2c0:	4bcf      	ldr	r3, [pc, #828]	; (801c600 <initModeNames+0x358>)
            orderedParams[7] = ButtonB;
 801c2c2:	f884 9007 	strb.w	r9, [r4, #7]
                orderedParams[i] = i;
 801c2c6:	f04f 0904 	mov.w	r9, #4
 801c2ca:	6017      	str	r7, [r2, #0]
 801c2cc:	6057      	str	r7, [r2, #4]
 801c2ce:	6097      	str	r7, [r2, #8]
 801c2d0:	60d7      	str	r7, [r2, #12]
 801c2d2:	8217      	strh	r7, [r2, #16]
 801c2d4:	f8df e448 	ldr.w	lr, [pc, #1096]	; 801c720 <initModeNames+0x478>
            modeNamesDetails[Vocoder] = "LPC";
 801c2d8:	4aca      	ldr	r2, [pc, #808]	; (801c604 <initModeNames+0x35c>)
                floatADCUI[i] = -1.0f;
 801c2da:	edc3 7a00 	vstr	s15, [r3]
 801c2de:	edc3 7a01 	vstr	s15, [r3, #4]
 801c2e2:	edc3 7a02 	vstr	s15, [r3, #8]
 801c2e6:	edc3 7a03 	vstr	s15, [r3, #12]
 801c2ea:	edc3 7a04 	vstr	s15, [r3, #16]
 801c2ee:	edc3 7a05 	vstr	s15, [r3, #20]
                orderedParams[i] = i;
 801c2f2:	f8c4 e000 	str.w	lr, [r4]
            numPages[Vocoder] = 2;
            knobParamNames[Vocoder][0] = "VOLUME";
 801c2f6:	4bc4      	ldr	r3, [pc, #784]	; (801c608 <initModeNames+0x360>)
            knobParamNames[Vocoder][1] = "WARP";
 801c2f8:	f8df e428 	ldr.w	lr, [pc, #1064]	; 801c724 <initModeNames+0x47c>
                orderedParams[i] = i;
 801c2fc:	f884 9004 	strb.w	r9, [r4, #4]
 801c300:	f04f 0905 	mov.w	r9, #5
            modeNamesDetails[Vocoder] = "LPC";
 801c304:	f8cb 2000 	str.w	r2, [fp]
            knobParamNames[Vocoder][0] = "VOLUME";
 801c308:	4ac0      	ldr	r2, [pc, #768]	; (801c60c <initModeNames+0x364>)
                orderedParams[i] = i;
 801c30a:	f884 9005 	strb.w	r9, [r4, #5]
            orderedParams[6] = ButtonA;
 801c30e:	f884 9006 	strb.w	r9, [r4, #6]
            knobParamNames[Vocoder][2] = "QUALITY";
            knobParamNames[Vocoder][3] = "SAWtoPULSE";
 801c312:	4cbf      	ldr	r4, [pc, #764]	; (801c610 <initModeNames+0x368>)
            modeNames[Vocoder] = "VOCODER1";
 801c314:	f8df 8410 	ldr.w	r8, [pc, #1040]	; 801c728 <initModeNames+0x480>
 801c318:	f8df a410 	ldr.w	sl, [pc, #1040]	; 801c72c <initModeNames+0x484>
            knobParamNames[Vocoder][7] = "PULSEWIDTH";
            knobParamNames[Vocoder][8] = "PULSESHAPE";
            knobParamNames[Vocoder][9] = "";


            modeNames[VocoderCh] = "VOCODER2";
 801c31c:	4dbd      	ldr	r5, [pc, #756]	; (801c614 <initModeNames+0x36c>)
            shortModeNames[Vocoder] = "VL";
 801c31e:	f8df c410 	ldr.w	ip, [pc, #1040]	; 801c730 <initModeNames+0x488>
 801c322:	48bd      	ldr	r0, [pc, #756]	; (801c618 <initModeNames+0x370>)
            shortModeNames[VocoderCh] = "VC";
 801c324:	49bd      	ldr	r1, [pc, #756]	; (801c61c <initModeNames+0x374>)
            knobParamNames[Vocoder][4] = "NOISTHRESH";
 801c326:	4fbe      	ldr	r7, [pc, #760]	; (801c620 <initModeNames+0x378>)
            shortModeNames[Vocoder] = "VL";
 801c328:	f8cc 0000 	str.w	r0, [ip]
            shortModeNames[VocoderCh] = "VC";
 801c32c:	f8cc 1004 	str.w	r1, [ip, #4]
            knobParamNames[Vocoder][8] = "PULSESHAPE";
 801c330:	48bc      	ldr	r0, [pc, #752]	; (801c624 <initModeNames+0x37c>)
            knobParamNames[Vocoder][9] = "";
 801c332:	49bd      	ldr	r1, [pc, #756]	; (801c628 <initModeNames+0x380>)
            modeNamesDetails[VocoderCh] = "CHANNEL";
 801c334:	4ebd      	ldr	r6, [pc, #756]	; (801c62c <initModeNames+0x384>)
            knobParamNames[Vocoder][4] = "NOISTHRESH";
 801c336:	611f      	str	r7, [r3, #16]
            modeNamesDetails[VocoderCh] = "CHANNEL";
 801c338:	f8cb 6004 	str.w	r6, [fp, #4]
            knobParamNames[VocoderCh][11] = "BANDOFF";
            knobParamNames[VocoderCh][12] = "TILT";
            knobParamNames[VocoderCh][13] = "STEREO";
            knobParamNames[VocoderCh][14] = "BARKPULL";

            modeNames[Pitchshift] = "PITCHSHIFT";
 801c33c:	f8df 93f4 	ldr.w	r9, [pc, #1012]	; 801c734 <initModeNames+0x48c>
            knobParamNames[VocoderCh][10] = "BANDSQUISH";
 801c340:	4ebb      	ldr	r6, [pc, #748]	; (801c630 <initModeNames+0x388>)
            knobParamNames[Vocoder][1] = "WARP";
 801c342:	e9c3 2e00 	strd	r2, lr, [r3]
            knobParamNames[Vocoder][2] = "QUALITY";
 801c346:	4abb      	ldr	r2, [pc, #748]	; (801c634 <initModeNames+0x38c>)
            knobParamNames[Vocoder][3] = "SAWtoPULSE";
 801c348:	e9c3 2402 	strd	r2, r4, [r3, #8]
            knobParamNames[Vocoder][5] = "BREATH";
 801c34c:	4aba      	ldr	r2, [pc, #744]	; (801c638 <initModeNames+0x390>)
            modeNames[VocoderCh] = "VOCODER2";
 801c34e:	e9c8 a500 	strd	sl, r5, [r8]
            knobParamNames[Vocoder][5] = "BREATH";
 801c352:	615a      	str	r2, [r3, #20]
            knobParamNames[Vocoder][7] = "PULSEWIDTH";
 801c354:	4db9      	ldr	r5, [pc, #740]	; (801c63c <initModeNames+0x394>)
            knobParamNames[Vocoder][6] = "TILT";
 801c356:	4aba      	ldr	r2, [pc, #744]	; (801c640 <initModeNames+0x398>)
            knobParamNames[VocoderCh][3] = "BANDWIDTH";
 801c358:	f8df a3dc 	ldr.w	sl, [pc, #988]	; 801c738 <initModeNames+0x490>
            knobParamNames[Vocoder][7] = "PULSEWIDTH";
 801c35c:	e9c3 2506 	strd	r2, r5, [r3, #24]
            knobParamNames[VocoderCh][0] = "VOLUME";
 801c360:	4aaa      	ldr	r2, [pc, #680]	; (801c60c <initModeNames+0x364>)
            knobParamNames[Vocoder][9] = "";
 801c362:	e9c3 0108 	strd	r0, r1, [r3, #32]
            knobParamNames[VocoderCh][1] = "WARP";
 801c366:	e9c3 2e19 	strd	r2, lr, [r3, #100]	; 0x64
            knobParamNames[VocoderCh][2] = "QUALITY";
 801c36a:	4ab2      	ldr	r2, [pc, #712]	; (801c634 <initModeNames+0x38c>)
            knobParamNames[VocoderCh][5] = "SAWtoPULSE";
 801c36c:	679c      	str	r4, [r3, #120]	; 0x78
            knobParamNames[VocoderCh][2] = "QUALITY";
 801c36e:	66da      	str	r2, [r3, #108]	; 0x6c
            knobParamNames[VocoderCh][14] = "BARKPULL";
 801c370:	4cb4      	ldr	r4, [pc, #720]	; (801c644 <initModeNames+0x39c>)
            knobParamNames[VocoderCh][7] = "PULSESHAPE";
 801c372:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
            knobParamNames[VocoderCh][8] = "BREATH";
 801c376:	4ab0      	ldr	r2, [pc, #704]	; (801c638 <initModeNames+0x390>)
            knobParamNames[VocoderCh][12] = "TILT";
 801c378:	48b1      	ldr	r0, [pc, #708]	; (801c640 <initModeNames+0x398>)
            modeNames[Pitchshift] = "PITCHSHIFT";
 801c37a:	f8c8 9008 	str.w	r9, [r8, #8]
            knobParamNames[VocoderCh][4] = "NOISTHRESH";
 801c37e:	675f      	str	r7, [r3, #116]	; 0x74
            knobParamNames[VocoderCh][11] = "BANDOFF";
 801c380:	f8df e3b8 	ldr.w	lr, [pc, #952]	; 801c73c <initModeNames+0x494>
            knobParamNames[VocoderCh][6] = "PULSEWIDTH";
 801c384:	67dd      	str	r5, [r3, #124]	; 0x7c
            shortModeNames[Pitchshift] = "PS";
 801c386:	4fb0      	ldr	r7, [pc, #704]	; (801c648 <initModeNames+0x3a0>)
            modeNamesDetails[Pitchshift] = "";
            numPages[Pitchshift] = 2;
            knobParamNames[Pitchshift][0] = "SHIFT";
 801c388:	4db0      	ldr	r5, [pc, #704]	; (801c64c <initModeNames+0x3a4>)
            knobParamNames[VocoderCh][8] = "BREATH";
 801c38a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            knobParamNames[VocoderCh][12] = "TILT";
 801c38e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
            knobParamNames[Pitchshift][1] = "FINE";
 801c392:	4aaf      	ldr	r2, [pc, #700]	; (801c650 <initModeNames+0x3a8>)
            knobParamNames[Pitchshift][2] = "F AMT";
 801c394:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 801c740 <initModeNames+0x498>
            knobParamNames[Pitchshift][3] = "FORMANT";
 801c398:	48ae      	ldr	r0, [pc, #696]	; (801c654 <initModeNames+0x3ac>)
            knobParamNames[VocoderCh][10] = "BANDSQUISH";
 801c39a:	f8c3 608c 	str.w	r6, [r3, #140]	; 0x8c
            knobParamNames[VocoderCh][14] = "BARKPULL";
 801c39e:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
            knobParamNames[Pitchshift][4] = "RANGE";
 801c3a2:	4ead      	ldr	r6, [pc, #692]	; (801c658 <initModeNames+0x3b0>)
            knobParamNames[Pitchshift][6] = "";
            knobParamNames[Pitchshift][7] = "";
            knobParamNames[Pitchshift][8] = "";
            knobParamNames[Pitchshift][9] = "";

            modeNames[AutotuneMono] = "AUTOTUNE";
 801c3a4:	4cad      	ldr	r4, [pc, #692]	; (801c65c <initModeNames+0x3b4>)
            shortModeNames[Pitchshift] = "PS";
 801c3a6:	f8cc 7008 	str.w	r7, [ip, #8]
            modeNames[AutotuneMono] = "AUTOTUNE";
 801c3aa:	f8c8 400c 	str.w	r4, [r8, #12]
            knobParamNames[VocoderCh][11] = "BANDOFF";
 801c3ae:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
            shortModeNames[AutotuneMono] = "NT";
 801c3b2:	4fab      	ldr	r7, [pc, #684]	; (801c660 <initModeNames+0x3b8>)
            knobParamNames[Pitchshift][5] = "OFFSET";
 801c3b4:	f8df e38c 	ldr.w	lr, [pc, #908]	; 801c744 <initModeNames+0x49c>
            knobParamNames[Pitchshift][0] = "SHIFT";
 801c3b8:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
            knobParamNames[Pitchshift][1] = "FINE";
 801c3bc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            modeNamesDetails[AutotuneMono] = "";
            numPages[AutotuneMono] = 1;
            knobParamNames[AutotuneMono][0] = "PICKINESS";
            knobParamNames[AutotuneMono][1] = "AMOUNT";
 801c3c0:	4da8      	ldr	r5, [pc, #672]	; (801c664 <initModeNames+0x3bc>)
            knobParamNames[VocoderCh][9] = "SPEED";
 801c3c2:	4aa9      	ldr	r2, [pc, #676]	; (801c668 <initModeNames+0x3c0>)
            knobParamNames[Pitchshift][4] = "RANGE";
 801c3c4:	f8c3 60d8 	str.w	r6, [r3, #216]	; 0xd8
            knobParamNames[VocoderCh][13] = "STEREO";
 801c3c8:	4ca8      	ldr	r4, [pc, #672]	; (801c66c <initModeNames+0x3c4>)
            knobParamNames[AutotuneMono][2] = "SPEED";
            knobParamNames[AutotuneMono][3] = "LEAPALLOW";
 801c3ca:	4ea9      	ldr	r6, [pc, #676]	; (801c670 <initModeNames+0x3c8>)
            modeNamesDetails[Pitchshift] = "";
 801c3cc:	f8cb 1008 	str.w	r1, [fp, #8]
            modeNamesDetails[AutotuneMono] = "";
 801c3d0:	f8cb 100c 	str.w	r1, [fp, #12]
            shortModeNames[AutotuneMono] = "NT";
 801c3d4:	f8cc 700c 	str.w	r7, [ip, #12]
            knobParamNames[VocoderCh][3] = "BANDWIDTH";
 801c3d8:	f8c3 a070 	str.w	sl, [r3, #112]	; 0x70
            knobParamNames[Pitchshift][5] = "OFFSET";
 801c3dc:	f8c3 e0dc 	str.w	lr, [r3, #220]	; 0xdc
            knobParamNames[AutotuneMono][4] = "HYSTERESIS";


            modeNames[AutotunePoly] = "HARMONIZE";
            shortModeNames[AutotunePoly] = "AT";
 801c3e0:	4fa4      	ldr	r7, [pc, #656]	; (801c674 <initModeNames+0x3cc>)
            knobParamNames[AutotuneMono][1] = "AMOUNT";
 801c3e2:	f8c3 5130 	str.w	r5, [r3, #304]	; 0x130
            knobParamNames[VocoderCh][9] = "SPEED";
 801c3e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            knobParamNames[AutotunePoly][2] = "";
            knobParamNames[AutotunePoly][3] = "";
            knobParamNames[AutotunePoly][4] = "";


            modeNames[SamplerButtonPress] = "SAMPLER BP";
 801c3ea:	4da3      	ldr	r5, [pc, #652]	; (801c678 <initModeNames+0x3d0>)
            knobParamNames[VocoderCh][13] = "STEREO";
 801c3ec:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
            shortModeNames[SamplerButtonPress] = "SB";
 801c3f0:	f8df e354 	ldr.w	lr, [pc, #852]	; 801c748 <initModeNames+0x4a0>
            knobParamNames[SamplerButtonPress][4] = "CROSSFADE";



            modeNames[SamplerKeyboard] = "KEYSAMPLER";
            shortModeNames[SamplerKeyboard] = "KS";
 801c3f4:	4ca1      	ldr	r4, [pc, #644]	; (801c67c <initModeNames+0x3d4>)
            modeNames[AutotunePoly] = "HARMONIZE";
 801c3f6:	f8df a354 	ldr.w	sl, [pc, #852]	; 801c74c <initModeNames+0x4a4>
            knobParamNames[Pitchshift][3] = "FORMANT";
 801c3fa:	e9c3 9034 	strd	r9, r0, [r3, #208]	; 0xd0
            knobParamNames[AutotuneMono][0] = "PICKINESS";
 801c3fe:	48a0      	ldr	r0, [pc, #640]	; (801c680 <initModeNames+0x3d8>)
            knobParamNames[AutotuneMono][4] = "HYSTERESIS";
 801c400:	f8df 934c 	ldr.w	r9, [pc, #844]	; 801c750 <initModeNames+0x4a8>
            knobParamNames[Pitchshift][7] = "";
 801c404:	e9c3 1138 	strd	r1, r1, [r3, #224]	; 0xe0
            knobParamNames[Pitchshift][9] = "";
 801c408:	e9c3 113a 	strd	r1, r1, [r3, #232]	; 0xe8
            knobParamNames[AutotuneMono][0] = "PICKINESS";
 801c40c:	f8c3 012c 	str.w	r0, [r3, #300]	; 0x12c
            knobParamNames[AutotuneMono][3] = "LEAPALLOW";
 801c410:	f8c3 6138 	str.w	r6, [r3, #312]	; 0x138
            modeNamesDetails[SamplerButtonPress] = "PRESS BUTTON A";
 801c414:	4e9b      	ldr	r6, [pc, #620]	; (801c684 <initModeNames+0x3dc>)
            shortModeNames[AutotunePoly] = "AT";
 801c416:	f8cc 7010 	str.w	r7, [ip, #16]
            modeNames[SamplerButtonPress] = "SAMPLER BP";
 801c41a:	f8c8 5014 	str.w	r5, [r8, #20]
            modeNamesDetails[SamplerButtonPress] = "PRESS BUTTON A";
 801c41e:	f8cb 6014 	str.w	r6, [fp, #20]
            knobParamNames[AutotunePoly][0] = "PICKINESS";
 801c422:	f8c3 0190 	str.w	r0, [r3, #400]	; 0x190
            modeNamesDetails[SamplerKeyboard] = "KEY TO REC";
 801c426:	4f98      	ldr	r7, [pc, #608]	; (801c688 <initModeNames+0x3e0>)
            modeNames[SamplerKeyboard] = "KEYSAMPLER";
 801c428:	4898      	ldr	r0, [pc, #608]	; (801c68c <initModeNames+0x3e4>)
            numPages[SamplerKeyboard] = 2;
            knobParamNames[SamplerKeyboard][0] = "START";
            knobParamNames[SamplerKeyboard][1] = "LENGTH";
            knobParamNames[SamplerKeyboard][2] = "SPEED";
            knobParamNames[SamplerKeyboard][3] = "SPEEDMULT";
            knobParamNames[SamplerKeyboard][4] = "LOOP ON";
 801c42a:	4d99      	ldr	r5, [pc, #612]	; (801c690 <initModeNames+0x3e8>)
            knobParamNames[SamplerKeyboard][7] = "";
            knobParamNames[SamplerKeyboard][8] = "";
            knobParamNames[SamplerKeyboard][9] = "";


            modeNames[SamplerAutoGrab] = "AUTOSAMP";
 801c42c:	4e99      	ldr	r6, [pc, #612]	; (801c694 <initModeNames+0x3ec>)
            shortModeNames[SamplerButtonPress] = "SB";
 801c42e:	f8cc e014 	str.w	lr, [ip, #20]
            modeNames[SamplerKeyboard] = "KEYSAMPLER";
 801c432:	f8c8 0018 	str.w	r0, [r8, #24]
            shortModeNames[SamplerKeyboard] = "KS";
 801c436:	f8cc 4018 	str.w	r4, [ip, #24]
            knobParamNames[SamplerButtonPress][0] = "START";
 801c43a:	4897      	ldr	r0, [pc, #604]	; (801c698 <initModeNames+0x3f0>)
            knobParamNames[SamplerButtonPress][1] = "LENGTH";
 801c43c:	4c97      	ldr	r4, [pc, #604]	; (801c69c <initModeNames+0x3f4>)
            modeNamesDetails[SamplerKeyboard] = "KEY TO REC";
 801c43e:	f8cb 7018 	str.w	r7, [fp, #24]
            modeNames[SamplerAutoGrab] = "AUTOSAMP";
 801c442:	f8c8 601c 	str.w	r6, [r8, #28]
            knobParamNames[SamplerButtonPress][3] = "SPEEDMULT";
 801c446:	4f96      	ldr	r7, [pc, #600]	; (801c6a0 <initModeNames+0x3f8>)
            knobParamNames[SamplerKeyboard][6] = "VELO SENS";
 801c448:	f8df e308 	ldr.w	lr, [pc, #776]	; 801c754 <initModeNames+0x4ac>
            knobParamNames[SamplerKeyboard][4] = "LOOP ON";
 801c44c:	f8c3 5268 	str.w	r5, [r3, #616]	; 0x268
            shortModeNames[SamplerAutoGrab] = "AS";
            modeNamesDetails[SamplerAutoGrab] = "AUDIO TRIG'D";
            numPages[SamplerAutoGrab] = 2;
            knobParamNames[SamplerAutoGrab][0] = "THRESHOLD";
 801c450:	4e94      	ldr	r6, [pc, #592]	; (801c6a4 <initModeNames+0x3fc>)
            knobParamNames[SamplerButtonPress][4] = "CROSSFADE";
 801c452:	4d95      	ldr	r5, [pc, #596]	; (801c6a8 <initModeNames+0x400>)
            modeNamesDetails[AutotunePoly] = "";
 801c454:	f8cb 1010 	str.w	r1, [fp, #16]
            modeNames[AutotunePoly] = "HARMONIZE";
 801c458:	f8c8 a010 	str.w	sl, [r8, #16]
            knobParamNames[AutotuneMono][2] = "SPEED";
 801c45c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            knobParamNames[AutotunePoly][1] = "";
 801c460:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
            knobParamNames[AutotunePoly][2] = "";
 801c464:	f8c3 1198 	str.w	r1, [r3, #408]	; 0x198
            knobParamNames[AutotunePoly][3] = "";
 801c468:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
            knobParamNames[AutotunePoly][4] = "";
 801c46c:	f8c3 11a0 	str.w	r1, [r3, #416]	; 0x1a0
            knobParamNames[SamplerButtonPress][2] = "SPEED";
 801c470:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
            knobParamNames[SamplerKeyboard][2] = "SPEED";
 801c474:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
            knobParamNames[SamplerKeyboard][7] = "";
 801c478:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
            knobParamNames[SamplerKeyboard][8] = "";
 801c47c:	f8c3 1278 	str.w	r1, [r3, #632]	; 0x278
            knobParamNames[SamplerKeyboard][9] = "";
 801c480:	f8c3 127c 	str.w	r1, [r3, #636]	; 0x27c
            knobParamNames[AutotuneMono][4] = "HYSTERESIS";
 801c484:	f8c3 913c 	str.w	r9, [r3, #316]	; 0x13c
            knobParamNames[SamplerKeyboard][6] = "VELO SENS";
 801c488:	f8c3 e270 	str.w	lr, [r3, #624]	; 0x270
            shortModeNames[SamplerAutoGrab] = "AS";
 801c48c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801c758 <initModeNames+0x4b0>
            modeNamesDetails[SamplerAutoGrab] = "AUDIO TRIG'D";
 801c490:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 801c75c <initModeNames+0x4b4>
            knobParamNames[SamplerButtonPress][0] = "START";
 801c494:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
            knobParamNames[SamplerKeyboard][0] = "START";
 801c498:	f8c3 0258 	str.w	r0, [r3, #600]	; 0x258
            knobParamNames[SamplerButtonPress][1] = "LENGTH";
 801c49c:	f8c3 41f8 	str.w	r4, [r3, #504]	; 0x1f8
            knobParamNames[SamplerAutoGrab][1] = "WINDOW";
 801c4a0:	4882      	ldr	r0, [pc, #520]	; (801c6ac <initModeNames+0x404>)
            knobParamNames[SamplerKeyboard][1] = "LENGTH";
 801c4a2:	f8c3 425c 	str.w	r4, [r3, #604]	; 0x25c
            knobParamNames[SamplerButtonPress][3] = "SPEEDMULT";
 801c4a6:	f8c3 7200 	str.w	r7, [r3, #512]	; 0x200
            knobParamNames[SamplerAutoGrab][2] = "SPEED";
            knobParamNames[SamplerAutoGrab][3] = "CROSSFADE";
            knobParamNames[SamplerAutoGrab][4] = "";
            knobParamNames[SamplerAutoGrab][5] = "LEN RAND";
 801c4aa:	4c81      	ldr	r4, [pc, #516]	; (801c6b0 <initModeNames+0x408>)
            knobParamNames[SamplerKeyboard][3] = "SPEEDMULT";
 801c4ac:	f8c3 7264 	str.w	r7, [r3, #612]	; 0x264
            knobParamNames[SamplerButtonPress][4] = "CROSSFADE";
 801c4b0:	f8c3 5204 	str.w	r5, [r3, #516]	; 0x204
            knobParamNames[SamplerKeyboard][5] = "CROSSFADE";
 801c4b4:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
            knobParamNames[SamplerAutoGrab][2] = "SPEED";
 801c4b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
            knobParamNames[SamplerAutoGrab][3] = "CROSSFADE";
 801c4bc:	f8c3 52c8 	str.w	r5, [r3, #712]	; 0x2c8

            modeNames[BitCrusher] = "BITCRUSH";
            shortModeNames[BitCrusher] = "BC";
            modeNamesDetails[BitCrusher] = "AHH HALP ME";
            numPages[BitCrusher] = 2;
            knobParamNames[BitCrusher][0] = "QUALITY";
 801c4c0:	4a5c      	ldr	r2, [pc, #368]	; (801c634 <initModeNames+0x38c>)
            knobParamNames[Distortion][1] = "TILT";
 801c4c2:	4d5f      	ldr	r5, [pc, #380]	; (801c640 <initModeNames+0x398>)
            knobParamNames[SamplerAutoGrab][0] = "THRESHOLD";
 801c4c4:	f8c3 62bc 	str.w	r6, [r3, #700]	; 0x2bc
            modeNames[Wavefolder] = "WAVEFOLD";
 801c4c8:	4e7a      	ldr	r6, [pc, #488]	; (801c6b4 <initModeNames+0x40c>)
            shortModeNames[SamplerAutoGrab] = "AS";
 801c4ca:	f8cc 901c 	str.w	r9, [ip, #28]
            modeNamesDetails[SamplerAutoGrab] = "AUDIO TRIG'D";
 801c4ce:	f8cb a01c 	str.w	sl, [fp, #28]
            modeNames[Wavefolder] = "WAVEFOLD";
 801c4d2:	f8c8 6024 	str.w	r6, [r8, #36]	; 0x24
            knobParamNames[SamplerAutoGrab][6] = "SPD RAND";
 801c4d6:	f8df e288 	ldr.w	lr, [pc, #648]	; 801c760 <initModeNames+0x4b8>
            modeNames[Distortion] = "DISTORT";
 801c4da:	f8df 9288 	ldr.w	r9, [pc, #648]	; 801c764 <initModeNames+0x4bc>
            shortModeNames[Distortion] = "DT";
 801c4de:	4f76      	ldr	r7, [pc, #472]	; (801c6b8 <initModeNames+0x410>)
            knobParamNames[Distortion][1] = "TILT";
 801c4e0:	f8c3 5324 	str.w	r5, [r3, #804]	; 0x324
            knobParamNames[BitCrusher][0] = "QUALITY";
 801c4e4:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
            modeNamesDetails[Distortion] = "WITH EQ";
 801c4e8:	4d74      	ldr	r5, [pc, #464]	; (801c6bc <initModeNames+0x414>)
            knobParamNames[Distortion][2] = "MID GAIN";
 801c4ea:	4a75      	ldr	r2, [pc, #468]	; (801c6c0 <initModeNames+0x418>)
            knobParamNames[Distortion][3] = "MID FREQ";
 801c4ec:	f8df a278 	ldr.w	sl, [pc, #632]	; 801c768 <initModeNames+0x4c0>
            knobParamNames[SamplerAutoGrab][1] = "WINDOW";
 801c4f0:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
            knobParamNames[SamplerAutoGrab][5] = "LEN RAND";
 801c4f4:	f8c3 42d0 	str.w	r4, [r3, #720]	; 0x2d0
            shortModeNames[Wavefolder] = "WF";
 801c4f8:	4872      	ldr	r0, [pc, #456]	; (801c6c4 <initModeNames+0x41c>)
            modeNamesDetails[Wavefolder] = "SERGE STYLE";
 801c4fa:	4c73      	ldr	r4, [pc, #460]	; (801c6c8 <initModeNames+0x420>)
            knobParamNames[BitCrusher][1] = "SAMP RATIO";
 801c4fc:	4e73      	ldr	r6, [pc, #460]	; (801c6cc <initModeNames+0x424>)
            modeNames[Distortion] = "DISTORT";
 801c4fe:	f8c8 9020 	str.w	r9, [r8, #32]
            shortModeNames[Distortion] = "DT";
 801c502:	f8cc 7020 	str.w	r7, [ip, #32]
            modeNamesDetails[Distortion] = "WITH EQ";
 801c506:	f8cb 5020 	str.w	r5, [fp, #32]
            shortModeNames[Wavefolder] = "WF";
 801c50a:	f8cc 0024 	str.w	r0, [ip, #36]	; 0x24
            modeNamesDetails[Wavefolder] = "SERGE STYLE";
 801c50e:	f8cb 4024 	str.w	r4, [fp, #36]	; 0x24
            knobParamNames[Distortion][0] = "PRE GAIN";
 801c512:	486f      	ldr	r0, [pc, #444]	; (801c6d0 <initModeNames+0x428>)
            knobParamNames[Distortion][4] = "POST GAIN";
 801c514:	4c6f      	ldr	r4, [pc, #444]	; (801c6d4 <initModeNames+0x42c>)
            knobParamNames[SamplerAutoGrab][6] = "SPD RAND";
 801c516:	f8c3 e2d4 	str.w	lr, [r3, #724]	; 0x2d4
            knobParamNames[Wavefolder][1] = "OFFSET1";
 801c51a:	f8df 9250 	ldr.w	r9, [pc, #592]	; 801c76c <initModeNames+0x4c4>
            knobParamNames[Wavefolder][0] = "GAIN";
 801c51e:	f8df e250 	ldr.w	lr, [pc, #592]	; 801c770 <initModeNames+0x4c8>
            knobParamNames[Wavefolder][2] = "OFFSET2";
 801c522:	4f6d      	ldr	r7, [pc, #436]	; (801c6d8 <initModeNames+0x430>)
            modeNames[BitCrusher] = "BITCRUSH";
 801c524:	4d6d      	ldr	r5, [pc, #436]	; (801c6dc <initModeNames+0x434>)
            knobParamNames[Distortion][2] = "MID GAIN";
 801c526:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
            knobParamNames[Distortion][3] = "MID FREQ";
 801c52a:	f8c3 a32c 	str.w	sl, [r3, #812]	; 0x32c
            shortModeNames[BitCrusher] = "BC";
 801c52e:	4a6c      	ldr	r2, [pc, #432]	; (801c6e0 <initModeNames+0x438>)
            modeNamesDetails[BitCrusher] = "AHH HALP ME";
 801c530:	f8df a240 	ldr.w	sl, [pc, #576]	; 801c774 <initModeNames+0x4cc>
            knobParamNames[BitCrusher][1] = "SAMP RATIO";
 801c534:	f8c3 63ec 	str.w	r6, [r3, #1004]	; 0x3ec
            knobParamNames[BitCrusher][8] = "";
            knobParamNames[BitCrusher][9] = "";

            modeNames[Delay] = "DELAY";
            shortModeNames[Delay] = "DL";
            modeNamesDetails[Delay] = "STEREO";
 801c538:	4e4c      	ldr	r6, [pc, #304]	; (801c66c <initModeNames+0x3c4>)
            modeNames[BitCrusher] = "BITCRUSH";
 801c53a:	f8c8 5028 	str.w	r5, [r8, #40]	; 0x28
            shortModeNames[BitCrusher] = "BC";
 801c53e:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
            modeNamesDetails[BitCrusher] = "AHH HALP ME";
 801c542:	f8cb a028 	str.w	sl, [fp, #40]	; 0x28
            knobParamNames[SamplerAutoGrab][4] = "";
 801c546:	f8c3 12cc 	str.w	r1, [r3, #716]	; 0x2cc
            knobParamNames[SamplerAutoGrab][7] = "";
 801c54a:	f8c3 12d8 	str.w	r1, [r3, #728]	; 0x2d8
            knobParamNames[SamplerAutoGrab][8] = "";
 801c54e:	f8c3 12dc 	str.w	r1, [r3, #732]	; 0x2dc
            knobParamNames[SamplerAutoGrab][9] = "";
 801c552:	f8c3 12e0 	str.w	r1, [r3, #736]	; 0x2e0
            knobParamNames[Wavefolder][4] = "";
 801c556:	f8c3 1394 	str.w	r1, [r3, #916]	; 0x394
            knobParamNames[Wavefolder][0] = "GAIN";
 801c55a:	f8c3 e384 	str.w	lr, [r3, #900]	; 0x384
            knobParamNames[Wavefolder][1] = "OFFSET1";
 801c55e:	f8c3 9388 	str.w	r9, [r3, #904]	; 0x388
            knobParamNames[Wavefolder][2] = "OFFSET2";
 801c562:	f8c3 738c 	str.w	r7, [r3, #908]	; 0x38c
            knobParamNames[Distortion][0] = "PRE GAIN";
 801c566:	f8c3 0320 	str.w	r0, [r3, #800]	; 0x320
            knobParamNames[Distortion][4] = "POST GAIN";
 801c56a:	f8c3 4330 	str.w	r4, [r3, #816]	; 0x330
            knobParamNames[Wavefolder][3] = "POST GAIN";
 801c56e:	f8c3 4390 	str.w	r4, [r3, #912]	; 0x390
            modeNamesDetails[Delay] = "STEREO";
 801c572:	f8cb 602c 	str.w	r6, [fp, #44]	; 0x2c
            knobParamNames[BitCrusher][4] = "POST GAIN";
 801c576:	f8c3 43f8 	str.w	r4, [r3, #1016]	; 0x3f8
            knobParamNames[Delay][0] = "DELAY_L";
            knobParamNames[Delay][1] = "DELAY_R";
            knobParamNames[Delay][2] = "HIGHPASS";
            knobParamNames[Delay][3] = "LOWPASS";
            knobParamNames[Delay][4] = "FEEDBACK";
            knobParamNames[Delay][5] = "POST GAIN";
 801c57a:	f8c3 4460 	str.w	r4, [r3, #1120]	; 0x460
            knobParamNames[Delay][6] = "POST GAIN";
 801c57e:	f8c3 4464 	str.w	r4, [r3, #1124]	; 0x464
            knobParamNames[Delay][7] = "POST GAIN";
 801c582:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
            knobParamNames[Delay][8] = "POST GAIN";
 801c586:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
            knobParamNames[Delay][1] = "DELAY_R";
 801c58a:	4e56      	ldr	r6, [pc, #344]	; (801c6e4 <initModeNames+0x43c>)
            numPages[Reverb] = 1;
            knobParamNames[Reverb][0] = "SIZE";
            knobParamNames[Reverb][1] = "FB LOPASS";
            knobParamNames[Reverb][2] = "IN HIPASS";
            knobParamNames[Reverb][3] = "IN LOPASS";
            knobParamNames[Reverb][4] = "FB GAIN";
 801c58c:	4c56      	ldr	r4, [pc, #344]	; (801c6e8 <initModeNames+0x440>)
            knobParamNames[BitCrusher][2] = "ROUNDING";
 801c58e:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 801c778 <initModeNames+0x4d0>
            knobParamNames[BitCrusher][3] = "OPERATION";
 801c592:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 801c77c <initModeNames+0x4d4>
            modeNames[Delay] = "DELAY";
 801c596:	4f55      	ldr	r7, [pc, #340]	; (801c6ec <initModeNames+0x444>)
            shortModeNames[Delay] = "DL";
 801c598:	4d55      	ldr	r5, [pc, #340]	; (801c6f0 <initModeNames+0x448>)
            knobParamNames[Delay][0] = "DELAY_L";
 801c59a:	4a56      	ldr	r2, [pc, #344]	; (801c6f4 <initModeNames+0x44c>)
            knobParamNames[BitCrusher][5] = "PRE GAIN";
 801c59c:	f8c3 03fc 	str.w	r0, [r3, #1020]	; 0x3fc
            knobParamNames[Delay][1] = "DELAY_R";
 801c5a0:	f8c3 6450 	str.w	r6, [r3, #1104]	; 0x450
            knobParamNames[Reverb][2] = "IN HIPASS";
 801c5a4:	4854      	ldr	r0, [pc, #336]	; (801c6f8 <initModeNames+0x450>)
            knobParamNames[Reverb][1] = "FB LOPASS";
 801c5a6:	4e55      	ldr	r6, [pc, #340]	; (801c6fc <initModeNames+0x454>)
            knobParamNames[Reverb][4] = "FB GAIN";
 801c5a8:	f8c3 44c0 	str.w	r4, [r3, #1216]	; 0x4c0
            knobParamNames[Delay][3] = "LOWPASS";
 801c5ac:	4c54      	ldr	r4, [pc, #336]	; (801c700 <initModeNames+0x458>)
            modeNames[Delay] = "DELAY";
 801c5ae:	f8c8 702c 	str.w	r7, [r8, #44]	; 0x2c
            shortModeNames[Delay] = "DL";
 801c5b2:	f8cc 502c 	str.w	r5, [ip, #44]	; 0x2c
            modeNames[Reverb] = "REVERB1";
 801c5b6:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 801c780 <initModeNames+0x4d8>
            knobParamNames[BitCrusher][2] = "ROUNDING";
 801c5ba:	f8c3 e3f0 	str.w	lr, [r3, #1008]	; 0x3f0
            knobParamNames[BitCrusher][3] = "OPERATION";
 801c5be:	f8c3 93f4 	str.w	r9, [r3, #1012]	; 0x3f4
            knobParamNames[Reverb][3] = "IN LOPASS";
 801c5c2:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 801c784 <initModeNames+0x4dc>
            modeNamesDetails[Reverb] = "DATTORRO ALG";
 801c5c6:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 801c788 <initModeNames+0x4e0>


            modeNames[Reverb2] = "REVERB2";
 801c5ca:	4f4e      	ldr	r7, [pc, #312]	; (801c704 <initModeNames+0x45c>)
            shortModeNames[Reverb2] = "RV";
            modeNamesDetails[Reverb2] = "NREVERB ALG";
 801c5cc:	4d4e      	ldr	r5, [pc, #312]	; (801c708 <initModeNames+0x460>)
            knobParamNames[Delay][0] = "DELAY_L";
 801c5ce:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            knobParamNames[Reverb][1] = "FB LOPASS";
 801c5d2:	f8c3 64b4 	str.w	r6, [r3, #1204]	; 0x4b4
            knobParamNames[Delay][2] = "HIGHPASS";
 801c5d6:	4a4d      	ldr	r2, [pc, #308]	; (801c70c <initModeNames+0x464>)
            shortModeNames[Reverb] = "RV";
 801c5d8:	4e4d      	ldr	r6, [pc, #308]	; (801c710 <initModeNames+0x468>)
            knobParamNames[Reverb][2] = "IN HIPASS";
 801c5da:	f8c3 04b8 	str.w	r0, [r3, #1208]	; 0x4b8
            knobParamNames[Delay][3] = "LOWPASS";
 801c5de:	f8c3 4458 	str.w	r4, [r3, #1112]	; 0x458
            knobParamNames[Reverb][0] = "SIZE";
 801c5e2:	484c      	ldr	r0, [pc, #304]	; (801c714 <initModeNames+0x46c>)
            knobParamNames[Delay][4] = "FEEDBACK";
 801c5e4:	4c4c      	ldr	r4, [pc, #304]	; (801c718 <initModeNames+0x470>)
            modeNames[Reverb] = "REVERB1";
 801c5e6:	f8c8 a030 	str.w	sl, [r8, #48]	; 0x30
            modeNamesDetails[Reverb] = "DATTORRO ALG";
 801c5ea:	f8cb 9030 	str.w	r9, [fp, #48]	; 0x30
            modeNames[Reverb2] = "REVERB2";
 801c5ee:	f8c8 7034 	str.w	r7, [r8, #52]	; 0x34
            modeNamesDetails[Reverb2] = "NREVERB ALG";
 801c5f2:	f8cb 5034 	str.w	r5, [fp, #52]	; 0x34
 801c5f6:	e0c9      	b.n	801c78c <initModeNames+0x4e4>
 801c5f8:	20018978 	.word	0x20018978
 801c5fc:	20018798 	.word	0x20018798
 801c600:	2001887c 	.word	0x2001887c
 801c604:	08145200 	.word	0x08145200
 801c608:	200189a4 	.word	0x200189a4
 801c60c:	08145204 	.word	0x08145204
 801c610:	0814521c 	.word	0x0814521c
 801c614:	0814525c 	.word	0x0814525c
 801c618:	081451fc 	.word	0x081451fc
 801c61c:	08145268 	.word	0x08145268
 801c620:	08145228 	.word	0x08145228
 801c624:	08145250 	.word	0x08145250
 801c628:	08145850 	.word	0x08145850
 801c62c:	0814526c 	.word	0x0814526c
 801c630:	08145288 	.word	0x08145288
 801c634:	08145214 	.word	0x08145214
 801c638:	08145234 	.word	0x08145234
 801c63c:	08145244 	.word	0x08145244
 801c640:	0814523c 	.word	0x0814523c
 801c644:	081452a4 	.word	0x081452a4
 801c648:	081452bc 	.word	0x081452bc
 801c64c:	081452c0 	.word	0x081452c0
 801c650:	081452c8 	.word	0x081452c8
 801c654:	081452d8 	.word	0x081452d8
 801c658:	081452e0 	.word	0x081452e0
 801c65c:	081452f0 	.word	0x081452f0
 801c660:	0814530c 	.word	0x0814530c
 801c664:	08145308 	.word	0x08145308
 801c668:	08145280 	.word	0x08145280
 801c66c:	0814529c 	.word	0x0814529c
 801c670:	08145310 	.word	0x08145310
 801c674:	08145334 	.word	0x08145334
 801c678:	08145338 	.word	0x08145338
 801c67c:	0814538c 	.word	0x0814538c
 801c680:	081452fc 	.word	0x081452fc
 801c684:	08145348 	.word	0x08145348
 801c688:	08145390 	.word	0x08145390
 801c68c:	08145380 	.word	0x08145380
 801c690:	0814539c 	.word	0x0814539c
 801c694:	081453b0 	.word	0x081453b0
 801c698:	08145358 	.word	0x08145358
 801c69c:	08145360 	.word	0x08145360
 801c6a0:	08145368 	.word	0x08145368
 801c6a4:	081453d0 	.word	0x081453d0
 801c6a8:	08145374 	.word	0x08145374
 801c6ac:	081453dc 	.word	0x081453dc
 801c6b0:	081453e4 	.word	0x081453e4
 801c6b4:	08145440 	.word	0x08145440
 801c6b8:	08145404 	.word	0x08145404
 801c6bc:	08145408 	.word	0x08145408
 801c6c0:	0814541c 	.word	0x0814541c
 801c6c4:	0814544c 	.word	0x0814544c
 801c6c8:	08145450 	.word	0x08145450
 801c6cc:	08145488 	.word	0x08145488
 801c6d0:	08145410 	.word	0x08145410
 801c6d4:	08145434 	.word	0x08145434
 801c6d8:	08145464 	.word	0x08145464
 801c6dc:	0814546c 	.word	0x0814546c
 801c6e0:	08145478 	.word	0x08145478
 801c6e4:	081454c0 	.word	0x081454c0
 801c6e8:	08145530 	.word	0x08145530
 801c6ec:	081454ac 	.word	0x081454ac
 801c6f0:	081454b4 	.word	0x081454b4
 801c6f4:	081454b8 	.word	0x081454b8
 801c6f8:	08145518 	.word	0x08145518
 801c6fc:	0814550c 	.word	0x0814550c
 801c700:	081454d4 	.word	0x081454d4
 801c704:	08145538 	.word	0x08145538
 801c708:	08145540 	.word	0x08145540
 801c70c:	081454c8 	.word	0x081454c8
 801c710:	081454f0 	.word	0x081454f0
 801c714:	08145504 	.word	0x08145504
 801c718:	081454dc 	.word	0x081454dc
 801c71c:	20018930 	.word	0x20018930
 801c720:	03020100 	.word	0x03020100
 801c724:	0814520c 	.word	0x0814520c
 801c728:	20018750 	.word	0x20018750
 801c72c:	081451f0 	.word	0x081451f0
 801c730:	200188c0 	.word	0x200188c0
 801c734:	081452b0 	.word	0x081452b0
 801c738:	08145274 	.word	0x08145274
 801c73c:	08145294 	.word	0x08145294
 801c740:	081452d0 	.word	0x081452d0
 801c744:	081452e8 	.word	0x081452e8
 801c748:	08145344 	.word	0x08145344
 801c74c:	08145328 	.word	0x08145328
 801c750:	0814531c 	.word	0x0814531c
 801c754:	081453a4 	.word	0x081453a4
 801c758:	081453bc 	.word	0x081453bc
 801c75c:	081453c0 	.word	0x081453c0
 801c760:	081453f0 	.word	0x081453f0
 801c764:	081453fc 	.word	0x081453fc
 801c768:	08145428 	.word	0x08145428
 801c76c:	0814545c 	.word	0x0814545c
 801c770:	08145420 	.word	0x08145420
 801c774:	0814547c 	.word	0x0814547c
 801c778:	08145494 	.word	0x08145494
 801c77c:	081454a0 	.word	0x081454a0
 801c780:	081454e8 	.word	0x081454e8
 801c784:	08145524 	.word	0x08145524
 801c788:	081454f4 	.word	0x081454f4
            knobParamNames[BitCrusher][6] = "";
 801c78c:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
            knobParamNames[BitCrusher][7] = "";
 801c790:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
            knobParamNames[BitCrusher][8] = "";
 801c794:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
            knobParamNames[BitCrusher][9] = "";
 801c798:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
            knobParamNames[Delay][9] = "";
 801c79c:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
            knobParamNames[Reverb][3] = "IN LOPASS";
 801c7a0:	f8c3 e4bc 	str.w	lr, [r3, #1212]	; 0x4bc
            knobParamNames[Delay][2] = "HIGHPASS";
 801c7a4:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
            knobParamNames[Delay][4] = "FEEDBACK";
 801c7a8:	f8c3 445c 	str.w	r4, [r3, #1116]	; 0x45c
            knobParamNames[Reverb][0] = "SIZE";
 801c7ac:	f8c3 04b0 	str.w	r0, [r3, #1200]	; 0x4b0
            numPages[Reverb2] = 1;
            knobParamNames[Reverb2][0] = "SIZE";
            knobParamNames[Reverb2][1] = "LOWPASS";
            knobParamNames[Reverb2][2] = "HIGHPASS";
            knobParamNames[Reverb2][3] = "PEAK_FREQ";
 801c7b0:	f8df e2fc 	ldr.w	lr, [pc, #764]	; 801cab0 <initModeNames+0x808>

            modeNames[LivingString] = "STRING1";
            shortModeNames[LivingString] = "LS";
            modeNamesDetails[LivingString] = "SYMP STRING";
            numPages[LivingString] = 3;
            knobParamNames[LivingString][0] = "FREQ1";
 801c7b4:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 801cab4 <initModeNames+0x80c>
            knobParamNames[LivingString][5] = "PREP POS";
            knobParamNames[LivingString][6] = "PREP FORCE";
            knobParamNames[LivingString][7] = "LET RING";
            knobParamNames[LivingString][8] = "";
            knobParamNames[LivingString][9] = "";
            knobParamNames[LivingString][10] = "FREQ2";
 801c7b8:	4f8d      	ldr	r7, [pc, #564]	; (801c9f0 <initModeNames+0x748>)
            knobParamNames[LivingString][11] = "FREQ3";
 801c7ba:	4d8e      	ldr	r5, [pc, #568]	; (801c9f4 <initModeNames+0x74c>)
            knobParamNames[Reverb2][1] = "LOWPASS";
 801c7bc:	4c8e      	ldr	r4, [pc, #568]	; (801c9f8 <initModeNames+0x750>)
            knobParamNames[LivingString][12] = "FREQ4";
 801c7be:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 801cab8 <initModeNames+0x810>
            shortModeNames[Reverb2] = "RV";
 801c7c2:	e9cc 660c 	strd	r6, r6, [ip, #48]	; 0x30
            knobParamNames[Reverb2][0] = "SIZE";
 801c7c6:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
            knobParamNames[Reverb2][2] = "HIGHPASS";
 801c7ca:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
            knobParamNames[Reverb2][4] = "PEAK_GAIN";
 801c7ce:	4a8b      	ldr	r2, [pc, #556]	; (801c9fc <initModeNames+0x754>)
            knobParamNames[Reverb2][3] = "PEAK_FREQ";
 801c7d0:	f8c3 e520 	str.w	lr, [r3, #1312]	; 0x520
            knobParamNames[Reverb2][4] = "PEAK_GAIN";
 801c7d4:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
            knobParamNames[LivingString][4] = "PICK POS";
 801c7d8:	4a89      	ldr	r2, [pc, #548]	; (801ca00 <initModeNames+0x758>)
            knobParamNames[LivingString][13] = "FREQ5";
            knobParamNames[LivingString][14] = "FREQ6";
 801c7da:	f8df e2e0 	ldr.w	lr, [pc, #736]	; 801cabc <initModeNames+0x814>
            knobParamNames[LivingString][4] = "PICK POS";
 801c7de:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588
            modeNames[LivingString] = "STRING1";
 801c7e2:	4a88      	ldr	r2, [pc, #544]	; (801ca04 <initModeNames+0x75c>)
            knobParamNames[LivingString][13] = "FREQ5";
 801c7e4:	4e88      	ldr	r6, [pc, #544]	; (801ca08 <initModeNames+0x760>)
            modeNames[LivingString] = "STRING1";
 801c7e6:	f8c8 2038 	str.w	r2, [r8, #56]	; 0x38
            knobParamNames[LivingString][14] = "FREQ6";
 801c7ea:	f8c3 e5b0 	str.w	lr, [r3, #1456]	; 0x5b0
            knobParamNames[LivingString][3] = "DAMPING";
 801c7ee:	4a87      	ldr	r2, [pc, #540]	; (801ca0c <initModeNames+0x764>)

            modeNames[LivingStringSynth] = "STRING2";
            shortModeNames[LivingStringSynth] = "SS";
            modeNamesDetails[LivingStringSynth] = "STRING SYNTH";
 801c7f0:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 801cac0 <initModeNames+0x818>
            knobParamNames[Reverb2][1] = "LOWPASS";
 801c7f4:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
            modeNamesDetails[LivingStringSynth] = "STRING SYNTH";
 801c7f8:	f8cb e03c 	str.w	lr, [fp, #60]	; 0x3c
            numPages[LivingStringSynth] = 2;
            knobParamNames[LivingStringSynth][0] = "PLUCK VOL";
 801c7fc:	4c84      	ldr	r4, [pc, #528]	; (801ca10 <initModeNames+0x768>)
            knobParamNames[LivingString][0] = "FREQ1";
 801c7fe:	f8c3 9578 	str.w	r9, [r3, #1400]	; 0x578
            knobParamNames[LivingString][10] = "FREQ2";
 801c802:	f8c3 75a0 	str.w	r7, [r3, #1440]	; 0x5a0
            knobParamNames[LivingStringSynth][1] = "PLUCK TONE";
 801c806:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 801cac4 <initModeNames+0x81c>
            shortModeNames[LivingString] = "LS";
 801c80a:	4f82      	ldr	r7, [pc, #520]	; (801ca14 <initModeNames+0x76c>)
            knobParamNames[LivingString][11] = "FREQ3";
 801c80c:	f8c3 55a4 	str.w	r5, [r3, #1444]	; 0x5a4
            modeNames[LivingStringSynth] = "STRING2";
 801c810:	4881      	ldr	r0, [pc, #516]	; (801ca18 <initModeNames+0x770>)
            modeNamesDetails[LivingString] = "SYMP STRING";
 801c812:	4d82      	ldr	r5, [pc, #520]	; (801ca1c <initModeNames+0x774>)
            knobParamNames[LivingString][13] = "FREQ5";
 801c814:	f8c3 65ac 	str.w	r6, [r3, #1452]	; 0x5ac
            numPages[Vocoder] = 2;
 801c818:	f8df e2ac 	ldr.w	lr, [pc, #684]	; 801cac8 <initModeNames+0x820>
            shortModeNames[LivingStringSynth] = "SS";
 801c81c:	4e80      	ldr	r6, [pc, #512]	; (801ca20 <initModeNames+0x778>)
            knobParamNames[LivingString][3] = "DAMPING";
 801c81e:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
            knobParamNames[LivingStringSynth][2] = "DECAY";
            knobParamNames[LivingStringSynth][3] = "DAMPING";
 801c822:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
            numPages[Vocoder] = 2;
 801c826:	4a7f      	ldr	r2, [pc, #508]	; (801ca24 <initModeNames+0x77c>)
            shortModeNames[LivingString] = "LS";
 801c828:	f8cc 7038 	str.w	r7, [ip, #56]	; 0x38
            modeNamesDetails[LivingString] = "SYMP STRING";
 801c82c:	f8cb 5038 	str.w	r5, [fp, #56]	; 0x38
            knobParamNames[LivingString][5] = "PREP POS";
 801c830:	4f7d      	ldr	r7, [pc, #500]	; (801ca28 <initModeNames+0x780>)
            knobParamNames[LivingString][6] = "PREP FORCE";
 801c832:	4d7e      	ldr	r5, [pc, #504]	; (801ca2c <initModeNames+0x784>)
            modeNames[LivingStringSynth] = "STRING2";
 801c834:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
            shortModeNames[LivingStringSynth] = "SS";
 801c838:	f8cc 603c 	str.w	r6, [ip, #60]	; 0x3c
            knobParamNames[LivingString][7] = "LET RING";
 801c83c:	487c      	ldr	r0, [pc, #496]	; (801ca30 <initModeNames+0x788>)
            knobParamNames[LivingString][2] = "DECAY";
 801c83e:	4e7d      	ldr	r6, [pc, #500]	; (801ca34 <initModeNames+0x78c>)
            numPages[Vocoder] = 2;
 801c840:	f8c2 e000 	str.w	lr, [r2]
            knobParamNames[LivingStringSynth][0] = "PLUCK VOL";
 801c844:	f8c3 45dc 	str.w	r4, [r3, #1500]	; 0x5dc
            numPages[Vocoder] = 2;
 801c848:	f8df e280 	ldr.w	lr, [pc, #640]	; 801cacc <initModeNames+0x824>
            knobParamNames[LivingString][1] = "DETUNE";
 801c84c:	4c7a      	ldr	r4, [pc, #488]	; (801ca38 <initModeNames+0x790>)
            knobParamNames[LivingStringSynth][1] = "PLUCK TONE";
 801c84e:	f8c3 95e0 	str.w	r9, [r3, #1504]	; 0x5e0
            numPages[Vocoder] = 2;
 801c852:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801cad0 <initModeNames+0x828>
 801c856:	f8c2 e004 	str.w	lr, [r2, #4]
 801c85a:	f8c2 900c 	str.w	r9, [r2, #12]
            knobParamNames[LivingString][8] = "";
 801c85e:	f8c3 1598 	str.w	r1, [r3, #1432]	; 0x598
            knobParamNames[LivingString][9] = "";
 801c862:	f8c3 159c 	str.w	r1, [r3, #1436]	; 0x59c
            knobParamNames[LivingString][12] = "FREQ4";
 801c866:	f8c3 a5a8 	str.w	sl, [r3, #1448]	; 0x5a8
            knobParamNames[LivingString][1] = "DETUNE";
 801c86a:	f8c3 457c 	str.w	r4, [r3, #1404]	; 0x57c
            knobParamNames[LivingString][2] = "DECAY";
 801c86e:	f8c3 6580 	str.w	r6, [r3, #1408]	; 0x580
            knobParamNames[LivingStringSynth][2] = "DECAY";
 801c872:	f8c3 65e4 	str.w	r6, [r3, #1508]	; 0x5e4
            knobParamNames[LivingString][5] = "PREP POS";
 801c876:	f8c3 758c 	str.w	r7, [r3, #1420]	; 0x58c
            knobParamNames[LivingString][6] = "PREP FORCE";
 801c87a:	f8c3 5590 	str.w	r5, [r3, #1424]	; 0x590
            knobParamNames[LivingString][7] = "LET RING";
 801c87e:	f8c3 0594 	str.w	r0, [r3, #1428]	; 0x594
            numPages[Vocoder] = 2;
 801c882:	f8c2 e008 	str.w	lr, [r2, #8]
            knobParamNames[LivingStringSynth][4] = "PICK_POS";
            knobParamNames[LivingStringSynth][5] = "PREP POS";
            knobParamNames[LivingStringSynth][6] = "PREP FORCE";
            knobParamNames[LivingStringSynth][7] = "LET RING";
 801c886:	f8c3 05f8 	str.w	r0, [r3, #1528]	; 0x5f8
            knobParamNames[ClassicSynth][12] = "F_SUSTAIN";
            knobParamNames[ClassicSynth][13] = "F_RELEASE";
            knobParamNames[ClassicSynth][14] = "F_LEAK";
            knobParamNames[ClassicSynth][15] = "F_AMOUNT";
            knobParamNames[ClassicSynth][16] = "SAW/PULSE";
            knobParamNames[ClassicSynth][17] = "";
 801c88a:	f8c3 1684 	str.w	r1, [r3, #1668]	; 0x684
            knobParamNames[ClassicSynth][0] = "VOLUME";
 801c88e:	486b      	ldr	r0, [pc, #428]	; (801ca3c <initModeNames+0x794>)
            knobParamNames[ClassicSynth][18] = "";
 801c890:	f8c3 1688 	str.w	r1, [r3, #1672]	; 0x688
            knobParamNames[ClassicSynth][19] = "";
 801c894:	f8c3 168c 	str.w	r1, [r3, #1676]	; 0x68c
            numPages[ClassicSynth] = 4;
 801c898:	f04f 0104 	mov.w	r1, #4
            knobParamNames[LivingStringSynth][4] = "PICK_POS";
 801c89c:	f8df 9234 	ldr.w	r9, [pc, #564]	; 801cad4 <initModeNames+0x82c>
            numPages[ClassicSynth] = 4;
 801c8a0:	7411      	strb	r1, [r2, #16]
            knobParamNames[ClassicSynth][0] = "VOLUME";
 801c8a2:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
            knobParamNames[LivingStringSynth][8] = "FB LEVEL";
 801c8a6:	4a66      	ldr	r2, [pc, #408]	; (801ca40 <initModeNames+0x798>)
            knobParamNames[ClassicSynth][1] = "LOWPASS";
 801c8a8:	4853      	ldr	r0, [pc, #332]	; (801c9f8 <initModeNames+0x750>)
            knobParamNames[LivingStringSynth][4] = "PICK_POS";
 801c8aa:	f8c3 95ec 	str.w	r9, [r3, #1516]	; 0x5ec
            knobParamNames[LivingStringSynth][5] = "PREP POS";
 801c8ae:	f8c3 75f0 	str.w	r7, [r3, #1520]	; 0x5f0
            knobParamNames[ClassicSynth][4] = "FILTER Q";
 801c8b2:	f8df a224 	ldr.w	sl, [pc, #548]	; 801cad8 <initModeNames+0x830>
            knobParamNames[LivingStringSynth][6] = "PREP FORCE";
 801c8b6:	f8c3 55f4 	str.w	r5, [r3, #1524]	; 0x5f4
            knobParamNames[ClassicSynth][10] = "F_ATTACK";
 801c8ba:	f8df 9220 	ldr.w	r9, [pc, #544]	; 801cadc <initModeNames+0x834>
            knobParamNames[ClassicSynth][11] = "F_DECAY";
 801c8be:	f8df e220 	ldr.w	lr, [pc, #544]	; 801cae0 <initModeNames+0x838>
            knobParamNames[ClassicSynth][12] = "F_SUSTAIN";
 801c8c2:	4f60      	ldr	r7, [pc, #384]	; (801ca44 <initModeNames+0x79c>)
            knobParamNames[ClassicSynth][1] = "LOWPASS";
 801c8c4:	f8c3 0644 	str.w	r0, [r3, #1604]	; 0x644
            knobParamNames[ClassicSynth][3] = "DETUNE";
 801c8c8:	f8c3 464c 	str.w	r4, [r3, #1612]	; 0x64c
            knobParamNames[ClassicSynth][13] = "F_RELEASE";
 801c8cc:	485e      	ldr	r0, [pc, #376]	; (801ca48 <initModeNames+0x7a0>)
            knobParamNames[ClassicSynth][14] = "F_LEAK";
 801c8ce:	4d5f      	ldr	r5, [pc, #380]	; (801ca4c <initModeNames+0x7a4>)
            knobParamNames[ClassicSynth][6] = "DECAY";
 801c8d0:	f8c3 6658 	str.w	r6, [r3, #1624]	; 0x658
            knobParamNames[ClassicSynth][15] = "F_AMOUNT";
 801c8d4:	4c5e      	ldr	r4, [pc, #376]	; (801ca50 <initModeNames+0x7a8>)
            knobParamNames[ClassicSynth][16] = "SAW/PULSE";
 801c8d6:	495f      	ldr	r1, [pc, #380]	; (801ca54 <initModeNames+0x7ac>)
            knobParamNames[LivingStringSynth][8] = "FB LEVEL";
 801c8d8:	f8c3 25fc 	str.w	r2, [r3, #1532]	; 0x5fc
            knobParamNames[ClassicSynth][2] = "KEYFOLLOW";
 801c8dc:	4e5e      	ldr	r6, [pc, #376]	; (801ca58 <initModeNames+0x7b0>)
            modeNames[ClassicSynth] = "POLYSYNTH";
 801c8de:	4a5f      	ldr	r2, [pc, #380]	; (801ca5c <initModeNames+0x7b4>)
            knobParamNames[ClassicSynth][2] = "KEYFOLLOW";
 801c8e0:	f8c3 6648 	str.w	r6, [r3, #1608]	; 0x648
            modeNames[ClassicSynth] = "POLYSYNTH";
 801c8e4:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
            knobParamNames[ClassicSynth][4] = "FILTER Q";
 801c8e8:	f8c3 a650 	str.w	sl, [r3, #1616]	; 0x650
            knobParamNames[ClassicSynth][10] = "F_ATTACK";
 801c8ec:	f8c3 9668 	str.w	r9, [r3, #1640]	; 0x668
            modeNamesDetails[ClassicSynth] = "VCO+VCF";
 801c8f0:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 801cae4 <initModeNames+0x83c>

            modeNames[Rhodes] = "RHODES";
 801c8f4:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 801cae8 <initModeNames+0x840>
            knobParamNames[ClassicSynth][11] = "F_DECAY";
 801c8f8:	f8c3 e66c 	str.w	lr, [r3, #1644]	; 0x66c
            knobParamNames[ClassicSynth][12] = "F_SUSTAIN";
 801c8fc:	f8c3 7670 	str.w	r7, [r3, #1648]	; 0x670
            shortModeNames[Rhodes] = "RD";
 801c900:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 801caec <initModeNames+0x844>
            modeNamesDetails[Rhodes] = "DARK";
 801c904:	4f56      	ldr	r7, [pc, #344]	; (801ca60 <initModeNames+0x7b8>)
            knobParamNames[ClassicSynth][13] = "F_RELEASE";
 801c906:	f8c3 0674 	str.w	r0, [r3, #1652]	; 0x674
            knobParamNames[ClassicSynth][14] = "F_LEAK";
 801c90a:	f8c3 5678 	str.w	r5, [r3, #1656]	; 0x678
            knobParamNames[LivingStringSynth][9] = "RELEASE";
 801c90e:	4855      	ldr	r0, [pc, #340]	; (801ca64 <initModeNames+0x7bc>)
            knobParamNames[ClassicSynth][5] = "ATTACK";
 801c910:	4d55      	ldr	r5, [pc, #340]	; (801ca68 <initModeNames+0x7c0>)
            knobParamNames[ClassicSynth][15] = "F_AMOUNT";
 801c912:	f8c3 467c 	str.w	r4, [r3, #1660]	; 0x67c
            knobParamNames[ClassicSynth][16] = "SAW/PULSE";
 801c916:	f8c3 1680 	str.w	r1, [r3, #1664]	; 0x680
            knobParamNames[ClassicSynth][7] = "SUSTAIN";
 801c91a:	4c54      	ldr	r4, [pc, #336]	; (801ca6c <initModeNames+0x7c4>)
            knobParamNames[ClassicSynth][9] = "LEAK";
 801c91c:	4954      	ldr	r1, [pc, #336]	; (801ca70 <initModeNames+0x7c8>)
            numPages[Rhodes] = 5;
            knobParamNames[Rhodes][0] = "BRIGHTNESS";
 801c91e:	4a55      	ldr	r2, [pc, #340]	; (801ca74 <initModeNames+0x7cc>)
            shortModeNames[ClassicSynth] = "CS";
 801c920:	4e55      	ldr	r6, [pc, #340]	; (801ca78 <initModeNames+0x7d0>)
            modeNamesDetails[ClassicSynth] = "VCO+VCF";
 801c922:	f8cb a040 	str.w	sl, [fp, #64]	; 0x40
            shortModeNames[ClassicSynth] = "CS";
 801c926:	f8cc 6040 	str.w	r6, [ip, #64]	; 0x40
            modeNames[Rhodes] = "RHODES";
 801c92a:	f8c8 9044 	str.w	r9, [r8, #68]	; 0x44
            shortModeNames[Rhodes] = "RD";
 801c92e:	f8cc e044 	str.w	lr, [ip, #68]	; 0x44
            modeNamesDetails[Rhodes] = "DARK";
 801c932:	f8cb 7044 	str.w	r7, [fp, #68]	; 0x44
            numPages[Rhodes] = 5;
 801c936:	f04f 0705 	mov.w	r7, #5
            knobParamNames[LivingStringSynth][9] = "RELEASE";
 801c93a:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            knobParamNames[ClassicSynth][8] = "RELEASE";
 801c93e:	f8c3 0660 	str.w	r0, [r3, #1632]	; 0x660
            knobParamNames[ClassicSynth][5] = "ATTACK";
 801c942:	f8c3 5654 	str.w	r5, [r3, #1620]	; 0x654
            knobParamNames[ClassicSynth][7] = "SUSTAIN";
 801c946:	f8c3 465c 	str.w	r4, [r3, #1628]	; 0x65c
            knobParamNames[ClassicSynth][9] = "LEAK";
 801c94a:	f8c3 1664 	str.w	r1, [r3, #1636]	; 0x664
            knobParamNames[Rhodes][0] = "BRIGHTNESS";
 801c94e:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
            knobParamNames[Rhodes][1] = "TREM DEPTH";
 801c952:	4a4a      	ldr	r2, [pc, #296]	; (801ca7c <initModeNames+0x7d4>)
            numPages[Rhodes] = 5;
 801c954:	4e33      	ldr	r6, [pc, #204]	; (801ca24 <initModeNames+0x77c>)
            knobParamNames[Rhodes][1] = "TREM DEPTH";
 801c956:	f8c3 26a8 	str.w	r2, [r3, #1704]	; 0x6a8
            knobParamNames[Rhodes][2] = "TREM RATE";
 801c95a:	4a49      	ldr	r2, [pc, #292]	; (801ca80 <initModeNames+0x7d8>)
            numPages[Rhodes] = 5;
 801c95c:	7477      	strb	r7, [r6, #17]
            knobParamNames[Rhodes][2] = "TREM RATE";
 801c95e:	f8c3 26ac 	str.w	r2, [r3, #1708]	; 0x6ac
            knobParamNames[Rhodes][3] = "DRIVE";
 801c962:	4a48      	ldr	r2, [pc, #288]	; (801ca84 <initModeNames+0x7dc>)
            knobParamNames[Rhodes][4] = "PAN SPREAD";
            knobParamNames[Rhodes][5] = "ATTACK";
            knobParamNames[Rhodes][6] = "DECAY";
 801c964:	4e33      	ldr	r6, [pc, #204]	; (801ca34 <initModeNames+0x78c>)
            knobParamNames[Rhodes][3] = "DRIVE";
 801c966:	f8c3 26b0 	str.w	r2, [r3, #1712]	; 0x6b0
            knobParamNames[Rhodes][4] = "PAN SPREAD";
 801c96a:	4a47      	ldr	r2, [pc, #284]	; (801ca88 <initModeNames+0x7e0>)
            knobParamNames[Rhodes][7] = "SUSTAIN";
            knobParamNames[Rhodes][8] = "RELEASE";
            knobParamNames[Rhodes][9] = "LEAK";
 801c96c:	f8c3 16c8 	str.w	r1, [r3, #1736]	; 0x6c8
            knobParamNames[Rhodes][4] = "PAN SPREAD";
 801c970:	f8c3 26b4 	str.w	r2, [r3, #1716]	; 0x6b4
            knobParamNames[Rhodes][16] = "RATIO2";
            knobParamNames[Rhodes][17] = "RATIO3";
            knobParamNames[Rhodes][18] = "RATIO4";
            knobParamNames[Rhodes][19] = "RATIO5";
            knobParamNames[Rhodes][20] = "RATIO6";
            knobParamNames[Rhodes][21] = "FEEDBACK";
 801c974:	4945      	ldr	r1, [pc, #276]	; (801ca8c <initModeNames+0x7e4>)
            knobParamNames[Rhodes][10] = "INDEX1";
 801c976:	4a46      	ldr	r2, [pc, #280]	; (801ca90 <initModeNames+0x7e8>)
            knobParamNames[Rhodes][12] = "INDEX3";
 801c978:	f8df a174 	ldr.w	sl, [pc, #372]	; 801caf0 <initModeNames+0x848>
            knobParamNames[Rhodes][13] = "INDEX4";
 801c97c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 801caf4 <initModeNames+0x84c>
            knobParamNames[Rhodes][14] = "INDEX5";
 801c980:	f8df 8174 	ldr.w	r8, [pc, #372]	; 801caf8 <initModeNames+0x850>
            knobParamNames[Rhodes][15] = "RATIO1";
 801c984:	f8df e174 	ldr.w	lr, [pc, #372]	; 801cafc <initModeNames+0x854>
            knobParamNames[Rhodes][5] = "ATTACK";
 801c988:	f8c3 56b8 	str.w	r5, [r3, #1720]	; 0x6b8
            knobParamNames[Rhodes][16] = "RATIO2";
 801c98c:	f8df c170 	ldr.w	ip, [pc, #368]	; 801cb00 <initModeNames+0x858>
            knobParamNames[Rhodes][6] = "DECAY";
 801c990:	f8c3 66bc 	str.w	r6, [r3, #1724]	; 0x6bc
            knobParamNames[Rhodes][17] = "RATIO3";
 801c994:	4f3f      	ldr	r7, [pc, #252]	; (801ca94 <initModeNames+0x7ec>)
            knobParamNames[Rhodes][7] = "SUSTAIN";
 801c996:	f8c3 46c0 	str.w	r4, [r3, #1728]	; 0x6c0
            knobParamNames[Rhodes][18] = "RATIO4";
 801c99a:	4e3f      	ldr	r6, [pc, #252]	; (801ca98 <initModeNames+0x7f0>)
            knobParamNames[Rhodes][8] = "RELEASE";
 801c99c:	f8c3 06c4 	str.w	r0, [r3, #1732]	; 0x6c4
            knobParamNames[Rhodes][19] = "RATIO5";
 801c9a0:	4d3e      	ldr	r5, [pc, #248]	; (801ca9c <initModeNames+0x7f4>)
            knobParamNames[Rhodes][20] = "RATIO6";
 801c9a2:	4c3f      	ldr	r4, [pc, #252]	; (801caa0 <initModeNames+0x7f8>)
            knobParamNames[Rhodes][21] = "FEEDBACK";
 801c9a4:	f8c3 16f8 	str.w	r1, [r3, #1784]	; 0x6f8
            knobParamNames[Rhodes][22] = "TUNE SNAP";
 801c9a8:	483e      	ldr	r0, [pc, #248]	; (801caa4 <initModeNames+0x7fc>)
            knobParamNames[Rhodes][23] = "RAND DECAY";
 801c9aa:	493f      	ldr	r1, [pc, #252]	; (801caa8 <initModeNames+0x800>)
            knobParamNames[Rhodes][24] = "RAND SUST";
 801c9ac:	f8df b154 	ldr.w	fp, [pc, #340]	; 801cb04 <initModeNames+0x85c>
            knobParamNames[Rhodes][10] = "INDEX1";
 801c9b0:	f8c3 26cc 	str.w	r2, [r3, #1740]	; 0x6cc
            knobParamNames[Rhodes][11] = "INDEX2";
 801c9b4:	4a3d      	ldr	r2, [pc, #244]	; (801caac <initModeNames+0x804>)
            knobParamNames[Rhodes][12] = "INDEX3";
 801c9b6:	f8c3 a6d4 	str.w	sl, [r3, #1748]	; 0x6d4
            knobParamNames[Rhodes][11] = "INDEX2";
 801c9ba:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
            knobParamNames[Rhodes][13] = "INDEX4";
 801c9be:	f8c3 96d8 	str.w	r9, [r3, #1752]	; 0x6d8
            knobParamNames[Rhodes][14] = "INDEX5";
 801c9c2:	f8c3 86dc 	str.w	r8, [r3, #1756]	; 0x6dc
            knobParamNames[Rhodes][15] = "RATIO1";
 801c9c6:	f8c3 e6e0 	str.w	lr, [r3, #1760]	; 0x6e0
            knobParamNames[Rhodes][16] = "RATIO2";
 801c9ca:	f8c3 c6e4 	str.w	ip, [r3, #1764]	; 0x6e4
            knobParamNames[Rhodes][17] = "RATIO3";
 801c9ce:	f8c3 76e8 	str.w	r7, [r3, #1768]	; 0x6e8
            knobParamNames[Rhodes][18] = "RATIO4";
 801c9d2:	f8c3 66ec 	str.w	r6, [r3, #1772]	; 0x6ec
            knobParamNames[Rhodes][19] = "RATIO5";
 801c9d6:	f8c3 56f0 	str.w	r5, [r3, #1776]	; 0x6f0
            knobParamNames[Rhodes][20] = "RATIO6";
 801c9da:	f8c3 46f4 	str.w	r4, [r3, #1780]	; 0x6f4
            knobParamNames[Rhodes][22] = "TUNE SNAP";
 801c9de:	f8c3 06fc 	str.w	r0, [r3, #1788]	; 0x6fc
            knobParamNames[Rhodes][23] = "RAND DECAY";
 801c9e2:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            knobParamNames[Rhodes][24] = "RAND SUST";
 801c9e6:	f8c3 b704 	str.w	fp, [r3, #1796]	; 0x704
        }
 801c9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9ee:	bf00      	nop
 801c9f0:	081455cc 	.word	0x081455cc
 801c9f4:	081455d4 	.word	0x081455d4
 801c9f8:	081454d4 	.word	0x081454d4
 801c9fc:	08145558 	.word	0x08145558
 801ca00:	0814559c 	.word	0x0814559c
 801ca04:	08145564 	.word	0x08145564
 801ca08:	081455e4 	.word	0x081455e4
 801ca0c:	08145594 	.word	0x08145594
 801ca10:	0814560c 	.word	0x0814560c
 801ca14:	0814556c 	.word	0x0814556c
 801ca18:	081455f4 	.word	0x081455f4
 801ca1c:	08145570 	.word	0x08145570
 801ca20:	081456f4 	.word	0x081456f4
 801ca24:	20018850 	.word	0x20018850
 801ca28:	081455a8 	.word	0x081455a8
 801ca2c:	081455b4 	.word	0x081455b4
 801ca30:	081455c0 	.word	0x081455c0
 801ca34:	0814558c 	.word	0x0814558c
 801ca38:	08145584 	.word	0x08145584
 801ca3c:	08145204 	.word	0x08145204
 801ca40:	08145630 	.word	0x08145630
 801ca44:	081456a0 	.word	0x081456a0
 801ca48:	081456ac 	.word	0x081456ac
 801ca4c:	081456b8 	.word	0x081456b8
 801ca50:	081456c0 	.word	0x081456c0
 801ca54:	081456cc 	.word	0x081456cc
 801ca58:	0814565c 	.word	0x0814565c
 801ca5c:	08145644 	.word	0x08145644
 801ca60:	081456e4 	.word	0x081456e4
 801ca64:	0814563c 	.word	0x0814563c
 801ca68:	08145674 	.word	0x08145674
 801ca6c:	0814567c 	.word	0x0814567c
 801ca70:	08145684 	.word	0x08145684
 801ca74:	081456ec 	.word	0x081456ec
 801ca78:	08145650 	.word	0x08145650
 801ca7c:	081456f8 	.word	0x081456f8
 801ca80:	08145704 	.word	0x08145704
 801ca84:	08145710 	.word	0x08145710
 801ca88:	08145718 	.word	0x08145718
 801ca8c:	081454dc 	.word	0x081454dc
 801ca90:	08145724 	.word	0x08145724
 801ca94:	0814575c 	.word	0x0814575c
 801ca98:	08145764 	.word	0x08145764
 801ca9c:	0814576c 	.word	0x0814576c
 801caa0:	08145774 	.word	0x08145774
 801caa4:	0814577c 	.word	0x0814577c
 801caa8:	08145788 	.word	0x08145788
 801caac:	0814572c 	.word	0x0814572c
 801cab0:	0814554c 	.word	0x0814554c
 801cab4:	0814557c 	.word	0x0814557c
 801cab8:	081455dc 	.word	0x081455dc
 801cabc:	081455ec 	.word	0x081455ec
 801cac0:	081455fc 	.word	0x081455fc
 801cac4:	08145618 	.word	0x08145618
 801cac8:	01020302 	.word	0x01020302
 801cacc:	02020101 	.word	0x02020101
 801cad0:	02030101 	.word	0x02030101
 801cad4:	08145624 	.word	0x08145624
 801cad8:	08145668 	.word	0x08145668
 801cadc:	0814568c 	.word	0x0814568c
 801cae0:	08145698 	.word	0x08145698
 801cae4:	08145654 	.word	0x08145654
 801cae8:	081456d8 	.word	0x081456d8
 801caec:	081456e0 	.word	0x081456e0
 801caf0:	08145734 	.word	0x08145734
 801caf4:	0814573c 	.word	0x0814573c
 801caf8:	08145744 	.word	0x08145744
 801cafc:	0814574c 	.word	0x0814574c
 801cb00:	08145754 	.word	0x08145754
 801cb04:	08145794 	.word	0x08145794

0801cb08 <buttonCheck>:

        void buttonCheck(void)
        {
#ifndef __cplusplus
            if (codecReady)
 801cb08:	4b96      	ldr	r3, [pc, #600]	; (801cd64 <buttonCheck+0x25c>)
 801cb0a:	781b      	ldrb	r3, [r3, #0]
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	f000 80db 	beq.w	801ccc8 <buttonCheck+0x1c0>
                 buttonValues[8] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_11); // D
                 buttonValues[9] = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10); // E
                 */

                //A little more efficient since it avoids a function call
                buttonValues[0] =!(GPIOB->IDR & GPIO_PIN_13);
 801cb12:	4995      	ldr	r1, [pc, #596]	; (801cd68 <buttonCheck+0x260>)
                buttonValues[8] =!(GPIOG->IDR & GPIO_PIN_11);
                buttonValues[9] =!(GPIOB->IDR & GPIO_PIN_10);
#else
                {
#endif
                    for (int i = 0; i < NUM_BUTTONS; i++)
 801cb14:	2300      	movs	r3, #0
                buttonValues[0] =!(GPIOB->IDR & GPIO_PIN_13);
 801cb16:	4a95      	ldr	r2, [pc, #596]	; (801cd6c <buttonCheck+0x264>)
        {
 801cb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                buttonValues[0] =!(GPIOB->IDR & GPIO_PIN_13);
 801cb1c:	6908      	ldr	r0, [r1, #16]
        {
 801cb1e:	b087      	sub	sp, #28
                            buttonActionsSFX[i][ActionHoldContinuous] = TRUE;
                            buttonActionsUI[i][ActionHoldContinuous] = TRUE;
                            writeButtonFlag = i;
                            writeActionFlag = ActionHoldContinuous;
                        }
                        if (buttonHysteresis[i] < buttonHysteresisThreshold)
 801cb20:	f8df b27c 	ldr.w	fp, [pc, #636]	; 801cda0 <buttonCheck+0x298>
                buttonValues[0] =!(GPIOB->IDR & GPIO_PIN_13);
 801cb24:	f480 5000 	eor.w	r0, r0, #8192	; 0x2000
                buttonValues[3] =!(GPIOD->IDR & GPIO_PIN_11);
 801cb28:	4e91      	ldr	r6, [pc, #580]	; (801cd70 <buttonCheck+0x268>)
 801cb2a:	f99b 4004 	ldrsb.w	r4, [fp, #4]
                buttonValues[0] =!(GPIOB->IDR & GPIO_PIN_13);
 801cb2e:	f3c0 3040 	ubfx	r0, r0, #13, #1
                        if (buttonHysteresis[i] < buttonHysteresisThreshold)
 801cb32:	f8db a000 	ldr.w	sl, [fp]
 801cb36:	4f8f      	ldr	r7, [pc, #572]	; (801cd74 <buttonCheck+0x26c>)
                buttonValues[0] =!(GPIOB->IDR & GPIO_PIN_13);
 801cb38:	7010      	strb	r0, [r2, #0]
                            buttonActionsSFX[i][ActionHoldContinuous] = TRUE;
 801cb3a:	46d4      	mov	ip, sl
                buttonValues[1] =!(GPIOB->IDR & GPIO_PIN_12);
 801cb3c:	6908      	ldr	r0, [r1, #16]
                            buttonActionsSFX[i][ActionHoldContinuous] = TRUE;
 801cb3e:	4692      	mov	sl, r2
 801cb40:	9401      	str	r4, [sp, #4]
 801cb42:	f99b 4005 	ldrsb.w	r4, [fp, #5]
                buttonValues[1] =!(GPIOB->IDR & GPIO_PIN_12);
 801cb46:	f480 5080 	eor.w	r0, r0, #4096	; 0x1000
 801cb4a:	f8df e258 	ldr.w	lr, [pc, #600]	; 801cda4 <buttonCheck+0x29c>
 801cb4e:	9402      	str	r4, [sp, #8]
 801cb50:	f3c0 3000 	ubfx	r0, r0, #12, #1
                        {
                            if (buttonCounters[i] < buttonHoldMax) buttonCounters[i]++;
 801cb54:	f8db 4008 	ldr.w	r4, [fp, #8]
                buttonValues[1] =!(GPIOB->IDR & GPIO_PIN_12);
 801cb58:	7050      	strb	r0, [r2, #1]
                            if (buttonCounters[i] < buttonHoldMax) buttonCounters[i]++;
 801cb5a:	9404      	str	r4, [sp, #16]
                            if ((buttonCounters[i] >= buttonHoldThreshold) && (cleanButtonValues[i] == 1))
 801cb5c:	f8db 400c 	ldr.w	r4, [fp, #12]
 801cb60:	9405      	str	r4, [sp, #20]
                buttonValues[2] =!(GPIOB->IDR & GPIO_PIN_14);
 801cb62:	6908      	ldr	r0, [r1, #16]
 801cb64:	4c84      	ldr	r4, [pc, #528]	; (801cd78 <buttonCheck+0x270>)
 801cb66:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 801cb6a:	f3c0 3080 	ubfx	r0, r0, #14, #1
 801cb6e:	7090      	strb	r0, [r2, #2]
                buttonValues[3] =!(GPIOD->IDR & GPIO_PIN_11);
 801cb70:	6930      	ldr	r0, [r6, #16]
 801cb72:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
 801cb76:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 801cb7a:	70d0      	strb	r0, [r2, #3]
                buttonValues[4] =!(GPIOB->IDR & GPIO_PIN_15);
 801cb7c:	690d      	ldr	r5, [r1, #16]
                buttonValues[5] =!(GPIOB->IDR & GPIO_PIN_1);
 801cb7e:	6908      	ldr	r0, [r1, #16]
                buttonValues[4] =!(GPIOB->IDR & GPIO_PIN_15);
 801cb80:	f485 4900 	eor.w	r9, r5, #32768	; 0x8000
                buttonValues[6] =!(GPIOD->IDR & GPIO_PIN_7);
 801cb84:	6936      	ldr	r6, [r6, #16]
                buttonValues[5] =!(GPIOB->IDR & GPIO_PIN_1);
 801cb86:	f080 0802 	eor.w	r8, r0, #2
                buttonValues[8] =!(GPIOG->IDR & GPIO_PIN_11);
 801cb8a:	487c      	ldr	r0, [pc, #496]	; (801cd7c <buttonCheck+0x274>)
                buttonValues[7] =!(GPIOB->IDR & GPIO_PIN_11);
 801cb8c:	690d      	ldr	r5, [r1, #16]
                buttonValues[6] =!(GPIOD->IDR & GPIO_PIN_7);
 801cb8e:	f086 0680 	eor.w	r6, r6, #128	; 0x80
                buttonValues[8] =!(GPIOG->IDR & GPIO_PIN_11);
 801cb92:	6900      	ldr	r0, [r0, #16]
                buttonValues[4] =!(GPIOB->IDR & GPIO_PIN_15);
 801cb94:	f3c9 39c0 	ubfx	r9, r9, #15, #1
                buttonValues[9] =!(GPIOB->IDR & GPIO_PIN_10);
 801cb98:	6909      	ldr	r1, [r1, #16]
                buttonValues[7] =!(GPIOB->IDR & GPIO_PIN_11);
 801cb9a:	f485 6500 	eor.w	r5, r5, #2048	; 0x800
                buttonValues[8] =!(GPIOG->IDR & GPIO_PIN_11);
 801cb9e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
                buttonValues[5] =!(GPIOB->IDR & GPIO_PIN_1);
 801cba2:	f3c8 0840 	ubfx	r8, r8, #1, #1
                buttonValues[9] =!(GPIOB->IDR & GPIO_PIN_10);
 801cba6:	f481 6180 	eor.w	r1, r1, #1024	; 0x400
                buttonValues[6] =!(GPIOD->IDR & GPIO_PIN_7);
 801cbaa:	f3c6 16c0 	ubfx	r6, r6, #7, #1
                buttonValues[7] =!(GPIOB->IDR & GPIO_PIN_11);
 801cbae:	f3c5 25c0 	ubfx	r5, r5, #11, #1
                buttonValues[8] =!(GPIOG->IDR & GPIO_PIN_11);
 801cbb2:	f3c0 20c0 	ubfx	r0, r0, #11, #1
                buttonValues[9] =!(GPIOB->IDR & GPIO_PIN_10);
 801cbb6:	f3c1 2180 	ubfx	r1, r1, #10, #1
                buttonValues[4] =!(GPIOB->IDR & GPIO_PIN_15);
 801cbba:	f882 9004 	strb.w	r9, [r2, #4]
                buttonValues[5] =!(GPIOB->IDR & GPIO_PIN_1);
 801cbbe:	f882 8005 	strb.w	r8, [r2, #5]
                buttonValues[6] =!(GPIOD->IDR & GPIO_PIN_7);
 801cbc2:	7196      	strb	r6, [r2, #6]
                buttonValues[7] =!(GPIOB->IDR & GPIO_PIN_11);
 801cbc4:	71d5      	strb	r5, [r2, #7]
 801cbc6:	4e6e      	ldr	r6, [pc, #440]	; (801cd80 <buttonCheck+0x278>)
                buttonValues[8] =!(GPIOG->IDR & GPIO_PIN_11);
 801cbc8:	7210      	strb	r0, [r2, #8]
 801cbca:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 801cda8 <buttonCheck+0x2a0>
                buttonValues[9] =!(GPIOB->IDR & GPIO_PIN_10);
 801cbce:	7251      	strb	r1, [r2, #9]
                            buttonActionsSFX[i][ActionHoldContinuous] = TRUE;
 801cbd0:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 801cd8c <buttonCheck+0x284>
 801cbd4:	9700      	str	r7, [sp, #0]
 801cbd6:	e00f      	b.n	801cbf8 <buttonCheck+0xf0>
                            if (buttonCounters[i] < buttonHoldMax) buttonCounters[i]++;
 801cbd8:	f858 1002 	ldr.w	r1, [r8, r2]
 801cbdc:	9804      	ldr	r0, [sp, #16]
 801cbde:	4281      	cmp	r1, r0
 801cbe0:	d202      	bcs.n	801cbe8 <buttonCheck+0xe0>
 801cbe2:	3101      	adds	r1, #1
 801cbe4:	f848 1002 	str.w	r1, [r8, r2]
                            if ((buttonCounters[i] >= buttonHoldThreshold) && (cleanButtonValues[i] == 1))
 801cbe8:	9805      	ldr	r0, [sp, #20]
 801cbea:	4288      	cmp	r0, r1
 801cbec:	d801      	bhi.n	801cbf2 <buttonCheck+0xea>
 801cbee:	2d01      	cmp	r5, #1
 801cbf0:	d06b      	beq.n	801ccca <buttonCheck+0x1c2>
                    for (int i = 0; i < NUM_BUTTONS; i++)
 801cbf2:	3301      	adds	r3, #1
 801cbf4:	2b0a      	cmp	r3, #10
 801cbf6:	d033      	beq.n	801cc60 <buttonCheck+0x158>
                        if (buttonValues[i] != buttonValuesPrev[i])
 801cbf8:	9800      	ldr	r0, [sp, #0]
 801cbfa:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801cbfe:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801cc02:	428a      	cmp	r2, r1
 801cc04:	9000      	str	r0, [sp, #0]
 801cc06:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801cc0a:	d001      	beq.n	801cc10 <buttonCheck+0x108>
                            buttonHysteresis[i]++;
 801cc0c:	3001      	adds	r0, #1
 801cc0e:	6020      	str	r0, [r4, #0]
                        if (cleanButtonValues[i] == 1)
 801cc10:	f81e 5003 	ldrb.w	r5, [lr, r3]
 801cc14:	009a      	lsls	r2, r3, #2
 801cc16:	2d01      	cmp	r5, #1
 801cc18:	d109      	bne.n	801cc2e <buttonCheck+0x126>
                            writeActionFlag = ActionHoldContinuous;
 801cc1a:	2703      	movs	r7, #3
 801cc1c:	9702      	str	r7, [sp, #8]
                            writeButtonFlag = i;
 801cc1e:	b25f      	sxtb	r7, r3
 801cc20:	9701      	str	r7, [sp, #4]
                            buttonActionsSFX[i][ActionHoldContinuous] = TRUE;
 801cc22:	eb09 0702 	add.w	r7, r9, r2
 801cc26:	70fd      	strb	r5, [r7, #3]
 801cc28:	9703      	str	r7, [sp, #12]
                            buttonActionsUI[i][ActionHoldContinuous] = TRUE;
 801cc2a:	18b7      	adds	r7, r6, r2
 801cc2c:	70fd      	strb	r5, [r7, #3]
                        if (buttonHysteresis[i] < buttonHysteresisThreshold)
 801cc2e:	4584      	cmp	ip, r0
 801cc30:	d8d2      	bhi.n	801cbd8 <buttonCheck+0xd0>
                            }
                        }
                        else
                        {
                            cleanButtonValues[i] = buttonValues[i];
                            buttonHysteresis[i] = 0;
 801cc32:	2000      	movs	r0, #0
                            buttonCounters[i] = 0;

                            if (cleanButtonValues[i] == 1)
 801cc34:	2901      	cmp	r1, #1
                            cleanButtonValues[i] = buttonValues[i];
 801cc36:	f80e 1003 	strb.w	r1, [lr, r3]
                            buttonHysteresis[i] = 0;
 801cc3a:	6020      	str	r0, [r4, #0]
                            buttonCounters[i] = 0;
 801cc3c:	f848 0002 	str.w	r0, [r8, r2]
                            if (cleanButtonValues[i] == 1)
 801cc40:	d03a      	beq.n	801ccb8 <buttonCheck+0x1b0>
                                buttonActionsSFX[i][ActionPress] = TRUE;
                                buttonActionsUI[i][ActionPress] = TRUE;
                                writeButtonFlag = i;
                                writeActionFlag = ActionPress;
                            }
                            else if (cleanButtonValues[i] == 0)
 801cc42:	b941      	cbnz	r1, 801cc56 <buttonCheck+0x14e>
                            {
                                buttonActionsSFX[i][ActionRelease] = TRUE;
                                buttonActionsUI[i][ActionRelease] = TRUE;
                                writeButtonFlag = i;
 801cc44:	b25d      	sxtb	r5, r3
                                buttonActionsSFX[i][ActionRelease] = TRUE;
 801cc46:	eb09 0002 	add.w	r0, r9, r2
                                buttonActionsUI[i][ActionRelease] = TRUE;
 801cc4a:	4432      	add	r2, r6
                                writeButtonFlag = i;
 801cc4c:	9501      	str	r5, [sp, #4]
                                writeActionFlag = ActionRelease;
 801cc4e:	2501      	movs	r5, #1
 801cc50:	9502      	str	r5, [sp, #8]
                                buttonActionsSFX[i][ActionRelease] = TRUE;
 801cc52:	7045      	strb	r5, [r0, #1]
                                buttonActionsUI[i][ActionRelease] = TRUE;
 801cc54:	7055      	strb	r5, [r2, #1]
                    for (int i = 0; i < NUM_BUTTONS; i++)
 801cc56:	3301      	adds	r3, #1
                            }
                            buttonValuesPrev[i] = buttonValues[i];
 801cc58:	9a00      	ldr	r2, [sp, #0]
                    for (int i = 0; i < NUM_BUTTONS; i++)
 801cc5a:	2b0a      	cmp	r3, #10
                            buttonValuesPrev[i] = buttonValues[i];
 801cc5c:	7011      	strb	r1, [r2, #0]
                    for (int i = 0; i < NUM_BUTTONS; i++)
 801cc5e:	d1cb      	bne.n	801cbf8 <buttonCheck+0xf0>
 801cc60:	9a01      	ldr	r2, [sp, #4]

                    // make some if statements if you want to find the "attack" of the buttons (getting the "press" action)

                    /// DEFINE GLOBAL BUTTON BEHAVIOR HERE

                    if (buttonActionsUI[ButtonLeft][ActionPress] == 1)
 801cc62:	7933      	ldrb	r3, [r6, #4]
 801cc64:	f88b 2004 	strb.w	r2, [fp, #4]
 801cc68:	2b01      	cmp	r3, #1
 801cc6a:	9a02      	ldr	r2, [sp, #8]
 801cc6c:	f88b 2005 	strb.w	r2, [fp, #5]
 801cc70:	f000 8139 	beq.w	801cee6 <buttonCheck+0x3de>
                        loadingPreset = 1;
                        OLED_writePreset();
                        writeCurrentPresetToFlash();
                        clearButtonActions();
                    }
                    if (buttonActionsUI[ButtonRight][ActionPress] == 1)
 801cc74:	7a33      	ldrb	r3, [r6, #8]
 801cc76:	2b01      	cmp	r3, #1
 801cc78:	f000 816c 	beq.w	801cf54 <buttonCheck+0x44c>
                        loadingPreset = 1;
                        OLED_writePreset();
                        writeCurrentPresetToFlash();
                        clearButtonActions();
                    }
                    if (buttonActionsUI[ButtonD][ActionPress] == 1)
 801cc7c:	f896 3020 	ldrb.w	r3, [r6, #32]
 801cc80:	2b01      	cmp	r3, #1
 801cc82:	f000 819f 	beq.w	801cfc4 <buttonCheck+0x4bc>
                        }
                        changeTuning();
                        OLED_writeTuning();
                        buttonActionsUI[ButtonD][ActionPress] = 0;
                    }
                    if (buttonActionsUI[ButtonE][ActionPress] == 1)
 801cc86:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 801cc8a:	2b01      	cmp	r3, #1
 801cc8c:	f000 81d2 	beq.w	801d034 <buttonCheck+0x52c>
                        changeTuning();
                        OLED_writeTuning();
                        buttonActionsUI[ButtonE][ActionPress] = 0;
                    }

                    if (buttonActionsUI[ButtonEdit][ActionPress])
 801cc90:	7833      	ldrb	r3, [r6, #0]
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	f040 81c2 	bne.w	801d01c <buttonCheck+0x514>
                    {
                        OLED_writeEditScreen();
                        setLED_Edit(1);
                        buttonActionsUI[ButtonEdit][ActionPress] = 0;
                    }
                    if (buttonActionsUI[ButtonEdit][ActionHoldContinuous] == 1)
 801cc98:	78f3      	ldrb	r3, [r6, #3]
 801cc9a:	2b01      	cmp	r3, #1
 801cc9c:	d021      	beq.n	801cce2 <buttonCheck+0x1da>
                            buttonActionsUI[ButtonEdit][ActionHoldContinuous] = 0;
                        }

                        //            OLEDdrawFloatArray(audioDisplayBuffer, -1.0f, 1.0f, 128, displayBufferIndex, 0, BothLines);
                    }
                    if (buttonActionsUI[ButtonEdit][ActionRelease] == 1)
 801cc9e:	7873      	ldrb	r3, [r6, #1]
 801cca0:	2b01      	cmp	r3, #1
 801cca2:	d031      	beq.n	801cd08 <buttonCheck+0x200>
                        buttonActionsUI[ButtonEdit][ActionRelease] = 0;
                        buttonActionsUI[ButtonEdit][ActionHoldContinuous] = 0;
                        buttonActionsSFX[ButtonEdit][ActionHoldContinuous] = 0;

                    }
                    if (buttonActionsUI[ButtonDown][ActionPress] == 1)
 801cca4:	7b33      	ldrb	r3, [r6, #12]
 801cca6:	2b01      	cmp	r3, #1
 801cca8:	d03c      	beq.n	801cd24 <buttonCheck+0x21c>
                        decrementPage();
                        OLEDwriteString("P", 1, 110, FirstLine);
                        OLEDwriteInt(knobPage, 1, 120, FirstLine);
                        buttonActionsUI[ButtonDown][ActionPress] = 0;
                    }
                    if (buttonActionsUI[ButtonUp][ActionPress] == 1)
 801ccaa:	7c33      	ldrb	r3, [r6, #16]
 801ccac:	2b01      	cmp	r3, #1
 801ccae:	f000 80cb 	beq.w	801ce48 <buttonCheck+0x340>
                    //            OLEDwriteString(" ", 1, getCursorX(), SecondLine);
                    //            OLEDwriteString(paramNames[orderedParams[currentParamIndex]], getCursorX(), SecondLine);
                    //            buttonActionsUI[ButtonEdit][ActionPress] = 0;
                    //        }
                }
            }
 801ccb2:	b007      	add	sp, #28
 801ccb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                buttonActionsSFX[i][ActionPress] = TRUE;
 801ccb8:	f809 1002 	strb.w	r1, [r9, r2]
                                writeButtonFlag = i;
 801ccbc:	b258      	sxtb	r0, r3
                                buttonActionsUI[i][ActionPress] = TRUE;
 801ccbe:	54b1      	strb	r1, [r6, r2]
                                writeActionFlag = ActionPress;
 801ccc0:	2200      	movs	r2, #0
                                writeButtonFlag = i;
 801ccc2:	9001      	str	r0, [sp, #4]
                                writeActionFlag = ActionPress;
 801ccc4:	9202      	str	r2, [sp, #8]
 801ccc6:	e7c6      	b.n	801cc56 <buttonCheck+0x14e>
 801ccc8:	4770      	bx	lr
                                writeButtonFlag = i;
 801ccca:	b258      	sxtb	r0, r3
                                buttonActionsSFX[i][ActionHoldInstant] = TRUE;
 801cccc:	eb09 0102 	add.w	r1, r9, r2
                                buttonActionsUI[i][ActionHoldInstant] = TRUE;
 801ccd0:	4432      	add	r2, r6
                                writeButtonFlag = i;
 801ccd2:	9001      	str	r0, [sp, #4]
                                buttonActionsSFX[i][ActionHoldInstant] = TRUE;
 801ccd4:	f04f 0001 	mov.w	r0, #1
 801ccd8:	7088      	strb	r0, [r1, #2]
                                writeActionFlag = ActionHoldInstant;
 801ccda:	2102      	movs	r1, #2
                                buttonActionsUI[i][ActionHoldInstant] = TRUE;
 801ccdc:	7090      	strb	r0, [r2, #2]
                                writeActionFlag = ActionHoldInstant;
 801ccde:	9102      	str	r1, [sp, #8]
 801cce0:	e787      	b.n	801cbf2 <buttonCheck+0xea>
                        if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801cce2:	7f34      	ldrb	r4, [r6, #28]
 801cce4:	2c01      	cmp	r4, #1
 801cce6:	f000 822e 	beq.w	801d146 <buttonCheck+0x63e>
                        if (buttonActionsUI[ButtonDown][ActionPress])
 801ccea:	7b33      	ldrb	r3, [r6, #12]
 801ccec:	b14b      	cbz	r3, 801cd02 <buttonCheck+0x1fa>
                            cvAddParam[currentPreset] = -1;
 801ccee:	4a25      	ldr	r2, [pc, #148]	; (801cd84 <buttonCheck+0x27c>)
                            buttonActionsUI[ButtonDown][ActionPress] = 0;
 801ccf0:	2300      	movs	r3, #0
                            cvAddParam[currentPreset] = -1;
 801ccf2:	20ff      	movs	r0, #255	; 0xff
 801ccf4:	4c24      	ldr	r4, [pc, #144]	; (801cd88 <buttonCheck+0x280>)
 801ccf6:	7811      	ldrb	r1, [r2, #0]
                            buttonActionsSFX[ButtonDown][ActionPress] = 0;
 801ccf8:	4a24      	ldr	r2, [pc, #144]	; (801cd8c <buttonCheck+0x284>)
                            cvAddParam[currentPreset] = -1;
 801ccfa:	5460      	strb	r0, [r4, r1]
                            buttonActionsUI[ButtonDown][ActionPress] = 0;
 801ccfc:	7333      	strb	r3, [r6, #12]
                            buttonActionsUI[ButtonEdit][ActionHoldContinuous] = 0;
 801ccfe:	70f3      	strb	r3, [r6, #3]
                            buttonActionsSFX[ButtonDown][ActionPress] = 0;
 801cd00:	7313      	strb	r3, [r2, #12]
                    if (buttonActionsUI[ButtonEdit][ActionRelease] == 1)
 801cd02:	7873      	ldrb	r3, [r6, #1]
 801cd04:	2b01      	cmp	r3, #1
 801cd06:	d1d0      	bne.n	801ccaa <buttonCheck+0x1a2>
                        OLED_writePreset();
 801cd08:	f7f6 febe 	bl	8013a88 <OLED_writePreset>
                        setLED_Edit(0);
 801cd0c:	2000      	movs	r0, #0
 801cd0e:	f7f6 fe1b 	bl	8013948 <setLED_Edit>
                        buttonActionsSFX[ButtonEdit][ActionRelease] = 0;
 801cd12:	2300      	movs	r3, #0
 801cd14:	4a1d      	ldr	r2, [pc, #116]	; (801cd8c <buttonCheck+0x284>)
                        buttonActionsUI[ButtonEdit][ActionRelease] = 0;
 801cd16:	7073      	strb	r3, [r6, #1]
                        buttonActionsSFX[ButtonEdit][ActionRelease] = 0;
 801cd18:	7053      	strb	r3, [r2, #1]
                        buttonActionsUI[ButtonEdit][ActionHoldContinuous] = 0;
 801cd1a:	70f3      	strb	r3, [r6, #3]
                        buttonActionsSFX[ButtonEdit][ActionHoldContinuous] = 0;
 801cd1c:	70d3      	strb	r3, [r2, #3]
                    if (buttonActionsUI[ButtonDown][ActionPress] == 1)
 801cd1e:	7b33      	ldrb	r3, [r6, #12]
 801cd20:	2b01      	cmp	r3, #1
 801cd22:	d1c2      	bne.n	801ccaa <buttonCheck+0x1a2>

            }

            void decrementPage(void)
            {
                if (knobPage == 0) knobPage = numPages[currentPreset] - 1;
 801cd24:	4c17      	ldr	r4, [pc, #92]	; (801cd84 <buttonCheck+0x27c>)
 801cd26:	78a3      	ldrb	r3, [r4, #2]
 801cd28:	7821      	ldrb	r1, [r4, #0]
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	f000 81e0 	beq.w	801d0f0 <buttonCheck+0x5e8>
                else knobPage--;
 801cd30:	3b01      	subs	r3, #1
 801cd32:	b2db      	uxtb	r3, r3
                setKnobValues(presetKnobValues[currentPreset] + (knobPage * KNOB_PAGE_SIZE));
 801cd34:	4a16      	ldr	r2, [pc, #88]	; (801cd90 <buttonCheck+0x288>)
 801cd36:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 801cd3a:	f04f 0b64 	mov.w	fp, #100	; 0x64
 801cd3e:	4812      	ldr	r0, [pc, #72]	; (801cd88 <buttonCheck+0x280>)
 801cd40:	ea4f 0888 	mov.w	r8, r8, lsl #2
                }
            }

            void setKnobValues(float* values)
            {
                for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801cd44:	f04f 0900 	mov.w	r9, #0
                setKnobValues(presetKnobValues[currentPreset] + (knobPage * KNOB_PAGE_SIZE));
 801cd48:	fb0b 2b01 	mla	fp, fp, r1, r2
 801cd4c:	4a11      	ldr	r2, [pc, #68]	; (801cd94 <buttonCheck+0x28c>)
 801cd4e:	9000      	str	r0, [sp, #0]
 801cd50:	9202      	str	r2, [sp, #8]
                    {
                        knob = 5;
                    }
                    knobActive[knob] = 0;
                    floatADCUI[knob] = -1.0f;
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801cd52:	f108 0214 	add.w	r2, r8, #20
 801cd56:	4810      	ldr	r0, [pc, #64]	; (801cd98 <buttonCheck+0x290>)
 801cd58:	445a      	add	r2, fp
 801cd5a:	4f10      	ldr	r7, [pc, #64]	; (801cd9c <buttonCheck+0x294>)
 801cd5c:	9001      	str	r0, [sp, #4]
 801cd5e:	9203      	str	r2, [sp, #12]
 801cd60:	70a3      	strb	r3, [r4, #2]
 801cd62:	e038      	b.n	801cdd6 <buttonCheck+0x2ce>
 801cd64:	200004ec 	.word	0x200004ec
 801cd68:	58020400 	.word	0x58020400
 801cd6c:	200190ac 	.word	0x200190ac
 801cd70:	58020c00 	.word	0x58020c00
 801cd74:	200186ff 	.word	0x200186ff
 801cd78:	2001879c 	.word	0x2001879c
 801cd7c:	58021800 	.word	0x58021800
 801cd80:	20018894 	.word	0x20018894
 801cd84:	20000694 	.word	0x20000694
 801cd88:	20018978 	.word	0x20018978
 801cd8c:	20018724 	.word	0x20018724
 801cd90:	20002d50 	.word	0x20002d50
 801cd94:	20017954 	.word	0x20017954
 801cd98:	20018864 	.word	0x20018864
 801cd9c:	2001887c 	.word	0x2001887c
 801cda0:	200002cc 	.word	0x200002cc
 801cda4:	200187c8 	.word	0x200187c8
 801cda8:	20018908 	.word	0x20018908
                    knobActive[knob] = 0;
 801cdac:	9b02      	ldr	r3, [sp, #8]
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801cdae:	ed9a 0a00 	vldr	s0, [sl]
                    knobActive[knob] = 0;
 801cdb2:	f803 e009 	strb.w	lr, [r3, r9]
                for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801cdb6:	f109 0901 	add.w	r9, r9, #1
                    floatADCUI[knob] = -1.0f;
 801cdba:	edcc 7a00 	vstr	s15, [ip]
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801cdbe:	f005 fb13 	bl	80223e8 <tExpSmooth_setValAndDest>

                    smoothedADC[knob] = values[knob];
 801cdc2:	9b01      	ldr	r3, [sp, #4]
                for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801cdc4:	f1b9 0f05 	cmp.w	r9, #5
                    smoothedADC[knob] = values[knob];
 801cdc8:	441d      	add	r5, r3
 801cdca:	f8da 3000 	ldr.w	r3, [sl]
 801cdce:	602b      	str	r3, [r5, #0]
                for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801cdd0:	d028      	beq.n	801ce24 <buttonCheck+0x31c>
 801cdd2:	78a3      	ldrb	r3, [r4, #2]
 801cdd4:	7821      	ldrb	r1, [r4, #0]
                    if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801cdd6:	9a00      	ldr	r2, [sp, #0]
 801cdd8:	ea4f 0589 	mov.w	r5, r9, lsl #2
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801cddc:	48c7      	ldr	r0, [pc, #796]	; (801d0fc <buttonCheck+0x5f4>)
                    floatADCUI[knob] = -1.0f;
 801cdde:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
                    if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801cde2:	5651      	ldrsb	r1, [r2, r1]
 801cde4:	2205      	movs	r2, #5
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801cde6:	eb08 0a05 	add.w	sl, r8, r5
                    knobActive[knob] = 0;
 801cdea:	f04f 0e00 	mov.w	lr, #0
                    if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801cdee:	fb12 9203 	smlabb	r2, r2, r3, r9
                    floatADCUI[knob] = -1.0f;
 801cdf2:	eb07 0c05 	add.w	ip, r7, r5
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801cdf6:	4428      	add	r0, r5
 801cdf8:	44da      	add	sl, fp
                    if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801cdfa:	428a      	cmp	r2, r1
 801cdfc:	d1d6      	bne.n	801cdac <buttonCheck+0x2a4>
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801cdfe:	9d03      	ldr	r5, [sp, #12]
                    knobActive[knob] = 0;
 801ce00:	2200      	movs	r2, #0
                    floatADCUI[knob] = -1.0f;
 801ce02:	4bbf      	ldr	r3, [pc, #764]	; (801d100 <buttonCheck+0x5f8>)
                for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801ce04:	f109 0901 	add.w	r9, r9, #1
                    knobActive[knob] = 0;
 801ce08:	9902      	ldr	r1, [sp, #8]
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801ce0a:	ed95 0a00 	vldr	s0, [r5]
 801ce0e:	48bd      	ldr	r0, [pc, #756]	; (801d104 <buttonCheck+0x5fc>)
                    knobActive[knob] = 0;
 801ce10:	714a      	strb	r2, [r1, #5]
                    floatADCUI[knob] = -1.0f;
 801ce12:	617b      	str	r3, [r7, #20]
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801ce14:	f005 fae8 	bl	80223e8 <tExpSmooth_setValAndDest>
                    smoothedADC[knob] = values[knob];
 801ce18:	682b      	ldr	r3, [r5, #0]
                for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801ce1a:	f1b9 0f05 	cmp.w	r9, #5
                    smoothedADC[knob] = values[knob];
 801ce1e:	9a01      	ldr	r2, [sp, #4]
 801ce20:	6153      	str	r3, [r2, #20]
                for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801ce22:	d1d6      	bne.n	801cdd2 <buttonCheck+0x2ca>
                        OLEDwriteString("P", 1, 110, FirstLine);
 801ce24:	2300      	movs	r3, #0
 801ce26:	226e      	movs	r2, #110	; 0x6e
 801ce28:	2101      	movs	r1, #1
 801ce2a:	48b7      	ldr	r0, [pc, #732]	; (801d108 <buttonCheck+0x600>)
 801ce2c:	f7f7 f806 	bl	8013e3c <OLEDwriteString>
                        OLEDwriteInt(knobPage, 1, 120, FirstLine);
 801ce30:	2300      	movs	r3, #0
 801ce32:	78a0      	ldrb	r0, [r4, #2]
 801ce34:	2278      	movs	r2, #120	; 0x78
 801ce36:	2101      	movs	r1, #1
 801ce38:	f7f7 f82a 	bl	8013e90 <OLEDwriteInt>
                        buttonActionsUI[ButtonDown][ActionPress] = 0;
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	7333      	strb	r3, [r6, #12]
                    if (buttonActionsUI[ButtonUp][ActionPress] == 1)
 801ce40:	7c33      	ldrb	r3, [r6, #16]
 801ce42:	2b01      	cmp	r3, #1
 801ce44:	f47f af35 	bne.w	801ccb2 <buttonCheck+0x1aa>
                knobPage = (knobPage + 1) % numPages[currentPreset];
 801ce48:	4cb0      	ldr	r4, [pc, #704]	; (801d10c <buttonCheck+0x604>)
                setKnobValues(presetKnobValues[currentPreset] + (knobPage * KNOB_PAGE_SIZE));
 801ce4a:	f04f 0864 	mov.w	r8, #100	; 0x64
                knobPage = (knobPage + 1) % numPages[currentPreset];
 801ce4e:	4ab0      	ldr	r2, [pc, #704]	; (801d110 <buttonCheck+0x608>)
                for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801ce50:	f04f 0a00 	mov.w	sl, #0
                knobPage = (knobPage + 1) % numPages[currentPreset];
 801ce54:	78a3      	ldrb	r3, [r4, #2]
 801ce56:	7821      	ldrb	r1, [r4, #0]
 801ce58:	4dae      	ldr	r5, [pc, #696]	; (801d114 <buttonCheck+0x60c>)
 801ce5a:	5c50      	ldrb	r0, [r2, r1]
 801ce5c:	1c5a      	adds	r2, r3, #1
                setKnobValues(presetKnobValues[currentPreset] + (knobPage * KNOB_PAGE_SIZE));
 801ce5e:	4bae      	ldr	r3, [pc, #696]	; (801d118 <buttonCheck+0x610>)
 801ce60:	4fae      	ldr	r7, [pc, #696]	; (801d11c <buttonCheck+0x614>)
 801ce62:	fb08 3801 	mla	r8, r8, r1, r3
 801ce66:	4bae      	ldr	r3, [pc, #696]	; (801d120 <buttonCheck+0x618>)
 801ce68:	9500      	str	r5, [sp, #0]
 801ce6a:	9302      	str	r3, [sp, #8]
 801ce6c:	4bad      	ldr	r3, [pc, #692]	; (801d124 <buttonCheck+0x61c>)
 801ce6e:	9301      	str	r3, [sp, #4]
                knobPage = (knobPage + 1) % numPages[currentPreset];
 801ce70:	fb92 f3f0 	sdiv	r3, r2, r0
 801ce74:	fb00 2313 	mls	r3, r0, r3, r2
                setKnobValues(presetKnobValues[currentPreset] + (knobPage * KNOB_PAGE_SIZE));
 801ce78:	eb03 0983 	add.w	r9, r3, r3, lsl #2
                knobPage = (knobPage + 1) % numPages[currentPreset];
 801ce7c:	b2db      	uxtb	r3, r3
                setKnobValues(presetKnobValues[currentPreset] + (knobPage * KNOB_PAGE_SIZE));
 801ce7e:	ea4f 0989 	mov.w	r9, r9, lsl #2
                knobPage = (knobPage + 1) % numPages[currentPreset];
 801ce82:	70a3      	strb	r3, [r4, #2]
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801ce84:	f109 0214 	add.w	r2, r9, #20
 801ce88:	4442      	add	r2, r8
 801ce8a:	9203      	str	r2, [sp, #12]
 801ce8c:	462a      	mov	r2, r5
                    if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801ce8e:	5651      	ldrsb	r1, [r2, r1]
 801ce90:	2205      	movs	r2, #5
 801ce92:	ea4f 058a 	mov.w	r5, sl, lsl #2
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801ce96:	4899      	ldr	r0, [pc, #612]	; (801d0fc <buttonCheck+0x5f4>)
                    if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801ce98:	fb12 a203 	smlabb	r2, r2, r3, sl
                    floatADCUI[knob] = -1.0f;
 801ce9c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801cea0:	eb09 0b05 	add.w	fp, r9, r5
                    knobActive[knob] = 0;
 801cea4:	f04f 0e00 	mov.w	lr, #0
                    if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801cea8:	428a      	cmp	r2, r1
                    floatADCUI[knob] = -1.0f;
 801ceaa:	eb07 0c05 	add.w	ip, r7, r5
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801ceae:	4428      	add	r0, r5
 801ceb0:	44c3      	add	fp, r8
                    if (knob + (knobPage * KNOB_PAGE_SIZE) == cvAddParam[currentPreset])
 801ceb2:	f000 80f2 	beq.w	801d09a <buttonCheck+0x592>
                    knobActive[knob] = 0;
 801ceb6:	9b02      	ldr	r3, [sp, #8]
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801ceb8:	ed9b 0a00 	vldr	s0, [fp]
                    knobActive[knob] = 0;
 801cebc:	f803 e00a 	strb.w	lr, [r3, sl]
                for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801cec0:	f10a 0a01 	add.w	sl, sl, #1
                    floatADCUI[knob] = -1.0f;
 801cec4:	edcc 7a00 	vstr	s15, [ip]
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801cec8:	f005 fa8e 	bl	80223e8 <tExpSmooth_setValAndDest>
                    smoothedADC[knob] = values[knob];
 801cecc:	9b01      	ldr	r3, [sp, #4]
                for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801cece:	f1ba 0f05 	cmp.w	sl, #5
                    smoothedADC[knob] = values[knob];
 801ced2:	441d      	add	r5, r3
 801ced4:	f8db 3000 	ldr.w	r3, [fp]
 801ced8:	602b      	str	r3, [r5, #0]
                for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801ceda:	f000 80f2 	beq.w	801d0c2 <buttonCheck+0x5ba>
 801cede:	78a3      	ldrb	r3, [r4, #2]
 801cee0:	7821      	ldrb	r1, [r4, #0]
 801cee2:	9a00      	ldr	r2, [sp, #0]
 801cee4:	e7d3      	b.n	801ce8e <buttonCheck+0x386>
                        previousPreset = currentPreset;
 801cee6:	4c89      	ldr	r4, [pc, #548]	; (801d10c <buttonCheck+0x604>)
 801cee8:	7823      	ldrb	r3, [r4, #0]
 801ceea:	f88b 3010 	strb.w	r3, [fp, #16]
                        if (currentPreset <= 0) currentPreset = (VocodecPresetType)((int)PresetNil - 1);
 801ceee:	2b00      	cmp	r3, #0
 801cef0:	f000 80fc 	beq.w	801d0ec <buttonCheck+0x5e4>
                        else currentPreset = (VocodecPresetType)((int)currentPreset - 1);
 801cef4:	3b01      	subs	r3, #1
 801cef6:	b2db      	uxtb	r3, r3
                        loadingPreset = 1;
 801cef8:	2201      	movs	r2, #1
 801cefa:	7023      	strb	r3, [r4, #0]
 801cefc:	7062      	strb	r2, [r4, #1]
                        OLED_writePreset();
 801cefe:	f7f6 fdc3 	bl	8013a88 <OLED_writePreset>
                if((EE_WriteVariable(VirtAddVarTab[0],  currentPreset)) != HAL_OK)
 801cf02:	4b89      	ldr	r3, [pc, #548]	; (801d128 <buttonCheck+0x620>)
 801cf04:	7821      	ldrb	r1, [r4, #0]
 801cf06:	8818      	ldrh	r0, [r3, #0]
 801cf08:	f7f4 ff1e 	bl	8011d48 <EE_WriteVariable>
 801cf0c:	b108      	cbz	r0, 801cf12 <buttonCheck+0x40a>
                    Error_Handler();
 801cf0e:	f7f6 fd17 	bl	8013940 <Error_Handler>
                        buttonActionsUI[b][a] = 0;
 801cf12:	2300      	movs	r3, #0
                        buttonActionsSFX[b][a] = 0;
 801cf14:	4a85      	ldr	r2, [pc, #532]	; (801d12c <buttonCheck+0x624>)
 801cf16:	21ff      	movs	r1, #255	; 0xff
                        buttonActionsUI[b][a] = 0;
 801cf18:	6033      	str	r3, [r6, #0]
 801cf1a:	6073      	str	r3, [r6, #4]
 801cf1c:	60b3      	str	r3, [r6, #8]
 801cf1e:	60f3      	str	r3, [r6, #12]
 801cf20:	6133      	str	r3, [r6, #16]
 801cf22:	6173      	str	r3, [r6, #20]
 801cf24:	61b3      	str	r3, [r6, #24]
 801cf26:	61f3      	str	r3, [r6, #28]
 801cf28:	6233      	str	r3, [r6, #32]
 801cf2a:	6273      	str	r3, [r6, #36]	; 0x24
 801cf2c:	62b3      	str	r3, [r6, #40]	; 0x28
                        buttonActionsSFX[b][a] = 0;
 801cf2e:	6013      	str	r3, [r2, #0]
 801cf30:	6053      	str	r3, [r2, #4]
 801cf32:	6093      	str	r3, [r2, #8]
 801cf34:	60d3      	str	r3, [r2, #12]
 801cf36:	6113      	str	r3, [r2, #16]
 801cf38:	6153      	str	r3, [r2, #20]
 801cf3a:	6193      	str	r3, [r2, #24]
 801cf3c:	61d3      	str	r3, [r2, #28]
 801cf3e:	6213      	str	r3, [r2, #32]
 801cf40:	6253      	str	r3, [r2, #36]	; 0x24
 801cf42:	6293      	str	r3, [r2, #40]	; 0x28
                    if (buttonActionsUI[ButtonRight][ActionPress] == 1)
 801cf44:	7a33      	ldrb	r3, [r6, #8]
 801cf46:	f88b 1004 	strb.w	r1, [fp, #4]
 801cf4a:	2b01      	cmp	r3, #1
 801cf4c:	f88b 1005 	strb.w	r1, [fp, #5]
 801cf50:	f47f ae94 	bne.w	801cc7c <buttonCheck+0x174>
                        previousPreset = currentPreset;
 801cf54:	4c6d      	ldr	r4, [pc, #436]	; (801d10c <buttonCheck+0x604>)
 801cf56:	7823      	ldrb	r3, [r4, #0]
                        if (currentPreset >= PresetNil - 1) currentPreset = (VocodecPresetType)0;
 801cf58:	2b10      	cmp	r3, #16
                        previousPreset = currentPreset;
 801cf5a:	f88b 3010 	strb.w	r3, [fp, #16]
                        if (currentPreset >= PresetNil - 1) currentPreset = (VocodecPresetType)0;
 801cf5e:	f200 80c3 	bhi.w	801d0e8 <buttonCheck+0x5e0>
                        else currentPreset = (VocodecPresetType)((int)currentPreset + 1);
 801cf62:	3301      	adds	r3, #1
 801cf64:	b2db      	uxtb	r3, r3
                        loadingPreset = 1;
 801cf66:	2201      	movs	r2, #1
 801cf68:	7023      	strb	r3, [r4, #0]
 801cf6a:	7062      	strb	r2, [r4, #1]
                        OLED_writePreset();
 801cf6c:	f7f6 fd8c 	bl	8013a88 <OLED_writePreset>
                if((EE_WriteVariable(VirtAddVarTab[0],  currentPreset)) != HAL_OK)
 801cf70:	4b6d      	ldr	r3, [pc, #436]	; (801d128 <buttonCheck+0x620>)
 801cf72:	7821      	ldrb	r1, [r4, #0]
 801cf74:	8818      	ldrh	r0, [r3, #0]
 801cf76:	f7f4 fee7 	bl	8011d48 <EE_WriteVariable>
 801cf7a:	b108      	cbz	r0, 801cf80 <buttonCheck+0x478>
                    Error_Handler();
 801cf7c:	f7f6 fce0 	bl	8013940 <Error_Handler>
                        buttonActionsUI[b][a] = 0;
 801cf80:	2300      	movs	r3, #0
                        buttonActionsSFX[b][a] = 0;
 801cf82:	4a6a      	ldr	r2, [pc, #424]	; (801d12c <buttonCheck+0x624>)
 801cf84:	21ff      	movs	r1, #255	; 0xff
                        buttonActionsUI[b][a] = 0;
 801cf86:	6033      	str	r3, [r6, #0]
 801cf88:	6073      	str	r3, [r6, #4]
 801cf8a:	60b3      	str	r3, [r6, #8]
 801cf8c:	60f3      	str	r3, [r6, #12]
 801cf8e:	6133      	str	r3, [r6, #16]
 801cf90:	6173      	str	r3, [r6, #20]
 801cf92:	61b3      	str	r3, [r6, #24]
 801cf94:	61f3      	str	r3, [r6, #28]
 801cf96:	6233      	str	r3, [r6, #32]
 801cf98:	6273      	str	r3, [r6, #36]	; 0x24
 801cf9a:	62b3      	str	r3, [r6, #40]	; 0x28
                        buttonActionsSFX[b][a] = 0;
 801cf9c:	6013      	str	r3, [r2, #0]
 801cf9e:	6053      	str	r3, [r2, #4]
 801cfa0:	6093      	str	r3, [r2, #8]
 801cfa2:	60d3      	str	r3, [r2, #12]
 801cfa4:	6113      	str	r3, [r2, #16]
 801cfa6:	6153      	str	r3, [r2, #20]
 801cfa8:	6193      	str	r3, [r2, #24]
 801cfaa:	61d3      	str	r3, [r2, #28]
 801cfac:	6213      	str	r3, [r2, #32]
 801cfae:	6253      	str	r3, [r2, #36]	; 0x24
 801cfb0:	6293      	str	r3, [r2, #40]	; 0x28
                    if (buttonActionsUI[ButtonD][ActionPress] == 1)
 801cfb2:	f896 3020 	ldrb.w	r3, [r6, #32]
 801cfb6:	f88b 1004 	strb.w	r1, [fp, #4]
 801cfba:	2b01      	cmp	r3, #1
 801cfbc:	f88b 1005 	strb.w	r1, [fp, #5]
 801cfc0:	f47f ae61 	bne.w	801cc86 <buttonCheck+0x17e>
                        if (currentTuning == 0)
 801cfc4:	4a5a      	ldr	r2, [pc, #360]	; (801d130 <buttonCheck+0x628>)
 801cfc6:	6813      	ldr	r3, [r2, #0]
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	f040 808b 	bne.w	801d0e4 <buttonCheck+0x5dc>
                            currentTuning = NUM_TUNINGS - 1;
 801cfce:	233e      	movs	r3, #62	; 0x3e
                    centsDeviation[i] = tuningPresets[currentTuning][i];
 801cfd0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801cfd4:	4c57      	ldr	r4, [pc, #348]	; (801d134 <buttonCheck+0x62c>)
 801cfd6:	4f58      	ldr	r7, [pc, #352]	; (801d138 <buttonCheck+0x630>)
 801cfd8:	eb04 1401 	add.w	r4, r4, r1, lsl #4
 801cfdc:	6013      	str	r3, [r2, #0]
 801cfde:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 801cfe2:	6820      	ldr	r0, [r4, #0]
 801cfe4:	3410      	adds	r4, #16
 801cfe6:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801cfea:	463d      	mov	r5, r7
 801cfec:	f854 2c08 	ldr.w	r2, [r4, #-8]
 801cff0:	3710      	adds	r7, #16
 801cff2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801cff6:	4564      	cmp	r4, ip
 801cff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cffa:	d1f2      	bne.n	801cfe2 <buttonCheck+0x4da>
                if (currentPreset == AutotuneMono)
 801cffc:	4b43      	ldr	r3, [pc, #268]	; (801d10c <buttonCheck+0x604>)
 801cffe:	781b      	ldrb	r3, [r3, #0]
 801d000:	2b03      	cmp	r3, #3
 801d002:	f000 809d 	beq.w	801d140 <buttonCheck+0x638>
                        OLED_writeTuning();
 801d006:	f7f6 fe87 	bl	8013d18 <OLED_writeTuning>
                        buttonActionsUI[ButtonD][ActionPress] = 0;
 801d00a:	2300      	movs	r3, #0
 801d00c:	f886 3020 	strb.w	r3, [r6, #32]
                    if (buttonActionsUI[ButtonE][ActionPress] == 1)
 801d010:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 801d014:	2b01      	cmp	r3, #1
 801d016:	f47f ae3b 	bne.w	801cc90 <buttonCheck+0x188>
 801d01a:	e00b      	b.n	801d034 <buttonCheck+0x52c>
                        OLED_writeEditScreen();
 801d01c:	f7f6 fe30 	bl	8013c80 <OLED_writeEditScreen>
                        setLED_Edit(1);
 801d020:	2001      	movs	r0, #1
 801d022:	f7f6 fc91 	bl	8013948 <setLED_Edit>
                        buttonActionsUI[ButtonEdit][ActionPress] = 0;
 801d026:	2300      	movs	r3, #0
 801d028:	7033      	strb	r3, [r6, #0]
                    if (buttonActionsUI[ButtonEdit][ActionHoldContinuous] == 1)
 801d02a:	78f3      	ldrb	r3, [r6, #3]
 801d02c:	2b01      	cmp	r3, #1
 801d02e:	f47f ae36 	bne.w	801cc9e <buttonCheck+0x196>
 801d032:	e656      	b.n	801cce2 <buttonCheck+0x1da>
                        currentTuning = (currentTuning + 1) % NUM_TUNINGS;
 801d034:	493e      	ldr	r1, [pc, #248]	; (801d130 <buttonCheck+0x628>)
 801d036:	4b41      	ldr	r3, [pc, #260]	; (801d13c <buttonCheck+0x634>)
 801d038:	680a      	ldr	r2, [r1, #0]
                    centsDeviation[i] = tuningPresets[currentTuning][i];
 801d03a:	4c3e      	ldr	r4, [pc, #248]	; (801d134 <buttonCheck+0x62c>)
                        currentTuning = (currentTuning + 1) % NUM_TUNINGS;
 801d03c:	3201      	adds	r2, #1
 801d03e:	4f3e      	ldr	r7, [pc, #248]	; (801d138 <buttonCheck+0x630>)
 801d040:	fba3 0302 	umull	r0, r3, r3, r2
 801d044:	1ad0      	subs	r0, r2, r3
 801d046:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 801d04a:	095b      	lsrs	r3, r3, #5
 801d04c:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 801d050:	1ad3      	subs	r3, r2, r3
                    centsDeviation[i] = tuningPresets[currentTuning][i];
 801d052:	eb03 0243 	add.w	r2, r3, r3, lsl #1
                        currentTuning = (currentTuning + 1) % NUM_TUNINGS;
 801d056:	600b      	str	r3, [r1, #0]
                    centsDeviation[i] = tuningPresets[currentTuning][i];
 801d058:	eb04 1402 	add.w	r4, r4, r2, lsl #4
 801d05c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 801d060:	6820      	ldr	r0, [r4, #0]
 801d062:	3410      	adds	r4, #16
 801d064:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801d068:	463d      	mov	r5, r7
 801d06a:	f854 2c08 	ldr.w	r2, [r4, #-8]
 801d06e:	3710      	adds	r7, #16
 801d070:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d074:	4564      	cmp	r4, ip
 801d076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d078:	d1f2      	bne.n	801d060 <buttonCheck+0x558>
                if (currentPreset == AutotuneMono)
 801d07a:	4b24      	ldr	r3, [pc, #144]	; (801d10c <buttonCheck+0x604>)
 801d07c:	781b      	ldrb	r3, [r3, #0]
 801d07e:	2b03      	cmp	r3, #3
 801d080:	d101      	bne.n	801d086 <buttonCheck+0x57e>
                    calculateNoteArray();
 801d082:	f7fe f845 	bl	801b110 <calculateNoteArray>
                        OLED_writeTuning();
 801d086:	f7f6 fe47 	bl	8013d18 <OLED_writeTuning>
                        buttonActionsUI[ButtonE][ActionPress] = 0;
 801d08a:	2300      	movs	r3, #0
 801d08c:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
                    if (buttonActionsUI[ButtonEdit][ActionPress])
 801d090:	7833      	ldrb	r3, [r6, #0]
 801d092:	2b00      	cmp	r3, #0
 801d094:	f43f ae00 	beq.w	801cc98 <buttonCheck+0x190>
 801d098:	e7c0      	b.n	801d01c <buttonCheck+0x514>
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d09a:	9d03      	ldr	r5, [sp, #12]
                    knobActive[knob] = 0;
 801d09c:	2200      	movs	r2, #0
                    floatADCUI[knob] = -1.0f;
 801d09e:	4b18      	ldr	r3, [pc, #96]	; (801d100 <buttonCheck+0x5f8>)
                for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d0a0:	f10a 0a01 	add.w	sl, sl, #1
                    knobActive[knob] = 0;
 801d0a4:	9902      	ldr	r1, [sp, #8]
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d0a6:	ed95 0a00 	vldr	s0, [r5]
 801d0aa:	4816      	ldr	r0, [pc, #88]	; (801d104 <buttonCheck+0x5fc>)
                    knobActive[knob] = 0;
 801d0ac:	714a      	strb	r2, [r1, #5]
                    floatADCUI[knob] = -1.0f;
 801d0ae:	617b      	str	r3, [r7, #20]
                    tExpSmooth_setValAndDest(&adc[knob], values[knob]);
 801d0b0:	f005 f99a 	bl	80223e8 <tExpSmooth_setValAndDest>
                    smoothedADC[knob] = values[knob];
 801d0b4:	682b      	ldr	r3, [r5, #0]
                for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d0b6:	f1ba 0f05 	cmp.w	sl, #5
                    smoothedADC[knob] = values[knob];
 801d0ba:	9a01      	ldr	r2, [sp, #4]
 801d0bc:	6153      	str	r3, [r2, #20]
                for (int i = 0; i < KNOB_PAGE_SIZE; i++)
 801d0be:	f47f af0e 	bne.w	801cede <buttonCheck+0x3d6>
                        OLEDwriteString("P", 1, 110, FirstLine);
 801d0c2:	2300      	movs	r3, #0
 801d0c4:	226e      	movs	r2, #110	; 0x6e
 801d0c6:	2101      	movs	r1, #1
 801d0c8:	480f      	ldr	r0, [pc, #60]	; (801d108 <buttonCheck+0x600>)
 801d0ca:	f7f6 feb7 	bl	8013e3c <OLEDwriteString>
                        OLEDwriteInt(knobPage, 1, 120, FirstLine);
 801d0ce:	78a0      	ldrb	r0, [r4, #2]
 801d0d0:	2300      	movs	r3, #0
 801d0d2:	2278      	movs	r2, #120	; 0x78
 801d0d4:	2101      	movs	r1, #1
 801d0d6:	f7f6 fedb 	bl	8013e90 <OLEDwriteInt>
                        buttonActionsUI[ButtonUp][ActionPress] = 0;
 801d0da:	2300      	movs	r3, #0
 801d0dc:	7433      	strb	r3, [r6, #16]
            }
 801d0de:	b007      	add	sp, #28
 801d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            currentTuning = (currentTuning - 1);
 801d0e4:	3b01      	subs	r3, #1
 801d0e6:	e773      	b.n	801cfd0 <buttonCheck+0x4c8>
                        if (currentPreset >= PresetNil - 1) currentPreset = (VocodecPresetType)0;
 801d0e8:	2300      	movs	r3, #0
 801d0ea:	e73c      	b.n	801cf66 <buttonCheck+0x45e>
                        if (currentPreset <= 0) currentPreset = (VocodecPresetType)((int)PresetNil - 1);
 801d0ec:	2311      	movs	r3, #17
 801d0ee:	e703      	b.n	801cef8 <buttonCheck+0x3f0>
                if (knobPage == 0) knobPage = numPages[currentPreset] - 1;
 801d0f0:	4b07      	ldr	r3, [pc, #28]	; (801d110 <buttonCheck+0x608>)
 801d0f2:	5c5b      	ldrb	r3, [r3, r1]
 801d0f4:	3b01      	subs	r3, #1
 801d0f6:	b2db      	uxtb	r3, r3
 801d0f8:	e61c      	b.n	801cd34 <buttonCheck+0x22c>
 801d0fa:	bf00      	nop
 801d0fc:	20018838 	.word	0x20018838
 801d100:	bf800000 	.word	0xbf800000
 801d104:	2001884c 	.word	0x2001884c
 801d108:	08145784 	.word	0x08145784
 801d10c:	20000694 	.word	0x20000694
 801d110:	20018850 	.word	0x20018850
 801d114:	20018978 	.word	0x20018978
 801d118:	20002d50 	.word	0x20002d50
 801d11c:	2001887c 	.word	0x2001887c
 801d120:	20017954 	.word	0x20017954
 801d124:	20018864 	.word	0x20018864
 801d128:	2000001c 	.word	0x2000001c
 801d12c:	20018724 	.word	0x20018724
 801d130:	20000660 	.word	0x20000660
 801d134:	0802ae34 	.word	0x0802ae34
 801d138:	20000664 	.word	0x20000664
 801d13c:	04104105 	.word	0x04104105
                    calculateNoteArray();
 801d140:	f7fd ffe6 	bl	801b110 <calculateNoteArray>
 801d144:	e75f      	b.n	801d006 <buttonCheck+0x4fe>
                            keyCenter = (keyCenter + 1) % 12;
 801d146:	4d13      	ldr	r5, [pc, #76]	; (801d194 <buttonCheck+0x68c>)
 801d148:	f103 33aa 	add.w	r3, r3, #2863311530	; 0xaaaaaaaa
                            OLEDclearLine(SecondLine);
 801d14c:	4620      	mov	r0, r4
                            keyCenter = (keyCenter + 1) % 12;
 801d14e:	782a      	ldrb	r2, [r5, #0]
 801d150:	3201      	adds	r2, #1
 801d152:	fba3 1302 	umull	r1, r3, r3, r2
 801d156:	08db      	lsrs	r3, r3, #3
 801d158:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d15c:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 801d160:	702b      	strb	r3, [r5, #0]
                            OLEDclearLine(SecondLine);
 801d162:	f7f6 fe57 	bl	8013e14 <OLEDclearLine>
                            OLEDwriteString("KEY: ", 5, 0, SecondLine);
 801d166:	2200      	movs	r2, #0
 801d168:	4623      	mov	r3, r4
 801d16a:	2105      	movs	r1, #5
 801d16c:	480a      	ldr	r0, [pc, #40]	; (801d198 <buttonCheck+0x690>)
 801d16e:	f7f6 fe65 	bl	8013e3c <OLEDwriteString>
                            OLEDwritePitchClass(keyCenter+60, 64, SecondLine);
 801d172:	782b      	ldrb	r3, [r5, #0]
 801d174:	4621      	mov	r1, r4
 801d176:	2040      	movs	r0, #64	; 0x40
 801d178:	333c      	adds	r3, #60	; 0x3c
 801d17a:	ee00 3a10 	vmov	s0, r3
 801d17e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d182:	f7f6 fee9 	bl	8013f58 <OLEDwritePitchClass>
                            buttonActionsUI[ButtonC][ActionPress] = 0;
 801d186:	2300      	movs	r3, #0
                            buttonActionsSFX[ButtonC][ActionPress] = 0;
 801d188:	4a04      	ldr	r2, [pc, #16]	; (801d19c <buttonCheck+0x694>)
                            buttonActionsUI[ButtonC][ActionPress] = 0;
 801d18a:	7733      	strb	r3, [r6, #28]
                            buttonActionsUI[ButtonEdit][ActionHoldContinuous] = 0;
 801d18c:	70f3      	strb	r3, [r6, #3]
                            buttonActionsSFX[ButtonC][ActionPress] = 0;
 801d18e:	7713      	strb	r3, [r2, #28]
 801d190:	e5ab      	b.n	801ccea <buttonCheck+0x1e2>
 801d192:	bf00      	nop
 801d194:	2000065c 	.word	0x2000065c
 801d198:	081457a0 	.word	0x081457a0
 801d19c:	20018724 	.word	0x20018724

0801d1a0 <adcCheck>:
                    floatADC[i] = (float) (ADC_values[i]>>6) * INV_TWO_TO_10;
 801d1a0:	486f      	ldr	r0, [pc, #444]	; (801d360 <adcCheck+0x1c0>)
 801d1a2:	eddf 4a70 	vldr	s9, [pc, #448]	; 801d364 <adcCheck+0x1c4>
            {
 801d1a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    floatADC[i] = (float) (ADC_values[i]>>6) * INV_TWO_TO_10;
 801d1aa:	8801      	ldrh	r1, [r0, #0]
 801d1ac:	8842      	ldrh	r2, [r0, #2]
 801d1ae:	8883      	ldrh	r3, [r0, #4]
 801d1b0:	0989      	lsrs	r1, r1, #6
 801d1b2:	0992      	lsrs	r2, r2, #6
                if (firstADCPass)
 801d1b4:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 801d384 <adcCheck+0x1e4>
                    floatADC[i] = (float) (ADC_values[i]>>6) * INV_TWO_TO_10;
 801d1b8:	099b      	lsrs	r3, r3, #6
 801d1ba:	ee05 1a10 	vmov	s10, r1
 801d1be:	ee05 2a90 	vmov	s11, r2
 801d1c2:	88c1      	ldrh	r1, [r0, #6]
 801d1c4:	ee06 3a10 	vmov	s12, r3
 801d1c8:	8902      	ldrh	r2, [r0, #8]
 801d1ca:	8943      	ldrh	r3, [r0, #10]
 801d1cc:	0989      	lsrs	r1, r1, #6
 801d1ce:	0992      	lsrs	r2, r2, #6
 801d1d0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801d1d4:	099b      	lsrs	r3, r3, #6
 801d1d6:	ee06 1a90 	vmov	s13, r1
 801d1da:	ee07 2a10 	vmov	s14, r2
 801d1de:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801d1e2:	ee07 3a90 	vmov	s15, r3
 801d1e6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801d1ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d1ee:	4c5e      	ldr	r4, [pc, #376]	; (801d368 <adcCheck+0x1c8>)
 801d1f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                if (firstADCPass)
 801d1f4:	f8d8 2014 	ldr.w	r2, [r8, #20]
                    floatADC[i] = (float) (ADC_values[i]>>6) * INV_TWO_TO_10;
 801d1f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1fc:	ee25 5a24 	vmul.f32	s10, s10, s9
 801d200:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801d204:	ee26 6a24 	vmul.f32	s12, s12, s9
 801d208:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801d20c:	ed84 5a00 	vstr	s10, [r4]
 801d210:	ee27 7a24 	vmul.f32	s14, s14, s9
 801d214:	edc4 5a01 	vstr	s11, [r4, #4]
 801d218:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801d21c:	ed84 6a02 	vstr	s12, [r4, #8]
 801d220:	edc4 6a03 	vstr	s13, [r4, #12]
 801d224:	ed84 7a04 	vstr	s14, [r4, #16]
 801d228:	edc4 7a05 	vstr	s15, [r4, #20]
                if (firstADCPass)
 801d22c:	b14a      	cbz	r2, 801d242 <adcCheck+0xa2>
 801d22e:	4d4f      	ldr	r5, [pc, #316]	; (801d36c <adcCheck+0x1cc>)
                    firstADCPass = 0;
 801d230:	2600      	movs	r6, #0
 801d232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d236:	e894 0003 	ldmia.w	r4, {r0, r1}
 801d23a:	f8c8 6014 	str.w	r6, [r8, #20]
 801d23e:	e885 0003 	stmia.w	r5, {r0, r1}
 801d242:	4d49      	ldr	r5, [pc, #292]	; (801d368 <adcCheck+0x1c8>)
            {
 801d244:	f04f 0b00 	mov.w	fp, #0
 801d248:	4e48      	ldr	r6, [pc, #288]	; (801d36c <adcCheck+0x1cc>)
 801d24a:	4c49      	ldr	r4, [pc, #292]	; (801d370 <adcCheck+0x1d0>)
 801d24c:	4f49      	ldr	r7, [pc, #292]	; (801d374 <adcCheck+0x1d4>)
 801d24e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 801d388 <adcCheck+0x1e8>
                            if (i == 5) writeKnobFlag = cvAddParam[currentPreset] - (knobPage * KNOB_PAGE_SIZE);
 801d252:	f8df a138 	ldr.w	sl, [pc, #312]	; 801d38c <adcCheck+0x1ec>
 801d256:	e031      	b.n	801d2bc <adcCheck+0x11c>
                        if (buttonActionsUI[ButtonEdit][ActionHoldContinuous])
 801d258:	4947      	ldr	r1, [pc, #284]	; (801d378 <adcCheck+0x1d8>)
 801d25a:	78ca      	ldrb	r2, [r1, #3]
 801d25c:	b16a      	cbz	r2, 801d27a <adcCheck+0xda>
                            if (i != 5) cvAddParam[currentPreset] = i + (knobPage * KNOB_PAGE_SIZE);;
 801d25e:	f1bb 0f05 	cmp.w	fp, #5
 801d262:	d008      	beq.n	801d276 <adcCheck+0xd6>
 801d264:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801d268:	f89a 0000 	ldrb.w	r0, [sl]
 801d26c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d270:	4b42      	ldr	r3, [pc, #264]	; (801d37c <adcCheck+0x1dc>)
 801d272:	445a      	add	r2, fp
 801d274:	541a      	strb	r2, [r3, r0]
                            buttonActionsUI[ButtonEdit][ActionHoldContinuous] = 0;
 801d276:	2200      	movs	r2, #0
 801d278:	70ca      	strb	r2, [r1, #3]
                        lastFloatADC[i] = floatADC[i];
 801d27a:	ed15 0a01 	vldr	s0, [r5, #-4]
                        if (i == 5) writeKnobFlag = cvAddParam[currentPreset] - (knobPage * KNOB_PAGE_SIZE);
 801d27e:	f1bb 0f05 	cmp.w	fp, #5
                        lastFloatADC[i] = floatADC[i];
 801d282:	ed06 0a01 	vstr	s0, [r6, #-4]
                        if (i == 5) writeKnobFlag = cvAddParam[currentPreset] - (knobPage * KNOB_PAGE_SIZE);
 801d286:	d05e      	beq.n	801d346 <adcCheck+0x1a6>
                        else writeKnobFlag = i;
 801d288:	fa4f f28b 	sxtb.w	r2, fp
                    if (floatADCUI[i] >= 0.0f)
 801d28c:	edd4 7a00 	vldr	s15, [r4]
                        knobActive[i] = 1;
 801d290:	2101      	movs	r1, #1
 801d292:	f888 201c 	strb.w	r2, [r8, #28]
                    if (floatADCUI[i] >= 0.0f)
 801d296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
                        knobActive[i] = 1;
 801d29a:	f809 100b 	strb.w	r1, [r9, fp]
                    if (floatADCUI[i] >= 0.0f)
 801d29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2a2:	da28      	bge.n	801d2f6 <adcCheck+0x156>
                    if (knobActive[i]) tExpSmooth_setDest(&adc[i], floatADC[i]);
 801d2a4:	4b36      	ldr	r3, [pc, #216]	; (801d380 <adcCheck+0x1e0>)
 801d2a6:	eb03 008b 	add.w	r0, r3, fp, lsl #2
 801d2aa:	f005 f899 	bl	80223e0 <tExpSmooth_setDest>
                for (int i = 0; i < 6; i++)
 801d2ae:	f10b 0b01 	add.w	fp, fp, #1
 801d2b2:	3404      	adds	r4, #4
 801d2b4:	3704      	adds	r7, #4
 801d2b6:	f1bb 0f06 	cmp.w	fp, #6
 801d2ba:	d042      	beq.n	801d342 <adcCheck+0x1a2>
                    if (fastabsf(floatADC[i] - lastFloatADC[i]) > adcHysteresisThreshold)
 801d2bc:	ecf6 7a01 	vldmia	r6!, {s15}
 801d2c0:	ecb5 0a01 	vldmia	r5!, {s0}
 801d2c4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d2c8:	f006 fc44 	bl	8023b54 <fastabsf>
 801d2cc:	edd8 7a06 	vldr	s15, [r8, #24]
 801d2d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2d8:	dcbe      	bgt.n	801d258 <adcCheck+0xb8>
                    if (floatADCUI[i] >= 0.0f)
 801d2da:	edd4 7a00 	vldr	s15, [r4]
 801d2de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2e6:	da06      	bge.n	801d2f6 <adcCheck+0x156>
 801d2e8:	f819 200b 	ldrb.w	r2, [r9, fp]
                    if (knobActive[i]) tExpSmooth_setDest(&adc[i], floatADC[i]);
 801d2ec:	2a00      	cmp	r2, #0
 801d2ee:	d0de      	beq.n	801d2ae <adcCheck+0x10e>
 801d2f0:	ed15 0a01 	vldr	s0, [r5, #-4]
 801d2f4:	e7d6      	b.n	801d2a4 <adcCheck+0x104>
                        if (fastabsf(smoothedADC[i] - floatADCUI[i]) > adcHysteresisThreshold)
 801d2f6:	ed97 0a00 	vldr	s0, [r7]
 801d2fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d2fe:	f006 fc29 	bl	8023b54 <fastabsf>
 801d302:	edd8 7a06 	vldr	s15, [r8, #24]
 801d306:	f819 200b 	ldrb.w	r2, [r9, fp]
 801d30a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d312:	ddeb      	ble.n	801d2ec <adcCheck+0x14c>
                            if (i == 5) writeKnobFlag = cvAddParam[currentPreset] - (knobPage * KNOB_PAGE_SIZE);
 801d314:	f1bb 0f05 	cmp.w	fp, #5
 801d318:	d004      	beq.n	801d324 <adcCheck+0x184>
                            else writeKnobFlag = i;
 801d31a:	f888 b01c 	strb.w	fp, [r8, #28]
                    if (knobActive[i]) tExpSmooth_setDest(&adc[i], floatADC[i]);
 801d31e:	2a00      	cmp	r2, #0
 801d320:	d0c5      	beq.n	801d2ae <adcCheck+0x10e>
 801d322:	e7e5      	b.n	801d2f0 <adcCheck+0x150>
                            if (i == 5) writeKnobFlag = cvAddParam[currentPreset] - (knobPage * KNOB_PAGE_SIZE);
 801d324:	f89a 1002 	ldrb.w	r1, [sl, #2]
 801d328:	f89a 0000 	ldrb.w	r0, [sl]
 801d32c:	ebc1 1c81 	rsb	ip, r1, r1, lsl #6
 801d330:	4b12      	ldr	r3, [pc, #72]	; (801d37c <adcCheck+0x1dc>)
 801d332:	ebc1 018c 	rsb	r1, r1, ip, lsl #2
 801d336:	5c18      	ldrb	r0, [r3, r0]
 801d338:	4401      	add	r1, r0
 801d33a:	f888 101c 	strb.w	r1, [r8, #28]
                    if (knobActive[i]) tExpSmooth_setDest(&adc[i], floatADC[i]);
 801d33e:	2a00      	cmp	r2, #0
 801d340:	d1d6      	bne.n	801d2f0 <adcCheck+0x150>
            }
 801d342:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        if (i == 5) writeKnobFlag = cvAddParam[currentPreset] - (knobPage * KNOB_PAGE_SIZE);
 801d346:	f89a 1002 	ldrb.w	r1, [sl, #2]
 801d34a:	f89a 2000 	ldrb.w	r2, [sl]
 801d34e:	ebc1 1081 	rsb	r0, r1, r1, lsl #6
 801d352:	4b0a      	ldr	r3, [pc, #40]	; (801d37c <adcCheck+0x1dc>)
 801d354:	ebc1 0180 	rsb	r1, r1, r0, lsl #2
 801d358:	5c9a      	ldrb	r2, [r3, r2]
 801d35a:	440a      	add	r2, r1
 801d35c:	b252      	sxtb	r2, r2
 801d35e:	e795      	b.n	801d28c <adcCheck+0xec>
 801d360:	30001080 	.word	0x30001080
 801d364:	3a800000 	.word	0x3a800000
 801d368:	2001870c 	.word	0x2001870c
 801d36c:	2001898c 	.word	0x2001898c
 801d370:	2001887c 	.word	0x2001887c
 801d374:	20018864 	.word	0x20018864
 801d378:	20018894 	.word	0x20018894
 801d37c:	20018978 	.word	0x20018978
 801d380:	20018838 	.word	0x20018838
 801d384:	200002cc 	.word	0x200002cc
 801d388:	20017954 	.word	0x20017954
 801d38c:	20000694 	.word	0x20000694

0801d390 <resetKnobValues>:
            {
 801d390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    knobActive[i] = 0;
 801d394:	2200      	movs	r2, #0
                    floatADCUI[i] = -1.0f;
 801d396:	4b20      	ldr	r3, [pc, #128]	; (801d418 <resetKnobValues+0x88>)
                    knobActive[i] = 0;
 801d398:	f8df b098 	ldr.w	fp, [pc, #152]	; 801d434 <resetKnobValues+0xa4>
                    if (i != 5) value = presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)];
 801d39c:	f04f 0905 	mov.w	r9, #5
                    floatADCUI[i] = -1.0f;
 801d3a0:	4e1e      	ldr	r6, [pc, #120]	; (801d41c <resetKnobValues+0x8c>)
                for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 801d3a2:	4614      	mov	r4, r2
                    knobActive[i] = 0;
 801d3a4:	4690      	mov	r8, r2
 801d3a6:	4f1e      	ldr	r7, [pc, #120]	; (801d420 <resetKnobValues+0x90>)
 801d3a8:	4d1e      	ldr	r5, [pc, #120]	; (801d424 <resetKnobValues+0x94>)
 801d3aa:	f8df a08c 	ldr.w	sl, [pc, #140]	; 801d438 <resetKnobValues+0xa8>
 801d3ae:	f80b 2b01 	strb.w	r2, [fp], #1
                    floatADCUI[i] = -1.0f;
 801d3b2:	f846 3b04 	str.w	r3, [r6], #4
            {
 801d3b6:	ed2d 8b02 	vpush	{d8}
                    floatADCUI[i] = -1.0f;
 801d3ba:	ee08 3a90 	vmov	s17, r3
                    if (i != 5) value = presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)];
 801d3be:	f89a 3000 	ldrb.w	r3, [sl]
                    tExpSmooth_setValAndDest(&adc[i], value);
 801d3c2:	4628      	mov	r0, r5
                    if (i != 5) value = presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)];
 801d3c4:	f89a c002 	ldrb.w	ip, [sl, #2]
 801d3c8:	3504      	adds	r5, #4
 801d3ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d3ce:	4a16      	ldr	r2, [pc, #88]	; (801d428 <resetKnobValues+0x98>)
 801d3d0:	fb19 4c0c 	smlabb	ip, r9, ip, r4
                for (int i = 0; i < NUM_ADC_CHANNELS; i++)
 801d3d4:	3401      	adds	r4, #1
                    if (i != 5) value = presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)];
 801d3d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d3da:	4463      	add	r3, ip
 801d3dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d3e0:	ed93 8a00 	vldr	s16, [r3]
                    tExpSmooth_setValAndDest(&adc[i], value);
 801d3e4:	eeb0 0a48 	vmov.f32	s0, s16
 801d3e8:	f004 fffe 	bl	80223e8 <tExpSmooth_setValAndDest>
                    if (i != 5) value = presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)];
 801d3ec:	2c05      	cmp	r4, #5
                    smoothedADC[i] = value;
 801d3ee:	eca7 8a01 	vstmia	r7!, {s16}
                    knobActive[i] = 0;
 801d3f2:	f80b 8b01 	strb.w	r8, [fp], #1
                    floatADCUI[i] = -1.0f;
 801d3f6:	ece6 8a01 	vstmia	r6!, {s17}
                    if (i != 5) value = presetKnobValues[currentPreset][i + (knobPage * KNOB_PAGE_SIZE)];
 801d3fa:	d1e0      	bne.n	801d3be <resetKnobValues+0x2e>
                    tExpSmooth_setValAndDest(&adc[i], value);
 801d3fc:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 801d42c <resetKnobValues+0x9c>
 801d400:	480b      	ldr	r0, [pc, #44]	; (801d430 <resetKnobValues+0xa0>)
 801d402:	eeb0 0a48 	vmov.f32	s0, s16
 801d406:	f004 ffef 	bl	80223e8 <tExpSmooth_setValAndDest>
                    smoothedADC[i] = value;
 801d40a:	4b05      	ldr	r3, [pc, #20]	; (801d420 <resetKnobValues+0x90>)
 801d40c:	ed83 8a05 	vstr	s16, [r3, #20]
            }
 801d410:	ecbd 8b02 	vpop	{d8}
 801d414:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d418:	bf800000 	.word	0xbf800000
 801d41c:	2001887c 	.word	0x2001887c
 801d420:	20018864 	.word	0x20018864
 801d424:	20018838 	.word	0x20018838
 801d428:	20002d50 	.word	0x20002d50
 801d42c:	00000000 	.word	0x00000000
 801d430:	2001884c 	.word	0x2001884c
 801d434:	20017954 	.word	0x20017954
 801d438:	20000694 	.word	0x20000694

0801d43c <UIVocoderButtons>:
            }

            const char* UIVocoderButtons(VocodecButton button, ButtonAction action)
            {
                const char* writeString = "";
                if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801d43c:	4b15      	ldr	r3, [pc, #84]	; (801d494 <UIVocoderButtons+0x58>)
            {
 801d43e:	b410      	push	{r4}
                if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801d440:	7d1a      	ldrb	r2, [r3, #20]
 801d442:	2a01      	cmp	r2, #1
 801d444:	d01b      	beq.n	801d47e <UIVocoderButtons+0x42>
                const char* writeString = "";
 801d446:	4814      	ldr	r0, [pc, #80]	; (801d498 <UIVocoderButtons+0x5c>)
                {
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
                    buttonActionsUI[ButtonA][ActionPress] = 0;
                }
                if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801d448:	7e1a      	ldrb	r2, [r3, #24]
 801d44a:	2a01      	cmp	r2, #1
 801d44c:	d108      	bne.n	801d460 <UIVocoderButtons+0x24>
                {
                    writeString = internalExternal ? "EXTERNAL" : "INTERNAL";
 801d44e:	4a13      	ldr	r2, [pc, #76]	; (801d49c <UIVocoderButtons+0x60>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d450:	2400      	movs	r4, #0
                    writeString = internalExternal ? "EXTERNAL" : "INTERNAL";
 801d452:	4813      	ldr	r0, [pc, #76]	; (801d4a0 <UIVocoderButtons+0x64>)
 801d454:	7811      	ldrb	r1, [r2, #0]
 801d456:	4a13      	ldr	r2, [pc, #76]	; (801d4a4 <UIVocoderButtons+0x68>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d458:	761c      	strb	r4, [r3, #24]
                    writeString = internalExternal ? "EXTERNAL" : "INTERNAL";
 801d45a:	42a1      	cmp	r1, r4
 801d45c:	bf08      	it	eq
 801d45e:	4610      	moveq	r0, r2
                }
                if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801d460:	7f1a      	ldrb	r2, [r3, #28]
 801d462:	2a01      	cmp	r2, #1
 801d464:	d108      	bne.n	801d478 <UIVocoderButtons+0x3c>
                {
                    writeString = vocFreezeLPC ? "FROZEN" : "UNFROZEN";
 801d466:	4a10      	ldr	r2, [pc, #64]	; (801d4a8 <UIVocoderButtons+0x6c>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d468:	2400      	movs	r4, #0
                    writeString = vocFreezeLPC ? "FROZEN" : "UNFROZEN";
 801d46a:	4810      	ldr	r0, [pc, #64]	; (801d4ac <UIVocoderButtons+0x70>)
 801d46c:	6811      	ldr	r1, [r2, #0]
 801d46e:	4a10      	ldr	r2, [pc, #64]	; (801d4b0 <UIVocoderButtons+0x74>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d470:	771c      	strb	r4, [r3, #28]
                    writeString = vocFreezeLPC ? "FROZEN" : "UNFROZEN";
 801d472:	42a1      	cmp	r1, r4
 801d474:	bf08      	it	eq
 801d476:	4610      	moveq	r0, r2
                }
                return writeString;
            }
 801d478:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d47c:	4770      	bx	lr
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801d47e:	4a0d      	ldr	r2, [pc, #52]	; (801d4b4 <UIVocoderButtons+0x78>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d480:	2400      	movs	r4, #0
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801d482:	480d      	ldr	r0, [pc, #52]	; (801d4b8 <UIVocoderButtons+0x7c>)
 801d484:	7811      	ldrb	r1, [r2, #0]
 801d486:	4a0d      	ldr	r2, [pc, #52]	; (801d4bc <UIVocoderButtons+0x80>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d488:	751c      	strb	r4, [r3, #20]
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801d48a:	2901      	cmp	r1, #1
 801d48c:	bf98      	it	ls
 801d48e:	4610      	movls	r0, r2
 801d490:	e7da      	b.n	801d448 <UIVocoderButtons+0xc>
 801d492:	bf00      	nop
 801d494:	20018894 	.word	0x20018894
 801d498:	08145850 	.word	0x08145850
 801d49c:	20000548 	.word	0x20000548
 801d4a0:	081457b8 	.word	0x081457b8
 801d4a4:	081457c4 	.word	0x081457c4
 801d4a8:	2000054c 	.word	0x2000054c
 801d4ac:	081457d0 	.word	0x081457d0
 801d4b0:	081457d8 	.word	0x081457d8
 801d4b4:	20000040 	.word	0x20000040
 801d4b8:	081457a8 	.word	0x081457a8
 801d4bc:	081457b0 	.word	0x081457b0

0801d4c0 <UIVocoderChButtons>:

            const char* UIVocoderChButtons(VocodecButton button, ButtonAction action)
            {
                const char* writeString = "";
                if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801d4c0:	4b15      	ldr	r3, [pc, #84]	; (801d518 <UIVocoderChButtons+0x58>)
            {
 801d4c2:	b410      	push	{r4}
                if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801d4c4:	7d1a      	ldrb	r2, [r3, #20]
 801d4c6:	2a01      	cmp	r2, #1
 801d4c8:	d01b      	beq.n	801d502 <UIVocoderChButtons+0x42>
                const char* writeString = "";
 801d4ca:	4814      	ldr	r0, [pc, #80]	; (801d51c <UIVocoderChButtons+0x5c>)
                {
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
                    buttonActionsUI[ButtonA][ActionPress] = 0;
                }
                if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801d4cc:	7e1a      	ldrb	r2, [r3, #24]
 801d4ce:	2a01      	cmp	r2, #1
 801d4d0:	d108      	bne.n	801d4e4 <UIVocoderChButtons+0x24>
                {
                    writeString = internalExternal ? "EXTERNAL" : "INTERNAL";
 801d4d2:	4a13      	ldr	r2, [pc, #76]	; (801d520 <UIVocoderChButtons+0x60>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d4d4:	2400      	movs	r4, #0
                    writeString = internalExternal ? "EXTERNAL" : "INTERNAL";
 801d4d6:	4813      	ldr	r0, [pc, #76]	; (801d524 <UIVocoderChButtons+0x64>)
 801d4d8:	7811      	ldrb	r1, [r2, #0]
 801d4da:	4a13      	ldr	r2, [pc, #76]	; (801d528 <UIVocoderChButtons+0x68>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d4dc:	761c      	strb	r4, [r3, #24]
                    writeString = internalExternal ? "EXTERNAL" : "INTERNAL";
 801d4de:	42a1      	cmp	r1, r4
 801d4e0:	bf08      	it	eq
 801d4e2:	4610      	moveq	r0, r2
                }
                if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801d4e4:	7f1a      	ldrb	r2, [r3, #28]
 801d4e6:	2a01      	cmp	r2, #1
 801d4e8:	d108      	bne.n	801d4fc <UIVocoderChButtons+0x3c>
                {
                    writeString = vocChFreeze ? "FROZEN" : "UNFROZEN";
 801d4ea:	4a10      	ldr	r2, [pc, #64]	; (801d52c <UIVocoderChButtons+0x6c>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d4ec:	2400      	movs	r4, #0
                    writeString = vocChFreeze ? "FROZEN" : "UNFROZEN";
 801d4ee:	4810      	ldr	r0, [pc, #64]	; (801d530 <UIVocoderChButtons+0x70>)
 801d4f0:	6811      	ldr	r1, [r2, #0]
 801d4f2:	4a10      	ldr	r2, [pc, #64]	; (801d534 <UIVocoderChButtons+0x74>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d4f4:	771c      	strb	r4, [r3, #28]
                    writeString = vocChFreeze ? "FROZEN" : "UNFROZEN";
 801d4f6:	42a1      	cmp	r1, r4
 801d4f8:	bf08      	it	eq
 801d4fa:	4610      	moveq	r0, r2
                }
                return writeString;
            }
 801d4fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d500:	4770      	bx	lr
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801d502:	4a0d      	ldr	r2, [pc, #52]	; (801d538 <UIVocoderChButtons+0x78>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d504:	2400      	movs	r4, #0
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801d506:	480d      	ldr	r0, [pc, #52]	; (801d53c <UIVocoderChButtons+0x7c>)
 801d508:	7811      	ldrb	r1, [r2, #0]
 801d50a:	4a0d      	ldr	r2, [pc, #52]	; (801d540 <UIVocoderChButtons+0x80>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d50c:	751c      	strb	r4, [r3, #20]
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801d50e:	2901      	cmp	r1, #1
 801d510:	bf98      	it	ls
 801d512:	4610      	movls	r0, r2
 801d514:	e7da      	b.n	801d4cc <UIVocoderChButtons+0xc>
 801d516:	bf00      	nop
 801d518:	20018894 	.word	0x20018894
 801d51c:	08145850 	.word	0x08145850
 801d520:	20000548 	.word	0x20000548
 801d524:	081457b8 	.word	0x081457b8
 801d528:	081457c4 	.word	0x081457c4
 801d52c:	20000554 	.word	0x20000554
 801d530:	081457d0 	.word	0x081457d0
 801d534:	081457d8 	.word	0x081457d8
 801d538:	20000040 	.word	0x20000040
 801d53c:	081457a8 	.word	0x081457a8
 801d540:	081457b0 	.word	0x081457b0

0801d544 <UIPitchShiftButtons>:

            const char* UIPitchShiftButtons(VocodecButton button, ButtonAction action)
            {
                const char* writeString = "";
                return writeString;
            }
 801d544:	4800      	ldr	r0, [pc, #0]	; (801d548 <UIPitchShiftButtons+0x4>)
 801d546:	4770      	bx	lr
 801d548:	08145850 	.word	0x08145850

0801d54c <UINeartuneButtons>:

            const char* UINeartuneButtons(VocodecButton button, ButtonAction action)
            {
                const char* writeString = "";
                if (buttonActionsUI[ButtonA][ActionPress])
 801d54c:	4b0e      	ldr	r3, [pc, #56]	; (801d588 <UINeartuneButtons+0x3c>)
            {
 801d54e:	b410      	push	{r4}
                if (buttonActionsUI[ButtonA][ActionPress])
 801d550:	7d1a      	ldrb	r2, [r3, #20]
 801d552:	b1b2      	cbz	r2, 801d582 <UINeartuneButtons+0x36>
                {
                    writeString = autotuneChromatic ? "AUTOCHROM ON" : "AUTOCHROM OFF";
 801d554:	4a0d      	ldr	r2, [pc, #52]	; (801d58c <UINeartuneButtons+0x40>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d556:	2400      	movs	r4, #0
                    writeString = autotuneChromatic ? "AUTOCHROM ON" : "AUTOCHROM OFF";
 801d558:	480d      	ldr	r0, [pc, #52]	; (801d590 <UINeartuneButtons+0x44>)
 801d55a:	7811      	ldrb	r1, [r2, #0]
 801d55c:	4a0d      	ldr	r2, [pc, #52]	; (801d594 <UINeartuneButtons+0x48>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d55e:	751c      	strb	r4, [r3, #20]
                    writeString = autotuneChromatic ? "AUTOCHROM ON" : "AUTOCHROM OFF";
 801d560:	42a1      	cmp	r1, r4
 801d562:	bf08      	it	eq
 801d564:	4610      	moveq	r0, r2
                }

                if (buttonActionsUI[ButtonC][ActionPress])
 801d566:	7f1a      	ldrb	r2, [r3, #28]
 801d568:	b142      	cbz	r2, 801d57c <UINeartuneButtons+0x30>
                {
                    writeString = autotuneLock ? "CHORD LOCK ON" : "CHORD LOCK OFF";
 801d56a:	4a0b      	ldr	r2, [pc, #44]	; (801d598 <UINeartuneButtons+0x4c>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d56c:	2400      	movs	r4, #0
                    writeString = autotuneLock ? "CHORD LOCK ON" : "CHORD LOCK OFF";
 801d56e:	480b      	ldr	r0, [pc, #44]	; (801d59c <UINeartuneButtons+0x50>)
 801d570:	6811      	ldr	r1, [r2, #0]
 801d572:	4a0b      	ldr	r2, [pc, #44]	; (801d5a0 <UINeartuneButtons+0x54>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d574:	771c      	strb	r4, [r3, #28]
                    writeString = autotuneLock ? "CHORD LOCK ON" : "CHORD LOCK OFF";
 801d576:	42a1      	cmp	r1, r4
 801d578:	bf08      	it	eq
 801d57a:	4610      	moveq	r0, r2
                }


                return writeString;
            }
 801d57c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d580:	4770      	bx	lr
                const char* writeString = "";
 801d582:	4808      	ldr	r0, [pc, #32]	; (801d5a4 <UINeartuneButtons+0x58>)
 801d584:	e7ef      	b.n	801d566 <UINeartuneButtons+0x1a>
 801d586:	bf00      	nop
 801d588:	20018894 	.word	0x20018894
 801d58c:	2000056c 	.word	0x2000056c
 801d590:	081457e4 	.word	0x081457e4
 801d594:	081457f4 	.word	0x081457f4
 801d598:	20000570 	.word	0x20000570
 801d59c:	08145804 	.word	0x08145804
 801d5a0:	08145814 	.word	0x08145814
 801d5a4:	08145850 	.word	0x08145850

0801d5a8 <UIAutotuneButtons>:
 801d5a8:	4800      	ldr	r0, [pc, #0]	; (801d5ac <UIAutotuneButtons+0x4>)
 801d5aa:	4770      	bx	lr
 801d5ac:	08145850 	.word	0x08145850

0801d5b0 <UISamplerBPButtons>:
                const char* writeString = "";
                return writeString;
            }

            const char* UISamplerBPButtons(VocodecButton button, ButtonAction action)
            {
 801d5b0:	b570      	push	{r4, r5, r6, lr}
                const char* writeString = "";
                if (buttonActionsUI[ButtonC][ActionPress])
 801d5b2:	4c31      	ldr	r4, [pc, #196]	; (801d678 <UISamplerBPButtons+0xc8>)
 801d5b4:	7f23      	ldrb	r3, [r4, #28]
 801d5b6:	2b00      	cmp	r3, #0
 801d5b8:	d144      	bne.n	801d644 <UISamplerBPButtons+0x94>
                    OLEDwriteFloat(sampleLength, 0, SecondLine);
                    OLEDwriteString(samplePlaying ? "PLAYING" : "STOPPED", 7, 48, SecondLine);
                    buttonActionsUI[ButtonC][ActionPress] = 0;
                }

                if (buttonActionsUI[ButtonB][ActionPress])
 801d5ba:	7e23      	ldrb	r3, [r4, #24]
 801d5bc:	bb83      	cbnz	r3, 801d620 <UISamplerBPButtons+0x70>
                {
                    OLEDclearLine(SecondLine);
                    OLEDwriteString(bpMode ? "BACKANDFORTH" : "FORWARD     ", 12, 0, SecondLine);
                    buttonActionsUI[ButtonB][ActionPress] = 0;
                }
                if (buttonActionsUI[ButtonA][ActionHoldContinuous])
 801d5be:	7de3      	ldrb	r3, [r4, #23]
 801d5c0:	b9db      	cbnz	r3, 801d5fa <UISamplerBPButtons+0x4a>
                    OLEDclearLine(SecondLine);
                    OLEDwriteString("RECORDING", 9, 0, SecondLine);
                    OLEDwriteFloat(sampleLength, 84, SecondLine);
                    buttonActionsUI[ButtonA][ActionHoldContinuous] = 0;
                }
                if (buttonActionsUI[ButtonA][ActionRelease])
 801d5c2:	7d63      	ldrb	r3, [r4, #21]
 801d5c4:	b1bb      	cbz	r3, 801d5f6 <UISamplerBPButtons+0x46>
                {
                    OLEDclearLine(SecondLine);
 801d5c6:	2001      	movs	r0, #1
                    OLEDwriteFloat(sampleLength, 0, SecondLine);
                    OLEDwriteString(samplePlaying ? "PLAYING" : "STOPPED", 7, 48, SecondLine);
 801d5c8:	4d2c      	ldr	r5, [pc, #176]	; (801d67c <UISamplerBPButtons+0xcc>)
                    OLEDclearLine(SecondLine);
 801d5ca:	f7f6 fc23 	bl	8013e14 <OLEDclearLine>
                    OLEDwriteFloat(sampleLength, 0, SecondLine);
 801d5ce:	4b2c      	ldr	r3, [pc, #176]	; (801d680 <UISamplerBPButtons+0xd0>)
 801d5d0:	2101      	movs	r1, #1
 801d5d2:	2000      	movs	r0, #0
 801d5d4:	ed93 0a00 	vldr	s0, [r3]
 801d5d8:	f7f6 fcee 	bl	8013fb8 <OLEDwriteFloat>
                    OLEDwriteString(samplePlaying ? "PLAYING" : "STOPPED", 7, 48, SecondLine);
 801d5dc:	4a29      	ldr	r2, [pc, #164]	; (801d684 <UISamplerBPButtons+0xd4>)
 801d5de:	482a      	ldr	r0, [pc, #168]	; (801d688 <UISamplerBPButtons+0xd8>)
 801d5e0:	2301      	movs	r3, #1
 801d5e2:	7816      	ldrb	r6, [r2, #0]
 801d5e4:	2107      	movs	r1, #7
 801d5e6:	2230      	movs	r2, #48	; 0x30
 801d5e8:	2e00      	cmp	r6, #0
 801d5ea:	bf08      	it	eq
 801d5ec:	4628      	moveq	r0, r5
 801d5ee:	f7f6 fc25 	bl	8013e3c <OLEDwriteString>
                    buttonActionsUI[ButtonA][ActionRelease] = 0;
 801d5f2:	2300      	movs	r3, #0
 801d5f4:	7563      	strb	r3, [r4, #21]
                }
                return writeString;
            }
 801d5f6:	4825      	ldr	r0, [pc, #148]	; (801d68c <UISamplerBPButtons+0xdc>)
 801d5f8:	bd70      	pop	{r4, r5, r6, pc}
                    OLEDclearLine(SecondLine);
 801d5fa:	2001      	movs	r0, #1
 801d5fc:	f7f6 fc0a 	bl	8013e14 <OLEDclearLine>
                    OLEDwriteString("RECORDING", 9, 0, SecondLine);
 801d600:	2301      	movs	r3, #1
 801d602:	2200      	movs	r2, #0
 801d604:	2109      	movs	r1, #9
 801d606:	4822      	ldr	r0, [pc, #136]	; (801d690 <UISamplerBPButtons+0xe0>)
 801d608:	f7f6 fc18 	bl	8013e3c <OLEDwriteString>
                    OLEDwriteFloat(sampleLength, 84, SecondLine);
 801d60c:	4b1c      	ldr	r3, [pc, #112]	; (801d680 <UISamplerBPButtons+0xd0>)
 801d60e:	2101      	movs	r1, #1
 801d610:	2054      	movs	r0, #84	; 0x54
 801d612:	ed93 0a00 	vldr	s0, [r3]
 801d616:	f7f6 fccf 	bl	8013fb8 <OLEDwriteFloat>
                    buttonActionsUI[ButtonA][ActionHoldContinuous] = 0;
 801d61a:	2300      	movs	r3, #0
 801d61c:	75e3      	strb	r3, [r4, #23]
 801d61e:	e7d0      	b.n	801d5c2 <UISamplerBPButtons+0x12>
                    OLEDclearLine(SecondLine);
 801d620:	2001      	movs	r0, #1
                    OLEDwriteString(bpMode ? "BACKANDFORTH" : "FORWARD     ", 12, 0, SecondLine);
 801d622:	4d1c      	ldr	r5, [pc, #112]	; (801d694 <UISamplerBPButtons+0xe4>)
                    OLEDclearLine(SecondLine);
 801d624:	f7f6 fbf6 	bl	8013e14 <OLEDclearLine>
                    OLEDwriteString(bpMode ? "BACKANDFORTH" : "FORWARD     ", 12, 0, SecondLine);
 801d628:	4a1b      	ldr	r2, [pc, #108]	; (801d698 <UISamplerBPButtons+0xe8>)
 801d62a:	481c      	ldr	r0, [pc, #112]	; (801d69c <UISamplerBPButtons+0xec>)
 801d62c:	2301      	movs	r3, #1
 801d62e:	6816      	ldr	r6, [r2, #0]
 801d630:	2200      	movs	r2, #0
 801d632:	210c      	movs	r1, #12
 801d634:	4296      	cmp	r6, r2
 801d636:	bf08      	it	eq
 801d638:	4628      	moveq	r0, r5
 801d63a:	f7f6 fbff 	bl	8013e3c <OLEDwriteString>
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d63e:	2300      	movs	r3, #0
 801d640:	7623      	strb	r3, [r4, #24]
 801d642:	e7bc      	b.n	801d5be <UISamplerBPButtons+0xe>
                    OLEDclearLine(SecondLine);
 801d644:	2001      	movs	r0, #1
                    OLEDwriteString(samplePlaying ? "PLAYING" : "STOPPED", 7, 48, SecondLine);
 801d646:	4d0d      	ldr	r5, [pc, #52]	; (801d67c <UISamplerBPButtons+0xcc>)
                    OLEDclearLine(SecondLine);
 801d648:	f7f6 fbe4 	bl	8013e14 <OLEDclearLine>
                    OLEDwriteFloat(sampleLength, 0, SecondLine);
 801d64c:	4b0c      	ldr	r3, [pc, #48]	; (801d680 <UISamplerBPButtons+0xd0>)
 801d64e:	2101      	movs	r1, #1
 801d650:	2000      	movs	r0, #0
 801d652:	ed93 0a00 	vldr	s0, [r3]
 801d656:	f7f6 fcaf 	bl	8013fb8 <OLEDwriteFloat>
                    OLEDwriteString(samplePlaying ? "PLAYING" : "STOPPED", 7, 48, SecondLine);
 801d65a:	4a0a      	ldr	r2, [pc, #40]	; (801d684 <UISamplerBPButtons+0xd4>)
 801d65c:	480a      	ldr	r0, [pc, #40]	; (801d688 <UISamplerBPButtons+0xd8>)
 801d65e:	2301      	movs	r3, #1
 801d660:	7816      	ldrb	r6, [r2, #0]
 801d662:	2107      	movs	r1, #7
 801d664:	2230      	movs	r2, #48	; 0x30
 801d666:	2e00      	cmp	r6, #0
 801d668:	bf08      	it	eq
 801d66a:	4628      	moveq	r0, r5
 801d66c:	f7f6 fbe6 	bl	8013e3c <OLEDwriteString>
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d670:	2300      	movs	r3, #0
 801d672:	7723      	strb	r3, [r4, #28]
 801d674:	e7a1      	b.n	801d5ba <UISamplerBPButtons+0xa>
 801d676:	bf00      	nop
 801d678:	20018894 	.word	0x20018894
 801d67c:	0814582c 	.word	0x0814582c
 801d680:	200005d8 	.word	0x200005d8
 801d684:	2000012c 	.word	0x2000012c
 801d688:	08145824 	.word	0x08145824
 801d68c:	08145850 	.word	0x08145850
 801d690:	08145854 	.word	0x08145854
 801d694:	08145844 	.word	0x08145844
 801d698:	200005d4 	.word	0x200005d4
 801d69c:	08145834 	.word	0x08145834

0801d6a0 <UISamplerKButtons>:

            const char* UISamplerKButtons(VocodecButton button, ButtonAction action)
            {
 801d6a0:	b510      	push	{r4, lr}
                const char* writeString = "";


                if (buttonActionsUI[ExtraMessage][ActionHoldContinuous] || buttonActionsUI[ButtonA][ActionPress])
 801d6a2:	4c1d      	ldr	r4, [pc, #116]	; (801d718 <UISamplerKButtons+0x78>)
 801d6a4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
            {
 801d6a8:	ed2d 8b02 	vpush	{d8}
                if (buttonActionsUI[ExtraMessage][ActionHoldContinuous] || buttonActionsUI[ButtonA][ActionPress])
 801d6ac:	b97b      	cbnz	r3, 801d6ce <UISamplerKButtons+0x2e>
 801d6ae:	7d23      	ldrb	r3, [r4, #20]
 801d6b0:	b96b      	cbnz	r3, 801d6ce <UISamplerKButtons+0x2e>
                    OLEDwriteFloat(sampleLength, OLEDgetCursor(), SecondLine);
                    buttonActionsUI[ExtraMessage][ActionHoldContinuous] = 0;
                    buttonActionsUI[ButtonA][ActionPress] = 0;
                }

                if (buttonActionsUI[ButtonB][ActionPress])
 801d6b2:	7e23      	ldrb	r3, [r4, #24]
 801d6b4:	b363      	cbz	r3, 801d710 <UISamplerKButtons+0x70>
                {
                    writeString = controlAllKeys ? "MOD ALL" : "MOD SINGLE";
 801d6b6:	4b19      	ldr	r3, [pc, #100]	; (801d71c <UISamplerKButtons+0x7c>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d6b8:	2100      	movs	r1, #0
                    writeString = controlAllKeys ? "MOD ALL" : "MOD SINGLE";
 801d6ba:	4819      	ldr	r0, [pc, #100]	; (801d720 <UISamplerKButtons+0x80>)
 801d6bc:	681a      	ldr	r2, [r3, #0]
 801d6be:	4b19      	ldr	r3, [pc, #100]	; (801d724 <UISamplerKButtons+0x84>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d6c0:	7621      	strb	r1, [r4, #24]
                    writeString = controlAllKeys ? "MOD ALL" : "MOD SINGLE";
 801d6c2:	428a      	cmp	r2, r1
 801d6c4:	bf08      	it	eq
 801d6c6:	4618      	moveq	r0, r3
                }
                return writeString;
            }
 801d6c8:	ecbd 8b02 	vpop	{d8}
 801d6cc:	bd10      	pop	{r4, pc}
                    OLEDclearLine(SecondLine);
 801d6ce:	2001      	movs	r0, #1
 801d6d0:	f7f6 fba0 	bl	8013e14 <OLEDclearLine>
                    OLEDwritePitch(currentSamplerKeyGlobal + LOWEST_SAMPLER_KEY, 0, SecondLine, false);
 801d6d4:	4b14      	ldr	r3, [pc, #80]	; (801d728 <UISamplerKButtons+0x88>)
 801d6d6:	2200      	movs	r2, #0
 801d6d8:	2101      	movs	r1, #1
 801d6da:	681b      	ldr	r3, [r3, #0]
 801d6dc:	4610      	mov	r0, r2
 801d6de:	3324      	adds	r3, #36	; 0x24
 801d6e0:	ee00 3a10 	vmov	s0, r3
 801d6e4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d6e8:	f7f6 fc04 	bl	8013ef4 <OLEDwritePitch>
                    OLEDwriteFloat(sampleLength, OLEDgetCursor(), SecondLine);
 801d6ec:	4b0f      	ldr	r3, [pc, #60]	; (801d72c <UISamplerKButtons+0x8c>)
 801d6ee:	ed93 8a00 	vldr	s16, [r3]
 801d6f2:	f7f6 fe1f 	bl	8014334 <OLEDgetCursor>
 801d6f6:	2101      	movs	r1, #1
 801d6f8:	b2c0      	uxtb	r0, r0
 801d6fa:	eeb0 0a48 	vmov.f32	s0, s16
 801d6fe:	f7f6 fc5b 	bl	8013fb8 <OLEDwriteFloat>
                    buttonActionsUI[ExtraMessage][ActionHoldContinuous] = 0;
 801d702:	2300      	movs	r3, #0
 801d704:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d708:	7523      	strb	r3, [r4, #20]
                if (buttonActionsUI[ButtonB][ActionPress])
 801d70a:	7e23      	ldrb	r3, [r4, #24]
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d1d2      	bne.n	801d6b6 <UISamplerKButtons+0x16>
                const char* writeString = "";
 801d710:	4807      	ldr	r0, [pc, #28]	; (801d730 <UISamplerKButtons+0x90>)
            }
 801d712:	ecbd 8b02 	vpop	{d8}
 801d716:	bd10      	pop	{r4, pc}
 801d718:	20018894 	.word	0x20018894
 801d71c:	200005e8 	.word	0x200005e8
 801d720:	08145860 	.word	0x08145860
 801d724:	08145868 	.word	0x08145868
 801d728:	20000134 	.word	0x20000134
 801d72c:	200005d8 	.word	0x200005d8
 801d730:	08145850 	.word	0x08145850

0801d734 <UISamplerAutoButtons>:

            const char* UISamplerAutoButtons(VocodecButton button, ButtonAction action)
            {
                const char* writeString = "";
                if (buttonActionsUI[ButtonA][ActionPress])
 801d734:	4b15      	ldr	r3, [pc, #84]	; (801d78c <UISamplerAutoButtons+0x58>)
            {
 801d736:	b410      	push	{r4}
                if (buttonActionsUI[ButtonA][ActionPress])
 801d738:	7d1a      	ldrb	r2, [r3, #20]
 801d73a:	b15a      	cbz	r2, 801d754 <UISamplerAutoButtons+0x20>
                {
                    if (samplerMode == PlayLoop)
 801d73c:	4a14      	ldr	r2, [pc, #80]	; (801d790 <UISamplerAutoButtons+0x5c>)
 801d73e:	7812      	ldrb	r2, [r2, #0]
 801d740:	2a01      	cmp	r2, #1
 801d742:	d021      	beq.n	801d788 <UISamplerAutoButtons+0x54>
                    {
                        writeString = "LOOP";
                    }
                    else if (samplerMode == PlayBackAndForth)
                    {
                        writeString = "BACK'N'FORTH";
 801d744:	4813      	ldr	r0, [pc, #76]	; (801d794 <UISamplerAutoButtons+0x60>)
 801d746:	4914      	ldr	r1, [pc, #80]	; (801d798 <UISamplerAutoButtons+0x64>)
 801d748:	2a02      	cmp	r2, #2
 801d74a:	bf08      	it	eq
 801d74c:	4608      	moveq	r0, r1
                    }
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d74e:	2200      	movs	r2, #0
 801d750:	751a      	strb	r2, [r3, #20]
 801d752:	e000      	b.n	801d756 <UISamplerAutoButtons+0x22>
                const char* writeString = "";
 801d754:	480f      	ldr	r0, [pc, #60]	; (801d794 <UISamplerAutoButtons+0x60>)
                }
                if (buttonActionsUI[ButtonB][ActionPress])
 801d756:	7e1a      	ldrb	r2, [r3, #24]
 801d758:	b142      	cbz	r2, 801d76c <UISamplerAutoButtons+0x38>
                {
                    writeString = triggerChannel ? "CH2 TRIG" : "CH1 TRIG";
 801d75a:	4a10      	ldr	r2, [pc, #64]	; (801d79c <UISamplerAutoButtons+0x68>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d75c:	2400      	movs	r4, #0
                    writeString = triggerChannel ? "CH2 TRIG" : "CH1 TRIG";
 801d75e:	4810      	ldr	r0, [pc, #64]	; (801d7a0 <UISamplerAutoButtons+0x6c>)
 801d760:	7811      	ldrb	r1, [r2, #0]
 801d762:	4a10      	ldr	r2, [pc, #64]	; (801d7a4 <UISamplerAutoButtons+0x70>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d764:	761c      	strb	r4, [r3, #24]
                    writeString = triggerChannel ? "CH2 TRIG" : "CH1 TRIG";
 801d766:	42a1      	cmp	r1, r4
 801d768:	bf08      	it	eq
 801d76a:	4610      	moveq	r0, r2
                }
                if (buttonActionsUI[ButtonC][ActionPress])
 801d76c:	7f1a      	ldrb	r2, [r3, #28]
 801d76e:	b142      	cbz	r2, 801d782 <UISamplerAutoButtons+0x4e>
                {
                    writeString = pitchQuantization ? "QUANT SPEED" : "CONT SPEED";
 801d770:	4a0d      	ldr	r2, [pc, #52]	; (801d7a8 <UISamplerAutoButtons+0x74>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d772:	2400      	movs	r4, #0
                    writeString = pitchQuantization ? "QUANT SPEED" : "CONT SPEED";
 801d774:	480d      	ldr	r0, [pc, #52]	; (801d7ac <UISamplerAutoButtons+0x78>)
 801d776:	6811      	ldr	r1, [r2, #0]
 801d778:	4a0d      	ldr	r2, [pc, #52]	; (801d7b0 <UISamplerAutoButtons+0x7c>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d77a:	771c      	strb	r4, [r3, #28]
                    writeString = pitchQuantization ? "QUANT SPEED" : "CONT SPEED";
 801d77c:	42a1      	cmp	r1, r4
 801d77e:	bf08      	it	eq
 801d780:	4610      	moveq	r0, r2
                }
                return writeString;
            }
 801d782:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d786:	4770      	bx	lr
                        writeString = "LOOP";
 801d788:	480a      	ldr	r0, [pc, #40]	; (801d7b4 <UISamplerAutoButtons+0x80>)
 801d78a:	e7e0      	b.n	801d74e <UISamplerAutoButtons+0x1a>
 801d78c:	20018894 	.word	0x20018894
 801d790:	2000013c 	.word	0x2000013c
 801d794:	08145850 	.word	0x08145850
 801d798:	0814587c 	.word	0x0814587c
 801d79c:	200005f0 	.word	0x200005f0
 801d7a0:	0814588c 	.word	0x0814588c
 801d7a4:	08145898 	.word	0x08145898
 801d7a8:	20000600 	.word	0x20000600
 801d7ac:	081458a4 	.word	0x081458a4
 801d7b0:	081458b0 	.word	0x081458b0
 801d7b4:	08145874 	.word	0x08145874

0801d7b8 <UIDistortionButtons>:

            const char* UIDistortionButtons(VocodecButton button, ButtonAction action)
            {
                const char* writeString = "";
                if (buttonActionsUI[ButtonA][ActionPress])
 801d7b8:	4b08      	ldr	r3, [pc, #32]	; (801d7dc <UIDistortionButtons+0x24>)
 801d7ba:	7d1a      	ldrb	r2, [r3, #20]
 801d7bc:	b162      	cbz	r2, 801d7d8 <UIDistortionButtons+0x20>
                {
                    writeString = distortionMode ? "SHAPER" : "TANH";
 801d7be:	4a08      	ldr	r2, [pc, #32]	; (801d7e0 <UIDistortionButtons+0x28>)
 801d7c0:	4808      	ldr	r0, [pc, #32]	; (801d7e4 <UIDistortionButtons+0x2c>)
            {
 801d7c2:	b410      	push	{r4}
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d7c4:	2400      	movs	r4, #0
                    writeString = distortionMode ? "SHAPER" : "TANH";
 801d7c6:	7811      	ldrb	r1, [r2, #0]
 801d7c8:	4a07      	ldr	r2, [pc, #28]	; (801d7e8 <UIDistortionButtons+0x30>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d7ca:	751c      	strb	r4, [r3, #20]
                    writeString = distortionMode ? "SHAPER" : "TANH";
 801d7cc:	42a1      	cmp	r1, r4
 801d7ce:	bf08      	it	eq
 801d7d0:	4610      	moveq	r0, r2
                }
                return writeString;
            }
 801d7d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d7d6:	4770      	bx	lr
                const char* writeString = "";
 801d7d8:	4804      	ldr	r0, [pc, #16]	; (801d7ec <UIDistortionButtons+0x34>)
            }
 801d7da:	4770      	bx	lr
 801d7dc:	20018894 	.word	0x20018894
 801d7e0:	20000614 	.word	0x20000614
 801d7e4:	081458bc 	.word	0x081458bc
 801d7e8:	081458c4 	.word	0x081458c4
 801d7ec:	08145850 	.word	0x08145850

0801d7f0 <UIWaveFolderButtons>:

            const char* UIWaveFolderButtons(VocodecButton button, ButtonAction action)
            {
                const char* writeString = "";
                if (buttonActionsUI[ButtonA][ActionPress])
 801d7f0:	4b08      	ldr	r3, [pc, #32]	; (801d814 <UIWaveFolderButtons+0x24>)
 801d7f2:	7d1a      	ldrb	r2, [r3, #20]
 801d7f4:	b162      	cbz	r2, 801d810 <UIWaveFolderButtons+0x20>
                {
                    writeString = foldMode ? "TWO IN SERIES" : "OVERSAMPLED";
 801d7f6:	4a08      	ldr	r2, [pc, #32]	; (801d818 <UIWaveFolderButtons+0x28>)
 801d7f8:	4808      	ldr	r0, [pc, #32]	; (801d81c <UIWaveFolderButtons+0x2c>)
            {
 801d7fa:	b410      	push	{r4}
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d7fc:	2400      	movs	r4, #0
                    writeString = foldMode ? "TWO IN SERIES" : "OVERSAMPLED";
 801d7fe:	6811      	ldr	r1, [r2, #0]
 801d800:	4a07      	ldr	r2, [pc, #28]	; (801d820 <UIWaveFolderButtons+0x30>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d802:	751c      	strb	r4, [r3, #20]
                    writeString = foldMode ? "TWO IN SERIES" : "OVERSAMPLED";
 801d804:	42a1      	cmp	r1, r4
 801d806:	bf08      	it	eq
 801d808:	4610      	moveq	r0, r2
                }
                return writeString;
            }
 801d80a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d80e:	4770      	bx	lr
                const char* writeString = "";
 801d810:	4804      	ldr	r0, [pc, #16]	; (801d824 <UIWaveFolderButtons+0x34>)
            }
 801d812:	4770      	bx	lr
 801d814:	20018894 	.word	0x20018894
 801d818:	20000618 	.word	0x20000618
 801d81c:	081458cc 	.word	0x081458cc
 801d820:	081458dc 	.word	0x081458dc
 801d824:	08145850 	.word	0x08145850

0801d828 <UIBitcrusherButtons>:

            const char* UIBitcrusherButtons(VocodecButton button, ButtonAction action)
            {
                const char* writeString = "";

                if (buttonActionsUI[ButtonA][ActionPress])
 801d828:	4b08      	ldr	r3, [pc, #32]	; (801d84c <UIBitcrusherButtons+0x24>)
 801d82a:	7d1a      	ldrb	r2, [r3, #20]
 801d82c:	b162      	cbz	r2, 801d848 <UIBitcrusherButtons+0x20>
                {
                    writeString = crusherStereo ? "STEREO" : "MONO";
 801d82e:	4a08      	ldr	r2, [pc, #32]	; (801d850 <UIBitcrusherButtons+0x28>)
 801d830:	4808      	ldr	r0, [pc, #32]	; (801d854 <UIBitcrusherButtons+0x2c>)
            {
 801d832:	b410      	push	{r4}
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d834:	2400      	movs	r4, #0
                    writeString = crusherStereo ? "STEREO" : "MONO";
 801d836:	6811      	ldr	r1, [r2, #0]
 801d838:	4a07      	ldr	r2, [pc, #28]	; (801d858 <UIBitcrusherButtons+0x30>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d83a:	751c      	strb	r4, [r3, #20]
                    writeString = crusherStereo ? "STEREO" : "MONO";
 801d83c:	42a1      	cmp	r1, r4
 801d83e:	bf08      	it	eq
 801d840:	4610      	moveq	r0, r2
                }


                return writeString;
            }
 801d842:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d846:	4770      	bx	lr
                const char* writeString = "";
 801d848:	4804      	ldr	r0, [pc, #16]	; (801d85c <UIBitcrusherButtons+0x34>)
            }
 801d84a:	4770      	bx	lr
 801d84c:	20018894 	.word	0x20018894
 801d850:	2000061c 	.word	0x2000061c
 801d854:	0814529c 	.word	0x0814529c
 801d858:	081457b0 	.word	0x081457b0
 801d85c:	08145850 	.word	0x08145850

0801d860 <UIDelayButtons>:

            const char* UIDelayButtons(VocodecButton button, ButtonAction action)
            {
                const char* writeString = "";
                if (buttonActionsUI[ButtonA][ActionPress])
 801d860:	4b0e      	ldr	r3, [pc, #56]	; (801d89c <UIDelayButtons+0x3c>)
            {
 801d862:	b410      	push	{r4}
                if (buttonActionsUI[ButtonA][ActionPress])
 801d864:	7d1a      	ldrb	r2, [r3, #20]
 801d866:	b1b2      	cbz	r2, 801d896 <UIDelayButtons+0x36>
                {
                    writeString = delayShaper ? "SHAPER ON" : "SHAPER OFF";
 801d868:	4a0d      	ldr	r2, [pc, #52]	; (801d8a0 <UIDelayButtons+0x40>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d86a:	2400      	movs	r4, #0
                    writeString = delayShaper ? "SHAPER ON" : "SHAPER OFF";
 801d86c:	480d      	ldr	r0, [pc, #52]	; (801d8a4 <UIDelayButtons+0x44>)
 801d86e:	6811      	ldr	r1, [r2, #0]
 801d870:	4a0d      	ldr	r2, [pc, #52]	; (801d8a8 <UIDelayButtons+0x48>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d872:	751c      	strb	r4, [r3, #20]
                    writeString = delayShaper ? "SHAPER ON" : "SHAPER OFF";
 801d874:	42a1      	cmp	r1, r4
 801d876:	bf08      	it	eq
 801d878:	4610      	moveq	r0, r2
                }
                if (buttonActionsUI[ButtonB][ActionPress])
 801d87a:	7e1a      	ldrb	r2, [r3, #24]
 801d87c:	b142      	cbz	r2, 801d890 <UIDelayButtons+0x30>
                {
                    writeString = capFeedback ? "FB CAP" : "FB UNCAP";
 801d87e:	4a0b      	ldr	r2, [pc, #44]	; (801d8ac <UIDelayButtons+0x4c>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d880:	2400      	movs	r4, #0
                    writeString = capFeedback ? "FB CAP" : "FB UNCAP";
 801d882:	480b      	ldr	r0, [pc, #44]	; (801d8b0 <UIDelayButtons+0x50>)
 801d884:	7811      	ldrb	r1, [r2, #0]
 801d886:	4a0b      	ldr	r2, [pc, #44]	; (801d8b4 <UIDelayButtons+0x54>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d888:	761c      	strb	r4, [r3, #24]
                    writeString = capFeedback ? "FB CAP" : "FB UNCAP";
 801d88a:	42a1      	cmp	r1, r4
 801d88c:	bf08      	it	eq
 801d88e:	4610      	moveq	r0, r2
                }
                return writeString;
            }
 801d890:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d894:	4770      	bx	lr
                const char* writeString = "";
 801d896:	4808      	ldr	r0, [pc, #32]	; (801d8b8 <UIDelayButtons+0x58>)
 801d898:	e7ef      	b.n	801d87a <UIDelayButtons+0x1a>
 801d89a:	bf00      	nop
 801d89c:	20018894 	.word	0x20018894
 801d8a0:	20000620 	.word	0x20000620
 801d8a4:	081458e8 	.word	0x081458e8
 801d8a8:	081458f4 	.word	0x081458f4
 801d8ac:	20000624 	.word	0x20000624
 801d8b0:	08145900 	.word	0x08145900
 801d8b4:	08145908 	.word	0x08145908
 801d8b8:	08145850 	.word	0x08145850

0801d8bc <UIReverbButtons>:

            const char* UIReverbButtons(VocodecButton button, ButtonAction action)
            {
                const char* writeString = "";
                if (buttonActionsUI[ButtonC][ActionPress])
 801d8bc:	4b0e      	ldr	r3, [pc, #56]	; (801d8f8 <UIReverbButtons+0x3c>)
            {
 801d8be:	b410      	push	{r4}
                if (buttonActionsUI[ButtonC][ActionPress])
 801d8c0:	7f1a      	ldrb	r2, [r3, #28]
 801d8c2:	b1b2      	cbz	r2, 801d8f2 <UIReverbButtons+0x36>
                {
                    writeString = freeze ? "FREEZE" : "UNFREEZE";
 801d8c4:	4a0d      	ldr	r2, [pc, #52]	; (801d8fc <UIReverbButtons+0x40>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d8c6:	2400      	movs	r4, #0
                    writeString = freeze ? "FREEZE" : "UNFREEZE";
 801d8c8:	480d      	ldr	r0, [pc, #52]	; (801d900 <UIReverbButtons+0x44>)
 801d8ca:	6811      	ldr	r1, [r2, #0]
 801d8cc:	4a0d      	ldr	r2, [pc, #52]	; (801d904 <UIReverbButtons+0x48>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d8ce:	771c      	strb	r4, [r3, #28]
                    writeString = freeze ? "FREEZE" : "UNFREEZE";
 801d8d0:	42a1      	cmp	r1, r4
 801d8d2:	bf08      	it	eq
 801d8d4:	4610      	moveq	r0, r2
                }
                if (buttonActionsUI[ButtonB][ActionPress])
 801d8d6:	7e1a      	ldrb	r2, [r3, #24]
 801d8d8:	b142      	cbz	r2, 801d8ec <UIReverbButtons+0x30>
                {
                    writeString = capFeedback ? "FB CAP" : "FB UNCAP";
 801d8da:	4a0b      	ldr	r2, [pc, #44]	; (801d908 <UIReverbButtons+0x4c>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d8dc:	2400      	movs	r4, #0
                    writeString = capFeedback ? "FB CAP" : "FB UNCAP";
 801d8de:	480b      	ldr	r0, [pc, #44]	; (801d90c <UIReverbButtons+0x50>)
 801d8e0:	7811      	ldrb	r1, [r2, #0]
 801d8e2:	4a0b      	ldr	r2, [pc, #44]	; (801d910 <UIReverbButtons+0x54>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d8e4:	761c      	strb	r4, [r3, #24]
                    writeString = capFeedback ? "FB CAP" : "FB UNCAP";
 801d8e6:	42a1      	cmp	r1, r4
 801d8e8:	bf08      	it	eq
 801d8ea:	4610      	moveq	r0, r2
                }
                return writeString;
            }
 801d8ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8f0:	4770      	bx	lr
                const char* writeString = "";
 801d8f2:	4808      	ldr	r0, [pc, #32]	; (801d914 <UIReverbButtons+0x58>)
 801d8f4:	e7ef      	b.n	801d8d6 <UIReverbButtons+0x1a>
 801d8f6:	bf00      	nop
 801d8f8:	20018894 	.word	0x20018894
 801d8fc:	20000628 	.word	0x20000628
 801d900:	08145914 	.word	0x08145914
 801d904:	0814591c 	.word	0x0814591c
 801d908:	20000624 	.word	0x20000624
 801d90c:	08145900 	.word	0x08145900
 801d910:	08145908 	.word	0x08145908
 801d914:	08145850 	.word	0x08145850

0801d918 <UIReverb2Buttons>:

            const char* UIReverb2Buttons(VocodecButton button, ButtonAction action)
            {
                const char* writeString = "";
                if (buttonActionsUI[ButtonC][ActionPress])
 801d918:	4b08      	ldr	r3, [pc, #32]	; (801d93c <UIReverb2Buttons+0x24>)
 801d91a:	7f1a      	ldrb	r2, [r3, #28]
 801d91c:	b162      	cbz	r2, 801d938 <UIReverb2Buttons+0x20>
                {
                    writeString = freeze ? "FREEZE" : "UNFREEZE";
 801d91e:	4a08      	ldr	r2, [pc, #32]	; (801d940 <UIReverb2Buttons+0x28>)
 801d920:	4808      	ldr	r0, [pc, #32]	; (801d944 <UIReverb2Buttons+0x2c>)
            {
 801d922:	b410      	push	{r4}
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d924:	2400      	movs	r4, #0
                    writeString = freeze ? "FREEZE" : "UNFREEZE";
 801d926:	6811      	ldr	r1, [r2, #0]
 801d928:	4a07      	ldr	r2, [pc, #28]	; (801d948 <UIReverb2Buttons+0x30>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d92a:	771c      	strb	r4, [r3, #28]
                    writeString = freeze ? "FREEZE" : "UNFREEZE";
 801d92c:	42a1      	cmp	r1, r4
 801d92e:	bf08      	it	eq
 801d930:	4610      	moveq	r0, r2
                }
                return writeString;
            }
 801d932:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d936:	4770      	bx	lr
                const char* writeString = "";
 801d938:	4804      	ldr	r0, [pc, #16]	; (801d94c <UIReverb2Buttons+0x34>)
            }
 801d93a:	4770      	bx	lr
 801d93c:	20018894 	.word	0x20018894
 801d940:	20000628 	.word	0x20000628
 801d944:	08145914 	.word	0x08145914
 801d948:	0814591c 	.word	0x0814591c
 801d94c:	08145850 	.word	0x08145850

0801d950 <UILivingStringButtons>:

            const char* UILivingStringButtons(VocodecButton button, ButtonAction action)
            {
                const char* writeString = "";
                if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801d950:	4b15      	ldr	r3, [pc, #84]	; (801d9a8 <UILivingStringButtons+0x58>)
            {
 801d952:	b410      	push	{r4}
                if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801d954:	7d1a      	ldrb	r2, [r3, #20]
 801d956:	2a01      	cmp	r2, #1
 801d958:	d01b      	beq.n	801d992 <UILivingStringButtons+0x42>
                const char* writeString = "";
 801d95a:	4814      	ldr	r0, [pc, #80]	; (801d9ac <UILivingStringButtons+0x5c>)
                {
                    writeString = (ignoreFreqKnobs > 0) ? "MIDI PITCH" : "KNOB PITCH";
                    buttonActionsUI[ButtonA][ActionPress] = 0;
                }
                if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801d95c:	7f1a      	ldrb	r2, [r3, #28]
 801d95e:	2a01      	cmp	r2, #1
 801d960:	d108      	bne.n	801d974 <UILivingStringButtons+0x24>
                {
                    writeString = (levMode > 0) ? "FB MODE" : "DECAY MODE";
 801d962:	4a13      	ldr	r2, [pc, #76]	; (801d9b0 <UILivingStringButtons+0x60>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d964:	2400      	movs	r4, #0
                    writeString = (levMode > 0) ? "FB MODE" : "DECAY MODE";
 801d966:	4813      	ldr	r0, [pc, #76]	; (801d9b4 <UILivingStringButtons+0x64>)
 801d968:	6811      	ldr	r1, [r2, #0]
 801d96a:	4a13      	ldr	r2, [pc, #76]	; (801d9b8 <UILivingStringButtons+0x68>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801d96c:	771c      	strb	r4, [r3, #28]
                    writeString = (levMode > 0) ? "FB MODE" : "DECAY MODE";
 801d96e:	42a1      	cmp	r1, r4
 801d970:	bfd8      	it	le
 801d972:	4610      	movle	r0, r2
                }

                if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801d974:	7e1a      	ldrb	r2, [r3, #24]
 801d976:	2a01      	cmp	r2, #1
 801d978:	d108      	bne.n	801d98c <UILivingStringButtons+0x3c>
                {
                    writeString = (independentStrings > 0) ? "INDIV CONTROL" : "KNOB1=>ALL";
 801d97a:	4a10      	ldr	r2, [pc, #64]	; (801d9bc <UILivingStringButtons+0x6c>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d97c:	2400      	movs	r4, #0
                    writeString = (independentStrings > 0) ? "INDIV CONTROL" : "KNOB1=>ALL";
 801d97e:	4810      	ldr	r0, [pc, #64]	; (801d9c0 <UILivingStringButtons+0x70>)
 801d980:	6811      	ldr	r1, [r2, #0]
 801d982:	4a10      	ldr	r2, [pc, #64]	; (801d9c4 <UILivingStringButtons+0x74>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d984:	761c      	strb	r4, [r3, #24]
                    writeString = (independentStrings > 0) ? "INDIV CONTROL" : "KNOB1=>ALL";
 801d986:	42a1      	cmp	r1, r4
 801d988:	bfd8      	it	le
 801d98a:	4610      	movle	r0, r2
                }

                return writeString;
            }
 801d98c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d990:	4770      	bx	lr
                    writeString = (ignoreFreqKnobs > 0) ? "MIDI PITCH" : "KNOB PITCH";
 801d992:	4a0d      	ldr	r2, [pc, #52]	; (801d9c8 <UILivingStringButtons+0x78>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d994:	2400      	movs	r4, #0
                    writeString = (ignoreFreqKnobs > 0) ? "MIDI PITCH" : "KNOB PITCH";
 801d996:	480d      	ldr	r0, [pc, #52]	; (801d9cc <UILivingStringButtons+0x7c>)
 801d998:	6811      	ldr	r1, [r2, #0]
 801d99a:	4a0d      	ldr	r2, [pc, #52]	; (801d9d0 <UILivingStringButtons+0x80>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801d99c:	751c      	strb	r4, [r3, #20]
                    writeString = (ignoreFreqKnobs > 0) ? "MIDI PITCH" : "KNOB PITCH";
 801d99e:	42a1      	cmp	r1, r4
 801d9a0:	bfd8      	it	le
 801d9a2:	4610      	movle	r0, r2
 801d9a4:	e7da      	b.n	801d95c <UILivingStringButtons+0xc>
 801d9a6:	bf00      	nop
 801d9a8:	20018894 	.word	0x20018894
 801d9ac:	08145850 	.word	0x08145850
 801d9b0:	2000062c 	.word	0x2000062c
 801d9b4:	08145940 	.word	0x08145940
 801d9b8:	08145948 	.word	0x08145948
 801d9bc:	20000634 	.word	0x20000634
 801d9c0:	08145954 	.word	0x08145954
 801d9c4:	08145964 	.word	0x08145964
 801d9c8:	20000630 	.word	0x20000630
 801d9cc:	08145928 	.word	0x08145928
 801d9d0:	08145934 	.word	0x08145934

0801d9d4 <UILivingStringSynthButtons>:

            const char* UILivingStringSynthButtons(VocodecButton button, ButtonAction action)
            {
                const char* writeString = "";
                if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801d9d4:	4b15      	ldr	r3, [pc, #84]	; (801da2c <UILivingStringSynthButtons+0x58>)
            {
 801d9d6:	b410      	push	{r4}
                if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801d9d8:	7d1a      	ldrb	r2, [r3, #20]
 801d9da:	2a01      	cmp	r2, #1
 801d9dc:	d01b      	beq.n	801da16 <UILivingStringSynthButtons+0x42>
                const char* writeString = "";
 801d9de:	4814      	ldr	r0, [pc, #80]	; (801da30 <UILivingStringSynthButtons+0x5c>)
                {
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
                    buttonActionsUI[ButtonA][ActionPress] = 0;
                }
                if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801d9e0:	7e1a      	ldrb	r2, [r3, #24]
 801d9e2:	2a01      	cmp	r2, #1
 801d9e4:	d108      	bne.n	801d9f8 <UILivingStringSynthButtons+0x24>
                {
                    writeString = (voicePluck > 0) ? "AUDIO IN" : "NO AUDIO IN";
 801d9e6:	4a13      	ldr	r2, [pc, #76]	; (801da34 <UILivingStringSynthButtons+0x60>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d9e8:	2400      	movs	r4, #0
                    writeString = (voicePluck > 0) ? "AUDIO IN" : "NO AUDIO IN";
 801d9ea:	4813      	ldr	r0, [pc, #76]	; (801da38 <UILivingStringSynthButtons+0x64>)
 801d9ec:	6811      	ldr	r1, [r2, #0]
 801d9ee:	4a13      	ldr	r2, [pc, #76]	; (801da3c <UILivingStringSynthButtons+0x68>)
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801d9f0:	761c      	strb	r4, [r3, #24]
                    writeString = (voicePluck > 0) ? "AUDIO IN" : "NO AUDIO IN";
 801d9f2:	42a1      	cmp	r1, r4
 801d9f4:	bfd8      	it	le
 801d9f6:	4610      	movle	r0, r2
                }
                if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801d9f8:	7f1a      	ldrb	r2, [r3, #28]
 801d9fa:	2a01      	cmp	r2, #1
 801d9fc:	d108      	bne.n	801da10 <UILivingStringSynthButtons+0x3c>
                {
                    writeString = (levModeStr > 0) ? "FB MODE" : "DECAY MODE";
 801d9fe:	4a10      	ldr	r2, [pc, #64]	; (801da40 <UILivingStringSynthButtons+0x6c>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801da00:	2400      	movs	r4, #0
                    writeString = (levModeStr > 0) ? "FB MODE" : "DECAY MODE";
 801da02:	4810      	ldr	r0, [pc, #64]	; (801da44 <UILivingStringSynthButtons+0x70>)
 801da04:	6811      	ldr	r1, [r2, #0]
 801da06:	4a10      	ldr	r2, [pc, #64]	; (801da48 <UILivingStringSynthButtons+0x74>)
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801da08:	771c      	strb	r4, [r3, #28]
                    writeString = (levModeStr > 0) ? "FB MODE" : "DECAY MODE";
 801da0a:	42a1      	cmp	r1, r4
 801da0c:	bfd8      	it	le
 801da0e:	4610      	movle	r0, r2
                }
                return writeString;
            }
 801da10:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da14:	4770      	bx	lr
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801da16:	4a0d      	ldr	r2, [pc, #52]	; (801da4c <UILivingStringSynthButtons+0x78>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801da18:	2400      	movs	r4, #0
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801da1a:	480d      	ldr	r0, [pc, #52]	; (801da50 <UILivingStringSynthButtons+0x7c>)
 801da1c:	7811      	ldrb	r1, [r2, #0]
 801da1e:	4a0d      	ldr	r2, [pc, #52]	; (801da54 <UILivingStringSynthButtons+0x80>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801da20:	751c      	strb	r4, [r3, #20]
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801da22:	2901      	cmp	r1, #1
 801da24:	bf98      	it	ls
 801da26:	4610      	movls	r0, r2
 801da28:	e7da      	b.n	801d9e0 <UILivingStringSynthButtons+0xc>
 801da2a:	bf00      	nop
 801da2c:	20018894 	.word	0x20018894
 801da30:	08145850 	.word	0x08145850
 801da34:	2000063c 	.word	0x2000063c
 801da38:	08145970 	.word	0x08145970
 801da3c:	0814597c 	.word	0x0814597c
 801da40:	20000638 	.word	0x20000638
 801da44:	08145940 	.word	0x08145940
 801da48:	08145948 	.word	0x08145948
 801da4c:	20000040 	.word	0x20000040
 801da50:	081457a8 	.word	0x081457a8
 801da54:	081457b0 	.word	0x081457b0

0801da58 <UIClassicSynthButtons>:

            const char* UIClassicSynthButtons(VocodecButton button, ButtonAction action)
            {
                const char* writeString = "";
                if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801da58:	4b0d      	ldr	r3, [pc, #52]	; (801da90 <UIClassicSynthButtons+0x38>)
 801da5a:	7d1a      	ldrb	r2, [r3, #20]
 801da5c:	2a01      	cmp	r2, #1
 801da5e:	d006      	beq.n	801da6e <UIClassicSynthButtons+0x16>
                {
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
                    buttonActionsUI[ButtonA][ActionPress] = 0;
                }
                if (buttonActionsUI[ButtonB][ActionPress])
 801da60:	7e1a      	ldrb	r2, [r3, #24]
                const char* writeString = "";
 801da62:	480c      	ldr	r0, [pc, #48]	; (801da94 <UIClassicSynthButtons+0x3c>)
                if (buttonActionsUI[ButtonB][ActionPress])
 801da64:	b112      	cbz	r2, 801da6c <UIClassicSynthButtons+0x14>
                {
                    //writeString = knobPage == 0 ? "SETTINGS" : "ADSR";
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801da66:	2200      	movs	r2, #0
 801da68:	761a      	strb	r2, [r3, #24]
 801da6a:	4770      	bx	lr
                }
                return writeString;
            }
 801da6c:	4770      	bx	lr
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801da6e:	4a0a      	ldr	r2, [pc, #40]	; (801da98 <UIClassicSynthButtons+0x40>)
 801da70:	480a      	ldr	r0, [pc, #40]	; (801da9c <UIClassicSynthButtons+0x44>)
            {
 801da72:	b410      	push	{r4}
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801da74:	7811      	ldrb	r1, [r2, #0]
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801da76:	2400      	movs	r4, #0
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801da78:	4a09      	ldr	r2, [pc, #36]	; (801daa0 <UIClassicSynthButtons+0x48>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801da7a:	751c      	strb	r4, [r3, #20]
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801da7c:	2901      	cmp	r1, #1
 801da7e:	bf98      	it	ls
 801da80:	4610      	movls	r0, r2
                if (buttonActionsUI[ButtonB][ActionPress])
 801da82:	7e1a      	ldrb	r2, [r3, #24]
 801da84:	b10a      	cbz	r2, 801da8a <UIClassicSynthButtons+0x32>
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801da86:	2200      	movs	r2, #0
 801da88:	761a      	strb	r2, [r3, #24]
            }
 801da8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da8e:	4770      	bx	lr
 801da90:	20018894 	.word	0x20018894
 801da94:	08145850 	.word	0x08145850
 801da98:	20000040 	.word	0x20000040
 801da9c:	081457a8 	.word	0x081457a8
 801daa0:	081457b0 	.word	0x081457b0

0801daa4 <UIRhodesButtons>:

            const char* UIRhodesButtons(VocodecButton button, ButtonAction action)
            {
 801daa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                const char* writeString = "";
                if (buttonActionsUI[ButtonA][ActionPress] == 1)
 801daa6:	4c1f      	ldr	r4, [pc, #124]	; (801db24 <UIRhodesButtons+0x80>)
 801daa8:	7d23      	ldrb	r3, [r4, #20]
 801daaa:	2b01      	cmp	r3, #1
 801daac:	d008      	beq.n	801dac0 <UIRhodesButtons+0x1c>
                {
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
                    buttonActionsUI[ButtonA][ActionPress] = 0;
                }
                if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801daae:	7e25      	ldrb	r5, [r4, #24]
                const char* writeString = "";
 801dab0:	4e1d      	ldr	r6, [pc, #116]	; (801db28 <UIRhodesButtons+0x84>)
                if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801dab2:	2d01      	cmp	r5, #1
 801dab4:	d010      	beq.n	801dad8 <UIRhodesButtons+0x34>
                {
                    buttonActionsUI[ButtonB][ActionPress] = 0;
                    OLEDclearLine(SecondLine);
                    OLEDwriteString(soundNames[Rsound], 6, 0, SecondLine);
                }
                if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801dab6:	7f25      	ldrb	r5, [r4, #28]
 801dab8:	2d01      	cmp	r5, #1
 801daba:	d01f      	beq.n	801dafc <UIRhodesButtons+0x58>
                    OLEDclearLine(SecondLine);
                    OLEDwriteString("STEREO TREMO", 12, 0, SecondLine);
                    OLEDwriteInt(tremoloStereo, 1, 110, SecondLine);
                }
                return writeString;
            }
 801dabc:	4630      	mov	r0, r6
 801dabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801dac0:	4b1a      	ldr	r3, [pc, #104]	; (801db2c <UIRhodesButtons+0x88>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801dac2:	2100      	movs	r1, #0
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801dac4:	4e1a      	ldr	r6, [pc, #104]	; (801db30 <UIRhodesButtons+0x8c>)
 801dac6:	781a      	ldrb	r2, [r3, #0]
                if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801dac8:	7e25      	ldrb	r5, [r4, #24]
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801daca:	4b1a      	ldr	r3, [pc, #104]	; (801db34 <UIRhodesButtons+0x90>)
                    buttonActionsUI[ButtonA][ActionPress] = 0;
 801dacc:	7521      	strb	r1, [r4, #20]
                    writeString = (numVoices > 1) ? "POLY" : "MONO";
 801dace:	2a01      	cmp	r2, #1
 801dad0:	bf98      	it	ls
 801dad2:	461e      	movls	r6, r3
                if (buttonActionsUI[ButtonB][ActionPress] == 1)
 801dad4:	2d01      	cmp	r5, #1
 801dad6:	d1ee      	bne.n	801dab6 <UIRhodesButtons+0x12>
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801dad8:	2700      	movs	r7, #0
                    OLEDclearLine(SecondLine);
 801dada:	4628      	mov	r0, r5
                    buttonActionsUI[ButtonB][ActionPress] = 0;
 801dadc:	7627      	strb	r7, [r4, #24]
                    OLEDclearLine(SecondLine);
 801dade:	f7f6 f999 	bl	8013e14 <OLEDclearLine>
                    OLEDwriteString(soundNames[Rsound], 6, 0, SecondLine);
 801dae2:	4915      	ldr	r1, [pc, #84]	; (801db38 <UIRhodesButtons+0x94>)
 801dae4:	462b      	mov	r3, r5
 801dae6:	4815      	ldr	r0, [pc, #84]	; (801db3c <UIRhodesButtons+0x98>)
 801dae8:	463a      	mov	r2, r7
 801daea:	680d      	ldr	r5, [r1, #0]
 801daec:	2106      	movs	r1, #6
 801daee:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801daf2:	f7f6 f9a3 	bl	8013e3c <OLEDwriteString>
                if (buttonActionsUI[ButtonC][ActionPress] == 1)
 801daf6:	7f25      	ldrb	r5, [r4, #28]
 801daf8:	2d01      	cmp	r5, #1
 801dafa:	d1df      	bne.n	801dabc <UIRhodesButtons+0x18>
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801dafc:	2700      	movs	r7, #0
                    OLEDclearLine(SecondLine);
 801dafe:	4628      	mov	r0, r5
                    buttonActionsUI[ButtonC][ActionPress] = 0;
 801db00:	7727      	strb	r7, [r4, #28]
                    OLEDclearLine(SecondLine);
 801db02:	f7f6 f987 	bl	8013e14 <OLEDclearLine>
                    OLEDwriteString("STEREO TREMO", 12, 0, SecondLine);
 801db06:	462b      	mov	r3, r5
 801db08:	463a      	mov	r2, r7
 801db0a:	210c      	movs	r1, #12
 801db0c:	480c      	ldr	r0, [pc, #48]	; (801db40 <UIRhodesButtons+0x9c>)
 801db0e:	f7f6 f995 	bl	8013e3c <OLEDwriteString>
                    OLEDwriteInt(tremoloStereo, 1, 110, SecondLine);
 801db12:	4a0c      	ldr	r2, [pc, #48]	; (801db44 <UIRhodesButtons+0xa0>)
 801db14:	462b      	mov	r3, r5
 801db16:	4629      	mov	r1, r5
 801db18:	7810      	ldrb	r0, [r2, #0]
 801db1a:	226e      	movs	r2, #110	; 0x6e
 801db1c:	f7f6 f9b8 	bl	8013e90 <OLEDwriteInt>
            }
 801db20:	4630      	mov	r0, r6
 801db22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db24:	20018894 	.word	0x20018894
 801db28:	08145850 	.word	0x08145850
 801db2c:	20000040 	.word	0x20000040
 801db30:	081457a8 	.word	0x081457a8
 801db34:	081457b0 	.word	0x081457b0
 801db38:	20000644 	.word	0x20000644
 801db3c:	20017528 	.word	0x20017528
 801db40:	08145988 	.word	0x08145988
 801db44:	20000640 	.word	0x20000640

0801db48 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801db48:	2904      	cmp	r1, #4
 801db4a:	d00b      	beq.n	801db64 <USBH_UserProcess+0x1c>
 801db4c:	2905      	cmp	r1, #5
 801db4e:	d005      	beq.n	801db5c <USBH_UserProcess+0x14>
 801db50:	2902      	cmp	r1, #2
 801db52:	d000      	beq.n	801db56 <USBH_UserProcess+0xe>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 801db54:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 801db56:	4b05      	ldr	r3, [pc, #20]	; (801db6c <USBH_UserProcess+0x24>)
 801db58:	7019      	strb	r1, [r3, #0]
  break;
 801db5a:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 801db5c:	4b03      	ldr	r3, [pc, #12]	; (801db6c <USBH_UserProcess+0x24>)
 801db5e:	2204      	movs	r2, #4
 801db60:	701a      	strb	r2, [r3, #0]
  break;
 801db62:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 801db64:	4b01      	ldr	r3, [pc, #4]	; (801db6c <USBH_UserProcess+0x24>)
 801db66:	2201      	movs	r2, #1
 801db68:	701a      	strb	r2, [r3, #0]
}
 801db6a:	4770      	bx	lr
 801db6c:	20000697 	.word	0x20000697

0801db70 <MX_USB_HOST_Init>:
{
 801db70:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801db72:	2201      	movs	r2, #1
 801db74:	490c      	ldr	r1, [pc, #48]	; (801dba8 <MX_USB_HOST_Init+0x38>)
 801db76:	480d      	ldr	r0, [pc, #52]	; (801dbac <MX_USB_HOST_Init+0x3c>)
 801db78:	f7f1 face 	bl	800f118 <USBH_Init>
 801db7c:	b988      	cbnz	r0, 801dba2 <MX_USB_HOST_Init+0x32>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 801db7e:	490c      	ldr	r1, [pc, #48]	; (801dbb0 <MX_USB_HOST_Init+0x40>)
 801db80:	480a      	ldr	r0, [pc, #40]	; (801dbac <MX_USB_HOST_Init+0x3c>)
 801db82:	f7f1 fb2f 	bl	800f1e4 <USBH_RegisterClass>
 801db86:	b948      	cbnz	r0, 801db9c <MX_USB_HOST_Init+0x2c>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801db88:	4808      	ldr	r0, [pc, #32]	; (801dbac <MX_USB_HOST_Init+0x3c>)
 801db8a:	f7f1 fc1b 	bl	800f3c4 <USBH_Start>
 801db8e:	b108      	cbz	r0, 801db94 <MX_USB_HOST_Init+0x24>
    Error_Handler();
 801db90:	f7f5 fed6 	bl	8013940 <Error_Handler>
}
 801db94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 801db98:	f7ea b9fc 	b.w	8007f94 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 801db9c:	f7f5 fed0 	bl	8013940 <Error_Handler>
 801dba0:	e7f2      	b.n	801db88 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 801dba2:	f7f5 fecd 	bl	8013940 <Error_Handler>
 801dba6:	e7ea      	b.n	801db7e <MX_USB_HOST_Init+0xe>
 801dba8:	0801db49 	.word	0x0801db49
 801dbac:	300010a0 	.word	0x300010a0
 801dbb0:	200002ec 	.word	0x200002ec

0801dbb4 <MX_USB_HOST_DeInit>:
{
 801dbb4:	b508      	push	{r3, lr}
  if (USBH_Stop(&hUsbHostFS) != USBH_OK)
 801dbb6:	4808      	ldr	r0, [pc, #32]	; (801dbd8 <MX_USB_HOST_DeInit+0x24>)
 801dbb8:	f7f1 fc0e 	bl	800f3d8 <USBH_Stop>
 801dbbc:	b948      	cbnz	r0, 801dbd2 <MX_USB_HOST_DeInit+0x1e>
  if (USBH_DeInit(&hUsbHostFS) != USBH_OK)
 801dbbe:	4806      	ldr	r0, [pc, #24]	; (801dbd8 <MX_USB_HOST_DeInit+0x24>)
 801dbc0:	f7f1 fae2 	bl	800f188 <USBH_DeInit>
 801dbc4:	b108      	cbz	r0, 801dbca <MX_USB_HOST_DeInit+0x16>
    Error_Handler();
 801dbc6:	f7f5 febb 	bl	8013940 <Error_Handler>
}
 801dbca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_DisableUSBVoltageDetector();
 801dbce:	f7ea b9e9 	b.w	8007fa4 <HAL_PWREx_DisableUSBVoltageDetector>
    Error_Handler();
 801dbd2:	f7f5 feb5 	bl	8013940 <Error_Handler>
 801dbd6:	e7f2      	b.n	801dbbe <MX_USB_HOST_DeInit+0xa>
 801dbd8:	300010a0 	.word	0x300010a0

0801dbdc <MX_USB_HOST_Process>:
{
 801dbdc:	b508      	push	{r3, lr}
	MIDI_Application();
 801dbde:	f7f2 fe97 	bl	8010910 <MIDI_Application>
	USBH_Process(&hUsbHostFS);
 801dbe2:	4802      	ldr	r0, [pc, #8]	; (801dbec <MX_USB_HOST_Process+0x10>)
}
 801dbe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	USBH_Process(&hUsbHostFS);
 801dbe8:	f7f1 bc08 	b.w	800f3fc <USBH_Process>
 801dbec:	300010a0 	.word	0x300010a0

0801dbf0 <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{   
 801dbf0:	b508      	push	{r3, lr}

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 801dbf2:	2102      	movs	r1, #2
 801dbf4:	f8d0 3544 	ldr.w	r3, [r0, #1348]	; 0x544
 801dbf8:	4798      	blx	r3

	return USBH_OK;
}
 801dbfa:	2000      	movs	r0, #0
 801dbfc:	bd08      	pop	{r3, pc}
 801dbfe:	bf00      	nop

0801dc00 <USBH_MIDI_Process>:
 *         (background process)
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 801dc00:	b510      	push	{r4, lr}
	USBH_StatusTypeDef status = USBH_BUSY;
	USBH_StatusTypeDef req_status = USBH_OK;
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801dc02:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
 801dc06:	69dc      	ldr	r4, [r3, #28]

	switch(MIDI_Handle->state)
 801dc08:	7823      	ldrb	r3, [r4, #0]
 801dc0a:	b153      	cbz	r3, 801dc22 <USBH_MIDI_Process+0x22>
 801dc0c:	2b02      	cmp	r3, #2
 801dc0e:	d106      	bne.n	801dc1e <USBH_MIDI_Process+0x1e>
		//MIDI_ProcessTransmission(phost);
		//MIDI_ProcessReception(phost);
		break;

	case MIDI_ERROR_STATE:
		req_status = USBH_ClrFeature(phost, 0x00);
 801dc10:	2100      	movs	r1, #0
 801dc12:	f7f2 fcb9 	bl	8010588 <USBH_ClrFeature>

		if(req_status == USBH_OK )
 801dc16:	b910      	cbnz	r0, 801dc1e <USBH_MIDI_Process+0x1e>
		{
			/*Change the state to waiting*/
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 801dc18:	7020      	strb	r0, [r4, #0]
	USBH_StatusTypeDef status = USBH_BUSY;
 801dc1a:	2001      	movs	r0, #1
		break;

	}

	return status;
}
 801dc1c:	bd10      	pop	{r4, pc}
	USBH_StatusTypeDef status = USBH_BUSY;
 801dc1e:	2001      	movs	r0, #1
}
 801dc20:	bd10      	pop	{r4, pc}
		status = USBH_OK;
 801dc22:	4618      	mov	r0, r3
}
 801dc24:	bd10      	pop	{r4, pc}
 801dc26:	bf00      	nop

0801dc28 <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 801dc28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	USBH_StatusTypeDef status = USBH_BUSY;
	USBH_StatusTypeDef req_status = USBH_OK;
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801dc2c:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
 801dc30:	69dc      	ldr	r4, [r3, #28]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
	uint16_t length;
	switch(MIDI_Handle->state)
 801dc32:	7823      	ldrb	r3, [r4, #0]
 801dc34:	2b01      	cmp	r3, #1
 801dc36:	d009      	beq.n	801dc4c <USBH_MIDI_SOFProcess+0x24>
 801dc38:	2b02      	cmp	r3, #2
 801dc3a:	d104      	bne.n	801dc46 <USBH_MIDI_SOFProcess+0x1e>
				break;
		}
		break;

	case MIDI_ERROR_STATE:
		req_status = USBH_ClrFeature(phost, 0x00);
 801dc3c:	2100      	movs	r1, #0
 801dc3e:	f7f2 fca3 	bl	8010588 <USBH_ClrFeature>

		if(req_status == USBH_OK )
 801dc42:	b900      	cbnz	r0, 801dc46 <USBH_MIDI_SOFProcess+0x1e>
		{
			/*Change the state to waiting*/
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 801dc44:	7020      	strb	r0, [r4, #0]
		break;

	}

	return USBH_OK;
}
 801dc46:	2000      	movs	r0, #0
 801dc48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch(MIDI_Handle->data_rx_state)
 801dc4c:	7e63      	ldrb	r3, [r4, #25]
 801dc4e:	2b03      	cmp	r3, #3
 801dc50:	d06c      	beq.n	801dd2c <USBH_MIDI_SOFProcess+0x104>
 801dc52:	2b04      	cmp	r3, #4
 801dc54:	d1f7      	bne.n	801dc46 <USBH_MIDI_SOFProcess+0x1e>
				URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 801dc56:	7861      	ldrb	r1, [r4, #1]
 801dc58:	4605      	mov	r5, r0
 801dc5a:	f000 fa45 	bl	801e0e8 <USBH_LL_GetURBState>
				if(URB_Status == USBH_URB_DONE )
 801dc5e:	2801      	cmp	r0, #1
 801dc60:	d1f1      	bne.n	801dc46 <USBH_MIDI_SOFProcess+0x1e>
					length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 801dc62:	7861      	ldrb	r1, [r4, #1]
 801dc64:	4628      	mov	r0, r5
 801dc66:	f000 f9f7 	bl	801e058 <USBH_LL_GetLastXferSize>
					if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 801dc6a:	8ae3      	ldrh	r3, [r4, #22]
 801dc6c:	b286      	uxth	r6, r0
 801dc6e:	1b9a      	subs	r2, r3, r6
 801dc70:	2a00      	cmp	r2, #0
 801dc72:	dd02      	ble.n	801dc7a <USBH_MIDI_SOFProcess+0x52>
 801dc74:	8922      	ldrh	r2, [r4, #8]
 801dc76:	42b2      	cmp	r2, r6
 801dc78:	d362      	bcc.n	801dd40 <USBH_MIDI_SOFProcess+0x118>
						MIDI_write_buffer = !MIDI_write_buffer;
 801dc7a:	4835      	ldr	r0, [pc, #212]	; (801dd50 <USBH_MIDI_SOFProcess+0x128>)
						MIDI_Handle->data_rx_state = MIDI_IDLE;
 801dc7c:	2300      	movs	r3, #0
						MIDI_read_buffer = !MIDI_read_buffer; //switch buffers for double buffer fun
 801dc7e:	4935      	ldr	r1, [pc, #212]	; (801dd54 <USBH_MIDI_SOFProcess+0x12c>)
						MIDI_write_buffer = !MIDI_write_buffer;
 801dc80:	f890 c000 	ldrb.w	ip, [r0]
						MIDI_read_buffer = !MIDI_read_buffer; //switch buffers for double buffer fun
 801dc84:	780a      	ldrb	r2, [r1, #0]
						MIDI_write_buffer = !MIDI_write_buffer;
 801dc86:	fabc fc8c 	clz	ip, ip
						MIDI_Handle->data_rx_state = MIDI_IDLE;
 801dc8a:	7663      	strb	r3, [r4, #25]
						MIDI_read_buffer = !MIDI_read_buffer; //switch buffers for double buffer fun
 801dc8c:	fab2 f282 	clz	r2, r2
						MIDI_write_buffer = !MIDI_write_buffer;
 801dc90:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
						MIDI_read_buffer = !MIDI_read_buffer; //switch buffers for double buffer fun
 801dc94:	0952      	lsrs	r2, r2, #5
						MIDI_write_buffer = !MIDI_write_buffer;
 801dc96:	f880 c000 	strb.w	ip, [r0]
						MIDI_read_buffer = !MIDI_read_buffer; //switch buffers for double buffer fun
 801dc9a:	700a      	strb	r2, [r1, #0]
						for (int i = 0; i < length; i++)
 801dc9c:	b39e      	cbz	r6, 801dd06 <USBH_MIDI_SOFProcess+0xde>
 801dc9e:	482e      	ldr	r0, [pc, #184]	; (801dd58 <USBH_MIDI_SOFProcess+0x130>)
								myUSB_FIFO_overflowBit = 1;
 801dca0:	f04f 0801 	mov.w	r8, #1
 801dca4:	492d      	ldr	r1, [pc, #180]	; (801dd5c <USBH_MIDI_SOFProcess+0x134>)
								myUSB_FIFO_writePointer = 0;
 801dca6:	469e      	mov	lr, r3
 801dca8:	eb00 1282 	add.w	r2, r0, r2, lsl #6
									myUSB_FIFO[myUSB_FIFO_writePointer] = MIDI_RX_Buffer[MIDI_read_buffer][i];
 801dcac:	4f2c      	ldr	r7, [pc, #176]	; (801dd60 <USBH_MIDI_SOFProcess+0x138>)
							if ((i % 4) == 0)
 801dcae:	f003 0003 	and.w	r0, r3, #3
 801dcb2:	3301      	adds	r3, #1
 801dcb4:	b9e8      	cbnz	r0, 801dcf2 <USBH_MIDI_SOFProcess+0xca>
								if (MIDI_RX_Buffer[MIDI_read_buffer][i] > 0)
 801dcb6:	7810      	ldrb	r0, [r2, #0]
 801dcb8:	b1d8      	cbz	r0, 801dcf2 <USBH_MIDI_SOFProcess+0xca>
									myUSB_FIFO[myUSB_FIFO_writePointer] = MIDI_RX_Buffer[MIDI_read_buffer][i];
 801dcba:	f8b1 9000 	ldrh.w	r9, [r1]
									myUSB_FIFO[myUSB_FIFO_writePointer+1] = MIDI_RX_Buffer[MIDI_read_buffer][i+1];
 801dcbe:	f892 b001 	ldrb.w	fp, [r2, #1]
									myUSB_FIFO[myUSB_FIFO_writePointer] = MIDI_RX_Buffer[MIDI_read_buffer][i];
 801dcc2:	fa1f f989 	uxth.w	r9, r9
									myUSB_FIFO[myUSB_FIFO_writePointer+2] = MIDI_RX_Buffer[MIDI_read_buffer][i+2];
 801dcc6:	f892 a002 	ldrb.w	sl, [r2, #2]
									myUSB_FIFO[myUSB_FIFO_writePointer] = MIDI_RX_Buffer[MIDI_read_buffer][i];
 801dcca:	f807 0009 	strb.w	r0, [r7, r9]
									myUSB_FIFO[myUSB_FIFO_writePointer+1] = MIDI_RX_Buffer[MIDI_read_buffer][i+1];
 801dcce:	8808      	ldrh	r0, [r1, #0]
									myUSB_FIFO[myUSB_FIFO_writePointer+3] = MIDI_RX_Buffer[MIDI_read_buffer][i+3];
 801dcd0:	f892 9003 	ldrb.w	r9, [r2, #3]
									myUSB_FIFO[myUSB_FIFO_writePointer+1] = MIDI_RX_Buffer[MIDI_read_buffer][i+1];
 801dcd4:	3001      	adds	r0, #1
 801dcd6:	f807 b000 	strb.w	fp, [r7, r0]
									myUSB_FIFO[myUSB_FIFO_writePointer+2] = MIDI_RX_Buffer[MIDI_read_buffer][i+2];
 801dcda:	8808      	ldrh	r0, [r1, #0]
 801dcdc:	3002      	adds	r0, #2
 801dcde:	f807 a000 	strb.w	sl, [r7, r0]
									myUSB_FIFO[myUSB_FIFO_writePointer+3] = MIDI_RX_Buffer[MIDI_read_buffer][i+3];
 801dce2:	8808      	ldrh	r0, [r1, #0]
 801dce4:	3003      	adds	r0, #3
 801dce6:	f807 9000 	strb.w	r9, [r7, r0]
									myUSB_FIFO_writePointer+=4;
 801dcea:	8808      	ldrh	r0, [r1, #0]
 801dcec:	3004      	adds	r0, #4
 801dcee:	b280      	uxth	r0, r0
 801dcf0:	8008      	strh	r0, [r1, #0]
							if (myUSB_FIFO_writePointer >= 256)
 801dcf2:	8808      	ldrh	r0, [r1, #0]
 801dcf4:	3201      	adds	r2, #1
 801dcf6:	28ff      	cmp	r0, #255	; 0xff
 801dcf8:	d903      	bls.n	801dd02 <USBH_MIDI_SOFProcess+0xda>
								myUSB_FIFO_writePointer = 0;
 801dcfa:	f8a1 e000 	strh.w	lr, [r1]
								myUSB_FIFO_overflowBit = 1;
 801dcfe:	f881 8002 	strb.w	r8, [r1, #2]
						for (int i = 0; i < length; i++)
 801dd02:	429e      	cmp	r6, r3
 801dd04:	d1d3      	bne.n	801dcae <USBH_MIDI_SOFProcess+0x86>
						MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 801dd06:	2304      	movs	r3, #4
 801dd08:	7663      	strb	r3, [r4, #25]
 * @retval None
 */
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
	USBH_StatusTypeDef Status = USBH_BUSY;
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801dd0a:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
 801dd0e:	69db      	ldr	r3, [r3, #28]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 801dd10:	781a      	ldrb	r2, [r3, #0]
 801dd12:	2a01      	cmp	r2, #1
 801dd14:	d897      	bhi.n	801dc46 <USBH_MIDI_SOFProcess+0x1e>
						USBH_MIDI_Receive(phost, &MIDI_RX_Buffer[MIDI_write_buffer][0], RX_BUFF_SIZE); // start a new reception
 801dd16:	4a10      	ldr	r2, [pc, #64]	; (801dd58 <USBH_MIDI_SOFProcess+0x130>)
	{
		MIDI_Handle->pRxData = pbuff;
		MIDI_Handle->RxDataLength = length;
 801dd18:	2440      	movs	r4, #64	; 0x40
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 801dd1a:	2001      	movs	r0, #1
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 801dd1c:	2103      	movs	r1, #3
						USBH_MIDI_Receive(phost, &MIDI_RX_Buffer[MIDI_write_buffer][0], RX_BUFF_SIZE); // start a new reception
 801dd1e:	eb02 128c 	add.w	r2, r2, ip, lsl #6
		MIDI_Handle->RxDataLength = length;
 801dd22:	82dc      	strh	r4, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 801dd24:	7018      	strb	r0, [r3, #0]
		MIDI_Handle->pRxData = pbuff;
 801dd26:	611a      	str	r2, [r3, #16]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 801dd28:	7659      	strb	r1, [r3, #25]
 801dd2a:	e78c      	b.n	801dc46 <USBH_MIDI_SOFProcess+0x1e>
				USBH_BulkReceiveData (phost,
 801dd2c:	7863      	ldrb	r3, [r4, #1]
 801dd2e:	8922      	ldrh	r2, [r4, #8]
 801dd30:	6921      	ldr	r1, [r4, #16]
 801dd32:	f7f2 fd49 	bl	80107c8 <USBH_BulkReceiveData>
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 801dd36:	2304      	movs	r3, #4
}
 801dd38:	2000      	movs	r0, #0
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 801dd3a:	7663      	strb	r3, [r4, #25]
}
 801dd3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						MIDI_Handle->pRxData += length;
 801dd40:	6922      	ldr	r2, [r4, #16]
						MIDI_Handle->RxDataLength -= length ;
 801dd42:	1b98      	subs	r0, r3, r6
						MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 801dd44:	2303      	movs	r3, #3
						MIDI_Handle->pRxData += length;
 801dd46:	4432      	add	r2, r6
						MIDI_Handle->RxDataLength -= length ;
 801dd48:	82e0      	strh	r0, [r4, #22]
						MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 801dd4a:	7663      	strb	r3, [r4, #25]
						MIDI_Handle->pRxData += length;
 801dd4c:	6122      	str	r2, [r4, #16]
						MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 801dd4e:	e77a      	b.n	801dc46 <USBH_MIDI_SOFProcess+0x1e>
 801dd50:	20000008 	.word	0x20000008
 801dd54:	200004e8 	.word	0x200004e8
 801dd58:	30000000 	.word	0x30000000
 801dd5c:	20000698 	.word	0x20000698
 801dd60:	2001911c 	.word	0x2001911c

0801dd64 <USBH_MIDI_InterfaceDeInit>:
{
 801dd64:	b538      	push	{r3, r4, r5, lr}
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801dd66:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
{
 801dd6a:	4605      	mov	r5, r0
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801dd6c:	69dc      	ldr	r4, [r3, #28]
	if ( MIDI_Handle->OutPipe)
 801dd6e:	78a1      	ldrb	r1, [r4, #2]
 801dd70:	b949      	cbnz	r1, 801dd86 <USBH_MIDI_InterfaceDeInit+0x22>
	if ( MIDI_Handle->InPipe)
 801dd72:	7861      	ldrb	r1, [r4, #1]
 801dd74:	b991      	cbnz	r1, 801dd9c <USBH_MIDI_InterfaceDeInit+0x38>
	if(phost->pActiveClass->pData)
 801dd76:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
 801dd7a:	69da      	ldr	r2, [r3, #28]
 801dd7c:	b10a      	cbz	r2, 801dd82 <USBH_MIDI_InterfaceDeInit+0x1e>
		phost->pActiveClass->pData = 0;
 801dd7e:	2200      	movs	r2, #0
 801dd80:	61da      	str	r2, [r3, #28]
}
 801dd82:	2000      	movs	r0, #0
 801dd84:	bd38      	pop	{r3, r4, r5, pc}
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 801dd86:	f7f2 fd41 	bl	801080c <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 801dd8a:	78a1      	ldrb	r1, [r4, #2]
 801dd8c:	4628      	mov	r0, r5
 801dd8e:	f7f2 fd8d 	bl	80108ac <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 801dd92:	2300      	movs	r3, #0
	if ( MIDI_Handle->InPipe)
 801dd94:	7861      	ldrb	r1, [r4, #1]
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 801dd96:	70a3      	strb	r3, [r4, #2]
	if ( MIDI_Handle->InPipe)
 801dd98:	2900      	cmp	r1, #0
 801dd9a:	d0ec      	beq.n	801dd76 <USBH_MIDI_InterfaceDeInit+0x12>
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 801dd9c:	4628      	mov	r0, r5
 801dd9e:	f7f2 fd35 	bl	801080c <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 801dda2:	7861      	ldrb	r1, [r4, #1]
 801dda4:	4628      	mov	r0, r5
 801dda6:	f7f2 fd81 	bl	80108ac <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 801ddaa:	2300      	movs	r3, #0
 801ddac:	7063      	strb	r3, [r4, #1]
 801ddae:	e7e2      	b.n	801dd76 <USBH_MIDI_InterfaceDeInit+0x12>

0801ddb0 <USBH_MIDI_InterfaceInit>:
{	
 801ddb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 801ddb2:	23ff      	movs	r3, #255	; 0xff
{	
 801ddb4:	b085      	sub	sp, #20
	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 801ddb6:	2203      	movs	r2, #3
 801ddb8:	2101      	movs	r1, #1
{	
 801ddba:	4605      	mov	r5, r0
	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 801ddbc:	f7f1 fa2a 	bl	800f214 <USBH_FindInterface>
	if(interface == 0xFF) /* No Valid Interface */
 801ddc0:	28ff      	cmp	r0, #255	; 0xff
 801ddc2:	d058      	beq.n	801de76 <USBH_MIDI_InterfaceInit+0xc6>
		USBH_SelectInterface (phost, interface);
 801ddc4:	4601      	mov	r1, r0
 801ddc6:	4628      	mov	r0, r5
 801ddc8:	f7f1 fa1a 	bl	800f200 <USBH_SelectInterface>
		phost->pActiveClass->pData = &myMIDIHandle;
 801ddcc:	4c2d      	ldr	r4, [pc, #180]	; (801de84 <USBH_MIDI_InterfaceInit+0xd4>)
 801ddce:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 801ddd2:	222a      	movs	r2, #42	; 0x2a
		phost->pActiveClass->pData = &myMIDIHandle;
 801ddd4:	61dc      	str	r4, [r3, #28]
		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 801ddd6:	f895 3324 	ldrb.w	r3, [r5, #804]	; 0x324
 801ddda:	fb02 5203 	mla	r2, r2, r3, r5
 801ddde:	f892 134e 	ldrb.w	r1, [r2, #846]	; 0x34e
			myMIDIHandle.InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 801dde2:	f8b2 2350 	ldrh.w	r2, [r2, #848]	; 0x350
		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 801dde6:	0608      	lsls	r0, r1, #24
 801dde8:	d442      	bmi.n	801de70 <USBH_MIDI_InterfaceInit+0xc0>
			myMIDIHandle.OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 801ddea:	70e1      	strb	r1, [r4, #3]
			myMIDIHandle.OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 801ddec:	80e2      	strh	r2, [r4, #6]
		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 801ddee:	222a      	movs	r2, #42	; 0x2a
 801ddf0:	fb02 5303 	mla	r3, r2, r3, r5
 801ddf4:	f893 1356 	ldrb.w	r1, [r3, #854]	; 0x356
 801ddf8:	f8b3 3358 	ldrh.w	r3, [r3, #856]	; 0x358
 801ddfc:	060a      	lsls	r2, r1, #24
 801ddfe:	d43d      	bmi.n	801de7c <USBH_MIDI_InterfaceInit+0xcc>
			myMIDIHandle.OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 801de00:	70e1      	strb	r1, [r4, #3]
			myMIDIHandle.OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 801de02:	80e3      	strh	r3, [r4, #6]
		myMIDIHandle.OutPipe = USBH_AllocPipe(phost, myMIDIHandle.OutEp);
 801de04:	4628      	mov	r0, r5
		USBH_OpenPipe  (phost,
 801de06:	2702      	movs	r7, #2
		myMIDIHandle.OutPipe = USBH_AllocPipe(phost, myMIDIHandle.OutEp);
 801de08:	f7f2 fd06 	bl	8010818 <USBH_AllocPipe>
		myMIDIHandle.InPipe = USBH_AllocPipe(phost, myMIDIHandle.InEp);
 801de0c:	7921      	ldrb	r1, [r4, #4]
		myMIDIHandle.OutPipe = USBH_AllocPipe(phost, myMIDIHandle.OutEp);
 801de0e:	70a0      	strb	r0, [r4, #2]
		myMIDIHandle.InPipe = USBH_AllocPipe(phost, myMIDIHandle.InEp);
 801de10:	4628      	mov	r0, r5
 801de12:	f7f2 fd01 	bl	8010818 <USBH_AllocPipe>
		USBH_OpenPipe  (phost,
 801de16:	f8b4 c006 	ldrh.w	ip, [r4, #6]
		myMIDIHandle.InPipe = USBH_AllocPipe(phost, myMIDIHandle.InEp);
 801de1a:	7060      	strb	r0, [r4, #1]
		myMIDIHandle.state = MIDI_IDLE_STATE;
 801de1c:	2600      	movs	r6, #0
		USBH_OpenPipe  (phost,
 801de1e:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 801de22:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 801de26:	78e2      	ldrb	r2, [r4, #3]
 801de28:	78a1      	ldrb	r1, [r4, #2]
 801de2a:	9000      	str	r0, [sp, #0]
 801de2c:	4628      	mov	r0, r5
 801de2e:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 801de32:	f7f2 fcdb 	bl	80107ec <USBH_OpenPipe>
		USBH_OpenPipe  (phost,
 801de36:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 801de3a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801de3e:	4628      	mov	r0, r5
 801de40:	9701      	str	r7, [sp, #4]
 801de42:	f895 731d 	ldrb.w	r7, [r5, #797]	; 0x31d
 801de46:	7922      	ldrb	r2, [r4, #4]
 801de48:	f8cd c008 	str.w	ip, [sp, #8]
 801de4c:	7861      	ldrb	r1, [r4, #1]
 801de4e:	9700      	str	r7, [sp, #0]
 801de50:	f7f2 fccc 	bl	80107ec <USBH_OpenPipe>
		USBH_LL_SetToggle  (phost, myMIDIHandle.InPipe,0);
 801de54:	4632      	mov	r2, r6
 801de56:	7861      	ldrb	r1, [r4, #1]
 801de58:	4628      	mov	r0, r5
		myMIDIHandle.state = MIDI_IDLE_STATE;
 801de5a:	7026      	strb	r6, [r4, #0]
		USBH_LL_SetToggle  (phost, myMIDIHandle.InPipe,0);
 801de5c:	f000 f95a 	bl	801e114 <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, myMIDIHandle.OutPipe,0);
 801de60:	4632      	mov	r2, r6
 801de62:	78a1      	ldrb	r1, [r4, #2]
 801de64:	4628      	mov	r0, r5
 801de66:	f000 f955 	bl	801e114 <USBH_LL_SetToggle>
 801de6a:	4630      	mov	r0, r6
}
 801de6c:	b005      	add	sp, #20
 801de6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			myMIDIHandle.InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 801de70:	7121      	strb	r1, [r4, #4]
			myMIDIHandle.InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 801de72:	8122      	strh	r2, [r4, #8]
 801de74:	e7bb      	b.n	801ddee <USBH_MIDI_InterfaceInit+0x3e>
		status = USBH_FAIL;
 801de76:	2002      	movs	r0, #2
}
 801de78:	b005      	add	sp, #20
 801de7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			myMIDIHandle.InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 801de7c:	7121      	strb	r1, [r4, #4]
			myMIDIHandle.InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 801de7e:	8123      	strh	r3, [r4, #8]
 801de80:	78e1      	ldrb	r1, [r4, #3]
 801de82:	e7bf      	b.n	801de04 <USBH_MIDI_InterfaceInit+0x54>
 801de84:	20019100 	.word	0x20019100

0801de88 <USBH_MIDI_Stop>:
  if(phost->gState == HOST_CLASS)
 801de88:	7802      	ldrb	r2, [r0, #0]
 801de8a:	2a0b      	cmp	r2, #11
 801de8c:	d001      	beq.n	801de92 <USBH_MIDI_Stop+0xa>
}
 801de8e:	2000      	movs	r0, #0
 801de90:	4770      	bx	lr
{
 801de92:	b538      	push	{r3, r4, r5, lr}
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801de94:	f8d0 24ec 	ldr.w	r2, [r0, #1260]	; 0x4ec
    MIDI_Handle->state = MIDI_IDLE_STATE;
 801de98:	2300      	movs	r3, #0
 801de9a:	4604      	mov	r4, r0
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801de9c:	69d5      	ldr	r5, [r2, #28]
    MIDI_Handle->state = MIDI_IDLE_STATE;
 801de9e:	702b      	strb	r3, [r5, #0]
    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 801dea0:	7869      	ldrb	r1, [r5, #1]
 801dea2:	f7f2 fcb3 	bl	801080c <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 801dea6:	78a9      	ldrb	r1, [r5, #2]
 801dea8:	4620      	mov	r0, r4
 801deaa:	f7f2 fcaf 	bl	801080c <USBH_ClosePipe>
}
 801deae:	2000      	movs	r0, #0
 801deb0:	bd38      	pop	{r3, r4, r5, pc}
 801deb2:	bf00      	nop

0801deb4 <USBH_MIDI_Receive>:
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 801deb4:	f8d0 34ec 	ldr.w	r3, [r0, #1260]	; 0x4ec
 801deb8:	69db      	ldr	r3, [r3, #28]
	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 801deba:	7818      	ldrb	r0, [r3, #0]
 801debc:	2801      	cmp	r0, #1
 801debe:	d901      	bls.n	801dec4 <USBH_MIDI_Receive+0x10>
	USBH_StatusTypeDef Status = USBH_BUSY;
 801dec0:	2001      	movs	r0, #1
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
}
 801dec2:	4770      	bx	lr
{
 801dec4:	b430      	push	{r4, r5}
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 801dec6:	2501      	movs	r5, #1
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 801dec8:	2403      	movs	r4, #3
		MIDI_Handle->pRxData = pbuff;
 801deca:	6119      	str	r1, [r3, #16]
		Status = USBH_OK;
 801decc:	2000      	movs	r0, #0
		MIDI_Handle->RxDataLength = length;
 801dece:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 801ded0:	701d      	strb	r5, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 801ded2:	765c      	strb	r4, [r3, #25]
}
 801ded4:	bc30      	pop	{r4, r5}
 801ded6:	4770      	bx	lr

0801ded8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801ded8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcdHandle->Instance==USB_OTG_FS)
 801deda:	4b1e      	ldr	r3, [pc, #120]	; (801df54 <HAL_HCD_MspInit+0x7c>)
{
 801dedc:	b088      	sub	sp, #32
  if(hcdHandle->Instance==USB_OTG_FS)
 801dede:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801dee0:	2400      	movs	r4, #0
  if(hcdHandle->Instance==USB_OTG_FS)
 801dee2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801dee4:	9407      	str	r4, [sp, #28]
 801dee6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 801deea:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hcdHandle->Instance==USB_OTG_FS)
 801deee:	d001      	beq.n	801def4 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */
//
  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801def0:	b008      	add	sp, #32
 801def2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801def4:	4d18      	ldr	r5, [pc, #96]	; (801df58 <HAL_HCD_MspInit+0x80>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801def6:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801def8:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801defa:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801defe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801df02:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801df04:	f043 0301 	orr.w	r3, r3, #1
 801df08:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 801df0c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801df10:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801df12:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801df14:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801df18:	9006      	str	r0, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801df1a:	4810      	ldr	r0, [pc, #64]	; (801df5c <HAL_HCD_MspInit+0x84>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801df1c:	9301      	str	r3, [sp, #4]
 801df1e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801df20:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801df22:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801df24:	f7e7 f948 	bl	80051b8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801df28:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 801df2c:	4622      	mov	r2, r4
 801df2e:	2101      	movs	r1, #1
 801df30:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801df32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801df36:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 801df3a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 801df3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801df42:	9302      	str	r3, [sp, #8]
 801df44:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 801df46:	f7e4 f9d3 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801df4a:	2065      	movs	r0, #101	; 0x65
 801df4c:	f7e4 fa16 	bl	800237c <HAL_NVIC_EnableIRQ>
}
 801df50:	b008      	add	sp, #32
 801df52:	bd70      	pop	{r4, r5, r6, pc}
 801df54:	40080000 	.word	0x40080000
 801df58:	58024400 	.word	0x58024400
 801df5c:	58020000 	.word	0x58020000

0801df60 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 801df60:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801df64:	f7f1 bcb2 	b.w	800f8cc <USBH_LL_IncTimer>

0801df68 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 801df68:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801df6c:	f7f1 bcc6 	b.w	800f8fc <USBH_LL_Connect>

0801df70 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 801df70:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801df74:	f7f1 bcce 	b.w	800f914 <USBH_LL_Disconnect>

0801df78 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801df78:	4770      	bx	lr
 801df7a:	bf00      	nop

0801df7c <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 801df7c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801df80:	f7f1 bcb4 	b.w	800f8ec <USBH_LL_PortEnabled>

0801df84 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 801df84:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 801df88:	f7f1 bcb4 	b.w	800f8f4 <USBH_LL_PortDisabled>

0801df8c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801df8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801df8e:	f890 353c 	ldrb.w	r3, [r0, #1340]	; 0x53c
 801df92:	2b01      	cmp	r3, #1
 801df94:	d001      	beq.n	801df9a <USBH_LL_Init+0xe>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 801df96:	2000      	movs	r0, #0
 801df98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801df9a:	4a10      	ldr	r2, [pc, #64]	; (801dfdc <USBH_LL_Init+0x50>)
 801df9c:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.Init.Host_channels = 6;
 801df9e:	2606      	movs	r6, #6
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801dfa0:	4f0f      	ldr	r7, [pc, #60]	; (801dfe0 <USBH_LL_Init+0x54>)
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801dfa2:	2502      	movs	r5, #2
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801dfa4:	2100      	movs	r1, #0
  phost->pData = &hhcd_USB_OTG_FS;
 801dfa6:	f8c0 2540 	str.w	r2, [r0, #1344]	; 0x540
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801dfaa:	4610      	mov	r0, r2
  hhcd_USB_OTG_FS.pData = phost;
 801dfac:	f8c2 42c0 	str.w	r4, [r2, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801dfb0:	6017      	str	r7, [r2, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 6;
 801dfb2:	6096      	str	r6, [r2, #8]
  hhcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 801dfb4:	e9c2 3303 	strd	r3, r3, [r2, #12]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801dfb8:	e9c2 5106 	strd	r5, r1, [r2, #24]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801dfbc:	f7e7 fc9e 	bl	80058fc <HAL_HCD_Init>
 801dfc0:	b940      	cbnz	r0, 801dfd4 <USBH_LL_Init+0x48>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801dfc2:	4806      	ldr	r0, [pc, #24]	; (801dfdc <USBH_LL_Init+0x50>)
 801dfc4:	f7e8 f93a 	bl	800623c <HAL_HCD_GetCurrentFrame>
 801dfc8:	4601      	mov	r1, r0
 801dfca:	4620      	mov	r0, r4
 801dfcc:	f7f1 fc7a 	bl	800f8c4 <USBH_LL_SetTimer>
}
 801dfd0:	2000      	movs	r0, #0
 801dfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Error_Handler( );
 801dfd4:	f7f5 fcb4 	bl	8013940 <Error_Handler>
 801dfd8:	e7f3      	b.n	801dfc2 <USBH_LL_Init+0x36>
 801dfda:	bf00      	nop
 801dfdc:	2001921c 	.word	0x2001921c
 801dfe0:	40080000 	.word	0x40080000

0801dfe4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801dfe4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 801dfe6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
 801dfea:	f7e8 f8ed 	bl	80061c8 <HAL_HCD_Start>
 801dfee:	2803      	cmp	r0, #3
 801dff0:	d802      	bhi.n	801dff8 <USBH_LL_Start+0x14>
 801dff2:	4b02      	ldr	r3, [pc, #8]	; (801dffc <USBH_LL_Start+0x18>)
 801dff4:	5c18      	ldrb	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 801dff6:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_Start(phost->pData);
 801dff8:	2002      	movs	r0, #2
}
 801dffa:	bd08      	pop	{r3, pc}
 801dffc:	0802bd38 	.word	0x0802bd38

0801e000 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801e000:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 801e002:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
 801e006:	f7e8 f8f5 	bl	80061f4 <HAL_HCD_Stop>
 801e00a:	2803      	cmp	r0, #3
 801e00c:	d802      	bhi.n	801e014 <USBH_LL_Stop+0x14>
 801e00e:	4b02      	ldr	r3, [pc, #8]	; (801e018 <USBH_LL_Stop+0x18>)
 801e010:	5c18      	ldrb	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 801e012:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_Stop(phost->pData);
 801e014:	2002      	movs	r0, #2
}
 801e016:	bd08      	pop	{r3, pc}
 801e018:	0802bd38 	.word	0x0802bd38

0801e01c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801e01c:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801e01e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
 801e022:	f7e8 f90f 	bl	8006244 <HAL_HCD_GetCurrentSpeed>
 801e026:	2802      	cmp	r0, #2
 801e028:	d803      	bhi.n	801e032 <USBH_LL_GetSpeed+0x16>
 801e02a:	4b03      	ldr	r3, [pc, #12]	; (801e038 <USBH_LL_GetSpeed+0x1c>)
 801e02c:	4418      	add	r0, r3
 801e02e:	7900      	ldrb	r0, [r0, #4]
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 801e030:	bd08      	pop	{r3, pc}
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801e032:	2001      	movs	r0, #1
}
 801e034:	bd08      	pop	{r3, pc}
 801e036:	bf00      	nop
 801e038:	0802bd38 	.word	0x0802bd38

0801e03c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801e03c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801e03e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
 801e042:	f7e8 f8e9 	bl	8006218 <HAL_HCD_ResetPort>
 801e046:	2803      	cmp	r0, #3
 801e048:	d802      	bhi.n	801e050 <USBH_LL_ResetPort+0x14>
 801e04a:	4b02      	ldr	r3, [pc, #8]	; (801e054 <USBH_LL_ResetPort+0x18>)
 801e04c:	5c18      	ldrb	r0, [r3, r0]
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 801e04e:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 801e050:	2002      	movs	r0, #2
}
 801e052:	bd08      	pop	{r3, pc}
 801e054:	0802bd38 	.word	0x0802bd38

0801e058 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801e058:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
 801e05c:	f7e8 b8e8 	b.w	8006230 <HAL_HCD_HC_GetXferCount>

0801e060 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801e060:	b530      	push	{r4, r5, lr}
 801e062:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801e064:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
{
 801e068:	f89d 4020 	ldrb.w	r4, [sp, #32]
 801e06c:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801e070:	9400      	str	r4, [sp, #0]
{
 801e072:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801e076:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801e07a:	f7e7 fbf1 	bl	8005860 <HAL_HCD_HC_Init>
 801e07e:	2803      	cmp	r0, #3
 801e080:	d803      	bhi.n	801e08a <USBH_LL_OpenPipe+0x2a>
 801e082:	4b03      	ldr	r3, [pc, #12]	; (801e090 <USBH_LL_OpenPipe+0x30>)
 801e084:	5c18      	ldrb	r0, [r3, r0]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 801e086:	b005      	add	sp, #20
 801e088:	bd30      	pop	{r4, r5, pc}
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801e08a:	2002      	movs	r0, #2
}
 801e08c:	b005      	add	sp, #20
 801e08e:	bd30      	pop	{r4, r5, pc}
 801e090:	0802bd38 	.word	0x0802bd38

0801e094 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801e094:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801e096:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
 801e09a:	f7e7 fc1d 	bl	80058d8 <HAL_HCD_HC_Halt>
 801e09e:	2803      	cmp	r0, #3
 801e0a0:	d802      	bhi.n	801e0a8 <USBH_LL_ClosePipe+0x14>
 801e0a2:	4b02      	ldr	r3, [pc, #8]	; (801e0ac <USBH_LL_ClosePipe+0x18>)
 801e0a4:	5c18      	ldrb	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 801e0a6:	bd08      	pop	{r3, pc}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801e0a8:	2002      	movs	r0, #2
}
 801e0aa:	bd08      	pop	{r3, pc}
 801e0ac:	0802bd38 	.word	0x0802bd38

0801e0b0 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801e0b0:	b530      	push	{r4, r5, lr}
 801e0b2:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801e0b4:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
{
 801e0b8:	f89d 5020 	ldrb.w	r5, [sp, #32]
 801e0bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801e0be:	9500      	str	r5, [sp, #0]
 801e0c0:	9401      	str	r4, [sp, #4]
{
 801e0c2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801e0c6:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801e0ca:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801e0ce:	f7e7 fc75 	bl	80059bc <HAL_HCD_HC_SubmitRequest>
 801e0d2:	2803      	cmp	r0, #3
 801e0d4:	d803      	bhi.n	801e0de <USBH_LL_SubmitURB+0x2e>
 801e0d6:	4b03      	ldr	r3, [pc, #12]	; (801e0e4 <USBH_LL_SubmitURB+0x34>)
 801e0d8:	5c18      	ldrb	r0, [r3, r0]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 801e0da:	b005      	add	sp, #20
 801e0dc:	bd30      	pop	{r4, r5, pc}
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801e0de:	2002      	movs	r0, #2
}
 801e0e0:	b005      	add	sp, #20
 801e0e2:	bd30      	pop	{r4, r5, pc}
 801e0e4:	0802bd38 	.word	0x0802bd38

0801e0e8 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801e0e8:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
 801e0ec:	f7e8 b898 	b.w	8006220 <HAL_HCD_HC_GetURBState>

0801e0f0 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801e0f0:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 801e0f2:	f890 353c 	ldrb.w	r3, [r0, #1340]	; 0x53c
 801e0f6:	2b01      	cmp	r3, #1
 801e0f8:	d004      	beq.n	801e104 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801e0fa:	20c8      	movs	r0, #200	; 0xc8
 801e0fc:	f7e2 fc96 	bl	8000a2c <HAL_Delay>
  return USBH_OK;
}
 801e100:	2000      	movs	r0, #0
 801e102:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 801e104:	4608      	mov	r0, r1
 801e106:	f000 f819 	bl	801e13c <MX_DriverVbusFS>
  HAL_Delay(200);
 801e10a:	20c8      	movs	r0, #200	; 0xc8
 801e10c:	f7e2 fc8e 	bl	8000a2c <HAL_Delay>
}
 801e110:	2000      	movs	r0, #0
 801e112:	bd08      	pop	{r3, pc}

0801e114 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801e114:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540

  if(pHandle->hc[pipe].ep_is_in)
 801e118:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801e11c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801e120:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 801e124:	b91b      	cbnz	r3, 801e12e <USBH_LL_SetToggle+0x1a>
  {
    pHandle->hc[pipe].toggle_in = toggle;
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801e126:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
  }

  return USBH_OK;
}
 801e12a:	2000      	movs	r0, #0
 801e12c:	4770      	bx	lr
    pHandle->hc[pipe].toggle_in = toggle;
 801e12e:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
}
 801e132:	2000      	movs	r0, #0
 801e134:	4770      	bx	lr
 801e136:	bf00      	nop

0801e138 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 801e138:	f7e2 bc78 	b.w	8000a2c <HAL_Delay>

0801e13c <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,(GPIO_PinState)data);
 801e13c:	fab0 f280 	clz	r2, r0
 801e140:	2140      	movs	r1, #64	; 0x40
 801e142:	4802      	ldr	r0, [pc, #8]	; (801e14c <MX_DriverVbusFS+0x10>)
 801e144:	0952      	lsrs	r2, r2, #5
 801e146:	f7e7 bb71 	b.w	800582c <HAL_GPIO_WritePin>
 801e14a:	bf00      	nop
 801e14c:	58021400 	.word	0x58021400

0801e150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801e150:	f8df d034 	ldr.w	sp, [pc, #52]	; 801e188 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801e154:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801e156:	e003      	b.n	801e160 <LoopCopyDataInit>

0801e158 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801e158:	4b0c      	ldr	r3, [pc, #48]	; (801e18c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801e15a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801e15c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801e15e:	3104      	adds	r1, #4

0801e160 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801e160:	480b      	ldr	r0, [pc, #44]	; (801e190 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801e162:	4b0c      	ldr	r3, [pc, #48]	; (801e194 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801e164:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801e166:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801e168:	d3f6      	bcc.n	801e158 <CopyDataInit>
  ldr  r2, =_sbss
 801e16a:	4a0b      	ldr	r2, [pc, #44]	; (801e198 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801e16c:	e002      	b.n	801e174 <LoopFillZerobss>

0801e16e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801e16e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801e170:	f842 3b04 	str.w	r3, [r2], #4

0801e174 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801e174:	4b09      	ldr	r3, [pc, #36]	; (801e19c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801e176:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801e178:	d3f9      	bcc.n	801e16e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801e17a:	f7fd fefb 	bl	801bf74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801e17e:	f008 fe53 	bl	8026e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801e182:	f7f5 fab1 	bl	80136e8 <main>
  bx  lr    
 801e186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801e188:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 801e18c:	08146310 	.word	0x08146310
  ldr  r0, =_sdata
 801e190:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801e194:	200004b8 	.word	0x200004b8
  ldr  r2, =_sbss
 801e198:	200004b8 	.word	0x200004b8
  ldr  r3, = _ebss
 801e19c:	20019510 	.word	0x20019510

0801e1a0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801e1a0:	e7fe      	b.n	801e1a0 <ADC3_IRQHandler>
 801e1a2:	0000      	movs	r0, r0
 801e1a4:	0000      	movs	r0, r0
	...

0801e1a8 <mayer_fht>:
 REAL f0,g0,f1,g1,f2,g2,f3,g3; */
 int  k,k1,k2,k3,k4,kx;
 REAL *fi,*fn,*gi;
 TRIG_VARS;

 for (k1=1,k2=0;k1<n;k1++)
 801e1a8:	2901      	cmp	r1, #1
{
 801e1aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1ae:	ed2d 8b02 	vpush	{d8}
 801e1b2:	b08b      	sub	sp, #44	; 0x2c
 for (k1=1,k2=0;k1<n;k1++)
 801e1b4:	f340 821f 	ble.w	801e5f6 <mayer_fht+0x44e>
    {
     REAL aa;
     for (k=n>>1; (!((k2^=k)&k)); k>>=1);
 801e1b8:	ea4f 0c61 	mov.w	ip, r1, asr #1
 801e1bc:	1d07      	adds	r7, r0, #4
 for (k1=1,k2=0;k1<n;k1++)
 801e1be:	2400      	movs	r4, #0
 801e1c0:	2601      	movs	r6, #1
     for (k=n>>1; (!((k2^=k)&k)); k>>=1);
 801e1c2:	ea3c 0304 	bics.w	r3, ip, r4
 801e1c6:	ea8c 0204 	eor.w	r2, ip, r4
 801e1ca:	f040 8212 	bne.w	801e5f2 <mayer_fht+0x44a>
 801e1ce:	4663      	mov	r3, ip
 801e1d0:	105b      	asrs	r3, r3, #1
 801e1d2:	ea83 0402 	eor.w	r4, r3, r2
 801e1d6:	ea23 0502 	bic.w	r5, r3, r2
 801e1da:	4622      	mov	r2, r4
 801e1dc:	2d00      	cmp	r5, #0
 801e1de:	d0f7      	beq.n	801e1d0 <mayer_fht+0x28>
     if (k1>k2)
 801e1e0:	42b4      	cmp	r4, r6
 801e1e2:	da05      	bge.n	801e1f0 <mayer_fht+0x48>
        {
             aa=fz[k1];fz[k1]=fz[k2];fz[k2]=aa;
 801e1e4:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 801e1e8:	683a      	ldr	r2, [r7, #0]
 801e1ea:	681d      	ldr	r5, [r3, #0]
 801e1ec:	603d      	str	r5, [r7, #0]
 801e1ee:	601a      	str	r2, [r3, #0]
 for (k1=1,k2=0;k1<n;k1++)
 801e1f0:	3601      	adds	r6, #1
 801e1f2:	3704      	adds	r7, #4
 801e1f4:	42b1      	cmp	r1, r6
 801e1f6:	d1e4      	bne.n	801e1c2 <mayer_fht+0x1a>
        }
    }
 for ( k=0 ; (1<<k)<n ; k++ );
 801e1f8:	2300      	movs	r3, #0
 801e1fa:	2401      	movs	r4, #1
 801e1fc:	3301      	adds	r3, #1
 801e1fe:	fa04 f203 	lsl.w	r2, r4, r3
 801e202:	42b2      	cmp	r2, r6
 801e204:	dbfa      	blt.n	801e1fc <mayer_fht+0x54>
 k  &= 1;
 if (k==0)
 801e206:	f013 0301 	ands.w	r3, r3, #1
 801e20a:	eb00 0b86 	add.w	fp, r0, r6, lsl #2
 801e20e:	9301      	str	r3, [sp, #4]
 801e210:	f000 81f3 	beq.w	801e5fa <mayer_fht+0x452>
             fi[1 ] = (f1+f3);
            }
    }
 else
    {
         for (fi=fz,fn=fz+n,gi=fi+1;fi<fn;fi+=8,gi+=8)
 801e214:	4558      	cmp	r0, fp
 801e216:	d266      	bcs.n	801e2e6 <mayer_fht+0x13e>
 801e218:	f100 0320 	add.w	r3, r0, #32
 801e21c:	f100 0440 	add.w	r4, r0, #64	; 0x40
 801e220:	f1c3 021f 	rsb	r2, r3, #31
 801e224:	445a      	add	r2, fp
 801e226:	f022 021f 	bic.w	r2, r2, #31
             bf0     = (bs1 + bs2);
             bg1     = (bc1 - bc2);     
             bg0     = (bc1 + bc2);
             bf3     = (bs3 - bs4);     
             bf2     = (bs3 + bs4);
             bg3     = SQRT2*bc4;               
 801e22a:	ed9f 3be3 	vldr	d3, [pc, #908]	; 801e5b8 <mayer_fht+0x410>
 801e22e:	4422      	add	r2, r4
             bc3     = fi[4 ] - gi[4 ];
 801e230:	ed53 7a03 	vldr	s15, [r3, #-12]
 801e234:	3320      	adds	r3, #32
             bc4     = fi[6 ] - gi[6 ];
 801e236:	ed13 6a0a 	vldr	s12, [r3, #-40]	; 0xffffffd8
 801e23a:	ed13 7a09 	vldr	s14, [r3, #-36]	; 0xffffffdc
             bc3     = fi[4 ] - gi[4 ];
 801e23e:	ed53 6a0c 	vldr	s13, [r3, #-48]	; 0xffffffd0
             bc4     = fi[6 ] - gi[6 ];
 801e242:	ee36 2a47 	vsub.f32	s4, s12, s14
             bc1     = fi[0 ] - gi[0 ];
 801e246:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
             bc3     = fi[4 ] - gi[4 ];
 801e24a:	ee36 0ae7 	vsub.f32	s0, s13, s15
             bc2     = fi[2 ] - gi[2 ];
 801e24e:	ed53 4a0e 	vldr	s9, [r3, #-56]	; 0xffffffc8
             bc1     = fi[0 ] - gi[0 ];
 801e252:	ed13 5a10 	vldr	s10, [r3, #-64]	; 0xffffffc0
             bs3     = fi[4 ] + gi[4 ];
 801e256:	ee76 6aa7 	vadd.f32	s13, s13, s15
             bg3     = SQRT2*bc4;               
 801e25a:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
             bc2     = fi[2 ] - gi[2 ];
 801e25e:	ed53 7a0d 	vldr	s15, [r3, #-52]	; 0xffffffcc
             bg2     = SQRT2*bc3;
 801e262:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
             bc1     = fi[0 ] - gi[0 ];
 801e266:	ee75 1a65 	vsub.f32	s3, s10, s11
             bg3     = SQRT2*bc4;               
 801e26a:	ee22 2b03 	vmul.f64	d2, d2, d3
             bg2     = SQRT2*bc3;
 801e26e:	ee20 0b03 	vmul.f64	d0, d0, d3
             bc2     = fi[2 ] - gi[2 ];
 801e272:	ee34 4ae7 	vsub.f32	s8, s9, s15
             bs1     = fi[0 ] + gi[0 ];
 801e276:	ee35 5a25 	vadd.f32	s10, s10, s11
             bg3     = SQRT2*bc4;               
 801e27a:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
             bs2     = fi[2 ] + gi[2 ];
 801e27e:	ee74 5aa7 	vadd.f32	s11, s9, s15
             bg2     = SQRT2*bc3;
 801e282:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
             bs4     = fi[6 ] + gi[6 ];
 801e286:	ee76 7a07 	vadd.f32	s15, s12, s14
             bg0     = (bc1 + bc2);
 801e28a:	ee31 1a84 	vadd.f32	s2, s3, s8
             bg1     = (bc1 - bc2);     
 801e28e:	ee71 4ac4 	vsub.f32	s9, s3, s8
             bf1     = (bs1 - bs2);     
 801e292:	ee35 7a65 	vsub.f32	s14, s10, s11
             bf2     = (bs3 + bs4);
 801e296:	ee36 6aa7 	vadd.f32	s12, s13, s15
             bf0     = (bs1 + bs2);
 801e29a:	ee75 5a25 	vadd.f32	s11, s10, s11
             bf3     = (bs3 - bs4);     
 801e29e:	ee76 7ae7 	vsub.f32	s15, s13, s15
             fi[4 ] = bf0 - bf2;
             fi[0 ] = bf0 + bf2;
             fi[6 ] = bf1 - bf3;
             fi[2 ] = bf1 + bf3;
             gi[4 ] = bg0 - bg2;
 801e2a2:	ee31 5a40 	vsub.f32	s10, s2, s0
             gi[0 ] = bg0 + bg2;
             gi[6 ] = bg1 - bg3;
 801e2a6:	ee74 6ac2 	vsub.f32	s13, s9, s4
             gi[0 ] = bg0 + bg2;
 801e2aa:	ee31 0a00 	vadd.f32	s0, s2, s0
             gi[4 ] = bg0 - bg2;
 801e2ae:	ed03 5a0b 	vstr	s10, [r3, #-44]	; 0xffffffd4
             gi[2 ] = bg1 + bg3;
 801e2b2:	ee34 2a82 	vadd.f32	s4, s9, s4
             gi[6 ] = bg1 - bg3;
 801e2b6:	ed43 6a09 	vstr	s13, [r3, #-36]	; 0xffffffdc
             fi[4 ] = bf0 - bf2;
 801e2ba:	ee35 5ac6 	vsub.f32	s10, s11, s12
             fi[6 ] = bf1 - bf3;
 801e2be:	ee77 6a67 	vsub.f32	s13, s14, s15
             gi[0 ] = bg0 + bg2;
 801e2c2:	ed03 0a0f 	vstr	s0, [r3, #-60]	; 0xffffffc4
             fi[0 ] = bf0 + bf2;
 801e2c6:	ee35 6a86 	vadd.f32	s12, s11, s12
             gi[2 ] = bg1 + bg3;
 801e2ca:	ed03 2a0d 	vstr	s4, [r3, #-52]	; 0xffffffcc
             fi[2 ] = bf1 + bf3;
 801e2ce:	ee77 7a27 	vadd.f32	s15, s14, s15
             fi[4 ] = bf0 - bf2;
 801e2d2:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
             fi[6 ] = bf1 - bf3;
 801e2d6:	ed43 6a0a 	vstr	s13, [r3, #-40]	; 0xffffffd8
             fi[0 ] = bf0 + bf2;
 801e2da:	ed03 6a10 	vstr	s12, [r3, #-64]	; 0xffffffc0
             fi[2 ] = bf1 + bf3;
 801e2de:	ed43 7a0e 	vstr	s15, [r3, #-56]	; 0xffffffc8
         for (fi=fz,fn=fz+n,gi=fi+1;fi<fn;fi+=8,gi+=8)
 801e2e2:	429a      	cmp	r2, r3
 801e2e4:	d1a4      	bne.n	801e230 <mayer_fht+0x88>
            }
    }
 if (n<16) return;
 801e2e6:	290f      	cmp	r1, #15
 801e2e8:	f340 817e 	ble.w	801e5e8 <mayer_fht+0x440>
 801e2ec:	9b01      	ldr	r3, [sp, #4]
 801e2ee:	3301      	adds	r3, #1
             fi[0 ]  = f0         + f2;
             fi[k3]  = f1         - f3;
             fi[k1]  = f1         + f3;
             g1      = gi[0 ] - gi[k1];
             g0      = gi[0 ] + gi[k1];
             g3      = SQRT2  * gi[k3];
 801e2f0:	ed9f 8bb1 	vldr	d8, [pc, #708]	; 801e5b8 <mayer_fht+0x410>
 801e2f4:	009b      	lsls	r3, r3, #2
 801e2f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801e2fa:	9306      	str	r3, [sp, #24]
     k  += 2;
 801e2fc:	9901      	ldr	r1, [sp, #4]
     k1  = 1  << k;
 801e2fe:	2501      	movs	r5, #1
             f1      = fi[0 ] - fi[k1];
 801e300:	2204      	movs	r2, #4
             g2      = SQRT2  * gi[k2];
             gi[k2]  = g0         - g2;
             gi[0 ]  = g0         + g2;
             gi[k3]  = g1         - g3;
             gi[k1]  = g1         + g3;
             gi     += k4;
 801e302:	9808      	ldr	r0, [sp, #32]
     k  += 2;
 801e304:	3102      	adds	r1, #2
             gi     += k4;
 801e306:	4603      	mov	r3, r0
     k1  = 1  << k;
 801e308:	408d      	lsls	r5, r1
             f1      = fi[0 ] - fi[k1];
 801e30a:	fa02 f401 	lsl.w	r4, r2, r1
     k  += 2;
 801e30e:	9101      	str	r1, [sp, #4]
     kx  = k1 >> 1;
 801e310:	106f      	asrs	r7, r5, #1
 801e312:	eb00 0e04 	add.w	lr, r0, r4
     k3  = k2 + k1;
 801e316:	eb05 0145 	add.w	r1, r5, r5, lsl #1
             f1      = fi[0 ] - fi[k1];
 801e31a:	9403      	str	r4, [sp, #12]
         gi  = fi + kx;
 801e31c:	eb00 0287 	add.w	r2, r0, r7, lsl #2
     kx  = k1 >> 1;
 801e320:	9702      	str	r7, [sp, #8]
             f3      = fi[k2] - fi[k3];
 801e322:	0089      	lsls	r1, r1, #2
 801e324:	00ee      	lsls	r6, r5, #3
 801e326:	eb02 0c04 	add.w	ip, r2, r4
 801e32a:	460c      	mov	r4, r1
 801e32c:	9105      	str	r1, [sp, #20]
 801e32e:	9604      	str	r6, [sp, #16]
 801e330:	1857      	adds	r7, r2, r1
 801e332:	1906      	adds	r6, r0, r4
 801e334:	4601      	mov	r1, r0
 801e336:	00ec      	lsls	r4, r5, #3
 801e338:	1910      	adds	r0, r2, r4
 801e33a:	4421      	add	r1, r4
     k4  = k2 << 1;
 801e33c:	00ac      	lsls	r4, r5, #2
 801e33e:	9407      	str	r4, [sp, #28]
             gi     += k4;
 801e340:	012c      	lsls	r4, r5, #4
             f1      = fi[0 ] - fi[k1];
 801e342:	ed93 6a00 	vldr	s12, [r3]
             f3      = fi[k2] - fi[k3];
 801e346:	edd6 6a00 	vldr	s13, [r6]
             f1      = fi[0 ] - fi[k1];
 801e34a:	ed9e 7a00 	vldr	s14, [lr]
             f3      = fi[k2] - fi[k3];
 801e34e:	edd1 7a00 	vldr	s15, [r1]
             f0      = fi[0 ] + fi[k1];
 801e352:	ee76 5a07 	vadd.f32	s11, s12, s14
             f1      = fi[0 ] - fi[k1];
 801e356:	ee36 7a47 	vsub.f32	s14, s12, s14
             f2      = fi[k2] + fi[k3];
 801e35a:	ee37 6aa6 	vadd.f32	s12, s15, s13
             f3      = fi[k2] - fi[k3];
 801e35e:	ee77 7ae6 	vsub.f32	s15, s15, s13
             fi[k2]  = f0         - f2;
 801e362:	ee35 5ac6 	vsub.f32	s10, s11, s12
             fi[k3]  = f1         - f3;
 801e366:	ee77 6a67 	vsub.f32	s13, s14, s15
             fi[0 ]  = f0         + f2;
 801e36a:	ee35 6a86 	vadd.f32	s12, s11, s12
             fi[k1]  = f1         + f3;
 801e36e:	ee77 7a27 	vadd.f32	s15, s14, s15
             fi[k2]  = f0         - f2;
 801e372:	ed81 5a00 	vstr	s10, [r1]
 801e376:	4421      	add	r1, r4
             fi[0 ]  = f0         + f2;
 801e378:	ed83 6a00 	vstr	s12, [r3]
             fi     += k4;
 801e37c:	4423      	add	r3, r4
             fi[k3]  = f1         - f3;
 801e37e:	edc6 6a00 	vstr	s13, [r6]
 801e382:	4426      	add	r6, r4
             fi[k1]  = f1         + f3;
 801e384:	edce 7a00 	vstr	s15, [lr]
            } while (fi<fn);
 801e388:	455b      	cmp	r3, fp
             g2      = SQRT2  * gi[k2];
 801e38a:	ed90 5a00 	vldr	s10, [r0]
 801e38e:	44a6      	add	lr, r4
             g3      = SQRT2  * gi[k3];
 801e390:	ed97 7a00 	vldr	s14, [r7]
             g2      = SQRT2  * gi[k2];
 801e394:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
             g1      = gi[0 ] - gi[k1];
 801e398:	ed92 6a00 	vldr	s12, [r2]
             g3      = SQRT2  * gi[k3];
 801e39c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
             g1      = gi[0 ] - gi[k1];
 801e3a0:	eddc 6a00 	vldr	s13, [ip]
             g2      = SQRT2  * gi[k2];
 801e3a4:	ee25 5b08 	vmul.f64	d5, d5, d8
             g3      = SQRT2  * gi[k3];
 801e3a8:	ee27 7b08 	vmul.f64	d7, d7, d8
             g2      = SQRT2  * gi[k2];
 801e3ac:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
             g0      = gi[0 ] + gi[k1];
 801e3b0:	ee76 5a26 	vadd.f32	s11, s12, s13
             g1      = gi[0 ] - gi[k1];
 801e3b4:	ee76 6a66 	vsub.f32	s13, s12, s13
             g3      = SQRT2  * gi[k3];
 801e3b8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
             gi[k2]  = g0         - g2;
 801e3bc:	ee35 6ac5 	vsub.f32	s12, s11, s10
             gi[0 ]  = g0         + g2;
 801e3c0:	ee35 5a85 	vadd.f32	s10, s11, s10
             gi[k3]  = g1         - g3;
 801e3c4:	ee76 7ac7 	vsub.f32	s15, s13, s14
             gi[k1]  = g1         + g3;
 801e3c8:	ee36 7a87 	vadd.f32	s14, s13, s14
             gi[k2]  = g0         - g2;
 801e3cc:	ed80 6a00 	vstr	s12, [r0]
             gi[0 ]  = g0         + g2;
 801e3d0:	ed82 5a00 	vstr	s10, [r2]
 801e3d4:	4420      	add	r0, r4
             gi[k3]  = g1         - g3;
 801e3d6:	edc7 7a00 	vstr	s15, [r7]
             gi     += k4;
 801e3da:	4422      	add	r2, r4
             gi[k1]  = g1         + g3;
 801e3dc:	ed8c 7a00 	vstr	s14, [ip]
 801e3e0:	4427      	add	r7, r4
 801e3e2:	44a4      	add	ip, r4
            } while (fi<fn);
 801e3e4:	d3ad      	bcc.n	801e342 <mayer_fht+0x19a>
 801e3e6:	9e06      	ldr	r6, [sp, #24]
 801e3e8:	4975      	ldr	r1, [pc, #468]	; (801e5c0 <mayer_fht+0x418>)
 801e3ea:	4632      	mov	r2, r6
 801e3ec:	4875      	ldr	r0, [pc, #468]	; (801e5c4 <mayer_fht+0x41c>)
 801e3ee:	f008 fd59 	bl	8026ea4 <memcpy>
 801e3f2:	4632      	mov	r2, r6
 801e3f4:	4974      	ldr	r1, [pc, #464]	; (801e5c8 <mayer_fht+0x420>)
 801e3f6:	4875      	ldr	r0, [pc, #468]	; (801e5cc <mayer_fht+0x424>)
 801e3f8:	f008 fd54 	bl	8026ea4 <memcpy>
     TRIG_INIT(k,c1,s1);
     for (ii=1;ii<kx;ii++)
 801e3fc:	9b02      	ldr	r3, [sp, #8]
 801e3fe:	2b01      	cmp	r3, #1
 801e400:	f340 80ea 	ble.w	801e5d8 <mayer_fht+0x430>
 801e404:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
 801e408:	9a08      	ldr	r2, [sp, #32]
        {
         REAL c2,s2;
         TRIG_NEXT(k,c1,s1);
 801e40a:	f04f 0e01 	mov.w	lr, #1
 801e40e:	2300      	movs	r3, #0
 801e410:	44a8      	add	r8, r5
 801e412:	f102 0904 	add.w	r9, r2, #4
 801e416:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 801e5d4 <mayer_fht+0x42c>
 801e41a:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801e41e:	9a01      	ldr	r2, [sp, #4]
 801e420:	1ad2      	subs	r2, r2, r3
 801e422:	0091      	lsls	r1, r2, #2
 801e424:	2a01      	cmp	r2, #1
 801e426:	eb0a 0001 	add.w	r0, sl, r1
 801e42a:	ed90 2a14 	vldr	s4, [r0, #80]	; 0x50
 801e42e:	edd0 2a00 	vldr	s5, [r0]
 801e432:	dd29      	ble.n	801e488 <mayer_fht+0x2e0>
 801e434:	3302      	adds	r3, #2
 801e436:	fa4e f003 	asr.w	r0, lr, r3
 801e43a:	07c5      	lsls	r5, r0, #31
 801e43c:	d504      	bpl.n	801e448 <mayer_fht+0x2a0>
 801e43e:	3301      	adds	r3, #1
 801e440:	fa4e f003 	asr.w	r0, lr, r3
 801e444:	07c0      	lsls	r0, r0, #31
 801e446:	d4fa      	bmi.n	801e43e <mayer_fht+0x296>
 801e448:	9801      	ldr	r0, [sp, #4]
 801e44a:	3a01      	subs	r2, #1
 801e44c:	1ac3      	subs	r3, r0, r3
 801e44e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801e452:	485f      	ldr	r0, [pc, #380]	; (801e5d0 <mayer_fht+0x428>)
 801e454:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801e458:	edd2 6a00 	vldr	s13, [r2]
 801e45c:	edd2 5a14 	vldr	s11, [r2, #80]	; 0x50
 801e460:	4408      	add	r0, r1
 801e462:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 801e466:	4451      	add	r1, sl
 801e468:	ed93 7a00 	vldr	s14, [r3]
 801e46c:	ee35 6a86 	vadd.f32	s12, s11, s12
 801e470:	edd0 7a28 	vldr	s15, [r0, #160]	; 0xa0
 801e474:	ee36 7a87 	vadd.f32	s14, s13, s14
 801e478:	ee66 6a27 	vmul.f32	s13, s12, s15
 801e47c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e480:	edc1 6a14 	vstr	s13, [r1, #80]	; 0x50
 801e484:	edc1 7a00 	vstr	s15, [r1]
 801e488:	9a03      	ldr	r2, [sp, #12]
         c2 = c1*c1 - s1*s1;
 801e48a:	ee22 3a42 	vnmul.f32	s6, s4, s4
         s2 = 2*(c1*s1);
 801e48e:	ee62 3a22 	vmul.f32	s7, s4, s5
             fn = fz + n;
             fi = fz +ii;
 801e492:	464b      	mov	r3, r9
 801e494:	eb02 0709 	add.w	r7, r2, r9
 801e498:	eb02 0608 	add.w	r6, r2, r8
 801e49c:	9a05      	ldr	r2, [sp, #20]
         c2 = c1*c1 - s1*s1;
 801e49e:	eea2 3aa2 	vfma.f32	s6, s5, s5
         s2 = 2*(c1*s1);
 801e4a2:	ee73 3aa3 	vadd.f32	s7, s7, s7
             gi = fz +k1-ii;
 801e4a6:	46c4      	mov	ip, r8
 801e4a8:	eb02 0509 	add.w	r5, r2, r9
 801e4ac:	eb02 0008 	add.w	r0, r2, r8
 801e4b0:	9a04      	ldr	r2, [sp, #16]
 801e4b2:	4611      	mov	r1, r2
 801e4b4:	4442      	add	r2, r8
 801e4b6:	4449      	add	r1, r9
                 a       = c2*fi[k1] + s2*gi[k1];
                 f1      = fi[0 ]    - a;
                 f0      = fi[0 ]    + a;
                 g1      = gi[0 ]    - b;
                 g0      = gi[0 ]    + b;
                 b       = s2*fi[k3] - c2*gi[k3];
 801e4b8:	edd0 4a00 	vldr	s9, [r0]
 801e4bc:	edd5 7a00 	vldr	s15, [r5]
 801e4c0:	ee63 1a64 	vnmul.f32	s3, s6, s9
                 a       = c2*fi[k3] + s2*gi[k3];
                 f3      = fi[k2]    - a;
                 f2      = fi[k2]    + a;
                 g3      = gi[k2]    - b;
 801e4c4:	ed92 1a00 	vldr	s2, [r2]
                 a       = c2*fi[k3] + s2*gi[k3];
 801e4c8:	ee64 4aa3 	vmul.f32	s9, s9, s7
                 b       = s2*fi[k1] - c2*gi[k1];
 801e4cc:	edd6 5a00 	vldr	s11, [r6]
                 f3      = fi[k2]    - a;
 801e4d0:	ed91 6a00 	vldr	s12, [r1]
                 b       = s2*fi[k3] - c2*gi[k3];
 801e4d4:	eee7 1aa3 	vfma.f32	s3, s15, s7
                 b       = s2*fi[k1] - c2*gi[k1];
 801e4d8:	ed97 0a00 	vldr	s0, [r7]
                 a       = c2*fi[k3] + s2*gi[k3];
 801e4dc:	eee7 4a83 	vfma.f32	s9, s15, s6
                 f1      = fi[0 ]    - a;
 801e4e0:	edd3 6a00 	vldr	s13, [r3]
                 a       = c2*fi[k1] + s2*gi[k1];
 801e4e4:	ee25 7aa3 	vmul.f32	s14, s11, s7
                 g1      = gi[0 ]    - b;
 801e4e8:	ed9c 5a00 	vldr	s10, [ip]
                 b       = s2*fi[k1] - c2*gi[k1];
 801e4ec:	ee63 5a65 	vnmul.f32	s11, s6, s11
                 a       = c2*fi[k1] + s2*gi[k1];
 801e4f0:	eea0 7a03 	vfma.f32	s14, s0, s6
                 g3      = gi[k2]    - b;
 801e4f4:	ee31 4a61 	vsub.f32	s8, s2, s3
                 f3      = fi[k2]    - a;
 801e4f8:	ee76 7a64 	vsub.f32	s15, s12, s9
                 g2      = gi[k2]    + b;
 801e4fc:	ee71 1a21 	vadd.f32	s3, s2, s3
                 b       = s1*f2     - c1*g3;
                 a       = c1*f2     + s1*g3;
 801e500:	ee62 0a04 	vmul.f32	s1, s4, s8
                 f2      = fi[k2]    + a;
 801e504:	ee76 4a24 	vadd.f32	s9, s12, s9
                 b       = s1*f2     - c1*g3;
 801e508:	ee24 4a62 	vnmul.f32	s8, s8, s5
                 a       = c1*f2     + s1*g3;
 801e50c:	eeb0 1a60 	vmov.f32	s2, s1
                 b       = s2*fi[k1] - c2*gi[k1];
 801e510:	eee0 5a23 	vfma.f32	s11, s0, s7
                 fi[k2]  = f0        - a;
                 fi[0 ]  = f0        + a;
                 gi[k3]  = g1        - b;
                 gi[k1]  = g1        + b;
                 b       = c1*g2     - s1*f3;
                 a       = s1*g2     + c1*f3;
 801e514:	ee22 6aa7 	vmul.f32	s12, s5, s15
                 a       = c1*f2     + s1*g3;
 801e518:	eea2 1aa4 	vfma.f32	s2, s5, s9
                 b       = s1*f2     - c1*g3;
 801e51c:	eea2 4a24 	vfma.f32	s8, s4, s9
                 b       = c1*g2     - s1*f3;
 801e520:	ee67 7ac2 	vnmul.f32	s15, s15, s4
                 a       = s1*g2     + c1*f3;
 801e524:	eea2 6a21 	vfma.f32	s12, s4, s3
                 b       = c1*g2     - s1*f3;
 801e528:	eee2 7aa1 	vfma.f32	s15, s5, s3
                 f0      = fi[0 ]    + a;
 801e52c:	ee76 1a87 	vadd.f32	s3, s13, s14
                 b       = s1*f2     - c1*g3;
 801e530:	eef0 4a44 	vmov.f32	s9, s8
                 f1      = fi[0 ]    - a;
 801e534:	ee36 7ac7 	vsub.f32	s14, s13, s14
                 g1      = gi[0 ]    - b;
 801e538:	ee35 4a65 	vsub.f32	s8, s10, s11
                 g0      = gi[0 ]    + b;
 801e53c:	ee75 6a25 	vadd.f32	s13, s10, s11
                 fi[k2]  = f0        - a;
 801e540:	ee71 5ac1 	vsub.f32	s11, s3, s2
                 fi[0 ]  = f0        + a;
 801e544:	ee31 1a81 	vadd.f32	s2, s3, s2
                 gi[k3]  = g1        - b;
 801e548:	ee34 5a64 	vsub.f32	s10, s8, s9
                 fi[k2]  = f0        - a;
 801e54c:	edc1 5a00 	vstr	s11, [r1]
                 gi[k1]  = g1        + b;
 801e550:	ee74 4a24 	vadd.f32	s9, s8, s9
                 fi[0 ]  = f0        + a;
 801e554:	ed83 1a00 	vstr	s2, [r3]
                 gi[k2]  = g0        - a;
                 gi[0 ]  = g0        + a;
                 fi[k3]  = f1        - b;
                 fi[k1]  = f1        + b;
                 gi     += k4;
                 fi     += k4;
 801e558:	4423      	add	r3, r4
                 gi[k2]  = g0        - a;
 801e55a:	ee76 5ac6 	vsub.f32	s11, s13, s12
                 gi[k3]  = g1        - b;
 801e55e:	ed80 5a00 	vstr	s10, [r0]
                 gi[0 ]  = g0        + a;
 801e562:	ee36 6a86 	vadd.f32	s12, s13, s12
                } while (fi<fn);
 801e566:	455b      	cmp	r3, fp
                 fi[k3]  = f1        - b;
 801e568:	ee77 6a67 	vsub.f32	s13, s14, s15
                 gi[k1]  = g1        + b;
 801e56c:	edc6 4a00 	vstr	s9, [r6]
                 fi[k1]  = f1        + b;
 801e570:	ee77 7a27 	vadd.f32	s15, s14, s15
                 gi[k2]  = g0        - a;
 801e574:	edc2 5a00 	vstr	s11, [r2]
 801e578:	4421      	add	r1, r4
                 gi[0 ]  = g0        + a;
 801e57a:	ed8c 6a00 	vstr	s12, [ip]
 801e57e:	4420      	add	r0, r4
                 fi[k3]  = f1        - b;
 801e580:	edc5 6a00 	vstr	s13, [r5]
 801e584:	4426      	add	r6, r4
                 fi[k1]  = f1        + b;
 801e586:	edc7 7a00 	vstr	s15, [r7]
 801e58a:	4422      	add	r2, r4
                 gi     += k4;
 801e58c:	44a4      	add	ip, r4
 801e58e:	4425      	add	r5, r4
 801e590:	4427      	add	r7, r4
                } while (fi<fn);
 801e592:	d391      	bcc.n	801e4b8 <mayer_fht+0x310>
     for (ii=1;ii<kx;ii++)
 801e594:	f10e 0e01 	add.w	lr, lr, #1
 801e598:	9b02      	ldr	r3, [sp, #8]
 801e59a:	4573      	cmp	r3, lr
 801e59c:	d01c      	beq.n	801e5d8 <mayer_fht+0x430>
         TRIG_NEXT(k,c1,s1);
 801e59e:	f01e 0301 	ands.w	r3, lr, #1
 801e5a2:	d15c      	bne.n	801e65e <mayer_fht+0x4b6>
 801e5a4:	3301      	adds	r3, #1
 801e5a6:	fa4e f203 	asr.w	r2, lr, r3
 801e5aa:	07d6      	lsls	r6, r2, #31
 801e5ac:	d5fa      	bpl.n	801e5a4 <mayer_fht+0x3fc>
 801e5ae:	f109 0904 	add.w	r9, r9, #4
 801e5b2:	f1a8 0804 	sub.w	r8, r8, #4
 801e5b6:	e732      	b.n	801e41e <mayer_fht+0x276>
 801e5b8:	667f3bcd 	.word	0x667f3bcd
 801e5bc:	3ff6a09e 	.word	0x3ff6a09e
 801e5c0:	0802bd48 	.word	0x0802bd48
 801e5c4:	20000314 	.word	0x20000314
 801e5c8:	0802bd98 	.word	0x0802bd98
 801e5cc:	20000364 	.word	0x20000364
 801e5d0:	0802bd40 	.word	0x0802bd40
 801e5d4:	2000030c 	.word	0x2000030c
 801e5d8:	9b06      	ldr	r3, [sp, #24]
        }
     TRIG_RESET(k,c1,s1);
    } while (k4<n);
 801e5da:	9a07      	ldr	r2, [sp, #28]
 801e5dc:	3308      	adds	r3, #8
 801e5de:	9306      	str	r3, [sp, #24]
 801e5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5e2:	4293      	cmp	r3, r2
 801e5e4:	f73f ae8a 	bgt.w	801e2fc <mayer_fht+0x154>
}
 801e5e8:	b00b      	add	sp, #44	; 0x2c
 801e5ea:	ecbd 8b02 	vpop	{d8}
 801e5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     for (k=n>>1; (!((k2^=k)&k)); k>>=1);
 801e5f2:	4614      	mov	r4, r2
 801e5f4:	e5f4      	b.n	801e1e0 <mayer_fht+0x38>
 801e5f6:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
         for (fi=fz,fn=fz+n;fi<fn;fi+=4)
 801e5fa:	4558      	cmp	r0, fp
 801e5fc:	d22c      	bcs.n	801e658 <mayer_fht+0x4b0>
 801e5fe:	f100 0310 	add.w	r3, r0, #16
 801e602:	f100 0420 	add.w	r4, r0, #32
 801e606:	f1c3 020f 	rsb	r2, r3, #15
 801e60a:	445a      	add	r2, fp
 801e60c:	f022 020f 	bic.w	r2, r2, #15
 801e610:	4422      	add	r2, r4
             f1     = fi[0 ]-fi[1 ];
 801e612:	ed13 6a03 	vldr	s12, [r3, #-12]
 801e616:	3310      	adds	r3, #16
             f3     = fi[2 ]-fi[3 ];
 801e618:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
             f1     = fi[0 ]-fi[1 ];
 801e61c:	ed53 5a08 	vldr	s11, [r3, #-32]	; 0xffffffe0
             f3     = fi[2 ]-fi[3 ];
 801e620:	ed53 7a05 	vldr	s15, [r3, #-20]	; 0xffffffec
             f1     = fi[0 ]-fi[1 ];
 801e624:	ee35 7ac6 	vsub.f32	s14, s11, s12
             f0     = fi[0 ]+fi[1 ];
 801e628:	ee75 5a86 	vadd.f32	s11, s11, s12
             f2     = fi[2 ]+fi[3 ];
 801e62c:	ee36 6aa7 	vadd.f32	s12, s13, s15
             f3     = fi[2 ]-fi[3 ];
 801e630:	ee76 7ae7 	vsub.f32	s15, s13, s15
             fi[2 ] = (f0-f2);  
 801e634:	ee35 5ac6 	vsub.f32	s10, s11, s12
             fi[3 ] = (f1-f3);  
 801e638:	ee77 6a67 	vsub.f32	s13, s14, s15
             fi[0 ] = (f0+f2);
 801e63c:	ee35 6a86 	vadd.f32	s12, s11, s12
             fi[1 ] = (f1+f3);
 801e640:	ee77 7a27 	vadd.f32	s15, s14, s15
             fi[2 ] = (f0-f2);  
 801e644:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
             fi[3 ] = (f1-f3);  
 801e648:	ed43 6a05 	vstr	s13, [r3, #-20]	; 0xffffffec
             fi[0 ] = (f0+f2);
 801e64c:	ed03 6a08 	vstr	s12, [r3, #-32]	; 0xffffffe0
             fi[1 ] = (f1+f3);
 801e650:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
         for (fi=fz,fn=fz+n;fi<fn;fi+=4)
 801e654:	429a      	cmp	r2, r3
 801e656:	d1dc      	bne.n	801e612 <mayer_fht+0x46a>
 801e658:	2300      	movs	r3, #0
 801e65a:	9301      	str	r3, [sp, #4]
 801e65c:	e643      	b.n	801e2e6 <mayer_fht+0x13e>
         TRIG_NEXT(k,c1,s1);
 801e65e:	2300      	movs	r3, #0
 801e660:	e7a5      	b.n	801e5ae <mayer_fht+0x406>
 801e662:	bf00      	nop

0801e664 <mayer_realfft>:
  real[i] = (q-t)*0.5;  real[j] = (q+t)*0.5;
 }
}

void mayer_realfft(int n, REAL *real)
{
 801e664:	b538      	push	{r3, r4, r5, lr}
 801e666:	460c      	mov	r4, r1
 801e668:	4605      	mov	r5, r0
    REAL a,b;
 int i,j,k;
 mayer_fht(real,n);
 801e66a:	4601      	mov	r1, r0
 801e66c:	4620      	mov	r0, r4
 801e66e:	f7ff fd9b 	bl	801e1a8 <mayer_fht>
 for (i=1,j=n-1,k=n/2;i<k;i++,j--) {
 801e672:	2d00      	cmp	r5, #0
 801e674:	bfb4      	ite	lt
 801e676:	1c6b      	addlt	r3, r5, #1
 801e678:	462b      	movge	r3, r5
 801e67a:	105b      	asrs	r3, r3, #1
 801e67c:	2b01      	cmp	r3, #1
 801e67e:	dd18      	ble.n	801e6b2 <mayer_realfft+0x4e>
  a = real[i];
  b = real[j];
  real[j] = (a-b)*0.5;
 801e680:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801e684:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 801e688:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e68c:	1d21      	adds	r1, r4, #4
  a = real[i];
 801e68e:	edd1 7a00 	vldr	s15, [r1]
  b = real[j];
 801e692:	ed70 6a01 	vldmdb	r0!, {s13}
  real[j] = (a-b)*0.5;
 801e696:	ee37 7ae6 	vsub.f32	s14, s15, s13
  real[i] = (a+b)*0.5;
 801e69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
  real[j] = (a-b)*0.5;
 801e69e:	ee27 7a06 	vmul.f32	s14, s14, s12
  real[i] = (a+b)*0.5;
 801e6a2:	ee67 7a86 	vmul.f32	s15, s15, s12
  real[j] = (a-b)*0.5;
 801e6a6:	ed80 7a00 	vstr	s14, [r0]
  real[i] = (a+b)*0.5;
 801e6aa:	ece1 7a01 	vstmia	r1!, {s15}
 for (i=1,j=n-1,k=n/2;i<k;i++,j--) {
 801e6ae:	428b      	cmp	r3, r1
 801e6b0:	d1ed      	bne.n	801e68e <mayer_realfft+0x2a>
 }
}
 801e6b2:	bd38      	pop	{r3, r4, r5, pc}

0801e6b4 <mayer_realifft>:

void mayer_realifft(int n, REAL *real)
{
    REAL a,b;
 int i,j,k;
 for (i=1,j=n-1,k=n/2;i<k;i++,j--) {
 801e6b4:	2800      	cmp	r0, #0
{
 801e6b6:	b410      	push	{r4}
 801e6b8:	460c      	mov	r4, r1
 for (i=1,j=n-1,k=n/2;i<k;i++,j--) {
 801e6ba:	bfb4      	ite	lt
 801e6bc:	1c41      	addlt	r1, r0, #1
 801e6be:	4601      	movge	r1, r0
 801e6c0:	1049      	asrs	r1, r1, #1
 801e6c2:	2901      	cmp	r1, #1
 801e6c4:	dd12      	ble.n	801e6ec <mayer_realifft+0x38>
 801e6c6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801e6ca:	1d23      	adds	r3, r4, #4
 801e6cc:	eb04 0280 	add.w	r2, r4, r0, lsl #2
  a = real[i];
 801e6d0:	edd3 7a00 	vldr	s15, [r3]
  b = real[j];
 801e6d4:	ed32 7a01 	vldmdb	r2!, {s14}
  real[j] = (a-b);
 801e6d8:	ee77 6ac7 	vsub.f32	s13, s15, s14
  real[i] = (a+b);
 801e6dc:	ee77 7a87 	vadd.f32	s15, s15, s14
  real[j] = (a-b);
 801e6e0:	edc2 6a00 	vstr	s13, [r2]
  real[i] = (a+b);
 801e6e4:	ece3 7a01 	vstmia	r3!, {s15}
 for (i=1,j=n-1,k=n/2;i<k;i++,j--) {
 801e6e8:	4299      	cmp	r1, r3
 801e6ea:	d1f1      	bne.n	801e6d0 <mayer_realifft+0x1c>
 }
 mayer_fht(real,n);
 801e6ec:	4601      	mov	r1, r0
 801e6ee:	4620      	mov	r0, r4
}
 801e6f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 mayer_fht(real,n);
 801e6f4:	f7ff bd58 	b.w	801e1a8 <mayer_fht>

0801e6f8 <tEnvelopeFollower_init>:
//===========================================================================
/* Envelope Follower */
//===========================================================================

void    tEnvelopeFollower_init(tEnvelopeFollower* const ef, float attackThreshold, float decayCoeff)
{
 801e6f8:	b538      	push	{r3, r4, r5, lr}
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf.mempool);
}

void    tEnvelopeFollower_initToPool    (tEnvelopeFollower* const ef, float attackThreshold, float decayCoeff, tMempool* const mp)
{
    _tMempool* m = *mp;
 801e6fa:	4b0c      	ldr	r3, [pc, #48]	; (801e72c <tEnvelopeFollower_init+0x34>)
{
 801e6fc:	4605      	mov	r5, r0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 801e6fe:	2010      	movs	r0, #16
{
 801e700:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801e704:	699c      	ldr	r4, [r3, #24]
{
 801e706:	eef0 8a40 	vmov.f32	s17, s0
 801e70a:	eeb0 8a60 	vmov.f32	s16, s1
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 801e70e:	4621      	mov	r1, r4
 801e710:	f005 fcfa 	bl	8024108 <mpool_alloc>
    e->mempool = m;
    
    e->y = 0.0f;
 801e714:	2300      	movs	r3, #0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 801e716:	6028      	str	r0, [r5, #0]
    e->mempool = m;
 801e718:	6004      	str	r4, [r0, #0]
    e->a_thresh = attackThreshold;
 801e71a:	edc0 8a02 	vstr	s17, [r0, #8]
    e->d_coeff = decayCoeff;
 801e71e:	ed80 8a03 	vstr	s16, [r0, #12]
    e->y = 0.0f;
 801e722:	6043      	str	r3, [r0, #4]
}
 801e724:	ecbd 8b02 	vpop	{d8}
 801e728:	bd38      	pop	{r3, r4, r5, pc}
 801e72a:	bf00      	nop
 801e72c:	200194e0 	.word	0x200194e0

0801e730 <tEnvelopeFollower_initToPool>:
{
 801e730:	b538      	push	{r3, r4, r5, lr}
 801e732:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801e736:	680c      	ldr	r4, [r1, #0]
{
 801e738:	eef0 8a40 	vmov.f32	s17, s0
 801e73c:	eeb0 8a60 	vmov.f32	s16, s1
 801e740:	4605      	mov	r5, r0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 801e742:	4621      	mov	r1, r4
 801e744:	2010      	movs	r0, #16
 801e746:	f005 fcdf 	bl	8024108 <mpool_alloc>
    e->y = 0.0f;
 801e74a:	2300      	movs	r3, #0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 801e74c:	6028      	str	r0, [r5, #0]
    e->mempool = m;
 801e74e:	6004      	str	r4, [r0, #0]
    e->a_thresh = attackThreshold;
 801e750:	edc0 8a02 	vstr	s17, [r0, #8]
    e->d_coeff = decayCoeff;
 801e754:	ed80 8a03 	vstr	s16, [r0, #12]
    e->y = 0.0f;
 801e758:	6043      	str	r3, [r0, #4]
}
 801e75a:	ecbd 8b02 	vpop	{d8}
 801e75e:	bd38      	pop	{r3, r4, r5, pc}

0801e760 <tEnvelopeFollower_free>:

void    tEnvelopeFollower_free  (tEnvelopeFollower* const ef)
{
    _tEnvelopeFollower* e = *ef;
 801e760:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)e, e->mempool);
 801e762:	6801      	ldr	r1, [r0, #0]
 801e764:	f005 bd78 	b.w	8024258 <mpool_free>

0801e768 <tEnvelopeFollower_tick>:
}

float   tEnvelopeFollower_tick(tEnvelopeFollower* const ef, float x)
{
    _tEnvelopeFollower* e = *ef;
 801e768:	6803      	ldr	r3, [r0, #0]
 801e76a:	eeb0 0ac0 	vabs.f32	s0, s0
    
    if (x < 0.0f ) x = -x;  /* Absolute value. */
    
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x;                      /* If we hit a peak, ride the peak to the top. */
 801e76e:	edd3 7a01 	vldr	s15, [r3, #4]
 801e772:	eef4 7ac0 	vcmpe.f32	s15, s0
 801e776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e77a:	d814      	bhi.n	801e7a6 <tEnvelopeFollower_tick+0x3e>
 801e77c:	ed93 7a02 	vldr	s14, [r3, #8]
 801e780:	eeb4 7ac0 	vcmpe.f32	s14, s0
 801e784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e788:	d50d      	bpl.n	801e7a6 <tEnvelopeFollower_tick+0x3e>
    //ef->y = envelope_pow[(uint16_t)(ef->y * (float)UINT16_MAX)] * ef->d_coeff; //not quite the right behavior - too much loss of precision?
    //ef->y = powf(ef->y, 1.000009f) * ef->d_coeff;  // too expensive
    
#ifdef NO_DENORMAL_CHECK
#else
    if( e->y < VSF)   e->y = 0.0f;
 801e78a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801e7c4 <tEnvelopeFollower_tick+0x5c>
 801e78e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801e792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e796:	d511      	bpl.n	801e7bc <tEnvelopeFollower_tick+0x54>
 801e798:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801e7c8 <tEnvelopeFollower_tick+0x60>
 801e79c:	eeb0 0a67 	vmov.f32	s0, s15
 801e7a0:	edc3 7a01 	vstr	s15, [r3, #4]
#endif
    return e->y;
}
 801e7a4:	4770      	bx	lr
    else                                    e->y = e->y * e->d_coeff;    /* Else, exponential decay of output. */
 801e7a6:	ed93 0a03 	vldr	s0, [r3, #12]
 801e7aa:	ee27 0a80 	vmul.f32	s0, s15, s0
    if( e->y < VSF)   e->y = 0.0f;
 801e7ae:	eddf 7a05 	vldr	s15, [pc, #20]	; 801e7c4 <tEnvelopeFollower_tick+0x5c>
 801e7b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801e7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7ba:	d4ed      	bmi.n	801e798 <tEnvelopeFollower_tick+0x30>
 801e7bc:	ed83 0a01 	vstr	s0, [r3, #4]
 801e7c0:	4770      	bx	lr
 801e7c2:	bf00      	nop
 801e7c4:	006ce3ee 	.word	0x006ce3ee
 801e7c8:	00000000 	.word	0x00000000

0801e7cc <tZeroCrossing_initToPool>:
{
    tZeroCrossing_initToPool   (zc, maxWindowSize, &leaf.mempool);
}

void    tZeroCrossing_initToPool   (tZeroCrossing* const zc, int maxWindowSize, tMempool* const mp)
{
 801e7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 801e7ce:	6816      	ldr	r6, [r2, #0]
{
 801e7d0:	460d      	mov	r5, r1
 801e7d2:	4607      	mov	r7, r0
    _tZeroCrossing* z = *zc = (_tZeroCrossing*) mpool_alloc(sizeof(_tZeroCrossing), m);
 801e7d4:	2024      	movs	r0, #36	; 0x24
 801e7d6:	4631      	mov	r1, r6
 801e7d8:	f005 fc96 	bl	8024108 <mpool_alloc>
    z->mempool = m;

    z->count = 0;
    z->maxWindowSize = maxWindowSize;
    z->currentWindowSize = maxWindowSize;
    z->invCurrentWindowSize = 1.0f / maxWindowSize;
 801e7dc:	ee07 5a90 	vmov	s15, r5
 801e7e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tZeroCrossing* z = *zc = (_tZeroCrossing*) mpool_alloc(sizeof(_tZeroCrossing), m);
 801e7e4:	4604      	mov	r4, r0
    z->invCurrentWindowSize = 1.0f / maxWindowSize;
 801e7e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    z->count = 0;
 801e7ea:	2300      	movs	r3, #0
    _tZeroCrossing* z = *zc = (_tZeroCrossing*) mpool_alloc(sizeof(_tZeroCrossing), m);
 801e7ec:	6038      	str	r0, [r7, #0]
    z->position = 0;
    z->prevPosition = maxWindowSize;
    z->inBuffer = (float*) mpool_calloc(sizeof(float) * maxWindowSize, m);
 801e7ee:	4631      	mov	r1, r6
    z->mempool = m;
 801e7f0:	6006      	str	r6, [r0, #0]
    z->invCurrentWindowSize = 1.0f / maxWindowSize;
 801e7f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
    z->maxWindowSize = maxWindowSize;
 801e7f6:	6085      	str	r5, [r0, #8]
    z->count = 0;
 801e7f8:	6063      	str	r3, [r4, #4]
    z->inBuffer = (float*) mpool_calloc(sizeof(float) * maxWindowSize, m);
 801e7fa:	00a8      	lsls	r0, r5, #2
    z->position = 0;
 801e7fc:	6223      	str	r3, [r4, #32]
    z->currentWindowSize = maxWindowSize;
 801e7fe:	60e5      	str	r5, [r4, #12]
    z->prevPosition = maxWindowSize;
 801e800:	61e5      	str	r5, [r4, #28]
    z->invCurrentWindowSize = 1.0f / maxWindowSize;
 801e802:	edc4 7a04 	vstr	s15, [r4, #16]
    z->inBuffer = (float*) mpool_calloc(sizeof(float) * maxWindowSize, m);
 801e806:	f005 fcd5 	bl	80241b4 <mpool_calloc>
    z->countBuffer = (uint16_t*) mpool_calloc(sizeof(uint16_t) * maxWindowSize, m);
 801e80a:	4631      	mov	r1, r6
    z->inBuffer = (float*) mpool_calloc(sizeof(float) * maxWindowSize, m);
 801e80c:	6160      	str	r0, [r4, #20]
    z->countBuffer = (uint16_t*) mpool_calloc(sizeof(uint16_t) * maxWindowSize, m);
 801e80e:	0068      	lsls	r0, r5, #1
 801e810:	f005 fcd0 	bl	80241b4 <mpool_calloc>
 801e814:	61a0      	str	r0, [r4, #24]
}
 801e816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e818 <tZeroCrossing_free>:

void    tZeroCrossing_free (tZeroCrossing* const zc)
{
 801e818:	b510      	push	{r4, lr}
    _tZeroCrossing* z = *zc;
 801e81a:	6804      	ldr	r4, [r0, #0]
    
    mpool_free((char*)z->inBuffer, z->mempool);
 801e81c:	6821      	ldr	r1, [r4, #0]
 801e81e:	6960      	ldr	r0, [r4, #20]
 801e820:	f005 fd1a 	bl	8024258 <mpool_free>
    mpool_free((char*)z->countBuffer, z->mempool);
 801e824:	6821      	ldr	r1, [r4, #0]
 801e826:	69a0      	ldr	r0, [r4, #24]
 801e828:	f005 fd16 	bl	8024258 <mpool_free>
    mpool_free((char*)z, z->mempool);
 801e82c:	6821      	ldr	r1, [r4, #0]
 801e82e:	4620      	mov	r0, r4
}
 801e830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)z, z->mempool);
 801e834:	f005 bd10 	b.w	8024258 <mpool_free>

0801e838 <tZeroCrossing_tick>:

//returns proportion of zero crossings within window size (0.0 would be none in window, 1.0 would be all zero crossings)
float   tZeroCrossing_tick         (tZeroCrossing* const zc, float input)
{
 801e838:	b430      	push	{r4, r5}
    _tZeroCrossing* z = *zc;
 801e83a:	6803      	ldr	r3, [r0, #0]

    z->inBuffer[z->position] = input;
 801e83c:	6a19      	ldr	r1, [r3, #32]
 801e83e:	695a      	ldr	r2, [r3, #20]
 801e840:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801e844:	ed82 0a00 	vstr	s0, [r2]
    int futurePosition = ((z->position + 1) % z->currentWindowSize);
 801e848:	6a18      	ldr	r0, [r3, #32]
    float output = 0.0f;

    //add new value to count
    if ((z->inBuffer[z->position] * z->inBuffer[z->prevPosition]) < 0.0f)
 801e84a:	695a      	ldr	r2, [r3, #20]
 801e84c:	69dc      	ldr	r4, [r3, #28]
    int futurePosition = ((z->position + 1) % z->currentWindowSize);
 801e84e:	1c45      	adds	r5, r0, #1
    if ((z->inBuffer[z->position] * z->inBuffer[z->prevPosition]) < 0.0f)
 801e850:	eb02 0180 	add.w	r1, r2, r0, lsl #2
 801e854:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    int futurePosition = ((z->position + 1) % z->currentWindowSize);
 801e858:	68dc      	ldr	r4, [r3, #12]
    if ((z->inBuffer[z->position] * z->inBuffer[z->prevPosition]) < 0.0f)
 801e85a:	ed91 7a00 	vldr	s14, [r1]
 801e85e:	edd2 7a00 	vldr	s15, [r2]
    {
        //zero crossing happened, add it to the count array
        z->countBuffer[z->position] = 1;
 801e862:	699a      	ldr	r2, [r3, #24]
    if ((z->inBuffer[z->position] * z->inBuffer[z->prevPosition]) < 0.0f)
 801e864:	ee67 7a87 	vmul.f32	s15, s15, s14
    int futurePosition = ((z->position + 1) % z->currentWindowSize);
 801e868:	fb95 f1f4 	sdiv	r1, r5, r4
    if ((z->inBuffer[z->position] * z->inBuffer[z->prevPosition]) < 0.0f)
 801e86c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    int futurePosition = ((z->position + 1) % z->currentWindowSize);
 801e870:	fb04 5111 	mls	r1, r4, r1, r5
    if ((z->inBuffer[z->position] * z->inBuffer[z->prevPosition]) < 0.0f)
 801e874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e878:	d41c      	bmi.n	801e8b4 <tZeroCrossing_tick+0x7c>
        z->count++;
    }
    else
    {
        z->countBuffer[z->position] = 0;
 801e87a:	2400      	movs	r4, #0
 801e87c:	f822 4010 	strh.w	r4, [r2, r0, lsl #1]
 801e880:	685a      	ldr	r2, [r3, #4]
    }

    //remove oldest value from count
    if (z->countBuffer[futurePosition] > 0)
 801e882:	6998      	ldr	r0, [r3, #24]
 801e884:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801e888:	b110      	cbz	r0, 801e890 <tZeroCrossing_tick+0x58>
    {
        z->count--;
        if (z->count < 0)
 801e88a:	3a01      	subs	r2, #1
 801e88c:	d40d      	bmi.n	801e8aa <tZeroCrossing_tick+0x72>
        z->count--;
 801e88e:	605a      	str	r2, [r3, #4]
 801e890:	ee07 2a90 	vmov	s15, r2
 801e894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        {
            z->count = 0;
        }
    }

    z->prevPosition = z->position;
 801e898:	6a1a      	ldr	r2, [r3, #32]
    z->position = futurePosition;

    output = z->count * z->invCurrentWindowSize;
 801e89a:	ed93 0a04 	vldr	s0, [r3, #16]
    z->position = futurePosition;
 801e89e:	e9c3 2107 	strd	r2, r1, [r3, #28]

    return output;
}
 801e8a2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e8a6:	bc30      	pop	{r4, r5}
 801e8a8:	4770      	bx	lr
            z->count = 0;
 801e8aa:	2200      	movs	r2, #0
 801e8ac:	eddf 7a05 	vldr	s15, [pc, #20]	; 801e8c4 <tZeroCrossing_tick+0x8c>
 801e8b0:	605a      	str	r2, [r3, #4]
 801e8b2:	e7f1      	b.n	801e898 <tZeroCrossing_tick+0x60>
        z->countBuffer[z->position] = 1;
 801e8b4:	2401      	movs	r4, #1
 801e8b6:	f822 4010 	strh.w	r4, [r2, r0, lsl #1]
        z->count++;
 801e8ba:	685a      	ldr	r2, [r3, #4]
 801e8bc:	4422      	add	r2, r4
 801e8be:	605a      	str	r2, [r3, #4]
 801e8c0:	e7df      	b.n	801e882 <tZeroCrossing_tick+0x4a>
 801e8c2:	bf00      	nop
 801e8c4:	00000000 	.word	0x00000000

0801e8c8 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf.mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, float factor, tMempool* const mp)
{
 801e8c8:	b538      	push	{r3, r4, r5, lr}
 801e8ca:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801e8ce:	680c      	ldr	r4, [r1, #0]
{
 801e8d0:	4605      	mov	r5, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 801e8d2:	2010      	movs	r0, #16
{
 801e8d4:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 801e8d8:	4621      	mov	r1, r4
 801e8da:	f005 fc15 	bl	8024108 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 801e8de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
 801e8e2:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 801e8e4:	6028      	str	r0, [r5, #0]
    p->mempool = m;
 801e8e6:	6004      	str	r4, [r0, #0]
    p->oneminusfactor=1.0f-factor;
 801e8e8:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->factor=factor;
 801e8ec:	ed80 8a01 	vstr	s16, [r0, #4]
    p->curr=0.0f;
 801e8f0:	60c3      	str	r3, [r0, #12]
    p->oneminusfactor=1.0f-factor;
 801e8f2:	edc0 7a02 	vstr	s15, [r0, #8]
}
 801e8f6:	ecbd 8b02 	vpop	{d8}
 801e8fa:	bd38      	pop	{r3, r4, r5, pc}

0801e8fc <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
    _tPowerFollower* p = *pf;
 801e8fc:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
 801e8fe:	6801      	ldr	r1, [r0, #0]
 801e900:	f005 bcaa 	b.w	8024258 <mpool_free>

0801e904 <tPowerFollower_tick>:
    return 0;
}

float   tPowerFollower_tick(tPowerFollower* const pf, float input)
{
    _tPowerFollower* p = *pf;
 801e904:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
 801e906:	ee20 7a00 	vmul.f32	s14, s0, s0
 801e90a:	edd3 7a02 	vldr	s15, [r3, #8]
 801e90e:	ed93 0a03 	vldr	s0, [r3, #12]
 801e912:	edd3 6a01 	vldr	s13, [r3, #4]
 801e916:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e91a:	eea6 0a87 	vfma.f32	s0, s13, s14
 801e91e:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
 801e922:	4770      	bx	lr

0801e924 <tEnvPD_initToPool>:
{
    tEnvPD_initToPool(xpd, ws, hs, bs, &leaf.mempool);
}

void    tEnvPD_initToPool       (tEnvPD* const xpd, int ws, int hs, int bs, tMempool* const mp)
{
 801e924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e928:	ed2d 8b04 	vpush	{d8-d9}
 801e92c:	b083      	sub	sp, #12
 801e92e:	4688      	mov	r8, r1
 801e930:	4605      	mov	r5, r0
    _tMempool* m = *mp;
    _tEnvPD* x = *xpd = (_tEnvPD*) mpool_calloc(sizeof(_tEnvPD), m);
 801e932:	f241 109c 	movw	r0, #4508	; 0x119c
{
 801e936:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e938:	4616      	mov	r6, r2
 801e93a:	461f      	mov	r7, r3
    _tMempool* m = *mp;
 801e93c:	6824      	ldr	r4, [r4, #0]
    _tEnvPD* x = *xpd = (_tEnvPD*) mpool_calloc(sizeof(_tEnvPD), m);
 801e93e:	4621      	mov	r1, r4
 801e940:	f005 fc38 	bl	80241b4 <mpool_calloc>
    
    int period = hs, npoints = ws;
    
    int i;
    
    if (npoints < 1) npoints = 1024;
 801e944:	f1b8 0f00 	cmp.w	r8, #0
    _tEnvPD* x = *xpd = (_tEnvPD*) mpool_calloc(sizeof(_tEnvPD), m);
 801e948:	6028      	str	r0, [r5, #0]
 801e94a:	4682      	mov	sl, r0
    x->mempool = m;
 801e94c:	6004      	str	r4, [r0, #0]
    if (npoints < 1) npoints = 1024;
 801e94e:	f340 8081 	ble.w	801ea54 <tEnvPD_initToPool+0x130>
 801e952:	ee07 8a90 	vmov	s15, r8
 801e956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e95a:	f108 033f 	add.w	r3, r8, #63	; 0x3f
 801e95e:	ea4f 1168 	mov.w	r1, r8, asr #5
 801e962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e966:	fa1f f288 	uxth.w	r2, r8
 801e96a:	9301      	str	r3, [sp, #4]
 801e96c:	ee87 8a27 	vdiv.f32	s16, s14, s15
    if (period < 1) period = npoints/2;
 801e970:	2e00      	cmp	r6, #0
    if (period < npoints / MAXOVERLAP + 1)
        period = npoints / MAXOVERLAP + 1;
    
    x->x_npoints = npoints;
    x->x_phase = 0;
    x->x_period = period;
 801e972:	f241 1506 	movw	r5, #4358	; 0x1106
    
    x->windowSize = npoints;
    x->hopSize = period;
    x->blockSize = bs;
 801e976:	f241 1498 	movw	r4, #4504	; 0x1198
    x->x_npoints = npoints;
 801e97a:	f241 100a 	movw	r0, #4362	; 0x110a
    if (period < 1) period = npoints/2;
 801e97e:	bfd8      	it	le
 801e980:	ea4f 0668 	movle.w	r6, r8, asr #1
 801e984:	ed9f 9a38 	vldr	s18, [pc, #224]	; 801ea68 <tEnvPD_initToPool+0x144>
    x->blockSize = bs;
 801e988:	b2bf      	uxth	r7, r7
    if (period < npoints / MAXOVERLAP + 1)
 801e98a:	428e      	cmp	r6, r1
 801e98c:	ea4f 0b88 	mov.w	fp, r8, lsl #2
        period = npoints / MAXOVERLAP + 1;
 801e990:	bfd8      	it	le
 801e992:	1c4e      	addle	r6, r1, #1
    x->hopSize = period;
 801e994:	f241 1196 	movw	r1, #4502	; 0x1196
    x->x_period = period;
 801e998:	b2b6      	uxth	r6, r6
 801e99a:	f82a 6005 	strh.w	r6, [sl, r5]
    x->x_phase = 0;
 801e99e:	f241 1504 	movw	r5, #4356	; 0x1104
    x->hopSize = period;
 801e9a2:	f82a 6001 	strh.w	r6, [sl, r1]
    x->x_phase = 0;
 801e9a6:	2100      	movs	r1, #0
    x->blockSize = bs;
 801e9a8:	f82a 7004 	strh.w	r7, [sl, r4]
    x->windowSize = npoints;
 801e9ac:	f241 1494 	movw	r4, #4500	; 0x1194
    x->x_npoints = npoints;
 801e9b0:	f82a 2000 	strh.w	r2, [sl, r0]
 801e9b4:	f241 1010 	movw	r0, #4368	; 0x1110
    x->x_phase = 0;
 801e9b8:	f82a 1005 	strh.w	r1, [sl, r5]
    
    for (i = 0; i < MAXOVERLAP; i++) x->x_sumbuf[i] = 0;
    for (i = 0; i < npoints; i++)
 801e9bc:	460d      	mov	r5, r1
    x->windowSize = npoints;
 801e9be:	f82a 2004 	strh.w	r2, [sl, r4]
 801e9c2:	4450      	add	r0, sl
 801e9c4:	2280      	movs	r2, #128	; 0x80
 801e9c6:	f10a 0404 	add.w	r4, sl, #4
 801e9ca:	f008 fa76 	bl	8026eba <memset>
    for (i = 0; i < MAXOVERLAP; i++) x->x_sumbuf[i] = 0;
 801e9ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e9d2:	eb04 090b 	add.w	r9, r4, fp
        x->buf[i] = (1.0f - cosf((2 * PI * i) / npoints))/npoints;
 801e9d6:	eef0 8a40 	vmov.f32	s17, s0
 801e9da:	e001      	b.n	801e9e0 <tEnvPD_initToPool+0xbc>
 801e9dc:	f008 fb8e 	bl	80270fc <cosf>
    for (i = 0; i < npoints; i++)
 801e9e0:	3501      	adds	r5, #1
        x->buf[i] = (1.0f - cosf((2 * PI * i) / npoints))/npoints;
 801e9e2:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801e9e6:	ee07 5a90 	vmov	s15, r5
 801e9ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e9ee:	ee60 7a08 	vmul.f32	s15, s0, s16
 801e9f2:	ee27 0a09 	vmul.f32	s0, s14, s18
 801e9f6:	ece4 7a01 	vstmia	r4!, {s15}
    for (i = 0; i < npoints; i++)
 801e9fa:	45a1      	cmp	r9, r4
 801e9fc:	ee20 0a08 	vmul.f32	s0, s0, s16
 801ea00:	d1ec      	bne.n	801e9dc <tEnvPD_initToPool+0xb8>
    for (; i < npoints+INITVSTAKEN; i++) x->buf[i] = 0;
 801ea02:	9b01      	ldr	r3, [sp, #4]
 801ea04:	4598      	cmp	r8, r3
 801ea06:	dc09      	bgt.n	801ea1c <tEnvPD_initToPool+0xf8>
 801ea08:	3301      	adds	r3, #1
 801ea0a:	f10b 0004 	add.w	r0, fp, #4
 801ea0e:	2100      	movs	r1, #0
 801ea10:	eba3 0208 	sub.w	r2, r3, r8
 801ea14:	4450      	add	r0, sl
 801ea16:	0092      	lsls	r2, r2, #2
 801ea18:	f008 fa4f 	bl	8026eba <memset>
    
    x->x_f = 0;
 801ea1c:	f241 1190 	movw	r1, #4496	; 0x1190
 801ea20:	2500      	movs	r5, #0
    
    x->x_allocforvs = INITVSTAKEN;
 801ea22:	f241 109a 	movw	r0, #4506	; 0x119a
 801ea26:	2440      	movs	r4, #64	; 0x40
    x->x_f = 0;
 801ea28:	4451      	add	r1, sl
    
    // ~ ~ ~ dsp ~ ~ ~
    if (x->x_period % x->blockSize)
 801ea2a:	fbb6 f2f7 	udiv	r2, r6, r7
 801ea2e:	fb07 6212 	mls	r2, r7, r2, r6
    x->x_f = 0;
 801ea32:	600d      	str	r5, [r1, #0]
    if (x->x_period % x->blockSize)
 801ea34:	b292      	uxth	r2, r2
    x->x_allocforvs = INITVSTAKEN;
 801ea36:	f82a 4000 	strh.w	r4, [sl, r0]
    if (x->x_period % x->blockSize)
 801ea3a:	b112      	cbz	r2, 801ea42 <tEnvPD_initToPool+0x11e>
    {
        x->x_realperiod = x->x_period + x->blockSize - (x->x_period % x->blockSize);
 801ea3c:	443e      	add	r6, r7
 801ea3e:	1ab2      	subs	r2, r6, r2
 801ea40:	b296      	uxth	r6, r2
 801ea42:	f241 1208 	movw	r2, #4360	; 0x1108
 801ea46:	f82a 6002 	strh.w	r6, [sl, r2]
    else
    {
        x->x_realperiod = x->x_period;
    }
    // ~ ~ ~ ~ ~ ~ ~ ~
}
 801ea4a:	b003      	add	sp, #12
 801ea4c:	ecbd 8b04 	vpop	{d8-d9}
 801ea50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ea58:	f240 433f 	movw	r3, #1087	; 0x43f
 801ea5c:	ed9f 8a03 	vldr	s16, [pc, #12]	; 801ea6c <tEnvPD_initToPool+0x148>
 801ea60:	2120      	movs	r1, #32
 801ea62:	9301      	str	r3, [sp, #4]
    if (npoints < 1) npoints = 1024;
 801ea64:	4690      	mov	r8, r2
 801ea66:	e783      	b.n	801e970 <tEnvPD_initToPool+0x4c>
 801ea68:	40c90fdb 	.word	0x40c90fdb
 801ea6c:	3a800000 	.word	0x3a800000

0801ea70 <tEnvPD_tick>:
}

float tEnvPD_tick (tEnvPD* const xpd)
{
    _tEnvPD* x = *xpd;
    return powtodb(x->x_result);
 801ea70:	6802      	ldr	r2, [r0, #0]
 801ea72:	f241 130c 	movw	r3, #4364	; 0x110c
 801ea76:	4413      	add	r3, r2
 801ea78:	ed93 0a00 	vldr	s0, [r3]
 801ea7c:	f005 bad8 	b.w	8024030 <powtodb>

0801ea80 <tSNAC_initToPool>:
{
    tSNAC_initToPool(snac, overlaparg, &leaf.mempool);
}

void    tSNAC_initToPool    (tSNAC* const snac, int overlaparg, tMempool* const mp)
{
 801ea80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea84:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 801ea88:	6815      	ldr	r5, [r2, #0]
{
 801ea8a:	4680      	mov	r8, r0
 801ea8c:	460f      	mov	r7, r1
    _tSNAC* s = *snac = (_tSNAC*) mpool_alloc(sizeof(_tSNAC), m);
 801ea8e:	202c      	movs	r0, #44	; 0x2c
 801ea90:	4629      	mov	r1, r5
    s->mempool = m;
    
    s->biasfactor = DEFBIAS;
    s->timeindex = 0;
    s->periodindex = 0;
    s->periodlength = 0.;
 801ea92:	ed9f 8a40 	vldr	s16, [pc, #256]	; 801eb94 <tSNAC_initToPool+0x114>
    _tSNAC* s = *snac = (_tSNAC*) mpool_alloc(sizeof(_tSNAC), m);
 801ea96:	f005 fb37 	bl	8024108 <mpool_alloc>
    s->fidelity = 0.;
    s->minrms = DEFMINRMS;
 801ea9a:	4a3f      	ldr	r2, [pc, #252]	; (801eb98 <tSNAC_initToPool+0x118>)
    _tSNAC* s = *snac = (_tSNAC*) mpool_alloc(sizeof(_tSNAC), m);
 801ea9c:	4604      	mov	r4, r0
    s->timeindex = 0;
 801ea9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    s->biasfactor = DEFBIAS;
 801eaa2:	483e      	ldr	r0, [pc, #248]	; (801eb9c <tSNAC_initToPool+0x11c>)
    s->periodindex = 0;
 801eaa4:	2100      	movs	r1, #0
    _tSNAC* s = *snac = (_tSNAC*) mpool_alloc(sizeof(_tSNAC), m);
 801eaa6:	f8c8 4000 	str.w	r4, [r8]
    s->minrms = DEFMINRMS;
 801eaaa:	62a2      	str	r2, [r4, #40]	; 0x28
    s->timeindex = 0;
 801eaac:	6163      	str	r3, [r4, #20]
    s->biasfactor = DEFBIAS;
 801eaae:	6260      	str	r0, [r4, #36]	; 0x24
    s->framesize = SNAC_FRAME_SIZE;

    s->inputbuf = (float*) mpool_calloc(sizeof(float) * SNAC_FRAME_SIZE, m);
 801eab0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    s->periodindex = 0;
 801eab4:	8361      	strh	r1, [r4, #26]
    s->inputbuf = (float*) mpool_calloc(sizeof(float) * SNAC_FRAME_SIZE, m);
 801eab6:	4629      	mov	r1, r5
    s->mempool = m;
 801eab8:	6025      	str	r5, [r4, #0]
    s->periodlength = 0.;
 801eaba:	ed84 8a07 	vstr	s16, [r4, #28]
    s->fidelity = 0.;
 801eabe:	ed84 8a08 	vstr	s16, [r4, #32]
    s->inputbuf = (float*) mpool_calloc(sizeof(float) * SNAC_FRAME_SIZE, m);
 801eac2:	f005 fb77 	bl	80241b4 <mpool_calloc>
    s->processbuf = (float*) mpool_calloc(sizeof(float) * (SNAC_FRAME_SIZE * 2), m);
 801eac6:	4629      	mov	r1, r5
    s->inputbuf = (float*) mpool_calloc(sizeof(float) * SNAC_FRAME_SIZE, m);
 801eac8:	6060      	str	r0, [r4, #4]
    s->processbuf = (float*) mpool_calloc(sizeof(float) * (SNAC_FRAME_SIZE * 2), m);
 801eaca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801eace:	f005 fb71 	bl	80241b4 <mpool_calloc>
    s->spectrumbuf = (float*) mpool_calloc(sizeof(float) * (SNAC_FRAME_SIZE / 2), m);
 801ead2:	4629      	mov	r1, r5
    s->processbuf = (float*) mpool_calloc(sizeof(float) * (SNAC_FRAME_SIZE * 2), m);
 801ead4:	60a0      	str	r0, [r4, #8]
    s->spectrumbuf = (float*) mpool_calloc(sizeof(float) * (SNAC_FRAME_SIZE / 2), m);
 801ead6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801eada:	f005 fb6b 	bl	80241b4 <mpool_calloc>
    s->biasbuf = (float*) mpool_calloc(sizeof(float) * SNAC_FRAME_SIZE, m);
 801eade:	4629      	mov	r1, r5
    s->spectrumbuf = (float*) mpool_calloc(sizeof(float) * (SNAC_FRAME_SIZE / 2), m);
 801eae0:	60e0      	str	r0, [r4, #12]
    s->biasbuf = (float*) mpool_calloc(sizeof(float) * SNAC_FRAME_SIZE, m);
 801eae2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801eae6:	f005 fb65 	bl	80241b4 <mpool_calloc>
 801eaea:	6120      	str	r0, [r4, #16]
    
    snac_biasbuf(snac);
 801eaec:	f8d8 4000 	ldr.w	r4, [r8]
static void snac_biasbuf(tSNAC* const snac)
{
    _tSNAC* s = *snac;
    
    int n;
    int maxperiod = (int)(s->framesize * (float)SEEK);
 801eaf0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 801eba0 <tSNAC_initToPool+0x120>
 801eaf4:	8ae3      	ldrh	r3, [r4, #22]
 801eaf6:	ee07 3a90 	vmov	s15, r3
 801eafa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eafe:	ee67 7a87 	vmul.f32	s15, s15, s14
 801eb02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eb06:	ee17 6a90 	vmov	r6, s15
    float bias = s->biasfactor / logf((float)(maxperiod - 4));
 801eb0a:	1f33      	subs	r3, r6, #4
 801eb0c:	ee00 3a10 	vmov	s0, r3
 801eb10:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801eb14:	f008 fbb8 	bl	8027288 <logf>
 801eb18:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    for(n=0; n<5; n++)    // periods < 5 samples can't be tracked
    {
        biasbuf[n] = 0.0f;
    }
    
    for(n=5; n<maxperiod; n++)
 801eb1c:	2e05      	cmp	r6, #5
    float *biasbuf = s->biasbuf;
 801eb1e:	6924      	ldr	r4, [r4, #16]
    float bias = s->biasfactor / logf((float)(maxperiod - 4));
 801eb20:	eec7 8a80 	vdiv.f32	s17, s15, s0
        biasbuf[n] = 0.0f;
 801eb24:	ed84 8a00 	vstr	s16, [r4]
 801eb28:	ed84 8a01 	vstr	s16, [r4, #4]
 801eb2c:	ed84 8a02 	vstr	s16, [r4, #8]
 801eb30:	ed84 8a03 	vstr	s16, [r4, #12]
 801eb34:	ed84 8a04 	vstr	s16, [r4, #16]
    for(n=5; n<maxperiod; n++)
 801eb38:	dd17      	ble.n	801eb6a <tSNAC_initToPool+0xea>
 801eb3a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    {
        biasbuf[n] = 1.0f - (float)logf(n - 4) * bias;
 801eb3e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801eb42:	3414      	adds	r4, #20
    for(n=5; n<maxperiod; n++)
 801eb44:	eeb0 0a48 	vmov.f32	s0, s16
 801eb48:	2502      	movs	r5, #2
 801eb4a:	e001      	b.n	801eb50 <tSNAC_initToPool+0xd0>
 801eb4c:	f008 fb9c 	bl	8027288 <logf>
        biasbuf[n] = 1.0f - (float)logf(n - 4) * bias;
 801eb50:	eef0 7a49 	vmov.f32	s15, s18
 801eb54:	ee07 5a10 	vmov	s14, r5
 801eb58:	3501      	adds	r5, #1
 801eb5a:	eee0 7a68 	vfms.f32	s15, s0, s17
 801eb5e:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 801eb62:	ece4 7a01 	vstmia	r4!, {s15}
    for(n=5; n<maxperiod; n++)
 801eb66:	42b4      	cmp	r4, r6
 801eb68:	d1f0      	bne.n	801eb4c <tSNAC_initToPool+0xcc>
    if(!((lap==1)|(lap==2)|(lap==4)|(lap==8))) lap = DEFOVERLAP;
 801eb6a:	2f08      	cmp	r7, #8
    _tSNAC* s = *snac;
 801eb6c:	f8d8 2000 	ldr.w	r2, [r8]
    if(!((lap==1)|(lap==2)|(lap==4)|(lap==8))) lap = DEFOVERLAP;
 801eb70:	d905      	bls.n	801eb7e <tSNAC_initToPool+0xfe>
 801eb72:	2701      	movs	r7, #1
    s->overlap = lap;
 801eb74:	8317      	strh	r7, [r2, #24]
}
 801eb76:	ecbd 8b04 	vpop	{d8-d9}
 801eb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!((lap==1)|(lap==2)|(lap==4)|(lap==8))) lap = DEFOVERLAP;
 801eb7e:	f44f 738b 	mov.w	r3, #278	; 0x116
 801eb82:	40fb      	lsrs	r3, r7
 801eb84:	07db      	lsls	r3, r3, #31
 801eb86:	d5f4      	bpl.n	801eb72 <tSNAC_initToPool+0xf2>
 801eb88:	b2bf      	uxth	r7, r7
    s->overlap = lap;
 801eb8a:	8317      	strh	r7, [r2, #24]
}
 801eb8c:	ecbd 8b04 	vpop	{d8-d9}
 801eb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eb94:	00000000 	.word	0x00000000
 801eb98:	3b449ba6 	.word	0x3b449ba6
 801eb9c:	3e4ccccd 	.word	0x3e4ccccd
 801eba0:	3f59999a 	.word	0x3f59999a

0801eba4 <tSNAC_ioSamples>:
{
 801eba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eba8:	ed2d 8b02 	vpush	{d8}
 801ebac:	b08b      	sub	sp, #44	; 0x2c
 801ebae:	460d      	mov	r5, r1
 801ebb0:	9204      	str	r2, [sp, #16]
    _tSNAC* s = *snac;
 801ebb2:	6802      	ldr	r2, [r0, #0]
{
 801ebb4:	9002      	str	r0, [sp, #8]
 801ebb6:	9301      	str	r3, [sp, #4]
    int mask = s->framesize - 1;
 801ebb8:	8ad0      	ldrh	r0, [r2, #22]
    if(!(timeindex & (s->framesize / s->overlap - 1))) snac_analyzeframe(snac);
 801ebba:	8b13      	ldrh	r3, [r2, #24]
    int timeindex = s->timeindex;
 801ebbc:	8a94      	ldrh	r4, [r2, #20]
    int mask = s->framesize - 1;
 801ebbe:	1e46      	subs	r6, r0, #1
    _tSNAC* s = *snac;
 801ebc0:	9203      	str	r2, [sp, #12]
    if(!(timeindex & (s->framesize / s->overlap - 1))) snac_analyzeframe(snac);
 801ebc2:	fbb0 f3f3 	udiv	r3, r0, r3
 801ebc6:	3b01      	subs	r3, #1
 801ebc8:	4023      	ands	r3, r4
    float *processbuf = s->processbuf;
 801ebca:	e9d2 7801 	ldrd	r7, r8, [r2, #4]
    if(!(timeindex & (s->framesize / s->overlap - 1))) snac_analyzeframe(snac);
 801ebce:	9305      	str	r3, [sp, #20]
 801ebd0:	d019      	beq.n	801ec06 <tSNAC_ioSamples+0x62>
    while(size--)
 801ebd2:	9b01      	ldr	r3, [sp, #4]
 801ebd4:	b183      	cbz	r3, 801ebf8 <tSNAC_ioSamples+0x54>
 801ebd6:	9a04      	ldr	r2, [sp, #16]
 801ebd8:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
        inputbuf[timeindex] = *in++;
 801ebdc:	00a3      	lsls	r3, r4, #2
 801ebde:	f855 0b04 	ldr.w	r0, [r5], #4
        out[outindex++] = processbuf[timeindex++];
 801ebe2:	3401      	adds	r4, #1
        inputbuf[timeindex] = *in++;
 801ebe4:	18f9      	adds	r1, r7, r3
        out[outindex++] = processbuf[timeindex++];
 801ebe6:	4443      	add	r3, r8
    while(size--)
 801ebe8:	4565      	cmp	r5, ip
        timeindex &= mask;
 801ebea:	ea04 0406 	and.w	r4, r4, r6
        inputbuf[timeindex] = *in++;
 801ebee:	6008      	str	r0, [r1, #0]
        out[outindex++] = processbuf[timeindex++];
 801ebf0:	681b      	ldr	r3, [r3, #0]
 801ebf2:	f842 3b04 	str.w	r3, [r2], #4
    while(size--)
 801ebf6:	d1f1      	bne.n	801ebdc <tSNAC_ioSamples+0x38>
    s->timeindex = timeindex;
 801ebf8:	9b03      	ldr	r3, [sp, #12]
 801ebfa:	829c      	strh	r4, [r3, #20]
}
 801ebfc:	b00b      	add	sp, #44	; 0x2c
 801ebfe:	ecbd 8b02 	vpop	{d8}
 801ec02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float norm = 1. / sqrt((float)(framesize * 2));
 801ec06:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 801ec0a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 801ec0e:	ee07 ea90 	vmov	s15, lr
 801ec12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ec16:	eeb1 6bc7 	vsqrt.f64	d6, d7
 801ec1a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801ec1e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    for(n=0; n<framesize; n++)
 801ec22:	b178      	cbz	r0, 801ec44 <tSNAC_ioSamples+0xa0>
 801ec24:	4642      	mov	r2, r8
 801ec26:	eb08 0c80 	add.w	ip, r8, r0, lsl #2
    int timeindex = s->timeindex;
 801ec2a:	4623      	mov	r3, r4
        processbuf[n] = inputbuf[tindex] * norm;
 801ec2c:	eb07 0183 	add.w	r1, r7, r3, lsl #2
        tindex++;
 801ec30:	3301      	adds	r3, #1
        processbuf[n] = inputbuf[tindex] * norm;
 801ec32:	edd1 7a00 	vldr	s15, [r1]
        tindex &= mask;
 801ec36:	4033      	ands	r3, r6
        processbuf[n] = inputbuf[tindex] * norm;
 801ec38:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ec3c:	ece2 7a01 	vstmia	r2!, {s15}
    for(n=0; n<framesize; n++)
 801ec40:	4594      	cmp	ip, r2
 801ec42:	d1f3      	bne.n	801ec2c <tSNAC_ioSamples+0x88>
    for(n=framesize; n<(framesize<<1); n++) processbuf[n] = 0.;
 801ec44:	4570      	cmp	r0, lr
 801ec46:	da07      	bge.n	801ec58 <tSNAC_ioSamples+0xb4>
 801ec48:	ebae 0200 	sub.w	r2, lr, r0
 801ec4c:	2100      	movs	r1, #0
 801ec4e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 801ec52:	0092      	lsls	r2, r2, #2
 801ec54:	f008 f931 	bl	8026eba <memset>
    snac_autocorrelation(snac);
 801ec58:	9b02      	ldr	r3, [sp, #8]
 801ec5a:	681b      	ldr	r3, [r3, #0]
    int framesize = s->framesize;
 801ec5c:	f8b3 9016 	ldrh.w	r9, [r3, #22]
    float *processbuf = s->processbuf;
 801ec60:	f8d3 a008 	ldr.w	sl, [r3, #8]
    int fftsize = framesize * 2;
 801ec64:	ea4f 0b49 	mov.w	fp, r9, lsl #1
    float *spectrumbuf = s->spectrumbuf;
 801ec68:	68db      	ldr	r3, [r3, #12]
    REALFFT(fftsize, processbuf);
 801ec6a:	4651      	mov	r1, sl
 801ec6c:	4658      	mov	r0, fp
    float *spectrumbuf = s->spectrumbuf;
 801ec6e:	9306      	str	r3, [sp, #24]
    REALFFT(fftsize, processbuf);
 801ec70:	f7ff fcf8 	bl	801e664 <mayer_realfft>
    processbuf[0] *= processbuf[0];                      // DC
 801ec74:	edda 7a00 	vldr	s15, [sl]
    processbuf[framesize] *= processbuf[framesize];      // Nyquist
 801ec78:	eb0a 0189 	add.w	r1, sl, r9, lsl #2
    for(n=1; n<framesize; n++)
 801ec7c:	f1b9 0f01 	cmp.w	r9, #1
    processbuf[0] *= processbuf[0];                      // DC
 801ec80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ec84:	edca 7a00 	vstr	s15, [sl]
    processbuf[framesize] *= processbuf[framesize];      // Nyquist
 801ec88:	edd1 7a00 	vldr	s15, [r1]
 801ec8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ec90:	edc1 7a00 	vstr	s15, [r1]
    for(n=1; n<framesize; n++)
 801ec94:	dd11      	ble.n	801ecba <tSNAC_ioSamples+0x116>
 801ec96:	f10a 0304 	add.w	r3, sl, #4
 801ec9a:	eb0a 02c9 	add.w	r2, sl, r9, lsl #3
        processbuf[fftsize-n] = 0.;
 801ec9e:	2000      	movs	r0, #0
        + processbuf[fftsize-n] * processbuf[fftsize-n]; // imag coefficients appear reversed
 801eca0:	ed72 7a01 	vldmdb	r2!, {s15}
        processbuf[n] = processbuf[n] * processbuf[n]
 801eca4:	ed93 7a00 	vldr	s14, [r3]
        + processbuf[fftsize-n] * processbuf[fftsize-n]; // imag coefficients appear reversed
 801eca8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ecac:	eee7 7a07 	vfma.f32	s15, s14, s14
        processbuf[n] = processbuf[n] * processbuf[n]
 801ecb0:	ece3 7a01 	vstmia	r3!, {s15}
    for(n=1; n<framesize; n++)
 801ecb4:	4299      	cmp	r1, r3
        processbuf[fftsize-n] = 0.;
 801ecb6:	6010      	str	r0, [r2, #0]
    for(n=1; n<framesize; n++)
 801ecb8:	d1f2      	bne.n	801eca0 <tSNAC_ioSamples+0xfc>
    for(m=0; m<(framesize>>1); m++)
 801ecba:	ea5f 0969 	movs.w	r9, r9, asr #1
 801ecbe:	d009      	beq.n	801ecd4 <tSNAC_ioSamples+0x130>
 801ecc0:	9a06      	ldr	r2, [sp, #24]
 801ecc2:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
 801ecc6:	4653      	mov	r3, sl
        spectrumbuf[m] = processbuf[m];
 801ecc8:	f853 1b04 	ldr.w	r1, [r3], #4
    for(m=0; m<(framesize>>1); m++)
 801eccc:	4599      	cmp	r9, r3
        spectrumbuf[m] = processbuf[m];
 801ecce:	f842 1b04 	str.w	r1, [r2], #4
    for(m=0; m<(framesize>>1); m++)
 801ecd2:	d1f9      	bne.n	801ecc8 <tSNAC_ioSamples+0x124>
    REALIFFT(fftsize, processbuf);
 801ecd4:	4651      	mov	r1, sl
 801ecd6:	4658      	mov	r0, fp
 801ecd8:	f7ff fcec 	bl	801e6b4 <mayer_realifft>
    snac_normalize(snac);
 801ecdc:	9b02      	ldr	r3, [sp, #8]
    float rms = s->minrms / sqrt(1.0f / (float)framesize);
 801ecde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    int seek = framesize * SEEK;
 801ece2:	eddf 4ade 	vldr	s9, [pc, #888]	; 801f05c <tSNAC_ioSamples+0x4b8>
    snac_normalize(snac);
 801ece6:	681b      	ldr	r3, [r3, #0]
    int framesize = s->framesize;
 801ece8:	8ada      	ldrh	r2, [r3, #22]
    float rms = s->minrms / sqrt(1.0f / (float)framesize);
 801ecea:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
    int seek = framesize * SEEK;
 801ecee:	ee07 2a90 	vmov	s15, r2
    int framesize = s->framesize;
 801ecf2:	9206      	str	r2, [sp, #24]
    float rms = s->minrms / sqrt(1.0f / (float)framesize);
 801ecf4:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    float *processbuf= s->processbuf;
 801ecf8:	689a      	ldr	r2, [r3, #8]
    int seek = framesize * SEEK;
 801ecfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    int framesizeplustimeindex = s->framesize + s->timeindex;
 801ecfe:	f8b3 a014 	ldrh.w	sl, [r3, #20]
    float rzero = processbuf[0];
 801ed02:	ed92 6a00 	vldr	s12, [r2]
    float *inputbuf = s->inputbuf;
 801ed06:	f8d3 9004 	ldr.w	r9, [r3, #4]
    float rms = s->minrms / sqrt(1.0f / (float)framesize);
 801ed0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    processbuf[0] = 1;
 801ed0e:	edc2 6a00 	vstr	s13, [r2]
    int mask = framesize - 1;
 801ed12:	9906      	ldr	r1, [sp, #24]
    float *processbuf= s->processbuf;
 801ed14:	9207      	str	r2, [sp, #28]
    int mask = framesize - 1;
 801ed16:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    int framesizeplustimeindex = s->framesize + s->timeindex;
 801ed1a:	eb0a 0b01 	add.w	fp, sl, r1
    int seek = framesize * SEEK;
 801ed1e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801ed22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ed26:	ee17 0a90 	vmov	r0, s15
    for(n=1, m=s->timeindex+1; n<seek; n++, m++)
 801ed2a:	2801      	cmp	r0, #1
    float rms = s->minrms / sqrt(1.0f / (float)framesize);
 801ed2c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801ed30:	eeb1 4bc7 	vsqrt.f64	d4, d7
 801ed34:	ee85 7b04 	vdiv.f64	d7, d5, d4
 801ed38:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    float minrzero = rms * rms;
 801ed3c:	ee27 7a07 	vmul.f32	s14, s14, s14
    double normintegral = (double)rzero * 2.;
 801ed40:	fe87 6a06 	vmaxnm.f32	s12, s14, s12
 801ed44:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801ed48:	ee36 6b06 	vadd.f64	d6, d6, d6
    for(n=1, m=s->timeindex+1; n<seek; n++, m++)
 801ed4c:	dd2b      	ble.n	801eda6 <tSNAC_ioSamples+0x202>
        processbuf[n] /= (float)normintegral * 0.5f;
 801ed4e:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801ed52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801ed56:	f102 0c04 	add.w	ip, r2, #4
    for(n=1, m=s->timeindex+1; n<seek; n++, m++)
 801ed5a:	2101      	movs	r1, #1
        signal2 = inputbuf[(framesizeplustimeindex - n)&mask];
 801ed5c:	ebab 0201 	sub.w	r2, fp, r1
        signal1 = inputbuf[(n + timeindexminusone)&mask];
 801ed60:	eb0a 0301 	add.w	r3, sl, r1
        processbuf[n] /= (float)normintegral * 0.5f;
 801ed64:	eddc 5a00 	vldr	s11, [ip]
    for(n=1, m=s->timeindex+1; n<seek; n++, m++)
 801ed68:	3101      	adds	r1, #1
        signal2 = inputbuf[(framesizeplustimeindex - n)&mask];
 801ed6a:	ea02 020e 	and.w	r2, r2, lr
        signal1 = inputbuf[(n + timeindexminusone)&mask];
 801ed6e:	ea03 030e 	and.w	r3, r3, lr
    for(n=1, m=s->timeindex+1; n<seek; n++, m++)
 801ed72:	4288      	cmp	r0, r1
        signal2 = inputbuf[(framesizeplustimeindex - n)&mask];
 801ed74:	eb09 0282 	add.w	r2, r9, r2, lsl #2
        signal1 = inputbuf[(n + timeindexminusone)&mask];
 801ed78:	eb09 0383 	add.w	r3, r9, r3, lsl #2
        signal2 = inputbuf[(framesizeplustimeindex - n)&mask];
 801ed7c:	ed92 7a00 	vldr	s14, [r2]
        signal1 = inputbuf[(n + timeindexminusone)&mask];
 801ed80:	edd3 7a00 	vldr	s15, [r3]
        normintegral -= (double)(signal1 * signal1 + signal2 * signal2);
 801ed84:	ee27 7a07 	vmul.f32	s14, s14, s14
 801ed88:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801ed8c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801ed90:	ee36 6b47 	vsub.f64	d6, d6, d7
        processbuf[n] /= (float)normintegral * 0.5f;
 801ed94:	eef7 7bc6 	vcvt.f32.f64	s15, d6
 801ed98:	ee67 7a85 	vmul.f32	s15, s15, s10
 801ed9c:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 801eda0:	ecac 7a01 	vstmia	ip!, {s14}
    for(n=1, m=s->timeindex+1; n<seek; n++, m++)
 801eda4:	d1da      	bne.n	801ed5c <tSNAC_ioSamples+0x1b8>
    for(n = seek; n<framesize; n++) processbuf[n] = 0.;
 801eda6:	9b06      	ldr	r3, [sp, #24]
 801eda8:	4283      	cmp	r3, r0
 801edaa:	dd07      	ble.n	801edbc <tSNAC_ioSamples+0x218>
 801edac:	1a1a      	subs	r2, r3, r0
 801edae:	9b07      	ldr	r3, [sp, #28]
 801edb0:	2100      	movs	r1, #0
 801edb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801edb6:	0092      	lsls	r2, r2, #2
 801edb8:	f008 f87f 	bl	8026eba <memset>
    snac_pickpeak(snac);
 801edbc:	9b02      	ldr	r3, [sp, #8]
    int seek = s->framesize * SEEK;
 801edbe:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 801f05c <tSNAC_ioSamples+0x4b8>
    snac_pickpeak(snac);
 801edc2:	681b      	ldr	r3, [r3, #0]
    int seek = s->framesize * SEEK;
 801edc4:	8ada      	ldrh	r2, [r3, #22]
    snac_pickpeak(snac);
 801edc6:	9307      	str	r3, [sp, #28]
    int seek = s->framesize * SEEK;
 801edc8:	ee07 2a90 	vmov	s15, r2
    float *biasbuf = s->biasbuf;
 801edcc:	6918      	ldr	r0, [r3, #16]
    float *processbuf= s->processbuf;
 801edce:	689a      	ldr	r2, [r3, #8]
    int seek = s->framesize * SEEK;
 801edd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801edd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801edd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eddc:	ee17 aa90 	vmov	sl, s15
    for(n=1; n<seek; n++)
 801ede0:	f1ba 0f01 	cmp.w	sl, #1
 801ede4:	f340 808b 	ble.w	801eefe <tSNAC_ioSamples+0x35a>
        if(processbuf[n] < 0.) break;
 801ede8:	edd2 7a01 	vldr	s15, [r2, #4]
 801edec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801edf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edf4:	f100 8083 	bmi.w	801eefe <tSNAC_ioSamples+0x35a>
 801edf8:	f102 0108 	add.w	r1, r2, #8
    for(n=1; n<seek; n++)
 801edfc:	f04f 0901 	mov.w	r9, #1
 801ee00:	e006      	b.n	801ee10 <tSNAC_ioSamples+0x26c>
        if(processbuf[n] < 0.) break;
 801ee02:	ecf1 7a01 	vldmia	r1!, {s15}
 801ee06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ee0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee0e:	d404      	bmi.n	801ee1a <tSNAC_ioSamples+0x276>
    for(n=1; n<seek; n++)
 801ee10:	f109 0901 	add.w	r9, r9, #1
 801ee14:	45ca      	cmp	sl, r9
 801ee16:	d1f4      	bne.n	801ee02 <tSNAC_ioSamples+0x25e>
 801ee18:	46d1      	mov	r9, sl
    for(; n<seek-1; n++)
 801ee1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801ee1e:	45ca      	cmp	sl, r9
 801ee20:	dd6b      	ble.n	801eefa <tSNAC_ioSamples+0x356>
 801ee22:	ea4f 0389 	mov.w	r3, r9, lsl #2
 801ee26:	2100      	movs	r1, #0
 801ee28:	9408      	str	r4, [sp, #32]
 801ee2a:	4614      	mov	r4, r2
 801ee2c:	f1a3 0b04 	sub.w	fp, r3, #4
 801ee30:	4403      	add	r3, r0
 801ee32:	9509      	str	r5, [sp, #36]	; 0x24
 801ee34:	4655      	mov	r5, sl
 801ee36:	9106      	str	r1, [sp, #24]
 801ee38:	4493      	add	fp, r2
 801ee3a:	ed9f 8a89 	vldr	s16, [pc, #548]	; 801f060 <tSNAC_ioSamples+0x4bc>
 801ee3e:	469a      	mov	sl, r3
 801ee40:	e005      	b.n	801ee4e <tSNAC_ioSamples+0x2aa>
 801ee42:	f109 0901 	add.w	r9, r9, #1
 801ee46:	f10a 0a04 	add.w	sl, sl, #4
 801ee4a:	45a9      	cmp	r9, r5
 801ee4c:	d029      	beq.n	801eea2 <tSNAC_ioSamples+0x2fe>
 801ee4e:	4659      	mov	r1, fp
        if(processbuf[n] >= processbuf[n-1])
 801ee50:	f10b 0b04 	add.w	fp, fp, #4
 801ee54:	ed91 7a00 	vldr	s14, [r1]
 801ee58:	eddb 7a00 	vldr	s15, [fp]
 801ee5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ee60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee64:	dbed      	blt.n	801ee42 <tSNAC_ioSamples+0x29e>
            if(processbuf[n] > processbuf[n+1])     // we have a local peak
 801ee66:	ed9b 7a01 	vldr	s14, [fp, #4]
 801ee6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ee6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee72:	dde6      	ble.n	801ee42 <tSNAC_ioSamples+0x29e>
                biasedpeak = interpolate3max(processbuf, n) * biasbuf[n];
 801ee74:	4649      	mov	r1, r9
 801ee76:	4620      	mov	r0, r4
 801ee78:	f004 fe20 	bl	8023abc <interpolate3max>
 801ee7c:	edda 7a00 	vldr	s15, [sl]
 801ee80:	ee20 0a27 	vmul.f32	s0, s0, s15
                if(biasedpeak > maxvalue)
 801ee84:	eeb4 0ac8 	vcmpe.f32	s0, s16
 801ee88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee8c:	ddd9      	ble.n	801ee42 <tSNAC_ioSamples+0x29e>
 801ee8e:	f8cd 9018 	str.w	r9, [sp, #24]
    for(; n<seek-1; n++)
 801ee92:	f109 0901 	add.w	r9, r9, #1
                    maxvalue = biasedpeak;
 801ee96:	eeb0 8a40 	vmov.f32	s16, s0
 801ee9a:	f10a 0a04 	add.w	sl, sl, #4
    for(; n<seek-1; n++)
 801ee9e:	45a9      	cmp	r9, r5
 801eea0:	d1d5      	bne.n	801ee4e <tSNAC_ioSamples+0x2aa>
 801eea2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801eea6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    s->periodindex = peakindex;
 801eeaa:	9a07      	ldr	r2, [sp, #28]
 801eeac:	8353      	strh	r3, [r2, #26]
    _tSNAC* s = *snac;
 801eeae:	9b02      	ldr	r3, [sp, #8]
 801eeb0:	f8d3 a000 	ldr.w	sl, [r3]
    if(s->periodindex)
 801eeb4:	f8ba 901a 	ldrh.w	r9, [sl, #26]
 801eeb8:	f1b9 0f00 	cmp.w	r9, #0
 801eebc:	f43f ae89 	beq.w	801ebd2 <tSNAC_ioSamples+0x2e>
        interpolate3phase(s->processbuf, s->periodindex);
 801eec0:	4649      	mov	r1, r9
 801eec2:	f8da 0008 	ldr.w	r0, [sl, #8]
 801eec6:	f004 fe17 	bl	8023af8 <interpolate3phase>
        periodlength = (float)s->periodindex +
 801eeca:	ee07 9a90 	vmov	s15, r9
        if(periodlength < 8) periodlength = snac_spectralpeak(snac, periodlength);
 801eece:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
        periodlength = (float)s->periodindex +
 801eed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eed6:	ee37 0a80 	vadd.f32	s0, s15, s0
        if(periodlength < 8) periodlength = snac_spectralpeak(snac, periodlength);
 801eeda:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801eede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eee2:	d40f      	bmi.n	801ef04 <tSNAC_ioSamples+0x360>
        s->periodlength = periodlength;
 801eee4:	ed8a 0a07 	vstr	s0, [sl, #28]
        s->fidelity = interpolate3max(s->processbuf, s->periodindex);
 801eee8:	f8ba 101a 	ldrh.w	r1, [sl, #26]
 801eeec:	f8da 0008 	ldr.w	r0, [sl, #8]
 801eef0:	f004 fde4 	bl	8023abc <interpolate3max>
 801eef4:	ed8a 0a08 	vstr	s0, [sl, #32]
 801eef8:	e66b      	b.n	801ebd2 <tSNAC_ioSamples+0x2e>
    for(; n<seek-1; n++)
 801eefa:	2300      	movs	r3, #0
 801eefc:	e7d5      	b.n	801eeaa <tSNAC_ioSamples+0x306>
    for(n=1; n<seek; n++)
 801eefe:	f04f 0901 	mov.w	r9, #1
 801ef02:	e78a      	b.n	801ee1a <tSNAC_ioSamples+0x276>
    if(periodlength < 4.0f) return periodlength;
 801ef04:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 801ef08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801ef0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef10:	d4e8      	bmi.n	801eee4 <tSNAC_ioSamples+0x340>
        if(periodlength < 8) periodlength = snac_spectralpeak(snac, periodlength);
 801ef12:	9b02      	ldr	r3, [sp, #8]
    startbin = (int)(peaklocation * 0.8f + 0.5f);
 801ef14:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    stopbin = (int)(peaklocation * 1.25f + 0.5f);
 801ef18:	eef7 5a04 	vmov.f32	s11, #116	; 0x3fa00000  1.250
    startbin = (int)(peaklocation * 0.8f + 0.5f);
 801ef1c:	ed9f 6a51 	vldr	s12, [pc, #324]	; 801f064 <tSNAC_ioSamples+0x4c0>
        if(periodlength < 8) periodlength = snac_spectralpeak(snac, periodlength);
 801ef20:	f8d3 9000 	ldr.w	r9, [r3]
    int spectrumsize = s->framesize>>1;
 801ef24:	f8b9 3016 	ldrh.w	r3, [r9, #22]
    float *spectrumbuf = s->spectrumbuf;
 801ef28:	f8d9 c00c 	ldr.w	ip, [r9, #12]
    float peaklocation = (float)(s->framesize * 2.0f) / periodlength;
 801ef2c:	ee07 3a10 	vmov	s14, r3
    int spectrumsize = s->framesize>>1;
 801ef30:	085b      	lsrs	r3, r3, #1
    float peaklocation = (float)(s->framesize * 2.0f) / periodlength;
 801ef32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    if(stopbin >= spectrumsize - 1) stopbin = spectrumsize - 1;
 801ef36:	1e5a      	subs	r2, r3, #1
    float peaklocation = (float)(s->framesize * 2.0f) / periodlength;
 801ef38:	ee37 7a07 	vadd.f32	s14, s14, s14
 801ef3c:	eec7 6a00 	vdiv.f32	s13, s14, s0
    stopbin = (int)(peaklocation * 1.25f + 0.5f);
 801ef40:	eeb0 7a67 	vmov.f32	s14, s15
 801ef44:	eea6 7aa5 	vfma.f32	s14, s13, s11
    startbin = (int)(peaklocation * 0.8f + 0.5f);
 801ef48:	eee6 7a86 	vfma.f32	s15, s13, s12
    stopbin = (int)(peaklocation * 1.25f + 0.5f);
 801ef4c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    startbin = (int)(peaklocation * 0.8f + 0.5f);
 801ef50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    stopbin = (int)(peaklocation * 1.25f + 0.5f);
 801ef54:	ee17 1a10 	vmov	r1, s14
    startbin = (int)(peaklocation * 0.8f + 0.5f);
 801ef58:	ee17 3a90 	vmov	r3, s15
 801ef5c:	4291      	cmp	r1, r2
 801ef5e:	bfa8      	it	ge
 801ef60:	4611      	movge	r1, r2
 801ef62:	2b01      	cmp	r3, #1
 801ef64:	bfb8      	it	lt
 801ef66:	2301      	movlt	r3, #1
    for(n=startbin; n<stopbin; n++)
 801ef68:	4299      	cmp	r1, r3
 801ef6a:	dd64      	ble.n	801f036 <tSNAC_ioSamples+0x492>
 801ef6c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    float max = 0.;
 801ef70:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801f060 <tSNAC_ioSamples+0x4bc>
 801ef74:	441a      	add	r2, r3
 801ef76:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 801ef7a:	4610      	mov	r0, r2
        if(spectrumbuf[n] >= spectrumbuf[n-1])
 801ef7c:	3204      	adds	r2, #4
 801ef7e:	ed90 7a00 	vldr	s14, [r0]
 801ef82:	edd2 7a00 	vldr	s15, [r2]
 801ef86:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ef8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef8e:	db0e      	blt.n	801efae <tSNAC_ioSamples+0x40a>
            if(spectrumbuf[n] > spectrumbuf[n+1])
 801ef90:	ed92 7a01 	vldr	s14, [r2, #4]
                if(spectrumbuf[n] > max)
 801ef94:	eef4 7a47 	vcmp.f32	s15, s14
 801ef98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef9c:	dd07      	ble.n	801efae <tSNAC_ioSamples+0x40a>
 801ef9e:	eef4 7a66 	vcmp.f32	s15, s13
 801efa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efa6:	dd02      	ble.n	801efae <tSNAC_ioSamples+0x40a>
                    max = spectrumbuf[n];
 801efa8:	eef0 6a67 	vmov.f32	s13, s15
                if(spectrumbuf[n] > max)
 801efac:	9305      	str	r3, [sp, #20]
    for(n=startbin; n<stopbin; n++)
 801efae:	3301      	adds	r3, #1
 801efb0:	4299      	cmp	r1, r3
 801efb2:	d1e2      	bne.n	801ef7a <tSNAC_ioSamples+0x3d6>
    for(n=(peakbin-1); n<(peakbin+2); n++)
 801efb4:	9b05      	ldr	r3, [sp, #20]
 801efb6:	461a      	mov	r2, r3
 801efb8:	1e58      	subs	r0, r3, #1
 801efba:	3301      	adds	r3, #1
 801efbc:	ee07 2a90 	vmov	s15, r2
 801efc0:	4283      	cmp	r3, r0
 801efc2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801efc6:	db25      	blt.n	801f014 <tSNAC_ioSamples+0x470>
        spectrumbuf[n] = sqrtf(spectrumbuf[n]);
 801efc8:	0080      	lsls	r0, r0, #2
    for(n=(peakbin-1); n<(peakbin+2); n++)
 801efca:	469e      	mov	lr, r3
        spectrumbuf[n] = sqrtf(spectrumbuf[n]);
 801efcc:	eb0c 0100 	add.w	r1, ip, r0
 801efd0:	3004      	adds	r0, #4
 801efd2:	ed91 7a00 	vldr	s14, [r1]
 801efd6:	eb0c 0200 	add.w	r2, ip, r0
 801efda:	eef1 7ac7 	vsqrt.f32	s15, s14
 801efde:	edc1 7a00 	vstr	s15, [r1]
 801efe2:	ed92 7a00 	vldr	s14, [r2]
 801efe6:	eef1 7ac7 	vsqrt.f32	s15, s14
 801efea:	edc2 7a00 	vstr	s15, [r2]
 801efee:	1d02      	adds	r2, r0, #4
    for(n=(peakbin-1); n<(peakbin+2); n++)
 801eff0:	459e      	cmp	lr, r3
        spectrumbuf[n] = sqrtf(spectrumbuf[n]);
 801eff2:	4462      	add	r2, ip
 801eff4:	ed92 7a00 	vldr	s14, [r2]
 801eff8:	eef1 7ac7 	vsqrt.f32	s15, s14
 801effc:	edc2 7a00 	vstr	s15, [r2]
    for(n=(peakbin-1); n<(peakbin+2); n++)
 801f000:	da08      	bge.n	801f014 <tSNAC_ioSamples+0x470>
        spectrumbuf[n] = sqrtf(spectrumbuf[n]);
 801f002:	f100 0308 	add.w	r3, r0, #8
 801f006:	4463      	add	r3, ip
 801f008:	ed93 7a00 	vldr	s14, [r3]
 801f00c:	eef1 7ac7 	vsqrt.f32	s15, s14
 801f010:	edc3 7a00 	vstr	s15, [r3]
    peaklocation = (float)peakbin + interpolate3phase(spectrumbuf, peakbin);
 801f014:	9905      	ldr	r1, [sp, #20]
 801f016:	4660      	mov	r0, ip
 801f018:	f004 fd6e 	bl	8023af8 <interpolate3phase>
    periodlength = (float)(s->framesize * 2.0f) / peaklocation;
 801f01c:	f8b9 3016 	ldrh.w	r3, [r9, #22]
    peaklocation = (float)peakbin + interpolate3phase(spectrumbuf, peakbin);
 801f020:	ee30 8a08 	vadd.f32	s16, s0, s16
    periodlength = (float)(s->framesize * 2.0f) / peaklocation;
 801f024:	ee07 3a90 	vmov	s15, r3
 801f028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f02c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f030:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801f034:	e756      	b.n	801eee4 <tSNAC_ioSamples+0x340>
        spectrumbuf[n] = sqrtf(spectrumbuf[n]);
 801f036:	ed5c 7a01 	vldr	s15, [ip, #-4]
    for(n=(peakbin-1); n<(peakbin+2); n++)
 801f03a:	f04f 0e01 	mov.w	lr, #1
        spectrumbuf[n] = sqrtf(spectrumbuf[n]);
 801f03e:	eddc 6a00 	vldr	s13, [ip]
 801f042:	2000      	movs	r0, #0
 801f044:	eeb1 7ae7 	vsqrt.f32	s14, s15
    for(n=(peakbin-1); n<(peakbin+2); n++)
 801f048:	4673      	mov	r3, lr
        spectrumbuf[n] = sqrtf(spectrumbuf[n]);
 801f04a:	ed9f 8a05 	vldr	s16, [pc, #20]	; 801f060 <tSNAC_ioSamples+0x4bc>
 801f04e:	eef1 7ae6 	vsqrt.f32	s15, s13
 801f052:	ed0c 7a01 	vstr	s14, [ip, #-4]
 801f056:	edcc 7a00 	vstr	s15, [ip]
 801f05a:	e7c8      	b.n	801efee <tSNAC_ioSamples+0x44a>
 801f05c:	3f59999a 	.word	0x3f59999a
 801f060:	00000000 	.word	0x00000000
 801f064:	3f4ccccd 	.word	0x3f4ccccd

0801f068 <tPeriodDetection_initToPool>:
{
    tPeriodDetection_initToPool(pd, in, out, bufSize, frameSize, &leaf.mempool);
}

void tPeriodDetection_initToPool (tPeriodDetection* const pd, float* in, float* out, int bufSize, int frameSize, tMempool* const mp)
{
 801f068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f06c:	b085      	sub	sp, #20
 801f06e:	4682      	mov	sl, r0
 801f070:	468b      	mov	fp, r1
    _tMempool* m = *mp;
    _tPeriodDetection* p = *pd = (_tPeriodDetection*) mpool_calloc(sizeof(_tPeriodDetection), m);
 801f072:	2068      	movs	r0, #104	; 0x68
{
 801f074:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f076:	461d      	mov	r5, r3
 801f078:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    p->inBuffer = in;
    p->outBuffer = out;
    p->bufSize = bufSize;
    p->frameSize = frameSize;
    p->framesPerBuffer = p->bufSize / p->frameSize;
    p->curBlock = 1;
 801f07a:	f04f 0801 	mov.w	r8, #1
    _tMempool* m = *mp;
 801f07e:	f8d6 9000 	ldr.w	r9, [r6]
{
 801f082:	9203      	str	r2, [sp, #12]
    _tPeriodDetection* p = *pd = (_tPeriodDetection*) mpool_calloc(sizeof(_tPeriodDetection), m);
 801f084:	4649      	mov	r1, r9
 801f086:	f005 f895 	bl	80241b4 <mpool_calloc>
 801f08a:	4604      	mov	r4, r0
    p->lastBlock = 0;
 801f08c:	f04f 0c00 	mov.w	ip, #0
    p->outBuffer = out;
 801f090:	9b03      	ldr	r3, [sp, #12]
    _tPeriodDetection* p = *pd = (_tPeriodDetection*) mpool_calloc(sizeof(_tPeriodDetection), m);
 801f092:	f8ca 4000 	str.w	r4, [sl]
    
    p->hopSize = DEFHOPSIZE;
    p->windowSize = DEFWINDOWSIZE;
    p->fba = FBA;
    
    tEnvPD_initToPool(&p->env, p->windowSize, p->hopSize, p->frameSize, mp);
 801f096:	2240      	movs	r2, #64	; 0x40
    p->hopSize = DEFHOPSIZE;
 801f098:	f04f 1040 	mov.w	r0, #4194368	; 0x400040
    p->fba = FBA;
 801f09c:	2114      	movs	r1, #20
    p->index = 0;
 801f09e:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
    p->outBuffer = out;
 801f0a2:	6123      	str	r3, [r4, #16]
    tEnvPD_initToPool(&p->env, p->windowSize, p->hopSize, p->frameSize, mp);
 801f0a4:	463b      	mov	r3, r7
    p->hopSize = DEFHOPSIZE;
 801f0a6:	63e0      	str	r0, [r4, #60]	; 0x3c
    tEnvPD_initToPool(&p->env, p->windowSize, p->hopSize, p->frameSize, mp);
 801f0a8:	1d20      	adds	r0, r4, #4
    p->fba = FBA;
 801f0aa:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    tEnvPD_initToPool(&p->env, p->windowSize, p->hopSize, p->frameSize, mp);
 801f0ae:	4611      	mov	r1, r2
    p->mempool = m;
 801f0b0:	f8c4 9000 	str.w	r9, [r4]
    p->inBuffer = in;
 801f0b4:	f8c4 b00c 	str.w	fp, [r4, #12]
    p->frameSize = frameSize;
 801f0b8:	e9c4 7505 	strd	r7, r5, [r4, #20]
    p->framesPerBuffer = p->bufSize / p->frameSize;
 801f0bc:	fb95 f5f7 	sdiv	r5, r5, r7
    p->lastBlock = 0;
 801f0c0:	e9c4 8c08 	strd	r8, ip, [r4, #32]
    p->framesPerBuffer = p->bufSize / p->frameSize;
 801f0c4:	61e5      	str	r5, [r4, #28]
    tEnvPD_initToPool(&p->env, p->windowSize, p->hopSize, p->frameSize, mp);
 801f0c6:	9600      	str	r6, [sp, #0]
 801f0c8:	f7ff fc2c 	bl	801e924 <tEnvPD_initToPool>
    
    tSNAC_initToPool(&p->snac, DEFOVERLAP, mp);
 801f0cc:	4632      	mov	r2, r6
 801f0ce:	4641      	mov	r1, r8
 801f0d0:	f104 0008 	add.w	r0, r4, #8
 801f0d4:	f7ff fcd4 	bl	801ea80 <tSNAC_initToPool>

    p->history = 0.0f;
    p->alpha = 1.0f;
    p->tolerance = 1.0f;
    p->timeConstant = DEFTIMECONSTANT;
    p->radius = expf(-1000.0f * p->hopSize * leaf.invSampleRate / p->timeConstant);
 801f0d8:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 801f0da:	4b0f      	ldr	r3, [pc, #60]	; (801f118 <tPeriodDetection_initToPool+0xb0>)
 801f0dc:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 801f0e0:	ee00 2a10 	vmov	s0, r2
    p->history = 0.0f;
 801f0e4:	2100      	movs	r1, #0
    p->radius = expf(-1000.0f * p->hopSize * leaf.invSampleRate / p->timeConstant);
 801f0e6:	edd3 7a01 	vldr	s15, [r3, #4]
    p->alpha = 1.0f;
 801f0ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    p->radius = expf(-1000.0f * p->hopSize * leaf.invSampleRate / p->timeConstant);
 801f0ee:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->timeConstant = DEFTIMECONSTANT;
 801f0f2:	4a0a      	ldr	r2, [pc, #40]	; (801f11c <tPeriodDetection_initToPool+0xb4>)
    p->radius = expf(-1000.0f * p->hopSize * leaf.invSampleRate / p->timeConstant);
 801f0f4:	ee67 7a87 	vmul.f32	s15, s15, s14
    p->alpha = 1.0f;
 801f0f8:	6623      	str	r3, [r4, #96]	; 0x60
    p->tolerance = 1.0f;
 801f0fa:	6663      	str	r3, [r4, #100]	; 0x64
    p->history = 0.0f;
 801f0fc:	65e1      	str	r1, [r4, #92]	; 0x5c
    p->timeConstant = DEFTIMECONSTANT;
 801f0fe:	6462      	str	r2, [r4, #68]	; 0x44
    p->radius = expf(-1000.0f * p->hopSize * leaf.invSampleRate / p->timeConstant);
 801f100:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f104:	f008 f83a 	bl	802717c <expf>
    p->fidelityThreshold = 0.95;
 801f108:	4b05      	ldr	r3, [pc, #20]	; (801f120 <tPeriodDetection_initToPool+0xb8>)
    p->radius = expf(-1000.0f * p->hopSize * leaf.invSampleRate / p->timeConstant);
 801f10a:	ed84 0a12 	vstr	s0, [r4, #72]	; 0x48
    p->fidelityThreshold = 0.95;
 801f10e:	65a3      	str	r3, [r4, #88]	; 0x58
}
 801f110:	b005      	add	sp, #20
 801f112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f116:	bf00      	nop
 801f118:	200194e0 	.word	0x200194e0
 801f11c:	42c80000 	.word	0x42c80000
 801f120:	3f733333 	.word	0x3f733333

0801f124 <tPeriodDetection_free>:

void tPeriodDetection_free (tPeriodDetection* const pd)
{
 801f124:	b538      	push	{r3, r4, r5, lr}
    _tPeriodDetection* p = *pd;
 801f126:	6805      	ldr	r5, [r0, #0]
    _tEnvPD* x = *xpd;
 801f128:	6868      	ldr	r0, [r5, #4]
    mpool_free((char*)x, x->mempool);
 801f12a:	6801      	ldr	r1, [r0, #0]
 801f12c:	f005 f894 	bl	8024258 <mpool_free>
    _tSNAC* s = *snac;
 801f130:	68ac      	ldr	r4, [r5, #8]
    mpool_free((char*)s->inputbuf, s->mempool);
 801f132:	e9d4 1000 	ldrd	r1, r0, [r4]
 801f136:	f005 f88f 	bl	8024258 <mpool_free>
    mpool_free((char*)s->processbuf, s->mempool);
 801f13a:	6821      	ldr	r1, [r4, #0]
 801f13c:	68a0      	ldr	r0, [r4, #8]
 801f13e:	f005 f88b 	bl	8024258 <mpool_free>
    mpool_free((char*)s->spectrumbuf, s->mempool);
 801f142:	6821      	ldr	r1, [r4, #0]
 801f144:	68e0      	ldr	r0, [r4, #12]
 801f146:	f005 f887 	bl	8024258 <mpool_free>
    mpool_free((char*)s->biasbuf, s->mempool);
 801f14a:	6821      	ldr	r1, [r4, #0]
 801f14c:	6920      	ldr	r0, [r4, #16]
 801f14e:	f005 f883 	bl	8024258 <mpool_free>
    mpool_free((char*)s, s->mempool);
 801f152:	6821      	ldr	r1, [r4, #0]
 801f154:	4620      	mov	r0, r4
 801f156:	f005 f87f 	bl	8024258 <mpool_free>
    
    tEnvPD_free(&p->env);
    tSNAC_free(&p->snac);
    mpool_free((char*)p, p->mempool);
 801f15a:	6829      	ldr	r1, [r5, #0]
 801f15c:	4628      	mov	r0, r5
}
 801f15e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char*)p, p->mempool);
 801f162:	f005 b879 	b.w	8024258 <mpool_free>
 801f166:	bf00      	nop

0801f168 <tPeriodDetection_tick>:

float tPeriodDetection_tick (tPeriodDetection* pd, float sample)
{
 801f168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    _tPeriodDetection* p = *pd;
 801f16c:	6804      	ldr	r4, [r0, #0]
    
    int i, iLast;
    
    i = (p->curBlock*p->frameSize);
 801f16e:	6963      	ldr	r3, [r4, #20]
 801f170:	6a21      	ldr	r1, [r4, #32]
    iLast = (p->lastBlock*p->frameSize)+p->index;
 801f172:	6b62      	ldr	r2, [r4, #52]	; 0x34
    i = (p->curBlock*p->frameSize);
 801f174:	fb01 f103 	mul.w	r1, r1, r3
    iLast = (p->lastBlock*p->frameSize)+p->index;
 801f178:	6a65      	ldr	r5, [r4, #36]	; 0x24
    
    p->i = i;
    p->iLast = iLast;
    
    p->inBuffer[i+p->index] = sample;
 801f17a:	68e0      	ldr	r0, [r4, #12]
    iLast = (p->lastBlock*p->frameSize)+p->index;
 801f17c:	fb05 2303 	mla	r3, r5, r3, r2
    p->inBuffer[i+p->index] = sample;
 801f180:	440a      	add	r2, r1
    p->i = i;
 801f182:	62a1      	str	r1, [r4, #40]	; 0x28
    p->inBuffer[i+p->index] = sample;
 801f184:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    p->iLast = iLast;
 801f188:	6323      	str	r3, [r4, #48]	; 0x30
    p->inBuffer[i+p->index] = sample;
 801f18a:	ed82 0a00 	vstr	s0, [r2]
    
    p->index++;
 801f18e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    p->indexstore = p->index;
    if (p->index >= p->frameSize)
 801f190:	6962      	ldr	r2, [r4, #20]
    p->index++;
 801f192:	3301      	adds	r3, #1
    if (p->index >= p->frameSize)
 801f194:	4293      	cmp	r3, r2
    p->index++;
 801f196:	6363      	str	r3, [r4, #52]	; 0x34
    p->indexstore = p->index;
 801f198:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (p->index >= p->frameSize)
 801f19a:	da03      	bge.n	801f1a4 <tPeriodDetection_tick+0x3c>
        if (p->curBlock >= p->framesPerBuffer) p->curBlock = 0;
        p->lastBlock++;
        if (p->lastBlock >= p->framesPerBuffer) p->lastBlock = 0;
    }
    return p->period;
}
 801f19c:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 801f1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    _tEnvPD* x = *xpd;
 801f1a4:	f8d4 c004 	ldr.w	ip, [r4, #4]
        p->index = 0;
 801f1a8:	2200      	movs	r2, #0
    int n = x->blockSize;
 801f1aa:	f241 1398 	movw	r3, #4504	; 0x1198
    for (count = x->x_phase, sump = x->x_sumbuf;
 801f1ae:	f241 1604 	movw	r6, #4356	; 0x1104
        p->index = 0;
 801f1b2:	6362      	str	r2, [r4, #52]	; 0x34
        tEnvPD_processBlock(&p->env, &(p->inBuffer[i]));
 801f1b4:	0089      	lsls	r1, r1, #2
    int n = x->blockSize;
 801f1b6:	f83c 5003 	ldrh.w	r5, [ip, r3]
         count < x->x_npoints; count += x->x_realperiod, sump++)
 801f1ba:	f241 130a 	movw	r3, #4362	; 0x110a
    for (count = x->x_phase, sump = x->x_sumbuf;
 801f1be:	f83c 6006 	ldrh.w	r6, [ip, r6]
 801f1c2:	f241 1010 	movw	r0, #4368	; 0x1110
 801f1c6:	f83c 3003 	ldrh.w	r3, [ip, r3]
    in += n;
 801f1ca:	eb01 0985 	add.w	r9, r1, r5, lsl #2
 801f1ce:	68e2      	ldr	r2, [r4, #12]
    for (count = x->x_phase, sump = x->x_sumbuf;
 801f1d0:	4460      	add	r0, ip
 801f1d2:	42b3      	cmp	r3, r6
    in += n;
 801f1d4:	4491      	add	r9, r2
    for (count = x->x_phase, sump = x->x_sumbuf;
 801f1d6:	d924      	bls.n	801f222 <tPeriodDetection_tick+0xba>
 801f1d8:	f241 1808 	movw	r8, #4360	; 0x1108
 801f1dc:	f241 1e0a 	movw	lr, #4362	; 0x110a
 801f1e0:	4607      	mov	r7, r0
 801f1e2:	f10c 0a04 	add.w	sl, ip, #4
 801f1e6:	44e0      	add	r8, ip
 801f1e8:	44e6      	add	lr, ip
        t_sample *hp = x->buf + count;
 801f1ea:	eb0a 0286 	add.w	r2, sl, r6, lsl #2
        t_sample sum = *sump;
 801f1ee:	ecb7 7a01 	vldmia	r7!, {s14}
        for (i = 0; i < n; i++)
 801f1f2:	b165      	cbz	r5, 801f20e <tPeriodDetection_tick+0xa6>
 801f1f4:	4648      	mov	r0, r9
 801f1f6:	2300      	movs	r3, #0
            sum += *hp++ * (*fp * *fp);
 801f1f8:	ed70 7a01 	vldmdb	r0!, {s15}
        for (i = 0; i < n; i++)
 801f1fc:	3301      	adds	r3, #1
            sum += *hp++ * (*fp * *fp);
 801f1fe:	ecf2 6a01 	vldmia	r2!, {s13}
 801f202:	ee67 7aa7 	vmul.f32	s15, s15, s15
        for (i = 0; i < n; i++)
 801f206:	429d      	cmp	r5, r3
            sum += *hp++ * (*fp * *fp);
 801f208:	eea6 7aa7 	vfma.f32	s14, s13, s15
        for (i = 0; i < n; i++)
 801f20c:	d1f4      	bne.n	801f1f8 <tPeriodDetection_tick+0x90>
        *sump = sum;
 801f20e:	ed07 7a01 	vstr	s14, [r7, #-4]
 801f212:	4638      	mov	r0, r7
         count < x->x_npoints; count += x->x_realperiod, sump++)
 801f214:	f8b8 2000 	ldrh.w	r2, [r8]
 801f218:	f8be 3000 	ldrh.w	r3, [lr]
 801f21c:	4416      	add	r6, r2
    for (count = x->x_phase, sump = x->x_sumbuf;
 801f21e:	429e      	cmp	r6, r3
 801f220:	dbe3      	blt.n	801f1ea <tPeriodDetection_tick+0x82>
    x->x_phase -= n;
 801f222:	f241 1204 	movw	r2, #4356	; 0x1104
    sump[0] = 0;
 801f226:	2300      	movs	r3, #0
 801f228:	6003      	str	r3, [r0, #0]
        tSNAC_ioSamples(&p->snac, &(p->inBuffer[i]), &(p->outBuffer[i]), p->frameSize);
 801f22a:	f104 0008 	add.w	r0, r4, #8
    x->x_phase -= n;
 801f22e:	f83c 3002 	ldrh.w	r3, [ip, r2]
 801f232:	1b5d      	subs	r5, r3, r5
 801f234:	f82c 5002 	strh.w	r5, [ip, r2]
        tSNAC_ioSamples(&p->snac, &(p->inBuffer[i]), &(p->outBuffer[i]), p->frameSize);
 801f238:	6963      	ldr	r3, [r4, #20]
 801f23a:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
 801f23e:	440a      	add	r2, r1
 801f240:	4429      	add	r1, r5
 801f242:	f7ff fcaf 	bl	801eba4 <tSNAC_ioSamples>
    _tSNAC* s = *snac;
 801f246:	68a3      	ldr	r3, [r4, #8]
        if (fidelity > p->fidelityThreshold)
 801f248:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
 801f24c:	edd3 7a08 	vldr	s15, [r3, #32]
 801f250:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f258:	d501      	bpl.n	801f25e <tPeriodDetection_tick+0xf6>
    return(s->periodlength);
 801f25a:	69db      	ldr	r3, [r3, #28]
        	p->period = tSNAC_getPeriod(&p->snac);
 801f25c:	63a3      	str	r3, [r4, #56]	; 0x38
        if (p->curBlock >= p->framesPerBuffer) p->curBlock = 0;
 801f25e:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
        p->curBlock++;
 801f262:	3301      	adds	r3, #1
        if (p->curBlock >= p->framesPerBuffer) p->curBlock = 0;
 801f264:	4293      	cmp	r3, r2
        p->curBlock++;
 801f266:	6223      	str	r3, [r4, #32]
        if (p->curBlock >= p->framesPerBuffer) p->curBlock = 0;
 801f268:	db01      	blt.n	801f26e <tPeriodDetection_tick+0x106>
 801f26a:	2300      	movs	r3, #0
 801f26c:	6223      	str	r3, [r4, #32]
        p->lastBlock++;
 801f26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
}
 801f270:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
        p->lastBlock++;
 801f274:	3301      	adds	r3, #1
        if (p->lastBlock >= p->framesPerBuffer) p->lastBlock = 0;
 801f276:	429a      	cmp	r2, r3
 801f278:	bfd8      	it	le
 801f27a:	2300      	movle	r3, #0
 801f27c:	6263      	str	r3, [r4, #36]	; 0x24
}
 801f27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f282:	bf00      	nop

0801f284 <tPeriodDetection_getPeriod>:

float tPeriodDetection_getPeriod(tPeriodDetection* pd)
{
    _tPeriodDetection* p = *pd;
    return p->period;
 801f284:	6803      	ldr	r3, [r0, #0]
}
 801f286:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
 801f28a:	4770      	bx	lr

0801f28c <tPeriodDetection_setFidelityThreshold>:
    p->windowSize = ws;
}

void tPeriodDetection_setFidelityThreshold(tPeriodDetection* pd, float threshold)
{
    _tPeriodDetection* p = *pd;
 801f28c:	6803      	ldr	r3, [r0, #0]
    p->fidelityThreshold = threshold;
 801f28e:	ed83 0a16 	vstr	s0, [r3, #88]	; 0x58
}
 801f292:	4770      	bx	lr

0801f294 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf.mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
 801f294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f296:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801f29a:	6816      	ldr	r6, [r2, #0]
{
 801f29c:	460d      	mov	r5, r1
 801f29e:	4607      	mov	r7, r0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 801f2a0:	202c      	movs	r0, #44	; 0x2c
 801f2a2:	4631      	mov	r1, r6
{
 801f2a4:	eeb0 8a40 	vmov.f32	s16, s0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 801f2a8:	f004 ff2e 	bl	8024108 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 801f2ac:	ee07 5a90 	vmov	s15, r5
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 801f2b0:	6038      	str	r0, [r7, #0]
 801f2b2:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 801f2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
 801f2b8:	6006      	str	r6, [r0, #0]
    d->maxDelay = maxDelay;
 801f2ba:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 801f2bc:	eef4 7ac8 	vcmpe.f32	s15, s16
 801f2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2c4:	d457      	bmi.n	801f376 <tLinearDelay_initToPool+0xe2>
    else if (delay < 0.0f)  d->delay = 0.0f;
 801f2c6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801f2ca:	2300      	movs	r3, #0
 801f2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2d0:	bf4c      	ite	mi
 801f2d2:	6203      	strmi	r3, [r0, #32]
    else                    d->delay = delay;
 801f2d4:	ed80 8a08 	vstrpl	s16, [r0, #32]

    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801f2d8:	4631      	mov	r1, r6
 801f2da:	00a8      	lsls	r0, r5, #2
 801f2dc:	f004 ff14 	bl	8024108 <mpool_alloc>

    d->gain = 1.0f;

    d->lastIn = 0.0f;
 801f2e0:	eddf 7a26 	vldr	s15, [pc, #152]	; 801f37c <tLinearDelay_initToPool+0xe8>
    d->gain = 1.0f;
 801f2e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
 801f2e8:	2300      	movs	r3, #0
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801f2ea:	60a0      	str	r0, [r4, #8]

int     tLinearDelay_setDelay (tLinearDelay* const dl, float delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801f2ec:	eeb0 0a67 	vmov.f32	s0, s15
    d->gain = 1.0f;
 801f2f0:	6062      	str	r2, [r4, #4]
    d->lastIn = 0.0f;
 801f2f2:	edc4 7a04 	vstr	s15, [r4, #16]
    d->lastOut = 0.0f;
 801f2f6:	edc4 7a03 	vstr	s15, [r4, #12]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801f2fa:	edd4 0a08 	vldr	s1, [r4, #32]
    d->outPoint = 0;
 801f2fe:	e9c4 3305 	strd	r3, r3, [r4, #20]
    _tLinearDelay* d = *dl;
 801f302:	683d      	ldr	r5, [r7, #0]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801f304:	edd5 7a07 	vldr	s15, [r5, #28]
 801f308:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 801f30c:	f004 fcfc 	bl	8023d08 <LEAF_clip>

    float outPointer = d->inPoint - d->delay;
 801f310:	edd5 7a05 	vldr	s15, [r5, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801f314:	ed85 0a08 	vstr	s0, [r5, #32]
    float outPointer = d->inPoint - d->delay;
 801f318:	eef8 7a67 	vcvt.f32.u32	s15, s15

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
 801f31c:	69ea      	ldr	r2, [r5, #28]
    float outPointer = d->inPoint - d->delay;
 801f31e:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 801f322:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f32a:	d50a      	bpl.n	801f342 <tLinearDelay_initToPool+0xae>
        outPointer += d->maxDelay; // modulo maximum length
 801f32c:	ee07 2a90 	vmov	s15, r2
 801f330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f334:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 801f338:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f340:	d4f8      	bmi.n	801f334 <tLinearDelay_initToPool+0xa0>

    d->outPoint = (uint32_t) outPointer;   // integer part
 801f342:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801f346:	ee17 3a90 	vmov	r3, s15

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
 801f34a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 801f34e:	ee07 3a10 	vmov	s14, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 801f352:	4293      	cmp	r3, r2
    d->outPoint = (uint32_t) outPointer;   // integer part
 801f354:	61ab      	str	r3, [r5, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 801f356:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801f35a:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 801f35e:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->alpha = outPointer - d->outPoint; // fractional part
 801f362:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 801f366:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 801f36a:	d101      	bne.n	801f370 <tLinearDelay_initToPool+0xdc>
 801f36c:	2300      	movs	r3, #0
 801f36e:	61ab      	str	r3, [r5, #24]
}
 801f370:	ecbd 8b02 	vpop	{d8}
 801f374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (delay > maxDelay)   d->delay = maxDelay;
 801f376:	edc0 7a08 	vstr	s15, [r0, #32]
 801f37a:	e7ad      	b.n	801f2d8 <tLinearDelay_initToPool+0x44>
 801f37c:	00000000 	.word	0x00000000

0801f380 <tLinearDelay_free>:
{
 801f380:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 801f382:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
 801f384:	6821      	ldr	r1, [r4, #0]
 801f386:	68a0      	ldr	r0, [r4, #8]
 801f388:	f004 ff66 	bl	8024258 <mpool_free>
    mpool_free((char*)d, d->mempool);
 801f38c:	6821      	ldr	r1, [r4, #0]
 801f38e:	4620      	mov	r0, r4
}
 801f390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 801f394:	f004 bf60 	b.w	8024258 <mpool_free>

0801f398 <tLinearDelay_clear>:
	_tLinearDelay* d = *dl;
 801f398:	6801      	ldr	r1, [r0, #0]
	for (int i = 0; i < d->maxDelay; i++)
 801f39a:	69cb      	ldr	r3, [r1, #28]
 801f39c:	b14b      	cbz	r3, 801f3b2 <tLinearDelay_clear+0x1a>
 801f39e:	2300      	movs	r3, #0
		d->buff[i] = 0;
 801f3a0:	2000      	movs	r0, #0
 801f3a2:	688a      	ldr	r2, [r1, #8]
 801f3a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	for (int i = 0; i < d->maxDelay; i++)
 801f3a8:	3301      	adds	r3, #1
		d->buff[i] = 0;
 801f3aa:	6010      	str	r0, [r2, #0]
	for (int i = 0; i < d->maxDelay; i++)
 801f3ac:	69ca      	ldr	r2, [r1, #28]
 801f3ae:	429a      	cmp	r2, r3
 801f3b0:	d8f7      	bhi.n	801f3a2 <tLinearDelay_clear+0xa>
}
 801f3b2:	4770      	bx	lr

0801f3b4 <tLinearDelay_tick>:
{
 801f3b4:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 801f3b6:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 801f3b8:	edd3 7a01 	vldr	s15, [r3, #4]
 801f3bc:	6959      	ldr	r1, [r3, #20]
 801f3be:	689a      	ldr	r2, [r3, #8]
 801f3c0:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f3c4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801f3c8:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 801f3cc:	695a      	ldr	r2, [r3, #20]
 801f3ce:	69d9      	ldr	r1, [r3, #28]
 801f3d0:	3201      	adds	r2, #1
 801f3d2:	428a      	cmp	r2, r1
 801f3d4:	615a      	str	r2, [r3, #20]
 801f3d6:	d101      	bne.n	801f3dc <tLinearDelay_tick+0x28>
 801f3d8:	2200      	movs	r2, #0
 801f3da:	615a      	str	r2, [r3, #20]
    uint32_t idx = (uint32_t) d->outPoint;
 801f3dc:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
 801f3de:	6898      	ldr	r0, [r3, #8]
    if ((idx + 1) < d->maxDelay)
 801f3e0:	1c54      	adds	r4, r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
 801f3e2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801f3e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801f3ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ((idx + 1) < d->maxDelay)
 801f3ee:	42a1      	cmp	r1, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
 801f3f0:	ed92 0a00 	vldr	s0, [r2]
 801f3f4:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f3f8:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 801f3fc:	d909      	bls.n	801f412 <tLinearDelay_tick+0x5e>
        d->lastOut += d->buff[idx+1] * d->alpha;
 801f3fe:	ed92 7a01 	vldr	s14, [r2, #4]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 801f402:	619c      	str	r4, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 801f404:	eea7 0a27 	vfma.f32	s0, s14, s15
 801f408:	ed83 0a03 	vstr	s0, [r3, #12]
}
 801f40c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f410:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 801f412:	ed90 7a00 	vldr	s14, [r0]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 801f416:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
 801f418:	eea7 0a27 	vfma.f32	s0, s14, s15
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 801f41c:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 801f41e:	ed83 0a03 	vstr	s0, [r3, #12]
}
 801f422:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f426:	4770      	bx	lr

0801f428 <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
 801f428:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 801f42a:	edd3 7a01 	vldr	s15, [r3, #4]
 801f42e:	6959      	ldr	r1, [r3, #20]
 801f430:	689a      	ldr	r2, [r3, #8]
 801f432:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f436:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801f43a:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 801f43e:	695a      	ldr	r2, [r3, #20]
 801f440:	69d9      	ldr	r1, [r3, #28]
 801f442:	3201      	adds	r2, #1
 801f444:	428a      	cmp	r2, r1
 801f446:	615a      	str	r2, [r3, #20]
 801f448:	d101      	bne.n	801f44e <tLinearDelay_tickIn+0x26>
 801f44a:	2200      	movs	r2, #0
 801f44c:	615a      	str	r2, [r3, #20]
}
 801f44e:	4770      	bx	lr

0801f450 <tLinearDelay_tickOut>:
{
 801f450:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 801f452:	6803      	ldr	r3, [r0, #0]
	uint32_t idx = (uint32_t) d->outPoint;
 801f454:	699a      	ldr	r2, [r3, #24]
	d->lastOut = d->buff[idx] * d->omAlpha;
 801f456:	6899      	ldr	r1, [r3, #8]
	if ((idx + 1) < d->maxDelay)
 801f458:	1c50      	adds	r0, r2, #1
	d->lastOut = d->buff[idx] * d->omAlpha;
 801f45a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801f45e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	if ((idx + 1) < d->maxDelay)
 801f462:	69dc      	ldr	r4, [r3, #28]
 801f464:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
	d->lastOut = d->buff[idx] * d->omAlpha;
 801f468:	ed92 0a00 	vldr	s0, [r2]
	if ((idx + 1) < d->maxDelay)
 801f46c:	42a0      	cmp	r0, r4
	d->lastOut = d->buff[idx] * d->omAlpha;
 801f46e:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f472:	ed83 0a03 	vstr	s0, [r3, #12]
	if ((idx + 1) < d->maxDelay)
 801f476:	d209      	bcs.n	801f48c <tLinearDelay_tickOut+0x3c>
		d->lastOut += d->buff[idx+1] * d->alpha;
 801f478:	ed92 7a01 	vldr	s14, [r2, #4]
	if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 801f47c:	6198      	str	r0, [r3, #24]
		d->lastOut += d->buff[idx+1] * d->alpha;
 801f47e:	eea7 0a27 	vfma.f32	s0, s14, s15
 801f482:	ed83 0a03 	vstr	s0, [r3, #12]
}
 801f486:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f48a:	4770      	bx	lr
		d->lastOut += d->buff[0] * d->alpha;
 801f48c:	ed91 7a00 	vldr	s14, [r1]
	if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 801f490:	2200      	movs	r2, #0
		d->lastOut += d->buff[0] * d->alpha;
 801f492:	eea7 0a27 	vfma.f32	s0, s14, s15
	if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 801f496:	619a      	str	r2, [r3, #24]
		d->lastOut += d->buff[0] * d->alpha;
 801f498:	ed83 0a03 	vstr	s0, [r3, #12]
}
 801f49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f4a0:	4770      	bx	lr
 801f4a2:	bf00      	nop

0801f4a4 <tLinearDelay_setDelay>:
{
 801f4a4:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 801f4a6:	6804      	ldr	r4, [r0, #0]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801f4a8:	eef0 0a40 	vmov.f32	s1, s0
 801f4ac:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 801f520 <tLinearDelay_setDelay+0x7c>
 801f4b0:	edd4 7a07 	vldr	s15, [r4, #28]
 801f4b4:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 801f4b8:	f004 fc26 	bl	8023d08 <LEAF_clip>
    float outPointer = d->inPoint - d->delay;
 801f4bc:	edd4 7a05 	vldr	s15, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801f4c0:	ed84 0a08 	vstr	s0, [r4, #32]
    float outPointer = d->inPoint - d->delay;
 801f4c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
        outPointer += d->maxDelay; // modulo maximum length
 801f4c8:	69e2      	ldr	r2, [r4, #28]
    float outPointer = d->inPoint - d->delay;
 801f4ca:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 801f4ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4d6:	d50a      	bpl.n	801f4ee <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
 801f4d8:	ee07 2a90 	vmov	s15, r2
 801f4dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f4e0:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 801f4e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4ec:	d4f8      	bmi.n	801f4e0 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
 801f4ee:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801f4f2:	ee17 3a90 	vmov	r3, s15
    d->omAlpha = 1.0f - d->alpha;
 801f4f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 801f4fa:	ee07 3a10 	vmov	s14, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 801f4fe:	4293      	cmp	r3, r2
    d->outPoint = (uint32_t) outPointer;   // integer part
 801f500:	61a3      	str	r3, [r4, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 801f502:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801f506:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 801f50a:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->alpha = outPointer - d->outPoint; // fractional part
 801f50e:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 801f512:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 801f516:	d101      	bne.n	801f51c <tLinearDelay_setDelay+0x78>
 801f518:	2300      	movs	r3, #0
 801f51a:	61a3      	str	r3, [r4, #24]

    return 0;
}
 801f51c:	2000      	movs	r0, #0
 801f51e:	bd10      	pop	{r4, pc}
 801f520:	00000000 	.word	0x00000000

0801f524 <tLinearDelay_getDelay>:
}

float   tLinearDelay_getDelay (tLinearDelay* const dl)
{
    _tLinearDelay* d = *dl;
    return d->delay;
 801f524:	6803      	ldr	r3, [r0, #0]
}
 801f526:	ed93 0a08 	vldr	s0, [r3, #32]
 801f52a:	4770      	bx	lr

0801f52c <tLinearDelay_getLastOut>:

float   tLinearDelay_getLastOut (tLinearDelay* const dl)
{
    _tLinearDelay* d = *dl;
    return d->lastOut;
 801f52c:	6803      	ldr	r3, [r0, #0]
}
 801f52e:	ed93 0a03 	vldr	s0, [r3, #12]
 801f532:	4770      	bx	lr

0801f534 <tTapeDelay_init>:
    return d->gain;
}

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ TapeDelay ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ //
void tTapeDelay_init (tTapeDelay* const dl, float delay, uint32_t maxDelay)
{
 801f534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tTapeDelay_initToPool(dl, delay, maxDelay, &leaf.mempool);
}

void tTapeDelay_initToPool (tTapeDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
    _tMempool* m = *mp;
 801f536:	4b18      	ldr	r3, [pc, #96]	; (801f598 <tTapeDelay_init+0x64>)
{
 801f538:	4606      	mov	r6, r0
 801f53a:	460f      	mov	r7, r1
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 801f53c:	202c      	movs	r0, #44	; 0x2c
{
 801f53e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801f542:	699d      	ldr	r5, [r3, #24]
{
 801f544:	eeb0 8a40 	vmov.f32	s16, s0
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 801f548:	4629      	mov	r1, r5
 801f54a:	f004 fddd 	bl	8024108 <mpool_alloc>
 801f54e:	4604      	mov	r4, r0
    d->mempool = m;

    d->maxDelay = maxDelay;

    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801f550:	4629      	mov	r1, r5
 801f552:	00b8      	lsls	r0, r7, #2
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 801f554:	6034      	str	r4, [r6, #0]
    d->mempool = m;
 801f556:	6025      	str	r5, [r4, #0]
    d->maxDelay = maxDelay;
 801f558:	61a7      	str	r7, [r4, #24]
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801f55a:	f004 fdd5 	bl	8024108 <mpool_alloc>

    d->gain = 1.0f;
 801f55e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

    d->lastIn = 0.0f;
 801f562:	2300      	movs	r3, #0
    d->lastOut = 0.0f;

    d->idx = 0.0f;
    d->inc = 1.0f;
    d->inPoint = 0;
 801f564:	2200      	movs	r2, #0
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801f566:	60a0      	str	r0, [r4, #8]
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, float delay)
{
    _tTapeDelay* d = *dl;
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801f568:	eef0 0a48 	vmov.f32	s1, s16
    d->gain = 1.0f;
 801f56c:	edc4 7a01 	vstr	s15, [r4, #4]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801f570:	eeb0 0a67 	vmov.f32	s0, s15
    d->inc = 1.0f;
 801f574:	edc4 7a08 	vstr	s15, [r4, #32]
    d->inPoint = 0;
 801f578:	6162      	str	r2, [r4, #20]
    d->lastIn = 0.0f;
 801f57a:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 801f57c:	60e3      	str	r3, [r4, #12]
    d->idx = 0.0f;
 801f57e:	6263      	str	r3, [r4, #36]	; 0x24
    _tTapeDelay* d = *dl;
 801f580:	6834      	ldr	r4, [r6, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801f582:	edd4 7a06 	vldr	s15, [r4, #24]
 801f586:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 801f58a:	f004 fbbd 	bl	8023d08 <LEAF_clip>
 801f58e:	ed84 0a07 	vstr	s0, [r4, #28]
}
 801f592:	ecbd 8b02 	vpop	{d8}
 801f596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f598:	200194e0 	.word	0x200194e0

0801f59c <tTapeDelay_initToPool>:
{
 801f59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f59e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801f5a2:	6815      	ldr	r5, [r2, #0]
{
 801f5a4:	4606      	mov	r6, r0
 801f5a6:	460f      	mov	r7, r1
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 801f5a8:	202c      	movs	r0, #44	; 0x2c
 801f5aa:	4629      	mov	r1, r5
{
 801f5ac:	eeb0 8a40 	vmov.f32	s16, s0
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 801f5b0:	f004 fdaa 	bl	8024108 <mpool_alloc>
 801f5b4:	4604      	mov	r4, r0
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801f5b6:	4629      	mov	r1, r5
 801f5b8:	00b8      	lsls	r0, r7, #2
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 801f5ba:	6034      	str	r4, [r6, #0]
    d->mempool = m;
 801f5bc:	6025      	str	r5, [r4, #0]
    d->maxDelay = maxDelay;
 801f5be:	61a7      	str	r7, [r4, #24]
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801f5c0:	f004 fda2 	bl	8024108 <mpool_alloc>
    d->gain = 1.0f;
 801f5c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->lastIn = 0.0f;
 801f5c8:	2300      	movs	r3, #0
    d->inPoint = 0;
 801f5ca:	2200      	movs	r2, #0
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801f5cc:	60a0      	str	r0, [r4, #8]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801f5ce:	eef0 0a48 	vmov.f32	s1, s16
    d->gain = 1.0f;
 801f5d2:	edc4 7a01 	vstr	s15, [r4, #4]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801f5d6:	eeb0 0a67 	vmov.f32	s0, s15
    d->inc = 1.0f;
 801f5da:	edc4 7a08 	vstr	s15, [r4, #32]
    d->inPoint = 0;
 801f5de:	6162      	str	r2, [r4, #20]
    d->lastIn = 0.0f;
 801f5e0:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 801f5e2:	60e3      	str	r3, [r4, #12]
    d->idx = 0.0f;
 801f5e4:	6263      	str	r3, [r4, #36]	; 0x24
    _tTapeDelay* d = *dl;
 801f5e6:	6834      	ldr	r4, [r6, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801f5e8:	edd4 7a06 	vldr	s15, [r4, #24]
 801f5ec:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 801f5f0:	f004 fb8a 	bl	8023d08 <LEAF_clip>
 801f5f4:	ed84 0a07 	vstr	s0, [r4, #28]
}
 801f5f8:	ecbd 8b02 	vpop	{d8}
 801f5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f5fe:	bf00      	nop

0801f600 <tTapeDelay_free>:
{
 801f600:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 801f602:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
 801f604:	6821      	ldr	r1, [r4, #0]
 801f606:	68a0      	ldr	r0, [r4, #8]
 801f608:	f004 fe26 	bl	8024258 <mpool_free>
    mpool_free((char*)d, d->mempool);
 801f60c:	6821      	ldr	r1, [r4, #0]
 801f60e:	4620      	mov	r0, r4
}
 801f610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 801f614:	f004 be20 	b.w	8024258 <mpool_free>

0801f618 <tTapeDelay_tick>:
{
 801f618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tTapeDelay* d = *dl;
 801f61a:	6804      	ldr	r4, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 801f61c:	edd4 7a01 	vldr	s15, [r4, #4]
 801f620:	6962      	ldr	r2, [r4, #20]
 801f622:	68a3      	ldr	r3, [r4, #8]
 801f624:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f628:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801f62c:	ed83 0a00 	vstr	s0, [r3]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 801f630:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 801f634:	3201      	adds	r2, #1
 801f636:	429a      	cmp	r2, r3
 801f638:	6162      	str	r2, [r4, #20]
 801f63a:	d101      	bne.n	801f640 <tTapeDelay_tick+0x28>
 801f63c:	2200      	movs	r2, #0
 801f63e:	6162      	str	r2, [r4, #20]
    int idx =  (int) d->idx;
 801f640:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801f644:	1e5e      	subs	r6, r3, #1
 801f646:	68a1      	ldr	r1, [r4, #8]
    int idx =  (int) d->idx;
 801f648:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f64c:	ee17 2a10 	vmov	r2, s14
    float alpha = d->idx - idx;
 801f650:	eeb8 2ac7 	vcvt.f32.s32	s4, s14
                                              d->buff[(idx + 1) % d->maxDelay],
 801f654:	1c57      	adds	r7, r2, #1
                                              d->buff[(idx + 2) % d->maxDelay],
 801f656:	f102 0c02 	add.w	ip, r2, #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801f65a:	4416      	add	r6, r2
 801f65c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f660:	ee37 2ac2 	vsub.f32	s4, s15, s4
 801f664:	edd2 0a00 	vldr	s1, [r2]
                                              d->buff[(idx + 1) % d->maxDelay],
 801f668:	fbb7 f0f3 	udiv	r0, r7, r3
 801f66c:	fb03 7010 	mls	r0, r3, r0, r7
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801f670:	eb01 0280 	add.w	r2, r1, r0, lsl #2
                                              d->buff[(idx + 2) % d->maxDelay],
 801f674:	fbbc f5f3 	udiv	r5, ip, r3
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801f678:	ed92 1a00 	vldr	s2, [r2]
                                              d->buff[(idx + 2) % d->maxDelay],
 801f67c:	fb03 c515 	mls	r5, r3, r5, ip
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801f680:	fbb6 f2f3 	udiv	r2, r6, r3
 801f684:	fb03 6312 	mls	r3, r3, r2, r6
 801f688:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 801f68c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f690:	edd5 1a00 	vldr	s3, [r5]
 801f694:	ed91 0a00 	vldr	s0, [r1]
 801f698:	f004 fc4e 	bl	8023f38 <LEAF_interpolate_hermite_x>
    float diff = (d->inPoint - d->idx);
 801f69c:	edd4 7a05 	vldr	s15, [r4, #20]
 801f6a0:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 801f6a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    while (diff < 0.f) diff += d->maxDelay;
 801f6a8:	ed94 7a06 	vldr	s14, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801f6ac:	ed84 0a03 	vstr	s0, [r4, #12]
    while (diff < 0.f) diff += d->maxDelay;
 801f6b0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    float diff = (d->inPoint - d->idx);
 801f6b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
    while (diff < 0.f) diff += d->maxDelay;
 801f6b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6c0:	d506      	bpl.n	801f6d0 <tTapeDelay_tick+0xb8>
 801f6c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f6c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6ce:	d4f8      	bmi.n	801f6c2 <tTapeDelay_tick+0xaa>
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 801f6d0:	edd4 5a07 	vldr	s11, [r4, #28]
 801f6d4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801f6d8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801f6dc:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 801f6e0:	ee76 7a05 	vadd.f32	s15, s12, s10
    d->idx += d->inc;
 801f6e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 801f6e8:	edc4 7a08 	vstr	s15, [r4, #32]
    if (d->idx >= d->maxDelay) d->idx = 0.0f;
 801f6ec:	eef4 6ac7 	vcmpe.f32	s13, s14
 801f6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6f4:	da02      	bge.n	801f6fc <tTapeDelay_tick+0xe4>
    d->idx += d->inc;
 801f6f6:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
}
 801f6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (d->idx >= d->maxDelay) d->idx = 0.0f;
 801f6fc:	2300      	movs	r3, #0
 801f6fe:	6263      	str	r3, [r4, #36]	; 0x24
}
 801f700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f702:	bf00      	nop

0801f704 <tTapeDelay_setDelay>:
{
 801f704:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 801f706:	6804      	ldr	r4, [r0, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801f708:	eef0 0a40 	vmov.f32	s1, s0
 801f70c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f710:	edd4 7a06 	vldr	s15, [r4, #24]
 801f714:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 801f718:	f004 faf6 	bl	8023d08 <LEAF_clip>
 801f71c:	ed84 0a07 	vstr	s0, [r4, #28]
}
 801f720:	bd10      	pop	{r4, pc}
 801f722:	bf00      	nop

0801f724 <tTapeDelay_tapOut>:

float tTapeDelay_tapOut (tTapeDelay* const dl, float tapDelay)
{
 801f724:	b4f0      	push	{r4, r5, r6, r7}
    _tTapeDelay* d = *dl;
 801f726:	6801      	ldr	r1, [r0, #0]

    float tap = (float) d->inPoint - tapDelay - 1.f;
 801f728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f72c:	edd1 7a05 	vldr	s15, [r1, #20]
 801f730:	698b      	ldr	r3, [r1, #24]
 801f732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f736:	ee37 0ac0 	vsub.f32	s0, s15, s0

    // Check for wraparound.
    while ( tap < 0.f )   tap += (float)d->maxDelay;
 801f73a:	eeb4 0ac7 	vcmpe.f32	s0, s14
    float tap = (float) d->inPoint - tapDelay - 1.f;
 801f73e:	ee70 7a47 	vsub.f32	s15, s0, s14
    while ( tap < 0.f )   tap += (float)d->maxDelay;
 801f742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f746:	d50a      	bpl.n	801f75e <tTapeDelay_tapOut+0x3a>
 801f748:	ee07 3a10 	vmov	s14, r3
 801f74c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801f750:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f754:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f75c:	d4f8      	bmi.n	801f750 <tTapeDelay_tapOut+0x2c>

    int idx =  (int) tap;
 801f75e:	eebd 7ae7 	vcvt.s32.f32	s14, s15

    float alpha = tap - idx;

    float samp =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801f762:	6889      	ldr	r1, [r1, #8]
 801f764:	1e5d      	subs	r5, r3, #1
    int idx =  (int) tap;
 801f766:	ee17 2a10 	vmov	r2, s14
    float alpha = tap - idx;
 801f76a:	eeb8 2ac7 	vcvt.f32.s32	s4, s14
                                              d->buff[idx],
                                              d->buff[(idx + 1) % d->maxDelay],
 801f76e:	1c56      	adds	r6, r2, #1
                                              d->buff[(idx + 2) % d->maxDelay],
 801f770:	1c97      	adds	r7, r2, #2
    float samp =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801f772:	4415      	add	r5, r2
 801f774:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f778:	ee37 2ac2 	vsub.f32	s4, s15, s4
 801f77c:	edd2 0a00 	vldr	s1, [r2]
                                              d->buff[(idx + 1) % d->maxDelay],
 801f780:	fbb6 f0f3 	udiv	r0, r6, r3
 801f784:	fb03 6210 	mls	r2, r3, r0, r6
    float samp =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801f788:	eb01 0282 	add.w	r2, r1, r2, lsl #2
                                              d->buff[(idx + 2) % d->maxDelay],
 801f78c:	fbb7 f4f3 	udiv	r4, r7, r3
    float samp =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801f790:	ed92 1a00 	vldr	s2, [r2]
                                              d->buff[(idx + 2) % d->maxDelay],
 801f794:	fb03 7414 	mls	r4, r3, r4, r7
    float samp =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801f798:	fbb5 f2f3 	udiv	r2, r5, r3
 801f79c:	fb03 5312 	mls	r3, r3, r2, r5
 801f7a0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801f7a4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f7a8:	edd0 1a00 	vldr	s3, [r0]
 801f7ac:	ed91 0a00 	vldr	s0, [r1]
                                              alpha);

    return samp;

}
 801f7b0:	bcf0      	pop	{r4, r5, r6, r7}
    float samp =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 801f7b2:	f004 bbc1 	b.w	8023f38 <LEAF_interpolate_hermite_x>
 801f7b6:	bf00      	nop

0801f7b8 <tOversampler_initToPool>:
{
    tOversampler_initToPool(osr, ratio, extraQuality, &leaf.mempool);
}

void tOversampler_initToPool (tOversampler* const osr, int ratio, int extraQuality, tMempool* const mp)
{
 801f7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tMempool* m = *mp;
 801f7bc:	681e      	ldr	r6, [r3, #0]
{
 801f7be:	4617      	mov	r7, r2
 801f7c0:	460d      	mov	r5, r1
 801f7c2:	4680      	mov	r8, r0
    _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 801f7c4:	4631      	mov	r1, r6
 801f7c6:	201c      	movs	r0, #28
 801f7c8:	f004 fc9e 	bl	8024108 <mpool_alloc>
 801f7cc:	2f00      	cmp	r7, #0
    os->mempool = m;
    
    uint8_t offset = 0;
    if (extraQuality) offset = 6;
    if (ratio == 2 || ratio == 4  ||
 801f7ce:	f1a5 0202 	sub.w	r2, r5, #2
    _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 801f7d2:	f8c8 0000 	str.w	r0, [r8]
 801f7d6:	bf18      	it	ne
 801f7d8:	2706      	movne	r7, #6
 801f7da:	4604      	mov	r4, r0
    if (ratio == 2 || ratio == 4  ||
 801f7dc:	2a1e      	cmp	r2, #30
    os->mempool = m;
 801f7de:	6006      	str	r6, [r0, #0]
    if (ratio == 2 || ratio == 4  ||
 801f7e0:	d92d      	bls.n	801f83e <tOversampler_initToPool+0x86>
        ratio == 8 || ratio == 16 ||
        ratio == 32 || ratio == 64) {
 801f7e2:	2d40      	cmp	r5, #64	; 0x40
 801f7e4:	d129      	bne.n	801f83a <tOversampler_initToPool+0x82>
        os->ratio = ratio;
        int idx = (int)(log2f(os->ratio))-1+offset;
 801f7e6:	ee07 5a90 	vmov	s15, r5
        os->ratio = ratio;
 801f7ea:	6065      	str	r5, [r4, #4]
        int idx = (int)(log2f(os->ratio))-1+offset;
 801f7ec:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801f7f0:	f007 fdb2 	bl	8027358 <log2f>
 801f7f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 801f7f8:	4814      	ldr	r0, [pc, #80]	; (801f84c <tOversampler_initToPool+0x94>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 801f7fa:	4631      	mov	r1, r6
        int idx = (int)(log2f(os->ratio))-1+offset;
 801f7fc:	ee10 3a10 	vmov	r3, s0
 801f800:	3b01      	subs	r3, #1
 801f802:	19da      	adds	r2, r3, r7
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 801f804:	4f12      	ldr	r7, [pc, #72]	; (801f850 <tOversampler_initToPool+0x98>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 801f806:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 801f80a:	edd3 7a00 	vldr	s15, [r3]
 801f80e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f812:	ee17 0a90 	vmov	r0, s15
 801f816:	edc4 7a05 	vstr	s15, [r4, #20]
        os->phaseLength = os->numTaps / os->ratio;
 801f81a:	fb90 f5f5 	sdiv	r5, r0, r5
 801f81e:	61a5      	str	r5, [r4, #24]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 801f820:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 801f822:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 801f826:	60a3      	str	r3, [r4, #8]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 801f828:	f004 fc6e 	bl	8024108 <mpool_alloc>
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 801f82c:	6963      	ldr	r3, [r4, #20]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 801f82e:	60e0      	str	r0, [r4, #12]
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 801f830:	4631      	mov	r1, r6
 801f832:	00d8      	lsls	r0, r3, #3
 801f834:	f004 fc68 	bl	8024108 <mpool_alloc>
 801f838:	6120      	str	r0, [r4, #16]
    }
}
 801f83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ratio == 2 || ratio == 4  ||
 801f83e:	4b05      	ldr	r3, [pc, #20]	; (801f854 <tOversampler_initToPool+0x9c>)
 801f840:	40d3      	lsrs	r3, r2
 801f842:	07db      	lsls	r3, r3, #31
 801f844:	d4cf      	bmi.n	801f7e6 <tOversampler_initToPool+0x2e>
}
 801f846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f84a:	bf00      	nop
 801f84c:	08141588 	.word	0x08141588
 801f850:	200003d0 	.word	0x200003d0
 801f854:	40004045 	.word	0x40004045

0801f858 <tOversampler_free>:

void tOversampler_free (tOversampler* const osr)
{
 801f858:	b510      	push	{r4, lr}
    _tOversampler* os = *osr;
 801f85a:	6804      	ldr	r4, [r0, #0]
    
    mpool_free((char*)os->upState, os->mempool);
 801f85c:	6821      	ldr	r1, [r4, #0]
 801f85e:	68e0      	ldr	r0, [r4, #12]
 801f860:	f004 fcfa 	bl	8024258 <mpool_free>
    mpool_free((char*)os->downState, os->mempool);
 801f864:	6821      	ldr	r1, [r4, #0]
 801f866:	6920      	ldr	r0, [r4, #16]
 801f868:	f004 fcf6 	bl	8024258 <mpool_free>
    mpool_free((char*)os, os->mempool);
 801f86c:	6821      	ldr	r1, [r4, #0]
 801f86e:	4620      	mov	r0, r4
}
 801f870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)os, os->mempool);
 801f874:	f004 bcf0 	b.w	8024258 <mpool_free>

0801f878 <tOversampler_tick>:

float tOversampler_tick(tOversampler* const osr, float input, float* oversample, float (*effectTick)(float))
{
 801f878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _tOversampler* os = *osr;
 801f87c:	f8d0 9000 	ldr.w	r9, [r0]
{
 801f880:	4680      	mov	r8, r0
 801f882:	468a      	mov	sl, r1
 801f884:	4617      	mov	r7, r2
// From CMSIS DSP Library
void tOversampler_upsample(tOversampler* const osr, float input, float* output)
{
    _tOversampler* os = *osr;
    
    float *pState = os->upState;                 /* State pointer */
 801f886:	f8d9 c00c 	ldr.w	ip, [r9, #12]
    float *pStateCur;
    float *ptr1;                               /* Temporary pointer for state buffer */
    float *ptr2;                               /* Temporary pointer for coefficient buffer */
    float sum0;                                /* Accumulators */
    uint32_t i, tapCnt;                    /* Loop counters */
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 801f88a:	f8d9 5018 	ldr.w	r5, [r9, #24]
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 801f88e:	f8d9 e008 	ldr.w	lr, [r9, #8]
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
 801f892:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
 801f896:	ed03 0a01 	vstr	s0, [r3, #-4]
    
    /* Address modifier index of coefficient buffer */
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
 801f89a:	f8d9 4004 	ldr.w	r4, [r9, #4]
    
    while (i > 0U)
 801f89e:	b32c      	cbz	r4, 801f8ec <tOversampler_tick+0x74>
 801f8a0:	f104 0b01 	add.w	fp, r4, #1
    j = 1U;
 801f8a4:	2601      	movs	r6, #1
         Repeat until we've computed numTaps-(4*os->L) coefficients. */
        
        /* Initialize tapCnt with number of samples */
        tapCnt = phaseLen;
        
        while (tapCnt > 0U)
 801f8a6:	eddf 5a38 	vldr	s11, [pc, #224]	; 801f988 <tOversampler_tick+0x110>
        ptr2 = pCoeffs + (os->ratio - j);
 801f8aa:	1ba3      	subs	r3, r4, r6
 801f8ac:	ee07 4a90 	vmov	s15, r4
 801f8b0:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 801f8b4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
        while (tapCnt > 0U)
 801f8b8:	2d00      	cmp	r5, #0
 801f8ba:	d061      	beq.n	801f980 <tOversampler_tick+0x108>
            sum0 += *ptr1++ * *ptr2;
            
            /* Upsampling is done by stuffing L-1 zeros between each sample.
             * So instead of multiplying zeros with coefficients,
             * Increment the coefficient pointer by interpolation factor times. */
            ptr2 += os->ratio;
 801f8bc:	00a4      	lsls	r4, r4, #2
 801f8be:	462a      	mov	r2, r5
        ptr1 = pState;
 801f8c0:	4660      	mov	r0, ip
        sum0 = 0.0f;
 801f8c2:	eddf 7a31 	vldr	s15, [pc, #196]	; 801f988 <tOversampler_tick+0x110>
            sum0 += *ptr1++ * *ptr2;
 801f8c6:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
 801f8ca:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 801f8cc:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
 801f8d0:	4423      	add	r3, r4
            sum0 += *ptr1++ * *ptr2;
 801f8d2:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 801f8d6:	d1f6      	bne.n	801f8c6 <tOversampler_tick+0x4e>
 801f8d8:	ee67 7a86 	vmul.f32	s15, s15, s12
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
        
        /* Increment the address modifier index of coefficient buffer */
        j++;
 801f8dc:	3601      	adds	r6, #1
        *output++ = sum0 * os->ratio;
 801f8de:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 801f8e2:	455e      	cmp	r6, fp
 801f8e4:	d002      	beq.n	801f8ec <tOversampler_tick+0x74>
 801f8e6:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801f8ea:	e7de      	b.n	801f8aa <tOversampler_tick+0x32>
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 801f8ec:	3d01      	subs	r5, #1
    pState = pState + 1;
 801f8ee:	f10c 0c04 	add.w	ip, ip, #4
    pStateCur = os->upState;
 801f8f2:	f8d9 300c 	ldr.w	r3, [r9, #12]
    while (tapCnt > 0U)
 801f8f6:	d005      	beq.n	801f904 <tOversampler_tick+0x8c>
    {
        *pStateCur++ = *pState++;
 801f8f8:	f85c 2b04 	ldr.w	r2, [ip], #4
    while (tapCnt > 0U)
 801f8fc:	3d01      	subs	r5, #1
        *pStateCur++ = *pState++;
 801f8fe:	f843 2b04 	str.w	r2, [r3], #4
    while (tapCnt > 0U)
 801f902:	d1f9      	bne.n	801f8f8 <tOversampler_tick+0x80>
    for (int i = 0; i < os->ratio; ++i) {
 801f904:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f908:	2b00      	cmp	r3, #0
 801f90a:	dd0b      	ble.n	801f924 <tOversampler_tick+0xac>
 801f90c:	4655      	mov	r5, sl
 801f90e:	2400      	movs	r4, #0
        oversample[i] = effectTick(oversample[i]);
 801f910:	ed95 0a00 	vldr	s0, [r5]
    for (int i = 0; i < os->ratio; ++i) {
 801f914:	3401      	adds	r4, #1
        oversample[i] = effectTick(oversample[i]);
 801f916:	47b8      	blx	r7
 801f918:	eca5 0a01 	vstmia	r5!, {s0}
    for (int i = 0; i < os->ratio; ++i) {
 801f91c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f920:	42a3      	cmp	r3, r4
 801f922:	dcf5      	bgt.n	801f910 <tOversampler_tick+0x98>
}

// From CMSIS DSP Library
float tOversampler_downsample(tOversampler *const osr, float* input)
{
    _tOversampler* os = *osr;
 801f924:	f8d8 4000 	ldr.w	r4, [r8]
    uint32_t i, tapCnt;
    float output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
 801f928:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    float *pState = os->downState;                 /* State pointer */
 801f92c:	e9d4 0604 	ldrd	r0, r6, [r4, #16]
    
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
 801f930:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
    pStateCur = os->downState + (numTaps - 1U);
 801f934:	4432      	add	r2, r6
 801f936:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    
    do
    {
        *pStateCur++ = *input++;
 801f93a:	f85a 1b04 	ldr.w	r1, [sl], #4
        
    } while (--i);
 801f93e:	3b01      	subs	r3, #1
        *pStateCur++ = *input++;
 801f940:	f842 1b04 	str.w	r1, [r2], #4
    } while (--i);
 801f944:	d1f9      	bne.n	801f93a <tOversampler_tick+0xc2>
 801f946:	6861      	ldr	r1, [r4, #4]
 801f948:	1e73      	subs	r3, r6, #1
 801f94a:	6924      	ldr	r4, [r4, #16]
 801f94c:	461a      	mov	r2, r3
 801f94e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    
    /* Set accumulator to zero */
    acc0 = 0.0f;
 801f952:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801f988 <tOversampler_tick+0x110>
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
    
    while (tapCnt > 0U)
 801f956:	b90e      	cbnz	r6, 801f95c <tOversampler_tick+0xe4>
 801f958:	e009      	b.n	801f96e <tOversampler_tick+0xf6>
 801f95a:	3a01      	subs	r2, #1
        
        /* Fetch 1 state variable */
        x0 = *px0++;
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
 801f95c:	ecb5 7a01 	vldmia	r5!, {s14}
 801f960:	ecf0 7a01 	vldmia	r0!, {s15}
 801f964:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
 801f968:	2a00      	cmp	r2, #0
 801f96a:	d1f6      	bne.n	801f95a <tOversampler_tick+0xe2>
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 801f96c:	b133      	cbz	r3, 801f97c <tOversampler_tick+0x104>
 801f96e:	4622      	mov	r2, r4
    {
        *pStateCur++ = *pState++;
 801f970:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
 801f974:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 801f976:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
 801f97a:	d1f9      	bne.n	801f970 <tOversampler_tick+0xf8>
}
 801f97c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (tapCnt > 0U)
 801f980:	eef0 7a65 	vmov.f32	s15, s11
 801f984:	e7aa      	b.n	801f8dc <tOversampler_tick+0x64>
 801f986:	bf00      	nop
 801f988:	00000000 	.word	0x00000000

0801f98c <tOversampler_upsample>:
{
 801f98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tOversampler* os = *osr;
 801f990:	f8d0 c000 	ldr.w	ip, [r0]
    float *pState = os->upState;                 /* State pointer */
 801f994:	f8dc 700c 	ldr.w	r7, [ip, #12]
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 801f998:	f8dc 5018 	ldr.w	r5, [ip, #24]
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 801f99c:	f8dc e008 	ldr.w	lr, [ip, #8]
    *pStateCur = input;
 801f9a0:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 801f9a4:	ed03 0a01 	vstr	s0, [r3, #-4]
    i = os->ratio;
 801f9a8:	f8dc 4004 	ldr.w	r4, [ip, #4]
    while (i > 0U)
 801f9ac:	b324      	cbz	r4, 801f9f8 <tOversampler_upsample+0x6c>
 801f9ae:	f104 0801 	add.w	r8, r4, #1
    j = 1U;
 801f9b2:	2601      	movs	r6, #1
        while (tapCnt > 0U)
 801f9b4:	eddf 5a19 	vldr	s11, [pc, #100]	; 801fa1c <tOversampler_upsample+0x90>
        ptr2 = pCoeffs + (os->ratio - j);
 801f9b8:	1ba3      	subs	r3, r4, r6
 801f9ba:	ee07 4a90 	vmov	s15, r4
 801f9be:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 801f9c2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
        while (tapCnt > 0U)
 801f9c6:	b32d      	cbz	r5, 801fa14 <tOversampler_upsample+0x88>
            ptr2 += os->ratio;
 801f9c8:	00a4      	lsls	r4, r4, #2
 801f9ca:	462a      	mov	r2, r5
        ptr1 = pState;
 801f9cc:	4638      	mov	r0, r7
        sum0 = 0.0f;
 801f9ce:	eddf 7a13 	vldr	s15, [pc, #76]	; 801fa1c <tOversampler_upsample+0x90>
            sum0 += *ptr1++ * *ptr2;
 801f9d2:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
 801f9d6:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 801f9d8:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
 801f9dc:	4423      	add	r3, r4
            sum0 += *ptr1++ * *ptr2;
 801f9de:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 801f9e2:	d1f6      	bne.n	801f9d2 <tOversampler_upsample+0x46>
 801f9e4:	ee67 7a86 	vmul.f32	s15, s15, s12
        j++;
 801f9e8:	3601      	adds	r6, #1
        *output++ = sum0 * os->ratio;
 801f9ea:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 801f9ee:	4546      	cmp	r6, r8
 801f9f0:	d002      	beq.n	801f9f8 <tOversampler_upsample+0x6c>
 801f9f2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801f9f6:	e7df      	b.n	801f9b8 <tOversampler_upsample+0x2c>
    while (tapCnt > 0U)
 801f9f8:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
 801f9fa:	f107 0204 	add.w	r2, r7, #4
    pStateCur = os->upState;
 801f9fe:	f8dc 100c 	ldr.w	r1, [ip, #12]
    while (tapCnt > 0U)
 801fa02:	d005      	beq.n	801fa10 <tOversampler_upsample+0x84>
        *pStateCur++ = *pState++;
 801fa04:	f852 0b04 	ldr.w	r0, [r2], #4
    while (tapCnt > 0U)
 801fa08:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 801fa0a:	f841 0b04 	str.w	r0, [r1], #4
    while (tapCnt > 0U)
 801fa0e:	d1f9      	bne.n	801fa04 <tOversampler_upsample+0x78>
}
 801fa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (tapCnt > 0U)
 801fa14:	eef0 7a65 	vmov.f32	s15, s11
 801fa18:	e7e6      	b.n	801f9e8 <tOversampler_upsample+0x5c>
 801fa1a:	bf00      	nop
 801fa1c:	00000000 	.word	0x00000000

0801fa20 <tOversampler_downsample>:
{
 801fa20:	b4f0      	push	{r4, r5, r6, r7}
    _tOversampler* os = *osr;
 801fa22:	6806      	ldr	r6, [r0, #0]
    pStateCur = os->downState + (numTaps - 1U);
 801fa24:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    float *pState = os->downState;                 /* State pointer */
 801fa28:	e9d6 0704 	ldrd	r0, r7, [r6, #16]
    i = os->ratio;
 801fa2c:	e9d6 3501 	ldrd	r3, r5, [r6, #4]
    pStateCur = os->downState + (numTaps - 1U);
 801fa30:	443a      	add	r2, r7
 801fa32:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        *pStateCur++ = *input++;
 801fa36:	f851 4b04 	ldr.w	r4, [r1], #4
    } while (--i);
 801fa3a:	3b01      	subs	r3, #1
        *pStateCur++ = *input++;
 801fa3c:	f842 4b04 	str.w	r4, [r2], #4
    } while (--i);
 801fa40:	d1f9      	bne.n	801fa36 <tOversampler_downsample+0x16>
 801fa42:	1e7b      	subs	r3, r7, #1
 801fa44:	6871      	ldr	r1, [r6, #4]
 801fa46:	6934      	ldr	r4, [r6, #16]
 801fa48:	461a      	mov	r2, r3
 801fa4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    acc0 = 0.0f;
 801fa4e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 801fa7c <tOversampler_downsample+0x5c>
    while (tapCnt > 0U)
 801fa52:	b90f      	cbnz	r7, 801fa58 <tOversampler_downsample+0x38>
 801fa54:	e009      	b.n	801fa6a <tOversampler_downsample+0x4a>
 801fa56:	3a01      	subs	r2, #1
        acc0 += x0 * c0;
 801fa58:	ecb5 7a01 	vldmia	r5!, {s14}
 801fa5c:	ecf0 7a01 	vldmia	r0!, {s15}
 801fa60:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
 801fa64:	2a00      	cmp	r2, #0
 801fa66:	d1f6      	bne.n	801fa56 <tOversampler_downsample+0x36>
    while (tapCnt > 0U)
 801fa68:	b133      	cbz	r3, 801fa78 <tOversampler_downsample+0x58>
 801fa6a:	4622      	mov	r2, r4
        *pStateCur++ = *pState++;
 801fa6c:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
 801fa70:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 801fa72:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
 801fa76:	d1f9      	bne.n	801fa6c <tOversampler_downsample+0x4c>
        /* Decrement loop counter */
        tapCnt--;
    }
    
    return output;
}
 801fa78:	bcf0      	pop	{r4, r5, r6, r7}
 801fa7a:	4770      	bx	lr
 801fa7c:	00000000 	.word	0x00000000

0801fa80 <tLockhartWavefolder_initToPool>:
{
	tLockhartWavefolder_initToPool   (wf,  &leaf.mempool);
}

void tLockhartWavefolder_initToPool (tLockhartWavefolder* const wf, tMempool* const mp)
{
 801fa80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tMempool* m = *mp;
 801fa84:	680c      	ldr	r4, [r1, #0]
{
 801fa86:	4605      	mov	r5, r0
    _tLockhartWavefolder* w = *wf = (_tLockhartWavefolder*) mpool_alloc(sizeof(_tLockhartWavefolder), m);
 801fa88:	20e0      	movs	r0, #224	; 0xe0
    w->Is = 10e-16;
    
    w->a = 2.0*w->RL/w->R;
    w->b = (w->R+2.0*w->RL)/(w->VT*w->R);
    w->d = (w->RL*w->Is)/w->VT;
    w->half_a = 0.5 * w->a;
 801fa8a:	f04f 0800 	mov.w	r8, #0
    _tLockhartWavefolder* w = *wf = (_tLockhartWavefolder*) mpool_alloc(sizeof(_tLockhartWavefolder), m);
 801fa8e:	4621      	mov	r1, r4
    w->half_a = 0.5 * w->a;
 801fa90:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 801fb8c <tLockhartWavefolder_initToPool+0x10c>
    _tLockhartWavefolder* w = *wf = (_tLockhartWavefolder*) mpool_alloc(sizeof(_tLockhartWavefolder), m);
 801fa94:	f004 fb38 	bl	8024108 <mpool_alloc>
    w->a = 2.0*w->RL/w->R;
 801fa98:	2200      	movs	r2, #0
 801fa9a:	4b3b      	ldr	r3, [pc, #236]	; (801fb88 <tLockhartWavefolder_initToPool+0x108>)
    _tLockhartWavefolder* w = *wf = (_tLockhartWavefolder*) mpool_alloc(sizeof(_tLockhartWavefolder), m);
 801fa9c:	6028      	str	r0, [r5, #0]
    w->mempool = m;
 801fa9e:	6004      	str	r4, [r0, #0]
    w->a = 2.0*w->RL/w->R;
 801faa0:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    w->RL = 7.5e3;
 801faa4:	a528      	add	r5, pc, #160	; (adr r5, 801fb48 <tLockhartWavefolder_initToPool+0xc8>)
 801faa6:	e9d5 4500 	ldrd	r4, r5, [r5]
    w->R = 15e3;
 801faaa:	a329      	add	r3, pc, #164	; (adr r3, 801fb50 <tLockhartWavefolder_initToPool+0xd0>)
 801faac:	e9d3 2300 	ldrd	r2, r3, [r3]
    w->RL = 7.5e3;
 801fab0:	e9c0 4508 	strd	r4, r5, [r0, #32]
    w->R = 15e3;
 801fab4:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    w->VT = 26e-3;
 801fab8:	a527      	add	r5, pc, #156	; (adr r5, 801fb58 <tLockhartWavefolder_initToPool+0xd8>)
 801faba:	e9d5 4500 	ldrd	r4, r5, [r5]
    w->Is = 10e-16;
 801fabe:	a328      	add	r3, pc, #160	; (adr r3, 801fb60 <tLockhartWavefolder_initToPool+0xe0>)
 801fac0:	e9d3 2300 	ldrd	r2, r3, [r3]
    w->VT = 26e-3;
 801fac4:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
    w->Is = 10e-16;
 801fac8:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    w->b = (w->R+2.0*w->RL)/(w->VT*w->R);
 801facc:	a526      	add	r5, pc, #152	; (adr r5, 801fb68 <tLockhartWavefolder_initToPool+0xe8>)
 801face:	e9d5 4500 	ldrd	r4, r5, [r5]
    w->d = (w->RL*w->Is)/w->VT;
 801fad2:	a327      	add	r3, pc, #156	; (adr r3, 801fb70 <tLockhartWavefolder_initToPool+0xf0>)
 801fad4:	e9d3 2300 	ldrd	r2, r3, [r3]
    w->b = (w->R+2.0*w->RL)/(w->VT*w->R);
 801fad8:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
    w->d = (w->RL*w->Is)/w->VT;
 801fadc:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
    w->longthing = (0.5*w->VT/w->b);
    
    
    // Antialiasing error threshold
    w->AAthresh = 10e-10; //10
 801fae0:	a525      	add	r5, pc, #148	; (adr r5, 801fb78 <tLockhartWavefolder_initToPool+0xf8>)
 801fae2:	e9d5 4500 	ldrd	r4, r5, [r5]
    w->Ln1 = 0.0;
 801fae6:	2200      	movs	r2, #0
 801fae8:	2300      	movs	r3, #0
    w->longthing = (0.5*w->VT/w->b);
 801faea:	a725      	add	r7, pc, #148	; (adr r7, 801fb80 <tLockhartWavefolder_initToPool+0x100>)
 801faec:	e9d7 6700 	ldrd	r6, r7, [r7]
    w->half_a = 0.5 * w->a;
 801faf0:	e9c0 8918 	strd	r8, r9, [r0, #96]	; 0x60
    w->longthing = (0.5*w->VT/w->b);
 801faf4:	e9c0 671a 	strd	r6, r7, [r0, #104]	; 0x68
    w->Ln1 = 0.0;
 801faf8:	e9c0 2302 	strd	r2, r3, [r0, #8]
    w->Fn1 = 0.0;
 801fafc:	e9c0 2304 	strd	r2, r3, [r0, #16]
    w->xn1 = 0.0;
 801fb00:	e9c0 2306 	strd	r2, r3, [r0, #24]

	w->LambertThresh = 10e-10; //12  //was 8


    w->w = 0.0f;
 801fb04:	e9c0 231e 	strd	r2, r3, [r0, #120]	; 0x78
    w->expw = 0.0f;
 801fb08:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
    w->p = 0.0f;
 801fb0c:	e9c0 2322 	strd	r2, r3, [r0, #136]	; 0x88
    w->r = 0.0f;
 801fb10:	e9c0 2324 	strd	r2, r3, [r0, #144]	; 0x90
    w->s= 0.0f;
 801fb14:	e9c0 2326 	strd	r2, r3, [r0, #152]	; 0x98
    w->myerr = 0.0f;
 801fb18:	e9c0 2328 	strd	r2, r3, [r0, #160]	; 0xa0
    w->l = 0.0f;
 801fb1c:	e9c0 232a 	strd	r2, r3, [r0, #168]	; 0xa8
    w->u = 0.0f;
 801fb20:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    w->Ln = 0.0f;
 801fb24:	e9c0 232e 	strd	r2, r3, [r0, #184]	; 0xb8
	w->Fn = 0.0f;
 801fb28:	e9c0 2330 	strd	r2, r3, [r0, #192]	; 0xc0
    w->tempsDenom = 0.0f;
 801fb2c:	e9c0 2332 	strd	r2, r3, [r0, #200]	; 0xc8
    w->tempErrDenom = 0.0f;
 801fb30:	e9c0 2334 	strd	r2, r3, [r0, #208]	; 0xd0
    w->tempOutDenom = 0.0f;
 801fb34:	e9c0 2336 	strd	r2, r3, [r0, #216]	; 0xd8
    w->AAthresh = 10e-10; //10
 801fb38:	e9c0 4516 	strd	r4, r5, [r0, #88]	; 0x58
	w->LambertThresh = 10e-10; //12  //was 8
 801fb3c:	e9c0 451c 	strd	r4, r5, [r0, #112]	; 0x70


}
 801fb40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fb44:	f3af 8000 	nop.w
 801fb48:	00000000 	.word	0x00000000
 801fb4c:	40bd4c00 	.word	0x40bd4c00
 801fb50:	00000000 	.word	0x00000000
 801fb54:	40cd4c00 	.word	0x40cd4c00
 801fb58:	76c8b439 	.word	0x76c8b439
 801fb5c:	3f9a9fbe 	.word	0x3f9a9fbe
 801fb60:	9ee75616 	.word	0x9ee75616
 801fb64:	3cd203af 	.word	0x3cd203af
 801fb68:	b13b13b1 	.word	0xb13b13b1
 801fb6c:	40533b13 	.word	0x40533b13
 801fb70:	46f1bc84 	.word	0x46f1bc84
 801fb74:	3df3d2ab 	.word	0x3df3d2ab
 801fb78:	e826d695 	.word	0xe826d695
 801fb7c:	3e112e0b 	.word	0x3e112e0b
 801fb80:	f23033a4 	.word	0xf23033a4
 801fb84:	3f2626b2 	.word	0x3f2626b2
 801fb88:	3ff00000 	.word	0x3ff00000
 801fb8c:	3fe00000 	.word	0x3fe00000

0801fb90 <tLockhartWavefolder_free>:

void tLockhartWavefolder_free (tLockhartWavefolder* const wf)
{
    _tLockhartWavefolder* w = *wf;
 801fb90:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)w, w->mempool);
 801fb92:	6801      	ldr	r1, [r0, #0]
 801fb94:	f004 bb60 	b.w	8024258 <mpool_free>

0801fb98 <tLockhartWavefolder_tick>:
    _tLockhartWavefolder* w = *wf;

    float out = 0.0f;
    
    // Compute Antiderivative
    w->l = (in > 0.0) - (in < 0.0);
 801fb98:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
{
 801fb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    w->l = (in > 0.0) - (in < 0.0);
 801fb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    _tLockhartWavefolder* w = *wf;
 801fba2:	6806      	ldr	r6, [r0, #0]
{
 801fba4:	4607      	mov	r7, r0
        if ((fabs(mwf->myerr))<mwf->LambertThresh) {
 801fba6:	f640 34b8 	movw	r4, #3000	; 0xbb8
{
 801fbaa:	ed2d 8b0e 	vpush	{d8-d14}
    w->l = (in > 0.0) - (in < 0.0);
 801fbae:	bfc8      	it	gt
 801fbb0:	2301      	movgt	r3, #1
    w->u = w->d*exp(w->l*w->b*in);
 801fbb2:	eeb7 eac0 	vcvt.f64.f32	d14, s0
    w->l = (in > 0.0) - (in < 0.0);
 801fbb6:	bfd8      	it	le
 801fbb8:	2300      	movle	r3, #0
 801fbba:	bf4c      	ite	mi
 801fbbc:	2201      	movmi	r2, #1
 801fbbe:	2200      	movpl	r2, #0
    	mwf->r = (mwf->w+1.0)*mwf->expw;
 801fbc0:	eeb7 bb00 	vmov.f64	d11, #112	; 0x3f800000  1.0
        mwf->s = (mwf->w+2.0)/mwf->tempsDenom;
 801fbc4:	eeb0 9b00 	vmov.f64	d9, #0	; 0x40000000  2.0
    w->l = (in > 0.0) - (in < 0.0);
 801fbc8:	1a9b      	subs	r3, r3, r2
    w->u = w->d*exp(w->l*w->b*in);
 801fbca:	ed96 0b12 	vldr	d0, [r6, #72]	; 0x48
    w->l = (in > 0.0) - (in < 0.0);
 801fbce:	ee07 3a90 	vmov	s15, r3
    w->u = w->d*exp(w->l*w->b*in);
 801fbd2:	ee2e 0b00 	vmul.f64	d0, d14, d0
    w->l = (in > 0.0) - (in < 0.0);
 801fbd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801fbda:	ed86 7b2a 	vstr	d7, [r6, #168]	; 0xa8
    w->u = w->d*exp(w->l*w->b*in);
 801fbde:	ee20 0b07 	vmul.f64	d0, d0, d7
 801fbe2:	f007 fdf1 	bl	80277c8 <exp>
 801fbe6:	ed96 cb14 	vldr	d12, [r6, #80]	; 0x50
    	w->u = 10e-5;
    	LEAF_error();
    }
    */

    w->Ln = tLockhartWavefolderLambert(wf,w->u,w->Ln1);
 801fbea:	ed96 8b02 	vldr	d8, [r6, #8]
    w->u = w->d*exp(w->l*w->b*in);
 801fbee:	ee20 cb0c 	vmul.f64	d12, d0, d12
 801fbf2:	ed86 cb2c 	vstr	d12, [r6, #176]	; 0xb0
	_tLockhartWavefolder* mwf = *wf;
 801fbf6:	683d      	ldr	r5, [r7, #0]
 801fbf8:	eeb1 cb4c 	vneg.f64	d12, d12
        if ((fabs(mwf->myerr))<mwf->LambertThresh) {
 801fbfc:	ed95 db1c 	vldr	d13, [r5, #112]	; 0x70
	mwf->w = ln;
 801fc00:	ed85 8b1e 	vstr	d8, [r5, #120]	; 0x78
 801fc04:	e006      	b.n	801fc14 <tLockhartWavefolder_tick+0x7c>
        mwf->w = mwf->w - mwf->myerr;
 801fc06:	ee38 8b45 	vsub.f64	d8, d8, d5
    for(int i=0; i<3000; i+=1) { //1000
 801fc0a:	3c01      	subs	r4, #1
        mwf->w = mwf->w - mwf->myerr;
 801fc0c:	ed85 8b1e 	vstr	d8, [r5, #120]	; 0x78
    for(int i=0; i<3000; i+=1) { //1000
 801fc10:	f000 80c9 	beq.w	801fda6 <tLockhartWavefolder_tick+0x20e>
    	mwf->expw = exp(mwf->w);
 801fc14:	eeb0 0b48 	vmov.f64	d0, d8
 801fc18:	f007 fdd6 	bl	80277c8 <exp>
    	mwf->r = (mwf->w+1.0)*mwf->expw;
 801fc1c:	ee38 7b0b 	vadd.f64	d7, d8, d11
        mwf->s = (mwf->w+2.0)/mwf->tempsDenom;
 801fc20:	ee38 4b09 	vadd.f64	d4, d8, d9
    	mwf->p = mwf->w*mwf->expw - x;
 801fc24:	eeb0 6b4c 	vmov.f64	d6, d12
    	mwf->tempsDenom = (2.0*(mwf->w+1.0));
 801fc28:	ee37 1b07 	vadd.f64	d1, d7, d7
    	mwf->r = (mwf->w+1.0)*mwf->expw;
 801fc2c:	ee20 7b07 	vmul.f64	d7, d0, d7
        mwf->s = (mwf->w+2.0)/mwf->tempsDenom;
 801fc30:	ee84 2b01 	vdiv.f64	d2, d4, d1
    	mwf->p = mwf->w*mwf->expw - x;
 801fc34:	eea0 6b08 	vfma.f64	d6, d0, d8
        mwf->tempErrDenom = (mwf->r-(mwf->p*mwf->s));
 801fc38:	eeb0 3b47 	vmov.f64	d3, d7
 801fc3c:	eea6 3b42 	vfms.f64	d3, d6, d2
        mwf->myerr = (mwf->p/mwf->tempErrDenom);
 801fc40:	ee86 5b03 	vdiv.f64	d5, d6, d3
        if ((fabs(mwf->myerr))<mwf->LambertThresh) {
 801fc44:	eeb0 abc5 	vabs.f64	d10, d5
 801fc48:	eeb4 abcd 	vcmpe.f64	d10, d13
 801fc4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc50:	d5d9      	bpl.n	801fc06 <tLockhartWavefolder_tick+0x6e>
 801fc52:	ed85 0b20 	vstr	d0, [r5, #128]	; 0x80
 801fc56:	ed85 6b22 	vstr	d6, [r5, #136]	; 0x88
 801fc5a:	ed85 7b24 	vstr	d7, [r5, #144]	; 0x90
 801fc5e:	ed85 1b32 	vstr	d1, [r5, #200]	; 0xc8
 801fc62:	ed85 2b26 	vstr	d2, [r5, #152]	; 0x98
 801fc66:	ed85 3b34 	vstr	d3, [r5, #208]	; 0xd0
 801fc6a:	ed85 5b28 	vstr	d5, [r5, #160]	; 0xa0
	{
		w->Ln = 10e-5;
		LEAF_error();
	}
*/
    w->Fn = (w->longthing*(w->Ln*(w->Ln + 2.0))) - (w->half_a*in*in);
 801fc6e:	ee2e 5b0e 	vmul.f64	d5, d14, d14
 801fc72:	ee24 4b08 	vmul.f64	d4, d4, d8
 801fc76:	ed96 7b18 	vldr	d7, [r6, #96]	; 0x60
		LEAF_error();
	}
	*/
    // Check for ill-conditioning

    if (fabs(in-w->xn1)<w->AAthresh)
 801fc7a:	ed96 db06 	vldr	d13, [r6, #24]
    w->Fn = (w->longthing*(w->Ln*(w->Ln + 2.0))) - (w->half_a*in*in);
 801fc7e:	ed96 6b1a 	vldr	d6, [r6, #104]	; 0x68
 801fc82:	ee27 5b45 	vnmul.f64	d5, d7, d5
    if (fabs(in-w->xn1)<w->AAthresh)
 801fc86:	ee3e 3b4d 	vsub.f64	d3, d14, d13
 801fc8a:	ed96 7b16 	vldr	d7, [r6, #88]	; 0x58
    w->Fn = (w->longthing*(w->Ln*(w->Ln + 2.0))) - (w->half_a*in*in);
 801fc8e:	eea6 5b04 	vfma.f64	d5, d6, d4
    if (fabs(in-w->xn1)<w->AAthresh)
 801fc92:	eeb0 6bc3 	vabs.f64	d6, d3
    w->Ln = tLockhartWavefolderLambert(wf,w->u,w->Ln1);
 801fc96:	ed86 8b2e 	vstr	d8, [r6, #184]	; 0xb8
    if (fabs(in-w->xn1)<w->AAthresh)
 801fc9a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801fc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    w->Fn = (w->longthing*(w->Ln*(w->Ln + 2.0))) - (w->half_a*in*in);
 801fca2:	ed86 5b30 	vstr	d5, [r6, #192]	; 0xc0
    if (fabs(in-w->xn1)<w->AAthresh)
 801fca6:	d412      	bmi.n	801fcce <tLockhartWavefolder_tick+0x136>
    	{
    		w->tempOutDenom = 10e-5;
    		LEAF_error();
    	}
    	*/
        out = ((w->Fn-w->Fn1)/w->tempOutDenom);
 801fca8:	ed96 7b04 	vldr	d7, [r6, #16]
    	w->tempOutDenom = (in-w->xn1);
 801fcac:	ed86 3b36 	vstr	d3, [r6, #216]	; 0xd8
        out = ((w->Fn-w->Fn1)/w->tempOutDenom);
 801fcb0:	ee35 7b47 	vsub.f64	d7, d5, d7
 801fcb4:	ee87 0b03 	vdiv.f64	d0, d7, d3
 801fcb8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		*/

    }

    // Update States
    w->Ln1 = w->Ln;
 801fcbc:	ed86 8b02 	vstr	d8, [r6, #8]
    w->Fn1 = w->Fn;
 801fcc0:	ed86 5b04 	vstr	d5, [r6, #16]
    w->xn1 = (double)in;
 801fcc4:	ed86 eb06 	vstr	d14, [r6, #24]
    
    return out;
}
 801fcc8:	ecbd 8b0e 	vpop	{d8-d14}
 801fccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    	double xn = 0.5*(in+w->xn1);
 801fcce:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
        if ((fabs(mwf->myerr))<mwf->LambertThresh) {
 801fcd2:	f640 34b8 	movw	r4, #3000	; 0xbb8
    	double xn = 0.5*(in+w->xn1);
 801fcd6:	ee3e db0d 	vadd.f64	d13, d14, d13
    	mwf->r = (mwf->w+1.0)*mwf->expw;
 801fcda:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
        mwf->s = (mwf->w+2.0)/mwf->tempsDenom;
 801fcde:	eeb0 ab00 	vmov.f64	d10, #0	; 0x40000000  2.0
    	double xn = 0.5*(in+w->xn1);
 801fce2:	ee2d db07 	vmul.f64	d13, d13, d7
    	w->u = w->d*exp(w->l*w->b*xn);
 801fce6:	ed96 0b2a 	vldr	d0, [r6, #168]	; 0xa8
 801fcea:	ed96 7b12 	vldr	d7, [r6, #72]	; 0x48
 801fcee:	ee20 0b07 	vmul.f64	d0, d0, d7
 801fcf2:	ee20 0b0d 	vmul.f64	d0, d0, d13
 801fcf6:	f007 fd67 	bl	80277c8 <exp>
 801fcfa:	ed96 bb14 	vldr	d11, [r6, #80]	; 0x50
    	w->Ln = tLockhartWavefolderLambert(wf,w->u,w->Ln1);
 801fcfe:	ed96 8b02 	vldr	d8, [r6, #8]
    	w->u = w->d*exp(w->l*w->b*xn);
 801fd02:	ee20 bb0b 	vmul.f64	d11, d0, d11
 801fd06:	ed86 bb2c 	vstr	d11, [r6, #176]	; 0xb0
	_tLockhartWavefolder* mwf = *wf;
 801fd0a:	683d      	ldr	r5, [r7, #0]
 801fd0c:	eeb1 bb4b 	vneg.f64	d11, d11
        if ((fabs(mwf->myerr))<mwf->LambertThresh) {
 801fd10:	ed95 cb1c 	vldr	d12, [r5, #112]	; 0x70
	mwf->w = ln;
 801fd14:	ed85 8b1e 	vstr	d8, [r5, #120]	; 0x78
 801fd18:	e005      	b.n	801fd26 <tLockhartWavefolder_tick+0x18e>
        mwf->w = mwf->w - mwf->myerr;
 801fd1a:	ee38 8b45 	vsub.f64	d8, d8, d5
    for(int i=0; i<3000; i+=1) { //1000
 801fd1e:	3c01      	subs	r4, #1
        mwf->w = mwf->w - mwf->myerr;
 801fd20:	ed85 8b1e 	vstr	d8, [r5, #120]	; 0x78
    for(int i=0; i<3000; i+=1) { //1000
 801fd24:	d01e      	beq.n	801fd64 <tLockhartWavefolder_tick+0x1cc>
    	mwf->expw = exp(mwf->w);
 801fd26:	eeb0 0b48 	vmov.f64	d0, d8
 801fd2a:	f007 fd4d 	bl	80277c8 <exp>
    	mwf->r = (mwf->w+1.0)*mwf->expw;
 801fd2e:	ee38 7b09 	vadd.f64	d7, d8, d9
        mwf->s = (mwf->w+2.0)/mwf->tempsDenom;
 801fd32:	ee38 5b0a 	vadd.f64	d5, d8, d10
    	mwf->p = mwf->w*mwf->expw - x;
 801fd36:	eeb0 6b4b 	vmov.f64	d6, d11
    	mwf->tempsDenom = (2.0*(mwf->w+1.0));
 801fd3a:	ee37 2b07 	vadd.f64	d2, d7, d7
    	mwf->r = (mwf->w+1.0)*mwf->expw;
 801fd3e:	ee20 7b07 	vmul.f64	d7, d0, d7
        mwf->s = (mwf->w+2.0)/mwf->tempsDenom;
 801fd42:	ee85 3b02 	vdiv.f64	d3, d5, d2
    	mwf->p = mwf->w*mwf->expw - x;
 801fd46:	eea0 6b08 	vfma.f64	d6, d0, d8
        mwf->tempErrDenom = (mwf->r-(mwf->p*mwf->s));
 801fd4a:	eeb0 4b47 	vmov.f64	d4, d7
 801fd4e:	eea6 4b43 	vfms.f64	d4, d6, d3
        mwf->myerr = (mwf->p/mwf->tempErrDenom);
 801fd52:	ee86 5b04 	vdiv.f64	d5, d6, d4
        if ((fabs(mwf->myerr))<mwf->LambertThresh) {
 801fd56:	eeb0 1bc5 	vabs.f64	d1, d5
 801fd5a:	eeb4 1bcc 	vcmpe.f64	d1, d12
 801fd5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd62:	d5da      	bpl.n	801fd1a <tLockhartWavefolder_tick+0x182>
 801fd64:	ed85 0b20 	vstr	d0, [r5, #128]	; 0x80
 801fd68:	ed85 6b22 	vstr	d6, [r5, #136]	; 0x88
 801fd6c:	ed85 7b24 	vstr	d7, [r5, #144]	; 0x90
 801fd70:	ed85 2b32 	vstr	d2, [r5, #200]	; 0xc8
 801fd74:	ed85 3b26 	vstr	d3, [r5, #152]	; 0x98
 801fd78:	ed85 4b34 	vstr	d4, [r5, #208]	; 0xd0
 801fd7c:	ed85 5b28 	vstr	d5, [r5, #160]	; 0xa0
        out = (float)((w->l*w->VT*w->Ln) - (w->a*xn));
 801fd80:	ed96 5b10 	vldr	d5, [r6, #64]	; 0x40
 801fd84:	ed96 7b2a 	vldr	d7, [r6, #168]	; 0xa8
 801fd88:	ed96 6b0c 	vldr	d6, [r6, #48]	; 0x30
 801fd8c:	ee25 db4d 	vnmul.f64	d13, d5, d13
 801fd90:	ee27 7b06 	vmul.f64	d7, d7, d6
    	w->Ln = tLockhartWavefolderLambert(wf,w->u,w->Ln1);
 801fd94:	ed86 8b2e 	vstr	d8, [r6, #184]	; 0xb8
 801fd98:	ed96 5b30 	vldr	d5, [r6, #192]	; 0xc0
        out = (float)((w->l*w->VT*w->Ln) - (w->a*xn));
 801fd9c:	eea7 db08 	vfma.f64	d13, d7, d8
 801fda0:	eeb7 0bcd 	vcvt.f32.f64	s0, d13
 801fda4:	e78a      	b.n	801fcbc <tLockhartWavefolder_tick+0x124>
 801fda6:	ed85 0b20 	vstr	d0, [r5, #128]	; 0x80
 801fdaa:	ed85 6b22 	vstr	d6, [r5, #136]	; 0x88
 801fdae:	ed85 7b24 	vstr	d7, [r5, #144]	; 0x90
 801fdb2:	ed85 1b32 	vstr	d1, [r5, #200]	; 0xc8
 801fdb6:	ed85 2b26 	vstr	d2, [r5, #152]	; 0x98
 801fdba:	ed85 3b34 	vstr	d3, [r5, #208]	; 0xd0
 801fdbe:	ed85 5b28 	vstr	d5, [r5, #160]	; 0xa0
 801fdc2:	ee38 4b09 	vadd.f64	d4, d8, d9
 801fdc6:	e752      	b.n	801fc6e <tLockhartWavefolder_tick+0xd6>

0801fdc8 <tCrusher_initToPool>:
{
    tCrusher_initToPool(cr, &leaf.mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
 801fdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 801fdca:	680e      	ldr	r6, [r1, #0]
{
 801fdcc:	460d      	mov	r5, r1
 801fdce:	4607      	mov	r7, r0
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 801fdd0:	2020      	movs	r0, #32
 801fdd2:	4631      	mov	r1, r6
 801fdd4:	f004 f998 	bl	8024108 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = SCALAR;
    c->rnd = 0.25f;
 801fdd8:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 801fddc:	4604      	mov	r4, r0
    c->div = SCALAR;
 801fdde:	4a10      	ldr	r2, [pc, #64]	; (801fe20 <tCrusher_initToPool+0x58>)
    c->op = 4;
 801fde0:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 801fde2:	6038      	str	r0, [r7, #0]
    c->div = SCALAR;
 801fde4:	60e2      	str	r2, [r4, #12]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 801fde6:	2010      	movs	r0, #16
    c->op = 4;
 801fde8:	6161      	str	r1, [r4, #20]
    c->rnd = 0.25f;
 801fdea:	6123      	str	r3, [r4, #16]
    c->srr = 0.25f;
 801fdec:	6063      	str	r3, [r4, #4]
    c->mempool = m;
 801fdee:	6026      	str	r6, [r4, #0]
    _tMempool* m = *mp;
 801fdf0:	682d      	ldr	r5, [r5, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 801fdf2:	4629      	mov	r1, r5
 801fdf4:	f004 f988 	bl	8024108 <mpool_alloc>
    s->invRatio = 1.0f;
 801fdf8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
 801fdfc:	2200      	movs	r2, #0
    s->count = 0;
 801fdfe:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 801fe00:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 801fe02:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801fe24 <tCrusher_initToPool+0x5c>
    s->mempool = m;
 801fe06:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
 801fe08:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
 801fe0a:	6082      	str	r2, [r0, #8]
    s->count = 0;
 801fe0c:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 801fe0e:	eddf 7a06 	vldr	s15, [pc, #24]	; 801fe28 <tCrusher_initToPool+0x60>
 801fe12:	edd4 6a03 	vldr	s13, [r4, #12]
 801fe16:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fe1a:	edc4 7a06 	vstr	s15, [r4, #24]
}
 801fe1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe20:	459c4000 	.word	0x459c4000
 801fe24:	3912ccf6 	.word	0x3912ccf6
 801fe28:	3e99999a 	.word	0x3e99999a

0801fe2c <tCrusher_free>:

void tCrusher_free (tCrusher* const cr)
{
 801fe2c:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
 801fe2e:	6804      	ldr	r4, [r0, #0]
    _tSampleReducer* s = *sr;
 801fe30:	69e0      	ldr	r0, [r4, #28]
    mpool_free((char*)s, s->mempool);
 801fe32:	6801      	ldr	r1, [r0, #0]
 801fe34:	f004 fa10 	bl	8024258 <mpool_free>
    
    tSampleReducer_free(&c->sReducer);
    mpool_free((char*)c, c->mempool);
 801fe38:	6821      	ldr	r1, [r4, #0]
 801fe3a:	4620      	mov	r0, r4
}
 801fe3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)c, c->mempool);
 801fe40:	f004 ba0a 	b.w	8024258 <mpool_free>

0801fe44 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    float sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 801fe44:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801fec0 <tCrusher_tick+0x7c>
 801fe48:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 801fe4c:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
 801fe4e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
 801fe52:	6804      	ldr	r4, [r0, #0]
    
    sample /= c->div;
 801fe54:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
 801fe58:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 801fe5c:	6960      	ldr	r0, [r4, #20]
 801fe5e:	05c0      	lsls	r0, r0, #23
 801fe60:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801fe64:	f003 ff4a 	bl	8023cfc <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 801fe68:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801fe6c:	eef0 0a40 	vmov.f32	s1, s0
 801fe70:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801fe74:	f003 ff48 	bl	8023d08 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 801fe78:	edd4 0a04 	vldr	s1, [r4, #16]
 801fe7c:	f003 ff2c 	bl	8023cd8 <LEAF_round>
    _tSampleReducer* s = *sr;
 801fe80:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
 801fe82:	68da      	ldr	r2, [r3, #12]
 801fe84:	edd3 7a01 	vldr	s15, [r3, #4]
 801fe88:	ee07 2a10 	vmov	s14, r2
 801fe8c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801fe90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fe94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe98:	dd08      	ble.n	801feac <tCrusher_tick+0x68>
        s->hold = input;
 801fe9a:	2201      	movs	r2, #1
 801fe9c:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
 801fea0:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
 801fea2:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 801fea6:	ee20 0a27 	vmul.f32	s0, s0, s15
 801feaa:	bd10      	pop	{r4, pc}
 801feac:	3201      	adds	r2, #1
 801feae:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
 801feb2:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
 801feb4:	edd4 7a06 	vldr	s15, [r4, #24]
}
 801feb8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801febc:	bd10      	pop	{r4, pc}
 801febe:	bf00      	nop
 801fec0:	459c4000 	.word	0x459c4000

0801fec4 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, float op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
 801fec4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
 801fec8:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
 801feca:	ee20 0a27 	vmul.f32	s0, s0, s15
 801fece:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801fed2:	ed83 0a05 	vstr	s0, [r3, #20]
}
 801fed6:	4770      	bx	lr

0801fed8 <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, float val)
{
 801fed8:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
 801feda:	eef0 0a40 	vmov.f32	s1, s0
 801fede:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801ff10 <tCrusher_setQuality+0x38>
 801fee2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    _tCrusher* c = *cr;
 801fee6:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
 801fee8:	f003 ff0e 	bl	8023d08 <LEAF_clip>
    
    c->div = 0.01f + val * SCALAR;
 801feec:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801ff14 <tCrusher_setQuality+0x3c>
 801fef0:	eddf 7a09 	vldr	s15, [pc, #36]	; 801ff18 <tCrusher_setQuality+0x40>
    
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 801fef4:	eddf 6a09 	vldr	s13, [pc, #36]	; 801ff1c <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
 801fef8:	eee0 7a07 	vfma.f32	s15, s0, s14
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 801fefc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801ff20 <tCrusher_setQuality+0x48>
 801ff00:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
 801ff04:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 801ff08:	ed84 7a06 	vstr	s14, [r4, #24]
}
 801ff0c:	bd10      	pop	{r4, pc}
 801ff0e:	bf00      	nop
 801ff10:	00000000 	.word	0x00000000
 801ff14:	459c4000 	.word	0x459c4000
 801ff18:	3c23d70a 	.word	0x3c23d70a
 801ff1c:	3912ccf6 	.word	0x3912ccf6
 801ff20:	3e99999a 	.word	0x3e99999a

0801ff24 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, float rnd)
{
    _tCrusher* c = *cr;
    c->rnd = fabsf(rnd);
 801ff24:	eeb0 0ac0 	vabs.f32	s0, s0
    _tCrusher* c = *cr;
 801ff28:	6803      	ldr	r3, [r0, #0]
    c->rnd = fabsf(rnd);
 801ff2a:	ed83 0a04 	vstr	s0, [r3, #16]
}
 801ff2e:	4770      	bx	lr

0801ff30 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 801ff30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, float ratio)
{
    _tCrusher* c = *cr;
 801ff34:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
 801ff36:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 801ff3a:	eeb4 0a67 	vcmp.f32	s0, s15
 801ff3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff42:	d809      	bhi.n	801ff58 <tCrusher_setSamplingRatio+0x28>
 801ff44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801ff48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff4c:	db04      	blt.n	801ff58 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
 801ff4e:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
 801ff52:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
 801ff54:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);

}
 801ff58:	4770      	bx	lr
 801ff5a:	bf00      	nop

0801ff5c <tFeedbackLeveler_init>:
}

/* Feedback Leveler */

void tFeedbackLeveler_init (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode)
{
 801ff5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf.mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode, tMempool* const mp)
{
    _tMempool* m = *mp;
 801ff60:	4d12      	ldr	r5, [pc, #72]	; (801ffac <tFeedbackLeveler_init+0x50>)
{
 801ff62:	4680      	mov	r8, r0
 801ff64:	460f      	mov	r7, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 801ff66:	2018      	movs	r0, #24
    _tMempool* m = *mp;
 801ff68:	f855 6f18 	ldr.w	r6, [r5, #24]!
{
 801ff6c:	ed2d 8b04 	vpush	{d8-d9}
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 801ff70:	4631      	mov	r1, r6
{
 801ff72:	eef0 8a40 	vmov.f32	s17, s0
 801ff76:	eeb0 9a60 	vmov.f32	s18, s1
 801ff7a:	eeb0 8a41 	vmov.f32	s16, s2
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 801ff7e:	f004 f8c3 	bl	8024108 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
 801ff82:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 801ff84:	4604      	mov	r4, r0
 801ff86:	f8c8 0000 	str.w	r0, [r8]
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 801ff8a:	eeb0 0a49 	vmov.f32	s0, s18
    p->mempool = m;
 801ff8e:	6006      	str	r6, [r0, #0]
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 801ff90:	4629      	mov	r1, r5
    p->targetLevel=targetLevel;
 801ff92:	edc4 8a01 	vstr	s17, [r4, #4]
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 801ff96:	3014      	adds	r0, #20
    p->curr=0.0f;
 801ff98:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 801ff9a:	f7fe fc95 	bl	801e8c8 <tPowerFollower_initToPool>
    p->mode=mode;
 801ff9e:	60e7      	str	r7, [r4, #12]
    p->strength=strength;
 801ffa0:	ed84 8a02 	vstr	s16, [r4, #8]
}
 801ffa4:	ecbd 8b04 	vpop	{d8-d9}
 801ffa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ffac:	200194e0 	.word	0x200194e0

0801ffb0 <tFeedbackLeveler_initToPool>:
{
 801ffb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tMempool* m = *mp;
 801ffb4:	6815      	ldr	r5, [r2, #0]
{
 801ffb6:	4680      	mov	r8, r0
 801ffb8:	460f      	mov	r7, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 801ffba:	2018      	movs	r0, #24
 801ffbc:	4629      	mov	r1, r5
{
 801ffbe:	4616      	mov	r6, r2
 801ffc0:	ed2d 8b04 	vpush	{d8-d9}
 801ffc4:	eef0 8a40 	vmov.f32	s17, s0
 801ffc8:	eeb0 9a60 	vmov.f32	s18, s1
 801ffcc:	eeb0 8a41 	vmov.f32	s16, s2
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 801ffd0:	f004 f89a 	bl	8024108 <mpool_alloc>
    p->curr=0.0f;
 801ffd4:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 801ffd6:	4604      	mov	r4, r0
 801ffd8:	f8c8 0000 	str.w	r0, [r8]
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 801ffdc:	eeb0 0a49 	vmov.f32	s0, s18
    p->mempool = m;
 801ffe0:	6005      	str	r5, [r0, #0]
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 801ffe2:	4631      	mov	r1, r6
    p->targetLevel=targetLevel;
 801ffe4:	edc4 8a01 	vstr	s17, [r4, #4]
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 801ffe8:	3014      	adds	r0, #20
    p->curr=0.0f;
 801ffea:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw,factor, mp);
 801ffec:	f7fe fc6c 	bl	801e8c8 <tPowerFollower_initToPool>
    p->mode=mode;
 801fff0:	60e7      	str	r7, [r4, #12]
    p->strength=strength;
 801fff2:	ed84 8a02 	vstr	s16, [r4, #8]
}
 801fff6:	ecbd 8b04 	vpop	{d8-d9}
 801fffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fffe:	bf00      	nop

08020000 <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
 8020000:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
 8020002:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
 8020004:	f104 0014 	add.w	r0, r4, #20
 8020008:	f7fe fc78 	bl	801e8fc <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
 802000c:	6821      	ldr	r1, [r4, #0]
 802000e:	4620      	mov	r0, r4
}
 8020010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 8020014:	f004 b920 	b.w	8024258 <mpool_free>

08020018 <tFeedbackLeveler_setMode>:
    tPowerFollower_setFactor(&p->pwrFlw,factor);
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
 8020018:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
 802001a:	60d9      	str	r1, [r3, #12]
}
 802001c:	4770      	bx	lr
 802001e:	bf00      	nop

08020020 <tFeedbackLeveler_tick>:

float   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, float input)
{
 8020020:	b510      	push	{r4, lr}
 8020022:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
 8020026:	6804      	ldr	r4, [r0, #0]
{
 8020028:	eeb0 8a40 	vmov.f32	s16, s0
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 802002c:	f104 0014 	add.w	r0, r4, #20
 8020030:	f7fe fc68 	bl	801e904 <tPowerFollower_tick>
 8020034:	edd4 7a01 	vldr	s15, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 8020038:	68e3      	ldr	r3, [r4, #12]
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 802003a:	ee70 7a67 	vsub.f32	s15, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 802003e:	b943      	cbnz	r3, 8020052 <tFeedbackLeveler_tick+0x32>
 8020040:	eef5 7a40 	vcmp.f32	s15, #0.0
 8020044:	ed9f 7a09 	vldr	s14, [pc, #36]	; 802006c <tFeedbackLeveler_tick+0x4c>
 8020048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802004c:	bf48      	it	mi
 802004e:	eef0 7a47 	vmovmi.f32	s15, s14
    p->curr=input*(1.0f-p->strength*levdiff);
 8020052:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8020056:	ed94 7a02 	vldr	s14, [r4, #8]
 802005a:	eea7 0a67 	vfms.f32	s0, s14, s15
 802005e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8020062:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
 8020066:	ecbd 8b02 	vpop	{d8}
 802006a:	bd10      	pop	{r4, pc}
 802006c:	00000000 	.word	0x00000000

08020070 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, float TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
 8020070:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
 8020072:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8020076:	4770      	bx	lr

08020078 <tTalkbox_lpcDurbin>:
    }

}

void tTalkbox_lpcDurbin(float *r, int p, float *k, float *g)
{
 8020078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i, j;
    float a[ORD_MAX], at[ORD_MAX], e=r[0];

    for(i=0; i<=p; i++)
 802007c:	f1b1 0900 	subs.w	r9, r1, #0
{
 8020080:	4615      	mov	r5, r2
 8020082:	ed2d 8b04 	vpush	{d8-d9}
 8020086:	b0c7      	sub	sp, #284	; 0x11c
    float a[ORD_MAX], at[ORD_MAX], e=r[0];
 8020088:	edd0 8a00 	vldr	s17, [r0]
{
 802008c:	9301      	str	r3, [sp, #4]
    for(i=0; i<=p; i++)
 802008e:	db7e      	blt.n	802018e <tTalkbox_lpcDurbin+0x116>
    {
    	a[i] = 0.0f; //probably don't need to clear at[] or k[]
 8020090:	f109 0201 	add.w	r2, r9, #1
 8020094:	4607      	mov	r7, r0
 8020096:	2100      	movs	r1, #0
 8020098:	a802      	add	r0, sp, #8
 802009a:	0092      	lsls	r2, r2, #2
 802009c:	f006 ff0d 	bl	8026eba <memset>
    }
	k[0] = 0.0f;
 80200a0:	2300      	movs	r3, #0
    at[0] = 0.0f;
    for(i=1; i<=p; i++)
 80200a2:	f1b9 0f00 	cmp.w	r9, #0
	k[0] = 0.0f;
 80200a6:	602b      	str	r3, [r5, #0]
    at[0] = 0.0f;
 80200a8:	9324      	str	r3, [sp, #144]	; 0x90
    for(i=1; i<=p; i++)
 80200aa:	dd50      	ble.n	802014e <tTalkbox_lpcDurbin+0xd6>
 80200ac:	1d3e      	adds	r6, r7, #4
 80200ae:	f06f 0a07 	mvn.w	sl, #7
 80200b2:	3504      	adds	r5, #4
 80200b4:	f10d 0808 	add.w	r8, sp, #8
 80200b8:	ebaa 0a07 	sub.w	sl, sl, r7
 80200bc:	4634      	mov	r4, r6
 80200be:	2701      	movs	r7, #1
        for(j=1; j<i; j++)
        {
            at[j] = a[j];
            k[i] -= a[j] * r[i-j];
        }
        if(fabs(e) < 1.0e-20f) { e = 0.0f;  break; }
 80200c0:	eddf 9a38 	vldr	s19, [pc, #224]	; 80201a4 <tTalkbox_lpcDurbin+0x12c>
        k[i] = -r[i];
 80200c4:	ed94 8a00 	vldr	s16, [r4]
        for(j=1; j<i; j++)
 80200c8:	2f01      	cmp	r7, #1
 80200ca:	f104 0b04 	add.w	fp, r4, #4
 80200ce:	eeb0 9ae8 	vabs.f32	s18, s17
        k[i] = -r[i];
 80200d2:	eeb1 8a48 	vneg.f32	s16, s16
 80200d6:	eca5 8a01 	vstmia	r5!, {s16}
        for(j=1; j<i; j++)
 80200da:	d04c      	beq.n	8020176 <tTalkbox_lpcDurbin+0xfe>
 80200dc:	ab25      	add	r3, sp, #148	; 0x94
 80200de:	eb0a 020b 	add.w	r2, sl, fp
 80200e2:	a903      	add	r1, sp, #12
 80200e4:	4618      	mov	r0, r3
 80200e6:	f006 fedd 	bl	8026ea4 <memcpy>
 80200ea:	a903      	add	r1, sp, #12
 80200ec:	4603      	mov	r3, r0
 80200ee:	460a      	mov	r2, r1
            k[i] -= a[j] * r[i-j];
 80200f0:	ed74 7a01 	vldmdb	r4!, {s15}
            at[j] = a[j];
 80200f4:	ecb2 7a01 	vldmia	r2!, {s14}
        for(j=1; j<i; j++)
 80200f8:	42a6      	cmp	r6, r4
            k[i] -= a[j] * r[i-j];
 80200fa:	eea7 8a67 	vfms.f32	s16, s14, s15
 80200fe:	ed05 8a01 	vstr	s16, [r5, #-4]
        for(j=1; j<i; j++)
 8020102:	d1f5      	bne.n	80200f0 <tTalkbox_lpcDurbin+0x78>
        if(fabs(e) < 1.0e-20f) { e = 0.0f;  break; }
 8020104:	eeb4 9ae9 	vcmpe.f32	s18, s19
 8020108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802010c:	d429      	bmi.n	8020162 <tTalkbox_lpcDurbin+0xea>
        k[i] /= e;
 802010e:	eec8 6a28 	vdiv.f32	s13, s16, s17
 8020112:	aa24      	add	r2, sp, #144	; 0x90
 8020114:	4618      	mov	r0, r3
 8020116:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 802011a:	ed45 6a01 	vstr	s13, [r5, #-4]

        a[i] = k[i];
 802011e:	edc8 6a01 	vstr	s13, [r8, #4]
        for(j=1; j<i; j++) a[j] = at[j] + k[i] * at[i-j];
 8020122:	ed32 7a01 	vldmdb	r2!, {s14}
 8020126:	ecf0 7a01 	vldmia	r0!, {s15}
 802012a:	4293      	cmp	r3, r2
 802012c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8020130:	ece1 7a01 	vstmia	r1!, {s15}
 8020134:	d1f5      	bne.n	8020122 <tTalkbox_lpcDurbin+0xaa>

        e *= 1.0f - k[i] * k[i];
 8020136:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    for(i=1; i<=p; i++)
 802013a:	3701      	adds	r7, #1
 802013c:	f108 0804 	add.w	r8, r8, #4
 8020140:	465c      	mov	r4, fp
 8020142:	45b9      	cmp	r9, r7
        e *= 1.0f - k[i] * k[i];
 8020144:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8020148:	ee68 8aa7 	vmul.f32	s17, s17, s15
    for(i=1; i<=p; i++)
 802014c:	daba      	bge.n	80200c4 <tTalkbox_lpcDurbin+0x4c>
    }

    if(e < 1.0e-20f) e = 0.0f;
 802014e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80201a4 <tTalkbox_lpcDurbin+0x12c>
 8020152:	eef4 8ae7 	vcmpe.f32	s17, s15
 8020156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802015a:	d402      	bmi.n	8020162 <tTalkbox_lpcDurbin+0xea>
 802015c:	eef1 7ae8 	vsqrt.f32	s15, s17
 8020160:	e001      	b.n	8020166 <tTalkbox_lpcDurbin+0xee>
        for(j=1; j<i; j++)
 8020162:	eddf 7a11 	vldr	s15, [pc, #68]	; 80201a8 <tTalkbox_lpcDurbin+0x130>
    *g = sqrtf(e);
 8020166:	9b01      	ldr	r3, [sp, #4]
 8020168:	edc3 7a00 	vstr	s15, [r3]
}
 802016c:	b047      	add	sp, #284	; 0x11c
 802016e:	ecbd 8b04 	vpop	{d8-d9}
 8020172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(fabs(e) < 1.0e-20f) { e = 0.0f;  break; }
 8020176:	eeb4 9ae9 	vcmpe.f32	s18, s19
 802017a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802017e:	d4f0      	bmi.n	8020162 <tTalkbox_lpcDurbin+0xea>
        k[i] /= e;
 8020180:	eec8 6a28 	vdiv.f32	s13, s16, s17
 8020184:	ed45 6a01 	vstr	s13, [r5, #-4]
        a[i] = k[i];
 8020188:	edc8 6a01 	vstr	s13, [r8, #4]
 802018c:	e7d3      	b.n	8020136 <tTalkbox_lpcDurbin+0xbe>
    if(e < 1.0e-20f) e = 0.0f;
 802018e:	eddf 7a05 	vldr	s15, [pc, #20]	; 80201a4 <tTalkbox_lpcDurbin+0x12c>
	k[0] = 0.0f;
 8020192:	2300      	movs	r3, #0
    if(e < 1.0e-20f) e = 0.0f;
 8020194:	eef4 8ae7 	vcmpe.f32	s17, s15
	k[0] = 0.0f;
 8020198:	6013      	str	r3, [r2, #0]
    if(e < 1.0e-20f) e = 0.0f;
 802019a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802019e:	d5dd      	bpl.n	802015c <tTalkbox_lpcDurbin+0xe4>
 80201a0:	e7df      	b.n	8020162 <tTalkbox_lpcDurbin+0xea>
 80201a2:	bf00      	nop
 80201a4:	1e3ce508 	.word	0x1e3ce508
 80201a8:	00000000 	.word	0x00000000

080201ac <tTalkboxFloat_free>:
    tTalkboxFloat_update(voc);
    tTalkboxFloat_suspend(voc);
}

void tTalkboxFloat_free (tTalkboxFloat* const voc)
{
 80201ac:	b510      	push	{r4, lr}
    _tTalkboxFloat* v = *voc;
 80201ae:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)v->buf1, v->mempool);
 80201b0:	6821      	ldr	r1, [r4, #0]
 80201b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80201b4:	f004 f850 	bl	8024258 <mpool_free>
    mpool_free((char*)v->buf0, v->mempool);
 80201b8:	6821      	ldr	r1, [r4, #0]
 80201ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80201bc:	f004 f84c 	bl	8024258 <mpool_free>
    mpool_free((char*)v->window, v->mempool);
 80201c0:	6821      	ldr	r1, [r4, #0]
 80201c2:	6a20      	ldr	r0, [r4, #32]
 80201c4:	f004 f848 	bl	8024258 <mpool_free>
    mpool_free((char*)v->car1, v->mempool);
 80201c8:	6821      	ldr	r1, [r4, #0]
 80201ca:	69e0      	ldr	r0, [r4, #28]
 80201cc:	f004 f844 	bl	8024258 <mpool_free>
    mpool_free((char*)v->car0, v->mempool);
 80201d0:	6821      	ldr	r1, [r4, #0]
 80201d2:	69a0      	ldr	r0, [r4, #24]
 80201d4:	f004 f840 	bl	8024258 <mpool_free>

    mpool_free((char*)v->dl, v->mempool);
 80201d8:	6821      	ldr	r1, [r4, #0]
 80201da:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80201de:	f004 f83b 	bl	8024258 <mpool_free>
    mpool_free((char*)v->Rt, v->mempool);
 80201e2:	6821      	ldr	r1, [r4, #0]
 80201e4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80201e8:	f004 f836 	bl	8024258 <mpool_free>
    mpool_free((char*)v->k, v->mempool);
 80201ec:	6821      	ldr	r1, [r4, #0]
 80201ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80201f0:	f004 f832 	bl	8024258 <mpool_free>
    mpool_free((char*)v, v->mempool);
 80201f4:	6821      	ldr	r1, [r4, #0]
 80201f6:	4620      	mov	r0, r4
}
 80201f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)v, v->mempool);
 80201fc:	f004 b82c 	b.w	8024258 <mpool_free>

08020200 <tTalkboxFloat_update>:

void tTalkboxFloat_update(tTalkboxFloat* const voc) ///update internal parameters...
{
 8020200:	b538      	push	{r3, r4, r5, lr}
    _tTalkboxFloat* v = *voc;
 8020202:	6804      	ldr	r4, [r0, #0]

    int32_t n = (int32_t)(0.01633f * fs); //this sets the window time to 16ms if the buffer is large enough. Buffer needs to be at least 784 samples at 48000
    if(n > v->bufsize) n = v->bufsize;

    //O = (VstInt32)(0.0005f * fs);
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * fs);
 8020204:	eddf 7a33 	vldr	s15, [pc, #204]	; 80202d4 <tTalkboxFloat_update+0xd4>
    float fs = leaf.sampleRate;
 8020208:	4b33      	ldr	r3, [pc, #204]	; (80202d8 <tTalkboxFloat_update+0xd8>)
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * fs);
 802020a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80202dc <tTalkboxFloat_update+0xdc>
 802020e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80202e0 <tTalkboxFloat_update+0xe0>
 8020212:	ed9f 6a34 	vldr	s12, [pc, #208]	; 80202e4 <tTalkboxFloat_update+0xe4>
{
 8020216:	ed2d 8b04 	vpush	{d8-d9}
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * fs);
 802021a:	edd4 6a04 	vldr	s13, [r4, #16]
 802021e:	6961      	ldr	r1, [r4, #20]
 8020220:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8020224:	edd3 6a00 	vldr	s13, [r3]
    int32_t n = (int32_t)(0.01633f * fs); //this sets the window time to 16ms if the buffer is large enough. Buffer needs to be at least 784 samples at 48000
 8020228:	eddf 7a2f 	vldr	s15, [pc, #188]	; 80202e8 <tTalkboxFloat_update+0xe8>
 802022c:	fec6 6ae5 	vminnm.f32	s13, s13, s11
 8020230:	fec6 6a86 	vmaxnm.f32	s13, s13, s12
 8020234:	ee66 7aa7 	vmul.f32	s15, s13, s15

    if(n != v->N) //recalc hanning window
 8020238:	6c62      	ldr	r2, [r4, #68]	; 0x44
    int32_t n = (int32_t)(0.01633f * fs); //this sets the window time to 16ms if the buffer is large enough. Buffer needs to be at least 784 samples at 48000
 802023a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * fs);
 802023e:	ee27 7a26 	vmul.f32	s14, s14, s13
    int32_t n = (int32_t)(0.01633f * fs); //this sets the window time to 16ms if the buffer is large enough. Buffer needs to be at least 784 samples at 48000
 8020242:	ee17 3a90 	vmov	r3, s15
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * fs);
 8020246:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 802024a:	428b      	cmp	r3, r1
 802024c:	bfa8      	it	ge
 802024e:	460b      	movge	r3, r1
 8020250:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
    if(n != v->N) //recalc hanning window
 8020254:	429a      	cmp	r2, r3
 8020256:	d027      	beq.n	80202a8 <tTalkboxFloat_update+0xa8>
    {
        v->N = n;
        float dp = TWO_PI / v->N;
 8020258:	ee07 3a90 	vmov	s15, r3
 802025c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80202ec <tTalkboxFloat_update+0xec>
        float p = 0.0f;
        for(n=0; n<v->N; n++)
 8020260:	2b00      	cmp	r3, #0
        v->N = n;
 8020262:	6463      	str	r3, [r4, #68]	; 0x44
        float dp = TWO_PI / v->N;
 8020264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020268:	eec7 8a27 	vdiv.f32	s17, s14, s15
        for(n=0; n<v->N; n++)
 802026c:	dd1c      	ble.n	80202a8 <tTalkboxFloat_update+0xa8>
        float p = 0.0f;
 802026e:	ed9f 8a20 	vldr	s16, [pc, #128]	; 80202f0 <tTalkboxFloat_update+0xf0>
        for(n=0; n<v->N; n++)
 8020272:	2500      	movs	r5, #0
 8020274:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
        {
            v->window[n] = 0.5f - 0.5f * cosf(p);
 8020278:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 802027c:	eeb0 9a40 	vmov.f32	s18, s0
 8020280:	e001      	b.n	8020286 <tTalkboxFloat_update+0x86>
 8020282:	f006 ff3b 	bl	80270fc <cosf>
 8020286:	ee39 0a40 	vsub.f32	s0, s18, s0
 802028a:	6a23      	ldr	r3, [r4, #32]
            p += dp;
 802028c:	ee38 8a28 	vadd.f32	s16, s16, s17
            v->window[n] = 0.5f - 0.5f * cosf(p);
 8020290:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        for(n=0; n<v->N; n++)
 8020294:	3501      	adds	r5, #1
            v->window[n] = 0.5f - 0.5f * cosf(p);
 8020296:	ee60 7a29 	vmul.f32	s15, s0, s19
 802029a:	eeb0 0a48 	vmov.f32	s0, s16
 802029e:	edc3 7a00 	vstr	s15, [r3]
        for(n=0; n<v->N; n++)
 80202a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80202a4:	42ab      	cmp	r3, r5
 80202a6:	dcec      	bgt.n	8020282 <tTalkboxFloat_update+0x82>
        }
    }
    v->wet = 0.5f * v->param[0] * v->param[0];
 80202a8:	ed94 7a01 	vldr	s14, [r4, #4]
 80202ac:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    v->dry = 2.0f * v->param[1] * v->param[1];
 80202b0:	edd4 7a02 	vldr	s15, [r4, #8]
    v->wet = 0.5f * v->param[0] * v->param[0];
 80202b4:	ee27 7a07 	vmul.f32	s14, s14, s14
    v->dry = 2.0f * v->param[1] * v->param[1];
 80202b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    v->wet = 0.5f * v->param[0] * v->param[0];
 80202bc:	ee27 7a26 	vmul.f32	s14, s14, s13
    v->dry = 2.0f * v->param[1] * v->param[1];
 80202c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
    v->wet = 0.5f * v->param[0] * v->param[0];
 80202c4:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
    v->dry = 2.0f * v->param[1] * v->param[1];
 80202c8:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
 80202cc:	ecbd 8b04 	vpop	{d8-d9}
 80202d0:	bd38      	pop	{r3, r4, r5, pc}
 80202d2:	bf00      	nop
 80202d4:	39d1b717 	.word	0x39d1b717
 80202d8:	200194e0 	.word	0x200194e0
 80202dc:	38d1b717 	.word	0x38d1b717
 80202e0:	47bb8000 	.word	0x47bb8000
 80202e4:	45fa0000 	.word	0x45fa0000
 80202e8:	3c85c67e 	.word	0x3c85c67e
 80202ec:	40c90fdb 	.word	0x40c90fdb
 80202f0:	00000000 	.word	0x00000000

080202f4 <tTalkboxFloat_initToPool>:
{
 80202f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tMempool* m = *mp;
 80202f8:	6817      	ldr	r7, [r2, #0]
{
 80202fa:	4680      	mov	r8, r0
 80202fc:	4689      	mov	r9, r1
    _tTalkboxFloat* v = *voc = (_tTalkboxFloat*) mpool_alloc(sizeof(_tTalkboxFloat), m);
 80202fe:	2090      	movs	r0, #144	; 0x90
 8020300:	4639      	mov	r1, r7
    v->param[1] = 0.0f;  //dry
 8020302:	2400      	movs	r4, #0
    _tTalkboxFloat* v = *voc = (_tTalkboxFloat*) mpool_alloc(sizeof(_tTalkboxFloat), m);
 8020304:	f003 ff00 	bl	8024108 <mpool_alloc>
    v->warpOn = 0;
 8020308:	2500      	movs	r5, #0
    _tTalkboxFloat* v = *voc = (_tTalkboxFloat*) mpool_alloc(sizeof(_tTalkboxFloat), m);
 802030a:	4606      	mov	r6, r0
    v->param[0] = 0.5f;  //wet
 802030c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    v->param[3] = 1.0f;  //quality
 8020310:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    _tTalkboxFloat* v = *voc = (_tTalkboxFloat*) mpool_alloc(sizeof(_tTalkboxFloat), m);
 8020314:	f8c8 0000 	str.w	r0, [r8]
    v->car0 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020318:	4639      	mov	r1, r7
    v->mempool = m;
 802031a:	6007      	str	r7, [r0, #0]
    v->bufsize = bufsize;
 802031c:	f8c0 9014 	str.w	r9, [r0, #20]
    v->car0 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020320:	ea4f 0089 	mov.w	r0, r9, lsl #2
    v->param[0] = 0.5f;  //wet
 8020324:	6072      	str	r2, [r6, #4]
    v->param[3] = 1.0f;  //quality
 8020326:	6133      	str	r3, [r6, #16]
    v->param[1] = 0.0f;  //dry
 8020328:	60b4      	str	r4, [r6, #8]
    v->param[2] = 0; // Swap
 802032a:	60f4      	str	r4, [r6, #12]
    v->warpFactor = 0.0f;
 802032c:	6334      	str	r4, [r6, #48]	; 0x30
    v->G = 0.0f;
 802032e:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
    v->freeze = 0;
 8020332:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
    v->car0 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020336:	f003 fee7 	bl	8024108 <mpool_alloc>
    v->car1 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 802033a:	6973      	ldr	r3, [r6, #20]
    v->car0 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 802033c:	61b0      	str	r0, [r6, #24]
    v->car1 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 802033e:	4639      	mov	r1, r7
 8020340:	0098      	lsls	r0, r3, #2
 8020342:	f003 fee1 	bl	8024108 <mpool_alloc>
    v->window = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020346:	6973      	ldr	r3, [r6, #20]
    v->car1 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020348:	61f0      	str	r0, [r6, #28]
    v->window = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 802034a:	4639      	mov	r1, r7
 802034c:	0098      	lsls	r0, r3, #2
 802034e:	f003 fedb 	bl	8024108 <mpool_alloc>
    v->buf0 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020352:	6973      	ldr	r3, [r6, #20]
    v->window = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020354:	6230      	str	r0, [r6, #32]
    v->buf0 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020356:	4639      	mov	r1, r7
 8020358:	0098      	lsls	r0, r3, #2
 802035a:	f003 fed5 	bl	8024108 <mpool_alloc>
    v->buf1 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 802035e:	6973      	ldr	r3, [r6, #20]
    v->buf0 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020360:	6270      	str	r0, [r6, #36]	; 0x24
    v->buf1 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020362:	4639      	mov	r1, r7
 8020364:	0098      	lsls	r0, r3, #2
 8020366:	f003 fecf 	bl	8024108 <mpool_alloc>
    v->dl = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 802036a:	6973      	ldr	r3, [r6, #20]
    v->buf1 =   (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 802036c:	62b0      	str	r0, [r6, #40]	; 0x28
    v->dl = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 802036e:	4639      	mov	r1, r7
 8020370:	0098      	lsls	r0, r3, #2
 8020372:	f003 fec9 	bl	8024108 <mpool_alloc>
    v->Rt = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020376:	6973      	ldr	r3, [r6, #20]
    v->dl = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020378:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
    v->Rt = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 802037c:	4639      	mov	r1, r7
 802037e:	0098      	lsls	r0, r3, #2
 8020380:	f003 fec2 	bl	8024108 <mpool_alloc>
    v->k = (float*) mpool_alloc(sizeof(float) * ORD_MAX, m);
 8020384:	4639      	mov	r1, r7
    v->Rt = (float*) mpool_alloc(sizeof(float) * v->bufsize, m);
 8020386:	f8c6 008c 	str.w	r0, [r6, #140]	; 0x8c
    v->k = (float*) mpool_alloc(sizeof(float) * ORD_MAX, m);
 802038a:	2088      	movs	r0, #136	; 0x88
 802038c:	f003 febc 	bl	8024108 <mpool_alloc>
 8020390:	62f0      	str	r0, [r6, #44]	; 0x2c
    tTalkboxFloat_update(voc);
 8020392:	4640      	mov	r0, r8
 8020394:	f7ff ff34 	bl	8020200 <tTalkboxFloat_update>

void tTalkboxFloat_suspend(tTalkboxFloat* const voc) ///clear any buffers...
{
    _tTalkboxFloat* v = *voc;
 8020398:	f8d8 3000 	ldr.w	r3, [r8]
    v->FX = 0;

    v->u0 = v->u1 = v->u2 = v->u3 = v->u4 = 0.0f;
    v->d0 = v->d1 = v->d2 = v->d3 = v->d4 = 0.0f;

    for (int32_t i = 0; i < v->bufsize; i++)
 802039c:	695a      	ldr	r2, [r3, #20]
    v->pos = v->K = 0;
 802039e:	641d      	str	r5, [r3, #64]	; 0x40
    for (int32_t i = 0; i < v->bufsize; i++)
 80203a0:	42aa      	cmp	r2, r5
    v->pos = v->K = 0;
 80203a2:	64dd      	str	r5, [r3, #76]	; 0x4c
    v->emphasis = 0.0f;
 80203a4:	63dc      	str	r4, [r3, #60]	; 0x3c
    v->FX = 0;
 80203a6:	659c      	str	r4, [r3, #88]	; 0x58
    v->u0 = v->u1 = v->u2 = v->u3 = v->u4 = 0.0f;
 80203a8:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
 80203ac:	67dc      	str	r4, [r3, #124]	; 0x7c
 80203ae:	679c      	str	r4, [r3, #120]	; 0x78
 80203b0:	675c      	str	r4, [r3, #116]	; 0x74
 80203b2:	671c      	str	r4, [r3, #112]	; 0x70
    v->d0 = v->d1 = v->d2 = v->d3 = v->d4 = 0.0f;
 80203b4:	66dc      	str	r4, [r3, #108]	; 0x6c
 80203b6:	669c      	str	r4, [r3, #104]	; 0x68
 80203b8:	665c      	str	r4, [r3, #100]	; 0x64
 80203ba:	661c      	str	r4, [r3, #96]	; 0x60
 80203bc:	65dc      	str	r4, [r3, #92]	; 0x5c
    for (int32_t i = 0; i < v->bufsize; i++)
 80203be:	dd12      	ble.n	80203e6 <tTalkboxFloat_initToPool+0xf2>
 80203c0:	4629      	mov	r1, r5
    {
        v->buf0[i] = 0;
 80203c2:	4622      	mov	r2, r4
 80203c4:	0088      	lsls	r0, r1, #2
 80203c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    for (int32_t i = 0; i < v->bufsize; i++)
 80203c8:	3101      	adds	r1, #1
        v->buf0[i] = 0;
 80203ca:	4404      	add	r4, r0
 80203cc:	6022      	str	r2, [r4, #0]
        v->buf1[i] = 0;
 80203ce:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80203d0:	4404      	add	r4, r0
 80203d2:	6022      	str	r2, [r4, #0]
        v->car0[i] = 0;
 80203d4:	699c      	ldr	r4, [r3, #24]
 80203d6:	4404      	add	r4, r0
 80203d8:	6022      	str	r2, [r4, #0]
        v->car1[i] = 0;
 80203da:	69dc      	ldr	r4, [r3, #28]
 80203dc:	4420      	add	r0, r4
 80203de:	6002      	str	r2, [r0, #0]
    for (int32_t i = 0; i < v->bufsize; i++)
 80203e0:	6958      	ldr	r0, [r3, #20]
 80203e2:	4281      	cmp	r1, r0
 80203e4:	dbee      	blt.n	80203c4 <tTalkboxFloat_initToPool+0xd0>
}
 80203e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80203ea:	bf00      	nop

080203ec <tTalkboxFloat_warpedAutocorrelate>:

// warped autocorrelation adapted from ten.enegatum@liam's post on music-dsp 2004-04-07 09:37:51
//find the order-P autocorrelation array, R, for the sequence x of length L and warping of lambda
//wAutocorrelate(&pfSrc[stIndex],siglen,R,P,0);
void tTalkboxFloat_warpedAutocorrelate(float * x, float* dl, float* Rt, unsigned int L, float * R, unsigned int P, float lambda)
{
 80203ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    float r1,r2,r1t;
    R[0]=0;
 80203f0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80204c4 <tTalkboxFloat_warpedAutocorrelate+0xd8>
{
 80203f4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80203f8:	9d08      	ldr	r5, [sp, #32]
    R[0]=0;
 80203fa:	ed8e 7a00 	vstr	s14, [lr]
    Rt[0]=0;
 80203fe:	ed82 7a00 	vstr	s14, [r2]
    r1=0;
    r2=0;
    r1t=0;
    for(uint32_t m=0; m<L;m++)
 8020402:	b1f3      	cbz	r3, 8020442 <tTalkboxFloat_warpedAutocorrelate+0x56>
 8020404:	4604      	mov	r4, r0
 8020406:	460e      	mov	r6, r1
 8020408:	eb00 0783 	add.w	r7, r0, r3, lsl #2
    r2=0;
 802040c:	eef0 7a47 	vmov.f32	s15, s14
    r1=0;
 8020410:	eeb0 6a47 	vmov.f32	s12, s14
 8020414:	e001      	b.n	802041a <tTalkboxFloat_warpedAutocorrelate+0x2e>
 8020416:	ed92 7a00 	vldr	s14, [r2]
    {
                    Rt[0] += (x[m]) * (x[m]);
 802041a:	edd4 6a00 	vldr	s13, [r4]
 802041e:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8020422:	ed82 7a00 	vstr	s14, [r2]

                    dl[m]= r1 - lambda * (x[m]-r2);
 8020426:	ecb4 7a01 	vldmia	r4!, {s14}
 802042a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    for(uint32_t m=0; m<L;m++)
 802042e:	42bc      	cmp	r4, r7
                    dl[m]= r1 - lambda * (x[m]-r2);
 8020430:	eea7 6a80 	vfma.f32	s12, s15, s0
 8020434:	eef0 7a46 	vmov.f32	s15, s12
 8020438:	eca6 6a01 	vstmia	r6!, {s12}
                    r1 = x[m];
 802043c:	ed14 6a01 	vldr	s12, [r4, #-4]
    for(uint32_t m=0; m<L;m++)
 8020440:	d1e9      	bne.n	8020416 <tTalkboxFloat_warpedAutocorrelate+0x2a>
                    r2 = dl[m];
    }
    for(uint32_t i=1; i<=P; i++)
 8020442:	b3d5      	cbz	r5, 80204ba <tTalkboxFloat_warpedAutocorrelate+0xce>
 8020444:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8020448:	4694      	mov	ip, r2
 802044a:	1d15      	adds	r5, r2, #4
 802044c:	eb01 0783 	add.w	r7, r1, r3, lsl #2
 8020450:	f108 0804 	add.w	r8, r8, #4
    {
            Rt[i]=0;
 8020454:	ed9f 5a1b 	vldr	s10, [pc, #108]	; 80204c4 <tTalkboxFloat_warpedAutocorrelate+0xd8>
 8020458:	eb02 0908 	add.w	r9, r2, r8
 802045c:	eca5 5a01 	vstmia	r5!, {s10}
            r1=0;
            r2=0;
            for(unsigned int m=0; m<L;m++)
 8020460:	b303      	cbz	r3, 80204a4 <tTalkboxFloat_warpedAutocorrelate+0xb8>
 8020462:	4606      	mov	r6, r0
 8020464:	460c      	mov	r4, r1
 8020466:	eeb0 7a45 	vmov.f32	s14, s10
            r2=0;
 802046a:	eef0 7a45 	vmov.f32	s15, s10
            r1=0;
 802046e:	eef0 6a45 	vmov.f32	s13, s10
 8020472:	e001      	b.n	8020478 <tTalkboxFloat_warpedAutocorrelate+0x8c>
 8020474:	ed15 7a01 	vldr	s14, [r5, #-4]
            {
                    Rt[i] +=  (dl[m]) * (x[m]);
 8020478:	edd4 5a00 	vldr	s11, [r4]
 802047c:	ecb6 6a01 	vldmia	r6!, {s12}
 8020480:	eea5 7a86 	vfma.f32	s14, s11, s12
 8020484:	ed05 7a01 	vstr	s14, [r5, #-4]

                    r1t = dl[m];
 8020488:	ecb4 7a01 	vldmia	r4!, {s14}
                    dl[m]= r1 - lambda * (r1t-r2);
 802048c:	ee77 7ac7 	vsub.f32	s15, s15, s14
            for(unsigned int m=0; m<L;m++)
 8020490:	42a7      	cmp	r7, r4
                    dl[m]= r1 - lambda * (r1t-r2);
 8020492:	eee7 6a80 	vfma.f32	s13, s15, s0
 8020496:	eef0 7a66 	vmov.f32	s15, s13
                    r1 = r1t;
 802049a:	eef0 6a47 	vmov.f32	s13, s14
                    dl[m]= r1 - lambda * (r1t-r2);
 802049e:	ed44 7a01 	vstr	s15, [r4, #-4]
            for(unsigned int m=0; m<L;m++)
 80204a2:	d1e7      	bne.n	8020474 <tTalkboxFloat_warpedAutocorrelate+0x88>
    for(uint32_t i=1; i<=P; i++)
 80204a4:	45a9      	cmp	r9, r5
 80204a6:	d1d9      	bne.n	802045c <tTalkboxFloat_warpedAutocorrelate+0x70>
 80204a8:	4442      	add	r2, r8
                    r2 = dl[m];
            }
    }
    for(uint32_t i=0; i<=P; i++)
    {
            R[i]=Rt[i];
 80204aa:	f85c 3b04 	ldr.w	r3, [ip], #4
    for(uint32_t i=0; i<=P; i++)
 80204ae:	4562      	cmp	r2, ip
            R[i]=Rt[i];
 80204b0:	f84e 3b04 	str.w	r3, [lr], #4
    for(uint32_t i=0; i<=P; i++)
 80204b4:	d1f9      	bne.n	80204aa <tTalkboxFloat_warpedAutocorrelate+0xbe>
    }

}
 80204b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            R[i]=Rt[i];
 80204ba:	6813      	ldr	r3, [r2, #0]
 80204bc:	f8ce 3000 	str.w	r3, [lr]
}
 80204c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80204c4:	00000000 	.word	0x00000000

080204c8 <tTalkboxFloat_lpc>:
    return o;
}


void tTalkboxFloat_lpc(float *buf, float *car, float* dl, float* Rt, int32_t n, int32_t o, float warp, int warpOn, float *k, int freeze, float *G)
{
 80204c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204cc:	ed2d 8b02 	vpush	{d8}
 80204d0:	b0c9      	sub	sp, #292	; 0x124
 80204d2:	4604      	mov	r4, r0
 80204d4:	468b      	mov	fp, r1
 80204d6:	9f56      	ldr	r7, [sp, #344]	; 0x158
 80204d8:	9d54      	ldr	r5, [sp, #336]	; 0x150
 80204da:	9e55      	ldr	r6, [sp, #340]	; 0x154
 80204dc:	f8dd 8164 	ldr.w	r8, [sp, #356]	; 0x164
    float z[ORD_MAX], r[ORD_MAX], x;
    int32_t i, j, nn=n;


	if (warpOn == 0)
 80204e0:	2f00      	cmp	r7, #0
 80204e2:	d03a      	beq.n	802055a <tTalkboxFloat_lpc+0x92>
			for(i=0; i<nn; i++) r[j] += buf[i] * buf[i+j]; //autocorrelation
		}
	}
	else
	{
		for(j=0; j<=o; j++, nn--)  //buf[] is already emphasized and windowed
 80204e4:	2e00      	cmp	r6, #0
 80204e6:	4692      	mov	sl, r2
 80204e8:	eeb0 8a40 	vmov.f32	s16, s0
 80204ec:	f2c0 80b7 	blt.w	802065e <tTalkboxFloat_lpc+0x196>
		{
			z[j] = r[j] = 0.0f;
 80204f0:	1c77      	adds	r7, r6, #1
 80204f2:	a826      	add	r0, sp, #152	; 0x98
 80204f4:	2100      	movs	r1, #0
 80204f6:	9303      	str	r3, [sp, #12]
 80204f8:	00bf      	lsls	r7, r7, #2
 80204fa:	9002      	str	r0, [sp, #8]
 80204fc:	463a      	mov	r2, r7
 80204fe:	f006 fcdc 	bl	8026eba <memset>
 8020502:	463a      	mov	r2, r7
 8020504:	2100      	movs	r1, #0
 8020506:	a804      	add	r0, sp, #16
 8020508:	f006 fcd7 	bl	8026eba <memset>
 802050c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
		}
		tTalkboxFloat_warpedAutocorrelate(buf, dl, Rt, n, r, o, warp);
 8020510:	9200      	str	r2, [sp, #0]
 8020512:	eeb0 0a48 	vmov.f32	s0, s16
 8020516:	461a      	mov	r2, r3
 8020518:	9601      	str	r6, [sp, #4]
 802051a:	4651      	mov	r1, sl
 802051c:	462b      	mov	r3, r5
 802051e:	4620      	mov	r0, r4
 8020520:	f7ff ff64 	bl	80203ec <tTalkboxFloat_warpedAutocorrelate>
	}

	r[0] *= 1.001f;  //stability fix
 8020524:	eddd 7a26 	vldr	s15, [sp, #152]	; 0x98
 8020528:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8020664 <tTalkboxFloat_lpc+0x19c>

	float min = 0.000001f;
	if (!freeze)
 802052c:	9b58      	ldr	r3, [sp, #352]	; 0x160
	r[0] *= 1.001f;  //stability fix
 802052e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020532:	edcd 7a26 	vstr	s15, [sp, #152]	; 0x98
	if (!freeze)
 8020536:	2b00      	cmp	r3, #0
 8020538:	d13f      	bne.n	80205ba <tTalkboxFloat_lpc+0xf2>
	{
		if(r[0] < min)
 802053a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8020668 <tTalkboxFloat_lpc+0x1a0>
 802053e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020546:	d566      	bpl.n	8020616 <tTalkboxFloat_lpc+0x14e>
		{
//            for(i=0; i<n; i++)
//            {
				buf[i] = 0.0f;
 8020548:	eb04 0489 	add.w	r4, r4, r9, lsl #2
 802054c:	2300      	movs	r3, #0
 802054e:	6023      	str	r3, [r4, #0]
            x -= k[j] * z[j-1];
            z[j] = z[j-1] + k[j] * x;
        }
        buf[i] = z[0] = x;  //output buf[] will be windowed elsewhere
    }
}
 8020550:	b049      	add	sp, #292	; 0x124
 8020552:	ecbd 8b02 	vpop	{d8}
 8020556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(j=0; j<=o; j++, nn--)  //buf[] is already emphasized and windowed
 802055a:	2e00      	cmp	r6, #0
 802055c:	dbe2      	blt.n	8020524 <tTalkboxFloat_lpc+0x5c>
 802055e:	4629      	mov	r1, r5
			z[j] = r[j] = 0.0f;
 8020560:	f04f 0a00 	mov.w	sl, #0
 8020564:	ea6f 0e06 	mvn.w	lr, r6
 8020568:	af26      	add	r7, sp, #152	; 0x98
 802056a:	f10d 0c10 	add.w	ip, sp, #16
			for(i=0; i<nn; i++) r[j] += buf[i] * buf[i+j]; //autocorrelation
 802056e:	2900      	cmp	r1, #0
 8020570:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8020574:	44ae      	add	lr, r5
			z[j] = r[j] = 0.0f;
 8020576:	f847 ab04 	str.w	sl, [r7], #4
 802057a:	f84c ab04 	str.w	sl, [ip], #4
			for(i=0; i<nn; i++) r[j] += buf[i] * buf[i+j]; //autocorrelation
 802057e:	dd19      	ble.n	80205b4 <tTalkboxFloat_lpc+0xec>
 8020580:	4681      	mov	r9, r0
 8020582:	4623      	mov	r3, r4
 8020584:	eddf 7a39 	vldr	s15, [pc, #228]	; 802066c <tTalkboxFloat_lpc+0x1a4>
 8020588:	ecf3 6a01 	vldmia	r3!, {s13}
 802058c:	ecb9 7a01 	vldmia	r9!, {s14}
 8020590:	429a      	cmp	r2, r3
 8020592:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020596:	d1f7      	bne.n	8020588 <tTalkboxFloat_lpc+0xc0>
 8020598:	4689      	mov	r9, r1
 802059a:	ed47 7a01 	vstr	s15, [r7, #-4]
		for(j=0; j<=o; j++, nn--)  //buf[] is already emphasized and windowed
 802059e:	3901      	subs	r1, #1
 80205a0:	3004      	adds	r0, #4
 80205a2:	3a04      	subs	r2, #4
 80205a4:	458e      	cmp	lr, r1
 80205a6:	d0bd      	beq.n	8020524 <tTalkboxFloat_lpc+0x5c>
			for(i=0; i<nn; i++) r[j] += buf[i] * buf[i+j]; //autocorrelation
 80205a8:	2900      	cmp	r1, #0
			z[j] = r[j] = 0.0f;
 80205aa:	f847 ab04 	str.w	sl, [r7], #4
 80205ae:	f84c ab04 	str.w	sl, [ip], #4
			for(i=0; i<nn; i++) r[j] += buf[i] * buf[i+j]; //autocorrelation
 80205b2:	dce5      	bgt.n	8020580 <tTalkboxFloat_lpc+0xb8>
 80205b4:	f04f 0900 	mov.w	r9, #0
 80205b8:	e7f1      	b.n	802059e <tTalkboxFloat_lpc+0xd6>
    for(i=0; i<n; i++)
 80205ba:	2d00      	cmp	r5, #0
 80205bc:	ddc8      	ble.n	8020550 <tTalkboxFloat_lpc+0x88>
 80205be:	1c77      	adds	r7, r6, #1
 80205c0:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 80205c2:	4658      	mov	r0, fp
 80205c4:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 80205c8:	00bf      	lsls	r7, r7, #2
 80205ca:	1d19      	adds	r1, r3, #4
 80205cc:	eb03 0c07 	add.w	ip, r3, r7
 80205d0:	ab04      	add	r3, sp, #16
 80205d2:	441f      	add	r7, r3
        x = G[0] * car[i];
 80205d4:	ecb0 7a01 	vldmia	r0!, {s14}
        for(j=o; j>0; j--)  //lattice filter
 80205d8:	2e00      	cmp	r6, #0
        x = G[0] * car[i];
 80205da:	edd8 7a00 	vldr	s15, [r8]
 80205de:	ee27 7a27 	vmul.f32	s14, s14, s15
        for(j=o; j>0; j--)  //lattice filter
 80205e2:	dd0d      	ble.n	8020600 <tTalkboxFloat_lpc+0x138>
 80205e4:	463a      	mov	r2, r7
 80205e6:	4663      	mov	r3, ip
            x -= k[j] * z[j-1];
 80205e8:	ed73 6a01 	vldmdb	r3!, {s13}
 80205ec:	ed52 7a02 	vldr	s15, [r2, #-8]
        for(j=o; j>0; j--)  //lattice filter
 80205f0:	4299      	cmp	r1, r3
            x -= k[j] * z[j-1];
 80205f2:	eea6 7ae7 	vfms.f32	s14, s13, s15
            z[j] = z[j-1] + k[j] * x;
 80205f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80205fa:	ed62 7a01 	vstmdb	r2!, {s15}
        for(j=o; j>0; j--)  //lattice filter
 80205fe:	d1f3      	bne.n	80205e8 <tTalkboxFloat_lpc+0x120>
    for(i=0; i<n; i++)
 8020600:	4285      	cmp	r5, r0
        buf[i] = z[0] = x;  //output buf[] will be windowed elsewhere
 8020602:	ed8d 7a04 	vstr	s14, [sp, #16]
 8020606:	eca4 7a01 	vstmia	r4!, {s14}
    for(i=0; i<n; i++)
 802060a:	d1e3      	bne.n	80205d4 <tTalkboxFloat_lpc+0x10c>
}
 802060c:	b049      	add	sp, #292	; 0x124
 802060e:	ecbd 8b02 	vpop	{d8}
 8020612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tTalkbox_lpcDurbin(r, o, k, G);  //calc reflection coeffs
 8020616:	4643      	mov	r3, r8
 8020618:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 802061a:	4631      	mov	r1, r6
 802061c:	a826      	add	r0, sp, #152	; 0x98
 802061e:	f7ff fd2b 	bl	8020078 <tTalkbox_lpcDurbin>
		for(i=0; i<=o; i++)
 8020622:	2e00      	cmp	r6, #0
 8020624:	dbc9      	blt.n	80205ba <tTalkboxFloat_lpc+0xf2>
 8020626:	9b57      	ldr	r3, [sp, #348]	; 0x15c
			if(k[i] > 0.998f) k[i] = 0.998f; else if(k[i] < -0.998f) k[i] = -.998f;
 8020628:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8020670 <tTalkboxFloat_lpc+0x1a8>
 802062c:	1d1a      	adds	r2, r3, #4
 802062e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8020674 <tTalkboxFloat_lpc+0x1ac>
 8020632:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8020636:	e003      	b.n	8020640 <tTalkboxFloat_lpc+0x178>
 8020638:	ed03 7a01 	vstr	s14, [r3, #-4]
		for(i=0; i<=o; i++)
 802063c:	429a      	cmp	r2, r3
 802063e:	d0bc      	beq.n	80205ba <tTalkboxFloat_lpc+0xf2>
			if(k[i] > 0.998f) k[i] = 0.998f; else if(k[i] < -0.998f) k[i] = -.998f;
 8020640:	ecf3 7a01 	vldmia	r3!, {s15}
 8020644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802064c:	dcf4      	bgt.n	8020638 <tTalkboxFloat_lpc+0x170>
 802064e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8020652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020656:	bf48      	it	mi
 8020658:	ed43 6a01 	vstrmi	s13, [r3, #-4]
 802065c:	e7ee      	b.n	802063c <tTalkboxFloat_lpc+0x174>
 802065e:	aa26      	add	r2, sp, #152	; 0x98
 8020660:	9202      	str	r2, [sp, #8]
 8020662:	e755      	b.n	8020510 <tTalkboxFloat_lpc+0x48>
 8020664:	3f8020c5 	.word	0x3f8020c5
 8020668:	358637bd 	.word	0x358637bd
 802066c:	00000000 	.word	0x00000000
 8020670:	3f7f7cee 	.word	0x3f7f7cee
 8020674:	bf7f7cee 	.word	0xbf7f7cee

08020678 <tTalkboxFloat_tick>:
{
 8020678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802067c:	ed2d 8b04 	vpush	{d8-d9}
    _tTalkboxFloat* v = *voc;
 8020680:	6804      	ldr	r4, [r0, #0]
    p = v->d0 + h0 *  x; v->d0 = v->d1;  v->d1 = x  - h0 * p;
 8020682:	eeb0 5a40 	vmov.f32	s10, s0
    q = v->d2 + h1 * v->d4; v->d2 = v->d3;  v->d3 = v->d4 - h1 * q;
 8020686:	eddf 6a62 	vldr	s13, [pc, #392]	; 8020810 <tTalkboxFloat_tick+0x198>
{
 802068a:	b086      	sub	sp, #24
    q = v->d2 + h1 * v->d4; v->d2 = v->d3;  v->d3 = v->d4 - h1 * q;
 802068c:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
    p = v->d0 + h0 *  x; v->d0 = v->d1;  v->d1 = x  - h0 * p;
 8020690:	eddf 5a60 	vldr	s11, [pc, #384]	; 8020814 <tTalkboxFloat_tick+0x19c>
 8020694:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
    q = v->d2 + h1 * v->d4; v->d2 = v->d3;  v->d3 = v->d4 - h1 * q;
 8020698:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
    p = v->d0 + h0 *  x; v->d0 = v->d1;  v->d1 = x  - h0 * p;
 802069c:	eee0 7a25 	vfma.f32	s15, s0, s11
    q = v->d2 + h1 * v->d4; v->d2 = v->d3;  v->d3 = v->d4 - h1 * q;
 80206a0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80206a2:	eea7 6a26 	vfma.f32	s12, s14, s13
    p = v->d0 + h0 *  x; v->d0 = v->d1;  v->d1 = x  - h0 * p;
 80206a6:	6e21      	ldr	r1, [r4, #96]	; 0x60
    if(v->K++)
 80206a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
    q = v->d2 + h1 * v->d4; v->d2 = v->d3;  v->d3 = v->d4 - h1 * q;
 80206aa:	6663      	str	r3, [r4, #100]	; 0x64
    p = v->d0 + h0 *  x; v->d0 = v->d1;  v->d1 = x  - h0 * p;
 80206ac:	65e1      	str	r1, [r4, #92]	; 0x5c
    v->d4 = x;
 80206ae:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
    p = v->d0 + h0 *  x; v->d0 = v->d1;  v->d1 = x  - h0 * p;
 80206b2:	eea7 5ae5 	vfms.f32	s10, s15, s11
    int32_t  p0=v->pos, p1 = (v->pos + v->N/2) % v->N;
 80206b6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    q = v->d2 + h1 * v->d4; v->d2 = v->d3;  v->d3 = v->d4 - h1 * q;
 80206b8:	eea6 7a66 	vfms.f32	s14, s12, s13
    int32_t  p0=v->pos, p1 = (v->pos + v->N/2) % v->N;
 80206bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    float e=v->emphasis, w, o, x, fx=v->FX;
 80206be:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 80206c2:	ed94 8a16 	vldr	s16, [r4, #88]	; 0x58
    p = v->d0 + h0 *  x; v->d0 = v->d1;  v->d1 = x  - h0 * p;
 80206c6:	ed84 5a18 	vstr	s10, [r4, #96]	; 0x60
    q = v->d2 + h1 * v->d4; v->d2 = v->d3;  v->d3 = v->d4 - h1 * q;
 80206ca:	ed84 7a1a 	vstr	s14, [r4, #104]	; 0x68
    if(v->K++)
 80206ce:	2a00      	cmp	r2, #0
 80206d0:	d06b      	beq.n	80207aa <tTalkboxFloat_tick+0x132>
    int32_t  p0=v->pos, p1 = (v->pos + v->N/2) % v->N;
 80206d2:	2b00      	cmp	r3, #0
 80206d4:	461e      	mov	r6, r3
        v->car0[p0] = v->car1[p1] = x; //carrier input
 80206d6:	69e0      	ldr	r0, [r4, #28]
    x = p + q;
 80206d8:	ee77 7a86 	vadd.f32	s15, s15, s12
    int32_t  p0=v->pos, p1 = (v->pos + v->N/2) % v->N;
 80206dc:	bfb8      	it	lt
 80206de:	1c5e      	addlt	r6, r3, #1
        v->K = 0;
 80206e0:	2700      	movs	r7, #0
        v->car0[p0] = v->car1[p1] = x; //carrier input
 80206e2:	00a9      	lsls	r1, r5, #2
        x = o - e;  e = o;  //6dB/oct pre-emphasis
 80206e4:	ee70 8ae6 	vsub.f32	s17, s1, s13
    int32_t  p0=v->pos, p1 = (v->pos + v->N/2) % v->N;
 80206e8:	eb05 0266 	add.w	r2, r5, r6, asr #1
        v->K = 0;
 80206ec:	6427      	str	r7, [r4, #64]	; 0x40
        if(++p0 >= v->N) { tTalkboxFloat_lpc(v->buf0, v->car0, v->dl, v->Rt, v->N, v->O, v->warpFactor, v->warpOn, v->k, v->freeze, &v->G);  p0 = 0; }
 80206ee:	3501      	adds	r5, #1
 80206f0:	eeb0 9a60 	vmov.f32	s18, s1
    int32_t  p0=v->pos, p1 = (v->pos + v->N/2) % v->N;
 80206f4:	fb92 f6f3 	sdiv	r6, r2, r3
 80206f8:	fb03 2616 	mls	r6, r3, r6, r2
        v->car0[p0] = v->car1[p1] = x; //carrier input
 80206fc:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8020700:	4440      	add	r0, r8
 8020702:	edc0 7a00 	vstr	s15, [r0]
 8020706:	69a3      	ldr	r3, [r4, #24]
 8020708:	440b      	add	r3, r1
 802070a:	edc3 7a00 	vstr	s15, [r3]
        w = v->window[p0]; fx = v->buf0[p0] * w;  v->buf0[p0] = x * w;  //50% overlapping hanning windows
 802070e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8020712:	440a      	add	r2, r1
 8020714:	440b      	add	r3, r1
 8020716:	edd2 9a00 	vldr	s19, [r2]
 802071a:	ed93 8a00 	vldr	s16, [r3]
 802071e:	ee68 7aa9 	vmul.f32	s15, s17, s19
 8020722:	ee29 8a88 	vmul.f32	s16, s19, s16
 8020726:	edc3 7a00 	vstr	s15, [r3]
        if(++p0 >= v->N) { tTalkboxFloat_lpc(v->buf0, v->car0, v->dl, v->Rt, v->N, v->O, v->warpFactor, v->warpOn, v->k, v->freeze, &v->G);  p0 = 0; }
 802072a:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 802072e:	45ac      	cmp	ip, r5
 8020730:	dd55      	ble.n	80207de <tTalkboxFloat_tick+0x166>
        w = 1.0f - w;  fx += v->buf1[p1] * w;  v->buf1[p1] = x * w;
 8020732:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8020736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        if(++p1 >= v->N) { tTalkboxFloat_lpc(v->buf1, v->car1, v->dl, v->Rt, v->N, v->O, v->warpFactor, v->warpOn, v->k, v->freeze, &v->G);  p1 = 0; }
 8020738:	3601      	adds	r6, #1
        w = 1.0f - w;  fx += v->buf1[p1] * w;  v->buf1[p1] = x * w;
 802073a:	4498      	add	r8, r3
 802073c:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8020740:	ed98 7a00 	vldr	s14, [r8]
 8020744:	ee68 6aa7 	vmul.f32	s13, s17, s15
 8020748:	eea7 8a27 	vfma.f32	s16, s14, s15
 802074c:	edc8 6a00 	vstr	s13, [r8]
        if(++p1 >= v->N) { tTalkboxFloat_lpc(v->buf1, v->car1, v->dl, v->Rt, v->N, v->O, v->warpFactor, v->warpOn, v->k, v->freeze, &v->G);  p1 = 0; }
 8020750:	6c67      	ldr	r7, [r4, #68]	; 0x44
 8020752:	42b7      	cmp	r7, r6
 8020754:	dd2e      	ble.n	80207b4 <tTalkboxFloat_tick+0x13c>
    q = v->u2 + h1 * v->u4; v->u2 = v->u3;  v->u3 = v->u4 - h1 * q;
 8020756:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
    p = v->u0 + h0 * fx; v->u0 = v->u1;  v->u1 = fx - h0 * p;
 802075a:	eef0 5a48 	vmov.f32	s11, s16
 802075e:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8020814 <tTalkboxFloat_tick+0x19c>
 8020762:	ed94 0a1c 	vldr	s0, [r4, #112]	; 0x70
    q = v->u2 + h1 * v->u4; v->u2 = v->u3;  v->u3 = v->u4 - h1 * q;
 8020766:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8020810 <tTalkboxFloat_tick+0x198>
 802076a:	ed94 7a1e 	vldr	s14, [r4, #120]	; 0x78
    p = v->u0 + h0 * fx; v->u0 = v->u1;  v->u1 = fx - h0 * p;
 802076e:	eea8 0a06 	vfma.f32	s0, s16, s12
 8020772:	6f62      	ldr	r2, [r4, #116]	; 0x74
    q = v->u2 + h1 * v->u4; v->u2 = v->u3;  v->u3 = v->u4 - h1 * q;
 8020774:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8020778:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    v->emphasis = e;
 802077a:	ed84 9a0f 	vstr	s18, [r4, #60]	; 0x3c
    v->pos = p0;
 802077e:	64e5      	str	r5, [r4, #76]	; 0x4c
    v->FX = fx;
 8020780:	ed84 8a16 	vstr	s16, [r4, #88]	; 0x58
    p = v->u0 + h0 * fx; v->u0 = v->u1;  v->u1 = fx - h0 * p;
 8020784:	eee0 5a46 	vfms.f32	s11, s0, s12
 8020788:	6722      	str	r2, [r4, #112]	; 0x70
    v->u4 = fx;
 802078a:	ed84 8a20 	vstr	s16, [r4, #128]	; 0x80
    q = v->u2 + h1 * v->u4; v->u2 = v->u3;  v->u3 = v->u4 - h1 * q;
 802078e:	eee7 7a66 	vfms.f32	s15, s14, s13
 8020792:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8020794:	ee30 0a07 	vadd.f32	s0, s0, s14
    p = v->u0 + h0 * fx; v->u0 = v->u1;  v->u1 = fx - h0 * p;
 8020798:	edc4 5a1d 	vstr	s11, [r4, #116]	; 0x74
    q = v->u2 + h1 * v->u4; v->u2 = v->u3;  v->u3 = v->u4 - h1 * q;
 802079c:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
}
 80207a0:	b006      	add	sp, #24
 80207a2:	ecbd 8b04 	vpop	{d8-d9}
 80207a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(v->K++)
 80207aa:	2301      	movs	r3, #1
    float e=v->emphasis, w, o, x, fx=v->FX;
 80207ac:	eeb0 9a66 	vmov.f32	s18, s13
    if(v->K++)
 80207b0:	6423      	str	r3, [r4, #64]	; 0x40
 80207b2:	e7d0      	b.n	8020756 <tTalkboxFloat_tick+0xde>
        if(++p1 >= v->N) { tTalkboxFloat_lpc(v->buf1, v->car1, v->dl, v->Rt, v->N, v->O, v->warpFactor, v->warpOn, v->k, v->freeze, &v->G);  p1 = 0; }
 80207b4:	f104 0684 	add.w	r6, r4, #132	; 0x84
 80207b8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80207bc:	69e1      	ldr	r1, [r4, #28]
 80207be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80207c0:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
 80207c4:	9605      	str	r6, [sp, #20]
 80207c6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80207c8:	9604      	str	r6, [sp, #16]
 80207ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80207cc:	9603      	str	r6, [sp, #12]
 80207ce:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80207d0:	9602      	str	r6, [sp, #8]
 80207d2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80207d4:	e9cd 7600 	strd	r7, r6, [sp]
 80207d8:	f7ff fe76 	bl	80204c8 <tTalkboxFloat_lpc>
 80207dc:	e7bb      	b.n	8020756 <tTalkboxFloat_tick+0xde>
        if(++p0 >= v->N) { tTalkboxFloat_lpc(v->buf0, v->car0, v->dl, v->Rt, v->N, v->O, v->warpFactor, v->warpOn, v->k, v->freeze, &v->G);  p0 = 0; }
 80207de:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 80207e2:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80207e6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80207ea:	463d      	mov	r5, r7
 80207ec:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80207f0:	69a1      	ldr	r1, [r4, #24]
 80207f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80207f4:	f8cd e014 	str.w	lr, [sp, #20]
 80207f8:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80207fa:	9704      	str	r7, [sp, #16]
 80207fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80207fe:	9703      	str	r7, [sp, #12]
 8020800:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8020802:	9702      	str	r7, [sp, #8]
 8020804:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8020806:	e9cd c700 	strd	ip, r7, [sp]
 802080a:	f7ff fe5d 	bl	80204c8 <tTalkboxFloat_lpc>
 802080e:	e790      	b.n	8020732 <tTalkboxFloat_tick+0xba>
 8020810:	3f451eb8 	.word	0x3f451eb8
 8020814:	3e99999a 	.word	0x3e99999a

08020818 <tTalkboxFloat_setQuality>:

void tTalkboxFloat_setQuality(tTalkboxFloat* const voc, float quality)
{
    _tTalkboxFloat* v = *voc;
    v->param[3] = quality;
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * leaf.sampleRate);
 8020818:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8020848 <tTalkboxFloat_setQuality+0x30>
 802081c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 802084c <tTalkboxFloat_setQuality+0x34>
 8020820:	4b0b      	ldr	r3, [pc, #44]	; (8020850 <tTalkboxFloat_setQuality+0x38>)
 8020822:	eee0 7a07 	vfma.f32	s15, s0, s14
    _tTalkboxFloat* v = *voc;
 8020826:	6802      	ldr	r2, [r0, #0]
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * leaf.sampleRate);
 8020828:	ed93 7a00 	vldr	s14, [r3]
    v->param[3] = quality;
 802082c:	ed82 0a04 	vstr	s0, [r2, #16]
    v->O = (int32_t)((0.0001f + 0.0004f * v->param[3]) * leaf.sampleRate);
 8020830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020838:	ee17 3a90 	vmov	r3, s15
    if (v->O >= ORD_MAX)
 802083c:	2b21      	cmp	r3, #33	; 0x21
    {
    	v->O = ORD_MAX-1;
 802083e:	bfc8      	it	gt
 8020840:	2321      	movgt	r3, #33	; 0x21
 8020842:	6493      	str	r3, [r2, #72]	; 0x48
    }
}
 8020844:	4770      	bx	lr
 8020846:	bf00      	nop
 8020848:	39d1b717 	.word	0x39d1b717
 802084c:	38d1b717 	.word	0x38d1b717
 8020850:	200194e0 	.word	0x200194e0

08020854 <tTalkboxFloat_setWarpFactor>:

void tTalkboxFloat_setWarpFactor(tTalkboxFloat* const voc, float warpFactor)
{
    _tTalkboxFloat* v = *voc;
 8020854:	6803      	ldr	r3, [r0, #0]

    v->warpFactor = warpFactor;
 8020856:	ed83 0a0c 	vstr	s0, [r3, #48]	; 0x30
}
 802085a:	4770      	bx	lr

0802085c <tTalkboxFloat_setWarpOn>:

void tTalkboxFloat_setWarpOn(tTalkboxFloat* const voc, float warpOn)
{
    _tTalkboxFloat* v = *voc;

    v->warpOn = warpOn;
 802085c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tTalkboxFloat* v = *voc;
 8020860:	6803      	ldr	r3, [r0, #0]
    v->warpOn = warpOn;
 8020862:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
 8020866:	4770      	bx	lr

08020868 <tTalkboxFloat_setFreeze>:

void tTalkboxFloat_setFreeze(tTalkboxFloat* const voc, float freeze)
{
    _tTalkboxFloat* v = *voc;

    v->freeze = freeze;
 8020868:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tTalkboxFloat* v = *voc;
 802086c:	6803      	ldr	r3, [r0, #0]
    v->freeze = freeze;
 802086e:	ed83 0a0e 	vstr	s0, [r3, #56]	; 0x38
}
 8020872:	4770      	bx	lr

08020874 <tRosenbergGlottalPulse_initToPool>:
{
    tRosenbergGlottalPulse_initToPool(gp, &leaf.mempool);
}

void tRosenbergGlottalPulse_initToPool (tRosenbergGlottalPulse* const gp, tMempool* const mp)
{
 8020874:	b538      	push	{r3, r4, r5, lr}
     _tMempool* m = *mp;
 8020876:	680c      	ldr	r4, [r1, #0]
{
 8020878:	4605      	mov	r5, r0
    _tRosenbergGlottalPulse* g = *gp = (_tRosenbergGlottalPulse*) mpool_alloc(sizeof(_tRosenbergGlottalPulse), m);
 802087a:	201c      	movs	r0, #28
 802087c:	4621      	mov	r1, r4
 802087e:	f003 fc43 	bl	8024108 <mpool_alloc>
    g->mempool = m;

    g->phase  = 0.0f;
 8020882:	2300      	movs	r3, #0
    _tRosenbergGlottalPulse* g = *gp = (_tRosenbergGlottalPulse*) mpool_alloc(sizeof(_tRosenbergGlottalPulse), m);
 8020884:	6028      	str	r0, [r5, #0]
    g->mempool = m;
 8020886:	6004      	str	r4, [r0, #0]
    g->phase  = 0.0f;
 8020888:	6043      	str	r3, [r0, #4]
    g->openLength = 0.0f;
 802088a:	6083      	str	r3, [r0, #8]
    g->pulseLength = 0.0f;
 802088c:	60c3      	str	r3, [r0, #12]
    g->freq = 0.0f;
 802088e:	6143      	str	r3, [r0, #20]
    g->inc = 0.0f;
 8020890:	6183      	str	r3, [r0, #24]


}
 8020892:	bd38      	pop	{r3, r4, r5, pc}

08020894 <tRosenbergGlottalPulse_free>:
void tRosenbergGlottalPulse_free (tRosenbergGlottalPulse* const gp)
{
    _tRosenbergGlottalPulse* g = *gp;
 8020894:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)g, g->mempool);
 8020896:	6801      	ldr	r1, [r0, #0]
 8020898:	f003 bcde 	b.w	8024258 <mpool_free>

0802089c <tRosenbergGlottalPulse_tick>:
}

float   tRosenbergGlottalPulse_tick           (tRosenbergGlottalPulse* const gp)
{
 802089c:	b508      	push	{r3, lr}
    _tRosenbergGlottalPulse* g = *gp;
 802089e:	6803      	ldr	r3, [r0, #0]

    float output = 0.0f;

    // Phasor increment
    g->phase += g->inc;
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 80208a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    g->phase += g->inc;
 80208a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80208a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80208ac:	ee37 7a27 	vadd.f32	s14, s14, s15
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 80208b0:	eeb4 7ae6 	vcmpe.f32	s14, s13
    g->phase += g->inc;
 80208b4:	ed83 7a01 	vstr	s14, [r3, #4]
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 80208b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208bc:	db51      	blt.n	8020962 <tRosenbergGlottalPulse_tick+0xc6>
 80208be:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80208c2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80208c6:	ee77 7a66 	vsub.f32	s15, s14, s13
 80208ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208ce:	eeb0 7a67 	vmov.f32	s14, s15
 80208d2:	daf6      	bge.n	80208c2 <tRosenbergGlottalPulse_tick+0x26>
 80208d4:	edc3 7a01 	vstr	s15, [r3, #4]
    while (g->phase < 0.0f) g->phase += 1.0f;
 80208d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80208dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208e0:	d53c      	bpl.n	802095c <tRosenbergGlottalPulse_tick+0xc0>
 80208e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80208e6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80208ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80208ee:	ee37 0aa6 	vadd.f32	s0, s15, s13
 80208f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208f6:	eef0 7a40 	vmov.f32	s15, s0
 80208fa:	d4f6      	bmi.n	80208ea <tRosenbergGlottalPulse_tick+0x4e>
 80208fc:	ed83 0a01 	vstr	s0, [r3, #4]

    if (g->phase < g->openLength)
 8020900:	edd3 7a02 	vldr	s15, [r3, #8]
 8020904:	eef4 7ac0 	vcmpe.f32	s15, s0
 8020908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802090c:	dc17      	bgt.n	802093e <tRosenbergGlottalPulse_tick+0xa2>
    {
        output = 0.5f*(1.0f-fastercosf(PI * g->phase));
    }

    else if (g->phase < g->pulseLength)
 802090e:	ed93 7a03 	vldr	s14, [r3, #12]
 8020912:	eeb4 7ac0 	vcmpe.f32	s14, s0
 8020916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802091a:	dc02      	bgt.n	8020922 <tRosenbergGlottalPulse_tick+0x86>
        output = fastercosf(HALF_PI * (g->phase-g->openLength)* g->invPulseLengthMinusOpenLength);
    }

    else
    {
        output = 0.0f;
 802091c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8020968 <tRosenbergGlottalPulse_tick+0xcc>
    }
    return output;
}
 8020920:	bd08      	pop	{r3, pc}
        output = fastercosf(HALF_PI * (g->phase-g->openLength)* g->invPulseLengthMinusOpenLength);
 8020922:	ed93 7a04 	vldr	s14, [r3, #16]
 8020926:	ee30 0a67 	vsub.f32	s0, s0, s15
 802092a:	eddf 7a10 	vldr	s15, [pc, #64]	; 802096c <tRosenbergGlottalPulse_tick+0xd0>
 802092e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8020932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        output = fastercosf(HALF_PI * (g->phase-g->openLength)* g->invPulseLengthMinusOpenLength);
 8020936:	ee27 0a80 	vmul.f32	s0, s15, s0
 802093a:	f003 b8f9 	b.w	8023b30 <fastercosf>
        output = 0.5f*(1.0f-fastercosf(PI * g->phase));
 802093e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8020970 <tRosenbergGlottalPulse_tick+0xd4>
 8020942:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020946:	f003 f8f3 	bl	8023b30 <fastercosf>
 802094a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802094e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8020952:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8020956:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 802095a:	bd08      	pop	{r3, pc}
    while (g->phase < 0.0f) g->phase += 1.0f;
 802095c:	eeb0 0a67 	vmov.f32	s0, s15
 8020960:	e7ce      	b.n	8020900 <tRosenbergGlottalPulse_tick+0x64>
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 8020962:	eef0 7a47 	vmov.f32	s15, s14
 8020966:	e7b7      	b.n	80208d8 <tRosenbergGlottalPulse_tick+0x3c>
 8020968:	00000000 	.word	0x00000000
 802096c:	3fc90fdb 	.word	0x3fc90fdb
 8020970:	40490fdb 	.word	0x40490fdb

08020974 <tRosenbergGlottalPulse_tickHQ>:


float   tRosenbergGlottalPulse_tickHQ           (tRosenbergGlottalPulse* const gp)
{
 8020974:	b508      	push	{r3, lr}
    _tRosenbergGlottalPulse* g = *gp;
 8020976:	6803      	ldr	r3, [r0, #0]

    float output = 0.0f;

    // Phasor increment
    g->phase += g->inc;
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 8020978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    g->phase += g->inc;
 802097c:	ed93 7a01 	vldr	s14, [r3, #4]
 8020980:	edd3 7a06 	vldr	s15, [r3, #24]
 8020984:	ee37 7a27 	vadd.f32	s14, s14, s15
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 8020988:	eeb4 7ae6 	vcmpe.f32	s14, s13
    g->phase += g->inc;
 802098c:	ed83 7a01 	vstr	s14, [r3, #4]
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 8020990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020994:	db4e      	blt.n	8020a34 <tRosenbergGlottalPulse_tickHQ+0xc0>
 8020996:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 802099a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 802099e:	ee77 7a66 	vsub.f32	s15, s14, s13
 80209a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209a6:	eeb0 7a67 	vmov.f32	s14, s15
 80209aa:	daf6      	bge.n	802099a <tRosenbergGlottalPulse_tickHQ+0x26>
    while (g->phase < 0.0f) g->phase += 1.0f;
 80209ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80209b0:	edc3 7a01 	vstr	s15, [r3, #4]
 80209b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209b8:	d543      	bpl.n	8020a42 <tRosenbergGlottalPulse_tickHQ+0xce>
 80209ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80209be:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80209c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80209c6:	ee37 0aa6 	vadd.f32	s0, s15, s13
 80209ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209ce:	eef0 7a40 	vmov.f32	s15, s0
 80209d2:	d4f6      	bmi.n	80209c2 <tRosenbergGlottalPulse_tickHQ+0x4e>
 80209d4:	ed83 0a01 	vstr	s0, [r3, #4]

    if (g->phase < g->openLength)
 80209d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80209dc:	eef4 7ac0 	vcmpe.f32	s15, s0
 80209e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209e4:	dc17      	bgt.n	8020a16 <tRosenbergGlottalPulse_tickHQ+0xa2>
    {
        output = 0.5f*(1.0f-cosf(PI * g->phase));
    }

    else if (g->phase < g->pulseLength)
 80209e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80209ea:	eeb4 7ac0 	vcmpe.f32	s14, s0
 80209ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209f2:	dd0d      	ble.n	8020a10 <tRosenbergGlottalPulse_tickHQ+0x9c>
    {
        output = cosf(HALF_PI * (g->phase-g->openLength)* g->invPulseLengthMinusOpenLength);
 80209f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80209f8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80209fc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8020a48 <tRosenbergGlottalPulse_tickHQ+0xd4>
 8020a00:	ee67 7a27 	vmul.f32	s15, s14, s15
    else
    {
        output = 0.0f;
    }
    return output;
}
 8020a04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        output = cosf(HALF_PI * (g->phase-g->openLength)* g->invPulseLengthMinusOpenLength);
 8020a08:	ee27 0a80 	vmul.f32	s0, s15, s0
 8020a0c:	f006 bb76 	b.w	80270fc <cosf>
        output = 0.0f;
 8020a10:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8020a4c <tRosenbergGlottalPulse_tickHQ+0xd8>
}
 8020a14:	bd08      	pop	{r3, pc}
        output = 0.5f*(1.0f-cosf(PI * g->phase));
 8020a16:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8020a50 <tRosenbergGlottalPulse_tickHQ+0xdc>
 8020a1a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020a1e:	f006 fb6d 	bl	80270fc <cosf>
 8020a22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8020a26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8020a2a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8020a2e:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 8020a32:	bd08      	pop	{r3, pc}
    while (g->phase >= 1.0f) g->phase -= 1.0f;
 8020a34:	eef0 7a47 	vmov.f32	s15, s14
    while (g->phase < 0.0f) g->phase += 1.0f;
 8020a38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a40:	d4bb      	bmi.n	80209ba <tRosenbergGlottalPulse_tickHQ+0x46>
 8020a42:	eeb0 0a67 	vmov.f32	s0, s15
 8020a46:	e7c7      	b.n	80209d8 <tRosenbergGlottalPulse_tickHQ+0x64>
 8020a48:	3fc90fdb 	.word	0x3fc90fdb
 8020a4c:	00000000 	.word	0x00000000
 8020a50:	40490fdb 	.word	0x40490fdb

08020a54 <tRosenbergGlottalPulse_setFreq>:

void   tRosenbergGlottalPulse_setFreq           (tRosenbergGlottalPulse* const gp, float freq)
{
    _tRosenbergGlottalPulse* g = *gp;
    g->freq = freq;
    g->inc = freq * leaf.invSampleRate;
 8020a54:	4a05      	ldr	r2, [pc, #20]	; (8020a6c <tRosenbergGlottalPulse_setFreq+0x18>)
    _tRosenbergGlottalPulse* g = *gp;
 8020a56:	6803      	ldr	r3, [r0, #0]
    g->inc = freq * leaf.invSampleRate;
 8020a58:	edd2 7a01 	vldr	s15, [r2, #4]
    g->freq = freq;
 8020a5c:	ed83 0a05 	vstr	s0, [r3, #20]
    g->inc = freq * leaf.invSampleRate;
 8020a60:	ee27 0a80 	vmul.f32	s0, s15, s0
 8020a64:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8020a68:	4770      	bx	lr
 8020a6a:	bf00      	nop
 8020a6c:	200194e0 	.word	0x200194e0

08020a70 <tRosenbergGlottalPulse_setOpenLength>:

void   tRosenbergGlottalPulse_setOpenLength           (tRosenbergGlottalPulse* const gp, float openLength)
{
    _tRosenbergGlottalPulse* g = *gp;
 8020a70:	6803      	ldr	r3, [r0, #0]
    g->openLength = openLength;
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8020a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020a76:	edd3 7a03 	vldr	s15, [r3, #12]
    g->openLength = openLength;
 8020a7a:	ed83 0a02 	vstr	s0, [r3, #8]
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8020a7e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8020a82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020a86:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8020a8a:	4770      	bx	lr

08020a8c <tRosenbergGlottalPulse_setPulseLength>:

void   tRosenbergGlottalPulse_setPulseLength           (tRosenbergGlottalPulse* const gp, float pulseLength)
{
    _tRosenbergGlottalPulse* g = *gp;
 8020a8c:	6803      	ldr	r3, [r0, #0]
    g->pulseLength = pulseLength;
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8020a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020a92:	edd3 7a02 	vldr	s15, [r3, #8]
    g->pulseLength = pulseLength;
 8020a96:	ed83 0a03 	vstr	s0, [r3, #12]
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8020a9a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8020a9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020aa2:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8020aa6:	4770      	bx	lr

08020aa8 <tRosenbergGlottalPulse_setOpenLengthAndPulseLength>:
void   tRosenbergGlottalPulse_setOpenLengthAndPulseLength           (tRosenbergGlottalPulse* const gp, float openLength, float pulseLength)
{
    _tRosenbergGlottalPulse* g = *gp;
    g->openLength = openLength;
    g->pulseLength = pulseLength;
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8020aa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tRosenbergGlottalPulse* g = *gp;
 8020aac:	6803      	ldr	r3, [r0, #0]
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8020aae:	ee30 7ac0 	vsub.f32	s14, s1, s0
    g->openLength = openLength;
 8020ab2:	ed83 0a02 	vstr	s0, [r3, #8]
    g->pulseLength = pulseLength;
 8020ab6:	edc3 0a03 	vstr	s1, [r3, #12]
    g->invPulseLengthMinusOpenLength = 1.0f / (g->pulseLength - g->openLength);
 8020aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020abe:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8020ac2:	4770      	bx	lr

08020ac4 <tSOLAD_ioSamples>:
    mpool_free((char*)w, w->mempool);
}

// send one block of input samples, receive one block of output samples
void tSOLAD_ioSamples(tSOLAD* const wp, float* in, float* out, int blocksize)
{
 8020ac4:	b4f0      	push	{r4, r5, r6, r7}
 8020ac6:	ed2d 8b02 	vpush	{d8}
    _tSOLAD* w = *wp;
 8020aca:	6800      	ldr	r0, [r0, #0]
    
    int i = w->timeindex;
    int n = w->blocksize = blocksize;
 8020acc:	b29d      	uxth	r5, r3
    int i = w->timeindex;
 8020ace:	8886      	ldrh	r6, [r0, #4]
 8020ad0:	462b      	mov	r3, r5
    int n = w->blocksize = blocksize;
 8020ad2:	80c5      	strh	r5, [r0, #6]
    
    if(!i) w->delaybuf[LOOPSIZE] = in[0];   // copy one sample for interpolation
 8020ad4:	b926      	cbnz	r6, 8020ae0 <tSOLAD_ioSamples+0x1c>
 8020ad6:	6a04      	ldr	r4, [r0, #32]
 8020ad8:	680f      	ldr	r7, [r1, #0]
 8020ada:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
 8020ade:	6027      	str	r7, [r4, #0]
    while(n--) w->delaybuf[i++] = *in++;    // copy one input block to delay buffer
 8020ae0:	b163      	cbz	r3, 8020afc <tSOLAD_ioSamples+0x38>
 8020ae2:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8020ae6:	ebc1 0c86 	rsb	ip, r1, r6, lsl #2
 8020aea:	eb0c 0701 	add.w	r7, ip, r1
 8020aee:	6a03      	ldr	r3, [r0, #32]
 8020af0:	f851 6b04 	ldr.w	r6, [r1], #4
 8020af4:	443b      	add	r3, r7
 8020af6:	428c      	cmp	r4, r1
 8020af8:	601e      	str	r6, [r3, #0]
 8020afa:	d1f6      	bne.n	8020aea <tSOLAD_ioSamples+0x26>
    
    if(w->pitchfactor > 1) pitchup(w, out);
 8020afc:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8020b00:	edd0 6a02 	vldr	s13, [r0, #8]
 8020b04:	8883      	ldrh	r3, [r0, #4]
 8020b06:	edd0 3a04 	vldr	s7, [r0, #16]
 8020b0a:	eef4 6ac2 	vcmpe.f32	s13, s4
 8020b0e:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
 8020b12:	edd0 7a03 	vldr	s15, [r0, #12]
 8020b16:	ee06 1a10 	vmov	s12, r1
 8020b1a:	edd0 5a05 	vldr	s11, [r0, #20]
 8020b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b22:	88c1      	ldrh	r1, [r0, #6]
 8020b24:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8020b28:	ed90 7a07 	vldr	s14, [r0, #28]
 8020b2c:	ed90 3a06 	vldr	s6, [r0, #24]
 8020b30:	f340 80b8 	ble.w	8020ca4 <tSOLAD_ioSamples+0x1e0>
    float xfadelength = w->xfadelength;
    
    float readlagstep = pitchfactor - 1;
    float xfadespeed = pitchfactor * pitchfactor;
    float xfadestep = xfadespeed / xfadelength;
    float limitfactor = (pitchfactor - (float)0.99) / xfadespeed;
 8020b34:	ed9f 5aa1 	vldr	s10, [pc, #644]	; 8020dbc <tSOLAD_ioSamples+0x2f8>
    float xfadespeed = pitchfactor * pitchfactor;
 8020b38:	ee66 1aa6 	vmul.f32	s3, s13, s13
    float readlagstep = pitchfactor - 1;
 8020b3c:	ee36 2ac2 	vsub.f32	s4, s13, s4
    float limitfactor = (pitchfactor - (float)0.99) / xfadespeed;
 8020b40:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8020b44:	ee86 5aa1 	vdiv.f32	s10, s13, s3
    float limit = period * limitfactor;
 8020b48:	ee25 1a23 	vmul.f32	s2, s10, s7
    float readindex, outputsample;
    
    if((readlag > (period + 2 * limit)) & (xfadevalue < 0))
 8020b4c:	ee71 6a01 	vadd.f32	s13, s2, s2
 8020b50:	ee76 4aa3 	vadd.f32	s9, s13, s7
 8020b54:	eef4 4a67 	vcmp.f32	s9, s15
 8020b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b5c:	f140 808a 	bpl.w	8020c74 <tSOLAD_ioSamples+0x1b0>
 8020b60:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8020b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b68:	f140 8084 	bpl.w	8020c74 <tSOLAD_ioSamples+0x1b0>
 8020b6c:	ee77 6ae6 	vsub.f32	s13, s15, s13
    {
        jump = period;                                        // jump forward
 8020b70:	eef0 5a63 	vmov.f32	s11, s7
 8020b74:	e001      	b.n	8020b7a <tSOLAD_ioSamples+0xb6>
        while((jump * 2) < (readlag - 2 * limit)) jump *= 2;  // use available space
 8020b76:	eef0 5a47 	vmov.f32	s11, s14
 8020b7a:	ee35 7aa5 	vadd.f32	s14, s11, s11
 8020b7e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8020b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b86:	d4f6      	bmi.n	8020b76 <tSOLAD_ioSamples+0xb2>
        readlag -= jump;                                      // reduce read pointer lag
        xfadevalue = 1;                                       // start crossfade
        xfadelength = period - 1;
 8020b88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        readlag -= jump;                                      // reduce read pointer lag
 8020b8c:	ee77 7ae5 	vsub.f32	s15, s15, s11
        xfadelength = period - 1;
 8020b90:	ee33 3ac7 	vsub.f32	s6, s7, s14
        xfadestep = xfadespeed / xfadelength;
 8020b94:	eec1 0a83 	vdiv.f32	s1, s3, s6
    }
    
    while(n--)
 8020b98:	1e4c      	subs	r4, r1, #1
 8020b9a:	2900      	cmp	r1, #0
 8020b9c:	d05a      	beq.n	8020c54 <tSOLAD_ioSamples+0x190>
 8020b9e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
            {
                xfadelength = readlag / limitfactor;
                if(xfadelength < 1) xfadelength = 1;
                xfadestep = xfadespeed / xfadelength;
                
                jump = -period;         // jump backward
 8020ba2:	eeb1 8a63 	vneg.f32	s16, s7
 8020ba6:	ee82 0a85 	vdiv.f32	s0, s5, s10
        if(readlag < limit)  // check if read pointer should jump backward...
 8020baa:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8020bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bb2:	dd0b      	ble.n	8020bcc <tSOLAD_ioSamples+0x108>
            if((xfadevalue < 0) | (readlag < 0)) // ...but try not to interrupt crossfade
 8020bb4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
                xfadelength = readlag / limitfactor;
 8020bb8:	ee60 6a27 	vmul.f32	s13, s0, s15
            if((xfadevalue < 0) | (readlag < 0)) // ...but try not to interrupt crossfade
 8020bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bc0:	d465      	bmi.n	8020c8e <tSOLAD_ioSamples+0x1ca>
 8020bc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8020bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bca:	d460      	bmi.n	8020c8e <tSOLAD_ioSamples+0x1ca>
                readlag += period;      // increase read pointer lag
                xfadevalue = 1;         // start crossfade
            }
        }
        
        readindex = refindex - readlag;
 8020bcc:	ee76 6a67 	vsub.f32	s13, s12, s15
        outputsample = read_sample(w, readindex);
 8020bd0:	6a03      	ldr	r3, [r0, #32]
        
        if(xfadevalue > 0)
 8020bd2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
        {
            outputsample *= (1 - xfadevalue);
 8020bd6:	ee72 8ac7 	vsub.f32	s17, s5, s14
            outputsample += read_sample(w, readindex - jump) * xfadevalue;
 8020bda:	ee36 4ae5 	vsub.f32	s8, s13, s11
}

// read one sample from delay buffer, with linear interpolation
static inline float read_sample(_tSOLAD* const w, float floatindex)
{
    int index = (int)floatindex;
 8020bde:	eefd 4ae6 	vcvt.s32.f32	s9, s13
        if(xfadevalue > 0)
 8020be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int index = (int)floatindex;
 8020be6:	eebd 5ac4 	vcvt.s32.f32	s10, s8
    float fraction = floatindex - (float)index;
    float *buf = w->delaybuf;
    index &= LOOPMASK;
 8020bea:	ee14 1a90 	vmov	r1, s9
    float fraction = floatindex - (float)index;
 8020bee:	eef8 4ae4 	vcvt.f32.s32	s9, s9
    index &= LOOPMASK;
 8020bf2:	f3c1 010b 	ubfx	r1, r1, #0, #12
 8020bf6:	ee15 6a10 	vmov	r6, s10
    float fraction = floatindex - (float)index;
 8020bfa:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 8020bfe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    float fraction = floatindex - (float)index;
 8020c02:	ee76 6ae4 	vsub.f32	s13, s13, s9
    index &= LOOPMASK;
 8020c06:	f3c6 060b 	ubfx	r6, r6, #0, #12
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 8020c0a:	edd1 4a00 	vldr	s9, [r1]
    float fraction = floatindex - (float)index;
 8020c0e:	ee34 5a45 	vsub.f32	s10, s8, s10
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 8020c12:	ed91 4a01 	vldr	s8, [r1, #4]
 8020c16:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8020c1a:	ee34 4a64 	vsub.f32	s8, s8, s9
 8020c1e:	eee6 4a84 	vfma.f32	s9, s13, s8
        if(xfadevalue > 0)
 8020c22:	dd2a      	ble.n	8020c7a <tSOLAD_ioSamples+0x1b6>
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 8020c24:	edd3 6a00 	vldr	s13, [r3]
    while(n--)
 8020c28:	3c01      	subs	r4, #1
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 8020c2a:	ed93 4a01 	vldr	s8, [r3, #4]
        refindex += 1;
 8020c2e:	ee36 6a22 	vadd.f32	s12, s12, s5
    while(n--)
 8020c32:	1c67      	adds	r7, r4, #1
        readlag -= readlagstep;
 8020c34:	ee77 7ac2 	vsub.f32	s15, s15, s4
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 8020c38:	ee34 4a66 	vsub.f32	s8, s8, s13
 8020c3c:	eee5 6a04 	vfma.f32	s13, s10, s8
            outputsample += read_sample(w, readindex - jump) * xfadevalue;
 8020c40:	ee66 6a87 	vmul.f32	s13, s13, s14
            xfadevalue -= xfadestep;
 8020c44:	ee37 7a60 	vsub.f32	s14, s14, s1
            outputsample += read_sample(w, readindex - jump) * xfadevalue;
 8020c48:	eee4 6aa8 	vfma.f32	s13, s9, s17
        *out++ = outputsample;
 8020c4c:	ece2 6a01 	vstmia	r2!, {s13}
    while(n--)
 8020c50:	d1ab      	bne.n	8020baa <tSOLAD_ioSamples+0xe6>
 8020c52:	8883      	ldrh	r3, [r0, #4]
    w->readlag = readlag;               // state variables
 8020c54:	edc0 7a03 	vstr	s15, [r0, #12]
    w->jump = jump;
 8020c58:	edc0 5a05 	vstr	s11, [r0, #20]
    w->xfadelength = xfadelength;
 8020c5c:	ed80 3a06 	vstr	s6, [r0, #24]
    w->xfadevalue = xfadevalue;
 8020c60:	ed80 7a07 	vstr	s14, [r0, #28]
    w->timeindex += blocksize;
 8020c64:	441d      	add	r5, r3
    w->timeindex &= LOOPMASK;
 8020c66:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8020c6a:	8085      	strh	r5, [r0, #4]
}
 8020c6c:	ecbd 8b02 	vpop	{d8}
 8020c70:	bcf0      	pop	{r4, r5, r6, r7}
 8020c72:	4770      	bx	lr
    float xfadestep = xfadespeed / xfadelength;
 8020c74:	eec1 0a83 	vdiv.f32	s1, s3, s6
 8020c78:	e78e      	b.n	8020b98 <tSOLAD_ioSamples+0xd4>
    while(n--)
 8020c7a:	3c01      	subs	r4, #1
        *out++ = outputsample;
 8020c7c:	ece2 4a01 	vstmia	r2!, {s9}
        refindex += 1;
 8020c80:	ee36 6a22 	vadd.f32	s12, s12, s5
    while(n--)
 8020c84:	1c66      	adds	r6, r4, #1
        readlag -= readlagstep;
 8020c86:	ee77 7ac2 	vsub.f32	s15, s15, s4
    while(n--)
 8020c8a:	d18e      	bne.n	8020baa <tSOLAD_ioSamples+0xe6>
 8020c8c:	e7e1      	b.n	8020c52 <tSOLAD_ioSamples+0x18e>
 8020c8e:	fe86 3aa2 	vmaxnm.f32	s6, s13, s5
                jump = -period;         // jump backward
 8020c92:	eef0 5a48 	vmov.f32	s11, s16
                xfadestep = xfadespeed / xfadelength;
 8020c96:	eec1 0a83 	vdiv.f32	s1, s3, s6
                readlag += period;      // increase read pointer lag
 8020c9a:	ee77 7aa3 	vadd.f32	s15, s15, s7
                xfadevalue = 1;         // start crossfade
 8020c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020ca2:	e793      	b.n	8020bcc <tSOLAD_ioSamples+0x108>
    if(pitchfactor > 0.5) xfadespeed = pitchfactor;
 8020ca4:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    while(n--)
 8020ca8:	1e4c      	subs	r4, r1, #1
    float readlagstep = 1 - pitchfactor;
 8020caa:	ee72 1a66 	vsub.f32	s3, s4, s13
    else xfadespeed = 1 - pitchfactor;
 8020cae:	eef4 6ac5 	vcmpe.f32	s13, s10
 8020cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cb6:	fe76 6aa1 	vselgt.f32	s13, s13, s3
    xfadestep = xfadespeed / xfadelength;
 8020cba:	eec6 0a83 	vdiv.f32	s1, s13, s6
    while(n--)
 8020cbe:	2900      	cmp	r1, #0
 8020cc0:	d053      	beq.n	8020d6a <tSOLAD_ioSamples+0x2a6>
        refindex += 1;
 8020cc2:	eef0 2a42 	vmov.f32	s5, s4
                xfadelength = period - 1;
 8020cc6:	ee33 2ac2 	vsub.f32	s4, s7, s4
                xfadestep = xfadespeed / xfadelength;
 8020cca:	ee86 0a82 	vdiv.f32	s0, s13, s4
            if(xfadevalue <= 0)      // ...but do not interrupt crossfade
 8020cce:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8020cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cd6:	d804      	bhi.n	8020ce2 <tSOLAD_ioSamples+0x21e>
 8020cd8:	eef4 7a63 	vcmp.f32	s15, s7
 8020cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ce0:	dc56      	bgt.n	8020d90 <tSOLAD_ioSamples+0x2cc>
        readindex = refindex - readlag;
 8020ce2:	ee36 5a67 	vsub.f32	s10, s12, s15
        outputsample = read_sample(w, readindex);
 8020ce6:	6a01      	ldr	r1, [r0, #32]
        if(xfadevalue > 0)
 8020ce8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    int index = (int)floatindex;
 8020cec:	eefd 6ac5 	vcvt.s32.f32	s13, s10
        if(xfadevalue > 0)
 8020cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    index &= LOOPMASK;
 8020cf4:	ee16 3a90 	vmov	r3, s13
    float fraction = floatindex - (float)index;
 8020cf8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    index &= LOOPMASK;
 8020cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    float fraction = floatindex - (float)index;
 8020d00:	ee75 6a66 	vsub.f32	s13, s10, s13
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 8020d04:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020d08:	edd3 4a00 	vldr	s9, [r3]
 8020d0c:	ed93 4a01 	vldr	s8, [r3, #4]
 8020d10:	ee34 4a64 	vsub.f32	s8, s8, s9
 8020d14:	eee6 4a84 	vfma.f32	s9, s13, s8
        if(xfadevalue > 0)
 8020d18:	dd30      	ble.n	8020d7c <tSOLAD_ioSamples+0x2b8>
            outputsample += read_sample(w, readindex - jump) * xfadevalue;  // fadeout
 8020d1a:	ee35 5a65 	vsub.f32	s10, s10, s11
    while(n--)
 8020d1e:	3c01      	subs	r4, #1
            outputsample *= (1 - xfadevalue);                               // fadein
 8020d20:	ee32 1ac7 	vsub.f32	s2, s5, s14
        refindex += 1;
 8020d24:	ee36 6a22 	vadd.f32	s12, s12, s5
    int index = (int)floatindex;
 8020d28:	eefd 6ac5 	vcvt.s32.f32	s13, s10
        readlag += readlagstep;
 8020d2c:	ee77 7aa1 	vadd.f32	s15, s15, s3
    index &= LOOPMASK;
 8020d30:	ee16 3a90 	vmov	r3, s13
    float fraction = floatindex - (float)index;
 8020d34:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    index &= LOOPMASK;
 8020d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
    float fraction = floatindex - (float)index;
 8020d3c:	ee35 5a66 	vsub.f32	s10, s10, s13
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 8020d40:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8020d44:	edd1 6a00 	vldr	s13, [r1]
 8020d48:	ed91 4a01 	vldr	s8, [r1, #4]
    while(n--)
 8020d4c:	1c61      	adds	r1, r4, #1
    return (buf[index] + (fraction * (buf[index+1] - buf[index])));
 8020d4e:	ee34 4a66 	vsub.f32	s8, s8, s13
 8020d52:	eee5 6a04 	vfma.f32	s13, s10, s8
            outputsample += read_sample(w, readindex - jump) * xfadevalue;  // fadeout
 8020d56:	ee66 6a87 	vmul.f32	s13, s13, s14
            xfadevalue -= xfadestep;
 8020d5a:	ee37 7a60 	vsub.f32	s14, s14, s1
            outputsample += read_sample(w, readindex - jump) * xfadevalue;  // fadeout
 8020d5e:	eee4 6a81 	vfma.f32	s13, s9, s2
        *out++ = outputsample;
 8020d62:	ece2 6a01 	vstmia	r2!, {s13}
    while(n--)
 8020d66:	d1b2      	bne.n	8020cce <tSOLAD_ioSamples+0x20a>
 8020d68:	8883      	ldrh	r3, [r0, #4]
    w->jump = jump;                 // state variables
 8020d6a:	edc0 5a05 	vstr	s11, [r0, #20]
    w->readlag = readlag;
 8020d6e:	edc0 7a03 	vstr	s15, [r0, #12]
    w->xfadevalue = xfadevalue;
 8020d72:	ed80 7a07 	vstr	s14, [r0, #28]
    w->xfadelength = xfadelength;
 8020d76:	ed80 3a06 	vstr	s6, [r0, #24]
 8020d7a:	e773      	b.n	8020c64 <tSOLAD_ioSamples+0x1a0>
    while(n--)
 8020d7c:	3c01      	subs	r4, #1
        *out++ = outputsample;
 8020d7e:	ece2 4a01 	vstmia	r2!, {s9}
        refindex += 1;
 8020d82:	ee36 6a22 	vadd.f32	s12, s12, s5
    while(n--)
 8020d86:	1c63      	adds	r3, r4, #1
        readlag += readlagstep;
 8020d88:	ee77 7aa1 	vadd.f32	s15, s15, s3
    while(n--)
 8020d8c:	d19f      	bne.n	8020cce <tSOLAD_ioSamples+0x20a>
 8020d8e:	e7eb      	b.n	8020d68 <tSOLAD_ioSamples+0x2a4>
                jump = period;                           // jump forward
 8020d90:	eef0 5a63 	vmov.f32	s11, s7
 8020d94:	e001      	b.n	8020d9a <tSOLAD_ioSamples+0x2d6>
                while((jump * 2) < readlag) jump *= 2;   // use available space
 8020d96:	eef0 5a47 	vmov.f32	s11, s14
 8020d9a:	ee35 7aa5 	vadd.f32	s14, s11, s11
 8020d9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020da6:	d4f6      	bmi.n	8020d96 <tSOLAD_ioSamples+0x2d2>
                readlag -= jump;                         // reduce read pointer lag
 8020da8:	ee77 7ae5 	vsub.f32	s15, s15, s11
                xfadestep = xfadespeed / xfadelength;
 8020dac:	eef0 0a40 	vmov.f32	s1, s0
                xfadevalue = 1;                          // start crossfade
 8020db0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                xfadelength = period - 1;
 8020db4:	eeb0 3a42 	vmov.f32	s6, s4
 8020db8:	e793      	b.n	8020ce2 <tSOLAD_ioSamples+0x21e>
 8020dba:	bf00      	nop
 8020dbc:	3f7d70a4 	.word	0x3f7d70a4

08020dc0 <tRetune_initToPool>:
{
    tRetune_initToPool(rt, numVoices, bufSize, frameSize, &leaf.mempool);
}

void tRetune_initToPool (tRetune* const rt, int numVoices, int bufSize, int frameSize, tMempool* const mp)
{
 8020dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dc4:	ed2d 8b02 	vpush	{d8}
 8020dc8:	b085      	sub	sp, #20
 8020dca:	4604      	mov	r4, r0
 8020dcc:	4689      	mov	r9, r1
    _tMempool* m = *mp;
    _tRetune* r = *rt = (_tRetune*) mpool_alloc(sizeof(_tRetune), m);
 8020dce:	203c      	movs	r0, #60	; 0x3c
{
 8020dd0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8020dd4:	4617      	mov	r7, r2
 8020dd6:	469a      	mov	sl, r3
    _tMempool* m = *mp;
 8020dd8:	f8d8 6000 	ldr.w	r6, [r8]
    _tRetune* r = *rt = (_tRetune*) mpool_alloc(sizeof(_tRetune), m);
 8020ddc:	4631      	mov	r1, r6
 8020dde:	f003 f993 	bl	8024108 <mpool_alloc>
 8020de2:	4605      	mov	r5, r0
 8020de4:	6020      	str	r0, [r4, #0]
    
    r->bufSize = bufSize;
    r->frameSize = frameSize;
    r->numVoices = numVoices;
    
    r->inBuffer = (float*) mpool_calloc(sizeof(float) * r->bufSize, m);
 8020de6:	4631      	mov	r1, r6
    r->mempool = *mp;
 8020de8:	f8d8 2000 	ldr.w	r2, [r8]
    r->frameSize = frameSize;
 8020dec:	f8c0 a018 	str.w	sl, [r0, #24]
    r->inBuffer = (float*) mpool_calloc(sizeof(float) * r->bufSize, m);
 8020df0:	00b8      	lsls	r0, r7, #2
    r->mempool = *mp;
 8020df2:	602a      	str	r2, [r5, #0]
    r->bufSize = bufSize;
 8020df4:	61ef      	str	r7, [r5, #28]
    r->numVoices = numVoices;
 8020df6:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
    r->inBuffer = (float*) mpool_calloc(sizeof(float) * r->bufSize, m);
 8020dfa:	f003 f9db 	bl	80241b4 <mpool_calloc>
    r->outBuffers = (float**) mpool_calloc(sizeof(float*) * r->numVoices, m);
 8020dfe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020e00:	4631      	mov	r1, r6
    r->inBuffer = (float*) mpool_calloc(sizeof(float) * r->bufSize, m);
 8020e02:	60e8      	str	r0, [r5, #12]
    r->outBuffers = (float**) mpool_calloc(sizeof(float*) * r->numVoices, m);
 8020e04:	0098      	lsls	r0, r3, #2
 8020e06:	f003 f9d5 	bl	80241b4 <mpool_calloc>
    
    r->hopSize = DEFHOPSIZE;
 8020e0a:	f04f 1240 	mov.w	r2, #4194368	; 0x400040
    r->windowSize = DEFWINDOWSIZE;
    r->fba = FBA;
 8020e0e:	2314      	movs	r3, #20
    r->outBuffers = (float**) mpool_calloc(sizeof(float*) * r->numVoices, m);
 8020e10:	6128      	str	r0, [r5, #16]
    r->hopSize = DEFHOPSIZE;
 8020e12:	622a      	str	r2, [r5, #32]
void tRetune_setTimeConstant(tRetune* const rt, float tc)
{
    _tRetune* r = *rt;
    
    r->timeConstant = tc;
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 8020e14:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
    r->fba = FBA;
 8020e18:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 8020e1c:	4b50      	ldr	r3, [pc, #320]	; (8020f60 <tRetune_initToPool+0x1a0>)
    _tRetune* r = *rt;
 8020e1e:	6824      	ldr	r4, [r4, #0]
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 8020e20:	ed93 0a01 	vldr	s0, [r3, #4]
 8020e24:	8c23      	ldrh	r3, [r4, #32]
 8020e26:	ee20 0a07 	vmul.f32	s0, s0, s14
 8020e2a:	ee07 3a90 	vmov	s15, r3
    r->timeConstant = tc;
 8020e2e:	4b4d      	ldr	r3, [pc, #308]	; (8020f64 <tRetune_initToPool+0x1a4>)
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 8020e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    r->timeConstant = tc;
 8020e34:	62e3      	str	r3, [r4, #44]	; 0x2c
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 8020e36:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020e3a:	f006 f99f 	bl	802717c <expf>
    r->inputPeriod = 0.0f;
 8020e3e:	2300      	movs	r3, #0
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 8020e40:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
    r->ps = (tPitchShift*) mpool_calloc(sizeof(tPitchShift) * r->numVoices, m);
 8020e44:	4631      	mov	r1, r6
 8020e46:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    r->inputPeriod = 0.0f;
 8020e48:	636b      	str	r3, [r5, #52]	; 0x34
    r->ps = (tPitchShift*) mpool_calloc(sizeof(tPitchShift) * r->numVoices, m);
 8020e4a:	0080      	lsls	r0, r0, #2
 8020e4c:	f003 f9b2 	bl	80241b4 <mpool_calloc>
    r->pitchFactor = (float*) mpool_calloc(sizeof(float) * r->numVoices, m);
 8020e50:	6bab      	ldr	r3, [r5, #56]	; 0x38
    r->ps = (tPitchShift*) mpool_calloc(sizeof(tPitchShift) * r->numVoices, m);
 8020e52:	60a8      	str	r0, [r5, #8]
    r->pitchFactor = (float*) mpool_calloc(sizeof(float) * r->numVoices, m);
 8020e54:	4631      	mov	r1, r6
 8020e56:	0098      	lsls	r0, r3, #2
 8020e58:	f003 f9ac 	bl	80241b4 <mpool_calloc>
    r->tickOutput = (float*) mpool_calloc(sizeof(float) * r->numVoices, m);
 8020e5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    r->pitchFactor = (float*) mpool_calloc(sizeof(float) * r->numVoices, m);
 8020e5e:	62a8      	str	r0, [r5, #40]	; 0x28
    r->tickOutput = (float*) mpool_calloc(sizeof(float) * r->numVoices, m);
 8020e60:	4631      	mov	r1, r6
 8020e62:	0098      	lsls	r0, r3, #2
 8020e64:	f003 f9a6 	bl	80241b4 <mpool_calloc>
    for (int i = 0; i < r->numVoices; ++i)
 8020e68:	6bab      	ldr	r3, [r5, #56]	; 0x38
    r->tickOutput = (float*) mpool_calloc(sizeof(float) * r->numVoices, m);
 8020e6a:	6168      	str	r0, [r5, #20]
    for (int i = 0; i < r->numVoices; ++i)
 8020e6c:	2b00      	cmp	r3, #0
 8020e6e:	dd0c      	ble.n	8020e8a <tRetune_initToPool+0xca>
 8020e70:	2400      	movs	r4, #0
        r->outBuffers[i] = (float*) mpool_calloc(sizeof(float) * r->bufSize, m);
 8020e72:	69e8      	ldr	r0, [r5, #28]
 8020e74:	4631      	mov	r1, r6
 8020e76:	692f      	ldr	r7, [r5, #16]
 8020e78:	0080      	lsls	r0, r0, #2
 8020e7a:	f003 f99b 	bl	80241b4 <mpool_calloc>
 8020e7e:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
    for (int i = 0; i < r->numVoices; ++i)
 8020e82:	3401      	adds	r4, #1
 8020e84:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020e86:	42a3      	cmp	r3, r4
 8020e88:	dcf3      	bgt.n	8020e72 <tRetune_initToPool+0xb2>
    tPeriodDetection_initToPool(&r->pd, r->inBuffer, r->outBuffers[0], r->bufSize, r->frameSize, mp);
 8020e8a:	692a      	ldr	r2, [r5, #16]
 8020e8c:	1d28      	adds	r0, r5, #4
 8020e8e:	69eb      	ldr	r3, [r5, #28]
 8020e90:	6812      	ldr	r2, [r2, #0]
 8020e92:	68e9      	ldr	r1, [r5, #12]
 8020e94:	f8cd 8004 	str.w	r8, [sp, #4]
 8020e98:	69ac      	ldr	r4, [r5, #24]
 8020e9a:	9003      	str	r0, [sp, #12]
 8020e9c:	9400      	str	r4, [sp, #0]
 8020e9e:	f7fe f8e3 	bl	801f068 <tPeriodDetection_initToPool>
    for (int i = 0; i < r->numVoices; ++i)
 8020ea2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	dd56      	ble.n	8020f56 <tRetune_initToPool+0x196>
 8020ea8:	2700      	movs	r7, #0
    w->period = INITPERIOD;
 8020eaa:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 8020f68 <tRetune_initToPool+0x1a8>
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 8020eae:	eddf 8a2f 	vldr	s17, [pc, #188]	; 8020f6c <tRetune_initToPool+0x1ac>
        tPitchShift_initToPool(&r->ps[i], &r->pd, r->outBuffers[i], r->bufSize, mp);
 8020eb2:	692b      	ldr	r3, [r5, #16]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 8020eb4:	2038      	movs	r0, #56	; 0x38
    _tMempool* m = *mp;
 8020eb6:	f8d8 a000 	ldr.w	sl, [r8]
    ps->pitchFactor = 1.0f;
 8020eba:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
        tPitchShift_initToPool(&r->ps[i], &r->pd, r->outBuffers[i], r->bufSize, mp);
 8020ebe:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 8020ec2:	4651      	mov	r1, sl
        tPitchShift_initToPool(&r->ps[i], &r->pd, r->outBuffers[i], r->bufSize, mp);
 8020ec4:	69ee      	ldr	r6, [r5, #28]
 8020ec6:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8020eca:	9302      	str	r3, [sp, #8]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 8020ecc:	f003 f972 	bl	80241b4 <mpool_calloc>
    ps->outBuffer = out;
 8020ed0:	9902      	ldr	r1, [sp, #8]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 8020ed2:	4604      	mov	r4, r0
    ps->curBlock = 1;
 8020ed4:	f04f 0c01 	mov.w	ip, #1
    ps->lastBlock = 0;
 8020ed8:	2200      	movs	r2, #0
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 8020eda:	f849 4027 	str.w	r4, [r9, r7, lsl #2]
    _tSOLAD* w = *wp = (_tSOLAD*) mpool_calloc(sizeof(_tSOLAD), m);
 8020ede:	2024      	movs	r0, #36	; 0x24
    ps->mempool = m;
 8020ee0:	f8c4 a000 	str.w	sl, [r4]
    for (int i = 0; i < r->numVoices; ++i)
 8020ee4:	4467      	add	r7, ip
    _tPeriodDetection* p = *pd;
 8020ee6:	686b      	ldr	r3, [r5, #4]
    ps->outBuffer = out;
 8020ee8:	6121      	str	r1, [r4, #16]
    ps->p = pd;
 8020eea:	9903      	ldr	r1, [sp, #12]
    ps->bufSize = bufSize;
 8020eec:	61a6      	str	r6, [r4, #24]
    ps->p = pd;
 8020eee:	60e1      	str	r1, [r4, #12]
    ps->frameSize = p->frameSize;
 8020ef0:	695b      	ldr	r3, [r3, #20]
    ps->curBlock = 1;
 8020ef2:	f8c4 c020 	str.w	ip, [r4, #32]
    ps->frameSize = p->frameSize;
 8020ef6:	6163      	str	r3, [r4, #20]
    ps->pitchFactor = 1.0f;
 8020ef8:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
    ps->framesPerBuffer = ps->bufSize / ps->frameSize;
 8020efc:	fb96 f6f3 	sdiv	r6, r6, r3
    ps->index = 0;
 8020f00:	e9c4 2209 	strd	r2, r2, [r4, #36]	; 0x24
    ps->framesPerBuffer = ps->bufSize / ps->frameSize;
 8020f04:	61e6      	str	r6, [r4, #28]
    _tMempool* m = *mp;
 8020f06:	f8d8 a000 	ldr.w	sl, [r8]
    _tSOLAD* w = *wp = (_tSOLAD*) mpool_calloc(sizeof(_tSOLAD), m);
 8020f0a:	4651      	mov	r1, sl
 8020f0c:	f003 f952 	bl	80241b4 <mpool_calloc>
 8020f10:	4606      	mov	r6, r0
    w->delaybuf = (float*) mpool_calloc(sizeof(float) * (LOOPSIZE+16), m);
 8020f12:	4651      	mov	r1, sl
 8020f14:	f244 0040 	movw	r0, #16448	; 0x4040
    _tSOLAD* w = *wp = (_tSOLAD*) mpool_calloc(sizeof(_tSOLAD), m);
 8020f18:	6066      	str	r6, [r4, #4]
    w->mempool = m;
 8020f1a:	f8c6 a000 	str.w	sl, [r6]
    w->pitchfactor = 1.;
 8020f1e:	f8c6 b008 	str.w	fp, [r6, #8]
    w->delaybuf = (float*) mpool_calloc(sizeof(float) * (LOOPSIZE+16), m);
 8020f22:	f003 f947 	bl	80241b4 <mpool_calloc>
    w->xfadevalue = -1;
 8020f26:	4a12      	ldr	r2, [pc, #72]	; (8020f70 <tRetune_initToPool+0x1b0>)
    w->timeindex = 0;
 8020f28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    w->delaybuf = (float*) mpool_calloc(sizeof(float) * (LOOPSIZE+16), m);
 8020f2c:	6230      	str	r0, [r6, #32]
    w->xfadevalue = -1;
 8020f2e:	61f2      	str	r2, [r6, #28]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 8020f30:	f104 0008 	add.w	r0, r4, #8
    w->timeindex = 0;
 8020f34:	6073      	str	r3, [r6, #4]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 8020f36:	4641      	mov	r1, r8
    w->period = INITPERIOD;
 8020f38:	ed86 8a04 	vstr	s16, [r6, #16]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 8020f3c:	eeb0 0a68 	vmov.f32	s0, s17
    w->readlag = INITPERIOD;
 8020f40:	ed86 8a03 	vstr	s16, [r6, #12]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 8020f44:	f001 fd5a 	bl	80229fc <tHighpass_initToPool>
    _tSOLAD* w = *wp;
 8020f48:	6863      	ldr	r3, [r4, #4]
    w->pitchfactor = pitchfactor;
 8020f4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8020f4e:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < r->numVoices; ++i)
 8020f50:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020f52:	42bb      	cmp	r3, r7
 8020f54:	dcad      	bgt.n	8020eb2 <tRetune_initToPool+0xf2>
}
 8020f56:	b005      	add	sp, #20
 8020f58:	ecbd 8b02 	vpop	{d8}
 8020f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f60:	200194e0 	.word	0x200194e0
 8020f64:	42c80000 	.word	0x42c80000
 8020f68:	42800000 	.word	0x42800000
 8020f6c:	42200000 	.word	0x42200000
 8020f70:	bf800000 	.word	0xbf800000

08020f74 <tRetune_init>:
{
 8020f74:	b510      	push	{r4, lr}
    tRetune_initToPool(rt, numVoices, bufSize, frameSize, &leaf.mempool);
 8020f76:	4c03      	ldr	r4, [pc, #12]	; (8020f84 <tRetune_init+0x10>)
{
 8020f78:	b082      	sub	sp, #8
    tRetune_initToPool(rt, numVoices, bufSize, frameSize, &leaf.mempool);
 8020f7a:	9400      	str	r4, [sp, #0]
 8020f7c:	f7ff ff20 	bl	8020dc0 <tRetune_initToPool>
}
 8020f80:	b002      	add	sp, #8
 8020f82:	bd10      	pop	{r4, pc}
 8020f84:	200194f8 	.word	0x200194f8

08020f88 <tRetune_free>:
{
 8020f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tRetune* r = *rt;
 8020f8a:	6804      	ldr	r4, [r0, #0]
    tPeriodDetection_free(&r->pd);
 8020f8c:	1d20      	adds	r0, r4, #4
 8020f8e:	f7fe f8c9 	bl	801f124 <tPeriodDetection_free>
    for (int i = 0; i < r->numVoices; ++i)
 8020f92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020f94:	2b00      	cmp	r3, #0
 8020f96:	dd1e      	ble.n	8020fd6 <tRetune_free+0x4e>
 8020f98:	2500      	movs	r5, #0
    _tPitchShift* ps = *psr;
 8020f9a:	68a3      	ldr	r3, [r4, #8]
 8020f9c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
    _tSOLAD* w = *wp;
 8020fa0:	6877      	ldr	r7, [r6, #4]
    mpool_free((char*)w->delaybuf, w->mempool);
 8020fa2:	6839      	ldr	r1, [r7, #0]
 8020fa4:	6a38      	ldr	r0, [r7, #32]
 8020fa6:	f003 f957 	bl	8024258 <mpool_free>
    mpool_free((char*)w, w->mempool);
 8020faa:	6839      	ldr	r1, [r7, #0]
 8020fac:	4638      	mov	r0, r7
 8020fae:	f003 f953 	bl	8024258 <mpool_free>
    tHighpass_free(&ps->hp);
 8020fb2:	f106 0008 	add.w	r0, r6, #8
 8020fb6:	f001 fd41 	bl	8022a3c <tHighpass_free>
    mpool_free((char*)ps, ps->mempool);
 8020fba:	6831      	ldr	r1, [r6, #0]
 8020fbc:	4630      	mov	r0, r6
 8020fbe:	f003 f94b 	bl	8024258 <mpool_free>
        mpool_free((char*)r->outBuffers[i], r->mempool);
 8020fc2:	6923      	ldr	r3, [r4, #16]
 8020fc4:	6821      	ldr	r1, [r4, #0]
 8020fc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    for (int i = 0; i < r->numVoices; ++i)
 8020fca:	3501      	adds	r5, #1
        mpool_free((char*)r->outBuffers[i], r->mempool);
 8020fcc:	f003 f944 	bl	8024258 <mpool_free>
    for (int i = 0; i < r->numVoices; ++i)
 8020fd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020fd2:	42ab      	cmp	r3, r5
 8020fd4:	dce1      	bgt.n	8020f9a <tRetune_free+0x12>
    mpool_free((char*)r->tickOutput, r->mempool);
 8020fd6:	6821      	ldr	r1, [r4, #0]
 8020fd8:	6960      	ldr	r0, [r4, #20]
 8020fda:	f003 f93d 	bl	8024258 <mpool_free>
    mpool_free((char*)r->pitchFactor, r->mempool);
 8020fde:	6821      	ldr	r1, [r4, #0]
 8020fe0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8020fe2:	f003 f939 	bl	8024258 <mpool_free>
    mpool_free((char*)r->ps, r->mempool);
 8020fe6:	6821      	ldr	r1, [r4, #0]
 8020fe8:	68a0      	ldr	r0, [r4, #8]
 8020fea:	f003 f935 	bl	8024258 <mpool_free>
    mpool_free((char*)r->inBuffer, r->mempool);
 8020fee:	6821      	ldr	r1, [r4, #0]
 8020ff0:	68e0      	ldr	r0, [r4, #12]
 8020ff2:	f003 f931 	bl	8024258 <mpool_free>
    mpool_free((char*)r->outBuffers, r->mempool);
 8020ff6:	6821      	ldr	r1, [r4, #0]
 8020ff8:	6920      	ldr	r0, [r4, #16]
 8020ffa:	f003 f92d 	bl	8024258 <mpool_free>
    mpool_free((char*)r, r->mempool);
 8020ffe:	6821      	ldr	r1, [r4, #0]
 8021000:	4620      	mov	r0, r4
}
 8021002:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    mpool_free((char*)r, r->mempool);
 8021006:	f003 b927 	b.w	8024258 <mpool_free>
 802100a:	bf00      	nop

0802100c <tRetune_tick>:
{
 802100c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021010:	ed2d 8b04 	vpush	{d8-d9}
    _tRetune* r = *rt;
 8021014:	6807      	ldr	r7, [r0, #0]
{
 8021016:	b083      	sub	sp, #12
    r->inputPeriod = tPeriodDetection_tick(&r->pd, sample);
 8021018:	1d38      	adds	r0, r7, #4
 802101a:	f7fe f8a5 	bl	801f168 <tPeriodDetection_tick>
    for (int v = 0; v < r->numVoices; ++v)
 802101e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    r->inputPeriod = tPeriodDetection_tick(&r->pd, sample);
 8021020:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    for (int v = 0; v < r->numVoices; ++v)
 8021024:	2b00      	cmp	r3, #0
 8021026:	f340 8083 	ble.w	8021130 <tRetune_tick+0x124>
 802102a:	2500      	movs	r5, #0
    if(period > MAXPERIOD) period = MAXPERIOD;
 802102c:	ed9f 9a5f 	vldr	s18, [pc, #380]	; 80211ac <tRetune_tick+0x1a0>
    return (p->fba == 0 && (p->max > 60 && p->deltamax > 6)) ? 1 : 0;
 8021030:	eddf 9a5f 	vldr	s19, [pc, #380]	; 80211b0 <tRetune_tick+0x1a4>
 8021034:	e005      	b.n	8021042 <tRetune_tick+0x36>
        r->tickOutput[v] = tPitchShift_shift(&r->ps[v]);
 8021036:	ed86 8a00 	vstr	s16, [r6]
    for (int v = 0; v < r->numVoices; ++v)
 802103a:	3501      	adds	r5, #1
 802103c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802103e:	42ab      	cmp	r3, r5
 8021040:	dd76      	ble.n	8021130 <tRetune_tick+0x124>
    _tPitchShift* ps = *psr;
 8021042:	68bb      	ldr	r3, [r7, #8]
        r->tickOutput[v] = tPitchShift_shift(&r->ps[v]);
 8021044:	697e      	ldr	r6, [r7, #20]
    _tPitchShift* ps = *psr;
 8021046:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        r->tickOutput[v] = tPitchShift_shift(&r->ps[v]);
 802104a:	eb06 0685 	add.w	r6, r6, r5, lsl #2
    _tPeriodDetection* p = *ps->p;
 802104e:	68e2      	ldr	r2, [r4, #12]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 8021050:	f104 0008 	add.w	r0, r4, #8
 8021054:	6923      	ldr	r3, [r4, #16]
    _tPeriodDetection* p = *ps->p;
 8021056:	6812      	ldr	r2, [r2, #0]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 8021058:	6b11      	ldr	r1, [r2, #48]	; 0x30
    _tPeriodDetection* p = *ps->p;
 802105a:	9201      	str	r2, [sp, #4]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 802105c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    i = p->i;
 8021060:	f8d2 8028 	ldr.w	r8, [r2, #40]	; 0x28
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 8021064:	ed93 0a00 	vldr	s0, [r3]
 8021068:	f001 fcfc 	bl	8022a64 <tHighpass_tick>
    if (p->indexstore >= ps->frameSize)
 802106c:	9a01      	ldr	r2, [sp, #4]
 802106e:	6963      	ldr	r3, [r4, #20]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 8021070:	eeb0 8a40 	vmov.f32	s16, s0
    if (p->indexstore >= ps->frameSize)
 8021074:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8021076:	429a      	cmp	r2, r3
 8021078:	dbdd      	blt.n	8021036 <tRetune_tick+0x2a>
        period = tPeriodDetection_getPeriod(&p);
 802107a:	a801      	add	r0, sp, #4
 802107c:	f7fe f902 	bl	801f284 <tPeriodDetection_getPeriod>
    _tPeriodDetection* p = *ps->p;
 8021080:	68e3      	ldr	r3, [r4, #12]
        period = tPeriodDetection_getPeriod(&p);
 8021082:	eef0 8a40 	vmov.f32	s17, s0
    _tPeriodDetection* p = *ps->p;
 8021086:	f8d3 9000 	ldr.w	r9, [r3]
    envout = tEnvPD_tick(&p->env);
 802108a:	f109 0004 	add.w	r0, r9, #4
 802108e:	f7fd fcef 	bl	801ea70 <tEnvPD_tick>
    if (envout >= 1.0f)
 8021092:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021096:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802109e:	db0e      	blt.n	80210be <tRetune_tick+0xb2>
        p->lastmax = p->max;
 80210a0:	edd9 7a13 	vldr	s15, [r9, #76]	; 0x4c
        if (envout > p->max)
 80210a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
        p->lastmax = p->max;
 80210a8:	edc9 7a14 	vstr	s15, [r9, #80]	; 0x50
 80210ac:	ee30 7a67 	vsub.f32	s14, s0, s15
        if (envout > p->max)
 80210b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210b4:	dd6e      	ble.n	8021194 <tRetune_tick+0x188>
            p->max = envout;
 80210b6:	ed89 0a13 	vstr	s0, [r9, #76]	; 0x4c
        p->deltamax = p->max - p->lastmax;
 80210ba:	ed89 7a15 	vstr	s14, [r9, #84]	; 0x54
    p->fba = p->fba ? (p->fba - 1) : 0;
 80210be:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
 80210c2:	9901      	ldr	r1, [sp, #4]
 80210c4:	2b00      	cmp	r3, #0
 80210c6:	d039      	beq.n	802113c <tRetune_tick+0x130>
 80210c8:	3b01      	subs	r3, #1
 80210ca:	b2db      	uxtb	r3, r3
 80210cc:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40
    return (p->fba == 0 && (p->max > 60 && p->deltamax > 6)) ? 1 : 0;
 80210d0:	b3a3      	cbz	r3, 802113c <tRetune_tick+0x130>
 80210d2:	6862      	ldr	r2, [r4, #4]
    if(period > MAXPERIOD) period = MAXPERIOD;
 80210d4:	88d3      	ldrh	r3, [r2, #6]
    if(period > MINPERIOD) w->period = period;  // ignore period when too small
 80210d6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    if(period > MAXPERIOD) period = MAXPERIOD;
 80210da:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80210de:	ee00 3a10 	vmov	s0, r3
 80210e2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80210e6:	ee20 0a09 	vmul.f32	s0, s0, s18
 80210ea:	fe80 0a68 	vminnm.f32	s0, s0, s17
    if(period > MINPERIOD) w->period = period;  // ignore period when too small
 80210ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80210f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210f6:	dd02      	ble.n	80210fe <tRetune_tick+0xf2>
 80210f8:	ed82 0a04 	vstr	s0, [r2, #16]
 80210fc:	6862      	ldr	r2, [r4, #4]
        tSOLAD_setPitchFactor(&ps->sola, ps->pitchFactor);
 80210fe:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
        tSOLAD_ioSamples(&ps->sola, &(p->inBuffer[i]), &(ps->outBuffer[i]), ps->frameSize);
 8021102:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8021106:	1d20      	adds	r0, r4, #4
    for (int v = 0; v < r->numVoices; ++v)
 8021108:	3501      	adds	r5, #1
    if (pitchfactor <= 0.0f) return;
 802110a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    w->pitchfactor = pitchfactor;
 8021112:	bf88      	it	hi
 8021114:	edc2 7a02 	vstrhi	s15, [r2, #8]
        tSOLAD_ioSamples(&ps->sola, &(p->inBuffer[i]), &(ps->outBuffer[i]), ps->frameSize);
 8021118:	68c9      	ldr	r1, [r1, #12]
 802111a:	6922      	ldr	r2, [r4, #16]
 802111c:	6963      	ldr	r3, [r4, #20]
 802111e:	4441      	add	r1, r8
 8021120:	4442      	add	r2, r8
 8021122:	f7ff fccf 	bl	8020ac4 <tSOLAD_ioSamples>
        r->tickOutput[v] = tPitchShift_shift(&r->ps[v]);
 8021126:	ed86 8a00 	vstr	s16, [r6]
    for (int v = 0; v < r->numVoices; ++v)
 802112a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802112c:	42ab      	cmp	r3, r5
 802112e:	dc88      	bgt.n	8021042 <tRetune_tick+0x36>
}
 8021130:	6978      	ldr	r0, [r7, #20]
 8021132:	b003      	add	sp, #12
 8021134:	ecbd 8b04 	vpop	{d8-d9}
 8021138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (p->fba == 0 && (p->max > 60 && p->deltamax > 6)) ? 1 : 0;
 802113c:	edd9 7a13 	vldr	s15, [r9, #76]	; 0x4c
 8021140:	eef4 7ae9 	vcmpe.f32	s15, s19
 8021144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021148:	ddc3      	ble.n	80210d2 <tRetune_tick+0xc6>
 802114a:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 802114e:	ed99 7a15 	vldr	s14, [r9, #84]	; 0x54
 8021152:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802115a:	ddba      	ble.n	80210d2 <tRetune_tick+0xc6>
            tSOLAD_setReadLag(&ps->sola, p->windowSize);
 802115c:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
            p->fba = 5;
 802115e:	2305      	movs	r3, #5
            tSOLAD_setReadLag(&ps->sola, p->windowSize);
 8021160:	ee07 2a90 	vmov	s15, r2
            p->fba = 5;
 8021164:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
    _tSOLAD* w = *wp;
 8021168:	6862      	ldr	r2, [r4, #4]
            tSOLAD_setReadLag(&ps->sola, p->windowSize);
 802116a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if(readlag < w->readlag)               // do not jump backward, only forward
 802116e:	ed92 7a03 	vldr	s14, [r2, #12]
 8021172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802117a:	d5ab      	bpl.n	80210d4 <tRetune_tick+0xc8>
        w->jump = w->readlag - readlag;
 802117c:	ee37 7a67 	vsub.f32	s14, s14, s15
        w->xfadevalue = 1;
 8021180:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        w->readlag = readlag;
 8021184:	edc2 7a03 	vstr	s15, [r2, #12]
        w->xfadelength = readlag;
 8021188:	edc2 7a06 	vstr	s15, [r2, #24]
        w->jump = w->readlag - readlag;
 802118c:	ed82 7a05 	vstr	s14, [r2, #20]
        w->xfadevalue = 1;
 8021190:	61d3      	str	r3, [r2, #28]
 8021192:	e79e      	b.n	80210d2 <tRetune_tick+0xc6>
            p->deltamax = envout - p->max;
 8021194:	ed89 7a15 	vstr	s14, [r9, #84]	; 0x54
            p->max = p->max * ps->radius;
 8021198:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 802119c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80211a0:	ee36 7ae7 	vsub.f32	s14, s13, s15
 80211a4:	edc9 6a13 	vstr	s13, [r9, #76]	; 0x4c
 80211a8:	e787      	b.n	80210ba <tRetune_tick+0xae>
 80211aa:	bf00      	nop
 80211ac:	3f4ccccd 	.word	0x3f4ccccd
 80211b0:	42700000 	.word	0x42700000

080211b4 <tRetune_setPitchFactor>:
{
 80211b4:	b410      	push	{r4}
    _tRetune* r = *rt;
 80211b6:	6802      	ldr	r2, [r0, #0]
    r->pitchFactor[voice] = pf;
 80211b8:	008c      	lsls	r4, r1, #2
 80211ba:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80211bc:	4420      	add	r0, r4
 80211be:	ed80 0a00 	vstr	s0, [r0]
    tPitchShift_setPitchFactor(&r->ps[voice], r->pitchFactor[voice]);
 80211c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    _tPitchShift* ps = *psr;
 80211c4:	6892      	ldr	r2, [r2, #8]
    tPitchShift_setPitchFactor(&r->ps[voice], r->pitchFactor[voice]);
 80211c6:	4423      	add	r3, r4
    _tPitchShift* ps = *psr;
 80211c8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    tPitchShift_setPitchFactor(&r->ps[voice], r->pitchFactor[voice]);
 80211cc:	681b      	ldr	r3, [r3, #0]
    ps->pitchFactor = pf;
 80211ce:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80211d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80211d4:	4770      	bx	lr
 80211d6:	bf00      	nop

080211d8 <tRetune_setFidelityThreshold>:

void tRetune_setFidelityThreshold(tRetune* const rt, float threshold)
{
    _tRetune* r = *rt;
    
    tPeriodDetection_setFidelityThreshold(&r->pd, threshold);
 80211d8:	6800      	ldr	r0, [r0, #0]
 80211da:	3004      	adds	r0, #4
 80211dc:	f7fe b856 	b.w	801f28c <tPeriodDetection_setFidelityThreshold>

080211e0 <tRetune_getInputPeriod>:

float tRetune_getInputPeriod(tRetune* const rt)
{
    _tRetune* r = *rt;
    
    return (r->inputPeriod * leaf.invSampleRate);
 80211e0:	6802      	ldr	r2, [r0, #0]
 80211e2:	4b04      	ldr	r3, [pc, #16]	; (80211f4 <tRetune_getInputPeriod+0x14>)
 80211e4:	ed92 0a0d 	vldr	s0, [r2, #52]	; 0x34
 80211e8:	edd3 7a01 	vldr	s15, [r3, #4]
}
 80211ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 80211f0:	4770      	bx	lr
 80211f2:	bf00      	nop
 80211f4:	200194e0 	.word	0x200194e0

080211f8 <tAutotune_initToPool>:
{
    tAutotune_initToPool(rt, numVoices, bufSize, frameSize, &leaf.mempool);
}

void tAutotune_initToPool (tAutotune* const rt, int numVoices, int bufSize, int frameSize, tMempool* const mp)
{
 80211f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211fc:	ed2d 8b02 	vpush	{d8}
 8021200:	b085      	sub	sp, #20
 8021202:	4604      	mov	r4, r0
 8021204:	4689      	mov	r9, r1
    _tMempool* m = *mp;
    _tAutotune* r = *rt = (_tAutotune*) mpool_alloc(sizeof(_tAutotune), m);
 8021206:	2040      	movs	r0, #64	; 0x40
{
 8021208:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 802120c:	4617      	mov	r7, r2
 802120e:	469a      	mov	sl, r3
    _tMempool* m = *mp;
 8021210:	f8d8 6000 	ldr.w	r6, [r8]
    _tAutotune* r = *rt = (_tAutotune*) mpool_alloc(sizeof(_tAutotune), m);
 8021214:	4631      	mov	r1, r6
 8021216:	f002 ff77 	bl	8024108 <mpool_alloc>
 802121a:	4605      	mov	r5, r0
 802121c:	6020      	str	r0, [r4, #0]
    
    r->bufSize = bufSize;
    r->frameSize = frameSize;
    r->numVoices = numVoices;
    
    r->inBuffer = (float*) mpool_alloc(sizeof(float) * r->bufSize, m);
 802121e:	4631      	mov	r1, r6
    r->mempool = *mp;
 8021220:	f8d8 2000 	ldr.w	r2, [r8]
    r->frameSize = frameSize;
 8021224:	f8c0 a018 	str.w	sl, [r0, #24]
    r->inBuffer = (float*) mpool_alloc(sizeof(float) * r->bufSize, m);
 8021228:	00b8      	lsls	r0, r7, #2
    r->mempool = *mp;
 802122a:	602a      	str	r2, [r5, #0]
    r->bufSize = bufSize;
 802122c:	61ef      	str	r7, [r5, #28]
    r->numVoices = numVoices;
 802122e:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
    r->inBuffer = (float*) mpool_alloc(sizeof(float) * r->bufSize, m);
 8021232:	f002 ff69 	bl	8024108 <mpool_alloc>
    r->outBuffers = (float**) mpool_alloc(sizeof(float*) * r->numVoices, m);
 8021236:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8021238:	4631      	mov	r1, r6
    r->inBuffer = (float*) mpool_alloc(sizeof(float) * r->bufSize, m);
 802123a:	60e8      	str	r0, [r5, #12]
    r->outBuffers = (float**) mpool_alloc(sizeof(float*) * r->numVoices, m);
 802123c:	0098      	lsls	r0, r3, #2
 802123e:	f002 ff63 	bl	8024108 <mpool_alloc>
    
    r->hopSize = DEFHOPSIZE;
 8021242:	f04f 1240 	mov.w	r2, #4194368	; 0x400040
    r->windowSize = DEFWINDOWSIZE;
    r->fba = FBA;
 8021246:	2314      	movs	r3, #20
    r->outBuffers = (float**) mpool_alloc(sizeof(float*) * r->numVoices, m);
 8021248:	6128      	str	r0, [r5, #16]
    r->hopSize = DEFHOPSIZE;
 802124a:	622a      	str	r2, [r5, #32]
void tAutotune_setTimeConstant(tAutotune* const rt, float tc)
{
    _tAutotune* r = *rt;
    
    r->timeConstant = tc;
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 802124c:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
    r->fba = FBA;
 8021250:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 8021254:	4b51      	ldr	r3, [pc, #324]	; (802139c <tAutotune_initToPool+0x1a4>)
    _tAutotune* r = *rt;
 8021256:	6824      	ldr	r4, [r4, #0]
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 8021258:	ed93 0a01 	vldr	s0, [r3, #4]
 802125c:	8c23      	ldrh	r3, [r4, #32]
 802125e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8021262:	ee07 3a90 	vmov	s15, r3
    r->timeConstant = tc;
 8021266:	4b4e      	ldr	r3, [pc, #312]	; (80213a0 <tAutotune_initToPool+0x1a8>)
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 8021268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    r->timeConstant = tc;
 802126c:	62e3      	str	r3, [r4, #44]	; 0x2c
    r->radius = expf(-1000.0f * r->hopSize * leaf.invSampleRate / r->timeConstant);
 802126e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8021272:	f005 ff83 	bl	802717c <expf>
 8021276:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
    r->ps = (tPitchShift*) mpool_alloc(sizeof(tPitchShift) * r->numVoices, m);
 802127a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 802127c:	4631      	mov	r1, r6
 802127e:	0080      	lsls	r0, r0, #2
 8021280:	f002 ff42 	bl	8024108 <mpool_alloc>
    r->freq = (float*) mpool_alloc(sizeof(float) * r->numVoices, m);
 8021284:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    r->ps = (tPitchShift*) mpool_alloc(sizeof(tPitchShift) * r->numVoices, m);
 8021286:	60a8      	str	r0, [r5, #8]
    r->freq = (float*) mpool_alloc(sizeof(float) * r->numVoices, m);
 8021288:	4631      	mov	r1, r6
 802128a:	0098      	lsls	r0, r3, #2
 802128c:	f002 ff3c 	bl	8024108 <mpool_alloc>
    r->tickOutput = (float*) mpool_alloc(sizeof(float) * r->numVoices, m);
 8021290:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    r->freq = (float*) mpool_alloc(sizeof(float) * r->numVoices, m);
 8021292:	62a8      	str	r0, [r5, #40]	; 0x28
    r->tickOutput = (float*) mpool_alloc(sizeof(float) * r->numVoices, m);
 8021294:	4631      	mov	r1, r6
 8021296:	0098      	lsls	r0, r3, #2
 8021298:	f002 ff36 	bl	8024108 <mpool_alloc>
    for (int i = 0; i < r->numVoices; ++i)
 802129c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    r->tickOutput = (float*) mpool_alloc(sizeof(float) * r->numVoices, m);
 802129e:	6168      	str	r0, [r5, #20]
    for (int i = 0; i < r->numVoices; ++i)
 80212a0:	2b00      	cmp	r3, #0
 80212a2:	dd0c      	ble.n	80212be <tAutotune_initToPool+0xc6>
 80212a4:	2400      	movs	r4, #0
        r->outBuffers[i] = (float*) mpool_alloc(sizeof(float) * r->bufSize, m);
 80212a6:	69e8      	ldr	r0, [r5, #28]
 80212a8:	4631      	mov	r1, r6
 80212aa:	692f      	ldr	r7, [r5, #16]
 80212ac:	0080      	lsls	r0, r0, #2
 80212ae:	f002 ff2b 	bl	8024108 <mpool_alloc>
 80212b2:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
    for (int i = 0; i < r->numVoices; ++i)
 80212b6:	3401      	adds	r4, #1
 80212b8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80212ba:	42a3      	cmp	r3, r4
 80212bc:	dcf3      	bgt.n	80212a6 <tAutotune_initToPool+0xae>
    tPeriodDetection_initToPool(&r->pd, r->inBuffer, r->outBuffers[0], r->bufSize, r->frameSize, mp);
 80212be:	692a      	ldr	r2, [r5, #16]
 80212c0:	1d28      	adds	r0, r5, #4
 80212c2:	69eb      	ldr	r3, [r5, #28]
 80212c4:	6812      	ldr	r2, [r2, #0]
 80212c6:	68e9      	ldr	r1, [r5, #12]
 80212c8:	f8cd 8004 	str.w	r8, [sp, #4]
 80212cc:	69ac      	ldr	r4, [r5, #24]
 80212ce:	9003      	str	r0, [sp, #12]
 80212d0:	9400      	str	r4, [sp, #0]
 80212d2:	f7fd fec9 	bl	801f068 <tPeriodDetection_initToPool>
    for (int i = 0; i < r->numVoices; ++i)
 80212d6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80212d8:	2b00      	cmp	r3, #0
 80212da:	dd56      	ble.n	802138a <tAutotune_initToPool+0x192>
 80212dc:	2700      	movs	r7, #0
    w->period = INITPERIOD;
 80212de:	ed9f 8a31 	vldr	s16, [pc, #196]	; 80213a4 <tAutotune_initToPool+0x1ac>
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 80212e2:	eddf 8a31 	vldr	s17, [pc, #196]	; 80213a8 <tAutotune_initToPool+0x1b0>
        tPitchShift_initToPool(&r->ps[i], &r->pd, r->outBuffers[i], r->bufSize, mp);
 80212e6:	692b      	ldr	r3, [r5, #16]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 80212e8:	2038      	movs	r0, #56	; 0x38
    _tMempool* m = *mp;
 80212ea:	f8d8 a000 	ldr.w	sl, [r8]
    ps->pitchFactor = 1.0f;
 80212ee:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
        tPitchShift_initToPool(&r->ps[i], &r->pd, r->outBuffers[i], r->bufSize, mp);
 80212f2:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 80212f6:	4651      	mov	r1, sl
        tPitchShift_initToPool(&r->ps[i], &r->pd, r->outBuffers[i], r->bufSize, mp);
 80212f8:	69ee      	ldr	r6, [r5, #28]
 80212fa:	f8d5 9008 	ldr.w	r9, [r5, #8]
 80212fe:	9302      	str	r3, [sp, #8]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 8021300:	f002 ff58 	bl	80241b4 <mpool_calloc>
    ps->outBuffer = out;
 8021304:	9902      	ldr	r1, [sp, #8]
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 8021306:	4604      	mov	r4, r0
    ps->curBlock = 1;
 8021308:	f04f 0c01 	mov.w	ip, #1
    ps->lastBlock = 0;
 802130c:	2200      	movs	r2, #0
    _tPitchShift* ps = *psr = (_tPitchShift*) mpool_calloc(sizeof(_tPitchShift), m);
 802130e:	f849 4027 	str.w	r4, [r9, r7, lsl #2]
    _tSOLAD* w = *wp = (_tSOLAD*) mpool_calloc(sizeof(_tSOLAD), m);
 8021312:	2024      	movs	r0, #36	; 0x24
    ps->mempool = m;
 8021314:	f8c4 a000 	str.w	sl, [r4]
    for (int i = 0; i < r->numVoices; ++i)
 8021318:	4467      	add	r7, ip
    _tPeriodDetection* p = *pd;
 802131a:	686b      	ldr	r3, [r5, #4]
    ps->outBuffer = out;
 802131c:	6121      	str	r1, [r4, #16]
    ps->p = pd;
 802131e:	9903      	ldr	r1, [sp, #12]
    ps->bufSize = bufSize;
 8021320:	61a6      	str	r6, [r4, #24]
    ps->p = pd;
 8021322:	60e1      	str	r1, [r4, #12]
    ps->frameSize = p->frameSize;
 8021324:	695b      	ldr	r3, [r3, #20]
    ps->curBlock = 1;
 8021326:	f8c4 c020 	str.w	ip, [r4, #32]
    ps->frameSize = p->frameSize;
 802132a:	6163      	str	r3, [r4, #20]
    ps->pitchFactor = 1.0f;
 802132c:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
    ps->framesPerBuffer = ps->bufSize / ps->frameSize;
 8021330:	fb96 f6f3 	sdiv	r6, r6, r3
    ps->index = 0;
 8021334:	e9c4 2209 	strd	r2, r2, [r4, #36]	; 0x24
    ps->framesPerBuffer = ps->bufSize / ps->frameSize;
 8021338:	61e6      	str	r6, [r4, #28]
    _tMempool* m = *mp;
 802133a:	f8d8 a000 	ldr.w	sl, [r8]
    _tSOLAD* w = *wp = (_tSOLAD*) mpool_calloc(sizeof(_tSOLAD), m);
 802133e:	4651      	mov	r1, sl
 8021340:	f002 ff38 	bl	80241b4 <mpool_calloc>
 8021344:	4606      	mov	r6, r0
    w->delaybuf = (float*) mpool_calloc(sizeof(float) * (LOOPSIZE+16), m);
 8021346:	4651      	mov	r1, sl
 8021348:	f244 0040 	movw	r0, #16448	; 0x4040
    _tSOLAD* w = *wp = (_tSOLAD*) mpool_calloc(sizeof(_tSOLAD), m);
 802134c:	6066      	str	r6, [r4, #4]
    w->mempool = m;
 802134e:	f8c6 a000 	str.w	sl, [r6]
    w->pitchfactor = 1.;
 8021352:	f8c6 b008 	str.w	fp, [r6, #8]
    w->delaybuf = (float*) mpool_calloc(sizeof(float) * (LOOPSIZE+16), m);
 8021356:	f002 ff2d 	bl	80241b4 <mpool_calloc>
    w->xfadevalue = -1;
 802135a:	4a14      	ldr	r2, [pc, #80]	; (80213ac <tAutotune_initToPool+0x1b4>)
    w->timeindex = 0;
 802135c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    w->delaybuf = (float*) mpool_calloc(sizeof(float) * (LOOPSIZE+16), m);
 8021360:	6230      	str	r0, [r6, #32]
    w->xfadevalue = -1;
 8021362:	61f2      	str	r2, [r6, #28]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 8021364:	f104 0008 	add.w	r0, r4, #8
    w->timeindex = 0;
 8021368:	6073      	str	r3, [r6, #4]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 802136a:	4641      	mov	r1, r8
    w->period = INITPERIOD;
 802136c:	ed86 8a04 	vstr	s16, [r6, #16]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 8021370:	eeb0 0a68 	vmov.f32	s0, s17
    w->readlag = INITPERIOD;
 8021374:	ed86 8a03 	vstr	s16, [r6, #12]
    tHighpass_initToPool(&ps->hp, HPFREQ, mp);
 8021378:	f001 fb40 	bl	80229fc <tHighpass_initToPool>
    _tSOLAD* w = *wp;
 802137c:	6863      	ldr	r3, [r4, #4]
    w->pitchfactor = pitchfactor;
 802137e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021382:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < r->numVoices; ++i)
 8021384:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8021386:	42bb      	cmp	r3, r7
 8021388:	dcad      	bgt.n	80212e6 <tAutotune_initToPool+0xee>
    r->inputPeriod = 0.0f;
 802138a:	2200      	movs	r2, #0
    r->shiftOn = 0;
 802138c:	2300      	movs	r3, #0
    r->inputPeriod = 0.0f;
 802138e:	636a      	str	r2, [r5, #52]	; 0x34
    r->shiftOn = 0;
 8021390:	63ab      	str	r3, [r5, #56]	; 0x38
}
 8021392:	b005      	add	sp, #20
 8021394:	ecbd 8b02 	vpop	{d8}
 8021398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802139c:	200194e0 	.word	0x200194e0
 80213a0:	42c80000 	.word	0x42c80000
 80213a4:	42800000 	.word	0x42800000
 80213a8:	42200000 	.word	0x42200000
 80213ac:	bf800000 	.word	0xbf800000

080213b0 <tAutotune_init>:
{
 80213b0:	b510      	push	{r4, lr}
    tAutotune_initToPool(rt, numVoices, bufSize, frameSize, &leaf.mempool);
 80213b2:	4c03      	ldr	r4, [pc, #12]	; (80213c0 <tAutotune_init+0x10>)
{
 80213b4:	b082      	sub	sp, #8
    tAutotune_initToPool(rt, numVoices, bufSize, frameSize, &leaf.mempool);
 80213b6:	9400      	str	r4, [sp, #0]
 80213b8:	f7ff ff1e 	bl	80211f8 <tAutotune_initToPool>
}
 80213bc:	b002      	add	sp, #8
 80213be:	bd10      	pop	{r4, pc}
 80213c0:	200194f8 	.word	0x200194f8

080213c4 <tAutotune_free>:
{
 80213c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tAutotune* r = *rt;
 80213c6:	6804      	ldr	r4, [r0, #0]
    tPeriodDetection_free(&r->pd);
 80213c8:	1d20      	adds	r0, r4, #4
 80213ca:	f7fd feab 	bl	801f124 <tPeriodDetection_free>
    for (int i = 0; i < r->numVoices; ++i)
 80213ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80213d0:	2b00      	cmp	r3, #0
 80213d2:	dd1e      	ble.n	8021412 <tAutotune_free+0x4e>
 80213d4:	2500      	movs	r5, #0
    _tPitchShift* ps = *psr;
 80213d6:	68a3      	ldr	r3, [r4, #8]
 80213d8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
    _tSOLAD* w = *wp;
 80213dc:	6877      	ldr	r7, [r6, #4]
    mpool_free((char*)w->delaybuf, w->mempool);
 80213de:	6839      	ldr	r1, [r7, #0]
 80213e0:	6a38      	ldr	r0, [r7, #32]
 80213e2:	f002 ff39 	bl	8024258 <mpool_free>
    mpool_free((char*)w, w->mempool);
 80213e6:	6839      	ldr	r1, [r7, #0]
 80213e8:	4638      	mov	r0, r7
 80213ea:	f002 ff35 	bl	8024258 <mpool_free>
    tHighpass_free(&ps->hp);
 80213ee:	f106 0008 	add.w	r0, r6, #8
 80213f2:	f001 fb23 	bl	8022a3c <tHighpass_free>
    mpool_free((char*)ps, ps->mempool);
 80213f6:	6831      	ldr	r1, [r6, #0]
 80213f8:	4630      	mov	r0, r6
 80213fa:	f002 ff2d 	bl	8024258 <mpool_free>
        mpool_free((char*)r->outBuffers[i], r->mempool);
 80213fe:	6923      	ldr	r3, [r4, #16]
 8021400:	6821      	ldr	r1, [r4, #0]
 8021402:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    for (int i = 0; i < r->numVoices; ++i)
 8021406:	3501      	adds	r5, #1
        mpool_free((char*)r->outBuffers[i], r->mempool);
 8021408:	f002 ff26 	bl	8024258 <mpool_free>
    for (int i = 0; i < r->numVoices; ++i)
 802140c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802140e:	42ab      	cmp	r3, r5
 8021410:	dce1      	bgt.n	80213d6 <tAutotune_free+0x12>
    mpool_free((char*)r->tickOutput, r->mempool);
 8021412:	6821      	ldr	r1, [r4, #0]
 8021414:	6960      	ldr	r0, [r4, #20]
 8021416:	f002 ff1f 	bl	8024258 <mpool_free>
    mpool_free((char*)r->freq, r->mempool);
 802141a:	6821      	ldr	r1, [r4, #0]
 802141c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802141e:	f002 ff1b 	bl	8024258 <mpool_free>
    mpool_free((char*)r->ps, r->mempool);
 8021422:	6821      	ldr	r1, [r4, #0]
 8021424:	68a0      	ldr	r0, [r4, #8]
 8021426:	f002 ff17 	bl	8024258 <mpool_free>
    mpool_free((char*)r->inBuffer, r->mempool);
 802142a:	6821      	ldr	r1, [r4, #0]
 802142c:	68e0      	ldr	r0, [r4, #12]
 802142e:	f002 ff13 	bl	8024258 <mpool_free>
    mpool_free((char*)r->outBuffers, r->mempool);
 8021432:	6821      	ldr	r1, [r4, #0]
 8021434:	6920      	ldr	r0, [r4, #16]
 8021436:	f002 ff0f 	bl	8024258 <mpool_free>
    mpool_free((char*)r, r->mempool);
 802143a:	6821      	ldr	r1, [r4, #0]
 802143c:	4620      	mov	r0, r4
}
 802143e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    mpool_free((char*)r, r->mempool);
 8021442:	f002 bf09 	b.w	8024258 <mpool_free>
 8021446:	bf00      	nop

08021448 <tAutotune_tick>:
{
 8021448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802144c:	ed2d 8b06 	vpush	{d8-d10}
    _tAutotune* r = *rt;
 8021450:	6806      	ldr	r6, [r0, #0]
{
 8021452:	b082      	sub	sp, #8
    float tempPeriod = tPeriodDetection_tick(&r->pd, sample);
 8021454:	1d30      	adds	r0, r6, #4
 8021456:	f7fd fe87 	bl	801f168 <tPeriodDetection_tick>
    if (tempPeriod < 1000.0f) //to avoid trying to follow consonants JS
 802145a:	eddf 7a75 	vldr	s15, [pc, #468]	; 8021630 <tAutotune_tick+0x1e8>
 802145e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021466:	d501      	bpl.n	802146c <tAutotune_tick+0x24>
		r->inputPeriod = tempPeriod;
 8021468:	ed86 0a0d 	vstr	s0, [r6, #52]	; 0x34
	for (int v = 0; v < r->numVoices; ++v)
 802146c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 802146e:	2b00      	cmp	r3, #0
 8021470:	f340 8097 	ble.w	80215a2 <tAutotune_tick+0x15a>
 8021474:	2500      	movs	r5, #0
    if(period > MAXPERIOD) period = MAXPERIOD;
 8021476:	eddf 9a6f 	vldr	s19, [pc, #444]	; 8021634 <tAutotune_tick+0x1ec>
        if (period != 0) ps->pitchFactor = period*freq*leaf.invSampleRate;
 802147a:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802163c <tAutotune_tick+0x1f4>
    return (p->fba == 0 && (p->max > 60 && p->deltamax > 6)) ? 1 : 0;
 802147e:	ed9f aa6e 	vldr	s20, [pc, #440]	; 8021638 <tAutotune_tick+0x1f0>
 8021482:	e006      	b.n	8021492 <tAutotune_tick+0x4a>
		r->tickOutput[v] = tPitchShift_shiftToFreq(&r->ps[v], r->freq[v]);
 8021484:	edc7 8a00 	vstr	s17, [r7]
	for (int v = 0; v < r->numVoices; ++v)
 8021488:	3501      	adds	r5, #1
 802148a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 802148c:	42ab      	cmp	r3, r5
 802148e:	f340 8088 	ble.w	80215a2 <tAutotune_tick+0x15a>
    _tPitchShift* ps = *psr;
 8021492:	68b1      	ldr	r1, [r6, #8]
 8021494:	00ab      	lsls	r3, r5, #2
		r->tickOutput[v] = tPitchShift_shiftToFreq(&r->ps[v], r->freq[v]);
 8021496:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    _tPitchShift* ps = *psr;
 8021498:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]
		r->tickOutput[v] = tPitchShift_shiftToFreq(&r->ps[v], r->freq[v]);
 802149c:	6977      	ldr	r7, [r6, #20]
 802149e:	eb02 0c03 	add.w	ip, r2, r3
    _tPeriodDetection* p = *ps->p;
 80214a2:	68e1      	ldr	r1, [r4, #12]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 80214a4:	f104 0008 	add.w	r0, r4, #8
 80214a8:	6922      	ldr	r2, [r4, #16]
		r->tickOutput[v] = tPitchShift_shiftToFreq(&r->ps[v], r->freq[v]);
 80214aa:	441f      	add	r7, r3
    _tPeriodDetection* p = *ps->p;
 80214ac:	6809      	ldr	r1, [r1, #0]
		r->tickOutput[v] = tPitchShift_shiftToFreq(&r->ps[v], r->freq[v]);
 80214ae:	ed9c 8a00 	vldr	s16, [ip]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 80214b2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    _tPeriodDetection* p = *ps->p;
 80214b4:	9101      	str	r1, [sp, #4]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 80214b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    i = p->i;
 80214ba:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 80214be:	ed92 0a00 	vldr	s0, [r2]
 80214c2:	f001 facf 	bl	8022a64 <tHighpass_tick>
    if (p->indexstore >= ps->frameSize)
 80214c6:	9a01      	ldr	r2, [sp, #4]
 80214c8:	6963      	ldr	r3, [r4, #20]
    out = tHighpass_tick(&ps->hp, ps->outBuffer[iLast]);
 80214ca:	eef0 8a40 	vmov.f32	s17, s0
    if (p->indexstore >= ps->frameSize)
 80214ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80214d0:	429a      	cmp	r2, r3
 80214d2:	dbd7      	blt.n	8021484 <tAutotune_tick+0x3c>
        period = tPeriodDetection_getPeriod(&p);
 80214d4:	a801      	add	r0, sp, #4
 80214d6:	f7fd fed5 	bl	801f284 <tPeriodDetection_getPeriod>
    _tPeriodDetection* p = *ps->p;
 80214da:	68e3      	ldr	r3, [r4, #12]
        period = tPeriodDetection_getPeriod(&p);
 80214dc:	eeb0 9a40 	vmov.f32	s18, s0
    _tPeriodDetection* p = *ps->p;
 80214e0:	f8d3 a000 	ldr.w	sl, [r3]
    envout = tEnvPD_tick(&p->env);
 80214e4:	f10a 0004 	add.w	r0, sl, #4
 80214e8:	f7fd fac2 	bl	801ea70 <tEnvPD_tick>
    if (envout >= 1.0f)
 80214ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80214f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80214f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214f8:	db0f      	blt.n	802151a <tAutotune_tick+0xd2>
        p->lastmax = p->max;
 80214fa:	edda 7a13 	vldr	s15, [sl, #76]	; 0x4c
        if (envout > p->max)
 80214fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
        p->lastmax = p->max;
 8021502:	edca 7a14 	vstr	s15, [sl, #80]	; 0x50
 8021506:	ee30 7a67 	vsub.f32	s14, s0, s15
        if (envout > p->max)
 802150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802150e:	f340 8083 	ble.w	8021618 <tAutotune_tick+0x1d0>
            p->max = envout;
 8021512:	ed8a 0a13 	vstr	s0, [sl, #76]	; 0x4c
        p->deltamax = p->max - p->lastmax;
 8021516:	ed8a 7a15 	vstr	s14, [sl, #84]	; 0x54
    p->fba = p->fba ? (p->fba - 1) : 0;
 802151a:	f89a 3040 	ldrb.w	r3, [sl, #64]	; 0x40
 802151e:	2b00      	cmp	r3, #0
 8021520:	d04c      	beq.n	80215bc <tAutotune_tick+0x174>
 8021522:	3b01      	subs	r3, #1
 8021524:	b2db      	uxtb	r3, r3
 8021526:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
    return (p->fba == 0 && (p->max > 60 && p->deltamax > 6)) ? 1 : 0;
 802152a:	2b00      	cmp	r3, #0
 802152c:	d046      	beq.n	80215bc <tAutotune_tick+0x174>
 802152e:	6862      	ldr	r2, [r4, #4]
 8021530:	9901      	ldr	r1, [sp, #4]
    if(period > MAXPERIOD) period = MAXPERIOD;
 8021532:	88d3      	ldrh	r3, [r2, #6]
    if(period > MINPERIOD) w->period = period;  // ignore period when too small
 8021534:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    if(period > MAXPERIOD) period = MAXPERIOD;
 8021538:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 802153c:	ee07 3a90 	vmov	s15, r3
 8021540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021544:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8021548:	fec7 7ac9 	vminnm.f32	s15, s15, s18
    if(period > MINPERIOD) w->period = period;  // ignore period when too small
 802154c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021554:	dd02      	ble.n	802155c <tAutotune_tick+0x114>
 8021556:	edc2 7a04 	vstr	s15, [r2, #16]
 802155a:	6862      	ldr	r2, [r4, #4]
        if (period != 0) ps->pitchFactor = period*freq*leaf.invSampleRate;
 802155c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8021560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021564:	d023      	beq.n	80215ae <tAutotune_tick+0x166>
 8021566:	edd8 7a01 	vldr	s15, [r8, #4]
 802156a:	ee28 8a27 	vmul.f32	s16, s16, s15
 802156e:	ee28 8a09 	vmul.f32	s16, s16, s18
    if (pitchfactor <= 0.0f) return;
 8021572:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8021576:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
 802157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802157e:	d81a      	bhi.n	80215b6 <tAutotune_tick+0x16e>
        tSOLAD_ioSamples(&ps->sola, &(p->inBuffer[i]), &(ps->outBuffer[i]), ps->frameSize);
 8021580:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8021584:	68c9      	ldr	r1, [r1, #12]
 8021586:	6922      	ldr	r2, [r4, #16]
 8021588:	1d20      	adds	r0, r4, #4
 802158a:	6963      	ldr	r3, [r4, #20]
 802158c:	4449      	add	r1, r9
 802158e:	444a      	add	r2, r9
	for (int v = 0; v < r->numVoices; ++v)
 8021590:	3501      	adds	r5, #1
        tSOLAD_ioSamples(&ps->sola, &(p->inBuffer[i]), &(ps->outBuffer[i]), ps->frameSize);
 8021592:	f7ff fa97 	bl	8020ac4 <tSOLAD_ioSamples>
		r->tickOutput[v] = tPitchShift_shiftToFreq(&r->ps[v], r->freq[v]);
 8021596:	edc7 8a00 	vstr	s17, [r7]
	for (int v = 0; v < r->numVoices; ++v)
 802159a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 802159c:	42ab      	cmp	r3, r5
 802159e:	f73f af78 	bgt.w	8021492 <tAutotune_tick+0x4a>
    return r->tickOutput;
 80215a2:	6970      	ldr	r0, [r6, #20]
}
 80215a4:	b002      	add	sp, #8
 80215a6:	ecbd 8b06 	vpop	{d8-d10}
 80215aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80215ae:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80215b2:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
    w->pitchfactor = pitchfactor;
 80215b6:	ed82 8a02 	vstr	s16, [r2, #8]
 80215ba:	e7e1      	b.n	8021580 <tAutotune_tick+0x138>
    return (p->fba == 0 && (p->max > 60 && p->deltamax > 6)) ? 1 : 0;
 80215bc:	edda 7a13 	vldr	s15, [sl, #76]	; 0x4c
 80215c0:	eef4 7aca 	vcmpe.f32	s15, s20
 80215c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215c8:	ddb1      	ble.n	802152e <tAutotune_tick+0xe6>
 80215ca:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 80215ce:	ed9a 7a15 	vldr	s14, [sl, #84]	; 0x54
 80215d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80215d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215da:	dda8      	ble.n	802152e <tAutotune_tick+0xe6>
            p->fba = 5;
 80215dc:	9901      	ldr	r1, [sp, #4]
 80215de:	2305      	movs	r3, #5
            tSOLAD_setReadLag(&ps->sola, p->windowSize);
 80215e0:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
            p->fba = 5;
 80215e2:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
            tSOLAD_setReadLag(&ps->sola, p->windowSize);
 80215e6:	ee07 2a90 	vmov	s15, r2
    _tSOLAD* w = *wp;
 80215ea:	6862      	ldr	r2, [r4, #4]
            tSOLAD_setReadLag(&ps->sola, p->windowSize);
 80215ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if(readlag < w->readlag)               // do not jump backward, only forward
 80215f0:	ed92 7a03 	vldr	s14, [r2, #12]
 80215f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80215f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215fc:	d599      	bpl.n	8021532 <tAutotune_tick+0xea>
        w->jump = w->readlag - readlag;
 80215fe:	ee37 7a67 	vsub.f32	s14, s14, s15
        w->xfadevalue = 1;
 8021602:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        w->readlag = readlag;
 8021606:	edc2 7a03 	vstr	s15, [r2, #12]
        w->xfadelength = readlag;
 802160a:	edc2 7a06 	vstr	s15, [r2, #24]
        w->jump = w->readlag - readlag;
 802160e:	ed82 7a05 	vstr	s14, [r2, #20]
        w->xfadevalue = 1;
 8021612:	61d3      	str	r3, [r2, #28]
 8021614:	6862      	ldr	r2, [r4, #4]
 8021616:	e78c      	b.n	8021532 <tAutotune_tick+0xea>
            p->deltamax = envout - p->max;
 8021618:	ed8a 7a15 	vstr	s14, [sl, #84]	; 0x54
            p->max = p->max * ps->radius;
 802161c:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8021620:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8021624:	ee36 7ae7 	vsub.f32	s14, s13, s15
 8021628:	edca 6a13 	vstr	s13, [sl, #76]	; 0x4c
 802162c:	e773      	b.n	8021516 <tAutotune_tick+0xce>
 802162e:	bf00      	nop
 8021630:	447a0000 	.word	0x447a0000
 8021634:	3f4ccccd 	.word	0x3f4ccccd
 8021638:	42700000 	.word	0x42700000
 802163c:	200194e0 	.word	0x200194e0

08021640 <tAutotune_setFreq>:
    r->freq[voice] = f;
 8021640:	6803      	ldr	r3, [r0, #0]
 8021642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021644:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8021648:	ed81 0a00 	vstr	s0, [r1]
}
 802164c:	4770      	bx	lr
 802164e:	bf00      	nop

08021650 <tAutotune_setFidelityThreshold>:

void tAutotune_setFidelityThreshold(tAutotune* const rt, float threshold)
{
    _tAutotune* r = *rt;

    tPeriodDetection_setFidelityThreshold(&r->pd, threshold);
 8021650:	6800      	ldr	r0, [r0, #0]
 8021652:	3004      	adds	r0, #4
 8021654:	f7fd be1a 	b.w	801f28c <tPeriodDetection_setFidelityThreshold>

08021658 <tFormantShifter_initToPool>:
{
    tFormantShifter_initToPool(fsr, order, &leaf.mempool);
}

void tFormantShifter_initToPool (tFormantShifter* const fsr, int order, tMempool* const mp)
{
 8021658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802165c:	ed2d 8b06 	vpush	{d8-d10}
    _tMempool* m = *mp;
 8021660:	6815      	ldr	r5, [r2, #0]
{
 8021662:	4688      	mov	r8, r1
 8021664:	4681      	mov	r9, r0
    _tFormantShifter* fs = *fsr = (_tFormantShifter*) mpool_alloc(sizeof(_tFormantShifter), m);
 8021666:	2068      	movs	r0, #104	; 0x68
 8021668:	4629      	mov	r1, r5
{
 802166a:	4616      	mov	r6, r2
    _tFormantShifter* fs = *fsr = (_tFormantShifter*) mpool_alloc(sizeof(_tFormantShifter), m);
 802166c:	f002 fd4c 	bl	8024108 <mpool_alloc>
 8021670:	4604      	mov	r4, r0
 8021672:	f8c9 0000 	str.w	r0, [r9]
    fs->mempool = m;
    
    fs->ford = order;
    fs->fk = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021676:	4629      	mov	r1, r5
 8021678:	ea4f 0088 	mov.w	r0, r8, lsl #2
    fs->ftvec = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
    
    fs->fbuff = (float*) mpool_calloc(sizeof(float*) * fs->ford, m);

    
    fs->falph = powf(0.001f, 10.0f * leaf.invSampleRate);
 802167c:	eddf 9a4d 	vldr	s19, [pc, #308]	; 80217b4 <tFormantShifter_initToPool+0x15c>
    fs->flamb = -(0.8517f*sqrtf(atanf(0.06583f*leaf.sampleRate))-0.1916f);
    fs->fhp = 0.0f;
    fs->flp = 0.0f;
    fs->flpa = powf(0.001f, 10.0f * leaf.invSampleRate);
    fs->fmute = 1.0f;
 8021680:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
    fs->cbi = 0;
    fs->intensity = 1.0f;
    fs->invIntensity = 1.0f;
    tHighpass_initToPool(&fs->hp, 20.0f, mp);
    tHighpass_initToPool(&fs->hp2, 20.0f, mp);
    tFeedbackLeveler_initToPool(&fs->fbl1, 0.8f, .005f, 0.125, 1, mp);
 8021684:	eddf 8a4c 	vldr	s17, [pc, #304]	; 80217b8 <tFormantShifter_initToPool+0x160>
 8021688:	ed9f 8a4c 	vldr	s16, [pc, #304]	; 80217bc <tFormantShifter_initToPool+0x164>
    fs->ford = order;
 802168c:	e9c4 5800 	strd	r5, r8, [r4]
    fs->fk = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021690:	f002 fd90 	bl	80241b4 <mpool_calloc>
    fs->fb = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021694:	6863      	ldr	r3, [r4, #4]
    fs->fk = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021696:	6120      	str	r0, [r4, #16]
    fs->fb = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 8021698:	4629      	mov	r1, r5
 802169a:	0098      	lsls	r0, r3, #2
    fs->falph = powf(0.001f, 10.0f * leaf.invSampleRate);
 802169c:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80217cc <tFormantShifter_initToPool+0x174>
    fs->fb = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216a0:	f002 fd88 	bl	80241b4 <mpool_calloc>
    fs->fc = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216a4:	6863      	ldr	r3, [r4, #4]
    fs->fb = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216a6:	6160      	str	r0, [r4, #20]
    fs->fc = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216a8:	4629      	mov	r1, r5
 80216aa:	0098      	lsls	r0, r3, #2
 80216ac:	f002 fd82 	bl	80241b4 <mpool_calloc>
    fs->frb = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216b0:	6863      	ldr	r3, [r4, #4]
    fs->fc = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216b2:	61a0      	str	r0, [r4, #24]
    fs->frb = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216b4:	4629      	mov	r1, r5
 80216b6:	0098      	lsls	r0, r3, #2
 80216b8:	f002 fd7c 	bl	80241b4 <mpool_calloc>
    fs->frc = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216bc:	6863      	ldr	r3, [r4, #4]
    fs->frb = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216be:	61e0      	str	r0, [r4, #28]
    fs->frc = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216c0:	4629      	mov	r1, r5
 80216c2:	0098      	lsls	r0, r3, #2
 80216c4:	f002 fd76 	bl	80241b4 <mpool_calloc>
    fs->fsig = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216c8:	6863      	ldr	r3, [r4, #4]
    fs->frc = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216ca:	6220      	str	r0, [r4, #32]
    fs->fsig = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216cc:	4629      	mov	r1, r5
 80216ce:	0098      	lsls	r0, r3, #2
 80216d0:	f002 fd70 	bl	80241b4 <mpool_calloc>
    fs->fsmooth = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216d4:	6863      	ldr	r3, [r4, #4]
    fs->fsig = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216d6:	6260      	str	r0, [r4, #36]	; 0x24
    fs->fsmooth = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216d8:	4629      	mov	r1, r5
 80216da:	0098      	lsls	r0, r3, #2
 80216dc:	f002 fd6a 	bl	80241b4 <mpool_calloc>
    fs->ftvec = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216e0:	6863      	ldr	r3, [r4, #4]
    fs->fsmooth = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216e2:	62a0      	str	r0, [r4, #40]	; 0x28
    fs->ftvec = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216e4:	4629      	mov	r1, r5
 80216e6:	0098      	lsls	r0, r3, #2
 80216e8:	f002 fd64 	bl	80241b4 <mpool_calloc>
    fs->fbuff = (float*) mpool_calloc(sizeof(float*) * fs->ford, m);
 80216ec:	6863      	ldr	r3, [r4, #4]
 80216ee:	4629      	mov	r1, r5
    fs->ftvec = (float*) mpool_calloc(sizeof(float) * fs->ford, m);
 80216f0:	63e0      	str	r0, [r4, #60]	; 0x3c
    fs->fbuff = (float*) mpool_calloc(sizeof(float*) * fs->ford, m);
 80216f2:	0098      	lsls	r0, r3, #2
 80216f4:	f002 fd5e 	bl	80241b4 <mpool_calloc>
    fs->falph = powf(0.001f, 10.0f * leaf.invSampleRate);
 80216f8:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80216fc:	ed98 aa01 	vldr	s20, [r8, #4]
 8021700:	eeb0 0a69 	vmov.f32	s0, s19
    fs->fbuff = (float*) mpool_calloc(sizeof(float*) * fs->ford, m);
 8021704:	63a0      	str	r0, [r4, #56]	; 0x38
    fs->falph = powf(0.001f, 10.0f * leaf.invSampleRate);
 8021706:	ee6a 0a20 	vmul.f32	s1, s20, s1
 802170a:	f005 fea5 	bl	8027458 <powf>
 802170e:	eeb0 9a40 	vmov.f32	s18, s0
    fs->flamb = -(0.8517f*sqrtf(atanf(0.06583f*leaf.sampleRate))-0.1916f);
 8021712:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80217c0 <tFormantShifter_initToPool+0x168>
 8021716:	ed98 0a00 	vldr	s0, [r8]
    fs->falph = powf(0.001f, 10.0f * leaf.invSampleRate);
 802171a:	ed84 9a02 	vstr	s18, [r4, #8]
    fs->flamb = -(0.8517f*sqrtf(atanf(0.06583f*leaf.sampleRate))-0.1916f);
 802171e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8021722:	f005 fc19 	bl	8026f58 <atanf>
 8021726:	eef1 6ac0 	vsqrt.f32	s13, s0
 802172a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80217c4 <tFormantShifter_initToPool+0x16c>
    fs->fhp = 0.0f;
 802172e:	2300      	movs	r3, #0
    fs->flamb = -(0.8517f*sqrtf(atanf(0.06583f*leaf.sampleRate))-0.1916f);
 8021730:	eddf 7a25 	vldr	s15, [pc, #148]	; 80217c8 <tFormantShifter_initToPool+0x170>
    fs->flpa = powf(0.001f, 10.0f * leaf.invSampleRate);
 8021734:	ed84 9a0d 	vstr	s18, [r4, #52]	; 0x34
    fs->fhp = 0.0f;
 8021738:	62e3      	str	r3, [r4, #44]	; 0x2c
    fs->fmutealph = powf(0.001f, 1.0f * leaf.invSampleRate);
 802173a:	eef0 0a4a 	vmov.f32	s1, s20
    fs->flp = 0.0f;
 802173e:	6323      	str	r3, [r4, #48]	; 0x30
    fs->fmutealph = powf(0.001f, 1.0f * leaf.invSampleRate);
 8021740:	eeb0 0a69 	vmov.f32	s0, s19
    fs->fmute = 1.0f;
 8021744:	6427      	str	r7, [r4, #64]	; 0x40
    fs->flamb = -(0.8517f*sqrtf(atanf(0.06583f*leaf.sampleRate))-0.1916f);
 8021746:	eee6 7ac7 	vfms.f32	s15, s13, s14
 802174a:	edc4 7a03 	vstr	s15, [r4, #12]
    fs->fmutealph = powf(0.001f, 1.0f * leaf.invSampleRate);
 802174e:	f005 fe83 	bl	8027458 <powf>
    fs->cbi = 0;
 8021752:	2300      	movs	r3, #0
    fs->fmutealph = powf(0.001f, 1.0f * leaf.invSampleRate);
 8021754:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    tHighpass_initToPool(&fs->hp, 20.0f, mp);
 8021758:	4631      	mov	r1, r6
    fs->cbi = 0;
 802175a:	64a3      	str	r3, [r4, #72]	; 0x48
    tHighpass_initToPool(&fs->hp, 20.0f, mp);
 802175c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    fs->intensity = 1.0f;
 8021760:	6527      	str	r7, [r4, #80]	; 0x50
    tHighpass_initToPool(&fs->hp, 20.0f, mp);
 8021762:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
    fs->invIntensity = 1.0f;
 8021766:	6567      	str	r7, [r4, #84]	; 0x54
    tHighpass_initToPool(&fs->hp, 20.0f, mp);
 8021768:	f001 f948 	bl	80229fc <tHighpass_initToPool>
    tHighpass_initToPool(&fs->hp2, 20.0f, mp);
 802176c:	4631      	mov	r1, r6
 802176e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021772:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8021776:	f001 f941 	bl	80229fc <tHighpass_initToPool>
    tFeedbackLeveler_initToPool(&fs->fbl1, 0.8f, .005f, 0.125, 1, mp);
 802177a:	4632      	mov	r2, r6
 802177c:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8021780:	eef0 0a68 	vmov.f32	s1, s17
 8021784:	eeb0 0a48 	vmov.f32	s0, s16
 8021788:	2101      	movs	r1, #1
 802178a:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 802178e:	f7fe fc0f 	bl	801ffb0 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&fs->fbl2, 0.8f, .005f, 0.125, 1, mp);
 8021792:	eef0 0a68 	vmov.f32	s1, s17
 8021796:	eeb0 0a48 	vmov.f32	s0, s16
 802179a:	4632      	mov	r2, r6
 802179c:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80217a0:	2101      	movs	r1, #1
 80217a2:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
}
 80217a6:	ecbd 8b06 	vpop	{d8-d10}
 80217aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    tFeedbackLeveler_initToPool(&fs->fbl2, 0.8f, .005f, 0.125, 1, mp);
 80217ae:	f7fe bbff 	b.w	801ffb0 <tFeedbackLeveler_initToPool>
 80217b2:	bf00      	nop
 80217b4:	3a83126f 	.word	0x3a83126f
 80217b8:	3ba3d70a 	.word	0x3ba3d70a
 80217bc:	3f4ccccd 	.word	0x3f4ccccd
 80217c0:	3d86d1e1 	.word	0x3d86d1e1
 80217c4:	3f5a0903 	.word	0x3f5a0903
 80217c8:	3e4432ca 	.word	0x3e4432ca
 80217cc:	200194e0 	.word	0x200194e0

080217d0 <tFormantShifter_free>:

void tFormantShifter_free (tFormantShifter* const fsr)
{
 80217d0:	b510      	push	{r4, lr}
    _tFormantShifter* fs = *fsr;
 80217d2:	6804      	ldr	r4, [r0, #0]
    
    mpool_free((char*)fs->fk, fs->mempool);
 80217d4:	6821      	ldr	r1, [r4, #0]
 80217d6:	6920      	ldr	r0, [r4, #16]
 80217d8:	f002 fd3e 	bl	8024258 <mpool_free>
    mpool_free((char*)fs->fb, fs->mempool);
 80217dc:	6821      	ldr	r1, [r4, #0]
 80217de:	6960      	ldr	r0, [r4, #20]
 80217e0:	f002 fd3a 	bl	8024258 <mpool_free>
    mpool_free((char*)fs->fc, fs->mempool);
 80217e4:	6821      	ldr	r1, [r4, #0]
 80217e6:	69a0      	ldr	r0, [r4, #24]
 80217e8:	f002 fd36 	bl	8024258 <mpool_free>
    mpool_free((char*)fs->frb, fs->mempool);
 80217ec:	6821      	ldr	r1, [r4, #0]
 80217ee:	69e0      	ldr	r0, [r4, #28]
 80217f0:	f002 fd32 	bl	8024258 <mpool_free>
    mpool_free((char*)fs->frc, fs->mempool);
 80217f4:	6821      	ldr	r1, [r4, #0]
 80217f6:	6a20      	ldr	r0, [r4, #32]
 80217f8:	f002 fd2e 	bl	8024258 <mpool_free>
    mpool_free((char*)fs->fsig, fs->mempool);
 80217fc:	6821      	ldr	r1, [r4, #0]
 80217fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8021800:	f002 fd2a 	bl	8024258 <mpool_free>
    mpool_free((char*)fs->fsmooth, fs->mempool);
 8021804:	6821      	ldr	r1, [r4, #0]
 8021806:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8021808:	f002 fd26 	bl	8024258 <mpool_free>
    mpool_free((char*)fs->ftvec, fs->mempool);
 802180c:	6821      	ldr	r1, [r4, #0]
 802180e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8021810:	f002 fd22 	bl	8024258 <mpool_free>
    mpool_free((char*)fs->fbuff, fs->mempool);
 8021814:	6821      	ldr	r1, [r4, #0]
 8021816:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8021818:	f002 fd1e 	bl	8024258 <mpool_free>
    tHighpass_free(&fs->hp);
 802181c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021820:	f001 f90c 	bl	8022a3c <tHighpass_free>
    tHighpass_free(&fs->hp2);
 8021824:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021828:	f001 f908 	bl	8022a3c <tHighpass_free>
    tFeedbackLeveler_free(&fs->fbl1);
 802182c:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8021830:	f7fe fbe6 	bl	8020000 <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&fs->fbl2);
 8021834:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8021838:	f7fe fbe2 	bl	8020000 <tFeedbackLeveler_free>
    mpool_free((char*)fs, fs->mempool);
 802183c:	6821      	ldr	r1, [r4, #0]
 802183e:	4620      	mov	r0, r4
}
 8021840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)fs, fs->mempool);
 8021844:	f002 bd08 	b.w	8024258 <mpool_free>

08021848 <tFormantShifter_remove>:
{
    return tFormantShifter_add(fsr, tFormantShifter_remove(fsr, in));
}

float tFormantShifter_remove(tFormantShifter* const fsr, float in)
{
 8021848:	b510      	push	{r4, lr}
    _tFormantShifter* fs = *fsr;
 802184a:	6804      	ldr	r4, [r0, #0]
    in = tFeedbackLeveler_tick(&fs->fbl1, in);
 802184c:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8021850:	f7fe fbe6 	bl	8020020 <tFeedbackLeveler_tick>
    in = tHighpass_tick(&fs->hp, in * fs->intensity);
 8021854:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 8021858:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802185c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8021860:	f001 f900 	bl	8022a64 <tHighpass_tick>
    

    float fa, fb, fc, foma, falph, ford, flamb, tf, fk;

    ford = fs->ford;
 8021864:	edd4 7a01 	vldr	s15, [r4, #4]
    foma = (1.0f - falph);
    flamb = fs->flamb;
    
    tf = in;
    
    fa = tf - fs->fhp;
 8021868:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    foma = (1.0f - falph);
 802186c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    ford = fs->ford;
 8021870:	eef8 3ae7 	vcvt.f32.s32	s7, s15
    falph = fs->falph;
 8021874:	ed94 5a02 	vldr	s10, [r4, #8]
    fa = tf - fs->fhp;
 8021878:	ee70 6a66 	vsub.f32	s13, s0, s13
    fs->fhp = tf;
 802187c:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    foma = (1.0f - falph);
 8021880:	ee75 5ac5 	vsub.f32	s11, s11, s10
    flamb = fs->flamb;
 8021884:	ed94 3a03 	vldr	s6, [r4, #12]
    fb = fa;
    for(int i = 0; i < ford; i++)
 8021888:	eef5 3ac0 	vcmpe.f32	s7, #0.0
    fa = tf - fs->fhp;
 802188c:	eeb0 0a66 	vmov.f32	s0, s13
    for(int i = 0; i < ford; i++)
 8021890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021894:	dd53      	ble.n	802193e <tFormantShifter_remove+0xf6>
 8021896:	2100      	movs	r1, #0
        fc = (fb - fs->fc[i])*flamb + fs->fb[i];
        fs->fc[i] = fc;
        fs->fb[i] = fb;
        fk = fa*fc*foma + fs->fk[i]*falph;
        fs->fk[i] = fk;
        tf = fk/(fs->fsig[i] + 0.000001f);
 8021898:	eddf 2a29 	vldr	s5, [pc, #164]	; 8021940 <tFormantShifter_remove+0xf8>
 802189c:	008b      	lsls	r3, r1, #2
        fs->fsig[i] = fa*fa*foma + fs->fsig[i]*falph;
 802189e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    for(int i = 0; i < ford; i++)
 80218a0:	3101      	adds	r1, #1
        fs->fsig[i] = fa*fa*foma + fs->fsig[i]*falph;
 80218a2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80218a6:	441a      	add	r2, r3
        fk = fa*fc*foma + fs->fk[i]*falph;
 80218a8:	ee25 6a80 	vmul.f32	s12, s11, s0
    for(int i = 0; i < ford; i++)
 80218ac:	ee07 1a90 	vmov	s15, r1
 80218b0:	eef8 4ae7 	vcvt.f32.s32	s9, s15
        fs->fsig[i] = fa*fa*foma + fs->fsig[i]*falph;
 80218b4:	edd2 7a00 	vldr	s15, [r2]
 80218b8:	ee65 7a27 	vmul.f32	s15, s10, s15
    for(int i = 0; i < ford; i++)
 80218bc:	eef4 4ae3 	vcmpe.f32	s9, s7
        fs->fsig[i] = fa*fa*foma + fs->fsig[i]*falph;
 80218c0:	eee5 7a87 	vfma.f32	s15, s11, s14
    for(int i = 0; i < ford; i++)
 80218c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        fs->fsig[i] = fa*fa*foma + fs->fsig[i]*falph;
 80218c8:	edc2 7a00 	vstr	s15, [r2]
        fc = (fb - fs->fc[i])*flamb + fs->fb[i];
 80218cc:	e9d4 0205 	ldrd	r0, r2, [r4, #20]
 80218d0:	441a      	add	r2, r3
 80218d2:	4418      	add	r0, r3
 80218d4:	edd2 7a00 	vldr	s15, [r2]
 80218d8:	ed90 7a00 	vldr	s14, [r0]
 80218dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80218e0:	eea7 7a83 	vfma.f32	s14, s15, s6
        fs->fc[i] = fc;
 80218e4:	ed82 7a00 	vstr	s14, [r2]
        fs->fb[i] = fb;
 80218e8:	6962      	ldr	r2, [r4, #20]
 80218ea:	441a      	add	r2, r3
 80218ec:	edc2 6a00 	vstr	s13, [r2]
        fk = fa*fc*foma + fs->fk[i]*falph;
 80218f0:	6922      	ldr	r2, [r4, #16]
 80218f2:	441a      	add	r2, r3
 80218f4:	edd2 6a00 	vldr	s13, [r2]
 80218f8:	ee65 6a26 	vmul.f32	s13, s10, s13
 80218fc:	eee6 6a07 	vfma.f32	s13, s12, s14
        fs->fk[i] = fk;
 8021900:	edc2 6a00 	vstr	s13, [r2]
        tf = tf*foma + fs->fsmooth[i]*falph;
 8021904:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
        tf = fk/(fs->fsig[i] + 0.000001f);
 8021908:	4418      	add	r0, r3
        tf = tf*foma + fs->fsmooth[i]*falph;
 802190a:	441a      	add	r2, r3
        tf = fk/(fs->fsig[i] + 0.000001f);
 802190c:	ed90 6a00 	vldr	s12, [r0]
        tf = tf*foma + fs->fsmooth[i]*falph;
 8021910:	edd2 7a00 	vldr	s15, [r2]
        tf = fk/(fs->fsig[i] + 0.000001f);
 8021914:	ee36 6a22 	vadd.f32	s12, s12, s5
        tf = tf*foma + fs->fsmooth[i]*falph;
 8021918:	ee65 7a27 	vmul.f32	s15, s10, s15
        tf = fk/(fs->fsig[i] + 0.000001f);
 802191c:	ee86 4a86 	vdiv.f32	s8, s13, s12
        fs->fsmooth[i] = tf;
        fs->fbuff[i] = tf;
        fb = fc - tf*fa;
 8021920:	eef0 6a47 	vmov.f32	s13, s14
        tf = tf*foma + fs->fsmooth[i]*falph;
 8021924:	eee5 7a84 	vfma.f32	s15, s11, s8
        fs->fsmooth[i] = tf;
 8021928:	edc2 7a00 	vstr	s15, [r2]
        fb = fc - tf*fa;
 802192c:	eee7 6ac0 	vfms.f32	s13, s15, s0
        fs->fbuff[i] = tf;
 8021930:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        fa = fa - tf*fc;
 8021932:	eea7 0a67 	vfms.f32	s0, s14, s15
        fs->fbuff[i] = tf;
 8021936:	4413      	add	r3, r2
 8021938:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < ford; i++)
 802193c:	d4ae      	bmi.n	802189c <tFormantShifter_remove+0x54>
    }

    //return fa * 0.1f;
    return fa;
}
 802193e:	bd10      	pop	{r4, pc}
 8021940:	358637bd 	.word	0x358637bd

08021944 <tFormantShifter_add>:

float tFormantShifter_add(tFormantShifter* const fsr, float in)
{
 8021944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021946:	ed2d 8b02 	vpush	{d8}
    _tFormantShifter* fs = *fsr;
 802194a:	6804      	ldr	r4, [r0, #0]
    float fa, fb, fc, ford, flpa, flamb, tf, tf2, f0resp, f1resp, frlamb;
    ford = fs->ford;

    flpa = fs->flpa;
    flamb = fs->flamb;
    tf = fs->shiftFactor * (1.0f+flamb)/(1.0f-flamb);
 802194c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    flamb = fs->flamb;
 8021950:	edd4 7a03 	vldr	s15, [r4, #12]
    tf = fs->shiftFactor * (1.0f+flamb)/(1.0f-flamb);
 8021954:	ed94 5a13 	vldr	s10, [r4, #76]	; 0x4c
 8021958:	ee37 6a87 	vadd.f32	s12, s15, s14
    flpa = fs->flpa;
 802195c:	ed94 3a0d 	vldr	s6, [r4, #52]	; 0x34
    tf = fs->shiftFactor * (1.0f+flamb)/(1.0f-flamb);
 8021960:	ee77 6a67 	vsub.f32	s13, s14, s15
    ford = fs->ford;
 8021964:	edd4 7a01 	vldr	s15, [r4, #4]
    tf = fs->shiftFactor * (1.0f+flamb)/(1.0f-flamb);
 8021968:	ee26 6a05 	vmul.f32	s12, s12, s10
    ford = fs->ford;
 802196c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tf = fs->shiftFactor * (1.0f+flamb)/(1.0f-flamb);
 8021970:	eec6 7a26 	vdiv.f32	s15, s12, s13
    frlamb = (tf-1.0f)/(tf+1.0f);
    
    tf2 = in;
    fa = 0.0f;
    fb = fa;
    for (int i=0; i<ford; i++)
 8021974:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8021978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    frlamb = (tf-1.0f)/(tf+1.0f);
 802197c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8021980:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021984:	ee86 5aa7 	vdiv.f32	s10, s13, s15
    for (int i=0; i<ford; i++)
 8021988:	f340 8107 	ble.w	8021b9a <tFormantShifter_add+0x256>
    fb = fa;
 802198c:	eddf 6a87 	vldr	s13, [pc, #540]	; 8021bac <tFormantShifter_add+0x268>
    for (int i=0; i<ford; i++)
 8021990:	2100      	movs	r1, #0
 8021992:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    fa = 0.0f;
 8021994:	eef0 7a66 	vmov.f32	s15, s13
 8021998:	008b      	lsls	r3, r1, #2
    for (int i=0; i<ford; i++)
 802199a:	3101      	adds	r1, #1
    {
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 802199c:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
    for (int i=0; i<ford; i++)
 80219a0:	ee04 1a90 	vmov	s9, r1
        tf = fs->fbuff[i];
        fb = fc - tf*fa;
        fs->ftvec[i] = tf*fc;
 80219a4:	441a      	add	r2, r3
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 80219a6:	18c6      	adds	r6, r0, r3
 80219a8:	441d      	add	r5, r3
        tf = fs->fbuff[i];
 80219aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    for (int i=0; i<ford; i++)
 80219ac:	eef8 4ae4 	vcvt.f32.s32	s9, s9
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 80219b0:	ed96 6a00 	vldr	s12, [r6]
 80219b4:	ed95 7a00 	vldr	s14, [r5]
        tf = fs->fbuff[i];
 80219b8:	4418      	add	r0, r3
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 80219ba:	ee76 6ac6 	vsub.f32	s13, s13, s12
        tf = fs->fbuff[i];
 80219be:	ed90 6a00 	vldr	s12, [r0]
    for (int i=0; i<ford; i++)
 80219c2:	eef4 4ae5 	vcmpe.f32	s9, s11
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 80219c6:	eea6 7a85 	vfma.f32	s14, s13, s10
    for (int i=0; i<ford; i++)
 80219ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        fs->ftvec[i] = tf*fc;
 80219ce:	ee27 4a06 	vmul.f32	s8, s14, s12
        fb = fc - tf*fa;
 80219d2:	eea6 7a67 	vfms.f32	s14, s12, s15
        fs->ftvec[i] = tf*fc;
 80219d6:	ed82 4a00 	vstr	s8, [r2]
        fa = fa - fs->ftvec[i];
 80219da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80219dc:	4413      	add	r3, r2
        fb = fc - tf*fa;
 80219de:	eef0 6a47 	vmov.f32	s13, s14
        fa = fa - fs->ftvec[i];
 80219e2:	ed93 7a00 	vldr	s14, [r3]
 80219e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    for (int i=0; i<ford; i++)
 80219ea:	d4d5      	bmi.n	8021998 <tFormantShifter_add+0x54>
 80219ec:	eeb1 7a67 	vneg.f32	s14, s15
    }
    tf = -fa;
    for (int i=ford-1; i>=0; i--)
 80219f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80219f4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80219f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80219fc:	ee17 7a90 	vmov	r7, s15
 8021a00:	2f00      	cmp	r7, #0
 8021a02:	f2c0 80c2 	blt.w	8021b8a <tFormantShifter_add+0x246>
    {
        tf = tf + fs->ftvec[i];
 8021a06:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8021a08:	1c7b      	adds	r3, r7, #1
 8021a0a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8021a0e:	ed71 7a01 	vldmdb	r1!, {s15}
    for (int i=ford-1; i>=0; i--)
 8021a12:	428a      	cmp	r2, r1
        tf = tf + fs->ftvec[i];
 8021a14:	ee37 7a27 	vadd.f32	s14, s14, s15
    for (int i=ford-1; i>=0; i--)
 8021a18:	d1f9      	bne.n	8021a0e <tFormantShifter_add+0xca>
    f0resp = tf;
    
    //  second time: compute 1-response
    fa = 1.0f;
    fb = fa;
    for (int i=0; i<ford; i++)
 8021a1a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8021a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a22:	f340 80bf 	ble.w	8021ba4 <tFormantShifter_add+0x260>
    fb = fa;
 8021a26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    for (int i=0; i<ford; i++)
 8021a2a:	2100      	movs	r1, #0
    fa = 1.0f;
 8021a2c:	eef0 7a46 	vmov.f32	s15, s12
 8021a30:	008b      	lsls	r3, r1, #2
    for (int i=0; i<ford; i++)
 8021a32:	3101      	adds	r1, #1
    {
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8021a34:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
    for (int i=0; i<ford; i++)
 8021a38:	ee04 1a10 	vmov	s8, r1
        tf = fs->fbuff[i];
        fb = fc - tf*fa;
        fs->ftvec[i] = tf*fc;
 8021a3c:	441a      	add	r2, r3
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8021a3e:	18c6      	adds	r6, r0, r3
 8021a40:	441d      	add	r5, r3
        tf = fs->fbuff[i];
 8021a42:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    for (int i=0; i<ford; i++)
 8021a44:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8021a48:	edd6 4a00 	vldr	s9, [r6]
 8021a4c:	edd5 6a00 	vldr	s13, [r5]
        tf = fs->fbuff[i];
 8021a50:	4418      	add	r0, r3
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8021a52:	ee36 6a64 	vsub.f32	s12, s12, s9
        tf = fs->fbuff[i];
 8021a56:	edd0 4a00 	vldr	s9, [r0]
    for (int i=0; i<ford; i++)
 8021a5a:	eeb4 4ae5 	vcmpe.f32	s8, s11
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8021a5e:	eee6 6a05 	vfma.f32	s13, s12, s10
    for (int i=0; i<ford; i++)
 8021a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        fs->ftvec[i] = tf*fc;
 8021a66:	ee66 3aa4 	vmul.f32	s7, s13, s9
        fb = fc - tf*fa;
 8021a6a:	eee4 6ae7 	vfms.f32	s13, s9, s15
        fs->ftvec[i] = tf*fc;
 8021a6e:	edc2 3a00 	vstr	s7, [r2]
        fa = fa - fs->ftvec[i];
 8021a72:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8021a74:	4413      	add	r3, r2
        fb = fc - tf*fa;
 8021a76:	eeb0 6a66 	vmov.f32	s12, s13
        fa = fa - fs->ftvec[i];
 8021a7a:	edd3 6a00 	vldr	s13, [r3]
 8021a7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
    for (int i=0; i<ford; i++)
 8021a82:	d4d5      	bmi.n	8021a30 <tFormantShifter_add+0xec>
    }
    tf = -fa;
    for (int i=ford-1; i>=0; i--)
 8021a84:	2f00      	cmp	r7, #0
 8021a86:	eef1 7a67 	vneg.f32	s15, s15
 8021a8a:	db08      	blt.n	8021a9e <tFormantShifter_add+0x15a>
 8021a8c:	1c7b      	adds	r3, r7, #1
 8021a8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    {
        tf = tf + fs->ftvec[i];
 8021a92:	ed73 6a01 	vldmdb	r3!, {s13}
    for (int i=ford-1; i>=0; i--)
 8021a96:	429a      	cmp	r2, r3
        tf = tf + fs->ftvec[i];
 8021a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
    for (int i=ford-1; i>=0; i--)
 8021a9c:	d1f9      	bne.n	8021a92 <tFormantShifter_add+0x14e>
    f1resp = tf;
    
    //  now solve equations for output, based on 0-response and 1-response
    tf = 2.0f*tf2;
    tf2 = tf;
    tf = (1.0f - f1resp + f0resp);
 8021a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
    if (tf!=0.0f)
 8021aa2:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8021aa6:	eef4 7a66 	vcmp.f32	s15, s13
 8021aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021aae:	d066      	beq.n	8021b7e <tFormantShifter_add+0x23a>
    {
        tf2 = (tf2 + f0resp) / tf;
 8021ab0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    tf = (1.0f - f1resp + f0resp);
 8021ab4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        tf2 = (tf2 + f0resp) / tf;
 8021ab8:	eea0 7a06 	vfma.f32	s14, s0, s12
    tf = (1.0f - f1resp + f0resp);
 8021abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        tf2 = (tf2 + f0resp) / tf;
 8021ac0:	ee87 0a27 	vdiv.f32	s0, s14, s15
    }
    
    //  third time: update delay registers
    fa = tf2;
    fb = fa;
    for (int i=0; i<ford; i++)
 8021ac4:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8021ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021acc:	dd2b      	ble.n	8021b26 <tFormantShifter_add+0x1e2>
    fb = fa;
 8021ace:	eeb0 6a40 	vmov.f32	s12, s0
    for (int i=0; i<ford; i++)
 8021ad2:	2100      	movs	r1, #0
    fa = tf2;
 8021ad4:	eef0 6a40 	vmov.f32	s13, s0
 8021ad8:	008b      	lsls	r3, r1, #2
    for (int i=0; i<ford; i++)
 8021ada:	3101      	adds	r1, #1
    {
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8021adc:	e9d4 0207 	ldrd	r0, r2, [r4, #28]
    for (int i=0; i<ford; i++)
 8021ae0:	ee07 1a90 	vmov	s15, r1
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8021ae4:	441a      	add	r2, r3
 8021ae6:	4418      	add	r0, r3
    for (int i=0; i<ford; i++)
 8021ae8:	eef8 4ae7 	vcvt.f32.s32	s9, s15
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8021aec:	ed92 7a00 	vldr	s14, [r2]
 8021af0:	edd0 7a00 	vldr	s15, [r0]
 8021af4:	ee36 7a47 	vsub.f32	s14, s12, s14
    for (int i=0; i<ford; i++)
 8021af8:	eef4 4ae5 	vcmpe.f32	s9, s11
        fc = (fb-fs->frc[i])*frlamb + fs->frb[i];
 8021afc:	eee7 7a05 	vfma.f32	s15, s14, s10
    for (int i=0; i<ford; i++)
 8021b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        fs->frc[i] = fc;
 8021b04:	edc2 7a00 	vstr	s15, [r2]
        fs->frb[i] = fb;
 8021b08:	69e2      	ldr	r2, [r4, #28]
 8021b0a:	441a      	add	r2, r3
 8021b0c:	ed82 6a00 	vstr	s12, [r2]
        tf = fs->fbuff[i];
        fb = fc - tf*fa;
 8021b10:	eeb0 6a67 	vmov.f32	s12, s15
        tf = fs->fbuff[i];
 8021b14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8021b16:	4413      	add	r3, r2
 8021b18:	ed93 7a00 	vldr	s14, [r3]
        fb = fc - tf*fa;
 8021b1c:	eea7 6a66 	vfms.f32	s12, s14, s13
        fa = fa - tf*fc;
 8021b20:	eee7 6ac7 	vfms.f32	s13, s15, s14
    for (int i=0; i<ford; i++)
 8021b24:	d4d8      	bmi.n	8021ad8 <tFormantShifter_add+0x194>
    tf = tf + flpa * fs->flp;  // lowpass post-emphasis filter
    fs->flp = tf;
    
    // Bring up the gain slowly when formant correction goes from disabled
    // to enabled, while things stabilize.
    if (fs->fmute>0.5f)
 8021b26:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    tf = tf + flpa * fs->flp;  // lowpass post-emphasis filter
 8021b2a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
    if (fs->fmute>0.5f)
 8021b2e:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
    tf = tf + flpa * fs->flp;  // lowpass post-emphasis filter
 8021b32:	eea7 0a03 	vfma.f32	s0, s14, s6
    if (fs->fmute>0.5f)
 8021b36:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8021b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fs->flp = tf;
 8021b3e:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
    if (fs->fmute>0.5f)
 8021b42:	dd1f      	ble.n	8021b84 <tFormantShifter_add+0x240>
    {
        tf = tf*(fs->fmute - 0.5f)*2.0f;
 8021b44:	ee78 7a67 	vsub.f32	s15, s16, s15
 8021b48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8021b4c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8021b50:	f005 fde8 	bl	8027724 <tanhf>
    else
    {
        tf = 0.0f;
    }
    tf2 = fs->fmutealph;
    fs->fmute = (1.0f-tf2) + tf2*fs->fmute;
 8021b54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021b58:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
    // now tf is signal output
    // ...and we're done messing with formants
    //tf = tFeedbackLeveler_tick(&fs->fbl2, tf);
    tf = tHighpass_tick(&fs->hp2, tanhf(tf));
 8021b5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    fs->fmute = (1.0f-tf2) + tf2*fs->fmute;
 8021b60:	ee38 8a67 	vsub.f32	s16, s16, s15
 8021b64:	eee8 7a07 	vfma.f32	s15, s16, s14
 8021b68:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    tf = tHighpass_tick(&fs->hp2, tanhf(tf));
 8021b6c:	f000 ff7a 	bl	8022a64 <tHighpass_tick>

    return tf * fs->invIntensity;
 8021b70:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
}
 8021b74:	ecbd 8b02 	vpop	{d8}
    return tf * fs->invIntensity;
 8021b78:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8021b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tf2 = 0.0f;
 8021b7e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8021bac <tFormantShifter_add+0x268>
 8021b82:	e79f      	b.n	8021ac4 <tFormantShifter_add+0x180>
 8021b84:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8021bac <tFormantShifter_add+0x268>
 8021b88:	e7e4      	b.n	8021b54 <tFormantShifter_add+0x210>
    for (int i=0; i<ford; i++)
 8021b8a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8021b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b92:	dc05      	bgt.n	8021ba0 <tFormantShifter_add+0x25c>
 8021b94:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8021b98:	e781      	b.n	8021a9e <tFormantShifter_add+0x15a>
    for (int i=0; i<ford; i++)
 8021b9a:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8021bac <tFormantShifter_add+0x268>
 8021b9e:	e727      	b.n	80219f0 <tFormantShifter_add+0xac>
 8021ba0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8021ba2:	e740      	b.n	8021a26 <tFormantShifter_add+0xe2>
    for (int i=0; i<ford; i++)
 8021ba4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8021ba8:	e771      	b.n	8021a8e <tFormantShifter_add+0x14a>
 8021baa:	bf00      	nop
 8021bac:	00000000 	.word	0x00000000

08021bb0 <tFormantShifter_setShiftFactor>:

// 1.0f is no change, 2.0f is an octave up, 0.5f is an octave down
void tFormantShifter_setShiftFactor(tFormantShifter* const fsr, float shiftFactor)
{
    _tFormantShifter* fs = *fsr;
 8021bb0:	6803      	ldr	r3, [r0, #0]
    fs->shiftFactor = shiftFactor;
 8021bb2:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 8021bb6:	4770      	bx	lr

08021bb8 <tFormantShifter_setIntensity>:

void tFormantShifter_setIntensity(tFormantShifter* const fsr, float intensity)
{
 8021bb8:	b510      	push	{r4, lr}
    _tFormantShifter* fs = *fsr;



    fs->intensity = LEAF_clip(1.0f, intensity, 100.0f);
 8021bba:	eef0 0a40 	vmov.f32	s1, s0
 8021bbe:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8021bf4 <tFormantShifter_setIntensity+0x3c>
 8021bc2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    _tFormantShifter* fs = *fsr;
 8021bc6:	6804      	ldr	r4, [r0, #0]
    fs->intensity = LEAF_clip(1.0f, intensity, 100.0f);
 8021bc8:	f002 f89e 	bl	8023d08 <LEAF_clip>

   // tFeedbackLeveler_setTargetLevel(&fs->fbl1, fs->intensity);
    //tFeedbackLeveler_setTargetLevel(&fs->fbl2, fs->intensity);
    //make sure you don't divide by zero, doofies
    if (fs->intensity != 0.0f)
 8021bcc:	eeb5 0a40 	vcmp.f32	s0, #0.0
    fs->intensity = LEAF_clip(1.0f, intensity, 100.0f);
 8021bd0:	ed84 0a14 	vstr	s0, [r4, #80]	; 0x50
    if (fs->intensity != 0.0f)
 8021bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bd8:	d104      	bne.n	8021be4 <tFormantShifter_setIntensity+0x2c>
    {
    	fs->invIntensity = 1.0f/fs->intensity;
    }
    else
    {
    	fs->invIntensity = 1.0f;
 8021bda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021bde:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
    }

}
 8021be2:	bd10      	pop	{r4, pc}
    	fs->invIntensity = 1.0f/fs->intensity;
 8021be4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021be8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021bec:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
 8021bf0:	bd10      	pop	{r4, pc}
 8021bf2:	bf00      	nop
 8021bf4:	42c80000 	.word	0x42c80000

08021bf8 <tADSR4_initToPool>:
}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSR4_initToPool    (tADSR4* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
 8021bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bfa:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 8021bfe:	681d      	ldr	r5, [r3, #0]
{
 8021c00:	4614      	mov	r4, r2
 8021c02:	4607      	mov	r7, r0
 8021c04:	460e      	mov	r6, r1
    _tADSR4* adsr = *adsrenv = (_tADSR4*) mpool_alloc(sizeof(_tADSR4), m);
 8021c06:	2050      	movs	r0, #80	; 0x50
 8021c08:	4629      	mov	r1, r5
{
 8021c0a:	eef0 8a61 	vmov.f32	s17, s3
 8021c0e:	eef0 9a40 	vmov.f32	s19, s0
 8021c12:	eeb0 9a60 	vmov.f32	s18, s1
 8021c16:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSR4* adsr = *adsrenv = (_tADSR4*) mpool_alloc(sizeof(_tADSR4), m);
 8021c1a:	f002 fa75 	bl	8024108 <mpool_alloc>

    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->bufferSizeDividedBySampleRateInMs = bufferSize / (leaf.sampleRate * 0.001f);
 8021c1e:	4b20      	ldr	r3, [pc, #128]	; (8021ca0 <tADSR4_initToPool+0xa8>)
 8021c20:	ee07 4a90 	vmov	s15, r4
    _tADSR4* adsr = *adsrenv = (_tADSR4*) mpool_alloc(sizeof(_tADSR4), m);
 8021c24:	6038      	str	r0, [r7, #0]

    adsr->next = 0.0f;

    adsr->whichStage = env_idle;

    adsr->sustain = sustain;
 8021c26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    adsr->bufferSizeDividedBySampleRateInMs = bufferSize / (leaf.sampleRate * 0.001f);
 8021c2a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    adsr->mempool = m;
 8021c2e:	6005      	str	r5, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = bufferSize / (leaf.sampleRate * 0.001f);
 8021c30:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8021ca4 <tADSR4_initToPool+0xac>

    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8021c34:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = bufferSize / (leaf.sampleRate * 0.001f);
 8021c38:	edd3 6a00 	vldr	s13, [r3]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8021c3c:	1e62      	subs	r2, r4, #1
 8021c3e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8021ca8 <tADSR4_initToPool+0xb0>
    adsr->whichStage = env_idle;
 8021c42:	2300      	movs	r3, #0
    adsr->bufferSizeDividedBySampleRateInMs = bufferSize / (leaf.sampleRate * 0.001f);
 8021c44:	ee66 6aa7 	vmul.f32	s13, s13, s15

    adsr->leakFactor = 1.0f;
 8021c48:	ed80 6a13 	vstr	s12, [r0, #76]	; 0x4c
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8021c4c:	fec9 9a87 	vmaxnm.f32	s19, s19, s14
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8021c50:	fe89 9a07 	vmaxnm.f32	s18, s18, s14
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8021c54:	fec8 1a87 	vmaxnm.f32	s3, s17, s14
 8021c58:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    adsr->bufferSizeDividedBySampleRateInMs = bufferSize / (leaf.sampleRate * 0.001f);
 8021c5c:	eec5 7a26 	vdiv.f32	s15, s10, s13
    adsr->sustain = sustain;
 8021c60:	fe88 8a46 	vminnm.f32	s16, s16, s12
    adsr->next = 0.0f;
 8021c64:	ed80 7a05 	vstr	s14, [r0, #20]
    adsr->exp_buff = expBuffer;
 8021c68:	6046      	str	r6, [r0, #4]
    adsr->buff_size = bufferSize;
 8021c6a:	6084      	str	r4, [r0, #8]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8021c6c:	60c2      	str	r2, [r0, #12]
    adsr->whichStage = env_idle;
 8021c6e:	6283      	str	r3, [r0, #40]	; 0x28
    adsr->sustain = sustain;
 8021c70:	ed80 8a0b 	vstr	s16, [r0, #44]	; 0x2c
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8021c74:	ee87 6aa9 	vdiv.f32	s12, s15, s19
    adsr->bufferSizeDividedBySampleRateInMs = bufferSize / (leaf.sampleRate * 0.001f);
 8021c78:	edc0 7a04 	vstr	s15, [r0, #16]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8021c7c:	eec7 6a89 	vdiv.f32	s13, s15, s18
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8021c80:	ee87 7aa1 	vdiv.f32	s14, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8021c84:	ee67 7aa5 	vmul.f32	s15, s15, s11
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8021c88:	ed80 6a06 	vstr	s12, [r0, #24]
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8021c8c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8021c90:	edc0 6a07 	vstr	s13, [r0, #28]
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8021c94:	ed80 7a08 	vstr	s14, [r0, #32]
}
 8021c98:	ecbd 8b04 	vpop	{d8-d9}
 8021c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021c9e:	bf00      	nop
 8021ca0:	200194e0 	.word	0x200194e0
 8021ca4:	3a83126f 	.word	0x3a83126f
 8021ca8:	00000000 	.word	0x00000000

08021cac <tADSR4_free>:

void    tADSR4_free  (tADSR4* const adsrenv)
{
    _tADSR4* adsr = *adsrenv;
 8021cac:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)adsr, adsr->mempool);
 8021cae:	6801      	ldr	r1, [r0, #0]
 8021cb0:	f002 bad2 	b.w	8024258 <mpool_free>

08021cb4 <tADSR4_setAttack>:
}

void     tADSR4_setAttack(tADSR4* const adsrenv, float attack)
{
    _tADSR4* adsr = *adsrenv;
 8021cb4:	6803      	ldr	r3, [r0, #0]
    if (attack < 0.0f)
    {
        attack = 0.0f;
    }

    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8021cb6:	eddf 7a05 	vldr	s15, [pc, #20]	; 8021ccc <tADSR4_setAttack+0x18>
 8021cba:	ed93 7a04 	vldr	s14, [r3, #16]
 8021cbe:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 8021cc2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021cc6:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8021cca:	4770      	bx	lr
 8021ccc:	00000000 	.word	0x00000000

08021cd0 <tADSR4_setDecay>:

void     tADSR4_setDecay(tADSR4* const adsrenv, float decay)
{
    _tADSR4* adsr = *adsrenv;
 8021cd0:	6803      	ldr	r3, [r0, #0]

    if (decay < 0.0f)
    {
        decay = 0.0f;
    }
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8021cd2:	eddf 7a05 	vldr	s15, [pc, #20]	; 8021ce8 <tADSR4_setDecay+0x18>
 8021cd6:	ed93 7a04 	vldr	s14, [r3, #16]
 8021cda:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 8021cde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021ce2:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8021ce6:	4770      	bx	lr
 8021ce8:	00000000 	.word	0x00000000

08021cec <tADSR4_setSustain>:

void     tADSR4_setSustain(tADSR4* const adsrenv, float sustain)
{
    _tADSR4* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8021cec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSR4* adsr = *adsrenv;
 8021cf0:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8021cf2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021cfa:	dd02      	ble.n	8021d02 <tADSR4_setSustain+0x16>
 8021cfc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 8021d00:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 8021d02:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021d06:	2200      	movs	r2, #0
 8021d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d0c:	bf4c      	ite	mi
 8021d0e:	62da      	strmi	r2, [r3, #44]	; 0x2c
    else                     adsr->sustain = sustain;
 8021d10:	ed83 0a0b 	vstrpl	s0, [r3, #44]	; 0x2c
}
 8021d14:	4770      	bx	lr
 8021d16:	bf00      	nop

08021d18 <tADSR4_setRelease>:

void     tADSR4_setRelease(tADSR4* const adsrenv, float release)
{
    _tADSR4* adsr = *adsrenv;
 8021d18:	6803      	ldr	r3, [r0, #0]

    if (release < 0.0f)
    {
        release = 0.0f;
    }
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8021d1a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8021d30 <tADSR4_setRelease+0x18>
 8021d1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8021d22:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 8021d26:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021d2a:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8021d2e:	4770      	bx	lr
 8021d30:	00000000 	.word	0x00000000

08021d34 <tADSR4_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSR4_setLeakFactor(tADSR4* const adsrenv, float leakFactor)
{
    _tADSR4* adsr = *adsrenv;
 8021d34:	6803      	ldr	r3, [r0, #0]


    adsr->leakFactor = leakFactor;
 8021d36:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 8021d3a:	4770      	bx	lr

08021d3c <tADSR4_on>:

void tADSR4_on(tADSR4* const adsrenv, float velocity)
{
    _tADSR4* adsr = *adsrenv;
 8021d3c:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 8021d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8021d40:	b942      	cbnz	r2, 8021d54 <tADSR4_on+0x18>
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
    }
    else // Normal start.
    {
        adsr->whichStage = env_attack;
 8021d42:	2101      	movs	r1, #1
    }

    adsr->attackPhase = 0;
 8021d44:	2200      	movs	r2, #0
 8021d46:	6299      	str	r1, [r3, #40]	; 0x28
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 8021d48:	ed83 0a0c 	vstr	s0, [r3, #48]	; 0x30
    adsr->attackPhase = 0;
 8021d4c:	63da      	str	r2, [r3, #60]	; 0x3c
    adsr->decayPhase = 0;
 8021d4e:	641a      	str	r2, [r3, #64]	; 0x40
    adsr->releasePhase = 0;
 8021d50:	645a      	str	r2, [r3, #68]	; 0x44
}
 8021d52:	4770      	bx	lr
        adsr->rampPhase = 0;
 8021d54:	2000      	movs	r0, #0
        adsr->rampPeak = adsr->next;
 8021d56:	695a      	ldr	r2, [r3, #20]
        adsr->whichStage = env_ramp;
 8021d58:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 8021d5a:	6498      	str	r0, [r3, #72]	; 0x48
        adsr->rampPeak = adsr->next;
 8021d5c:	635a      	str	r2, [r3, #52]	; 0x34
 8021d5e:	e7f1      	b.n	8021d44 <tADSR4_on+0x8>

08021d60 <tADSR4_off>:

void tADSR4_off(tADSR4* const adsrenv)
{
    _tADSR4* adsr = *adsrenv;
 8021d60:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 8021d62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8021d64:	b11a      	cbz	r2, 8021d6e <tADSR4_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 8021d66:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 8021d68:	695a      	ldr	r2, [r3, #20]
        adsr->whichStage = env_release;
 8021d6a:	6299      	str	r1, [r3, #40]	; 0x28
        adsr->releasePeak = adsr->next;
 8021d6c:	639a      	str	r2, [r3, #56]	; 0x38
    }
}
 8021d6e:	4770      	bx	lr

08021d70 <tADSR4_tick>:

float   tADSR4_tick(tADSR4* const adsrenv)
{
 8021d70:	b510      	push	{r4, lr}
    _tADSR4* adsr = *adsrenv;
 8021d72:	6804      	ldr	r4, [r0, #0]
{
 8021d74:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
 8021d78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021d7a:	3b01      	subs	r3, #1
 8021d7c:	2b04      	cmp	r3, #4
 8021d7e:	f200 808c 	bhi.w	8021e9a <tADSR4_tick+0x12a>
 8021d82:	e8df f003 	tbb	[pc, r3]
 8021d86:	4b22      	.short	0x4b22
 8021d88:	6b3e      	.short	0x6b3e
 8021d8a:	03          	.byte	0x03
 8021d8b:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 8021d8c:	edd4 7a03 	vldr	s15, [r4, #12]
 8021d90:	ed94 1a12 	vldr	s2, [r4, #72]	; 0x48
 8021d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021d98:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8021d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021da0:	f340 80e3 	ble.w	8021f6a <tADSR4_tick+0x1fa>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
 8021da4:	eddf 7aa0 	vldr	s15, [pc, #640]	; 8022028 <tADSR4_tick+0x2b8>
                adsr->whichStage = env_attack;
 8021da8:	2301      	movs	r3, #1
 8021daa:	eeb0 8a67 	vmov.f32	s16, s15
 8021dae:	62a3      	str	r3, [r4, #40]	; 0x28
                adsr->next = 0.0f;
 8021db0:	edc4 7a05 	vstr	s15, [r4, #20]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 8021db4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 8021db8:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->rampPhase += adsr->rampInc;
 8021dbc:	ee37 1a81 	vadd.f32	s2, s15, s2
 8021dc0:	ed84 1a12 	vstr	s2, [r4, #72]	; 0x48
}
 8021dc4:	ecbd 8b02 	vpop	{d8}
 8021dc8:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 8021dca:	edd4 7a03 	vldr	s15, [r4, #12]
 8021dce:	ed94 1a0f 	vldr	s2, [r4, #60]	; 0x3c
 8021dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021dd6:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
 8021dda:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8021dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021de2:	dd61      	ble.n	8021ea8 <tADSR4_tick+0x138>
                adsr->whichStage = env_decay;
 8021de4:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
 8021de6:	ed84 8a05 	vstr	s16, [r4, #20]
                adsr->whichStage = env_decay;
 8021dea:	62a3      	str	r3, [r4, #40]	; 0x28
            adsr->attackPhase += adsr->attackInc;
 8021dec:	edd4 7a06 	vldr	s15, [r4, #24]
}
 8021df0:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->attackPhase += adsr->attackInc;
 8021df4:	ee37 1a81 	vadd.f32	s2, s15, s2
 8021df8:	ed84 1a0f 	vstr	s2, [r4, #60]	; 0x3c
}
 8021dfc:	ecbd 8b02 	vpop	{d8}
 8021e00:	bd10      	pop	{r4, pc}
            adsr->next = adsr->next * adsr->leakFactor;
 8021e02:	ed94 8a05 	vldr	s16, [r4, #20]
 8021e06:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 8021e0a:	ee28 8a27 	vmul.f32	s16, s16, s15
}
 8021e0e:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->next = adsr->next * adsr->leakFactor;
 8021e12:	ed84 8a05 	vstr	s16, [r4, #20]
}
 8021e16:	ecbd 8b02 	vpop	{d8}
 8021e1a:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8021e1c:	edd4 7a03 	vldr	s15, [r4, #12]
 8021e20:	ed94 1a10 	vldr	s2, [r4, #64]	; 0x40
 8021e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021e28:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8021e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e30:	dd66      	ble.n	8021f00 <tADSR4_tick+0x190>
                adsr->next = adsr->gain * adsr->sustain;
 8021e32:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
                adsr->whichStage = env_sustain;
 8021e36:	2303      	movs	r3, #3
                adsr->next = adsr->gain * adsr->sustain;
 8021e38:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
                adsr->whichStage = env_sustain;
 8021e3c:	62a3      	str	r3, [r4, #40]	; 0x28
                adsr->next = adsr->gain * adsr->sustain;
 8021e3e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8021e42:	ed84 8a05 	vstr	s16, [r4, #20]
            adsr->decayPhase += adsr->decayInc;
 8021e46:	edd4 7a07 	vldr	s15, [r4, #28]
}
 8021e4a:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->decayPhase += adsr->decayInc;
 8021e4e:	ee37 1a81 	vadd.f32	s2, s15, s2
 8021e52:	ed84 1a10 	vstr	s2, [r4, #64]	; 0x40
}
 8021e56:	ecbd 8b02 	vpop	{d8}
 8021e5a:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8021e5c:	edd4 7a03 	vldr	s15, [r4, #12]
 8021e60:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
 8021e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021e68:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8021e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e70:	f340 80a4 	ble.w	8021fbc <tADSR4_tick+0x24c>
                adsr->next = 0.0f;
 8021e74:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8022028 <tADSR4_tick+0x2b8>
                adsr->whichStage = env_idle;
 8021e78:	2300      	movs	r3, #0
 8021e7a:	eeb0 8a67 	vmov.f32	s16, s15
 8021e7e:	62a3      	str	r3, [r4, #40]	; 0x28
                adsr->next = 0.0f;
 8021e80:	edc4 7a05 	vstr	s15, [r4, #20]
            adsr->releasePhase += adsr->releaseInc;
 8021e84:	edd4 7a08 	vldr	s15, [r4, #32]
}
 8021e88:	eeb0 0a48 	vmov.f32	s0, s16
            adsr->releasePhase += adsr->releaseInc;
 8021e8c:	ee37 1a81 	vadd.f32	s2, s15, s2
 8021e90:	ed84 1a11 	vstr	s2, [r4, #68]	; 0x44
}
 8021e94:	ecbd 8b02 	vpop	{d8}
 8021e98:	bd10      	pop	{r4, pc}
 8021e9a:	ed94 8a05 	vldr	s16, [r4, #20]
 8021e9e:	eeb0 0a48 	vmov.f32	s0, s16
 8021ea2:	ecbd 8b02 	vpop	{d8}
 8021ea6:	bd10      	pop	{r4, pc}
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8021ea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021eac:	6862      	ldr	r2, [r4, #4]
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 8021eae:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8021eb2:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->attackPhase - intPart;
 8021eb6:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8021eba:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->attackPhase - intPart;
 8021ebe:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8021ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ec6:	f100 80ab 	bmi.w	8022020 <tADSR4_tick+0x2b0>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 8021eca:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8021ece:	ee17 3a90 	vmov	r3, s15
 8021ed2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021ed6:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
 8021eda:	ee16 3a90 	vmov	r3, s13
 8021ede:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021ee2:	ed92 0a00 	vldr	s0, [r2]
 8021ee6:	f002 f845 	bl	8023f74 <LEAF_interpolation_linear>
 8021eea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021eee:	ed94 1a0f 	vldr	s2, [r4, #60]	; 0x3c
 8021ef2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8021ef6:	ee28 8a00 	vmul.f32	s16, s16, s0
 8021efa:	ed84 8a05 	vstr	s16, [r4, #20]
 8021efe:	e775      	b.n	8021dec <tADSR4_tick+0x7c>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8021f00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021f04:	6862      	ldr	r2, [r4, #4]
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 8021f06:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8021f0a:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->decayPhase - intPart;
 8021f0e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8021f12:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->decayPhase - intPart;
 8021f16:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8021f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f1e:	d47c      	bmi.n	802201a <tADSR4_tick+0x2aa>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 8021f20:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8021f24:	ee17 3a90 	vmov	r3, s15
 8021f28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021f2c:	edd3 0a00 	vldr	s1, [r3]
                float interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart));
 8021f30:	ee16 3a90 	vmov	r3, s13
 8021f34:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021f38:	ed92 0a00 	vldr	s0, [r2]
 8021f3c:	f002 f81a 	bl	8023f74 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 8021f40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021f44:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8021f48:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8021f4c:	ee37 7a48 	vsub.f32	s14, s14, s16
 8021f50:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
 8021f54:	ed94 1a10 	vldr	s2, [r4, #64]	; 0x40
 8021f58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021f5c:	eea7 8a00 	vfma.f32	s16, s14, s0
 8021f60:	ee27 8a88 	vmul.f32	s16, s15, s16
 8021f64:	ed84 8a05 	vstr	s16, [r4, #20]
 8021f68:	e76d      	b.n	8021e46 <tADSR4_tick+0xd6>
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8021f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021f6e:	6862      	ldr	r2, [r4, #4]
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 8021f70:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8021f74:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->rampPhase - intPart;
 8021f78:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8021f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->rampPhase - intPart;
 8021f80:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8021f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f88:	d444      	bmi.n	8022014 <tADSR4_tick+0x2a4>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8021f8a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8021f8e:	ee17 3a90 	vmov	r3, s15
 8021f92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021f96:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
 8021f9a:	ee16 3a90 	vmov	r3, s13
 8021f9e:	ed94 8a0d 	vldr	s16, [r4, #52]	; 0x34
 8021fa2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021fa6:	ed92 0a00 	vldr	s0, [r2]
 8021faa:	f001 ffe3 	bl	8023f74 <LEAF_interpolation_linear>
 8021fae:	ee28 8a00 	vmul.f32	s16, s16, s0
 8021fb2:	ed94 1a12 	vldr	s2, [r4, #72]	; 0x48
 8021fb6:	ed84 8a05 	vstr	s16, [r4, #20]
 8021fba:	e6fb      	b.n	8021db4 <tADSR4_tick+0x44>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8021fbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021fc0:	6862      	ldr	r2, [r4, #4]
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 8021fc2:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8021fc6:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->releasePhase - intPart;
 8021fca:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8021fce:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->releasePhase - intPart;
 8021fd2:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8021fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021fda:	d418      	bmi.n	802200e <tADSR4_tick+0x29e>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 8021fdc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8021fe0:	ee17 3a90 	vmov	r3, s15
 8021fe4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021fe8:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
 8021fec:	ee16 3a90 	vmov	r3, s13
 8021ff0:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
 8021ff4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021ff8:	ed92 0a00 	vldr	s0, [r2]
 8021ffc:	f001 ffba 	bl	8023f74 <LEAF_interpolation_linear>
 8022000:	ee28 8a00 	vmul.f32	s16, s16, s0
 8022004:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
 8022008:	ed84 8a05 	vstr	s16, [r4, #20]
 802200c:	e73a      	b.n	8021e84 <tADSR4_tick+0x114>
                    secondValue = 0.0f;
 802200e:	eddf 0a06 	vldr	s1, [pc, #24]	; 8022028 <tADSR4_tick+0x2b8>
 8022012:	e7eb      	b.n	8021fec <tADSR4_tick+0x27c>
                    secondValue = 0.0f;
 8022014:	eddf 0a04 	vldr	s1, [pc, #16]	; 8022028 <tADSR4_tick+0x2b8>
 8022018:	e7bf      	b.n	8021f9a <tADSR4_tick+0x22a>
                    secondValue = 0.0f;
 802201a:	eddf 0a03 	vldr	s1, [pc, #12]	; 8022028 <tADSR4_tick+0x2b8>
 802201e:	e787      	b.n	8021f30 <tADSR4_tick+0x1c0>
                    secondValue = 0.0f;
 8022020:	eddf 0a01 	vldr	s1, [pc, #4]	; 8022028 <tADSR4_tick+0x2b8>
 8022024:	e759      	b.n	8021eda <tADSR4_tick+0x16a>
 8022026:	bf00      	nop
 8022028:	00000000 	.word	0x00000000

0802202c <tADSR4_tickNoInterp>:

float   tADSR4_tickNoInterp(tADSR4* const adsrenv)
{
    _tADSR4* adsr = *adsrenv;
 802202c:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 802202e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022030:	3a01      	subs	r2, #1
 8022032:	2a04      	cmp	r2, #4
 8022034:	d872      	bhi.n	802211c <tADSR4_tickNoInterp+0xf0>
 8022036:	e8df f002 	tbb	[pc, r2]
 802203a:	3d1c      	.short	0x3d1c
 802203c:	5934      	.short	0x5934
 802203e:	03          	.byte	0x03
 802203f:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 8022040:	edd3 7a03 	vldr	s15, [r3, #12]
 8022044:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8022048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802204c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8022050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022054:	f340 808b 	ble.w	802216e <tADSR4_tickNoInterp+0x142>
            {
                adsr->whichStage = env_attack;
 8022058:	2201      	movs	r2, #1
                adsr->next = 0.0f;
 802205a:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80221a8 <tADSR4_tickNoInterp+0x17c>
                adsr->whichStage = env_attack;
 802205e:	629a      	str	r2, [r3, #40]	; 0x28
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 8022060:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8022064:	ed83 0a05 	vstr	s0, [r3, #20]
 8022068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802206c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
            break;
 8022070:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 8022072:	edd3 7a03 	vldr	s15, [r3, #12]
 8022076:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 802207a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802207e:	ed93 0a0c 	vldr	s0, [r3, #48]	; 0x30
 8022082:	eef4 6ac7 	vcmpe.f32	s13, s14
 8022086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802208a:	dd4a      	ble.n	8022122 <tADSR4_tickNoInterp+0xf6>
            {
                adsr->whichStage = env_decay;
 802208c:	2202      	movs	r2, #2
 802208e:	629a      	str	r2, [r3, #40]	; 0x28
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 8022090:	edd3 7a06 	vldr	s15, [r3, #24]
 8022094:	ed83 0a05 	vstr	s0, [r3, #20]
 8022098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802209c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
            break;
 80220a0:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->next = adsr->next * adsr->leakFactor;
 80220a2:	ed93 0a05 	vldr	s0, [r3, #20]
 80220a6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80220aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80220ae:	ed83 0a05 	vstr	s0, [r3, #20]
            break;
 80220b2:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 80220b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80220b8:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80220bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80220c0:	ed93 0a0b 	vldr	s0, [r3, #44]	; 0x2c
 80220c4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80220c8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80220cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220d0:	dd37      	ble.n	8022142 <tADSR4_tickNoInterp+0x116>
                adsr->next = adsr->gain * adsr->sustain;
 80220d2:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
 80220d6:	2203      	movs	r2, #3
 80220d8:	629a      	str	r2, [r3, #40]	; 0x28
            adsr->decayPhase += adsr->decayInc;
 80220da:	edd3 7a07 	vldr	s15, [r3, #28]
 80220de:	ed83 0a05 	vstr	s0, [r3, #20]
 80220e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80220e6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
            break;
 80220ea:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 80220ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80220f0:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80220f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80220f8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80220fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022100:	dd43      	ble.n	802218a <tADSR4_tickNoInterp+0x15e>
            {
                adsr->whichStage = env_idle;
 8022102:	2200      	movs	r2, #0
                adsr->next = 0.0f;
 8022104:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80221a8 <tADSR4_tickNoInterp+0x17c>
                adsr->whichStage = env_idle;
 8022108:	629a      	str	r2, [r3, #40]	; 0x28
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 802210a:	edd3 7a08 	vldr	s15, [r3, #32]
 802210e:	ed83 0a05 	vstr	s0, [r3, #20]
 8022112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022116:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
            break;
    }
    return adsr->next;
}
 802211a:	4770      	bx	lr
 802211c:	ed93 0a05 	vldr	s0, [r3, #20]
 8022120:	4770      	bx	lr
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 8022122:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8022126:	685a      	ldr	r2, [r3, #4]
 8022128:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802212c:	ee17 1a10 	vmov	r1, s14
 8022130:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8022134:	ed92 7a00 	vldr	s14, [r2]
 8022138:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802213c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022140:	e7a6      	b.n	8022090 <tADSR4_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 8022142:	eefc 5ae6 	vcvt.u32.f32	s11, s13
 8022146:	685a      	ldr	r2, [r3, #4]
 8022148:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802214c:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 8022150:	ee15 1a90 	vmov	r1, s11
 8022154:	ee67 7a86 	vmul.f32	s15, s15, s12
 8022158:	ee37 7a40 	vsub.f32	s14, s14, s0
 802215c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8022160:	ed92 6a00 	vldr	s12, [r2]
 8022164:	eea6 0a07 	vfma.f32	s0, s12, s14
 8022168:	ee20 0a27 	vmul.f32	s0, s0, s15
 802216c:	e7b5      	b.n	80220da <tADSR4_tickNoInterp+0xae>
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 802216e:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8022172:	685a      	ldr	r2, [r3, #4]
 8022174:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8022178:	ee17 1a10 	vmov	r1, s14
 802217c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8022180:	ed92 0a00 	vldr	s0, [r2]
 8022184:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022188:	e76a      	b.n	8022060 <tADSR4_tickNoInterp+0x34>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 802218a:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 802218e:	685a      	ldr	r2, [r3, #4]
 8022190:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8022194:	ee17 1a10 	vmov	r1, s14
 8022198:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 802219c:	ed92 0a00 	vldr	s0, [r2]
 80221a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80221a4:	e7b1      	b.n	802210a <tADSR4_tickNoInterp+0xde>
 80221a6:	bf00      	nop
 80221a8:	00000000 	.word	0x00000000

080221ac <tRamp_init>:


/////-----------------
/* Ramp */
void    tRamp_init(tRamp* const r, float time, int samples_per_tick)
{
 80221ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tRamp_initToPool(r, time, samples_per_tick, &leaf.mempool);
}

void    tRamp_initToPool    (tRamp* const r, float time, int samples_per_tick, tMempool* const mp)
{
    _tMempool* m = *mp;
 80221ae:	4d17      	ldr	r5, [pc, #92]	; (802220c <tRamp_init+0x60>)
{
 80221b0:	4607      	mov	r7, r0
 80221b2:	460c      	mov	r4, r1
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 80221b4:	2024      	movs	r0, #36	; 0x24
    _tMempool* m = *mp;
 80221b6:	69ae      	ldr	r6, [r5, #24]
{
 80221b8:	ed2d 8b02 	vpush	{d8}
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 80221bc:	4631      	mov	r1, r6
{
 80221be:	eeb0 8a40 	vmov.f32	s16, s0
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 80221c2:	f001 ffa1 	bl	8024108 <mpool_alloc>
    ramp->mempool = m;
    
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 80221c6:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8022210 <tRamp_init+0x64>
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 80221ca:	6038      	str	r0, [r7, #0]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 80221cc:	ee07 4a90 	vmov	s15, r4
    ramp->mempool = m;
 80221d0:	6006      	str	r6, [r0, #0]
    ramp->curr = 0.0f;
 80221d2:	2300      	movs	r3, #0
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 80221d4:	edd5 6a00 	vldr	s13, [r5]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 80221d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
    else
    {
        ramp->time = time;
    }
    ramp->samples_per_tick = samples_per_tick;
 80221dc:	6204      	str	r4, [r0, #32]
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 80221de:	ee86 7a26 	vdiv.f32	s14, s12, s13
    ramp->curr = 0.0f;
 80221e2:	6103      	str	r3, [r0, #16]
    ramp->dest = 0.0f;
 80221e4:	6143      	str	r3, [r0, #20]
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (float)ramp->samples_per_tick;
    ramp->inc = (ramp->dest - ramp->curr) * ramp->factor;
 80221e6:	6043      	str	r3, [r0, #4]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 80221e8:	ee67 7a87 	vmul.f32	s15, s15, s14
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 80221ec:	ed80 7a02 	vstr	s14, [r0, #8]
 80221f0:	fe88 0a27 	vmaxnm.f32	s0, s16, s15
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (float)ramp->samples_per_tick;
 80221f4:	ee87 7a80 	vdiv.f32	s14, s15, s0
 80221f8:	ed80 0a06 	vstr	s0, [r0, #24]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 80221fc:	edc0 7a03 	vstr	s15, [r0, #12]
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (float)ramp->samples_per_tick;
 8022200:	ed80 7a07 	vstr	s14, [r0, #28]
}
 8022204:	ecbd 8b02 	vpop	{d8}
 8022208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802220a:	bf00      	nop
 802220c:	200194e0 	.word	0x200194e0
 8022210:	4479ffff 	.word	0x4479ffff

08022214 <tRamp_initToPool>:
{
 8022214:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
 8022216:	6815      	ldr	r5, [r2, #0]
{
 8022218:	460c      	mov	r4, r1
 802221a:	4606      	mov	r6, r0
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 802221c:	2024      	movs	r0, #36	; 0x24
 802221e:	4629      	mov	r1, r5
{
 8022220:	ed2d 8b02 	vpush	{d8}
 8022224:	eeb0 8a40 	vmov.f32	s16, s0
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 8022228:	f001 ff6e 	bl	8024108 <mpool_alloc>
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 802222c:	4b11      	ldr	r3, [pc, #68]	; (8022274 <tRamp_initToPool+0x60>)
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 802222e:	ee07 4a90 	vmov	s15, r4
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 8022232:	6030      	str	r0, [r6, #0]
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 8022234:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8022278 <tRamp_initToPool+0x64>
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8022238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    ramp->mempool = m;
 802223c:	6005      	str	r5, [r0, #0]
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 802223e:	edd3 6a00 	vldr	s13, [r3]
    ramp->curr = 0.0f;
 8022242:	2300      	movs	r3, #0
    ramp->samples_per_tick = samples_per_tick;
 8022244:	6204      	str	r4, [r0, #32]
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 8022246:	ee86 7a26 	vdiv.f32	s14, s12, s13
    ramp->curr = 0.0f;
 802224a:	6103      	str	r3, [r0, #16]
    ramp->dest = 0.0f;
 802224c:	6143      	str	r3, [r0, #20]
    ramp->inc = (ramp->dest - ramp->curr) * ramp->factor;
 802224e:	6043      	str	r3, [r0, #4]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8022250:	ee67 7a87 	vmul.f32	s15, s15, s14
    ramp->inv_sr_ms = 1.0f/(leaf.sampleRate*0.001f);
 8022254:	ed80 7a02 	vstr	s14, [r0, #8]
 8022258:	fe87 0a88 	vmaxnm.f32	s0, s15, s16
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (float)ramp->samples_per_tick;
 802225c:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8022260:	ed80 0a06 	vstr	s0, [r0, #24]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8022264:	edc0 7a03 	vstr	s15, [r0, #12]
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (float)ramp->samples_per_tick;
 8022268:	ed80 7a07 	vstr	s14, [r0, #28]
}
 802226c:	ecbd 8b02 	vpop	{d8}
 8022270:	bd70      	pop	{r4, r5, r6, pc}
 8022272:	bf00      	nop
 8022274:	200194e0 	.word	0x200194e0
 8022278:	4479ffff 	.word	0x4479ffff

0802227c <tRamp_free>:

void    tRamp_free (tRamp* const r)
{
    _tRamp* ramp = *r;
 802227c:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)ramp, ramp->mempool);
 802227e:	6801      	ldr	r1, [r0, #0]
 8022280:	f001 bfea 	b.w	8024258 <mpool_free>

08022284 <tRamp_setDest>:

}

void     tRamp_setDest(tRamp* const ramp, float dest)
{
    _tRamp* r = *ramp;
 8022284:	6803      	ldr	r3, [r0, #0]
    r->dest = dest;
    r->inc = (r->dest - r->curr) * r->factor;
 8022286:	edd3 7a04 	vldr	s15, [r3, #16]
 802228a:	ed93 7a07 	vldr	s14, [r3, #28]
 802228e:	ee70 7a67 	vsub.f32	s15, s0, s15
    r->dest = dest;
 8022292:	ed83 0a05 	vstr	s0, [r3, #20]
    r->inc = (r->dest - r->curr) * r->factor;
 8022296:	ee67 7a87 	vmul.f32	s15, s15, s14
 802229a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 802229e:	4770      	bx	lr

080222a0 <tRamp_setVal>:

void     tRamp_setVal(tRamp* const ramp, float val)
{
    _tRamp* r = *ramp;
 80222a0:	6803      	ldr	r3, [r0, #0]
    r->curr = val;
    r->inc = (r->dest - r->curr) * r->factor;
 80222a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80222a6:	ed93 7a07 	vldr	s14, [r3, #28]
 80222aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
    r->curr = val;
 80222ae:	ed83 0a04 	vstr	s0, [r3, #16]
    r->inc = (r->dest - r->curr) * r->factor;
 80222b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80222b6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80222ba:	4770      	bx	lr

080222bc <tRamp_tick>:

float   tRamp_tick(tRamp* const ramp)
{
    _tRamp* r = *ramp;
 80222bc:	6803      	ldr	r3, [r0, #0]
    
    r->curr += r->inc;
 80222be:	edd3 7a01 	vldr	s15, [r3, #4]
 80222c2:	ed93 0a04 	vldr	s0, [r3, #16]
    
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 80222c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80222ca:	ed93 7a05 	vldr	s14, [r3, #20]
    r->curr += r->inc;
 80222ce:	ee37 0a80 	vadd.f32	s0, s15, s0
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 80222d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    r->curr += r->inc;
 80222d6:	ed83 0a04 	vstr	s0, [r3, #16]
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 80222da:	dd04      	ble.n	80222e6 <tRamp_tick+0x2a>
 80222dc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80222e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222e4:	da0a      	bge.n	80222fc <tRamp_tick+0x40>
 80222e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80222ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222ee:	d504      	bpl.n	80222fa <tRamp_tick+0x3e>
 80222f0:	eeb4 0a47 	vcmp.f32	s0, s14
 80222f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222f8:	d900      	bls.n	80222fc <tRamp_tick+0x40>
		r->inc = 0.0f;
		r->curr=r->dest;
	}
    
    return r->curr;
}
 80222fa:	4770      	bx	lr
		r->inc = 0.0f;
 80222fc:	2200      	movs	r2, #0
		r->curr=r->dest;
 80222fe:	eeb0 0a47 	vmov.f32	s0, s14
 8022302:	ed83 7a04 	vstr	s14, [r3, #16]
		r->inc = 0.0f;
 8022306:	605a      	str	r2, [r3, #4]
}
 8022308:	4770      	bx	lr
 802230a:	bf00      	nop

0802230c <tRamp_sample>:

float   tRamp_sample(tRamp* const ramp)
{
    _tRamp* r = *ramp;
    return r->curr;
 802230c:	6803      	ldr	r3, [r0, #0]
}
 802230e:	ed93 0a04 	vldr	s0, [r3, #16]
 8022312:	4770      	bx	lr

08022314 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor)
{	// factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8022314:	b538      	push	{r3, r4, r5, lr}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf.mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 8022316:	4b12      	ldr	r3, [pc, #72]	; (8022360 <tExpSmooth_init+0x4c>)
{	// factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8022318:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 802231a:	2014      	movs	r0, #20
{	// factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 802231c:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8022320:	699c      	ldr	r4, [r3, #24]
{	// factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8022322:	eef0 8a40 	vmov.f32	s17, s0
 8022326:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 802232a:	4621      	mov	r1, r4
 802232c:	f001 feec 	bl	8024108 <mpool_alloc>
 8022330:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022334:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8022364 <tExpSmooth_init+0x50>
 8022338:	6028      	str	r0, [r5, #0]
 802233a:	fec8 0a67 	vminnm.f32	s1, s16, s15
 802233e:	fec0 0a87 	vmaxnm.f32	s1, s1, s14
    smooth->curr=val;
    smooth->dest=val;
    if (factor<0) factor=0;
    if (factor>1) factor=1;
    smooth->factor=factor;
    smooth->oneminusfactor=1.0f-factor;
 8022342:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8022346:	6004      	str	r4, [r0, #0]
    smooth->curr=val;
 8022348:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest=val;
 802234c:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->factor=factor;
 8022350:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor=1.0f-factor;
 8022354:	edc0 7a02 	vstr	s15, [r0, #8]
}
 8022358:	ecbd 8b02 	vpop	{d8}
 802235c:	bd38      	pop	{r3, r4, r5, pc}
 802235e:	bf00      	nop
 8022360:	200194e0 	.word	0x200194e0
 8022364:	00000000 	.word	0x00000000

08022368 <tExpSmooth_initToPool>:
{
 8022368:	b538      	push	{r3, r4, r5, lr}
 802236a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 802236e:	680c      	ldr	r4, [r1, #0]
{
 8022370:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8022372:	2014      	movs	r0, #20
{
 8022374:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8022378:	4621      	mov	r1, r4
{
 802237a:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 802237e:	f001 fec3 	bl	8024108 <mpool_alloc>
 8022382:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022386:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80223b0 <tExpSmooth_initToPool+0x48>
 802238a:	6028      	str	r0, [r5, #0]
 802238c:	fec8 0a67 	vminnm.f32	s1, s16, s15
 8022390:	fec0 0a87 	vmaxnm.f32	s1, s1, s14
    smooth->oneminusfactor=1.0f-factor;
 8022394:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8022398:	6004      	str	r4, [r0, #0]
    smooth->curr=val;
 802239a:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest=val;
 802239e:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->factor=factor;
 80223a2:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor=1.0f-factor;
 80223a6:	edc0 7a02 	vstr	s15, [r0, #8]
}
 80223aa:	ecbd 8b02 	vpop	{d8}
 80223ae:	bd38      	pop	{r3, r4, r5, pc}
 80223b0:	00000000 	.word	0x00000000

080223b4 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 80223b4:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)smooth, smooth->mempool);
 80223b6:	6801      	ldr	r1, [r0, #0]
 80223b8:	f001 bf4e 	b.w	8024258 <mpool_free>

080223bc <tExpSmooth_setFactor>:
}

void     tExpSmooth_setFactor(tExpSmooth* const expsmooth, float factor)
{	// factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 80223bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80223c0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80223dc <tExpSmooth_setFactor+0x20>
    _tExpSmooth* smooth = *expsmooth;
 80223c4:	6803      	ldr	r3, [r0, #0]
 80223c6:	fe80 0a67 	vminnm.f32	s0, s0, s15
 80223ca:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
	if (factor<0)
		factor=0;
	else
		if (factor>1) factor=1;
	smooth->factor=factor;
	smooth->oneminusfactor=1.0f-factor;
 80223ce:	ee77 7ac0 	vsub.f32	s15, s15, s0
	smooth->factor=factor;
 80223d2:	ed83 0a01 	vstr	s0, [r3, #4]
	smooth->oneminusfactor=1.0f-factor;
 80223d6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80223da:	4770      	bx	lr
 80223dc:	00000000 	.word	0x00000000

080223e0 <tExpSmooth_setDest>:

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
 80223e0:	6803      	ldr	r3, [r0, #0]
	smooth->dest=dest;
 80223e2:	ed83 0a04 	vstr	s0, [r3, #16]
}
 80223e6:	4770      	bx	lr

080223e8 <tExpSmooth_setValAndDest>:
	smooth->curr=val;
}

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, float val)
{
    _tExpSmooth* smooth = *expsmooth;
 80223e8:	6803      	ldr	r3, [r0, #0]
	smooth->curr=val;
 80223ea:	ed83 0a03 	vstr	s0, [r3, #12]
	smooth->dest=val;
 80223ee:	ed83 0a04 	vstr	s0, [r3, #16]
}
 80223f2:	4770      	bx	lr

080223f4 <tExpSmooth_tick>:

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 80223f4:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor*smooth->dest+smooth->oneminusfactor*smooth->curr;
 80223f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80223fa:	ed93 0a02 	vldr	s0, [r3, #8]
 80223fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8022402:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022406:	edd3 7a04 	vldr	s15, [r3, #16]
 802240a:	eea7 0a27 	vfma.f32	s0, s14, s15
 802240e:	ed83 0a03 	vstr	s0, [r3, #12]
    return smooth->curr;
}
 8022412:	4770      	bx	lr

08022414 <tSlide_initToPool>:
{
	tSlide_initToPool    (sl, upSlide, downSlide, &leaf.mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
 8022414:	b538      	push	{r3, r4, r5, lr}
 8022416:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 802241a:	680c      	ldr	r4, [r1, #0]
{
 802241c:	4605      	mov	r5, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 802241e:	201c      	movs	r0, #28
{
 8022420:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8022424:	4621      	mov	r1, r4
{
 8022426:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 802242a:	f001 fe6d 	bl	8024108 <mpool_alloc>

    if (downSlide < 1.0f)
    {
    	downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 802242e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8022432:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8022434:	6028      	str	r0, [r5, #0]
    s->mempool = m;
 8022436:	6004      	str	r4, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8022438:	fec8 8aa7 	vmaxnm.f32	s17, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 802243c:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 8022440:	eec7 6aa8 	vdiv.f32	s13, s15, s17
    s->prevIn = 0.0f;
 8022444:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8022446:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8022448:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 802244a:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 802244c:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 8022450:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8022454:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8022458:	ecbd 8b02 	vpop	{d8}
 802245c:	bd38      	pop	{r3, r4, r5, pc}
 802245e:	bf00      	nop

08022460 <tSlide_free>:

void    tSlide_free  (tSlide* const sl)
{
    _tSlide* s = *sl;
 8022460:	6800      	ldr	r0, [r0, #0]

    mpool_free((char*)s, s->mempool);
 8022462:	6801      	ldr	r1, [r0, #0]
 8022464:	f001 bef8 	b.w	8024258 <mpool_free>

08022468 <tSlide_setDownSlide>:
}

void tSlide_setDownSlide(tSlide* const sl, float downSlide)
{
	_tSlide* s = *sl;
	s->invDownSlide = 1.0f / downSlide;
 8022468:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSlide* s = *sl;
 802246c:	6803      	ldr	r3, [r0, #0]
	s->invDownSlide = 1.0f / downSlide;
 802246e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8022472:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8022476:	4770      	bx	lr

08022478 <tSlide_setDest>:

void tSlide_setDest(tSlide* const sl, float dest)
{
	_tSlide* s = *sl;
 8022478:	6803      	ldr	r3, [r0, #0]
	s->dest = dest;
 802247a:	ed83 0a06 	vstr	s0, [r3, #24]
}
 802247e:	4770      	bx	lr

08022480 <tSlide_tickNoInput>:

float tSlide_tickNoInput(tSlide* const sl)
{
	_tSlide* s = *sl;
 8022480:	6803      	ldr	r3, [r0, #0]
	float in = s->dest;

	if (in >= s->prevOut)
 8022482:	edd3 7a01 	vldr	s15, [r3, #4]
	float in = s->dest;
 8022486:	ed93 7a06 	vldr	s14, [r3, #24]
	if (in >= s->prevOut)
 802248a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802248e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8022492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	{
		s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8022496:	bf94      	ite	ls
 8022498:	ed93 6a04 	vldrls	s12, [r3, #16]
	}
	else
	{
		s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 802249c:	ed93 6a05 	vldrhi	s12, [r3, #20]
 80224a0:	eee6 7a26 	vfma.f32	s15, s12, s13
	}
#ifdef NO_DENORMAL_CHECK
#else
	if (s->currentOut < VSF) s->currentOut = 0.0f;
 80224a4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80224e0 <tSlide_tickNoInput+0x60>
 80224a8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80224ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224b0:	d50c      	bpl.n	80224cc <tSlide_tickNoInput+0x4c>
 80224b2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80224e4 <tSlide_tickNoInput+0x64>
#endif
	s->prevIn = in;
 80224b6:	ed83 7a03 	vstr	s14, [r3, #12]
	if (s->currentOut < VSF) s->currentOut = 0.0f;
 80224ba:	eef0 7a66 	vmov.f32	s15, s13
 80224be:	edc3 6a02 	vstr	s13, [r3, #8]
	s->prevOut = s->currentOut;
	return s->currentOut;
}
 80224c2:	eeb0 0a67 	vmov.f32	s0, s15
	s->prevOut = s->currentOut;
 80224c6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80224ca:	4770      	bx	lr
 80224cc:	edc3 7a02 	vstr	s15, [r3, #8]
 80224d0:	eeb0 0a67 	vmov.f32	s0, s15
	s->prevIn = in;
 80224d4:	ed83 7a03 	vstr	s14, [r3, #12]
	s->prevOut = s->currentOut;
 80224d8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80224dc:	4770      	bx	lr
 80224de:	bf00      	nop
 80224e0:	006ce3ee 	.word	0x006ce3ee
 80224e4:	00000000 	.word	0x00000000

080224e8 <tAllpass_initToPool>:
{
    tAllpass_initToPool(ft, initDelay, maxDelay, &leaf.mempool);
}

void    tAllpass_initToPool     (tAllpass* const ft, float initDelay, uint32_t maxDelay, tMempool* const mp)
{
 80224e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80224ec:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80224f0:	6814      	ldr	r4, [r2, #0]
{
 80224f2:	4615      	mov	r5, r2
 80224f4:	4607      	mov	r7, r0
 80224f6:	4688      	mov	r8, r1
 80224f8:	eeb0 8a40 	vmov.f32	s16, s0
    _tAllpass* f = *ft = (_tAllpass*) mpool_alloc(sizeof(_tAllpass), m);
 80224fc:	4621      	mov	r1, r4
 80224fe:	2010      	movs	r0, #16
    f->mempool = m;
    
    f->gain = 0.7f;
 8022500:	4e09      	ldr	r6, [pc, #36]	; (8022528 <tAllpass_initToPool+0x40>)
    _tAllpass* f = *ft = (_tAllpass*) mpool_alloc(sizeof(_tAllpass), m);
 8022502:	f001 fe01 	bl	8024108 <mpool_alloc>
    
    f->lastOut = 0.0f;
    
    tLinearDelay_initToPool(&f->delay, initDelay, maxDelay, mp);
 8022506:	462a      	mov	r2, r5
    _tAllpass* f = *ft = (_tAllpass*) mpool_alloc(sizeof(_tAllpass), m);
 8022508:	4603      	mov	r3, r0
    f->lastOut = 0.0f;
 802250a:	2500      	movs	r5, #0
    _tAllpass* f = *ft = (_tAllpass*) mpool_alloc(sizeof(_tAllpass), m);
 802250c:	6038      	str	r0, [r7, #0]
    tLinearDelay_initToPool(&f->delay, initDelay, maxDelay, mp);
 802250e:	eeb0 0a48 	vmov.f32	s0, s16
    f->mempool = m;
 8022512:	6004      	str	r4, [r0, #0]
    tLinearDelay_initToPool(&f->delay, initDelay, maxDelay, mp);
 8022514:	4641      	mov	r1, r8
    f->gain = 0.7f;
 8022516:	605e      	str	r6, [r3, #4]
    tLinearDelay_initToPool(&f->delay, initDelay, maxDelay, mp);
 8022518:	3008      	adds	r0, #8
    f->lastOut = 0.0f;
 802251a:	60dd      	str	r5, [r3, #12]
}
 802251c:	ecbd 8b02 	vpop	{d8}
 8022520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    tLinearDelay_initToPool(&f->delay, initDelay, maxDelay, mp);
 8022524:	f7fc beb6 	b.w	801f294 <tLinearDelay_initToPool>
 8022528:	3f333333 	.word	0x3f333333

0802252c <tAllpass_free>:

void    tAllpass_free  (tAllpass* const ft)
{
 802252c:	b510      	push	{r4, lr}
    _tAllpass* f = *ft;
 802252e:	6804      	ldr	r4, [r0, #0]
    
    tLinearDelay_free(&f->delay);
 8022530:	f104 0008 	add.w	r0, r4, #8
 8022534:	f7fc ff24 	bl	801f380 <tLinearDelay_free>
    mpool_free((char*)f, f->mempool);
 8022538:	6821      	ldr	r1, [r4, #0]
 802253a:	4620      	mov	r0, r4
}
 802253c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)f, f->mempool);
 8022540:	f001 be8a 	b.w	8024258 <mpool_free>

08022544 <tAllpass_setDelay>:

void    tAllpass_setDelay(tAllpass* const ft, float delay)
{
    _tAllpass* f = *ft;
    
    tLinearDelay_setDelay(&f->delay, delay);
 8022544:	6800      	ldr	r0, [r0, #0]
 8022546:	3008      	adds	r0, #8
 8022548:	f7fc bfac 	b.w	801f4a4 <tLinearDelay_setDelay>

0802254c <tAllpass_setGain>:
}

void    tAllpass_setGain(tAllpass* const ft, float gain)
{
    _tAllpass* f = *ft;
 802254c:	6803      	ldr	r3, [r0, #0]
    
    f->gain = gain;
 802254e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8022552:	4770      	bx	lr

08022554 <tAllpass_tick>:

float   tAllpass_tick(tAllpass* const ft, float input)
{
 8022554:	b510      	push	{r4, lr}
 8022556:	ed2d 8b02 	vpush	{d8}
    _tAllpass* f = *ft;
 802255a:	6804      	ldr	r4, [r0, #0]
{
 802255c:	eeb0 8a40 	vmov.f32	s16, s0
    
    float s1 = (-f->gain) * f->lastOut + input;
    
    float s2 = tLinearDelay_tick(&f->delay, s1) + (f->gain) * input;
 8022560:	edd4 7a03 	vldr	s15, [r4, #12]
 8022564:	f104 0008 	add.w	r0, r4, #8
 8022568:	ed94 7a01 	vldr	s14, [r4, #4]
 802256c:	eea7 0a67 	vfms.f32	s0, s14, s15
 8022570:	f7fc ff20 	bl	801f3b4 <tLinearDelay_tick>
 8022574:	edd4 7a01 	vldr	s15, [r4, #4]
 8022578:	eea7 0a88 	vfma.f32	s0, s15, s16
    
    f->lastOut = s2;
 802257c:	ed84 0a03 	vstr	s0, [r4, #12]
    
    return f->lastOut;
}
 8022580:	ecbd 8b02 	vpop	{d8}
 8022584:	bd10      	pop	{r4, pc}
 8022586:	bf00      	nop

08022588 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf.mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, float freq, tMempool* const mp)
{
 8022588:	b570      	push	{r4, r5, r6, lr}
 802258a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 802258e:	680e      	ldr	r6, [r1, #0]
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    
    f->gain = 1.0f;
 8022590:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
{
 8022594:	4605      	mov	r5, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8022596:	2020      	movs	r0, #32
 8022598:	4631      	mov	r1, r6
{
 802259a:	eef0 8a40 	vmov.f32	s17, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 802259e:	f001 fdb3 	bl	8024108 <mpool_alloc>
}

void        tOnePole_setFreq        (tOnePole* const ft, float freq)
{
    _tOnePole* f = *ft;
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 80225a2:	4b12      	ldr	r3, [pc, #72]	; (80225ec <tOnePole_initToPool+0x64>)
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 80225a4:	6028      	str	r0, [r5, #0]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80225a6:	eeb0 1a48 	vmov.f32	s2, s16
    f->gain = 1.0f;
 80225aa:	ed80 8a01 	vstr	s16, [r0, #4]
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 80225ae:	4604      	mov	r4, r0
    f->a0 = 1.0;
 80225b0:	ed80 8a02 	vstr	s16, [r0, #8]
    f->mempool = m;
 80225b4:	6006      	str	r6, [r0, #0]
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 80225b6:	edd3 0a03 	vldr	s1, [r3, #12]
    _tOnePole* f = *ft;
 80225ba:	682d      	ldr	r5, [r5, #0]
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 80225bc:	ee68 0aa0 	vmul.f32	s1, s17, s1
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80225c0:	eddf 8a0b 	vldr	s17, [pc, #44]	; 80225f0 <tOnePole_initToPool+0x68>
 80225c4:	eeb0 0a68 	vmov.f32	s0, s17
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 80225c8:	edc5 0a04 	vstr	s1, [r5, #16]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80225cc:	f001 fb9c 	bl	8023d08 <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 80225d0:	ee38 8a40 	vsub.f32	s16, s16, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80225d4:	ed85 0a04 	vstr	s0, [r5, #16]
    f->a1 = 1.0f - f->b0;
 80225d8:	ed85 8a03 	vstr	s16, [r5, #12]
    f->lastIn = 0.0f;
 80225dc:	edc4 8a06 	vstr	s17, [r4, #24]
    f->lastOut = 0.0f;
 80225e0:	edc4 8a07 	vstr	s17, [r4, #28]
}
 80225e4:	ecbd 8b02 	vpop	{d8}
 80225e8:	bd70      	pop	{r4, r5, r6, pc}
 80225ea:	bf00      	nop
 80225ec:	200194e0 	.word	0x200194e0
 80225f0:	00000000 	.word	0x00000000

080225f4 <tOnePole_free>:
    _tOnePole* f = *ft;
 80225f4:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 80225f6:	6801      	ldr	r1, [r0, #0]
 80225f8:	f001 be2e 	b.w	8024258 <mpool_free>

080225fc <tOnePole_setFreq>:
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 80225fc:	4b0b      	ldr	r3, [pc, #44]	; (802262c <tOnePole_setFreq+0x30>)
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80225fe:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 8022602:	b510      	push	{r4, lr}
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 8022604:	edd3 0a03 	vldr	s1, [r3, #12]
    _tOnePole* f = *ft;
 8022608:	6804      	ldr	r4, [r0, #0]
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 802260a:	ee60 0a20 	vmul.f32	s1, s0, s1
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 802260e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8022630 <tOnePole_setFreq+0x34>
    f->b0 = freq * leaf.twoPiTimesInvSampleRate;
 8022612:	edc4 0a04 	vstr	s1, [r4, #16]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8022616:	f001 fb77 	bl	8023d08 <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 802261a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 802261e:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a1 = 1.0f - f->b0;
 8022622:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8022626:	ed84 0a03 	vstr	s0, [r4, #12]
}
 802262a:	bd10      	pop	{r4, pc}
 802262c:	200194e0 	.word	0x200194e0
 8022630:	00000000 	.word	0x00000000

08022634 <tOnePole_tick>:
    f->gain = gain;
}

float   tOnePole_tick(tOnePole* const ft, float input)
{
    _tOnePole* f = *ft;
 8022634:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8022636:	ed93 6a07 	vldr	s12, [r3, #28]
    float in = input * f->gain;
 802263a:	ed93 7a01 	vldr	s14, [r3, #4]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 802263e:	edd3 7a03 	vldr	s15, [r3, #12]
    float in = input * f->gain;
 8022642:	ee20 7a07 	vmul.f32	s14, s0, s14
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8022646:	edd3 6a04 	vldr	s13, [r3, #16]
 802264a:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
 802264e:	ed83 7a06 	vstr	s14, [r3, #24]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8022652:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
 8022656:	ed83 0a07 	vstr	s0, [r3, #28]
    
    return out;
}
 802265a:	4770      	bx	lr

0802265c <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as floating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, float freq, float Q)
{
 802265c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 8022660:	4f38      	ldr	r7, [pc, #224]	; (8022744 <tSVF_init+0xe8>)
{
 8022662:	460e      	mov	r6, r1
 8022664:	4681      	mov	r9, r0
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8022666:	203c      	movs	r0, #60	; 0x3c
    svf->mempool = m;

    svf->type = type;

    svf->ic1eq = 0;
 8022668:	2500      	movs	r5, #0
{
 802266a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 802266e:	f8d7 8018 	ldr.w	r8, [r7, #24]
{
 8022672:	eef0 8a40 	vmov.f32	s17, s0
 8022676:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 802267a:	4641      	mov	r1, r8
 802267c:	f001 fd44 	bl	8024108 <mpool_alloc>
 8022680:	f8c9 0000 	str.w	r0, [r9]
    svf->mempool = m;
 8022684:	f8c0 8000 	str.w	r8, [r0]
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8022688:	4604      	mov	r4, r0
    svf->type = type;
 802268a:	7106      	strb	r6, [r0, #4]
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 802268c:	edd7 7a01 	vldr	s15, [r7, #4]
 8022690:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8022748 <tSVF_init+0xec>
    svf->Q = Q;
 8022694:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 8022698:	ee27 0a80 	vmul.f32	s0, s15, s0
    svf->cutoff = freq;
 802269c:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->ic1eq = 0;
 80226a0:	6105      	str	r5, [r0, #16]
    svf->ic2eq = 0;
 80226a2:	6145      	str	r5, [r0, #20]
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 80226a4:	ee20 0a28 	vmul.f32	s0, s0, s17
 80226a8:	f005 f814 	bl	80276d4 <tanf>
    svf->k = 1.0f/Q;
 80226ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 80226b0:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->a3 = svf->g*svf->a2;
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cL = 1.0f;

    if (type == SVFTypeLowpass)
 80226b4:	2e01      	cmp	r6, #1
    svf->cH = 0.0f;
 80226b6:	62e5      	str	r5, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
 80226b8:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cB = 0.0f;
 80226bc:	6325      	str	r5, [r4, #48]	; 0x30
    svf->cL = 1.0f;
 80226be:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80226c2:	ee70 6a07 	vadd.f32	s13, s0, s14
    svf->k = 1.0f/Q;
 80226c6:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80226ca:	eeb0 7a67 	vmov.f32	s14, s15
 80226ce:	eea0 7a26 	vfma.f32	s14, s0, s13
 80226d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
    svf->a2 = svf->g*svf->a1;
 80226d6:	ee20 7a26 	vmul.f32	s14, s0, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80226da:	edc4 6a08 	vstr	s13, [r4, #32]
    svf->a3 = svf->g*svf->a2;
 80226de:	ee20 0a07 	vmul.f32	s0, s0, s14
    svf->a2 = svf->g*svf->a1;
 80226e2:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 80226e6:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
 80226ea:	d016      	beq.n	802271a <tSVF_init+0xbe>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 80226ec:	2e02      	cmp	r6, #2
 80226ee:	d00c      	beq.n	802270a <tSVF_init+0xae>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }

    else if (type == SVFTypeHighpass)
 80226f0:	b1c6      	cbz	r6, 8022724 <tSVF_init+0xc8>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -1.0f;
    }

    else if (type == SVFTypeNotch)
 80226f2:	2e03      	cmp	r6, #3
 80226f4:	d01f      	beq.n	8022736 <tSVF_init+0xda>
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }


    else if (type == SVFTypePeak)
 80226f6:	2e04      	cmp	r6, #4
 80226f8:	d10b      	bne.n	8022712 <tSVF_init+0xb6>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 80226fa:	4a14      	ldr	r2, [pc, #80]	; (802274c <tSVF_init+0xf0>)
        svf->cL = -2.0f;
 80226fc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 8022700:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 8022704:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
 8022706:	6363      	str	r3, [r4, #52]	; 0x34
}
 8022708:	e003      	b.n	8022712 <tSVF_init+0xb6>
        svf->cB = 1.0f;
 802270a:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        svf->cBK = 0.0f;
 802270e:	63a5      	str	r5, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 8022710:	6365      	str	r5, [r4, #52]	; 0x34
}
 8022712:	ecbd 8b02 	vpop	{d8}
 8022716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        svf->cBK = 0.0f;
 802271a:	63a5      	str	r5, [r4, #56]	; 0x38
}
 802271c:	ecbd 8b02 	vpop	{d8}
 8022720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        svf->cBK = -1.0f;
 8022724:	4b09      	ldr	r3, [pc, #36]	; (802274c <tSVF_init+0xf0>)
        svf->cH = 1.0f;
 8022726:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 802272a:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
 802272c:	6363      	str	r3, [r4, #52]	; 0x34
}
 802272e:	ecbd 8b02 	vpop	{d8}
 8022732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        svf->cBK = -1.0f;
 8022736:	4b05      	ldr	r3, [pc, #20]	; (802274c <tSVF_init+0xf0>)
        svf->cH = 1.0f;
 8022738:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cL = 0.0f;
 802273c:	6365      	str	r5, [r4, #52]	; 0x34
        svf->cBK = -1.0f;
 802273e:	63a3      	str	r3, [r4, #56]	; 0x38
 8022740:	e7e7      	b.n	8022712 <tSVF_init+0xb6>
 8022742:	bf00      	nop
 8022744:	200194e0 	.word	0x200194e0
 8022748:	40490fdb 	.word	0x40490fdb
 802274c:	bf800000 	.word	0xbf800000

08022750 <tSVF_free>:
    }
}

void    tSVF_free   (tSVF* const svff)
{
    _tSVF* svf = *svff;
 8022750:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)svf, svf->mempool);
 8022752:	6801      	ldr	r1, [r0, #0]
 8022754:	f001 bd80 	b.w	8024258 <mpool_free>

08022758 <tSVF_tick>:
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
 8022758:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 802275a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 802275e:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8022762:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8022766:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 802276a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
 802276e:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8022772:	edd3 2a0a 	vldr	s5, [r3, #40]	; 0x28
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8022776:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 802277a:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 802277e:	ed93 3a08 	vldr	s6, [r3, #32]
 8022782:	ee67 7a84 	vmul.f32	s15, s15, s8
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8022786:	ed93 2a07 	vldr	s4, [r3, #28]
 802278a:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
 802278e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8022792:	eea2 5a23 	vfma.f32	s10, s4, s7
 8022796:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 802279a:	eee3 7a06 	vfma.f32	s15, s6, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 802279e:	eee2 5a84 	vfma.f32	s11, s5, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 80227a2:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 80227a6:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 80227aa:	eed5 6aa4 	vfnms.f32	s13, s11, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 80227ae:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 80227b2:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 80227b6:	edc3 6a05 	vstr	s13, [r3, #20]
}
 80227ba:	eea3 7a80 	vfma.f32	s14, s7, s0
 80227be:	eeb0 0a47 	vmov.f32	s0, s14
 80227c2:	4770      	bx	lr

080227c4 <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, float freq)
{
    _tSVF* svf = *svff;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 80227c4:	4b14      	ldr	r3, [pc, #80]	; (8022818 <tSVF_setFreq+0x54>)
 80227c6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 802281c <tSVF_setFreq+0x58>
{
 80227ca:	b510      	push	{r4, lr}
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 80227cc:	edd3 7a01 	vldr	s15, [r3, #4]
    _tSVF* svf = *svff;
 80227d0:	6804      	ldr	r4, [r0, #0]
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 80227d2:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->cutoff = freq;
 80227d6:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 80227da:	ee27 0a80 	vmul.f32	s0, s15, s0
 80227de:	f004 ff79 	bl	80276d4 <tanf>
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80227e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80227e6:	edd4 7a07 	vldr	s15, [r4, #28]
    svf->g = tanf(PI * freq * leaf.invSampleRate);
 80227ea:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80227ee:	ee70 7a27 	vadd.f32	s15, s0, s15
 80227f2:	eeb0 7a66 	vmov.f32	s14, s13
 80227f6:	eea0 7a27 	vfma.f32	s14, s0, s15
 80227fa:	eef0 7a47 	vmov.f32	s15, s14
 80227fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    svf->a2 = svf->g * svf->a1;
 8022802:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022806:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a3 = svf->g * svf->a2;
 802280a:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
 802280e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8022812:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
}
 8022816:	bd10      	pop	{r4, pc}
 8022818:	200194e0 	.word	0x200194e0
 802281c:	40490fdb 	.word	0x40490fdb

08022820 <tEfficientSVF_initToPool>:
{
    tEfficientSVF_initToPool(svff, type, input, Q, &leaf.mempool);
}

void    tEfficientSVF_initToPool    (tEfficientSVF* const svff, SVFType type, uint16_t input, float Q, tMempool* const mp)
{
 8022820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022822:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8022826:	681c      	ldr	r4, [r3, #0]
{
 8022828:	4607      	mov	r7, r0
 802282a:	460d      	mov	r5, r1
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 802282c:	202c      	movs	r0, #44	; 0x2c
 802282e:	4621      	mov	r1, r4
{
 8022830:	4616      	mov	r6, r2
 8022832:	eeb0 8a40 	vmov.f32	s16, s0
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 8022836:	f001 fc67 	bl	8024108 <mpool_alloc>
    
    svf->ic1eq = 0;
    svf->ic2eq = 0;
    
    svf->g = __leaf_table_filtertan[input];
    svf->k = 1.0f/Q;
 802283a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    svf->g = __leaf_table_filtertan[input];
 802283e:	4a14      	ldr	r2, [pc, #80]	; (8022890 <tEfficientSVF_initToPool+0x70>)
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 8022840:	6038      	str	r0, [r7, #0]
    svf->ic1eq = 0;
 8022842:	2300      	movs	r3, #0
    svf->g = __leaf_table_filtertan[input];
 8022844:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    svf->mempool = m;
 8022848:	6004      	str	r4, [r0, #0]
    svf->k = 1.0f/Q;
 802284a:	eec7 6a08 	vdiv.f32	s13, s14, s16
    svf->type = type;
 802284e:	7105      	strb	r5, [r0, #4]
    svf->g = __leaf_table_filtertan[input];
 8022850:	edd2 7a00 	vldr	s15, [r2]
    svf->ic1eq = 0;
 8022854:	6103      	str	r3, [r0, #16]
    svf->g = __leaf_table_filtertan[input];
 8022856:	edc0 7a06 	vstr	s15, [r0, #24]
    svf->ic2eq = 0;
 802285a:	6143      	str	r3, [r0, #20]
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 802285c:	ee37 6aa6 	vadd.f32	s12, s15, s13
    svf->k = 1.0f/Q;
 8022860:	edc0 6a07 	vstr	s13, [r0, #28]
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 8022864:	eef0 6a47 	vmov.f32	s13, s14
 8022868:	eee7 6a86 	vfma.f32	s13, s15, s12
 802286c:	eeb0 6a66 	vmov.f32	s12, s13
 8022870:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g*svf->a1;
 8022874:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 8022878:	edc0 6a08 	vstr	s13, [r0, #32]
    svf->a3 = svf->g*svf->a2;
 802287c:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g*svf->a1;
 8022880:	ed80 7a09 	vstr	s14, [r0, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8022884:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
}
 8022888:	ecbd 8b02 	vpop	{d8}
 802288c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802288e:	bf00      	nop
 8022890:	0803b588 	.word	0x0803b588

08022894 <tEfficientSVF_free>:

void    tEfficientSVF_free (tEfficientSVF* const svff)
{
    _tEfficientSVF* svf = *svff;
 8022894:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)svf, svf->mempool);
 8022896:	6801      	ldr	r1, [r0, #0]
 8022898:	f001 bcde 	b.w	8024258 <mpool_free>

0802289c <tEfficientSVF_tick>:
}

float   tEfficientSVF_tick(tEfficientSVF* const svff, float v0)
{
    _tEfficientSVF* svf = *svff;
 802289c:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 802289e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 80228a2:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80228a6:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 80228aa:	eeb0 7a66 	vmov.f32	s14, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80228ae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
 80228b2:	ee70 5a66 	vsub.f32	s11, s0, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80228b6:	ed93 4a08 	vldr	s8, [r3, #32]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 80228ba:	edd3 4a0a 	vldr	s9, [r3, #40]	; 0x28
 80228be:	eea6 7a27 	vfma.f32	s14, s12, s15
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    if (svf->type == SVFTypeLowpass)        return v2;
 80228c2:	791a      	ldrb	r2, [r3, #4]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80228c4:	ee67 7aa5 	vmul.f32	s15, s15, s11
    if (svf->type == SVFTypeLowpass)        return v2;
 80228c8:	2a01      	cmp	r2, #1
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80228ca:	eee4 7a06 	vfma.f32	s15, s8, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 80228ce:	eea4 7aa5 	vfma.f32	s14, s9, s11
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 80228d2:	ee97 6a85 	vfnms.f32	s12, s15, s10
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 80228d6:	ee77 5a07 	vadd.f32	s11, s14, s14
 80228da:	ee75 6ae6 	vsub.f32	s13, s11, s13
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 80228de:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 80228e2:	edc3 6a05 	vstr	s13, [r3, #20]
    if (svf->type == SVFTypeLowpass)        return v2;
 80228e6:	d008      	beq.n	80228fa <tEfficientSVF_tick+0x5e>
    else if (svf->type == SVFTypeBandpass)  return v1;
 80228e8:	2a02      	cmp	r2, #2
 80228ea:	d009      	beq.n	8022900 <tEfficientSVF_tick+0x64>
    else if (svf->type == SVFTypeHighpass)  return v0 - (svf->k * v1) - v2;
 80228ec:	b16a      	cbz	r2, 802290a <tEfficientSVF_tick+0x6e>
    else if (svf->type == SVFTypeNotch)     return v0 - (svf->k * v1);
 80228ee:	2a03      	cmp	r2, #3
 80228f0:	d014      	beq.n	802291c <tEfficientSVF_tick+0x80>
    else if (svf->type == SVFTypePeak)      return v0 - (svf->k * v1) - (2.0f * v2);
 80228f2:	2a04      	cmp	r2, #4
 80228f4:	d019      	beq.n	802292a <tEfficientSVF_tick+0x8e>
    else                                    return 0.0f;
 80228f6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8022938 <tEfficientSVF_tick+0x9c>
    
}
 80228fa:	eeb0 0a47 	vmov.f32	s0, s14
 80228fe:	4770      	bx	lr
    else if (svf->type == SVFTypeBandpass)  return v1;
 8022900:	eeb0 7a67 	vmov.f32	s14, s15
}
 8022904:	eeb0 0a47 	vmov.f32	s0, s14
 8022908:	4770      	bx	lr
    else if (svf->type == SVFTypeHighpass)  return v0 - (svf->k * v1) - v2;
 802290a:	edd3 6a07 	vldr	s13, [r3, #28]
 802290e:	eea6 0ae7 	vfms.f32	s0, s13, s15
 8022912:	ee30 7a47 	vsub.f32	s14, s0, s14
}
 8022916:	eeb0 0a47 	vmov.f32	s0, s14
 802291a:	4770      	bx	lr
    else if (svf->type == SVFTypeNotch)     return v0 - (svf->k * v1);
 802291c:	ed93 7a07 	vldr	s14, [r3, #28]
 8022920:	eea7 0a67 	vfms.f32	s0, s14, s15
 8022924:	eeb0 7a40 	vmov.f32	s14, s0
 8022928:	e7e7      	b.n	80228fa <tEfficientSVF_tick+0x5e>
    else if (svf->type == SVFTypePeak)      return v0 - (svf->k * v1) - (2.0f * v2);
 802292a:	ed93 7a07 	vldr	s14, [r3, #28]
 802292e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8022932:	ee30 7a65 	vsub.f32	s14, s0, s11
 8022936:	e7e0      	b.n	80228fa <tEfficientSVF_tick+0x5e>
 8022938:	00000000 	.word	0x00000000

0802293c <tEfficientSVF_setFreq>:

void     tEfficientSVF_setFreq(tEfficientSVF* const svff, uint16_t input)
{
    _tEfficientSVF* svf = *svff;
    
    svf->g = __leaf_table_filtertan[input];
 802293c:	4a10      	ldr	r2, [pc, #64]	; (8022980 <tEfficientSVF_setFreq+0x44>)
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 802293e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    _tEfficientSVF* svf = *svff;
 8022942:	6803      	ldr	r3, [r0, #0]
    svf->g = __leaf_table_filtertan[input];
 8022944:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022948:	ed93 7a07 	vldr	s14, [r3, #28]
 802294c:	eef0 6a46 	vmov.f32	s13, s12
    svf->g = __leaf_table_filtertan[input];
 8022950:	edd1 7a00 	vldr	s15, [r1]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022954:	ee37 7a87 	vadd.f32	s14, s15, s14
    svf->g = __leaf_table_filtertan[input];
 8022958:	edc3 7a06 	vstr	s15, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 802295c:	eee7 6a87 	vfma.f32	s13, s15, s14
 8022960:	eeb0 7a66 	vmov.f32	s14, s13
 8022964:	eec6 6a07 	vdiv.f32	s13, s12, s14
    svf->a2 = svf->g * svf->a1;
 8022968:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 802296c:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 8022970:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 8022974:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8022978:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 802297c:	4770      	bx	lr
 802297e:	bf00      	nop
 8022980:	0803b588 	.word	0x0803b588

08022984 <tEfficientSVF_setQ>:

void     tEfficientSVF_setQ(tEfficientSVF* const svff, float Q)
{
    _tEfficientSVF* svf = *svff;
    
    svf->k = 1.0f/Q;
 8022984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tEfficientSVF* svf = *svff;
 8022988:	6803      	ldr	r3, [r0, #0]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 802298a:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
 802298e:	ee87 0a00 	vdiv.f32	s0, s14, s0
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8022992:	eeb0 6a47 	vmov.f32	s12, s14
 8022996:	ee70 6a27 	vadd.f32	s13, s0, s15
    svf->k = 1.0f/Q;
 802299a:	ed83 0a07 	vstr	s0, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 802299e:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80229a2:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 80229a6:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80229aa:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 80229ae:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 80229b2:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 80229b6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80229ba:	4770      	bx	lr

080229bc <tHighpass_init>:

/* Highpass */
void    tHighpass_init(tHighpass* const ft, float freq)
{
 80229bc:	b570      	push	{r4, r5, r6, lr}
    tHighpass_initToPool(ft, freq, &leaf.mempool);
}

void    tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 80229be:	4c0e      	ldr	r4, [pc, #56]	; (80229f8 <tHighpass_init+0x3c>)
{
 80229c0:	4606      	mov	r6, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80229c2:	2014      	movs	r0, #20
    _tMempool* m = *mp;
 80229c4:	69a5      	ldr	r5, [r4, #24]
{
 80229c6:	ed2d 8b02 	vpush	{d8}
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80229ca:	4629      	mov	r1, r5
{
 80229cc:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80229d0:	f001 fbf0 	bl	80241b4 <mpool_calloc>
    f->mempool = m;
    
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 80229d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80229d8:	6030      	str	r0, [r6, #0]
    f->ys = 0.0f;
 80229da:	2300      	movs	r3, #0
    f->mempool = m;
 80229dc:	6005      	str	r5, [r0, #0]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 80229de:	ed94 7a03 	vldr	s14, [r4, #12]
    f->xs = 0.0f;
    
    f->frequency = freq;
 80229e2:	ed80 8a04 	vstr	s16, [r0, #16]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 80229e6:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->ys = 0.0f;
 80229ea:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 80229ec:	6043      	str	r3, [r0, #4]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 80229ee:	edc0 7a03 	vstr	s15, [r0, #12]
}
 80229f2:	ecbd 8b02 	vpop	{d8}
 80229f6:	bd70      	pop	{r4, r5, r6, pc}
 80229f8:	200194e0 	.word	0x200194e0

080229fc <tHighpass_initToPool>:
{
 80229fc:	b538      	push	{r3, r4, r5, lr}
 80229fe:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8022a02:	680c      	ldr	r4, [r1, #0]
{
 8022a04:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8022a06:	2014      	movs	r0, #20
{
 8022a08:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8022a0c:	4621      	mov	r1, r4
 8022a0e:	f001 fbd1 	bl	80241b4 <mpool_calloc>
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 8022a12:	4b09      	ldr	r3, [pc, #36]	; (8022a38 <tHighpass_initToPool+0x3c>)
 8022a14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8022a18:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8022a1a:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 8022a1c:	ed93 7a03 	vldr	s14, [r3, #12]
    f->ys = 0.0f;
 8022a20:	2300      	movs	r3, #0
    f->frequency = freq;
 8022a22:	ed80 8a04 	vstr	s16, [r0, #16]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 8022a26:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->ys = 0.0f;
 8022a2a:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 8022a2c:	6043      	str	r3, [r0, #4]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 8022a2e:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8022a32:	ecbd 8b02 	vpop	{d8}
 8022a36:	bd38      	pop	{r3, r4, r5, pc}
 8022a38:	200194e0 	.word	0x200194e0

08022a3c <tHighpass_free>:

void    tHighpass_free  (tHighpass* const ft)
{
    _tHighpass* f = *ft;
 8022a3c:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
 8022a3e:	6801      	ldr	r1, [r0, #0]
 8022a40:	f001 bc0a 	b.w	8024258 <mpool_free>

08022a44 <tHighpass_setFreq>:

void     tHighpass_setFreq(tHighpass* const ft, float freq)
{
    _tHighpass* f = *ft;
    f->frequency = freq;
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 8022a44:	4a06      	ldr	r2, [pc, #24]	; (8022a60 <tHighpass_setFreq+0x1c>)
 8022a46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
 8022a4a:	6803      	ldr	r3, [r0, #0]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 8022a4c:	ed92 7a03 	vldr	s14, [r2, #12]
    f->frequency = freq;
 8022a50:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * leaf.twoPiTimesInvSampleRate));
 8022a54:	eee7 7a40 	vfms.f32	s15, s14, s0
 8022a58:	edc3 7a03 	vstr	s15, [r3, #12]
    
}
 8022a5c:	4770      	bx	lr
 8022a5e:	bf00      	nop
 8022a60:	200194e0 	.word	0x200194e0

08022a64 <tHighpass_tick>:
}

// From JOS DC Blocker
float   tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8022a64:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8022a66:	edd3 7a01 	vldr	s15, [r3, #4]
 8022a6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8022a6e:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8022a72:	ed83 0a01 	vstr	s0, [r3, #4]
    f->ys = x - f->xs + f->R * f->ys;
 8022a76:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8022a7a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8022a7e:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8022a82:	4770      	bx	lr

08022a84 <tVZFilter_initToPool>:
{
	tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf.mempool);
}

void    tVZFilter_initToPool     (tVZFilter* const vf, VZFilterType type, float freq, float bandWidth, tMempool* const mp)
{
 8022a84:	b570      	push	{r4, r5, r6, lr}
 8022a86:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 8022a8a:	6814      	ldr	r4, [r2, #0]
{
 8022a8c:	4605      	mov	r5, r0
 8022a8e:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8022a90:	2044      	movs	r0, #68	; 0x44
 8022a92:	4621      	mov	r1, r4
{
 8022a94:	eef0 8a40 	vmov.f32	s17, s0
 8022a98:	eeb0 8a60 	vmov.f32	s16, s1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8022a9c:	f001 fb34 	bl	8024108 <mpool_alloc>
	f->invG    = 1.0f/ONE_OVER_SQRT2;
	f->B    = bandWidth;
	f->m    = 0.0f;
	f->s1 = 0.0f;
	f->s2 = 0.0f;
	f->sr = leaf.sampleRate;
 8022aa0:	4bc1      	ldr	r3, [pc, #772]	; (8022da8 <tVZFilter_initToPool+0x324>)
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8022aa2:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8022aa4:	6004      	str	r4, [r0, #0]
	f->type = type;
 8022aa6:	7106      	strb	r6, [r0, #4]
	f->sr = leaf.sampleRate;
 8022aa8:	6819      	ldr	r1, [r3, #0]
	f->inv_sr = leaf.invSampleRate;
 8022aaa:	685a      	ldr	r2, [r3, #4]
	f->m    = 0.0f;
 8022aac:	2300      	movs	r3, #0
	f->invG    = 1.0f/ONE_OVER_SQRT2;
 8022aae:	4cbf      	ldr	r4, [pc, #764]	; (8022dac <tVZFilter_initToPool+0x328>)
	f->G    = ONE_OVER_SQRT2;
 8022ab0:	4ebf      	ldr	r6, [pc, #764]	; (8022db0 <tVZFilter_initToPool+0x32c>)
	f->fc   = freq;
 8022ab2:	edc0 8a0a 	vstr	s17, [r0, #40]	; 0x28
	f->m    = 0.0f;
 8022ab6:	6383      	str	r3, [r0, #56]	; 0x38
	f->s1 = 0.0f;
 8022ab8:	6083      	str	r3, [r0, #8]
	f->s2 = 0.0f;
 8022aba:	60c3      	str	r3, [r0, #12]
	f->B    = bandWidth;
 8022abc:	ed80 8a0d 	vstr	s16, [r0, #52]	; 0x34
	f->G    = ONE_OVER_SQRT2;
 8022ac0:	62c6      	str	r6, [r0, #44]	; 0x2c
	f->invG    = 1.0f/ONE_OVER_SQRT2;
 8022ac2:	6304      	str	r4, [r0, #48]	; 0x30
	f->sr = leaf.sampleRate;
 8022ac4:	63c1      	str	r1, [r0, #60]	; 0x3c
	f->inv_sr = leaf.invSampleRate;
 8022ac6:	6402      	str	r2, [r0, #64]	; 0x40


void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{

	_tVZFilter* f = *vf;
 8022ac8:	682c      	ldr	r4, [r5, #0]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8022aca:	eddf 7aba 	vldr	s15, [pc, #744]	; 8022db4 <tVZFilter_initToPool+0x330>
 8022ace:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8022ad2:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8022ad6:	ee28 8a07 	vmul.f32	s16, s16, s14
 8022ada:	ee28 8a27 	vmul.f32	s16, s16, s15
 8022ade:	eeb0 0a48 	vmov.f32	s0, s16
 8022ae2:	f004 fdf7 	bl	80276d4 <tanf>

	  switch( f->type )
 8022ae6:	7923      	ldrb	r3, [r4, #4]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8022ae8:	eef0 8a40 	vmov.f32	s17, s0
 8022aec:	ed84 0a04 	vstr	s0, [r4, #16]
	  switch( f->type )
 8022af0:	2b0a      	cmp	r3, #10
 8022af2:	f200 81b5 	bhi.w	8022e60 <tVZFilter_initToPool+0x3dc>
 8022af6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8022afa:	0053      	.short	0x0053
 8022afc:	0069005e 	.word	0x0069005e
 8022b00:	00ab0074 	.word	0x00ab0074
 8022b04:	011600e3 	.word	0x011600e3
 8022b08:	01630136 	.word	0x01630136
 8022b0c:	000b01a8 	.word	0x000b01a8
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
	_tVZFilter* f = *vf;
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8022b10:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8022b14:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8022b18:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8022b1a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8022b1e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8022b22:	f004 fc99 	bl	8027458 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8022b26:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8022b2a:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8022b2e:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8022db4 <tVZFilter_initToPool+0x330>
 8022b32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022b3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8022b3e:	f004 fdc9 	bl	80276d4 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8022b42:	ed95 7a04 	vldr	s14, [r5, #16]
							   // unwarped: r = pow(2, -B/2) -> approximation for low
							   // center-frequencies
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8022b46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8022b4a:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8022b4e:	edc4 7a07 	vstr	s15, [r4, #28]
 8022b52:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8022b56:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8022b5a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8022b5e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8022b62:	ee20 0a07 	vmul.f32	s0, s0, s14
 8022b66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8022b6a:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8022b6e:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8022b72:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8022b76:	eeb1 7a67 	vneg.f32	s14, s15
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8022b7a:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8022b7e:	ed84 7a08 	vstr	s14, [r4, #32]
	  f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 8022b82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022b86:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8022b8a:	eef0 6a47 	vmov.f32	s13, s14
 8022b8e:	eee7 6aa8 	vfma.f32	s13, s15, s17
 8022b92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8022b96:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8022b9a:	ecbd 8b04 	vpop	{d8-d9}
 8022b9e:	bd70      	pop	{r4, r5, r6, pc}
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8022ba0:	2300      	movs	r3, #0
 8022ba2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8022ba6:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8022baa:	6262      	str	r2, [r4, #36]	; 0x24
			f->R2 = f->invG;
 8022bac:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8022bb0:	61e3      	str	r3, [r4, #28]
 8022bb2:	6223      	str	r3, [r4, #32]
 8022bb4:	e7e5      	b.n	8022b82 <tVZFilter_initToPool+0xfe>
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8022bb6:	2300      	movs	r3, #0
 8022bb8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8022bbc:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8022bc0:	61e2      	str	r2, [r4, #28]
			f->R2 = f->invG;
 8022bc2:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8022bc6:	6223      	str	r3, [r4, #32]
 8022bc8:	6263      	str	r3, [r4, #36]	; 0x24
 8022bca:	e7da      	b.n	8022b82 <tVZFilter_initToPool+0xfe>
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8022bcc:	2300      	movs	r3, #0
 8022bce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8022bd2:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8022bd6:	6222      	str	r2, [r4, #32]
			f->R2 = f->invG;
 8022bd8:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8022bdc:	61e3      	str	r3, [r4, #28]
 8022bde:	6263      	str	r3, [r4, #36]	; 0x24
 8022be0:	e7cf      	b.n	8022b82 <tVZFilter_initToPool+0xfe>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8022be2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8022be6:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8022bea:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8022bec:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8022bf0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8022bf4:	f004 fc30 	bl	8027458 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8022bf8:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8022bfc:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8022c00:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8022db4 <tVZFilter_initToPool+0x330>
 8022c04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022c0c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8022c10:	f004 fd60 	bl	80276d4 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8022c14:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8022c18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8022c1c:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8022c1e:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8022c22:	61e3      	str	r3, [r4, #28]
 8022c24:	6263      	str	r3, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8022c26:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8022c2a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8022c2e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8022c32:	ee20 0a07 	vmul.f32	s0, s0, s14
 8022c36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8022c3a:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8022c3e:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8022c42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8022c46:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8022c4a:	edc4 7a08 	vstr	s15, [r4, #32]
 8022c4e:	e798      	b.n	8022b82 <tVZFilter_initToPool+0xfe>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8022c50:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8022c54:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8022c58:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8022c5a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8022c5e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8022c62:	f004 fbf9 	bl	8027458 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8022c66:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8022c6a:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8022c6e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8022db4 <tVZFilter_initToPool+0x330>
 8022c72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022c76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022c7a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8022c7e:	f004 fd29 	bl	80276d4 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8022c82:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8022c86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8022c8a:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8022c8c:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8022c90:	6223      	str	r3, [r4, #32]
 8022c92:	edc4 7a07 	vstr	s15, [r4, #28]
 8022c96:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8022c9a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8022c9e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8022ca2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8022ca6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8022caa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8022cae:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8022cb2:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8022cb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8022cba:	edc4 7a05 	vstr	s15, [r4, #20]
 8022cbe:	e760      	b.n	8022b82 <tVZFilter_initToPool+0xfe>
			float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8022cc0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8022cc4:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 8022cc8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8022ccc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8022cd0:	f004 fbc2 	bl	8027458 <powf>
			float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8022cd4:	ee28 0a00 	vmul.f32	s0, s16, s0
 8022cd8:	f004 fcfc 	bl	80276d4 <tanf>
			float r  = f->g/wl;
 8022cdc:	ee88 0a80 	vdiv.f32	s0, s17, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8022ce0:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8022ce4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022ce8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8022cec:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8022cf0:	edc4 7a07 	vstr	s15, [r4, #28]
 8022cf4:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8022cf8:	ee67 6a26 	vmul.f32	s13, s14, s13
			r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8022cfc:	ee20 0a00 	vmul.f32	s0, s0, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8022d00:	eee0 7a00 	vfma.f32	s15, s0, s0
 8022d04:	ee87 6a80 	vdiv.f32	s12, s15, s0
 8022d08:	ee76 7a65 	vsub.f32	s15, s12, s11
 8022d0c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8022d10:	eef1 7ac6 	vsqrt.f32	s15, s12
 8022d14:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8022d18:	ee27 7a27 	vmul.f32	s14, s14, s15
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8022d1c:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8022d20:	ed84 7a08 	vstr	s14, [r4, #32]
 8022d24:	e72d      	b.n	8022b82 <tVZFilter_initToPool+0xfe>
			float A = sqrtf(f->G);
 8022d26:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8022d2a:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8022d2e:	eddf 7a22 	vldr	s15, [pc, #136]	; 8022db8 <tVZFilter_initToPool+0x334>
			float A = sqrtf(f->G);
 8022d32:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8022d36:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8022d3a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022d3e:	eef1 7ac8 	vsqrt.f32	s15, s16
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8022d42:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 8022d46:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8022d4a:	f004 ffad 	bl	8027ca8 <sinhf>
 8022d4e:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8022d52:	ed84 9a07 	vstr	s18, [r4, #28]
 8022d56:	6265      	str	r5, [r4, #36]	; 0x24
 8022d58:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8022d5c:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8022d60:	ed84 8a08 	vstr	s16, [r4, #32]
 8022d64:	e70d      	b.n	8022b82 <tVZFilter_initToPool+0xfe>
		  float A = sqrtf(f->G);
 8022d66:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8022d6a:	eddf 7a13 	vldr	s15, [pc, #76]	; 8022db8 <tVZFilter_initToPool+0x334>
		  float A = sqrtf(f->G);
 8022d6e:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8022d72:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8022d76:	ee20 0a27 	vmul.f32	s0, s0, s15
		  f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8022d7a:	eef1 7ac8 	vsqrt.f32	s15, s16
 8022d7e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8022d82:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8022d86:	f004 ff8f 	bl	8027ca8 <sinhf>
 8022d8a:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8022d8e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8022d92:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 8022d96:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8022d9a:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8022d9e:	61e3      	str	r3, [r4, #28]
 8022da0:	ed84 8a08 	vstr	s16, [r4, #32]
 8022da4:	e6ed      	b.n	8022b82 <tVZFilter_initToPool+0xfe>
 8022da6:	bf00      	nop
 8022da8:	200194e0 	.word	0x200194e0
 8022dac:	3fb504f3 	.word	0x3fb504f3
 8022db0:	3f3504f3 	.word	0x3f3504f3
 8022db4:	40490fdb 	.word	0x40490fdb
 8022db8:	3eb17218 	.word	0x3eb17218
 8022dbc:	00000000 	.word	0x00000000
		  float x  = 2.0f*f->m-1.0f;
 8022dc0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8022dc4:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8022dc8:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
			f->R2 = f->invG;
 8022dcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8022dce:	ed5f 0a05 	vldr	s1, [pc, #-20]	; 8022dbc <tVZFilter_initToPool+0x338>
			f->R2 = f->invG;
 8022dd2:	6163      	str	r3, [r4, #20]
		  float x  = 2.0f*f->m-1.0f;
 8022dd4:	eea7 8a27 	vfma.f32	s16, s14, s15
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8022dd8:	eef1 8a48 	vneg.f32	s17, s16
 8022ddc:	eeb0 0a68 	vmov.f32	s0, s17
 8022de0:	f001 f972 	bl	80240c8 <maximum>
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8022de4:	ed5f 0a0b 	vldr	s1, [pc, #-44]	; 8022dbc <tVZFilter_initToPool+0x338>
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8022de8:	ed84 0a07 	vstr	s0, [r4, #28]
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8022dec:	eeb0 0a48 	vmov.f32	s0, s16
 8022df0:	f001 f96e 	bl	80240d0 <minimum>
		  f->cB = 1.0f-x*x;
 8022df4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8022df8:	edd4 6a07 	vldr	s13, [r4, #28]
 8022dfc:	edd4 7a05 	vldr	s15, [r4, #20]
		  f->cB = 1.0f-x*x;
 8022e00:	eea8 7a88 	vfma.f32	s14, s17, s16
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8022e04:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 8022e08:	ee36 5aa6 	vadd.f32	s10, s13, s13
 8022e0c:	edd4 8a04 	vldr	s17, [r4, #16]
 8022e10:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8022e14:	ee27 6a07 	vmul.f32	s12, s14, s14
 8022e18:	eea6 6aa6 	vfma.f32	s12, s13, s13
 8022e1c:	eea0 6a00 	vfma.f32	s12, s0, s0
 8022e20:	eea0 6a45 	vfms.f32	s12, s0, s10
 8022e24:	ee84 5a86 	vdiv.f32	s10, s9, s12
 8022e28:	eeb1 6ac5 	vsqrt.f32	s12, s10
 8022e2c:	ee26 6a25 	vmul.f32	s12, s12, s11
		  f->cL *= s; f->cB *= s; f->cH *= s;
 8022e30:	ee66 6a86 	vmul.f32	s13, s13, s12
 8022e34:	ee27 7a06 	vmul.f32	s14, s14, s12
 8022e38:	ee20 0a06 	vmul.f32	s0, s0, s12
 8022e3c:	edc4 6a07 	vstr	s13, [r4, #28]
 8022e40:	ed84 7a08 	vstr	s14, [r4, #32]
 8022e44:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 8022e48:	e69b      	b.n	8022b82 <tVZFilter_initToPool+0xfe>
		  f->cL = 1.0f;
 8022e4a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8022e4e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
		  f->cL = 1.0f;
 8022e52:	61e3      	str	r3, [r4, #28]
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8022e54:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cH = 1.0f;
 8022e58:	6263      	str	r3, [r4, #36]	; 0x24
		  f->cB = f->R2;
 8022e5a:	edc4 7a08 	vstr	s15, [r4, #32]
 8022e5e:	e690      	b.n	8022b82 <tVZFilter_initToPool+0xfe>
 8022e60:	edd4 7a05 	vldr	s15, [r4, #20]
 8022e64:	e68d      	b.n	8022b82 <tVZFilter_initToPool+0xfe>
 8022e66:	bf00      	nop

08022e68 <tVZFilter_free>:
    _tVZFilter* f = *vf;
 8022e68:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 8022e6a:	6801      	ldr	r1, [r0, #0]
 8022e6c:	f001 b9f4 	b.w	8024258 <mpool_free>

08022e70 <tVZFilter_setSampleRate>:
	f->inv_sr = 1.0f/sampleRate;
 8022e70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	_tVZFilter* f = *vf;
 8022e74:	6803      	ldr	r3, [r0, #0]
	f->sr = sampleRate;
 8022e76:	ed83 0a0f 	vstr	s0, [r3, #60]	; 0x3c
	f->inv_sr = 1.0f/sampleRate;
 8022e7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022e7e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8022e82:	4770      	bx	lr

08022e84 <tVZFilter_tick>:
{
 8022e84:	b510      	push	{r4, lr}
	_tVZFilter* f = *vf;
 8022e86:	6804      	ldr	r4, [r0, #0]
{
 8022e88:	ed2d 8b06 	vpush	{d8-d10}
	yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 8022e8c:	ed94 8a02 	vldr	s16, [r4, #8]
 8022e90:	edd4 7a05 	vldr	s15, [r4, #20]
 8022e94:	ed94 9a04 	vldr	s18, [r4, #16]
 8022e98:	eea7 0ac8 	vfms.f32	s0, s15, s16
 8022e9c:	edd4 9a03 	vldr	s19, [r4, #12]
 8022ea0:	edd4 7a06 	vldr	s15, [r4, #24]
 8022ea4:	eea8 0a49 	vfms.f32	s0, s16, s18
 8022ea8:	ee70 8a69 	vsub.f32	s17, s0, s19
 8022eac:	ee68 8aa7 	vmul.f32	s17, s17, s15
	yB = tanhf(f->g*yH) + f->s1;
 8022eb0:	ee29 aa28 	vmul.f32	s20, s18, s17
 8022eb4:	eeb0 0a4a 	vmov.f32	s0, s20
 8022eb8:	f004 fc34 	bl	8027724 <tanhf>
 8022ebc:	ee38 8a00 	vadd.f32	s16, s16, s0
	yL = tanhf(f->g*yB) + f->s2;
 8022ec0:	ee29 9a08 	vmul.f32	s18, s18, s16
	f->s1 = f->g*yH + yB; // state update in 1st integrator
 8022ec4:	ee3a aa08 	vadd.f32	s20, s20, s16
	yL = tanhf(f->g*yB) + f->s2;
 8022ec8:	eeb0 0a49 	vmov.f32	s0, s18
	f->s1 = f->g*yH + yB; // state update in 1st integrator
 8022ecc:	ed84 aa02 	vstr	s20, [r4, #8]
	yL = tanhf(f->g*yB) + f->s2;
 8022ed0:	f004 fc28 	bl	8027724 <tanhf>
	return f->cL*yL + f->cB*yB + f->cH*yH;
 8022ed4:	edd4 7a08 	vldr	s15, [r4, #32]
	yL = tanhf(f->g*yB) + f->s2;
 8022ed8:	ee79 9a80 	vadd.f32	s19, s19, s0
	return f->cL*yL + f->cB*yB + f->cH*yH;
 8022edc:	ed94 7a07 	vldr	s14, [r4, #28]
 8022ee0:	ee28 0a27 	vmul.f32	s0, s16, s15
 8022ee4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
	f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8022ee8:	ee39 9a29 	vadd.f32	s18, s18, s19
	return f->cL*yL + f->cB*yB + f->cH*yH;
 8022eec:	eea7 0a29 	vfma.f32	s0, s14, s19
	f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8022ef0:	ed84 9a03 	vstr	s18, [r4, #12]
}
 8022ef4:	eea7 0aa8 	vfma.f32	s0, s15, s17
 8022ef8:	ecbd 8b06 	vpop	{d8-d10}
 8022efc:	bd10      	pop	{r4, pc}
 8022efe:	bf00      	nop

08022f00 <tVZFilter_tickEfficient>:
	_tVZFilter* f = *vf;
 8022f00:	6803      	ldr	r3, [r0, #0]
	yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 8022f02:	ed93 7a02 	vldr	s14, [r3, #8]
 8022f06:	edd3 7a05 	vldr	s15, [r3, #20]
 8022f0a:	edd3 5a04 	vldr	s11, [r3, #16]
 8022f0e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8022f12:	ed93 6a03 	vldr	s12, [r3, #12]
 8022f16:	ed93 4a06 	vldr	s8, [r3, #24]
	return f->cL*yL + f->cB*yB + f->cH*yH;
 8022f1a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8022f1e:	edd3 4a08 	vldr	s9, [r3, #32]
 8022f22:	ed93 5a07 	vldr	s10, [r3, #28]
	yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
 8022f26:	eea7 0a65 	vfms.f32	s0, s14, s11
 8022f2a:	ee70 7a46 	vsub.f32	s15, s0, s12
 8022f2e:	ee67 7a84 	vmul.f32	s15, s15, s8
	yB = (f->g*yH) + f->s1;
 8022f32:	eea5 7aa7 	vfma.f32	s14, s11, s15
	return f->cL*yL + f->cB*yB + f->cH*yH;
 8022f36:	ee27 0aa6 	vmul.f32	s0, s15, s13
	yL = (f->g*yB) + f->s2;
 8022f3a:	eef0 6a46 	vmov.f32	s13, s12
 8022f3e:	eee5 6a87 	vfma.f32	s13, s11, s14
	f->s1 = f->g*yH + yB; // state update in 1st integrator
 8022f42:	eeb0 6a47 	vmov.f32	s12, s14
	return f->cL*yL + f->cB*yB + f->cH*yH;
 8022f46:	eea4 0a87 	vfma.f32	s0, s9, s14
	f->s1 = f->g*yH + yB; // state update in 1st integrator
 8022f4a:	eea5 6aa7 	vfma.f32	s12, s11, s15
	f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8022f4e:	eef0 7a66 	vmov.f32	s15, s13
}
 8022f52:	eea5 0a26 	vfma.f32	s0, s10, s13
	f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8022f56:	eee5 7a87 	vfma.f32	s15, s11, s14
	f->s1 = f->g*yH + yB; // state update in 1st integrator
 8022f5a:	ed83 6a02 	vstr	s12, [r3, #8]
	f->s2 = f->g*yB + yL; // state update in 2nd integrator
 8022f5e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8022f62:	4770      	bx	lr

08022f64 <tVZFilter_setFreq>:
{
 8022f64:	b538      	push	{r3, r4, r5, lr}
	f->fc = LEAF_clip(0.0f, freq, 0.5f*leaf.sampleRate);
 8022f66:	4be3      	ldr	r3, [pc, #908]	; (80232f4 <tVZFilter_setFreq+0x390>)
 8022f68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	_tVZFilter* f = *vf;
 8022f6c:	6804      	ldr	r4, [r0, #0]
{
 8022f6e:	4605      	mov	r5, r0
	f->fc = LEAF_clip(0.0f, freq, 0.5f*leaf.sampleRate);
 8022f70:	eef0 0a40 	vmov.f32	s1, s0
 8022f74:	ed9f 0ae0 	vldr	s0, [pc, #896]	; 80232f8 <tVZFilter_setFreq+0x394>
{
 8022f78:	ed2d 8b04 	vpush	{d8-d9}
	f->fc = LEAF_clip(0.0f, freq, 0.5f*leaf.sampleRate);
 8022f7c:	ed93 1a00 	vldr	s2, [r3]
 8022f80:	ee21 1a27 	vmul.f32	s2, s2, s15
 8022f84:	f000 fec0 	bl	8023d08 <LEAF_clip>
 8022f88:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
	_tVZFilter* f = *vf;
 8022f8c:	682c      	ldr	r4, [r5, #0]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8022f8e:	eddf 7adb 	vldr	s15, [pc, #876]	; 80232fc <tVZFilter_setFreq+0x398>
 8022f92:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8022f96:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8022f9a:	ee28 8a07 	vmul.f32	s16, s16, s14
 8022f9e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8022fa2:	eeb0 0a48 	vmov.f32	s0, s16
 8022fa6:	f004 fb95 	bl	80276d4 <tanf>
	  switch( f->type )
 8022faa:	7923      	ldrb	r3, [r4, #4]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8022fac:	eef0 8a40 	vmov.f32	s17, s0
 8022fb0:	ed84 0a04 	vstr	s0, [r4, #16]
	  switch( f->type )
 8022fb4:	2b0a      	cmp	r3, #10
 8022fb6:	f200 81b0 	bhi.w	802331a <tVZFilter_setFreq+0x3b6>
 8022fba:	e8df f013 	tbh	[pc, r3, lsl #1]
 8022fbe:	0053      	.short	0x0053
 8022fc0:	0069005e 	.word	0x0069005e
 8022fc4:	00ab0074 	.word	0x00ab0074
 8022fc8:	011600e3 	.word	0x011600e3
 8022fcc:	01560136 	.word	0x01560136
 8022fd0:	000b01a3 	.word	0x000b01a3
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8022fd4:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8022fd8:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8022fdc:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8022fde:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8022fe2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8022fe6:	f004 fa37 	bl	8027458 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8022fea:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8022fee:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8022ff2:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 80232fc <tVZFilter_setFreq+0x398>
 8022ff6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022ffe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023002:	f004 fb67 	bl	80276d4 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023006:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 802300a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 802300e:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8023012:	edc4 7a07 	vstr	s15, [r4, #28]
 8023016:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 802301a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 802301e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8023022:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023026:	ee20 0a07 	vmul.f32	s0, s0, s14
 802302a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802302e:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8023032:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8023036:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 802303a:	eeb1 7a67 	vneg.f32	s14, s15
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 802303e:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8023042:	ed84 7a08 	vstr	s14, [r4, #32]
	  f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 8023046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802304a:	ee77 7aa8 	vadd.f32	s15, s15, s17
 802304e:	eef0 6a47 	vmov.f32	s13, s14
 8023052:	eee7 6aa8 	vfma.f32	s13, s15, s17
 8023056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802305a:	edc4 7a06 	vstr	s15, [r4, #24]
}
 802305e:	ecbd 8b04 	vpop	{d8-d9}
 8023062:	bd38      	pop	{r3, r4, r5, pc}
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023064:	2300      	movs	r3, #0
 8023066:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 802306a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 802306e:	6262      	str	r2, [r4, #36]	; 0x24
			f->R2 = f->invG;
 8023070:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023074:	61e3      	str	r3, [r4, #28]
 8023076:	6223      	str	r3, [r4, #32]
 8023078:	e7e5      	b.n	8023046 <tVZFilter_setFreq+0xe2>
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 802307a:	2300      	movs	r3, #0
 802307c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8023080:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8023084:	61e2      	str	r2, [r4, #28]
			f->R2 = f->invG;
 8023086:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 802308a:	6223      	str	r3, [r4, #32]
 802308c:	6263      	str	r3, [r4, #36]	; 0x24
 802308e:	e7da      	b.n	8023046 <tVZFilter_setFreq+0xe2>
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023090:	2300      	movs	r3, #0
 8023092:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8023096:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 802309a:	6222      	str	r2, [r4, #32]
			f->R2 = f->invG;
 802309c:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80230a0:	61e3      	str	r3, [r4, #28]
 80230a2:	6263      	str	r3, [r4, #36]	; 0x24
 80230a4:	e7cf      	b.n	8023046 <tVZFilter_setFreq+0xe2>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80230a6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80230aa:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 80230ae:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80230b0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80230b4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80230b8:	f004 f9ce 	bl	8027458 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 80230bc:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 80230c0:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 80230c4:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80232fc <tVZFilter_setFreq+0x398>
 80230c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80230cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80230d0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80230d4:	f004 fafe 	bl	80276d4 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80230d8:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80230dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 80230e0:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80230e2:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 80230e6:	61e3      	str	r3, [r4, #28]
 80230e8:	6263      	str	r3, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80230ea:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80230ee:	ee20 0a00 	vmul.f32	s0, s0, s0
 80230f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80230f6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80230fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80230fe:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8023102:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8023106:	ee77 7aa7 	vadd.f32	s15, s15, s15
 802310a:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 802310e:	edc4 7a08 	vstr	s15, [r4, #32]
 8023112:	e798      	b.n	8023046 <tVZFilter_setFreq+0xe2>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023114:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023118:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 802311c:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 802311e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023122:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8023126:	f004 f997 	bl	8027458 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 802312a:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 802312e:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8023132:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80232fc <tVZFilter_setFreq+0x398>
 8023136:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802313a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802313e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023142:	f004 fac7 	bl	80276d4 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023146:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 802314a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 802314e:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023150:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023154:	6223      	str	r3, [r4, #32]
 8023156:	edc4 7a07 	vstr	s15, [r4, #28]
 802315a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 802315e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8023162:	ee20 0a00 	vmul.f32	s0, s0, s0
 8023166:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802316a:	ee20 0a07 	vmul.f32	s0, s0, s14
 802316e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8023172:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8023176:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 802317a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 802317e:	edc4 7a05 	vstr	s15, [r4, #20]
 8023182:	e760      	b.n	8023046 <tVZFilter_setFreq+0xe2>
			float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8023184:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023188:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 802318c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023190:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8023194:	f004 f960 	bl	8027458 <powf>
			float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023198:	ee28 0a00 	vmul.f32	s0, s16, s0
 802319c:	f004 fa9a 	bl	80276d4 <tanf>
			float r  = f->g/wl;
 80231a0:	ee88 0a80 	vdiv.f32	s0, s17, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80231a4:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 80231a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80231ac:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80231b0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80231b4:	edc4 7a07 	vstr	s15, [r4, #28]
 80231b8:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80231bc:	ee67 6a26 	vmul.f32	s13, s14, s13
			r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80231c0:	ee20 0a00 	vmul.f32	s0, s0, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80231c4:	eee0 7a00 	vfma.f32	s15, s0, s0
 80231c8:	ee87 6a80 	vdiv.f32	s12, s15, s0
 80231cc:	ee76 7a65 	vsub.f32	s15, s12, s11
 80231d0:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80231d4:	eef1 7ac6 	vsqrt.f32	s15, s12
 80231d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80231dc:	ee27 7a27 	vmul.f32	s14, s14, s15
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80231e0:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80231e4:	ed84 7a08 	vstr	s14, [r4, #32]
 80231e8:	e72d      	b.n	8023046 <tVZFilter_setFreq+0xe2>
			float A = sqrtf(f->G);
 80231ea:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80231ee:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 80231f2:	eddf 7a43 	vldr	s15, [pc, #268]	; 8023300 <tVZFilter_setFreq+0x39c>
			float A = sqrtf(f->G);
 80231f6:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 80231fa:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 80231fe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023202:	eef1 7ac8 	vsqrt.f32	s15, s16
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8023206:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 802320a:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 802320e:	f004 fd4b 	bl	8027ca8 <sinhf>
 8023212:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8023216:	ed84 9a07 	vstr	s18, [r4, #28]
 802321a:	6265      	str	r5, [r4, #36]	; 0x24
 802321c:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8023220:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 8023224:	ed84 8a08 	vstr	s16, [r4, #32]
 8023228:	e70d      	b.n	8023046 <tVZFilter_setFreq+0xe2>
		  float A = sqrtf(f->G);
 802322a:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 802322e:	eddf 7a34 	vldr	s15, [pc, #208]	; 8023300 <tVZFilter_setFreq+0x39c>
		  float A = sqrtf(f->G);
 8023232:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8023236:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 802323a:	ee20 0a27 	vmul.f32	s0, s0, s15
		  f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 802323e:	eef1 7ac8 	vsqrt.f32	s15, s16
 8023242:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8023246:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 802324a:	f004 fd2d 	bl	8027ca8 <sinhf>
 802324e:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8023252:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023256:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 802325a:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 802325e:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8023262:	61e3      	str	r3, [r4, #28]
 8023264:	ed84 8a08 	vstr	s16, [r4, #32]
 8023268:	e6ed      	b.n	8023046 <tVZFilter_setFreq+0xe2>
		  float x  = 2.0f*f->m-1.0f;
 802326a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802326e:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8023272:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
			f->R2 = f->invG;
 8023276:	6b23      	ldr	r3, [r4, #48]	; 0x30
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8023278:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80232f8 <tVZFilter_setFreq+0x394>
			f->R2 = f->invG;
 802327c:	6163      	str	r3, [r4, #20]
		  float x  = 2.0f*f->m-1.0f;
 802327e:	eea7 8a27 	vfma.f32	s16, s14, s15
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8023282:	eef1 8a48 	vneg.f32	s17, s16
 8023286:	eeb0 0a68 	vmov.f32	s0, s17
 802328a:	f000 ff1d 	bl	80240c8 <maximum>
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 802328e:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80232f8 <tVZFilter_setFreq+0x394>
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8023292:	ed84 0a07 	vstr	s0, [r4, #28]
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8023296:	eeb0 0a48 	vmov.f32	s0, s16
 802329a:	f000 ff19 	bl	80240d0 <minimum>
		  f->cB = 1.0f-x*x;
 802329e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 80232a2:	edd4 6a07 	vldr	s13, [r4, #28]
 80232a6:	edd4 7a05 	vldr	s15, [r4, #20]
		  f->cB = 1.0f-x*x;
 80232aa:	eea8 7a88 	vfma.f32	s14, s17, s16
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 80232ae:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 80232b2:	ee36 5aa6 	vadd.f32	s10, s13, s13
 80232b6:	edd4 8a04 	vldr	s17, [r4, #16]
 80232ba:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80232be:	ee27 6a07 	vmul.f32	s12, s14, s14
 80232c2:	eea6 6aa6 	vfma.f32	s12, s13, s13
 80232c6:	eea0 6a00 	vfma.f32	s12, s0, s0
 80232ca:	eea0 6a45 	vfms.f32	s12, s0, s10
 80232ce:	ee84 5a86 	vdiv.f32	s10, s9, s12
 80232d2:	eeb1 6ac5 	vsqrt.f32	s12, s10
 80232d6:	ee26 6a25 	vmul.f32	s12, s12, s11
		  f->cL *= s; f->cB *= s; f->cH *= s;
 80232da:	ee66 6a86 	vmul.f32	s13, s13, s12
 80232de:	ee27 7a06 	vmul.f32	s14, s14, s12
 80232e2:	ee20 0a06 	vmul.f32	s0, s0, s12
 80232e6:	edc4 6a07 	vstr	s13, [r4, #28]
 80232ea:	ed84 7a08 	vstr	s14, [r4, #32]
 80232ee:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 80232f2:	e6a8      	b.n	8023046 <tVZFilter_setFreq+0xe2>
 80232f4:	200194e0 	.word	0x200194e0
 80232f8:	00000000 	.word	0x00000000
 80232fc:	40490fdb 	.word	0x40490fdb
 8023300:	3eb17218 	.word	0x3eb17218
		  f->cL = 1.0f;
 8023304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8023308:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
		  f->cL = 1.0f;
 802330c:	61e3      	str	r3, [r4, #28]
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 802330e:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cH = 1.0f;
 8023312:	6263      	str	r3, [r4, #36]	; 0x24
		  f->cB = f->R2;
 8023314:	edc4 7a08 	vstr	s15, [r4, #32]
 8023318:	e695      	b.n	8023046 <tVZFilter_setFreq+0xe2>
 802331a:	edd4 7a05 	vldr	s15, [r4, #20]
 802331e:	e692      	b.n	8023046 <tVZFilter_setFreq+0xe2>

08023320 <tVZFilter_setFreqAndBandwidth>:
{
 8023320:	b538      	push	{r3, r4, r5, lr}
	f->B = LEAF_clip(0.0f,bw, 100.0f);
 8023322:	ed9f 1ac6 	vldr	s2, [pc, #792]	; 802363c <tVZFilter_setFreqAndBandwidth+0x31c>
{
 8023326:	4605      	mov	r5, r0
	_tVZFilter* f = *vf;
 8023328:	6804      	ldr	r4, [r0, #0]
{
 802332a:	ed2d 8b04 	vpush	{d8-d9}
 802332e:	eeb0 8a40 	vmov.f32	s16, s0
	f->B = LEAF_clip(0.0f,bw, 100.0f);
 8023332:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 802364c <tVZFilter_setFreqAndBandwidth+0x32c>
 8023336:	f000 fce7 	bl	8023d08 <LEAF_clip>
	f->fc = LEAF_clip(0.0f, freq, 0.5f*leaf.sampleRate);
 802333a:	4bc1      	ldr	r3, [pc, #772]	; (8023640 <tVZFilter_setFreqAndBandwidth+0x320>)
 802333c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	f->B = LEAF_clip(0.0f,bw, 100.0f);
 8023340:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
	f->fc = LEAF_clip(0.0f, freq, 0.5f*leaf.sampleRate);
 8023344:	ed93 1a00 	vldr	s2, [r3]
 8023348:	eef0 0a48 	vmov.f32	s1, s16
 802334c:	ed9f 0abf 	vldr	s0, [pc, #764]	; 802364c <tVZFilter_setFreqAndBandwidth+0x32c>
 8023350:	ee21 1a27 	vmul.f32	s2, s2, s15
 8023354:	f000 fcd8 	bl	8023d08 <LEAF_clip>
 8023358:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
	_tVZFilter* f = *vf;
 802335c:	682c      	ldr	r4, [r5, #0]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 802335e:	eddf 7ab9 	vldr	s15, [pc, #740]	; 8023644 <tVZFilter_setFreqAndBandwidth+0x324>
 8023362:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8023366:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 802336a:	ee28 8a07 	vmul.f32	s16, s16, s14
 802336e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8023372:	eeb0 0a48 	vmov.f32	s0, s16
 8023376:	f004 f9ad 	bl	80276d4 <tanf>
	  switch( f->type )
 802337a:	7923      	ldrb	r3, [r4, #4]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 802337c:	eef0 8a40 	vmov.f32	s17, s0
 8023380:	ed84 0a04 	vstr	s0, [r4, #16]
	  switch( f->type )
 8023384:	2b0a      	cmp	r3, #10
 8023386:	f200 81b3 	bhi.w	80236f0 <tVZFilter_setFreqAndBandwidth+0x3d0>
 802338a:	e8df f013 	tbh	[pc, r3, lsl #1]
 802338e:	0053      	.short	0x0053
 8023390:	0069005e 	.word	0x0069005e
 8023394:	00ab0074 	.word	0x00ab0074
 8023398:	011600e3 	.word	0x011600e3
 802339c:	01610136 	.word	0x01610136
 80233a0:	000b01a6 	.word	0x000b01a6
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80233a4:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80233a8:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 80233ac:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80233ae:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80233b2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80233b6:	f004 f84f 	bl	8027458 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 80233ba:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 80233be:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 80233c2:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8023644 <tVZFilter_setFreqAndBandwidth+0x324>
 80233c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80233ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80233ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 80233d2:	f004 f97f 	bl	80276d4 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80233d6:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80233da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80233de:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80233e2:	edc4 7a07 	vstr	s15, [r4, #28]
 80233e6:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80233ea:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80233ee:	ee20 0a00 	vmul.f32	s0, s0, s0
 80233f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80233f6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80233fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80233fe:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8023402:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8023406:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 802340a:	eeb1 7a67 	vneg.f32	s14, s15
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 802340e:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8023412:	ed84 7a08 	vstr	s14, [r4, #32]
	  f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 8023416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802341a:	ee77 7aa8 	vadd.f32	s15, s15, s17
 802341e:	eef0 6a47 	vmov.f32	s13, s14
 8023422:	eee7 6aa8 	vfma.f32	s13, s15, s17
 8023426:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802342a:	edc4 7a06 	vstr	s15, [r4, #24]
}
 802342e:	ecbd 8b04 	vpop	{d8-d9}
 8023432:	bd38      	pop	{r3, r4, r5, pc}
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023434:	2300      	movs	r3, #0
 8023436:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 802343a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 802343e:	6262      	str	r2, [r4, #36]	; 0x24
			f->R2 = f->invG;
 8023440:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023444:	61e3      	str	r3, [r4, #28]
 8023446:	6223      	str	r3, [r4, #32]
 8023448:	e7e5      	b.n	8023416 <tVZFilter_setFreqAndBandwidth+0xf6>
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 802344a:	2300      	movs	r3, #0
 802344c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8023450:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8023454:	61e2      	str	r2, [r4, #28]
			f->R2 = f->invG;
 8023456:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 802345a:	6223      	str	r3, [r4, #32]
 802345c:	6263      	str	r3, [r4, #36]	; 0x24
 802345e:	e7da      	b.n	8023416 <tVZFilter_setFreqAndBandwidth+0xf6>
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023460:	2300      	movs	r3, #0
 8023462:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8023466:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 802346a:	6222      	str	r2, [r4, #32]
			f->R2 = f->invG;
 802346c:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023470:	61e3      	str	r3, [r4, #28]
 8023472:	6263      	str	r3, [r4, #36]	; 0x24
 8023474:	e7cf      	b.n	8023416 <tVZFilter_setFreqAndBandwidth+0xf6>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023476:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 802347a:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 802347e:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023480:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023484:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8023488:	f003 ffe6 	bl	8027458 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 802348c:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8023490:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8023494:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8023644 <tVZFilter_setFreqAndBandwidth+0x324>
 8023498:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802349c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80234a0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80234a4:	f004 f916 	bl	80276d4 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80234a8:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80234ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 80234b0:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80234b2:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 80234b6:	61e3      	str	r3, [r4, #28]
 80234b8:	6263      	str	r3, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80234ba:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80234be:	ee20 0a00 	vmul.f32	s0, s0, s0
 80234c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80234c6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80234ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80234ce:	ee87 7a80 	vdiv.f32	s14, s15, s0
 80234d2:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 80234d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80234da:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 80234de:	edc4 7a08 	vstr	s15, [r4, #32]
 80234e2:	e798      	b.n	8023416 <tVZFilter_setFreqAndBandwidth+0xf6>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80234e4:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80234e8:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 80234ec:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80234ee:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80234f2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80234f6:	f003 ffaf 	bl	8027458 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 80234fa:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 80234fe:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8023502:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8023644 <tVZFilter_setFreqAndBandwidth+0x324>
 8023506:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802350a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802350e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023512:	f004 f8df 	bl	80276d4 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023516:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 802351a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 802351e:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023520:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023524:	6223      	str	r3, [r4, #32]
 8023526:	edc4 7a07 	vstr	s15, [r4, #28]
 802352a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 802352e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8023532:	ee20 0a00 	vmul.f32	s0, s0, s0
 8023536:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802353a:	ee20 0a07 	vmul.f32	s0, s0, s14
 802353e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8023542:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8023546:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 802354a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 802354e:	edc4 7a05 	vstr	s15, [r4, #20]
 8023552:	e760      	b.n	8023416 <tVZFilter_setFreqAndBandwidth+0xf6>
			float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8023554:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023558:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 802355c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023560:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8023564:	f003 ff78 	bl	8027458 <powf>
			float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023568:	ee28 0a00 	vmul.f32	s0, s16, s0
 802356c:	f004 f8b2 	bl	80276d4 <tanf>
			float r  = f->g/wl;
 8023570:	ee88 0a80 	vdiv.f32	s0, s17, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023574:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8023578:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802357c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8023580:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8023584:	edc4 7a07 	vstr	s15, [r4, #28]
 8023588:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 802358c:	ee67 6a26 	vmul.f32	s13, s14, s13
			r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8023590:	ee20 0a00 	vmul.f32	s0, s0, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023594:	eee0 7a00 	vfma.f32	s15, s0, s0
 8023598:	ee87 6a80 	vdiv.f32	s12, s15, s0
 802359c:	ee76 7a65 	vsub.f32	s15, s12, s11
 80235a0:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80235a4:	eef1 7ac6 	vsqrt.f32	s15, s12
 80235a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80235ac:	ee27 7a27 	vmul.f32	s14, s14, s15
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80235b0:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80235b4:	ed84 7a08 	vstr	s14, [r4, #32]
 80235b8:	e72d      	b.n	8023416 <tVZFilter_setFreqAndBandwidth+0xf6>
			float A = sqrtf(f->G);
 80235ba:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80235be:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 80235c2:	eddf 7a21 	vldr	s15, [pc, #132]	; 8023648 <tVZFilter_setFreqAndBandwidth+0x328>
			float A = sqrtf(f->G);
 80235c6:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 80235ca:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 80235ce:	ee20 0a27 	vmul.f32	s0, s0, s15
 80235d2:	eef1 7ac8 	vsqrt.f32	s15, s16
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80235d6:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 80235da:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 80235de:	f004 fb63 	bl	8027ca8 <sinhf>
 80235e2:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 80235e6:	ed84 9a07 	vstr	s18, [r4, #28]
 80235ea:	6265      	str	r5, [r4, #36]	; 0x24
 80235ec:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 80235f0:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 80235f4:	ed84 8a08 	vstr	s16, [r4, #32]
 80235f8:	e70d      	b.n	8023416 <tVZFilter_setFreqAndBandwidth+0xf6>
		  float A = sqrtf(f->G);
 80235fa:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 80235fe:	eddf 7a12 	vldr	s15, [pc, #72]	; 8023648 <tVZFilter_setFreqAndBandwidth+0x328>
		  float A = sqrtf(f->G);
 8023602:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 8023606:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 802360a:	ee20 0a27 	vmul.f32	s0, s0, s15
		  f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 802360e:	eef1 7ac8 	vsqrt.f32	s15, s16
 8023612:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8023616:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 802361a:	f004 fb45 	bl	8027ca8 <sinhf>
 802361e:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8023622:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023626:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 802362a:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 802362e:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 8023632:	61e3      	str	r3, [r4, #28]
 8023634:	ed84 8a08 	vstr	s16, [r4, #32]
 8023638:	e6ed      	b.n	8023416 <tVZFilter_setFreqAndBandwidth+0xf6>
 802363a:	bf00      	nop
 802363c:	42c80000 	.word	0x42c80000
 8023640:	200194e0 	.word	0x200194e0
 8023644:	40490fdb 	.word	0x40490fdb
 8023648:	3eb17218 	.word	0x3eb17218
 802364c:	00000000 	.word	0x00000000
		  float x  = 2.0f*f->m-1.0f;
 8023650:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8023654:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8023658:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
			f->R2 = f->invG;
 802365c:	6b23      	ldr	r3, [r4, #48]	; 0x30
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 802365e:	ed5f 0a05 	vldr	s1, [pc, #-20]	; 802364c <tVZFilter_setFreqAndBandwidth+0x32c>
			f->R2 = f->invG;
 8023662:	6163      	str	r3, [r4, #20]
		  float x  = 2.0f*f->m-1.0f;
 8023664:	eea7 8a27 	vfma.f32	s16, s14, s15
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8023668:	eef1 8a48 	vneg.f32	s17, s16
 802366c:	eeb0 0a68 	vmov.f32	s0, s17
 8023670:	f000 fd2a 	bl	80240c8 <maximum>
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8023674:	ed5f 0a0b 	vldr	s1, [pc, #-44]	; 802364c <tVZFilter_setFreqAndBandwidth+0x32c>
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8023678:	ed84 0a07 	vstr	s0, [r4, #28]
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 802367c:	eeb0 0a48 	vmov.f32	s0, s16
 8023680:	f000 fd26 	bl	80240d0 <minimum>
		  f->cB = 1.0f-x*x;
 8023684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8023688:	edd4 6a07 	vldr	s13, [r4, #28]
 802368c:	edd4 7a05 	vldr	s15, [r4, #20]
		  f->cB = 1.0f-x*x;
 8023690:	eea8 7a88 	vfma.f32	s14, s17, s16
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8023694:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 8023698:	ee36 5aa6 	vadd.f32	s10, s13, s13
 802369c:	edd4 8a04 	vldr	s17, [r4, #16]
 80236a0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80236a4:	ee27 6a07 	vmul.f32	s12, s14, s14
 80236a8:	eea6 6aa6 	vfma.f32	s12, s13, s13
 80236ac:	eea0 6a00 	vfma.f32	s12, s0, s0
 80236b0:	eea0 6a45 	vfms.f32	s12, s0, s10
 80236b4:	ee84 5a86 	vdiv.f32	s10, s9, s12
 80236b8:	eeb1 6ac5 	vsqrt.f32	s12, s10
 80236bc:	ee26 6a25 	vmul.f32	s12, s12, s11
		  f->cL *= s; f->cB *= s; f->cH *= s;
 80236c0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80236c4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80236c8:	ee20 0a06 	vmul.f32	s0, s0, s12
 80236cc:	edc4 6a07 	vstr	s13, [r4, #28]
 80236d0:	ed84 7a08 	vstr	s14, [r4, #32]
 80236d4:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 80236d8:	e69d      	b.n	8023416 <tVZFilter_setFreqAndBandwidth+0xf6>
		  f->cL = 1.0f;
 80236da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 80236de:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
		  f->cL = 1.0f;
 80236e2:	61e3      	str	r3, [r4, #28]
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 80236e4:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cH = 1.0f;
 80236e8:	6263      	str	r3, [r4, #36]	; 0x24
		  f->cB = f->R2;
 80236ea:	edc4 7a08 	vstr	s15, [r4, #32]
 80236ee:	e692      	b.n	8023416 <tVZFilter_setFreqAndBandwidth+0xf6>
 80236f0:	edd4 7a05 	vldr	s15, [r4, #20]
 80236f4:	e68f      	b.n	8023416 <tVZFilter_setFreqAndBandwidth+0xf6>
 80236f6:	bf00      	nop

080236f8 <tVZFilter_setGain>:
{
 80236f8:	b538      	push	{r3, r4, r5, lr}
	f->G = LEAF_clip(0.000001f, gain, 100.0f);
 80236fa:	eef0 0a40 	vmov.f32	s1, s0
 80236fe:	ed9f 1ae3 	vldr	s2, [pc, #908]	; 8023a8c <tVZFilter_setGain+0x394>
 8023702:	ed9f 0ae3 	vldr	s0, [pc, #908]	; 8023a90 <tVZFilter_setGain+0x398>
{
 8023706:	4605      	mov	r5, r0
	_tVZFilter* f = *vf;
 8023708:	6804      	ldr	r4, [r0, #0]
{
 802370a:	ed2d 8b04 	vpush	{d8-d9}
	f->G = LEAF_clip(0.000001f, gain, 100.0f);
 802370e:	f000 fafb 	bl	8023d08 <LEAF_clip>
	f->invG = 1.0f/f->G;
 8023712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	f->G = LEAF_clip(0.000001f, gain, 100.0f);
 8023716:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 802371a:	eddf 7ade 	vldr	s15, [pc, #888]	; 8023a94 <tVZFilter_setGain+0x39c>
	f->invG = 1.0f/f->G;
 802371e:	ee86 7a80 	vdiv.f32	s14, s13, s0
 8023722:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
	_tVZFilter* f = *vf;
 8023726:	682c      	ldr	r4, [r5, #0]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8023728:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 802372c:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8023730:	ee28 8a07 	vmul.f32	s16, s16, s14
 8023734:	ee28 8a27 	vmul.f32	s16, s16, s15
 8023738:	eeb0 0a48 	vmov.f32	s0, s16
 802373c:	f003 ffca 	bl	80276d4 <tanf>
	  switch( f->type )
 8023740:	7923      	ldrb	r3, [r4, #4]
	f->g = tanf(PI * f->fc * f->inv_sr);  // embedded integrator gain (Fig 3.11)
 8023742:	eef0 8a40 	vmov.f32	s17, s0
 8023746:	ed84 0a04 	vstr	s0, [r4, #16]
	  switch( f->type )
 802374a:	2b0a      	cmp	r3, #10
 802374c:	f200 81b3 	bhi.w	8023ab6 <tVZFilter_setGain+0x3be>
 8023750:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023754:	005e0053 	.word	0x005e0053
 8023758:	00740069 	.word	0x00740069
 802375c:	00e300ab 	.word	0x00e300ab
 8023760:	01360116 	.word	0x01360116
 8023764:	01a60156 	.word	0x01a60156
 8023768:	000b      	.short	0x000b
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 802376a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 802376e:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8023772:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023774:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023778:	ee60 0aa7 	vmul.f32	s1, s1, s15
 802377c:	f003 fe6c 	bl	8027458 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023780:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8023784:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8023788:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8023a94 <tVZFilter_setGain+0x39c>
 802378c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023794:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023798:	f003 ff9c 	bl	80276d4 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 802379c:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80237a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80237a4:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80237a8:	edc4 7a07 	vstr	s15, [r4, #28]
 80237ac:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80237b0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80237b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80237b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80237bc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80237c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80237c4:	ee87 7a80 	vdiv.f32	s14, s15, s0
 80237c8:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 80237cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80237d0:	eeb1 7a67 	vneg.f32	s14, s15
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 80237d4:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80237d8:	ed84 7a08 	vstr	s14, [r4, #32]
	  f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 80237dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80237e0:	ee77 7aa8 	vadd.f32	s15, s15, s17
 80237e4:	eef0 6a47 	vmov.f32	s13, s14
 80237e8:	eee7 6aa8 	vfma.f32	s13, s15, s17
 80237ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80237f0:	edc4 7a06 	vstr	s15, [r4, #24]
}
 80237f4:	ecbd 8b04 	vpop	{d8-d9}
 80237f8:	bd38      	pop	{r3, r4, r5, pc}
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80237fa:	2300      	movs	r3, #0
 80237fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8023800:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8023804:	6262      	str	r2, [r4, #36]	; 0x24
			f->R2 = f->invG;
 8023806:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 802380a:	61e3      	str	r3, [r4, #28]
 802380c:	6223      	str	r3, [r4, #32]
 802380e:	e7e5      	b.n	80237dc <tVZFilter_setGain+0xe4>
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8023810:	2300      	movs	r3, #0
 8023812:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 8023816:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 802381a:	61e2      	str	r2, [r4, #28]
			f->R2 = f->invG;
 802381c:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8023820:	6223      	str	r3, [r4, #32]
 8023822:	6263      	str	r3, [r4, #36]	; 0x24
 8023824:	e7da      	b.n	80237dc <tVZFilter_setGain+0xe4>
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023826:	2300      	movs	r3, #0
 8023828:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
			f->R2 = f->invG;
 802382c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023830:	6222      	str	r2, [r4, #32]
			f->R2 = f->invG;
 8023832:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8023836:	61e3      	str	r3, [r4, #28]
 8023838:	6263      	str	r3, [r4, #36]	; 0x24
 802383a:	e7cf      	b.n	80237dc <tVZFilter_setGain+0xe4>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 802383c:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8023840:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 8023844:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8023846:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 802384a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 802384e:	f003 fe03 	bl	8027458 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 8023852:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 8023856:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 802385a:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8023a94 <tVZFilter_setGain+0x39c>
 802385e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023866:	ee27 0a80 	vmul.f32	s0, s15, s0
 802386a:	f003 ff33 	bl	80276d4 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 802386e:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023872:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 8023876:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8023878:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 802387c:	61e3      	str	r3, [r4, #28]
 802387e:	6263      	str	r3, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8023880:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8023884:	ee20 0a00 	vmul.f32	s0, s0, s0
 8023888:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802388c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023890:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8023894:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8023898:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 802389c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80238a0:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 80238a4:	edc4 7a08 	vstr	s15, [r4, #32]
 80238a8:	e798      	b.n	80237dc <tVZFilter_setGain+0xe4>
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80238aa:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80238ae:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
	_tVZFilter* f = *vf;
 80238b2:	682d      	ldr	r5, [r5, #0]
  float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80238b4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80238b8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80238bc:	f003 fdcc 	bl	8027458 <powf>
  float gl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 80238c0:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 80238c4:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 80238c8:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8023a94 <tVZFilter_setGain+0x39c>
 80238cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80238d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80238d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80238d8:	f003 fefc 	bl	80276d4 <tanf>
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80238dc:	ed95 7a04 	vldr	s14, [r5, #16]
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80238e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80238e4:	2300      	movs	r3, #0
  float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80238e6:	ee80 0a07 	vdiv.f32	s0, s0, s14
			f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80238ea:	6223      	str	r3, [r4, #32]
 80238ec:	edc4 7a07 	vstr	s15, [r4, #28]
 80238f0:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80238f4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80238f8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80238fc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023900:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023904:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8023908:	ee87 7a80 	vdiv.f32	s14, s15, s0
 802390c:	eef1 7ac7 	vsqrt.f32	s15, s14
			f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8023910:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8023914:	edc4 7a05 	vstr	s15, [r4, #20]
 8023918:	e760      	b.n	80237dc <tVZFilter_setGain+0xe4>
			float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 802391a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 802391e:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 8023922:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023926:	ee60 0aa7 	vmul.f32	s1, s1, s15
 802392a:	f003 fd95 	bl	8027458 <powf>
			float wl = tanf(PI*fl*f->inv_sr);   // warped radian lower bandedge frequency /(2*fs)
 802392e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8023932:	f003 fecf 	bl	80276d4 <tanf>
			float r  = f->g/wl;
 8023936:	ee88 0a80 	vdiv.f32	s0, s17, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 802393a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 802393e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023942:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8023946:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 802394a:	edc4 7a07 	vstr	s15, [r4, #28]
 802394e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023952:	ee67 6a26 	vmul.f32	s13, s14, s13
			r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8023956:	ee20 0a00 	vmul.f32	s0, s0, s0
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 802395a:	eee0 7a00 	vfma.f32	s15, s0, s0
 802395e:	ee87 6a80 	vdiv.f32	s12, s15, s0
 8023962:	ee76 7a65 	vsub.f32	s15, s12, s11
 8023966:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 802396a:	eef1 7ac6 	vsqrt.f32	s15, s12
 802396e:	ee77 7aa7 	vadd.f32	s15, s15, s15
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8023972:	ee27 7a27 	vmul.f32	s14, s14, s15
			f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8023976:	edc4 7a05 	vstr	s15, [r4, #20]
			f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 802397a:	ed84 7a08 	vstr	s14, [r4, #32]
 802397e:	e72d      	b.n	80237dc <tVZFilter_setGain+0xe4>
			float A = sqrtf(f->G);
 8023980:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8023984:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8023988:	eddf 7a43 	vldr	s15, [pc, #268]	; 8023a98 <tVZFilter_setGain+0x3a0>
			float A = sqrtf(f->G);
 802398c:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 8023990:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8023994:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023998:	eef1 7ac8 	vsqrt.f32	s15, s16
		  f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 802399c:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 80239a0:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 80239a4:	f004 f980 	bl	8027ca8 <sinhf>
 80239a8:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 80239ac:	ed84 9a07 	vstr	s18, [r4, #28]
 80239b0:	6265      	str	r5, [r4, #36]	; 0x24
 80239b2:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 80239b6:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 80239ba:	ed84 8a08 	vstr	s16, [r4, #32]
 80239be:	e70d      	b.n	80237dc <tVZFilter_setGain+0xe4>
		  float A = sqrtf(f->G);
 80239c0:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 80239c4:	eddf 7a34 	vldr	s15, [pc, #208]	; 8023a98 <tVZFilter_setGain+0x3a0>
		  float A = sqrtf(f->G);
 80239c8:	eeb1 8ac9 	vsqrt.f32	s16, s18
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 80239cc:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 80239d0:	ee20 0a27 	vmul.f32	s0, s0, s15
		  f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80239d4:	eef1 7ac8 	vsqrt.f32	s15, s16
 80239d8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80239dc:	edc4 8a04 	vstr	s17, [r4, #16]
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 80239e0:	f004 f962 	bl	8027ca8 <sinhf>
 80239e4:	ee70 7a00 	vadd.f32	s15, s0, s0
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 80239e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80239ec:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 80239f0:	ee28 8a27 	vmul.f32	s16, s16, s15
		  f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 80239f4:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 80239f8:	61e3      	str	r3, [r4, #28]
 80239fa:	ed84 8a08 	vstr	s16, [r4, #32]
 80239fe:	e6ed      	b.n	80237dc <tVZFilter_setGain+0xe4>
		  float x  = 2.0f*f->m-1.0f;
 8023a00:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8023a04:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8023a08:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
			f->R2 = f->invG;
 8023a0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8023a0e:	eddf 0a23 	vldr	s1, [pc, #140]	; 8023a9c <tVZFilter_setGain+0x3a4>
			f->R2 = f->invG;
 8023a12:	6163      	str	r3, [r4, #20]
		  float x  = 2.0f*f->m-1.0f;
 8023a14:	eea7 8a27 	vfma.f32	s16, s14, s15
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8023a18:	eef1 8a48 	vneg.f32	s17, s16
 8023a1c:	eeb0 0a68 	vmov.f32	s0, s17
 8023a20:	f000 fb52 	bl	80240c8 <maximum>
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8023a24:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8023a9c <tVZFilter_setGain+0x3a4>
		  f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8023a28:	ed84 0a07 	vstr	s0, [r4, #28]
		  f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8023a2c:	eeb0 0a48 	vmov.f32	s0, s16
 8023a30:	f000 fb4e 	bl	80240d0 <minimum>
		  f->cB = 1.0f-x*x;
 8023a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8023a38:	edd4 6a07 	vldr	s13, [r4, #28]
 8023a3c:	edd4 7a05 	vldr	s15, [r4, #20]
		  f->cB = 1.0f-x*x;
 8023a40:	eea8 7a88 	vfma.f32	s14, s17, s16
		  float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 8023a44:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 8023a48:	ee36 5aa6 	vadd.f32	s10, s13, s13
 8023a4c:	edd4 8a04 	vldr	s17, [r4, #16]
 8023a50:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8023a54:	ee27 6a07 	vmul.f32	s12, s14, s14
 8023a58:	eea6 6aa6 	vfma.f32	s12, s13, s13
 8023a5c:	eea0 6a00 	vfma.f32	s12, s0, s0
 8023a60:	eea0 6a45 	vfms.f32	s12, s0, s10
 8023a64:	ee84 5a86 	vdiv.f32	s10, s9, s12
 8023a68:	eeb1 6ac5 	vsqrt.f32	s12, s10
 8023a6c:	ee26 6a25 	vmul.f32	s12, s12, s11
		  f->cL *= s; f->cB *= s; f->cH *= s;
 8023a70:	ee66 6a86 	vmul.f32	s13, s13, s12
 8023a74:	ee27 7a06 	vmul.f32	s14, s14, s12
 8023a78:	ee20 0a06 	vmul.f32	s0, s0, s12
 8023a7c:	edc4 6a07 	vstr	s13, [r4, #28]
 8023a80:	ed84 7a08 	vstr	s14, [r4, #32]
 8023a84:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
 8023a88:	e6a8      	b.n	80237dc <tVZFilter_setGain+0xe4>
 8023a8a:	bf00      	nop
 8023a8c:	42c80000 	.word	0x42c80000
 8023a90:	358637bd 	.word	0x358637bd
 8023a94:	40490fdb 	.word	0x40490fdb
 8023a98:	3eb17218 	.word	0x3eb17218
 8023a9c:	00000000 	.word	0x00000000
		  f->cL = 1.0f;
 8023aa0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8023aa4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
		  f->cL = 1.0f;
 8023aa8:	61e3      	str	r3, [r4, #28]
		  f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 8023aaa:	edc4 7a05 	vstr	s15, [r4, #20]
		  f->cH = 1.0f;
 8023aae:	6263      	str	r3, [r4, #36]	; 0x24
		  f->cB = f->R2;
 8023ab0:	edc4 7a08 	vstr	s15, [r4, #32]
 8023ab4:	e692      	b.n	80237dc <tVZFilter_setGain+0xe4>
 8023ab6:	edd4 7a05 	vldr	s15, [r4, #20]
 8023aba:	e68f      	b.n	80237dc <tVZFilter_setGain+0xe4>

08023abc <interpolate3max>:
    return(Y);
}

float interpolate3max(float *buf, const int peakindex)
{
    float a = buf[peakindex-1];
 8023abc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    float b = buf[peakindex];
    float c = buf[peakindex+1];
    float realpeak;
    
    realpeak = b + (float)0.125 * (c - a) * (c - a) / ((float)2. * b - a - c);
 8023ac0:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8023ac4:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
    float a = buf[peakindex-1];
 8023ac8:	440b      	add	r3, r1
 8023aca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8023ace:	edd0 7a00 	vldr	s15, [r0]
    float c = buf[peakindex+1];
 8023ad2:	ed90 6a02 	vldr	s12, [r0, #8]
    float b = buf[peakindex];
 8023ad6:	edd0 6a01 	vldr	s13, [r0, #4]
    realpeak = b + (float)0.125 * (c - a) * (c - a) / ((float)2. * b - a - c);
 8023ada:	ee36 7a67 	vsub.f32	s14, s12, s15
 8023ade:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8023ae2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8023ae6:	ee27 7a25 	vmul.f32	s14, s14, s11
 8023aea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8023aee:	ee87 0a27 	vdiv.f32	s0, s14, s15
    
    return(realpeak);
}
 8023af2:	ee30 0a26 	vadd.f32	s0, s0, s13
 8023af6:	4770      	bx	lr

08023af8 <interpolate3phase>:

float interpolate3phase(float *buf, const int peakindex)
{
    float a = buf[peakindex-1];
 8023af8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    float b = buf[peakindex];
    float c = buf[peakindex+1];
    float fraction;
    
    fraction = ((float)0.5 * (c - a)) / ((float)2. * b - a - c);
 8023afc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8023b00:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    float a = buf[peakindex-1];
 8023b04:	440b      	add	r3, r1
 8023b06:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8023b0a:	edd0 7a00 	vldr	s15, [r0]
    fraction = ((float)0.5 * (c - a)) / ((float)2. * b - a - c);
 8023b0e:	edd0 5a01 	vldr	s11, [r0, #4]
 8023b12:	eeb0 0a67 	vmov.f32	s0, s15
    float c = buf[peakindex+1];
 8023b16:	ed90 7a02 	vldr	s14, [r0, #8]
    fraction = ((float)0.5 * (c - a)) / ((float)2. * b - a - c);
 8023b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023b1e:	ee95 0a86 	vfnms.f32	s0, s11, s12
 8023b22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023b26:	ee30 0a47 	vsub.f32	s0, s0, s14
    
    return(fraction);
}
 8023b2a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8023b2e:	4770      	bx	lr

08023b30 <fastercosf>:
    return fResult;
}

float fastercosf(float fAngle)
{
    float fASqr = fAngle*fAngle;
 8023b30:	ee20 7a00 	vmul.f32	s14, s0, s0
    float fResult = 3.705e-02f;
    fResult *= fASqr;
    fResult -= 4.967e-01f;
 8023b34:	eddf 6a05 	vldr	s13, [pc, #20]	; 8023b4c <fastercosf+0x1c>
 8023b38:	eddf 7a05 	vldr	s15, [pc, #20]	; 8023b50 <fastercosf+0x20>
    fResult *= fASqr;
    fResult += 1.0f;
 8023b3c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    fResult -= 4.967e-01f;
 8023b40:	eee7 7a26 	vfma.f32	s15, s14, s13
    return fResult;
}
 8023b44:	eea7 0a27 	vfma.f32	s0, s14, s15
 8023b48:	4770      	bx	lr
 8023b4a:	bf00      	nop
 8023b4c:	3d17c1be 	.word	0x3d17c1be
 8023b50:	befe4f76 	.word	0xbefe4f76

08023b54 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 8023b54:	ee10 3a10 	vmov	r3, s0
 8023b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
 8023b5c:	ee00 3a10 	vmov	s0, r3
 8023b60:	4770      	bx	lr
 8023b62:	bf00      	nop

08023b64 <fastexp2f>:

// fast floating-point exp2 function taken from Robert Bristow Johnson's
// post in the music-dsp list on Date: Tue, 02 Sep 2014 16:50:11 -0400
float fastexp2f(float x)
{
    if (x >= -127.0)
 8023b64:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8023be4 <fastexp2f+0x80>
 8023b68:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b70:	db34      	blt.n	8023bdc <fastexp2f+0x78>
    {
        float accumulator, xPower;
        union {float f; int32_t i;} xBits;
        
        xBits.i = (int32_t)(x + 4096.0f) - 4096L;               /* integer part */
 8023b72:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8023be8 <fastexp2f+0x84>
        xPower = x*x;
        accumulator += 0.24137976293709f*xPower;
        xPower *= x;
        accumulator += 0.05203236900844f*xPower;
        xPower *= x;
        accumulator += 0.01355574723481f*xPower;
 8023b76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023b7a:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8023bec <fastexp2f+0x88>
        xBits.i = (int32_t)(x + 4096.0f) - 4096L;               /* integer part */
 8023b7e:	ee30 7a07 	vadd.f32	s14, s0, s14
        accumulator += 0.01355574723481f*xPower;
 8023b82:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8023bf0 <fastexp2f+0x8c>
 8023b86:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8023bf4 <fastexp2f+0x90>
 8023b8a:	ed9f 5a1b 	vldr	s10, [pc, #108]	; 8023bf8 <fastexp2f+0x94>
        xBits.i = (int32_t)(x + 4096.0f) - 4096L;               /* integer part */
 8023b8e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8023b92:	ee17 3a10 	vmov	r3, s14
 8023b96:	f5a3 5280 	sub.w	r2, r3, #4096	; 0x1000
 8023b9a:	ee07 2a10 	vmov	s14, r2
        
        xBits.i += 127;                                                    /* bias integer part */
 8023b9e:	f46f 6278 	mvn.w	r2, #3968	; 0xf80
        x -= (float)(xBits.i);                                             /* fractional part */
 8023ba2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        xBits.i += 127;                                                    /* bias integer part */
 8023ba6:	4413      	add	r3, r2
        xBits.i<<= 23;                                                     /* move biased int part into exponent bits */
 8023ba8:	05db      	lsls	r3, r3, #23
        x -= (float)(xBits.i);                                             /* fractional part */
 8023baa:	ee30 7a47 	vsub.f32	s14, s0, s14
        xPower = x*x;
 8023bae:	ee67 6a07 	vmul.f32	s13, s14, s14
        accumulator += 0.01355574723481f*xPower;
 8023bb2:	eee6 7aa4 	vfma.f32	s15, s13, s9
 8023bb6:	eeb0 0a67 	vmov.f32	s0, s15
        xPower *= x;
 8023bba:	ee67 7a26 	vmul.f32	s15, s14, s13
        accumulator += 0.01355574723481f*xPower;
 8023bbe:	eef0 6a46 	vmov.f32	s13, s12
 8023bc2:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8023bc6:	eee7 6a85 	vfma.f32	s13, s15, s10
 8023bca:	eef0 7a40 	vmov.f32	s15, s0
 8023bce:	eee7 7a26 	vfma.f32	s15, s14, s13
        
        return accumulator * xBits.f;
 8023bd2:	ee07 3a10 	vmov	s14, r3
 8023bd6:	ee27 0a87 	vmul.f32	s0, s15, s14
 8023bda:	4770      	bx	lr
    }
    else
    {
        return 0.0f;
 8023bdc:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8023bfc <fastexp2f+0x98>
    }
}
 8023be0:	4770      	bx	lr
 8023be2:	bf00      	nop
 8023be4:	c2fe0000 	.word	0xc2fe0000
 8023be8:	45800000 	.word	0x45800000
 8023bec:	3e772c42 	.word	0x3e772c42
 8023bf0:	3d551fe5 	.word	0x3d551fe5
 8023bf4:	3f316a8e 	.word	0x3f316a8e
 8023bf8:	3c5e18ed 	.word	0x3c5e18ed
 8023bfc:	00000000 	.word	0x00000000

08023c00 <LEAF_crossfade>:
 when t = 0, volumes[0] = 0.707, volumes[1] = 0.707 (equal-power cross fade)
 when t = 1, volumes[0] = 1, volumes[1] = 0
 */

void LEAF_crossfade(float fade, float* volumes) {
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8023c00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023c04:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8023c08:	ee30 7a27 	vadd.f32	s14, s0, s15
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8023c0c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8023c10:	ee27 7a26 	vmul.f32	s14, s14, s13
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8023c14:	ee67 7aa6 	vmul.f32	s15, s15, s13
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8023c18:	eef1 6ac7 	vsqrt.f32	s13, s14
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8023c1c:	eeb1 7ae7 	vsqrt.f32	s14, s15
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8023c20:	edc0 6a00 	vstr	s13, [r0]
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8023c24:	ed80 7a01 	vstr	s14, [r0, #4]
}
 8023c28:	4770      	bx	lr
 8023c2a:	bf00      	nop

08023c2c <LEAF_frequencyToMidi>:
}
#endif

float LEAF_frequencyToMidi(float f)
{
    return (69.0f + 12.0f * log2f(f * INV_440));
 8023c2c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8023c4c <LEAF_frequencyToMidi+0x20>
{
 8023c30:	b508      	push	{r3, lr}
    return (69.0f + 12.0f * log2f(f * INV_440));
 8023c32:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023c36:	f003 fb8f 	bl	8027358 <log2f>
 8023c3a:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8023c3e:	eddf 7a04 	vldr	s15, [pc, #16]	; 8023c50 <LEAF_frequencyToMidi+0x24>
}
 8023c42:	eee0 7a07 	vfma.f32	s15, s0, s14
 8023c46:	eeb0 0a67 	vmov.f32	s0, s15
 8023c4a:	bd08      	pop	{r3, pc}
 8023c4c:	3b14f209 	.word	0x3b14f209
 8023c50:	428a0000 	.word	0x428a0000

08023c54 <LEAF_shaper>:

// Jones shaper
float LEAF_shaper(float input, float m_drive)
{
    float fx = input * 2.0f;    // prescale
 8023c54:	ee30 0a00 	vadd.f32	s0, s0, s0
 8023c58:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8023cc4 <LEAF_shaper+0x70>
 8023c5c:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8023cc8 <LEAF_shaper+0x74>
    
    xc = LEAF_clip(-SQRT8, fx, SQRT8);
    xc2 = xc*xc;
    c = 0.5f*fx*(3.0f - (xc2));
    xc4 = xc2 * xc2;
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8023c60:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8023c64:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8023c68:	ed9f 4a18 	vldr	s8, [pc, #96]	; 8023ccc <LEAF_shaper+0x78>
 8023c6c:	fec0 7a67 	vminnm.f32	s15, s0, s15
 8023c70:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    xc2 = xc*xc;
 8023c74:	ee67 7aa7 	vmul.f32	s15, s15, s15
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8023c78:	eddf 4a15 	vldr	s9, [pc, #84]	; 8023cd0 <LEAF_shaper+0x7c>
 8023c7c:	ee20 6a06 	vmul.f32	s12, s0, s12
    shaperOut *= 0.5f;    // post_scale
 8023c80:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8023cd4 <LEAF_shaper+0x80>
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8023c84:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8023c88:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8023c8c:	ee27 7a67 	vnmul.f32	s14, s14, s15
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8023c90:	ee27 0aa4 	vmul.f32	s0, s15, s9
    c = 0.5f*fx*(3.0f - (xc2));
 8023c94:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8023c98:	eea3 7a84 	vfma.f32	s14, s7, s8
 8023c9c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    c = 0.5f*fx*(3.0f - (xc2));
 8023ca0:	ee75 5ae7 	vsub.f32	s11, s11, s15
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8023ca4:	ee70 0aa6 	vadd.f32	s1, s1, s13
 8023ca8:	eef0 7a40 	vmov.f32	s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8023cac:	ee37 7a24 	vadd.f32	s14, s14, s9
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8023cb0:	eee5 7a86 	vfma.f32	s15, s11, s12
    shaperOut *= 0.5f;    // post_scale
 8023cb4:	ee20 0a85 	vmul.f32	s0, s1, s10
 8023cb8:	ee27 0a00 	vmul.f32	s0, s14, s0
    return shaperOut;
}
 8023cbc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023cc0:	4770      	bx	lr
 8023cc2:	bf00      	nop
 8023cc4:	c03504f3 	.word	0xc03504f3
 8023cc8:	403504f3 	.word	0x403504f3
 8023ccc:	3c800000 	.word	0x3c800000
 8023cd0:	3d4ccccd 	.word	0x3d4ccccd
 8023cd4:	3f272f05 	.word	0x3f272f05

08023cd8 <LEAF_round>:

// round input to nearest rnd
float LEAF_round (float input, float rnd)
{
    rnd = fabsf(rnd);
 8023cd8:	eef0 0ae0 	vabs.f32	s1, s1
    
    if (rnd <= 0.0000001f) return input;
 8023cdc:	eddf 7a06 	vldr	s15, [pc, #24]	; 8023cf8 <LEAF_round+0x20>
 8023ce0:	eef4 0ae7 	vcmpe.f32	s1, s15
 8023ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ce8:	d905      	bls.n	8023cf6 <LEAF_round+0x1e>
    
    float scale = 1.f / rnd;
    
    return roundf(input * scale) / scale;
 8023cea:	eec0 7a20 	vdiv.f32	s15, s0, s1
 8023cee:	feb8 0a67 	vrinta.f32	s0, s15
 8023cf2:	ee20 0a20 	vmul.f32	s0, s0, s1
}
 8023cf6:	4770      	bx	lr
 8023cf8:	33d6bf95 	.word	0x33d6bf95

08023cfc <LEAF_bitwise_xor>:
{
    union unholy_t unholy;
    unholy.f = input;
    unholy.i = (unholy.i ^ op);
    
    return unholy.f;
 8023cfc:	ee10 3a10 	vmov	r3, s0
 8023d00:	4058      	eors	r0, r3
}
 8023d02:	ee00 0a10 	vmov	s0, r0
 8023d06:	4770      	bx	lr

08023d08 <LEAF_clip>:

float   LEAF_clip(float min, float val, float max)
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 8023d08:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8023d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d10:	dd05      	ble.n	8023d1e <LEAF_clip+0x16>
 8023d12:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 8023d16:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 8023d1a:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 8023d1e:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8023d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d26:	dc01      	bgt.n	8023d2c <LEAF_clip+0x24>
 8023d28:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 8023d2c:	4770      	bx	lr
 8023d2e:	bf00      	nop

08023d30 <LEAF_clipInt>:

int   LEAF_clipInt(int min, int val, int max)
{
    int tempmin = min;
    int tempmax = max;
    if (min > max)
 8023d30:	4290      	cmp	r0, r2
 8023d32:	dd02      	ble.n	8023d3a <LEAF_clipInt+0xa>
 8023d34:	4603      	mov	r3, r0
 8023d36:	4610      	mov	r0, r2
 8023d38:	461a      	mov	r2, r3
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin) {
 8023d3a:	4288      	cmp	r0, r1
 8023d3c:	dc03      	bgt.n	8023d46 <LEAF_clipInt+0x16>
 8023d3e:	428a      	cmp	r2, r1
 8023d40:	bfa8      	it	ge
 8023d42:	460a      	movge	r2, r1
 8023d44:	4610      	mov	r0, r2
    } else if (val > tempmax) {
        return tempmax;
    } else {
        return val;
    }
}
 8023d46:	4770      	bx	lr

08023d48 <LEAF_isPrime>:

int     LEAF_isPrime(uint64_t number )
{
    if ( number == 2 ) return 1;
 8023d48:	2900      	cmp	r1, #0
 8023d4a:	bf08      	it	eq
 8023d4c:	2802      	cmpeq	r0, #2
 8023d4e:	d029      	beq.n	8023da4 <LEAF_isPrime+0x5c>
{
 8023d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ( number & 1 ) {
 8023d54:	f000 0401 	and.w	r4, r0, #1
 8023d58:	2500      	movs	r5, #0
 8023d5a:	4606      	mov	r6, r0
 8023d5c:	ea54 0305 	orrs.w	r3, r4, r5
 8023d60:	d01d      	beq.n	8023d9e <LEAF_isPrime+0x56>
 8023d62:	460f      	mov	r7, r1
        for ( int i=3; i<(int)sqrt((double)number)+1; i+=2 )
 8023d64:	f7dc fc46 	bl	80005f4 <__aeabi_ul2d>
 8023d68:	2403      	movs	r4, #3
 8023d6a:	2500      	movs	r5, #0
 8023d6c:	ec41 0b17 	vmov	d7, r0, r1
 8023d70:	eeb1 7bc7 	vsqrt.f64	d7, d7
 8023d74:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8023d78:	ee17 8a90 	vmov	r8, s15
 8023d7c:	e006      	b.n	8023d8c <LEAF_isPrime+0x44>
            if ( (number % i) == 0 ) return 0;
 8023d7e:	f7dc fc6f 	bl	8000660 <__aeabi_uldivmod>
 8023d82:	3402      	adds	r4, #2
 8023d84:	f145 0500 	adc.w	r5, r5, #0
 8023d88:	4313      	orrs	r3, r2
 8023d8a:	d008      	beq.n	8023d9e <LEAF_isPrime+0x56>
        for ( int i=3; i<(int)sqrt((double)number)+1; i+=2 )
 8023d8c:	45a0      	cmp	r8, r4
            if ( (number % i) == 0 ) return 0;
 8023d8e:	4622      	mov	r2, r4
 8023d90:	462b      	mov	r3, r5
 8023d92:	4630      	mov	r0, r6
 8023d94:	4639      	mov	r1, r7
        for ( int i=3; i<(int)sqrt((double)number)+1; i+=2 )
 8023d96:	daf2      	bge.n	8023d7e <LEAF_isPrime+0x36>
    if ( number == 2 ) return 1;
 8023d98:	2001      	movs	r0, #1
        return 1; // prime
    }
    else return 0; // even
}
 8023d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else return 0; // even
 8023d9e:	2000      	movs	r0, #0
}
 8023da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( number == 2 ) return 1;
 8023da4:	2001      	movs	r0, #1
}
 8023da6:	4770      	bx	lr

08023da8 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
float LEAF_tanh(float x)
{
    
    if( x < -3.0f )
 8023da8:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 8023dac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023db4:	d418      	bmi.n	8023de8 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
 8023db6:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8023dba:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023dc2:	dc0e      	bgt.n	8023de2 <LEAF_tanh+0x3a>
        return 1.0f;
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 8023dc4:	ee60 6a00 	vmul.f32	s13, s0, s0
 8023dc8:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 8023dcc:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 8023dd0:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8023dd4:	eee6 7a86 	vfma.f32	s15, s13, s12
 8023dd8:	ee27 7a00 	vmul.f32	s14, s14, s0
 8023ddc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8023de0:	4770      	bx	lr
        return 1.0f;
 8023de2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
 8023de6:	4770      	bx	lr
        return -1.0f;
 8023de8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8023dec:	4770      	bx	lr
 8023dee:	bf00      	nop

08023df0 <LEAF_generate_exp>:


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
	float increment = (end - start) / (float)size;
 8023df0:	ee07 1a90 	vmov	s15, r1
 8023df4:	ee31 1a60 	vsub.f32	s2, s2, s1
	float x = start;
	for (int i = 0; i < size; i++)
 8023df8:	2900      	cmp	r1, #0
	float increment = (end - start) / (float)size;
 8023dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8023dfe:	b538      	push	{r3, r4, r5, lr}
 8023e00:	ed2d 8b04 	vpush	{d8-d9}
	float increment = (end - start) / (float)size;
 8023e04:	eec1 8a27 	vdiv.f32	s17, s2, s15
	for (int i = 0; i < size; i++)
 8023e08:	dd16      	ble.n	8023e38 <LEAF_generate_exp+0x48>
 8023e0a:	4604      	mov	r4, r0
 8023e0c:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8023e10:	eeb0 8a60 	vmov.f32	s16, s1
 8023e14:	eeb0 9a40 	vmov.f32	s18, s0
 8023e18:	eef0 9a61 	vmov.f32	s19, s3
	{
		buffer[i] = powf(base, x) + offset;
 8023e1c:	eef0 0a48 	vmov.f32	s1, s16
 8023e20:	eeb0 0a49 	vmov.f32	s0, s18
 8023e24:	f003 fb18 	bl	8027458 <powf>
 8023e28:	ee30 0a29 	vadd.f32	s0, s0, s19
		x += increment;
 8023e2c:	ee38 8a28 	vadd.f32	s16, s16, s17
		buffer[i] = powf(base, x) + offset;
 8023e30:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < size; i++)
 8023e34:	42a5      	cmp	r5, r4
 8023e36:	d1f1      	bne.n	8023e1c <LEAF_generate_exp+0x2c>
    }
}
 8023e38:	ecbd 8b04 	vpop	{d8-d9}
 8023e3c:	bd38      	pop	{r3, r4, r5, pc}
 8023e3e:	bf00      	nop

08023e40 <LEAF_generate_atodbPositiveClipped>:
    }
}


void LEAF_generate_atodbPositiveClipped(float* buffer, float lowerThreshold, float range, int size)
{
 8023e40:	b538      	push	{r3, r4, r5, lr}
    alias.ui &= 0x7fffffff;
 8023e42:	ee10 3a10 	vmov	r3, s0
    float increment = 1.0f / (float)size;
 8023e46:	ee07 1a90 	vmov	s15, r1
 8023e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    float scalar = range / fastabsf(lowerThreshold);
    for (int i = 0; i < size; i++)
 8023e4e:	2900      	cmp	r1, #0
    alias.ui &= 0x7fffffff;
 8023e50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    float increment = 1.0f / (float)size;
 8023e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float scalar = range / fastabsf(lowerThreshold);
 8023e58:	ee06 3a90 	vmov	s13, r3
{
 8023e5c:	ed2d 8b08 	vpush	{d8-d11}
    float scalar = range / fastabsf(lowerThreshold);
 8023e60:	eec0 9aa6 	vdiv.f32	s19, s1, s13
    float increment = 1.0f / (float)size;
 8023e64:	eec7 aa27 	vdiv.f32	s21, s14, s15
    for (int i = 0; i < size; i++)
 8023e68:	dd29      	ble.n	8023ebe <LEAF_generate_atodbPositiveClipped+0x7e>
 8023e6a:	ed9f 9a1b 	vldr	s18, [pc, #108]	; 8023ed8 <LEAF_generate_atodbPositiveClipped+0x98>
 8023e6e:	4604      	mov	r4, r0
 8023e70:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8023e74:	fe80 aa49 	vminnm.f32	s20, s0, s18
    {
        float temp = atodb(x);
        temp = LEAF_clip(lowerThreshold, temp, 0.0f);
        buffer[i] = (temp-lowerThreshold) * scalar;
 8023e78:	ee7a ba40 	vsub.f32	s23, s20, s0
 8023e7c:	eef0 8a40 	vmov.f32	s17, s0
}


float atodb(float a)
{
    return 20.0f*log10f(a);
 8023e80:	eeb3 ba04 	vmov.f32	s22, #52	; 0x41a00000  20.0
        buffer[i] = (temp-lowerThreshold) * scalar;
 8023e84:	ee6b baa9 	vmul.f32	s23, s23, s19
    float x = 0.0f;
 8023e88:	eeb0 8a49 	vmov.f32	s16, s18
 8023e8c:	fe80 9a09 	vmaxnm.f32	s18, s0, s18
    return 20.0f*log10f(a);
 8023e90:	eeb0 0a48 	vmov.f32	s0, s16
 8023e94:	f003 fe94 	bl	8027bc0 <log10f>
 8023e98:	ee20 0a0b 	vmul.f32	s0, s0, s22
    if (val < tempmin)
 8023e9c:	eeb4 aac0 	vcmpe.f32	s20, s0
        buffer[i] = (temp-lowerThreshold) * scalar;
 8023ea0:	fec9 7a40 	vminnm.f32	s15, s18, s0
 8023ea4:	ee77 7ae8 	vsub.f32	s15, s15, s17
    if (val < tempmin)
 8023ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        buffer[i] = (temp-lowerThreshold) * scalar;
 8023eac:	ee67 7aa9 	vmul.f32	s15, s15, s19
    if (val < tempmin)
 8023eb0:	dc08      	bgt.n	8023ec4 <LEAF_generate_atodbPositiveClipped+0x84>
        buffer[i] = (temp-lowerThreshold) * scalar;
 8023eb2:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8023eb6:	42ac      	cmp	r4, r5
        x += increment;
 8023eb8:	ee38 8a2a 	vadd.f32	s16, s16, s21
    for (int i = 0; i < size; i++)
 8023ebc:	d1e8      	bne.n	8023e90 <LEAF_generate_atodbPositiveClipped+0x50>
}
 8023ebe:	ecbd 8b08 	vpop	{d8-d11}
 8023ec2:	bd38      	pop	{r3, r4, r5, pc}
        buffer[i] = (temp-lowerThreshold) * scalar;
 8023ec4:	ece4 ba01 	vstmia	r4!, {s23}
    for (int i = 0; i < size; i++)
 8023ec8:	42a5      	cmp	r5, r4
        x += increment;
 8023eca:	ee38 8a2a 	vadd.f32	s16, s16, s21
    for (int i = 0; i < size; i++)
 8023ece:	d1df      	bne.n	8023e90 <LEAF_generate_atodbPositiveClipped+0x50>
}
 8023ed0:	ecbd 8b08 	vpop	{d8-d11}
 8023ed4:	bd38      	pop	{r3, r4, r5, pc}
 8023ed6:	bf00      	nop
 8023ed8:	00000000 	.word	0x00000000

08023edc <LEAF_midiToFrequency>:
    if( f <= -1500.0f ) return (0);
 8023edc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8023f20 <LEAF_midiToFrequency+0x44>
 8023ee0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ee8:	d917      	bls.n	8023f1a <LEAF_midiToFrequency+0x3e>
 8023eea:	eef0 7a40 	vmov.f32	s15, s0
    else return ( powf(2.0f, (f - 69.0f) * 0.083333333333333f) * 440.0f );
 8023eee:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8023f24 <LEAF_midiToFrequency+0x48>
 8023ef2:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8023f28 <LEAF_midiToFrequency+0x4c>
 8023ef6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8023efa:	fec7 7ae0 	vminnm.f32	s15, s15, s1
 8023efe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023f02:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8023f2c <LEAF_midiToFrequency+0x50>
{
 8023f06:	b508      	push	{r3, lr}
    else return ( powf(2.0f, (f - 69.0f) * 0.083333333333333f) * 440.0f );
 8023f08:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8023f0c:	f003 faa4 	bl	8027458 <powf>
 8023f10:	eddf 7a07 	vldr	s15, [pc, #28]	; 8023f30 <LEAF_midiToFrequency+0x54>
 8023f14:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8023f18:	bd08      	pop	{r3, pc}
    if( f <= -1500.0f ) return (0);
 8023f1a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8023f34 <LEAF_midiToFrequency+0x58>
}
 8023f1e:	4770      	bx	lr
 8023f20:	c4bb8000 	.word	0xc4bb8000
 8023f24:	428a0000 	.word	0x428a0000
 8023f28:	44bb6000 	.word	0x44bb6000
 8023f2c:	3daaaaab 	.word	0x3daaaaab
 8023f30:	43dc0000 	.word	0x43dc0000
 8023f34:	00000000 	.word	0x00000000

08023f38 <LEAF_interpolate_hermite_x>:
    float y0my1 = yy0 - yy1;
 8023f38:	ee70 7a60 	vsub.f32	s15, s0, s1
    float c1 = 0.5f * (yy2 - yy0);
 8023f3c:	ee31 7a40 	vsub.f32	s14, s2, s0
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8023f40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8023f44:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8023f48:	ee70 6ac1 	vsub.f32	s13, s1, s2
    float c2 = y0my1 + c1 - c3;
 8023f4c:	eee7 7a06 	vfma.f32	s15, s14, s12
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8023f50:	ee31 1ac1 	vsub.f32	s2, s3, s2
 8023f54:	eee1 6a06 	vfma.f32	s13, s2, s12
    float c2 = y0my1 + c1 - c3;
 8023f58:	ee77 7ae6 	vsub.f32	s15, s15, s13
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 8023f5c:	eee6 7a82 	vfma.f32	s15, s13, s4
 8023f60:	ee67 7a82 	vmul.f32	s15, s15, s4
 8023f64:	eee7 7a06 	vfma.f32	s15, s14, s12
}
 8023f68:	eee7 0a82 	vfma.f32	s1, s15, s4
 8023f6c:	eeb0 0a60 	vmov.f32	s0, s1
 8023f70:	4770      	bx	lr
 8023f72:	bf00      	nop

08023f74 <LEAF_interpolation_linear>:
{
 8023f74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023f78:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8023f98 <LEAF_interpolation_linear+0x24>
 8023f7c:	fe81 1a67 	vminnm.f32	s2, s2, s15
 8023f80:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    float omAlpha = 1.0f - alpha;
 8023f84:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
 8023f88:	ee20 1a81 	vmul.f32	s2, s1, s2
}
 8023f8c:	eea7 1a80 	vfma.f32	s2, s15, s0
 8023f90:	eeb0 0a41 	vmov.f32	s0, s2
 8023f94:	4770      	bx	lr
 8023f96:	bf00      	nop
 8023f98:	00000000 	.word	0x00000000

08023f9c <mtof>:
    if (f <= -1500.0f) return(0);
 8023f9c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8023fd0 <mtof+0x34>
 8023fa0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023fa8:	d90f      	bls.n	8023fca <mtof+0x2e>
    else return (8.17579891564f * expf(0.0577622650f * f));
 8023faa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8023fd4 <mtof+0x38>
 8023fae:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8023fd8 <mtof+0x3c>
 8023fb2:	fe80 0a47 	vminnm.f32	s0, s0, s14
{
 8023fb6:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8023fb8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023fbc:	f003 f8de 	bl	802717c <expf>
 8023fc0:	eddf 7a06 	vldr	s15, [pc, #24]	; 8023fdc <mtof+0x40>
 8023fc4:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8023fc8:	bd08      	pop	{r3, pc}
    if (f <= -1500.0f) return(0);
 8023fca:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8023fe0 <mtof+0x44>
}
 8023fce:	4770      	bx	lr
 8023fd0:	c4bb8000 	.word	0xc4bb8000
 8023fd4:	44bb6000 	.word	0x44bb6000
 8023fd8:	3d6c9820 	.word	0x3d6c9820
 8023fdc:	4102d013 	.word	0x4102d013
 8023fe0:	00000000 	.word	0x00000000

08023fe4 <faster_mtof>:
 8023fe4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023fe8:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8024024 <faster_mtof+0x40>
 8023fec:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8024028 <faster_mtof+0x44>
 8023ff0:	eee0 7a26 	vfma.f32	s15, s0, s13
 8023ff4:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8023ff8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8023ffc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024000:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024004:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024008:	ee20 0a00 	vmul.f32	s0, s0, s0
 802400c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024010:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024014:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024018:	ee20 0a00 	vmul.f32	s0, s0, s0
 802401c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8024020:	4770      	bx	lr
 8024022:	bf00      	nop
 8024024:	386c9820 	.word	0x386c9820
 8024028:	4102d013 	.word	0x4102d013
 802402c:	00000000 	.word	0x00000000

08024030 <powtodb>:
{
 8024030:	b508      	push	{r3, lr}
 8024032:	ed2d 8b02 	vpush	{d8}
    if (f <= 0) return (0);
 8024036:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8024080 <powtodb+0x50>
 802403a:	eeb4 0ac8 	vcmpe.f32	s0, s16
 802403e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024042:	d910      	bls.n	8024066 <powtodb+0x36>
        float val = 100.0f + 10.0f/LOGTEN * logf(f);
 8024044:	f003 f920 	bl	8027288 <logf>
 8024048:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802404c:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8024070 <powtodb+0x40>
 8024050:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8024078 <powtodb+0x48>
 8024054:	eea6 0b07 	vfma.f64	d0, d6, d7
 8024058:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
        return (val < 0.0f ? 0.0f : val);
 802405c:	fe80 0a08 	vmaxnm.f32	s0, s0, s16
}
 8024060:	ecbd 8b02 	vpop	{d8}
 8024064:	bd08      	pop	{r3, pc}
    if (f <= 0) return (0);
 8024066:	eeb0 0a48 	vmov.f32	s0, s16
}
 802406a:	ecbd 8b02 	vpop	{d8}
 802406e:	bd08      	pop	{r3, pc}
 8024070:	ed384f8a 	.word	0xed384f8a
 8024074:	40115f2c 	.word	0x40115f2c
 8024078:	00000000 	.word	0x00000000
 802407c:	40590000 	.word	0x40590000
 8024080:	00000000 	.word	0x00000000

08024084 <fastdbtoa>:


float fastdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 8024084:	eddf 7a02 	vldr	s15, [pc, #8]	; 8024090 <fastdbtoa+0xc>
 8024088:	ee20 0a27 	vmul.f32	s0, s0, s15
 802408c:	f003 b876 	b.w	802717c <expf>
 8024090:	3debc8e3 	.word	0x3debc8e3

08024094 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
 8024094:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024098:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80240c4 <fasterdbtoa+0x30>
 802409c:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 80240a0:	ee27 0aa7 	vmul.f32	s0, s15, s15
 80240a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80240a8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80240ac:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 80240b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80240b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80240b8:	ee20 0a00 	vmul.f32	s0, s0, s0

float fasterdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
 80240bc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80240c0:	4770      	bx	lr
 80240c2:	bf00      	nop
 80240c4:	39ebc8e3 	.word	0x39ebc8e3

080240c8 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 80240c8:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 80240cc:	4770      	bx	lr
 80240ce:	bf00      	nop

080240d0 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 80240d0:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 80240d4:	4770      	bx	lr
 80240d6:	bf00      	nop

080240d8 <leaf_pool_init>:
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(char* memory, size_t size)
{
 80240d8:	b470      	push	{r4, r5, r6}
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 80240da:	4b0a      	ldr	r3, [pc, #40]	; (8024104 <leaf_pool_init+0x2c>)
 80240dc:	2610      	movs	r6, #16
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 80240de:	f1a1 0410 	sub.w	r4, r1, #16
    pool->usize  = 0;
 80240e2:	2200      	movs	r2, #0
    pool->msize  = size;
 80240e4:	6259      	str	r1, [r3, #36]	; 0x24
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + leaf.header_size;
 80240e6:	1985      	adds	r5, r0, r6
    leaf.mempool = &leaf._mempool;
 80240e8:	f103 011c 	add.w	r1, r3, #28
    pool->mpool = (char*)memory;
 80240ec:	61d8      	str	r0, [r3, #28]
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 80240ee:	62de      	str	r6, [r3, #44]	; 0x2c
    pool->usize  = 0;
 80240f0:	621a      	str	r2, [r3, #32]
    node->pool = block_location + leaf.header_size;
 80240f2:	6005      	str	r5, [r0, #0]
    node->next = next;
    node->prev = prev;
    node->size = size;
 80240f4:	60c4      	str	r4, [r0, #12]
    node->prev = prev;
 80240f6:	e9c0 2201 	strd	r2, r2, [r0, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 80240fa:	6298      	str	r0, [r3, #40]	; 0x28
    leaf.mempool = &leaf._mempool;
 80240fc:	6199      	str	r1, [r3, #24]
}
 80240fe:	bc70      	pop	{r4, r5, r6}
 8024100:	4770      	bx	lr
 8024102:	bf00      	nop
 8024104:	200194e0 	.word	0x200194e0

08024108 <mpool_alloc>:
{
 8024108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pool->head == NULL)
 802410a:	68cb      	ldr	r3, [r1, #12]
 802410c:	2b00      	cmp	r3, #0
 802410e:	d049      	beq.n	80241a4 <mpool_alloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8024110:	3007      	adds	r0, #7
 8024112:	f020 0007 	bic.w	r0, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 8024116:	e002      	b.n	802411e <mpool_alloc+0x16>
        if (node_to_alloc == NULL)
 8024118:	4623      	mov	r3, r4
 802411a:	2c00      	cmp	r4, #0
 802411c:	d042      	beq.n	80241a4 <mpool_alloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 802411e:	68da      	ldr	r2, [r3, #12]
 8024120:	685c      	ldr	r4, [r3, #4]
 8024122:	4282      	cmp	r2, r0
 8024124:	d3f8      	bcc.n	8024118 <mpool_alloc+0x10>
    if (leftover > leaf.header_size)
 8024126:	4e22      	ldr	r6, [pc, #136]	; (80241b0 <mpool_alloc+0xa8>)
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8024128:	1a17      	subs	r7, r2, r0
    node_to_alloc->size = size_to_alloc;
 802412a:	60d8      	str	r0, [r3, #12]
    if (leftover > leaf.header_size)
 802412c:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 802412e:	42bd      	cmp	r5, r7
 8024130:	d327      	bcc.n	8024182 <mpool_alloc+0x7a>
        node_to_alloc->size += leftover;
 8024132:	46a4      	mov	ip, r4
 8024134:	60da      	str	r2, [r3, #12]
    if (pool->head == node_to_alloc)
 8024136:	68ca      	ldr	r2, [r1, #12]
 8024138:	429a      	cmp	r2, r3
        pool->head = new_node;
 802413a:	bf08      	it	eq
 802413c:	f8c1 c00c 	streq.w	ip, [r1, #12]
 8024140:	e9d3 0201 	ldrd	r0, r2, [r3, #4]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8024144:	b108      	cbz	r0, 802414a <mpool_alloc+0x42>
    {
        // Close the link
        node->next->prev = node->prev;
 8024146:	6082      	str	r2, [r0, #8]
 8024148:	689a      	ldr	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 802414a:	b10a      	cbz	r2, 8024150 <mpool_alloc+0x48>
    {
        // Close the link
        node->prev->next = node->next;
 802414c:	6858      	ldr	r0, [r3, #4]
 802414e:	6050      	str	r0, [r2, #4]
    }
    
    node->next = NULL;
 8024150:	2200      	movs	r2, #0
    pool->usize += leaf.header_size + node_to_alloc->size;
 8024152:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 8024154:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 8024158:	6848      	ldr	r0, [r1, #4]
 802415a:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 802415c:	4428      	add	r0, r5
 802415e:	4420      	add	r0, r4
 8024160:	6048      	str	r0, [r1, #4]
    if (leaf.clearOnAllocation > 0)
 8024162:	6971      	ldr	r1, [r6, #20]
 8024164:	4291      	cmp	r1, r2
 8024166:	dd0a      	ble.n	802417e <mpool_alloc+0x76>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8024168:	68d9      	ldr	r1, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 802416a:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 802416c:	b141      	cbz	r1, 8024180 <mpool_alloc+0x78>
 802416e:	3801      	subs	r0, #1
 8024170:	4614      	mov	r4, r2
 8024172:	f800 4f01 	strb.w	r4, [r0, #1]!
 8024176:	3201      	adds	r2, #1
 8024178:	68d9      	ldr	r1, [r3, #12]
 802417a:	4291      	cmp	r1, r2
 802417c:	d8f9      	bhi.n	8024172 <mpool_alloc+0x6a>
 802417e:	6818      	ldr	r0, [r3, #0]
}
 8024180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8024182:	680a      	ldr	r2, [r1, #0]
        offset += leaf.header_size + node_to_alloc->size;
 8024184:	4428      	add	r0, r5
                               node_to_alloc->prev,
 8024186:	f8d3 e008 	ldr.w	lr, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 802418a:	1b7f      	subs	r7, r7, r5
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 802418c:	eba3 0c02 	sub.w	ip, r3, r2
        offset += leaf.header_size + node_to_alloc->size;
 8024190:	4460      	add	r0, ip
        new_node = create_node(&pool->mpool[offset],
 8024192:	eb02 0c00 	add.w	ip, r2, r0
    node->pool = block_location + leaf.header_size;
 8024196:	4465      	add	r5, ip
 8024198:	5015      	str	r5, [r2, r0]
    node->size = size;
 802419a:	f8cc 700c 	str.w	r7, [ip, #12]
    node->prev = prev;
 802419e:	e9cc 4e01 	strd	r4, lr, [ip, #4]
 80241a2:	e7c8      	b.n	8024136 <mpool_alloc+0x2e>
}

void leaf_mempool_overrun(void)
{
    LEAF_error(1);
 80241a4:	2001      	movs	r0, #1
 80241a6:	f002 fe37 	bl	8026e18 <LEAF_error>
        return NULL;
 80241aa:	2000      	movs	r0, #0
}
 80241ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80241ae:	bf00      	nop
 80241b0:	200194e0 	.word	0x200194e0

080241b4 <mpool_calloc>:
{
 80241b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pool->head == NULL)
 80241b6:	68cb      	ldr	r3, [r1, #12]
 80241b8:	2b00      	cmp	r3, #0
 80241ba:	d046      	beq.n	802424a <mpool_calloc+0x96>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80241bc:	3007      	adds	r0, #7
 80241be:	f020 0007 	bic.w	r0, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 80241c2:	e002      	b.n	80241ca <mpool_calloc+0x16>
        if (node_to_alloc == NULL)
 80241c4:	4623      	mov	r3, r4
 80241c6:	2c00      	cmp	r4, #0
 80241c8:	d03f      	beq.n	802424a <mpool_calloc+0x96>
    while (node_to_alloc->size < size_to_alloc)
 80241ca:	68da      	ldr	r2, [r3, #12]
 80241cc:	685c      	ldr	r4, [r3, #4]
 80241ce:	4282      	cmp	r2, r0
 80241d0:	d3f8      	bcc.n	80241c4 <mpool_calloc+0x10>
    if (leftover > leaf.header_size)
 80241d2:	4f20      	ldr	r7, [pc, #128]	; (8024254 <mpool_calloc+0xa0>)
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80241d4:	1a16      	subs	r6, r2, r0
    node_to_alloc->size = size_to_alloc;
 80241d6:	60d8      	str	r0, [r3, #12]
    if (leftover > leaf.header_size)
 80241d8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80241da:	42b5      	cmp	r5, r6
 80241dc:	d324      	bcc.n	8024228 <mpool_calloc+0x74>
        node_to_alloc->size += leftover;
 80241de:	46a4      	mov	ip, r4
 80241e0:	60da      	str	r2, [r3, #12]
    if (pool->head == node_to_alloc)
 80241e2:	68ca      	ldr	r2, [r1, #12]
 80241e4:	429a      	cmp	r2, r3
        pool->head = new_node;
 80241e6:	bf08      	it	eq
 80241e8:	f8c1 c00c 	streq.w	ip, [r1, #12]
 80241ec:	e9d3 0201 	ldrd	r0, r2, [r3, #4]
    if (node->next != NULL)
 80241f0:	b108      	cbz	r0, 80241f6 <mpool_calloc+0x42>
        node->next->prev = node->prev;
 80241f2:	6082      	str	r2, [r0, #8]
 80241f4:	689a      	ldr	r2, [r3, #8]
    if (node->prev != NULL)
 80241f6:	b10a      	cbz	r2, 80241fc <mpool_calloc+0x48>
        node->prev->next = node->next;
 80241f8:	6858      	ldr	r0, [r3, #4]
 80241fa:	6050      	str	r0, [r2, #4]
    node->next = NULL;
 80241fc:	2200      	movs	r2, #0
    pool->usize += leaf.header_size + node_to_alloc->size;
 80241fe:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 8024200:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 8024204:	6848      	ldr	r0, [r1, #4]
 8024206:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8024208:	4428      	add	r0, r5
 802420a:	4420      	add	r0, r4
 802420c:	6048      	str	r0, [r1, #4]
    for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 802420e:	68d9      	ldr	r1, [r3, #12]
    char* new_pool = (char*)node_to_alloc->pool;
 8024210:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8024212:	b141      	cbz	r1, 8024226 <mpool_calloc+0x72>
 8024214:	3801      	subs	r0, #1
 8024216:	4614      	mov	r4, r2
 8024218:	f800 4f01 	strb.w	r4, [r0, #1]!
 802421c:	3201      	adds	r2, #1
 802421e:	68d9      	ldr	r1, [r3, #12]
 8024220:	4291      	cmp	r1, r2
 8024222:	d8f9      	bhi.n	8024218 <mpool_calloc+0x64>
 8024224:	6818      	ldr	r0, [r3, #0]
}
 8024226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8024228:	680a      	ldr	r2, [r1, #0]
        offset += leaf.header_size + node_to_alloc->size;
 802422a:	4428      	add	r0, r5
                               node_to_alloc->prev,
 802422c:	f8d3 e008 	ldr.w	lr, [r3, #8]
        new_node = create_node(&pool->mpool[offset],
 8024230:	1b76      	subs	r6, r6, r5
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8024232:	eba3 0c02 	sub.w	ip, r3, r2
        offset += leaf.header_size + node_to_alloc->size;
 8024236:	4460      	add	r0, ip
        new_node = create_node(&pool->mpool[offset],
 8024238:	eb02 0c00 	add.w	ip, r2, r0
    node->pool = block_location + leaf.header_size;
 802423c:	4465      	add	r5, ip
 802423e:	5015      	str	r5, [r2, r0]
    node->size = size;
 8024240:	f8cc 600c 	str.w	r6, [ip, #12]
    node->prev = prev;
 8024244:	e9cc 4e01 	strd	r4, lr, [ip, #4]
 8024248:	e7cb      	b.n	80241e2 <mpool_calloc+0x2e>
    LEAF_error(1);
 802424a:	2001      	movs	r0, #1
 802424c:	f002 fde4 	bl	8026e18 <LEAF_error>
        return NULL;
 8024250:	2000      	movs	r0, #0
}
 8024252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024254:	200194e0 	.word	0x200194e0

08024258 <mpool_free>:
{
 8024258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - leaf.header_size);
 802425c:	4f33      	ldr	r7, [pc, #204]	; (802432c <mpool_free+0xd4>)
    pool->usize -= leaf.header_size + freed_node->size;
 802425e:	684a      	ldr	r2, [r1, #4]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - leaf.header_size);
 8024260:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    mpool_node_t* other_node = pool->head;
 8024262:	68cb      	ldr	r3, [r1, #12]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - leaf.header_size);
 8024264:	1b00      	subs	r0, r0, r4
    pool->usize -= leaf.header_size + freed_node->size;
 8024266:	1b12      	subs	r2, r2, r4
 8024268:	68c4      	ldr	r4, [r0, #12]
 802426a:	1b12      	subs	r2, r2, r4
 802426c:	604a      	str	r2, [r1, #4]
    while (other_node != NULL)
 802426e:	2b00      	cmp	r3, #0
 8024270:	d03e      	beq.n	80242f0 <mpool_free+0x98>
        if ((long) other_node < (long) pool->mpool ||
 8024272:	680a      	ldr	r2, [r1, #0]
 8024274:	4293      	cmp	r3, r2
 8024276:	db1f      	blt.n	80242b8 <mpool_free+0x60>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
 8024278:	688c      	ldr	r4, [r1, #8]
 802427a:	461d      	mov	r5, r3
 802427c:	4422      	add	r2, r4
        if ((long) other_node < (long) pool->mpool ||
 802427e:	429a      	cmp	r2, r3
 8024280:	d91a      	bls.n	80242b8 <mpool_free+0x60>
    node->next = NULL;
 8024282:	f04f 0c00 	mov.w	ip, #0
        if (((long) freed_node) + (leaf.header_size + freed_node->size) == (long) other_node)
 8024286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024288:	68c4      	ldr	r4, [r0, #12]
        next_node = other_node->next;
 802428a:	685e      	ldr	r6, [r3, #4]
        if (((long) freed_node) + (leaf.header_size + freed_node->size) == (long) other_node)
 802428c:	eb02 0e04 	add.w	lr, r2, r4
 8024290:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8024294:	eb0e 0900 	add.w	r9, lr, r0
 8024298:	45a9      	cmp	r9, r5
 802429a:	d030      	beq.n	80242fe <mpool_free+0xa6>
        else if (((long) other_node) + (leaf.header_size + other_node->size) == (long) freed_node)
 802429c:	442a      	add	r2, r5
 802429e:	4442      	add	r2, r8
 80242a0:	4290      	cmp	r0, r2
 80242a2:	d00e      	beq.n	80242c2 <mpool_free+0x6a>
    while (other_node != NULL)
 80242a4:	b31e      	cbz	r6, 80242ee <mpool_free+0x96>
        if ((long) other_node < (long) pool->mpool ||
 80242a6:	680b      	ldr	r3, [r1, #0]
 80242a8:	42b3      	cmp	r3, r6
 80242aa:	dc05      	bgt.n	80242b8 <mpool_free+0x60>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
 80242ac:	688c      	ldr	r4, [r1, #8]
 80242ae:	4635      	mov	r5, r6
 80242b0:	441c      	add	r4, r3
 80242b2:	4633      	mov	r3, r6
        if ((long) other_node < (long) pool->mpool ||
 80242b4:	42b4      	cmp	r4, r6
 80242b6:	d8e6      	bhi.n	8024286 <mpool_free+0x2e>
            LEAF_error(2);
 80242b8:	2002      	movs	r0, #2
}
 80242ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            LEAF_error(2);
 80242be:	f002 bdab 	b.w	8026e18 <LEAF_error>
            other_node->size += leaf.header_size + freed_node->size;
 80242c2:	eb0e 0408 	add.w	r4, lr, r8
 80242c6:	60dc      	str	r4, [r3, #12]
            if (other_node != pool->head)
 80242c8:	68ca      	ldr	r2, [r1, #12]
 80242ca:	429a      	cmp	r2, r3
 80242cc:	d02b      	beq.n	8024326 <mpool_free+0xce>
 80242ce:	689a      	ldr	r2, [r3, #8]
    if (node->next != NULL)
 80242d0:	b10e      	cbz	r6, 80242d6 <mpool_free+0x7e>
        node->next->prev = node->prev;
 80242d2:	60b2      	str	r2, [r6, #8]
 80242d4:	689a      	ldr	r2, [r3, #8]
    if (node->prev != NULL)
 80242d6:	b10a      	cbz	r2, 80242dc <mpool_free+0x84>
        node->prev->next = node->next;
 80242d8:	6858      	ldr	r0, [r3, #4]
 80242da:	6050      	str	r0, [r2, #4]
    node->next = NULL;
 80242dc:	f8c3 c004 	str.w	ip, [r3, #4]
 80242e0:	4618      	mov	r0, r3
    node->prev = NULL;
 80242e2:	f8c3 c008 	str.w	ip, [r3, #8]
                other_node->next = pool->head;
 80242e6:	68ca      	ldr	r2, [r1, #12]
 80242e8:	605a      	str	r2, [r3, #4]
    while (other_node != NULL)
 80242ea:	2e00      	cmp	r6, #0
 80242ec:	d1db      	bne.n	80242a6 <mpool_free+0x4e>
 80242ee:	68cb      	ldr	r3, [r1, #12]
    freed_node->next = pool->head;
 80242f0:	6043      	str	r3, [r0, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 80242f2:	68cb      	ldr	r3, [r1, #12]
 80242f4:	b103      	cbz	r3, 80242f8 <mpool_free+0xa0>
 80242f6:	6098      	str	r0, [r3, #8]
    pool->head = freed_node;
 80242f8:	60c8      	str	r0, [r1, #12]
}
 80242fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            freed_node->size += leaf.header_size + other_node->size;
 80242fe:	4444      	add	r4, r8
 8024300:	4422      	add	r2, r4
 8024302:	60c2      	str	r2, [r0, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
 8024304:	68ca      	ldr	r2, [r1, #12]
 8024306:	429a      	cmp	r2, r3
 8024308:	d00a      	beq.n	8024320 <mpool_free+0xc8>
 802430a:	e9d3 4201 	ldrd	r4, r2, [r3, #4]
    if (node->next != NULL)
 802430e:	b10c      	cbz	r4, 8024314 <mpool_free+0xbc>
        node->next->prev = node->prev;
 8024310:	60a2      	str	r2, [r4, #8]
 8024312:	689a      	ldr	r2, [r3, #8]
    if (node->prev != NULL)
 8024314:	b10a      	cbz	r2, 802431a <mpool_free+0xc2>
        node->prev->next = node->next;
 8024316:	685c      	ldr	r4, [r3, #4]
 8024318:	6054      	str	r4, [r2, #4]
    node->prev = NULL;
 802431a:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 802431e:	e7c1      	b.n	80242a4 <mpool_free+0x4c>
            if (other_node == pool->head) pool->head = pool->head->next;
 8024320:	685a      	ldr	r2, [r3, #4]
 8024322:	60ca      	str	r2, [r1, #12]
 8024324:	e7f1      	b.n	802430a <mpool_free+0xb2>
                pool->head = pool->head->next;
 8024326:	4618      	mov	r0, r3
 8024328:	60ce      	str	r6, [r1, #12]
 802432a:	e7bb      	b.n	80242a4 <mpool_free+0x4c>
 802432c:	200194e0 	.word	0x200194e0

08024330 <tMempool_init>:
    //TODO: we should make a set of real error codes that are in an enum type
}

void tMempool_init(tMempool* const mp, char* memory, size_t size)
{
 8024330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tMempool_freeFromPool(mp, &leaf.mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 8024334:	4e3a      	ldr	r6, [pc, #232]	; (8024420 <tMempool_init+0xf0>)
{
 8024336:	b082      	sub	sp, #8
    _tMempool* mm = *mem;
 8024338:	f8d6 c018 	ldr.w	ip, [r6, #24]
    if (pool->head == NULL)
 802433c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8024340:	b91b      	cbnz	r3, 802434a <tMempool_init+0x1a>
 8024342:	e04c      	b.n	80243de <tMempool_init+0xae>
        if (node_to_alloc == NULL)
 8024344:	462b      	mov	r3, r5
 8024346:	2d00      	cmp	r5, #0
 8024348:	d049      	beq.n	80243de <tMempool_init+0xae>
    while (node_to_alloc->size < size_to_alloc)
 802434a:	68dc      	ldr	r4, [r3, #12]
 802434c:	685d      	ldr	r5, [r3, #4]
 802434e:	2c0f      	cmp	r4, #15
 8024350:	d9f8      	bls.n	8024344 <tMempool_init+0x14>
    node_to_alloc->size = size_to_alloc;
 8024352:	2710      	movs	r7, #16
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8024354:	f1a4 0e10 	sub.w	lr, r4, #16
    node_to_alloc->size = size_to_alloc;
 8024358:	60df      	str	r7, [r3, #12]
    if (leftover > leaf.header_size)
 802435a:	6af7      	ldr	r7, [r6, #44]	; 0x2c
 802435c:	45be      	cmp	lr, r7
 802435e:	d849      	bhi.n	80243f4 <tMempool_init+0xc4>
        node_to_alloc->size += leftover;
 8024360:	46ae      	mov	lr, r5
 8024362:	60dc      	str	r4, [r3, #12]
    if (pool->head == node_to_alloc)
 8024364:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8024368:	42a3      	cmp	r3, r4
        pool->head = new_node;
 802436a:	bf08      	it	eq
 802436c:	f8cc e00c 	streq.w	lr, [ip, #12]
 8024370:	e9d3 5401 	ldrd	r5, r4, [r3, #4]
    if (node->next != NULL)
 8024374:	b10d      	cbz	r5, 802437a <tMempool_init+0x4a>
        node->next->prev = node->prev;
 8024376:	60ac      	str	r4, [r5, #8]
 8024378:	689c      	ldr	r4, [r3, #8]
    if (node->prev != NULL)
 802437a:	b10c      	cbz	r4, 8024380 <tMempool_init+0x50>
        node->prev->next = node->next;
 802437c:	685d      	ldr	r5, [r3, #4]
 802437e:	6065      	str	r5, [r4, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 8024380:	68dc      	ldr	r4, [r3, #12]
    node->next = NULL;
 8024382:	2500      	movs	r5, #0
    pool->usize += leaf.header_size + node_to_alloc->size;
 8024384:	9401      	str	r4, [sp, #4]
    node->prev = NULL;
 8024386:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += leaf.header_size + node_to_alloc->size;
 802438a:	6af4      	ldr	r4, [r6, #44]	; 0x2c
 802438c:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8024390:	4427      	add	r7, r4
 8024392:	463c      	mov	r4, r7
 8024394:	9f01      	ldr	r7, [sp, #4]
 8024396:	4427      	add	r7, r4
 8024398:	f8cc 7004 	str.w	r7, [ip, #4]
    if (leaf.clearOnAllocation > 0)
 802439c:	6974      	ldr	r4, [r6, #20]
 802439e:	42ac      	cmp	r4, r5
 80243a0:	dd0a      	ble.n	80243b8 <tMempool_init+0x88>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80243a2:	68df      	ldr	r7, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 80243a4:	681c      	ldr	r4, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80243a6:	b147      	cbz	r7, 80243ba <tMempool_init+0x8a>
 80243a8:	3c01      	subs	r4, #1
 80243aa:	46ac      	mov	ip, r5
 80243ac:	f804 cf01 	strb.w	ip, [r4, #1]!
 80243b0:	3501      	adds	r5, #1
 80243b2:	68df      	ldr	r7, [r3, #12]
 80243b4:	42bd      	cmp	r5, r7
 80243b6:	d3f9      	bcc.n	80243ac <tMempool_init+0x7c>
 80243b8:	681c      	ldr	r4, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80243ba:	6004      	str	r4, [r0, #0]
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 80243bc:	2310      	movs	r3, #16
    pool->usize  = 0;
 80243be:	2000      	movs	r0, #0
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 80243c0:	62f3      	str	r3, [r6, #44]	; 0x2c
    pool->mpool = (char*)memory;
 80243c2:	6021      	str	r1, [r4, #0]
    pool->usize  = 0;
 80243c4:	e9c4 0201 	strd	r0, r2, [r4, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 80243c8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    node->next = next;
 80243ca:	6048      	str	r0, [r1, #4]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 80243cc:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + leaf.header_size;
 80243ce:	440b      	add	r3, r1
    node->size = size;
 80243d0:	e9c1 0202 	strd	r0, r2, [r1, #8]
    node->pool = block_location + leaf.header_size;
 80243d4:	600b      	str	r3, [r1, #0]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize-leaf.header_size);
 80243d6:	60e1      	str	r1, [r4, #12]
}
 80243d8:	b002      	add	sp, #8
 80243da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80243de:	4605      	mov	r5, r0
    LEAF_error(1);
 80243e0:	2001      	movs	r0, #1
 80243e2:	460c      	mov	r4, r1
 80243e4:	f002 fd18 	bl	8026e18 <LEAF_error>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80243e8:	2300      	movs	r3, #0
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 80243ea:	2210      	movs	r2, #16
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80243ec:	602b      	str	r3, [r5, #0]
    pool->mpool = (char*)memory;
 80243ee:	601c      	str	r4, [r3, #0]
    leaf.header_size = mpool_align(sizeof(mpool_node_t));
 80243f0:	62f2      	str	r2, [r6, #44]	; 0x2c
 80243f2:	deff      	udf	#255	; 0xff
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80243f4:	f8dc 9000 	ldr.w	r9, [ip]
        new_node = create_node(&pool->mpool[offset],
 80243f8:	ebae 0407 	sub.w	r4, lr, r7
        offset += leaf.header_size + node_to_alloc->size;
 80243fc:	f107 0810 	add.w	r8, r7, #16
                               node_to_alloc->prev,
 8024400:	f8d3 a008 	ldr.w	sl, [r3, #8]
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8024404:	eba3 0e09 	sub.w	lr, r3, r9
        offset += leaf.header_size + node_to_alloc->size;
 8024408:	44f0      	add	r8, lr
        new_node = create_node(&pool->mpool[offset],
 802440a:	eb09 0e08 	add.w	lr, r9, r8
    node->pool = block_location + leaf.header_size;
 802440e:	4477      	add	r7, lr
 8024410:	f849 7008 	str.w	r7, [r9, r8]
    node->size = size;
 8024414:	f8ce 400c 	str.w	r4, [lr, #12]
    node->prev = prev;
 8024418:	e9ce 5a01 	strd	r5, sl, [lr, #4]
 802441c:	e7a2      	b.n	8024364 <tMempool_init+0x34>
 802441e:	bf00      	nop
 8024420:	200194e0 	.word	0x200194e0

08024424 <tSimplePoly_initToPool>:
{
    tSimplePoly_initToPool(polyh, maxNumVoices, &leaf.mempool);
}

void    tSimplePoly_initToPool            (tSimplePoly* const polyh, int maxNumVoices, tMempool* const mp)
{
 8024424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tMempool* m = *mp;
 8024428:	6816      	ldr	r6, [r2, #0]
{
 802442a:	4680      	mov	r8, r0
 802442c:	460c      	mov	r4, r1
    _tSimplePoly* poly = *polyh = (_tSimplePoly*) mpool_alloc(sizeof(_tSimplePoly), m);
 802442e:	f240 401c 	movw	r0, #1052	; 0x41c
 8024432:	4631      	mov	r1, r6
{
 8024434:	4617      	mov	r7, r2
    _tSimplePoly* poly = *polyh = (_tSimplePoly*) mpool_alloc(sizeof(_tSimplePoly), m);
 8024436:	f7ff fe67 	bl	8024108 <mpool_alloc>
 802443a:	4605      	mov	r5, r0
    poly->maxNumVoices = maxNumVoices;

    for (int i = 0; i < 128; i++)
    {
        poly->notes[i][0] = -1;
        poly->notes[i][1] = 0;
 802443c:	2100      	movs	r1, #0
        poly->notes[i][0] = -1;
 802443e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024442:	462b      	mov	r3, r5
 8024444:	f505 6280 	add.w	r2, r5, #1024	; 0x400
    _tSimplePoly* poly = *polyh = (_tSimplePoly*) mpool_alloc(sizeof(_tSimplePoly), m);
 8024448:	f8c8 5000 	str.w	r5, [r8]
    poly->mempool = m;
 802444c:	602e      	str	r6, [r5, #0]
    poly->maxNumVoices = maxNumVoices;
 802444e:	e9c5 4402 	strd	r4, r4, [r5, #8]
        poly->notes[i][1] = 0;
 8024452:	e9c3 0107 	strd	r0, r1, [r3, #28]
 8024456:	3308      	adds	r3, #8
    for (int i = 0; i < 128; i++)
 8024458:	4293      	cmp	r3, r2
 802445a:	d1fa      	bne.n	8024452 <tSimplePoly_initToPool+0x2e>
    }
    poly->stealing_on = 1;
 802445c:	2301      	movs	r3, #1
    poly->recover_stolen = 1;
    poly->voices = (int**) mpool_alloc(sizeof(int*) * poly->maxNumVoices, m);
 802445e:	00a0      	lsls	r0, r4, #2
 8024460:	4631      	mov	r1, r6
    poly->recover_stolen = 1;
 8024462:	e9c5 3305 	strd	r3, r3, [r5, #20]
    poly->voices = (int**) mpool_alloc(sizeof(int*) * poly->maxNumVoices, m);
 8024466:	f7ff fe4f 	bl	8024108 <mpool_alloc>

    for (int i = 0; i < poly->maxNumVoices; ++i)
 802446a:	68eb      	ldr	r3, [r5, #12]
    poly->voices = (int**) mpool_alloc(sizeof(int*) * poly->maxNumVoices, m);
 802446c:	4680      	mov	r8, r0
 802446e:	6128      	str	r0, [r5, #16]
    for (int i = 0; i < poly->maxNumVoices; ++i)
 8024470:	2b00      	cmp	r3, #0
 8024472:	dd14      	ble.n	802449e <tSimplePoly_initToPool+0x7a>
 8024474:	2400      	movs	r4, #0
    {
        poly->voices[i] = (int*) mpool_alloc(sizeof(int) * 3, m);
        poly->voices[i][0] = -1;
 8024476:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 802447a:	e001      	b.n	8024480 <tSimplePoly_initToPool+0x5c>
 802447c:	f8d5 8010 	ldr.w	r8, [r5, #16]
        poly->voices[i] = (int*) mpool_alloc(sizeof(int) * 3, m);
 8024480:	4631      	mov	r1, r6
 8024482:	200c      	movs	r0, #12
 8024484:	f7ff fe40 	bl	8024108 <mpool_alloc>
 8024488:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
        poly->voices[i][0] = -1;
 802448c:	692b      	ldr	r3, [r5, #16]
 802448e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    for (int i = 0; i < poly->maxNumVoices; ++i)
 8024492:	3401      	adds	r4, #1
        poly->voices[i][0] = -1;
 8024494:	f8c3 9000 	str.w	r9, [r3]
    for (int i = 0; i < poly->maxNumVoices; ++i)
 8024498:	68eb      	ldr	r3, [r5, #12]
 802449a:	42a3      	cmp	r3, r4
 802449c:	dcee      	bgt.n	802447c <tSimplePoly_initToPool+0x58>
    _tMempool* m = *mp;
 802449e:	683e      	ldr	r6, [r7, #0]
    _tStack* ns = *stack = (_tStack*) mpool_alloc(sizeof(_tStack), m);
 80244a0:	f44f 7004 	mov.w	r0, #528	; 0x210
    ns->ordered = 0;
 80244a4:	2400      	movs	r4, #0
    _tStack* ns = *stack = (_tStack*) mpool_alloc(sizeof(_tStack), m);
 80244a6:	4631      	mov	r1, r6
 80244a8:	f7ff fe2e 	bl	8024108 <mpool_alloc>
    ns->capacity = STACK_SIZE;
 80244ac:	2180      	movs	r1, #128	; 0x80
    _tStack* ns = *stack = (_tStack*) mpool_alloc(sizeof(_tStack), m);
 80244ae:	4603      	mov	r3, r0
 80244b0:	6068      	str	r0, [r5, #4]
 80244b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80244b6:	3004      	adds	r0, #4
    ns->capacity = STACK_SIZE;
 80244b8:	f8a3 1208 	strh.w	r1, [r3, #520]	; 0x208
 80244bc:	21ff      	movs	r1, #255	; 0xff
    ns->mempool = m;
 80244be:	601e      	str	r6, [r3, #0]
    ns->ordered = 0;
 80244c0:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
    ns->pos = 0;
 80244c4:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
    }
    tStack_initToPool(&poly->stack, mp);

}
 80244c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80244cc:	f002 bcf5 	b.w	8026eba <memset>

080244d0 <tSimplePoly_noteOn>:
    mpool_free((char*)poly->voices, poly->mempool);
    mpool_free((char*)poly, poly->mempool);
}

int tSimplePoly_noteOn(tSimplePoly* const polyh, int note, uint8_t vel)
{
 80244d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _tSimplePoly* poly = *polyh;
 80244d4:	6806      	ldr	r6, [r0, #0]
    _tStack* ns = *stack;
 80244d6:	f8d6 c004 	ldr.w	ip, [r6, #4]
    for (int i = 0; i < ns->size; i++)
 80244da:	f8bc 7206 	ldrh.w	r7, [ip, #518]	; 0x206
 80244de:	b18f      	cbz	r7, 8024504 <tSimplePoly_noteOn+0x34>
 80244e0:	b28d      	uxth	r5, r1
        if (ns->data[i] == noteVal)    return i;
 80244e2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80244e6:	429d      	cmp	r5, r3
 80244e8:	f000 809f 	beq.w	802462a <tSimplePoly_noteOn+0x15a>
 80244ec:	f10c 0004 	add.w	r0, ip, #4
    for (int i = 0; i < ns->size; i++)
 80244f0:	2300      	movs	r3, #0
 80244f2:	e004      	b.n	80244fe <tSimplePoly_noteOn+0x2e>
        if (ns->data[i] == noteVal)    return i;
 80244f4:	f850 4f04 	ldr.w	r4, [r0, #4]!
 80244f8:	42ac      	cmp	r4, r5
 80244fa:	f000 8096 	beq.w	802462a <tSimplePoly_noteOn+0x15a>
    for (int i = 0; i < ns->size; i++)
 80244fe:	3301      	adds	r3, #1
 8024500:	42bb      	cmp	r3, r7
 8024502:	d1f7      	bne.n	80244f4 <tSimplePoly_noteOn+0x24>
    if (tStack_contains(&poly->stack, note) >= 0) return -1;
    else
    {
        alteredVoice = -1;
        int found = 0;
        for (int i = 0; i < poly->numVoices; i++)
 8024504:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8024508:	f1b8 0f00 	cmp.w	r8, #0
 802450c:	dd29      	ble.n	8024562 <tSimplePoly_noteOn+0x92>
        {
            if (poly->voices[i][0] == -1)    // if inactive voice, give this note to voice
 802450e:	6933      	ldr	r3, [r6, #16]
 8024510:	f8d3 9000 	ldr.w	r9, [r3]
 8024514:	f8d9 b000 	ldr.w	fp, [r9]
 8024518:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 802451c:	f000 8089 	beq.w	8024632 <tSimplePoly_noteOn+0x162>
 8024520:	469e      	mov	lr, r3
        for (int i = 0; i < poly->numVoices; i++)
 8024522:	2000      	movs	r0, #0
            if (poly->voices[i][0] == -1)    // if inactive voice, give this note to voice
 8024524:	461c      	mov	r4, r3
 8024526:	e005      	b.n	8024534 <tSimplePoly_noteOn+0x64>
 8024528:	f854 3f04 	ldr.w	r3, [r4, #4]!
 802452c:	681d      	ldr	r5, [r3, #0]
 802452e:	3501      	adds	r5, #1
 8024530:	f000 8082 	beq.w	8024638 <tSimplePoly_noteOn+0x168>
        for (int i = 0; i < poly->numVoices; i++)
 8024534:	3001      	adds	r0, #1
 8024536:	4540      	cmp	r0, r8
 8024538:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 802453c:	d1f4      	bne.n	8024528 <tSimplePoly_noteOn+0x58>
        if (!found)
        {
            //second preference is grabbing one that is in release phase but not finished sounding yet
            for (int i = 0 ; i < poly->numVoices; i++)
            {
                if (poly->voices[i][0] == -2)    // if voice is released but still sounding, take over this voice
 802453e:	f11b 0f02 	cmn.w	fp, #2
            for (int i = 0 ; i < poly->numVoices; i++)
 8024542:	f04f 0300 	mov.w	r3, #0
                if (poly->voices[i][0] == -2)    // if voice is released but still sounding, take over this voice
 8024546:	d107      	bne.n	8024558 <tSimplePoly_noteOn+0x88>
 8024548:	e0b4      	b.n	80246b4 <tSimplePoly_noteOn+0x1e4>
 802454a:	f85e 9f04 	ldr.w	r9, [lr, #4]!
 802454e:	f8d9 4000 	ldr.w	r4, [r9]
 8024552:	3402      	adds	r4, #2
 8024554:	f000 80af 	beq.w	80246b6 <tSimplePoly_noteOn+0x1e6>
            for (int i = 0 ; i < poly->numVoices; i++)
 8024558:	3301      	adds	r3, #1
 802455a:	4298      	cmp	r0, r3
 802455c:	ea4f 0583 	mov.w	r5, r3, lsl #2
 8024560:	d1f3      	bne.n	802454a <tSimplePoly_noteOn+0x7a>
                    tStack_add(&poly->stack, note);
                    break;
                }
            }
        }
        if ((!found) && (poly->stealing_on)) //steal
 8024562:	6973      	ldr	r3, [r6, #20]
 8024564:	2b00      	cmp	r3, #0
 8024566:	d060      	beq.n	802462a <tSimplePoly_noteOn+0x15a>
        {
            for (int j = tStack_getSize(&poly->stack) - 1; j >= 0; j--)
 8024568:	1e78      	subs	r0, r7, #1
 802456a:	2f00      	cmp	r7, #0
 802456c:	d05f      	beq.n	802462e <tSimplePoly_noteOn+0x15e>
    return ns->data[which];
 802456e:	eb0c 0380 	add.w	r3, ip, r0, lsl #2
            {
                whichNote = tStack_get(&poly->stack, j);
                whichVoice = poly->notes[whichNote][0];
 8024572:	685b      	ldr	r3, [r3, #4]
 8024574:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8024578:	69db      	ldr	r3, [r3, #28]
                if (whichVoice >= 0)
 802457a:	2b00      	cmp	r3, #0
 802457c:	da0b      	bge.n	8024596 <tSimplePoly_noteOn+0xc6>
 802457e:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
            for (int j = tStack_getSize(&poly->stack) - 1; j >= 0; j--)
 8024582:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8024586:	d352      	bcc.n	802462e <tSimplePoly_noteOn+0x15e>
                whichVoice = poly->notes[whichNote][0];
 8024588:	f857 3d04 	ldr.w	r3, [r7, #-4]!
 802458c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8024590:	69db      	ldr	r3, [r3, #28]
                if (whichVoice >= 0)
 8024592:	2b00      	cmp	r3, #0
 8024594:	dbf5      	blt.n	8024582 <tSimplePoly_noteOn+0xb2>
                {
                    oldNote = poly->voices[whichVoice][0];
 8024596:	6930      	ldr	r0, [r6, #16]
                    poly->voices[whichVoice][0] = note;
                    poly->voices[whichVoice][1] = vel;
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
                    poly->notes[note][0] = whichVoice;
 8024598:	eb06 05c1 	add.w	r5, r6, r1, lsl #3
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
 802459c:	f06f 0702 	mvn.w	r7, #2
                    oldNote = poly->voices[whichVoice][0];
 80245a0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80245a4:	6820      	ldr	r0, [r4, #0]
                    poly->voices[whichVoice][0] = note;
 80245a6:	6021      	str	r1, [r4, #0]
                    poly->voices[whichVoice][1] = vel;
 80245a8:	6934      	ldr	r4, [r6, #16]
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
 80245aa:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
                    poly->voices[whichVoice][1] = vel;
 80245ae:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
 80245b2:	f8cc 2004 	str.w	r2, [ip, #4]
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
 80245b6:	61c7      	str	r7, [r0, #28]
 80245b8:	b28f      	uxth	r7, r1
                    poly->notes[note][0] = whichVoice;
 80245ba:	61eb      	str	r3, [r5, #28]
                    poly->notes[note][1] = vel;
 80245bc:	622a      	str	r2, [r5, #32]

                    poly->voices[whichVoice][2] = note;
 80245be:	6932      	ldr	r2, [r6, #16]
 80245c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80245c4:	6091      	str	r1, [r2, #8]
    _tStack* ns = *stack;
 80245c6:	6871      	ldr	r1, [r6, #4]
    if (ns->ordered)
 80245c8:	f8d1 420c 	ldr.w	r4, [r1, #524]	; 0x20c
        for (j = 0; j < ns->size; j++)
 80245cc:	f8b1 c206 	ldrh.w	ip, [r1, #518]	; 0x206
    if (ns->ordered)
 80245d0:	b1a4      	cbz	r4, 80245fc <tSimplePoly_noteOn+0x12c>
        for (j = 0; j < ns->size; j++)
 80245d2:	f1bc 0f00 	cmp.w	ip, #0
 80245d6:	f000 80a3 	beq.w	8024720 <tSimplePoly_noteOn+0x250>
 80245da:	2200      	movs	r2, #0
 80245dc:	eb01 0582 	add.w	r5, r1, r2, lsl #2
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 80245e0:	1c50      	adds	r0, r2, #1
            if (noteVal > ns->data[j])
 80245e2:	686e      	ldr	r6, [r5, #4]
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 80245e4:	4604      	mov	r4, r0
            if (noteVal > ns->data[j])
 80245e6:	42be      	cmp	r6, r7
 80245e8:	da04      	bge.n	80245f4 <tSimplePoly_noteOn+0x124>
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 80245ea:	68aa      	ldr	r2, [r5, #8]
 80245ec:	1c55      	adds	r5, r2, #1
 80245ee:	d005      	beq.n	80245fc <tSimplePoly_noteOn+0x12c>
 80245f0:	42ba      	cmp	r2, r7
 80245f2:	dc03      	bgt.n	80245fc <tSimplePoly_noteOn+0x12c>
        for (j = 0; j < ns->size; j++)
 80245f4:	b2c2      	uxtb	r2, r0
 80245f6:	4562      	cmp	r2, ip
 80245f8:	d3f0      	bcc.n	80245dc <tSimplePoly_noteOn+0x10c>
    int whereToInsert = 0;
 80245fa:	2400      	movs	r4, #0
    for (j = ns->size; j > whereToInsert; j--)
 80245fc:	fa5f f28c 	uxtb.w	r2, ip
 8024600:	4294      	cmp	r4, r2
 8024602:	da08      	bge.n	8024616 <tSimplePoly_noteOn+0x146>
 8024604:	1e56      	subs	r6, r2, #1
 8024606:	eb01 0082 	add.w	r0, r1, r2, lsl #2
        ns->data[j] = ns->data[(j - 1)];
 802460a:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
    for (j = ns->size; j > whereToInsert; j--)
 802460e:	b2f2      	uxtb	r2, r6
        ns->data[j] = ns->data[(j - 1)];
 8024610:	6045      	str	r5, [r0, #4]
    for (j = ns->size; j > whereToInsert; j--)
 8024612:	42a2      	cmp	r2, r4
 8024614:	dcf6      	bgt.n	8024604 <tSimplePoly_noteOn+0x134>
    ns->data[whereToInsert] = noteVal;
 8024616:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    ns->size++;
 802461a:	f10c 0c01 	add.w	ip, ip, #1
 802461e:	4618      	mov	r0, r3
    ns->data[whereToInsert] = noteVal;
 8024620:	6067      	str	r7, [r4, #4]
    ns->size++;
 8024622:	f8a1 c206 	strh.w	ip, [r1, #518]	; 0x206
                }
            }
        }
        return alteredVoice;
    }
}
 8024626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (tStack_contains(&poly->stack, note) >= 0) return -1;
 802462a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 802462e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i = 0; i < poly->numVoices; i++)
 8024632:	2000      	movs	r0, #0
            if (poly->voices[i][0] == -1)    // if inactive voice, give this note to voice
 8024634:	464b      	mov	r3, r9
 8024636:	4682      	mov	sl, r0
                poly->voices[i][0] = note;
 8024638:	6019      	str	r1, [r3, #0]
                poly->notes[note][0] = i;
 802463a:	eb06 04c1 	add.w	r4, r6, r1, lsl #3
                poly->voices[i][1] = vel;
 802463e:	6935      	ldr	r5, [r6, #16]
 8024640:	b28f      	uxth	r7, r1
 8024642:	f855 500a 	ldr.w	r5, [r5, sl]
 8024646:	606a      	str	r2, [r5, #4]
                poly->notes[note][0] = i;
 8024648:	61e0      	str	r0, [r4, #28]
                poly->notes[note][1] = vel;
 802464a:	6222      	str	r2, [r4, #32]
                poly->voices[i][2] = note; // voices[i][2] is the output midi note, (avoiding the -1 when a voice is inactive)
 802464c:	6933      	ldr	r3, [r6, #16]
 802464e:	f853 300a 	ldr.w	r3, [r3, sl]
 8024652:	6099      	str	r1, [r3, #8]
    _tStack* ns = *stack;
 8024654:	6872      	ldr	r2, [r6, #4]
    if (ns->ordered)
 8024656:	f8d2 420c 	ldr.w	r4, [r2, #524]	; 0x20c
        for (j = 0; j < ns->size; j++)
 802465a:	f8b2 c206 	ldrh.w	ip, [r2, #518]	; 0x206
    if (ns->ordered)
 802465e:	b19c      	cbz	r4, 8024688 <tSimplePoly_noteOn+0x1b8>
        for (j = 0; j < ns->size; j++)
 8024660:	f1bc 0f00 	cmp.w	ip, #0
 8024664:	d05e      	beq.n	8024724 <tSimplePoly_noteOn+0x254>
 8024666:	2300      	movs	r3, #0
 8024668:	eb02 0583 	add.w	r5, r2, r3, lsl #2
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 802466c:	1c59      	adds	r1, r3, #1
            if (noteVal > ns->data[j])
 802466e:	686e      	ldr	r6, [r5, #4]
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8024670:	460c      	mov	r4, r1
            if (noteVal > ns->data[j])
 8024672:	42be      	cmp	r6, r7
 8024674:	da04      	bge.n	8024680 <tSimplePoly_noteOn+0x1b0>
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8024676:	68ab      	ldr	r3, [r5, #8]
 8024678:	1c5d      	adds	r5, r3, #1
 802467a:	d005      	beq.n	8024688 <tSimplePoly_noteOn+0x1b8>
 802467c:	42bb      	cmp	r3, r7
 802467e:	dc03      	bgt.n	8024688 <tSimplePoly_noteOn+0x1b8>
        for (j = 0; j < ns->size; j++)
 8024680:	b2cb      	uxtb	r3, r1
 8024682:	459c      	cmp	ip, r3
 8024684:	d8f0      	bhi.n	8024668 <tSimplePoly_noteOn+0x198>
    int whereToInsert = 0;
 8024686:	2400      	movs	r4, #0
    for (j = ns->size; j > whereToInsert; j--)
 8024688:	fa5f f38c 	uxtb.w	r3, ip
 802468c:	42a3      	cmp	r3, r4
 802468e:	dd08      	ble.n	80246a2 <tSimplePoly_noteOn+0x1d2>
 8024690:	1e5e      	subs	r6, r3, #1
 8024692:	eb02 0183 	add.w	r1, r2, r3, lsl #2
        ns->data[j] = ns->data[(j - 1)];
 8024696:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    for (j = ns->size; j > whereToInsert; j--)
 802469a:	b2f3      	uxtb	r3, r6
        ns->data[j] = ns->data[(j - 1)];
 802469c:	604d      	str	r5, [r1, #4]
    for (j = ns->size; j > whereToInsert; j--)
 802469e:	42a3      	cmp	r3, r4
 80246a0:	dcf6      	bgt.n	8024690 <tSimplePoly_noteOn+0x1c0>
    ns->data[whereToInsert] = noteVal;
 80246a2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    ns->size++;
 80246a6:	f10c 0c01 	add.w	ip, ip, #1
    ns->data[whereToInsert] = noteVal;
 80246aa:	6067      	str	r7, [r4, #4]
    ns->size++;
 80246ac:	f8a2 c206 	strh.w	ip, [r2, #518]	; 0x206
}
 80246b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (poly->voices[i][0] == -2)    // if voice is released but still sounding, take over this voice
 80246b4:	461d      	mov	r5, r3
                    poly->voices[i][0] = note;
 80246b6:	f8c9 1000 	str.w	r1, [r9]
                    poly->notes[note][0] = i;
 80246ba:	eb06 04c1 	add.w	r4, r6, r1, lsl #3
                    poly->voices[i][1] = vel;
 80246be:	6937      	ldr	r7, [r6, #16]
 80246c0:	597f      	ldr	r7, [r7, r5]
 80246c2:	607a      	str	r2, [r7, #4]
 80246c4:	b28f      	uxth	r7, r1
                    poly->notes[note][0] = i;
 80246c6:	61e3      	str	r3, [r4, #28]
                    poly->notes[note][1] = vel;
 80246c8:	6222      	str	r2, [r4, #32]
                    poly->voices[i][2] = note; // voices[i][2] is the output midi note, (avoiding the -1 when a voice is inactive)
 80246ca:	6932      	ldr	r2, [r6, #16]
 80246cc:	5952      	ldr	r2, [r2, r5]
 80246ce:	6091      	str	r1, [r2, #8]
    _tStack* ns = *stack;
 80246d0:	6871      	ldr	r1, [r6, #4]
    if (ns->ordered)
 80246d2:	f8d1 420c 	ldr.w	r4, [r1, #524]	; 0x20c
        for (j = 0; j < ns->size; j++)
 80246d6:	f8b1 c206 	ldrh.w	ip, [r1, #518]	; 0x206
    if (ns->ordered)
 80246da:	b19c      	cbz	r4, 8024704 <tSimplePoly_noteOn+0x234>
        for (j = 0; j < ns->size; j++)
 80246dc:	f1bc 0f00 	cmp.w	ip, #0
 80246e0:	d01e      	beq.n	8024720 <tSimplePoly_noteOn+0x250>
 80246e2:	2200      	movs	r2, #0
 80246e4:	eb01 0582 	add.w	r5, r1, r2, lsl #2
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 80246e8:	1c50      	adds	r0, r2, #1
            if (noteVal > ns->data[j])
 80246ea:	686e      	ldr	r6, [r5, #4]
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 80246ec:	4604      	mov	r4, r0
            if (noteVal > ns->data[j])
 80246ee:	42be      	cmp	r6, r7
 80246f0:	da04      	bge.n	80246fc <tSimplePoly_noteOn+0x22c>
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 80246f2:	68aa      	ldr	r2, [r5, #8]
 80246f4:	1c56      	adds	r6, r2, #1
 80246f6:	d005      	beq.n	8024704 <tSimplePoly_noteOn+0x234>
 80246f8:	42ba      	cmp	r2, r7
 80246fa:	dc03      	bgt.n	8024704 <tSimplePoly_noteOn+0x234>
        for (j = 0; j < ns->size; j++)
 80246fc:	b2c2      	uxtb	r2, r0
 80246fe:	4562      	cmp	r2, ip
 8024700:	d3f0      	bcc.n	80246e4 <tSimplePoly_noteOn+0x214>
    int whereToInsert = 0;
 8024702:	2400      	movs	r4, #0
    for (j = ns->size; j > whereToInsert; j--)
 8024704:	fa5f f28c 	uxtb.w	r2, ip
 8024708:	4294      	cmp	r4, r2
 802470a:	da84      	bge.n	8024616 <tSimplePoly_noteOn+0x146>
 802470c:	1e56      	subs	r6, r2, #1
 802470e:	eb01 0082 	add.w	r0, r1, r2, lsl #2
        ns->data[j] = ns->data[(j - 1)];
 8024712:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
    for (j = ns->size; j > whereToInsert; j--)
 8024716:	b2f2      	uxtb	r2, r6
        ns->data[j] = ns->data[(j - 1)];
 8024718:	6045      	str	r5, [r0, #4]
    for (j = ns->size; j > whereToInsert; j--)
 802471a:	42a2      	cmp	r2, r4
 802471c:	dcf6      	bgt.n	802470c <tSimplePoly_noteOn+0x23c>
 802471e:	e77a      	b.n	8024616 <tSimplePoly_noteOn+0x146>
    int whereToInsert = 0;
 8024720:	4664      	mov	r4, ip
 8024722:	e778      	b.n	8024616 <tSimplePoly_noteOn+0x146>
 8024724:	4664      	mov	r4, ip
 8024726:	e7bc      	b.n	80246a2 <tSimplePoly_noteOn+0x1d2>

08024728 <tSimplePoly_noteOff>:



int tSimplePoly_noteOff(tSimplePoly* const polyh, uint8_t note)
{
 8024728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tSimplePoly* poly = *polyh;
 802472c:	6805      	ldr	r5, [r0, #0]
    _tStack* ns = *stack;
 802472e:	f8d5 c004 	ldr.w	ip, [r5, #4]
    for (int i = 0; i < ns->size; i++)
 8024732:	f8bc 0206 	ldrh.w	r0, [ip, #518]	; 0x206
 8024736:	b178      	cbz	r0, 8024758 <tSimplePoly_noteOff+0x30>
        if (ns->data[i] == noteVal)    return i;
 8024738:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802473c:	428b      	cmp	r3, r1
 802473e:	f000 808a 	beq.w	8024856 <tSimplePoly_noteOff+0x12e>
 8024742:	f10c 0304 	add.w	r3, ip, #4
    for (int i = 0; i < ns->size; i++)
 8024746:	2600      	movs	r6, #0
 8024748:	e003      	b.n	8024752 <tSimplePoly_noteOff+0x2a>
        if (ns->data[i] == noteVal)    return i;
 802474a:	f853 2f04 	ldr.w	r2, [r3, #4]!
 802474e:	428a      	cmp	r2, r1
 8024750:	d057      	beq.n	8024802 <tSimplePoly_noteOff+0xda>
    for (int i = 0; i < ns->size; i++)
 8024752:	3601      	adds	r6, #1
 8024754:	4286      	cmp	r6, r0
 8024756:	d1f8      	bne.n	802474a <tSimplePoly_noteOff+0x22>
    int16_t noteToTest = -1;

    tStack_remove(&poly->stack, note);
    poly->notes[note][0] = -1;
 8024758:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
 802475c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024760:	61d8      	str	r0, [r3, #28]

    int deactivatedVoice = -1;
    for (int i = 0; i < poly->maxNumVoices; i++)
 8024762:	68ee      	ldr	r6, [r5, #12]
 8024764:	2e00      	cmp	r6, #0
 8024766:	dd12      	ble.n	802478e <tSimplePoly_noteOff+0x66>
    {
        if (poly->voices[i][0] == note)
 8024768:	692b      	ldr	r3, [r5, #16]
 802476a:	681a      	ldr	r2, [r3, #0]
 802476c:	6810      	ldr	r0, [r2, #0]
 802476e:	4288      	cmp	r0, r1
 8024770:	d00f      	beq.n	8024792 <tSimplePoly_noteOff+0x6a>
    for (int i = 0; i < poly->maxNumVoices; i++)
 8024772:	2000      	movs	r0, #0
 8024774:	e004      	b.n	8024780 <tSimplePoly_noteOff+0x58>
        if (poly->voices[i][0] == note)
 8024776:	f853 2f04 	ldr.w	r2, [r3, #4]!
 802477a:	6814      	ldr	r4, [r2, #0]
 802477c:	428c      	cmp	r4, r1
 802477e:	d00a      	beq.n	8024796 <tSimplePoly_noteOff+0x6e>
    for (int i = 0; i < poly->maxNumVoices; i++)
 8024780:	3001      	adds	r0, #1
 8024782:	42b0      	cmp	r0, r6
 8024784:	ea4f 0780 	mov.w	r7, r0, lsl #2
 8024788:	d1f5      	bne.n	8024776 <tSimplePoly_noteOff+0x4e>
                {
                    poly->voices[deactivatedVoice][0] = noteToTest; //set the newly free voice to use the old stolen note
                    poly->voices[deactivatedVoice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
                    poly->voices[deactivatedVoice][2] = noteToTest;
                    poly->notes[noteToTest][0] = deactivatedVoice; //mark that it is no longer stolen and is now active
                    return -1;
 802478a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                }
            }
        }
    }
    return deactivatedVoice;
}
 802478e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (int i = 0; i < poly->maxNumVoices; i++)
 8024792:	2000      	movs	r0, #0
        if (poly->voices[i][0] == note)
 8024794:	4607      	mov	r7, r0
            poly->voices[i][0] = -1;
 8024796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
            poly->voices[i][1] = 0;
 802479a:	2600      	movs	r6, #0
            poly->voices[i][0] = -1;
 802479c:	6013      	str	r3, [r2, #0]
            poly->voices[i][1] = 0;
 802479e:	692b      	ldr	r3, [r5, #16]
 80247a0:	59db      	ldr	r3, [r3, r7]
 80247a2:	605e      	str	r6, [r3, #4]
    if (poly->recover_stolen)
 80247a4:	69ab      	ldr	r3, [r5, #24]
 80247a6:	2b00      	cmp	r3, #0
 80247a8:	d0f1      	beq.n	802478e <tSimplePoly_noteOff+0x66>
    _tStack* ns = *stack;
 80247aa:	6869      	ldr	r1, [r5, #4]
    return ns->size;
 80247ac:	f8b1 c206 	ldrh.w	ip, [r1, #518]	; 0x206
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 80247b0:	f1bc 0f00 	cmp.w	ip, #0
 80247b4:	d0eb      	beq.n	802478e <tSimplePoly_noteOff+0x66>
                if (poly->notes[noteToTest][0] == -3) //if there is a stolen note waiting (marked inactive but on the stack)
 80247b6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80247ba:	1cdc      	adds	r4, r3, #3
 80247bc:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
 80247c0:	6852      	ldr	r2, [r2, #4]
 80247c2:	3203      	adds	r2, #3
 80247c4:	d00d      	beq.n	80247e2 <tSimplePoly_noteOff+0xba>
 80247c6:	3104      	adds	r1, #4
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 80247c8:	4632      	mov	r2, r6
 80247ca:	3201      	adds	r2, #1
 80247cc:	4562      	cmp	r2, ip
 80247ce:	d0de      	beq.n	802478e <tSimplePoly_noteOff+0x66>
                noteToTest = tStack_get(&poly->stack, j);
 80247d0:	f851 3f04 	ldr.w	r3, [r1, #4]!
                if (poly->notes[noteToTest][0] == -3) //if there is a stolen note waiting (marked inactive but on the stack)
 80247d4:	b21b      	sxth	r3, r3
 80247d6:	1cdc      	adds	r4, r3, #3
 80247d8:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
 80247dc:	6876      	ldr	r6, [r6, #4]
 80247de:	3603      	adds	r6, #3
 80247e0:	d1f3      	bne.n	80247ca <tSimplePoly_noteOff+0xa2>
                    poly->voices[deactivatedVoice][0] = noteToTest; //set the newly free voice to use the old stolen note
 80247e2:	692a      	ldr	r2, [r5, #16]
                    poly->voices[deactivatedVoice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
 80247e4:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
                    poly->notes[noteToTest][0] = deactivatedVoice; //mark that it is no longer stolen and is now active
 80247e8:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
                    poly->voices[deactivatedVoice][0] = noteToTest; //set the newly free voice to use the old stolen note
 80247ec:	59d2      	ldr	r2, [r2, r7]
 80247ee:	6013      	str	r3, [r2, #0]
                    poly->voices[deactivatedVoice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
 80247f0:	692a      	ldr	r2, [r5, #16]
 80247f2:	6a09      	ldr	r1, [r1, #32]
 80247f4:	59d2      	ldr	r2, [r2, r7]
 80247f6:	6051      	str	r1, [r2, #4]
                    poly->voices[deactivatedVoice][2] = noteToTest;
 80247f8:	692a      	ldr	r2, [r5, #16]
 80247fa:	59d2      	ldr	r2, [r2, r7]
 80247fc:	6093      	str	r3, [r2, #8]
                    poly->notes[noteToTest][0] = deactivatedVoice; //mark that it is no longer stolen and is now active
 80247fe:	6060      	str	r0, [r4, #4]
 8024800:	e7c3      	b.n	802478a <tSimplePoly_noteOff+0x62>
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024802:	eba0 0806 	sub.w	r8, r0, r6
 8024806:	f1b8 0f00 	cmp.w	r8, #0
 802480a:	dd22      	ble.n	8024852 <tSimplePoly_noteOff+0x12a>
            if ((k+foundIndex) >= (ns->capacity - 1))
 802480c:	f8bc e208 	ldrh.w	lr, [ip, #520]	; 0x208
 8024810:	2200      	movs	r2, #0
                    ns->data[k + foundIndex + 1] = -1;
 8024812:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8024816:	3801      	subs	r0, #1
            if ((k+foundIndex) >= (ns->capacity - 1))
 8024818:	4613      	mov	r3, r2
 802481a:	44ce      	add	lr, r9
 802481c:	e006      	b.n	802482c <tSimplePoly_noteOff+0x104>
        for (k = 0; k < (ns->size - foundIndex); k++)
 802481e:	3201      	adds	r2, #1
                ns->data[k + foundIndex] = -1;
 8024820:	f8c4 9004 	str.w	r9, [r4, #4]
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024824:	b2d2      	uxtb	r2, r2
 8024826:	4590      	cmp	r8, r2
 8024828:	4613      	mov	r3, r2
 802482a:	dd0f      	ble.n	802484c <tSimplePoly_noteOff+0x124>
            if ((k+foundIndex) >= (ns->capacity - 1))
 802482c:	4433      	add	r3, r6
 802482e:	4573      	cmp	r3, lr
 8024830:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8024834:	daf3      	bge.n	802481e <tSimplePoly_noteOff+0xf6>
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024836:	3201      	adds	r2, #1
                if ((k + foundIndex) == (ns->size - 1))
 8024838:	4283      	cmp	r3, r0
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
 802483a:	68a7      	ldr	r7, [r4, #8]
        for (k = 0; k < (ns->size - foundIndex); k++)
 802483c:	b2d2      	uxtb	r2, r2
                    ns->data[k + foundIndex + 1] = -1;
 802483e:	bf08      	it	eq
 8024840:	f8c4 9008 	streq.w	r9, [r4, #8]
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
 8024844:	6067      	str	r7, [r4, #4]
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024846:	4590      	cmp	r8, r2
 8024848:	4613      	mov	r3, r2
 802484a:	dcef      	bgt.n	802482c <tSimplePoly_noteOff+0x104>
        ns->size--;
 802484c:	f8ac 0206 	strh.w	r0, [ip, #518]	; 0x206
 8024850:	e782      	b.n	8024758 <tSimplePoly_noteOff+0x30>
 8024852:	3801      	subs	r0, #1
 8024854:	e7fa      	b.n	802484c <tSimplePoly_noteOff+0x124>
        if (ns->data[i] == noteVal)    return i;
 8024856:	4680      	mov	r8, r0
    for (int i = 0; i < ns->size; i++)
 8024858:	2600      	movs	r6, #0
 802485a:	e7d7      	b.n	802480c <tSimplePoly_noteOff+0xe4>

0802485c <tSimplePoly_deactivateVoice>:


void tSimplePoly_deactivateVoice(tSimplePoly* const polyh, uint8_t voice)
{
 802485c:	b4f0      	push	{r4, r5, r6, r7}
    _tSimplePoly* poly = *polyh;
 802485e:	6803      	ldr	r3, [r0, #0]

    if (poly->voices[voice][0] == -2) //only do this if the voice is waiting for deactivation (not already reassigned while waiting)
 8024860:	b208      	sxth	r0, r1
 8024862:	691a      	ldr	r2, [r3, #16]
 8024864:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8024868:	6822      	ldr	r2, [r4, #0]
 802486a:	3202      	adds	r2, #2
 802486c:	d001      	beq.n	8024872 <tSimplePoly_deactivateVoice+0x16>
                    poly->notes[noteToTest][0] = voice; //mark that it is no longer stolen and is now active
                }
            }
        }
    }
}
 802486e:	bcf0      	pop	{r4, r5, r6, r7}
 8024870:	4770      	bx	lr
        poly->voices[voice][0] = -1;
 8024872:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8024876:	0085      	lsls	r5, r0, #2
        poly->voices[voice][1] = 0;
 8024878:	2200      	movs	r2, #0
        poly->voices[voice][0] = -1;
 802487a:	6026      	str	r6, [r4, #0]
        poly->voices[voice][1] = 0;
 802487c:	691c      	ldr	r4, [r3, #16]
 802487e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8024882:	6042      	str	r2, [r0, #4]
        if (poly->recover_stolen)
 8024884:	6998      	ldr	r0, [r3, #24]
 8024886:	2800      	cmp	r0, #0
 8024888:	d0f1      	beq.n	802486e <tSimplePoly_deactivateVoice+0x12>
    _tStack* ns = *stack;
 802488a:	6858      	ldr	r0, [r3, #4]
    return ns->size;
 802488c:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 8024890:	2e00      	cmp	r6, #0
 8024892:	d0ec      	beq.n	802486e <tSimplePoly_deactivateVoice+0x12>
 8024894:	4607      	mov	r7, r0
 8024896:	f8df c054 	ldr.w	ip, [pc, #84]	; 80248ec <tSimplePoly_deactivateVoice+0x90>
    return ns->data[which];
 802489a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
                noteToTest = tStack_get(&poly->stack, j);
 802489e:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
                if (poly->notes[noteToTest][0] == -3) //if there is a stolen note waiting (marked inactive but on the stack)
 80248a2:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
                noteToTest = tStack_get(&poly->stack, j);
 80248a6:	f8ac 0000 	strh.w	r0, [ip]
                if (poly->notes[noteToTest][0] == -3) //if there is a stolen note waiting (marked inactive but on the stack)
 80248aa:	69e4      	ldr	r4, [r4, #28]
 80248ac:	3403      	adds	r4, #3
 80248ae:	d004      	beq.n	80248ba <tSimplePoly_deactivateVoice+0x5e>
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 80248b0:	3201      	adds	r2, #1
 80248b2:	42b2      	cmp	r2, r6
 80248b4:	dadb      	bge.n	802486e <tSimplePoly_deactivateVoice+0x12>
{
 80248b6:	4638      	mov	r0, r7
 80248b8:	e7ef      	b.n	802489a <tSimplePoly_deactivateVoice+0x3e>
                    poly->voices[voice][0] = noteToTest; //set the newly free voice to use the old stolen note
 80248ba:	691c      	ldr	r4, [r3, #16]
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 80248bc:	3201      	adds	r2, #1
                    poly->voices[voice][0] = noteToTest; //set the newly free voice to use the old stolen note
 80248be:	5964      	ldr	r4, [r4, r5]
 80248c0:	6020      	str	r0, [r4, #0]
                    poly->voices[voice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
 80248c2:	f9bc 0000 	ldrsh.w	r0, [ip]
 80248c6:	691c      	ldr	r4, [r3, #16]
 80248c8:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
 80248cc:	5967      	ldr	r7, [r4, r5]
                    poly->notes[noteToTest][0] = voice; //mark that it is no longer stolen and is now active
 80248ce:	4634      	mov	r4, r6
                    poly->voices[voice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
 80248d0:	6a36      	ldr	r6, [r6, #32]
 80248d2:	607e      	str	r6, [r7, #4]
                    poly->voices[voice][2] = noteToTest;
 80248d4:	691e      	ldr	r6, [r3, #16]
 80248d6:	5976      	ldr	r6, [r6, r5]
 80248d8:	60b0      	str	r0, [r6, #8]
                    poly->notes[noteToTest][0] = voice; //mark that it is no longer stolen and is now active
 80248da:	61e1      	str	r1, [r4, #28]
 80248dc:	685f      	ldr	r7, [r3, #4]
 80248de:	f8b7 6206 	ldrh.w	r6, [r7, #518]	; 0x206
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 80248e2:	4296      	cmp	r6, r2
 80248e4:	ddc3      	ble.n	802486e <tSimplePoly_deactivateVoice+0x12>
{
 80248e6:	4638      	mov	r0, r7
 80248e8:	e7d7      	b.n	802489a <tSimplePoly_deactivateVoice+0x3e>
 80248ea:	bf00      	nop
 80248ec:	200003ac 	.word	0x200003ac

080248f0 <tSimplePoly_markPendingNoteOff>:
    return voiceWithThatNote;
}


int tSimplePoly_markPendingNoteOff(tSimplePoly* const polyh, uint8_t note)
{
 80248f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tSimplePoly* poly = *polyh;
 80248f4:	6805      	ldr	r5, [r0, #0]
    _tStack* ns = *stack;
 80248f6:	f8d5 c004 	ldr.w	ip, [r5, #4]
    for (int i = 0; i < ns->size; i++)
 80248fa:	f8bc 0206 	ldrh.w	r0, [ip, #518]	; 0x206
 80248fe:	b170      	cbz	r0, 802491e <tSimplePoly_markPendingNoteOff+0x2e>
        if (ns->data[i] == noteVal)    return i;
 8024900:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8024904:	428b      	cmp	r3, r1
 8024906:	d05c      	beq.n	80249c2 <tSimplePoly_markPendingNoteOff+0xd2>
 8024908:	f10c 0304 	add.w	r3, ip, #4
    for (int i = 0; i < ns->size; i++)
 802490c:	2600      	movs	r6, #0
 802490e:	e003      	b.n	8024918 <tSimplePoly_markPendingNoteOff+0x28>
        if (ns->data[i] == noteVal)    return i;
 8024910:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8024914:	4291      	cmp	r1, r2
 8024916:	d006      	beq.n	8024926 <tSimplePoly_markPendingNoteOff+0x36>
    for (int i = 0; i < ns->size; i++)
 8024918:	3601      	adds	r6, #1
 802491a:	42b0      	cmp	r0, r6
 802491c:	d1f8      	bne.n	8024910 <tSimplePoly_markPendingNoteOff+0x20>
    int deactivatedVoice = -1;
 802491e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }


    }
    return deactivatedVoice;
}
 8024922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024926:	eba0 0806 	sub.w	r8, r0, r6
 802492a:	f1b8 0f00 	cmp.w	r8, #0
 802492e:	dd46      	ble.n	80249be <tSimplePoly_markPendingNoteOff+0xce>
            if ((k+foundIndex) >= (ns->capacity - 1))
 8024930:	f8bc e208 	ldrh.w	lr, [ip, #520]	; 0x208
 8024934:	2200      	movs	r2, #0
                    ns->data[k + foundIndex + 1] = -1;
 8024936:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 802493a:	3801      	subs	r0, #1
            if ((k+foundIndex) >= (ns->capacity - 1))
 802493c:	4613      	mov	r3, r2
 802493e:	44ce      	add	lr, r9
 8024940:	e006      	b.n	8024950 <tSimplePoly_markPendingNoteOff+0x60>
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024942:	3201      	adds	r2, #1
                ns->data[k + foundIndex] = -1;
 8024944:	f8c4 9004 	str.w	r9, [r4, #4]
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024948:	b2d2      	uxtb	r2, r2
 802494a:	4590      	cmp	r8, r2
 802494c:	4613      	mov	r3, r2
 802494e:	dd0f      	ble.n	8024970 <tSimplePoly_markPendingNoteOff+0x80>
            if ((k+foundIndex) >= (ns->capacity - 1))
 8024950:	4433      	add	r3, r6
 8024952:	4573      	cmp	r3, lr
 8024954:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8024958:	daf3      	bge.n	8024942 <tSimplePoly_markPendingNoteOff+0x52>
        for (k = 0; k < (ns->size - foundIndex); k++)
 802495a:	3201      	adds	r2, #1
                if ((k + foundIndex) == (ns->size - 1))
 802495c:	4283      	cmp	r3, r0
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
 802495e:	68a7      	ldr	r7, [r4, #8]
        for (k = 0; k < (ns->size - foundIndex); k++)
 8024960:	b2d2      	uxtb	r2, r2
                    ns->data[k + foundIndex + 1] = -1;
 8024962:	bf08      	it	eq
 8024964:	f8c4 9008 	streq.w	r9, [r4, #8]
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
 8024968:	6067      	str	r7, [r4, #4]
        for (k = 0; k < (ns->size - foundIndex); k++)
 802496a:	4590      	cmp	r8, r2
 802496c:	4613      	mov	r3, r2
 802496e:	dcef      	bgt.n	8024950 <tSimplePoly_markPendingNoteOff+0x60>
        poly->notes[note][0] = -2;
 8024970:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
 8024974:	f06f 0201 	mvn.w	r2, #1
        ns->size--;
 8024978:	f8ac 0206 	strh.w	r0, [ip, #518]	; 0x206
        poly->notes[note][0] = -2;
 802497c:	61da      	str	r2, [r3, #28]
        for (int i = 0; i < poly->maxNumVoices; i++)
 802497e:	68ee      	ldr	r6, [r5, #12]
 8024980:	2e00      	cmp	r6, #0
 8024982:	ddcc      	ble.n	802491e <tSimplePoly_markPendingNoteOff+0x2e>
            if (poly->voices[i][0] == note)
 8024984:	692b      	ldr	r3, [r5, #16]
 8024986:	681a      	ldr	r2, [r3, #0]
 8024988:	6810      	ldr	r0, [r2, #0]
 802498a:	4281      	cmp	r1, r0
 802498c:	d00c      	beq.n	80249a8 <tSimplePoly_markPendingNoteOff+0xb8>
        for (int i = 0; i < poly->maxNumVoices; i++)
 802498e:	2000      	movs	r0, #0
 8024990:	e004      	b.n	802499c <tSimplePoly_markPendingNoteOff+0xac>
            if (poly->voices[i][0] == note)
 8024992:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8024996:	6814      	ldr	r4, [r2, #0]
 8024998:	428c      	cmp	r4, r1
 802499a:	d007      	beq.n	80249ac <tSimplePoly_markPendingNoteOff+0xbc>
        for (int i = 0; i < poly->maxNumVoices; i++)
 802499c:	3001      	adds	r0, #1
 802499e:	42b0      	cmp	r0, r6
 80249a0:	ea4f 0780 	mov.w	r7, r0, lsl #2
 80249a4:	d1f5      	bne.n	8024992 <tSimplePoly_markPendingNoteOff+0xa2>
 80249a6:	e7ba      	b.n	802491e <tSimplePoly_markPendingNoteOff+0x2e>
 80249a8:	2000      	movs	r0, #0
            if (poly->voices[i][0] == note)
 80249aa:	4607      	mov	r7, r0
                poly->voices[i][0] = -2;
 80249ac:	f06f 0301 	mvn.w	r3, #1
                poly->voices[i][1] = 0;
 80249b0:	2100      	movs	r1, #0
                poly->voices[i][0] = -2;
 80249b2:	6013      	str	r3, [r2, #0]
                poly->voices[i][1] = 0;
 80249b4:	692b      	ldr	r3, [r5, #16]
 80249b6:	59db      	ldr	r3, [r3, r7]
 80249b8:	6059      	str	r1, [r3, #4]
}
 80249ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80249be:	3801      	subs	r0, #1
 80249c0:	e7d6      	b.n	8024970 <tSimplePoly_markPendingNoteOff+0x80>
        if (ns->data[i] == noteVal)    return i;
 80249c2:	4680      	mov	r8, r0
    for (int i = 0; i < ns->size; i++)
 80249c4:	2600      	movs	r6, #0
 80249c6:	e7b3      	b.n	8024930 <tSimplePoly_markPendingNoteOff+0x40>

080249c8 <tSimplePoly_setNumVoices>:

void tSimplePoly_setNumVoices(tSimplePoly* const polyh, uint8_t numVoices)
{
    _tSimplePoly* poly = *polyh;
 80249c8:	6802      	ldr	r2, [r0, #0]
    poly->numVoices = (numVoices > poly->maxNumVoices) ? poly->maxNumVoices : numVoices;
 80249ca:	68d3      	ldr	r3, [r2, #12]
 80249cc:	4299      	cmp	r1, r3
 80249ce:	bfa8      	it	ge
 80249d0:	4619      	movge	r1, r3
 80249d2:	6091      	str	r1, [r2, #8]
}
 80249d4:	4770      	bx	lr
 80249d6:	bf00      	nop

080249d8 <tSimplePoly_getNumVoices>:


int tSimplePoly_getNumVoices(tSimplePoly* const polyh)
{
    _tSimplePoly* poly = *polyh;
    return poly->numVoices;
 80249d8:	6803      	ldr	r3, [r0, #0]
}
 80249da:	6898      	ldr	r0, [r3, #8]
 80249dc:	4770      	bx	lr
 80249de:	bf00      	nop

080249e0 <tSimplePoly_getNumActiveVoices>:

int tSimplePoly_getNumActiveVoices(tSimplePoly* const polyh)
{
 80249e0:	b508      	push	{r3, lr}
    _tSimplePoly* poly = *polyh;
 80249e2:	6803      	ldr	r3, [r0, #0]
    return LEAF_clip(0, tStack_getSize(&poly->stack), poly->numVoices);
 80249e4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8024a0c <tSimplePoly_getNumActiveVoices+0x2c>
    return ns->size;
 80249e8:	685a      	ldr	r2, [r3, #4]
    return LEAF_clip(0, tStack_getSize(&poly->stack), poly->numVoices);
 80249ea:	ed93 1a02 	vldr	s2, [r3, #8]
    return ns->size;
 80249ee:	f8b2 3206 	ldrh.w	r3, [r2, #518]	; 0x206
    return LEAF_clip(0, tStack_getSize(&poly->stack), poly->numVoices);
 80249f2:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
    return ns->size;
 80249f6:	ee00 3a90 	vmov	s1, r3
    return LEAF_clip(0, tStack_getSize(&poly->stack), poly->numVoices);
 80249fa:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80249fe:	f7ff f983 	bl	8023d08 <LEAF_clip>
}
 8024a02:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8024a06:	ee17 0a90 	vmov	r0, s15
 8024a0a:	bd08      	pop	{r3, pc}
 8024a0c:	00000000 	.word	0x00000000

08024a10 <tSimplePoly_getPitch>:


int tSimplePoly_getPitch(tSimplePoly* const polyh, uint8_t voice)
{
    _tSimplePoly* poly = *polyh;
    return poly->voices[voice][2];
 8024a10:	6803      	ldr	r3, [r0, #0]
 8024a12:	691b      	ldr	r3, [r3, #16]
 8024a14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
}
 8024a18:	6898      	ldr	r0, [r3, #8]
 8024a1a:	4770      	bx	lr

08024a1c <tSimplePoly_getPitchAndCheckActive>:

//this one returns negative one if the voice is inactive
int tSimplePoly_getPitchAndCheckActive(tSimplePoly* const polyh, uint8_t voice)
{
    _tSimplePoly* poly = *polyh;
    return poly->voices[voice][0];
 8024a1c:	6803      	ldr	r3, [r0, #0]
 8024a1e:	691b      	ldr	r3, [r3, #16]
 8024a20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
}
 8024a24:	6818      	ldr	r0, [r3, #0]
 8024a26:	4770      	bx	lr

08024a28 <tSimplePoly_getVelocity>:

int tSimplePoly_getVelocity(tSimplePoly* const polyh, uint8_t voice)
{
    _tSimplePoly* poly = *polyh;
    return poly->voices[voice][1];
 8024a28:	6803      	ldr	r3, [r0, #0]
 8024a2a:	691b      	ldr	r3, [r3, #16]
 8024a2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
}
 8024a30:	6858      	ldr	r0, [r3, #4]
 8024a32:	4770      	bx	lr

08024a34 <tSimplePoly_isOn>:

int tSimplePoly_isOn(tSimplePoly* const polyh, uint8_t voice)
{
    _tSimplePoly* poly = *polyh;
    return (poly->voices[voice][0] > 0) ? 1 : 0;
 8024a34:	6803      	ldr	r3, [r0, #0]
 8024a36:	691b      	ldr	r3, [r3, #16]
 8024a38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8024a3c:	6818      	ldr	r0, [r3, #0]
}
 8024a3e:	2800      	cmp	r0, #0
 8024a40:	bfd4      	ite	le
 8024a42:	2000      	movle	r0, #0
 8024a44:	2001      	movgt	r0, #1
 8024a46:	4770      	bx	lr

08024a48 <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf.mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 8024a48:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 8024a4a:	680c      	ldr	r4, [r1, #0]
{
 8024a4c:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8024a4e:	2010      	movs	r0, #16
 8024a50:	4621      	mov	r1, r4
 8024a52:	f7ff fb59 	bl	8024108 <mpool_alloc>
    c->mempool = m;
    
    c->inc      =  0.0f;
 8024a56:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8024a58:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8024a5a:	6004      	str	r4, [r0, #0]
    c->inc      =  0.0f;
 8024a5c:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
 8024a5e:	6043      	str	r3, [r0, #4]
}
 8024a60:	bd38      	pop	{r3, r4, r5, pc}
 8024a62:	bf00      	nop

08024a64 <tCycle_free>:

void    tCycle_free (tCycle* const cy)
{
    _tCycle* c = *cy;
 8024a64:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)c, c->mempool);
 8024a66:	6801      	ldr	r1, [r0, #0]
 8024a68:	f7ff bbf6 	b.w	8024258 <mpool_free>

08024a6c <tCycle_setFreq>:
{
    _tCycle* c = *cy;
    
    c->freq  = freq;

    c->inc = freq * leaf.invSampleRate;
 8024a6c:	4a05      	ldr	r2, [pc, #20]	; (8024a84 <tCycle_setFreq+0x18>)
    _tCycle* c = *cy;
 8024a6e:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * leaf.invSampleRate;
 8024a70:	edd2 7a01 	vldr	s15, [r2, #4]
    c->freq  = freq;
 8024a74:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * leaf.invSampleRate;
 8024a78:	ee27 0a80 	vmul.f32	s0, s15, s0
 8024a7c:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8024a80:	4770      	bx	lr
 8024a82:	bf00      	nop
 8024a84:	200194e0 	.word	0x200194e0

08024a88 <tCycle_tick>:

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 8024a88:	6803      	ldr	r3, [r0, #0]
    float samp0;
    float samp1;
    
    // Phasor increment
    c->phase += c->inc;
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8024a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    c->phase += c->inc;
 8024a8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8024a92:	edd3 7a02 	vldr	s15, [r3, #8]
 8024a96:	ee37 7a27 	vadd.f32	s14, s14, s15
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8024a9a:	eeb4 7ae6 	vcmpe.f32	s14, s13
    c->phase += c->inc;
 8024a9e:	ed83 7a01 	vstr	s14, [r3, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8024aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024aa6:	db3f      	blt.n	8024b28 <tCycle_tick+0xa0>
 8024aa8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8024aac:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8024ab0:	ee77 7a66 	vsub.f32	s15, s14, s13
 8024ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024ab8:	eeb0 7a67 	vmov.f32	s14, s15
 8024abc:	daf6      	bge.n	8024aac <tCycle_tick+0x24>
    while (c->phase < 0.0f) c->phase += 1.0f;
 8024abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8024ac2:	edc3 7a01 	vstr	s15, [r3, #4]
 8024ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024aca:	d534      	bpl.n	8024b36 <tCycle_tick+0xae>
 8024acc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8024ad0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8024ad4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8024ad8:	ee37 7a86 	vadd.f32	s14, s15, s12
 8024adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024ae0:	eef0 7a47 	vmov.f32	s15, s14
 8024ae4:	d4f6      	bmi.n	8024ad4 <tCycle_tick+0x4c>
 8024ae6:	ed83 7a01 	vstr	s14, [r3, #4]

    // Wavetable synthesis

	temp = SINE_TABLE_SIZE * c->phase;
 8024aea:	eddf 7a14 	vldr	s15, [pc, #80]	; 8024b3c <tCycle_tick+0xb4>
	intPart = (int)temp;
	fracPart = temp - (float)intPart;
	samp0 = __leaf_table_sinewave[intPart];
 8024aee:	4a14      	ldr	r2, [pc, #80]	; (8024b40 <tCycle_tick+0xb8>)
	temp = SINE_TABLE_SIZE * c->phase;
 8024af0:	ee27 7a27 	vmul.f32	s14, s14, s15
	intPart = (int)temp;
 8024af4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8024af8:	ee17 3a90 	vmov	r3, s15
	fracPart = temp - (float)intPart;
 8024afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if (++intPart >= SINE_TABLE_SIZE) intPart = 0;
 8024b00:	1c59      	adds	r1, r3, #1
	samp0 = __leaf_table_sinewave[intPart];
 8024b02:	eb02 0083 	add.w	r0, r2, r3, lsl #2
	fracPart = temp - (float)intPart;
 8024b06:	ee37 7a67 	vsub.f32	s14, s14, s15
	if (++intPart >= SINE_TABLE_SIZE) intPart = 0;
 8024b0a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
	samp0 = __leaf_table_sinewave[intPart];
 8024b0e:	ed90 0a00 	vldr	s0, [r0]
	if (++intPart >= SINE_TABLE_SIZE) intPart = 0;
 8024b12:	bfa8      	it	ge
 8024b14:	2100      	movge	r1, #0
	samp1 = __leaf_table_sinewave[intPart];
 8024b16:	eb02 0281 	add.w	r2, r2, r1, lsl #2

    return (samp0 + (samp1 - samp0) * fracPart);
 8024b1a:	edd2 7a00 	vldr	s15, [r2]
 8024b1e:	ee77 7ac0 	vsub.f32	s15, s15, s0
}
 8024b22:	eea7 0a87 	vfma.f32	s0, s15, s14
 8024b26:	4770      	bx	lr
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8024b28:	eef0 7a47 	vmov.f32	s15, s14
    while (c->phase < 0.0f) c->phase += 1.0f;
 8024b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8024b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b34:	d4ca      	bmi.n	8024acc <tCycle_tick+0x44>
 8024b36:	eeb0 7a67 	vmov.f32	s14, s15
 8024b3a:	e7d6      	b.n	8024aea <tCycle_tick+0x62>
 8024b3c:	45000000 	.word	0x45000000
 8024b40:	08039588 	.word	0x08039588

08024b44 <tSawtooth_initToPool>:
{
    tSawtooth_initToPool(cy, &leaf.mempool);
}

void    tSawtooth_initToPool    (tSawtooth* const cy, tMempool* const mp)
{
 8024b44:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
 8024b46:	680d      	ldr	r5, [r1, #0]
{
 8024b48:	4604      	mov	r4, r0
    _tSawtooth* c = *cy = (_tSawtooth*) mpool_alloc(sizeof(_tSawtooth), m);
 8024b4a:	2018      	movs	r0, #24
{
    _tSawtooth* c = *cy;
    
    c->freq  = freq;
    
    c->inc = c->freq * leaf.invSampleRate;
 8024b4c:	4e0c      	ldr	r6, [pc, #48]	; (8024b80 <tSawtooth_initToPool+0x3c>)
    _tSawtooth* c = *cy = (_tSawtooth*) mpool_alloc(sizeof(_tSawtooth), m);
 8024b4e:	4629      	mov	r1, r5
 8024b50:	f7ff fada 	bl	8024108 <mpool_alloc>
    c->inc      = 0.0f;
 8024b54:	2300      	movs	r3, #0
    _tSawtooth* c = *cy = (_tSawtooth*) mpool_alloc(sizeof(_tSawtooth), m);
 8024b56:	6020      	str	r0, [r4, #0]
 8024b58:	2103      	movs	r1, #3
    c->mempool = m;
 8024b5a:	6005      	str	r5, [r0, #0]
    c->phase    = 0.0f;
 8024b5c:	6043      	str	r3, [r0, #4]
    c->freq  = freq;
 8024b5e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8024b84 <tSawtooth_initToPool+0x40>
    c->inc = c->freq * leaf.invSampleRate;
 8024b62:	edd6 7a01 	vldr	s15, [r6, #4]
    c->inc      = 0.0f;
 8024b66:	6083      	str	r3, [r0, #8]
    c->inc = c->freq * leaf.invSampleRate;
 8024b68:	ee67 7a87 	vmul.f32	s15, s15, s14
    _tSawtooth* c = *cy;
 8024b6c:	6823      	ldr	r3, [r4, #0]
    c->w = c->freq * INV_20;
    for (c->oct = 0; c->w > 2.0f; c->oct++)
    {
        c->w = 0.5f * c->w;
    }
    c->w = 2.0f - c->w;
 8024b6e:	4a06      	ldr	r2, [pc, #24]	; (8024b88 <tSawtooth_initToPool+0x44>)
    c->freq  = freq;
 8024b70:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = c->freq * leaf.invSampleRate;
 8024b74:	edc3 7a02 	vstr	s15, [r3, #8]
 8024b78:	6119      	str	r1, [r3, #16]
    c->w = 2.0f - c->w;
 8024b7a:	615a      	str	r2, [r3, #20]
}
 8024b7c:	bd70      	pop	{r4, r5, r6, pc}
 8024b7e:	bf00      	nop
 8024b80:	200194e0 	.word	0x200194e0
 8024b84:	435c0000 	.word	0x435c0000
 8024b88:	3f200000 	.word	0x3f200000

08024b8c <tSawtooth_free>:
    _tSawtooth* c = *cy;
 8024b8c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)c, c->mempool);
 8024b8e:	6801      	ldr	r1, [r0, #0]
 8024b90:	f7ff bb62 	b.w	8024258 <mpool_free>

08024b94 <tSawtooth_setFreq>:
    c->w = c->freq * INV_20;
 8024b94:	eddf 7a16 	vldr	s15, [pc, #88]	; 8024bf0 <tSawtooth_setFreq+0x5c>
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 8024b98:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    c->inc = c->freq * leaf.invSampleRate;
 8024b9c:	4b15      	ldr	r3, [pc, #84]	; (8024bf4 <tSawtooth_setFreq+0x60>)
    c->w = c->freq * INV_20;
 8024b9e:	ee60 7a27 	vmul.f32	s15, s0, s15
    _tSawtooth* c = *cy;
 8024ba2:	6802      	ldr	r2, [r0, #0]
    c->inc = c->freq * leaf.invSampleRate;
 8024ba4:	edd3 6a01 	vldr	s13, [r3, #4]
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 8024ba8:	2300      	movs	r3, #0
    c->freq  = freq;
 8024baa:	ed82 0a03 	vstr	s0, [r2, #12]
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 8024bae:	eef4 7ac7 	vcmpe.f32	s15, s14
    c->w = c->freq * INV_20;
 8024bb2:	edc2 7a05 	vstr	s15, [r2, #20]
    c->inc = c->freq * leaf.invSampleRate;
 8024bb6:	ee66 6a80 	vmul.f32	s13, s13, s0
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 8024bba:	6113      	str	r3, [r2, #16]
 8024bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->inc = c->freq * leaf.invSampleRate;
 8024bc0:	edc2 6a02 	vstr	s13, [r2, #8]
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 8024bc4:	dd0c      	ble.n	8024be0 <tSawtooth_setFreq+0x4c>
        c->w = 0.5f * c->w;
 8024bc6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 8024bca:	2301      	movs	r3, #1
        c->w = 0.5f * c->w;
 8024bcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
    for (c->oct = 0; c->w > 2.0f; c->oct++)
 8024bd0:	4619      	mov	r1, r3
 8024bd2:	3301      	adds	r3, #1
 8024bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8024bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024bdc:	dcf6      	bgt.n	8024bcc <tSawtooth_setFreq+0x38>
 8024bde:	6111      	str	r1, [r2, #16]
    c->w = 2.0f - c->w;
 8024be0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8024be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024be8:	edc2 7a05 	vstr	s15, [r2, #20]
}
 8024bec:	4770      	bx	lr
 8024bee:	bf00      	nop
 8024bf0:	3d4ccccd 	.word	0x3d4ccccd
 8024bf4:	200194e0 	.word	0x200194e0

08024bf8 <tSawtooth_tick>:

float   tSawtooth_tick(tSawtooth* const cy)
{
 8024bf8:	b410      	push	{r4}
    _tSawtooth* c = *cy;
 8024bfa:	6802      	ldr	r2, [r0, #0]
    
    // Phasor increment
    c->phase += c->inc;
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8024bfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    c->phase += c->inc;
 8024c00:	ed92 7a01 	vldr	s14, [r2, #4]
 8024c04:	edd2 7a02 	vldr	s15, [r2, #8]
 8024c08:	ee37 7a27 	vadd.f32	s14, s14, s15
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8024c0c:	eeb4 7ae6 	vcmpe.f32	s14, s13
    c->phase += c->inc;
 8024c10:	ed82 7a01 	vstr	s14, [r2, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8024c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024c18:	db3e      	blt.n	8024c98 <tSawtooth_tick+0xa0>
 8024c1a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8024c1e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8024c22:	ee77 7a66 	vsub.f32	s15, s14, s13
 8024c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024c2a:	eeb0 7a67 	vmov.f32	s14, s15
 8024c2e:	daf6      	bge.n	8024c1e <tSawtooth_tick+0x26>
    while (c->phase < 0.0f) c->phase += 1.0f;
 8024c30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8024c34:	edc2 7a01 	vstr	s15, [r2, #4]
 8024c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024c3c:	d533      	bpl.n	8024ca6 <tSawtooth_tick+0xae>
 8024c3e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8024c42:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8024c46:	eef4 7ae6 	vcmpe.f32	s15, s13
 8024c4a:	ee37 7a86 	vadd.f32	s14, s15, s12
 8024c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024c52:	eef0 7a47 	vmov.f32	s15, s14
 8024c56:	d4f6      	bmi.n	8024c46 <tSawtooth_tick+0x4e>
 8024c58:	ed82 7a01 	vstr	s14, [r2, #4]
    
    float out = 0.0f;
    
    int idx = (int)(c->phase * SAW_TABLE_SIZE);
 8024c5c:	eef0 7a47 	vmov.f32	s15, s14
    
    // Wavetable synthesis
    out = __leaf_table_sawtooth[c->oct+1][idx] +
 8024c60:	6911      	ldr	r1, [r2, #16]
 8024c62:	4812      	ldr	r0, [pc, #72]	; (8024cac <tSawtooth_tick+0xb4>)
 8024c64:	1c4c      	adds	r4, r1, #1
 8024c66:	ed92 7a05 	vldr	s14, [r2, #20]
    int idx = (int)(c->phase * SAW_TABLE_SIZE);
 8024c6a:	eefe 7aea 	vcvt.s32.f32	s15, s15, #11
 8024c6e:	ee17 3a90 	vmov	r3, s15
         (__leaf_table_sawtooth[c->oct][idx] - __leaf_table_sawtooth[c->oct+1][idx]) * c->w;
 8024c72:	eb03 21c1 	add.w	r1, r3, r1, lsl #11
    out = __leaf_table_sawtooth[c->oct+1][idx] +
 8024c76:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    
    return out;
}
 8024c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
         (__leaf_table_sawtooth[c->oct][idx] - __leaf_table_sawtooth[c->oct+1][idx]) * c->w;
 8024c7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    out = __leaf_table_sawtooth[c->oct+1][idx] +
 8024c82:	eb00 0383 	add.w	r3, r0, r3, lsl #2
         (__leaf_table_sawtooth[c->oct][idx] - __leaf_table_sawtooth[c->oct+1][idx]) * c->w;
 8024c86:	edd1 7a00 	vldr	s15, [r1]
    out = __leaf_table_sawtooth[c->oct+1][idx] +
 8024c8a:	ed93 0a00 	vldr	s0, [r3]
         (__leaf_table_sawtooth[c->oct][idx] - __leaf_table_sawtooth[c->oct+1][idx]) * c->w;
 8024c8e:	ee77 7ac0 	vsub.f32	s15, s15, s0
}
 8024c92:	eea7 0a87 	vfma.f32	s0, s15, s14
 8024c96:	4770      	bx	lr
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8024c98:	eef0 7a47 	vmov.f32	s15, s14
    while (c->phase < 0.0f) c->phase += 1.0f;
 8024c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8024ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024ca4:	d4cb      	bmi.n	8024c3e <tSawtooth_tick+0x46>
 8024ca6:	eeb0 7a67 	vmov.f32	s14, s15
 8024caa:	e7d7      	b.n	8024c5c <tSawtooth_tick+0x64>
 8024cac:	080eb588 	.word	0x080eb588

08024cb0 <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf.mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 8024cb0:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
 8024cb2:	6814      	ldr	r4, [r2, #0]
{
 8024cb4:	4606      	mov	r6, r0
 8024cb6:	460d      	mov	r5, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8024cb8:	2018      	movs	r0, #24
 8024cba:	4621      	mov	r1, r4
 8024cbc:	f7ff fa24 	bl	8024108 <mpool_alloc>
    n->mempool = m;
    
    n->type = type;
    n->rand = leaf.random;
 8024cc0:	4b03      	ldr	r3, [pc, #12]	; (8024cd0 <tNoise_initToPool+0x20>)
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8024cc2:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 8024cc4:	6004      	str	r4, [r0, #0]
    n->type = type;
 8024cc6:	7105      	strb	r5, [r0, #4]
    n->rand = leaf.random;
 8024cc8:	691b      	ldr	r3, [r3, #16]
 8024cca:	6143      	str	r3, [r0, #20]
}
 8024ccc:	bd70      	pop	{r4, r5, r6, pc}
 8024cce:	bf00      	nop
 8024cd0:	200194e0 	.word	0x200194e0

08024cd4 <tNoise_free>:

void    tNoise_free (tNoise* const ns)
{
    _tNoise* n = *ns;
 8024cd4:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)n, n->mempool);
 8024cd6:	6801      	ldr	r1, [r0, #0]
 8024cd8:	f7ff babe 	b.w	8024258 <mpool_free>

08024cdc <tNoise_tick>:
}

float   tNoise_tick(tNoise* const ns)
{
 8024cdc:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 8024cde:	6804      	ldr	r4, [r0, #0]
    
    float rand = (n->rand() * 2.0f) - 1.0f;
 8024ce0:	6963      	ldr	r3, [r4, #20]
 8024ce2:	4798      	blx	r3
 8024ce4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8024ce8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    
    if (n->type == PinkNoise)
 8024cec:	7923      	ldrb	r3, [r4, #4]
 8024cee:	2b01      	cmp	r3, #1
    float rand = (n->rand() * 2.0f) - 1.0f;
 8024cf0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8024cf4:	eeb0 0a67 	vmov.f32	s0, s15
    if (n->type == PinkNoise)
 8024cf8:	d000      	beq.n	8024cfc <tNoise_tick+0x20>
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 8024cfa:	bd10      	pop	{r4, pc}
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8024cfc:	eddf 7a18 	vldr	s15, [pc, #96]	; 8024d60 <tNoise_tick+0x84>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8024d00:	eddf 6a18 	vldr	s13, [pc, #96]	; 8024d64 <tNoise_tick+0x88>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8024d04:	ee60 7a27 	vmul.f32	s15, s0, s15
 8024d08:	ed94 5a02 	vldr	s10, [r4, #8]
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8024d0c:	ee60 6a26 	vmul.f32	s13, s0, s13
 8024d10:	edd4 5a03 	vldr	s11, [r4, #12]
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8024d14:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8024d68 <tNoise_tick+0x8c>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8024d18:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8024d6c <tNoise_tick+0x90>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8024d1c:	eee5 7a07 	vfma.f32	s15, s10, s14
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8024d20:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8024d70 <tNoise_tick+0x94>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8024d24:	eee5 6a86 	vfma.f32	s13, s11, s12
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8024d28:	edd4 4a04 	vldr	s9, [r4, #16]
 8024d2c:	ee20 7a07 	vmul.f32	s14, s0, s14
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8024d30:	eddf 5a10 	vldr	s11, [pc, #64]	; 8024d74 <tNoise_tick+0x98>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8024d34:	ed9f 5a10 	vldr	s10, [pc, #64]	; 8024d78 <tNoise_tick+0x9c>
        return (tmp * 0.05f);
 8024d38:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8024d7c <tNoise_tick+0xa0>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8024d3c:	eea4 7a85 	vfma.f32	s14, s9, s10
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8024d40:	edc4 7a02 	vstr	s15, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8024d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8024d48:	edc4 6a03 	vstr	s13, [r4, #12]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8024d4c:	eee0 7a25 	vfma.f32	s15, s0, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8024d50:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8024d54:	ee37 0a87 	vadd.f32	s0, s15, s14
        return (tmp * 0.05f);
 8024d58:	ee20 0a06 	vmul.f32	s0, s0, s12
}
 8024d5c:	bd10      	pop	{r4, pc}
 8024d5e:	bf00      	nop
 8024d60:	3dcad8a1 	.word	0x3dcad8a1
 8024d64:	3e97d0ff 	.word	0x3e97d0ff
 8024d68:	3f7f65fe 	.word	0x3f7f65fe
 8024d6c:	3f76872b 	.word	0x3f76872b
 8024d70:	3f86be97 	.word	0x3f86be97
 8024d74:	3e3d3c36 	.word	0x3e3d3c36
 8024d78:	3f11eb85 	.word	0x3f11eb85
 8024d7c:	3d4ccccd 	.word	0x3d4ccccd

08024d80 <tComplexLivingString_initToPool>:
}

void    tComplexLivingString_initToPool    (tComplexLivingString* const pl, float freq, float pickPos, float prepPos, float prepIndex,
                                     float dampFreq, float decay, float targetLev, float levSmoothFactor,
                                     float levStrength, int levMode, tMempool* const mp)
{
 8024d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d84:	ed2d 8b0c 	vpush	{d8-d13}
 8024d88:	b083      	sub	sp, #12
    _tMempool* m = *mp;
 8024d8a:	f8d2 8000 	ldr.w	r8, [r2]
{
 8024d8e:	4606      	mov	r6, r0
    _tComplexLivingString* p = *pl = (_tComplexLivingString*) mpool_alloc(sizeof(_tComplexLivingString), m);
 8024d90:	2070      	movs	r0, #112	; 0x70
{
 8024d92:	9100      	str	r1, [sp, #0]
    _tComplexLivingString* p = *pl = (_tComplexLivingString*) mpool_alloc(sizeof(_tComplexLivingString), m);
 8024d94:	4641      	mov	r1, r8
{
 8024d96:	eef0 8a42 	vmov.f32	s17, s4
 8024d9a:	4615      	mov	r5, r2
 8024d9c:	eef0 9a41 	vmov.f32	s19, s2
    p->mempool = m;

    p->curr=0.0f;
    tExpSmooth_initToPool(&p->wlSmooth, leaf.sampleRate/freq, 0.01, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8024da0:	4f86      	ldr	r7, [pc, #536]	; (8024fbc <tComplexLivingString_initToPool+0x23c>)
{
 8024da2:	eeb0 ba43 	vmov.f32	s22, s6
    tExpSmooth_initToPool(&p->wlSmooth, leaf.sampleRate/freq, 0.01, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8024da6:	ed9f aa86 	vldr	s20, [pc, #536]	; 8024fc0 <tComplexLivingString_initToPool+0x240>
{
 8024daa:	eef0 ba63 	vmov.f32	s23, s7
    p->curr=0.0f;
 8024dae:	eddf ca85 	vldr	s25, [pc, #532]	; 8024fc4 <tComplexLivingString_initToPool+0x244>
{
 8024db2:	eeb0 ca44 	vmov.f32	s24, s8
 8024db6:	eeb0 da61 	vmov.f32	s26, s3
 8024dba:	eef0 da62 	vmov.f32	s27, s5
 8024dbe:	eef0 aa40 	vmov.f32	s21, s0
 8024dc2:	eeb0 9a60 	vmov.f32	s18, s1
    _tComplexLivingString* p = *pl = (_tComplexLivingString*) mpool_alloc(sizeof(_tComplexLivingString), m);
 8024dc6:	f7ff f99f 	bl	8024108 <mpool_alloc>
 8024dca:	4604      	mov	r4, r0
 8024dcc:	6030      	str	r0, [r6, #0]
    tExpSmooth_initToPool(&p->wlSmooth, leaf.sampleRate/freq, 0.01, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8024dce:	4629      	mov	r1, r5
 8024dd0:	eef0 0a4a 	vmov.f32	s1, s20
    p->mempool = m;
 8024dd4:	f8c4 8000 	str.w	r8, [r4]
    tExpSmooth_initToPool(&p->wlSmooth, leaf.sampleRate/freq, 0.01, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8024dd8:	3064      	adds	r0, #100	; 0x64
 8024dda:	ed97 0a00 	vldr	s0, [r7]
 8024dde:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    p->curr=0.0f;
 8024de2:	edc4 ca0a 	vstr	s25, [r4, #40]	; 0x28
    tComplexLivingString_setPickPos(pl, pickPos);
    tComplexLivingString_setPrepPos(pl, prepPos);

    p->prepPos=prepPos;
    p->pickPos=pickPos;
    tLinearDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 8024de6:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
    tExpSmooth_initToPool(&p->wlSmooth, leaf.sampleRate/freq, 0.01, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8024dea:	ee80 0a2a 	vdiv.f32	s0, s0, s21
    tLinearDelay_initToPool(&p->delMF,p->waveLengthInSamples, 2400, mp);
 8024dee:	f104 0a34 	add.w	sl, r4, #52	; 0x34
    tExpSmooth_initToPool(&p->wlSmooth, leaf.sampleRate/freq, 0.01, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8024df2:	f7fd fab9 	bl	8022368 <tExpSmooth_initToPool>
void     tComplexLivingString_setFreq(tComplexLivingString* const pl, float freq)
{    // NOTE: It is faster to set wavelength in samples directly
    _tComplexLivingString* p = *pl;
    if (freq<20.0f) freq=20.0f;
    else if (freq>10000.0f) freq=10000.0f;
    p->waveLengthInSamples = leaf.sampleRate/freq;
 8024df6:	ed97 7a00 	vldr	s14, [r7]
 8024dfa:	eddf 7a73 	vldr	s15, [pc, #460]	; 8024fc8 <tComplexLivingString_initToPool+0x248>
    tLinearDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
 8024dfe:	f104 0240 	add.w	r2, r4, #64	; 0x40
    _tComplexLivingString* p = *pl;
 8024e02:	6833      	ldr	r3, [r6, #0]
    tLinearDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
 8024e04:	f104 0930 	add.w	r9, r4, #48	; 0x30
    p->waveLengthInSamples = leaf.sampleRate/freq;
 8024e08:	feca 7ae7 	vminnm.f32	s15, s21, s15
    tLinearDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
 8024e0c:	9201      	str	r2, [sp, #4]
    p->waveLengthInSamples = leaf.sampleRate/freq;
 8024e0e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8024e12:	f103 0064 	add.w	r0, r3, #100	; 0x64
    tLinearDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
 8024e16:	f104 083c 	add.w	r8, r4, #60	; 0x3c
    tLinearDelay_initToPool(&p->delMB,p->waveLengthInSamples, 2400, mp);
 8024e1a:	f104 0738 	add.w	r7, r4, #56	; 0x38
    p->waveLengthInSamples = leaf.sampleRate/freq;
 8024e1e:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8024e22:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8024e26:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8024e2a:	f7fd fad9 	bl	80223e0 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&p->pickPosSmooth, pickPos, 0.01f, mp); // smoother for pick position
 8024e2e:	4629      	mov	r1, r5
 8024e30:	eef0 0a4a 	vmov.f32	s1, s20
 8024e34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8024e38:	eeb0 0a49 	vmov.f32	s0, s18
    p->freq = freq;
 8024e3c:	edc4 aa01 	vstr	s21, [r4, #4]
    tExpSmooth_initToPool(&p->pickPosSmooth, pickPos, 0.01f, mp); // smoother for pick position
 8024e40:	f7fd fa92 	bl	8022368 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->prepPosSmooth, prepPos, 0.01f, mp); // smoother for pick position
 8024e44:	eef0 0a4a 	vmov.f32	s1, s20
 8024e48:	4629      	mov	r1, r5
 8024e4a:	eeb0 0a69 	vmov.f32	s0, s19
 8024e4e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8024e52:	f7fd fa89 	bl	8022368 <tExpSmooth_initToPool>
 8024e56:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tComplexLivingString_setPickPos(tComplexLivingString* const pl, float pickPos)
{    // between 0 and 1
    _tComplexLivingString* p = *pl;
 8024e5a:	6833      	ldr	r3, [r6, #0]
 8024e5c:	fe89 0a40 	vminnm.f32	s0, s18, s0
    if (pickPos<0.5f) pickPos=0.5f;
    else if (pickPos>1.f) pickPos=1.f;
    p->pickPos = pickPos;
    tExpSmooth_setDest(&p->pickPosSmooth, p->pickPos);
 8024e60:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8024e64:	fe80 0a08 	vmaxnm.f32	s0, s0, s16
    p->pickPos = pickPos;
 8024e68:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->pickPosSmooth, p->pickPos);
 8024e6c:	f7fd fab8 	bl	80223e0 <tExpSmooth_setDest>
}

void     tComplexLivingString_setPrepPos(tComplexLivingString* const pl, float prepPos)
{    // between 0 and 1
    _tComplexLivingString* p = *pl;
 8024e70:	6833      	ldr	r3, [r6, #0]
 8024e72:	fe89 0ac8 	vminnm.f32	s0, s19, s16
 8024e76:	fe80 0a2c 	vmaxnm.f32	s0, s0, s25
    if (prepPos<0.f) prepPos=0.f;
    else if (prepPos>0.5f) prepPos=0.5f;
    p->prepPos = prepPos;
    tExpSmooth_setDest(&p->prepPosSmooth, p->prepPos);
 8024e7a:	f103 006c 	add.w	r0, r3, #108	; 0x6c
    p->prepPos = prepPos;
 8024e7e:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prepPosSmooth, p->prepPos);
 8024e82:	f7fd faad 	bl	80223e0 <tExpSmooth_setDest>
    tLinearDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 8024e86:	4658      	mov	r0, fp
 8024e88:	462a      	mov	r2, r5
 8024e8a:	ed94 0a02 	vldr	s0, [r4, #8]
    p->prepPos=prepPos;
 8024e8e:	edc4 9a04 	vstr	s19, [r4, #16]
    tLinearDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 8024e92:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->pickPos=pickPos;
 8024e96:	ed84 9a03 	vstr	s18, [r4, #12]
    tLinearDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 8024e9a:	f7fa f9fb 	bl	801f294 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delMF,p->waveLengthInSamples, 2400, mp);
 8024e9e:	4650      	mov	r0, sl
 8024ea0:	462a      	mov	r2, r5
 8024ea2:	ed94 0a02 	vldr	s0, [r4, #8]
 8024ea6:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8024eaa:	f7fa f9f3 	bl	801f294 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
 8024eae:	4648      	mov	r0, r9
 8024eb0:	462a      	mov	r2, r5
 8024eb2:	ed94 0a02 	vldr	s0, [r4, #8]
 8024eb6:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8024eba:	f7fa f9eb 	bl	801f294 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
 8024ebe:	4640      	mov	r0, r8
 8024ec0:	462a      	mov	r2, r5
 8024ec2:	ed94 0a02 	vldr	s0, [r4, #8]
 8024ec6:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8024eca:	f7fa f9e3 	bl	801f294 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delMB,p->waveLengthInSamples, 2400, mp);
 8024ece:	4638      	mov	r0, r7
 8024ed0:	462a      	mov	r2, r5
 8024ed2:	ed94 0a02 	vldr	s0, [r4, #8]
 8024ed6:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8024eda:	f7fa f9db 	bl	801f294 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
 8024ede:	9e01      	ldr	r6, [sp, #4]
 8024ee0:	462a      	mov	r2, r5
 8024ee2:	ed94 0a02 	vldr	s0, [r4, #8]
 8024ee6:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8024eea:	4630      	mov	r0, r6
 8024eec:	f7fa f9d2 	bl	801f294 <tLinearDelay_initToPool>
    tLinearDelay_clear(&p->delLF);
 8024ef0:	4658      	mov	r0, fp
 8024ef2:	f7fa fa51 	bl	801f398 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delMF);
 8024ef6:	4650      	mov	r0, sl
 8024ef8:	f7fa fa4e 	bl	801f398 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delUF);
 8024efc:	4648      	mov	r0, r9
 8024efe:	f7fa fa4b 	bl	801f398 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delUB);
 8024f02:	4640      	mov	r0, r8
 8024f04:	f7fa fa48 	bl	801f398 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delMB);
 8024f08:	4638      	mov	r0, r7
 8024f0a:	f7fa fa45 	bl	801f398 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delLB);
 8024f0e:	4630      	mov	r0, r6
 8024f10:	f7fa fa42 	bl	801f398 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 8024f14:	4629      	mov	r1, r5
 8024f16:	eeb0 0a68 	vmov.f32	s0, s17
 8024f1a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    p->dampFreq = dampFreq;
 8024f1e:	edc4 8a07 	vstr	s17, [r4, #28]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 8024f22:	f7fd fb31 	bl	8022588 <tOnePole_initToPool>
    tOnePole_initToPool(&p->nutFilter, dampFreq, mp);
 8024f26:	4629      	mov	r1, r5
 8024f28:	eeb0 0a68 	vmov.f32	s0, s17
 8024f2c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8024f30:	f7fd fb2a 	bl	8022588 <tOnePole_initToPool>
    tOnePole_initToPool(&p->prepFilterU, dampFreq, mp);
 8024f34:	4629      	mov	r1, r5
 8024f36:	eeb0 0a68 	vmov.f32	s0, s17
 8024f3a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8024f3e:	f7fd fb23 	bl	8022588 <tOnePole_initToPool>
    tOnePole_initToPool(&p->prepFilterL, dampFreq, mp);
 8024f42:	4629      	mov	r1, r5
 8024f44:	eeb0 0a68 	vmov.f32	s0, s17
 8024f48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8024f4c:	f7fd fb1c 	bl	8022588 <tOnePole_initToPool>
    tHighpass_initToPool(&p->DCblockerU,13, mp);
 8024f50:	4629      	mov	r1, r5
 8024f52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8024f56:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 8024f5a:	f7fd fd4f 	bl	80229fc <tHighpass_initToPool>
    tHighpass_initToPool(&p->DCblockerL,13, mp);
 8024f5e:	4629      	mov	r1, r5
 8024f60:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8024f64:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 8024f68:	f7fd fd48 	bl	80229fc <tHighpass_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
 8024f6c:	462a      	mov	r2, r5
 8024f6e:	9900      	ldr	r1, [sp, #0]
 8024f70:	eeb0 1a4c 	vmov.f32	s2, s24
 8024f74:	eef0 0a6b 	vmov.f32	s1, s23
 8024f78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024f7c:	eeb0 0a4b 	vmov.f32	s0, s22
    p->decay=decay;
 8024f80:	edc4 da08 	vstr	s27, [r4, #32]
    p->prepIndex = prepIndex;
 8024f84:	ed84 da06 	vstr	s26, [r4, #24]
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
 8024f88:	f7fb f812 	bl	801ffb0 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevL, targetLev, levSmoothFactor, levStrength, levMode, mp);
 8024f8c:	462a      	mov	r2, r5
 8024f8e:	9900      	ldr	r1, [sp, #0]
 8024f90:	eeb0 1a4c 	vmov.f32	s2, s24
 8024f94:	eef0 0a6b 	vmov.f32	s1, s23
 8024f98:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8024f9c:	eeb0 0a4b 	vmov.f32	s0, s22
 8024fa0:	f7fb f806 	bl	801ffb0 <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
 8024fa4:	eddd 7a00 	vldr	s15, [sp]
 8024fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024fac:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 8024fb0:	b003      	add	sp, #12
 8024fb2:	ecbd 8b0c 	vpop	{d8-d13}
 8024fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fba:	bf00      	nop
 8024fbc:	200194e0 	.word	0x200194e0
 8024fc0:	3c23d70a 	.word	0x3c23d70a
 8024fc4:	00000000 	.word	0x00000000
 8024fc8:	461c4000 	.word	0x461c4000

08024fcc <tComplexLivingString_init>:
    tComplexLivingString_initToPool(pl, freq, pickPos, prepPos, prepIndex, dampFreq, decay, targetLev, levSmoothFactor, levStrength, levMode, &leaf.mempool);
 8024fcc:	4a01      	ldr	r2, [pc, #4]	; (8024fd4 <tComplexLivingString_init+0x8>)
 8024fce:	f7ff bed7 	b.w	8024d80 <tComplexLivingString_initToPool>
 8024fd2:	bf00      	nop
 8024fd4:	200194f8 	.word	0x200194f8

08024fd8 <tComplexLivingString_free>:
{
 8024fd8:	b510      	push	{r4, lr}
    _tComplexLivingString* p = *pl;
 8024fda:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_free(&p->wlSmooth);
 8024fdc:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8024fe0:	f7fd f9e8 	bl	80223b4 <tExpSmooth_free>
    tExpSmooth_free(&p->pickPosSmooth);
 8024fe4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8024fe8:	f7fd f9e4 	bl	80223b4 <tExpSmooth_free>
    tExpSmooth_free(&p->prepPosSmooth);
 8024fec:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8024ff0:	f7fd f9e0 	bl	80223b4 <tExpSmooth_free>
    tLinearDelay_free(&p->delLF);
 8024ff4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8024ff8:	f7fa f9c2 	bl	801f380 <tLinearDelay_free>
    tLinearDelay_free(&p->delMF);
 8024ffc:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8025000:	f7fa f9be 	bl	801f380 <tLinearDelay_free>
    tLinearDelay_free(&p->delUF);
 8025004:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8025008:	f7fa f9ba 	bl	801f380 <tLinearDelay_free>
    tLinearDelay_free(&p->delUB);
 802500c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8025010:	f7fa f9b6 	bl	801f380 <tLinearDelay_free>
    tLinearDelay_free(&p->delMB);
 8025014:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8025018:	f7fa f9b2 	bl	801f380 <tLinearDelay_free>
    tLinearDelay_free(&p->delLB);
 802501c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8025020:	f7fa f9ae 	bl	801f380 <tLinearDelay_free>
    tOnePole_free(&p->bridgeFilter);
 8025024:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8025028:	f7fd fae4 	bl	80225f4 <tOnePole_free>
    tOnePole_free(&p->nutFilter);
 802502c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8025030:	f7fd fae0 	bl	80225f4 <tOnePole_free>
    tOnePole_free(&p->prepFilterU);
 8025034:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8025038:	f7fd fadc 	bl	80225f4 <tOnePole_free>
    tOnePole_free(&p->prepFilterL);
 802503c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8025040:	f7fd fad8 	bl	80225f4 <tOnePole_free>
    tHighpass_free(&p->DCblockerU);
 8025044:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025048:	f7fd fcf8 	bl	8022a3c <tHighpass_free>
    tHighpass_free(&p->DCblockerL);
 802504c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8025050:	f7fd fcf4 	bl	8022a3c <tHighpass_free>
    tFeedbackLeveler_free(&p->fbLevU);
 8025054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025058:	f7fa ffd2 	bl	8020000 <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&p->fbLevL);
 802505c:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8025060:	f7fa ffce 	bl	8020000 <tFeedbackLeveler_free>
    mpool_free((char*)p, p->mempool);
 8025064:	6821      	ldr	r1, [r4, #0]
 8025066:	4620      	mov	r0, r4
}
 8025068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 802506c:	f7ff b8f4 	b.w	8024258 <mpool_free>

08025070 <tComplexLivingString_setFreq>:
    p->waveLengthInSamples = leaf.sampleRate/freq;
 8025070:	4b09      	ldr	r3, [pc, #36]	; (8025098 <tComplexLivingString_setFreq+0x28>)
 8025072:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8025076:	eddf 7a09 	vldr	s15, [pc, #36]	; 802509c <tComplexLivingString_setFreq+0x2c>
 802507a:	ed93 7a00 	vldr	s14, [r3]
 802507e:	fec0 7a67 	vminnm.f32	s15, s0, s15
 8025082:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8025086:	ee87 0a27 	vdiv.f32	s0, s14, s15
    _tComplexLivingString* p = *pl;
 802508a:	6803      	ldr	r3, [r0, #0]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 802508c:	f103 0064 	add.w	r0, r3, #100	; 0x64
    p->waveLengthInSamples = leaf.sampleRate/freq;
 8025090:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8025094:	f7fd b9a4 	b.w	80223e0 <tExpSmooth_setDest>
 8025098:	200194e0 	.word	0x200194e0
 802509c:	461c4000 	.word	0x461c4000

080250a0 <tComplexLivingString_setPickPos>:
{    // between 0 and 1
 80250a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tComplexLivingString* p = *pl;
 80250a4:	6803      	ldr	r3, [r0, #0]
 80250a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    tExpSmooth_setDest(&p->pickPosSmooth, p->pickPos);
 80250aa:	f103 0068 	add.w	r0, r3, #104	; 0x68
 80250ae:	fe80 0a67 	vminnm.f32	s0, s0, s15
 80250b2:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    p->pickPos = pickPos;
 80250b6:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->pickPosSmooth, p->pickPos);
 80250ba:	f7fd b991 	b.w	80223e0 <tExpSmooth_setDest>
 80250be:	bf00      	nop

080250c0 <tComplexLivingString_setPrepPos>:
{    // between 0 and 1
 80250c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    _tComplexLivingString* p = *pl;
 80250c4:	6803      	ldr	r3, [r0, #0]
 80250c6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80250e0 <tComplexLivingString_setPrepPos+0x20>
    tExpSmooth_setDest(&p->prepPosSmooth, p->prepPos);
 80250ca:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80250ce:	fe80 0a67 	vminnm.f32	s0, s0, s15
 80250d2:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    p->prepPos = prepPos;
 80250d6:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prepPosSmooth, p->prepPos);
 80250da:	f7fd b981 	b.w	80223e0 <tExpSmooth_setDest>
 80250de:	bf00      	nop
 80250e0:	00000000 	.word	0x00000000

080250e4 <tComplexLivingString_setPrepIndex>:
}

void     tComplexLivingString_setPrepIndex(tComplexLivingString* const pl, float prepIndex)
{    // between 0 and 1
 80250e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tComplexLivingString* p = *pl;
 80250e8:	6803      	ldr	r3, [r0, #0]
    if (prepIndex<0.f) prepIndex=0.f;
    else if (prepIndex>1.f) prepIndex=1.f;
    p->prepIndex = prepIndex;
 80250ea:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80250fc <tComplexLivingString_setPrepIndex+0x18>
 80250ee:	fe80 0a67 	vminnm.f32	s0, s0, s15
 80250f2:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 80250f6:	ed83 0a06 	vstr	s0, [r3, #24]
}
 80250fa:	4770      	bx	lr
 80250fc:	00000000 	.word	0x00000000

08025100 <tComplexLivingString_setDampFreq>:

void     tComplexLivingString_setDampFreq(tComplexLivingString* const pl, float dampFreq)
{
 8025100:	b510      	push	{r4, lr}
 8025102:	ed2d 8b02 	vpush	{d8}
 8025106:	eeb0 8a40 	vmov.f32	s16, s0
    _tComplexLivingString* p = *pl;
 802510a:	6804      	ldr	r4, [r0, #0]
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 802510c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8025110:	f7fd fa74 	bl	80225fc <tOnePole_setFreq>
    tOnePole_setFreq(&p->nutFilter, dampFreq);
 8025114:	eeb0 0a48 	vmov.f32	s0, s16
 8025118:	f104 0048 	add.w	r0, r4, #72	; 0x48
 802511c:	f7fd fa6e 	bl	80225fc <tOnePole_setFreq>
    tOnePole_setFreq(&p->prepFilterU, dampFreq);
 8025120:	eeb0 0a48 	vmov.f32	s0, s16
 8025124:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8025128:	f7fd fa68 	bl	80225fc <tOnePole_setFreq>
    tOnePole_setFreq(&p->prepFilterL, dampFreq);
 802512c:	eeb0 0a48 	vmov.f32	s0, s16
 8025130:	f104 0050 	add.w	r0, r4, #80	; 0x50
}
 8025134:	ecbd 8b02 	vpop	{d8}
 8025138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tOnePole_setFreq(&p->prepFilterL, dampFreq);
 802513c:	f7fd ba5e 	b.w	80225fc <tOnePole_setFreq>

08025140 <tComplexLivingString_setDecay>:

void     tComplexLivingString_setDecay(tComplexLivingString* const pl, float decay)
{
    _tComplexLivingString* p = *pl;
 8025140:	6803      	ldr	r3, [r0, #0]
    p->decay=decay;
 8025142:	ed83 0a08 	vstr	s0, [r3, #32]
}
 8025146:	4770      	bx	lr

08025148 <tComplexLivingString_setTargetLev>:

void     tComplexLivingString_setTargetLev(tComplexLivingString* const pl, float targetLev)
{
 8025148:	b510      	push	{r4, lr}
 802514a:	ed2d 8b02 	vpush	{d8}
 802514e:	eeb0 8a40 	vmov.f32	s16, s0
    _tComplexLivingString* p = *pl;
 8025152:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLevU, targetLev);
 8025154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025158:	f7fa ff8a 	bl	8020070 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
 802515c:	eeb0 0a48 	vmov.f32	s0, s16
 8025160:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
 8025164:	ecbd 8b02 	vpop	{d8}
 8025168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
 802516c:	f7fa bf80 	b.w	8020070 <tFeedbackLeveler_setTargetLevel>

08025170 <tComplexLivingString_setLevMode>:
    tFeedbackLeveler_setStrength(&p->fbLevU, levStrength);
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
}

void     tComplexLivingString_setLevMode(tComplexLivingString* const pl, int levMode)
{
 8025170:	b510      	push	{r4, lr}
    _tComplexLivingString* p = *pl;
 8025172:	6804      	ldr	r4, [r0, #0]
{
 8025174:	b082      	sub	sp, #8
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
 8025176:	f104 005c 	add.w	r0, r4, #92	; 0x5c
{
 802517a:	9101      	str	r1, [sp, #4]
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
 802517c:	f7fa ff4c 	bl	8020018 <tFeedbackLeveler_setMode>
    tFeedbackLeveler_setMode(&p->fbLevL, levMode);
 8025180:	9901      	ldr	r1, [sp, #4]
 8025182:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8025186:	f7fa ff47 	bl	8020018 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 802518a:	eddd 7a01 	vldr	s15, [sp, #4]
 802518e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025192:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 8025196:	b002      	add	sp, #8
 8025198:	bd10      	pop	{r4, pc}
 802519a:	bf00      	nop

0802519c <tComplexLivingString_tick>:

float   tComplexLivingString_tick(tComplexLivingString* const pl, float input)
{
 802519c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251a0:	ed2d 8b08 	vpush	{d8-d11}
    _tComplexLivingString* p = *pl;
 80251a4:	6804      	ldr	r4, [r0, #0]
{
 80251a6:	eef0 8a40 	vmov.f32	s17, s0

    // from pickPos upwards=forwards
    float fromLF=tLinearDelay_tickOut(&p->delLF);
 80251aa:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
    float fromMF=tLinearDelay_tickOut(&p->delMF);
 80251ae:	f104 0834 	add.w	r8, r4, #52	; 0x34
    float fromUF=tLinearDelay_tickOut(&p->delUF);
 80251b2:	f104 0630 	add.w	r6, r4, #48	; 0x30
    float fromUB=tLinearDelay_tickOut(&p->delUB);
 80251b6:	f104 053c 	add.w	r5, r4, #60	; 0x3c
    float fromLF=tLinearDelay_tickOut(&p->delLF);
 80251ba:	4650      	mov	r0, sl
    float fromMB=tLinearDelay_tickOut(&p->delMB);
 80251bc:	f104 0738 	add.w	r7, r4, #56	; 0x38
    float fromLF=tLinearDelay_tickOut(&p->delLF);
 80251c0:	f7fa f946 	bl	801f450 <tLinearDelay_tickOut>
    float fromMF=tLinearDelay_tickOut(&p->delMF);
 80251c4:	4640      	mov	r0, r8
    float fromLF=tLinearDelay_tickOut(&p->delLF);
 80251c6:	eeb0 9a40 	vmov.f32	s18, s0
    float fromMF=tLinearDelay_tickOut(&p->delMF);
 80251ca:	f7fa f941 	bl	801f450 <tLinearDelay_tickOut>
    float fromUF=tLinearDelay_tickOut(&p->delUF);
 80251ce:	4630      	mov	r0, r6
    float fromLB=tLinearDelay_tickOut(&p->delLB);
 80251d0:	f104 0940 	add.w	r9, r4, #64	; 0x40
    float fromMF=tLinearDelay_tickOut(&p->delMF);
 80251d4:	eef0 aa40 	vmov.f32	s21, s0
    float fromUF=tLinearDelay_tickOut(&p->delUF);
 80251d8:	f7fa f93a 	bl	801f450 <tLinearDelay_tickOut>
    float fromUB=tLinearDelay_tickOut(&p->delUB);
 80251dc:	4628      	mov	r0, r5
    float fromUF=tLinearDelay_tickOut(&p->delUF);
 80251de:	eef0 9a40 	vmov.f32	s19, s0
    float fromUB=tLinearDelay_tickOut(&p->delUB);
 80251e2:	f7fa f935 	bl	801f450 <tLinearDelay_tickOut>
    float fromMB=tLinearDelay_tickOut(&p->delMB);
 80251e6:	4638      	mov	r0, r7
    float fromUB=tLinearDelay_tickOut(&p->delUB);
 80251e8:	eeb0 aa40 	vmov.f32	s20, s0
    float fromMB=tLinearDelay_tickOut(&p->delMB);
 80251ec:	f7fa f930 	bl	801f450 <tLinearDelay_tickOut>
    float fromLB=tLinearDelay_tickOut(&p->delLB);
 80251f0:	4648      	mov	r0, r9
    float fromMB=tLinearDelay_tickOut(&p->delMB);
 80251f2:	eef0 ba40 	vmov.f32	s23, s0
    float fromLB=tLinearDelay_tickOut(&p->delLB);
 80251f6:	f7fa f92b 	bl	801f450 <tLinearDelay_tickOut>

    // into upper part of string, from bridge, going backwards
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1)*tHighpass_tick(&p->DCblockerU, tOnePole_tick(&p->bridgeFilter, fromUF)));
 80251fa:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    float fromLB=tLinearDelay_tickOut(&p->delLB);
 80251fe:	eeb0 ba40 	vmov.f32	s22, s0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1)*tHighpass_tick(&p->DCblockerU, tOnePole_tick(&p->bridgeFilter, fromUF)));
 8025202:	f104 0b5c 	add.w	fp, r4, #92	; 0x5c
 8025206:	eef5 7a40 	vcmp.f32	s15, #0.0
 802520a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 802520e:	eeb0 0a69 	vmov.f32	s0, s19
 8025212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025216:	bf14      	ite	ne
 8025218:	eeb7 8a00 	vmovne.f32	s16, #112	; 0x3f800000  1.0
 802521c:	ed94 8a08 	vldreq	s16, [r4, #32]
 8025220:	f7fd fa08 	bl	8022634 <tOnePole_tick>
 8025224:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025228:	f7fd fc1c 	bl	8022a64 <tHighpass_tick>
 802522c:	4658      	mov	r0, fp
 802522e:	ee20 0a08 	vmul.f32	s0, s0, s16
    float fromLowerPrep=-tOnePole_tick(&p->prepFilterL, fromLF);
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromMB;
    tLinearDelay_tickIn(&p->delLB, intoLower);

    // into lower part of string, from nut, going forwards toward prep position
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tOnePole_tick(&p->nutFilter, fromLB)));
 8025232:	f104 0b60 	add.w	fp, r4, #96	; 0x60
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1)*tHighpass_tick(&p->DCblockerU, tOnePole_tick(&p->bridgeFilter, fromUF)));
 8025236:	f7fa fef3 	bl	8020020 <tFeedbackLeveler_tick>
 802523a:	eef1 9a40 	vneg.f32	s19, s0
    tLinearDelay_tickIn(&p->delUB, fromBridge);
 802523e:	4628      	mov	r0, r5
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromMB;
 8025240:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    tLinearDelay_tickIn(&p->delUB, fromBridge);
 8025244:	eeb0 0a69 	vmov.f32	s0, s19
 8025248:	f7fa f8ee 	bl	801f428 <tLinearDelay_tickIn>
    tLinearDelay_tickIn(&p->delMB, fromUB+input);
 802524c:	ee3a 0a28 	vadd.f32	s0, s20, s17
 8025250:	4638      	mov	r0, r7
 8025252:	f7fa f8e9 	bl	801f428 <tLinearDelay_tickIn>
    float fromLowerPrep=-tOnePole_tick(&p->prepFilterL, fromLF);
 8025256:	eeb0 0a49 	vmov.f32	s0, s18
 802525a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802525e:	f7fd f9e9 	bl	8022634 <tOnePole_tick>
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromMB;
 8025262:	ed94 7a06 	vldr	s14, [r4, #24]
    tLinearDelay_tickIn(&p->delLB, intoLower);
 8025266:	4648      	mov	r0, r9
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromMB;
 8025268:	ee78 7a47 	vsub.f32	s15, s16, s14
 802526c:	ee67 7aab 	vmul.f32	s15, s15, s23
    tLinearDelay_tickIn(&p->delLB, intoLower);
 8025270:	eee0 7a47 	vfms.f32	s15, s0, s14
 8025274:	eeb0 0a67 	vmov.f32	s0, s15
 8025278:	f7fa f8d6 	bl	801f428 <tLinearDelay_tickIn>
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tOnePole_tick(&p->nutFilter, fromLB)));
 802527c:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8025280:	eeb0 0a4b 	vmov.f32	s0, s22
 8025284:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8025288:	eef5 7a40 	vcmp.f32	s15, #0.0
 802528c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025290:	bf08      	it	eq
 8025292:	ed94 8a08 	vldreq	s16, [r4, #32]
 8025296:	f7fd f9cd 	bl	8022634 <tOnePole_tick>
 802529a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 802529e:	f7fd fbe1 	bl	8022a64 <tHighpass_tick>
 80252a2:	4658      	mov	r0, fp
 80252a4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80252a8:	f7fa feba 	bl	8020020 <tFeedbackLeveler_tick>
    tLinearDelay_tickIn(&p->delLF, fromNut);
 80252ac:	4650      	mov	r0, sl
 80252ae:	eeb1 0a40 	vneg.f32	s0, s0
 80252b2:	f7fa f8b9 	bl	801f428 <tLinearDelay_tickIn>

    // into middle part of string, from prep going toward pick position
    float fromUpperPrep=-tOnePole_tick(&p->prepFilterU, fromUB);
    float intoMiddle=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 80252b6:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    float fromUpperPrep=-tOnePole_tick(&p->prepFilterU, fromUB);
 80252ba:	eeb0 0a4a 	vmov.f32	s0, s20
 80252be:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80252c2:	f7fd f9b7 	bl	8022634 <tOnePole_tick>
    float intoMiddle=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 80252c6:	edd4 7a06 	vldr	s15, [r4, #24]

    //pick position, take input and add it into the waveguide, going to come out of middle segment
    tLinearDelay_tickIn(&p->delMF, intoMiddle + input);
 80252ca:	4640      	mov	r0, r8
    float intoMiddle=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 80252cc:	ee38 7a67 	vsub.f32	s14, s16, s15
    tLinearDelay_tickIn(&p->delMF, intoMiddle + input);
 80252d0:	eee7 8a09 	vfma.f32	s17, s14, s18
 80252d4:	eee0 8a67 	vfms.f32	s17, s0, s15
 80252d8:	eeb0 0a68 	vmov.f32	s0, s17
 80252dc:	f7fa f8a4 	bl	801f428 <tLinearDelay_tickIn>

    //take output of middle segment and put it into upper segment connecting to the bridge
    tLinearDelay_tickIn(&p->delUF, fromMF);
 80252e0:	eeb0 0a6a 	vmov.f32	s0, s21
 80252e4:	4630      	mov	r0, r6
 80252e6:	f7fa f89f 	bl	801f428 <tLinearDelay_tickIn>

    // update all delay lengths
    float pickP=tExpSmooth_tick(&p->pickPosSmooth);
 80252ea:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80252ee:	f7fd f881 	bl	80223f4 <tExpSmooth_tick>
    float prepP=tExpSmooth_tick(&p->prepPosSmooth);
 80252f2:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    float pickP=tExpSmooth_tick(&p->pickPosSmooth);
 80252f6:	eeb0 9a40 	vmov.f32	s18, s0
    float prepP=tExpSmooth_tick(&p->prepPosSmooth);
 80252fa:	f7fd f87b 	bl	80223f4 <tExpSmooth_tick>
 80252fe:	eef0 8a40 	vmov.f32	s17, s0
    float wLen=tExpSmooth_tick(&p->wlSmooth);
 8025302:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8025306:	f7fd f875 	bl	80223f4 <tExpSmooth_tick>
 802530a:	eef0 7a40 	vmov.f32	s15, s0

    float midLen = (pickP-prepP) * wLen; // the length between the pick and the prep;
    float lowLen = prepP*wLen; // the length from prep to nut
    float upLen = (1.0f-pickP)*wLen; // the length from pick to bridge
 802530e:	ee38 8a49 	vsub.f32	s16, s16, s18


    tLinearDelay_setDelay(&p->delLF, lowLen);
 8025312:	4650      	mov	r0, sl
    float lowLen = prepP*wLen; // the length from prep to nut
 8025314:	ee28 aa80 	vmul.f32	s20, s17, s0
    float midLen = (pickP-prepP) * wLen; // the length between the pick and the prep;
 8025318:	ee79 8a68 	vsub.f32	s17, s18, s17
    float upLen = (1.0f-pickP)*wLen; // the length from pick to bridge
 802531c:	ee28 8a00 	vmul.f32	s16, s16, s0
    tLinearDelay_setDelay(&p->delLF, lowLen);
 8025320:	eeb0 0a4a 	vmov.f32	s0, s20
    float midLen = (pickP-prepP) * wLen; // the length between the pick and the prep;
 8025324:	ee68 8aa7 	vmul.f32	s17, s17, s15
    tLinearDelay_setDelay(&p->delLF, lowLen);
 8025328:	f7fa f8bc 	bl	801f4a4 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delLB, lowLen);
 802532c:	eeb0 0a4a 	vmov.f32	s0, s20
 8025330:	4648      	mov	r0, r9
 8025332:	f7fa f8b7 	bl	801f4a4 <tLinearDelay_setDelay>

    tLinearDelay_setDelay(&p->delMF, midLen);
 8025336:	4640      	mov	r0, r8
 8025338:	eeb0 0a68 	vmov.f32	s0, s17
 802533c:	f7fa f8b2 	bl	801f4a4 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delMB, midLen);
 8025340:	eeb0 0a68 	vmov.f32	s0, s17
 8025344:	4638      	mov	r0, r7
 8025346:	f7fa f8ad 	bl	801f4a4 <tLinearDelay_setDelay>

    tLinearDelay_setDelay(&p->delUF, upLen);
 802534a:	eeb0 0a48 	vmov.f32	s0, s16
 802534e:	4630      	mov	r0, r6
 8025350:	f7fa f8a8 	bl	801f4a4 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delUB, upLen);
 8025354:	eeb0 0a48 	vmov.f32	s0, s16
 8025358:	4628      	mov	r0, r5
 802535a:	f7fa f8a3 	bl	801f4a4 <tLinearDelay_setDelay>

    //update this to allow pickup position variation
    p->curr = fromBridge;
    return p->curr;
}
 802535e:	eeb0 0a69 	vmov.f32	s0, s19
    p->curr = fromBridge;
 8025362:	edc4 9a0a 	vstr	s19, [r4, #40]	; 0x28
}
 8025366:	ecbd 8b08 	vpop	{d8-d11}
 802536a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802536e:	bf00      	nop

08025370 <tNReverb_initToPool>:
{
    tNReverb_initToPool(rev, t60, &leaf.mempool);
}

void    tNReverb_initToPool     (tNReverb* const rev, float t60, tMempool* const mp)
{
 8025370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025374:	ed2d 8b06 	vpush	{d8-d10}
 8025378:	eeb0 aa40 	vmov.f32	s20, s0
 802537c:	b095      	sub	sp, #84	; 0x54
    _tMempool* m = *mp;
 802537e:	680c      	ldr	r4, [r1, #0]
{
 8025380:	4605      	mov	r5, r0
 8025382:	9101      	str	r1, [sp, #4]
 8025384:	9002      	str	r0, [sp, #8]
    _tNReverb* r = *rev = (_tNReverb*) mpool_alloc(sizeof(_tNReverb), m);
 8025386:	4621      	mov	r1, r4
 8025388:	2074      	movs	r0, #116	; 0x74
 802538a:	f7fe febd 	bl	8024108 <mpool_alloc>
    r->mempool = m;
    
    if (t60 <= 0.0f) t60 = 0.001f;
 802538e:	eeb5 aac0 	vcmpe.f32	s20, #0.0
    _tNReverb* r = *rev = (_tNReverb*) mpool_alloc(sizeof(_tNReverb), m);
 8025392:	6028      	str	r0, [r5, #0]
 8025394:	4682      	mov	sl, r0
    r->mempool = m;
 8025396:	6004      	str	r4, [r0, #0]
    if (t60 <= 0.0f) t60 = 0.001f;
 8025398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802539c:	f240 80c6 	bls.w	802552c <tNReverb_initToPool+0x1bc>
 80253a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80253a4:	ee87 8a8a 	vdiv.f32	s16, s15, s20
    
    r->inv_441 = 1.0f/44100.0f;
    
    int lengths[15] = {1433, 1601, 1867, 2053, 2251, 2399, 347, 113, 37, 59, 53, 43, 37, 29, 19}; // Delay lengths for 44100 Hz sample rate.
    double scaler = leaf.sampleRate / 25641.0f;
 80253a8:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8025560 <tNReverb_initToPool+0x1f0>
    int lengths[15] = {1433, 1601, 1867, 2053, 2251, 2399, 347, 113, 37, 59, 53, 43, 37, 29, 19}; // Delay lengths for 44100 Hz sample rate.
 80253ac:	af05      	add	r7, sp, #20
 80253ae:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8025564 <tNReverb_initToPool+0x1f4>
 80253b2:	ac04      	add	r4, sp, #16
    double scaler = leaf.sampleRate / 25641.0f;
 80253b4:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8025548 <tNReverb_initToPool+0x1d8>
 80253b8:	f10d 0914 	add.w	r9, sp, #20
 80253bc:	edd8 7a00 	vldr	s15, [r8]
    int lengths[15] = {1433, 1601, 1867, 2053, 2251, 2399, 347, 113, 37, 59, 53, 43, 37, 29, 19}; // Delay lengths for 44100 Hz sample rate.
 80253c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    double scaler = leaf.sampleRate / 25641.0f;
 80253c4:	ee67 7a87 	vmul.f32	s15, s15, s14
    int lengths[15] = {1433, 1601, 1867, 2053, 2251, 2399, 347, 113, 37, 59, 53, 43, 37, 29, 19}; // Delay lengths for 44100 Hz sample rate.
 80253c8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80253ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80253ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80253d2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80253d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80253d8:	ee17 ba90 	vmov	fp, s15
 80253dc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    r->inv_441 = 1.0f/44100.0f;
 80253de:	4b5b      	ldr	r3, [pc, #364]	; (802554c <tNReverb_initToPool+0x1dc>)
    int lengths[15] = {1433, 1601, 1867, 2053, 2251, 2399, 347, 113, 37, 59, 53, 43, 37, 29, 19}; // Delay lengths for 44100 Hz sample rate.
 80253e0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    r->inv_441 = 1.0f/44100.0f;
 80253e4:	f8ca 3010 	str.w	r3, [sl, #16]
    int lengths[15] = {1433, 1601, 1867, 2053, 2251, 2399, 347, 113, 37, 59, 53, 43, 37, 29, 19}; // Delay lengths for 44100 Hz sample rate.
 80253e8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    
    int delay, i;
    
    for (i=0; i < 15; i++)
    {
        delay = (int) scaler * lengths[i];
 80253ec:	f854 5f04 	ldr.w	r5, [r4, #4]!
 80253f0:	fb05 f50b 	mul.w	r5, r5, fp
        if ( (delay & 1) == 0)
 80253f4:	07eb      	lsls	r3, r5, #31
            delay++;
 80253f6:	bf58      	it	pl
 80253f8:	3501      	addpl	r5, #1
 80253fa:	462e      	mov	r6, r5
 80253fc:	17ef      	asrs	r7, r5, #31
 80253fe:	e000      	b.n	8025402 <tNReverb_initToPool+0x92>
        while ( !LEAF_isPrime(delay) )
            delay += 2;
 8025400:	3502      	adds	r5, #2
        while ( !LEAF_isPrime(delay) )
 8025402:	4630      	mov	r0, r6
 8025404:	3602      	adds	r6, #2
 8025406:	4639      	mov	r1, r7
 8025408:	f147 0700 	adc.w	r7, r7, #0
 802540c:	f7fe fc9c 	bl	8023d48 <LEAF_isPrime>
 8025410:	2800      	cmp	r0, #0
 8025412:	d0f5      	beq.n	8025400 <tNReverb_initToPool+0x90>
    for (i=0; i < 15; i++)
 8025414:	ab13      	add	r3, sp, #76	; 0x4c
        lengths[i] = delay;
 8025416:	6025      	str	r5, [r4, #0]
    for (i=0; i < 15; i++)
 8025418:	429c      	cmp	r4, r3
 802541a:	d1e7      	bne.n	80253ec <tNReverb_initToPool+0x7c>
 802541c:	f10a 0750 	add.w	r7, sl, #80	; 0x50
 8025420:	f10a 0668 	add.w	r6, sl, #104	; 0x68
 8025424:	f8dd b004 	ldr.w	fp, [sp, #4]
 8025428:	9403      	str	r4, [sp, #12]
    }
    
    for ( i=0; i<6; i++ )
    {
        tLinearDelay_initToPool(&r->combDelays[i], lengths[i], lengths[i] * 2.0f, mp);
 802542a:	f859 5b04 	ldr.w	r5, [r9], #4
 802542e:	f1a7 041c 	sub.w	r4, r7, #28
 8025432:	465a      	mov	r2, fp
 8025434:	ee07 5a90 	vmov	s15, r5
 8025438:	4620      	mov	r0, r4
        tLinearDelay_clear(&r->combDelays[i]);
        r->combCoeffs[i] = pow(10.0, (-3 * lengths[i] * leaf.invSampleRate / t60));
 802543a:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
        tLinearDelay_initToPool(&r->combDelays[i], lengths[i], lengths[i] * 2.0f, mp);
 802543e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8025442:	ee70 7a00 	vadd.f32	s15, s0, s0
 8025446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802544a:	ee17 1a90 	vmov	r1, s15
 802544e:	f7f9 ff21 	bl	801f294 <tLinearDelay_initToPool>
        tLinearDelay_clear(&r->combDelays[i]);
 8025452:	4620      	mov	r0, r4
 8025454:	f7f9 ffa0 	bl	801f398 <tLinearDelay_clear>
        r->combCoeffs[i] = pow(10.0, (-3 * lengths[i] * leaf.invSampleRate / t60));
 8025458:	edd8 7a01 	vldr	s15, [r8, #4]
 802545c:	ee07 5a10 	vmov	s14, r5
 8025460:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8025464:	ee68 7a27 	vmul.f32	s15, s16, s15
 8025468:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
 802546c:	ee21 1a27 	vmul.f32	s2, s2, s15
 8025470:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 8025474:	f002 fa1c 	bl	80278b0 <pow>
 8025478:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802547c:	eca7 0a01 	vstmia	r7!, {s0}
    for ( i=0; i<6; i++ )
 8025480:	42be      	cmp	r6, r7
 8025482:	d1d2      	bne.n	802542a <tNReverb_initToPool+0xba>
 8025484:	9c03      	ldr	r4, [sp, #12]
 8025486:	af0b      	add	r7, sp, #44	; 0x2c
 8025488:	f10a 0514 	add.w	r5, sl, #20
 802548c:	9e01      	ldr	r6, [sp, #4]
    }
    
    for ( i=0; i<8; i++ )
    {
        tLinearDelay_initToPool(&r->allpassDelays[i], lengths[i+6], lengths[i+6] * 2.0f, mp);
 802548e:	ecb7 0a01 	vldmia	r7!, {s0}
 8025492:	4628      	mov	r0, r5
 8025494:	4632      	mov	r2, r6
 8025496:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 802549a:	ee70 7a00 	vadd.f32	s15, s0, s0
 802549e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80254a2:	ee17 1a90 	vmov	r1, s15
 80254a6:	f7f9 fef5 	bl	801f294 <tLinearDelay_initToPool>
        tLinearDelay_clear(&r->allpassDelays[i]);
 80254aa:	4628      	mov	r0, r5
 80254ac:	f7f9 ff74 	bl	801f398 <tLinearDelay_clear>
    for ( i=0; i<8; i++ )
 80254b0:	42bc      	cmp	r4, r7
 80254b2:	f105 0504 	add.w	r5, r5, #4
 80254b6:	d1ea      	bne.n	802548e <tNReverb_initToPool+0x11e>

void    tNReverb_setT60(tNReverb* const rev, float t60)
{
    _tNReverb* r = *rev;
    
    if (t60 <= 0.0f)           t60 = 0.001f;
 80254b8:	eeb5 aac0 	vcmpe.f32	s20, #0.0
    _tNReverb* r = *rev;
 80254bc:	9b02      	ldr	r3, [sp, #8]
 80254be:	681b      	ldr	r3, [r3, #0]
    if (t60 <= 0.0f)           t60 = 0.001f;
 80254c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80254c4:	d937      	bls.n	8025536 <tNReverb_initToPool+0x1c6>
 80254c6:	eeb7 7aca 	vcvt.f64.f32	d7, s20
 80254ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80254ce:	ee86 9b07 	vdiv.f64	d9, d6, d7
 80254d2:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80254d6:	f103 0568 	add.w	r5, r3, #104	; 0x68
    
    r->t60 = t60;
 80254da:	ed83 aa02 	vstr	s20, [r3, #8]
    
    for (int i=0; i<6; i++)   r->combCoeffs[i] = pow(10.0, (-3.0 * tLinearDelay_getDelay(&r->combDelays[i]) * leaf.invSampleRate / t60 ));
 80254de:	eeb8 8b08 	vmov.f64	d8, #136	; 0xc0400000 -3.0
 80254e2:	f1a4 001c 	sub.w	r0, r4, #28
 80254e6:	f7fa f81d 	bl	801f524 <tLinearDelay_getDelay>
 80254ea:	ed98 7a01 	vldr	s14, [r8, #4]
 80254ee:	eeb7 1ac0 	vcvt.f64.f32	d1, s0
 80254f2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80254f6:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80254fa:	ee27 7b08 	vmul.f64	d7, d7, d8
 80254fe:	ee27 7b09 	vmul.f64	d7, d7, d9
 8025502:	ee27 1b01 	vmul.f64	d1, d7, d1
 8025506:	f002 f9d3 	bl	80278b0 <pow>
 802550a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802550e:	eca4 0a01 	vstmia	r4!, {s0}
 8025512:	42a5      	cmp	r5, r4
 8025514:	d1e5      	bne.n	80254e2 <tNReverb_initToPool+0x172>
    r->allpassCoeff = 0.7f;
 8025516:	4a0e      	ldr	r2, [pc, #56]	; (8025550 <tNReverb_initToPool+0x1e0>)
    r->mix = 0.3f;
 8025518:	4b0e      	ldr	r3, [pc, #56]	; (8025554 <tNReverb_initToPool+0x1e4>)
    r->allpassCoeff = 0.7f;
 802551a:	f8ca 204c 	str.w	r2, [sl, #76]	; 0x4c
    r->mix = 0.3f;
 802551e:	f8ca 3004 	str.w	r3, [sl, #4]
}
 8025522:	b015      	add	sp, #84	; 0x54
 8025524:	ecbd 8b06 	vpop	{d8-d10}
 8025528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802552c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8025558 <tNReverb_initToPool+0x1e8>
    if (t60 <= 0.0f) t60 = 0.001f;
 8025530:	ed9f aa0a 	vldr	s20, [pc, #40]	; 802555c <tNReverb_initToPool+0x1ec>
 8025534:	e738      	b.n	80253a8 <tNReverb_initToPool+0x38>
    if (t60 <= 0.0f)           t60 = 0.001f;
 8025536:	ed9f 9b02 	vldr	d9, [pc, #8]	; 8025540 <tNReverb_initToPool+0x1d0>
 802553a:	ed9f aa08 	vldr	s20, [pc, #32]	; 802555c <tNReverb_initToPool+0x1ec>
 802553e:	e7c8      	b.n	80254d2 <tNReverb_initToPool+0x162>
 8025540:	e7190014 	.word	0xe7190014
 8025544:	408f3fff 	.word	0x408f3fff
 8025548:	382393f9 	.word	0x382393f9
 802554c:	37be37c6 	.word	0x37be37c6
 8025550:	3f333333 	.word	0x3f333333
 8025554:	3e99999a 	.word	0x3e99999a
 8025558:	4479ffff 	.word	0x4479ffff
 802555c:	3a83126f 	.word	0x3a83126f
 8025560:	200194e0 	.word	0x200194e0
 8025564:	0802be40 	.word	0x0802be40

08025568 <tNReverb_init>:
    tNReverb_initToPool(rev, t60, &leaf.mempool);
 8025568:	4901      	ldr	r1, [pc, #4]	; (8025570 <tNReverb_init+0x8>)
 802556a:	f7ff bf01 	b.w	8025370 <tNReverb_initToPool>
 802556e:	bf00      	nop
 8025570:	200194f8 	.word	0x200194f8

08025574 <tNReverb_free>:
{
 8025574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tNReverb* r = *rev;
 8025576:	6807      	ldr	r7, [r0, #0]
 8025578:	f107 0534 	add.w	r5, r7, #52	; 0x34
 802557c:	f107 064c 	add.w	r6, r7, #76	; 0x4c
 8025580:	462c      	mov	r4, r5
        tLinearDelay_free(&r->combDelays[i]);
 8025582:	4620      	mov	r0, r4
 8025584:	3404      	adds	r4, #4
 8025586:	f7f9 fefb 	bl	801f380 <tLinearDelay_free>
    for (int i = 0; i < 6; i++)
 802558a:	42b4      	cmp	r4, r6
 802558c:	d1f9      	bne.n	8025582 <tNReverb_free+0xe>
 802558e:	f107 0414 	add.w	r4, r7, #20
        tLinearDelay_free(&r->allpassDelays[i]);
 8025592:	4620      	mov	r0, r4
 8025594:	3404      	adds	r4, #4
 8025596:	f7f9 fef3 	bl	801f380 <tLinearDelay_free>
    for (int i = 0; i < 8; i++)
 802559a:	42a5      	cmp	r5, r4
 802559c:	d1f9      	bne.n	8025592 <tNReverb_free+0x1e>
    mpool_free((char*)r, r->mempool);
 802559e:	6839      	ldr	r1, [r7, #0]
 80255a0:	4638      	mov	r0, r7
}
 80255a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    mpool_free((char*)r, r->mempool);
 80255a6:	f7fe be57 	b.w	8024258 <mpool_free>
 80255aa:	bf00      	nop
 80255ac:	0000      	movs	r0, r0
	...

080255b0 <tNReverb_setT60>:
    if (t60 <= 0.0f)           t60 = 0.001f;
 80255b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
{
 80255b4:	b570      	push	{r4, r5, r6, lr}
    if (t60 <= 0.0f)           t60 = 0.001f;
 80255b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 80255ba:	ed2d 8b04 	vpush	{d8-d9}
    _tNReverb* r = *rev;
 80255be:	6803      	ldr	r3, [r0, #0]
    if (t60 <= 0.0f)           t60 = 0.001f;
 80255c0:	d92b      	bls.n	802561a <tNReverb_setT60+0x6a>
 80255c2:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80255c6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80255ca:	ee86 9b07 	vdiv.f64	d9, d6, d7
 80255ce:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80255d2:	f103 0668 	add.w	r6, r3, #104	; 0x68
 80255d6:	4d16      	ldr	r5, [pc, #88]	; (8025630 <tNReverb_setT60+0x80>)
    r->t60 = t60;
 80255d8:	ed83 0a02 	vstr	s0, [r3, #8]
    for (int i=0; i<6; i++)   r->combCoeffs[i] = pow(10.0, (-3.0 * tLinearDelay_getDelay(&r->combDelays[i]) * leaf.invSampleRate / t60 ));
 80255dc:	eeb8 8b08 	vmov.f64	d8, #136	; 0xc0400000 -3.0
 80255e0:	f1a4 001c 	sub.w	r0, r4, #28
 80255e4:	f7f9 ff9e 	bl	801f524 <tLinearDelay_getDelay>
 80255e8:	ed95 7a01 	vldr	s14, [r5, #4]
 80255ec:	eeb7 1ac0 	vcvt.f64.f32	d1, s0
 80255f0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80255f4:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80255f8:	ee27 7b08 	vmul.f64	d7, d7, d8
 80255fc:	ee27 7b09 	vmul.f64	d7, d7, d9
 8025600:	ee27 1b01 	vmul.f64	d1, d7, d1
 8025604:	f002 f954 	bl	80278b0 <pow>
 8025608:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802560c:	eca4 0a01 	vstmia	r4!, {s0}
 8025610:	42b4      	cmp	r4, r6
 8025612:	d1e5      	bne.n	80255e0 <tNReverb_setT60+0x30>
    
}
 8025614:	ecbd 8b04 	vpop	{d8-d9}
 8025618:	bd70      	pop	{r4, r5, r6, pc}
 802561a:	ed9f 9b03 	vldr	d9, [pc, #12]	; 8025628 <tNReverb_setT60+0x78>
    if (t60 <= 0.0f)           t60 = 0.001f;
 802561e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8025634 <tNReverb_setT60+0x84>
 8025622:	e7d4      	b.n	80255ce <tNReverb_setT60+0x1e>
 8025624:	f3af 8000 	nop.w
 8025628:	e7190014 	.word	0xe7190014
 802562c:	408f3fff 	.word	0x408f3fff
 8025630:	200194e0 	.word	0x200194e0
 8025634:	3a83126f 	.word	0x3a83126f

08025638 <tNReverb_setMix>:

void    tNReverb_setMix(tNReverb* const rev, float mix)
{
    _tNReverb* r = *rev;
 8025638:	6803      	ldr	r3, [r0, #0]
    r->mix = mix;
 802563a:	ed83 0a01 	vstr	s0, [r3, #4]
}
 802563e:	4770      	bx	lr

08025640 <tNReverb_tickStereo>:

    return out;
}

void   tNReverb_tickStereo(tNReverb* const rev, float input, float* output)
{
 8025640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025644:	ed2d 8b06 	vpush	{d8-d10}
    _tNReverb* r = *rev;
 8025648:	6805      	ldr	r5, [r0, #0]
{
 802564a:	eeb0 9a40 	vmov.f32	s18, s0
 802564e:	4688      	mov	r8, r1
    r->lastIn = input;

    float temp, temp0, temp1, temp2, temp3, out;
    int i;

    temp0 = 0.0;
 8025650:	ed9f 8a4c 	vldr	s16, [pc, #304]	; 8025784 <tNReverb_tickStereo+0x144>
 8025654:	f105 0450 	add.w	r4, r5, #80	; 0x50
 8025658:	f105 0768 	add.w	r7, r5, #104	; 0x68
    r->lastIn = input;
 802565c:	ed85 0a1b 	vstr	s0, [r5, #108]	; 0x6c
 8025660:	f1a4 061c 	sub.w	r6, r4, #28
    for ( i=0; i<6; i++ )
    {
        temp = input + (r->combCoeffs[i] * tLinearDelay_getLastOut(&r->combDelays[i]));
 8025664:	ecf4 8a01 	vldmia	r4!, {s17}
 8025668:	4630      	mov	r0, r6
 802566a:	f7f9 ff5f 	bl	801f52c <tLinearDelay_getLastOut>
        temp0 += tLinearDelay_tick(&r->combDelays[i],temp);
 802566e:	eef0 7a49 	vmov.f32	s15, s18
 8025672:	4630      	mov	r0, r6
 8025674:	eee8 7a80 	vfma.f32	s15, s17, s0
 8025678:	eeb0 0a67 	vmov.f32	s0, s15
 802567c:	f7f9 fe9a 	bl	801f3b4 <tLinearDelay_tick>
    for ( i=0; i<6; i++ )
 8025680:	42bc      	cmp	r4, r7
        temp0 += tLinearDelay_tick(&r->combDelays[i],temp);
 8025682:	ee38 8a00 	vadd.f32	s16, s16, s0
    for ( i=0; i<6; i++ )
 8025686:	d1eb      	bne.n	8025660 <tNReverb_tickStereo+0x20>
 8025688:	f105 0414 	add.w	r4, r5, #20
 802568c:	f105 0620 	add.w	r6, r5, #32
    }

    for ( i=0; i<3; i++ )
    {
        temp = tLinearDelay_getLastOut(&r->allpassDelays[i]);
 8025690:	4620      	mov	r0, r4
 8025692:	f7f9 ff4b 	bl	801f52c <tLinearDelay_getLastOut>
        temp1 = r->allpassCoeff * temp;
        temp1 += temp0;
 8025696:	edd5 7a13 	vldr	s15, [r5, #76]	; 0x4c
        temp = tLinearDelay_getLastOut(&r->allpassDelays[i]);
 802569a:	eef0 8a40 	vmov.f32	s17, s0
        tLinearDelay_tick(&r->allpassDelays[i], temp1);
 802569e:	4620      	mov	r0, r4
        temp1 += temp0;
 80256a0:	eea7 8a80 	vfma.f32	s16, s15, s0
 80256a4:	3404      	adds	r4, #4
        tLinearDelay_tick(&r->allpassDelays[i], temp1);
 80256a6:	eeb0 0a48 	vmov.f32	s0, s16
 80256aa:	f7f9 fe83 	bl	801f3b4 <tLinearDelay_tick>
        temp0 = -(r->allpassCoeff * temp1) + temp;
 80256ae:	edd5 7a13 	vldr	s15, [r5, #76]	; 0x4c
    for ( i=0; i<3; i++ )
 80256b2:	42a6      	cmp	r6, r4
        temp0 = -(r->allpassCoeff * temp1) + temp;
 80256b4:	eee7 8ac8 	vfms.f32	s17, s15, s16
 80256b8:	eeb0 8a68 	vmov.f32	s16, s17
    for ( i=0; i<3; i++ )
 80256bc:	d1e8      	bne.n	8025690 <tNReverb_tickStereo+0x50>
    }

    // One-pole lowpass filter.
    r->lowpassState = 0.7f * r->lowpassState + 0.3f * temp0;
 80256be:	eddf 7a32 	vldr	s15, [pc, #200]	; 8025788 <tNReverb_tickStereo+0x148>

    temp = tLinearDelay_getLastOut(&r->allpassDelays[3]);
 80256c2:	4630      	mov	r0, r6
    r->lowpassState = 0.7f * r->lowpassState + 0.3f * temp0;
 80256c4:	ed95 7a1a 	vldr	s14, [r5, #104]	; 0x68
    tLinearDelay_tick(&r->allpassDelays[3], temp1 );
    temp1 = -(r->allpassCoeff * temp1) + temp;

    float drymix = ( 1.0f - r->mix ) * input;

    temp = tLinearDelay_getLastOut(&r->allpassDelays[4]);
 80256c8:	f105 0724 	add.w	r7, r5, #36	; 0x24
    r->lowpassState = 0.7f * r->lowpassState + 0.3f * temp0;
 80256cc:	ee28 8aa7 	vmul.f32	s16, s17, s15
 80256d0:	eddf 7a2e 	vldr	s15, [pc, #184]	; 802578c <tNReverb_tickStereo+0x14c>
    float drymix = ( 1.0f - r->mix ) * input;
 80256d4:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    tLinearDelay_tick(&r->allpassDelays[4], temp2 );
    output[0] = -( r->allpassCoeff * temp2 ) + temp + drymix;
    out = output[0];


    temp = tLinearDelay_getLastOut(&r->allpassDelays[5]);
 80256d8:	f105 0428 	add.w	r4, r5, #40	; 0x28
    r->lowpassState = 0.7f * r->lowpassState + 0.3f * temp0;
 80256dc:	eea7 8a27 	vfma.f32	s16, s14, s15
 80256e0:	ed85 8a1a 	vstr	s16, [r5, #104]	; 0x68
    temp = tLinearDelay_getLastOut(&r->allpassDelays[3]);
 80256e4:	f7f9 ff22 	bl	801f52c <tLinearDelay_getLastOut>
    temp1 += r->lowpassState;
 80256e8:	edd5 7a13 	vldr	s15, [r5, #76]	; 0x4c
 80256ec:	ed95 8a1a 	vldr	s16, [r5, #104]	; 0x68
    temp = tLinearDelay_getLastOut(&r->allpassDelays[3]);
 80256f0:	eef0 8a40 	vmov.f32	s17, s0
    tLinearDelay_tick(&r->allpassDelays[3], temp1 );
 80256f4:	4630      	mov	r0, r6
    temp1 += r->lowpassState;
 80256f6:	eea7 8a80 	vfma.f32	s16, s15, s0
    tLinearDelay_tick(&r->allpassDelays[3], temp1 );
 80256fa:	eeb0 0a48 	vmov.f32	s0, s16
 80256fe:	f7f9 fe59 	bl	801f3b4 <tLinearDelay_tick>
    temp1 = -(r->allpassCoeff * temp1) + temp;
 8025702:	ed95 7a13 	vldr	s14, [r5, #76]	; 0x4c
    float drymix = ( 1.0f - r->mix ) * input;
 8025706:	edd5 7a01 	vldr	s15, [r5, #4]
    temp = tLinearDelay_getLastOut(&r->allpassDelays[4]);
 802570a:	4638      	mov	r0, r7
    temp1 = -(r->allpassCoeff * temp1) + temp;
 802570c:	eee7 8a48 	vfms.f32	s17, s14, s16
    float drymix = ( 1.0f - r->mix ) * input;
 8025710:	ee3a aa67 	vsub.f32	s20, s20, s15
    temp = tLinearDelay_getLastOut(&r->allpassDelays[4]);
 8025714:	f7f9 ff0a 	bl	801f52c <tLinearDelay_getLastOut>
    temp2 += temp1;
 8025718:	edd5 7a13 	vldr	s15, [r5, #76]	; 0x4c
    temp = tLinearDelay_getLastOut(&r->allpassDelays[4]);
 802571c:	eef0 9a40 	vmov.f32	s19, s0
    tLinearDelay_tick(&r->allpassDelays[4], temp2 );
 8025720:	4638      	mov	r0, r7
    output[0] = -( r->allpassCoeff * temp2 ) + temp + drymix;
 8025722:	eeea 9a09 	vfma.f32	s19, s20, s18
    temp2 += temp1;
 8025726:	eeb0 8a68 	vmov.f32	s16, s17
 802572a:	eea7 8a80 	vfma.f32	s16, s15, s0
    tLinearDelay_tick(&r->allpassDelays[4], temp2 );
 802572e:	eeb0 0a48 	vmov.f32	s0, s16
 8025732:	f7f9 fe3f 	bl	801f3b4 <tLinearDelay_tick>
    output[0] = -( r->allpassCoeff * temp2 ) + temp + drymix;
 8025736:	edd5 7a13 	vldr	s15, [r5, #76]	; 0x4c
    temp = tLinearDelay_getLastOut(&r->allpassDelays[5]);
 802573a:	4620      	mov	r0, r4
    output[0] = -( r->allpassCoeff * temp2 ) + temp + drymix;
 802573c:	eee7 9ac8 	vfms.f32	s19, s15, s16
 8025740:	edc8 9a00 	vstr	s19, [r8]
    temp = tLinearDelay_getLastOut(&r->allpassDelays[5]);
 8025744:	f7f9 fef2 	bl	801f52c <tLinearDelay_getLastOut>
    temp3 = r->allpassCoeff * temp;
    temp3 += temp1;
 8025748:	edd5 7a13 	vldr	s15, [r5, #76]	; 0x4c
    temp = tLinearDelay_getLastOut(&r->allpassDelays[5]);
 802574c:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_tick(&r->allpassDelays[5], temp3 );
 8025750:	4620      	mov	r0, r4
    temp3 += temp1;
 8025752:	eee7 8a80 	vfma.f32	s17, s15, s0
    output[1] = r->mix *( - ( r->allpassCoeff * temp3 ) + temp + drymix);
 8025756:	eeaa 8a09 	vfma.f32	s16, s20, s18
    tLinearDelay_tick(&r->allpassDelays[5], temp3 );
 802575a:	eeb0 0a68 	vmov.f32	s0, s17
 802575e:	f7f9 fe29 	bl	801f3b4 <tLinearDelay_tick>
    output[1] = r->mix *( - ( r->allpassCoeff * temp3 ) + temp + drymix);
 8025762:	ed95 7a13 	vldr	s14, [r5, #76]	; 0x4c
 8025766:	edd5 7a01 	vldr	s15, [r5, #4]
 802576a:	eea7 8a68 	vfms.f32	s16, s14, s17
 802576e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8025772:	ed88 8a01 	vstr	s16, [r8, #4]

    r->lastOut = out;
 8025776:	edc5 9a1c 	vstr	s19, [r5, #112]	; 0x70
}
 802577a:	ecbd 8b06 	vpop	{d8-d10}
 802577e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025782:	bf00      	nop
 8025784:	00000000 	.word	0x00000000
 8025788:	3e99999a 	.word	0x3e99999a
 802578c:	3f333333 	.word	0x3f333333

08025790 <tDattorroReverb_initToPool>:
{
    tDattorroReverb_initToPool(rev, &leaf.mempool);
}

void    tDattorroReverb_initToPool        (tDattorroReverb* const rev, tMempool* const mp)
{
 8025790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025794:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 8025798:	680d      	ldr	r5, [r1, #0]
{
 802579a:	460e      	mov	r6, r1
 802579c:	4681      	mov	r9, r0
    _tDattorroReverb* r = *rev = (_tDattorroReverb*) mpool_alloc(sizeof(_tDattorroReverb), m);
 802579e:	2088      	movs	r0, #136	; 0x88
 80257a0:	4629      	mov	r1, r5
    r->mempool = m;
    
    r->size_max = 2.0f;
    r->size = 1.f;
 80257a2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tDattorroReverb* r = *rev = (_tDattorroReverb*) mpool_alloc(sizeof(_tDattorroReverb), m);
 80257a6:	f7fe fcaf 	bl	8024108 <mpool_alloc>
 80257aa:	4604      	mov	r4, r0
    r->t = r->size * leaf.sampleRate * 0.001f;
 80257ac:	48c2      	ldr	r0, [pc, #776]	; (8025ab8 <tDattorroReverb_initToPool+0x328>)
    r->size_max = 2.0f;
 80257ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    _tDattorroReverb* r = *rev = (_tDattorroReverb*) mpool_alloc(sizeof(_tDattorroReverb), m);
 80257b2:	f8c9 4000 	str.w	r4, [r9]
    r->frozen = 0;
 80257b6:	2300      	movs	r3, #0
    r->mempool = m;
 80257b8:	6025      	str	r5, [r4, #0]
    // INPUT
    tTapeDelay_initToPool(&r->in_delay, 0.f, SAMP(200.f), mp);
 80257ba:	4632      	mov	r2, r6
    r->t = r->size * leaf.sampleRate * 0.001f;
 80257bc:	edd0 7a00 	vldr	s15, [r0]
    tTapeDelay_initToPool(&r->in_delay, 0.f, SAMP(200.f), mp);
 80257c0:	f104 0038 	add.w	r0, r4, #56	; 0x38
    r->t = r->size * leaf.sampleRate * 0.001f;
 80257c4:	eddf 6abd 	vldr	s13, [pc, #756]	; 8025abc <tDattorroReverb_initToPool+0x32c>
    tOnePole_initToPool(&r->in_filter, 1.f, mp);
    
    for (int i = 0; i < 4; i++)
    {
        tAllpass_initToPool(&r->in_allpass[i], SAMP(in_allpass_delays[i]), SAMP(20.f), mp); // * r->size_max
 80257c8:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
    tTapeDelay_initToPool(&r->in_delay, 0.f, SAMP(200.f), mp);
 80257cc:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8025ac0 <tDattorroReverb_initToPool+0x330>
 80257d0:	f104 0540 	add.w	r5, r4, #64	; 0x40
    r->t = r->size * leaf.sampleRate * 0.001f;
 80257d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    r->size_max = 2.0f;
 80257d8:	6221      	str	r1, [r4, #32]
    tTapeDelay_initToPool(&r->in_delay, 0.f, SAMP(200.f), mp);
 80257da:	ed9f 0aba 	vldr	s0, [pc, #744]	; 8025ac4 <tDattorroReverb_initToPool+0x334>
 80257de:	f104 0a50 	add.w	sl, r4, #80	; 0x50
 80257e2:	4fb9      	ldr	r7, [pc, #740]	; (8025ac8 <tDattorroReverb_initToPool+0x338>)
 80257e4:	ee27 7a87 	vmul.f32	s14, s15, s14
    r->t = r->size * leaf.sampleRate * 0.001f;
 80257e8:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    r->frozen = 0;
 80257ec:	61a3      	str	r3, [r4, #24]
 80257ee:	f107 0810 	add.w	r8, r7, #16
    r->size = 1.f;
 80257f2:	edc4 8a07 	vstr	s17, [r4, #28]
    tTapeDelay_initToPool(&r->in_delay, 0.f, SAMP(200.f), mp);
 80257f6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80257fa:	ee17 1a90 	vmov	r1, s15
 80257fe:	f7f9 fecd 	bl	801f59c <tTapeDelay_initToPool>
    tOnePole_initToPool(&r->in_filter, 1.f, mp);
 8025802:	4631      	mov	r1, r6
 8025804:	eeb0 0a68 	vmov.f32	s0, s17
 8025808:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 802580c:	f7fc febc 	bl	8022588 <tOnePole_initToPool>
        tAllpass_initToPool(&r->in_allpass[i], SAMP(in_allpass_delays[i]), SAMP(20.f), mp); // * r->size_max
 8025810:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8025814:	4628      	mov	r0, r5
 8025816:	ecb7 0a01 	vldmia	r7!, {s0}
 802581a:	4632      	mov	r2, r6
 802581c:	ee27 7a88 	vmul.f32	s14, s15, s16
 8025820:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025824:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8025828:	ee17 1a90 	vmov	r1, s15
 802582c:	f7fc fe5c 	bl	80224e8 <tAllpass_initToPool>
        tAllpass_setGain(&r->in_allpass[i], in_allpass_gains[i]);
 8025830:	4628      	mov	r0, r5
 8025832:	3504      	adds	r5, #4
 8025834:	ecb8 0a01 	vldmia	r8!, {s0}
 8025838:	f7fc fe88 	bl	802254c <tAllpass_setGain>
    for (int i = 0; i < 4; i++)
 802583c:	4555      	cmp	r5, sl
 802583e:	d1e7      	bne.n	8025810 <tDattorroReverb_initToPool+0x80>
    }
    
    // FEEDBACK 1
    tAllpass_initToPool(&r->f1_allpass, SAMP(30.51f), SAMP(100.f), mp); // * r->size_max
 8025840:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8025844:	4632      	mov	r2, r6
 8025846:	ed9f 9aa1 	vldr	s18, [pc, #644]	; 8025acc <tDattorroReverb_initToPool+0x33c>
 802584a:	4628      	mov	r0, r5
 802584c:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8025ad0 <tDattorroReverb_initToPool+0x340>
    tAllpass_setGain(&r->f1_allpass, 0.7f);
    
    tTapeDelay_initToPool(&r->f1_delay_1, SAMP(141.69f), SAMP(200.0f) * r->size_max + 1, mp);
 8025850:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    tAllpass_initToPool(&r->f1_allpass, SAMP(30.51f), SAMP(100.f), mp); // * r->size_max
 8025854:	ee27 7a89 	vmul.f32	s14, s15, s18
    tTapeDelay_initToPool(&r->f1_delay_1, SAMP(141.69f), SAMP(200.0f) * r->size_max + 1, mp);
 8025858:	eddf 8a99 	vldr	s17, [pc, #612]	; 8025ac0 <tDattorroReverb_initToPool+0x330>
    tAllpass_initToPool(&r->f1_allpass, SAMP(30.51f), SAMP(100.f), mp); // * r->size_max
 802585c:	ee27 0a80 	vmul.f32	s0, s15, s0
    
    tOnePole_initToPool(&r->f1_filter, 1.f, mp);
    
    tHighpass_initToPool(&r->f1_hp, 20.f, mp);
    
    tCycle_initToPool(&r->f1_lfo, mp);
 8025860:	f104 0868 	add.w	r8, r4, #104	; 0x68
    tCycle_setFreq(&r->f1_lfo, 0.1f);
    
    // FEEDBACK 2
    tAllpass_initToPool(&r->f2_allpass, SAMP(22.58f), SAMP(100.f), mp); // * r->size_max
 8025864:	f104 076c 	add.w	r7, r4, #108	; 0x6c
    tAllpass_initToPool(&r->f1_allpass, SAMP(30.51f), SAMP(100.f), mp); // * r->size_max
 8025868:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 802586c:	ee17 1a90 	vmov	r1, s15
 8025870:	f7fc fe3a 	bl	80224e8 <tAllpass_initToPool>
    tAllpass_setGain(&r->f1_allpass, 0.7f);
 8025874:	4628      	mov	r0, r5
 8025876:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8025ad4 <tDattorroReverb_initToPool+0x344>
    
    tOnePole_initToPool(&r->f2_filter, 1.f, mp);
    
    tHighpass_initToPool(&r->f2_hp, 20.f, mp);
    
    tCycle_initToPool(&r->f2_lfo, mp);
 802587a:	f104 0584 	add.w	r5, r4, #132	; 0x84
    tAllpass_setGain(&r->f1_allpass, 0.7f);
 802587e:	f7fc fe65 	bl	802254c <tAllpass_setGain>
    tTapeDelay_initToPool(&r->f1_delay_1, SAMP(141.69f), SAMP(200.0f) * r->size_max + 1, mp);
 8025882:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8025886:	edd4 7a08 	vldr	s15, [r4, #32]
 802588a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 802588e:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8025ad8 <tDattorroReverb_initToPool+0x348>
 8025892:	4632      	mov	r2, r6
 8025894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025898:	ee27 0a00 	vmul.f32	s0, s14, s0
 802589c:	eeb0 7a48 	vmov.f32	s14, s16
 80258a0:	eea7 7aa8 	vfma.f32	s14, s15, s17
 80258a4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80258a8:	ee17 1a90 	vmov	r1, s15
 80258ac:	f7f9 fe76 	bl	801f59c <tTapeDelay_initToPool>
    tTapeDelay_initToPool(&r->f1_delay_2, SAMP(89.24f), SAMP(100.0f) * r->size_max + 1, mp);
 80258b0:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 80258b4:	edd4 7a08 	vldr	s15, [r4, #32]
 80258b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80258bc:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8025adc <tDattorroReverb_initToPool+0x34c>
 80258c0:	4632      	mov	r2, r6
 80258c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80258c6:	ee27 0a00 	vmul.f32	s0, s14, s0
 80258ca:	eeb0 7a48 	vmov.f32	s14, s16
 80258ce:	eea7 7a89 	vfma.f32	s14, s15, s18
 80258d2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80258d6:	ee17 1a90 	vmov	r1, s15
 80258da:	f7f9 fe5f 	bl	801f59c <tTapeDelay_initToPool>
    tTapeDelay_initToPool(&r->f1_delay_3, SAMP(125.f), SAMP(200.0f) * r->size_max + 1, mp);
 80258de:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 80258e2:	edd4 7a08 	vldr	s15, [r4, #32]
 80258e6:	4632      	mov	r2, r6
 80258e8:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8025ae0 <tDattorroReverb_initToPool+0x350>
 80258ec:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80258f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80258f4:	ee27 0a00 	vmul.f32	s0, s14, s0
 80258f8:	eeb0 7a48 	vmov.f32	s14, s16
 80258fc:	eea7 7aa8 	vfma.f32	s14, s15, s17
 8025900:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8025904:	ee17 1a90 	vmov	r1, s15
 8025908:	f7f9 fe48 	bl	801f59c <tTapeDelay_initToPool>
    tOnePole_initToPool(&r->f1_filter, 1.f, mp);
 802590c:	eeb0 0a48 	vmov.f32	s0, s16
 8025910:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025914:	4631      	mov	r1, r6
 8025916:	f7fc fe37 	bl	8022588 <tOnePole_initToPool>
    tHighpass_initToPool(&r->f1_hp, 20.f, mp);
 802591a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 802591e:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8025922:	4631      	mov	r1, r6
 8025924:	f7fd f86a 	bl	80229fc <tHighpass_initToPool>
    tCycle_initToPool(&r->f1_lfo, mp);
 8025928:	4631      	mov	r1, r6
 802592a:	4640      	mov	r0, r8
 802592c:	f7ff f88c 	bl	8024a48 <tCycle_initToPool>
    tCycle_setFreq(&r->f1_lfo, 0.1f);
 8025930:	4640      	mov	r0, r8
 8025932:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8025ae4 <tDattorroReverb_initToPool+0x354>
 8025936:	f7ff f899 	bl	8024a6c <tCycle_setFreq>
    tAllpass_initToPool(&r->f2_allpass, SAMP(22.58f), SAMP(100.f), mp); // * r->size_max
 802593a:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 802593e:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8025ae8 <tDattorroReverb_initToPool+0x358>
 8025942:	4632      	mov	r2, r6
 8025944:	ee27 7a89 	vmul.f32	s14, s15, s18
 8025948:	4638      	mov	r0, r7
 802594a:	ee27 0a80 	vmul.f32	s0, s15, s0
 802594e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8025952:	ee17 1a90 	vmov	r1, s15
 8025956:	f7fc fdc7 	bl	80224e8 <tAllpass_initToPool>
    tAllpass_setGain(&r->f2_allpass, 0.7f);
 802595a:	4638      	mov	r0, r7
 802595c:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8025ad4 <tDattorroReverb_initToPool+0x344>
 8025960:	f7fc fdf4 	bl	802254c <tAllpass_setGain>
    tTapeDelay_initToPool(&r->f2_delay_1, SAMP(149.62f), SAMP(200.f) * r->size_max + 1, mp);
 8025964:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8025968:	edd4 7a08 	vldr	s15, [r4, #32]
 802596c:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8025970:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8025aec <tDattorroReverb_initToPool+0x35c>
 8025974:	4632      	mov	r2, r6
 8025976:	ee67 7a27 	vmul.f32	s15, s14, s15
 802597a:	ee27 0a00 	vmul.f32	s0, s14, s0
 802597e:	eeb0 7a48 	vmov.f32	s14, s16
 8025982:	eea7 7aa8 	vfma.f32	s14, s15, s17
 8025986:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 802598a:	ee17 1a90 	vmov	r1, s15
 802598e:	f7f9 fe05 	bl	801f59c <tTapeDelay_initToPool>
    tTapeDelay_initToPool(&r->f2_delay_2, SAMP(60.48f), SAMP(100.f) * r->size_max + 1, mp);
 8025992:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8025996:	edd4 7a08 	vldr	s15, [r4, #32]
 802599a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 802599e:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8025af0 <tDattorroReverb_initToPool+0x360>
 80259a2:	4632      	mov	r2, r6
 80259a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80259a8:	ee27 0a00 	vmul.f32	s0, s14, s0
 80259ac:	eeb0 7a48 	vmov.f32	s14, s16
 80259b0:	eea7 7a89 	vfma.f32	s14, s15, s18
 80259b4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80259b8:	ee17 1a90 	vmov	r1, s15
 80259bc:	f7f9 fdee 	bl	801f59c <tTapeDelay_initToPool>
    tTapeDelay_initToPool(&r->f2_delay_3, SAMP(106.28f), SAMP(200.f) * r->size_max + 1, mp);
 80259c0:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 80259c4:	edd4 7a08 	vldr	s15, [r4, #32]
 80259c8:	4632      	mov	r2, r6
 80259ca:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8025af4 <tDattorroReverb_initToPool+0x364>
 80259ce:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80259d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80259d6:	ee27 0a00 	vmul.f32	s0, s14, s0
 80259da:	eeb0 7a48 	vmov.f32	s14, s16
 80259de:	eea7 7aa8 	vfma.f32	s14, s15, s17
 80259e2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80259e6:	ee17 1a90 	vmov	r1, s15
 80259ea:	f7f9 fdd7 	bl	801f59c <tTapeDelay_initToPool>
    tOnePole_initToPool(&r->f2_filter, 1.f, mp);
 80259ee:	eeb0 0a48 	vmov.f32	s0, s16
 80259f2:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80259f6:	4631      	mov	r1, r6
 80259f8:	f7fc fdc6 	bl	8022588 <tOnePole_initToPool>
    tHighpass_initToPool(&r->f2_hp, 20.f, mp);
 80259fc:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8025a00:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8025a04:	4631      	mov	r1, r6
 8025a06:	f7fc fff9 	bl	80229fc <tHighpass_initToPool>
    tCycle_initToPool(&r->f2_lfo, mp);
 8025a0a:	4631      	mov	r1, r6
 8025a0c:	4628      	mov	r0, r5
 8025a0e:	f7ff f81b 	bl	8024a48 <tCycle_initToPool>
    tCycle_setFreq(&r->f2_lfo, 0.07f);
 8025a12:	4628      	mov	r0, r5
 8025a14:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8025af8 <tDattorroReverb_initToPool+0x368>
 8025a18:	f7ff f828 	bl	8024a6c <tCycle_setFreq>
}

void    tDattorroReverb_setMix            (tDattorroReverb* const rev, float mix)
{
    _tDattorroReverb* r = *rev;
    r->mix = LEAF_clip(0.0f, mix, 1.0f);
 8025a1c:	eeb0 1a48 	vmov.f32	s2, s16
    _tDattorroReverb* r = *rev;
 8025a20:	f8d9 4000 	ldr.w	r4, [r9]
    r->mix = LEAF_clip(0.0f, mix, 1.0f);
 8025a24:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8025a28:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8025ac4 <tDattorroReverb_initToPool+0x334>
 8025a2c:	f7fe f96c 	bl	8023d08 <LEAF_clip>

void    tDattorroReverb_setInputDelay     (tDattorroReverb* const rev, float preDelay)
{
    _tDattorroReverb* r = *rev;
    
    r->predelay = LEAF_clip(0.0f, preDelay, 200.0f);
 8025a30:	eddf 0a24 	vldr	s1, [pc, #144]	; 8025ac4 <tDattorroReverb_initToPool+0x334>
    r->mix = LEAF_clip(0.0f, mix, 1.0f);
 8025a34:	ed84 0a05 	vstr	s0, [r4, #20]
    r->predelay = LEAF_clip(0.0f, preDelay, 200.0f);
 8025a38:	eeb0 1a68 	vmov.f32	s2, s17
    _tDattorroReverb* r = *rev;
 8025a3c:	f8d9 4000 	ldr.w	r4, [r9]
    r->predelay = LEAF_clip(0.0f, preDelay, 200.0f);
 8025a40:	eeb0 0a60 	vmov.f32	s0, s1
 8025a44:	f7fe f960 	bl	8023d08 <LEAF_clip>
    
    tTapeDelay_setDelay(&r->in_delay, SAMP(r->predelay));
 8025a48:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8025a4c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    r->predelay = LEAF_clip(0.0f, preDelay, 200.0f);
 8025a50:	ed84 0a01 	vstr	s0, [r4, #4]
    tTapeDelay_setDelay(&r->in_delay, SAMP(r->predelay));
 8025a54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025a58:	f7f9 fe54 	bl	801f704 <tTapeDelay_setDelay>
}

void    tDattorroReverb_setInputFilter    (tDattorroReverb* const rev, float freq)
{
    _tDattorroReverb* r = *rev;
 8025a5c:	f8d9 4000 	ldr.w	r4, [r9]
    
    r->input_filter = LEAF_clip(0.0f, freq, 20000.0f);
 8025a60:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8025afc <tDattorroReverb_initToPool+0x36c>
 8025a64:	eddf 0a26 	vldr	s1, [pc, #152]	; 8025b00 <tDattorroReverb_initToPool+0x370>
 8025a68:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8025ac4 <tDattorroReverb_initToPool+0x334>
 8025a6c:	f7fe f94c 	bl	8023d08 <LEAF_clip>
    
    tOnePole_setFreq(&r->in_filter, r->input_filter);
 8025a70:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    r->input_filter = LEAF_clip(0.0f, freq, 20000.0f);
 8025a74:	ed84 0a02 	vstr	s0, [r4, #8]
    tOnePole_setFreq(&r->in_filter, r->input_filter);
 8025a78:	f7fc fdc0 	bl	80225fc <tOnePole_setFreq>
}

void    tDattorroReverb_setFeedbackFilter (tDattorroReverb* const rev, float freq)
{
    _tDattorroReverb* r = *rev;
 8025a7c:	f8d9 4000 	ldr.w	r4, [r9]
    
    r->feedback_filter = LEAF_clip(0.0f, freq, 20000.0f);
 8025a80:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8025afc <tDattorroReverb_initToPool+0x36c>
 8025a84:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8025b04 <tDattorroReverb_initToPool+0x374>
 8025a88:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8025ac4 <tDattorroReverb_initToPool+0x334>
 8025a8c:	f7fe f93c 	bl	8023d08 <LEAF_clip>
    
    tOnePole_setFreq(&r->f1_filter, r->feedback_filter);
 8025a90:	f104 0058 	add.w	r0, r4, #88	; 0x58
    r->feedback_filter = LEAF_clip(0.0f, freq, 20000.0f);
 8025a94:	ed84 0a03 	vstr	s0, [r4, #12]
    tOnePole_setFreq(&r->f1_filter, r->feedback_filter);
 8025a98:	f7fc fdb0 	bl	80225fc <tOnePole_setFreq>
    tOnePole_setFreq(&r->f2_filter, r->feedback_filter);
 8025a9c:	ed94 0a03 	vldr	s0, [r4, #12]
 8025aa0:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8025aa4:	f7fc fdaa 	bl	80225fc <tOnePole_setFreq>
}

void    tDattorroReverb_setFeedbackGain   (tDattorroReverb* const rev, float gain)
{
    _tDattorroReverb* r = *rev;
 8025aa8:	f8d9 3000 	ldr.w	r3, [r9]
    r->feedback_gain = gain;
 8025aac:	4a16      	ldr	r2, [pc, #88]	; (8025b08 <tDattorroReverb_initToPool+0x378>)
 8025aae:	611a      	str	r2, [r3, #16]
}
 8025ab0:	ecbd 8b04 	vpop	{d8-d9}
 8025ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025ab8:	200194e0 	.word	0x200194e0
 8025abc:	3a83126f 	.word	0x3a83126f
 8025ac0:	43480000 	.word	0x43480000
 8025ac4:	00000000 	.word	0x00000000
 8025ac8:	200003b0 	.word	0x200003b0
 8025acc:	42c80000 	.word	0x42c80000
 8025ad0:	41f4147b 	.word	0x41f4147b
 8025ad4:	3f333333 	.word	0x3f333333
 8025ad8:	430db0a4 	.word	0x430db0a4
 8025adc:	42b27ae1 	.word	0x42b27ae1
 8025ae0:	42fa0000 	.word	0x42fa0000
 8025ae4:	3dcccccd 	.word	0x3dcccccd
 8025ae8:	41b4a3d7 	.word	0x41b4a3d7
 8025aec:	43159eb8 	.word	0x43159eb8
 8025af0:	4271eb85 	.word	0x4271eb85
 8025af4:	42d48f5c 	.word	0x42d48f5c
 8025af8:	3d8f5c29 	.word	0x3d8f5c29
 8025afc:	469c4000 	.word	0x469c4000
 8025b00:	461c4000 	.word	0x461c4000
 8025b04:	459c4000 	.word	0x459c4000
 8025b08:	3ecccccd 	.word	0x3ecccccd

08025b0c <tDattorroReverb_init>:
    tDattorroReverb_initToPool(rev, &leaf.mempool);
 8025b0c:	4901      	ldr	r1, [pc, #4]	; (8025b14 <tDattorroReverb_init+0x8>)
 8025b0e:	f7ff be3f 	b.w	8025790 <tDattorroReverb_initToPool>
 8025b12:	bf00      	nop
 8025b14:	200194f8 	.word	0x200194f8

08025b18 <tDattorroReverb_free>:
{
 8025b18:	b510      	push	{r4, lr}
    _tDattorroReverb* r = *rev;
 8025b1a:	6804      	ldr	r4, [r0, #0]
    tTapeDelay_free(&r->in_delay);
 8025b1c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8025b20:	f7f9 fd6e 	bl	801f600 <tTapeDelay_free>
    tOnePole_free(&r->in_filter);
 8025b24:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8025b28:	f7fc fd64 	bl	80225f4 <tOnePole_free>
        tAllpass_free(&r->in_allpass[i]);
 8025b2c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8025b30:	f7fc fcfc 	bl	802252c <tAllpass_free>
 8025b34:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8025b38:	f7fc fcf8 	bl	802252c <tAllpass_free>
 8025b3c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8025b40:	f7fc fcf4 	bl	802252c <tAllpass_free>
 8025b44:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8025b48:	f7fc fcf0 	bl	802252c <tAllpass_free>
    tAllpass_free(&r->f1_allpass);
 8025b4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8025b50:	f7fc fcec 	bl	802252c <tAllpass_free>
    tTapeDelay_free(&r->f1_delay_1);
 8025b54:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8025b58:	f7f9 fd52 	bl	801f600 <tTapeDelay_free>
    tTapeDelay_free(&r->f1_delay_2);
 8025b5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025b60:	f7f9 fd4e 	bl	801f600 <tTapeDelay_free>
    tTapeDelay_free(&r->f1_delay_3);
 8025b64:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8025b68:	f7f9 fd4a 	bl	801f600 <tTapeDelay_free>
    tOnePole_free(&r->f1_filter);
 8025b6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025b70:	f7fc fd40 	bl	80225f4 <tOnePole_free>
    tHighpass_free(&r->f1_hp);
 8025b74:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8025b78:	f7fc ff60 	bl	8022a3c <tHighpass_free>
    tCycle_free(&r->f1_lfo);
 8025b7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8025b80:	f7fe ff70 	bl	8024a64 <tCycle_free>
    tAllpass_free(&r->f2_allpass);
 8025b84:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8025b88:	f7fc fcd0 	bl	802252c <tAllpass_free>
    tTapeDelay_free(&r->f2_delay_1);
 8025b8c:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8025b90:	f7f9 fd36 	bl	801f600 <tTapeDelay_free>
    tTapeDelay_free(&r->f2_delay_2);
 8025b94:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8025b98:	f7f9 fd32 	bl	801f600 <tTapeDelay_free>
    tTapeDelay_free(&r->f2_delay_3);
 8025b9c:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8025ba0:	f7f9 fd2e 	bl	801f600 <tTapeDelay_free>
    tOnePole_free(&r->f2_filter);
 8025ba4:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8025ba8:	f7fc fd24 	bl	80225f4 <tOnePole_free>
    tHighpass_free(&r->f2_hp);
 8025bac:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8025bb0:	f7fc ff44 	bl	8022a3c <tHighpass_free>
    tCycle_free(&r->f2_lfo);
 8025bb4:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8025bb8:	f7fe ff54 	bl	8024a64 <tCycle_free>
    mpool_free((char*)r, r->mempool);
 8025bbc:	6821      	ldr	r1, [r4, #0]
 8025bbe:	4620      	mov	r0, r4
}
 8025bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)r, r->mempool);
 8025bc4:	f7fe bb48 	b.w	8024258 <mpool_free>

08025bc8 <tDattorroReverb_tickStereo>:
{
 8025bc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025bcc:	ed2d 8b06 	vpush	{d8-d10}
    _tDattorroReverb* r = *rev;
 8025bd0:	6804      	ldr	r4, [r0, #0]
{
 8025bd2:	468a      	mov	sl, r1
    	input = 0.0f;
 8025bd4:	eddf 9abf 	vldr	s19, [pc, #764]	; 8025ed4 <tDattorroReverb_tickStereo+0x30c>
    if (r->frozen)
 8025bd8:	69a3      	ldr	r3, [r4, #24]
	in_sample = tTapeDelay_tick(&r->in_delay, input);
 8025bda:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8025bde:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8025be2:	f104 0650 	add.w	r6, r4, #80	; 0x50
    	input = 0.0f;
 8025be6:	2b00      	cmp	r3, #0
 8025be8:	fe40 9a29 	vseleq.f32	s19, s0, s19
	in_sample = tTapeDelay_tick(&r->in_delay, input);
 8025bec:	eeb0 0a69 	vmov.f32	s0, s19
 8025bf0:	f7f9 fd12 	bl	801f618 <tTapeDelay_tick>
	in_sample = tOnePole_tick(&r->in_filter, in_sample);
 8025bf4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8025bf8:	f7fc fd1c 	bl	8022634 <tOnePole_tick>
 8025bfc:	eeb0 8a40 	vmov.f32	s16, s0
		in_sample = tAllpass_tick(&r->in_allpass[i], in_sample);
 8025c00:	4628      	mov	r0, r5
 8025c02:	3504      	adds	r5, #4
 8025c04:	eeb0 0a48 	vmov.f32	s0, s16
 8025c08:	f7fc fca4 	bl	8022554 <tAllpass_tick>
	for (int i = 0; i < 4; i++)
 8025c0c:	42b5      	cmp	r5, r6
		in_sample = tAllpass_tick(&r->in_allpass[i], in_sample);
 8025c0e:	eeb0 8a40 	vmov.f32	s16, s0
	for (int i = 0; i < 4; i++)
 8025c12:	d1f5      	bne.n	8025c00 <tDattorroReverb_tickStereo+0x38>
		f1_sample = in_sample + r->f2_last; // + f2_last_out;
 8025c14:	edd4 8a0d 	vldr	s17, [r4, #52]	; 0x34
		tAllpass_setDelay(&r->f1_allpass, SAMP(30.51f) + tCycle_tick(&r->f1_lfo) * SAMP(4.0f));
 8025c18:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8025c1c:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
		f1_sample = tTapeDelay_tick(&r->f1_delay_1, f1_sample);
 8025c20:	f104 0654 	add.w	r6, r4, #84	; 0x54
		f1_sample = in_sample + r->f2_last; // + f2_last_out;
 8025c24:	ee70 8a28 	vadd.f32	s17, s0, s17
		tAllpass_setDelay(&r->f1_allpass, SAMP(30.51f) + tCycle_tick(&r->f1_lfo) * SAMP(4.0f));
 8025c28:	f7fe ff2e 	bl	8024a88 <tCycle_tick>
 8025c2c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8025c30:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8025c34:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8025ed8 <tDattorroReverb_tickStereo+0x310>
 8025c38:	4628      	mov	r0, r5
		f1_delay_2_sample = tTapeDelay_tick(&r->f1_delay_2, f1_sample * 0.5f);
 8025c3a:	f104 095c 	add.w	r9, r4, #92	; 0x5c
		tAllpass_setDelay(&r->f1_allpass, SAMP(30.51f) + tCycle_tick(&r->f1_lfo) * SAMP(4.0f));
 8025c3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8025c42:	ee27 0a80 	vmul.f32	s0, s15, s0
 8025c46:	eea9 0a07 	vfma.f32	s0, s18, s14
 8025c4a:	f7fc fc7b 	bl	8022544 <tAllpass_setDelay>
		f1_sample = tAllpass_tick(&r->f1_allpass, f1_sample);
 8025c4e:	eeb0 0a68 	vmov.f32	s0, s17
 8025c52:	4628      	mov	r0, r5
 8025c54:	f7fc fc7e 	bl	8022554 <tAllpass_tick>
		f1_sample = tTapeDelay_tick(&r->f1_delay_1, f1_sample);
 8025c58:	4630      	mov	r0, r6
 8025c5a:	f7f9 fcdd 	bl	801f618 <tTapeDelay_tick>
		f1_sample = tOnePole_tick(&r->f1_filter, f1_sample);
 8025c5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025c62:	f7fc fce7 	bl	8022634 <tOnePole_tick>
		f1_sample = f1_sample + r->f1_delay_2_last * 0.5f;
 8025c66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8025c6a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
		f1_delay_2_sample = tTapeDelay_tick(&r->f1_delay_2, f1_sample * 0.5f);
 8025c6e:	4648      	mov	r0, r9
		f1_sample = f1_sample + r->f1_delay_2_last * 0.5f;
 8025c70:	eea7 0a27 	vfma.f32	s0, s14, s15
 8025c74:	eef0 8a40 	vmov.f32	s17, s0
		f1_delay_2_sample = tTapeDelay_tick(&r->f1_delay_2, f1_sample * 0.5f);
 8025c78:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025c7c:	f7f9 fccc 	bl	801f618 <tTapeDelay_tick>
 8025c80:	eef0 7a40 	vmov.f32	s15, s0
		f1_sample = tHighpass_tick(&r->f1_hp, f1_sample);
 8025c84:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8025c88:	ee38 0a80 	vadd.f32	s0, s17, s0
		r->f1_delay_2_last = f1_delay_2_sample;
 8025c8c:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
		f1_sample = tHighpass_tick(&r->f1_hp, f1_sample);
 8025c90:	f7fc fee8 	bl	8022a64 <tHighpass_tick>
		if (r->frozen)
 8025c94:	69a3      	ldr	r3, [r4, #24]
		f1_sample *= r->feedback_gain;
 8025c96:	edd4 7a04 	vldr	s15, [r4, #16]
		if (r->frozen)
 8025c9a:	2b00      	cmp	r3, #0
 8025c9c:	f040 8114 	bne.w	8025ec8 <tDattorroReverb_tickStereo+0x300>
		f1_sample *= r->feedback_gain;
 8025ca0:	ee27 0a80 	vmul.f32	s0, s15, s0
		r->f1_last = tTapeDelay_tick(&r->f1_delay_3, f1_sample);
 8025ca4:	f104 0860 	add.w	r8, r4, #96	; 0x60
		tAllpass_setDelay(&r->f2_allpass, SAMP(22.58f) + tCycle_tick(&r->f2_lfo) * SAMP(4.0f));
 8025ca8:	f104 076c 	add.w	r7, r4, #108	; 0x6c
		f2_sample = tTapeDelay_tick(&r->f2_delay_1, f2_sample);
 8025cac:	f104 0570 	add.w	r5, r4, #112	; 0x70
		f2_delay_2_sample = tTapeDelay_tick(&r->f2_delay_2, f2_sample * 0.5f);
 8025cb0:	f104 0b78 	add.w	fp, r4, #120	; 0x78
		r->f1_last = tTapeDelay_tick(&r->f1_delay_3, f1_sample);
 8025cb4:	4640      	mov	r0, r8
 8025cb6:	f7f9 fcaf 	bl	801f618 <tTapeDelay_tick>
		tAllpass_setDelay(&r->f2_allpass, SAMP(22.58f) + tCycle_tick(&r->f2_lfo) * SAMP(4.0f));
 8025cba:	f104 0084 	add.w	r0, r4, #132	; 0x84
		r->f1_last = tTapeDelay_tick(&r->f1_delay_3, f1_sample);
 8025cbe:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
		f2_sample = in_sample + r->f1_last;
 8025cc2:	ee30 8a08 	vadd.f32	s16, s0, s16
		tAllpass_setDelay(&r->f2_allpass, SAMP(22.58f) + tCycle_tick(&r->f2_lfo) * SAMP(4.0f));
 8025cc6:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
 8025cca:	f7fe fedd 	bl	8024a88 <tCycle_tick>
 8025cce:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8025cd2:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8025cd6:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8025edc <tDattorroReverb_tickStereo+0x314>
 8025cda:	4638      	mov	r0, r7
 8025cdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8025ce0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8025ce4:	eea8 0a87 	vfma.f32	s0, s17, s14
 8025ce8:	f7fc fc2c 	bl	8022544 <tAllpass_setDelay>
		f2_sample = tAllpass_tick(&r->f2_allpass, f2_sample);
 8025cec:	eeb0 0a48 	vmov.f32	s0, s16
 8025cf0:	4638      	mov	r0, r7
 8025cf2:	f7fc fc2f 	bl	8022554 <tAllpass_tick>
		f2_sample = tTapeDelay_tick(&r->f2_delay_1, f2_sample);
 8025cf6:	4628      	mov	r0, r5
 8025cf8:	f7f9 fc8e 	bl	801f618 <tTapeDelay_tick>
		f2_sample = tOnePole_tick(&r->f2_filter, f2_sample);
 8025cfc:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8025d00:	f7fc fc98 	bl	8022634 <tOnePole_tick>
		f2_sample = f2_sample + r->f2_delay_2_last * 0.5f;
 8025d04:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8025d08:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
		f2_delay_2_sample = tTapeDelay_tick(&r->f2_delay_2, f2_sample * 0.5f);
 8025d0c:	4658      	mov	r0, fp
		f2_sample = f2_sample + r->f2_delay_2_last * 0.5f;
 8025d0e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8025d12:	eeb0 8a40 	vmov.f32	s16, s0
		f2_delay_2_sample = tTapeDelay_tick(&r->f2_delay_2, f2_sample * 0.5f);
 8025d16:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025d1a:	f7f9 fc7d 	bl	801f618 <tTapeDelay_tick>
 8025d1e:	eef0 7a40 	vmov.f32	s15, s0
		f2_sample = tHighpass_tick(&r->f2_hp, f2_sample);
 8025d22:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8025d26:	ee38 0a00 	vadd.f32	s0, s16, s0
		r->f2_delay_2_last = f2_delay_2_sample;
 8025d2a:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		f2_sample = tHighpass_tick(&r->f2_hp, f2_sample);
 8025d2e:	f7fc fe99 	bl	8022a64 <tHighpass_tick>
		if (r->frozen)
 8025d32:	69a3      	ldr	r3, [r4, #24]
		f2_sample *= r->feedback_gain;
 8025d34:	edd4 7a04 	vldr	s15, [r4, #16]
		if (r->frozen)
 8025d38:	2b00      	cmp	r3, #0
 8025d3a:	f000 80c8 	beq.w	8025ece <tDattorroReverb_tickStereo+0x306>
			f2_sample = 0.0f;
 8025d3e:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8025ed4 <tDattorroReverb_tickStereo+0x30c>
		r->f2_last = tTapeDelay_tick(&r->f2_delay_3, f2_sample);
 8025d42:	f104 077c 	add.w	r7, r4, #124	; 0x7c
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_2, SAMP(6.3f));
 8025d46:	ed9f aa66 	vldr	s20, [pc, #408]	; 8025ee0 <tDattorroReverb_tickStereo+0x318>
		r->f2_last = tTapeDelay_tick(&r->f2_delay_3, f2_sample);
 8025d4a:	4638      	mov	r0, r7
 8025d4c:	f7f9 fc64 	bl	801f618 <tTapeDelay_tick>
    f1_sample =     tTapeDelay_tapOut(&r->f1_delay_1, SAMP(8.9f)) +
 8025d50:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8025d54:	eddf 7a63 	vldr	s15, [pc, #396]	; 8025ee4 <tDattorroReverb_tickStereo+0x31c>
 8025d58:	4630      	mov	r0, r6
		r->f2_last = tTapeDelay_tick(&r->f2_delay_3, f2_sample);
 8025d5a:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    f1_sample =     tTapeDelay_tapOut(&r->f1_delay_1, SAMP(8.9f)) +
 8025d5e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8025d62:	f7f9 fcdf 	bl	801f724 <tTapeDelay_tapOut>
    tTapeDelay_tapOut(&r->f1_delay_1, SAMP(99.8f));
 8025d66:	eddf 7a60 	vldr	s15, [pc, #384]	; 8025ee8 <tDattorroReverb_tickStereo+0x320>
    f1_sample =     tTapeDelay_tapOut(&r->f1_delay_1, SAMP(8.9f)) +
 8025d6a:	eeb0 8a40 	vmov.f32	s16, s0
    tTapeDelay_tapOut(&r->f1_delay_1, SAMP(99.8f));
 8025d6e:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8025d72:	4630      	mov	r0, r6
 8025d74:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025d78:	f7f9 fcd4 	bl	801f724 <tTapeDelay_tapOut>
    f1_sample -=    tTapeDelay_tapOut(&r->f1_delay_2, SAMP(64.2f));
 8025d7c:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8025d80:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8025eec <tDattorroReverb_tickStereo+0x324>
 8025d84:	ee38 8a00 	vadd.f32	s16, s16, s0
 8025d88:	4648      	mov	r0, r9
 8025d8a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8025d8e:	f7f9 fcc9 	bl	801f724 <tTapeDelay_tapOut>
    f1_sample +=    tTapeDelay_tapOut(&r->f1_delay_3, SAMP(67.f));
 8025d92:	eddf 7a57 	vldr	s15, [pc, #348]	; 8025ef0 <tDattorroReverb_tickStereo+0x328>
    f1_sample -=    tTapeDelay_tapOut(&r->f1_delay_2, SAMP(64.2f));
 8025d96:	eef0 8a40 	vmov.f32	s17, s0
    f1_sample +=    tTapeDelay_tapOut(&r->f1_delay_3, SAMP(67.f));
 8025d9a:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8025d9e:	4640      	mov	r0, r8
 8025da0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025da4:	f7f9 fcbe 	bl	801f724 <tTapeDelay_tapOut>
 8025da8:	ee30 9a08 	vadd.f32	s18, s0, s16
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_1, SAMP(66.8f));
 8025dac:	eddf 7a51 	vldr	s15, [pc, #324]	; 8025ef4 <tDattorroReverb_tickStereo+0x32c>
 8025db0:	4628      	mov	r0, r5
 8025db2:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
    f1_sample +=    tTapeDelay_tapOut(&r->f1_delay_3, SAMP(67.f));
 8025db6:	ee39 9a68 	vsub.f32	s18, s18, s17
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_1, SAMP(66.8f));
 8025dba:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025dbe:	f7f9 fcb1 	bl	801f724 <tTapeDelay_tapOut>
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_2, SAMP(6.3f));
 8025dc2:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_1, SAMP(66.8f));
 8025dc6:	ee39 9a40 	vsub.f32	s18, s18, s0
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_2, SAMP(6.3f));
 8025dca:	4658      	mov	r0, fp
 8025dcc:	ee27 0a8a 	vmul.f32	s0, s15, s20
 8025dd0:	f7f9 fca8 	bl	801f724 <tTapeDelay_tapOut>
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_3, SAMP(35.8f));
 8025dd4:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8025dd8:	eddf 7a47 	vldr	s15, [pc, #284]	; 8025ef8 <tDattorroReverb_tickStereo+0x330>
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_2, SAMP(6.3f));
 8025ddc:	ee39 9a40 	vsub.f32	s18, s18, s0
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_3, SAMP(35.8f));
 8025de0:	4638      	mov	r0, r7
 8025de2:	ee27 0a27 	vmul.f32	s0, s14, s15
 8025de6:	f7f9 fc9d 	bl	801f724 <tTapeDelay_tapOut>
    f2_sample =     tTapeDelay_tapOut(&r->f2_delay_1, SAMP(11.8f)) +
 8025dea:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8025dee:	eddf 7a43 	vldr	s15, [pc, #268]	; 8025efc <tDattorroReverb_tickStereo+0x334>
    f1_sample -=    tTapeDelay_tapOut(&r->f2_delay_3, SAMP(35.8f));
 8025df2:	ee39 9a40 	vsub.f32	s18, s18, s0
    f2_sample =     tTapeDelay_tapOut(&r->f2_delay_1, SAMP(11.8f)) +
 8025df6:	4628      	mov	r0, r5
 8025df8:	ee27 0a27 	vmul.f32	s0, s14, s15
 8025dfc:	f7f9 fc92 	bl	801f724 <tTapeDelay_tapOut>
    tTapeDelay_tapOut(&r->f2_delay_1, SAMP(121.7f));
 8025e00:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8025f00 <tDattorroReverb_tickStereo+0x338>
    f2_sample =     tTapeDelay_tapOut(&r->f2_delay_1, SAMP(11.8f)) +
 8025e04:	eef0 8a40 	vmov.f32	s17, s0
    tTapeDelay_tapOut(&r->f2_delay_1, SAMP(121.7f));
 8025e08:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8025e0c:	4628      	mov	r0, r5
 8025e0e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025e12:	f7f9 fc87 	bl	801f724 <tTapeDelay_tapOut>
    f2_sample -=    tTapeDelay_tapOut(&r->f2_delay_2, SAMP(6.3f));
 8025e16:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8025e1a:	ee78 8a80 	vadd.f32	s17, s17, s0
 8025e1e:	4658      	mov	r0, fp
 8025e20:	ee27 0a8a 	vmul.f32	s0, s15, s20
 8025e24:	f7f9 fc7e 	bl	801f724 <tTapeDelay_tapOut>
    f2_sample +=    tTapeDelay_tapOut(&r->f2_delay_3, SAMP(89.7f));
 8025e28:	eddf 7a36 	vldr	s15, [pc, #216]	; 8025f04 <tDattorroReverb_tickStereo+0x33c>
    f2_sample -=    tTapeDelay_tapOut(&r->f2_delay_2, SAMP(6.3f));
 8025e2c:	eeb0 aa40 	vmov.f32	s20, s0
    f2_sample +=    tTapeDelay_tapOut(&r->f2_delay_3, SAMP(89.7f));
 8025e30:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8025e34:	4638      	mov	r0, r7
 8025e36:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025e3a:	f7f9 fc73 	bl	801f724 <tTapeDelay_tapOut>
 8025e3e:	ee30 8a28 	vadd.f32	s16, s0, s17
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_1, SAMP(70.8f));
 8025e42:	eddf 7a31 	vldr	s15, [pc, #196]	; 8025f08 <tDattorroReverb_tickStereo+0x340>
 8025e46:	4630      	mov	r0, r6
 8025e48:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
    f2_sample +=    tTapeDelay_tapOut(&r->f2_delay_3, SAMP(89.7f));
 8025e4c:	ee38 8a4a 	vsub.f32	s16, s16, s20
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_1, SAMP(70.8f));
 8025e50:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025e54:	f7f9 fc66 	bl	801f724 <tTapeDelay_tapOut>
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_2, SAMP(11.2f));
 8025e58:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8025e5c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8025f0c <tDattorroReverb_tickStereo+0x344>
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_1, SAMP(70.8f));
 8025e60:	ee38 8a40 	vsub.f32	s16, s16, s0
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_2, SAMP(11.2f));
 8025e64:	4648      	mov	r0, r9
 8025e66:	ee27 0a27 	vmul.f32	s0, s14, s15
 8025e6a:	f7f9 fc5b 	bl	801f724 <tTapeDelay_tapOut>
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_3, SAMP(4.1f));
 8025e6e:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8025e72:	eddf 7a27 	vldr	s15, [pc, #156]	; 8025f10 <tDattorroReverb_tickStereo+0x348>
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_2, SAMP(11.2f));
 8025e76:	ee38 8a40 	vsub.f32	s16, s16, s0
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_3, SAMP(4.1f));
 8025e7a:	4640      	mov	r0, r8
 8025e7c:	ee27 0a27 	vmul.f32	s0, s14, s15
 8025e80:	f7f9 fc50 	bl	801f724 <tTapeDelay_tapOut>
    output[0] = input * (1.0f - r->mix) + f1_sample  * r->mix;
 8025e84:	ed94 6a05 	vldr	s12, [r4, #20]
 8025e88:	eddf 6a22 	vldr	s13, [pc, #136]	; 8025f14 <tDattorroReverb_tickStereo+0x34c>
 8025e8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f2_sample -=    tTapeDelay_tapOut(&r->f1_delay_3, SAMP(4.1f));
 8025e90:	ee38 0a40 	vsub.f32	s0, s16, s0
    output[0] = input * (1.0f - r->mix) + f1_sample  * r->mix;
 8025e94:	ee66 7a26 	vmul.f32	s15, s12, s13
 8025e98:	ee37 6a46 	vsub.f32	s12, s14, s12
 8025e9c:	ee27 9a89 	vmul.f32	s18, s15, s18
 8025ea0:	eea6 9a29 	vfma.f32	s18, s12, s19
 8025ea4:	ed8a 9a00 	vstr	s18, [sl]
    output[1] = input * (1.0f - r->mix) + f2_sample * r->mix;
 8025ea8:	edd4 7a05 	vldr	s15, [r4, #20]
 8025eac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8025eb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8025eb4:	ee20 0a26 	vmul.f32	s0, s0, s13
 8025eb8:	eea7 0a29 	vfma.f32	s0, s14, s19
 8025ebc:	ed8a 0a01 	vstr	s0, [sl, #4]
}
 8025ec0:	ecbd 8b06 	vpop	{d8-d10}
 8025ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			f1_sample = 0.0f;
 8025ec8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8025ed4 <tDattorroReverb_tickStereo+0x30c>
 8025ecc:	e6ea      	b.n	8025ca4 <tDattorroReverb_tickStereo+0xdc>
		f2_sample *= r->feedback_gain;
 8025ece:	ee27 0a80 	vmul.f32	s0, s15, s0
 8025ed2:	e736      	b.n	8025d42 <tDattorroReverb_tickStereo+0x17a>
 8025ed4:	00000000 	.word	0x00000000
 8025ed8:	41f4147b 	.word	0x41f4147b
 8025edc:	41b4a3d7 	.word	0x41b4a3d7
 8025ee0:	40c9999a 	.word	0x40c9999a
 8025ee4:	410e6666 	.word	0x410e6666
 8025ee8:	42c7999a 	.word	0x42c7999a
 8025eec:	42806666 	.word	0x42806666
 8025ef0:	42860000 	.word	0x42860000
 8025ef4:	4285999a 	.word	0x4285999a
 8025ef8:	420f3333 	.word	0x420f3333
 8025efc:	413ccccd 	.word	0x413ccccd
 8025f00:	42f36666 	.word	0x42f36666
 8025f04:	42b36666 	.word	0x42b36666
 8025f08:	428d999a 	.word	0x428d999a
 8025f0c:	41333333 	.word	0x41333333
 8025f10:	40833333 	.word	0x40833333
 8025f14:	3e0f5c29 	.word	0x3e0f5c29

08025f18 <tDattorroReverb_setMix>:
{
 8025f18:	b510      	push	{r4, lr}
    _tDattorroReverb* r = *rev;
 8025f1a:	6804      	ldr	r4, [r0, #0]
    r->mix = LEAF_clip(0.0f, mix, 1.0f);
 8025f1c:	eef0 0a40 	vmov.f32	s1, s0
 8025f20:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8025f24:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8025f34 <tDattorroReverb_setMix+0x1c>
 8025f28:	f7fd feee 	bl	8023d08 <LEAF_clip>
 8025f2c:	ed84 0a05 	vstr	s0, [r4, #20]
}
 8025f30:	bd10      	pop	{r4, pc}
 8025f32:	bf00      	nop
 8025f34:	00000000 	.word	0x00000000

08025f38 <tDattorroReverb_setFreeze>:
{
 8025f38:	b570      	push	{r4, r5, r6, lr}
    _tDattorroReverb* r = *rev;
 8025f3a:	6804      	ldr	r4, [r0, #0]
    r->frozen = freeze;
 8025f3c:	61a1      	str	r1, [r4, #24]
 8025f3e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8025f42:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8025f46:	f104 0568 	add.w	r5, r4, #104	; 0x68
 8025f4a:	3484      	adds	r4, #132	; 0x84
    if (freeze)
 8025f4c:	b9a1      	cbnz	r1, 8025f78 <tDattorroReverb_setFreeze+0x40>
    	tAllpass_setGain(&r->f2_allpass, 0.7f);
 8025f4e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8025fa4 <tDattorroReverb_setFreeze+0x6c>
 8025f52:	f7fc fafb 	bl	802254c <tAllpass_setGain>
    	tAllpass_setGain(&r->f1_allpass, 0.7f);
 8025f56:	4630      	mov	r0, r6
 8025f58:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8025fa4 <tDattorroReverb_setFreeze+0x6c>
 8025f5c:	f7fc faf6 	bl	802254c <tAllpass_setGain>
    	tCycle_setFreq(&r->f1_lfo, 0.1f);
 8025f60:	4628      	mov	r0, r5
 8025f62:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8025fa8 <tDattorroReverb_setFreeze+0x70>
 8025f66:	f7fe fd81 	bl	8024a6c <tCycle_setFreq>
    	tCycle_setFreq(&r->f2_lfo, 0.07f);
 8025f6a:	4620      	mov	r0, r4
 8025f6c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8025fac <tDattorroReverb_setFreeze+0x74>
}
 8025f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    	tCycle_setFreq(&r->f2_lfo, 0.07f);
 8025f74:	f7fe bd7a 	b.w	8024a6c <tCycle_setFreq>
    	tAllpass_setGain(&r->f2_allpass, 1.0f);
 8025f78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8025f7c:	f7fc fae6 	bl	802254c <tAllpass_setGain>
    	tAllpass_setGain(&r->f1_allpass, 1.0f);
 8025f80:	4630      	mov	r0, r6
 8025f82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8025f86:	f7fc fae1 	bl	802254c <tAllpass_setGain>
    	tCycle_setFreq(&r->f1_lfo, 0.0f);
 8025f8a:	4628      	mov	r0, r5
 8025f8c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8025fb0 <tDattorroReverb_setFreeze+0x78>
 8025f90:	f7fe fd6c 	bl	8024a6c <tCycle_setFreq>
    	tCycle_setFreq(&r->f2_lfo, 0.0f);
 8025f94:	4620      	mov	r0, r4
 8025f96:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8025fb0 <tDattorroReverb_setFreeze+0x78>
}
 8025f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    	tCycle_setFreq(&r->f2_lfo, 0.0f);
 8025f9e:	f7fe bd65 	b.w	8024a6c <tCycle_setFreq>
 8025fa2:	bf00      	nop
 8025fa4:	3f333333 	.word	0x3f333333
 8025fa8:	3dcccccd 	.word	0x3dcccccd
 8025fac:	3d8f5c29 	.word	0x3d8f5c29
 8025fb0:	00000000 	.word	0x00000000

08025fb4 <tDattorroReverb_setHP>:
{
 8025fb4:	b510      	push	{r4, lr}
    float newFreq = LEAF_clip(20.0f, freq, 20000.0f);
 8025fb6:	eef0 0a40 	vmov.f32	s1, s0
 8025fba:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8025fec <tDattorroReverb_setHP+0x38>
 8025fbe:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
{
 8025fc2:	ed2d 8b02 	vpush	{d8}
    _tDattorroReverb* r = *rev;
 8025fc6:	6804      	ldr	r4, [r0, #0]
    float newFreq = LEAF_clip(20.0f, freq, 20000.0f);
 8025fc8:	f7fd fe9e 	bl	8023d08 <LEAF_clip>
 8025fcc:	eeb0 8a40 	vmov.f32	s16, s0
    tHighpass_setFreq(&r->f1_hp, newFreq);
 8025fd0:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8025fd4:	f7fc fd36 	bl	8022a44 <tHighpass_setFreq>
    tHighpass_setFreq(&r->f2_hp, newFreq);
 8025fd8:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8025fdc:	eeb0 0a48 	vmov.f32	s0, s16
}
 8025fe0:	ecbd 8b02 	vpop	{d8}
 8025fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tHighpass_setFreq(&r->f2_hp, newFreq);
 8025fe8:	f7fc bd2c 	b.w	8022a44 <tHighpass_setFreq>
 8025fec:	469c4000 	.word	0x469c4000

08025ff0 <tDattorroReverb_setSize>:
{
 8025ff0:	b510      	push	{r4, lr}
    _tDattorroReverb* r = *rev;
 8025ff2:	6804      	ldr	r4, [r0, #0]
    r->size = LEAF_clip(0.01f, size*r->size_max, r->size_max);
 8025ff4:	ed94 1a08 	vldr	s2, [r4, #32]
 8025ff8:	ee61 0a00 	vmul.f32	s1, s2, s0
 8025ffc:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8026098 <tDattorroReverb_setSize+0xa8>
 8026000:	f7fd fe82 	bl	8023d08 <LEAF_clip>
    r->t = r->size * leaf.sampleRate * 0.001f;
 8026004:	4b25      	ldr	r3, [pc, #148]	; (802609c <tDattorroReverb_setSize+0xac>)
 8026006:	eddf 6a26 	vldr	s13, [pc, #152]	; 80260a0 <tDattorroReverb_setSize+0xb0>
    tTapeDelay_setDelay(&r->f1_delay_1, SAMP(141.69f));
 802600a:	f104 0054 	add.w	r0, r4, #84	; 0x54
    r->t = r->size * leaf.sampleRate * 0.001f;
 802600e:	edd3 7a00 	vldr	s15, [r3]
    r->size = LEAF_clip(0.01f, size*r->size_max, r->size_max);
 8026012:	ed84 0a07 	vstr	s0, [r4, #28]
    r->t = r->size * leaf.sampleRate * 0.001f;
 8026016:	ee67 7aa6 	vmul.f32	s15, s15, s13
    tTapeDelay_setDelay(&r->f1_delay_1, SAMP(141.69f));
 802601a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80260a4 <tDattorroReverb_setSize+0xb4>
    r->t = r->size * leaf.sampleRate * 0.001f;
 802601e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8026022:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    tTapeDelay_setDelay(&r->f1_delay_1, SAMP(141.69f));
 8026026:	ee20 0a07 	vmul.f32	s0, s0, s14
 802602a:	f7f9 fb6b 	bl	801f704 <tTapeDelay_setDelay>
    tTapeDelay_setDelay(&r->f1_delay_2, SAMP(89.24f));
 802602e:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8026032:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80260a8 <tDattorroReverb_setSize+0xb8>
 8026036:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802603a:	ee20 0a27 	vmul.f32	s0, s0, s15
 802603e:	f7f9 fb61 	bl	801f704 <tTapeDelay_setDelay>
    tTapeDelay_setDelay(&r->f1_delay_3, SAMP(125.f));
 8026042:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8026046:	eddf 7a19 	vldr	s15, [pc, #100]	; 80260ac <tDattorroReverb_setSize+0xbc>
 802604a:	f104 0060 	add.w	r0, r4, #96	; 0x60
 802604e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026052:	f7f9 fb57 	bl	801f704 <tTapeDelay_setDelay>
    tTapeDelay_setDelay(&r->f2_delay_1, SAMP(149.62f));
 8026056:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 802605a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80260b0 <tDattorroReverb_setSize+0xc0>
 802605e:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8026062:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026066:	f7f9 fb4d 	bl	801f704 <tTapeDelay_setDelay>
    tTapeDelay_setDelay(&r->f2_delay_2, SAMP(60.48f));
 802606a:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 802606e:	eddf 7a11 	vldr	s15, [pc, #68]	; 80260b4 <tDattorroReverb_setSize+0xc4>
 8026072:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8026076:	ee20 0a27 	vmul.f32	s0, s0, s15
 802607a:	f7f9 fb43 	bl	801f704 <tTapeDelay_setDelay>
    tTapeDelay_setDelay(&r->f2_delay_3, SAMP(106.28f));
 802607e:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8026082:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80260b8 <tDattorroReverb_setSize+0xc8>
 8026086:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 802608a:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 802608e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tTapeDelay_setDelay(&r->f2_delay_3, SAMP(106.28f));
 8026092:	f7f9 bb37 	b.w	801f704 <tTapeDelay_setDelay>
 8026096:	bf00      	nop
 8026098:	3c23d70a 	.word	0x3c23d70a
 802609c:	200194e0 	.word	0x200194e0
 80260a0:	3a83126f 	.word	0x3a83126f
 80260a4:	430db0a4 	.word	0x430db0a4
 80260a8:	42b27ae1 	.word	0x42b27ae1
 80260ac:	42fa0000 	.word	0x42fa0000
 80260b0:	43159eb8 	.word	0x43159eb8
 80260b4:	4271eb85 	.word	0x4271eb85
 80260b8:	42d48f5c 	.word	0x42d48f5c

080260bc <tDattorroReverb_setInputFilter>:
{
 80260bc:	b510      	push	{r4, lr}
    _tDattorroReverb* r = *rev;
 80260be:	6804      	ldr	r4, [r0, #0]
    r->input_filter = LEAF_clip(0.0f, freq, 20000.0f);
 80260c0:	eef0 0a40 	vmov.f32	s1, s0
 80260c4:	ed9f 1a06 	vldr	s2, [pc, #24]	; 80260e0 <tDattorroReverb_setInputFilter+0x24>
 80260c8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80260e4 <tDattorroReverb_setInputFilter+0x28>
 80260cc:	f7fd fe1c 	bl	8023d08 <LEAF_clip>
    tOnePole_setFreq(&r->in_filter, r->input_filter);
 80260d0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    r->input_filter = LEAF_clip(0.0f, freq, 20000.0f);
 80260d4:	ed84 0a02 	vstr	s0, [r4, #8]
}
 80260d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tOnePole_setFreq(&r->in_filter, r->input_filter);
 80260dc:	f7fc ba8e 	b.w	80225fc <tOnePole_setFreq>
 80260e0:	469c4000 	.word	0x469c4000
 80260e4:	00000000 	.word	0x00000000

080260e8 <tDattorroReverb_setFeedbackFilter>:
{
 80260e8:	b510      	push	{r4, lr}
    _tDattorroReverb* r = *rev;
 80260ea:	6804      	ldr	r4, [r0, #0]
    r->feedback_filter = LEAF_clip(0.0f, freq, 20000.0f);
 80260ec:	eef0 0a40 	vmov.f32	s1, s0
 80260f0:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8026118 <tDattorroReverb_setFeedbackFilter+0x30>
 80260f4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 802611c <tDattorroReverb_setFeedbackFilter+0x34>
 80260f8:	f7fd fe06 	bl	8023d08 <LEAF_clip>
    tOnePole_setFreq(&r->f1_filter, r->feedback_filter);
 80260fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
    r->feedback_filter = LEAF_clip(0.0f, freq, 20000.0f);
 8026100:	ed84 0a03 	vstr	s0, [r4, #12]
    tOnePole_setFreq(&r->f1_filter, r->feedback_filter);
 8026104:	f7fc fa7a 	bl	80225fc <tOnePole_setFreq>
    tOnePole_setFreq(&r->f2_filter, r->feedback_filter);
 8026108:	ed94 0a03 	vldr	s0, [r4, #12]
 802610c:	f104 0074 	add.w	r0, r4, #116	; 0x74
}
 8026110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tOnePole_setFreq(&r->f2_filter, r->feedback_filter);
 8026114:	f7fc ba72 	b.w	80225fc <tOnePole_setFreq>
 8026118:	469c4000 	.word	0x469c4000
 802611c:	00000000 	.word	0x00000000

08026120 <tDattorroReverb_setFeedbackGain>:
    _tDattorroReverb* r = *rev;
 8026120:	6803      	ldr	r3, [r0, #0]
    r->feedback_gain = gain;
 8026122:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8026126:	4770      	bx	lr

08026128 <tBuffer_initToPool>:
{
    tBuffer_initToPool(sb, length, &leaf.mempool);
}

void  tBuffer_initToPool (tBuffer* const sb, uint32_t length, tMempool* const mp)
{
 8026128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 802612a:	6815      	ldr	r5, [r2, #0]
{
 802612c:	460e      	mov	r6, r1
 802612e:	4607      	mov	r7, r0
    _tBuffer* s = *sb = (_tBuffer*) mpool_alloc(sizeof(_tBuffer), m);
 8026130:	201c      	movs	r0, #28
 8026132:	4629      	mov	r1, r5
 8026134:	f7fd ffe8 	bl	8024108 <mpool_alloc>
 8026138:	4604      	mov	r4, r0
    s->mempool = m;
    
    s->buff = (float*) mpool_alloc( sizeof(float) * length, m);
 802613a:	4629      	mov	r1, r5
 802613c:	00b0      	lsls	r0, r6, #2
    _tBuffer* s = *sb = (_tBuffer*) mpool_alloc(sizeof(_tBuffer), m);
 802613e:	603c      	str	r4, [r7, #0]
    s->mempool = m;
 8026140:	6025      	str	r5, [r4, #0]
    s->buff = (float*) mpool_alloc( sizeof(float) * length, m);
 8026142:	f7fd ffe1 	bl	8024108 <mpool_alloc>
    
    s->bufferLength = length;
    s->recordedLength = 0;
 8026146:	2300      	movs	r3, #0
    s->buff = (float*) mpool_alloc( sizeof(float) * length, m);
 8026148:	6060      	str	r0, [r4, #4]
    s->active = 0;
 802614a:	61a3      	str	r3, [r4, #24]
    s->idx = 0;
 802614c:	60a3      	str	r3, [r4, #8]
    s->mode = RecordOneShot;
 802614e:	7523      	strb	r3, [r4, #20]
    s->recordedLength = 0;
 8026150:	e9c4 6303 	strd	r6, r3, [r4, #12]
}
 8026154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026156:	bf00      	nop

08026158 <tBuffer_free>:

void  tBuffer_free (tBuffer* const sb)
{
 8026158:	b510      	push	{r4, lr}
    _tBuffer* s = *sb;
 802615a:	6804      	ldr	r4, [r0, #0]
    
    mpool_free((char*)s->buff, s->mempool);
 802615c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8026160:	f7fe f87a 	bl	8024258 <mpool_free>
    mpool_free((char*)s, s->mempool);
 8026164:	6821      	ldr	r1, [r4, #0]
 8026166:	4620      	mov	r0, r4
}
 8026168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)s, s->mempool);
 802616c:	f7fe b874 	b.w	8024258 <mpool_free>

08026170 <tBuffer_tick>:

void tBuffer_tick (tBuffer* const sb, float sample)
{
    _tBuffer* s = *sb;
 8026170:	6803      	ldr	r3, [r0, #0]
    
    if (s->active == 1)
 8026172:	699a      	ldr	r2, [r3, #24]
 8026174:	2a01      	cmp	r2, #1
 8026176:	d000      	beq.n	802617a <tBuffer_tick+0xa>
                s->idx = 0;
            }
        }
        s->recordedLength = s->idx;
    }
}
 8026178:	4770      	bx	lr
        s->buff[s->idx] = sample;
 802617a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 802617e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8026182:	ed82 0a00 	vstr	s0, [r2]
        if (s->idx >= s->bufferLength)
 8026186:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
        s->idx += 1;
 802618a:	3201      	adds	r2, #1
        if (s->idx >= s->bufferLength)
 802618c:	428a      	cmp	r2, r1
        s->idx += 1;
 802618e:	609a      	str	r2, [r3, #8]
        if (s->idx >= s->bufferLength)
 8026190:	d304      	bcc.n	802619c <tBuffer_tick+0x2c>
            if (s->mode == RecordOneShot)
 8026192:	7d19      	ldrb	r1, [r3, #20]
 8026194:	b921      	cbnz	r1, 80261a0 <tBuffer_tick+0x30>
    s->idx = 0;
}

void  tBuffer_stop(tBuffer* const sb)
{
    _tBuffer* s = *sb;
 8026196:	6802      	ldr	r2, [r0, #0]
    s->active = 0;
 8026198:	6191      	str	r1, [r2, #24]
 802619a:	689a      	ldr	r2, [r3, #8]
        s->recordedLength = s->idx;
 802619c:	611a      	str	r2, [r3, #16]
}
 802619e:	4770      	bx	lr
            else if (s->mode == RecordLoop)
 80261a0:	2901      	cmp	r1, #1
 80261a2:	d1fb      	bne.n	802619c <tBuffer_tick+0x2c>
                s->idx = 0;
 80261a4:	2100      	movs	r1, #0
 80261a6:	460a      	mov	r2, r1
 80261a8:	6099      	str	r1, [r3, #8]
 80261aa:	e7f7      	b.n	802619c <tBuffer_tick+0x2c>

080261ac <tBuffer_get>:
    if ((idx < 0) || (idx >= s->bufferLength)) return 0.f;
 80261ac:	2900      	cmp	r1, #0
 80261ae:	db09      	blt.n	80261c4 <tBuffer_get+0x18>
    _tBuffer* s = *sb;
 80261b0:	6803      	ldr	r3, [r0, #0]
    if ((idx < 0) || (idx >= s->bufferLength)) return 0.f;
 80261b2:	68da      	ldr	r2, [r3, #12]
 80261b4:	428a      	cmp	r2, r1
 80261b6:	d905      	bls.n	80261c4 <tBuffer_get+0x18>
    return s->buff[idx];
 80261b8:	685b      	ldr	r3, [r3, #4]
 80261ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80261be:	ed91 0a00 	vldr	s0, [r1]
 80261c2:	4770      	bx	lr
    if ((idx < 0) || (idx >= s->bufferLength)) return 0.f;
 80261c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80261cc <tBuffer_get+0x20>
}
 80261c8:	4770      	bx	lr
 80261ca:	bf00      	nop
 80261cc:	00000000 	.word	0x00000000

080261d0 <tBuffer_record>:
    _tBuffer* s = *sb;
 80261d0:	6803      	ldr	r3, [r0, #0]
    s->active = 1;
 80261d2:	2101      	movs	r1, #1
    s->idx = 0;
 80261d4:	2200      	movs	r2, #0
    s->active = 1;
 80261d6:	6199      	str	r1, [r3, #24]
    s->idx = 0;
 80261d8:	609a      	str	r2, [r3, #8]
}
 80261da:	4770      	bx	lr

080261dc <tBuffer_stop>:
    _tBuffer* s = *sb;
 80261dc:	6803      	ldr	r3, [r0, #0]
    s->active = 0;
 80261de:	2200      	movs	r2, #0
 80261e0:	619a      	str	r2, [r3, #24]
}
 80261e2:	4770      	bx	lr

080261e4 <tBuffer_getRecordPosition>:

int   tBuffer_getRecordPosition(tBuffer* const sb)
{
    _tBuffer* s = *sb;
    return s->idx;
 80261e4:	6803      	ldr	r3, [r0, #0]
}
 80261e6:	6898      	ldr	r0, [r3, #8]
 80261e8:	4770      	bx	lr
 80261ea:	bf00      	nop

080261ec <tBuffer_setRecordPosition>:

void   tBuffer_setRecordPosition(tBuffer* const sb, int pos)
{
    _tBuffer* s = *sb;
 80261ec:	6803      	ldr	r3, [r0, #0]
    s->idx = pos;
 80261ee:	6099      	str	r1, [r3, #8]
}
 80261f0:	4770      	bx	lr
 80261f2:	bf00      	nop

080261f4 <tBuffer_setRecordMode>:

void  tBuffer_setRecordMode (tBuffer* const sb, RecordMode mode)
{
    _tBuffer* s = *sb;
 80261f4:	6803      	ldr	r3, [r0, #0]
    s->mode = mode;
 80261f6:	7519      	strb	r1, [r3, #20]
}
 80261f8:	4770      	bx	lr
 80261fa:	bf00      	nop

080261fc <tBuffer_getRecordedLength>:
}

uint32_t tBuffer_getRecordedLength(tBuffer* const sb)
{
    _tBuffer* s = *sb;
    return s->recordedLength;
 80261fc:	6803      	ldr	r3, [r0, #0]
}
 80261fe:	6918      	ldr	r0, [r3, #16]
 8026200:	4770      	bx	lr
 8026202:	bf00      	nop

08026204 <tBuffer_setRecordedLength>:

void tBuffer_setRecordedLength(tBuffer* const sb, int length)
{
    _tBuffer* s = *sb;
 8026204:	6803      	ldr	r3, [r0, #0]
    s->recordedLength = length;
 8026206:	6119      	str	r1, [r3, #16]
}
 8026208:	4770      	bx	lr
 802620a:	bf00      	nop

0802620c <tBuffer_isActive>:

int tBuffer_isActive(tBuffer* const sb)
{
    _tBuffer* s = *sb;
    return s->active;
 802620c:	6803      	ldr	r3, [r0, #0]
}
 802620e:	6998      	ldr	r0, [r3, #24]
 8026210:	4770      	bx	lr
 8026212:	bf00      	nop

08026214 <tSampler_init>:
static void handleStartEndChange(tSampler* const sp);

static void attemptStartEndChange(tSampler* const sp);

void tSampler_init(tSampler* const sp, tBuffer* const b)
{
 8026214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    tSampler_initToPool(sp, b, &leaf.mempool);
}

void tSampler_initToPool(tSampler* const sp, tBuffer* const b, tMempool* const mp)
{
    _tMempool* m = *mp;
 8026218:	4e23      	ldr	r6, [pc, #140]	; (80262a8 <tSampler_init+0x94>)
{
 802621a:	4681      	mov	r9, r0
 802621c:	4688      	mov	r8, r1
    _tSampler* p = *sp = (_tSampler*) mpool_alloc(sizeof(_tSampler), m);
 802621e:	2054      	movs	r0, #84	; 0x54
    
    _tBuffer* s = *b;
    
    p->samp = s;
    
    p->active = 0;
 8026220:	2500      	movs	r5, #0
{
 8026222:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8026226:	f856 7f18 	ldr.w	r7, [r6, #24]!
    p->start = 0;
    p->end = 0;
    
    p->len = p->end - p->start;
    
    p->idx = 0.f;
 802622a:	ed9f 8a20 	vldr	s16, [pc, #128]	; 80262ac <tSampler_init+0x98>
    _tSampler* p = *sp = (_tSampler*) mpool_alloc(sizeof(_tSampler), m);
 802622e:	4639      	mov	r1, r7
 8026230:	f7fd ff6a 	bl	8024108 <mpool_alloc>
 8026234:	4604      	mov	r4, r0
 8026236:	f8c9 0000 	str.w	r0, [r9]
    
    p->mode = PlayNormal;
    
    p->cfxlen = 500; // default 300 sample crossfade
    
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 802623a:	4632      	mov	r2, r6
    p->mempool = m;
 802623c:	6007      	str	r7, [r0, #0]
    p->inc = 1.f;
 802623e:	f04f 5e7e 	mov.w	lr, #1065353216	; 0x3f800000
    _tBuffer* s = *b;
 8026242:	f8d8 3000 	ldr.w	r3, [r8]
    p->iinc = 1.f;
 8026246:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
 802624a:	f240 1001 	movw	r0, #257	; 0x101
    p->cfxlen = 500; // default 300 sample crossfade
 802624e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 8026252:	f104 0608 	add.w	r6, r4, #8
    p->samp = s;
 8026256:	6063      	str	r3, [r4, #4]
    p->flip = 1;
 8026258:	2301      	movs	r3, #1
    p->inc = 1.f;
 802625a:	f8c4 e010 	str.w	lr, [r4, #16]
    p->iinc = 1.f;
 802625e:	f8c4 c018 	str.w	ip, [r4, #24]
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 8026262:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
    p->flip = 1;
 8026266:	77a3      	strb	r3, [r4, #30]
    p->iinc = 1.f;
 8026268:	83a0      	strh	r0, [r4, #28]
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 802626a:	4630      	mov	r0, r6
    p->cfxlen = 500; // default 300 sample crossfade
 802626c:	6361      	str	r1, [r4, #52]	; 0x34
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 802626e:	4619      	mov	r1, r3
    p->idx = 0.f;
 8026270:	ed84 8a03 	vstr	s16, [r4, #12]
    p->active = 0;
 8026274:	6465      	str	r5, [r4, #68]	; 0x44
    p->start = 0;
 8026276:	6225      	str	r5, [r4, #32]
    p->end = 0;
 8026278:	62a5      	str	r5, [r4, #40]	; 0x28
    p->len = p->end - p->start;
 802627a:	6325      	str	r5, [r4, #48]	; 0x30
    p->mode = PlayNormal;
 802627c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 8026280:	f7fb ffc8 	bl	8022214 <tRamp_initToPool>
    tRamp_setVal(&p->gain, 0.f);
 8026284:	eeb0 0a48 	vmov.f32	s0, s16
 8026288:	4630      	mov	r0, r6
 802628a:	f7fc f809 	bl	80222a0 <tRamp_setVal>
    
    p->targetstart = -1;
    p->targetend = -1;
    
    p->inCrossfade = 0;
    p->flipStart = -1;
 802628e:	4b08      	ldr	r3, [pc, #32]	; (80262b0 <tSampler_init+0x9c>)
    p->targetstart = -1;
 8026290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    p->inCrossfade = 0;
 8026294:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
    p->flipStart = -1;
 8026298:	64e3      	str	r3, [r4, #76]	; 0x4c
    p->targetstart = -1;
 802629a:	6262      	str	r2, [r4, #36]	; 0x24
    p->targetend = -1;
 802629c:	62e2      	str	r2, [r4, #44]	; 0x2c
    p->flipIdx = -1;
 802629e:	6523      	str	r3, [r4, #80]	; 0x50
}
 80262a0:	ecbd 8b02 	vpop	{d8}
 80262a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80262a8:	200194e0 	.word	0x200194e0
 80262ac:	00000000 	.word	0x00000000
 80262b0:	bf800000 	.word	0xbf800000

080262b4 <tSampler_initToPool>:
{
 80262b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80262b8:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80262bc:	6816      	ldr	r6, [r2, #0]
{
 80262be:	4681      	mov	r9, r0
 80262c0:	4688      	mov	r8, r1
    _tSampler* p = *sp = (_tSampler*) mpool_alloc(sizeof(_tSampler), m);
 80262c2:	2054      	movs	r0, #84	; 0x54
 80262c4:	4631      	mov	r1, r6
{
 80262c6:	4617      	mov	r7, r2
    _tSampler* p = *sp = (_tSampler*) mpool_alloc(sizeof(_tSampler), m);
 80262c8:	f7fd ff1e 	bl	8024108 <mpool_alloc>
 80262cc:	4604      	mov	r4, r0
 80262ce:	f8c9 0000 	str.w	r0, [r9]
    p->active = 0;
 80262d2:	2500      	movs	r5, #0
    p->mempool = m;
 80262d4:	6006      	str	r6, [r0, #0]
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 80262d6:	463a      	mov	r2, r7
    _tBuffer* s = *b;
 80262d8:	f8d8 3000 	ldr.w	r3, [r8]
    p->inc = 1.f;
 80262dc:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
    p->idx = 0.f;
 80262e0:	ed9f 8a18 	vldr	s16, [pc, #96]	; 8026344 <tSampler_initToPool+0x90>
    p->iinc = 1.f;
 80262e4:	f240 1001 	movw	r0, #257	; 0x101
    p->cfxlen = 500; // default 300 sample crossfade
 80262e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 80262ec:	f104 0608 	add.w	r6, r4, #8
    p->samp = s;
 80262f0:	6063      	str	r3, [r4, #4]
    p->iinc = 1.f;
 80262f2:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
    p->flip = 1;
 80262f6:	2301      	movs	r3, #1
    p->inc = 1.f;
 80262f8:	f8c4 c010 	str.w	ip, [r4, #16]
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 80262fc:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
    p->iinc = 1.f;
 8026300:	83a0      	strh	r0, [r4, #28]
    p->flip = 1;
 8026302:	77a3      	strb	r3, [r4, #30]
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 8026304:	4630      	mov	r0, r6
    p->cfxlen = 500; // default 300 sample crossfade
 8026306:	6361      	str	r1, [r4, #52]	; 0x34
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 8026308:	4619      	mov	r1, r3
    p->idx = 0.f;
 802630a:	ed84 8a03 	vstr	s16, [r4, #12]
    p->iinc = 1.f;
 802630e:	61a7      	str	r7, [r4, #24]
    p->active = 0;
 8026310:	6465      	str	r5, [r4, #68]	; 0x44
    p->start = 0;
 8026312:	6225      	str	r5, [r4, #32]
    p->end = 0;
 8026314:	62a5      	str	r5, [r4, #40]	; 0x28
    p->len = p->end - p->start;
 8026316:	6325      	str	r5, [r4, #48]	; 0x30
    p->mode = PlayNormal;
 8026318:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    tRamp_initToPool(&p->gain, 7.0f, 1, mp);
 802631c:	f7fb ff7a 	bl	8022214 <tRamp_initToPool>
    tRamp_setVal(&p->gain, 0.f);
 8026320:	eeb0 0a48 	vmov.f32	s0, s16
 8026324:	4630      	mov	r0, r6
 8026326:	f7fb ffbb 	bl	80222a0 <tRamp_setVal>
    p->flipStart = -1;
 802632a:	4b07      	ldr	r3, [pc, #28]	; (8026348 <tSampler_initToPool+0x94>)
    p->targetstart = -1;
 802632c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    p->inCrossfade = 0;
 8026330:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
    p->flipStart = -1;
 8026334:	64e3      	str	r3, [r4, #76]	; 0x4c
    p->targetstart = -1;
 8026336:	6262      	str	r2, [r4, #36]	; 0x24
    p->targetend = -1;
 8026338:	62e2      	str	r2, [r4, #44]	; 0x2c
    p->flipIdx = -1;
 802633a:	6523      	str	r3, [r4, #80]	; 0x50
}
 802633c:	ecbd 8b02 	vpop	{d8}
 8026340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026344:	00000000 	.word	0x00000000
 8026348:	bf800000 	.word	0xbf800000

0802634c <tSampler_free>:

void tSampler_free (tSampler* const sp)
{
 802634c:	b510      	push	{r4, lr}
    _tSampler* p = *sp;
 802634e:	6804      	ldr	r4, [r0, #0]
    tRamp_free(&p->gain);
 8026350:	f104 0008 	add.w	r0, r4, #8
 8026354:	f7fb ff92 	bl	802227c <tRamp_free>
    
    mpool_free((char*)p, p->mempool);
 8026358:	6821      	ldr	r1, [r4, #0]
 802635a:	4620      	mov	r0, r4
}
 802635c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 8026360:	f7fd bf7a 	b.w	8024258 <mpool_free>

08026364 <tSampler_setMode>:
    return p->last;
}

void tSampler_setMode      (tSampler* const sp, PlayMode mode)
{
    _tSampler* p = *sp;
 8026364:	6803      	ldr	r3, [r0, #0]
    p->mode = mode;
 8026366:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
}
 802636a:	4770      	bx	lr

0802636c <tSampler_setCrossfadeLength>:

void tSampler_setCrossfadeLength  (tSampler* const sp, uint32_t length)
{
 802636c:	b510      	push	{r4, lr}
    _tSampler* p = *sp;
 802636e:	6804      	ldr	r4, [r0, #0]
    
    uint32_t cfxlen = LEAF_clip(0, length, p->len * 0.25f);
 8026370:	ee07 1a90 	vmov	s15, r1
 8026374:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8026394 <tSampler_setCrossfadeLength+0x28>
 8026378:	ed94 1a0c 	vldr	s2, [r4, #48]	; 0x30
 802637c:	eef8 0a67 	vcvt.f32.u32	s1, s15
 8026380:	eebb 1acf 	vcvt.f32.u32	s2, s2, #2
 8026384:	f7fd fcc0 	bl	8023d08 <LEAF_clip>
 8026388:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 802638c:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    
    p->cfxlen = cfxlen;
}
 8026390:	bd10      	pop	{r4, pc}
 8026392:	bf00      	nop
 8026394:	00000000 	.word	0x00000000

08026398 <tSampler_play>:

void tSampler_play         (tSampler* const sp)
{
 8026398:	b510      	push	{r4, lr}
    _tSampler* p = *sp;
 802639a:	6804      	ldr	r4, [r0, #0]
    
    if (p->active != 0)
 802639c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 802639e:	f104 0008 	add.w	r0, r4, #8
 80263a2:	bb93      	cbnz	r3, 802640a <tSampler_play+0x72>
        
        tRamp_setDest(&p->gain, 0.f);
    }
    else
    {
        p->active = 1;
 80263a4:	2201      	movs	r2, #1
        p->retrigger = 0;
 80263a6:	6423      	str	r3, [r4, #64]	; 0x40
        
        tRamp_setDest(&p->gain, 1.f);
 80263a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
        p->active = 1;
 80263ac:	6462      	str	r2, [r4, #68]	; 0x44
        tRamp_setDest(&p->gain, 1.f);
 80263ae:	f7fb ff69 	bl	8022284 <tRamp_setDest>
        
        if (p->dir > 0)
 80263b2:	f994 301c 	ldrsb.w	r3, [r4, #28]
 80263b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80263b8:	2b00      	cmp	r3, #0
 80263ba:	6a22      	ldr	r2, [r4, #32]
        {
            if (p->flip > 0)    p->idx = p->start;
 80263bc:	f994 301d 	ldrsb.w	r3, [r4, #29]
        if (p->dir > 0)
 80263c0:	dd2e      	ble.n	8026420 <tSampler_play+0x88>
            if (p->flip > 0)    p->idx = p->start;
 80263c2:	2b00      	cmp	r3, #0
 80263c4:	dd2e      	ble.n	8026424 <tSampler_play+0x8c>
            else                p->idx = p->end;
        }
        else
        {
            if (p->flip > 0)    p->idx = p->end;
            else                p->idx = p->start;
 80263c6:	ee07 2a90 	vmov	s15, r2
 80263ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80263ce:	edc4 7a03 	vstr	s15, [r4, #12]

static void handleStartEndChange(tSampler* const sp)
{
    _tSampler* p = *sp;
    
    p->len = abs(p->end - p->start);
 80263d2:	1a8b      	subs	r3, r1, r2
    
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 80263d4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    p->len = abs(p->end - p->start);
 80263d8:	2b00      	cmp	r3, #0
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 80263da:	eef8 7a67 	vcvt.f32.u32	s15, s15
    p->len = abs(p->end - p->start);
 80263de:	bfb8      	it	lt
 80263e0:	425b      	neglt	r3, r3
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 80263e2:	ee07 3a10 	vmov	s14, r3
    p->len = abs(p->end - p->start);
 80263e6:	6323      	str	r3, [r4, #48]	; 0x30
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 80263e8:	eebb 7acf 	vcvt.f32.u32	s14, s14, #2
 80263ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80263f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263f4:	dd03      	ble.n	80263fe <tSampler_play+0x66>
 80263f6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80263fa:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    
    if (p->start > p->end)
 80263fe:	4291      	cmp	r1, r2
    {
        p->flip = -1;
 8026400:	bfb4      	ite	lt
 8026402:	23ff      	movlt	r3, #255	; 0xff
    }
    else
    {
        p->flip = 1;
 8026404:	2301      	movge	r3, #1
 8026406:	7763      	strb	r3, [r4, #29]
}
 8026408:	bd10      	pop	{r4, pc}
        p->active = -1;
 802640a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        p->retrigger = 1;
 802640e:	2301      	movs	r3, #1
        tRamp_setDest(&p->gain, 0.f);
 8026410:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8026434 <tSampler_play+0x9c>
        p->retrigger = 1;
 8026414:	e9c4 3210 	strd	r3, r2, [r4, #64]	; 0x40
}
 8026418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tRamp_setDest(&p->gain, 0.f);
 802641c:	f7fb bf32 	b.w	8022284 <tRamp_setDest>
            if (p->flip > 0)    p->idx = p->end;
 8026420:	2b00      	cmp	r3, #0
 8026422:	ddd0      	ble.n	80263c6 <tSampler_play+0x2e>
 8026424:	ee07 1a90 	vmov	s15, r1
 8026428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802642c:	edc4 7a03 	vstr	s15, [r4, #12]
 8026430:	e7cf      	b.n	80263d2 <tSampler_play+0x3a>
 8026432:	bf00      	nop
 8026434:	00000000 	.word	0x00000000

08026438 <tSampler_stop>:
    _tSampler* p = *sp;
 8026438:	6800      	ldr	r0, [r0, #0]
    p->active = -1;
 802643a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    tRamp_setDest(&p->gain, 0.f);
 802643e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 802644c <tSampler_stop+0x14>
    p->active = -1;
 8026442:	6443      	str	r3, [r0, #68]	; 0x44
    tRamp_setDest(&p->gain, 0.f);
 8026444:	3008      	adds	r0, #8
 8026446:	f7fb bf1d 	b.w	8022284 <tRamp_setDest>
 802644a:	bf00      	nop
 802644c:	00000000 	.word	0x00000000

08026450 <tSampler_setStart>:
        tSampler_setEnd(sp, p->targetend);
    }
}

void tSampler_setStart     (tSampler* const sp, int32_t start)
{
 8026450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tSampler* p = *sp;
 8026452:	6804      	ldr	r4, [r0, #0]
    if (start == p->end)
    {
        return;
    }
    */
    if (p->active) // only bother with these checks if we're actually playing
 8026454:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8026456:	2b00      	cmp	r3, #0
 8026458:	d042      	beq.n	80264e0 <tSampler_setStart+0x90>
    {
        if (start > p->end)
 802645a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802645c:	428b      	cmp	r3, r1
 802645e:	db1d      	blt.n	802649c <tSampler_setStart+0x4c>
 8026460:	2501      	movs	r5, #1
 8026462:	2700      	movs	r7, #0
        {
            tempflip = -1;
        }
        else
        {
            tempflip = 1;
 8026464:	462e      	mov	r6, r5
        }
        
        int dir = p->bnf * p->dir * tempflip;
        
        uint32_t cfxlen = p->cfxlen;
 8026466:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
        if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 802646a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 802646e:	eef8 6a47 	vcvt.f32.u32	s13, s14
        
        if (p->inCrossfade || p->flipStart >= 0)
 8026472:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
        if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 8026476:	eefb 7acf 	vcvt.f32.u32	s15, s15, #2
 802647a:	eef4 7ae6 	vcmpe.f32	s15, s13
 802647e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026482:	bf48      	it	mi
 8026484:	eebc 7ae7 	vcvtmi.u32.f32	s14, s15
        if (p->inCrossfade || p->flipStart >= 0)
 8026488:	b932      	cbnz	r2, 8026498 <tSampler_setStart+0x48>
 802648a:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 802648e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8026492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026496:	db06      	blt.n	80264a6 <tSampler_setStart+0x56>
        }
    }
    
    p->start = LEAF_clipInt(0, start, p->samp->recordedLength-1);
    handleStartEndChange(sp);
    p->targetstart = -1;
 8026498:	6261      	str	r1, [r4, #36]	; 0x24
    
}
 802649a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (start > p->end)
 802649c:	2701      	movs	r7, #1
 802649e:	2500      	movs	r5, #0
            tempflip = -1;
 80264a0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80264a4:	e7df      	b.n	8026466 <tSampler_setStart+0x16>
        int dir = p->bnf * p->dir * tempflip;
 80264a6:	f994 201e 	ldrsb.w	r2, [r4, #30]
 80264aa:	f994 c01c 	ldrsb.w	ip, [r4, #28]
 80264ae:	fb12 f20c 	smulbb	r2, r2, ip
 80264b2:	fb06 f202 	mul.w	r2, r6, r2
        if ((tempflip > 0) && (dir > 0)) // start is start and we're playing forward
 80264b6:	2a00      	cmp	r2, #0
 80264b8:	dd3c      	ble.n	8026534 <tSampler_setStart+0xe4>
 80264ba:	2d00      	cmp	r5, #0
 80264bc:	d03a      	beq.n	8026534 <tSampler_setStart+0xe4>
            if (start > p->idx)// start given is after current index or we're in a crossfade
 80264be:	ee07 1a90 	vmov	s15, r1
 80264c2:	edd4 6a03 	vldr	s13, [r4, #12]
 80264c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80264ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 80264ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80264d2:	dc3e      	bgt.n	8026552 <tSampler_setStart+0x102>
        if (tempflip != p->flip && p->flipStart < 0)
 80264d4:	f994 301d 	ldrsb.w	r3, [r4, #29]
 80264d8:	42b3      	cmp	r3, r6
 80264da:	d001      	beq.n	80264e0 <tSampler_setStart+0x90>
            p->flipIdx = 0;
 80264dc:	2300      	movs	r3, #0
 80264de:	6523      	str	r3, [r4, #80]	; 0x50
    p->start = LEAF_clipInt(0, start, p->samp->recordedLength-1);
 80264e0:	6863      	ldr	r3, [r4, #4]
 80264e2:	4605      	mov	r5, r0
 80264e4:	2000      	movs	r0, #0
 80264e6:	691a      	ldr	r2, [r3, #16]
 80264e8:	3a01      	subs	r2, #1
 80264ea:	f7fd fc21 	bl	8023d30 <LEAF_clipInt>
 80264ee:	6220      	str	r0, [r4, #32]
    handleStartEndChange(sp);
 80264f0:	682b      	ldr	r3, [r5, #0]
    p->len = abs(p->end - p->start);
 80264f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80264f4:	6a18      	ldr	r0, [r3, #32]
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 80264f6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    p->len = abs(p->end - p->start);
 80264fa:	1a11      	subs	r1, r2, r0
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 80264fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    p->len = abs(p->end - p->start);
 8026500:	2900      	cmp	r1, #0
 8026502:	bfb8      	it	lt
 8026504:	4249      	neglt	r1, r1
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026506:	ee07 1a10 	vmov	s14, r1
    p->len = abs(p->end - p->start);
 802650a:	6319      	str	r1, [r3, #48]	; 0x30
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 802650c:	eebb 7acf 	vcvt.f32.u32	s14, s14, #2
 8026510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026518:	dd03      	ble.n	8026522 <tSampler_setStart+0xd2>
 802651a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 802651e:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
        p->flip = -1;
 8026522:	4282      	cmp	r2, r0
 8026524:	bfac      	ite	ge
 8026526:	2201      	movge	r2, #1
 8026528:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
    p->targetstart = -1;
 802652c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026530:	775a      	strb	r2, [r3, #29]
 8026532:	e7b1      	b.n	8026498 <tSampler_setStart+0x48>
        else if ((tempflip < 0) && (dir < 0)) // start is end and we're playing in reverse
 8026534:	2a00      	cmp	r2, #0
 8026536:	dacd      	bge.n	80264d4 <tSampler_setStart+0x84>
 8026538:	2f00      	cmp	r7, #0
 802653a:	d0cb      	beq.n	80264d4 <tSampler_setStart+0x84>
            if (start < p->idx)// start given is before current index or we're in a crossfade
 802653c:	ee07 1a90 	vmov	s15, r1
 8026540:	edd4 6a03 	vldr	s13, [r4, #12]
 8026544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026548:	eef4 7ae6 	vcmpe.f32	s15, s13
 802654c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026550:	d5c0      	bpl.n	80264d4 <tSampler_setStart+0x84>
                float tempLen = abs(p->end - start) * 0.25f;
 8026552:	1a5b      	subs	r3, r3, r1
                if (cfxlen > tempLen)
 8026554:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                p->targetstart = start;
 8026558:	6261      	str	r1, [r4, #36]	; 0x24
                float tempLen = abs(p->end - start) * 0.25f;
 802655a:	2b00      	cmp	r3, #0
 802655c:	bfb8      	it	lt
 802655e:	425b      	neglt	r3, r3
 8026560:	ee07 3a90 	vmov	s15, r3
 8026564:	eefa 7acf 	vcvt.f32.s32	s15, s15, #2
                if (cfxlen > tempLen)
 8026568:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802656c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026570:	dd93      	ble.n	802649a <tSampler_setStart+0x4a>
                    p->cfxlen = tempLen;
 8026572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8026576:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
}
 802657a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802657c <tSampler_setEnd>:

void tSampler_setEnd       (tSampler* const sp, int32_t end)
{
 802657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tSampler* p = *sp;
 802657e:	6804      	ldr	r4, [r0, #0]
    if (end == p->start)
    {
        return;
    }
    */
    if (p->active) // only bother with these checks if we're actually playing
 8026580:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8026582:	2b00      	cmp	r3, #0
 8026584:	d042      	beq.n	802660c <tSampler_setEnd+0x90>
    {
        if (p->start > end)
 8026586:	6a23      	ldr	r3, [r4, #32]
 8026588:	428b      	cmp	r3, r1
 802658a:	dc1d      	bgt.n	80265c8 <tSampler_setEnd+0x4c>
 802658c:	2501      	movs	r5, #1
 802658e:	2700      	movs	r7, #0
        {
            tempflip = -1;
        }
        else
        {
            tempflip = 1;
 8026590:	462e      	mov	r6, r5
        }
        
        int dir = p->bnf * p->dir * tempflip;
        
        uint32_t cfxlen = p->cfxlen;
 8026592:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
        if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 8026596:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 802659a:	eef8 6a47 	vcvt.f32.u32	s13, s14
        
        if (p->inCrossfade || p->flipStart >= 0)
 802659e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
        if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 80265a2:	eefb 7acf 	vcvt.f32.u32	s15, s15, #2
 80265a6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80265aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80265ae:	bf48      	it	mi
 80265b0:	eebc 7ae7 	vcvtmi.u32.f32	s14, s15
        if (p->inCrossfade || p->flipStart >= 0)
 80265b4:	b932      	cbnz	r2, 80265c4 <tSampler_setEnd+0x48>
 80265b6:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 80265ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80265be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80265c2:	db06      	blt.n	80265d2 <tSampler_setEnd+0x56>
        }
    }
    
    p->end = LEAF_clipInt(0, end, p->samp->recordedLength-1);
    handleStartEndChange(sp);
    p->targetend = -1;
 80265c4:	62e1      	str	r1, [r4, #44]	; 0x2c
}
 80265c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (p->start > end)
 80265c8:	2701      	movs	r7, #1
 80265ca:	2500      	movs	r5, #0
            tempflip = -1;
 80265cc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80265d0:	e7df      	b.n	8026592 <tSampler_setEnd+0x16>
        int dir = p->bnf * p->dir * tempflip;
 80265d2:	f994 201e 	ldrsb.w	r2, [r4, #30]
 80265d6:	f994 c01c 	ldrsb.w	ip, [r4, #28]
 80265da:	fb12 f20c 	smulbb	r2, r2, ip
 80265de:	fb06 f202 	mul.w	r2, r6, r2
        if (tempflip > 0 && dir < 0) // end is end and we're playing in reverse
 80265e2:	2a00      	cmp	r2, #0
 80265e4:	da3c      	bge.n	8026660 <tSampler_setEnd+0xe4>
 80265e6:	2d00      	cmp	r5, #0
 80265e8:	d03a      	beq.n	8026660 <tSampler_setEnd+0xe4>
            if (end < p->idx) // end given is before current index or we're in a crossfade
 80265ea:	ee07 1a90 	vmov	s15, r1
 80265ee:	edd4 6a03 	vldr	s13, [r4, #12]
 80265f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80265f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80265fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80265fe:	d43e      	bmi.n	802667e <tSampler_setEnd+0x102>
        if (tempflip != p->flip && p->flipStart < 0)
 8026600:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8026604:	42b3      	cmp	r3, r6
 8026606:	d001      	beq.n	802660c <tSampler_setEnd+0x90>
            p->flipIdx = 0;
 8026608:	2300      	movs	r3, #0
 802660a:	6523      	str	r3, [r4, #80]	; 0x50
    p->end = LEAF_clipInt(0, end, p->samp->recordedLength-1);
 802660c:	6863      	ldr	r3, [r4, #4]
 802660e:	4605      	mov	r5, r0
 8026610:	2000      	movs	r0, #0
 8026612:	691a      	ldr	r2, [r3, #16]
 8026614:	3a01      	subs	r2, #1
 8026616:	f7fd fb8b 	bl	8023d30 <LEAF_clipInt>
 802661a:	62a0      	str	r0, [r4, #40]	; 0x28
    handleStartEndChange(sp);
 802661c:	682b      	ldr	r3, [r5, #0]
    p->len = abs(p->end - p->start);
 802661e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026620:	6a18      	ldr	r0, [r3, #32]
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026622:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    p->len = abs(p->end - p->start);
 8026626:	1a11      	subs	r1, r2, r0
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026628:	eef8 7a67 	vcvt.f32.u32	s15, s15
    p->len = abs(p->end - p->start);
 802662c:	2900      	cmp	r1, #0
 802662e:	bfb8      	it	lt
 8026630:	4249      	neglt	r1, r1
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026632:	ee07 1a10 	vmov	s14, r1
    p->len = abs(p->end - p->start);
 8026636:	6319      	str	r1, [r3, #48]	; 0x30
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026638:	eebb 7acf 	vcvt.f32.u32	s14, s14, #2
 802663c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026644:	dd03      	ble.n	802664e <tSampler_setEnd+0xd2>
 8026646:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 802664a:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
        p->flip = -1;
 802664e:	4282      	cmp	r2, r0
 8026650:	bfac      	ite	ge
 8026652:	2201      	movge	r2, #1
 8026654:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
    p->targetend = -1;
 8026658:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802665c:	775a      	strb	r2, [r3, #29]
 802665e:	e7b1      	b.n	80265c4 <tSampler_setEnd+0x48>
        else if (tempflip < 0 && dir > 0) // end is start and we're playing forward
 8026660:	2a00      	cmp	r2, #0
 8026662:	ddcd      	ble.n	8026600 <tSampler_setEnd+0x84>
 8026664:	2f00      	cmp	r7, #0
 8026666:	d0cb      	beq.n	8026600 <tSampler_setEnd+0x84>
            if (end > p->idx) // end given is after current index or we're in a crossfade
 8026668:	ee07 1a90 	vmov	s15, r1
 802666c:	edd4 6a03 	vldr	s13, [r4, #12]
 8026670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026674:	eef4 7ae6 	vcmpe.f32	s15, s13
 8026678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802667c:	ddc0      	ble.n	8026600 <tSampler_setEnd+0x84>
                float tempLen = abs(end - p->start) * 0.25f;
 802667e:	1acb      	subs	r3, r1, r3
                if (cfxlen > tempLen)
 8026680:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                p->targetend = end;
 8026684:	62e1      	str	r1, [r4, #44]	; 0x2c
                float tempLen = abs(end - p->start) * 0.25f;
 8026686:	2b00      	cmp	r3, #0
 8026688:	bfb8      	it	lt
 802668a:	425b      	neglt	r3, r3
 802668c:	ee07 3a90 	vmov	s15, r3
 8026690:	eefa 7acf 	vcvt.f32.s32	s15, s15, #2
                if (cfxlen > tempLen)
 8026694:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8026698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802669c:	dd93      	ble.n	80265c6 <tSampler_setEnd+0x4a>
                    p->cfxlen = tempLen;
 802669e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80266a2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
}
 80266a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080266a8 <tSampler_tick>:
{
 80266a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266ac:	ed2d 8b04 	vpush	{d8-d9}
    _tSampler* p = *sp;
 80266b0:	6804      	ldr	r4, [r0, #0]
{
 80266b2:	b087      	sub	sp, #28
 80266b4:	4605      	mov	r5, r0
    if (p->targetstart >= 0)
 80266b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80266b8:	2900      	cmp	r1, #0
 80266ba:	db01      	blt.n	80266c0 <tSampler_tick+0x18>
        tSampler_setStart(sp, p->targetstart);
 80266bc:	f7ff fec8 	bl	8026450 <tSampler_setStart>
    if (p->targetend >= 0)
 80266c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80266c2:	2900      	cmp	r1, #0
 80266c4:	db02      	blt.n	80266cc <tSampler_tick+0x24>
        tSampler_setEnd(sp, p->targetend);
 80266c6:	4628      	mov	r0, r5
 80266c8:	f7ff ff58 	bl	802657c <tSampler_setEnd>
    if (p->active == 0)         return 0.f;
 80266cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80266ce:	2b00      	cmp	r3, #0
 80266d0:	f000 812f 	beq.w	8026932 <tSampler_tick+0x28a>
    if ((p->inc == 0.0f) || (p->len < 2))
 80266d4:	edd4 7a04 	vldr	s15, [r4, #16]
 80266d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80266dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266e0:	f000 811e 	beq.w	8026920 <tSampler_tick+0x278>
 80266e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80266e6:	2b01      	cmp	r3, #1
 80266e8:	f240 811a 	bls.w	8026920 <tSampler_tick+0x278>
    if (p->flip < 0)
 80266ec:	f994 801d 	ldrsb.w	r8, [r4, #29]
    float* buff = p->samp->buff;
 80266f0:	6862      	ldr	r2, [r4, #4]
    if (p->flip < 0)
 80266f2:	f1b8 0f00 	cmp.w	r8, #0
    int myStart = p->start;
 80266f6:	f8d4 a020 	ldr.w	sl, [r4, #32]
    float* buff = p->samp->buff;
 80266fa:	6851      	ldr	r1, [r2, #4]
    int myEnd = p->end;
 80266fc:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
    if (p->flip < 0)
 8026700:	db02      	blt.n	8026708 <tSampler_tick+0x60>
 8026702:	464b      	mov	r3, r9
    int myStart = p->start;
 8026704:	46d1      	mov	r9, sl
    int myEnd = p->end;
 8026706:	469a      	mov	sl, r3
    int dir = p->bnf * p->dir * p->flip;
 8026708:	f994 001c 	ldrsb.w	r0, [r4, #28]
 802670c:	f994 301e 	ldrsb.w	r3, [r4, #30]
    int idx = (int) p->idx;
 8026710:	edd4 7a03 	vldr	s15, [r4, #12]
    int dir = p->bnf * p->dir * p->flip;
 8026714:	fb13 f300 	smulbb	r3, r3, r0
    int length = p->samp->recordedLength;
 8026718:	f8d2 b010 	ldr.w	fp, [r2, #16]
    int idx = (int) p->idx;
 802671c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    sample = LEAF_interpolate_hermite_x (buff[i1],
 8026720:	9101      	str	r1, [sp, #4]
    int dir = p->bnf * p->dir * p->flip;
 8026722:	fb08 f803 	mul.w	r8, r8, r3
    idx += rev;
 8026726:	ee17 6a10 	vmov	r6, s14
    if (dir < 0) rev = 1;
 802672a:	ea4f 77d8 	mov.w	r7, r8, lsr #31
    float alpha = rev + (p->idx - idx) * dir;
 802672e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8026732:	ee06 8a10 	vmov	s12, r8
    idx += rev;
 8026736:	443e      	add	r6, r7
    float alpha = rev + (p->idx - idx) * dir;
 8026738:	ee07 7a10 	vmov	s14, r7
 802673c:	f1c7 0001 	rsb	r0, r7, #1
    i1 = (i1 < length*rev) ? i1 + (length * (1-rev)) : i1 - (length * rev);
 8026740:	fb07 f70b 	mul.w	r7, r7, fp
    int i1 = idx-(1*dir);
 8026744:	eba6 0208 	sub.w	r2, r6, r8
    int i3 = idx+(1*dir);
 8026748:	eb08 0306 	add.w	r3, r8, r6
 802674c:	9003      	str	r0, [sp, #12]
    float alpha = rev + (p->idx - idx) * dir;
 802674e:	eef8 8ac7 	vcvt.f32.s32	s17, s14
 8026752:	fb00 f00b 	mul.w	r0, r0, fp
    i1 = (i1 < length*rev) ? i1 + (length * (1-rev)) : i1 - (length * rev);
 8026756:	4297      	cmp	r7, r2
    float alpha = rev + (p->idx - idx) * dir;
 8026758:	ee77 7ae6 	vsub.f32	s15, s15, s13
    int i4 = idx+(2*dir);
 802675c:	eb08 0c03 	add.w	ip, r8, r3
    i1 = (i1 < length*rev) ? i1 + (length * (1-rev)) : i1 - (length * rev);
 8026760:	bfcc      	ite	gt
 8026762:	1812      	addgt	r2, r2, r0
 8026764:	1bd2      	suble	r2, r2, r7
    i2 = (i2 < length*rev) ? i2 + (length * (1-rev)) : i2 - (length * rev);
 8026766:	42b7      	cmp	r7, r6
    float alpha = rev + (p->idx - idx) * dir;
 8026768:	eeb8 9ac6 	vcvt.f32.s32	s18, s12
    sample = LEAF_interpolate_hermite_x (buff[i1],
 802676c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8026770:	9002      	str	r0, [sp, #8]
    i2 = (i2 < length*rev) ? i2 + (length * (1-rev)) : i2 - (length * rev);
 8026772:	bfcc      	ite	gt
 8026774:	eb06 0e00 	addgt.w	lr, r6, r0
 8026778:	eba6 0e07 	suble.w	lr, r6, r7
    i3 = (i3 < length*(1-rev)) ? i3 + (length * rev) : i3 - (length * (1-rev));
 802677c:	4283      	cmp	r3, r0
    float alpha = rev + (p->idx - idx) * dir;
 802677e:	eee7 8a89 	vfma.f32	s17, s15, s18
    sample = LEAF_interpolate_hermite_x (buff[i1],
 8026782:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 8026786:	ed92 0a00 	vldr	s0, [r2]
    i3 = (i3 < length*(1-rev)) ? i3 + (length * rev) : i3 - (length * (1-rev));
 802678a:	bfac      	ite	ge
 802678c:	1a1b      	subge	r3, r3, r0
 802678e:	19db      	addlt	r3, r3, r7
    i4 = (i4 < length*(1-rev)) ? i4 + (length * rev) : i4 - (length * (1-rev));
 8026790:	4584      	cmp	ip, r0
    sample = LEAF_interpolate_hermite_x (buff[i1],
 8026792:	edde 0a00 	vldr	s1, [lr]
 8026796:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    i4 = (i4 < length*(1-rev)) ? i4 + (length * rev) : i4 - (length * (1-rev));
 802679a:	bfac      	ite	ge
 802679c:	ebac 0c00 	subge.w	ip, ip, r0
 80267a0:	44bc      	addlt	ip, r7
    sample = LEAF_interpolate_hermite_x (buff[i1],
 80267a2:	eeb0 2a68 	vmov.f32	s4, s17
 80267a6:	ed93 1a00 	vldr	s2, [r3]
 80267aa:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80267ae:	eddc 1a00 	vldr	s3, [ip]
 80267b2:	f7fd fbc1 	bl	8023f38 <LEAF_interpolate_hermite_x>
    if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 80267b6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
    int32_t cfxlen = p->cfxlen;
 80267ba:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
    if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 80267be:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80267c2:	eef8 0a47 	vcvt.f32.u32	s1, s14
 80267c6:	ee07 ca10 	vmov	s14, ip
    sample = LEAF_interpolate_hermite_x (buff[i1],
 80267ca:	eeb0 8a40 	vmov.f32	s16, s0
    if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 80267ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80267d2:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80267d6:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 80267da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80267de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80267e2:	d503      	bpl.n	80267ec <tSampler_tick+0x144>
 80267e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80267e8:	ee17 ca90 	vmov	ip, s15
    if (myStart >= cfxlen) fadeLeftStart = myStart - cfxlen;
 80267ec:	45e1      	cmp	r9, ip
 80267ee:	f2c0 80a9 	blt.w	8026944 <tSampler_tick+0x29c>
 80267f2:	eba9 0e0c 	sub.w	lr, r9, ip
 80267f6:	f8cd 9004 	str.w	r9, [sp, #4]
    if (p->mode == PlayLoop)
 80267fa:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80267fe:	2a01      	cmp	r2, #1
 8026800:	f000 80ca 	beq.w	8026998 <tSampler_tick+0x2f0>
 8026804:	edd4 8a13 	vldr	s17, [r4, #76]	; 0x4c
    float inc = fmodf(p->inc, (float)p->len);
 8026808:	ed94 0a04 	vldr	s0, [r4, #16]
 802680c:	f001 f980 	bl	8027b10 <fmodf>
    p->idx += (dir * inc);
 8026810:	edd4 7a03 	vldr	s15, [r4, #12]
    if (p->flipStart >= 0)
 8026814:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    p->idx += (dir * inc);
 8026818:	eee9 7a00 	vfma.f32	s15, s18, s0
    if (p->flipStart >= 0)
 802681c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    p->idx += (dir * inc);
 8026820:	edc4 7a03 	vstr	s15, [r4, #12]
    if (p->flipStart >= 0)
 8026824:	db29      	blt.n	802687a <tSampler_tick+0x1d2>
        p->flipIdx += (-dir * inc);
 8026826:	f1c8 0300 	rsb	r3, r8, #0
 802682a:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
 802682e:	ee07 3a10 	vmov	s14, r3
 8026832:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026836:	eee7 6a00 	vfma.f32	s13, s14, s0
 802683a:	eeb0 7a66 	vmov.f32	s14, s13
        if((int)p->flipIdx < 0)
 802683e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
        p->flipIdx += (-dir * inc);
 8026842:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
        if((int)p->flipIdx < 0)
 8026846:	ee16 3a90 	vmov	r3, s13
 802684a:	2b00      	cmp	r3, #0
 802684c:	da07      	bge.n	802685e <tSampler_tick+0x1b6>
            p->idx += (float)length;
 802684e:	ee07 ba10 	vmov	s14, fp
 8026852:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026856:	ee77 7a87 	vadd.f32	s15, s15, s14
 802685a:	edc4 7a03 	vstr	s15, [r4, #12]
        if((int)p->idx >= length)
 802685e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8026862:	ee17 3a10 	vmov	r3, s14
 8026866:	455b      	cmp	r3, fp
 8026868:	db07      	blt.n	802687a <tSampler_tick+0x1d2>
            p->idx -= (float)length;
 802686a:	ee07 ba10 	vmov	s14, fp
 802686e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026872:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026876:	edc4 7a03 	vstr	s15, [r4, #12]
    _tSampler* p = *sp;
 802687a:	682f      	ldr	r7, [r5, #0]
    if (p->targetstart >= 0)
 802687c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802687e:	2900      	cmp	r1, #0
 8026880:	db02      	blt.n	8026888 <tSampler_tick+0x1e0>
        tSampler_setStart(sp, p->targetstart);
 8026882:	4628      	mov	r0, r5
 8026884:	f7ff fde4 	bl	8026450 <tSampler_setStart>
    if (p->targetend >= 0)
 8026888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802688a:	2900      	cmp	r1, #0
 802688c:	db02      	blt.n	8026894 <tSampler_tick+0x1ec>
        tSampler_setEnd(sp, p->targetend);
 802688e:	4628      	mov	r0, r5
 8026890:	f7ff fe74 	bl	802657c <tSampler_setEnd>
    if (p->mode == PlayLoop)
 8026894:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8026898:	f104 0508 	add.w	r5, r4, #8
 802689c:	2b01      	cmp	r3, #1
 802689e:	d056      	beq.n	802694e <tSampler_tick+0x2a6>
    else if (p->mode == PlayBackAndForth)
 80268a0:	2b02      	cmp	r3, #2
 80268a2:	f000 8100 	beq.w	8026aa6 <tSampler_tick+0x3fe>
    if (p->mode == PlayNormal)
 80268a6:	bb4b      	cbnz	r3, 80268fc <tSampler_tick+0x254>
    	if (p->idx < myStart)
 80268a8:	ee07 9a90 	vmov	s15, r9
 80268ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80268b0:	edd4 7a03 	vldr	s15, [r4, #12]
 80268b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80268b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268bc:	f140 80d8 	bpl.w	8026a70 <tSampler_tick+0x3c8>
    		p->idx = myEnd;
 80268c0:	ed84 7a03 	vstr	s14, [r4, #12]
    	float ticksToEnd = rev ? ((idx - myStart) * p->iinc) : ((myEnd - idx) * p->iinc);
 80268c4:	f1b8 0f00 	cmp.w	r8, #0
 80268c8:	ed94 7a06 	vldr	s14, [r4, #24]
    	if (ticksToEnd < (0.007f * leaf.sampleRate))
 80268cc:	eddf 6add 	vldr	s13, [pc, #884]	; 8026c44 <tSampler_tick+0x59c>
    	float ticksToEnd = rev ? ((idx - myStart) * p->iinc) : ((myEnd - idx) * p->iinc);
 80268d0:	bfb4      	ite	lt
 80268d2:	eba6 0309 	sublt.w	r3, r6, r9
 80268d6:	ebaa 0306 	subge.w	r3, sl, r6
 80268da:	ee07 3a90 	vmov	s15, r3
    	if (ticksToEnd < (0.007f * leaf.sampleRate))
 80268de:	4bda      	ldr	r3, [pc, #872]	; (8026c48 <tSampler_tick+0x5a0>)
    	float ticksToEnd = rev ? ((idx - myStart) * p->iinc) : ((myEnd - idx) * p->iinc);
 80268e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80268e4:	ee67 7a87 	vmul.f32	s15, s15, s14
    	if (ticksToEnd < (0.007f * leaf.sampleRate))
 80268e8:	ed93 7a00 	vldr	s14, [r3]
 80268ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80268f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80268f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268f8:	f300 8159 	bgt.w	8026bae <tSampler_tick+0x506>
    sample = sample * tRamp_tick(&p->gain);
 80268fc:	4628      	mov	r0, r5
 80268fe:	f7fb fcdd 	bl	80222bc <tRamp_tick>
    if (p->active < 0)
 8026902:	6c63      	ldr	r3, [r4, #68]	; 0x44
    sample = sample * tRamp_tick(&p->gain);
 8026904:	ee20 8a08 	vmul.f32	s16, s0, s16
    if (p->active < 0)
 8026908:	2b00      	cmp	r3, #0
 802690a:	f2c0 80e4 	blt.w	8026ad6 <tSampler_tick+0x42e>
}
 802690e:	eeb0 0a48 	vmov.f32	s0, s16
    p->last = sample;
 8026912:	ed84 8a05 	vstr	s16, [r4, #20]
}
 8026916:	b007      	add	sp, #28
 8026918:	ecbd 8b04 	vpop	{d8-d9}
 802691c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return p->last;
 8026920:	ed94 8a05 	vldr	s16, [r4, #20]
}
 8026924:	eeb0 0a48 	vmov.f32	s0, s16
 8026928:	b007      	add	sp, #28
 802692a:	ecbd 8b04 	vpop	{d8-d9}
 802692e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p->active == 0)         return 0.f;
 8026932:	ed9f 8ac6 	vldr	s16, [pc, #792]	; 8026c4c <tSampler_tick+0x5a4>
}
 8026936:	eeb0 0a48 	vmov.f32	s0, s16
 802693a:	b007      	add	sp, #28
 802693c:	ecbd 8b04 	vpop	{d8-d9}
 8026940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026944:	f8cd c004 	str.w	ip, [sp, #4]
    int32_t fadeLeftStart = 0;
 8026948:	f04f 0e00 	mov.w	lr, #0
 802694c:	e755      	b.n	80267fa <tSampler_tick+0x152>
        if((int)p->idx < myStart)
 802694e:	edd4 7a03 	vldr	s15, [r4, #12]
 8026952:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8026956:	ee17 3a10 	vmov	r3, s14
 802695a:	454b      	cmp	r3, r9
 802695c:	da0e      	bge.n	802697c <tSampler_tick+0x2d4>
            p->idx += (float)(fadeRightEnd - fadeLeftEnd);
 802695e:	9b01      	ldr	r3, [sp, #4]
 8026960:	ebaa 0303 	sub.w	r3, sl, r3
 8026964:	ee07 3a10 	vmov	s14, r3
 8026968:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802696c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8026970:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8026974:	edc4 7a03 	vstr	s15, [r4, #12]
 8026978:	ee17 3a10 	vmov	r3, s14
        if((int)p->idx > myEnd)
 802697c:	459a      	cmp	sl, r3
 802697e:	dabd      	bge.n	80268fc <tSampler_tick+0x254>
            p->idx -= (float)(fadeRightEnd - fadeLeftEnd);
 8026980:	9b01      	ldr	r3, [sp, #4]
 8026982:	ebaa 0a03 	sub.w	sl, sl, r3
 8026986:	ee07 aa10 	vmov	s14, sl
 802698a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802698e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026992:	edc4 7a03 	vstr	s15, [r4, #12]
 8026996:	e7b1      	b.n	80268fc <tSampler_tick+0x254>
 8026998:	ee07 ca90 	vmov	s15, ip
        if ((fadeLeftStart <= idx) && (idx <= fadeLeftEnd))
 802699c:	45b6      	cmp	lr, r6
 802699e:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 80269a2:	dc70      	bgt.n	8026a86 <tSampler_tick+0x3de>
 80269a4:	9b01      	ldr	r3, [sp, #4]
 80269a6:	429e      	cmp	r6, r3
 80269a8:	dc6d      	bgt.n	8026a86 <tSampler_tick+0x3de>
            offset = fadeLeftEnd - idx;
 80269aa:	1b9b      	subs	r3, r3, r6
            p->inCrossfade = 1;
 80269ac:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
            offset = fadeLeftEnd - idx;
 80269b0:	9302      	str	r3, [sp, #8]
            cdx = fadeRightEnd - offset;
 80269b2:	ebaa 0303 	sub.w	r3, sl, r3
            int c1 = cdx-(1*dir);
 80269b6:	eba3 0e08 	sub.w	lr, r3, r8
            c1 = (c1 < length * rev) ? c1 + (length * (1-rev)) : c1 - (length * rev);
 80269ba:	4577      	cmp	r7, lr
 80269bc:	f340 8127 	ble.w	8026c0e <tSampler_tick+0x566>
 80269c0:	4486      	add	lr, r0
            c2 = (c2 < length * rev) ? c2 + (length * (1-rev)) : c2 - (length * rev);
 80269c2:	429f      	cmp	r7, r3
            cfxsample = LEAF_interpolate_hermite_x (buff[c1],
 80269c4:	eeb0 2a68 	vmov.f32	s4, s17
 80269c8:	9005      	str	r0, [sp, #20]
            c2 = (c2 < length * rev) ? c2 + (length * (1-rev)) : c2 - (length * rev);
 80269ca:	bfcc      	ite	gt
 80269cc:	eb03 0c00 	addgt.w	ip, r3, r0
 80269d0:	eba3 0c07 	suble.w	ip, r3, r7
            int c3 = cdx+(1*dir);
 80269d4:	4443      	add	r3, r8
            cfxsample = LEAF_interpolate_hermite_x (buff[c1],
 80269d6:	9104      	str	r1, [sp, #16]
 80269d8:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
            c3 = (c3 < length * (1-rev)) ? c3 + (length * rev) : c3 - (length * (1-rev));
 80269dc:	4283      	cmp	r3, r0
            cfxsample = LEAF_interpolate_hermite_x (buff[c1],
 80269de:	eddc 0a00 	vldr	s1, [ip]
            c3 = (c3 < length * (1-rev)) ? c3 + (length * rev) : c3 - (length * (1-rev));
 80269e2:	bfac      	ite	ge
 80269e4:	1a1a      	subge	r2, r3, r0
 80269e6:	18fa      	addlt	r2, r7, r3
            int c4 = cdx+(2*dir);
 80269e8:	4443      	add	r3, r8
            cfxsample = LEAF_interpolate_hermite_x (buff[c1],
 80269ea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            c4 = (c4 < length * (1-rev)) ? c4 + (length * rev) : c4 - (length * (1-rev));
 80269ee:	4283      	cmp	r3, r0
            cfxsample = LEAF_interpolate_hermite_x (buff[c1],
 80269f0:	ed92 1a00 	vldr	s2, [r2]
            c4 = (c4 < length * (1-rev)) ? c4 + (length * rev) : c4 - (length * (1-rev));
 80269f4:	bfac      	ite	ge
 80269f6:	1a1b      	subge	r3, r3, r0
 80269f8:	19db      	addlt	r3, r3, r7
            cfxsample = LEAF_interpolate_hermite_x (buff[c1],
 80269fa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80269fe:	edd3 1a00 	vldr	s3, [r3]
 8026a02:	eb01 038e 	add.w	r3, r1, lr, lsl #2
 8026a06:	ed93 0a00 	vldr	s0, [r3]
 8026a0a:	f7fd fa95 	bl	8023f38 <LEAF_interpolate_hermite_x>
            crossfadeMix = (float) offset / (float) cfxlen;
 8026a0e:	eddd 7a02 	vldr	s15, [sp, #8]
 8026a12:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8026a16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8026a1a:	ee86 7aa9 	vdiv.f32	s14, s13, s19
 8026a1e:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8026a22:	ee20 0a07 	vmul.f32	s0, s0, s14
 8026a26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026a2a:	eea8 0a27 	vfma.f32	s0, s16, s15
 8026a2e:	eeb0 8a40 	vmov.f32	s16, s0
        float flipLength = fabsf(p->flipIdx - p->flipStart);
 8026a32:	ed94 7a14 	vldr	s14, [r4, #80]	; 0x50
 8026a36:	edd4 8a13 	vldr	s17, [r4, #76]	; 0x4c
 8026a3a:	ee77 7a68 	vsub.f32	s15, s14, s17
 8026a3e:	eef0 7ae7 	vabs.f32	s15, s15
        if (flipLength > cfxlen)
 8026a42:	eef4 7ae9 	vcmpe.f32	s15, s19
 8026a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a4a:	dd56      	ble.n	8026afa <tSampler_tick+0x452>
            p->flipStart = -1;
 8026a4c:	4b80      	ldr	r3, [pc, #512]	; (8026c50 <tSampler_tick+0x5a8>)
    float inc = fmodf(p->inc, (float)p->len);
 8026a4e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8026a52:	ed94 0a04 	vldr	s0, [r4, #16]
 8026a56:	eef8 0a67 	vcvt.f32.u32	s1, s15
            p->flipStart = -1;
 8026a5a:	64e3      	str	r3, [r4, #76]	; 0x4c
            p->flipIdx = -1;
 8026a5c:	6523      	str	r3, [r4, #80]	; 0x50
    float inc = fmodf(p->inc, (float)p->len);
 8026a5e:	f001 f857 	bl	8027b10 <fmodf>
    p->idx += (dir * inc);
 8026a62:	edd4 7a03 	vldr	s15, [r4, #12]
 8026a66:	eee9 7a00 	vfma.f32	s15, s18, s0
 8026a6a:	edc4 7a03 	vstr	s15, [r4, #12]
 8026a6e:	e704      	b.n	802687a <tSampler_tick+0x1d2>
    	else if (p->idx > myEnd)
 8026a70:	ee07 aa10 	vmov	s14, sl
 8026a74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8026a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a80:	f77f af20 	ble.w	80268c4 <tSampler_tick+0x21c>
 8026a84:	e71c      	b.n	80268c0 <tSampler_tick+0x218>
    int32_t fadeRightStart = fadeRightEnd - cfxlen;
 8026a86:	ebaa 0c0c 	sub.w	ip, sl, ip
        else if ((fadeRightStart <= idx) && (idx <= fadeRightEnd))
 8026a8a:	4566      	cmp	r6, ip
 8026a8c:	f2c0 80bb 	blt.w	8026c06 <tSampler_tick+0x55e>
 8026a90:	45b2      	cmp	sl, r6
 8026a92:	f2c0 80b8 	blt.w	8026c06 <tSampler_tick+0x55e>
            offset = idx - fadeRightStart;
 8026a96:	eba6 030c 	sub.w	r3, r6, ip
            p->inCrossfade = 1;
 8026a9a:	2201      	movs	r2, #1
            offset = idx - fadeRightStart;
 8026a9c:	9302      	str	r3, [sp, #8]
            cdx = fadeLeftStart + offset;
 8026a9e:	4473      	add	r3, lr
            p->inCrossfade = 1;
 8026aa0:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8026aa4:	e787      	b.n	80269b6 <tSampler_tick+0x30e>
        if (p->idx < myStart)
 8026aa6:	ee07 9a90 	vmov	s15, r9
 8026aaa:	ed94 7a03 	vldr	s14, [r4, #12]
 8026aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8026ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026aba:	f140 8081 	bpl.w	8026bc0 <tSampler_tick+0x518>
            p->idx = myStart + 1;
 8026abe:	f109 0901 	add.w	r9, r9, #1
            p->bnf = -p->bnf;
 8026ac2:	7fa3      	ldrb	r3, [r4, #30]
            p->idx = myStart + 1;
 8026ac4:	ee07 9a90 	vmov	s15, r9
            p->bnf = -p->bnf;
 8026ac8:	425b      	negs	r3, r3
            p->idx = myStart + 1;
 8026aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            p->bnf = -p->bnf;
 8026ace:	77a3      	strb	r3, [r4, #30]
            p->idx = myStart + 1;
 8026ad0:	edc4 7a03 	vstr	s15, [r4, #12]
 8026ad4:	e712      	b.n	80268fc <tSampler_tick+0x254>
        if (tRamp_sample(&p->gain) <= 0.00001f)
 8026ad6:	4628      	mov	r0, r5
 8026ad8:	f7fb fc18 	bl	802230c <tRamp_sample>
 8026adc:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8026c54 <tSampler_tick+0x5ac>
 8026ae0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8026ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026ae8:	f63f af11 	bhi.w	802690e <tSampler_tick+0x266>
            if (p->retrigger == 1)
 8026aec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026aee:	2b01      	cmp	r3, #1
 8026af0:	f000 8090 	beq.w	8026c14 <tSampler_tick+0x56c>
                p->active = 0;
 8026af4:	2300      	movs	r3, #0
 8026af6:	6463      	str	r3, [r4, #68]	; 0x44
 8026af8:	e709      	b.n	802690e <tSampler_tick+0x266>
        if (p->flipIdx >= 0)
 8026afa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8026afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b02:	db4f      	blt.n	8026ba4 <tSampler_tick+0x4fc>
            if (p->flipStart == -1)
 8026b04:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8026b08:	eef4 8a66 	vcmp.f32	s17, s13
 8026b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b10:	d06e      	beq.n	8026bf0 <tSampler_tick+0x548>
 8026b12:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8026b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8026b1a:	eec7 8aa9 	vdiv.f32	s17, s15, s19
 8026b1e:	ee76 7ae8 	vsub.f32	s15, s13, s17
 8026b22:	ee27 8a88 	vmul.f32	s16, s15, s16
            int fdx = (int) p->flipIdx;
 8026b26:	eefd 7ac7 	vcvt.s32.f32	s15, s14
            idx += (1-rev);
 8026b2a:	9a03      	ldr	r2, [sp, #12]
 8026b2c:	4416      	add	r6, r2
            int fdx = (int) p->flipIdx;
 8026b2e:	eef0 6a67 	vmov.f32	s13, s15
            float falpha = (1-rev) - (p->flipIdx - fdx) * dir;
 8026b32:	ee07 2a90 	vmov	s15, r2
 8026b36:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
            int f3 = fdx-(1*dir);
 8026b3a:	ee16 3a90 	vmov	r3, s13
            float falpha = (1-rev) - (p->flipIdx - fdx) * dir;
 8026b3e:	eef8 7ae6 	vcvt.f32.s32	s15, s13
            int f1 = fdx+(1*dir);
 8026b42:	eb08 0e03 	add.w	lr, r8, r3
            int f3 = fdx-(1*dir);
 8026b46:	eba3 0208 	sub.w	r2, r3, r8
            float falpha = (1-rev) - (p->flipIdx - fdx) * dir;
 8026b4a:	ee37 7ac7 	vsub.f32	s14, s15, s14
            f1 = (f1 < length*(1-rev)) ? f1 + (length * rev) : f1 - (length * (1-rev));
 8026b4e:	4586      	cmp	lr, r0
            int f4 = fdx-(2*dir);
 8026b50:	eba2 0c08 	sub.w	ip, r2, r8
            f1 = (f1 < length*(1-rev)) ? f1 + (length * rev) : f1 - (length * (1-rev));
 8026b54:	bfb4      	ite	lt
 8026b56:	44be      	addlt	lr, r7
 8026b58:	ebae 0e00 	subge.w	lr, lr, r0
            f2 = (f2 < length*(1-rev)) ? f2 + (length * rev) : f2 - (length * (1-rev));
 8026b5c:	4283      	cmp	r3, r0
            float falpha = (1-rev) - (p->flipIdx - fdx) * dir;
 8026b5e:	eea9 2a07 	vfma.f32	s4, s18, s14
            f2 = (f2 < length*(1-rev)) ? f2 + (length * rev) : f2 - (length * (1-rev));
 8026b62:	da43      	bge.n	8026bec <tSampler_tick+0x544>
 8026b64:	443b      	add	r3, r7
            f3 = (f3 < length*rev) ? f3 + (length * (1-rev)) : f3 - (length * rev);
 8026b66:	4297      	cmp	r7, r2
            flipsample = LEAF_interpolate_hermite_x (buff[f1],
 8026b68:	eb01 0383 	add.w	r3, r1, r3, lsl #2
            f3 = (f3 < length*rev) ? f3 + (length * (1-rev)) : f3 - (length * rev);
 8026b6c:	bfcc      	ite	gt
 8026b6e:	1812      	addgt	r2, r2, r0
 8026b70:	1bd2      	suble	r2, r2, r7
            f4 = (f4 < length*rev) ? f4 + (length * (1-rev)) : f4 - (length * rev);
 8026b72:	4567      	cmp	r7, ip
            flipsample = LEAF_interpolate_hermite_x (buff[f1],
 8026b74:	edd3 0a00 	vldr	s1, [r3]
 8026b78:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            f4 = (f4 < length*rev) ? f4 + (length * (1-rev)) : f4 - (length * rev);
 8026b7c:	bfcc      	ite	gt
 8026b7e:	4460      	addgt	r0, ip
 8026b80:	ebac 0007 	suble.w	r0, ip, r7
            flipsample = LEAF_interpolate_hermite_x (buff[f1],
 8026b84:	ed92 1a00 	vldr	s2, [r2]
 8026b88:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8026b8c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8026b90:	edd0 1a00 	vldr	s3, [r0]
 8026b94:	ed91 0a00 	vldr	s0, [r1]
 8026b98:	f7fd f9ce 	bl	8023f38 <LEAF_interpolate_hermite_x>
 8026b9c:	eea0 8a28 	vfma.f32	s16, s0, s17
 8026ba0:	edd4 8a13 	vldr	s17, [r4, #76]	; 0x4c
 8026ba4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8026ba8:	eef8 0a67 	vcvt.f32.u32	s1, s15
 8026bac:	e62c      	b.n	8026808 <tSampler_tick+0x160>
            tRamp_setDest(&p->gain, 0.f);
 8026bae:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8026c4c <tSampler_tick+0x5a4>
 8026bb2:	4628      	mov	r0, r5
 8026bb4:	f7fb fb66 	bl	8022284 <tRamp_setDest>
            p->active = -1;
 8026bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8026bbc:	6463      	str	r3, [r4, #68]	; 0x44
 8026bbe:	e69d      	b.n	80268fc <tSampler_tick+0x254>
        else if (p->idx > myEnd)
 8026bc0:	ee07 aa90 	vmov	s15, sl
 8026bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8026bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bd0:	f77f ae94 	ble.w	80268fc <tSampler_tick+0x254>
            p->idx = myEnd - 1;
 8026bd4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
            p->bnf = -p->bnf;
 8026bd8:	7fa3      	ldrb	r3, [r4, #30]
            p->idx = myEnd - 1;
 8026bda:	ee07 aa90 	vmov	s15, sl
            p->bnf = -p->bnf;
 8026bde:	425b      	negs	r3, r3
            p->idx = myEnd - 1;
 8026be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            p->bnf = -p->bnf;
 8026be4:	77a3      	strb	r3, [r4, #30]
            p->idx = myEnd - 1;
 8026be6:	edc4 7a03 	vstr	s15, [r4, #12]
 8026bea:	e687      	b.n	80268fc <tSampler_tick+0x254>
            f2 = (f2 < length*(1-rev)) ? f2 + (length * rev) : f2 - (length * (1-rev));
 8026bec:	1a1b      	subs	r3, r3, r0
 8026bee:	e7ba      	b.n	8026b66 <tSampler_tick+0x4be>
                p->flipStart = p->idx;
 8026bf0:	ed94 7a03 	vldr	s14, [r4, #12]
                p->flipIdx = p->idx;
 8026bf4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8026bf8:	ed9f 8a14 	vldr	s16, [pc, #80]	; 8026c4c <tSampler_tick+0x5a4>
                p->flipStart = p->idx;
 8026bfc:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
                p->flipIdx = p->idx;
 8026c00:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
 8026c04:	e78f      	b.n	8026b26 <tSampler_tick+0x47e>
        else p->inCrossfade = 0;
 8026c06:	2300      	movs	r3, #0
 8026c08:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8026c0c:	e711      	b.n	8026a32 <tSampler_tick+0x38a>
            c1 = (c1 < length * rev) ? c1 + (length * (1-rev)) : c1 - (length * rev);
 8026c0e:	ebae 0e07 	sub.w	lr, lr, r7
 8026c12:	e6d6      	b.n	80269c2 <tSampler_tick+0x31a>
                p->retrigger = 0;
 8026c14:	2200      	movs	r2, #0
                p->active = 1;
 8026c16:	6463      	str	r3, [r4, #68]	; 0x44
                tRamp_setDest(&p->gain, 1.f);
 8026c18:	4628      	mov	r0, r5
 8026c1a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
                p->retrigger = 0;
 8026c1e:	6422      	str	r2, [r4, #64]	; 0x40
                tRamp_setDest(&p->gain, 1.f);
 8026c20:	f7fb fb30 	bl	8022284 <tRamp_setDest>
                if (p->dir > 0)
 8026c24:	f994 301c 	ldrsb.w	r3, [r4, #28]
 8026c28:	2b00      	cmp	r3, #0
                    if (p->flip > 0)    p->idx = p->start;
 8026c2a:	f994 301d 	ldrsb.w	r3, [r4, #29]
                if (p->dir > 0)
 8026c2e:	dd13      	ble.n	8026c58 <tSampler_tick+0x5b0>
                    if (p->flip > 0)    p->idx = p->start;
 8026c30:	2b00      	cmp	r3, #0
 8026c32:	dd13      	ble.n	8026c5c <tSampler_tick+0x5b4>
                    else                p->idx = p->start;
 8026c34:	edd4 7a08 	vldr	s15, [r4, #32]
 8026c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026c3c:	edc4 7a03 	vstr	s15, [r4, #12]
 8026c40:	e665      	b.n	802690e <tSampler_tick+0x266>
 8026c42:	bf00      	nop
 8026c44:	3be56042 	.word	0x3be56042
 8026c48:	200194e0 	.word	0x200194e0
 8026c4c:	00000000 	.word	0x00000000
 8026c50:	bf800000 	.word	0xbf800000
 8026c54:	3727c5ac 	.word	0x3727c5ac
                    if (p->flip > 0)    p->idx = p->end;
 8026c58:	2b00      	cmp	r3, #0
 8026c5a:	ddeb      	ble.n	8026c34 <tSampler_tick+0x58c>
 8026c5c:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8026c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026c64:	edc4 7a03 	vstr	s15, [r4, #12]
 8026c68:	e651      	b.n	802690e <tSampler_tick+0x266>
 8026c6a:	bf00      	nop

08026c6c <tSampler_setLength>:

void    tSampler_setLength    (tSampler* const sp, int32_t length)
{
 8026c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tSampler* p = *sp;
 8026c6e:	6804      	ldr	r4, [r0, #0]
    if (length == 0) length = 1;
 8026c70:	2900      	cmp	r1, #0
 8026c72:	bf14      	ite	ne
 8026c74:	460a      	movne	r2, r1
 8026c76:	2201      	moveq	r2, #1
    tSampler_setEnd(sp, p->start + length);
 8026c78:	6a23      	ldr	r3, [r4, #32]
    if (p->active) // only bother with these checks if we're actually playing
 8026c7a:	6c65      	ldr	r5, [r4, #68]	; 0x44
    tSampler_setEnd(sp, p->start + length);
 8026c7c:	1899      	adds	r1, r3, r2
    if (p->active) // only bother with these checks if we're actually playing
 8026c7e:	2d00      	cmp	r5, #0
 8026c80:	d041      	beq.n	8026d06 <tSampler_setLength+0x9a>
        if (p->start > end)
 8026c82:	428b      	cmp	r3, r1
 8026c84:	dc1d      	bgt.n	8026cc2 <tSampler_setLength+0x56>
 8026c86:	2501      	movs	r5, #1
 8026c88:	2700      	movs	r7, #0
            tempflip = 1;
 8026c8a:	462e      	mov	r6, r5
        uint32_t cfxlen = p->cfxlen;
 8026c8c:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
        if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 8026c90:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8026c94:	eef8 6a47 	vcvt.f32.u32	s13, s14
        if (p->inCrossfade || p->flipStart >= 0)
 8026c98:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        if (p->len * 0.25f < cfxlen) cfxlen = p->len * 0.25f;
 8026c9c:	eefb 7acf 	vcvt.f32.u32	s15, s15, #2
 8026ca0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8026ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026ca8:	bf48      	it	mi
 8026caa:	eebc 7ae7 	vcvtmi.u32.f32	s14, s15
        if (p->inCrossfade || p->flipStart >= 0)
 8026cae:	b933      	cbnz	r3, 8026cbe <tSampler_setLength+0x52>
 8026cb0:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 8026cb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8026cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cbc:	db06      	blt.n	8026ccc <tSampler_setLength+0x60>
    p->targetend = -1;
 8026cbe:	62e1      	str	r1, [r4, #44]	; 0x2c
}
 8026cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (p->start > end)
 8026cc2:	2701      	movs	r7, #1
 8026cc4:	2500      	movs	r5, #0
            tempflip = -1;
 8026cc6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8026cca:	e7df      	b.n	8026c8c <tSampler_setLength+0x20>
        int dir = p->bnf * p->dir * tempflip;
 8026ccc:	f994 301e 	ldrsb.w	r3, [r4, #30]
 8026cd0:	f994 c01c 	ldrsb.w	ip, [r4, #28]
 8026cd4:	fb13 f30c 	smulbb	r3, r3, ip
 8026cd8:	fb06 f303 	mul.w	r3, r6, r3
        if (tempflip > 0 && dir < 0) // end is end and we're playing in reverse
 8026cdc:	2b00      	cmp	r3, #0
 8026cde:	da3c      	bge.n	8026d5a <tSampler_setLength+0xee>
 8026ce0:	2d00      	cmp	r5, #0
 8026ce2:	d03a      	beq.n	8026d5a <tSampler_setLength+0xee>
            if (end < p->idx) // end given is before current index or we're in a crossfade
 8026ce4:	ee07 1a90 	vmov	s15, r1
 8026ce8:	edd4 6a03 	vldr	s13, [r4, #12]
 8026cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026cf0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8026cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cf8:	d43e      	bmi.n	8026d78 <tSampler_setLength+0x10c>
        if (tempflip != p->flip && p->flipStart < 0)
 8026cfa:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8026cfe:	429e      	cmp	r6, r3
 8026d00:	d001      	beq.n	8026d06 <tSampler_setLength+0x9a>
            p->flipIdx = 0;
 8026d02:	2300      	movs	r3, #0
 8026d04:	6523      	str	r3, [r4, #80]	; 0x50
    p->end = LEAF_clipInt(0, end, p->samp->recordedLength-1);
 8026d06:	6863      	ldr	r3, [r4, #4]
 8026d08:	4605      	mov	r5, r0
 8026d0a:	2000      	movs	r0, #0
 8026d0c:	691a      	ldr	r2, [r3, #16]
 8026d0e:	3a01      	subs	r2, #1
 8026d10:	f7fd f80e 	bl	8023d30 <LEAF_clipInt>
 8026d14:	62a0      	str	r0, [r4, #40]	; 0x28
    handleStartEndChange(sp);
 8026d16:	682b      	ldr	r3, [r5, #0]
    p->len = abs(p->end - p->start);
 8026d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026d1a:	6a18      	ldr	r0, [r3, #32]
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026d1c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    p->len = abs(p->end - p->start);
 8026d20:	1a11      	subs	r1, r2, r0
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
    p->len = abs(p->end - p->start);
 8026d26:	2900      	cmp	r1, #0
 8026d28:	bfb8      	it	lt
 8026d2a:	4249      	neglt	r1, r1
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026d2c:	ee07 1a10 	vmov	s14, r1
    p->len = abs(p->end - p->start);
 8026d30:	6319      	str	r1, [r3, #48]	; 0x30
    if (p->cfxlen > (p->len * 0.25f)) p->cfxlen = p->len * 0.25f;
 8026d32:	eebb 7acf 	vcvt.f32.u32	s14, s14, #2
 8026d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d3e:	dd03      	ble.n	8026d48 <tSampler_setLength+0xdc>
 8026d40:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8026d44:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
        p->flip = -1;
 8026d48:	4282      	cmp	r2, r0
 8026d4a:	bfac      	ite	ge
 8026d4c:	2201      	movge	r2, #1
 8026d4e:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
    p->targetend = -1;
 8026d52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026d56:	775a      	strb	r2, [r3, #29]
 8026d58:	e7b1      	b.n	8026cbe <tSampler_setLength+0x52>
        else if (tempflip < 0 && dir > 0) // end is start and we're playing forward
 8026d5a:	2b00      	cmp	r3, #0
 8026d5c:	ddcd      	ble.n	8026cfa <tSampler_setLength+0x8e>
 8026d5e:	2f00      	cmp	r7, #0
 8026d60:	d0cb      	beq.n	8026cfa <tSampler_setLength+0x8e>
            if (end > p->idx) // end given is after current index or we're in a crossfade
 8026d62:	ee07 1a90 	vmov	s15, r1
 8026d66:	edd4 6a03 	vldr	s13, [r4, #12]
 8026d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8026d6e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8026d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d76:	ddc0      	ble.n	8026cfa <tSampler_setLength+0x8e>
                float tempLen = abs(end - p->start) * 0.25f;
 8026d78:	2a00      	cmp	r2, #0
                if (cfxlen > tempLen)
 8026d7a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                p->targetend = end;
 8026d7e:	62e1      	str	r1, [r4, #44]	; 0x2c
                float tempLen = abs(end - p->start) * 0.25f;
 8026d80:	bfb8      	it	lt
 8026d82:	4252      	neglt	r2, r2
 8026d84:	ee07 2a90 	vmov	s15, r2
 8026d88:	eefa 7acf 	vcvt.f32.s32	s15, s15, #2
                if (cfxlen > tempLen)
 8026d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d94:	d594      	bpl.n	8026cc0 <tSampler_setLength+0x54>
                    p->cfxlen = tempLen;
 8026d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8026d9a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
}
 8026d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08026da0 <tSampler_setRate>:

void tSampler_setRate      (tSampler* const sp, float rate)
{
    _tSampler* p = *sp;
    
    if (rate < 0.f)
 8026da0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tSampler* p = *sp;
 8026da4:	6803      	ldr	r3, [r0, #0]
    if (rate < 0.f)
 8026da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026daa:	d40a      	bmi.n	8026dc2 <tSampler_setRate+0x22>
        rate = -rate;
        p->dir = -1;
    }
    else
    {
        p->dir = 1;
 8026dac:	2201      	movs	r2, #1
    }
    
    p->inc = rate;
    p->iinc = 1.f / p->inc;
 8026dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026db2:	771a      	strb	r2, [r3, #28]
    p->inc = rate;
 8026db4:	ed83 0a04 	vstr	s0, [r3, #16]
    p->iinc = 1.f / p->inc;
 8026db8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026dbc:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8026dc0:	4770      	bx	lr
        rate = -rate;
 8026dc2:	eeb1 0a40 	vneg.f32	s0, s0
        p->dir = -1;
 8026dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8026dca:	e7f0      	b.n	8026dae <tSampler_setRate+0xe>

08026dcc <LEAF_init>:

LEAF leaf;

void LEAF_init(float sr, int blocksize, char* memory, size_t memorysize, float(*random)(void))

{
 8026dcc:	b538      	push	{r3, r4, r5, lr}
 8026dce:	460c      	mov	r4, r1
 8026dd0:	4605      	mov	r5, r0
    leaf_pool_init(memory, memorysize);
 8026dd2:	4611      	mov	r1, r2
 8026dd4:	4620      	mov	r0, r4
{
 8026dd6:	461c      	mov	r4, r3
 8026dd8:	ed2d 8b02 	vpush	{d8}
 8026ddc:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(memory, memorysize);
 8026de0:	f7fd f97a 	bl	80240d8 <leaf_pool_init>
    
    leaf.sampleRate = sr;

    leaf.blockSize = blocksize;
    
    leaf.invSampleRate = 1.0f/sr;
 8026de4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 8026de8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8026e10 <LEAF_init+0x44>
    leaf.sampleRate = sr;
 8026dec:	4a09      	ldr	r2, [pc, #36]	; (8026e14 <LEAF_init+0x48>)

    leaf.random = random;
    
    leaf.clearOnAllocation = 0;
 8026dee:	2100      	movs	r1, #0
    leaf.invSampleRate = 1.0f/sr;
 8026df0:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf.blockSize = blocksize;
 8026df4:	6095      	str	r5, [r2, #8]
    leaf.sampleRate = sr;
 8026df6:	ed82 8a00 	vstr	s16, [r2]
    leaf.clearOnAllocation = 0;
 8026dfa:	e9c2 4104 	strd	r4, r1, [r2, #16]
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 8026dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf.invSampleRate = 1.0f/sr;
 8026e02:	ed82 7a01 	vstr	s14, [r2, #4]
    leaf.twoPiTimesInvSampleRate = leaf.invSampleRate * TWO_PI;
 8026e06:	edc2 7a03 	vstr	s15, [r2, #12]
}
 8026e0a:	ecbd 8b02 	vpop	{d8}
 8026e0e:	bd38      	pop	{r3, r4, r5, pc}
 8026e10:	40c90fdb 	.word	0x40c90fdb
 8026e14:	200194e0 	.word	0x200194e0

08026e18 <LEAF_error>:
//implement a function called this in your user code to catch errors
__attribute__((weak))
uint8_t LEAF_error(uint8_t whichone)
{
    return whichone;
}
 8026e18:	4770      	bx	lr
 8026e1a:	bf00      	nop

08026e1c <__errno>:
 8026e1c:	4b01      	ldr	r3, [pc, #4]	; (8026e24 <__errno+0x8>)
 8026e1e:	6818      	ldr	r0, [r3, #0]
 8026e20:	4770      	bx	lr
 8026e22:	bf00      	nop
 8026e24:	20000450 	.word	0x20000450

08026e28 <__libc_init_array>:
 8026e28:	b570      	push	{r4, r5, r6, lr}
 8026e2a:	4e0d      	ldr	r6, [pc, #52]	; (8026e60 <__libc_init_array+0x38>)
 8026e2c:	4c0d      	ldr	r4, [pc, #52]	; (8026e64 <__libc_init_array+0x3c>)
 8026e2e:	1ba4      	subs	r4, r4, r6
 8026e30:	10a4      	asrs	r4, r4, #2
 8026e32:	2500      	movs	r5, #0
 8026e34:	42a5      	cmp	r5, r4
 8026e36:	d109      	bne.n	8026e4c <__libc_init_array+0x24>
 8026e38:	4e0b      	ldr	r6, [pc, #44]	; (8026e68 <__libc_init_array+0x40>)
 8026e3a:	4c0c      	ldr	r4, [pc, #48]	; (8026e6c <__libc_init_array+0x44>)
 8026e3c:	f002 fe18 	bl	8029a70 <_init>
 8026e40:	1ba4      	subs	r4, r4, r6
 8026e42:	10a4      	asrs	r4, r4, #2
 8026e44:	2500      	movs	r5, #0
 8026e46:	42a5      	cmp	r5, r4
 8026e48:	d105      	bne.n	8026e56 <__libc_init_array+0x2e>
 8026e4a:	bd70      	pop	{r4, r5, r6, pc}
 8026e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026e50:	4798      	blx	r3
 8026e52:	3501      	adds	r5, #1
 8026e54:	e7ee      	b.n	8026e34 <__libc_init_array+0xc>
 8026e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026e5a:	4798      	blx	r3
 8026e5c:	3501      	adds	r5, #1
 8026e5e:	e7f2      	b.n	8026e46 <__libc_init_array+0x1e>
 8026e60:	08146308 	.word	0x08146308
 8026e64:	08146308 	.word	0x08146308
 8026e68:	08146308 	.word	0x08146308
 8026e6c:	0814630c 	.word	0x0814630c

08026e70 <__itoa>:
 8026e70:	1e93      	subs	r3, r2, #2
 8026e72:	2b22      	cmp	r3, #34	; 0x22
 8026e74:	b510      	push	{r4, lr}
 8026e76:	460c      	mov	r4, r1
 8026e78:	d904      	bls.n	8026e84 <__itoa+0x14>
 8026e7a:	2300      	movs	r3, #0
 8026e7c:	700b      	strb	r3, [r1, #0]
 8026e7e:	461c      	mov	r4, r3
 8026e80:	4620      	mov	r0, r4
 8026e82:	bd10      	pop	{r4, pc}
 8026e84:	2a0a      	cmp	r2, #10
 8026e86:	d109      	bne.n	8026e9c <__itoa+0x2c>
 8026e88:	2800      	cmp	r0, #0
 8026e8a:	da07      	bge.n	8026e9c <__itoa+0x2c>
 8026e8c:	232d      	movs	r3, #45	; 0x2d
 8026e8e:	700b      	strb	r3, [r1, #0]
 8026e90:	4240      	negs	r0, r0
 8026e92:	2101      	movs	r1, #1
 8026e94:	4421      	add	r1, r4
 8026e96:	f000 f821 	bl	8026edc <__utoa>
 8026e9a:	e7f1      	b.n	8026e80 <__itoa+0x10>
 8026e9c:	2100      	movs	r1, #0
 8026e9e:	e7f9      	b.n	8026e94 <__itoa+0x24>

08026ea0 <itoa>:
 8026ea0:	f7ff bfe6 	b.w	8026e70 <__itoa>

08026ea4 <memcpy>:
 8026ea4:	b510      	push	{r4, lr}
 8026ea6:	1e43      	subs	r3, r0, #1
 8026ea8:	440a      	add	r2, r1
 8026eaa:	4291      	cmp	r1, r2
 8026eac:	d100      	bne.n	8026eb0 <memcpy+0xc>
 8026eae:	bd10      	pop	{r4, pc}
 8026eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026eb8:	e7f7      	b.n	8026eaa <memcpy+0x6>

08026eba <memset>:
 8026eba:	4402      	add	r2, r0
 8026ebc:	4603      	mov	r3, r0
 8026ebe:	4293      	cmp	r3, r2
 8026ec0:	d100      	bne.n	8026ec4 <memset+0xa>
 8026ec2:	4770      	bx	lr
 8026ec4:	f803 1b01 	strb.w	r1, [r3], #1
 8026ec8:	e7f9      	b.n	8026ebe <memset+0x4>

08026eca <stpcpy>:
 8026eca:	4603      	mov	r3, r0
 8026ecc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026ed0:	4618      	mov	r0, r3
 8026ed2:	f803 2b01 	strb.w	r2, [r3], #1
 8026ed6:	2a00      	cmp	r2, #0
 8026ed8:	d1f8      	bne.n	8026ecc <stpcpy+0x2>
 8026eda:	4770      	bx	lr

08026edc <__utoa>:
 8026edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026ede:	4b1d      	ldr	r3, [pc, #116]	; (8026f54 <__utoa+0x78>)
 8026ee0:	b08b      	sub	sp, #44	; 0x2c
 8026ee2:	4605      	mov	r5, r0
 8026ee4:	460c      	mov	r4, r1
 8026ee6:	466e      	mov	r6, sp
 8026ee8:	f103 0c20 	add.w	ip, r3, #32
 8026eec:	6818      	ldr	r0, [r3, #0]
 8026eee:	6859      	ldr	r1, [r3, #4]
 8026ef0:	4637      	mov	r7, r6
 8026ef2:	c703      	stmia	r7!, {r0, r1}
 8026ef4:	3308      	adds	r3, #8
 8026ef6:	4563      	cmp	r3, ip
 8026ef8:	463e      	mov	r6, r7
 8026efa:	d1f7      	bne.n	8026eec <__utoa+0x10>
 8026efc:	6818      	ldr	r0, [r3, #0]
 8026efe:	791b      	ldrb	r3, [r3, #4]
 8026f00:	713b      	strb	r3, [r7, #4]
 8026f02:	1e93      	subs	r3, r2, #2
 8026f04:	2b22      	cmp	r3, #34	; 0x22
 8026f06:	6038      	str	r0, [r7, #0]
 8026f08:	f04f 0300 	mov.w	r3, #0
 8026f0c:	d904      	bls.n	8026f18 <__utoa+0x3c>
 8026f0e:	7023      	strb	r3, [r4, #0]
 8026f10:	461c      	mov	r4, r3
 8026f12:	4620      	mov	r0, r4
 8026f14:	b00b      	add	sp, #44	; 0x2c
 8026f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026f18:	1e66      	subs	r6, r4, #1
 8026f1a:	fbb5 f0f2 	udiv	r0, r5, r2
 8026f1e:	af0a      	add	r7, sp, #40	; 0x28
 8026f20:	fb02 5510 	mls	r5, r2, r0, r5
 8026f24:	443d      	add	r5, r7
 8026f26:	1c59      	adds	r1, r3, #1
 8026f28:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8026f2c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8026f30:	4605      	mov	r5, r0
 8026f32:	b968      	cbnz	r0, 8026f50 <__utoa+0x74>
 8026f34:	5460      	strb	r0, [r4, r1]
 8026f36:	4423      	add	r3, r4
 8026f38:	4622      	mov	r2, r4
 8026f3a:	1b19      	subs	r1, r3, r4
 8026f3c:	1b10      	subs	r0, r2, r4
 8026f3e:	4281      	cmp	r1, r0
 8026f40:	dde7      	ble.n	8026f12 <__utoa+0x36>
 8026f42:	7811      	ldrb	r1, [r2, #0]
 8026f44:	7818      	ldrb	r0, [r3, #0]
 8026f46:	f802 0b01 	strb.w	r0, [r2], #1
 8026f4a:	f803 1901 	strb.w	r1, [r3], #-1
 8026f4e:	e7f4      	b.n	8026f3a <__utoa+0x5e>
 8026f50:	460b      	mov	r3, r1
 8026f52:	e7e2      	b.n	8026f1a <__utoa+0x3e>
 8026f54:	081459a0 	.word	0x081459a0

08026f58 <atanf>:
 8026f58:	b538      	push	{r3, r4, r5, lr}
 8026f5a:	ee10 5a10 	vmov	r5, s0
 8026f5e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8026f62:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8026f66:	eef0 7a40 	vmov.f32	s15, s0
 8026f6a:	db0f      	blt.n	8026f8c <atanf+0x34>
 8026f6c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8026f70:	dd04      	ble.n	8026f7c <atanf+0x24>
 8026f72:	ee70 7a00 	vadd.f32	s15, s0, s0
 8026f76:	eeb0 0a67 	vmov.f32	s0, s15
 8026f7a:	bd38      	pop	{r3, r4, r5, pc}
 8026f7c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80270b0 <atanf+0x158>
 8026f80:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80270b4 <atanf+0x15c>
 8026f84:	2d00      	cmp	r5, #0
 8026f86:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8026f8a:	e7f4      	b.n	8026f76 <atanf+0x1e>
 8026f8c:	4b4a      	ldr	r3, [pc, #296]	; (80270b8 <atanf+0x160>)
 8026f8e:	429c      	cmp	r4, r3
 8026f90:	dc10      	bgt.n	8026fb4 <atanf+0x5c>
 8026f92:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8026f96:	da0a      	bge.n	8026fae <atanf+0x56>
 8026f98:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80270bc <atanf+0x164>
 8026f9c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8026fa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8026fa4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8026fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026fac:	dce3      	bgt.n	8026f76 <atanf+0x1e>
 8026fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8026fb2:	e013      	b.n	8026fdc <atanf+0x84>
 8026fb4:	f000 f960 	bl	8027278 <fabsf>
 8026fb8:	4b41      	ldr	r3, [pc, #260]	; (80270c0 <atanf+0x168>)
 8026fba:	429c      	cmp	r4, r3
 8026fbc:	dc4f      	bgt.n	802705e <atanf+0x106>
 8026fbe:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8026fc2:	429c      	cmp	r4, r3
 8026fc4:	dc41      	bgt.n	802704a <atanf+0xf2>
 8026fc6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8026fca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8026fce:	eea0 7a27 	vfma.f32	s14, s0, s15
 8026fd2:	2300      	movs	r3, #0
 8026fd4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8026fd8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026fdc:	1c5a      	adds	r2, r3, #1
 8026fde:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8026fe2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80270c4 <atanf+0x16c>
 8026fe6:	eddf 5a38 	vldr	s11, [pc, #224]	; 80270c8 <atanf+0x170>
 8026fea:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80270cc <atanf+0x174>
 8026fee:	ee66 6a06 	vmul.f32	s13, s12, s12
 8026ff2:	eee6 5a87 	vfma.f32	s11, s13, s14
 8026ff6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80270d0 <atanf+0x178>
 8026ffa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8026ffe:	eddf 5a35 	vldr	s11, [pc, #212]	; 80270d4 <atanf+0x17c>
 8027002:	eee7 5a26 	vfma.f32	s11, s14, s13
 8027006:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80270d8 <atanf+0x180>
 802700a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802700e:	eddf 5a33 	vldr	s11, [pc, #204]	; 80270dc <atanf+0x184>
 8027012:	eee7 5a26 	vfma.f32	s11, s14, s13
 8027016:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80270e0 <atanf+0x188>
 802701a:	eea6 5a87 	vfma.f32	s10, s13, s14
 802701e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80270e4 <atanf+0x18c>
 8027022:	eea5 7a26 	vfma.f32	s14, s10, s13
 8027026:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80270e8 <atanf+0x190>
 802702a:	eea7 5a26 	vfma.f32	s10, s14, s13
 802702e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80270ec <atanf+0x194>
 8027032:	eea5 7a26 	vfma.f32	s14, s10, s13
 8027036:	ee27 7a26 	vmul.f32	s14, s14, s13
 802703a:	eea5 7a86 	vfma.f32	s14, s11, s12
 802703e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8027042:	d121      	bne.n	8027088 <atanf+0x130>
 8027044:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027048:	e795      	b.n	8026f76 <atanf+0x1e>
 802704a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802704e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8027052:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027056:	2301      	movs	r3, #1
 8027058:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802705c:	e7be      	b.n	8026fdc <atanf+0x84>
 802705e:	4b24      	ldr	r3, [pc, #144]	; (80270f0 <atanf+0x198>)
 8027060:	429c      	cmp	r4, r3
 8027062:	dc0b      	bgt.n	802707c <atanf+0x124>
 8027064:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8027068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802706c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8027070:	2302      	movs	r3, #2
 8027072:	ee70 6a67 	vsub.f32	s13, s0, s15
 8027076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802707a:	e7af      	b.n	8026fdc <atanf+0x84>
 802707c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8027080:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027084:	2303      	movs	r3, #3
 8027086:	e7a9      	b.n	8026fdc <atanf+0x84>
 8027088:	4a1a      	ldr	r2, [pc, #104]	; (80270f4 <atanf+0x19c>)
 802708a:	491b      	ldr	r1, [pc, #108]	; (80270f8 <atanf+0x1a0>)
 802708c:	009b      	lsls	r3, r3, #2
 802708e:	441a      	add	r2, r3
 8027090:	440b      	add	r3, r1
 8027092:	edd3 6a00 	vldr	s13, [r3]
 8027096:	ee37 7a66 	vsub.f32	s14, s14, s13
 802709a:	2d00      	cmp	r5, #0
 802709c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80270a0:	ed92 7a00 	vldr	s14, [r2]
 80270a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80270a8:	bfb8      	it	lt
 80270aa:	eef1 7a67 	vneglt.f32	s15, s15
 80270ae:	e762      	b.n	8026f76 <atanf+0x1e>
 80270b0:	bfc90fdb 	.word	0xbfc90fdb
 80270b4:	3fc90fdb 	.word	0x3fc90fdb
 80270b8:	3edfffff 	.word	0x3edfffff
 80270bc:	7149f2ca 	.word	0x7149f2ca
 80270c0:	3f97ffff 	.word	0x3f97ffff
 80270c4:	3c8569d7 	.word	0x3c8569d7
 80270c8:	3d4bda59 	.word	0x3d4bda59
 80270cc:	bd6ef16b 	.word	0xbd6ef16b
 80270d0:	3d886b35 	.word	0x3d886b35
 80270d4:	3dba2e6e 	.word	0x3dba2e6e
 80270d8:	3e124925 	.word	0x3e124925
 80270dc:	3eaaaaab 	.word	0x3eaaaaab
 80270e0:	bd15a221 	.word	0xbd15a221
 80270e4:	bd9d8795 	.word	0xbd9d8795
 80270e8:	bde38e38 	.word	0xbde38e38
 80270ec:	be4ccccd 	.word	0xbe4ccccd
 80270f0:	401bffff 	.word	0x401bffff
 80270f4:	081459c8 	.word	0x081459c8
 80270f8:	081459d8 	.word	0x081459d8

080270fc <cosf>:
 80270fc:	ee10 3a10 	vmov	r3, s0
 8027100:	b507      	push	{r0, r1, r2, lr}
 8027102:	4a1c      	ldr	r2, [pc, #112]	; (8027174 <cosf+0x78>)
 8027104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027108:	4293      	cmp	r3, r2
 802710a:	dc04      	bgt.n	8027116 <cosf+0x1a>
 802710c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8027178 <cosf+0x7c>
 8027110:	f001 fd40 	bl	8028b94 <__kernel_cosf>
 8027114:	e004      	b.n	8027120 <cosf+0x24>
 8027116:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802711a:	db04      	blt.n	8027126 <cosf+0x2a>
 802711c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8027120:	b003      	add	sp, #12
 8027122:	f85d fb04 	ldr.w	pc, [sp], #4
 8027126:	4668      	mov	r0, sp
 8027128:	f001 fb9a 	bl	8028860 <__ieee754_rem_pio2f>
 802712c:	f000 0003 	and.w	r0, r0, #3
 8027130:	2801      	cmp	r0, #1
 8027132:	d007      	beq.n	8027144 <cosf+0x48>
 8027134:	2802      	cmp	r0, #2
 8027136:	d00e      	beq.n	8027156 <cosf+0x5a>
 8027138:	b9a0      	cbnz	r0, 8027164 <cosf+0x68>
 802713a:	eddd 0a01 	vldr	s1, [sp, #4]
 802713e:	ed9d 0a00 	vldr	s0, [sp]
 8027142:	e7e5      	b.n	8027110 <cosf+0x14>
 8027144:	eddd 0a01 	vldr	s1, [sp, #4]
 8027148:	ed9d 0a00 	vldr	s0, [sp]
 802714c:	f002 f802 	bl	8029154 <__kernel_sinf>
 8027150:	eeb1 0a40 	vneg.f32	s0, s0
 8027154:	e7e4      	b.n	8027120 <cosf+0x24>
 8027156:	eddd 0a01 	vldr	s1, [sp, #4]
 802715a:	ed9d 0a00 	vldr	s0, [sp]
 802715e:	f001 fd19 	bl	8028b94 <__kernel_cosf>
 8027162:	e7f5      	b.n	8027150 <cosf+0x54>
 8027164:	2001      	movs	r0, #1
 8027166:	eddd 0a01 	vldr	s1, [sp, #4]
 802716a:	ed9d 0a00 	vldr	s0, [sp]
 802716e:	f001 fff1 	bl	8029154 <__kernel_sinf>
 8027172:	e7d5      	b.n	8027120 <cosf+0x24>
 8027174:	3f490fd8 	.word	0x3f490fd8
 8027178:	00000000 	.word	0x00000000

0802717c <expf>:
 802717c:	ee10 2a10 	vmov	r2, s0
 8027180:	f240 412a 	movw	r1, #1066	; 0x42a
 8027184:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8027188:	428b      	cmp	r3, r1
 802718a:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 802718e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8027192:	d92e      	bls.n	80271f2 <expf+0x76>
 8027194:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8027198:	d061      	beq.n	802725e <expf+0xe2>
 802719a:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 802719e:	d304      	bcc.n	80271aa <expf+0x2e>
 80271a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80271a4:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 80271a8:	4770      	bx	lr
 80271aa:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8027264 <expf+0xe8>
 80271ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80271b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80271b6:	dd04      	ble.n	80271c2 <expf+0x46>
 80271b8:	2000      	movs	r0, #0
 80271ba:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 80271be:	f002 b91b 	b.w	80293f8 <__math_oflowf>
 80271c2:	eddf 7a29 	vldr	s15, [pc, #164]	; 8027268 <expf+0xec>
 80271c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80271ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80271ce:	d504      	bpl.n	80271da <expf+0x5e>
 80271d0:	2000      	movs	r0, #0
 80271d2:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 80271d6:	f002 b903 	b.w	80293e0 <__math_uflowf>
 80271da:	eddf 7a24 	vldr	s15, [pc, #144]	; 802726c <expf+0xf0>
 80271de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80271e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80271e6:	d504      	bpl.n	80271f2 <expf+0x76>
 80271e8:	2000      	movs	r0, #0
 80271ea:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 80271ee:	f002 b8fd 	b.w	80293ec <__math_may_uflowf>
 80271f2:	491f      	ldr	r1, [pc, #124]	; (8027270 <expf+0xf4>)
 80271f4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80271f8:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 80271fc:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 8027200:	eeb0 4b47 	vmov.f64	d4, d7
 8027204:	eea5 4b06 	vfma.f64	d4, d5, d6
 8027208:	ec55 4b14 	vmov	r4, r5, d4
 802720c:	ee34 7b47 	vsub.f64	d7, d4, d7
 8027210:	f004 021f 	and.w	r2, r4, #31
 8027214:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8027218:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802721c:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 8027220:	e9d2 4500 	ldrd	r4, r5, [r2]
 8027224:	eea6 0b07 	vfma.f64	d0, d6, d7
 8027228:	ee14 0a10 	vmov	r0, s8
 802722c:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 8027230:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 8027234:	f04f 0b00 	mov.w	fp, #0
 8027238:	eb1b 0204 	adds.w	r2, fp, r4
 802723c:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 8027240:	eb4c 0305 	adc.w	r3, ip, r5
 8027244:	eea5 6b07 	vfma.f64	d6, d5, d7
 8027248:	ee27 7b07 	vmul.f64	d7, d7, d7
 802724c:	eea6 0b07 	vfma.f64	d0, d6, d7
 8027250:	ec43 2b17 	vmov	d7, r2, r3
 8027254:	ee20 0b07 	vmul.f64	d0, d0, d7
 8027258:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802725c:	e7a2      	b.n	80271a4 <expf+0x28>
 802725e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8027274 <expf+0xf8>
 8027262:	e79f      	b.n	80271a4 <expf+0x28>
 8027264:	42b17217 	.word	0x42b17217
 8027268:	c2cff1b4 	.word	0xc2cff1b4
 802726c:	c2ce8ecf 	.word	0xc2ce8ecf
 8027270:	081459e8 	.word	0x081459e8
 8027274:	00000000 	.word	0x00000000

08027278 <fabsf>:
 8027278:	ee10 3a10 	vmov	r3, s0
 802727c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027280:	ee00 3a10 	vmov	s0, r3
 8027284:	4770      	bx	lr
	...

08027288 <logf>:
 8027288:	ee10 3a10 	vmov	r3, s0
 802728c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8027290:	b410      	push	{r4}
 8027292:	d057      	beq.n	8027344 <logf+0xbc>
 8027294:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8027298:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 802729c:	d31a      	bcc.n	80272d4 <logf+0x4c>
 802729e:	005a      	lsls	r2, r3, #1
 80272a0:	d104      	bne.n	80272ac <logf+0x24>
 80272a2:	2001      	movs	r0, #1
 80272a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80272a8:	f002 b8ac 	b.w	8029404 <__math_divzerof>
 80272ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80272b0:	d045      	beq.n	802733e <logf+0xb6>
 80272b2:	2b00      	cmp	r3, #0
 80272b4:	db02      	blt.n	80272bc <logf+0x34>
 80272b6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80272ba:	d303      	bcc.n	80272c4 <logf+0x3c>
 80272bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80272c0:	f002 b8b0 	b.w	8029424 <__math_invalidf>
 80272c4:	eddf 7a21 	vldr	s15, [pc, #132]	; 802734c <logf+0xc4>
 80272c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80272cc:	ee10 3a10 	vmov	r3, s0
 80272d0:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80272d4:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 80272d8:	491d      	ldr	r1, [pc, #116]	; (8027350 <logf+0xc8>)
 80272da:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80272de:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80272e2:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80272e6:	0dd4      	lsrs	r4, r2, #23
 80272e8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80272ec:	05e4      	lsls	r4, r4, #23
 80272ee:	ed90 5b00 	vldr	d5, [r0]
 80272f2:	1b1b      	subs	r3, r3, r4
 80272f4:	ee07 3a90 	vmov	s15, r3
 80272f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80272fc:	eea5 6b07 	vfma.f64	d6, d5, d7
 8027300:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8027304:	ee26 3b06 	vmul.f64	d3, d6, d6
 8027308:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 802730c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8027310:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8027314:	15d2      	asrs	r2, r2, #23
 8027316:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 802731a:	eea5 7b03 	vfma.f64	d7, d5, d3
 802731e:	eeb0 5b47 	vmov.f64	d5, d7
 8027322:	ed90 0b02 	vldr	d0, [r0, #8]
 8027326:	ee07 2a90 	vmov	s15, r2
 802732a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802732e:	eea7 0b04 	vfma.f64	d0, d7, d4
 8027332:	ee30 0b06 	vadd.f64	d0, d0, d6
 8027336:	eea3 0b05 	vfma.f64	d0, d3, d5
 802733a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802733e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027342:	4770      	bx	lr
 8027344:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8027354 <logf+0xcc>
 8027348:	e7f9      	b.n	802733e <logf+0xb6>
 802734a:	bf00      	nop
 802734c:	4b000000 	.word	0x4b000000
 8027350:	08145c50 	.word	0x08145c50
 8027354:	00000000 	.word	0x00000000

08027358 <log2f>:
 8027358:	ee10 2a10 	vmov	r2, s0
 802735c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8027360:	b410      	push	{r4}
 8027362:	d057      	beq.n	8027414 <log2f+0xbc>
 8027364:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 8027368:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 802736c:	d31a      	bcc.n	80273a4 <log2f+0x4c>
 802736e:	0053      	lsls	r3, r2, #1
 8027370:	d104      	bne.n	802737c <log2f+0x24>
 8027372:	2001      	movs	r0, #1
 8027374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027378:	f002 b844 	b.w	8029404 <__math_divzerof>
 802737c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8027380:	d045      	beq.n	802740e <log2f+0xb6>
 8027382:	2a00      	cmp	r2, #0
 8027384:	db02      	blt.n	802738c <log2f+0x34>
 8027386:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 802738a:	d303      	bcc.n	8027394 <log2f+0x3c>
 802738c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027390:	f002 b848 	b.w	8029424 <__math_invalidf>
 8027394:	eddf 7a21 	vldr	s15, [pc, #132]	; 802741c <log2f+0xc4>
 8027398:	ee20 0a27 	vmul.f32	s0, s0, s15
 802739c:	ee10 3a10 	vmov	r3, s0
 80273a0:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 80273a4:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 80273a8:	491d      	ldr	r1, [pc, #116]	; (8027420 <log2f+0xc8>)
 80273aa:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80273ae:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 80273b2:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 80273b6:	0ddc      	lsrs	r4, r3, #23
 80273b8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80273bc:	05e4      	lsls	r4, r4, #23
 80273be:	ed90 5b00 	vldr	d5, [r0]
 80273c2:	1b12      	subs	r2, r2, r4
 80273c4:	ee07 2a90 	vmov	s15, r2
 80273c8:	ed91 4b42 	vldr	d4, [r1, #264]	; 0x108
 80273cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80273d0:	eea5 6b07 	vfma.f64	d6, d5, d7
 80273d4:	eeb0 7b46 	vmov.f64	d7, d6
 80273d8:	ee26 5b06 	vmul.f64	d5, d6, d6
 80273dc:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 80273e0:	eea4 6b07 	vfma.f64	d6, d4, d7
 80273e4:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
 80273e8:	15db      	asrs	r3, r3, #23
 80273ea:	eea4 6b05 	vfma.f64	d6, d4, d5
 80273ee:	ed90 4b02 	vldr	d4, [r0, #8]
 80273f2:	ee00 3a10 	vmov	s0, r3
 80273f6:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80273fa:	ee30 0b04 	vadd.f64	d0, d0, d4
 80273fe:	ed91 4b46 	vldr	d4, [r1, #280]	; 0x118
 8027402:	eea4 0b07 	vfma.f64	d0, d4, d7
 8027406:	eea5 0b06 	vfma.f64	d0, d5, d6
 802740a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802740e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027412:	4770      	bx	lr
 8027414:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8027424 <log2f+0xcc>
 8027418:	e7f9      	b.n	802740e <log2f+0xb6>
 802741a:	bf00      	nop
 802741c:	4b000000 	.word	0x4b000000
 8027420:	08145b30 	.word	0x08145b30
 8027424:	00000000 	.word	0x00000000

08027428 <checkint>:
 8027428:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 802742c:	2b7e      	cmp	r3, #126	; 0x7e
 802742e:	dd10      	ble.n	8027452 <checkint+0x2a>
 8027430:	2b96      	cmp	r3, #150	; 0x96
 8027432:	dc0c      	bgt.n	802744e <checkint+0x26>
 8027434:	2201      	movs	r2, #1
 8027436:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 802743a:	fa02 f303 	lsl.w	r3, r2, r3
 802743e:	1e5a      	subs	r2, r3, #1
 8027440:	4202      	tst	r2, r0
 8027442:	d106      	bne.n	8027452 <checkint+0x2a>
 8027444:	4203      	tst	r3, r0
 8027446:	bf0c      	ite	eq
 8027448:	2002      	moveq	r0, #2
 802744a:	2001      	movne	r0, #1
 802744c:	4770      	bx	lr
 802744e:	2002      	movs	r0, #2
 8027450:	4770      	bx	lr
 8027452:	2000      	movs	r0, #0
 8027454:	4770      	bx	lr
	...

08027458 <powf>:
 8027458:	ee10 1a10 	vmov	r1, s0
 802745c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8027460:	ee10 4a90 	vmov	r4, s1
 8027464:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8027468:	0062      	lsls	r2, r4, #1
 802746a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 802746e:	eef0 4a60 	vmov.f32	s9, s1
 8027472:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8027476:	4b92      	ldr	r3, [pc, #584]	; (80276c0 <powf+0x268>)
 8027478:	d255      	bcs.n	8027526 <powf+0xce>
 802747a:	4298      	cmp	r0, r3
 802747c:	d855      	bhi.n	802752a <powf+0xd2>
 802747e:	2000      	movs	r0, #0
 8027480:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8027484:	4a8f      	ldr	r2, [pc, #572]	; (80276c4 <powf+0x26c>)
 8027486:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 802748a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 802748e:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8027492:	0ddb      	lsrs	r3, r3, #23
 8027494:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8027498:	05db      	lsls	r3, r3, #23
 802749a:	ed94 6b00 	vldr	d6, [r4]
 802749e:	1ac9      	subs	r1, r1, r3
 80274a0:	ee07 1a90 	vmov	s15, r1
 80274a4:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 80274a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80274ac:	eea6 2b07 	vfma.f64	d2, d6, d7
 80274b0:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 80274b4:	ee22 6b02 	vmul.f64	d6, d2, d2
 80274b8:	eea2 7b05 	vfma.f64	d7, d2, d5
 80274bc:	15db      	asrs	r3, r3, #23
 80274be:	ed94 5b02 	vldr	d5, [r4, #8]
 80274c2:	ee00 3a10 	vmov	s0, r3
 80274c6:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80274ca:	ee30 0b05 	vadd.f64	d0, d0, d5
 80274ce:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 80274d2:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 80274d6:	eea2 0b05 	vfma.f64	d0, d2, d5
 80274da:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 80274de:	eea2 5b03 	vfma.f64	d5, d2, d3
 80274e2:	eea6 0b05 	vfma.f64	d0, d6, d5
 80274e6:	ee26 6b06 	vmul.f64	d6, d6, d6
 80274ea:	eea7 0b06 	vfma.f64	d0, d7, d6
 80274ee:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 80274f2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80274f6:	ee10 3a90 	vmov	r3, s1
 80274fa:	2500      	movs	r5, #0
 80274fc:	0bda      	lsrs	r2, r3, #15
 80274fe:	2300      	movs	r3, #0
 8027500:	b292      	uxth	r2, r2
 8027502:	f248 04be 	movw	r4, #32958	; 0x80be
 8027506:	429d      	cmp	r5, r3
 8027508:	bf08      	it	eq
 802750a:	4294      	cmpeq	r4, r2
 802750c:	f080 8094 	bcs.w	8027638 <powf+0x1e0>
 8027510:	ed9f 7b65 	vldr	d7, [pc, #404]	; 80276a8 <powf+0x250>
 8027514:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8027518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802751c:	dd76      	ble.n	802760c <powf+0x1b4>
 802751e:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8027522:	f001 bf69 	b.w	80293f8 <__math_oflowf>
 8027526:	4298      	cmp	r0, r3
 8027528:	d92d      	bls.n	8027586 <powf+0x12e>
 802752a:	b952      	cbnz	r2, 8027542 <powf+0xea>
 802752c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8027530:	005b      	lsls	r3, r3, #1
 8027532:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8027536:	f240 80ae 	bls.w	8027696 <powf+0x23e>
 802753a:	ee30 0a24 	vadd.f32	s0, s0, s9
 802753e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8027542:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8027546:	d105      	bne.n	8027554 <powf+0xfc>
 8027548:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 802754c:	0064      	lsls	r4, r4, #1
 802754e:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8027552:	e7f0      	b.n	8027536 <powf+0xde>
 8027554:	004b      	lsls	r3, r1, #1
 8027556:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 802755a:	d8ee      	bhi.n	802753a <powf+0xe2>
 802755c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8027560:	d1eb      	bne.n	802753a <powf+0xe2>
 8027562:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8027566:	f000 8096 	beq.w	8027696 <powf+0x23e>
 802756a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 802756e:	ea6f 0404 	mvn.w	r4, r4
 8027572:	bf34      	ite	cc
 8027574:	2300      	movcc	r3, #0
 8027576:	2301      	movcs	r3, #1
 8027578:	0fe4      	lsrs	r4, r4, #31
 802757a:	42a3      	cmp	r3, r4
 802757c:	f040 808e 	bne.w	802769c <powf+0x244>
 8027580:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8027584:	e7db      	b.n	802753e <powf+0xe6>
 8027586:	004d      	lsls	r5, r1, #1
 8027588:	1e6a      	subs	r2, r5, #1
 802758a:	429a      	cmp	r2, r3
 802758c:	d91b      	bls.n	80275c6 <powf+0x16e>
 802758e:	2900      	cmp	r1, #0
 8027590:	ee20 0a00 	vmul.f32	s0, s0, s0
 8027594:	da0e      	bge.n	80275b4 <powf+0x15c>
 8027596:	ee10 0a90 	vmov	r0, s1
 802759a:	f7ff ff45 	bl	8027428 <checkint>
 802759e:	2801      	cmp	r0, #1
 80275a0:	d108      	bne.n	80275b4 <powf+0x15c>
 80275a2:	eeb1 0a40 	vneg.f32	s0, s0
 80275a6:	b93d      	cbnz	r5, 80275b8 <powf+0x160>
 80275a8:	2c00      	cmp	r4, #0
 80275aa:	dac8      	bge.n	802753e <powf+0xe6>
 80275ac:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80275b0:	f001 bf28 	b.w	8029404 <__math_divzerof>
 80275b4:	2000      	movs	r0, #0
 80275b6:	e7f6      	b.n	80275a6 <powf+0x14e>
 80275b8:	2c00      	cmp	r4, #0
 80275ba:	dac0      	bge.n	802753e <powf+0xe6>
 80275bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80275c0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80275c4:	e7bb      	b.n	802753e <powf+0xe6>
 80275c6:	2900      	cmp	r1, #0
 80275c8:	da1e      	bge.n	8027608 <powf+0x1b0>
 80275ca:	ee10 0a90 	vmov	r0, s1
 80275ce:	f7ff ff2b 	bl	8027428 <checkint>
 80275d2:	b918      	cbnz	r0, 80275dc <powf+0x184>
 80275d4:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80275d8:	f001 bf24 	b.w	8029424 <__math_invalidf>
 80275dc:	2801      	cmp	r0, #1
 80275de:	bf0c      	ite	eq
 80275e0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80275e4:	2000      	movne	r0, #0
 80275e6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80275ea:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80275ee:	f4bf af47 	bcs.w	8027480 <powf+0x28>
 80275f2:	eddf 0a35 	vldr	s1, [pc, #212]	; 80276c8 <powf+0x270>
 80275f6:	ee20 0a20 	vmul.f32	s0, s0, s1
 80275fa:	ee10 3a10 	vmov	r3, s0
 80275fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027602:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8027606:	e73b      	b.n	8027480 <powf+0x28>
 8027608:	2000      	movs	r0, #0
 802760a:	e7ee      	b.n	80275ea <powf+0x192>
 802760c:	ed9f 7b28 	vldr	d7, [pc, #160]	; 80276b0 <powf+0x258>
 8027610:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8027614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027618:	d803      	bhi.n	8027622 <powf+0x1ca>
 802761a:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 802761e:	f001 bedf 	b.w	80293e0 <__math_uflowf>
 8027622:	ed9f 7b25 	vldr	d7, [pc, #148]	; 80276b8 <powf+0x260>
 8027626:	eeb4 0bc7 	vcmpe.f64	d0, d7
 802762a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802762e:	d503      	bpl.n	8027638 <powf+0x1e0>
 8027630:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8027634:	f001 beda 	b.w	80293ec <__math_may_uflowf>
 8027638:	4924      	ldr	r1, [pc, #144]	; (80276cc <powf+0x274>)
 802763a:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 802763e:	ee30 6b07 	vadd.f64	d6, d0, d7
 8027642:	ec55 4b16 	vmov	r4, r5, d6
 8027646:	ee36 7b47 	vsub.f64	d7, d6, d7
 802764a:	f004 021f 	and.w	r2, r4, #31
 802764e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8027652:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 8027656:	ee30 0b47 	vsub.f64	d0, d0, d7
 802765a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802765e:	e9d2 6700 	ldrd	r6, r7, [r2]
 8027662:	eea0 7b06 	vfma.f64	d7, d0, d6
 8027666:	1824      	adds	r4, r4, r0
 8027668:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 802766c:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8027670:	2000      	movs	r0, #0
 8027672:	1982      	adds	r2, r0, r6
 8027674:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8027678:	eb41 0307 	adc.w	r3, r1, r7
 802767c:	eea0 6b05 	vfma.f64	d6, d0, d5
 8027680:	ee20 0b00 	vmul.f64	d0, d0, d0
 8027684:	eea6 7b00 	vfma.f64	d7, d6, d0
 8027688:	ec43 2b16 	vmov	d6, r2, r3
 802768c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8027690:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8027694:	e753      	b.n	802753e <powf+0xe6>
 8027696:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802769a:	e750      	b.n	802753e <powf+0xe6>
 802769c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80276d0 <powf+0x278>
 80276a0:	e74d      	b.n	802753e <powf+0xe6>
 80276a2:	bf00      	nop
 80276a4:	f3af 8000 	nop.w
 80276a8:	ffd1d571 	.word	0xffd1d571
 80276ac:	405fffff 	.word	0x405fffff
 80276b0:	00000000 	.word	0x00000000
 80276b4:	c062c000 	.word	0xc062c000
 80276b8:	00000000 	.word	0x00000000
 80276bc:	c062a000 	.word	0xc062a000
 80276c0:	fefffffe 	.word	0xfefffffe
 80276c4:	08145d70 	.word	0x08145d70
 80276c8:	4b000000 	.word	0x4b000000
 80276cc:	081459e8 	.word	0x081459e8
 80276d0:	00000000 	.word	0x00000000

080276d4 <tanf>:
 80276d4:	ee10 3a10 	vmov	r3, s0
 80276d8:	b507      	push	{r0, r1, r2, lr}
 80276da:	4a10      	ldr	r2, [pc, #64]	; (802771c <tanf+0x48>)
 80276dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80276e0:	4293      	cmp	r3, r2
 80276e2:	dc05      	bgt.n	80276f0 <tanf+0x1c>
 80276e4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8027720 <tanf+0x4c>
 80276e8:	2001      	movs	r0, #1
 80276ea:	f001 fd7b 	bl	80291e4 <__kernel_tanf>
 80276ee:	e004      	b.n	80276fa <tanf+0x26>
 80276f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80276f4:	db04      	blt.n	8027700 <tanf+0x2c>
 80276f6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80276fa:	b003      	add	sp, #12
 80276fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8027700:	4668      	mov	r0, sp
 8027702:	f001 f8ad 	bl	8028860 <__ieee754_rem_pio2f>
 8027706:	0040      	lsls	r0, r0, #1
 8027708:	f000 0002 	and.w	r0, r0, #2
 802770c:	f1c0 0001 	rsb	r0, r0, #1
 8027710:	eddd 0a01 	vldr	s1, [sp, #4]
 8027714:	ed9d 0a00 	vldr	s0, [sp]
 8027718:	e7e7      	b.n	80276ea <tanf+0x16>
 802771a:	bf00      	nop
 802771c:	3f490fda 	.word	0x3f490fda
 8027720:	00000000 	.word	0x00000000

08027724 <tanhf>:
 8027724:	b510      	push	{r4, lr}
 8027726:	ee10 4a10 	vmov	r4, s0
 802772a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802772e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8027732:	ed2d 8b02 	vpush	{d8}
 8027736:	eef0 7a40 	vmov.f32	s15, s0
 802773a:	db0c      	blt.n	8027756 <tanhf+0x32>
 802773c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027740:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8027744:	2c00      	cmp	r4, #0
 8027746:	bfac      	ite	ge
 8027748:	ee30 0a07 	vaddge.f32	s0, s0, s14
 802774c:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8027750:	ecbd 8b02 	vpop	{d8}
 8027754:	bd10      	pop	{r4, pc}
 8027756:	4a1b      	ldr	r2, [pc, #108]	; (80277c4 <tanhf+0xa0>)
 8027758:	4293      	cmp	r3, r2
 802775a:	dc30      	bgt.n	80277be <tanhf+0x9a>
 802775c:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8027760:	da06      	bge.n	8027770 <tanhf+0x4c>
 8027762:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027766:	ee37 0a80 	vadd.f32	s0, s15, s0
 802776a:	ee20 0a27 	vmul.f32	s0, s0, s15
 802776e:	e7ef      	b.n	8027750 <tanhf+0x2c>
 8027770:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8027774:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8027778:	db12      	blt.n	80277a0 <tanhf+0x7c>
 802777a:	f7ff fd7d 	bl	8027278 <fabsf>
 802777e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027782:	f001 ff83 	bl	802968c <expm1f>
 8027786:	ee30 0a08 	vadd.f32	s0, s0, s16
 802778a:	eec8 7a00 	vdiv.f32	s15, s16, s0
 802778e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027792:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027796:	2c00      	cmp	r4, #0
 8027798:	bfb8      	it	lt
 802779a:	eeb1 0a40 	vneglt.f32	s0, s0
 802779e:	e7d7      	b.n	8027750 <tanhf+0x2c>
 80277a0:	f7ff fd6a 	bl	8027278 <fabsf>
 80277a4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80277a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80277ac:	f001 ff6e 	bl	802968c <expm1f>
 80277b0:	ee70 7a08 	vadd.f32	s15, s0, s16
 80277b4:	eeb1 7a40 	vneg.f32	s14, s0
 80277b8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80277bc:	e7eb      	b.n	8027796 <tanhf+0x72>
 80277be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80277c2:	e7e8      	b.n	8027796 <tanhf+0x72>
 80277c4:	41afffff 	.word	0x41afffff

080277c8 <exp>:
 80277c8:	b510      	push	{r4, lr}
 80277ca:	ed2d 8b04 	vpush	{d8-d9}
 80277ce:	eeb0 8b40 	vmov.f64	d8, d0
 80277d2:	4c33      	ldr	r4, [pc, #204]	; (80278a0 <exp+0xd8>)
 80277d4:	b08a      	sub	sp, #40	; 0x28
 80277d6:	f000 fad3 	bl	8027d80 <__ieee754_exp>
 80277da:	f994 3000 	ldrsb.w	r3, [r4]
 80277de:	eeb0 9b40 	vmov.f64	d9, d0
 80277e2:	3301      	adds	r3, #1
 80277e4:	d029      	beq.n	802783a <exp+0x72>
 80277e6:	eeb0 0b48 	vmov.f64	d0, d8
 80277ea:	f001 fe33 	bl	8029454 <finite>
 80277ee:	b320      	cbz	r0, 802783a <exp+0x72>
 80277f0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8027890 <exp+0xc8>
 80277f4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80277f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80277fc:	dd2e      	ble.n	802785c <exp+0x94>
 80277fe:	2303      	movs	r3, #3
 8027800:	9300      	str	r3, [sp, #0]
 8027802:	4b28      	ldr	r3, [pc, #160]	; (80278a4 <exp+0xdc>)
 8027804:	9301      	str	r3, [sp, #4]
 8027806:	2300      	movs	r3, #0
 8027808:	9308      	str	r3, [sp, #32]
 802780a:	f994 3000 	ldrsb.w	r3, [r4]
 802780e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8027812:	ed8d 8b02 	vstr	d8, [sp, #8]
 8027816:	b9b3      	cbnz	r3, 8027846 <exp+0x7e>
 8027818:	4b23      	ldr	r3, [pc, #140]	; (80278a8 <exp+0xe0>)
 802781a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 802781e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027822:	4668      	mov	r0, sp
 8027824:	f001 fe1e 	bl	8029464 <matherr>
 8027828:	b198      	cbz	r0, 8027852 <exp+0x8a>
 802782a:	9b08      	ldr	r3, [sp, #32]
 802782c:	b11b      	cbz	r3, 8027836 <exp+0x6e>
 802782e:	f7ff faf5 	bl	8026e1c <__errno>
 8027832:	9b08      	ldr	r3, [sp, #32]
 8027834:	6003      	str	r3, [r0, #0]
 8027836:	ed9d 9b06 	vldr	d9, [sp, #24]
 802783a:	eeb0 0b49 	vmov.f64	d0, d9
 802783e:	b00a      	add	sp, #40	; 0x28
 8027840:	ecbd 8b04 	vpop	{d8-d9}
 8027844:	bd10      	pop	{r4, pc}
 8027846:	4919      	ldr	r1, [pc, #100]	; (80278ac <exp+0xe4>)
 8027848:	2000      	movs	r0, #0
 802784a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802784e:	2b02      	cmp	r3, #2
 8027850:	d1e7      	bne.n	8027822 <exp+0x5a>
 8027852:	f7ff fae3 	bl	8026e1c <__errno>
 8027856:	2322      	movs	r3, #34	; 0x22
 8027858:	6003      	str	r3, [r0, #0]
 802785a:	e7e6      	b.n	802782a <exp+0x62>
 802785c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8027898 <exp+0xd0>
 8027860:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8027864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027868:	d5e7      	bpl.n	802783a <exp+0x72>
 802786a:	2304      	movs	r3, #4
 802786c:	9300      	str	r3, [sp, #0]
 802786e:	4b0d      	ldr	r3, [pc, #52]	; (80278a4 <exp+0xdc>)
 8027870:	9301      	str	r3, [sp, #4]
 8027872:	2300      	movs	r3, #0
 8027874:	9308      	str	r3, [sp, #32]
 8027876:	2200      	movs	r2, #0
 8027878:	2300      	movs	r3, #0
 802787a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802787e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8027882:	ed8d 8b02 	vstr	d8, [sp, #8]
 8027886:	f994 3000 	ldrsb.w	r3, [r4]
 802788a:	e7e0      	b.n	802784e <exp+0x86>
 802788c:	f3af 8000 	nop.w
 8027890:	fefa39ef 	.word	0xfefa39ef
 8027894:	40862e42 	.word	0x40862e42
 8027898:	d52d3051 	.word	0xd52d3051
 802789c:	c0874910 	.word	0xc0874910
 80278a0:	200004b4 	.word	0x200004b4
 80278a4:	08145e98 	.word	0x08145e98
 80278a8:	47efffff 	.word	0x47efffff
 80278ac:	7ff00000 	.word	0x7ff00000

080278b0 <pow>:
 80278b0:	b570      	push	{r4, r5, r6, lr}
 80278b2:	ed2d 8b0a 	vpush	{d8-d12}
 80278b6:	eeb0 9b40 	vmov.f64	d9, d0
 80278ba:	eeb0 8b41 	vmov.f64	d8, d1
 80278be:	4c8c      	ldr	r4, [pc, #560]	; (8027af0 <pow+0x240>)
 80278c0:	b08a      	sub	sp, #40	; 0x28
 80278c2:	f000 fb65 	bl	8027f90 <__ieee754_pow>
 80278c6:	f994 3000 	ldrsb.w	r3, [r4]
 80278ca:	eeb0 ab40 	vmov.f64	d10, d0
 80278ce:	1c5a      	adds	r2, r3, #1
 80278d0:	4626      	mov	r6, r4
 80278d2:	d04b      	beq.n	802796c <pow+0xbc>
 80278d4:	eeb4 8b48 	vcmp.f64	d8, d8
 80278d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278dc:	d646      	bvs.n	802796c <pow+0xbc>
 80278de:	eeb4 9b49 	vcmp.f64	d9, d9
 80278e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278e6:	d719      	bvc.n	802791c <pow+0x6c>
 80278e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80278ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278f0:	d13c      	bne.n	802796c <pow+0xbc>
 80278f2:	2201      	movs	r2, #1
 80278f4:	9200      	str	r2, [sp, #0]
 80278f6:	497f      	ldr	r1, [pc, #508]	; (8027af4 <pow+0x244>)
 80278f8:	4a7f      	ldr	r2, [pc, #508]	; (8027af8 <pow+0x248>)
 80278fa:	9201      	str	r2, [sp, #4]
 80278fc:	2000      	movs	r0, #0
 80278fe:	2200      	movs	r2, #0
 8027900:	2b02      	cmp	r3, #2
 8027902:	9208      	str	r2, [sp, #32]
 8027904:	ed8d 9b02 	vstr	d9, [sp, #8]
 8027908:	ed8d 8b04 	vstr	d8, [sp, #16]
 802790c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8027910:	d02a      	beq.n	8027968 <pow+0xb8>
 8027912:	4668      	mov	r0, sp
 8027914:	f001 fda6 	bl	8029464 <matherr>
 8027918:	bb00      	cbnz	r0, 802795c <pow+0xac>
 802791a:	e04e      	b.n	80279ba <pow+0x10a>
 802791c:	ed9f bb72 	vldr	d11, [pc, #456]	; 8027ae8 <pow+0x238>
 8027920:	eeb4 9b4b 	vcmp.f64	d9, d11
 8027924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027928:	eeb0 cb4b 	vmov.f64	d12, d11
 802792c:	d14a      	bne.n	80279c4 <pow+0x114>
 802792e:	eeb4 8b4b 	vcmp.f64	d8, d11
 8027932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027936:	d11f      	bne.n	8027978 <pow+0xc8>
 8027938:	2201      	movs	r2, #1
 802793a:	9200      	str	r2, [sp, #0]
 802793c:	4a6e      	ldr	r2, [pc, #440]	; (8027af8 <pow+0x248>)
 802793e:	9201      	str	r2, [sp, #4]
 8027940:	2200      	movs	r2, #0
 8027942:	9208      	str	r2, [sp, #32]
 8027944:	ed8d 9b02 	vstr	d9, [sp, #8]
 8027948:	ed8d 8b04 	vstr	d8, [sp, #16]
 802794c:	ed8d bb06 	vstr	d11, [sp, #24]
 8027950:	2b00      	cmp	r3, #0
 8027952:	d0de      	beq.n	8027912 <pow+0x62>
 8027954:	4b67      	ldr	r3, [pc, #412]	; (8027af4 <pow+0x244>)
 8027956:	2200      	movs	r2, #0
 8027958:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802795c:	9b08      	ldr	r3, [sp, #32]
 802795e:	b11b      	cbz	r3, 8027968 <pow+0xb8>
 8027960:	f7ff fa5c 	bl	8026e1c <__errno>
 8027964:	9b08      	ldr	r3, [sp, #32]
 8027966:	6003      	str	r3, [r0, #0]
 8027968:	ed9d ab06 	vldr	d10, [sp, #24]
 802796c:	eeb0 0b4a 	vmov.f64	d0, d10
 8027970:	b00a      	add	sp, #40	; 0x28
 8027972:	ecbd 8b0a 	vpop	{d8-d12}
 8027976:	bd70      	pop	{r4, r5, r6, pc}
 8027978:	eeb0 0b48 	vmov.f64	d0, d8
 802797c:	f001 fd6a 	bl	8029454 <finite>
 8027980:	2800      	cmp	r0, #0
 8027982:	d0f3      	beq.n	802796c <pow+0xbc>
 8027984:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8027988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802798c:	d5ee      	bpl.n	802796c <pow+0xbc>
 802798e:	2301      	movs	r3, #1
 8027990:	9300      	str	r3, [sp, #0]
 8027992:	4b59      	ldr	r3, [pc, #356]	; (8027af8 <pow+0x248>)
 8027994:	9301      	str	r3, [sp, #4]
 8027996:	2300      	movs	r3, #0
 8027998:	9308      	str	r3, [sp, #32]
 802799a:	f994 3000 	ldrsb.w	r3, [r4]
 802799e:	ed8d 9b02 	vstr	d9, [sp, #8]
 80279a2:	ed8d 8b04 	vstr	d8, [sp, #16]
 80279a6:	b913      	cbnz	r3, 80279ae <pow+0xfe>
 80279a8:	ed8d bb06 	vstr	d11, [sp, #24]
 80279ac:	e7b1      	b.n	8027912 <pow+0x62>
 80279ae:	4953      	ldr	r1, [pc, #332]	; (8027afc <pow+0x24c>)
 80279b0:	2000      	movs	r0, #0
 80279b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80279b6:	2b02      	cmp	r3, #2
 80279b8:	d1ab      	bne.n	8027912 <pow+0x62>
 80279ba:	f7ff fa2f 	bl	8026e1c <__errno>
 80279be:	2321      	movs	r3, #33	; 0x21
 80279c0:	6003      	str	r3, [r0, #0]
 80279c2:	e7cb      	b.n	802795c <pow+0xac>
 80279c4:	f001 fd46 	bl	8029454 <finite>
 80279c8:	4605      	mov	r5, r0
 80279ca:	2800      	cmp	r0, #0
 80279cc:	d164      	bne.n	8027a98 <pow+0x1e8>
 80279ce:	eeb0 0b49 	vmov.f64	d0, d9
 80279d2:	f001 fd3f 	bl	8029454 <finite>
 80279d6:	2800      	cmp	r0, #0
 80279d8:	d05e      	beq.n	8027a98 <pow+0x1e8>
 80279da:	eeb0 0b48 	vmov.f64	d0, d8
 80279de:	f001 fd39 	bl	8029454 <finite>
 80279e2:	2800      	cmp	r0, #0
 80279e4:	d058      	beq.n	8027a98 <pow+0x1e8>
 80279e6:	eeb4 ab4a 	vcmp.f64	d10, d10
 80279ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80279ee:	f994 3000 	ldrsb.w	r3, [r4]
 80279f2:	4a41      	ldr	r2, [pc, #260]	; (8027af8 <pow+0x248>)
 80279f4:	d70e      	bvc.n	8027a14 <pow+0x164>
 80279f6:	2101      	movs	r1, #1
 80279f8:	e9cd 1200 	strd	r1, r2, [sp]
 80279fc:	9508      	str	r5, [sp, #32]
 80279fe:	ed8d 9b02 	vstr	d9, [sp, #8]
 8027a02:	ed8d 8b04 	vstr	d8, [sp, #16]
 8027a06:	2b00      	cmp	r3, #0
 8027a08:	d0ce      	beq.n	80279a8 <pow+0xf8>
 8027a0a:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 8027a0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8027a12:	e7d0      	b.n	80279b6 <pow+0x106>
 8027a14:	2103      	movs	r1, #3
 8027a16:	ed8d 8b04 	vstr	d8, [sp, #16]
 8027a1a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8027a1e:	ee28 8b07 	vmul.f64	d8, d8, d7
 8027a22:	e9cd 1200 	strd	r1, r2, [sp]
 8027a26:	9508      	str	r5, [sp, #32]
 8027a28:	ed8d 9b02 	vstr	d9, [sp, #8]
 8027a2c:	b9fb      	cbnz	r3, 8027a6e <pow+0x1be>
 8027a2e:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8027a32:	4b33      	ldr	r3, [pc, #204]	; (8027b00 <pow+0x250>)
 8027a34:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8027a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027a40:	d54b      	bpl.n	8027ada <pow+0x22a>
 8027a42:	eeb0 0b48 	vmov.f64	d0, d8
 8027a46:	f001 fd17 	bl	8029478 <rint>
 8027a4a:	eeb4 0b48 	vcmp.f64	d0, d8
 8027a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a52:	d004      	beq.n	8027a5e <pow+0x1ae>
 8027a54:	4b2b      	ldr	r3, [pc, #172]	; (8027b04 <pow+0x254>)
 8027a56:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8027a5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027a5e:	f996 3000 	ldrsb.w	r3, [r6]
 8027a62:	2b02      	cmp	r3, #2
 8027a64:	d139      	bne.n	8027ada <pow+0x22a>
 8027a66:	f7ff f9d9 	bl	8026e1c <__errno>
 8027a6a:	2322      	movs	r3, #34	; 0x22
 8027a6c:	e7a8      	b.n	80279c0 <pow+0x110>
 8027a6e:	4b26      	ldr	r3, [pc, #152]	; (8027b08 <pow+0x258>)
 8027a70:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8027a74:	2200      	movs	r2, #0
 8027a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027a7e:	d5ee      	bpl.n	8027a5e <pow+0x1ae>
 8027a80:	eeb0 0b48 	vmov.f64	d0, d8
 8027a84:	f001 fcf8 	bl	8029478 <rint>
 8027a88:	eeb4 0b48 	vcmp.f64	d0, d8
 8027a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a90:	d0e5      	beq.n	8027a5e <pow+0x1ae>
 8027a92:	2200      	movs	r2, #0
 8027a94:	4b19      	ldr	r3, [pc, #100]	; (8027afc <pow+0x24c>)
 8027a96:	e7e0      	b.n	8027a5a <pow+0x1aa>
 8027a98:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8027a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027aa0:	f47f af64 	bne.w	802796c <pow+0xbc>
 8027aa4:	eeb0 0b49 	vmov.f64	d0, d9
 8027aa8:	f001 fcd4 	bl	8029454 <finite>
 8027aac:	2800      	cmp	r0, #0
 8027aae:	f43f af5d 	beq.w	802796c <pow+0xbc>
 8027ab2:	eeb0 0b48 	vmov.f64	d0, d8
 8027ab6:	f001 fccd 	bl	8029454 <finite>
 8027aba:	2800      	cmp	r0, #0
 8027abc:	f43f af56 	beq.w	802796c <pow+0xbc>
 8027ac0:	2304      	movs	r3, #4
 8027ac2:	9300      	str	r3, [sp, #0]
 8027ac4:	4b0c      	ldr	r3, [pc, #48]	; (8027af8 <pow+0x248>)
 8027ac6:	9301      	str	r3, [sp, #4]
 8027ac8:	2300      	movs	r3, #0
 8027aca:	9308      	str	r3, [sp, #32]
 8027acc:	ed8d 9b02 	vstr	d9, [sp, #8]
 8027ad0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8027ad4:	ed8d cb06 	vstr	d12, [sp, #24]
 8027ad8:	e7c1      	b.n	8027a5e <pow+0x1ae>
 8027ada:	4668      	mov	r0, sp
 8027adc:	f001 fcc2 	bl	8029464 <matherr>
 8027ae0:	2800      	cmp	r0, #0
 8027ae2:	f47f af3b 	bne.w	802795c <pow+0xac>
 8027ae6:	e7be      	b.n	8027a66 <pow+0x1b6>
	...
 8027af0:	200004b4 	.word	0x200004b4
 8027af4:	3ff00000 	.word	0x3ff00000
 8027af8:	08145e9c 	.word	0x08145e9c
 8027afc:	fff00000 	.word	0xfff00000
 8027b00:	47efffff 	.word	0x47efffff
 8027b04:	c7efffff 	.word	0xc7efffff
 8027b08:	7ff00000 	.word	0x7ff00000
 8027b0c:	00000000 	.word	0x00000000

08027b10 <fmodf>:
 8027b10:	b500      	push	{lr}
 8027b12:	ed2d 8b02 	vpush	{d8}
 8027b16:	b08b      	sub	sp, #44	; 0x2c
 8027b18:	eeb0 8a40 	vmov.f32	s16, s0
 8027b1c:	eef0 8a60 	vmov.f32	s17, s1
 8027b20:	f000 fdc0 	bl	80286a4 <__ieee754_fmodf>
 8027b24:	4b24      	ldr	r3, [pc, #144]	; (8027bb8 <fmodf+0xa8>)
 8027b26:	f993 3000 	ldrsb.w	r3, [r3]
 8027b2a:	1c5a      	adds	r2, r3, #1
 8027b2c:	d02d      	beq.n	8027b8a <fmodf+0x7a>
 8027b2e:	eef4 8a68 	vcmp.f32	s17, s17
 8027b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b36:	d628      	bvs.n	8027b8a <fmodf+0x7a>
 8027b38:	eeb4 8a48 	vcmp.f32	s16, s16
 8027b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b40:	d623      	bvs.n	8027b8a <fmodf+0x7a>
 8027b42:	eef5 8a40 	vcmp.f32	s17, #0.0
 8027b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b4a:	d11e      	bne.n	8027b8a <fmodf+0x7a>
 8027b4c:	2201      	movs	r2, #1
 8027b4e:	9200      	str	r2, [sp, #0]
 8027b50:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
 8027b54:	4a19      	ldr	r2, [pc, #100]	; (8027bbc <fmodf+0xac>)
 8027b56:	9201      	str	r2, [sp, #4]
 8027b58:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 8027b5c:	2200      	movs	r2, #0
 8027b5e:	9208      	str	r2, [sp, #32]
 8027b60:	ed8d 0b02 	vstr	d0, [sp, #8]
 8027b64:	ed8d 7b04 	vstr	d7, [sp, #16]
 8027b68:	b9a3      	cbnz	r3, 8027b94 <fmodf+0x84>
 8027b6a:	ed8d 0b06 	vstr	d0, [sp, #24]
 8027b6e:	4668      	mov	r0, sp
 8027b70:	f001 fc78 	bl	8029464 <matherr>
 8027b74:	b1b0      	cbz	r0, 8027ba4 <fmodf+0x94>
 8027b76:	9b08      	ldr	r3, [sp, #32]
 8027b78:	b11b      	cbz	r3, 8027b82 <fmodf+0x72>
 8027b7a:	f7ff f94f 	bl	8026e1c <__errno>
 8027b7e:	9b08      	ldr	r3, [sp, #32]
 8027b80:	6003      	str	r3, [r0, #0]
 8027b82:	ed9d 0b06 	vldr	d0, [sp, #24]
 8027b86:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8027b8a:	b00b      	add	sp, #44	; 0x2c
 8027b8c:	ecbd 8b02 	vpop	{d8}
 8027b90:	f85d fb04 	ldr.w	pc, [sp], #4
 8027b94:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8027bb0 <fmodf+0xa0>
 8027b98:	2b02      	cmp	r3, #2
 8027b9a:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8027b9e:	ed8d 6b06 	vstr	d6, [sp, #24]
 8027ba2:	d1e4      	bne.n	8027b6e <fmodf+0x5e>
 8027ba4:	f7ff f93a 	bl	8026e1c <__errno>
 8027ba8:	2321      	movs	r3, #33	; 0x21
 8027baa:	6003      	str	r3, [r0, #0]
 8027bac:	e7e3      	b.n	8027b76 <fmodf+0x66>
 8027bae:	bf00      	nop
	...
 8027bb8:	200004b4 	.word	0x200004b4
 8027bbc:	08145ea0 	.word	0x08145ea0

08027bc0 <log10f>:
 8027bc0:	b500      	push	{lr}
 8027bc2:	ed2d 8b02 	vpush	{d8}
 8027bc6:	b08b      	sub	sp, #44	; 0x2c
 8027bc8:	eeb0 8a40 	vmov.f32	s16, s0
 8027bcc:	f000 fdf2 	bl	80287b4 <__ieee754_log10f>
 8027bd0:	4b2f      	ldr	r3, [pc, #188]	; (8027c90 <log10f+0xd0>)
 8027bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8027bd6:	1c5a      	adds	r2, r3, #1
 8027bd8:	d055      	beq.n	8027c86 <log10f+0xc6>
 8027bda:	eeb4 8a48 	vcmp.f32	s16, s16
 8027bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027be2:	d650      	bvs.n	8027c86 <log10f+0xc6>
 8027be4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8027be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027bec:	d84b      	bhi.n	8027c86 <log10f+0xc6>
 8027bee:	4a29      	ldr	r2, [pc, #164]	; (8027c94 <log10f+0xd4>)
 8027bf0:	9201      	str	r2, [sp, #4]
 8027bf2:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
 8027bf6:	2200      	movs	r2, #0
 8027bf8:	9208      	str	r2, [sp, #32]
 8027bfa:	ed8d 7b04 	vstr	d7, [sp, #16]
 8027bfe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027c02:	b993      	cbnz	r3, 8027c2a <log10f+0x6a>
 8027c04:	4924      	ldr	r1, [pc, #144]	; (8027c98 <log10f+0xd8>)
 8027c06:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8027c0a:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 8027c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c12:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8027c16:	d025      	beq.n	8027c64 <log10f+0xa4>
 8027c18:	2201      	movs	r2, #1
 8027c1a:	2b02      	cmp	r3, #2
 8027c1c:	9200      	str	r2, [sp, #0]
 8027c1e:	d116      	bne.n	8027c4e <log10f+0x8e>
 8027c20:	f7ff f8fc 	bl	8026e1c <__errno>
 8027c24:	2321      	movs	r3, #33	; 0x21
 8027c26:	6003      	str	r3, [r0, #0]
 8027c28:	e016      	b.n	8027c58 <log10f+0x98>
 8027c2a:	491c      	ldr	r1, [pc, #112]	; (8027c9c <log10f+0xdc>)
 8027c2c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8027c30:	2000      	movs	r0, #0
 8027c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8027c3a:	d1ed      	bne.n	8027c18 <log10f+0x58>
 8027c3c:	2202      	movs	r2, #2
 8027c3e:	4293      	cmp	r3, r2
 8027c40:	9200      	str	r2, [sp, #0]
 8027c42:	d111      	bne.n	8027c68 <log10f+0xa8>
 8027c44:	f7ff f8ea 	bl	8026e1c <__errno>
 8027c48:	2322      	movs	r3, #34	; 0x22
 8027c4a:	6003      	str	r3, [r0, #0]
 8027c4c:	e011      	b.n	8027c72 <log10f+0xb2>
 8027c4e:	4668      	mov	r0, sp
 8027c50:	f001 fc08 	bl	8029464 <matherr>
 8027c54:	2800      	cmp	r0, #0
 8027c56:	d0e3      	beq.n	8027c20 <log10f+0x60>
 8027c58:	4811      	ldr	r0, [pc, #68]	; (8027ca0 <log10f+0xe0>)
 8027c5a:	f001 fc05 	bl	8029468 <nan>
 8027c5e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8027c62:	e006      	b.n	8027c72 <log10f+0xb2>
 8027c64:	2302      	movs	r3, #2
 8027c66:	9300      	str	r3, [sp, #0]
 8027c68:	4668      	mov	r0, sp
 8027c6a:	f001 fbfb 	bl	8029464 <matherr>
 8027c6e:	2800      	cmp	r0, #0
 8027c70:	d0e8      	beq.n	8027c44 <log10f+0x84>
 8027c72:	9b08      	ldr	r3, [sp, #32]
 8027c74:	b11b      	cbz	r3, 8027c7e <log10f+0xbe>
 8027c76:	f7ff f8d1 	bl	8026e1c <__errno>
 8027c7a:	9b08      	ldr	r3, [sp, #32]
 8027c7c:	6003      	str	r3, [r0, #0]
 8027c7e:	ed9d 0b06 	vldr	d0, [sp, #24]
 8027c82:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8027c86:	b00b      	add	sp, #44	; 0x2c
 8027c88:	ecbd 8b02 	vpop	{d8}
 8027c8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8027c90:	200004b4 	.word	0x200004b4
 8027c94:	08145ea6 	.word	0x08145ea6
 8027c98:	c7efffff 	.word	0xc7efffff
 8027c9c:	fff00000 	.word	0xfff00000
 8027ca0:	08145eac 	.word	0x08145eac
 8027ca4:	00000000 	.word	0x00000000

08027ca8 <sinhf>:
 8027ca8:	b530      	push	{r4, r5, lr}
 8027caa:	ed2d 8b02 	vpush	{d8}
 8027cae:	4c32      	ldr	r4, [pc, #200]	; (8027d78 <sinhf+0xd0>)
 8027cb0:	b08b      	sub	sp, #44	; 0x2c
 8027cb2:	eef0 8a40 	vmov.f32	s17, s0
 8027cb6:	f000 feff 	bl	8028ab8 <__ieee754_sinhf>
 8027cba:	f994 3000 	ldrsb.w	r3, [r4]
 8027cbe:	3301      	adds	r3, #1
 8027cc0:	eeb0 8a40 	vmov.f32	s16, s0
 8027cc4:	d030      	beq.n	8027d28 <sinhf+0x80>
 8027cc6:	f001 fe0b 	bl	80298e0 <finitef>
 8027cca:	4605      	mov	r5, r0
 8027ccc:	bb60      	cbnz	r0, 8027d28 <sinhf+0x80>
 8027cce:	eeb0 0a68 	vmov.f32	s0, s17
 8027cd2:	f001 fe05 	bl	80298e0 <finitef>
 8027cd6:	b338      	cbz	r0, 8027d28 <sinhf+0x80>
 8027cd8:	2303      	movs	r3, #3
 8027cda:	9300      	str	r3, [sp, #0]
 8027cdc:	4b27      	ldr	r3, [pc, #156]	; (8027d7c <sinhf+0xd4>)
 8027cde:	9301      	str	r3, [sp, #4]
 8027ce0:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
 8027ce4:	f994 3000 	ldrsb.w	r3, [r4]
 8027ce8:	9508      	str	r5, [sp, #32]
 8027cea:	ed8d 7b04 	vstr	d7, [sp, #16]
 8027cee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027cf2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8027cf6:	b9eb      	cbnz	r3, 8027d34 <sinhf+0x8c>
 8027cf8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8027d58 <sinhf+0xb0>
 8027cfc:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8027d60 <sinhf+0xb8>
 8027d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d04:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8027d08:	ed8d 7b06 	vstr	d7, [sp, #24]
 8027d0c:	4668      	mov	r0, sp
 8027d0e:	f001 fba9 	bl	8029464 <matherr>
 8027d12:	b1d8      	cbz	r0, 8027d4c <sinhf+0xa4>
 8027d14:	9b08      	ldr	r3, [sp, #32]
 8027d16:	b11b      	cbz	r3, 8027d20 <sinhf+0x78>
 8027d18:	f7ff f880 	bl	8026e1c <__errno>
 8027d1c:	9b08      	ldr	r3, [sp, #32]
 8027d1e:	6003      	str	r3, [r0, #0]
 8027d20:	ed9d 8b06 	vldr	d8, [sp, #24]
 8027d24:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
 8027d28:	eeb0 0a48 	vmov.f32	s0, s16
 8027d2c:	b00b      	add	sp, #44	; 0x2c
 8027d2e:	ecbd 8b02 	vpop	{d8}
 8027d32:	bd30      	pop	{r4, r5, pc}
 8027d34:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8027d68 <sinhf+0xc0>
 8027d38:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8027d70 <sinhf+0xc8>
 8027d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d40:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8027d44:	2b02      	cmp	r3, #2
 8027d46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8027d4a:	d1df      	bne.n	8027d0c <sinhf+0x64>
 8027d4c:	f7ff f866 	bl	8026e1c <__errno>
 8027d50:	2322      	movs	r3, #34	; 0x22
 8027d52:	6003      	str	r3, [r0, #0]
 8027d54:	e7de      	b.n	8027d14 <sinhf+0x6c>
 8027d56:	bf00      	nop
 8027d58:	e0000000 	.word	0xe0000000
 8027d5c:	47efffff 	.word	0x47efffff
 8027d60:	e0000000 	.word	0xe0000000
 8027d64:	c7efffff 	.word	0xc7efffff
 8027d68:	00000000 	.word	0x00000000
 8027d6c:	7ff00000 	.word	0x7ff00000
 8027d70:	00000000 	.word	0x00000000
 8027d74:	fff00000 	.word	0xfff00000
 8027d78:	200004b4 	.word	0x200004b4
 8027d7c:	08145ead 	.word	0x08145ead

08027d80 <__ieee754_exp>:
 8027d80:	ee10 1a90 	vmov	r1, s1
 8027d84:	4b7a      	ldr	r3, [pc, #488]	; (8027f70 <__ieee754_exp+0x1f0>)
 8027d86:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8027d8a:	429a      	cmp	r2, r3
 8027d8c:	b082      	sub	sp, #8
 8027d8e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8027d92:	d928      	bls.n	8027de6 <__ieee754_exp+0x66>
 8027d94:	4b77      	ldr	r3, [pc, #476]	; (8027f74 <__ieee754_exp+0x1f4>)
 8027d96:	429a      	cmp	r2, r3
 8027d98:	d90f      	bls.n	8027dba <__ieee754_exp+0x3a>
 8027d9a:	ee10 3a10 	vmov	r3, s0
 8027d9e:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8027da2:	430b      	orrs	r3, r1
 8027da4:	d003      	beq.n	8027dae <__ieee754_exp+0x2e>
 8027da6:	ee30 0b00 	vadd.f64	d0, d0, d0
 8027daa:	b002      	add	sp, #8
 8027dac:	4770      	bx	lr
 8027dae:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8027f08 <__ieee754_exp+0x188>
 8027db2:	2800      	cmp	r0, #0
 8027db4:	fe00 0b07 	vseleq.f64	d0, d0, d7
 8027db8:	e7f7      	b.n	8027daa <__ieee754_exp+0x2a>
 8027dba:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8027f10 <__ieee754_exp+0x190>
 8027dbe:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8027dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027dc6:	dd04      	ble.n	8027dd2 <__ieee754_exp+0x52>
 8027dc8:	ed9f 0b53 	vldr	d0, [pc, #332]	; 8027f18 <__ieee754_exp+0x198>
 8027dcc:	ee20 0b00 	vmul.f64	d0, d0, d0
 8027dd0:	e7eb      	b.n	8027daa <__ieee754_exp+0x2a>
 8027dd2:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8027f20 <__ieee754_exp+0x1a0>
 8027dd6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8027dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027dde:	d505      	bpl.n	8027dec <__ieee754_exp+0x6c>
 8027de0:	ed9f 0b49 	vldr	d0, [pc, #292]	; 8027f08 <__ieee754_exp+0x188>
 8027de4:	e7e1      	b.n	8027daa <__ieee754_exp+0x2a>
 8027de6:	4b64      	ldr	r3, [pc, #400]	; (8027f78 <__ieee754_exp+0x1f8>)
 8027de8:	429a      	cmp	r2, r3
 8027dea:	d956      	bls.n	8027e9a <__ieee754_exp+0x11a>
 8027dec:	4b63      	ldr	r3, [pc, #396]	; (8027f7c <__ieee754_exp+0x1fc>)
 8027dee:	429a      	cmp	r2, r3
 8027df0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8027df4:	d838      	bhi.n	8027e68 <__ieee754_exp+0xe8>
 8027df6:	4b62      	ldr	r3, [pc, #392]	; (8027f80 <__ieee754_exp+0x200>)
 8027df8:	4413      	add	r3, r2
 8027dfa:	ed93 6b00 	vldr	d6, [r3]
 8027dfe:	4b61      	ldr	r3, [pc, #388]	; (8027f84 <__ieee754_exp+0x204>)
 8027e00:	ee30 6b46 	vsub.f64	d6, d0, d6
 8027e04:	4413      	add	r3, r2
 8027e06:	ed93 7b00 	vldr	d7, [r3]
 8027e0a:	f1c0 0301 	rsb	r3, r0, #1
 8027e0e:	1a1b      	subs	r3, r3, r0
 8027e10:	ee36 0b47 	vsub.f64	d0, d6, d7
 8027e14:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8027f28 <__ieee754_exp+0x1a8>
 8027e18:	ee20 5b00 	vmul.f64	d5, d0, d0
 8027e1c:	ed9f 3b44 	vldr	d3, [pc, #272]	; 8027f30 <__ieee754_exp+0x1b0>
 8027e20:	eea5 3b04 	vfma.f64	d3, d5, d4
 8027e24:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8027f38 <__ieee754_exp+0x1b8>
 8027e28:	eea3 4b05 	vfma.f64	d4, d3, d5
 8027e2c:	ed9f 3b44 	vldr	d3, [pc, #272]	; 8027f40 <__ieee754_exp+0x1c0>
 8027e30:	eea4 3b05 	vfma.f64	d3, d4, d5
 8027e34:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8027f48 <__ieee754_exp+0x1c8>
 8027e38:	eea3 4b05 	vfma.f64	d4, d3, d5
 8027e3c:	eeb0 3b40 	vmov.f64	d3, d0
 8027e40:	eea4 3b45 	vfms.f64	d3, d4, d5
 8027e44:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8027e48:	eeb0 5b43 	vmov.f64	d5, d3
 8027e4c:	ee20 2b03 	vmul.f64	d2, d0, d3
 8027e50:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8027e54:	bba3      	cbnz	r3, 8027ec0 <__ieee754_exp+0x140>
 8027e56:	ee35 5b44 	vsub.f64	d5, d5, d4
 8027e5a:	ee82 7b05 	vdiv.f64	d7, d2, d5
 8027e5e:	ee37 0b40 	vsub.f64	d0, d7, d0
 8027e62:	ee33 0b40 	vsub.f64	d0, d3, d0
 8027e66:	e7a0      	b.n	8027daa <__ieee754_exp+0x2a>
 8027e68:	4b47      	ldr	r3, [pc, #284]	; (8027f88 <__ieee754_exp+0x208>)
 8027e6a:	4413      	add	r3, r2
 8027e6c:	ed93 7b00 	vldr	d7, [r3]
 8027e70:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8027f50 <__ieee754_exp+0x1d0>
 8027e74:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8027f58 <__ieee754_exp+0x1d8>
 8027e78:	eea0 7b06 	vfma.f64	d7, d0, d6
 8027e7c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8027f60 <__ieee754_exp+0x1e0>
 8027e80:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8027e84:	ee17 3a90 	vmov	r3, s15
 8027e88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8027e8c:	eea7 0b46 	vfms.f64	d0, d7, d6
 8027e90:	ee27 7b05 	vmul.f64	d7, d7, d5
 8027e94:	eeb0 6b40 	vmov.f64	d6, d0
 8027e98:	e7ba      	b.n	8027e10 <__ieee754_exp+0x90>
 8027e9a:	4b3c      	ldr	r3, [pc, #240]	; (8027f8c <__ieee754_exp+0x20c>)
 8027e9c:	429a      	cmp	r2, r3
 8027e9e:	d80d      	bhi.n	8027ebc <__ieee754_exp+0x13c>
 8027ea0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8027ea4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8027f18 <__ieee754_exp+0x198>
 8027ea8:	ee30 5b05 	vadd.f64	d5, d0, d5
 8027eac:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8027eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027eb4:	dd02      	ble.n	8027ebc <__ieee754_exp+0x13c>
 8027eb6:	ee30 0b04 	vadd.f64	d0, d0, d4
 8027eba:	e776      	b.n	8027daa <__ieee754_exp+0x2a>
 8027ebc:	2300      	movs	r3, #0
 8027ebe:	e7a9      	b.n	8027e14 <__ieee754_exp+0x94>
 8027ec0:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 8027ec4:	ee34 5b45 	vsub.f64	d5, d4, d5
 8027ec8:	428b      	cmp	r3, r1
 8027eca:	ee82 4b05 	vdiv.f64	d4, d2, d5
 8027ece:	ee37 7b44 	vsub.f64	d7, d7, d4
 8027ed2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8027ed6:	ee33 7b47 	vsub.f64	d7, d3, d7
 8027eda:	ed8d 7b00 	vstr	d7, [sp]
 8027ede:	9a01      	ldr	r2, [sp, #4]
 8027ee0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027ee4:	db04      	blt.n	8027ef0 <__ieee754_exp+0x170>
 8027ee6:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 8027eea:	ec41 0b10 	vmov	d0, r0, r1
 8027eee:	e75c      	b.n	8027daa <__ieee754_exp+0x2a>
 8027ef0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8027ef4:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 8027ef8:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8027f68 <__ieee754_exp+0x1e8>
 8027efc:	ec41 0b10 	vmov	d0, r0, r1
 8027f00:	ee20 0b07 	vmul.f64	d0, d0, d7
 8027f04:	e751      	b.n	8027daa <__ieee754_exp+0x2a>
 8027f06:	bf00      	nop
	...
 8027f10:	fefa39ef 	.word	0xfefa39ef
 8027f14:	40862e42 	.word	0x40862e42
 8027f18:	8800759c 	.word	0x8800759c
 8027f1c:	7e37e43c 	.word	0x7e37e43c
 8027f20:	d52d3051 	.word	0xd52d3051
 8027f24:	c0874910 	.word	0xc0874910
 8027f28:	72bea4d0 	.word	0x72bea4d0
 8027f2c:	3e663769 	.word	0x3e663769
 8027f30:	c5d26bf1 	.word	0xc5d26bf1
 8027f34:	bebbbd41 	.word	0xbebbbd41
 8027f38:	af25de2c 	.word	0xaf25de2c
 8027f3c:	3f11566a 	.word	0x3f11566a
 8027f40:	16bebd93 	.word	0x16bebd93
 8027f44:	bf66c16c 	.word	0xbf66c16c
 8027f48:	5555553e 	.word	0x5555553e
 8027f4c:	3fc55555 	.word	0x3fc55555
 8027f50:	652b82fe 	.word	0x652b82fe
 8027f54:	3ff71547 	.word	0x3ff71547
 8027f58:	35793c76 	.word	0x35793c76
 8027f5c:	3dea39ef 	.word	0x3dea39ef
 8027f60:	fee00000 	.word	0xfee00000
 8027f64:	3fe62e42 	.word	0x3fe62e42
 8027f68:	00000000 	.word	0x00000000
 8027f6c:	01700000 	.word	0x01700000
 8027f70:	40862e41 	.word	0x40862e41
 8027f74:	7fefffff 	.word	0x7fefffff
 8027f78:	3fd62e42 	.word	0x3fd62e42
 8027f7c:	3ff0a2b1 	.word	0x3ff0a2b1
 8027f80:	08145ec8 	.word	0x08145ec8
 8027f84:	08145ed8 	.word	0x08145ed8
 8027f88:	08145eb8 	.word	0x08145eb8
 8027f8c:	3e2fffff 	.word	0x3e2fffff

08027f90 <__ieee754_pow>:
 8027f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f94:	ec57 6b11 	vmov	r6, r7, d1
 8027f98:	ed2d 8b02 	vpush	{d8}
 8027f9c:	eeb0 8b40 	vmov.f64	d8, d0
 8027fa0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8027fa4:	ea58 0306 	orrs.w	r3, r8, r6
 8027fa8:	b085      	sub	sp, #20
 8027faa:	46b9      	mov	r9, r7
 8027fac:	ee11 2a10 	vmov	r2, s2
 8027fb0:	f000 8306 	beq.w	80285c0 <__ieee754_pow+0x630>
 8027fb4:	ee18 aa90 	vmov	sl, s17
 8027fb8:	4bb9      	ldr	r3, [pc, #740]	; (80282a0 <__ieee754_pow+0x310>)
 8027fba:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 8027fbe:	429c      	cmp	r4, r3
 8027fc0:	ee10 ba10 	vmov	fp, s0
 8027fc4:	dc0b      	bgt.n	8027fde <__ieee754_pow+0x4e>
 8027fc6:	d105      	bne.n	8027fd4 <__ieee754_pow+0x44>
 8027fc8:	f1bb 0f00 	cmp.w	fp, #0
 8027fcc:	d107      	bne.n	8027fde <__ieee754_pow+0x4e>
 8027fce:	45a0      	cmp	r8, r4
 8027fd0:	dc0d      	bgt.n	8027fee <__ieee754_pow+0x5e>
 8027fd2:	e001      	b.n	8027fd8 <__ieee754_pow+0x48>
 8027fd4:	4598      	cmp	r8, r3
 8027fd6:	dc02      	bgt.n	8027fde <__ieee754_pow+0x4e>
 8027fd8:	4598      	cmp	r8, r3
 8027fda:	d110      	bne.n	8027ffe <__ieee754_pow+0x6e>
 8027fdc:	b17a      	cbz	r2, 8027ffe <__ieee754_pow+0x6e>
 8027fde:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8027fe2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8027fe6:	ea54 030b 	orrs.w	r3, r4, fp
 8027fea:	f000 82e9 	beq.w	80285c0 <__ieee754_pow+0x630>
 8027fee:	48ad      	ldr	r0, [pc, #692]	; (80282a4 <__ieee754_pow+0x314>)
 8027ff0:	b005      	add	sp, #20
 8027ff2:	ecbd 8b02 	vpop	{d8}
 8027ff6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ffa:	f001 ba35 	b.w	8029468 <nan>
 8027ffe:	f1ba 0f00 	cmp.w	sl, #0
 8028002:	da4e      	bge.n	80280a2 <__ieee754_pow+0x112>
 8028004:	4ba8      	ldr	r3, [pc, #672]	; (80282a8 <__ieee754_pow+0x318>)
 8028006:	4598      	cmp	r8, r3
 8028008:	dc49      	bgt.n	802809e <__ieee754_pow+0x10e>
 802800a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802800e:	4598      	cmp	r8, r3
 8028010:	dd47      	ble.n	80280a2 <__ieee754_pow+0x112>
 8028012:	ea4f 5328 	mov.w	r3, r8, asr #20
 8028016:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802801a:	2b14      	cmp	r3, #20
 802801c:	dd24      	ble.n	8028068 <__ieee754_pow+0xd8>
 802801e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8028022:	fa22 f503 	lsr.w	r5, r2, r3
 8028026:	fa05 f303 	lsl.w	r3, r5, r3
 802802a:	4293      	cmp	r3, r2
 802802c:	d139      	bne.n	80280a2 <__ieee754_pow+0x112>
 802802e:	f005 0501 	and.w	r5, r5, #1
 8028032:	f1c5 0502 	rsb	r5, r5, #2
 8028036:	2a00      	cmp	r2, #0
 8028038:	d15a      	bne.n	80280f0 <__ieee754_pow+0x160>
 802803a:	4b99      	ldr	r3, [pc, #612]	; (80282a0 <__ieee754_pow+0x310>)
 802803c:	4598      	cmp	r8, r3
 802803e:	d122      	bne.n	8028086 <__ieee754_pow+0xf6>
 8028040:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8028044:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8028048:	ea53 030b 	orrs.w	r3, r3, fp
 802804c:	f000 82b8 	beq.w	80285c0 <__ieee754_pow+0x630>
 8028050:	4b96      	ldr	r3, [pc, #600]	; (80282ac <__ieee754_pow+0x31c>)
 8028052:	429c      	cmp	r4, r3
 8028054:	dd27      	ble.n	80280a6 <__ieee754_pow+0x116>
 8028056:	f1b9 0f00 	cmp.w	r9, #0
 802805a:	f280 82b4 	bge.w	80285c6 <__ieee754_pow+0x636>
 802805e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8028270 <__ieee754_pow+0x2e0>
 8028062:	ed8d 7b00 	vstr	d7, [sp]
 8028066:	e026      	b.n	80280b6 <__ieee754_pow+0x126>
 8028068:	2a00      	cmp	r2, #0
 802806a:	d140      	bne.n	80280ee <__ieee754_pow+0x15e>
 802806c:	f1c3 0314 	rsb	r3, r3, #20
 8028070:	fa48 f503 	asr.w	r5, r8, r3
 8028074:	fa05 f303 	lsl.w	r3, r5, r3
 8028078:	4543      	cmp	r3, r8
 802807a:	f040 82aa 	bne.w	80285d2 <__ieee754_pow+0x642>
 802807e:	f005 0501 	and.w	r5, r5, #1
 8028082:	f1c5 0502 	rsb	r5, r5, #2
 8028086:	4b8a      	ldr	r3, [pc, #552]	; (80282b0 <__ieee754_pow+0x320>)
 8028088:	4598      	cmp	r8, r3
 802808a:	d11b      	bne.n	80280c4 <__ieee754_pow+0x134>
 802808c:	f1b9 0f00 	cmp.w	r9, #0
 8028090:	f280 829c 	bge.w	80285cc <__ieee754_pow+0x63c>
 8028094:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8028098:	ee87 7b08 	vdiv.f64	d7, d7, d8
 802809c:	e7e1      	b.n	8028062 <__ieee754_pow+0xd2>
 802809e:	2502      	movs	r5, #2
 80280a0:	e7c9      	b.n	8028036 <__ieee754_pow+0xa6>
 80280a2:	2500      	movs	r5, #0
 80280a4:	e7c7      	b.n	8028036 <__ieee754_pow+0xa6>
 80280a6:	f1b9 0f00 	cmp.w	r9, #0
 80280aa:	dad8      	bge.n	802805e <__ieee754_pow+0xce>
 80280ac:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 80280b0:	4633      	mov	r3, r6
 80280b2:	e9cd 3400 	strd	r3, r4, [sp]
 80280b6:	ed9d 0b00 	vldr	d0, [sp]
 80280ba:	b005      	add	sp, #20
 80280bc:	ecbd 8b02 	vpop	{d8}
 80280c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80280c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80280c8:	d102      	bne.n	80280d0 <__ieee754_pow+0x140>
 80280ca:	ee28 7b08 	vmul.f64	d7, d8, d8
 80280ce:	e7c8      	b.n	8028062 <__ieee754_pow+0xd2>
 80280d0:	4b78      	ldr	r3, [pc, #480]	; (80282b4 <__ieee754_pow+0x324>)
 80280d2:	4599      	cmp	r9, r3
 80280d4:	d10c      	bne.n	80280f0 <__ieee754_pow+0x160>
 80280d6:	f1ba 0f00 	cmp.w	sl, #0
 80280da:	db09      	blt.n	80280f0 <__ieee754_pow+0x160>
 80280dc:	eeb0 0b48 	vmov.f64	d0, d8
 80280e0:	b005      	add	sp, #20
 80280e2:	ecbd 8b02 	vpop	{d8}
 80280e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280ea:	f000 bad7 	b.w	802869c <__ieee754_sqrt>
 80280ee:	2500      	movs	r5, #0
 80280f0:	eeb0 0b48 	vmov.f64	d0, d8
 80280f4:	f001 f9a5 	bl	8029442 <fabs>
 80280f8:	ed8d 0b00 	vstr	d0, [sp]
 80280fc:	f1bb 0f00 	cmp.w	fp, #0
 8028100:	d128      	bne.n	8028154 <__ieee754_pow+0x1c4>
 8028102:	b124      	cbz	r4, 802810e <__ieee754_pow+0x17e>
 8028104:	4b6a      	ldr	r3, [pc, #424]	; (80282b0 <__ieee754_pow+0x320>)
 8028106:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 802810a:	429a      	cmp	r2, r3
 802810c:	d122      	bne.n	8028154 <__ieee754_pow+0x1c4>
 802810e:	f1b9 0f00 	cmp.w	r9, #0
 8028112:	da07      	bge.n	8028124 <__ieee754_pow+0x194>
 8028114:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8028118:	ed9d 6b00 	vldr	d6, [sp]
 802811c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8028120:	ed8d 7b00 	vstr	d7, [sp]
 8028124:	f1ba 0f00 	cmp.w	sl, #0
 8028128:	dac5      	bge.n	80280b6 <__ieee754_pow+0x126>
 802812a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802812e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8028132:	ea54 0305 	orrs.w	r3, r4, r5
 8028136:	d106      	bne.n	8028146 <__ieee754_pow+0x1b6>
 8028138:	ed9d 7b00 	vldr	d7, [sp]
 802813c:	ee37 7b47 	vsub.f64	d7, d7, d7
 8028140:	ee87 7b07 	vdiv.f64	d7, d7, d7
 8028144:	e78d      	b.n	8028062 <__ieee754_pow+0xd2>
 8028146:	2d01      	cmp	r5, #1
 8028148:	d1b5      	bne.n	80280b6 <__ieee754_pow+0x126>
 802814a:	ed9d 7b00 	vldr	d7, [sp]
 802814e:	eeb1 7b47 	vneg.f64	d7, d7
 8028152:	e786      	b.n	8028062 <__ieee754_pow+0xd2>
 8028154:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8028158:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 802815c:	ea55 030a 	orrs.w	r3, r5, sl
 8028160:	d104      	bne.n	802816c <__ieee754_pow+0x1dc>
 8028162:	ee38 8b48 	vsub.f64	d8, d8, d8
 8028166:	ee88 7b08 	vdiv.f64	d7, d8, d8
 802816a:	e77a      	b.n	8028062 <__ieee754_pow+0xd2>
 802816c:	4b52      	ldr	r3, [pc, #328]	; (80282b8 <__ieee754_pow+0x328>)
 802816e:	4598      	cmp	r8, r3
 8028170:	f340 80a8 	ble.w	80282c4 <__ieee754_pow+0x334>
 8028174:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8028178:	4598      	cmp	r8, r3
 802817a:	dd0b      	ble.n	8028194 <__ieee754_pow+0x204>
 802817c:	4b4b      	ldr	r3, [pc, #300]	; (80282ac <__ieee754_pow+0x31c>)
 802817e:	429c      	cmp	r4, r3
 8028180:	dc0e      	bgt.n	80281a0 <__ieee754_pow+0x210>
 8028182:	f1b9 0f00 	cmp.w	r9, #0
 8028186:	f6bf af6a 	bge.w	802805e <__ieee754_pow+0xce>
 802818a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8028278 <__ieee754_pow+0x2e8>
 802818e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8028192:	e766      	b.n	8028062 <__ieee754_pow+0xd2>
 8028194:	4b49      	ldr	r3, [pc, #292]	; (80282bc <__ieee754_pow+0x32c>)
 8028196:	429c      	cmp	r4, r3
 8028198:	ddf3      	ble.n	8028182 <__ieee754_pow+0x1f2>
 802819a:	4b45      	ldr	r3, [pc, #276]	; (80282b0 <__ieee754_pow+0x320>)
 802819c:	429c      	cmp	r4, r3
 802819e:	dd03      	ble.n	80281a8 <__ieee754_pow+0x218>
 80281a0:	f1b9 0f00 	cmp.w	r9, #0
 80281a4:	dcf1      	bgt.n	802818a <__ieee754_pow+0x1fa>
 80281a6:	e75a      	b.n	802805e <__ieee754_pow+0xce>
 80281a8:	ed9d 7b00 	vldr	d7, [sp]
 80281ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80281b0:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8028280 <__ieee754_pow+0x2f0>
 80281b4:	ee37 6b46 	vsub.f64	d6, d7, d6
 80281b8:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 80281bc:	eeb1 3b46 	vneg.f64	d3, d6
 80281c0:	eea3 5b07 	vfma.f64	d5, d3, d7
 80281c4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80281c8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80281cc:	ee26 5b06 	vmul.f64	d5, d6, d6
 80281d0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80281d4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8028288 <__ieee754_pow+0x2f8>
 80281d8:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80281dc:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8028290 <__ieee754_pow+0x300>
 80281e0:	eea6 7b05 	vfma.f64	d7, d6, d5
 80281e4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8028298 <__ieee754_pow+0x308>
 80281e8:	eeb0 4b47 	vmov.f64	d4, d7
 80281ec:	eea6 4b05 	vfma.f64	d4, d6, d5
 80281f0:	ec53 2b14 	vmov	r2, r3, d4
 80281f4:	2200      	movs	r2, #0
 80281f6:	ec43 2b14 	vmov	d4, r2, r3
 80281fa:	eeb0 6b44 	vmov.f64	d6, d4
 80281fe:	eea3 6b05 	vfma.f64	d6, d3, d5
 8028202:	ee37 7b46 	vsub.f64	d7, d7, d6
 8028206:	3d01      	subs	r5, #1
 8028208:	ea55 030a 	orrs.w	r3, r5, sl
 802820c:	f04f 0200 	mov.w	r2, #0
 8028210:	463b      	mov	r3, r7
 8028212:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8028216:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 802821a:	ec47 6b15 	vmov	d5, r6, r7
 802821e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 8028222:	ec47 6b13 	vmov	d3, r6, r7
 8028226:	ec43 2b16 	vmov	d6, r2, r3
 802822a:	ee27 7b03 	vmul.f64	d7, d7, d3
 802822e:	ee35 5b46 	vsub.f64	d5, d5, d6
 8028232:	4b23      	ldr	r3, [pc, #140]	; (80282c0 <__ieee754_pow+0x330>)
 8028234:	eea5 7b04 	vfma.f64	d7, d5, d4
 8028238:	ee24 6b06 	vmul.f64	d6, d4, d6
 802823c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8028240:	ee15 1a90 	vmov	r1, s11
 8028244:	4299      	cmp	r1, r3
 8028246:	ee15 2a10 	vmov	r2, s10
 802824a:	f340 819b 	ble.w	8028584 <__ieee754_pow+0x5f4>
 802824e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8028252:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8028256:	4313      	orrs	r3, r2
 8028258:	f000 810a 	beq.w	8028470 <__ieee754_pow+0x4e0>
 802825c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8028278 <__ieee754_pow+0x2e8>
 8028260:	ee28 8b07 	vmul.f64	d8, d8, d7
 8028264:	ee28 7b07 	vmul.f64	d7, d8, d7
 8028268:	e6fb      	b.n	8028062 <__ieee754_pow+0xd2>
 802826a:	bf00      	nop
 802826c:	f3af 8000 	nop.w
	...
 8028278:	8800759c 	.word	0x8800759c
 802827c:	7e37e43c 	.word	0x7e37e43c
 8028280:	55555555 	.word	0x55555555
 8028284:	3fd55555 	.word	0x3fd55555
 8028288:	652b82fe 	.word	0x652b82fe
 802828c:	3ff71547 	.word	0x3ff71547
 8028290:	f85ddf44 	.word	0xf85ddf44
 8028294:	3e54ae0b 	.word	0x3e54ae0b
 8028298:	60000000 	.word	0x60000000
 802829c:	3ff71547 	.word	0x3ff71547
 80282a0:	7ff00000 	.word	0x7ff00000
 80282a4:	08145eac 	.word	0x08145eac
 80282a8:	433fffff 	.word	0x433fffff
 80282ac:	3fefffff 	.word	0x3fefffff
 80282b0:	3ff00000 	.word	0x3ff00000
 80282b4:	3fe00000 	.word	0x3fe00000
 80282b8:	41e00000 	.word	0x41e00000
 80282bc:	3feffffe 	.word	0x3feffffe
 80282c0:	408fffff 	.word	0x408fffff
 80282c4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80282c8:	f280 80ce 	bge.w	8028468 <__ieee754_pow+0x4d8>
 80282cc:	ed9d 6b00 	vldr	d6, [sp]
 80282d0:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 80285d8 <__ieee754_pow+0x648>
 80282d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80282d8:	ed8d 7b00 	vstr	d7, [sp]
 80282dc:	9c01      	ldr	r4, [sp, #4]
 80282de:	f06f 0334 	mvn.w	r3, #52	; 0x34
 80282e2:	1521      	asrs	r1, r4, #20
 80282e4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80282e8:	4419      	add	r1, r3
 80282ea:	4be3      	ldr	r3, [pc, #908]	; (8028678 <__ieee754_pow+0x6e8>)
 80282ec:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80282f0:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 80282f4:	429c      	cmp	r4, r3
 80282f6:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 80282fa:	dd06      	ble.n	802830a <__ieee754_pow+0x37a>
 80282fc:	4bdf      	ldr	r3, [pc, #892]	; (802867c <__ieee754_pow+0x6ec>)
 80282fe:	429c      	cmp	r4, r3
 8028300:	f340 80b4 	ble.w	802846c <__ieee754_pow+0x4dc>
 8028304:	3101      	adds	r1, #1
 8028306:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 802830a:	2400      	movs	r4, #0
 802830c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028310:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8028314:	4603      	mov	r3, r0
 8028316:	ec43 2b17 	vmov	d7, r2, r3
 802831a:	4bd9      	ldr	r3, [pc, #868]	; (8028680 <__ieee754_pow+0x6f0>)
 802831c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8028320:	4463      	add	r3, ip
 8028322:	ed93 5b00 	vldr	d5, [r3]
 8028326:	1040      	asrs	r0, r0, #1
 8028328:	ee37 2b45 	vsub.f64	d2, d7, d5
 802832c:	ee35 6b07 	vadd.f64	d6, d5, d7
 8028330:	ee84 1b06 	vdiv.f64	d1, d4, d6
 8028334:	ee22 6b01 	vmul.f64	d6, d2, d1
 8028338:	ed8d 6b00 	vstr	d6, [sp]
 802833c:	e9dd 8900 	ldrd	r8, r9, [sp]
 8028340:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8028344:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8028348:	f04f 0800 	mov.w	r8, #0
 802834c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8028350:	2200      	movs	r2, #0
 8028352:	ec49 8b14 	vmov	d4, r8, r9
 8028356:	ec43 2b16 	vmov	d6, r2, r3
 802835a:	eeb1 3b44 	vneg.f64	d3, d4
 802835e:	eea3 2b06 	vfma.f64	d2, d3, d6
 8028362:	ee36 6b45 	vsub.f64	d6, d6, d5
 8028366:	ee37 7b46 	vsub.f64	d7, d7, d6
 802836a:	eea3 2b07 	vfma.f64	d2, d3, d7
 802836e:	ed9d 7b00 	vldr	d7, [sp]
 8028372:	ee22 2b01 	vmul.f64	d2, d2, d1
 8028376:	ee27 5b07 	vmul.f64	d5, d7, d7
 802837a:	ee37 6b04 	vadd.f64	d6, d7, d4
 802837e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 80285e0 <__ieee754_pow+0x650>
 8028382:	ee25 0b05 	vmul.f64	d0, d5, d5
 8028386:	ee26 6b02 	vmul.f64	d6, d6, d2
 802838a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 80285e8 <__ieee754_pow+0x658>
 802838e:	eea5 7b01 	vfma.f64	d7, d5, d1
 8028392:	ed9f 1b97 	vldr	d1, [pc, #604]	; 80285f0 <__ieee754_pow+0x660>
 8028396:	eea7 1b05 	vfma.f64	d1, d7, d5
 802839a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 80285f8 <__ieee754_pow+0x668>
 802839e:	eea1 7b05 	vfma.f64	d7, d1, d5
 80283a2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8028600 <__ieee754_pow+0x670>
 80283a6:	eea7 1b05 	vfma.f64	d1, d7, d5
 80283aa:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8028608 <__ieee754_pow+0x678>
 80283ae:	eea1 7b05 	vfma.f64	d7, d1, d5
 80283b2:	eea0 6b07 	vfma.f64	d6, d0, d7
 80283b6:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 80283ba:	eeb0 5b47 	vmov.f64	d5, d7
 80283be:	eea4 5b04 	vfma.f64	d5, d4, d4
 80283c2:	ee35 5b06 	vadd.f64	d5, d5, d6
 80283c6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80283ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80283ce:	ed9d 5b02 	vldr	d5, [sp, #8]
 80283d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80283d6:	eea3 7b04 	vfma.f64	d7, d3, d4
 80283da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80283de:	ed9d 6b00 	vldr	d6, [sp]
 80283e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80283e6:	eea2 7b05 	vfma.f64	d7, d2, d5
 80283ea:	eeb0 6b47 	vmov.f64	d6, d7
 80283ee:	eea4 6b05 	vfma.f64	d6, d4, d5
 80283f2:	ed8d 6b00 	vstr	d6, [sp]
 80283f6:	f8cd 8000 	str.w	r8, [sp]
 80283fa:	ed9d 2b00 	vldr	d2, [sp]
 80283fe:	eeb0 6b42 	vmov.f64	d6, d2
 8028402:	eea3 6b05 	vfma.f64	d6, d3, d5
 8028406:	ee37 7b46 	vsub.f64	d7, d7, d6
 802840a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8028610 <__ieee754_pow+0x680>
 802840e:	4b9d      	ldr	r3, [pc, #628]	; (8028684 <__ieee754_pow+0x6f4>)
 8028410:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028414:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8028618 <__ieee754_pow+0x688>
 8028418:	4463      	add	r3, ip
 802841a:	eea2 7b06 	vfma.f64	d7, d2, d6
 802841e:	ed93 6b00 	vldr	d6, [r3]
 8028422:	4b99      	ldr	r3, [pc, #612]	; (8028688 <__ieee754_pow+0x6f8>)
 8028424:	ee37 6b06 	vadd.f64	d6, d7, d6
 8028428:	449c      	add	ip, r3
 802842a:	ed9c 1b00 	vldr	d1, [ip]
 802842e:	eeb0 4b46 	vmov.f64	d4, d6
 8028432:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8028620 <__ieee754_pow+0x690>
 8028436:	ee07 1a90 	vmov	s15, r1
 802843a:	eea2 4b03 	vfma.f64	d4, d2, d3
 802843e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028442:	ee34 4b01 	vadd.f64	d4, d4, d1
 8028446:	ee34 5b07 	vadd.f64	d5, d4, d7
 802844a:	ed8d 5b00 	vstr	d5, [sp]
 802844e:	f8cd 8000 	str.w	r8, [sp]
 8028452:	ed9d 4b00 	vldr	d4, [sp]
 8028456:	ee34 7b47 	vsub.f64	d7, d4, d7
 802845a:	ee37 7b41 	vsub.f64	d7, d7, d1
 802845e:	eea2 7b43 	vfms.f64	d7, d2, d3
 8028462:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028466:	e6ce      	b.n	8028206 <__ieee754_pow+0x276>
 8028468:	2300      	movs	r3, #0
 802846a:	e73a      	b.n	80282e2 <__ieee754_pow+0x352>
 802846c:	2401      	movs	r4, #1
 802846e:	e74d      	b.n	802830c <__ieee754_pow+0x37c>
 8028470:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8028628 <__ieee754_pow+0x698>
 8028474:	ee35 5b46 	vsub.f64	d5, d5, d6
 8028478:	ee37 4b04 	vadd.f64	d4, d7, d4
 802847c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8028480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028484:	f73f aeea 	bgt.w	802825c <__ieee754_pow+0x2cc>
 8028488:	4a80      	ldr	r2, [pc, #512]	; (802868c <__ieee754_pow+0x6fc>)
 802848a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802848e:	4293      	cmp	r3, r2
 8028490:	f340 808e 	ble.w	80285b0 <__ieee754_pow+0x620>
 8028494:	151b      	asrs	r3, r3, #20
 8028496:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 802849a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802849e:	4103      	asrs	r3, r0
 80284a0:	440b      	add	r3, r1
 80284a2:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80284a6:	487a      	ldr	r0, [pc, #488]	; (8028690 <__ieee754_pow+0x700>)
 80284a8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80284ac:	4110      	asrs	r0, r2
 80284ae:	ea23 0500 	bic.w	r5, r3, r0
 80284b2:	f3c3 0013 	ubfx	r0, r3, #0, #20
 80284b6:	2400      	movs	r4, #0
 80284b8:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 80284bc:	f1c2 0214 	rsb	r2, r2, #20
 80284c0:	ec45 4b15 	vmov	d5, r4, r5
 80284c4:	4110      	asrs	r0, r2
 80284c6:	2900      	cmp	r1, #0
 80284c8:	bfb8      	it	lt
 80284ca:	4240      	neglt	r0, r0
 80284cc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80284d0:	ee36 5b07 	vadd.f64	d5, d6, d7
 80284d4:	ec53 2b15 	vmov	r2, r3, d5
 80284d8:	2200      	movs	r2, #0
 80284da:	ec43 2b15 	vmov	d5, r2, r3
 80284de:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8028630 <__ieee754_pow+0x6a0>
 80284e2:	ee35 6b46 	vsub.f64	d6, d5, d6
 80284e6:	ee37 6b46 	vsub.f64	d6, d7, d6
 80284ea:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8028638 <__ieee754_pow+0x6a8>
 80284ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 80284f2:	eea6 7b04 	vfma.f64	d7, d6, d4
 80284f6:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8028640 <__ieee754_pow+0x6b0>
 80284fa:	eeb0 4b47 	vmov.f64	d4, d7
 80284fe:	eea5 4b06 	vfma.f64	d4, d5, d6
 8028502:	eeb0 3b44 	vmov.f64	d3, d4
 8028506:	eea5 3b46 	vfms.f64	d3, d5, d6
 802850a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8028648 <__ieee754_pow+0x6b8>
 802850e:	ee37 7b43 	vsub.f64	d7, d7, d3
 8028512:	ee24 6b04 	vmul.f64	d6, d4, d4
 8028516:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8028650 <__ieee754_pow+0x6c0>
 802851a:	eea4 7b07 	vfma.f64	d7, d4, d7
 802851e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8028522:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8028658 <__ieee754_pow+0x6c8>
 8028526:	eea3 5b06 	vfma.f64	d5, d3, d6
 802852a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8028660 <__ieee754_pow+0x6d0>
 802852e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8028532:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8028668 <__ieee754_pow+0x6d8>
 8028536:	eea3 5b06 	vfma.f64	d5, d3, d6
 802853a:	eeb0 3b44 	vmov.f64	d3, d4
 802853e:	eea5 3b46 	vfms.f64	d3, d5, d6
 8028542:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8028546:	eeb0 6b43 	vmov.f64	d6, d3
 802854a:	ee24 3b03 	vmul.f64	d3, d4, d3
 802854e:	ee36 5b45 	vsub.f64	d5, d6, d5
 8028552:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8028556:	ee36 7b47 	vsub.f64	d7, d6, d7
 802855a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802855e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8028562:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028566:	ed8d 7b00 	vstr	d7, [sp]
 802856a:	9901      	ldr	r1, [sp, #4]
 802856c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8028570:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8028574:	da1e      	bge.n	80285b4 <__ieee754_pow+0x624>
 8028576:	eeb0 0b47 	vmov.f64	d0, d7
 802857a:	f001 f809 	bl	8029590 <scalbn>
 802857e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8028582:	e56e      	b.n	8028062 <__ieee754_pow+0xd2>
 8028584:	4b43      	ldr	r3, [pc, #268]	; (8028694 <__ieee754_pow+0x704>)
 8028586:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 802858a:	4298      	cmp	r0, r3
 802858c:	f77f af7c 	ble.w	8028488 <__ieee754_pow+0x4f8>
 8028590:	4b41      	ldr	r3, [pc, #260]	; (8028698 <__ieee754_pow+0x708>)
 8028592:	440b      	add	r3, r1
 8028594:	4313      	orrs	r3, r2
 8028596:	d002      	beq.n	802859e <__ieee754_pow+0x60e>
 8028598:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8028670 <__ieee754_pow+0x6e0>
 802859c:	e660      	b.n	8028260 <__ieee754_pow+0x2d0>
 802859e:	ee35 5b46 	vsub.f64	d5, d5, d6
 80285a2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80285a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80285aa:	f6ff af6d 	blt.w	8028488 <__ieee754_pow+0x4f8>
 80285ae:	e7f3      	b.n	8028598 <__ieee754_pow+0x608>
 80285b0:	2000      	movs	r0, #0
 80285b2:	e78d      	b.n	80284d0 <__ieee754_pow+0x540>
 80285b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80285b8:	460b      	mov	r3, r1
 80285ba:	ec43 2b10 	vmov	d0, r2, r3
 80285be:	e7de      	b.n	802857e <__ieee754_pow+0x5ee>
 80285c0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80285c4:	e54d      	b.n	8028062 <__ieee754_pow+0xd2>
 80285c6:	e9cd 6700 	strd	r6, r7, [sp]
 80285ca:	e574      	b.n	80280b6 <__ieee754_pow+0x126>
 80285cc:	ed8d 8b00 	vstr	d8, [sp]
 80285d0:	e571      	b.n	80280b6 <__ieee754_pow+0x126>
 80285d2:	4615      	mov	r5, r2
 80285d4:	e557      	b.n	8028086 <__ieee754_pow+0xf6>
 80285d6:	bf00      	nop
 80285d8:	00000000 	.word	0x00000000
 80285dc:	43400000 	.word	0x43400000
 80285e0:	4a454eef 	.word	0x4a454eef
 80285e4:	3fca7e28 	.word	0x3fca7e28
 80285e8:	93c9db65 	.word	0x93c9db65
 80285ec:	3fcd864a 	.word	0x3fcd864a
 80285f0:	a91d4101 	.word	0xa91d4101
 80285f4:	3fd17460 	.word	0x3fd17460
 80285f8:	518f264d 	.word	0x518f264d
 80285fc:	3fd55555 	.word	0x3fd55555
 8028600:	db6fabff 	.word	0xdb6fabff
 8028604:	3fdb6db6 	.word	0x3fdb6db6
 8028608:	33333303 	.word	0x33333303
 802860c:	3fe33333 	.word	0x3fe33333
 8028610:	dc3a03fd 	.word	0xdc3a03fd
 8028614:	3feec709 	.word	0x3feec709
 8028618:	145b01f5 	.word	0x145b01f5
 802861c:	be3e2fe0 	.word	0xbe3e2fe0
 8028620:	e0000000 	.word	0xe0000000
 8028624:	3feec709 	.word	0x3feec709
 8028628:	652b82fe 	.word	0x652b82fe
 802862c:	3c971547 	.word	0x3c971547
 8028630:	fefa39ef 	.word	0xfefa39ef
 8028634:	3fe62e42 	.word	0x3fe62e42
 8028638:	0ca86c39 	.word	0x0ca86c39
 802863c:	be205c61 	.word	0xbe205c61
 8028640:	00000000 	.word	0x00000000
 8028644:	3fe62e43 	.word	0x3fe62e43
 8028648:	72bea4d0 	.word	0x72bea4d0
 802864c:	3e663769 	.word	0x3e663769
 8028650:	c5d26bf1 	.word	0xc5d26bf1
 8028654:	bebbbd41 	.word	0xbebbbd41
 8028658:	af25de2c 	.word	0xaf25de2c
 802865c:	3f11566a 	.word	0x3f11566a
 8028660:	16bebd93 	.word	0x16bebd93
 8028664:	bf66c16c 	.word	0xbf66c16c
 8028668:	5555553e 	.word	0x5555553e
 802866c:	3fc55555 	.word	0x3fc55555
 8028670:	c2f8f359 	.word	0xc2f8f359
 8028674:	01a56e1f 	.word	0x01a56e1f
 8028678:	0003988e 	.word	0x0003988e
 802867c:	000bb679 	.word	0x000bb679
 8028680:	08145ee8 	.word	0x08145ee8
 8028684:	08145f08 	.word	0x08145f08
 8028688:	08145ef8 	.word	0x08145ef8
 802868c:	3fe00000 	.word	0x3fe00000
 8028690:	000fffff 	.word	0x000fffff
 8028694:	4090cbff 	.word	0x4090cbff
 8028698:	3f6f3400 	.word	0x3f6f3400

0802869c <__ieee754_sqrt>:
 802869c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80286a0:	4770      	bx	lr
	...

080286a4 <__ieee754_fmodf>:
 80286a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80286a6:	ee10 6a90 	vmov	r6, s1
 80286aa:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 80286ae:	ee10 3a10 	vmov	r3, s0
 80286b2:	d009      	beq.n	80286c8 <__ieee754_fmodf+0x24>
 80286b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80286b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80286bc:	ee10 7a10 	vmov	r7, s0
 80286c0:	da02      	bge.n	80286c8 <__ieee754_fmodf+0x24>
 80286c2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80286c6:	dd0a      	ble.n	80286de <__ieee754_fmodf+0x3a>
 80286c8:	ee07 3a90 	vmov	s15, r3
 80286cc:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80286d0:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 80286d4:	ee17 3a90 	vmov	r3, s15
 80286d8:	ee00 3a10 	vmov	s0, r3
 80286dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80286de:	42a9      	cmp	r1, r5
 80286e0:	dbfa      	blt.n	80286d8 <__ieee754_fmodf+0x34>
 80286e2:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 80286e6:	d105      	bne.n	80286f4 <__ieee754_fmodf+0x50>
 80286e8:	4a30      	ldr	r2, [pc, #192]	; (80287ac <__ieee754_fmodf+0x108>)
 80286ea:	0fe3      	lsrs	r3, r4, #31
 80286ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80286f0:	681b      	ldr	r3, [r3, #0]
 80286f2:	e7f1      	b.n	80286d8 <__ieee754_fmodf+0x34>
 80286f4:	4b2e      	ldr	r3, [pc, #184]	; (80287b0 <__ieee754_fmodf+0x10c>)
 80286f6:	4299      	cmp	r1, r3
 80286f8:	dc3e      	bgt.n	8028778 <__ieee754_fmodf+0xd4>
 80286fa:	020a      	lsls	r2, r1, #8
 80286fc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8028700:	2a00      	cmp	r2, #0
 8028702:	dc36      	bgt.n	8028772 <__ieee754_fmodf+0xce>
 8028704:	429d      	cmp	r5, r3
 8028706:	dc3a      	bgt.n	802877e <__ieee754_fmodf+0xda>
 8028708:	022b      	lsls	r3, r5, #8
 802870a:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 802870e:	005b      	lsls	r3, r3, #1
 8028710:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8028714:	d5fb      	bpl.n	802870e <__ieee754_fmodf+0x6a>
 8028716:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 802871a:	bfbb      	ittet	lt
 802871c:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8028720:	1a1b      	sublt	r3, r3, r0
 8028722:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8028726:	4099      	lsllt	r1, r3
 8028728:	bfa8      	it	ge
 802872a:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 802872e:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8028732:	bfb5      	itete	lt
 8028734:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8028738:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 802873c:	1a9b      	sublt	r3, r3, r2
 802873e:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8028742:	bfb8      	it	lt
 8028744:	409d      	lsllt	r5, r3
 8028746:	1a80      	subs	r0, r0, r2
 8028748:	1b4b      	subs	r3, r1, r5
 802874a:	b9d8      	cbnz	r0, 8028784 <__ieee754_fmodf+0xe0>
 802874c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8028750:	bf28      	it	cs
 8028752:	460b      	movcs	r3, r1
 8028754:	2b00      	cmp	r3, #0
 8028756:	d0c7      	beq.n	80286e8 <__ieee754_fmodf+0x44>
 8028758:	4915      	ldr	r1, [pc, #84]	; (80287b0 <__ieee754_fmodf+0x10c>)
 802875a:	428b      	cmp	r3, r1
 802875c:	dd1a      	ble.n	8028794 <__ieee754_fmodf+0xf0>
 802875e:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8028762:	db1a      	blt.n	802879a <__ieee754_fmodf+0xf6>
 8028764:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8028768:	4323      	orrs	r3, r4
 802876a:	327f      	adds	r2, #127	; 0x7f
 802876c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8028770:	e7b2      	b.n	80286d8 <__ieee754_fmodf+0x34>
 8028772:	3801      	subs	r0, #1
 8028774:	0052      	lsls	r2, r2, #1
 8028776:	e7c3      	b.n	8028700 <__ieee754_fmodf+0x5c>
 8028778:	15c8      	asrs	r0, r1, #23
 802877a:	387f      	subs	r0, #127	; 0x7f
 802877c:	e7c2      	b.n	8028704 <__ieee754_fmodf+0x60>
 802877e:	15ea      	asrs	r2, r5, #23
 8028780:	3a7f      	subs	r2, #127	; 0x7f
 8028782:	e7c8      	b.n	8028716 <__ieee754_fmodf+0x72>
 8028784:	2b00      	cmp	r3, #0
 8028786:	da02      	bge.n	802878e <__ieee754_fmodf+0xea>
 8028788:	0049      	lsls	r1, r1, #1
 802878a:	3801      	subs	r0, #1
 802878c:	e7dc      	b.n	8028748 <__ieee754_fmodf+0xa4>
 802878e:	d0ab      	beq.n	80286e8 <__ieee754_fmodf+0x44>
 8028790:	0059      	lsls	r1, r3, #1
 8028792:	e7fa      	b.n	802878a <__ieee754_fmodf+0xe6>
 8028794:	005b      	lsls	r3, r3, #1
 8028796:	3a01      	subs	r2, #1
 8028798:	e7df      	b.n	802875a <__ieee754_fmodf+0xb6>
 802879a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802879e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80287a2:	3282      	adds	r2, #130	; 0x82
 80287a4:	4113      	asrs	r3, r2
 80287a6:	4323      	orrs	r3, r4
 80287a8:	e796      	b.n	80286d8 <__ieee754_fmodf+0x34>
 80287aa:	bf00      	nop
 80287ac:	08145f18 	.word	0x08145f18
 80287b0:	007fffff 	.word	0x007fffff

080287b4 <__ieee754_log10f>:
 80287b4:	b508      	push	{r3, lr}
 80287b6:	ee10 2a10 	vmov	r2, s0
 80287ba:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80287be:	ed2d 8b02 	vpush	{d8}
 80287c2:	d108      	bne.n	80287d6 <__ieee754_log10f+0x22>
 80287c4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8028848 <__ieee754_log10f+0x94>
 80287c8:	eddf 7a20 	vldr	s15, [pc, #128]	; 802884c <__ieee754_log10f+0x98>
 80287cc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80287d0:	ecbd 8b02 	vpop	{d8}
 80287d4:	bd08      	pop	{r3, pc}
 80287d6:	2a00      	cmp	r2, #0
 80287d8:	da02      	bge.n	80287e0 <__ieee754_log10f+0x2c>
 80287da:	ee30 7a40 	vsub.f32	s14, s0, s0
 80287de:	e7f3      	b.n	80287c8 <__ieee754_log10f+0x14>
 80287e0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80287e4:	db02      	blt.n	80287ec <__ieee754_log10f+0x38>
 80287e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80287ea:	e7f1      	b.n	80287d0 <__ieee754_log10f+0x1c>
 80287ec:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80287f0:	bfbf      	itttt	lt
 80287f2:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 8028850 <__ieee754_log10f+0x9c>
 80287f6:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80287fa:	f06f 0118 	mvnlt.w	r1, #24
 80287fe:	ee17 2a90 	vmovlt	r2, s15
 8028802:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8028806:	bfa8      	it	ge
 8028808:	2100      	movge	r1, #0
 802880a:	3b7f      	subs	r3, #127	; 0x7f
 802880c:	440b      	add	r3, r1
 802880e:	0fd9      	lsrs	r1, r3, #31
 8028810:	440b      	add	r3, r1
 8028812:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8028816:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 802881a:	ee07 3a90 	vmov	s15, r3
 802881e:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8028822:	ee00 3a10 	vmov	s0, r3
 8028826:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 802882a:	f7fe fd2d 	bl	8027288 <logf>
 802882e:	eddf 7a09 	vldr	s15, [pc, #36]	; 8028854 <__ieee754_log10f+0xa0>
 8028832:	ee20 0a27 	vmul.f32	s0, s0, s15
 8028836:	eddf 7a08 	vldr	s15, [pc, #32]	; 8028858 <__ieee754_log10f+0xa4>
 802883a:	eea8 0a27 	vfma.f32	s0, s16, s15
 802883e:	eddf 7a07 	vldr	s15, [pc, #28]	; 802885c <__ieee754_log10f+0xa8>
 8028842:	eea8 0a27 	vfma.f32	s0, s16, s15
 8028846:	e7c3      	b.n	80287d0 <__ieee754_log10f+0x1c>
 8028848:	cc000000 	.word	0xcc000000
 802884c:	00000000 	.word	0x00000000
 8028850:	4c000000 	.word	0x4c000000
 8028854:	3ede5bd9 	.word	0x3ede5bd9
 8028858:	355427db 	.word	0x355427db
 802885c:	3e9a2080 	.word	0x3e9a2080

08028860 <__ieee754_rem_pio2f>:
 8028860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028862:	ee10 6a10 	vmov	r6, s0
 8028866:	4b86      	ldr	r3, [pc, #536]	; (8028a80 <__ieee754_rem_pio2f+0x220>)
 8028868:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 802886c:	429c      	cmp	r4, r3
 802886e:	b087      	sub	sp, #28
 8028870:	4605      	mov	r5, r0
 8028872:	dc05      	bgt.n	8028880 <__ieee754_rem_pio2f+0x20>
 8028874:	2300      	movs	r3, #0
 8028876:	ed85 0a00 	vstr	s0, [r5]
 802887a:	6043      	str	r3, [r0, #4]
 802887c:	2000      	movs	r0, #0
 802887e:	e020      	b.n	80288c2 <__ieee754_rem_pio2f+0x62>
 8028880:	4b80      	ldr	r3, [pc, #512]	; (8028a84 <__ieee754_rem_pio2f+0x224>)
 8028882:	429c      	cmp	r4, r3
 8028884:	dc38      	bgt.n	80288f8 <__ieee754_rem_pio2f+0x98>
 8028886:	2e00      	cmp	r6, #0
 8028888:	f024 040f 	bic.w	r4, r4, #15
 802888c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8028a88 <__ieee754_rem_pio2f+0x228>
 8028890:	4b7e      	ldr	r3, [pc, #504]	; (8028a8c <__ieee754_rem_pio2f+0x22c>)
 8028892:	dd18      	ble.n	80288c6 <__ieee754_rem_pio2f+0x66>
 8028894:	429c      	cmp	r4, r3
 8028896:	ee70 7a47 	vsub.f32	s15, s0, s14
 802889a:	bf09      	itett	eq
 802889c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8028a90 <__ieee754_rem_pio2f+0x230>
 80288a0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8028a94 <__ieee754_rem_pio2f+0x234>
 80288a4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80288a8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8028a98 <__ieee754_rem_pio2f+0x238>
 80288ac:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80288b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80288b4:	edc0 6a00 	vstr	s13, [r0]
 80288b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80288bc:	edc0 7a01 	vstr	s15, [r0, #4]
 80288c0:	2001      	movs	r0, #1
 80288c2:	b007      	add	sp, #28
 80288c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80288c6:	429c      	cmp	r4, r3
 80288c8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80288cc:	bf09      	itett	eq
 80288ce:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8028a90 <__ieee754_rem_pio2f+0x230>
 80288d2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8028a94 <__ieee754_rem_pio2f+0x234>
 80288d6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80288da:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8028a98 <__ieee754_rem_pio2f+0x238>
 80288de:	ee77 6a87 	vadd.f32	s13, s15, s14
 80288e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80288e6:	edc0 6a00 	vstr	s13, [r0]
 80288ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80288ee:	edc0 7a01 	vstr	s15, [r0, #4]
 80288f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80288f6:	e7e4      	b.n	80288c2 <__ieee754_rem_pio2f+0x62>
 80288f8:	4b68      	ldr	r3, [pc, #416]	; (8028a9c <__ieee754_rem_pio2f+0x23c>)
 80288fa:	429c      	cmp	r4, r3
 80288fc:	dc71      	bgt.n	80289e2 <__ieee754_rem_pio2f+0x182>
 80288fe:	f7fe fcbb 	bl	8027278 <fabsf>
 8028902:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8028aa0 <__ieee754_rem_pio2f+0x240>
 8028906:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802890a:	eee0 7a07 	vfma.f32	s15, s0, s14
 802890e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028912:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8028916:	ee17 0a90 	vmov	r0, s15
 802891a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8028a88 <__ieee754_rem_pio2f+0x228>
 802891e:	eeb1 7a46 	vneg.f32	s14, s12
 8028922:	eea7 0a27 	vfma.f32	s0, s14, s15
 8028926:	281f      	cmp	r0, #31
 8028928:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8028a94 <__ieee754_rem_pio2f+0x234>
 802892c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8028930:	ee70 6a67 	vsub.f32	s13, s0, s15
 8028934:	ee16 3a90 	vmov	r3, s13
 8028938:	dc1c      	bgt.n	8028974 <__ieee754_rem_pio2f+0x114>
 802893a:	1e47      	subs	r7, r0, #1
 802893c:	4959      	ldr	r1, [pc, #356]	; (8028aa4 <__ieee754_rem_pio2f+0x244>)
 802893e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8028942:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8028946:	428a      	cmp	r2, r1
 8028948:	d014      	beq.n	8028974 <__ieee754_rem_pio2f+0x114>
 802894a:	602b      	str	r3, [r5, #0]
 802894c:	ed95 7a00 	vldr	s14, [r5]
 8028950:	ee30 0a47 	vsub.f32	s0, s0, s14
 8028954:	2e00      	cmp	r6, #0
 8028956:	ee30 0a67 	vsub.f32	s0, s0, s15
 802895a:	ed85 0a01 	vstr	s0, [r5, #4]
 802895e:	dab0      	bge.n	80288c2 <__ieee754_rem_pio2f+0x62>
 8028960:	eeb1 7a47 	vneg.f32	s14, s14
 8028964:	eeb1 0a40 	vneg.f32	s0, s0
 8028968:	ed85 7a00 	vstr	s14, [r5]
 802896c:	ed85 0a01 	vstr	s0, [r5, #4]
 8028970:	4240      	negs	r0, r0
 8028972:	e7a6      	b.n	80288c2 <__ieee754_rem_pio2f+0x62>
 8028974:	15e4      	asrs	r4, r4, #23
 8028976:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802897a:	1aa2      	subs	r2, r4, r2
 802897c:	2a08      	cmp	r2, #8
 802897e:	dde4      	ble.n	802894a <__ieee754_rem_pio2f+0xea>
 8028980:	eddf 7a43 	vldr	s15, [pc, #268]	; 8028a90 <__ieee754_rem_pio2f+0x230>
 8028984:	eef0 6a40 	vmov.f32	s13, s0
 8028988:	eee7 6a27 	vfma.f32	s13, s14, s15
 802898c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8028990:	eea7 0a27 	vfma.f32	s0, s14, s15
 8028994:	eddf 7a40 	vldr	s15, [pc, #256]	; 8028a98 <__ieee754_rem_pio2f+0x238>
 8028998:	ee96 0a27 	vfnms.f32	s0, s12, s15
 802899c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80289a0:	eef0 7a40 	vmov.f32	s15, s0
 80289a4:	ee15 3a90 	vmov	r3, s11
 80289a8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80289ac:	1aa4      	subs	r4, r4, r2
 80289ae:	2c19      	cmp	r4, #25
 80289b0:	dc04      	bgt.n	80289bc <__ieee754_rem_pio2f+0x15c>
 80289b2:	edc5 5a00 	vstr	s11, [r5]
 80289b6:	eeb0 0a66 	vmov.f32	s0, s13
 80289ba:	e7c7      	b.n	802894c <__ieee754_rem_pio2f+0xec>
 80289bc:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8028aa8 <__ieee754_rem_pio2f+0x248>
 80289c0:	eeb0 0a66 	vmov.f32	s0, s13
 80289c4:	eea7 0a25 	vfma.f32	s0, s14, s11
 80289c8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80289cc:	eee7 7a25 	vfma.f32	s15, s14, s11
 80289d0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8028aac <__ieee754_rem_pio2f+0x24c>
 80289d4:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80289d8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80289dc:	ed85 7a00 	vstr	s14, [r5]
 80289e0:	e7b4      	b.n	802894c <__ieee754_rem_pio2f+0xec>
 80289e2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80289e6:	db06      	blt.n	80289f6 <__ieee754_rem_pio2f+0x196>
 80289e8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80289ec:	edc0 7a01 	vstr	s15, [r0, #4]
 80289f0:	edc0 7a00 	vstr	s15, [r0]
 80289f4:	e742      	b.n	802887c <__ieee754_rem_pio2f+0x1c>
 80289f6:	15e2      	asrs	r2, r4, #23
 80289f8:	3a86      	subs	r2, #134	; 0x86
 80289fa:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80289fe:	ee07 3a90 	vmov	s15, r3
 8028a02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8028a06:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8028ab0 <__ieee754_rem_pio2f+0x250>
 8028a0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8028a0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028a12:	ed8d 7a03 	vstr	s14, [sp, #12]
 8028a16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8028a1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8028a1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8028a22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028a26:	ed8d 7a04 	vstr	s14, [sp, #16]
 8028a2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8028a2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8028a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028a36:	edcd 7a05 	vstr	s15, [sp, #20]
 8028a3a:	d11e      	bne.n	8028a7a <__ieee754_rem_pio2f+0x21a>
 8028a3c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8028a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028a44:	bf0c      	ite	eq
 8028a46:	2301      	moveq	r3, #1
 8028a48:	2302      	movne	r3, #2
 8028a4a:	491a      	ldr	r1, [pc, #104]	; (8028ab4 <__ieee754_rem_pio2f+0x254>)
 8028a4c:	9101      	str	r1, [sp, #4]
 8028a4e:	2102      	movs	r1, #2
 8028a50:	9100      	str	r1, [sp, #0]
 8028a52:	a803      	add	r0, sp, #12
 8028a54:	4629      	mov	r1, r5
 8028a56:	f000 f8fb 	bl	8028c50 <__kernel_rem_pio2f>
 8028a5a:	2e00      	cmp	r6, #0
 8028a5c:	f6bf af31 	bge.w	80288c2 <__ieee754_rem_pio2f+0x62>
 8028a60:	edd5 7a00 	vldr	s15, [r5]
 8028a64:	eef1 7a67 	vneg.f32	s15, s15
 8028a68:	edc5 7a00 	vstr	s15, [r5]
 8028a6c:	edd5 7a01 	vldr	s15, [r5, #4]
 8028a70:	eef1 7a67 	vneg.f32	s15, s15
 8028a74:	edc5 7a01 	vstr	s15, [r5, #4]
 8028a78:	e77a      	b.n	8028970 <__ieee754_rem_pio2f+0x110>
 8028a7a:	2303      	movs	r3, #3
 8028a7c:	e7e5      	b.n	8028a4a <__ieee754_rem_pio2f+0x1ea>
 8028a7e:	bf00      	nop
 8028a80:	3f490fd8 	.word	0x3f490fd8
 8028a84:	4016cbe3 	.word	0x4016cbe3
 8028a88:	3fc90f80 	.word	0x3fc90f80
 8028a8c:	3fc90fd0 	.word	0x3fc90fd0
 8028a90:	37354400 	.word	0x37354400
 8028a94:	37354443 	.word	0x37354443
 8028a98:	2e85a308 	.word	0x2e85a308
 8028a9c:	43490f80 	.word	0x43490f80
 8028aa0:	3f22f984 	.word	0x3f22f984
 8028aa4:	08145f20 	.word	0x08145f20
 8028aa8:	2e85a300 	.word	0x2e85a300
 8028aac:	248d3132 	.word	0x248d3132
 8028ab0:	43800000 	.word	0x43800000
 8028ab4:	08145fa0 	.word	0x08145fa0

08028ab8 <__ieee754_sinhf>:
 8028ab8:	b510      	push	{r4, lr}
 8028aba:	ee10 3a10 	vmov	r3, s0
 8028abe:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8028ac2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8028ac6:	ed2d 8b02 	vpush	{d8}
 8028aca:	eef0 7a40 	vmov.f32	s15, s0
 8028ace:	db06      	blt.n	8028ade <__ieee754_sinhf+0x26>
 8028ad0:	ee70 7a00 	vadd.f32	s15, s0, s0
 8028ad4:	ecbd 8b02 	vpop	{d8}
 8028ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8028adc:	bd10      	pop	{r4, pc}
 8028ade:	2b00      	cmp	r3, #0
 8028ae0:	4b28      	ldr	r3, [pc, #160]	; (8028b84 <__ieee754_sinhf+0xcc>)
 8028ae2:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8028ae6:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8028aea:	fe28 8a88 	vselge.f32	s16, s17, s16
 8028aee:	429c      	cmp	r4, r3
 8028af0:	dc2a      	bgt.n	8028b48 <__ieee754_sinhf+0x90>
 8028af2:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 8028af6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8028afa:	da08      	bge.n	8028b0e <__ieee754_sinhf+0x56>
 8028afc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8028b88 <__ieee754_sinhf+0xd0>
 8028b00:	ee30 7a07 	vadd.f32	s14, s0, s14
 8028b04:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8028b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028b0c:	dce2      	bgt.n	8028ad4 <__ieee754_sinhf+0x1c>
 8028b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8028b12:	f7fe fbb1 	bl	8027278 <fabsf>
 8028b16:	f000 fdb9 	bl	802968c <expm1f>
 8028b1a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8028b1e:	bfbb      	ittet	lt
 8028b20:	ee20 7a00 	vmullt.f32	s14, s0, s0
 8028b24:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 8028b28:	ee70 8a28 	vaddge.f32	s17, s0, s17
 8028b2c:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 8028b30:	bfad      	iteet	ge
 8028b32:	eec0 7a28 	vdivge.f32	s15, s0, s17
 8028b36:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 8028b3a:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 8028b3e:	ee77 7a80 	vaddge.f32	s15, s15, s0
 8028b42:	ee67 7a88 	vmul.f32	s15, s15, s16
 8028b46:	e7c5      	b.n	8028ad4 <__ieee754_sinhf+0x1c>
 8028b48:	4b10      	ldr	r3, [pc, #64]	; (8028b8c <__ieee754_sinhf+0xd4>)
 8028b4a:	429c      	cmp	r4, r3
 8028b4c:	dc06      	bgt.n	8028b5c <__ieee754_sinhf+0xa4>
 8028b4e:	f7fe fb93 	bl	8027278 <fabsf>
 8028b52:	f7fe fb13 	bl	802717c <expf>
 8028b56:	ee60 7a08 	vmul.f32	s15, s0, s16
 8028b5a:	e7bb      	b.n	8028ad4 <__ieee754_sinhf+0x1c>
 8028b5c:	4b0c      	ldr	r3, [pc, #48]	; (8028b90 <__ieee754_sinhf+0xd8>)
 8028b5e:	429c      	cmp	r4, r3
 8028b60:	dc0a      	bgt.n	8028b78 <__ieee754_sinhf+0xc0>
 8028b62:	f7fe fb89 	bl	8027278 <fabsf>
 8028b66:	ee20 0a28 	vmul.f32	s0, s0, s17
 8028b6a:	f7fe fb07 	bl	802717c <expf>
 8028b6e:	ee68 7a00 	vmul.f32	s15, s16, s0
 8028b72:	ee67 7a80 	vmul.f32	s15, s15, s0
 8028b76:	e7ad      	b.n	8028ad4 <__ieee754_sinhf+0x1c>
 8028b78:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8028b88 <__ieee754_sinhf+0xd0>
 8028b7c:	ee60 7a07 	vmul.f32	s15, s0, s14
 8028b80:	e7a8      	b.n	8028ad4 <__ieee754_sinhf+0x1c>
 8028b82:	bf00      	nop
 8028b84:	41afffff 	.word	0x41afffff
 8028b88:	7cf0bdc2 	.word	0x7cf0bdc2
 8028b8c:	42b17217 	.word	0x42b17217
 8028b90:	42b2d4fc 	.word	0x42b2d4fc

08028b94 <__kernel_cosf>:
 8028b94:	ee10 3a10 	vmov	r3, s0
 8028b98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8028b9c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8028ba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8028ba4:	da05      	bge.n	8028bb2 <__kernel_cosf+0x1e>
 8028ba6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8028baa:	ee17 2a90 	vmov	r2, s15
 8028bae:	2a00      	cmp	r2, #0
 8028bb0:	d03b      	beq.n	8028c2a <__kernel_cosf+0x96>
 8028bb2:	ee20 6a00 	vmul.f32	s12, s0, s0
 8028bb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8028bba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8028c30 <__kernel_cosf+0x9c>
 8028bbe:	4a1d      	ldr	r2, [pc, #116]	; (8028c34 <__kernel_cosf+0xa0>)
 8028bc0:	ee66 7a07 	vmul.f32	s15, s12, s14
 8028bc4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8028c38 <__kernel_cosf+0xa4>
 8028bc8:	eea6 7a25 	vfma.f32	s14, s12, s11
 8028bcc:	4293      	cmp	r3, r2
 8028bce:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8028c3c <__kernel_cosf+0xa8>
 8028bd2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8028bd6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8028c40 <__kernel_cosf+0xac>
 8028bda:	eea5 7a86 	vfma.f32	s14, s11, s12
 8028bde:	eddf 5a19 	vldr	s11, [pc, #100]	; 8028c44 <__kernel_cosf+0xb0>
 8028be2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8028be6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8028c48 <__kernel_cosf+0xb4>
 8028bea:	eea5 7a86 	vfma.f32	s14, s11, s12
 8028bee:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8028bf2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8028bf6:	eee6 0a07 	vfma.f32	s1, s12, s14
 8028bfa:	dc04      	bgt.n	8028c06 <__kernel_cosf+0x72>
 8028bfc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8028c00:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8028c04:	4770      	bx	lr
 8028c06:	4a11      	ldr	r2, [pc, #68]	; (8028c4c <__kernel_cosf+0xb8>)
 8028c08:	4293      	cmp	r3, r2
 8028c0a:	bfda      	itte	le
 8028c0c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8028c10:	ee07 3a10 	vmovle	s14, r3
 8028c14:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8028c18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028c1c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8028c20:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8028c24:	ee30 0a67 	vsub.f32	s0, s0, s15
 8028c28:	4770      	bx	lr
 8028c2a:	eeb0 0a66 	vmov.f32	s0, s13
 8028c2e:	4770      	bx	lr
 8028c30:	ad47d74e 	.word	0xad47d74e
 8028c34:	3e999999 	.word	0x3e999999
 8028c38:	310f74f6 	.word	0x310f74f6
 8028c3c:	b493f27c 	.word	0xb493f27c
 8028c40:	37d00d01 	.word	0x37d00d01
 8028c44:	bab60b61 	.word	0xbab60b61
 8028c48:	3d2aaaab 	.word	0x3d2aaaab
 8028c4c:	3f480000 	.word	0x3f480000

08028c50 <__kernel_rem_pio2f>:
 8028c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c54:	ed2d 8b04 	vpush	{d8-d9}
 8028c58:	b0d7      	sub	sp, #348	; 0x15c
 8028c5a:	469b      	mov	fp, r3
 8028c5c:	460e      	mov	r6, r1
 8028c5e:	4bbe      	ldr	r3, [pc, #760]	; (8028f58 <__kernel_rem_pio2f+0x308>)
 8028c60:	9964      	ldr	r1, [sp, #400]	; 0x190
 8028c62:	9002      	str	r0, [sp, #8]
 8028c64:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8028c68:	9865      	ldr	r0, [sp, #404]	; 0x194
 8028c6a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8028f68 <__kernel_rem_pio2f+0x318>
 8028c6e:	1ed1      	subs	r1, r2, #3
 8028c70:	2308      	movs	r3, #8
 8028c72:	fb91 f1f3 	sdiv	r1, r1, r3
 8028c76:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8028c7a:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8028c7e:	1c4c      	adds	r4, r1, #1
 8028c80:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8028c84:	eba1 050a 	sub.w	r5, r1, sl
 8028c88:	aa1a      	add	r2, sp, #104	; 0x68
 8028c8a:	eb09 070a 	add.w	r7, r9, sl
 8028c8e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8028c92:	4696      	mov	lr, r2
 8028c94:	2300      	movs	r3, #0
 8028c96:	42bb      	cmp	r3, r7
 8028c98:	dd0f      	ble.n	8028cba <__kernel_rem_pio2f+0x6a>
 8028c9a:	af42      	add	r7, sp, #264	; 0x108
 8028c9c:	2200      	movs	r2, #0
 8028c9e:	454a      	cmp	r2, r9
 8028ca0:	dc27      	bgt.n	8028cf2 <__kernel_rem_pio2f+0xa2>
 8028ca2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8028ca6:	eb0b 0302 	add.w	r3, fp, r2
 8028caa:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8028cae:	9d02      	ldr	r5, [sp, #8]
 8028cb0:	eddf 7aad 	vldr	s15, [pc, #692]	; 8028f68 <__kernel_rem_pio2f+0x318>
 8028cb4:	f04f 0c00 	mov.w	ip, #0
 8028cb8:	e015      	b.n	8028ce6 <__kernel_rem_pio2f+0x96>
 8028cba:	42dd      	cmn	r5, r3
 8028cbc:	bf5d      	ittte	pl
 8028cbe:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8028cc2:	ee07 2a90 	vmovpl	s15, r2
 8028cc6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8028cca:	eef0 7a47 	vmovmi.f32	s15, s14
 8028cce:	ecee 7a01 	vstmia	lr!, {s15}
 8028cd2:	3301      	adds	r3, #1
 8028cd4:	e7df      	b.n	8028c96 <__kernel_rem_pio2f+0x46>
 8028cd6:	ecf5 6a01 	vldmia	r5!, {s13}
 8028cda:	ed33 7a01 	vldmdb	r3!, {s14}
 8028cde:	eee6 7a87 	vfma.f32	s15, s13, s14
 8028ce2:	f10c 0c01 	add.w	ip, ip, #1
 8028ce6:	45d4      	cmp	ip, sl
 8028ce8:	ddf5      	ble.n	8028cd6 <__kernel_rem_pio2f+0x86>
 8028cea:	ece7 7a01 	vstmia	r7!, {s15}
 8028cee:	3201      	adds	r2, #1
 8028cf0:	e7d5      	b.n	8028c9e <__kernel_rem_pio2f+0x4e>
 8028cf2:	ab06      	add	r3, sp, #24
 8028cf4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8028cf8:	9304      	str	r3, [sp, #16]
 8028cfa:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8028f64 <__kernel_rem_pio2f+0x314>
 8028cfe:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8028f60 <__kernel_rem_pio2f+0x310>
 8028d02:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8028d06:	9303      	str	r3, [sp, #12]
 8028d08:	464d      	mov	r5, r9
 8028d0a:	ab56      	add	r3, sp, #344	; 0x158
 8028d0c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8028d10:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8028d14:	3f01      	subs	r7, #1
 8028d16:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8028d1a:	00bf      	lsls	r7, r7, #2
 8028d1c:	ab56      	add	r3, sp, #344	; 0x158
 8028d1e:	19da      	adds	r2, r3, r7
 8028d20:	3a4c      	subs	r2, #76	; 0x4c
 8028d22:	2300      	movs	r3, #0
 8028d24:	1ae9      	subs	r1, r5, r3
 8028d26:	2900      	cmp	r1, #0
 8028d28:	dc4c      	bgt.n	8028dc4 <__kernel_rem_pio2f+0x174>
 8028d2a:	4620      	mov	r0, r4
 8028d2c:	f000 fe24 	bl	8029978 <scalbnf>
 8028d30:	eeb0 8a40 	vmov.f32	s16, s0
 8028d34:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8028d38:	ee28 0a00 	vmul.f32	s0, s16, s0
 8028d3c:	f000 fdda 	bl	80298f4 <floorf>
 8028d40:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8028d44:	eea0 8a67 	vfms.f32	s16, s0, s15
 8028d48:	2c00      	cmp	r4, #0
 8028d4a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8028d4e:	edcd 7a01 	vstr	s15, [sp, #4]
 8028d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028d56:	ee38 8a67 	vsub.f32	s16, s16, s15
 8028d5a:	dd48      	ble.n	8028dee <__kernel_rem_pio2f+0x19e>
 8028d5c:	1e69      	subs	r1, r5, #1
 8028d5e:	ab06      	add	r3, sp, #24
 8028d60:	f1c4 0008 	rsb	r0, r4, #8
 8028d64:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8028d68:	9a01      	ldr	r2, [sp, #4]
 8028d6a:	fa4c f300 	asr.w	r3, ip, r0
 8028d6e:	441a      	add	r2, r3
 8028d70:	4083      	lsls	r3, r0
 8028d72:	9201      	str	r2, [sp, #4]
 8028d74:	ebac 0203 	sub.w	r2, ip, r3
 8028d78:	ab06      	add	r3, sp, #24
 8028d7a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8028d7e:	f1c4 0307 	rsb	r3, r4, #7
 8028d82:	fa42 f803 	asr.w	r8, r2, r3
 8028d86:	f1b8 0f00 	cmp.w	r8, #0
 8028d8a:	dd41      	ble.n	8028e10 <__kernel_rem_pio2f+0x1c0>
 8028d8c:	9b01      	ldr	r3, [sp, #4]
 8028d8e:	2000      	movs	r0, #0
 8028d90:	3301      	adds	r3, #1
 8028d92:	9301      	str	r3, [sp, #4]
 8028d94:	4601      	mov	r1, r0
 8028d96:	4285      	cmp	r5, r0
 8028d98:	dc6d      	bgt.n	8028e76 <__kernel_rem_pio2f+0x226>
 8028d9a:	2c00      	cmp	r4, #0
 8028d9c:	dd04      	ble.n	8028da8 <__kernel_rem_pio2f+0x158>
 8028d9e:	2c01      	cmp	r4, #1
 8028da0:	d07e      	beq.n	8028ea0 <__kernel_rem_pio2f+0x250>
 8028da2:	2c02      	cmp	r4, #2
 8028da4:	f000 8086 	beq.w	8028eb4 <__kernel_rem_pio2f+0x264>
 8028da8:	f1b8 0f02 	cmp.w	r8, #2
 8028dac:	d130      	bne.n	8028e10 <__kernel_rem_pio2f+0x1c0>
 8028dae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8028db2:	ee30 8a48 	vsub.f32	s16, s0, s16
 8028db6:	b359      	cbz	r1, 8028e10 <__kernel_rem_pio2f+0x1c0>
 8028db8:	4620      	mov	r0, r4
 8028dba:	f000 fddd 	bl	8029978 <scalbnf>
 8028dbe:	ee38 8a40 	vsub.f32	s16, s16, s0
 8028dc2:	e025      	b.n	8028e10 <__kernel_rem_pio2f+0x1c0>
 8028dc4:	ee60 7a28 	vmul.f32	s15, s0, s17
 8028dc8:	a806      	add	r0, sp, #24
 8028dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028dd2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8028dd6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028dda:	ee10 1a10 	vmov	r1, s0
 8028dde:	ed32 0a01 	vldmdb	r2!, {s0}
 8028de2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8028de6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8028dea:	3301      	adds	r3, #1
 8028dec:	e79a      	b.n	8028d24 <__kernel_rem_pio2f+0xd4>
 8028dee:	d106      	bne.n	8028dfe <__kernel_rem_pio2f+0x1ae>
 8028df0:	1e6b      	subs	r3, r5, #1
 8028df2:	aa06      	add	r2, sp, #24
 8028df4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8028df8:	ea4f 2822 	mov.w	r8, r2, asr #8
 8028dfc:	e7c3      	b.n	8028d86 <__kernel_rem_pio2f+0x136>
 8028dfe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8028e02:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8028e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e0a:	da31      	bge.n	8028e70 <__kernel_rem_pio2f+0x220>
 8028e0c:	f04f 0800 	mov.w	r8, #0
 8028e10:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8028e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e18:	f040 80a8 	bne.w	8028f6c <__kernel_rem_pio2f+0x31c>
 8028e1c:	1e6b      	subs	r3, r5, #1
 8028e1e:	4618      	mov	r0, r3
 8028e20:	2200      	movs	r2, #0
 8028e22:	4548      	cmp	r0, r9
 8028e24:	da4d      	bge.n	8028ec2 <__kernel_rem_pio2f+0x272>
 8028e26:	2a00      	cmp	r2, #0
 8028e28:	f000 8087 	beq.w	8028f3a <__kernel_rem_pio2f+0x2ea>
 8028e2c:	aa06      	add	r2, sp, #24
 8028e2e:	3c08      	subs	r4, #8
 8028e30:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8028e34:	2900      	cmp	r1, #0
 8028e36:	f000 808d 	beq.w	8028f54 <__kernel_rem_pio2f+0x304>
 8028e3a:	4620      	mov	r0, r4
 8028e3c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8028e40:	9302      	str	r3, [sp, #8]
 8028e42:	f000 fd99 	bl	8029978 <scalbnf>
 8028e46:	9b02      	ldr	r3, [sp, #8]
 8028e48:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8028f64 <__kernel_rem_pio2f+0x314>
 8028e4c:	0099      	lsls	r1, r3, #2
 8028e4e:	aa42      	add	r2, sp, #264	; 0x108
 8028e50:	1850      	adds	r0, r2, r1
 8028e52:	1d05      	adds	r5, r0, #4
 8028e54:	461c      	mov	r4, r3
 8028e56:	2c00      	cmp	r4, #0
 8028e58:	f280 80b8 	bge.w	8028fcc <__kernel_rem_pio2f+0x37c>
 8028e5c:	2500      	movs	r5, #0
 8028e5e:	1b5c      	subs	r4, r3, r5
 8028e60:	2c00      	cmp	r4, #0
 8028e62:	f2c0 80d8 	blt.w	8029016 <__kernel_rem_pio2f+0x3c6>
 8028e66:	4f3d      	ldr	r7, [pc, #244]	; (8028f5c <__kernel_rem_pio2f+0x30c>)
 8028e68:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8028f68 <__kernel_rem_pio2f+0x318>
 8028e6c:	2400      	movs	r4, #0
 8028e6e:	e0c6      	b.n	8028ffe <__kernel_rem_pio2f+0x3ae>
 8028e70:	f04f 0802 	mov.w	r8, #2
 8028e74:	e78a      	b.n	8028d8c <__kernel_rem_pio2f+0x13c>
 8028e76:	ab06      	add	r3, sp, #24
 8028e78:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8028e7c:	b949      	cbnz	r1, 8028e92 <__kernel_rem_pio2f+0x242>
 8028e7e:	b12b      	cbz	r3, 8028e8c <__kernel_rem_pio2f+0x23c>
 8028e80:	aa06      	add	r2, sp, #24
 8028e82:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8028e86:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8028e8a:	2301      	movs	r3, #1
 8028e8c:	3001      	adds	r0, #1
 8028e8e:	4619      	mov	r1, r3
 8028e90:	e781      	b.n	8028d96 <__kernel_rem_pio2f+0x146>
 8028e92:	aa06      	add	r2, sp, #24
 8028e94:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8028e98:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8028e9c:	460b      	mov	r3, r1
 8028e9e:	e7f5      	b.n	8028e8c <__kernel_rem_pio2f+0x23c>
 8028ea0:	1e68      	subs	r0, r5, #1
 8028ea2:	ab06      	add	r3, sp, #24
 8028ea4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8028ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028eac:	aa06      	add	r2, sp, #24
 8028eae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8028eb2:	e779      	b.n	8028da8 <__kernel_rem_pio2f+0x158>
 8028eb4:	1e68      	subs	r0, r5, #1
 8028eb6:	ab06      	add	r3, sp, #24
 8028eb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8028ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8028ec0:	e7f4      	b.n	8028eac <__kernel_rem_pio2f+0x25c>
 8028ec2:	a906      	add	r1, sp, #24
 8028ec4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8028ec8:	3801      	subs	r0, #1
 8028eca:	430a      	orrs	r2, r1
 8028ecc:	e7a9      	b.n	8028e22 <__kernel_rem_pio2f+0x1d2>
 8028ece:	f10c 0c01 	add.w	ip, ip, #1
 8028ed2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8028ed6:	2a00      	cmp	r2, #0
 8028ed8:	d0f9      	beq.n	8028ece <__kernel_rem_pio2f+0x27e>
 8028eda:	eb0b 0305 	add.w	r3, fp, r5
 8028ede:	aa1a      	add	r2, sp, #104	; 0x68
 8028ee0:	009b      	lsls	r3, r3, #2
 8028ee2:	1898      	adds	r0, r3, r2
 8028ee4:	3004      	adds	r0, #4
 8028ee6:	1c69      	adds	r1, r5, #1
 8028ee8:	3704      	adds	r7, #4
 8028eea:	2200      	movs	r2, #0
 8028eec:	4465      	add	r5, ip
 8028eee:	9005      	str	r0, [sp, #20]
 8028ef0:	428d      	cmp	r5, r1
 8028ef2:	f6ff af0a 	blt.w	8028d0a <__kernel_rem_pio2f+0xba>
 8028ef6:	a81a      	add	r0, sp, #104	; 0x68
 8028ef8:	eb02 0c03 	add.w	ip, r2, r3
 8028efc:	4484      	add	ip, r0
 8028efe:	9803      	ldr	r0, [sp, #12]
 8028f00:	f8dd e008 	ldr.w	lr, [sp, #8]
 8028f04:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8028f08:	9001      	str	r0, [sp, #4]
 8028f0a:	ee07 0a90 	vmov	s15, r0
 8028f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028f12:	9805      	ldr	r0, [sp, #20]
 8028f14:	edcc 7a00 	vstr	s15, [ip]
 8028f18:	eddf 7a13 	vldr	s15, [pc, #76]	; 8028f68 <__kernel_rem_pio2f+0x318>
 8028f1c:	eb00 0802 	add.w	r8, r0, r2
 8028f20:	f04f 0c00 	mov.w	ip, #0
 8028f24:	45d4      	cmp	ip, sl
 8028f26:	dd0c      	ble.n	8028f42 <__kernel_rem_pio2f+0x2f2>
 8028f28:	eb02 0c07 	add.w	ip, r2, r7
 8028f2c:	a842      	add	r0, sp, #264	; 0x108
 8028f2e:	4484      	add	ip, r0
 8028f30:	edcc 7a01 	vstr	s15, [ip, #4]
 8028f34:	3101      	adds	r1, #1
 8028f36:	3204      	adds	r2, #4
 8028f38:	e7da      	b.n	8028ef0 <__kernel_rem_pio2f+0x2a0>
 8028f3a:	9b04      	ldr	r3, [sp, #16]
 8028f3c:	f04f 0c01 	mov.w	ip, #1
 8028f40:	e7c7      	b.n	8028ed2 <__kernel_rem_pio2f+0x282>
 8028f42:	ecfe 6a01 	vldmia	lr!, {s13}
 8028f46:	ed38 7a01 	vldmdb	r8!, {s14}
 8028f4a:	f10c 0c01 	add.w	ip, ip, #1
 8028f4e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8028f52:	e7e7      	b.n	8028f24 <__kernel_rem_pio2f+0x2d4>
 8028f54:	3b01      	subs	r3, #1
 8028f56:	e769      	b.n	8028e2c <__kernel_rem_pio2f+0x1dc>
 8028f58:	081462e4 	.word	0x081462e4
 8028f5c:	081462b8 	.word	0x081462b8
 8028f60:	43800000 	.word	0x43800000
 8028f64:	3b800000 	.word	0x3b800000
 8028f68:	00000000 	.word	0x00000000
 8028f6c:	4260      	negs	r0, r4
 8028f6e:	eeb0 0a48 	vmov.f32	s0, s16
 8028f72:	f000 fd01 	bl	8029978 <scalbnf>
 8028f76:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8028f60 <__kernel_rem_pio2f+0x310>
 8028f7a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8028f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028f82:	db1a      	blt.n	8028fba <__kernel_rem_pio2f+0x36a>
 8028f84:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8028f64 <__kernel_rem_pio2f+0x314>
 8028f88:	ee60 7a27 	vmul.f32	s15, s0, s15
 8028f8c:	aa06      	add	r2, sp, #24
 8028f8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028f92:	a906      	add	r1, sp, #24
 8028f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028f98:	3408      	adds	r4, #8
 8028f9a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8028f9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028fa2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028fa6:	ee10 3a10 	vmov	r3, s0
 8028faa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8028fae:	1c6b      	adds	r3, r5, #1
 8028fb0:	ee17 2a90 	vmov	r2, s15
 8028fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8028fb8:	e73f      	b.n	8028e3a <__kernel_rem_pio2f+0x1ea>
 8028fba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028fbe:	aa06      	add	r2, sp, #24
 8028fc0:	ee10 3a10 	vmov	r3, s0
 8028fc4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8028fc8:	462b      	mov	r3, r5
 8028fca:	e736      	b.n	8028e3a <__kernel_rem_pio2f+0x1ea>
 8028fcc:	aa06      	add	r2, sp, #24
 8028fce:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8028fd2:	9202      	str	r2, [sp, #8]
 8028fd4:	ee07 2a90 	vmov	s15, r2
 8028fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028fdc:	3c01      	subs	r4, #1
 8028fde:	ee67 7a80 	vmul.f32	s15, s15, s0
 8028fe2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8028fe6:	ed65 7a01 	vstmdb	r5!, {s15}
 8028fea:	e734      	b.n	8028e56 <__kernel_rem_pio2f+0x206>
 8028fec:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8028ff0:	ecf7 6a01 	vldmia	r7!, {s13}
 8028ff4:	ed9c 7a00 	vldr	s14, [ip]
 8028ff8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8028ffc:	3401      	adds	r4, #1
 8028ffe:	454c      	cmp	r4, r9
 8029000:	dc01      	bgt.n	8029006 <__kernel_rem_pio2f+0x3b6>
 8029002:	42a5      	cmp	r5, r4
 8029004:	daf2      	bge.n	8028fec <__kernel_rem_pio2f+0x39c>
 8029006:	aa56      	add	r2, sp, #344	; 0x158
 8029008:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 802900c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8029010:	3501      	adds	r5, #1
 8029012:	3804      	subs	r0, #4
 8029014:	e723      	b.n	8028e5e <__kernel_rem_pio2f+0x20e>
 8029016:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8029018:	2a03      	cmp	r2, #3
 802901a:	d84d      	bhi.n	80290b8 <__kernel_rem_pio2f+0x468>
 802901c:	e8df f002 	tbb	[pc, r2]
 8029020:	021f1f3e 	.word	0x021f1f3e
 8029024:	aa56      	add	r2, sp, #344	; 0x158
 8029026:	4411      	add	r1, r2
 8029028:	399c      	subs	r1, #156	; 0x9c
 802902a:	4608      	mov	r0, r1
 802902c:	461c      	mov	r4, r3
 802902e:	2c00      	cmp	r4, #0
 8029030:	dc5f      	bgt.n	80290f2 <__kernel_rem_pio2f+0x4a2>
 8029032:	4608      	mov	r0, r1
 8029034:	461c      	mov	r4, r3
 8029036:	2c01      	cmp	r4, #1
 8029038:	dc6b      	bgt.n	8029112 <__kernel_rem_pio2f+0x4c2>
 802903a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8028f68 <__kernel_rem_pio2f+0x318>
 802903e:	2b01      	cmp	r3, #1
 8029040:	dc77      	bgt.n	8029132 <__kernel_rem_pio2f+0x4e2>
 8029042:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8029046:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 802904a:	f1b8 0f00 	cmp.w	r8, #0
 802904e:	d176      	bne.n	802913e <__kernel_rem_pio2f+0x4ee>
 8029050:	edc6 6a00 	vstr	s13, [r6]
 8029054:	ed86 7a01 	vstr	s14, [r6, #4]
 8029058:	edc6 7a02 	vstr	s15, [r6, #8]
 802905c:	e02c      	b.n	80290b8 <__kernel_rem_pio2f+0x468>
 802905e:	aa56      	add	r2, sp, #344	; 0x158
 8029060:	4411      	add	r1, r2
 8029062:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8028f68 <__kernel_rem_pio2f+0x318>
 8029066:	399c      	subs	r1, #156	; 0x9c
 8029068:	4618      	mov	r0, r3
 802906a:	2800      	cmp	r0, #0
 802906c:	da32      	bge.n	80290d4 <__kernel_rem_pio2f+0x484>
 802906e:	f1b8 0f00 	cmp.w	r8, #0
 8029072:	d035      	beq.n	80290e0 <__kernel_rem_pio2f+0x490>
 8029074:	eef1 7a47 	vneg.f32	s15, s14
 8029078:	edc6 7a00 	vstr	s15, [r6]
 802907c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8029080:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029084:	a82f      	add	r0, sp, #188	; 0xbc
 8029086:	2101      	movs	r1, #1
 8029088:	428b      	cmp	r3, r1
 802908a:	da2c      	bge.n	80290e6 <__kernel_rem_pio2f+0x496>
 802908c:	f1b8 0f00 	cmp.w	r8, #0
 8029090:	d001      	beq.n	8029096 <__kernel_rem_pio2f+0x446>
 8029092:	eef1 7a67 	vneg.f32	s15, s15
 8029096:	edc6 7a01 	vstr	s15, [r6, #4]
 802909a:	e00d      	b.n	80290b8 <__kernel_rem_pio2f+0x468>
 802909c:	aa56      	add	r2, sp, #344	; 0x158
 802909e:	4411      	add	r1, r2
 80290a0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8028f68 <__kernel_rem_pio2f+0x318>
 80290a4:	399c      	subs	r1, #156	; 0x9c
 80290a6:	2b00      	cmp	r3, #0
 80290a8:	da0e      	bge.n	80290c8 <__kernel_rem_pio2f+0x478>
 80290aa:	f1b8 0f00 	cmp.w	r8, #0
 80290ae:	d001      	beq.n	80290b4 <__kernel_rem_pio2f+0x464>
 80290b0:	eef1 7a67 	vneg.f32	s15, s15
 80290b4:	edc6 7a00 	vstr	s15, [r6]
 80290b8:	9b01      	ldr	r3, [sp, #4]
 80290ba:	f003 0007 	and.w	r0, r3, #7
 80290be:	b057      	add	sp, #348	; 0x15c
 80290c0:	ecbd 8b04 	vpop	{d8-d9}
 80290c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80290c8:	ed31 7a01 	vldmdb	r1!, {s14}
 80290cc:	3b01      	subs	r3, #1
 80290ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80290d2:	e7e8      	b.n	80290a6 <__kernel_rem_pio2f+0x456>
 80290d4:	ed71 7a01 	vldmdb	r1!, {s15}
 80290d8:	3801      	subs	r0, #1
 80290da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80290de:	e7c4      	b.n	802906a <__kernel_rem_pio2f+0x41a>
 80290e0:	eef0 7a47 	vmov.f32	s15, s14
 80290e4:	e7c8      	b.n	8029078 <__kernel_rem_pio2f+0x428>
 80290e6:	ecb0 7a01 	vldmia	r0!, {s14}
 80290ea:	3101      	adds	r1, #1
 80290ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80290f0:	e7ca      	b.n	8029088 <__kernel_rem_pio2f+0x438>
 80290f2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80290f6:	ed70 6a01 	vldmdb	r0!, {s13}
 80290fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80290fe:	3c01      	subs	r4, #1
 8029100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029104:	ed00 7a01 	vstr	s14, [r0, #-4]
 8029108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802910c:	edc0 7a00 	vstr	s15, [r0]
 8029110:	e78d      	b.n	802902e <__kernel_rem_pio2f+0x3de>
 8029112:	ed50 7a02 	vldr	s15, [r0, #-8]
 8029116:	ed70 6a01 	vldmdb	r0!, {s13}
 802911a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802911e:	3c01      	subs	r4, #1
 8029120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029124:	ed00 7a01 	vstr	s14, [r0, #-4]
 8029128:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802912c:	edc0 7a00 	vstr	s15, [r0]
 8029130:	e781      	b.n	8029036 <__kernel_rem_pio2f+0x3e6>
 8029132:	ed31 7a01 	vldmdb	r1!, {s14}
 8029136:	3b01      	subs	r3, #1
 8029138:	ee77 7a87 	vadd.f32	s15, s15, s14
 802913c:	e77f      	b.n	802903e <__kernel_rem_pio2f+0x3ee>
 802913e:	eef1 6a66 	vneg.f32	s13, s13
 8029142:	eeb1 7a47 	vneg.f32	s14, s14
 8029146:	edc6 6a00 	vstr	s13, [r6]
 802914a:	ed86 7a01 	vstr	s14, [r6, #4]
 802914e:	eef1 7a67 	vneg.f32	s15, s15
 8029152:	e781      	b.n	8029058 <__kernel_rem_pio2f+0x408>

08029154 <__kernel_sinf>:
 8029154:	ee10 3a10 	vmov	r3, s0
 8029158:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802915c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8029160:	da04      	bge.n	802916c <__kernel_sinf+0x18>
 8029162:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8029166:	ee17 3a90 	vmov	r3, s15
 802916a:	b35b      	cbz	r3, 80291c4 <__kernel_sinf+0x70>
 802916c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8029170:	eddf 7a15 	vldr	s15, [pc, #84]	; 80291c8 <__kernel_sinf+0x74>
 8029174:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80291cc <__kernel_sinf+0x78>
 8029178:	eea7 6a27 	vfma.f32	s12, s14, s15
 802917c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80291d0 <__kernel_sinf+0x7c>
 8029180:	eee6 7a07 	vfma.f32	s15, s12, s14
 8029184:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80291d4 <__kernel_sinf+0x80>
 8029188:	eea7 6a87 	vfma.f32	s12, s15, s14
 802918c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80291d8 <__kernel_sinf+0x84>
 8029190:	ee60 6a07 	vmul.f32	s13, s0, s14
 8029194:	eee6 7a07 	vfma.f32	s15, s12, s14
 8029198:	b930      	cbnz	r0, 80291a8 <__kernel_sinf+0x54>
 802919a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80291dc <__kernel_sinf+0x88>
 802919e:	eea7 6a27 	vfma.f32	s12, s14, s15
 80291a2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80291a6:	4770      	bx	lr
 80291a8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80291ac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80291b0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80291b4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80291b8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80291e0 <__kernel_sinf+0x8c>
 80291bc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80291c0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80291c4:	4770      	bx	lr
 80291c6:	bf00      	nop
 80291c8:	2f2ec9d3 	.word	0x2f2ec9d3
 80291cc:	b2d72f34 	.word	0xb2d72f34
 80291d0:	3638ef1b 	.word	0x3638ef1b
 80291d4:	b9500d01 	.word	0xb9500d01
 80291d8:	3c088889 	.word	0x3c088889
 80291dc:	be2aaaab 	.word	0xbe2aaaab
 80291e0:	3e2aaaab 	.word	0x3e2aaaab

080291e4 <__kernel_tanf>:
 80291e4:	b508      	push	{r3, lr}
 80291e6:	ee10 3a10 	vmov	r3, s0
 80291ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80291ee:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 80291f2:	eef0 7a40 	vmov.f32	s15, s0
 80291f6:	da17      	bge.n	8029228 <__kernel_tanf+0x44>
 80291f8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80291fc:	ee17 1a10 	vmov	r1, s14
 8029200:	bb41      	cbnz	r1, 8029254 <__kernel_tanf+0x70>
 8029202:	1c43      	adds	r3, r0, #1
 8029204:	4313      	orrs	r3, r2
 8029206:	d108      	bne.n	802921a <__kernel_tanf+0x36>
 8029208:	f7fe f836 	bl	8027278 <fabsf>
 802920c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029210:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029214:	eeb0 0a67 	vmov.f32	s0, s15
 8029218:	bd08      	pop	{r3, pc}
 802921a:	2801      	cmp	r0, #1
 802921c:	d0fa      	beq.n	8029214 <__kernel_tanf+0x30>
 802921e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8029222:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029226:	e7f5      	b.n	8029214 <__kernel_tanf+0x30>
 8029228:	494e      	ldr	r1, [pc, #312]	; (8029364 <__kernel_tanf+0x180>)
 802922a:	428a      	cmp	r2, r1
 802922c:	dd12      	ble.n	8029254 <__kernel_tanf+0x70>
 802922e:	2b00      	cmp	r3, #0
 8029230:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8029368 <__kernel_tanf+0x184>
 8029234:	bfb8      	it	lt
 8029236:	eef1 7a40 	vneglt.f32	s15, s0
 802923a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802923e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 802936c <__kernel_tanf+0x188>
 8029242:	bfb8      	it	lt
 8029244:	eef1 0a60 	vneglt.f32	s1, s1
 8029248:	ee77 0a60 	vsub.f32	s1, s14, s1
 802924c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8029250:	eddf 0a47 	vldr	s1, [pc, #284]	; 8029370 <__kernel_tanf+0x18c>
 8029254:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8029374 <__kernel_tanf+0x190>
 8029258:	eddf 5a47 	vldr	s11, [pc, #284]	; 8029378 <__kernel_tanf+0x194>
 802925c:	ed9f 5a47 	vldr	s10, [pc, #284]	; 802937c <__kernel_tanf+0x198>
 8029260:	4940      	ldr	r1, [pc, #256]	; (8029364 <__kernel_tanf+0x180>)
 8029262:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8029266:	428a      	cmp	r2, r1
 8029268:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802926c:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8029270:	eee7 5a06 	vfma.f32	s11, s14, s12
 8029274:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8029380 <__kernel_tanf+0x19c>
 8029278:	eea5 6a87 	vfma.f32	s12, s11, s14
 802927c:	eddf 5a41 	vldr	s11, [pc, #260]	; 8029384 <__kernel_tanf+0x1a0>
 8029280:	eee6 5a07 	vfma.f32	s11, s12, s14
 8029284:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8029388 <__kernel_tanf+0x1a4>
 8029288:	eea5 6a87 	vfma.f32	s12, s11, s14
 802928c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 802938c <__kernel_tanf+0x1a8>
 8029290:	eee6 5a07 	vfma.f32	s11, s12, s14
 8029294:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8029390 <__kernel_tanf+0x1ac>
 8029298:	eea7 6a05 	vfma.f32	s12, s14, s10
 802929c:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8029394 <__kernel_tanf+0x1b0>
 80292a0:	eea6 5a07 	vfma.f32	s10, s12, s14
 80292a4:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8029398 <__kernel_tanf+0x1b4>
 80292a8:	eea5 6a07 	vfma.f32	s12, s10, s14
 80292ac:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 802939c <__kernel_tanf+0x1b8>
 80292b0:	eea6 5a07 	vfma.f32	s10, s12, s14
 80292b4:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 80293a0 <__kernel_tanf+0x1bc>
 80292b8:	eea5 6a07 	vfma.f32	s12, s10, s14
 80292bc:	eeb0 7a46 	vmov.f32	s14, s12
 80292c0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80292c4:	eeb0 6a60 	vmov.f32	s12, s1
 80292c8:	eea7 6a24 	vfma.f32	s12, s14, s9
 80292cc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80293a4 <__kernel_tanf+0x1c0>
 80292d0:	eee6 0a26 	vfma.f32	s1, s12, s13
 80292d4:	eee4 0a87 	vfma.f32	s1, s9, s14
 80292d8:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80292dc:	dd1d      	ble.n	802931a <__kernel_tanf+0x136>
 80292de:	ee07 0a10 	vmov	s14, r0
 80292e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80292e6:	ee66 5aa6 	vmul.f32	s11, s13, s13
 80292ea:	ee76 6a87 	vadd.f32	s13, s13, s14
 80292ee:	179b      	asrs	r3, r3, #30
 80292f0:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 80292f4:	f003 0302 	and.w	r3, r3, #2
 80292f8:	f1c3 0301 	rsb	r3, r3, #1
 80292fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8029300:	ee76 0a60 	vsub.f32	s1, s12, s1
 8029304:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8029308:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802930c:	ee07 3a90 	vmov	s15, r3
 8029310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8029314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8029318:	e77c      	b.n	8029214 <__kernel_tanf+0x30>
 802931a:	2801      	cmp	r0, #1
 802931c:	d01f      	beq.n	802935e <__kernel_tanf+0x17a>
 802931e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8029322:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8029326:	4b20      	ldr	r3, [pc, #128]	; (80293a8 <__kernel_tanf+0x1c4>)
 8029328:	ee16 2a90 	vmov	r2, s13
 802932c:	401a      	ands	r2, r3
 802932e:	ee06 2a10 	vmov	s12, r2
 8029332:	ee15 2a90 	vmov	r2, s11
 8029336:	4013      	ands	r3, r2
 8029338:	ee07 3a10 	vmov	s14, r3
 802933c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8029340:	eee6 6a07 	vfma.f32	s13, s12, s14
 8029344:	ee76 7a67 	vsub.f32	s15, s12, s15
 8029348:	ee70 0ae7 	vsub.f32	s1, s1, s15
 802934c:	eef0 7a66 	vmov.f32	s15, s13
 8029350:	eee7 7a20 	vfma.f32	s15, s14, s1
 8029354:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8029358:	eef0 7a47 	vmov.f32	s15, s14
 802935c:	e75a      	b.n	8029214 <__kernel_tanf+0x30>
 802935e:	eef0 7a66 	vmov.f32	s15, s13
 8029362:	e757      	b.n	8029214 <__kernel_tanf+0x30>
 8029364:	3f2ca13f 	.word	0x3f2ca13f
 8029368:	3f490fda 	.word	0x3f490fda
 802936c:	33222168 	.word	0x33222168
 8029370:	00000000 	.word	0x00000000
 8029374:	37d95384 	.word	0x37d95384
 8029378:	3895c07a 	.word	0x3895c07a
 802937c:	b79bae5f 	.word	0xb79bae5f
 8029380:	398137b9 	.word	0x398137b9
 8029384:	3abede48 	.word	0x3abede48
 8029388:	3c11371f 	.word	0x3c11371f
 802938c:	3d5d0dd1 	.word	0x3d5d0dd1
 8029390:	38a3f445 	.word	0x38a3f445
 8029394:	3a1a26c8 	.word	0x3a1a26c8
 8029398:	3b6b6916 	.word	0x3b6b6916
 802939c:	3cb327a4 	.word	0x3cb327a4
 80293a0:	3e088889 	.word	0x3e088889
 80293a4:	3eaaaaab 	.word	0x3eaaaaab
 80293a8:	fffff000 	.word	0xfffff000

080293ac <with_errnof>:
 80293ac:	b510      	push	{r4, lr}
 80293ae:	ed2d 8b02 	vpush	{d8}
 80293b2:	eeb0 8a40 	vmov.f32	s16, s0
 80293b6:	4604      	mov	r4, r0
 80293b8:	f7fd fd30 	bl	8026e1c <__errno>
 80293bc:	eeb0 0a48 	vmov.f32	s0, s16
 80293c0:	ecbd 8b02 	vpop	{d8}
 80293c4:	6004      	str	r4, [r0, #0]
 80293c6:	bd10      	pop	{r4, pc}

080293c8 <xflowf>:
 80293c8:	b130      	cbz	r0, 80293d8 <xflowf+0x10>
 80293ca:	eef1 7a40 	vneg.f32	s15, s0
 80293ce:	2022      	movs	r0, #34	; 0x22
 80293d0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80293d4:	f7ff bfea 	b.w	80293ac <with_errnof>
 80293d8:	eef0 7a40 	vmov.f32	s15, s0
 80293dc:	e7f7      	b.n	80293ce <xflowf+0x6>
	...

080293e0 <__math_uflowf>:
 80293e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80293e8 <__math_uflowf+0x8>
 80293e4:	f7ff bff0 	b.w	80293c8 <xflowf>
 80293e8:	10000000 	.word	0x10000000

080293ec <__math_may_uflowf>:
 80293ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80293f4 <__math_may_uflowf+0x8>
 80293f0:	f7ff bfea 	b.w	80293c8 <xflowf>
 80293f4:	1a200000 	.word	0x1a200000

080293f8 <__math_oflowf>:
 80293f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8029400 <__math_oflowf+0x8>
 80293fc:	f7ff bfe4 	b.w	80293c8 <xflowf>
 8029400:	70000000 	.word	0x70000000

08029404 <__math_divzerof>:
 8029404:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8029408:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 802940c:	2800      	cmp	r0, #0
 802940e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8029412:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8029420 <__math_divzerof+0x1c>
 8029416:	2022      	movs	r0, #34	; 0x22
 8029418:	ee87 0a80 	vdiv.f32	s0, s15, s0
 802941c:	f7ff bfc6 	b.w	80293ac <with_errnof>
 8029420:	00000000 	.word	0x00000000

08029424 <__math_invalidf>:
 8029424:	eef0 7a40 	vmov.f32	s15, s0
 8029428:	ee30 7a40 	vsub.f32	s14, s0, s0
 802942c:	eef4 7a67 	vcmp.f32	s15, s15
 8029430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029434:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8029438:	d602      	bvs.n	8029440 <__math_invalidf+0x1c>
 802943a:	2021      	movs	r0, #33	; 0x21
 802943c:	f7ff bfb6 	b.w	80293ac <with_errnof>
 8029440:	4770      	bx	lr

08029442 <fabs>:
 8029442:	ec51 0b10 	vmov	r0, r1, d0
 8029446:	ee10 2a10 	vmov	r2, s0
 802944a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802944e:	ec43 2b10 	vmov	d0, r2, r3
 8029452:	4770      	bx	lr

08029454 <finite>:
 8029454:	ee10 3a90 	vmov	r3, s1
 8029458:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 802945c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8029460:	0fc0      	lsrs	r0, r0, #31
 8029462:	4770      	bx	lr

08029464 <matherr>:
 8029464:	2000      	movs	r0, #0
 8029466:	4770      	bx	lr

08029468 <nan>:
 8029468:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8029470 <nan+0x8>
 802946c:	4770      	bx	lr
 802946e:	bf00      	nop
 8029470:	00000000 	.word	0x00000000
 8029474:	7ff80000 	.word	0x7ff80000

08029478 <rint>:
 8029478:	b530      	push	{r4, r5, lr}
 802947a:	b085      	sub	sp, #20
 802947c:	ed8d 0b00 	vstr	d0, [sp]
 8029480:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029484:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8029488:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 802948c:	2813      	cmp	r0, #19
 802948e:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8029492:	dc5a      	bgt.n	802954a <rint+0xd2>
 8029494:	2800      	cmp	r0, #0
 8029496:	da2f      	bge.n	80294f8 <rint+0x80>
 8029498:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802949c:	4311      	orrs	r1, r2
 802949e:	d027      	beq.n	80294f0 <rint+0x78>
 80294a0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80294a4:	4315      	orrs	r5, r2
 80294a6:	426a      	negs	r2, r5
 80294a8:	432a      	orrs	r2, r5
 80294aa:	0b12      	lsrs	r2, r2, #12
 80294ac:	0c5b      	lsrs	r3, r3, #17
 80294ae:	045b      	lsls	r3, r3, #17
 80294b0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80294b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80294b8:	ea42 0103 	orr.w	r1, r2, r3
 80294bc:	4b31      	ldr	r3, [pc, #196]	; (8029584 <rint+0x10c>)
 80294be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80294c2:	ed93 6b00 	vldr	d6, [r3]
 80294c6:	ec41 0b17 	vmov	d7, r0, r1
 80294ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80294ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80294d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80294d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80294da:	ed8d 7b00 	vstr	d7, [sp]
 80294de:	9b01      	ldr	r3, [sp, #4]
 80294e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80294e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80294e8:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 80294ec:	e9cd 0100 	strd	r0, r1, [sp]
 80294f0:	ed9d 0b00 	vldr	d0, [sp]
 80294f4:	b005      	add	sp, #20
 80294f6:	bd30      	pop	{r4, r5, pc}
 80294f8:	4923      	ldr	r1, [pc, #140]	; (8029588 <rint+0x110>)
 80294fa:	4101      	asrs	r1, r0
 80294fc:	ea03 0501 	and.w	r5, r3, r1
 8029500:	4315      	orrs	r5, r2
 8029502:	d0f5      	beq.n	80294f0 <rint+0x78>
 8029504:	0849      	lsrs	r1, r1, #1
 8029506:	ea03 0501 	and.w	r5, r3, r1
 802950a:	432a      	orrs	r2, r5
 802950c:	d00b      	beq.n	8029526 <rint+0xae>
 802950e:	ea23 0101 	bic.w	r1, r3, r1
 8029512:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8029516:	2813      	cmp	r0, #19
 8029518:	fa43 f300 	asr.w	r3, r3, r0
 802951c:	bf0c      	ite	eq
 802951e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8029522:	2200      	movne	r2, #0
 8029524:	430b      	orrs	r3, r1
 8029526:	4619      	mov	r1, r3
 8029528:	4b16      	ldr	r3, [pc, #88]	; (8029584 <rint+0x10c>)
 802952a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 802952e:	ed94 6b00 	vldr	d6, [r4]
 8029532:	4610      	mov	r0, r2
 8029534:	ec41 0b17 	vmov	d7, r0, r1
 8029538:	ee36 7b07 	vadd.f64	d7, d6, d7
 802953c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8029540:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029544:	ee37 7b46 	vsub.f64	d7, d7, d6
 8029548:	e008      	b.n	802955c <rint+0xe4>
 802954a:	2833      	cmp	r0, #51	; 0x33
 802954c:	dd09      	ble.n	8029562 <rint+0xea>
 802954e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8029552:	d1cd      	bne.n	80294f0 <rint+0x78>
 8029554:	ed9d 7b00 	vldr	d7, [sp]
 8029558:	ee37 7b07 	vadd.f64	d7, d7, d7
 802955c:	ed8d 7b00 	vstr	d7, [sp]
 8029560:	e7c6      	b.n	80294f0 <rint+0x78>
 8029562:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 8029566:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802956a:	40c1      	lsrs	r1, r0
 802956c:	420a      	tst	r2, r1
 802956e:	d0bf      	beq.n	80294f0 <rint+0x78>
 8029570:	0849      	lsrs	r1, r1, #1
 8029572:	420a      	tst	r2, r1
 8029574:	bf1f      	itttt	ne
 8029576:	ea22 0101 	bicne.w	r1, r2, r1
 802957a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 802957e:	4102      	asrne	r2, r0
 8029580:	430a      	orrne	r2, r1
 8029582:	e7d0      	b.n	8029526 <rint+0xae>
 8029584:	081462f0 	.word	0x081462f0
 8029588:	000fffff 	.word	0x000fffff
 802958c:	00000000 	.word	0x00000000

08029590 <scalbn>:
 8029590:	b500      	push	{lr}
 8029592:	ed2d 8b02 	vpush	{d8}
 8029596:	b083      	sub	sp, #12
 8029598:	ed8d 0b00 	vstr	d0, [sp]
 802959c:	9b01      	ldr	r3, [sp, #4]
 802959e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80295a2:	b9a2      	cbnz	r2, 80295ce <scalbn+0x3e>
 80295a4:	9a00      	ldr	r2, [sp, #0]
 80295a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80295aa:	4313      	orrs	r3, r2
 80295ac:	d03a      	beq.n	8029624 <scalbn+0x94>
 80295ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8029668 <scalbn+0xd8>
 80295b2:	4b35      	ldr	r3, [pc, #212]	; (8029688 <scalbn+0xf8>)
 80295b4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80295b8:	4298      	cmp	r0, r3
 80295ba:	ed8d 7b00 	vstr	d7, [sp]
 80295be:	da11      	bge.n	80295e4 <scalbn+0x54>
 80295c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8029670 <scalbn+0xe0>
 80295c4:	ed9d 6b00 	vldr	d6, [sp]
 80295c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80295cc:	e007      	b.n	80295de <scalbn+0x4e>
 80295ce:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80295d2:	428a      	cmp	r2, r1
 80295d4:	d10a      	bne.n	80295ec <scalbn+0x5c>
 80295d6:	ed9d 7b00 	vldr	d7, [sp]
 80295da:	ee37 7b07 	vadd.f64	d7, d7, d7
 80295de:	ed8d 7b00 	vstr	d7, [sp]
 80295e2:	e01f      	b.n	8029624 <scalbn+0x94>
 80295e4:	9b01      	ldr	r3, [sp, #4]
 80295e6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80295ea:	3a36      	subs	r2, #54	; 0x36
 80295ec:	4402      	add	r2, r0
 80295ee:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80295f2:	428a      	cmp	r2, r1
 80295f4:	dd0a      	ble.n	802960c <scalbn+0x7c>
 80295f6:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8029678 <scalbn+0xe8>
 80295fa:	eeb0 0b48 	vmov.f64	d0, d8
 80295fe:	ed9d 1b00 	vldr	d1, [sp]
 8029602:	f000 fa19 	bl	8029a38 <copysign>
 8029606:	ee20 7b08 	vmul.f64	d7, d0, d8
 802960a:	e7e8      	b.n	80295de <scalbn+0x4e>
 802960c:	2a00      	cmp	r2, #0
 802960e:	dd10      	ble.n	8029632 <scalbn+0xa2>
 8029610:	e9dd 0100 	ldrd	r0, r1, [sp]
 8029614:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8029618:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802961c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8029620:	e9cd 0100 	strd	r0, r1, [sp]
 8029624:	ed9d 0b00 	vldr	d0, [sp]
 8029628:	b003      	add	sp, #12
 802962a:	ecbd 8b02 	vpop	{d8}
 802962e:	f85d fb04 	ldr.w	pc, [sp], #4
 8029632:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8029636:	da06      	bge.n	8029646 <scalbn+0xb6>
 8029638:	f24c 3350 	movw	r3, #50000	; 0xc350
 802963c:	4298      	cmp	r0, r3
 802963e:	dcda      	bgt.n	80295f6 <scalbn+0x66>
 8029640:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8029670 <scalbn+0xe0>
 8029644:	e7d9      	b.n	80295fa <scalbn+0x6a>
 8029646:	e9dd 0100 	ldrd	r0, r1, [sp]
 802964a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802964e:	3236      	adds	r2, #54	; 0x36
 8029650:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8029654:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8029658:	ec41 0b17 	vmov	d7, r0, r1
 802965c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8029680 <scalbn+0xf0>
 8029660:	e7b2      	b.n	80295c8 <scalbn+0x38>
 8029662:	bf00      	nop
 8029664:	f3af 8000 	nop.w
 8029668:	00000000 	.word	0x00000000
 802966c:	43500000 	.word	0x43500000
 8029670:	c2f8f359 	.word	0xc2f8f359
 8029674:	01a56e1f 	.word	0x01a56e1f
 8029678:	8800759c 	.word	0x8800759c
 802967c:	7e37e43c 	.word	0x7e37e43c
 8029680:	00000000 	.word	0x00000000
 8029684:	3c900000 	.word	0x3c900000
 8029688:	ffff3cb0 	.word	0xffff3cb0

0802968c <expm1f>:
 802968c:	ee10 2a10 	vmov	r2, s0
 8029690:	4984      	ldr	r1, [pc, #528]	; (80298a4 <expm1f+0x218>)
 8029692:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8029696:	428b      	cmp	r3, r1
 8029698:	d923      	bls.n	80296e2 <expm1f+0x56>
 802969a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802969e:	d902      	bls.n	80296a6 <expm1f+0x1a>
 80296a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80296a4:	4770      	bx	lr
 80296a6:	d105      	bne.n	80296b4 <expm1f+0x28>
 80296a8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80296ac:	2a00      	cmp	r2, #0
 80296ae:	fe20 0a27 	vselge.f32	s0, s0, s15
 80296b2:	4770      	bx	lr
 80296b4:	2a00      	cmp	r2, #0
 80296b6:	db08      	blt.n	80296ca <expm1f+0x3e>
 80296b8:	4a7b      	ldr	r2, [pc, #492]	; (80298a8 <expm1f+0x21c>)
 80296ba:	4293      	cmp	r3, r2
 80296bc:	f240 80ea 	bls.w	8029894 <expm1f+0x208>
 80296c0:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80298ac <expm1f+0x220>
 80296c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80296c8:	4770      	bx	lr
 80296ca:	eddf 7a79 	vldr	s15, [pc, #484]	; 80298b0 <expm1f+0x224>
 80296ce:	ee70 7a27 	vadd.f32	s15, s0, s15
 80296d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80296d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80296da:	d554      	bpl.n	8029786 <expm1f+0xfa>
 80296dc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80296e0:	4770      	bx	lr
 80296e2:	4974      	ldr	r1, [pc, #464]	; (80298b4 <expm1f+0x228>)
 80296e4:	428b      	cmp	r3, r1
 80296e6:	d96c      	bls.n	80297c2 <expm1f+0x136>
 80296e8:	4973      	ldr	r1, [pc, #460]	; (80298b8 <expm1f+0x22c>)
 80296ea:	428b      	cmp	r3, r1
 80296ec:	d84b      	bhi.n	8029786 <expm1f+0xfa>
 80296ee:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80298bc <expm1f+0x230>
 80296f2:	2a00      	cmp	r2, #0
 80296f4:	bfa7      	ittee	ge
 80296f6:	ee30 7a47 	vsubge.f32	s14, s0, s14
 80296fa:	eddf 7a71 	vldrge	s15, [pc, #452]	; 80298c0 <expm1f+0x234>
 80296fe:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 80298c4 <expm1f+0x238>
 8029702:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8029706:	bfac      	ite	ge
 8029708:	2301      	movge	r3, #1
 802970a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802970e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8029712:	ee37 7a40 	vsub.f32	s14, s14, s0
 8029716:	ee77 7a67 	vsub.f32	s15, s14, s15
 802971a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 802971e:	ee20 5a25 	vmul.f32	s10, s0, s11
 8029722:	eddf 6a69 	vldr	s13, [pc, #420]	; 80298c8 <expm1f+0x23c>
 8029726:	ed9f 6a69 	vldr	s12, [pc, #420]	; 80298cc <expm1f+0x240>
 802972a:	ee20 7a05 	vmul.f32	s14, s0, s10
 802972e:	eea7 6a26 	vfma.f32	s12, s14, s13
 8029732:	eddf 6a67 	vldr	s13, [pc, #412]	; 80298d0 <expm1f+0x244>
 8029736:	eee6 6a07 	vfma.f32	s13, s12, s14
 802973a:	ed9f 6a66 	vldr	s12, [pc, #408]	; 80298d4 <expm1f+0x248>
 802973e:	eea6 6a87 	vfma.f32	s12, s13, s14
 8029742:	eddf 6a65 	vldr	s13, [pc, #404]	; 80298d8 <expm1f+0x24c>
 8029746:	eee6 6a07 	vfma.f32	s13, s12, s14
 802974a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 802974e:	eef0 4a46 	vmov.f32	s9, s12
 8029752:	eee6 4a87 	vfma.f32	s9, s13, s14
 8029756:	eef0 6a64 	vmov.f32	s13, s9
 802975a:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 802975e:	eee5 4a66 	vfms.f32	s9, s10, s13
 8029762:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8029766:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 802976a:	eee0 6a64 	vfms.f32	s13, s0, s9
 802976e:	eef0 4a66 	vmov.f32	s9, s13
 8029772:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8029776:	ee66 6a87 	vmul.f32	s13, s13, s14
 802977a:	bb83      	cbnz	r3, 80297de <expm1f+0x152>
 802977c:	eef0 7a47 	vmov.f32	s15, s14
 8029780:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8029784:	e026      	b.n	80297d4 <expm1f+0x148>
 8029786:	eddf 7a55 	vldr	s15, [pc, #340]	; 80298dc <expm1f+0x250>
 802978a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 802978e:	ee20 7a27 	vmul.f32	s14, s0, s15
 8029792:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8029796:	2a00      	cmp	r2, #0
 8029798:	fe66 7aa7 	vselge.f32	s15, s13, s15
 802979c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80297a0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80298bc <expm1f+0x230>
 80297a4:	eddf 6a46 	vldr	s13, [pc, #280]	; 80298c0 <expm1f+0x234>
 80297a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80297ac:	ee17 3a90 	vmov	r3, s15
 80297b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80297b4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80297b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80297bc:	eeb0 7a40 	vmov.f32	s14, s0
 80297c0:	e7a5      	b.n	802970e <expm1f+0x82>
 80297c2:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80297c6:	d208      	bcs.n	80297da <expm1f+0x14e>
 80297c8:	eddf 7a38 	vldr	s15, [pc, #224]	; 80298ac <expm1f+0x220>
 80297cc:	ee70 7a27 	vadd.f32	s15, s0, s15
 80297d0:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80297d4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80297d8:	4770      	bx	lr
 80297da:	2300      	movs	r3, #0
 80297dc:	e79d      	b.n	802971a <expm1f+0x8e>
 80297de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80297e2:	1c5a      	adds	r2, r3, #1
 80297e4:	eed6 7a80 	vfnms.f32	s15, s13, s0
 80297e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80297ec:	d106      	bne.n	80297fc <expm1f+0x170>
 80297ee:	ee70 7a67 	vsub.f32	s15, s0, s15
 80297f2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80297f6:	eea7 0aa5 	vfma.f32	s0, s15, s11
 80297fa:	4770      	bx	lr
 80297fc:	2b01      	cmp	r3, #1
 80297fe:	d118      	bne.n	8029832 <expm1f+0x1a6>
 8029800:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8029804:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8029808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802980c:	bf41      	itttt	mi
 802980e:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8029812:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8029816:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 802981a:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 802981e:	bf5f      	itttt	pl
 8029820:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8029824:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8029828:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 802982c:	eeb0 0a46 	vmovpl.f32	s0, s12
 8029830:	4770      	bx	lr
 8029832:	1c5a      	adds	r2, r3, #1
 8029834:	2a39      	cmp	r2, #57	; 0x39
 8029836:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 802983a:	d90b      	bls.n	8029854 <expm1f+0x1c8>
 802983c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8029840:	ee36 0a40 	vsub.f32	s0, s12, s0
 8029844:	ee10 3a10 	vmov	r3, s0
 8029848:	440b      	add	r3, r1
 802984a:	ee00 3a10 	vmov	s0, r3
 802984e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8029852:	4770      	bx	lr
 8029854:	2b16      	cmp	r3, #22
 8029856:	dc11      	bgt.n	802987c <expm1f+0x1f0>
 8029858:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802985c:	fa42 f303 	asr.w	r3, r2, r3
 8029860:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8029864:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8029868:	ee07 3a90 	vmov	s15, r3
 802986c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8029870:	ee10 3a10 	vmov	r3, s0
 8029874:	440b      	add	r3, r1
 8029876:	ee00 3a10 	vmov	s0, r3
 802987a:	4770      	bx	lr
 802987c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8029880:	05db      	lsls	r3, r3, #23
 8029882:	ee07 3a10 	vmov	s14, r3
 8029886:	ee77 7a87 	vadd.f32	s15, s15, s14
 802988a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802988e:	ee30 0a06 	vadd.f32	s0, s0, s12
 8029892:	e7ed      	b.n	8029870 <expm1f+0x1e4>
 8029894:	eddf 7a11 	vldr	s15, [pc, #68]	; 80298dc <expm1f+0x250>
 8029898:	ee20 7a27 	vmul.f32	s14, s0, s15
 802989c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80298a0:	e77c      	b.n	802979c <expm1f+0x110>
 80298a2:	bf00      	nop
 80298a4:	4195b843 	.word	0x4195b843
 80298a8:	42b17217 	.word	0x42b17217
 80298ac:	7149f2ca 	.word	0x7149f2ca
 80298b0:	0da24260 	.word	0x0da24260
 80298b4:	3eb17218 	.word	0x3eb17218
 80298b8:	3f851591 	.word	0x3f851591
 80298bc:	3f317180 	.word	0x3f317180
 80298c0:	3717f7d1 	.word	0x3717f7d1
 80298c4:	b717f7d1 	.word	0xb717f7d1
 80298c8:	b457edbb 	.word	0xb457edbb
 80298cc:	36867e54 	.word	0x36867e54
 80298d0:	b8a670cd 	.word	0xb8a670cd
 80298d4:	3ad00d01 	.word	0x3ad00d01
 80298d8:	bd088889 	.word	0xbd088889
 80298dc:	3fb8aa3b 	.word	0x3fb8aa3b

080298e0 <finitef>:
 80298e0:	ee10 3a10 	vmov	r3, s0
 80298e4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80298e8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80298ec:	bfac      	ite	ge
 80298ee:	2000      	movge	r0, #0
 80298f0:	2001      	movlt	r0, #1
 80298f2:	4770      	bx	lr

080298f4 <floorf>:
 80298f4:	ee10 3a10 	vmov	r3, s0
 80298f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80298fc:	0dca      	lsrs	r2, r1, #23
 80298fe:	3a7f      	subs	r2, #127	; 0x7f
 8029900:	2a16      	cmp	r2, #22
 8029902:	dc2a      	bgt.n	802995a <floorf+0x66>
 8029904:	2a00      	cmp	r2, #0
 8029906:	da11      	bge.n	802992c <floorf+0x38>
 8029908:	eddf 7a18 	vldr	s15, [pc, #96]	; 802996c <floorf+0x78>
 802990c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8029910:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8029914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029918:	dd05      	ble.n	8029926 <floorf+0x32>
 802991a:	2b00      	cmp	r3, #0
 802991c:	da23      	bge.n	8029966 <floorf+0x72>
 802991e:	4a14      	ldr	r2, [pc, #80]	; (8029970 <floorf+0x7c>)
 8029920:	2900      	cmp	r1, #0
 8029922:	bf18      	it	ne
 8029924:	4613      	movne	r3, r2
 8029926:	ee00 3a10 	vmov	s0, r3
 802992a:	4770      	bx	lr
 802992c:	4911      	ldr	r1, [pc, #68]	; (8029974 <floorf+0x80>)
 802992e:	4111      	asrs	r1, r2
 8029930:	420b      	tst	r3, r1
 8029932:	d0fa      	beq.n	802992a <floorf+0x36>
 8029934:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802996c <floorf+0x78>
 8029938:	ee30 0a27 	vadd.f32	s0, s0, s15
 802993c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8029940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029944:	ddef      	ble.n	8029926 <floorf+0x32>
 8029946:	2b00      	cmp	r3, #0
 8029948:	bfbe      	ittt	lt
 802994a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802994e:	fa40 f202 	asrlt.w	r2, r0, r2
 8029952:	189b      	addlt	r3, r3, r2
 8029954:	ea23 0301 	bic.w	r3, r3, r1
 8029958:	e7e5      	b.n	8029926 <floorf+0x32>
 802995a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802995e:	d3e4      	bcc.n	802992a <floorf+0x36>
 8029960:	ee30 0a00 	vadd.f32	s0, s0, s0
 8029964:	4770      	bx	lr
 8029966:	2300      	movs	r3, #0
 8029968:	e7dd      	b.n	8029926 <floorf+0x32>
 802996a:	bf00      	nop
 802996c:	7149f2ca 	.word	0x7149f2ca
 8029970:	bf800000 	.word	0xbf800000
 8029974:	007fffff 	.word	0x007fffff

08029978 <scalbnf>:
 8029978:	b508      	push	{r3, lr}
 802997a:	ee10 2a10 	vmov	r2, s0
 802997e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8029982:	ed2d 8b02 	vpush	{d8}
 8029986:	eef0 0a40 	vmov.f32	s1, s0
 802998a:	d004      	beq.n	8029996 <scalbnf+0x1e>
 802998c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8029990:	d306      	bcc.n	80299a0 <scalbnf+0x28>
 8029992:	ee70 0a00 	vadd.f32	s1, s0, s0
 8029996:	ecbd 8b02 	vpop	{d8}
 802999a:	eeb0 0a60 	vmov.f32	s0, s1
 802999e:	bd08      	pop	{r3, pc}
 80299a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80299a4:	d21c      	bcs.n	80299e0 <scalbnf+0x68>
 80299a6:	4b1f      	ldr	r3, [pc, #124]	; (8029a24 <scalbnf+0xac>)
 80299a8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8029a28 <scalbnf+0xb0>
 80299ac:	4298      	cmp	r0, r3
 80299ae:	ee60 0a27 	vmul.f32	s1, s0, s15
 80299b2:	db10      	blt.n	80299d6 <scalbnf+0x5e>
 80299b4:	ee10 2a90 	vmov	r2, s1
 80299b8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80299bc:	3b19      	subs	r3, #25
 80299be:	4403      	add	r3, r0
 80299c0:	2bfe      	cmp	r3, #254	; 0xfe
 80299c2:	dd0f      	ble.n	80299e4 <scalbnf+0x6c>
 80299c4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8029a2c <scalbnf+0xb4>
 80299c8:	eeb0 0a48 	vmov.f32	s0, s16
 80299cc:	f000 f843 	bl	8029a56 <copysignf>
 80299d0:	ee60 0a08 	vmul.f32	s1, s0, s16
 80299d4:	e7df      	b.n	8029996 <scalbnf+0x1e>
 80299d6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8029a30 <scalbnf+0xb8>
 80299da:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80299de:	e7da      	b.n	8029996 <scalbnf+0x1e>
 80299e0:	0ddb      	lsrs	r3, r3, #23
 80299e2:	e7ec      	b.n	80299be <scalbnf+0x46>
 80299e4:	2b00      	cmp	r3, #0
 80299e6:	dd06      	ble.n	80299f6 <scalbnf+0x7e>
 80299e8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80299ec:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80299f0:	ee00 3a90 	vmov	s1, r3
 80299f4:	e7cf      	b.n	8029996 <scalbnf+0x1e>
 80299f6:	f113 0f16 	cmn.w	r3, #22
 80299fa:	da06      	bge.n	8029a0a <scalbnf+0x92>
 80299fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8029a00:	4298      	cmp	r0, r3
 8029a02:	dcdf      	bgt.n	80299c4 <scalbnf+0x4c>
 8029a04:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8029a30 <scalbnf+0xb8>
 8029a08:	e7de      	b.n	80299c8 <scalbnf+0x50>
 8029a0a:	3319      	adds	r3, #25
 8029a0c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8029a10:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8029a14:	eddf 7a07 	vldr	s15, [pc, #28]	; 8029a34 <scalbnf+0xbc>
 8029a18:	ee07 3a10 	vmov	s14, r3
 8029a1c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8029a20:	e7b9      	b.n	8029996 <scalbnf+0x1e>
 8029a22:	bf00      	nop
 8029a24:	ffff3cb0 	.word	0xffff3cb0
 8029a28:	4c000000 	.word	0x4c000000
 8029a2c:	7149f2ca 	.word	0x7149f2ca
 8029a30:	0da24260 	.word	0x0da24260
 8029a34:	33000000 	.word	0x33000000

08029a38 <copysign>:
 8029a38:	ec51 0b10 	vmov	r0, r1, d0
 8029a3c:	ee11 0a90 	vmov	r0, s3
 8029a40:	ee10 2a10 	vmov	r2, s0
 8029a44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8029a48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8029a4c:	ea41 0300 	orr.w	r3, r1, r0
 8029a50:	ec43 2b10 	vmov	d0, r2, r3
 8029a54:	4770      	bx	lr

08029a56 <copysignf>:
 8029a56:	ee10 3a10 	vmov	r3, s0
 8029a5a:	ee10 2a90 	vmov	r2, s1
 8029a5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8029a62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8029a66:	4313      	orrs	r3, r2
 8029a68:	ee00 3a10 	vmov	s0, r3
 8029a6c:	4770      	bx	lr
	...

08029a70 <_init>:
 8029a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029a72:	bf00      	nop
 8029a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029a76:	bc08      	pop	{r3}
 8029a78:	469e      	mov	lr, r3
 8029a7a:	4770      	bx	lr

08029a7c <_fini>:
 8029a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029a7e:	bf00      	nop
 8029a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029a82:	bc08      	pop	{r3}
 8029a84:	469e      	mov	lr, r3
 8029a86:	4770      	bx	lr
